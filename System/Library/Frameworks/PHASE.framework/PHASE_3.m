void sub_222028E94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, void *a16, void **a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char *a37)
{
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;

  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](v41);
  a37 = &a27;
  std::vector<Phase::Envelope<double>::Segment,std::allocator<Phase::Envelope<double>::Segment>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a37);

  Phase::Controller::ProfileRegistry::Parameter::~Parameter(a17);
  _Unwind_Resume(a1);
}

void sub_222028EC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  JUMPOUT(0x222029570);
}

void sub_222028FD0()
{
  JUMPOUT(0x222029484);
}

void sub_22202909C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t *a31)
{
  a31 = &a22;
  std::vector<Phase::Envelope<double>::Segment,std::allocator<Phase::Envelope<double>::Segment>>::__destroy_vector::operator()[abi:ne180100](&a31);

  JUMPOUT(0x222029570);
}

void sub_2220291D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void **a31)
{
  a31 = (void **)&a22;
  std::vector<Phase::Envelope<double>::Segment,std::allocator<Phase::Envelope<double>::Segment>>::__destroy_vector::operator()[abi:ne180100](&a31);

  JUMPOUT(0x222029570);
}

void sub_222029314(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void **a37)
{
  a37 = (void **)&a27;
  std::vector<Phase::Envelope<double>::Segment,std::allocator<Phase::Envelope<double>::Segment>>::__destroy_vector::operator()[abi:ne180100](&a37);
  JUMPOUT(0x2220294D0);
}

void sub_22202934C()
{
}

void sub_222029354()
{
}

void sub_22202935C()
{
}

void sub_222029364()
{
}

void sub_22202936C()
{
}

void sub_222029374()
{
}

void sub_22202937C()
{
}

void sub_222029384(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,char a39)
{
  JUMPOUT(0x222029588);
}

void sub_2220293A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (!*(unsigned char *)(a17 + 16)) {
    free(*(void **)(a17 + 8));
  }
  *(void *)a17 = 0;
  *(void *)(a17 + 8) = v17;
  *(unsigned char *)(a17 + 16) = 1;
  JUMPOUT(0x222029578);
}

void sub_2220293D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void **a37)
{
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](v41);
  a37 = (void **)&a27;
  std::vector<Phase::Envelope<double>::Segment,std::allocator<Phase::Envelope<double>::Segment>>::__destroy_vector::operator()[abi:ne180100](&a37);

  JUMPOUT(0x222029570);
}

void sub_222029408()
{
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](v0);
  JUMPOUT(0x2220294A4);
}

void sub_222029438()
{
}

void sub_222029444(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_222029454()
{
}

void sub_22202945C()
{
}

void sub_222029468()
{
  __cxa_free_exception(v0);
  JUMPOUT(0x22202952CLL);
}

void sub_2220294F4()
{
}

void sub_222029504()
{
  JUMPOUT(0x222029528);
}

void sub_222029510(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  JUMPOUT(0x22202953CLL);
}

void Phase::Controller::ProfileRegistry::Parameter::~Parameter(void **this)
{
  v2 = this + 3;
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (!*((unsigned char *)this + 16)) {
    free(this[1]);
  }
  *this = 0;
  this[1] = &str_33;
  *((unsigned char *)this + 16) = 1;
}

void Phase::Controller::CategoryFromDictionary(Phase::Controller *this, NSDictionary *a2)
{
  uint64_t v186 = *MEMORY[0x263EF8340];
  v5 = a2;
  *(void *)this = 0;
  *((void *)this + 1) = &str_33;
  *((unsigned char *)this + 16) = 1;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = &str_33;
  *((unsigned char *)this + 40) = 1;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 1065353216;
  v158 = this;
  v149 = v5;
  Phase::Controller::StringIdFromDictionary((Phase::Controller *)v174, v5, &cfstr_Name_0.isa);
  Phase::StringId::operator=((uint64_t)this, (uint64_t)v174);
  if (!v174[16]) {
    free(*(void **)&v174[8]);
  }
  Phase::Controller::StringIdFromDictionary((Phase::Controller *)v174, v5, &cfstr_Modeler.isa);
  Phase::StringId::operator=((uint64_t)this + 24, (uint64_t)v174);
  if (!v174[16]) {
    free(*(void **)&v174[8]);
  }
  v150 = (void **)((char *)this + 56);
  *((double *)this + 6) = Phase::Controller::DoubleFromDictionary((Phase::Controller *)v5, (NSDictionary *)@"ComputeWeight", v6);
  v7 = v5;
  v8 = @"Graphs";
  v151 = v7;
  uint64_t v9 = [(NSDictionary *)v7 objectForKeyedSubscript:@"Graphs"];
  if (!v9)
  {
    v133 = NSString;
    v134 = [MEMORY[0x263F086E0] mainBundle];
    v135 = [v134 localizedStringForKey:@"[NSDictionary objectForKey] failed for key: %@" value:&stru_26D47BF58 table:0];
    v136 = objc_msgSend(v133, "stringWithFormat:", v135, @"Graphs", v149);

    v138 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v137)
                                                                                         + 784)));
    if (os_log_type_enabled(v138, OS_LOG_TYPE_ERROR))
    {
      uint64_t v139 = [v136 UTF8String];
      *(_DWORD *)v174 = 136315650;
      *(void *)&v174[4] = "ProfileRegistry.mm";
      *(_WORD *)&v174[12] = 1024;
      *(_DWORD *)&v174[14] = 639;
      __int16 v175 = 2080;
      *(void *)v176 = v139;
      _os_log_impl(&dword_221E5E000, v138, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (ProfileRegistryException::MissingRequiredField): \"%s\"", v174, 0x1Cu);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "%s");
    exception->__vftable = (std::logic_error_vtbl *)&unk_26D479C10;
  }
  objc_opt_class();
  v153 = (void *)v9;
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v141 = NSString;
    v142 = [MEMORY[0x263F086E0] mainBundle];
    v143 = [v142 localizedStringForKey:@"[NSObject isKindOfClass:[[NSArray class]]] failed for key: %@" value:&stru_26D47BF58 table:0];
    v144 = objc_msgSend(v141, "stringWithFormat:", v143, @"Graphs", v149);

    v146 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v145)
                                                                                         + 784)));
    if (os_log_type_enabled(v146, OS_LOG_TYPE_ERROR))
    {
      uint64_t v147 = [v144 UTF8String];
      *(_DWORD *)v174 = 136315650;
      *(void *)&v174[4] = "ProfileRegistry.mm";
      *(_WORD *)&v174[12] = 1024;
      *(_DWORD *)&v174[14] = 646;
      __int16 v175 = 2080;
      *(void *)v176 = v147;
      _os_log_impl(&dword_221E5E000, v146, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (ProfileRegistryException::FieldWithWrongType): \"%s\"", v174, 0x1Cu);
    }

    v148 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v148, "%s");
    v148->__vftable = (std::logic_error_vtbl *)&unk_26D479C38;
  }
  unint64_t v10 = 0;
  long long v159 = 0u;
  long long v160 = 0u;
  float v161 = 1.0;
  while ([v153 count] > v10)
  {
    unint64_t v152 = v10;
    v11 = [v153 objectAtIndexedSubscript:v10];
    unint64_t v162 = 0;
    __s2 = (char *)&str_33;
    char v164 = 1;
    long long __p = 0u;
    long long v166 = 0u;
    int v167 = 1065353216;
    Phase::Controller::StringIdFromDictionary((Phase::Controller *)v174, v11, &cfstr_Name_0.isa);
    Phase::StringId::operator=((uint64_t)&v162, (uint64_t)v174);
    if (!v174[16]) {
      free(*(void **)&v174[8]);
    }
    v12 = v11;
    v13 = @"Stages";
    v154 = v12;
    v156 = [(NSDictionary *)v12 objectForKeyedSubscript:@"Stages"];
    if (!v156)
    {
      v117 = NSString;
      v118 = [MEMORY[0x263F086E0] mainBundle];
      v119 = [v118 localizedStringForKey:@"[NSDictionary objectForKey] failed for key: %@" value:&stru_26D47BF58 table:0];
      v120 = objc_msgSend(v117, "stringWithFormat:", v119, @"Stages", v149);

      v122 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v121)
                                                                                           + 784)));
      if (os_log_type_enabled(v122, OS_LOG_TYPE_ERROR))
      {
        uint64_t v123 = [v120 UTF8String];
        *(_DWORD *)v174 = 136315650;
        *(void *)&v174[4] = "ProfileRegistry.mm";
        *(_WORD *)&v174[12] = 1024;
        *(_DWORD *)&v174[14] = 639;
        __int16 v175 = 2080;
        *(void *)v176 = v123;
        _os_log_impl(&dword_221E5E000, v122, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (ProfileRegistryException::MissingRequiredField): \"%s\"", v174, 0x1Cu);
      }

      v124 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v124, "%s");
      v124->__vftable = (std::logic_error_vtbl *)&unk_26D479C10;
    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      v125 = NSString;
      v126 = [MEMORY[0x263F086E0] mainBundle];
      v127 = [v126 localizedStringForKey:@"[NSObject isKindOfClass:[[NSArray class]]] failed for key: %@" value:&stru_26D47BF58 table:0];
      v128 = objc_msgSend(v125, "stringWithFormat:", v127, @"Stages", v149);

      v130 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v129)
                                                                                           + 784)));
      if (os_log_type_enabled(v130, OS_LOG_TYPE_ERROR))
      {
        uint64_t v131 = [v128 UTF8String];
        *(_DWORD *)v174 = 136315650;
        *(void *)&v174[4] = "ProfileRegistry.mm";
        *(_WORD *)&v174[12] = 1024;
        *(_DWORD *)&v174[14] = 646;
        __int16 v175 = 2080;
        *(void *)v176 = v131;
        _os_log_impl(&dword_221E5E000, v130, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (ProfileRegistryException::FieldWithWrongType): \"%s\"", v174, 0x1Cu);
      }

      v132 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v132, "%s");
      v132->__vftable = (std::logic_error_vtbl *)&unk_26D479C38;
    }
    unint64_t v14 = 0;
    long long v168 = 0u;
    long long v169 = 0u;
    float v170 = 1.0;
    while ([v156 count] > v14)
    {
      v15 = [v156 objectAtIndexedSubscript:v14];
      *(void *)v174 = 0;
      *(void *)&v174[8] = &str_33;
      v174[16] = 1;
      *(_OWORD *)&v176[4] = 0u;
      long long v177 = 0u;
      int v178 = 1065353216;
      Phase::Controller::StringIdFromDictionary((Phase::Controller *)v182, v15, &cfstr_Name_0.isa);
      Phase::StringId::operator=((uint64_t)v174, (uint64_t)v182);
      unint64_t v155 = v14;
      if (!v182[16]) {
        free(*(void **)&v182[8]);
      }
      v16 = v15;
      uint64_t v17 = @"Parameters";
      v157 = v16;
      uint64_t v2 = [(NSDictionary *)v16 objectForKeyedSubscript:@"Parameters"];
      if (!v2)
      {
        v107 = NSString;
        v108 = [MEMORY[0x263F086E0] mainBundle];
        v109 = [v108 localizedStringForKey:@"[NSDictionary objectForKey] failed for key: %@" value:&stru_26D47BF58 table:0];
        v110 = objc_msgSend(v107, "stringWithFormat:", v109, @"Parameters", v149);

        v112 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v111)
                                                                                             + 784)));
        if (os_log_type_enabled(v112, OS_LOG_TYPE_ERROR))
        {
          uint64_t v113 = [v110 UTF8String];
          *(_DWORD *)v182 = 136315650;
          *(void *)&v182[4] = "ProfileRegistry.mm";
          *(_WORD *)&v182[12] = 1024;
          *(_DWORD *)&v182[14] = 639;
          __int16 v183 = 2080;
          *(void *)v184 = v113;
          _os_log_impl(&dword_221E5E000, v112, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (ProfileRegistryException::MissingRequiredField): \"%s\"", v182, 0x1Cu);
        }

        v114 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v114, "%s");
        v114->__vftable = (std::logic_error_vtbl *)&unk_26D479C10;
      }
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        v99 = NSString;
        v100 = [MEMORY[0x263F086E0] mainBundle];
        v101 = [v100 localizedStringForKey:@"[NSObject isKindOfClass:[[NSArray class]]] failed for key: %@" value:&stru_26D47BF58 table:0];
        v102 = objc_msgSend(v99, "stringWithFormat:", v101, @"Parameters", v149);

        v104 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v103)
                                                                                             + 784)));
        if (os_log_type_enabled(v104, OS_LOG_TYPE_ERROR))
        {
          uint64_t v105 = [v102 UTF8String];
          *(_DWORD *)v182 = 136315650;
          *(void *)&v182[4] = "ProfileRegistry.mm";
          *(_WORD *)&v182[12] = 1024;
          *(_DWORD *)&v182[14] = 646;
          __int16 v183 = 2080;
          *(void *)v184 = v105;
          _os_log_impl(&dword_221E5E000, v104, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (ProfileRegistryException::FieldWithWrongType): \"%s\"", v182, 0x1Cu);
        }

        v106 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v106, "%s");
        v106->__vftable = (std::logic_error_vtbl *)&unk_26D479C38;
      }
      unint64_t v18 = 0;
      long long v171 = 0u;
      long long v172 = 0u;
      float v173 = 1.0;
      while ([(id)v2 count] > v18)
      {
        v19 = [(id)v2 objectAtIndexedSubscript:v18];
        Phase::Controller::ParameterFromDictionary((Phase::Controller *)v182, v19);

        unint64_t v20 = *(void *)v182;
        unint64_t v21 = *((void *)&v171 + 1);
        if (*((void *)&v171 + 1))
        {
          uint8x8_t v22 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v171 + 8));
          v22.i16[0] = vaddlv_u8(v22);
          unint64_t v23 = v22.u32[0];
          if (v22.u32[0] > 1uLL)
          {
            uint64_t v3 = *(void *)v182;
            if (*((void *)&v171 + 1) <= *(void *)v182) {
              uint64_t v3 = *(void *)v182 % *((void *)&v171 + 1);
            }
          }
          else
          {
            uint64_t v3 = (*((void *)&v171 + 1) - 1) & *(void *)v182;
          }
          v24 = *(void **)(v171 + 8 * v3);
          if (v24)
          {
            v25 = (void *)*v24;
            if (*v24)
            {
              v26 = *(const char **)&v182[8];
              while (1)
              {
                unint64_t v27 = v25[1];
                if (v27 == v20)
                {
                  if (v25[2] == v20)
                  {
                    v28 = (Phase::Logger *)v25[3];
                    if (v28 == (Phase::Logger *)v26
                      || (v28 = (Phase::Logger *)strcmp((const char *)v28, v26), !v28))
                    {
                      v95 = **(id **)(Phase::Logger::GetInstance(v28) + 784);
                      if (os_log_type_enabled(v95, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)buf = 136315650;
                        *(void *)&buf[4] = "ProfileRegistry.mm";
                        *(_WORD *)&buf[12] = 1024;
                        *(_DWORD *)&buf[14] = 656;
                        __int16 v180 = 2080;
                        uint64_t v181 = *(void *)&v182[8];
                        _os_log_impl(&dword_221E5E000, v95, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (ProfileRegistryException::DuplicateEntry) [!pair.second is true]: \"Entry with name %s already exists\"", buf, 0x1Cu);
                      }

                      v96 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                      std::logic_error::logic_error(v96, "Entry with name %s already exists");
                      v96->__vftable = (std::logic_error_vtbl *)&unk_26D479E60;
                    }
                  }
                }
                else
                {
                  if (v23 > 1)
                  {
                    if (v27 >= v21) {
                      v27 %= v21;
                    }
                  }
                  else
                  {
                    v27 &= v21 - 1;
                  }
                  if (v27 != v3)
                  {
LABEL_40:
                    this = v158;
                    break;
                  }
                }
                v25 = (void *)*v25;
                if (!v25) {
                  goto LABEL_40;
                }
              }
            }
          }
        }
        v29 = operator new(0x58uLL);
        *(void *)buf = v29;
        *(void *)&buf[8] = &v172;
        buf[16] = 0;
        void *v29 = 0;
        v29[1] = v20;
        Phase::StringId::StringId((uint64_t)(v29 + 2), (uint64_t)v182);
        Phase::StringId::StringId((uint64_t)(v29 + 5), (uint64_t)v182);
        v29[8] = 0;
        v29[9] = 0;
        v29[10] = 0;
        std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__init_with_size[abi:ne180100]<Phase::Envelope<double>::SegmentInternal*,Phase::Envelope<double>::SegmentInternal*>(v29 + 8, *(uint64_t *)&v184[4], v185, (v185 - *(void *)&v184[4]) >> 6);
        buf[16] = 1;
        float v30 = (float)(unint64_t)(*((void *)&v172 + 1) + 1);
        if (!v21 || (float)(v173 * (float)v21) < v30)
        {
          BOOL v31 = (v21 & (v21 - 1)) != 0;
          if (v21 < 3) {
            BOOL v31 = 1;
          }
          unint64_t v32 = v31 | (2 * v21);
          unint64_t v33 = vcvtps_u32_f32(v30 / v173);
          if (v32 <= v33) {
            size_t v34 = v33;
          }
          else {
            size_t v34 = v32;
          }
          std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>((uint64_t)&v171, v34);
          unint64_t v21 = *((void *)&v171 + 1);
          if ((*((void *)&v171 + 1) & (*((void *)&v171 + 1) - 1)) != 0)
          {
            if (*((void *)&v171 + 1) <= v20) {
              uint64_t v3 = v20 % *((void *)&v171 + 1);
            }
            else {
              uint64_t v3 = v20;
            }
          }
          else
          {
            uint64_t v3 = (*((void *)&v171 + 1) - 1) & v20;
          }
        }
        uint64_t v35 = v171;
        v36 = *(void **)(v171 + 8 * v3);
        if (v36)
        {
          void *v29 = *v36;
        }
        else
        {
          void *v29 = v172;
          *(void *)&long long v172 = v29;
          *(void *)(v35 + 8 * v3) = &v172;
          if (!*v29) {
            goto LABEL_62;
          }
          unint64_t v37 = *(void *)(*v29 + 8);
          if ((v21 & (v21 - 1)) != 0)
          {
            if (v37 >= v21) {
              v37 %= v21;
            }
          }
          else
          {
            v37 &= v21 - 1;
          }
          v36 = (void *)(v171 + 8 * v37);
        }
        void *v36 = v29;
LABEL_62:
        *(void *)buf = 0;
        ++*((void *)&v172 + 1);
        std::unique_ptr<std::__hash_node<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>,void *>>>>::reset[abi:ne180100]((uint64_t)buf);
        *(void *)buf = &v184[4];
        std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        if (!v182[16]) {
          free(*(void **)&v182[8]);
        }
        ++v18;
      }

      if (*((void *)&v177 + 1))
      {
        std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>>>::__deallocate_node((uint64_t)&v176[4], (void *)v177);
        *(void *)&long long v177 = 0;
        uint64_t v38 = *(void *)&v176[12];
        if (*(void *)&v176[12])
        {
          uint64_t v39 = 0;
          do
            *(void *)(*(void *)&v176[4] + 8 * v39++) = 0;
          while (v38 != v39);
        }
        *((void *)&v177 + 1) = 0;
      }
      uint64_t v40 = v171;
      *(void *)&long long v171 = 0;
      v41 = *(void **)&v176[4];
      *(void *)&v176[4] = v40;
      if (v41) {
        operator delete(v41);
      }
      unint64_t v42 = *((void *)&v171 + 1);
      *((void *)&v171 + 1) = 0;
      long long v177 = v172;
      int v178 = LODWORD(v173);
      *(void *)&v176[12] = v42;
      if (*((void *)&v172 + 1))
      {
        unint64_t v43 = *(void *)(v172 + 8);
        if ((v42 & (v42 - 1)) != 0)
        {
          if (v43 >= v42) {
            v43 %= v42;
          }
        }
        else
        {
          v43 &= v42 - 1;
        }
        *(void *)(*(void *)&v176[4] + 8 * v43) = &v177;
        long long v172 = 0uLL;
      }
      std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>>>::~__hash_table((uint64_t)&v171);

      unint64_t v44 = *(void *)v174;
      unint64_t v45 = *((void *)&v168 + 1);
      if (*((void *)&v168 + 1))
      {
        uint8x8_t v46 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v168 + 8));
        v46.i16[0] = vaddlv_u8(v46);
        unint64_t v47 = v46.u32[0];
        if (v46.u32[0] > 1uLL)
        {
          uint64_t v2 = *(void *)v174;
          if (*((void *)&v168 + 1) <= *(void *)v174) {
            uint64_t v2 = *(void *)v174 % *((void *)&v168 + 1);
          }
        }
        else
        {
          uint64_t v2 = (*((void *)&v168 + 1) - 1) & *(void *)v174;
        }
        v48 = *(void **)(v168 + 8 * v2);
        if (v48)
        {
          v49 = (void *)*v48;
          if (*v48)
          {
            v50 = *(const char **)&v174[8];
            uint64_t v3 = *((void *)&v168 + 1) - 1;
            do
            {
              unint64_t v51 = v49[1];
              if (v51 == v44)
              {
                if (v49[2] == v44)
                {
                  v52 = (Phase::Logger *)v49[3];
                  if (v52 == (Phase::Logger *)v50
                    || (v52 = (Phase::Logger *)strcmp((const char *)v52, v50), !v52))
                  {
                    v97 = **(id **)(Phase::Logger::GetInstance(v52) + 784);
                    if (os_log_type_enabled(v97, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)v182 = 136315650;
                      *(void *)&v182[4] = "ProfileRegistry.mm";
                      *(_WORD *)&v182[12] = 1024;
                      *(_DWORD *)&v182[14] = 656;
                      __int16 v183 = 2080;
                      *(void *)v184 = *(void *)&v174[8];
                      _os_log_impl(&dword_221E5E000, v97, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (ProfileRegistryException::DuplicateEntry) [!pair.second is true]: \"Entry with name %s already exists\"", v182, 0x1Cu);
                    }

                    v98 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                    std::logic_error::logic_error(v98, "Entry with name %s already exists");
                    v98->__vftable = (std::logic_error_vtbl *)&unk_26D479E60;
                  }
                }
              }
              else
              {
                if (v47 > 1)
                {
                  if (v51 >= v45) {
                    v51 %= v45;
                  }
                }
                else
                {
                  v51 &= v3;
                }
                if (v51 != v2) {
                  break;
                }
              }
              v49 = (void *)*v49;
            }
            while (v49);
          }
        }
      }
      v53 = operator new(0x68uLL);
      void *v53 = 0;
      v53[1] = v44;
      Phase::StringId::StringId((uint64_t)(v53 + 2), (uint64_t)v174);
      Phase::StringId::StringId((uint64_t)(v53 + 5), (uint64_t)v174);
      std::unordered_map<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>::unordered_map((uint64_t)(v53 + 8), (uint64_t)&v176[4]);
      float v54 = (float)(unint64_t)(*((void *)&v169 + 1) + 1);
      if (!v45 || (float)(v170 * (float)v45) < v54)
      {
        BOOL v55 = (v45 & (v45 - 1)) != 0;
        if (v45 < 3) {
          BOOL v55 = 1;
        }
        unint64_t v56 = v55 | (2 * v45);
        unint64_t v57 = vcvtps_u32_f32(v54 / v170);
        if (v56 <= v57) {
          size_t v58 = v57;
        }
        else {
          size_t v58 = v56;
        }
        std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>((uint64_t)&v168, v58);
        unint64_t v45 = *((void *)&v168 + 1);
        if ((*((void *)&v168 + 1) & (*((void *)&v168 + 1) - 1)) != 0)
        {
          if (*((void *)&v168 + 1) <= v44) {
            uint64_t v2 = v44 % *((void *)&v168 + 1);
          }
          else {
            uint64_t v2 = v44;
          }
        }
        else
        {
          uint64_t v2 = (*((void *)&v168 + 1) - 1) & v44;
        }
      }
      uint64_t v59 = v168;
      v60 = *(void **)(v168 + 8 * v2);
      if (v60)
      {
        void *v53 = *v60;
        goto LABEL_117;
      }
      void *v53 = v169;
      *(void *)&long long v169 = v53;
      *(void *)(v59 + 8 * v2) = &v169;
      if (*v53)
      {
        unint64_t v61 = *(void *)(*v53 + 8);
        if ((v45 & (v45 - 1)) != 0)
        {
          if (v61 >= v45) {
            v61 %= v45;
          }
        }
        else
        {
          v61 &= v45 - 1;
        }
        v60 = (void *)(v168 + 8 * v61);
LABEL_117:
        void *v60 = v53;
      }
      ++*((void *)&v169 + 1);
      std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>>>::~__hash_table((uint64_t)&v176[4]);
      if (!v174[16]) {
        free(*(void **)&v174[8]);
      }
      unint64_t v14 = v155 + 1;
    }

    if (*((void *)&v166 + 1))
    {
      std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Stage>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Stage>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Stage>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Stage>>>::__deallocate_node((uint64_t)&__p, (void **)v166);
      *(void *)&long long v166 = 0;
      uint64_t v62 = *((void *)&__p + 1);
      if (*((void *)&__p + 1))
      {
        uint64_t v63 = 0;
        do
          *(void *)(__p + 8 * v63++) = 0;
        while (v62 != v63);
      }
      *((void *)&v166 + 1) = 0;
    }
    uint64_t v64 = v168;
    *(void *)&long long v168 = 0;
    v65 = (void *)__p;
    *(void *)&long long __p = v64;
    if (v65) {
      operator delete(v65);
    }
    unint64_t v66 = *((void *)&v168 + 1);
    *((void *)&v168 + 1) = 0;
    long long v166 = v169;
    int v167 = LODWORD(v170);
    *((void *)&__p + 1) = v66;
    if (*((void *)&v169 + 1))
    {
      unint64_t v67 = *(void *)(v169 + 8);
      if ((v66 & (v66 - 1)) != 0)
      {
        if (v67 >= v66) {
          v67 %= v66;
        }
      }
      else
      {
        v67 &= v66 - 1;
      }
      *(void *)(__p + 8 * v67) = &v166;
      long long v169 = 0uLL;
    }
    std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Stage>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Stage>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Stage>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Stage>>>::~__hash_table((uint64_t)&v168);

    unint64_t v68 = v162;
    unint64_t v69 = *((void *)&v159 + 1);
    if (*((void *)&v159 + 1))
    {
      uint8x8_t v70 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v159 + 8));
      v70.i16[0] = vaddlv_u8(v70);
      unint64_t v71 = v70.u32[0];
      if (v70.u32[0] > 1uLL)
      {
        uint64_t v2 = v162;
        if (*((void *)&v159 + 1) <= v162) {
          uint64_t v2 = v162 % *((void *)&v159 + 1);
        }
      }
      else
      {
        uint64_t v2 = (*((void *)&v159 + 1) - 1) & v162;
      }
      v72 = *(void **)(v159 + 8 * v2);
      if (v72)
      {
        v73 = (void *)*v72;
        if (*v72)
        {
          v74 = __s2;
          uint64_t v3 = *((void *)&v159 + 1) - 1;
          do
          {
            unint64_t v75 = v73[1];
            if (v75 == v68)
            {
              if (v73[2] == v68)
              {
                v76 = (Phase::Logger *)v73[3];
                if (v76 == (Phase::Logger *)v74
                  || (v76 = (Phase::Logger *)strcmp((const char *)v76, v74), !v76))
                {
                  v115 = **(id **)(Phase::Logger::GetInstance(v76) + 784);
                  if (os_log_type_enabled(v115, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)v174 = 136315650;
                    *(void *)&v174[4] = "ProfileRegistry.mm";
                    *(_WORD *)&v174[12] = 1024;
                    *(_DWORD *)&v174[14] = 656;
                    __int16 v175 = 2080;
                    *(void *)v176 = __s2;
                    _os_log_impl(&dword_221E5E000, v115, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (ProfileRegistryException::DuplicateEntry) [!pair.second is true]: \"Entry with name %s already exists\"", v174, 0x1Cu);
                  }

                  v116 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                  std::logic_error::logic_error(v116, "Entry with name %s already exists");
                  v116->__vftable = (std::logic_error_vtbl *)&unk_26D479E60;
                }
              }
            }
            else
            {
              if (v71 > 1)
              {
                if (v75 >= v69) {
                  v75 %= v69;
                }
              }
              else
              {
                v75 &= v3;
              }
              if (v75 != v2) {
                break;
              }
            }
            v73 = (void *)*v73;
          }
          while (v73);
        }
      }
    }
    v77 = operator new(0x68uLL);
    void *v77 = 0;
    v77[1] = v68;
    Phase::StringId::StringId((uint64_t)(v77 + 2), (uint64_t)&v162);
    Phase::StringId::StringId((uint64_t)(v77 + 5), (uint64_t)&v162);
    std::unordered_map<Phase::StringId,Phase::Controller::ProfileRegistry::Stage>::unordered_map((uint64_t)(v77 + 8), (uint64_t)&__p);
    float v78 = (float)(unint64_t)(*((void *)&v160 + 1) + 1);
    if (!v69 || (float)(v161 * (float)v69) < v78)
    {
      BOOL v79 = (v69 & (v69 - 1)) != 0;
      if (v69 < 3) {
        BOOL v79 = 1;
      }
      unint64_t v80 = v79 | (2 * v69);
      unint64_t v81 = vcvtps_u32_f32(v78 / v161);
      if (v80 <= v81) {
        size_t v82 = v81;
      }
      else {
        size_t v82 = v80;
      }
      std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>((uint64_t)&v159, v82);
      unint64_t v69 = *((void *)&v159 + 1);
      if ((*((void *)&v159 + 1) & (*((void *)&v159 + 1) - 1)) != 0)
      {
        if (*((void *)&v159 + 1) <= v68) {
          uint64_t v2 = v68 % *((void *)&v159 + 1);
        }
        else {
          uint64_t v2 = v68;
        }
      }
      else
      {
        uint64_t v2 = (*((void *)&v159 + 1) - 1) & v68;
      }
    }
    uint64_t v83 = v159;
    v84 = *(void **)(v159 + 8 * v2);
    if (v84)
    {
      void *v77 = *v84;
      goto LABEL_173;
    }
    void *v77 = v160;
    *(void *)&long long v160 = v77;
    *(void *)(v83 + 8 * v2) = &v160;
    if (*v77)
    {
      unint64_t v85 = *(void *)(*v77 + 8);
      if ((v69 & (v69 - 1)) != 0)
      {
        if (v85 >= v69) {
          v85 %= v69;
        }
      }
      else
      {
        v85 &= v69 - 1;
      }
      v84 = (void *)(v159 + 8 * v85);
LABEL_173:
      void *v84 = v77;
    }
    ++*((void *)&v160 + 1);
    std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Stage>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Stage>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Stage>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Stage>>>::~__hash_table((uint64_t)&__p);
    if (!v164) {
      free(__s2);
    }
    unint64_t v10 = v152 + 1;
  }

  if (*((void *)this + 10))
  {
    std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Graph>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Graph>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Graph>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Graph>>>::__deallocate_node((uint64_t)v150, *((void ***)this + 9));
    *((void *)this + 9) = 0;
    uint64_t v86 = *((void *)this + 8);
    if (v86)
    {
      for (uint64_t i = 0; i != v86; ++i)
        *((void *)*v150 + i) = 0;
    }
    *((void *)this + 10) = 0;
  }
  v88 = (void *)v159;
  *(void *)&long long v159 = 0;
  v89 = *v150;
  *v150 = v88;
  if (v89) {
    operator delete(v89);
  }
  unint64_t v90 = *((void *)&v159 + 1);
  uint64_t v91 = v160;
  *((void *)this + 9) = v160;
  v92 = (char *)this + 72;
  *((void *)v92 - 1) = v90;
  *((void *)&v159 + 1) = 0;
  uint64_t v93 = *((void *)&v160 + 1);
  *((void *)v92 + 1) = *((void *)&v160 + 1);
  *((float *)v92 + 4) = v161;
  if (v93)
  {
    unint64_t v94 = *(void *)(v91 + 8);
    if ((v90 & (v90 - 1)) != 0)
    {
      if (v94 >= v90) {
        v94 %= v90;
      }
    }
    else
    {
      v94 &= v90 - 1;
    }
    *((void *)*v150 + v94) = v92;
    long long v160 = 0uLL;
  }
  std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Graph>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Graph>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Graph>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Graph>>>::~__hash_table((uint64_t)&v159);
}

void sub_22202AD78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void **a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54)
{
  Phase::Controller::ProfileRegistry::Category::~Category(a27);
  _Unwind_Resume(a1);
}

void Phase::Controller::ProfileRegistry::Category::~Category(void **this)
{
  if (!*((unsigned char *)this + 40)) {
    free(this[4]);
  }
  this[3] = 0;
  this[4] = &str_33;
  *((unsigned char *)this + 40) = 1;
  if (!*((unsigned char *)this + 16)) {
    free(this[1]);
  }
  *this = 0;
  this[1] = &str_33;
  *((unsigned char *)this + 16) = 1;
}

void Phase::Controller::ProfileRegistry::AddFromJSONFile(Phase::Controller::ProfileRegistry *this, NSURL *a2, Phase::Controller::SpatialModelerRegistry *a3)
{
  uint64_t v385 = *MEMORY[0x263EF8340];
  v6 = a2;
  v328 = v6;
  if (!v6)
  {
    v272 = NSString;
    v273 = [MEMORY[0x263F086E0] mainBundle];
    v274 = [v273 localizedStringForKey:@"inFileURL is nil" value:&stru_26D47BF58 table:0];
    v275 = [v272 stringWithFormat:v274];

    v277 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v276)
                                                                                         + 784)));
    if (os_log_type_enabled(v277, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "ProfileRegistry.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 667;
      __int16 v370 = 2080;
      *(void *)v371 = [v275 UTF8String];
      _os_log_impl(&dword_221E5E000, v277, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (ProfileRegistryException::NilURL): \"%s\"", buf, 0x1Cu);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "%s");
    exception->__vftable = (std::logic_error_vtbl *)&unk_26D479D28;
  }
  id v355 = 0;
  uint64_t v7 = [MEMORY[0x263EFF8F8] dataWithContentsOfURL:v6 options:2 error:&v355];
  id v8 = v355;
  v327 = (void *)v7;
  if (!v7)
  {
    v279 = NSString;
    v280 = [MEMORY[0x263F086E0] mainBundle];
    v281 = [v280 localizedStringForKey:@"[NSData dataWithContentsOfUrl] failed to read file %@ with error: %@" value:&stru_26D47BF58 table:0];
    v282 = [(NSURL *)v328 resourceSpecifier];
    v283 = [v8 localizedDescription];
    v284 = objc_msgSend(v279, "stringWithFormat:", v281, v282, v283);

    v286 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v285)
                                                                                         + 784)));
    if (os_log_type_enabled(v286, OS_LOG_TYPE_ERROR))
    {
      uint64_t v287 = [v284 UTF8String];
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "ProfileRegistry.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 677;
      __int16 v370 = 2080;
      *(void *)v371 = v287;
      _os_log_impl(&dword_221E5E000, v286, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (ProfileRegistryException::InvalidURL): \"%s\"", buf, 0x1Cu);
    }

    v288 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v288, "%s");
    v288->__vftable = (std::logic_error_vtbl *)&unk_26D479D50;
  }
  id v354 = v8;
  v331 = [MEMORY[0x263F08900] JSONObjectWithData:v7 options:0 error:&v354];
  id v329 = v354;

  if (!v331 || v329)
  {
    v289 = NSString;
    v290 = [MEMORY[0x263F086E0] mainBundle];
    v291 = [v290 localizedStringForKey:@"[NSJSONSerialization JSONObjectWithData] failed to parse data %@ with error: %@" value:&stru_26D47BF58 table:0];
    v292 = [v327 description];
    v293 = [v329 localizedDescription];
    v294 = objc_msgSend(v289, "stringWithFormat:", v291, v292, v293);

    v296 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v295)
                                                                                         + 784)));
    if (os_log_type_enabled(v296, OS_LOG_TYPE_ERROR))
    {
      uint64_t v297 = [v294 UTF8String];
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "ProfileRegistry.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 686;
      __int16 v370 = 2080;
      *(void *)v371 = v297;
      _os_log_impl(&dword_221E5E000, v296, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (ProfileRegistryException::InvalidJSON): \"%s\"", buf, 0x1Cu);
    }

    v298 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v298, "%s");
    v298->__vftable = (std::logic_error_vtbl *)&unk_26D479D78;
  }
  objc_opt_class();
  uint64_t isKindOfClass = objc_opt_isKindOfClass();
  if ((isKindOfClass & 1) == 0)
  {
    v299 = NSString;
    v300 = [MEMORY[0x263F086E0] mainBundle];
    v301 = [v300 localizedStringForKey:@"[NSObject isKindOfClass:[[NSDictionary class]]] failed for jsonObject: %@" value:&stru_26D47BF58 table:0];
    v302 = [v331 description];
    v303 = objc_msgSend(v299, "stringWithFormat:", v301, v302);

    v305 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v304)
                                                                                         + 784)));
    if (os_log_type_enabled(v305, OS_LOG_TYPE_ERROR))
    {
      uint64_t v306 = [v303 UTF8String];
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "ProfileRegistry.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 694;
      __int16 v370 = 2080;
      *(void *)v371 = v306;
      _os_log_impl(&dword_221E5E000, v305, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (ProfileRegistryException::FieldWithWrongType): \"%s\"", buf, 0x1Cu);
    }

    v307 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v307, "%s");
    v307->__vftable = (std::logic_error_vtbl *)&unk_26D479C38;
  }
  unint64_t v10 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance((Phase::Logger *)isKindOfClass)
                                                                                      + 784)));
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    id v11 = [(NSURL *)v328 absoluteString];
    uint64_t v12 = [v11 UTF8String];
    *(_DWORD *)buf = 136315906;
    *(void *)&buf[4] = "ProfileRegistry.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 698;
    __int16 v370 = 2048;
    *(void *)v371 = this;
    *(_WORD *)&v371[8] = 2080;
    *(void *)&v371[10] = v12;
    _os_log_impl(&dword_221E5E000, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d profileregistry@%p: Loading profiles from file '%s'.", buf, 0x26u);
  }
  id v13 = v331;
  unint64_t v14 = @"Profiles";
  v330 = v13;
  v15 = [v13 objectForKeyedSubscript:@"Profiles"];
  v332 = v15;
  if (!v15)
  {
    v308 = NSString;
    v309 = [MEMORY[0x263F086E0] mainBundle];
    v310 = [v309 localizedStringForKey:@"[NSDictionary objectForKey] failed for key: %@" value:&stru_26D47BF58 table:0];
    v311 = objc_msgSend(v308, "stringWithFormat:", v310, @"Profiles");

    v313 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v312)
                                                                                         + 784)));
    if (os_log_type_enabled(v313, OS_LOG_TYPE_ERROR))
    {
      uint64_t v314 = [v311 UTF8String];
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "ProfileRegistry.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 639;
      __int16 v370 = 2080;
      *(void *)v371 = v314;
      _os_log_impl(&dword_221E5E000, v313, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (ProfileRegistryException::MissingRequiredField): \"%s\"", buf, 0x1Cu);
    }

    v315 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v315, "%s");
    v315->__vftable = (std::logic_error_vtbl *)&unk_26D479C10;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v316 = NSString;
    v317 = [MEMORY[0x263F086E0] mainBundle];
    v318 = [v317 localizedStringForKey:@"[NSObject isKindOfClass:[[NSArray class]]] failed for key: %@" value:&stru_26D47BF58 table:0];
    v319 = objc_msgSend(v316, "stringWithFormat:", v318, @"Profiles");

    v321 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v320)
                                                                                         + 784)));
    if (os_log_type_enabled(v321, OS_LOG_TYPE_ERROR))
    {
      uint64_t v322 = [v319 UTF8String];
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "ProfileRegistry.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 646;
      __int16 v370 = 2080;
      *(void *)v371 = v322;
      _os_log_impl(&dword_221E5E000, v321, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (ProfileRegistryException::FieldWithWrongType): \"%s\"", buf, 0x1Cu);
    }

    v323 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v323, "%s");
    v323->__vftable = (std::logic_error_vtbl *)&unk_26D479C38;
  }
  unint64_t v16 = 0;
  long long v351 = 0u;
  long long v352 = 0u;
  float v353 = 1.0;
  v340 = this;
  while ([v15 count] > v16)
  {
    uint64_t v17 = [v15 objectAtIndexedSubscript:v16];
    unint64_t v342 = 0;
    __s2 = (char *)&str_33;
    char v344 = 1;
    *(void *)&long long v345 = 0;
    *((void *)&v345 + 1) = 10;
    double v346 = 0.2;
    long long __p = 0u;
    long long v348 = 0u;
    int v349 = 1065353216;
    v335 = (Phase::Controller *)v17;
    Phase::Controller::StringIdFromDictionary((Phase::Controller *)buf, v17, &cfstr_Name_0.isa);
    Phase::StringId::operator=((uint64_t)&v342, (uint64_t)buf);
    unint64_t v334 = v16;
    if (!buf[16]) {
      free(*(void **)&buf[8]);
    }
    *(void *)&long long v345 = Phase::Controller::DoubleFromDictionary(v335, (NSDictionary *)@"ComputeTime", v18);
    v19 = v335;
    unint64_t v20 = @"OverflowDetectionHistoryLength";
    unint64_t v21 = [(Phase::Controller *)v19 objectForKeyedSubscript:@"OverflowDetectionHistoryLength"];
    if (!v21)
    {
      v229 = NSString;
      v230 = [MEMORY[0x263F086E0] mainBundle];
      v231 = [v230 localizedStringForKey:@"[NSDictionary objectForKey] failed for key: %@" value:&stru_26D47BF58 table:0];
      v232 = objc_msgSend(v229, "stringWithFormat:", v231, @"OverflowDetectionHistoryLength");

      v234 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v233)
                                                                                           + 784)));
      if (os_log_type_enabled(v234, OS_LOG_TYPE_ERROR))
      {
        uint64_t v235 = [v232 UTF8String];
        *(_DWORD *)buf = 136315650;
        *(void *)&buf[4] = "ProfileRegistry.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 257;
        __int16 v370 = 2080;
        *(void *)v371 = v235;
        _os_log_impl(&dword_221E5E000, v234, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (ProfileRegistryException::MissingRequiredField): \"%s\"", buf, 0x1Cu);
      }

      v236 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v236, "%s");
      v236->__vftable = (std::logic_error_vtbl *)&unk_26D479C10;
    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      v221 = NSString;
      v222 = [MEMORY[0x263F086E0] mainBundle];
      v223 = [v222 localizedStringForKey:@"[NSObject isKindOfClass:[[NSNumber class]]] failed for key: %@" value:&stru_26D47BF58 table:0];
      v224 = objc_msgSend(v221, "stringWithFormat:", v223, @"OverflowDetectionHistoryLength");

      v226 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v225)
                                                                                           + 784)));
      if (os_log_type_enabled(v226, OS_LOG_TYPE_ERROR))
      {
        uint64_t v227 = [v224 UTF8String];
        *(_DWORD *)buf = 136315650;
        *(void *)&buf[4] = "ProfileRegistry.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 264;
        __int16 v370 = 2080;
        *(void *)v371 = v227;
        _os_log_impl(&dword_221E5E000, v226, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (ProfileRegistryException::FieldWithWrongType): \"%s\"", buf, 0x1Cu);
      }

      v228 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v228, "%s");
      v228->__vftable = (std::logic_error_vtbl *)&unk_26D479C38;
    }
    uint64_t v22 = [(id)v21 longValue];

    *((void *)&v345 + 1) = v22;
    double v346 = Phase::Controller::DoubleFromDictionary(v19, (NSDictionary *)@"OverflowDetectionTimingThresholdSeconds", v23);
    v24 = v19;
    v25 = @"Categories";
    v337 = v24;
    v26 = [(Phase::Controller *)v24 objectForKeyedSubscript:@"Categories"];
    v338 = v26;
    if (!v26)
    {
      v237 = NSString;
      v238 = [MEMORY[0x263F086E0] mainBundle];
      v239 = [v238 localizedStringForKey:@"[NSDictionary objectForKey] failed for key: %@" value:&stru_26D47BF58 table:0];
      v240 = objc_msgSend(v237, "stringWithFormat:", v239, @"Categories");

      v242 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v241)
                                                                                           + 784)));
      if (os_log_type_enabled(v242, OS_LOG_TYPE_ERROR))
      {
        uint64_t v243 = [v240 UTF8String];
        *(_DWORD *)buf = 136315650;
        *(void *)&buf[4] = "ProfileRegistry.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 639;
        __int16 v370 = 2080;
        *(void *)v371 = v243;
        _os_log_impl(&dword_221E5E000, v242, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (ProfileRegistryException::MissingRequiredField): \"%s\"", buf, 0x1Cu);
      }

      v244 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v244, "%s");
      v244->__vftable = (std::logic_error_vtbl *)&unk_26D479C10;
    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      v245 = NSString;
      v246 = [MEMORY[0x263F086E0] mainBundle];
      v247 = [v246 localizedStringForKey:@"[NSObject isKindOfClass:[[NSArray class]]] failed for key: %@" value:&stru_26D47BF58 table:0];
      v248 = objc_msgSend(v245, "stringWithFormat:", v247, @"Categories");

      v250 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v249)
                                                                                           + 784)));
      if (os_log_type_enabled(v250, OS_LOG_TYPE_ERROR))
      {
        uint64_t v251 = [v248 UTF8String];
        *(_DWORD *)buf = 136315650;
        *(void *)&buf[4] = "ProfileRegistry.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 646;
        __int16 v370 = 2080;
        *(void *)v371 = v251;
        _os_log_impl(&dword_221E5E000, v250, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (ProfileRegistryException::FieldWithWrongType): \"%s\"", buf, 0x1Cu);
      }

      v252 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v252, "%s");
      v252->__vftable = (std::logic_error_vtbl *)&unk_26D479C38;
    }
    unint64_t v27 = 0;
    memset(v358, 0, 32);
    *(_DWORD *)&v358[32] = 1065353216;
    while ([v26 count] > v27)
    {
      v28 = [v26 objectAtIndexedSubscript:v27];
      Phase::Controller::CategoryFromDictionary((Phase::Controller *)buf, v28);

      unint64_t v21 = *(void *)buf;
      unint64_t v29 = *(void *)&v358[8];
      if (*(void *)&v358[8])
      {
        uint8x8_t v30 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&v358[8]);
        v30.i16[0] = vaddlv_u8(v30);
        unint64_t v31 = v30.u32[0];
        if (v30.u32[0] > 1uLL)
        {
          uint64_t v3 = *(void **)buf;
          if (*(void *)&v358[8] <= *(void *)buf) {
            uint64_t v3 = (void *)(*(void *)buf % *(void *)&v358[8]);
          }
        }
        else
        {
          uint64_t v3 = (void *)((*(void *)&v358[8] - 1) & *(void *)buf);
        }
        unint64_t v32 = *(void **)(*(void *)v358 + 8 * (void)v3);
        if (!v32)
        {
          this = v340;
          goto LABEL_42;
        }
        unint64_t v33 = (void *)*v32;
        if (!*v32)
        {
          this = v340;
          goto LABEL_42;
        }
        size_t v34 = *(const char **)&buf[8];
        while (1)
        {
          unint64_t v35 = v33[1];
          if (v35 == v21)
          {
            if (v33[2] == v21)
            {
              v36 = (Phase::Logger *)v33[3];
              if (v36 == (Phase::Logger *)v34 || (v36 = (Phase::Logger *)strcmp((const char *)v36, v34), !v36))
              {
                v207 = **(id **)(Phase::Logger::GetInstance(v36) + 784);
                if (os_log_type_enabled(v207, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)v384 = 136315650;
                  *(void *)&v384[4] = "ProfileRegistry.mm";
                  *(_WORD *)&v384[12] = 1024;
                  *(_DWORD *)&v384[14] = 656;
                  *(_WORD *)&v384[18] = 2080;
                  *(void *)&v384[20] = *(void *)&buf[8];
                  _os_log_impl(&dword_221E5E000, v207, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (ProfileRegistryException::DuplicateEntry) [!pair.second is true]: \"Entry with name %s already exists\"", v384, 0x1Cu);
                }

                v208 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                std::logic_error::logic_error(v208, "Entry with name %s already exists");
                v208->__vftable = (std::logic_error_vtbl *)&unk_26D479E60;
              }
            }
          }
          else
          {
            if (v31 > 1)
            {
              if (v35 >= v29) {
                v35 %= v29;
              }
            }
            else
            {
              v35 &= v29 - 1;
            }
            if ((void *)v35 != v3)
            {
LABEL_39:
              v26 = v338;
              this = v340;
              break;
            }
          }
          unint64_t v33 = (void *)*v33;
          if (!v33) {
            goto LABEL_39;
          }
        }
      }
LABEL_42:
      unint64_t v37 = operator new(0x88uLL);
      *(void *)v384 = v37;
      *(void *)&v384[8] = &v358[16];
      v384[16] = 0;
      void *v37 = 0;
      v37[1] = v21;
      Phase::StringId::StringId((uint64_t)(v37 + 2), (uint64_t)buf);
      Phase::StringId::StringId((uint64_t)(v37 + 5), (uint64_t)buf);
      Phase::StringId::StringId((uint64_t)(v37 + 8), (uint64_t)&v371[4]);
      v37[11] = *(void *)v373;
      std::unordered_map<Phase::StringId,Phase::Controller::ProfileRegistry::Graph>::unordered_map((uint64_t)(v37 + 12), (uint64_t)&v373[8]);
      v384[16] = 1;
      float v38 = (float)(unint64_t)(*(void *)&v358[24] + 1);
      if (!v29 || (float)(*(float *)&v358[32] * (float)v29) < v38)
      {
        BOOL v39 = (v29 & (v29 - 1)) != 0;
        if (v29 < 3) {
          BOOL v39 = 1;
        }
        unint64_t v40 = v39 | (2 * v29);
        unint64_t v41 = vcvtps_u32_f32(v38 / *(float *)&v358[32]);
        if (v40 <= v41) {
          size_t v42 = v41;
        }
        else {
          size_t v42 = v40;
        }
        std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>((uint64_t)v358, v42);
        unint64_t v29 = *(void *)&v358[8];
        if ((*(void *)&v358[8] & (*(void *)&v358[8] - 1)) != 0)
        {
          if (*(void *)&v358[8] <= v21) {
            uint64_t v3 = (void *)(v21 % *(void *)&v358[8]);
          }
          else {
            uint64_t v3 = (void *)v21;
          }
        }
        else
        {
          uint64_t v3 = (void *)((*(void *)&v358[8] - 1) & v21);
        }
      }
      uint64_t v43 = *(void *)v358;
      unint64_t v44 = *(void **)(*(void *)v358 + 8 * (void)v3);
      if (v44)
      {
        void *v37 = *v44;
      }
      else
      {
        void *v37 = *(void *)&v358[16];
        *(void *)&v358[16] = v37;
        *(void *)(v43 + 8 * (void)v3) = &v358[16];
        if (!*v37) {
          goto LABEL_63;
        }
        unint64_t v45 = *(void *)(*v37 + 8);
        if ((v29 & (v29 - 1)) != 0)
        {
          if (v45 >= v29) {
            v45 %= v29;
          }
        }
        else
        {
          v45 &= v29 - 1;
        }
        unint64_t v44 = (void *)(*(void *)v358 + 8 * v45);
      }
      *unint64_t v44 = v37;
LABEL_63:
      *(void *)v384 = 0;
      ++*(void *)&v358[24];
      std::unique_ptr<std::__hash_node<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>,void *>>>>::reset[abi:ne180100]((uint64_t)v384);
      std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Graph>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Graph>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Graph>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Graph>>>::~__hash_table((uint64_t)&v373[8]);
      if (!(_BYTE)v372) {
        free(*(void **)&v371[12]);
      }
      *(void *)&v371[4] = 0;
      *(void *)&v371[12] = &str_33;
      LOBYTE(v372) = 1;
      if (!buf[16]) {
        free(*(void **)&buf[8]);
      }
      ++v27;
    }

    if (*((void *)&v348 + 1))
    {
      std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>>>::__deallocate_node((uint64_t)&__p, (void *)v348);
      *(void *)&long long v348 = 0;
      uint64_t v46 = *((void *)&__p + 1);
      if (*((void *)&__p + 1))
      {
        uint64_t v47 = 0;
        do
          *(void *)(__p + 8 * v47++) = 0;
        while (v46 != v47);
      }
      *((void *)&v348 + 1) = 0;
    }
    uint64_t v48 = *(void *)v358;
    *(void *)v358 = 0;
    v49 = (void *)__p;
    *(void *)&long long __p = v48;
    if (v49) {
      operator delete(v49);
    }
    unint64_t v50 = *(void *)&v358[8];
    *(void *)&v358[8] = 0;
    long long v348 = *(_OWORD *)&v358[16];
    int v349 = *(_DWORD *)&v358[32];
    *((void *)&__p + 1) = v50;
    if (*(void *)&v358[24])
    {
      unint64_t v51 = *(void *)(*(void *)&v358[16] + 8);
      if ((v50 & (v50 - 1)) != 0)
      {
        if (v51 >= v50) {
          v51 %= v50;
        }
      }
      else
      {
        v51 &= v50 - 1;
      }
      *(void *)(__p + 8 * v51) = &v348;
      *(_OWORD *)&v358[16] = 0uLL;
    }
    std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>>>::~__hash_table((uint64_t)v358);

    unint64_t v52 = v342;
    unint64_t v53 = *((void *)&v351 + 1);
    if (*((void *)&v351 + 1))
    {
      uint8x8_t v54 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v351 + 8));
      v54.i16[0] = vaddlv_u8(v54);
      unint64_t v55 = v54.u32[0];
      if (v54.u32[0] > 1uLL)
      {
        unint64_t v21 = v342;
        if (*((void *)&v351 + 1) <= v342) {
          unint64_t v21 = v342 % *((void *)&v351 + 1);
        }
      }
      else
      {
        unint64_t v21 = (*((void *)&v351 + 1) - 1) & v342;
      }
      unint64_t v56 = *(void **)(v351 + 8 * v21);
      if (v56)
      {
        uint64_t v3 = (void *)*v56;
        if (*v56)
        {
          unint64_t v57 = __s2;
          do
          {
            unint64_t v58 = v3[1];
            if (v58 == v52)
            {
              if (v3[2] == v52)
              {
                uint64_t v59 = (Phase::Logger *)v3[3];
                if (v59 == (Phase::Logger *)v57
                  || (uint64_t v59 = (Phase::Logger *)strcmp((const char *)v59, v57), !v59))
                {
                  v219 = **(id **)(Phase::Logger::GetInstance(v59) + 784);
                  if (os_log_type_enabled(v219, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 136315650;
                    *(void *)&buf[4] = "ProfileRegistry.mm";
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&buf[14] = 656;
                    __int16 v370 = 2080;
                    *(void *)v371 = __s2;
                    _os_log_impl(&dword_221E5E000, v219, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (ProfileRegistryException::DuplicateEntry) [!pair.second is true]: \"Entry with name %s already exists\"", buf, 0x1Cu);
                  }

                  v220 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                  std::logic_error::logic_error(v220, "Entry with name %s already exists");
                  v220->__vftable = (std::logic_error_vtbl *)&unk_26D479E60;
                }
              }
            }
            else
            {
              if (v55 > 1)
              {
                if (v58 >= v53) {
                  v58 %= v53;
                }
              }
              else
              {
                v58 &= v53 - 1;
              }
              if (v58 != v21) {
                break;
              }
            }
            uint64_t v3 = (void *)*v3;
          }
          while (v3);
        }
      }
    }
    v60 = operator new(0x80uLL);
    void *v60 = 0;
    v60[1] = v52;
    Phase::StringId::StringId((uint64_t)(v60 + 2), (uint64_t)&v342);
    Phase::StringId::StringId((uint64_t)(v60 + 5), (uint64_t)&v342);
    *((_OWORD *)v60 + 4) = v345;
    *((double *)v60 + 10) = v346;
    std::unordered_map<Phase::StringId,Phase::Controller::ProfileRegistry::Category>::unordered_map((uint64_t)(v60 + 11), (uint64_t)&__p);
    float v61 = (float)(unint64_t)(*((void *)&v352 + 1) + 1);
    if (!v53 || (float)(v353 * (float)v53) < v61)
    {
      BOOL v62 = (v53 & (v53 - 1)) != 0;
      if (v53 < 3) {
        BOOL v62 = 1;
      }
      unint64_t v63 = v62 | (2 * v53);
      unint64_t v64 = vcvtps_u32_f32(v61 / v353);
      if (v63 <= v64) {
        size_t v65 = v64;
      }
      else {
        size_t v65 = v63;
      }
      std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>((uint64_t)&v351, v65);
      unint64_t v53 = *((void *)&v351 + 1);
      if ((*((void *)&v351 + 1) & (*((void *)&v351 + 1) - 1)) != 0)
      {
        if (*((void *)&v351 + 1) <= v52) {
          unint64_t v21 = v52 % *((void *)&v351 + 1);
        }
        else {
          unint64_t v21 = v52;
        }
      }
      else
      {
        unint64_t v21 = (*((void *)&v351 + 1) - 1) & v52;
      }
    }
    uint64_t v66 = v351;
    unint64_t v67 = *(void **)(v351 + 8 * v21);
    if (v67)
    {
      void *v60 = *v67;
      goto LABEL_120;
    }
    void *v60 = v352;
    *(void *)&long long v352 = v60;
    *(void *)(v66 + 8 * v21) = &v352;
    if (*v60)
    {
      unint64_t v68 = *(void *)(*v60 + 8);
      if ((v53 & (v53 - 1)) != 0)
      {
        if (v68 >= v53) {
          v68 %= v53;
        }
      }
      else
      {
        v68 &= v53 - 1;
      }
      unint64_t v67 = (void *)(v351 + 8 * v68);
LABEL_120:
      *unint64_t v67 = v60;
    }
    ++*((void *)&v352 + 1);
    std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>>>::~__hash_table((uint64_t)&__p);
    if (!v344) {
      free(__s2);
    }
    v15 = v332;
    unint64_t v16 = v334 + 1;
  }

  uint64_t v69 = v352;
  if ((void)v352)
  {
    v333 = (void *)((char *)this + 16);
    while (1)
    {
      uint64_t v70 = v69;
      Phase::StringId::StringId((uint64_t)&v342, v69 + 16);
      Phase::StringId::StringId((uint64_t)&v345, v70 + 40);
      long long __p = *(_OWORD *)(v70 + 64);
      *(void *)&long long v348 = *(void *)(v70 + 80);
      v336 = (uint64_t *)v70;
      unint64_t v71 = (Phase::Logger *)std::unordered_map<Phase::StringId,Phase::Controller::ProfileRegistry::Category>::unordered_map((uint64_t)&v348 + 8, v70 + 88);
      if ((!(void)v345 || (void)v345 == -1) && (*((_UNKNOWN **)&v345 + 1) == &str_33 || !**((unsigned char **)&v345 + 1)))
      {
        v256 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v71)
                                                                                             + 784)));
        if (os_log_type_enabled(v256, OS_LOG_TYPE_ERROR))
        {
          v257 = "";
          if ((void)v345 != -1) {
            goto LABEL_373;
          }
          if (*((_UNKNOWN **)&v345 + 1) == &str_33)
          {
            v258 = "invalid";
            v257 = "<nullptr>";
            goto LABEL_374;
          }
          if (**((unsigned char **)&v345 + 1))
          {
LABEL_373:
            v258 = "empty";
          }
          else
          {
            v257 = "<nullptr>";
            v258 = "invalid";
          }
LABEL_374:
          *(_DWORD *)buf = 136315906;
          *(void *)&buf[4] = "ProfileRegistry.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 38;
          __int16 v370 = 2080;
          *(void *)v371 = v257;
          *(_WORD *)&v371[8] = 2080;
          *(void *)&v371[10] = v258;
          _os_log_impl(&dword_221E5E000, v256, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (Phase::Controller::ProfileRegistryException::InvalidString): \"Name %s is %s.\"", buf, 0x26u);
        }

        v266 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v266, "Name %s is %s.");
        v269 = Phase::Controller::ProfileRegistryException::InvalidString::~InvalidString;
        v271 = (std::logic_error_vtbl *)&unk_26D479C88;
        goto LABEL_376;
      }
      if (*(double *)&__p <= 0.0)
      {
        v265 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v71)
                                                                                             + 784)));
        if (os_log_type_enabled(v265, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315906;
          *(void *)&buf[4] = "ProfileRegistry.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 44;
          __int16 v370 = 2080;
          *(void *)v371 = *((void *)&v345 + 1);
          *(_WORD *)&v371[8] = 2048;
          *(void *)&v371[10] = __p;
          _os_log_impl(&dword_221E5E000, v265, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (Phase::Controller::ProfileRegistryException::InvalidNumber): \"[%s]: ComputeTime %f must be >= 0\"", buf, 0x26u);
        }

        v266 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v266, "[%s]: ComputeTime %f must be >= 0");
LABEL_349:
        v269 = Phase::Controller::ProfileRegistryException::InvalidNumber::~InvalidNumber;
        v271 = (std::logic_error_vtbl *)&unk_26D479CD8;
LABEL_376:
        v266->__vftable = v271;
        __cxa_throw(v266, v270, (void (*)(void *))v269);
      }
      if (*((uint64_t *)&__p + 1) <= 0)
      {
        v268 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v71)
                                                                                             + 784)));
        if (os_log_type_enabled(v268, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315906;
          *(void *)&buf[4] = "ProfileRegistry.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 51;
          __int16 v370 = 2080;
          *(void *)v371 = *((void *)&v345 + 1);
          *(_WORD *)&v371[8] = 2048;
          *(void *)&v371[10] = *((void *)&__p + 1);
          _os_log_impl(&dword_221E5E000, v268, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (Phase::Controller::ProfileRegistryException::InvalidNumber): \"[%s]: OverflowDetectionHistoryLength %ld must be > 0\"", buf, 0x26u);
        }

        v266 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v266, "[%s]: OverflowDetectionHistoryLength %ld must be > 0");
        goto LABEL_349;
      }
      if (*(double *)&v348 <= 0.0)
      {
        v267 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v71)
                                                                                             + 784)));
        if (os_log_type_enabled(v267, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315906;
          *(void *)&buf[4] = "ProfileRegistry.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 58;
          __int16 v370 = 2080;
          *(void *)v371 = *((void *)&v345 + 1);
          *(_WORD *)&v371[8] = 2048;
          *(void *)&v371[10] = v348;
          _os_log_impl(&dword_221E5E000, v267, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (Phase::Controller::ProfileRegistryException::InvalidNumber): \"[%s]: OverflowDetectionTimingThresholdSeconds %f must be > 0\"", buf, 0x26u);
        }

        v266 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v266, "[%s]: OverflowDetectionTimingThresholdSeconds %f must be > 0");
        goto LABEL_349;
      }
      memset(v384, 0, 24);
      unint64_t v73 = (unint64_t)v350;
      if (v350)
      {
        while (1)
        {
          SpatialCategoryFromStringId = (Phase::Logger *)Phase::Controller::GetSpatialCategoryFromStringId((Phase::Controller *)(v73 + 16), v72);
          v341 = (void *)v73;
          if (!SpatialCategoryFromStringId)
          {
            v253 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(SpatialCategoryFromStringId)
                                                                                                 + 784)));
            if (os_log_type_enabled(v253, OS_LOG_TYPE_ERROR))
            {
              uint64_t v254 = *(void *)(v73 + 24);
              *(_DWORD *)buf = 136315906;
              *(void *)&buf[4] = "ProfileRegistry.mm";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 232;
              __int16 v370 = 2080;
              *(void *)v371 = *((void *)&v345 + 1);
              *(_WORD *)&v371[8] = 2080;
              *(void *)&v371[10] = v254;
              _os_log_impl(&dword_221E5E000, v253, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (Phase::Controller::ProfileRegistryException::InvalidString): \"[%s]: Category %s isn't recognized.\"", buf, 0x26u);
            }

            v255 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v255, "[%s]: Category %s isn't recognized.");
            v255->__vftable = (std::logic_error_vtbl *)&unk_26D479C88;
          }
          unint64_t v75 = (void *)(v73 + 64);
          if (*(void *)&v384[8] >= *(void *)&v384[16]) {
            break;
          }
          uint64_t v76 = Phase::StringId::StringId(*(uint64_t *)&v384[8], v73 + 64) + 24;
LABEL_155:
          *(void *)&v384[8] = v76;
          uint64_t v86 = *(void **)(v73 + 112);
          if (v86)
          {
            do
            {
              SpatialModelerGraphFromStringId = (Phase::Logger *)Phase::Controller::GetSpatialModelerGraphFromStringId((Phase::Controller *)(v86 + 2), v72);
              if (!SpatialModelerGraphFromStringId)
              {
                v214 = v86;
                v215 = **(id **)(Phase::Logger::GetInstance(SpatialModelerGraphFromStringId) + 784);
                if (os_log_type_enabled(v215, OS_LOG_TYPE_ERROR))
                {
                  uint64_t v216 = v341[3];
                  uint64_t v217 = v214[3];
                  *(_DWORD *)buf = 136316162;
                  *(void *)&buf[4] = "ProfileRegistry.mm";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 225;
                  __int16 v370 = 2080;
                  *(void *)v371 = *((void *)&v345 + 1);
                  *(_WORD *)&v371[8] = 2080;
                  *(void *)&v371[10] = v216;
                  *(_WORD *)&v371[18] = 2080;
                  uint64_t v372 = v217;
                  _os_log_impl(&dword_221E5E000, v215, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (Phase::Controller::ProfileRegistryException::InvalidString): \"[%s:%s]: Graph %s isn't recognized.\"", buf, 0x30u);
                }

                v218 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                std::logic_error::logic_error(v218, "[%s:%s]: Graph %s isn't recognized.");
                v218->__vftable = (std::logic_error_vtbl *)&unk_26D479C88;
              }
              v339 = v86;
              for (uint64_t i = (void *)v86[10]; i; v73 = (unint64_t)v341)
              {
                SpatialModelerStageFromStringId = (Phase::Logger *)Phase::Controller::GetSpatialModelerStageFromStringId((Phase::Controller *)(i + 2), v72);
                if (!SpatialModelerStageFromStringId)
                {
                  v209 = **(id **)(Phase::Logger::GetInstance(SpatialModelerStageFromStringId) + 784);
                  if (os_log_type_enabled(v209, OS_LOG_TYPE_ERROR))
                  {
                    uint64_t v210 = v341[3];
                    uint64_t v211 = v339[3];
                    uint64_t v212 = i[3];
                    *(_DWORD *)buf = 136316418;
                    *(void *)&buf[4] = "ProfileRegistry.mm";
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&buf[14] = 217;
                    __int16 v370 = 2080;
                    *(void *)v371 = *((void *)&v345 + 1);
                    *(_WORD *)&v371[8] = 2080;
                    *(void *)&v371[10] = v210;
                    *(_WORD *)&v371[18] = 2080;
                    uint64_t v372 = v211;
                    *(_WORD *)v373 = 2080;
                    *(void *)&v373[2] = v212;
                    _os_log_impl(&dword_221E5E000, v209, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (Phase::Controller::ProfileRegistryException::InvalidString): \"[%s:%s:%s]: Stage %s isn't recognized.\"", buf, 0x3Au);
                  }

                  v213 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                  std::logic_error::logic_error(v213, "[%s:%s:%s]: Stage %s isn't recognized.");
                  v213->__vftable = (std::logic_error_vtbl *)&unk_26D479C88;
                }
                unint64_t v90 = (void *)i[10];
                if (v90)
                {
                  while (2)
                  {
                    SpatialModelerParameterFromStringId = (Phase::Logger *)Phase::Controller::GetSpatialModelerParameterFromStringId((Phase::Controller *)(v90 + 2), v72);
                    int v92 = (int)SpatialModelerParameterFromStringId;
                    if (SpatialModelerParameterFromStringId)
                    {
                      double v93 = *(double *)v90[8];
                      double v94 = *(double *)(v90[9] - 48);
                      if (v93 < 0.0 || v94 > 1.0)
                      {
                        v165 = **(id **)(Phase::Logger::GetInstance(SpatialModelerParameterFromStringId) + 784);
                        if (os_log_type_enabled(v165, OS_LOG_TYPE_ERROR))
                        {
                          uint64_t v167 = v341[3];
                          uint64_t v168 = v339[3];
                          uint64_t v169 = i[3];
                          uint64_t v170 = v90[3];
                          *(_DWORD *)buf = 136317698;
                          *(void *)&buf[4] = "ProfileRegistry.mm";
                          *(_WORD *)&buf[12] = 1024;
                          *(_DWORD *)&buf[14] = 100;
                          __int16 v370 = 2080;
                          *(void *)v371 = *((void *)&v345 + 1);
                          *(_WORD *)&v371[8] = 2080;
                          *(void *)&v371[10] = v167;
                          *(_WORD *)&v371[18] = 2080;
                          uint64_t v372 = v168;
                          *(_WORD *)v373 = 2080;
                          *(void *)&v373[2] = v169;
                          __int16 v374 = 2080;
                          uint64_t v375 = v170;
                          __int16 v376 = 2048;
                          double v377 = v93;
                          __int16 v378 = 2048;
                          double v379 = v94;
                          __int16 v380 = 2048;
                          uint64_t v381 = 0;
                          __int16 v382 = 2048;
                          uint64_t v383 = 0x3FF0000000000000;
                          _os_log_impl(&dword_221E5E000, v165, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (Phase::Controller::ProfileRegistryException::InvalidEnvelopeDomain): \"[%s:%s:%s:%s:%s]: Envelope has invalid domain [%f, %f]. Must be within [%f, %f].\"", buf, 0x6Cu);
                        }

                        long long v171 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                        std::logic_error::logic_error(v171, "[%s:%s:%s:%s:%s]: Envelope has invalid domain [%f, %f]. Must be within [%f, %f].");
                        v171->__vftable = (std::logic_error_vtbl *)&unk_26D479DE8;
                      }
                      *(void *)buf = *v75;
                      v96 = (double *)std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::find<unsigned long long>(a3, (unint64_t *)buf);
                      v97 = v96;
                      if (v96) {
                        v98 = v96 + 3;
                      }
                      else {
                        v98 = 0;
                      }
                      if (v96)
                      {
                        double v101 = Phase::Envelope<double>::Range(v90 + 8);
                        double v102 = v100;
                        switch(v92)
                        {
                          case 1:
                            if (v101 >= v97[21] && v100 <= v97[22]) {
                              goto LABEL_199;
                            }
                            v193 = **(id **)(Phase::Logger::GetInstance(v99) + 784);
                            if (os_log_type_enabled(v193, OS_LOG_TYPE_ERROR))
                            {
                              uint64_t v194 = v341[3];
                              uint64_t v195 = v339[3];
                              uint64_t v196 = i[3];
                              uint64_t v197 = v90[3];
                              uint64_t v198 = *((void *)v97 + 21);
                              uint64_t v199 = *((void *)v97 + 22);
                              *(_DWORD *)buf = 136317698;
                              *(void *)&buf[4] = "ProfileRegistry.mm";
                              *(_WORD *)&buf[12] = 1024;
                              *(_DWORD *)&buf[14] = 126;
                              __int16 v370 = 2080;
                              *(void *)v371 = *((void *)&v345 + 1);
                              *(_WORD *)&v371[8] = 2080;
                              *(void *)&v371[10] = v194;
                              *(_WORD *)&v371[18] = 2080;
                              uint64_t v372 = v195;
                              *(_WORD *)v373 = 2080;
                              *(void *)&v373[2] = v196;
                              __int16 v374 = 2080;
                              uint64_t v375 = v197;
                              __int16 v376 = 2048;
                              double v377 = v101;
                              __int16 v378 = 2048;
                              double v379 = v102;
                              __int16 v380 = 2048;
                              uint64_t v381 = v198;
                              __int16 v382 = 2048;
                              uint64_t v383 = v199;
                              _os_log_impl(&dword_221E5E000, v193, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (Phase::Controller::ProfileRegistryException::InvalidEnvelopeRange): \"[%s:%s:%s:%s:%s]: Envelope has invalid UpdateRate range [%f, %f]. Must be within [%f, %f].\"", buf, 0x6Cu);
                            }

                            uint64_t v185 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                            std::logic_error::logic_error(v185, "[%s:%s:%s:%s:%s]: Envelope has invalid UpdateRate range [%f, %f]. Must be within [%f, %f].");
                            goto LABEL_298;
                          case 2:
                            v104 = (char *)v90[8];
                            v103 = (char *)v90[9];
                            unint64_t v105 = (v103 - v104) >> 6;
                            unint64_t v106 = v105 + 1;
                            if ((v105 + 1) >> 60) {
                              std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
                            }
                            size_t v107 = 2 * v106;
                            v108 = operator new(16 * v106);
                            bzero(v108, v107 * 8);
                            void *v108 = *(void *)v104;
                            v108[1] = *((void *)v104 + 1);
                            if (v103 != v104)
                            {
                              if (v105 <= 1) {
                                uint64_t v109 = 1;
                              }
                              else {
                                uint64_t v109 = (v103 - v104) >> 6;
                              }
                              v110 = v108 + 3;
                              v111 = (uint64_t *)(v104 + 24);
                              do
                              {
                                *(v110 - 1) = *(v111 - 1);
                                uint64_t v112 = *v111;
                                v111 += 8;
                                void *v110 = v112;
                                v110 += 2;
                                --v109;
                              }
                              while (v109);
                            }
                            uint64_t v113 = (unint64_t *)v98[13];
                            v114 = (double *)v108;
                            do
                            {
                              double v115 = v114[1];
                              if ((unint64_t *)v98[12] == v113) {
                                goto LABEL_268;
                              }
                              uint64_t v116 = 0;
                              v117 = (unint64_t *)v98[12];
                              do
                              {
                                unint64_t v118 = *v117++;
                                if (v115 == (double)v118) {
                                  ++v116;
                                }
                              }
                              while (v117 != v113);
                              if (!v116)
                              {
LABEL_268:
                                v150 = (Phase::Logger *)std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)buf);
                                uint64_t v151 = v98[12];
                                for (uint64_t j = v98[13]; v151 != j; v151 += 8)
                                {
                                  std::ostream::operator<<();
                                  v150 = (Phase::Logger *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&buf[16], (uint64_t)" ", 1);
                                }
                                v153 = **(id **)(Phase::Logger::GetInstance(v150) + 784);
                                if (os_log_type_enabled(v153, OS_LOG_TYPE_ERROR))
                                {
                                  uint64_t v154 = *((void *)&v345 + 1);
                                  uint64_t v155 = v341[3];
                                  uint64_t v156 = v339[3];
                                  uint64_t v157 = i[3];
                                  uint64_t v158 = v90[3];
                                  std::stringbuf::str();
                                  long long v159 = v357 >= 0 ? &v356 : (void **)v356;
                                  *(_DWORD *)v358 = 136317186;
                                  *(void *)&v358[4] = "ProfileRegistry.mm";
                                  *(_WORD *)&v358[12] = 1024;
                                  *(_DWORD *)&v358[14] = 149;
                                  *(_WORD *)&v358[18] = 2080;
                                  *(void *)&v358[20] = v154;
                                  *(_WORD *)&v358[28] = 2080;
                                  *(void *)&v358[30] = v155;
                                  __int16 v359 = 2080;
                                  uint64_t v360 = v156;
                                  __int16 v361 = 2080;
                                  uint64_t v362 = v157;
                                  __int16 v363 = 2080;
                                  uint64_t v364 = v158;
                                  __int16 v365 = 2048;
                                  unint64_t v366 = (unint64_t)v115;
                                  __int16 v367 = 2080;
                                  v368 = v159;
                                  _os_log_impl(&dword_221E5E000, v153, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (Phase::Controller::ProfileRegistryException::InvalidEnvelopeRange): \"[%s:%s:%s:%s:%s]: Unsupported Subband Count %zu. Must be one of: %s\"", v358, 0x58u);
                                  if (v357 < 0) {
                                    operator delete(v356);
                                  }
                                }

                                long long v160 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                                std::logic_error::logic_error(v160, "[%s:%s:%s:%s:%s]: Unsupported Subband Count %zu. Must be one of: %s");
                                v160->__vftable = (std::logic_error_vtbl *)&unk_26D479E38;
                              }
                              v114 += 2;
                            }
                            while (v114 != (double *)&v108[v107]);
                            operator delete(v108);
                            goto LABEL_199;
                          case 3:
                            if (v101 >= v97[25] && v100 <= v97[26]) {
                              goto LABEL_199;
                            }
                            int v178 = **(id **)(Phase::Logger::GetInstance(v99) + 784);
                            if (os_log_type_enabled(v178, OS_LOG_TYPE_ERROR))
                            {
                              uint64_t v179 = v341[3];
                              uint64_t v180 = v339[3];
                              uint64_t v181 = i[3];
                              uint64_t v182 = v90[3];
                              uint64_t v183 = *((void *)v97 + 25);
                              uint64_t v184 = *((void *)v97 + 26);
                              *(_DWORD *)buf = 136317698;
                              *(void *)&buf[4] = "ProfileRegistry.mm";
                              *(_WORD *)&buf[12] = 1024;
                              *(_DWORD *)&buf[14] = 164;
                              __int16 v370 = 2080;
                              *(void *)v371 = *((void *)&v345 + 1);
                              *(_WORD *)&v371[8] = 2080;
                              *(void *)&v371[10] = v179;
                              *(_WORD *)&v371[18] = 2080;
                              uint64_t v372 = v180;
                              *(_WORD *)v373 = 2080;
                              *(void *)&v373[2] = v181;
                              __int16 v374 = 2080;
                              uint64_t v375 = v182;
                              __int16 v376 = 2048;
                              double v377 = v101;
                              __int16 v378 = 2048;
                              double v379 = v102;
                              __int16 v380 = 2048;
                              uint64_t v381 = v183;
                              __int16 v382 = 2048;
                              uint64_t v383 = v184;
                              _os_log_impl(&dword_221E5E000, v178, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (Phase::Controller::ProfileRegistryException::InvalidEnvelopeRange): \"[%s:%s:%s:%s:%s]: Envelope has invalid TimeLimit range [%f, %f]. Must be within [%f, %f].\"", buf, 0x6Cu);
                            }

                            uint64_t v185 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                            std::logic_error::logic_error(v185, "[%s:%s:%s:%s:%s]: Envelope has invalid TimeLimit range [%f, %f]. Must be within [%f, %f].");
                            goto LABEL_298;
                          case 4:
                            if (v101 >= v97[23] && v100 <= v97[24]) {
                              goto LABEL_199;
                            }
                            v200 = **(id **)(Phase::Logger::GetInstance(v99) + 784);
                            if (os_log_type_enabled(v200, OS_LOG_TYPE_ERROR))
                            {
                              uint64_t v201 = v341[3];
                              uint64_t v202 = v339[3];
                              uint64_t v203 = i[3];
                              uint64_t v204 = v90[3];
                              uint64_t v205 = *((void *)v97 + 23);
                              uint64_t v206 = *((void *)v97 + 24);
                              *(_DWORD *)buf = 136317698;
                              *(void *)&buf[4] = "ProfileRegistry.mm";
                              *(_WORD *)&buf[12] = 1024;
                              *(_DWORD *)&buf[14] = 180;
                              __int16 v370 = 2080;
                              *(void *)v371 = *((void *)&v345 + 1);
                              *(_WORD *)&v371[8] = 2080;
                              *(void *)&v371[10] = v201;
                              *(_WORD *)&v371[18] = 2080;
                              uint64_t v372 = v202;
                              *(_WORD *)v373 = 2080;
                              *(void *)&v373[2] = v203;
                              __int16 v374 = 2080;
                              uint64_t v375 = v204;
                              __int16 v376 = 2048;
                              double v377 = v101;
                              __int16 v378 = 2048;
                              double v379 = v102;
                              __int16 v380 = 2048;
                              uint64_t v381 = v205;
                              __int16 v382 = 2048;
                              uint64_t v383 = v206;
                              _os_log_impl(&dword_221E5E000, v200, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (Phase::Controller::ProfileRegistryException::InvalidEnvelopeRange): \"[%s:%s:%s:%s:%s]: Envelope has invalid CullabilityThreshold range [%f, %f]. Must \" \"be within [%f, %f].\"", buf, 0x6Cu);
                            }

                            uint64_t v185 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                            std::logic_error::logic_error(v185, "[%s:%s:%s:%s:%s]: Envelope has invalid CullabilityThreshold range [%f, %f]. Must be within [%f, %f].");
                            goto LABEL_298;
                          case 5:
                            if (v101 >= v97[27] && v100 <= v97[28]) {
                              goto LABEL_199;
                            }
                            uint64_t v186 = **(id **)(Phase::Logger::GetInstance(v99) + 784);
                            if (os_log_type_enabled(v186, OS_LOG_TYPE_ERROR))
                            {
                              uint64_t v187 = v341[3];
                              uint64_t v188 = v339[3];
                              uint64_t v189 = i[3];
                              uint64_t v190 = v90[3];
                              uint64_t v191 = *((void *)v97 + 27);
                              uint64_t v192 = *((void *)v97 + 28);
                              *(_DWORD *)buf = 136317698;
                              *(void *)&buf[4] = "ProfileRegistry.mm";
                              *(_WORD *)&buf[12] = 1024;
                              *(_DWORD *)&buf[14] = 195;
                              __int16 v370 = 2080;
                              *(void *)v371 = *((void *)&v345 + 1);
                              *(_WORD *)&v371[8] = 2080;
                              *(void *)&v371[10] = v187;
                              *(_WORD *)&v371[18] = 2080;
                              uint64_t v372 = v188;
                              *(_WORD *)v373 = 2080;
                              *(void *)&v373[2] = v189;
                              __int16 v374 = 2080;
                              uint64_t v375 = v190;
                              __int16 v376 = 2048;
                              double v377 = v101;
                              __int16 v378 = 2048;
                              double v379 = v102;
                              __int16 v380 = 2048;
                              uint64_t v381 = v191;
                              __int16 v382 = 2048;
                              uint64_t v383 = v192;
                              _os_log_impl(&dword_221E5E000, v186, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (Phase::Controller::ProfileRegistryException::InvalidEnvelopeRange): \"[%s:%s:%s:%s:%s]: Envelope has invalid MaximumClusterCount range [%f, %f]. Must \" \"be within [%f, %f].\"", buf, 0x6Cu);
                            }

                            uint64_t v185 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                            std::logic_error::logic_error(v185, "[%s:%s:%s:%s:%s]: Envelope has invalid MaximumClusterCount range [%f, %f]. Must be within [%f, %f].");
LABEL_298:
                            v185->__vftable = (std::logic_error_vtbl *)&unk_26D479E38;
                          default:
LABEL_199:
                            unint64_t v90 = (void *)*v90;
                            if (!v90) {
                              goto LABEL_200;
                            }
                            continue;
                        }
                      }
                      float v161 = **(id **)(Phase::Logger::GetInstance(0) + 784);
                      if (os_log_type_enabled(v161, OS_LOG_TYPE_ERROR))
                      {
                        uint64_t v162 = v341[3];
                        uint64_t v163 = v341[9];
                        *(_DWORD *)buf = 136316162;
                        *(void *)&buf[4] = "ProfileRegistry.mm";
                        *(_WORD *)&buf[12] = 1024;
                        *(_DWORD *)&buf[14] = 109;
                        __int16 v370 = 2080;
                        *(void *)v371 = *((void *)&v345 + 1);
                        *(_WORD *)&v371[8] = 2080;
                        *(void *)&v371[10] = v162;
                        *(_WORD *)&v371[18] = 2080;
                        uint64_t v372 = v163;
                        _os_log_impl(&dword_221E5E000, v161, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (Phase::Controller::ProfileRegistryException::InvalidSpatialModeler): \"[%s:%s]: Invalid Spatial Modeler: %s\"", buf, 0x30u);
                      }

                      char v164 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                      std::logic_error::logic_error(v164, "[%s:%s]: Invalid Spatial Modeler: %s");
                      v164->__vftable = (std::logic_error_vtbl *)&unk_26D479E10;
                    }
                    break;
                  }
                  long long v172 = **(id **)(Phase::Logger::GetInstance(SpatialModelerParameterFromStringId) + 784);
                  if (os_log_type_enabled(v172, OS_LOG_TYPE_ERROR))
                  {
                    uint64_t v173 = v341[3];
                    uint64_t v174 = v339[3];
                    uint64_t v175 = i[3];
                    uint64_t v176 = v90[3];
                    *(_DWORD *)buf = 136316674;
                    *(void *)&buf[4] = "ProfileRegistry.mm";
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&buf[14] = 87;
                    __int16 v370 = 2080;
                    *(void *)v371 = *((void *)&v345 + 1);
                    *(_WORD *)&v371[8] = 2080;
                    *(void *)&v371[10] = v173;
                    *(_WORD *)&v371[18] = 2080;
                    uint64_t v372 = v174;
                    *(_WORD *)v373 = 2080;
                    *(void *)&v373[2] = v175;
                    __int16 v374 = 2080;
                    uint64_t v375 = v176;
                    _os_log_impl(&dword_221E5E000, v172, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (Phase::Controller::ProfileRegistryException::InvalidString): \"[%s:%s:%s:%s]: Parameter %s isn't recognized.\"", buf, 0x44u);
                  }

                  long long v177 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                  std::logic_error::logic_error(v177, "[%s:%s:%s:%s]: Parameter %s isn't recognized.");
                  v177->__vftable = (std::logic_error_vtbl *)&unk_26D479C88;
                }
LABEL_200:
                uint64_t i = (void *)*i;
              }
              this = v340;
              uint64_t v86 = (void *)*v339;
            }
            while (*v339);
          }
          unint64_t v73 = *(void *)v73;
          if (!v73)
          {
            v119 = *(unint64_t **)v384;
            v120 = *(unint64_t **)&v384[8];
            goto LABEL_208;
          }
        }
        unint64_t v77 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v384[8] - *(void *)v384) >> 3);
        unint64_t v78 = v77 + 1;
        if (v77 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * ((uint64_t)(*(void *)&v384[16] - *(void *)v384) >> 3) > v78) {
          unint64_t v78 = 0x5555555555555556 * ((uint64_t)(*(void *)&v384[16] - *(void *)v384) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v384[16] - *(void *)v384) >> 3) >= 0x555555555555555) {
          unint64_t v79 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v79 = v78;
        }
        if (v79)
        {
          if (v79 > 0xAAAAAAAAAAAAAAALL) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          unint64_t v80 = (char *)operator new(24 * v79);
        }
        else
        {
          unint64_t v80 = 0;
        }
        unint64_t v81 = &v80[24 * v79];
        uint64_t v82 = Phase::StringId::StringId((uint64_t)&v80[24 * v77], v73 + 64);
        uint64_t v76 = v82 + 24;
        uint64_t v83 = *(void ***)v384;
        v84 = *(void ***)&v384[8];
        if (*(void *)&v384[8] == *(void *)v384)
        {
          *(void *)v384 = v82;
          *(void *)&v384[8] = v82 + 24;
          *(void *)&v384[16] = v81;
        }
        else
        {
          do
          {
            v84 -= 3;
            uint64_t v82 = Phase::StringId::StringId(v82 - 24, (uint64_t)v84);
          }
          while (v84 != v83);
          v84 = *(void ***)v384;
          unint64_t v85 = *(void ***)&v384[8];
          *(void *)v384 = v82;
          *(void *)&v384[8] = v76;
          *(void *)&v384[16] = v81;
          if (v85 != v84)
          {
            do
            {
              if (!*((unsigned char *)v85 - 8)) {
                free(*(v85 - 2));
              }
              *(v85 - 3) = 0;
              *(v85 - 2) = &str_33;
              *((unsigned char *)v85 - 8) = 1;
              v85 -= 3;
            }
            while (v85 != v84);
            if (!v84) {
              goto LABEL_155;
            }
LABEL_154:
            operator delete(v84);
            goto LABEL_155;
          }
        }
        if (!v84) {
          goto LABEL_155;
        }
        goto LABEL_154;
      }
      v120 = 0;
      v119 = 0;
LABEL_208:
      unint64_t v121 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (v120 - v119));
      if (v120 == v119) {
        uint64_t v122 = 0;
      }
      else {
        uint64_t v122 = v121;
      }
      std::__introsort<std::_ClassicAlgPolicy,sValidateProfile(Phase::Controller::ProfileRegistry::Profile const&,Phase::Controller::SpatialModelerRegistry *)::$_0 &,Phase::StringId *,false>(v119, v120, v122, 1);
      uint64_t v123 = *(uint64_t **)&v384[8];
      if (*(void *)v384 != *(void *)&v384[8])
      {
        v124 = (uint64_t *)(*(void *)v384 + 24);
        if (*(void *)v384 + 24 != *(void *)&v384[8])
        {
          uint64_t v125 = **(void **)v384;
          while (1)
          {
            uint64_t v126 = *v124;
            if (v125 == *v124)
            {
              v127 = (char *)*(v124 - 2);
              v128 = (const char *)v124[1];
              if (v127 == v128) {
                break;
              }
              v127 = (char *)strcmp(v127, v128);
              if (!v127) {
                break;
              }
            }
            v124 += 3;
            uint64_t v125 = v126;
            if (v124 == v123) {
              goto LABEL_220;
            }
          }
          if (v124 - 3 != v123)
          {
            v324 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance((Phase::Logger *)v127)
                                                                                                 + 784)));
            if (os_log_type_enabled(v324, OS_LOG_TYPE_ERROR))
            {
              uint64_t v325 = *(v124 - 2);
              *(_DWORD *)buf = 136315906;
              *(void *)&buf[4] = "ProfileRegistry.mm";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 242;
              __int16 v370 = 2080;
              *(void *)v371 = *((void *)&v345 + 1);
              *(_WORD *)&v371[8] = 2080;
              *(void *)&v371[10] = v325;
              _os_log_impl(&dword_221E5E000, v324, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (Phase::Controller::ProfileRegistryException::DuplicateEntry): \"[%s]: Found Modeler %s in more than one Category.\"", buf, 0x26u);
            }

            v326 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v326, "[%s]: Found Modeler %s in more than one Category.");
            v326->__vftable = (std::logic_error_vtbl *)&unk_26D479E60;
          }
        }
      }
LABEL_220:
      *(void *)buf = v384;
      std::vector<Phase::StringId>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      unint64_t v129 = v342;
      unint64_t v130 = *((void *)this + 1);
      if (v130)
      {
        uint8x8_t v131 = (uint8x8_t)vcnt_s8((int8x8_t)v130);
        v131.i16[0] = vaddlv_u8(v131);
        unint64_t v132 = v131.u32[0];
        if (v131.u32[0] > 1uLL)
        {
          unint64_t v73 = v342;
          if (v130 <= v342) {
            unint64_t v73 = v342 % v130;
          }
        }
        else
        {
          unint64_t v73 = (v130 - 1) & v342;
        }
        v133 = *(void **)(*(void *)this + 8 * v73);
        if (v133)
        {
          v134 = (void *)*v133;
          if (*v133)
          {
            v135 = __s2;
            do
            {
              unint64_t v136 = v134[1];
              if (v136 == v129)
              {
                if (v134[2] == v129)
                {
                  v137 = (const char *)v134[3];
                  if (v137 == v135 || !strcmp(v137, v135))
                  {
                    v259 = (Phase::Logger *)Phase::Controller::ProfileRegistry::DumpState((Phase::Controller::ProfileRegistry *)v358, (uint64_t)this);
                    v260 = **(id **)(Phase::Logger::GetInstance(v259) + 784);
                    BOOL v261 = os_log_type_enabled(v260, OS_LOG_TYPE_ERROR);
                    if (v261)
                    {
                      v262 = v358;
                      if (v358[23] < 0) {
                        v262 = *(unsigned char **)v358;
                      }
                      *(_DWORD *)buf = 136315650;
                      *(void *)&buf[4] = "ProfileRegistry.mm";
                      *(_WORD *)&buf[12] = 1024;
                      *(_DWORD *)&buf[14] = 709;
                      __int16 v370 = 2080;
                      *(void *)v371 = v262;
                      _os_log_impl(&dword_221E5E000, v260, OS_LOG_TYPE_ERROR, "%25s:%-5d %s", buf, 0x1Cu);
                    }
                    v263 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)v261) + 784);
                    if (os_log_type_enabled(v263, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 136315650;
                      *(void *)&buf[4] = "ProfileRegistry.mm";
                      *(_WORD *)&buf[12] = 1024;
                      *(_DWORD *)&buf[14] = 711;
                      __int16 v370 = 2080;
                      *(void *)v371 = __s2;
                      _os_log_impl(&dword_221E5E000, v263, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (ProfileRegistryException::DuplicateEntry): \"Profile with name %s already exists\"", buf, 0x1Cu);
                    }

                    v264 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                    std::logic_error::logic_error(v264, "Profile with name %s already exists");
                    v264->__vftable = (std::logic_error_vtbl *)&unk_26D479E60;
                  }
                }
              }
              else
              {
                if (v132 > 1)
                {
                  if (v136 >= v130) {
                    v136 %= v130;
                  }
                }
                else
                {
                  v136 &= v130 - 1;
                }
                if (v136 != v73) {
                  break;
                }
              }
              v134 = (void *)*v134;
            }
            while (v134);
          }
        }
      }
      v138 = operator new(0x80uLL);
      void *v138 = 0;
      v138[1] = v129;
      Phase::StringId::StringId((uint64_t)(v138 + 2), (uint64_t)&v342);
      Phase::StringId::StringId((uint64_t)(v138 + 5), (uint64_t)&v345);
      *((_OWORD *)v138 + 4) = __p;
      v138[10] = v348;
      uint64_t v139 = (Phase::Logger *)std::unordered_map<Phase::StringId,Phase::Controller::ProfileRegistry::Category>::unordered_map((uint64_t)(v138 + 11), (uint64_t)&v348 + 8);
      float v140 = (float)(unint64_t)(*((void *)this + 3) + 1);
      float v141 = *((float *)this + 8);
      if (!v130 || (float)(v141 * (float)v130) < v140)
      {
        BOOL v142 = (v130 & (v130 - 1)) != 0;
        if (v130 < 3) {
          BOOL v142 = 1;
        }
        unint64_t v143 = v142 | (2 * v130);
        unint64_t v144 = vcvtps_u32_f32(v140 / v141);
        if (v143 <= v144) {
          size_t v145 = v144;
        }
        else {
          size_t v145 = v143;
        }
        std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>((uint64_t)this, v145);
        unint64_t v130 = *((void *)this + 1);
        if ((v130 & (v130 - 1)) != 0)
        {
          if (v130 <= v129) {
            unint64_t v73 = v129 % v130;
          }
          else {
            unint64_t v73 = v129;
          }
        }
        else
        {
          unint64_t v73 = (v130 - 1) & v129;
        }
      }
      uint64_t v146 = *(void *)this;
      uint64_t v147 = *(void **)(*(void *)this + 8 * v73);
      if (v147) {
        break;
      }
      void *v138 = *v333;
      void *v333 = v138;
      *(void *)(v146 + 8 * v73) = v333;
      if (*v138)
      {
        unint64_t v148 = *(void *)(*v138 + 8);
        if ((v130 & (v130 - 1)) != 0)
        {
          if (v148 >= v130) {
            v148 %= v130;
          }
        }
        else
        {
          v148 &= v130 - 1;
        }
        uint64_t v147 = (void *)(*(void *)this + 8 * v148);
        goto LABEL_259;
      }
LABEL_260:
      ++*((void *)this + 3);
      v149 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v139)
                                                                                           + 784)));
      if (os_log_type_enabled(v149, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315906;
        *(void *)&buf[4] = "ProfileRegistry.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 715;
        __int16 v370 = 2048;
        *(void *)v371 = this;
        *(_WORD *)&v371[8] = 2080;
        *(void *)&v371[10] = *((void *)&v345 + 1);
        _os_log_impl(&dword_221E5E000, v149, OS_LOG_TYPE_DEFAULT, "%25s:%-5d profileregistry@%p: Loaded profile with name '%s'.", buf, 0x26u);
      }

      std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>>>::~__hash_table((uint64_t)&v348 + 8);
      if (!LOBYTE(v346)) {
        free(*((void **)&v345 + 1));
      }
      *(void *)&long long v345 = 0;
      *((void *)&v345 + 1) = &str_33;
      LOBYTE(v346) = 1;
      if (!v344) {
        free(__s2);
      }
      uint64_t v69 = *v336;
      if (!*v336) {
        goto LABEL_267;
      }
    }
    void *v138 = *v147;
LABEL_259:
    *uint64_t v147 = v138;
    goto LABEL_260;
  }
LABEL_267:
  std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>>>::~__hash_table((uint64_t)&v351);
}

void sub_22202E704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::ProfileRegistry::DumpState(Phase::Controller::ProfileRegistry *this, uint64_t a2)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"ProfileRegistry: ", 17);
  uint64_t v3 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" --- State ---", 14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"\nProfiles (", 11);
  v4 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)")", 1);
  v5 = (uint64_t **)(a2 + 16);
  while (1)
  {
    v5 = (uint64_t **)*v5;
    if (!v5) {
      break;
    }
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"\n\t ", 3);
    size_t v7 = strlen((const char *)v5[3]);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v5[3], v7);
    id v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"\n\t\tName = ", 10);
    size_t v9 = strlen((const char *)v5[6]);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v5[6], v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"\n\t\tComputeTime = ", 17);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"\n\t\tOverflowDetectionHistoryLength = ", 36);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"\n\t\tOverflowDetectionTimingThresholdSeconds = ", 45);
    std::ostream::operator<<();
  }
  std::stringbuf::str();
  v12[0] = *MEMORY[0x263F8C2B8];
  uint64_t v10 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v12 + *(void *)(v12[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v13[0] = v10;
  v13[1] = MEMORY[0x263F8C318] + 16;
  if (v14 < 0) {
    operator delete((void *)v13[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x223C937D0](&v15);
}

void sub_22202F2D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t Phase::Controller::ProfileRegistry::FindProfileId@<X0>(uint64_t this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = &str_33;
  *(unsigned char *)(a3 + 16) = 1;
  v4 = (void *)(this + 16);
  while (1)
  {
    v4 = (void *)*v4;
    if (!v4) {
      break;
    }
    if (v4[2] == a2) {
      return Phase::StringId::operator=(a3, (uint64_t)(v4 + 2));
    }
  }
  return this;
}

void sub_22202F34C(_Unwind_Exception *exception_object)
{
  if (!*(unsigned char *)(v1 + 16)) {
    free(*(void **)(v1 + 8));
  }
  *(void *)uint64_t v1 = 0;
  *(void *)(v1 + 8) = v2;
  *(unsigned char *)(v1 + 16) = 1;
  _Unwind_Resume(exception_object);
}

void Phase::Controller::ProfileRegistry::GetModelers(Phase::Controller::ProfileRegistry *this@<X0>, const Phase::StringId *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  *(_OWORD *)a3 = 0u;
  *((_OWORD *)a3 + 1) = 0u;
  *((_DWORD *)a3 + 8) = 1065353216;
  v6 = std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>>>::find<Phase::StringId>(this, (unint64_t *)a2);
  if (!v6)
  {
    unint64_t v45 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(0)
                                                                                        + 784)));
    if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
    {
      uint64_t v46 = *((void *)a2 + 1);
      *(_DWORD *)buf = 136315650;
      uint64_t v48 = "ProfileRegistry.mm";
      __int16 v49 = 1024;
      int v50 = 760;
      __int16 v51 = 2080;
      uint64_t v52 = v46;
      _os_log_impl(&dword_221E5E000, v45, OS_LOG_TYPE_ERROR, "%25s:%-5d Error: Couldn't find profile %s. Returning an empty map.", buf, 0x1Cu);
    }

    return;
  }
  id v8 = (void *)v6[13];
  if (!v8) {
    return;
  }
  size_t v9 = a3 + 2;
  do
  {
    SpatialCategoryFromStringId = (Phase::Logger *)Phase::Controller::GetSpatialCategoryFromStringId((Phase::Controller *)(v8 + 2), v7);
    int v11 = (int)SpatialCategoryFromStringId;
    uint64_t v12 = v8[8];
    unint64_t v13 = (int)SpatialCategoryFromStringId;
    unint64_t v14 = a3[1];
    if (!v14) {
      goto LABEL_20;
    }
    uint8x8_t v15 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
    v15.i16[0] = vaddlv_u8(v15);
    if (v15.u32[0] > 1uLL)
    {
      unint64_t v3 = (int)SpatialCategoryFromStringId;
      if (v14 <= (int)SpatialCategoryFromStringId) {
        unint64_t v3 = (int)SpatialCategoryFromStringId % v14;
      }
    }
    else
    {
      unint64_t v3 = (v14 - 1) & (int)SpatialCategoryFromStringId;
    }
    unint64_t v16 = *(uint64_t ***)(*a3 + 8 * v3);
    if (!v16 || (uint64_t v17 = *v16) == 0)
    {
LABEL_20:
      v19 = operator new(0x20uLL);
      void *v19 = 0;
      v19[1] = v13;
      *((_DWORD *)v19 + 4) = v11;
      v19[3] = v12;
      float v20 = (float)(unint64_t)(a3[3] + 1);
      float v21 = *((float *)a3 + 8);
      if (v14 && (float)(v21 * (float)v14) >= v20)
      {
LABEL_66:
        uint64_t v37 = *a3;
        float v38 = *(void **)(*a3 + 8 * v3);
        if (v38)
        {
          void *v19 = *v38;
        }
        else
        {
          void *v19 = *v9;
          *size_t v9 = v19;
          *(void *)(v37 + 8 * v3) = v9;
          if (!*v19)
          {
LABEL_75:
            ++a3[3];
            goto LABEL_76;
          }
          unint64_t v39 = *(void *)(*v19 + 8);
          if ((v14 & (v14 - 1)) != 0)
          {
            if (v39 >= v14) {
              v39 %= v14;
            }
          }
          else
          {
            v39 &= v14 - 1;
          }
          float v38 = (void *)(*a3 + 8 * v39);
        }
        void *v38 = v19;
        goto LABEL_75;
      }
      BOOL v22 = (v14 & (v14 - 1)) != 0;
      if (v14 < 3) {
        BOOL v22 = 1;
      }
      unint64_t v23 = v22 | (2 * v14);
      unint64_t v24 = vcvtps_u32_f32(v20 / v21);
      if (v23 <= v24) {
        int8x8_t prime = (int8x8_t)v24;
      }
      else {
        int8x8_t prime = (int8x8_t)v23;
      }
      if (*(void *)&prime == 1)
      {
        int8x8_t prime = (int8x8_t)2;
      }
      else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
      {
        int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
        unint64_t v14 = a3[1];
      }
      if (*(void *)&prime > v14) {
        goto LABEL_32;
      }
      if (*(void *)&prime < v14)
      {
        unint64_t v32 = vcvtps_u32_f32((float)(unint64_t)a3[3] / *((float *)a3 + 8));
        if (v14 < 3 || (uint8x8_t v33 = (uint8x8_t)vcnt_s8((int8x8_t)v14), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
        {
          unint64_t v32 = std::__next_prime(v32);
        }
        else
        {
          uint64_t v34 = 1 << -(char)__clz(v32 - 1);
          if (v32 >= 2) {
            unint64_t v32 = v34;
          }
        }
        if (*(void *)&prime <= v32) {
          int8x8_t prime = (int8x8_t)v32;
        }
        if (*(void *)&prime >= v14)
        {
          unint64_t v14 = a3[1];
        }
        else
        {
          if (prime)
          {
LABEL_32:
            if (*(void *)&prime >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            v26 = operator new(8 * *(void *)&prime);
            unint64_t v27 = (void *)*a3;
            *a3 = (uint64_t)v26;
            if (v27) {
              operator delete(v27);
            }
            uint64_t v28 = 0;
            a3[1] = (uint64_t)prime;
            do
              *(void *)(*a3 + 8 * v28++) = 0;
            while (*(void *)&prime != v28);
            unint64_t v29 = (void *)*v9;
            if (*v9)
            {
              unint64_t v30 = v29[1];
              uint8x8_t v31 = (uint8x8_t)vcnt_s8(prime);
              v31.i16[0] = vaddlv_u8(v31);
              if (v31.u32[0] > 1uLL)
              {
                if (v30 >= *(void *)&prime) {
                  v30 %= *(void *)&prime;
                }
              }
              else
              {
                v30 &= *(void *)&prime - 1;
              }
              *(void *)(*a3 + 8 * v30) = v9;
              unint64_t v35 = (void *)*v29;
              if (*v29)
              {
                do
                {
                  unint64_t v36 = v35[1];
                  if (v31.u32[0] > 1uLL)
                  {
                    if (v36 >= *(void *)&prime) {
                      v36 %= *(void *)&prime;
                    }
                  }
                  else
                  {
                    v36 &= *(void *)&prime - 1;
                  }
                  if (v36 != v30)
                  {
                    if (!*(void *)(*a3 + 8 * v36))
                    {
                      *(void *)(*a3 + 8 * v36) = v29;
                      goto LABEL_57;
                    }
                    void *v29 = *v35;
                    *unint64_t v35 = **(void **)(*a3 + 8 * v36);
                    **(void **)(*a3 + 8 * v36) = v35;
                    unint64_t v35 = v29;
                  }
                  unint64_t v36 = v30;
LABEL_57:
                  unint64_t v29 = v35;
                  unint64_t v35 = (void *)*v35;
                  unint64_t v30 = v36;
                }
                while (v35);
              }
            }
            unint64_t v14 = (unint64_t)prime;
            goto LABEL_61;
          }
          unint64_t v44 = (void *)*a3;
          *a3 = 0;
          if (v44) {
            operator delete(v44);
          }
          unint64_t v14 = 0;
          a3[1] = 0;
        }
      }
LABEL_61:
      if ((v14 & (v14 - 1)) != 0)
      {
        if (v14 <= v13) {
          unint64_t v3 = v13 % v14;
        }
        else {
          unint64_t v3 = v13;
        }
      }
      else
      {
        unint64_t v3 = (v14 - 1) & v13;
      }
      goto LABEL_66;
    }
    while (1)
    {
      unint64_t v18 = v17[1];
      if (v18 == (int)SpatialCategoryFromStringId) {
        break;
      }
      if (v15.u32[0] > 1uLL)
      {
        if (v18 >= v14) {
          v18 %= v14;
        }
      }
      else
      {
        v18 &= v14 - 1;
      }
      if (v18 != v3) {
        goto LABEL_20;
      }
LABEL_19:
      uint64_t v17 = (uint64_t *)*v17;
      if (!v17) {
        goto LABEL_20;
      }
    }
    if (*((_DWORD *)v17 + 4) != SpatialCategoryFromStringId) {
      goto LABEL_19;
    }
    unint64_t v40 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(SpatialCategoryFromStringId)
                                                                                        + 784)));
    if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
    {
      uint64_t v42 = v8[3];
      uint64_t v43 = v8[9];
      *(_DWORD *)buf = 136315906;
      uint64_t v48 = "ProfileRegistry.mm";
      __int16 v49 = 1024;
      int v50 = 753;
      __int16 v51 = 2080;
      uint64_t v52 = v42;
      __int16 v53 = 2080;
      uint64_t v54 = v43;
      _os_log_impl(&dword_221E5E000, v40, OS_LOG_TYPE_ERROR, "%25s:%-5d Error: Failed to insert [%s, %s]!", buf, 0x26u);
    }

LABEL_76:
    id v8 = (void *)*v8;
  }
  while (v8);
}

void sub_22202F8E4(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void Phase::Controller::ProfileRegistry::GetParameters(Phase::Controller::ProfileRegistry *this@<X0>, const Phase::StringId *a2@<X1>, double a3@<D0>, void **a4@<X8>)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (a3 >= 0.0 && a3 <= 1.0)
  {
    size_t v9 = std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>>>::find<Phase::StringId>(this, (unint64_t *)a2);
    if (v9)
    {
      int v11 = (void *)v9[13];
      if (v11)
      {
        while (1)
        {
          int SpatialCategoryFromStringId = Phase::Controller::GetSpatialCategoryFromStringId((Phase::Controller *)(v11 + 2), v10);
          if (!SpatialCategoryFromStringId) {
            goto LABEL_34;
          }
          unint64_t v36 = v11;
          unint64_t v13 = (void *)v11[14];
          if (v13) {
            break;
          }
LABEL_32:
          int v11 = (void *)*v36;
          if (!*v36) {
            return;
          }
        }
        while (1)
        {
          int SpatialModelerGraphFromStringId = Phase::Controller::GetSpatialModelerGraphFromStringId((Phase::Controller *)(v13 + 2), v10);
          if (!SpatialModelerGraphFromStringId) {
            goto LABEL_34;
          }
          uint64_t v37 = v13;
          uint8x8_t v15 = (void *)v13[10];
          if (v15) {
            break;
          }
LABEL_31:
          unint64_t v13 = (void *)*v37;
          if (!*v37) {
            goto LABEL_32;
          }
        }
        while (1)
        {
          int SpatialModelerStageFromStringId = Phase::Controller::GetSpatialModelerStageFromStringId((Phase::Controller *)(v15 + 2), v10);
          if (!SpatialModelerStageFromStringId) {
            goto LABEL_34;
          }
          uint64_t v17 = (double **)v15[10];
          if (v17) {
            break;
          }
LABEL_30:
          uint8x8_t v15 = (void *)*v15;
          if (!v15) {
            goto LABEL_31;
          }
        }
        while (1)
        {
          int SpatialModelerParameterFromStringId = Phase::Controller::GetSpatialModelerParameterFromStringId((Phase::Controller *)(v17 + 2), v10);
          if (!SpatialModelerParameterFromStringId) {
            break;
          }
          double v19 = Phase::Envelope<double>::operator()(v17 + 8, a3);
          double v20 = v19;
          float v21 = (char *)a4[1];
          BOOL v22 = (char *)a4[2];
          if (v21 >= v22)
          {
            unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((v21 - (unsigned char *)*a4) >> 3);
            unint64_t v25 = v24 + 1;
            if (v24 + 1 > 0xAAAAAAAAAAAAAAALL) {
              std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((v22 - (unsigned char *)*a4) >> 3);
            if (2 * v26 > v25) {
              unint64_t v25 = 2 * v26;
            }
            if (v26 >= 0x555555555555555) {
              unint64_t v27 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v27 = v25;
            }
            uint64_t v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a4 + 2), v27);
            unint64_t v29 = &v28[24 * v24];
            *(_DWORD *)unint64_t v29 = SpatialCategoryFromStringId;
            *((_DWORD *)v29 + 1) = SpatialModelerGraphFromStringId;
            *((_DWORD *)v29 + 2) = SpatialModelerStageFromStringId;
            *((_DWORD *)v29 + 3) = SpatialModelerParameterFromStringId;
            *((double *)v29 + 2) = v20;
            uint8x8_t v31 = (char *)*a4;
            unint64_t v30 = (char *)a4[1];
            unint64_t v32 = v29;
            if (v30 != *a4)
            {
              do
              {
                long long v33 = *(_OWORD *)(v30 - 24);
                *((void *)v32 - 1) = *((void *)v30 - 1);
                *(_OWORD *)(v32 - 24) = v33;
                v32 -= 24;
                v30 -= 24;
              }
              while (v30 != v31);
              unint64_t v30 = (char *)*a4;
            }
            unint64_t v23 = v29 + 24;
            *a4 = v32;
            a4[1] = v29 + 24;
            a4[2] = &v28[24 * (void)v10];
            if (v30) {
              operator delete(v30);
            }
          }
          else
          {
            *(_DWORD *)float v21 = SpatialCategoryFromStringId;
            *((_DWORD *)v21 + 1) = SpatialModelerGraphFromStringId;
            *((_DWORD *)v21 + 2) = SpatialModelerStageFromStringId;
            *((_DWORD *)v21 + 3) = SpatialModelerParameterFromStringId;
            unint64_t v23 = v21 + 24;
            *((double *)v21 + 2) = v19;
          }
          a4[1] = v23;
          uint64_t v17 = (double **)*v17;
          if (!v17) {
            goto LABEL_30;
          }
        }
LABEL_34:
        std::terminate();
      }
    }
    else
    {
      uint64_t v34 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(0)
                                                                                          + 784)));
      if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
      {
        double v35 = *((double *)a2 + 1);
        *(_DWORD *)buf = 136315650;
        unint64_t v39 = "ProfileRegistry.mm";
        __int16 v40 = 1024;
        int v41 = 806;
        __int16 v42 = 2080;
        double v43 = v35;
        _os_log_impl(&dword_221E5E000, v34, OS_LOG_TYPE_ERROR, "%25s:%-5d Error: Couldn't find profile %s. Returning empty parameters.", buf, 0x1Cu);
      }
    }
  }
  else
  {
    size_t v7 = **(id **)(Phase::Logger::GetInstance(this) + 784);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316162;
      unint64_t v39 = "ProfileRegistry.mm";
      __int16 v40 = 1024;
      int v41 = 773;
      __int16 v42 = 2048;
      double v43 = a3;
      __int16 v44 = 2048;
      uint64_t v45 = 0;
      __int16 v46 = 2048;
      uint64_t v47 = 0x3FF0000000000000;
      _os_log_impl(&dword_221E5E000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d inBalance %f out-of-range [%f, %f]!", buf, 0x30u);
    }
  }
}

void sub_22202FC80(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void Phase::Controller::ProfileRegistry::GetComputeWeights(Phase::Controller::ProfileRegistry *this@<X0>, const Phase::StringId *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  v6 = std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>>>::find<Phase::StringId>(this, (unint64_t *)a2);
  if (v6)
  {
    id v8 = (void *)v6[13];
    if (!v8) {
      return;
    }
    size_t v9 = (void **)(a3 + 16);
    while (1)
    {
      int SpatialCategoryFromStringId = (Phase::Logger *)Phase::Controller::GetSpatialCategoryFromStringId((Phase::Controller *)(v8 + 2), v7);
      int v11 = (int)SpatialCategoryFromStringId;
      uint64_t v12 = v8[11];
      unint64_t v13 = (int)SpatialCategoryFromStringId;
      unint64_t v14 = *(void *)(a3 + 8);
      if (v14)
      {
        uint8x8_t v15 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
        v15.i16[0] = vaddlv_u8(v15);
        if (v15.u32[0] > 1uLL)
        {
          unint64_t v3 = (int)SpatialCategoryFromStringId;
          if (v14 <= (int)SpatialCategoryFromStringId) {
            unint64_t v3 = (int)SpatialCategoryFromStringId % v14;
          }
        }
        else
        {
          unint64_t v3 = (v14 - 1) & (int)SpatialCategoryFromStringId;
        }
        unint64_t v16 = *(uint64_t ***)(*(void *)a3 + 8 * v3);
        if (v16)
        {
          for (uint64_t i = *v16; i; uint64_t i = (uint64_t *)*i)
          {
            unint64_t v18 = i[1];
            if (v18 == (int)SpatialCategoryFromStringId)
            {
              if (*((_DWORD *)i + 4) == SpatialCategoryFromStringId)
              {
                uint8x8_t v31 = **(id **)(Phase::Logger::GetInstance(SpatialCategoryFromStringId) + 784);
                if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
                {
                  uint64_t v33 = v8[3];
                  uint64_t v34 = v8[9];
                  int v39 = 136315906;
                  __int16 v40 = "ProfileRegistry.mm";
                  __int16 v41 = 1024;
                  int v42 = 825;
                  __int16 v43 = 2080;
                  uint64_t v44 = v33;
                  __int16 v45 = 2080;
                  uint64_t v46 = v34;
                  _os_log_impl(&dword_221E5E000, v31, OS_LOG_TYPE_ERROR, "%25s:%-5d Error: Failed to insert [%s, %s]!", (uint8_t *)&v39, 0x26u);
                }

                if (*(void *)(a3 + 24))
                {
                  double v35 = *v9;
                  if (*v9)
                  {
                    do
                    {
                      unint64_t v36 = (void *)*v35;
                      operator delete(v35);
                      double v35 = v36;
                    }
                    while (v36);
                  }
                  *(void *)(a3 + 16) = 0;
                  uint64_t v37 = *(void *)(a3 + 8);
                  if (v37)
                  {
                    for (uint64_t j = 0; j != v37; ++j)
                      *(void *)(*(void *)a3 + 8 * j) = 0;
                  }
                  *(void *)(a3 + 24) = 0;
                }
                return;
              }
            }
            else
            {
              if (v15.u32[0] > 1uLL)
              {
                if (v18 >= v14) {
                  v18 %= v14;
                }
              }
              else
              {
                v18 &= v14 - 1;
              }
              if (v18 != v3) {
                break;
              }
            }
          }
        }
      }
      double v19 = operator new(0x20uLL);
      void *v19 = 0;
      v19[1] = v13;
      *((_DWORD *)v19 + 4) = v11;
      v19[3] = v12;
      float v20 = (float)(unint64_t)(*(void *)(a3 + 24) + 1);
      float v21 = *(float *)(a3 + 32);
      if (!v14 || (float)(v21 * (float)v14) < v20)
      {
        BOOL v22 = (v14 & (v14 - 1)) != 0;
        if (v14 < 3) {
          BOOL v22 = 1;
        }
        unint64_t v23 = v22 | (2 * v14);
        unint64_t v24 = vcvtps_u32_f32(v20 / v21);
        if (v23 <= v24) {
          size_t v25 = v24;
        }
        else {
          size_t v25 = v23;
        }
        std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::__rehash<true>(a3, v25);
        unint64_t v14 = *(void *)(a3 + 8);
        if ((v14 & (v14 - 1)) != 0)
        {
          if (v14 <= v13) {
            unint64_t v3 = v13 % v14;
          }
          else {
            unint64_t v3 = v13;
          }
        }
        else
        {
          unint64_t v3 = (v14 - 1) & v13;
        }
      }
      uint64_t v26 = *(void *)a3;
      unint64_t v27 = *(void **)(*(void *)a3 + 8 * v3);
      if (v27) {
        break;
      }
      void *v19 = *v9;
      *size_t v9 = v19;
      *(void *)(v26 + 8 * v3) = v9;
      if (*v19)
      {
        unint64_t v28 = *(void *)(*v19 + 8);
        if ((v14 & (v14 - 1)) != 0)
        {
          if (v28 >= v14) {
            v28 %= v14;
          }
        }
        else
        {
          v28 &= v14 - 1;
        }
        unint64_t v27 = (void *)(*(void *)a3 + 8 * v28);
        goto LABEL_40;
      }
LABEL_41:
      ++*(void *)(a3 + 24);
      id v8 = (void *)*v8;
      if (!v8) {
        return;
      }
    }
    void *v19 = *v27;
LABEL_40:
    *unint64_t v27 = v19;
    goto LABEL_41;
  }
  unint64_t v29 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(0)
                                                                                      + 784)));
  if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
  {
    uint64_t v30 = *((void *)a2 + 1);
    int v39 = 136315650;
    __int16 v40 = "ProfileRegistry.mm";
    __int16 v41 = 1024;
    int v42 = 836;
    __int16 v43 = 2080;
    uint64_t v44 = v30;
    _os_log_impl(&dword_221E5E000, v29, OS_LOG_TYPE_ERROR, "%25s:%-5d Error: Couldn't find profile %s. Returning an empty map.", (uint8_t *)&v39, 0x1Cu);
  }
}

void sub_2220300A8(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::ProfileRegistry::GetComputeTime(Phase::Controller::ProfileRegistry *this, const Phase::StringId *a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v3 = std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>>>::find<Phase::StringId>(this, (unint64_t *)a2);
  if (v3) {
    return v3[8];
  }
  v5 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(0)
                                                                                     + 784)));
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    uint64_t v6 = *((void *)a2 + 1);
    int v7 = 136315650;
    id v8 = "ProfileRegistry.mm";
    __int16 v9 = 1024;
    int v10 = 852;
    __int16 v11 = 2080;
    uint64_t v12 = v6;
    _os_log_impl(&dword_221E5E000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d Error: Couldn't find profile %s. Returning std::nullopt.", (uint8_t *)&v7, 0x1Cu);
  }

  return 0;
}

void Phase::Controller::ProfileRegistry::GetOverflowParameters(Phase::Controller::ProfileRegistry *this@<X0>, const Phase::StringId *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  v5 = std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>>>::find<Phase::StringId>(this, (unint64_t *)a2);
  if (v5)
  {
    *(_OWORD *)a3 = *(_OWORD *)(v5 + 9);
    char v6 = 1;
  }
  else
  {
    int v7 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(0)
                                                                                       + 784)));
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = *((void *)a2 + 1);
      int v9 = 136315650;
      int v10 = "ProfileRegistry.mm";
      __int16 v11 = 1024;
      int v12 = 867;
      __int16 v13 = 2080;
      uint64_t v14 = v8;
      _os_log_impl(&dword_221E5E000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d Error: Couldn't find profile %s. Returning std::nullopt.", (uint8_t *)&v9, 0x1Cu);
    }

    char v6 = 0;
    *(unsigned char *)a3 = 0;
  }
  *(unsigned char *)(a3 + 16) = v6;
}

void Phase::Controller::ProfileRegistryException::MissingRequiredField::~MissingRequiredField(std::logic_error *this)
{
  std::logic_error::~logic_error(this);

  JUMPOUT(0x223C938A0);
}

void Phase::Controller::ProfileRegistryException::FieldWithWrongType::~FieldWithWrongType(std::logic_error *this)
{
  std::logic_error::~logic_error(this);

  JUMPOUT(0x223C938A0);
}

void Phase::Controller::ProfileRegistryException::EmptyString::~EmptyString(std::logic_error *this)
{
  std::logic_error::~logic_error(this);

  JUMPOUT(0x223C938A0);
}

void Phase::Controller::ProfileRegistryException::InvalidString::~InvalidString(std::logic_error *this)
{
  std::logic_error::~logic_error(this);

  JUMPOUT(0x223C938A0);
}

void Phase::Controller::ProfileRegistryException::InvalidEnvelopeStartPoint::~InvalidEnvelopeStartPoint(std::logic_error *this)
{
  std::logic_error::~logic_error(this);

  JUMPOUT(0x223C938A0);
}

void Phase::Controller::ProfileRegistryException::InvalidNumber::~InvalidNumber(std::logic_error *this)
{
  std::logic_error::~logic_error(this);

  JUMPOUT(0x223C938A0);
}

void Phase::Controller::ProfileRegistryException::InvalidEnvelopeSegmentType::~InvalidEnvelopeSegmentType(std::logic_error *this)
{
  std::logic_error::~logic_error(this);

  JUMPOUT(0x223C938A0);
}

void Phase::Controller::ProfileRegistryException::NilURL::~NilURL(std::logic_error *this)
{
  std::logic_error::~logic_error(this);

  JUMPOUT(0x223C938A0);
}

void Phase::Controller::ProfileRegistryException::InvalidURL::~InvalidURL(std::logic_error *this)
{
  std::logic_error::~logic_error(this);

  JUMPOUT(0x223C938A0);
}

void Phase::Controller::ProfileRegistryException::InvalidJSON::~InvalidJSON(std::logic_error *this)
{
  std::logic_error::~logic_error(this);

  JUMPOUT(0x223C938A0);
}

uint64_t std::unordered_map<Phase::StringId,Phase::Controller::ProfileRegistry::Category>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  v5 = *(void **)(a2 + 16);
  if (v5)
  {
    uint64_t v26 = (void *)(a1 + 16);
    do
    {
      unint64_t v6 = v5[2];
      unint64_t v7 = *(void *)(a1 + 8);
      if (v7)
      {
        uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
        v8.i16[0] = vaddlv_u8(v8);
        unint64_t v9 = v8.u32[0];
        if (v8.u32[0] > 1uLL)
        {
          unint64_t v2 = v5[2];
          if (v7 <= v6) {
            unint64_t v2 = v6 % v7;
          }
        }
        else
        {
          unint64_t v2 = (v7 - 1) & v6;
        }
        int v10 = *(void **)(*(void *)a1 + 8 * v2);
        if (v10)
        {
          __int16 v11 = (void *)*v10;
          if (*v10)
          {
            int v12 = (const char *)v5[3];
            do
            {
              unint64_t v13 = v11[1];
              if (v13 == v6)
              {
                if (v11[2] == v6)
                {
                  uint64_t v14 = (const char *)v11[3];
                  if (v14 == v12 || !strcmp(v14, v12)) {
                    goto LABEL_44;
                  }
                }
              }
              else
              {
                if (v9 > 1)
                {
                  if (v13 >= v7) {
                    v13 %= v7;
                  }
                }
                else
                {
                  v13 &= v7 - 1;
                }
                if (v13 != v2) {
                  break;
                }
              }
              __int16 v11 = (void *)*v11;
            }
            while (v11);
          }
        }
      }
      uint64_t v15 = operator new(0x88uLL);
      v27[0] = v15;
      v27[1] = a1 + 16;
      char v28 = 0;
      void *v15 = 0;
      v15[1] = v6;
      Phase::StringId::StringId((uint64_t)(v15 + 2), (uint64_t)(v5 + 2));
      Phase::StringId::StringId((uint64_t)(v15 + 5), (uint64_t)(v5 + 5));
      Phase::StringId::StringId((uint64_t)(v15 + 8), (uint64_t)(v5 + 8));
      v15[11] = v5[11];
      std::unordered_map<Phase::StringId,Phase::Controller::ProfileRegistry::Graph>::unordered_map((uint64_t)(v15 + 12), (uint64_t)(v5 + 12));
      char v28 = 1;
      float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
      float v17 = *(float *)(a1 + 32);
      if (!v7 || (float)(v17 * (float)v7) < v16)
      {
        BOOL v18 = (v7 & (v7 - 1)) != 0;
        if (v7 < 3) {
          BOOL v18 = 1;
        }
        unint64_t v19 = v18 | (2 * v7);
        unint64_t v20 = vcvtps_u32_f32(v16 / v17);
        if (v19 <= v20) {
          size_t v21 = v20;
        }
        else {
          size_t v21 = v19;
        }
        std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>(a1, v21);
        unint64_t v7 = *(void *)(a1 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v7 <= v6) {
            unint64_t v2 = v6 % v7;
          }
          else {
            unint64_t v2 = v6;
          }
        }
        else
        {
          unint64_t v2 = (v7 - 1) & v6;
        }
      }
      uint64_t v22 = *(void *)a1;
      unint64_t v23 = *(void **)(*(void *)a1 + 8 * v2);
      if (v23)
      {
        void *v15 = *v23;
      }
      else
      {
        void *v15 = *v26;
        void *v26 = v15;
        *(void *)(v22 + 8 * v2) = v26;
        if (!*v15) {
          goto LABEL_43;
        }
        unint64_t v24 = *(void *)(*v15 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v24 >= v7) {
            v24 %= v7;
          }
        }
        else
        {
          v24 &= v7 - 1;
        }
        unint64_t v23 = (void *)(*(void *)a1 + 8 * v24);
      }
      *unint64_t v23 = v15;
LABEL_43:
      v27[0] = 0;
      ++*(void *)(a1 + 24);
      std::unique_ptr<std::__hash_node<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>,void *>>>>::reset[abi:ne180100]((uint64_t)v27);
LABEL_44:
      v5 = (void *)*v5;
    }
    while (v5);
  }
  return a1;
}

void sub_2220307CC(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<Phase::StringId,Phase::Controller::ProfileRegistry::Graph>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  v5 = *(void **)(a2 + 16);
  if (v5)
  {
    uint64_t v26 = (void *)(a1 + 16);
    do
    {
      unint64_t v6 = v5[2];
      unint64_t v7 = *(void *)(a1 + 8);
      if (v7)
      {
        uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
        v8.i16[0] = vaddlv_u8(v8);
        unint64_t v9 = v8.u32[0];
        if (v8.u32[0] > 1uLL)
        {
          unint64_t v2 = v5[2];
          if (v7 <= v6) {
            unint64_t v2 = v6 % v7;
          }
        }
        else
        {
          unint64_t v2 = (v7 - 1) & v6;
        }
        int v10 = *(void **)(*(void *)a1 + 8 * v2);
        if (v10)
        {
          __int16 v11 = (void *)*v10;
          if (*v10)
          {
            int v12 = (const char *)v5[3];
            do
            {
              unint64_t v13 = v11[1];
              if (v13 == v6)
              {
                if (v11[2] == v6)
                {
                  uint64_t v14 = (const char *)v11[3];
                  if (v14 == v12 || !strcmp(v14, v12)) {
                    goto LABEL_44;
                  }
                }
              }
              else
              {
                if (v9 > 1)
                {
                  if (v13 >= v7) {
                    v13 %= v7;
                  }
                }
                else
                {
                  v13 &= v7 - 1;
                }
                if (v13 != v2) {
                  break;
                }
              }
              __int16 v11 = (void *)*v11;
            }
            while (v11);
          }
        }
      }
      uint64_t v15 = operator new(0x68uLL);
      void *v15 = 0;
      v15[1] = v6;
      Phase::StringId::StringId((uint64_t)(v15 + 2), (uint64_t)(v5 + 2));
      Phase::StringId::StringId((uint64_t)(v15 + 5), (uint64_t)(v5 + 5));
      std::unordered_map<Phase::StringId,Phase::Controller::ProfileRegistry::Stage>::unordered_map((uint64_t)(v15 + 8), (uint64_t)(v5 + 8));
      float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
      float v17 = *(float *)(a1 + 32);
      if (!v7 || (float)(v17 * (float)v7) < v16)
      {
        BOOL v18 = (v7 & (v7 - 1)) != 0;
        if (v7 < 3) {
          BOOL v18 = 1;
        }
        unint64_t v19 = v18 | (2 * v7);
        unint64_t v20 = vcvtps_u32_f32(v16 / v17);
        if (v19 <= v20) {
          size_t v21 = v20;
        }
        else {
          size_t v21 = v19;
        }
        std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>(a1, v21);
        unint64_t v7 = *(void *)(a1 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v7 <= v6) {
            unint64_t v2 = v6 % v7;
          }
          else {
            unint64_t v2 = v6;
          }
        }
        else
        {
          unint64_t v2 = (v7 - 1) & v6;
        }
      }
      uint64_t v22 = *(void *)a1;
      unint64_t v23 = *(void **)(*(void *)a1 + 8 * v2);
      if (v23)
      {
        void *v15 = *v23;
      }
      else
      {
        void *v15 = *v26;
        void *v26 = v15;
        *(void *)(v22 + 8 * v2) = v26;
        if (!*v15) {
          goto LABEL_43;
        }
        unint64_t v24 = *(void *)(*v15 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v24 >= v7) {
            v24 %= v7;
          }
        }
        else
        {
          v24 &= v7 - 1;
        }
        unint64_t v23 = (void *)(*(void *)a1 + 8 * v24);
      }
      *unint64_t v23 = v15;
LABEL_43:
      ++*(void *)(a1 + 24);
LABEL_44:
      v5 = (void *)*v5;
    }
    while (v5);
  }
  return a1;
}

void sub_222030ACC(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Graph>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Graph>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Graph>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Graph>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<Phase::StringId,Phase::Controller::ProfileRegistry::Stage>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  v5 = *(void **)(a2 + 16);
  if (v5)
  {
    uint64_t v26 = (void *)(a1 + 16);
    do
    {
      unint64_t v6 = v5[2];
      unint64_t v7 = *(void *)(a1 + 8);
      if (v7)
      {
        uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
        v8.i16[0] = vaddlv_u8(v8);
        unint64_t v9 = v8.u32[0];
        if (v8.u32[0] > 1uLL)
        {
          unint64_t v2 = v5[2];
          if (v7 <= v6) {
            unint64_t v2 = v6 % v7;
          }
        }
        else
        {
          unint64_t v2 = (v7 - 1) & v6;
        }
        int v10 = *(void **)(*(void *)a1 + 8 * v2);
        if (v10)
        {
          __int16 v11 = (void *)*v10;
          if (*v10)
          {
            int v12 = (const char *)v5[3];
            do
            {
              unint64_t v13 = v11[1];
              if (v13 == v6)
              {
                if (v11[2] == v6)
                {
                  uint64_t v14 = (const char *)v11[3];
                  if (v14 == v12 || !strcmp(v14, v12)) {
                    goto LABEL_44;
                  }
                }
              }
              else
              {
                if (v9 > 1)
                {
                  if (v13 >= v7) {
                    v13 %= v7;
                  }
                }
                else
                {
                  v13 &= v7 - 1;
                }
                if (v13 != v2) {
                  break;
                }
              }
              __int16 v11 = (void *)*v11;
            }
            while (v11);
          }
        }
      }
      uint64_t v15 = operator new(0x68uLL);
      void *v15 = 0;
      v15[1] = v6;
      Phase::StringId::StringId((uint64_t)(v15 + 2), (uint64_t)(v5 + 2));
      Phase::StringId::StringId((uint64_t)(v15 + 5), (uint64_t)(v5 + 5));
      std::unordered_map<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>::unordered_map((uint64_t)(v15 + 8), (uint64_t)(v5 + 8));
      float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
      float v17 = *(float *)(a1 + 32);
      if (!v7 || (float)(v17 * (float)v7) < v16)
      {
        BOOL v18 = (v7 & (v7 - 1)) != 0;
        if (v7 < 3) {
          BOOL v18 = 1;
        }
        unint64_t v19 = v18 | (2 * v7);
        unint64_t v20 = vcvtps_u32_f32(v16 / v17);
        if (v19 <= v20) {
          size_t v21 = v20;
        }
        else {
          size_t v21 = v19;
        }
        std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>(a1, v21);
        unint64_t v7 = *(void *)(a1 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v7 <= v6) {
            unint64_t v2 = v6 % v7;
          }
          else {
            unint64_t v2 = v6;
          }
        }
        else
        {
          unint64_t v2 = (v7 - 1) & v6;
        }
      }
      uint64_t v22 = *(void *)a1;
      unint64_t v23 = *(void **)(*(void *)a1 + 8 * v2);
      if (v23)
      {
        void *v15 = *v23;
      }
      else
      {
        void *v15 = *v26;
        void *v26 = v15;
        *(void *)(v22 + 8 * v2) = v26;
        if (!*v15) {
          goto LABEL_43;
        }
        unint64_t v24 = *(void *)(*v15 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v24 >= v7) {
            v24 %= v7;
          }
        }
        else
        {
          v24 &= v7 - 1;
        }
        unint64_t v23 = (void *)(*(void *)a1 + 8 * v24);
      }
      *unint64_t v23 = v15;
LABEL_43:
      ++*(void *)(a1 + 24);
LABEL_44:
      v5 = (void *)*v5;
    }
    while (v5);
  }
  return a1;
}

void sub_222030DB4(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Stage>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Stage>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Stage>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Stage>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  v5 = *(void **)(a2 + 16);
  if (v5)
  {
    uint64_t v26 = (void *)(a1 + 16);
    do
    {
      unint64_t v6 = v5[2];
      unint64_t v7 = *(void *)(a1 + 8);
      if (v7)
      {
        uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
        v8.i16[0] = vaddlv_u8(v8);
        unint64_t v9 = v8.u32[0];
        if (v8.u32[0] > 1uLL)
        {
          unint64_t v2 = v5[2];
          if (v7 <= v6) {
            unint64_t v2 = v6 % v7;
          }
        }
        else
        {
          unint64_t v2 = (v7 - 1) & v6;
        }
        int v10 = *(void **)(*(void *)a1 + 8 * v2);
        if (v10)
        {
          __int16 v11 = (void *)*v10;
          if (*v10)
          {
            int v12 = (const char *)v5[3];
            do
            {
              unint64_t v13 = v11[1];
              if (v13 == v6)
              {
                if (v11[2] == v6)
                {
                  uint64_t v14 = (const char *)v11[3];
                  if (v14 == v12 || !strcmp(v14, v12)) {
                    goto LABEL_44;
                  }
                }
              }
              else
              {
                if (v9 > 1)
                {
                  if (v13 >= v7) {
                    v13 %= v7;
                  }
                }
                else
                {
                  v13 &= v7 - 1;
                }
                if (v13 != v2) {
                  break;
                }
              }
              __int16 v11 = (void *)*v11;
            }
            while (v11);
          }
        }
      }
      uint64_t v15 = operator new(0x58uLL);
      v27[0] = v15;
      v27[1] = a1 + 16;
      char v28 = 0;
      void *v15 = 0;
      v15[1] = v6;
      Phase::StringId::StringId((uint64_t)(v15 + 2), (uint64_t)(v5 + 2));
      Phase::StringId::StringId((uint64_t)(v15 + 5), (uint64_t)(v5 + 5));
      v15[8] = 0;
      v15[9] = 0;
      v15[10] = 0;
      std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__init_with_size[abi:ne180100]<Phase::Envelope<double>::SegmentInternal*,Phase::Envelope<double>::SegmentInternal*>(v15 + 8, v5[8], v5[9], (uint64_t)(v5[9] - v5[8]) >> 6);
      char v28 = 1;
      float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
      float v17 = *(float *)(a1 + 32);
      if (!v7 || (float)(v17 * (float)v7) < v16)
      {
        BOOL v18 = (v7 & (v7 - 1)) != 0;
        if (v7 < 3) {
          BOOL v18 = 1;
        }
        unint64_t v19 = v18 | (2 * v7);
        unint64_t v20 = vcvtps_u32_f32(v16 / v17);
        if (v19 <= v20) {
          size_t v21 = v20;
        }
        else {
          size_t v21 = v19;
        }
        std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>(a1, v21);
        unint64_t v7 = *(void *)(a1 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v7 <= v6) {
            unint64_t v2 = v6 % v7;
          }
          else {
            unint64_t v2 = v6;
          }
        }
        else
        {
          unint64_t v2 = (v7 - 1) & v6;
        }
      }
      uint64_t v22 = *(void *)a1;
      unint64_t v23 = *(void **)(*(void *)a1 + 8 * v2);
      if (v23)
      {
        void *v15 = *v23;
      }
      else
      {
        void *v15 = *v26;
        void *v26 = v15;
        *(void *)(v22 + 8 * v2) = v26;
        if (!*v15) {
          goto LABEL_43;
        }
        unint64_t v24 = *(void *)(*v15 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v24 >= v7) {
            v24 %= v7;
          }
        }
        else
        {
          v24 &= v7 - 1;
        }
        unint64_t v23 = (void *)(*(void *)a1 + 8 * v24);
      }
      *unint64_t v23 = v15;
LABEL_43:
      v27[0] = 0;
      ++*(void *)(a1 + 24);
      std::unique_ptr<std::__hash_node<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>,void *>>>>::reset[abi:ne180100]((uint64_t)v27);
LABEL_44:
      v5 = (void *)*v5;
    }
    while (v5);
  }
  return a1;
}

void sub_2220310D0(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<Phase::StringId const,Phase::Controller::ProfileRegistry::Parameter>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Stage>,void *>>>::operator()[abi:ne180100](char a1, uint64_t a2)
{
  if (a1)
  {
    std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>>>::~__hash_table(a2 + 64);
    if (!*(unsigned char *)(a2 + 56)) {
      free(*(void **)(a2 + 48));
    }
    *(void *)(a2 + 40) = 0;
    *(void *)(a2 + 48) = &str_33;
    *(unsigned char *)(a2 + 56) = 1;
    if (!*(unsigned char *)(a2 + 32)) {
      free(*(void **)(a2 + 24));
    }
  }
  else if (!a2)
  {
    return;
  }

  operator delete((void *)a2);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Graph>,void *>>>::operator()[abi:ne180100](char a1, uint64_t a2)
{
  if (a1)
  {
    std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Stage>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Stage>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Stage>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Stage>>>::~__hash_table(a2 + 64);
    if (!*(unsigned char *)(a2 + 56)) {
      free(*(void **)(a2 + 48));
    }
    *(void *)(a2 + 40) = 0;
    *(void *)(a2 + 48) = &str_33;
    *(unsigned char *)(a2 + 56) = 1;
    if (!*(unsigned char *)(a2 + 32)) {
      free(*(void **)(a2 + 24));
    }
  }
  else if (!a2)
  {
    return;
  }

  operator delete((void *)a2);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<Phase::StringId const,Phase::Controller::ProfileRegistry::Category>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void Phase::Controller::ProfileRegistryException::InvalidEnvelopeDomain::~InvalidEnvelopeDomain(std::logic_error *this)
{
  std::logic_error::~logic_error(this);

  JUMPOUT(0x223C938A0);
}

void Phase::Controller::ProfileRegistryException::InvalidSpatialModeler::~InvalidSpatialModeler(std::logic_error *this)
{
  std::logic_error::~logic_error(this);

  JUMPOUT(0x223C938A0);
}

void Phase::Controller::ProfileRegistryException::InvalidEnvelopeRange::~InvalidEnvelopeRange(std::logic_error *this)
{
  std::logic_error::~logic_error(this);

  JUMPOUT(0x223C938A0);
}

void std::__introsort<std::_ClassicAlgPolicy,sValidateProfile(Phase::Controller::ProfileRegistry::Profile const&,Phase::Controller::SpatialModelerRegistry *)::$_0 &,Phase::StringId *,false>(unint64_t *a1, unint64_t *a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v9 = a2;
    int v10 = a2 - 3;
    __int16 v11 = a1;
    while (1)
    {
      while (1)
      {
        a1 = v11;
        uint64_t v12 = (char *)v9 - (char *)v11;
        uint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (v9 - v11);
        if (v5 || !v4)
        {
          switch(v13)
          {
            case 0:
            case 1:
              return;
            case 2:
              unint64_t v32 = *(a2 - 3);
              v74 = a2 - 3;
              if (v32 >= *a1) {
                return;
              }
              uint64_t v33 = (uint64_t)a1;
              uint64_t v34 = (uint64_t)v74;
              break;
            case 3:
              std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,sValidateProfile(Phase::Controller::ProfileRegistry::Profile const&,Phase::Controller::SpatialModelerRegistry *)::$_0 &,Phase::StringId *>(a1, a1 + 3, v10);
              return;
            case 4:
              std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,sValidateProfile(Phase::Controller::ProfileRegistry::Profile const&,Phase::Controller::SpatialModelerRegistry *)::$_0 &,Phase::StringId *>(a1, a1 + 3, a1 + 6, v10);
              return;
            case 5:
              double v35 = a1 + 6;
              std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,sValidateProfile(Phase::Controller::ProfileRegistry::Profile const&,Phase::Controller::SpatialModelerRegistry *)::$_0 &,Phase::StringId *>(a1, a1 + 3, a1 + 6, a1 + 9);
              unint64_t v36 = *(a2 - 3);
              uint64_t v75 = (uint64_t)(a2 - 3);
              if (v36 >= a1[9]) {
                return;
              }
              std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<Phase::StringId *&,Phase::StringId *&>((uint64_t)(a1 + 9), v75);
              if (a1[9] >= *v35) {
                return;
              }
              std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<Phase::StringId *&,Phase::StringId *&>((uint64_t)(a1 + 6), (uint64_t)(a1 + 9));
              if (*v35 >= a1[3]) {
                return;
              }
              std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<Phase::StringId *&,Phase::StringId *&>((uint64_t)(a1 + 3), (uint64_t)(a1 + 6));
              if (a1[3] >= *a1) {
                return;
              }
              uint64_t v33 = (uint64_t)a1;
              uint64_t v34 = (uint64_t)(a1 + 3);
              break;
            default:
              JUMPOUT(0);
          }
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<Phase::StringId *&,Phase::StringId *&>(v33, v34);
          return;
        }
        if (v12 <= 575)
        {
          uint64_t v37 = (uint64_t)(a1 + 3);
          BOOL v39 = a1 == v9 || v37 == (void)v9;
          if (a4)
          {
            if (!v39)
            {
              uint64_t v40 = 0;
              __int16 v41 = a1;
              do
              {
                unint64_t v42 = v41[3];
                unint64_t v43 = *v41;
                __int16 v41 = (unint64_t *)v37;
                if (v42 < v43)
                {
                  Phase::StringId::StringId((uint64_t)&v79, v37);
                  uint64_t v44 = v40;
                  while (1)
                  {
                    Phase::StringId::operator=((uint64_t)a1 + v44 + 24, (uint64_t)a1 + v44);
                    if (!v44) {
                      break;
                    }
                    unint64_t v45 = *(unint64_t *)((char *)a1 + v44 - 24);
                    v44 -= 24;
                    if (v79 >= v45)
                    {
                      uint64_t v46 = (uint64_t)a1 + v44 + 24;
                      goto LABEL_85;
                    }
                  }
                  uint64_t v46 = (uint64_t)a1;
LABEL_85:
                  Phase::StringId::operator=(v46, (uint64_t)&v79);
                  if (!v81) {
                    free(v80);
                  }
                }
                uint64_t v37 = (uint64_t)(v41 + 3);
                v40 += 24;
              }
              while (v41 + 3 != a2);
            }
          }
          else if (!v39)
          {
            do
            {
              unint64_t v71 = (unint64_t *)v37;
              if (a1[3] < *a1)
              {
                Phase::StringId::StringId((uint64_t)&v79, v37);
                do
                {
                  Phase::StringId::operator=((uint64_t)(a1 + 3), (uint64_t)a1);
                  unint64_t v72 = *(a1 - 3);
                  a1 -= 3;
                }
                while (v79 < v72);
                Phase::StringId::operator=((uint64_t)(a1 + 3), (uint64_t)&v79);
                if (!v81) {
                  free(v80);
                }
              }
              uint64_t v37 = (uint64_t)(v71 + 3);
              a1 = v71;
            }
            while (v71 + 3 != a2);
          }
          return;
        }
        if (!a3)
        {
          if (a1 != v9)
          {
            int64_t v47 = (unint64_t)(v13 - 2) >> 1;
            int64_t v48 = v47;
            do
            {
              int64_t v49 = v48;
              if (v47 >= v48)
              {
                uint64_t v50 = (2 * v48) | 1;
                __int16 v51 = &a1[3 * v50];
                if (2 * v48 + 2 < v13)
                {
                  unint64_t v54 = *v51;
                  unint64_t v52 = v51[3];
                  BOOL v53 = *v51 >= v52;
                  if (*v51 <= v52) {
                    unint64_t v54 = v51[3];
                  }
                  if (*v51 < v52) {
                    v51 += 3;
                  }
                  if (!v53) {
                    uint64_t v50 = 2 * v49 + 2;
                  }
                }
                else
                {
                  unint64_t v54 = *v51;
                }
                uint64_t v55 = &a1[3 * v49];
                if (v54 >= *v55)
                {
                  Phase::StringId::StringId((uint64_t)&v79, (uint64_t)&a1[3 * v49]);
                  do
                  {
                    uint64_t v56 = (uint64_t)v51;
                    Phase::StringId::operator=((uint64_t)v55, (uint64_t)v51);
                    if (v47 < v50) {
                      break;
                    }
                    __int16 v51 = &a1[3 * ((2 * v50) | 1)];
                    if (2 * v50 + 2 < v13)
                    {
                      unint64_t v59 = *v51;
                      unint64_t v57 = v51[3];
                      BOOL v58 = *v51 >= v57;
                      if (*v51 <= v57) {
                        unint64_t v59 = v51[3];
                      }
                      if (*v51 < v57) {
                        v51 += 3;
                      }
                      uint64_t v50 = v58 ? (2 * v50) | 1 : 2 * v50 + 2;
                    }
                    else
                    {
                      unint64_t v59 = *v51;
                      uint64_t v50 = (2 * v50) | 1;
                    }
                    uint64_t v55 = (unint64_t *)v56;
                  }
                  while (v59 >= v79);
                  Phase::StringId::operator=(v56, (uint64_t)&v79);
                  if (!v81) {
                    free(v80);
                  }
                }
              }
              int64_t v48 = v49 - 1;
            }
            while (v49);
            int64_t v60 = v12 / 0x18uLL;
            do
            {
              Phase::StringId::StringId((uint64_t)v76, (uint64_t)a1);
              uint64_t v61 = 0;
              uint64_t v62 = (uint64_t)a1;
              do
              {
                unint64_t v63 = (char *)(v62 + 24 * v61 + 24);
                uint64_t v64 = 2 * v61;
                uint64_t v61 = (2 * v61) | 1;
                if (v64 + 2 < v60 && *(void *)v63 < *((void *)v63 + 3))
                {
                  v63 += 24;
                  uint64_t v61 = v64 + 2;
                }
                Phase::StringId::operator=(v62, (uint64_t)v63);
                uint64_t v62 = (uint64_t)v63;
              }
              while (v61 <= (uint64_t)((unint64_t)(v60 - 2) >> 1));
              uint64_t v65 = (uint64_t)(a2 - 3);
              BOOL v5 = v63 == (char *)(a2 - 3);
              a2 -= 3;
              if (v5)
              {
                Phase::StringId::operator=((uint64_t)v63, (uint64_t)v76);
              }
              else
              {
                Phase::StringId::operator=((uint64_t)v63, v65);
                Phase::StringId::operator=((uint64_t)a2, (uint64_t)v76);
                uint64_t v66 = v63 - (char *)a1 + 24;
                if (v66 >= 25)
                {
                  unint64_t v67 = (v66 / 0x18uLL - 2) >> 1;
                  unint64_t v68 = &a1[3 * v67];
                  if (*v68 < *(void *)v63)
                  {
                    Phase::StringId::StringId((uint64_t)&v79, (uint64_t)v63);
                    do
                    {
                      uint64_t v69 = (uint64_t)v68;
                      Phase::StringId::operator=((uint64_t)v63, (uint64_t)v68);
                      if (!v67) {
                        break;
                      }
                      unint64_t v67 = (v67 - 1) >> 1;
                      unint64_t v68 = &a1[3 * v67];
                      unint64_t v63 = (char *)v69;
                    }
                    while (*v68 < v79);
                    Phase::StringId::operator=(v69, (uint64_t)&v79);
                    if (!v81) {
                      free(v80);
                    }
                  }
                }
              }
              if (!v78) {
                free(v77);
              }
            }
            while (v60-- > 2);
          }
          return;
        }
        unint64_t v14 = (unint64_t)v13 >> 1;
        uint64_t v15 = &a1[3 * ((unint64_t)v13 >> 1)];
        if ((unint64_t)v12 < 0xC01)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,sValidateProfile(Phase::Controller::ProfileRegistry::Profile const&,Phase::Controller::SpatialModelerRegistry *)::$_0 &,Phase::StringId *>(v15, a1, v10);
          unint64_t v9 = a2;
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,sValidateProfile(Phase::Controller::ProfileRegistry::Profile const&,Phase::Controller::SpatialModelerRegistry *)::$_0 &,Phase::StringId *>(a1, v15, v10);
          uint64_t v16 = 3 * v14;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,sValidateProfile(Phase::Controller::ProfileRegistry::Profile const&,Phase::Controller::SpatialModelerRegistry *)::$_0 &,Phase::StringId *>(a1 + 3, &a1[v16 - 3], a2 - 6);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,sValidateProfile(Phase::Controller::ProfileRegistry::Profile const&,Phase::Controller::SpatialModelerRegistry *)::$_0 &,Phase::StringId *>(a1 + 6, &a1[v16 + 3], a2 - 9);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,sValidateProfile(Phase::Controller::ProfileRegistry::Profile const&,Phase::Controller::SpatialModelerRegistry *)::$_0 &,Phase::StringId *>(&a1[v16 - 3], v15, &a1[v16 + 3]);
          Phase::StringId::StringId((uint64_t)&v79, (uint64_t)a1);
          Phase::StringId::operator=((uint64_t)a1, (uint64_t)v15);
          Phase::StringId::operator=((uint64_t)v15, (uint64_t)&v79);
          unint64_t v9 = a2;
          if (!v81) {
            free(v80);
          }
        }
        --a3;
        if ((a4 & 1) != 0 || *(a1 - 3) < *a1) {
          break;
        }
        Phase::StringId::StringId((uint64_t)&v79, (uint64_t)a1);
        if (v79 >= *v10)
        {
          unint64_t v27 = a1 + 3;
          do
          {
            __int16 v11 = v27;
            if (v27 >= v9) {
              break;
            }
            v27 += 3;
          }
          while (v79 >= *v11);
        }
        else
        {
          __int16 v11 = a1;
          do
          {
            unint64_t v26 = v11[3];
            v11 += 3;
          }
          while (v79 >= v26);
        }
        unint64_t v28 = (unint64_t)v9;
        if (v11 < v9)
        {
          unint64_t v28 = (unint64_t)v9;
          do
          {
            unint64_t v29 = *(void *)(v28 - 24);
            v28 -= 24;
          }
          while (v79 < v29);
        }
        while ((unint64_t)v11 < v28)
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<Phase::StringId *&,Phase::StringId *&>((uint64_t)v11, v28);
          do
          {
            unint64_t v30 = v11[3];
            v11 += 3;
          }
          while (v79 >= v30);
          do
          {
            unint64_t v31 = *(void *)(v28 - 24);
            v28 -= 24;
          }
          while (v79 < v31);
        }
        if (v11 - 3 != a1) {
          Phase::StringId::operator=((uint64_t)a1, (uint64_t)(v11 - 3));
        }
        Phase::StringId::operator=((uint64_t)(v11 - 3), (uint64_t)&v79);
        if (!v81) {
          free(v80);
        }
LABEL_37:
        a4 = 0;
      }
      Phase::StringId::StringId((uint64_t)&v79, (uint64_t)a1);
      uint64_t v17 = 0;
      do
      {
        unint64_t v18 = a1[v17 + 3];
        v17 += 3;
      }
      while (v18 < v79);
      unint64_t v19 = &a1[v17];
      if (v17 == 3)
      {
        unint64_t v9 = a2;
        do
        {
          if (v19 >= v9) {
            break;
          }
          unint64_t v21 = *(v9 - 3);
          v9 -= 3;
        }
        while (v21 >= v79);
      }
      else
      {
        do
        {
          unint64_t v20 = *(v9 - 3);
          v9 -= 3;
        }
        while (v20 >= v79);
      }
      if (v19 >= v9)
      {
        __int16 v11 = &a1[v17];
      }
      else
      {
        unint64_t v22 = (unint64_t)v9;
        __int16 v11 = &a1[v17];
        do
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<Phase::StringId *&,Phase::StringId *&>((uint64_t)v11, v22);
          do
          {
            unint64_t v23 = v11[3];
            v11 += 3;
          }
          while (v23 < v79);
          do
          {
            unint64_t v24 = *(void *)(v22 - 24);
            v22 -= 24;
          }
          while (v24 >= v79);
        }
        while ((unint64_t)v11 < v22);
      }
      if (v11 - 3 != a1) {
        Phase::StringId::operator=((uint64_t)a1, (uint64_t)(v11 - 3));
      }
      Phase::StringId::operator=((uint64_t)(v11 - 3), (uint64_t)&v79);
      if (!v81) {
        free(v80);
      }
      BOOL v4 = v19 >= v9;
      unint64_t v9 = a2;
      if (!v4)
      {
LABEL_36:
        std::__introsort<std::_ClassicAlgPolicy,sValidateProfile(Phase::Controller::ProfileRegistry::Profile const&,Phase::Controller::SpatialModelerRegistry *)::$_0 &,Phase::StringId *,false>(a1, v11 - 3, a3, a4 & 1);
        goto LABEL_37;
      }
      char v25 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,sValidateProfile(Phase::Controller::ProfileRegistry::Profile const&,Phase::Controller::SpatialModelerRegistry *)::$_0 &,Phase::StringId *>(a1, v11 - 3);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,sValidateProfile(Phase::Controller::ProfileRegistry::Profile const&,Phase::Controller::SpatialModelerRegistry *)::$_0 &,Phase::StringId *>(v11, a2))break; {
      if ((v25 & 1) == 0)
      }
        goto LABEL_36;
    }
    a2 = v11 - 3;
    if ((v25 & 1) == 0) {
      continue;
    }
    break;
  }
}

void sub_222031BCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *a15, char a16)
{
  if (!a16) {
    free(a15);
  }
  _Unwind_Resume(exception_object);
}

void std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<Phase::StringId *&,Phase::StringId *&>(uint64_t a1, uint64_t a2)
{
  Phase::StringId::StringId((uint64_t)v4, a1);
  Phase::StringId::operator=(a1, a2);
  Phase::StringId::operator=(a2, (uint64_t)v4);
  if (!v6) {
    free(v5);
  }
}

void sub_222031CBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, char a12)
{
  if (!a12) {
    free(a11);
  }
  _Unwind_Resume(exception_object);
}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,sValidateProfile(Phase::Controller::ProfileRegistry::Profile const&,Phase::Controller::SpatialModelerRegistry *)::$_0 &,Phase::StringId *>(unint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  BOOL v5 = a1;
  unint64_t v6 = *a2;
  unint64_t v7 = *a3;
  if (*a2 >= *a1)
  {
    if (v7 >= v6) {
      return;
    }
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<Phase::StringId *&,Phase::StringId *&>((uint64_t)a2, (uint64_t)a3);
    if (*a2 >= *v5) {
      return;
    }
    a1 = v5;
    uint64_t v8 = (uint64_t)a2;
  }
  else
  {
    if (v7 >= v6)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<Phase::StringId *&,Phase::StringId *&>((uint64_t)a1, (uint64_t)a2);
      if (*a3 >= *a2) {
        return;
      }
      a1 = a2;
    }
    uint64_t v8 = (uint64_t)a3;
  }

  std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<Phase::StringId *&,Phase::StringId *&>((uint64_t)a1, v8);
}

uint64_t std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,sValidateProfile(Phase::Controller::ProfileRegistry::Profile const&,Phase::Controller::SpatialModelerRegistry *)::$_0 &,Phase::StringId *>(unint64_t *a1, unint64_t *a2)
{
  BOOL v4 = 1;
  switch(0xAAAAAAAAAAAAAAABLL * (a2 - a1))
  {
    case 0uLL:
    case 1uLL:
      return v4;
    case 2uLL:
      if (*(a2 - 3) < *a1) {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<Phase::StringId *&,Phase::StringId *&>((uint64_t)a1, (uint64_t)(a2 - 3));
      }
      return v4;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,sValidateProfile(Phase::Controller::ProfileRegistry::Profile const&,Phase::Controller::SpatialModelerRegistry *)::$_0 &,Phase::StringId *>(a1, a1 + 3, a2 - 3);
      return v4;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,sValidateProfile(Phase::Controller::ProfileRegistry::Profile const&,Phase::Controller::SpatialModelerRegistry *)::$_0 &,Phase::StringId *>(a1, a1 + 3, a1 + 6, a2 - 3);
      return v4;
    case 5uLL:
      uint64_t v12 = a1 + 3;
      uint64_t v13 = a1 + 6;
      unint64_t v14 = a1 + 9;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,sValidateProfile(Phase::Controller::ProfileRegistry::Profile const&,Phase::Controller::SpatialModelerRegistry *)::$_0 &,Phase::StringId *>(a1, a1 + 3, a1 + 6, a1 + 9);
      unint64_t v16 = *(a2 - 3);
      uint64_t v15 = (uint64_t)(a2 - 3);
      if (v16 < a1[9])
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<Phase::StringId *&,Phase::StringId *&>((uint64_t)(a1 + 9), v15);
        if (*v14 < *v13)
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<Phase::StringId *&,Phase::StringId *&>((uint64_t)(a1 + 6), (uint64_t)(a1 + 9));
          if (*v13 < *v12)
          {
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<Phase::StringId *&,Phase::StringId *&>((uint64_t)(a1 + 3), (uint64_t)(a1 + 6));
            if (a1[3] < *a1) {
              std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<Phase::StringId *&,Phase::StringId *&>((uint64_t)a1, (uint64_t)(a1 + 3));
            }
          }
        }
      }
      return 1;
    default:
      BOOL v5 = a1 + 6;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,sValidateProfile(Phase::Controller::ProfileRegistry::Profile const&,Phase::Controller::SpatialModelerRegistry *)::$_0 &,Phase::StringId *>(a1, a1 + 3, a1 + 6);
      unint64_t v6 = a1 + 9;
      if (a1 + 9 == a2) {
        return 1;
      }
      uint64_t v7 = 0;
      int v8 = 0;
      break;
  }
  while (*v6 >= *v5)
  {
LABEL_15:
    BOOL v5 = v6;
    v7 += 24;
    v6 += 3;
    if (v6 == a2) {
      return 1;
    }
  }
  Phase::StringId::StringId((uint64_t)&v18, (uint64_t)v6);
  uint64_t v9 = v7;
  while (1)
  {
    Phase::StringId::operator=((uint64_t)a1 + v9 + 72, (uint64_t)a1 + v9 + 48);
    if (v9 == -48) {
      break;
    }
    unint64_t v10 = *(unint64_t *)((char *)a1 + v9 + 24);
    v9 -= 24;
    if (v18 >= v10)
    {
      uint64_t v11 = (uint64_t)a1 + v9 + 72;
      goto LABEL_12;
    }
  }
  uint64_t v11 = (uint64_t)a1;
LABEL_12:
  Phase::StringId::operator=(v11, (uint64_t)&v18);
  if (++v8 != 8)
  {
    if (!v20) {
      free(v19);
    }
    goto LABEL_15;
  }
  BOOL v4 = v6 + 3 == a2;
  if (!v20) {
    free(v19);
  }
  return v4;
}

void sub_222031FE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, char a12)
{
  if (!a12) {
    free(a11);
  }
  _Unwind_Resume(exception_object);
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,sValidateProfile(Phase::Controller::ProfileRegistry::Profile const&,Phase::Controller::SpatialModelerRegistry *)::$_0 &,Phase::StringId *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,sValidateProfile(Phase::Controller::ProfileRegistry::Profile const&,Phase::Controller::SpatialModelerRegistry *)::$_0 &,Phase::StringId *>(a1, a2, a3);
  if (*a4 < *a3)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<Phase::StringId *&,Phase::StringId *&>((uint64_t)a3, (uint64_t)a4);
    if (*a3 < *a2)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<Phase::StringId *&,Phase::StringId *&>((uint64_t)a2, (uint64_t)a3);
      if (*a2 < *a1)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<Phase::StringId *&,Phase::StringId *&>((uint64_t)a1, (uint64_t)a2);
      }
    }
  }
}

void std::vector<Phase::StringId>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = (void **)**a1;
  if (v2)
  {
    BOOL v4 = (void **)v1[1];
    BOOL v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (!*((unsigned char *)v4 - 8)) {
          free(*(v4 - 2));
        }
        *(v4 - 3) = 0;
        *(v4 - 2) = &str_33;
        *((unsigned char *)v4 - 8) = 1;
        v4 -= 3;
      }
      while (v4 != v2);
      BOOL v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void Phase::Controller::ProfileRegistryException::DuplicateEntry::~DuplicateEntry(std::logic_error *this)
{
  std::logic_error::~logic_error(this);

  JUMPOUT(0x223C938A0);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>,void *>>>::operator()[abi:ne180100](char a1, uint64_t a2)
{
  if (a1)
  {
    std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>>>::~__hash_table(a2 + 88);
    if (!*(unsigned char *)(a2 + 56)) {
      free(*(void **)(a2 + 48));
    }
    *(void *)(a2 + 40) = 0;
    *(void *)(a2 + 48) = &str_33;
    *(unsigned char *)(a2 + 56) = 1;
    if (!*(unsigned char *)(a2 + 32)) {
      free(*(void **)(a2 + 24));
    }
  }
  else if (!a2)
  {
    return;
  }

  operator delete((void *)a2);
}

void *std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>>>::find<Phase::StringId>(void *a1, unint64_t *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  unint64_t v5 = v4.u32[0];
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v6 = *a2;
    if (v3 >= *(void *)&v2) {
      unint64_t v6 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v6 = (*(void *)&v2 - 1) & v3;
  }
  uint64_t v7 = *(void **)(*a1 + 8 * v6);
  if (!v7) {
    return 0;
  }
  int v8 = (void *)*v7;
  if (*v7)
  {
    uint64_t v9 = (const char *)a2[1];
    do
    {
      unint64_t v10 = v8[1];
      if (v3 == v10)
      {
        if (v8[2] == v3)
        {
          uint64_t v11 = (const char *)v8[3];
          if (v11 == v9 || !strcmp(v11, v9)) {
            return v8;
          }
        }
      }
      else
      {
        if (v5 > 1)
        {
          if (v10 >= *(void *)&v2) {
            v10 %= *(void *)&v2;
          }
        }
        else
        {
          v10 &= *(void *)&v2 - 1;
        }
        if (v10 != v6) {
          return 0;
        }
      }
      int v8 = (void *)*v8;
    }
    while (v8);
  }
  return v8;
}

void Phase::DspLayer::PullStreamSampler::GetNewRegistryEntry(Phase::DspLayer::PullStreamSampler *this)
{
  uint64_t v2 = *MEMORY[0x263EF8340];
  uint64_t v1 = (char *)malloc_type_malloc(0xA8uLL, 0x1050040B063AAFAuLL);
  *(void *)uint64_t v1 = "Gain";
  *((void *)v1 + 1) = 0x500000000;
  *(void *)(v1 + 20) = 0x100000000;
  *((_DWORD *)v1 + 7) = 3;
  *((_OWORD *)v1 + 2) = xmmword_2220E7D50;
  *((void *)v1 + 6) = 0x3FF0000000000000;
  *((void *)v1 + 7) = "Gain Interpolation Duration";
  *((void *)v1 + 8) = 0x500000001;
  *(void *)(v1 + 76) = 0x100000000;
  *((_DWORD *)v1 + 21) = 3;
  *(_OWORD *)(v1 + 88) = xmmword_2220E7D60;
  *((void *)v1 + 13) = 0x3F91111120000000;
  *((void *)v1 + 14) = "Gain Damping Constant";
  *((void *)v1 + 15) = 0x500000002;
  *(void *)(v1 + 132) = 0x100000000;
  *((_DWORD *)v1 + 35) = 3;
  *((_OWORD *)v1 + 9) = xmmword_2220E7D70;
  *((void *)v1 + 20) = 0x3FF0000000000000;
  operator new();
}

void sub_222032594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Phase::DspLayer::PullStreamSampler::~PullStreamSampler(Phase::DspLayer::PullStreamSampler *this)
{
  Phase::DspLayer::VoicePool::~VoicePool(this);

  JUMPOUT(0x223C938A0);
}

void anonymous namespace'::PullStreamSamplerSlice::~PullStreamSamplerSlice(_anonymous_namespace_::PullStreamSamplerSlice *this)
{
}

double anonymous namespace'::PullStreamSamplerSlice::Reset(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v12 = *MEMORY[0x263EF8340];
  __asm { FMOV            V1.4S, #1.0 }
  *(_OWORD *)(a1 + 16) = _Q1;
  *(int32x4_t *)(a1 + 32) = vdupq_n_s32(0x3C888889u);
  *(_OWORD *)(a1 + 48) = _Q1;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  long long v10 = _Q1;
  long long v11 = xmmword_2220A4FB0;
  do
  {
    *(_DWORD *)(a1 + 304 + 4 * *(int *)((char *)&v10 + v2 + 16)) = *(_DWORD *)((char *)&v10 + v2);
    v2 += 4;
  }
  while (v2 != 16);
  uint64_t v8 = 0;
  long long v11 = xmmword_2220A4FB0;
  long long v10 = 0uLL;
  do
  {
    *(_DWORD *)(a1 + 320 + 4 * *(int *)((char *)&v10 + v8 + 16)) = *(_DWORD *)((char *)&v10 + v8);
    v8 += 4;
  }
  while (v8 != 16);
  (*(void (**)(uint64_t))(*(void *)a1 + 48))(a1);
  double result = 0.0;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  return result;
}

uint64_t anonymous namespace'::PullStreamSamplerSlice::Reset(void *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7 = (_DWORD *)a1 + a3;
  v7[4] = 1065353216;
  v7[8] = 1015580809;
  v7[12] = 1065353216;
  v7[16] = 0;
  uint64_t v8 = *a1;
  a1[a3 + 10] = 0;
  *((_DWORD *)a1 + a3 + 28) = 0;
  v7[72] = 0;
  v7[76] = 1065353216;
  v7[80] = 0;
  uint64_t result = (*(uint64_t (**)(void))(v8 + 56))();
  a1[a3 + 42] = a4;
  return result;
}

uint64_t anonymous namespace'::PullStreamSamplerSlice::GetParameter(_anonymous_namespace_::PullStreamSamplerSlice *this, unsigned int a2)
{
  if (a2 > 2) {
    return 9;
  }
  else {
    return 0;
  }
}

uint64_t anonymous namespace'::PullStreamSamplerSlice::SetParameter(_anonymous_namespace_::PullStreamSamplerSlice *this, int a2, int a3, double a4)
{
  if (a2 == 2)
  {
    uint64_t result = 0;
    float v7 = a4;
    *((float *)this + a3 + 12) = v7;
  }
  else if (a2 == 1)
  {
    uint64_t result = 0;
    float v8 = a4;
    *((float *)this + a3 + 8) = v8;
  }
  else if (a2)
  {
    return 9;
  }
  else
  {
    uint64_t result = 0;
    float v6 = a4;
    *((float *)this + a3 + 4) = v6;
  }
  return result;
}

int32x4_t anonymous namespace'::PullStreamSamplerSlice::UpdateParameters(uint64_t a1)
{
  long long v1 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a1 + 272) = v1;
  long long v2 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a1 + 80);
  int32x4_t result = *(int32x4_t *)(a1 + 272);
  v4.i64[0] = -1;
  v4.i64[1] = -1;
  long long v5 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 128) = v2;
  *(int32x4_t *)(a1 + 144) = result;
  *(int32x4_t *)(a1 + 160) = vaddq_s32(result, v4);
  *(_OWORD *)(a1 + 176) = v5;
  return result;
}

uint64_t anonymous namespace'::PullStreamSamplerSlice::UpdateParameters(uint64_t result, uint64_t a2, int a3)
{
  *(void *)(result + 240 + 8 * a3) = *(void *)(result + 80 + 8 * a3);
  int v3 = *(_DWORD *)(result + 80 + 4 * a3 + 32);
  *(_DWORD *)(result + 240 + 4 * a3 + 32) = v3;
  uint64_t v4 = result + 4 * a3;
  int v5 = *(_DWORD *)(v4 + 64);
  int v6 = *(_DWORD *)(v4 + 16);
  float v7 = *(float *)(v4 + 32);
  if (v7 >= 0.001)
  {
    float v9 = 6.2832 / v7;
    float v10 = v9 * v9;
    long long v11 = (float *)(result + 4 * a3);
    float v12 = v9 * (float)(v11[12] + v11[12]);
    v11[52] = v10;
    v11[56] = v12;
  }
  else
  {
    uint64_t v8 = result + 4 * a3;
    *(_DWORD *)(v8 + 320) = 0;
    *(_DWORD *)(v8 + 304) = v6;
  }
  uint64_t v13 = (_DWORD *)(result + 4 * a3);
  v13[32] = v5;
  v13[36] = v3;
  v13[40] = v3 - 1;
  v13[44] = v6;
  return result;
}

int32x4_t anonymous namespace'::PullStreamSamplerSlice::Run(_anonymous_namespace_::PullStreamSamplerSlice *this, Phase::DspLayer::VoiceEngine *a2, Phase::DspLayer::VoicePool *a3, int a4)
{
  v30[1] = *MEMORY[0x263EF8340];
  int32x4_t v7 = *((int32x4_t *)this + 18);
  int8x16_t v8 = vandq_s8((int8x16_t)vceqzq_s32(v7), (int8x16_t)xmmword_2220E7D80);
  int32x4_t v9 = (int32x4_t)vorrq_s8(vextq_s8(v8, v8, 8uLL), v8);
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s32(v9, 3), (int8x16_t)v9).u32[0] & a4) != 0)
  {
    MEMORY[0x270FA5388](this);
    v30[0] = v27;
    v27[0] = 0;
    v27[1] = 0;
    v29[0] = 1;
    v29[2] = 2;
    int32x4_t v28 = v10;
    Phase::DspLayer::VoicePool::ExternalCallbackWithMessage(v11, 0, (uint64_t *)this + 42, v12, v29, v30);
    int32x4_t v7 = v28;
  }
  int32x4_t v13 = *((int32x4_t *)this + 9);
  float32x4_t v14 = 0uLL;
  HIDWORD(v16) = a4 - 1;
  LODWORD(v16) = a4 - 1;
  int v15 = v16 >> 1;
  int32x4_t v17 = vminq_s32(vmaxq_s32(v7, (int32x4_t)0), *((int32x4_t *)this + 10));
  switch(v15)
  {
    case 0:
      v14.i32[0] = *(_DWORD *)(*((void *)this + 30) + 4 * v17.i32[0]);
      break;
    case 1:
      v14.i32[0] = *(_DWORD *)(*((void *)this + 30) + 4 * v17.i32[0]);
      v14.i32[1] = *(_DWORD *)(*((void *)this + 31) + 4 * v17.i32[1]);
      break;
    case 3:
      v14.i32[0] = *(_DWORD *)(*((void *)this + 30) + 4 * v17.i32[0]);
      v14.i32[1] = *(_DWORD *)(*((void *)this + 31) + 4 * v17.i32[1]);
      v14.i32[2] = *(_DWORD *)(*((void *)this + 32) + 4 * v17.i32[2]);
      break;
    case 7:
      v14.i32[0] = *(_DWORD *)(*((void *)this + 30) + 4 * v17.i32[0]);
      v14.i32[1] = *(_DWORD *)(*((void *)this + 31) + 4 * v17.i32[1]);
      v14.i32[2] = *(_DWORD *)(*((void *)this + 32) + 4 * v17.i32[2]);
      v14.i32[3] = *(_DWORD *)(*((void *)this + 33) + 4 * v17.i32[3]);
      break;
    default:
      break;
  }
  float v18 = *((float *)a2 + 2);
  float32x4_t v19 = *((float32x4_t *)this + 19);
  float32x4_t v20 = vmlaq_n_f32(*((float32x4_t *)this + 20), vmlaq_f32(vmulq_f32(*((float32x4_t *)this + 20), vnegq_f32(*((float32x4_t *)this + 14))), vsubq_f32(*((float32x4_t *)this + 11), v19), *((float32x4_t *)this + 13)), v18);
  float32x4_t v21 = vmlaq_n_f32(v19, v20, v18);
  *((float32x4_t *)this + 19) = v21;
  *((float32x4_t *)this + 20) = v20;
  float32x4_t v22 = vmulq_f32(v14, v21);
  int8x16_t v23 = vandq_s8((int8x16_t)v22, vorrq_s8((int8x16_t)vcltzq_f32(v22), (int8x16_t)vcgezq_f32(v22)));
  switch(v15)
  {
    case 0:
      goto LABEL_12;
    case 1:
      goto LABEL_11;
    case 3:
      goto LABEL_10;
    case 7:
      *(_DWORD *)(*((void *)a2 + 7) + 4 * *((int *)this + 35)) = v23.i32[3];
LABEL_10:
      *(_DWORD *)(*((void *)a2 + 7) + 4 * *((int *)this + 34)) = v23.i32[2];
LABEL_11:
      *(_DWORD *)(*((void *)a2 + 7) + 4 * *((int *)this + 33)) = v23.i32[1];
LABEL_12:
      *(_DWORD *)(*((void *)a2 + 7) + 4 * *((int *)this + 32)) = v23.i32[0];
      break;
    default:
      break;
  }
  v24.i64[0] = 0x100000001;
  v24.i64[1] = 0x100000001;
  int32x4_t v25 = vaddq_s32(v7, v24);
  int32x4_t result = vsubq_s32(v25, (int32x4_t)vbicq_s8((int8x16_t)v13, (int8x16_t)vcgtq_s32(v13, v25)));
  *((int32x4_t *)this + 18) = result;
  return result;
}

uint64_t anonymous namespace'::PullStreamSamplerSlice::OnPlay(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_DWORD *)(result + 4 * (int)a4 + 288) = *(_DWORD *)(a2 + 28);
  if (*(int *)(a2 + 28) >= 1)
  {
    uint64_t v6 = result;
    (*(void (**)(uint64_t, void, uint64_t, void, void))(*(void *)result + 192))(result, 0, a4, *(void *)(a2 + 74944), *(unsigned int *)(a2 + 24));
    int32x4_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 56);
    return v7(v6, a2, a4);
  }
  return result;
}

uint64_t anonymous namespace'::PullStreamSamplerSlice::OnResume(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 72))();
}

float anonymous namespace'::PullStreamSamplerSlice::CopyVoiceState(_anonymous_namespace_::PullStreamSamplerSlice *this, Phase::DspLayer::VoicePoolSlice *a2, unsigned int a3, unsigned int a4)
{
  uint64_t v4 = (_DWORD *)((char *)a2 + 4 * (int)a3);
  int v5 = (_DWORD *)((char *)this + 4 * (int)a4);
  v5[4] = v4[4];
  v5[8] = v4[8];
  v5[12] = v4[12];
  v5[16] = v4[16];
  *((void *)this + (int)a4 + 10) = *((void *)a2 + (int)a3 + 10);
  *((_DWORD *)this + (int)a4 + 28) = *((_DWORD *)a2 + (int)a3 + 28);
  v5[32] = v4[32];
  v5[36] = v4[36];
  v5[40] = v4[40];
  v5[44] = v4[44];
  v5[52] = v4[52];
  int v6 = v4[56];
  *((void *)this + (int)a4 + 30) = *((void *)a2 + (int)a3 + 30);
  v5[56] = v6;
  *((_DWORD *)this + (int)a4 + 68) = *((_DWORD *)a2 + (int)a3 + 68);
  if (a3 >= 4) {
    __assert_rtn("Copy", "DelaylineLinear.hpp", 507, "fromLane >= 0 && fromLane < PHASE_SIMD_WIDTH");
  }
  if (a4 >= 4) {
    __assert_rtn("Copy", "DelaylineLinear.hpp", 508, "toLane >= 0 && toLane < PHASE_SIMD_WIDTH");
  }
  int32x4_t v7 = (char *)a2 + 4 * a3;
  int8x16_t v8 = (char *)this + 4 * a4;
  *((_DWORD *)v8 + 72) = *((_DWORD *)v7 + 72);
  *((_DWORD *)v8 + 76) = *((_DWORD *)v7 + 76);
  float result = *((float *)v7 + 80);
  *((float *)v8 + 80) = result;
  *((void *)this + (int)a4 + 42) = *((void *)a2 + (int)a3 + 42);
  return result;
}

unint64_t anonymous namespace'::PullStreamSamplerSlice::GetOutput(_anonymous_namespace_::PullStreamSamplerSlice *this, int a2, int a3)
{
  if (a2) {
    return 0xFFFFFFFF00000008;
  }
  else {
    return (unint64_t)*((unsigned int *)this + a3 + 16) << 32;
  }
}

uint64_t anonymous namespace'::PullStreamSamplerSlice::SetOutput(_anonymous_namespace_::PullStreamSamplerSlice *this, int a2, int a3, int a4)
{
  if (a2) {
    return 8;
  }
  uint64_t result = 0;
  *((_DWORD *)this + a3 + 16) = a4;
  return result;
}

uint64_t anonymous namespace'::PullStreamSamplerSlice::GetBuffer@<X0>(uint64_t this@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (a2)
  {
    uint64_t v4 = 0;
    int v5 = -1;
    int v6 = 10;
  }
  else
  {
    int v6 = 0;
    uint64_t v4 = *(void *)(this + 80 + 8 * a3);
    int v5 = *(_DWORD *)(this + 80 + 4 * a3 + 32);
  }
  *(_DWORD *)a4 = v6;
  *(void *)(a4 + 8) = v4;
  *(_DWORD *)(a4 + 16) = v5;
  return this;
}

uint64_t anonymous namespace'::PullStreamSamplerSlice::SetBuffer(_anonymous_namespace_::PullStreamSamplerSlice *this, int a2, int a3, void *a4, int a5)
{
  if (a2) {
    return 10;
  }
  uint64_t result = 0;
  this = (_anonymous_namespace_::PullStreamSamplerSlice *)((char *)this + 80);
  *((void *)this + a3) = a4;
  *((_DWORD *)this + a3 + 8) = a5;
  return result;
}

void std::__function::__func<Phase::DspLayer::PullStreamSampler::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::PullStreamSampler::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::~__func()
{
}

void *std::__function::__func<Phase::DspLayer::PullStreamSampler::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::PullStreamSampler::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26D479F80;
  return result;
}

void std::__function::__func<Phase::DspLayer::PullStreamSampler::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::PullStreamSampler::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D479F80;
}

void std::__function::__func<Phase::DspLayer::PullStreamSampler::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::PullStreamSampler::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::operator()()
{
}

void sub_222033044(_Unwind_Exception *a1)
{
  MEMORY[0x223C938A0](v1, 0x10F1C408EBD29CELL);
  _Unwind_Resume(a1);
}

void Phase::DspLayer::PushStreamSampler::GetNewRegistryEntry(Phase::DspLayer::PushStreamSampler *this)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v1 = (char *)malloc_type_malloc(0x1F8uLL, 0x1050040B063AAFAuLL);
  *(void *)uint64_t v1 = "Rate";
  *((void *)v1 + 1) = 0x500000000;
  *(void *)(v1 + 20) = 0x200000000;
  *((_DWORD *)v1 + 7) = 3;
  *((_OWORD *)v1 + 2) = xmmword_2220A5210;
  *((void *)v1 + 6) = 0x3FF0000000000000;
  *((void *)v1 + 7) = "Gain";
  *((void *)v1 + 8) = 0x500000001;
  *(void *)(v1 + 76) = 0x100000000;
  *((_DWORD *)v1 + 21) = 3;
  *(_OWORD *)(v1 + 88) = xmmword_2220E7D50;
  *((void *)v1 + 13) = 0x3FF0000000000000;
  *((void *)v1 + 14) = "ReferenceHF";
  *((void *)v1 + 15) = 0x500000002;
  *(void *)(v1 + 132) = 0x100000000;
  *((_DWORD *)v1 + 35) = 3;
  *((_OWORD *)v1 + 9) = xmmword_2220E7DA0;
  *((void *)v1 + 20) = 0x40B3880000000000;
  *((void *)v1 + 21) = "GainHF";
  *((void *)v1 + 22) = 0x500000003;
  *(void *)(v1 + 188) = 0x100000000;
  *((_DWORD *)v1 + 49) = 3;
  *(_OWORD *)(v1 + 200) = xmmword_2220A4F90;
  *((void *)v1 + 27) = 0x3FF0000000000000;
  *((void *)v1 + 28) = "ReferenceLF";
  *((void *)v1 + 29) = 0x500000004;
  *(void *)(v1 + 244) = 0x100000000;
  *((_DWORD *)v1 + 63) = 3;
  *((_OWORD *)v1 + 16) = xmmword_2220E7DA0;
  *((void *)v1 + 34) = 0x407F400000000000;
  *((void *)v1 + 35) = "GainLF";
  *((void *)v1 + 36) = 0x500000005;
  *((_DWORD *)v1 + 75) = 0;
  *((void *)v1 + 38) = 0x300000001;
  *((void *)v1 + 39) = 0;
  __asm { FMOV            V1.2D, #1.0 }
  *((_OWORD *)v1 + 20) = _Q1;
  *((void *)v1 + 42) = "SeekPointInSeconds";
  *((void *)v1 + 43) = 0x500000006;
  *((_DWORD *)v1 + 89) = 0;
  *((void *)v1 + 45) = 0x300000002;
  *((_OWORD *)v1 + 23) = xmmword_2220E7DB0;
  *((void *)v1 + 48) = 0;
  *((void *)v1 + 49) = "Gain Interpolation Duration";
  *((void *)v1 + 50) = 0x500000007;
  *((_DWORD *)v1 + 103) = 0;
  *((void *)v1 + 52) = 0x300000001;
  *((void *)v1 + 53) = 0;
  *((_OWORD *)v1 + 27) = xmmword_2220E7DC0;
  *((void *)v1 + 56) = "Gain Damping Constant";
  *((void *)v1 + 57) = 0x500000008;
  *((_DWORD *)v1 + 117) = 0;
  *((void *)v1 + 59) = 0x300000001;
  *((_OWORD *)v1 + 30) = xmmword_2220E7D70;
  *((void *)v1 + 62) = 0x3FF0000000000000;
  operator new();
}

void sub_22203336C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Phase::DspLayer::PushStreamSampler::~PushStreamSampler(Phase::DspLayer::PushStreamSampler *this)
{
  Phase::DspLayer::VoicePool::~VoicePool(this);

  JUMPOUT(0x223C938A0);
}

void PushStreamSamplerSlice::Slice::~Slice(PushStreamSamplerSlice::Slice *this)
{
}

double PushStreamSamplerSlice::Slice::Reset(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v16 = *MEMORY[0x263EF8340];
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(a1 + 16) = _Q0;
  *(_OWORD *)(a1 + 32) = _Q0;
  __asm { FMOV            V1.4S, #1.0 }
  *(_OWORD *)(a1 + 48) = _Q1;
  *(int32x4_t *)(a1 + 64) = vdupq_n_s32(0x459C4000u);
  *(_OWORD *)(a1 + 80) = _Q1;
  *(int32x4_t *)(a1 + 96) = vdupq_n_s32(0x43FA0000u);
  *(_OWORD *)(a1 + 112) = _Q1;
  *(int32x4_t *)(a1 + 128) = vdupq_n_s32(0x3C888889u);
  *(_OWORD *)(a1 + 144) = _Q1;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  __asm { FMOV            V1.2D, #-1.0 }
  long long v13 = _Q1;
  long long v14 = _Q1;
  long long v15 = xmmword_2220A4FB0;
  do
  {
    *(void *)(a1 + 576 + 8 * *((int *)&v15 + v2)) = *((void *)&v13 + v2);
    ++v2;
  }
  while (v2 != 4);
  uint64_t v10 = 0;
  long long v13 = *(_OWORD *)(a1 + 48);
  long long v14 = xmmword_2220A4FB0;
  do
  {
    *(_DWORD *)(a1 + 800 + 4 * *(int *)((char *)&v13 + v10 + 16)) = *(_DWORD *)((char *)&v13 + v10);
    v10 += 4;
  }
  while (v10 != 16);
  uint64_t v11 = 0;
  long long v14 = xmmword_2220A4FB0;
  long long v13 = 0uLL;
  do
  {
    *(_DWORD *)(a1 + 816 + 4 * *(int *)((char *)&v13 + v11 + 16)) = *(_DWORD *)((char *)&v13 + v11);
    v11 += 4;
  }
  while (v11 != 16);
  (*(void (**)(uint64_t))(*(void *)a1 + 48))(a1);
  double result = 0.0;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  return result;
}

uint64_t PushStreamSamplerSlice::Slice::Reset(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  int v5 = (void *)(a1 + 8 * a3);
  v5[2] = 0x3FF0000000000000;
  int v6 = (_DWORD *)(a1 + 4 * a3);
  v6[12] = 1065353216;
  v6[16] = 1167867904;
  v6[20] = 1065353216;
  v6[24] = 1140457472;
  v6[28] = 1065353216;
  v6[32] = 1015580809;
  v6[36] = 1065353216;
  *(void *)(a1 + 176 + 8 * a3) = 0;
  v6[40] = 0;
  *(_DWORD *)(a1 + 176 + 4 * a3 + 32) = 0;
  v6[152] = 0;
  v6[156] = 0;
  v6[160] = 0;
  *(_DWORD *)(a1 + 672 + 4 * a3) = 0;
  uint64_t v7 = 4 * a3 + 16;
  *(_DWORD *)(a1 + 672 + v7) = 0;
  v6[164] = 0;
  *(_DWORD *)(a1 + 704 + 4 * a3) = 0;
  *(_DWORD *)(a1 + 704 + v7) = 0;
  *(_DWORD *)(a1 + 736 + 4 * a3) = 0;
  *(_DWORD *)(a1 + 736 + v7) = 0;
  *(_DWORD *)(a1 + 768 + 4 * a3) = 0;
  *(_DWORD *)(a1 + 768 + v7) = 0;
  v5[72] = 0xBFF0000000000000;
  v6[200] = 1065353216;
  v6[204] = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  v5[104] = a4;
  return result;
}

double PushStreamSamplerSlice::Slice::GetParameter(PushStreamSamplerSlice::Slice *this, int a2, int a3)
{
  switch(a2)
  {
    case 0:
      return *((double *)this + a3 + 2);
    case 1:
      float v4 = *((float *)this + a3 + 12);
      goto LABEL_12;
    case 2:
      float v4 = *((float *)this + a3 + 16);
      goto LABEL_12;
    case 3:
      float v4 = *((float *)this + a3 + 20);
      goto LABEL_12;
    case 4:
      float v4 = *((float *)this + a3 + 24);
      goto LABEL_12;
    case 5:
      float v4 = *((float *)this + a3 + 28);
      goto LABEL_12;
    case 6:
      return *((double *)this + a3 + 72) / **((double **)this + 108);
    case 7:
      float v4 = *((float *)this + a3 + 32);
      goto LABEL_12;
    case 8:
      float v4 = *((float *)this + a3 + 36);
LABEL_12:
      double result = v4;
      break;
    default:
      double result = 0.0;
      break;
  }
  return result;
}

uint64_t PushStreamSamplerSlice::Slice::SetParameter(PushStreamSamplerSlice::Slice *this, int a2, int a3, double a4)
{
  switch(a2)
  {
    case 0:
      uint64_t result = 0;
      *((double *)this + a3 + 2) = a4;
      break;
    case 1:
      uint64_t result = 0;
      float v6 = a4;
      *((float *)this + a3 + 12) = v6;
      break;
    case 2:
      uint64_t result = 0;
      float v7 = a4;
      *((float *)this + a3 + 16) = v7;
      break;
    case 3:
      uint64_t result = 0;
      float v8 = a4;
      *((float *)this + a3 + 20) = v8;
      break;
    case 4:
      uint64_t result = 0;
      float v9 = a4;
      *((float *)this + a3 + 24) = v9;
      break;
    case 5:
      uint64_t result = 0;
      float v10 = a4;
      *((float *)this + a3 + 28) = v10;
      break;
    case 6:
      double v12 = **((double **)this + 108) * a4;
      if (v12 >= 0.0 && v12 <= (double)(*((_DWORD *)this + a3 + 52) - 1))
      {
        uint64_t result = 0;
        *((double *)this + a3 + 72) = v12;
      }
      else
      {
        uint64_t result = 11;
      }
      break;
    case 7:
      uint64_t result = 0;
      float v11 = a4;
      *((float *)this + a3 + 32) = v11;
      break;
    case 8:
      uint64_t result = 0;
      float v13 = a4;
      *((float *)this + a3 + 36) = v13;
      break;
    default:
      uint64_t result = 9;
      break;
  }
  return result;
}

float32x4_t PushStreamSamplerSlice::Slice::UpdateParameters(uint64_t a1, uint64_t a2)
{
  int32x4_t v4 = *(int32x4_t *)(a1 + 208);
  *(_OWORD *)(a1 + 544) = *(_OWORD *)(a1 + 192);
  *(int32x4_t *)(a1 + 560) = v4;
  *(_OWORD *)(a1 + 528) = *(_OWORD *)(a1 + 176);
  v4.i64[0] = -1;
  v4.i64[1] = -1;
  int32x4_t v52 = *(int32x4_t *)(a1 + 560);
  int32x4_t v53 = vaddq_s32(v52, v4);
  float32x4_t v40 = (float32x4_t)vdupq_n_s32(0x3727C5ACu);
  simd_float4 v58 = _simd_log10_f4((simd_float4)vmaxnmq_f32(*(float32x4_t *)(a1 + 80), v40));
  v5.i64[0] = 0x3F0000003F000000;
  v5.i64[1] = 0x3F0000003F000000;
  simd_float4 v46 = _simd_exp10_f4((simd_float4)vmulq_f32((float32x4_t)v58, v5));
  __asm { FMOV            V1.4S, #1.0 }
  float32x4_t v61 = _Q1;
  float32x4_t v54 = vaddq_f32((float32x4_t)v46, _Q1);
  __asm { FMOV            V1.4S, #-1.0 }
  float32x4_t v38 = _Q1;
  float32x4_t v56 = vaddq_f32((float32x4_t)v46, _Q1);
  float32x4_t v36 = (float32x4_t)vdupq_n_s32(0x40C90FDBu);
  simd_float4 x = (simd_float4)vmulq_f32(vmulq_n_f32(*(float32x4_t *)(a1 + 64), *(float *)(a2 + 8)), v36);
  simd_float4 v48 = _simd_cos_f4(x);
  float32x4_t v50 = vmulq_f32(v56, (float32x4_t)v48);
  float32x4_t v44 = vaddq_f32(v54, v50);
  float32x4_t v12 = (float32x4_t)_simd_exp10_f4(v58);
  float32x4_t v59 = vmulq_f32(v56, vnegq_f32(v56));
  float32x4_t v35 = (float32x4_t)vdupq_n_s32(0x3F9837F0u);
  float32x4_t v13 = vmulq_f32((float32x4_t)_simd_sin_f4(x), vmlaq_f32(v59, v35, vsqrtq_f32(vaddq_f32(v12, v61))));
  float32x4_t v14 = vsubq_f32(v54, v50);
  float32x4_t v15 = vdivq_f32(v61, vaddq_f32(v14, v13));
  float32x4_t v51 = vmulq_f32(vmulq_f32((float32x4_t)v46, vaddq_f32(v44, v13)), v15);
  float32x4_t v16 = vmulq_f32(v54, (float32x4_t)v48);
  v17.i64[0] = 0xC0000000C0000000;
  v17.i64[1] = 0xC0000000C0000000;
  float32x4_t v18 = vmulq_f32(vmulq_f32(vmulq_f32((float32x4_t)v46, v17), vaddq_f32(v56, v16)), v15);
  float32x4_t v47 = vmulq_f32(vmulq_f32((float32x4_t)v46, vsubq_f32(v44, v13)), v15);
  float32x4_t v49 = v18;
  float32x4_t v19 = vsubq_f32(v56, v16);
  simd_float4 xa = (simd_float4)vmulq_f32(vsubq_f32(v14, v13), v15);
  float32x4_t v45 = vmulq_f32(vaddq_f32(v19, v19), v15);
  float32x4_t v34 = (float32x4_t)_simd_log10_f4((simd_float4)vmaxnmq_f32(*(float32x4_t *)(a1 + 112), v40));
  v20.i64[0] = 0x3F0000003F000000;
  v20.i64[1] = 0x3F0000003F000000;
  simd_float4 v41 = _simd_exp10_f4((simd_float4)vmulq_f32(v34, v20));
  float32x4_t v55 = vaddq_f32((float32x4_t)v41, v61);
  float32x4_t v57 = vaddq_f32((float32x4_t)v41, v38);
  simd_float4 v32 = (simd_float4)vmulq_f32(vmulq_n_f32(*(float32x4_t *)(a1 + 96), *(float *)(a2 + 8)), v36);
  simd_float4 v37 = _simd_cos_f4(v32);
  float32x4_t v33 = vmulq_f32(v57, (float32x4_t)v37);
  float32x4_t v39 = vsubq_f32(v55, v33);
  float32x4_t v60 = vmlaq_f32(v59, v35, vsqrtq_f32(vaddq_f32((float32x4_t)_simd_exp10_f4((simd_float4)v34), v61)));
  float32x4_t v21 = vmulq_f32((float32x4_t)_simd_sin_f4(v32), v60);
  float32x4_t v22 = vaddq_f32(v55, v33);
  float32x4_t v23 = vdivq_f32(v61, vaddq_f32(v22, v21));
  long long v24 = *(_OWORD *)(a1 + 160);
  float32x4_t v25 = vmulq_f32(v55, (float32x4_t)v37);
  long long v27 = *(_OWORD *)(a1 + 32);
  long long v26 = *(_OWORD *)(a1 + 48);
  float32x4_t v28 = vmulq_f32(vmulq_f32((float32x4_t)v41, vsubq_f32(v39, v21)), v23);
  *(int32x4_t *)(a1 + 224) = v52;
  *(int32x4_t *)(a1 + 240) = v53;
  long long v29 = *(_OWORD *)(a1 + 16);
  v30.i64[0] = 0xC0000000C0000000;
  v30.i64[1] = 0xC0000000C0000000;
  *(float32x4_t *)(a1 + 256) = v51;
  *(float32x4_t *)(a1 + 272) = v49;
  *(float32x4_t *)(a1 + 288) = v47;
  *(float32x4_t *)(a1 + 304) = v45;
  *(simd_float4 *)(a1 + 320) = xa;
  *(float32x4_t *)(a1 + 336) = vmulq_f32(vmulq_f32((float32x4_t)v41, vaddq_f32(v39, v21)), v23);
  float32x4_t result = vmulq_f32(vsubq_f32(v22, v21), v23);
  *(float32x4_t *)(a1 + 352) = vmulq_f32(vmulq_f32(vaddq_f32((float32x4_t)v41, (float32x4_t)v41), vsubq_f32(v57, v25)), v23);
  *(float32x4_t *)(a1 + 368) = v28;
  *(float32x4_t *)(a1 + 384) = vmulq_f32(vmulq_f32(vaddq_f32(v57, v25), v30), v23);
  *(float32x4_t *)(a1 + 400) = result;
  *(_OWORD *)(a1 + 416) = v24;
  *(_OWORD *)(a1 + 432) = v26;
  *(_OWORD *)(a1 + 448) = v29;
  *(_OWORD *)(a1 + 464) = v27;
  return result;
}

double PushStreamSamplerSlice::Slice::UpdateParameters(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = a3;
  *(void *)(a1 + 528 + 8 * a3) = *(void *)(a1 + 176 + 8 * a3);
  int v7 = *(_DWORD *)(a1 + 176 + 4 * a3 + 32);
  *(_DWORD *)(a1 + 528 + 4 * a3 + 32) = v7;
  uint64_t v8 = a1 + 4 * a3;
  float v9 = log10f(fmaxf(*(float *)(v8 + 80), 0.00001));
  float v10 = __exp10f(v9 * 0.5);
  float v48 = *(float *)(a2 + 8);
  float v49 = *(float *)(v8 + 64);
  float v51 = __exp10f(v9);
  float v11 = log10f(fmaxf(*(float *)(v8 + 112), 0.00001));
  float v12 = __exp10f(v11 * 0.5);
  float v13 = *(float *)(v8 + 96);
  float v14 = __exp10f(v11);
  int v15 = *(_DWORD *)(v8 + 160);
  int v16 = *(_DWORD *)(v8 + 48);
  double v52 = *(double *)(a1 + 8 * a3 + 16);
  float v17 = *(float *)(v8 + 128);
  int v50 = v16;
  if (v17 >= 0.001)
  {
    float v19 = 6.2832 / v17;
    float v20 = v19 * v19;
    float32x4_t v21 = (float *)(a1 + 4 * v6);
    float v22 = v19 * (float)(v21[36] + v21[36]);
    v21[124] = v20;
    v21[128] = v22;
  }
  else
  {
    uint64_t v18 = a1 + 4 * v6;
    *(_DWORD *)(v18 + 816) = 0;
    *(_DWORD *)(v18 + 800) = v16;
  }
  __float2 v23 = __sincosf_stret((float)(v48 * v13) * 6.2832);
  float v24 = (float)(v12 + -1.0) * v23.__cosval;
  float v25 = (float)(v12 + 1.0) + v24;
  float v26 = sqrtf(v14 + 1.0);
  float v27 = v10 + -1.0;
  float v28 = v23.__sinval * (float)((float)(v26 * 1.1892) - (float)(v27 * v27));
  float v29 = v25 - v28;
  float v30 = 1.0 / (float)(v25 + v28);
  float v31 = (float)(v12 + 1.0) * v23.__cosval;
  float v46 = (float)((float)((float)(v12 + -1.0) + v31) * -2.0) * v30;
  float v47 = v29 * v30;
  float v32 = (float)(v12 + 1.0) - v24;
  float v45 = (float)(v12 * (float)(v32 - v28)) * v30;
  float v33 = (float)((float)(v12 + v12) * (float)((float)(v12 + -1.0) - v31)) * v30;
  float v34 = (float)(v12 * (float)(v32 + v28)) * v30;
  __float2 v35 = __sincosf_stret((float)(v49 * v48) * 6.2832);
  float v36 = (float)(v10 + -1.0) * v35.__cosval;
  float v37 = (float)(v10 + 1.0) - v36;
  float v38 = v35.__sinval * (float)((float)(sqrtf(v51 + 1.0) * 1.1892) - (float)(v27 * v27));
  float v39 = v37 - v38;
  float v40 = 1.0 / (float)(v37 + v38);
  float v41 = (float)(v10 + 1.0) * v35.__cosval;
  float v42 = (float)(v10 + 1.0) + v36;
  uint64_t v43 = a1 + 4 * v6;
  *(_DWORD *)(v43 + 224) = v7;
  *(_DWORD *)(v43 + 240) = v7 - 1;
  *(float *)(v43 + 256) = (float)(v10 * (float)(v42 + v38)) * v40;
  *(float *)(v43 + 272) = (float)((float)(v10 * -2.0) * (float)((float)(v10 + -1.0) + v41)) * v40;
  *(float *)(v43 + 288) = (float)(v10 * (float)(v42 - v38)) * v40;
  *(float *)(v43 + 304) = (float)((float)((float)(v10 + -1.0) - v41) + (float)((float)(v10 + -1.0) - v41)) * v40;
  *(float *)(v43 + 320) = v39 * v40;
  *(float *)(v43 + 336) = v34;
  *(float *)(v43 + 352) = v33;
  *(float *)(v43 + 368) = v45;
  *(float *)(v43 + 384) = v46;
  *(float *)(v43 + 400) = v47;
  *(_DWORD *)(v43 + 416) = v15;
  *(_DWORD *)(v43 + 432) = v50;
  double result = v52;
  *(double *)(a1 + 8 * v6 + 448) = v52;
  return result;
}

uint64_t PushStreamSamplerSlice::Slice::Run(uint64_t this, Phase::DspLayer::VoiceEngine *a2, Phase::DspLayer::VoicePool *a3, int a4)
{
  uint64_t v5 = this;
  v142[1] = *MEMORY[0x263EF8340];
  int32x4_t v6 = *(int32x4_t *)(this + 240);
  float32x4_t v7 = *(float32x4_t *)(this + 256);
  float32x4_t v8 = *(float32x4_t *)(this + 272);
  float32x4_t v10 = *(float32x4_t *)(this + 288);
  float32x4_t v9 = *(float32x4_t *)(this + 304);
  float32x4_t v11 = *(float32x4_t *)(this + 320);
  float32x4_t v12 = *(float32x4_t *)(this + 336);
  float32x4_t v14 = *(float32x4_t *)(this + 352);
  float32x4_t v13 = *(float32x4_t *)(this + 368);
  float32x4_t v16 = *(float32x4_t *)(this + 384);
  float32x4_t v15 = *(float32x4_t *)(this + 400);
  float64x2_t v18 = *(float64x2_t *)(this + 448);
  float64x2_t v17 = *(float64x2_t *)(this + 464);
  float64x2_t v19 = *(float64x2_t *)(this + 576);
  float64x2_t v20 = *(float64x2_t *)(this + 592);
  __asm { FMOV            V3.2D, #-1.0 }
  int32x4_t v26 = vuzp1q_s32((int32x4_t)vceqq_f64(v19, _Q3), (int32x4_t)vceqq_f64(v20, _Q3));
  float64x2_t v27 = (float64x2_t)vbicq_s8((int8x16_t)v19, (int8x16_t)vzip1q_s32(v26, v26));
  float64x2_t v28 = (float64x2_t)vbicq_s8((int8x16_t)v20, (int8x16_t)vzip2q_s32(v26, v26));
  int32x4_t v29 = *(int32x4_t *)(this + 608);
  int8x16_t v30 = 0uLL;
  int32x4_t v31 = (int32x4_t)vorrq_s8(vandq_s8(*(int8x16_t *)(this + 224), (int8x16_t)vceqzq_s32(v29)), (int8x16_t)v29);
  v32.i64[0] = v31.i32[2];
  v32.i64[1] = v31.i32[3];
  float64x2_t v33 = vcvtq_f64_s64(v32);
  v32.i64[0] = v31.i32[0];
  v32.i64[1] = v31.i32[1];
  int32x4_t v34 = (int32x4_t)vandq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v27, vcvtq_f64_s64(v32)), (int32x4_t)vcgeq_f64(v28, v33)), (int8x16_t)v31);
  v32.i64[0] = v34.i32[0];
  v32.i64[1] = v34.i32[1];
  float64x2_t v35 = vcvtq_f64_s64(v32);
  v32.i64[0] = v34.i32[2];
  v32.i64[1] = v34.i32[3];
  float64x2_t v36 = vsubq_f64(v28, vcvtq_f64_s64(v32));
  float64x2_t v37 = vsubq_f64(v27, v35);
  float64x2_t v38 = vrndq_f64(v37);
  float64x2_t v39 = vrndq_f64(v36);
  int32x4_t v40 = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(v38), (int32x4_t)vcvtq_s64_f64(v39));
  v34.i64[0] = -1;
  v34.i64[1] = -1;
  int32x4_t v41 = vaddq_s32(v31, v34);
  int8x16_t v42 = (int8x16_t)vceqq_s32(v41, v40);
  HIDWORD(v44) = a4 - 1;
  LODWORD(v44) = a4 - 1;
  int v43 = v44 >> 1;
  int32x4_t v45 = vminq_s32(vmaxq_s32(v40, (int32x4_t)0), v6);
  switch(v43)
  {
    case 0:
      v30.i32[0] = *(_DWORD *)(*(void *)(this + 528) + 4 * v45.i32[0]);
      break;
    case 1:
      v30.i32[0] = *(_DWORD *)(*(void *)(this + 528) + 4 * v45.i32[0]);
      v30.i32[1] = *(_DWORD *)(*(void *)(this + 536) + 4 * v45.i32[1]);
      break;
    case 3:
      v30.i32[0] = *(_DWORD *)(*(void *)(this + 528) + 4 * v45.i32[0]);
      v30.i32[1] = *(_DWORD *)(*(void *)(this + 536) + 4 * v45.i32[1]);
      v30.i32[2] = *(_DWORD *)(*(void *)(this + 544) + 4 * v45.i32[2]);
      break;
    case 7:
      v30.i32[0] = *(_DWORD *)(*(void *)(this + 528) + 4 * v45.i32[0]);
      v30.i32[1] = *(_DWORD *)(*(void *)(this + 536) + 4 * v45.i32[1]);
      v30.i32[2] = *(_DWORD *)(*(void *)(this + 544) + 4 * v45.i32[2]);
      v30.i32[3] = *(_DWORD *)(*(void *)(this + 552) + 4 * v45.i32[3]);
      break;
    default:
      break;
  }
  int8x16_t v46 = *(int8x16_t *)(this + 640);
  int8x16_t v47 = vandq_s8((int8x16_t)vceqzq_s32(*(int32x4_t *)(this + 624)), v42);
  v48.i64[0] = v41.i32[2];
  v48.i64[1] = v41.i32[3];
  float64x2_t v49 = vcvtq_f64_s64(v48);
  v48.i64[0] = v41.i32[0];
  v48.i64[1] = v41.i32[1];
  int8x16_t v50 = (int8x16_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v27, vcvtq_f64_s64(v48)), (int32x4_t)vcgeq_f64(v28, v49));
  int8x16_t v51 = vandq_s8(v50, vandq_s8((int8x16_t)vceqzq_s32(*(int32x4_t *)(this + 656)), (int8x16_t)xmmword_2220E7D80));
  int32x4_t v52 = (int32x4_t)vorrq_s8(vextq_s8(v51, v51, 8uLL), v51);
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s32(v52, 3), (int8x16_t)v52).u32[0] & a4) != 0)
  {
    MEMORY[0x270FA5388](this);
    v142[0] = v115;
    v115[0] = 0;
    v115[1] = 0;
    v141[0] = 1;
    v141[2] = 2;
    float64x2_t v139 = v54;
    float64x2_t v140 = v53;
    float64x2_t v137 = v56;
    float64x2_t v138 = v55;
    float64x2_t v135 = v58;
    float64x2_t v136 = v57;
    float32x4_t v133 = v59;
    int8x16_t v134 = v60;
    float32x4_t v132 = v61;
    float32x4_t v131 = v62;
    float32x4_t v130 = v63;
    float32x4_t v129 = v64;
    float32x4_t v128 = v65;
    float32x4_t v127 = v66;
    float32x4_t v126 = v67;
    float32x4_t v125 = v68;
    float32x4_t v124 = v69;
    int8x16_t v123 = v50;
    float64x2_t v122 = v38;
    float64x2_t v121 = v39;
    int32x4_t v120 = v6;
    int32x4_t v119 = v70;
    int8x16_t v118 = v71;
    int8x16_t v117 = v72;
    int8x16_t v116 = v73;
    this = Phase::DspLayer::VoicePool::ExternalCallbackWithMessage(v74, 0, (uint64_t *)(v5 + 832), v75, v141, v142);
    int8x16_t v47 = v116;
    int8x16_t v46 = v117;
    int8x16_t v30 = v118;
    int32x4_t v40 = v119;
    int32x4_t v6 = v120;
    float64x2_t v39 = v121;
    float64x2_t v38 = v122;
    int8x16_t v50 = v123;
    float32x4_t v8 = v124;
    float32x4_t v10 = v125;
    float32x4_t v7 = v126;
    float32x4_t v9 = v127;
    float32x4_t v11 = v128;
    float32x4_t v14 = v129;
    float32x4_t v13 = v130;
    float32x4_t v12 = v131;
    float32x4_t v16 = v132;
    float32x4_t v15 = v133;
    int8x16_t v42 = v134;
    float64x2_t v37 = v135;
    float64x2_t v36 = v136;
    float64x2_t v28 = v137;
    float64x2_t v27 = v138;
    float64x2_t v18 = v139;
    float64x2_t v17 = v140;
    int32x4_t v29 = *(int32x4_t *)(v5 + 608);
  }
  int8x16_t v76 = vbslq_s8(v47, v30, v46);
  int32x4_t v77 = *(int32x4_t *)(v5 + 560);
  v78.i64[0] = -1;
  v78.i64[1] = -1;
  int8x16_t v79 = (int8x16_t)vminq_s32(v40, vaddq_s32(v77, v78));
  switch(v43)
  {
    case 0:
      uint64_t v80 = *(void *)(v5 + 528);
      v79.i32[0] = *(_DWORD *)(v80 + 4 * v79.i32[0]);
      float32x4_t v81 = (float32x4_t)vorrq_s8(vbicq_s8(v79, v42), vandq_s8(v76, v42));
      v82.i64[0] = 0x100000001;
      v82.i64[1] = 0x100000001;
      float32x4_t v83 = (float32x4_t)vminq_s32((int32x4_t)vbicq_s8((int8x16_t)vmaxq_s32(vaddq_s32(v40, v82), (int32x4_t)0), v42), v6);
      v83.i32[0] = *(_DWORD *)(v80 + 4 * v83.i32[0]);
      break;
    case 1:
      uint64_t v84 = *(void *)(v5 + 528);
      uint64_t v85 = *(void *)(v5 + 536);
      v79.i32[0] = *(_DWORD *)(v84 + 4 * v79.i32[0]);
      v79.i32[1] = *(_DWORD *)(v85 + 4 * v79.i32[1]);
      float32x4_t v81 = (float32x4_t)vorrq_s8(vbicq_s8(v79, v42), vandq_s8(v76, v42));
      v86.i64[0] = 0x100000001;
      v86.i64[1] = 0x100000001;
      float32x4_t v83 = (float32x4_t)vminq_s32((int32x4_t)vbicq_s8((int8x16_t)vmaxq_s32(vaddq_s32(v40, v86), (int32x4_t)0), v42), v6);
      v83.i32[0] = *(_DWORD *)(v84 + 4 * v83.i32[0]);
      v83.i32[1] = *(_DWORD *)(v85 + 4 * v83.i32[1]);
      break;
    case 3:
      uint64_t v87 = *(void *)(v5 + 528);
      uint64_t v88 = *(void *)(v5 + 536);
      uint64_t v89 = *(void *)(v5 + 544);
      v79.i32[0] = *(_DWORD *)(v87 + 4 * v79.i32[0]);
      v79.i32[1] = *(_DWORD *)(v88 + 4 * v79.i32[1]);
      v79.i32[2] = *(_DWORD *)(v89 + 4 * v79.i32[2]);
      float32x4_t v83 = (float32x4_t)vandq_s8(v76, v42);
      v90.i64[0] = 0x100000001;
      v90.i64[1] = 0x100000001;
      int32x4_t v91 = vminq_s32((int32x4_t)vbicq_s8((int8x16_t)vmaxq_s32(vaddq_s32(v40, v90), (int32x4_t)0), v42), v6);
      float32x4_t v81 = (float32x4_t)vorrq_s8(vbicq_s8(v79, v42), (int8x16_t)v83);
      v83.i32[0] = *(_DWORD *)(v87 + 4 * v91.i32[0]);
      v83.i32[1] = *(_DWORD *)(v88 + 4 * v91.i32[1]);
      v83.i32[2] = *(_DWORD *)(v89 + 4 * v91.i32[2]);
      break;
    case 7:
      uint64_t v92 = *(void *)(v5 + 528);
      uint64_t v93 = *(void *)(v5 + 536);
      uint64_t v94 = *(void *)(v5 + 544);
      uint64_t v95 = *(void *)(v5 + 552);
      v79.i32[0] = *(_DWORD *)(v92 + 4 * v79.i32[0]);
      v79.i32[1] = *(_DWORD *)(v93 + 4 * v79.i32[1]);
      v79.i32[2] = *(_DWORD *)(v94 + 4 * v79.i32[2]);
      v79.i32[3] = *(_DWORD *)(v95 + 4 * v79.i32[3]);
      float32x4_t v81 = (float32x4_t)vorrq_s8(vbicq_s8(v79, v42), vandq_s8(v76, v42));
      v96.i64[0] = 0x100000001;
      v96.i64[1] = 0x100000001;
      int32x4_t v97 = vminq_s32((int32x4_t)vbicq_s8((int8x16_t)vmaxq_s32(vaddq_s32(v40, v96), (int32x4_t)0), v42), v6);
      v83.i32[0] = *(_DWORD *)(v92 + 4 * v97.i32[0]);
      v83.i32[1] = *(_DWORD *)(v93 + 4 * v97.i32[1]);
      v83.i32[2] = *(_DWORD *)(v94 + 4 * v97.i32[2]);
      v83.i32[3] = *(_DWORD *)(v95 + 4 * v97.i32[3]);
      break;
    default:
      float32x4_t v81 = (float32x4_t)vandq_s8(v76, v42);
      float32x4_t v83 = 0uLL;
      break;
  }
  float32x4_t v98 = vmlaq_f32(v81, vsubq_f32(v83, v81), vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vsubq_f64(v37, v38)), vsubq_f64(v36, v39)));
  float32x4_t v99 = *(float32x4_t *)(v5 + 672);
  float32x4_t v100 = vmlaq_f32(vmlaq_f32(vmulq_f32(v8, v99), v98, v7), *(float32x4_t *)(v5 + 688), v10);
  float32x4_t v101 = *(float32x4_t *)(v5 + 704);
  float32x4_t v102 = vmlsq_f32(vmlsq_f32(v100, v101, v9), *(float32x4_t *)(v5 + 720), v11);
  float32x4_t v103 = *(float32x4_t *)(v5 + 736);
  float32x4_t v104 = *(float32x4_t *)(v5 + 768);
  float32x4_t v105 = vmlsq_f32(vmlsq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v14, v103), v102, v12), *(float32x4_t *)(v5 + 752), v13), v104, v16), *(float32x4_t *)(v5 + 784), v15);
  float v106 = *((float *)a2 + 2);
  float32x4_t v107 = *(float32x4_t *)(v5 + 800);
  float32x4_t v108 = vmlaq_n_f32(*(float32x4_t *)(v5 + 816), vmlaq_f32(vmulq_f32(*(float32x4_t *)(v5 + 816), vnegq_f32(*(float32x4_t *)(v5 + 512))), vsubq_f32(*(float32x4_t *)(v5 + 432), v107), *(float32x4_t *)(v5 + 496)), v106);
  float32x4_t v109 = vmlaq_n_f32(v107, v108, v106);
  *(float32x4_t *)(v5 + 800) = v109;
  *(float32x4_t *)(v5 + 816) = v108;
  float32x4_t v110 = vmulq_f32(v105, v109);
  int8x16_t v111 = vandq_s8((int8x16_t)v110, vorrq_s8((int8x16_t)vcltzq_f32(v110), (int8x16_t)vcgezq_f32(v110)));
  switch(v43)
  {
    case 0:
      goto LABEL_18;
    case 1:
      goto LABEL_17;
    case 3:
      goto LABEL_16;
    case 7:
      *(_DWORD *)(*((void *)a2 + 7) + 4 * *(int *)(v5 + 428)) = v111.i32[3];
LABEL_16:
      *(_DWORD *)(*((void *)a2 + 7) + 4 * *(int *)(v5 + 424)) = v111.i32[2];
LABEL_17:
      *(_DWORD *)(*((void *)a2 + 7) + 4 * *(int *)(v5 + 420)) = v111.i32[1];
LABEL_18:
      *(_DWORD *)(*((void *)a2 + 7) + 4 * *(int *)(v5 + 416)) = v111.i32[0];
      float32x4_t v99 = *(float32x4_t *)(v5 + 672);
      float32x4_t v101 = *(float32x4_t *)(v5 + 704);
      float32x4_t v103 = *(float32x4_t *)(v5 + 736);
      float32x4_t v104 = *(float32x4_t *)(v5 + 768);
      break;
    default:
      break;
  }
  v112.i64[0] = 0x100000001;
  v112.i64[1] = 0x100000001;
  v113.i64[0] = v29.i32[2];
  v113.i64[1] = v29.i32[3];
  float64x2_t v114 = vcvtq_f64_s64(v113);
  v113.i64[0] = v29.i32[0];
  v113.i64[1] = v29.i32[1];
  *(float64x2_t *)(v5 + 576) = vaddq_f64(v18, v37);
  *(float64x2_t *)(v5 + 592) = vaddq_f64(v17, v36);
  *(int8x16_t *)(v5 + 608) = vbslq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v27, vcvtq_f64_s64(v113)), (int32x4_t)vcgeq_f64(v28, v114)), (int8x16_t)v77, (int8x16_t)v29);
  *(int8x16_t *)(v5 + 624) = v42;
  *(int8x16_t *)(v5 + 640) = v76;
  *(int8x16_t *)(v5 + 656) = vandq_s8(v50, v112);
  *(float32x4_t *)(v5 + 672) = v98;
  *(float32x4_t *)(v5 + 688) = v99;
  *(float32x4_t *)(v5 + 704) = v102;
  *(float32x4_t *)(v5 + 720) = v101;
  *(float32x4_t *)(v5 + 736) = v102;
  *(float32x4_t *)(v5 + 752) = v103;
  *(float32x4_t *)(v5 + 768) = v105;
  *(float32x4_t *)(v5 + 784) = v104;
  return this;
}

float PushStreamSamplerSlice::Slice::CopyVoiceState(PushStreamSamplerSlice::Slice *this, Phase::DspLayer::VoicePoolSlice *a2, unsigned int a3, unsigned int a4)
{
  int32x4_t v4 = (char *)a2 + 8 * (int)a3;
  uint64_t v5 = (char *)this + 8 * (int)a4;
  *((void *)v5 + 2) = *((void *)v4 + 2);
  int32x4_t v6 = (_DWORD *)((char *)a2 + 4 * (int)a3);
  float32x4_t v7 = (_DWORD *)((char *)this + 4 * (int)a4);
  v7[12] = v6[12];
  v7[16] = v6[16];
  v7[20] = v6[20];
  v7[24] = v6[24];
  v7[28] = v6[28];
  v7[32] = v6[32];
  v7[36] = v6[36];
  v7[40] = v6[40];
  *((void *)this + (int)a4 + 22) = *((void *)a2 + (int)a3 + 22);
  *((_DWORD *)this + (int)a4 + 52) = *((_DWORD *)a2 + (int)a3 + 52);
  v7[56] = v6[56];
  v7[60] = v6[60];
  v7[64] = v6[64];
  v7[68] = v6[68];
  v7[72] = v6[72];
  v7[76] = v6[76];
  v7[80] = v6[80];
  v7[84] = v6[84];
  v7[88] = v6[88];
  v7[92] = v6[92];
  v7[96] = v6[96];
  v7[100] = v6[100];
  v7[104] = v6[104];
  v7[108] = v6[108];
  *((void *)v5 + 56) = *((void *)v4 + 56);
  v7[124] = v6[124];
  int v8 = v6[128];
  *((void *)this + (int)a4 + 66) = *((void *)a2 + (int)a3 + 66);
  v7[128] = v8;
  *((_DWORD *)this + (int)a4 + 140) = *((_DWORD *)a2 + (int)a3 + 140);
  if (a3 >= 4) {
    __assert_rtn("Copy", "DelaylineLinear.hpp", 507, "fromLane >= 0 && fromLane < PHASE_SIMD_WIDTH");
  }
  if (a4 >= 4) {
    __assert_rtn("Copy", "DelaylineLinear.hpp", 508, "toLane >= 0 && toLane < PHASE_SIMD_WIDTH");
  }
  *((void *)this + a4 + 72) = *((void *)a2 + a3 + 72);
  float32x4_t v9 = (char *)a2 + 4 * a3;
  float32x4_t v10 = (char *)this + 4 * a4;
  *((_DWORD *)v10 + 152) = *((_DWORD *)v9 + 152);
  *((_DWORD *)v10 + 156) = *((_DWORD *)v9 + 156);
  *((_DWORD *)v10 + 160) = *((_DWORD *)v9 + 160);
  *((_DWORD *)this + a4 + 168) = *((_DWORD *)a2 + a3 + 168);
  uint64_t v11 = 4 * a3 + 16;
  int v12 = *(_DWORD *)((char *)a2 + v11 + 672);
  *((_DWORD *)v10 + 164) = *((_DWORD *)v9 + 164);
  uint64_t v13 = 4 * a4 + 16;
  *(_DWORD *)((char *)this + v13 + 672) = v12;
  *((_DWORD *)this + a4 + 176) = *((_DWORD *)a2 + a3 + 176);
  *(_DWORD *)((char *)this + v13 + 704) = *(_DWORD *)((char *)a2 + v11 + 704);
  *((_DWORD *)this + a4 + 184) = *((_DWORD *)a2 + a3 + 184);
  *(_DWORD *)((char *)this + v13 + 736) = *(_DWORD *)((char *)a2 + v11 + 736);
  *((_DWORD *)this + a4 + 192) = *((_DWORD *)a2 + a3 + 192);
  *(_DWORD *)((char *)this + v13 + 768) = *(_DWORD *)((char *)a2 + v11 + 768);
  *((_DWORD *)v10 + 200) = *((_DWORD *)v9 + 200);
  float result = *((float *)v9 + 204);
  *((float *)v10 + 204) = result;
  *((void *)this + (int)a4 + 104) = *((void *)a2 + (int)a3 + 104);
  return result;
}

unint64_t PushStreamSamplerSlice::Slice::GetOutput(PushStreamSamplerSlice::Slice *this, int a2, int a3)
{
  if (a2) {
    return 0xFFFFFFFF00000008;
  }
  else {
    return (unint64_t)*((unsigned int *)this + a3 + 40) << 32;
  }
}

uint64_t PushStreamSamplerSlice::Slice::SetOutput(PushStreamSamplerSlice::Slice *this, int a2, int a3, int a4)
{
  if (a2) {
    return 8;
  }
  uint64_t result = 0;
  *((_DWORD *)this + a3 + 40) = a4;
  return result;
}

uint64_t PushStreamSamplerSlice::Slice::GetBuffer@<X0>(uint64_t this@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (a2)
  {
    uint64_t v4 = 0;
    int v5 = -1;
    int v6 = 10;
  }
  else
  {
    int v6 = 0;
    uint64_t v4 = *(void *)(this + 176 + 8 * a3);
    int v5 = *(_DWORD *)(this + 176 + 4 * a3 + 32);
  }
  *(_DWORD *)a4 = v6;
  *(void *)(a4 + 8) = v4;
  *(_DWORD *)(a4 + 16) = v5;
  return this;
}

uint64_t PushStreamSamplerSlice::Slice::SetBuffer(PushStreamSamplerSlice::Slice *this, int a2, int a3, void *a4, int a5)
{
  if (a2) {
    return 10;
  }
  uint64_t result = 0;
  this = (PushStreamSamplerSlice::Slice *)((char *)this + 176);
  *((void *)this + a3) = a4;
  *((_DWORD *)this + a3 + 8) = a5;
  return result;
}

void std::__function::__func<Phase::DspLayer::PushStreamSampler::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::PushStreamSampler::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::~__func()
{
}

void *std::__function::__func<Phase::DspLayer::PushStreamSampler::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::PushStreamSampler::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26D47A0C0;
  return result;
}

void std::__function::__func<Phase::DspLayer::PushStreamSampler::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::PushStreamSampler::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D47A0C0;
}

void std::__function::__func<Phase::DspLayer::PushStreamSampler::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::PushStreamSampler::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::operator()()
{
}

void sub_222034A90(_Unwind_Exception *a1)
{
  MEMORY[0x223C938A0](v1, 0x10F1C408EBD29CELL);
  _Unwind_Resume(a1);
}

Phase::DspLayer::RainBubble *Phase::DspLayer::RainBubble::RainBubble(Phase::DspLayer::RainBubble *this, Phase::DspLayer::VoiceEngine *a2, int a3)
{
  uint64_t v4 = Phase::DspLayer::VoicePool::VoicePool((uint64_t)this, (uint64_t)"RainBubble", (uint64_t)a2, a3, 288);
  *(void *)uint64_t v4 = &unk_26D47A108;
  if (*(int *)(v4 + 40) >= 1)
  {
    int v5 = 0;
    do
    {
      int v6 = (void *)(*((void *)this + 3) + *((int *)this + 4) * (uint64_t)v5);
      void *v6 = &unk_26D47A128;
      v6[1] = 0;
      ++v5;
    }
    while (v5 < *((_DWORD *)this + 10));
  }
  return this;
}

void sub_222034B68(_Unwind_Exception *a1)
{
  Phase::DspLayer::VoicePool::~VoicePool(v1);
  _Unwind_Resume(a1);
}

void Phase::DspLayer::RainBubble::~RainBubble(Phase::DspLayer::RainBubble *this)
{
  Phase::DspLayer::VoicePool::~VoicePool(this);

  JUMPOUT(0x223C938A0);
}

void anonymous namespace'::RainBubbleSlice::~RainBubbleSlice(_anonymous_namespace_::RainBubbleSlice *this)
{
}

double anonymous namespace'::RainBubbleSlice::Reset(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v13 = *MEMORY[0x263EF8340];
  *(_OWORD *)(a1 + 224) = 0u;
  __asm { FMOV            V2.4S, #3.0 }
  *(int32x4_t *)(a1 + 16) = vdupq_n_s32(0x3A03126Fu);
  *(_OWORD *)(a1 + 32) = _Q2;
  __asm { FMOV            V2.4S, #1.0 }
  *(int32x4_t *)(a1 + 48) = vdupq_n_s32(0x3DCCCCCDu);
  *(_OWORD *)(a1 + 64) = _Q2;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  long long v11 = _Q2;
  long long v12 = xmmword_2220A4FB0;
  do
  {
    *(_DWORD *)(a1 + 224 + 4 * *(int *)((char *)&v11 + v2 + 16)) = *(_DWORD *)((char *)&v11 + v2);
    v2 += 4;
  }
  while (v2 != 16);
  uint64_t v9 = 0;
  long long v12 = xmmword_2220A4FB0;
  long long v11 = 0uLL;
  do
  {
    *(_DWORD *)(a1 + 240 + 4 * *(int *)((char *)&v11 + v9 + 16)) = *(_DWORD *)((char *)&v11 + v9);
    v9 += 4;
  }
  while (v9 != 16);
  (*(void (**)(uint64_t))(*(void *)a1 + 48))(a1);
  double result = 0.0;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  return result;
}

uint64_t anonymous namespace'::RainBubbleSlice::Reset(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  float32x4_t v7 = (_DWORD *)(a1 + 4 * a3);
  v7[4] = 973279855;
  v7[8] = 1077936128;
  v7[12] = 1036831949;
  v7[16] = 1065353216;
  v7[20] = 0;
  v7[24] = 0;
  v7[52] = 0;
  v7[56] = 1065353216;
  v7[60] = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  *(void *)(a1 + 8 * a3 + 256) = a4;
  return result;
}

double anonymous namespace'::RainBubbleSlice::GetParameter(_anonymous_namespace_::RainBubbleSlice *this, int a2, int a3)
{
  switch(a2)
  {
    case 0:
      int v3 = (float *)((char *)this + 4 * a3 + 16);
      goto LABEL_7;
    case 1:
      int v3 = (float *)((char *)this + 4 * a3 + 32);
      goto LABEL_7;
    case 2:
      int v3 = (float *)((char *)this + 4 * a3 + 48);
      goto LABEL_7;
    case 3:
      int v3 = (float *)((char *)this + 4 * a3 + 64);
      goto LABEL_7;
    case 4:
      int v3 = (float *)((char *)this + 4 * a3 + 80);
LABEL_7:
      double result = *v3;
      break;
    default:
      return result;
  }
  return result;
}

float anonymous namespace'::RainBubbleSlice::SetParameter(_anonymous_namespace_::RainBubbleSlice *this, int a2, int a3, double a4)
{
  switch(a2)
  {
    case 0:
      *(float *)&a4 = a4;
      *((_DWORD *)this + a3 + 4) = LODWORD(a4);
      break;
    case 1:
      *(float *)&a4 = a4;
      *((_DWORD *)this + a3 + 8) = LODWORD(a4);
      break;
    case 2:
      *(float *)&a4 = a4;
      *((_DWORD *)this + a3 + 12) = LODWORD(a4);
      break;
    case 3:
      *(float *)&a4 = a4;
      *((_DWORD *)this + a3 + 16) = LODWORD(a4);
      break;
    case 4:
      *(float *)&a4 = a4;
      *((_DWORD *)this + a3 + 20) = LODWORD(a4);
      break;
    default:
      return *(float *)&a4;
  }
  return *(float *)&a4;
}

void anonymous namespace'::RainBubbleSlice::UpdateParameters(uint64_t a1)
{
  float32x4_t v2 = *(float32x4_t *)(a1 + 16);
  float32x4_t v15 = vdivq_f32(*(float32x4_t *)(a1 + 32), v2);
  float32x4_t v13 = *(float32x4_t *)(a1 + 48);
  __asm { FMOV            V1.4S, #-1.5; y }
  float32x4_t v8 = vmlaq_f32(vdivq_f32((float32x4_t)vdupq_n_s32(0x3E051EB8u), v2), (float32x4_t)vdupq_n_s32(0x3BEBEDFAu), (float32x4_t)_simd_pow_f4((simd_float4)v2, _Q1));
  long long v12 = *(_OWORD *)(a1 + 96);
  float32x4_t v14 = vmulq_f32(v13, v8);
  float32x4_t v10 = vnegq_f32(v8);
  long long v11 = *(_OWORD *)(a1 + 64);
  simd_float4 v9 = _simd_exp_f4((simd_float4)vmulq_f32(*(float32x4_t *)(a1 + 80), v10));
  *(float32x4_t *)(a1 + 112) = v15;
  *(float32x4_t *)(a1 + 128) = v14;
  *(_OWORD *)(a1 + 144) = v12;
  *(_OWORD *)(a1 + 160) = v11;
  *(float32x4_t *)(a1 + 176) = v10;
  *(simd_float4 *)(a1 + 192) = v9;
}

void anonymous namespace'::RainBubbleSlice::UpdateParameters(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = a1 + 4 * a3;
  float v4 = *(float *)(v3 + 16);
  float v5 = *(float *)(v3 + 32) / v4;
  float v6 = *(float *)(v3 + 48);
  float v7 = (float)(0.13 / v4) + (float)(powf(v4, -1.5) * 0.0072);
  float v8 = v6 * v7;
  int v9 = *(_DWORD *)(v3 + 96);
  int v10 = *(_DWORD *)(v3 + 64);
  float v11 = -v7;
  float v12 = expf(-(float)(v7 * *(float *)(v3 + 80)));
  *(float *)(v3 + 112) = v5;
  *(float *)(v3 + 128) = v8;
  *(_DWORD *)(v3 + 144) = v9;
  *(_DWORD *)(v3 + 160) = v10;
  *(float *)(v3 + 176) = v11;
  *(float *)(v3 + 192) = v12;
}

float32x4_t anonymous namespace'::RainBubbleSlice::Run(float32x4_t *a1, uint64_t a2, double a3, double a4, double a5, double a6, double a7, double a8, uint64_t a9, int a10)
{
  LODWORD(a8) = *(_DWORD *)(a2 + 8);
  float32x4_t v10 = a1[13];
  float32x4_t v11 = vaddq_f32(v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a8, 0));
  __asm { FMOV            V6.4S, #1.0 }
  float32x4_t v17 = vmulq_n_f32(vminnmq_f32(vmaxnmq_f32(vmulq_f32(a1[7], vmlaq_f32(_Q6, v11, a1[8])), _Q6), (float32x4_t)vdupq_n_s32(0x469C4000u)), *(float *)&a8);
  float32x4_t v18 = (float32x4_t)vdupq_n_s32(0x40490FDBu);
  float32x4_t v19 = vmulq_f32(v17, vmulq_f32(v17, v18));
  float32x4_t v20 = a1[15];
  float32x4_t v21 = vmulq_f32(v17, vmlaq_f32((float32x4_t)vdupq_n_s32(0x3F7FFFD5u), v18, vmulq_f32(v19, vmlaq_f32((float32x4_t)vdupq_n_s32(0xBE2AA6A7), v18, vmulq_f32(v19, vmlaq_f32((float32x4_t)vdupq_n_s32(0x3C08232Du), (float32x4_t)vdupq_n_s32(0xBA17D6C1), v19))))));
  float32x4_t v22 = vmulq_f32(v21, v18);
  float32x4_t v23 = vdivq_f32(v22, vsqrtq_f32(vmlaq_f32(_Q6, (float32x4_t)vdupq_n_s32(0xC0490FDB), vmulq_f32(v21, v22))));
  float32x4_t v24 = vnegq_f32(v23);
  float32x4_t v25 = vmlsq_f32(a1[14], v20, v23);
  float32x4_t v26 = vmlaq_f32(v20, v25, vdivq_f32(vaddq_f32(v23, v23), vmlaq_f32(_Q6, v23, v23)));
  HIDWORD(v27) = a10 - 1;
  LODWORD(v27) = a10 - 1;
  float32x4_t v28 = vmulq_f32(vmulq_f32(a1[11], v10), (float32x4_t)vdupq_n_s32(0x3FB8AA3Bu));
  float32x4_t v29 = vrndmq_f32(v28);
  float32x4_t v30 = vsubq_f32(v28, v29);
  float32x4_t v31 = vmulq_f32(vsubq_f32((float32x4_t)vandq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(vcvtq_s32_f32(v29), 0x17uLL), (int32x4_t)vmlaq_f32((float32x4_t)vdupq_n_s32(0x3F7FF3F4u), v30, vmlaq_f32((float32x4_t)vdupq_n_s32(0x3F3262B4u), v30, vmlaq_f32((float32x4_t)vdupq_n_s32(0x3E6585BCu), (float32x4_t)vdupq_n_s32(0x3DA1D752u), v30)))), (int8x16_t)vcgeq_f32(v28, (float32x4_t)vdupq_n_s32(0xC2FC0000))), a1[12]), vmulq_f32(a1[10], v26));
  int8x16_t v32 = vandq_s8((int8x16_t)v31, vorrq_s8((int8x16_t)vcltzq_f32(v31), (int8x16_t)vcgezq_f32(v31)));
  switch((v27 >> 1))
  {
    case 0u:
      goto LABEL_5;
    case 1u:
      goto LABEL_4;
    case 3u:
      goto LABEL_3;
    case 7u:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * a1[9].i32[3]) = v32.i32[3];
LABEL_3:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * a1[9].i32[2]) = v32.i32[2];
LABEL_4:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * a1[9].i32[1]) = v32.i32[1];
LABEL_5:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * a1[9].i32[0]) = v32.i32[0];
      break;
    default:
      break;
  }
  float32x4_t result = vmlaq_f32(v25, v26, v24);
  a1[13] = v11;
  a1[14] = result;
  a1[15] = v26;
  return result;
}

float anonymous namespace'::RainBubbleSlice::CopyVoiceState(_anonymous_namespace_::RainBubbleSlice *this, Phase::DspLayer::VoicePoolSlice *a2, unsigned int a3, unsigned int a4)
{
  float v4 = (_DWORD *)((char *)a2 + 4 * (int)a3);
  float v5 = (_DWORD *)((char *)this + 4 * (int)a4);
  v5[4] = v4[4];
  v5[8] = v4[8];
  v5[12] = v4[12];
  v5[16] = v4[16];
  v5[20] = v4[20];
  v5[24] = v4[24];
  v5[28] = v4[28];
  v5[32] = v4[32];
  v5[36] = v4[36];
  v5[40] = v4[40];
  v5[44] = v4[44];
  v5[48] = v4[48];
  if (a3 >= 4) {
    __assert_rtn("Copy", "DelaylineLinear.hpp", 507, "fromLane >= 0 && fromLane < PHASE_SIMD_WIDTH");
  }
  if (a4 >= 4) {
    __assert_rtn("Copy", "DelaylineLinear.hpp", 508, "toLane >= 0 && toLane < PHASE_SIMD_WIDTH");
  }
  float v6 = (char *)a2 + 4 * a3;
  float v7 = (char *)this + 4 * a4;
  *((_DWORD *)v7 + 52) = *((_DWORD *)v6 + 52);
  *((_DWORD *)v7 + 56) = *((_DWORD *)v6 + 56);
  float result = *((float *)v6 + 60);
  *((float *)v7 + 60) = result;
  *((void *)this + (int)a4 + 32) = *((void *)a2 + (int)a3 + 32);
  return result;
}

unint64_t anonymous namespace'::RainBubbleSlice::GetOutput(_anonymous_namespace_::RainBubbleSlice *this, int a2, int a3)
{
  if (a2) {
    return 0xFFFFFFFF00000008;
  }
  else {
    return (unint64_t)*((unsigned int *)this + a3 + 24) << 32;
  }
}

uint64_t anonymous namespace'::RainBubbleSlice::SetOutput(_anonymous_namespace_::RainBubbleSlice *this, int a2, int a3, int a4)
{
  if (a2) {
    return 8;
  }
  uint64_t result = 0;
  *((_DWORD *)this + a3 + 24) = a4;
  return result;
}

uint64_t Phase::DspLayer::RainImpulse::RainImpulse(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result = Phase::DspLayer::VoicePool::VoicePool(a1, (uint64_t)"RainImpulse", a2, a3, 192);
  *(void *)uint64_t result = &unk_26D47A200;
  if (*(int *)(result + 40) >= 1)
  {
    int v4 = 0;
    __asm { FMOV            V0.4S, #1.0 }
    do
    {
      uint64_t v10 = *(void *)(result + 32);
      uint64_t v11 = *(void *)(result + 24) + *(int *)(result + 16) * (uint64_t)v4;
      *(void *)uint64_t v11 = 0;
      *(void *)(v11 + 8) = 0;
      *(void *)uint64_t v11 = &unk_26D47A220;
      *(_OWORD *)(v11 + 16) = _Q0;
      *(_OWORD *)(v11 + 32) = _Q0;
      *(_OWORD *)(v11 + 48) = _Q0;
      *(_OWORD *)(v11 + 64) = 0uLL;
      *(void *)(v11 + 144) = 0;
      *(void *)(v11 + 152) = 0;
      float v12 = (const float *)(v10 + 8);
      float32x4_t v13 = vld1q_dup_f32(v12);
      *(float32x4_t *)(v11 + 80) = v13;
      *(_OWORD *)(v11 + 96) = 0uLL;
      *(_OWORD *)(v11 + 112) = _Q0;
      *(_OWORD *)(v11 + 128) = _Q0;
      *(_OWORD *)(v11 + 160) = 0uLL;
      *(_OWORD *)(v11 + 176) = 0uLL;
      ++v4;
    }
    while (v4 < *(_DWORD *)(result + 40));
  }
  return result;
}

void Phase::DspLayer::RainImpulse::~RainImpulse(Phase::DspLayer::RainImpulse *this)
{
  Phase::DspLayer::VoicePool::~VoicePool(this);

  JUMPOUT(0x223C938A0);
}

void anonymous namespace'::RainImpulseSlice::~RainImpulseSlice(_anonymous_namespace_::RainImpulseSlice *this)
{
}

double anonymous namespace'::RainImpulseSlice::Reset(uint64_t a1)
{
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)(a1 + 16) = _Q0;
  *(_OWORD *)(a1 + 32) = _Q0;
  *(_OWORD *)(a1 + 48) = _Q0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 48))(a1);
  double result = 0.0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  return result;
}

uint64_t anonymous namespace'::RainImpulseSlice::Reset(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  float v7 = (_DWORD *)(a1 + 4 * a3);
  v7[4] = 1065353216;
  v7[8] = 1065353216;
  v7[12] = 1065353216;
  v7[16] = 0;
  v7[36] = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  *(void *)(a1 + 8 * a3 + 160) = a4;
  return result;
}

uint64_t anonymous namespace'::RainImpulseSlice::GetParameter(_anonymous_namespace_::RainImpulseSlice *this, unsigned int a2)
{
  if (a2 > 2) {
    return 9;
  }
  else {
    return 0;
  }
}

uint64_t anonymous namespace'::RainImpulseSlice::SetParameter(_anonymous_namespace_::RainImpulseSlice *this, int a2, int a3, double a4)
{
  if (a2 == 2)
  {
    uint64_t result = 0;
    float v7 = a4;
    *((float *)this + a3 + 12) = v7;
  }
  else if (a2 == 1)
  {
    uint64_t result = 0;
    float v8 = a4;
    *((float *)this + a3 + 8) = v8;
  }
  else if (a2)
  {
    return 9;
  }
  else
  {
    uint64_t result = 0;
    float v6 = a4;
    *((float *)this + a3 + 4) = v6;
  }
  return result;
}

float32x4_t anonymous namespace'::RainImpulseSlice::UpdateParameters(uint64_t a1, uint64_t a2)
{
  float32x4_t v2 = (const float *)(a2 + 8);
  float32x4_t v3 = vld1q_dup_f32(v2);
  long long v4 = *(_OWORD *)(a1 + 32);
  float32x4_t result = vdivq_f32(v3, *(float32x4_t *)(a1 + 16));
  long long v7 = *(_OWORD *)(a1 + 48);
  long long v6 = *(_OWORD *)(a1 + 64);
  *(float32x4_t *)(a1 + 80) = result;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v4;
  return result;
}

float anonymous namespace'::RainImpulseSlice::UpdateParameters(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = a1 + 4 * a3;
  int v4 = *(_DWORD *)(v3 + 64);
  int v5 = *(_DWORD *)(v3 + 48);
  int v6 = *(_DWORD *)(v3 + 32);
  float result = *(float *)(a2 + 8) / *(float *)(v3 + 16);
  *(float *)(v3 + 80) = result;
  *(_DWORD *)(v3 + 96) = v4;
  *(_DWORD *)(v3 + 112) = v5;
  *(_DWORD *)(v3 + 128) = v6;
  return result;
}

float32x4_t anonymous namespace'::RainImpulseSlice::Run(float32x4_t *a1, uint64_t a2, uint64_t a3, int a4)
{
  float32x4_t v4 = a1[5];
  float32x4_t v5 = a1[9];
  HIDWORD(v6) = a4 - 1;
  LODWORD(v6) = a4 - 1;
  __asm
  {
    FMOV            V4.4S, #4.0
    FMOV            V5.4S, #1.0
  }
  int32x4_t v13 = (int32x4_t)vmulq_f32(vmulq_f32(v5, _Q4), vsubq_f32(_Q5, v5));
  v14.i64[0] = 0x7F0000007FLL;
  v14.i64[1] = 0x7F0000007FLL;
  float32x4_t v15 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v13, v14), (int8x16_t)_Q5);
  v14.i64[0] = 0x7E0000007ELL;
  v14.i64[1] = 0x7E0000007ELL;
  int8x16_t v16 = (int8x16_t)vaddq_f32(vmlaq_f32(vcvtq_f32_s32(vsraq_n_s32((int32x4_t)v14, v13, 0x17uLL)), v15, vmlaq_f32((float32x4_t)vdupq_n_s32(0x4040C0AEu), v15, vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF83D8C2), (float32x4_t)vdupq_n_s32(0x3E1DB454u), v15))), (float32x4_t)vdupq_n_s32(0xC0089A41));
  v14.i64[0] = 0x7F0000007FLL;
  v14.i64[1] = 0x7F0000007FLL;
  float32x4_t v17 = vmulq_f32(a1[8], (float32x4_t)vbslq_s8((int8x16_t)vcgtzq_s32(v13), v16, v14));
  float32x4_t v18 = vrndmq_f32(v17);
  float32x4_t v19 = vsubq_f32(v17, v18);
  float32x4_t v20 = vmulq_f32(a1[7], (float32x4_t)vandq_s8((int8x16_t)vaddq_s32(vshlq_n_s32(vcvtq_s32_f32(v18), 0x17uLL), (int32x4_t)vmlaq_f32((float32x4_t)vdupq_n_s32(0x3F7FF3F4u), v19, vmlaq_f32((float32x4_t)vdupq_n_s32(0x3F3262B4u), v19, vmlaq_f32((float32x4_t)vdupq_n_s32(0x3E6585BCu), (float32x4_t)vdupq_n_s32(0x3DA1D752u), v19)))), (int8x16_t)vcgeq_f32(v17, (float32x4_t)vdupq_n_s32(0xC2FC0000))));
  int8x16_t v21 = vandq_s8((int8x16_t)v20, vorrq_s8((int8x16_t)vcltzq_f32(v20), (int8x16_t)vcgezq_f32(v20)));
  switch((v6 >> 1))
  {
    case 0u:
      goto LABEL_5;
    case 1u:
      goto LABEL_4;
    case 3u:
      goto LABEL_3;
    case 7u:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * a1[6].i32[3]) = v21.i32[3];
LABEL_3:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * a1[6].i32[2]) = v21.i32[2];
LABEL_4:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * a1[6].i32[1]) = v21.i32[1];
LABEL_5:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * a1[6].i32[0]) = v21.i32[0];
      break;
    default:
      break;
  }
  float32x4_t result = vaddq_f32(v4, v5);
  a1[9] = result;
  return result;
}

float anonymous namespace'::RainImpulseSlice::CopyVoiceState(_anonymous_namespace_::RainImpulseSlice *this, Phase::DspLayer::VoicePoolSlice *a2, unsigned int a3, unsigned int a4)
{
  float32x4_t v4 = (_DWORD *)((char *)a2 + 4 * (int)a3);
  float32x4_t v5 = (_DWORD *)((char *)this + 4 * (int)a4);
  v5[4] = v4[4];
  v5[8] = v4[8];
  v5[12] = v4[12];
  v5[16] = v4[16];
  v5[20] = v4[20];
  v5[24] = v4[24];
  v5[28] = v4[28];
  v5[32] = v4[32];
  if (a3 >= 4) {
    __assert_rtn("Copy", "DelaylineLinear.hpp", 507, "fromLane >= 0 && fromLane < PHASE_SIMD_WIDTH");
  }
  if (a4 >= 4) {
    __assert_rtn("Copy", "DelaylineLinear.hpp", 508, "toLane >= 0 && toLane < PHASE_SIMD_WIDTH");
  }
  float result = *((float *)a2 + a3 + 36);
  *((float *)this + a4 + 36) = result;
  *((void *)this + (int)a4 + 20) = *((void *)a2 + (int)a3 + 20);
  return result;
}

unint64_t anonymous namespace'::RainImpulseSlice::GetOutput(_anonymous_namespace_::RainImpulseSlice *this, int a2, int a3)
{
  if (a2) {
    return 0xFFFFFFFF00000008;
  }
  else {
    return (unint64_t)*((unsigned int *)this + a3 + 16) << 32;
  }
}

uint64_t anonymous namespace'::RainImpulseSlice::SetOutput(_anonymous_namespace_::RainImpulseSlice *this, int a2, int a3, int a4)
{
  if (a2) {
    return 8;
  }
  uint64_t result = 0;
  *((_DWORD *)this + a3 + 16) = a4;
  return result;
}

Phase::SpatialModeler::RayTracerState *Phase::SpatialModeler::RayTracerState::RayTracerState(Phase::SpatialModeler::RayTracerState *this, const Phase::SpatialModeler::RayTracerState *a2)
{
  *(_OWORD *)((char *)this + 8) = xmmword_2220A5940;
  float32x4_t v4 = (char *)this + 23664;
  *(_OWORD *)((char *)this + 24) = xmmword_2220A5950;
  float32x4_t v5 = (char *)this + 22568;
  unint64_t v6 = (char *)this + 19416;
  *(_OWORD *)((char *)this + 40) = xmmword_2220A5960;
  *((int32x2_t *)this + 7) = vdup_n_s32(0x3E4CCCCDu);
  *((void *)this + 8) = 0x800000000100;
  *((unsigned char *)this + 72) = 0;
  *((_DWORD *)this + 19) = 1000593162;
  *((_OWORD *)this + 5) = xmmword_2220A5970;
  *((void *)this + 12) = 1000;
  *(_OWORD *)((char *)this + 104) = xmmword_2220A5980;
  *((void *)this + 15) = 0x4040000040800000;
  *((_DWORD *)this + 32) = 1167867904;
  *((_DWORD *)this + 33) = 0x1000000;
  *(_OWORD *)((char *)this + 136) = xmmword_2220A5990;
  *((_DWORD *)this + 38) = 4;
  *((unsigned char *)this + 156) = 1;
  *((void *)this + 20) = 0xC2700000C1D00000;
  *((_DWORD *)this + 42) = 16777473;
  *(void *)((char *)this + 172) = 0x4E20000003E8;
  *((unsigned char *)this + 180) = 1;
  *((void *)this + 23) = 0x430300003DDB22D1;
  *((_DWORD *)this + 48) = 256;
  *((_OWORD *)this + 13) = 0u;
  __dst = (char *)this + 208;
  *((_OWORD *)this + 27) = 0u;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_DWORD *)this + 116) = 1135312896;
  *((void *)this + 59) = 0;
  *((_DWORD *)this + 120) = 1065353216;
  long long v7 = (char *)this + 496;
  *((_DWORD *)this + 4756) = 0;
  *((_OWORD *)this + 1188) = 0u;
  *((_OWORD *)this + 1190) = 0u;
  *((_OWORD *)this + 1191) = 0u;
  *((_OWORD *)this + 1192) = 0u;
  *((_OWORD *)this + 1193) = 0u;
  *((_OWORD *)this + 1194) = 0u;
  *((_OWORD *)this + 1195) = 0u;
  *((_OWORD *)this + 1196) = 0u;
  *((_OWORD *)this + 1197) = 0u;
  *((_OWORD *)this + 1198) = 0u;
  *((_OWORD *)this + 1199) = 0u;
  *((_OWORD *)this + 1200) = 0u;
  *((_OWORD *)this + 1201) = 0u;
  *((_OWORD *)this + 1202) = 0u;
  *((_OWORD *)this + 1203) = 0u;
  *((_OWORD *)this + 1204) = 0u;
  *((_OWORD *)this + 1205) = 0u;
  *((_OWORD *)this + 1206) = 0u;
  *((_OWORD *)this + 1207) = 0u;
  *((_OWORD *)this + 1208) = 0u;
  *((_OWORD *)this + 1209) = 0u;
  bzero((char *)this + 496, 0x4848uLL);
  *((void *)this + 2422) = 0;
  *((void *)this + 2421) = 0;
  *(_OWORD *)((char *)this + 19384) = 0u;
  *((void *)this + 2420) = (char *)this + 19368;
  *(_OWORD *)((char *)this + 19400) = 0u;
  *(_DWORD *)unint64_t v6 = 1065353216;
  *((_OWORD *)this + 1214) = 0u;
  *((_OWORD *)this + 1215) = 0u;
  *((_DWORD *)v6 + 10) = 1065353216;
  *(_OWORD *)((char *)this + 19464) = 0u;
  *(_OWORD *)((char *)this + 19480) = 0u;
  *((_DWORD *)v6 + 20) = 1065353216;
  *((void *)this + 2438) = 0;
  *((_DWORD *)v6 + 24) = 0;
  *((void *)this + 2621) = 0;
  *((void *)this + 2620) = 0;
  bzero((char *)this + 19520, 0x598uLL);
  *((void *)this + 2619) = (char *)this + 20960;
  *((_OWORD *)this + 1311) = 0u;
  *((_OWORD *)this + 1312) = 0u;
  *((void *)this + 2679) = 0;
  *((_DWORD *)v6 + 506) = 0;
  *((_DWORD *)v6 + 508) = 0;
  v6[2036] = 0;
  *((void *)this + 2682) = 0;
  *(void *)((char *)this + 22164) = 0;
  bzero((char *)this + 21472, 0x2A4uLL);
  *((void *)this + 2812) = 0;
  *((void *)this + 2811) = 0;
  *(_OWORD *)((char *)this + 21032) = 0u;
  *(_OWORD *)((char *)this + 21048) = 0u;
  *(_OWORD *)((char *)this + 21064) = 0u;
  *(_OWORD *)((char *)this + 21080) = 0u;
  *(_OWORD *)((char *)this + 21096) = 0u;
  *(_OWORD *)((char *)this + 21112) = 0u;
  *(_OWORD *)((char *)this + 21128) = 0u;
  *(_OWORD *)((char *)this + 21144) = 0u;
  *(_OWORD *)((char *)this + 21160) = 0u;
  *(_OWORD *)((char *)this + 21176) = 0u;
  *(_OWORD *)((char *)this + 21192) = 0u;
  *(_OWORD *)((char *)this + 21208) = 0u;
  *(_OWORD *)((char *)this + 21224) = 0u;
  *(_OWORD *)((char *)this + 21240) = 0u;
  *(_OWORD *)((char *)this + 21256) = 0u;
  *(_OWORD *)((char *)this + 21272) = 0u;
  *(_OWORD *)((char *)this + 21288) = 0u;
  *(_OWORD *)((char *)this + 21304) = 0u;
  *(_OWORD *)((char *)this + 21320) = 0u;
  *(_OWORD *)((char *)this + 21336) = 0u;
  *(_OWORD *)((char *)this + 21352) = 0u;
  *(_OWORD *)((char *)this + 21368) = 0u;
  *(_OWORD *)((char *)this + 21384) = 0u;
  *(_OWORD *)((char *)this + 21400) = 0u;
  *((void *)this + 2677) = 0;
  *((void *)this + 2810) = (char *)this + 22488;
  *((void *)this + 2815) = 0;
  *((void *)this + 2814) = 0;
  *((void *)this + 2813) = (char *)this + 22512;
  v6[3112] = 1;
  *((_DWORD *)v6 + 779) = 1097859072;
  *(void *)&long long v8 = 0x101010101010101;
  *((void *)&v8 + 1) = 0x101010101010101;
  *(_OWORD *)((char *)this + 22536) = v8;
  *(_OWORD *)((char *)this + 22552) = v8;
  *(_DWORD *)float32x4_t v5 = 2;
  *((void *)this + 2823) = 0;
  *((void *)this + 2822) = 0;
  *((_DWORD *)v5 + 6) = 0;
  *(void *)(v5 + 28) = 1065353216;
  *(void *)(v5 + 36) = 0;
  *(_OWORD *)(v5 + 44) = xmmword_2220A59A0;
  *(void *)(v5 + 60) = 1065353216;
  *(void *)(v5 + 68) = 0;
  *((_DWORD *)v5 + 19) = 1065353216;
  v5[80] = 0;
  *((void *)this + 2838) = 0;
  *((_OWORD *)this + 1418) = 0u;
  *((_OWORD *)this + 1417) = 0u;
  *((_OWORD *)this + 1416) = 0u;
  *((void *)this + 2839) = 0xFFFFFFFFLL;
  *((void *)this + 2840) = 0x3FB999999999999ALL;
  *((_DWORD *)v5 + 40) = 0;
  *(void *)(v5 + 164) = 0;
  *((void *)this + 2843) = 0x3FF0000000000000;
  *((_OWORD *)this + 1422) = 0u;
  *((_OWORD *)this + 1423) = 0u;
  *((_DWORD *)v5 + 54) = 0;
  *(void *)(v5 + 220) = 1065353216;
  *(void *)(v5 + 228) = 0;
  *((_DWORD *)v5 + 59) = 1065353216;
  *(_OWORD *)((char *)this + 22808) = 0u;
  *(_OWORD *)((char *)this + 22824) = 0u;
  *(_OWORD *)((char *)this + 22840) = 0u;
  *(_OWORD *)((char *)this + 22856) = 0u;
  *(_OWORD *)((char *)this + 22870) = 0u;
  *((_OWORD *)this + 1446) = 0u;
  *((_OWORD *)this + 1445) = 0u;
  *((_OWORD *)this + 1444) = 0u;
  *((_OWORD *)this + 1443) = 0u;
  *((_OWORD *)this + 1442) = 0u;
  *((_OWORD *)this + 1441) = 0u;
  *((_OWORD *)this + 1440) = 0u;
  *((_OWORD *)this + 1439) = 0u;
  *((_OWORD *)this + 1438) = 0u;
  *((_OWORD *)this + 1437) = 0u;
  *((_OWORD *)this + 1436) = 0u;
  *((_OWORD *)this + 1435) = 0u;
  *((_OWORD *)this + 1434) = 0u;
  *((_OWORD *)this + 1433) = 0u;
  *((_OWORD *)this + 1432) = 0u;
  *((_OWORD *)this + 1431) = 0u;
  *((_DWORD *)v5 + 146) = 1;
  *((void *)this + 2896) = 0;
  *((_DWORD *)v5 + 152) = 1065353216;
  *((void *)this + 2905) = 0;
  *((void *)this + 2904) = 0;
  *((void *)this + 2906) = 0;
  *((void *)this + 2910) = 0;
  *((void *)this + 2909) = 0;
  *((void *)this + 2911) = 0;
  *((void *)this + 2914) = 0;
  *((void *)this + 2913) = 0;
  *((void *)this + 2915) = 0;
  *(_OWORD *)((char *)this + 23416) = 0u;
  *(_OWORD *)((char *)this + 23400) = 0u;
  *(_OWORD *)((char *)this + 23384) = 0u;
  *(_OWORD *)((char *)this + 23368) = 0u;
  *(_OWORD *)((char *)this + 23352) = 0u;
  *(_OWORD *)((char *)this + 23336) = 0u;
  *((_OWORD *)this + 1470) = 0u;
  *((_OWORD *)this + 1469) = 0u;
  *((_OWORD *)this + 1468) = 0u;
  *((_OWORD *)this + 1467) = 0u;
  *((_OWORD *)this + 1466) = 0u;
  *((_OWORD *)this + 1465) = 0u;
  *((_OWORD *)this + 1477) = 0u;
  *((_OWORD *)this + 1476) = 0u;
  *((_OWORD *)this + 1475) = 0u;
  *((_OWORD *)this + 1474) = 0u;
  *((_OWORD *)this + 1473) = 0u;
  *((_OWORD *)this + 1472) = 0u;
  char *v4 = 0;
  *((void *)this + 2902) = 0;
  *((_OWORD *)this + 1450) = 0u;
  *((_OWORD *)this + 1449) = 0u;
  int32x4_t v9 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v4 + 4) = v9;
  *(int32x4_t *)(v4 + 20) = v9;
  *(int32x4_t *)(v4 + 36) = v9;
  *(int32x4_t *)(v4 + 52) = v9;
  *(void *)(v4 + 68) = v9.i64[0];
  bzero((char *)this + 23744, 0x508uLL);
  *((_WORD *)v4 + 688) = 0;
  *((void *)this + 3131) = 0;
  *(void *)this = *(void *)a2;
  long long v10 = *(_OWORD *)((char *)a2 + 8);
  long long v11 = *(_OWORD *)((char *)a2 + 24);
  *((void *)this + 5) = *((void *)a2 + 5);
  *(_OWORD *)((char *)this + 24) = v11;
  *(_OWORD *)((char *)this + 8) = v10;
  long long v12 = *((_OWORD *)a2 + 8);
  long long v14 = *((_OWORD *)a2 + 5);
  long long v13 = *((_OWORD *)a2 + 6);
  *((_OWORD *)this + 7) = *((_OWORD *)a2 + 7);
  *((_OWORD *)this + 8) = v12;
  *((_OWORD *)this + 5) = v14;
  *((_OWORD *)this + 6) = v13;
  long long v16 = *((_OWORD *)a2 + 10);
  long long v15 = *((_OWORD *)a2 + 11);
  long long v17 = *((_OWORD *)a2 + 9);
  *((_DWORD *)this + 48) = *((_DWORD *)a2 + 48);
  *((_OWORD *)this + 10) = v16;
  *((_OWORD *)this + 11) = v15;
  *((_OWORD *)this + 9) = v17;
  long long v18 = *((_OWORD *)a2 + 4);
  *((_OWORD *)this + 3) = *((_OWORD *)a2 + 3);
  *((_OWORD *)this + 4) = v18;
  Phase::SpatialModeler::RayTracerState::State::operator=((uint64_t)v7, (uint64_t)a2 + 496);
  memcpy(__dst, (char *)a2 + 208, 0x114uLL);
  std::__tree<std::__value_type<unsigned long long,Phase::SpatialModeler::SourceListenerResult>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Phase::SpatialModeler::SourceListenerResult>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Phase::SpatialModeler::SourceListenerResult>>>::destroy((uint64_t)this + 19360, *((void **)this + 2421));
  *((void *)this + 2420) = (char *)this + 19368;
  *(_OWORD *)((char *)this + 19368) = 0u;
  std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>>>::clear((uint64_t)this + 19384);
  std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>>>::clear((uint64_t)this + 19424);
  Phase::SpatialModeler::RayTracerState::CopySourceListenerResults(this, a2);
  Phase::SpatialModeler::RayTracerState::CopyERClusteringResults(this, *((const Phase::SpatialModeler::RayTracerState **)a2 + 2425));
  Phase::SpatialModeler::RayTracerState::CopyLRClusteringResults(this, *((const Phase::SpatialModeler::RayTracerState **)a2 + 2430));
  Phase::SpatialModeler::RayTracerState::CopyRoomStatResults(this, a2);
  long long v19 = *((_OWORD *)a2 + 1315);
  long long v20 = *((_OWORD *)a2 + 1316);
  long long v21 = *((_OWORD *)a2 + 1318);
  *((_OWORD *)this + 1317) = *((_OWORD *)a2 + 1317);
  *((_OWORD *)this + 1318) = v21;
  *((_OWORD *)this + 1315) = v19;
  *((_OWORD *)this + 1316) = v20;
  long long v22 = *((_OWORD *)a2 + 1319);
  long long v23 = *((_OWORD *)a2 + 1320);
  long long v24 = *((_OWORD *)a2 + 1322);
  *((_OWORD *)this + 1321) = *((_OWORD *)a2 + 1321);
  *((_OWORD *)this + 1322) = v24;
  *((_OWORD *)this + 1319) = v22;
  *((_OWORD *)this + 1320) = v23;
  uint64_t v25 = *((void *)a2 + 2679);
  *((_DWORD *)this + 5360) = *((_DWORD *)a2 + 5360);
  *((void *)this + 2679) = v25;
  *((_OWORD *)v6 + 127) = *(_OWORD *)((char *)a2 + 21448);
  Phase::Geometry::Listener::operator=((uint64_t)v5, (uint64_t)a2 + 22568);
  *((void *)this + 2846) = *((void *)a2 + 2846);
  *((_DWORD *)v5 + 52) = *((_DWORD *)a2 + 5694);
  *((_DWORD *)v5 + 53) = *((_DWORD *)a2 + 5695);
  *((_DWORD *)v5 + 54) = *((_DWORD *)a2 + 5696);
  *((_DWORD *)v5 + 55) = *((_DWORD *)a2 + 5697);
  *((_DWORD *)v5 + 56) = *((_DWORD *)a2 + 5698);
  *((_DWORD *)v5 + 57) = *((_DWORD *)a2 + 5699);
  *((_DWORD *)v5 + 58) = *((_DWORD *)a2 + 5700);
  *((_DWORD *)v5 + 59) = *((_DWORD *)a2 + 5701);
  Phase::SpatialModeler::ImportanceSampling::operator=((void **)this + 2896, (uint64_t)a2 + 23168);
  Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView::operator=((uint64_t)this + 23200, (uint64_t)a2 + 23200);
  *((_WORD *)v4 + 688) = *((_WORD *)a2 + 12520);
  *((void *)this + 3131) = *((void *)a2 + 3131);
  if (this != a2)
  {
    std::__tree<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::__tree_node<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,void *> *,long>>((uint64_t **)this + 2810, *((void **)a2 + 2810), (void *)a2 + 2811);
    std::__tree<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::__tree_node<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,void *> *,long>>((uint64_t **)this + 2813, *((void **)a2 + 2813), (void *)a2 + 2814);
  }
  long long v26 = *((_OWORD *)a2 + 1408);
  long long v27 = *((_OWORD *)a2 + 1409);
  *((void *)v6 + 393) = *((void *)a2 + 2820);
  *(_OWORD *)(v6 + 3112) = v26;
  *(_OWORD *)(v6 + 3128) = v27;
  return this;
}

void sub_222036014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, Phase::SpatialModeler::RayTracerState::State *a9, Phase::SpatialModeler::RendererStates *a10)
{
  Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView::~RoomSimulationDebugView(v13);
  Phase::SpatialModeler::ImportanceSampling::~ImportanceSampling(v12);
  Phase::Geometry::Listener::~Listener(v10);
  Phase::SpatialModeler::RendererStates::~RendererStates(a10);
  Phase::SpatialModeler::RayTracerState::Results::~Results(v11);
  Phase::SpatialModeler::RayTracerState::State::~State(a9);
  _Unwind_Resume(a1);
}

void Phase::SpatialModeler::RayTracerState::CopySourceListenerResults(Phase::SpatialModeler::RayTracerState *this, const Phase::SpatialModeler::RayTracerState *a2)
{
  float32x4_t v2 = (char *)*((void *)a2 + 2420);
  uint64_t v3 = (char *)a2 + 19368;
  if (v2 != (char *)a2 + 19368)
  {
    float32x4_t v5 = (uint64_t **)((char *)this + 19360);
    do
    {
      unint64_t v6 = *((void *)v2 + 4);
      long long v7 = (const Phase::SpatialModeler::EarlyReflectionDetector *)*((void *)v2 + 5);
      v19[0] = v6;
      v19[1] = v7;
      long long v8 = (std::__shared_weak_count *)*((void *)v2 + 6);
      v19[2] = v8;
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v9 = *((void *)v2 + 7);
      long long v10 = (std::__shared_weak_count *)*((void *)v2 + 8);
      v20[0] = v9;
      v20[1] = (uint64_t)v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v11 = *((_DWORD *)v2 + 18);
      int v21 = v11;
      long long v12 = std::__tree<std::__value_type<unsigned long long,Phase::SpatialModeler::SourceListenerResult>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Phase::SpatialModeler::SourceListenerResult>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Phase::SpatialModeler::SourceListenerResult>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v5, v6, v19);
      if (v7)
      {
        std::allocate_shared[abi:ne180100]<Phase::SpatialModeler::EarlyReflectionDetector,std::allocator<Phase::SpatialModeler::EarlyReflectionDetector>,Phase::SpatialModeler::EarlyReflectionDetector&,void>((Phase::SpatialModeler::EarlyReflectionDetector **)&v18, v7);
        long long v13 = (std::__shared_weak_count *)v12[6];
        *(_OWORD *)(v12 + 5) = v18;
        if (v13) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v13);
        }
      }
      if (v9)
      {
        Phase::SpatialModeler::RayTracerState::CopyDirectivityHistogram(this, v20, &v18);
        long long v14 = (std::__shared_weak_count *)v12[8];
        *(_OWORD *)(v12 + 7) = v18;
        if (v14) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v14);
        }
      }
      *((_DWORD *)v12 + 18) = v11;
      if (v10) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      }
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
      long long v15 = (char *)*((void *)v2 + 1);
      if (v15)
      {
        do
        {
          long long v16 = v15;
          long long v15 = *(char **)v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          long long v16 = (char *)*((void *)v2 + 2);
          BOOL v17 = *(void *)v16 == (void)v2;
          float32x4_t v2 = v16;
        }
        while (!v17);
      }
      float32x4_t v2 = v16;
    }
    while (v16 != v3);
  }
}

void sub_2220361B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::pair<unsigned long long const,Phase::SpatialModeler::SourceListenerResult>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 Phase::SpatialModeler::RayTracerState::CopyERClusteringResults(Phase::SpatialModeler::RayTracerState *this, const Phase::SpatialModeler::RayTracerState *a2)
{
  if (a2)
  {
    float32x4_t v2 = a2;
    uint64_t v3 = (char *)this + 19384;
    do
    {
      unint64_t v6 = (void *)((char *)v2 + 16);
      float32x4_t v4 = (__n128 *)std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v3, (unint64_t *)v2 + 2, (uint64_t)&std::piecewise_construct, &v6);
      if (*((void *)v2 + 21)) {
        Phase::SpatialModeler::CopyMetadata<float>((uint64_t)v2 + 64, (uint64_t)&v4[4]);
      }
      if (v2 != (const Phase::SpatialModeler::RayTracerState *)v4)
      {
        v4[3].n128_u32[2] = *((_DWORD *)v2 + 14);
        std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,void *> *>>(&v4[1].n128_u64[1], *((uint64_t **)v2 + 5), 0);
      }
      __n128 result = *((__n128 *)v2 + 17);
      v4[17] = result;
      float32x4_t v2 = *(const Phase::SpatialModeler::RayTracerState **)v2;
    }
    while (v2);
  }
  return result;
}

float Phase::SpatialModeler::RayTracerState::CopyLRClusteringResults(Phase::SpatialModeler::RayTracerState *this, const Phase::SpatialModeler::RayTracerState *a2)
{
  if (a2)
  {
    float32x4_t v2 = a2;
    float32x4_t v4 = (char *)this + 19424;
    do
    {
      *(void *)&long long v8 = (char *)v2 + 16;
      float32x4_t v5 = (const Phase::SpatialModeler::RayTracerState *)std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v4, (unint64_t *)v2 + 2, (uint64_t)&std::piecewise_construct, (void **)&v8);
      if (*((void *)v2 + 8))
      {
        Phase::SpatialModeler::RayTracerState::CopyDirectivityHistogram(this, (uint64_t *)v2 + 8, &v8);
        unint64_t v6 = (std::__shared_weak_count *)*((void *)v5 + 9);
        *((_OWORD *)v5 + 4) = v8;
        if (v6) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v6);
        }
      }
      if (v2 != v5)
      {
        *((_DWORD *)v5 + 14) = *((_DWORD *)v2 + 14);
        std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,void *> *>>((void *)v5 + 3, *((uint64_t **)v2 + 5), 0);
      }
      *(_OWORD *)((char *)v5 + 88) = *(_OWORD *)((char *)v2 + 88);
      float result = *((float *)v2 + 20);
      *((float *)v5 + 20) = result;
      float32x4_t v2 = *(const Phase::SpatialModeler::RayTracerState **)v2;
    }
    while (v2);
  }
  return result;
}

float Phase::SpatialModeler::RayTracerState::CopyRoomStatResults(Phase::SpatialModeler::RayTracerState *this, const Phase::SpatialModeler::RayTracerState *a2)
{
  float32x4_t v4 = (char *)this + 20976;
  float32x4_t v5 = (char *)a2 + 20976;
  memcpy((char *)this + 19504, (char *)a2 + 19504, 0x590uLL);
  if (this != a2)
  {
    std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)this + 20928, *((char **)a2 + 2616), *((void *)a2 + 2617), (uint64_t)(*((void *)a2 + 2617) - *((void *)a2 + 2616)) >> 2);
    long long v6 = *((_OWORD *)a2 + 1315);
    long long v7 = *((_OWORD *)a2 + 1316);
    long long v8 = *((_OWORD *)a2 + 1317);
    *((_OWORD *)this + 1318) = *((_OWORD *)a2 + 1318);
    *((_OWORD *)this + 1317) = v8;
    *((_OWORD *)this + 1316) = v7;
    *((_OWORD *)this + 1315) = v6;
    long long v9 = *((_OWORD *)a2 + 1319);
    long long v10 = *((_OWORD *)a2 + 1320);
    long long v11 = *((_OWORD *)a2 + 1321);
    *((_OWORD *)this + 1322) = *((_OWORD *)a2 + 1322);
    *((_OWORD *)this + 1321) = v11;
    *((_OWORD *)this + 1320) = v10;
    *((_OWORD *)this + 1319) = v9;
    uint64_t v12 = *((void *)a2 + 2679);
    *((_DWORD *)this + 5360) = *((_DWORD *)a2 + 5360);
    *((void *)this + 2679) = v12;
    *(_OWORD *)((char *)this + 21448) = *(_OWORD *)((char *)a2 + 21448);
    long long v13 = (char *)*((void *)a2 + 2619);
    long long v14 = (char *)a2 + 20960;
    if (*((void *)this + 2621))
    {
      uint64_t v15 = *((void *)this + 2619);
      long long v16 = (uint64_t **)((char *)this + 20960);
      *((void *)this + 2619) = (char *)this + 20960;
      *(void *)(*((void *)this + 2620) + 16) = 0;
      *((void *)this + 2621) = 0;
      *((void *)this + 2620) = 0;
      if (*(void *)(v15 + 8)) {
        uint64_t v17 = *(void *)(v15 + 8);
      }
      else {
        uint64_t v17 = v15;
      }
      if (v17)
      {
        float64x2_t v37 = v5;
        long long v18 = std::__tree<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>>>::_DetachedTreeCache::__detach_next(v17);
        float64x2_t v38 = v4;
        if (v13 == v14)
        {
          long long v20 = (void *)v17;
        }
        else
        {
          long long v19 = v13;
          do
          {
            long long v20 = v18;
            unint64_t v21 = *((void *)v19 + 4);
            *(void *)(v17 + 32) = v21;
            *(_DWORD *)(v17 + 40) = *((_DWORD *)v19 + 10);
            long long v22 = *v16;
            long long v23 = (uint64_t **)((char *)this + 20960);
            long long v24 = (uint64_t **)((char *)this + 20960);
            if (*v16)
            {
              do
              {
                while (1)
                {
                  long long v23 = (uint64_t **)v22;
                  if (v21 >= v22[4]) {
                    break;
                  }
                  long long v22 = (uint64_t *)*v22;
                  long long v24 = v23;
                  if (!*v23) {
                    goto LABEL_15;
                  }
                }
                long long v22 = (uint64_t *)v22[1];
              }
              while (v22);
              long long v24 = v23 + 1;
            }
LABEL_15:
            std::__tree<Phase::SpatialCategory>::__insert_node_at((uint64_t **)this + 2619, (uint64_t)v23, v24, (uint64_t *)v17);
            if (v18) {
              long long v18 = std::__tree<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>>>::_DetachedTreeCache::__detach_next((uint64_t)v18);
            }
            else {
              long long v18 = 0;
            }
            uint64_t v25 = (char *)*((void *)v19 + 1);
            if (v25)
            {
              do
              {
                long long v13 = v25;
                uint64_t v25 = *(char **)v25;
              }
              while (v25);
            }
            else
            {
              do
              {
                long long v13 = (char *)*((void *)v19 + 2);
                BOOL v26 = *(void *)v13 == (void)v19;
                long long v19 = v13;
              }
              while (!v26);
            }
            if (!v20) {
              break;
            }
            uint64_t v17 = (uint64_t)v20;
            long long v19 = v13;
          }
          while (v13 != v14);
        }
        std::__tree<Phase::SpatialCategory>::destroy((uint64_t)this + 20952, v20);
        if (v18)
        {
          for (uint64_t i = (void *)v18[2]; i; uint64_t i = (void *)i[2])
            long long v18 = i;
          std::__tree<Phase::SpatialCategory>::destroy((uint64_t)this + 20952, v18);
        }
        float32x4_t v5 = v37;
        float32x4_t v4 = v38;
      }
      else
      {
        std::__tree<Phase::SpatialCategory>::destroy((uint64_t)this + 20952, 0);
      }
    }
    if (v13 != v14)
    {
      float32x4_t v28 = (uint64_t **)((char *)this + 20960);
      do
      {
        float32x4_t v29 = operator new(0x30uLL);
        v29[2] = *((_OWORD *)v13 + 2);
        float32x4_t v30 = *v28;
        float32x4_t v31 = (uint64_t **)((char *)this + 20960);
        int8x16_t v32 = (uint64_t **)((char *)this + 20960);
        if (*v28)
        {
          do
          {
            while (1)
            {
              float32x4_t v31 = (uint64_t **)v30;
              if (*((void *)v29 + 4) >= (unint64_t)v30[4]) {
                break;
              }
              float32x4_t v30 = (uint64_t *)*v30;
              int8x16_t v32 = v31;
              if (!*v31) {
                goto LABEL_41;
              }
            }
            float32x4_t v30 = (uint64_t *)v30[1];
          }
          while (v30);
          int8x16_t v32 = v31 + 1;
        }
LABEL_41:
        std::__tree<Phase::SpatialCategory>::__insert_node_at((uint64_t **)this + 2619, (uint64_t)v31, v32, (uint64_t *)v29);
        float64x2_t v33 = (char *)*((void *)v13 + 1);
        if (v33)
        {
          do
          {
            int32x4_t v34 = v33;
            float64x2_t v33 = *(char **)v33;
          }
          while (v33);
        }
        else
        {
          do
          {
            int32x4_t v34 = (char *)*((void *)v13 + 2);
            BOOL v26 = *(void *)v34 == (void)v13;
            long long v13 = v34;
          }
          while (!v26);
        }
        long long v13 = v34;
      }
      while (v34 != v14);
    }
  }
  *(_DWORD *)float32x4_t v4 = *(_DWORD *)v5;
  *((_DWORD *)v4 + 1) = *((_DWORD *)v5 + 1);
  *((_DWORD *)v4 + 2) = *((_DWORD *)v5 + 2);
  *((_DWORD *)v4 + 3) = *((_DWORD *)v5 + 3);
  *((_DWORD *)v4 + 4) = *((_DWORD *)v5 + 4);
  *((_DWORD *)v4 + 5) = *((_DWORD *)v5 + 5);
  long long v35 = *(_OWORD *)((char *)a2 + 21016);
  *(_OWORD *)((char *)this + 21000) = *(_OWORD *)((char *)a2 + 21000);
  *(_OWORD *)((char *)this + 21016) = v35;
  *((_DWORD *)v4 + 14) = *((_DWORD *)v5 + 14);
  float result = *((float *)v5 + 15);
  *((float *)v4 + 15) = result;
  return result;
}

void Phase::SpatialModeler::RayTracerState::~RayTracerState(void **this)
{
  Phase::SpatialModeler::RayTracerState::FreeSourceListenerResultsDirectivityHistograms((Phase::SpatialModeler::RayTracerState *)this);
  Phase::SpatialModeler::RayTracerState::FreeLRClusteringResultsDirectivityHistograms((Phase::SpatialModeler::RayTracerState *)this);
  Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView::~RoomSimulationDebugView((Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)(this + 2900));
  free(this[2898]);
  free(this[2899]);
  float32x4_t v2 = this[2836];
  if (v2)
  {
    this[2837] = v2;
    operator delete(v2);
  }
  uint64_t v3 = this[2833];
  if (v3)
  {
    this[2834] = v3;
    operator delete(v3);
  }
  std::__tree<Phase::SpatialCategory>::destroy((uint64_t)(this + 2813), this[2814]);
  std::__tree<Phase::SpatialCategory>::destroy((uint64_t)(this + 2810), this[2811]);
  std::__tree<Phase::SpatialCategory>::destroy((uint64_t)(this + 2619), this[2620]);
  float32x4_t v4 = this[2616];
  if (v4)
  {
    this[2617] = v4;
    operator delete(v4);
  }
  std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>>>::~__hash_table((uint64_t)(this + 2433));
  std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>>>::~__hash_table((uint64_t)(this + 2428));
  std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>>>::~__hash_table((uint64_t)(this + 2423));
  std::__tree<std::__value_type<unsigned long long,Phase::SpatialModeler::SourceListenerResult>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Phase::SpatialModeler::SourceListenerResult>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Phase::SpatialModeler::SourceListenerResult>>>::destroy((uint64_t)(this + 2420), this[2421]);
  float32x4_t v5 = this[2372];
  if (v5)
  {
    this[2373] = v5;
    operator delete(v5);
  }
  long long v6 = this[2369];
  if (v6)
  {
    this[2370] = v6;
    operator delete(v6);
  }
  long long v7 = this[2366];
  if (v7)
  {
    this[2367] = v7;
    operator delete(v7);
  }
}

void Phase::SpatialModeler::RayTracerState::FreeSourceListenerResultsDirectivityHistograms(Phase::SpatialModeler::RayTracerState *this)
{
  if (*(void *)this)
  {
    float32x4_t v2 = (char *)*((void *)this + 2420);
    uint64_t v3 = (char *)this + 19368;
    if (v2 != (char *)this + 19368)
    {
      do
      {
        if (*((void *)v2 + 7)) {
          Phase::SpatialModeler::RayTracerState::FreeDirectivityHistogram(this, (void *)v2 + 7);
        }
        float32x4_t v4 = (char *)*((void *)v2 + 1);
        if (v4)
        {
          do
          {
            float32x4_t v5 = v4;
            float32x4_t v4 = *(char **)v4;
          }
          while (v4);
        }
        else
        {
          do
          {
            float32x4_t v5 = (char *)*((void *)v2 + 2);
            BOOL v6 = *(void *)v5 == (void)v2;
            float32x4_t v2 = v5;
          }
          while (!v6);
        }
        float32x4_t v2 = v5;
      }
      while (v5 != v3);
    }
  }
}

void Phase::SpatialModeler::RayTracerState::FreeLRClusteringResultsDirectivityHistograms(Phase::SpatialModeler::RayTracerState *this)
{
  if (*(void *)this)
  {
    for (uint64_t i = (void *)*((void *)this + 2430); i; uint64_t i = (void *)*i)
    {
      if (i[8]) {
        Phase::SpatialModeler::RayTracerState::FreeDirectivityHistogram(this, i + 8);
      }
    }
  }
}

uint64_t Phase::SpatialModeler::RayTracerState::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 22776;
  uint64_t v5 = a2 + 22776;
  *(void *)a1 = *(void *)a2;
  long long v6 = *(_OWORD *)(a2 + 8);
  long long v7 = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v7;
  *(_OWORD *)(a1 + 8) = v6;
  long long v8 = *(_OWORD *)(a2 + 128);
  long long v10 = *(_OWORD *)(a2 + 80);
  long long v9 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 80) = v10;
  *(_OWORD *)(a1 + 96) = v9;
  long long v12 = *(_OWORD *)(a2 + 160);
  long long v11 = *(_OWORD *)(a2 + 176);
  long long v13 = *(_OWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 160) = v12;
  *(_OWORD *)(a1 + 176) = v11;
  *(_OWORD *)(a1 + 144) = v13;
  long long v14 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v14;
  Phase::SpatialModeler::RayTracerState::State::operator=(a1 + 496, a2 + 496);
  memcpy((void *)(a1 + 208), (const void *)(a2 + 208), 0x114uLL);
  Phase::Geometry::Listener::operator=(a1 + 22568, a2 + 22568);
  *(void *)(a1 + 22768) = *(void *)(a2 + 22768);
  *(_DWORD *)uint64_t v4 = *(_DWORD *)v5;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(v5 + 4);
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(v5 + 8);
  *(_DWORD *)(v4 + 12) = *(_DWORD *)(v5 + 12);
  *(_DWORD *)(v4 + 16) = *(_DWORD *)(v5 + 16);
  *(_DWORD *)(v4 + 20) = *(_DWORD *)(v5 + 20);
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(v5 + 24);
  *(_DWORD *)(v4 + 28) = *(_DWORD *)(v5 + 28);
  Phase::SpatialModeler::RayTracerState::FreeSourceListenerResultsDirectivityHistograms((Phase::SpatialModeler::RayTracerState *)a1);
  Phase::SpatialModeler::RayTracerState::FreeLRClusteringResultsDirectivityHistograms((Phase::SpatialModeler::RayTracerState *)a1);
  std::__tree<std::__value_type<unsigned long long,Phase::SpatialModeler::SourceListenerResult>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Phase::SpatialModeler::SourceListenerResult>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Phase::SpatialModeler::SourceListenerResult>>>::destroy(a1 + 19360, *(void **)(a1 + 19368));
  *(void *)(a1 + 19360) = a1 + 19368;
  *(void *)(a1 + 19376) = 0;
  *(void *)(a1 + 19368) = 0;
  std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>>>::clear(a1 + 19384);
  std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>>>::clear(a1 + 19424);
  Phase::SpatialModeler::RayTracerState::CopySourceListenerResults((Phase::SpatialModeler::RayTracerState *)a1, (const Phase::SpatialModeler::RayTracerState *)a2);
  Phase::SpatialModeler::RayTracerState::CopyERClusteringResults((Phase::SpatialModeler::RayTracerState *)a1, *(const Phase::SpatialModeler::RayTracerState **)(a2 + 19400));
  Phase::SpatialModeler::RayTracerState::CopyLRClusteringResults((Phase::SpatialModeler::RayTracerState *)a1, *(const Phase::SpatialModeler::RayTracerState **)(a2 + 19440));
  Phase::SpatialModeler::RayTracerState::CopyRoomStatResults((Phase::SpatialModeler::RayTracerState *)a1, (const Phase::SpatialModeler::RayTracerState *)a2);
  long long v15 = *(_OWORD *)(a2 + 21040);
  long long v16 = *(_OWORD *)(a2 + 21056);
  long long v17 = *(_OWORD *)(a2 + 21072);
  *(_OWORD *)(a1 + 21088) = *(_OWORD *)(a2 + 21088);
  *(_OWORD *)(a1 + 21072) = v17;
  *(_OWORD *)(a1 + 21056) = v16;
  *(_OWORD *)(a1 + 21040) = v15;
  long long v18 = *(_OWORD *)(a2 + 21104);
  long long v19 = *(_OWORD *)(a2 + 21120);
  long long v20 = *(_OWORD *)(a2 + 21136);
  *(_OWORD *)(a1 + 21152) = *(_OWORD *)(a2 + 21152);
  *(_OWORD *)(a1 + 21136) = v20;
  *(_OWORD *)(a1 + 21120) = v19;
  *(_OWORD *)(a1 + 21104) = v18;
  uint64_t v21 = *(void *)(a2 + 21432);
  *(_DWORD *)(a1 + 21440) = *(_DWORD *)(a2 + 21440);
  *(void *)(a1 + 21432) = v21;
  *(_OWORD *)(a1 + 21448) = *(_OWORD *)(a2 + 21448);
  Phase::SpatialModeler::ImportanceSampling::operator=((void **)(a1 + 23168), a2 + 23168);
  Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView::operator=(a1 + 23200, a2 + 23200);
  *(_WORD *)(v4 + 2264) = *(_WORD *)(v5 + 2264);
  *(void *)(a1 + 25048) = *(void *)(a2 + 25048);
  if (a1 != a2)
  {
    std::__tree<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::__tree_node<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,void *> *,long>>((uint64_t **)(a1 + 22480), *(void **)(a2 + 22480), (void *)(a2 + 22488));
    std::__tree<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::__tree_node<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,void *> *,long>>((uint64_t **)(a1 + 22504), *(void **)(a2 + 22504), (void *)(a2 + 22512));
  }
  long long v22 = *(_OWORD *)(a2 + 22528);
  long long v23 = *(_OWORD *)(a2 + 22544);
  *(void *)(a1 + 22560) = *(void *)(a2 + 22560);
  *(_OWORD *)(a1 + 22544) = v23;
  *(_OWORD *)(a1 + 22528) = v22;
  return a1;
}

void Phase::SpatialModeler::RayTracerState::CopyDirectivityHistogram(Phase::Logger *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (*a2)
  {
    *a3 = 0;
    a3[1] = 0;
    if (*(void *)a1)
    {
      Phase::SpatialModeler::HistogramPtrStack::Pop((unint64_t *)v9);
      long long v6 = *(Phase::SpatialModeler::EnergyHistogram **)v9;
      uint64_t v5 = *(std::__shared_weak_count **)&v9[8];
      *a3 = *(void *)v9;
      a3[1] = v5;
      if (v6)
      {
LABEL_11:
        Phase::SpatialModeler::DirectivityHistogram::operator=(v6, *a2);
        return;
      }
    }
    else
    {
      uint64_t v5 = 0;
    }
    _ZNSt3__115allocate_sharedB8ne180100IN5Phase14SpatialModeler20DirectivityHistogramENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(v9);
    long long v6 = *(Phase::SpatialModeler::EnergyHistogram **)v9;
    uint64_t v8 = *(void *)&v9[8];
    *a3 = *(void *)v9;
    a3[1] = v8;
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
    goto LABEL_11;
  }
  long long v7 = **(NSObject ***)(Phase::Logger::GetInstance(a1) + 1184);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long v9 = 136315394;
    *(void *)&v9[4] = "RayTracerState.cpp";
    *(_WORD *)&v9[12] = 1024;
    *(_DWORD *)&v9[14] = 1400;
    _os_log_impl(&dword_221E5E000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d Copying a nullptr DirectivityHistogram.", v9, 0x12u);
  }
  *a3 = 0;
  a3[1] = 0;
}

void sub_222036C50(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<unsigned long long const,Phase::SpatialModeler::SourceListenerResult>::~pair(uint64_t a1)
{
  float32x4_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void Phase::SpatialModeler::RayTracerState::CopyStateAndAssignToModelerInstance(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  uint64_t v10 = a1 + 22776;
  uint64_t v11 = a5 + 22776;
  *(void *)a1 = a2;
  long long v12 = *(_OWORD *)(a5 + 8);
  long long v13 = *(_OWORD *)(a5 + 24);
  *(void *)(a1 + 40) = *(void *)(a5 + 40);
  *(_OWORD *)(a1 + 24) = v13;
  *(_OWORD *)(a1 + 8) = v12;
  long long v14 = *(_OWORD *)(a5 + 128);
  long long v16 = *(_OWORD *)(a5 + 80);
  long long v15 = *(_OWORD *)(a5 + 96);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a5 + 112);
  *(_OWORD *)(a1 + 128) = v14;
  *(_OWORD *)(a1 + 80) = v16;
  *(_OWORD *)(a1 + 96) = v15;
  long long v18 = *(_OWORD *)(a5 + 160);
  long long v17 = *(_OWORD *)(a5 + 176);
  long long v19 = *(_OWORD *)(a5 + 144);
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a5 + 192);
  *(_OWORD *)(a1 + 160) = v18;
  *(_OWORD *)(a1 + 176) = v17;
  *(_OWORD *)(a1 + 144) = v19;
  long long v20 = *(_OWORD *)(a5 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a5 + 48);
  *(_OWORD *)(a1 + 64) = v20;
  Phase::SpatialModeler::RayTracerState::State::operator=(a1 + 496, a5 + 496);
  memcpy((void *)(a1 + 208), (const void *)(a5 + 208), 0x114uLL);
  Phase::Geometry::Listener::operator=(a1 + 22568, a5 + 22568);
  *(void *)(a1 + 22768) = *(void *)(a5 + 22768);
  *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
  *(_DWORD *)(v10 + 4) = *(_DWORD *)(v11 + 4);
  *(_DWORD *)(v10 + 8) = *(_DWORD *)(v11 + 8);
  *(_DWORD *)(v10 + 12) = *(_DWORD *)(v11 + 12);
  *(_DWORD *)(v10 + 16) = *(_DWORD *)(v11 + 16);
  *(_DWORD *)(v10 + 20) = *(_DWORD *)(v11 + 20);
  *(_DWORD *)(v10 + 24) = *(_DWORD *)(v11 + 24);
  *(_DWORD *)(v10 + 28) = *(_DWORD *)(v11 + 28);
  Phase::SpatialModeler::RayTracerState::FreeSourceListenerResultsDirectivityHistograms((Phase::SpatialModeler::RayTracerState *)a1);
  std::__tree<std::__value_type<unsigned long long,Phase::SpatialModeler::SourceListenerResult>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Phase::SpatialModeler::SourceListenerResult>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Phase::SpatialModeler::SourceListenerResult>>>::destroy(a1 + 19360, *(void **)(a1 + 19368));
  *(void *)(a1 + 19360) = a1 + 19368;
  *(void *)(a1 + 19376) = 0;
  *(void *)(a1 + 19368) = 0;
  std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleERClusterResult>>>::clear(a1 + 19384);
  Phase::SpatialModeler::RayTracerState::CopySourceListenerResults((Phase::SpatialModeler::RayTracerState *)a1, (const Phase::SpatialModeler::RayTracerState *)a5);
  Phase::SpatialModeler::RayTracerState::CopyERClusteringResults((Phase::SpatialModeler::RayTracerState *)a1, *(const Phase::SpatialModeler::RayTracerState **)(a5 + 19400));
  Phase::SpatialModeler::RayTracerState::CopyRoomStatResults((Phase::SpatialModeler::RayTracerState *)a1, (const Phase::SpatialModeler::RayTracerState *)a5);
  long long v21 = *(_OWORD *)(a5 + 21040);
  long long v22 = *(_OWORD *)(a5 + 21056);
  long long v23 = *(_OWORD *)(a5 + 21072);
  *(_OWORD *)(a1 + 21088) = *(_OWORD *)(a5 + 21088);
  *(_OWORD *)(a1 + 21072) = v23;
  *(_OWORD *)(a1 + 21056) = v22;
  *(_OWORD *)(a1 + 21040) = v21;
  long long v24 = *(_OWORD *)(a5 + 21104);
  long long v25 = *(_OWORD *)(a5 + 21120);
  long long v26 = *(_OWORD *)(a5 + 21136);
  *(_OWORD *)(a1 + 21152) = *(_OWORD *)(a5 + 21152);
  *(_OWORD *)(a1 + 21136) = v26;
  *(_OWORD *)(a1 + 21120) = v25;
  *(_OWORD *)(a1 + 21104) = v24;
  uint64_t v27 = *(void *)(a5 + 21432);
  *(_DWORD *)(a1 + 21440) = *(_DWORD *)(a5 + 21440);
  *(void *)(a1 + 21432) = v27;
  *(_OWORD *)(a1 + 21448) = *(_OWORD *)(a5 + 21448);
  Phase::SpatialModeler::ImportanceSampling::operator=((void **)(a1 + 23168), a5 + 23168);
  uint64_t v28 = Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView::operator=(a1 + 23200, a5 + 23200);
  *(_WORD *)(v10 + 2264) = *(_WORD *)(v11 + 2264);
  *(void *)(a1 + 25048) = *(void *)(a5 + 25048);
  *(void *)(a1 + 18936) = *(void *)(a1 + 18928);
  if (a3 && a3[5])
  {
    uint64_t v29 = *a3;
    do
    {
      uint64_t v30 = *(void *)(v29 + 144);
      if (*(_DWORD *)(a6 + 136) > v30
        && (uint64_t v31 = *(void *)(a6 + 120), *(_DWORD *)(v31 + 24 * v30 + 20) == HIDWORD(v30))
        && (uint64_t v32 = *(void *)(v31 + 24 * *(void *)(v29 + 144))) != 0
        && *(_DWORD *)v32 == 3)
      {
        if (*(_DWORD *)(v29 + 208) == 3) {
          uint64_t v33 = *(void *)(v29 + 216);
        }
        else {
          uint64_t v33 = 0;
        }
        uint64_t v36 = *(void *)(v32 + 8);
        unint64_t v37 = 0xC6A4A7935BD1E995
            * ((0xC6A4A7935BD1E995
              * ((0xC6A4A7935BD1E995
                * ((0xC6A4A7935BD1E995 * *(void *)(a4 + 8)) ^ ((0xC6A4A7935BD1E995 * *(void *)(a4 + 8)) >> 47))) ^ (0x35A98F4D286A90B9 * ((0xC6A4A7935BD1E995 * v36) ^ ((0xC6A4A7935BD1E995 * v36) >> 47)) + 3864292196u))
              + 3864292196u) ^ (0xC6A4A7935BD1E995
                              * ((0xC6A4A7935BD1E995 * v33) ^ ((0xC6A4A7935BD1E995 * v33) >> 47))))
            + 3864292196u;
        *(void *)buf = v37;
        int v38 = *(_DWORD *)(v32 + 48);
        int v39 = *(_DWORD *)(v32 + 52);
        *(_DWORD *)&buf[8] = v38;
        LODWORD(v49) = v39;
        int v40 = *(_DWORD *)(v32 + 56);
        int v41 = *(_DWORD *)(v32 + 60);
        HIDWORD(v49) = v40;
        LODWORD(v50) = v41;
        int v42 = *(_DWORD *)(v32 + 64);
        int v43 = *(_DWORD *)(v32 + 68);
        HIDWORD(v50) = v42;
        int v51 = v43;
        int v44 = *(_DWORD *)(v32 + 72);
        int v45 = *(_DWORD *)(v32 + 76);
        int v52 = v44;
        int v53 = v45;
        *(void *)&long long v54 = v33;
        *((void *)&v54 + 1) = v36;
        unint64_t v46 = *(void *)(a1 + 18936);
        if (v46 >= *(void *)(a1 + 18944))
        {
          uint64_t v28 = (uint64_t)std::vector<Phase::SpatialModeler::PhaseRoomSimulationSoundSource>::__push_back_slow_path<Phase::SpatialModeler::PhaseRoomSimulationSoundSource const&>((char **)(a1 + 18928), (uint64_t)buf);
        }
        else
        {
          *(void *)unint64_t v46 = v37;
          *(_DWORD *)(v46 + 8) = v38;
          *(_DWORD *)(v46 + 12) = v39;
          *(_DWORD *)(v46 + 16) = v40;
          *(_DWORD *)(v46 + 20) = v41;
          *(_DWORD *)(v46 + 24) = v42;
          *(_DWORD *)(v46 + 28) = v43;
          *(_DWORD *)(v46 + 32) = v44;
          *(_DWORD *)(v46 + 36) = v45;
          *(_OWORD *)(v46 + 40) = v54;
          uint64_t v28 = v46 + 56;
        }
        *(void *)(a1 + 18936) = v28;
      }
      else
      {
        int32x4_t v34 = **(NSObject ***)(Phase::Logger::GetInstance((Phase::Logger *)v28) + 1184);
        uint64_t v28 = os_log_type_enabled(v34, OS_LOG_TYPE_ERROR);
        if (v28)
        {
          uint64_t v35 = *(void *)(v29 + 144);
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "RayTracerState.cpp";
          uint64_t v49 = 0x800000001100400;
          uint64_t v50 = v35;
          _os_log_impl(&dword_221E5E000, v34, OS_LOG_TYPE_ERROR, "%25s:%-5d Source provided to cluster query (%llu) was not found in the Geometry Layer", buf, 0x1Cu);
        }
      }
      v29 += 304;
    }
    while (v29 != *a3 + 304 * a3[5]);
  }
}

void Phase::SpatialModeler::RayTracerState::InitRayTracerState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, Phase::SpatialModeler::RayTracerState *this)
{
  uint64_t v185 = *MEMORY[0x263EF8340];
  *(void *)a1 = a2;
  long long v11 = *(_OWORD *)(a2 + 1072);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 1056);
  *(_OWORD *)(a1 + 64) = v11;
  long long v12 = *(_OWORD *)(a2 + 1088);
  long long v13 = *(_OWORD *)(a2 + 1104);
  long long v14 = *(_OWORD *)(a2 + 1136);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 1120);
  *(_OWORD *)(a1 + 128) = v14;
  *(_OWORD *)(a1 + 80) = v12;
  *(_OWORD *)(a1 + 96) = v13;
  long long v15 = *(_OWORD *)(a2 + 1152);
  long long v16 = *(_OWORD *)(a2 + 1168);
  long long v17 = *(_OWORD *)(a2 + 1184);
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 1200);
  *(_OWORD *)(a1 + 160) = v16;
  *(_OWORD *)(a1 + 176) = v17;
  *(_OWORD *)(a1 + 144) = v15;
  long long v18 = (long long *)(a1 + 208);
  *(float *)(a1 + 480) = (float)(unint64_t)this;
  long long v182 = 0u;
  memset(v183, 0, 28);
  long long v180 = 0u;
  long long v181 = 0u;
  long long v178 = 0u;
  long long v179 = 0u;
  long long v177 = 0u;
  if (this == (Phase::SpatialModeler::RayTracerState *)31)
  {
    long long v181 = xmmword_2220E7ED0;
    long long v182 = unk_2220E7EE0;
    *(_OWORD *)uint64_t v183 = xmmword_2220E7EF0;
    *(_OWORD *)&v183[12] = *(long long *)((char *)&xmmword_2220E7EF0 + 12);
    long long v177 = Phase::sThirdOctaveBandFrequencies;
    long long v178 = unk_2220E7EA0;
    int v19 = 31;
    long long v179 = xmmword_2220E7EB0;
    long long v180 = unk_2220E7EC0;
  }
  else if (this == (Phase::SpatialModeler::RayTracerState *)10)
  {
    memset(&buf[40], 0, 84);
    *(void *)&buf[32] = 0x467A000045FA0000;
    *(_OWORD *)buf = Phase::sOctaveBandFrequencies;
    *(_OWORD *)&buf[16] = unk_2220E7E74;
    *(_OWORD *)&v183[12] = *(_OWORD *)&buf[108];
    long long v182 = *(_OWORD *)&buf[80];
    *(_OWORD *)uint64_t v183 = *(_OWORD *)&buf[96];
    long long v180 = *(_OWORD *)&buf[48];
    long long v181 = *(_OWORD *)&buf[64];
    long long v178 = unk_2220E7E74;
    long long v179 = *(_OWORD *)&buf[32];
    int v19 = 10;
    long long v177 = Phase::sOctaveBandFrequencies;
  }
  else if (this == (Phase::SpatialModeler::RayTracerState *)3)
  {
    memset(&buf[12], 0, 112);
    *(_DWORD *)&buf[8] = 1165623296;
    *(void *)buf = 0x447A0000437A0000;
    long long v181 = *(_OWORD *)&buf[64];
    long long v182 = *(_OWORD *)&buf[80];
    *(_OWORD *)uint64_t v183 = *(_OWORD *)&buf[96];
    *(_OWORD *)&v183[12] = 0uLL;
    long long v179 = *(_OWORD *)&buf[32];
    long long v180 = *(_OWORD *)&buf[48];
    int v19 = 3;
    long long v177 = *(_OWORD *)buf;
    long long v178 = *(_OWORD *)&buf[16];
  }
  else
  {
    long long v20 = **(NSObject ***)(Phase::Logger::GetInstance((Phase::Logger *)a1) + 1184);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "RayTracerState.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 499;
      *(_WORD *)&unsigned char buf[18] = 2048;
      *(void *)&buf[20] = this;
      _os_log_impl(&dword_221E5E000, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d Unsupported sub-band count: %zu\n", buf, 0x1Cu);
    }
    int v19 = 0;
  }
  long long v21 = v182;
  v18[4] = v181;
  v18[5] = v21;
  v18[6] = *(_OWORD *)v183;
  *(long long *)((char *)v18 + 108) = *(_OWORD *)&v183[12];
  long long v22 = v178;
  long long *v18 = v177;
  v18[1] = v22;
  long long v23 = v180;
  v18[2] = v179;
  v18[3] = v23;
  *(_DWORD *)(a1 + 332) = v19;
  *(void *)(a1 + 472) = Phase::SpatialModeler::RayTracerState::GetSubbandIndex(this);
  uint64_t v24 = *(void *)(a3 + 152);
  unint64_t v172 = (unint64_t)this;
  if (*(_DWORD *)(a3 + 64) <= v24) {
    goto LABEL_21;
  }
  uint64_t v25 = *(void *)(a3 + 48);
  if (*(_DWORD *)(v25 + 24 * v24 + 20) != HIDWORD(v24)) {
    goto LABEL_21;
  }
  uint64_t v26 = *(void *)(v25 + 24 * v24);
  if (!v26) {
    goto LABEL_21;
  }
  if (*(_DWORD *)v26 != 1) {
    goto LABEL_21;
  }
  uint64_t v27 = **(void **)(v26 + 40);
  long long v28 = *(_OWORD *)(v27 + 224);
  *(_OWORD *)&buf[64] = *(_OWORD *)(v27 + 208);
  *(_OWORD *)&buf[80] = v28;
  long long v29 = *(_OWORD *)(v27 + 256);
  *(_OWORD *)&buf[96] = *(_OWORD *)(v27 + 240);
  *(_OWORD *)&buf[112] = v29;
  long long v30 = *(_OWORD *)(v27 + 160);
  *(_OWORD *)buf = *(_OWORD *)(v27 + 144);
  *(_OWORD *)&buf[16] = v30;
  long long v31 = *(_OWORD *)(v27 + 192);
  *(_OWORD *)&buf[32] = *(_OWORD *)(v27 + 176);
  *(_OWORD *)&buf[48] = v31;
  if ((Phase::SpatialModeler::RayTracerState *)*(unsigned int *)(v27 + 140) != this) {
    goto LABEL_21;
  }
  if (Phase::operator==<float>(v27 + 16, (uint64_t)v18))
  {
    uint64_t v32 = *(unsigned int *)&buf[124];
    long long v177 = 0u;
    long long v178 = 0u;
    long long v179 = 0u;
    long long v180 = 0u;
    long long v181 = 0u;
    long long v182 = 0u;
    memset(v183, 0, 28);
    *(_DWORD *)&v183[28] = *(_DWORD *)&buf[124];
    if (*(_DWORD *)&buf[124])
    {
      bzero(&v177, 4 * *(unsigned int *)&buf[124]);
      uint64_t v33 = (float *)(a1 + 336);
      long long v34 = v182;
      *(_OWORD *)(a1 + 400) = v181;
      *(_OWORD *)(a1 + 416) = v34;
      long long v35 = *(_OWORD *)&v183[16];
      *(_OWORD *)(a1 + 432) = *(_OWORD *)v183;
      *(_OWORD *)(a1 + 448) = v35;
      long long v36 = v178;
      *(_OWORD *)(a1 + 336) = v177;
      *(_OWORD *)(a1 + 352) = v36;
      long long v37 = v180;
      int v38 = buf;
      *(_OWORD *)(a1 + 368) = v179;
      *(_OWORD *)(a1 + 384) = v37;
      do
      {
        float v39 = *(float *)v38;
        v38 += 4;
        *v33++ = fabsf(v39);
        --v32;
      }
      while (v32);
    }
    else
    {
      long long v165 = v182;
      *(_OWORD *)(a1 + 400) = v181;
      *(_OWORD *)(a1 + 416) = v165;
      long long v166 = *(_OWORD *)&v183[16];
      *(_OWORD *)(a1 + 432) = *(_OWORD *)v183;
      *(_OWORD *)(a1 + 448) = v166;
      long long v167 = v178;
      *(_OWORD *)(a1 + 336) = v177;
      *(_OWORD *)(a1 + 352) = v167;
      long long v168 = v180;
      *(_OWORD *)(a1 + 368) = v179;
      *(_OWORD *)(a1 + 384) = v168;
    }
    int v50 = *(_DWORD *)(v27 + 272);
  }
  else
  {
LABEL_21:
    int v40 = *(_DWORD *)(a1 + 332);
    if (v40)
    {
      int v41 = (float *)(a1 + 336);
      uint64_t v42 = *(unsigned int *)(a1 + 332);
      do
      {
        float v43 = *(float *)(a2 + 1220);
        float v44 = *(v41 - 32) * *(v41 - 32);
        float v45 = (float)(101.32 / (float)(*(float *)(a2 + 1260) / 1000.0)) * 1.84e-11;
        float v46 = fabsf(sqrtf(v43 / 293.16));
        if ((float)(v43 / 293.16) == -INFINITY) {
          float v47 = INFINITY;
        }
        else {
          float v47 = v46;
        }
        float v48 = powf(v43 / 293.16, -2.5);
        float v49 = (float)(expf(-2239.1 / v43) * 0.01278)
            / (float)(*(float *)(a2 + 1268) + (float)(v44 / *(float *)(a2 + 1268)));
        *v41++ = (float)((float)(v44
                               * (float)((float)(v48
                                               * (float)(v49
                                                       + (float)((float)(expf(-3352.0 / v43) * 0.1068)
                                                               / (float)(*(float *)(a2 + 1272)
                                                                       + (float)(v44 / *(float *)(a2 + 1272))))))
                                       + (float)(v45 * v47)))
                       * 8.6859)
               / 4.3429;
        --v42;
      }
      while (v42);
    }
    *(_DWORD *)(a1 + 460) = v40;
    int v50 = *(_DWORD *)(a2 + 1276);
  }
  *(_DWORD *)(a1 + 464) = v50;
  Phase::SpatialModeler::GetFullSceneAABB(a3, (uint64_t)buf);
  uint64_t v173 = (uint64_t **)(a1 + 19360);
  *(_OWORD *)(a1 + 20976) = *(_OWORD *)buf;
  *(void *)(a1 + 20992) = *(void *)&buf[16];
  uint64_t v169 = (char **)(a1 + 18928);
  *(void *)(a1 + 18936) = *(void *)(a1 + 18928);
  if (a4)
  {
    if (a4[5])
    {
      uint64_t v52 = *a4;
      uint64_t v170 = (void *)(a1 + 19368);
      do
      {
        uint64_t v53 = *(void *)(v52 + 144);
        if (*(_DWORD *)(a3 + 136) > v53
          && (uint64_t v54 = *(void *)(a3 + 120), *(_DWORD *)(v54 + 24 * v53 + 20) == HIDWORD(v53))
          && (uint64_t v55 = *(void *)(v54 + 24 * *(void *)(v52 + 144))) != 0
          && *(_DWORD *)v55 == 3)
        {
          if (*(_DWORD *)(v52 + 208) == 3) {
            uint64_t v56 = *(void *)(v52 + 216);
          }
          else {
            uint64_t v56 = 0;
          }
          uint64_t v59 = *(void *)(v55 + 8);
          unint64_t v60 = 0xC6A4A7935BD1E995
              * ((0xC6A4A7935BD1E995
                * ((0xC6A4A7935BD1E995
                  * ((0xC6A4A7935BD1E995 * *(void *)(a5 + 8)) ^ ((0xC6A4A7935BD1E995 * *(void *)(a5 + 8)) >> 47))) ^ (0x35A98F4D286A90B9 * ((0xC6A4A7935BD1E995 * v59) ^ ((0xC6A4A7935BD1E995 * v59) >> 47)) + 3864292196u))
                + 3864292196u) ^ (0xC6A4A7935BD1E995
                                * ((0xC6A4A7935BD1E995 * v56) ^ ((0xC6A4A7935BD1E995 * v56) >> 47))))
              + 3864292196u;
          *(void *)buf = v60;
          int v61 = *(_DWORD *)(v55 + 48);
          int v62 = *(_DWORD *)(v55 + 52);
          *(_DWORD *)&buf[8] = v61;
          *(_DWORD *)&unsigned char buf[12] = v62;
          int v63 = *(_DWORD *)(v55 + 56);
          int v64 = *(_DWORD *)(v55 + 60);
          *(_DWORD *)&buf[16] = v63;
          *(_DWORD *)&buf[20] = v64;
          int v65 = *(_DWORD *)(v55 + 64);
          int v66 = *(_DWORD *)(v55 + 68);
          *(_DWORD *)&buf[24] = v65;
          *(_DWORD *)&buf[28] = v66;
          int v67 = *(_DWORD *)(v55 + 72);
          int v68 = *(_DWORD *)(v55 + 76);
          *(_DWORD *)&buf[32] = v67;
          *(_DWORD *)&buf[36] = v68;
          *(void *)&buf[40] = v56;
          *(void *)&buf[48] = v59;
          v175[0] = v60;
          float32x4_t v69 = (void *)*v170;
          if (!*v170) {
            goto LABEL_53;
          }
          int32x4_t v70 = (void *)(a1 + 19368);
          do
          {
            unint64_t v71 = v69[4];
            BOOL v72 = v71 >= v60;
            if (v71 >= v60) {
              int8x16_t v73 = v69;
            }
            else {
              int8x16_t v73 = v69 + 1;
            }
            if (v72) {
              int32x4_t v70 = v69;
            }
            float32x4_t v69 = (void *)*v73;
          }
          while (*v73);
          if (v70 == v170 || v60 < v70[4])
          {
LABEL_53:
            unint64_t v74 = *(void *)(a1 + 18936);
            if (v74 >= *(void *)(a1 + 18944))
            {
              char v75 = std::vector<Phase::SpatialModeler::PhaseRoomSimulationSoundSource>::__push_back_slow_path<Phase::SpatialModeler::PhaseRoomSimulationSoundSource const&>(v169, (uint64_t)buf);
            }
            else
            {
              *(void *)unint64_t v74 = v60;
              *(_DWORD *)(v74 + 8) = v61;
              *(_DWORD *)(v74 + 12) = v62;
              *(_DWORD *)(v74 + 16) = v63;
              *(_DWORD *)(v74 + 20) = v64;
              *(_DWORD *)(v74 + 24) = v65;
              *(_DWORD *)(v74 + 28) = v66;
              *(_DWORD *)(v74 + 32) = v67;
              *(_DWORD *)(v74 + 36) = v68;
              *(_OWORD *)(v74 + 40) = *(_OWORD *)&buf[40];
              char v75 = (char *)(v74 + 56);
            }
            *(void *)(a1 + 18936) = v75;
            LODWORD(v179) = 0;
            long long v177 = 0u;
            long long v178 = 0u;
            int8x16_t v76 = std::__tree<std::__value_type<unsigned long long,Phase::SpatialModeler::SourceListenerResult>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Phase::SpatialModeler::SourceListenerResult>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Phase::SpatialModeler::SourceListenerResult>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v173, v60, v175);
            int32x4_t v77 = (std::__shared_weak_count *)v76[6];
            v76[5] = 0;
            v76[6] = 0;
            if (v77) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v77);
            }
            int v51 = (std::__shared_weak_count *)v76[8];
            v76[7] = 0;
            char v76[8] = 0;
            if (v51) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v51);
            }
            *((_DWORD *)v76 + 18) = 0;
          }
        }
        else
        {
          float64x2_t v57 = **(NSObject ***)(Phase::Logger::GetInstance((Phase::Logger *)v51) + 1184);
          int v51 = (std::__shared_weak_count *)os_log_type_enabled(v57, OS_LOG_TYPE_ERROR);
          if (v51)
          {
            uint64_t v58 = *(void *)(v52 + 144);
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = "RayTracerState.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 372;
            *(_WORD *)&unsigned char buf[18] = 2048;
            *(void *)&buf[20] = v58;
            _os_log_impl(&dword_221E5E000, v57, OS_LOG_TYPE_ERROR, "%25s:%-5d Source provided to cluster query (%llu) was not found in the Geometry Layer", buf, 0x1Cu);
          }
        }
        v52 += 304;
      }
      while (v52 != *a4 + 304 * a4[5]);
    }
  }
  else
  {
    int32x4_t v78 = *(_DWORD ***)(a3 + 120);
    unsigned int v79 = *(_DWORD *)(a3 + 136);
    uint64_t v80 = &v78[3 * v79];
    if (v79)
    {
      float32x4_t v81 = *v78;
      if (!*v78)
      {
        int32x4_t v82 = v78 + 3;
        while (1)
        {
          int32x4_t v78 = v82;
          if (v82 >= v80) {
            break;
          }
          v82 += 3;
          float32x4_t v81 = *v78;
          if (*v78) {
            goto LABEL_69;
          }
        }
        float32x4_t v81 = 0;
      }
LABEL_69:
      unint64_t v83 = (unint64_t)v80;
    }
    else
    {
      float32x4_t v81 = 0;
      unint64_t v83 = *(void *)(a3 + 120);
    }
    if (v78 != v80)
    {
      long long v171 = v80;
      uint64_t v84 = (void *)(a1 + 19368);
      do
      {
        if (v81 && *v81 == 3)
        {
          uint64_t v85 = *(void *)(*(void *)(a3 + 120) + 24 * v81[2]);
          uint64_t v86 = *(void *)(v85 + 8);
          unint64_t v87 = 0x35A98F4D286A90B9
              * ((0x35A98F4D286A90B9 * ((0xC6A4A7935BD1E995 * v86) ^ ((0xC6A4A7935BD1E995 * v86) >> 47))
                + 3864292196u) ^ (0xC6A4A7935BD1E995
                                * ((0xC6A4A7935BD1E995 * *(void *)(a5 + 8)) ^ ((0xC6A4A7935BD1E995
                                                                                  * *(void *)(a5 + 8)) >> 47))))
              - 0x34CB3A51FC270F68;
          *(void *)buf = v87;
          int v88 = *(_DWORD *)(v85 + 48);
          int v89 = *(_DWORD *)(v85 + 52);
          *(_DWORD *)&buf[8] = v88;
          *(_DWORD *)&unsigned char buf[12] = v89;
          int v90 = *(_DWORD *)(v85 + 56);
          int v91 = *(_DWORD *)(v85 + 60);
          *(_DWORD *)&buf[16] = v90;
          *(_DWORD *)&buf[20] = v91;
          int v92 = *(_DWORD *)(v85 + 64);
          int v93 = *(_DWORD *)(v85 + 68);
          *(_DWORD *)&buf[24] = v92;
          *(_DWORD *)&buf[28] = v93;
          int v94 = *(_DWORD *)(v85 + 72);
          int v95 = *(_DWORD *)(v85 + 76);
          *(_DWORD *)&buf[32] = v94;
          *(_DWORD *)&buf[36] = v95;
          *(void *)&buf[40] = 0;
          *(void *)&buf[48] = v86;
          int32x4_t v96 = (void *)*v84;
          if (!*v84) {
            goto LABEL_85;
          }
          int32x4_t v97 = (void *)(a1 + 19368);
          do
          {
            unint64_t v98 = v96[4];
            BOOL v99 = v98 >= v87;
            if (v98 >= v87) {
              float32x4_t v100 = v96;
            }
            else {
              float32x4_t v100 = v96 + 1;
            }
            if (v99) {
              int32x4_t v97 = v96;
            }
            int32x4_t v96 = (void *)*v100;
          }
          while (*v100);
          if (v97 == v84 || v87 < v97[4])
          {
LABEL_85:
            unint64_t v101 = *(void *)(a1 + 18936);
            if (v101 >= *(void *)(a1 + 18944))
            {
              float32x4_t v102 = std::vector<Phase::SpatialModeler::PhaseRoomSimulationSoundSource>::__push_back_slow_path<Phase::SpatialModeler::PhaseRoomSimulationSoundSource const&>(v169, (uint64_t)buf);
            }
            else
            {
              *(void *)unint64_t v101 = v87;
              *(_DWORD *)(v101 + 8) = v88;
              *(_DWORD *)(v101 + 12) = v89;
              *(_DWORD *)(v101 + 16) = v90;
              *(_DWORD *)(v101 + 20) = v91;
              *(_DWORD *)(v101 + 24) = v92;
              *(_DWORD *)(v101 + 28) = v93;
              *(_DWORD *)(v101 + 32) = v94;
              *(_DWORD *)(v101 + 36) = v95;
              *(_OWORD *)(v101 + 40) = *(_OWORD *)&buf[40];
              float32x4_t v102 = (char *)(v101 + 56);
            }
            *(void *)(a1 + 18936) = v102;
            LODWORD(v179) = 0;
            long long v177 = 0u;
            long long v178 = 0u;
            float32x4_t v103 = (uint64_t **)(a1 + 19368);
            uint64_t v104 = a1 + 19368;
            uint64_t v105 = *(void *)(a1 + 19368);
            if (v105)
            {
              while (1)
              {
                while (1)
                {
                  uint64_t v104 = v105;
                  unint64_t v106 = *(void *)(v105 + 32);
                  if (v106 <= v87) {
                    break;
                  }
                  uint64_t v105 = *(void *)v104;
                  float32x4_t v103 = (uint64_t **)v104;
                  if (!*(void *)v104) {
                    goto LABEL_95;
                  }
                }
                if (v106 >= v87) {
                  break;
                }
                uint64_t v105 = *(void *)(v104 + 8);
                if (!v105)
                {
                  float32x4_t v103 = (uint64_t **)(v104 + 8);
                  goto LABEL_95;
                }
              }
            }
            else
            {
LABEL_95:
              float32x4_t v107 = (char *)operator new(0x50uLL);
              v175[1] = a1 + 19368;
              *((void *)v107 + 4) = v87;
              *(_OWORD *)(v107 + 40) = 0u;
              *(_OWORD *)(v107 + 56) = 0u;
              *((void *)v107 + 9) = 0;
              char v176 = 1;
              std::__tree<Phase::SpatialCategory>::__insert_node_at(v173, v104, v103, (uint64_t *)v107);
              v175[0] = 0;
              std::unique_ptr<std::__tree_node<std::__value_type<unsigned long long,Phase::SpatialModeler::SourceListenerResult>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long long,Phase::SpatialModeler::SourceListenerResult>,void *>>>>::reset[abi:ne180100]((uint64_t)v175);
              uint64_t v104 = (uint64_t)v107;
            }
            float32x4_t v108 = *(std::__shared_weak_count **)(v104 + 48);
            *(void *)(v104 + 40) = 0;
            *(void *)(v104 + 48) = 0;
            if (v108) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v108);
            }
            float32x4_t v109 = *(std::__shared_weak_count **)(v104 + 64);
            *(void *)(v104 + 56) = 0;
            *(void *)(v104 + 64) = 0;
            if (v109) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v109);
            }
            *(_DWORD *)(v104 + 72) = 0;
            uint64_t v80 = v171;
          }
        }
        if ((unint64_t)v78 < v83)
        {
          float32x4_t v110 = v78 + 3;
          while (1)
          {
            int32x4_t v78 = v110;
            if ((unint64_t)v110 >= v83) {
              break;
            }
            v110 += 3;
            float32x4_t v81 = *v78;
            if (*v78) {
              goto LABEL_107;
            }
          }
          float32x4_t v81 = 0;
        }
LABEL_107:
        ;
      }
      while (v78 != v80);
    }
  }
  *(void *)(a1 + 18960) = *(void *)(a1 + 18952);
  *(void *)(a1 + 18984) = *(void *)(a1 + 18976);
  uint64_t v111 = *(void *)(a1 + 18928);
  if (*(void *)(a1 + 18936) != v111)
  {
    unint64_t v112 = 0;
    int64x2_t v113 = (char **)(a1 + 18952);
    float64x2_t v114 = (char **)(a1 + 18976);
    do
    {
      double v115 = (float32x2_t *)(v111 + 56 * v112);
      float v116 = v115[4].f32[0] - *(float *)(a5 + 72);
      float32x2_t v117 = vsub_f32(v115[3], *(float32x2_t *)(a5 + 64));
      Phase::SpatialModeler::RayTracerState::CreateDirectivityHistogram((Phase::SpatialModeler::RayTracerState *)a1, *(float *)(a1 + 112), *(float *)(a1 + 116), sqrtf(vaddv_f32(vmul_f32(v117, v117)) + (float)(v116 * v116)) / *(float *)(a1 + 464), v172, &v177);
      unint64_t v118 = v177;
      long long v119 = *(_OWORD *)(a5 + 64);
      *(_OWORD *)(v177 + 48) = *(_OWORD *)(a5 + 48);
      *(_OWORD *)(v118 + 64) = v119;
      int32x4_t v120 = (char *)operator new(0xA0uLL);
      float64x2_t v121 = (uint64_t *)v120;
      *((void *)v120 + 2) = 0;
      *((void *)v120 + 1) = 0;
      *(void *)int32x4_t v120 = &unk_26D47A2F8;
      *(_OWORD *)(v120 + 24) = 0u;
      float64x2_t v122 = (uint64_t *)(v120 + 24);
      *(_OWORD *)(v120 + 40) = 0u;
      *((_DWORD *)v120 + 14) = 1065353216;
      *((_OWORD *)v120 + 4) = 0u;
      *((_OWORD *)v120 + 5) = 0u;
      *((_OWORD *)v120 + 6) = 0u;
      *((_OWORD *)v120 + 7) = 0u;
      *((_OWORD *)v120 + 8) = 0u;
      *((_OWORD *)v120 + 9) = 0u;
      *(void *)buf = v120 + 24;
      *(void *)&buf[8] = v120;
      atomic_fetch_add_explicit((atomic_ullong *volatile)v120 + 1, 1uLL, memory_order_relaxed);
      int8x16_t v123 = (atomic_ullong *)*((void *)&v177 + 1);
      *(_OWORD *)&buf[16] = __PAIR128__(*((unint64_t *)&v177 + 1), v118);
      if (*((void *)&v177 + 1))
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v177 + 1) + 8), 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v120);
        int32x4_t v120 = (char *)v123;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v120);
      *(_DWORD *)&buf[32] = 0;
      *(float32x2_t *)&long long v177 = *v115;
      float32x4_t v124 = std::__tree<std::__value_type<unsigned long long,Phase::SpatialModeler::SourceListenerResult>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Phase::SpatialModeler::SourceListenerResult>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Phase::SpatialModeler::SourceListenerResult>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v173, v177, &v177);
      atomic_fetch_add_explicit(v121 + 1, 1uLL, memory_order_relaxed);
      float32x4_t v125 = (std::__shared_weak_count *)v124[6];
      v124[5] = v122;
      v124[6] = v121;
      if (v125) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v125);
      }
      if (v123) {
        atomic_fetch_add_explicit(v123 + 1, 1uLL, memory_order_relaxed);
      }
      float32x4_t v126 = (std::__shared_weak_count *)v124[8];
      v124[7] = (uint64_t *)v118;
      v124[8] = v123;
      if (v126) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v126);
      }
      *((_DWORD *)v124 + 18) = 0;
      float32x4_t v127 = *(unint64_t **)(a1 + 18960);
      unint64_t v128 = *(void *)(a1 + 18968);
      if ((unint64_t)v127 >= v128)
      {
        uint64_t v130 = ((char *)v127 - *v113) >> 3;
        if ((unint64_t)(v130 + 1) >> 61) {
          std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v131 = v128 - (void)*v113;
        uint64_t v132 = v131 >> 2;
        if (v131 >> 2 <= (unint64_t)(v130 + 1)) {
          uint64_t v132 = v130 + 1;
        }
        if ((unint64_t)v131 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v133 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v133 = v132;
        }
        if (v133) {
          int8x16_t v134 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(a1 + 18968, v133);
        }
        else {
          int8x16_t v134 = 0;
        }
        float64x2_t v135 = &v134[8 * v130];
        *(void *)float64x2_t v135 = v118;
        float32x4_t v129 = v135 + 8;
        float64x2_t v136 = *(char **)(a1 + 18960);
        float64x2_t v137 = *(char **)(a1 + 18952);
        if (v136 != v137)
        {
          do
          {
            uint64_t v138 = *((void *)v136 - 1);
            v136 -= 8;
            *((void *)v135 - 1) = v138;
            v135 -= 8;
          }
          while (v136 != v137);
          float64x2_t v136 = *v113;
        }
        *(void *)(a1 + 18952) = v135;
        *(void *)(a1 + 18960) = v129;
        *(void *)(a1 + 18968) = &v134[8 * v133];
        if (v136) {
          operator delete(v136);
        }
      }
      else
      {
        unint64_t *v127 = v118;
        float32x4_t v129 = v127 + 1;
      }
      *(void *)(a1 + 18960) = v129;
      uint64_t v139 = *(void *)buf;
      float64x2_t v140 = *(void **)(a1 + 18984);
      unint64_t v141 = *(void *)(a1 + 18992);
      if ((unint64_t)v140 >= v141)
      {
        uint64_t v143 = ((char *)v140 - *v114) >> 3;
        if ((unint64_t)(v143 + 1) >> 61) {
          std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v144 = v141 - (void)*v114;
        uint64_t v145 = v144 >> 2;
        if (v144 >> 2 <= (unint64_t)(v143 + 1)) {
          uint64_t v145 = v143 + 1;
        }
        if ((unint64_t)v144 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v146 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v146 = v145;
        }
        if (v146) {
          uint64_t v147 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(a1 + 18992, v146);
        }
        else {
          uint64_t v147 = 0;
        }
        unint64_t v148 = &v147[8 * v143];
        *(void *)unint64_t v148 = v139;
        BOOL v142 = v148 + 8;
        v149 = *(char **)(a1 + 18984);
        v150 = *(char **)(a1 + 18976);
        if (v149 != v150)
        {
          do
          {
            uint64_t v151 = *((void *)v149 - 1);
            v149 -= 8;
            *((void *)v148 - 1) = v151;
            v148 -= 8;
          }
          while (v149 != v150);
          v149 = *v114;
        }
        *(void *)(a1 + 18976) = v148;
        *(void *)(a1 + 18984) = v142;
        *(void *)(a1 + 18992) = &v147[8 * v146];
        if (v149) {
          operator delete(v149);
        }
      }
      else
      {
        *float64x2_t v140 = *(void *)buf;
        BOOL v142 = v140 + 1;
      }
      *(void *)(a1 + 18984) = v142;
      if (*(void *)&buf[24]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[24]);
      }
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      ++v112;
      uint64_t v111 = *(void *)(a1 + 18928);
    }
    while (0x6DB6DB6DB6DB6DB7 * ((*(void *)(a1 + 18936) - v111) >> 3) > v112);
  }
  *(_DWORD *)(a1 + 22776) = *(_DWORD *)(a5 + 48);
  *(_DWORD *)(a1 + 22780) = *(_DWORD *)(a5 + 52);
  *(_DWORD *)(a1 + 22784) = *(_DWORD *)(a5 + 56);
  *(_DWORD *)(a1 + 22788) = *(_DWORD *)(a5 + 60);
  *(_DWORD *)(a1 + 22792) = *(_DWORD *)(a5 + 64);
  *(_DWORD *)(a1 + 22796) = *(_DWORD *)(a5 + 68);
  *(_DWORD *)(a1 + 22800) = *(_DWORD *)(a5 + 72);
  *(_DWORD *)(a1 + 22804) = *(_DWORD *)(a5 + 76);
  Phase::Geometry::Listener::operator=(a1 + 22568, a5);
  *(void *)(a1 + 22768) = 0;
  Phase::SpatialModeler::ImportanceSampling::init((void **)(a1 + 23168), (void *)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 18936) - *(void *)(a1 + 18928)) >> 3)), 1.0);
  memset(buf, 0, 124);
  *(_DWORD *)&buf[124] = v172;
  if (v172)
  {
    bzero(buf, 4 * v172);
    long long v152 = *(_OWORD *)&buf[80];
    *(_OWORD *)(a1 + 19104) = *(_OWORD *)&buf[64];
    *(_OWORD *)(a1 + 19120) = v152;
    long long v153 = *(_OWORD *)&buf[112];
    *(_OWORD *)(a1 + 19136) = *(_OWORD *)&buf[96];
    *(_OWORD *)(a1 + 19152) = v153;
    long long v154 = *(_OWORD *)&buf[16];
    *(_OWORD *)(a1 + 19040) = *(_OWORD *)buf;
    *(_OWORD *)(a1 + 19056) = v154;
    long long v155 = *(_OWORD *)&buf[48];
    *(_OWORD *)(a1 + 19072) = *(_OWORD *)&buf[32];
    *(_OWORD *)(a1 + 19088) = v155;
    memset(buf, 0, 124);
    bzero(buf, 4 * v172);
  }
  else
  {
    long long v156 = *(_OWORD *)&buf[80];
    *(_OWORD *)(a1 + 19104) = *(_OWORD *)&buf[64];
    *(_OWORD *)(a1 + 19120) = v156;
    long long v157 = *(_OWORD *)&buf[112];
    *(_OWORD *)(a1 + 19136) = *(_OWORD *)&buf[96];
    *(_OWORD *)(a1 + 19152) = v157;
    long long v158 = *(_OWORD *)&buf[16];
    *(_OWORD *)(a1 + 19040) = *(_OWORD *)buf;
    *(_OWORD *)(a1 + 19056) = v158;
    long long v159 = *(_OWORD *)&buf[48];
    *(_OWORD *)(a1 + 19072) = *(_OWORD *)&buf[32];
    *(_OWORD *)(a1 + 19088) = v159;
    memset(buf, 0, 124);
  }
  *(_DWORD *)&buf[124] = v172;
  long long v160 = *(_OWORD *)&buf[80];
  *(_OWORD *)(a1 + 19232) = *(_OWORD *)&buf[64];
  *(_OWORD *)(a1 + 19248) = v160;
  long long v161 = *(_OWORD *)&buf[112];
  *(_OWORD *)(a1 + 19264) = *(_OWORD *)&buf[96];
  long long v162 = *(_OWORD *)&buf[16];
  *(_OWORD *)(a1 + 19168) = *(_OWORD *)buf;
  *(_OWORD *)(a1 + 19184) = v162;
  long long v163 = *(_OWORD *)&buf[48];
  *(_OWORD *)(a1 + 19200) = *(_OWORD *)&buf[32];
  *(_OWORD *)(a1 + 19216) = v163;
  *(_OWORD *)(a1 + 19280) = v161;
  *(std::chrono::steady_clock::time_point *)(a1 + 19312) = std::chrono::steady_clock::now();
  *(unsigned char *)(a1 + 25040) = 1;
  *(std::chrono::steady_clock::time_point *)(a1 + 25048) = std::chrono::steady_clock::now();
  if (*(void *)(a1 + 80) > 3uLL || *(_DWORD *)(a1 + 64) >= 0x101u) {
    std::terminate();
  }
  float v164 = fminf(fmaxf(__exp10f((float)((float)(-1.0 / *(float *)(a1 + 120)) / *(float *)(a1 + 32)) * 6.0), 0.0), 1.0);
  *(float *)(a1 + 8) = v164;
  *(float *)(a1 + 12) = 1.0 - v164;
}

void sub_222038174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  Phase::SpatialModeler::SourceListenerResult::~SourceListenerResult((Phase::SpatialModeler::SourceListenerResult *)va);
  _Unwind_Resume(a1);
}

uint64_t Phase::SpatialModeler::RayTracerState::GetSubbandIndex(Phase::SpatialModeler::RayTracerState *this)
{
  uint64_t v2 = 0;
  uint64_t v16 = *MEMORY[0x263EF8340];
  long long v7 = xmmword_2220E7E40;
  uint64_t v8 = 31;
  uint64_t v3 = (char *)&v9;
  while (*(Phase::SpatialModeler::RayTracerState **)((char *)&v7 + v2) != this)
  {
    v2 += 8;
    if (v2 == 24) {
      goto LABEL_6;
    }
  }
  uint64_t v3 = (char *)&v7 + v2;
LABEL_6:
  if (v3 - (char *)&v7 == 24)
  {
    uint64_t v5 = **(NSObject ***)(Phase::Logger::GetInstance(this) + 1184);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      long long v11 = "RayTracerState.cpp";
      __int16 v12 = 1024;
      int v13 = 520;
      __int16 v14 = 2048;
      long long v15 = this;
      _os_log_impl(&dword_221E5E000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [indexMinusOne == sTargetSubbandCounts.size() is true]: \"Unsupported Subband Count: %zu\"", buf, 0x1Cu);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Unsupported Subband Count: %zu");
  }
  return ((v3 - (char *)&v7) >> 3) + 1;
}

void sub_222038328(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t Phase::operator==<float>(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(a1 + 124);
  if (v2 != *(_DWORD *)(a2 + 124)) {
    return 0;
  }
  if (!v2) {
    return 1;
  }
  if (*(float *)a1 != *(float *)a2) {
    return 0;
  }
  unint64_t v3 = 0;
  while (v2 - 1 != v3)
  {
    float v4 = *(float *)(a1 + 4 + 4 * v3);
    float v5 = *(float *)(a2 + 4 + 4 * v3++);
    if (v4 != v5) {
      return v3 >= v2;
    }
  }
  unint64_t v3 = *(unsigned int *)(a1 + 124);
  return v3 >= v2;
}

uint64_t Phase::SpatialModeler::RayTracerState::CreateDirectivityHistogram@<X0>(Phase::SpatialModeler::RayTracerState *this@<X0>, float a2@<S0>, float a3@<S1>, float a4@<S2>, uint64_t a5@<X1>, void *a6@<X8>)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  *a6 = 0;
  a6[1] = 0;
  if (!*(void *)this) {
    goto LABEL_11;
  }
  Phase::SpatialModeler::HistogramPtrStack::Pop((unint64_t *)v19);
  uint64_t v14 = *(void *)v19;
  int v13 = *(std::__shared_weak_count **)&v19[8];
  *a6 = *(void *)v19;
  a6[1] = v13;
  if (v14)
  {
    if (*(float *)(v14 + 20) == a2 && *(_DWORD *)(v14 + 28) == a5 && *(float *)(v14 + 16) == a3)
    {
      uint64_t result = Phase::SpatialModeler::DirectivityHistogram::resetDirectivityHistogram((Phase::SpatialModeler::DirectivityHistogram *)v14, 1);
      *(float *)(v14 + 40) = a4;
      *(_DWORD *)(v14 + 32) = 1065353216;
      return result;
    }
    uint64_t v16 = **(NSObject ***)(Phase::Logger::GetInstance(v12) + 1184);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int v19 = 136315394;
      *(void *)&v19[4] = "RayTracerState.cpp";
      *(_WORD *)&v19[12] = 1024;
      *(_DWORD *)&v19[14] = 1359;
      _os_log_impl(&dword_221E5E000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d DirectivityHistogram format changed.\n", v19, 0x12u);
    }
    Phase::SpatialModeler::HistogramPtrStack::Clear((Phase::SpatialModeler::HistogramPtrStack *)(*(void *)this + 1328));
    *a6 = 0;
    a6[1] = 0;
    if (v13)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
LABEL_11:
      int v13 = 0;
    }
  }
  _ZNSt3__115allocate_sharedB8ne180100IN5Phase14SpatialModeler20DirectivityHistogramENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(v19);
  long long v17 = *(Phase::SpatialModeler::DirectivityHistogram **)v19;
  uint64_t v18 = *(void *)&v19[8];
  *a6 = *(void *)v19;
  a6[1] = v18;
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  return Phase::SpatialModeler::DirectivityHistogram::initDirectivityHistogram(v17, a2, a5, a3, a4, 1.0);
}

void sub_222038568(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void Phase::SpatialModeler::RayTracerState::NextRay(unsigned int *a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (*(void *)a1)
  {
    float v4 = a1 + 5698;
    (*(void (**)(int *__return_ptr))(**(void **)(*(void *)a1 + 51960) + 16))(&v12);
    uint64_t v5 = a1[83];
    *(_DWORD *)(a2 + 56) = 0;
    *(void *)(a2 + 68) = -1;
    *(unsigned char *)(a2 + 76) = 0;
    *(_DWORD *)(a2 + 80) = 1065353216;
    if (v5)
    {
      memset_pattern16((void *)(a2 + 96), &unk_2220E7DF0, 4 * v5);
      memset_pattern16((void *)(a2 + 224), &unk_2220E7DF0, 4 * v5);
    }
    *(_DWORD *)(a2 + 220) = v5;
    *(_DWORD *)(a2 + 348) = v5;
    *(_DWORD *)a2 = *v4;
    *(_DWORD *)(a2 + 4) = v4[1];
    *(_DWORD *)(a2 + 8) = v4[2];
    *(_DWORD *)(a2 + 12) = 0;
    *(_DWORD *)(a2 + 28) = 1176256512;
    long long v6 = v13;
    float v7 = 90.0 - *(float *)&v13;
    *(_DWORD *)(a2 + 60) = HIDWORD(v13);
    *(float *)(a2 + 64) = v7;
    if (*((float *)&v6 + 1) < 0.0 || *((float *)&v6 + 1) > 360.0 || v7 < -90.0 || v7 > 90.0) {
      std::terminate();
    }
    float v8 = *(float *)&v12;
    __float2 v9 = __sincosf_stret(*(float *)&v6 * 0.017453);
    __float2 v10 = __sincosf_stret(*((float *)&v6 + 1) * 0.017453);
    *(float *)(a2 + 16) = v10.__sinval * (float)(v9.__sinval * v8);
    *(float *)(a2 + 20) = v9.__cosval * v8;
    *(float *)(a2 + 24) = v10.__cosval * (float)(v9.__sinval * v8);
    ++a1[4754];
  }
  else
  {
    long long v11 = **(NSObject ***)(Phase::Logger::GetInstance((Phase::Logger *)a1) + 1184);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      int v12 = 136315394;
      int v13 = "RayTracerState.cpp";
      __int16 v14 = 1024;
      int v15 = 531;
      _os_log_impl(&dword_221E5E000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d Modeler instance not set in state", (uint8_t *)&v12, 0x12u);
    }
  }
}

void Phase::SpatialModeler::RayTracerState::UpdateResultData(Phase::SpatialModeler::RayTracerState *this, Phase::SpatialModeler::RayTracerState *a2, Phase::Geometry::SystemState *a3)
{
  uint64_t v5 = (_DWORD *)((char *)this + 22776);
  long long v6 = (_DWORD *)((char *)a2 + 22776);
  long long v7 = *(_OWORD *)((char *)a2 + 8);
  long long v8 = *(_OWORD *)((char *)a2 + 24);
  *((void *)this + 5) = *((void *)a2 + 5);
  *(_OWORD *)((char *)this + 24) = v8;
  *(_OWORD *)((char *)this + 8) = v7;
  long long v9 = *((_OWORD *)a2 + 8);
  long long v11 = *((_OWORD *)a2 + 5);
  long long v10 = *((_OWORD *)a2 + 6);
  *((_OWORD *)this + 7) = *((_OWORD *)a2 + 7);
  *((_OWORD *)this + 8) = v9;
  *((_OWORD *)this + 5) = v11;
  *((_OWORD *)this + 6) = v10;
  long long v13 = *((_OWORD *)a2 + 10);
  long long v12 = *((_OWORD *)a2 + 11);
  long long v14 = *((_OWORD *)a2 + 9);
  *((_DWORD *)this + 48) = *((_DWORD *)a2 + 48);
  *((_OWORD *)this + 10) = v13;
  *((_OWORD *)this + 11) = v12;
  *((_OWORD *)this + 9) = v14;
  long long v15 = *((_OWORD *)a2 + 4);
  *((_OWORD *)this + 3) = *((_OWORD *)a2 + 3);
  *((_OWORD *)this + 4) = v15;
  memcpy((char *)this + 208, (char *)a2 + 208, 0x114uLL);
  if (this != a2) {
    std::vector<Phase::SpatialModeler::PhaseRoomSimulationSoundSource>::__assign_with_size[abi:ne180100]<Phase::SpatialModeler::PhaseRoomSimulationSoundSource*,Phase::SpatialModeler::PhaseRoomSimulationSoundSource*>((void *)this + 2366, *((void *)a2 + 2366), *((void *)a2 + 2367), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)a2 + 2367) - *((void *)a2 + 2366)) >> 3));
  }
  memcpy((char *)this + 19008, (char *)a2 + 19008, 0x160uLL);
  Phase::Geometry::Listener::operator=((uint64_t)this + 22568, (uint64_t)a2 + 22568);
  *((void *)this + 2846) = *((void *)a2 + 2846);
  _DWORD *v5 = *v6;
  v5[1] = v6[1];
  v5[2] = v6[2];
  v5[3] = v6[3];
  v5[4] = v6[4];
  v5[5] = v6[5];
  v5[6] = v6[6];
  v5[7] = v6[7];
  Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView::operator=((uint64_t)this + 23200, (uint64_t)a2 + 23200);
  uint64_t v16 = (uint64_t *)*((void *)this + 2420);
  if (v16 != (uint64_t *)((char *)this + 19368))
  {
    long long v17 = (char *)a2 + 19368;
    do
    {
      uint64_t v18 = *(void **)v17;
      if (!*(void *)v17) {
        goto LABEL_16;
      }
      unint64_t v19 = v16[4];
      uint64_t v20 = (char *)a2 + 19368;
      do
      {
        unint64_t v21 = v18[4];
        BOOL v22 = v21 >= v19;
        if (v21 >= v19) {
          long long v23 = v18;
        }
        else {
          long long v23 = v18 + 1;
        }
        if (v22) {
          uint64_t v20 = (char *)v18;
        }
        uint64_t v18 = (void *)*v23;
      }
      while (*v23);
      if (v20 != v17 && v19 >= *((void *)v20 + 4))
      {
        long long v28 = (Phase::SpatialModeler::RayTracerState *)v16[1];
        if (v28)
        {
          do
          {
            uint64_t v26 = v28;
            long long v28 = *(Phase::SpatialModeler::RayTracerState **)v28;
          }
          while (v28);
        }
        else
        {
          do
          {
            uint64_t v26 = (Phase::SpatialModeler::RayTracerState *)v16[2];
            BOOL v27 = *(void *)v26 == (void)v16;
            uint64_t v16 = (uint64_t *)v26;
          }
          while (!v27);
        }
      }
      else
      {
LABEL_16:
        Phase::SpatialModeler::RayTracerState::FreeDirectivityHistogram(this, v16 + 7);
        uint64_t v24 = (Phase::SpatialModeler::RayTracerState *)v16[1];
        uint64_t v25 = v16;
        if (v24)
        {
          do
          {
            uint64_t v26 = v24;
            uint64_t v24 = *(Phase::SpatialModeler::RayTracerState **)v24;
          }
          while (v24);
        }
        else
        {
          do
          {
            uint64_t v26 = (Phase::SpatialModeler::RayTracerState *)*((void *)v25 + 2);
            BOOL v27 = *(void *)v26 == (void)v25;
            uint64_t v25 = v26;
          }
          while (!v27);
        }
        if (*((uint64_t **)this + 2420) == v16) {
          *((void *)this + 2420) = v26;
        }
        --*((void *)this + 2422);
        std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 2421), v16);
        std::__destroy_at[abi:ne180100]<std::pair<unsigned long long const,Phase::SpatialModeler::SourceListenerResult>,0>((uint64_t)(v16 + 4));
        operator delete(v16);
      }
      uint64_t v16 = (uint64_t *)v26;
    }
    while (v26 != (Phase::SpatialModeler::RayTracerState *)((char *)this + 19368));
  }
}

void Phase::SpatialModeler::RayTracerState::FreeDirectivityHistogram(Phase::Logger *a1, void *a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  unint64_t v2 = (void *)*a2;
  if (!*a2)
  {
    uint64_t v5 = **(NSObject ***)(Phase::Logger::GetInstance(a1) + 1184);
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      return;
    }
    int v22 = 136315394;
    long long v23 = "RayTracerState.cpp";
    __int16 v24 = 1024;
    int v25 = 1426;
    long long v6 = "%25s:%-5d Trying to free a nullptr DirectivityHistogram.";
    goto LABEL_8;
  }
  float v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    if (v4->__shared_owners_ >= 1)
    {
      uint64_t v5 = **(NSObject ***)(Phase::Logger::GetInstance(a1) + 1184);
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        return;
      }
      int v22 = 136315394;
      long long v23 = "RayTracerState.cpp";
      __int16 v24 = 1024;
      int v25 = 1415;
      long long v6 = "%25s:%-5d Cannot free DirectivityHistogram still in use\n";
LABEL_8:
      _os_log_impl(&dword_221E5E000, v5, OS_LOG_TYPE_ERROR, v6, (uint8_t *)&v22, 0x12u);
      return;
    }
    if (!*(void *)a1) {
      goto LABEL_17;
    }
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    _X0 = v2 + 53;
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    v2[53] = 0;
    v2[54] = v2;
    v2[55] = v4;
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    if (!*(void *)a1)
    {
      *a2 = 0;
      a2[1] = 0;
      return;
    }
    _X0 = v2 + 53;
    v2[53] = 0;
    v2[54] = v2;
    v2[55] = 0;
  }
  _X4 = 0;
  _X5 = 0;
  __asm { CASPAL          X4, X5, X4, X5, [X9] }
  atomic_store(_X4, _X0);
  _X6 = _X0;
  _X3 = 0;
  __asm { CASPAL          X2, X3, X6, X7, [X9] }
  if (_X2 != _X4)
  {
    do
    {
      atomic_store(_X2, _X0);
      _X5 = 0;
      __asm { CASPAL          X4, X5, X0, X1, [X9] }
      unint64_t v20 = _X4 ^ _X2;
      _X2 = _X4;
    }
    while (v20);
  }
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
LABEL_17:
  unint64_t v21 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  if (v21)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
}

void Phase::SpatialModeler::RayTracerState::AggregateResultData(Phase::SpatialModeler::RayTracerState *this, Phase::SpatialModeler::RayTracerState *a2, Phase::Geometry::SystemState *a3)
{
  uint64_t v133 = *MEMORY[0x263EF8340];
  float64x2_t v122 = (unsigned int *)((char *)a2 + 19016);
  long long v6 = (float *)((char *)this + 19504);
  float v8 = *((float *)a2 + 6);
  float v7 = *((float *)a2 + 7);
  if (*(_DWORD *)(*(void *)this + 32) == 2 && *((unsigned char *)this + 195) && *((unsigned char *)this + 72))
  {
    float v8 = *((float *)a2 + 4);
    float v7 = *((float *)a2 + 5);
  }
  Phase::SpatialModeler::RayTracerState::UpdateResultData(this, a2, a3);
  int8x16_t v123 = v6;
  if (!*((unsigned char *)this + 168) || !*((unsigned char *)this + 169))
  {
    *(float *)&long long v10 = v6[381] / (float)*v122;
    if (*(float *)&v10 == 0.0) {
      float v7 = 1.0;
    }
    HIDWORD(v11) = 0;
    if (*(float *)&v10 == 0.0) {
      float v8 = 0.0;
    }
    LODWORD(v11) = 2.0;
    if (*(float *)&v10 > 2.0)
    {
      LODWORD(v11) = 1120403456;
      *(float *)&long long v10 = 1.0 / fminf(fmaxf(*(float *)&v10, 2.0), 100.0);
      float v7 = v7 * *(float *)&v10;
      float v8 = 1.0 - v7;
    }
  }
  long long v17 = (Phase::SpatialModeler::RayTracerState *)*((void *)a2 + 2420);
  if (v17 != (Phase::SpatialModeler::RayTracerState *)((char *)a2 + 19368))
  {
    uint64_t v18 = (uint64_t **)((char *)this + 19360);
    unint64_t v19 = (char *)this + 19368;
    int64x2_t v20 = vdupq_n_s64(4uLL);
    int64x2_t v124 = v20;
    while (1)
    {
      unint64_t v21 = *((void *)v17 + 4);
      *(void *)&v126[0] = v21;
      int v22 = *(void **)v19;
      if (*(void *)v19)
      {
        long long v23 = (char *)this + 19368;
        do
        {
          unint64_t v24 = v22[4];
          BOOL v25 = v24 >= v21;
          if (v24 >= v21) {
            uint64_t v26 = v22;
          }
          else {
            uint64_t v26 = v22 + 1;
          }
          if (v25) {
            long long v23 = (char *)v22;
          }
          int v22 = (void *)*v26;
        }
        while (*v26);
        if (v23 != v19 && v21 >= *((void *)v23 + 4)) {
          break;
        }
      }
      std::allocate_shared[abi:ne180100]<Phase::SpatialModeler::EarlyReflectionDetector,std::allocator<Phase::SpatialModeler::EarlyReflectionDetector>,Phase::SpatialModeler::EarlyReflectionDetector&,void>((Phase::SpatialModeler::EarlyReflectionDetector **)buf, *((const Phase::SpatialModeler::EarlyReflectionDetector **)v17 + 5));
      Phase::SpatialModeler::RayTracerState::CopyDirectivityHistogram(this, (uint64_t *)v17 + 7, &buf[16]);
      LODWORD(v128) = 0;
      BOOL v27 = std::__tree<std::__value_type<unsigned long long,Phase::SpatialModeler::SourceListenerResult>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Phase::SpatialModeler::SourceListenerResult>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Phase::SpatialModeler::SourceListenerResult>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v18, v21, v126);
      long long v28 = (std::__shared_weak_count *)v27[6];
      *(_OWORD *)(v27 + 5) = *(_OWORD *)buf;
      if (v28) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v28);
      }
      IsHistogramEnergyLowerThanTheoreticalPrediction = (std::__shared_weak_count *)v27[8];
      v20.i32[1] = *(_DWORD *)&buf[20];
      *(_OWORD *)(v27 + 7) = *(_OWORD *)&buf[16];
      if (IsHistogramEnergyLowerThanTheoreticalPrediction) {
        std::__shared_weak_count::__release_shared[abi:ne180100](IsHistogramEnergyLowerThanTheoreticalPrediction);
      }
      *((_DWORD *)v27 + 18) = 0;
LABEL_31:
      long long v29 = (Phase::SpatialModeler::RayTracerState *)*((void *)v17 + 1);
      if (v29)
      {
        do
        {
          long long v30 = v29;
          long long v29 = *(Phase::SpatialModeler::RayTracerState **)v29;
        }
        while (v29);
      }
      else
      {
        do
        {
          long long v30 = (Phase::SpatialModeler::RayTracerState *)*((void *)v17 + 2);
          BOOL v64 = *(void *)v30 == (void)v17;
          long long v17 = v30;
        }
        while (!v64);
      }
      long long v17 = v30;
      if (v30 == (Phase::SpatialModeler::RayTracerState *)((char *)a2 + 19368)) {
        goto LABEL_111;
      }
    }
    uint64_t v31 = *((void *)v23 + 7);
    if (!v31)
    {
      uint64_t v18 = (uint64_t **)((char *)this + 19360);
      int v65 = **(NSObject ***)(Phase::Logger::GetInstance((Phase::Logger *)IsHistogramEnergyLowerThanTheoreticalPrediction)
                           + 1184);
      if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "RayTracerState.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 820;
        _os_log_impl(&dword_221E5E000, v65, OS_LOG_TYPE_ERROR, "%25s:%-5d Sound source found, but no histogram initialized", buf, 0x12u);
      }
      Phase::SpatialModeler::RayTracerState::CopyDirectivityHistogram(this, (uint64_t *)v17 + 7, buf);
      IsHistogramEnergyLowerThanTheoreticalPrediction = (std::__shared_weak_count *)*((void *)v23 + 8);
      v20.i32[1] = *(_DWORD *)&buf[4];
      *(_OWORD *)(v23 + 56) = *(_OWORD *)buf;
      if (!IsHistogramEnergyLowerThanTheoreticalPrediction) {
        goto LABEL_100;
      }
      goto LABEL_99;
    }
    uint64_t v32 = (std::__shared_weak_count *)*((void *)v23 + 8);
    if (v32) {
      atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    IsHistogramEnergyLowerThanTheoreticalPrediction = (std::__shared_weak_count *)*((void *)v17 + 7);
    if (IsHistogramEnergyLowerThanTheoreticalPrediction)
    {
      if (!*((unsigned char *)this + 156)) {
        goto LABEL_73;
      }
      v20.i32[0] = *((_DWORD *)this + 40);
      IsHistogramEnergyLowerThanTheoreticalPrediction = (std::__shared_weak_count *)Phase::SpatialModeler::IsHistogramEnergyLowerThanTheoreticalPrediction((Phase::SpatialModeler::EnergyHistogram *)IsHistogramEnergyLowerThanTheoreticalPrediction, (uint64_t)this + 20800, *(double *)v20.i64, *(double *)&v10, v11, v12, v13, v14, v15, (uint64x2_t)v16);
      if (!IsHistogramEnergyLowerThanTheoreticalPrediction) {
        goto LABEL_73;
      }
      uint64_t v34 = *((void *)v17 + 7);
      float v35 = 0.0;
      float v36 = 0.0;
      if (!*(unsigned char *)(v34 + 36))
      {
        uint64_t v37 = (*(_DWORD *)(v34 + 28) * *(_DWORD *)(v34 + 24));
        if (v37)
        {
          uint64_t v38 = *(void *)(v34 + 8);
          uint64_t v39 = (v37 + 3) & 0x1FFFFFFFCLL;
          uint64x2_t v40 = (uint64x2_t)vdupq_n_s64(v37 - 1);
          int v41 = (__int32 *)(v38 + 8);
          int64x2_t v42 = (int64x2_t)xmmword_2220A5520;
          int64x2_t v43 = (int64x2_t)xmmword_2220A5510;
          float32x4_t v44 = (float32x4_t)xmmword_2220A5530;
          do
          {
            float32x4_t v45 = v44;
            int32x4_t v46 = (int32x4_t)vcgeq_u64(v40, (uint64x2_t)v42);
            *(int32x2_t *)v16.i8 = vmovn_s64((int64x2_t)v46);
            *(int16x4_t *)v44.f32 = vmovn_s32(v16);
            if (v44.i8[0]) {
              v44.i32[0] = *(v41 - 2);
            }
            if (vmovn_s32(v16).i8[2]) {
              v44.i32[1] = *(v41 - 1);
            }
            int32x4_t v16 = (int32x4_t)vcgeq_u64(v40, (uint64x2_t)v43);
            int32x2_t v47 = (int32x2_t)vmovn_s32(vmovn_hight_s64(*(int32x2_t *)v33.i8, (int64x2_t)v16));
            if (v47.i8[4]) {
              v44.i32[2] = *v41;
            }
            if (vmovn_s32(vmovn_hight_s64(v47, *(int64x2_t *)&v16)).i8[6]) {
              v44.i32[3] = v41[1];
            }
            float32x4_t v44 = vaddq_f32(v45, v44);
            v33.i64[0] = v124.i64[0];
            int64x2_t v43 = vaddq_s64(v43, v124);
            int64x2_t v42 = vaddq_s64(v42, v124);
            v41 += 4;
            v39 -= 4;
          }
          while (v39);
          int8x16_t v48 = vbslq_s8((int8x16_t)vuzp1q_s32(v46, v16), (int8x16_t)v44, (int8x16_t)v45);
          float v36 = (float)(vaddv_f32(*(float32x2_t *)v48.i8) + *(float *)&v48.i32[2]) + *(float *)&v48.i32[3];
        }
      }
      uint64_t v49 = *((void *)v23 + 7);
      if (!*(unsigned char *)(v49 + 36))
      {
        uint64_t v50 = (*(_DWORD *)(v49 + 28) * *(_DWORD *)(v49 + 24));
        if (v50)
        {
          uint64_t v51 = *(void *)(v49 + 8);
          uint64_t v52 = (v50 + 3) & 0x1FFFFFFFCLL;
          uint64x2_t v53 = (uint64x2_t)vdupq_n_s64(v50 - 1);
          uint64_t v54 = (__int32 *)(v51 + 8);
          int64x2_t v55 = (int64x2_t)xmmword_2220A5520;
          int64x2_t v56 = (int64x2_t)xmmword_2220A5510;
          float32x4_t v57 = (float32x4_t)xmmword_2220A5530;
          do
          {
            float32x4_t v58 = v57;
            int32x4_t v59 = (int32x4_t)vcgeq_u64(v53, (uint64x2_t)v55);
            *(int32x2_t *)v16.i8 = vmovn_s64((int64x2_t)v59);
            *(int16x4_t *)v57.f32 = vmovn_s32(v16);
            if (v57.i8[0]) {
              v57.i32[0] = *(v54 - 2);
            }
            if (vmovn_s32(v16).i8[2]) {
              v57.i32[1] = *(v54 - 1);
            }
            int32x4_t v16 = (int32x4_t)vcgeq_u64(v53, (uint64x2_t)v56);
            int32x2_t v60 = (int32x2_t)vmovn_s32(vmovn_hight_s64(*(int32x2_t *)v33.i8, (int64x2_t)v16));
            if (v60.i8[4]) {
              v57.i32[2] = *v54;
            }
            if (vmovn_s32(vmovn_hight_s64(v60, *(int64x2_t *)&v16)).i8[6]) {
              v57.i32[3] = v54[1];
            }
            float32x4_t v57 = vaddq_f32(v58, v57);
            int64x2_t v33 = vdupq_n_s64(4uLL);
            int64x2_t v56 = vaddq_s64(v56, v33);
            int64x2_t v55 = vaddq_s64(v55, v33);
            v54 += 4;
            v52 -= 4;
          }
          while (v52);
          int8x16_t v61 = vbslq_s8((int8x16_t)vuzp1q_s32(v59, v16), (int8x16_t)v57, (int8x16_t)v58);
          float v35 = (float)(vaddv_f32(*(float32x2_t *)v61.i8) + *(float *)&v61.i32[2]) + *(float *)&v61.i32[3];
        }
      }
      float v62 = (float)(v36 / (float)(v35 + 1.1755e-38)) + 1.1755e-38;
      char v63 = 1;
      if (v62 <= 0.0) {
        float v62 = COERCE_FLOAT(1);
      }
      if ((float)((float)((float)(logf(v62) * 4.3429) / 10.0) * 10.0) > -3.0)
      {
LABEL_73:
        BOOL v64 = *(float *)(v31 + 32) > 1.0 && *((unsigned char *)a2 + 192) == 0;
        if (v64)
        {
          char v63 = 0;
        }
        else
        {
          Phase::SpatialModeler::DirectivityHistogram::operator*=((void *)v31, v8);
          Phase::SpatialModeler::DirectivityHistogram::operator*=(*((void **)v17 + 7), v7);
          Phase::SpatialModeler::DirectivityHistogram::operator+=(v31, *((void *)v17 + 7));
          Phase::SpatialModeler::DirectivityHistogram::updateWasHitVector((Phase::SpatialModeler::DirectivityHistogram *)v31);
          char v63 = 0;
          *((float *)v23 + 18) = (float)(v8 * *((float *)v23 + 18)) + (float)*v122;
        }
      }
      uint64_t v66 = *((void *)v23 + 7);
      uint64_t v67 = *((void *)v17 + 7);
      *(_DWORD *)(v66 + 40) = *(_DWORD *)(v67 + 40);
      int64x2_t v20 = *(int64x2_t *)(v67 + 48);
      long long v10 = *(_OWORD *)(v67 + 64);
      *(int64x2_t *)(v66 + 48) = v20;
      *(_OWORD *)(v66 + 64) = v10;
      if (!*((unsigned char *)this + 156)) {
        goto LABEL_97;
      }
      if ((v63 & 1) == 0)
      {
        float v69 = *(float *)(v31 + 32);
        *(float *)&long long v10 = v69 * 0.33333;
        if (v69 <= 1.0)
        {
          BOOL v70 = v69 < 1.0;
        }
        else
        {
          float v69 = v69 * 0.33333;
          BOOL v70 = 1;
        }
        if (!v70) {
          goto LABEL_97;
        }
        if (v69 < 1.0) {
          float v69 = 1.0;
        }
        goto LABEL_96;
      }
    }
    else if (!*((unsigned char *)this + 156))
    {
      goto LABEL_97;
    }
    *(float *)&long long v10 = *(float *)(v31 + 40) * *((float *)this + 116);
    float v68 = *(float *)(v31 + 32);
    *(float *)&double v11 = sqrtf(v68);
    if (*(float *)&v11 >= *(float *)&v10)
    {
LABEL_97:
      uint64_t v18 = (uint64_t **)((char *)this + 19360);
      if (!v32) {
        goto LABEL_100;
      }
      IsHistogramEnergyLowerThanTheoreticalPrediction = v32;
LABEL_99:
      std::__shared_weak_count::__release_shared[abi:ne180100](IsHistogramEnergyLowerThanTheoreticalPrediction);
LABEL_100:
      unint64_t v71 = (Phase::SpatialModeler::EarlyReflectionDetector *)*((void *)v23 + 5);
      if (v71)
      {
        BOOL v72 = (float *)*((void *)v71 + 2);
        if (v72)
        {
          float v73 = *((float *)a2 + 2);
          do
          {
            *(float *)&long long v10 = v73 * v72[44];
            *((_DWORD *)v72 + 44) = v10;
            BOOL v72 = *(float **)v72;
          }
          while (v72);
        }
        uint64_t v74 = *((void *)v17 + 5);
        char v75 = *(void **)(v74 + 16);
        if (v75)
        {
          float v76 = *((float *)a2 + 3);
          int32x4_t v77 = *(float **)(v74 + 16);
          do
          {
            v77[44] = v76 * v77[44];
            int32x4_t v77 = *(float **)v77;
          }
          while (v77);
          do
          {
            Phase::SpatialModeler::EarlyReflectionDetector::AddToScoreBoard(v71, (const Phase::SpatialModeler::AudibleEarlyReflection *)(v75 + 4));
            char v75 = (void *)*v75;
          }
          while (v75);
        }
      }
      else
      {
        std::allocate_shared[abi:ne180100]<Phase::SpatialModeler::EarlyReflectionDetector,std::allocator<Phase::SpatialModeler::EarlyReflectionDetector>,Phase::SpatialModeler::EarlyReflectionDetector&,void>((Phase::SpatialModeler::EarlyReflectionDetector **)buf, *((const Phase::SpatialModeler::EarlyReflectionDetector **)v17 + 5));
        IsHistogramEnergyLowerThanTheoreticalPrediction = (std::__shared_weak_count *)*((void *)v23 + 6);
        v20.i32[1] = *(_DWORD *)&buf[4];
        *(_OWORD *)(v23 + 40) = *(_OWORD *)buf;
        if (IsHistogramEnergyLowerThanTheoreticalPrediction) {
          std::__shared_weak_count::__release_shared[abi:ne180100](IsHistogramEnergyLowerThanTheoreticalPrediction);
        }
      }
      goto LABEL_31;
    }
    LODWORD(v10) = 1132462080;
    float v69 = fminf(v68 * 3.0, 256.0);
LABEL_96:
    *(float *)(v31 + 32) = v69;
    goto LABEL_97;
  }
LABEL_111:
  int32x4_t v78 = (uint64_t **)((char *)this + 20952);
  unsigned int v79 = (uint64_t *)*((void *)this + 2619);
  uint64_t v80 = (uint64_t *)((char *)this + 20960);
  if (v79 != (uint64_t *)((char *)this + 20960))
  {
    do
    {
      uint64_t v81 = v79[4];
      if (*((_DWORD *)a3 + 28) > v81
        && (uint64_t v82 = *((void *)a3 + 12), *(_DWORD *)(v82 + 24 * v81 + 20) == HIDWORD(v81))
        && *(void *)(v82 + 24 * v79[4]))
      {
        unint64_t v83 = (uint64_t *)v79[1];
        if (v83)
        {
          do
          {
            uint64_t v84 = v83;
            unint64_t v83 = (uint64_t *)*v83;
          }
          while (v83);
        }
        else
        {
          do
          {
            uint64_t v84 = (uint64_t *)v79[2];
            BOOL v64 = *v84 == (void)v79;
            unsigned int v79 = v84;
          }
          while (!v64);
        }
      }
      else
      {
        uint64_t v84 = std::__tree<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::UniqueObjectId>,std::__map_value_compare<std::pair<Phase::DspLayer::VoicePool *,long long>,std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::UniqueObjectId>,std::less<std::pair<Phase::DspLayer::VoicePool *,long long>>,true>,std::allocator<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::UniqueObjectId>>>::__remove_node_pointer((uint64_t **)this + 2619, v79);
        operator delete(v79);
      }
      unsigned int v79 = v84;
    }
    while (v84 != v80);
    unsigned int v79 = *v78;
  }
  if (v79 != v80)
  {
    uint64_t v85 = v79;
    do
    {
      *((float *)v85 + 10) = v8 * *((float *)v85 + 10);
      uint64_t v86 = (uint64_t *)v85[1];
      if (v86)
      {
        do
        {
          unint64_t v87 = v86;
          uint64_t v86 = (uint64_t *)*v86;
        }
        while (v86);
      }
      else
      {
        do
        {
          unint64_t v87 = (uint64_t *)v85[2];
          BOOL v64 = *v87 == (void)v85;
          uint64_t v85 = v87;
        }
        while (!v64);
      }
      uint64_t v85 = v87;
    }
    while (v87 != v80);
  }
  int v88 = (Phase::SpatialModeler::RayTracerState *)*((void *)a2 + 2619);
  if (v88 != (Phase::SpatialModeler::RayTracerState *)((char *)a2 + 20960))
  {
    do
    {
      float v89 = *((float *)v88 + 10);
      if (v89 > 0.0)
      {
        int v90 = (uint64_t **)*v80;
        int v91 = (uint64_t **)((char *)this + 20960);
        int v92 = (uint64_t **)((char *)this + 20960);
        if (*v80)
        {
          unint64_t v93 = *((void *)v88 + 4);
          while (1)
          {
            while (1)
            {
              int v92 = v90;
              int v94 = v90[4];
              if ((unint64_t)v94 <= v93) {
                break;
              }
              int v90 = (uint64_t **)*v92;
              int v91 = v92;
              if (!*v92) {
                goto LABEL_142;
              }
            }
            if ((unint64_t)v94 >= v93) {
              break;
            }
            int v90 = (uint64_t **)v92[1];
            if (!v90)
            {
              int v91 = v92 + 1;
              goto LABEL_142;
            }
          }
        }
        else
        {
LABEL_142:
          int v95 = operator new(0x30uLL);
          v95[4] = *((void *)v88 + 4);
          *((_DWORD *)v95 + 10) = 0;
          std::__tree<Phase::SpatialCategory>::__insert_node_at((uint64_t **)this + 2619, (uint64_t)v92, v91, v95);
          int v92 = (uint64_t **)v95;
        }
        *((float *)v92 + 10) = v89;
      }
      int32x4_t v96 = (Phase::SpatialModeler::RayTracerState *)*((void *)v88 + 1);
      if (v96)
      {
        do
        {
          int32x4_t v97 = v96;
          int32x4_t v96 = *(Phase::SpatialModeler::RayTracerState **)v96;
        }
        while (v96);
      }
      else
      {
        do
        {
          int32x4_t v97 = (Phase::SpatialModeler::RayTracerState *)*((void *)v88 + 2);
          BOOL v64 = *(void *)v97 == (void)v88;
          int v88 = v97;
        }
        while (!v64);
      }
      int v88 = v97;
    }
    while (v97 != (Phase::SpatialModeler::RayTracerState *)((char *)a2 + 20960));
    unsigned int v79 = *v78;
  }
  if (v79 != v80)
  {
    do
    {
      if (*((float *)v79 + 10) >= *((float *)a2 + 11))
      {
        BOOL v99 = (uint64_t *)v79[1];
        if (v99)
        {
          do
          {
            unint64_t v98 = v99;
            BOOL v99 = (uint64_t *)*v99;
          }
          while (v99);
        }
        else
        {
          do
          {
            unint64_t v98 = (uint64_t *)v79[2];
            BOOL v64 = *v98 == (void)v79;
            unsigned int v79 = v98;
          }
          while (!v64);
        }
      }
      else
      {
        unint64_t v98 = std::__tree<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::UniqueObjectId>,std::__map_value_compare<std::pair<Phase::DspLayer::VoicePool *,long long>,std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::UniqueObjectId>,std::less<std::pair<Phase::DspLayer::VoicePool *,long long>>,true>,std::allocator<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::UniqueObjectId>>>::__remove_node_pointer((uint64_t **)this + 2619, v79);
        operator delete(v79);
      }
      unsigned int v79 = v98;
    }
    while (v98 != v80);
  }
  Phase::SpatialModeler::countSurfaceArea((uint64_t)a3, (void *)this + 2619, (Phase::SpatialModeler::RayTracerState *)*((unsigned int *)this + 83), (uint64_t *)this + 2616, (float *)this + 4877, (float *)this + 4912, *((float *)this + 34), *((float *)this + 35));
  Phase::SpatialModeler::RayTracerState::UpdateLocalMeanFreePathAndMeanAbsorption(a2);
  Phase::SpatialModeler::RayTracerState::UpdateLocalVolumeEstimate((uint64_t)a2, (uint64_t)a3);
  unint64_t v101 = (float *)((char *)a2 + 19504);
  *int8x16_t v123 = (float)(v7 * *((float *)a2 + 4876)) + (float)(*v123 * v8);
  uint64_t v102 = *((unsigned int *)a2 + 4911);
  if (v102)
  {
    float32x4_t v103 = (long long *)((char *)a2 + 19520);
    uint64_t v104 = (_OWORD *)((char *)this + 19520);
    uint64_t v105 = *((unsigned int *)v123 + 35);
    if (v105)
    {
      uint64_t v106 = 0;
      uint64_t v107 = 4 * v105;
      memset(v126, 0, 124);
      do
      {
        *(float *)((char *)v126 + v106) = v8 * *(float *)((char *)v104 + v106);
        v106 += 4;
      }
      while (v107 != v106);
      uint64_t v108 = 0;
      uint64_t v109 = 4 * v102;
      memset(v125, 0, 124);
      do
      {
        *(float *)((char *)v125 + v108) = v7 * *(float *)((char *)v103 + v108);
        v108 += 4;
      }
      while (v109 != v108);
      uint64_t v110 = 0;
      long long v131 = 0u;
      memset(v132, 0, 28);
      long long v129 = 0u;
      long long v130 = 0u;
      long long v128 = 0u;
      memset(buf, 0, sizeof(buf));
      *(_DWORD *)&v132[28] = v105;
      do
      {
        *(float *)&buf[v110] = *(float *)((char *)v126 + v110) + *(float *)((char *)v125 + v110);
        v110 += 4;
      }
      while (v107 != v110);
      long long v111 = v131;
      *((_OWORD *)this + 1224) = v130;
      *((_OWORD *)this + 1225) = v111;
      long long v112 = *(_OWORD *)&v132[16];
      *((_OWORD *)this + 1226) = *(_OWORD *)v132;
      *((_OWORD *)this + 1227) = v112;
      long long v113 = *(_OWORD *)&buf[16];
      _OWORD *v104 = *(_OWORD *)buf;
      *((_OWORD *)this + 1221) = v113;
      long long v114 = v129;
      *((_OWORD *)this + 1222) = v128;
      *((_OWORD *)this + 1223) = v114;
    }
    else
    {
      long long v116 = *v103;
      long long v117 = *((_OWORD *)a2 + 1221);
      long long v118 = *((_OWORD *)a2 + 1223);
      *((_OWORD *)this + 1222) = *((_OWORD *)a2 + 1222);
      *((_OWORD *)this + 1223) = v118;
      _OWORD *v104 = v116;
      *((_OWORD *)this + 1221) = v117;
      long long v119 = *((_OWORD *)a2 + 1224);
      long long v120 = *((_OWORD *)a2 + 1225);
      long long v121 = *((_OWORD *)a2 + 1227);
      *((_OWORD *)this + 1226) = *((_OWORD *)a2 + 1226);
      *((_OWORD *)this + 1227) = v121;
      *((_OWORD *)this + 1224) = v119;
      *((_OWORD *)this + 1225) = v120;
    }
  }
  else
  {
    double v115 = **(NSObject ***)(Phase::Logger::GetInstance(v100) + 1184);
    if (os_log_type_enabled(v115, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "RayTracerState.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 727;
      _os_log_impl(&dword_221E5E000, v115, OS_LOG_TYPE_DEBUG, "%25s:%-5d RoomStats of new state empty.", buf, 0x12u);
    }
  }
  Phase::SpatialModeler::RayTracerState::UpdateLocalVolumeEstimate((uint64_t)this, (uint64_t)a3);
  Phase::SpatialModeler::RayTracerState::UpdateLocalRT60Estimate(this);
  Phase::SpatialModeler::RayTracerState::calculateTotalEarlyAndLateEnergy((unsigned int *)this, (_OWORD *)this + 1292, (_OWORD *)this + 1300, a3);
  v123[383] = v101[383];
}

void sub_2220397E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58)
{
  if (v58) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v58);
  }
  _Unwind_Resume(exception_object);
}

void Phase::SpatialModeler::RayTracerState::UpdateLocalMeanFreePathAndMeanAbsorption(Phase::SpatialModeler::RayTracerState *this)
{
  uint64_t v1 = (float *)((char *)this + 19504);
  if (*((_DWORD *)this + 4826))
  {
    unsigned int v2 = *((_DWORD *)this + 4824);
    unsigned int v3 = *((_DWORD *)this + 4825);
    if (v3 + v2)
    {
      float v4 = *((float *)this + 4756);
      if (!v3 || (float v5 = (float)v3, v3 <= 0x12B) && (float)((float)v2 / v5) >= 3.0)
      {
        float v5 = (float)(v3 + v2);
        float v4 = v4 + (float)(*((float *)this + 4755) * 1.1);
      }
      float v6 = v4 / v5;
    }
    else
    {
      float v6 = 0.0;
    }
    *uint64_t v1 = v6;
    Phase::SpatialModeler::GetMeanAbsorptionEstimateFromFirstAndHigherOrderTotalAbsorption((uint64_t)this + 19040, (uint64_t)this + 19168, v2, v3, (_OWORD *)this + 1220);
  }
  else
  {
    *uint64_t v1 = 0.0;
    uint64_t v7 = *((unsigned int *)this + 4911);
    if (v7)
    {
      float v8 = (_DWORD *)((char *)this + 19520);
      int v9 = *((_DWORD *)this + 14);
      do
      {
        *v8++ = v9;
        --v7;
      }
      while (v7);
    }
  }
}

void Phase::SpatialModeler::RayTracerState::UpdateLocalVolumeEstimate(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 19304;
  if (*(_DWORD *)(a1 + 19304))
  {
    float v3 = *(float *)(a1 + 19504);
    if (v3 <= 0.0 || (float v4 = *(float *)(a1 + 19508), v4 <= 0.0)) {
      float v5 = 3.4028e38;
    }
    else {
      float v5 = (float)(v3 * v4) * 0.25;
    }
    *(float *)(a1 + 19512) = v5;
  }
  else
  {
    if (*(float *)(a1 + 19508) <= 0.0)
    {
      float32x2_t v9 = vsub_f32(*(float32x2_t *)(a1 + 20992), *(float32x2_t *)(a1 + 20980));
      float v10 = vmuls_lane_f32((float)(*(float *)(a1 + 20988) - *(float *)(a1 + 20976)) * v9.f32[0], v9, 1);
      float v11 = fabsf(v10);
      int v12 = LODWORD(v10) & 0x7FFFFFFF;
      float v7 = 0.0;
      if (v12 < 2139095040) {
        float v7 = v11;
      }
      float v8 = v7 + v7;
      *(float *)(a1 + 19508) = v7 + v7;
    }
    else
    {
      Phase::SpatialModeler::GetHitShapesAABB(a2, a1 + 20952, (uint64_t)v17);
      float v7 = fabsf((float)((float)(v17[3] - v17[0]) * (float)(v17[4] - v17[1])) * (float)(v17[5] - v17[2]));
      float v8 = *(float *)(v2 + 204);
    }
    *(float *)(v2 + 208) = v7;
    float v13 = 0.0;
    if (v8 > 0.0) {
      float v13 = (float)(v7 * 4.0) / v8;
    }
    *(float *)(v2 + 200) = v13;
    uint64_t v14 = *(unsigned int *)(v2 + 340);
    if (v14)
    {
      double v15 = (_DWORD *)(v2 + 216);
      int v16 = *(_DWORD *)(a1 + 56);
      do
      {
        *v15++ = v16;
        --v14;
      }
      while (v14);
    }
  }
}

double Phase::SpatialModeler::RayTracerState::UpdateLocalRT60Estimate(Phase::SpatialModeler::RayTracerState *this)
{
  uint64_t v2 = *((unsigned int *)this + 83);
  float v3 = (char *)this + 19776;
  long long v4 = 0uLL;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  memset(v53, 0, 28);
  HIDWORD(v53[1]) = v2;
  if (v2)
  {
    bzero(&v47, 4 * v2);
    long long v4 = 0uLL;
  }
  float v5 = (float *)((char *)this + 19504);
  long long v6 = v52;
  *((_OWORD *)v3 + 4) = v51;
  *((_OWORD *)v3 + 5) = v6;
  long long v7 = v53[1];
  *((_OWORD *)v3 + 6) = v53[0];
  *((_OWORD *)v3 + 7) = v7;
  long long v8 = v48;
  *(_OWORD *)float v3 = v47;
  *((_OWORD *)v3 + 1) = v8;
  long long v9 = v50;
  *((_OWORD *)v3 + 2) = v49;
  *((_OWORD *)v3 + 3) = v9;
  *(_OWORD *)((char *)v53 + 12) = v4;
  long long v52 = v4;
  v53[0] = v4;
  long long v50 = v4;
  long long v51 = v4;
  long long v48 = v4;
  long long v49 = v4;
  long long v47 = v4;
  HIDWORD(v53[1]) = v2;
  if (v2)
  {
    bzero(&v47, 4 * v2);
    long long v10 = v52;
    *((_OWORD *)this + 1248) = v51;
    *((_OWORD *)this + 1249) = v10;
    long long v11 = v53[1];
    *((_OWORD *)this + 1250) = v53[0];
    *((_OWORD *)this + 1251) = v11;
    long long v12 = v48;
    *((_OWORD *)this + 1244) = v47;
    *((_OWORD *)this + 1245) = v12;
    long long v13 = v50;
    *((_OWORD *)this + 1246) = v49;
    *((_OWORD *)this + 1247) = v13;
    long long v52 = 0u;
    memset(v53, 0, 28);
    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v47 = 0u;
    HIDWORD(v53[1]) = v2;
    bzero(&v47, 4 * v2);
    long long v14 = v52;
    *((_OWORD *)this + 1256) = v51;
    *((_OWORD *)this + 1257) = v14;
    long long v15 = v53[1];
    *((_OWORD *)this + 1258) = v53[0];
    *((_OWORD *)this + 1259) = v15;
    long long v16 = v48;
    *((_OWORD *)this + 1252) = v47;
    *((_OWORD *)this + 1253) = v16;
    long long v17 = v50;
    *((_OWORD *)this + 1254) = v49;
    *((_OWORD *)this + 1255) = v17;
    long long v52 = 0u;
    memset(v53, 0, 28);
    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v47 = 0u;
    HIDWORD(v53[1]) = v2;
    bzero(&v47, 4 * v2);
  }
  else
  {
    long long v18 = v52;
    *((_OWORD *)this + 1248) = v51;
    *((_OWORD *)this + 1249) = v18;
    long long v19 = v53[1];
    *((_OWORD *)this + 1250) = v53[0];
    *((_OWORD *)this + 1251) = v19;
    long long v20 = v48;
    *((_OWORD *)this + 1244) = v47;
    *((_OWORD *)this + 1245) = v20;
    long long v21 = v50;
    *((_OWORD *)this + 1246) = v49;
    *((_OWORD *)this + 1247) = v21;
    *((_OWORD *)this + 1259) = 0u;
    *((_OWORD *)this + 1258) = 0u;
    *((_OWORD *)this + 1257) = 0u;
    *((_OWORD *)this + 1256) = 0u;
    *((_OWORD *)this + 1255) = 0u;
    *((_OWORD *)this + 1254) = 0u;
    *((_OWORD *)this + 1253) = 0u;
    *((_OWORD *)this + 1252) = 0u;
    memset(v53, 0, sizeof(v53));
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
  }
  long long v22 = v52;
  *((_OWORD *)this + 1288) = v51;
  *((_OWORD *)this + 1289) = v22;
  long long v23 = v53[1];
  *((_OWORD *)this + 1290) = v53[0];
  *((_OWORD *)this + 1291) = v23;
  long long v24 = v48;
  *((_OWORD *)this + 1284) = v47;
  *((_OWORD *)this + 1285) = v24;
  long long v25 = v50;
  *((_OWORD *)this + 1286) = v49;
  *((_OWORD *)this + 1287) = v25;
  uint64_t v26 = *((unsigned int *)v3 + 31);
  if (v26)
  {
    unint64_t v27 = 0;
    unint64_t v28 = *((unsigned int *)this + 115);
    float v29 = *v5;
    float v30 = (float)(*v5 * 6.0) * 2.3026;
    do
    {
      float v31 = 0.0;
      if (v27 < v28) {
        float v31 = *((float *)this + v27 + 84);
      }
      float v32 = *((float *)v3 - 64);
      if (v32 <= 0.0) {
        float v32 = *((float *)this + 14);
      }
      if (v29 > 0.0)
      {
        float v33 = 1.0;
        float v34 = fminf(fmaxf(v32, 1.0e-10), 1.0);
        float v35 = *((float *)this + 116);
        float v36 = logf(1.0 - v34);
        *(float *)float v3 = v30 / (float)((float)-(float)(v36 - (float)(v31 * v29)) * v35);
        *((float *)v3 + 32) = v30 / (float)-(float)(v36 * v35);
        uint64_t v37 = *((void *)this + 2616);
        if (v27 < (*((void *)this + 2617) - v37) >> 2)
        {
          if (*(float *)(v37 + 4 * v27) > 0.0) {
            float v33 = *(float *)(v37 + 4 * v27);
          }
          else {
            float v33 = 1.0;
          }
        }
        *((float *)v3 + 64) = v30 / (float)(v35 * (float)-(float)(logf(1.0 - (float)(v34 / v33)) - (float)(v31 * v29)));
      }
      ++v27;
      v3 += 4;
    }
    while (v26 != v27);
  }
  else
  {
    float v29 = *v5;
  }
  uint64_t v38 = Phase::SpatialModeler::TRAP::CalculateSeatbeltReverbTimeAndConfidenceFromMFP((Phase::SpatialModeler::RayTracerState *)((char *)this + 20288), (uint64_t)this + 20416, v29);
  uint64_t v39 = Phase::SpatialModeler::TRAP::TP((Phase::SpatialModeler::TRAP *)v38);
  uint64_t v40 = 0;
  HIDWORD(v53[1]) = 10;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  memset(v53, 0, 28);
  int v41 = *((_DWORD *)v39 + 112);
  do
  {
    *(_DWORD *)((char *)&v47 + v40) = v41;
    v40 += 4;
  }
  while (v40 != 40);
  long long v42 = v52;
  *((_OWORD *)this + 1264) = v51;
  *((_OWORD *)this + 1265) = v42;
  long long v43 = v53[1];
  *((_OWORD *)this + 1266) = v53[0];
  *((_OWORD *)this + 1267) = v43;
  long long v44 = v48;
  *((_OWORD *)this + 1260) = v47;
  *((_OWORD *)this + 1261) = v44;
  double result = *(double *)&v49;
  long long v46 = v50;
  *((_OWORD *)this + 1262) = v49;
  *((_OWORD *)this + 1263) = v46;
  return result;
}

float Phase::SpatialModeler::RayTracerState::UpdateLaunchedRayHistory(Phase::SpatialModeler::RayTracerState *this, unsigned int a2)
{
  uint64_t v2 = (float *)((char *)this + 21008);
  uint64_t v3 = *((unsigned int *)this + 5250);
  int v4 = *((_DWORD *)this + 5251);
  *((float *)this + v3 + 5252) = (float)a2;
  unsigned int v5 = ((int)v3 + 1) % 5u;
  if ((v4 + 1) < 5) {
    uint64_t v6 = (v4 + 1);
  }
  else {
    uint64_t v6 = 5;
  }
  *((_DWORD *)this + 5250) = v5;
  *((_DWORD *)this + 5251) = v6;
  if (v6)
  {
    uint64_t v7 = 4 * v6;
    float v8 = 0.0;
    do
    {
      float v9 = *v2++;
      float v8 = v8 + v9;
      v7 -= 4;
    }
    while (v7);
  }
  else
  {
    float v8 = 0.0;
  }
  float result = v8 / (float)v6;
  *((float *)this + 5257) = result;
  return result;
}

float Phase::SpatialModeler::RayTracerState::GetSourceListenerResult@<S0>(Phase::SpatialModeler::RayTracerState *this@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = (void *)*((void *)this + 2421);
  if (!v3) {
    goto LABEL_12;
  }
  unint64_t v4 = *a2;
  unsigned int v5 = (char *)this + 19368;
  do
  {
    unint64_t v6 = v3[4];
    BOOL v7 = v6 >= v4;
    if (v6 >= v4) {
      float v8 = v3;
    }
    else {
      float v8 = v3 + 1;
    }
    if (v7) {
      unsigned int v5 = (char *)v3;
    }
    uint64_t v3 = (void *)*v8;
  }
  while (*v8);
  if (v5 != (char *)this + 19368 && v4 >= *((void *)v5 + 4))
  {
    uint64_t v10 = *((void *)v5 + 6);
    *(void *)a3 = *((void *)v5 + 5);
    *(void *)(a3 + 8) = v10;
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v11 = *((void *)v5 + 8);
    *(void *)(a3 + 16) = *((void *)v5 + 7);
    *(void *)(a3 + 24) = v11;
    if (v11) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    }
    float result = *((float *)v5 + 18);
    *(float *)(a3 + 32) = result;
  }
  else
  {
LABEL_12:
    *(_DWORD *)(a3 + 32) = 0;
    float result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return result;
}

float Phase::SpatialModeler::RayTracerState::GetSourceListenerResult@<S0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t SoundSourceHash = Phase::SpatialModeler::GetSoundSourceHash(*a2, *a3, a4);
  float v8 = *(void **)(a1 + 19368);
  if (!v8) {
    goto LABEL_12;
  }
  float v9 = (float *)(a1 + 19368);
  do
  {
    unint64_t v10 = v8[4];
    BOOL v11 = v10 >= SoundSourceHash;
    if (v10 >= SoundSourceHash) {
      long long v12 = v8;
    }
    else {
      long long v12 = v8 + 1;
    }
    if (v11) {
      float v9 = (float *)v8;
    }
    float v8 = (void *)*v12;
  }
  while (*v12);
  if (v9 != (float *)(a1 + 19368) && SoundSourceHash >= *((void *)v9 + 4))
  {
    uint64_t v14 = *((void *)v9 + 6);
    *(void *)a5 = *((void *)v9 + 5);
    *(void *)(a5 + 8) = v14;
    if (v14) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v15 = *((void *)v9 + 8);
    *(void *)(a5 + 16) = *((void *)v9 + 7);
    *(void *)(a5 + 24) = v15;
    if (v15) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
    }
    float result = v9[18];
    *(float *)(a5 + 32) = result;
  }
  else
  {
LABEL_12:
    *(_DWORD *)(a5 + 32) = 0;
    float result = 0.0;
    *(_OWORD *)a5 = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
  }
  return result;
}

void Phase::SpatialModeler::RayTracerState::calculateTotalSpecularEarlyEnergy(Phase::SpatialModeler::RayTracerState *this@<X0>, char *a2@<X8>)
{
  uint64_t v3 = (float *)a2;
  uint64_t v4 = *((unsigned int *)this + 83);
  *(_OWORD *)a2 = 0u;
  *((_OWORD *)a2 + 1) = 0u;
  *((_OWORD *)a2 + 2) = 0u;
  *((_OWORD *)a2 + 3) = 0u;
  *((_OWORD *)a2 + 4) = 0u;
  *((_OWORD *)a2 + 5) = 0u;
  *((_OWORD *)a2 + 6) = 0u;
  *(_OWORD *)(a2 + 108) = 0u;
  *((_DWORD *)a2 + 31) = v4;
  if (v4) {
    bzero(a2, 4 * v4);
  }
  unsigned int v5 = (Phase::SpatialModeler::RayTracerState *)*((void *)this + 2420);
  if (v5 != (Phase::SpatialModeler::RayTracerState *)((char *)this + 19368))
  {
    int v6 = 0;
    do
    {
      EarlyReflections = Phase::SpatialModeler::EarlyReflectionDetector::FindEarlyReflections(*((Phase::SpatialModeler::EarlyReflectionDetector **)v5 + 5), *((_DWORD *)this + 22), 0, 343.0);
      uint64_t v8 = *(void *)EarlyReflections;
      uint64_t v9 = *((void *)EarlyReflections + 1);
      if (*(void *)EarlyReflections != v9)
      {
        float v10 = *((float *)this + 116);
        uint64_t v11 = *(void *)EarlyReflections;
        do
        {
          if (v4)
          {
            uint64_t v12 = 0;
            float v13 = 1.0 / (float)(v10 * *(float *)(v11 + 12));
            do
            {
              float v14 = fabsf(*(float *)(v11 + v12 * 4 + 16));
              v3[v12] = v3[v12] + (float)((float)(v13 * v14) * (float)(v13 * v14));
              ++v12;
            }
            while (v4 != v12);
          }
          v11 += 288;
        }
        while (v11 != v9);
      }
      if (v9 != v8) {
        ++v6;
      }
      uint64_t v15 = (Phase::SpatialModeler::RayTracerState *)*((void *)v5 + 1);
      if (v15)
      {
        do
        {
          long long v16 = v15;
          uint64_t v15 = *(Phase::SpatialModeler::RayTracerState **)v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          long long v16 = (Phase::SpatialModeler::RayTracerState *)*((void *)v5 + 2);
          BOOL v17 = *(void *)v16 == (void)v5;
          unsigned int v5 = v16;
        }
        while (!v17);
      }
      unsigned int v5 = v16;
    }
    while (v16 != (Phase::SpatialModeler::RayTracerState *)((char *)this + 19368));
    if (v6 > 1 && v4)
    {
      do
      {
        *uint64_t v3 = (float)(1.0 / (float)v6) * *v3;
        ++v3;
        --v4;
      }
      while (v4);
    }
  }
}

double Phase::SpatialModeler::RayTracerState::calculateTotalEarlyAndLateEnergy(unsigned int *a1, _OWORD *a2, _OWORD *a3, Phase::Geometry::SystemState *a4)
{
  uint64_t v7 = a1[83];
  Phase::SpatialModeler::RayTracerState::predictTotalRoomEnergy((Phase::SpatialModeler::RayTracerState *)a1, a4, v32);
  Phase::SpatialModeler::RayTracerState::calculateTotalSpecularEarlyEnergy((Phase::SpatialModeler::RayTracerState *)a1, (char *)&v25);
  long long v8 = v30;
  a2[4] = v29;
  a2[5] = v8;
  long long v9 = *(_OWORD *)&v31[16];
  a2[6] = *(_OWORD *)v31;
  a2[7] = v9;
  long long v10 = v26;
  *a2 = v25;
  a2[1] = v10;
  long long v11 = v28;
  a2[2] = v27;
  a2[3] = v11;
  long long v30 = 0u;
  memset(v31, 0, 28);
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v25 = 0u;
  *(_DWORD *)&v31[28] = v7;
  if (v7)
  {
    bzero(&v25, 4 * v7);
    long long v12 = v30;
    a3[4] = v29;
    a3[5] = v12;
    long long v13 = *(_OWORD *)&v31[16];
    a3[6] = *(_OWORD *)v31;
    a3[7] = v13;
    long long v14 = v26;
    *a3 = v25;
    a3[1] = v14;
    long long v15 = v28;
    long long v16 = (float *)v32;
    a3[2] = v27;
    a3[3] = v15;
    double result = 0.0;
    do
    {
      float v18 = *v16++;
      float v19 = v18;
      float v20 = *(float *)a2;
      a2 = (_OWORD *)((char *)a2 + 4);
      *(float *)a3 = fmaxf(v19 - v20, 0.0);
      a3 = (_OWORD *)((char *)a3 + 4);
      --v7;
    }
    while (v7);
  }
  else
  {
    long long v21 = v30;
    a3[4] = v29;
    a3[5] = v21;
    long long v22 = *(_OWORD *)&v31[16];
    a3[6] = *(_OWORD *)v31;
    a3[7] = v22;
    long long v23 = v26;
    *a3 = v25;
    a3[1] = v23;
    double result = *(double *)&v27;
    long long v24 = v28;
    a3[2] = v27;
    a3[3] = v24;
  }
  return result;
}

void Phase::SpatialModeler::RayTracerState::predictTotalRoomEnergy(Phase::SpatialModeler::RayTracerState *this@<X0>, Phase::Geometry::SystemState *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  uint64_t v6 = *((unsigned int *)this + 83);
  long long v42 = 0u;
  memset(v43, 0, 28);
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long __b = 0u;
  *(_DWORD *)&v43[28] = v6;
  if (v6) {
    bzero(&__b, 4 * v6);
  }
  uint64_t v7 = *((void *)this + 2366);
  if (*((void *)this + 2367) != v7)
  {
    if (*((unsigned char *)this + 180))
    {
      if (v6) {
        memset_pattern16(&__b, &unk_2220E7DF0, 4 * v6);
      }
      Phase::SpatialModeler::CalculateSoundPowerRelativeToOmni((Phase::Logger *)&__b, *(int **)(*(void *)this + 51936), v6);
    }
    else
    {
      unint64_t v8 = 0;
      do
      {
        Phase::SpatialModeler::getSoundPowerRelativeToOmni((uint64_t)a2, *(void *)(v7 + 56 * v8 + 40), v6, v36);
        uint64_t v9 = *(unsigned int *)&v43[28];
        memset(buf, 0, sizeof(buf));
        long long v45 = 0u;
        long long v46 = 0u;
        long long v47 = 0u;
        long long v48 = 0u;
        memset(v49, 0, 28);
        *(_DWORD *)&v49[28] = *(_DWORD *)&v43[28];
        if (*(_DWORD *)&v43[28])
        {
          long long v10 = buf;
          long long v11 = (float *)v36;
          p_b = (float *)&__b;
          do
          {
            float v13 = *p_b++;
            float v14 = v13;
            float v15 = *v11++;
            *(float *)long long v10 = v14 + v15;
            v10 += 4;
            --v9;
          }
          while (v9);
        }
        long long v41 = v47;
        long long v42 = v48;
        *(_OWORD *)long long v43 = *(_OWORD *)v49;
        *(_OWORD *)&v43[16] = *(_OWORD *)&v49[16];
        long long __b = *(_OWORD *)buf;
        long long v38 = *(_OWORD *)&buf[16];
        long long v39 = v45;
        long long v40 = v46;
        ++v8;
        uint64_t v7 = *((void *)this + 2366);
        unint64_t v16 = 0x6DB6DB6DB6DB6DB7 * ((*((void *)this + 2367) - v7) >> 3);
      }
      while (v8 < v16);
      uint64_t v17 = *(unsigned int *)&v43[28];
      memset(buf, 0, sizeof(buf));
      long long v45 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      memset(v49, 0, 28);
      *(_DWORD *)&v49[28] = *(_DWORD *)&v43[28];
      if (*(_DWORD *)&v43[28])
      {
        float v18 = 1.0 / (float)v16;
        float v19 = buf;
        float v20 = (float *)&__b;
        do
        {
          float v21 = *v20++;
          *(float *)float v19 = v18 * v21;
          v19 += 4;
          --v17;
        }
        while (v17);
      }
      long long v41 = v47;
      long long v42 = v48;
      *(_OWORD *)long long v43 = *(_OWORD *)v49;
      *(_OWORD *)&v43[16] = *(_OWORD *)&v49[16];
      long long __b = *(_OWORD *)buf;
      long long v38 = *(_OWORD *)&buf[16];
      long long v39 = v45;
      long long v40 = v46;
    }
  }
  *(_OWORD *)((char *)a3 + 108) = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  *((_DWORD *)a3 + 31) = v6;
  if (v6)
  {
    long long v22 = (float *)((char *)this + 19776);
    bzero(a3, 4 * v6);
    float v23 = *((float *)this + 4878) + 1.0e-10;
    long long v24 = (float *)&__b;
    do
    {
      float v25 = *v24++;
      float v26 = v25;
      float v27 = *v22++;
      *(float *)a3 = (float)((float)(v26 * 308.0) * v27) / v23;
      a3 = (_OWORD *)((char *)a3 + 4);
      --v6;
    }
    while (v6);
  }
  uint64_t v28 = *(unsigned int *)&v43[28];
  float v29 = *(float *)&__b;
  if (*(unsigned int *)&v43[28] <= 1uLL) {
    float v29 = 0.0;
  }
  if (*(_DWORD *)&v43[28])
  {
    long long v30 = (float *)&__b;
    do
    {
      float v31 = *v30++;
      float v32 = v31;
      if (v29 < v31) {
        float v29 = v32;
      }
      --v28;
    }
    while (v28);
  }
  float v33 = v29 + 1.0e-15;
  if ((float)(log10f(v33) * 10.0) < -60.0)
  {
    float v35 = **(NSObject ***)(Phase::Logger::GetInstance(v34) + 1184);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "RayTracerState.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1111;
      _os_log_impl(&dword_221E5E000, v35, OS_LOG_TYPE_DEBUG, "%25s:%-5d The source(s) directivity reduced sound power by more than 60dB.", buf, 0x12u);
    }
  }
}

void Phase::SpatialModeler::RayTracerState::GetSumSharedReverbEnergy(Phase::SpatialModeler::RayTracerState *this@<X0>, _OWORD *a2@<X8>)
{
  if (*(void *)this)
  {
    uint64_t v4 = *(void *)(*(void *)this + 48);
    *a2 = 0u;
    a2[1] = 0u;
    a2[2] = 0u;
    a2[3] = 0u;
    a2[4] = 0u;
    a2[5] = 0u;
    a2[6] = 0u;
    *(_OWORD *)((char *)a2 + 108) = 0u;
    *((_DWORD *)a2 + 31) = v4;
    if (v4) {
      bzero(a2, 4 * v4);
    }
  }
  else
  {
    LODWORD(v4) = 0;
    a2[6] = 0u;
    a2[7] = 0u;
    a2[4] = 0u;
    a2[5] = 0u;
    a2[2] = 0u;
    a2[3] = 0u;
    *a2 = 0u;
    a2[1] = 0u;
  }
  for (uint64_t i = (void *)*((void *)this + 2430); i; uint64_t i = (void *)*i)
  {
    if (v4)
    {
      uint64_t v6 = i[8];
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = 0;
        int v9 = *(unsigned __int8 *)(v6 + 36);
        do
        {
          float v10 = 0.0;
          if (!v9)
          {
            int v11 = *(_DWORD *)(v6 + 24);
            if (v11)
            {
              long long v12 = (float *)(*(void *)(v6 + 8) + v7);
              do
              {
                float v10 = v10 + *v12;
                v12 += *(unsigned int *)(v6 + 28);
                --v11;
              }
              while (v11);
            }
          }
          *((float *)a2 + v8) = v10 + *((float *)a2 + v8);
          ++v8;
          v7 += 4;
        }
        while (v8 != v4);
      }
    }
  }
}

float Phase::SpatialModeler::RayTracerState::GetSharedEnergyReFixedDb(Phase::SpatialModeler::RayTracerState *this, unint64_t *a2)
{
  uint64_t v3 = (float *)std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::find<unsigned long long>((void *)this + 2428, a2);
  if (!v3) {
    return *((float *)this + 41);
  }
  uint64_t v4 = v3;
  float v5 = *((float *)this + 41);
  float v6 = expf((float)((float)(v5 * 10.0) / 10.0) * 0.23026) * (float)*((unsigned int *)this + 83);
  float v7 = v4[20];
  if (v7 >= v6)
  {
    float v8 = v7 / *((float *)this + 120);
    if (v8 <= 0.0) {
      float v8 = COERCE_FLOAT(1);
    }
    return (float)((float)(logf(v8) * 4.3429) / 10.0) * 10.0;
  }
  return v5;
}

void Phase::SpatialModeler::GetMeanAbsorptionEstimateFromFirstAndHigherOrderTotalAbsorption(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, _OWORD *a5)
{
  int v9 = (float *)a1;
  uint64_t v10 = *(unsigned int *)(a1 + 124);
  long long __b = 0u;
  long long v67 = 0u;
  long long v68 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  long long v71 = 0u;
  memset(v72, 0, 28);
  *(_DWORD *)&v72[28] = v10;
  if (v10) {
    memset_pattern16(&__b, &unk_2220E7DE0, 4 * v10);
  }
  if (a4 + a3)
  {
    if (a4 < 0x3E9)
    {
      long long v22 = 0uLL;
      long long v64 = 0u;
      memset(v65, 0, 28);
      long long v62 = 0u;
      long long v63 = 0u;
      long long v60 = 0u;
      long long v61 = 0u;
      long long v59 = 0u;
      *(_DWORD *)&v65[28] = v10;
      if (v10)
      {
        memset_pattern16(&v59, &unk_2220E7DE0, 4 * v10);
        long long v22 = 0uLL;
      }
      float v23 = (float)a4;
      uint64_t v24 = *(unsigned int *)(a2 + 124);
      long long v52 = v22;
      long long v53 = v22;
      long long v54 = v22;
      long long v55 = v22;
      long long v56 = v22;
      long long v57 = v22;
      *(_OWORD *)float32x4_t v58 = v22;
      *(_OWORD *)&v58[12] = v22;
      *(_DWORD *)&v58[28] = v24;
      if (v24) {
        memset_pattern16(&v52, &unk_2220E7DE0, 4 * v24);
      }
      float v25 = (float)a3;
      if (a3)
      {
        long long v50 = 0u;
        memset(v51, 0, 28);
        long long v48 = 0u;
        long long v49 = 0u;
        long long v46 = 0u;
        long long v47 = 0u;
        long long v45 = 0u;
        *(_DWORD *)&v51[28] = v10;
        if (v10)
        {
          float v26 = (float *)&v45;
          do
          {
            float v27 = *v9++;
            *v26++ = v27 / v25;
            --v10;
          }
          while (v10);
        }
        long long v63 = v49;
        long long v64 = v50;
        *(_OWORD *)int v65 = *(_OWORD *)v51;
        *(_OWORD *)&v65[16] = *(_OWORD *)&v51[16];
        long long v59 = v45;
        long long v60 = v46;
        long long v61 = v47;
        long long v62 = v48;
      }
      if (a4)
      {
        long long v50 = 0u;
        memset(v51, 0, 28);
        long long v48 = 0u;
        long long v49 = 0u;
        long long v46 = 0u;
        long long v47 = 0u;
        long long v45 = 0u;
        *(_DWORD *)&v51[28] = v24;
        if (v24)
        {
          uint64_t v28 = (float *)&v45;
          do
          {
            float v29 = *(float *)a2;
            a2 += 4;
            *v28++ = v29 / v23;
            --v24;
          }
          while (v24);
        }
        long long v56 = v49;
        long long v57 = v50;
        *(_OWORD *)float32x4_t v58 = *(_OWORD *)v51;
        *(_OWORD *)&v58[16] = *(_OWORD *)&v51[16];
        long long v52 = v45;
        long long v53 = v46;
        long long v54 = v47;
        long long v55 = v48;
      }
      float v30 = (float)(v25 / (float)(a4 + a3)) * (float)((float)(v23 / -1000.0) + 1.0);
      uint64_t v31 = *(unsigned int *)&v65[28];
      if (*(_DWORD *)&v65[28])
      {
        float v32 = (float *)&v59;
        uint64_t v33 = *(unsigned int *)&v65[28];
        do
        {
          *float v32 = v30 * *v32;
          ++v32;
          --v33;
        }
        while (v33);
      }
      uint64_t v34 = *(unsigned int *)&v58[28];
      if (*(_DWORD *)&v58[28])
      {
        float v35 = (float *)&v52;
        do
        {
          *float v35 = (float)(1.0 - v30) * *v35;
          ++v35;
          --v34;
        }
        while (v34);
      }
      long long v50 = 0u;
      memset(v51, 0, 28);
      long long v48 = 0u;
      long long v49 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      long long v45 = 0u;
      *(_DWORD *)&v51[28] = v31;
      if (v31)
      {
        float v36 = (float *)&v45;
        uint64_t v37 = (float *)&v52;
        long long v38 = (float *)&v59;
        do
        {
          float v39 = *v38++;
          float v40 = v39;
          float v41 = *v37++;
          *v36++ = v40 + v41;
          --v31;
        }
        while (v31);
      }
      long long v42 = v50;
      a5[4] = v49;
      a5[5] = v42;
      long long v43 = *(_OWORD *)&v51[16];
      a5[6] = *(_OWORD *)v51;
      a5[7] = v43;
      long long v44 = v46;
      *a5 = v45;
      a5[1] = v44;
      long long v17 = v47;
      long long v18 = v48;
    }
    else
    {
      uint64_t v11 = *(unsigned int *)(a2 + 124);
      long long v59 = 0u;
      long long v60 = 0u;
      long long v61 = 0u;
      long long v62 = 0u;
      long long v63 = 0u;
      long long v64 = 0u;
      memset(v65, 0, 28);
      *(_DWORD *)&v65[28] = v11;
      if (v11)
      {
        long long v12 = (float *)&v59;
        do
        {
          float v13 = *(float *)a2;
          a2 += 4;
          *v12++ = v13 / (float)a4;
          --v11;
        }
        while (v11);
      }
      long long v14 = v64;
      a5[4] = v63;
      a5[5] = v14;
      long long v15 = *(_OWORD *)&v65[16];
      a5[6] = *(_OWORD *)v65;
      a5[7] = v15;
      long long v16 = v60;
      *a5 = v59;
      a5[1] = v16;
      long long v17 = v61;
      long long v18 = v62;
    }
  }
  else
  {
    long long v19 = v71;
    a5[4] = v70;
    a5[5] = v19;
    long long v20 = *(_OWORD *)&v72[16];
    a5[6] = *(_OWORD *)v72;
    a5[7] = v20;
    long long v21 = v67;
    *a5 = __b;
    a5[1] = v21;
    long long v17 = v68;
    long long v18 = v69;
  }
  a5[2] = v17;
  a5[3] = v18;
}

double Phase::SpatialModeler::RayTracerState::CalculateRoomStats(Phase::SpatialModeler::RayTracerState *this, Phase::Geometry::SystemState *a2)
{
  Phase::SpatialModeler::countSurfaceArea((uint64_t)a2, (void *)this + 2619, (Phase::SpatialModeler::RayTracerState *)*((unsigned int *)this + 83), (uint64_t *)this + 2616, (float *)this + 4877, (float *)this + 4912, *((float *)this + 34), *((float *)this + 35));
  Phase::SpatialModeler::RayTracerState::UpdateLocalMeanFreePathAndMeanAbsorption(this);
  Phase::SpatialModeler::RayTracerState::UpdateLocalVolumeEstimate((uint64_t)this, (uint64_t)a2);
  Phase::SpatialModeler::RayTracerState::UpdateLocalRT60Estimate(this);

  return Phase::SpatialModeler::RayTracerState::calculateTotalEarlyAndLateEnergy((unsigned int *)this, (_OWORD *)this + 1292, (_OWORD *)this + 1300, a2);
}

float Phase::SpatialModeler::RayTracerState::getSumOfActiveRays(Phase::SpatialModeler::RayTracerState *this)
{
  uint64_t v1 = (Phase::SpatialModeler::RayTracerState *)*((void *)this + 2420);
  if (v1 == (Phase::SpatialModeler::RayTracerState *)((char *)this + 19368)) {
    return (float)*((unsigned int *)this + 4754);
  }
  float result = 0.0;
  do
  {
    uint64_t v3 = *((void *)v1 + 7);
    if (v3 && !*(unsigned char *)(v3 + 36)) {
      float result = result + *((float *)v1 + 18);
    }
    uint64_t v4 = (Phase::SpatialModeler::RayTracerState *)*((void *)v1 + 1);
    if (v4)
    {
      do
      {
        float v5 = v4;
        uint64_t v4 = *(Phase::SpatialModeler::RayTracerState **)v4;
      }
      while (v4);
    }
    else
    {
      do
      {
        float v5 = (Phase::SpatialModeler::RayTracerState *)*((void *)v1 + 2);
        BOOL v6 = *(void *)v5 == (void)v1;
        uint64_t v1 = v5;
      }
      while (!v6);
    }
    uint64_t v1 = v5;
  }
  while (v5 != (Phase::SpatialModeler::RayTracerState *)((char *)this + 19368));
  if (result == 0.0) {
    return (float)*((unsigned int *)this + 4754);
  }
  return result;
}

float Phase::SpatialModeler::RayTracerState::getMinNumberOfActiveRaysAmongSources(Phase::SpatialModeler::RayTracerState *this)
{
  uint64_t v1 = (Phase::SpatialModeler::RayTracerState *)*((void *)this + 2420);
  if (v1 == (Phase::SpatialModeler::RayTracerState *)((char *)this + 19368))
  {
    float result = 3.4028e38;
  }
  else
  {
    float result = 3.4028e38;
    do
    {
      uint64_t v3 = *((void *)v1 + 7);
      if (v3 && !*(unsigned char *)(v3 + 36)) {
        float result = fminf(*((float *)v1 + 18), result);
      }
      uint64_t v4 = (Phase::SpatialModeler::RayTracerState *)*((void *)v1 + 1);
      if (v4)
      {
        do
        {
          float v5 = v4;
          uint64_t v4 = *(Phase::SpatialModeler::RayTracerState **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          float v5 = (Phase::SpatialModeler::RayTracerState *)*((void *)v1 + 2);
          BOOL v6 = *(void *)v5 == (void)v1;
          uint64_t v1 = v5;
        }
        while (!v6);
      }
      uint64_t v1 = v5;
    }
    while (v5 != (Phase::SpatialModeler::RayTracerState *)((char *)this + 19368));
  }
  if (result > 3.4e37) {
    return 0.0;
  }
  return result;
}

void Phase::SpatialModeler::RayTracerState::descriptionString(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v9[0] = 0;
  v9[1] = 0;
  uint64_t v10 = 0;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v8 = 0;
  if (*(void *)a1)
  {
    if (*(_DWORD *)(*(void *)a1 + 32) == 2) {
      float v5 = "ER ";
    }
    else {
      float v5 = "LR ";
    }
    MEMORY[0x223C933A0](v9, v5);
    if (a2)
    {
      if (*(unsigned char *)(a2 + 48)) {
        BOOL v6 = "Attack";
      }
      else {
        BOOL v6 = "Sustain";
      }
    }
    else
    {
      BOOL v6 = (const char *)&str_6_1;
    }
  }
  else
  {
    MEMORY[0x223C933A0](v9, "Uninitialized");
    BOOL v6 = "N/A";
  }
  MEMORY[0x223C933A0](__p, v6);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)v9, (const void **)__p, a3);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v10) < 0) {
    operator delete(v9[0]);
  }
}

void sub_22203ACF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **std::__tree<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::__tree_node<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,void *> *,long>>(uint64_t **result, void *a2, void *a3)
{
  float v5 = result;
  if (result[2])
  {
    BOOL v6 = *result;
    uint64_t v8 = result + 1;
    float v7 = result[1];
    *float result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      uint64_t v9 = v6[1];
    }
    else {
      uint64_t v9 = (uint64_t)v6;
    }
    float v30 = result;
    uint64_t v31 = (void *)v9;
    uint64_t v32 = v9;
    if (v9)
    {
      uint64_t v10 = std::__tree<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>>>::_DetachedTreeCache::__detach_next(v9);
      uint64_t v31 = v10;
      if (a2 != a3)
      {
        uint64_t v11 = a2;
        do
        {
          uint64_t v12 = (uint64_t)v10;
          unint64_t v13 = v11[4];
          *(void *)(v9 + 32) = v13;
          long long v14 = *(_OWORD *)(v11 + 5);
          long long v15 = *(_OWORD *)(v11 + 7);
          *(void *)(v9 + 72) = v11[9];
          *(_OWORD *)(v9 + 56) = v15;
          *(_OWORD *)(v9 + 40) = v14;
          long long v16 = *v8;
          long long v17 = v5 + 1;
          long long v18 = v5 + 1;
          if (*v8)
          {
            do
            {
              while (1)
              {
                long long v17 = (uint64_t **)v16;
                if (v13 >= v16[4]) {
                  break;
                }
                long long v16 = (uint64_t *)*v16;
                long long v18 = v17;
                if (!*v17) {
                  goto LABEL_14;
                }
              }
              long long v16 = (uint64_t *)v16[1];
            }
            while (v16);
            long long v18 = v17 + 1;
          }
LABEL_14:
          std::__tree<Phase::SpatialCategory>::__insert_node_at(v5, (uint64_t)v17, v18, (uint64_t *)v9);
          if (v12) {
            uint64_t v10 = std::__tree<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>>>::_DetachedTreeCache::__detach_next(v12);
          }
          else {
            uint64_t v10 = 0;
          }
          long long v19 = (void *)v11[1];
          if (v19)
          {
            do
            {
              a2 = v19;
              long long v19 = (void *)*v19;
            }
            while (v19);
          }
          else
          {
            do
            {
              a2 = (void *)v11[2];
              BOOL v20 = *a2 == (void)v11;
              uint64_t v11 = a2;
            }
            while (!v20);
          }
          if (!v12) {
            break;
          }
          uint64_t v9 = v12;
          uint64_t v11 = a2;
        }
        while (a2 != a3);
        uint64_t v31 = v10;
        uint64_t v32 = v12;
      }
    }
    float result = (uint64_t **)std::__tree<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v30);
  }
  if (a2 != a3)
  {
    long long v21 = v5 + 1;
    do
    {
      long long v22 = operator new(0x50uLL);
      long long v24 = *((_OWORD *)a2 + 3);
      long long v23 = *((_OWORD *)a2 + 4);
      v22[2] = *((_OWORD *)a2 + 2);
      v22[3] = v24;
      v22[4] = v23;
      float v25 = *v21;
      float v26 = v5 + 1;
      float v27 = v5 + 1;
      if (*v21)
      {
        do
        {
          while (1)
          {
            float v26 = (uint64_t **)v25;
            if (*((void *)v22 + 4) >= (unint64_t)v25[4]) {
              break;
            }
            float v25 = (uint64_t *)*v25;
            float v27 = v26;
            if (!*v26) {
              goto LABEL_34;
            }
          }
          float v25 = (uint64_t *)v25[1];
        }
        while (v25);
        float v27 = v26 + 1;
      }
LABEL_34:
      float result = (uint64_t **)std::__tree<Phase::SpatialCategory>::__insert_node_at(v5, (uint64_t)v26, v27, (uint64_t *)v22);
      uint64_t v28 = (void *)a2[1];
      if (v28)
      {
        do
        {
          float v29 = v28;
          uint64_t v28 = (void *)*v28;
        }
        while (v28);
      }
      else
      {
        do
        {
          float v29 = (void *)a2[2];
          BOOL v20 = *v29 == (void)a2;
          a2 = v29;
        }
        while (!v20);
      }
      a2 = v29;
    }
    while (v29 != a3);
  }
  return result;
}

void *std::__tree<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>>>::_DetachedTreeCache::__detach_next(uint64_t a1)
{
  float result = *(void **)(a1 + 16);
  if (result)
  {
    uint64_t v3 = (void *)*result;
    if (*result == a1)
    {
      *float result = 0;
      while (1)
      {
        uint64_t v4 = (void *)result[1];
        if (!v4) {
          break;
        }
        do
        {
          float result = v4;
          uint64_t v4 = (void *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; uint64_t v3 = (void *)result[1])
      {
        do
        {
          float result = v3;
          uint64_t v3 = (void *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

uint64_t std::__tree<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<Phase::SpatialCategory>::destroy(*(void *)a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<Phase::SpatialCategory>::destroy(*(void *)a1, v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>>>::__deallocate_node(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

uint64_t **std::__tree<std::__value_type<unsigned long long,Phase::SpatialModeler::SourceListenerResult>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Phase::SpatialModeler::SourceListenerResult>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Phase::SpatialModeler::SourceListenerResult>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t **a1, unint64_t a2, void *a3)
{
  BOOL v6 = a1 + 1;
  float v5 = a1[1];
  float v7 = a1 + 1;
  uint64_t v8 = a1 + 1;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v9 <= a2) {
          break;
        }
        float v5 = *v8;
        float v7 = v8;
        if (!*v8) {
          goto LABEL_8;
        }
      }
      if (v9 >= a2) {
        break;
      }
      float v5 = v8[1];
      if (!v5)
      {
        float v7 = v8 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    uint64_t v10 = (char *)operator new(0x50uLL);
    v12[1] = v6;
    *((void *)v10 + 4) = *a3;
    *(_OWORD *)(v10 + 40) = 0u;
    *(_OWORD *)(v10 + 56) = 0u;
    *((void *)v10 + 9) = 0;
    char v13 = 1;
    std::__tree<Phase::SpatialCategory>::__insert_node_at(a1, (uint64_t)v8, v7, (uint64_t *)v10);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<unsigned long long,Phase::SpatialModeler::SourceListenerResult>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long long,Phase::SpatialModeler::SourceListenerResult>,void *>>>>::reset[abi:ne180100]((uint64_t)v12);
    return (uint64_t **)v10;
  }
  return v8;
}

void std::unique_ptr<std::__tree_node<std::__value_type<unsigned long long,Phase::SpatialModeler::SourceListenerResult>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long long,Phase::SpatialModeler::SourceListenerResult>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<unsigned long long const,Phase::SpatialModeler::SourceListenerResult>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

Phase::SpatialModeler::EarlyReflectionDetector *std::allocate_shared[abi:ne180100]<Phase::SpatialModeler::EarlyReflectionDetector,std::allocator<Phase::SpatialModeler::EarlyReflectionDetector>,Phase::SpatialModeler::EarlyReflectionDetector&,void>(Phase::SpatialModeler::EarlyReflectionDetector **a1, const Phase::SpatialModeler::EarlyReflectionDetector *a2)
{
  uint64_t v4 = operator new(0xA0uLL);
  v4[1] = 0;
  v4[2] = 0;
  void *v4 = &unk_26D47A2F8;
  float result = Phase::SpatialModeler::EarlyReflectionDetector::EarlyReflectionDetector((Phase::SpatialModeler::EarlyReflectionDetector *)(v4 + 3), a2);
  *a1 = result;
  a1[1] = (Phase::SpatialModeler::EarlyReflectionDetector *)v4;
  return result;
}

void sub_22203B1C8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Phase::SpatialModeler::EarlyReflectionDetector>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D47A2F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Phase::SpatialModeler::EarlyReflectionDetector>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D47A2F8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C938A0);
}

uint64_t std::__shared_ptr_emplace<Phase::SpatialModeler::EarlyReflectionDetector>::__on_zero_shared(void *a1)
{
  uint64_t v2 = (void *)a1[17];
  if (v2)
  {
    a1[18] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[14];
  if (v3)
  {
    a1[15] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[11];
  if (v4)
  {
    a1[12] = v4;
    operator delete(v4);
  }
  float v5 = (void *)a1[8];
  if (v5)
  {
    a1[9] = v5;
    operator delete(v5);
  }

  return std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)(a1 + 3));
}

char *std::vector<Phase::SpatialModeler::PhaseRoomSimulationSoundSource>::__push_back_slow_path<Phase::SpatialModeler::PhaseRoomSimulationSoundSource const&>(char **a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492) {
    std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x249249249249249) {
    unint64_t v9 = 0x492492492492492;
  }
  else {
    unint64_t v9 = v5;
  }
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::SpatialModeler::EntityShapeTemplate>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[56 * v4];
  uint64_t v12 = &v10[56 * v9];
  *(void *)uint64_t v11 = *(void *)a2;
  *((_DWORD *)v11 + 2) = *(_DWORD *)(a2 + 8);
  *((_DWORD *)v11 + 3) = *(_DWORD *)(a2 + 12);
  *((_DWORD *)v11 + 4) = *(_DWORD *)(a2 + 16);
  *((_DWORD *)v11 + 5) = *(_DWORD *)(a2 + 20);
  *((_DWORD *)v11 + 6) = *(_DWORD *)(a2 + 24);
  *((_DWORD *)v11 + 7) = *(_DWORD *)(a2 + 28);
  *((_DWORD *)v11 + 8) = *(_DWORD *)(a2 + 32);
  *((_DWORD *)v11 + 9) = *(_DWORD *)(a2 + 36);
  *(_OWORD *)(v11 + 40) = *(_OWORD *)(a2 + 40);
  char v13 = v11 + 56;
  long long v15 = *a1;
  long long v14 = a1[1];
  if (v14 != *a1)
  {
    uint64_t v16 = 0;
    do
    {
      long long v17 = &v11[v16];
      *((_DWORD *)v17 - 12) = *(_DWORD *)&v14[v16 - 48];
      *((_DWORD *)v17 - 11) = *(_DWORD *)&v14[v16 - 44];
      *((_DWORD *)v17 - 10) = *(_DWORD *)&v14[v16 - 40];
      *((_DWORD *)v17 - 9) = *(_DWORD *)&v14[v16 - 36];
      *((_DWORD *)v17 - 8) = *(_DWORD *)&v14[v16 - 32];
      uint64_t v18 = *(void *)&v14[v16 - 56];
      *((_DWORD *)v17 - 7) = *(_DWORD *)&v14[v16 - 28];
      *((_DWORD *)v17 - 6) = *(_DWORD *)&v14[v16 - 24];
      int v19 = *(_DWORD *)&v14[v16 - 20];
      *((void *)v17 - 7) = v18;
      *((_DWORD *)v17 - 5) = v19;
      *((_OWORD *)v17 - 1) = *(_OWORD *)&v14[v16 - 16];
      v16 -= 56;
    }
    while (&v14[v16] != v15);
    long long v14 = *a1;
    v11 += v16;
  }
  *a1 = v11;
  a1[1] = v13;
  a1[2] = v12;
  if (v14) {
    operator delete(v14);
  }
  return v13;
}

double _ZNSt3__115allocate_sharedB8ne180100IN5Phase14SpatialModeler20DirectivityHistogramENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(void *a1)
{
  uint64_t v2 = operator new(0x1D8uLL);
  v2[1] = 0;
  v2[2] = 0;
  *uint64_t v2 = &unk_26D47A330;
  v2[5] = 0;
  v2[6] = 0;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((unsigned char *)v2 + 60) = 1;
  v2[8] = 0;
  v2[9] = 0;
  *((_DWORD *)v2 + 20) = 0;
  *(void *)&double result = 1065353216;
  *(void *)((char *)v2 + 84) = 1065353216;
  *(void *)((char *)v2 + 92) = 0;
  *(void *)((char *)v2 + 100) = -3229614080;
  v2[3] = &unk_26D474720;
  v2[4] = 0;
  v2[18] = 0;
  v2[15] = 0;
  v2[16] = 0;
  *((_DWORD *)v2 + 34) = 0;
  v2[14] = 0;
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void std::__shared_ptr_emplace<Phase::SpatialModeler::DirectivityHistogram>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D47A330;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Phase::SpatialModeler::DirectivityHistogram>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D47A330;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C938A0);
}

uint64_t std::__shared_ptr_emplace<Phase::SpatialModeler::DirectivityHistogram>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

unint64_t Phase::SpatialModeler::GetSoundSourceHash(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 && *(_DWORD *)(a3 + 48) == 3) {
    unint64_t v3 = 0xC6A4A7935BD1E995 * *(void *)(a3 + 56);
  }
  else {
    unint64_t v3 = 0;
  }
  return 0xC6A4A7935BD1E995
       * ((0xC6A4A7935BD1E995 * (v3 ^ (v3 >> 47))) ^ (0xC6A4A7935BD1E995
                                                      * ((0x35A98F4D286A90B9
                                                        * ((0xC6A4A7935BD1E995 * a1) ^ ((0xC6A4A7935BD1E995 * a1) >> 47))
                                                        + 3864292196u) ^ (0xC6A4A7935BD1E995
                                                                        * ((0xC6A4A7935BD1E995 * a2) ^ ((0xC6A4A7935BD1E995 * a2) >> 47))))
                                                      + 3864292196u))
       + 3864292196u;
}

unint64_t Phase::SpatialModeler::GetClusterHash(uint64_t **a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  if (*a1 == v3)
  {
    unint64_t v4 = 0;
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = *v2++;
      unint64_t v4 = 3864292196u
         - 0x395B586CA42E166BLL
         * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v5) ^ ((0xC6A4A7935BD1E995 * v5) >> 47))) ^ v4);
    }
    while (v2 != v3);
  }
  return 3864292196u
       - 0x395B586CA42E166BLL
       * (v4 ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * a2) ^ ((0xC6A4A7935BD1E995 * a2) >> 47))));
}

void Phase::SpatialModeler::scatterVectorOnPlane(float *a1, float *a2, float a3, float a4)
{
  float v7 = sqrtf(1.0 - a3);
  float v8 = a4 * 6.28318531;
  float v9 = cosf(v8);
  v11.i32[0] = 1.0;
  float v12 = (float)(v7 * v7) * (float)(1.0 - (float)(v9 * v9));
  if (v12 < 0.0) {
    __assert_rtn("scatterVectorOnPlane", "RayTracingMath.cpp", 197, "tmp >= 0");
  }
  float v13 = sqrtf(a3);
  float v15 = a2[1];
  float v14 = a2[2];
  float v16 = sqrtf((float)(v14 * v14) + (float)((float)(*a2 * *a2) + (float)(v15 * v15)));
  float v17 = v14 / v16;
  *(float *)v10.i32 = *a2 / v16;
  float v18 = v15 / v16;
  float v19 = (float)((float)(a1[1] * v18) + (float)(*a1 * *(float *)v10.i32)) + (float)(a1[2] * v17);
  v20.i64[0] = 0x8000000080000000;
  v20.i64[1] = 0x8000000080000000;
  v20.i32[0] = vbslq_s8(v20, v11, v10).i32[0];
  float v21 = 1.0 / (float)(*(float *)v10.i32 + *(float *)v20.i32);
  float v22 = -(float)(*(float *)v20.i32 - (float)(v17 * (float)(v17 * v21)));
  float v23 = v18 * v21;
  float v24 = -(float)(*(float *)v20.i32 - (float)(v18 * v23));
  float v25 = v17 * v23;
  float v26 = v7 * v9;
  float v27 = sqrtf(v12);
  if (v8 > 3.14159265) {
    float v27 = -v27;
  }
  float v28 = (float)(v13 * *(float *)v10.i32) + (float)(v26 * v18);
  float v29 = (float)(v13 * v18) + (float)(v26 * v24);
  float v30 = (float)(v13 * v17) + (float)(v26 * v25);
  float v31 = v27 * v22;
  float v32 = (float)(v27 * v17) + v28;
  float v33 = (float)(v27 * v25) + v29;
  float v34 = v31 + v30;
  *a1 = v32;
  a1[1] = v33;
  a1[2] = v34;
  if (v19 >= 0.0)
  {
    *a1 = -v32;
    a1[1] = -v33;
    a1[2] = -v34;
  }
}

void Phase::SpatialModeler::ApplyDirectivitySubbandGains(Phase::Logger *a1, int *a2, float32x2_t *a3, float32x2_t *a4)
{
  unint64_t v4 = a1;
  uint64_t v143 = *MEMORY[0x263EF8340];
  int v5 = *((_DWORD *)a1 + 31);
  switch(v5)
  {
    case 3:
      float v6 = 1.0;
      if (a2)
      {
        int v7 = *a2;
        if (*a2 == 3)
        {
          uint64_t v85 = **((void **)a2 + 5);
          if (v85)
          {
            Phase::TransformPositionByInverse<float>(a3, a4, (float *)buf);
            float v86 = *(float *)buf;
            float v87 = *(float *)&buf[8];
            float v88 = acosf(*(float *)&buf[4]/ sqrtf((float)((float)(v86 * v86) + (float)(*(float *)&buf[4] * *(float *)&buf[4])) + (float)(v87 * v87)));
            float v89 = atan2f(v86, v87) + 3.1416;
            float v90 = (float)(v89 - (float)(floorf(v89 / 6.2832) * 6.2832)) + 0.0;
            if (v90 >= 6.2832) {
              float v90 = nextafterf(6.2832, 0.0);
            }
            float SubbandGainsFrom = Phase::Geometry::SphericalCapDirectivity::GetSubbandGainsFromDatabase<3ul>(v85, v88, v90);
            goto LABEL_94;
          }
          goto LABEL_131;
        }
        if (v7 == 2)
        {
          uint64_t v83 = *(void *)(*((void *)a2 + 5) + 40);
          if (!v83) {
            goto LABEL_131;
          }
          Phase::TransformPositionByInverse<float>(a3, a4, (float *)buf);
          float v84 = acosf((float)-*(float *)&buf[8]/ sqrtf((float)((float)(*(float *)buf * *(float *)buf) + (float)(*(float *)&buf[4] * *(float *)&buf[4]))+ (float)(*(float *)&buf[8] * *(float *)&buf[8])));
          float SubbandGainsFrom = Phase::Geometry::ConeDirectivity::CalculateSubbandGains<3ul>(v83, v84 + v84);
        }
        else
        {
          float v8 = 1.0;
          float SubbandGainsFrom = 1.0;
          if (v7 == 1)
          {
            uint64_t v10 = *(void *)(*((void *)a2 + 5) + 40);
            if (v10)
            {
              Phase::TransformPositionByInverse<float>(a3, a4, (float *)buf);
              float v11 = *(float *)buf;
              float v12 = *(float *)&buf[8];
              float v13 = acosf(*(float *)&buf[4]/ sqrtf((float)((float)(v11 * v11) + (float)(*(float *)&buf[4] * *(float *)&buf[4]))+ (float)(v12 * v12)));
              float v14 = atan2f(v11, v12) + 3.1416;
              float v15 = (float)(v14 - (float)(floorf(v14 / 6.2832) * 6.2832)) + 0.0;
              if (v15 >= 6.2832) {
                float v15 = nextafterf(6.2832, 0.0);
              }
              Phase::Geometry::CardioidDirectivity::CalculateSubbandGains<3ul>(v10, v13, v15);
              goto LABEL_94;
            }
LABEL_131:
            std::terminate();
          }
        }
      }
      else
      {
        float v8 = 1.0;
        float SubbandGainsFrom = 1.0;
      }
LABEL_94:
      *(float *)buf = SubbandGainsFrom;
      *(float *)&uint8_t buf[4] = v8;
      *(float *)&buf[8] = v6;
      LODWORD(v91) = *((_DWORD *)v4 + 31);
      if (v91 >= 3) {
        uint64_t v91 = 3;
      }
      else {
        uint64_t v91 = v91;
      }
      if (v91)
      {
        int v92 = (float *)buf;
        do
        {
          float v93 = *v92++;
          *(float *)unint64_t v4 = *(float *)v4 * (float)(v93 * v93);
          unint64_t v4 = (Phase::Logger *)((char *)v4 + 4);
          --v91;
        }
        while (v91);
      }
      return;
    case 4:
      float v41 = 1.0;
      if (a2)
      {
        int v42 = *a2;
        if (*a2 == 1)
        {
          uint64_t v63 = **((void **)a2 + 5);
          if (!v63) {
            goto LABEL_131;
          }
          Phase::TransformPositionByInverse<float>(a3, a4, (float *)buf);
          float v64 = *(float *)buf;
          float v65 = *(float *)&buf[8];
          float v66 = acosf(*(float *)&buf[4]/ sqrtf((float)((float)(v64 * v64) + (float)(*(float *)&buf[4] * *(float *)&buf[4])) + (float)(v65 * v65)));
          float v67 = atan2f(v64, v65) + 3.1416;
          float v68 = (float)(v67 - (float)(floorf(v67 / 6.2832) * 6.2832)) + 0.0;
          if (v68 >= 6.2832) {
            float v68 = nextafterf(6.2832, 0.0);
          }
          Phase::Geometry::CardioidDirectivity::CalculateSubbandGains<4ul>(v63, v66, v68);
        }
        else if (v42 == 2)
        {
          uint64_t v52 = **((void **)a2 + 5);
          if (!v52) {
            goto LABEL_131;
          }
          Phase::TransformPositionByInverse<float>(a3, a4, (float *)buf);
          float v53 = acosf((float)-*(float *)&buf[8]/ sqrtf((float)((float)(*(float *)buf * *(float *)buf) + (float)(*(float *)&buf[4] * *(float *)&buf[4]))+ (float)(*(float *)&buf[8] * *(float *)&buf[8])));
          float v45 = Phase::Geometry::ConeDirectivity::CalculateSubbandGains<4ul>(v52, v53 + v53);
        }
        else
        {
          float v43 = 1.0;
          float v44 = 1.0;
          float v45 = 1.0;
          if (v42 == 3)
          {
            if (**((void **)a2 + 5))
            {
              Phase::TransformPositionByInverse<float>(a3, a4, (float *)buf);
              Phase::Geometry::SphericalCapDirectivity::GetSubbandGainsFromDatabase<4ul>(v46);
            }
            goto LABEL_131;
          }
        }
      }
      else
      {
        float v43 = 1.0;
        float v44 = 1.0;
        float v45 = 1.0;
      }
      *(float *)buf = v45;
      *(float *)&uint8_t buf[4] = v44;
      *(float *)&buf[8] = v43;
      *(float *)&unsigned char buf[12] = v41;
      LODWORD(v69) = *((_DWORD *)v4 + 31);
      if (v69 >= 4) {
        uint64_t v69 = 4;
      }
      else {
        uint64_t v69 = v69;
      }
      if (v69)
      {
        long long v70 = (float *)buf;
        do
        {
          float v71 = *v70++;
          *(float *)unint64_t v4 = *(float *)v4 * (float)(v71 * v71);
          unint64_t v4 = (Phase::Logger *)((char *)v4 + 4);
          --v69;
        }
        while (v69);
      }
      return;
    case 5:
      __asm { FMOV            V0.4S, #1.0; jumptable 000000022203B890 case 5 }
      *(_OWORD *)buf = _Q0;
      *(_DWORD *)&buf[16] = 1065353216;
      if (!a2) {
        goto LABEL_57;
      }
      int v39 = *a2;
      if (*a2 == 1)
      {
        uint64_t v54 = **((void **)a2 + 5);
        if (!v54) {
          goto LABEL_131;
        }
        Phase::TransformPositionByInverse<float>(a3, a4, (float *)&v130);
        float v55 = *(float *)&v130;
        float v56 = *((float *)&v130 + 2);
        float v57 = acosf(*((float *)&v130 + 1)/ sqrtf((float)((float)(v55 * v55) + (float)(*((float *)&v130 + 1) * *((float *)&v130 + 1)))+ (float)(v56 * v56)));
        float v58 = atan2f(v55, v56) + 3.1416;
        float v59 = (float)(v58 - (float)(floorf(v58 / 6.2832) * 6.2832)) + 0.0;
        if (v59 >= 6.2832) {
          float v59 = nextafterf(6.2832, 0.0);
        }
        Phase::Geometry::CardioidDirectivity::CalculateSubbandGains<5ul>((uint64_t)buf, v54, v57, v59);
      }
      else if (v39 == 2)
      {
        uint64_t v50 = **((void **)a2 + 5);
        if (!v50) {
          goto LABEL_131;
        }
        Phase::TransformPositionByInverse<float>(a3, a4, (float *)&v130);
        float v51 = acosf((float)-*((float *)&v130 + 2)/ sqrtf((float)((float)(*(float *)&v130 * *(float *)&v130)+ (float)(*((float *)&v130 + 1) * *((float *)&v130 + 1)))+ (float)(*((float *)&v130 + 2) * *((float *)&v130 + 2))));
        Phase::Geometry::ConeDirectivity::CalculateSubbandGains<5ul>((uint64_t)buf, v50, v51 + v51);
      }
      else if (v39 == 3)
      {
        if (**((void **)a2 + 5))
        {
          Phase::TransformPositionByInverse<float>(a3, a4, (float *)&v130);
          Phase::Geometry::SphericalCapDirectivity::GetSubbandGainsFromDatabase<5ul>(v40);
        }
        goto LABEL_131;
      }
LABEL_57:
      LODWORD(v60) = *((_DWORD *)v4 + 31);
      if (v60 >= 5) {
        uint64_t v60 = 5;
      }
      else {
        uint64_t v60 = v60;
      }
      if (v60)
      {
        long long v61 = (float *)buf;
        do
        {
          float v62 = *v61++;
          *(float *)unint64_t v4 = *(float *)v4 * (float)(v62 * v62);
          unint64_t v4 = (Phase::Logger *)((char *)v4 + 4);
          --v60;
        }
        while (v60);
      }
      return;
    case 6:
      __asm { FMOV            V0.4S, #1.0; jumptable 000000022203B890 case 6 }
      *(_OWORD *)buf = _Q0;
      __asm { FMOV            V0.2S, #1.0 }
      *(void *)&buf[16] = _Q0;
      if (!a2) {
        goto LABEL_81;
      }
      int v48 = *a2;
      if (*a2 == 1)
      {
        uint64_t v74 = **((void **)a2 + 5);
        if (!v74) {
          goto LABEL_131;
        }
        Phase::TransformPositionByInverse<float>(a3, a4, (float *)&v130);
        float v75 = *(float *)&v130;
        float v76 = *((float *)&v130 + 2);
        float v77 = acosf(*((float *)&v130 + 1)/ sqrtf((float)((float)(v75 * v75) + (float)(*((float *)&v130 + 1) * *((float *)&v130 + 1)))+ (float)(v76 * v76)));
        float v78 = atan2f(v75, v76) + 3.1416;
        float v79 = (float)(v78 - (float)(floorf(v78 / 6.2832) * 6.2832)) + 0.0;
        if (v79 >= 6.2832) {
          float v79 = nextafterf(6.2832, 0.0);
        }
        Phase::Geometry::CardioidDirectivity::CalculateSubbandGains<6ul>((uint64_t)buf, v74, v77, v79);
      }
      else if (v48 == 2)
      {
        uint64_t v72 = **((void **)a2 + 5);
        if (!v72) {
          goto LABEL_131;
        }
        Phase::TransformPositionByInverse<float>(a3, a4, (float *)&v130);
        float v73 = acosf((float)-*((float *)&v130 + 2)/ sqrtf((float)((float)(*(float *)&v130 * *(float *)&v130)+ (float)(*((float *)&v130 + 1) * *((float *)&v130 + 1)))+ (float)(*((float *)&v130 + 2) * *((float *)&v130 + 2))));
        Phase::Geometry::ConeDirectivity::CalculateSubbandGains<6ul>((uint64_t)buf, v72, v73 + v73);
      }
      else if (v48 == 3)
      {
        if (**((void **)a2 + 5))
        {
          Phase::TransformPositionByInverse<float>(a3, a4, (float *)&v130);
          Phase::Geometry::SphericalCapDirectivity::GetSubbandGainsFromDatabase<6ul>(v49);
        }
        goto LABEL_131;
      }
LABEL_81:
      LODWORD(v80) = *((_DWORD *)v4 + 31);
      if (v80 >= 6) {
        uint64_t v80 = 6;
      }
      else {
        uint64_t v80 = v80;
      }
      if (v80)
      {
        uint64_t v81 = (float *)buf;
        do
        {
          float v82 = *v81++;
          *(float *)unint64_t v4 = *(float *)v4 * (float)(v82 * v82);
          unint64_t v4 = (Phase::Logger *)((char *)v4 + 4);
          --v80;
        }
        while (v80);
      }
      return;
    case 7:
    case 8:
    case 9:
      goto LABEL_19;
    case 10:
      __asm { FMOV            V0.4S, #1.0; jumptable 000000022203B890 case 10 }
      long long v130 = _Q0;
      long long v131 = _Q0;
      __asm { FMOV            V0.2S, #1.0 }
      *(void *)&long long v132 = _Q0;
      if (!a2) {
        goto LABEL_109;
      }
      int v31 = *a2;
      if (*a2 == 3)
      {
        uint64_t v96 = **((void **)a2 + 5);
        if (!v96) {
          goto LABEL_131;
        }
        Phase::TransformPositionByInverse<float>(a3, a4, (float *)buf);
        float v97 = *(float *)buf;
        float v98 = *(float *)&buf[8];
        float v99 = acosf(*(float *)&buf[4]/ sqrtf((float)((float)(v97 * v97) + (float)(*(float *)&buf[4] * *(float *)&buf[4])) + (float)(v98 * v98)));
        float v100 = atan2f(v97, v98);
        float v101 = (float)((float)(v100 + 3.1416) - (float)(floorf((float)(v100 + 3.1416) / 6.2832) * 6.2832)) + 0.0;
        if (v101 >= 6.2832) {
          float v101 = nextafterf(6.2832, 0.0);
        }
        uint64_t v102 = **(void **)(v96 + 40);
        float v103 = cosf(v101);
        float v104 = cosf(v99 + -1.5708);
        float v105 = acosf(v104 * v103);
        uint64_t ValuesForAllDimensionsAt = Phase::Zeppelin::SphereSampling::NDimEquiangularHalfCircleData<float,double>::GetValuesForAllDimensionsAt(v102, 0, v105);
        for (uint64_t i = 0; i != 10; ++i)
        {
          float v108 = *(double *)(ValuesForAllDimensionsAt + 8 * i);
          *(float *)&buf[4 * i] = v108;
        }
        long long v130 = *(_OWORD *)buf;
        long long v131 = *(_OWORD *)&buf[16];
        *(void *)&long long v132 = v138;
      }
      else if (v31 == 2)
      {
        uint64_t v94 = *(void *)(*((void *)a2 + 5) + 80);
        if (!v94) {
          goto LABEL_131;
        }
        Phase::TransformPositionByInverse<float>(a3, a4, (float *)buf);
        float v95 = acosf((float)-*(float *)&buf[8]/ sqrtf((float)((float)(*(float *)buf * *(float *)buf) + (float)(*(float *)&buf[4] * *(float *)&buf[4]))+ (float)(*(float *)&buf[8] * *(float *)&buf[8])));
        Phase::Geometry::ConeDirectivity::CalculateSubbandGains<10ul>((uint64_t)&v130, v94, v95 + v95);
      }
      else if (v31 == 1)
      {
        uint64_t v32 = *(void *)(*((void *)a2 + 5) + 80);
        if (!v32) {
          goto LABEL_131;
        }
        Phase::TransformPositionByInverse<float>(a3, a4, (float *)buf);
        float v33 = *(float *)buf;
        float v34 = *(float *)&buf[8];
        float v35 = acosf(*(float *)&buf[4]/ sqrtf((float)((float)(v33 * v33) + (float)(*(float *)&buf[4] * *(float *)&buf[4])) + (float)(v34 * v34)));
        float v36 = atan2f(v33, v34) + 3.1416;
        float v37 = (float)(v36 - (float)(floorf(v36 / 6.2832) * 6.2832)) + 0.0;
        if (v37 >= 6.2832) {
          float v37 = nextafterf(6.2832, 0.0);
        }
        Phase::Geometry::CardioidDirectivity::CalculateSubbandGains<10ul>((uint64_t)&v130, v32, v35, v37);
      }
LABEL_109:
      LODWORD(v109) = *((_DWORD *)v4 + 31);
      if (v109 >= 0xA) {
        uint64_t v109 = 10;
      }
      else {
        uint64_t v109 = v109;
      }
      if (v109)
      {
        uint64_t v110 = (float *)&v130;
        do
        {
          float v111 = *v110++;
          *(float *)unint64_t v4 = *(float *)v4 * (float)(v111 * v111);
          unint64_t v4 = (Phase::Logger *)((char *)v4 + 4);
          --v109;
        }
        while (v109);
      }
      return;
    default:
      if (v5 == 31)
      {
        __asm { FMOV            V0.4S, #1.0 }
        long long v130 = _Q0;
        long long v131 = _Q0;
        long long v132 = _Q0;
        long long v133 = _Q0;
        long long v134 = _Q0;
        long long v135 = _Q0;
        *(_OWORD *)float64x2_t v136 = _Q0;
        __asm { FMOV            V0.2S, #1.0 }
        *(void *)&v136[16] = _Q0;
        *(_DWORD *)&v136[24] = 1065353216;
        if (a2)
        {
          int v21 = *a2;
          if (*a2 == 3)
          {
            uint64_t v114 = **((void **)a2 + 5);
            if (!v114) {
              goto LABEL_131;
            }
            Phase::TransformPositionByInverse<float>(a3, a4, (float *)buf);
            float v115 = *(float *)buf;
            float v116 = *(float *)&buf[8];
            float v117 = acosf(*(float *)&buf[4]/ sqrtf((float)((float)(v115 * v115) + (float)(*(float *)&buf[4] * *(float *)&buf[4]))+ (float)(v116 * v116)));
            float v118 = atan2f(v115, v116);
            float v119 = (float)((float)(v118 + 3.1416) - (float)(floorf((float)(v118 + 3.1416) / 6.2832) * 6.2832)) + 0.0;
            if (v119 >= 6.2832) {
              float v119 = nextafterf(6.2832, 0.0);
            }
            uint64_t v120 = **(void **)(v114 + 32);
            float v121 = cosf(v119);
            float v122 = cosf(v117 + -1.5708);
            float v123 = acosf(v122 * v121);
            uint64_t v124 = Phase::Zeppelin::SphereSampling::NDimEquiangularHalfCircleData<float,double>::GetValuesForAllDimensionsAt(v120, 0, v123);
            for (uint64_t j = 0; j != 31; ++j)
            {
              float v126 = *(double *)(v124 + 8 * j);
              *(float *)&buf[4 * j] = v126;
            }
            long long v134 = v140;
            long long v135 = v141;
            *(_OWORD *)float64x2_t v136 = v142[0];
            *(_OWORD *)&v136[12] = *(_OWORD *)((char *)v142 + 12);
            long long v130 = *(_OWORD *)buf;
            long long v131 = *(_OWORD *)&buf[16];
            long long v132 = v138;
            long long v133 = v139;
          }
          else if (v21 == 2)
          {
            uint64_t v112 = *(void *)(*((void *)a2 + 5) + 120);
            if (!v112) {
              goto LABEL_131;
            }
            Phase::TransformPositionByInverse<float>(a3, a4, (float *)buf);
            float v113 = acosf((float)-*(float *)&buf[8]/ sqrtf((float)((float)(*(float *)buf * *(float *)buf) + (float)(*(float *)&buf[4] * *(float *)&buf[4]))+ (float)(*(float *)&buf[8] * *(float *)&buf[8])));
            Phase::Geometry::ConeDirectivity::CalculateSubbandGains<31ul>((uint64_t)&v130, v112, v113 + v113);
          }
          else if (v21 == 1)
          {
            uint64_t v22 = *(void *)(*((void *)a2 + 5) + 120);
            if (!v22) {
              goto LABEL_131;
            }
            Phase::TransformPositionByInverse<float>(a3, a4, (float *)buf);
            float v23 = *(float *)buf;
            float v24 = *(float *)&buf[8];
            float v25 = acosf(*(float *)&buf[4]/ sqrtf((float)((float)(v23 * v23) + (float)(*(float *)&buf[4] * *(float *)&buf[4])) + (float)(v24 * v24)));
            float v26 = atan2f(v23, v24) + 3.1416;
            float v27 = (float)(v26 - (float)(floorf(v26 / 6.2832) * 6.2832)) + 0.0;
            if (v27 >= 6.2832) {
              float v27 = nextafterf(6.2832, 0.0);
            }
            Phase::Geometry::CardioidDirectivity::CalculateSubbandGains<31ul>((uint64_t)&v130, v22, v25, v27);
          }
        }
        LODWORD(v127) = *((_DWORD *)v4 + 31);
        if (v127 >= 0x1F) {
          uint64_t v127 = 31;
        }
        else {
          uint64_t v127 = v127;
        }
        if (v127)
        {
          long long v128 = (float *)&v130;
          do
          {
            float v129 = *v128++;
            *(float *)unint64_t v4 = *(float *)v4 * (float)(v129 * v129);
            unint64_t v4 = (Phase::Logger *)((char *)v4 + 4);
            --v127;
          }
          while (v127);
        }
      }
      else
      {
LABEL_19:
        float v28 = **(NSObject ***)(Phase::Logger::GetInstance(a1) + 1184);
        if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
        {
          int v29 = *((_DWORD *)v4 + 31);
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "RayTracingMath.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 286;
          *(_WORD *)&unsigned char buf[18] = 1024;
          *(_DWORD *)&buf[20] = v29;
          _os_log_impl(&dword_221E5E000, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d Unsupported subband count: %ui\n", buf, 0x18u);
        }
      }
      return;
  }
}

void Phase::SpatialModeler::applySourceDirectivity(_OWORD *a1@<X0>, uint64_t a2@<X1>, float32x2_t *a3@<X2>, uint64_t a4@<X3>, float32x2_t *a5@<X4>, Phase::Logger *a6@<X8>)
{
  long long v6 = a1[5];
  *((_OWORD *)a6 + 4) = a1[4];
  *((_OWORD *)a6 + 5) = v6;
  long long v7 = a1[7];
  *((_OWORD *)a6 + 6) = a1[6];
  *((_OWORD *)a6 + 7) = v7;
  long long v8 = a1[1];
  *(_OWORD *)a6 = *a1;
  *((_OWORD *)a6 + 1) = v8;
  long long v9 = a1[3];
  *((_OWORD *)a6 + 2) = a1[2];
  *((_OWORD *)a6 + 3) = v9;
  if (*(_DWORD *)(a2 + 16) > a4
    && *(_DWORD *)(*(void *)a2 + 24 * a4 + 20) == HIDWORD(a4))
  {
    uint64_t v10 = *(int **)(*(void *)a2 + 24 * a4);
  }
  else
  {
    uint64_t v10 = 0;
  }
  Phase::SpatialModeler::ApplyDirectivitySubbandGains(a6, v10, a3, a5);
}

void Phase::SpatialModeler::applyListenerDirectivity(_OWORD *a1@<X0>, uint64_t a2@<X1>, float *a3@<X2>, uint64_t a4@<X3>, Phase::Logger *a5@<X8>, float a6@<S0>, float a7@<S1>)
{
  float v12 = a6 * 0.017453;
  float v13 = (float32x2_t *)(a3 + 12);
  __float2 v14 = __sincosf_stret((float)(90.0 - a7) * 0.017453);
  __float2 v15 = __sincosf_stret(v12);
  float32_t v16 = v14.__cosval + a3[17];
  float v17 = (float)(v15.__cosval * v14.__sinval) + a3[18];
  v18.f32[0] = (float)(v15.__sinval * v14.__sinval) + a3[16];
  v18.f32[1] = v16;
  float v19 = v17;
  Phase::SpatialModeler::applySourceDirectivity(a1, a2, v13, a4, &v18, a5);
}

void Phase::SpatialModeler::CalculateSoundPowerRelativeToOmni(Phase::Logger *a1, int *a2, uint64_t a3)
{
  unint64_t v4 = a1;
  uint64_t v319 = *MEMORY[0x263EF8340];
  switch(a3)
  {
    case 3:
      if (a2)
      {
        int v5 = *a2;
        if (*a2 == 3)
        {
          uint64_t v179 = **((void **)a2 + 5);
          if (v179)
          {
            int v180 = 0;
            float32x2_t v8 = 0;
            float v6 = 0.0;
            do
            {
              float32x2_t v287 = v8;
              float v181 = (float)((float)((float)v180 * 0.10833)
                           - (float)(floorf((float)((float)v180 * 0.10833) / 6.2832) * 6.2832))
                   + 0.0;
              if (v181 >= 6.2832) {
                float v181 = nextafterf(6.2832, 0.0);
              }
              float SubbandGainsFrom = Phase::Geometry::SphericalCapDirectivity::GetSubbandGainsFromDatabase<3ul>(v179, 1.5708, v181);
              float v184 = v183;
              float v186 = v185;
              float v187 = 0.0014666;
              if (v180)
              {
                float v187 = 0.0014666;
                if (v180 != 29)
                {
                  float v188 = cosf((float)((float)(v180 - 1) * 0.10833) + 0.054165);
                  float v187 = v188 - cosf((float)((float)v180 * 0.10833) + 0.054165);
                }
              }
              uint64_t v189 = 0;
              unint64_t v190 = 0;
              unint64_t v191 = 0;
              v306.f32[0] = SubbandGainsFrom * SubbandGainsFrom;
              v306.f32[1] = v184 * v184;
              v306.f32[2] = v186 * v186;
              *(void *)buf = 0;
              *(_DWORD *)&buf[8] = 0;
              do
              {
                if (v191 <= 2)
                {
                  unint64_t v190 = v191 + 1;
                  *(_DWORD *)&buf[4 * v191++] = v306.i32[v189];
                }
                ++v189;
              }
              while (v189 != 3);
              if (v190 <= 2) {
                bzero(&buf[4 * v190], 12 - 4 * v190);
              }
              uint64_t v192 = 0;
              unint64_t v193 = 0;
              unint64_t v194 = 0;
              *(float32x2_t *)v306.f32 = vmul_n_f32(*(float32x2_t *)buf, v187 * 0.5);
              v306.f32[2] = (float)(v187 * 0.5) * *(float *)&buf[8];
              *(void *)buf = 0;
              *(_DWORD *)&buf[8] = 0;
              do
              {
                if (v194 <= 2)
                {
                  unint64_t v193 = v194 + 1;
                  *(_DWORD *)&buf[4 * v194++] = v306.i32[v192];
                }
                ++v192;
              }
              while (v192 != 3);
              if (v193 <= 2) {
                bzero(&buf[4 * v193], 12 - 4 * v193);
              }
              uint64_t v195 = 0;
              unint64_t v196 = 0;
              unint64_t v197 = 0;
              *(float32x2_t *)v306.f32 = vadd_f32(v287, *(float32x2_t *)buf);
              v306.f32[2] = v6 + *(float *)&buf[8];
              *(void *)buf = 0;
              *(_DWORD *)&buf[8] = 0;
              do
              {
                if (v197 <= 2)
                {
                  unint64_t v196 = v197 + 1;
                  *(_DWORD *)&buf[4 * v197++] = v306.i32[v195];
                }
                ++v195;
              }
              while (v195 != 3);
              if (v196 <= 2) {
                bzero(&buf[4 * v196], 12 - 4 * v196);
              }
              float32x2_t v8 = *(float32x2_t *)buf;
              float v6 = *(float *)&buf[8];
              ++v180;
            }
            while (v180 != 30);
            goto LABEL_338;
          }
          goto LABEL_434;
        }
        if (v5 == 2)
        {
          uint64_t v198 = **((void **)a2 + 5);
          if (v198)
          {
            int v199 = 0;
            float32x2_t v8 = 0;
            float v6 = 0.0;
            do
            {
              float32x2_t v288 = v8;
              float v200 = (float)((float)((float)v199 * 0.10833)
                           - (float)(floorf((float)((float)v199 * 0.10833) / 6.2832) * 6.2832))
                   + 0.0;
              if (v200 >= 6.2832) {
                float v200 = nextafterf(6.2832, 0.0);
              }
              float v201 = Phase::Geometry::ConeDirectivity::CalculateSubbandGains<3ul>(v198, v200);
              float v203 = v202;
              float v205 = v204;
              float v206 = 0.0014666;
              if (v199)
              {
                float v206 = 0.0014666;
                if (v199 != 29)
                {
                  float v207 = cosf((float)((float)(v199 - 1) * 0.10833) + 0.054165);
                  float v206 = v207 - cosf((float)((float)v199 * 0.10833) + 0.054165);
                }
              }
              uint64_t v208 = 0;
              unint64_t v209 = 0;
              unint64_t v210 = 0;
              v306.f32[0] = v201 * v201;
              v306.f32[1] = v203 * v203;
              v306.f32[2] = v205 * v205;
              *(void *)buf = 0;
              *(_DWORD *)&buf[8] = 0;
              do
              {
                if (v210 <= 2)
                {
                  unint64_t v209 = v210 + 1;
                  *(_DWORD *)&buf[4 * v210++] = v306.i32[v208];
                }
                ++v208;
              }
              while (v208 != 3);
              if (v209 <= 2) {
                bzero(&buf[4 * v209], 12 - 4 * v209);
              }
              uint64_t v211 = 0;
              unint64_t v212 = 0;
              unint64_t v213 = 0;
              *(float32x2_t *)v306.f32 = vmul_n_f32(*(float32x2_t *)buf, v206 * 0.5);
              v306.f32[2] = (float)(v206 * 0.5) * *(float *)&buf[8];
              *(void *)buf = 0;
              *(_DWORD *)&buf[8] = 0;
              do
              {
                if (v213 <= 2)
                {
                  unint64_t v212 = v213 + 1;
                  *(_DWORD *)&buf[4 * v213++] = v306.i32[v211];
                }
                ++v211;
              }
              while (v211 != 3);
              if (v212 <= 2) {
                bzero(&buf[4 * v212], 12 - 4 * v212);
              }
              uint64_t v214 = 0;
              unint64_t v215 = 0;
              unint64_t v216 = 0;
              *(float32x2_t *)v306.f32 = vadd_f32(v288, *(float32x2_t *)buf);
              v306.f32[2] = v6 + *(float *)&buf[8];
              *(void *)buf = 0;
              *(_DWORD *)&buf[8] = 0;
              do
              {
                if (v216 <= 2)
                {
                  unint64_t v215 = v216 + 1;
                  *(_DWORD *)&buf[4 * v216++] = v306.i32[v214];
                }
                ++v214;
              }
              while (v214 != 3);
              if (v215 <= 2) {
                bzero(&buf[4 * v215], 12 - 4 * v215);
              }
              float32x2_t v8 = *(float32x2_t *)buf;
              float v6 = *(float *)&buf[8];
              ++v199;
            }
            while (v199 != 30);
            goto LABEL_338;
          }
LABEL_434:
          std::terminate();
        }
        float v6 = 0.0;
        float v7 = 0.0;
        v8.i32[0] = 0;
        if (v5 == 1)
        {
          uint64_t v9 = **((void **)a2 + 5);
          if (v9)
          {
            int v10 = 0;
            float32x2_t v8 = 0;
            do
            {
              float32x2_t v285 = v8;
              float v11 = (float)((float)((float)v10 * 0.10833)
                          - (float)(floorf((float)((float)v10 * 0.10833) / 6.2832) * 6.2832))
                  + 0.0;
              if (v11 >= 6.2832) {
                float v11 = nextafterf(6.2832, 0.0);
              }
              Phase::Geometry::CardioidDirectivity::CalculateSubbandGains<3ul>(v9, 1.5708, v11);
              float v13 = v12;
              float v15 = v14;
              float v17 = v16;
              float v18 = 0.0014666;
              if (v10)
              {
                float v18 = 0.0014666;
                if (v10 != 29)
                {
                  float v19 = cosf((float)((float)(v10 - 1) * 0.10833) + 0.054165);
                  float v18 = v19 - cosf((float)((float)v10 * 0.10833) + 0.054165);
                }
              }
              uint64_t v20 = 0;
              unint64_t v21 = 0;
              unint64_t v22 = 0;
              v306.f32[0] = v13 * v13;
              v306.f32[1] = v15 * v15;
              v306.f32[2] = v17 * v17;
              *(void *)buf = 0;
              *(_DWORD *)&buf[8] = 0;
              do
              {
                if (v22 <= 2)
                {
                  unint64_t v21 = v22 + 1;
                  *(_DWORD *)&buf[4 * v22++] = v306.i32[v20];
                }
                ++v20;
              }
              while (v20 != 3);
              if (v21 <= 2) {
                bzero(&buf[4 * v21], 12 - 4 * v21);
              }
              uint64_t v23 = 0;
              unint64_t v24 = 0;
              unint64_t v25 = 0;
              *(float32x2_t *)v306.f32 = vmul_n_f32(*(float32x2_t *)buf, v18 * 0.5);
              v306.f32[2] = (float)(v18 * 0.5) * *(float *)&buf[8];
              *(void *)buf = 0;
              *(_DWORD *)&buf[8] = 0;
              do
              {
                if (v25 <= 2)
                {
                  unint64_t v24 = v25 + 1;
                  *(_DWORD *)&buf[4 * v25++] = v306.i32[v23];
                }
                ++v23;
              }
              while (v23 != 3);
              if (v24 <= 2) {
                bzero(&buf[4 * v24], 12 - 4 * v24);
              }
              uint64_t v26 = 0;
              unint64_t v27 = 0;
              unint64_t v28 = 0;
              *(float32x2_t *)v306.f32 = vadd_f32(v285, *(float32x2_t *)buf);
              v306.f32[2] = v6 + *(float *)&buf[8];
              *(void *)buf = 0;
              *(_DWORD *)&buf[8] = 0;
              do
              {
                if (v28 <= 2)
                {
                  unint64_t v27 = v28 + 1;
                  *(_DWORD *)&buf[4 * v28++] = v306.i32[v26];
                }
                ++v26;
              }
              while (v26 != 3);
              if (v27 <= 2) {
                bzero(&buf[4 * v27], 12 - 4 * v27);
              }
              float32x2_t v8 = *(float32x2_t *)buf;
              float v6 = *(float *)&buf[8];
              ++v10;
            }
            while (v10 != 30);
LABEL_338:
            float v7 = v8.f32[1];
            goto LABEL_339;
          }
          goto LABEL_434;
        }
      }
      else
      {
        float v6 = 1.0;
        float v7 = 1.0;
        v8.i32[0] = 1.0;
      }
LABEL_339:
      *(_DWORD *)buf = v8.i32[0];
      *(float *)&uint8_t buf[4] = v7;
      *(float *)&buf[8] = v6;
      LODWORD(v217) = *((_DWORD *)v4 + 31);
      if (v217 >= 3) {
        uint64_t v217 = 3;
      }
      else {
        uint64_t v217 = v217;
      }
      if (v217)
      {
        v218 = (float *)buf;
        do
        {
          float v219 = *v218++;
          *(float *)unint64_t v4 = *(float *)v4 * (float)(v219 * v219);
          unint64_t v4 = (Phase::Logger *)((char *)v4 + 4);
          --v217;
        }
        while (v217);
      }
      return;
    case 4:
      if (!a2)
      {
        float v39 = 1.0;
        float v40 = 1.0;
        float v41 = 1.0;
        float v42 = 1.0;
        goto LABEL_158;
      }
      int v38 = *a2;
      if (*a2 == 1)
      {
        uint64_t v69 = **((void **)a2 + 5);
        if (!v69) {
          goto LABEL_434;
        }
        int v70 = 0;
        float32x4_t v286 = 0u;
        do
        {
          float v71 = (float)((float)((float)v70 * 0.10833) - (float)(floorf((float)((float)v70 * 0.10833) / 6.2832) * 6.2832))
              + 0.0;
          if (v71 >= 6.2832) {
            float v71 = nextafterf(6.2832, 0.0);
          }
          Phase::Geometry::CardioidDirectivity::CalculateSubbandGains<4ul>(v69, 1.5708, v71);
          float v73 = v72;
          float v75 = v74;
          float v77 = v76;
          float v79 = v78;
          float v80 = 0.0014666;
          if (v70)
          {
            float v80 = 0.0014666;
            if (v70 != 29)
            {
              float v81 = cosf((float)((float)(v70 - 1) * 0.10833) + 0.054165);
              float v80 = v81 - cosf((float)((float)v70 * 0.10833) + 0.054165);
            }
          }
          uint64_t v82 = 0;
          unint64_t v83 = 0;
          unint64_t v84 = 0;
          v306.f32[0] = v73 * v73;
          v306.f32[1] = v75 * v75;
          v306.f32[2] = v77 * v77;
          v306.f32[3] = v79 * v79;
          *(void *)&buf[8] = 0;
          *(void *)buf = 0;
          do
          {
            if (v84 <= 3)
            {
              unint64_t v83 = v84 + 1;
              *(_DWORD *)&buf[4 * v84++] = v306.i32[v82];
            }
            ++v82;
          }
          while (v82 != 4);
          if (v83 <= 3) {
            bzero(&buf[4 * v83], 16 - 4 * v83);
          }
          uint64_t v85 = 0;
          unint64_t v86 = 0;
          unint64_t v87 = 0;
          float32x4_t v306 = vmulq_n_f32(*(float32x4_t *)buf, v80 * 0.5);
          *(void *)&buf[8] = 0;
          *(void *)buf = 0;
          do
          {
            if (v87 <= 3)
            {
              unint64_t v86 = v87 + 1;
              *(_DWORD *)&buf[4 * v87++] = v306.i32[v85];
            }
            ++v85;
          }
          while (v85 != 4);
          if (v86 <= 3) {
            bzero(&buf[4 * v86], 16 - 4 * v86);
          }
          uint64_t v88 = 0;
          unint64_t v89 = 0;
          unint64_t v90 = 0;
          float32x4_t v306 = vaddq_f32(v286, *(float32x4_t *)buf);
          *(void *)&buf[8] = 0;
          *(void *)buf = 0;
          do
          {
            if (v90 <= 3)
            {
              unint64_t v89 = v90 + 1;
              *(_DWORD *)&buf[4 * v90++] = v306.i32[v88];
            }
            ++v88;
          }
          while (v88 != 4);
          if (v89 <= 3) {
            bzero(&buf[4 * v89], 16 - 4 * v89);
          }
          float32x4_t v286 = *(float32x4_t *)buf;
          ++v70;
        }
        while (v70 != 30);
LABEL_157:
        float v42 = v286.f32[0];
        float v39 = v286.f32[3];
        float v40 = v286.f32[2];
        float v41 = v286.f32[1];
        goto LABEL_158;
      }
      if (v38 == 2)
      {
        uint64_t v91 = **((void **)a2 + 5);
        if (!v91) {
          goto LABEL_434;
        }
        int v92 = 0;
        float32x4_t v286 = 0u;
        do
        {
          float v93 = (float)((float)((float)v92 * 0.10833) - (float)(floorf((float)((float)v92 * 0.10833) / 6.2832) * 6.2832))
              + 0.0;
          if (v93 >= 6.2832) {
            float v93 = nextafterf(6.2832, 0.0);
          }
          float v94 = Phase::Geometry::ConeDirectivity::CalculateSubbandGains<4ul>(v91, v93);
          float v96 = v95;
          float v98 = v97;
          float v100 = v99;
          float v101 = 0.0014666;
          if (v92)
          {
            float v101 = 0.0014666;
            if (v92 != 29)
            {
              float v102 = cosf((float)((float)(v92 - 1) * 0.10833) + 0.054165);
              float v101 = v102 - cosf((float)((float)v92 * 0.10833) + 0.054165);
            }
          }
          uint64_t v103 = 0;
          unint64_t v104 = 0;
          unint64_t v105 = 0;
          v306.f32[0] = v94 * v94;
          v306.f32[1] = v96 * v96;
          v306.f32[2] = v98 * v98;
          v306.f32[3] = v100 * v100;
          *(void *)&buf[8] = 0;
          *(void *)buf = 0;
          do
          {
            if (v105 <= 3)
            {
              unint64_t v104 = v105 + 1;
              *(_DWORD *)&buf[4 * v105++] = v306.i32[v103];
            }
            ++v103;
          }
          while (v103 != 4);
          if (v104 <= 3) {
            bzero(&buf[4 * v104], 16 - 4 * v104);
          }
          uint64_t v106 = 0;
          unint64_t v107 = 0;
          unint64_t v108 = 0;
          float32x4_t v306 = vmulq_n_f32(*(float32x4_t *)buf, v101 * 0.5);
          *(void *)&buf[8] = 0;
          *(void *)buf = 0;
          do
          {
            if (v108 <= 3)
            {
              unint64_t v107 = v108 + 1;
              *(_DWORD *)&buf[4 * v108++] = v306.i32[v106];
            }
            ++v106;
          }
          while (v106 != 4);
          if (v107 <= 3) {
            bzero(&buf[4 * v107], 16 - 4 * v107);
          }
          uint64_t v109 = 0;
          unint64_t v110 = 0;
          unint64_t v111 = 0;
          float32x4_t v306 = vaddq_f32(v286, *(float32x4_t *)buf);
          *(void *)&buf[8] = 0;
          *(void *)buf = 0;
          do
          {
            if (v111 <= 3)
            {
              unint64_t v110 = v111 + 1;
              *(_DWORD *)&buf[4 * v111++] = v306.i32[v109];
            }
            ++v109;
          }
          while (v109 != 4);
          if (v110 <= 3) {
            bzero(&buf[4 * v110], 16 - 4 * v110);
          }
          float32x4_t v286 = *(float32x4_t *)buf;
          ++v92;
        }
        while (v92 != 30);
        goto LABEL_157;
      }
      float v39 = 0.0;
      float v40 = 0.0;
      float v41 = 0.0;
      float v42 = 0.0;
      if (v38 == 3)
      {
        if (**((void **)a2 + 5)) {
          Phase::Geometry::SphericalCapDirectivity::GetSubbandGainsFromDatabase<4ul>(a1);
        }
        goto LABEL_434;
      }
LABEL_158:
      *(float *)buf = v42;
      *(float *)&uint8_t buf[4] = v41;
      *(float *)&buf[8] = v40;
      *(float *)&unsigned char buf[12] = v39;
      LODWORD(v112) = *((_DWORD *)v4 + 31);
      if (v112 >= 4) {
        uint64_t v112 = 4;
      }
      else {
        uint64_t v112 = v112;
      }
      if (v112)
      {
        float v113 = (float *)buf;
        do
        {
          float v114 = *v113++;
          *(float *)unint64_t v4 = *(float *)v4 * (float)(v114 * v114);
          unint64_t v4 = (Phase::Logger *)((char *)v4 + 4);
          --v112;
        }
        while (v112);
      }
      return;
    case 5:
      float32x4_t v297 = 0uLL;
      v298.i32[0] = 0;
      if (a2)
      {
        int v43 = *a2;
        if (*a2 == 1)
        {
          uint64_t v115 = **((void **)a2 + 5);
          if (!v115) {
            goto LABEL_434;
          }
          for (int i = 0; i != 30; ++i)
          {
            float v117 = (float)((float)((float)i * 0.10833) - (float)(floorf((float)((float)i * 0.10833) / 6.2832) * 6.2832))
                 + 0.0;
            if (v117 >= 6.2832) {
              float v117 = nextafterf(6.2832, 0.0);
            }
            Phase::Geometry::CardioidDirectivity::CalculateSubbandGains<5ul>((uint64_t)&v306, v115, 1.5708, v117);
            float v118 = 0.0014666;
            if (i)
            {
              float v118 = 0.0014666;
              if (i != 29)
              {
                float v119 = cosf((float)((float)(i - 1) * 0.10833) + 0.054165);
                float v118 = v119 - cosf((float)((float)i * 0.10833) + 0.054165);
              }
            }
            uint64_t v120 = 0;
            unint64_t v121 = 0;
            unint64_t v122 = 0;
            *(float32x4_t *)buf = vmulq_f32(v306, v306);
            *(float *)&buf[16] = v307.f32[0] * v307.f32[0];
            float32x4_t v290 = 0uLL;
            v291.i32[0] = 0;
            do
            {
              if (v122 <= 4)
              {
                unint64_t v121 = v122 + 1;
                v290.i32[v122++] = *(_DWORD *)&buf[v120];
              }
              v120 += 4;
            }
            while (v120 != 20);
            if (v121 <= 4) {
              bzero(&v290.f32[v121], 20 - 4 * v121);
            }
            uint64_t v123 = 0;
            unint64_t v124 = 0;
            unint64_t v125 = 0;
            *(float32x4_t *)buf = vmulq_n_f32(v290, v118 * 0.5);
            *(float *)&buf[16] = (float)(v118 * 0.5) * v291.f32[0];
            float32x4_t v300 = 0uLL;
            v301.i32[0] = 0;
            do
            {
              if (v125 <= 4)
              {
                unint64_t v124 = v125 + 1;
                v300.i32[v125++] = *(_DWORD *)&buf[v123];
              }
              v123 += 4;
            }
            while (v123 != 20);
            if (v124 <= 4) {
              bzero(&v300.f32[v124], 20 - 4 * v124);
            }
            uint64_t v126 = 0;
            unint64_t v127 = 0;
            unint64_t v128 = 0;
            *(float32x4_t *)buf = vaddq_f32(v297, v300);
            *(float *)&buf[16] = v298.f32[0] + v301.f32[0];
            float32x4_t v303 = 0uLL;
            v304.i32[0] = 0;
            do
            {
              if (v128 <= 4)
              {
                unint64_t v127 = v128 + 1;
                v303.i32[v128++] = *(_DWORD *)&buf[v126];
              }
              v126 += 4;
            }
            while (v126 != 20);
            if (v127 <= 4) {
              bzero(&v303.f32[v127], 20 - 4 * v127);
            }
            float32x4_t v297 = v303;
            v298.i32[0] = v304.i32[0];
          }
        }
        else if (v43 == 2)
        {
          uint64_t v129 = **((void **)a2 + 5);
          if (!v129) {
            goto LABEL_434;
          }
          for (int j = 0; j != 30; ++j)
          {
            float v131 = (float)((float)((float)j * 0.10833) - (float)(floorf((float)((float)j * 0.10833) / 6.2832) * 6.2832))
                 + 0.0;
            if (v131 >= 6.2832) {
              float v131 = nextafterf(6.2832, 0.0);
            }
            Phase::Geometry::ConeDirectivity::CalculateSubbandGains<5ul>((uint64_t)&v306, v129, v131);
            float v132 = 0.0014666;
            if (j)
            {
              float v132 = 0.0014666;
              if (j != 29)
              {
                float v133 = cosf((float)((float)(j - 1) * 0.10833) + 0.054165);
                float v132 = v133 - cosf((float)((float)j * 0.10833) + 0.054165);
              }
            }
            uint64_t v134 = 0;
            unint64_t v135 = 0;
            unint64_t v136 = 0;
            *(float32x4_t *)buf = vmulq_f32(v306, v306);
            *(float *)&buf[16] = v307.f32[0] * v307.f32[0];
            float32x4_t v290 = 0uLL;
            v291.i32[0] = 0;
            do
            {
              if (v136 <= 4)
              {
                unint64_t v135 = v136 + 1;
                v290.i32[v136++] = *(_DWORD *)&buf[v134];
              }
              v134 += 4;
            }
            while (v134 != 20);
            if (v135 <= 4) {
              bzero(&v290.f32[v135], 20 - 4 * v135);
            }
            uint64_t v137 = 0;
            unint64_t v138 = 0;
            unint64_t v139 = 0;
            *(float32x4_t *)buf = vmulq_n_f32(v290, v132 * 0.5);
            *(float *)&buf[16] = (float)(v132 * 0.5) * v291.f32[0];
            float32x4_t v300 = 0uLL;
            v301.i32[0] = 0;
            do
            {
              if (v139 <= 4)
              {
                unint64_t v138 = v139 + 1;
                v300.i32[v139++] = *(_DWORD *)&buf[v137];
              }
              v137 += 4;
            }
            while (v137 != 20);
            if (v138 <= 4) {
              bzero(&v300.f32[v138], 20 - 4 * v138);
            }
            uint64_t v140 = 0;
            unint64_t v141 = 0;
            unint64_t v142 = 0;
            *(float32x4_t *)buf = vaddq_f32(v297, v300);
            *(float *)&buf[16] = v298.f32[0] + v301.f32[0];
            float32x4_t v303 = 0uLL;
            v304.i32[0] = 0;
            do
            {
              if (v142 <= 4)
              {
                unint64_t v141 = v142 + 1;
                v303.i32[v142++] = *(_DWORD *)&buf[v140];
              }
              v140 += 4;
            }
            while (v140 != 20);
            if (v141 <= 4) {
              bzero(&v303.f32[v141], 20 - 4 * v141);
            }
            float32x4_t v297 = v303;
            v298.i32[0] = v304.i32[0];
          }
        }
        else if (v43 == 3)
        {
          if (**((void **)a2 + 5)) {
            Phase::Geometry::SphericalCapDirectivity::GetSubbandGainsFromDatabase<5ul>(a1);
          }
          goto LABEL_434;
        }
      }
      else
      {
        __asm { FMOV            V0.4S, #1.0 }
        float32x4_t v297 = _Q0;
        v298.i32[0] = 1065353216;
      }
      LODWORD(v143) = *((_DWORD *)v4 + 31);
      if (v143 >= 5) {
        uint64_t v143 = 5;
      }
      else {
        uint64_t v143 = v143;
      }
      if (v143)
      {
        uint64_t v144 = &v297;
        do
        {
          float v145 = v144->f32[0];
          uint64_t v144 = (float32x4_t *)((char *)v144 + 4);
          *(float *)unint64_t v4 = *(float *)v4 * (float)(v145 * v145);
          unint64_t v4 = (Phase::Logger *)((char *)v4 + 4);
          --v143;
        }
        while (v143);
      }
      return;
    case 6:
      float32x4_t v297 = 0uLL;
      v298.i64[0] = 0;
      if (a2)
      {
        int v44 = *a2;
        if (*a2 == 1)
        {
          uint64_t v146 = **((void **)a2 + 5);
          if (!v146) {
            goto LABEL_434;
          }
          for (int k = 0; k != 30; ++k)
          {
            float v148 = (float)((float)((float)k * 0.10833) - (float)(floorf((float)((float)k * 0.10833) / 6.2832) * 6.2832))
                 + 0.0;
            if (v148 >= 6.2832) {
              float v148 = nextafterf(6.2832, 0.0);
            }
            Phase::Geometry::CardioidDirectivity::CalculateSubbandGains<6ul>((uint64_t)&v306, v146, 1.5708, v148);
            float v149 = 0.0014666;
            if (k)
            {
              float v149 = 0.0014666;
              if (k != 29)
              {
                float v150 = cosf((float)((float)(k - 1) * 0.10833) + 0.054165);
                float v149 = v150 - cosf((float)((float)k * 0.10833) + 0.054165);
              }
            }
            uint64_t v151 = 0;
            unint64_t v152 = 0;
            unint64_t v153 = 0;
            *(float32x4_t *)buf = vmulq_f32(v306, v306);
            int32x2_t v154 = (int32x2_t)vmul_f32(*(float32x2_t *)v307.f32, *(float32x2_t *)v307.f32);
            *(int32x2_t *)&buf[16] = v154;
            v291.i64[0] = 0;
            float32x4_t v290 = 0uLL;
            do
            {
              if (v153 <= 5)
              {
                unint64_t v152 = v153 + 1;
                v290.i32[v153++] = *(_DWORD *)&buf[v151];
              }
              v151 += 4;
            }
            while (v151 != 24);
            if (v152 <= 5) {
              bzero(&v290.f32[v152], 24 - 4 * v152);
            }
            uint64_t v155 = 0;
            unint64_t v156 = 0;
            unint64_t v157 = 0;
            *(float *)v154.i32 = v149 * 0.5;
            *(float32x4_t *)buf = vmulq_n_f32(v290, v149 * 0.5);
            *(float32x2_t *)&buf[16] = vmul_f32((float32x2_t)*(_OWORD *)&vdupq_lane_s32(v154, 0), *(float32x2_t *)v291.f32);
            v301.i64[0] = 0;
            float32x4_t v300 = 0uLL;
            do
            {
              if (v157 <= 5)
              {
                unint64_t v156 = v157 + 1;
                v300.i32[v157++] = *(_DWORD *)&buf[v155];
              }
              v155 += 4;
            }
            while (v155 != 24);
            if (v156 <= 5) {
              bzero(&v300.f32[v156], 24 - 4 * v156);
            }
            uint64_t v158 = 0;
            unint64_t v159 = 0;
            unint64_t v160 = 0;
            *(float32x4_t *)buf = vaddq_f32(v297, v300);
            *(float32x2_t *)&buf[16] = vadd_f32(*(float32x2_t *)v298.f32, *(float32x2_t *)v301.f32);
            v304.i64[0] = 0;
            float32x4_t v303 = 0uLL;
            do
            {
              if (v160 <= 5)
              {
                unint64_t v159 = v160 + 1;
                v303.i32[v160++] = *(_DWORD *)&buf[v158];
              }
              v158 += 4;
            }
            while (v158 != 24);
            if (v159 <= 5) {
              bzero(&v303.f32[v159], 24 - 4 * v159);
            }
            float32x4_t v297 = v303;
            v298.i64[0] = v304.i64[0];
          }
        }
        else if (v44 == 2)
        {
          uint64_t v161 = **((void **)a2 + 5);
          if (!v161) {
            goto LABEL_434;
          }
          for (int m = 0; m != 30; ++m)
          {
            float v163 = (float)((float)((float)m * 0.10833) - (float)(floorf((float)((float)m * 0.10833) / 6.2832) * 6.2832))
                 + 0.0;
            if (v163 >= 6.2832) {
              float v163 = nextafterf(6.2832, 0.0);
            }
            Phase::Geometry::ConeDirectivity::CalculateSubbandGains<6ul>((uint64_t)&v306, v161, v163);
            float v164 = 0.0014666;
            if (m)
            {
              float v164 = 0.0014666;
              if (m != 29)
              {
                float v165 = cosf((float)((float)(m - 1) * 0.10833) + 0.054165);
                float v164 = v165 - cosf((float)((float)m * 0.10833) + 0.054165);
              }
            }
            uint64_t v166 = 0;
            unint64_t v167 = 0;
            unint64_t v168 = 0;
            *(float32x4_t *)buf = vmulq_f32(v306, v306);
            int32x2_t v169 = (int32x2_t)vmul_f32(*(float32x2_t *)v307.f32, *(float32x2_t *)v307.f32);
            *(int32x2_t *)&buf[16] = v169;
            v291.i64[0] = 0;
            float32x4_t v290 = 0uLL;
            do
            {
              if (v168 <= 5)
              {
                unint64_t v167 = v168 + 1;
                v290.i32[v168++] = *(_DWORD *)&buf[v166];
              }
              v166 += 4;
            }
            while (v166 != 24);
            if (v167 <= 5) {
              bzero(&v290.f32[v167], 24 - 4 * v167);
            }
            uint64_t v170 = 0;
            unint64_t v171 = 0;
            unint64_t v172 = 0;
            *(float *)v169.i32 = v164 * 0.5;
            *(float32x4_t *)buf = vmulq_n_f32(v290, v164 * 0.5);
            *(float32x2_t *)&buf[16] = vmul_f32((float32x2_t)*(_OWORD *)&vdupq_lane_s32(v169, 0), *(float32x2_t *)v291.f32);
            v301.i64[0] = 0;
            float32x4_t v300 = 0uLL;
            do
            {
              if (v172 <= 5)
              {
                unint64_t v171 = v172 + 1;
                v300.i32[v172++] = *(_DWORD *)&buf[v170];
              }
              v170 += 4;
            }
            while (v170 != 24);
            if (v171 <= 5) {
              bzero(&v300.f32[v171], 24 - 4 * v171);
            }
            uint64_t v173 = 0;
            unint64_t v174 = 0;
            unint64_t v175 = 0;
            *(float32x4_t *)buf = vaddq_f32(v297, v300);
            *(float32x2_t *)&buf[16] = vadd_f32(*(float32x2_t *)v298.f32, *(float32x2_t *)v301.f32);
            v304.i64[0] = 0;
            float32x4_t v303 = 0uLL;
            do
            {
              if (v175 <= 5)
              {
                unint64_t v174 = v175 + 1;
                v303.i32[v175++] = *(_DWORD *)&buf[v173];
              }
              v173 += 4;
            }
            while (v173 != 24);
            if (v174 <= 5) {
              bzero(&v303.f32[v174], 24 - 4 * v174);
            }
            float32x4_t v297 = v303;
            v298.i64[0] = v304.i64[0];
          }
        }
        else if (v44 == 3)
        {
          if (**((void **)a2 + 5)) {
            Phase::Geometry::SphericalCapDirectivity::GetSubbandGainsFromDatabase<6ul>(a1);
          }
          goto LABEL_434;
        }
      }
      else
      {
        __asm { FMOV            V0.4S, #1.0 }
        float32x4_t v297 = _Q0;
        __asm { FMOV            V0.2S, #1.0 }
        v298.i64[0] = _Q0.i64[0];
      }
      LODWORD(v176) = *((_DWORD *)v4 + 31);
      if (v176 >= 6) {
        uint64_t v176 = 6;
      }
      else {
        uint64_t v176 = v176;
      }
      if (v176)
      {
        long long v177 = &v297;
        do
        {
          float v178 = v177->f32[0];
          long long v177 = (float32x4_t *)((char *)v177 + 4);
          *(float *)unint64_t v4 = *(float *)v4 * (float)(v178 * v178);
          unint64_t v4 = (Phase::Logger *)((char *)v4 + 4);
          --v176;
        }
        while (v176);
      }
      return;
    case 7:
    case 8:
    case 9:
      goto LABEL_47;
    case 10:
      float32x2_t v299 = 0;
      float32x4_t v297 = 0u;
      float32x4_t v298 = 0u;
      if (a2)
      {
        int v45 = *a2;
        if (*a2 == 3)
        {
          uint64_t v220 = **((void **)a2 + 5);
          if (!v220) {
            goto LABEL_434;
          }
          for (int n = 0; n != 30; ++n)
          {
            float v222 = (float)((float)((float)n * 0.10833) - (float)(floorf((float)((float)n * 0.10833) / 6.2832) * 6.2832))
                 + 0.0;
            if (v222 >= 6.2832) {
              float v222 = nextafterf(6.2832, 0.0);
            }
            v223 = *(uint64_t **)(v220 + 40);
            float v224 = cosf(v222);
            float v225 = acosf(v224);
            uint64_t ValuesForAllDimensionsAt = Phase::Zeppelin::SphereSampling::NDimEquiangularHalfCircleData<float,double>::GetValuesForAllDimensionsAt(*v223, 0, v225);
            for (iint i = 0; ii != 10; ++ii)
            {
              float v228 = *(double *)(ValuesForAllDimensionsAt + 8 * ii);
              *(float *)&buf[4 * ii] = v228;
            }
            float32x4_t v229 = *(float32x4_t *)buf;
            float32x4_t v230 = *(float32x4_t *)&buf[16];
            float v231 = 0.0014666;
            float32x2_t v232 = *(float32x2_t *)v314.f32;
            if (n)
            {
              float v231 = 0.0014666;
              if (n != 29)
              {
                float32x4_t v284 = *(float32x4_t *)buf;
                float32x4_t v289 = *(float32x4_t *)&buf[16];
                float v233 = cosf((float)((float)(n - 1) * 0.10833) + 0.054165);
                float v231 = v233 - cosf((float)((float)n * 0.10833) + 0.054165);
                float32x4_t v229 = v284;
                float32x4_t v230 = v289;
              }
            }
            uint64_t v234 = 0;
            unint64_t v235 = 0;
            unint64_t v236 = 0;
            *(float32x4_t *)buf = vmulq_f32(v229, v229);
            *(float32x4_t *)&buf[16] = vmulq_f32(v230, v230);
            *(float32x2_t *)v314.f32 = vmul_f32(v232, v232);
            v229.i32[1] = 0;
            float32x4_t v300 = 0u;
            float32x4_t v301 = 0u;
            float32x2_t v302 = 0;
            do
            {
              if (v236 <= 9)
              {
                unint64_t v235 = v236 + 1;
                v300.i32[v236++] = *(_DWORD *)&buf[v234];
              }
              v234 += 4;
            }
            while (v234 != 40);
            if (v235 <= 9) {
              bzero(&v300.f32[v235], 40 - 4 * v235);
            }
            uint64_t v237 = 0;
            unint64_t v238 = 0;
            unint64_t v239 = 0;
            v229.f32[0] = v231 * 0.5;
            *(float32x4_t *)buf = vmulq_n_f32(v300, v231 * 0.5);
            *(float32x4_t *)&buf[16] = vmulq_n_f32(v301, v231 * 0.5);
            *(float32x2_t *)v314.f32 = vmul_f32((float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)v229.f32, 0), v302);
            float32x4_t v303 = 0u;
            float32x4_t v304 = 0u;
            float32x2_t v305 = 0;
            do
            {
              if (v239 <= 9)
              {
                unint64_t v238 = v239 + 1;
                v303.i32[v239++] = *(_DWORD *)&buf[v237];
              }
              v237 += 4;
            }
            while (v237 != 40);
            if (v238 <= 9) {
              bzero(&v303.f32[v238], 40 - 4 * v238);
            }
            uint64_t v240 = 0;
            unint64_t v241 = 0;
            unint64_t v242 = 0;
            *(float32x4_t *)buf = vaddq_f32(v297, v303);
            *(float32x4_t *)&buf[16] = vaddq_f32(v298, v304);
            *(float32x2_t *)v314.f32 = vadd_f32(v299, v305);
            float32x4_t v306 = 0u;
            float32x4_t v307 = 0u;
            v308.i64[0] = 0;
            do
            {
              if (v242 <= 9)
              {
                unint64_t v241 = v242 + 1;
                v306.i32[v242++] = *(_DWORD *)&buf[v240];
              }
              v240 += 4;
            }
            while (v240 != 40);
            if (v241 <= 9) {
              bzero(&v306.f32[v241], 40 - 4 * v241);
            }
            float32x4_t v297 = v306;
            float32x4_t v298 = v307;
            float32x2_t v299 = *(float32x2_t *)v308.f32;
          }
        }
        else if (v45 == 2)
        {
          uint64_t v243 = **((void **)a2 + 5);
          if (!v243) {
            goto LABEL_434;
          }
          for (jint j = 0; jj != 30; ++jj)
          {
            float v245 = (float)((float)((float)jj * 0.10833) - (float)(floorf((float)((float)jj * 0.10833) / 6.2832) * 6.2832))
                 + 0.0;
            if (v245 >= 6.2832) {
              float v245 = nextafterf(6.2832, 0.0);
            }
            Phase::Geometry::ConeDirectivity::CalculateSubbandGains<10ul>((uint64_t)&v306, v243, v245);
            float v246 = 0.0014666;
            if (jj)
            {
              float v246 = 0.0014666;
              if (jj != 29)
              {
                float v247 = cosf((float)((float)(jj - 1) * 0.10833) + 0.054165);
                float v246 = v247 - cosf((float)((float)jj * 0.10833) + 0.054165);
              }
            }
            uint64_t v248 = 0;
            unint64_t v249 = 0;
            unint64_t v250 = 0;
            *(float32x4_t *)buf = vmulq_f32(v306, v306);
            *(float32x4_t *)&buf[16] = vmulq_f32(v307, v307);
            *(float32x2_t *)v314.f32 = vmul_f32(*(float32x2_t *)v308.f32, *(float32x2_t *)v308.f32);
            v251.i32[1] = 0;
            float32x4_t v290 = 0u;
            float32x4_t v291 = 0u;
            v292.i64[0] = 0;
            do
            {
              if (v250 <= 9)
              {
                unint64_t v249 = v250 + 1;
                v290.i32[v250++] = *(_DWORD *)&buf[v248];
              }
              v248 += 4;
            }
            while (v248 != 40);
            if (v249 <= 9) {
              bzero(&v290.f32[v249], 40 - 4 * v249);
            }
            uint64_t v252 = 0;
            unint64_t v253 = 0;
            unint64_t v254 = 0;
            *(float *)v251.i32 = v246 * 0.5;
            *(float32x4_t *)buf = vmulq_n_f32(v290, v246 * 0.5);
            *(float32x4_t *)&buf[16] = vmulq_n_f32(v291, v246 * 0.5);
            *(float32x2_t *)v314.f32 = vmul_f32((float32x2_t)*(_OWORD *)&vdupq_lane_s32(v251, 0), *(float32x2_t *)v292.f32);
            float32x4_t v300 = 0u;
            float32x4_t v301 = 0u;
            float32x2_t v302 = 0;
            do
            {
              if (v254 <= 9)
              {
                unint64_t v253 = v254 + 1;
                v300.i32[v254++] = *(_DWORD *)&buf[v252];
              }
              v252 += 4;
            }
            while (v252 != 40);
            if (v253 <= 9) {
              bzero(&v300.f32[v253], 40 - 4 * v253);
            }
            uint64_t v255 = 0;
            unint64_t v256 = 0;
            unint64_t v257 = 0;
            *(float32x4_t *)buf = vaddq_f32(v297, v300);
            *(float32x4_t *)&buf[16] = vaddq_f32(v298, v301);
            *(float32x2_t *)v314.f32 = vadd_f32(v299, v302);
            float32x4_t v303 = 0u;
            float32x4_t v304 = 0u;
            float32x2_t v305 = 0;
            do
            {
              if (v257 <= 9)
              {
                unint64_t v256 = v257 + 1;
                v303.i32[v257++] = *(_DWORD *)&buf[v255];
              }
              v255 += 4;
            }
            while (v255 != 40);
            if (v256 <= 9) {
              bzero(&v303.f32[v256], 40 - 4 * v256);
            }
            float32x4_t v297 = v303;
            float32x4_t v298 = v304;
            float32x2_t v299 = v305;
          }
        }
        else if (v45 == 1)
        {
          uint64_t v46 = **((void **)a2 + 5);
          if (!v46) {
            goto LABEL_434;
          }
          for (int kk = 0; kk != 30; ++kk)
          {
            float v48 = (float)((float)((float)kk * 0.10833) - (float)(floorf((float)((float)kk * 0.10833) / 6.2832) * 6.2832))
                + 0.0;
            if (v48 >= 6.2832) {
              float v48 = nextafterf(6.2832, 0.0);
            }
            Phase::Geometry::CardioidDirectivity::CalculateSubbandGains<10ul>((uint64_t)&v306, v46, 1.5708, v48);
            float v49 = 0.0014666;
            if (kk)
            {
              float v49 = 0.0014666;
              if (kk != 29)
              {
                float v50 = cosf((float)((float)(kk - 1) * 0.10833) + 0.054165);
                float v49 = v50 - cosf((float)((float)kk * 0.10833) + 0.054165);
              }
            }
            uint64_t v51 = 0;
            unint64_t v52 = 0;
            unint64_t v53 = 0;
            *(float32x4_t *)buf = vmulq_f32(v306, v306);
            *(float32x4_t *)&buf[16] = vmulq_f32(v307, v307);
            *(float32x2_t *)v314.f32 = vmul_f32(*(float32x2_t *)v308.f32, *(float32x2_t *)v308.f32);
            v54.i32[1] = 0;
            float32x4_t v290 = 0u;
            float32x4_t v291 = 0u;
            v292.i64[0] = 0;
            do
            {
              if (v53 <= 9)
              {
                unint64_t v52 = v53 + 1;
                v290.i32[v53++] = *(_DWORD *)&buf[v51];
              }
              v51 += 4;
            }
            while (v51 != 40);
            if (v52 <= 9) {
              bzero(&v290.f32[v52], 40 - 4 * v52);
            }
            uint64_t v55 = 0;
            unint64_t v56 = 0;
            unint64_t v57 = 0;
            *(float *)v54.i32 = v49 * 0.5;
            *(float32x4_t *)buf = vmulq_n_f32(v290, v49 * 0.5);
            *(float32x4_t *)&buf[16] = vmulq_n_f32(v291, v49 * 0.5);
            *(float32x2_t *)v314.f32 = vmul_f32((float32x2_t)*(_OWORD *)&vdupq_lane_s32(v54, 0), *(float32x2_t *)v292.f32);
            float32x4_t v300 = 0u;
            float32x4_t v301 = 0u;
            float32x2_t v302 = 0;
            do
            {
              if (v57 <= 9)
              {
                unint64_t v56 = v57 + 1;
                v300.i32[v57++] = *(_DWORD *)&buf[v55];
              }
              v55 += 4;
            }
            while (v55 != 40);
            if (v56 <= 9) {
              bzero(&v300.f32[v56], 40 - 4 * v56);
            }
            uint64_t v58 = 0;
            unint64_t v59 = 0;
            unint64_t v60 = 0;
            *(float32x4_t *)buf = vaddq_f32(v297, v300);
            *(float32x4_t *)&buf[16] = vaddq_f32(v298, v301);
            *(float32x2_t *)v314.f32 = vadd_f32(v299, v302);
            float32x4_t v303 = 0u;
            float32x4_t v304 = 0u;
            float32x2_t v305 = 0;
            do
            {
              if (v60 <= 9)
              {
                unint64_t v59 = v60 + 1;
                v303.i32[v60++] = *(_DWORD *)&buf[v58];
              }
              v58 += 4;
            }
            while (v58 != 40);
            if (v59 <= 9) {
              bzero(&v303.f32[v59], 40 - 4 * v59);
            }
            float32x4_t v297 = v303;
            float32x4_t v298 = v304;
            float32x2_t v299 = v305;
          }
        }
      }
      else
      {
        __asm { FMOV            V0.4S, #1.0 }
        float32x4_t v297 = _Q0;
        float32x4_t v298 = _Q0;
        __asm { FMOV            V0.2S, #1.0 }
        float32x2_t v299 = *(float32x2_t *)_Q0.f32;
      }
      LODWORD(v258) = *((_DWORD *)v4 + 31);
      if (v258 >= 0xA) {
        uint64_t v258 = 10;
      }
      else {
        uint64_t v258 = v258;
      }
      if (v258)
      {
        v259 = &v297;
        do
        {
          float v260 = v259->f32[0];
          v259 = (float32x4_t *)((char *)v259 + 4);
          *(float *)unint64_t v4 = *(float *)v4 * (float)(v260 * v260);
          unint64_t v4 = (Phase::Logger *)((char *)v4 + 4);
          --v258;
        }
        while (v258);
      }
      return;
    default:
      if (a3 == 31)
      {
        float32x4_t v295 = 0u;
        memset(v296, 0, 28);
        float32x4_t v293 = 0u;
        float32x4_t v294 = 0u;
        float32x4_t v291 = 0u;
        float32x4_t v292 = 0u;
        float32x4_t v290 = 0u;
        if (a2)
        {
          int v29 = *a2;
          if (*a2 == 3)
          {
            uint64_t v261 = **((void **)a2 + 5);
            if (!v261) {
              goto LABEL_434;
            }
            for (mint m = 0; mm != 30; ++mm)
            {
              float v263 = (float)((float)((float)mm * 0.10833)
                           - (float)(floorf((float)((float)mm * 0.10833) / 6.2832) * 6.2832))
                   + 0.0;
              if (v263 >= 6.2832) {
                float v263 = nextafterf(6.2832, 0.0);
              }
              v264 = *(uint64_t **)(v261 + 32);
              float v265 = cosf(v263);
              float v266 = acosf(v265);
              uint64_t v267 = Phase::Zeppelin::SphereSampling::NDimEquiangularHalfCircleData<float,double>::GetValuesForAllDimensionsAt(*v264, 0, v266);
              for (nint n = 0; nn != 31; ++nn)
              {
                float v269 = *(double *)(v267 + 8 * nn);
                *(float *)&buf[4 * nn] = v269;
              }
              float32x4_t v310 = v316;
              float32x4_t v311 = v317;
              v312[0] = v318[0];
              *(_OWORD *)((char *)v312 + 12) = *(_OWORD *)((char *)v318 + 12);
              float32x4_t v306 = *(float32x4_t *)buf;
              float32x4_t v307 = *(float32x4_t *)&buf[16];
              float32x4_t v308 = v314;
              float32x4_t v309 = v315;
              float v270 = 0.0014666;
              if (mm)
              {
                float v270 = 0.0014666;
                if (mm != 29)
                {
                  float v271 = cosf((float)((float)(mm - 1) * 0.10833) + 0.054165);
                  float v270 = v271 - cosf((float)((float)mm * 0.10833) + 0.054165);
                }
              }
              float v272 = v270 * 0.5;
              Phase::details::ReturnForEachSubband<float,31ul,Phase::PackedSubbands<float,31ul> Phase::operator*<float,31ul>(Phase::PackedSubbands<float,31ul> const&,Phase::PackedSubbands<float,31ul> const&)::{lambda(float)#1} const&,0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul>(&v300, (uint64_t)&v306, (uint64_t)&v306);
              *(float *)&double v273 = v272;
              Phase::details::ReturnForEachSubband<float,31ul,Phase::PackedSubbands<float,31ul> Phase::operator*<float,31ul>(Phase::PackedSubbands<float,31ul> const&,float const&)::{lambda(float)#1} const&,0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul>(&v303, (uint64_t)&v300, v273);
              Phase::details::ReturnForEachSubband<float,31ul,Phase::PackedSubbands<float,31ul> Phase::operator+<float,31ul>(Phase::PackedSubbands<float,31ul> const&,Phase::PackedSubbands<float,31ul> const&)::{lambda(float)#1} const&,0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul>(buf, (uint64_t)&v290, (uint64_t)&v303);
              float32x4_t v294 = v316;
              float32x4_t v295 = v317;
              v296[0] = v318[0];
              *(_OWORD *)((char *)v296 + 12) = *(_OWORD *)((char *)v318 + 12);
              float32x4_t v290 = *(float32x4_t *)buf;
              float32x4_t v291 = *(float32x4_t *)&buf[16];
              float32x4_t v292 = v314;
              float32x4_t v293 = v315;
            }
          }
          else if (v29 == 2)
          {
            uint64_t v274 = **((void **)a2 + 5);
            if (!v274) {
              goto LABEL_434;
            }
            for (int i1 = 0; i1 != 30; ++i1)
            {
              float v276 = (float)((float)((float)i1 * 0.10833)
                           - (float)(floorf((float)((float)i1 * 0.10833) / 6.2832) * 6.2832))
                   + 0.0;
              if (v276 >= 6.2832) {
                float v276 = nextafterf(6.2832, 0.0);
              }
              Phase::Geometry::ConeDirectivity::CalculateSubbandGains<31ul>((uint64_t)buf, v274, v276);
              float v277 = 0.0014666;
              if (i1)
              {
                float v277 = 0.0014666;
                if (i1 != 29)
                {
                  float v278 = cosf((float)((float)(i1 - 1) * 0.10833) + 0.054165);
                  float v277 = v278 - cosf((float)((float)i1 * 0.10833) + 0.054165);
                }
              }
              float v279 = v277 * 0.5;
              Phase::details::ReturnForEachSubband<float,31ul,Phase::PackedSubbands<float,31ul> Phase::operator*<float,31ul>(Phase::PackedSubbands<float,31ul> const&,Phase::PackedSubbands<float,31ul> const&)::{lambda(float)#1} const&,0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul>(&v300, (uint64_t)buf, (uint64_t)buf);
              *(float *)&double v280 = v279;
              Phase::details::ReturnForEachSubband<float,31ul,Phase::PackedSubbands<float,31ul> Phase::operator*<float,31ul>(Phase::PackedSubbands<float,31ul> const&,float const&)::{lambda(float)#1} const&,0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul>(&v303, (uint64_t)&v300, v280);
              Phase::details::ReturnForEachSubband<float,31ul,Phase::PackedSubbands<float,31ul> Phase::operator+<float,31ul>(Phase::PackedSubbands<float,31ul> const&,Phase::PackedSubbands<float,31ul> const&)::{lambda(float)#1} const&,0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul>(&v306, (uint64_t)&v290, (uint64_t)&v303);
              float32x4_t v294 = v310;
              float32x4_t v295 = v311;
              v296[0] = v312[0];
              *(_OWORD *)((char *)v296 + 12) = *(_OWORD *)((char *)v312 + 12);
              float32x4_t v290 = v306;
              float32x4_t v291 = v307;
              float32x4_t v292 = v308;
              float32x4_t v293 = v309;
            }
          }
          else if (v29 == 1)
          {
            uint64_t v30 = **((void **)a2 + 5);
            if (!v30) {
              goto LABEL_434;
            }
            for (int i2 = 0; i2 != 30; ++i2)
            {
              float v32 = (float)((float)((float)i2 * 0.10833)
                          - (float)(floorf((float)((float)i2 * 0.10833) / 6.2832) * 6.2832))
                  + 0.0;
              if (v32 >= 6.2832) {
                float v32 = nextafterf(6.2832, 0.0);
              }
              Phase::Geometry::CardioidDirectivity::CalculateSubbandGains<31ul>((uint64_t)buf, v30, 1.5708, v32);
              float v33 = 0.0014666;
              if (i2)
              {
                float v33 = 0.0014666;
                if (i2 != 29)
                {
                  float v34 = cosf((float)((float)(i2 - 1) * 0.10833) + 0.054165);
                  float v33 = v34 - cosf((float)((float)i2 * 0.10833) + 0.054165);
                }
              }
              float v35 = v33 * 0.5;
              Phase::details::ReturnForEachSubband<float,31ul,Phase::PackedSubbands<float,31ul> Phase::operator*<float,31ul>(Phase::PackedSubbands<float,31ul> const&,Phase::PackedSubbands<float,31ul> const&)::{lambda(float)#1} const&,0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul>(&v300, (uint64_t)buf, (uint64_t)buf);
              *(float *)&double v36 = v35;
              Phase::details::ReturnForEachSubband<float,31ul,Phase::PackedSubbands<float,31ul> Phase::operator*<float,31ul>(Phase::PackedSubbands<float,31ul> const&,float const&)::{lambda(float)#1} const&,0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul>(&v303, (uint64_t)&v300, v36);
              Phase::details::ReturnForEachSubband<float,31ul,Phase::PackedSubbands<float,31ul> Phase::operator+<float,31ul>(Phase::PackedSubbands<float,31ul> const&,Phase::PackedSubbands<float,31ul> const&)::{lambda(float)#1} const&,0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul>(&v306, (uint64_t)&v290, (uint64_t)&v303);
              float32x4_t v294 = v310;
              float32x4_t v295 = v311;
              v296[0] = v312[0];
              *(_OWORD *)((char *)v296 + 12) = *(_OWORD *)((char *)v312 + 12);
              float32x4_t v290 = v306;
              float32x4_t v291 = v307;
              float32x4_t v292 = v308;
              float32x4_t v293 = v309;
            }
          }
        }
        else
        {
          __asm { FMOV            V0.4S, #1.0 }
          float32x4_t v290 = _Q0;
          float32x4_t v291 = _Q0;
          float32x4_t v292 = _Q0;
          float32x4_t v293 = _Q0;
          float32x4_t v294 = _Q0;
          float32x4_t v295 = _Q0;
          v296[0] = _Q0;
          __asm { FMOV            V0.2S, #1.0 }
          *(void *)&v296[1] = _Q0.i64[0];
          DWORD2(v296[1]) = 1065353216;
        }
        LODWORD(v281) = *((_DWORD *)v4 + 31);
        if (v281 >= 0x1F) {
          uint64_t v281 = 31;
        }
        else {
          uint64_t v281 = v281;
        }
        if (v281)
        {
          v282 = &v290;
          do
          {
            float v283 = v282->f32[0];
            v282 = (float32x4_t *)((char *)v282 + 4);
            *(float *)unint64_t v4 = *(float *)v4 * (float)(v283 * v283);
            unint64_t v4 = (Phase::Logger *)((char *)v4 + 4);
            --v281;
          }
          while (v281);
        }
      }
      else
      {
LABEL_47:
        float v37 = **(NSObject ***)(Phase::Logger::GetInstance(a1) + 1184);
        if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "RayTracingMath.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 373;
          *(_WORD *)&unsigned char buf[18] = 2048;
          *(void *)&buf[20] = a3;
          _os_log_impl(&dword_221E5E000, v37, OS_LOG_TYPE_ERROR, "%25s:%-5d Unsupported subband count: %lu\n", buf, 0x1Cu);
        }
      }
      return;
  }
}

void Phase::SpatialModeler::getSoundPowerRelativeToOmni(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  *(_OWORD *)((char *)a4 + 108) = 0u;
  a4[5] = 0u;
  a4[6] = 0u;
  a4[3] = 0u;
  a4[4] = 0u;
  a4[1] = 0u;
  a4[2] = 0u;
  *a4 = 0u;
  *((_DWORD *)a4 + 31) = a3;
  if (a3) {
    memset_pattern16(a4, &memset_pattern, 4 * a3);
  }
  if (*(_DWORD *)(a1 + 16) > a2
    && *(_DWORD *)(*(void *)a1 + 24 * a2 + 20) == HIDWORD(a2))
  {
    float32x2_t v8 = *(int **)(*(void *)a1 + 24 * a2);
  }
  else
  {
    float32x2_t v8 = 0;
  }

  Phase::SpatialModeler::CalculateSoundPowerRelativeToOmni((Phase::Logger *)a4, v8, a3);
}

void Phase::SpatialModeler::applyScatteringFrequencyWeighting(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  long long v5 = a1[5];
  *(_OWORD *)(a3 + 64) = a1[4];
  *(_OWORD *)(a3 + 80) = v5;
  long long v6 = a1[7];
  *(_OWORD *)(a3 + 96) = a1[6];
  *(_OWORD *)(a3 + 112) = v6;
  long long v7 = a1[1];
  *(_OWORD *)a3 = *a1;
  *(_OWORD *)(a3 + 16) = v7;
  long long v8 = a1[3];
  *(_OWORD *)(a3 + 32) = a1[2];
  *(_OWORD *)(a3 + 48) = v8;
  float MeanScatteringCoefficient = Phase::SpatialModeler::getMeanScatteringCoefficient((float *)a2);
  if (MeanScatteringCoefficient > 0.0)
  {
    unsigned int v10 = *(_DWORD *)(a2 + 124);
    unsigned int v11 = *(_DWORD *)(a3 + 124);
    if (v10 < v11) {
      unsigned int v11 = *(_DWORD *)(a2 + 124);
    }
    if (v11)
    {
      unint64_t v12 = 0;
      do
      {
        *(float *)(a3 + 4 * v12) = *(float *)(a3 + 4 * v12)
                                 * (float)(*(float *)(a2 + 4 * v12) / MeanScatteringCoefficient);
        ++v12;
        LODWORD(v13) = *(_DWORD *)(a3 + 124);
        if (v10 >= v13) {
          unint64_t v13 = v13;
        }
        else {
          unint64_t v13 = v10;
        }
      }
      while (v12 < v13);
    }
  }
}

float Phase::SpatialModeler::getMeanScatteringCoefficient(float *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unsigned int v1 = *((_DWORD *)a1 + 31);
  if (v1)
  {
    float v2 = 0.0;
    uint64_t v3 = *((unsigned int *)a1 + 31);
    do
    {
      float v4 = *a1++;
      float v2 = v2 + v4;
      --v3;
    }
    while (v3);
    if (v1 > 1) {
      return v2 / (float)v1;
    }
  }
  else
  {
    long long v5 = **(NSObject ***)(Phase::Logger::GetInstance((Phase::Logger *)a1) + 1184);
    float v2 = 0.0;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315394;
      long long v8 = "RayTracingMath.cpp";
      __int16 v9 = 1024;
      int v10 = 461;
      _os_log_impl(&dword_221E5E000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d 0 scattering coefficients detected!", (uint8_t *)&v7, 0x12u);
    }
  }
  return v2;
}

float Phase::SpatialModeler::getMeanAbsorptionCoefficient(float *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unsigned int v1 = *((_DWORD *)a1 + 31);
  if (v1)
  {
    float v2 = 0.0;
    uint64_t v3 = *((unsigned int *)a1 + 31);
    do
    {
      float v4 = *a1++;
      float v2 = v2 + v4;
      --v3;
    }
    while (v3);
    if (v1 > 1) {
      return v2 / (float)v1;
    }
  }
  else
  {
    long long v5 = **(NSObject ***)(Phase::Logger::GetInstance((Phase::Logger *)a1) + 1184);
    float v2 = 0.0;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315394;
      long long v8 = "RayTracingMath.cpp";
      __int16 v9 = 1024;
      int v10 = 436;
      _os_log_impl(&dword_221E5E000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d 0 absorption coefficients detected!", (uint8_t *)&v7, 0x12u);
    }
  }
  return v2;
}

void Phase::SpatialModeler::GetFullSceneAABB(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = xmmword_2220A5C60;
  *(void *)(a2 + 16) = 0x80000000800000;
  float v4 = *(float32x2_t ***)(a1 + 120);
  unsigned int v5 = *(_DWORD *)(a1 + 136);
  long long v6 = &v4[3 * v5];
  if (v5)
  {
    int v7 = *v4;
    if (!*v4)
    {
      long long v8 = v4 + 3;
      while (1)
      {
        float v4 = v8;
        if (v8 >= v6) {
          break;
        }
        v8 += 3;
        int v7 = *v4;
        if (*v4) {
          goto LABEL_9;
        }
      }
      int v7 = 0;
    }
LABEL_9:
    unint64_t v9 = (unint64_t)v6;
  }
  else
  {
    int v7 = 0;
    unint64_t v9 = *(void *)(a1 + 120);
  }
  if (v4 != v6)
  {
    float v10 = 3.4028e38;
    float v11 = -3.4028e38;
    float v12 = -3.4028e38;
    v13.i32[0] = -8388609;
    float v14 = 3.4028e38;
    v15.i32[0] = 2139095039;
    int v29 = v6;
    do
    {
      if (v7 && v7->i32[0] == 4)
      {
        float v17 = (void *)v7[15];
        float v16 = (void *)v7[16];
        if (v16 == v17)
        {
          float v25 = v7[8].f32[0];
          float v26 = v7[8].f32[1];
          v15.f32[0] = fminf(v15.f32[0], v25);
          float v14 = fminf(v14, v26);
          float v27 = v7[9].f32[0];
          float v10 = fminf(v10, v27);
          v13.f32[0] = fmaxf(v13.f32[0], v25);
          float v12 = fmaxf(v12, v26);
          float v11 = fmaxf(v11, v27);
          *(_DWORD *)a2 = v15.i32[0];
          *(float *)(a2 + 4) = v14;
          *(float *)(a2 + 8) = v10;
          *(_DWORD *)(a2 + 12) = v13.i32[0];
          *(float *)(a2 + 16) = v12;
          *(float *)(a2 + 20) = v11;
        }
        else
        {
          do
          {
            if (*(_DWORD *)(a1 + 112) > *v17)
            {
              uint64_t v18 = *(void *)(a1 + 96);
              if (*(_DWORD *)(v18 + 24 * *v17 + 20) == HIDWORD(*v17))
              {
                uint64_t v19 = *(void *)(v18 + 24 * *v17);
                if (v19)
                {
                  int v20 = 0;
                  unint64_t v21 = (uint64_t *)(v19 + 24);
                  do
                  {
                    Phase::GetVertex<float>(v21, v20, (uint64_t)v30);
                    Phase::operator*<float>((float *)&v7[6], v30, (float *)&v31);
                    float v22 = v7[9].f32[1];
                    float v23 = (float)(v22 * v32) + v7[9].f32[0];
                    float32x2_t v24 = vadd_f32(vmul_n_f32(v31, v22), v7[8]);
                    float32x2_t v15 = vminnm_f32(*(float32x2_t *)a2, v24);
                    float v10 = fminf(*(float *)(a2 + 8), v23);
                    float v11 = fmaxf(*(float *)(a2 + 20), v23);
                    *(float32x2_t *)a2 = v15;
                    *(float *)(a2 + 8) = v10;
                    float32x2_t v13 = vmaxnm_f32(*(float32x2_t *)(a2 + 12), v24);
                    *(float32x2_t *)(a2 + 12) = v13;
                    *(float *)(a2 + 20) = v11;
                    ++v20;
                  }
                  while (v20 != 8);
                  float v12 = v13.f32[1];
                  float v14 = v15.f32[1];
                  long long v6 = v29;
                }
              }
            }
            ++v17;
          }
          while (v17 != v16);
        }
      }
      if ((unint64_t)v4 < v9)
      {
        unint64_t v28 = v4 + 3;
        while (1)
        {
          float v4 = v28;
          if ((unint64_t)v28 >= v9) {
            break;
          }
          v28 += 3;
          int v7 = *v4;
          if (*v4) {
            goto LABEL_30;
          }
        }
        int v7 = 0;
      }
LABEL_30:
      ;
    }
    while (v4 != v6);
  }
}

uint64_t *Phase::GetVertex<float>@<X0>(uint64_t *result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  switch(a2)
  {
    case 1:
      int v3 = *((_DWORD *)result + 5);
      uint64_t v4 = *result;
      goto LABEL_11;
    case 2:
      int v5 = *(_DWORD *)result;
      int v6 = *((_DWORD *)result + 4);
      int v7 = *((_DWORD *)result + 2);
      goto LABEL_9;
    case 3:
      *(_DWORD *)a3 = *(_DWORD *)result;
      uint64_t v8 = result[2];
      goto LABEL_7;
    case 4:
      *(_DWORD *)a3 = *((_DWORD *)result + 3);
      uint64_t v8 = *(uint64_t *)((char *)result + 4);
LABEL_7:
      *(void *)(a3 + 4) = v8;
      return result;
    case 5:
      int v5 = *((_DWORD *)result + 3);
      int v6 = *((_DWORD *)result + 1);
      int v7 = *((_DWORD *)result + 5);
LABEL_9:
      *(_DWORD *)a3 = v5;
      *(_DWORD *)(a3 + 4) = v6;
      *(_DWORD *)(a3 + 8) = v7;
      return result;
    case 6:
      int v3 = *((_DWORD *)result + 2);
      uint64_t v4 = *(uint64_t *)((char *)result + 12);
LABEL_11:
      *(void *)a3 = v4;
      goto LABEL_13;
    case 7:
      *(void *)a3 = *(uint64_t *)((char *)result + 12);
      int v3 = *((_DWORD *)result + 5);
      goto LABEL_13;
    default:
      *(void *)a3 = *result;
      int v3 = *((_DWORD *)result + 2);
LABEL_13:
      *(_DWORD *)(a3 + 8) = v3;
      return result;
  }
}

void Phase::SpatialModeler::GetHitShapesAABB(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)a3 = xmmword_2220A5C60;
  *(void *)(a3 + 16) = 0x80000000800000;
  int v5 = *(float32x2_t ***)(a1 + 120);
  unsigned int v6 = *(_DWORD *)(a1 + 136);
  int v7 = &v5[3 * v6];
  if (v6)
  {
    uint64_t v8 = *v5;
    if (!*v5)
    {
      unint64_t v9 = v5 + 3;
      while (1)
      {
        int v5 = v9;
        if (v9 >= v7) {
          break;
        }
        v9 += 3;
        uint64_t v8 = *v5;
        if (*v5) {
          goto LABEL_9;
        }
      }
      uint64_t v8 = 0;
    }
LABEL_9:
    unint64_t v10 = (unint64_t)v7;
  }
  else
  {
    uint64_t v8 = 0;
    unint64_t v10 = *(void *)(a1 + 120);
  }
  if (v5 != v7)
  {
    uint64_t v30 = v7;
    float32x2_t v31 = (void *)(a2 + 8);
    do
    {
      if (v8)
      {
        if (v8->i32[0] == 4)
        {
          float v11 = (void *)v8[15];
          for (int i = (void *)v8[16]; v11 != i; ++v11)
          {
            if (*(_DWORD *)(a1 + 112) > *v11)
            {
              uint64_t v13 = *(void *)(a1 + 96);
              if (*(_DWORD *)(v13 + 24 * *v11 + 20) == HIDWORD(*v11))
              {
                uint64_t v14 = *(void *)(v13 + 24 * *v11);
                if (v14)
                {
                  float32x2_t v15 = (void *)*v31;
                  if (*v31)
                  {
                    unint64_t v16 = *(void *)(v14 + 8);
                    float v17 = v31;
                    do
                    {
                      unint64_t v18 = v15[4];
                      BOOL v19 = v18 >= v16;
                      if (v18 >= v16) {
                        int v20 = v15;
                      }
                      else {
                        int v20 = v15 + 1;
                      }
                      if (v19) {
                        float v17 = v15;
                      }
                      float32x2_t v15 = (void *)*v20;
                    }
                    while (*v20);
                    if (v17 != v31 && v16 >= v17[4])
                    {
                      int v21 = 0;
                      float v22 = (uint64_t *)(v14 + 24);
                      do
                      {
                        Phase::GetVertex<float>(v22, v21, (uint64_t)v32);
                        Phase::operator*<float>((float *)&v8[6], v32, (float *)&v33);
                        float v23 = v8[9].f32[1];
                        float v24 = (float)(v23 * v34) + v8[9].f32[0];
                        float32x2_t v25 = vadd_f32(vmul_n_f32(v33, v23), v8[8]);
                        float v26 = fminf(*(float *)(a3 + 8), v24);
                        float v27 = fmaxf(*(float *)(a3 + 20), v24);
                        *(float32x2_t *)a3 = vminnm_f32(*(float32x2_t *)a3, v25);
                        *(float *)(a3 + 8) = v26;
                        *(float32x2_t *)(a3 + 12) = vmaxnm_f32(*(float32x2_t *)(a3 + 12), v25);
                        *(float *)(a3 + 20) = v27;
                        ++v21;
                      }
                      while (v21 != 8);
                    }
                  }
                }
              }
            }
          }
        }
      }
      if ((unint64_t)v5 >= v10)
      {
        int v29 = v30;
      }
      else
      {
        unint64_t v28 = v5 + 3;
        int v29 = v30;
        while (1)
        {
          int v5 = v28;
          if ((unint64_t)v28 >= v10) {
            break;
          }
          v28 += 3;
          uint64_t v8 = *v5;
          if (*v5) {
            goto LABEL_39;
          }
        }
        uint64_t v8 = 0;
      }
LABEL_39:
      ;
    }
    while (v5 != v29);
  }
}

void Phase::SpatialModeler::countSurfaceArea(uint64_t a1, void *a2, Phase::SpatialModeler::RayTracerState *a3, uint64_t *a4, float *a5, float *a6, float a7, float a8)
{
  *a5 = 0.0;
  long long v67 = 0u;
  memset(v68, 0, 28);
  long long v65 = 0u;
  long long v66 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  long long __b = 0u;
  *(_DWORD *)&v68[28] = a3;
  if (a3)
  {
    bzero(&__b, 4 * (void)a3);
    long long v13 = v67;
    *((_OWORD *)a6 + 4) = v66;
    *((_OWORD *)a6 + 5) = v13;
    long long v14 = *(_OWORD *)&v68[16];
    *((_OWORD *)a6 + 6) = *(_OWORD *)v68;
    *((_OWORD *)a6 + 7) = v14;
    long long v15 = v63;
    *(_OWORD *)a6 = __b;
    *((_OWORD *)a6 + 1) = v15;
    long long v16 = v65;
    *((_OWORD *)a6 + 2) = v64;
    *((_OWORD *)a6 + 3) = v16;
    long long v67 = 0u;
    memset(v68, 0, 28);
    long long v65 = 0u;
    long long v66 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    long long __b = 0u;
    memset_pattern16(&__b, &unk_2220E7DE0, 4 * (void)a3);
  }
  else
  {
    long long v17 = v67;
    *((_OWORD *)a6 + 4) = v66;
    *((_OWORD *)a6 + 5) = v17;
    long long v18 = *(_OWORD *)&v68[16];
    *((_OWORD *)a6 + 6) = *(_OWORD *)v68;
    *((_OWORD *)a6 + 7) = v18;
    long long v19 = v63;
    *(_OWORD *)a6 = __b;
    *((_OWORD *)a6 + 1) = v19;
    long long v20 = v65;
    *((_OWORD *)a6 + 2) = v64;
    *((_OWORD *)a6 + 3) = v20;
    long long v67 = 0uLL;
    memset(v68, 0, 28);
    long long v65 = 0uLL;
    long long v66 = 0uLL;
    long long v63 = 0uLL;
    long long v64 = 0uLL;
    long long __b = 0uLL;
  }
  SubbandIndesimd_float4 x = Phase::SpatialModeler::RayTracerState::GetSubbandIndex(a3);
  float v24 = (float *)*a2;
  float v22 = (float *)(a2 + 1);
  float v23 = v24;
  if (v24 != v22)
  {
    unsigned int v25 = *(_DWORD *)(a1 + 112);
    uint64_t v56 = 40 * SubbandIndex;
    int32x2_t v54 = v22;
    unsigned int v53 = v25;
    do
    {
      uint64_t v26 = *((void *)v23 + 4);
      if (v25 > v26)
      {
        uint64_t v27 = *(void *)(a1 + 96);
        if (*(_DWORD *)(v27 + 24 * v26 + 20) == HIDWORD(v26))
        {
          uint64_t v28 = *(void *)(v27 + 24 * *((void *)v23 + 4));
          if (v28)
          {
            float v29 = (float)(fminf(fmaxf(v23[10], 0.1), 0.5) + -0.1) / 0.4;
            uint64_t v30 = *(void *)(v28 + 72);
            uint64_t v57 = v28;
            uint64_t v31 = *(void *)(v28 + 80) - v30;
            if (v31)
            {
              uint64_t v32 = 0;
              unint64_t v33 = v31 >> 2;
              uint64_t v34 = *(void *)(**(void **)(v28 + 144) + 16 * *(void *)(v28 + 152));
              uint64_t v60 = *(void *)(v34 + 32);
              uint64_t v61 = *(void *)(v34 + 8);
              unsigned int v59 = *(_DWORD *)(a1 + 88);
              uint64_t v35 = *a4;
              unint64_t v36 = (a4[1] - *a4) >> 2;
              if (v33 <= 1) {
                uint64_t v37 = 1;
              }
              else {
                uint64_t v37 = v33;
              }
              do
              {
                uint64_t v38 = *(void *)(v61 + v32 * v60);
                if (v59 > v38)
                {
                  uint64_t v39 = *(void *)(a1 + 72);
                  if (*(_DWORD *)(v39 + 24 * v38 + 20) == HIDWORD(v38))
                  {
                    uint64_t v40 = *(void *)(v39 + 24 * *(void *)(v61 + v32 * v60));
                    if (v40)
                    {
                      if (*(_DWORD *)v40 == 1)
                      {
                        float v41 = *(_OWORD **)(*(void *)(v40 + 40) + v56);
                        if (v41)
                        {
                          long long v42 = v41[31];
                          long long v66 = v41[30];
                          long long v67 = v42;
                          long long v43 = v41[33];
                          *(_OWORD *)float v68 = v41[32];
                          *(_OWORD *)&v68[16] = v43;
                          long long v44 = v41[27];
                          long long __b = v41[26];
                          long long v63 = v44;
                          long long v45 = v41[29];
                          long long v64 = v41[28];
                          long long v65 = v45;
                        }
                      }
                    }
                  }
                }
                if (a3)
                {
                  unint64_t v46 = 0;
                  do
                  {
                    float v47 = *((float *)&__b + v46);
                    if (v46 < v36) {
                      float v47 = v47 * *(float *)(v35 + 4 * v46);
                    }
                    float v48 = *(float *)(v30 + 4 * v32);
                    a6[v46] = a6[v46]
                            + (float)((float)-(float)(v48 * v29)
                                    * logf((float)(1.0 - fminf(fmaxf(v47, a7), a8)) + 0.00000011921));
                    ++v46;
                  }
                  while (a3 != (Phase::SpatialModeler::RayTracerState *)v46);
                }
                ++v32;
              }
              while (v32 != v37);
            }
            float v22 = v54;
            *a5 = *a5 + (float)(*(float *)(v57 + 64) * v29);
            unsigned int v25 = v53;
          }
        }
      }
      float v49 = (float *)*((void *)v23 + 1);
      if (v49)
      {
        do
        {
          float v50 = v49;
          float v49 = *(float **)v49;
        }
        while (v49);
      }
      else
      {
        do
        {
          float v50 = (float *)*((void *)v23 + 2);
          BOOL v51 = *(void *)v50 == (void)v23;
          float v23 = v50;
        }
        while (!v51);
      }
      float v23 = v50;
    }
    while (v50 != v22);
  }
}

uint64_t Phase::SpatialModeler::calculateAbsorptionCorrectionToMatchReverbTime(BOOL a1, uint64_t a2, uint64_t a3, uint64_t a4, float a5, float a6, float a7, float a8, float a9)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  unint64_t v10 = *(unsigned int *)(a1 + 124);
  if (!v10 || *(_DWORD *)(a2 + 124) != v10) {
    return 0;
  }
  uint64_t v14 = a1;
  long long v15 = *(float **)a4;
  if (v10 != (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2)
  {
    std::vector<float>::resize(a4, v10);
    long long v15 = *(float **)a4;
    uint64_t v16 = *(void *)(a4 + 8) - *(void *)a4;
    if (v16 >= 1) {
      memset_pattern16(*(void **)a4, &memset_pattern, 4 * (((unint64_t)v16 >> 2) - ((unint64_t)v16 > 3)) + 4);
    }
  }
  if (*(_DWORD *)(a2 + 124))
  {
    uint64_t v17 = 0;
    float v18 = a5 * 55.262;
    float v19 = a6 * a7;
    while (1)
    {
      float v20 = *(float *)(a2 + 4 * v17);
      if (v20 <= 0.0) {
        break;
      }
      float v21 = *(float *)(a3 + 4 * v17) * 4.0;
      if ((float)(0.163 / v21) <= 12.0) {
        float v22 = (float)(0.163 / v21) * 0.95;
      }
      else {
        float v22 = 11.4;
      }
      float v23 = (float)(v21 * a5) / a6;
      float v24 = 1.0 - expf(v23 - (float)(v18 / (float)(v19 * fminf(fmaxf(v20, 0.05), v22))));
      float v25 = v15[v17]
          * (float)(a8
                  + (float)(a9
                          * (float)(v24
                                  / (float)(1.0 - expf(v23 - (float)(v18 / (float)(v19 * *(float *)(v14 + 4 * v17))))))));
      v15[v17] = v25;
      if ((LODWORD(v25) & 0x7FFFFFFFu) > 0x7F7FFFFF)
      {
        uint64_t v30 = **(NSObject ***)(Phase::Logger::GetInstance((Phase::Logger *)a1) + 1184);
        a1 = os_log_type_enabled(v30, OS_LOG_TYPE_ERROR);
        if (a1)
        {
          double v31 = *(float *)(*(void *)a4 + 4 * v17);
          *(_DWORD *)buf = 136315650;
          uint64_t v38 = "RayTracingMath.cpp";
          __int16 v39 = 1024;
          int v40 = 831;
          __int16 v41 = 2048;
          double v42 = v31;
          uint64_t v28 = v30;
          float v29 = "%25s:%-5d Error while calculating material correction factor (%f).";
LABEL_18:
          _os_log_impl(&dword_221E5E000, v28, OS_LOG_TYPE_ERROR, v29, buf, 0x1Cu);
        }
        goto LABEL_19;
      }
      v15[v17] = fminf(fmaxf(v25, 0.001), 1000.0);
LABEL_20:
      if (++v17 >= (unint64_t)*(unsigned int *)(a2 + 124)) {
        return 1;
      }
    }
    uint64_t v26 = **(NSObject ***)(Phase::Logger::GetInstance((Phase::Logger *)a1) + 1184);
    a1 = os_log_type_enabled(v26, OS_LOG_TYPE_ERROR);
    if (a1)
    {
      double v27 = *(float *)(a2 + 4 * v17);
      *(_DWORD *)buf = 136315650;
      uint64_t v38 = "RayTracingMath.cpp";
      __int16 v39 = 1024;
      int v40 = 781;
      __int16 v41 = 2048;
      double v42 = v27;
      uint64_t v28 = v26;
      float v29 = "%25s:%-5d Zero or negative target RT60 requested (%f).";
      goto LABEL_18;
    }
LABEL_19:
    long long v15 = *(float **)a4;
    *(_DWORD *)(*(void *)a4 + 4 * v17) = 1065353216;
    goto LABEL_20;
  }
  return 1;
}

float *Phase::SpatialModeler::FilterTargetRoomAcousticParameters(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  memset(v46, 0, sizeof(v46));
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  memset(v39, 0, sizeof(v39));
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  switch(a2)
  {
    case 31:
      long long v9 = *(_OWORD *)(a1 + 252);
      long long v40 = *(_OWORD *)(a1 + 236);
      long long v41 = v9;
      long long v10 = *(_OWORD *)(a1 + 316);
      long long v44 = *(_OWORD *)(a1 + 300);
      long long v45 = v10;
      v46[0] = *(_OWORD *)(a1 + 332);
      *(_OWORD *)((char *)v46 + 12) = *(_OWORD *)(a1 + 344);
      long long v11 = *(_OWORD *)(a1 + 284);
      long long v42 = *(_OWORD *)(a1 + 268);
      long long v43 = v11;
      long long v12 = *(_OWORD *)(a1 + 608);
      long long v13 = *(_OWORD *)(a1 + 624);
      long long v14 = *(_OWORD *)(a1 + 656);
      long long v35 = *(_OWORD *)(a1 + 640);
      long long v36 = v14;
      long long v33 = v12;
      long long v34 = v13;
      long long v15 = *(_OWORD *)(a1 + 672);
      long long v16 = *(_OWORD *)(a1 + 688);
      long long v17 = *(_OWORD *)(a1 + 704);
      *(_OWORD *)((char *)v39 + 12) = *(_OWORD *)(a1 + 716);
      long long v38 = v16;
      v39[0] = v17;
      long long v37 = v15;
      HIDWORD(v46[1]) = 31;
      HIDWORD(v39[1]) = 31;
      goto LABEL_8;
    case 10:
      long long v18 = *(_OWORD *)(a1 + 92);
      buf[0] = *(_OWORD *)(a1 + 76);
      buf[1] = v18;
      *(void *)&buf[2] = *(void *)(a1 + 108);
      long long v19 = *(_OWORD *)(a1 + 212);
      v47[0] = *(_OWORD *)(a1 + 196);
      v47[1] = v19;
      *(void *)&v47[2] = *(void *)(a1 + 228);
      memset((char *)&buf[2] + 8, 0, 84);
      *(_OWORD *)((char *)v46 + 12) = *(_OWORD *)((char *)&buf[6] + 12);
      long long v45 = buf[5];
      v46[0] = buf[6];
      long long v43 = buf[3];
      long long v44 = buf[4];
      long long v41 = buf[1];
      long long v42 = buf[2];
      long long v40 = buf[0];
      int v8 = 10;
      HIDWORD(v46[1]) = 10;
      memset((char *)&v47[2] + 8, 0, 84);
      goto LABEL_7;
    case 3:
      *(void *)&buf[0] = *(void *)(a1 + 28);
      DWORD2(buf[0]) = *(_DWORD *)(a1 + 36);
      *(void *)&v47[0] = *(void *)(a1 + 64);
      DWORD2(v47[0]) = *(_DWORD *)(a1 + 72);
      *(_OWORD *)((char *)buf + 12) = 0uLL;
      *(_OWORD *)((char *)&buf[1] + 12) = 0uLL;
      *(_OWORD *)((char *)&buf[2] + 12) = 0uLL;
      *(_OWORD *)((char *)&buf[3] + 12) = 0uLL;
      *(_OWORD *)((char *)&buf[5] + 12) = 0uLL;
      *(_OWORD *)((char *)&buf[4] + 12) = 0uLL;
      *(_OWORD *)((char *)&buf[6] + 12) = 0uLL;
      long long v42 = buf[2];
      long long v43 = buf[3];
      long long v40 = buf[0];
      long long v41 = buf[1];
      *(_OWORD *)((char *)v46 + 12) = 0uLL;
      long long v45 = buf[5];
      v46[0] = buf[6];
      long long v44 = buf[4];
      int v8 = 3;
      HIDWORD(v46[1]) = 3;
      *(_OWORD *)((char *)&v47[6] + 12) = 0uLL;
      *(_OWORD *)((char *)&v47[5] + 12) = 0uLL;
      *(_OWORD *)((char *)&v47[4] + 12) = 0uLL;
      *(_OWORD *)((char *)&v47[3] + 12) = 0uLL;
      *(_OWORD *)((char *)&v47[2] + 12) = 0uLL;
      *(_OWORD *)((char *)&v47[1] + 12) = 0uLL;
      *(_OWORD *)((char *)v47 + 12) = 0uLL;
LABEL_7:
      long long v35 = v47[2];
      long long v36 = v47[3];
      long long v33 = v47[0];
      long long v34 = v47[1];
      *(_OWORD *)((char *)v39 + 12) = *(_OWORD *)((char *)&v47[6] + 12);
      long long v38 = v47[5];
      v39[0] = v47[6];
      long long v37 = v47[4];
      HIDWORD(v39[1]) = v8;
      goto LABEL_8;
  }
  uint64_t v32 = **(NSObject ***)(Phase::Logger::GetInstance((Phase::Logger *)a1) + 1184);
  if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
  {
    LODWORD(buf[0]) = 136315650;
    *(void *)((char *)buf + 4) = "RayTracingMath.cpp";
    WORD6(buf[0]) = 1024;
    *(_DWORD *)((char *)buf + 14) = 876;
    WORD1(buf[1]) = 2048;
    *(void *)((char *)&buf[1] + 4) = a2;
    _os_log_impl(&dword_221E5E000, v32, OS_LOG_TYPE_ERROR, "%25s:%-5d Unsupported sub-band count: %zu\n", (uint8_t *)buf, 0x1Cu);
  }
LABEL_8:
  Phase::SpatialModeler::TRAP::RT60Processor::Process(&v40, (uint64_t)&v33, a1, a3);
  if (*(unsigned char *)(a3 + 194)) {
    *(float *)&double TimeSinceLastProcess = 1.0 / a4;
  }
  else {
    double TimeSinceLastProcess = Phase::SpatialModeler::TRAP::Sentinel::GetTimeSinceLastProcess(a3 + 21448);
  }
  double result = Phase::SpatialModeler::TRAP::Sentinel::Process(a1, a3, *(float *)&TimeSinceLastProcess);
  long long v22 = v45;
  *(_OWORD *)(a3 + 21664) = v44;
  *(_OWORD *)(a3 + 21680) = v22;
  long long v23 = v46[1];
  *(_OWORD *)(a3 + 21696) = v46[0];
  *(_OWORD *)(a3 + 21712) = v23;
  long long v24 = v41;
  *(_OWORD *)(a3 + 21600) = v40;
  *(_OWORD *)(a3 + 21616) = v24;
  long long v25 = v43;
  *(_OWORD *)(a3 + 21632) = v42;
  *(_OWORD *)(a3 + 21648) = v25;
  long long v26 = v33;
  long long v27 = v34;
  long long v28 = v35;
  *(_OWORD *)(a3 + 21776) = v36;
  *(_OWORD *)(a3 + 21760) = v28;
  *(_OWORD *)(a3 + 21744) = v27;
  *(_OWORD *)(a3 + 21728) = v26;
  long long v29 = v37;
  long long v30 = v38;
  long long v31 = v39[0];
  *(_OWORD *)(a3 + 21840) = v39[1];
  *(_OWORD *)(a3 + 21824) = v31;
  *(_OWORD *)(a3 + 21808) = v30;
  *(_OWORD *)(a3 + 21792) = v29;
  return result;
}

BOOL Phase::SpatialModeler::IsHistogramEnergyLowerThanTheoreticalPrediction(Phase::SpatialModeler::EnergyHistogram *a1, uint64_t a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, uint64x2_t a10)
{
  float v10 = *(float *)&a3;
  float TotalEnergyDivBands = Phase::SpatialModeler::EnergyHistogram::getTotalEnergyDivBands(a1, a3, a4, a5, a6, a7, a8, a9, a10);
  unsigned int v13 = *(_DWORD *)(a2 + 124);
  if (v13)
  {
    float v14 = 0.0;
    uint64_t v15 = *(unsigned int *)(a2 + 124);
    do
    {
      float v16 = *(float *)a2;
      a2 += 4;
      float v14 = v14 + v16;
      --v15;
    }
    while (v15);
    if (v13 >= 2) {
      float v17 = v14 / (float)v13;
    }
    else {
      float v17 = v14;
    }
  }
  else
  {
    float v17 = 0.0;
  }
  return TotalEnergyDivBands <= (float)(expf((float)((float)(fabsf(v10) * -10.0) / 10.0) * 0.23026) * v17);
}

float Phase::SpatialModeler::GetMaximumEnergy(Phase::SpatialModeler *this, const Phase::SpatialModeler::RayTracerState *a2, const Handle64 *a3)
{
  uint64_t v3 = *((void *)this + 2366);
  if (*((void *)this + 2367) == v3) {
    return 0.0;
  }
  unint64_t v5 = 0;
  float v6 = 0.0;
  int64x2_t v22 = vdupq_n_s64(4uLL);
  do
  {
    unint64_t v27 = *(void *)(v3 + 56 * v5);
    Phase::SpatialModeler::RayTracerState::GetSourceListenerResult(this, &v27, (uint64_t)v23);
    if (v25 && !*(unsigned char *)(v25 + 36))
    {
      uint64_t v9 = (*(_DWORD *)(v25 + 28) * *(_DWORD *)(v25 + 24));
      if (v9)
      {
        uint64_t v10 = (v9 + 3) & 0x1FFFFFFFCLL;
        uint64x2_t v11 = (uint64x2_t)vdupq_n_s64(v9 - 1);
        long long v12 = (__int32 *)(*(void *)(v25 + 8) + 8);
        int64x2_t v13 = (int64x2_t)xmmword_2220A5520;
        int64x2_t v14 = (int64x2_t)xmmword_2220A5510;
        float32x4_t v15 = (float32x4_t)xmmword_2220A5530;
        do
        {
          float32x4_t v16 = v15;
          int32x4_t v17 = (int32x4_t)vcgeq_u64(v11, (uint64x2_t)v13);
          *(int32x2_t *)v7.i8 = vmovn_s64((int64x2_t)v17);
          *(int16x4_t *)v15.f32 = vmovn_s32(v7);
          if (v15.i8[0]) {
            v15.i32[0] = *(v12 - 2);
          }
          if (vmovn_s32(v7).i8[2]) {
            v15.i32[1] = *(v12 - 1);
          }
          int32x4_t v7 = (int32x4_t)vcgeq_u64(v11, (uint64x2_t)v14);
          int32x2_t v18 = (int32x2_t)vmovn_s32(vmovn_hight_s64(v8, (int64x2_t)v7));
          if (v18.i8[4]) {
            v15.i32[2] = *v12;
          }
          int32x2_t v8 = (int32x2_t)vmovn_s32(vmovn_hight_s64(v18, (int64x2_t)v7));
          if (v8.i8[6]) {
            v15.i32[3] = v12[1];
          }
          float32x4_t v15 = vaddq_f32(v16, v15);
          int64x2_t v14 = vaddq_s64(v14, v22);
          int64x2_t v13 = vaddq_s64(v13, v22);
          v12 += 4;
          v10 -= 4;
        }
        while (v10);
        int8x16_t v19 = vbslq_s8((int8x16_t)vuzp1q_s32(v17, v7), (int8x16_t)v15, (int8x16_t)v16);
        float v20 = (float)(vaddv_f32(*(float32x2_t *)v19.i8) + *(float *)&v19.i32[2]) + *(float *)&v19.i32[3];
      }
      else
      {
        float v20 = 0.0;
      }
      if (v20 >= v6) {
        float v6 = v20;
      }
    }
    if (v26) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v26);
    }
    if (v24) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v24);
    }
    ++v5;
    uint64_t v3 = *((void *)this + 2366);
  }
  while (v5 < 0x6DB6DB6DB6DB6DB7 * ((*((void *)this + 2367) - v3) >> 3));
  return v6;
}

uint64_t Phase::SpatialModeler::GetListenerOutsideEstimate(Phase::SpatialModeler *this, const Phase::SpatialModeler::RayTracerState *a2, const Phase::SpatialModeler::RayTracerState *a3)
{
  unint64_t v5 = (float *)((char *)this + 19016);
  unsigned int v6 = *((_DWORD *)this + 4826);
  if (v6) {
    BOOL v7 = (float)((float)*((unsigned int *)this + 4833) / (float)v6) > 0.85;
  }
  else {
    BOOL v7 = 0;
  }
  BOOL v8 = Phase::Contains<float>((float *)this + 5244, (float *)this + 5698);
  int v9 = *((_DWORD *)this + 16);
  unsigned int v10 = *(_DWORD *)v5 - v9;
  if (*(_DWORD *)v5 != v9) {
    unsigned int v10 = (float)(v5[73] / (float)v10) > 0.75;
  }
  if ((v7 | v10)) {
    return 1;
  }
  float v12 = *((float *)this + 4876);
  BOOL v13 = v12 > 0.0;
  if ((float)(v12 / *((float *)a2 + 4876)) >= 0.15) {
    BOOL v13 = 0;
  }
  if (*((_DWORD *)this + 5258) >= 4u) {
    BOOL v13 = 0;
  }
  return !v8 | v13;
}

BOOL Phase::Contains<float>(float *a1, float *a2)
{
  if (*a1 > *a2 || *a2 > a1[3]) {
    return 0;
  }
  float v3 = a2[1];
  if (a1[1] > v3 || v3 > a1[4]) {
    return 0;
  }
  float v5 = a2[2];
  return a1[2] <= v5 && v5 <= a1[5];
}

void Phase::Geometry::CardioidDirectivity::CalculateSubbandGains<4ul>(uint64_t a1, float a2, float a3)
{
  __asm { FMOV            V1.4S, #1.0 }
  long long v16 = _Q1;
  if (*(_DWORD *)(a1 + 140) >= 4u) {
    unsigned int v9 = 4;
  }
  else {
    unsigned int v9 = *(_DWORD *)(a1 + 140);
  }
  if (v9)
  {
    float v11 = sinf(a2);
    uint64_t v12 = 0;
    float v13 = v11 * cosf(a3);
    uint64_t v14 = 4 * v9;
    do
    {
      float v15 = (float)(1.0 - *(float *)(a1 + v12 + 144)) + (float)(v13 * *(float *)(a1 + v12 + 144));
      if (v15 < 0.0) {
        float v15 = -v15;
      }
      *(float *)((char *)&v16 + v12) = powf(v15, *(float *)(a1 + v12 + 272));
      v12 += 4;
    }
    while (v14 != v12);
  }
}

float Phase::Geometry::ConeDirectivity::CalculateSubbandGains<4ul>(uint64_t a1, float a2)
{
  __asm { FMOV            V1.4S, #1.0 }
  if (*(_DWORD *)(a1 + 140) >= 4u) {
    unsigned int v7 = 4;
  }
  else {
    unsigned int v7 = *(_DWORD *)(a1 + 140);
  }
  if (!v7) {
    return 1.0;
  }
  uint64_t v8 = 0;
  uint64_t v9 = 4 * v7;
  do
  {
    float v10 = *(float *)(a1 + v8 + 144);
    float v11 = *(float *)(a1 + v8 + 272);
    float v12 = v10 - v11;
    if ((float)(v10 - v11) < 0.0) {
      float v12 = -(float)(v10 - v11);
    }
    if (v12 <= 0.001745)
    {
      float v13 = 0.0;
      if (v10 <= a2)
      {
        if (v10 >= a2) {
          float v13 = 0.5;
        }
        else {
          float v13 = 1.0;
        }
      }
    }
    else
    {
      float v13 = fminf(fmaxf((float)(a2 - v10) / (float)(v11 - v10), 0.0), 1.0);
    }
    *(float *)((char *)&v15 + v8) = (float)(1.0 - v13) + (float)(*(float *)(a1 + v8 + 400) * v13);
    v8 += 4;
  }
  while (v9 != v8);
  return *(float *)&v15;
}

void Phase::Geometry::SphericalCapDirectivity::GetSubbandGainsFromDatabase<4ul>(Phase::Logger *a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  unsigned int v1 = **(NSObject ***)(Phase::Logger::GetInstance(a1) + 928);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
  {
    int v3 = 136315394;
    uint64_t v4 = "GeoSphericalCapDirectivity.hpp";
    __int16 v5 = 1024;
    int v6 = 216;
    _os_log_impl(&dword_221E5E000, v1, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument): \"SphericalCapDirectivity; unrecognized frequency resolution for GetG"
      "ainsFromDatabase.\"",
      (uint8_t *)&v3,
      0x12u);
  }
  exceptioint n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::invalid_argument::invalid_argument[abi:ne180100](exception, "SphericalCapDirectivity; unrecognized frequency resolution for GetGainsFromDatabase.");
}

void sub_2220401A0(_Unwind_Exception *exception_object)
{
}

void Phase::Geometry::CardioidDirectivity::CalculateSubbandGains<5ul>(uint64_t a1, uint64_t a2, float a3, float a4)
{
  __asm { FMOV            V1.4S, #1.0 }
  *(_OWORD *)a1 = _Q1;
  *(_DWORD *)(a1 + 16) = 1065353216;
  unsigned int v10 = *(_DWORD *)(a2 + 140);
  if (v10 >= 5) {
    uint64_t v11 = 5;
  }
  else {
    uint64_t v11 = v10;
  }
  if (v11)
  {
    float v12 = (float *)a1;
    float v13 = (float *)(a2 + 272);
    float v14 = sinf(a3);
    float v15 = v14 * cosf(a4);
    do
    {
      float v16 = *(v13 - 32);
      float v17 = *v13++;
      float v18 = v17;
      float v19 = (float)(1.0 - v16) + (float)(v15 * v16);
      if (v19 < 0.0) {
        float v19 = -v19;
      }
      *v12++ = powf(v19, v18);
      --v11;
    }
    while (v11);
  }
}

uint64_t Phase::Geometry::ConeDirectivity::CalculateSubbandGains<5ul>(uint64_t result, uint64_t a2, float a3)
{
  __asm { FMOV            V1.4S, #1.0 }
  *(_OWORD *)double result = _Q1;
  *(_DWORD *)(result + 16) = 1065353216;
  LODWORD(v8) = *(_DWORD *)(a2 + 140);
  if (v8 >= 5) {
    uint64_t v8 = 5;
  }
  else {
    uint64_t v8 = v8;
  }
  if (v8)
  {
    uint64_t v9 = (float *)(a2 + 400);
    do
    {
      float v10 = *(v9 - 64);
      float v11 = *(v9 - 32);
      float v12 = v10 - v11;
      if ((float)(v10 - v11) < 0.0) {
        float v12 = -(float)(v10 - v11);
      }
      if (v12 <= 0.001745)
      {
        float v13 = 0.0;
        if (v10 <= a3)
        {
          if (v10 >= a3) {
            float v13 = 0.5;
          }
          else {
            float v13 = 1.0;
          }
        }
      }
      else
      {
        float v13 = fminf(fmaxf((float)(a3 - v10) / (float)(v11 - v10), 0.0), 1.0);
      }
      float v14 = *v9++;
      *(float *)double result = (float)(1.0 - v13) + (float)(v14 * v13);
      result += 4;
      --v8;
    }
    while (v8);
  }
  return result;
}

void Phase::Geometry::SphericalCapDirectivity::GetSubbandGainsFromDatabase<5ul>(Phase::Logger *a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  unsigned int v1 = **(NSObject ***)(Phase::Logger::GetInstance(a1) + 928);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
  {
    int v3 = 136315394;
    uint64_t v4 = "GeoSphericalCapDirectivity.hpp";
    __int16 v5 = 1024;
    int v6 = 216;
    _os_log_impl(&dword_221E5E000, v1, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument): \"SphericalCapDirectivity; unrecognized frequency resolution for GetG"
      "ainsFromDatabase.\"",
      (uint8_t *)&v3,
      0x12u);
  }
  exceptioint n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::invalid_argument::invalid_argument[abi:ne180100](exception, "SphericalCapDirectivity; unrecognized frequency resolution for GetGainsFromDatabase.");
}

void sub_2220403CC(_Unwind_Exception *exception_object)
{
}

void Phase::Geometry::CardioidDirectivity::CalculateSubbandGains<6ul>(uint64_t a1, uint64_t a2, float a3, float a4)
{
  __asm { FMOV            V1.4S, #1.0 }
  *(_OWORD *)a1 = _Q1;
  __asm { FMOV            V1.2S, #1.0 }
  *(void *)(a1 + 16) = _Q1;
  unsigned int v10 = *(_DWORD *)(a2 + 140);
  if (v10 >= 6) {
    uint64_t v11 = 6;
  }
  else {
    uint64_t v11 = v10;
  }
  if (v11)
  {
    float v12 = (float *)a1;
    float v13 = (float *)(a2 + 272);
    float v14 = sinf(a3);
    float v15 = v14 * cosf(a4);
    do
    {
      float v16 = *(v13 - 32);
      float v17 = *v13++;
      float v18 = v17;
      float v19 = (float)(1.0 - v16) + (float)(v15 * v16);
      if (v19 < 0.0) {
        float v19 = -v19;
      }
      *v12++ = powf(v19, v18);
      --v11;
    }
    while (v11);
  }
}

uint64_t Phase::Geometry::ConeDirectivity::CalculateSubbandGains<6ul>(uint64_t result, uint64_t a2, float a3)
{
  __asm { FMOV            V1.4S, #1.0 }
  *(_OWORD *)double result = _Q1;
  __asm { FMOV            V1.2S, #1.0 }
  *(void *)(result + 16) = _Q1;
  LODWORD(v8) = *(_DWORD *)(a2 + 140);
  if (v8 >= 6) {
    uint64_t v8 = 6;
  }
  else {
    uint64_t v8 = v8;
  }
  if (v8)
  {
    uint64_t v9 = (float *)(a2 + 400);
    do
    {
      float v10 = *(v9 - 64);
      float v11 = *(v9 - 32);
      float v12 = v10 - v11;
      if ((float)(v10 - v11) < 0.0) {
        float v12 = -(float)(v10 - v11);
      }
      if (v12 <= 0.001745)
      {
        float v13 = 0.0;
        if (v10 <= a3)
        {
          if (v10 >= a3) {
            float v13 = 0.5;
          }
          else {
            float v13 = 1.0;
          }
        }
      }
      else
      {
        float v13 = fminf(fmaxf((float)(a3 - v10) / (float)(v11 - v10), 0.0), 1.0);
      }
      float v14 = *v9++;
      *(float *)double result = (float)(1.0 - v13) + (float)(v14 * v13);
      result += 4;
      --v8;
    }
    while (v8);
  }
  return result;
}

void Phase::Geometry::SphericalCapDirectivity::GetSubbandGainsFromDatabase<6ul>(Phase::Logger *a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  unsigned int v1 = **(NSObject ***)(Phase::Logger::GetInstance(a1) + 928);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
  {
    int v3 = 136315394;
    uint64_t v4 = "GeoSphericalCapDirectivity.hpp";
    __int16 v5 = 1024;
    int v6 = 216;
    _os_log_impl(&dword_221E5E000, v1, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument): \"SphericalCapDirectivity; unrecognized frequency resolution for GetG"
      "ainsFromDatabase.\"",
      (uint8_t *)&v3,
      0x12u);
  }
  exceptioint n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::invalid_argument::invalid_argument[abi:ne180100](exception, "SphericalCapDirectivity; unrecognized frequency resolution for GetGainsFromDatabase.");
}

void sub_2220405F8(_Unwind_Exception *exception_object)
{
}

void Phase::Geometry::CardioidDirectivity::CalculateSubbandGains<10ul>(uint64_t a1, uint64_t a2, float a3, float a4)
{
  __asm { FMOV            V1.4S, #1.0 }
  *(_OWORD *)a1 = _Q1;
  *(_OWORD *)(a1 + 16) = _Q1;
  __asm { FMOV            V1.2S, #1.0 }
  *(void *)(a1 + 32) = _Q1;
  unsigned int v10 = *(_DWORD *)(a2 + 140);
  if (v10 >= 0xA) {
    uint64_t v11 = 10;
  }
  else {
    uint64_t v11 = v10;
  }
  if (v11)
  {
    float v12 = (float *)a1;
    float v13 = (float *)(a2 + 272);
    float v14 = sinf(a3);
    float v15 = v14 * cosf(a4);
    do
    {
      float v16 = *(v13 - 32);
      float v17 = *v13++;
      float v18 = v17;
      float v19 = (float)(1.0 - v16) + (float)(v15 * v16);
      if (v19 < 0.0) {
        float v19 = -v19;
      }
      *v12++ = powf(v19, v18);
      --v11;
    }
    while (v11);
  }
}

uint64_t Phase::Geometry::ConeDirectivity::CalculateSubbandGains<10ul>(uint64_t result, uint64_t a2, float a3)
{
  __asm { FMOV            V1.4S, #1.0 }
  *(_OWORD *)double result = _Q1;
  *(_OWORD *)(result + 16) = _Q1;
  __asm { FMOV            V1.2S, #1.0 }
  *(void *)(result + 32) = _Q1;
  LODWORD(v8) = *(_DWORD *)(a2 + 140);
  if (v8 >= 0xA) {
    uint64_t v8 = 10;
  }
  else {
    uint64_t v8 = v8;
  }
  if (v8)
  {
    uint64_t v9 = (float *)(a2 + 400);
    do
    {
      float v10 = *(v9 - 64);
      float v11 = *(v9 - 32);
      float v12 = v10 - v11;
      if ((float)(v10 - v11) < 0.0) {
        float v12 = -(float)(v10 - v11);
      }
      if (v12 <= 0.001745)
      {
        float v13 = 0.0;
        if (v10 <= a3)
        {
          if (v10 >= a3) {
            float v13 = 0.5;
          }
          else {
            float v13 = 1.0;
          }
        }
      }
      else
      {
        float v13 = fminf(fmaxf((float)(a3 - v10) / (float)(v11 - v10), 0.0), 1.0);
      }
      float v14 = *v9++;
      *(float *)double result = (float)(1.0 - v13) + (float)(v14 * v13);
      result += 4;
      --v8;
    }
    while (v8);
  }
  return result;
}

void Phase::Geometry::CardioidDirectivity::CalculateSubbandGains<31ul>(uint64_t a1, uint64_t a2, float a3, float a4)
{
  __asm { FMOV            V1.4S, #1.0 }
  *(_OWORD *)a1 = _Q1;
  *(_OWORD *)(a1 + 16) = _Q1;
  *(_OWORD *)(a1 + 32) = _Q1;
  *(_OWORD *)(a1 + 48) = _Q1;
  *(_OWORD *)(a1 + 64) = _Q1;
  *(_OWORD *)(a1 + 80) = _Q1;
  *(_OWORD *)(a1 + 96) = _Q1;
  __asm { FMOV            V1.2S, #1.0 }
  *(void *)(a1 + 112) = _Q1;
  *(_DWORD *)(a1 + 120) = 1065353216;
  unsigned int v10 = *(_DWORD *)(a2 + 140);
  if (v10 >= 0x1F) {
    uint64_t v11 = 31;
  }
  else {
    uint64_t v11 = v10;
  }
  if (v11)
  {
    float v12 = (float *)a1;
    float v13 = (float *)(a2 + 272);
    float v14 = sinf(a3);
    float v15 = v14 * cosf(a4);
    do
    {
      float v16 = *(v13 - 32);
      float v17 = *v13++;
      float v18 = v17;
      float v19 = (float)(1.0 - v16) + (float)(v15 * v16);
      if (v19 < 0.0) {
        float v19 = -v19;
      }
      *v12++ = powf(v19, v18);
      --v11;
    }
    while (v11);
  }
}

uint64_t Phase::Geometry::ConeDirectivity::CalculateSubbandGains<31ul>(uint64_t result, uint64_t a2, float a3)
{
  __asm { FMOV            V1.4S, #1.0 }
  *(_OWORD *)double result = _Q1;
  *(_OWORD *)(result + 16) = _Q1;
  *(_OWORD *)(result + 32) = _Q1;
  *(_OWORD *)(result + 48) = _Q1;
  *(_OWORD *)(result + 64) = _Q1;
  *(_OWORD *)(result + 80) = _Q1;
  *(_OWORD *)(result + 96) = _Q1;
  __asm { FMOV            V1.2S, #1.0 }
  *(void *)(result + 112) = _Q1;
  *(_DWORD *)(result + 120) = 1065353216;
  LODWORD(v8) = *(_DWORD *)(a2 + 140);
  if (v8 >= 0x1F) {
    uint64_t v8 = 31;
  }
  else {
    uint64_t v8 = v8;
  }
  if (v8)
  {
    uint64_t v9 = (float *)(a2 + 400);
    do
    {
      float v10 = *(v9 - 64);
      float v11 = *(v9 - 32);
      float v12 = v10 - v11;
      if ((float)(v10 - v11) < 0.0) {
        float v12 = -(float)(v10 - v11);
      }
      if (v12 <= 0.001745)
      {
        float v13 = 0.0;
        if (v10 <= a3)
        {
          if (v10 >= a3) {
            float v13 = 0.5;
          }
          else {
            float v13 = 1.0;
          }
        }
      }
      else
      {
        float v13 = fminf(fmaxf((float)(a3 - v10) / (float)(v11 - v10), 0.0), 1.0);
      }
      float v14 = *v9++;
      *(float *)double result = (float)(1.0 - v13) + (float)(v14 * v13);
      result += 4;
      --v8;
    }
    while (v8);
  }
  return result;
}

void Phase::details::ReturnForEachSubband<float,31ul,Phase::PackedSubbands<float,31ul> Phase::operator+<float,31ul>(Phase::PackedSubbands<float,31ul> const&,Phase::PackedSubbands<float,31ul> const&)::{lambda(float)#1} const&,0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul>(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  unint64_t v4 = 0;
  unint64_t v5 = 0;
  uint64_t v13 = *MEMORY[0x263EF8340];
  float32x4_t v6 = vaddq_f32(*(float32x4_t *)(a2 + 16), *(float32x4_t *)(a3 + 16));
  v10[0] = vaddq_f32(*(float32x4_t *)a2, *(float32x4_t *)a3);
  v10[1] = v6;
  float32x4_t v7 = vaddq_f32(*(float32x4_t *)(a2 + 48), *(float32x4_t *)(a3 + 48));
  v10[2] = vaddq_f32(*(float32x4_t *)(a2 + 32), *(float32x4_t *)(a3 + 32));
  v10[3] = v7;
  float32x4_t v8 = vaddq_f32(*(float32x4_t *)(a2 + 80), *(float32x4_t *)(a3 + 80));
  v10[4] = vaddq_f32(*(float32x4_t *)(a2 + 64), *(float32x4_t *)(a3 + 64));
  v10[5] = v8;
  v10[6] = vaddq_f32(*(float32x4_t *)(a2 + 96), *(float32x4_t *)(a3 + 96));
  v8.i32[0] = *(_DWORD *)(a2 + 120);
  float32x2_t v11 = vadd_f32(*(float32x2_t *)(a2 + 112), *(float32x2_t *)(a3 + 112));
  float v12 = v8.f32[0] + *(float *)(a3 + 120);
  *(_OWORD *)((char *)a1 + 108) = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  do
  {
    if (v5 <= 0x1E)
    {
      unint64_t v4 = v5 + 1;
      *((_DWORD *)a1 + v5++) = *(_DWORD *)((char *)v10 + v3);
    }
    v3 += 4;
  }
  while (v3 != 124);
  if (v4 <= 0x1E)
  {
    uint64_t v9 = (char *)a1 + 4 * v4;
    bzero(v9, 124 - 4 * v4);
  }
}

void Phase::details::ReturnForEachSubband<float,31ul,Phase::PackedSubbands<float,31ul> Phase::operator*<float,31ul>(Phase::PackedSubbands<float,31ul> const&,float const&)::{lambda(float)#1} const&,0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul>(_OWORD *a1, uint64_t a2, double a3)
{
  uint64_t v3 = 0;
  unint64_t v4 = 0;
  unint64_t v5 = 0;
  uint64_t v13 = *MEMORY[0x263EF8340];
  float32x4_t v6 = vmulq_n_f32(*(float32x4_t *)(a2 + 16), *(float *)&a3);
  v10[0] = vmulq_n_f32(*(float32x4_t *)a2, *(float *)&a3);
  v10[1] = v6;
  float32x4_t v7 = vmulq_n_f32(*(float32x4_t *)(a2 + 48), *(float *)&a3);
  v10[2] = vmulq_n_f32(*(float32x4_t *)(a2 + 32), *(float *)&a3);
  v10[3] = v7;
  float32x4_t v8 = vmulq_n_f32(*(float32x4_t *)(a2 + 80), *(float *)&a3);
  v10[4] = vmulq_n_f32(*(float32x4_t *)(a2 + 64), *(float *)&a3);
  v10[5] = v8;
  v10[6] = vmulq_n_f32(*(float32x4_t *)(a2 + 96), *(float *)&a3);
  float32x2_t v11 = vmul_f32(*(float32x2_t *)(a2 + 112), (float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)&a3, 0));
  float v12 = *(float *)(a2 + 120) * *(float *)&a3;
  *a1 = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  *(_OWORD *)((char *)a1 + 108) = 0u;
  do
  {
    if (v5 <= 0x1E)
    {
      unint64_t v4 = v5 + 1;
      *((_DWORD *)a1 + v5++) = *(_DWORD *)((char *)v10 + v3);
    }
    v3 += 4;
  }
  while (v3 != 124);
  if (v4 <= 0x1E)
  {
    uint64_t v9 = (char *)a1 + 4 * v4;
    bzero(v9, 124 - 4 * v4);
  }
}

void Phase::details::ReturnForEachSubband<float,31ul,Phase::PackedSubbands<float,31ul> Phase::operator*<float,31ul>(Phase::PackedSubbands<float,31ul> const&,Phase::PackedSubbands<float,31ul> const&)::{lambda(float)#1} const&,0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul,11ul,12ul,13ul,14ul,15ul,16ul,17ul,18ul,19ul,20ul,21ul,22ul,23ul,24ul,25ul,26ul,27ul,28ul,29ul,30ul>(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  unint64_t v4 = 0;
  unint64_t v5 = 0;
  uint64_t v13 = *MEMORY[0x263EF8340];
  float32x4_t v6 = vmulq_f32(*(float32x4_t *)(a2 + 16), *(float32x4_t *)(a3 + 16));
  v10[0] = vmulq_f32(*(float32x4_t *)a2, *(float32x4_t *)a3);
  v10[1] = v6;
  float32x4_t v7 = vmulq_f32(*(float32x4_t *)(a2 + 48), *(float32x4_t *)(a3 + 48));
  v10[2] = vmulq_f32(*(float32x4_t *)(a2 + 32), *(float32x4_t *)(a3 + 32));
  v10[3] = v7;
  float32x4_t v8 = vmulq_f32(*(float32x4_t *)(a2 + 80), *(float32x4_t *)(a3 + 80));
  v10[4] = vmulq_f32(*(float32x4_t *)(a2 + 64), *(float32x4_t *)(a3 + 64));
  v10[5] = v8;
  v10[6] = vmulq_f32(*(float32x4_t *)(a2 + 96), *(float32x4_t *)(a3 + 96));
  v8.i32[0] = *(_DWORD *)(a2 + 120);
  float32x2_t v11 = vmul_f32(*(float32x2_t *)(a2 + 112), *(float32x2_t *)(a3 + 112));
  float v12 = v8.f32[0] * *(float *)(a3 + 120);
  *(_OWORD *)((char *)a1 + 108) = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  do
  {
    if (v5 <= 0x1E)
    {
      unint64_t v4 = v5 + 1;
      *((_DWORD *)a1 + v5++) = *(_DWORD *)((char *)v10 + v3);
    }
    v3 += 4;
  }
  while (v3 != 124);
  if (v4 <= 0x1E)
  {
    uint64_t v9 = (char *)a1 + 4 * v4;
    bzero(v9, 124 - 4 * v4);
  }
}

int32x4_t Phase::DspLayer::ReblockerIn::AddFrame(int32x4_t *a1, int a2, int32x4_t result)
{
  HIDWORD(v3) = a2 - 1;
  LODWORD(v3) = a2 - 1;
  int32x4_t v4 = *a1;
  switch((v3 >> 1))
  {
    case 0u:
      uint64_t v5 = a1[1].i64[0];
      signed int v6 = a1[1].i32[2];
      goto LABEL_8;
    case 1u:
      uint64_t v5 = a1[1].i64[0];
      signed int v6 = a1[1].i32[2];
      goto LABEL_7;
    case 3u:
      uint64_t v5 = a1[1].i64[0];
      signed int v6 = a1[1].i32[2];
      goto LABEL_6;
    case 7u:
      uint64_t v5 = a1[1].i64[0];
      signed int v6 = a1[1].i32[2];
      *(_DWORD *)(v5 + 12 * v6 + 4 * v4.i32[3]) = result.i32[3];
LABEL_6:
      *(_DWORD *)(v5 + 8 * v6 + 4 * v4.i32[2]) = result.i32[2];
LABEL_7:
      *(_DWORD *)(v5 + 4 * v6 + 4 * v4.i32[1]) = result.i32[1];
LABEL_8:
      *(_DWORD *)(v5 + 4 * v4.i32[0]) = result.i32[0];
      v7.i64[0] = 0x100000001;
      v7.i64[1] = 0x100000001;
      int32x4_t v8 = vaddq_s32(v4, v7);
      double result = (int32x4_t)vbicq_s8((int8x16_t)v8, (int8x16_t)vceqq_s32(v8, vdupq_n_s32(v6)));
      *a1 = result;
      break;
    default:
      return result;
  }
  return result;
}

float Phase::DspLayer::ReblockerOut::GetNextFrame(int32x4_t *this, int a2)
{
  HIDWORD(v2) = a2 - 1;
  LODWORD(v2) = a2 - 1;
  float result = 0.0;
  int32x4_t v4 = *this;
  switch((v2 >> 1))
  {
    case 0u:
      uint64_t v5 = this[1].i64[0];
      unsigned int v6 = this[1].u32[2];
      goto LABEL_6;
    case 1u:
      uint64_t v5 = this[1].i64[0];
      unsigned int v6 = this[1].u32[2];
      goto LABEL_6;
    case 3u:
      uint64_t v5 = this[1].i64[0];
      unsigned int v6 = this[1].u32[2];
      goto LABEL_6;
    case 7u:
      uint64_t v5 = this[1].i64[0];
      unsigned int v6 = this[1].u32[2];
LABEL_6:
      float result = *(float *)(v5 + 4 * v4.i32[0]);
      v7.i64[0] = 0x100000001;
      v7.i64[1] = 0x100000001;
      int32x4_t v8 = vaddq_s32(v4, v7);
      *(int8x16_t *)this = vbicq_s8((int8x16_t)v8, (int8x16_t)vceqq_s32(v8, vdupq_n_s32(v6)));
      break;
    default:
      return result;
  }
  return result;
}

std::chrono::steady_clock::time_point Phase::SpatialModeler::RendererStates::UpdateRendererAssignments(void *a1, unint64_t a2, unint64_t a3, unint64_t **a4)
{
  result.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  float v10 = a1 + 1;
  uint64_t v9 = (void *)*a1;
  if ((void *)*a1 != a1 + 1)
  {
    do
    {
      if (!*((unsigned char *)v9 + 72))
      {
        *((unsigned char *)v9 + 72) = 1;
        v9[8] = result.__d_.__rep_;
      }
      float32x2_t v11 = (void *)v9[1];
      if (v11)
      {
        do
        {
          float v12 = v11;
          float32x2_t v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          float v12 = (void *)v9[2];
          BOOL v13 = *v12 == (void)v9;
          uint64_t v9 = v12;
        }
        while (!v13);
      }
      uint64_t v9 = v12;
    }
    while (v12 != v10);
  }
  float v14 = *a4;
  float v15 = a4[1];
  while (v14 != v15)
  {
    unint64_t v16 = *v14++;
    result.__d_.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep)Phase::SpatialModeler::RendererStates::AssignRenderer((Phase::SpatialModeler::RendererStates *)a1, v16);
  }
  while (1)
  {
    float v18 = (void *)*a1;
    if ((void *)*a1 == v10)
    {
      unint64_t v19 = 0;
    }
    else
    {
      unint64_t v19 = 0;
      do
      {
        if (!*((unsigned char *)v18 + 72)) {
          ++v19;
        }
        float v20 = (void *)v18[1];
        if (v20)
        {
          do
          {
            float v21 = v20;
            float v20 = (void *)*v20;
          }
          while (v20);
        }
        else
        {
          do
          {
            float v21 = (void *)v18[2];
            BOOL v13 = *v21 == (void)v18;
            float v18 = v21;
          }
          while (!v13);
        }
        float v18 = v21;
      }
      while (v21 != v10);
    }
    if (v19 >= a2) {
      break;
    }
    unint64_t FirstInactiveRendererId = Phase::SpatialModeler::RendererStates::GetFirstInactiveRendererId((Phase::SpatialModeler::RendererStates *)a1);
    if (!FirstInactiveRendererId) {
      unint64_t FirstInactiveRendererId = *(void *)(a1[3] + 32);
    }
    result.__d_.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep)Phase::SpatialModeler::RendererStates::AssignRenderer((Phase::SpatialModeler::RendererStates *)a1, FirstInactiveRendererId);
  }
  while (a1[2] > a3)
  {
    int64x2_t v22 = (void *)*a1;
    if ((void *)*a1 == v10) {
      goto LABEL_63;
    }
    long long v23 = *a4;
    long long v24 = a4[1];
    uint64_t v25 = (void *)*a1;
    do
    {
      if (v23 == v24)
      {
        long long v26 = *a4;
      }
      else
      {
        long long v26 = *a4;
        while (*v26 != v25[6])
        {
          if (++v26 == v24)
          {
            long long v26 = a4[1];
            break;
          }
        }
      }
      if (v26 == v24 && *((unsigned char *)v25 + 72))
      {
        if (v25 == v10) {
          goto LABEL_48;
        }
        goto LABEL_68;
      }
      unint64_t v27 = (void *)v25[1];
      if (v27)
      {
        do
        {
          long long v28 = v27;
          unint64_t v27 = (void *)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          long long v28 = (void *)v25[2];
          BOOL v13 = *v28 == (void)v25;
          uint64_t v25 = v28;
        }
        while (!v13);
      }
      uint64_t v25 = v28;
    }
    while (v28 != v10);
    while (1)
    {
LABEL_48:
      if (v23 == v24)
      {
        long long v29 = *a4;
      }
      else
      {
        long long v29 = *a4;
        while (*v29 != v22[6])
        {
          if (++v29 == v24)
          {
            long long v29 = a4[1];
            break;
          }
        }
      }
      if (v29 == v24) {
        break;
      }
      long long v30 = (void *)v22[1];
      if (v30)
      {
        do
        {
          long long v31 = v30;
          long long v30 = (void *)*v30;
        }
        while (v30);
      }
      else
      {
        do
        {
          long long v31 = (void *)v22[2];
          BOOL v13 = *v31 == (void)v22;
          int64x2_t v22 = v31;
        }
        while (!v13);
      }
      int64x2_t v22 = v31;
      if (v31 == v10) {
        goto LABEL_63;
      }
    }
    uint64_t v25 = v22;
    if (v22 == v10)
    {
LABEL_63:
      unint64_t v32 = Phase::SpatialModeler::RendererStates::GetFirstInactiveRendererId((Phase::SpatialModeler::RendererStates *)a1);
      if (v32) {
        goto LABEL_69;
      }
      long long v33 = (void *)*v10;
      long long v34 = a1 + 1;
      if (*v10)
      {
        do
        {
          uint64_t v25 = v33;
          long long v33 = (void *)v33[1];
        }
        while (v33);
      }
      else
      {
        do
        {
          uint64_t v25 = (void *)v34[2];
          BOOL v13 = *v25 == (void)v34;
          long long v34 = v25;
        }
        while (v13);
      }
    }
LABEL_68:
    unint64_t v32 = v25[6];
LABEL_69:
    result.__d_.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep)Phase::SpatialModeler::RendererStates::UnassignRenderer((Phase::SpatialModeler::RendererStates *)a1, v32);
  }
  return result;
}

uint64_t **Phase::SpatialModeler::RendererStates::AssignRenderer(Phase::SpatialModeler::RendererStates *this, unint64_t a2)
{
  unint64_t v14 = a2;
  int32x4_t v4 = (void *)*((void *)this + 4);
  if (v4)
  {
    uint64_t v5 = (void *)((char *)this + 32);
    do
    {
      unint64_t v6 = v4[4];
      BOOL v7 = v6 >= a2;
      if (v6 >= a2) {
        int32x4_t v8 = v4;
      }
      else {
        int32x4_t v8 = v4 + 1;
      }
      if (v7) {
        uint64_t v5 = v4;
      }
      int32x4_t v4 = (void *)*v8;
    }
    while (*v8);
    if (v5 != (void *)((char *)this + 32) && v5[4] <= a2)
    {
      uint64_t v9 = std::__tree<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t **)this + 3, a2, &v14);
      float v10 = std::__tree<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t **)this, a2, &v14);
      float32x2_t v11 = v9[9];
      long long v12 = *(_OWORD *)(v9 + 7);
      *(_OWORD *)(v10 + 5) = *(_OWORD *)(v9 + 5);
      *(_OWORD *)(v10 + 7) = v12;
      v10[9] = v11;
      std::__tree<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>>>::__erase_unique<unsigned long long>((uint64_t **)this + 3, a2);
    }
  }
  *((unsigned char *)std::__tree<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t **)this, a2, &v14)+ 40) = 1;
  std::chrono::steady_clock::time_point result = std::__tree<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t **)this, a2, &v14);
  if (*((unsigned char *)result + 72)) {
    *((unsigned char *)result + 72) = 0;
  }
  return result;
}

uint64_t Phase::SpatialModeler::RendererStates::GetFirstInactiveRendererId(Phase::SpatialModeler::RendererStates *this)
{
  unint64_t v3 = *(char **)this;
  unsigned int v1 = (char *)this + 8;
  unint64_t v2 = v3;
  if (v3 == v1) {
    return 0;
  }
  while (!v2[72])
  {
    int32x4_t v4 = (char *)*((void *)v2 + 1);
    if (v4)
    {
      do
      {
        uint64_t v5 = v4;
        int32x4_t v4 = *(char **)v4;
      }
      while (v4);
    }
    else
    {
      do
      {
        uint64_t v5 = (char *)*((void *)v2 + 2);
        BOOL v6 = *(void *)v5 == (void)v2;
        unint64_t v2 = v5;
      }
      while (!v6);
    }
    unint64_t v2 = v5;
    if (v5 == v1) {
      return 0;
    }
  }
  return *((void *)v2 + 4);
}

uint64_t **Phase::SpatialModeler::RendererStates::UnassignRenderer(Phase::SpatialModeler::RendererStates *this, unint64_t a2)
{
  unint64_t v16 = a2;
  int32x4_t v4 = (void *)*((void *)this + 1);
  if (v4)
  {
    uint64_t v5 = (void *)((char *)this + 8);
    do
    {
      unint64_t v6 = v4[4];
      BOOL v7 = v6 >= a2;
      if (v6 >= a2) {
        int32x4_t v8 = v4;
      }
      else {
        int32x4_t v8 = v4 + 1;
      }
      if (v7) {
        uint64_t v5 = v4;
      }
      int32x4_t v4 = (void *)*v8;
    }
    while (*v8);
    if (v5 != (void *)((char *)this + 8) && v5[4] <= a2)
    {
      uint64_t v9 = std::__tree<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t **)this, a2, &v16);
      float v10 = std::__tree<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t **)this + 3, a2, &v16);
      float32x2_t v11 = v9[9];
      long long v12 = *(_OWORD *)(v9 + 7);
      *(_OWORD *)(v10 + 5) = *(_OWORD *)(v9 + 5);
      *(_OWORD *)(v10 + 7) = v12;
      v10[9] = v11;
      std::__tree<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>>>::__erase_unique<unsigned long long>((uint64_t **)this, a2);
    }
  }
  BOOL v13 = (uint64_t **)((char *)this + 24);
  *((unsigned char *)std::__tree<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t **)this + 3, a2, &v16)+ 40) = 0;
  v14.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  std::chrono::steady_clock::time_point result = std::__tree<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v13, a2, &v16);
  if (!*((unsigned char *)result + 72)) {
    *((unsigned char *)result + 72) = 1;
  }
  result[8] = (uint64_t *)v14.__d_.__rep_;
  return result;
}

void Phase::SpatialModeler::RendererStates::Update(uint64_t a1, unint64_t a2, uint64_t *a3, unint64_t **a4, char a5)
{
  *(unsigned char *)(a1 + 48) = a5;
  Phase::SpatialModeler::RendererStates::FillRenderers((uint64_t **)a1, a3, a4);
  Phase::SpatialModeler::RendererStates::UpdateRendererAssignments((void *)a1, a2, (unint64_t)a3, a4);

  Phase::SpatialModeler::RendererStates::UpdateKeepAliveFlags((uint64_t **)a1);
}

uint64_t **Phase::SpatialModeler::RendererStates::FillRenderers(uint64_t **result, uint64_t *a2, unint64_t **a3)
{
  int32x4_t v4 = result;
  uint64_t v5 = *a3;
  unint64_t v6 = a3[1];
  if (*a3 != v6)
  {
    BOOL v7 = result + 7;
    do
    {
      unint64_t v8 = *v5;
      unint64_t v12 = v8;
      if (*((unsigned char *)v7 + v8) == 1)
      {
        if (v8 <= 0x1F) {
          *((unsigned char *)v7 + v8) = 0;
        }
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = std::chrono::steady_clock::now().__d_.__rep_;
        std::chrono::steady_clock::time_point result = std::__tree<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v4 + 3, v8, &v12);
        *((unsigned char *)result + 40) = 0;
        result[6] = (uint64_t *)v8;
        result[7] = 0;
        result[8] = (uint64_t *)rep;
        *((unsigned char *)result + 72) = 1;
      }
      ++v5;
    }
    while (v5 != v6);
  }
  for (; (char *)v4[2] + (unint64_t)v4[5] < (char *)a2; *((unsigned char *)result + 72) = 1)
  {
    unint64_t NextAvailable = Phase::SpatialModeler::IndexStore<32ul,1ull,0ull>::GetNextAvailable((uint64_t)(v4 + 7));
    unint64_t v12 = NextAvailable;
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v11 = std::chrono::steady_clock::now().__d_.__rep_;
    std::chrono::steady_clock::time_point result = std::__tree<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v4 + 3, NextAvailable, &v12);
    *((unsigned char *)result + 40) = 0;
    result[6] = (uint64_t *)NextAvailable;
    result[7] = 0;
    result[8] = (uint64_t *)v11;
  }
  return result;
}

void Phase::SpatialModeler::RendererStates::UpdateKeepAliveFlags(uint64_t **this)
{
  long long __p = 0;
  float v21 = 0;
  int64x2_t v22 = 0;
  v2.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  unint64_t v3 = *this;
  if (*this != (uint64_t *)(this + 1))
  {
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = v2.__d_.__rep_;
    do
    {
      uint64_t v5 = (unint64_t *)(v3 + 4);
      if (*((unsigned char *)v3 + 72))
      {
        if ((float)((float)(rep - v3[8]) / 1000000000.0) > *((float *)this + 13) || !*((unsigned char *)this + 48))
        {
          *((unsigned char *)std::__tree<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(this, *v5, v3 + 4)+ 40) = 0;
          unint64_t v6 = v21;
          if (v21 >= v22)
          {
            unint64_t v8 = __p;
            uint64_t v9 = v21 - __p;
            unint64_t v10 = v9 + 1;
            if ((unint64_t)(v9 + 1) >> 61) {
              std::vector<Phase::SpatialModeler::OptionalPropertyDescription>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v11 = (char *)v22 - (char *)__p;
            if (((char *)v22 - (char *)__p) >> 2 > v10) {
              unint64_t v10 = v11 >> 2;
            }
            if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v12 = v10;
            }
            if (v12)
            {
              BOOL v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)&v22, v12);
              unint64_t v8 = __p;
              unint64_t v6 = v21;
            }
            else
            {
              BOOL v13 = 0;
            }
            std::chrono::steady_clock::time_point v14 = (unint64_t *)&v13[8 * v9];
            *std::chrono::steady_clock::time_point v14 = *v5;
            BOOL v7 = v14 + 1;
            while (v6 != v8)
            {
              unint64_t v15 = *--v6;
              *--std::chrono::steady_clock::time_point v14 = v15;
            }
            long long __p = v14;
            int64x2_t v22 = (unint64_t *)&v13[8 * v12];
            if (v8) {
              operator delete(v8);
            }
          }
          else
          {
            *float v21 = *v5;
            BOOL v7 = v21 + 1;
          }
          float v21 = v7;
        }
      }
      else
      {
        *((unsigned char *)std::__tree<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(this, *v5, v3 + 4)+ 40) = 1;
      }
      unint64_t v16 = (Phase::SpatialModeler::RendererStates *)v3[1];
      if (v16)
      {
        do
        {
          float v17 = v16;
          unint64_t v16 = *(Phase::SpatialModeler::RendererStates **)v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          float v17 = (Phase::SpatialModeler::RendererStates *)v3[2];
          BOOL v18 = *(void *)v17 == (void)v3;
          unint64_t v3 = (uint64_t *)v17;
        }
        while (!v18);
      }
      unint64_t v3 = (uint64_t *)v17;
    }
    while (v17 != (Phase::SpatialModeler::RendererStates *)(this + 1));
    unint64_t v19 = __p;
    if (__p != v21)
    {
      do
        Phase::SpatialModeler::RendererStates::UnassignRenderer((Phase::SpatialModeler::RendererStates *)this, *v19++);
      while (v19 != v21);
      unint64_t v19 = __p;
    }
    if (v19) {
      operator delete(v19);
    }
  }
}

void sub_222041700(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::SpatialModeler::RendererStates::GetNRenderers(uint64_t a1, unint64_t a2, void **a3, unint64_t **a4)
{
  Phase::SpatialModeler::RendererStates::FillRenderers((uint64_t **)a1, (uint64_t *)a2, a4);
  uint64_t v9 = (char *)*a3;
  unint64_t v8 = (char *)a3[1];
  unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - (unsigned char *)*a3) >> 3);
  unint64_t v11 = a2 - v10;
  if (a2 <= v10)
  {
    if (a2 < v10) {
      a3[1] = &v9[40 * a2];
    }
  }
  else
  {
    unint64_t v12 = a3[2];
    if (0xCCCCCCCCCCCCCCCDLL * ((v12 - v8) >> 3) >= v11)
    {
      long long v26 = &v8[40 * v11];
      do
      {
        *(_OWORD *)unint64_t v8 = 0uLL;
        *((_OWORD *)v8 + 1) = 0uLL;
        *((void *)v8 + 4) = 0;
        char *v8 = 1;
        *((void *)v8 + 1) = 0;
        *((void *)v8 + 2) = 0;
        v8[24] = 0;
        v8 += 40;
      }
      while (v8 != v26);
      a3[1] = v26;
    }
    else
    {
      if (a2 > 0x666666666666666) {
        std::vector<Phase::SpatialModeler::RendererInfo>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * ((v12 - v9) >> 3);
      uint64_t v14 = 2 * v13;
      if (2 * v13 <= a2) {
        uint64_t v14 = a2;
      }
      if (v13 >= 0x333333333333333) {
        unint64_t v15 = 0x666666666666666;
      }
      else {
        unint64_t v15 = v14;
      }
      unint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::SpatialModeler::RoomSimulationDebugger::DebugImageSource>>((uint64_t)(a3 + 2), v15);
      BOOL v18 = &v16[40 * v10];
      unint64_t v19 = &v16[40 * a2];
      float v20 = v18;
      do
      {
        *(_OWORD *)float v20 = 0uLL;
        *((_OWORD *)v20 + 1) = 0uLL;
        *((void *)v20 + 4) = 0;
        char *v20 = 1;
        *((void *)v20 + 1) = 0;
        *((void *)v20 + 2) = 0;
        v20[24] = 0;
        v20 += 40;
      }
      while (v20 != v19);
      float v21 = &v16[40 * v17];
      long long v23 = (char *)*a3;
      int64x2_t v22 = (char *)a3[1];
      if (v22 != *a3)
      {
        do
        {
          long long v24 = *(_OWORD *)(v22 - 40);
          long long v25 = *(_OWORD *)(v22 - 24);
          *((void *)v18 - 1) = *((void *)v22 - 1);
          *(_OWORD *)(v18 - 24) = v25;
          *(_OWORD *)(v18 - 40) = v24;
          v18 -= 40;
          v22 -= 40;
        }
        while (v22 != v23);
        int64x2_t v22 = (char *)*a3;
      }
      *a3 = v18;
      a3[1] = v19;
      a3[2] = v21;
      if (v22) {
        operator delete(v22);
      }
    }
  }
  long long v63 = 0u;
  long long v64 = 0u;
  int v65 = 1065353216;
  unint64_t v27 = *(uint64_t **)a1;
  if (*(void *)a1 == a1 + 8)
  {
    unint64_t v28 = 0;
  }
  else
  {
    unint64_t v28 = 0;
    do
    {
      if (v28 >= *(void *)(a1 + 16)) {
        break;
      }
      std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::RendererInfo *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::RendererInfo *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::RendererInfo *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::RendererInfo *>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((float *)&v63, v27[4], v27 + 4)[3] = v27 + 5;
      long long v29 = (uint64_t *)v27[1];
      if (v29)
      {
        do
        {
          long long v30 = v29;
          long long v29 = (uint64_t *)*v29;
        }
        while (v29);
      }
      else
      {
        do
        {
          long long v30 = (uint64_t *)v27[2];
          BOOL v31 = *v30 == (void)v27;
          unint64_t v27 = v30;
        }
        while (!v31);
      }
      ++v28;
      unint64_t v27 = v30;
    }
    while (v30 != (uint64_t *)(a1 + 8));
  }
  unint64_t v32 = *(void **)(a1 + 24);
  if (v32 != (void *)(a1 + 32))
  {
    do
    {
      if (v28 >= a2 || v28 >= *(void *)(a1 + 40) + *(void *)(a1 + 16)) {
        break;
      }
      std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::RendererInfo *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::RendererInfo *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::RendererInfo *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::RendererInfo *>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((float *)&v63, v32[4], v32 + 4)[3] = v32 + 5;
      long long v33 = (void *)v32[1];
      if (v33)
      {
        do
        {
          long long v34 = v33;
          long long v33 = (void *)*v33;
        }
        while (v33);
      }
      else
      {
        do
        {
          long long v34 = (void *)v32[2];
          BOOL v31 = *v34 == (void)v32;
          unint64_t v32 = v34;
        }
        while (!v31);
      }
      ++v28;
      unint64_t v32 = v34;
    }
    while (v34 != (void *)(a1 + 32));
  }
  long long v35 = *a4;
  long long v36 = a4[1];
  if (*a4 == v36)
  {
    unint64_t v37 = 0;
    goto LABEL_94;
  }
  unint64_t v37 = 0;
  do
  {
    unint64_t v38 = *v35;
    unint64_t v62 = *v35;
    if (v37 >= a2) {
      goto LABEL_91;
    }
    __int16 v39 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::RendererInfo *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::RendererInfo *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::RendererInfo *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::RendererInfo *>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((float *)&v63, v38, &v62)[3];
    uint64_t v40 = (uint64_t)*a3 + 40 * v37;
    long long v41 = *v39;
    long long v42 = v39[1];
    *(void *)(v40 + 32) = *((void *)v39 + 4);
    *(_OWORD *)uint64_t v40 = v41;
    *(_OWORD *)(v40 + 16) = v42;
    unint64_t v43 = *((void *)&v63 + 1);
    if (!*((void *)&v63 + 1)) {
      goto LABEL_90;
    }
    uint8x8_t v44 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v63 + 8));
    v44.i16[0] = vaddlv_u8(v44);
    if (v44.u32[0] > 1uLL)
    {
      unint64_t v45 = v38;
      if (*((void *)&v63 + 1) <= v38) {
        unint64_t v45 = v38 % *((void *)&v63 + 1);
      }
    }
    else
    {
      unint64_t v45 = (*((void *)&v63 + 1) - 1) & v38;
    }
    unint64_t v46 = *(long long ***)(v63 + 8 * v45);
    if (!v46) {
      goto LABEL_90;
    }
    float v47 = *v46;
    if (!*v46) {
      goto LABEL_90;
    }
    uint64_t v48 = *((void *)&v63 + 1) - 1;
    while (1)
    {
      unint64_t v49 = *((void *)v47 + 1);
      if (v49 == v38) {
        break;
      }
      if (v44.u32[0] > 1uLL)
      {
        if (v49 >= *((void *)&v63 + 1)) {
          v49 %= *((void *)&v63 + 1);
        }
      }
      else
      {
        v49 &= v48;
      }
      if (v49 != v45) {
        goto LABEL_90;
      }
LABEL_60:
      float v47 = *(long long **)v47;
      if (!v47) {
        goto LABEL_90;
      }
    }
    if (*((void *)v47 + 2) != v38) {
      goto LABEL_60;
    }
    if (v44.u32[0] > 1uLL)
    {
      if (v38 >= *((void *)&v63 + 1)) {
        v38 %= *((void *)&v63 + 1);
      }
    }
    else
    {
      v38 &= v48;
    }
    float v50 = *(long long **)v47;
    BOOL v51 = *(long long **)(v63 + 8 * v38);
    do
    {
      unint64_t v52 = v51;
      BOOL v51 = *(long long **)v51;
    }
    while (v51 != v47);
    if (v52 == &v64) {
      goto LABEL_79;
    }
    unint64_t v53 = *((void *)v52 + 1);
    if (v44.u32[0] > 1uLL)
    {
      if (v53 >= *((void *)&v63 + 1)) {
        v53 %= *((void *)&v63 + 1);
      }
    }
    else
    {
      v53 &= v48;
    }
    if (v53 == v38)
    {
LABEL_81:
      if (v50)
      {
        unint64_t v54 = *((void *)v50 + 1);
        goto LABEL_83;
      }
    }
    else
    {
LABEL_79:
      if (!v50) {
        goto LABEL_80;
      }
      unint64_t v54 = *((void *)v50 + 1);
      if (v44.u32[0] > 1uLL)
      {
        unint64_t v55 = *((void *)v50 + 1);
        if (v54 >= *((void *)&v63 + 1)) {
          unint64_t v55 = v54 % *((void *)&v63 + 1);
        }
      }
      else
      {
        unint64_t v55 = v54 & v48;
      }
      if (v55 != v38)
      {
LABEL_80:
        *(void *)(v63 + 8 * v38) = 0;
        float v50 = *(long long **)v47;
        goto LABEL_81;
      }
LABEL_83:
      if (v44.u32[0] > 1uLL)
      {
        if (v54 >= v43) {
          v54 %= v43;
        }
      }
      else
      {
        v54 &= v48;
      }
      if (v54 != v38)
      {
        *(void *)(v63 + 8 * v54) = v52;
        float v50 = *(long long **)v47;
      }
    }
    *(void *)unint64_t v52 = v50;
    *(void *)float v47 = 0;
    --*((void *)&v64 + 1);
    operator delete(v47);
LABEL_90:
    ++v37;
LABEL_91:
    ++v35;
  }
  while (v35 != v36);
LABEL_94:
  for (int i = (void *)v64; i; int i = (void *)*i)
  {
    if (v37 < a2)
    {
      uint64_t v57 = (long long *)i[3];
      uint64_t v58 = (uint64_t)*a3 + 40 * v37;
      long long v59 = *v57;
      long long v60 = v57[1];
      *(void *)(v58 + 32) = *((void *)v57 + 4);
      *(_OWORD *)uint64_t v58 = v59;
      *(_OWORD *)(v58 + 16) = v60;
      ++v37;
    }
  }
  return std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)&v63);
}

void sub_222041C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<Phase::SpatialModeler::RendererInfo>::__throw_length_error[abi:ne180100]()
{
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::RendererInfo *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::RendererInfo *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::RendererInfo *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::RendererInfo *>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(float *a1, unint64_t a2, void *a3)
{
  unint64_t v5 = a2;
  unint64_t v7 = *((void *)a1 + 1);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (int i = *v9; i; int i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  int i = operator new(0x20uLL);
  *int i = 0;
  i[1] = v5;
  i[2] = *a3;
  i[3] = 0;
  float v12 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v13 = a1[8];
  if (v7 && (float)(v13 * (float)v7) >= v12)
  {
    unint64_t v5 = v3;
    goto LABEL_64;
  }
  BOOL v14 = 1;
  if (v7 >= 3) {
    BOOL v14 = (v7 & (v7 - 1)) != 0;
  }
  unint64_t v15 = v14 | (2 * v7);
  unint64_t v16 = vcvtps_u32_f32(v12 / v13);
  if (v15 <= v16) {
    int8x8_t prime = (int8x8_t)v16;
  }
  else {
    int8x8_t prime = (int8x8_t)v15;
  }
  if (*(void *)&prime == 1)
  {
    int8x8_t prime = (int8x8_t)2;
  }
  else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
  {
    int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    unint64_t v7 = *((void *)a1 + 1);
  }
  if (*(void *)&prime <= v7)
  {
    if (*(void *)&prime >= v7) {
      goto LABEL_60;
    }
    unint64_t v24 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
    if (v7 < 3 || (uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
    {
      unint64_t v24 = std::__next_prime(v24);
    }
    else
    {
      uint64_t v26 = 1 << -(char)__clz(v24 - 1);
      if (v24 >= 2) {
        unint64_t v24 = v26;
      }
    }
    if (*(void *)&prime <= v24) {
      int8x8_t prime = (int8x8_t)v24;
    }
    if (*(void *)&prime >= v7)
    {
      unint64_t v7 = *((void *)a1 + 1);
      goto LABEL_60;
    }
    if (!*(void *)&prime)
    {
      long long v33 = *(void **)a1;
      *(void *)a1 = 0;
      if (v33) {
        operator delete(v33);
      }
      unint64_t v7 = 0;
      *((void *)a1 + 1) = 0;
      goto LABEL_60;
    }
  }
  if (*(void *)&prime >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  BOOL v18 = operator new(8 * *(void *)&prime);
  unint64_t v19 = *(void **)a1;
  *(void *)a1 = v18;
  if (v19) {
    operator delete(v19);
  }
  uint64_t v20 = 0;
  *((int8x8_t *)a1 + 1) = prime;
  do
    *(void *)(*(void *)a1 + 8 * v20++) = 0;
  while (*(void *)&prime != v20);
  float v21 = (void *)*((void *)a1 + 2);
  if (v21)
  {
    unint64_t v22 = v21[1];
    uint8x8_t v23 = (uint8x8_t)vcnt_s8(prime);
    v23.i16[0] = vaddlv_u8(v23);
    if (v23.u32[0] > 1uLL)
    {
      if (v22 >= *(void *)&prime) {
        v22 %= *(void *)&prime;
      }
    }
    else
    {
      v22 &= *(void *)&prime - 1;
    }
    *(void *)(*(void *)a1 + 8 * v22) = a1 + 4;
    unint64_t v27 = (void *)*v21;
    if (*v21)
    {
      do
      {
        unint64_t v28 = v27[1];
        if (v23.u32[0] > 1uLL)
        {
          if (v28 >= *(void *)&prime) {
            v28 %= *(void *)&prime;
          }
        }
        else
        {
          v28 &= *(void *)&prime - 1;
        }
        if (v28 != v22)
        {
          if (!*(void *)(*(void *)a1 + 8 * v28))
          {
            *(void *)(*(void *)a1 + 8 * v28) = v21;
            goto LABEL_56;
          }
          *float v21 = *v27;
          *unint64_t v27 = **(void **)(*(void *)a1 + 8 * v28);
          **(void **)(*(void *)a1 + 8 * v28) = v27;
          unint64_t v27 = v21;
        }
        unint64_t v28 = v22;
LABEL_56:
        float v21 = v27;
        unint64_t v27 = (void *)*v27;
        unint64_t v22 = v28;
      }
      while (v27);
    }
  }
  unint64_t v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v5) {
      v5 %= v7;
    }
  }
  else
  {
    v5 &= v7 - 1;
  }
LABEL_64:
  long long v29 = *(void **)a1;
  long long v30 = *(void **)(*(void *)a1 + 8 * v5);
  if (v30)
  {
    *int i = *v30;
LABEL_72:
    *long long v30 = i;
    goto LABEL_73;
  }
  *int i = *((void *)a1 + 2);
  *((void *)a1 + 2) = i;
  v29[v5] = a1 + 4;
  if (*i)
  {
    unint64_t v31 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v31 >= v7) {
        v31 %= v7;
      }
    }
    else
    {
      v31 &= v7 - 1;
    }
    long long v30 = (void *)(*(void *)a1 + 8 * v31);
    goto LABEL_72;
  }
LABEL_73:
  ++*((void *)a1 + 3);
  return i;
}

void sub_22204204C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t **a1, unint64_t a2, void *a3)
{
  unint64_t v6 = a1 + 1;
  unint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        unint64_t v7 = (uint64_t **)v5;
        unint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        unint64_t v5 = *v7;
        unint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      unint64_t v5 = v7[1];
      if (!v5)
      {
        unint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    unint64_t v7 = a1 + 1;
LABEL_9:
    uint64_t v9 = (char *)operator new(0x50uLL);
    *((void *)v9 + 4) = *a3;
    *(_OWORD *)(v9 + 40) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    *((void *)v9 + 9) = 0;
    v9[40] = 1;
    *((void *)v9 + 6) = 0;
    *((void *)v9 + 7) = 0;
    v9[64] = 0;
    std::__tree<Phase::SpatialCategory>::__insert_node_at(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

void std::__tree<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Phase::SpatialModeler::RendererInfo>>>::__erase_unique<unsigned long long>(uint64_t **a1, unint64_t a2)
{
  int32x4_t v4 = (uint64_t *)(a1 + 1);
  unint64_t v3 = a1[1];
  if (v3)
  {
    unint64_t v5 = v4;
    unint64_t v6 = v3;
    do
    {
      unint64_t v7 = v6[4];
      BOOL v8 = v7 >= a2;
      if (v7 >= a2) {
        uint64_t v9 = (uint64_t **)v6;
      }
      else {
        uint64_t v9 = (uint64_t **)(v6 + 1);
      }
      if (v8) {
        unint64_t v5 = v6;
      }
      unint64_t v6 = *v9;
    }
    while (*v9);
    if (v5 != v4 && v5[4] <= a2)
    {
      unint64_t v10 = (uint64_t *)v5[1];
      if (v10)
      {
        do
        {
          unint64_t v11 = v10;
          unint64_t v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
      else
      {
        float v12 = v5;
        do
        {
          unint64_t v11 = (uint64_t *)v12[2];
          BOOL v13 = *v11 == (void)v12;
          float v12 = v11;
        }
        while (!v13);
      }
      if (*a1 == v5) {
        *a1 = v11;
      }
      a1[2] = (uint64_t *)((char *)a1[2] - 1);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v3, v5);
      operator delete(v5);
    }
  }
}

void *Phase::Controller::RenderGroupMgr::GetRenderGroup(Phase::Controller::RenderGroupMgr *this, UniqueObjectId a2)
{
  UniqueObjectId v13 = a2;
  unint64_t v3 = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((void *)this + 17, &v13);
  if (!v3) {
    return 0;
  }
  int32x4_t v4 = (void *)((char *)this + 176);
  unint64_t v5 = v3 + 4;
  unint64_t v6 = std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::find<unsigned long long>(v4, v3 + 4);
  if (!v6) {
    return 0;
  }
  unint64_t v7 = v6;
  BOOL v8 = (std::__shared_weak_count *)v6[4];
  if (v8)
  {
    uint64_t v9 = std::__shared_weak_count::lock(v8);
    if (v9)
    {
      unint64_t v10 = v9;
      uint64_t v11 = v7[3];
      if (v11 && ((*(uint64_t (**)(uint64_t))(*(void *)v11 + 104))(v11) & 1) != 0) {
        unint64_t v5 = 0;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
  }
  return v5;
}

void sub_2220422BC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void Phase::Controller::RenderGroupMgr::NewRenderGroup(Phase::Controller::RenderGroupMgr *this, Phase::SpatialModeler::RenderGroup *a2)
{
  uint64_t v3 = *((void *)this + 14);
  if (v3)
  {
    if (*((void *)this + 15)) {
      Phase::Controller::RendererSystem::CreateRenderer(v3, *(void *)(*((void *)this + 16) + 240), (Phase::Logger *)&v4);
    }
  }
  std::terminate();
}

void sub_2220424C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  uint64_t v17 = *(std::__shared_weak_count **)(v15 - 72);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  _Unwind_Resume(exception_object);
}

void Phase::Controller::PerformNewRenderGroup(float *a1, void *a2, long long *a3, uint64_t *a4)
{
  uint64_t v9 = 0;
  uint64_t v55 = *MEMORY[0x263EF8340];
  unint64_t v10 = *(void *)(*a4 + 40);
  long long v11 = *(long long *)((char *)a3 + 24);
  long long v12 = *(long long *)((char *)a3 + 40);
  UniqueObjectId v13 = (char *)a3 + 56;
  memset(&buf[7], 0, 24);
  unint64_t v14 = 0xCBF29CE484222325;
  do
    unint64_t v14 = 0x100000001B3 * (v14 ^ *((char *)a3 + v9++));
  while (v9 != 16);
  unint64_t v15 = *((void *)a1 + 1);
  long long v50 = v12;
  long long v51 = v11;
  if (!v15) {
    goto LABEL_24;
  }
  uint8x8_t v16 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
  v16.i16[0] = vaddlv_u8(v16);
  if (v16.u32[0] > 1uLL)
  {
    unint64_t v4 = v14;
    if (v14 >= v15) {
      unint64_t v4 = v14 % v15;
    }
  }
  else
  {
    unint64_t v4 = (v15 - 1) & v14;
  }
  uint64_t v17 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
  if (!v17 || (BOOL v18 = *v17) == 0)
  {
LABEL_24:
    float v21 = (char *)operator new(0x1A0uLL);
    *(void *)float v21 = 0;
    *((void *)v21 + 1) = v14;
    long long v22 = *a3;
    *((_OWORD *)v21 + 1) = *a3;
    *((void *)v21 + 4) = v10;
    *((_OWORD *)v21 + 3) = v22;
    *((void *)v21 + 8) = *((void *)a3 + 2);
    *(_OWORD *)(v21 + 72) = v51;
    *(_OWORD *)(v21 + 88) = v50;
    memcpy(v21 + 104, v13, 0x109uLL);
    v21[384] = 1;
    *(_OWORD *)(v21 + 385) = *(_OWORD *)buf;
    *((_OWORD *)v21 + 25) = *(_OWORD *)&buf[15];
    float v23 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
    float v24 = a1[8];
    if (v15 && (float)(v24 * (float)v15) >= v23)
    {
LABEL_70:
      uint64_t v40 = *(void **)a1;
      long long v41 = *(void **)(*(void *)a1 + 8 * v4);
      if (v41)
      {
        *(void *)float v21 = *v41;
      }
      else
      {
        *(void *)float v21 = *((void *)a1 + 2);
        *((void *)a1 + 2) = v21;
        v40[v4] = a1 + 4;
        if (!*(void *)v21)
        {
LABEL_79:
          ++*((void *)a1 + 3);
          uint64_t v43 = *a4;
          uint64_t v44 = a4[1];
          std::__hash_table<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>>>::__emplace_unique_key_args<unsigned long long,unsigned long long &,std::shared_ptr<Phase::Controller::Renderer> &>((uint64_t)a2, v10, v10, v43, v44);
          return;
        }
        unint64_t v42 = *(void *)(*(void *)v21 + 8);
        if ((v15 & (v15 - 1)) != 0)
        {
          if (v42 >= v15) {
            v42 %= v15;
          }
        }
        else
        {
          v42 &= v15 - 1;
        }
        long long v41 = (void *)(*(void *)a1 + 8 * v42);
      }
      void *v41 = v21;
      goto LABEL_79;
    }
    BOOL v25 = 1;
    if (v15 >= 3) {
      BOOL v25 = (v15 & (v15 - 1)) != 0;
    }
    unint64_t v26 = v25 | (2 * v15);
    unint64_t v27 = vcvtps_u32_f32(v23 / v24);
    if (v26 <= v27) {
      int8x8_t prime = (int8x8_t)v27;
    }
    else {
      int8x8_t prime = (int8x8_t)v26;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v15 = *((void *)a1 + 1);
    }
    if (*(void *)&prime > v15) {
      goto LABEL_36;
    }
    if (*(void *)&prime < v15)
    {
      unint64_t v35 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v15 < 3 || (uint8x8_t v36 = (uint8x8_t)vcnt_s8((int8x8_t)v15), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
      {
        unint64_t v35 = std::__next_prime(v35);
      }
      else
      {
        uint64_t v37 = 1 << -(char)__clz(v35 - 1);
        if (v35 >= 2) {
          unint64_t v35 = v37;
        }
      }
      if (*(void *)&prime <= v35) {
        int8x8_t prime = (int8x8_t)v35;
      }
      if (*(void *)&prime >= v15)
      {
        unint64_t v15 = *((void *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_36:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          long long v29 = operator new(8 * *(void *)&prime);
          long long v30 = *(void **)a1;
          *(void *)a1 = v29;
          if (v30) {
            operator delete(v30);
          }
          uint64_t v31 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v31++) = 0;
          while (*(void *)&prime != v31);
          unint64_t v32 = (void *)*((void *)a1 + 2);
          if (v32)
          {
            unint64_t v33 = v32[1];
            uint8x8_t v34 = (uint8x8_t)vcnt_s8(prime);
            v34.i16[0] = vaddlv_u8(v34);
            if (v34.u32[0] > 1uLL)
            {
              if (v33 >= *(void *)&prime) {
                v33 %= *(void *)&prime;
              }
            }
            else
            {
              v33 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v33) = a1 + 4;
            unint64_t v38 = (void *)*v32;
            if (*v32)
            {
              do
              {
                unint64_t v39 = v38[1];
                if (v34.u32[0] > 1uLL)
                {
                  if (v39 >= *(void *)&prime) {
                    v39 %= *(void *)&prime;
                  }
                }
                else
                {
                  v39 &= *(void *)&prime - 1;
                }
                if (v39 != v33)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v39))
                  {
                    *(void *)(*(void *)a1 + 8 * v39) = v32;
                    goto LABEL_61;
                  }
                  *unint64_t v32 = *v38;
                  void *v38 = **(void **)(*(void *)a1 + 8 * v39);
                  **(void **)(*(void *)a1 + 8 * v39) = v38;
                  unint64_t v38 = v32;
                }
                unint64_t v39 = v33;
LABEL_61:
                unint64_t v32 = v38;
                unint64_t v38 = (void *)*v38;
                unint64_t v33 = v39;
              }
              while (v38);
            }
          }
          unint64_t v15 = (unint64_t)prime;
          goto LABEL_65;
        }
        unint64_t v49 = *(void **)a1;
        *(void *)a1 = 0;
        if (v49) {
          operator delete(v49);
        }
        unint64_t v15 = 0;
        *((void *)a1 + 1) = 0;
      }
    }
LABEL_65:
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v14 >= v15) {
        unint64_t v4 = v14 % v15;
      }
      else {
        unint64_t v4 = v14;
      }
    }
    else
    {
      unint64_t v4 = (v15 - 1) & v14;
    }
    goto LABEL_70;
  }
  while (1)
  {
    unint64_t v19 = v18[1];
    if (v19 == v14) {
      break;
    }
    if (v16.u32[0] > 1uLL)
    {
      if (v19 >= v15) {
        v19 %= v15;
      }
    }
    else
    {
      v19 &= v15 - 1;
    }
    if (v19 != v4) {
      goto LABEL_24;
    }
LABEL_23:
    BOOL v18 = (uint64_t *)*v18;
    if (!v18) {
      goto LABEL_24;
    }
  }
  if (v18[2] != *(void *)a3 || v18[3] != *((void *)a3 + 1)) {
    goto LABEL_23;
  }
  if (v18[4] != v10)
  {
    unint64_t v45 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)a1) + 224);
    if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v46 = v18[6];
      uint64_t v47 = v18[4];
      *(_DWORD *)buf = 136316162;
      *(void *)&uint8_t buf[4] = "RenderGroupMgr.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 80;
      *(_WORD *)&unsigned char buf[18] = 2048;
      *(void *)&buf[20] = v46;
      *(_WORD *)&buf[28] = 2048;
      *(void *)&buf[30] = v47;
      __int16 v53 = 2048;
      unint64_t v54 = v10;
      _os_log_impl(&dword_221E5E000, v45, OS_LOG_TYPE_DEFAULT, "%25s:%-5d RenderGroupMgr: Replacing Renderer rendergroup: %llu renderer old: %llu new: %llu", buf, 0x30u);
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>>>::__erase_unique<unsigned long long>(a2, v18[4]);
    std::__hash_table<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>>>::__emplace_unique_key_args<unsigned long long,unsigned long long &,std::shared_ptr<Phase::Controller::Renderer> &>((uint64_t)a2, v10, v10, *a4, a4[1]);
  }
  long long v48 = *a3;
  v18[8] = *((void *)a3 + 2);
  *((_OWORD *)v18 + 3) = v48;
  *((_DWORD *)v18 + 18) = *((_DWORD *)a3 + 6);
  *((_DWORD *)v18 + 19) = *((_DWORD *)a3 + 7);
  *((_DWORD *)v18 + 20) = *((_DWORD *)a3 + 8);
  *((_DWORD *)v18 + 21) = *((_DWORD *)a3 + 9);
  *((_DWORD *)v18 + 22) = *((_DWORD *)a3 + 10);
  *((_DWORD *)v18 + 23) = *((_DWORD *)a3 + 11);
  *((_DWORD *)v18 + 24) = *((_DWORD *)a3 + 12);
  *((_DWORD *)v18 + 25) = *((_DWORD *)a3 + 13);
  memcpy(v18 + 13, v13, 0x109uLL);
  v18[4] = v10;
  *((unsigned char *)v18 + 384) = 1;
}

void sub_222042B4C(_Unwind_Exception *exception_object)
{
}

uint64_t Phase::Controller::RenderGroupMgr::ExecuteNewRenderGroup(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    uint64_t v3 = result;
    unint64_t v4 = (float *)(result + 136);
    unint64_t v5 = (void *)(result + 176);
    do
    {
      uint64_t v6 = *(void *)(v2 + 392);
      if (*(_DWORD *)(v2 + 368) != 3) {
        std::__throw_bad_variant_access[abi:ne180100]();
      }
      unint64_t v7 = *(std::__shared_weak_count **)(v2 + 360);
      if (v7)
      {
        BOOL v8 = std::__shared_weak_count::lock(v7);
        v10[1] = (uint64_t)v8;
        if (v8)
        {
          uint64_t v9 = v8;
          v10[0] = *(void *)(v2 + 352);
          if (v10[0])
          {
            Phase::Controller::PerformNewRenderGroup(v4, v5, (long long *)(v2 + 16), v10);
            *(unsigned char *)(v3 + 568) = 1;
          }
          std::__shared_weak_count::__release_shared[abi:ne180100](v9);
        }
      }
      Phase::SortedCommandQueue<Phase::Controller::RenderGroupMgr,Phase::Controller::RenderGroupMgr::CommandType,std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::CommandBatch::Clear((void *)(v2 + 384));
      std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>,(std::__variant_detail::_Trait)1>::~__dtor(v2 + 16);
      std::chrono::steady_clock::time_point result = MEMORY[0x223C938A0](v2, 0x1022C40083BFC85);
      uint64_t v2 = v6;
    }
    while (v6);
  }
  return result;
}

BOOL Phase::Controller::RenderGroupMgr::UpdateRenderGroup(Phase::Controller::RenderGroupMgr *this, Phase::SpatialModeler::RenderGroup *a2, char a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  BOOL result = Phase::Controller::PerformUpdateRenderGroup((void *)this + 17, (long long *)a2, a3);
  if (result)
  {
    if (*((void *)this + 65) != *((void *)this + 66))
    {
      long long v7 = *(_OWORD *)a2;
      uint64_t v8 = *((void *)a2 + 2);
      long long v9 = *(_OWORD *)((char *)a2 + 24);
      long long v10 = *(_OWORD *)((char *)a2 + 40);
      memcpy(v11, (char *)a2 + 56, 0x109uLL);
      v11[280] = a3;
      operator new();
    }
    *((unsigned char *)this + 568) = 1;
  }
  return result;
}

BOOL Phase::Controller::PerformUpdateRenderGroup(void *a1, long long *a2, char a3)
{
  unint64_t v5 = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>(a1, a2);
  uint64_t v6 = v5;
  if (v5)
  {
    long long v7 = *a2;
    v5[8] = *((void *)a2 + 2);
    *((_OWORD *)v5 + 3) = v7;
    *((_DWORD *)v5 + 18) = *((_DWORD *)a2 + 6);
    *((_DWORD *)v5 + 19) = *((_DWORD *)a2 + 7);
    *((_DWORD *)v5 + 20) = *((_DWORD *)a2 + 8);
    *((_DWORD *)v5 + 21) = *((_DWORD *)a2 + 9);
    *((_DWORD *)v5 + 22) = *((_DWORD *)a2 + 10);
    *((_DWORD *)v5 + 23) = *((_DWORD *)a2 + 11);
    *((_DWORD *)v5 + 24) = *((_DWORD *)a2 + 12);
    *((_DWORD *)v5 + 25) = *((_DWORD *)a2 + 13);
    memcpy(v5 + 13, (char *)a2 + 56, 0x109uLL);
    *((unsigned char *)v6 + 384) = a3;
  }
  return v6 != 0;
}

uint64_t Phase::Controller::RenderGroupMgr::ExecuteUpdateRenderGroup(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    uint64_t v3 = result;
    unint64_t v4 = (void *)(result + 136);
    do
    {
      uint64_t v5 = v2;
      uint64_t v2 = *(void *)(v2 + 392);
      if (*(_DWORD *)(v5 + 368) != 4) {
        std::__throw_bad_variant_access[abi:ne180100]();
      }
      if (Phase::Controller::PerformUpdateRenderGroup(v4, (long long *)(v5 + 16), *(unsigned char *)(v5 + 352))) {
        *(unsigned char *)(v3 + 568) = 1;
      }
      Phase::SortedCommandQueue<Phase::Controller::RenderGroupMgr,Phase::Controller::RenderGroupMgr::CommandType,std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::CommandBatch::Clear((void *)(v5 + 384));
      std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>,(std::__variant_detail::_Trait)1>::~__dtor(v5 + 16);
      BOOL result = MEMORY[0x223C938A0](v5, 0x1022C40083BFC85);
    }
    while (v2);
  }
  return result;
}

BOOL Phase::Controller::RenderGroupMgr::RemoveRenderGroup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a2;
  uint64_t v6 = a3;
  BOOL result = Phase::Controller::PerformRemoveRenderGroup((void *)(a1 + 136), (void *)(a1 + 176), a2, a3);
  if (result)
  {
    if (*(void *)(a1 + 520) != *(void *)(a1 + 528)) {
      operator new();
    }
    *(unsigned char *)(a1 + 568) = 1;
  }
  return result;
}

BOOL Phase::Controller::PerformRemoveRenderGroup(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  v12[0] = a3;
  v12[1] = a4;
  uint64_t v6 = (Phase::Logger *)std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>(a1, v12);
  long long v7 = (uint64_t *)v6;
  if (v6)
  {
    uint64_t v8 = **(id **)(Phase::Logger::GetInstance(v6) + 224);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = v7[2];
      uint64_t v10 = v7[4];
      *(_DWORD *)buf = 136315906;
      unint64_t v14 = "RenderGroupMgr.mm";
      __int16 v15 = 1024;
      int v16 = 186;
      __int16 v17 = 2048;
      uint64_t v18 = v9;
      __int16 v19 = 2048;
      uint64_t v20 = v10;
      _os_log_impl(&dword_221E5E000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d RenderGroupMgr: RemoveRenderGroup rendererId: %llu, rendergroup id: %llu", buf, 0x26u);
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>>>::__erase_unique<unsigned long long>(a2, v7[4]);
    std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::RenderGroupObject>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::RenderGroupObject>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::RenderGroupObject>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::RenderGroupObject>>>::erase(a1, v7);
  }
  return v7 != 0;
}

uint64_t Phase::Controller::RenderGroupMgr::ExecuteRemoveRenderGroup(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    uint64_t v3 = result;
    unint64_t v4 = (void *)(result + 136);
    uint64_t v5 = (void *)(result + 176);
    do
    {
      uint64_t v6 = v2;
      uint64_t v2 = *(void *)(v2 + 392);
      if (*(_DWORD *)(v6 + 368) != 2) {
        std::__throw_bad_variant_access[abi:ne180100]();
      }
      if (Phase::Controller::PerformRemoveRenderGroup(v4, v5, *(void *)(v6 + 16), *(void *)(v6 + 24))) {
        *(unsigned char *)(v3 + 568) = 1;
      }
      Phase::SortedCommandQueue<Phase::Controller::RenderGroupMgr,Phase::Controller::RenderGroupMgr::CommandType,std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::CommandBatch::Clear((void *)(v6 + 384));
      std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>,(std::__variant_detail::_Trait)1>::~__dtor(v6 + 16);
      BOOL result = MEMORY[0x223C938A0](v6, 0x1022C40083BFC85);
    }
    while (v2);
  }
  return result;
}

uint64_t Phase::Controller::RenderGroupMgr::ExecuteRemoveRenderGroupForRenderer(uint64_t result, uint64_t a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (a2)
  {
    uint64_t v2 = a2;
    uint64_t v3 = result;
    unint64_t v4 = (void *)(result + 136);
    uint64_t v5 = (void *)(result + 176);
    uint64_t v6 = (uint64_t *)(result + 152);
    do
    {
      uint64_t v7 = v2;
      uint64_t v2 = *(void *)(v2 + 392);
      if (*(_DWORD *)(v7 + 368) != 1) {
        std::__throw_bad_variant_access[abi:ne180100]();
      }
      unint64_t v8 = *(void *)(v7 + 16);
      std::__hash_table<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>>>::__erase_unique<unsigned long long>(v5, v8);
      uint64_t v10 = v6;
      while (1)
      {
        uint64_t v10 = (uint64_t *)*v10;
        if (!v10) {
          break;
        }
        if (v10[4] == v8)
        {
          long long v11 = **(id **)(Phase::Logger::GetInstance(v9) + 224);
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v12 = v10[2];
            *(_DWORD *)buf = 136315906;
            unint64_t v14 = "RenderGroupMgr.mm";
            __int16 v15 = 1024;
            int v16 = 228;
            __int16 v17 = 2048;
            unint64_t v18 = v8;
            __int16 v19 = 2048;
            uint64_t v20 = v12;
            _os_log_impl(&dword_221E5E000, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d RenderGroupMgr: RemoveRenderGroupForRenderer rendererId: %llu rendergroup id: %llu", buf, 0x26u);
          }
          std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::RenderGroupObject>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::RenderGroupObject>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::RenderGroupObject>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::RenderGroupObject>>>::erase(v4, v10);
          *(unsigned char *)(v3 + 568) = 1;
          break;
        }
      }
      Phase::SortedCommandQueue<Phase::Controller::RenderGroupMgr,Phase::Controller::RenderGroupMgr::CommandType,std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::CommandBatch::Clear((void *)(v7 + 384));
      std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>,(std::__variant_detail::_Trait)1>::~__dtor(v7 + 16);
      BOOL result = MEMORY[0x223C938A0](v7, 0x1022C40083BFC85);
    }
    while (v2);
  }
  return result;
}

uint64_t Phase::Controller::RenderGroupMgr::SetSubmixRendererId(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = Phase::Controller::PerformSetSubmixRendererId((float *)(a1 + 216), a2, a3, a4);
  if (result)
  {
    if (*(void *)(a1 + 520) != *(void *)(a1 + 528))
    {
      uint64_t v9 = a2;
      uint64_t v10 = a3;
      uint64_t v11 = a4;
      operator new();
    }
    *(unsigned char *)(a1 + 568) = 1;
  }
  return result;
}

uint64_t Phase::Controller::PerformSetSubmixRendererId(float *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)&long long v9 = a2;
  *((void *)&v9 + 1) = a3;
  uint64_t v6 = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>(a1, &v9);
  if (v6)
  {
    if (v6[4] == a4) {
      return 0;
    }
    v6[4] = a4;
  }
  else
  {
    *(void *)&long long v8 = a4;
    *((void *)&v8 + 1) = 0x3FF0000000000000;
    std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>>>::__emplace_unique_key_args<Phase::UniqueObjectId,Phase::UniqueObjectId&,Phase::Controller::SubmixParams>(a1, &v9, &v9, &v8);
  }
  return 1;
}

uint64_t Phase::Controller::RenderGroupMgr::ExecuteSetSubmixRendererId(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    uint64_t v3 = result;
    unint64_t v4 = (float *)(result + 216);
    do
    {
      uint64_t v5 = v2;
      uint64_t v2 = *(void *)(v2 + 392);
      if (*(_DWORD *)(v5 + 368) != 6) {
        std::__throw_bad_variant_access[abi:ne180100]();
      }
      if (Phase::Controller::PerformSetSubmixRendererId(v4, *(void *)(v5 + 16), *(void *)(v5 + 24), *(void *)(v5 + 32)))*(unsigned char *)(v3 + 568) = 1; {
      Phase::SortedCommandQueue<Phase::Controller::RenderGroupMgr,Phase::Controller::RenderGroupMgr::CommandType,std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::CommandBatch::Clear((void *)(v5 + 384));
      }
      std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>,(std::__variant_detail::_Trait)1>::~__dtor(v5 + 16);
      uint64_t result = MEMORY[0x223C938A0](v5, 0x1022C40083BFC85);
    }
    while (v2);
  }
  return result;
}

uint64_t Phase::Controller::RenderGroupMgr::SetSubmixSendLevel(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t result = Phase::Controller::PerformSetSubmixSendLevel((float *)(a1 + 216), a2, a3, a4);
  if (result) {
    operator new();
  }
  return result;
}

uint64_t Phase::Controller::PerformSetSubmixSendLevel(float *a1, uint64_t a2, uint64_t a3, double a4)
{
  *(void *)&long long v9 = a2;
  *((void *)&v9 + 1) = a3;
  double v5 = fmin(fmax(a4, 0.0), 1.0);
  uint64_t v6 = (double *)std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>(a1, &v9);
  if (!v6)
  {
    *(void *)&long long v8 = -1;
    *((double *)&v8 + 1) = v5;
    std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>>>::__emplace_unique_key_args<Phase::UniqueObjectId,Phase::UniqueObjectId&,Phase::Controller::SubmixParams>(a1, &v9, &v9, &v8);
    return 1;
  }
  if (v6[5] != v5)
  {
    v6[5] = v5;
    return 1;
  }
  return 0;
}

uint64_t Phase::Controller::RenderGroupMgr::ExecuteSetSubmixSendLevel(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    uint64_t v3 = result;
    unint64_t v4 = (float *)(result + 216);
    do
    {
      uint64_t v5 = v2;
      uint64_t v2 = *(void *)(v2 + 392);
      if (*(_DWORD *)(v5 + 368) != 5) {
        std::__throw_bad_variant_access[abi:ne180100]();
      }
      if (Phase::Controller::PerformSetSubmixSendLevel(v4, *(void *)(v5 + 16), *(void *)(v5 + 24), *(double *)(v5 + 32)))*(unsigned char *)(v3 + 568) = 1; {
      Phase::SortedCommandQueue<Phase::Controller::RenderGroupMgr,Phase::Controller::RenderGroupMgr::CommandType,std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::CommandBatch::Clear((void *)(v5 + 384));
      }
      std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>,(std::__variant_detail::_Trait)1>::~__dtor(v5 + 16);
      uint64_t result = MEMORY[0x223C938A0](v5, 0x1022C40083BFC85);
    }
    while (v2);
  }
  return result;
}

uint64_t Phase::Controller::RenderGroupMgr::ExecuteRemoveSubmix(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    uint64_t v3 = result;
    unint64_t v4 = (void *)(result + 216);
    do
    {
      uint64_t v5 = v2;
      uint64_t v2 = *(void *)(v2 + 392);
      if (*(_DWORD *)(v5 + 368) != 2) {
        std::__throw_bad_variant_access[abi:ne180100]();
      }
      if (Phase::Controller::PerformRemoveSubmix(v4, *(void *)(v5 + 16), *(void *)(v5 + 24))) {
        *(unsigned char *)(v3 + 568) = 1;
      }
      Phase::SortedCommandQueue<Phase::Controller::RenderGroupMgr,Phase::Controller::RenderGroupMgr::CommandType,std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::CommandBatch::Clear((void *)(v5 + 384));
      std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>,(std::__variant_detail::_Trait)1>::~__dtor(v5 + 16);
      uint64_t result = MEMORY[0x223C938A0](v5, 0x1022C40083BFC85);
    }
    while (v2);
  }
  return result;
}

BOOL Phase::Controller::RenderGroupMgr::RemoveSubmix(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a2;
  uint64_t v6 = a3;
  BOOL result = Phase::Controller::PerformRemoveSubmix((void *)(a1 + 216), a2, a3);
  if (result)
  {
    if (*(void *)(a1 + 520) != *(void *)(a1 + 528)) {
      operator new();
    }
    *(unsigned char *)(a1 + 568) = 1;
  }
  return result;
}

BOOL Phase::Controller::PerformRemoveSubmix(void *a1, uint64_t a2, uint64_t a3)
{
  v6[0] = a2;
  v6[1] = a3;
  unint64_t v4 = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>(a1, v6);
  if (v4) {
    std::__hash_table<Phase::Controller::Renderer *,std::hash<Phase::Controller::Renderer *>,std::equal_to<Phase::Controller::Renderer *>,std::allocator<Phase::Controller::Renderer *>>::erase(a1, v4);
  }
  return v4 != 0;
}

void Phase::Controller::RenderGroupMgr::GetRenderer(Phase::Controller::RenderGroupMgr *this@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v9 = a2;
  unint64_t v4 = std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::find<unsigned long long>((void *)this + 22, &v9);
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = (std::__shared_weak_count *)v4[4];
    if (v6)
    {
      uint64_t v7 = std::__shared_weak_count::lock(v6);
      a3[1] = v7;
      if (v7)
      {
        uint64_t v8 = v5[3];
        *a3 = v8;
        if (v8) {
          return;
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
    }
  }
  *a3 = 0;
  a3[1] = 0;
}

void Phase::Controller::RenderGroupMgr::GetRendererForRenderGroup(Phase::Controller::RenderGroupMgr *this@<X0>, UniqueObjectId a2@<0:X1, 8:X2>, void *a3@<X8>)
{
  UniqueObjectId v11 = a2;
  uint64_t v5 = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((void *)this + 17, &v11);
  if (v5)
  {
    uint64_t v6 = std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::find<unsigned long long>((void *)this + 22, v5 + 4);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = (std::__shared_weak_count *)v6[4];
      if (v8)
      {
        unint64_t v9 = std::__shared_weak_count::lock(v8);
        a3[1] = v9;
        if (v9)
        {
          uint64_t v10 = v7[3];
          *a3 = v10;
          if (v10) {
            return;
          }
          std::__shared_weak_count::__release_shared[abi:ne180100](v9);
        }
      }
    }
  }
  *a3 = 0;
  a3[1] = 0;
}

uint64_t Phase::Controller::RenderGroupMgr::ExecuteUpdateRenderer(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    uint64_t v3 = result;
    uint64_t v4 = result + 136;
    unint64_t v5 = result + 216;
    uint64_t v6 = result + 176;
    do
    {
      uint64_t v7 = *(void *)(v2 + 392);
      if (*(_DWORD *)(v2 + 368) != 7) {
        std::__throw_bad_variant_access[abi:ne180100]();
      }
      unint64_t v8 = *(void *)(v2 + 16);
      unint64_t v9 = *(std::__shared_weak_count **)(v2 + 32);
      v11[0] = *(void *)(v2 + 24);
      v11[1] = (uint64_t)v9;
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      int updated = Phase::Controller::PerformUpdateRenderer(v5, v6, v4, v8, v11);
      if (v9) {
        std::__shared_weak_count::__release_weak(v9);
      }
      if (updated) {
        *(unsigned char *)(v3 + 568) = 1;
      }
      Phase::SortedCommandQueue<Phase::Controller::RenderGroupMgr,Phase::Controller::RenderGroupMgr::CommandType,std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::CommandBatch::Clear((void *)(v2 + 384));
      std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>,(std::__variant_detail::_Trait)1>::~__dtor(v2 + 16);
      BOOL result = MEMORY[0x223C938A0](v2, 0x1022C40083BFC85);
      uint64_t v2 = v7;
    }
    while (v7);
  }
  return result;
}

void Phase::Controller::RenderGroupMgr::UpdateRenderer(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  uint64_t v6 = (std::__shared_weak_count *)a3[1];
  uint64_t v7 = a1 + 136;
  unint64_t v8 = a1 + 216;
  v11[0] = v5;
  v11[1] = (uint64_t)v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  int updated = Phase::Controller::PerformUpdateRenderer(v8, a1 + 176, v7, a2, v11);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  if (updated)
  {
    if (*(void *)(a1 + 520) != *(void *)(a1 + 528))
    {
      uint64_t v10 = a3[1];
      if (v10) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 16), 1uLL, memory_order_relaxed);
      }
      Phase::SortedCommandQueue<Phase::Controller::RenderGroupMgr,Phase::Controller::RenderGroupMgr::CommandType,std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::CommandBatch::AddCommand<std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>>();
    }
    *(unsigned char *)(a1 + 568) = 1;
  }
}

void sub_222043B40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_weak(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Controller::PerformUpdateRenderer(unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t *a5)
{
  unint64_t v9 = (std::__shared_weak_count *)a5[1];
  if (v9)
  {
    UniqueObjectId v11 = std::__shared_weak_count::lock(v9);
    if (v11) {
      uint64_t v12 = *a5;
    }
    else {
      uint64_t v12 = 0;
    }
  }
  else
  {
    uint64_t v12 = 0;
    UniqueObjectId v11 = 0;
  }
  UniqueObjectId v13 = std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::find<PHASETapType>((void *)a2, a4);
  uint64_t v14 = 0;
  if (!v12 || !v13) {
    goto LABEL_58;
  }
  __int16 v15 = (std::__shared_weak_count *)v13[4];
  if (v15) {
    unint64_t v39 = std::__shared_weak_count::lock(v15);
  }
  else {
    unint64_t v39 = 0;
  }
  unint64_t v16 = *(void *)(v12 + 40);
  unint64_t v17 = *(void *)(a2 + 8);
  if (!v17)
  {
    unint64_t v18 = a1;
    goto LABEL_28;
  }
  unint64_t v18 = a1;
  uint8x8_t v19 = (uint8x8_t)vcnt_s8((int8x8_t)v17);
  v19.i16[0] = vaddlv_u8(v19);
  if (v19.u32[0] > 1uLL)
  {
    a1 = *(void *)(v12 + 40);
    if (v17 <= v16) {
      a1 = v16 % v17;
    }
  }
  else
  {
    a1 = (v17 - 1) & v16;
  }
  uint64_t v20 = *(void **)(*(void *)a2 + 8 * a1);
  if (!v20 || (uint64_t v21 = (void *)*v20) == 0)
  {
LABEL_28:
    float v23 = operator new(0x28uLL);
    *float v23 = 0;
    v23[1] = v16;
    v23[2] = v16;
    v23[3] = v12;
    v23[4] = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    float v24 = (float)(unint64_t)(*(void *)(a2 + 24) + 1);
    float v25 = *(float *)(a2 + 32);
    if (!v17 || (float)(v25 * (float)v17) < v24)
    {
      BOOL v26 = 1;
      if (v17 >= 3) {
        BOOL v26 = (v17 & (v17 - 1)) != 0;
      }
      unint64_t v27 = v26 | (2 * v17);
      unint64_t v28 = vcvtps_u32_f32(v24 / v25);
      if (v27 <= v28) {
        size_t v29 = v28;
      }
      else {
        size_t v29 = v27;
      }
      std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>(a2, v29);
      unint64_t v17 = *(void *)(a2 + 8);
      if ((v17 & (v17 - 1)) != 0)
      {
        if (v17 <= v16) {
          a1 = v16 % v17;
        }
        else {
          a1 = v16;
        }
      }
      else
      {
        a1 = (v17 - 1) & v16;
      }
    }
    uint64_t v30 = *(void *)a2;
    uint64_t v31 = *(void **)(*(void *)a2 + 8 * a1);
    if (v31)
    {
      *float v23 = *v31;
    }
    else
    {
      *float v23 = *(void *)(a2 + 16);
      *(void *)(a2 + 16) = v23;
      *(void *)(v30 + 8 * a1) = a2 + 16;
      if (!*v23)
      {
LABEL_51:
        ++*(void *)(a2 + 24);
        goto LABEL_52;
      }
      unint64_t v32 = *(void *)(*v23 + 8);
      if ((v17 & (v17 - 1)) != 0)
      {
        if (v32 >= v17) {
          v32 %= v17;
        }
      }
      else
      {
        v32 &= v17 - 1;
      }
      uint64_t v31 = (void *)(*(void *)a2 + 8 * v32);
    }
    *uint64_t v31 = v23;
    goto LABEL_51;
  }
  while (1)
  {
    unint64_t v22 = v21[1];
    if (v22 == v16) {
      break;
    }
    if (v19.u32[0] > 1uLL)
    {
      if (v22 >= v17) {
        v22 %= v17;
      }
    }
    else
    {
      v22 &= v17 - 1;
    }
    if (v22 != a1) {
      goto LABEL_28;
    }
LABEL_27:
    uint64_t v21 = (void *)*v21;
    if (!v21) {
      goto LABEL_28;
    }
  }
  if (v21[2] != v16) {
    goto LABEL_27;
  }
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v38 = (std::__shared_weak_count *)v21[4];
  v21[3] = v12;
  v21[4] = v11;
  if (v38) {
    std::__shared_weak_count::__release_weak(v38);
  }
LABEL_52:
  unint64_t v33 = *(void **)(a3 + 16);
  if (!v33)
  {
LABEL_55:
    uint64_t v14 = 0;
    goto LABEL_56;
  }
  while (v33[4] != a4)
  {
    unint64_t v33 = (void *)*v33;
    if (!v33) {
      goto LABEL_55;
    }
  }
  uint64_t v36 = *(void *)(v12 + 40);
  v33[4] = v36;
  uint64_t v37 = *(void **)(v18 + 16);
  if (!v37)
  {
    uint64_t v14 = 1;
LABEL_56:
    uint8x8_t v34 = v39;
    if (!v39) {
      goto LABEL_58;
    }
    goto LABEL_57;
  }
  uint8x8_t v34 = v39;
  do
  {
    if (v37[4] == a4) {
      v37[4] = v36;
    }
    uint64_t v37 = (void *)*v37;
  }
  while (v37);
  uint64_t v14 = 1;
  if (v39) {
LABEL_57:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
LABEL_58:
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  return v14;
}

void sub_222043E98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  UniqueObjectId v13 = (std::__shared_weak_count *)v11[4];
  if (v13) {
    std::__shared_weak_count::__release_weak(v13);
  }
  operator delete(v11);
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  _Unwind_Resume(a1);
}

void Phase::SortedCommandQueue<Phase::Controller::RenderGroupMgr,Phase::Controller::RenderGroupMgr::CommandType,std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::CommandBatch::AddCommand<std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>>()
{
}

void *Phase::Controller::RenderGroupMgr::UpdatePointSourceHistory(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4)
{
  uint64_t v10 = a2;
  uint64_t v11 = a3;
  BOOL result = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>((void *)(a1 + 136), &v10);
  if (result)
  {
    long long v9 = *a4;
    result[51] = *((void *)a4 + 2);
    *(_OWORD *)(result + 49) = v9;
    if (*(void *)(a1 + 520) != *(void *)(a1 + 528))
    {
      uint64_t v10 = a2;
      uint64_t v11 = a3;
      long long v12 = *a4;
      uint64_t v13 = *((void *)a4 + 2);
      operator new();
    }
    *(unsigned char *)(a1 + 568) = 1;
  }
  return result;
}

uint64_t Phase::Controller::RenderGroupMgr::ExecuteUpdatePointSourceHistory(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    uint64_t v3 = result;
    uint64_t v4 = (void *)(result + 136);
    do
    {
      uint64_t v5 = v2;
      uint64_t v2 = *(void *)(v2 + 392);
      if (*(_DWORD *)(v5 + 368) != 8) {
        std::__throw_bad_variant_access[abi:ne180100]();
      }
      long long v8 = *(_OWORD *)(v5 + 16);
      uint64_t v6 = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>(v4, &v8);
      if (v6)
      {
        long long v7 = *(_OWORD *)(v5 + 32);
        v6[51] = *(void *)(v5 + 48);
        *(_OWORD *)(v6 + 49) = v7;
        *(unsigned char *)(v3 + 568) = 1;
      }
      Phase::SortedCommandQueue<Phase::Controller::RenderGroupMgr,Phase::Controller::RenderGroupMgr::CommandType,std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::CommandBatch::Clear((void *)(v5 + 384));
      std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>,(std::__variant_detail::_Trait)1>::~__dtor(v5 + 16);
      BOOL result = MEMORY[0x223C938A0](v5, 0x1022C40083BFC85);
    }
    while (v2);
  }
  return result;
}

void Phase::SortedCommandQueue<Phase::Controller::RenderGroupMgr,Phase::Controller::RenderGroupMgr::CommandType,std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::Commit()
{
}

uint64_t Phase::SortedCommandQueue<Phase::Controller::RenderGroupMgr,Phase::Controller::RenderGroupMgr::CommandType,std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::ExecuteCommands(atomic_ullong *a1)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  memset(v4, 0, sizeof(v4));
  Phase::SortedCommandQueue<Phase::Controller::RenderGroupMgr,Phase::Controller::RenderGroupMgr::CommandType,std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::SortCommandList((uint64_t)a1, (unsigned int *)atomic_exchange(a1, 0), (uint64_t)v4);
  if (*(void *)&v4[0]) {
    std::terminate();
  }
  for (uint64_t i = 8; i != 80; i += 8)
    uint64_t result = (*(uint64_t (**)(atomic_ullong, void))(a1[2] + i))(a1[1], *(void *)((char *)v4 + i));
  return result;
}

void Phase::Controller::RenderGroupMgr::AddDiffTarget(Phase::Controller::RenderGroupMgr *this, Phase::Controller::RenderGroupMgr *a2)
{
  uint64_t v4 = (void *)*((void *)this + 66);
  unint64_t v5 = *((void *)this + 67);
  if ((unint64_t)v4 >= v5)
  {
    long long v7 = (void **)((char *)this + 520);
    uint64_t v8 = *((void *)this + 65);
    uint64_t v9 = ((uint64_t)v4 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61) {
      std::vector<Phase::Controller::RenderGroupMgr *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v5 - v8;
    uint64_t v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12) {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)this + 536, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[8 * v9];
    __int16 v15 = &v13[8 * v12];
    *(void *)uint64_t v14 = a2;
    uint64_t v6 = v14 + 8;
    unint64_t v16 = (char *)*((void *)this + 66);
    unint64_t v17 = (char *)*((void *)this + 65);
    if (v16 != v17)
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *((void *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      unint64_t v16 = (char *)*v7;
    }
    *((void *)this + 65) = v14;
    *((void *)this + 66) = v6;
    *((void *)this + 67) = v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    void *v4 = a2;
    uint64_t v6 = v4 + 1;
  }
  *((void *)this + 66) = v6;
}

void Phase::Controller::RenderGroupMgr::AddFullCopyTarget(Phase::Controller::RenderGroupMgr *this, Phase::Controller::RenderGroupMgr *a2)
{
  uint64_t v4 = (void *)*((void *)this + 69);
  unint64_t v5 = *((void *)this + 70);
  if ((unint64_t)v4 >= v5)
  {
    long long v7 = (void **)((char *)this + 544);
    uint64_t v8 = *((void *)this + 68);
    uint64_t v9 = ((uint64_t)v4 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61) {
      std::vector<Phase::Controller::RenderGroupMgr *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v5 - v8;
    uint64_t v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12) {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)this + 560, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[8 * v9];
    __int16 v15 = &v13[8 * v12];
    *(void *)uint64_t v14 = a2;
    uint64_t v6 = v14 + 8;
    unint64_t v16 = (char *)*((void *)this + 69);
    unint64_t v17 = (char *)*((void *)this + 68);
    if (v16 != v17)
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *((void *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      unint64_t v16 = (char *)*v7;
    }
    *((void *)this + 68) = v14;
    *((void *)this + 69) = v6;
    *((void *)this + 70) = v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    void *v4 = a2;
    uint64_t v6 = v4 + 1;
  }
  *((void *)this + 69) = v6;
}

void Phase::Controller::RenderGroupMgr::SendChanges(Phase::Controller::RenderGroupMgr *this)
{
  uint64_t v2 = (void *)((char *)this + 104);
  if (*((void *)this + 13))
  {
    if (*((void *)this + 66) != *((void *)this + 65))
    {
      uint64_t v5 = 0;
      Phase::SortedCommandQueue<Phase::Controller::RenderGroupMgr,Phase::Controller::RenderGroupMgr::CommandType,std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::CommandBatch::CopyTo(v2, &v5);
      Phase::SortedCommandQueue<Phase::Controller::RenderGroupMgr,Phase::Controller::RenderGroupMgr::CommandType,std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::Commit();
    }
    Phase::SortedCommandQueue<Phase::Controller::RenderGroupMgr,Phase::Controller::RenderGroupMgr::CommandType,std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::CommandBatch::Clear(v2);
  }
  if (*((unsigned char *)this + 568))
  {
    uint64_t v3 = *((void *)this + 68);
    if (*((void *)this + 69) != v3)
    {
      unint64_t v4 = 0;
      do
      {
        Phase::Controller::RenderGroupMgr::SendCopyTo(this, *(Phase::Controller::RenderGroupMgr **)(v3 + 8 * v4++));
        uint64_t v3 = *((void *)this + 68);
      }
      while (v4 < (*((void *)this + 69) - v3) >> 3);
    }
  }
  *((unsigned char *)this + 568) = 0;
}

void sub_2220444D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  Phase::SortedCommandQueue<Phase::Controller::RenderGroupMgr,Phase::Controller::RenderGroupMgr::CommandType,std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::CommandBatch::Clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *Phase::SortedCommandQueue<Phase::Controller::RenderGroupMgr,Phase::Controller::RenderGroupMgr::CommandType,std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::CommandBatch::CopyTo(void *result, void *a2)
{
  if (*result) {
    Phase::SortedCommandQueue<Phase::Controller::RenderGroupMgr,Phase::Controller::RenderGroupMgr::CommandType,std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::Command::Duplicate();
  }
  *a2 = *a2;
  return result;
}

void Phase::Controller::RenderGroupMgr::SendCopyTo(Phase::Controller::RenderGroupMgr *this, Phase::Controller::RenderGroupMgr *a2)
{
  uint64_t v3 = (unint64_t *)((char *)a2 + 512);
  unint64_t v4 = atomic_load((unint64_t *)a2 + 64);
  if ((Phase::Controller::RenderGroupMgr *)((char *)this + 136) != (Phase::Controller::RenderGroupMgr *)v4)
  {
    *(_DWORD *)(v4 + 32) = *((_DWORD *)this + 42);
    std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::RenderGroupObject>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::RenderGroupObject>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::RenderGroupObject>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::RenderGroupObject>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::RenderGroupObject>,void *> *>>((void *)v4, *((uint64_t **)this + 19), 0);
    *(_DWORD *)(v4 + 72) = *((_DWORD *)this + 52);
    std::__hash_table<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,void *> *>>((void *)(v4 + 40), *((void **)this + 24), 0);
    *(_DWORD *)(v4 + 112) = *((_DWORD *)this + 62);
    std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,void *> *>>((void *)(v4 + 80), *((uint64_t **)this + 29), 0);
  }
  unint64_t v6 = atomic_load(v3);
  atomic_store(atomic_exchange((atomic_ullong *volatile)a2 + 63, v6), v3);
  unint64_t v7 = atomic_load((unint64_t *)a2 + 63);
  atomic_exchange((atomic_ullong *volatile)a2 + 32, v7);
}

uint64_t Phase::Controller::RenderGroupMgr::LoadFreshData(atomic_ullong *this)
{
  unint64_t v2 = atomic_exchange(this + 32, 0);
  if (v2)
  {
    uint64_t v3 = this + 17;
    if (this + 17 != (atomic_ullong *)v2)
    {
      *((_DWORD *)this + 42) = *(_DWORD *)(v2 + 32);
      std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::RenderGroupObject>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::RenderGroupObject>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::RenderGroupObject>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::RenderGroupObject>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::RenderGroupObject>,void *> *>>(v3, *(uint64_t **)(v2 + 16), 0);
      *((_DWORD *)this + 52) = *(_DWORD *)(v2 + 72);
      std::__hash_table<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,void *> *>>(this + 22, *(void **)(v2 + 56), 0);
      *((_DWORD *)this + 62) = *(_DWORD *)(v2 + 112);
      std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,void *> *>>(this + 27, *(uint64_t **)(v2 + 96), 0);
    }
    char v4 = 1;
  }
  else
  {
    char v4 = 0;
  }
  *((unsigned char *)this + 568) = v4;

  return Phase::SortedCommandQueue<Phase::Controller::RenderGroupMgr,Phase::Controller::RenderGroupMgr::CommandType,std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::ExecuteCommands(this + 10);
}

void *Phase::Controller::RenderGroupMgr::Reset(atomic_ullong *this)
{
  Phase::SortedCommandQueue<Phase::Controller::RenderGroupMgr,Phase::Controller::RenderGroupMgr::CommandType,std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::ClearCommands(this + 10);
  Phase::Controller::RenderGroupMgr::LoadFreshData(this);
  std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear(this + 17);
  std::__hash_table<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>>>::clear((uint64_t)(this + 22));
  std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear(this + 27);
  std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear(this + 33);
  std::__hash_table<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>>>::clear((uint64_t)(this + 38));
  std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear(this + 43);
  std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear(this + 48);
  std::__hash_table<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>>>::clear((uint64_t)(this + 53));
  std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear(this + 58);

  return Phase::SortedCommandQueue<Phase::Controller::RenderGroupMgr,Phase::Controller::RenderGroupMgr::CommandType,std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::CommandBatch::Clear(this + 13);
}

atomic_ullong *Phase::SortedCommandQueue<Phase::Controller::RenderGroupMgr,Phase::Controller::RenderGroupMgr::CommandType,std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::ClearCommands(atomic_ullong *result)
{
  unint64_t v1 = atomic_exchange(result, 0);
  if (v1)
  {
    do
    {
      unint64_t v2 = *(void *)(v1 + 392);
      Phase::SortedCommandQueue<Phase::Controller::RenderGroupMgr,Phase::Controller::RenderGroupMgr::CommandType,std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::CommandBatch::Clear((void *)(v1 + 384));
      std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>,(std::__variant_detail::_Trait)1>::~__dtor(v1 + 16);
      uint64_t result = (atomic_ullong *)MEMORY[0x223C938A0](v1, 0x1022C40083BFC85);
      unint64_t v1 = v2;
    }
    while (v2);
  }
  return result;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>>>::__emplace_unique_key_args<unsigned long long,unsigned long long &,std::shared_ptr<Phase::Controller::Renderer> &>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v5 = a2;
      if (v11 <= a2) {
        unint64_t v5 = a2 % v11;
      }
    }
    else
    {
      unint64_t v5 = (v11 - 1) & a2;
    }
    uint64_t v13 = *(void **)(*(void *)a1 + 8 * v5);
    if (v13)
    {
      for (uint64_t i = (void *)*v13; i; uint64_t i = (void *)*i)
      {
        unint64_t v15 = i[1];
        if (v15 == a2)
        {
          if (i[2] == a2) {
            return;
          }
        }
        else
        {
          if (v12.u32[0] > 1uLL)
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
          }
          else
          {
            v15 &= v11 - 1;
          }
          if (v15 != v5) {
            break;
          }
        }
      }
    }
  }
  unint64_t v16 = operator new(0x28uLL);
  void *v16 = 0;
  v16[1] = a2;
  v16[2] = a3;
  v16[3] = a4;
  v16[4] = a5;
  if (a5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a5 + 16), 1uLL, memory_order_relaxed);
  }
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v11 <= a2) {
        unint64_t v5 = a2 % v11;
      }
      else {
        unint64_t v5 = a2;
      }
    }
    else
    {
      unint64_t v5 = (v11 - 1) & a2;
    }
  }
  uint64_t v23 = *(void *)a1;
  float v24 = *(void **)(*(void *)a1 + 8 * v5);
  if (v24)
  {
    void *v16 = *v24;
LABEL_40:
    void *v24 = v16;
    goto LABEL_41;
  }
  void *v16 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v16;
  *(void *)(v23 + 8 * v5) = a1 + 16;
  if (*v16)
  {
    unint64_t v25 = *(void *)(*v16 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v25 >= v11) {
        v25 %= v11;
      }
    }
    else
    {
      v25 &= v11 - 1;
    }
    float v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_40;
  }
LABEL_41:
  ++*(void *)(a1 + 24);
}

void sub_222044980(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,void *>>>::operator()[abi:ne180100](char a1, void *__p)
{
  if (a1)
  {
    uint64_t v3 = (std::__shared_weak_count *)__p[4];
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void std::__hash_table<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>>>::__erase_unique<unsigned long long>(void *a1, unint64_t a2)
{
  uint64_t v3 = std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::find<PHASETapType>(a1, a2);
  if (!v3) {
    return;
  }
  char v4 = v3;
  int8x8_t v5 = (int8x8_t)a1[1];
  uint64_t v6 = *v3;
  unint64_t v7 = v3[1];
  uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] > 1uLL)
  {
    if (v7 >= *(void *)&v5) {
      v7 %= *(void *)&v5;
    }
  }
  else
  {
    v7 &= *(void *)&v5 - 1;
  }
  uint64_t v9 = *(uint64_t **)(*a1 + 8 * v7);
  do
  {
    uint64_t v10 = v9;
    uint64_t v9 = (uint64_t *)*v9;
  }
  while (v9 != v3);
  if (v10 == a1 + 2) {
    goto LABEL_20;
  }
  unint64_t v11 = v10[1];
  if (v8.u32[0] > 1uLL)
  {
    if (v11 >= *(void *)&v5) {
      v11 %= *(void *)&v5;
    }
  }
  else
  {
    v11 &= *(void *)&v5 - 1;
  }
  if (v11 != v7)
  {
LABEL_20:
    if (v6)
    {
      unint64_t v12 = *(void *)(v6 + 8);
      if (v8.u32[0] > 1uLL)
      {
        unint64_t v13 = *(void *)(v6 + 8);
        if (v12 >= *(void *)&v5) {
          unint64_t v13 = v12 % *(void *)&v5;
        }
      }
      else
      {
        unint64_t v13 = v12 & (*(void *)&v5 - 1);
      }
      if (v13 == v7) {
        goto LABEL_24;
      }
    }
    *(void *)(*a1 + 8 * v7) = 0;
    uint64_t v6 = *v3;
  }
  if (v6)
  {
    unint64_t v12 = *(void *)(v6 + 8);
LABEL_24:
    if (v8.u32[0] > 1uLL)
    {
      if (v12 >= *(void *)&v5) {
        v12 %= *(void *)&v5;
      }
    }
    else
    {
      v12 &= *(void *)&v5 - 1;
    }
    if (v12 != v7)
    {
      *(void *)(*a1 + 8 * v12) = v10;
      uint64_t v6 = *v3;
    }
  }
  *uint64_t v10 = v6;
  *uint64_t v3 = 0;
  --a1[3];
  uint64_t v14 = (std::__shared_weak_count *)v3[4];
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }

  operator delete(v4);
}

void std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::RenderGroupObject>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::RenderGroupObject>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::RenderGroupObject>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::RenderGroupObject>>>::erase(void *a1, uint64_t *__p)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  uint64_t v3 = *__p;
  unint64_t v4 = __p[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v2);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v2) {
      v4 %= *(void *)&v2;
    }
  }
  else
  {
    v4 &= *(void *)&v2 - 1;
  }
  uint64_t v6 = *(uint64_t **)(*a1 + 8 * v4);
  do
  {
    unint64_t v7 = v6;
    uint64_t v6 = (uint64_t *)*v6;
  }
  while (v6 != __p);
  if (v7 != a1 + 2)
  {
    unint64_t v8 = v7[1];
    if (v5.u32[0] > 1uLL)
    {
      if (v8 >= *(void *)&v2) {
        v8 %= *(void *)&v2;
      }
    }
    else
    {
      v8 &= *(void *)&v2 - 1;
    }
    if (v8 == v4)
    {
LABEL_20:
      if (!v3) {
        goto LABEL_27;
      }
      goto LABEL_21;
    }
  }
  if (!v3) {
    goto LABEL_19;
  }
  unint64_t v9 = *(void *)(v3 + 8);
  if (v5.u32[0] > 1uLL)
  {
    if (v9 >= *(void *)&v2) {
      v9 %= *(void *)&v2;
    }
  }
  else
  {
    v9 &= *(void *)&v2 - 1;
  }
  if (v9 != v4)
  {
LABEL_19:
    *(void *)(*a1 + 8 * v4) = 0;
    uint64_t v3 = *__p;
    goto LABEL_20;
  }
LABEL_21:
  unint64_t v10 = *(void *)(v3 + 8);
  if (v5.u32[0] > 1uLL)
  {
    if (v10 >= *(void *)&v2) {
      v10 %= *(void *)&v2;
    }
  }
  else
  {
    v10 &= *(void *)&v2 - 1;
  }
  if (v10 != v4)
  {
    *(void *)(*a1 + 8 * v10) = v7;
    uint64_t v3 = *__p;
  }
LABEL_27:
  uint64_t *v7 = v3;
  *long long __p = 0;
  --a1[3];
  operator delete(__p);
}

void *std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>>>::__emplace_unique_key_args<Phase::UniqueObjectId,Phase::UniqueObjectId&,Phase::Controller::SubmixParams>(float *a1, void *a2, _OWORD *a3, long long *a4)
{
  uint64_t v8 = 0;
  unint64_t v9 = 0xCBF29CE484222325;
  do
    unint64_t v9 = 0x100000001B3 * (v9 ^ *((char *)a2 + v8++));
  while (v8 != 16);
  unint64_t v10 = *((void *)a1 + 1);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
    unint64_t v12 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      unint64_t v13 = *v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == *a2 && v13[3] == a2[1]) {
              return v13;
            }
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10) {
                v14 %= v10;
              }
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v4) {
              break;
            }
          }
          unint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
  unint64_t v13 = operator new(0x30uLL);
  void *v13 = 0;
  v13[1] = v9;
  long long v16 = *a4;
  *((_OWORD *)v13 + 1) = *a3;
  *((_OWORD *)v13 + 2) = v16;
  float v17 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v18 = a1[8];
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    BOOL v19 = 1;
    if (v10 >= 3) {
      BOOL v19 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v10);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      int8x8_t prime = (int8x8_t)v21;
    }
    else {
      int8x8_t prime = (int8x8_t)v20;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v10 = *((void *)a1 + 1);
    }
    if (*(void *)&prime > v10) {
      goto LABEL_36;
    }
    if (*(void *)&prime < v10)
    {
      unint64_t v29 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v10 < 3 || (uint8x8_t v30 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        unint64_t v29 = std::__next_prime(v29);
      }
      else
      {
        uint64_t v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2) {
          unint64_t v29 = v31;
        }
      }
      if (*(void *)&prime <= v29) {
        int8x8_t prime = (int8x8_t)v29;
      }
      if (*(void *)&prime >= v10)
      {
        unint64_t v10 = *((void *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_36:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v23 = operator new(8 * *(void *)&prime);
          float v24 = *(void **)a1;
          *(void *)a1 = v23;
          if (v24) {
            operator delete(v24);
          }
          uint64_t v25 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v25++) = 0;
          while (*(void *)&prime != v25);
          BOOL v26 = (void *)*((void *)a1 + 2);
          if (v26)
          {
            unint64_t v27 = v26[1];
            uint8x8_t v28 = (uint8x8_t)vcnt_s8(prime);
            v28.i16[0] = vaddlv_u8(v28);
            if (v28.u32[0] > 1uLL)
            {
              if (v27 >= *(void *)&prime) {
                v27 %= *(void *)&prime;
              }
            }
            else
            {
              v27 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v27) = a1 + 4;
            unint64_t v32 = (void *)*v26;
            if (*v26)
            {
              do
              {
                unint64_t v33 = v32[1];
                if (v28.u32[0] > 1uLL)
                {
                  if (v33 >= *(void *)&prime) {
                    v33 %= *(void *)&prime;
                  }
                }
                else
                {
                  v33 &= *(void *)&prime - 1;
                }
                if (v33 != v27)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v33))
                  {
                    *(void *)(*(void *)a1 + 8 * v33) = v26;
                    goto LABEL_61;
                  }
                  void *v26 = *v32;
                  *unint64_t v32 = **(void **)(*(void *)a1 + 8 * v33);
                  **(void **)(*(void *)a1 + 8 * v33) = v32;
                  unint64_t v32 = v26;
                }
                unint64_t v33 = v27;
LABEL_61:
                BOOL v26 = v32;
                unint64_t v32 = (void *)*v32;
                unint64_t v27 = v33;
              }
              while (v32);
            }
          }
          unint64_t v10 = (unint64_t)prime;
          goto LABEL_65;
        }
        unint64_t v38 = *(void **)a1;
        *(void *)a1 = 0;
        if (v38) {
          operator delete(v38);
        }
        unint64_t v10 = 0;
        *((void *)a1 + 1) = 0;
      }
    }
LABEL_65:
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  uint8x8_t v34 = *(void **)a1;
  unint64_t v35 = *(void **)(*(void *)a1 + 8 * v4);
  if (v35)
  {
    void *v13 = *v35;
LABEL_78:
    *unint64_t v35 = v13;
    goto LABEL_79;
  }
  void *v13 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v13;
  v34[v4] = a1 + 4;
  if (*v13)
  {
    unint64_t v36 = *(void *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v36 >= v10) {
        v36 %= v10;
      }
    }
    else
    {
      v36 &= v10 - 1;
    }
    unint64_t v35 = (void *)(*(void *)a1 + 8 * v36);
    goto LABEL_78;
  }
LABEL_79:
  ++*((void *)a1 + 3);
  return v13;
}

void sub_2220450C4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::RenderGroupObject>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::RenderGroupObject>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::RenderGroupObject>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::RenderGroupObject>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::RenderGroupObject>,void *> *>>(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a1[1];
  if (!v6) {
    goto LABEL_7;
  }
  for (uint64_t i = 0; i != v6; ++i)
    *(void *)(*a1 + 8 * i) = 0;
  uint64_t v8 = (uint64_t *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      *((_OWORD *)v8 + 1) = *((_OWORD *)a2 + 1);
      v8[4] = a2[4];
      long long v9 = *((_OWORD *)a2 + 3);
      v8[8] = a2[8];
      *((_OWORD *)v8 + 3) = v9;
      *((_DWORD *)v8 + 18) = *((_DWORD *)a2 + 18);
      *((_DWORD *)v8 + 19) = *((_DWORD *)a2 + 19);
      *((_DWORD *)v8 + 20) = *((_DWORD *)a2 + 20);
      *((_DWORD *)v8 + 21) = *((_DWORD *)a2 + 21);
      *((_DWORD *)v8 + 22) = *((_DWORD *)a2 + 22);
      *((_DWORD *)v8 + 23) = *((_DWORD *)a2 + 23);
      *((_DWORD *)v8 + 24) = *((_DWORD *)a2 + 24);
      *((_DWORD *)v8 + 25) = *((_DWORD *)a2 + 25);
      memcpy(v8 + 13, a2 + 13, 0x109uLL);
      long long v10 = *((_OWORD *)a2 + 25);
      *((_OWORD *)v8 + 24) = *((_OWORD *)a2 + 24);
      *((_OWORD *)v8 + 25) = v10;
      uint8x8_t v11 = (uint64_t *)*v8;
      std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>>>::__node_insert_multi((uint64_t)a1, v8);
      a2 = (uint64_t *)*a2;
      uint64_t v8 = v11;
      if (!v11) {
        goto LABEL_7;
      }
    }
    do
    {
      float v17 = (uint64_t *)*v8;
      operator delete(v8);
      uint64_t v8 = v17;
    }
    while (v17);
  }
  else
  {
LABEL_7:
    while (a2 != a3)
    {
      unint64_t v12 = operator new(0x1A0uLL);
      *(void *)unint64_t v12 = 0;
      v12[1] = *((_OWORD *)a2 + 1);
      *((void *)v12 + 4) = a2[4];
      long long v13 = *((_OWORD *)a2 + 3);
      *((void *)v12 + 8) = a2[8];
      v12[3] = v13;
      *((_DWORD *)v12 + 18) = *((_DWORD *)a2 + 18);
      *((_DWORD *)v12 + 19) = *((_DWORD *)a2 + 19);
      *((_DWORD *)v12 + 20) = *((_DWORD *)a2 + 20);
      *((_DWORD *)v12 + 21) = *((_DWORD *)a2 + 21);
      *((_DWORD *)v12 + 22) = *((_DWORD *)a2 + 22);
      *((_DWORD *)v12 + 23) = *((_DWORD *)a2 + 23);
      *((_DWORD *)v12 + 24) = *((_DWORD *)a2 + 24);
      *((_DWORD *)v12 + 25) = *((_DWORD *)a2 + 25);
      memcpy((char *)v12 + 104, a2 + 13, 0x109uLL);
      long long v14 = *((_OWORD *)a2 + 25);
      v12[24] = *((_OWORD *)a2 + 24);
      v12[25] = v14;
      uint64_t v15 = 0xCBF29CE484222325;
      for (uint64_t j = 16; j != 32; ++j)
        uint64_t v15 = 0x100000001B3 * (v15 ^ *((char *)v12 + j));
      *((void *)v12 + 1) = v15;
      std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>>>::__node_insert_multi((uint64_t)a1, v12);
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_2220452D0(void *a1)
{
  __cxa_begin_catch(a1);
  do
  {
    int8x8_t v2 = (void *)*v1;
    operator delete(v1);
    unint64_t v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_2220452F0(_Unwind_Exception *a1)
{
}

void std::__hash_table<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,void *> *>>(void *a1, void *a2, void *a3)
{
  unint64_t v4 = a2;
  uint64_t v6 = a1[1];
  if (v6)
  {
    for (uint64_t i = 0; i != v6; ++i)
      *(void *)(*a1 + 8 * i) = 0;
    uint64_t v8 = (void *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8) {
      BOOL v9 = a2 == a3;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9)
    {
      long long v10 = v8;
    }
    else
    {
      do
      {
        uint64_t v11 = v4[3];
        v8[2] = v4[2];
        uint64_t v12 = v4[4];
        if (v12) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 16), 1uLL, memory_order_relaxed);
        }
        long long v13 = (std::__shared_weak_count *)v8[4];
        v8[3] = v11;
        v8[4] = v12;
        if (v13) {
          std::__shared_weak_count::__release_weak(v13);
        }
        long long v10 = (void *)*v8;
        unint64_t v14 = v8[2];
        v8[1] = v14;
        inserted = std::__hash_table<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>>>::__node_insert_multi_prepare((uint64_t)a1, v14, v8 + 2);
        std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::__node_insert_multi_perform(a1, v8, inserted);
        unint64_t v4 = (void *)*v4;
        if (!v10) {
          break;
        }
        uint64_t v8 = v10;
      }
      while (v4 != a3);
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>>>::__deallocate_node((int)a1, v10);
  }
  for (; v4 != a3; unint64_t v4 = (void *)*v4)
  {
    long long v16 = operator new(0x28uLL);
    float v17 = v16;
    void *v16 = 0;
    v16[1] = 0;
    unint64_t v18 = v4[2];
    uint64_t v19 = v4[3];
    v16[2] = v18;
    uint64_t v20 = v4[4];
    v16[3] = v19;
    v16[4] = v20;
    if (v20) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 16), 1uLL, memory_order_relaxed);
    }
    v16[1] = v18;
    unint64_t v21 = std::__hash_table<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>>>::__node_insert_multi_prepare((uint64_t)a1, v18, v16 + 2);
    std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::__node_insert_multi_perform(a1, v17, v21);
  }
}

void sub_22204546C(void *a1)
{
  __cxa_begin_catch(a1);
  std::__hash_table<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>>>::__deallocate_node(v1, v2);
  __cxa_rethrow();
}

void sub_222045484(_Unwind_Exception *a1)
{
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  float v7 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    BOOL v9 = 1;
    if (v6 >= 3) {
      BOOL v9 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v10 = v9 | (2 * v6);
    unint64_t v11 = vcvtps_u32_f32(v7 / v8);
    if (v10 <= v11) {
      int8x8_t prime = (int8x8_t)v11;
    }
    else {
      int8x8_t prime = (int8x8_t)v10;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v6 = *(void *)(a1 + 8);
    }
    if (*(void *)&prime > v6) {
      goto LABEL_74;
    }
    if (*(void *)&prime >= v6) {
      goto LABEL_43;
    }
    unint64_t v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v6 < 3 || (uint8x8_t v20 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
    {
      unint64_t v19 = std::__next_prime(v19);
    }
    else
    {
      uint64_t v21 = 1 << -(char)__clz(v19 - 1);
      if (v19 >= 2) {
        unint64_t v19 = v21;
      }
    }
    if (*(void *)&prime <= v19) {
      int8x8_t prime = (int8x8_t)v19;
    }
    if (*(void *)&prime >= v6)
    {
      unint64_t v6 = *(void *)(a1 + 8);
      goto LABEL_43;
    }
    if (prime)
    {
LABEL_74:
      if (*(void *)&prime >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      long long v13 = operator new(8 * *(void *)&prime);
      unint64_t v14 = *(void **)a1;
      *(void *)a1 = v13;
      if (v14) {
        operator delete(v14);
      }
      uint64_t v15 = 0;
      *(int8x8_t *)(a1 + 8) = prime;
      do
        *(void *)(*(void *)a1 + 8 * v15++) = 0;
      while (*(void *)&prime != v15);
      long long v16 = *(void **)(a1 + 16);
      if (v16)
      {
        unint64_t v17 = v16[1];
        uint8x8_t v18 = (uint8x8_t)vcnt_s8(prime);
        v18.i16[0] = vaddlv_u8(v18);
        if (v18.u32[0] > 1uLL)
        {
          if (v17 >= *(void *)&prime) {
            v17 %= *(void *)&prime;
          }
        }
        else
        {
          v17 &= *(void *)&prime - 1;
        }
        *(void *)(*(void *)a1 + 8 * v17) = a1 + 16;
        for (uint64_t i = (void *)*v16; *v16; uint64_t i = (void *)*v16)
        {
          unint64_t v23 = i[1];
          if (v18.u32[0] > 1uLL)
          {
            if (v23 >= *(void *)&prime) {
              v23 %= *(void *)&prime;
            }
          }
          else
          {
            v23 &= *(void *)&prime - 1;
          }
          if (v23 == v17)
          {
            long long v16 = i;
          }
          else
          {
            float v24 = i;
            if (*(void *)(*(void *)a1 + 8 * v23))
            {
              do
              {
                uint64_t v25 = v24;
                float v24 = (void *)*v24;
              }
              while (v24 && i[2] == v24[2]);
              void *v16 = v24;
              void *v25 = **(void **)(*(void *)a1 + 8 * v23);
              **(void **)(*(void *)a1 + 8 * v23) = i;
            }
            else
            {
              *(void *)(*(void *)a1 + 8 * v23) = v16;
              long long v16 = i;
              unint64_t v17 = v23;
            }
          }
        }
      }
      unint64_t v6 = (unint64_t)prime;
    }
    else
    {
      unint64_t v35 = *(void **)a1;
      *(void *)a1 = 0;
      if (v35) {
        operator delete(v35);
      }
      unint64_t v6 = 0;
      *(void *)(a1 + 8) = 0;
    }
  }
LABEL_43:
  uint8x8_t v26 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v26.i16[0] = vaddlv_u8(v26);
  if (v26.u32[0] > 1uLL)
  {
    unint64_t v27 = a2;
    if (v6 <= a2) {
      unint64_t v27 = a2 % v6;
    }
  }
  else
  {
    unint64_t v27 = (v6 - 1) & a2;
  }
  uint8x8_t v28 = *(void **)(*(void *)a1 + 8 * v27);
  if (!v28) {
    return 0;
  }
  int v29 = 0;
  do
  {
    uint64_t result = v28;
    uint8x8_t v28 = (void *)*v28;
    if (!v28) {
      break;
    }
    unint64_t v31 = v28[1];
    if (v26.u32[0] > 1uLL)
    {
      unint64_t v32 = v28[1];
      if (v31 >= v6) {
        unint64_t v32 = v31 % v6;
      }
    }
    else
    {
      unint64_t v32 = v31 & (v6 - 1);
    }
    if (v32 != v27) {
      break;
    }
    BOOL v33 = v31 == a2 && v28[2] == *a3;
    int v34 = v29 & !v33;
    v29 |= v33;
  }
  while (v34 != 1);
  return result;
}

void std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,void *> *>>(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a1[1];
  if (!v6) {
    goto LABEL_9;
  }
  for (uint64_t i = 0; i != v6; *(void *)(*a1 + 8 * i++) = 0)
    ;
  float v8 = (uint64_t *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      *((_OWORD *)v8 + 1) = *((_OWORD *)a2 + 1);
      *((_OWORD *)v8 + 2) = *((_OWORD *)a2 + 2);
      BOOL v9 = (uint64_t *)*v8;
      std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>>>::__node_insert_multi(a1, v8);
      a2 = (uint64_t *)*a2;
      float v8 = v9;
      if (!v9) {
        goto LABEL_9;
      }
    }
    do
    {
      unint64_t v10 = (uint64_t *)*v8;
      operator delete(v8);
      float v8 = v10;
    }
    while (v10);
  }
  else
  {
LABEL_9:
    while (a2 != a3)
    {
      std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>>>::__emplace_multi<std::pair<Phase::UniqueObjectId const,Phase::Controller::SubmixParams> const&>(a1, (_OWORD *)a2 + 1);
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_2220458C8(void *a1)
{
  __cxa_begin_catch(a1);
  do
  {
    int8x8_t v2 = (void *)*v1;
    operator delete(v1);
    int v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_2220458E8(_Unwind_Exception *a1)
{
}

void *std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>>>::__node_insert_multi(void *a1, void *a2)
{
  unint64_t v4 = a2 + 2;
  unint64_t v5 = 0xCBF29CE484222325;
  for (uint64_t i = 16; i != 32; ++i)
    unint64_t v5 = 0x100000001B3 * (v5 ^ *((char *)a2 + i));
  a2[1] = v5;
  inserted = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>>>::__node_insert_multi_prepare((uint64_t)a1, v5, v4);
  std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::__node_insert_multi_perform(a1, a2, inserted);
  return a2;
}

void *std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  float v7 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    BOOL v9 = 1;
    if (v6 >= 3) {
      BOOL v9 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v10 = v9 | (2 * v6);
    unint64_t v11 = vcvtps_u32_f32(v7 / v8);
    if (v10 <= v11) {
      int8x8_t prime = (int8x8_t)v11;
    }
    else {
      int8x8_t prime = (int8x8_t)v10;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v6 = *(void *)(a1 + 8);
    }
    if (*(void *)&prime > v6) {
      goto LABEL_82;
    }
    if (*(void *)&prime >= v6) {
      goto LABEL_46;
    }
    unint64_t v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v6 < 3 || (uint8x8_t v20 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
    {
      unint64_t v19 = std::__next_prime(v19);
    }
    else
    {
      uint64_t v21 = 1 << -(char)__clz(v19 - 1);
      if (v19 >= 2) {
        unint64_t v19 = v21;
      }
    }
    if (*(void *)&prime <= v19) {
      int8x8_t prime = (int8x8_t)v19;
    }
    if (*(void *)&prime >= v6)
    {
      unint64_t v6 = *(void *)(a1 + 8);
      goto LABEL_46;
    }
    if (prime)
    {
LABEL_82:
      if (*(void *)&prime >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      long long v13 = operator new(8 * *(void *)&prime);
      unint64_t v14 = *(void **)a1;
      *(void *)a1 = v13;
      if (v14) {
        operator delete(v14);
      }
      uint64_t v15 = 0;
      *(int8x8_t *)(a1 + 8) = prime;
      do
        *(void *)(*(void *)a1 + 8 * v15++) = 0;
      while (*(void *)&prime != v15);
      long long v16 = *(void **)(a1 + 16);
      if (v16)
      {
        unint64_t v17 = v16[1];
        uint8x8_t v18 = (uint8x8_t)vcnt_s8(prime);
        v18.i16[0] = vaddlv_u8(v18);
        if (v18.u32[0] > 1uLL)
        {
          if (v17 >= *(void *)&prime) {
            v17 %= *(void *)&prime;
          }
        }
        else
        {
          v17 &= *(void *)&prime - 1;
        }
        *(void *)(*(void *)a1 + 8 * v17) = a1 + 16;
        for (uint64_t i = (void *)*v16; *v16; uint64_t i = (void *)*v16)
        {
          unint64_t v23 = i[1];
          if (v18.u32[0] > 1uLL)
          {
            if (v23 >= *(void *)&prime) {
              v23 %= *(void *)&prime;
            }
          }
          else
          {
            v23 &= *(void *)&prime - 1;
          }
          if (v23 == v17)
          {
            long long v16 = i;
          }
          else
          {
            float v24 = i;
            if (*(void *)(*(void *)a1 + 8 * v23))
            {
              do
              {
                uint64_t v25 = v24;
                float v24 = (void *)*v24;
                if (!v24) {
                  break;
                }
              }
              while (i[2] == v24[2] && i[3] == v24[3]);
              void *v16 = v24;
              void *v25 = **(void **)(*(void *)a1 + 8 * v23);
              **(void **)(*(void *)a1 + 8 * v23) = i;
            }
            else
            {
              *(void *)(*(void *)a1 + 8 * v23) = v16;
              long long v16 = i;
              unint64_t v17 = v23;
            }
          }
        }
      }
      unint64_t v6 = (unint64_t)prime;
    }
    else
    {
      uint64_t v37 = *(void **)a1;
      *(void *)a1 = 0;
      if (v37) {
        operator delete(v37);
      }
      unint64_t v6 = 0;
      *(void *)(a1 + 8) = 0;
    }
  }
LABEL_46:
  uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v27.i16[0] = vaddlv_u8(v27);
  if (v27.u32[0] > 1uLL)
  {
    unint64_t v28 = a2;
    if (v6 <= a2) {
      unint64_t v28 = a2 % v6;
    }
  }
  else
  {
    unint64_t v28 = (v6 - 1) & a2;
  }
  int v29 = *(void **)(*(void *)a1 + 8 * v28);
  if (!v29) {
    return 0;
  }
  int v30 = 0;
  do
  {
    uint64_t result = v29;
    int v29 = (void *)*v29;
    if (!v29) {
      break;
    }
    unint64_t v32 = v29[1];
    if (v27.u32[0] > 1uLL)
    {
      unint64_t v33 = v29[1];
      if (v32 >= v6) {
        unint64_t v33 = v32 % v6;
      }
    }
    else
    {
      unint64_t v33 = v32 & (v6 - 1);
    }
    if (v33 != v28) {
      break;
    }
    if (v32 == a2)
    {
      BOOL v34 = v29[2] == *a3 && v29[3] == a3[1];
      BOOL v35 = v34;
    }
    else
    {
      BOOL v35 = 0;
    }
    int v36 = v30 & !v35;
    v30 |= v35;
  }
  while (v36 != 1);
  return result;
}

void *std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>>>::__emplace_multi<std::pair<Phase::UniqueObjectId const,Phase::Controller::SubmixParams> const&>(void *a1, _OWORD *a2)
{
  unint64_t v4 = operator new(0x30uLL);
  *(void *)unint64_t v4 = 0;
  long long v5 = a2[1];
  v4[1] = *a2;
  v4[2] = v5;
  uint64_t v6 = 0xCBF29CE484222325;
  for (uint64_t i = 16; i != 32; ++i)
    uint64_t v6 = 0x100000001B3 * (v6 ^ *((char *)v4 + i));
  *((void *)v4 + 1) = v6;
  return std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::Controller::SubmixParams>>>::__node_insert_multi(a1, v4);
}

void sub_222045D58(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::__assign_alt[abi:ne180100]<4ul,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 352) == 4)
  {
    long long v5 = *(_OWORD *)a3;
    *(void *)(a2 + 16) = *(void *)(a3 + 16);
    *(_OWORD *)a2 = v5;
    *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
    *(_DWORD *)(a2 + 28) = *(_DWORD *)(a3 + 28);
    *(_DWORD *)(a2 + 32) = *(_DWORD *)(a3 + 32);
    *(_DWORD *)(a2 + 36) = *(_DWORD *)(a3 + 36);
    *(_DWORD *)(a2 + 40) = *(_DWORD *)(a3 + 40);
    *(_DWORD *)(a2 + 44) = *(_DWORD *)(a3 + 44);
    *(_DWORD *)(a2 + 48) = *(_DWORD *)(a3 + 48);
    *(_DWORD *)(a2 + 52) = *(_DWORD *)(a3 + 52);
    uint64_t result = memcpy((void *)(a2 + 56), (const void *)(a3 + 56), 0x109uLL);
    *(unsigned char *)(a2 + 336) = *(unsigned char *)(a3 + 336);
  }
  else
  {
    return (void *)std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::__emplace[abi:ne180100]<4ul,std::pair<Phase::SpatialModeler::RenderGroup,BOOL> const&>(a1, (long long *)a3);
  }
  return result;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::__emplace[abi:ne180100]<4ul,std::pair<Phase::SpatialModeler::RenderGroup,BOOL> const&>(uint64_t a1, long long *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 352);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8ne180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEyN5Phase14UniqueObjectIdENS_4pairINS7_14SpatialModeler11RenderGroupENS_8weak_ptrINS7_10Controller8RendererEEEEENS9_ISB_bEENS9_IS8_dEENS9_IS8_yEENS9_IySF_EENS9_IS8_NSA_18PointSourceHistoryEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRSP_EEEDcOSQ_DpOT0____fmatrix_0[v4])(&v7, a1);
  }
  *(_DWORD *)(a1 + 352) = -1;
  long long v5 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v5;
  *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
  *(_DWORD *)(a1 + 28) = *((_DWORD *)a2 + 7);
  *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 8);
  *(_DWORD *)(a1 + 36) = *((_DWORD *)a2 + 9);
  *(_DWORD *)(a1 + 40) = *((_DWORD *)a2 + 10);
  *(_DWORD *)(a1 + 44) = *((_DWORD *)a2 + 11);
  *(_DWORD *)(a1 + 48) = *((_DWORD *)a2 + 12);
  *(_DWORD *)(a1 + 52) = *((_DWORD *)a2 + 13);
  memcpy((void *)(a1 + 56), (char *)a2 + 56, 0x109uLL);
  *(unsigned char *)(a1 + 336) = *((unsigned char *)a2 + 336);
  *(_DWORD *)(a1 + 352) = 4;
  return a1;
}

uint64_t std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>::operator=[abi:ne180100]<Phase::UniqueObjectId const&,0,Phase::UniqueObjectId,2ul,0>(uint64_t a1, _OWORD *a2)
{
  if (*(_DWORD *)(a1 + 352) == 2) {
    *(_OWORD *)a1 = *a2;
  }
  else {
    std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::__emplace[abi:ne180100]<2ul,Phase::UniqueObjectId const&>(a1, a2);
  }
  return a1;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::__emplace[abi:ne180100]<2ul,Phase::UniqueObjectId const&>(uint64_t a1, _OWORD *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 352);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8ne180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEyN5Phase14UniqueObjectIdENS_4pairINS7_14SpatialModeler11RenderGroupENS_8weak_ptrINS7_10Controller8RendererEEEEENS9_ISB_bEENS9_IS8_dEENS9_IS8_yEENS9_IySF_EENS9_IS8_NSA_18PointSourceHistoryEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRSP_EEEDcOSQ_DpOT0____fmatrix_0[v4])(&v6, a1);
  }
  *(_DWORD *)(a1 + 352) = -1;
  *(_OWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 352) = 2;
  return a1;
}

uint64_t std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>::operator=[abi:ne180100]<std::pair<Phase::UniqueObjectId,unsigned long long> const&,0,std::pair<Phase::UniqueObjectId,unsigned long long>,6ul,0>(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 352) == 6)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
  }
  else
  {
    std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::__emplace[abi:ne180100]<6ul,std::pair<Phase::UniqueObjectId,unsigned long long> const&>(a1, (long long *)a2);
  }
  return a1;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::__emplace[abi:ne180100]<6ul,std::pair<Phase::UniqueObjectId,unsigned long long> const&>(uint64_t a1, long long *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 352);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8ne180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEyN5Phase14UniqueObjectIdENS_4pairINS7_14SpatialModeler11RenderGroupENS_8weak_ptrINS7_10Controller8RendererEEEEENS9_ISB_bEENS9_IS8_dEENS9_IS8_yEENS9_IySF_EENS9_IS8_NSA_18PointSourceHistoryEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRSP_EEEDcOSQ_DpOT0____fmatrix_0[v4])(&v7, a1);
  }
  *(_DWORD *)(a1 + 352) = -1;
  long long v5 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v5;
  *(_DWORD *)(a1 + 352) = 6;
  return a1;
}

uint64_t std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>::operator=[abi:ne180100]<std::pair<Phase::UniqueObjectId,double> const&,0,std::pair<Phase::UniqueObjectId,double>,5ul,0>(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 352) == 5)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
  }
  else
  {
    std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::__emplace[abi:ne180100]<5ul,std::pair<Phase::UniqueObjectId,double> const&>(a1, (long long *)a2);
  }
  return a1;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::__emplace[abi:ne180100]<5ul,std::pair<Phase::UniqueObjectId,double> const&>(uint64_t a1, long long *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 352);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8ne180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEyN5Phase14UniqueObjectIdENS_4pairINS7_14SpatialModeler11RenderGroupENS_8weak_ptrINS7_10Controller8RendererEEEEENS9_ISB_bEENS9_IS8_dEENS9_IS8_yEENS9_IySF_EENS9_IS8_NSA_18PointSourceHistoryEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRSP_EEEDcOSQ_DpOT0____fmatrix_0[v4])(&v7, a1);
  }
  *(_DWORD *)(a1 + 352) = -1;
  long long v5 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v5;
  *(_DWORD *)(a1 + 352) = 5;
  return a1;
}

void *std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::__assign_alt[abi:ne180100]<7ul,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>> const&>(uint64_t a1, void *a2, void *a3)
{
  if (*(_DWORD *)(a1 + 352) == 7) {
    return std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>::operator=[abi:ne180100](a2, a3);
  }
  else {
    return (void *)std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::__emplace[abi:ne180100]<7ul,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>> const&>(a1, a3);
  }
}

void *std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>::operator=[abi:ne180100](void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  uint64_t v4 = a2[2];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  long long v5 = (std::__shared_weak_count *)a1[2];
  a1[1] = v3;
  a1[2] = v4;
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  return a1;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::__emplace[abi:ne180100]<7ul,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>> const&>(uint64_t a1, void *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 352);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8ne180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEyN5Phase14UniqueObjectIdENS_4pairINS7_14SpatialModeler11RenderGroupENS_8weak_ptrINS7_10Controller8RendererEEEEENS9_ISB_bEENS9_IS8_dEENS9_IS8_yEENS9_IySF_EENS9_IS8_NSA_18PointSourceHistoryEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRSP_EEEDcOSQ_DpOT0____fmatrix_0[v4])(&v8, a1);
  }
  *(_DWORD *)(a1 + 352) = -1;
  uint64_t v5 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = a2[2];
  *(void *)(a1 + 16) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 16), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 352) = 7;
  return a1;
}

uint64_t std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>::operator=[abi:ne180100]<std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory> const&,0,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>,8ul,0>(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 352) == 8)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    long long v3 = *(_OWORD *)(a2 + 16);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = v3;
  }
  else
  {
    std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::__emplace[abi:ne180100]<8ul,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory> const&>(a1, (long long *)a2);
  }
  return a1;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::__emplace[abi:ne180100]<8ul,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory> const&>(uint64_t a1, long long *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 352);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8ne180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEyN5Phase14UniqueObjectIdENS_4pairINS7_14SpatialModeler11RenderGroupENS_8weak_ptrINS7_10Controller8RendererEEEEENS9_ISB_bEENS9_IS8_dEENS9_IS8_yEENS9_IySF_EENS9_IS8_NSA_18PointSourceHistoryEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRSP_EEEDcOSQ_DpOT0____fmatrix_0[v4])(&v8, a1);
  }
  *(_DWORD *)(a1 + 352) = -1;
  long long v5 = *a2;
  long long v6 = a2[1];
  *(void *)(a1 + 32) = *((void *)a2 + 4);
  *(_OWORD *)a1 = v5;
  *(_OWORD *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 352) = 8;
  return a1;
}

uint64_t Phase::SortedCommandQueue<Phase::Controller::RenderGroupMgr,Phase::Controller::RenderGroupMgr::CommandType,std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::SortCommandList(uint64_t result, unsigned int *a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = a2;
    uint64_t v5 = result;
    do
    {
      while (1)
      {
        long long v6 = v4;
        uint64_t v4 = (unsigned int *)*((void *)v4 + 49);
        uint64_t v7 = *v6;
        if (v7) {
          break;
        }
        Phase::SortedCommandQueue<Phase::Controller::RenderGroupMgr,Phase::Controller::RenderGroupMgr::CommandType,std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::SortCommandList(v5, *((void *)v6 + 48), a3);
        *((void *)v6 + 48) = 0;
        char v8 = v6 + 96;
LABEL_9:
        Phase::SortedCommandQueue<Phase::Controller::RenderGroupMgr,Phase::Controller::RenderGroupMgr::CommandType,std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::CommandBatch::Clear(v8);
        std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)(v6 + 4));
        uint64_t result = MEMORY[0x223C938A0](v6, 0x1022C40083BFC85);
        if (!v4) {
          return result;
        }
      }
      if ((int)v7 > 9)
      {
        char v8 = v6 + 96;
        goto LABEL_9;
      }
      *((void *)v6 + 49) = *(void *)(a3 + 8 * v7);
      *(void *)(a3 + 8 * v7) = v6;
    }
    while (v4);
  }
  return result;
}

void std::vector<Phase::Controller::RenderGroupMgr *>::__throw_length_error[abi:ne180100]()
{
}

void Phase::SortedCommandQueue<Phase::Controller::RenderGroupMgr,Phase::Controller::RenderGroupMgr::CommandType,std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::Command::Duplicate()
{
}

void sub_222046488(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  Phase::SortedCommandQueue<Phase::Controller::RenderGroupMgr,Phase::Controller::RenderGroupMgr::CommandType,std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::CommandBatch::Clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::__generic_assign[abi:ne180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>,(std::__variant_detail::_Trait)1> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(result + 352);
  uint64_t v4 = *(unsigned int *)(a2 + 352);
  if (v3 == -1)
  {
    if (v4 == -1) {
      return result;
    }
  }
  else if (v4 == -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8ne180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEyN5Phase14UniqueObjectIdENS_4pairINS7_14SpatialModeler11RenderGroupENS_8weak_ptrINS7_10Controller8RendererEEEEENS9_ISB_bEENS9_IS8_dEENS9_IS8_yEENS9_IySF_EENS9_IS8_NSA_18PointSourceHistoryEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRSP_EEEDcOSQ_DpOT0____fmatrix_0[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 352) = -1;
    return result;
  }
  uint64_t v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8ne180100IZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEyN5Phase14UniqueObjectIdENS_4pairINS7_14SpatialModeler11RenderGroupENS_8weak_ptrINS7_10Controller8RendererEEEEENS9_ISB_bEENS9_IS8_dEENS9_IS8_yEENS9_IySF_EENS9_IS8_NSA_18PointSourceHistoryEEEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISN_LNS0_6_TraitE1EEEEEvOT_EUlRSV_OT0_E_JRSO_SU_EEEDcmSW_DpOT0____fdiagonal[v4])(&v5, result, a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEyN5Phase14UniqueObjectIdENS_4pairINS9_14SpatialModeler11RenderGroupENS_8weak_ptrINS9_10Controller8RendererEEEEENSB_ISD_bEENSB_ISA_dEENSB_ISA_yEENSB_IySH_EENSB_ISA_NSC_18PointSourceHistoryEEEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISP_LNS0_6_TraitE1EEEEEvOT_EUlRSX_OT0_E_JRNS0_6__baseILST_1EJS8_ySA_SI_SJ_SK_SL_SM_SO_EEERKS15_EEEDcSX_DpT0_(uint64_t result)
{
  uint64_t v1 = *(void *)result;
  uint64_t v2 = *(unsigned int *)(*(void *)result + 352);
  if (v2 != -1)
  {
    if (!v2) {
      return result;
    }
    uint64_t result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8ne180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEyN5Phase14UniqueObjectIdENS_4pairINS7_14SpatialModeler11RenderGroupENS_8weak_ptrINS7_10Controller8RendererEEEEENS9_ISB_bEENS9_IS8_dEENS9_IS8_yEENS9_IySF_EENS9_IS8_NSA_18PointSourceHistoryEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRSP_EEEDcOSQ_DpOT0____fmatrix_0[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 352) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEyN5Phase14UniqueObjectIdENS_4pairINS9_14SpatialModeler11RenderGroupENS_8weak_ptrINS9_10Controller8RendererEEEEENSB_ISD_bEENSB_ISA_dEENSB_ISA_yEENSB_IySH_EENSB_ISA_NSC_18PointSourceHistoryEEEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISP_LNS0_6_TraitE1EEEEEvOT_EUlRSX_OT0_E_JRNS0_6__baseILST_1EJS8_ySA_SI_SJ_SK_SL_SM_SO_EEERKS15_EEEDcSX_DpT0_(uint64_t result, void *a2, void *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 352);
  if (v5 != -1)
  {
    if (v5 == 1)
    {
      *a2 = *a3;
      return result;
    }
    uint64_t result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8ne180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEyN5Phase14UniqueObjectIdENS_4pairINS7_14SpatialModeler11RenderGroupENS_8weak_ptrINS7_10Controller8RendererEEEEENS9_ISB_bEENS9_IS8_dEENS9_IS8_yEENS9_IySF_EENS9_IS8_NSA_18PointSourceHistoryEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRSP_EEEDcOSQ_DpOT0____fmatrix_0[v5])(&v6, v4);
  }
  *(void *)uint64_t v4 = *a3;
  *(_DWORD *)(v4 + 352) = 1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEyN5Phase14UniqueObjectIdENS_4pairINS9_14SpatialModeler11RenderGroupENS_8weak_ptrINS9_10Controller8RendererEEEEENSB_ISD_bEENSB_ISA_dEENSB_ISA_yEENSB_IySH_EENSB_ISA_NSC_18PointSourceHistoryEEEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISP_LNS0_6_TraitE1EEEEEvOT_EUlRSX_OT0_E_JRNS0_6__baseILST_1EJS8_ySA_SI_SJ_SK_SL_SM_SO_EEERKS15_EEEDcSX_DpT0_(uint64_t *a1, _OWORD *a2, _OWORD *a3)
{
  uint64_t result = *a1;
  if (*(_DWORD *)(result + 352) != 2) {
    return std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::__emplace[abi:ne180100]<2ul,Phase::UniqueObjectId const&>(result, a3);
  }
  *a2 = *a3;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEyN5Phase14UniqueObjectIdENS_4pairINS9_14SpatialModeler11RenderGroupENS_8weak_ptrINS9_10Controller8RendererEEEEENSB_ISD_bEENSB_ISA_dEENSB_ISA_yEENSB_IySH_EENSB_ISA_NSC_18PointSourceHistoryEEEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISP_LNS0_6_TraitE1EEEEEvOT_EUlRSX_OT0_E_JRNS0_6__baseILST_1EJS8_ySA_SI_SJ_SK_SL_SM_SO_EEERKS15_EEEDcSX_DpT0_(uint64_t *a1, uint64_t a2, long long *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 352);
  if (v5 != -1)
  {
    if (v5 == 3)
    {
      long long v7 = *a3;
      *(void *)(a2 + 16) = *((void *)a3 + 2);
      *(_OWORD *)a2 = v7;
      *(_DWORD *)(a2 + 24) = *((_DWORD *)a3 + 6);
      *(_DWORD *)(a2 + 28) = *((_DWORD *)a3 + 7);
      *(_DWORD *)(a2 + 32) = *((_DWORD *)a3 + 8);
      *(_DWORD *)(a2 + 36) = *((_DWORD *)a3 + 9);
      *(_DWORD *)(a2 + 40) = *((_DWORD *)a3 + 10);
      *(_DWORD *)(a2 + 44) = *((_DWORD *)a3 + 11);
      *(_DWORD *)(a2 + 48) = *((_DWORD *)a3 + 12);
      *(_DWORD *)(a2 + 52) = *((_DWORD *)a3 + 13);
      memcpy((void *)(a2 + 56), (char *)a3 + 56, 0x109uLL);
      uint64_t v9 = *((void *)a3 + 42);
      uint64_t v8 = *((void *)a3 + 43);
      if (v8) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 16), 1uLL, memory_order_relaxed);
      }
      unint64_t v10 = *(std::__shared_weak_count **)(a2 + 344);
      *(void *)(a2 + 336) = v9;
      *(void *)(a2 + 344) = v8;
      if (v10)
      {
        std::__shared_weak_count::__release_weak(v10);
      }
      return;
    }
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8ne180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEyN5Phase14UniqueObjectIdENS_4pairINS7_14SpatialModeler11RenderGroupENS_8weak_ptrINS7_10Controller8RendererEEEEENS9_ISB_bEENS9_IS8_dEENS9_IS8_yEENS9_IySF_EENS9_IS8_NSA_18PointSourceHistoryEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRSP_EEEDcOSQ_DpOT0____fmatrix_0[v5])(&v13, v4);
  }
  *(_DWORD *)(v4 + 352) = -1;
  long long v11 = *a3;
  *(void *)(v4 + 16) = *((void *)a3 + 2);
  *(_OWORD *)uint64_t v4 = v11;
  *(_DWORD *)(v4 + 24) = *((_DWORD *)a3 + 6);
  *(_DWORD *)(v4 + 28) = *((_DWORD *)a3 + 7);
  *(_DWORD *)(v4 + 32) = *((_DWORD *)a3 + 8);
  *(_DWORD *)(v4 + 36) = *((_DWORD *)a3 + 9);
  *(_DWORD *)(v4 + 40) = *((_DWORD *)a3 + 10);
  *(_DWORD *)(v4 + 44) = *((_DWORD *)a3 + 11);
  *(_DWORD *)(v4 + 48) = *((_DWORD *)a3 + 12);
  *(_DWORD *)(v4 + 52) = *((_DWORD *)a3 + 13);
  memcpy((void *)(v4 + 56), (char *)a3 + 56, 0x109uLL);
  uint64_t v12 = *((void *)a3 + 43);
  *(void *)(v4 + 336) = *((void *)a3 + 42);
  *(void *)(v4 + 344) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 16), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(v4 + 352) = 3;
}

void *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEyN5Phase14UniqueObjectIdENS_4pairINS9_14SpatialModeler11RenderGroupENS_8weak_ptrINS9_10Controller8RendererEEEEENSB_ISD_bEENSB_ISA_dEENSB_ISA_yEENSB_IySH_EENSB_ISA_NSC_18PointSourceHistoryEEEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISP_LNS0_6_TraitE1EEEEEvOT_EUlRSX_OT0_E_JRNS0_6__baseILST_1EJS8_ySA_SI_SJ_SK_SL_SM_SO_EEERKS15_EEEDcSX_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::__assign_alt[abi:ne180100]<4ul,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL> const&>(*a1, a2, a3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEyN5Phase14UniqueObjectIdENS_4pairINS9_14SpatialModeler11RenderGroupENS_8weak_ptrINS9_10Controller8RendererEEEEENSB_ISD_bEENSB_ISA_dEENSB_ISA_yEENSB_IySH_EENSB_ISA_NSC_18PointSourceHistoryEEEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISP_LNS0_6_TraitE1EEEEEvOT_EUlRSX_OT0_E_JRNS0_6__baseILST_1EJS8_ySA_SI_SJ_SK_SL_SM_SO_EEERKS15_EEEDcSX_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (*(_DWORD *)(result + 352) != 5) {
    return std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::__emplace[abi:ne180100]<5ul,std::pair<Phase::UniqueObjectId,double> const&>(result, (long long *)a3);
  }
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(void *)(a2 + 16) = *(void *)(a3 + 16);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEyN5Phase14UniqueObjectIdENS_4pairINS9_14SpatialModeler11RenderGroupENS_8weak_ptrINS9_10Controller8RendererEEEEENSB_ISD_bEENSB_ISA_dEENSB_ISA_yEENSB_IySH_EENSB_ISA_NSC_18PointSourceHistoryEEEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISP_LNS0_6_TraitE1EEEEEvOT_EUlRSX_OT0_E_JRNS0_6__baseILST_1EJS8_ySA_SI_SJ_SK_SL_SM_SO_EEERKS15_EEEDcSX_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (*(_DWORD *)(result + 352) != 6) {
    return std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::__emplace[abi:ne180100]<6ul,std::pair<Phase::UniqueObjectId,unsigned long long> const&>(result, (long long *)a3);
  }
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(void *)(a2 + 16) = *(void *)(a3 + 16);
  return result;
}

void *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7ELm7EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEyN5Phase14UniqueObjectIdENS_4pairINS9_14SpatialModeler11RenderGroupENS_8weak_ptrINS9_10Controller8RendererEEEEENSB_ISD_bEENSB_ISA_dEENSB_ISA_yEENSB_IySH_EENSB_ISA_NSC_18PointSourceHistoryEEEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISP_LNS0_6_TraitE1EEEEEvOT_EUlRSX_OT0_E_JRNS0_6__baseILST_1EJS8_ySA_SI_SJ_SK_SL_SM_SO_EEERKS15_EEEDcSX_DpT0_(uint64_t *a1, void *a2, void *a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::__assign_alt[abi:ne180100]<7ul,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>> const&>(*a1, a2, a3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8ELm8EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEyN5Phase14UniqueObjectIdENS_4pairINS9_14SpatialModeler11RenderGroupENS_8weak_ptrINS9_10Controller8RendererEEEEENSB_ISD_bEENSB_ISA_dEENSB_ISA_yEENSB_IySH_EENSB_ISA_NSC_18PointSourceHistoryEEEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISP_LNS0_6_TraitE1EEEEEvOT_EUlRSX_OT0_E_JRNS0_6__baseILST_1EJS8_ySA_SI_SJ_SK_SL_SM_SO_EEERKS15_EEEDcSX_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (*(_DWORD *)(result + 352) != 8) {
    return std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::__emplace[abi:ne180100]<8ul,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory> const&>(result, (long long *)a3);
  }
  *(_OWORD *)a2 = *(_OWORD *)a3;
  long long v4 = *(_OWORD *)(a3 + 16);
  *(void *)(a2 + 32) = *(void *)(a3 + 32);
  *(_OWORD *)(a2 + 16) = v4;
  return result;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void Phase::DspLayer::ResidentSampler::GetNewRegistryEntry(Phase::DspLayer::ResidentSampler *this)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v1 = (char *)malloc_type_malloc(0x1F8uLL, 0x1050040B063AAFAuLL);
  *(void *)uint64_t v1 = "Rate";
  *((void *)v1 + 1) = 0x500000000;
  *(void *)(v1 + 20) = 0x200000000;
  *((_DWORD *)v1 + 7) = 3;
  *((_OWORD *)v1 + 2) = xmmword_2220A5210;
  *((void *)v1 + 6) = 0x3FF0000000000000;
  *((void *)v1 + 7) = "Gain";
  *((void *)v1 + 8) = 0x500000001;
  *(void *)(v1 + 76) = 0x100000000;
  *((_DWORD *)v1 + 21) = 3;
  *(_OWORD *)(v1 + 88) = xmmword_2220E7D50;
  *((void *)v1 + 13) = 0x3FF0000000000000;
  *((void *)v1 + 14) = "ReferenceHF";
  *((void *)v1 + 15) = 0x500000002;
  *(void *)(v1 + 132) = 0x100000000;
  *((_DWORD *)v1 + 35) = 3;
  *((_OWORD *)v1 + 9) = xmmword_2220E7DA0;
  *((void *)v1 + 20) = 0x40B3880000000000;
  *((void *)v1 + 21) = "GainHF";
  *((void *)v1 + 22) = 0x500000003;
  *(void *)(v1 + 188) = 0x100000000;
  *((_DWORD *)v1 + 49) = 3;
  *(_OWORD *)(v1 + 200) = xmmword_2220E7F50;
  *((void *)v1 + 27) = 0x3FF0000000000000;
  *((void *)v1 + 28) = "ReferenceLF";
  *((void *)v1 + 29) = 0x500000004;
  *(void *)(v1 + 244) = 0x100000000;
  *((_DWORD *)v1 + 63) = 3;
  *((_OWORD *)v1 + 16) = xmmword_2220E7DA0;
  *((void *)v1 + 34) = 0x407F400000000000;
  *((void *)v1 + 35) = "GainLF";
  *((void *)v1 + 36) = 0x500000005;
  *((_DWORD *)v1 + 75) = 0;
  *((void *)v1 + 38) = 0x300000001;
  *((void *)v1 + 39) = 0x3EE4F8B580000000;
  __asm { FMOV            V1.2D, #1.0 }
  *((_OWORD *)v1 + 20) = _Q1;
  *((void *)v1 + 42) = "SeekPointInSeconds";
  *((void *)v1 + 43) = 0x500000006;
  *((_DWORD *)v1 + 89) = 0;
  *((void *)v1 + 45) = 0x300000002;
  *((_OWORD *)v1 + 23) = xmmword_2220E7DB0;
  *((void *)v1 + 48) = 0;
  *((void *)v1 + 49) = "Gain Interpolation Duration";
  *((void *)v1 + 50) = 0x500000007;
  *((_DWORD *)v1 + 103) = 0;
  *((void *)v1 + 52) = 0x300000001;
  *((void *)v1 + 53) = 0;
  *((_OWORD *)v1 + 27) = xmmword_2220E7DC0;
  *((void *)v1 + 56) = "Gain Damping Constant";
  *((void *)v1 + 57) = 0x500000008;
  *((_DWORD *)v1 + 117) = 0;
  *((void *)v1 + 59) = 0x300000001;
  *((_OWORD *)v1 + 30) = xmmword_2220E7D70;
  *((void *)v1 + 62) = 0x3FF0000000000000;
  operator new();
}

void sub_222046BA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Phase::DspLayer::ResidentSampler::~ResidentSampler(Phase::DspLayer::ResidentSampler *this)
{
  Phase::DspLayer::VoicePool::~VoicePool(this);

  JUMPOUT(0x223C938A0);
}

void anonymous namespace'::ResidentSamplerSlice::~ResidentSamplerSlice(_anonymous_namespace_::ResidentSamplerSlice *this)
{
}

double anonymous namespace'::ResidentSamplerSlice::Reset(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v13 = *MEMORY[0x263EF8340];
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(a1 + 16) = _Q0;
  *(_OWORD *)(a1 + 32) = _Q0;
  __asm { FMOV            V1.4S, #1.0 }
  *(_OWORD *)(a1 + 48) = _Q1;
  *(int32x4_t *)(a1 + 64) = vdupq_n_s32(0x459C4000u);
  *(_OWORD *)(a1 + 80) = _Q1;
  *(int32x4_t *)(a1 + 96) = vdupq_n_s32(0x43FA0000u);
  *(_OWORD *)(a1 + 112) = _Q1;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(int32x4_t *)(a1 + 176) = vdupq_n_s32(0x3C888889u);
  *(_OWORD *)(a1 + 192) = _Q1;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  long long v11 = _Q1;
  long long v12 = xmmword_2220A4FB0;
  do
  {
    *(_DWORD *)(a1 + 800 + 4 * *(int *)((char *)&v11 + v2 + 16)) = *(_DWORD *)((char *)&v11 + v2);
    v2 += 4;
  }
  while (v2 != 16);
  uint64_t v9 = 0;
  long long v12 = xmmword_2220A4FB0;
  long long v11 = 0uLL;
  do
  {
    *(_DWORD *)(a1 + 816 + 4 * *(int *)((char *)&v11 + v9 + 16)) = *(_DWORD *)((char *)&v11 + v9);
    v9 += 4;
  }
  while (v9 != 16);
  (*(void (**)(uint64_t))(*(void *)a1 + 48))(a1);
  double result = 0.0;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  return result;
}

uint64_t anonymous namespace'::ResidentSamplerSlice::Reset(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = (void *)(a1 + 8 * a3);
  v5[2] = 0x3FF0000000000000;
  char v6 = (_DWORD *)(a1 + 4 * a3);
  v6[12] = 1065353216;
  v6[16] = 1167867904;
  v6[20] = 1065353216;
  v6[24] = 1140457472;
  v6[28] = 1065353216;
  v5[16] = 0;
  v6[40] = 0;
  v6[44] = 1015580809;
  v6[48] = 1065353216;
  v6[52] = 0;
  *(_DWORD *)(a1 + 672 + 4 * a3) = 0;
  uint64_t v7 = 4 * a3 + 16;
  *(_DWORD *)(a1 + 672 + v7) = 0;
  *(_DWORD *)(a1 + 704 + 4 * a3) = 0;
  *(_DWORD *)(a1 + 704 + v7) = 0;
  *(void *)(a1 + 224 + 8 * a3) = 0;
  *(_DWORD *)(a1 + 224 + 4 * a3 + 32) = 0;
  *(_DWORD *)(a1 + 736 + 4 * a3) = 0;
  *(_DWORD *)(a1 + 736 + v7) = 0;
  v5[80] = 0;
  *(_DWORD *)(a1 + 768 + 4 * a3) = 0;
  *(_DWORD *)(a1 + 768 + v7) = 0;
  v6[200] = 1065353216;
  v6[204] = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  v5[104] = a4;
  return result;
}

double anonymous namespace'::ResidentSamplerSlice::GetParameter(_anonymous_namespace_::ResidentSamplerSlice *this, int a2, int a3)
{
  switch(a2)
  {
    case 0:
      return *((double *)this + a3 + 2);
    case 1:
      float v4 = *((float *)this + a3 + 12);
      goto LABEL_12;
    case 2:
      float v4 = *((float *)this + a3 + 16);
      goto LABEL_12;
    case 3:
      float v4 = *((float *)this + a3 + 20);
      goto LABEL_12;
    case 4:
      float v4 = *((float *)this + a3 + 24);
      goto LABEL_12;
    case 5:
      float v4 = *((float *)this + a3 + 28);
      goto LABEL_12;
    case 6:
      return *((double *)this + a3 + 16);
    case 7:
      float v4 = *((float *)this + a3 + 44);
      goto LABEL_12;
    case 8:
      float v4 = *((float *)this + a3 + 48);
LABEL_12:
      double result = v4;
      break;
    default:
      double result = 0.0;
      break;
  }
  return result;
}

uint64_t anonymous namespace'::ResidentSamplerSlice::SetParameter(_anonymous_namespace_::ResidentSamplerSlice *this, int a2, int a3, double a4)
{
  switch(a2)
  {
    case 0:
      uint64_t result = 0;
      *((double *)this + a3 + 2) = a4;
      break;
    case 1:
      uint64_t result = 0;
      float v6 = a4;
      *((float *)this + a3 + 12) = v6;
      break;
    case 2:
      uint64_t result = 0;
      float v7 = a4;
      *((float *)this + a3 + 16) = v7;
      break;
    case 3:
      uint64_t result = 0;
      float v8 = a4;
      *((float *)this + a3 + 20) = v8;
      break;
    case 4:
      uint64_t result = 0;
      float v9 = a4;
      *((float *)this + a3 + 24) = v9;
      break;
    case 5:
      uint64_t result = 0;
      float v10 = a4;
      *((float *)this + a3 + 28) = v10;
      break;
    case 6:
      if (a4 < 0.0 || **((double **)this + 108) * a4 >= (double)*((int *)this + a3 + 64))
      {
        uint64_t result = 11;
      }
      else
      {
        uint64_t result = 0;
        *((double *)this + a3 + 16) = a4;
        *((_DWORD *)this + a3 + 40) = 1;
      }
      break;
    case 7:
      uint64_t result = 0;
      float v11 = a4;
      *((float *)this + a3 + 44) = v11;
      break;
    case 8:
      uint64_t result = 0;
      float v12 = a4;
      *((float *)this + a3 + 48) = v12;
      break;
    default:
      uint64_t result = 9;
      break;
  }
  return result;
}

float32x4_t anonymous namespace'::ResidentSamplerSlice::UpdateParameters(uint64_t a1, uint64_t a2)
{
  int32x4_t v4 = *(int32x4_t *)(a1 + 256);
  *(_OWORD *)(a1 + 608) = *(_OWORD *)(a1 + 240);
  *(int32x4_t *)(a1 + 624) = v4;
  *(_OWORD *)(a1 + 592) = *(_OWORD *)(a1 + 224);
  v4.i64[0] = -1;
  v4.i64[1] = -1;
  int32x4_t v53 = *(int32x4_t *)(a1 + 624);
  int32x4_t v54 = vaddq_s32(v53, v4);
  simd_float4 v59 = _simd_log10_f4(*(simd_float4 *)(a1 + 80));
  v5.i64[0] = 0x3F0000003F000000;
  v5.i64[1] = 0x3F0000003F000000;
  simd_float4 v47 = _simd_exp10_f4((simd_float4)vmulq_f32((float32x4_t)v59, v5));
  __asm { FMOV            V1.4S, #1.0 }
  float32x4_t v62 = _Q1;
  float32x4_t v55 = vaddq_f32((float32x4_t)v47, _Q1);
  __asm { FMOV            V1.4S, #-1.0 }
  float32x4_t v41 = _Q1;
  float32x4_t v57 = vaddq_f32((float32x4_t)v47, _Q1);
  float32x4_t v39 = (float32x4_t)vdupq_n_s32(0x40C90FDBu);
  simd_float4 x = (simd_float4)vmulq_f32(vmulq_n_f32(*(float32x4_t *)(a1 + 64), *(float *)(a2 + 8)), v39);
  simd_float4 v49 = _simd_cos_f4(x);
  float32x4_t v51 = vmulq_f32(v57, (float32x4_t)v49);
  float32x4_t v45 = vaddq_f32(v55, v51);
  float32x4_t v12 = (float32x4_t)_simd_exp10_f4(v59);
  float32x4_t v60 = vmulq_f32(v57, vnegq_f32(v57));
  float32x4_t v38 = (float32x4_t)vdupq_n_s32(0x3F9837F0u);
  float32x4_t v13 = vmulq_f32((float32x4_t)_simd_sin_f4(x), vmlaq_f32(v60, v38, vsqrtq_f32(vaddq_f32(v12, v62))));
  float32x4_t v14 = vsubq_f32(v55, v51);
  float32x4_t v15 = vdivq_f32(v62, vaddq_f32(v14, v13));
  float32x4_t v52 = vmulq_f32(vmulq_f32((float32x4_t)v47, vaddq_f32(v45, v13)), v15);
  float32x4_t v16 = vmulq_f32(v55, (float32x4_t)v49);
  v17.i64[0] = 0xC0000000C0000000;
  v17.i64[1] = 0xC0000000C0000000;
  float32x4_t v18 = vmulq_f32(vmulq_f32(vmulq_f32((float32x4_t)v47, v17), vaddq_f32(v57, v16)), v15);
  float32x4_t v48 = vmulq_f32(vmulq_f32((float32x4_t)v47, vsubq_f32(v45, v13)), v15);
  float32x4_t v50 = v18;
  float32x4_t v19 = vsubq_f32(v57, v16);
  simd_float4 xa = (simd_float4)vmulq_f32(vsubq_f32(v14, v13), v15);
  float32x4_t v46 = vmulq_f32(vaddq_f32(v19, v19), v15);
  float32x4_t v36 = (float32x4_t)_simd_log10_f4(*(simd_float4 *)(a1 + 112));
  v20.i64[0] = 0x3F0000003F000000;
  v20.i64[1] = 0x3F0000003F000000;
  simd_float4 v37 = _simd_exp10_f4((simd_float4)vmulq_f32(v36, v20));
  float32x4_t v56 = vaddq_f32((float32x4_t)v37, v62);
  float32x4_t v58 = vaddq_f32((float32x4_t)v37, v41);
  simd_float4 v34 = (simd_float4)vmulq_f32(vmulq_n_f32(*(float32x4_t *)(a1 + 96), *(float *)(a2 + 8)), v39);
  simd_float4 v42 = _simd_cos_f4(v34);
  float32x4_t v35 = vmulq_f32(v58, (float32x4_t)v42);
  float32x4_t v40 = vsubq_f32(v56, v35);
  float32x4_t v61 = vmlaq_f32(v60, v38, vsqrtq_f32(vaddq_f32((float32x4_t)_simd_exp10_f4((simd_float4)v36), v62)));
  float32x4_t v21 = vmulq_f32((float32x4_t)_simd_sin_f4(v34), v61);
  float32x4_t v22 = vaddq_f32(v56, v35);
  float32x4_t v23 = vdivq_f32(v62, vaddq_f32(v22, v21));
  long long v24 = *(_OWORD *)(a1 + 208);
  *(int32x4_t *)(a1 + 272) = v53;
  *(int32x4_t *)(a1 + 288) = v54;
  float32x4_t v25 = vmulq_f32(v56, (float32x4_t)v42);
  float32x4_t v26 = vmulq_f32(vmulq_f32((float32x4_t)v37, vsubq_f32(v40, v21)), v23);
  long long v27 = *(_OWORD *)(a1 + 16);
  long long v29 = *(_OWORD *)(a1 + 32);
  long long v28 = *(_OWORD *)(a1 + 48);
  *(float32x4_t *)(a1 + 304) = v52;
  *(float32x4_t *)(a1 + 320) = v50;
  v30.i64[0] = 0xC0000000C0000000;
  v30.i64[1] = 0xC0000000C0000000;
  *(float32x4_t *)(a1 + 336) = v48;
  *(float32x4_t *)(a1 + 352) = v46;
  *(simd_float4 *)(a1 + 368) = xa;
  *(float32x4_t *)(a1 + 384) = vmulq_f32(vmulq_f32((float32x4_t)v37, vaddq_f32(v40, v21)), v23);
  float32x4_t result = vmulq_f32(vsubq_f32(v22, v21), v23);
  v32.i64[0] = v53.i32[2];
  v32.i64[1] = v53.i32[3];
  float64x2_t v33 = vcvtq_f64_s64(v32);
  *(float32x4_t *)(a1 + 400) = vmulq_f32(vmulq_f32(vaddq_f32((float32x4_t)v37, (float32x4_t)v37), vsubq_f32(v58, v25)), v23);
  *(float32x4_t *)(a1 + 416) = v26;
  v32.i64[0] = v53.i32[0];
  v32.i64[1] = v53.i32[1];
  *(float32x4_t *)(a1 + 432) = vmulq_f32(vmulq_f32(vaddq_f32(v58, v25), v30), v23);
  *(float32x4_t *)(a1 + 448) = result;
  *(_OWORD *)(a1 + 464) = v24;
  *(_OWORD *)(a1 + 480) = v28;
  *(_OWORD *)(a1 + 496) = v27;
  *(_OWORD *)(a1 + 512) = v29;
  *(float64x2_t *)(a1 + 528) = vcvtq_f64_s64(v32);
  *(float64x2_t *)(a1 + 544) = v33;
  return result;
}

double anonymous namespace'::ResidentSamplerSlice::UpdateParameters(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = a3;
  *(void *)(a1 + 592 + 8 * a3) = *(void *)(a1 + 224 + 8 * a3);
  int v7 = *(_DWORD *)(a1 + 224 + 4 * a3 + 32);
  *(_DWORD *)(a1 + 592 + 4 * a3 + 32) = v7;
  uint64_t v8 = a1 + 4 * a3;
  float v9 = log10f(*(float *)(v8 + 80));
  float v10 = __exp10f(v9 * 0.5);
  float v51 = *(float *)(v8 + 64);
  float v11 = *(float *)(a2 + 8);
  float v52 = __exp10f(v9);
  float v12 = log10f(*(float *)(v8 + 112));
  float v13 = __exp10f(v12 * 0.5);
  float v14 = *(float *)(v8 + 96);
  float v15 = __exp10f(v12);
  int v17 = *(_DWORD *)(v8 + 160);
  float32x4_t v16 = (_DWORD *)(v8 + 160);
  int v18 = v16[12];
  int v19 = *(v16 - 28);
  if (v17) {
    *(double *)(a1 + 8 * v6 + 640) = *(double *)(a1 + 8 * v6 + 128) * *(double *)a2;
  }
  uint64_t v53 = *(void *)(a1 + 8 * a3 + 16);
  uint64_t v20 = a1 + 4 * v6;
  float v21 = *(float *)(v20 + 176);
  int v50 = v19;
  if (v21 >= 0.001)
  {
    float v22 = 6.2832 / v21;
    float v23 = v22 * v22;
    float v24 = v22 * (float)(*(float *)(v20 + 192) + *(float *)(v20 + 192));
    *(float *)(v20 + 560) = v23;
    *(float *)(v20 + 576) = v24;
  }
  else
  {
    *(_DWORD *)(v20 + 816) = 0;
    *(_DWORD *)(v20 + 800) = v19;
  }
  __float2 v25 = __sincosf_stret((float)(v11 * v14) * 6.2832);
  float v26 = (float)(v13 + -1.0) * v25.__cosval;
  float v27 = (float)(v13 + 1.0) + v26;
  float v28 = sqrtf(v15 + 1.0);
  float v29 = v10 + -1.0;
  float v30 = v25.__sinval * (float)((float)(v28 * 1.1892) - (float)(v29 * v29));
  float v31 = v27 - v30;
  float v32 = 1.0 / (float)(v27 + v30);
  float v49 = v31 * v32;
  float v33 = (float)(v13 + 1.0) * v25.__cosval;
  float v34 = (float)(v13 + 1.0) - v26;
  float v47 = (float)(v13 * (float)(v34 - v30)) * v32;
  float v48 = (float)((float)((float)(v13 + -1.0) + v33) * -2.0) * v32;
  float v35 = (float)((float)(v13 + v13) * (float)((float)(v13 + -1.0) - v33)) * v32;
  float v36 = (float)(v13 * (float)(v34 + v30)) * v32;
  __float2 v37 = __sincosf_stret((float)(v51 * v11) * 6.2832);
  float v38 = (float)(v10 + -1.0) * v37.__cosval;
  float v39 = (float)(v10 + 1.0) - v38;
  float v40 = v37.__sinval * (float)((float)(sqrtf(v52 + 1.0) * 1.1892) - (float)(v29 * v29));
  float v41 = 1.0 / (float)(v39 + v40);
  float v42 = (float)(v10 + 1.0) * v37.__cosval;
  float v43 = (float)(v10 + 1.0) + v38;
  uint64_t v44 = a1 + 4 * v6;
  *(_DWORD *)(v44 + 272) = v7;
  *(_DWORD *)(v44 + 288) = v7 - 1;
  *(float *)(v44 + 304) = (float)(v10 * (float)(v43 + v40)) * v41;
  *(float *)(v44 + 320) = (float)((float)(v10 * -2.0) * (float)((float)(v10 + -1.0) + v42)) * v41;
  *(float *)(v44 + 336) = (float)(v10 * (float)(v43 - v40)) * v41;
  *(float *)(v44 + 352) = (float)((float)((float)(v10 + -1.0) - v42) + (float)((float)(v10 + -1.0) - v42)) * v41;
  *(float *)(v44 + 368) = (float)(v39 - v40) * v41;
  *(float *)(v44 + 384) = v36;
  *(float *)(v44 + 400) = v35;
  *(float *)(v44 + 416) = v47;
  *(float *)(v44 + 432) = v48;
  *(float *)(v44 + 448) = v49;
  *(_DWORD *)(v44 + 464) = v18;
  *(_DWORD *)(v44 + 480) = v50;
  uint64_t v45 = a1 + 8 * v6;
  *(void *)(v45 + 496) = v53;
  double result = (double)v7;
  *(double *)(v45 + 528) = (double)v7;
  _DWORD *v16 = 0;
  return result;
}

__n128 anonymous namespace'::ResidentSamplerSlice::Run(_anonymous_namespace_::ResidentSamplerSlice *this, Phase::DspLayer::VoiceEngine *a2, Phase::DspLayer::VoicePool *a3, int a4)
{
  v80[1] = *MEMORY[0x263EF8340];
  float64x2_t v5 = *((float64x2_t *)this + 31);
  float64x2_t v6 = *((float64x2_t *)this + 32);
  float64x2_t v7 = *((float64x2_t *)this + 33);
  float64x2_t v8 = *((float64x2_t *)this + 34);
  float64x2_t v9 = *((float64x2_t *)this + 40);
  float64x2_t v10 = *((float64x2_t *)this + 41);
  float64x2_t v11 = vrndq_f64(v9);
  float64x2_t v12 = vrndq_f64(v10);
  float32x4_t v13 = 0uLL;
  HIDWORD(v15) = a4 - 1;
  LODWORD(v15) = a4 - 1;
  int v14 = v15 >> 1;
  int32x4_t v17 = *((int32x4_t *)this + 17);
  int32x4_t v16 = *((int32x4_t *)this + 18);
  int32x4_t v18 = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(v11), (int32x4_t)vcvtq_s64_f64(v12));
  int32x4_t v19 = vminq_s32(vmaxq_s32(v18, (int32x4_t)0), v16);
  float32x4_t v20 = 0uLL;
  switch(v14)
  {
    case 0:
      uint64_t v21 = *((void *)this + 74);
      v13.i32[0] = *(_DWORD *)(v21 + 4 * v19.i32[0]);
      v22.i64[0] = 0x100000001;
      v22.i64[1] = 0x100000001;
      int32x4_t v23 = vaddq_s32(v18, v22);
      float32x4_t v20 = (float32x4_t)vcgtq_s32(v17, v23);
      v20.i32[0] = *(_DWORD *)(v21
                             + 4
                             * vminq_s32(vmaxq_s32((int32x4_t)vbslq_s8((int8x16_t)v20, (int8x16_t)v23, (int8x16_t)vsubq_s32(v17, v23)), (int32x4_t)0), v16).i32[0]);
      break;
    case 1:
      uint64_t v24 = *((void *)this + 74);
      uint64_t v25 = *((void *)this + 75);
      v13.i32[0] = *(_DWORD *)(v24 + 4 * v19.i32[0]);
      v13.i32[1] = *(_DWORD *)(v25 + 4 * v19.i32[1]);
      v26.i64[0] = 0x100000001;
      v26.i64[1] = 0x100000001;
      int32x4_t v27 = vaddq_s32(v18, v26);
      float32x4_t v20 = (float32x4_t)vcgtq_s32(v17, v27);
      unint64_t v28 = vminq_s32(vmaxq_s32((int32x4_t)vbslq_s8((int8x16_t)v20, (int8x16_t)v27, (int8x16_t)vsubq_s32(v17, v27)), (int32x4_t)0), v16).u64[0];
      v20.i32[0] = *(_DWORD *)(v24 + 4 * (int)v28);
      v20.i32[1] = *(_DWORD *)(v25 + 4 * SHIDWORD(v28));
      break;
    case 2:
    case 4:
    case 5:
    case 6:
      break;
    case 3:
      uint64_t v29 = *((void *)this + 74);
      uint64_t v30 = *((void *)this + 75);
      uint64_t v31 = *((void *)this + 76);
      v13.i32[0] = *(_DWORD *)(v29 + 4 * v19.i32[0]);
      v13.i32[1] = *(_DWORD *)(v30 + 4 * v19.i32[1]);
      v13.i32[2] = *(_DWORD *)(v31 + 4 * v19.i32[2]);
      v32.i64[0] = 0x100000001;
      v32.i64[1] = 0x100000001;
      int32x4_t v33 = vaddq_s32(v18, v32);
      float32x4_t v20 = (float32x4_t)vcgtq_s32(v17, v33);
      int32x4_t v34 = vminq_s32(vmaxq_s32((int32x4_t)vbslq_s8((int8x16_t)v20, (int8x16_t)v33, (int8x16_t)vsubq_s32(v17, v33)), (int32x4_t)0), v16);
      v20.i32[0] = *(_DWORD *)(v29 + 4 * v34.i32[0]);
      v20.i32[1] = *(_DWORD *)(v30 + 4 * v34.i32[1]);
      v20.i32[2] = *(_DWORD *)(v31 + 4 * v34.i32[2]);
      break;
    case 7:
      uint64_t v35 = *((void *)this + 74);
      uint64_t v36 = *((void *)this + 75);
      uint64_t v37 = *((void *)this + 76);
      uint64_t v38 = *((void *)this + 77);
      v13.i32[0] = *(_DWORD *)(v35 + 4 * v19.i32[0]);
      v13.i32[1] = *(_DWORD *)(v36 + 4 * v19.i32[1]);
      v13.i32[2] = *(_DWORD *)(v37 + 4 * v19.i32[2]);
      v13.i32[3] = *(_DWORD *)(v38 + 4 * v19.i32[3]);
      v39.i64[0] = 0x100000001;
      v39.i64[1] = 0x100000001;
      int32x4_t v40 = vaddq_s32(v18, v39);
      int32x4_t v41 = vminq_s32(vmaxq_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_s32(v17, v40), (int8x16_t)v40, (int8x16_t)vsubq_s32(v17, v40)), (int32x4_t)0), v16);
      v20.i32[0] = *(_DWORD *)(v35 + 4 * v41.i32[0]);
      v20.i32[1] = *(_DWORD *)(v36 + 4 * v41.i32[1]);
      v20.i32[2] = *(_DWORD *)(v37 + 4 * v41.i32[2]);
      v20.i32[3] = *(_DWORD *)(v38 + 4 * v41.i32[3]);
      break;
    default:
      float32x4_t v20 = 0uLL;
      break;
  }
  float32x4_t v42 = vmlaq_f32(v13, vsubq_f32(v20, v13), vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vsubq_f64(v9, v11)), vsubq_f64(v10, v12)));
  float32x4_t v43 = vmlsq_f32(vmlsq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(*((float32x4_t *)this + 20), *((float32x4_t *)this + 42)), v42, *((float32x4_t *)this + 19)), *((float32x4_t *)this + 43), *((float32x4_t *)this + 21)), *((float32x4_t *)this + 44), *((float32x4_t *)this + 22)), *((float32x4_t *)this + 45), *((float32x4_t *)this + 23));
  float32x4_t v44 = vmlsq_f32(vmlsq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(*((float32x4_t *)this + 25), *((float32x4_t *)this + 46)), v43, *((float32x4_t *)this + 24)), *((float32x4_t *)this + 47), *((float32x4_t *)this + 26)), *((float32x4_t *)this + 48), *((float32x4_t *)this + 27)), *((float32x4_t *)this + 49), *((float32x4_t *)this + 28));
  float v45 = *((float *)a2 + 2);
  float32x4_t v46 = *((float32x4_t *)this + 50);
  float32x4_t v47 = vmlaq_n_f32(*((float32x4_t *)this + 51), vmlaq_f32(vmulq_f32(*((float32x4_t *)this + 51), vnegq_f32(*((float32x4_t *)this + 36))), vsubq_f32(*((float32x4_t *)this + 30), v46), *((float32x4_t *)this + 35)), v45);
  float32x4_t v48 = vmlaq_n_f32(v46, v47, v45);
  *((float32x4_t *)this + 50) = v48;
  *((float32x4_t *)this + 51) = v47;
  float32x4_t v49 = vmulq_f32(v44, v48);
  int8x16_t v50 = vandq_s8((int8x16_t)v49, vorrq_s8((int8x16_t)vcltzq_f32(v49), (int8x16_t)vcgezq_f32(v49)));
  switch(v14)
  {
    case 0:
      goto LABEL_11;
    case 1:
      goto LABEL_10;
    case 3:
      goto LABEL_9;
    case 7:
      *(_DWORD *)(*((void *)a2 + 7) + 4 * *((int *)this + 119)) = v50.i32[3];
LABEL_9:
      *(_DWORD *)(*((void *)a2 + 7) + 4 * *((int *)this + 118)) = v50.i32[2];
LABEL_10:
      *(_DWORD *)(*((void *)a2 + 7) + 4 * *((int *)this + 11std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Graph>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Graph>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Graph>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Graph>>>::~__hash_table((uint64_t)(this + 7)) = v50.i32[1];
LABEL_11:
      *(_DWORD *)(*((void *)a2 + 7) + 4 * *((int *)this + 116)) = v50.i32[0];
      break;
    default:
      break;
  }
  float64x2_t v51 = vaddq_f64(v6, v10);
  float64x2_t v52 = vaddq_f64(v5, v9);
  int32x4_t v53 = vuzp1q_s32((int32x4_t)vcgeq_f64(v52, v7), (int32x4_t)vcgeq_f64(v51, v8));
  int8x16_t v54 = vandq_s8((int8x16_t)v53, (int8x16_t)xmmword_2220E7D80);
  int32x4_t v55 = (int32x4_t)vorrq_s8(vextq_s8(v54, v54, 8uLL), v54);
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s32(v55, 3), (int8x16_t)v55).u32[0] & a4) != 0)
  {
    MEMORY[0x270FA5388](this);
    v80[0] = v70;
    v70[0] = 0;
    v70[1] = 0;
    v79[0] = 1;
    v79[2] = 2;
    float64x2_t v77 = v57;
    float64x2_t v78 = v56;
    float32x4_t v75 = v58;
    float32x4_t v76 = v59;
    float64x2_t v73 = v60;
    float32x4_t v74 = v61;
    int32x4_t v71 = v62;
    float64x2_t v72 = v63;
    Phase::DspLayer::VoicePool::ExternalCallbackWithMessage(v64, 0, (uint64_t *)this + 104, v65, v79, v80);
    int32x4_t v53 = v71;
    float64x2_t v51 = v72;
    float64x2_t v52 = v73;
    float32x4_t v44 = v74;
    float32x4_t v43 = v75;
    float32x4_t v42 = v76;
    float64x2_t v8 = v77;
    float64x2_t v7 = v78;
  }
  *((int8x16_t *)this + 40) = vbslq_s8((int8x16_t)vzip1q_s32(v53, v53), (int8x16_t)vsubq_f64(v52, v7), (int8x16_t)v52);
  *((int8x16_t *)this + 41) = vbslq_s8((int8x16_t)vzip2q_s32(v53, v53), (int8x16_t)vsubq_f64(v51, v8), (int8x16_t)v51);
  long long v66 = *((_OWORD *)this + 42);
  *((float32x4_t *)this + 42) = v42;
  *((_OWORD *)this + 43) = v66;
  long long v67 = *((_OWORD *)this + 44);
  *((float32x4_t *)this + 44) = v43;
  *((_OWORD *)this + 45) = v67;
  long long v68 = *((_OWORD *)this + 46);
  *((float32x4_t *)this + 46) = v43;
  *((_OWORD *)this + 47) = v68;
  __n128 result = *((__n128 *)this + 48);
  *((float32x4_t *)this + 48) = v44;
  *((__n128 *)this + 49) = result;
  return result;
}

float anonymous namespace'::ResidentSamplerSlice::CopyVoiceState(_anonymous_namespace_::ResidentSamplerSlice *this, Phase::DspLayer::VoicePoolSlice *a2, unsigned int a3, unsigned int a4)
{
  int32x4_t v4 = (void *)((char *)a2 + 8 * (int)a3);
  float64x2_t v5 = (void *)((char *)this + 8 * (int)a4);
  v5[2] = v4[2];
  float64x2_t v6 = (_DWORD *)((char *)a2 + 4 * (int)a3);
  float64x2_t v7 = (_DWORD *)((char *)this + 4 * (int)a4);
  v7[12] = v6[12];
  v7[16] = v6[16];
  v7[20] = v6[20];
  v7[24] = v6[24];
  v7[28] = v6[28];
  v5[16] = v4[16];
  v7[40] = v6[40];
  v7[44] = v6[44];
  v7[48] = v6[48];
  v7[52] = v6[52];
  *((void *)this + (int)a4 + 28) = *((void *)a2 + (int)a3 + 28);
  *((_DWORD *)this + (int)a4 + 64) = *((_DWORD *)a2 + (int)a3 + 64);
  v7[68] = v6[68];
  v7[72] = v6[72];
  v7[76] = v6[76];
  v7[80] = v6[80];
  v7[84] = v6[84];
  v7[88] = v6[88];
  v7[92] = v6[92];
  v7[96] = v6[96];
  v7[100] = v6[100];
  v7[104] = v6[104];
  v7[108] = v6[108];
  v7[112] = v6[112];
  v7[116] = v6[116];
  v7[120] = v6[120];
  v5[62] = v4[62];
  v5[66] = v4[66];
  v7[140] = v6[140];
  int v8 = v6[144];
  *((void *)this + (int)a4 + 74) = *((void *)a2 + (int)a3 + 74);
  v7[144] = v8;
  *((_DWORD *)this + (int)a4 + 156) = *((_DWORD *)a2 + (int)a3 + 156);
  if (a3 >= 4) {
    __assert_rtn("Copy", "DelaylineLinear.hpp", 507, "fromLane >= 0 && fromLane < PHASE_SIMD_WIDTH");
  }
  if (a4 >= 4) {
    __assert_rtn("Copy", "DelaylineLinear.hpp", 508, "toLane >= 0 && toLane < PHASE_SIMD_WIDTH");
  }
  *((void *)this + a4 + 80) = *((void *)a2 + a3 + 80);
  *((_DWORD *)this + a4 + 168) = *((_DWORD *)a2 + a3 + 168);
  uint64_t v9 = 4 * a3 + 16;
  uint64_t v10 = 4 * a4 + 16;
  *(_DWORD *)((char *)this + v10 + 672) = *(_DWORD *)((char *)a2 + v9 + 672);
  *((_DWORD *)this + a4 + 176) = *((_DWORD *)a2 + a3 + 176);
  *(_DWORD *)((char *)this + v10 + 704) = *(_DWORD *)((char *)a2 + v9 + 704);
  *((_DWORD *)this + a4 + 184) = *((_DWORD *)a2 + a3 + 184);
  *(_DWORD *)((char *)this + v10 + 736) = *(_DWORD *)((char *)a2 + v9 + 736);
  *((_DWORD *)this + a4 + 192) = *((_DWORD *)a2 + a3 + 192);
  *(_DWORD *)((char *)this + v10 + 768) = *(_DWORD *)((char *)a2 + v9 + 768);
  float64x2_t v11 = (char *)a2 + 4 * a3;
  float64x2_t v12 = (char *)this + 4 * a4;
  *((_DWORD *)v12 + 200) = *((_DWORD *)v11 + 200);
  float result = *((float *)v11 + 204);
  *((float *)v12 + 204) = result;
  *((void *)this + (int)a4 + 104) = *((void *)a2 + (int)a3 + 104);
  return result;
}

unint64_t anonymous namespace'::ResidentSamplerSlice::GetOutput(_anonymous_namespace_::ResidentSamplerSlice *this, int a2, int a3)
{
  if (a2) {
    return 0xFFFFFFFF00000008;
  }
  else {
    return (unint64_t)*((unsigned int *)this + a3 + 52) << 32;
  }
}

uint64_t anonymous namespace'::ResidentSamplerSlice::SetOutput(_anonymous_namespace_::ResidentSamplerSlice *this, int a2, int a3, int a4)
{
  if (a2) {
    return 8;
  }
  uint64_t result = 0;
  *((_DWORD *)this + a3 + 52) = a4;
  return result;
}

uint64_t anonymous namespace'::ResidentSamplerSlice::GetBuffer@<X0>(uint64_t this@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (a2)
  {
    uint64_t v4 = 0;
    int v5 = -1;
    int v6 = 10;
  }
  else
  {
    int v6 = 0;
    uint64_t v4 = *(void *)(this + 224 + 8 * a3);
    int v5 = *(_DWORD *)(this + 224 + 4 * a3 + 32);
  }
  *(_DWORD *)a4 = v6;
  *(void *)(a4 + 8) = v4;
  *(_DWORD *)(a4 + 16) = v5;
  return this;
}

uint64_t anonymous namespace'::ResidentSamplerSlice::SetBuffer(_anonymous_namespace_::ResidentSamplerSlice *this, int a2, int a3, void *a4, int a5)
{
  if (a2) {
    return 10;
  }
  uint64_t result = 0;
  this = (_anonymous_namespace_::ResidentSamplerSlice *)((char *)this + 224);
  *((void *)this + a3) = a4;
  *((_DWORD *)this + a3 + 8) = a5;
  return result;
}

void std::__function::__func<Phase::DspLayer::ResidentSampler::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::ResidentSampler::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::~__func()
{
}

void *std::__function::__func<Phase::DspLayer::ResidentSampler::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::ResidentSampler::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26D47A4F0;
  return result;
}

void std::__function::__func<Phase::DspLayer::ResidentSampler::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::ResidentSampler::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D47A4F0;
}

void std::__function::__func<Phase::DspLayer::ResidentSampler::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::ResidentSampler::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::operator()()
{
}

void sub_222047FA0(_Unwind_Exception *a1)
{
  MEMORY[0x223C938A0](v1, 0x10F1C408EBD29CELL);
  _Unwind_Resume(a1);
}

BOOL Phase::Controller::ResidentSoundAssetInfo::InitWithURL(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, double a6, double a7, uint64_t a8, void *a9)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  id v16 = a4;
  id v17 = a5;
  BOOL v18 = Phase::Controller::SoundAssetInfo::BaseInit(a1, 0, a2, a3, a9, a7);
  if (!v18)
  {
    BOOL v27 = 0;
    goto LABEL_27;
  }
  int32x4_t v19 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance((Phase::Logger *)v18)
                                                                                      + 816)));
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v20 = *(void *)(a1 + 16);
    id v21 = [v16 description];
    *(_DWORD *)buf = 136315906;
    int8x16_t v50 = "ResidentSoundAssetInfo.mm";
    __int16 v51 = 1024;
    int v52 = 101;
    __int16 v53 = 2048;
    uint64_t v54 = v20;
    __int16 v55 = 2080;
    uint64_t v56 = [v21 UTF8String];
    _os_log_impl(&dword_221E5E000, v19, OS_LOG_TYPE_DEFAULT, "%25s:%-5d ResidentSoundAssetInfo::InitWithURL for assetId %llu url: %s", buf, 0x26u);
  }
  int32x4_t v22 = (void *)MEMORY[0x223C93F80]();
  *(_DWORD *)(a1 + 32) = 1;
  if (!v16)
  {
    int32x4_t v23 = [NSString stringWithFormat:@"File URL was nil"];
    unint64_t v28 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v23)
                                                                                        + 816)));
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      uint64_t v29 = *(void *)(a1 + 16);
      uint64_t v30 = [(Phase::Logger *)v23 UTF8String];
      *(_DWORD *)buf = 136315906;
      int8x16_t v50 = "ResidentSoundAssetInfo.mm";
      __int16 v51 = 1024;
      int v52 = 112;
      __int16 v53 = 2048;
      uint64_t v54 = v29;
      __int16 v55 = 2080;
      uint64_t v56 = v30;
      _os_log_impl(&dword_221E5E000, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", buf, 0x26u);
    }

    if (a9)
    {
      uint64_t v47 = *MEMORY[0x263F08320];
      float32x4_t v48 = v23;
      uint64_t v31 = [NSDictionary dictionaryWithObjects:&v48 forKeys:&v47 count:1];
      *a9 = [MEMORY[0x263F087E8] errorWithDomain:@"com.apple.coreaudio.phase" code:1346920805 userInfo:v31];
    }
    goto LABEL_15;
  }
  id v44 = 0;
  int32x4_t v23 = (Phase::Logger *)[objc_alloc(MEMORY[0x263EF9380]) initForReading:v16 commonFormat:1 interleaved:0 error:&v44];
  id v24 = v44;
  if (!v24)
  {
    if (v23)
    {
      id v32 = [v16 description];
      int v26 = Phase::Controller::ResidentSoundAssetInfo::InitializeWithAudioFile(a1, a3, v23, [v32 UTF8String], v17, a9, a6);

      if (v26)
      {
        uint64_t v25 = 0;
        *(_DWORD *)(a1 + 32) = 4;
        LOBYTE(v26) = 1;
        goto LABEL_17;
      }
LABEL_16:
      uint64_t v25 = 0;
      goto LABEL_17;
    }
LABEL_15:
    LOBYTE(v26) = 0;
    goto LABEL_16;
  }
  uint64_t v25 = v24;

  int32x4_t v23 = 0;
  LOBYTE(v26) = 0;
LABEL_17:

  BOOL v27 = v16 != 0;
  if (v16) {
    char v33 = v26;
  }
  else {
    char v33 = 1;
  }
  if ((v33 & 1) == 0)
  {
    int32x4_t v34 = NSString;
    uint64_t v35 = [v16 description];
    uint64_t v36 = [v25 description];
    uint64_t v37 = [v34 stringWithFormat:@"[AVAudioFile initForReading] failed on file '%@' with error '%@'", v35, v36];

    int32x4_t v39 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v38)
                                                                                        + 816)));
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
    {
      uint64_t v40 = *(void *)(a1 + 16);
      uint64_t v41 = [v37 UTF8String];
      *(_DWORD *)buf = 136315906;
      int8x16_t v50 = "ResidentSoundAssetInfo.mm";
      __int16 v51 = 1024;
      int v52 = 142;
      __int16 v53 = 2048;
      uint64_t v54 = v40;
      __int16 v55 = 2080;
      uint64_t v56 = v41;
      _os_log_impl(&dword_221E5E000, v39, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", buf, 0x26u);
    }

    if (a9)
    {
      uint64_t v45 = *MEMORY[0x263F08320];
      float32x4_t v46 = v37;
      float32x4_t v42 = [NSDictionary dictionaryWithObjects:&v46 forKeys:&v45 count:1];
      *a9 = [MEMORY[0x263F087E8] errorWithDomain:@"com.apple.coreaudio.phase" code:1346920801 userInfo:v42];
    }
    BOOL v27 = 0;
  }

LABEL_27:
  return v27;
}

void sub_2220484B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::ResidentSoundAssetInfo::InitializeWithAudioFile(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, void *a6, double a7)
{
  v250[1] = *MEMORY[0x263EF8340];
  float64x2_t v11 = a3;
  id v196 = a5;
  float64x2_t v12 = [(AVAudioFile *)v11 processingFormat];
  if ([v12 channelCount] == 1)
  {
  }
  else
  {
    float32x4_t v13 = [(AVAudioFile *)v11 processingFormat];
    if ([v13 channelCount] <= 1)
    {

      std::terminate();
    }
    int v14 = [(AVAudioFile *)v11 processingFormat];
    int v15 = [v14 isInterleaved];

    if (v15) {
      goto LABEL_198;
    }
  }
  id v16 = [(AVAudioFile *)v11 processingFormat];
  uint64_t v17 = [v16 commonFormat];

  if (v17 != 1) {
    goto LABEL_198;
  }
  if (a7 <= 0.0)
  {
    objc_msgSend(NSString, "stringWithFormat:", @"Invalid sample rate %f for audio file '%s'!", *(void *)&a7, a4);
    unint64_t v197 = (Phase::Logger *)objc_claimAutoreleasedReturnValue();
    uint64_t v29 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v197)
                                                                                        + 816)));
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      uint64_t v30 = *(void **)(a1 + 16);
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "ResidentSoundAssetInfo.mm";
      __int16 v228 = 1024;
      int v229 = 798;
      __int16 v230 = 2048;
      float v231 = v30;
      __int16 v232 = 2080;
      uint64_t v233 = [(Phase::Logger *)v197 UTF8String];
      _os_log_impl(&dword_221E5E000, v29, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", buf, 0x26u);
    }

    if (a6)
    {
      uint64_t v249 = *MEMORY[0x263F08320];
      v250[0] = v197;
      uint64_t v31 = [NSDictionary dictionaryWithObjects:v250 forKeys:&v249 count:1];
      id v32 = [MEMORY[0x263F087E8] errorWithDomain:@"com.apple.coreaudio.phase" code:1346920801 userInfo:v31];
LABEL_25:
      uint64_t v33 = 0;
      *a6 = v32;
      goto LABEL_210;
    }
LABEL_120:
    uint64_t v33 = 0;
    goto LABEL_211;
  }
  if (a2) {
    uint64_t v19 = 1;
  }
  else {
    uint64_t v19 = 3;
  }
  if (!v196)
  {
    uint64_t v20 = [(AVAudioFile *)v11 fileFormat];
    id v21 = [v20 channelLayout];

    if (!v21)
    {
      __int16 v55 = [(AVAudioFile *)v11 fileFormat];
      if ([v55 channelCount] == 1)
      {

LABEL_50:
        float32x4_t v58 = [(AVAudioFile *)v11 fileFormat];
        int v59 = [v58 channelCount];

        id v60 = objc_alloc(MEMORY[0x263EF9328]);
        if (v59 == 1) {
          uint64_t v61 = 6553601;
        }
        else {
          uint64_t v61 = 6619138;
        }
        unint64_t v197 = (Phase::Logger *)[v60 initWithLayoutTag:v61];
        goto LABEL_54;
      }
      uint64_t v56 = [(AVAudioFile *)v11 fileFormat];
      int v57 = [v56 channelCount];

      if (v57 == 2) {
        goto LABEL_50;
      }
      unint64_t v121 = NSString;
      unint64_t v122 = [(AVAudioFile *)v11 processingFormat];
      objc_msgSend(v121, "stringWithFormat:", @"Cannot synthesize audio channel layout for audio file '%s' with channel count %d.", a4, objc_msgSend(v122, "channelCount"));
      unint64_t v197 = (Phase::Logger *)objc_claimAutoreleasedReturnValue();

      unint64_t v124 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v123)
                                                                                           + 816)));
      if (os_log_type_enabled(v124, OS_LOG_TYPE_ERROR))
      {
        unint64_t v125 = *(void **)(a1 + 16);
        *(_DWORD *)buf = 136315906;
        *(void *)&uint8_t buf[4] = "ResidentSoundAssetInfo.mm";
        __int16 v228 = 1024;
        int v229 = 853;
        __int16 v230 = 2048;
        float v231 = v125;
        __int16 v232 = 2080;
        uint64_t v233 = [(Phase::Logger *)v197 UTF8String];
        _os_log_impl(&dword_221E5E000, v124, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", buf, 0x26u);
      }

      if (a6)
      {
        uint64_t v243 = *MEMORY[0x263F08320];
        v244 = v197;
        uint64_t v31 = [NSDictionary dictionaryWithObjects:&v244 forKeys:&v243 count:1];
        id v32 = [MEMORY[0x263F087E8] errorWithDomain:@"com.apple.coreaudio.phase" code:1346920801 userInfo:v31];
        goto LABEL_25;
      }
      goto LABEL_120;
    }
  }
  int32x4_t v22 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v18)
                                                                                      + 816)));
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    int32x4_t v23 = [(AVAudioFile *)v11 url];
    id v24 = [v23 absoluteString];
    uint64_t v25 = [(AVAudioFile *)v11 fileFormat];
    int v26 = [v25 channelLayout];
    Phase::ChannelLayout::GetStringFromLayoutTag((Phase::ChannelLayout *)[v26 layoutTag], __p);
    if ((v224 & 0x80000000) == 0) {
      BOOL v27 = __p;
    }
    else {
      BOOL v27 = *(unsigned char **)__p;
    }
    *(_DWORD *)buf = 136315906;
    *(void *)&uint8_t buf[4] = "ResidentSoundAssetInfo.mm";
    __int16 v228 = 1024;
    int v229 = 822;
    __int16 v230 = 2112;
    float v231 = v24;
    __int16 v232 = 2080;
    uint64_t v233 = (uint64_t)v27;
    _os_log_impl(&dword_221E5E000, v22, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Loading audio file %@  as resident with layout tag %s for assetId", buf, 0x26u);
    if (SBYTE3(v224) < 0) {
      operator delete(*(void **)__p);
    }
  }
  if (v196)
  {
    unint64_t v28 = (Phase::Logger *)v196;
  }
  else
  {
    int32x4_t v34 = [(AVAudioFile *)v11 fileFormat];
    uint64_t v35 = [v34 channelLayout];

    unint64_t v28 = (Phase::Logger *)v35;
  }
  unint64_t v197 = v28;
  if ((Phase::Controller::StreamRenderer::SupportsInputLayout(v28, v19) & 1) == 0)
  {
    float32x4_t v48 = NSString;
    Phase::ChannelLayout::GetStringFromLayoutTag((Phase::ChannelLayout *)[(Phase::Logger *)v197 layoutTag], buf);
    if (SBYTE3(v231) >= 0) {
      float32x4_t v49 = buf;
    }
    else {
      float32x4_t v49 = *(unsigned char **)buf;
    }
    objc_msgSend(v48, "stringWithFormat:", @"Unsupported channel layout '%s' on audio file '%s'!", v49, a4);
    int8x16_t v50 = (Phase::Logger *)objc_claimAutoreleasedReturnValue();
    uint64_t v31 = v50;
    if (SBYTE3(v231) < 0) {
      operator delete(*(void **)buf);
    }
    __int16 v51 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v50)
                                                                                        + 816)));
    if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
    {
      int v52 = *(void **)(a1 + 16);
      uint64_t v53 = [v31 UTF8String];
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "ResidentSoundAssetInfo.mm";
      __int16 v228 = 1024;
      int v229 = 829;
      __int16 v230 = 2048;
      float v231 = v52;
      __int16 v232 = 2080;
      uint64_t v233 = v53;
      _os_log_impl(&dword_221E5E000, v51, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", buf, 0x26u);
    }

    if (a6)
    {
      uint64_t v247 = *MEMORY[0x263F08320];
      uint64_t v248 = v31;
      uint64_t v54 = [NSDictionary dictionaryWithObjects:&v248 forKeys:&v247 count:1];
      *a6 = [MEMORY[0x263F087E8] errorWithDomain:@"com.apple.coreaudio.phase" code:1346920801 userInfo:v54];
    }
    goto LABEL_46;
  }
  unsigned __int16 v36 = [(Phase::Logger *)v197 layoutTag];
  uint64_t v37 = [(AVAudioFile *)v11 processingFormat];
  BOOL v38 = v36 == [v37 channelCount];

  if (!v38)
  {
    int32x4_t v39 = NSString;
    uint64_t v40 = buf;
    Phase::ChannelLayout::GetStringFromLayoutTag((Phase::ChannelLayout *)[(Phase::Logger *)v197 layoutTag], buf);
    if (SBYTE3(v231) < 0) {
      uint64_t v40 = *(unsigned char **)buf;
    }
    unsigned __int16 v41 = [(Phase::Logger *)v197 layoutTag];
    float32x4_t v42 = [(AVAudioFile *)v11 processingFormat];
    uint64_t v31 = [v39 stringWithFormat:@"Channel layout '%s' on audio file '%s' has mismatched channel count [layout: %d, file: %d]!", v40, a4, v41, objc_msgSend(v42, "channelCount")];

    if (SBYTE3(v231) < 0) {
      operator delete(*(void **)buf);
    }
    id v44 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v43)
                                                                                        + 816)));
    if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
    {
      uint64_t v45 = *(void **)(a1 + 16);
      uint64_t v46 = [v31 UTF8String];
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "ResidentSoundAssetInfo.mm";
      __int16 v228 = 1024;
      int v229 = 839;
      __int16 v230 = 2048;
      float v231 = v45;
      __int16 v232 = 2080;
      uint64_t v233 = v46;
      _os_log_impl(&dword_221E5E000, v44, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", buf, 0x26u);
    }

    if (a6)
    {
      uint64_t v245 = *MEMORY[0x263F08320];
      float v246 = v31;
      uint64_t v47 = [NSDictionary dictionaryWithObjects:&v246 forKeys:&v245 count:1];
      *a6 = [MEMORY[0x263F087E8] errorWithDomain:@"com.apple.coreaudio.phase" code:1346920801 userInfo:v47];
    }
LABEL_46:
    uint64_t v33 = 0;
    goto LABEL_210;
  }
LABEL_54:
  if (!v197) {
    goto LABEL_198;
  }
  *(_DWORD *)(a1 + 36) = [(Phase::Logger *)v197 layoutTag];
  id v62 = objc_alloc(MEMORY[0x263EF9388]);
  float64x2_t v63 = [(AVAudioFile *)v11 processingFormat];
  uint64_t v64 = [v63 commonFormat];
  char v65 = [(AVAudioFile *)v11 processingFormat];
  [v65 sampleRate];
  double v67 = v66;
  long long v68 = [(AVAudioFile *)v11 processingFormat];
  uint64_t v31 = objc_msgSend(v62, "initWithCommonFormat:sampleRate:interleaved:channelLayout:", v64, objc_msgSend(v68, "isInterleaved"), v197, v67);

  if (!v31)
  {
    objc_msgSend(NSString, "stringWithFormat:", @"[AVAudioFormat initWithCommonFormat] for input format failed on audio file '%s'", a4);
    unint64_t v193 = (Phase::Logger *)objc_claimAutoreleasedReturnValue();
    uint64_t v109 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v193)
                                                                                         + 816)));
    if (os_log_type_enabled(v109, OS_LOG_TYPE_ERROR))
    {
      unint64_t v110 = *(void **)(a1 + 16);
      uint64_t v111 = [(Phase::Logger *)v193 UTF8String];
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "ResidentSoundAssetInfo.mm";
      __int16 v228 = 1024;
      int v229 = 869;
      __int16 v230 = 2048;
      float v231 = v110;
      __int16 v232 = 2080;
      uint64_t v233 = v111;
      _os_log_impl(&dword_221E5E000, v109, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", buf, 0x26u);
    }

    if (a6)
    {
      uint64_t v241 = *MEMORY[0x263F08320];
      unint64_t v242 = v193;
      uint64_t v112 = [NSDictionary dictionaryWithObjects:&v242 forKeys:&v241 count:1];
      objc_msgSend(MEMORY[0x263F087E8], "errorWithDomain:code:userInfo:", @"com.apple.coreaudio.phase", 1346920801);
      uint64_t v33 = 0;
      *a6 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_208;
    }
    uint64_t v33 = 0;
    goto LABEL_209;
  }
  unint64_t v193 = (Phase::Logger *)[objc_alloc(MEMORY[0x263EF9388]) initWithCommonFormat:1 sampleRate:0 interleaved:v197 channelLayout:a7];
  if (!v193)
  {
    objc_msgSend(NSString, "stringWithFormat:", @"[AVAudioFormat initWithCommonFormat] for output format failed on audio file '%s'", a4);
    uint64_t v112 = (Phase::Logger *)objc_claimAutoreleasedReturnValue();
    float v113 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v112)
                                                                                         + 816)));
    if (os_log_type_enabled(v113, OS_LOG_TYPE_ERROR))
    {
      float v114 = *(void **)(a1 + 16);
      uint64_t v115 = [(Phase::Logger *)v112 UTF8String];
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "ResidentSoundAssetInfo.mm";
      __int16 v228 = 1024;
      int v229 = 883;
      __int16 v230 = 2048;
      float v231 = v114;
      __int16 v232 = 2080;
      uint64_t v233 = v115;
      _os_log_impl(&dword_221E5E000, v113, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", buf, 0x26u);
    }

    if (a6)
    {
      uint64_t v239 = *MEMORY[0x263F08320];
      uint64_t v240 = v112;
      float v116 = [NSDictionary dictionaryWithObjects:&v240 forKeys:&v239 count:1];
      *a6 = [MEMORY[0x263F087E8] errorWithDomain:@"com.apple.coreaudio.phase" code:1346920801 userInfo:v116];
    }
    unint64_t v193 = 0;
    goto LABEL_115;
  }
  uint64_t v69 = [(AVAudioFile *)v11 length];
  unsigned int v70 = v69 & ~(v69 >> 63);
  if (!v70)
  {
    objc_msgSend(NSString, "stringWithFormat:", @"Audio file '%s' must contain at least one sample frame!", a4);
    uint64_t v112 = (Phase::Logger *)objc_claimAutoreleasedReturnValue();
    float v117 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v112)
                                                                                         + 816)));
    if (os_log_type_enabled(v117, OS_LOG_TYPE_ERROR))
    {
      float v118 = *(void **)(a1 + 16);
      uint64_t v119 = [(Phase::Logger *)v112 UTF8String];
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "ResidentSoundAssetInfo.mm";
      __int16 v228 = 1024;
      int v229 = 895;
      __int16 v230 = 2048;
      float v231 = v118;
      __int16 v232 = 2080;
      uint64_t v233 = v119;
      _os_log_impl(&dword_221E5E000, v117, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", buf, 0x26u);
    }

    if (a6)
    {
      uint64_t v237 = *MEMORY[0x263F08320];
      unint64_t v238 = v112;
      uint64_t v120 = [NSDictionary dictionaryWithObjects:&v238 forKeys:&v237 count:1];
      *a6 = [MEMORY[0x263F087E8] errorWithDomain:@"com.apple.coreaudio.phase" code:1346920801 userInfo:v120];
    }
LABEL_115:
    uint64_t v33 = 0;
    goto LABEL_208;
  }
  [(Phase::Logger *)v193 sampleRate];
  double v72 = v71;
  [v31 sampleRate];
  LODWORD(v74) = vcvtpd_u64_f64(v72 / v73 * (double)v70);
  if (!v74) {
    goto LABEL_198;
  }
  unsigned int v190 = v74;
  Phase::Controller::ResidentSoundAssetInfo::AllocateAudioBuffer((Phase::Controller::ResidentSoundAssetInfo *)a1, (AVAudioFormat *)v193, v74);
  float32x4_t v75 = *(void **)(a1 + 48);
  if (!v75 || ![v75 floatChannelData]) {
    goto LABEL_198;
  }
  uint64_t v76 = v190 >= 0x800 ? 2048 : v190;
  unsigned int v189 = v76;
  unint64_t v191 = (AVAudioPCMBuffer *)[objc_alloc(MEMORY[0x263EF93B0]) initWithPCMFormat:v193 frameCapacity:v76];
  if (!v191 || ![(AVAudioPCMBuffer *)v191 floatChannelData]) {
    goto LABEL_198;
  }
  Phase::Controller::StreamRenderer::StreamRenderer((uint64_t)buf, v31, v193, v76, v19);
  if (!v234)
  {
    uint64_t v126 = NSString;
    unint64_t v127 = [v31 description];
    unint64_t v128 = [(Phase::Logger *)v193 description];
    uint64_t v192 = [v126 stringWithFormat:@"Failed to create Stream Renderer with input format '%@', output format '%@' and maximum frame count '%d' for audio file '%s'!", v127, v128, v76, a4];

    long long v130 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v129)
                                                                                         + 816)));
    if (os_log_type_enabled(v130, OS_LOG_TYPE_ERROR))
    {
      uint64_t v131 = *(void *)(a1 + 16);
      uint64_t v132 = [(AVAudioPCMBuffer *)v192 UTF8String];
      *(_DWORD *)long long __p = 136315906;
      *(void *)&__p[4] = "ResidentSoundAssetInfo.mm";
      __int16 v221 = 1024;
      int v222 = 949;
      __int16 v223 = 2048;
      uint64_t v224 = v131;
      __int16 v225 = 2080;
      uint64_t v226 = v132;
      _os_log_impl(&dword_221E5E000, v130, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", __p, 0x26u);
    }

    if (a6)
    {
      uint64_t v218 = *MEMORY[0x263F08320];
      float v219 = v192;
      unint64_t v108 = [NSDictionary dictionaryWithObjects:&v219 forKeys:&v218 count:1];
      objc_msgSend(MEMORY[0x263F087E8], "errorWithDomain:code:userInfo:", @"com.apple.coreaudio.phase", 1346920806);
      *a6 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_205;
    }
    goto LABEL_206;
  }
  if (a2 == 1)
  {
    float64x2_t v77 = [MEMORY[0x263F086E0] bundleWithIdentifier:@"com.apple.audio.PHASE"];
    float64x2_t v78 = [v77 URLForResource:@"MPEGDefault12LKFSSuperiorV2" withExtension:@"aupreset" subdirectory:@"AUPresets/AULoudnessNormalizer"];
    uint64_t v79 = Phase::Controller::StreamRenderer::SetPreset((uint64_t)buf, 0, v78, *(double *)(a1 + 40));
    if ((v79 & 1) == 0)
    {
      float v185 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance((Phase::Logger *)v79)
                                                                                           + 816)));
      if (os_log_type_enabled(v185, OS_LOG_TYPE_ERROR))
      {
        id v186 = [v78 description];
        uint64_t v187 = [v186 UTF8String];
        *(_DWORD *)long long __p = 136315906;
        *(void *)&__p[4] = "ResidentSoundAssetInfo.mm";
        __int16 v221 = 1024;
        int v222 = 968;
        __int16 v223 = 2080;
        uint64_t v224 = v187;
        __int16 v225 = 2080;
        uint64_t v226 = a4;
        _os_log_impl(&dword_221E5E000, v185, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [not presetWasLoaded is true]: \"Failed to load preset '%s' for audio file '%s'!\"", __p, 0x26u);
      }
      exceptioint n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Failed to load preset '%s' for audio file '%s'!");
    }
  }
  BOOL v80 = Phase::Controller::StreamRenderer::Prepare((Phase::Controller::StreamRenderer *)buf);
  if (v234) {
    BOOL v81 = v80;
  }
  else {
    BOOL v81 = 0;
  }
  if (!v81 || !v235)
  {
    float v183 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)v80) + 816);
    if (os_log_type_enabled(v183, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long __p = 136315650;
      *(void *)&__p[4] = "ResidentSoundAssetInfo.mm";
      __int16 v221 = 1024;
      int v222 = 977;
      __int16 v223 = 2080;
      uint64_t v224 = a4;
      _os_log_impl(&dword_221E5E000, v183, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [!prepared || !streamRenderer.IsPrepared() is true]: \"Failed to prepare stream renderer for audio file '%s'!\"", __p, 0x1Cu);
    }
    float v184 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v184, "Failed to prepare stream renderer for audio file '%s'!");
  }
  if (a2 == 1)
  {
    [v31 sampleRate];
    unsigned int v83 = vcvtpd_u64_f64(v82);
    if (v70 >= v83) {
      vDSP_Length v84 = v83;
    }
    else {
      vDSP_Length v84 = v70;
    }
    if (!v84) {
      goto LABEL_198;
    }
    uint64_t v85 = (AVAudioPCMBuffer *)[objc_alloc(MEMORY[0x263EF93B0]) initWithPCMFormat:v31 frameCapacity:v84];
    unint64_t v86 = v85;
    if (!v85 || ![(AVAudioPCMBuffer *)v85 floatChannelData]) {
      goto LABEL_198;
    }
    id v199 = 0;
    uint64_t v192 = v86;
    BOOL v87 = [(AVAudioFile *)v11 readIntoBuffer:v86 frameCount:v84 error:&v199];
    uint64_t v88 = (Phase::Logger *)v199;
    if (v88) {
      BOOL v89 = 0;
    }
    else {
      BOOL v89 = v87;
    }
    if (!v89)
    {
      unint64_t v108 = v88;
      objc_msgSend(NSString, "stringWithFormat:", @"Failed to read %d sample frames for audio file '%s'!", v84, a4);
      uint64_t v103 = (Phase::Logger *)objc_claimAutoreleasedReturnValue();
      unint64_t v156 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v103)
                                                                                           + 816)));
      if (os_log_type_enabled(v156, OS_LOG_TYPE_ERROR))
      {
        uint64_t v157 = *(void *)(a1 + 16);
        uint64_t v158 = [(Phase::Logger *)v103 UTF8String];
        *(_DWORD *)long long __p = 136315906;
        *(void *)&__p[4] = "ResidentSoundAssetInfo.mm";
        __int16 v221 = 1024;
        int v222 = 1012;
        __int16 v223 = 2048;
        uint64_t v224 = v157;
        __int16 v225 = 2080;
        uint64_t v226 = v158;
        _os_log_impl(&dword_221E5E000, v156, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", __p, 0x26u);
      }

      if (a6)
      {
        uint64_t v216 = *MEMORY[0x263F08320];
        uint64_t v217 = v103;
        unint64_t v159 = [NSDictionary dictionaryWithObjects:&v217 forKeys:&v216 count:1];
        *a6 = [MEMORY[0x263F087E8] errorWithDomain:@"com.apple.coreaudio.phase" code:1346920806 userInfo:v159];
      }
      goto LABEL_204;
    }
    unsigned int v90 = [(AVAudioPCMBuffer *)v86 frameLength];
    if (v90 < [(AVAudioPCMBuffer *)v86 frameCapacity])
    {
      uint64_t v91 = [(AVAudioFile *)v11 framePosition];
      if (v91 != [(AVAudioPCMBuffer *)v86 frameLength]) {
        goto LABEL_198;
      }
      AVAudioFrameCount v92 = [(AVAudioPCMBuffer *)v86 frameCapacity];
      uint64_t v93 = v92 - [(AVAudioPCMBuffer *)v86 frameLength];
      float v94 = (Phase::Logger *)[objc_alloc(MEMORY[0x263EF93B0]) initWithPCMFormat:v31 frameCapacity:v93];
      if (!v94) {
        goto LABEL_198;
      }
      while (1)
      {
        unsigned int v95 = [(AVAudioPCMBuffer *)v86 frameLength];
        if (v95 >= [(AVAudioPCMBuffer *)v86 frameCapacity]) {
          break;
        }
        AVAudioFrameCount v96 = [(AVAudioPCMBuffer *)v86 frameCapacity];
        unsigned int v97 = v96 - [(AVAudioPCMBuffer *)v86 frameLength];
        if (v93 >= v97) {
          uint64_t v98 = v97;
        }
        else {
          uint64_t v98 = v93;
        }
        id v198 = 0;
        float v99 = v94;
        BOOL v100 = [(AVAudioFile *)v11 readIntoBuffer:v94 frameCount:v98 error:&v198];
        float v101 = (Phase::Logger *)v198;
        if (v101) {
          BOOL v102 = 0;
        }
        else {
          BOOL v102 = v100;
        }
        if (!v102)
        {
          unint64_t v108 = v101;
          objc_msgSend(NSString, "stringWithFormat:", @"Failed to read %d sample frames for audio file '%s'!", v98, a4);
          unint64_t v107 = (Phase::Logger *)objc_claimAutoreleasedReturnValue();
          unint64_t v172 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v107)
                                                                                               + 816)));
          if (os_log_type_enabled(v172, OS_LOG_TYPE_ERROR))
          {
            uint64_t v173 = *(void *)(a1 + 16);
            uint64_t v174 = [(Phase::Logger *)v107 UTF8String];
            *(_DWORD *)long long __p = 136315906;
            *(void *)&__p[4] = "ResidentSoundAssetInfo.mm";
            __int16 v221 = 1024;
            int v222 = 1063;
            __int16 v223 = 2048;
            uint64_t v224 = v173;
            __int16 v225 = 2080;
            uint64_t v226 = v174;
            _os_log_impl(&dword_221E5E000, v172, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", __p, 0x26u);
          }

          if (a6)
          {
            uint64_t v214 = *MEMORY[0x263F08320];
            unint64_t v215 = v107;
            unint64_t v175 = [NSDictionary dictionaryWithObjects:&v215 forKeys:&v214 count:1];
            *a6 = [MEMORY[0x263F087E8] errorWithDomain:@"com.apple.coreaudio.phase" code:1346920801 userInfo:v175];
          }
          uint64_t v103 = v99;
LABEL_191:

          goto LABEL_204;
        }
        float v94 = v99;
        if (([(AVAudioPCMBuffer *)v86 appendDataFromBuffer:v99] & 1) == 0)
        {
          objc_msgSend(NSString, "stringWithFormat:", @"Failed to append buffer for audio file '%s'!", a4);
          uint64_t v103 = (Phase::Logger *)objc_claimAutoreleasedReturnValue();
          unint64_t v104 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v103)
                                                                                               + 816)));
          if (os_log_type_enabled(v104, OS_LOG_TYPE_ERROR))
          {
            uint64_t v105 = *(void *)(a1 + 16);
            uint64_t v106 = [(Phase::Logger *)v103 UTF8String];
            *(_DWORD *)long long __p = 136315906;
            *(void *)&__p[4] = "ResidentSoundAssetInfo.mm";
            __int16 v221 = 1024;
            int v222 = 1072;
            __int16 v223 = 2048;
            uint64_t v224 = v105;
            __int16 v225 = 2080;
            uint64_t v226 = v106;
            _os_log_impl(&dword_221E5E000, v104, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", __p, 0x26u);
          }

          if (a6)
          {
            uint64_t v212 = *MEMORY[0x263F08320];
            unint64_t v213 = v103;
            unint64_t v107 = [NSDictionary dictionaryWithObjects:&v213 forKeys:&v212 count:1];
            *a6 = [MEMORY[0x263F087E8] errorWithDomain:@"com.apple.coreaudio.phase" code:1346920801 userInfo:v107];
            unint64_t v108 = v99;
            goto LABEL_191;
          }
          unint64_t v108 = v99;
LABEL_204:

          goto LABEL_205;
        }
      }
      uint64_t v163 = [(AVAudioFile *)v11 framePosition];
      if (v163 != [(AVAudioPCMBuffer *)v86 frameLength]) {
        goto LABEL_198;
      }
      AVAudioFrameCount v164 = [(AVAudioPCMBuffer *)v86 frameLength];
      if (v164 != [(AVAudioPCMBuffer *)v86 frameCapacity]
        || [(AVAudioPCMBuffer *)v86 frameCapacity] != v84)
      {
        goto LABEL_198;
      }
    }
    unint64_t v165 = 0;
    for (uint64_t i = 16; ; i += 16)
    {
      unint64_t v167 = [(AVAudioPCMBuffer *)v192 format];
      BOOL v168 = v165 < [v167 channelCount];

      if (!v168) {
        break;
      }
      vDSP_vrvrs(*(float **)([(AVAudioPCMBuffer *)v192 mutableAudioBufferList] + i), 1, v84);
      ++v165;
    }
    uint64_t v134 = v192;
    unint64_t v135 = v193;
    if (!Phase::Controller::StreamRenderer::ScheduleBuffer((Phase::Controller::StreamRenderer *)buf, v192, 0, 1uLL))
    {
      objc_msgSend(NSString, "stringWithFormat:", @"Failed to schedule reverse audio buffer from audio file '%s' for rendering!", a4);
      unint64_t v108 = (Phase::Logger *)objc_claimAutoreleasedReturnValue();
      int32x2_t v169 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v108)
                                                                                           + 816)));
      if (os_log_type_enabled(v169, OS_LOG_TYPE_ERROR))
      {
        uint64_t v170 = *(void *)(a1 + 16);
        uint64_t v171 = [(Phase::Logger *)v108 UTF8String];
        *(_DWORD *)long long __p = 136315906;
        *(void *)&__p[4] = "ResidentSoundAssetInfo.mm";
        __int16 v221 = 1024;
        int v222 = 1096;
        __int16 v223 = 2048;
        uint64_t v224 = v170;
        __int16 v225 = 2080;
        uint64_t v226 = v171;
        _os_log_impl(&dword_221E5E000, v169, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", __p, 0x26u);
      }

      if (!a6) {
        goto LABEL_205;
      }
      uint64_t v210 = *MEMORY[0x263F08320];
      uint64_t v211 = v108;
      uint64_t v103 = [NSDictionary dictionaryWithObjects:&v211 forKeys:&v210 count:1];
      id v152 = [MEMORY[0x263F087E8] errorWithDomain:@"com.apple.coreaudio.phase" code:1346920801 userInfo:v103];
LABEL_203:
      *a6 = v152;
      goto LABEL_204;
    }
  }
  else
  {
    float v133 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)v80) + 816);
    if (os_log_type_enabled(v133, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long __p = 136315906;
      *(void *)&__p[4] = "ResidentSoundAssetInfo.mm";
      __int16 v221 = 1024;
      int v222 = 1106;
      __int16 v223 = 2080;
      uint64_t v224 = a4;
      __int16 v225 = 2048;
      uint64_t v226 = 0;
      _os_log_impl(&dword_221E5E000, v133, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Skipping reversed audio buffer algorithm for gain-stabilized normalization for audio file '%s'. The reversed time in seconds is %f.", __p, 0x26u);
    }
    uint64_t v134 = 0;
    unint64_t v135 = v193;
  }
  uint64_t v192 = v134;
  if (!Phase::Controller::StreamRenderer::ScheduleFile((Phase::Controller::StreamRenderer *)buf, v11, 0, 0))
  {
    objc_msgSend(NSString, "stringWithFormat:", @"Failed to schedule reverse audio buffer from audio file '%s' for rendering!", a4);
    unint64_t v108 = (Phase::Logger *)objc_claimAutoreleasedReturnValue();
    unint64_t v153 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v108)
                                                                                         + 816)));
    if (os_log_type_enabled(v153, OS_LOG_TYPE_ERROR))
    {
      uint64_t v154 = *(void *)(a1 + 16);
      uint64_t v155 = [(Phase::Logger *)v108 UTF8String];
      *(_DWORD *)long long __p = 136315906;
      *(void *)&__p[4] = "ResidentSoundAssetInfo.mm";
      __int16 v221 = 1024;
      int v222 = 1115;
      __int16 v223 = 2048;
      uint64_t v224 = v154;
      __int16 v225 = 2080;
      uint64_t v226 = v155;
      _os_log_impl(&dword_221E5E000, v153, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", __p, 0x26u);
    }

    if (!a6) {
      goto LABEL_205;
    }
    uint64_t v208 = *MEMORY[0x263F08320];
    unint64_t v209 = v108;
    uint64_t v103 = [NSDictionary dictionaryWithObjects:&v209 forKeys:&v208 count:1];
    id v152 = [MEMORY[0x263F087E8] errorWithDomain:@"com.apple.coreaudio.phase" code:1346920801 userInfo:v103];
    goto LABEL_203;
  }
  int v136 = Phase::Controller::StreamRenderer::Start((Phase::Controller::StreamRenderer *)buf);
  if (v234) {
    int v137 = v136;
  }
  else {
    int v137 = 0;
  }
  if (v137 != 1 || !v235 || !v236)
  {
    objc_msgSend(NSString, "stringWithFormat:", @"Failed to start stream renderer for audio file '%s'!", a4);
    unint64_t v108 = (Phase::Logger *)objc_claimAutoreleasedReturnValue();
    unint64_t v160 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v108)
                                                                                         + 816)));
    if (os_log_type_enabled(v160, OS_LOG_TYPE_ERROR))
    {
      uint64_t v161 = *(void *)(a1 + 16);
      uint64_t v162 = [(Phase::Logger *)v108 UTF8String];
      *(_DWORD *)long long __p = 136315906;
      *(void *)&__p[4] = "ResidentSoundAssetInfo.mm";
      __int16 v221 = 1024;
      int v222 = 1125;
      __int16 v223 = 2048;
      uint64_t v224 = v161;
      __int16 v225 = 2080;
      uint64_t v226 = v162;
      _os_log_impl(&dword_221E5E000, v160, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", __p, 0x26u);
    }

    if (!a6) {
      goto LABEL_205;
    }
    uint64_t v206 = *MEMORY[0x263F08320];
    float v207 = v108;
    uint64_t v103 = [NSDictionary dictionaryWithObjects:&v207 forKeys:&v206 count:1];
    id v152 = [MEMORY[0x263F087E8] errorWithDomain:@"com.apple.coreaudio.phase" code:1346920801 userInfo:v103];
    goto LABEL_203;
  }
  if (v134)
  {
    [(Phase::Logger *)v135 sampleRate];
    double v139 = 0.0;
    if (a2 == 1) {
      double v139 = 1.0;
    }
    unsigned int v140 = vcvtpd_u64_f64(v139 * v138);
    unsigned int v141 = 0;
    if (v190 >= v140) {
      unsigned int v142 = v140;
    }
    else {
      unsigned int v142 = v190;
    }
    if (v142)
    {
      while (1)
      {
        unint64_t v143 = v189 >= v142 - v141 ? v142 - v141 : v189;
        if (!Phase::Controller::StreamRenderer::RenderOffline((Phase::Controller::StreamRenderer *)buf, v143, v191)) {
          break;
        }
        if (v143 != [(AVAudioPCMBuffer *)v191 frameLength]) {
          goto LABEL_198;
        }
        v141 += v143;
        if (v141 >= v142) {
          goto LABEL_148;
        }
      }
      objc_msgSend(NSString, "stringWithFormat:", @"Failed to render buffer for audio file '%s'!", a4);
      unint64_t v108 = (Phase::Logger *)objc_claimAutoreleasedReturnValue();
      uint64_t v179 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v108)
                                                                                           + 816)));
      if (os_log_type_enabled(v179, OS_LOG_TYPE_ERROR))
      {
        uint64_t v180 = *(void *)(a1 + 16);
        uint64_t v181 = [(Phase::Logger *)v108 UTF8String];
        *(_DWORD *)long long __p = 136315906;
        *(void *)&__p[4] = "ResidentSoundAssetInfo.mm";
        __int16 v221 = 1024;
        int v222 = 1148;
        __int16 v223 = 2048;
        uint64_t v224 = v180;
        __int16 v225 = 2080;
        uint64_t v226 = v181;
        _os_log_impl(&dword_221E5E000, v179, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", __p, 0x26u);
      }

      if (!a6) {
        goto LABEL_205;
      }
      uint64_t v204 = *MEMORY[0x263F08320];
      float v205 = v108;
      uint64_t v103 = [NSDictionary dictionaryWithObjects:&v205 forKeys:&v204 count:1];
      id v152 = [MEMORY[0x263F087E8] errorWithDomain:@"com.apple.coreaudio.phase" code:1346920801 userInfo:v103];
      goto LABEL_203;
    }
LABEL_148:
    BOOL v144 = v141 == v142;
    uint64_t v134 = v192;
    if (!v144) {
      goto LABEL_198;
    }
  }
  if ([*(id *)(a1 + 48) frameCapacity] < v190) {
LABEL_198:
  }
    std::terminate();
  do
  {
    unsigned int v145 = [*(id *)(a1 + 48) frameLength];
    uint64_t v146 = *(void **)(a1 + 48);
    if (v145 >= v190)
    {
      if ([v146 frameLength] == v190)
      {
        uint64_t v33 = 1;
        goto LABEL_207;
      }
      goto LABEL_198;
    }
    unsigned int v147 = v190 - [v146 frameLength];
    if (v189 >= v147) {
      unint64_t v148 = v147;
    }
    else {
      unint64_t v148 = v189;
    }
    if (!Phase::Controller::StreamRenderer::RenderOffline((Phase::Controller::StreamRenderer *)buf, v148, v191))
    {
      objc_msgSend(NSString, "stringWithFormat:", @"Failed to render buffer for audio file '%s'!", a4);
      unint64_t v108 = (Phase::Logger *)objc_claimAutoreleasedReturnValue();
      uint64_t v176 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v108)
                                                                                           + 816)));
      if (os_log_type_enabled(v176, OS_LOG_TYPE_ERROR))
      {
        uint64_t v177 = *(void *)(a1 + 16);
        uint64_t v178 = [(Phase::Logger *)v108 UTF8String];
        *(_DWORD *)long long __p = 136315906;
        *(void *)&__p[4] = "ResidentSoundAssetInfo.mm";
        __int16 v221 = 1024;
        int v222 = 1171;
        __int16 v223 = 2048;
        uint64_t v224 = v177;
        __int16 v225 = 2080;
        uint64_t v226 = v178;
        _os_log_impl(&dword_221E5E000, v176, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", __p, 0x26u);
      }

      if (!a6) {
        goto LABEL_205;
      }
      uint64_t v202 = *MEMORY[0x263F08320];
      float v203 = v108;
      uint64_t v103 = [NSDictionary dictionaryWithObjects:&v203 forKeys:&v202 count:1];
      id v152 = [MEMORY[0x263F087E8] errorWithDomain:@"com.apple.coreaudio.phase" code:1346920801 userInfo:v103];
      goto LABEL_203;
    }
    if (v148 != [(AVAudioPCMBuffer *)v191 frameLength]) {
      goto LABEL_198;
    }
  }
  while (([*(id *)(a1 + 48) appendDataFromBuffer:v191] & 1) != 0);
  objc_msgSend(NSString, "stringWithFormat:", @"Failed to append buffer for audio file '%s'!", a4);
  unint64_t v108 = (Phase::Logger *)objc_claimAutoreleasedReturnValue();
  float v149 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v108)
                                                                                       + 816)));
  if (os_log_type_enabled(v149, OS_LOG_TYPE_ERROR))
  {
    uint64_t v150 = *(void *)(a1 + 16);
    uint64_t v151 = [(Phase::Logger *)v108 UTF8String];
    *(_DWORD *)long long __p = 136315906;
    *(void *)&__p[4] = "ResidentSoundAssetInfo.mm";
    __int16 v221 = 1024;
    int v222 = 1181;
    __int16 v223 = 2048;
    uint64_t v224 = v150;
    __int16 v225 = 2080;
    uint64_t v226 = v151;
    _os_log_impl(&dword_221E5E000, v149, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", __p, 0x26u);
  }

  if (a6)
  {
    uint64_t v200 = *MEMORY[0x263F08320];
    float v201 = v108;
    uint64_t v103 = [NSDictionary dictionaryWithObjects:&v201 forKeys:&v200 count:1];
    id v152 = [MEMORY[0x263F087E8] errorWithDomain:@"com.apple.coreaudio.phase" code:1346920801 userInfo:v103];
    goto LABEL_203;
  }
LABEL_205:

LABEL_206:
  uint64_t v33 = 0;
  uint64_t v134 = v192;
LABEL_207:

  Phase::Controller::StreamRenderer::~StreamRenderer((Phase::Controller::StreamRenderer *)buf);
  uint64_t v112 = (Phase::Logger *)v191;
LABEL_208:

LABEL_209:
LABEL_210:

LABEL_211:
  return v33;
}

void sub_22204B154()
{
  __cxa_end_catch();
  JUMPOUT(0x22204B2B0);
}

void sub_22204B18C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _Unwind_Exception *exception_object)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_22204B1AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  JUMPOUT(0x22204B394);
}

void sub_22204B1C4()
{
  JUMPOUT(0x22204B298);
}

void sub_22204B1D0()
{
  JUMPOUT(0x22204B318);
}

void sub_22204B1E4()
{
  JUMPOUT(0x22204B394);
}

void sub_22204B1FC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a60 < 0) {
    operator delete(__p);
  }

  JUMPOUT(0x22204B394);
}

void sub_22204B23C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a60 < 0) {
    operator delete(__p);
  }

  JUMPOUT(0x22204B394);
}

void sub_22204B254(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  JUMPOUT(0x22204B394);
}

void sub_22204B268()
{
  JUMPOUT(0x22204B394);
}

void sub_22204B270()
{
}

void sub_22204B278()
{
}

void sub_22204B280()
{
}

void sub_22204B288(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  JUMPOUT(0x22204B394);
}

void sub_22204B294(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  Phase::Controller::StreamRenderer::~StreamRenderer((Phase::Controller::StreamRenderer *)&a55);
  JUMPOUT(0x22204B394);
}

void sub_22204B2C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  JUMPOUT(0x22204B394);
}

void sub_22204B2D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  JUMPOUT(0x22204B394);
}

void sub_22204B304(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  JUMPOUT(0x22204B394);
}

void sub_22204B324()
{
  JUMPOUT(0x22204B32CLL);
}

void sub_22204B358()
{
  JUMPOUT(0x22204B36CLL);
}

void sub_22204B374(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  JUMPOUT(0x22204B394);
}

void sub_22204B384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::ResidentSoundAssetInfo::InitWithData(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, AudioFileTypeID a5, void *a6, double a7, double a8, uint64_t a9, uint64_t a10)
{
  uint64_t v75 = *MEMORY[0x263EF8340];
  id v18 = a4;
  id v19 = a6;
  BOOL v20 = Phase::Controller::SoundAssetInfo::BaseInit(a1, 0, a2, a3, (void *)a10, a8);
  if (v20)
  {
    id v21 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)v20) + 816);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v22 = *(void *)(a1 + 16);
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "ResidentSoundAssetInfo.mm";
      __int16 v69 = 1024;
      int v70 = 165;
      __int16 v71 = 2048;
      uint64_t v72 = v22;
      _os_log_impl(&dword_221E5E000, v21, OS_LOG_TYPE_DEFAULT, "%25s:%-5d ResidentSoundAssetInfo::InitWithData for assetId %llu", buf, 0x1Cu);
    }
    int32x4_t v23 = (void *)MEMORY[0x223C93F80]();
    *(_DWORD *)(a1 + 32) = 1;
    if (!v18)
    {
      BOOL v38 = [NSString stringWithFormat:@"NSData was nil"];
      int32x4_t v39 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v38)
                                                                                          + 816)));
      if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
      {
        uint64_t v40 = *(void *)(a1 + 16);
        uint64_t v41 = [(Phase::Logger *)v38 UTF8String];
        *(_DWORD *)buf = 136315906;
        *(void *)&uint8_t buf[4] = "ResidentSoundAssetInfo.mm";
        __int16 v69 = 1024;
        int v70 = 173;
        __int16 v71 = 2048;
        uint64_t v72 = v40;
        __int16 v73 = 2080;
        uint64_t v74 = v41;
        _os_log_impl(&dword_221E5E000, v39, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", buf, 0x26u);
      }

      if (a10)
      {
        uint64_t v66 = *MEMORY[0x263F08320];
        double v67 = v38;
        float32x4_t v42 = [NSDictionary dictionaryWithObjects:&v67 forKeys:&v66 count:1];
        *(void *)a10 = [MEMORY[0x263F087E8] errorWithDomain:@"com.apple.coreaudio.phase" code:1346920805 userInfo:v42];
      }
      a10 = 0;
      goto LABEL_37;
    }
    id v60 = 0;
    AudioFileID inFileID = 0;
    if ((Phase::Controller::InMemoryAudioFile::Init((uint64_t)&v60, v18, a5, *(void *)(a1 + 16), (void *)a10) & 1) == 0)
    {
      a10 = 0;
LABEL_36:
      Phase::Controller::InMemoryAudioFile::~InMemoryAudioFile((Phase::Controller::InMemoryAudioFile *)&v60);
LABEL_37:
      goto LABEL_38;
    }
    ExtAudioFileRef outExtAudioFile = 0;
    OSStatus v24 = ExtAudioFileWrapAudioFileID(inFileID, 0, &outExtAudioFile);
    if (v24)
    {
      id v25 = [MEMORY[0x263F087E8] errorWithDomain:*MEMORY[0x263F08410] code:v24 userInfo:0];
      int v26 = NSString;
      Phase::Controller::InMemoryAudioFile::Description(&v60, buf);
      int v27 = SBYTE3(v72);
      unint64_t v28 = *(unsigned char **)buf;
      uint64_t v29 = [v25 description];
      uint64_t v30 = (void *)v29;
      uint64_t v31 = buf;
      if (v27 < 0) {
        uint64_t v31 = v28;
      }
      id v32 = [v26 stringWithFormat:@"ExtAudioFileWrapAudioFileID() failed to wrap audio file data '%s' with error '%@'.", v31, v29];

      if (SBYTE3(v72) < 0) {
        operator delete(*(void **)buf);
      }
      int32x4_t v34 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v33)
                                                                                          + 816)));
      if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
      {
        uint64_t v35 = *(void *)(a1 + 16);
        uint64_t v36 = [v32 UTF8String];
        *(_DWORD *)buf = 136315906;
        *(void *)&uint8_t buf[4] = "ResidentSoundAssetInfo.mm";
        __int16 v69 = 1024;
        int v70 = 195;
        __int16 v71 = 2048;
        uint64_t v72 = v35;
        __int16 v73 = 2080;
        uint64_t v74 = v36;
        _os_log_impl(&dword_221E5E000, v34, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", buf, 0x26u);
      }

      if (!a10) {
        goto LABEL_35;
      }
      uint64_t v64 = *MEMORY[0x263F08320];
      char v65 = v32;
      uint64_t v37 = [NSDictionary dictionaryWithObjects:&v65 forKeys:&v64 count:1];
      *(void *)a10 = [MEMORY[0x263F087E8] errorWithDomain:@"com.apple.coreaudio.phase" code:1346920801 userInfo:v37];
    }
    else
    {
      if (!outExtAudioFile) {
        std::terminate();
      }
      id v43 = objc_alloc(MEMORY[0x263EF9380]);
      id v58 = 0;
      id v32 = (void *)[v43 initForReadingFromExtAudioFile:outExtAudioFile error:&v58];
      id v25 = v58;
      if (v25)
      {
      }
      else if (v32)
      {
        Phase::Controller::InMemoryAudioFile::Description(&v60, buf);
        if ((v72 & 0x80000000) == 0) {
          int v57 = buf;
        }
        else {
          int v57 = *(unsigned char **)buf;
        }
        a10 = Phase::Controller::ResidentSoundAssetInfo::InitializeWithAudioFile(a1, a3, v32, (uint64_t)v57, v19, (void *)a10, a7);
        if (SBYTE3(v72) < 0) {
          operator delete(*(void **)buf);
        }
        id v25 = 0;
        if (a10)
        {
          *(_DWORD *)(a1 + 32) = 4;
          a10 = 1;
        }
        goto LABEL_35;
      }
      id v44 = NSString;
      Phase::Controller::InMemoryAudioFile::Description(&v60, buf);
      int v45 = SBYTE3(v72);
      uint64_t v46 = *(unsigned char **)buf;
      uint64_t v47 = [v25 description];
      float32x4_t v48 = (void *)v47;
      float32x4_t v49 = buf;
      if (v45 < 0) {
        float32x4_t v49 = v46;
      }
      int8x16_t v50 = [v44 stringWithFormat:@"[AVAudioFile initForReading] failed on file '%s' with error '%@'", v49, v47];

      if (SBYTE3(v72) < 0) {
        operator delete(*(void **)buf);
      }
      int v52 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v51)
                                                                                          + 816)));
      if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
      {
        uint64_t v53 = *(void *)(a1 + 16);
        uint64_t v54 = [v50 UTF8String];
        *(_DWORD *)buf = 136315906;
        *(void *)&uint8_t buf[4] = "ResidentSoundAssetInfo.mm";
        __int16 v69 = 1024;
        int v70 = 215;
        __int16 v71 = 2048;
        uint64_t v72 = v53;
        __int16 v73 = 2080;
        uint64_t v74 = v54;
        _os_log_impl(&dword_221E5E000, v52, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", buf, 0x26u);
      }

      if (a10)
      {
        uint64_t v62 = *MEMORY[0x263F08320];
        float64x2_t v63 = v50;
        __int16 v55 = [NSDictionary dictionaryWithObjects:&v63 forKeys:&v62 count:1];
        *(void *)a10 = [MEMORY[0x263F087E8] errorWithDomain:@"com.apple.coreaudio.phase" code:1346920801 userInfo:v55];
      }
      id v32 = 0;
    }
    a10 = 0;
LABEL_35:

    goto LABEL_36;
  }
  a10 = 0;
LABEL_38:

  return a10;
}

void sub_22204BA60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }

  Phase::Controller::InMemoryAudioFile::~InMemoryAudioFile((Phase::Controller::InMemoryAudioFile *)&a13);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::ResidentSoundAssetInfo::InitWithData(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, double a6, double a7, uint64_t a8, void *a9)
{
  v292[1] = *MEMORY[0x263EF8340];
  id v16 = a4;
  id v17 = a5;
  BOOL v18 = Phase::Controller::SoundAssetInfo::BaseInit(a1, 0, a2, a3, a9, a7);
  if (v18)
  {
    id v19 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)v18) + 816);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v20 = *(void *)(a1 + 16);
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "ResidentSoundAssetInfo.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 243;
      __int16 v266 = 2048;
      uint64_t v267 = v20;
      _os_log_impl(&dword_221E5E000, v19, OS_LOG_TYPE_DEFAULT, "%25s:%-5d ResidentSoundAssetInfo::InitWithData for assetId %llu", buf, 0x1Cu);
    }
    context = (void *)MEMORY[0x223C93F80]();
    *(_DWORD *)(a1 + 32) = 1;
    if (v16 && [v16 length])
    {
      if (a6 <= 0.0)
      {
        id v32 = NSString;
        uint64_t v33 = [v16 description];
        OSStatus v24 = [v32 stringWithFormat:@"Invalid sample rate %f for data '%@'!", *(void *)&a6, v33];

        uint64_t v35 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v34)
                                                                                            + 816)));
        if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
        {
          uint64_t v36 = *(void *)(a1 + 16);
          uint64_t v37 = [v24 UTF8String];
          *(_DWORD *)buf = 136315906;
          *(void *)&uint8_t buf[4] = "ResidentSoundAssetInfo.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 260;
          __int16 v266 = 2048;
          uint64_t v267 = v36;
          __int16 v268 = 2080;
          uint64_t v269 = v37;
          _os_log_impl(&dword_221E5E000, v35, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", buf, 0x26u);
        }

        if (!a9) {
          goto LABEL_61;
        }
        uint64_t v289 = *MEMORY[0x263F08320];
        float32x4_t v290 = v24;
        uint64_t v30 = [NSDictionary dictionaryWithObjects:&v290 forKeys:&v289 count:1];
        objc_msgSend(MEMORY[0x263F087E8], "errorWithDomain:code:userInfo:", @"com.apple.coreaudio.phase", 1346920801);
        id v31 = (id)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        if (v17)
        {
          uint64_t v21 = 3;
          if (a3) {
            uint64_t v21 = 1;
          }
          uint64_t v234 = (AVAudioPCMBuffer *)v21;
          uint64_t v22 = [v17 channelLayout];
          BOOL v23 = v22 == 0;

          if (!v23)
          {
            OSStatus v24 = [v17 channelLayout];
            if ((Phase::Controller::StreamRenderer::SupportsInputLayout(v24, (char)v234) & 1) == 0)
            {
              float32x4_t v49 = NSString;
              Phase::ChannelLayout::GetStringFromLayoutTag((Phase::ChannelLayout *)[v24 layoutTag], buf);
              int v50 = SBYTE3(v267);
              __int16 v51 = *(unsigned char **)buf;
              uint64_t v52 = [v16 description];
              uint64_t v53 = (void *)v52;
              uint64_t v54 = buf;
              if (v50 < 0) {
                uint64_t v54 = v51;
              }
              __int16 v55 = [v49 stringWithFormat:@"Unsupported channel layout '%s' on audio data '%@'!", v54, v52];

              if (SBYTE3(v267) < 0) {
                operator delete(*(void **)buf);
              }
              int v57 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v56)
                                                                                                  + 816)));
              if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
              {
                uint64_t v58 = *(void *)(a1 + 16);
                uint64_t v59 = [v55 UTF8String];
                *(_DWORD *)buf = 136315906;
                *(void *)&uint8_t buf[4] = "ResidentSoundAssetInfo.mm";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 292;
                __int16 v266 = 2048;
                uint64_t v267 = v58;
                __int16 v268 = 2080;
                uint64_t v269 = v59;
                _os_log_impl(&dword_221E5E000, v57, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", buf, 0x26u);
              }

              if (a9)
              {
                uint64_t v285 = *MEMORY[0x263F08320];
                float32x4_t v286 = v55;
                id v60 = [NSDictionary dictionaryWithObjects:&v286 forKeys:&v285 count:1];
                *a9 = [MEMORY[0x263F087E8] errorWithDomain:@"com.apple.coreaudio.phase" code:1346920801 userInfo:v60];
              }
              uint64_t v26 = 0;
              uint64_t v30 = v55;
              goto LABEL_27;
            }
            id v25 = v24;
LABEL_34:
            if (!v25) {
              goto LABEL_214;
            }
            *(_DWORD *)(a1 + 36) = [v25 layoutTag];
            uint64_t v233 = v25;
            if ([v17 commonFormat])
            {
              if (*(_DWORD *)([v17 streamDescription] + 24))
              {
                if (*(_DWORD *)([v17 streamDescription] + 28))
                {
                  if ([v17 isInterleaved])
                  {
                    unsigned int v47 = *(_DWORD *)([v17 streamDescription] + 24);
                    int v48 = v47 / *(_DWORD *)([v17 streamDescription] + 28);
                  }
                  else
                  {
                    int v48 = *(_DWORD *)([v17 streamDescription] + 24);
                  }
                  if (!v48) {
                    goto LABEL_214;
                  }
                  unint64_t v84 = [v16 length];
                  vDSP_Length __N = v84 / ([v17 channelCount] * v48);
                  if (!__N) {
                    goto LABEL_214;
                  }
                  id v85 = objc_alloc(MEMORY[0x263EF9388]);
                  [v17 sampleRate];
                  char v236 = objc_msgSend(v85, "initWithCommonFormat:sampleRate:interleaved:channelLayout:", 1, 0, v233);
                  if (v236)
                  {
                    uint64_t v237 = (AVAudioPCMBuffer *)[objc_alloc(MEMORY[0x263EF93B0]) initWithPCMFormat:v236 frameCapacity:__N];
                    if (!v237) {
                      goto LABEL_214;
                    }
                    if ([v17 isInterleaved])
                    {
                      switch([v17 commonFormat])
                      {
                        case 0:
                          goto LABEL_214;
                        case 1:
                          unint64_t v86 = (DSPComplex *)[v16 bytes];
                          std::vector<float *>::vector(buf, [v17 channelCount]);
                          unint64_t v87 = 0;
                          uint64_t v88 = 16;
                          while (v87 < [v17 channelCount])
                          {
                            uint64_t v89 = [(AVAudioPCMBuffer *)v237 mutableAudioBufferList];
                            *(void *)(*(void *)buf + 8 * v87++) = *(void *)(v89 + v88);
                            v88 += 16;
                          }
                          Phase::ArrayFunction::Deinterleave(v86, *(const float **)buf, __N, [v17 channelCount]);
                          if (*(void *)buf)
                          {
                            *(void *)&_OWORD buf[8] = *(void *)buf;
                            operator delete(*(void **)buf);
                          }
                          goto LABEL_108;
                        case 2:
                          __Aa = (double *)[v16 bytes];
                          unint64_t v98 = 0;
                          uint64_t v99 = 16;
                          while (v98 < [v17 channelCount])
                          {
                            vDSP_vdpsp(__Aa, [v17 channelCount], *(float **)(-[AVAudioPCMBuffer mutableAudioBufferList](v237, "mutableAudioBufferList")+ v99), 1, __N);
                            ++v98;
                            v99 += 16;
                          }
                          goto LABEL_108;
                        case 3:
                          __Ac = (double *)[v16 bytes];
                          unint64_t v108 = 0;
                          uint64_t v109 = 16;
                          while (v108 < [v17 channelCount])
                          {
                            vDSP_vflt16((const __int16 *)__Ac, [v17 channelCount], *(float **)(-[AVAudioPCMBuffer mutableAudioBufferList](v237, "mutableAudioBufferList")+ v109), 1, __N);
                            ++v108;
                            v109 += 16;
                          }
                          goto LABEL_108;
                        case 4:
                          __Ab = (double *)[v16 bytes];
                          unint64_t v103 = 0;
                          uint64_t v104 = 16;
                          while (v103 < [v17 channelCount])
                          {
                            vDSP_vflt32((const int *)__Ab, [v17 channelCount], *(float **)(-[AVAudioPCMBuffer mutableAudioBufferList](v237, "mutableAudioBufferList")+ v104), 1, __N);
                            ++v103;
                            v104 += 16;
                          }
                          goto LABEL_108;
                        default:
                          goto LABEL_108;
                      }
                    }
                    switch([v17 commonFormat])
                    {
                      case 0:
                        goto LABEL_214;
                      case 1:
                        unint64_t v96 = 0;
                        uint64_t v97 = 16;
                        while (v96 < [v17 channelCount])
                        {
                          objc_msgSend(v16, "getBytes:range:", *(void *)(-[AVAudioPCMBuffer mutableAudioBufferList](v237, "mutableAudioBufferList") + v97), v96 * 4 * __N, 4 * __N);
                          ++v96;
                          v97 += 16;
                        }
                        goto LABEL_108;
                      case 2:
                        uint64_t v100 = [v16 bytes];
                        unint64_t v101 = 0;
                        uint64_t v102 = 16;
                        while (v101 < [v17 channelCount])
                        {
                          vDSP_vdpsp((const double *)(v100 + 8 * (v101++ * __N)), 1, *(float **)([(AVAudioPCMBuffer *)v237 mutableAudioBufferList] + v102), 1, __N);
                          v102 += 16;
                        }
                        goto LABEL_108;
                      case 3:
                        uint64_t v110 = [v16 bytes];
                        unint64_t v111 = 0;
                        uint64_t v112 = 16;
                        while (v111 < [v17 channelCount])
                        {
                          vDSP_vflt16((const __int16 *)(v110 + 2 * (v111++ * __N)), 1, *(float **)([(AVAudioPCMBuffer *)v237 mutableAudioBufferList] + v112), 1, __N);
                          v112 += 16;
                        }
                        goto LABEL_108;
                      case 4:
                        uint64_t v105 = [v16 bytes];
                        unint64_t v106 = 0;
                        uint64_t v107 = 16;
                        while (v106 < [v17 channelCount])
                        {
                          vDSP_vflt32((const int *)(v105 + 4 * (v106++ * __N)), 1, *(float **)([(AVAudioPCMBuffer *)v237 mutableAudioBufferList] + v107), 1, __N);
                          v107 += 16;
                        }
                        goto LABEL_108;
                      default:
LABEL_108:
                        [(AVAudioPCMBuffer *)v237 setFrameLength:__N];
                        float v113 = (AVAudioFormat *)[objc_alloc(MEMORY[0x263EF9388]) initWithCommonFormat:1 sampleRate:0 interleaved:v233 channelLayout:a6];
                        float v114 = v113;
                        __A = (double *)v113;
                        if (!v113)
                        {
                          double v138 = NSString;
                          double v139 = [v16 description];
                          unsigned int v140 = [v138 stringWithFormat:@"[AVAudioFormat initWithCommonFormat] failed on data '%@'", v139];

                          unsigned int v142 = **(id **)(Phase::Logger::GetInstance(v141) + 816);
                          if (os_log_type_enabled(v142, OS_LOG_TYPE_ERROR))
                          {
                            uint64_t v143 = *(void *)(a1 + 16);
                            uint64_t v144 = [v140 UTF8String];
                            *(_DWORD *)buf = 136315906;
                            *(void *)&uint8_t buf[4] = "ResidentSoundAssetInfo.mm";
                            *(_WORD *)&unsigned char buf[12] = 1024;
                            *(_DWORD *)&buf[14] = 534;
                            __int16 v266 = 2048;
                            uint64_t v267 = v143;
                            __int16 v268 = 2080;
                            uint64_t v269 = v144;
                            _os_log_impl(&dword_221E5E000, v142, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", buf, 0x26u);
                          }

                          if (a9)
                          {
                            uint64_t v273 = *MEMORY[0x263F08320];
                            uint64_t v274 = v140;
                            unsigned int v145 = [NSDictionary dictionaryWithObjects:&v274 forKeys:&v273 count:1];
                            *a9 = [MEMORY[0x263F087E8] errorWithDomain:@"com.apple.coreaudio.phase" code:1346920801 userInfo:v145];
                          }
                          uint64_t v26 = 0;
                          goto LABEL_223;
                        }
                        [(AVAudioFormat *)v113 sampleRate];
                        double v116 = v115;
                        [v236 sampleRate];
                        LODWORD(v118) = vcvtpd_u64_f64(v116 / v117 * (double)__N);
                        if (!v118) {
                          goto LABEL_214;
                        }
                        unsigned int v225 = v118;
                        Phase::Controller::ResidentSoundAssetInfo::AllocateAudioBuffer((Phase::Controller::ResidentSoundAssetInfo *)a1, v114, v118);
                        uint64_t v119 = *(void **)(a1 + 48);
                        if (!v119 || ![v119 floatChannelData]) {
                          goto LABEL_214;
                        }
                        uint64_t v120 = v225 >= 0x800 ? 2048 : v225;
                        unsigned int v224 = v120;
                        uint64_t v226 = (AVAudioPCMBuffer *)[objc_alloc(MEMORY[0x263EF93B0]) initWithPCMFormat:v114 frameCapacity:v120];
                        if (!v226 || ![(AVAudioPCMBuffer *)v226 floatChannelData]) {
                          goto LABEL_214;
                        }
                        Phase::Controller::StreamRenderer::StreamRenderer((uint64_t)buf, v236, v114, v120, (uint64_t)v234);
                        if (v270)
                        {
                          if (a3 == 1)
                          {
                            char v235 = [MEMORY[0x263F086E0] bundleWithIdentifier:@"com.apple.audio.PHASE"];
                            unint64_t v121 = [(AVAudioPCMBuffer *)v235 URLForResource:@"MPEGDefault12LKFSSuperiorV2" withExtension:@"aupreset" subdirectory:@"AUPresets/AULoudnessNormalizer"];
                            if ((Phase::Controller::StreamRenderer::SetPreset((uint64_t)buf, 0, v121, *(double *)(a1 + 40)) & 1) == 0)
                            {
                              uint64_t v161 = NSString;
                              uint64_t v162 = [v121 description];
                              uint64_t v163 = [v16 description];
                              AVAudioFrameCount v164 = [v161 stringWithFormat:@"Failed to load preset '%@' for audio data '%@'!", v162, v163];

                              uint64_t v166 = **(id **)(Phase::Logger::GetInstance(v165) + 816);
                              if (os_log_type_enabled(v166, OS_LOG_TYPE_ERROR))
                              {
                                uint64_t v167 = *(void *)(a1 + 16);
                                *(_DWORD *)unint64_t v257 = 136315906;
                                uint64_t v258 = "ResidentSoundAssetInfo.mm";
                                __int16 v259 = 1024;
                                int v260 = 605;
                                __int16 v261 = 2048;
                                uint64_t v262 = v167;
                                __int16 v263 = 2080;
                                uint64_t v264 = [v164 UTF8String];
                                _os_log_impl(&dword_221E5E000, v166, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", v257, 0x26u);
                              }

                              if (a9)
                              {
                                uint64_t v253 = *MEMORY[0x263F08320];
                                unint64_t v254 = v164;
                                BOOL v168 = [NSDictionary dictionaryWithObjects:&v254 forKeys:&v253 count:1];
                                *a9 = [MEMORY[0x263F087E8] errorWithDomain:@"com.apple.coreaudio.phase" code:1346920801 userInfo:v168];
                              }
                              goto LABEL_220;
                            }
                          }
                          BOOL v122 = Phase::Controller::StreamRenderer::Prepare((Phase::Controller::StreamRenderer *)buf);
                          if (v270) {
                            BOOL v123 = v122;
                          }
                          else {
                            BOOL v123 = 0;
                          }
                          if (v123 && v271)
                          {
                            unint64_t v124 = v237;
                            if (a3 == 1)
                            {
                              [v236 sampleRate];
                              LODWORD(v126) = vcvtpd_u64_f64(v125);
                              if (__N >= v126) {
                                vDSP_Length v126 = v126;
                              }
                              else {
                                vDSP_Length v126 = __N;
                              }
                              vDSP_Length __Na = v126;
                              if (!v126) {
                                goto LABEL_214;
                              }
                              unint64_t v127 = (AVAudioPCMBuffer *)[objc_alloc(MEMORY[0x263EF93B0]) initWithPCMFormat:v236 frameCapacity:v126];
                              if (!v127) {
                                goto LABEL_214;
                              }
                              unint64_t v128 = v127;
                              if (![(AVAudioPCMBuffer *)v127 floatChannelData]) {
                                goto LABEL_214;
                              }
                              [(AVAudioPCMBuffer *)v128 setFrameLength:__Na];
                              AVAudioFrameCount v129 = [(AVAudioPCMBuffer *)v128 frameLength];
                              char v235 = v128;
                              if (v129 != [(AVAudioPCMBuffer *)v128 frameCapacity]) {
                                goto LABEL_214;
                              }
                              long long v130 = (unsigned int *)[(AVAudioPCMBuffer *)v237 mutableAudioBufferList];
                              uint64_t v131 = (AudioBufferList *)[(AVAudioPCMBuffer *)v128 mutableAudioBufferList];
                              uint64_t v132 = [(AVAudioPCMBuffer *)v128 format];
                              sCopyAudioBufferList(v130, v131, __Na, *(_DWORD *)([v132 streamDescription] + 24));

                              unint64_t v133 = 0;
                              uint64_t v134 = 16;
                              unint64_t v135 = v235;
                              while (1)
                              {
                                int v136 = [(AVAudioPCMBuffer *)v135 format];
                                BOOL v137 = v133 < [v136 channelCount];

                                if (!v137) {
                                  break;
                                }
                                unint64_t v135 = v235;
                                vDSP_vrvrs(*(float **)([(AVAudioPCMBuffer *)v235 mutableAudioBufferList]+ v134), 1, __Na);
                                ++v133;
                                v134 += 16;
                              }
                              int32x2_t v169 = v235;
                              if (!Phase::Controller::StreamRenderer::ScheduleBuffer((Phase::Controller::StreamRenderer *)buf, v235, 0, 1uLL))
                              {
                                id v196 = NSString;
                                unint64_t v197 = [v16 description];
                                id v198 = [v196 stringWithFormat:@"Failed to schedule reverse audio buffer from audio data '%@' for rendering!", v197];

                                uint64_t v200 = **(id **)(Phase::Logger::GetInstance(v199) + 816);
                                if (os_log_type_enabled(v200, OS_LOG_TYPE_ERROR))
                                {
                                  uint64_t v201 = *(void *)(a1 + 16);
                                  *(_DWORD *)unint64_t v257 = 136315906;
                                  uint64_t v258 = "ResidentSoundAssetInfo.mm";
                                  __int16 v259 = 1024;
                                  int v260 = 667;
                                  __int16 v261 = 2048;
                                  uint64_t v262 = v201;
                                  __int16 v263 = 2080;
                                  uint64_t v264 = [v198 UTF8String];
                                  _os_log_impl(&dword_221E5E000, v200, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", v257, 0x26u);
                                }

                                if (a9)
                                {
                                  uint64_t v249 = *MEMORY[0x263F08320];
                                  unint64_t v250 = v198;
                                  uint64_t v202 = [NSDictionary dictionaryWithObjects:&v250 forKeys:&v249 count:1];
                                  *a9 = [MEMORY[0x263F087E8] errorWithDomain:@"com.apple.coreaudio.phase" code:1346920801 userInfo:v202];
                                }
                                goto LABEL_220;
                              }
                              unint64_t v124 = v237;
                            }
                            else
                            {
                              int32x2_t v169 = 0;
                            }
                            char v235 = v169;
                            if (Phase::Controller::StreamRenderer::ScheduleBuffer((Phase::Controller::StreamRenderer *)buf, v124, 0, 1uLL))
                            {
                              int v170 = Phase::Controller::StreamRenderer::Start((Phase::Controller::StreamRenderer *)buf);
                              if (v270) {
                                int v171 = v170;
                              }
                              else {
                                int v171 = 0;
                              }
                              if (v171 == 1 && v271 && v272)
                              {
                                if (!v169) {
                                  goto LABEL_207;
                                }
                                [__A sampleRate];
                                double v173 = 0.0;
                                if (a3 == 1) {
                                  double v173 = 1.0;
                                }
                                unsigned int v174 = vcvtpd_u64_f64(v173 * v172);
                                unsigned int v175 = 0;
                                if (v225 >= v174) {
                                  unsigned int v176 = v174;
                                }
                                else {
                                  unsigned int v176 = v225;
                                }
                                if (v176)
                                {
                                  while (1)
                                  {
                                    unint64_t v177 = v224 >= v176 - v175 ? v176 - v175 : v224;
                                    if (!Phase::Controller::StreamRenderer::RenderOffline((Phase::Controller::StreamRenderer *)buf, v177, v226))break; {
                                    if (v177 != [(AVAudioPCMBuffer *)v226 frameLength])
                                    }
                                      goto LABEL_214;
                                    v175 += v177;
                                    if (v175 >= v176) {
                                      goto LABEL_179;
                                    }
                                  }
                                  uint64_t v217 = NSString;
                                  uint64_t v218 = [v16 description];
                                  float v219 = [v217 stringWithFormat:@"Failed to render buffer for audio file '%@'!", v218];

                                  __int16 v221 = **(id **)(Phase::Logger::GetInstance(v220) + 816);
                                  if (os_log_type_enabled(v221, OS_LOG_TYPE_ERROR))
                                  {
                                    uint64_t v222 = *(void *)(a1 + 16);
                                    *(_DWORD *)unint64_t v257 = 136315906;
                                    uint64_t v258 = "ResidentSoundAssetInfo.mm";
                                    __int16 v259 = 1024;
                                    int v260 = 718;
                                    __int16 v261 = 2048;
                                    uint64_t v262 = v222;
                                    __int16 v263 = 2080;
                                    uint64_t v264 = [v219 UTF8String];
                                    _os_log_impl(&dword_221E5E000, v221, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", v257, 0x26u);
                                  }

                                  if (a9)
                                  {
                                    uint64_t v243 = *MEMORY[0x263F08320];
                                    v244 = v219;
                                    __int16 v223 = [NSDictionary dictionaryWithObjects:&v244 forKeys:&v243 count:1];
                                    *a9 = [MEMORY[0x263F087E8] errorWithDomain:@"com.apple.coreaudio.phase" code:1346920801 userInfo:v223];
                                  }
                                  goto LABEL_220;
                                }
LABEL_179:
                                if (v175 == v176)
                                {
LABEL_207:
                                  if ([*(id *)(a1 + 48) frameCapacity] >= v225)
                                  {
                                    while (1)
                                    {
                                      unsigned int v178 = [*(id *)(a1 + 48) frameLength];
                                      uint64_t v179 = *(void **)(a1 + 48);
                                      if (v178 >= v225) {
                                        break;
                                      }
                                      unsigned int v180 = v225 - [v179 frameLength];
                                      if (v224 >= v180) {
                                        unint64_t v181 = v180;
                                      }
                                      else {
                                        unint64_t v181 = v224;
                                      }
                                      if (!Phase::Controller::StreamRenderer::RenderOffline((Phase::Controller::StreamRenderer *)buf, v181, v226))
                                      {
                                        uint64_t v210 = NSString;
                                        uint64_t v211 = [v16 description];
                                        uint64_t v212 = [v210 stringWithFormat:@"Failed to render buffer for audio data '%@'!", v211];

                                        uint64_t v214 = **(id **)(Phase::Logger::GetInstance(v213) + 816);
                                        if (os_log_type_enabled(v214, OS_LOG_TYPE_ERROR))
                                        {
                                          uint64_t v215 = *(void *)(a1 + 16);
                                          *(_DWORD *)unint64_t v257 = 136315906;
                                          uint64_t v258 = "ResidentSoundAssetInfo.mm";
                                          __int16 v259 = 1024;
                                          int v260 = 741;
                                          __int16 v261 = 2048;
                                          uint64_t v262 = v215;
                                          __int16 v263 = 2080;
                                          uint64_t v264 = [v212 UTF8String];
                                          _os_log_impl(&dword_221E5E000, v214, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", v257, 0x26u);
                                        }

                                        if (a9)
                                        {
                                          uint64_t v241 = *MEMORY[0x263F08320];
                                          unint64_t v242 = v212;
                                          uint64_t v216 = [NSDictionary dictionaryWithObjects:&v242 forKeys:&v241 count:1];
                                          *a9 = [MEMORY[0x263F087E8] errorWithDomain:@"com.apple.coreaudio.phase" code:1346920801 userInfo:v216];
                                        }
                                        goto LABEL_220;
                                      }
                                      if (([*(id *)(a1 + 48) appendDataFromBuffer:v226] & 1) == 0)
                                      {
                                        long long v182 = NSString;
                                        float v183 = [v16 description];
                                        float v184 = [v182 stringWithFormat:@"Failed to append buffer for audio data  '%@'!", v183];

                                        id v186 = **(id **)(Phase::Logger::GetInstance(v185) + 816);
                                        if (os_log_type_enabled(v186, OS_LOG_TYPE_ERROR))
                                        {
                                          uint64_t v187 = *(void *)(a1 + 16);
                                          *(_DWORD *)unint64_t v257 = 136315906;
                                          uint64_t v258 = "ResidentSoundAssetInfo.mm";
                                          __int16 v259 = 1024;
                                          int v260 = 750;
                                          __int16 v261 = 2048;
                                          uint64_t v262 = v187;
                                          __int16 v263 = 2080;
                                          uint64_t v264 = [v184 UTF8String];
                                          _os_log_impl(&dword_221E5E000, v186, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", v257, 0x26u);
                                        }

                                        if (a9)
                                        {
                                          uint64_t v239 = *MEMORY[0x263F08320];
                                          uint64_t v240 = v184;
                                          float v188 = [NSDictionary dictionaryWithObjects:&v240 forKeys:&v239 count:1];
                                          *a9 = [MEMORY[0x263F087E8] errorWithDomain:@"com.apple.coreaudio.phase" code:1346920801 userInfo:v188];
                                        }
                                        goto LABEL_220;
                                      }
                                    }
                                    if ([v179 frameLength] == v225)
                                    {
                                      *(_DWORD *)(a1 + 32) = 4;
                                      uint64_t v26 = 1;
LABEL_221:
                                      uint64_t v150 = v235;
                                      goto LABEL_222;
                                    }
                                  }
                                }
LABEL_214:
                                std::terminate();
                              }
                              float v203 = NSString;
                              uint64_t v204 = [v16 description];
                              float v205 = [v203 stringWithFormat:@"Failed to start stream renderer for audio data '%@'!", v204];

                              float v207 = **(id **)(Phase::Logger::GetInstance(v206) + 816);
                              if (os_log_type_enabled(v207, OS_LOG_TYPE_ERROR))
                              {
                                uint64_t v208 = *(void *)(a1 + 16);
                                *(_DWORD *)unint64_t v257 = 136315906;
                                uint64_t v258 = "ResidentSoundAssetInfo.mm";
                                __int16 v259 = 1024;
                                int v260 = 695;
                                __int16 v261 = 2048;
                                uint64_t v262 = v208;
                                __int16 v263 = 2080;
                                uint64_t v264 = [v205 UTF8String];
                                _os_log_impl(&dword_221E5E000, v207, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", v257, 0x26u);
                              }

                              if (a9)
                              {
                                uint64_t v245 = *MEMORY[0x263F08320];
                                float v246 = v205;
                                unint64_t v209 = [NSDictionary dictionaryWithObjects:&v246 forKeys:&v245 count:1];
                                *a9 = [MEMORY[0x263F087E8] errorWithDomain:@"com.apple.coreaudio.phase" code:1346920801 userInfo:v209];
                              }
                            }
                            else
                            {
                              unsigned int v189 = NSString;
                              unsigned int v190 = [v16 description];
                              unint64_t v191 = [v189 stringWithFormat:@"Failed to schedule audio data '%@' for rendering!", v190];

                              unint64_t v193 = **(id **)(Phase::Logger::GetInstance(v192) + 816);
                              if (os_log_type_enabled(v193, OS_LOG_TYPE_ERROR))
                              {
                                uint64_t v194 = *(void *)(a1 + 16);
                                *(_DWORD *)unint64_t v257 = 136315906;
                                uint64_t v258 = "ResidentSoundAssetInfo.mm";
                                __int16 v259 = 1024;
                                int v260 = 685;
                                __int16 v261 = 2048;
                                uint64_t v262 = v194;
                                __int16 v263 = 2080;
                                uint64_t v264 = [v191 UTF8String];
                                _os_log_impl(&dword_221E5E000, v193, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", v257, 0x26u);
                              }

                              if (a9)
                              {
                                uint64_t v247 = *MEMORY[0x263F08320];
                                uint64_t v248 = v191;
                                uint64_t v195 = [NSDictionary dictionaryWithObjects:&v248 forKeys:&v247 count:1];
                                *a9 = [MEMORY[0x263F087E8] errorWithDomain:@"com.apple.coreaudio.phase" code:1346920801 userInfo:v195];
                              }
                            }
LABEL_220:
                            uint64_t v26 = 0;
                            goto LABEL_221;
                          }
                          uint64_t v155 = NSString;
                          unint64_t v156 = [v16 description];
                          uint64_t v150 = [v155 stringWithFormat:@"Failed to prepare stream renderer for audio data '%@'!", v156];

                          uint64_t v158 = **(id **)(Phase::Logger::GetInstance(v157) + 816);
                          if (os_log_type_enabled(v158, OS_LOG_TYPE_ERROR))
                          {
                            uint64_t v159 = *(void *)(a1 + 16);
                            *(_DWORD *)unint64_t v257 = 136315906;
                            uint64_t v258 = "ResidentSoundAssetInfo.mm";
                            __int16 v259 = 1024;
                            int v260 = 615;
                            __int16 v261 = 2048;
                            uint64_t v262 = v159;
                            __int16 v263 = 2080;
                            uint64_t v264 = [v150 UTF8String];
                            _os_log_impl(&dword_221E5E000, v158, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", v257, 0x26u);
                          }

                          if (a9)
                          {
                            uint64_t v251 = *MEMORY[0x263F08320];
                            uint64_t v252 = v150;
                            unint64_t v160 = [NSDictionary dictionaryWithObjects:&v252 forKeys:&v251 count:1];
                            *a9 = [MEMORY[0x263F087E8] errorWithDomain:@"com.apple.coreaudio.phase" code:1346920801 userInfo:v160];
                          }
                        }
                        else
                        {
                          uint64_t v146 = NSString;
                          unsigned int v147 = [v236 description];
                          unint64_t v148 = [__A description];
                          float v149 = [v16 description];
                          uint64_t v150 = [v146 stringWithFormat:@"Failed to create Stream Renderer with input format '%@', output format '%@' and maximum frame count '%d' for audio data '%@'!", v147, v148, v120, v149];

                          id v152 = **(id **)(Phase::Logger::GetInstance(v151) + 816);
                          if (os_log_type_enabled(v152, OS_LOG_TYPE_ERROR))
                          {
                            uint64_t v153 = *(void *)(a1 + 16);
                            *(_DWORD *)unint64_t v257 = 136315906;
                            uint64_t v258 = "ResidentSoundAssetInfo.mm";
                            __int16 v259 = 1024;
                            int v260 = 587;
                            __int16 v261 = 2048;
                            uint64_t v262 = v153;
                            __int16 v263 = 2080;
                            uint64_t v264 = [v150 UTF8String];
                            _os_log_impl(&dword_221E5E000, v152, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", v257, 0x26u);
                          }

                          if (a9)
                          {
                            uint64_t v255 = *MEMORY[0x263F08320];
                            unint64_t v256 = v150;
                            uint64_t v154 = [NSDictionary dictionaryWithObjects:&v256 forKeys:&v255 count:1];
                            *a9 = [MEMORY[0x263F087E8] errorWithDomain:@"com.apple.coreaudio.phase" code:1346920801 userInfo:v154];
                          }
                        }
                        uint64_t v26 = 0;
LABEL_222:

                        Phase::Controller::StreamRenderer::~StreamRenderer((Phase::Controller::StreamRenderer *)buf);
                        unsigned int v140 = v226;
LABEL_223:

                        goto LABEL_224;
                    }
                  }
                  unsigned int v90 = NSString;
                  uint64_t v91 = [v16 description];
                  uint64_t v237 = [v90 stringWithFormat:@"[AVAudioFormat initWithCommonFormat] failed on data '%@'", v91];

                  uint64_t v93 = **(id **)(Phase::Logger::GetInstance(v92) + 816);
                  if (os_log_type_enabled(v93, OS_LOG_TYPE_ERROR))
                  {
                    uint64_t v94 = *(void *)(a1 + 16);
                    uint64_t v95 = [(AVAudioPCMBuffer *)v237 UTF8String];
                    *(_DWORD *)buf = 136315906;
                    *(void *)&uint8_t buf[4] = "ResidentSoundAssetInfo.mm";
                    *(_WORD *)&unsigned char buf[12] = 1024;
                    *(_DWORD *)&buf[14] = 354;
                    __int16 v266 = 2048;
                    uint64_t v267 = v94;
                    __int16 v268 = 2080;
                    uint64_t v269 = v95;
                    _os_log_impl(&dword_221E5E000, v93, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", buf, 0x26u);
                  }

                  if (a9)
                  {
                    uint64_t v277 = *MEMORY[0x263F08320];
                    float v278 = v237;
                    __A = [NSDictionary dictionaryWithObjects:&v278 forKeys:&v277 count:1];
                    objc_msgSend(MEMORY[0x263F087E8], "errorWithDomain:code:userInfo:", @"com.apple.coreaudio.phase", 1346920801);
                    id v64 = (id)objc_claimAutoreleasedReturnValue();
                    goto LABEL_82;
                  }
LABEL_83:
                  char v236 = 0;
                  uint64_t v26 = 0;
LABEL_225:

                  OSStatus v24 = v233;
                  uint64_t v30 = v236;
                  goto LABEL_27;
                }
                float64x2_t v78 = NSString;
                uint64_t v79 = [v16 description];
                [v78 stringWithFormat:@"Data '%@' contains an invalid asbd mChannelsPerFrame == 0!", v79];
                uint64_t v237 = (AVAudioPCMBuffer *)objc_claimAutoreleasedReturnValue();

                BOOL v81 = **(id **)(Phase::Logger::GetInstance(v80) + 816);
                if (os_log_type_enabled(v81, OS_LOG_TYPE_ERROR))
                {
                  uint64_t v82 = *(void *)(a1 + 16);
                  uint64_t v83 = [(AVAudioPCMBuffer *)v237 UTF8String];
                  *(_DWORD *)buf = 136315906;
                  *(void *)&uint8_t buf[4] = "ResidentSoundAssetInfo.mm";
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 330;
                  __int16 v266 = 2048;
                  uint64_t v267 = v82;
                  __int16 v268 = 2080;
                  uint64_t v269 = v83;
                  _os_log_impl(&dword_221E5E000, v81, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", buf, 0x26u);
                }

                if (!a9) {
                  goto LABEL_83;
                }
                uint64_t v279 = *MEMORY[0x263F08320];
                double v280 = v237;
                __A = [NSDictionary dictionaryWithObjects:&v280 forKeys:&v279 count:1];
                objc_msgSend(MEMORY[0x263F087E8], "errorWithDomain:code:userInfo:", @"com.apple.coreaudio.phase", 1346920801);
                id v64 = (id)objc_claimAutoreleasedReturnValue();
              }
              else
              {
                char v65 = NSString;
                uint64_t v66 = [v16 description];
                [v65 stringWithFormat:@"Data '%@' contains an invalid asbd mBytesPerFrame == 0!", v66];
                uint64_t v237 = (AVAudioPCMBuffer *)objc_claimAutoreleasedReturnValue();

                long long v68 = **(id **)(Phase::Logger::GetInstance(v67) + 816);
                if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
                {
                  uint64_t v69 = *(void *)(a1 + 16);
                  uint64_t v70 = [(AVAudioPCMBuffer *)v237 UTF8String];
                  *(_DWORD *)buf = 136315906;
                  *(void *)&uint8_t buf[4] = "ResidentSoundAssetInfo.mm";
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 322;
                  __int16 v266 = 2048;
                  uint64_t v267 = v69;
                  __int16 v268 = 2080;
                  uint64_t v269 = v70;
                  _os_log_impl(&dword_221E5E000, v68, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", buf, 0x26u);
                }

                if (!a9) {
                  goto LABEL_83;
                }
                uint64_t v281 = *MEMORY[0x263F08320];
                v282 = v237;
                __A = [NSDictionary dictionaryWithObjects:&v282 forKeys:&v281 count:1];
                objc_msgSend(MEMORY[0x263F087E8], "errorWithDomain:code:userInfo:", @"com.apple.coreaudio.phase", 1346920801);
                id v64 = (id)objc_claimAutoreleasedReturnValue();
              }
            }
            else
            {
              uint64_t v237 = [NSString stringWithFormat:@"TODO: Implement support for other formats (e.g., compressed, fixed-point etc.)!"];
              uint64_t v61 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance((Phase::Logger *)v237)
                                                                                                  + 816)));
              if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
              {
                uint64_t v62 = *(void *)(a1 + 16);
                uint64_t v63 = [(AVAudioPCMBuffer *)v237 UTF8String];
                *(_DWORD *)buf = 136315906;
                *(void *)&uint8_t buf[4] = "ResidentSoundAssetInfo.mm";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 516;
                __int16 v266 = 2048;
                uint64_t v267 = v62;
                __int16 v268 = 2080;
                uint64_t v269 = v63;
                _os_log_impl(&dword_221E5E000, v61, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", buf, 0x26u);
              }

              if (!a9) {
                goto LABEL_83;
              }
              uint64_t v275 = *MEMORY[0x263F08320];
              float v276 = v237;
              __A = [NSDictionary dictionaryWithObjects:&v276 forKeys:&v275 count:1];
              objc_msgSend(MEMORY[0x263F087E8], "errorWithDomain:code:userInfo:", @"com.apple.coreaudio.phase", 1346920805);
              id v64 = (id)objc_claimAutoreleasedReturnValue();
            }
LABEL_82:
            char v236 = 0;
            uint64_t v26 = 0;
            *a9 = v64;
LABEL_224:

            goto LABEL_225;
          }
          if ([v17 channelCount] == 1
            || [v17 channelCount] == 2)
          {
            int v44 = [v17 channelCount];
            id v45 = objc_alloc(MEMORY[0x263EF9328]);
            if (v44 == 1) {
              uint64_t v46 = 6553601;
            }
            else {
              uint64_t v46 = 6619138;
            }
            id v25 = (void *)[v45 initWithLayoutTag:v46];
            goto LABEL_34;
          }
          __int16 v71 = NSString;
          uint64_t v72 = [v16 description];
          OSStatus v24 = [v71 stringWithFormat:@"Cannot synthesize audio channel layout for audio data '%@' with channel count %d.", v72, objc_msgSend(v17, "channelCount")];

          uint64_t v74 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v73)
                                                                                              + 816)));
          if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR))
          {
            uint64_t v75 = *(void *)(a1 + 16);
            uint64_t v76 = [v24 UTF8String];
            *(_DWORD *)buf = 136315906;
            *(void *)&uint8_t buf[4] = "ResidentSoundAssetInfo.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 306;
            __int16 v266 = 2048;
            uint64_t v267 = v75;
            __int16 v268 = 2080;
            uint64_t v269 = v76;
            _os_log_impl(&dword_221E5E000, v74, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", buf, 0x26u);
          }

          if (a9)
          {
            uint64_t v283 = *MEMORY[0x263F08320];
            float32x4_t v284 = v24;
            uint64_t v30 = [NSDictionary dictionaryWithObjects:&v284 forKeys:&v283 count:1];
            objc_msgSend(MEMORY[0x263F087E8], "errorWithDomain:code:userInfo:", @"com.apple.coreaudio.phase", 1346920801);
            id v31 = (id)objc_claimAutoreleasedReturnValue();
            goto LABEL_26;
          }
LABEL_61:
          uint64_t v26 = 0;
          goto LABEL_62;
        }
        BOOL v38 = NSString;
        int32x4_t v39 = [v16 description];
        OSStatus v24 = [v38 stringWithFormat:@"DataAudioFormat is nil for data '%@'!", v39];

        uint64_t v41 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v40)
                                                                                            + 816)));
        if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
        {
          uint64_t v42 = *(void *)(a1 + 16);
          uint64_t v43 = [v24 UTF8String];
          *(_DWORD *)buf = 136315906;
          *(void *)&uint8_t buf[4] = "ResidentSoundAssetInfo.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 267;
          __int16 v266 = 2048;
          uint64_t v267 = v42;
          __int16 v268 = 2080;
          uint64_t v269 = v43;
          _os_log_impl(&dword_221E5E000, v41, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", buf, 0x26u);
        }

        if (!a9) {
          goto LABEL_61;
        }
        uint64_t v287 = *MEMORY[0x263F08320];
        float32x2_t v288 = v24;
        uint64_t v30 = [NSDictionary dictionaryWithObjects:&v288 forKeys:&v287 count:1];
        objc_msgSend(MEMORY[0x263F087E8], "errorWithDomain:code:userInfo:", @"com.apple.coreaudio.phase", 1346920801);
        id v31 = (id)objc_claimAutoreleasedReturnValue();
      }
    }
    else
    {
      OSStatus v24 = [NSString stringWithFormat:@"Data cannot be nil or zero size!"];
      int v27 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance((Phase::Logger *)v24)
                                                                                          + 816)));
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        uint64_t v28 = *(void *)(a1 + 16);
        uint64_t v29 = [v24 UTF8String];
        *(_DWORD *)buf = 136315906;
        *(void *)&uint8_t buf[4] = "ResidentSoundAssetInfo.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 253;
        __int16 v266 = 2048;
        uint64_t v267 = v28;
        __int16 v268 = 2080;
        uint64_t v269 = v29;
        _os_log_impl(&dword_221E5E000, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", buf, 0x26u);
      }

      if (!a9) {
        goto LABEL_61;
      }
      uint64_t v291 = *MEMORY[0x263F08320];
      v292[0] = v24;
      uint64_t v30 = [NSDictionary dictionaryWithObjects:v292 forKeys:&v291 count:1];
      objc_msgSend(MEMORY[0x263F087E8], "errorWithDomain:code:userInfo:", @"com.apple.coreaudio.phase", 1346920803);
      id v31 = (id)objc_claimAutoreleasedReturnValue();
    }
LABEL_26:
    uint64_t v26 = 0;
    *a9 = v31;
LABEL_27:

LABEL_62:
    goto LABEL_63;
  }
  uint64_t v26 = 0;
LABEL_63:

  return v26;
}

void sub_22204DF7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _Unwind_Exception *exception_objecta, uint64_t a14, void *a15, void *a16, uint64_t a17, void *a18, void *a19, void *a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t buf,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p)
{
  Phase::Controller::StreamRenderer::~StreamRenderer((Phase::Controller::StreamRenderer *)&__p);
  _Unwind_Resume(a1);
}

void Phase::Controller::ResidentSoundAssetInfo::AllocateAudioBuffer(Phase::Controller::ResidentSoundAssetInfo *this, AVAudioFormat *a2, uint64_t a3)
{
  float64x2_t v7 = a2;
  uint64_t v5 = [objc_alloc(MEMORY[0x263EF93B0]) initWithPCMFormat:v7 frameCapacity:a3];
  int v6 = (void *)*((void *)this + 6);
  *((void *)this + 6) = v5;
}

void sub_22204EE20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

unsigned int *sCopyAudioBufferList(unsigned int *result, AudioBufferList *a2, int a3, int a4)
{
  unint64_t v4 = *result;
  if (!v4 || v4 != a2->mNumberBuffers) {
LABEL_11:
  }
    std::terminate();
  int v6 = result;
  unint64_t v7 = 0;
  unint64_t v8 = 0;
  size_t v9 = (a4 * a3);
  do
  {
    if (!v6[v7 / 4 + 2]
      || v9 > v6[v7 / 4 + 3]
      || v9 > a2->mBuffers[v7 / 0x10].mDataByteSize)
    {
      goto LABEL_11;
    }
    if (v9)
    {
      uint64_t result = (unsigned int *)memmove(a2->mBuffers[v7 / 0x10].mData, *(const void **)&v6[v7 / 4 + 4], v9);
      unint64_t v4 = *v6;
    }
    ++v8;
    v7 += 16;
  }
  while (v8 < v4);
  return result;
}

void Phase::Controller::ResidentSoundAssetInfo::~ResidentSoundAssetInfo(Phase::Controller::ResidentSoundAssetInfo *this)
{
  uint64_t v2 = (void *)*((void *)this + 6);
  *((void *)this + 6) = 0;
}

{
  void *v2;
  uint64_t vars8;

  uint64_t v2 = (void *)*((void *)this + 6);
  *((void *)this + 6) = 0;

  JUMPOUT(0x223C938A0);
}

uint64_t Phase::Controller::ResidentSoundAssetInfo::SizeInBytes(Phase::Controller::ResidentSoundAssetInfo *this)
{
  uint64_t v2 = (void *)*((void *)this + 6);
  if (!v2) {
    return 0;
  }
  int v3 = [v2 frameCapacity];
  unint64_t v4 = [*((id *)this + 6) format];
  uint64_t v5 = 4 * [v4 channelCount] * v3;

  return v5;
}

void sub_22204EFD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::SoundAssetInfo::AsStreamedSoundAssetInfo(Phase::Controller::SoundAssetInfo *this)
{
  return 0;
}

void *std::vector<float *>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    unint64_t v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)(a1 + 2), a2);
    *a1 = v4;
    a1[2] = &v4[8 * v5];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_22204F050(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void Phase::SpatialModeler::GetRoomChangeProbabilityEstimate(Phase::SpatialModeler *this, Phase::SpatialModeler::RoomChangeDetector *a2)
{
  uint64_t v104 = *MEMORY[0x263EF8340];
  LODWORD(v3) = *((_DWORD *)this + 10);
  float v4 = 0.0;
  if (v3)
  {
    float v5 = 1.0 / (float)(int)v3;
    if ((int)v3 < 1)
    {
      float v6 = 0.0;
    }
    else
    {
      if ((int)v3 >= 8) {
        uint64_t v3 = 8;
      }
      else {
        uint64_t v3 = v3;
      }
      float v6 = 0.0;
      unint64_t v7 = (float *)this;
      do
      {
        float v8 = *v7++;
        float v6 = v6 + v8;
        --v3;
      }
      while (v3);
    }
    float v9 = *((float *)this + 11);
    float v10 = v5 * v6;
    if (*((unsigned char *)this + 180)) {
      float v11 = *((float *)this + 42);
    }
    else {
      float v11 = (float)(v9 * *((float *)this + 46)) / 2.8284;
    }
    float v4 = (float)(v10 - v9) * (float)(1.0 / v11);
  }
  float v12 = fabsf(v4);
  if (v12 >= 0.12971)
  {
    uint64_t v13 = 0;
    if (v12 >= 0.26192)
    {
      do
      {
        if (v13 == 15) {
          break;
        }
        float v14 = Phase::SpatialModeler::RoomChangeDetector::foldedTValuesDf8[v13++ + 2];
      }
      while (v14 <= v12);
    }
  }
  int v15 = *((_DWORD *)this + 36);
  if (v15)
  {
    float v16 = 1.0 / (float)v15;
    _ZF = v15 == 1;
    if (v15 < 1)
    {
      float32x2_t v20 = 0;
      float v21 = 0.0;
    }
    else
    {
      uint64_t v18 = 1;
      if (!_ZF) {
        uint64_t v18 = 2;
      }
      id v19 = (float *)((char *)this + 120);
      float32x2_t v20 = 0;
      float v21 = 0.0;
      do
      {
        float32x2_t v20 = vadd_f32(v20, *(float32x2_t *)(v19 - 2));
        float v22 = *v19;
        v19 += 3;
        float v21 = v21 + v22;
        --v18;
      }
      while (v18);
    }
    float32x2_t v25 = *(float32x2_t *)((char *)this + 148);
    float v26 = *((float *)this + 39);
    float32x2_t v27 = vmul_n_f32(v20, v16);
    float v28 = v16 * v21;
    if (*((unsigned char *)this + 244))
    {
      float32x2_t v29 = *(float32x2_t *)((char *)this + 208);
      float v30 = *((float *)this + 54);
    }
    else
    {
      float32x2_t v29 = vdiv_f32(vmul_f32(v25, *(float32x2_t *)((char *)this + 248)), (float32x2_t)vdup_n_s32(0x3FB504F3u));
      float v30 = (float)(v26 * *((float *)this + 64)) / 1.4142;
    }
    __asm { FMOV            V6.2S, #1.0 }
    float32x2_t v23 = vmul_f32(vsub_f32(v27, v25), vdiv_f32(_D6, v29));
    float v24 = (float)(v28 - v26) * (float)(1.0 / v30);
  }
  else
  {
    float32x2_t v23 = 0;
    float v24 = 0.0;
  }
  float v93 = *((float *)this + 43);
  if (v23.f32[0] < 0.0) {
    float v35 = -v23.f32[0];
  }
  else {
    float v35 = v23.f32[0];
  }
  if (v23.f32[1] < 0.0) {
    float v36 = -v23.f32[1];
  }
  else {
    float v36 = v23.f32[1];
  }
  if (v24 < 0.0) {
    float v24 = -v24;
  }
  BOOL v37 = v35 > *((float *)this + 55);
  if (v24 > *((float *)this + 57)) {
    BOOL v37 = 1;
  }
  BOOL v38 = (int *)((char *)this + 260);
  *((_DWORD *)this + *((int *)this + 85) + 65) = v37;
  int v39 = ((*((_DWORD *)this + 90) - (*((_DWORD *)this + 89) + 1)) & ((*((_DWORD *)this + 90)
                                                                   - (*((_DWORD *)this + 89)
                                                                    + 1)) >> 31))
      + *((_DWORD *)this + 89)
      + 1;
  *((_DWORD *)this + 89) = v39;
  uint64_t v40 = *((int *)this + 85);
  *((_DWORD *)this + 88) = (int)(float)((float)((float)(*((_DWORD *)this + v40 + 65) - *((_DWORD *)this + 88))
                                              / (float)v39)
                                      + (float)*((int *)this + 88));
  *((_DWORD *)this + 86) = v40;
  *((_DWORD *)this + 85) = ((int)v40 + 1) % 20;
  int v41 = *((_DWORD *)this + 87) + ((19 - *((_DWORD *)this + 87)) & ((19 - *((_DWORD *)this + 87)) >> 31)) + 1;
  *((_DWORD *)this + 87) = v41;
  if (v37)
  {
    *((_DWORD *)this + 40) = 1;
    Phase::SpatialModeler::ParameterHistory<Phase::Vector<float,3ul>,2>::GetSampleMean(&v97, (uint64_t)this + 112);
    *(float32x2_t *)((char *)this + 148) = v97;
    *((_DWORD *)this + 39) = v98;
  }
  if (v41 < 1)
  {
    int v44 = 0x80000000;
  }
  else
  {
    if (v41 >= 20) {
      uint64_t v42 = 20;
    }
    else {
      uint64_t v42 = v41;
    }
    uint64_t v43 = -v42;
    int v44 = 0x80000000;
    do
    {
      int v46 = *v38++;
      int v45 = v46;
      if (v44 <= v46) {
        int v44 = v45;
      }
    }
    while (!__CFADD__(v43++, 1));
  }
  *((float *)this + 92) = *((float *)this + 92)
                        + (float)(*((float *)this + 91) * (float)((float)v44 - *((float *)this + 92)));
  if (*((unsigned char *)this + 372))
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v97);
    int v47 = *((_DWORD *)this + 10);
    if (v47 >= 1)
    {
      if (v47 >= 8) {
        uint64_t v48 = 8;
      }
      else {
        uint64_t v48 = v47;
      }
      float v49 = 0.0;
      int v50 = (float *)this;
      do
      {
        float v51 = *v50++;
        float v49 = v49 + v51;
        --v48;
      }
      while (v48);
    }
    Phase::SpatialModeler::ParameterHistory<Phase::Vector<float,3ul>,2>::GetSampleMean(&v96, (uint64_t)this + 112);
    if (v35 >= 0.13383)
    {
      uint64_t v52 = 0;
      if (v35 >= 0.27072)
      {
        do
        {
          if (v52 == 15) {
            break;
          }
          float v53 = Phase::SpatialModeler::RoomChangeDetector::foldedTValuesDf4[v52++ + 2];
        }
        while (v53 <= v35);
      }
    }
    if (v36 >= 0.13383)
    {
      uint64_t v54 = 0;
      if (v36 >= 0.27072)
      {
        do
        {
          if (v54 == 15) {
            break;
          }
          float v55 = Phase::SpatialModeler::RoomChangeDetector::foldedTValuesDf4[v54++ + 2];
        }
        while (v55 <= v36);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(__str, "");
    std::string::operator=(&v101, (const std::string *)__str);
    std::stringbuf::__init_buf_ptrs[abi:ne180100]((uint64_t)v100);
    if ((__str[23] & 0x80000000) != 0) {
      operator delete(*(void **)__str);
    }
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<char const*>(&v99, " ", "RoomChange");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<char const*>(&v99, "\n", "GetRoomChangeProbabilityEstimate Mfp:");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<char const*>(&v99, " ", "cumulative mean:");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<float>((uint64_t)&v99, "\n");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<char const*>(&v99, " ", "sample mean:");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<float>((uint64_t)&v99, "\n");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<char const*>(&v99, " ", "t:");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<float>((uint64_t)&v99, "\n");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<char const*>(&v99, " ", "p:");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<float>((uint64_t)&v99, "\n");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<char const*>(&v99, " ", "Tlevel:");
    uint64_t v56 = (Phase::Logger *)Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<float>((uint64_t)&v99, "\n");
    int v57 = **(NSObject ***)(Phase::Logger::GetInstance(v56) + 1184);
    if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
    {
      std::stringbuf::str();
      uint64_t v58 = v95 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)__str = 136315650;
      *(void *)&__str[4] = "RoomChangeDetector.cpp";
      *(_WORD *)&__str[12] = 1024;
      *(_DWORD *)&__str[14] = 123;
      *(_WORD *)&__str[18] = 2080;
      *(void *)&__str[20] = v58;
      _os_log_impl(&dword_221E5E000, v57, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s", __str, 0x1Cu);
      if (v95 < 0) {
        operator delete(__p[0]);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(__str, "");
    std::string::operator=(&v101, (const std::string *)__str);
    std::stringbuf::__init_buf_ptrs[abi:ne180100]((uint64_t)v100);
    if ((__str[23] & 0x80000000) != 0) {
      operator delete(*(void **)__str);
    }
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<char const*>(&v99, " ", "RoomChange");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<char const*>(&v99, "\n", "GetRoomChangeProbabilityEstimate Listener pos x:");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<char const*>(&v99, " ", "cumulative mean:");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<float>((uint64_t)&v99, "\n");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<char const*>(&v99, " ", "sample mean:");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<float>((uint64_t)&v99, "\n");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<char const*>(&v99, " ", "t:");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<float>((uint64_t)&v99, "\n");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<char const*>(&v99, " ", "p:");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<float>((uint64_t)&v99, "\n");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<char const*>(&v99, " ", "Tlevel:");
    uint64_t v59 = (Phase::Logger *)Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<float>((uint64_t)&v99, "\n");
    id v60 = **(NSObject ***)(Phase::Logger::GetInstance(v59) + 1184);
    if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
    {
      std::stringbuf::str();
      uint64_t v61 = v95 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)__str = 136315650;
      *(void *)&__str[4] = "RoomChangeDetector.cpp";
      *(_WORD *)&__str[12] = 1024;
      *(_DWORD *)&__str[14] = 132;
      *(_WORD *)&__str[18] = 2080;
      *(void *)&__str[20] = v61;
      _os_log_impl(&dword_221E5E000, v60, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s", __str, 0x1Cu);
      if (v95 < 0) {
        operator delete(__p[0]);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(__str, "");
    std::string::operator=(&v101, (const std::string *)__str);
    std::stringbuf::__init_buf_ptrs[abi:ne180100]((uint64_t)v100);
    if ((__str[23] & 0x80000000) != 0) {
      operator delete(*(void **)__str);
    }
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<char const*>(&v99, " ", "RoomChange");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<char const*>(&v99, "\n", "GetRoomChangeProbabilityEstimate Listener pos y:");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<char const*>(&v99, " ", "cumulative mean:");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<float>((uint64_t)&v99, "\n");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<char const*>(&v99, " ", "sample mean:");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<float>((uint64_t)&v99, "\n");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<char const*>(&v99, " ", "t:");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<float>((uint64_t)&v99, "\n");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<char const*>(&v99, " ", "p:");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<float>((uint64_t)&v99, "\n");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<char const*>(&v99, " ", "Tlevel:");
    uint64_t v62 = (Phase::Logger *)Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<float>((uint64_t)&v99, "\n");
    uint64_t v63 = **(NSObject ***)(Phase::Logger::GetInstance(v62) + 1184);
    if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
    {
      std::stringbuf::str();
      id v64 = v95 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)__str = 136315650;
      *(void *)&__str[4] = "RoomChangeDetector.cpp";
      *(_WORD *)&__str[12] = 1024;
      *(_DWORD *)&__str[14] = 141;
      *(_WORD *)&__str[18] = 2080;
      *(void *)&__str[20] = v64;
      _os_log_impl(&dword_221E5E000, v63, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s", __str, 0x1Cu);
      if (v95 < 0) {
        operator delete(__p[0]);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(__str, "");
    std::string::operator=(&v101, (const std::string *)__str);
    std::stringbuf::__init_buf_ptrs[abi:ne180100]((uint64_t)v100);
    if ((__str[23] & 0x80000000) != 0) {
      operator delete(*(void **)__str);
    }
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<char const*>(&v99, " ", "RoomChange");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<char const*>(&v99, "\n", "GetRoomChangeProbabilityEstimate:");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<char const*>(&v99, " ", "Combined probability:");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<float>((uint64_t)&v99, "\n");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<char const*>(&v99, " ", "Smoothed listener movement detection:");
    char v65 = (Phase::Logger *)Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<float>((uint64_t)&v99, "\n");
    uint64_t v66 = **(NSObject ***)(Phase::Logger::GetInstance(v65) + 1184);
    if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
    {
      std::stringbuf::str();
      double v67 = v95 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)__str = 136315650;
      *(void *)&__str[4] = "RoomChangeDetector.cpp";
      *(_WORD *)&__str[12] = 1024;
      *(_DWORD *)&__str[14] = 149;
      *(_WORD *)&__str[18] = 2080;
      *(void *)&__str[20] = v67;
      _os_log_impl(&dword_221E5E000, v66, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s", __str, 0x1Cu);
      if (v95 < 0) {
        operator delete(__p[0]);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(__str, "");
    std::string::operator=(&v101, (const std::string *)__str);
    std::stringbuf::__init_buf_ptrs[abi:ne180100]((uint64_t)v100);
    if ((__str[23] & 0x80000000) != 0) {
      operator delete(*(void **)__str);
    }
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<char const*>(&v99, " ", "RoomChange");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<char const*>(&v99, "\n", "inQuery stats:");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<char const*>(&v99, " ", "mfp:");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<float>((uint64_t)&v99, "\n");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<char const*>(&v99, " ", "mMeanAbsorption:");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<float>((uint64_t)&v99, "\n");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<char const*>(&v99, " ", "mListenerPos:");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<float>((uint64_t)&v99, " ");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<float>((uint64_t)&v99, " ");
    long long v68 = (Phase::Logger *)Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<float>((uint64_t)&v99, "\n");
    uint64_t v69 = **(NSObject ***)(Phase::Logger::GetInstance(v68) + 1184);
    if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
    {
      std::stringbuf::str();
      uint64_t v70 = v95 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)__str = 136315650;
      *(void *)&__str[4] = "RoomChangeDetector.cpp";
      *(_WORD *)&__str[12] = 1024;
      *(_DWORD *)&__str[14] = 160;
      *(_WORD *)&__str[18] = 2080;
      *(void *)&__str[20] = v70;
      _os_log_impl(&dword_221E5E000, v69, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s", __str, 0x1Cu);
      if (v95 < 0) {
        operator delete(__p[0]);
      }
    }
    float32x2_t v97 = *(float32x2_t *)MEMORY[0x263F8C2B8];
    uint64_t v71 = *(void *)(MEMORY[0x263F8C2B8] + 72);
    *(float32x2_t *)((char *)&v97 + *(void *)(*(void *)&v97 - 24)) = *(float32x2_t *)(MEMORY[0x263F8C2B8] + 64);
    uint64_t v99 = v71;
    v100[0] = MEMORY[0x263F8C318] + 16;
    if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v101.__r_.__value_.__l.__data_);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x223C937D0](v102);
  }
  if (v12 > v93)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v97);
    int v72 = *((_DWORD *)this + 10);
    if (v72 >= 1)
    {
      if (v72 >= 8) {
        uint64_t v73 = 8;
      }
      else {
        uint64_t v73 = v72;
      }
      float v74 = 0.0;
      uint64_t v75 = (float *)this;
      do
      {
        float v76 = *v75++;
        float v74 = v74 + v76;
        --v73;
      }
      while (v73);
    }
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<char const*>(&v99, "\n", "RoomChangeDetector - Significant MFP change");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<char const*>(&v99, " ", "cumulative mean:");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<float>((uint64_t)&v99, "\n");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<char const*>(&v99, " ", "sample mean:");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<float>((uint64_t)&v99, "\n");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<char const*>(&v99, " ", "t:");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<float>((uint64_t)&v99, "\n");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<char const*>(&v99, " ", "p:");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<float>((uint64_t)&v99, "\n");
    Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<char const*>(&v99, " ", "Tlevel:");
    float64x2_t v77 = (Phase::Logger *)Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<float>((uint64_t)&v99, "\n");
    float64x2_t v78 = **(NSObject ***)(Phase::Logger::GetInstance(v77) + 1184);
    if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
    {
      std::stringbuf::str();
      uint64_t v79 = v95 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)__str = 136315650;
      *(void *)&__str[4] = "RoomChangeDetector.cpp";
      *(_WORD *)&__str[12] = 1024;
      *(_DWORD *)&__str[14] = 177;
      *(_WORD *)&__str[18] = 2080;
      *(void *)&__str[20] = v79;
      _os_log_impl(&dword_221E5E000, v78, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s", __str, 0x1Cu);
      if (v95 < 0) {
        operator delete(__p[0]);
      }
    }
    *((_DWORD *)this + 12) = 1;
    int v80 = *((_DWORD *)this + 10);
    if (v80 < 1)
    {
      float v85 = 0.0;
    }
    else
    {
      if (v80 >= 8) {
        uint64_t v81 = 8;
      }
      else {
        uint64_t v81 = v80;
      }
      float v82 = 0.0;
      uint64_t v83 = (float *)this;
      do
      {
        float v84 = *v83++;
        float v82 = v82 + v84;
        --v81;
      }
      while (v81);
      float v85 = (float)(1.0 / (float)v80) * v82;
    }
    *((float *)this + 11) = v85;
    float32x2_t v97 = *(float32x2_t *)MEMORY[0x263F8C2B8];
    float32x2_t v86 = v97;
    uint64_t v87 = *(void *)(MEMORY[0x263F8C2B8] + 72);
    float32x2_t v88 = *(float32x2_t *)(MEMORY[0x263F8C2B8] + 64);
    *(float32x2_t *)((char *)&v97 + *(void *)(*(void *)&v97 - 24)) = v88;
    uint64_t v89 = v87;
    uint64_t v99 = v87;
    v100[0] = MEMORY[0x263F8C318] + 16;
    if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v101.__r_.__value_.__l.__data_);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x223C937D0](v102);
    if (v44)
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v97);
      Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<char const*>(&v99, "\n", "RoomChangeDetector - Room change detected");
      Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<char const*>(&v99, " ", "Smoothed listener movement detection:");
      Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<float>((uint64_t)&v99, "\n");
      Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<char const*>(&v99, " ", "Combined probability:");
      unsigned int v90 = (Phase::Logger *)Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<float>((uint64_t)&v99, "\n");
      uint64_t v91 = **(NSObject ***)(Phase::Logger::GetInstance(v90) + 1184);
      if (os_log_type_enabled(v91, OS_LOG_TYPE_DEFAULT))
      {
        std::stringbuf::str();
        AVAudioFrameCount v92 = v95 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)__str = 136315650;
        *(void *)&__str[4] = "RoomChangeDetector.cpp";
        *(_WORD *)&__str[12] = 1024;
        *(_DWORD *)&__str[14] = 190;
        *(_WORD *)&__str[18] = 2080;
        *(void *)&__str[20] = v92;
        _os_log_impl(&dword_221E5E000, v91, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s", __str, 0x1Cu);
        if (v95 < 0) {
          operator delete(__p[0]);
        }
      }
      float32x2_t v97 = v86;
      *(float32x2_t *)((char *)&v97 + *(void *)(*(void *)&v86 - 24)) = v88;
      uint64_t v99 = v89;
      v100[0] = MEMORY[0x263F8C318] + 16;
      if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v101.__r_.__value_.__l.__data_);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x223C937D0](v102);
    }
  }
}

void sub_2220504D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

float32x2_t Phase::SpatialModeler::ParameterHistory<Phase::Vector<float,3ul>,2>::GetSampleMean(float32x2_t *a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 32);
  BOOL v3 = v2 == 1;
  if (v2 < 1)
  {
    float32x2_t v7 = 0;
    float v10 = 0.0;
    float v8 = 0.0;
  }
  else
  {
    float v4 = (float)v2;
    uint64_t v5 = 1;
    if (!v3) {
      uint64_t v5 = 2;
    }
    float v6 = (float *)(a2 + 8);
    float32x2_t v7 = 0;
    float v8 = 0.0;
    do
    {
      float32x2_t v7 = vadd_f32(v7, *(float32x2_t *)(v6 - 2));
      float v9 = *v6;
      v6 += 3;
      float v8 = v8 + v9;
      --v5;
    }
    while (v5);
    float v10 = 1.0 / v4;
  }
  float32x2_t result = vmul_n_f32(v7, v10);
  *a1 = result;
  a1[1].f32[0] = v10 * v8;
  return result;
}

void *Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<char const*>(void *a1, const char *a2, char *__s)
{
  size_t v6 = strlen(__s);
  float32x2_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)__s, v6);
  size_t v8 = strlen(a2);

  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)a2, v8);
}

void *Phase::SpatialModeler::RoomSimulationLogging::WriteToStream<float>(uint64_t a1, const char *a2)
{
  BOOL v3 = (void *)std::ostream::operator<<();
  size_t v4 = strlen(a2);

  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)a2, v4);
}

void Phase::Controller::RoomCongruenceManager::RoomCongruenceManager(void *a1, void *a2)
{
}

void sub_22205098C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void Phase::Controller::RoomCongruenceManager::~RoomCongruenceManager(Phase::Controller::RoomCongruenceManager *this)
{
  int v2 = (void *)*((void *)this + 5);
  *((void *)this + 5) = 0;

  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::~Commandable(this);
}

{
  uint64_t vars8;

  Phase::Controller::RoomCongruenceManager::~RoomCongruenceManager(this);

  JUMPOUT(0x223C938A0);
}

void Phase::Controller::RoomCongruenceManager::SetTargetRoomAcousticParameters(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v4 = 0;
  uint64_t v5 = (_DWORD *)(a2 + 88);
  do
  {
    LODWORD(a3) = *(v5 - 10);
    size_t v6 = [NSNumber numberWithFloat:a3];
    [*(id *)(a1 + 64) setObject:v6 atIndexedSubscript:v4];

    LODWORD(v7) = *v5;
    size_t v8 = [NSNumber numberWithFloat:v7];
    [*(id *)(a1 + 88) setObject:v8 atIndexedSubscript:v4];

    LODWORD(v9) = v5[10];
    float v10 = [NSNumber numberWithFloat:v9];
    [*(id *)(a1 + 96) setObject:v10 atIndexedSubscript:v4];

    LODWORD(v11) = v5[20];
    float v12 = [NSNumber numberWithFloat:v11];
    [*(id *)(a1 + 104) setObject:v12 atIndexedSubscript:v4];

    ++v4;
    ++v5;
  }
  while (v4 != 10);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a1 + 50) ^ 1;
}

void sub_222050BEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void Phase::Controller::RoomCongruenceManager::SetModeledAcousticParameters(uint64_t a1, uint64_t a2, double a3)
{
  for (uint64_t i = 0; i != 10; ++i)
  {
    LODWORD(a3) = *(_DWORD *)(a2 + 4 * i);
    size_t v6 = [NSNumber numberWithFloat:a3];
    [*(id *)(a1 + 64) setObject:v6 atIndexedSubscript:i];

    uint64_t v7 = a2 + 4 * i;
    LODWORD(v8) = *(_DWORD *)(v7 + 40);
    double v9 = [NSNumber numberWithFloat:v8];
    [*(id *)(a1 + 72) setObject:v9 atIndexedSubscript:i];

    LODWORD(v10) = *(_DWORD *)(v7 + 80);
    double v11 = [NSNumber numberWithFloat:v10];
    [*(id *)(a1 + 80) setObject:v11 atIndexedSubscript:i];
  }
  LODWORD(a3) = *(_DWORD *)(a2 + 120);
  uint64_t v12 = [NSNumber numberWithFloat:a3];
  uint64_t v13 = *(void **)(a1 + 112);
  *(void *)(a1 + 112) = v12;

  LODWORD(v14) = *(_DWORD *)(a2 + 124);
  uint64_t v15 = [NSNumber numberWithFloat:v14];
  float v16 = *(void **)(a1 + 120);
  *(void *)(a1 + 120) = v15;

  *(_WORD *)(a1 + 49) = 257;
}

void sub_222050D0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void Phase::Controller::RoomCongruenceManager::Update(Phase::Controller::RoomCongruenceManager *this)
{
  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::ExecuteCommands((uint64_t)this);
  if (!*((void *)this + 5)) {
    return;
  }
  id v12 = objc_alloc_init(MEMORY[0x263EFF9A0]);
  if (*((unsigned char *)this + 49))
  {
    int v2 = (void *)[*((id *)this + 7) copy];
    [v12 setObject:v2 forKey:@"CenterFreqs"];

    BOOL v3 = (void *)[*((id *)this + 8) copy];
    [v12 setObject:v3 forKey:@"RT60"];

    uint64_t v4 = (void *)[*((id *)this + 9) copy];
    [v12 setObject:v4 forKey:@"EarlyRoomEnergy"];

    uint64_t v5 = (void *)[*((id *)this + 10) copy];
    [v12 setObject:v5 forKey:@"LateRoomEnergy"];

    size_t v6 = (void *)[*((id *)this + 14) copy];
    [v12 setObject:v6 forKey:@"RoomVolume"];

    uint64_t v7 = (void *)[*((id *)this + 15) copy];
    [v12 setObject:v7 forKey:@"RoomSurface"];
  }
  else
  {
    if (!*((unsigned char *)this + 48)) {
      goto LABEL_8;
    }
    double v8 = (void *)[*((id *)this + 7) copy];
    [v12 setObject:v8 forKey:@"CenterFreqs"];

    double v9 = (void *)[*((id *)this + 8) copy];
    [v12 setObject:v9 forKey:@"RT60"];

    double v10 = (void *)[*((id *)this + 11) copy];
    [v12 setObject:v10 forKey:@"EarlyRoomEqDb"];

    double v11 = (void *)[*((id *)this + 12) copy];
    [v12 setObject:v11 forKey:@"LateRoomEqDb"];

    uint64_t v7 = (void *)[*((id *)this + 13) copy];
    [v12 setObject:v7 forKey:@"Confidence"];
  }

  if (*((unsigned char *)this + 48))
  {
LABEL_9:
    [*((id *)this + 5) setRoomCongruenceParameters:v12];
    *((_WORD *)this + 24) = 0;
    goto LABEL_10;
  }
LABEL_8:
  if (*((unsigned char *)this + 49)) {
    goto LABEL_9;
  }
LABEL_10:
}

void sub_222050F48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

BOOL Phase::SpatialModeler::GetRT60EstimateFromDirectionalMetadata(uint64_t a1, uint64_t *a2, float a3, float a4)
{
  uint64_t v108 = *MEMORY[0x263EF8340];
  int v4 = *(unsigned __int8 *)(a1 + 201);
  if (*(unsigned char *)(a1 + 201))
  {
    uint64_t v9 = *(void *)(a1 + 96);
    uint64_t v10 = *(void *)(*(void *)(a1 + 104) + 8);
    *(float *)buf = 0.0;
    std::vector<float>::vector(__p, (v10 * v9), buf);
    double v11 = (char *)__p[0];
    uint64_t v12 = v10;
    if (v10)
    {
      int v13 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = *(void *)(a1 + 104);
      float v16 = (_DWORD *)(v15 + 16);
      size_t v17 = v9;
      do
      {
        if (v9)
        {
          uint64_t v18 = &v11[4 * v13];
          uint64_t v19 = 4 * *(void *)(v15 + 8);
          float32x2_t v20 = v16;
          uint64_t v21 = v9;
          do
          {
            *(_DWORD *)uint64_t v18 = *v20;
            v18 += 4;
            float32x2_t v20 = (_DWORD *)((char *)v20 + v19);
            --v21;
          }
          while (v21);
        }
        ++v14;
        v13 += v9;
        ++v16;
      }
      while (v14 != v12);
    }
    else
    {
      size_t v17 = v9;
    }
    uint64_t v94 = v11;
    uint64_t v93 = *(void *)(a1 + 56);
    uint64_t v92 = *a2;
    float32x2_t v23 = (Phase::Logger *)malloc_type_calloc(v17, 4uLL, 0x100004052888210uLL);
    float v24 = (float *)v23;
    if (v12)
    {
      int v25 = 0;
      uint64_t v26 = 0;
      float v27 = a3 - a4;
      if (v9 <= 1) {
        unsigned int v28 = 1;
      }
      else {
        unsigned int v28 = v9;
      }
      uint64_t v29 = 4 * v28;
      unsigned int v90 = (char *)v23 + 8;
      float v91 = fabsf(v27 * 0.5);
      float v30 = vabds_f32(a3, a4);
      double v89 = v27;
      uint64_t v95 = v12;
      while (v9)
      {
        id v31 = (float *)&v94[4 * v25];
        if (((v9 - 1) & 0x80000000) == 0)
        {
          float v32 = 0.0;
          uint64_t v33 = (v9 - 1);
          do
          {
            float v32 = v32 + (float)(v31[v33] * v31[v33]);
            v24[v33--] = v32;
          }
          while (v33 != -1);
        }
        unint64_t v34 = 0;
        float v35 = -3.4028e38;
        do
        {
          float v36 = v24[v34 / 4];
          if (v36 < 0.0) {
            float v36 = 0.0;
          }
          float v37 = log10f(v36) * 10.0;
          v24[v34 / 4] = v37;
          if (v37 > v35) {
            float v35 = v37;
          }
          v34 += 4;
        }
        while (v29 != v34);
        *(float *)buf = -v35;
        vDSP_vsadd(v24, 1, (const float *)buf, v24, 1, v17);
        float v38 = -3.4028e38;
        float v39 = 3.4028e38;
        size_t v40 = v17;
        do
        {
          float v41 = *v31++;
          float v43 = log10f(v41 * v41) * 10.0;
          if (v43 > v38) {
            float v38 = v43;
          }
          if (v43 < v39) {
            float v39 = v43;
          }
          --v40;
        }
        while (v40);
        float v44 = v38 - v39;
        if (v44 < 15.0) {
          goto LABEL_41;
        }
        if (v44 < v91)
        {
          int v45 = **(NSObject ***)(Phase::Logger::GetInstance((Phase::Logger *)v42) + 1184);
          BOOL v42 = os_log_type_enabled(v45, OS_LOG_TYPE_ERROR);
          if (v42)
          {
            *(float *)buf = 4.8154e-34;
            uint64_t v99 = "RoomSimulationAnalysisFunctions.cpp";
            __int16 v100 = 1024;
            int v101 = 162;
            __int16 v102 = 2048;
            double v103 = v44;
            __int16 v104 = 2048;
            double v105 = v89;
            __int16 v106 = 1024;
            int v107 = v26;
            _os_log_impl(&dword_221E5E000, v45, OS_LOG_TYPE_ERROR, "%25s:%-5d dB Range %f of the subband gain vector is less than half of the input RT dB range %f, RT60 estimate may have very high error for the subband index %u\n", buf, 0x2Cu);
          }
        }
        float v46 = a3;
LABEL_43:
        float v49 = a4;
        if (v44 < v30)
        {
          int v50 = **(NSObject ***)(Phase::Logger::GetInstance((Phase::Logger *)v42) + 1184);
          BOOL v42 = os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG);
          if (v42)
          {
            *(float *)buf = 4.8153e-34;
            uint64_t v99 = "RoomSimulationAnalysisFunctions.cpp";
            __int16 v100 = 1024;
            int v101 = 171;
            __int16 v102 = 2048;
            double v103 = v44;
            __int16 v104 = 2048;
            double v105 = a4;
            _os_log_impl(&dword_221E5E000, v50, OS_LOG_TYPE_DEBUG, "%25s:%-5d dB Range of the subband gain vector %f is less than dB low limit %f, assigning this as a new low limit\n", buf, 0x26u);
          }
          float v49 = -v44;
        }
        if (!v9) {
          goto LABEL_56;
        }
        uint64_t v51 = 0;
        unsigned int v52 = 0;
        int v53 = 0;
        do
        {
          float v54 = v24[v51];
          if ((LODWORD(v54) & 0x7FFFFFFFu) > 0x7F7FFFFF) {
            break;
          }
          if (v54 > v46) {
            unsigned int v52 = v51;
          }
          if (v54 > v49) {
            int v53 = v51;
          }
          ++v51;
        }
        while (v17 != v51);
        vDSP_Length v55 = v53 - v52;
        if (v53 != v52)
        {
          uint64_t __C = 0;
          vDSP_meanv((const float *)(v93 + 4 * v52), 1, (float *)&__C + 1, v55);
          vDSP_meanv(&v24[v52], 1, (float *)&__C, v55);
          uint64_t v59 = (v55 + 3) & 0x1FFFFFFFCLL;
          uint64x2_t v60 = (uint64x2_t)vdupq_n_s64(v55 - 1);
          uint64_t v61 = (const float *)&__C + 1;
          float32x4_t v62 = vld1q_dup_f32(v61);
          p_C = (const float *)&__C;
          float32x4_t v64 = vld1q_dup_f32(p_C);
          char v65 = (__int32 *)&v90[4 * v52];
          int64x2_t v66 = (int64x2_t)xmmword_2220A5520;
          int64x2_t v67 = (int64x2_t)xmmword_2220A5510;
          float32x4_t v68 = (float32x4_t)xmmword_2220A5530;
          int32x4_t v69 = (int32x4_t)xmmword_2220A5530;
          uint64_t v70 = (__int32 *)(v93 + 8 + 4 * v52);
          do
          {
            float32x4_t v71 = v68;
            float32x4_t v72 = (float32x4_t)v69;
            int32x4_t v73 = (int32x4_t)vcgeq_u64(v60, (uint64x2_t)v66);
            *(int32x2_t *)v69.i8 = vmovn_s64((int64x2_t)v73);
            if (vmovn_s32(v69).u8[0]) {
              v68.i32[0] = *(v70 - 2);
            }
            if (vmovn_s32(v69).i8[2]) {
              v68.i32[1] = *(v70 - 1);
            }
            int32x4_t v74 = (int32x4_t)vcgeq_u64(v60, (uint64x2_t)v67);
            int32x2_t v75 = (int32x2_t)vmovn_s32(vmovn_hight_s64(*(int32x2_t *)v58.i8, (int64x2_t)v74));
            if (v75.i8[4]) {
              v68.i32[2] = *v70;
            }
            float32x4_t v76 = (float32x4_t)vmovn_hight_s64(v75, (int64x2_t)v74);
            if (vmovn_s32(*(int32x4_t *)&v76).i8[6]) {
              v68.i32[3] = v70[1];
            }
            *(int16x4_t *)v76.f32 = vmovn_s32(v69);
            if (v76.i8[0]) {
              v76.i32[0] = *(v65 - 2);
            }
            int32x2_t v77 = (int32x2_t)vmovn_s32(v69);
            if (v77.i8[2]) {
              v76.i32[1] = *(v65 - 1);
            }
            int32x2_t v78 = (int32x2_t)vmovn_s32(vmovn_hight_s64(v77, (int64x2_t)v74));
            if (v78.i8[4]) {
              v76.i32[2] = *v65;
            }
            if (vmovn_s32(vmovn_hight_s64(v78, *(int64x2_t *)&v74)).i8[6]) {
              v76.i32[3] = v65[1];
            }
            float32x4_t v79 = vsubq_f32(v68, v62);
            int32x4_t v69 = (int32x4_t)vmlaq_f32(v72, vsubq_f32(v76, v64), v79);
            int64x2_t v58 = vdupq_n_s64(4uLL);
            float32x4_t v68 = vmlaq_f32(v71, v79, v79);
            int64x2_t v67 = vaddq_s64(v67, v58);
            int64x2_t v66 = vaddq_s64(v66, v58);
            v65 += 4;
            v70 += 4;
            v59 -= 4;
          }
          while (v59);
          int8x16_t v80 = (int8x16_t)vuzp1q_s32(v73, v74);
          int8x16_t v81 = vbslq_s8(v80, (int8x16_t)v69, (int8x16_t)v72);
          float v82 = (float)(vaddv_f32(*(float32x2_t *)v81.i8) + *(float *)&v81.i32[2]) + *(float *)&v81.i32[3];
          int8x16_t v83 = vbslq_s8(v80, (int8x16_t)v68, (int8x16_t)v71);
          float v84 = (float)(vaddv_f32(*(float32x2_t *)v83.i8) + *(float *)&v83.i32[2]) + *(float *)&v83.i32[3];
          if (v84 == 0.0)
          {
            float v85 = **(NSObject ***)(Phase::Logger::GetInstance(v23) + 1184);
            float32x2_t v23 = (Phase::Logger *)os_log_type_enabled(v85, OS_LOG_TYPE_ERROR);
            float v86 = 0.0;
            if (v23)
            {
              *(float *)buf = 4.8151e-34;
              uint64_t v99 = "RoomSimulationAnalysisFunctions.cpp";
              __int16 v100 = 1024;
              int v101 = 53;
              _os_log_impl(&dword_221E5E000, v85, OS_LOG_TYPE_ERROR, "%25s:%-5d about to divide by 0 in slope calculation, returning 0 slope", buf, 0x12u);
            }
          }
          else
          {
            float v86 = v82 / v84;
          }
          uint64_t v57 = v95;
          float v87 = -60.0 / v86;
          if (v86 == 0.0) {
            float v87 = 0.0;
          }
          *(float *)(v92 + 4 * v26) = v87;
        }
        else
        {
LABEL_56:
          uint64_t v56 = **(NSObject ***)(Phase::Logger::GetInstance((Phase::Logger *)v42) + 1184);
          float32x2_t v23 = (Phase::Logger *)os_log_type_enabled(v56, OS_LOG_TYPE_ERROR);
          uint64_t v57 = v95;
          if (v23)
          {
            *(float *)buf = 4.8152e-34;
            uint64_t v99 = "RoomSimulationAnalysisFunctions.cpp";
            __int16 v100 = 1024;
            int v101 = 203;
            __int16 v102 = 1024;
            LODWORD(v103) = v26;
            _os_log_impl(&dword_221E5E000, v56, OS_LOG_TYPE_ERROR, "%25s:%-5d Number of samples to fit a linear decay curve is 0 with subband index %u, skipping it and continuing subband loop\n", buf, 0x18u);
          }
        }
        ++v26;
        v25 += v9;
        if (v26 == v57) {
          goto LABEL_84;
        }
      }
      int v47 = **(NSObject ***)(Phase::Logger::GetInstance(v23) + 1184);
      BOOL v42 = os_log_type_enabled(v47, OS_LOG_TYPE_ERROR);
      if (v42)
      {
        *(float *)buf = 4.8151e-34;
        uint64_t v99 = "RoomSimulationAnalysisFunctions.cpp";
        __int16 v100 = 1024;
        int v101 = 70;
        _os_log_impl(&dword_221E5E000, v47, OS_LOG_TYPE_ERROR, "%25s:%-5d inNumSamples 0, returning", buf, 0x12u);
      }
      float v44 = -INFINITY;
LABEL_41:
      uint64_t v48 = **(NSObject ***)(Phase::Logger::GetInstance((Phase::Logger *)v42) + 1184);
      BOOL v42 = os_log_type_enabled(v48, OS_LOG_TYPE_ERROR);
      float v46 = 0.0;
      if (v42)
      {
        *(float *)buf = 4.8153e-34;
        uint64_t v99 = "RoomSimulationAnalysisFunctions.cpp";
        __int16 v100 = 1024;
        int v101 = 151;
        __int16 v102 = 2048;
        double v103 = v44;
        __int16 v104 = 1024;
        LODWORD(v105) = v26;
        _os_log_impl(&dword_221E5E000, v48, OS_LOG_TYPE_ERROR, "%25s:%-5d dB Range %f of the subband gain vector is less than 15dB, setting the high limit to 0 dB, RT60 estimate may have very high error for the subband index %u\n", buf, 0x22u);
      }
      goto LABEL_43;
    }
LABEL_84:
    free(v24);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    float v22 = **(NSObject ***)(Phase::Logger::GetInstance((Phase::Logger *)a1) + 1184);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(float *)buf = 4.8151e-34;
      uint64_t v99 = "RoomSimulationAnalysisFunctions.cpp";
      __int16 v100 = 1024;
      int v101 = 234;
      _os_log_impl(&dword_221E5E000, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d Input metadata needs to be sorted in time, returning and not modifying the data", buf, 0x12u);
    }
  }
  return v4 != 0;
}

void sub_2220518FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Phase::SpatialModeler::getClosestLRClusterToSourceInClusteringResults(float32x2_t *a1, Phase::SpatialModeler::RayTracerState *this, void *a3, _OWORD *a4, float *a5)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  if (!*((void *)this + 2431))
  {
    float v30 = **(NSObject ***)(Phase::Logger::GetInstance((Phase::Logger *)a1) + 1184);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoomSimulationClusteringFunctions.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 24;
      _os_log_impl(&dword_221E5E000, v30, OS_LOG_TYPE_ERROR, "%25s:%-5d getClosestLRClusterToSourceInClusteringResults: Empty clustering result", buf, 0x12u);
    }
    return;
  }
  *(void *)buf = 0;
  *(void *)&_OWORD buf[8] = 0;
  v31[0] = 0;
  v31[1] = 0;
  uint64_t v9 = (uint64_t *)*((void *)this + 2430);
  if (!v9)
  {
    uint64_t v11 = 0;
    float SharedEnergyReFixedDb = 0.0;
    float v13 = 0.0;
    goto LABEL_24;
  }
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  float v13 = 0.0;
  float v14 = 3.4028e38;
  float v15 = 3.4028e38;
  float v16 = 0.0;
  do
  {
    size_t v17 = v9 + 2;
    float SharedEnergyReFixedDb = Phase::SpatialModeler::RayTracerState::GetSharedEnergyReFixedDb(this, (unint64_t *)v9 + 2);
    uint64_t v19 = (float32x2_t *)v9[5];
    if (v19)
    {
      float32x2_t v20 = a1[8];
      float v21 = a1[9].f32[0];
      float v23 = *((float *)this + 36);
      float v22 = *((float *)this + 37);
      do
      {
        float v24 = v19[4].f32[1];
        float32x2_t v25 = vsub_f32(v19[3], v20);
        float v26 = vaddv_f32(vmul_f32(v25, v25)) + (float)((float)(v19[4].f32[0] - v21) * (float)(v19[4].f32[0] - v21));
        if (v26 > 1.0e12) {
          float v26 = 1.0e12;
        }
        if ((float)(v24 - SharedEnergyReFixedDb) >= v22 && (float)(v24 - SharedEnergyReFixedDb) <= v23)
        {
          if (v26 < v14)
          {
            uint64_t v12 = *v17;
            unsigned int v28 = buf;
            float v16 = v19[4].f32[1];
            float v14 = v26;
            goto LABEL_16;
          }
        }
        else if (v26 < v15)
        {
          uint64_t v11 = *v17;
          unsigned int v28 = v31;
          float v13 = v19[4].f32[1];
          float v15 = v26;
LABEL_16:
          _OWORD *v28 = *(_OWORD *)(v9 + 11);
        }
        uint64_t v19 = (float32x2_t *)*v19;
      }
      while (v19);
    }
    uint64_t v9 = (uint64_t *)*v9;
  }
  while (v9);
  if (v14 != 3.4028e38)
  {
    uint64_t v29 = buf;
    goto LABEL_25;
  }
LABEL_24:
  uint64_t v29 = v31;
  uint64_t v12 = v11;
  float v16 = v13;
LABEL_25:
  *a3 = v12;
  *a4 = *v29;
  *a5 = v16;
  *a5 = fminf(fmaxf(v16, SharedEnergyReFixedDb + *((float *)this + 37)), SharedEnergyReFixedDb + *((float *)this + 36));
}

float Phase::SpatialModeler::getClosestERClusterToSourceInClusteringResults(float32x2_t *a1, void *a2, void *a3, _OWORD *a4, _DWORD *a5, float *a6)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (a2[2426])
  {
    size_t v6 = (void *)a2[2425];
    if (v6)
    {
      float v7 = 3.4028e38;
      do
      {
        double v8 = (float32x2_t *)v6[5];
        if (v8)
        {
          uint64_t v9 = v6 + 34;
          while (1)
          {
            float v10 = v8[4].f32[0] - a1[9].f32[0];
            float32x2_t v11 = vsub_f32(v8[3], a1[8]);
            float v12 = vaddv_f32(vmul_f32(v11, v11)) + (float)(v10 * v10);
            if (v12 > 1.0e12) {
              float v12 = 1.0e12;
            }
            if (3864292196u
               - 0x395B586CA42E166BLL
               * ((3864292196u
                 - 0x395B586CA42E166BLL
                 * ((0x35A98F4D286A90B9
                   * ((0xC6A4A7935BD1E995 * *(void *)&a1[1]) ^ ((0xC6A4A7935BD1E995 * *(void *)&a1[1]) >> 47))
                   + 3864292196u) ^ (0xC6A4A7935BD1E995
                                   * ((0xC6A4A7935BD1E995 * a2[2822]) ^ ((0xC6A4A7935BD1E995 * a2[2822]) >> 47))))) ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * *(void *)&a1[22]) ^ ((0xC6A4A7935BD1E995 * *(void *)&a1[22]) >> 47)))) == *(void *)&v8[2])
              break;
            if (v12 < v7)
            {
              *a5 = v8[4].i32[1];
              *a4 = *v9;
              *a3 = v6[2];
              float v7 = v12;
            }
            double v8 = (float32x2_t *)*v8;
            if (!v8) {
              goto LABEL_14;
            }
          }
          *a6 = sqrtf(v12);
          *a5 = v8[4].i32[1];
          *a4 = *v9;
          *a3 = v6[2];
        }
LABEL_14:
        size_t v6 = (void *)*v6;
      }
      while (v6);
    }
    else
    {
      float v7 = 3.4028e38;
    }
    float result = sqrtf(v7);
    *a6 = result;
  }
  else
  {
    float v13 = **(NSObject ***)(Phase::Logger::GetInstance((Phase::Logger *)a1) + 1184);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      int v15 = 136315394;
      float v16 = "RoomSimulationClusteringFunctions.cpp";
      __int16 v17 = 1024;
      int v18 = 110;
      _os_log_impl(&dword_221E5E000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d getClosestERClusterToSourceInClusteringResults: Empty clustering result", (uint8_t *)&v15, 0x12u);
    }
  }
  return result;
}

void Phase::SpatialModeler::getRendererIdsInERClusteringResults(Phase::SpatialModeler *this@<X0>, char **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<Phase::UniqueObjectId>::reserve((void **)a2, *((void *)this + 2426));
  uint64_t v5 = (void *)*((void *)this + 2425);
  if (v5)
  {
    size_t v6 = a2 + 2;
    float v7 = a2[1];
    do
    {
      double v8 = v5 + 34;
      if ((unint64_t)v7 >= *v6)
      {
        uint64_t v9 = (v7 - *a2) >> 4;
        if ((unint64_t)(v9 + 1) >> 60) {
          std::vector<Phase::MetaParamValue>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v10 = *v6 - (void)*a2;
        uint64_t v11 = v10 >> 3;
        if (v10 >> 3 <= (unint64_t)(v9 + 1)) {
          uint64_t v11 = v9 + 1;
        }
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v12 = v11;
        }
        if (v12) {
          float v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::UniqueObjectId>>((uint64_t)(a2 + 2), v12);
        }
        else {
          float v13 = 0;
        }
        float v14 = &v13[16 * v9];
        *(_OWORD *)float v14 = *v8;
        float v16 = *a2;
        int v15 = a2[1];
        __int16 v17 = v14;
        if (v15 != *a2)
        {
          do
          {
            *((_OWORD *)v17 - 1) = *((_OWORD *)v15 - 1);
            v17 -= 16;
            v15 -= 16;
          }
          while (v15 != v16);
          int v15 = *a2;
        }
        float v7 = v14 + 16;
        *a2 = v17;
        a2[1] = v14 + 16;
        a2[2] = &v13[16 * v12];
        if (v15) {
          operator delete(v15);
        }
      }
      else
      {
        *(_OWORD *)float v7 = *v8;
        v7 += 16;
      }
      a2[1] = v7;
      uint64_t v5 = (void *)*v5;
    }
    while (v5);
  }
}

void sub_222051E9C(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void Phase::SpatialModeler::evaluateRendererKeepAliveFlagsAndUpdateState(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t *a4, void *a5, uint64_t a6, float a7)
{
  if (a3 >= a2) {
    unint64_t v12 = a2;
  }
  else {
    unint64_t v12 = a3;
  }
  float v13 = *(const void **)a6;
  if ((uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 3 >= a3) {
    unint64_t v14 = a3;
  }
  else {
    unint64_t v14 = (uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 3;
  }
  float v23 = 0;
  uint64_t v24 = 0;
  float v22 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v22, v13, (uint64_t)v13 + 8 * v14, v14);
  *(float *)(a1 + 22532) = a7;
  Phase::SpatialModeler::RendererStates::Update(a1 + 22480, v12, (uint64_t *)a3, (unint64_t **)&v22, *(unsigned char *)(a1 + 171));
  std::vector<Phase::SpatialModeler::RendererInfo>::vector(__p, a4[5]);
  Phase::SpatialModeler::RendererStates::GetNRenderers(a1 + 22480, a4[5], __p, (unint64_t **)&v22);
  int v15 = (char *)__p[0];
  if (a4[5])
  {
    uint64_t v16 = 0;
    unint64_t v17 = 0;
    uint64_t v18 = *a4;
    uint64_t v19 = 320;
    do
    {
      *(_OWORD *)(v18 + v19 - 320) = *(_OWORD *)&v15[v16 + 8];
      int v15 = (char *)__p[0];
      float32x2_t v20 = (char *)__p[0] + v16;
      uint64_t v18 = *a4;
      *(unsigned char *)(*a4 + v19) = *((unsigned char *)__p[0] + v16);
      *(unsigned char *)(*a5 + v17++) = v20[32] ^ 1;
      v16 += 40;
      v19 += 336;
    }
    while (v17 < a4[5]);
  }
  else if (!__p[0])
  {
    goto LABEL_13;
  }
  __p[1] = v15;
  operator delete(v15);
LABEL_13:
  if (v22)
  {
    float v23 = v22;
    operator delete(v22);
  }
}

void sub_222052010(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

void Phase::SpatialModeler::getPerceptualCoordinatesFromNewDataAndPastAssignments(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, float *a5)
{
  float v7 = *(void **)(a1 + 19400);
  if (v7)
  {
    double v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    do
    {
      uint64_t v11 = v7 + 3;
      if (v9 >= v10)
      {
        uint64_t v13 = (v9 - v8) >> 3;
        unint64_t v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 61) {
          std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
        }
        if ((v10 - v8) >> 2 > v14) {
          unint64_t v14 = (v10 - v8) >> 2;
        }
        if ((unint64_t)(v10 - v8) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v14;
        }
        if (v15)
        {
          if (v15 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v16 = (char *)operator new(8 * v15);
        }
        else
        {
          uint64_t v16 = 0;
        }
        unint64_t v17 = &v16[8 * v13];
        *(void *)unint64_t v17 = v11;
        uint64_t v18 = v17 + 8;
        while (v9 != v8)
        {
          uint64_t v19 = *((void *)v9 - 1);
          v9 -= 8;
          *((void *)v17 - 1) = v19;
          v17 -= 8;
        }
        uint64_t v10 = &v16[8 * v15];
        if (v8) {
          operator delete(v8);
        }
        double v8 = v17;
        unint64_t v12 = v18;
      }
      else
      {
        *(void *)uint64_t v9 = v11;
        unint64_t v12 = v9 + 8;
      }
      float v7 = (void *)*v7;
      uint64_t v9 = v12;
    }
    while (v7);
  }
  else
  {
    double v8 = 0;
    unint64_t v12 = 0;
  }
  unint64_t v20 = v12 - v8;
  if (v12 - v8 >= 192 && v12 != v8 && v20 >= 0x401)
  {
    uint64_t v21 = (v20 >> 1) & 0x7FFFFFFFFFFFFFF8;
    uint64_t v22 = *(void *)v8;
    *(void *)double v8 = *(void *)&v8[v21];
    *(void *)&v8[v21] = v22;
  }
  if (v8 != v12)
  {
    float v23 = v8;
    do
    {
      uint64_t v24 = *(void **)(*(void *)v23 + 16);
      if (v24)
      {
        unsigned int v25 = 0;
        uint64_t v26 = *(void *)(*(void *)v23 + 248);
        float32x2_t v27 = 0;
        do
        {
          unint64_t v28 = v24[2];
          uint64_t v29 = (float32x2_t *)std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::find<PHASETapType>(a2, v28);
          if (v29)
          {
            float32x2_t v27 = vadd_f32(v27, v29[3]);
            std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(a5, v28, v24 + 2)[3] = v26;
            ++v25;
          }
          uint64_t v24 = (void *)*v24;
        }
        while (v24);
        if (v25)
        {
          *(float *)v30.i32 = (float)v25;
          float32x2_t v31 = vdiv_f32(v27, (float32x2_t)vdup_lane_s32(v30, 0));
          uint64_t v33 = *(float32x2_t **)(a3 + 8);
          unint64_t v32 = *(void *)(a3 + 16);
          if ((unint64_t)v33 >= v32)
          {
            float v36 = *(float32x2_t **)a3;
            uint64_t v37 = ((uint64_t)v33 - *(void *)a3) >> 3;
            unint64_t v38 = v37 + 1;
            if ((unint64_t)(v37 + 1) >> 61) {
              std::vector<Phase::SpatialModeler::DirectionalMetadataOutput<float>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v39 = v32 - (void)v36;
            if (v39 >> 2 > v38) {
              unint64_t v38 = v39 >> 2;
            }
            if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v40 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v40 = v38;
            }
            uint64_t v35 = a4;
            if (v40)
            {
              float v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(a3 + 16, v40);
              float v36 = *(float32x2_t **)a3;
              uint64_t v33 = *(float32x2_t **)(a3 + 8);
            }
            else
            {
              float v41 = 0;
            }
            BOOL v42 = (float32x2_t *)&v41[8 * v37];
            float32x2_t *v42 = v31;
            unint64_t v34 = v42 + 1;
            while (v33 != v36)
            {
              __int32 v43 = v33[-1].i32[0];
              --v33;
              v42[-1].i32[0] = v43;
              --v42;
              v42->i32[1] = v33->i32[1];
            }
            *(void *)a3 = v42;
            *(void *)(a3 + 8) = v34;
            *(void *)(a3 + 16) = &v41[8 * v40];
            if (v36) {
              operator delete(v36);
            }
          }
          else
          {
            *uint64_t v33 = v31;
            unint64_t v34 = v33 + 1;
            uint64_t v35 = a4;
          }
          *(void *)(a3 + 8) = v34;
          int v45 = *(void **)(v35 + 8);
          unint64_t v44 = *(void *)(v35 + 16);
          if ((unint64_t)v45 >= v44)
          {
            int v47 = *(void **)v35;
            uint64_t v48 = ((uint64_t)v45 - *(void *)v35) >> 3;
            unint64_t v49 = v48 + 1;
            if ((unint64_t)(v48 + 1) >> 61) {
              std::vector<Phase::SpatialModeler::OptionalPropertyDescription>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v50 = v44 - (void)v47;
            if (v50 >> 2 > v49) {
              unint64_t v49 = v50 >> 2;
            }
            if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v51 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v51 = v49;
            }
            if (v51)
            {
              unsigned int v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(a4 + 16, v51);
              int v47 = *(void **)v35;
              int v45 = *(void **)(v35 + 8);
            }
            else
            {
              unsigned int v52 = 0;
            }
            int v53 = &v52[8 * v48];
            *(void *)int v53 = v26;
            float v46 = v53 + 8;
            while (v45 != v47)
            {
              uint64_t v54 = *--v45;
              *((void *)v53 - 1) = v54;
              v53 -= 8;
            }
            *(void *)uint64_t v35 = v53;
            *(void *)(v35 + 8) = v46;
            *(void *)(v35 + 16) = &v52[8 * v51];
            if (v47) {
              operator delete(v47);
            }
          }
          else
          {
            *int v45 = v26;
            float v46 = v45 + 1;
          }
          *(void *)(v35 + 8) = v46;
        }
      }
      v23 += 8;
    }
    while (v23 != v12);
  }
  if (v8)
  {
    operator delete(v8);
  }
}

void sub_2220523F8(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *Phase::SpatialModeler::getAttackQueryAssignments(uint64_t *this, const Phase::SpatialModeler::SourcePreProcessData *a2, Phase::SpatialModeler::ClusterPreProcessData *a3)
{
  uint64_t v4 = *this;
  uint64_t v3 = this[1];
  if (v3 != *this)
  {
    size_t v6 = this;
    unint64_t v7 = 0;
    double v8 = (void *)((char *)a2 + 40);
    uint64_t v9 = (float *)((char *)a2 + 48);
    do
    {
      this = (uint64_t *)*((void *)a2 + 3);
      uint64_t v10 = (uint64_t *)*((void *)a2 + 4);
      uint64_t v11 = (uint64_t *)(v4 + 40 * v7 + 32);
      if (this == v10)
      {
        unint64_t v12 = (uint64_t *)*((void *)a2 + 3);
      }
      else
      {
        unint64_t v12 = (uint64_t *)*((void *)a2 + 3);
        while (*v12 != *v11)
        {
          if (++v12 == v10)
          {
            unint64_t v12 = (uint64_t *)*((void *)a2 + 4);
            break;
          }
        }
      }
      if (v12 == v10)
      {
        uint64_t v13 = *v11;
        if (*v11)
        {
          if ((unint64_t)v10 >= *v8)
          {
            uint64_t v15 = v10 - this;
            unint64_t v16 = v15 + 1;
            if ((unint64_t)(v15 + 1) >> 61) {
              std::vector<Phase::SpatialModeler::OptionalPropertyDescription>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v17 = *v8 - (void)this;
            if (v17 >> 2 > v16) {
              unint64_t v16 = v17 >> 2;
            }
            if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v18 = v16;
            }
            if (v18)
            {
              uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)v8, v18);
              this = (uint64_t *)*((void *)a2 + 3);
              uint64_t v10 = (uint64_t *)*((void *)a2 + 4);
              uint64_t v13 = *v11;
            }
            else
            {
              uint64_t v19 = 0;
            }
            unint64_t v20 = &v19[8 * v15];
            *(void *)unint64_t v20 = v13;
            unint64_t v14 = v20 + 8;
            while (v10 != this)
            {
              uint64_t v21 = *--v10;
              *((void *)v20 - 1) = v21;
              v20 -= 8;
            }
            *((void *)a2 + 3) = v20;
            *((void *)a2 + 4) = v14;
            *((void *)a2 + 5) = &v19[8 * v18];
            if (this) {
              operator delete(this);
            }
          }
          else
          {
            *uint64_t v10 = v13;
            unint64_t v14 = v10 + 1;
          }
          *((void *)a2 + 4) = v14;
          uint64_t v22 = (unint64_t *)(*v6 + 40 * v7);
          unint64_t v23 = v22[4];
          this = std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v9, *v22, v22);
          this[3] = v23;
          uint64_t v4 = *v6;
          uint64_t v3 = v6[1];
        }
      }
      ++v7;
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((v3 - v4) >> 3) > v7);
  }
  return this;
}

void Phase::SpatialModeler::checkSubmixRendererChange(BOOL a1, void *a2)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 144))
  {
    uint64_t v3 = (void *)a1;
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    uint64_t v6 = 288;
    do
    {
      unint64_t v7 = (void *)(v3[13] + v6);
      if (*v7 != -1)
      {
        unint64_t v8 = *(v7 - 36);
        unint64_t v9 = *(void *)(v3[7] + 336 * *v7);
        unint64_t v10 = *(void *)(a2[13] + v4);
        if (v10 != -1 && v10 < a2[6])
        {
          unint64_t v11 = *(void *)(a2[1] + 336 * v10);
          if (v9 == v11) {
            goto LABEL_12;
          }
          unint64_t v12 = **(NSObject ***)(Phase::Logger::GetInstance((Phase::Logger *)a1) + 1184);
          a1 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
          if (!a1) {
            goto LABEL_12;
          }
          uint64_t v13 = v3[18];
          *(_DWORD *)buf = 136316418;
          unint64_t v20 = "RoomSimulationClusteringFunctions.cpp";
          __int16 v21 = 1024;
          int v22 = 349;
          __int16 v23 = 2048;
          unint64_t v24 = v8;
          __int16 v25 = 2048;
          unint64_t v26 = v9;
          __int16 v27 = 2048;
          unint64_t v28 = v11;
          __int16 v29 = 2048;
          uint64_t v30 = v13;
          unint64_t v14 = v12;
          os_log_type_t v15 = OS_LOG_TYPE_DEFAULT;
          unint64_t v16 = "%25s:%-5d Renderer Id changed for submix %llu, old Renderer Id %llu, new Renderer Id %llu, total number of submixes %zu";
          goto LABEL_11;
        }
        uint64_t v17 = **(NSObject ***)(Phase::Logger::GetInstance((Phase::Logger *)a1) + 1184);
        a1 = os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
        if (a1)
        {
          uint64_t v18 = v3[18];
          *(_DWORD *)buf = 136316418;
          unint64_t v20 = "RoomSimulationClusteringFunctions.cpp";
          __int16 v21 = 1024;
          int v22 = 335;
          __int16 v23 = 2048;
          unint64_t v24 = v10;
          __int16 v25 = 2048;
          unint64_t v26 = v8;
          __int16 v27 = 2048;
          unint64_t v28 = v9;
          __int16 v29 = 2048;
          uint64_t v30 = v18;
          unint64_t v14 = v17;
          os_log_type_t v15 = OS_LOG_TYPE_ERROR;
          unint64_t v16 = "%25s:%-5d Invalid render ground index %llu assigned for submix %llu, old Renderer Id %llu, total number of submixes %zu";
LABEL_11:
          _os_log_impl(&dword_221E5E000, v14, v15, v16, buf, 0x3Au);
        }
      }
LABEL_12:
      ++v5;
      v4 += 16;
      v6 += 304;
    }
    while (v5 < v3[18]);
  }
}

uint64_t Phase::SpatialModeler::AssignSourcesToRenderers(unint64_t a1, uint64_t *a2, void *a3, void *a4)
{
  uint64_t v9 = *a2;
  uint64_t v8 = a2[1];
  unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - *a2) >> 3);
  uint64_t v12 = a3[3];
  uint64_t v11 = a3[4];
  uint64_t v13 = a4[2];
  unint64_t v14 = (unsigned char *)*a4;
  if (v10 <= (v13 - *a4) >> 3)
  {
    uint64_t v69 = a3[3];
    uint64_t v70 = a3[4];
    uint64_t v71 = a2[1];
    uint64_t v18 = (unsigned char *)a4[1];
    unint64_t v19 = (v18 - v14) >> 3;
    if (v19 >= v10) {
      uint64_t v20 = v10;
    }
    else {
      uint64_t v20 = (v18 - v14) >> 3;
    }
    if (v20) {
      memset(v14, 255, 8 * v20);
    }
    BOOL v21 = v10 >= v19;
    unint64_t v22 = v10 - v19;
    if (v22 != 0 && v21)
    {
      memset(v18, 255, 8 * v10 - ((v18 - v14) & 0xFFFFFFFFFFFFFFF8));
      __int16 v23 = &v18[8 * v22];
    }
    else
    {
      __int16 v23 = &v14[8 * v10];
    }
    a4[1] = v23;
    uint64_t v11 = v70;
    uint64_t v8 = v71;
    uint64_t v12 = v69;
  }
  else
  {
    if (v14)
    {
      a4[1] = v14;
      operator delete(v14);
      uint64_t v13 = 0;
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
    }
    if (v10 >> 61) {
      std::vector<Phase::SpatialModeler::OptionalPropertyDescription>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = v13 >> 2;
    if (v13 >> 2 <= v10) {
      uint64_t v15 = v10;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v15;
    }
    std::vector<unsigned long long>::__vallocate[abi:ne180100](a4, v16);
    uint64_t v17 = (char *)a4[1];
    memset(v17, 255, 8 * v10);
    a4[1] = &v17[8 * v10];
  }
  long long v76 = 0u;
  long long v77 = 0u;
  int v78 = 1065353216;
  long long v73 = 0u;
  long long v74 = 0u;
  int v75 = 1065353216;
  if (v8 == v9) {
    goto LABEL_76;
  }
  uint64_t v24 = 0;
  unint64_t v25 = (v11 - v12) >> 3;
  if (v10 <= 1) {
    unint64_t v10 = 1;
  }
  do
  {
    unint64_t v26 = (unint64_t *)(*a2 + 40 * v24);
    unint64_t v27 = v26[4];
    if (v27)
    {
      uint64_t v28 = a3[3];
      uint64_t v29 = a3[4] - v28;
      if (!v29) {
        goto LABEL_40;
      }
      unint64_t v30 = 0;
      unint64_t v31 = v29 >> 3;
      if (v31 <= 1) {
        unint64_t v31 = 1;
      }
      while (*(void *)(v28 + 8 * v30) != v27)
      {
        if (v31 == ++v30) {
          goto LABEL_40;
        }
      }
    }
    else
    {
      unint64_t v32 = std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::find<unsigned long long>(a3[6], a3[7], *v26);
      if (!v32) {
        goto LABEL_40;
      }
      uint64_t v33 = (void *)a3[3];
      unint64_t v34 = (void *)a3[4];
      if (v33 == v34)
      {
        uint64_t v35 = (void *)a3[3];
      }
      else
      {
        uint64_t v35 = (void *)a3[3];
        while (*v35 != v32[3])
        {
          if (++v35 == v34)
          {
            uint64_t v35 = (void *)a3[4];
            break;
          }
        }
      }
      unint64_t v30 = v35 - v33;
    }
    if (v30 < a1)
    {
      *(void *)(*a4 + 8 * v24) = v30;
      float v36 = std::__hash_table<std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((float *)&v76, *v26, (uint64_t *)v26);
      v36[3] = v24;
      v36[4] = v30;
      goto LABEL_41;
    }
LABEL_40:
    std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((float *)&v73, *v26, v26)[3] = v24;
LABEL_41:
    ++v24;
  }
  while (v24 != v10);
  uint64_t v37 = (uint64_t *)v74;
  if ((void)v74)
  {
    while (1)
    {
      unint64_t v38 = v37[2];
      uint64_t v39 = v37[3];
      unint64_t v72 = v38;
      unint64_t v40 = (void *)v77;
      if (!(void)v77) {
        break;
      }
      unint64_t v41 = 0;
      uint64_t v42 = *a2;
      float v43 = 3.4028e38;
      unint64_t v44 = (void *)v77;
      do
      {
        unint64_t v45 = v44[4];
        if (v45 < (uint64_t)(a3[1] - *a3) >> 3)
        {
          uint64_t v46 = 0;
          uint64_t v47 = *a3 + 8 * v45;
          float v48 = 0.0;
          char v49 = 1;
          do
          {
            char v50 = v49;
            float v51 = *(float *)(v47 + 4 * v46) - *(float *)(*a2 + 40 * v39 + 20 + 4 * v46);
            float v48 = v48 + (float)(v51 * v51);
            uint64_t v46 = 1;
            char v49 = 0;
          }
          while ((v50 & 1) != 0);
          float v52 = sqrtf(v48);
          if (v52 < v43)
          {
            float v43 = v52;
            unint64_t v41 = v44[2];
          }
        }
        unint64_t v44 = (void *)*v44;
      }
      while (v44);
      unint64_t v53 = 0;
      uint64_t v54 = (float32x2_t *)(v42 + 40 * v39);
      float32x2_t v55 = v54[1];
      float v56 = v54[2].f32[0];
      float v57 = 3.4028e38;
      do
      {
        int64x2_t v58 = (float32x2_t *)(v42 + 40 * v40[3]);
        float32x2_t v59 = vsub_f32(v58[1], v55);
        float v60 = sqrtf(vaddv_f32(vmul_f32(v59, v59)) + (float)((float)(v58[2].f32[0] - v56) * (float)(v58[2].f32[0] - v56)));
        if (v60 > 1000000.0) {
          float v60 = 1000000.0;
        }
        if (v60 < v57)
        {
          unint64_t v53 = v40[2];
          float v57 = v60;
        }
        unint64_t v40 = (void *)*v40;
      }
      while (v40);
      if (v43 < 0.001 && v41 != 0)
      {
LABEL_69:
        v79[0] = v41;
        uint64_t v63 = std::__hash_table<std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((float *)&v76, v41, v79)[4];
        *(void *)(*a4 + 8 * v39) = v63;
        float32x4_t v64 = std::__hash_table<std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((float *)&v76, v41, v79);
        v64[3] = v39;
        v64[4] = v63;
        goto LABEL_75;
      }
      if (v57 >= 0.005 || v53 == 0)
      {
        if (v25 >= a1)
        {
          if (v43 < 3.4028e38) {
            goto LABEL_69;
          }
          if (v57 >= 3.4028e38)
          {
LABEL_74:
            *(void *)(*a4 + 8 * v39) = (unint64_t)(float)((float)((float)rand() * 4.6566e-10) * (float)a1);
            goto LABEL_75;
          }
          goto LABEL_66;
        }
LABEL_71:
        *(void *)(*a4 + 8 * v39) = v25;
        char v65 = std::__hash_table<std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((float *)&v76, v38, (uint64_t *)&v72);
        v65[3] = v39;
        v65[4] = v25;
        uint64_t v37 = (uint64_t *)std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::erase(&v73, v37);
        ++v25;
        if (!v37) {
          goto LABEL_76;
        }
      }
      else
      {
LABEL_66:
        v79[0] = v53;
        uint64_t v66 = std::__hash_table<std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((float *)&v76, v53, v79)[4];
        *(void *)(*a4 + 8 * v39) = v66;
        int64x2_t v67 = std::__hash_table<std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((float *)&v76, v53, v79);
        v67[3] = v39;
        v67[4] = v66;
LABEL_75:
        uint64_t v37 = (uint64_t *)std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::erase(&v73, v37);
        if (!v37) {
          goto LABEL_76;
        }
      }
    }
    if (v25 >= a1) {
      goto LABEL_74;
    }
    goto LABEL_71;
  }
LABEL_76:
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)&v73);
  return std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)&v76);
}

void sub_222052D30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)va);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)va1);
  _Unwind_Resume(a1);
}

void Phase::SpatialModeler::ConstructSharedHistogram(Phase::Logger *a1, uint64_t a2, float a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = a6;
  uint64_t v8 = a1;
  uint64_t v101 = *MEMORY[0x263EF8340];
  float32x2_t v96 = 0;
  float32x2_t v97 = 0;
  int v98 = 0;
  uint64_t v9 = *(void *)(a5 + 18928);
  if (*(void *)(a5 + 18936) == v9) {
    goto LABEL_74;
  }
  unint64_t v11 = 0;
  unint64_t v12 = 0;
  unsigned int v13 = 0;
  uint64_t v89 = -1;
  unsigned int v90 = a1;
  int64x2_t v94 = vdupq_n_s64(4uLL);
  do
  {
    uint64_t v14 = v9 + 56 * v12;
    unint64_t v95 = 0;
    unint64_t v95 = *(void *)v14;
    uint64_t v15 = *(void *)(v14 + 24);
    int v16 = *(_DWORD *)(v14 + 32);
    uint64_t v99 = &v95;
    uint64_t v17 = std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v6, &v95, (uint64_t)&std::piecewise_construct, &v99);
    v17[3] = v15;
    *((_DWORD *)v17 + 8) = v16;
    Phase::SpatialModeler::RayTracerState::GetSourceListenerResult((Phase::SpatialModeler::RayTracerState *)a5, &v95, (uint64_t)buf);
    uint64_t v20 = *(void *)&buf[16];
    if (!*(void *)&buf[16] || *(unsigned char *)(*(void *)&buf[16] + 36)) {
      goto LABEL_59;
    }
    uint64_t v21 = (*(_DWORD *)(*(void *)&buf[16] + 28) * *(_DWORD *)(*(void *)&buf[16] + 24));
    if (v21)
    {
      uint64_t v22 = (v21 + 3) & 0x1FFFFFFFCLL;
      uint64x2_t v23 = (uint64x2_t)vdupq_n_s64(v21 - 1);
      uint64_t v24 = (__int32 *)(*(void *)(*(void *)&buf[16] + 8) + 8);
      int64x2_t v25 = (int64x2_t)xmmword_2220A5520;
      int64x2_t v26 = (int64x2_t)xmmword_2220A5510;
      float32x4_t v27 = (float32x4_t)xmmword_2220A5530;
      do
      {
        float32x4_t v28 = v27;
        int32x4_t v29 = (int32x4_t)vcgeq_u64(v23, (uint64x2_t)v25);
        *(int32x2_t *)v18.i8 = vmovn_s64((int64x2_t)v29);
        *(int16x4_t *)v27.f32 = vmovn_s32(v18);
        if (v27.i8[0]) {
          v27.i32[0] = *(v24 - 2);
        }
        if (vmovn_s32(v18).i8[2]) {
          v27.i32[1] = *(v24 - 1);
        }
        int32x4_t v18 = (int32x4_t)vcgeq_u64(v23, (uint64x2_t)v26);
        int32x2_t v30 = (int32x2_t)vmovn_s32(vmovn_hight_s64(v19, (int64x2_t)v18));
        if (v30.i8[4]) {
          v27.i32[2] = *v24;
        }
        int32x2_t v19 = (int32x2_t)vmovn_s32(vmovn_hight_s64(v30, (int64x2_t)v18));
        if (v19.i8[6]) {
          v27.i32[3] = v24[1];
        }
        float32x4_t v27 = vaddq_f32(v28, v27);
        int64x2_t v26 = vaddq_s64(v26, v94);
        int64x2_t v25 = vaddq_s64(v25, v94);
        v24 += 4;
        v22 -= 4;
      }
      while (v22);
      int8x16_t v31 = vbslq_s8((int8x16_t)vuzp1q_s32(v29, v18), (int8x16_t)v27, (int8x16_t)v28);
      float v32 = (float)(vaddv_f32(*(float32x2_t *)v31.i8) + *(float *)&v31.i32[2]) + *(float *)&v31.i32[3];
    }
    else
    {
      float v32 = 0.0;
    }
    if (v32 <= a3) {
      goto LABEL_59;
    }
    uint64_t v33 = *(void *)&buf[24];
    unint64_t v34 = v97;
    if (v97 < (uint64_t *)v98)
    {
      uint64_t *v97 = *(void *)&buf[16];
      v34[1] = v33;
      if (v33) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v33 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v35 = v34 + 2;
      uint64_t v36 = a2;
      goto LABEL_46;
    }
    unsigned int v92 = v13;
    uint64_t v37 = v96;
    uint64_t v38 = ((char *)v97 - (char *)v96) >> 4;
    unint64_t v39 = v38 + 1;
    if ((unint64_t)(v38 + 1) >> 60) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v40 = v11;
    uint64_t v41 = v98 - (char *)v96;
    if ((v98 - (char *)v96) >> 3 > v39) {
      unint64_t v39 = v41 >> 3;
    }
    if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v42 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v42 = v39;
    }
    if (v42 >> 60) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    float v43 = (char *)operator new(16 * v42);
    unint64_t v44 = (uint64_t *)&v43[16 * v38];
    *unint64_t v44 = v20;
    v44[1] = v33;
    if (v33)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v33 + 8), 1uLL, memory_order_relaxed);
      unint64_t v34 = v97;
    }
    uint64_t v35 = v44 + 2;
    if (v34 == v37)
    {
      float32x2_t v96 = (uint64_t *)&v43[16 * v38];
      float32x2_t v97 = v44 + 2;
      int v98 = &v43[16 * v42];
      unint64_t v11 = v40;
      uint64_t v6 = a6;
      uint64_t v36 = a2;
      if (!v37) {
        goto LABEL_45;
      }
    }
    else
    {
      do
      {
        long long v45 = *((_OWORD *)v34 - 1);
        v34 -= 2;
        *((_OWORD *)v44 - 1) = v45;
        v44 -= 2;
        *unint64_t v34 = 0;
        v34[1] = 0;
      }
      while (v34 != v37);
      uint64_t v37 = v96;
      uint64_t v46 = v97;
      float32x2_t v96 = v44;
      float32x2_t v97 = v35;
      int v98 = &v43[16 * v42];
      unint64_t v11 = v40;
      if (v46 == v37)
      {
        uint64_t v6 = a6;
        uint64_t v36 = a2;
      }
      else
      {
        uint64_t v6 = a6;
        uint64_t v36 = a2;
        do
        {
          uint64_t v47 = (std::__shared_weak_count *)*(v46 - 1);
          if (v47) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v47);
          }
          v46 -= 2;
        }
        while (v46 != v37);
      }
      if (!v37) {
        goto LABEL_45;
      }
    }
    operator delete(v37);
LABEL_45:
    unsigned int v13 = v92;
LABEL_46:
    float32x2_t v97 = v35;
    unsigned int v48 = *(_DWORD *)(v20 + 44);
    if (*(_DWORD *)(a5 + 176) < v48) {
      unsigned int v48 = *(_DWORD *)(a5 + 176);
    }
    uint64_t v49 = *(void *)(v36 + 144);
    if (v49)
    {
      uint64_t v50 = 0;
      float v51 = (unsigned char *)(*(void *)(v36 + 104) + 152);
      while (*((void *)v51 - 1) != *(void *)(v9 + 56 * v12 + 48))
      {
        ++v50;
        v51 += 304;
        if (v49 == v50) {
          goto LABEL_58;
        }
      }
      if ((v50 & 0x8000000000000000) == 0 && !*v51 && *(float *)(v20 + 40) < 0.000029155) {
        uint64_t v89 = v11;
      }
    }
LABEL_58:
    v13 += v48;
    ++v11;
LABEL_59:
    if (*(void *)&buf[24]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[24]);
    }
    a1 = *(Phase::Logger **)&buf[8];
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    ++v12;
    uint64_t v9 = *(void *)(a5 + 18928);
  }
  while (v12 < 0x6DB6DB6DB6DB6DB7 * ((*(void *)(a5 + 18936) - v9) >> 3));
  uint64_t v8 = v90;
  if (v11 && v13)
  {
    unsigned int v52 = *(_DWORD *)(*v96 + 44);
    unsigned int v53 = *(_DWORD *)(a5 + 176);
    Phase::SpatialModeler::RayTracerState::CopyDirectivityHistogram((Phase::Logger *)a5, v96, buf);
    float v54 = (float)v13;
    if (v53 >= v52) {
      unsigned int v55 = v52;
    }
    else {
      unsigned int v55 = v53;
    }
    float v56 = (float)v55 / v54;
    long long v57 = *(_OWORD *)buf;
    *(void *)buf = 0;
    *(void *)&_OWORD buf[8] = 0;
    int64x2_t v58 = *(std::__shared_weak_count **)(v6 + 48);
    *(_OWORD *)(v6 + 40) = v57;
    if (v58)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v58);
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
    }
    float32x2_t v59 = (Phase::Logger *)Phase::SpatialModeler::DirectivityHistogram::operator*=(*(void **)(v6 + 40), v56);
    if (v89) {
      float v62 = *(float *)(*v96 + 40);
    }
    else {
      float v62 = 3.4028e38;
    }
    if (v11 >= 2)
    {
      uint64_t v66 = v96;
      if ((unint64_t)((char *)v97 - (char *)v96) >= 0x11)
      {
        unint64_t v67 = 1;
        uint64_t v68 = 2;
        do
        {
          uint64_t v69 = v66[v68];
          unsigned int v70 = *(_DWORD *)(v69 + 44);
          if (*(_DWORD *)(a5 + 176) < v70) {
            unsigned int v70 = *(_DWORD *)(a5 + 176);
          }
          float32x2_t v59 = (Phase::Logger *)Phase::SpatialModeler::DirectivityHistogram::MultiplyAdd(*(Phase::SpatialModeler::DirectivityHistogram **)(v6 + 40), (float **)v69, (float)v70 / v54);
          uint64_t v66 = v96;
          if (v89 != v67)
          {
            uint64_t v71 = v96[v68];
            if (*(float *)(v71 + 40) < v62) {
              float v62 = *(float *)(v71 + 40);
            }
          }
          ++v67;
          v68 += 2;
        }
        while (v67 < ((char *)v97 - (char *)v96) >> 4);
      }
      if (v62 < 3.4028e38) {
        *(float *)(*(void *)(v6 + 40) + 40) = v62;
      }
      if (v11 < 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a5 + 18936) - *(void *)(a5 + 18928)) >> 3))
      {
        unint64_t v72 = **(NSObject ***)(Phase::Logger::GetInstance(v59) + 1184);
        if (os_log_type_enabled(v72, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v73 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a5 + 18936) - *(void *)(a5 + 18928)) >> 3);
          *(_DWORD *)buf = 136315906;
          *(void *)&uint8_t buf[4] = "RoomSimulationClusteringFunctions.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 713;
          *(_WORD *)&unsigned char buf[18] = 2048;
          *(void *)&buf[20] = v11;
          *(_WORD *)&buf[28] = 2048;
          *(void *)&buf[30] = v73;
          _os_log_impl(&dword_221E5E000, v72, OS_LOG_TYPE_DEBUG, "%25s:%-5d ClusterLateReverb: Using %zu of %lu histograms for shared reverb.", buf, 0x26u);
        }
      }
    }
    goto LABEL_94;
  }
LABEL_74:
  uint64_t v63 = **(NSObject ***)(Phase::Logger::GetInstance(a1) + 1184);
  if (os_log_type_enabled(v63, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = "RoomSimulationClusteringFunctions.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 719;
    _os_log_impl(&dword_221E5E000, v63, OS_LOG_TYPE_DEBUG, "%25s:%-5d ClusterLateReverb: All histograms are invalid or empty.", buf, 0x12u);
  }
  Phase::SpatialModeler::RayTracerState::CreateDirectivityHistogram((Phase::SpatialModeler::RayTracerState *)a5, *(float *)(a5 + 112), *(float *)(a5 + 116), 3.4028e38, *((void *)v8 + 6), buf);
  long long v64 = *(_OWORD *)buf;
  *(void *)buf = 0;
  *(void *)&_OWORD buf[8] = 0;
  char v65 = *(std::__shared_weak_count **)(v6 + 48);
  *(_OWORD *)(v6 + 40) = v64;
  if (v65)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v65);
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
  }
LABEL_94:
  uint64_t v74 = *(void *)(v6 + 40);
  float v75 = 0.0;
  if (!*(unsigned char *)(v74 + 36))
  {
    uint64_t v76 = (*(_DWORD *)(v74 + 28) * *(_DWORD *)(v74 + 24));
    if (v76)
    {
      uint64_t v77 = *(void *)(v74 + 8);
      uint64_t v78 = (v76 + 3) & 0x1FFFFFFFCLL;
      uint64x2_t v79 = (uint64x2_t)vdupq_n_s64(v76 - 1);
      int64x2_t v80 = (int64x2_t)xmmword_2220A5510;
      int64x2_t v81 = (int64x2_t)xmmword_2220A5520;
      float32x4_t v82 = (float32x4_t)xmmword_2220A5530;
      int8x16_t v83 = (__int32 *)(v77 + 8);
      int64x2_t v84 = vdupq_n_s64(4uLL);
      do
      {
        float32x4_t v85 = v82;
        int32x4_t v86 = (int32x4_t)vcgeq_u64(v79, (uint64x2_t)v81);
        *(int32x2_t *)v60.i8 = vmovn_s64((int64x2_t)v86);
        *(int16x4_t *)v82.f32 = vmovn_s32(v60);
        if (v82.i8[0]) {
          v82.i32[0] = *(v83 - 2);
        }
        if (vmovn_s32(v60).i8[2]) {
          v82.i32[1] = *(v83 - 1);
        }
        int32x4_t v60 = (int32x4_t)vcgeq_u64(v79, (uint64x2_t)v80);
        int32x2_t v87 = (int32x2_t)vmovn_s32(vmovn_hight_s64(v61, (int64x2_t)v60));
        if (v87.i8[4]) {
          v82.i32[2] = *v83;
        }
        int32x2_t v61 = (int32x2_t)vmovn_s32(vmovn_hight_s64(v87, (int64x2_t)v60));
        if (v61.i8[6]) {
          v82.i32[3] = v83[1];
        }
        float32x4_t v82 = vaddq_f32(v85, v82);
        int64x2_t v80 = vaddq_s64(v80, v84);
        int64x2_t v81 = vaddq_s64(v81, v84);
        v83 += 4;
        v78 -= 4;
      }
      while (v78);
      int8x16_t v88 = vbslq_s8((int8x16_t)vuzp1q_s32(v86, v60), (int8x16_t)v82, (int8x16_t)v85);
      float v75 = (float)(vaddv_f32(*(float32x2_t *)v88.i8) + *(float *)&v88.i32[2]) + *(float *)&v88.i32[3];
    }
  }
  *(float *)(v6 + 56) = v75;
  *(void *)buf = &v96;
  std::vector<std::shared_ptr<Phase::Controller::Renderer>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void sub_222053530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void **a29)
{
  a29 = (void **)&a24;
  std::vector<std::shared_ptr<Phase::Controller::Renderer>>::__destroy_vector::operator()[abi:ne180100](&a29);
  _Unwind_Resume(a1);
}

void Phase::SpatialModeler::AggregateSharedHistogram(Phase::SpatialModeler *this, Phase::SpatialModeler::RayTracerState *a2, uint64_t a3, const Phase::SpatialModeler::SingleLRClusterResult *a4)
{
  uint64_t v73 = *MEMORY[0x263EF8340];
  unint64_t v68 = (unint64_t)a2;
  *(void *)long long __p = &v68;
  uint64_t v6 = (Phase::Logger *)std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)this + 19424, &v68, (uint64_t)&std::piecewise_construct, (void **)__p);
  unint64_t v7 = v6;
  uint64_t v8 = *((void *)v6 + 8);
  if (v8 && (uint64_t v9 = *(void *)(a3 + 40)) != 0)
  {
    float v10 = *(float *)(v9 + 40);
    float v11 = *((float *)this + 28);
    if (v10 <= v11)
    {
      float v12 = *(float *)(v8 + 40);
      if (v12 <= v11) {
        float v10 = (float)(v10 * 0.29) + (float)(v12 * 0.71);
      }
      *(float *)(v8 + 40) = v10;
    }
    float SharedEnergyReFixedDb = Phase::SpatialModeler::RayTracerState::GetSharedEnergyReFixedDb(this, &v68);
    float v14 = expf((float)((float)(SharedEnergyReFixedDb * 10.0) / 10.0) * 0.23026);
    Phase::SpatialModeler::DirectivityHistogram::operator*=(*((void **)v7 + 8), v14 * 0.71);
    Phase::SpatialModeler::DirectivityHistogram::MultiplyAdd(*((Phase::SpatialModeler::DirectivityHistogram **)v7 + 8), *(float ***)(a3 + 40), 0.29);
    uint64_t v17 = *((void *)v7 + 8);
    float v18 = 0.0;
    if (!*(unsigned char *)(v17 + 36))
    {
      uint64_t v19 = (*(_DWORD *)(v17 + 28) * *(_DWORD *)(v17 + 24));
      if (v19)
      {
        uint64_t v20 = *(void *)(v17 + 8);
        uint64_t v21 = (v19 + 3) & 0x1FFFFFFFCLL;
        uint64x2_t v22 = (uint64x2_t)vdupq_n_s64(v19 - 1);
        int64x2_t v23 = (int64x2_t)xmmword_2220A5510;
        int64x2_t v24 = (int64x2_t)xmmword_2220A5520;
        float32x4_t v25 = (float32x4_t)xmmword_2220A5530;
        int64x2_t v26 = (__int32 *)(v20 + 8);
        int64x2_t v27 = vdupq_n_s64(4uLL);
        do
        {
          float32x4_t v28 = v25;
          int32x4_t v29 = (int32x4_t)vcgeq_u64(v22, (uint64x2_t)v24);
          *(int32x2_t *)v15.i8 = vmovn_s64((int64x2_t)v29);
          *(int16x4_t *)v25.f32 = vmovn_s32(v15);
          if (v25.i8[0]) {
            v25.i32[0] = *(v26 - 2);
          }
          if (vmovn_s32(v15).i8[2]) {
            v25.i32[1] = *(v26 - 1);
          }
          int32x4_t v15 = (int32x4_t)vcgeq_u64(v22, (uint64x2_t)v23);
          int32x2_t v30 = (int32x2_t)vmovn_s32(vmovn_hight_s64(v16, (int64x2_t)v15));
          if (v30.i8[4]) {
            v25.i32[2] = *v26;
          }
          int32x2_t v16 = (int32x2_t)vmovn_s32(vmovn_hight_s64(v30, (int64x2_t)v15));
          if (v16.i8[6]) {
            v25.i32[3] = v26[1];
          }
          float32x4_t v25 = vaddq_f32(v28, v25);
          int64x2_t v23 = vaddq_s64(v23, v27);
          int64x2_t v24 = vaddq_s64(v24, v27);
          v26 += 4;
          v21 -= 4;
        }
        while (v21);
        int8x16_t v31 = vbslq_s8((int8x16_t)vuzp1q_s32(v29, v15), (int8x16_t)v25, (int8x16_t)v28);
        float v18 = (float)(vaddv_f32(*(float32x2_t *)v31.i8) + *(float *)&v31.i32[2]) + *(float *)&v31.i32[3];
      }
    }
    float v32 = (void *)((char *)v7 + 24);
    *((float *)v7 + 20) = v18;
    float v33 = Phase::SpatialModeler::RayTracerState::GetSharedEnergyReFixedDb(this, &v68);
    float v34 = *((float *)this + 37);
    memset(__p, 0, 24);
    uint64_t v35 = (void *)*((void *)v7 + 5);
    if (v35)
    {
      do
      {
        uint64_t v36 = v35 + 2;
        if (!std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::find<unsigned long long>((void *)a3, v35 + 2))
        {
          uint64_t v37 = *(char **)&__p[8];
          if (*(void *)&__p[8] >= *(void *)&__p[16])
          {
            unint64_t v39 = *(char **)__p;
            uint64_t v40 = (uint64_t)(*(void *)&__p[8] - *(void *)__p) >> 3;
            unint64_t v41 = v40 + 1;
            if ((unint64_t)(v40 + 1) >> 61) {
              std::vector<Phase::SpatialModeler::OptionalPropertyDescription>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v42 = *(void *)&__p[16] - *(void *)__p;
            if ((uint64_t)(*(void *)&__p[16] - *(void *)__p) >> 2 > v41) {
              unint64_t v41 = v42 >> 2;
            }
            if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v43 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v43 = v41;
            }
            if (v43)
            {
              unint64_t v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)&__p[16], v43);
              unint64_t v39 = *(char **)__p;
              uint64_t v37 = *(char **)&__p[8];
            }
            else
            {
              unint64_t v44 = 0;
            }
            long long v45 = &v44[8 * v40];
            *(void *)long long v45 = *v36;
            uint64_t v38 = v45 + 8;
            while (v37 != v39)
            {
              uint64_t v46 = *((void *)v37 - 1);
              v37 -= 8;
              *((void *)v45 - 1) = v46;
              v45 -= 8;
            }
            *(void *)long long __p = v45;
            *(void *)&__p[8] = v38;
            *(void *)&__p[16] = &v44[8 * v43];
            if (v39) {
              operator delete(v39);
            }
          }
          else
          {
            **(void **)&__p[8] = *v36;
            uint64_t v38 = v37 + 8;
          }
          *(void *)&__p[8] = v38;
        }
        uint64_t v35 = (void *)*v35;
      }
      while (v35);
      uint64_t v47 = *(unint64_t **)__p;
      unsigned int v48 = *(unint64_t **)&__p[8];
      while (1)
      {
        if (v47 == v48) {
          goto LABEL_79;
        }
        uint64_t v49 = std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::find<PHASETapType>((void *)v7 + 3, *v47);
        if (v49) {
          break;
        }
LABEL_71:
        ++v47;
      }
      int8x8_t v50 = *(int8x8_t *)((char *)v7 + 32);
      unint64_t v51 = v49[1];
      uint8x8_t v52 = (uint8x8_t)vcnt_s8(v50);
      v52.i16[0] = vaddlv_u8(v52);
      if (v52.u32[0] > 1uLL)
      {
        if (v51 >= *(void *)&v50) {
          v51 %= *(void *)&v50;
        }
      }
      else
      {
        v51 &= *(void *)&v50 - 1;
      }
      uint64_t v53 = *v49;
      float v54 = *(uint64_t **)(*v32 + 8 * v51);
      do
      {
        unsigned int v55 = v54;
        float v54 = (uint64_t *)*v54;
      }
      while (v54 != v49);
      if (v55 == (uint64_t *)((char *)v7 + 40)) {
        goto LABEL_60;
      }
      unint64_t v56 = v55[1];
      if (v52.u32[0] > 1uLL)
      {
        if (v56 >= *(void *)&v50) {
          v56 %= *(void *)&v50;
        }
      }
      else
      {
        v56 &= *(void *)&v50 - 1;
      }
      if (v56 != v51)
      {
LABEL_60:
        if (v53)
        {
          unint64_t v57 = *(void *)(v53 + 8);
          if (v52.u32[0] > 1uLL)
          {
            unint64_t v58 = *(void *)(v53 + 8);
            if (v57 >= *(void *)&v50) {
              unint64_t v58 = v57 % *(void *)&v50;
            }
          }
          else
          {
            unint64_t v58 = v57 & (*(void *)&v50 - 1);
          }
          if (v58 == v51) {
            goto LABEL_64;
          }
        }
        *(void *)(*v32 + 8 * v51) = 0;
        uint64_t v53 = *v49;
      }
      if (!v53)
      {
LABEL_70:
        *unsigned int v55 = v53;
        uint64_t *v49 = 0;
        --*((void *)v7 + 6);
        operator delete(v49);
        goto LABEL_71;
      }
      unint64_t v57 = *(void *)(v53 + 8);
LABEL_64:
      if (v52.u32[0] > 1uLL)
      {
        if (v57 >= *(void *)&v50) {
          v57 %= *(void *)&v50;
        }
      }
      else
      {
        v57 &= *(void *)&v50 - 1;
      }
      if (v57 != v51)
      {
        *(void *)(*v32 + 8 * v57) = v55;
        uint64_t v53 = *v49;
      }
      goto LABEL_70;
    }
LABEL_79:
    long long v64 = *(uint64_t **)(a3 + 16);
    if (v64)
    {
      float v65 = v33 + v34;
      do
      {
        uint64_t v66 = std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::find<PHASETapType>(v32, v64[2]);
        if (v66)
        {
          v66[6] = *((_DWORD *)v64 + 6);
          v66[7] = *((_DWORD *)v64 + 7);
          v66[8] = *((_DWORD *)v64 + 8);
        }
        else
        {
          uint64_t v69 = v64 + 2;
          unint64_t v67 = std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v32, (unint64_t *)v64 + 2, (uint64_t)&std::piecewise_construct, &v69);
          v67[6] = *((_DWORD *)v64 + 6);
          v67[7] = *((_DWORD *)v64 + 7);
          v67[8] = *((_DWORD *)v64 + 8);
          v67[9] = *((_DWORD *)v64 + 9);
          uint64_t v69 = v64 + 2;
          *((float *)std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v32, (unint64_t *)v64 + 2, (uint64_t)&std::piecewise_construct, &v69)+ 9) = v65;
        }
        long long v64 = (uint64_t *)*v64;
      }
      while (v64);
    }
    if (*(void *)__p)
    {
      *(void *)&__p[8] = *(void *)__p;
      operator delete(*(void **)__p);
    }
  }
  else
  {
    float32x2_t v59 = **(NSObject ***)(Phase::Logger::GetInstance(v6) + 1184);
    if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
    {
      uint64_t v60 = *((void *)v7 + 8);
      int32x2_t v61 = "ok";
      *(void *)&__p[4] = "RoomSimulationClusteringFunctions.cpp";
      uint64_t v62 = *(void *)(a3 + 40);
      if (v60) {
        uint64_t v63 = "ok";
      }
      else {
        uint64_t v63 = "null";
      }
      *(_DWORD *)long long __p = 136315906;
      *(_WORD *)&unsigned char __p[12] = 1024;
      if (!v62) {
        int32x2_t v61 = "null";
      }
      *(_DWORD *)&__p[14] = 824;
      *(_WORD *)&__p[18] = 2080;
      *(void *)&__p[20] = v63;
      __int16 v71 = 2080;
      unint64_t v72 = v61;
      _os_log_impl(&dword_221E5E000, v59, OS_LOG_TYPE_ERROR, "%25s:%-5d AggregateSharedHistogram: Empty shared histogram(s) provided (persistent: %s, new: %s)", __p, 0x26u);
    }
  }
}

void sub_222053B5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    float result = std::vector<unsigned long long>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      float result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_222053BE8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<Phase::SpatialModeler::RendererInfo>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<Phase::SpatialModeler::RendererInfo>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = a1[1];
    uint64_t v5 = v4 + 40 * a2;
    do
    {
      *(_OWORD *)uint64_t v4 = 0uLL;
      *(_OWORD *)(v4 + 16) = 0uLL;
      *(void *)(v4 + 32) = 0;
      *(unsigned char *)uint64_t v4 = 1;
      *(void *)(v4 + 8) = 0;
      *(void *)(v4 + 16) = 0;
      *(unsigned char *)(v4 + 24) = 0;
      v4 += 40;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_222053C78(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<Phase::SpatialModeler::RendererInfo>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667) {
    std::vector<Phase::SpatialModeler::RendererInfo>::__throw_length_error[abi:ne180100]();
  }
  float result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::SpatialModeler::RoomSimulationDebugger::DebugImageSource>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[40 * v4];
  return result;
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(float *a1, unint64_t a2, void *a3)
{
  unint64_t v5 = a2;
  unint64_t v7 = *((void *)a1 + 1);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  *uint64_t i = 0;
  i[1] = v5;
  i[2] = *a3;
  i[3] = 0;
  float v12 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v13 = a1[8];
  if (v7 && (float)(v13 * (float)v7) >= v12)
  {
    unint64_t v5 = v3;
    goto LABEL_64;
  }
  BOOL v14 = 1;
  if (v7 >= 3) {
    BOOL v14 = (v7 & (v7 - 1)) != 0;
  }
  unint64_t v15 = v14 | (2 * v7);
  unint64_t v16 = vcvtps_u32_f32(v12 / v13);
  if (v15 <= v16) {
    int8x8_t prime = (int8x8_t)v16;
  }
  else {
    int8x8_t prime = (int8x8_t)v15;
  }
  if (*(void *)&prime == 1)
  {
    int8x8_t prime = (int8x8_t)2;
  }
  else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
  {
    int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    unint64_t v7 = *((void *)a1 + 1);
  }
  if (*(void *)&prime <= v7)
  {
    if (*(void *)&prime >= v7) {
      goto LABEL_60;
    }
    unint64_t v24 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
    if (v7 < 3 || (uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
    {
      unint64_t v24 = std::__next_prime(v24);
    }
    else
    {
      uint64_t v26 = 1 << -(char)__clz(v24 - 1);
      if (v24 >= 2) {
        unint64_t v24 = v26;
      }
    }
    if (*(void *)&prime <= v24) {
      int8x8_t prime = (int8x8_t)v24;
    }
    if (*(void *)&prime >= v7)
    {
      unint64_t v7 = *((void *)a1 + 1);
      goto LABEL_60;
    }
    if (!*(void *)&prime)
    {
      float v33 = *(void **)a1;
      *(void *)a1 = 0;
      if (v33) {
        operator delete(v33);
      }
      unint64_t v7 = 0;
      *((void *)a1 + 1) = 0;
      goto LABEL_60;
    }
  }
  if (*(void *)&prime >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  float v18 = operator new(8 * *(void *)&prime);
  uint64_t v19 = *(void **)a1;
  *(void *)a1 = v18;
  if (v19) {
    operator delete(v19);
  }
  uint64_t v20 = 0;
  *((int8x8_t *)a1 + 1) = prime;
  do
    *(void *)(*(void *)a1 + 8 * v20++) = 0;
  while (*(void *)&prime != v20);
  uint64_t v21 = (void *)*((void *)a1 + 2);
  if (v21)
  {
    unint64_t v22 = v21[1];
    uint8x8_t v23 = (uint8x8_t)vcnt_s8(prime);
    v23.i16[0] = vaddlv_u8(v23);
    if (v23.u32[0] > 1uLL)
    {
      if (v22 >= *(void *)&prime) {
        v22 %= *(void *)&prime;
      }
    }
    else
    {
      v22 &= *(void *)&prime - 1;
    }
    *(void *)(*(void *)a1 + 8 * v22) = a1 + 4;
    int64x2_t v27 = (void *)*v21;
    if (*v21)
    {
      do
      {
        unint64_t v28 = v27[1];
        if (v23.u32[0] > 1uLL)
        {
          if (v28 >= *(void *)&prime) {
            v28 %= *(void *)&prime;
          }
        }
        else
        {
          v28 &= *(void *)&prime - 1;
        }
        if (v28 != v22)
        {
          if (!*(void *)(*(void *)a1 + 8 * v28))
          {
            *(void *)(*(void *)a1 + 8 * v28) = v21;
            goto LABEL_56;
          }
          *uint64_t v21 = *v27;
          *int64x2_t v27 = **(void **)(*(void *)a1 + 8 * v28);
          **(void **)(*(void *)a1 + 8 * v28) = v27;
          int64x2_t v27 = v21;
        }
        unint64_t v28 = v22;
LABEL_56:
        uint64_t v21 = v27;
        int64x2_t v27 = (void *)*v27;
        unint64_t v22 = v28;
      }
      while (v27);
    }
  }
  unint64_t v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v5) {
      v5 %= v7;
    }
  }
  else
  {
    v5 &= v7 - 1;
  }
LABEL_64:
  int32x4_t v29 = *(void **)a1;
  int32x2_t v30 = *(void **)(*(void *)a1 + 8 * v5);
  if (v30)
  {
    *uint64_t i = *v30;
LABEL_72:
    *int32x2_t v30 = i;
    goto LABEL_73;
  }
  *uint64_t i = *((void *)a1 + 2);
  *((void *)a1 + 2) = i;
  v29[v5] = a1 + 4;
  if (*i)
  {
    unint64_t v31 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v31 >= v7) {
        v31 %= v7;
      }
    }
    else
    {
      v31 &= v7 - 1;
    }
    int32x2_t v30 = (void *)(*(void *)a1 + 8 * v31);
    goto LABEL_72;
  }
LABEL_73:
  ++*((void *)a1 + 3);
  return i;
}

void sub_2220540C0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::find<unsigned long long>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (!a2) {
    return 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a3;
    if (a3 >= a2) {
      unint64_t v4 = a3 % a2;
    }
  }
  else
  {
    unint64_t v4 = (a2 - 1) & a3;
  }
  unint64_t v5 = *(void **)(a1 + 8 * v4);
  if (!v5) {
    return 0;
  }
  float result = (void *)*v5;
  if (*v5)
  {
    do
    {
      unint64_t v7 = result[1];
      if (v7 == a3)
      {
        if (result[2] == a3) {
          return result;
        }
      }
      else
      {
        if (v3.u32[0] > 1uLL)
        {
          if (v7 >= a2) {
            v7 %= a2;
          }
        }
        else
        {
          v7 &= a2 - 1;
        }
        if (v7 != v4) {
          return 0;
        }
      }
      float result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(float *a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v5 = a2;
  unint64_t v7 = *((void *)a1 + 1);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x28uLL);
  *uint64_t i = 0;
  i[1] = v5;
  uint64_t v12 = *a3;
  i[3] = 0;
  i[4] = 0;
  i[2] = v12;
  float v13 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v14 = a1[8];
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    unint64_t v5 = v3;
    goto LABEL_64;
  }
  BOOL v15 = 1;
  if (v7 >= 3) {
    BOOL v15 = (v7 & (v7 - 1)) != 0;
  }
  unint64_t v16 = v15 | (2 * v7);
  unint64_t v17 = vcvtps_u32_f32(v13 / v14);
  if (v16 <= v17) {
    int8x8_t prime = (int8x8_t)v17;
  }
  else {
    int8x8_t prime = (int8x8_t)v16;
  }
  if (*(void *)&prime == 1)
  {
    int8x8_t prime = (int8x8_t)2;
  }
  else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
  {
    int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    unint64_t v7 = *((void *)a1 + 1);
  }
  if (*(void *)&prime <= v7)
  {
    if (*(void *)&prime >= v7) {
      goto LABEL_60;
    }
    unint64_t v25 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
    if (v7 < 3 || (uint8x8_t v26 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
    {
      unint64_t v25 = std::__next_prime(v25);
    }
    else
    {
      uint64_t v27 = 1 << -(char)__clz(v25 - 1);
      if (v25 >= 2) {
        unint64_t v25 = v27;
      }
    }
    if (*(void *)&prime <= v25) {
      int8x8_t prime = (int8x8_t)v25;
    }
    if (*(void *)&prime >= v7)
    {
      unint64_t v7 = *((void *)a1 + 1);
      goto LABEL_60;
    }
    if (!*(void *)&prime)
    {
      float v34 = *(void **)a1;
      *(void *)a1 = 0;
      if (v34) {
        operator delete(v34);
      }
      unint64_t v7 = 0;
      *((void *)a1 + 1) = 0;
      goto LABEL_60;
    }
  }
  if (*(void *)&prime >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v19 = operator new(8 * *(void *)&prime);
  uint64_t v20 = *(void **)a1;
  *(void *)a1 = v19;
  if (v20) {
    operator delete(v20);
  }
  uint64_t v21 = 0;
  *((int8x8_t *)a1 + 1) = prime;
  do
    *(void *)(*(void *)a1 + 8 * v21++) = 0;
  while (*(void *)&prime != v21);
  unint64_t v22 = (void *)*((void *)a1 + 2);
  if (v22)
  {
    unint64_t v23 = v22[1];
    uint8x8_t v24 = (uint8x8_t)vcnt_s8(prime);
    v24.i16[0] = vaddlv_u8(v24);
    if (v24.u32[0] > 1uLL)
    {
      if (v23 >= *(void *)&prime) {
        v23 %= *(void *)&prime;
      }
    }
    else
    {
      v23 &= *(void *)&prime - 1;
    }
    *(void *)(*(void *)a1 + 8 * v23) = a1 + 4;
    unint64_t v28 = (void *)*v22;
    if (*v22)
    {
      do
      {
        unint64_t v29 = v28[1];
        if (v24.u32[0] > 1uLL)
        {
          if (v29 >= *(void *)&prime) {
            v29 %= *(void *)&prime;
          }
        }
        else
        {
          v29 &= *(void *)&prime - 1;
        }
        if (v29 != v23)
        {
          if (!*(void *)(*(void *)a1 + 8 * v29))
          {
            *(void *)(*(void *)a1 + 8 * v29) = v22;
            goto LABEL_56;
          }
          *unint64_t v22 = *v28;
          void *v28 = **(void **)(*(void *)a1 + 8 * v29);
          **(void **)(*(void *)a1 + 8 * v29) = v28;
          unint64_t v28 = v22;
        }
        unint64_t v29 = v23;
LABEL_56:
        unint64_t v22 = v28;
        unint64_t v28 = (void *)*v28;
        unint64_t v23 = v29;
      }
      while (v28);
    }
  }
  unint64_t v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v5) {
      v5 %= v7;
    }
  }
  else
  {
    v5 &= v7 - 1;
  }
LABEL_64:
  int32x2_t v30 = *(void **)a1;
  unint64_t v31 = *(void **)(*(void *)a1 + 8 * v5);
  if (v31)
  {
    *uint64_t i = *v31;
LABEL_72:
    *unint64_t v31 = i;
    goto LABEL_73;
  }
  *uint64_t i = *((void *)a1 + 2);
  *((void *)a1 + 2) = i;
  v30[v5] = a1 + 4;
  if (*i)
  {
    unint64_t v32 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7) {
        v32 %= v7;
      }
    }
    else
    {
      v32 &= v7 - 1;
    }
    unint64_t v31 = (void *)(*(void *)a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  ++*((void *)a1 + 3);
  return i;
}

void sub_222054558(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::erase(void *a1, uint64_t *__p)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  uint64_t v4 = *__p;
  unint64_t v3 = __p[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v2);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v3 >= *(void *)&v2) {
      v3 %= *(void *)&v2;
    }
  }
  else
  {
    v3 &= *(void *)&v2 - 1;
  }
  uint64_t v6 = *(uint64_t **)(*a1 + 8 * v3);
  do
  {
    unint64_t v7 = v6;
    uint64_t v6 = (uint64_t *)*v6;
  }
  while (v6 != __p);
  if (v7 != a1 + 2)
  {
    unint64_t v8 = v7[1];
    if (v5.u32[0] > 1uLL)
    {
      if (v8 >= *(void *)&v2) {
        v8 %= *(void *)&v2;
      }
    }
    else
    {
      v8 &= *(void *)&v2 - 1;
    }
    uint64_t v9 = *__p;
    if (v8 == v3)
    {
LABEL_20:
      if (!v9) {
        goto LABEL_27;
      }
      goto LABEL_21;
    }
  }
  if (!v4) {
    goto LABEL_19;
  }
  unint64_t v10 = *(void *)(v4 + 8);
  if (v5.u32[0] > 1uLL)
  {
    if (v10 >= *(void *)&v2) {
      v10 %= *(void *)&v2;
    }
  }
  else
  {
    v10 &= *(void *)&v2 - 1;
  }
  uint64_t v9 = *__p;
  if (v10 != v3)
  {
LABEL_19:
    *(void *)(*a1 + 8 * v3) = 0;
    uint64_t v9 = *__p;
    goto LABEL_20;
  }
LABEL_21:
  unint64_t v11 = *(void *)(v9 + 8);
  if (v5.u32[0] > 1uLL)
  {
    if (v11 >= *(void *)&v2) {
      v11 %= *(void *)&v2;
    }
  }
  else
  {
    v11 &= *(void *)&v2 - 1;
  }
  if (v11 != v3)
  {
    *(void *)(*a1 + 8 * v11) = v7;
    uint64_t v9 = *__p;
  }
LABEL_27:
  uint64_t *v7 = v9;
  *long long __p = 0;
  --a1[3];
  operator delete(__p);
  return v4;
}

void *Phase::SpatialModeler::RoomSimulationDebugger::BeginTrackingIntersections(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = &v6;
  uint64_t v4 = std::__tree<std::__value_type<Phase::Handle64,Phase::SpatialModeler::RoomSimulationDebugger::EntityDebugInfo>,std::__map_value_compare<Phase::Handle64,std::__value_type<Phase::Handle64,Phase::SpatialModeler::RoomSimulationDebugger::EntityDebugInfo>,std::less<Phase::Handle64>,true>,std::allocator<std::__value_type<Phase::Handle64,Phase::SpatialModeler::RoomSimulationDebugger::EntityDebugInfo>>>::__emplace_unique_key_args<Phase::Handle64,std::piecewise_construct_t const&,std::tuple<Phase::Handle64 const&>,std::tuple<>>((uint64_t **)(a1 + 64), &v6, (uint64_t)&std::piecewise_construct, &v7);
  return std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>::operator=(v4 + 7, a3);
}

void *std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>::operator=(void *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>::~__value_func[abi:ne180100](v4);
  return a1;
}

void *Phase::SpatialModeler::RoomSimulationDebugger::EndTrackingIntersections(Phase::SpatialModeler::RoomSimulationDebugger *this, Handle64 a2)
{
  uint64_t v4 = (void *)*((void *)this + 9);
  float result = (void *)((char *)this + 72);
  unint64_t v3 = v4;
  if (v4)
  {
    uint64_t v5 = (uint64_t)result;
    do
    {
      unint64_t v6 = v3[4];
      BOOL v7 = v6 >= a2.mData;
      if (v6 >= a2.mData) {
        unint64_t v8 = v3;
      }
      else {
        unint64_t v8 = v3 + 1;
      }
      if (v7) {
        uint64_t v5 = (uint64_t)v3;
      }
      unint64_t v3 = (void *)*v8;
    }
    while (*v8);
    if ((void *)v5 != result && *(void *)(v5 + 32) <= a2.mData) {
      return std::__function::__value_func<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>::operator=[abi:ne180100]((void *)(v5 + 56));
    }
  }
  return result;
}

void *Phase::SpatialModeler::RoomSimulationDebugger::BeginTrackingEnergyHistogram(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6 = a2;
  BOOL v7 = &v6;
  uint64_t v4 = std::__tree<std::__value_type<Phase::Handle64,Phase::SpatialModeler::RoomSimulationDebugger::EntityDebugInfo>,std::__map_value_compare<Phase::Handle64,std::__value_type<Phase::Handle64,Phase::SpatialModeler::RoomSimulationDebugger::EntityDebugInfo>,std::less<Phase::Handle64>,true>,std::allocator<std::__value_type<Phase::Handle64,Phase::SpatialModeler::RoomSimulationDebugger::EntityDebugInfo>>>::__emplace_unique_key_args<Phase::Handle64,std::piecewise_construct_t const&,std::tuple<Phase::Handle64 const&>,std::tuple<>>((uint64_t **)(a1 + 64), &v6, (uint64_t)&std::piecewise_construct, &v7);
  return std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>::operator=(v4 + 11, a3);
}

void *Phase::SpatialModeler::RoomSimulationDebugger::EndTrackingEnergyHistogram(Phase::SpatialModeler::RoomSimulationDebugger *this, Handle64 a2)
{
  uint64_t v4 = (void *)*((void *)this + 9);
  float result = (void *)((char *)this + 72);
  unint64_t v3 = v4;
  if (v4)
  {
    uint64_t v5 = (uint64_t)result;
    do
    {
      unint64_t v6 = v3[4];
      BOOL v7 = v6 >= a2.mData;
      if (v6 >= a2.mData) {
        unint64_t v8 = v3;
      }
      else {
        unint64_t v8 = v3 + 1;
      }
      if (v7) {
        uint64_t v5 = (uint64_t)v3;
      }
      unint64_t v3 = (void *)*v8;
    }
    while (*v8);
    if ((void *)v5 != result && *(void *)(v5 + 32) <= a2.mData) {
      return std::__function::__value_func<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>::operator=[abi:ne180100]((void *)(v5 + 88));
    }
  }
  return result;
}

void *Phase::SpatialModeler::RoomSimulationDebugger::BeginTrackingImageSourceLocations(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6 = a2;
  BOOL v7 = &v6;
  uint64_t v4 = std::__tree<std::__value_type<Phase::Handle64,Phase::SpatialModeler::RoomSimulationDebugger::EntityDebugInfo>,std::__map_value_compare<Phase::Handle64,std::__value_type<Phase::Handle64,Phase::SpatialModeler::RoomSimulationDebugger::EntityDebugInfo>,std::less<Phase::Handle64>,true>,std::allocator<std::__value_type<Phase::Handle64,Phase::SpatialModeler::RoomSimulationDebugger::EntityDebugInfo>>>::__emplace_unique_key_args<Phase::Handle64,std::piecewise_construct_t const&,std::tuple<Phase::Handle64 const&>,std::tuple<>>((uint64_t **)(a1 + 64), &v6, (uint64_t)&std::piecewise_construct, &v7);
  return std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>::operator=(v4 + 15, a3);
}

void *Phase::SpatialModeler::RoomSimulationDebugger::EndTrackingImageSourceLocations(Phase::SpatialModeler::RoomSimulationDebugger *this, Handle64 a2)
{
  uint64_t v4 = (void *)*((void *)this + 9);
  float result = (void *)((char *)this + 72);
  unint64_t v3 = v4;
  if (v4)
  {
    uint64_t v5 = (uint64_t)result;
    do
    {
      unint64_t v6 = v3[4];
      BOOL v7 = v6 >= a2.mData;
      if (v6 >= a2.mData) {
        unint64_t v8 = v3;
      }
      else {
        unint64_t v8 = v3 + 1;
      }
      if (v7) {
        uint64_t v5 = (uint64_t)v3;
      }
      unint64_t v3 = (void *)*v8;
    }
    while (*v8);
    if ((void *)v5 != result && *(void *)(v5 + 32) <= a2.mData) {
      return std::__function::__value_func<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>::operator=[abi:ne180100]((void *)(v5 + 120));
    }
  }
  return result;
}

void *Phase::SpatialModeler::RoomSimulationDebugger::BeginTrackingListenerEarlyResponseMetadata(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6 = a2;
  BOOL v7 = &v6;
  uint64_t v4 = std::__tree<std::__value_type<Phase::Handle64,Phase::SpatialModeler::RoomSimulationDebugger::EntityDebugInfo>,std::__map_value_compare<Phase::Handle64,std::__value_type<Phase::Handle64,Phase::SpatialModeler::RoomSimulationDebugger::EntityDebugInfo>,std::less<Phase::Handle64>,true>,std::allocator<std::__value_type<Phase::Handle64,Phase::SpatialModeler::RoomSimulationDebugger::EntityDebugInfo>>>::__emplace_unique_key_args<Phase::Handle64,std::piecewise_construct_t const&,std::tuple<Phase::Handle64 const&>,std::tuple<>>((uint64_t **)(a1 + 64), &v6, (uint64_t)&std::piecewise_construct, &v7);
  return std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>::operator=(v4 + 19, a3);
}

void *Phase::SpatialModeler::RoomSimulationDebugger::EndTrackingListenerEarlyResponseMetadata(Phase::SpatialModeler::RoomSimulationDebugger *this, Handle64 a2)
{
  uint64_t v4 = (void *)*((void *)this + 9);
  float result = (void *)((char *)this + 72);
  unint64_t v3 = v4;
  if (v4)
  {
    uint64_t v5 = (uint64_t)result;
    do
    {
      unint64_t v6 = v3[4];
      BOOL v7 = v6 >= a2.mData;
      if (v6 >= a2.mData) {
        unint64_t v8 = v3;
      }
      else {
        unint64_t v8 = v3 + 1;
      }
      if (v7) {
        uint64_t v5 = (uint64_t)v3;
      }
      unint64_t v3 = (void *)*v8;
    }
    while (*v8);
    if ((void *)v5 != result && *(void *)(v5 + 32) <= a2.mData) {
      return std::__function::__value_func<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>::operator=[abi:ne180100]((void *)(v5 + 152));
    }
  }
  return result;
}

void *Phase::SpatialModeler::RoomSimulationDebugger::BeginTrackingListenerLateReverbMetadata(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6 = a2;
  BOOL v7 = &v6;
  uint64_t v4 = std::__tree<std::__value_type<Phase::Handle64,Phase::SpatialModeler::RoomSimulationDebugger::EntityDebugInfo>,std::__map_value_compare<Phase::Handle64,std::__value_type<Phase::Handle64,Phase::SpatialModeler::RoomSimulationDebugger::EntityDebugInfo>,std::less<Phase::Handle64>,true>,std::allocator<std::__value_type<Phase::Handle64,Phase::SpatialModeler::RoomSimulationDebugger::EntityDebugInfo>>>::__emplace_unique_key_args<Phase::Handle64,std::piecewise_construct_t const&,std::tuple<Phase::Handle64 const&>,std::tuple<>>((uint64_t **)(a1 + 64), &v6, (uint64_t)&std::piecewise_construct, &v7);
  return std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>::operator=(v4 + 23, a3);
}

void *Phase::SpatialModeler::RoomSimulationDebugger::EndTrackingListenerLateReverbMetadata(Phase::SpatialModeler::RoomSimulationDebugger *this, Handle64 a2)
{
  uint64_t v4 = (void *)*((void *)this + 9);
  float result = (void *)((char *)this + 72);
  unint64_t v3 = v4;
  if (v4)
  {
    uint64_t v5 = (uint64_t)result;
    do
    {
      unint64_t v6 = v3[4];
      BOOL v7 = v6 >= a2.mData;
      if (v6 >= a2.mData) {
        unint64_t v8 = v3;
      }
      else {
        unint64_t v8 = v3 + 1;
      }
      if (v7) {
        uint64_t v5 = (uint64_t)v3;
      }
      unint64_t v3 = (void *)*v8;
    }
    while (*v8);
    if ((void *)v5 != result && *(void *)(v5 + 32) <= a2.mData) {
      return std::__function::__value_func<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>::operator=[abi:ne180100]((void *)(v5 + 184));
    }
  }
  return result;
}

void *Phase::SpatialModeler::RoomSimulationDebugger::BeginTrackingRoomData(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6 = a2;
  BOOL v7 = &v6;
  uint64_t v4 = std::__tree<std::__value_type<Phase::Handle64,Phase::SpatialModeler::RoomSimulationDebugger::EntityDebugInfo>,std::__map_value_compare<Phase::Handle64,std::__value_type<Phase::Handle64,Phase::SpatialModeler::RoomSimulationDebugger::EntityDebugInfo>,std::less<Phase::Handle64>,true>,std::allocator<std::__value_type<Phase::Handle64,Phase::SpatialModeler::RoomSimulationDebugger::EntityDebugInfo>>>::__emplace_unique_key_args<Phase::Handle64,std::piecewise_construct_t const&,std::tuple<Phase::Handle64 const&>,std::tuple<>>((uint64_t **)(a1 + 64), &v6, (uint64_t)&std::piecewise_construct, &v7);
  return std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>::operator=(v4 + 27, a3);
}

void *Phase::SpatialModeler::RoomSimulationDebugger::EndTrackingRoomData(Phase::SpatialModeler::RoomSimulationDebugger *this, Handle64 a2)
{
  uint64_t v4 = (void *)*((void *)this + 9);
  float result = (void *)((char *)this + 72);
  unint64_t v3 = v4;
  if (v4)
  {
    uint64_t v5 = (uint64_t)result;
    do
    {
      unint64_t v6 = v3[4];
      BOOL v7 = v6 >= a2.mData;
      if (v6 >= a2.mData) {
        unint64_t v8 = v3;
      }
      else {
        unint64_t v8 = v3 + 1;
      }
      if (v7) {
        uint64_t v5 = (uint64_t)v3;
      }
      unint64_t v3 = (void *)*v8;
    }
    while (*v8);
    if ((void *)v5 != result && *(void *)(v5 + 32) <= a2.mData) {
      return std::__function::__value_func<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>::operator=[abi:ne180100]((void *)(v5 + 216));
    }
  }
  return result;
}

void Phase::SpatialModeler::RoomSimulationDebugger::ExecuteRoomDataCallbacks(int32x2_t *this, Phase::SpatialModeler::RayTracerState *a2, Phase::Geometry::System *a3, Phase::Geometry::SystemState *a4)
{
  if (*((void *)a2 + 345))
  {
    uint64_t v5 = Phase::Geometry::SystemDebugger::GetFromSystem((uint64_t)a2);
    if (v5)
    {
      unint64_t v8 = *(void **)(v5 + 112);
      uint64_t v6 = v5 + 112;
      BOOL v7 = v8;
      if (v8)
      {
        uint64_t v9 = this + 2472;
        int32x2_t v10 = this[2822];
        unint64_t v11 = (void *)v6;
        do
        {
          unint64_t v12 = v7[4];
          BOOL v13 = v12 >= *(void *)&v10;
          if (v12 >= *(void *)&v10) {
            float v14 = v7;
          }
          else {
            float v14 = v7 + 1;
          }
          if (v13) {
            unint64_t v11 = v7;
          }
          BOOL v7 = (void *)*v14;
        }
        while (*v14);
        if (v11 != (void *)v6 && v11[4] <= *(void *)&v10 && v11[30])
        {
          memset(&v35[9], 0, 24);
          memset(&v35[13], 0, 24);
          long long v36 = 0u;
          long long v37 = 0u;
          long long v38 = 0u;
          long long v39 = 0u;
          long long v40 = 0u;
          long long v41 = 0u;
          long long v42 = 0u;
          long long v43 = 0u;
          long long v44 = 0u;
          long long v45 = 0u;
          long long v46 = 0u;
          long long v47 = 0u;
          memset(v51, 0, sizeof(v51));
          memset(v50, 0, sizeof(v50));
          v35[0] = 0;
          v35[1] = 0;
          memset(&v35[4], 0, 24);
          v35[2] = v10;
          __int32 v48 = this[2439].i32[0];
          int32x2_t v49 = vrev64_s32(this[2438]);
          unint64_t v15 = this[2455].u32[1];
          int v34 = 0;
          std::vector<float>::assign((char **)v50, v15, &v34);
          uint64_t v16 = this[2455].u32[1];
          if (v16)
          {
            unint64_t v17 = this + 2440;
            float v18 = *(__int32 **)&v50[0];
            do
            {
              __int32 v19 = v17->i32[0];
              unint64_t v17 = (int32x2_t *)((char *)v17 + 4);
              *v18++ = v19;
              --v16;
            }
            while (v16);
          }
          unint64_t v20 = this[2471].u32[1];
          int v34 = 0;
          std::vector<float>::assign((char **)&v50[1] + 1, v20, &v34);
          uint64_t v21 = this[2471].u32[1];
          if (v21)
          {
            unint64_t v22 = this + 2456;
            unint64_t v23 = (__int32 *)*((void *)&v50[1] + 1);
            do
            {
              __int32 v24 = v22->i32[0];
              unint64_t v22 = (int32x2_t *)((char *)v22 + 4);
              *v23++ = v24;
              --v21;
            }
            while (v21);
          }
          unint64_t v25 = this[2487].u32[1];
          int v34 = 0;
          std::vector<float>::assign((char **)v51, v25, &v34);
          uint64_t v26 = this[2455].u32[1];
          if (v26)
          {
            uint64_t v27 = *(__int32 **)&v51[0];
            do
            {
              __int32 v28 = v9->i32[0];
              uint64_t v9 = (int32x2_t *)((char *)v9 + 4);
              *v27++ = v28;
              --v26;
            }
            while (v26);
          }
          unint64_t v29 = this[41].u32[1];
          int v34 = 0;
          std::vector<float>::assign((char **)&v51[1] + 1, v29, &v34);
          uint64_t v30 = this[41].u32[1];
          if (v30)
          {
            unint64_t v31 = this + 26;
            unint64_t v32 = (__int32 *)*((void *)&v51[1] + 1);
            do
            {
              __int32 v33 = v31->i32[0];
              unint64_t v31 = (int32x2_t *)((char *)v31 + 4);
              *v32++ = v33;
              --v30;
            }
            while (v30);
          }
          std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>::operator()((uint64_t)(v11 + 27), (uint64_t)v35);
          Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView::~RoomSimulationDebugView((Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)v35);
        }
      }
    }
  }
}

void sub_222054D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView::~RoomSimulationDebugView((Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)va);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<Phase::Handle64,Phase::SpatialModeler::RoomSimulationDebugger::EntityDebugInfo>,std::__map_value_compare<Phase::Handle64,std::__value_type<Phase::Handle64,Phase::SpatialModeler::RoomSimulationDebugger::EntityDebugInfo>,std::less<Phase::Handle64>,true>,std::allocator<std::__value_type<Phase::Handle64,Phase::SpatialModeler::RoomSimulationDebugger::EntityDebugInfo>>>::__emplace_unique_key_args<Phase::Handle64,std::piecewise_construct_t const&,std::tuple<Phase::Handle64 const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, void **a4)
{
  BOOL v7 = a1 + 1;
  uint64_t v6 = a1[1];
  unint64_t v8 = a1 + 1;
  uint64_t v9 = a1 + 1;
  if (v6)
  {
    unint64_t v10 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unint64_t v11 = v6[4];
        if (v10 >= v11) {
          break;
        }
        uint64_t v6 = *v9;
        unint64_t v8 = v9;
        if (!*v9) {
          goto LABEL_9;
        }
      }
      if (v11 >= v10) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        unint64_t v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    unint64_t v12 = operator new(0xF8uLL);
    v14[1] = v7;
    v12[4] = **a4;
    *((_OWORD *)v12 + 13) = 0u;
    *((_OWORD *)v12 + 14) = 0u;
    *((_OWORD *)v12 + 11) = 0u;
    *((_OWORD *)v12 + 12) = 0u;
    *((_OWORD *)v12 + 9) = 0u;
    *((_OWORD *)v12 + 10) = 0u;
    *((_OWORD *)v12 + 7) = 0u;
    *((_OWORD *)v12 + 8) = 0u;
    *((_OWORD *)v12 + 5) = 0u;
    *((_OWORD *)v12 + 6) = 0u;
    *((_OWORD *)v12 + 3) = 0u;
    *((_OWORD *)v12 + 4) = 0u;
    v12[5] = -1;
    *((_DWORD *)v12 + 12) = -1;
    *((unsigned char *)v12 + 52) = 1;
    v12[30] = 0;
    char v15 = 1;
    std::__tree<Phase::SpatialCategory>::__insert_node_at(a1, (uint64_t)v9, v8, v12);
    v14[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<Phase::Handle64,Phase::SpatialModeler::RoomSimulationDebugger::EntityDebugInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<Phase::Handle64,Phase::SpatialModeler::RoomSimulationDebugger::EntityDebugInfo>,void *>>>>::reset[abi:ne180100]((uint64_t)v14, 0);
    return (uint64_t **)v12;
  }
  return v9;
}

void std::unique_ptr<std::__tree_node<std::__value_type<Phase::Handle64,Phase::SpatialModeler::RoomSimulationDebugger::EntityDebugInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<Phase::Handle64,Phase::SpatialModeler::RoomSimulationDebugger::EntityDebugInfo>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  int8x8_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<Phase::Handle64 const,Phase::SpatialModeler::RoomSimulationDebugger::EntityDebugInfo>,0>(v2 + 4);
    }
    operator delete(v2);
  }
}

void *std::__function::__value_func<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    unint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        float result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        float result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      float result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_222055118(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__value_func<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>::operator=[abi:ne180100](void *a1)
{
  int8x8_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

const char *Phase::SpatialModeler::RoomSimulationErrorCategory::name(Phase::SpatialModeler::RoomSimulationErrorCategory *this)
{
  return "Room Simulation";
}

void *Phase::SpatialModeler::RoomSimulationErrorCategory::message@<X0>(int a1@<W1>, void *a2@<X8>)
{
  if ((a1 - 1) > 8) {
    unint64_t v3 = "(unrecognized error)";
  }
  else {
    unint64_t v3 = off_2645F7A28[a1 - 1];
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, v3);
}

void Phase::SpatialModeler::RoomSimulationErrorCategory::~RoomSimulationErrorCategory(std::error_category *this)
{
  std::error_category::~error_category(this);

  JUMPOUT(0x223C938A0);
}

uint64_t Phase::SpatialModeler::RoomSimulationImpl::CheckClusterQueryInput@<X0>(uint64_t result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = a2[11];
  if (!v3 || *(_DWORD *)v3 != 3)
  {
    uint64_t v10 = 3;
LABEL_16:
    *(void *)a3 = v10;
    *(void *)(a3 + 8) = result + 72;
    int v9 = 2;
    goto LABEL_17;
  }
  uint64_t v4 = (_DWORD *)a2[12];
  if (!v4 || *v4 != 2)
  {
    uint64_t v10 = 4;
    goto LABEL_16;
  }
  uint64_t v5 = a2[8];
  if (!v5)
  {
    uint64_t v10 = 5;
    goto LABEL_16;
  }
  uint64_t v6 = *(void *)(v3 + 152);
  if (*(_DWORD *)(v5 + 136) <= v6
    || (uint64_t v7 = *(void *)(v5 + 120), *(_DWORD *)(v7 + 24 * v6 + 20) != HIDWORD(v6))
    || (unint64_t v8 = *(_DWORD **)(v7 + 24 * *(void *)(v3 + 152))) == 0
    || *v8 != 2)
  {
    uint64_t v10 = 7;
    goto LABEL_16;
  }
  if (!*(void *)(v3 + 144))
  {
    uint64_t v10 = 6;
    goto LABEL_16;
  }
  int v9 = 1;
LABEL_17:
  *(_DWORD *)(a3 + 24) = v9;
  return result;
}

uint64_t Phase::SpatialModeler::RoomSimulationImpl::CheckSpatialQueryInput@<X0>(uint64_t result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = a2[11];
  if (!v3 || *(_DWORD *)v3 != 2)
  {
    uint64_t v10 = 3;
LABEL_15:
    *(void *)a3 = v10;
    *(void *)(a3 + 8) = result + 72;
    int v9 = 2;
    goto LABEL_16;
  }
  uint64_t v4 = (_DWORD *)a2[12];
  if (!v4 || *v4 != 3)
  {
    uint64_t v10 = 4;
    goto LABEL_15;
  }
  uint64_t v5 = a2[8];
  if (!v5)
  {
    uint64_t v10 = 5;
    goto LABEL_15;
  }
  uint64_t v6 = *(void *)(v3 + 552);
  if (*(_DWORD *)(v5 + 136) <= v6
    || (uint64_t v7 = *(void *)(v5 + 120), *(_DWORD *)(v7 + 24 * v6 + 20) != HIDWORD(v6))
    || (unint64_t v8 = *(_DWORD **)(v7 + 24 * v6)) == 0
    || *v8 != 2)
  {
    uint64_t v10 = 7;
    goto LABEL_15;
  }
  int v9 = 1;
LABEL_16:
  *(_DWORD *)(a3 + 24) = v9;
  return result;
}

void Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryCleanupCommon(Phase::SpatialModeler::RoomSimulationImpl *this, Phase::SpatialModeler::RoomSimulation *a2, Phase::SpatialModeler::Query *a3, Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState *a4)
{
  if (*(unsigned char *)(*((void *)a2 + 11) + 48)) {
    uint64_t v4 = (Phase::SpatialModeler::RoomSimulationImpl *)((char *)this + 26720);
  }
  else {
    uint64_t v4 = (Phase::SpatialModeler::RoomSimulationImpl *)((char *)this + 1424);
  }
  uint64_t v5 = (void *)*((void *)a3 + 16514);
  uint64_t v6 = (char *)a3 + 132120;
  if (v5 != (void *)((char *)a3 + 132120))
  {
    do
    {
      if (v5[7]) {
        Phase::SpatialModeler::RayTracerState::FreeDirectivityHistogram(v4, v5 + 7);
      }
      uint64_t v7 = (void *)v5[1];
      if (v7)
      {
        do
        {
          unint64_t v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          unint64_t v8 = (void *)v5[2];
          BOOL v9 = *v8 == (void)v5;
          uint64_t v5 = v8;
        }
        while (!v9);
      }
      uint64_t v5 = v8;
    }
    while (v8 != (void *)v6);
  }
}

void Phase::SpatialModeler::RoomSimulationImpl::ParseOptionalProperties(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, float *a5@<X4>, float *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  uint64_t v8 = *(void *)(a3 + 144);
  if (v8)
  {
    uint64_t v10 = *(void *)(a3 + 104);
    uint64_t v11 = v10 + 304 * v8;
    uint64_t v12 = *a4;
    unsigned int v13 = *(_DWORD *)(a2 + 136);
    uint64_t v14 = 6;
    while (2)
    {
      uint64_t v15 = *(void *)(v10 + 144);
      if (v13 <= v15
        || (uint64_t v16 = *(void *)(a2 + 120), *(_DWORD *)(v16 + 24 * v15 + 20) != HIDWORD(v15))
        || (uint64_t v17 = *(void *)(v16 + 24 * *(void *)(v10 + 144))) == 0
        || *(_DWORD *)v17 != 3
        || (float v18 = *(uint64_t **)(v17 + 120), v18 != *(uint64_t **)(v17 + 128))
        && ((uint64_t v19 = *v18, *(_DWORD *)(a2 + 112) <= *v18)
         || (unsigned int v20 = *v18, v21 = *(void *)(a2 + 96), *(_DWORD *)(v21 + 24 * v19 + 20) != HIDWORD(v19))
         || !*(void *)(v21 + 24 * v20)))
      {
LABEL_27:
        *(void *)a7 = v14;
        *(void *)(a7 + 8) = a1 + 72;
        int v30 = 2;
        goto LABEL_28;
      }
      uint64_t v22 = 0;
      char v23 = 0;
      uint64_t v24 = v12;
      do
      {
        unint64_t v25 = (double *)(v10 + v22);
        int v26 = *(_DWORD *)(v10 + v22 + 160);
        switch(v26)
        {
          case 7:
            float v28 = v25[21];
            *a6 = v28;
            break;
          case 6:
            float v29 = *(double *)(v10 + v22 + 168);
            *a5 = v29;
            break;
          case 2:
            uint64_t v12 = *(void *)(v10 + v22 + 168);
            if (v23)
            {
              BOOL v27 = v12 == v24;
              uint64_t v12 = v24;
              if (!v27)
              {
                unint64_t v31 = **(NSObject ***)(Phase::Logger::GetInstance((Phase::Logger *)v25) + 1184);
                if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
                {
                  int v33 = 136315394;
                  int v34 = "RoomSimulationImpl.cpp";
                  __int16 v35 = 1024;
                  int v36 = 161;
                  _os_log_impl(&dword_221E5E000, v31, OS_LOG_TYPE_ERROR, "%25s:%-5d Sources in a cluster query have different listener directivities.\n", (uint8_t *)&v33, 0x12u);
                }
                uint64_t v14 = 8;
                goto LABEL_27;
              }
            }
            *a4 = v12;
            char v23 = 1;
            uint64_t v24 = v12;
            break;
        }
        v22 += 16;
      }
      while (v22 != 128);
      v10 += 304;
      if (v10 != v11) {
        continue;
      }
      break;
    }
  }
  int v30 = 1;
LABEL_28:
  *(_DWORD *)(a7 + 24) = v30;
}

uint64_t Phase::SpatialModeler::RoomSimulationImpl::RoomSimulationBeginInitCommon@<X0>(Phase::SpatialModeler::RoomSimulationImpl *this@<X0>, Phase::SpatialModeler::RoomSimulation *a2@<X1>, Phase::SpatialModeler::Query *a3@<X2>, uint64_t a4@<X8>)
{
  Phase::SpatialModeler::RoomSimulationImpl::CheckClusterQueryInput((uint64_t)this, a2, (uint64_t)v20);
  if (v20[6] == 2)
  {
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::__move_constructor(a4, (uint64_t)v20);
  }
  else
  {
    uint64_t v9 = *((void *)a2 + 8);
    uint64_t v10 = *((void *)a2 + 11);
    uint64_t v11 = *(void *)(*(void *)(v9 + 120) + 24 * *(unsigned int *)(v10 + 152));
    uint64_t v12 = (uint64_t *)(v10 + 104);
    if (*(unsigned char *)(v10 + 48)) {
      unsigned int v13 = (char *)this + 26640;
    }
    else {
      unsigned int v13 = (char *)this + 1344;
    }
    Phase::SpatialModeler::RoomSimulation::PersistingSimulationData::InitPersistingSimulationData((uint64_t)v13, (uint64_t)this, *((void *)a2 + 8), v12, v11, *((Phase::SpatialModeler::RayTracerState **)this + 6));
    Phase::SpatialModeler::RayTracerState::InitRayTracerState((uint64_t)a3 + 112752, (uint64_t)this, v9, v12, v11, *((Phase::SpatialModeler::RayTracerState **)this + 6));
    uint64_t v15 = *((void *)this + 2);
    if (v15 && *(void *)(v15 + 2760))
    {
      uint64_t v16 = Phase::Geometry::SystemDebugger::GetFromSystem(v15);
      v14.i64[0] = *(void *)(v16 + 56);
      *((void *)a3 + 14100) = v14.i64[0];
      *((void *)a3 + 14104) = *(unsigned int *)(v16 + 48);
    }
    Phase::SpatialModeler::RoomSimulationLogging::logAreSourcesAndListenerInsideSceneBoundingBox((uint64_t)a3 + 112752, *((_DWORD *)this + 8), (uint64_t)"RoomSimulationBeginInitCommon", 29, v14);
    long long v17 = *(_OWORD *)((char *)this + 1432);
    long long v18 = *(_OWORD *)((char *)this + 1448);
    *((void *)a3 + 14099) = *((void *)this + 183);
    *(_OWORD *)((char *)a3 + 112776) = v18;
    *(_OWORD *)((char *)a3 + 112760) = v17;
    *(_DWORD *)(a4 + 24) = 1;
  }
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v20);
}

void sub_2220557C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

__n128 Phase::SpatialModeler::RoomSimulationImpl::RoomSimulationBeginHandleSustainQueryCommon(Phase::SpatialModeler::RoomSimulationImpl *this, Phase::SpatialModeler::RoomSimulation *a2, Phase::SpatialModeler::Query *a3, Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState *a4, Phase::SpatialModeler::RayTracerState *a5)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v8 = *((void *)a2 + 8);
  if (*(_DWORD *)(v8 + 168)) {
    BOOL v9 = *(unsigned char *)(v8 + 932) == 0;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9)
  {
    uint64_t v10 = *((void *)this + 6);
    float UpdateRate = Phase::SpatialModeler::RoomSimulationConfig::GetUpdateRate((float *)a4 + 12, *((_DWORD *)this + 8));
    Phase::SpatialModeler::FilterTargetRoomAcousticParameters(v8 + 144, v10, (uint64_t)a4, UpdateRate);
  }
  Phase::SpatialModeler::SimulationController::RequireSimulation((float *)this + 20, (Phase::SpatialModeler::Query *)((char *)a3 + 112752), a4, (Phase::Geometry::SystemState *)v8, (uint64_t)v14);
  long long v12 = *(_OWORD *)v15;
  *(_OWORD *)((char *)a4 + 22840) = v14[2];
  *(_OWORD *)((char *)a4 + 22856) = v12;
  *(_OWORD *)((char *)a4 + 22870) = *(_OWORD *)&v15[14];
  __n128 result = (__n128)v14[1];
  *(_OWORD *)((char *)a4 + 22808) = v14[0];
  *(__n128 *)((char *)a4 + 22824) = result;
  return result;
}

float Phase::SpatialModeler::RoomSimulationConfig::GetUpdateRate(float *a1, int a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (a2 == 3)
  {
    uint64_t v6 = a1 + 19;
  }
  else
  {
    if (a2 != 2)
    {
      uint64_t v4 = **(NSObject ***)(Phase::Logger::GetInstance((Phase::Logger *)a1) + 1184);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        double v5 = a1[18];
        int v8 = 136315906;
        BOOL v9 = "RoomSimulationInitData.hpp";
        __int16 v10 = 1024;
        int v11 = 103;
        __int16 v12 = 1024;
        int v13 = a2;
        __int16 v14 = 2048;
        double v15 = v5;
        _os_log_impl(&dword_221E5E000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d Spatial category %d not available in simulated modelers, returning mEarlyResponseUpdateRate %f", (uint8_t *)&v8, 0x22u);
      }
    }
    uint64_t v6 = a1 + 18;
  }
  return *v6;
}

void Phase::SpatialModeler::RoomSimulationImpl::PrepareRayTrace(Phase::SpatialModeler::RoomSimulationImpl *this, Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState *a2, Phase::SpatialModeler::RayTracerState *a3, int a4)
{
  int v4 = (int)a3;
  uint64_t v6 = (char *)this + 131760;
  uint64_t v7 = (_DWORD *)((char *)this + 112816);
  *((_DWORD *)this + 33446) = *((_DWORD *)a2 + 5258);
  if (a4 && (Phase::SpatialModeler::RoomSimulationImpl *)((char *)this + 112752) != a2) {
    std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)this + 133680, *((char **)a2 + 2616), *((void *)a2 + 2617), (uint64_t)(*((void *)a2 + 2617) - *((void *)a2 + 2616)) >> 2);
  }
  LODWORD(v8) = *v7;
  if (*v7 > 0x100u) {
    std::terminate();
  }
  if (v8)
  {
    unint64_t v9 = 0;
    __int16 v10 = (char *)this + 112;
    do
    {
      Phase::SpatialModeler::RayTracerState::NextRay((unsigned int *)this + 28188, (uint64_t)v10);
      ++v9;
      unint64_t v8 = *v7;
      v10 += 352;
    }
    while (v9 < v8);
  }
  *(_DWORD *)uint64_t v6 = v8;
  *((_DWORD *)this + 16) = v4;
  *((void *)this + 11) = (char *)this + 112;
  *((_DWORD *)this + 24) = v8;
  *((_DWORD *)this + 25) = 352;
  *((void *)v6 + 756) = Phase::SpatialModeler::RoomSimulationImpl::RoomSimulationHandleIntersections;
}

uint64_t Phase::SpatialModeler::RoomSimulationImpl::RoomSimulationHandleIntersections@<X0>(Phase::SpatialModeler::RoomSimulationImpl *this@<X0>, Phase::SpatialModeler::RoomSimulation *a2@<X1>, Phase::SpatialModeler::Query *a3@<X2>, Phase::Logger *a4@<X8>)
{
  uint64_t v7 = this;
  uint64_t v294 = *MEMORY[0x263EF8340];
  uint64_t Instance = Phase::Logger::GetInstance(this);
  __int16 v10 = (Phase::Logger *)os_signpost_id_generate(**(os_log_t **)(Instance + 208));
  uint64_t v287 = v10;
  int v11 = *((_DWORD *)v7 + 8);
  __int16 v12 = (Phase::Logger *)Phase::Logger::GetInstance(v10);
  if (v11 == 2)
  {
    if (!*((unsigned char *)v12 + 1192)) {
      goto LABEL_11;
    }
    uint64_t v13 = Phase::Logger::GetInstance(v12);
    if ((unint64_t)v10 - 1 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_11;
    }
    __int16 v14 = **(NSObject ***)(v13 + 1184);
    if (!os_signpost_enabled(v14)) {
      goto LABEL_11;
    }
    buf[0].i16[0] = 0;
    double v15 = "Phase_RoomSimulation_EarlyReflectionsnHandleIntersections";
    uint64_t v16 = "EarlyReflectionsnHandleIntersections";
  }
  else
  {
    if (!*((unsigned char *)v12 + 1192)) {
      goto LABEL_11;
    }
    uint64_t v17 = Phase::Logger::GetInstance(v12);
    if ((unint64_t)v10 - 1 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_11;
    }
    __int16 v14 = **(NSObject ***)(v17 + 1184);
    if (!os_signpost_enabled(v14)) {
      goto LABEL_11;
    }
    buf[0].i16[0] = 0;
    double v15 = "Phase_RoomSimulation_LateReverbHandleIntersections";
    uint64_t v16 = "LateReverbHandleIntersections";
  }
  _os_signpost_emit_with_name_impl(&dword_221E5E000, v14, OS_SIGNPOST_INTERVAL_BEGIN, (os_signpost_id_t)v10, v15, v16, (uint8_t *)buf, 2u);
LABEL_11:
  v286[0] = &v287;
  v286[1] = v7;
  unsigned int v18 = atomic_load((unsigned int *)a3);
  if (v18 != 3)
  {
    v284[0] = 9;
    v284[1] = (char *)v7 + 72;
    int v285 = 2;
    Phase::SpatialModeler::RoomSimulationImpl::RoomSimulationHandleIntersections(Phase::SpatialModeler::RoomSimulation &,Phase::SpatialModeler::Query &,Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState &)::$_0::operator()(a4, (uint64_t)v286, (uint64_t)v284);
    unsigned int v20 = v284;
    return std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v20);
  }
  Phase::SpatialModeler::RoomSimulationImpl::CheckClusterQueryInput((uint64_t)v7, a2, (uint64_t)v282);
  if (v283 == 2)
  {
    std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v281, (uint64_t)v282);
    Phase::SpatialModeler::RoomSimulationImpl::RoomSimulationHandleIntersections(Phase::SpatialModeler::RoomSimulation &,Phase::SpatialModeler::Query &,Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState &)::$_0::operator()(a4, (uint64_t)v286, (uint64_t)v281);
    uint64_t v19 = v281;
    goto LABEL_14;
  }
  uint64_t v22 = (char *)a3 + 112752;
  uint64_t v23 = *((void *)a2 + 11);
  uint64_t v24 = *(void *)(v23 + 152);
  uint64_t v238 = *((void *)a2 + 8);
  if (*(_DWORD *)(v238 + 136) <= v24
    || (uint64_t v25 = *(void *)(v238 + 120), *(_DWORD *)(v25 + 24 * v24 + 20) != HIDWORD(v24))
    || (uint64_t v220 = *(void *)(v25 + 24 * v24)) == 0
    || *(_DWORD *)v220 != 2)
  {
    uint64_t v220 = 0;
  }
  uint64_t v214 = a2;
  char v218 = (*(uint64_t (**)(void, char *))(**(void **)(*(void *)v22 + 51952) + 16))(*(void *)(*(void *)v22 + 51952), (char *)a3 + 112752);
  uint64_t v215 = a3;
  float v28 = (char *)a3 + 131680;
  *((_DWORD *)a3 + 32941) = 0;
  uint64_t v29 = *((void *)v7 + 6);
  float32x4_t __b = 0u;
  float32x4_t v275 = 0u;
  long long v276 = 0u;
  long long v277 = 0u;
  long long v278 = 0u;
  long long v279 = 0u;
  memset(v280, 0, 28);
  *(_DWORD *)&v280[28] = v29;
  if (v29)
  {
    memset_pattern16(&__b, &unk_2220E7DF0, 4 * v29);
    long long v272 = 0u;
    memset(v273, 0, 28);
    long long v270 = 0u;
    long long v271 = 0u;
    long long v268 = 0u;
    long long v269 = 0u;
    float32x4_t v267 = 0u;
    HIDWORD(v273[1]) = v29;
    memset_pattern16(&v267, &unk_2220E7DF0, 4 * v29);
    long long v265 = 0u;
    memset(v266, 0, 28);
    long long v263 = 0u;
    long long v264 = 0u;
    long long v261 = 0u;
    long long v262 = 0u;
    long long v260 = 0u;
    HIDWORD(v266[1]) = v29;
    memset_pattern16(&v260, &unk_2220E7DF0, 4 * v29);
  }
  else
  {
    long long v272 = 0uLL;
    memset(v273, 0, sizeof(v273));
    long long v270 = 0uLL;
    long long v271 = 0uLL;
    long long v268 = 0uLL;
    long long v269 = 0uLL;
    float32x4_t v267 = 0uLL;
    long long v265 = 0uLL;
    memset(v266, 0, sizeof(v266));
    long long v263 = 0uLL;
    long long v264 = 0uLL;
    long long v261 = 0uLL;
    long long v262 = 0uLL;
    long long v260 = 0uLL;
  }
  uint64_t Normals = *((void *)v7 + 2);
  uint64_t v31 = v238;
  if (!*(void *)(Normals + 2760)) {
    goto LABEL_42;
  }
  uint64_t Normals = Phase::Geometry::SystemDebugger::GetFromSystem(Normals);
  if (!Normals) {
    goto LABEL_42;
  }
  int v33 = *(void **)(Normals + 112);
  Normals += 112;
  unint64_t v32 = v33;
  if (!v33) {
    goto LABEL_42;
  }
  unint64_t v34 = *(void *)(v23 + 152);
  uint64_t v35 = Normals;
  do
  {
    unint64_t v36 = v32[4];
    BOOL v37 = v36 >= v34;
    if (v36 >= v34) {
      long long v38 = v32;
    }
    else {
      long long v38 = v32 + 1;
    }
    if (v37) {
      uint64_t v35 = (uint64_t)v32;
    }
    unint64_t v32 = (void *)*v38;
  }
  while (*v38);
  if (v35 != Normals)
  {
    unint64_t v39 = *(void *)(v35 + 32);
    uint64_t v40 = v35 + 40;
    if (v39 <= v34) {
      uint64_t v41 = v40;
    }
    else {
      uint64_t v41 = 0;
    }
    uint64_t v225 = v41;
  }
  else
  {
LABEL_42:
    uint64_t v225 = 0;
  }
  uint64_t v216 = (void **)((char *)v215 + 135984);
  if (!*((_DWORD *)v28 + 20))
  {
LABEL_210:
    int v203 = *((_DWORD *)v7 + 8);
    if (v203 == 3)
    {
      Phase::SpatialModeler::LateReverbSimulationImpl::RoomSimulationFinish(v7, (Phase::Geometry::SystemState **)v214, v215, (Phase::Logger *)v253);
      Phase::SpatialModeler::RoomSimulationImpl::RoomSimulationHandleIntersections(Phase::SpatialModeler::RoomSimulation &,Phase::SpatialModeler::Query &,Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState &)::$_0::operator()(a4, (uint64_t)v286, (uint64_t)v253);
      uint64_t v19 = v253;
    }
    else
    {
      if (v203 != 2) {
        goto LABEL_213;
      }
      Phase::SpatialModeler::EarlyReflectionsSimulationImpl::RoomSimulationFinish((float32x2_t *)v7, (Phase::Geometry::SystemState **)v214, v215, (Phase::Logger *)v254);
      Phase::SpatialModeler::RoomSimulationImpl::RoomSimulationHandleIntersections(Phase::SpatialModeler::RoomSimulation &,Phase::SpatialModeler::Query &,Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState &)::$_0::operator()(a4, (uint64_t)v286, (uint64_t)v254);
      uint64_t v19 = v254;
    }
    goto LABEL_14;
  }
  unint64_t v213 = a4;
  unint64_t v42 = 0;
  char v236 = 0;
  __int16 v223 = (char *)v215 + 113248;
  unint64_t v242 = (char *)v215 + 112;
  uint64_t v240 = (char *)v215 + 90224;
  float v219 = (int **)((char *)v7 + 51936);
  uint64_t v217 = (unint64_t *)((char *)v215 + 137816);
  long long v43 = (unint64_t *)((char *)v215 + 136000);
  uint64_t v234 = (uint64_t **)((char *)v215 + 133712);
  uint64_t v212 = (Phase::SpatialModeler::Query *)((char *)v215 + 135920);
  long long v44 = (float *)((char *)v215 + 208);
  uint64_t v243 = (float *)((char *)v215 + 336);
  float v45 = 0.01;
  char v235 = v22;
  uint64_t v226 = v7;
  uint64_t v227 = v28;
  do
  {
    v244 = v44;
    ++*((_DWORD *)v28 + 100);
    uint64_t v46 = (uint64_t)&v242[352 * v42];
    int v47 = *(_DWORD *)(v46 + 72);
    if (v47 >= 0) {
      __int32 v48 = &v240[88 * v47];
    }
    else {
      __int32 v48 = 0;
    }
    uint64_t v245 = (int *)(v46 + 68);
    float v246 = v48;
    ++*(_DWORD *)(v46 + 68);
    unint64_t v258 = 0;
    float v259 = 0.0;
    float v49 = *(float *)(v46 + 32);
    float v50 = 0.0;
    if (v49 == 3.4028e38)
    {
      uint64_t v241 = 0;
      float v49 = 3.4028e38;
    }
    else
    {
      uint64_t v51 = *(void *)(v46 + 40);
      if (*(_DWORD *)(v31 + 112) > v51)
      {
        uint64_t v52 = *(void *)(v31 + 96);
        if (*(_DWORD *)(v52 + 24 * v51 + 20) == HIDWORD(v51))
        {
          uint64_t Normals = *(void *)(v52 + 24 * *(void *)(v46 + 40));
          if (Normals)
          {
            uint64_t v241 = *(int **)(v52 + 24 * *(void *)(v46 + 40));
            uint64_t Normals = Phase::Geometry::GetNormals((int *)Normals, (unsigned int *)(v46 + 36), 1, (uint64_t)&v258, 1, 1);
            v26.i32[0] = HIDWORD(v258);
            LODWORD(v53) = v258;
            float v50 = v259;
            float v49 = *(float *)(v46 + 32);
            goto LABEL_56;
          }
        }
      }
      uint64_t v241 = 0;
    }
    v26.i32[0] = 0;
    float v53 = 0.0;
LABEL_56:
    float v54 = sqrtf((float)(v50 * v50) + (float)((float)(v26.f32[0] * v26.f32[0]) + (float)(v53 * v53)));
    BOOL v55 = v49 != 3.4028e38;
    if (v54 >= v45) {
      BOOL v55 = 0;
    }
    if (v49 < 0.000001 || v55)
    {
      uint64_t v108 = v244;
      if (v54 < v45)
      {
        uint64_t v109 = **(NSObject ***)(Phase::Logger::GetInstance((Phase::Logger *)Normals) + 1184);
        if (os_log_type_enabled(v109, OS_LOG_TYPE_ERROR))
        {
          buf[0].i32[0] = 136315394;
          *(uint64_t *)((char *)buf[0].i64 + 4) = (uint64_t)"RoomSimulationImpl.cpp";
          buf[0].i16[6] = 1024;
          *(__int32 *)((char *)&buf[0].i32[3] + 2) = 503;
          _os_log_impl(&dword_221E5E000, v109, OS_LOG_TYPE_ERROR, "%25s:%-5d Invalid normal vector == (0,0,0).\n", (uint8_t *)buf, 0x12u);
        }
        float v49 = *(float *)(v46 + 32);
        uint64_t v108 = v244;
        if (v49 == 3.4028e38)
        {
          ++*((_DWORD *)v28 + 104);
          float v49 = 3.4028e38;
        }
        else
        {
          ++*((_DWORD *)v28 + 103);
        }
      }
      if (v49 < 0.000001)
      {
        if (*v245 < 1) {
          ++*((_DWORD *)v28 + 106);
        }
        else {
          ++*((_DWORD *)v28 + 105);
        }
      }
      *((float *)v28 + 95) = *((float *)v28 + 95) + 1.0;
      Phase::SpatialModeler::RayTracerState::NextRay((unsigned int *)v22, v46);
      goto LABEL_200;
    }
    float v56 = *(float *)(v46 + 16);
    float v57 = *(float *)(v46 + 20);
    uint64_t v233 = (int *)(v46 + 16);
    float v58 = *(float *)(v46 + 24);
    if (v49 != 3.4028e38
      && (float)((float)((float)(v53 * v56) + (float)(v26.f32[0] * v57)) + (float)(v50 * v58)) > -0.000001)
    {
      ++*((_DWORD *)v28 + 101);
    }
    if (v54 > 1.1755e-38)
    {
      float v53 = v53 / v54;
      v26.f32[0] = v26.f32[0] / v54;
      unint64_t v258 = __PAIR64__(v26.u32[0], LODWORD(v53));
      float v50 = v50 / v54;
      float v259 = v50;
    }
    float v59 = (float)(v49 * v56) + *(float *)v46;
    float v60 = (float)(v49 * v57) + *(float *)(v46 + 4);
    float v61 = (float)(v49 * v58) + *(float *)(v46 + 8);
    v256.f32[0] = v59;
    v256.f32[1] = v60;
    float v257 = v61;
    int v62 = *v245;
    if (*v245 <= 2)
    {
      uint64_t v63 = (uint64_t)&v223[72 * v42 + 24 * v62];
      *(float *)uint64_t v63 = v59;
      *(float *)(v63 + 4) = v60;
      *(float *)(v63 + 8) = v61;
      *(float *)(v63 + 12) = v53;
      *(_DWORD *)(v63 + 16) = v26.i32[0];
      *(float *)(v63 + 20) = v50;
    }
    unsigned int v224 = (_DWORD *)(v46 + 72);
    unint64_t v239 = v42;
    if (v62 >= 1)
    {
      uint64_t v64 = *(void *)v28;
      if (*((void *)v28 + 1) != *(void *)v28)
      {
        unint64_t v65 = 0;
        uint64_t v66 = &v242[352 * v42];
        float v231 = (float *)(v66 + 80);
        __int16 v232 = (float *)(v66 + 56);
        int v229 = (float *)(v66 + 64);
        __int16 v230 = (float *)(v66 + 60);
        __int16 v228 = v66 + 76;
        uint64_t v221 = (uint64_t)&v223[72 * v42];
        uint64_t v222 = (unsigned int *)(v66 + 348);
        do
        {
          if (v47 < 0 || v65 != *((_DWORD *)v246 + 15))
          {
            uint64_t v67 = v64 + 56 * v65;
            uint64_t v69 = *(void *)(v67 + 24);
            unint64_t v68 = (float32x4_t *)(v67 + 24);
            v26.i64[0] = v69;
            float32x4_t v70 = v26;
            v70.i32[2] = v68->i32[2];
            float32x4_t v71 = vsubq_f32(*(float32x4_t *)v46, v70);
            float32x4_t v72 = vmulq_f32(v71, v71);
            float v73 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v72, 2), vaddq_f32(v72, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v72.f32, 1))).f32[0]);
            if (v73 < v49)
            {
              v26.i32[2] = v68->i32[2];
              v27.i64[0] = *(void *)(v46 + 16);
              v27.i32[2] = *(_DWORD *)(v46 + 24);
              float32x4_t v74 = vsubq_f32(v26, *(float32x4_t *)v46);
              float32x4_t v75 = vmulq_f32(v74, v27);
              float32x4_t v27 = vaddq_f32(v75, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v75.f32, 1));
              float32x4_t v26 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v75, 2), v27);
              if (v26.f32[0] >= 0.0)
              {
                float32x4_t v76 = vmulq_f32(v74, v74);
                if ((float)(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v76, 2), vaddq_f32(v76, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v76.f32, 1))).f32[0]- (float)(v26.f32[0] * v26.f32[0])) <= *(float *)(*(void *)(*((void *)v28 + 3) + 8 * v65)+ 32))
                {
                  uint64_t v77 = *((void *)v7 + 6);
                  if (v77)
                  {
                    float v78 = *v231;
                    p_b = &__b;
                    int64x2_t v80 = v244;
                    do
                    {
                      float v81 = *v80++;
                      p_b->f32[0] = v81 / v78;
                      p_b = (float32x4_t *)((char *)p_b + 4);
                      --v77;
                    }
                    while (v77);
                  }
                  float v82 = *((float *)v22 + 116);
                  float v83 = *v232 + (float)(v73 / v82);
                  long long v291 = v278;
                  long long v292 = v279;
                  *(_OWORD *)&v293[16] = *(_OWORD *)&v280[16];
                  *(_OWORD *)float32x4_t v293 = *(_OWORD *)v280;
                  buf[0] = __b;
                  buf[1] = v275;
                  long long v289 = v276;
                  long long v290 = v277;
                  unsigned int v84 = *((_DWORD *)v22 + 115);
                  unsigned int v85 = *(_DWORD *)&v280[28];
                  if (v84 < *(_DWORD *)&v280[28]) {
                    unsigned int v85 = v84;
                  }
                  if (v85)
                  {
                    unint64_t v86 = 0;
                    float v87 = v82 * v83;
                    do
                    {
                      buf[0].f32[v86] = buf[0].f32[v86] * expf(-(float)(*((float *)v215 + v86 + 28272) * v87));
                      ++v86;
                      if (v84 >= *(_DWORD *)&v293[28]) {
                        unint64_t v88 = *(unsigned int *)&v293[28];
                      }
                      else {
                        unint64_t v88 = v84;
                      }
                    }
                    while (v86 < v88);
                  }
                  long long v278 = v291;
                  long long v279 = v292;
                  *(_OWORD *)double v280 = *(_OWORD *)v293;
                  *(_OWORD *)&v280[16] = *(_OWORD *)&v293[16];
                  float32x4_t __b = buf[0];
                  float32x4_t v275 = buf[1];
                  long long v276 = v289;
                  long long v277 = v290;
                  uint64_t v22 = v235;
                  if (v235[180])
                  {
                    uint64_t v89 = *v219;
                    buf[0] = *(float32x4_t *)(v64 + 56 * v65 + 8);
                    buf[1] = *v68;
                    Phase::SpatialModeler::ApplyDirectivitySubbandGains((Phase::Logger *)&__b, v89, (float32x2_t *)buf, (float32x2_t *)v46);
                    float v28 = v227;
                    long long v43 = (unint64_t *)((char *)v215 + 136000);
                    uint64_t v7 = v226;
                  }
                  else
                  {
                    uint64_t v90 = *(void *)(v64 + 56 * v65 + 40);
                    uint64_t v7 = v226;
                    float v28 = v227;
                    long long v43 = (unint64_t *)((char *)v215 + 136000);
                    if (v90)
                    {
                      v255[0] = *(_OWORD *)(v64 + 56 * v65 + 8);
                      v255[1] = *v68;
                      Phase::SpatialModeler::applySourceDirectivity(&__b, v238, (float32x2_t *)v255, v90, (float32x2_t *)v46, (Phase::Logger *)buf);
                      long long v278 = v291;
                      long long v279 = v292;
                      *(_OWORD *)double v280 = *(_OWORD *)v293;
                      *(_OWORD *)&v280[16] = *(_OWORD *)&v293[16];
                      float32x4_t __b = buf[0];
                      float32x4_t v275 = buf[1];
                      long long v276 = v289;
                      long long v277 = v290;
                    }
                  }
                  if (v235[133])
                  {
                    uint64_t v91 = *((void *)v215 + 16940);
                    if (v91)
                    {
                      Phase::SpatialModeler::applyListenerDirectivity(&__b, v238, (float *)v220, v91, (Phase::Logger *)buf, *v230, *v229);
                      long long v278 = v291;
                      long long v279 = v292;
                      *(_OWORD *)double v280 = *(_OWORD *)v293;
                      *(_OWORD *)&v280[16] = *(_OWORD *)&v293[16];
                      float32x4_t __b = buf[0];
                      float32x4_t v275 = buf[1];
                      long long v276 = v289;
                      long long v277 = v290;
                    }
                  }
                  if (*((void *)v235 + 10) < (unint64_t)*v245 || *v228)
                  {
                    Phase::SpatialModeler::DirectivityHistogram::addEnergySphere(*(void *)(*((void *)v28 + 3) + 8 * v65), (uint64_t)&__b, v83, *v230, *v229);
                  }
                  else
                  {
                    uint64_t v92 = *v222;
                    memset(buf, 0, sizeof(buf));
                    long long v289 = 0u;
                    long long v290 = 0u;
                    long long v291 = 0u;
                    long long v292 = 0u;
                    memset(v293, 0, 28);
                    *(_DWORD *)&v293[28] = v92;
                    if (v92)
                    {
                      float v93 = *v231;
                      int64x2_t v94 = buf;
                      unint64_t v95 = v243;
                      do
                      {
                        float v96 = *v95++;
                        v94->f32[0] = v93 * v96;
                        int64x2_t v94 = (float32x4_t *)((char *)v94 + 4);
                        --v92;
                      }
                      while (v92);
                    }
                    Phase::Subbands<float>::operator*=(&__b, buf);
                    float32x2_t v97 = *(Phase::SpatialModeler::EarlyReflectionDetector **)(*((void *)v28 + 6) + 8 * v65);
                    *(void *)&v255[0] = v68->i64[0];
                    DWORD2(v255[0]) = v68->i32[2];
                    Phase::SpatialModeler::AudibleEarlyReflection::AudibleEarlyReflection((int *)buf, v46, __b.f32, v221, (int *)v255, v233, (int *)(v220 + 64), v83);
                    Phase::SpatialModeler::EarlyReflectionDetector::AddToScoreBoard(v97, (const Phase::SpatialModeler::AudibleEarlyReflection *)buf);
                  }
                  char v236 = 1;
                }
              }
            }
          }
          ++v65;
          uint64_t v64 = *(void *)v28;
        }
        while (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)v28 + 1) - *(void *)v28) >> 3) > v65);
      }
    }
    if (*(float *)(v46 + 32) == 3.4028e38)
    {
      ++*((_DWORD *)v28 + 107);
      *((float *)v28 + 95) = *((float *)v28 + 95) + 1.0;
      Phase::SpatialModeler::RayTracerState::NextRay((unsigned int *)v22, v46);
      uint64_t v31 = v238;
      unint64_t v42 = v239;
      uint64_t v108 = v244;
      goto LABEL_200;
    }
    uint64_t v31 = v238;
    unint64_t v42 = v239;
    if (v225 && *(void *)(v225 + 40))
    {
      float v98 = *(float *)(v220 + 68);
      float v99 = v98 + -0.5;
      float v100 = v98 + 0.5;
      if (v60 > v99 && v60 < v100)
      {
        unint64_t v102 = *((void *)v215 + 16999);
        unint64_t v103 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v102 - (void)*v216) >> 2);
        if (v103 <= 0x3E7)
        {
          float v247 = v45;
          float v104 = (float)*v245;
          int v105 = *(_DWORD *)(v46 + 4);
          int v106 = *(_DWORD *)(v46 + 8);
          if (v102 >= *v43)
          {
            int v237 = *(_DWORD *)v46;
            if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*v43 - (void)*v216) >> 2) <= v103 + 1) {
              unint64_t v110 = v103 + 1;
            }
            else {
              unint64_t v110 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*v43 - (void)*v216) >> 2);
            }
            if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*v43 - (void)*v216) >> 2)) >= 0x492492492492492) {
              unint64_t v111 = 0x924924924924924;
            }
            else {
              unint64_t v111 = v110;
            }
            uint64_t v112 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::SpatialModeler::RoomSimulationDebugger::DebugIntersection>>((uint64_t)v43, v111);
            float v114 = &v112[28 * v103];
            *(_DWORD *)float v114 = v237;
            *((_DWORD *)v114 + 1) = v105;
            *((_DWORD *)v114 + 2) = v106;
            *((float *)v114 + 3) = v59;
            *((float *)v114 + 4) = v60;
            *((float *)v114 + 5) = v61;
            *((float *)v114 + 6) = v104;
            double v116 = (char *)*v216;
            double v115 = (char *)*((void *)v215 + 16999);
            double v117 = v114;
            if (v115 == *v216)
            {
              uint64_t v119 = (char **)((char *)v215 + 135984);
              float v45 = v247;
            }
            else
            {
              float v45 = v247;
              do
              {
                long long v118 = *(_OWORD *)(v115 - 28);
                *((_OWORD *)v117 - 1) = *((_OWORD *)v115 - 1);
                *(_OWORD *)(v117 - 28) = v118;
                v117 -= 28;
                v115 -= 28;
              }
              while (v115 != v116);
              uint64_t v119 = (char **)((char *)v215 + 135984);
              double v115 = (char *)*v216;
            }
            int v107 = v114 + 28;
            void *v119 = v117;
            v119[1] = v114 + 28;
            v119[2] = &v112[28 * v113];
            if (v115) {
              operator delete(v115);
            }
          }
          else
          {
            *(_DWORD *)unint64_t v102 = *(_DWORD *)v46;
            *(_DWORD *)(v102 + 4) = v105;
            *(_DWORD *)(v102 + 8) = v106;
            *(float *)(v102 + 12) = v59;
            *(float *)(v102 + 16) = v60;
            *(float *)(v102 + 20) = v61;
            int v107 = (char *)(v102 + 28);
            *(float *)(v102 + 24) = v104;
            float v45 = v247;
          }
          *((void *)v215 + 16999) = v107;
        }
      }
    }
    buf[0].i64[0] = 0;
    Phase::Geometry::GetMaterials(v241, (unsigned int *)(v46 + 36), 1, buf, 1, 1);
    if (buf[0].i64[0]
      && *(_DWORD *)(v238 + 88) > buf[0].i32[0]
      && (uint64_t v120 = *(void *)(v238 + 72), *(_DWORD *)(v120 + 24 * buf[0].u32[0] + 20) == buf[0].i32[1])
      && (uint64_t v121 = *(void *)(v120 + 24 * buf[0].u32[0])) != 0
      && *(_DWORD *)v121 == 1
      && (float32x2_t v122 = *(float32x2_t *)(*(void *)(v121 + 40) + 40 * *((void *)v22 + 59)), *(void *)&v122))
    {
      long long v123 = *(_OWORD *)(*(void *)&v122 + 496);
      long long v271 = *(_OWORD *)(*(void *)&v122 + 480);
      long long v272 = v123;
      long long v124 = *(_OWORD *)(*(void *)&v122 + 528);
      v273[0] = *(_OWORD *)(*(void *)&v122 + 512);
      v273[1] = v124;
      long long v125 = *(_OWORD *)(*(void *)&v122 + 432);
      float32x4_t v267 = *(float32x4_t *)(*(void *)&v122 + 416);
      long long v268 = v125;
      long long v126 = *(_OWORD *)(*(void *)&v122 + 464);
      long long v269 = *(_OWORD *)(*(void *)&v122 + 448);
      long long v270 = v126;
      long long v127 = *(_OWORD *)(*(void *)&v122 + 672);
      long long v128 = *(_OWORD *)(*(void *)&v122 + 688);
      long long v129 = *(_OWORD *)(*(void *)&v122 + 720);
      long long v262 = *(_OWORD *)(*(void *)&v122 + 704);
      long long v263 = v129;
      long long v260 = v127;
      long long v261 = v128;
      long long v130 = *(_OWORD *)(*(void *)&v122 + 736);
      long long v131 = *(_OWORD *)(*(void *)&v122 + 752);
      long long v132 = *(_OWORD *)(*(void *)&v122 + 784);
      v266[0] = *(_OWORD *)(*(void *)&v122 + 768);
      v266[1] = v132;
      long long v264 = v130;
      long long v265 = v131;
    }
    else
    {
      uint64_t v133 = *((void *)v7 + 6);
      if (v133)
      {
        __int32 v134 = *((_DWORD *)v22 + 14);
        unint64_t v135 = &v267;
        uint64_t v136 = *((void *)v7 + 6);
        do
        {
          v135->i32[0] = v134;
          unint64_t v135 = (float32x4_t *)((char *)v135 + 4);
          --v136;
        }
        while (v136);
        HIDWORD(v273[1]) = v133;
        int v137 = *((_DWORD *)v22 + 15);
        double v138 = &v260;
        uint64_t v139 = v133;
        do
        {
          *(_DWORD *)double v138 = v137;
          double v138 = (long long *)((char *)v138 + 4);
          --v139;
        }
        while (v139);
      }
      else
      {
        HIDWORD(v273[1]) = 0;
      }
      float32x2_t v122 = 0;
      HIDWORD(v266[1]) = v133;
    }
    if (!*(_DWORD *)(v238 + 168))
    {
      unint64_t v140 = *((void *)v7 + 6);
LABEL_162:
      if (!v140) {
        goto LABEL_165;
      }
LABEL_163:
      float v146 = *((float *)v22 + 34);
      float v147 = *((float *)v22 + 35);
      unint64_t v148 = &v267;
      do
      {
        v148->f32[0] = fminf(fmaxf(v148->f32[0], v146), v147);
        unint64_t v148 = (float32x4_t *)((char *)v148 + 4);
        --v140;
      }
      while (v140);
      goto LABEL_165;
    }
    unint64_t v140 = *((void *)v7 + 6);
    if (*(unsigned char *)(v238 + 932)) {
      goto LABEL_162;
    }
    unsigned int v141 = (float *)*((void *)v215 + 16710);
    if (v140 > (uint64_t)(*((void *)v215 + 16711) - (void)v141) >> 2) {
      goto LABEL_163;
    }
    if (v140)
    {
      float v142 = *((float *)v22 + 34);
      float v143 = *((float *)v22 + 35);
      uint64_t v144 = &v267;
      do
      {
        float v145 = *v141++;
        v144->f32[0] = fminf(fmaxf(v145 * v144->f32[0], v142), v143);
        uint64_t v144 = (float32x4_t *)((char *)v144 + 4);
        --v140;
      }
      while (v140);
    }
LABEL_165:
    uint64_t i = (uint64_t **)((char *)v215 + 133712);
    uint64_t v150 = *v234;
    unint64_t v151 = *(void *)(v46 + 40);
    id v152 = (uint64_t **)((char *)v215 + 133712);
    if (*v234)
    {
      uint64_t v153 = (uint64_t **)((char *)v215 + 133712);
      uint64_t v154 = *v234;
      do
      {
        unint64_t v155 = v154[4];
        BOOL v156 = v155 >= v151;
        if (v155 >= v151) {
          uint64_t v157 = (uint64_t **)v154;
        }
        else {
          uint64_t v157 = (uint64_t **)(v154 + 1);
        }
        if (v156) {
          uint64_t v153 = (uint64_t **)v154;
        }
        uint64_t v154 = *v157;
      }
      while (*v157);
      if (v153 != v234 && v151 >= (unint64_t)v153[4]) {
        goto LABEL_184;
      }
      for (uint64_t i = (uint64_t **)((char *)v215 + 133712); ; v150 = *i)
      {
        id v152 = i;
        if (!v150) {
          break;
        }
        while (1)
        {
          uint64_t i = (uint64_t **)v150;
          unint64_t v158 = v150[4];
          if (v158 > v151) {
            break;
          }
          if (v158 >= v151) {
            goto LABEL_184;
          }
          uint64_t v150 = i[1];
          if (!v150)
          {
            id v152 = i + 1;
            goto LABEL_183;
          }
        }
      }
    }
LABEL_183:
    uint64_t v159 = operator new(0x30uLL);
    v159[4] = v151;
    *((_DWORD *)v159 + 10) = 1065353216;
    std::__tree<Phase::SpatialCategory>::__insert_node_at((uint64_t **)v215 + 16713, (uint64_t)i, v152, v159);
LABEL_184:
    if (*v245 <= 0)
    {
      *((float *)v28 + 23) = v49 + *((float *)v28 + 23);
      Phase::Subbands<float>::operator+=((float32x4_t *)v215 + 8237, &v267);
      ++*((_DWORD *)v28 + 92);
    }
    else
    {
      *((float *)v28 + 24) = v49 + *((float *)v28 + 24);
      Phase::Subbands<float>::operator+=((float32x4_t *)v215 + 8245, &v267);
      ++*((_DWORD *)v28 + 93);
    }
    uint64_t v22 = v235;
    uint64_t v108 = v244;
    ++*((_DWORD *)v28 + 94);
    if (v218) {
      goto LABEL_199;
    }
    *(float *)&v242[352 * v239 + 80] = (float)(1.0 - Phase::SpatialModeler::getMeanAbsorptionCoefficient(v267.f32))
                                     * *(float *)&v242[352 * v239 + 80];
    uint64_t v160 = *((void *)v7 + 6);
    if (v160)
    {
      for (uint64_t j = 0; j != v160; ++j)
      {
        v244[j] = v244[j] * (float)(1.0 - v267.f32[j]);
        v243[j] = v243[j] * (float)(1.0 - *((float *)&v260 + j));
      }
    }
    float v163 = *((float *)v215 + 34460);
    float v162 = *((float *)v215 + 34461);
    unint64_t v164 = *((void *)v215 + 17228);
    unint64_t v165 = (v164 >> 26) ^ ((*v217 ^ (*v217 << 23)) >> 17) ^ v164 ^ *v217 ^ (*v217 << 23);
    *uint64_t v217 = v164;
    *((void *)v215 + 17228) = v165;
    if (HIDWORD(v273[1]))
    {
      float v166 = 0.0;
      uint64_t v167 = &v267;
      uint64_t v168 = HIDWORD(v273[1]);
      do
      {
        float v169 = v167->f32[0];
        uint64_t v167 = (float32x4_t *)((char *)v167 + 4);
        float v166 = v166 + v169;
        --v168;
      }
      while (v168);
    }
    else
    {
      float v166 = 0.0;
    }
    float v170 = v162 - v163;
    if ((float)(v166 / (float)HIDWORD(v273[1])) > (float)(v163
                                                         + (float)((float)(v162 - v163)
                                                                 * (float)((float)(v165 + v164) * 5.421e-20)))
      || (int v171 = &v242[352 * v239],
          float v172 = *((float *)v171 + 14) + (float)(v49 / *((float *)v235 + 116)),
          *((float *)v171 + 14) = v172,
          v172 > *((float *)v235 + 28)))
    {
      Phase::SpatialModeler::RayTracerState::NextRay((unsigned int *)v235, v46);
LABEL_199:
      char v236 = 1;
      goto LABEL_200;
    }
    float v173 = fminf(*(float *)(v46 + 32), v45);
    float v174 = v257 - (float)(v173 * *(float *)(v46 + 24));
    *(float32x2_t *)uint64_t v46 = vsub_f32(v256, vmul_n_f32(*(float32x2_t *)(v46 + 16), v173));
    *(float *)(v46 + 8) = v174;
    unint64_t v175 = ((v164 ^ (v164 << 23)) >> 17) ^ (v165 >> 26) ^ v164 ^ (v164 << 23) ^ v165;
    *uint64_t v217 = v165;
    *((void *)v215 + 17228) = v175;
    if (Phase::SpatialModeler::getMeanScatteringCoefficient((float *)&v260) <= (float)(v163
                                                                                      + (float)(v170
                                                                                              * (float)((float)(v175 + v165) * 5.421e-20))))
    {
      float v195 = *(float *)(v46 + 16);
      float v196 = *(float *)(v46 + 20);
      float v197 = *(float *)(v46 + 24);
      float v198 = (float)((float)(*(float *)&v258 * v195) + (float)(*((float *)&v258 + 1) * v196)) + (float)(v259 * v197);
      float v199 = v198 + v198;
      float v200 = *((float *)&v258 + 1) * v199;
      float v201 = v195 - (float)(*(float *)&v258 * v199);
      float v202 = v197 - (float)(v259 * v199);
      *(float *)(v46 + 16) = v201;
      *(float *)(v46 + 20) = v196 - v200;
      *(float *)(v46 + 24) = v202;
      _DWORD *v224 = -1;
      unint64_t v42 = v239;
    }
    else
    {
      float v176 = *((float *)v215 + 34460);
      float v177 = *((float *)v215 + 34461) - v176;
      unint64_t v178 = *((void *)v215 + 17228);
      unint64_t v179 = (v178 >> 26) ^ ((*v217 ^ (*v217 << 23)) >> 17) ^ v178 ^ *v217 ^ (*v217 << 23);
      float v180 = v176 + (float)(v177 * (float)((float)(v179 + v178) * 5.421e-20));
      unint64_t v181 = ((v178 ^ (v178 << 23)) >> 17) ^ (v179 >> 26) ^ v178 ^ (v178 << 23) ^ v179;
      *uint64_t v217 = v179;
      *((void *)v215 + 17228) = v181;
      Phase::SpatialModeler::scatterVectorOnPlane((float *)v233, (float *)&v258, v180, v176 + (float)(v177 * (float)((float)(v181 + v179) * 5.421e-20)));
      int v182 = *((_DWORD *)v28 + 21);
      *((_DWORD *)v28 + 21) = v182 + 1;
      _DWORD *v224 = v182;
      unint64_t v42 = v239;
      v242[352 * v239 + 76] = 1;
      if ((v182 & 0x80000000) == 0)
      {
        float v183 = (float32x2_t *)&v240[88 * v182];
        float v248 = sqrtf(*((float *)v215 + 33982));
        Phase::SpatialModeler::ImportanceSampling::computeProbabilityDistribution((uint64_t)v212, (uint64_t)&v256, (uint64_t)&v258, v28, (float *)&v183[8]);
        float v185 = *((float *)v215 + 34460);
        float v184 = *((float *)v215 + 34461);
        unint64_t v186 = *((void *)v215 + 17228);
        unint64_t v187 = (v186 >> 26) ^ ((*v217 ^ (*v217 << 23)) >> 17) ^ v186 ^ *v217 ^ (*v217 << 23);
        *uint64_t v217 = v186;
        *((void *)v215 + 17228) = v187;
        uint64_t Normals = Phase::SpatialModeler::ImportanceSampling::pickRandomSource(v212, v185 + (float)((float)(v184 - v185) * (float)((float)(v187 + v186) * 5.421e-20)));
        uint64_t v188 = *(void *)v28 + 56 * Normals;
        float v189 = *(float *)(v188 + 32);
        v26.f32[0] = *(float *)(v46 + 8) - v189;
        v183[7].i32[0] = v239;
        v183[7].i32[1] = Normals;
        v27.i64[0] = *(void *)(v188 + 24);
        float32x2_t v190 = vsub_f32(*(float32x2_t *)v46, *(float32x2_t *)v27.f32);
        *(float *)v191.i32 = sqrtf(vaddv_f32(vmul_f32(v190, v190)) + (float)(v26.f32[0] * v26.f32[0]));
        float32x2_t v192 = vdiv_f32(v190, (float32x2_t)vdup_lane_s32(v191, 0));
        v26.f32[0] = v26.f32[0] / *(float *)v191.i32;
        *float v183 = vadd_f32(*(float32x2_t *)v27.f32, vmul_n_f32(v192, v248));
        v183[1].f32[0] = v189 + (float)(v248 * v26.f32[0]);
        v183[2] = v192;
        v183[1].i32[1] = 0;
        float v193 = 0.05;
        if ((float)(*(float *)v191.i32 - v248) >= 0.05) {
          float v193 = *(float *)v191.i32 - v248;
        }
        v183[3].i32[0] = v26.i32[0];
        v183[3].f32[1] = v193;
        uint64_t v194 = buf[0].i64[0];
        v183[9] = v122;
        v183[10] = (float32x2_t)v194;
      }
    }
    char v236 = 1;
    uint64_t v108 = v244;
LABEL_200:
    ++v42;
    long long v44 = v108 + 88;
    v243 += 88;
  }
  while (v42 < *((unsigned int *)v28 + 20));
  a4 = v213;
  if ((v236 & 1) == 0) {
    goto LABEL_210;
  }
LABEL_213:
  if (!(*(unsigned int (**)(void, char *))(**(void **)(*(void *)v22 + 51952) + 16))(*(void *)(*(void *)v22 + 51952), v22))
  {
    if (*((_DWORD *)v28 + 21) >= *((_DWORD *)v22 + 38))
    {
      float v207 = (__int32 *)((char *)v7 + 64);
      float v205 = (int32x2_t *)v215;
      uint64_t v208 = (char *)v215 + 90224;
      v209.i32[1] = 88;
      v209.i32[0] = *((_DWORD *)v28 + 21);
      uint64_t v210 = Phase::SpatialModeler::RoomSimulationImpl::RoomSimulationHandleDiffuseRain;
    }
    else
    {
      __int32 v206 = *((_DWORD *)v22 + 16);
      *((_DWORD *)v28 + 20) = v206;
      float v207 = (__int32 *)((char *)v7 + 60);
      float v205 = (int32x2_t *)v215;
      uint64_t v208 = (char *)v215 + 112;
      int32x2_t v209 = vdup_n_s32(0x160u);
      v209.i32[0] = v206;
      uint64_t v210 = (void (*)(int **@<X0>, Phase::SpatialModeler::RoomSimulation *@<X1>, Phase::SpatialModeler::Query *@<X2>, Phase::Logger *@<X8>))Phase::SpatialModeler::RoomSimulationImpl::RoomSimulationHandleIntersections;
    }
    v205[8].i32[0] = *v207;
    v205[11] = (int32x2_t)v208;
    v205[12] = v209;
    *((void *)v215 + 17226) = v210;
    goto LABEL_222;
  }
  int v204 = *((_DWORD *)v7 + 8);
  if (v204 == 3)
  {
    Phase::SpatialModeler::LateReverbSimulationImpl::RoomSimulationFinish(v7, (Phase::Geometry::SystemState **)v214, v215, (Phase::Logger *)v251);
    Phase::SpatialModeler::RoomSimulationImpl::RoomSimulationHandleIntersections(Phase::SpatialModeler::RoomSimulation &,Phase::SpatialModeler::Query &,Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState &)::$_0::operator()(a4, (uint64_t)v286, (uint64_t)v251);
    uint64_t v19 = v251;
LABEL_14:
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v19);
    goto LABEL_15;
  }
  float v205 = (int32x2_t *)v215;
  if (v204 == 2)
  {
    Phase::SpatialModeler::EarlyReflectionsSimulationImpl::RoomSimulationFinish((float32x2_t *)v7, (Phase::Geometry::SystemState **)v214, v215, (Phase::Logger *)v252);
    Phase::SpatialModeler::RoomSimulationImpl::RoomSimulationHandleIntersections(Phase::SpatialModeler::RoomSimulation &,Phase::SpatialModeler::Query &,Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState &)::$_0::operator()(a4, (uint64_t)v286, (uint64_t)v252);
    uint64_t v19 = v252;
    goto LABEL_14;
  }
LABEL_222:
  uint64_t v211 = operator new(8uLL);
  *uint64_t v211 = v205;
  memset(buf, 0, 24);
  std::vector<Phase::Geometry::SceneQueryBatch *>::__init_with_size[abi:ne180100]<Phase::Geometry::SceneQueryBatch **,Phase::Geometry::SceneQueryBatch **>(buf, v211, (uint64_t)(v211 + 1), 1uLL);
  operator delete(v211);
  memset(v249, 0, sizeof(v249));
  std::vector<Phase::Geometry::SceneQueryBatch *>::__init_with_size[abi:ne180100]<Phase::Geometry::SceneQueryBatch **,Phase::Geometry::SceneQueryBatch **>(v249, (const void *)buf[0].i64[0], buf[0].i64[1], (buf[0].i64[1] - buf[0].i64[0]) >> 3);
  int v250 = 3;
  Phase::SpatialModeler::RoomSimulationImpl::RoomSimulationHandleIntersections(Phase::SpatialModeler::RoomSimulation &,Phase::SpatialModeler::Query &,Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState &)::$_0::operator()(a4, (uint64_t)v286, (uint64_t)v249);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v249);
  if (buf[0].i64[0])
  {
    buf[0].i64[1] = buf[0].i64[0];
    operator delete((void *)buf[0].i64[0]);
  }
LABEL_15:
  unsigned int v20 = v282;
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v20);
}

void sub_2220571C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
}

uint64_t Phase::SpatialModeler::RoomSimulationImpl::RoomSimulationFinishCommonPreProcess@<X0>(Phase::SpatialModeler::RoomSimulationImpl *this@<X0>, Phase::Geometry::SystemState **a2@<X1>, std::chrono::steady_clock::time_point *a3@<X2>, uint64_t a4@<X8>)
{
  Phase::SpatialModeler::RoomSimulationImpl::CheckClusterQueryInput((uint64_t)this, a2, (uint64_t)v13);
  if (v13[6] == 2)
  {
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::__move_constructor(a4, (uint64_t)v13);
  }
  else
  {
    unint64_t v9 = a3 + 16463;
    a3[16509].__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    Phase::SpatialModeler::RayTracerState::Results::CapERDetections((Phase::SpatialModeler::RayTracerState::Results *)&a3[16514]);
    Phase::SpatialModeler::RayTracerState::State::ScaleHistograms((Phase::SpatialModeler::RayTracerState::State *)&a3[14156], (float)LODWORD(a3[14102].__d_.__rep_));
    __int16 v10 = (Phase::SpatialModeler::RayTracerState *)&a3[14094];
    v9[1].__d_.__rep_ = v9->__d_.__rep_;
    v9[4].__d_.__rep_ = v9[3].__d_.__rep_;
    Phase::SpatialModeler::RayTracerState::CalculateRoomStats(v10, a2[8]);
    Phase::SpatialModeler::RoomSimulationLogging::logWhenExceedingTimeLimit(v10, (Phase::SpatialModeler::RoomSimulationImpl *)((char *)this + 51968), v11);
    *(_DWORD *)(a4 + 24) = 1;
  }
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v13);
}

void sub_222057384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *Phase::SpatialModeler::RayTracerState::Results::CapERDetections(Phase::SpatialModeler::RayTracerState::Results *this)
{
  uint64_t v3 = *(void **)this;
  __n128 result = (void *)((char *)this + 8);
  int8x8_t v2 = v3;
  if (v3 != result)
  {
    do
    {
      uint64_t v4 = v2[5];
      if (v4)
      {
        for (uint64_t i = *(float **)(v4 + 16); i; uint64_t i = *(float **)i)
        {
          float v6 = i[44];
          if (v6 > 10.0) {
            float v6 = 10.0;
          }
          i[44] = v6;
        }
      }
      uint64_t v7 = (void *)v2[1];
      if (v7)
      {
        do
        {
          unint64_t v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          unint64_t v8 = (void *)v2[2];
          BOOL v9 = *v8 == (void)v2;
          int8x8_t v2 = v8;
        }
        while (!v9);
      }
      int8x8_t v2 = v8;
    }
    while (v8 != result);
  }
  return result;
}

void Phase::SpatialModeler::RayTracerState::State::ScaleHistograms(Phase::SpatialModeler::RayTracerState::State *this, float a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v3 = (int *)((char *)this + 18520);
  unsigned int v4 = *((_DWORD *)this + 4630);
  unsigned int v5 = (float)((float)v4 - a2);
  float v6 = (float)v5 / (float)v4;
  if (v6 < 0.7)
  {
    uint64_t v7 = **(NSObject ***)(Phase::Logger::GetInstance(this) + 1184);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      int v8 = *v3;
      int v12 = 136316162;
      uint64_t v13 = "RayTracerState.hpp";
      __int16 v14 = 1024;
      int v15 = 205;
      __int16 v16 = 1024;
      int v17 = v8;
      __int16 v18 = 1024;
      unsigned int v19 = v5;
      __int16 v20 = 2048;
      double v21 = (float)(v6 * 100.0);
      _os_log_impl(&dword_221E5E000, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d Launched %u rays but only finished %u (%.0f%%)", (uint8_t *)&v12, 0x28u);
    }
  }
  BOOL v9 = (uint64_t *)*((void *)this + 2307);
  __int16 v10 = (uint64_t *)*((void *)this + 2308);
  while (v9 != v10)
  {
    uint64_t v11 = *v9++;
    Phase::SpatialModeler::DirectivityHistogram::operator*=((void *)v11, 1.0 / (float)((float)(*(float *)(v11 + 32) * (float)((v4 + v5) >> 1)) * 0.25));
  }
}

double Phase::SpatialModeler::RoomSimulationImpl::RoomSimulationFinishHandleMatchReverbTimes(Phase::SpatialModeler::RoomSimulationImpl *this, Phase::SpatialModeler::RayTracerState *a2, Phase::SpatialModeler::RayTracerState *a3, Phase::SpatialModeler::RayTracerState *a4, double result)
{
  if (!*((unsigned char *)a3 + 25041))
  {
    uint64_t v7 = (float *)((char *)a3 + 19508);
    if (this)
    {
      Phase::SpatialModeler::RayTracerState::UpdateLocalRT60Estimate(a2);
      float v9 = *v7;
      float v8 = v7[1];
      float v10 = *((float *)a3 + 116);
      float v11 = *((float *)a3 + 6);
      float v12 = *((float *)a3 + 7);
      Phase::SpatialModeler::calculateAbsorptionCorrectionToMatchReverbTime((BOOL)a2 + 19776, (uint64_t)a3 + 21040, (uint64_t)a3 + 336, (uint64_t)a3 + 20928, v8, v9, v10, v11, v12);
    }
    else
    {
      *((void *)a2 + 2617) = *((void *)a2 + 2616);
      *((void *)a3 + 2617) = *((void *)a3 + 2616);
      *((_DWORD *)a2 + 5291) = 0;
      *((_DWORD *)a3 + 5291) = 0;
      *((void *)a2 + 2679) = 0;
      *((_DWORD *)a2 + 5360) = 0;
      __n128 result = 0.0;
      *(_OWORD *)((char *)a2 + 21448) = 0u;
      *((void *)a3 + 2679) = 0;
      *((_DWORD *)a3 + 5360) = 0;
      *(_OWORD *)((char *)a3 + 21448) = 0u;
    }
  }
  return result;
}

uint64_t Phase::SpatialModeler::RoomSimulationImpl::RoomSimulationHandleIntersections(Phase::SpatialModeler::RoomSimulation &,Phase::SpatialModeler::Query &,Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState &)::$_0::operator()(Phase::Logger *a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(_DWORD *)(*(void *)(a2 + 8) + 32);
  uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance(a1);
  if (v6 == 2)
  {
    if (*((unsigned char *)Instance + 1192))
    {
      uint64_t v8 = Phase::Logger::GetInstance(Instance);
      os_signpost_id_t v9 = **(void **)a2;
      if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        float v10 = **(NSObject ***)(v8 + 1184);
        if (os_signpost_enabled(v10))
        {
          __int16 v16 = 0;
          float v11 = "Phase_RoomSimulation_EarlyReflectionsnHandleIntersections";
          float v12 = (uint8_t *)&v16;
LABEL_10:
          _os_signpost_emit_with_name_impl(&dword_221E5E000, v10, OS_SIGNPOST_INTERVAL_END, v9, v11, (const char *)&unk_222112ABB, v12, 2u);
        }
      }
    }
  }
  else if (*((unsigned char *)Instance + 1192))
  {
    uint64_t v13 = Phase::Logger::GetInstance(Instance);
    os_signpost_id_t v9 = **(void **)a2;
    if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      float v10 = **(NSObject ***)(v13 + 1184);
      if (os_signpost_enabled(v10))
      {
        __int16 v15 = 0;
        float v11 = "Phase_RoomSimulation_LateReverbHandleIntersections";
        float v12 = (uint8_t *)&v15;
        goto LABEL_10;
      }
    }
  }
  return std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)a1, a3);
}

float32_t Phase::Subbands<float>::operator*=(float32x4_t *a1, float32x4_t *a2)
{
  uint64_t v2 = a1[7].u32[3];
  if (v2)
  {
    if (v2 == 10)
    {
      float32x4_t v4 = vmulq_f32(*a1, *a2);
      float32x4_t v11 = vmulq_f32(a1[1], a2[1]);
      float32x4_t v12 = vmulq_f32(a1[2], a2[2]);
      *a1 = v4;
      a1[1] = v11;
      a1[2] = v12;
    }
    else if (v2 == 31)
    {
      float32x4_t v3 = vmulq_f32(a1[1], a2[1]);
      float32x4_t v4 = vmulq_f32(*a1, *a2);
      float32x4_t v5 = vmulq_f32(a1[3], a2[3]);
      float32x4_t v6 = vmulq_f32(a1[2], a2[2]);
      float32x4_t v7 = vmulq_f32(a1[5], a2[5]);
      float32x4_t v8 = vmulq_f32(a1[4], a2[4]);
      float32x4_t v9 = vmulq_f32(a1[6], a2[6]);
      float32x4_t v10 = vmulq_f32(a1[7], a2[7]);
      v10.i32[3] = HIDWORD(*(_OWORD *)&a1[7]);
      *a1 = v4;
      a1[1] = v3;
      a1[2] = v6;
      a1[3] = v5;
      a1[4] = v8;
      a1[5] = v7;
      a1[6] = v9;
      a1[7] = v10;
    }
    else
    {
      uint64_t v13 = (float *)a1;
      do
      {
        float v14 = a2->f32[0];
        a2 = (float32x4_t *)((char *)a2 + 4);
        v4.f32[0] = v14 * *v13;
        *v13++ = v4.f32[0];
        --v2;
      }
      while (v2);
    }
  }
  return v4.f32[0];
}

void Phase::SpatialModeler::RoomSimulationImpl::RoomSimulationHandleDiffuseRain(int **this@<X0>, Phase::SpatialModeler::RoomSimulation *a2@<X1>, Phase::SpatialModeler::Query *a3@<X2>, Phase::Logger *a4@<X8>)
{
  uint64_t v130 = *MEMORY[0x263EF8340];
  uint64_t Instance = Phase::Logger::GetInstance((Phase::Logger *)this);
  float32x4_t v10 = (Phase::Logger *)os_signpost_id_generate(**(os_log_t **)(Instance + 208));
  long long v118 = v10;
  int v11 = *((_DWORD *)this + 8);
  float32x4_t v12 = (Phase::Logger *)Phase::Logger::GetInstance(v10);
  if (v11 == 2)
  {
    if (*((unsigned char *)v12 + 1192))
    {
      uint64_t v13 = Phase::Logger::GetInstance(v12);
      if ((unint64_t)v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        float v14 = **(NSObject ***)(v13 + 1184);
        if (os_signpost_enabled(v14))
        {
          *(_WORD *)buf = 0;
          __int16 v15 = "Phase_RoomSimulation_EarlyReflectionsHandleDiffuseRain";
          __int16 v16 = "EarlyReflectionsHandleDiffuseRain";
LABEL_10:
          _os_signpost_emit_with_name_impl(&dword_221E5E000, v14, OS_SIGNPOST_INTERVAL_BEGIN, (os_signpost_id_t)v10, v15, v16, buf, 2u);
        }
      }
    }
  }
  else if (*((unsigned char *)v12 + 1192))
  {
    uint64_t v17 = Phase::Logger::GetInstance(v12);
    if ((unint64_t)v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      float v14 = **(NSObject ***)(v17 + 1184);
      if (os_signpost_enabled(v14))
      {
        *(_WORD *)buf = 0;
        __int16 v15 = "Phase_RoomSimulation_LateReverbHandleDiffuseRain";
        __int16 v16 = "LateReverbHandleDiffuseRain";
        goto LABEL_10;
      }
    }
  }
  v117[0] = &v118;
  v117[1] = this;
  uint64_t v18 = *((void *)a2 + 8);
  if (!v18)
  {
    v115[0] = 5;
    v115[1] = this + 9;
    int v116 = 2;
    Phase::SpatialModeler::RoomSimulationImpl::RoomSimulationHandleDiffuseRain(Phase::SpatialModeler::RoomSimulation &,Phase::SpatialModeler::Query &,Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState &)::$_0::operator()(a4, (uint64_t)v117, (uint64_t)v115);
    uint64_t v90 = v115;
    goto LABEL_73;
  }
  uint64_t v19 = *((void *)a2 + 11);
  if (!v19 || *(_DWORD *)v19 != 3)
  {
    v113[0] = 3;
    v113[1] = this + 9;
    int v114 = 2;
    Phase::SpatialModeler::RoomSimulationImpl::RoomSimulationHandleDiffuseRain(Phase::SpatialModeler::RoomSimulation &,Phase::SpatialModeler::Query &,Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState &)::$_0::operator()(a4, (uint64_t)v117, (uint64_t)v113);
    uint64_t v90 = v113;
LABEL_73:
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v90);
    return;
  }
  uint64_t v20 = *(void *)(v19 + 152);
  if (*(_DWORD *)(v18 + 136) <= v20
    || (uint64_t v21 = *(void *)(v18 + 120), *(_DWORD *)(v21 + 24 * v20 + 20) != HIDWORD(v20))
    || (uint64_t v22 = *(float **)(v21 + 24 * *(void *)(v19 + 152))) == 0
    || *(_DWORD *)v22 != 2)
  {
    v111[0] = 7;
    v111[1] = this + 9;
    int v112 = 2;
    Phase::SpatialModeler::RoomSimulationImpl::RoomSimulationHandleDiffuseRain(Phase::SpatialModeler::RoomSimulation &,Phase::SpatialModeler::Query &,Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState &)::$_0::operator()(a4, (uint64_t)v117, (uint64_t)v111);
    uint64_t v90 = v111;
    goto LABEL_73;
  }
  int64x2_t v94 = v22;
  uint64_t v23 = this[6];
  uint64_t v24 = (uint64_t *)((char *)a3 + 131680);
  float32x4_t __b = 0u;
  long long v105 = 0u;
  long long v106 = 0u;
  long long v107 = 0u;
  long long v108 = 0u;
  long long v109 = 0u;
  memset(v110, 0, 28);
  *(_DWORD *)&v110[28] = v23;
  if (v23) {
    memset_pattern16(&__b, &unk_2220E7DF0, 4 * (void)v23);
  }
  unint64_t v25 = *((unsigned int *)a3 + 32941);
  if (v25)
  {
    uint64_t v26 = 0;
    float v100 = (char *)a3 + 90224;
    while (1)
    {
      float32x4_t v27 = &v100[88 * v26];
      float v28 = (char *)a3 + 352 * *((int *)v27 + 14) + 112;
      float v29 = *(float *)v28;
      long long v98 = *(_OWORD *)(v28 + 4);
      *(_OWORD *)&uint8_t buf[4] = v98;
      *(void *)&buf[20] = *(void *)(v28 + 20);
      int v30 = *((_DWORD *)v28 + 7);
      *(float *)buf = v29;
      int v126 = v30;
      long long v127 = *((_OWORD *)v28 + 2);
      uint64_t v128 = *((void *)v28 + 6);
      uint64_t v31 = (Phase::Logger *)memcpy(v129, v28 + 56, 0x128uLL);
      int v34 = *((_DWORD *)v27 + 15);
      int v33 = (float *)(v27 + 60);
      int v32 = v34;
      if (*(v33 - 7) == 3.4028e38)
      {
        uint64_t v35 = *v24;
        uint64_t v36 = *v24 + 56 * v32;
        float v38 = *(float *)(v36 + 24);
        float v39 = *(float *)(v36 + 28);
        uint64_t v37 = v36 + 24;
        float v40 = sqrtf((float)((float)((float)(v29 - v38) * (float)(v29 - v38))+ (float)((float)(*(float *)&v98 - v39) * (float)(*(float *)&v98 - v39)))+ (float)((float)(*((float *)&v98 + 1) - *(float *)(v37 + 8))* (float)(*((float *)&v98 + 1) - *(float *)(v37 + 8))));
        if (v40 >= 0.000001) {
          break;
        }
      }
LABEL_65:
      if (++v26 >= v25) {
        goto LABEL_66;
      }
    }
    float v96 = (_OWORD *)v37;
    int v99 = v32;
    uint64_t v41 = this[6];
    if (v41)
    {
      float v42 = *(float *)&v100[88 * v26 + 64];
      p_b = &__b;
      float v44 = *(float *)&v129[6];
      float v45 = (float *)&v129[10];
      do
      {
        float v46 = *v45++;
        p_b->f32[0] = (float)(v42 * v46) / v44;
        p_b = (float32x4_t *)((char *)p_b + 4);
        uint64_t v41 = (int *)((char *)v41 - 1);
      }
      while (v41);
    }
    uint64_t v97 = v35;
    float v47 = *(float *)v129;
    __int32 v48 = (char *)a3 + 112752;
    float v49 = *((float *)a3 + 28304);
    float v50 = &v100[88 * v26];
    uint64_t v52 = *((void *)v50 + 9);
    uint64_t v51 = v50 + 72;
    float v53 = v49;
    float v54 = *(float *)v129;
    if (!v52)
    {
LABEL_48:
      long long v121 = v108;
      long long v122 = v109;
      long long v123 = *(_OWORD *)v110;
      long long v124 = *(_OWORD *)&v110[16];
      *(float32x4_t *)uint64_t v119 = __b;
      *(_OWORD *)&v119[16] = v105;
      *(_OWORD *)&v119[32] = v106;
      long long v120 = v107;
      unsigned int v74 = *((_DWORD *)v48 + 115);
      int v75 = *(_DWORD *)&v110[28];
      if (v74 < *(_DWORD *)&v110[28]) {
        int v75 = *((_DWORD *)v48 + 115);
      }
      if (v75)
      {
        unint64_t v76 = 0;
        float v77 = v40 + (float)(v53 * v54);
        do
        {
          *(float *)&v119[4 * v76] = *(float *)&v119[4 * v76] * expf(-(float)(*((float *)a3 + v76 + 28272) * v77));
          ++v76;
          if (v74 >= HIDWORD(v124)) {
            unint64_t v78 = HIDWORD(v124);
          }
          else {
            unint64_t v78 = v74;
          }
        }
        while (v76 < v78);
      }
      long long v108 = v121;
      long long v109 = v122;
      *(_OWORD *)unint64_t v110 = v123;
      *(_OWORD *)&v110[16] = v124;
      float32x4_t __b = *(float32x4_t *)v119;
      long long v105 = *(_OWORD *)&v119[16];
      float32x4_t v79 = *(float32x4_t *)&v119[32];
      long long v106 = *(_OWORD *)&v119[32];
      long long v107 = v120;
      int64x2_t v80 = (char *)a3 + 112752;
      if (*((unsigned char *)a3 + 112932))
      {
        float v81 = this[6492];
        *(_OWORD *)uint64_t v119 = *(_OWORD *)(v97 + 56 * v99 + 8);
        *(_OWORD *)&v119[16] = *v96;
        Phase::SpatialModeler::ApplyDirectivitySubbandGains((Phase::Logger *)&__b, v81, (float32x2_t *)v119, (float32x2_t *)buf);
      }
      else
      {
        uint64_t v82 = *(void *)(v97 + 56 * v99 + 40);
        if (!v82) {
          goto LABEL_61;
        }
        v103[0] = *(_OWORD *)(v97 + 56 * v99 + 8);
        v103[1] = *v96;
        Phase::SpatialModeler::applySourceDirectivity(&__b, v18, (float32x2_t *)v103, v82, (float32x2_t *)buf, (Phase::Logger *)v119);
        long long v108 = v121;
        long long v109 = v122;
        *(_OWORD *)unint64_t v110 = v123;
        *(_OWORD *)&v110[16] = v124;
        float32x4_t __b = *(float32x4_t *)v119;
        long long v105 = *(_OWORD *)&v119[16];
        float32x4_t v79 = *(float32x4_t *)&v119[32];
        long long v106 = *(_OWORD *)&v119[32];
        long long v107 = v120;
      }
      int64x2_t v80 = (char *)a3 + 112752;
LABEL_61:
      float v83 = (char *)a3 + 131680;
      if (v80[133])
      {
        uint64_t v84 = *((void *)a3 + 16940);
        if (v84)
        {
          Phase::SpatialModeler::applyListenerDirectivity(&__b, v18, v94, v84, (Phase::Logger *)v119, *(float *)&v129[1], *(float *)&v129[2]);
          long long v108 = v121;
          long long v109 = v122;
          *(_OWORD *)unint64_t v110 = v123;
          *(_OWORD *)&v110[16] = v124;
          float32x4_t __b = *(float32x4_t *)v119;
          long long v105 = *(_OWORD *)&v119[16];
          float32x4_t v79 = *(float32x4_t *)&v119[32];
          long long v106 = *(_OWORD *)&v119[32];
          long long v107 = v120;
          float v83 = (char *)a3 + 131680;
        }
      }
      *(float *)uint64_t v119 = *(float *)(*(void *)(*((void *)v83 + 3) + 8 * *(int *)v33) + 32) / *((float *)v83 + 1062);
      v79.f32[0] = *(float *)v119;
      Phase::Subbands<float>::operator*=(&__b, (float *)v119, v79);
      Phase::SpatialModeler::DirectivityHistogram::addEnergySphere(*(void *)(*((void *)v83 + 3) + 8 * *(int *)v33), (uint64_t)&__b, v47 + (float)(v40 / v49), *(float *)&v129[1], *(float *)&v129[2]);
      uint64_t v24 = (uint64_t *)((char *)a3 + 131680);
      unint64_t v25 = *((unsigned int *)a3 + 32941);
      goto LABEL_65;
    }
    BOOL v55 = &v100[88 * v26];
    uint64_t v56 = *((void *)v55 + 10);
    unint64_t v95 = (uint64_t *)(v55 + 80);
    if (v56)
    {
      if (*(_DWORD *)(v18 + 88) <= v56
        || (uint64_t v57 = *(void *)(v18 + 72), *(_DWORD *)(v57 + 24 * v56 + 20) != HIDWORD(v56))
        || (uint64_t v58 = *(void *)(v57 + 24 * v56)) == 0
        || *(_DWORD *)v58 != 1
        || (uint64_t v59 = *(void *)(*(void *)(v58 + 40) + 40 * *((void *)a3 + 14153))) == 0)
      {
        float v60 = **(NSObject ***)(Phase::Logger::GetInstance(v31) + 1184);
        uint64_t v31 = (Phase::Logger *)os_log_type_enabled(v60, OS_LOG_TYPE_ERROR);
        if (v31)
        {
          uint64_t v61 = *v95;
          *(_DWORD *)uint64_t v119 = 136315650;
          *(void *)&v119[4] = "RoomSimulationImpl.cpp";
          *(_WORD *)&v119[12] = 1024;
          *(_DWORD *)&v119[14] = 1116;
          *(_WORD *)&v119[18] = 2048;
          *(void *)&v119[20] = v61;
          _os_log_impl(&dword_221E5E000, v60, OS_LOG_TYPE_ERROR, "%25s:%-5d Trying to retrieve material with handle %llu returned nullptr!", v119, 0x1Cu);
        }
        uint64_t v59 = 0;
      }
      if (v59 == *v51) {
        goto LABEL_47;
      }
      uint64_t v93 = v59;
      int v62 = v51;
      BOOL v63 = *(unsigned char *)(v19 + 48) == 0;
      log = **(NSObject ***)(Phase::Logger::GetInstance(v31) + 1184);
      BOOL v64 = os_log_type_enabled(log, OS_LOG_TYPE_ERROR);
      if (v63)
      {
        uint64_t v51 = v62;
        if (v64)
        {
          uint64_t v72 = *v95;
          uint64_t v73 = *v62;
          *(_DWORD *)uint64_t v119 = 136316162;
          *(void *)&v119[4] = "RoomSimulationImpl.cpp";
          *(_WORD *)&v119[12] = 1024;
          *(_DWORD *)&v119[14] = 1131;
          *(_WORD *)&v119[18] = 2048;
          *(void *)&v119[20] = v72;
          *(_WORD *)&v119[28] = 2048;
          *(void *)&v119[30] = v73;
          *(_WORD *)&v119[38] = 2048;
          *(void *)&v119[40] = v93;
          uint64_t v67 = log;
          unint64_t v68 = "%25s:%-5d The material with handle %llu has changed during a sustain cluster query - %p != %p";
          goto LABEL_45;
        }
      }
      else
      {
        uint64_t v51 = v62;
        if (v64)
        {
          uint64_t v65 = *v95;
          uint64_t v66 = *v62;
          *(_DWORD *)uint64_t v119 = 136316162;
          *(void *)&v119[4] = "RoomSimulationImpl.cpp";
          *(_WORD *)&v119[12] = 1024;
          *(_DWORD *)&v119[14] = 1125;
          *(_WORD *)&v119[18] = 2048;
          *(void *)&v119[20] = v65;
          *(_WORD *)&v119[28] = 2048;
          *(void *)&v119[30] = v66;
          *(_WORD *)&v119[38] = 2048;
          *(void *)&v119[40] = v93;
          uint64_t v67 = log;
          unint64_t v68 = "%25s:%-5d The material with handle %llu has changed during an attack cluster query - %p != %p";
LABEL_45:
          uint32_t v71 = 48;
          goto LABEL_46;
        }
      }
    }
    else
    {
      uint64_t v69 = **(NSObject ***)(Phase::Logger::GetInstance(v31) + 1184);
      if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR))
      {
        uint64_t v70 = *v95;
        *(_DWORD *)uint64_t v119 = 136315650;
        *(void *)&v119[4] = "RoomSimulationImpl.cpp";
        *(_WORD *)&v119[12] = 1024;
        *(_DWORD *)&v119[14] = 1138;
        *(_WORD *)&v119[18] = 2048;
        *(void *)&v119[20] = v70;
        uint64_t v67 = v69;
        unint64_t v68 = "%25s:%-5d Material Handle is not set: %llu";
        uint32_t v71 = 28;
LABEL_46:
        _os_log_impl(&dword_221E5E000, v67, OS_LOG_TYPE_ERROR, v68, v119, v71);
      }
    }
LABEL_47:
    Phase::SpatialModeler::applyScatteringFrequencyWeighting(&__b, *v51 + 672, (uint64_t)v119);
    long long v108 = v121;
    long long v109 = v122;
    *(_OWORD *)unint64_t v110 = v123;
    *(_OWORD *)&v110[16] = v124;
    float32x4_t __b = *(float32x4_t *)v119;
    long long v105 = *(_OWORD *)&v119[16];
    long long v106 = *(_OWORD *)&v119[32];
    long long v107 = v120;
    float v54 = *(float *)v129;
    __int32 v48 = (char *)a3 + 112752;
    float v53 = *((float *)a3 + 28304);
    goto LABEL_48;
  }
LABEL_66:
  if ((*(uint64_t (**)(void))(**(void **)(*((void *)a3 + 14094) + 51952) + 16))(*(void *)(*((void *)a3 + 14094) + 51952)))
  {
    unsigned int v85 = (char *)a3 + 131680;
    unsigned int v86 = *((_DWORD *)a3 + 28204);
    int v87 = *((_DWORD *)a3 + 32942) % v86;
    unsigned int v88 = v86 - v87;
    if (v87) {
      unsigned int v89 = v88;
    }
    else {
      unsigned int v89 = 0;
    }
  }
  else
  {
    unsigned int v85 = (char *)a3 + 131680;
    unsigned int v89 = *((_DWORD *)a3 + 28204);
  }
  *((_DWORD *)v85 + 20) = v89;
  *((_DWORD *)a3 + 16) = *((_DWORD *)this + 15);
  *((void *)a3 + 11) = (char *)a3 + 112;
  *((_DWORD *)a3 + 24) = v89;
  *((_DWORD *)a3 + 25) = 352;
  *((void *)v85 + 766) = Phase::SpatialModeler::RoomSimulationImpl::RoomSimulationHandleIntersections;
  uint64_t v91 = operator new(8uLL);
  *uint64_t v91 = a3;
  memset(buf, 0, 24);
  std::vector<Phase::Geometry::SceneQueryBatch *>::__init_with_size[abi:ne180100]<Phase::Geometry::SceneQueryBatch **,Phase::Geometry::SceneQueryBatch **>(buf, v91, (uint64_t)(v91 + 1), 1uLL);
  operator delete(v91);
  memset(v101, 0, sizeof(v101));
  std::vector<Phase::Geometry::SceneQueryBatch *>::__init_with_size[abi:ne180100]<Phase::Geometry::SceneQueryBatch **,Phase::Geometry::SceneQueryBatch **>(v101, *(const void **)buf, *(uint64_t *)&buf[8], (uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 3);
  int v102 = 3;
  Phase::SpatialModeler::RoomSimulationImpl::RoomSimulationHandleDiffuseRain(Phase::SpatialModeler::RoomSimulation &,Phase::SpatialModeler::Query &,Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState &)::$_0::operator()(a4, (uint64_t)v117, (uint64_t)v101);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v101);
  if (*(void *)buf)
  {
    *(void *)&_OWORD buf[8] = *(void *)buf;
    operator delete(*(void **)buf);
  }
}

void sub_2220582A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&a33);
  int v34 = (void *)STACK[0x280];
  if (STACK[0x280])
  {
    STACK[0x288] = (unint64_t)v34;
    operator delete(v34);
  }
  _Unwind_Resume(a1);
}

uint64_t Phase::SpatialModeler::RoomSimulationImpl::RoomSimulationHandleDiffuseRain(Phase::SpatialModeler::RoomSimulation &,Phase::SpatialModeler::Query &,Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState &)::$_0::operator()(Phase::Logger *a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(_DWORD *)(*(void *)(a2 + 8) + 32);
  uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance(a1);
  if (v6 == 2)
  {
    if (*((unsigned char *)Instance + 1192))
    {
      uint64_t v8 = Phase::Logger::GetInstance(Instance);
      os_signpost_id_t v9 = **(void **)a2;
      if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        float32x4_t v10 = **(NSObject ***)(v8 + 1184);
        if (os_signpost_enabled(v10))
        {
          __int16 v16 = 0;
          int v11 = "Phase_RoomSimulation_EarlyReflectionsHandleDiffuseRain";
          float32x4_t v12 = (uint8_t *)&v16;
LABEL_10:
          _os_signpost_emit_with_name_impl(&dword_221E5E000, v10, OS_SIGNPOST_INTERVAL_END, v9, v11, (const char *)&unk_222112ABB, v12, 2u);
        }
      }
    }
  }
  else if (*((unsigned char *)Instance + 1192))
  {
    uint64_t v13 = Phase::Logger::GetInstance(Instance);
    os_signpost_id_t v9 = **(void **)a2;
    if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      float32x4_t v10 = **(NSObject ***)(v13 + 1184);
      if (os_signpost_enabled(v10))
      {
        __int16 v15 = 0;
        int v11 = "Phase_RoomSimulation_LateReverbHandleDiffuseRain";
        float32x4_t v12 = (uint8_t *)&v15;
        goto LABEL_10;
      }
    }
  }
  return std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)a1, a3);
}

float32_t Phase::Subbands<float>::operator*=(float32x4_t *a1, float *a2, float32x4_t a3)
{
  uint64_t v3 = a1[7].u32[3];
  if (v3)
  {
    float v4 = *a2;
    if (v3 == 10)
    {
      float32x4_t v12 = vmulq_n_f32(*a1, v4);
      float32x4_t v13 = vmulq_n_f32(a1[1], v4);
      a3 = vmulq_n_f32(a1[2], v4);
      *a1 = v12;
      a1[1] = v13;
      a1[2] = a3;
    }
    else if (v3 == 31)
    {
      float32x4_t v5 = vmulq_n_f32(a1[1], v4);
      float32x4_t v6 = vmulq_n_f32(*a1, v4);
      float32x4_t v7 = vmulq_n_f32(a1[3], v4);
      float32x4_t v8 = vmulq_n_f32(a1[2], v4);
      float32x4_t v9 = vmulq_n_f32(a1[5], v4);
      float32x4_t v10 = vmulq_n_f32(a1[4], v4);
      float32x4_t v11 = vmulq_n_f32(a1[6], v4);
      a3 = vmulq_n_f32(a1[7], v4);
      a3.i32[3] = HIDWORD(*(_OWORD *)&a1[7]);
      *a1 = v6;
      a1[1] = v5;
      a1[2] = v8;
      a1[3] = v7;
      a1[4] = v10;
      a1[5] = v9;
      a1[6] = v11;
      a1[7] = a3;
    }
    else
    {
      float v14 = (float *)a1;
      do
      {
        a3.f32[0] = *a2 * *v14;
        *v14++ = a3.f32[0];
        --v3;
      }
      while (v3);
    }
  }
  return a3.f32[0];
}

void Phase::SpatialModeler::RoomSimulationConfig::ReadDefaultsWriteFlags(Phase::SpatialModeler::RoomSimulationConfig *this)
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance(this);
  *((unsigned char *)this + 123) = *((_DWORD *)Instance + 305) == 1;
  uint64_t v3 = (Phase::Logger *)Phase::Logger::GetInstance(Instance);
  *((unsigned char *)this + 132) = *((unsigned char *)v3 + 1497);
  float v4 = (Phase::Logger *)Phase::Logger::GetInstance(v3);
  float32x4_t v5 = (Phase::Logger *)Phase::Logger::GetInstance(v4);
  *((_DWORD *)this + 34) = *((_DWORD *)v5 + 375);
  float32x4_t v6 = **(NSObject ***)(Phase::Logger::GetInstance(v5) + 1184);
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  if (v7)
  {
    double v8 = *((float *)this + 34);
    int v36 = 136315650;
    uint64_t v37 = "RoomSimulationInitData.cpp";
    __int16 v38 = 1024;
    int v39 = 39;
    __int16 v40 = 2048;
    *(double *)uint64_t v41 = v8;
    _os_log_impl(&dword_221E5E000, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d RoomSimulationConfig::ReadDefaultsWriteFlags: mFixedERLRDirectivitySphereRadius %f", (uint8_t *)&v36, 0x1Cu);
  }
  float32x4_t v9 = (Phase::Logger *)Phase::Logger::GetInstance((Phase::Logger *)v7);
  float32x4_t v10 = (Phase::Logger *)Phase::Logger::GetInstance(v9);
  *((_DWORD *)this + 35) = *((_DWORD *)v10 + 376);
  float32x4_t v11 = **(NSObject ***)(Phase::Logger::GetInstance(v10) + 1184);
  BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
  if (v12)
  {
    double v13 = *((float *)this + 35);
    int v36 = 136315650;
    uint64_t v37 = "RoomSimulationInitData.cpp";
    __int16 v38 = 1024;
    int v39 = 47;
    __int16 v40 = 2048;
    *(double *)uint64_t v41 = v13;
    _os_log_impl(&dword_221E5E000, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d RoomSimulationConfig::ReadDefaultsWriteFlags: mFixedERLRDirectivityOpeningAngle %f", (uint8_t *)&v36, 0x1Cu);
  }
  float v14 = (Phase::Logger *)Phase::Logger::GetInstance((Phase::Logger *)v12);
  *((unsigned char *)this + 87) = *((unsigned char *)v14 + 1508);
  __int16 v15 = (Phase::Logger *)Phase::Logger::GetInstance(v14);
  *((unsigned char *)this + 144) = *((unsigned char *)v15 + 1509);
  __int16 v16 = (Phase::Logger *)Phase::Logger::GetInstance(v15);
  *((unsigned char *)this + 120) = *((unsigned char *)v16 + 1525);
  uint64_t v17 = (Phase::Logger *)Phase::Logger::GetInstance(v16);
  *((unsigned char *)this + 121) = *((unsigned char *)v17 + 1526);
  uint64_t v18 = (Phase::Logger *)Phase::Logger::GetInstance(v17);
  *((unsigned char *)this + 145) = *((unsigned char *)v18 + 1524);
  uint64_t v19 = (Phase::Logger *)Phase::Logger::GetInstance(v18);
  *((unsigned char *)this + 84) = *((unsigned char *)v19 + 1527);
  uint64_t v20 = (Phase::Logger *)Phase::Logger::GetInstance(v19);
  *((unsigned char *)this + 146) = *((unsigned char *)v20 + 1528);
  uint64_t v21 = (Phase::Logger *)Phase::Logger::GetInstance(v20);
  *((unsigned char *)this + 147) = *((_DWORD *)v21 + 302) != 0;
  uint64_t v22 = (Phase::Logger *)Phase::Logger::GetInstance(v21);
  *((unsigned char *)this + 108) = *((_DWORD *)v22 + 304) == 0;
  uint64_t v23 = (Phase::Logger *)Phase::Logger::GetInstance(v22);
  int v24 = *((_DWORD *)v23 + 306) & ~(*((int *)v23 + 306) >> 31);
  *((_DWORD *)this + 31) = ((0x10000 - v24) & ((0x10000 - v24) >> 31)) + v24;
  unint64_t v25 = **(NSObject ***)(Phase::Logger::GetInstance(v23) + 1184);
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    int v26 = *((unsigned __int8 *)this + 123);
    int v27 = *((unsigned __int8 *)this + 84);
    int v28 = *((unsigned __int8 *)this + 132);
    int v29 = *((unsigned __int8 *)this + 87);
    int v30 = *((unsigned __int8 *)this + 144);
    int v31 = *((unsigned __int8 *)this + 120);
    int v32 = *((unsigned __int8 *)this + 121);
    int v33 = *((unsigned __int8 *)this + 145);
    int v34 = *((unsigned __int8 *)this + 146);
    int v35 = *((unsigned __int8 *)this + 147);
    int v36 = 136317954;
    uint64_t v37 = "RoomSimulationInitData.cpp";
    __int16 v38 = 1024;
    int v39 = 82;
    __int16 v40 = 1024;
    *(_DWORD *)uint64_t v41 = v26;
    *(_WORD *)&v41[4] = 1024;
    *(_DWORD *)&v41[6] = v27;
    __int16 v42 = 1024;
    int v43 = v28;
    __int16 v44 = 1024;
    int v45 = v29;
    __int16 v46 = 1024;
    int v47 = v30;
    __int16 v48 = 1024;
    int v49 = v31;
    __int16 v50 = 1024;
    int v51 = v32;
    __int16 v52 = 1024;
    int v53 = v33;
    __int16 v54 = 1024;
    int v55 = v34;
    __int16 v56 = 1024;
    int v57 = v35;
    _os_log_impl(&dword_221E5E000, v25, OS_LOG_TYPE_DEFAULT, "%25s:%-5d RoomSimulationConfig::ReadDefaultsWriteFlags:\nmKeepRendererAlive %d\nmForceLateResponseBuilding %d\nmFixedERLRDirectivity %d\nmDirectSoundDelayLR %d\nmIncludeSourcesOutsideInSharedReverb %d\nmUseSceneObserver %d\nmUseDynamicAggregation %d\nmEnableListenerOutsideMitigation %d\nmEnableDeterministicRayTracerMode %d\nmSingleTraceDisabled %d\n", (uint8_t *)&v36, 0x4Eu);
  }
}

float Phase::SpatialModeler::RoomSimulationLogging::logInvalidIntersections(Phase::SpatialModeler::RoomSimulationLogging *this, const Phase::SpatialModeler::RayTracerState *a2)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t v2 = (unsigned int *)((char *)this + 19328);
  unsigned int v3 = vaddvq_s32(*(int32x4_t *)((char *)this + 19340)) + *((_DWORD *)this + 4839);
  float result = *((float *)this + 4878);
  if (result > 0.0 && v3 >= 3)
  {
    float32x4_t v6 = **(NSObject ***)(Phase::Logger::GetInstance(this) + 1184);
    BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    if (v7)
    {
      unsigned int v8 = v2[2];
      float v9 = (float)v8 / (float)*v2;
      int v25 = 136315906;
      int v26 = "RoomSimulationLoggingFunctions.cpp";
      __int16 v27 = 1024;
      int v28 = 34;
      __int16 v29 = 1024;
      unsigned int v30 = v8;
      __int16 v31 = 2048;
      double v32 = (float)(v9 * 100.0);
      _os_log_impl(&dword_221E5E000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d Received %d invalid intersections, %.1f%% of total.\n", (uint8_t *)&v25, 0x22u);
    }
    if (v2[3])
    {
      float32x4_t v10 = **(NSObject ***)(Phase::Logger::GetInstance((Phase::Logger *)v7) + 1184);
      BOOL v7 = os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
      if (v7)
      {
        unsigned int v11 = v2[3];
        float v12 = (float)v11 / (float)*v2;
        int v25 = 136315906;
        int v26 = "RoomSimulationLoggingFunctions.cpp";
        __int16 v27 = 1024;
        int v28 = 41;
        __int16 v29 = 1024;
        unsigned int v30 = v11;
        __int16 v31 = 2048;
        double v32 = (float)(v12 * 100.0);
        _os_log_impl(&dword_221E5E000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d     - %d with positive intersection (mT < FLTMAX), but null-normal (0,0,0), %.1f%% of total.\n", (uint8_t *)&v25, 0x22u);
      }
    }
    if (v2[4])
    {
      double v13 = **(NSObject ***)(Phase::Logger::GetInstance((Phase::Logger *)v7) + 1184);
      BOOL v7 = os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
      if (v7)
      {
        unsigned int v14 = v2[4];
        float v15 = (float)v14 / (float)*v2;
        int v25 = 136315906;
        int v26 = "RoomSimulationLoggingFunctions.cpp";
        __int16 v27 = 1024;
        int v28 = 48;
        __int16 v29 = 1024;
        unsigned int v30 = v14;
        __int16 v31 = 2048;
        double v32 = (float)(v15 * 100.0);
        _os_log_impl(&dword_221E5E000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d     - %d with negative intersection (mT == FLTMAX), and null-normal (0,0,0), %.1f%% of total.\n", (uint8_t *)&v25, 0x22u);
      }
    }
    if (v2[5])
    {
      __int16 v16 = **(NSObject ***)(Phase::Logger::GetInstance((Phase::Logger *)v7) + 1184);
      BOOL v7 = os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
      if (v7)
      {
        unsigned int v17 = v2[5];
        float v18 = (float)v17 / (float)*v2;
        int v25 = 136315906;
        int v26 = "RoomSimulationLoggingFunctions.cpp";
        __int16 v27 = 1024;
        int v28 = 55;
        __int16 v29 = 1024;
        unsigned int v30 = v17;
        __int16 v31 = 2048;
        double v32 = (float)(v18 * 100.0);
        _os_log_impl(&dword_221E5E000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d     - %d with a self-intersection (mT == 0), %.1f%% of total.\n", (uint8_t *)&v25, 0x22u);
      }
    }
    if (v2[6])
    {
      uint64_t v19 = **(NSObject ***)(Phase::Logger::GetInstance((Phase::Logger *)v7) + 1184);
      BOOL v7 = os_log_type_enabled(v19, OS_LOG_TYPE_ERROR);
      if (v7)
      {
        unsigned int v20 = v2[6];
        float v21 = (float)v20 / (float)*v2;
        int v25 = 136315906;
        int v26 = "RoomSimulationLoggingFunctions.cpp";
        __int16 v27 = 1024;
        int v28 = 62;
        __int16 v29 = 1024;
        unsigned int v30 = v20;
        __int16 v31 = 2048;
        double v32 = (float)(v21 * 100.0);
        _os_log_impl(&dword_221E5E000, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d     - %d with mT == 0, but not self-intersecting (origin away from boundary), %.1f%% of total.\n", (uint8_t *)&v25, 0x22u);
      }
    }
    if (v2[7])
    {
      uint64_t v22 = **(NSObject ***)(Phase::Logger::GetInstance((Phase::Logger *)v7) + 1184);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        unsigned int v23 = v2[7];
        float v24 = (float)v23 / (float)*v2;
        int v25 = 136315906;
        int v26 = "RoomSimulationLoggingFunctions.cpp";
        __int16 v27 = 1024;
        int v28 = 69;
        __int16 v29 = 1024;
        unsigned int v30 = v23;
        __int16 v31 = 2048;
        double v32 = (float)(v24 * 100.0);
        _os_log_impl(&dword_221E5E000, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d     - %d with no intersection (mT == FLTMAX), %.1f%% of total.\n", (uint8_t *)&v25, 0x22u);
      }
    }
  }
  return result;
}

uint64_t Phase::SpatialModeler::RoomSimulationLogging::logInQuerySources(Phase::Logger *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = Phase::Logger::GetInstance(a1);
  if ((*(unsigned char *)(*(void *)(result + 1184) + 8) & 4) != 0)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v24);
    std::string::basic_string[abi:ne180100]<0>(v22, "logInQuerySources");
    std::string::basic_string[abi:ne180100]<0>(__p, "source handles in inQuery:");
    if ((v23 & 0x80u) == 0) {
      BOOL v7 = v22;
    }
    else {
      BOOL v7 = (void **)v22[0];
    }
    if ((v23 & 0x80u) == 0) {
      uint64_t v8 = v23;
    }
    else {
      uint64_t v8 = (uint64_t)v22[1];
    }
    float v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v7, v8);
    float32x4_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" from ", 6);
    unsigned int v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, a2, a3);
    float v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", ", 2);
    if ((v21 & 0x80u) == 0) {
      double v13 = __p;
    }
    else {
      double v13 = (void **)__p[0];
    }
    if ((v21 & 0x80u) == 0) {
      uint64_t v14 = v21;
    }
    else {
      uint64_t v14 = (uint64_t)__p[1];
    }
    float v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
    std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(void *)(*v15 - 24)));
    __int16 v16 = std::locale::use_facet(&v28, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
    std::locale::~locale(&v28);
    std::ostream::put();
    std::ostream::flush();
    if (*((void *)a1 + 5))
    {
      uint64_t v17 = *(void *)a1;
      do
      {
        float v18 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"\n", 1);
        v17 += 304;
      }
      while (v17 != *(void *)a1 + 304 * *((void *)a1 + 5));
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
    if ((char)v23 < 0) {
      operator delete(v22[0]);
    }
    v24[0] = *MEMORY[0x263F8C2B8];
    uint64_t v19 = *(void *)(MEMORY[0x263F8C2B8] + 72);
    *(void *)((char *)v24 + *(void *)(v24[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
    v25[0] = v19;
    v25[1] = MEMORY[0x263F8C318] + 16;
    if (v26 < 0) {
      operator delete((void *)v25[9]);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    return MEMORY[0x223C937D0](&v27);
  }
  return result;
}

void sub_222058F28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t Phase::SpatialModeler::RoomSimulationLogging::logRayTracerStateStatus(Phase::Logger *a1, uint64_t a2, uint64_t a3)
{
  Phase::SpatialModeler::RoomSimulationLogging::logState(a1, a2, a3);
  Phase::SpatialModeler::RoomSimulationLogging::logSourceListenerResults(a1, a2, a3);
  Phase::SpatialModeler::RoomSimulationLogging::logERClusterResults(a1, a2, a3);

  return Phase::SpatialModeler::RoomSimulationLogging::logLRClusterResults(a1, a2, a3);
}

uint64_t Phase::SpatialModeler::RoomSimulationLogging::logState(Phase::Logger *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = Phase::Logger::GetInstance(a1);
  if ((*(unsigned char *)(*(void *)(result + 1184) + 8) & 4) != 0)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v25);
    std::string::basic_string[abi:ne180100]<0>(v23, "logState");
    std::string::basic_string[abi:ne180100]<0>(__p, "source handles in mState:");
    if ((v24 & 0x80u) == 0) {
      BOOL v7 = v23;
    }
    else {
      BOOL v7 = (void **)v23[0];
    }
    if ((v24 & 0x80u) == 0) {
      uint64_t v8 = v24;
    }
    else {
      uint64_t v8 = (uint64_t)v23[1];
    }
    float v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v7, v8);
    float32x4_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" from ", 6);
    unsigned int v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, a2, a3);
    float v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", ", 2);
    if ((v22 & 0x80u) == 0) {
      double v13 = __p;
    }
    else {
      double v13 = (void **)__p[0];
    }
    if ((v22 & 0x80u) == 0) {
      uint64_t v14 = v22;
    }
    else {
      uint64_t v14 = (uint64_t)__p[1];
    }
    float v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
    std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(void *)(*v15 - 24)));
    __int16 v16 = std::locale::use_facet(&v29, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
    std::locale::~locale(&v29);
    std::ostream::put();
    std::ostream::flush();
    if (*((void *)a1 + 2367) != *((void *)a1 + 2366))
    {
      unint64_t v17 = 0;
      uint64_t v18 = 48;
      do
      {
        uint64_t v19 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"\n", 1);
        ++v17;
        v18 += 56;
      }
      while (v17 < 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)a1 + 2367) - *((void *)a1 + 2366)) >> 3));
    }
    if ((char)v22 < 0) {
      operator delete(__p[0]);
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
    v25[0] = *MEMORY[0x263F8C2B8];
    uint64_t v20 = *(void *)(MEMORY[0x263F8C2B8] + 72);
    *(void *)((char *)v25 + *(void *)(v25[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
    v26[0] = v20;
    v26[1] = MEMORY[0x263F8C318] + 16;
    if (v27 < 0) {
      operator delete((void *)v26[9]);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    return MEMORY[0x223C937D0](&v28);
  }
  return result;
}

void sub_2220592FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t Phase::SpatialModeler::RoomSimulationLogging::logSourceListenerResults(Phase::Logger *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = Phase::Logger::GetInstance(a1);
  if ((*(unsigned char *)(*(void *)(result + 1184) + 8) & 4) != 0)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v27);
    std::string::basic_string[abi:ne180100]<0>(v25, "logSourceListenerResults");
    std::string::basic_string[abi:ne180100]<0>(__p, "source handles in results:");
    if ((v26 & 0x80u) == 0) {
      BOOL v7 = v25;
    }
    else {
      BOOL v7 = (void **)v25[0];
    }
    if ((v26 & 0x80u) == 0) {
      uint64_t v8 = v26;
    }
    else {
      uint64_t v8 = (uint64_t)v25[1];
    }
    float v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v7, v8);
    float32x4_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" from ", 6);
    unsigned int v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, a2, a3);
    float v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", ", 2);
    if ((v24 & 0x80u) == 0) {
      double v13 = __p;
    }
    else {
      double v13 = (void **)__p[0];
    }
    if ((v24 & 0x80u) == 0) {
      uint64_t v14 = v24;
    }
    else {
      uint64_t v14 = (uint64_t)__p[1];
    }
    float v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
    std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(void *)(*v15 - 24)));
    __int16 v16 = std::locale::use_facet(&v31, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
    std::locale::~locale(&v31);
    std::ostream::put();
    std::ostream::flush();
    unint64_t v17 = (void *)*((void *)a1 + 2420);
    if (v17 != (void *)((char *)a1 + 19368))
    {
      do
      {
        uint64_t v18 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"\n", 1);
        uint64_t v19 = (void *)v17[1];
        if (v19)
        {
          do
          {
            uint64_t v20 = v19;
            uint64_t v19 = (void *)*v19;
          }
          while (v19);
        }
        else
        {
          do
          {
            uint64_t v20 = (void *)v17[2];
            BOOL v21 = *v20 == (void)v17;
            unint64_t v17 = v20;
          }
          while (!v21);
        }
        unint64_t v17 = v20;
      }
      while (v20 != (void *)((char *)a1 + 19368));
    }
    if ((char)v24 < 0) {
      operator delete(__p[0]);
    }
    if ((char)v26 < 0) {
      operator delete(v25[0]);
    }
    v27[0] = *MEMORY[0x263F8C2B8];
    uint64_t v22 = *(void *)(MEMORY[0x263F8C2B8] + 72);
    *(void *)((char *)v27 + *(void *)(v27[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
    v28[0] = v22;
    v28[1] = MEMORY[0x263F8C318] + 16;
    if (v29 < 0) {
      operator delete((void *)v28[9]);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    return MEMORY[0x223C937D0](&v30);
  }
  return result;
}

void sub_222059658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t Phase::SpatialModeler::RoomSimulationLogging::logERClusterResults(Phase::Logger *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = Phase::Logger::GetInstance(a1);
  if ((*(unsigned char *)(*(void *)(result + 1184) + 8) & 4) != 0)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v28);
    std::string::basic_string[abi:ne180100]<0>(__p, "logERClusterResults");
    if ((v27 & 0x80u) == 0) {
      BOOL v7 = __p;
    }
    else {
      BOOL v7 = (void **)__p[0];
    }
    if ((v27 & 0x80u) == 0) {
      uint64_t v8 = v27;
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    float v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)v7, v8);
    float32x4_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" from ", 6);
    unsigned int v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, a2, a3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", looping over ", 15);
    float v12 = (void *)std::ostream::operator<<();
    double v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" in order:", 10);
    std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(void *)(*v13 - 24)));
    uint64_t v14 = std::locale::use_facet(&v32, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
    std::locale::~locale(&v32);
    std::ostream::put();
    std::ostream::flush();
    float v15 = (void *)*((void *)a1 + 2425);
    if (v15)
    {
      uint64_t v16 = 0;
      unint64_t v17 = (std::locale::id *)MEMORY[0x263F8C108];
      do
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Cluster ", 8);
        uint64_t v18 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" / ", 3);
        uint64_t v19 = (void *)std::ostream::operator<<();
        uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" has handles:", 13);
        std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(void *)(*v20 - 24)));
        BOOL v21 = std::locale::use_facet(&v32, v17);
        ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
        std::locale::~locale(&v32);
        std::ostream::put();
        std::ostream::flush();
        uint64_t v22 = v15 + 5;
        while (1)
        {
          uint64_t v22 = (void *)*v22;
          if (!v22) {
            break;
          }
          unsigned __int8 v23 = (void *)std::ostream::operator<<();
          std::ios_base::getloc((const std::ios_base *)((char *)v23 + *(void *)(*v23 - 24)));
          unsigned __int8 v24 = std::locale::use_facet(&v32, v17);
          ((void (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
          std::locale::~locale(&v32);
          std::ostream::put();
          std::ostream::flush();
        }
        ++v16;
        float v15 = (void *)*v15;
      }
      while (v15);
    }
    if ((char)v27 < 0) {
      operator delete(__p[0]);
    }
    v28[0] = *MEMORY[0x263F8C2B8];
    uint64_t v25 = *(void *)(MEMORY[0x263F8C2B8] + 72);
    *(void *)((char *)v28 + *(void *)(v28[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
    v29[0] = v25;
    v29[1] = MEMORY[0x263F8C318] + 16;
    if (v30 < 0) {
      operator delete((void *)v29[9]);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    return MEMORY[0x223C937D0](&v31);
  }
  return result;
}

void sub_222059AA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

uint64_t Phase::SpatialModeler::RoomSimulationLogging::logLRClusterResults(Phase::Logger *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = Phase::Logger::GetInstance(a1);
  if ((*(unsigned char *)(*(void *)(result + 1184) + 8) & 4) != 0)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v28);
    std::string::basic_string[abi:ne180100]<0>(__p, "logLRClusterResults");
    if ((v27 & 0x80u) == 0) {
      BOOL v7 = __p;
    }
    else {
      BOOL v7 = (void **)__p[0];
    }
    if ((v27 & 0x80u) == 0) {
      uint64_t v8 = v27;
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    float v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)v7, v8);
    float32x4_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" from ", 6);
    unsigned int v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, a2, a3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", looping over ", 15);
    float v12 = (void *)std::ostream::operator<<();
    double v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" in order:", 10);
    std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(void *)(*v13 - 24)));
    uint64_t v14 = std::locale::use_facet(&v32, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
    std::locale::~locale(&v32);
    std::ostream::put();
    std::ostream::flush();
    float v15 = (void *)*((void *)a1 + 2430);
    if (v15)
    {
      uint64_t v16 = 0;
      unint64_t v17 = (std::locale::id *)MEMORY[0x263F8C108];
      do
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Cluster ", 8);
        uint64_t v18 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" / ", 3);
        uint64_t v19 = (void *)std::ostream::operator<<();
        uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" has handles:", 13);
        std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(void *)(*v20 - 24)));
        BOOL v21 = std::locale::use_facet(&v32, v17);
        ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
        std::locale::~locale(&v32);
        std::ostream::put();
        std::ostream::flush();
        uint64_t v22 = v15 + 5;
        while (1)
        {
          uint64_t v22 = (void *)*v22;
          if (!v22) {
            break;
          }
          unsigned __int8 v23 = (void *)std::ostream::operator<<();
          std::ios_base::getloc((const std::ios_base *)((char *)v23 + *(void *)(*v23 - 24)));
          unsigned __int8 v24 = std::locale::use_facet(&v32, v17);
          ((void (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
          std::locale::~locale(&v32);
          std::ostream::put();
          std::ostream::flush();
        }
        ++v16;
        float v15 = (void *)*v15;
      }
      while (v15);
    }
    if ((char)v27 < 0) {
      operator delete(__p[0]);
    }
    v28[0] = *MEMORY[0x263F8C2B8];
    uint64_t v25 = *(void *)(MEMORY[0x263F8C2B8] + 72);
    *(void *)((char *)v28 + *(void *)(v28[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
    v29[0] = v25;
    v29[1] = MEMORY[0x263F8C318] + 16;
    if (v30 < 0) {
      operator delete((void *)v29[9]);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    return MEMORY[0x223C937D0](&v31);
  }
  return result;
}

void sub_222059EEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

uint64_t Phase::SpatialModeler::RoomSimulationLogging::MakeInfoString(uint64_t a1, int a2)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v6);
  *(void *)((char *)&v6[2] + *(void *)(v6[0] - 24)) = 2;
  *(_DWORD *)((char *)&v7[1] + *(void *)(v7[0] - 24)) = *(_DWORD *)((unsigned char *)&v7[1] + *(void *)(v7[0] - 24)) & 0xFFFFFEFB | 4;
  if (a2 == 3)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Late Reverb Simulation", 22);
  }
  else if (a2 == 2)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Early Reflections Simulation", 28);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" @ ", 3);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Hz x ", 5);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"ms", 2);
  std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(void *)(v7[0] - 24)));
  unsigned int v3 = std::locale::use_facet(&v10, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 10);
  std::locale::~locale(&v10);
  std::ostream::put();
  std::ostream::flush();
  std::stringbuf::str();
  v6[0] = *MEMORY[0x263F8C2B8];
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v6 + *(void *)(v6[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v7[0] = v4;
  v7[1] = MEMORY[0x263F8C318] + 16;
  if (v8 < 0) {
    operator delete((void *)v7[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x223C937D0](&v9);
}

void sub_22205A220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::locale::~locale((std::locale *)(v9 - 72));
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t Phase::SpatialModeler::RoomSimulationLogging::CheckLRClusterResultAndSourceListenerResultCoherence(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = Phase::Logger::GetInstance((Phase::Logger *)a1);
  if ((*(unsigned char *)(*(void *)(result + 1184) + 8) & 4) != 0)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v32);
    std::string::basic_string[abi:ne180100]<0>(__p, "CheckLRClusterResultAndSourceListenerResultCoherence");
    if ((v31 & 0x80u) == 0) {
      BOOL v7 = __p;
    }
    else {
      BOOL v7 = (void **)__p[0];
    }
    if ((v31 & 0x80u) == 0) {
      uint64_t v8 = v31;
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)v7, v8);
    std::locale v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" from ", 6);
    unsigned int v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, a2, a3);
    std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
    float v12 = std::locale::use_facet(&v36, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
    std::locale::~locale(&v36);
    std::ostream::put();
    std::ostream::flush();
    double v13 = (void *)a1[2420];
    uint64_t v14 = a1 + 2421;
    if (v13 != a1 + 2421)
    {
      do
      {
        v36.__locale_ = (std::locale::__imp *)v13[4];
        float v15 = (void *)a1[2430];
        if (!v15) {
          goto LABEL_27;
        }
        char v16 = 0;
        do
        {
          for (uint64_t i = (void *)v15[5]; i; uint64_t i = (void *)*i)
          {
            unint64_t v18 = i[2];
            uint64_t v19 = (void *)*v14;
            if (*v14)
            {
              uint64_t v20 = a1 + 2421;
              do
              {
                unint64_t v21 = v19[4];
                BOOL v22 = v21 >= v18;
                if (v21 >= v18) {
                  unsigned __int8 v23 = v19;
                }
                else {
                  unsigned __int8 v23 = v19 + 1;
                }
                if (v22) {
                  uint64_t v20 = v19;
                }
                uint64_t v19 = (void *)*v23;
              }
              while (*v23);
              if (v20 != v14 && v18 >= v20[4]) {
                continue;
              }
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"cluster source hash ", 20);
            unsigned __int8 v24 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" not in source listener result\n", 31);
          }
          v16 |= std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::find<unsigned long long>(v15 + 3, (unint64_t *)&v36) != 0;
          float v15 = (void *)*v15;
        }
        while (v15);
        if ((v16 & 1) == 0)
        {
LABEL_27:
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"source hash ", 12);
          uint64_t v25 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" not in clustering results\n", 27);
        }
        unsigned __int8 v26 = (void *)v13[1];
        if (v26)
        {
          do
          {
            unsigned __int8 v27 = v26;
            unsigned __int8 v26 = (void *)*v26;
          }
          while (v26);
        }
        else
        {
          do
          {
            unsigned __int8 v27 = (void *)v13[2];
            BOOL v28 = *v27 == (void)v13;
            double v13 = v27;
          }
          while (!v28);
        }
        double v13 = v27;
      }
      while (v27 != v14);
    }
    if ((char)v31 < 0) {
      operator delete(__p[0]);
    }
    v32[0] = *MEMORY[0x263F8C2B8];
    uint64_t v29 = *(void *)(MEMORY[0x263F8C2B8] + 72);
    *(void *)((char *)v32 + *(void *)(v32[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
    v33[0] = v29;
    v33[1] = MEMORY[0x263F8C318] + 16;
    if (v34 < 0) {
      operator delete((void *)v33[9]);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    return MEMORY[0x223C937D0](&v35);
  }
  return result;
}

void sub_22205A5D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  a15 = *MEMORY[0x263F8C2B8];
  uint64_t v35 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  a17 = v35;
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x223C937D0](&a34);
  _Unwind_Resume(a1);
}

void Phase::SpatialModeler::RoomSimulationLogging::logAreSourcesAndListenerInsideSceneBoundingBox(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int8x16_t a5)
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  int v75 = 0;
  uint64_t v76 = 0;
  uint64_t v77 = 0;
  if (a2 == 3)
  {
    float32x4_t v6 = "LR";
  }
  else
  {
    if (a2 != 2) {
      goto LABEL_6;
    }
    float32x4_t v6 = "ER";
  }
  a5 = (int8x16_t)MEMORY[0x223C933A0](&v75, v6);
LABEL_6:
  float v7 = *(float *)(a1 + 20976);
  a5.i64[0] = *(void *)(a1 + 20980);
  int8x16_t v65 = a5;
  float v8 = *(float *)(a1 + 20988);
  uint64_t v9 = *(void *)(a1 + 20992);
  uint64_t v66 = v9;
  float v10 = *(float *)(a1 + 22792);
  BOOL v11 = v7 > v10 || v10 > v8;
  float v12 = (void *)MEMORY[0x263F8C2B8];
  if (v11
    || (v13.i32[0] = v9,
        float32x4_t v14 = (float32x4_t)vextq_s8(v65, v65, 0xCuLL),
        v14.i32[0] = *(_DWORD *)(a1 + 22796),
        v14.i32[3] = *(_DWORD *)(a1 + 22800),
        v13.i32[1] = v14.i32[0],
        v13.i64[1] = __PAIR64__(HIDWORD(v66), v14.u32[3]),
        (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vcgeq_f32(v13, v14)), 0xFuLL))) & 1) == 0))
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v69);
    float v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v70, (uint64_t)"logAreSourcesAndListenerInsideSceneBoundingBox - called from ", 61);
    if (v77 >= 0) {
      char v16 = (void **)&v75;
    }
    else {
      char v16 = v75;
    }
    if (v77 >= 0) {
      uint64_t v17 = HIBYTE(v77);
    }
    else {
      uint64_t v17 = v76;
    }
    unint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" ", 1);
    uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, a3, a4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v70, (uint64_t)"Listener Position ", 18);
    unint64_t v21 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)", ", 2);
    BOOL v22 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)", ", 2);
    unsigned __int8 v23 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" ", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v70, (uint64_t)"outside the scene boundingbox ", 30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v70, (uint64_t)"min ", 4);
    unsigned __int8 v24 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)", ", 2);
    uint64_t v25 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)", ", 2);
    unsigned __int8 v26 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" ", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v70, (uint64_t)"max ", 4);
    unsigned __int8 v27 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)", ", 2);
    BOOL v28 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)", ", 2);
    uint64_t v29 = (void *)std::ostream::operator<<();
    char v30 = (Phase::Logger *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)" ", 1);
    unsigned __int8 v31 = **(NSObject ***)(Phase::Logger::GetInstance(v30) + 1184);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
    {
      std::stringbuf::str();
      std::locale v32 = v68 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315650;
      float32x4_t v79 = "RoomSimulationLoggingFunctions.cpp";
      __int16 v80 = 1024;
      int v81 = 387;
      __int16 v82 = 2080;
      float v83 = v32;
      _os_log_impl(&dword_221E5E000, v31, OS_LOG_TYPE_DEBUG, "%25s:%-5d %s", buf, 0x1Cu);
      if (v68 < 0) {
        operator delete(__p[0]);
      }
    }
    v69[0] = *v12;
    uint64_t v33 = v12[9];
    *(void *)((char *)v69 + *(void *)(v69[0] - 24)) = v12[8];
    uint64_t v70 = v33;
    uint64_t v71 = MEMORY[0x263F8C318] + 16;
    if (v73 < 0) {
      operator delete(v72);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x223C937D0](v74);
  }
  uint64_t v34 = *(void *)(a1 + 18928);
  uint64_t v35 = *(void *)(a1 + 18936);
  if (v34 != v35)
  {
    uint64_t v36 = *(void *)(MEMORY[0x263F8C2B8] + 72);
    uint64_t v61 = *(void *)(MEMORY[0x263F8C2B8] + 64);
    uint64_t v62 = *MEMORY[0x263F8C2B8];
    v37.i64[0] = v66;
    v37.i64[1] = v65.i64[0];
    uint64_t v60 = vextq_s8(v37, v37, 8uLL).u64[0];
    do
    {
      float v38 = *(float *)(v34 + 24);
      BOOL v39 = v7 > v38 || v38 > v8;
      if (v39
        || (v40.i64[0] = v66,
            v40.i64[1] = *(void *)(v34 + 28),
            v41.i64[0] = v40.i64[1],
            v41.i64[1] = v60,
            (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vcgeq_f32(v40, v41)), 0xFuLL))) & 1) == 0))
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v69);
        __int16 v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v70, (uint64_t)"logAreSourcesAndListenerInsideSceneBoundingBox - called from ", 61);
        if (v77 >= 0) {
          int v43 = (void **)&v75;
        }
        else {
          int v43 = v75;
        }
        if (v77 >= 0) {
          uint64_t v44 = HIBYTE(v77);
        }
        else {
          uint64_t v44 = v76;
        }
        int v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)v43, v44);
        __int16 v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)" ", 1);
        int v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, a3, a4);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)": ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v70, (uint64_t)"Source Position ", 16);
        __int16 v48 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)", ", 2);
        int v49 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)", ", 2);
        __int16 v50 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)" ", 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v70, (uint64_t)"outside the scene boundingbox ", 30);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v70, (uint64_t)"min ", 4);
        int v51 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)", ", 2);
        __int16 v52 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)", ", 2);
        int v53 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)" ", 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v70, (uint64_t)"max ", 4);
        __int16 v54 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)", ", 2);
        int v55 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)", ", 2);
        __int16 v56 = (void *)std::ostream::operator<<();
        int v57 = (Phase::Logger *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)" ", 1);
        uint64_t v58 = **(NSObject ***)(Phase::Logger::GetInstance(v57) + 1184);
        if (os_log_type_enabled(v58, OS_LOG_TYPE_DEBUG))
        {
          std::stringbuf::str();
          uint64_t v59 = __p;
          if (v68 < 0) {
            uint64_t v59 = (void **)__p[0];
          }
          *(_DWORD *)buf = 136315650;
          float32x4_t v79 = "RoomSimulationLoggingFunctions.cpp";
          __int16 v80 = 1024;
          int v81 = 404;
          __int16 v82 = 2080;
          float v83 = v59;
          _os_log_impl(&dword_221E5E000, v58, OS_LOG_TYPE_DEBUG, "%25s:%-5d %s", buf, 0x1Cu);
          if (v68 < 0) {
            operator delete(__p[0]);
          }
        }
        v69[0] = v62;
        *(void *)((char *)v69 + *(void *)(v62 - 24)) = v61;
        uint64_t v70 = v36;
        uint64_t v71 = MEMORY[0x263F8C318] + 16;
        if (v73 < 0) {
          operator delete(v72);
        }
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x223C937D0](v74);
      }
      v34 += 56;
    }
    while (v34 != v35);
  }
  if (SHIBYTE(v77) < 0) {
    operator delete(v75);
  }
}

void sub_22205AF90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a29);
  if (*(char *)(v29 - 193) < 0) {
    operator delete(*(void **)(v29 - 216));
  }
  _Unwind_Resume(a1);
}

void Phase::SpatialModeler::RoomSimulationLogging::logWhenExceedingTimeLimit(Phase::SpatialModeler::RoomSimulationLogging *this, const Phase::SpatialModeler::RayTracerState *a2, Phase::Throttle *a3)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  int v4 = *(_DWORD *)(*(void *)this + 32);
  if (v4 == 3)
  {
    float v5 = *((float *)this + 12);
  }
  else
  {
    float v5 = 0.0;
    if (v4 == 2) {
      float v5 = *((float *)this + 13);
    }
  }
  float v6 = (float)(uint64_t)(*((void *)this + 2415) - *((void *)this + 2414)) / 1000000000.0;
  if (v6 > (float)(v5 * 1.25))
  {
    ShouldFire = (Phase::Logger *)Phase::Throttle::ShouldFire(a2, 0);
    if (ShouldFire)
    {
      float v8 = **(NSObject ***)(Phase::Logger::GetInstance(ShouldFire) + 1184);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        Phase::SpatialModeler::RayTracerState::descriptionString((uint64_t)this, 0, (uint64_t)__p);
        if (v12 >= 0) {
          uint64_t v9 = __p;
        }
        else {
          uint64_t v9 = (void **)__p[0];
        }
        int v10 = *((_DWORD *)this + 4832);
        *(_DWORD *)buf = 136316162;
        float32x4_t v14 = "RoomSimulationLoggingFunctions.cpp";
        __int16 v15 = 1024;
        int v16 = 427;
        __int16 v17 = 2080;
        unint64_t v18 = v9;
        __int16 v19 = 2048;
        double v20 = v6;
        __int16 v21 = 1024;
        int v22 = v10;
        _os_log_impl(&dword_221E5E000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d %s ran %f sec to reach %i intersections", buf, 0x2Cu);
        if (v12 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
}

void Phase::SpatialModeler::RoomSimulationLogging::logRoomStatistics(unsigned int *a1, int a2, uint64_t a3, uint64_t a4)
{
  if ((*(unsigned char *)(*(void *)(Phase::Logger::GetInstance((Phase::Logger *)a1) + 1184) + 8) & 4) == 0) {
    return;
  }
  char v30 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  if (a2 == 3)
  {
    float v8 = "LR";
    goto LABEL_6;
  }
  if (a2 == 2)
  {
    float v8 = "ER";
LABEL_6:
    MEMORY[0x223C933A0](&v30, v8);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v26);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"logRoomStatistics - called from ", 32);
  if (v32 >= 0) {
    int v10 = (void **)&v30;
  }
  else {
    int v10 = v30;
  }
  if (v32 >= 0) {
    uint64_t v11 = HIBYTE(v32);
  }
  else {
    uint64_t v11 = v31;
  }
  char v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
  float32x4_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" ", 1);
  float32x4_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, a3, a4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Room volume ", 12);
  __int16 v15 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Room surface area ", 18);
  int v16 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Mean free path ", 15);
  __int16 v17 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"\n", 1);
  unint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Mean absorption per band:", 25);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"\n", 1);
  uint64_t v19 = a1[4911];
  if (v19)
  {
    double v20 = a1 + 4880;
    uint64_t v21 = a1[4911];
    do
    {
      int v22 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)", ", 2);
      ++v20;
      --v21;
    }
    while (v21);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"RT60 per band:\n", 15);
  if (v19)
  {
    uint64_t v23 = a1 + 4944;
    do
    {
      unsigned __int8 v24 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)", ", 2);
      ++v23;
      --v19;
    }
    while (v19);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"\n", 1);
  v26[0] = *MEMORY[0x263F8C2B8];
  uint64_t v25 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v26 + *(void *)(v26[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v27[0] = v25;
  v27[1] = MEMORY[0x263F8C318] + 16;
  if (v28 < 0) {
    operator delete((void *)v27[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x223C937D0](&v29);
  if (SHIBYTE(v32) < 0) {
    operator delete(v30);
  }
}

void sub_22205B4E8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 65) < 0) {
    operator delete(*(void **)(v1 - 88));
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::SpatialModeler::RoomSimulationLogging::logRoomStatisticsAtIRBuild(Phase::SpatialModeler::RoomSimulationLogging *this, const Phase::SpatialModeler::RayTracerState *a2, const Phase::SpatialModeler::DirectivityHistogram *a3, float a4)
{
  int v5 = (int)a3;
  uint64_t v59 = *MEMORY[0x263EF8340];
  uint64_t Instance = Phase::Logger::GetInstance(this);
  float v9 = expf((float)((float)(*(float *)(Instance + 1204) * 10.0) / 10.0) * 0.23026);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v49);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"=== Room Statistics ===\n", 24);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"* Volume: ", 10);
  int v10 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" (m^3), ", 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"Surface Area: ", 14);
  uint64_t v11 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" (m^2), ", 8);
  uint64_t v12 = v50[0];
  *(void *)((char *)&v50[2] + *(void *)(v50[0] - 24)) = 3;
  *(_DWORD *)((char *)&v50[1] + *(void *)(v12 - 24)) = *(_DWORD *)((unsigned char *)&v50[1] + *(void *)(v12 - 24)) & 0xFFFFFEFB | 4;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"Mean Free Path: ", 16);
  float32x4_t v13 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" (m), ", 6);
  if (v5) {
    float32x4_t v14 = "OUTDOOR\n";
  }
  else {
    float32x4_t v14 = "INDOOR\n";
  }
  if (v5) {
    uint64_t v15 = 8;
  }
  else {
    uint64_t v15 = 7;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)v14, v15);
  uint64_t v16 = *((unsigned int *)a2 + 7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"* Bands (Hz):", 13);
  uint64_t v17 = v50[0];
  uint64_t v18 = v50[0];
  *(void *)((char *)&v50[2] + *(void *)(v50[0] - 24)) = 0;
  *(_DWORD *)((char *)&v50[1] + *(void *)(v18 - 24)) = *(_DWORD *)((unsigned char *)&v50[1] + *(void *)(v18 - 24)) & 0xFFFFFEFB | 4;
  if (v16)
  {
    uint64_t v19 = 0;
    double v20 = &Phase::sThirdOctaveBandFrequencies;
    uint64_t v21 = v16;
    do
    {
      *(void *)((char *)&v50[3] + *(void *)(v50[0] - 24)) = 8;
      std::ostream::operator<<();
      ++v19;
      ++v20;
      --v21;
    }
    while (v21);
    uint64_t v17 = v50[0];
  }
  *(void *)((char *)&v50[2] + *(void *)(v17 - 24)) = 3;
  *(_DWORD *)((char *)&v50[1] + *(void *)(v17 - 24)) = *(_DWORD *)((unsigned char *)&v50[1] + *(void *)(v17 - 24)) & 0xFFFFFEFB | 4;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"\n* RT60 (sec):", 14);
  if (v16)
  {
    int v22 = (char *)this + 19776;
    uint64_t v23 = v16;
    do
    {
      *(void *)((char *)&v50[3] + *(void *)(v50[0] - 24)) = 8;
      std::ostream::operator<<();
      v22 += 4;
      --v23;
    }
    while (v23);
  }
  unsigned __int8 v24 = (char *)this + 20544;
  unint64_t v25 = *((unsigned int *)this + 5167);
  float v26 = fabsf(*((float *)this + 5136));
  if (v25 <= 1) {
    float v26 = 0.0;
  }
  if (v25)
  {
    unsigned __int8 v27 = (float *)((char *)this + 20544);
    do
    {
      float v28 = *v27++;
      float v29 = fabsf(v28);
      if (v26 < v29) {
        float v26 = v29;
      }
      --v25;
    }
    while (v25);
  }
  if (v26 > 0.0)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"\n* EDT (sec): ", 14);
    if (v16)
    {
      uint64_t v30 = v16;
      do
      {
        *(void *)((char *)&v50[3] + *(void *)(v50[0] - 24)) = 8;
        std::ostream::operator<<();
        v24 += 4;
        --v30;
      }
      while (v30);
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"\n* ER (dB):   ", 14);
  if (v16)
  {
    uint64_t v31 = 0;
    do
    {
      *(void *)((char *)&v50[3] + *(void *)(v50[0] - 24)) = 8;
      Phase::SpatialModeler::RayTracerState::calculateTotalSpecularEarlyEnergy(this, (char *)buf);
      float v32 = v9 * *(float *)&buf[v31];
      if (v32 <= 0.0) {
        float v32 = COERCE_FLOAT(1);
      }
      logf(v32);
      std::ostream::operator<<();
      v31 += 4;
    }
    while (4 * v16 != v31);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"\n* LR (dB):   ", 14);
  if (v16)
  {
    uint64_t v33 = 0;
    for (uint64_t i = 0; i != v16; ++i)
    {
      *(void *)((char *)&v50[3] + *(void *)(v50[0] - 24)) = 8;
      float v35 = 0.0;
      if (!*((unsigned char *)a2 + 36))
      {
        int v36 = *((_DWORD *)a2 + 6);
        if (v36)
        {
          int8x16_t v37 = (float *)(*((void *)a2 + 1) + v33);
          do
          {
            float v35 = v35 + *v37;
            v37 += *((unsigned int *)a2 + 7);
            --v36;
          }
          while (v36);
        }
      }
      float v38 = (float)(v9 * v35) * a4;
      if (v38 <= 0.0) {
        float v38 = COERCE_FLOAT(1);
      }
      logf(v38);
      std::ostream::operator<<();
      v33 += 4;
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"\n* Mean Abs:  ", 14);
  if (v16)
  {
    BOOL v39 = (char *)this + 19520;
    uint64_t v40 = v16;
    do
    {
      *(void *)((char *)&v50[3] + *(void *)(v50[0] - 24)) = 8;
      std::ostream::operator<<();
      v39 += 4;
      --v40;
    }
    while (v40);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"\n* Abs Corr:  ", 14);
  if (v16)
  {
    for (uint64_t j = 0; j != v16; ++j)
    {
      *(void *)((char *)&v50[3] + *(void *)(v50[0] - 24)) = 8;
      std::ostream::operator<<();
    }
  }
  __int16 v42 = (Phase::Logger *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"\n", 1);
  int v43 = **(NSObject ***)(Phase::Logger::GetInstance(v42) + 1184);
  if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
  {
    std::stringbuf::str();
    uint64_t v44 = v48 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 136315650;
    __int16 v54 = "RoomSimulationLoggingFunctions.cpp";
    __int16 v55 = 1024;
    int v56 = 557;
    __int16 v57 = 2080;
    uint64_t v58 = v44;
    _os_log_impl(&dword_221E5E000, v43, OS_LOG_TYPE_DEFAULT, "%25s:%-5d \n%s", buf, 0x1Cu);
    if (v48 < 0) {
      operator delete(__p);
    }
  }
  v49[0] = *MEMORY[0x263F8C2B8];
  uint64_t v45 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v49 + *(void *)(v49[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v50[0] = v45;
  v50[1] = MEMORY[0x263F8C318] + 16;
  if (v51 < 0) {
    operator delete((void *)v50[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x223C937D0](&v52);
}

void sub_22205BD64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t Phase::SpatialModeler::RoomSimulationLogging::logRoomStatisticsAtIRBuild(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, float a6)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v53);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"=== Room Statistics ===\n", 24);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"* Volume: ", 10);
  uint64_t v12 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" (m^3), ", 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)" Surface Area: ", 15);
  float32x4_t v13 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" (m^2), ", 8);
  uint64_t v14 = v54[0];
  *(void *)((char *)&v54[2] + *(void *)(v54[0] - 24)) = 3;
  *(_DWORD *)((char *)&v54[1] + *(void *)(v14 - 24)) = *(_DWORD *)((unsigned char *)&v54[1] + *(void *)(v14 - 24)) & 0xFFFFFEFB | 4;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"Mean Free Path: ", 16);
  uint64_t v15 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" (m), ", 6);
  if (a4) {
    uint64_t v16 = "OUTDOOR";
  }
  else {
    uint64_t v16 = "INDOOR";
  }
  if (a4) {
    uint64_t v17 = 7;
  }
  else {
    uint64_t v17 = 6;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)v16, v17);
  uint64_t v18 = v54[0];
  *(void *)((char *)&v54[2] + *(void *)(v54[0] - 24)) = 1;
  *(_DWORD *)((char *)&v54[1] + *(void *)(v18 - 24)) = *(_DWORD *)((unsigned char *)&v54[1] + *(void *)(v18 - 24)) & 0xFFFFFEFB | 4;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)", Immersed: ", 12);
  uint64_t v19 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"%, ", 3);
  if (a5) {
    double v20 = " Did SpaceBlend";
  }
  else {
    double v20 = " No SpaceBlend";
  }
  if (a5) {
    uint64_t v21 = 15;
  }
  else {
    uint64_t v21 = 14;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)v20, v21);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"* Bands (Hz):", 13);
  uint64_t v22 = 0;
  uint64_t v23 = v54[0];
  *(void *)((char *)&v54[2] + *(void *)(v54[0] - 24)) = 0;
  *(_DWORD *)((char *)&v54[1] + *(void *)(v23 - 24)) = *(_DWORD *)((unsigned char *)&v54[1] + *(void *)(v23 - 24)) & 0xFFFFFEFB | 4;
  do
  {
    *(void *)((char *)&v54[3] + *(void *)(v54[0] - 24)) = 8;
    std::ostream::operator<<();
    v22 += 4;
  }
  while (v22 != 40);
  uint64_t v24 = v54[0];
  *(void *)((char *)&v54[2] + *(void *)(v54[0] - 24)) = 3;
  *(_DWORD *)((char *)&v54[1] + *(void *)(v24 - 24)) = *(_DWORD *)((unsigned char *)&v54[1] + *(void *)(v24 - 24)) & 0xFFFFFEFB | 4;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"\n* RT60 (sec):", 14);
  for (uint64_t i = 0; i != 40; i += 4)
  {
    *(void *)((char *)&v54[3] + *(void *)(v54[0] - 24)) = 8;
    std::ostream::operator<<();
  }
  unint64_t v26 = *(unsigned int *)(a1 + 20668);
  float v27 = fabsf(*(float *)(a1 + 20544));
  if (v26 <= 1) {
    float v27 = 0.0;
  }
  if (v26)
  {
    float v28 = (float *)(a1 + 20544);
    do
    {
      float v29 = *v28++;
      float v30 = fabsf(v29);
      if (v27 < v30) {
        float v27 = v30;
      }
      --v26;
    }
    while (v26);
  }
  if (v27 > 0.0)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"\n* EDT (sec): ", 14);
    for (uint64_t j = 0; j != 40; j += 4)
    {
      *(void *)((char *)&v54[3] + *(void *)(v54[0] - 24)) = 8;
      std::ostream::operator<<();
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"\n* ER (dB):   ", 14);
  for (uint64_t k = 0; k != 40; k += 4)
  {
    *(void *)((char *)&v54[3] + *(void *)(v54[0] - 24)) = 8;
    float v33 = *(float *)(a3 + 40 + k);
    if (v33 <= 0.0) {
      float v33 = COERCE_FLOAT(1);
    }
    logf(v33);
    std::ostream::operator<<();
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"\n* LR (dB):   ", 14);
  uint64_t v34 = 0;
  uint64_t v35 = a3 + 80;
  do
  {
    *(void *)((char *)&v54[3] + *(void *)(v54[0] - 24)) = 8;
    float v36 = *(float *)(v35 + v34);
    if (v36 <= 0.0) {
      float v36 = COERCE_FLOAT(1);
    }
    logf(v36);
    std::ostream::operator<<();
    v34 += 4;
  }
  while (v34 != 40);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"\n* Mean Abs:  ", 14);
  for (uint64_t m = 0; m != 40; m += 4)
  {
    *(void *)((char *)&v54[3] + *(void *)(v54[0] - 24)) = 8;
    std::ostream::operator<<();
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"\n* Abs Corr:  ", 14);
  for (uint64_t n = 0; n != 10; ++n)
  {
    *(void *)((char *)&v54[3] + *(void *)(v54[0] - 24)) = 8;
    std::ostream::operator<<();
  }
  *(void *)((char *)&v54[2] + *(void *)(v54[0] - 24)) = 1;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"\n* Sends (Offset ", 17);
  LODWORD(v39) = 1;
  if (a6 > 0.0) {
    float v39 = a6;
  }
  logf(v39);
  uint64_t v40 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"dB): ", 5);
  if (a2)
  {
    float32x4_t v41 = (void *)(a2 + 16);
    while (1)
    {
      float32x4_t v41 = (void *)*v41;
      if (!v41) {
        break;
      }
      *(void *)((char *)&v54[3] + *(void *)(v54[0] - 24)) = 3;
      __int16 v42 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)" (", 2);
      int v43 = (void *)std::ostream::operator<<();
      uint64_t v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"m)", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)" ", 1);
      uint64_t v45 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"dB, ", 4);
    }
  }
  __int16 v46 = (Phase::Logger *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"\n", 1);
  int v47 = **(NSObject ***)(Phase::Logger::GetInstance(v46) + 1184);
  if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
  {
    std::stringbuf::str();
    char v48 = v52 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 136315650;
    uint64_t v58 = "RoomSimulationLoggingFunctions.cpp";
    __int16 v59 = 1024;
    int v60 = 642;
    __int16 v61 = 2080;
    uint64_t v62 = v48;
    _os_log_impl(&dword_221E5E000, v47, OS_LOG_TYPE_DEFAULT, "%25s:%-5d \n%s", buf, 0x1Cu);
    if (v52 < 0) {
      operator delete(__p);
    }
  }
  v53[0] = *MEMORY[0x263F8C2B8];
  uint64_t v49 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v53 + *(void *)(v53[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v54[0] = v49;
  v54[1] = MEMORY[0x263F8C318] + 16;
  if (v55 < 0) {
    operator delete((void *)v54[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x223C937D0](&v56);
}

void sub_22205C744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t Phase::SpatialModeler::RoomSimulationLogging::logTRAP(uint64_t a1)
{
  v68[19] = *MEMORY[0x263EF8340];
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v53);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"=== TargetRoomAcousticParametersProcessor Log ===\n", 50);
  uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"Curated:", 8);
  if (*(unsigned char *)a1) {
    unsigned int v3 = "Y";
  }
  else {
    unsigned int v3 = "N";
  }
  int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v3, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"\n", 1);
  uint64_t v5 = v54[0];
  *(void *)((char *)&v54[2] + *(void *)(v54[0] - 24)) = 0;
  *(_DWORD *)((char *)&v54[1] + *(void *)(v5 - 24)) = *(_DWORD *)((unsigned char *)&v54[1] + *(void *)(v5 - 24)) & 0xFFFFFEFB | 4;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"Blending:ARE:", 13);
  float v6 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"%/PRR:", 6);
  float v7 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"% SB:", 5);
  float v8 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"%/ARE&PRR:", 10);
  float v9 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"%\n", 2);
  uint64_t v10 = v54[0];
  *(void *)((char *)&v54[2] + *(void *)(v54[0] - 24)) = 2;
  *(_DWORD *)((char *)&v54[1] + *(void *)(v10 - 24)) = *(_DWORD *)((unsigned char *)&v54[1] + *(void *)(v10 - 24)) & 0xFFFFFEFB | 4;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"Broadband:ARE:", 14);
  uint64_t v11 = (void *)std::ostream::operator<<();
  buf[0] = 40;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)buf, 1);
  uint64_t v12 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)") PRR:", 6);
  float32x4_t v13 = (void *)std::ostream::operator<<();
  buf[0] = 40;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)buf, 1);
  uint64_t v14 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)") ARE&PRR:", 10);
  uint64_t v15 = (void *)std::ostream::operator<<();
  buf[0] = 40;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)buf, 1);
  uint64_t v16 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)") SB:", 5);
  uint64_t v17 = (void *)std::ostream::operator<<();
  buf[0] = 40;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)buf, 1);
  uint64_t v18 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)") Final:", 8);
  uint64_t v19 = (void *)std::ostream::operator<<();
  buf[0] = 40;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)buf, 1);
  double v20 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)")\n", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"RC:Prob:", 8);
  uint64_t v21 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" Conf:", 6);
  uint64_t v22 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" Max:", 5);
  uint64_t v23 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" AREMul:", 8);
  uint64_t v24 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" Env:", 5);
  unint64_t v25 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" Rate:", 6);
  std::ostream::operator<<();
  char v52 = v53;
  Phase::SpatialModeler::RoomSimulationLogging::logTRAP(Phase::SpatialModeler::RoomSimulationLogging::TRAPLogData const&)::$_0::operator()<char const*,Phase::Subbands<float>,Phase::Subbands<float>>(&v52, "ARE:");
  Phase::SpatialModeler::RoomSimulationLogging::logTRAP(Phase::SpatialModeler::RoomSimulationLogging::TRAPLogData const&)::$_0::operator()<char const*,Phase::Subbands<float>,Phase::Subbands<float>>(&v52, "PRR:");
  Phase::SpatialModeler::RoomSimulationLogging::logTRAP(Phase::SpatialModeler::RoomSimulationLogging::TRAPLogData const&)::$_0::operator()<char const*,Phase::Subbands<float>,Phase::Subbands<float>>(&v52, "ARE&PRR:");
  Phase::SpatialModeler::RoomSimulationLogging::logTRAP(Phase::SpatialModeler::RoomSimulationLogging::TRAPLogData const&)::$_0::operator()<char const*,Phase::Subbands<float>,Phase::Subbands<float>>(&v52, "SB:");
  buf[0] = 10;
  unint64_t v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)buf, 1);
  uint64_t v27 = *v26;
  *(_DWORD *)((char *)v26 + *(void *)(*v26 - 24) + 8) = *(_DWORD *)((unsigned char *)v26 + *(void *)(*v26 - 24) + 8) & 0xFFFFFF4F | 0x20;
  *(uint64_t *)((char *)v26 + *(void *)(v27 - 24) + 24) = 8;
  float v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"Pre-RL:", 7);
  uint64_t v29 = 0;
  *(_DWORD *)((char *)v28 + *(void *)(*v28 - 24) + 8) = *(_DWORD *)((unsigned char *)v28 + *(void *)(*v28 - 24) + 8) & 0xFFFFFF4F | 0x80;
  do
  {
    if (v29) {
      uint64_t v30 = 11;
    }
    else {
      uint64_t v30 = 4;
    }
    *(void *)((char *)&v54[3] + *(void *)(v54[0] - 24)) = v30;
    std::ostream::operator<<();
    ++v29;
  }
  while (v29 != 10);
  buf[0] = 10;
  uint64_t v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)buf, 1);
  uint64_t v32 = *v31;
  *(_DWORD *)((char *)v31 + *(void *)(*v31 - 24) + 8) = *(_DWORD *)((unsigned char *)v31 + *(void *)(*v31 - 24) + 8) & 0xFFFFFF4F | 0x20;
  *(uint64_t *)((char *)v31 + *(void *)(v32 - 24) + 24) = 8;
  float v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"Final:", 6);
  uint64_t v34 = 0;
  *(_DWORD *)((char *)v33 + *(void *)(*v33 - 24) + 8) = *(_DWORD *)((unsigned char *)v33 + *(void *)(*v33 - 24) + 8) & 0xFFFFFF4F | 0x80;
  do
  {
    if (v34) {
      uint64_t v35 = 11;
    }
    else {
      uint64_t v35 = 4;
    }
    *(void *)((char *)&v54[3] + *(void *)(v54[0] - 24)) = v35;
    float v36 = (Phase::Logger *)std::ostream::operator<<();
    ++v34;
  }
  while (v34 != 10);
  int8x16_t v37 = **(NSObject ***)(Phase::Logger::GetInstance(v36) + 1184);
  if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
  {
    std::stringbuf::str();
    float v38 = (v60 & 0x80000000) == 0 ? __p : *(unsigned char **)__p;
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "RoomSimulationLoggingFunctions.cpp";
    __int16 v62 = 1024;
    int v63 = 684;
    __int16 v64 = 2080;
    int8x16_t v65 = v38;
    _os_log_impl(&dword_221E5E000, v37, OS_LOG_TYPE_DEFAULT, "%25s:%-5d \n%s", buf, 0x1Cu);
    if (SBYTE3(v60) < 0) {
      operator delete(*(void **)__p);
    }
  }
  if (*(void *)(a1 + 1360))
  {
    uint64_t v39 = MEMORY[0x263F8C310] + 64;
    v68[0] = MEMORY[0x263F8C310] + 64;
    uint64_t v40 = (void *)MEMORY[0x263F8C2B0];
    uint64_t v41 = *(void *)(MEMORY[0x263F8C2B0] + 16);
    *(void *)buf = *(void *)(MEMORY[0x263F8C2B0] + 8);
    *(void *)&buf[*(void *)(*(void *)buf - 24)] = v41;
    __int16 v42 = (std::ios_base *)&buf[*(void *)(*(void *)buf - 24)];
    std::ios_base::init(v42, &buf[8]);
    uint64_t v43 = MEMORY[0x263F8C310] + 24;
    v42[1].__vftable = 0;
    v42[1].__fmtflags_ = -1;
    *(void *)buf = v43;
    v68[0] = v39;
    MEMORY[0x223C93430](&buf[8]);
    uint64_t v44 = (Phase::Logger *)std::ofstream::open();
    if (v67)
    {
      std::stringbuf::str();
      if ((v60 & 0x80000000) == 0) {
        uint64_t v45 = __p;
      }
      else {
        uint64_t v45 = *(unsigned char **)__p;
      }
      if ((v60 & 0x80000000) == 0) {
        uint64_t v46 = BYTE3(v60);
      }
      else {
        uint64_t v46 = *(void *)&__p[8];
      }
      int v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)v45, v46);
      char v57 = 10;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)&v57, 1);
      if (SBYTE3(v60) < 0) {
        operator delete(*(void **)__p);
      }
      if (!std::filebuf::close()) {
        std::ios_base::clear((std::ios_base *)&buf[*(void *)(*(void *)buf - 24)], *(_DWORD *)&v66[*(void *)(*(void *)buf - 24)] | 4);
      }
    }
    else
    {
      char v48 = **(NSObject ***)(Phase::Logger::GetInstance(v44) + 1184);
      if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
      {
        uint64_t v49 = *(void *)(a1 + 1360);
        *(_DWORD *)long long __p = 136315650;
        *(void *)&__p[4] = "RoomSimulationLoggingFunctions.cpp";
        *(_WORD *)&unsigned char __p[12] = 1024;
        *(_DWORD *)&__p[14] = 691;
        __int16 v59 = 2080;
        uint64_t v60 = v49;
        _os_log_impl(&dword_221E5E000, v48, OS_LOG_TYPE_ERROR, "%25s:%-5d Cannot open %s\n;", __p, 0x1Cu);
      }
    }
    *(void *)buf = *v40;
    *(void *)&buf[*(void *)(*(void *)buf - 24)] = v40[3];
    MEMORY[0x223C93440](&buf[8]);
    std::ostream::~ostream();
    MEMORY[0x223C937D0](v68);
  }
  v53[0] = *MEMORY[0x263F8C2B8];
  uint64_t v50 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v53 + *(void *)(v53[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v54[0] = v50;
  v54[1] = MEMORY[0x263F8C318] + 16;
  if (v55 < 0) {
    operator delete((void *)v54[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x223C937D0](&v56);
}

void sub_22205D430(_Unwind_Exception *a1)
{
}

void *Phase::SpatialModeler::RoomSimulationLogging::logTRAP(Phase::SpatialModeler::RoomSimulationLogging::TRAPLogData const&)::$_0::operator()<char const*,Phase::Subbands<float>,Phase::Subbands<float>>(void *a1, const char *a2)
{
  int v4 = (void *)(*a1 + 16);
  char v17 = 10;
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)&v17, 1);
  uint64_t v6 = *v5;
  *(_DWORD *)((char *)v5 + *(void *)(*v5 - 24) + 8) = *(_DWORD *)((unsigned char *)v5 + *(void *)(*v5 - 24) + 8) & 0xFFFFFF4F | 0x20;
  *(uint64_t *)((char *)v5 + *(void *)(v6 - 24) + 24) = 8;
  size_t v7 = strlen(a2);
  float v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)a2, v7);
  uint64_t v9 = 0;
  uint64_t v10 = *a1;
  uint64_t v11 = (void *)(*a1 + 16);
  *(_DWORD *)((char *)v8 + *(void *)(*v8 - 24) + 8) = *(_DWORD *)((unsigned char *)v8 + *(void *)(*v8 - 24) + 8) & 0xFFFFFF4F | 0x80;
  uint64_t v12 = v10 + 40;
  do
  {
    if (v9) {
      uint64_t v13 = 5;
    }
    else {
      uint64_t v13 = 4;
    }
    *(void *)(v12 + *(void *)(*v11 - 24)) = v13;
    uint64_t v14 = (void *)std::ostream::operator<<();
    char v18 = 40;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v18, 1);
    uint64_t v15 = (void *)std::ostream::operator<<();
    char v19 = 41;
    uint64_t result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)&v19, 1);
    ++v9;
  }
  while (v9 != 10);
  return result;
}

uint64_t Phase::SpatialModeler::RoomSimulationLogging::logSceneObserverUpdateCauses(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  *(_OWORD *)uint64_t v6 = *(_OWORD *)a1;
  *(_DWORD *)&v6[15] = *(_DWORD *)(a1 + 15);
  Phase::SpatialModeler::RoomSimulationLogging::logSceneObserverUpdateCauses(Phase::SpatialModeler::SimulationUpdate const&)::$_0::operator()<char const*,Phase::SpatialModeler::UpdateCauses>((uint64_t)"Early Reflections Ray Trace", (uint64_t)v6);
  v5[0] = *(_OWORD *)(a1 + 19);
  *(_DWORD *)((char *)v5 + 15) = *(_DWORD *)(a1 + 34);
  Phase::SpatialModeler::RoomSimulationLogging::logSceneObserverUpdateCauses(Phase::SpatialModeler::SimulationUpdate const&)::$_0::operator()<char const*,Phase::SpatialModeler::UpdateCauses>((uint64_t)"Late Reverb Ray Trace", (uint64_t)v5);
  v4[0] = *(_OWORD *)(a1 + 38);
  *(_DWORD *)((char *)v4 + 15) = *(_DWORD *)(a1 + 53);
  Phase::SpatialModeler::RoomSimulationLogging::logSceneObserverUpdateCauses(Phase::SpatialModeler::SimulationUpdate const&)::$_0::operator()<char const*,Phase::SpatialModeler::UpdateCauses>((uint64_t)"Early Reflections Generate Metadata", (uint64_t)v4);
  v3[0] = *(_OWORD *)(a1 + 57);
  *(_DWORD *)((char *)v3 + 15) = *(_DWORD *)(a1 + 72);
  return Phase::SpatialModeler::RoomSimulationLogging::logSceneObserverUpdateCauses(Phase::SpatialModeler::SimulationUpdate const&)::$_0::operator()<char const*,Phase::SpatialModeler::UpdateCauses>((uint64_t)"Late Reverb Generate Metadata", (uint64_t)v3);
}

uint64_t Phase::SpatialModeler::RoomSimulationLogging::logSceneObserverUpdateCauses(Phase::SpatialModeler::SimulationUpdate const&)::$_0::operator()<char const*,Phase::SpatialModeler::UpdateCauses>(uint64_t result, uint64_t a2)
{
  unsigned int v3 = (const char *)result;
  uint64_t v4 = 0;
  uint64_t v29 = *MEMORY[0x263EF8340];
  do
  {
    int v5 = *(unsigned __int8 *)(a2 + v4);
    if (*(unsigned char *)(a2 + v4)) {
      BOOL v6 = 1;
    }
    else {
      BOOL v6 = v4 == 18;
    }
    ++v4;
  }
  while (!v6);
  if (v5)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v19);
    uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"\n=== ", 5);
    size_t v8 = strlen(v3);
    uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v3, v8);
    uint64_t v10 = (Phase::Logger *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Causes Log ===", 15);
    for (uint64_t i = 0; i != 19; ++i)
    {
      if (*(unsigned char *)(a2 + i))
      {
        uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"\n   ", 4);
        size_t v13 = strlen(Phase::SpatialModeler::kCauseNames[i]);
        uint64_t v10 = (Phase::Logger *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)Phase::SpatialModeler::kCauseNames[i], v13);
      }
    }
    uint64_t v14 = **(NSObject ***)(Phase::Logger::GetInstance(v10) + 1184);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      std::stringbuf::str();
      uint64_t v15 = v18 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)buf = 136315650;
      uint64_t v24 = "RoomSimulationLoggingFunctions.cpp";
      __int16 v25 = 1024;
      int v26 = 716;
      __int16 v27 = 2080;
      float v28 = v15;
      _os_log_impl(&dword_221E5E000, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s", buf, 0x1Cu);
      if (v18 < 0) {
        operator delete(__p);
      }
    }
    v19[0] = *MEMORY[0x263F8C2B8];
    uint64_t v16 = *(void *)(MEMORY[0x263F8C2B8] + 72);
    *(void *)((char *)v19 + *(void *)(v19[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
    v20[0] = v16;
    v20[1] = MEMORY[0x263F8C318] + 16;
    if (v21 < 0) {
      operator delete((void *)v20[9]);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    return MEMORY[0x223C937D0](&v22);
  }
  return result;
}

void sub_22205DA3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

Phase::SpatialModeler::RoomSimulation *Phase::SpatialModeler::RoomSimulation::RoomSimulation(Phase::SpatialModeler::RoomSimulation *this)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  *((void *)this + 1) = &unk_26D471D28;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0xFFFFFFFFLL;
  *(void *)this = &unk_26D476688;
  *((void *)this + 5) = 0x40E7700000000000;
  uint64_t Instance = (int *)Phase::Logger::GetInstance(this);
  uint64_t v3 = Instance[303];
  *((_OWORD *)this + 5) = 0u;
  *((void *)this + 6) = v3;
  *(void *)((char *)this + 60) = 0;
  *((void *)this + 9) = &unk_26D47A5A8;
  *((_OWORD *)this + 6) = 0u;
  *((_DWORD *)this + 28) = 1065353216;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((_DWORD *)this + 38) = 1065353216;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_DWORD *)this + 48) = 0;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((_OWORD *)this + 28) = 0u;
  *((void *)this + 58) = 0;
  *((_DWORD *)this + 118) = -1082130432;
  *((unsigned char *)this + 476) = 0;
  *((_OWORD *)this + 30) = 0u;
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 32) = 0u;
  *((_OWORD *)this + 33) = 0u;
  *((_OWORD *)this + 34) = 0u;
  *((_OWORD *)this + 35) = 0u;
  *((_OWORD *)this + 36) = 0u;
  *((_OWORD *)this + 37) = 0u;
  *((_OWORD *)this + 38) = 0u;
  *((_OWORD *)this + 39) = 0u;
  *((_OWORD *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 652) = 0u;
  *((_OWORD *)this + 42) = 0u;
  *((_OWORD *)this + 43) = 0u;
  *((_DWORD *)this + 176) = 0;
  *(void *)((char *)this + 708) = 7;
  *((_DWORD *)this + 179) = 0;
  *((void *)this + 90) = 0x3C00000000;
  *((_DWORD *)this + 190) = 0;
  *(_OWORD *)((char *)this + 744) = 0u;
  *(_OWORD *)((char *)this + 728) = 0u;
  *(void *)((char *)this + 764) = 7;
  *((_DWORD *)this + 193) = 0;
  *((void *)this + 97) = 0x3C00000000;
  *((void *)this + 100) = 0;
  *((void *)this + 98) = 0;
  *((void *)this + 99) = 0;
  *((void *)this + 101) = 0x100000000;
  *((void *)this + 102) = 0;
  *((void *)this + 103) = 0;
  *((void *)this + 104) = 0x3C00000000;
  *((void *)this + 106) = 0;
  *((_DWORD *)this + 214) = 0;
  *((void *)this + 105) = 0;
  *((unsigned char *)this + 852) = 1;
  *(void *)((char *)this + 868) = 0;
  *(void *)((char *)this + 860) = 0;
  *((_DWORD *)this + 219) = 0;
  *((unsigned char *)this + 872) = 1;
  *((void *)this + 114) = 0;
  *((_OWORD *)this + 55) = 0u;
  *((_OWORD *)this + 56) = 0u;
  *((unsigned char *)this + 916) = 1;
  *(_OWORD *)((char *)this + 920) = 0u;
  *(_OWORD *)((char *)this + 936) = 0u;
  *(_OWORD *)((char *)this + 952) = 0u;
  *(_OWORD *)((char *)this + 968) = 0u;
  *(_OWORD *)((char *)this + 984) = 0u;
  *(_OWORD *)((char *)this + 1000) = 0u;
  *(_OWORD *)((char *)this + 1016) = xmmword_2220E8140;
  *((_DWORD *)this + 258) = 60;
  *(void *)((char *)this + 1036) = 1048576000;
  *((_OWORD *)this + 66) = xmmword_2220E74C0;
  *((void *)this + 134) = 0x800000000100;
  *((unsigned char *)this + 1080) = 0;
  *((_DWORD *)this + 271) = 1000593162;
  *((_OWORD *)this + 68) = xmmword_2220A5970;
  *((void *)this + 138) = 1000;
  *(_OWORD *)((char *)this + 1112) = xmmword_2220A5980;
  *((void *)this + 141) = 0x4040000040800000;
  *((_DWORD *)this + 284) = 1167867904;
  *((_DWORD *)this + 285) = 0x1000000;
  *(_OWORD *)((char *)this + 1144) = xmmword_2220A5990;
  *((_DWORD *)this + 290) = 4;
  *((unsigned char *)this + 1164) = 1;
  *((void *)this + 146) = 0xC2700000C1D00000;
  *((_DWORD *)this + 294) = 16777473;
  *(void *)((char *)this + 1180) = 0x4E20000003E8;
  *((unsigned char *)this + 1188) = 1;
  *((void *)this + 149) = 0x430300003DDB22D1;
  *((_DWORD *)this + 300) = 256;
  *(_OWORD *)((char *)this + 1208) = xmmword_2220E8150;
  *((unsigned char *)this + 1224) = 0;
  *((_DWORD *)this + 307) = 0;
  *((void *)this + 154) = 0x4248000042C80000;
  *((_DWORD *)this + 310) = 1112014848;
  *((unsigned char *)this + 1244) = 0;
  *((_OWORD *)this + 78) = xmmword_2220E8160;
  *((unsigned char *)this + 1264) = 0;
  *((_DWORD *)this + 317) = 0;
  *((_DWORD *)this + 318) = 0;
  *((_DWORD *)this + 319) = 0;
  float v4 = Phase::Controller::sClamp<float>((Phase::Logger *)Instance, 101320.0, 5000.0, 3.4028e38);
  float v5 = *((float *)this + 315);
  if (v4 != v5)
  {
    *((float *)this + 315) = v4;
    *((unsigned char *)this + 1264) = 1;
    float v5 = v4;
  }
  float v6 = *((float *)this + 305);
  float v7 = *((float *)this + 310);
  float v8 = __exp10f((float)((float)(v6 / 273.16) + -1.0) * -8.2969);
  float v9 = (float)(-273.16 / v6) + 1.0;
  float v10 = __exp10f(v9 * -4.7695);
  float v11 = log10f(v6 / 273.16);
  float v12 = __exp10f((float)((float)((float)((float)(v11 * -5.0281) + (float)(v9 * 10.796))+ (float)((float)(1.0 - v8) * 0.00015047))+ (float)((float)(v10 + -1.0) * 0.00042873))+ -2.2196);
  float v13 = (float)(v5 / 1000.0) / 101.32;
  float v14 = (float)(v7 * v12) / v13;
  *((float *)this + 317) = v13
                         * (float)((float)((float)(v14 * 40400.0) * (float)((float)(v14 + 0.02) / (float)(v14 + 0.391)))
                                 + 24.0);
  float v15 = v13 * powf(v6 / 293.16, -0.5);
  float v16 = powf(v6 / 293.16, -0.33333);
  *((float *)this + 318) = v15 * (float)((float)((float)(v14 * 280.0) * expf((float)(v16 + -1.0) * -4.17)) + 9.0);
  float v17 = v6 + -273.15;
  float v18 = v17 * v17;
  float v19 = expf((float)(v6 * -0.019121) + (float)((float)((float)(v6 * v6) * 1.2379) * 0.00001));
  float v20 = (float)((float)((float)(expf((float)(-6343.2 / v6) + 33.937) * v19)
                      * (float)(v7
                              * (float)((float)((float)(v5 * 0.0000000314) + 1.0006)
                                      + (float)((float)((float)(v17 * v17) * 5.6) * 0.0000001))))
              / v5)
      / 100.0;
  *((float *)this + 319) = (float)((float)((float)((float)((float)((float)(v17 * -0.22852) + -85.209)
                                                         + (float)((float)(v18 * 5.91) / 100000.0))
                                                 * 0.0004)
                                         + (float)((float)((float)((float)(v17 * 0.0000000373) + -0.000000182)
                                                         + (float)((float)(v18 * -2.93) / 1.0e10))
                                                 * v5))
                                 + (float)((float)((float)((float)(v17 * 0.60306) + 331.5)
                                                 + (float)((float)(v18 * -5.28) / 10000.0))
                                         + (float)((float)((float)((float)(v17 * 0.14959) + 51.472)
                                                         + (float)((float)(v18 * -7.82) / 10000.0))
                                                 * v20)))
                         - (float)((float)((float)((float)((float)((float)(v5 * v5) * 2.15) / 1.0e13)
                                                 + (float)((float)(v20 * v20) * 2.8351))
                                         + -0.0000046688)
                                 + (float)((float)(v5 * (float)(v20 * -0.000486)) * 0.0004));
  *((_OWORD *)this + 83) = 0u;
  *((_OWORD *)this + 80) = 0u;
  *((_DWORD *)this + 324) = 0;
  *(_OWORD *)((char *)this + 1304) = 0u;
  *((void *)this + 168) = 850045863;
  *(_OWORD *)((char *)this + 1352) = 0u;
  *(_OWORD *)((char *)this + 1368) = 0u;
  *(_OWORD *)((char *)this + 1384) = 0u;
  *(_OWORD *)((char *)this + 1400) = 0u;
  Phase::SpatialModeler::RayTracerState::RayTracerState((Phase::SpatialModeler::RoomSimulation *)((char *)this + 1424));
  *((_OWORD *)this + 1659) = 0u;
  *((_OWORD *)this + 1658) = 0u;
  *((_OWORD *)this + 1657) = 0u;
  *((_OWORD *)this + 1656) = 0u;
  *((_OWORD *)this + 1655) = 0u;
  *(_OWORD *)((char *)this + 26556) = 0u;
  *((void *)this + 3322) = (unint64_t)(*(float *)&Phase::SpatialModeler::TailCorrection::sMinTimeBetweenLogs_sec
                                              * 24000000.0);
  *((void *)this + 3323) = 0;
  *((_DWORD *)this + 6648) = 0;
  *((unsigned char *)this + 26600) = 0;
  *((void *)this + 3326) = 0;
  *((void *)this + 3328) = 0;
  *((void *)this + 3327) = 0;
  *((void *)this + 3330) = 850045863;
  *(_OWORD *)((char *)this + 26648) = 0u;
  *(_OWORD *)((char *)this + 26664) = 0u;
  *(_OWORD *)((char *)this + 26680) = 0u;
  *(_OWORD *)((char *)this + 26696) = 0u;
  char v21 = Phase::SpatialModeler::RayTracerState::RayTracerState((Phase::SpatialModeler::RoomSimulation *)((char *)this + 26720));
  *((_OWORD *)this + 3240) = 0u;
  *((_OWORD *)this + 3239) = 0u;
  *((_OWORD *)this + 3238) = 0u;
  *((_OWORD *)this + 3237) = 0u;
  *((_OWORD *)this + 3236) = 0u;
  *(_OWORD *)((char *)this + 51852) = 0u;
  *((void *)this + 6484) = (unint64_t)(*(float *)&Phase::SpatialModeler::TailCorrection::sMinTimeBetweenLogs_sec
                                              * 24000000.0);
  *((void *)this + 6485) = 0;
  *((_DWORD *)this + 12972) = 0;
  *((unsigned char *)this + 51896) = 0;
  *((void *)this + 6488) = 0;
  *((void *)this + 6490) = 0;
  *((void *)this + 6489) = 0;
  *((_OWORD *)this + 3246) = 0u;
  *((_OWORD *)this + 3247) = 0u;
  *((_OWORD *)this + 3248) = xmmword_2220E8170;
  *((_DWORD *)this + 12996) = 0;
  uint64_t v22 = *((void *)this + 6);
  if (v22)
  {
    uint64_t v23 = (char *)operator new(0x18uLL);
    uint64_t v24 = v23;
    uint64_t v25 = 0;
    int v26 = v23 + 24;
    *(_OWORD *)uint64_t v23 = constinit_4;
    *((void *)v23 + 2) = 31;
    while (*(void *)&v23[v25] != v22)
    {
      v25 += 8;
      if (v25 == 24) {
        goto LABEL_10;
      }
    }
    int v26 = &v23[v25];
LABEL_10:
    if (v26 - v23 == 24)
    {
      __int16 v27 = **(NSObject ***)(Phase::Logger::GetInstance((Phase::Logger *)v23) + 1184);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        double v28 = *((double *)this + 6);
        *(_DWORD *)buf = 136315650;
        uint64_t v44 = "RoomSimulationModelerBase.cpp";
        __int16 v45 = 1024;
        int v46 = 30;
        __int16 v47 = 2048;
        double v48 = v28;
        _os_log_impl(&dword_221E5E000, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d Unsupported room simulation internal subband count: %zu\n", buf, 0x1Cu);
      }
      *((void *)this + 6) = 10;
    }
    operator delete(v24);
  }
  else
  {
    *((void *)this + 6) = 10;
  }
  uint64_t v29 = (Phase::Logger *)Phase::Logger::GetInstance(v21);
  *((unsigned char *)this + 1044) = *((unsigned char *)v29 + 1510);
  uint64_t v30 = **(NSObject ***)(Phase::Logger::GetInstance(v29) + 1184);
  BOOL v31 = os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT);
  if (v31)
  {
    int v32 = *((unsigned __int8 *)this + 1044);
    *(_DWORD *)buf = 136315650;
    uint64_t v44 = "RoomChangeDetector.hpp";
    __int16 v45 = 1024;
    int v46 = 240;
    __int16 v47 = 1024;
    LODWORD(v48) = v32;
    _os_log_impl(&dword_221E5E000, v30, OS_LOG_TYPE_DEFAULT, "%25s:%-5d RoomChangeDetector::ReadDefaultsWriteFlags - mLogRoomChangeDetectorData %d", buf, 0x18u);
  }
  float v33 = (Phase::Logger *)Phase::Logger::GetInstance((Phase::Logger *)v31);
  *((unsigned char *)this + 1045) = *((unsigned char *)v33 + 1512);
  uint64_t v34 = **(NSObject ***)(Phase::Logger::GetInstance(v33) + 1184);
  BOOL v35 = os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT);
  if (v35)
  {
    int v36 = *((unsigned __int8 *)this + 1045);
    *(_DWORD *)buf = 136315650;
    uint64_t v44 = "RoomChangeDetector.hpp";
    __int16 v45 = 1024;
    int v46 = 246;
    __int16 v47 = 1024;
    LODWORD(v48) = v36;
    _os_log_impl(&dword_221E5E000, v34, OS_LOG_TYPE_DEFAULT, "%25s:%-5d RoomChangeDetector::ReadDefaultsWriteFlags - mEnableRoomChangeMfpFixedSE %d", buf, 0x18u);
  }
  int8x16_t v37 = (Phase::Logger *)Phase::Logger::GetInstance((Phase::Logger *)v35);
  *((_DWORD *)this + 262) = *((_DWORD *)v37 + 379);
  float v38 = **(NSObject ***)(Phase::Logger::GetInstance(v37) + 1184);
  if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
  {
    double v39 = *((float *)this + 262);
    *(_DWORD *)buf = 136315650;
    uint64_t v44 = "RoomChangeDetector.hpp";
    __int16 v45 = 1024;
    int v46 = 252;
    __int16 v47 = 2048;
    double v48 = v39;
    _os_log_impl(&dword_221E5E000, v38, OS_LOG_TYPE_DEFAULT, "%25s:%-5d RoomChangeDetector::ReadDefaultsWriteFlags - mRoomChangeMfpSE %f (NaN == non set, will be ignored)", buf, 0x1Cu);
  }
  char v40 = *((unsigned char *)this + 1045);
  int v41 = *((_DWORD *)this + 263);
  *((float *)this + 210) = *((float *)this + 262) / 2.8284;
  *(void *)((char *)this + 844) = 0x4100000040395F97;
  *((unsigned char *)this + 852) = v40;
  *((_DWORD *)this + 214) = v41;
  *((_OWORD *)this + 55) = xmmword_2220E8180;
  *((_OWORD *)this + 56) = xmmword_2220E8190;
  *((_DWORD *)this + 228) = 0x40000000;
  *((unsigned char *)this + 916) = 1;
  *((void *)this + 115) = 0;
  *((_DWORD *)this + 232) = 0;
  return this;
}

void sub_22205E57C(_Unwind_Exception *a1)
{
  float v10 = v8;
  operator delete(v10);
  uint64_t v12 = v9[11];
  v9[11] = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t v13 = v9[10];
  v9[10] = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  float v14 = (std::__shared_weak_count *)v9[9];
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  Phase::SpatialModeler::RoomSimulation::PersistingSimulationData::~PersistingSimulationData(v7);
  Phase::SpatialModeler::RoomSimulation::PersistingSimulationData::~PersistingSimulationData(v6);
  Phase::SpatialModeler::HistogramPtrStack::Clear((Phase::SpatialModeler::HistogramPtrStack *)(v1 + 166));
  uint64_t v15 = v1[164];
  v1[164] = 0;
  if (v15) {
    std::default_delete<caulk::concurrent::multi_buffer<Phase::SpatialModeler::RayTracerState,3>>::operator()[abi:ne180100]((uint64_t)(v1 + 164), v15);
  }
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(v5);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(v3);
  std::error_category::~error_category(v4);
  *uint64_t v1 = &unk_26D471808;
  std::error_category::~error_category(v2);
  _Unwind_Resume(a1);
}

void sub_22205E6A4(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x22205E69CLL);
}

void Phase::SpatialModeler::RoomSimulation::PersistingSimulationData::~PersistingSimulationData(Phase::SpatialModeler::RoomSimulation::PersistingSimulationData *this)
{
  uint64_t v2 = (void *)*((void *)this + 3158);
  if (v2)
  {
    *((void *)this + 3159) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 3149);
  if (v3)
  {
    *((void *)this + 3150) = v3;
    operator delete(v3);
  }
  float v4 = (void *)*((void *)this + 3146);
  if (v4)
  {
    *((void *)this + 3147) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 3143);
  if (v5)
  {
    *((void *)this + 3144) = v5;
    operator delete(v5);
  }
  Phase::SpatialModeler::RayTracerState::~RayTracerState((void **)this + 10);

  std::mutex::~mutex((std::mutex *)this);
}

void Phase::SpatialModeler::RoomSimulation::InitERtoLRModelerCache(Phase::SpatialModeler::RoomSimulation *this)
{
  if (!atomic_fetch_add(&Phase::SpatialModeler::RoomSimulation::sERtoLRModelerCacheReferenceCounter, 1u)) {
    operator new();
  }
}

uint64_t Phase::SpatialModeler::RoomSimulation::DeinitERtoLRModelerCache(Phase::SpatialModeler::RoomSimulation *this)
{
  if (atomic_fetch_add(&Phase::SpatialModeler::RoomSimulation::sERtoLRModelerCacheReferenceCounter, 0xFFFFFFFF) == 1)
  {
    uint64_t v1 = Phase::SpatialModeler::RoomSimulation::psERtoLRModelerCache;
    if (Phase::SpatialModeler::RoomSimulation::psERtoLRModelerCache)
    {
      uint64_t v2 = 75216;
      uint64_t v3 = 50160;
      do
      {
        if (*(unsigned char *)(v1 + v2)) {
          Phase::SpatialModeler::RayTracerState::~RayTracerState((void **)(v1 + v3));
        }
        v3 -= 25072;
        v2 -= 25072;
      }
      while (v2);
      uint64_t result = MEMORY[0x223C938A0](v1, 0x10F2C409C7F06A9);
    }
    Phase::SpatialModeler::RoomSimulation::psERtoLRModelerCache = 0;
  }
  return result;
}

void Phase::SpatialModeler::RoomSimulation::StoreRayTracerStateToERtoLRModelerCache(Phase::SpatialModeler::RoomSimulation *this, Phase::SpatialModeler::RayTracerState *a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](this);
  v6[3133] = *(void **)MEMORY[0x263EF8340];
  if (Phase::SpatialModeler::RoomSimulation::psERtoLRModelerCache)
  {
    uint64_t v3 = (const Phase::SpatialModeler::RayTracerState *)v2;
    float v4 = (unsigned char *)(v2 + 25041);
    *(unsigned char *)(v2 + 25041) = 1;
    *(std::chrono::steady_clock::time_point *)(v2 + 25048) = std::chrono::steady_clock::now();
    uint64_t v5 = (unsigned int *)Phase::SpatialModeler::RoomSimulation::psERtoLRModelerCache;
    Phase::SpatialModeler::RayTracerState::RayTracerState((Phase::SpatialModeler::RayTracerState *)v6, v3);
    caulk::concurrent::multi_buffer<Phase::SpatialModeler::RayTracerState,3>::write(v5, (const Phase::SpatialModeler::RayTracerState *)v6);
    Phase::SpatialModeler::RayTracerState::~RayTracerState(v6);
    unsigned char *v4 = 0;
  }
}

void sub_22205E918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void Phase::SpatialModeler::RoomSimulation::PersistingSimulationData::InitPersistingSimulationData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, Phase::SpatialModeler::RayTracerState *a6)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 25120))
  {
    if (*(void *)(a1 + 22656) != *(void *)(a5 + 8)
      || (Phase::SpatialModeler::RayTracerState *)*(unsigned int *)(a1 + 412) != a6)
    {
      float v6 = **(NSObject ***)(Phase::Logger::GetInstance((Phase::Logger *)a1) + 1184);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        int v8 = 136315394;
        float v9 = "RoomSimulationModelerBase.cpp";
        __int16 v10 = 1024;
        int v11 = 135;
        _os_log_impl(&dword_221E5E000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d Spatial modeler queried with a changed listener or subband count. This is not supported yet.", (uint8_t *)&v8, 0x12u);
      }
    }
  }
  else
  {
    uint64_t v7 = a1 + 80;
    Phase::SpatialModeler::RayTracerState::InitRayTracerState(v7, a2, a3, a4, a5, a6);
  }
}

float Phase::Controller::sClamp<float>(Phase::Logger *a1, float a2, float a3, float a4)
{
  float v4 = a2;
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (a2 < a3 || a2 > a4)
  {
    int v8 = **(NSObject ***)(Phase::Logger::GetInstance(a1) + 704);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      int v10 = 136316162;
      int v11 = "CvmParameter.hpp";
      __int16 v12 = 1024;
      int v13 = 33;
      __int16 v14 = 2048;
      double v15 = v4;
      __int16 v16 = 2048;
      double v17 = a3;
      __int16 v18 = 2048;
      double v19 = a4;
      _os_log_impl(&dword_221E5E000, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d Value is out of bounds. Clamping %f to range [%f, %f]", (uint8_t *)&v10, 0x30u);
    }
    return fminf(fmaxf(v4, a3), a4);
  }
  return v4;
}

BOOL Phase::SpatialModeler::TimeLimitTermination::ShouldFinishSimulation(Phase::SpatialModeler::TimeLimitTermination *this, const Phase::SpatialModeler::RayTracerState *a2)
{
  v3.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  int v4 = *(_DWORD *)(*(void *)a2 + 32);
  if (v4 == 3)
  {
    float v5 = *((float *)a2 + 12);
    float v7 = *((float *)a2 + 31);
  }
  else
  {
    float v5 = 0.0;
    float v6 = 0.0;
    if (v4 != 2) {
      goto LABEL_6;
    }
    float v5 = *((float *)a2 + 13);
    float v7 = *((float *)a2 + 30);
  }
  float v6 = 1.0 / v7;
LABEL_6:
  float v8 = (float)(v3.__d_.__rep_ - *((void *)a2 + 2414)) / 1000000000.0;
  BOOL v10 = v8 > v5 && *((_DWORD *)a2 + 4832) >= *((_DWORD *)a2 + 43);
  return v8 > (float)(v6 * 0.8) || v10;
}

BOOL Phase::SpatialModeler::DeterministicTermination::ShouldFinishSimulation(Phase::SpatialModeler::DeterministicTermination *this, const Phase::SpatialModeler::RayTracerState *a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  unint64_t v4 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  if (v3 < v4)
  {
    *((void *)this + 2) = v3 + 1;
  }
  else
  {
    v6.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    uint64_t v7 = *((void *)a2 + 2414);
    *((void *)this + 2) = 0;
    float v8 = **(NSObject ***)(Phase::Logger::GetInstance((Phase::Logger *)v6.__d_.__rep_) + 1184);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      int v11 = 136316162;
      uint64_t v9 = *((void *)this + 2);
      __int16 v12 = "RoomSimulationStrategies.cpp";
      __int16 v13 = 1024;
      int v14 = 49;
      __int16 v15 = 2048;
      uint64_t v16 = v9;
      __int16 v17 = 1024;
      int v18 = 1;
      __int16 v19 = 2048;
      double v20 = (float)((float)(v6.__d_.__rep_ - v7) / 1000000000.0);
      _os_log_impl(&dword_221E5E000, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d DeterministicTermination mQueryCount %zu shouldFinish %d elapsed time %f s", (uint8_t *)&v11, 0x2Cu);
    }
  }
  return v3 >= v4;
}

void Phase::SpatialModeler::DefaultRayDistribution::DefaultRayDistribution(Phase::SpatialModeler::DefaultRayDistribution *this)
{
  *(void *)this = &unk_26D47A5F0;
  *((void *)this + 2) = 0;
  operator new();
}

void sub_22205EDDC(_Unwind_Exception *a1)
{
  MEMORY[0x223C938A0](v2, 0x1020C40B3A03649);
  uint64_t v4 = *v1;
  *uint64_t v1 = 0;
  if (v4) {
    std::default_delete<Phase::SpatialModeler::LaunchConfig>::operator()[abi:ne180100]((uint64_t)v1, v4);
  }
  _Unwind_Resume(a1);
}

uint64_t Phase::SpatialModeler::DefaultRayDistribution::NextRay@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 16);
  unint64_t v3 = *(unsigned int *)(this + 8);
  if (*(void *)(v2 + 56) <= v3)
  {
    uint64_t v5 = 0;
    int v6 = 0;
  }
  else
  {
    uint64_t v4 = *(void *)(v2 + 16) + 12 * v3;
    uint64_t v5 = *(void *)v4;
    int v6 = *(_DWORD *)(v4 + 8);
  }
  *(void *)a2 = v5;
  *(_DWORD *)(a2 + 8) = v6;
  *(_DWORD *)(this + 8) = (v3 + 1) % *(_DWORD *)(this + 12);
  return this;
}

void Phase::SpatialModeler::DeterministicTermination::~DeterministicTermination(Phase::SpatialModeler::DeterministicTermination *this)
{
}

void Phase::SpatialModeler::TimeLimitTermination::~TimeLimitTermination(Phase::SpatialModeler::TimeLimitTermination *this)
{
}

void Phase::SpatialModeler::DefaultRayDistribution::~DefaultRayDistribution(Phase::SpatialModeler::DefaultRayDistribution *this)
{
  *(void *)this = &unk_26D47A5F0;
  uint64_t v3 = *((void *)this + 2);
  uint64_t v1 = (void *)((char *)this + 16);
  uint64_t v2 = v3;
  *uint64_t v1 = 0;
  if (v3) {
    std::default_delete<Phase::SpatialModeler::LaunchConfig>::operator()[abi:ne180100]((uint64_t)v1, v2);
  }
}

{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_26D47A5F0;
  uint64_t v3 = *((void *)this + 2);
  uint64_t v1 = (void *)((char *)this + 16);
  uint64_t v2 = v3;
  *uint64_t v1 = 0;
  if (v3) {
    std::default_delete<Phase::SpatialModeler::LaunchConfig>::operator()[abi:ne180100]((uint64_t)v1, v2);
  }

  JUMPOUT(0x223C938A0);
}

uint64_t Phase::SpatialModeler::RayDistributionStrategyBase::GetNextRayIndex(Phase::SpatialModeler::RayDistributionStrategyBase *this)
{
  return *((unsigned int *)this + 2);
}

void std::default_delete<Phase::SpatialModeler::LaunchConfig>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)(a2 + 16));
    std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)(a2 + 24));
    JUMPOUT(0x223C938A0);
  }
}

void Phase::SpatialModeler::TRAP::RT60Processor::Process(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v194 = *MEMORY[0x263EF8340];
  long long v8 = a1[5];
  uint64_t v9 = a4 + 21036;
  long long v136 = a1[4];
  long long v137 = v8;
  long long v10 = a1[7];
  long long v138 = a1[6];
  long long v139 = v10;
  long long v11 = a1[1];
  long long v132 = *a1;
  long long v133 = v11;
  long long v12 = a1[3];
  long long v134 = a1[2];
  long long v135 = v12;
  long long v13 = *(_OWORD *)(a2 + 80);
  long long v128 = *(_OWORD *)(a2 + 64);
  long long v129 = v13;
  long long v14 = *(_OWORD *)(a2 + 112);
  long long v130 = *(_OWORD *)(a2 + 96);
  long long v131 = v14;
  long long v15 = *(_OWORD *)(a2 + 16);
  float32x4_t v124 = *(float32x4_t *)a2;
  long long v125 = v15;
  long long v16 = *(_OWORD *)(a2 + 48);
  float32x4_t v126 = *(float32x4_t *)(a2 + 32);
  long long v127 = v16;
  long long v17 = *(_OWORD *)(a4 + 20112);
  long long v120 = *(_OWORD *)(a4 + 20096);
  long long v121 = v17;
  long long v18 = *(_OWORD *)(a4 + 20144);
  long long v122 = *(_OWORD *)(a4 + 20128);
  long long v123 = v18;
  long long v19 = *(_OWORD *)(a4 + 20048);
  long long v116 = *(_OWORD *)(a4 + 20032);
  long long v117 = v19;
  long long v20 = *(_OWORD *)(a4 + 20080);
  long long v118 = *(_OWORD *)(a4 + 20064);
  long long v119 = v20;
  long long v21 = *(_OWORD *)(a4 + 20240);
  long long v112 = *(_OWORD *)(a4 + 20224);
  long long v113 = v21;
  long long v22 = *(_OWORD *)(a4 + 20272);
  long long v114 = *(_OWORD *)(a4 + 20256);
  long long v115 = v22;
  long long v23 = *(_OWORD *)(a4 + 20176);
  long long v108 = *(_OWORD *)(a4 + 20160);
  long long v109 = v23;
  long long v24 = *(_OWORD *)(a4 + 20208);
  long long v110 = *(_OWORD *)(a4 + 20192);
  long long v111 = v24;
  long long v25 = *(_OWORD *)(a4 + 20368);
  v106[4] = *(_OWORD *)(a4 + 20352);
  v106[5] = v25;
  long long v26 = *(_OWORD *)(a4 + 20400);
  v106[6] = *(_OWORD *)(a4 + 20384);
  long long v107 = v26;
  long long v27 = *(_OWORD *)(a4 + 20304);
  v106[0] = *(_OWORD *)(a4 + 20288);
  v106[1] = v27;
  long long v28 = *(_OWORD *)(a4 + 20336);
  v106[2] = *(_OWORD *)(a4 + 20320);
  v106[3] = v28;
  long long v29 = *(_OWORD *)(a4 + 20496);
  v104[4] = *(_OWORD *)(a4 + 20480);
  v104[5] = v29;
  long long v30 = *(_OWORD *)(a4 + 20528);
  v104[6] = *(_OWORD *)(a4 + 20512);
  long long v105 = v30;
  long long v31 = *(_OWORD *)(a4 + 20432);
  v104[0] = *(_OWORD *)(a4 + 20416);
  v104[1] = v31;
  long long v32 = *(_OWORD *)(a4 + 20464);
  v104[2] = *(_OWORD *)(a4 + 20448);
  v104[3] = v32;
  float v33 = *(float *)(a4 + 21036);
  BOOL IsExpectedInputSubbandCount = Phase::SpatialModeler::TRAP::IsExpectedInputSubbandCount((uint64_t)&v132, (uint64_t)"inOutAcousticReverbTime");
  if (IsExpectedInputSubbandCount)
  {
    BOOL IsExpectedInputSubbandCount = Phase::SpatialModeler::TRAP::IsExpectedInputSubbandCount((uint64_t)&v124, (uint64_t)"inOutAcousticConfidence");
    if (IsExpectedInputSubbandCount)
    {
      BOOL IsExpectedInputSubbandCount = Phase::SpatialModeler::TRAP::IsExpectedInputSubbandCount((uint64_t)&v116, (uint64_t)"inOutVisualReverbTime");
      if (IsExpectedInputSubbandCount)
      {
        BOOL IsExpectedInputSubbandCount = Phase::SpatialModeler::TRAP::IsExpectedInputSubbandCount((uint64_t)&v108, (uint64_t)"inOutVisualConfidence");
        if (IsExpectedInputSubbandCount)
        {
          BOOL IsExpectedInputSubbandCount = Phase::SpatialModeler::TRAP::IsExpectedInputSubbandCount((uint64_t)v106, (uint64_t)"inOutSeatbeltReverbTime");
          if (IsExpectedInputSubbandCount)
          {
            BOOL IsExpectedInputSubbandCount = Phase::SpatialModeler::TRAP::IsExpectedInputSubbandCount((uint64_t)v104, (uint64_t)"inOutSeatbeltConfidence");
            if (IsExpectedInputSubbandCount)
            {
              for (uint64_t i = 0; i != 10; ++i)
                Phase::SpatialModeler::TRAP::CleanInputReverbTimeAndConfidence((Phase::SpatialModeler::TRAP *)((char *)&v132 + i * 4), &v124.f32[i], v35);
              for (uint64_t j = 0; j != 40; j += 4)
                Phase::SpatialModeler::TRAP::CleanInputReverbTimeAndConfidence((Phase::SpatialModeler::TRAP *)((char *)&v116 + j), (float *)((char *)&v108 + j), v35);
              for (uint64_t k = 0; k != 40; k += 4)
                Phase::SpatialModeler::TRAP::CleanInputReverbTimeAndConfidence((Phase::SpatialModeler::TRAP *)((char *)v106 + k), (float *)((char *)v104 + k), v35);
              float v33 = fminf(fmaxf(v33, 0.0), 1.0);
            }
          }
        }
      }
    }
  }
  float v41 = Phase::SpatialModeler::TRAP::CalculateRoomChangeConfidence((Phase::SpatialModeler::TRAP *)IsExpectedInputSubbandCount, v33);
  if (*(void *)(a4 + 21432) == *(void *)(a3 + 736))
  {
    v40.i32[0] = *(_DWORD *)(v9 + 404);
  }
  else
  {
    __int16 v42 = **(NSObject ***)(Phase::Logger::GetInstance((Phase::Logger *)v39) + 1184);
    uint64_t v39 = os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT);
    if (v39)
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "RT60Processor.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 46;
      _os_log_impl(&dword_221E5E000, v42, OS_LOG_TYPE_DEFAULT, "%25s:%-5d TRAP detected new acoustic parameters", buf, 0x12u);
    }
    *(void *)(a4 + 21432) = *(void *)(a3 + 736);
    *(_DWORD *)(v9 + 404) = 0;
    v40.i64[0] = 0;
  }
  if (v40.f32[0] < v41) {
    *(float *)(v9 + 404) = v41;
  }
  int v43 = *(_DWORD *)(a3 + 24);
  if (v43 == 2) {
    goto LABEL_25;
  }
  if (v43 != -1)
  {
    char v61 = 0;
    goto LABEL_45;
  }
  uint64_t v44 = Phase::SpatialModeler::TRAP::TP((Phase::SpatialModeler::TRAP *)v39);
  uint64_t v39 = Phase::operator==<float>((uint64_t)a1, (uint64_t)(v44 + 144));
  if (v39
    && (__int16 v45 = Phase::SpatialModeler::TRAP::TP((Phase::SpatialModeler::TRAP *)v39),
        uint64_t v39 = Phase::operator==<float>(a2, (uint64_t)(v45 + 272)),
        v39))
  {
LABEL_25:
    uint64_t v46 = HIDWORD(v105);
    if (HIDWORD(v105) <= 1uLL) {
      float v47 = 0.0;
    }
    else {
      float v47 = *(float *)v104;
    }
    if (HIDWORD(v105))
    {
      double v48 = (float *)v104;
      do
      {
        float v49 = *v48++;
        float v50 = v49;
        if (v47 < v49) {
          float v47 = v50;
        }
        --v46;
      }
      while (v46);
    }
    char v51 = (float *)Phase::SpatialModeler::TRAP::TP((Phase::SpatialModeler::TRAP *)v39);
    if (v47 >= v51[126])
    {
      __int16 v62 = (float *)Phase::SpatialModeler::TRAP::TP((Phase::SpatialModeler::TRAP *)v51);
      uint64_t v63 = HIDWORD(v107);
      memset(buf, 0, sizeof(buf));
      long long v141 = 0u;
      long long v142 = 0u;
      long long v143 = 0u;
      long long v144 = 0u;
      memset(v145, 0, 28);
      *(_DWORD *)&v145[28] = HIDWORD(v107);
      if (HIDWORD(v107))
      {
        float v64 = v62[113];
        int8x16_t v65 = buf;
        uint64_t v66 = (float *)v106;
        do
        {
          float v67 = *v66++;
          *(float *)int8x16_t v65 = v64 * v67;
          v65 += 4;
          --v63;
        }
        while (v63);
      }
      long long v136 = v143;
      long long v137 = v144;
      long long v138 = *(_OWORD *)v145;
      long long v139 = *(_OWORD *)&v145[16];
      long long v132 = *(_OWORD *)buf;
      long long v133 = *(_OWORD *)&buf[16];
      long long v134 = v141;
      long long v135 = v142;
      uint64_t v39 = (uint64_t)Phase::SpatialModeler::TRAP::TP((Phase::SpatialModeler::TRAP *)v62);
      uint64_t v68 = HIDWORD(v131);
      if (HIDWORD(v131))
      {
        __int32 v69 = *(_DWORD *)(v39 + 456);
        uint64_t v70 = &v124;
        do
        {
          v70->i32[0] = v69;
          uint64_t v70 = (float32x4_t *)((char *)v70 + 4);
          --v68;
        }
        while (v68);
      }
    }
    else
    {
      char v52 = Phase::SpatialModeler::TRAP::TP((Phase::SpatialModeler::TRAP *)v51);
      long long v53 = *((_OWORD *)v52 + 14);
      long long v136 = *((_OWORD *)v52 + 13);
      long long v137 = v53;
      long long v54 = *((_OWORD *)v52 + 16);
      long long v138 = *((_OWORD *)v52 + 15);
      long long v139 = v54;
      long long v55 = *((_OWORD *)v52 + 10);
      long long v132 = *((_OWORD *)v52 + 9);
      long long v133 = v55;
      long long v56 = *((_OWORD *)v52 + 12);
      long long v134 = *((_OWORD *)v52 + 11);
      long long v135 = v56;
      uint64_t v39 = (uint64_t)Phase::SpatialModeler::TRAP::TP((Phase::SpatialModeler::TRAP *)v52);
      long long v57 = *(_OWORD *)(v39 + 352);
      long long v128 = *(_OWORD *)(v39 + 336);
      long long v129 = v57;
      long long v58 = *(_OWORD *)(v39 + 384);
      long long v130 = *(_OWORD *)(v39 + 368);
      long long v131 = v58;
      long long v59 = *(_OWORD *)(v39 + 288);
      float32x4_t v124 = *(float32x4_t *)(v39 + 272);
      long long v125 = v59;
      float32x4_t v40 = *(float32x4_t *)(v39 + 304);
      long long v60 = *(_OWORD *)(v39 + 320);
      float32x4_t v126 = v40;
      long long v127 = v60;
    }
    *(_DWORD *)(v9 + 404) = 0;
    char v61 = 1;
  }
  else
  {
    char v61 = 0;
  }
  int v43 = *(_DWORD *)(a3 + 24);
LABEL_45:
  v40.i32[0] = 1.0;
  if (v43 != 3)
  {
    float v71 = *(float *)(v9 + 404);
    uint64_t v72 = Phase::SpatialModeler::TRAP::TP((Phase::SpatialModeler::TRAP *)v39);
    v40.f32[0] = 1.0 - powf(v71, *((float *)v72 + 123));
  }
  __int32 v103 = v40.i32[0];
  Phase::Subbands<float>::operator*=(&v124, (float *)&v103, v40);
  if (*(_DWORD *)(a3 + 24) == -1)
  {
    unsigned int v74 = (float32x4_t *)Phase::SpatialModeler::TRAP::TP(v73);
    Phase::Subbands<float>::operator*=(&v124, v74 + 1);
  }
  long long v143 = v136;
  long long v144 = v137;
  *(_OWORD *)float v145 = v138;
  *(_OWORD *)&v145[16] = v139;
  *(_OWORD *)buf = v132;
  *(_OWORD *)&buf[16] = v133;
  long long v141 = v134;
  long long v142 = v135;
  float32x4_t v148 = v126;
  long long v149 = v127;
  float32x4_t v146 = v124;
  long long v147 = v125;
  long long v153 = v131;
  long long v151 = v129;
  long long v152 = v130;
  long long v150 = v128;
  long long v157 = v119;
  long long v156 = v118;
  long long v155 = v117;
  long long v154 = v116;
  long long v161 = v123;
  long long v160 = v122;
  long long v159 = v121;
  long long v158 = v120;
  long long v165 = v111;
  long long v164 = v110;
  long long v163 = v109;
  long long v162 = v108;
  long long v169 = v115;
  long long v168 = v114;
  long long v167 = v113;
  long long v166 = v112;
  long long v193 = 0u;
  long long v192 = 0u;
  long long v191 = 0u;
  long long v190 = 0u;
  long long v189 = 0u;
  long long v188 = 0u;
  long long v187 = 0u;
  long long v186 = 0u;
  long long v185 = 0u;
  long long v184 = 0u;
  long long v183 = 0u;
  long long v182 = 0u;
  long long v181 = 0u;
  long long v180 = 0u;
  long long v179 = 0u;
  long long v178 = 0u;
  long long v177 = 0u;
  long long v176 = 0u;
  long long v175 = 0u;
  long long v174 = 0u;
  long long v173 = 0u;
  long long v172 = 0u;
  long long v171 = 0u;
  long long v170 = 0u;
  Phase::SpatialModeler::TRAP::MixMultibandValuesAndConfidences((uint64_t)buf, &v97, (float (*)(float))Phase::Logarithm<float>, (float (*)(float))Phase::Exponential<float>, (float (*)(float, float, float, float))Phase::SpatialModeler::TRAP::CalculateAcousticAndVisualMix, (float (*)(float))Phase::SpatialModeler::TRAP::RT60Processor::Process(Phase::Subbands<float> const&,Phase::Subbands<float> const&,Phase::Geometry::Scene const&,Phase::SpatialModeler::RayTracerState &)::$_0::__invoke, (float (*)(float))Phase::SpatialModeler::TRAP::RT60Processor::Process(Phase::Subbands<float> const&,Phase::Subbands<float> const&,Phase::Geometry::Scene const&,Phase::SpatialModeler::RayTracerState &)::$_1::__invoke);
  long long v75 = v175;
  *(_OWORD *)(a4 + 21232) = v174;
  *(_OWORD *)(a4 + 21248) = v75;
  long long v76 = v177;
  *(_OWORD *)(a4 + 21264) = v176;
  *(_OWORD *)(a4 + 21280) = v76;
  long long v77 = v171;
  *(_OWORD *)(a4 + 21168) = v170;
  *(_OWORD *)(a4 + 21184) = v77;
  long long v78 = v173;
  *(_OWORD *)(a4 + 21200) = v172;
  *(_OWORD *)(a4 + 21216) = v78;
  long long v79 = v178;
  long long v80 = v179;
  long long v81 = v180;
  *(_OWORD *)(a4 + 21344) = v181;
  *(_OWORD *)(a4 + 21328) = v81;
  *(_OWORD *)(a4 + 21312) = v80;
  *(_OWORD *)(a4 + 21296) = v79;
  long long v82 = v182;
  long long v83 = v183;
  long long v84 = v184;
  *(_OWORD *)(a4 + 21408) = v185;
  *(_OWORD *)(a4 + 21392) = v84;
  *(_OWORD *)(a4 + 21376) = v83;
  *(_OWORD *)(a4 + 21360) = v82;
  LODWORD(v83) = v97.i32[0];
  *(_DWORD *)(v9 + 388) = v97.i32[1];
  *(unsigned char *)(a4 + 23664) = v61;
  *(_DWORD *)(a4 + 23668) = v102;
  LODWORD(v82) = v98;
  LODWORD(v84) = v99;
  *(_DWORD *)(a4 + 23676) = v83;
  *(_DWORD *)(a4 + 23680) = v82;
  LODWORD(v83) = v101;
  *(_DWORD *)(a4 + 23684) = v100;
  *(_DWORD *)(a4 + 23700) = v84;
  *(_DWORD *)(a4 + 23704) = v83;
  LODWORD(v83) = v103;
  *(_DWORD *)(a4 + 23724) = *(_DWORD *)(v9 + 404);
  *(_DWORD *)(a4 + 23728) = v83;
  long long v85 = *a1;
  long long v86 = a1[1];
  long long v87 = a1[2];
  *(_OWORD *)(a4 + 23792) = a1[3];
  *(_OWORD *)(a4 + 23776) = v87;
  *(_OWORD *)(a4 + 23760) = v86;
  *(_OWORD *)(a4 + 23744) = v85;
  long long v88 = a1[4];
  long long v89 = a1[5];
  long long v90 = a1[6];
  *(_OWORD *)(a4 + 23856) = a1[7];
  *(_OWORD *)(a4 + 23840) = v90;
  *(_OWORD *)(a4 + 23824) = v89;
  *(_OWORD *)(a4 + 23808) = v88;
  long long v91 = *(_OWORD *)(a2 + 96);
  long long v92 = *(_OWORD *)(a2 + 112);
  long long v93 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a4 + 23936) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a4 + 23984) = v92;
  *(_OWORD *)(a4 + 23968) = v91;
  *(_OWORD *)(a4 + 23952) = v93;
  float32x4_t v94 = *(float32x4_t *)a2;
  long long v95 = *(_OWORD *)(a2 + 16);
  long long v96 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a4 + 23920) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a4 + 23904) = v96;
  *(_OWORD *)(a4 + 23888) = v95;
  *(float32x4_t *)(a4 + 23872) = v94;
}

float Phase::SpatialModeler::TRAP::RT60Processor::Process(Phase::Subbands<float> const&,Phase::Subbands<float> const&,Phase::Geometry::Scene const&,Phase::SpatialModeler::RayTracerState &)::$_0::__invoke(Phase::SpatialModeler::TRAP *a1, float a2)
{
  float v3 = *((float *)Phase::SpatialModeler::TRAP::TP(a1) + 105);

  return powf(a2, v3);
}

float Phase::SpatialModeler::TRAP::RT60Processor::Process(Phase::Subbands<float> const&,Phase::Subbands<float> const&,Phase::Geometry::Scene const&,Phase::SpatialModeler::RayTracerState &)::$_1::__invoke(Phase::SpatialModeler::TRAP *a1, float a2)
{
  float v3 = *((float *)Phase::SpatialModeler::TRAP::TP(a1) + 106);

  return powf(a2, v3);
}

void Phase::SpatialModeler::SceneObserver::DetectSceneChanges(void *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X3>, Phase::SpatialModeler::RayTracerState *a5@<X4>, long long *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v207 = *MEMORY[0x263EF8340];
  *(_OWORD *)(a7 + 62) = 0u;
  *(_OWORD *)(a7 + 32) = 0u;
  *(_OWORD *)(a7 + 48) = 0u;
  *(_OWORD *)a7 = 0u;
  *(_OWORD *)(a7 + 16) = 0u;
  long long v13 = (uint64_t *)a1[2];
  while (v13)
  {
    long long v14 = *(void **)a2;
    long long v15 = *(void **)(a2 + 8);
    if (*(void **)a2 == v15)
    {
LABEL_6:
      long long v13 = (uint64_t *)std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::erase(a1, v13);
    }
    else
    {
      while (v13[2] != *v14)
      {
        v14 += 7;
        if (v14 == v15) {
          goto LABEL_6;
        }
      }
      long long v13 = (uint64_t *)*v13;
    }
  }
  uint64_t v179 = a4;
  for (uint64_t i = (uint64_t *)a1[7];
        i;
        uint64_t i = (uint64_t *)std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::erase(a1 + 5, i))
  {
    while (i[2] == *a3)
    {
      uint64_t i = (uint64_t *)*i;
      if (!i) {
        goto LABEL_13;
      }
    }
  }
LABEL_13:
  long long v174 = (float *)(a1 + 5);
  long long v175 = a3;
  long long v177 = a6;
  long long v186 = a1;
  uint64_t v17 = *(void *)(a2 + 8) - *(void *)a2;
  if (v17)
  {
    uint64_t v18 = 0;
    unint64_t v19 = v17 / 56;
    if (v19 <= 1) {
      uint64_t v20 = 1;
    }
    else {
      uint64_t v20 = v19;
    }
    uint64_t v21 = a7 + 19;
    uint64_t v22 = a7 + 38;
    uint64_t v23 = a7 + 57;
    uint64_t v184 = v20;
    do
    {
      uint64_t v24 = *(void *)a2 + 56 * v18;
      *(void *)float v196 = *(void *)v24;
      unint64_t v25 = *(void *)v196;
      uint64_t v26 = *(void *)(v24 + 40);
      float32x2_t v191 = *(float32x2_t *)(v24 + 8);
      *(float32x2_t *)&__b[0] = v191;
      float v27 = *(float *)(v24 + 16);
      float v28 = *(float *)(v24 + 20);
      *((void *)&__b[0] + 1) = __PAIR64__(LODWORD(v28), LODWORD(v27));
      int8x16_t v187 = *(int8x16_t *)(v24 + 24);
      __b[1] = v187;
      long long v29 = (float *)std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::find<PHASETapType>(v186, *(unint64_t *)v196);
      if (v29)
      {
        long long v30 = v29;
        Phase::SpatialModeler::SceneObserver::checkForNecessaryUpdates((unsigned char *)a7, v26, (float *)__b, (uint64_t)(v29 + 6));
        float v31 = (float)(vmlas_n_f32(vmuls_lane_f32(v30[25], v191, 1), v30[24], v191.f32[0]) + (float)(v27 * v30[26]))
            + (float)(v28 * v30[27]);
        float v32 = -v31;
        if (v31 >= 0.0) {
          float v32 = v31;
        }
        float v33 = acosf(v32);
        *(unsigned char *)(a7 + 4) |= (float)((float)(v33 + v33) * 57.296) > 20.0;
        float v34 = (float)(vmlas_n_f32(vmuls_lane_f32(v30[33], v191, 1), v30[32], v191.f32[0]) + (float)(v27 * v30[34]))
            + (float)(v28 * v30[35]);
        float v35 = -v34;
        if (v34 >= 0.0) {
          float v35 = v34;
        }
        float v36 = acosf(v35);
        uint64_t v37 = 0;
        *(unsigned char *)(a7 + 23) |= (float)((float)(v36 + v36) * 57.296) > 361.0;
        *((void *)v30 + 3) = v26;
        do
        {
          int v38 = *(unsigned __int8 *)(a7 + v37);
          if (*(unsigned char *)(a7 + v37)) {
            BOOL v39 = 1;
          }
          else {
            BOOL v39 = v37 == 18;
          }
          ++v37;
        }
        while (!v39);
        if (v38)
        {
          *((float32x2_t *)v30 + 4) = v191;
          v30[10] = v27;
          v30[11] = v28;
          *((int8x16_t *)v30 + 3) = v187;
        }
        uint64_t v40 = 0;
        do
        {
          int v41 = *(unsigned __int8 *)(v21 + v40);
          if (*(unsigned char *)(v21 + v40)) {
            BOOL v42 = 1;
          }
          else {
            BOOL v42 = v40 == 18;
          }
          ++v40;
        }
        while (!v42);
        if (v41)
        {
          *((float32x2_t *)v30 + 8) = v191;
          v30[18] = v27;
          v30[19] = v28;
          *((int8x16_t *)v30 + 5) = v187;
        }
        uint64_t v43 = 0;
        do
        {
          int v44 = *(unsigned __int8 *)(v22 + v43);
          if (*(unsigned char *)(v22 + v43)) {
            BOOL v45 = 1;
          }
          else {
            BOOL v45 = v43 == 18;
          }
          ++v43;
        }
        while (!v45);
        if (v44)
        {
          *((float32x2_t *)v30 + 12) = v191;
          v30[26] = v27;
          v30[27] = v28;
          *((int8x16_t *)v30 + 7) = v187;
        }
        uint64_t v46 = 0;
        do
        {
          int v47 = *(unsigned __int8 *)(v23 + v46);
          if (*(unsigned char *)(v23 + v46)) {
            BOOL v48 = 1;
          }
          else {
            BOOL v48 = v46 == 18;
          }
          ++v46;
        }
        while (!v48);
        if (v47)
        {
          *((float32x2_t *)v30 + 16) = v191;
          v30[34] = v27;
          v30[35] = v28;
          *((int8x16_t *)v30 + 9) = v187;
        }
      }
      else
      {
        float v49 = std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SceneObserver::StoredData>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SceneObserver::StoredData>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SceneObserver::StoredData>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SceneObserver::StoredData>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((float *)v186, v25, v196);
        *((void *)v49 + 3) = v26;
        *((float32x2_t *)v49 + 4) = v191;
        *((float *)v49 + 10) = v27;
        *((float *)v49 + 11) = v28;
        *(void *)&long long v50 = vextq_s8(v187, v187, 8uLL).u64[0];
        *((float32x2_t *)&v50 + 1) = v191;
        *((void *)v49 + 6) = v187.i64[0];
        *(_OWORD *)(v49 + 56) = v50;
        *((float *)v49 + 18) = v27;
        *((float *)v49 + 19) = v28;
        *((void *)v49 + 10) = v187.i64[0];
        *(_OWORD *)(v49 + 88) = v50;
        *((float *)v49 + 26) = v27;
        *((float *)v49 + 27) = v28;
        *((void *)v49 + 14) = v187.i64[0];
        *(_OWORD *)(v49 + 120) = v50;
        *((float *)v49 + 34) = v27;
        *((float *)v49 + 35) = v28;
        *((int8x16_t *)v49 + 9) = v187;
        memset((char *)&v204[3] + 11, 0, 19);
        LOWORD(v204[0]) = 256;
        memset((char *)v204 + 2, 0, 18);
        BYTE4(v204[1]) = 1;
        memset((char *)&v204[1] + 5, 0, 18);
        BYTE7(v204[2]) = 1;
        memset((char *)&v204[2] + 8, 0, 18);
        BYTE10(v204[3]) = 1;
        Phase::SpatialModeler::SimulationUpdate::operator|=(a7, (uint64_t)v204);
      }
      ++v18;
    }
    while (v18 != v184);
  }
  unint64_t v51 = *v175;
  uint64_t v52 = v179;
  if (*(_DWORD *)(v179 + 136) > *v175)
  {
    uint64_t v53 = *(void *)(v179 + 120);
    if (*(_DWORD *)(v53 + 24 * v51 + 20) == HIDWORD(v51))
    {
      uint64_t v54 = *(void *)(v53 + 24 * *v175);
      if (v54)
      {
        if (*(_DWORD *)v54 == 2)
        {
          long long v55 = std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::find<PHASETapType>(v174, *v175);
          if (v55)
          {
            long long v56 = v55;
            Phase::SpatialModeler::SceneObserver::checkForNecessaryUpdates((unsigned char *)a7, 0, (float *)(v54 + 48), (uint64_t)(v55 + 3));
            uint64_t v57 = 0;
            do
            {
              int v58 = *(unsigned __int8 *)(a7 + v57);
              if (*(unsigned char *)(a7 + v57)) {
                BOOL v59 = 1;
              }
              else {
                BOOL v59 = v57 == 18;
              }
              ++v57;
            }
            while (!v59);
            if (v58)
            {
              v56[8] = *(_DWORD *)(v54 + 48);
              v56[9] = *(_DWORD *)(v54 + 52);
              v56[10] = *(_DWORD *)(v54 + 56);
              v56[11] = *(_DWORD *)(v54 + 60);
              v56[12] = *(_DWORD *)(v54 + 64);
              v56[13] = *(_DWORD *)(v54 + 68);
              v56[14] = *(_DWORD *)(v54 + 72);
              v56[15] = *(_DWORD *)(v54 + 76);
            }
            uint64_t v60 = 0;
            uint64_t v61 = a7 + 19;
            do
            {
              int v62 = *(unsigned __int8 *)(v61 + v60);
              if (*(unsigned char *)(v61 + v60)) {
                BOOL v63 = 1;
              }
              else {
                BOOL v63 = v60 == 18;
              }
              ++v60;
            }
            while (!v63);
            if (v62)
            {
              v56[16] = *(_DWORD *)(v54 + 48);
              v56[17] = *(_DWORD *)(v54 + 52);
              v56[18] = *(_DWORD *)(v54 + 56);
              v56[19] = *(_DWORD *)(v54 + 60);
              v56[20] = *(_DWORD *)(v54 + 64);
              v56[21] = *(_DWORD *)(v54 + 68);
              v56[22] = *(_DWORD *)(v54 + 72);
              v56[23] = *(_DWORD *)(v54 + 76);
            }
            uint64_t v64 = 0;
            uint64_t v65 = a7 + 38;
            do
            {
              int v66 = *(unsigned __int8 *)(v65 + v64);
              if (*(unsigned char *)(v65 + v64)) {
                BOOL v67 = 1;
              }
              else {
                BOOL v67 = v64 == 18;
              }
              ++v64;
            }
            while (!v67);
            if (v66)
            {
              v56[24] = *(_DWORD *)(v54 + 48);
              v56[25] = *(_DWORD *)(v54 + 52);
              v56[26] = *(_DWORD *)(v54 + 56);
              v56[27] = *(_DWORD *)(v54 + 60);
              v56[28] = *(_DWORD *)(v54 + 64);
              v56[29] = *(_DWORD *)(v54 + 68);
              v56[30] = *(_DWORD *)(v54 + 72);
              v56[31] = *(_DWORD *)(v54 + 76);
            }
            uint64_t v68 = 0;
            uint64_t v69 = a7 + 57;
            do
            {
              int v70 = *(unsigned __int8 *)(v69 + v68);
              if (*(unsigned char *)(v69 + v68)) {
                BOOL v71 = 1;
              }
              else {
                BOOL v71 = v68 == 18;
              }
              ++v68;
            }
            while (!v71);
            if (v70)
            {
              v56[32] = *(_DWORD *)(v54 + 48);
              v56[33] = *(_DWORD *)(v54 + 52);
              v56[34] = *(_DWORD *)(v54 + 56);
              v56[35] = *(_DWORD *)(v54 + 60);
              v56[36] = *(_DWORD *)(v54 + 64);
              v56[37] = *(_DWORD *)(v54 + 68);
              v56[38] = *(_DWORD *)(v54 + 72);
              v56[39] = *(_DWORD *)(v54 + 76);
            }
          }
          else
          {
            int v72 = *(_DWORD *)(v54 + 56);
            int v73 = *(_DWORD *)(v54 + 60);
            int8x16_t v192 = *(int8x16_t *)(v54 + 64);
            uint64_t v188 = *(void *)(v54 + 48);
            unsigned int v74 = std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SceneObserver::StoredData>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SceneObserver::StoredData>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SceneObserver::StoredData>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SceneObserver::StoredData>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v174, v51, v175);
            *((void *)v74 + 3) = 0;
            *((void *)v74 + 4) = v188;
            *((_DWORD *)v74 + 10) = v72;
            *((_DWORD *)v74 + 11) = v73;
            *((void *)v74 + 6) = v192.i64[0];
            *(void *)&long long v75 = vextq_s8(v192, v192, 8uLL).u64[0];
            *((void *)&v75 + 1) = v188;
            *(_OWORD *)(v74 + 56) = v75;
            *((_DWORD *)v74 + 18) = v72;
            *((_DWORD *)v74 + 19) = v73;
            *((void *)v74 + 10) = v192.i64[0];
            *(_OWORD *)(v74 + 88) = v75;
            *((_DWORD *)v74 + 26) = v72;
            *((_DWORD *)v74 + 27) = v73;
            *((void *)v74 + 14) = v192.i64[0];
            *(_OWORD *)(v74 + 120) = v75;
            *((_DWORD *)v74 + 34) = v72;
            *((_DWORD *)v74 + 35) = v73;
            *((int8x16_t *)v74 + 9) = v192;
            memset((char *)&v204[3] + 12, 0, 18);
            LOWORD(v204[0]) = 0;
            BYTE2(v204[0]) = 1;
            memset((char *)v204 + 3, 0, 18);
            BYTE5(v204[1]) = 1;
            memset((char *)&v204[1] + 6, 0, 18);
            BYTE8(v204[2]) = 1;
            memset((char *)&v204[2] + 9, 0, 18);
            BYTE11(v204[3]) = 1;
            Phase::SpatialModeler::SimulationUpdate::operator|=(a7, (uint64_t)v204);
          }
        }
      }
    }
  }
  if (*(_DWORD *)(v179 + 168))
  {
    long long v76 = v186 + 32;
    if (!*((_DWORD *)v186 + 95)) {
      goto LABEL_108;
    }
    uint64_t v77 = *((unsigned int *)v177 + 31);
    memset(__b, 0, sizeof(__b));
    long long v199 = 0u;
    long long v200 = 0u;
    long long v201 = 0u;
    long long v202 = 0u;
    memset(v203, 0, 28);
    if (v77)
    {
      uint64_t v78 = 0;
      uint64_t v79 = 4 * v77;
      do
      {
        *(float *)((char *)__b + v78) = *(float *)((char *)v177 + v78) / *(float *)((char *)v76 + v78);
        v78 += 4;
      }
      while (v79 != v78);
      uint64_t v80 = 0;
      long long v205 = 0u;
      memset(v206, 0, 28);
      memset(v204, 0, sizeof(v204));
      do
      {
        *(float *)((char *)v204 + v80) = *(float *)((char *)__b + v80) + -1.0;
        v80 += 4;
      }
      while (v79 != v80);
      uint64_t v81 = 0;
      float v82 = fabsf(*(float *)v204);
      if (v77 <= 1) {
        float v82 = 0.0;
      }
      do
      {
        float v83 = fabsf(*(float *)((char *)v204 + v81));
        if (v82 < v83) {
          float v82 = v83;
        }
        v81 += 4;
      }
      while (v79 != v81);
      if (v82 > 0.02)
      {
LABEL_108:
        long long v84 = *v177;
        long long v85 = v177[1];
        long long v86 = v177[3];
        *((_OWORD *)v186 + 18) = v177[2];
        *((_OWORD *)v186 + 19) = v86;
        _OWORD *v76 = v84;
        *((_OWORD *)v186 + 17) = v85;
        long long v87 = v177[4];
        long long v88 = v177[5];
        long long v89 = v177[7];
        *((_OWORD *)v186 + 22) = v177[6];
        *((_OWORD *)v186 + 23) = v89;
        *((_OWORD *)v186 + 20) = v87;
        *((_OWORD *)v186 + 21) = v88;
        *(void *)&v204[4] = 0;
        DWORD2(v204[4]) = 0;
        LODWORD(v204[0]) = 0;
        WORD2(v204[0]) = 0;
        BYTE6(v204[0]) = 1;
        memset((char *)v204 + 7, 0, 18);
        BYTE9(v204[1]) = 1;
        memset((char *)&v204[1] + 10, 0, 18);
        BYTE12(v204[2]) = 1;
        memset((char *)&v204[2] + 13, 0, 18);
        HIBYTE(v204[3]) = 1;
        WORD6(v204[4]) = 0;
        Phase::SpatialModeler::SimulationUpdate::operator|=(a7, (uint64_t)v204);
      }
    }
  }
  uint64_t v90 = *(void *)(v179 + 904);
  float v91 = *(float *)(v179 + 928);
  float v92 = *((float *)v186 + 98);
  memset(__b, 0, 19);
  BYTE7(__b[0]) = v186[48] != v90;
  if (vabds_f32(v91, v92) >= 0.05)
  {
    char v94 = 1;
  }
  else
  {
    BOOL v93 = v91 >= 0.96;
    if (v91 <= 0.04) {
      BOOL v93 = 1;
    }
    char v94 = v92 != v91 && v93;
  }
  uint64_t v95 = 0;
  BYTE8(__b[0]) = v94;
  do
  {
    int v96 = *((unsigned __int8 *)__b + v95);
    if (*((unsigned char *)__b + v95)) {
      BOOL v97 = 1;
    }
    else {
      BOOL v97 = v95 == 18;
    }
    ++v95;
  }
  while (!v97);
  if (v96)
  {
    v186[48] = v90;
    *((float *)v186 + 98) = v91;
    v204[0] = __b[0];
    *(_DWORD *)((char *)v204 + 15) = *(_DWORD *)((char *)__b + 15);
    *(_OWORD *)((char *)&v204[1] + 3) = __b[0];
    *(_DWORD *)((char *)&v204[2] + 2) = *(_DWORD *)((char *)__b + 15);
    *(_OWORD *)((char *)&v204[2] + 6) = __b[0];
    *(_DWORD *)((char *)&v204[3] + 5) = *(_DWORD *)((char *)__b + 15);
    DWORD2(v204[4]) = *(_DWORD *)((char *)__b + 15);
    *(_OWORD *)((char *)&v204[3] + 9) = __b[0];
    WORD6(v204[4]) = 0;
    Phase::SpatialModeler::SimulationUpdate::operator|=(a7, (uint64_t)v204);
  }
  int v98 = *(unsigned __int8 *)(v179 + 932);
  if (*((unsigned __int8 *)v186 + 396) != v98)
  {
    *((unsigned char *)v186 + 396) = v98;
    *(_WORD *)((char *)&v204[4] + 1) = 256;
    *(void *)((char *)&v204[4] + 3) = 0;
    BYTE11(v204[4]) = 0;
    *(void *)&v204[0] = 0;
    WORD4(v204[0]) = 256;
    memset((char *)v204 + 10, 0, 18);
    BYTE12(v204[1]) = 1;
    memset((char *)&v204[1] + 13, 0, 18);
    HIBYTE(v204[2]) = 1;
    memset(&v204[3], 0, 17);
    WORD6(v204[4]) = 0;
    Phase::SpatialModeler::SimulationUpdate::operator|=(a7, (uint64_t)v204);
  }
  uint64_t v99 = 0;
  do
  {
    int v100 = *(unsigned __int8 *)(a7 + v99);
    if (*(unsigned char *)(a7 + v99)) {
      BOOL v101 = 1;
    }
    else {
      BOOL v101 = v99 == 18;
    }
    ++v99;
  }
  while (!v101);
  if (!v100)
  {
    uint64_t v102 = 19;
    do
    {
      int v103 = *(unsigned __int8 *)(a7 + v102);
      if (*(unsigned char *)(a7 + v102)) {
        break;
      }
      BOOL v39 = v102++ == 37;
    }
    while (!v39);
    if (!v103)
    {
      uint64_t v104 = *(void *)(v179 + 936);
      if (v104 != v186[13])
      {
        v186[13] = v104;
        *(void *)&v204[0] = 0;
        WORD4(v204[0]) = 0;
        BYTE10(v204[0]) = 1;
        memset((char *)v204 + 11, 0, 18);
        BYTE13(v204[1]) = 1;
        memset((char *)&v204[1] + 14, 0, 18);
        LOBYTE(v204[3]) = 1;
        memset((char *)&v204[3] + 1, 0, 18);
        BYTE3(v204[4]) = 1;
        *(void *)((char *)&v204[4] + 4) = 0;
        WORD6(v204[4]) = 0;
        long long v106 = v204;
LABEL_211:
        Phase::SpatialModeler::SimulationUpdate::operator|=(a7, (uint64_t)v106);
        return;
      }
      long long v205 = 0u;
      memset(v206, 0, 28);
      memset(v204, 0, sizeof(v204));
      long long v105 = a5;
      *(_DWORD *)&v206[28] = a5;
      if (a5)
      {
        bzero(v204, 4 * (void)a5);
        long long v202 = 0u;
        memset(v203, 0, 28);
        long long v200 = 0u;
        long long v201 = 0u;
        long long v199 = 0u;
        memset(__b, 0, sizeof(__b));
        memset_pattern16(__b, &unk_2220E7DE0, 4 * (void)a5);
        long long v105 = a5;
      }
      else
      {
        long long v202 = 0uLL;
        memset(v203, 0, 28);
        long long v200 = 0uLL;
        long long v201 = 0uLL;
        long long v199 = 0uLL;
        memset(__b, 0, sizeof(__b));
      }
      *(_DWORD *)&v203[28] = v105;
      SubbandIndesimd_float4 x = Phase::SpatialModeler::RayTracerState::GetSubbandIndex(v105);
      long long v108 = *(void **)(v179 + 120);
      unsigned int v109 = *(_DWORD *)(v179 + 136);
      long long v110 = &v108[3 * v109];
      if (v109)
      {
        uint64_t v111 = *v108;
        if (!*v108)
        {
          long long v112 = v108 + 3;
          while (1)
          {
            long long v108 = v112;
            if (v112 >= v110) {
              break;
            }
            v112 += 3;
            uint64_t v111 = *v108;
            if (*v108) {
              goto LABEL_151;
            }
          }
          uint64_t v111 = 0;
        }
LABEL_151:
        unint64_t v113 = (unint64_t)v110;
      }
      else
      {
        uint64_t v111 = 0;
        unint64_t v113 = *(void *)(v179 + 120);
      }
      float v114 = 0.0;
      if (v108 == v110)
      {
        float v118 = 3.4028e38;
        float v120 = -3.4028e38;
        float v119 = -3.4028e38;
        float v115 = -3.4028e38;
        float v117 = 3.4028e38;
        float v116 = 3.4028e38;
        LODWORD(v153) = a5;
      }
      else
      {
        float v115 = -3.4028e38;
        float v116 = 3.4028e38;
        uint64_t v180 = 40 * SubbandIndex;
        float v117 = 3.4028e38;
        float v118 = 3.4028e38;
        float v119 = -3.4028e38;
        float v120 = -3.4028e38;
        unint64_t v172 = v113;
        long long v173 = v110;
        do
        {
          if (v111 && *(_DWORD *)v111 == 4)
          {
            long long v122 = *(void **)(v111 + 120);
            long long v121 = *(void **)(v111 + 128);
            if (v121 == v122)
            {
              float v149 = *(float *)(v111 + 64);
              float v150 = *(float *)(v111 + 68);
              float v116 = fminf(v116, v149);
              float v117 = fminf(v117, v150);
              float v151 = *(float *)(v111 + 72);
              float v118 = fminf(v118, v151);
              float v115 = fmaxf(v115, v149);
              float v119 = fmaxf(v119, v150);
              float v120 = fmaxf(v120, v151);
            }
            else
            {
              long long v176 = *(void **)(v111 + 128);
              long long v178 = v108;
              do
              {
                if (*(_DWORD *)(v52 + 112) > *v122)
                {
                  uint64_t v123 = *(void *)(v52 + 96);
                  if (*(_DWORD *)(v123 + 24 * *v122 + 20) == HIDWORD(*v122))
                  {
                    uint64_t v124 = *(void *)(v123 + 24 * *v122);
                    if (v124)
                    {
                      float v181 = v115;
                      float v182 = v114;
                      uint64_t v183 = v124;
                      uint64_t v185 = *(void *)(v124 + 72);
                      uint64_t v125 = *(void *)(v124 + 80) - v185;
                      if (v125)
                      {
                        uint64_t v126 = 0;
                        unint64_t v127 = v125 >> 2;
                        uint64_t v128 = *(void *)(**(void **)(v124 + 144) + 16 * *(void *)(v124 + 152));
                        uint64_t v193 = *(void *)(v128 + 8);
                        uint64_t v129 = *(void *)(v128 + 32);
                        unsigned int v130 = *(_DWORD *)(v179 + 88);
                        uint64_t v189 = *(void *)(v179 + 72);
                        if (v127 <= 1) {
                          uint64_t v131 = 1;
                        }
                        else {
                          uint64_t v131 = v127;
                        }
                        do
                        {
                          uint64_t v132 = *(void *)(v193 + v126 * v129);
                          if (v130 > v132
                            && *(_DWORD *)(v189 + 24 * v132 + 20) == HIDWORD(v132))
                          {
                            uint64_t v133 = *(void *)(v189 + 24 * *(void *)(v193 + v126 * v129));
                            if (v133)
                            {
                              if (*(_DWORD *)v133 == 1)
                              {
                                long long v134 = *(_OWORD **)(*(void *)(v133 + 40) + v180);
                                if (v134)
                                {
                                  long long v135 = v134[31];
                                  long long v201 = v134[30];
                                  long long v202 = v135;
                                  long long v136 = v134[33];
                                  *(_OWORD *)int v203 = v134[32];
                                  *(_OWORD *)&v203[16] = v136;
                                  long long v137 = v134[27];
                                  __b[0] = v134[26];
                                  __b[1] = v137;
                                  long long v138 = v134[29];
                                  long long v199 = v134[28];
                                  long long v200 = v138;
                                }
                              }
                            }
                          }
                          if (a5)
                          {
                            float v139 = -*(float *)(v185 + 4 * v126);
                            unint64_t v140 = (float *)v204;
                            long long v141 = (float *)__b;
                            long long v142 = a5;
                            do
                            {
                              float v143 = *v141++;
                              *unint64_t v140 = *v140 + (float)(v139 * logf((float)(1.0 - v143) + 0.00000011921));
                              ++v140;
                              long long v142 = (Phase::SpatialModeler::RayTracerState *)((char *)v142 - 1);
                            }
                            while (v142);
                          }
                          ++v126;
                        }
                        while (v126 != v131);
                      }
                      int v144 = 0;
                      float v194 = *(float *)(v183 + 64);
                      float v115 = v181;
                      do
                      {
                        Phase::GetVertex<float>((uint64_t *)(v183 + 24), v144, (uint64_t)v195);
                        Phase::operator*<float>((float *)(v111 + 48), (float *)v195, (float *)v196);
                        float v145 = *(float *)(v111 + 76);
                        float v146 = (float)(v145 * *(float *)v196) + *(float *)(v111 + 64);
                        float v147 = (float)(v145 * *(float *)&v196[4]) + *(float *)(v111 + 68);
                        float v148 = (float)(v145 * *(float *)&v196[8]) + *(float *)(v111 + 72);
                        float v116 = fminf(v116, v146);
                        float v117 = fminf(v117, v147);
                        float v118 = fminf(v118, v148);
                        float v115 = fmaxf(v115, v146);
                        float v119 = fmaxf(v119, v147);
                        float v120 = fmaxf(v120, v148);
                        ++v144;
                      }
                      while (v144 != 8);
                      float v114 = v182 + v194;
                      long long v108 = v178;
                      uint64_t v52 = v179;
                      unint64_t v113 = v172;
                      long long v110 = v173;
                      long long v121 = v176;
                    }
                  }
                }
                ++v122;
              }
              while (v122 != v121);
            }
          }
          if ((unint64_t)v108 < v113)
          {
            long long v152 = v108 + 3;
            while (1)
            {
              long long v108 = v152;
              if ((unint64_t)v152 >= v113) {
                break;
              }
              v152 += 3;
              uint64_t v111 = *v108;
              if (*v108) {
                goto LABEL_187;
              }
            }
            uint64_t v111 = 0;
          }
LABEL_187:
          ;
        }
        while (v108 != v110);
        LODWORD(v153) = *(_DWORD *)&v206[28];
      }
      float v154 = sqrtf((float)((float)((float)(*((float *)v186 + 20) - v116) * (float)(*((float *)v186 + 20) - v116))+ (float)((float)(*((float *)v186 + 21) - v117) * (float)(*((float *)v186 + 21) - v117)))+ (float)((float)(*((float *)v186 + 22) - v118) * (float)(*((float *)v186 + 22) - v118)));
      float v155 = sqrtf((float)((float)((float)(*((float *)v186 + 23) - v115) * (float)(*((float *)v186 + 23) - v115))+ (float)((float)(*((float *)v186 + 24) - v119) * (float)(*((float *)v186 + 24) - v119)))+ (float)((float)(*((float *)v186 + 25) - v120) * (float)(*((float *)v186 + 25) - v120)));
      float v156 = vabds_f32(*((float *)v186 + 28), v114);
      long long v157 = v186 + 16;
      memset(v196, 0, sizeof(v196));
      int v197 = v153;
      if (v153)
      {
        uint64_t v158 = 0;
        uint64_t v153 = v153;
        do
        {
          *(float *)&v196[v158] = *(float *)((char *)v204 + v158) - *(float *)((char *)v157 + v158);
          v158 += 4;
        }
        while (4 * v153 != v158);
        float v159 = *(float *)v196;
        if (v153 <= 1) {
          float v159 = 0.0;
        }
        long long v160 = (float *)v196;
        do
        {
          float v161 = *v160++;
          float v162 = v161;
          if (v159 < v161) {
            float v159 = v162;
          }
          --v153;
        }
        while (v153);
        BOOL v163 = v159 > 3.0;
      }
      else
      {
        BOOL v163 = 0;
      }
      uint64_t v164 = 0;
      BOOL v165 = v154 > 1.0;
      if (v155 > 1.0) {
        BOOL v165 = 1;
      }
      memset(v195, 0, sizeof(v195));
      v195[11] = v165;
      v195[12] = v156 > 10.0;
      v195[13] = v163;
      do
      {
        int v166 = v195[v164];
        if (v195[v164]) {
          BOOL v167 = 1;
        }
        else {
          BOOL v167 = v164 == 18;
        }
        ++v164;
      }
      while (!v167);
      if (v166)
      {
        *((float *)v186 + 20) = v116;
        *((float *)v186 + 21) = v117;
        *((float *)v186 + 22) = v118;
        *((float *)v186 + 23) = v115;
        *((float *)v186 + 24) = v119;
        *((float *)v186 + 25) = v120;
        *((float *)v186 + 28) = v114;
        long long v168 = v205;
        *((_OWORD *)v186 + 12) = v204[4];
        *((_OWORD *)v186 + 13) = v168;
        long long v169 = *(_OWORD *)&v206[16];
        *((_OWORD *)v186 + 14) = *(_OWORD *)v206;
        *((_OWORD *)v186 + 15) = v169;
        long long v170 = v204[1];
        _OWORD *v157 = v204[0];
        *((_OWORD *)v186 + 9) = v170;
        long long v171 = v204[3];
        *((_OWORD *)v186 + 10) = v204[2];
        *((_OWORD *)v186 + 11) = v171;
        *(_OWORD *)float v196 = *(_OWORD *)v195;
        *(_DWORD *)&v196[15] = *(_DWORD *)&v195[15];
        *(_OWORD *)&v196[19] = *(_OWORD *)v195;
        *(_DWORD *)&v196[34] = *(_DWORD *)&v195[15];
        *(_OWORD *)&v196[38] = *(_OWORD *)v195;
        *(_DWORD *)&v196[53] = *(_DWORD *)&v195[15];
        *(_DWORD *)&v196[72] = *(_DWORD *)&v195[15];
        *(_OWORD *)&v196[57] = *(_OWORD *)v195;
        *(_WORD *)&v196[76] = 0;
        long long v106 = v196;
        goto LABEL_211;
      }
    }
  }
}

BOOL Phase::SpatialModeler::SceneObserver::isDetectEnergyFluctuation(uint64_t a1, float *a2)
{
  unint64_t v3 = *((unsigned int *)a2 + 31);
  uint64_t v4 = (float *)(a1 + 400);
  if (v3 != *(_DWORD *)(a1 + 524))
  {
    BOOL v6 = 1;
LABEL_12:
    long long v10 = *(_OWORD *)a2;
    long long v11 = *((_OWORD *)a2 + 1);
    long long v12 = *((_OWORD *)a2 + 3);
    *((_OWORD *)v4 + 2) = *((_OWORD *)a2 + 2);
    *((_OWORD *)v4 + 3) = v12;
    *(_OWORD *)uint64_t v4 = v10;
    *((_OWORD *)v4 + 1) = v11;
    long long v13 = *((_OWORD *)a2 + 4);
    long long v14 = *((_OWORD *)a2 + 5);
    long long v15 = *((_OWORD *)a2 + 7);
    *((_OWORD *)v4 + 6) = *((_OWORD *)a2 + 6);
    *((_OWORD *)v4 + 7) = v15;
    *((_OWORD *)v4 + 4) = v13;
    *((_OWORD *)v4 + 5) = v14;
    return v6;
  }
  if (v3)
  {
    uint64_t v5 = 0;
    BOOL v6 = 1;
    do
    {
      float v7 = a2[v5];
      if (v7 <= 0.0) {
        float v7 = COERCE_FLOAT(1);
      }
      float v8 = (float)((float)(logf(v7) * 4.3429) / 10.0) * 10.0;
      float v9 = v4[v5];
      if (v9 <= 0.0) {
        float v9 = COERCE_FLOAT(1);
      }
      if (vabds_f32(v8, (float)((float)(logf(v9) * 4.3429) / 10.0) * 10.0) > 2.5) {
        goto LABEL_12;
      }
      BOOL v6 = ++v5 < v3;
    }
    while (v3 != v5);
  }
  return 0;
}

void Phase::SpatialModeler::SceneObserver::checkForNecessaryUpdates(unsigned char *a1, uint64_t a2, float *a3, uint64_t a4)
{
  float v6 = a3[4];
  float v7 = a3[5];
  float v8 = a3[6];
  a1[3] |= sqrtf((float)((float)((float)(v6 - *(float *)(a4 + 24)) * (float)(v6 - *(float *)(a4 + 24)))+ (float)((float)(v7 - *(float *)(a4 + 28)) * (float)(v7 - *(float *)(a4 + 28))))+ (float)((float)(v8 - *(float *)(a4 + 32)) * (float)(v8 - *(float *)(a4 + 32)))) > 0.8;
  a1[22] |= sqrtf((float)((float)((float)(v6 - *(float *)(a4 + 56)) * (float)(v6 - *(float *)(a4 + 56)))+ (float)((float)(v7 - *(float *)(a4 + 60)) * (float)(v7 - *(float *)(a4 + 60))))+ (float)((float)(v8 - *(float *)(a4 + 64)) * (float)(v8 - *(float *)(a4 + 64)))) > 1.5;
  BOOL v9 = *(void *)a4 != a2;
  a1[5] |= v9;
  a1[24] |= v9;
  a1[41] |= sqrtf((float)((float)((float)(v6 - *(float *)(a4 + 88)) * (float)(v6 - *(float *)(a4 + 88)))+ (float)((float)(v7 - *(float *)(a4 + 92)) * (float)(v7 - *(float *)(a4 + 92))))+ (float)((float)(v8 - *(float *)(a4 + 96)) * (float)(v8 - *(float *)(a4 + 96)))) > 0.1;
  long long v10 = (float *)(a4 + 104);
  a1[60] |= sqrtf((float)((float)((float)(v6 - *(float *)(a4 + 120)) * (float)(v6 - *(float *)(a4 + 120)))+ (float)((float)(v7 - *(float *)(a4 + 124)) * (float)(v7 - *(float *)(a4 + 124))))+ (float)((float)(v8 - *(float *)(a4 + 128)) * (float)(v8 - *(float *)(a4 + 128)))) > 1.5;
  a1[42] |= (float)(Phase::GetAngle<float>(a3, (float *)(a4 + 72)) * 57.296) > 5.0;
  a1[61] |= (float)(Phase::GetAngle<float>(a3, v10) * 57.296) > 361.0;
  a1[43] |= v9;
  a1[62] |= v9;
}

uint64_t Phase::SpatialModeler::SimulationUpdate::operator|=(uint64_t result, uint64_t a2)
{
  for (uint64_t i = 0; i != 19; ++i)
    *(unsigned char *)(result + i) |= *(unsigned char *)(a2 + i);
  do
  {
    *(unsigned char *)(result + i) |= *(unsigned char *)(a2 + i);
    ++i;
  }
  while (i != 38);
  do
  {
    *(unsigned char *)(result + i) |= *(unsigned char *)(a2 + i);
    ++i;
  }
  while (i != 57);
  do
  {
    *(unsigned char *)(result + i) |= *(unsigned char *)(a2 + i);
    ++i;
  }
  while (i != 76);
  *(unsigned char *)(result + 76) |= *(unsigned char *)(a2 + 76);
  *(unsigned char *)(result + 77) |= *(unsigned char *)(a2 + 77);
  return result;
}

float Phase::GetAngle<float>(float *a1, float *a2)
{
  float v2 = a1[3];
  float v3 = a2[2];
  float v4 = a2[3];
  float v5 = (float)((float)((float)(a1[1] * a2[1]) + (float)(*a1 * *a2)) + (float)(a1[2] * v3)) + (float)(v2 * v4);
  float v6 = -v5;
  if (v5 >= 0.0) {
    float v6 = (float)((float)((float)(a1[1] * a2[1]) + (float)(*a1 * *a2)) + (float)(a1[2] * v3)) + (float)(v2 * v4);
  }
  float v7 = acosf(v6);
  return v7 + v7;
}

char *std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SceneObserver::StoredData>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SceneObserver::StoredData>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SceneObserver::StoredData>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SceneObserver::StoredData>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(float *a1, unint64_t a2, void *a3)
{
  unint64_t v5 = a2;
  unint64_t v7 = *((void *)a1 + 1);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    BOOL v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      long long v10 = (char *)*v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = *((void *)v10 + 1);
          if (v11 == a2)
          {
            if (*((void *)v10 + 2) == a2) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          long long v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
  long long v10 = (char *)operator new(0xA0uLL);
  *(void *)long long v10 = 0;
  *((void *)v10 + 1) = v5;
  *((void *)v10 + 2) = *a3;
  *((void *)v10 + 3) = 0;
  *((void *)v10 + 4) = 0;
  *((void *)v10 + 5) = 0;
  *(void *)(v10 + 44) = 1065353216;
  *(void *)(v10 + 52) = 0;
  *(_OWORD *)(v10 + 60) = xmmword_2220A59A0;
  *(void *)(v10 + 76) = 1065353216;
  *(void *)(v10 + 84) = 0;
  *(_OWORD *)(v10 + 92) = xmmword_2220A59A0;
  *(void *)(v10 + 108) = 1065353216;
  *(void *)(v10 + 116) = 0;
  *(_OWORD *)(v10 + 124) = xmmword_2220A59A0;
  *(void *)(v10 + 140) = 1065353216;
  *(void *)(v10 + 148) = 0;
  *((_DWORD *)v10 + 39) = 1065353216;
  float v12 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v13 = a1[8];
  if (v7 && (float)(v13 * (float)v7) >= v12)
  {
    unint64_t v5 = v3;
    goto LABEL_64;
  }
  BOOL v14 = 1;
  if (v7 >= 3) {
    BOOL v14 = (v7 & (v7 - 1)) != 0;
  }
  unint64_t v15 = v14 | (2 * v7);
  unint64_t v16 = vcvtps_u32_f32(v12 / v13);
  if (v15 <= v16) {
    int8x8_t prime = (int8x8_t)v16;
  }
  else {
    int8x8_t prime = (int8x8_t)v15;
  }
  if (*(void *)&prime == 1)
  {
    int8x8_t prime = (int8x8_t)2;
  }
  else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
  {
    int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    unint64_t v7 = *((void *)a1 + 1);
  }
  if (*(void *)&prime <= v7)
  {
    if (*(void *)&prime >= v7) {
      goto LABEL_60;
    }
    unint64_t v24 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
    if (v7 < 3 || (uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
    {
      unint64_t v24 = std::__next_prime(v24);
    }
    else
    {
      uint64_t v26 = 1 << -(char)__clz(v24 - 1);
      if (v24 >= 2) {
        unint64_t v24 = v26;
      }
    }
    if (*(void *)&prime <= v24) {
      int8x8_t prime = (int8x8_t)v24;
    }
    if (*(void *)&prime >= v7)
    {
      unint64_t v7 = *((void *)a1 + 1);
      goto LABEL_60;
    }
    if (!*(void *)&prime)
    {
      float v33 = *(void **)a1;
      *(void *)a1 = 0;
      if (v33) {
        operator delete(v33);
      }
      unint64_t v7 = 0;
      *((void *)a1 + 1) = 0;
      goto LABEL_60;
    }
  }
  if (*(void *)&prime >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v18 = operator new(8 * *(void *)&prime);
  unint64_t v19 = *(void **)a1;
  *(void *)a1 = v18;
  if (v19) {
    operator delete(v19);
  }
  uint64_t v20 = 0;
  *((int8x8_t *)a1 + 1) = prime;
  do
    *(void *)(*(void *)a1 + 8 * v20++) = 0;
  while (*(void *)&prime != v20);
  uint64_t v21 = (void *)*((void *)a1 + 2);
  if (v21)
  {
    unint64_t v22 = v21[1];
    uint8x8_t v23 = (uint8x8_t)vcnt_s8(prime);
    v23.i16[0] = vaddlv_u8(v23);
    if (v23.u32[0] > 1uLL)
    {
      if (v22 >= *(void *)&prime) {
        v22 %= *(void *)&prime;
      }
    }
    else
    {
      v22 &= *(void *)&prime - 1;
    }
    *(void *)(*(void *)a1 + 8 * v22) = a1 + 4;
    float v27 = (void *)*v21;
    if (*v21)
    {
      do
      {
        unint64_t v28 = v27[1];
        if (v23.u32[0] > 1uLL)
        {
          if (v28 >= *(void *)&prime) {
            v28 %= *(void *)&prime;
          }
        }
        else
        {
          v28 &= *(void *)&prime - 1;
        }
        if (v28 != v22)
        {
          if (!*(void *)(*(void *)a1 + 8 * v28))
          {
            *(void *)(*(void *)a1 + 8 * v28) = v21;
            goto LABEL_56;
          }
          *uint64_t v21 = *v27;
          *float v27 = **(void **)(*(void *)a1 + 8 * v28);
          **(void **)(*(void *)a1 + 8 * v28) = v27;
          float v27 = v21;
        }
        unint64_t v28 = v22;
LABEL_56:
        uint64_t v21 = v27;
        float v27 = (void *)*v27;
        unint64_t v22 = v28;
      }
      while (v27);
    }
  }
  unint64_t v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v5) {
      v5 %= v7;
    }
  }
  else
  {
    v5 &= v7 - 1;
  }
LABEL_64:
  long long v29 = *(void **)a1;
  long long v30 = *(void **)(*(void *)a1 + 8 * v5);
  if (v30)
  {
    *(void *)long long v10 = *v30;
LABEL_72:
    *long long v30 = v10;
    goto LABEL_73;
  }
  *(void *)long long v10 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v10;
  v29[v5] = a1 + 4;
  if (*(void *)v10)
  {
    unint64_t v31 = *(void *)(*(void *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v31 >= v7) {
        v31 %= v7;
      }
    }
    else
    {
      v31 &= v7 - 1;
    }
    long long v30 = (void *)(*(void *)a1 + 8 * v31);
    goto LABEL_72;
  }
LABEL_73:
  ++*((void *)a1 + 3);
  return v10;
}

void sub_222060F80(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

double Phase::Zeppelin::SCSRadiationModel::ComputeDirectionalResponse(Phase::Logger *a1, Phase::Zeppelin::SCSRadiationSphereSamplingDependentPrecomputedData **a2, int a3, float a4)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  if (!a1)
  {
    float v33 = **(NSObject ***)(Phase::Logger::GetInstance(0) + 928);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "SCSRadiationModel.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 203;
      _os_log_impl(&dword_221E5E000, v33, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [(nullptr == pInRadiationContextRef) is true]: ErrorDescriptions::kErrDescr_nullPtr", buf, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, (const char *)Phase::Zeppelin::ErrorDescriptions::kErrDescr_nullPtr);
  }
  if (!a2)
  {
    float v35 = **(NSObject ***)(Phase::Logger::GetInstance(a1) + 928);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "SCSRadiationModel.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 208;
      _os_log_impl(&dword_221E5E000, v35, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [(nullptr == pInSharedRadiationData) is true]: ErrorDescriptions::kErrDescr_nullPtr", buf, 0x12u);
    }
    float v36 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](v36, (const char *)Phase::Zeppelin::ErrorDescriptions::kErrDescr_nullPtr);
  }
  uint8x8_t v8 = *a2;
  double v40 = *(double *)(*((void *)*a2 + 1) + 8 * a3);
  *(_OWORD *)buf = xmmword_2220E8290;
  float64x2_t v42 = *(float64x2_t *)(*(void *)(*((void *)v8 + 8) + 8 * a3) + 16);
  double v39 = std::operator/[abi:ne180100]<double>((double *)buf, (long double *)v42.f64);
  double CosTheta = Phase::Zeppelin::SCSRadiationSphereSamplingDependentPrecomputedData::GetCosTheta(a2[1], a4);
  BOOL v9 = *(float64x2_t **)(*((void *)*a2 + 8) + 8 * a3);
  float64x2_t v10 = vmulq_n_f64(vsubq_f64(*v9, vaddq_f64(v9[2], v9[2])), *((double *)*a2 + 5));
  v42.f64[0] = (1.0 - *((double *)*a2 + 3)) * 3.0;
  v42.f64[1] = 0.0;
  *(float64x2_t *)buf = v10;
  double v37 = std::operator/[abi:ne180100]<double>(v42.f64, (long double *)buf);
  unsigned int v11 = *((_DWORD *)a1 + 4);
  double v12 = 0.0;
  double v13 = 0.0;
  if (v11 >= 2)
  {
    long double v14 = hypot(0.0, 1.0);
    long double v15 = log(v14);
    for (unsigned int i = 2; i <= v11; ++i)
    {
      double v17 = *((double *)*a2 + 2);
      double v18 = *((double *)*a2 + 4);
      v41[0] = (double)i + 1.0;
      v41[1] = 0.0;
      v42.f64[0] = v15;
      v42.f64[1] = 1.57079633;
      *(void *)buf = std::operator*[abi:ne180100]<double>(v41, v42.f64);
      *(void *)&_OWORD buf[8] = v19;
      std::exp[abi:ne180100]<double>((double *)buf);
      double v20 = ((double)i * 2.0 + 1.0) * ((double)i * 2.0 + 1.0);
      double v22 = v20 * v21;
      double v24 = v20 * v23;
      uint8x8_t v25 = *a2;
      double v26 = v17 * *(double *)(*((void *)*a2 + 7) + 8 * (int)i)
          + v18 * *(double *)(*((void *)*a2 + 6) + 8 * (int)i);
      *(double *)buf = v22 * v26;
      *(double *)&_OWORD buf[8] = v24 * v26;
      uint64_t v27 = *(void *)(*((void *)v25 + 8) + 8 * a3);
      float64x2_t v42 = vmulq_n_f64(vsubq_f64(vmulq_n_f64(*(float64x2_t *)(v27 + 16 * (int)(i - 1)), (double)i), vmulq_n_f64(*(float64x2_t *)(v27 + 16 * (int)(i + 1)), (double)i + 1.0)), v18 * (double)((i - 1) * (i + 2)));
      double v28 = std::operator/[abi:ne180100]<double>((double *)buf, (long double *)v42.f64);
      double v30 = v29;
      double LegendreNthDegreeOfCosTheta = Phase::Zeppelin::SCSRadiationSphereSamplingDependentPrecomputedData::GetLegendreNthDegreeOfCosTheta(a2[1], i, a4);
      double v12 = v12 + v28 * LegendreNthDegreeOfCosTheta;
      double v13 = v13 + v30 * LegendreNthDegreeOfCosTheta;
    }
  }
  return -2.0 / v40 * (v39 + CosTheta * v37 + v12);
}

void sub_22206139C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Phase::Zeppelin::SCSRadiationPrecomputedData::SCSRadiationPrecomputedData(Phase::Logger *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  *((void *)a1 + 1) = 0;
  *(void *)a1 = 0;
  if (a4 && a5 && a6)
  {
    if (a2[1] != *a2) {
      operator new();
    }
    uint8x8_t v8 = **(NSObject ***)(Phase::Logger::GetInstance(a1) + 928);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315394;
      float64x2_t v10 = "SCSRadiationPrecomputedData.cpp";
      __int16 v11 = 1024;
      int v12 = 58;
      _os_log_impl(&dword_221E5E000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [(0 == refInCenterFreqs.size()) is true]: ErrorDescriptions::kErrDescr_invalidCenterFrequenciesLength", (uint8_t *)&v9, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, (const char *)Phase::Zeppelin::ErrorDescriptions::kErrDescr_invalidCenterFrequenciesLength);
  }
  else
  {
    float v6 = **(NSObject ***)(Phase::Logger::GetInstance(a1) + 928);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315394;
      float64x2_t v10 = "SCSRadiationPrecomputedData.cpp";
      __int16 v11 = 1024;
      int v12 = 53;
      _os_log_impl(&dword_221E5E000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [(nullptr == pInScsRadiationCtx || nullptr == pInPropagationMediumCtx || nullptr == pInNormalizationCtx) is true]: ErrorDescriptions::kErrDescr_nullPtr", (uint8_t *)&v9, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, (const char *)Phase::Zeppelin::ErrorDescriptions::kErrDescr_nullPtr);
  }
  exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
}

void sub_222061620(_Unwind_Exception *a1)
{
  __cxa_free_exception(v3);
  unint64_t v5 = *v2;
  *float v2 = 0;
  if (v5) {
    std::default_delete<Phase::Zeppelin::SCSRadiationSphereSamplingDependentPrecomputedData>::operator()[abi:ne180100]((uint64_t)v2, v5);
  }
  std::unique_ptr<Phase::Zeppelin::SCSRadiationSphereSamplingIndependentPrecomputedData>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

Phase::Zeppelin::SCSRadiationSphereSamplingIndependentPrecomputedData *std::unique_ptr<Phase::Zeppelin::SCSRadiationSphereSamplingIndependentPrecomputedData>::reset[abi:ne180100](Phase::Zeppelin::SCSRadiationSphereSamplingIndependentPrecomputedData **a1, Phase::Zeppelin::SCSRadiationSphereSamplingIndependentPrecomputedData *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    Phase::Zeppelin::SCSRadiationSphereSamplingIndependentPrecomputedData::~SCSRadiationSphereSamplingIndependentPrecomputedData(result);
    JUMPOUT(0x223C938A0);
  }
  return result;
}

void std::default_delete<Phase::Zeppelin::SCSRadiationSphereSamplingDependentPrecomputedData>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  if (a2)
  {
    std::unique_ptr<Phase::Zeppelin::SphereSampling::NDimEquiangularHalfCircleData<unsigned int,double>>::reset[abi:ne180100](a2 + 3, 0);
    std::unique_ptr<Phase::Zeppelin::SphereSampling::NDimEquiangularHalfCircleData<unsigned int,double>>::reset[abi:ne180100](a2 + 2, 0);
    std::unique_ptr<Phase::Zeppelin::SphereSampling::NDimEquiangularData<unsigned int,double>>::reset[abi:ne180100](a2 + 1, 0);
    std::unique_ptr<Phase::Zeppelin::SphereSampling::NDimEquiangularData<unsigned int,double>>::reset[abi:ne180100](a2, 0);
    JUMPOUT(0x223C938A0);
  }
}

uint64_t std::unique_ptr<Phase::Zeppelin::SphereSampling::NDimEquiangularHalfCircleData<unsigned int,double>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    Phase::Zeppelin::SphereSampling::NDimEquiangularHalfCircleData<float,double>::~NDimEquiangularHalfCircleData(result);
    JUMPOUT(0x223C938A0);
  }
  return result;
}

uint64_t std::unique_ptr<Phase::Zeppelin::SphereSampling::NDimEquiangularData<unsigned int,double>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    Phase::Zeppelin::SphereSampling::NDimEquiangularData<unsigned int,double>::~NDimEquiangularData(result);
    JUMPOUT(0x223C938A0);
  }
  return result;
}

uint64_t Phase::Zeppelin::SphereSampling::NDimEquiangularData<unsigned int,double>::~NDimEquiangularData(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 28))
  {
    unint64_t v2 = 0;
    do
    {
      unint64_t v3 = *(unsigned int *)(a1 + 24);
      if (v3)
      {
        for (unint64_t i = 0; i < v3; ++i)
        {
          uint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8 * v2) + 8 * i);
          if (v5)
          {
            MEMORY[0x223C93870](v5, 0x1000C8000313F17);
            unint64_t v3 = *(unsigned int *)(a1 + 24);
          }
        }
      }
      uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8 * v2);
      if (v6) {
        MEMORY[0x223C93870](v6, 0x80C80B8603338);
      }
      ++v2;
    }
    while (v2 < *(unsigned int *)(a1 + 28));
  }
  uint64_t v7 = *(void *)(a1 + 40);
  if (v7) {
    MEMORY[0x223C93870](v7, 0x80C80B8603338);
  }
  uint8x8_t v8 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v8;
    operator delete(v8);
  }
  return a1;
}

void Phase::Zeppelin::SCSRadiationSphereSamplingDependentPrecomputedData::SCSRadiationSphereSamplingDependentPrecomputedData(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v2 = (uint64_t *)(a1 + 8);
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)a1 = 0u;
  if (a2)
  {
    std::unique_ptr<Phase::Zeppelin::SphereSampling::NDimEquiangularData<unsigned int,double>>::reset[abi:ne180100]((uint64_t *)a1, 0);
    std::unique_ptr<Phase::Zeppelin::SphereSampling::NDimEquiangularData<unsigned int,double>>::reset[abi:ne180100](v2, 0);
    *(_DWORD *)operator new(4uLL) = 0;
    operator new();
  }
  unint64_t v3 = **(NSObject ***)(Phase::Logger::GetInstance((Phase::Logger *)a1) + 928);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    int __p = 136315394;
    __p_4 = "SCSRadiationSphereSamplingDependentPrecomputedData.cpp";
    __int16 v7 = 1024;
    int v8 = 78;
    _os_log_impl(&dword_221E5E000, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [(nullptr == pInScsRadiationCtxRef) is true]: ErrorDescriptions::kErrDescr_nullPtr", (uint8_t *)&__p, 0x12u);
  }
  exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, (const char *)Phase::Zeppelin::ErrorDescriptions::kErrDescr_nullPtr);
  exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
}

void sub_222061C20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  std::unique_ptr<Phase::Zeppelin::SphereSampling::NDimEquiangularHalfCircleData<unsigned int,double>>::reset[abi:ne180100](v29, 0);
  std::unique_ptr<Phase::Zeppelin::SphereSampling::NDimEquiangularHalfCircleData<unsigned int,double>>::reset[abi:ne180100](v28, 0);
  std::unique_ptr<Phase::Zeppelin::SphereSampling::NDimEquiangularData<unsigned int,double>>::reset[abi:ne180100](v27, 0);
  std::unique_ptr<Phase::Zeppelin::SphereSampling::NDimEquiangularData<unsigned int,double>>::reset[abi:ne180100](v26, 0);
  _Unwind_Resume(a1);
}

void Phase::Zeppelin::SphereSampling::NDimEquiangularHalfCircleData<unsigned int,double>::Populate(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8) - *(void *)a1;
  if (v2)
  {
    uint64_t v5 = 0;
    unsigned int v6 = 0;
    float v7 = *(float *)(a1 + 28);
    unint64_t v8 = v2 >> 2;
    uint64_t v9 = *(unsigned int *)(a1 + 24);
    do
    {
      if (v9)
      {
        uint64_t v10 = 0;
        int v11 = *(_DWORD *)(*(void *)a1 + 4 * v5);
        do
        {
          uint64_t v12 = *(void *)(a2 + 24);
          float v13 = (float)(v7 * (float)v10) * 0.0174532925;
          float v15 = v13;
          int v14 = v11;
          if (!v12) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          *(double *)(*(void *)(*(void *)(a1 + 32) + 8 * v10++) + 8 * v5) = (*(double (**)(uint64_t, float *, int *))(*(void *)v12 + 48))(v12, &v15, &v14);
        }
        while (v9 != v10);
      }
      uint64_t v5 = ++v6;
    }
    while (v8 > v6);
  }
}

double Phase::Zeppelin::SCSRadiationSphereSamplingDependentPrecomputedData::GetCosTheta(Phase::Zeppelin::SCSRadiationSphereSamplingDependentPrecomputedData *this, float a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 2);
  if (!v2)
  {
    float v4 = **(NSObject ***)(Phase::Logger::GetInstance(0) + 928);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v6 = 136315394;
      float v7 = "SCSRadiationSphereSamplingDependentPrecomputedData.cpp";
      __int16 v8 = 1024;
      int v9 = 129;
      _os_log_impl(&dword_221E5E000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [(nullptr == mCosThetaHalfCircle) is true]: ErrorDescriptions::kErrDescr_nullPtr", (uint8_t *)&v6, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, (const char *)Phase::Zeppelin::ErrorDescriptions::kErrDescr_nullPtr);
  }

  return Phase::Zeppelin::SphereSampling::NDimEquiangularHalfCircleData<unsigned int,double>::GetValueAt(v2, 0, a2);
}

void sub_222061F60(_Unwind_Exception *exception_object)
{
}

double Phase::Zeppelin::SphereSampling::NDimEquiangularHalfCircleData<unsigned int,double>::GetValueAt(uint64_t a1, unsigned int a2, float a3)
{
  unint64_t v3 = *(char **)a1;
  float v4 = *(char **)(a1 + 8);
  uint64_t v5 = (uint64_t)&v4[-*(void *)a1];
  if (v4 == *(char **)a1)
  {
    float v7 = *(char **)(a1 + 8);
  }
  else
  {
    unint64_t v6 = v5 >> 2;
    float v7 = *(char **)a1;
    do
    {
      unint64_t v8 = v6 >> 1;
      int v9 = &v7[4 * (v6 >> 1)];
      unsigned int v11 = *(_DWORD *)v9;
      uint64_t v10 = v9 + 4;
      v6 += ~(v6 >> 1);
      if (v11 < a2) {
        float v7 = v10;
      }
      else {
        unint64_t v6 = v8;
      }
    }
    while (v6);
  }
  if (v3 == v7)
  {
    uint64_t v13 = 0;
  }
  else if (v4 == v7)
  {
    uint64_t v13 = (v5 >> 2) - 1;
  }
  else
  {
    if (*(_DWORD *)v7 - a2 <= a2 - *((_DWORD *)v7 - 1)) {
      uint64_t v12 = v7 - v3;
    }
    else {
      uint64_t v12 = v7 - 4 - v3;
    }
    uint64_t v13 = v12 >> 2;
  }
  return *(double *)(*(void *)(*(void *)(a1 + 32)
                               + 8
                               * (((int)llroundf((float)(a3 * 57.296) / *(float *)(a1 + 28)) % *(_DWORD *)(a1 + 24)
                                 + *(_DWORD *)(a1 + 24))
                                % *(_DWORD *)(a1 + 24)))
                   + 8 * v13);
}

double Phase::Zeppelin::SCSRadiationSphereSamplingDependentPrecomputedData::GetLegendreNthDegreeOfCosTheta(Phase::Zeppelin::SCSRadiationSphereSamplingDependentPrecomputedData *this, unsigned int a2, float a3)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v3 = *((void *)this + 3);
  if (!v3)
  {
    uint64_t v5 = **(NSObject ***)(Phase::Logger::GetInstance(0) + 928);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315394;
      unint64_t v8 = "SCSRadiationSphereSamplingDependentPrecomputedData.cpp";
      __int16 v9 = 1024;
      int v10 = 160;
      _os_log_impl(&dword_221E5E000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [(nullptr == mLegendreNthDegreeOfCosThetaHalfCircle) is true]: ErrorDescriptions::kErrDescr_nullPtr", (uint8_t *)&v7, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, (const char *)Phase::Zeppelin::ErrorDescriptions::kErrDescr_nullPtr);
  }

  return Phase::Zeppelin::SphereSampling::NDimEquiangularHalfCircleData<unsigned int,double>::GetValueAt(v3, a2, a3);
}

void sub_22206215C(_Unwind_Exception *exception_object)
{
}

void Phase::Zeppelin::SphereSampling::NDimEquiangularHalfCircleData<unsigned int,double>::NDimEquiangularHalfCircleData(uint64_t a1, int a2, uint64_t a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)a1, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  *(_DWORD *)(a1 + 24) = a2;
  *(float *)(a1 + 28) = 180.0 / (float)(a2 - 1);
  operator new[]();
}

void sub_222062254(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<Phase::Zeppelin::SCSRadiationSphereSamplingDependentPrecomputedData::SCSRadiationSphereSamplingDependentPrecomputedData(Phase::Zeppelin::ScsRadiationContext const*,unsigned int)::$_0,std::allocator<Phase::Zeppelin::SCSRadiationSphereSamplingDependentPrecomputedData::SCSRadiationSphereSamplingDependentPrecomputedData(Phase::Zeppelin::ScsRadiationContext const*,unsigned int)::$_0>,double ()(float,unsigned int)>::~__func()
{
}

void *std::__function::__func<Phase::Zeppelin::SCSRadiationSphereSamplingDependentPrecomputedData::SCSRadiationSphereSamplingDependentPrecomputedData(Phase::Zeppelin::ScsRadiationContext const*,unsigned int)::$_0,std::allocator<Phase::Zeppelin::SCSRadiationSphereSamplingDependentPrecomputedData::SCSRadiationSphereSamplingDependentPrecomputedData(Phase::Zeppelin::ScsRadiationContext const*,unsigned int)::$_0>,double ()(float,unsigned int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26D47A670;
  return result;
}

void std::__function::__func<Phase::Zeppelin::SCSRadiationSphereSamplingDependentPrecomputedData::SCSRadiationSphereSamplingDependentPrecomputedData(Phase::Zeppelin::ScsRadiationContext const*,unsigned int)::$_0,std::allocator<Phase::Zeppelin::SCSRadiationSphereSamplingDependentPrecomputedData::SCSRadiationSphereSamplingDependentPrecomputedData(Phase::Zeppelin::ScsRadiationContext const*,unsigned int)::$_0>,double ()(float,unsigned int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D47A670;
}

double std::__function::__func<Phase::Zeppelin::SCSRadiationSphereSamplingDependentPrecomputedData::SCSRadiationSphereSamplingDependentPrecomputedData(Phase::Zeppelin::ScsRadiationContext const*,unsigned int)::$_0,std::allocator<Phase::Zeppelin::SCSRadiationSphereSamplingDependentPrecomputedData::SCSRadiationSphereSamplingDependentPrecomputedData(Phase::Zeppelin::ScsRadiationContext const*,unsigned int)::$_0>,double ()(float,unsigned int)>::operator()(Phase::Logger *a1, float *a2, _DWORD *a3)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (*a3)
  {
    float v4 = **(NSObject ***)(Phase::Logger::GetInstance(a1) + 928);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v6 = 136315394;
      int v7 = "SCSRadiationSphereSamplingDependentPrecomputedData.cpp";
      __int16 v8 = 1024;
      int v9 = 92;
      _os_log_impl(&dword_221E5E000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [(0 != dimension) is true]: ErrorDescriptions::kErrDescr_nonZeroDimension", (uint8_t *)&v6, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, (const char *)Phase::Zeppelin::ErrorDescriptions::kErrDescr_nonZeroDimension);
  }
  return cosf(*a2);
}

void sub_2220623F4(_Unwind_Exception *exception_object)
{
}

void *std::__function::__value_func<double ()(float,unsigned int)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<double ()(float,unsigned int)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void std::__function::__func<Phase::Zeppelin::SCSRadiationSphereSamplingDependentPrecomputedData::SCSRadiationSphereSamplingDependentPrecomputedData(Phase::Zeppelin::ScsRadiationContext const*,unsigned int)::$_1,std::allocator<Phase::Zeppelin::SCSRadiationSphereSamplingDependentPrecomputedData::SCSRadiationSphereSamplingDependentPrecomputedData(Phase::Zeppelin::ScsRadiationContext const*,unsigned int)::$_1>,double ()(float,unsigned int)>::~__func()
{
}

void *std::__function::__func<Phase::Zeppelin::SCSRadiationSphereSamplingDependentPrecomputedData::SCSRadiationSphereSamplingDependentPrecomputedData(Phase::Zeppelin::ScsRadiationContext const*,unsigned int)::$_1,std::allocator<Phase::Zeppelin::SCSRadiationSphereSamplingDependentPrecomputedData::SCSRadiationSphereSamplingDependentPrecomputedData(Phase::Zeppelin::ScsRadiationContext const*,unsigned int)::$_1>,double ()(float,unsigned int)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26D47A6B8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Phase::Zeppelin::SCSRadiationSphereSamplingDependentPrecomputedData::SCSRadiationSphereSamplingDependentPrecomputedData(Phase::Zeppelin::ScsRadiationContext const*,unsigned int)::$_1,std::allocator<Phase::Zeppelin::SCSRadiationSphereSamplingDependentPrecomputedData::SCSRadiationSphereSamplingDependentPrecomputedData(Phase::Zeppelin::ScsRadiationContext const*,unsigned int)::$_1>,double ()(float,unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D47A6B8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<Phase::Zeppelin::SCSRadiationSphereSamplingDependentPrecomputedData::SCSRadiationSphereSamplingDependentPrecomputedData(Phase::Zeppelin::ScsRadiationContext const*,unsigned int)::$_1,std::allocator<Phase::Zeppelin::SCSRadiationSphereSamplingDependentPrecomputedData::SCSRadiationSphereSamplingDependentPrecomputedData(Phase::Zeppelin::ScsRadiationContext const*,unsigned int)::$_1>,double ()(float,unsigned int)>::operator()(uint64_t a1, float *a2, unsigned int *a3)
{
  uint64_t v3 = (Phase::Zeppelin::MathUtils *)*a3;
  long double ValueAt = Phase::Zeppelin::SphereSampling::NDimEquiangularHalfCircleData<unsigned int,double>::GetValueAt(*(void *)(*(void *)(a1 + 8) + 16), *a3, *a2);

  Phase::Zeppelin::MathUtils::Legendre(v3, 0, ValueAt);
}

void Phase::Zeppelin::SCSRadiationSphereSamplingIndependentPrecomputedData::SCSRadiationSphereSamplingIndependentPrecomputedData(Phase::Logger *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (a3 && a4 && a5)
  {
    uint64_t v5 = a2[1] - *a2;
    if (v5)
    {
      *((void *)a1 + 9) = v5 >> 2;
      operator new[]();
    }
    __int16 v8 = **(NSObject ***)(Phase::Logger::GetInstance(a1) + 928);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      int __p = 136315394;
      __p_4 = "SCSRadiationSphereSamplingIndependentPrecomputedData.cpp";
      __int16 v12 = 1024;
      int v13 = 44;
      _os_log_impl(&dword_221E5E000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [(0 == refInCenterFreqs.size()) is true]: ErrorDescriptions::kErrDescr_invalidCenterFrequenciesLength", (uint8_t *)&__p, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, (const char *)Phase::Zeppelin::ErrorDescriptions::kErrDescr_invalidCenterFrequenciesLength);
  }
  int v6 = **(NSObject ***)(Phase::Logger::GetInstance(a1) + 928);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    int __p = 136315394;
    __p_4 = "SCSRadiationSphereSamplingIndependentPrecomputedData.cpp";
    __int16 v12 = 1024;
    int v13 = 39;
    _os_log_impl(&dword_221E5E000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [(nullptr == pInScsRadiationCtx || nullptr == pInPropagationMediumCtx || nullptr == pInNormalizationCtx) is true]: ErrorDescriptions::kErrDescr_nullPtr", (uint8_t *)&__p, 0x12u);
  }
  int v7 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::invalid_argument::invalid_argument[abi:ne180100](v7, (const char *)Phase::Zeppelin::ErrorDescriptions::kErrDescr_nullPtr);
}

void sub_2220629F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

void Phase::Zeppelin::SCSRadiationSphereSamplingIndependentPrecomputedData::~SCSRadiationSphereSamplingIndependentPrecomputedData(Phase::Zeppelin::SCSRadiationSphereSamplingIndependentPrecomputedData *this)
{
  uint64_t v2 = *(void *)this;
  if (v2) {
    MEMORY[0x223C93870](v2, 0x1000C8000313F17);
  }
  uint64_t v3 = *((void *)this + 1);
  if (v3) {
    MEMORY[0x223C93870](v3, 0x1000C8000313F17);
  }
  uint64_t v4 = *((void *)this + 6);
  if (v4) {
    MEMORY[0x223C93870](v4, 0x1000C8000313F17);
  }
  uint64_t v5 = *((void *)this + 7);
  if (v5) {
    MEMORY[0x223C93870](v5, 0x1000C8000313F17);
  }
  unint64_t v6 = *((void *)this + 9);
  if (v6)
  {
    for (unint64_t i = 0; i < v6; ++i)
    {
      uint64_t v8 = *(void *)(*((void *)this + 8) + 8 * i);
      if (v8)
      {
        MEMORY[0x223C93870](v8, 0x1000C80451B5BE8);
        unint64_t v6 = *((void *)this + 9);
      }
    }
  }
  uint64_t v9 = *((void *)this + 8);
  if (v9) {
    MEMORY[0x223C93870](v9, 0x20C8093837F09);
  }
}

double Phase::SpatialModeler::TRAP::Sentinel::GetTimeSinceLastProcess(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0.0;
  }
  *(float *)&double result = (float)(std::chrono::steady_clock::now().__d_.__rep_ - v1) / 1000000000.0;
  return result;
}

float *Phase::SpatialModeler::TRAP::Sentinel::Process(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v227 = *MEMORY[0x263EF8340];
  uint64_t v5 = (float *)(a2 + 21036);
  *(std::chrono::steady_clock::time_point *)(a2 + 21456) = std::chrono::steady_clock::now();
  long long v6 = *(_OWORD *)(a2 + 21248);
  long long v217 = *(_OWORD *)(a2 + 21232);
  long long v218 = v6;
  long long v7 = *(_OWORD *)(a2 + 21280);
  long long v219 = *(_OWORD *)(a2 + 21264);
  long long v220 = v7;
  long long v8 = *(_OWORD *)(a2 + 21184);
  long long v213 = *(_OWORD *)(a2 + 21168);
  long long v214 = v8;
  long long v9 = *(_OWORD *)(a2 + 21216);
  long long v215 = *(_OWORD *)(a2 + 21200);
  long long v216 = v9;
  long long v10 = *(_OWORD *)(a2 + 21376);
  long long v209 = *(_OWORD *)(a2 + 21360);
  long long v210 = v10;
  long long v11 = *(_OWORD *)(a2 + 21408);
  long long v211 = *(_OWORD *)(a2 + 21392);
  long long v212 = v11;
  long long v12 = *(_OWORD *)(a2 + 21312);
  long long v205 = *(_OWORD *)(a2 + 21296);
  long long v206 = v12;
  long long v13 = *(_OWORD *)(a2 + 21344);
  long long v207 = *(_OWORD *)(a2 + 21328);
  long long v208 = v13;
  float32x4_t v14 = *(float32x4_t *)(a2 + 20368);
  v203[4] = *(float32x4_t *)(a2 + 20352);
  v203[5] = v14;
  long long v15 = *(_OWORD *)(a2 + 20400);
  v203[6] = *(float32x4_t *)(a2 + 20384);
  long long v204 = v15;
  float32x4_t v16 = *(float32x4_t *)(a2 + 20304);
  v203[0] = *(float32x4_t *)(a2 + 20288);
  v203[1] = v16;
  float32x4_t v17 = *(float32x4_t *)(a2 + 20336);
  v203[2] = *(float32x4_t *)(a2 + 20320);
  v203[3] = v17;
  long long v18 = *(_OWORD *)(a2 + 20496);
  long long v199 = *(_OWORD *)(a2 + 20480);
  long long v200 = v18;
  long long v19 = *(_OWORD *)(a2 + 20528);
  long long v201 = *(_OWORD *)(a2 + 20512);
  long long v202 = v19;
  long long v20 = *(_OWORD *)(a2 + 20432);
  long long v195 = *(_OWORD *)(a2 + 20416);
  long long v196 = v20;
  long long v21 = *(_OWORD *)(a2 + 20464);
  long long v197 = *(_OWORD *)(a2 + 20448);
  long long v198 = v21;
  long long v22 = *(_OWORD *)(a2 + 21120);
  long long v191 = *(_OWORD *)(a2 + 21104);
  long long v192 = v22;
  long long v23 = *(_OWORD *)(a2 + 21152);
  long long v193 = *(_OWORD *)(a2 + 21136);
  long long v194 = v23;
  long long v24 = *(_OWORD *)(a2 + 21056);
  long long v187 = *(_OWORD *)(a2 + 21040);
  long long v188 = v24;
  long long v25 = *(_OWORD *)(a2 + 21088);
  long long v189 = *(_OWORD *)(a2 + 21072);
  long long v190 = v25;
  float v26 = *v5;
  uint64_t v124 = v5;
  float v186 = v5[97];
  BOOL IsExpectedInputSubbandCount = (char *)Phase::SpatialModeler::TRAP::IsExpectedInputSubbandCount((uint64_t)&v213, (uint64_t)"inOutAcousticVisualReverbTime");
  if (IsExpectedInputSubbandCount)
  {
    BOOL IsExpectedInputSubbandCount = (char *)Phase::SpatialModeler::TRAP::IsExpectedInputSubbandCount((uint64_t)&v205, (uint64_t)"inOutAcousticVisualConfidence");
    if (IsExpectedInputSubbandCount)
    {
      BOOL IsExpectedInputSubbandCount = (char *)Phase::SpatialModeler::TRAP::IsExpectedInputSubbandCount((uint64_t)v203, (uint64_t)"inOutSeatbeltReverbTime");
      if (IsExpectedInputSubbandCount)
      {
        BOOL IsExpectedInputSubbandCount = (char *)Phase::SpatialModeler::TRAP::IsExpectedInputSubbandCount((uint64_t)&v195, (uint64_t)"inOutSeatbeltConfidence");
        if (IsExpectedInputSubbandCount)
        {
          BOOL IsExpectedInputSubbandCount = (char *)Phase::SpatialModeler::TRAP::IsExpectedInputSubbandCount((uint64_t)&v187, (uint64_t)"inOutCurrentReverbTime");
          if (IsExpectedInputSubbandCount)
          {
            for (uint64_t i = 0; i != 40; i += 4)
              Phase::SpatialModeler::TRAP::CleanInputReverbTimeAndConfidence((Phase::SpatialModeler::TRAP *)((char *)&v213 + i), (float *)((char *)&v205 + i), v28);
            for (uint64_t j = 0; j != 40; j += 4)
              Phase::SpatialModeler::TRAP::CleanInputReverbTimeAndConfidence((Phase::SpatialModeler::TRAP *)((char *)v203 + j), (float *)((char *)&v195 + j), v28);
            for (uint64_t k = 0; k != 40; k += 4)
              Phase::SpatialModeler::TRAP::CleanInputReverbTime((char *)&v187 + k, v31);
            BOOL IsExpectedInputSubbandCount = Phase::SpatialModeler::TRAP::CleanInputReverbTime((char *)&v186, v31);
            float v26 = fminf(fmaxf(v26, 0.0), 1.0);
          }
        }
      }
    }
  }
  float v33 = Phase::SpatialModeler::TRAP::CalculateRoomChangeConfidence((Phase::SpatialModeler::TRAP *)IsExpectedInputSubbandCount, v26);
  float v35 = Phase::SpatialModeler::TRAP::TP(v34);
  Phase::Subbands<float>::operator*=(v203, (float *)v35 + 115, v36);
  long long v38 = *v37;
  long long v39 = v37[1];
  long long v40 = v37[3];
  v137[2] = v37[2];
  v137[3] = v40;
  v137[0] = v38;
  v137[1] = v39;
  long long v41 = v37[4];
  long long v42 = v37[5];
  long long v43 = v37[7];
  v137[6] = v37[6];
  v137[7] = v43;
  v137[4] = v41;
  v137[5] = v42;
  long long v140 = v197;
  long long v141 = v198;
  long long v138 = v195;
  long long v139 = v196;
  long long v144 = v201;
  long long v145 = v202;
  long long v142 = v199;
  long long v143 = v200;
  long long v148 = v215;
  long long v149 = v216;
  long long v146 = v213;
  long long v147 = v214;
  long long v152 = v219;
  long long v153 = v220;
  long long v150 = v217;
  long long v151 = v218;
  long long v156 = v207;
  long long v157 = v208;
  long long v154 = v205;
  long long v155 = v206;
  long long v160 = v211;
  long long v161 = v212;
  long long v158 = v209;
  long long v159 = v210;
  long long v185 = 0u;
  long long v184 = 0u;
  long long v183 = 0u;
  long long v181 = 0u;
  long long v182 = 0u;
  long long v179 = 0u;
  long long v180 = 0u;
  long long v177 = 0u;
  long long v178 = 0u;
  long long v175 = 0u;
  long long v176 = 0u;
  long long v173 = 0u;
  long long v174 = 0u;
  long long v171 = 0u;
  long long v172 = 0u;
  long long v169 = 0u;
  long long v170 = 0u;
  long long v167 = 0u;
  long long v168 = 0u;
  long long v165 = 0u;
  long long v166 = 0u;
  BOOL v44 = *(unsigned char *)(a1 + 748) == 0;
  long long v163 = 0u;
  long long v164 = 0u;
  long long v162 = 0u;
  if (v44) {
    BOOL v45 = (float (*)(float, float, float, float))Phase::SpatialModeler::TRAP::Sentinel::Process(std::chrono::duration<float,std::ratio<1l,1l>>,Phase::Geometry::Scene const&,Phase::SpatialModeler::RayTracerState &)::$_2::__invoke;
  }
  else {
    BOOL v45 = (float (*)(float, float, float, float))Phase::SpatialModeler::TRAP::CalculateSeatbeltAndAcousticVisualMix;
  }
  Phase::SpatialModeler::TRAP::MixMultibandValuesAndConfidences((uint64_t)v137, &v133, (float (*)(float))Phase::Logarithm<float>, (float (*)(float))Phase::Exponential<float>, v45, (float (*)(float))Phase::SpatialModeler::TRAP::Sentinel::Process(std::chrono::duration<float,std::ratio<1l,1l>>,Phase::Geometry::Scene const&,Phase::SpatialModeler::RayTracerState &)::$_0::__invoke, (float (*)(float))Phase::SpatialModeler::TRAP::Sentinel::Process(std::chrono::duration<float,std::ratio<1l,1l>>,Phase::Geometry::Scene const&,Phase::SpatialModeler::RayTracerState &)::$_1::__invoke);
  int v47 = (float *)(a2 + 21448);
  if (!*(unsigned char *)(a2 + 21452))
  {
    float v48 = v133.f32[1];
    uint64_t v46 = (float *)Phase::SpatialModeler::TRAP::TP((Phase::SpatialModeler::TRAP *)v46);
    if (v48 >= v46[126])
    {
      float v49 = **(NSObject ***)(Phase::Logger::GetInstance((Phase::Logger *)v46) + 1184);
      BOOL v50 = os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT);
      if (v50)
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "Sentinel.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 82;
        _os_log_impl(&dword_221E5E000, v49, OS_LOG_TYPE_DEFAULT, "%25s:%-5d TRAP initialized the current reverb time", buf, 0x12u);
      }
      uint64_t v46 = (float *)Phase::SpatialModeler::TRAP::TP((Phase::SpatialModeler::TRAP *)v50);
      uint64_t v51 = HIDWORD(v204);
      memset(buf, 0, sizeof(buf));
      long long v222 = 0u;
      long long v223 = 0u;
      long long v224 = 0u;
      long long v225 = 0u;
      memset(v226, 0, 28);
      *(_DWORD *)&v226[28] = HIDWORD(v204);
      if (HIDWORD(v204))
      {
        float v52 = v46[113];
        uint64_t v53 = buf;
        uint64_t v54 = v203;
        do
        {
          float v55 = v54->f32[0];
          uint64_t v54 = (float32x4_t *)((char *)v54 + 4);
          *(float *)uint64_t v53 = v52 * v55;
          v53 += 4;
          --v51;
        }
        while (v51);
      }
      long long v191 = v224;
      long long v192 = v225;
      long long v193 = *(_OWORD *)v226;
      long long v194 = *(_OWORD *)&v226[16];
      long long v187 = *(_OWORD *)buf;
      long long v188 = *(_OWORD *)&buf[16];
      long long v189 = v222;
      long long v190 = v223;
      *(unsigned char *)(a2 + 21452) = 1;
    }
  }
  float v56 = *v47;
  if (*v47 < v33)
  {
    *int v47 = v33;
    float v56 = v33;
  }
  float v58 = Phase::SpatialModeler::TRAP::CalculateRateLimitingConfidenceWithRoomChange((Phase::SpatialModeler::TRAP *)v46, v186, v56);
  BOOL v59 = (long long *)(a2 + 21040);
  float v60 = *(float *)(a1 + 752);
  if (v60 <= 0.0)
  {
    long long v224 = v166;
    long long v225 = v167;
    *(_OWORD *)uint64_t v226 = v168;
    *(_OWORD *)&v226[16] = v169;
    *(_OWORD *)buf = v162;
    *(_OWORD *)&buf[16] = v163;
    long long v222 = v164;
    long long v223 = v165;
  }
  else
  {
    uint64_t v61 = 0;
    memset(v226, 0, 28);
    long long v225 = 0u;
    long long v224 = 0u;
    long long v223 = 0u;
    long long v222 = 0u;
    memset(buf, 0, sizeof(buf));
    char v62 = 1;
    *(_DWORD *)&v226[28] = 10;
LABEL_28:
    float v63 = v33;
    uint64_t v64 = v61;
    do
    {
      float v65 = *((float *)&v187 + v64);
      float v66 = *((float *)&v162 + v64) - v65;
      float v67 = a3;
      if (v66 < 0.0) {
        float v67 = -a3;
      }
      float v68 = (float)(v58 * v65) * (float)(powf(1.2, v67 / v60) + -1.0);
      if (v66 >= 0.0)
      {
        if (v66 > v68)
        {
LABEL_37:
          char v62 = 0;
          *(float *)&buf[4 * v64] = v65 + v68;
          uint64_t v61 = v64 + 1;
          float v33 = v63;
          if (v64 != 9) {
            goto LABEL_28;
          }
          goto LABEL_42;
        }
      }
      else if (v66 < v68)
      {
        goto LABEL_37;
      }
      *(float *)&buf[4 * v64++] = v65 + v66;
    }
    while (v64 != 10);
    float v33 = v63;
    if ((v62 & 1) == 0) {
      goto LABEL_42;
    }
  }
  *int v47 = 0.0;
LABEL_42:
  uint64_t v69 = 0;
  float v70 = *(float *)(a1 + 744);
  long long v126 = 0u;
  long long v127 = 0u;
  long long v128 = 0u;
  long long v129 = 0u;
  long long v130 = 0u;
  long long v131 = 0u;
  memset(v132, 0, 28);
  *(_DWORD *)&v132[28] = 10;
  do
  {
    float v71 = *(float *)(a2 + 336 + v69);
    float v72 = v70;
    if (v71 > 0.0) {
      float v72 = fminf(0.15811 / (float)(v71 * 4.0), v70);
    }
    float v73 = *(float *)&buf[v69];
    uint64_t v57 = (float *)Phase::SpatialModeler::TRAP::TP((Phase::SpatialModeler::TRAP *)v57);
    *(float *)((char *)&v126 + v69) = fminf(fmaxf(v73, v57[100]), v72);
    v69 += 4;
  }
  while (v69 != 40);
  long long v74 = v131;
  *(_OWORD *)(a2 + 21104) = v130;
  *(_OWORD *)(a2 + 21120) = v74;
  long long v75 = *(_OWORD *)&v132[16];
  *(_OWORD *)(a2 + 21136) = *(_OWORD *)v132;
  *(_OWORD *)(a2 + 21152) = v75;
  long long v76 = v127;
  *BOOL v59 = v126;
  *(_OWORD *)(a2 + 21056) = v76;
  long long v77 = v129;
  *(_OWORD *)(a2 + 21072) = v128;
  *(_OWORD *)(a2 + 21088) = v77;
  double result = (float *)Phase::SpatialModeler::TRAP::TP((Phase::SpatialModeler::TRAP *)v57);
  if (result[128] > 0.0)
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_20, memory_order_acquire) & 1) == 0)
    {
      uint64_t v123 = (Phase::SpatialModeler::TRAP *)__cxa_guard_acquire(&_MergedGlobals_20);
      if (v123)
      {
        qword_267F77BA0 = (unint64_t)((float)(1.0 / *((float *)Phase::SpatialModeler::TRAP::TP(v123) + 128))
                                           * 24000000.0);
        unk_267F77BA8 = 0;
        dword_267F77BB0 = 0;
        __cxa_guard_release(&_MergedGlobals_20);
      }
    }
    double result = (float *)Phase::Throttle::ShouldFire((Phase::Throttle *)&qword_267F77BA0, 0);
    if (result)
    {
      int v79 = v135;
      *(_DWORD *)(a2 + 23672) = v136;
      __int32 v80 = v133.i32[1];
      *(_DWORD *)(a2 + 23688) = v133.i32[0];
      *(_DWORD *)(a2 + 23692) = v134;
      *(float *)(a2 + 23696) = v124[97];
      *(_DWORD *)(a2 + 23708) = v80;
      *(_DWORD *)(a2 + 23712) = v79;
      *(float *)(a2 + 23716) = *v124;
      *(float *)(a2 + 23720) = v33;
      *(_DWORD *)(a2 + 23732) = *(_DWORD *)(a2 + 21448);
      *(float *)(a2 + 23736) = v58;
      *(_OWORD *)(a2 + 24112) = *(_OWORD *)(a2 + 20144);
      *(_OWORD *)(a2 + 24096) = *(_OWORD *)(a2 + 20128);
      *(_OWORD *)(a2 + 24080) = *(_OWORD *)(a2 + 20112);
      *(_OWORD *)(a2 + 24064) = *(_OWORD *)(a2 + 20096);
      *(_OWORD *)(a2 + 24048) = *(_OWORD *)(a2 + 20080);
      *(_OWORD *)(a2 + 24032) = *(_OWORD *)(a2 + 20064);
      *(_OWORD *)(a2 + 24016) = *(_OWORD *)(a2 + 20048);
      *(_OWORD *)(a2 + 24000) = *(_OWORD *)(a2 + 20032);
      long long v81 = *(_OWORD *)(a2 + 20160);
      long long v82 = *(_OWORD *)(a2 + 20176);
      long long v83 = *(_OWORD *)(a2 + 20192);
      *(_OWORD *)(a2 + 24176) = *(_OWORD *)(a2 + 20208);
      *(_OWORD *)(a2 + 24160) = v83;
      *(_OWORD *)(a2 + 24144) = v82;
      *(_OWORD *)(a2 + 24128) = v81;
      long long v84 = *(_OWORD *)(a2 + 20224);
      long long v85 = *(_OWORD *)(a2 + 20240);
      long long v86 = *(_OWORD *)(a2 + 20256);
      *(_OWORD *)(a2 + 24240) = *(_OWORD *)(a2 + 20272);
      *(_OWORD *)(a2 + 24224) = v86;
      *(_OWORD *)(a2 + 24208) = v85;
      *(_OWORD *)(a2 + 24192) = v84;
      long long v87 = *(_OWORD *)(a2 + 21168);
      long long v88 = *(_OWORD *)(a2 + 21184);
      long long v89 = *(_OWORD *)(a2 + 21200);
      *(_OWORD *)(a2 + 24304) = *(_OWORD *)(a2 + 21216);
      *(_OWORD *)(a2 + 24288) = v89;
      *(_OWORD *)(a2 + 24272) = v88;
      *(_OWORD *)(a2 + 24256) = v87;
      long long v90 = *(_OWORD *)(a2 + 21232);
      long long v91 = *(_OWORD *)(a2 + 21248);
      long long v92 = *(_OWORD *)(a2 + 21264);
      *(_OWORD *)(a2 + 24368) = *(_OWORD *)(a2 + 21280);
      *(_OWORD *)(a2 + 24352) = v92;
      *(_OWORD *)(a2 + 24336) = v91;
      *(_OWORD *)(a2 + 24320) = v90;
      long long v93 = *(_OWORD *)(a2 + 21296);
      long long v94 = *(_OWORD *)(a2 + 21312);
      long long v95 = *(_OWORD *)(a2 + 21328);
      *(_OWORD *)(a2 + 24432) = *(_OWORD *)(a2 + 21344);
      *(_OWORD *)(a2 + 24416) = v95;
      *(_OWORD *)(a2 + 24400) = v94;
      *(_OWORD *)(a2 + 24384) = v93;
      long long v96 = *(_OWORD *)(a2 + 21360);
      long long v97 = *(_OWORD *)(a2 + 21376);
      long long v98 = *(_OWORD *)(a2 + 21392);
      *(_OWORD *)(a2 + 24496) = *(_OWORD *)(a2 + 21408);
      *(_OWORD *)(a2 + 24480) = v98;
      *(_OWORD *)(a2 + 24464) = v97;
      *(_OWORD *)(a2 + 24448) = v96;
      long long v99 = *(_OWORD *)(a2 + 20288);
      long long v100 = *(_OWORD *)(a2 + 20304);
      long long v101 = *(_OWORD *)(a2 + 20320);
      *(_OWORD *)(a2 + 24560) = *(_OWORD *)(a2 + 20336);
      *(_OWORD *)(a2 + 24544) = v101;
      *(_OWORD *)(a2 + 24528) = v100;
      *(_OWORD *)(a2 + 24512) = v99;
      long long v102 = *(_OWORD *)(a2 + 20352);
      long long v103 = *(_OWORD *)(a2 + 20368);
      long long v104 = *(_OWORD *)(a2 + 20384);
      *(_OWORD *)(a2 + 24624) = *(_OWORD *)(a2 + 20400);
      *(_OWORD *)(a2 + 24608) = v104;
      *(_OWORD *)(a2 + 24592) = v103;
      *(_OWORD *)(a2 + 24576) = v102;
      long long v105 = v138;
      long long v106 = v139;
      long long v107 = v140;
      *(_OWORD *)(a2 + 24688) = v141;
      *(_OWORD *)(a2 + 24672) = v107;
      *(_OWORD *)(a2 + 24656) = v106;
      *(_OWORD *)(a2 + 24640) = v105;
      long long v108 = v142;
      long long v109 = v143;
      long long v110 = v144;
      *(_OWORD *)(a2 + 24752) = v145;
      *(_OWORD *)(a2 + 24736) = v110;
      *(_OWORD *)(a2 + 24720) = v109;
      *(_OWORD *)(a2 + 24704) = v108;
      long long v111 = v162;
      long long v112 = v163;
      long long v113 = v164;
      *(_OWORD *)(a2 + 24816) = v165;
      *(_OWORD *)(a2 + 24800) = v113;
      *(_OWORD *)(a2 + 24784) = v112;
      *(_OWORD *)(a2 + 24768) = v111;
      long long v114 = v166;
      long long v115 = v167;
      long long v116 = v168;
      *(_OWORD *)(a2 + 24880) = v169;
      *(_OWORD *)(a2 + 24864) = v116;
      *(_OWORD *)(a2 + 24848) = v115;
      *(_OWORD *)(a2 + 24832) = v114;
      long long v117 = *v59;
      long long v118 = *(_OWORD *)(a2 + 21056);
      long long v119 = *(_OWORD *)(a2 + 21072);
      *(_OWORD *)(a2 + 24944) = *(_OWORD *)(a2 + 21088);
      *(_OWORD *)(a2 + 24928) = v119;
      *(_OWORD *)(a2 + 24912) = v118;
      *(_OWORD *)(a2 + 24896) = v117;
      long long v120 = *(_OWORD *)(a2 + 21104);
      long long v121 = *(_OWORD *)(a2 + 21120);
      long long v122 = *(_OWORD *)(a2 + 21136);
      *(_OWORD *)(a2 + 25008) = *(_OWORD *)(a2 + 21152);
      *(_OWORD *)(a2 + 24992) = v122;
      *(_OWORD *)(a2 + 24976) = v121;
      *(_OWORD *)(a2 + 24960) = v120;
      *(void *)(a2 + 25024) = *((void *)Phase::SpatialModeler::TRAP::TP((Phase::SpatialModeler::TRAP *)result) + 66);
      return (float *)Phase::SpatialModeler::RoomSimulationLogging::logTRAP(a2 + 23664);
    }
  }
  return result;
}

void sub_222063590(_Unwind_Exception *a1)
{
}

float Phase::SpatialModeler::TRAP::Sentinel::Process(std::chrono::duration<float,std::ratio<1l,1l>>,Phase::Geometry::Scene const&,Phase::SpatialModeler::RayTracerState &)::$_2::__invoke()
{
  return 1.0;
}

float Phase::SpatialModeler::TRAP::Sentinel::Process(std::chrono::duration<float,std::ratio<1l,1l>>,Phase::Geometry::Scene const&,Phase::SpatialModeler::RayTracerState &)::$_0::__invoke(Phase::SpatialModeler::TRAP *a1, float a2)
{
  float v3 = *((float *)Phase::SpatialModeler::TRAP::TP(a1) + 107);

  return powf(a2, v3);
}

float Phase::SpatialModeler::TRAP::Sentinel::Process(std::chrono::duration<float,std::ratio<1l,1l>>,Phase::Geometry::Scene const&,Phase::SpatialModeler::RayTracerState &)::$_1::__invoke(Phase::SpatialModeler::TRAP *a1, float a2)
{
  float v3 = *((float *)Phase::SpatialModeler::TRAP::TP(a1) + 108);

  return powf(a2, v3);
}

uint64_t Phase::Controller::SessionManager::SessionManager(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  id v5 = a2;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = 0;
  if (v5)
  {
    if (objc_opt_respondsToSelector())
    {
      long long v6 = [v5 sessionInterface];

      if (v6)
      {
        uint64_t v7 = [v5 sessionInterface];
        long long v8 = *(void **)a1;
        *(void *)a1 = v7;

        v35[0] = 0;
        v35[1] = v35;
        v35[2] = 0x2020000000;
        v35[3] = *(void *)(a1 + 16);
        long long v9 = *(void **)a1;
        v34[0] = MEMORY[0x263EF8330];
        v34[1] = 3221225472;
        v34[2] = ___ZN5Phase10Controller14SessionManagerC2EPU24objcproto13PHASEPlatform11objc_objectPNS0_12VoiceManagerE_block_invoke;
        v34[3] = &unk_2645F7B10;
        v34[4] = v35;
        v34[5] = a1;
        long long v10 = (Phase::Logger *)[v9 registerActivateAudioSessionBlock:v34];
        if ((v10 & 1) == 0)
        {
          long long v11 = **(id **)(Phase::Logger::GetInstance(v10) + 960);
          if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            double v37 = "SessionManager.mm";
            __int16 v38 = 1024;
            int v39 = 72;
            __int16 v40 = 2048;
            uint64_t v41 = a1;
            _os_log_impl(&dword_221E5E000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d impl@%p: Failed to register audio session activation block.", buf, 0x1Cu);
          }
        }
        long long v12 = *(void **)a1;
        v33[0] = MEMORY[0x263EF8330];
        v33[1] = 3221225472;
        v33[2] = ___ZN5Phase10Controller14SessionManagerC2EPU24objcproto13PHASEPlatform11objc_objectPNS0_12VoiceManagerE_block_invoke_2;
        v33[3] = &unk_2645F7B38;
        v33[4] = v35;
        long long v13 = (Phase::Logger *)[v12 registerFadeClientsInAudioSessionBlock:v33];
        if ((v13 & 1) == 0)
        {
          float32x4_t v14 = **(id **)(Phase::Logger::GetInstance(v13) + 960);
          if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            double v37 = "SessionManager.mm";
            __int16 v38 = 1024;
            int v39 = 82;
            __int16 v40 = 2048;
            uint64_t v41 = a1;
            _os_log_impl(&dword_221E5E000, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d impl@%p: Failed to register audio session fade block.", buf, 0x1Cu);
          }
        }
        if (objc_opt_respondsToSelector())
        {
          long long v15 = *(void **)a1;
          v32[0] = MEMORY[0x263EF8330];
          v32[1] = 3221225472;
          void v32[2] = ___ZN5Phase10Controller14SessionManagerC2EPU24objcproto13PHASEPlatform11objc_objectPNS0_12VoiceManagerE_block_invoke_6;
          float v32[3] = &__block_descriptor_40_e14_i20__0I8B12f16l;
          v32[4] = a1;
          float32x4_t v16 = (Phase::Logger *)[v15 registerMuteInputClientsInAudioSessionBlock:v32];
          if ((v16 & 1) == 0)
          {
            float32x4_t v17 = **(id **)(Phase::Logger::GetInstance(v16) + 960);
            if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315650;
              double v37 = "SessionManager.mm";
              __int16 v38 = 1024;
              int v39 = 104;
              __int16 v40 = 2048;
              uint64_t v41 = a1;
              _os_log_impl(&dword_221E5E000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d impl@%p: Failed to register audio session mute input block.", buf, 0x1Cu);
            }
          }
        }
        uint64_t v18 = _os_feature_enabled_impl();
        if (v18)
        {
          if ((objc_opt_respondsToSelector() & 1) == 0) {
            goto LABEL_23;
          }
          long long v19 = [*(id *)a1 sessionVolumeInterface];
          BOOL v20 = v19 == 0;

          if (v20) {
            goto LABEL_23;
          }
          uint64_t v21 = [*(id *)a1 sessionVolumeInterface];
          long long v22 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = v21;

          long long v23 = *(void **)(a1 + 8);
          v31[0] = MEMORY[0x263EF8330];
          v31[1] = 3221225472;
          void v31[2] = ___ZN5Phase10Controller14SessionManagerC2EPU24objcproto13PHASEPlatform11objc_objectPNS0_12VoiceManagerE_block_invoke_10;
          v31[3] = &__block_descriptor_40_e28_B16__0__PHASEVolumeCommand_8l;
          v31[4] = a1;
          long long v24 = (Phase::Logger *)[v23 registerVolumeChangedNotificationBlock:v31];
          if (v24) {
            goto LABEL_23;
          }
          long long v25 = **(id **)(Phase::Logger::GetInstance(v24) + 960);
          if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
            goto LABEL_23;
          }
          *(_DWORD *)buf = 136315650;
          double v37 = "SessionManager.mm";
          __int16 v38 = 1024;
          int v39 = 126;
          __int16 v40 = 2048;
          uint64_t v41 = a1;
          float v26 = "%25s:%-5d impl@%p: Failed to register audio session volume changed notification block.";
          uint64_t v27 = v25;
          os_log_type_t v28 = OS_LOG_TYPE_ERROR;
        }
        else
        {
          double v29 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)v18) + 960);
          if (!os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
          {
LABEL_23:
            _Block_object_dispose(v35, 8);
            goto LABEL_24;
          }
          *(_DWORD *)buf = 136315650;
          double v37 = "SessionManager.mm";
          __int16 v38 = 1024;
          int v39 = 111;
          __int16 v40 = 2048;
          uint64_t v41 = a1;
          float v26 = "%25s:%-5d impl@%p: audio session volume feature disabled";
          uint64_t v27 = v29;
          os_log_type_t v28 = OS_LOG_TYPE_DEFAULT;
        }
        _os_log_impl(&dword_221E5E000, v27, v28, v26, buf, 0x1Cu);
        goto LABEL_23;
      }
    }
  }
LABEL_24:

  return a1;
}

void sub_222063B4C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v4 - 144), 8);
  objc_destroyWeak(v3);

  _Unwind_Resume(a1);
}

void ___ZN5Phase10Controller14SessionManagerC2EPU24objcproto13PHASEPlatform11objc_objectPNS0_12VoiceManagerE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(a1 + 40);
  unint64_t v6 = Phase::Controller::VoiceManager::Implementation::ActivateAudioSession(**(Phase::Controller::VoiceManager::Implementation ***)(*(void *)(*(void *)(a1 + 32) + 8) + 24), a2, a3, 1);
  if (HIDWORD(v6)) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = v6 == 0;
  }
  if (!v7)
  {
    long long v8 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)v6) + 960);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      int v11 = 136316418;
      long long v12 = "SessionManager.mm";
      __int16 v13 = 1024;
      int v14 = 61;
      __int16 v15 = 2048;
      uint64_t v16 = v5;
      __int16 v17 = 1024;
      int v18 = a2;
      __int16 v19 = 1024;
      int v20 = a3;
      __int16 v21 = 1024;
      int v22 = 0;
      _os_log_impl(&dword_221E5E000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d impl@%p: ActivateAudioSession(token=0x%x, active=%i) returned %i", (uint8_t *)&v11, 0x2Eu);
    }
  }
  id WeakRetained = objc_loadWeakRetained((id *)(v5 + 24));
  long long v10 = WeakRetained;
  if (WeakRetained) {
    [WeakRetained setExternalInputStreamSession:a2 isActive:a3];
  }
}

void sub_222063CE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN5Phase10Controller14SessionManagerC2EPU24objcproto13PHASEPlatform11objc_objectPNS0_12VoiceManagerE_block_invoke_2(uint64_t a1, int a2, float a3, float a4)
{
  return Phase::Controller::SubmixSystem::FadeAudioSession((Phase::Controller::SubmixSystem *)(**(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 224), a2, a3, a4, 1);
}

uint64_t ___ZN5Phase10Controller14SessionManagerC2EPU24objcproto13PHASEPlatform11objc_objectPNS0_12VoiceManagerE_block_invoke_6(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 24));
  long long v9 = WeakRetained;
  if (WeakRetained)
  {
    *(float *)&double v8 = a4;
    uint64_t v10 = [WeakRetained setExternalInputStreamSessionMute:a2 isMuted:a3 fadeTimeInSeconds:v8];
  }
  else
  {
    int v11 = **(id **)(Phase::Logger::GetInstance(0) + 432);
    uint64_t v10 = 0;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = 136315394;
      int v14 = "SessionManager.mm";
      __int16 v15 = 1024;
      int v16 = 93;
      _os_log_impl(&dword_221E5E000, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d ignoring mute input notification because external stream manager was deallocated", (uint8_t *)&v13, 0x12u);
      uint64_t v10 = 0;
    }
  }

  return v10;
}

void sub_222063E48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL ___ZN5Phase10Controller14SessionManagerC2EPU24objcproto13PHASEPlatform11objc_objectPNS0_12VoiceManagerE_block_invoke_10(uint64_t a1, void *a2)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(Phase::Controller::SessionManager **)(a1 + 32);
  id v3 = a2;
  uint64_t v4 = [v3 description];
  uint64_t v5 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v4)
                                                                                     + 960)));
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315906;
    float v34 = "SessionManager.mm";
    __int16 v35 = 1024;
    int v36 = 362;
    __int16 v37 = 2048;
    __int16 v38 = v2;
    __int16 v39 = 2080;
    uint64_t v40 = [(Phase::Logger *)v4 UTF8String];
    _os_log_impl(&dword_221E5E000, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d impl@%p: --> volume notification - %s", buf, 0x26u);
  }

  if (!v3) {
    std::terminate();
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass() & 1) != 0 || (objc_opt_class(), (objc_opt_isKindOfClass()))
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass() & 1) != 0 || (objc_opt_class(), (objc_opt_isKindOfClass()))
    {
      id v6 = v3;
      BOOL v7 = [v6 volume];
      uint64_t v8 = [v6 audioSessionToken];

      id v9 = v7;
      if (v9)
      {
        id v10 = v9;
        int v11 = (Phase::Logger *)[v10 unit];
        if (v11)
        {
          long long v12 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v11)
                                                                                              + 960)));
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            uint64_t v13 = [v10 unit];
            [v10 value];
            *(_DWORD *)buf = 136316162;
            float v34 = "SessionManager.mm";
            __int16 v35 = 1024;
            int v36 = 383;
            __int16 v37 = 2048;
            __int16 v38 = v2;
            __int16 v39 = 2048;
            uint64_t v40 = v13;
            __int16 v41 = 2048;
            double v42 = v14;
            _os_log_impl(&dword_221E5E000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d impl@%p: unimplemented volume unit %ld, value %f", buf, 0x30u);
          }

          uint64_t v15 = 0;
          unsigned __int8 v16 = 0;
          uint64_t v17 = 0;
        }
        else
        {
          [v10 value];
          uint64_t v17 = v24;
          if ([v10 muted]) {
            uint64_t v15 = 0x100000000;
          }
          else {
            uint64_t v15 = 0;
          }
          unsigned __int8 v16 = 1;
        }

        unint64_t AudioSessionVolume = v17 | v15;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v8 = 0;
    }
    unint64_t AudioSessionVolume = Phase::Controller::SessionManager::GetAudioSessionVolume(v2, v8, 1);
    unsigned __int8 v16 = v23;
    id v10 = 0;
    LOBYTE(v17) = AudioSessionVolume;
LABEL_22:
    long long v25 = (Phase::Logger *)(AudioSessionVolume & 0xFFFFFFFFFFFFFF00 | v17);
    unint64_t v31 = v25;
    int v32 = v16;
    if (v16)
    {
      uint64_t v21 = Phase::Controller::SubmixSystem::SetAudioSessionLevel(**((void **)v2 + 2) + 224, v8, (uint64_t)&v31, 1);
    }
    else
    {
      float v26 = **(id **)(Phase::Logger::GetInstance(v25) + 960);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315906;
        float v34 = "SessionManager.mm";
        __int16 v35 = 1024;
        int v36 = 440;
        __int16 v37 = 2048;
        __int16 v38 = v2;
        __int16 v39 = 1024;
        LODWORD(v40) = v8;
        _os_log_impl(&dword_221E5E000, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d impl@%p: error: could not get/apply volume for session 0x%x", buf, 0x22u);
      }
      uint64_t v21 = 0;
    }
    goto LABEL_27;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v10 = v3;
    int v18 = (void *)*((void *)v2 + 2);
    __int16 v19 = [v10 volumeCategory];
    int v20 = [v10 volumeMode];
    uint64_t v21 = Phase::Controller::SubmixSystem::SetAudioSessionLevelInVolumeCategoryAndMode((Phase::Controller::SubmixSystem *)(*v18 + 224), v19, v20, 1);

LABEL_27:
    goto LABEL_28;
  }
  objc_opt_class();
  uint64_t isKindOfClass = objc_opt_isKindOfClass();
  if (isKindOfClass)
  {
    uint64_t isKindOfClass = Phase::Controller::SubmixSystem::SetAudioSessionLevelOnAllSessions((Phase::Controller::SubmixSystem *)(**((void **)v2 + 2) + 224), 1);
    uint64_t v21 = isKindOfClass;
  }
  else
  {
    uint64_t v21 = 0;
  }
LABEL_28:
  os_log_type_t v28 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance((Phase::Logger *)isKindOfClass)
                                                                                      + 960)));
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v29 = [(Phase::Logger *)v4 UTF8String];
    *(_DWORD *)buf = 136316162;
    float v34 = "SessionManager.mm";
    __int16 v35 = 1024;
    int v36 = 455;
    __int16 v37 = 2048;
    __int16 v38 = v2;
    __int16 v39 = 2080;
    uint64_t v40 = v29;
    __int16 v41 = 2048;
    double v42 = *(double *)&v21;
    _os_log_impl(&dword_221E5E000, v28, OS_LOG_TYPE_DEFAULT, "%25s:%-5d impl@%p: <-- volume notification - %s, submixes %zu", buf, 0x30u);
  }

  return v21 != 0;
}

void sub_2220643A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void Phase::Controller::SessionManager::~SessionManager(id *this)
{
}

BOOL Phase::Controller::SessionManager::SetSessionPlayState(void **a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, int a6, int32x2_t *a7)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  if (!a2 || (id v9 = *a1) == 0)
  {
    if (!a7) {
      return 1;
    }
    int32x2_t v20 = (int32x2_t)1065353216;
LABEL_18:
    *a7 = v20;
    return 1;
  }
  int v11 = a5;
  int v13 = a2;
  uint64_t v14 = a4 & 3 | (((a4 >> 2) & 1) << 6) | (32 * ((a4 >> 3) & 1));
  v24[0] = 0;
  if (a6)
  {
    uint64_t v15 = [v9 setClientStateFromCallbackOnSession:a2 clientToken:a3 modes:v14 state:a5 outDuckingInfo:v24];
    if ((v15 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
  uint64_t v15 = [v9 setClientStateOnSession:a2 clientToken:a3 modes:v14 state:a5 outDuckingInfo:v24];
  if (v15)
  {
LABEL_12:
    uint64_t v21 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)v15) + 960);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      int v22 = Phase::Controller::SessionManager::SetSessionPlayState(unsigned int,void *,unsigned int,AVAudioSessionClientPlayState,BOOL,Phase::Controller::SessionManager::DuckingInfo *)::statesStrings[v11];
      uint64_t v27 = "SessionManager.mm";
      unsigned __int8 v23 = "";
      int v29 = 187;
      *(_DWORD *)buf = 136317186;
      __int16 v28 = 1024;
      if (a6) {
        unsigned __int8 v23 = ", from callback";
      }
      __int16 v30 = 2048;
      unint64_t v31 = a1;
      __int16 v32 = 2048;
      uint64_t v33 = a3;
      __int16 v34 = 2080;
      __int16 v35 = v22;
      __int16 v36 = 1024;
      int v37 = v14;
      __int16 v38 = 1024;
      int v39 = v13;
      __int16 v40 = 2080;
      __int16 v41 = v23;
      __int16 v42 = 1024;
      int v43 = v24[0];
      _os_log_impl(&dword_221E5E000, v21, OS_LOG_TYPE_DEFAULT, "%25s:%-5d impl@%p: Set client token %p state \"%s\" for modes 0x%x on session 0x%x%s - obtainedFromCM %d", buf, 0x4Cu);
    }
    if (!a7) {
      return 1;
    }
    int32x2_t v20 = vrev64_s32(v25);
    goto LABEL_18;
  }
LABEL_5:
  unsigned __int8 v16 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)v15) + 960);
  BOOL result = os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
  if (result)
  {
    int v18 = Phase::Controller::SessionManager::SetSessionPlayState(unsigned int,void *,unsigned int,AVAudioSessionClientPlayState,BOOL,Phase::Controller::SessionManager::DuckingInfo *)::statesStrings[v11];
    *(_DWORD *)buf = 136316930;
    uint64_t v27 = "SessionManager.mm";
    __int16 v19 = "";
    __int16 v28 = 1024;
    int v29 = 200;
    if (a6) {
      __int16 v19 = ", from callback";
    }
    __int16 v30 = 2048;
    unint64_t v31 = a1;
    __int16 v32 = 2048;
    uint64_t v33 = a3;
    __int16 v34 = 2080;
    __int16 v35 = v18;
    __int16 v36 = 1024;
    int v37 = v14;
    __int16 v38 = 1024;
    int v39 = v13;
    __int16 v40 = 2080;
    __int16 v41 = v19;
    _os_log_impl(&dword_221E5E000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d impl@%p: Error setting client token %p state \"%s\" for modes 0x%x on session 0x%x%s", buf, 0x46u);
    return 0;
  }
  return result;
}

uint64_t Phase::Controller::SessionManager::GetSessionInputMuteState(id *this, uint64_t a2, uint64_t a3)
{
  int v3 = 0;
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (!a2)
  {
    int v5 = 0;
    return v3 | (v5 << 8);
  }
  int v5 = 0;
  if (*this)
  {
    uint64_t v8 = objc_opt_respondsToSelector();
    if (v8)
    {
      id v9 = [*this getInputMuteStateForSession:a2 fromCallback:a3];
      id v10 = v9;
      if (v9)
      {
        int v3 = [v9 BOOLValue];

        int v5 = 1;
        return v3 | (v5 << 8);
      }
    }
    else
    {
      int v11 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)v8) + 960);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        int v13 = 136315906;
        uint64_t v14 = "SessionManager.mm";
        __int16 v15 = 1024;
        int v16 = 233;
        __int16 v17 = 2048;
        int v18 = this;
        __int16 v19 = 1024;
        int v20 = a2;
        _os_log_impl(&dword_221E5E000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d impl@%p: Error getting input muted for session 0x%x", (uint8_t *)&v13, 0x22u);
      }
    }
    int v3 = 0;
    int v5 = 0;
  }
  return v3 | (v5 << 8);
}

void sub_222064890(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void Phase::Controller::SessionManager::SetSessionInputMuteState(void **this, uint64_t a2, void *a3, uint64_t a4, int a5)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  if (a2)
  {
    id v6 = *this;
    if (v6)
    {
      int v8 = a4;
      int v10 = a2;
      if (a5)
      {
        uint64_t v11 = [v6 setInputMuteStateFromCallbackOnSession:a2 clientToken:a3 isMuted:a4];
        if ((v11 & 1) == 0) {
          goto LABEL_5;
        }
      }
      else
      {
        uint64_t v11 = [v6 setInputMuteStateOnSession:a2 clientToken:a3 isMuted:a4];
        if (!v11)
        {
LABEL_5:
          long long v12 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance((Phase::Logger *)v11)
                                                                                              + 960)));
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            if (a5) {
              int v13 = ", from callback";
            }
            else {
              int v13 = "";
            }
            std::string::basic_string[abi:ne180100]<0>(__p, v13);
            int32x2_t v25 = "SessionManager.mm";
            uint64_t v14 = "False";
            if (v8) {
              uint64_t v14 = "True";
            }
            __int16 v15 = (void **)__p[0];
            *(_DWORD *)buf = 136316674;
            __int16 v26 = 1024;
            if (v23 >= 0) {
              __int16 v15 = __p;
            }
            int v27 = 270;
            __int16 v28 = 2048;
            int v29 = this;
            __int16 v30 = 2048;
            unint64_t v31 = a3;
            __int16 v32 = 2080;
            uint64_t v33 = v14;
            __int16 v34 = 1024;
            int v35 = v10;
            __int16 v36 = 2080;
            int v37 = v15;
            int v16 = "%25s:%-5d impl@%p: Error setting client token %p input muted %s on session 0x%x%s";
            __int16 v17 = v12;
            os_log_type_t v18 = OS_LOG_TYPE_ERROR;
LABEL_24:
            _os_log_impl(&dword_221E5E000, v17, v18, v16, buf, 0x40u);
            if (v23 < 0) {
              operator delete(__p[0]);
            }
            goto LABEL_26;
          }
          goto LABEL_26;
        }
      }
      long long v12 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance((Phase::Logger *)v11)
                                                                                          + 960)));
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        if (a5) {
          __int16 v19 = ", from callback";
        }
        else {
          __int16 v19 = "";
        }
        std::string::basic_string[abi:ne180100]<0>(__p, v19);
        int32x2_t v25 = "SessionManager.mm";
        int v20 = "False";
        if (v8) {
          int v20 = "True";
        }
        uint64_t v21 = (void **)__p[0];
        *(_DWORD *)buf = 136316674;
        __int16 v26 = 1024;
        if (v23 >= 0) {
          uint64_t v21 = __p;
        }
        int v27 = 264;
        __int16 v28 = 2048;
        int v29 = this;
        __int16 v30 = 2048;
        unint64_t v31 = a3;
        __int16 v32 = 2080;
        uint64_t v33 = v20;
        __int16 v34 = 1024;
        int v35 = v10;
        __int16 v36 = 2080;
        int v37 = v21;
        int v16 = "%25s:%-5d impl@%p: Set client token %p input muted %s on session 0x%x%s";
        __int16 v17 = v12;
        os_log_type_t v18 = OS_LOG_TYPE_DEFAULT;
        goto LABEL_24;
      }
LABEL_26:
    }
  }
}

void sub_222064B38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unint64_t Phase::Controller::SessionManager::GetAudioSessionVolume(Phase::Controller::SessionManager *this, uint64_t a2, int a3)
{
  uint64_t v3 = 0;
  uint64_t v29 = *MEMORY[0x263EF8340];
  unsigned int v4 = 0;
  if (a2 && *((void *)this + 1))
  {
    int v7 = a2;
    int v8 = [[PHASEVolumeCommandForSession alloc] initWithSessionToken:a2];
    id v9 = (void *)*((void *)this + 1);
    if (a3) {
      [v9 volumeForCommandFromCallback:v8];
    }
    else {
    int v10 = [v9 volumeForCommand:v8];
    }
    uint64_t v11 = v10;
    if (v10)
    {
      [v10 value];
      unsigned int v4 = v12;
      uint64_t v3 = [v11 muted];
    }
    else
    {
      int v13 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(0)
                                                                                          + 960)));
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        if (a3) {
          uint64_t v14 = ", from callback";
        }
        else {
          uint64_t v14 = "";
        }
        std::string::basic_string[abi:ne180100]<0>(__p, v14);
        if (v18 >= 0) {
          __int16 v15 = __p;
        }
        else {
          __int16 v15 = (void **)__p[0];
        }
        *(_DWORD *)buf = 136316162;
        int v20 = "SessionManager.mm";
        __int16 v21 = 1024;
        int v22 = 305;
        __int16 v23 = 2048;
        unsigned int v24 = this;
        __int16 v25 = 1024;
        int v26 = v7;
        __int16 v27 = 2080;
        __int16 v28 = v15;
        _os_log_impl(&dword_221E5E000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d impl@%p: could not get volume for session 0x%x%s", buf, 0x2Cu);
        if (v18 < 0) {
          operator delete(__p[0]);
        }
      }

      uint64_t v3 = 0;
    }
  }
  return v4 | (unint64_t)(v3 << 32);
}

void sub_222064D4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unint64_t Phase::Controller::SessionManager::GetAudioSessionVolumeIfInVolumeCategoryAndMode(Phase::Controller::SessionManager *this, uint64_t a2, NSString *a3, NSString *a4, int a5)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  id v9 = a3;
  int v10 = a4;
  uint64_t v11 = 0;
  unsigned int v12 = 0;
  if (a2 && *((void *)this + 1))
  {
    int v13 = [[PHASEVolumeCommandForVolumeCategoryModeAndSession alloc] initWithCategory:v9 mode:v10 sessionToken:a2];
    uint64_t v14 = (void *)*((void *)this + 1);
    if (a5) {
      [v14 volumeForCommandFromCallback:v13];
    }
    else {
    __int16 v15 = [v14 volumeForCommand:v13];
    }
    int v16 = v15;
    if (v15)
    {
      [v15 value];
      unsigned int v12 = v17;
      uint64_t v11 = [v16 muted];
    }
    else
    {
      char v18 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(0)
                                                                                          + 960)));
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v19 = [(NSString *)v9 UTF8String];
        uint64_t v20 = [(NSString *)v10 UTF8String];
        if (a5) {
          __int16 v21 = ", from callback";
        }
        else {
          __int16 v21 = "";
        }
        std::string::basic_string[abi:ne180100]<0>(__p, v21);
        if (v25 >= 0) {
          int v22 = __p;
        }
        else {
          int v22 = (void **)__p[0];
        }
        *(_DWORD *)buf = 136316674;
        __int16 v27 = "SessionManager.mm";
        __int16 v28 = 1024;
        int v29 = 350;
        __int16 v30 = 2048;
        unint64_t v31 = this;
        __int16 v32 = 1024;
        int v33 = a2;
        __int16 v34 = 2080;
        uint64_t v35 = v19;
        __int16 v36 = 2080;
        uint64_t v37 = v20;
        __int16 v38 = 2080;
        int v39 = v22;
        _os_log_impl(&dword_221E5E000, v18, OS_LOG_TYPE_DEBUG, "%25s:%-5d impl@%p: could not get volume for session 0x%x in volume category/mode [%s, %s]%s", buf, 0x40u);
        if (v25 < 0) {
          operator delete(__p[0]);
        }
      }

      uint64_t v11 = 0;
    }
  }
  return v12 | (unint64_t)(v11 << 32);
}

void sub_222064FD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

Phase::Controller::HeadTracker *Phase::Controller::HeadTracker::HeadTracker(Phase::Controller::HeadTracker *this)
{
  uint64_t v2 = (Phase::Controller::HeadTrackerImpl *)operator new(0x240uLL, (std::align_val_t)0x40uLL);
  Phase::Controller::HeadTrackerImpl::HeadTrackerImpl(v2);
  *(void *)this = v2;
  return this;
}

void sub_222065058(_Unwind_Exception *a1)
{
  MEMORY[0x223C93890](v1, 64);
  _Unwind_Resume(a1);
}

void Phase::Controller::HeadTracker::~HeadTracker(CFTypeRef **this)
{
  uint64_t v1 = *this;
  if (*this)
  {
    CFRelease(*v1);
    MEMORY[0x223C93890](v1, 64);
  }
}

void Phase::Controller::HeadTrackerImpl::UpdateAndGetLatest(unint64_t *a1, uint64_t a2)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  double v34 = 0.0;
  long long v4 = *(_OWORD *)(MEMORY[0x263EF89A8] + 16);
  long long v30 = *MEMORY[0x263EF89A8];
  long long v31 = v4;
  long long v5 = *(_OWORD *)(MEMORY[0x263EF89A8] + 48);
  long long v32 = *(_OWORD *)(MEMORY[0x263EF89A8] + 32);
  long long v33 = v5;
  if (ATThreadSafeHeadTrackerPredictLatestTransform())
  {
    mach_absolute_time();
    double v6 = (double)(unint64_t)__udivti3() / 1000000000.0;
    unint64_t v7 = atomic_load(a1 + 64);
    double v8 = *(double *)&v7;
    double v9 = COERCE_DOUBLE(atomic_load(a1 + 32));
    if (v8 <= v9)
    {
      char v25 = (Phase::Logger *)caulk::concurrent::atomic_value<Phase::Affine<float>,2,6>::load((uint64_t)buf, (uint64_t)(a1 + 8));
      long long v26 = *(_OWORD *)&buf[16];
      *(_OWORD *)a2 = *(_OWORD *)buf;
      *(_OWORD *)(a2 + 16) = v26;
      unsigned int v12 = **(id **)(Phase::Logger::GetInstance(v25) + 1024);
      if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
        return;
      }
      double v27 = COERCE_DOUBLE(atomic_load(a1 + 32));
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "SharedEntityHeadTracker.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 86;
      *(_WORD *)&unsigned char buf[18] = 2048;
      *(double *)&buf[20] = v6 - v27;
      uint64_t v14 = "%25s:%-5d Failed to get prediction from headtracker, using latest tracker result that is %0.4f sec old";
    }
    else
    {
      int v10 = (Phase::Logger *)caulk::concurrent::atomic_value<Phase::Affine<float>,2,6>::load((uint64_t)buf, (uint64_t)(a1 + 40));
      long long v11 = *(_OWORD *)&buf[16];
      *(_OWORD *)a2 = *(_OWORD *)buf;
      *(_OWORD *)(a2 + 16) = v11;
      unsigned int v12 = **(id **)(Phase::Logger::GetInstance(v10) + 1024);
      if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
        return;
      }
      double v13 = COERCE_DOUBLE(atomic_load(a1 + 64));
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "SharedEntityHeadTracker.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 79;
      *(_WORD *)&unsigned char buf[18] = 2048;
      *(double *)&buf[20] = v6 - v13;
      uint64_t v14 = "%25s:%-5d Failed to get prediction from headtracker, using fallback transform that is %0.4f sec old";
    }
    int v22 = v12;
    os_log_type_t v23 = OS_LOG_TYPE_ERROR;
    uint32_t v24 = 28;
    goto LABEL_15;
  }
  double v15 = COERCE_DOUBLE(atomic_load(a1 + 32));
  unint64_t v16 = *(void *)&v34;
  if (v34 <= v15)
  {
LABEL_9:
    caulk::concurrent::atomic_value<Phase::Affine<float>,2,6>::load((uint64_t)buf, (uint64_t)(a1 + 8));
    long long v18 = *(_OWORD *)&buf[16];
    *(_OWORD *)a2 = *(_OWORD *)buf;
    *(_OWORD *)(a2 + 16) = v18;
    *(void *)&v29[0] = 0;
    ShouldFire = (Phase::Logger *)Phase::Throttle::ShouldFire((Phase::Throttle *)(a1 + 1), (double *)v29);
    if ((int)ShouldFire >= 1)
    {
      int v20 = (int)ShouldFire;
      __int16 v21 = **(id **)(Phase::Logger::GetInstance(ShouldFire) + 1024);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315906;
        *(void *)&uint8_t buf[4] = "SharedEntityHeadTracker.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 130;
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&buf[20] = v20;
        *(_WORD *)&buf[24] = 2048;
        *(void *)&buf[26] = 0x4000000000000000;
        uint64_t v14 = "%25s:%-5d Did not get updated prediction from headtracker for %d times in the last %.2f seconds - used cached values.";
        int v22 = v21;
        os_log_type_t v23 = OS_LOG_TYPE_DEFAULT;
        uint32_t v24 = 34;
LABEL_15:
        _os_log_impl(&dword_221E5E000, v22, v23, v14, buf, v24);
      }
    }
  }
  else
  {
    double v17 = v15;
    while (1)
    {
      atomic_compare_exchange_strong((atomic_ullong *volatile)a1 + 32, (unint64_t *)&v17, v16);
      if (*(void *)&v17 == *(void *)&v15) {
        break;
      }
      unint64_t v16 = *(void *)&v34;
      double v15 = v17;
      if (v34 <= v17) {
        goto LABEL_9;
      }
    }
    *(_OWORD *)buf = v30;
    *(_OWORD *)&buf[16] = v31;
    *(_OWORD *)&uint8_t buf[32] = v32;
    long long v36 = v33;
    Phase::AffineFrom<float>((float *)buf, (uint64_t)v29);
    long long v28 = v29[1];
    *(_OWORD *)a2 = v29[0];
    *(_OWORD *)(a2 + 16) = v28;
    caulk::concurrent::atomic_value<Phase::Affine<float>,2,6>::store((uint64_t)(a1 + 8), (unsigned int *)a2);
  }
}

Phase::Controller::HeadTrackerImpl *Phase::Controller::HeadTrackerImpl::HeadTrackerImpl(Phase::Controller::HeadTrackerImpl *this)
{
  Shareduint64_t Instance = ATThreadSafeHeadTrackerGetSharedInstance();
  uint64_t v3 = 0;
  *(void *)this = SharedInstance;
  *(_OWORD *)((char *)this + 8) = xmmword_2220A5010;
  *((_DWORD *)this + 6) = 0;
  *((_OWORD *)this + 2) = xmmword_2220A5010;
  *((_DWORD *)this + 12) = 0;
  *((unsigned char *)this + 64) = 0;
  *((_DWORD *)this + 17) = 0;
  do
  {
    long long v4 = (char *)this + v3;
    *((void *)v4 + 16) = 0;
    *((void *)v4 + 17) = 0;
    *((void *)v4 + 18) = 1065353216;
    *((void *)v4 + 19) = 0;
    v3 += 64;
    *((_DWORD *)v4 + 40) = 1065353216;
  }
  while (v3 != 128);
  uint64_t v5 = 0;
  *((void *)this + 32) = 0;
  *((unsigned char *)this + 320) = 0;
  *((_DWORD *)this + 81) = 0;
  do
  {
    double v6 = (char *)this + v5;
    *((void *)v6 + 48) = 0;
    *((void *)v6 + 49) = 0;
    *((void *)v6 + 50) = 1065353216;
    *((void *)v6 + 51) = 0;
    v5 += 64;
    *((_DWORD *)v6 + 104) = 1065353216;
  }
  while (v5 != 128);
  v8[0] = xmmword_2220A4E00;
  v8[1] = xmmword_2220A4E00;
  caulk::concurrent::atomic_value<Phase::Affine<float>,2,6>::store((uint64_t)this + 64, (unsigned int *)v8);
  CFRetain(*(CFTypeRef *)this);
  return this;
}

uint64_t caulk::concurrent::atomic_value<Phase::Affine<float>,2,6>::store(uint64_t result, unsigned int *a2)
{
  uint64_t v3 = result;
  int v8 = 0;
  uint64_t v4 = result + 64;
  while (1)
  {
    unsigned int add = atomic_fetch_add((atomic_uint *volatile)(v3 + 4), 1u);
    double v6 = (unsigned int *)(v4 + ((unint64_t)(add & 1) << 6));
    int v7 = 2 * add;
    atomic_store(2 * add, v6);
    v6[1] = *a2;
    void v6[2] = a2[1];
    v6[3] = a2[2];
    void v6[4] = a2[3];
    v6[5] = a2[4];
    v6[6] = a2[5];
    v6[7] = a2[6];
    v6[8] = a2[7];
    __dmb(0xBu);
    atomic_compare_exchange_strong((atomic_uint *volatile)v6, (unsigned int *)&v7, (2 * add) | 1);
    if (v7 == 2 * add) {
      break;
    }
    BOOL result = caulk::concurrent::details::spinloop::spin((uint64_t)&v8);
  }
  atomic_store(1u, (unsigned __int8 *)v3);
  return result;
}

uint64_t caulk::concurrent::atomic_value<Phase::Affine<float>,2,6>::load(uint64_t result, uint64_t a2)
{
  uint64_t v2 = (_OWORD *)result;
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)a2);
  if (v3)
  {
    int v14 = 0;
    unsigned __int8 v5 = atomic_load((unsigned __int8 *)a2);
    if (v5)
    {
      uint64_t v6 = a2 + 64;
      do
      {
        unsigned int v7 = atomic_load_explicit((atomic_uint *volatile)(a2 + 4), memory_order_acquire) - 1;
        char v8 = 1;
        while (1)
        {
          char v9 = v8;
          uint64_t v10 = v6 + ((unint64_t)(v7 & 1) << 6);
          unsigned int explicit = atomic_load_explicit((atomic_uint *volatile)v10, memory_order_acquire);
          if (explicit) {
            break;
          }
          char v8 = 0;
          LOBYTE(v7) = v7 - 1;
          if ((v9 & 1) == 0) {
            goto LABEL_12;
          }
        }
        long long v12 = *(_OWORD *)(v10 + 20);
        *uint64_t v2 = *(_OWORD *)(v10 + 4);
        v2[1] = v12;
        __dmb(9u);
        if (explicit == *(_DWORD *)v10) {
          return result;
        }
        BOOL result = caulk::concurrent::details::spinloop::spin((uint64_t)&v14);
LABEL_12:
        unsigned __int8 v13 = atomic_load((unsigned __int8 *)a2);
      }
      while ((v13 & 1) != 0);
    }
    _os_assert_log();
    BOOL result = _os_crash();
    __break(1u);
  }
  else
  {
    *(_OWORD *)BOOL result = xmmword_2220A4E00;
    *(_DWORD *)(result + 16) = 0;
    *(void *)(result + 20) = 0;
    *(_DWORD *)(result + 28) = 1065353216;
  }
  return result;
}

Phase::Controller::SharedEntityManager *Phase::Controller::SharedEntityManager::SharedEntityManager(Phase::Controller::SharedEntityManager *this, const Phase::Controller::TaskManager *a2)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_DWORD *)this + 18) = 1065353216;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((void *)this + 14) = 0;
  *((_DWORD *)this + 30) = 1065353216;
  *((void *)this + 16) = Phase::Controller::TaskManager::GetService<Phase::Geometry::System>(a2, 2);
  *((void *)this + 17) = 0;
  *((void *)this + 19) = 0;
  *((void *)this + 20) = 0;
  *((void *)this + 18) = 1819626849;
  unsigned __int8 v3 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v4 = dispatch_queue_create("SharedEntityManager", v3);
  unsigned __int8 v5 = (void *)*((void *)this + 17);
  *((void *)this + 17) = v4;

  return this;
}

void sub_222065714(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(v1 + 88);
  std::__hash_table<std::__hash_value_type<Phase::Controller::IR::IRBuilder::Processor,std::unordered_map<Phase::Controller::IR::IRBuilder::Method,Phase::Controller::IR::IRBuilderBase *>>,std::__unordered_map_hasher<Phase::Controller::IR::IRBuilder::Processor,std::__hash_value_type<Phase::Controller::IR::IRBuilder::Processor,std::unordered_map<Phase::Controller::IR::IRBuilder::Method,Phase::Controller::IR::IRBuilderBase *>>,std::hash<Phase::Controller::IR::IRBuilder::Processor>,std::equal_to<Phase::Controller::IR::IRBuilder::Processor>,true>,std::__unordered_map_equal<Phase::Controller::IR::IRBuilder::Processor,std::__hash_value_type<Phase::Controller::IR::IRBuilder::Processor,std::unordered_map<Phase::Controller::IR::IRBuilder::Method,Phase::Controller::IR::IRBuilderBase *>>,std::equal_to<Phase::Controller::IR::IRBuilder::Processor>,std::hash<Phase::Controller::IR::IRBuilder::Processor>,true>,std::allocator<std::__hash_value_type<Phase::Controller::IR::IRBuilder::Processor,std::unordered_map<Phase::Controller::IR::IRBuilder::Method,Phase::Controller::IR::IRBuilderBase *>>>>::~__hash_table(v2);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

id applesauce::dispatch::v1::queue::operator*(id *a1)
{
  return *a1;
}

uint64_t Phase::Controller::SharedEntityManager::Update(Phase::Controller::SharedEntityManager *this, float a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  unsigned __int8 v3 = (Phase::Logger *)atomic_load((unint64_t *)this + 10);
  long long v15 = xmmword_2220A4E00;
  LODWORD(v16) = 0;
  *(void *)((char *)&v16 + 4) = 0;
  HIDWORD(v16) = 1065353216;
  uint64_t v4 = *((void *)this + 18);
  if (v4 == 1819623797)
  {
    char v8 = (dispatch_once_t *)((char *)this + 160);
    uint64_t v9 = *((void *)this + 20);
    *(void *)buf = MEMORY[0x263EF8330];
    *(void *)&_OWORD buf[8] = 3221225472;
    *(void *)&buf[16] = ___ZN5Phase10Controller19SharedEntityManager22GetOrCreateHeadTrackerEv_block_invoke;
    long long v18 = &__block_descriptor_40_e5_v8__0l;
    uint64_t v19 = this;
    if (v9 != -1) {
      dispatch_once(v8, buf);
    }
    uint64_t v10 = (unint64_t **)*((void *)this + 19);
    if (!v10)
    {
      unsigned __int8 v13 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)v8) + 1024);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "SharedEntityManager.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 390;
        _os_log_impl(&dword_221E5E000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [tracker == nullptr is true]: \"tracker is unexpectedly null\"", buf, 0x12u);
      }
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "tracker is unexpectedly null");
    }
    Phase::Controller::HeadTrackerImpl::UpdateAndGetLatest(*v10, (uint64_t)&v15);
    Phase::Geometry::SystemScheduler::UpdateTransform(*((void *)this + 16) + 2352, (uint64_t)v3, &v15);
  }
  else if (v4 == 1819626849)
  {
    *(void *)buf = *((void *)this + 16) + 1240;
    UniqueES4_EUlRT_E_EEPNS_18SharedSlotMapStateIS3_S4_E4SlotES4_OSA = (uint64_t *)_ZN5Phase7details13SharedSlotMapINS_8Geometry6EntityENS_8Handle64EE13GetSlotToEditIRZNS_13SharedSlotMapIS3_S4_NS2_13EntityFactoryEE9GetUniqueES4_EUlRT_E_EEPNS_18SharedSlotMapStateIS3_S4_E4SlotES4_OSA_(*(uint64_t *)buf, (uint64_t)v3, (uint64_t)buf);
    if (UniqueES4_EUlRT_E_EEPNS_18SharedSlotMapStateIS3_S4_E4SlotES4_OSA)
    {
      uint64_t v6 = *UniqueES4_EUlRT_E_EEPNS_18SharedSlotMapStateIS3_S4_E4SlotES4_OSA;
      if (*UniqueES4_EUlRT_E_EEPNS_18SharedSlotMapStateIS3_S4_E4SlotES4_OSA)
      {
        long long v7 = *(_OWORD *)(v6 + 64);
        long long v15 = *(_OWORD *)(v6 + 48);
        long long v16 = v7;
      }
    }
  }
  else
  {
    long long v11 = **(id **)(Phase::Logger::GetInstance(this) + 1024);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "SharedEntityManager.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 402;
      _os_log_impl(&dword_221E5E000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d Invalid listener update mode!", buf, 0x12u);
    }
  }
  return Phase::Trace::PostSharedListenerTransformUpdate(v3, (float *)&v15);
}

void sub_2220659BC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void ___ZN5Phase10Controller19SharedEntityManager22GetOrCreateHeadTrackerEv_block_invoke()
{
}

void sub_222065A30(_Unwind_Exception *a1)
{
  MEMORY[0x223C938A0](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

void ___ZN5Phase37CurrentProcessCanModifySharedEntitiesEv_block_invoke()
{
  v0 = SecTaskCreateFromSelf(0);
  if (v0)
  {
    uint64_t v1 = v0;
    CFBooleanRef v2 = (const __CFBoolean *)SecTaskCopyValueForEntitlement(v0, @"com.apple.coreaudio.control-shared-entities", 0);
    if (v2)
    {
      CFBooleanRef v3 = v2;
      CFTypeID v4 = CFGetTypeID(v2);
      BOOL v5 = v4 == CFBooleanGetTypeID() && CFBooleanGetValue(v3) != 0;
      Phase::CurrentProcessCanModifySharedEntities(void)::currentProcessCanModifySharedEntities = v5;
      CFRelease(v3);
    }
    CFRelease(v1);
  }
}

void ___ZN5Phase33CurrentProcessCanSelectEngineModeEv_block_invoke()
{
  v0 = SecTaskCreateFromSelf(0);
  if (v0)
  {
    uint64_t v1 = v0;
    CFBooleanRef v2 = (const __CFBoolean *)SecTaskCopyValueForEntitlement(v0, @"com.apple.coreaudio.allow-engine-mode-selection", 0);
    if (v2)
    {
      CFBooleanRef v3 = v2;
      CFTypeID v4 = CFGetTypeID(v2);
      BOOL v5 = v4 == CFBooleanGetTypeID() && CFBooleanGetValue(v3) != 0;
      Phase::CurrentProcessCanSelectEngineMode(void)::currentProcessCanSelectEngineMode = v5;
      CFRelease(v3);
    }
    CFRelease(v1);
  }
}

BOOL Phase::GetListenerUpdateModeFromEnum(Phase::Logger *a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (a1 == (Phase::Logger *)1819626849) {
    return 0;
  }
  if (a1 == (Phase::Logger *)1819623797) {
    return 1;
  }
  CFBooleanRef v2 = **(id **)(Phase::Logger::GetInstance(a1) + 1024);
  BOOL result = os_log_type_enabled(v2, OS_LOG_TYPE_ERROR);
  if (result)
  {
    int v3 = 136315394;
    CFTypeID v4 = "SharedEntityUtils.mm";
    __int16 v5 = 1024;
    int v6 = 141;
    _os_log_impl(&dword_221E5E000, v2, OS_LOG_TYPE_ERROR, "%25s:%-5d Unrecognized listener update mode, setting to Manual", (uint8_t *)&v3, 0x12u);
    return 0;
  }
  return result;
}

Phase::DspLayer::SimpleConvolver *Phase::DspLayer::SimpleConvolver::SimpleConvolver(Phase::DspLayer::SimpleConvolver *this, int a2, int a3)
{
  *(void *)this = &unk_26D47A740;
  *((_DWORD *)this + 2) = a2;
  *((_DWORD *)this + objc_destroyWeak(this + 3) = a3;
  *((void *)this + 2) = malloc_type_malloc(8 * a2 * a3, 0x100004052888210uLL);
  *((_DWORD *)this + 12) = 0;
  *((void *)this + 7) = Phase::DspLayer::IConvolver::GetFftFwd(this, 2 * *((_DWORD *)this + 2));
  *((void *)this + 8) = Phase::DspLayer::IConvolver::GetFftInv(this, 2 * *((_DWORD *)this + 2));
  *((void *)this + 4) = malloc_type_malloc(4 * *((int *)this + 2), 0x100004052888210uLL);
  *((_DWORD *)this + 10) = a2;
  *((_DWORD *)this + 11) = a2;
  (*(void (**)(Phase::DspLayer::SimpleConvolver *))(*(void *)this + 32))(this);
  return this;
}

void Phase::DspLayer::SimpleConvolver::~SimpleConvolver(void **this)
{
  *this = &unk_26D47A740;
  free(this[2]);
  free(this[4]);
}

{
  uint64_t vars8;

  *this = &unk_26D47A740;
  free(this[2]);
  free(this[4]);

  JUMPOUT(0x223C938A0);
}

uint64_t Phase::DspLayer::SimpleConvolver::SetFilter(Phase::DspLayer::SimpleConvolver *this, int a2, const DSPComplex *a3, int a4)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (a2 < 0 || *((_DWORD *)this + 3) <= a2) {
    return 2;
  }
  if (a4 < 1 || (*(int (**)(Phase::DspLayer::SimpleConvolver *))(*(void *)this + 48))(this) < a4) {
    return 1;
  }
  uint64_t v9 = *((int *)this + 2);
  uint64_t v10 = (float *)(*((void *)this + 2) + 8 * a2 * (int)v9);
  vDSP_vclr(v10, 1, 2 * v9);
  vDSP_Length v12 = *((int *)this + 2);
  if (v12 == a4)
  {
    __Z.realp = v10;
    __Z.imagp = &v10[a4];
    vDSP_Length v13 = a4 >> 1;
    int v14 = a3;
  }
  else
  {
    MEMORY[0x270FA5388](v11);
    long long v16 = (DSPComplex *)((char *)&v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
    bzero(v16, v15);
    vDSP_vclr((float *)v16, 1, v12);
    memcpy(v16, a3, 4 * a4);
    uint64_t v17 = *((int *)this + 2);
    __Z.realp = v10;
    __Z.imagp = &v10[v17];
    vDSP_Length v13 = (uint64_t)(int)(v17 + ((int)v17 < 0)) >> 1;
    int v14 = v16;
  }
  vDSP_ctoz(v14, 2, &__Z, 1, v13);
  long long v18 = &v10[*((int *)this + 2)];
  vDSP_DFT_Execute(*((const vDSP_DFT_SetupStruct **)this + 7), v10, v18, v10, v18);
  return 0;
}

void Phase::DspLayer::SimpleConvolver::Process(Phase::DspLayer::SimpleConvolver *this, const DSPComplex *a2, float **a3)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  uint64_t v6 = *((int *)this + 2);
  if ((int)v6 >= 0) {
    int v7 = *((_DWORD *)this + 2);
  }
  else {
    int v7 = v6 + 1;
  }
  char v8 = (DSPComplex *)*((void *)this + 4);
  MEMORY[0x270FA5388](this);
  uint64_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v10, v9);
  __Z.realp = (float *)v10;
  __Z.imagp = (float *)&v10[4 * v6];
  vDSP_Length v11 = (uint64_t)v7 >> 1;
  vDSP_ctoz(v8, 2, &__Z, 1, v11);
  __Z.realp += v7 >> 1;
  __Z.imagp += v7 >> 1;
  vDSP_ctoz(a2, 2, &__Z, 1, v11);
  uint64_t v12 = *((int *)this + 2);
  vDSP_Length v13 = (float *)&v10[4 * v12];
  __Z.realp = (float *)v10;
  __Z.imagp = v13;
  memcpy(v8, a2, 4 * v12);
  vDSP_DFT_Execute(*((const vDSP_DFT_SetupStruct **)this + 7), (const float *)v10, v13, (float *)v10, v13);
  uint64_t v14 = *((int *)this + 2);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (float *)((char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  __C.realp = v17;
  __C.imagp = &v17[v14];
  if (*((int *)this + 3) >= 1)
  {
    bzero(v17, v16);
    uint64_t v18 = 0;
    int v19 = v14;
    do
    {
      __B.realp = (float *)(*((void *)this + 2) + 8 * v18 * v19);
      __B.imagp = &__B.realp[v19];
      float v20 = *__Z.realp * *__B.realp;
      float v21 = *__Z.imagp * *__B.imagp;
      vDSP_zvmul(&__Z, 1, &__B, 1, &__C, 1, v19, 1);
      realp = __C.realp;
      *__C.realp = v20;
      imagp = __C.imagp;
      *__C.imagp = v21;
      vDSP_DFT_Execute(*((const vDSP_DFT_SetupStruct **)this + 8), realp, imagp, realp, imagp);
      int v19 = *((_DWORD *)this + 2);
      if ((int)v11 < v19)
      {
        float v24 = 0.125 / (float)v19;
        char v25 = (float32x4_t *)(a3[v18] + 4);
        vDSP_Length v26 = v11;
        int64_t v27 = v11;
        do
        {
          int32x4_t v28 = *(int32x4_t *)&__C.realp[v26];
          int32x4_t v29 = *(int32x4_t *)&__C.imagp[v26];
          v25[-1] = vmulq_n_f32((float32x4_t)vzip1q_s32(v28, v29), v24);
          float32x4_t *v25 = vmulq_n_f32((float32x4_t)vzip2q_s32(v28, v29), v24);
          v27 += 4;
          v26 += 4;
          v25 += 2;
        }
        while (v27 < *((int *)this + 2));
        int v19 = *((_DWORD *)this + 2);
      }
      ++v18;
    }
    while (v18 < *((int *)this + 3));
  }
}

uint64_t Phase::DspLayer::SimpleConvolver::GetFilterState(Phase::DspLayer::SimpleConvolver *this)
{
  return (uint64_t)this + 24;
}

void Phase::DspLayer::SimpleConvolver::Reset(float **this)
{
  vDSP_vclr(this[2], 1, 2 * *((int *)this + 3) * (uint64_t)*((int *)this + 2));
  CFBooleanRef v2 = this[4];
  vDSP_Length v3 = *((int *)this + 2);

  vDSP_vclr(v2, 1, v3);
}

uint64_t Phase::DspLayer::SimpleConvolver::GetFilterLength(Phase::DspLayer::SimpleConvolver *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t Phase::DspLayer::SimpleConvolver::GetMaxFilterLength(Phase::DspLayer::SimpleConvolver *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t Phase::DspLayer::SimpleConvolver::GetBlockSize(Phase::DspLayer::SimpleConvolver *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t Phase::DspLayer::SimpleConvolver::GetNumOutputChannels(Phase::DspLayer::SimpleConvolver *this)
{
  return *((unsigned int *)this + 3);
}

uint64_t Phase::DspLayer::SimpleConvolver::GetNumPartitions(Phase::DspLayer::SimpleConvolver *this)
{
  return 1;
}

uint64_t Phase::DspLayer::SimpleConvolver::CopyStates(Phase::DspLayer::SimpleConvolver *this, Phase::DspLayer::IConvolver *a2)
{
  uint64_t v3 = (*(uint64_t (**)(Phase::DspLayer::IConvolver *, void))(*(void *)a2 + 80))(a2, 0);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 88))(v3);

  return Phase::DspLayer::IConvolver::FilterState::Copy((uint64_t)this + 24, v4);
}

float *Phase::SpatialModeler::SimulationController::RequireSimulation@<X0>(float *this@<X0>, const Phase::SpatialModeler::RayTracerState *a2@<X1>, Phase::SpatialModeler::RayTracerState *a3@<X2>, Phase::Geometry::SystemState *a4@<X3>, uint64_t a5@<X8>)
{
  if (*((unsigned char *)a3 + 168))
  {
    uint64_t v8 = (uint64_t)this;
    size_t v9 = (float *)((char *)a3 + 19648);
    unint64_t v10 = *((unsigned int *)a3 + 4943);
    float v11 = *((float *)a3 + 4912);
    if (v10 <= 1) {
      float v11 = 0.0;
    }
    if (v10)
    {
      do
      {
        float v12 = *v9++;
        float v13 = v12;
        if (v11 < v12) {
          float v11 = v13;
        }
        --v10;
      }
      while (v10);
    }
    this[140] = 5000.0;
    this[141] = fminf(fmaxf((float)(v11 * 18.836) / 3.1416, 7500.0), 150000.0);
    uint64_t v14 = (char *)a2 + 18928;
    unint64_t v18 = *((void *)a2 + 2822);
    uint64_t v15 = (Phase::SpatialModeler::RayTracerState *)*((unsigned int *)a2 + 83);
    float MinNumberOfActiveRaysAmongSources = Phase::SpatialModeler::RayTracerState::getMinNumberOfActiveRaysAmongSources(a3);
    Phase::SpatialModeler::RayTracerState::GetSumSharedReverbEnergy(a3, v17);
    Phase::SpatialModeler::SimulationController::RequireSimulation(v8, (uint64_t)v14, &v18, (uint64_t)a4, v15, (float *)v17, (long long *)a3 + 1315, a5, MinNumberOfActiveRaysAmongSources);
    return (float *)Phase::SpatialModeler::Telemetry::AddSceneObserverResults((_DWORD *)a3 + 5368, a5);
  }
  else
  {
    *(void *)(a5 + 66) = 0;
    *(void *)(a5 + 58) = 0;
    *(_DWORD *)(a5 + 74) = 0;
    *(unsigned char *)a5 = 1;
    *(void *)(a5 + 9) = 0;
    *(void *)(a5 + 1) = 0;
    *(_WORD *)(a5 + 17) = 0;
    *(unsigned char *)(a5 + 19) = 1;
    *(void *)(a5 + 28) = 0;
    *(void *)(a5 + 20) = 0;
    *(_WORD *)(a5 + 36) = 0;
    *(unsigned char *)(a5 + 38) = 1;
    *(void *)(a5 + 47) = 0;
    *(void *)(a5 + 39) = 0;
    *(_WORD *)(a5 + 55) = 0;
    *(unsigned char *)(a5 + 57) = 1;
  }
  return this;
}

uint64_t Phase::SpatialModeler::SimulationController::RequireSimulation@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X3>, Phase::SpatialModeler::RayTracerState *a5@<X4>, float *a6@<X5>, long long *a7@<X6>, uint64_t a8@<X8>, float a9@<S0>)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  *(_OWORD *)(a8 + 62) = 0u;
  *(_OWORD *)(a8 + 32) = 0u;
  *(_OWORD *)(a8 + 48) = 0u;
  *(_OWORD *)a8 = 0u;
  *(_OWORD *)(a8 + 16) = 0u;
  Phase::SpatialModeler::SceneObserver::DetectSceneChanges((void *)a1, a2, a3, a4, a5, a7, (uint64_t)v33);
  long long v13 = *(_OWORD *)&v33[48];
  *(_OWORD *)(a8 + 32) = *(_OWORD *)&v33[32];
  *(_OWORD *)(a8 + 48) = v13;
  *(_OWORD *)(a8 + 62) = *(_OWORD *)&v33[62];
  long long v14 = *(_OWORD *)&v33[16];
  *(_OWORD *)a8 = *(_OWORD *)v33;
  *(_OWORD *)(a8 + 16) = v14;
  if (Phase::SpatialModeler::SceneObserver::isDetectEnergyFluctuation(a1, a6))
  {
    *(void *)&v33[63] = 0;
    *(void *)&v33[57] = 0;
    *(void *)long long v33 = 0;
    *(void *)&v33[6] = 0;
    v33[14] = 1;
    memset(&v33[15], 0, 18);
    v33[33] = 1;
    memset(&v33[34], 0, 18);
    v33[52] = 1;
    *(_DWORD *)&v33[53] = 0;
    v33[71] = 1;
    *(_DWORD *)&v33[72] = 0;
    *(_WORD *)&v33[76] = 0;
    Phase::SpatialModeler::SimulationUpdate::operator|=(a8, (uint64_t)v33);
  }
  v15.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  uint64_t v16 = 0;
  do
  {
    int v17 = *(unsigned __int8 *)(a8 + v16);
    if (*(unsigned char *)(a8 + v16)) {
      BOOL v18 = 1;
    }
    else {
      BOOL v18 = v16 == 18;
    }
    ++v16;
  }
  while (!v18);
  if (v17)
  {
    *(_DWORD *)(a1 + 568) = 0;
    *(unsigned char *)(a8 + 76) = 0;
  }
  else
  {
    *(unsigned char *)(a8 + 76) = 1;
    if (*(float *)(a1 + 568) < *(float *)(a1 + 560))
    {
      *(unsigned char *)(a8 + 16) = 1;
      *(unsigned char *)(a8 + 54) = 1;
    }
    *(float *)(a1 + 568) = a9;
  }
  uint64_t v19 = 19;
  do
  {
    int v20 = *(unsigned __int8 *)(a8 + v19);
    if (*(unsigned char *)(a8 + v19)) {
      break;
    }
    BOOL v18 = v19++ == 37;
  }
  while (!v18);
  if (v20)
  {
    *(_DWORD *)(a1 + 572) = 0;
    *(unsigned char *)(a8 + 77) = 0;
  }
  else
  {
    *(unsigned char *)(a8 + 77) = 1;
    float v21 = *(float *)(a1 + 564);
    if (*(float *)(a1 + 572) < v21)
    {
      if (v21 <= a9)
      {
        *(unsigned char *)(a8 + 36) = 1;
        *(unsigned char *)(a8 + 74) = 1;
      }
      else
      {
        float v22 = (float)(v15.__d_.__rep_ - *(void *)(a1 + 552));
        *(unsigned char *)(a8 + 34) = 1;
        if ((float)(v22 / 1000000000.0) <= 15.0)
        {
          *(void *)(a8 + 65) = 0;
          *(void *)(a8 + 57) = 0;
          *(_DWORD *)(a8 + 72) = 0;
        }
        else
        {
          *(unsigned char *)(a8 + 75) = 1;
        }
      }
    }
    *(float *)(a1 + 572) = a9;
  }
  uint64_t v23 = 0;
  do
  {
    int v24 = *(unsigned __int8 *)(a8 + v23);
    if (*(unsigned char *)(a8 + v23)) {
      BOOL v25 = 1;
    }
    else {
      BOOL v25 = v23 == 18;
    }
    ++v23;
  }
  while (!v25);
  if (v24) {
    *(std::chrono::steady_clock::time_point *)(a1 + 528) = v15;
  }
  uint64_t v26 = 38;
  do
  {
    int v27 = *(unsigned __int8 *)(a8 + v26);
    if (*(unsigned char *)(a8 + v26)) {
      break;
    }
    BOOL v18 = v26++ == 56;
  }
  while (!v18);
  if (v27) {
    *(std::chrono::steady_clock::time_point *)(a1 + 544) = v15;
  }
  uint64_t v28 = 19;
  do
  {
    int v29 = *(unsigned __int8 *)(a8 + v28);
    if (*(unsigned char *)(a8 + v28)) {
      break;
    }
    BOOL v18 = v28++ == 37;
  }
  while (!v18);
  if (v29) {
    *(std::chrono::steady_clock::time_point *)(a1 + 536) = v15;
  }
  uint64_t v30 = 57;
  do
  {
    int v31 = *(unsigned __int8 *)(a8 + v30);
    if (*(unsigned char *)(a8 + v30)) {
      break;
    }
    BOOL v18 = v30++ == 75;
  }
  while (!v18);
  if (v31) {
    *(std::chrono::steady_clock::time_point *)(a1 + 552) = v15;
  }
  uint64_t result = Phase::Logger::GetInstance((Phase::Logger *)v15.__d_.__rep_);
  if (*(unsigned char *)(result + 1511)) {
    return Phase::SpatialModeler::RoomSimulationLogging::logSceneObserverUpdateCauses(a8);
  }
  return result;
}

void Phase::SpatialModeler::SimulationController::AdjustAggregationCoefficientsDynamic(float32x2_t *a1, uint64_t a2, float *a3, float a4, float a5, float a6, float a7)
{
  uint64_t v13 = 0;
  do
  {
    int v14 = *(unsigned __int8 *)(a2 + v13);
    if (*(unsigned char *)(a2 + v13)) {
      _ZF = 1;
    }
    else {
      _ZF = v13 == 18;
    }
    ++v13;
  }
  while (!_ZF);
  if (v14 && *(unsigned char *)(a2 + 76))
  {
    float v16 = fminf(fmaxf(1.0 / (float)(a1[72].f32[0] + 1.0), 0.0), 1.0);
    *a3 = 1.0 - v16;
    a3[1] = v16;
    float v17 = fminf(fmaxf(1.0 / (float)(a1[72].f32[1] + 1.0), 0.0), 1.0);
    a3[2] = 1.0 - v17;
    a3[3] = v17;
    __asm { FMOV            V1.2S, #1.0 }
    float32x2_t v22 = vadd_f32(a1[72], _D1);
  }
  else
  {
    float v23 = -1.0 / a4;
    float v24 = fminf(fmaxf(__exp10f((float)((float)(-1.0 / a4) / a3[6]) * 6.0), 0.0), 1.0);
    *a3 = v24;
    a3[1] = 1.0 - v24;
    float v25 = __exp10f((float)(v23 / a3[7]) * 6.0);
    uint64_t v26 = 0;
    float v27 = fminf(fmaxf(v25, 0.0), 1.0);
    float v28 = 1.0 - v27;
    a3[2] = v27;
    a3[3] = 1.0 - v27;
    do
    {
      int v29 = *(unsigned __int8 *)(a2 + v26);
      if (*(unsigned char *)(a2 + v26)) {
        BOOL v30 = 1;
      }
      else {
        BOOL v30 = v26 == 18;
      }
      ++v26;
    }
    while (!v30);
    if (v29) {
      goto LABEL_24;
    }
    uint64_t v31 = 0;
    uint64_t v32 = a2 + 19;
    do
    {
      int v33 = *(unsigned __int8 *)(v32 + v31);
      if (*(unsigned char *)(v32 + v31)) {
        BOOL v34 = 1;
      }
      else {
        BOOL v34 = v31 == 18;
      }
      ++v31;
    }
    while (!v34);
    if (v33)
    {
LABEL_24:
      float v35 = a6 / a7;
      if ((float)(a6 / a7) == 0.0) {
        *(void *)a3 = 0x3F80000000000000;
      }
      if (v35 > 2.0)
      {
        float v36 = (float)(1.0 / fminf(fmaxf(v35, 2.0), 100.0)) * a3[1];
        *a3 = 1.0 - v36;
        a3[1] = v36;
      }
    }
    else
    {
      float v35 = a6 / a7;
    }
    if (v35 == 0.0)
    {
      *((void *)a3 + 1) = 0x3F80000000000000;
      float v28 = 1.0;
    }
    if (v35 > 2.0)
    {
      float v28 = (float)(1.0 / fminf(fmaxf(v35, 2.0), 100.0)) * v28;
      a3[2] = 1.0 - v28;
      a3[3] = v28;
    }
    v37.f32[0] = a3[1];
    v37.f32[1] = v28;
    __asm { FMOV            V0.2S, #1.0 }
    float32x2_t v39 = vdiv_f32(_D0, v37);
    __asm { FMOV            V1.2S, #-1.0 }
    float32x2_t v41 = vadd_f32(v39, _D1);
    float32x2_t v22 = (float32x2_t)vbic_s8((int8x8_t)v41, (int8x8_t)vcltz_f32(v41));
  }
  a1[72] = v22;
  uint64_t v42 = 0;
  uint64_t v43 = a2 + 19;
  do
  {
    int v44 = *(unsigned __int8 *)(v43 + v42);
    if (*(unsigned char *)(v43 + v42)) {
      BOOL v45 = 1;
    }
    else {
      BOOL v45 = v42 == 18;
    }
    ++v42;
  }
  while (!v45);
  if (v44 && *(unsigned char *)(a2 + 77))
  {
    float v46 = fminf(fmaxf(1.0 / (float)(a1[73].f32[0] + 1.0), 0.0), 1.0);
    a3[4] = 1.0 - v46;
    a3[5] = v46;
    float v47 = a1[73].f32[0] + 1.0;
  }
  else
  {
    float v48 = __exp10f((float)((float)(-1.0 / a5) / a3[8]) * 6.0);
    uint64_t v49 = 0;
    float v50 = fminf(fmaxf(v48, 0.0), 1.0);
    float v51 = 1.0 - v50;
    a3[4] = v50;
    a3[5] = 1.0 - v50;
    do
    {
      int v52 = *(unsigned __int8 *)(a2 + v49);
      if (*(unsigned char *)(a2 + v49)) {
        BOOL v53 = 1;
      }
      else {
        BOOL v53 = v49 == 18;
      }
      ++v49;
    }
    while (!v53);
    if (v52) {
      goto LABEL_57;
    }
    uint64_t v54 = 0;
    do
    {
      int v55 = *(unsigned __int8 *)(v43 + v54);
      if (*(unsigned char *)(v43 + v54)) {
        BOOL v56 = 1;
      }
      else {
        BOOL v56 = v54 == 18;
      }
      ++v54;
    }
    while (!v56);
    if (v55)
    {
LABEL_57:
      float v57 = a6 / a7;
      if ((float)(a6 / a7) == 0.0)
      {
        *((void *)a3 + 2) = 0x3F80000000000000;
        float v51 = 1.0;
      }
      if (v57 > 2.0)
      {
        float v51 = (float)(1.0 / fminf(fmaxf(v57, 2.0), 100.0)) * v51;
        a3[4] = 1.0 - v51;
        a3[5] = v51;
      }
    }
    float v47 = (float)(1.0 / v51) + -1.0;
    if (v47 < 0.0) {
      float v47 = 0.0;
    }
  }
  a1[73].f32[0] = v47;
}

float Phase::SpatialModeler::SimulationController::AdjustAggregationCoefficientsDefault(float a1, float a2, uint64_t a3, float *a4)
{
  float v6 = -1.0 / a1;
  float v7 = fminf(fmaxf(__exp10f((float)((float)(-1.0 / a1) / a4[6]) * 6.0), 0.0), 1.0);
  *a4 = v7;
  a4[1] = 1.0 - v7;
  float v8 = fminf(fmaxf(__exp10f((float)(v6 / a4[7]) * 6.0), 0.0), 1.0);
  a4[2] = v8;
  a4[3] = 1.0 - v8;
  float result = fminf(fmaxf(__exp10f((float)((float)(-1.0 / a2) / a4[8]) * 6.0), 0.0), 1.0);
  a4[4] = result;
  a4[5] = 1.0 - result;
  return result;
}

uint64_t Phase::SpatialModeler::SimulationController::ShouldEnableListenerOutsideMitigation(Phase::SpatialModeler::SimulationController *this, const Phase::SpatialModeler::RayTracerState *a2, Phase::SpatialModeler::RayTracerState *a3, char a4)
{
  if (a4) {
    return 0;
  }
  if (Phase::SpatialModeler::GetListenerOutsideEstimate(a2, a3, a3))
  {
    ++*((_DWORD *)a3 + 5258);
    float v8 = (Phase::SpatialModeler::RayTracerState *)*((void *)a3 + 2420);
    if (v8 != (Phase::SpatialModeler::RayTracerState *)((char *)a3 + 19368))
    {
      float v9 = 0.0;
      int64x2_t v10 = vdupq_n_s64(4uLL);
      do
      {
        uint64_t v11 = *((void *)v8 + 7);
        if (v11)
        {
          float v12 = 0.0;
          if (!*(unsigned char *)(v11 + 36))
          {
            uint64_t v13 = (*(_DWORD *)(v11 + 28) * *(_DWORD *)(v11 + 24));
            if (v13)
            {
              uint64_t v14 = *(void *)(v11 + 8);
              uint64_t v15 = (v13 + 3) & 0x1FFFFFFFCLL;
              uint64x2_t v16 = (uint64x2_t)vdupq_n_s64(v13 - 1);
              float v17 = (__int32 *)(v14 + 8);
              int64x2_t v18 = (int64x2_t)xmmword_2220A5520;
              int64x2_t v19 = (int64x2_t)xmmword_2220A5510;
              float32x4_t v20 = (float32x4_t)xmmword_2220A5530;
              do
              {
                float32x4_t v21 = v20;
                int32x4_t v22 = (int32x4_t)vcgeq_u64(v16, (uint64x2_t)v18);
                *(int32x2_t *)v6.i8 = vmovn_s64((int64x2_t)v22);
                *(int16x4_t *)v20.f32 = vmovn_s32(v6);
                if (v20.i8[0]) {
                  v20.i32[0] = *(v17 - 2);
                }
                if (vmovn_s32(v6).i8[2]) {
                  v20.i32[1] = *(v17 - 1);
                }
                int32x4_t v6 = (int32x4_t)vcgeq_u64(v16, (uint64x2_t)v19);
                int32x2_t v23 = (int32x2_t)vmovn_s32(vmovn_hight_s64(v7, (int64x2_t)v6));
                if (v23.i8[4]) {
                  v20.i32[2] = *v17;
                }
                int32x2_t v7 = (int32x2_t)vmovn_s32(vmovn_hight_s64(v23, (int64x2_t)v6));
                if (v7.i8[6]) {
                  v20.i32[3] = v17[1];
                }
                float32x4_t v20 = vaddq_f32(v21, v20);
                int64x2_t v19 = vaddq_s64(v19, v10);
                int64x2_t v18 = vaddq_s64(v18, v10);
                v17 += 4;
                v15 -= 4;
              }
              while (v15);
              int8x16_t v24 = vbslq_s8((int8x16_t)vuzp1q_s32(v22, v6), (int8x16_t)v20, (int8x16_t)v21);
              float v12 = (float)(vaddv_f32(*(float32x2_t *)v24.i8) + *(float *)&v24.i32[2]) + *(float *)&v24.i32[3];
            }
          }
          float v9 = v9 + v12;
        }
        float v25 = (Phase::SpatialModeler::RayTracerState *)*((void *)v8 + 1);
        if (v25)
        {
          do
          {
            uint64_t v26 = v25;
            float v25 = *(Phase::SpatialModeler::RayTracerState **)v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            uint64_t v26 = (Phase::SpatialModeler::RayTracerState *)*((void *)v8 + 2);
            BOOL v27 = *(void *)v26 == (void)v8;
            float v8 = v26;
          }
          while (!v27);
        }
        float v8 = v26;
      }
      while (v26 != (Phase::SpatialModeler::RayTracerState *)((char *)a3 + 19368));
      if (v9 > 0.01) {
        return 1;
      }
    }
  }
  else
  {
    *((_DWORD *)a3 + 5258) = 0;
  }
  return 0;
}

BOOL Phase::Controller::SoundAssetInfo::BaseInit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, double a6)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (a3)
  {
    *(void *)(a1 + 16) = a3;
    *(void *)(a1 + 24) = a4;
    *(void *)(a1 + 8) = a2;
    *(double *)(a1 + 40) = a6;
  }
  else
  {
    float v8 = [NSString stringWithFormat:@"Invalid SoundAssetInfo Id!"];
    float v9 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v8)
                                                                                       + 816)));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      uint64_t v15 = "SoundAssetInfo.mm";
      __int16 v16 = 1024;
      int v17 = 25;
      __int16 v18 = 2048;
      uint64_t v19 = 0;
      __int16 v20 = 2080;
      uint64_t v21 = [(Phase::Logger *)v8 UTF8String];
      _os_log_impl(&dword_221E5E000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", buf, 0x26u);
    }

    if (a5)
    {
      uint64_t v12 = *MEMORY[0x263F08320];
      uint64_t v13 = v8;
      int64x2_t v10 = [NSDictionary dictionaryWithObjects:&v13 forKeys:&v12 count:1];
      *a5 = [MEMORY[0x263F087E8] errorWithDomain:@"com.apple.coreaudio.phase" code:1346920803 userInfo:v10];
    }
  }
  return a3 != 0;
}

void sub_222066EF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Phase::SpatialModeler::SpaceBlending(unint64_t *a1, float *a2, uint64_t *a3, int a4, int a5, uint64_t a6, uint64_t a7, float a8, double a9, float a10)
{
  v54[7] = *MEMORY[0x263EF8340];
  unint64_t v10 = *a1;
  BOOL v11 = a8 <= 0.04 || v10 == 0;
  uint64_t v12 = !v11;
  if (!v11)
  {
    if (a8 <= 0.96) {
      float v19 = a8;
    }
    else {
      float v19 = 1.0;
    }
    uint64_t v20 = *a3;
    double v21 = exp(a9 * 10.0 / 10.0 * 0.115129255);
    Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Query(v20, v10, a4, a7, (uint64_t)v46, v21);
    *(_OWORD *)int v33 = xmmword_2220A4E00;
    if (!Phase::IsNearlyEqual<float>(a2, (float *)v33, 0.000001)) {
      Phase::SpatialModeler::RotateMetadata<float>((uint64_t)v46, a2);
    }
    if (a4 != 1 || a10 == 1.0)
    {
      if (!a4) {
        Phase::SpatialModeler::ConvertMetadataCartesianToSpherical<float>((uint64_t)v46);
      }
    }
    else
    {
      *(_DWORD *)int v33 = sqrtf(a10);
      if (v51)
      {
        if (*(void *)v51)
        {
          uint64_t v22 = *(void *)(v51 + 8);
          if (v22) {
            vDSP_vsmul((const float *)(v51 + 16), 1, (const float *)v33, (float *)(v51 + 16), 1, v22 * *(void *)v51);
          }
        }
      }
    }
    switch(a5)
    {
      case 0:
        goto LABEL_36;
      case 1:
        Phase::SpatialModeler::MorphDirectionalMetadata(a6, (uint64_t)v46, (uint64_t)v33, 1.0 - v19, v19);
        goto LABEL_35;
      case 2:
        Phase::SpatialModeler::XfadeDirectionalMetadata(a6, (uint64_t)v46, (uint64_t)v33, 1.0 - v19, v19);
        goto LABEL_35;
      case 3:
        if (v19 < 0.04)
        {
          float v25 = 0.0;
          float v26 = -INFINITY;
          goto LABEL_34;
        }
        if (v19 < 0.3)
        {
          float v27 = v19 / 0.3;
          float v25 = (float)(v19 / 0.3) * -20.0;
          float v28 = -120.0;
          float v29 = 117.0;
LABEL_32:
          float v26 = v28 + (float)(v27 * v29);
          goto LABEL_34;
        }
        if (v19 < 0.96)
        {
          float v27 = (float)(v19 + -0.3) / 0.7;
          float v25 = (float)(v27 * -100.0) + -20.0;
          float v28 = -3.0;
          float v29 = 3.0;
          goto LABEL_32;
        }
        float v26 = 0.0;
        float v25 = -INFINITY;
LABEL_34:
        float v30 = expf((float)((float)(v25 * 10.0) / 10.0) * 0.23026);
        float v31 = expf((float)((float)(v26 * 10.0) / 10.0) * 0.23026);
        Phase::SpatialModeler::XfadeDirectionalMetadata(a6, (uint64_t)v46, (uint64_t)v33, v30, v31);
LABEL_35:
        *(_DWORD *)a6 = *(_DWORD *)v33;
        *(unsigned char *)(a6 + 4) = v33[4];
        std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(a6 + 8), (uint64_t *)&v33[8]);
        *(void *)(a6 + 48) = v36;
        std::unique_ptr<float [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(a6 + 56), &v37);
        *(void *)(a6 + 96) = v39;
        std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(a6 + 104), &v40);
        std::unique_ptr<BOOL [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(a6 + 144), &v42);
        *(void *)(a6 + 184) = v44;
        *(_OWORD *)(a6 + 192) = v45;
        std::unique_ptr<BOOL [],std::function<void ()(void *)>>::reset[abi:ne180100](&v42);
        std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v43);
        std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::reset[abi:ne180100](&v40, 0);
        std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v41);
        std::unique_ptr<float [],std::function<void ()(void *)>>::reset[abi:ne180100](&v37);
        std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v38);
        std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)&v33[8]);
        std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](&v33[16]);
LABEL_36:
        std::unique_ptr<BOOL [],std::function<void ()(void *)>>::reset[abi:ne180100](&v53);
        std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v54);
        std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::reset[abi:ne180100](&v51, 0);
        std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v52);
        std::unique_ptr<float [],std::function<void ()(void *)>>::reset[abi:ne180100](&v49);
        std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v50);
        std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::reset[abi:ne180100](&v47);
        std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v48);
        break;
      default:
        Phase::SpatialModeler::MorphDirectionalMetadata(a6, (uint64_t)v46, (uint64_t)v33, 1.0 - v19, v19);
        *(_DWORD *)a6 = *(_DWORD *)v33;
        *(unsigned char *)(a6 + 4) = v33[4];
        std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(a6 + 8), (uint64_t *)&v33[8]);
        *(void *)(a6 + 48) = v36;
        std::unique_ptr<float [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(a6 + 56), &v37);
        *(void *)(a6 + 96) = v39;
        std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(a6 + 104), &v40);
        std::unique_ptr<BOOL [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(a6 + 144), &v42);
        *(void *)(a6 + 184) = v44;
        *(_OWORD *)(a6 + 192) = v45;
        std::unique_ptr<BOOL [],std::function<void ()(void *)>>::reset[abi:ne180100](&v42);
        std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v43);
        std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::reset[abi:ne180100](&v40, 0);
        std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v41);
        std::unique_ptr<float [],std::function<void ()(void *)>>::reset[abi:ne180100](&v37);
        std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v38);
        std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)&v33[8]);
        int32x2_t v23 = (Phase::Logger *)std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](&v33[16]);
        int8x16_t v24 = **(NSObject ***)(Phase::Logger::GetInstance(v23) + 1184);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int v33 = 136315650;
          *(void *)&v33[4] = "SpaceBlending.cpp";
          *(_WORD *)&v33[12] = 1024;
          *(_DWORD *)&v33[14] = 116;
          __int16 v34 = 1024;
          int v35 = a5;
          _os_log_impl(&dword_221E5E000, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d Selected invalid space blend algorithm (%i) via defaults-write. Valid choices: 0, 1, 2, 3. Using algorithm 1 (Morphing).", v33, 0x18u);
        }
        goto LABEL_36;
    }
  }
  return v12;
}

void sub_22206747C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
}

void Phase::SpatialModeler::EstimateEarlyEnergy(int *a1, void *a2, int a3, uint64_t *a4, unint64_t a5, float a6)
{
  BOOL v11 = a1;
  v51[8] = *MEMORY[0x263EF8340];
  unint64_t v12 = a1[31];
  std::vector<float>::resize((uint64_t)a2, v12);
  if (a5)
  {
    Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Query(*a4, a5, 0, v12, (uint64_t)&v42, 0.0000000630957344);
    if (a3 == 1)
    {
      if (a2[1] != *a2)
      {
        unint64_t v22 = 0;
        do
        {
          float v23 = *(float *)&v11[v22];
          TotalEnergyIuint64_t n = Phase::SpatialModeler::GetTotalEnergyInBand<float>((uint64_t)&v42, v22);
          if (v23 <= 0.0) {
            float v25 = COERCE_FLOAT(1);
          }
          else {
            float v25 = v23;
          }
          float v26 = (float)((float)(logf(v25) * 4.3429) / 10.0) * 10.0;
          if (TotalEnergyIn <= 0.0) {
            float v27 = COERCE_FLOAT(1);
          }
          else {
            float v27 = TotalEnergyIn;
          }
          float v28 = logf(v27);
          float v29 = expf((float)((float)((float)((float)((float)((float)((float)(v28 * 4.3429) / 10.0) * 10.0) * a6)+ (float)((float)(1.0 - a6) * v26))* 10.0)/ 10.0)* 0.23026);
          float v30 = (_DWORD *)*a2;
          *(float *)(*a2 + 4 * v22++) = v29;
        }
        while (v22 < (uint64_t)(a2[1] - (void)v30) >> 2);
      }
      goto LABEL_36;
    }
    if (a3 != 3)
    {
      if (a3 == 2 && a2[1] != *a2)
      {
        unint64_t v14 = 0;
        do
        {
          float v15 = *(float *)&v11[v14];
          float v16 = Phase::SpatialModeler::GetTotalEnergyInBand<float>((uint64_t)&v42, v14);
          int v17 = (_DWORD *)*a2;
          *(float *)(*a2 + 4 * v14++) = (float)(v16 * a6) + (float)((float)(1.0 - a6) * v15);
        }
        while (v14 < (uint64_t)(a2[1] - (void)v17) >> 2);
      }
LABEL_36:
      std::unique_ptr<BOOL [],std::function<void ()(void *)>>::reset[abi:ne180100](&v50);
      std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v51);
      std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::reset[abi:ne180100](&v48, 0);
      std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v49);
      std::unique_ptr<float [],std::function<void ()(void *)>>::reset[abi:ne180100](&v46);
      std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v47);
      std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)((char *)&v43 + 4));
      std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((int *)((char *)&v45 + 2));
      return;
    }
    if (a6 < 0.04)
    {
      float v31 = 0.0;
      float v32 = -INFINITY;
      goto LABEL_33;
    }
    if (a6 >= 0.3)
    {
      if (a6 >= 0.96)
      {
        float v32 = 0.0;
        float v31 = -INFINITY;
LABEL_33:
        if (a2[1] != *a2)
        {
          float v36 = expf((float)((float)(v31 * 10.0) / 10.0) * 0.23026);
          float v37 = expf((float)((float)(v32 * 10.0) / 10.0) * 0.23026);
          unint64_t v38 = 0;
          do
          {
            float v39 = *(float *)&v11[v38];
            float v40 = Phase::SpatialModeler::GetTotalEnergyInBand<float>((uint64_t)&v42, v38);
            float32x2_t v41 = (_DWORD *)*a2;
            *(float *)(*a2 + 4 * v38++) = (float)(v37 * v40) + (float)(v39 * v36);
          }
          while (v38 < (uint64_t)(a2[1] - (void)v41) >> 2);
        }
        goto LABEL_36;
      }
      float v33 = (float)(a6 + -0.3) / 0.7;
      float v31 = (float)(v33 * -100.0) + -20.0;
      float v34 = -3.0;
      float v35 = 3.0;
    }
    else
    {
      float v33 = a6 / 0.3;
      float v31 = (float)(a6 / 0.3) * -20.0;
      float v34 = -120.0;
      float v35 = 117.0;
    }
    float v32 = v34 + (float)(v33 * v35);
    goto LABEL_33;
  }
  __int16 v18 = **(NSObject ***)(Phase::Logger::GetInstance(v13) + 1184);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
  {
    int v42 = 136315394;
    uint64_t v43 = "SpaceBlending.cpp";
    __int16 v44 = 1024;
    int v45 = 181;
    _os_log_impl(&dword_221E5E000, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d The input space blend target preset string hash ID was invalid. Returning the simulated energy (without blending).", (uint8_t *)&v42, 0x12u);
  }
  uint64_t v19 = v11[31];
  if (v19)
  {
    uint64_t v20 = (_DWORD *)*a2;
    do
    {
      int v21 = *v11++;
      *v20++ = v21;
      --v19;
    }
    while (v19);
  }
}

void sub_2220678A8(_Unwind_Exception *exception_object)
{
}

double Phase::Controller::SpatializerEncoder::AcquireFilters@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

Phase::Logger *Phase::Controller::SpatializerEncoder::GetCoordinateCount(Phase::Controller::SpatializerEncoder *this, const Phase::Controller::SpatializerFilterHandle *a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  double result = (Phase::Logger *)*(unsigned int *)(*((void *)this + 2) + 20);
  if (result != **(_DWORD **)a2)
  {
    uint64_t v3 = **(id **)(Phase::Logger::GetInstance(result) + 576);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      int v5 = 136315394;
      int32x4_t v6 = "Spatializer.mm";
      __int16 v7 = 1024;
      int v8 = 34;
      _os_log_impl(&dword_221E5E000, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: mSpatializer->mInitParameters.mCoordinateCount == inHandle->GetCoordinateCount() is false.", (uint8_t *)&v5, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "PRECONDITION: mSpatializer->mInitParameters.mCoordinateCount == inHandle->GetCoordinateCount() is false.");
  }
  return result;
}

void sub_2220679EC(_Unwind_Exception *exception_object)
{
}

uint64_t Phase::Controller::SpatializerEncoder::GetWorkBufferSizeInBytes(Phase::Controller::SpatializerEncoder *this, const Phase::Controller::SpatializerFilterHandle *a2)
{
  return 0;
}

uint64_t Phase::Controller::SpatializerEncoder::GetFilterLengthInSamples(Phase::Controller::SpatializerEncoder *this, const Phase::Controller::SpatializerFilterHandle *a2)
{
  return *(unsigned int *)(*((void *)this + 2) + 16);
}

Phase::Logger *Phase::Controller::SpatializerEncoder::VerifyCoordinateRanges(Phase::Logger *this, float a2, float a3, float a4)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (a2 < 0.0 || a2 > 180.0)
  {
    int32x4_t v6 = **(id **)(Phase::Logger::GetInstance(this) + 576);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      int v13 = 136315394;
      unint64_t v14 = "Spatializer.mm";
      __int16 v15 = 1024;
      int v16 = 56;
      _os_log_impl(&dword_221E5E000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: inInclinationInDegrees >= 0.f && inInclinationInDegrees <= 180.f is false.", (uint8_t *)&v13, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](exception, "PRECONDITION: inInclinationInDegrees >= 0.f && inInclinationInDegrees <= 180.f is false.");
  }
  if (a3 < 0.0 || a3 >= 360.0)
  {
    int v8 = **(id **)(Phase::Logger::GetInstance(this) + 576);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      int v13 = 136315394;
      unint64_t v14 = "Spatializer.mm";
      __int16 v15 = 1024;
      int v16 = 58;
      _os_log_impl(&dword_221E5E000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: inAzimuthInDegrees >= 0.f && inAzimuthInDegrees < 360.f is false.", (uint8_t *)&v13, 0x12u);
    }
    unint64_t v10 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](v10, "PRECONDITION: inAzimuthInDegrees >= 0.f && inAzimuthInDegrees < 360.f is false.");
  }
  if (a4 < 0.0)
  {
    BOOL v11 = **(id **)(Phase::Logger::GetInstance(this) + 576);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      int v13 = 136315394;
      unint64_t v14 = "Spatializer.mm";
      __int16 v15 = 1024;
      int v16 = 59;
      _os_log_impl(&dword_221E5E000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: inDistance >= 0.f is false.", (uint8_t *)&v13, 0x12u);
    }
    unint64_t v12 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](v12, "PRECONDITION: inDistance >= 0.f is false.");
  }
  return this;
}

void sub_222067C98(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::SpatializerEncoder::HaveFiltersChanged(Phase::Controller::SpatializerEncoder *this)
{
  return 0;
}

void *Phase::Controller::SpatializerFilterHandle::SpatializerFilterHandle(void *this, const Phase::Controller::SpatializerFilterHandle *a2)
{
  uint64_t v2 = *((void *)a2 + 1);
  *this = *(void *)a2;
  this[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = *((void *)a2 + 3);
  this[2] = *((void *)a2 + 2);
  this[3] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *((void *)a2 + 5);
  this[4] = *((void *)a2 + 4);
  this[5] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t Phase::Controller::Spatializer::Spatializer(uint64_t a1, long long *a2, uint64_t a3, long long *a4)
{
  *(void *)a1 = &unk_26D47A7C0;
  long long v6 = *a2;
  *(void *)(a1 + 24) = 0;
  __int16 v7 = (std::string *)(a1 + 24);
  *(_OWORD *)(a1 + 8) = v6;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>((void *)(a1 + 24), *(const void **)a3, *(void *)(a3 + 8), *(void *)(a3 + 8) - *(void *)a3);
  int v8 = v7 + 2;
  v7[1].__r_.__value_.__r.__words[0] = 0;
  v7[1].__r_.__value_.__l.__size_ = 0;
  v7[1].__r_.__value_.__r.__words[2] = 0;
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v9 = *a4;
    v7[2].__r_.__value_.__r.__words[2] = *((void *)a4 + 2);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  return a1;
}

void sub_222067DB0(_Unwind_Exception *exception_object)
{
  uint64_t v4 = v1[8];
  v1[8] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  int v5 = (std::__shared_weak_count *)v1[7];
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  long long v6 = *v2;
  if (*v2)
  {
    v1[4] = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void Phase::Controller::Spatializer::~Spatializer(void **this)
{
  *this = &unk_26D47A7C0;
  if (*((char *)this + 95) < 0) {
    operator delete(this[9]);
  }
  uint64_t v2 = this[8];
  this[8] = 0;
  if (v2) {
    (*(void (**)(void *))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)this[7];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = this[3];
  if (v4)
  {
    this[4] = v4;
    operator delete(v4);
  }
}

void Phase::Controller::Spatializer::AcquireFilters(Phase::Controller::Spatializer *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *((void *)this + 6);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t))(*(void *)v4 + 32))(v4);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v5 = *(std::__shared_weak_count **)(a2 + 24);
  *(void *)(a2 + 16) = v4;
  *(void *)(a2 + 24) = v3;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_222067F54(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Controller::Spatializer::Update(Phase::Controller::Spatializer *this, __n128 a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 6);
  if (!v2)
  {
    int v5 = **(id **)(Phase::Logger::GetInstance(0) + 576);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315394;
      int v8 = "Spatializer.mm";
      __int16 v9 = 1024;
      int v10 = 200;
      _os_log_impl(&dword_221E5E000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: mEncoder.get() != nullptr is false.", (uint8_t *)&v7, 0x12u);
    }
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "PRECONDITION: mEncoder.get() != nullptr is false.");
  }
  uint64_t v3 = *(uint64_t (**)(__n128))(*(void *)v2 + 96);

  return v3(a2);
}

void sub_22206809C(_Unwind_Exception *exception_object)
{
}

uint64_t Phase::Controller::Spatializer::SetDeviceOrientation()
{
  return 0;
}

uint64_t Phase::Controller::Spatializer::OutputChannelLayoutChanged()
{
  return 0;
}

void *std::allocate_shared[abi:ne180100]<Phase::Controller::SpatializerFilterDatabase,std::allocator<Phase::Controller::SpatializerFilterDatabase>,Phase::Controller::Spatializer const*&,Phase::Controller::SpatializerEncoder const*&,unsigned int &,void>@<X0>(const Phase::Controller::Spatializer **a1@<X1>, const Phase::Controller::SpatializerEncoder **a2@<X2>, int *a3@<X3>, void *a4@<X8>)
{
  int v8 = operator new(0x58uLL);
  double result = std::__shared_ptr_emplace<Phase::Controller::SpatializerFilterDatabase>::__shared_ptr_emplace[abi:ne180100]<Phase::Controller::Spatializer const*&,Phase::Controller::SpatializerEncoder const*&,unsigned int &,std::allocator<Phase::Controller::SpatializerFilterDatabase>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_222068128(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<Phase::Controller::SpatializerFilterDatabase>::__shared_ptr_emplace[abi:ne180100]<Phase::Controller::Spatializer const*&,Phase::Controller::SpatializerEncoder const*&,unsigned int &,std::allocator<Phase::Controller::SpatializerFilterDatabase>,0>(void *a1, const Phase::Controller::Spatializer **a2, const Phase::Controller::SpatializerEncoder **a3, int *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D47A7F8;
  Phase::Controller::SpatializerFilterDatabase::SpatializerFilterDatabase((Phase::Controller::SpatializerFilterDatabase *)(a1 + 3), *a2, *a3, *a4);
  return a1;
}

void sub_222068190(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Phase::Controller::SpatializerFilterDatabase>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D47A7F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Phase::Controller::SpatializerFilterDatabase>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D47A7F8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C938A0);
}

void std::__shared_ptr_emplace<Phase::Controller::SpatializerFilterDatabase>::__on_zero_shared(void *a1)
{
  uint64_t v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[5];
  if (v3)
  {
    a1[6] = v3;
    operator delete(v3);
  }
}

Phase::Controller::SpatializerFilterDatabase *Phase::Controller::SpatializerFilterDatabase::SpatializerFilterDatabase(Phase::Controller::SpatializerFilterDatabase *this, const Phase::Controller::Spatializer *a2, const Phase::Controller::SpatializerEncoder *a3, int a4)
{
  int v5 = a3;
  int v7 = this;
  uint64_t v209 = *MEMORY[0x263EF8340];
  *((_OWORD *)this + 1) = 0u;
  int v8 = (void **)((char *)this + 16);
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + objc_destroyWeak(this + 3) = 0u;
  *(_OWORD *)this = 0u;
  if (!a3)
  {
    int v5 = (const Phase::Controller::SpatializerEncoder *)*((void *)a2 + 6);
    __int16 v9 = (std::__shared_weak_count *)*((void *)a2 + 7);
    if (v9)
    {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
  }
  *(_DWORD *)int v7 = *((_DWORD *)a2 + 5);
  long long v160 = v5;
  int v10 = (Phase::Logger *)(*(uint64_t (**)(const Phase::Controller::SpatializerEncoder *))(*(void *)v5 + 48))(v5);
  *((_DWORD *)v7 + 1) = v10;
  *((_DWORD *)v7 + 2) = a4;
  long long v162 = v7;
  long long v158 = v8;
  if (*(int *)v7 <= 0)
  {
    long long v153 = **(id **)(Phase::Logger::GetInstance(v10) + 576);
    if (os_log_type_enabled(v153, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v195[0].__locale_) = 136315394;
      *(std::locale::__imp **)((char *)&v195[0].__locale_ + 4) = (std::locale::__imp *)"SpatializerFilterDatabase.mm";
      WORD2(v195[1].__locale_) = 1024;
      *(_DWORD *)((char *)&v195[1].__locale_ + 6) = 36;
      _os_log_impl(&dword_221E5E000, v153, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: mCoordinateCount > 0 is false.", (uint8_t *)v195, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "PRECONDITION: mCoordinateCount > 0 is false.");
LABEL_158:
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
  }
  if (a4 <= 0)
  {
    long long v155 = **(id **)(Phase::Logger::GetInstance(v10) + 576);
    if (os_log_type_enabled(v155, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v195[0].__locale_) = 136315394;
      *(std::locale::__imp **)((char *)&v195[0].__locale_ + 4) = (std::locale::__imp *)"SpatializerFilterDatabase.mm";
      WORD2(v195[1].__locale_) = 1024;
      *(_DWORD *)((char *)&v195[1].__locale_ + 6) = 37;
      _os_log_impl(&dword_221E5E000, v155, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: inFilterLengthInSamples > 0 is false.", (uint8_t *)v195, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "PRECONDITION: inFilterLengthInSamples > 0 is false.");
    goto LABEL_158;
  }
  if ((int)v10 <= 0)
  {
    long long v156 = **(id **)(Phase::Logger::GetInstance(v10) + 576);
    if (os_log_type_enabled(v156, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v195[0].__locale_) = 136315394;
      *(std::locale::__imp **)((char *)&v195[0].__locale_ + 4) = (std::locale::__imp *)"SpatializerFilterDatabase.mm";
      WORD2(v195[1].__locale_) = 1024;
      *(_DWORD *)((char *)&v195[1].__locale_ + 6) = 38;
      _os_log_impl(&dword_221E5E000, v156, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: mFilterChannelCount > 0 is false.", (uint8_t *)v195, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "PRECONDITION: mFilterChannelCount > 0 is false.");
    goto LABEL_158;
  }
  std::vector<float>::resize((uint64_t)v7 + 40, (int)v10 * a4 * *(_DWORD *)v7);
  long long v181 = 0;
  long long v182 = 0;
  uint64_t v183 = 0;
  uint64_t v11 = (Phase::Logger *)Phase::EQSphere::eq_point_set_polar(2u, *(_DWORD *)v7, (uint64_t *)&v181);
  if (v11)
  {
    long long v157 = **(id **)(Phase::Logger::GetInstance(v11) + 576);
    if (os_log_type_enabled(v157, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v195[0].__locale_) = 136315394;
      *(std::locale::__imp **)((char *)&v195[0].__locale_ + 4) = (std::locale::__imp *)"SpatializerFilterDatabase.mm";
      WORD2(v195[1].__locale_) = 1024;
      *(_DWORD *)((char *)&v195[1].__locale_ + 6) = 47;
      _os_log_impl(&dword_221E5E000, v157, OS_LOG_TYPE_ERROR, "%25s:%-5d POSTCONDITION: result == EXIT_SUCCESS is false.", (uint8_t *)v195, 0x12u);
    }
    long long v152 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v152, "POSTCONDITION: result == EXIT_SUCCESS is false.");
LABEL_162:
  }
  if (v182 == v181
    || v182 - v181 != 48
    || (unint64_t v12 = (uint64_t)(*((void *)v181 + 1) - *(void *)v181) >> 2, v12 != *(_DWORD *)v7)
    || v12 != (uint64_t)(*((void *)v181 + 4) - *((void *)v181 + 3)) >> 2)
  {
    long long v151 = **(id **)(Phase::Logger::GetInstance(v11) + 576);
    if (os_log_type_enabled(v151, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v195[0].__locale_) = 136315394;
      *(std::locale::__imp **)((char *)&v195[0].__locale_ + 4) = (std::locale::__imp *)"SpatializerFilterDatabase.mm";
      WORD2(v195[1].__locale_) = 1024;
      *(_DWORD *)((char *)&v195[1].__locale_ + 6) = 50;
      _os_log_impl(&dword_221E5E000, v151, OS_LOG_TYPE_ERROR, "%25s:%-5d POSTCONDITION: !angles.empty() && angles.size() == dimensionCount && angles[0].size() == mCoordinateCount && angles[1].size() == mCoordinateCount is false.", (uint8_t *)v195, 0x12u);
    }
    long long v152 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v152, "POSTCONDITION: !angles.empty() && angles.size() == dimensionCount && angles[0].size() == mCoordinateCount && angles[1].size() == mCoordinateCount is false.");
    goto LABEL_162;
  }
  unsigned int v161 = a4;
  std::vector<Phase::Vector<float,3ul>>::vector(&v179, v12);
  if (*((void *)v181 + 1) != *(void *)v181)
  {
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    do
    {
      *(_DWORD *)((char *)v179 + v1objc_destroyWeak(this + 3) = 1065353216;
      *(float *)((char *)v179 + v13 + 4) = *(float *)(*((void *)v181 + 3) + 4 * v14) * 57.296;
      float v15 = *(float *)(*(void *)v181 + 4 * v14) * 57.296;
      float v16 = (float)(v15 - (float)(floorf(v15 / 360.0) * 360.0)) + 0.0;
      if (v16 >= 360.0) {
        float v16 = nextafterf(360.0, 0.0);
      }
      *(float *)((char *)v179 + v13 + 8) = v16;
      ++v14;
      v13 += 12;
    }
    while (v14 < (uint64_t)(*((void *)v181 + 1) - *(void *)v181) >> 2);
  }
  unint64_t v17 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v180 - (unsigned char *)v179) >> 2));
  if (v180 == v179) {
    uint64_t v18 = 0;
  }
  else {
    uint64_t v18 = v17;
  }
  uint64_t v19 = std::__introsort<std::_ClassicAlgPolicy,Phase::Controller::SpatializerFilterDatabase::SpatializerFilterDatabase(Phase::Controller::Spatializer const*,Phase::Controller::SpatializerEncoder const*,int)::$_0 &,Phase::Vector<float,3ul> *,false>((float *)v179, v180, v18, 1);
  uint64_t v20 = *(void *)(*(void *)(Phase::Logger::GetInstance((Phase::Logger *)v19) + 576) + 8);
  if (v20)
  {
    int v21 = (void *)MEMORY[0x263F8C100];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C100], (uint64_t)"Directions: ", 12);
    unint64_t v22 = (void *)std::ostream::operator<<();
    float v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" [inclination, azimuth]", 23);
    std::ios_base::getloc((const std::ios_base *)((char *)v23 + *(void *)(*v23 - 24)));
    int8x16_t v24 = std::locale::use_facet(v195, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
    std::locale::~locale(v195);
    std::ostream::put();
    std::ostream::flush();
    float v25 = (float *)v179;
    float v26 = v180;
    if (v179 != v180)
    {
      float v27 = (std::locale::id *)MEMORY[0x263F8C108];
      do
      {
        float v28 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)", ", 2);
        float v29 = (void *)std::ostream::operator<<();
        std::ios_base::getloc((const std::ios_base *)((char *)v29 + *(void *)(*v29 - 24)));
        float v30 = std::locale::use_facet(v195, v27);
        ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
        std::locale::~locale(v195);
        std::ostream::put();
        std::ostream::flush();
        v25 += 3;
      }
      while (v25 != v26);
    }
    int v7 = v162;
    int v8 = v158;
    std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(void *)(*v21 - 24)));
    float v31 = std::locale::use_facet(v195, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v31->__vftable[2].~facet_0)(v31, 10);
    std::locale::~locale(v195);
    std::ostream::put();
    std::ostream::flush();
  }
  *((void *)v7 + objc_destroyWeak(this + 3) = *((void *)v7 + 2);
  float v33 = v179;
  float v32 = v180;
  if ((char *)v180 - (unsigned char *)v179 == 12)
  {
    int v34 = 0;
    int v35 = 1;
    float v36 = 0.0;
    unint64_t v37 = 1;
    int v38 = 1;
  }
  else
  {
    uint64_t v39 = 0;
    int v34 = 0;
    unint64_t v40 = 0;
    int v35 = 1;
    float v36 = 0.0;
    do
    {
      if (*(float *)&v33[v39 + 4] == *(float *)&v33[v39 + 16])
      {
        ++v35;
      }
      else
      {
        std::vector<Phase::Controller::SpatializerFilterDatabase::Ring>::emplace_back<float &,int &,int &>(v8, v35, v34, v36);
        float v36 = *(float *)&v33[v39 + 20];
        int v34 = v40 + 1;
        float v33 = v179;
        float v32 = v180;
        int v35 = 1;
      }
      ++v40;
      unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * (((char *)v32 - v33) >> 2);
      v39 += 12;
    }
    while (v37 - 1 > v40);
    int v38 = v34 + v35;
  }
  if (v37 != v38) {
    goto LABEL_145;
  }
  std::vector<Phase::Controller::SpatializerFilterDatabase::Ring>::emplace_back<float &,int &,int &>(v8, v35, v34, v36);
  if (v20)
  {
    float32x2_t v41 = (void *)MEMORY[0x263F8C100];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C100], (uint64_t)"Rings: ", 7);
    int v42 = (void *)std::ostream::operator<<();
    uint64_t v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)" [start, step, count, index]", 28);
    std::ios_base::getloc((const std::ios_base *)((char *)v43 + *(void *)(*v43 - 24)));
    __int16 v44 = std::locale::use_facet(v195, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v44->__vftable[2].~facet_0)(v44, 10);
    std::locale::~locale(v195);
    std::ostream::put();
    std::ostream::flush();
    uint64_t v45 = *((void *)v7 + 2);
    uint64_t v46 = *((void *)v7 + 3);
    if (v45 != v46)
    {
      uint64_t v47 = (std::locale::id *)MEMORY[0x263F8C108];
      do
      {
        uint64_t v48 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)", ", 2);
        uint64_t v49 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)", ", 2);
        uint64_t v50 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)", ", 2);
        uint64_t v51 = (void *)std::ostream::operator<<();
        std::ios_base::getloc((const std::ios_base *)((char *)v51 + *(void *)(*v51 - 24)));
        int v52 = std::locale::use_facet(v195, v47);
        ((void (*)(const std::locale::facet *, uint64_t))v52->__vftable[2].~facet_0)(v52, 10);
        std::locale::~locale(v195);
        std::ostream::put();
        std::ostream::flush();
        v45 += 20;
      }
      while (v45 != v46);
    }
    int v7 = v162;
    std::ios_base::getloc((const std::ios_base *)((char *)v41 + *(void *)(*v41 - 24)));
    uint64_t v53 = std::locale::use_facet(v195, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v53->__vftable[2].~facet_0)(v53, 10);
    std::locale::~locale(v195);
    std::ostream::put();
    std::ostream::flush();
  }
  *((_DWORD *)v7 + objc_destroyWeak(this + 3) = 0;
  unint64_t v54 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)v7 + 3) - *((void *)v7 + 2)) >> 2);
  float v55 = 0.0;
  if (v54 >= 2)
  {
    float v55 = *(v180 - 2) / (float)(v54 - 1);
    *((float *)v7 + objc_destroyWeak(this + 3) = 1.0 / v55;
  }
  signed int v57 = *((_DWORD *)v7 + 1);
  int v56 = *((_DWORD *)v7 + 2);
  memset(v195, 0, sizeof(v195));
  long long v196 = 0u;
  char v197 = 0;
  uint64_t v198 = 0;
  int v199 = 0;
  long long v202 = 0u;
  long long v203 = 0u;
  long long v204 = 0u;
  char v205 = 0;
  long long v200 = 0uLL;
  unsigned int v201 = 0;
  uint64_t v207 = 0;
  uint64_t v206 = 0;
  int v208 = 0;
  if (v57 <= 0) {
    goto LABEL_145;
  }
  if (v56 < 0) {
    goto LABEL_145;
  }
  if (!v56) {
    goto LABEL_145;
  }
  uint64_t v198 = 0x800000000BLL;
  long long v200 = xmmword_2220E8380;
  Phase::AudioBuffer<float>::AudioBuffer((uint64_t)&v190, 1u, 0x581u);
  uint64_t v58 = Phase::AudioBuffer<float>::GetWritePointer((uint64_t)&v190, 0, 0);
  long long v184 = 0u;
  *(_OWORD *)int __p = 0u;
  long long v186 = 0u;
  v187[0] = 0;
  if (*(double *)&v200 <= 0.0) {
    goto LABEL_145;
  }
  BOOL v59 = (_DWORD *)v58;
  int v188 = 1407;
  uint64_t v189 = v200;
  if (*(double *)&v200 >= 50.0)
  {
    double v60 = (*(double *)&v200 + -8.7) * 0.1102;
  }
  else
  {
    double v60 = 0.0;
    if (*(double *)&v200 > 21.0)
    {
      double v61 = *(double *)&v200 + -21.0;
      double v60 = v61 * 0.07886 + pow(*(double *)&v200 + -21.0, 0.4) * 0.5842;
    }
  }
  Phase::BesselFunction::I_0<double>(v60);
  double v63 = v62;
  Phase::AudioBuffer<float>::AllocateInternal((uint64_t)&v184, 1u, 0x580u);
  double v64 = 1.0 / v63;
  uint64_t v65 = Phase::AudioBuffer<float>::GetWritePointer((uint64_t)&v184, 0, 1);
  for (uint64_t i = 0; i != 1407; ++i)
  {
    Phase::BesselFunction::I_0<double>(v60 * sqrt(1.0- ((double)(int)i + -703.0) / 703.0 * (((double)(int)i + -703.0) / 703.0)));
    *(float *)&double v67 = v64 * v67;
    *(_DWORD *)(v65 + 4 * i) = LODWORD(v67);
  }
  Phase::AudioBuffer<float>::SetValue((uint64_t)&v184, 0, 0.0);
  uint64_t Pointer = Phase::AudioBuffer<float>::GetReadPointer((uint64_t)&v184, 0);
  uint64_t v69 = 0;
  int v70 = HIDWORD(v198);
  double v71 = 3.14159265 / (double)SHIDWORD(v198);
  *BOOL v59 = 0;
  double v72 = v71 * 0.9;
  do
  {
    float v73 = sin(v72 * ((double)(int)v69 + -704.0))
        * 0.9
        * *(float *)(Pointer + 4 * v69)
        / (v72
         * ((double)(int)v69 + -704.0));
    *(float *)&v59[v69++] = v73;
  }
  while (v69 != 1408);
  *BOOL v59 = 0;
  v59[704] = 1063675494;
  v59[1408] = 0;
  if ((int)v198 >= 0) {
    int v74 = v198;
  }
  else {
    int v74 = v198 + 1;
  }
  int v199 = (v74 >> 1) - 1;
  Phase::AudioBuffer<float>::AllocateInternal((uint64_t)v195, 1u, v198 + v198 * v70);
  uint64_t v75 = Phase::AudioBuffer<float>::GetWritePointer((uint64_t)v195, 0, 0);
  int v76 = HIDWORD(v198);
  uint64_t v77 = v161;
  if ((v198 & 0x8000000000000000) == 0)
  {
    uint64_t v78 = 0;
    uint64_t v79 = v198;
    uint64_t v80 = HIDWORD(v198) + 1;
    uint64_t v81 = 4 * (int)v198;
    uint64_t v82 = 4 * HIDWORD(v198);
    do
    {
      if ((int)v79 >= 1)
      {
        long long v83 = &v59[v76];
        long long v84 = (_DWORD *)v75;
        uint64_t v85 = v79;
        do
        {
          *v84++ = *v83;
          long long v83 = (_DWORD *)((char *)v83 + v82);
          --v85;
        }
        while (v85);
      }
      ++v78;
      --v76;
      v75 += v81;
    }
    while (v78 != v80);
  }
  if (__p[1])
  {
    *(void **)&long long v186 = __p[1];
    operator delete(__p[1]);
  }
  v178[0] = &v184;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v178);
  if (v192)
  {
    long long v193 = v192;
    operator delete(v192);
  }
  *(void *)&long long v184 = &v190;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v184);
  uint8x8_t v86 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v198));
  v86.i16[0] = vaddlv_u8(v86);
  if (v86.i32[0] != 1) {
    goto LABEL_145;
  }
  unsigned int v201 = 31 - __clz(HIDWORD(v198));
  unsigned int v87 = v198 + 2 * v56 - 1;
  unsigned int v88 = 1;
  do
  {
    v87 |= v87 >> v88;
    BOOL v89 = v88 >= 0x10;
    v88 *= 2;
  }
  while (!v89);
  LODWORD(v206) = v87 + v198;
  HIDWORD(v206) = v87;
  HIDWORD(v207) = v56;
  int v208 = v56;
  Phase::AudioBuffer<float>::AllocateInternal((uint64_t)&v202, v57, v87 + v198);
  Phase::AudioBuffer<float>::Clear((uint64_t)&v202);
  LODWORD(v207) = v198 - 1;
  Phase::AudioBuffer<float>::AudioBuffer((uint64_t)&v184, *((_DWORD *)v7 + 1), *((_DWORD *)v7 + 2));
  Phase::AudioBuffer<float>::AudioBuffer((uint64_t)&v190, *((_DWORD *)v7 + 1), 1u);
  long long v90 = v160;
  std::vector<float>::vector(v178, *((int *)v7 + 1));
  uint64_t v91 = *((void *)v7 + 2);
  uint64_t v92 = *((void *)v7 + 3);
  if (v92 == v91) {
    goto LABEL_132;
  }
  unint64_t v93 = 0;
  uint64_t v94 = 0;
  do
  {
    uint64_t v95 = v91 + 20 * v93;
    long long v96 = (int *)(v95 + 12);
    if (*(int *)(v95 + 12) < 1) {
      goto LABEL_131;
    }
    int v97 = 0;
    float v98 = v55 * (float)(int)v93;
    unint64_t v159 = v93;
    long long v166 = (float *)(v91 + 20 * v93 + 4);
    long long v163 = (int *)(v95 + 12);
    uint64_t v164 = v91 + 20 * v93;
    do
    {
      float v99 = *(float *)v95 + (float)((float)v97 * *v166);
      atomic_store(0, v187);
      (*(void (**)(const Phase::Controller::SpatializerEncoder *, uint64_t, void *, void *, float, float, double))(*(void *)v90 + 24))(v90, v77, __p[1], v178[0], v98, v99, 0.0);
      LODWORD(v100) = *((_DWORD *)v7 + 1);
      if ((int)v100 < 1) {
        goto LABEL_129;
      }
      int v167 = v97;
      uint64_t v101 = 0;
      float v102 = 0.0;
      do
      {
        float v103 = *((float *)v178[0] + v101);
        Phase::AudioBuffer<float>::SetValue((uint64_t)&v190, v101, v103);
        float v102 = v102 + v103;
        ++v101;
        uint64_t v100 = *((int *)v7 + 1);
      }
      while (v101 < v100);
      int v97 = v167;
      if (v102 <= 0.0) {
        goto LABEL_129;
      }
      long long v104 = v190;
      long long v105 = v191;
      if (v190 == (void **)v191) {
        int v106 = 0;
      }
      else {
        int v106 = -1431655765 * ((unint64_t)(v191 - (char *)v190) >> 3);
      }
      uint64_t v107 = (*((void *)&v184 + 1) - (void)v184) >> 3;
      int v108 = -1431655765 * v107;
      if ((void)v184 == *((void *)&v184 + 1)) {
        int v108 = 0;
      }
      if (v106 != v108) {
        goto LABEL_145;
      }
      if (v190 == (void **)v191)
      {
        LODWORD(v110) = 0;
LABEL_88:
        if ((void)v184 == *((void *)&v184 + 1)) {
          LODWORD(v111) = 0;
        }
        else {
          uint64_t v111 = (*(void *)(v184 + 8) - *(void *)v184) >> 2;
        }
        if (v110 != v111) {
          goto LABEL_145;
        }
        goto LABEL_92;
      }
      unint64_t v109 = (unsigned char *)v190[1] - (unsigned char *)*v190;
      if ((v109 & 0x3FFFFFFFCLL) != 4)
      {
        unint64_t v110 = v109 >> 2;
        goto LABEL_88;
      }
LABEL_92:
      if ((void)v184 == *((void *)&v184 + 1))
      {
        int v174 = 0;
        LODWORD(v175) = 0;
      }
      else
      {
        int v174 = -1431655765 * v107;
        uint64_t v175 = (*(void *)(v184 + 8) - *(void *)v184) >> 2;
      }
      vDSP_Length __N = v198;
      unsigned int v173 = HIDWORD(v198);
      int v112 = v206;
      char v113 = v201;
      float v114 = modff(0.5, &v194);
      if (v104 == (void **)v105 || (((unsigned char *)v104[1] - (unsigned char *)*v104) & 0x3FFFFFFFCLL) != 4) {
        goto LABEL_145;
      }
      uint64_t v165 = v94;
      uint64_t v115 = (__N - 1);
      char v172 = 10 - v113;
      int v116 = 1 << (9 - v113);
      unsigned int v176 = v207;
      int v117 = v175;
      if (v112 >= (int)v175)
      {
        if (v174 >= 1)
        {
          signed int v132 = 0;
          uint64_t v133 = (1 - __N);
          int v169 = v116 - ((int)(float)((float)(v114 * 1024.0) + 0.5) + ((int)v194 << 10));
          int v168 = v207 + v175;
          while (1)
          {
            uint64_t v134 = v133;
            int v135 = (char *)Phase::AudioBuffer<float>::GetReadPointer((uint64_t)&v184, v132);
            int v136 = (float *)Phase::AudioBuffer<float>::GetWritePointer((uint64_t)&v184, v132, 0);
            long long v137 = (char *)Phase::AudioBuffer<float>::GetWritePointer((uint64_t)&v202, v132, 0);
            float Value = Phase::AudioBuffer<float>::GetValue((char *)v190, v191, v132);
            int v139 = v169
                 + (int)(float)((float)(modff(fminf(fmaxf(Value, 0.0), (float)SHIDWORD(v207)) + (float)__N, &v194)* 1024.0)+ 0.5);
            unsigned int v140 = (unsigned __int16)(v139 & 0x3FF) >> v172;
            if (v140 >= v173) {
              break;
            }
            float v141 = v194;
            uint64_t v171 = Phase::AudioBuffer<float>::GetReadPointer((uint64_t)v195, 0);
            LODWORD(v207) = v176;
            unsigned int v142 = v206;
            if (v168 >= (int)v206)
            {
              int v143 = v206 - v176;
              int v144 = v206 - v176;
              if (v206 != v176) {
                memmove(&v137[4 * v176], v135, 4 * v143);
              }
              if (v175 != v144) {
                memmove(&v137[4 * v115], &v135[4 * v143], 4 * (int)v175 - 4 * v143);
              }
              unsigned int v142 = v206;
              int v117 = v175;
              if (v175 > (int)v206 - (int)v115) {
                break;
              }
            }
            else if (v117)
            {
              memmove(&v137[4 * v176], v135, 4 * (int)v175);
              unsigned int v142 = v206;
            }
            if (__N != 1)
            {
              memmove(v137, &v137[4 * v142 + -4 * v115], 4 * v115);
              unsigned int v142 = v206;
            }
            uint64_t v145 = v171 + 4 * v140 * __N;
            uint64_t v133 = v134;
            int v146 = (v134 - ((v139 + ((int)v141 << 10)) >> 10) + v142 + v207) & HIDWORD(v206);
            if ((int)v115 + (int)v175 + v146 <= v142)
            {
              vDSP_conv((const float *)&v137[4 * v146], 1, (const float *)(v145 + 4 * v115), -1, v136, 1, (int)v175, __N);
            }
            else
            {
              vDSP_Length v147 = v142 + v134 - v146;
              long long v148 = (const float *)(v145 + 4 * v115);
              vDSP_conv((const float *)&v137[4 * v146], 1, v148, -1, v136, 1, v147, __N);
              vDSP_conv((const float *)v137, 1, v148, -1, &v136[v147], 1, (v117 - v147), __N);
            }
            if ((int)v207 + v117 >= (int)v206) {
              int v149 = v115 - v206;
            }
            else {
              int v149 = 0;
            }
            LODWORD(v207) = v149 + v207 + v117;
            if (v174 == ++v132) {
              goto LABEL_128;
            }
          }
LABEL_145:
          std::terminate();
        }
      }
      else if (v174 >= 1)
      {
        signed int v118 = 0;
        int v119 = v112 - v115;
        int v170 = v116 - ((int)(float)((float)(v114 * 1024.0) + 0.5) + ((int)v194 << 10));
        do
        {
          long long v120 = (_DWORD *)Phase::AudioBuffer<float>::GetReadPointer((uint64_t)&v184, v118);
          long long v121 = (float *)Phase::AudioBuffer<float>::GetWritePointer((uint64_t)&v184, v118, 0);
          uint64_t v122 = Phase::AudioBuffer<float>::GetWritePointer((uint64_t)&v202, v118, 0);
          float v123 = Phase::AudioBuffer<float>::GetValue((char *)v190, v191, v118);
          int v124 = v170
               + (int)(float)((float)(modff(fminf(fmaxf(v123, 0.0), (float)SHIDWORD(v207)) + (float)__N, &v194)* 1024.0)+ 0.5);
          unsigned int v125 = (unsigned __int16)(v124 & 0x3FF) >> v172;
          if (v125 >= v173) {
            goto LABEL_145;
          }
          float v126 = v194;
          uint64_t v127 = Phase::AudioBuffer<float>::GetReadPointer((uint64_t)v195, 0);
          LODWORD(v207) = v176;
          if (v117 >= 1)
          {
            long long v128 = (const float *)(v127 + 4 * v125 * __N);
            int v129 = v119 - ((v124 + ((int)v126 << 10)) >> 10);
            uint64_t v130 = v175;
            unsigned int v131 = v176;
            do
            {
              *(_DWORD *)(v122 + 4 * (int)v131) = *v120;
              if (v131 < v115) {
                *(_DWORD *)(v122 + 4 * (v131 + v119)) = *v120;
              }
              vDSP_dotpr((const float *)(v122 + 4 * v115 + 4 * (int)(HIDWORD(v206) & (v129 + v131))), -1, v128, 1, v121, __N);
              unsigned int v131 = HIDWORD(v206) & (v207 + 1);
              LODWORD(v207) = v131;
              ++v121;
              ++v120;
              --v130;
            }
            while (v130);
          }
          ++v118;
          int v117 = v175;
        }
        while (v118 != v174);
      }
LABEL_128:
      Phase::AudioBuffer<float>::Clear((uint64_t)&v202);
      LODWORD(v207) = v198 - 1;
      int v7 = v162;
      long long v96 = v163;
      LODWORD(v100) = *((_DWORD *)v162 + 1);
      uint64_t v77 = v161;
      long long v90 = v160;
      uint64_t v95 = v164;
      uint64_t v94 = v165;
      int v97 = v167;
LABEL_129:
      Phase::ArrayFunction::Interleave((const void **)__p[1], (DSPComplex *)(*((void *)v7 + 5) + 4 * v94), *((int *)v7 + 2), (int)v100);
      v94 += *((int *)v7 + 2) * (uint64_t)*((int *)v7 + 1);
      ++v97;
    }
    while (v97 < *v96);
    uint64_t v91 = *((void *)v7 + 2);
    uint64_t v92 = *((void *)v7 + 3);
    unint64_t v93 = v159;
LABEL_131:
    ++v93;
  }
  while (0xCCCCCCCCCCCCCCCDLL * ((v92 - v91) >> 2) > v93);
LABEL_132:
  if (v178[0])
  {
    v178[1] = v178[0];
    operator delete(v178[0]);
  }
  if (v192)
  {
    long long v193 = v192;
    operator delete(v192);
  }
  v178[0] = &v190;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v178);
  if (__p[1])
  {
    *(void **)&long long v186 = __p[1];
    operator delete(__p[1]);
  }
  long long v190 = (void **)&v184;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v190);
  if (*((void *)&v203 + 1))
  {
    *(void *)&long long v204 = *((void *)&v203 + 1);
    operator delete(*((void **)&v203 + 1));
  }
  *(void *)&long long v184 = &v202;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v184);
  if (v195[3].__locale_)
  {
    *(std::locale *)&long long v196 = v195[3];
    operator delete(v195[3].__locale_);
  }
  *(void *)&long long v184 = v195;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v184);
  if (v179)
  {
    long long v180 = (float *)v179;
    operator delete(v179);
  }
  v195[0].__locale_ = (std::locale::__imp *)&v181;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v195);
  return v7;
}

void sub_222069928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,char *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,std::locale a61)
{
  __cxa_free_exception(v62);
  a43 = &a40;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a43);
  double v64 = *v61;
  if (*v61)
  {
    *(void *)(a15 + 48) = v64;
    operator delete(v64);
  }
  uint64_t v65 = *a10;
  if (*a10)
  {
    *(void *)(a15 + 24) = v65;
    operator delete(v65);
  }
  _Unwind_Resume(a1);
}

void std::vector<Phase::Controller::SpatializerFilterDatabase::Ring>::emplace_back<float &,int &,int &>(void **a1, int a2, int a3, float a4)
{
  int v8 = (Phase::Controller::SpatializerFilterDatabase::Ring *)a1[1];
  unint64_t v9 = (unint64_t)a1[2];
  if ((unint64_t)v8 >= v9)
  {
    unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - (Phase::Controller::SpatializerFilterDatabase::Ring *)*a1) >> 2);
    if (v12 + 1 > 0xCCCCCCCCCCCCCCCLL) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v9 - (void)*a1) >> 2);
    uint64_t v14 = 2 * v13;
    if (2 * v13 <= v12 + 1) {
      uint64_t v14 = v12 + 1;
    }
    if (v13 >= 0x666666666666666) {
      unint64_t v15 = 0xCCCCCCCCCCCCCCCLL;
    }
    else {
      unint64_t v15 = v14;
    }
    if (v15)
    {
      if (v15 > 0xCCCCCCCCCCCCCCCLL) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      float v16 = (char *)operator new(20 * v15);
    }
    else
    {
      float v16 = 0;
    }
    unint64_t v17 = (Phase::Controller::SpatializerFilterDatabase::Ring *)&v16[20 * v12];
    uint64_t v18 = &v16[20 * v15];
    Phase::Controller::SpatializerFilterDatabase::Ring::Ring(v17, a4, a2, a3);
    uint64_t v11 = v19 + 20;
    int v21 = (char *)*a1;
    uint64_t v20 = (char *)a1[1];
    if (v20 != *a1)
    {
      do
      {
        long long v22 = *(_OWORD *)(v20 - 20);
        *((_DWORD *)v19 - 1) = *((_DWORD *)v20 - 1);
        *(_OWORD *)(v19 - 20) = v22;
        v19 -= 20;
        v20 -= 20;
      }
      while (v20 != v21);
      uint64_t v20 = (char *)*a1;
    }
    *a1 = v19;
    a1[1] = v11;
    a1[2] = v18;
    if (v20) {
      operator delete(v20);
    }
  }
  else
  {
    Phase::Controller::SpatializerFilterDatabase::Ring::Ring(v8, a4, a2, a3);
    uint64_t v11 = (void *)(v10 + 20);
  }
  a1[1] = v11;
}

void Phase::AudioBuffer<float>::SetValue(uint64_t a1, signed int a2, float a3)
{
  if (a2 < 0
    || (uint64_t v3 = *(void **)a1, v4 = *(void *)(a1 + 8), *(void *)a1 == v4)
    || (int)(-1431655765 * ((unint64_t)(v4 - (void)v3) >> 3)) <= a2
    || (int)((v3[1] - *v3) >> 2) <= 0)
  {
    std::terminate();
  }
  *(float *)v3[3 * a2] = a3;
  atomic_store(0, (unsigned __int8 *)(a1 + 48));
}

uint64_t Phase::AudioBuffer<float>::~AudioBuffer(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  uint64_t v4 = (void **)a1;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  return a1;
}

uint64_t Phase::PolyphaseKaiserFixedPointDelayLine<float>::~PolyphaseKaiserFixedPointDelayLine(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 96);
  uint64_t v3 = *(void **)(a1 + 120);
  if (v3)
  {
    *(void *)(a1 + 128) = v3;
    operator delete(v3);
  }
  long long v6 = v2;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v4 = *(void **)(a1 + 24);
  if (v4)
  {
    *(void *)(a1 + 32) = v4;
    operator delete(v4);
  }
  long long v6 = (void **)a1;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  return a1;
}

unint64_t Phase::Controller::SpatializerFilterDatabase::GetNearestFilter(Phase::Controller::SpatializerFilterDatabase *this, float a2, float a3)
{
  BOOL v3 = a2 < 0.0 || a2 > 180.0;
  if (v3
    || (a3 >= 0.0 ? (BOOL v4 = a3 < 360.0) : (BOOL v4 = 0), !v4 || (v5 = *((void *)this + 2), v5 == *((void *)this + 3))))
  {
    std::terminate();
  }
  uint64_t v6 = v5 + 20 * llroundf(*((float *)this + 3) * a2);
  unint64_t v7 = llroundf((float)(a3 - *(float *)v6) * *(float *)(v6 + 8));
  uint64_t v9 = *(int *)(v6 + 12);
  uint64_t v8 = *(int *)(v6 + 16);
  if (v7 == v9) {
    unint64_t v7 = 0;
  }
  return *((void *)this + 5) + 4 * (v7 + v8) * *((int *)this + 1) * *((int *)this + 2);
}

float *std::__introsort<std::_ClassicAlgPolicy,Phase::Controller::SpatializerFilterDatabase::SpatializerFilterDatabase(Phase::Controller::Spatializer const*,Phase::Controller::SpatializerEncoder const*,int)::$_0 &,Phase::Vector<float,3ul> *,false>(float *result, float *a2, uint64_t a3, char a4)
{
  unint64_t v9 = (unint64_t)result;
LABEL_2:
  uint64_t j = (float *)v9;
  while (1)
  {
    unint64_t v9 = (unint64_t)j;
    uint64_t v11 = (char *)a2 - (char *)j;
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (a2 - j);
    if (v5 || !v4)
    {
      switch(v12)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          float v55 = *(a2 - 2);
          float v56 = j[1];
          if (v55 >= v56)
          {
            if (v56 < v55) {
              return result;
            }
            float v57 = j[2];
            if (*(a2 - 1) >= v57) {
              return result;
            }
          }
          else
          {
            float v57 = j[2];
          }
          float v58 = *j;
          *uint64_t j = *(a2 - 3);
          j[1] = *(a2 - 2);
          j[2] = *(a2 - 1);
          *(a2 - objc_destroyWeak(this + 3) = v58;
          *(a2 - 2) = v56;
          *(a2 - 1) = v57;
          return result;
        case 3uLL:
          return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Controller::SpatializerFilterDatabase::SpatializerFilterDatabase(Phase::Controller::Spatializer const*,Phase::Controller::SpatializerEncoder const*,int)::$_0 &,Phase::Vector<float,3ul> *>(j, j + 3, a2 - 3);
        case 4uLL:
          return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Controller::SpatializerFilterDatabase::SpatializerFilterDatabase(Phase::Controller::Spatializer const*,Phase::Controller::SpatializerEncoder const*,int)::$_0 &,Phase::Vector<float,3ul> *>(j, j + 3, j + 6, a2 - 3);
        case 5uLL:
          return std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Controller::SpatializerFilterDatabase::SpatializerFilterDatabase(Phase::Controller::Spatializer const*,Phase::Controller::SpatializerEncoder const*,int)::$_0 &,Phase::Vector<float,3ul> *,0>(j, j + 3, j + 6, j + 9, a2 - 3);
        default:
          JUMPOUT(0);
      }
    }
    if (v11 <= 287)
    {
      BOOL v59 = j + 3;
      BOOL v61 = j == a2 || v59 == a2;
      if (a4)
      {
        if (v61) {
          return result;
        }
        uint64_t v62 = 0;
        double v63 = j;
        while (2)
        {
          double v64 = v63;
          double v63 = v59;
          float v65 = v64[4];
          float v66 = v64[1];
          if (v65 < v66)
          {
            float v67 = v64[5];
            goto LABEL_125;
          }
          if (v66 >= v65)
          {
            float v67 = v64[5];
            if (v67 < v64[2])
            {
LABEL_125:
              int v68 = *((_DWORD *)v64 + 3);
              int v69 = *((_DWORD *)v64 + 1);
              v64[3] = *v64;
              *((_DWORD *)v59 + 1) = v69;
              v59[2] = v64[2];
              int v70 = j;
              if (v64 != j)
              {
                uint64_t v71 = v62;
                do
                {
                  double v72 = (float *)((char *)j + v71);
                  float v73 = *(float *)((char *)j + v71 - 8);
                  if (v65 >= v73)
                  {
                    if (v73 < v65)
                    {
                      int v70 = (float *)((char *)j + v71);
                      goto LABEL_135;
                    }
                    float v74 = *(float *)((char *)j + v71 - 4);
                    if (v67 >= v74)
                    {
                      int v70 = v64;
                      goto LABEL_135;
                    }
                  }
                  else
                  {
                    float v74 = *(v72 - 1);
                  }
                  v64 -= 3;
                  int v75 = *((_DWORD *)v72 - 3);
                  int v76 = (float *)((char *)j + v71);
                  *(_DWORD *)int v76 = v75;
                  v76[1] = v73;
                  v76[2] = v74;
                  v71 -= 12;
                }
                while (v71);
                int v70 = j;
              }
LABEL_135:
              *(_DWORD *)int v70 = v68;
              v70[1] = v65;
              void v70[2] = v67;
            }
          }
          BOOL v59 = v63 + 3;
          v62 += 12;
          if (v63 + 3 == a2) {
            return result;
          }
          continue;
        }
      }
      if (v61) {
        return result;
      }
      long long v120 = j + 2;
      while (2)
      {
        long long v121 = (float *)v9;
        unint64_t v9 = (unint64_t)v59;
        float v122 = v121[4];
        float v123 = v121[1];
        if (v122 >= v123)
        {
          if (v123 >= v122)
          {
            float v124 = v121[5];
            if (v124 < v121[2]) {
              goto LABEL_198;
            }
          }
        }
        else
        {
          float v124 = v121[5];
LABEL_198:
          int v125 = *(_DWORD *)v59;
          for (uint64_t i = v120; ; i -= 3)
          {
            *(void *)(i + 1) = *((void *)i - 1);
            i[3] = *i;
            float v127 = *(i - 4);
            if (v122 >= v127 && (v127 < v122 || v124 >= *(i - 3))) {
              break;
            }
          }
          *((_DWORD *)i - 2) = v125;
          *(i - 1) = v122;
          *uint64_t i = v124;
        }
        v59 += 3;
        v120 += 3;
        if ((float *)(v9 + 12) == a2) {
          return result;
        }
        continue;
      }
    }
    if (!a3) {
      break;
    }
    unint64_t v13 = v12 >> 1;
    uint64_t v14 = &j[3 * (v12 >> 1)];
    if ((unint64_t)v11 >= 0x601)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Controller::SpatializerFilterDatabase::SpatializerFilterDatabase(Phase::Controller::Spatializer const*,Phase::Controller::SpatializerEncoder const*,int)::$_0 &,Phase::Vector<float,3ul> *>((float *)v9, (float *)(v9 + 12 * (v12 >> 1)), a2 - 3);
      uint64_t v15 = 3 * v13;
      float v16 = (float *)(v9 + 12 * v13 - 12);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Controller::SpatializerFilterDatabase::SpatializerFilterDatabase(Phase::Controller::Spatializer const*,Phase::Controller::SpatializerEncoder const*,int)::$_0 &,Phase::Vector<float,3ul> *>((float *)(v9 + 12), v16, a2 - 6);
      unint64_t v17 = (float *)(v9 + 12 + 4 * v15);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Controller::SpatializerFilterDatabase::SpatializerFilterDatabase(Phase::Controller::Spatializer const*,Phase::Controller::SpatializerEncoder const*,int)::$_0 &,Phase::Vector<float,3ul> *>((float *)(v9 + 24), v17, a2 - 9);
      double result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Controller::SpatializerFilterDatabase::SpatializerFilterDatabase(Phase::Controller::Spatializer const*,Phase::Controller::SpatializerEncoder const*,int)::$_0 &,Phase::Vector<float,3ul> *>(v16, v14, v17);
      int v18 = *(_DWORD *)(v9 + 8);
      *(float *)(v9 + 8) = v14[2];
      uint64_t v19 = *(void *)v9;
      *(void *)unint64_t v9 = *(void *)v14;
      *(void *)uint64_t v14 = v19;
      *((_DWORD *)v14 + 2) = v18;
    }
    else
    {
      double result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Controller::SpatializerFilterDatabase::SpatializerFilterDatabase(Phase::Controller::Spatializer const*,Phase::Controller::SpatializerEncoder const*,int)::$_0 &,Phase::Vector<float,3ul> *>((float *)(v9 + 12 * (v12 >> 1)), (float *)v9, a2 - 3);
    }
    --a3;
    if (a4)
    {
      float v20 = *(float *)(v9 + 4);
LABEL_15:
      uint64_t v23 = 0;
      float v24 = *(float *)v9;
      float v25 = *(float *)(v9 + 8);
      while (1)
      {
        float v26 = *(float *)(v9 + v23 + 16);
        if (v26 >= v20 && (v20 < v26 || *(float *)(v9 + v23 + 20) >= v25)) {
          break;
        }
        v23 += 12;
      }
      unint64_t v27 = v9 + v23 + 12;
      if (v23)
      {
        float v28 = *(a2 - 2);
        float v29 = a2 - 1;
        float v30 = a2 - 3;
        if (v28 >= v20)
        {
          do
          {
            if (v20 >= v28 && *v29 < v25) {
              break;
            }
            float v28 = *(v29 - 4);
            v29 -= 3;
          }
          while (v28 >= v20);
LABEL_25:
          float v30 = v29 - 2;
        }
      }
      else
      {
        float v30 = a2;
        if (v27 < (unint64_t)a2)
        {
          float v31 = *(a2 - 2);
          float v30 = a2 - 3;
          if (v31 >= v20)
          {
            float v29 = a2 - 1;
            float v30 = a2 - 3;
            while (1)
            {
              float v32 = v29 - 2;
              if (v20 >= v31)
              {
                if (*v29 < v25 || v27 >= (unint64_t)v32)
                {
                  float v30 = v29 - 2;
                  break;
                }
              }
              else if (v27 >= (unint64_t)v32)
              {
                break;
              }
              v30 -= 3;
              float v31 = *(v29 - 4);
              v29 -= 3;
              if (v31 < v20) {
                goto LABEL_25;
              }
            }
          }
        }
      }
      uint64_t j = (float *)v27;
      if (v27 < (unint64_t)v30)
      {
        int v34 = v30;
        do
        {
          int v35 = *((_DWORD *)j + 2);
          uint64_t v36 = *(void *)j;
          *uint64_t j = *v34;
          j[1] = v34[1];
          j[2] = v34[2];
          *(void *)int v34 = v36;
          *((_DWORD *)v34 + 2) = v35;
          do
          {
            do
            {
              j += 3;
              float v37 = j[1];
            }
            while (v37 < v20);
          }
          while (v20 >= v37 && j[2] < v25);
          float v38 = *(v34 - 2);
          if (v38 >= v20)
          {
            uint64_t v39 = v34 - 1;
            do
            {
              if (v20 >= v38 && *v39 < v25) {
                break;
              }
              float v38 = *(v39 - 4);
              v39 -= 3;
            }
            while (v38 >= v20);
            int v34 = v39 - 2;
          }
          else
          {
            v34 -= 3;
          }
        }
        while (j < v34);
      }
      if (j - 3 != (float *)v9)
      {
        *(float *)unint64_t v9 = *(j - 3);
        *(float *)(v9 + 4) = *(j - 2);
        *(float *)(v9 + 8) = *(j - 1);
      }
      *(j - objc_destroyWeak(this + 3) = v24;
      *(j - 2) = v20;
      *(j - 1) = v25;
      if (v27 < (unint64_t)v30) {
        goto LABEL_58;
      }
      BOOL v40 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Controller::SpatializerFilterDatabase::SpatializerFilterDatabase(Phase::Controller::Spatializer const*,Phase::Controller::SpatializerEncoder const*,int)::$_0 &,Phase::Vector<float,3ul> *>((float *)v9, j - 3);
      double result = (float *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Controller::SpatializerFilterDatabase::SpatializerFilterDatabase(Phase::Controller::Spatializer const*,Phase::Controller::SpatializerEncoder const*,int)::$_0 &,Phase::Vector<float,3ul> *>(j, a2);
      if (result)
      {
        a2 = j - 3;
        if (v40) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v40)
      {
LABEL_58:
        double result = (float *)std::__introsort<std::_ClassicAlgPolicy,Phase::Controller::SpatializerFilterDatabase::SpatializerFilterDatabase(Phase::Controller::Spatializer const*,Phase::Controller::SpatializerEncoder const*,int)::$_0 &,Phase::Vector<float,3ul> *,false>(v9, j - 3, a3, a4 & 1);
        a4 = 0;
      }
    }
    else
    {
      float v21 = *(float *)(v9 - 8);
      float v20 = *(float *)(v9 + 4);
      if (v21 < v20) {
        goto LABEL_15;
      }
      if (v20 < v21)
      {
        float v22 = *(float *)(v9 + 8);
      }
      else
      {
        float v22 = *(float *)(v9 + 8);
        if (*(float *)(v9 - 4) < v22) {
          goto LABEL_15;
        }
      }
      float v41 = *(a2 - 2);
      if (v20 >= v41 && (v41 < v20 || v22 >= *(a2 - 1)))
      {
        for (uint64_t j = (float *)(v9 + 12); j < a2; j += 3)
        {
          float v43 = j[1];
          if (v20 < v43 || v43 >= v20 && v22 < j[2]) {
            break;
          }
        }
      }
      else
      {
        float v42 = *(float *)(v9 + 16);
        if (v20 >= v42)
        {
          __int16 v44 = (float *)(v9 + 28);
          do
          {
            if (v42 >= v20 && v22 < *(v44 - 2)) {
              break;
            }
            float v45 = *v44;
            v44 += 3;
            float v42 = v45;
          }
          while (v20 >= v45);
          uint64_t j = v44 - 4;
        }
        else
        {
          uint64_t j = (float *)(v9 + 12);
        }
      }
      float v46 = *(float *)v9;
      uint64_t v47 = a2;
      if (j < a2)
      {
        for (uint64_t k = a2 - 1; v20 < v41 || v41 >= v20 && v22 < *k; k -= 3)
          float v41 = *(k - 4);
        uint64_t v47 = k - 2;
      }
      while (j < v47)
      {
        int v49 = *((_DWORD *)j + 2);
        uint64_t v50 = *(void *)j;
        *uint64_t j = *v47;
        j[1] = v47[1];
        j[2] = v47[2];
        *(void *)uint64_t v47 = v50;
        *((_DWORD *)v47 + 2) = v49;
        float v51 = j[4];
        if (v20 >= v51)
        {
          int v52 = j + 7;
          do
          {
            if (v51 >= v20 && v22 < *(v52 - 2)) {
              break;
            }
            float v53 = *v52;
            v52 += 3;
            float v51 = v53;
          }
          while (v20 >= v53);
          uint64_t j = v52 - 4;
        }
        else
        {
          j += 3;
        }
        do
        {
          do
          {
            v47 -= 3;
            float v54 = v47[1];
          }
          while (v20 < v54);
        }
        while (v54 >= v20 && v22 < v47[2]);
      }
      BOOL v4 = (unint64_t)(j - 3) >= v9;
      BOOL v5 = j - 3 == (float *)v9;
      if (j - 3 != (float *)v9)
      {
        *(float *)unint64_t v9 = *(j - 3);
        *(float *)(v9 + 4) = *(j - 2);
        *(float *)(v9 + 8) = *(j - 1);
      }
      a4 = 0;
      *(j - objc_destroyWeak(this + 3) = v46;
      *(j - 2) = v20;
      *(j - 1) = v22;
    }
  }
  if (j != a2)
  {
    int64_t v77 = (v12 - 2) >> 1;
    int64_t v78 = v77;
    while (2)
    {
      int64_t v79 = v78;
      if (v77 >= v78)
      {
        uint64_t v80 = (2 * v78) | 1;
        uint64_t v81 = &j[3 * v80];
        uint64_t v82 = 2 * v78 + 2;
        if (v82 >= (uint64_t)v12
          || (long long v83 = v81 + 3, v84 = v81[1], v85 = v81[4], v84 >= v85) && (v85 < v84 || v81[2] >= v81[5]))
        {
          long long v83 = &j[3 * v80];
          uint64_t v82 = (2 * v79) | 1;
        }
        uint8x8_t v86 = &j[3 * v79];
        float v87 = v83[1];
        float v88 = v86[1];
        if (v87 >= v88)
        {
          if (v88 < v87)
          {
            float v89 = v86[2];
            goto LABEL_150;
          }
          float v89 = v86[2];
          if (v83[2] >= v89)
          {
LABEL_150:
            int v90 = *(_DWORD *)v86;
            *uint8x8_t v86 = *v83;
            v86[1] = v83[1];
            v86[2] = v83[2];
            if (v77 >= v82)
            {
              while (1)
              {
                uint64_t v92 = (2 * v82) | 1;
                unint64_t v93 = &j[3 * v92];
                uint64_t v82 = 2 * v82 + 2;
                if (v82 >= (uint64_t)v12
                  || (uint64_t v91 = v93 + 3, v94 = v93[1], v95 = v93[4], v94 >= v95) && (v95 < v94 || v93[2] >= v93[5]))
                {
                  uint64_t v91 = &j[3 * v92];
                  uint64_t v82 = v92;
                }
                float v96 = v91[1];
                if (v96 < v88 || v88 >= v96 && v91[2] < v89) {
                  break;
                }
                *long long v83 = *v91;
                v83[1] = v91[1];
                v83[2] = v91[2];
                long long v83 = v91;
                if (v77 < v82) {
                  goto LABEL_152;
                }
              }
            }
            uint64_t v91 = v83;
LABEL_152:
            *(_DWORD *)uint64_t v91 = v90;
            v91[1] = v88;
            v91[2] = v89;
          }
        }
      }
      int64_t v78 = v79 - 1;
      if (v79) {
        continue;
      }
      break;
    }
    int64_t v97 = v11 / 0xCuLL;
    while (2)
    {
      uint64_t v98 = 0;
      float v100 = *j;
      int v99 = *((_DWORD *)j + 1);
      int v101 = *((_DWORD *)j + 2);
      float v102 = j;
      do
      {
        float v103 = v102;
        long long v104 = &v102[3 * v98 + 3];
        uint64_t v105 = (2 * v98) | 1;
        uint64_t v98 = 2 * v98 + 2;
        if (v98 >= v97
          || (float v102 = v104 + 3, v106 = v104[1], v107 = v104[4], v106 >= v107) && (v107 < v106 || v104[2] >= v104[5]))
        {
          float v102 = v104;
          uint64_t v98 = v105;
        }
        float *v103 = *v102;
        v103[1] = v102[1];
        _OWORD v103[2] = v102[2];
      }
      while (v98 <= (uint64_t)((unint64_t)(v97 - 2) >> 1));
      if (v102 == a2 - 3)
      {
        float *v102 = v100;
        *((_DWORD *)v102 + 1) = v99;
        *((_DWORD *)v102 + 2) = v101;
      }
      else
      {
        float *v102 = *(a2 - 3);
        v102[1] = *(a2 - 2);
        v102[2] = *(a2 - 1);
        *(a2 - objc_destroyWeak(this + 3) = v100;
        *((_DWORD *)a2 - 2) = v99;
        *((_DWORD *)a2 - 1) = v101;
        uint64_t v108 = (char *)v102 - (char *)j + 12;
        if (v108 >= 13)
        {
          unint64_t v109 = v108 / 0xCuLL - 2;
          unint64_t v110 = v109 >> 1;
          uint64_t v111 = &j[3 * (v109 >> 1)];
          float v112 = v111[1];
          float v113 = v102[1];
          if (v112 < v113)
          {
            float v114 = v102[2];
            goto LABEL_179;
          }
          if (v113 >= v112)
          {
            float v114 = v102[2];
            if (v111[2] < v114)
            {
LABEL_179:
              int v115 = *(_DWORD *)v102;
              float *v102 = *v111;
              v102[1] = v111[1];
              v102[2] = v111[2];
              if (v109 >= 2)
              {
                while (1)
                {
                  unint64_t v117 = v110 - 1;
                  unint64_t v110 = (v110 - 1) >> 1;
                  int v116 = &j[3 * v110];
                  float v118 = v116[1];
                  if (v118 >= v113 && (v113 < v118 || v116[2] >= v114)) {
                    break;
                  }
                  float *v111 = *v116;
                  v111[1] = v118;
                  v111[2] = v116[2];
                  uint64_t v111 = &j[3 * v110];
                  if (v117 <= 1) {
                    goto LABEL_185;
                  }
                }
              }
              int v116 = v111;
LABEL_185:
              *(_DWORD *)int v116 = v115;
              v116[1] = v113;
              v116[2] = v114;
            }
          }
        }
      }
      a2 -= 3;
      if (v97-- <= 2) {
        return result;
      }
      continue;
    }
  }
  return result;
}

float *std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Controller::SpatializerFilterDatabase::SpatializerFilterDatabase(Phase::Controller::Spatializer const*,Phase::Controller::SpatializerEncoder const*,int)::$_0 &,Phase::Vector<float,3ul> *,0>(float *a1, float *a2, float *a3, float *a4, float *a5)
{
  double result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Controller::SpatializerFilterDatabase::SpatializerFilterDatabase(Phase::Controller::Spatializer const*,Phase::Controller::SpatializerEncoder const*,int)::$_0 &,Phase::Vector<float,3ul> *>(a1, a2, a3, a4);
  float v11 = a5[1];
  float v12 = a4[1];
  if (v11 >= v12)
  {
    if (v12 < v11) {
      return result;
    }
    float v13 = a4[2];
    if (a5[2] >= v13) {
      return result;
    }
  }
  else
  {
    float v13 = a4[2];
  }
  float v14 = *a4;
  *a4 = *a5;
  a4[1] = a5[1];
  a4[2] = a5[2];
  *a5 = v14;
  a5[1] = v12;
  a5[2] = v13;
  float v15 = a4[1];
  float v16 = a3[1];
  if (v15 >= v16)
  {
    if (v16 < v15) {
      return result;
    }
    float v17 = a3[2];
    if (a4[2] >= v17) {
      return result;
    }
  }
  else
  {
    float v17 = a3[2];
  }
  float v18 = *a3;
  *a3 = *a4;
  a3[1] = a4[1];
  a3[2] = a4[2];
  *a4 = v18;
  a4[1] = v16;
  a4[2] = v17;
  float v19 = a3[1];
  float v20 = a2[1];
  if (v19 >= v20)
  {
    if (v20 < v19) {
      return result;
    }
    float v21 = a2[2];
    if (a3[2] >= v21) {
      return result;
    }
  }
  else
  {
    float v21 = a2[2];
  }
  float v22 = *a2;
  *a2 = *a3;
  a2[1] = a3[1];
  a2[2] = a3[2];
  *a3 = v22;
  a3[1] = v20;
  a3[2] = v21;
  float v23 = a2[1];
  float v24 = a1[1];
  if (v23 < v24)
  {
    float v25 = a1[2];
LABEL_9:
    float v26 = *a1;
    *a1 = *a2;
    a1[1] = a2[1];
    a1[2] = a2[2];
    *a2 = v26;
    a2[1] = v24;
    a2[2] = v25;
    return result;
  }
  if (v24 >= v23)
  {
    float v25 = a1[2];
    if (a2[2] < v25) {
      goto LABEL_9;
    }
  }
  return result;
}

float *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Controller::SpatializerFilterDatabase::SpatializerFilterDatabase(Phase::Controller::Spatializer const*,Phase::Controller::SpatializerEncoder const*,int)::$_0 &,Phase::Vector<float,3ul> *>(float *result, float *a2, float *a3)
{
  float v3 = a2[1];
  float v4 = result[1];
  if (v3 >= v4 && (v4 < v3 || a2[2] >= result[2]))
  {
    float v8 = a3[1];
    if (v8 >= v3)
    {
      if (v3 < v8) {
        return result;
      }
      float v9 = a2[2];
      if (a3[2] >= v9) {
        return result;
      }
    }
    else
    {
      float v9 = a2[2];
    }
    float v10 = *a2;
    *a2 = *a3;
    a2[1] = a3[1];
    a2[2] = a3[2];
    *a3 = v10;
    a3[1] = v3;
    a3[2] = v9;
    float v11 = a2[1];
    float v12 = result[1];
    if (v11 >= v12)
    {
      if (v12 < v11) {
        return result;
      }
      float v13 = result[2];
      if (a2[2] >= v13) {
        return result;
      }
    }
    else
    {
      float v13 = result[2];
    }
    float v17 = *result;
    *double result = *a2;
    result[1] = a2[1];
    result[2] = a2[2];
    *a2 = v17;
    a2[1] = v12;
    a2[2] = v13;
    return result;
  }
  float v5 = a3[1];
  if (v5 < v3 || v3 >= v5 && a3[2] < a2[2])
  {
    float v6 = *result;
    int v7 = *((_DWORD *)result + 2);
    *double result = *a3;
    result[1] = a3[1];
    result[2] = a3[2];
    *a3 = v6;
    a3[1] = v4;
    *((_DWORD *)a3 + 2) = v7;
  }
  else
  {
    float v14 = *result;
    float v15 = result[2];
    *double result = *a2;
    result[1] = a2[1];
    result[2] = a2[2];
    *a2 = v14;
    a2[1] = v4;
    a2[2] = v15;
    float v16 = a3[1];
    if (v16 < v4 || v4 >= v16 && a3[2] < v15)
    {
      *a2 = *a3;
      a2[1] = a3[1];
      a2[2] = a3[2];
      *a3 = v14;
      a3[1] = v4;
      a3[2] = v15;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Controller::SpatializerFilterDatabase::SpatializerFilterDatabase(Phase::Controller::Spatializer const*,Phase::Controller::SpatializerEncoder const*,int)::$_0 &,Phase::Vector<float,3ul> *>(float *a1, float *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      float v6 = *(a2 - 2);
      float v7 = a1[1];
      if (v6 < v7)
      {
        float v8 = a1[2];
LABEL_30:
        float v23 = *a1;
        *a1 = *(a2 - 3);
        a1[1] = *(a2 - 2);
        a1[2] = *(a2 - 1);
        *(a2 - objc_destroyWeak(this + 3) = v23;
        *(a2 - 2) = v7;
        *(a2 - 1) = v8;
        return result;
      }
      if (v7 >= v6)
      {
        float v8 = a1[2];
        if (*(a2 - 1) < v8) {
          goto LABEL_30;
        }
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Controller::SpatializerFilterDatabase::SpatializerFilterDatabase(Phase::Controller::Spatializer const*,Phase::Controller::SpatializerEncoder const*,int)::$_0 &,Phase::Vector<float,3ul> *>(a1, a1 + 3, a2 - 3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Controller::SpatializerFilterDatabase::SpatializerFilterDatabase(Phase::Controller::Spatializer const*,Phase::Controller::SpatializerEncoder const*,int)::$_0 &,Phase::Vector<float,3ul> *>(a1, a1 + 3, a1 + 6, a2 - 3);
      return 1;
    case 5uLL:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Controller::SpatializerFilterDatabase::SpatializerFilterDatabase(Phase::Controller::Spatializer const*,Phase::Controller::SpatializerEncoder const*,int)::$_0 &,Phase::Vector<float,3ul> *,0>(a1, a1 + 3, a1 + 6, a1 + 9, a2 - 3);
      return 1;
    default:
      float v9 = a1 + 6;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Controller::SpatializerFilterDatabase::SpatializerFilterDatabase(Phase::Controller::Spatializer const*,Phase::Controller::SpatializerEncoder const*,int)::$_0 &,Phase::Vector<float,3ul> *>(a1, a1 + 3, a1 + 6);
      float v10 = a1 + 9;
      if (a1 + 9 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
LABEL_6:
  float v13 = v10[1];
  float v14 = v9[1];
  if (v13 >= v14)
  {
    if (v14 < v13) {
      goto LABEL_21;
    }
    float v15 = v10[2];
    if (v15 >= v9[2]) {
      goto LABEL_21;
    }
  }
  else
  {
    float v15 = v10[2];
  }
  int v16 = *(_DWORD *)v10;
  *float v10 = *v9;
  v10[1] = v9[1];
  uint64_t v10[2] = v9[2];
  uint64_t v17 = (uint64_t)a1;
  if (v9 == a1) {
    goto LABEL_20;
  }
  uint64_t v18 = v11;
  while (1)
  {
    float v19 = (float *)((char *)a1 + v18);
    float v20 = *(float *)((char *)a1 + v18 + 16);
    if (v13 >= v20)
    {
      if (v20 < v13)
      {
        uint64_t v17 = (uint64_t)v9;
        goto LABEL_20;
      }
      float v21 = *(float *)((char *)a1 + v18 + 20);
      if (v15 >= v21)
      {
        uint64_t v17 = (uint64_t)a1 + v18 + 24;
LABEL_20:
        *(_DWORD *)uint64_t v17 = v16;
        *(float *)(v17 + 4) = v13;
        *(float *)(v17 + 8) = v15;
        if (++v12 == 8) {
          return v10 + 3 == a2;
        }
LABEL_21:
        float v9 = v10;
        v11 += 12;
        v10 += 3;
        if (v10 == a2) {
          return 1;
        }
        goto LABEL_6;
      }
    }
    else
    {
      float v21 = v19[5];
    }
    v9 -= 3;
    v19[6] = v19[3];
    float v22 = (float *)((char *)a1 + v18);
    v22[7] = v20;
    v22[8] = v21;
    v18 -= 12;
    if (v18 == -24)
    {
      uint64_t v17 = (uint64_t)a1;
      goto LABEL_20;
    }
  }
}

float *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Controller::SpatializerFilterDatabase::SpatializerFilterDatabase(Phase::Controller::Spatializer const*,Phase::Controller::SpatializerEncoder const*,int)::$_0 &,Phase::Vector<float,3ul> *>(float *a1, float *a2, float *a3, float *a4)
{
  BOOL result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Controller::SpatializerFilterDatabase::SpatializerFilterDatabase(Phase::Controller::Spatializer const*,Phase::Controller::SpatializerEncoder const*,int)::$_0 &,Phase::Vector<float,3ul> *>(a1, a2, a3);
  float v9 = a4[1];
  float v10 = a3[1];
  if (v9 >= v10)
  {
    if (v10 < v9) {
      return result;
    }
    float v11 = a3[2];
    if (a4[2] >= v11) {
      return result;
    }
  }
  else
  {
    float v11 = a3[2];
  }
  float v12 = *a3;
  *a3 = *a4;
  a3[1] = a4[1];
  a3[2] = a4[2];
  *a4 = v12;
  a4[1] = v10;
  a4[2] = v11;
  float v13 = a3[1];
  float v14 = a2[1];
  if (v13 >= v14)
  {
    if (v14 < v13) {
      return result;
    }
    float v15 = a2[2];
    if (a3[2] >= v15) {
      return result;
    }
  }
  else
  {
    float v15 = a2[2];
  }
  float v16 = *a2;
  *a2 = *a3;
  a2[1] = a3[1];
  a2[2] = a3[2];
  *a3 = v16;
  a3[1] = v14;
  a3[2] = v15;
  float v17 = a2[1];
  float v18 = a1[1];
  if (v17 < v18)
  {
    float v19 = a1[2];
LABEL_15:
    float v20 = *a1;
    *a1 = *a2;
    a1[1] = a2[1];
    a1[2] = a2[2];
    *a2 = v20;
    a2[1] = v18;
    a2[2] = v19;
    return result;
  }
  if (v18 >= v17)
  {
    float v19 = a1[2];
    if (a2[2] < v19) {
      goto LABEL_15;
    }
  }
  return result;
}

float Phase::Controller::SpatializerFilterDatabase::Ring::Ring(Phase::Controller::SpatializerFilterDatabase::Ring *this, float a2, int a3, int a4)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  BOOL v4 = a2 >= 0.0 && a2 < 360.0;
  if (!v4 || a3 <= 0 || a4 < 0) {
    std::terminate();
  }
  float v5 = 360.0 / (float)a3;
  *(float *)this = a2;
  *((float *)this + 1) = v5;
  float result = 1.0 / v5;
  *((float *)this + 2) = 1.0 / v5;
  *((_DWORD *)this + objc_destroyWeak(this + 3) = a3;
  *((_DWORD *)this + 4) = a4;
  return result;
}

uint64_t Phase::AudioBuffer<float>::GetWritePointer(uint64_t a1, signed int a2, int a3)
{
  if (a2 < 0
    || (float v3 = *(void **)a1, v4 = *(void *)(a1 + 8), *(void *)a1 == v4)
    || (int)(-1431655765 * ((unint64_t)(v4 - (void)v3) >> 3)) <= a2
    || (int)((v3[1] - *v3) >> 2) <= a3)
  {
    std::terminate();
  }
  atomic_store(0, (unsigned __int8 *)(a1 + 48));
  return *(void *)(*(void *)(a1 + 24) + 8 * a2) + 4 * a3;
}

void Phase::BesselFunction::I_0<double>(double a1)
{
  double v1 = fabs(a1);
  if (v1 >= 3.75) {
    exp(v1);
  }
}

uint64_t Phase::AudioBuffer<float>::GetReadPointer(uint64_t a1, signed int a2)
{
  if (a2 < 0
    || (uint64_t v2 = *(void **)a1, v3 = *(void *)(a1 + 8), *(void *)a1 == v3)
    || (int)(-1431655765 * ((unint64_t)(v3 - (void)v2) >> 3)) <= a2
    || (int)((v2[1] - *v2) >> 2) <= 0)
  {
    std::terminate();
  }
  return *(void *)(*(void *)(a1 + 24) + 8 * a2);
}

void Phase::AudioBuffer<float>::AllocateInternal(uint64_t a1, unsigned int a2, unsigned int a3)
{
  if ((a2 & 0x80000000) != 0 || (a3 & 0x80000000) != 0) {
    std::terminate();
  }
  float v5 = *(void **)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  if (*(void *)a1 == v6)
  {
    if (a2) {
      goto LABEL_9;
    }
    LODWORD(v7) = 0;
  }
  else
  {
    if (-1431655765 * ((unint64_t)(v6 - (void)v5) >> 3) != a2) {
      goto LABEL_9;
    }
    uint64_t v7 = (v5[1] - *v5) >> 2;
  }
  if (v7 == a3) {
    return;
  }
LABEL_9:
  unint64_t v8 = a2;
  std::vector<std::vector<float>>::resize((uint64_t *)a1, a2);
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = *(void *)(a1 + 32);
  unint64_t v11 = (v10 - v9) >> 3;
  if (v8 <= v11)
  {
    if (v8 >= v11) {
      goto LABEL_25;
    }
    uint64_t v25 = v9 + 8 * v8;
  }
  else
  {
    unint64_t v12 = v8 - v11;
    uint64_t v13 = *(void *)(a1 + 40);
    if (v8 - v11 > (v13 - v10) >> 3)
    {
      uint64_t v14 = v13 - v9;
      uint64_t v15 = v14 >> 2;
      if (v14 >> 2 <= v8) {
        uint64_t v15 = v8;
      }
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v15;
      }
      float v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(a1 + 40, v16);
      float v18 = &v17[8 * v11];
      float v20 = &v17[8 * v19];
      bzero(v18, 8 * v12);
      float v21 = &v18[8 * v12];
      float v23 = *(char **)(a1 + 24);
      float v22 = *(char **)(a1 + 32);
      if (v22 != v23)
      {
        do
        {
          uint64_t v24 = *((void *)v22 - 1);
          v22 -= 8;
          *((void *)v18 - 1) = v24;
          v18 -= 8;
        }
        while (v22 != v23);
        float v22 = *(char **)(a1 + 24);
      }
      *(void *)(a1 + 24) = v18;
      *(void *)(a1 + 32) = v21;
      *(void *)(a1 + 40) = v20;
      if (v22) {
        operator delete(v22);
      }
      goto LABEL_25;
    }
    bzero(*(void **)(a1 + 32), 8 * v12);
    uint64_t v25 = v10 + 8 * v12;
  }
  *(void *)(a1 + 32) = v25;
LABEL_25:
  uint64_t v26 = *(void *)a1;
  if (*(void *)(a1 + 8) != *(void *)a1)
  {
    uint64_t v27 = 0;
    unint64_t v28 = 0;
    do
    {
      float v29 = (void *)(v26 + v27);
      std::vector<float>::resize(v26 + v27, a3);
      *(void *)(*(void *)(a1 + 24) + 8 * v28++) = *v29;
      uint64_t v26 = *(void *)a1;
      v27 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3) > v28);
  }
}

uint64_t Phase::AudioBuffer<float>::AudioBuffer(uint64_t a1, unsigned int a2, unsigned int a3)
{
  *(unsigned char *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  Phase::AudioBuffer<float>::AllocateInternal(a1, a2, a3);
  return a1;
}

void sub_22206B408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  unint64_t v12 = *(void **)(v10 + 24);
  if (v12)
  {
    *(void *)(v10 + 32) = v12;
    operator delete(v12);
  }
  a10 = (void **)v10;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

float Phase::AudioBuffer<float>::GetValue(char *a1, char *a2, signed int a3)
{
  if (a3 < 0
    || a1 == a2
    || (int)(-1431655765 * ((unint64_t)(a2 - a1) >> 3)) <= a3
    || (int)((*((void *)a1 + 1) - *(void *)a1) >> 2) <= 0)
  {
    std::terminate();
  }
  return **(float **)&a1[24 * a3];
}

void Phase::AudioBuffer<float>::Clear(uint64_t a1)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)(a1 + 48));
  if ((v1 & 1) == 0)
  {
    uint64_t v3 = *(void **)a1;
    uint64_t v4 = *(void *)(a1 + 8);
    if (*(void *)a1 != v4)
    {
      uint64_t v5 = 0;
      do
      {
        if (v5 >= (int)(-1431655765 * ((unint64_t)(v4 - (void)v3) >> 3))) {
          break;
        }
        vDSP_vclr(*(float **)(*(void *)(a1 + 24) + 8 * v5++), 1, (int)((uint64_t)(v3[1] - *v3) >> 2));
        uint64_t v3 = *(void **)a1;
        uint64_t v4 = *(void *)(a1 + 8);
      }
      while (*(void *)a1 != v4);
    }
    atomic_store(1u, (unsigned __int8 *)(a1 + 48));
  }
}

void Phase::Controller::InitializeBinauralSpatializer(uint64_t a1, uint64_t *a2)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  strcpy(__s, "/System/Library/Audio/Tunings/IRs/Generic/HRIR_Movie.ir");
  size_t v3 = strlen(__s);
  uint64_t v4 = (const void *)MEMORY[0x223C92F50](0, __s, v3, 1, 0);
  uint64_t v5 = v4;
  v21[1] = v4;
  if (v4)
  {
    CFStringRef v6 = CFURLCopyFileSystemPath((CFURLRef)v4, kCFURLPOSIXPathStyle);
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v21, v6);
    uint64_t v7 = [MEMORY[0x263F08850] defaultManager];
    int v8 = [v7 fileExistsAtPath:v21[0]];

    uint64_t v10 = **(id **)(Phase::Logger::GetInstance(v9) + 576);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v11 = "General";
      *(void *)&uint8_t buf[4] = "SpatializerManager.mm";
      *(_DWORD *)buf = 136315650;
      if (v8) {
        unint64_t v11 = "Movie";
      }
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 71;
      __int16 v23 = 2080;
      *(void *)uint64_t v24 = v11;
      _os_log_impl(&dword_221E5E000, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Default HRIR Database is type %s.", buf, 0x1Cu);
    }
    if (v8)
    {
      CFRetain(v5);
      CFRetain(v5);
      v21[2] = v5;
      *(void *)buf = 0;
      *(void *)&_OWORD buf[8] = 0x8000000000;
      *(_WORD *)&buf[16] = 1;
      *(_DWORD *)uint64_t v24 = 2;
      *(void *)&unsigned char v24[4] = 0;
      uint64_t v25 = 0;
      uint64_t v26 = 0;
      uint64_t v27 = 0xC800000000;
      char v28 = 1;
      long long cf = 0u;
      memset(v30, 0, sizeof(v30));
      int v31 = 200;
      char v32 = 1;
      int v33 = 0;
      char v34 = 0;
      CFTypeRef v35 = 0;
      uint64_t v36 = 0;
      int v37 = 0;
      CFURLRef v12 = CFURLCopyAbsoluteURL((CFURLRef)v5);
      CFURLRef v13 = v12;
      if (v12)
      {
        CFTypeID v14 = CFGetTypeID(v12);
        if (v14 != CFURLGetTypeID())
        {
          exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Could not construct");
        }
      }
      uint64_t v15 = *(const void **)buf;
      *(void *)buf = v13;
      if (v15) {
        CFRelease(v15);
      }
      CFRelease(v5);
      CFRelease(v5);
    }
    else
    {
      IR::getPresetDataAttributes();
    }
    *(_DWORD *)uint64_t v24 = 0;
    uint64_t v16 = *a2;
    float v17 = *(double *)a2;
    *(float *)&_OWORD buf[8] = v17;
    uint64_t v18 = a2[1];
    if (*(void *)buf) {
      CFRetain(*(CFTypeRef *)buf);
    }
    if ((void)cf) {
      CFRetain((CFTypeRef)cf);
    }
    if (*(void *)&v30[8]) {
      CFRetain(*(CFTypeRef *)&v30[8]);
    }
    if (v35) {
      CFRetain(v35);
    }
    Phase::Controller::Spatializer::Create<Phase::Controller::BinauralSpatializer,Phase::Controller::Spatializer::InitParameters,IR::IRDataAttributes,BOOL>(v16, v18);
  }
  uint64_t v19 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(v19, "Could not construct");
}

void sub_22206B938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,const void *a29,const void *a30,const void *a31,const void *a32,const void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,const void *a41,uint64_t a42,uint64_t a43,const void *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,const void *a49)
{
  __cxa_free_exception(v49);
  CFRelease(v50);
  applesauce::CF::DictionaryRef::~DictionaryRef(&a49);
  applesauce::CF::URLRef::~URLRef(&a44);
  applesauce::CF::URLRef::~URLRef(&a41);
  applesauce::CF::URLRef::~URLRef(&a33);
  applesauce::CF::URLRef::~URLRef(&a32);
  applesauce::CF::URLRef::~URLRef(&a29);
  applesauce::CF::StringRef::~StringRef(&a30);
  applesauce::CF::URLRef::~URLRef(&a31);
  _Unwind_Resume(a1);
}

void applesauce::CF::URLRef::~URLRef(const void **this)
{
  unsigned __int8 v1 = *this;
  if (v1) {
    CFRelease(v1);
  }
}

void Phase::Controller::Spatializer::Create<Phase::Controller::BinauralSpatializer,Phase::Controller::Spatializer::InitParameters,IR::IRDataAttributes,BOOL>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  uint64_t v3 = a2;
  operator new();
}

void sub_22206BB2C(void *a1)
{
  MEMORY[0x223C938A0](v1, 0x10F3C40808D0D08);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x22206BB14);
}

void Phase::Controller::InitializeXTCSpatializer(uint64_t a1, uint64_t *a2)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  IR::getPresetDataAttributes();
  if (!anURL) {
    goto LABEL_5;
  }
  uint64_t v3 = [MEMORY[0x263F08850] defaultManager];
  CFStringRef v4 = CFURLCopyFileSystemPath(anURL, kCFURLPOSIXPathStyle);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)buf, v4);
  char v5 = [v3 fileExistsAtPath:*(void *)buf];
  if (*(void *)buf) {
    CFRelease(*(CFTypeRef *)buf);
  }

  if ((v5 & 1) == 0)
  {
LABEL_5:
    IR::getPresetDataAttributes();
    CFURLRef v6 = anURL;
    CFURLRef anURL = *(const __CFURL **)buf;
    CFTypeRef v7 = v20;
    *(void *)buf = v6;
    CFTypeRef v20 = v16;
    int v8 = v17;
    uint64_t v9 = cf;
    CFTypeRef v16 = v7;
    CFTypeRef v17 = v21;
    uint64_t v10 = v22;
    float v21 = v8;
    CFTypeRef v22 = cf;
    CFTypeRef cf = v10;
    if (v22)
    {
      CFRelease(v9);
      int v8 = v21;
    }
    if (v8) {
      CFRelease(v8);
    }
    if (v20) {
      CFRelease(v20);
    }
    unint64_t v11 = *(Phase::Logger **)buf;
    if (*(void *)buf) {
      CFRelease(*(CFTypeRef *)buf);
    }
    CFURLRef v12 = **(id **)(Phase::Logger::GetInstance(v11) + 576);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "SpatializerManager.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 115;
      _os_log_impl(&dword_221E5E000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d XTC HRIR doesn't exist for this device, falling back to default.", buf, 0x12u);
    }
  }
  uint64_t v13 = *a2;
  uint64_t v14 = a2[1];
  if (anURL) {
    CFRetain(anURL);
  }
  if (v16) {
    CFRetain(v16);
  }
  if (v17) {
    CFRetain(v17);
  }
  if (cf) {
    CFRetain(cf);
  }
  *(void *)buf = v13;
  *(void *)&_OWORD buf[8] = v14;
  operator new();
}

void sub_22206BECC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void Phase::Controller::InitializeVBAPSpatializer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void **)a2;
  CFStringRef v4 = *(void **)(a2 + 8);
  memset(__p, 0, 24);
  std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(__p, *(const void **)a3, *(void *)(a3 + 8), *(void *)(a3 + 8) - *(void *)a3);
  __p[3] = v3;
  __p[4] = v4;
  operator new();
}

void sub_22206C060(void *a1)
{
  MEMORY[0x223C938A0](v1, 0x10B3C40569E7192);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x22206C038);
}

void sub_22206C098(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Controller::RegisterSpatializer(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  unint64_t v9 = a3;
  if (!a1)
  {
    CFTypeRef v7 = **(id **)(Phase::Logger::GetInstance(0) + 576);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      unint64_t v11 = "SpatializerManager.mm";
      __int16 v12 = 1024;
      int v13 = 168;
      _os_log_impl(&dword_221E5E000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d POSTCONDITION: nullptr != pInSpatializer is false.", buf, 0x12u);
    }
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "POSTCONDITION: nullptr != pInSpatializer is false.");
  }
  CFStringRef v4 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(a2, a3, &v9);
  uint64_t result = v4[3];
  v4[3] = a1;
  if (result)
  {
    CFURLRef v6 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v6();
  }
  return result;
}

void sub_22206C234(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::SpatializerManager::SpatializerManager(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  CFURLRef v6 = (unsigned int **)(a1 + 48);
  __x[0] = 0;
  std::vector<char>::vector((std::vector<char> *)(a1 + 48), 0x20uLL, __x);
  uint64_t v7 = *(void *)(a1 + 48);
  *(void *)uint64_t v7 = 0;
  *(_DWORD *)(v7 + 8) = 0;
  *(int64x2_t *)(a1 + 72) = vdupq_n_s64(1uLL);
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = a2;
  uint64_t v8 = *(void *)(a2 + 40);
  std::string::basic_string[abi:ne180100]<0>(__x, "SpatializerInit");
  unint64_t v9 = (Phase::Logger *)(*(void *(**)(uint64_t *__return_ptr, uint64_t, std::vector<char>::value_type *))(*(void *)v8 + 16))(&v47, v8, __x);
  if (__x[23] < 0) {
    operator delete(*(void **)__x);
  }
  uint64_t Instance = (unsigned int *)Phase::Logger::GetInstance(v9);
  uint64_t v11 = Instance[387];
  __int16 v12 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)Instance) + 576);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__simd_float4 x = 136315650;
    *(void *)&__x[4] = "SpatializerManager.mm";
    *(_WORD *)&__x[12] = 1024;
    *(_DWORD *)&__x[14] = 199;
    *(_WORD *)&__x[18] = 1024;
    *(_DWORD *)&__x[20] = v11;
    _os_log_impl(&dword_221E5E000, v12, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Initializing with spatializerCoordinateCount=%d", (uint8_t *)__x, 0x18u);
  }
  uint64_t v46 = 0;
  uint64_t v14 = v47;
  int v13 = v48;
  if (v48) {
    atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(&v50, "SpatializerManager-init-");
  uint64_t v15 = std::string::append(&v50, "binaural");
  long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v51.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  CFTypeRef v17 = std::string::append(&v51, "-spatializer");
  long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  *(void *)&__x[16] = *((void *)&v17->__r_.__value_.__l + 2);
  *(_OWORD *)__simd_float4 x = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  (*(void (**)(long long *__return_ptr, uint64_t, std::vector<char>::value_type *))(*(void *)v8 + 16))(&v52, v8, __x);
  if (__x[23] < 0) {
    operator delete(*(void **)__x);
  }
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
  *(void *)__simd_float4 x = v14;
  *(void *)&__x[8] = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v52;
  if (*((void *)&v52 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v52 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, std::vector<char>::value_type *, std::string *))(*(void *)v8 + 24))(v8, __x, &v51);
  if (v51.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v51.__r_.__value_.__l.__size_);
  }
  uint64_t v19 = (v11 << 32) | 0x80;
  if (*(void *)&__x[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__x[8]);
  }
  long long v20 = v52;
  *(void *)(v52 + 256) = &unk_26D47A830;
  *(void *)(v20 + 264) = Phase::Controller::InitializeBinauralSpatializer;
  *(void *)(v20 + 272) = &v46;
  *(double *)(v20 + 280) = a3;
  *(void *)(v20 + 288) = v19;
  *(unsigned char *)(v20 + 296) = 1;
  *(unsigned char *)(v20 + 38objc_destroyWeak(this + 3) = 1;
  atomic_store(1u, (unsigned __int8 *)(v20 + 40));
  if (*((void *)&v20 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
  }
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  uint64_t v45 = 0;
  std::string::size_type v22 = v47;
  float v21 = v48;
  if (v48) {
    atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  __x[0] = 0;
  std::vector<char>::vector(&v44, 0x20uLL, __x);
  begiuint64_t n = v44.__begin_;
  *(void *)v44.__begin_ = 6619138;
  *((_DWORD *)begin + 2) = 0;
  std::string::basic_string[abi:ne180100]<0>(&v50, "SpatializerManager-init-");
  uint64_t v24 = std::string::append(&v50, "VBAP");
  long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v51.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  uint64_t v26 = std::string::append(&v51, "-spatializer");
  long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  *(void *)&__x[16] = *((void *)&v26->__r_.__value_.__l + 2);
  *(_OWORD *)__simd_float4 x = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  (*(void (**)(long long *__return_ptr, uint64_t, std::vector<char>::value_type *))(*(void *)v8 + 16))(&v52, v8, __x);
  if (__x[23] < 0) {
    operator delete(*(void **)__x);
  }
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
  v50.__r_.__value_.__r.__words[0] = v22;
  v50.__r_.__value_.__l.__size_ = (std::string::size_type)v21;
  if (v21) {
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v49 = v52;
  if (*((void *)&v52 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v52 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, std::string *, long long *))(*(void *)v8 + 24))(v8, &v50, &v49);
  if (*((void *)&v49 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v49 + 1));
  }
  if (v50.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v50.__r_.__value_.__l.__size_);
  }
  uint64_t v28 = v52;
  memset(&v51, 0, sizeof(v51));
  std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(&v51, v44.__begin_, (uint64_t)v44.__end_, v44.__end_ - v44.__begin_);
  memset(__x, 0, 24);
  std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(__x, v51.__r_.__value_.__l.__data_, v51.__r_.__value_.__l.__size_, v51.__r_.__value_.__l.__size_ - v51.__r_.__value_.__r.__words[0]);
  *(void *)(v28 + 256) = &unk_26D47A880;
  *(void *)(v28 + 264) = Phase::Controller::InitializeVBAPSpatializer;
  *(void *)(v28 + 272) = &v45;
  *(double *)(v28 + 280) = a3;
  *(void *)(v28 + 288) = v19;
  *(_OWORD *)(v28 + 296) = *(_OWORD *)__x;
  *(void *)(v28 + 312) = *(void *)&__x[16];
  memset(__x, 0, 24);
  *(unsigned char *)(v28 + 38objc_destroyWeak(this + 3) = 1;
  atomic_store(1u, (unsigned __int8 *)(v28 + 40));
  if (v51.__r_.__value_.__r.__words[0])
  {
    v51.__r_.__value_.__l.__size_ = v51.__r_.__value_.__r.__words[0];
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  if (*((void *)&v52 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v52 + 1));
  }
  if (v44.__begin_)
  {
    v44.__end_ = v44.__begin_;
    operator delete(v44.__begin_);
  }
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  v51.__r_.__value_.__r.__words[0] = 0;
  float v29 = v48;
  v43[0] = v47;
  v43[1] = (uint64_t)v48;
  if (v48) {
    atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Phase::Controller::SetupSpatializerInitJob<void (*)(Phase::Controller::Spatializer **,Phase::Controller::Spatializer::InitParameters const&),Phase::Controller::Spatializer::InitParameters>(v8, v43, (uint64_t)&v51, "xtc-binaural", (uint64_t)Phase::Controller::InitializeXTCSpatializer, *(uint64_t *)&a3, v19);
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  float v30 = v48;
  v42[0] = v47;
  v42[1] = (uint64_t)v48;
  if (v48) {
    atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Phase::JobManager::RunJobAsync(v8, v42);
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  uint64_t v40 = v47;
  float v41 = v48;
  if (v48) {
    atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *, double))(*(void *)v8 + 96))(v8, &v40, 0.0);
  if (v41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v41);
  }
  Phase::Controller::RegisterSpatializer(v46, a1, 1uLL);
  Phase::Controller::RegisterSpatializer(v45, a1, 2uLL);
  Phase::Controller::RegisterSpatializer((uint64_t)v51.__r_.__value_.__l.__data_, a1, 3uLL);
  *(void *)(a1 + 72) = 0;
  unint64_t SpatializerForConfig = Phase::Controller::SpatializerManager::GetSpatializerForConfig(0, *(_DWORD *)(a1 + 40), v6);
  Phase::Controller::SpatializerManager::SetActiveSpatializer((Phase::Controller::SpatializerManager *)a1, SpatializerForConfig);
  *(_DWORD *)(a1 + 40) = 0;
  if (*(void *)(a1 + 72) == 2) {
    unint64_t v32 = 2;
  }
  else {
    unint64_t v32 = 1;
  }
  active = (Phase::Logger *)Phase::Controller::SpatializerManager::SetActiveSpatializer((Phase::Controller::SpatializerManager *)a1, v32);
  char v34 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(active)
                                                                                      + 576)));
  if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v35 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(a1, *(void *)(a1 + 80), (void *)(a1 + 80))[3];
    uint64_t v38 = *(void *)(v35 + 72);
    uint64_t v36 = v35 + 72;
    uint64_t v37 = v38;
    if (*(char *)(v36 + 23) < 0) {
      uint64_t v36 = v37;
    }
    *(_DWORD *)__simd_float4 x = 136315650;
    *(void *)&__x[4] = "SpatializerManager.mm";
    *(_WORD *)&__x[12] = 1024;
    *(_DWORD *)&__x[14] = 268;
    *(_WORD *)&__x[18] = 2080;
    *(void *)&__x[20] = v36;
    _os_log_impl(&dword_221E5E000, v34, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Initializing default spatializer to %s", (uint8_t *)__x, 0x1Cu);
  }

  if (v48) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v48);
  }
  return a1;
}

void sub_22206C9E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  uint64_t v39 = *v36;
  if (*v36)
  {
    *(void *)(v35 + 56) = v39;
    operator delete(v39);
  }
  std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>>>::~__hash_table(v35);
  _Unwind_Resume(a1);
}

void Phase::Controller::SetupSpatializerInitJob<void (*)(Phase::Controller::Spatializer **,Phase::Controller::Spatializer::InitParameters const&),Phase::Controller::Spatializer::InitParameters>(uint64_t a1, uint64_t *a2, uint64_t a3, const std::string::value_type *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  std::string::basic_string[abi:ne180100]<0>(&v25, "SpatializerManager-init-");
  uint64_t v14 = std::string::append(&v25, a4);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  long long v16 = std::string::append(&v26, "-spatializer");
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  std::string::size_type v28 = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)int __p = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void **))(*(void *)a1 + 16))(&v29, a1, __p);
  if (SHIBYTE(v28) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  long long v18 = (std::__shared_weak_count *)a2[1];
  uint64_t v23 = *a2;
  uint64_t v24 = v18;
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v21 = v29;
  std::string::size_type v22 = v30;
  if (v30) {
    atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)a1 + 24))(a1, &v23, &v21);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  uint64_t v20 = v29;
  uint64_t v19 = v30;
  *(void *)(v29 + 256) = &unk_26D47A858;
  *(void *)(v20 + 264) = a5;
  *(void *)(v20 + 272) = a3;
  *(void *)(v20 + 280) = a6;
  *(void *)(v20 + 288) = a7;
  *(unsigned char *)(v20 + 38objc_destroyWeak(this + 3) = 1;
  atomic_store(1u, (unsigned __int8 *)(v20 + 40));
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
}

void sub_22206CD80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  char v34 = *(std::__shared_weak_count **)(v32 - 72);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Controller::SpatializerManager::SetSpatializerOutput(uint64_t a1, int a2, uint64_t a3)
{
  if (a3) {
    Phase::Controller::SpatializerManager::SetOutputChannelLayout(a1, a3);
  }
  *(_DWORD *)(a1 + 40) = a2;
  unint64_t SpatializerForConfig = Phase::Controller::SpatializerManager::GetSpatializerForConfig(*(void *)(a1 + 72), a2, (unsigned int **)(a1 + 48));
  return Phase::Controller::SpatializerManager::SetActiveSpatializer((Phase::Controller::SpatializerManager *)a1, SpatializerForConfig) ^ 1;
}

void Phase::Controller::SpatializerManager::~SpatializerManager(Phase::Controller::SpatializerManager *this)
{
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }

  std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>>>::~__hash_table((uint64_t)this);
}

uint64_t Phase::Controller::SpatializerManager::SetOutputChannelLayout(uint64_t a1, uint64_t a2)
{
  CFStringRef v4 = (void *)(a1 + 48);
  uint64_t result = Phase::ChannelLayout::AreLayoutsEqual((void *)a2, (uint64_t *)(a1 + 48));
  if ((result & 1) == 0)
  {
    if (v4 != (void *)a2) {
      std::vector<char>::__assign_with_size[abi:ne180100]<char *,char *>(v4, *(char **)a2, *(char **)(a2 + 8), *(void *)(a2 + 8) - *(void *)a2);
    }
    unint64_t v9 = 2;
    uint64_t v10 = &v9;
    CFURLRef v6 = (void *)std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(a1, &v9, (uint64_t)&std::piecewise_construct, &v10)[3];
    if (!Phase::ChannelLayout::AreLayoutsEqual(v6 + 3, (uint64_t *)a2)
      && (*(unsigned int (**)(void *, uint64_t))(*v6 + 32))(v6, a2)
      && *(void *)(a1 + 80) == 2
      && (uint64_t v7 = *(void *)(a1 + 88)) != 0)
    {
      uint64_t ActiveSpatializer = Phase::Controller::SpatializerManager::GetActiveSpatializer((Phase::Controller::SpatializerManager *)a1);
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 24))(v7, ActiveSpatializer);
    }
    else
    {
      return Phase::Controller::SpatializerManager::SetSpatializerOutput(a1, *(unsigned int *)(a1 + 40), a2);
    }
  }
  return result;
}

uint64_t Phase::Controller::SpatializerManager::SetActiveSpatializer(Phase::Controller::SpatializerManager *this, unint64_t a2)
{
  v35[19] = *MEMORY[0x263EF8340];
  uint64_t v2 = (unint64_t *)((char *)this + 80);
  if (*((void *)this + 10) == a2) {
    return 0;
  }
  char v5 = (Phase::Logger *)std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::find<PHASETapType>(this, a2);
  if (!v5)
  {
    long long v15 = (Phase::Logger *)std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)buf);
    for (uint64_t i = (void *)*((void *)this + 2); i; uint64_t i = (void *)*i)
    {
      std::ostream::operator<<();
      long long v15 = (Phase::Logger *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32[2], (uint64_t)", ", 2);
    }
    long long v17 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v15)
                                                                                        + 576)));
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      std::stringbuf::str();
      long long v18 = v21 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)std::string::size_type v22 = 136315906;
      uint64_t v23 = "SpatializerManager.mm";
      __int16 v24 = 1024;
      int v25 = 500;
      __int16 v26 = 2048;
      unint64_t v27 = a2;
      __int16 v28 = 2080;
      uint64_t v29 = v18;
      _os_log_impl(&dword_221E5E000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to switch spatializer to %llu - Spatializer map contains [%s]", v22, 0x26u);
      if (v21 < 0) {
        operator delete(__p);
      }
    }

    *(void *)buf = *MEMORY[0x263F8C2B8];
    uint64_t v19 = *(void *)(MEMORY[0x263F8C2B8] + 72);
    *(void *)&buf[*(void *)(*(void *)buf - 24)] = *(void *)(MEMORY[0x263F8C2B8] + 64);
    *(void *)&void v32[2] = v19;
    *(void *)&v32[10] = MEMORY[0x263F8C318] + 16;
    if (v34 < 0) {
      operator delete(v33);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x223C937D0](v35);
    return 0;
  }
  *uint64_t v2 = a2;
  CFURLRef v6 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v5)
                                                                                     + 576)));
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)this, *((void *)this + 10), v2)[3];
    uint64_t v10 = *(void *)(v7 + 72);
    uint64_t v8 = v7 + 72;
    uint64_t v9 = v10;
    if (*(char *)(v8 + 23) < 0) {
      uint64_t v8 = v9;
    }
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "SpatializerManager.mm";
    __int16 v31 = 1024;
    *(_DWORD *)uint64_t v32 = 507;
    *(_WORD *)&v32[4] = 2080;
    *(void *)&v32[6] = v8;
    _os_log_impl(&dword_221E5E000, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Switching spatializer to %s", buf, 0x1Cu);
  }

  uint64_t v11 = CAGetDeviceOrientation();
  Phase::Controller::SpatializerManager::SetDeviceOrientation(this, v11);
  uint64_t ActiveSpatializer = (void *)Phase::Controller::SpatializerManager::GetActiveSpatializer(this);
  if (!Phase::ChannelLayout::AreLayoutsEqual(ActiveSpatializer + 3, (uint64_t *)this + 6)) {
    (*(void (**)(void *, char *))(*ActiveSpatializer + 32))(ActiveSpatializer, (char *)this + 48);
  }
  uint64_t v13 = *((void *)this + 11);
  if (v13) {
    (*(void (**)(uint64_t, void *))(*(void *)v13 + 24))(v13, ActiveSpatializer);
  }
  return 1;
}

void sub_22206D398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::SpatializerManager::GetSpatializerForConfig(uint64_t result, int a2, unsigned int **a3)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (result != 2)
  {
    if (!a2) {
      return 1;
    }
    uint64_t v5 = result;
    if (a2 != 2)
    {
      if (a2 == 1) {
        return 3;
      }
      uint64_t v9 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance((Phase::Logger *)result)
                                                                                         + 576)));
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        Phase::ChannelLayout::GetStringDescription(a3);
        if (v15 >= 0) {
          uint64_t v10 = __p;
        }
        else {
          uint64_t v10 = (void **)__p[0];
        }
        *(_DWORD *)buf = 136316162;
        long long v17 = "SpatializerManager.mm";
        __int16 v18 = 1024;
        int v19 = 473;
        __int16 v20 = 2048;
        char v21 = (void **)v5;
        __int16 v22 = 1024;
        int v23 = a2;
        __int16 v24 = 2080;
        int v25 = v10;
        _os_log_impl(&dword_221E5E000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d Invalid spatializer configuration: mode %lu, output type %i, channel layout %s", buf, 0x2Cu);
        if (v15 < 0) {
          operator delete(__p[0]);
        }
      }

      return 1;
    }
    if (result == 1)
    {
      CFURLRef v6 = *a3;
      unsigned int v7 = **a3;
      if (v7 == 0x10000)
      {
        uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v6[1]);
        v11.i16[0] = vaddlv_u8(v11);
        __int32 v8 = v11.i32[0];
      }
      else if (v7)
      {
        __int32 v8 = (unsigned __int16)**a3;
      }
      else
      {
        __int32 v8 = v6[2];
      }
      if (v8 == 2) {
        return 1;
      }
      __int16 v12 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance((Phase::Logger *)1)
                                                                                          + 576)));
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        Phase::ChannelLayout::GetStringDescription(a3);
        uint64_t v13 = v15 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136315650;
        long long v17 = "SpatializerManager.mm";
        __int16 v18 = 1024;
        int v19 = 459;
        __int16 v20 = 2080;
        char v21 = v13;
        _os_log_impl(&dword_221E5E000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d Ignoring spatialization mode (always binaural) because the output channel layout does not support it: %s", buf, 0x1Cu);
        if (v15 < 0) {
          operator delete(__p[0]);
        }
      }
    }
    return 2;
  }
  return result;
}

void sub_22206D634(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::SpatializerManager::GetActiveSpatializer(Phase::Controller::SpatializerManager *this)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  unint64_t v1 = *((void *)this + 10);
  if (!v1)
  {
    CFStringRef v4 = **(id **)(Phase::Logger::GetInstance(this) + 576);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v6 = 136315394;
      unsigned int v7 = "SpatializerManager.mm";
      __int16 v8 = 1024;
      int v9 = 483;
      _os_log_impl(&dword_221E5E000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: kSpatializer_None != mActiveSpatializer is false.", (uint8_t *)&v6, 0x12u);
    }
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "PRECONDITION: kSpatializer_None != mActiveSpatializer is false.");
  }
  uint64_t v2 = std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::find<PHASETapType>(this, v1);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return v2[3];
}

void sub_22206D768(_Unwind_Exception *exception_object)
{
}

uint64_t Phase::Controller::SpatializerManager::SetHeadphoneHRIR(Phase::Controller::SpatializerManager *this, NSURL *a2)
{
  uint64_t v3 = a2;
  unint64_t v23 = 1;
  CFTypeRef cf = &v23;
  uint64_t v4 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>((uint64_t)this, &v23, (uint64_t)&std::piecewise_construct, (void **)&cf)[3];
  IR::getPresetDataAttributes();
  int v19 = 0;
  float v5 = *(double *)(v4 + 8);
  float v18 = v5;
  if (!v3) {
    goto LABEL_7;
  }
  if ([(NSURL *)v3 isFileURL])
  {
    id v16 = 0;
    BOOL v6 = [(NSURL *)v3 checkResourceIsReachableAndReturnError:&v16];
    id v7 = v16;
    if (v6)
    {
      __int16 v8 = [(NSURL *)v3 fileSystemRepresentation];
      CFIndex v9 = strlen(v8);
      uint64_t v10 = CFURLCreateWithBytes(0, (const UInt8 *)v8, v9, 0, 0);
      if (!v10)
      {
        exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
      }
      CFTypeRef v11 = cf;
      CFTypeRef cf = v10;
      if (!v11)
      {
        uint64_t v12 = *(void *)(v4 + 8);
        uint64_t v13 = *(void *)(v4 + 16);
LABEL_8:
        CFRetain(v10);
LABEL_9:
        if (v20) {
          CFRetain(v20);
        }
        if (v21) {
          CFRetain(v21);
        }
        if (v22) {
          CFRetain(v22);
        }
        Phase::Controller::Spatializer::Create<Phase::Controller::BinauralSpatializer,Phase::Controller::Spatializer::InitParameters,IR::IRDataAttributes,BOOL>(v12, v13);
      }
      CFRelease(v11);
LABEL_7:
      uint64_t v10 = cf;
      uint64_t v12 = *(void *)(v4 + 8);
      uint64_t v13 = *(void *)(v4 + 16);
      if (!cf) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
  }
  else
  {
    id v7 = 0;
  }
  if (v22) {
    CFRelease(v22);
  }
  if (v21) {
    CFRelease(v21);
  }
  if (v20) {
    CFRelease(v20);
  }
  if (cf) {
    CFRelease(cf);
  }

  return 2;
}

void sub_22206DAB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  IR::IRDataAttributes::~IRDataAttributes((IR::IRDataAttributes *)&a30);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::SpatializerManager::SetDeviceOrientation(Phase::Controller::SpatializerManager *a1, uint64_t a2)
{
  uint64_t ActiveSpatializer = Phase::Controller::SpatializerManager::GetActiveSpatializer(a1);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)ActiveSpatializer + 24))(ActiveSpatializer, a2);
  if (result)
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      uint64_t v7 = Phase::Controller::SpatializerManager::GetActiveSpatializer(a1);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 24))(v6, v7);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t Phase::Controller::SpatializerManager::Update(Phase::Controller::SpatializerManager *this, double a2)
{
  uint64_t ActiveSpatializer = (Phase::Controller::Spatializer *)Phase::Controller::SpatializerManager::GetActiveSpatializer(this);
  v5.n128_f64[0] = a2;
  Phase::Controller::Spatializer::Update(ActiveSpatializer, v5);
  uint64_t result = (*(uint64_t (**)(void *))(**((void **)ActiveSpatializer + 6) + 104))(*((void **)ActiveSpatializer
                                                                                                + 6));
  if (result)
  {
    uint64_t v7 = *(uint64_t (**)(void))(**((void **)this + 11) + 24);
    return v7();
  }
  return result;
}

void *std::vector<char>::__assign_with_size[abi:ne180100]<char *,char *>(void *result, char *__src, char *a3, unint64_t a4)
{
  uint64_t v7 = result;
  unint64_t v8 = result[2];
  CFIndex v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      unint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0) {
      std::vector<char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = 2 * v8;
    if (2 * v8 <= a4) {
      uint64_t v10 = a4;
    }
    if (v8 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v10;
    }
    uint64_t result = std::vector<char>::__vallocate[abi:ne180100](v7, v11);
    CFIndex v9 = (char *)v7[1];
    goto LABEL_17;
  }
  uint64_t v12 = (unsigned char *)result[1];
  size_t v13 = v12 - v9;
  if (v12 - v9 >= a4)
  {
LABEL_17:
    size_t v16 = a3 - __src;
    if (v16) {
      uint64_t result = memmove(v9, __src, v16);
    }
    char v15 = &v9[v16];
    goto LABEL_20;
  }
  uint64_t v14 = &__src[v13];
  if (v12 != v9)
  {
    uint64_t result = memmove((void *)*result, __src, v13);
    CFIndex v9 = (char *)v7[1];
  }
  if (a3 != v14) {
    uint64_t result = memmove(v9, v14, a3 - v14);
  }
  char v15 = &v9[a3 - v14];
LABEL_20:
  v7[1] = v15;
  return result;
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    CFIndex v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  *uint64_t i = 0;
  i[1] = a2;
  i[2] = *a3;
  i[3] = 0;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
      else {
        unint64_t v3 = a2;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
  }
  uint64_t v18 = *(void *)a1;
  int v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *uint64_t i = *v19;
LABEL_38:
    void *v19 = i;
    goto LABEL_39;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v18 + 8 * vobjc_destroyWeak(this + 3) = a1 + 16;
  if (*i)
  {
    unint64_t v20 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    int v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_22206DFA0(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>,void *>>>::operator()[abi:ne180100](char a1, void *__p)
{
  if (a1)
  {
    uint64_t v3 = __p[3];
    __p[3] = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>>>::__deallocate_node(int a1, void *__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      uint64_t v3 = (void *)*v2;
      uint64_t v4 = v2[3];
      v2[3] = 0;
      if (v4) {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void Phase::Command<128>::Invoker<void (*)(Phase::Controller::Spatializer **,Phase::Controller::Spatializer::InitParameters const&,BOOL),void,Phase::Controller::Spatializer **,Phase::Controller::Spatializer::InitParameters,BOOL>::~Invoker()
{
}

uint64_t Phase::Command<128>::Invoker<void (*)(Phase::Controller::Spatializer **,Phase::Controller::Spatializer::InitParameters const&,BOOL),void,Phase::Controller::Spatializer **,Phase::Controller::Spatializer::InitParameters,BOOL>::Call(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t, void))(a1 + 8))(*(void *)(a1 + 16), a1 + 24, *(unsigned __int8 *)(a1 + 40));
}

void Phase::Command<128>::Invoker<void (*)(Phase::Controller::Spatializer **,Phase::Controller::Spatializer::InitParameters const&),void,Phase::Controller::Spatializer **,Phase::Controller::Spatializer::InitParameters>::~Invoker()
{
}

uint64_t Phase::Command<128>::Invoker<void (*)(Phase::Controller::Spatializer **,Phase::Controller::Spatializer::InitParameters const&),void,Phase::Controller::Spatializer **,Phase::Controller::Spatializer::InitParameters>::Call(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(a1 + 8))(*(void *)(a1 + 16), a1 + 24);
}

void *Phase::Command<128>::Invoker<void (*)(Phase::Controller::Spatializer **,Phase::Controller::Spatializer::InitParameters const&,CA::ChannelLayout const&),void,Phase::Controller::Spatializer **,Phase::Controller::Spatializer::InitParameters,CA::ChannelLayout>::~Invoker(void *a1)
{
  *a1 = &unk_26D47A880;
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  return a1;
}

void Phase::Command<128>::Invoker<void (*)(Phase::Controller::Spatializer **,Phase::Controller::Spatializer::InitParameters const&,CA::ChannelLayout const&),void,Phase::Controller::Spatializer **,Phase::Controller::Spatializer::InitParameters,CA::ChannelLayout>::~Invoker(void *a1)
{
  *a1 = &unk_26D47A880;
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x223C938A0);
}

uint64_t Phase::Command<128>::Invoker<void (*)(Phase::Controller::Spatializer **,Phase::Controller::Spatializer::InitParameters const&,CA::ChannelLayout const&),void,Phase::Controller::Spatializer **,Phase::Controller::Spatializer::InitParameters,CA::ChannelLayout>::Call(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(a1 + 8))(*(void *)(a1 + 16), a1 + 24, a1 + 40);
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  *uint64_t i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  unint64_t v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *uint64_t i = *v20;
LABEL_38:
    void *v20 = i;
    goto LABEL_39;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v21 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    unint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_22206E414(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::Spatializer>>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

const char *Phase::SpatialModeler::SystemErrorCategory::name(Phase::SpatialModeler::SystemErrorCategory *this)
{
  return "Phase Spatial Model Scheduler Error";
}

void *Phase::SpatialModeler::SystemErrorCategory::message@<X0>(int a1@<W1>, void *a2@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a2, (&off_2645F7BE0)[a1 - 1]);
}

uint64_t Phase::SpatialModeler::ModelerErrorMessage@<X0>(int a1@<W0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4 = (char *)a3;
  switch(a1)
  {
    case 2:
      if (*((char *)a2 + 23) >= 0) {
        size_t v5 = *((unsigned __int8 *)a2 + 23);
      }
      else {
        size_t v5 = (size_t)a2[1];
      }
      uint64_t result = std::string::basic_string[abi:ne180100](a3, v5 + 47);
      if (v4[23] < 0) {
        unint64_t v4 = *(char **)v4;
      }
      if (v5)
      {
        if (*((char *)a2 + 23) >= 0) {
          unint64_t v7 = a2;
        }
        else {
          unint64_t v7 = *a2;
        }
        uint64_t result = (uint64_t)memmove(v4, v7, v5);
      }
      qmemcpy(&v4[v5], "Modeler Error: Query has an invalid Query Index", 47);
      unint64_t v8 = &v4[v5 + 47];
      break;
    case 3:
      if (*((char *)a2 + 23) >= 0) {
        size_t v11 = *((unsigned __int8 *)a2 + 23);
      }
      else {
        size_t v11 = (size_t)a2[1];
      }
      uint64_t result = std::string::basic_string[abi:ne180100](a3, v11 + 96);
      if (v4[23] < 0) {
        unint64_t v4 = *(char **)v4;
      }
      if (v11)
      {
        if (*((char *)a2 + 23) >= 0) {
          unint64_t v12 = a2;
        }
        else {
          unint64_t v12 = *a2;
        }
        uint64_t result = (uint64_t)memmove(v4, v12, v11);
      }
      qmemcpy(&v4[v11], "Modeler Error: Query has an invalid QueryInput. It either doesn't exist, or it's the wrong type.", 96);
      unint64_t v8 = &v4[v11 + 96];
      break;
    case 4:
      if (*((char *)a2 + 23) >= 0) {
        size_t v13 = *((unsigned __int8 *)a2 + 23);
      }
      else {
        size_t v13 = (size_t)a2[1];
      }
      uint64_t result = std::string::basic_string[abi:ne180100](a3, v13 + 97);
      if (v4[23] < 0) {
        unint64_t v4 = *(char **)v4;
      }
      if (v13)
      {
        if (*((char *)a2 + 23) >= 0) {
          float v14 = a2;
        }
        else {
          float v14 = *a2;
        }
        uint64_t result = (uint64_t)memmove(v4, v14, v13);
      }
      qmemcpy(&v4[v13], "Modeler Error: Query has an invalid QueryOutput. It either doesn't exist, or it's the wrong type.", 97);
      unint64_t v8 = &v4[v13 + 97];
      break;
    case 5:
      if (*((char *)a2 + 23) >= 0) {
        size_t v15 = *((unsigned __int8 *)a2 + 23);
      }
      else {
        size_t v15 = (size_t)a2[1];
      }
      uint64_t result = std::string::basic_string[abi:ne180100](a3, v15 + 58);
      if (v4[23] < 0) {
        unint64_t v4 = *(char **)v4;
      }
      if (v15)
      {
        if (*((char *)a2 + 23) >= 0) {
          unint64_t v16 = a2;
        }
        else {
          unint64_t v16 = *a2;
        }
        uint64_t result = (uint64_t)memmove(v4, v16, v15);
      }
      qmemcpy(&v4[v15], "Modeler Error: Query has an invalid Geometry System State.", 58);
      unint64_t v8 = &v4[v15 + 58];
      break;
    case 6:
      if (*((char *)a2 + 23) >= 0) {
        size_t v17 = *((unsigned __int8 *)a2 + 23);
      }
      else {
        size_t v17 = (size_t)a2[1];
      }
      uint64_t result = std::string::basic_string[abi:ne180100](a3, v17 + 137);
      if (v4[23] < 0) {
        unint64_t v4 = *(char **)v4;
      }
      if (v17)
      {
        if (*((char *)a2 + 23) >= 0) {
          size_t v18 = a2;
        }
        else {
          size_t v18 = *a2;
        }
        uint64_t result = (uint64_t)memmove(v4, v18, v17);
      }
      uint64_t v19 = &v4[v17];
      qmemcpy(&v4[v17 + 32], "lid Source. It either doesn't exist, or we couldn't find the Source Entity with the Source Entity Handle.", 105);
      long long v21 = *(_OWORD *)"Modeler Error: Query has an invalid Source. It either doesn't exist, or we couldn't find the Sour"
                       "ce Entity with the Source Entity Handle.";
      long long v20 = *(_OWORD *)"uery has an invalid Source. It either doesn't exist, or we couldn't find the Source Entity with the Source Entity Handle.";
      unint64_t v8 = &v4[v17 + 137];
      goto LABEL_79;
    case 7:
      if (*((char *)a2 + 23) >= 0) {
        size_t v22 = *((unsigned __int8 *)a2 + 23);
      }
      else {
        size_t v22 = (size_t)a2[1];
      }
      uint64_t result = std::string::basic_string[abi:ne180100](a3, v22 + 143);
      if (v4[23] < 0) {
        unint64_t v4 = *(char **)v4;
      }
      if (v22)
      {
        if (*((char *)a2 + 23) >= 0) {
          unint64_t v23 = a2;
        }
        else {
          unint64_t v23 = *a2;
        }
        uint64_t result = (uint64_t)memmove(v4, v23, v22);
      }
      uint64_t v19 = &v4[v22];
      qmemcpy(&v4[v22 + 32], "lid Listener. It either doesn't exist, or we couldn't find the Listener Entity with the Listener Entity Handle.", 111);
      long long v21 = *(_OWORD *)"Modeler Error: Query has an invalid Listener. It either doesn't exist, or we couldn't find the Li"
                       "stener Entity with the Listener Entity Handle.";
      long long v20 = *(_OWORD *)"uery has an invalid Listener. It either doesn't exist, or we couldn't find the Listener Entity with the Listener Entity Handle.";
      unint64_t v8 = &v4[v22 + 143];
LABEL_79:
      *(_OWORD *)uint64_t v19 = v21;
      *((_OWORD *)v19 + 1) = v20;
      break;
    default:
      if (*((char *)a2 + 23) >= 0) {
        size_t v9 = *((unsigned __int8 *)a2 + 23);
      }
      else {
        size_t v9 = (size_t)a2[1];
      }
      uint64_t result = std::string::basic_string[abi:ne180100](a3, v9 + 35);
      if (v4[23] < 0) {
        unint64_t v4 = *(char **)v4;
      }
      if (v9)
      {
        if (*((char *)a2 + 23) >= 0) {
          uint64_t v10 = a2;
        }
        else {
          uint64_t v10 = *a2;
        }
        uint64_t result = (uint64_t)memmove(v4, v10, v9);
      }
      qmemcpy(&v4[v9], "Modeler Error: <unrecognized error>", 35);
      unint64_t v8 = &v4[v9 + 35];
      break;
  }
  char *v8 = 0;
  return result;
}

void Phase::SpatialModeler::SystemErrorCategory::~SystemErrorCategory(std::error_category *this)
{
  std::error_category::~error_category(this);

  JUMPOUT(0x223C938A0);
}

void Phase::SpatialModeler::GetOptionalPropertyDescriptions(void *a1@<X8>)
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  v16[23] = 13;
  strcpy(v16, "DistanceModel");
  int v17 = 1;
  char v18 = 1;
  v20[0] = 0;
  v20[1] = 0;
  uint64_t v19 = 0;
  long long v21 = (char *)operator new(0x20uLL);
  long long v22 = xmmword_2220E8390;
  strcpy(v21, "ListenerDirectivityModel");
  int v23 = 2;
  char v24 = 1;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v25 = 0;
  strcpy(v28, "SourceDirectivityModel");
  v28[23] = 22;
  int v29 = 3;
  char v30 = 1;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  v34[23] = 21;
  strcpy(v34, "ListenerDopplerFactor");
  int v35 = 4;
  char v36 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  uint64_t v37 = 0;
  v40[23] = 19;
  strcpy(v40, "SourceDopplerFactor");
  int v41 = 5;
  char v42 = 0;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  v46[23] = 10;
  uint64_t v45 = 0;
  strcpy(v46, "UpdateRate");
  int v47 = 6;
  char v48 = 0;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  v52[23] = 14;
  uint64_t v51 = 0;
  strcpy(v52, "ResponseLength");
  int v53 = 7;
  char v54 = 0;
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  uint64_t v57 = 0;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v3 = (char *)operator new(0x188uLL);
  uint64_t v4 = 0;
  *a1 = v3;
  a1[1] = v3;
  a1[2] = v3 + 392;
  float v14 = v3;
  size_t v15 = v3;
  size_t v11 = a1 + 2;
  v12[0] = &v14;
  v12[1] = &v15;
  size_t v5 = v3;
  char v13 = 0;
  do
  {
    uint64_t v6 = &v16[v4 * 8];
    if (v16[v4 * 8 + 23] < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v5, *(const std::string::value_type **)v6, *((void *)v6 + 1));
      unint64_t v8 = v15;
    }
    else
    {
      long long v7 = *(_OWORD *)v6;
      *((void *)v5 + 2) = *((void *)v6 + 2);
      *(_OWORD *)size_t v5 = v7;
      unint64_t v8 = v5;
    }
    long long v9 = *(_OWORD *)&v16[v4 * 8 + 24];
    *(_OWORD *)(v5 + 40) = *(_OWORD *)&v20[v4];
    *(_OWORD *)(v5 + 24) = v9;
    size_t v5 = v8 + 56;
    size_t v15 = v8 + 56;
    v4 += 7;
  }
  while (v4 != 49);
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Phase::SpatialModeler::OptionalPropertyDescription>,Phase::SpatialModeler::OptionalPropertyDescription*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&v11);
  a1[1] = v5;
  uint64_t v10 = 49;
  do
  {
    if (SHIBYTE(v12[v10]) < 0) {
      operator delete(*(void **)&v16[v10 * 8 - 56]);
    }
    v10 -= 7;
  }
  while (v10 * 8);
}

void sub_22206EB74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::vector<Phase::SpatialModeler::OptionalPropertyDescription>::__destroy_vector::operator()[abi:ne180100](&a9);
  uint64_t v16 = 392;
  while (1)
  {
    if (*(&a15 + v16) < 0) {
      operator delete(*(void **)((char *)&a10 + v16));
    }
    v16 -= 56;
    if (!v16) {
      _Unwind_Resume(a1);
    }
  }
}

void Phase::SpatialModeler::PriorityQueue::~PriorityQueue(atomic_ullong *this)
{
}

void Phase::SortedCommandQueue<Phase::SpatialModeler::PriorityQueue,Phase::SpatialModeler::PriorityQueueCommandType,std::variant<std::monostate,Phase::SpatialModeler::PriorityQueueEntry,Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueClusterIndexUpdate,Phase::SpatialModeler::PriorityQueueGlobals>>::Commit()
{
}

void Phase::SortedCommandQueue<Phase::SpatialModeler::PriorityQueue,Phase::SpatialModeler::PriorityQueueCommandType,std::variant<std::monostate,Phase::SpatialModeler::PriorityQueueEntry,Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueClusterIndexUpdate,Phase::SpatialModeler::PriorityQueueGlobals>>::AddCommand<Phase::SpatialModeler::PriorityQueueEntry>()
{
}

void Phase::SortedCommandQueue<Phase::SpatialModeler::PriorityQueue,Phase::SpatialModeler::PriorityQueueCommandType,std::variant<std::monostate,Phase::SpatialModeler::PriorityQueueEntry,Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueClusterIndexUpdate,Phase::SpatialModeler::PriorityQueueGlobals>>::AddCommand<Phase::UniqueObjectId>()
{
}

void *Phase::SpatialModeler::PriorityQueue::ClearEntries(Phase::SpatialModeler::PriorityQueue *this, int a2)
{
  if (a2)
  {
    if (*((void *)this + 22))
    {
      for (uint64_t i = (void *)*((void *)this + 7); i; uint64_t i = (void *)*i)
      {
        uint64_t v4 = *((void *)this + 22);
        if (!v4) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, void *))(*(void *)v4 + 48))(v4, i + 4);
      }
    }
  }

  return std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear((void *)this + 5);
}

atomic_ullong *Phase::SortedCommandQueue<Phase::SpatialModeler::PriorityQueue,Phase::SpatialModeler::PriorityQueueCommandType,std::variant<std::monostate,Phase::SpatialModeler::PriorityQueueEntry,Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueClusterIndexUpdate,Phase::SpatialModeler::PriorityQueueGlobals>>::ClearCommands(atomic_ullong *result)
{
  unint64_t v1 = atomic_exchange(result, 0);
  if (v1)
  {
    do
    {
      unint64_t v2 = *(void *)(v1 + 88);
      Phase::SortedCommandQueue<Phase::SpatialModeler::PriorityQueue,Phase::SpatialModeler::PriorityQueueCommandType,std::variant<std::monostate,Phase::SpatialModeler::PriorityQueueEntry,Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueClusterIndexUpdate,Phase::SpatialModeler::PriorityQueueGlobals>>::CommandBatch::Clear((void *)(v1 + 80));
      uint64_t result = (atomic_ullong *)MEMORY[0x223C938A0](v1, 0x1020C40994B1BD2);
      unint64_t v1 = v2;
    }
    while (v2);
  }
  return result;
}

uint64_t Phase::SortedCommandQueue<Phase::SpatialModeler::PriorityQueue,Phase::SpatialModeler::PriorityQueueCommandType,std::variant<std::monostate,Phase::SpatialModeler::PriorityQueueEntry,Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueClusterIndexUpdate,Phase::SpatialModeler::PriorityQueueGlobals>>::ExecuteCommands(atomic_ullong *a1)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  uint64_t v5 = 0;
  memset(v4, 0, sizeof(v4));
  Phase::SortedCommandQueue<Phase::SpatialModeler::PriorityQueue,Phase::SpatialModeler::PriorityQueueCommandType,std::variant<std::monostate,Phase::SpatialModeler::PriorityQueueEntry,Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueClusterIndexUpdate,Phase::SpatialModeler::PriorityQueueGlobals>>::SortCommandList((uint64_t)a1, (unsigned int *)atomic_exchange(a1, 0), (uint64_t)v4);
  if (*(void *)&v4[0]) {
    std::terminate();
  }
  for (uint64_t i = 8; i != 40; i += 8)
    uint64_t result = (*(uint64_t (**)(atomic_ullong, void))(a1[2] + i))(a1[1], *(void *)((char *)v4 + i));
  return result;
}

uint64_t Phase::SpatialModeler::PriorityQueue::ExecuteAdd(uint64_t result, uint64_t a2)
{
  uint64_t v48 = result;
  if (a2)
  {
    uint64_t v3 = a2;
    uint64_t v4 = (void *)(result + 40);
    int v47 = (void *)(result + 56);
    while (1)
    {
      uint64_t v5 = v3;
      uint64_t v3 = *(void *)(v3 + 88);
      if (*(_DWORD *)(v5 + 72) != 1) {
        std::__throw_bad_variant_access[abi:ne180100]();
      }
      uint64_t v6 = (long long *)(v5 + 8);
      long long v7 = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>(v4, (void *)(v5 + 8));
      *(void *)(v5 + 64) = 0;
      if (!v7) {
        break;
      }
      *(_OWORD *)(v5 + 32) = *(_OWORD *)(v7 + 7);
      *(void *)(v5 + 48) = v7[9];
      *(unsigned char *)(v5 + 56) = *((unsigned char *)v7 + 80);
      long long v8 = *v6;
      long long v9 = *(_OWORD *)(v5 + 24);
      long long v10 = *(_OWORD *)(v5 + 56);
      *((_OWORD *)v7 + 4) = *(_OWORD *)(v5 + 40);
      *((_OWORD *)v7 + std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear(this + 5) = v10;
      *((_OWORD *)v7 + 2) = v8;
      *((_OWORD *)v7 + objc_destroyWeak(this + 3) = v9;
LABEL_84:
      Phase::SortedCommandQueue<Phase::SpatialModeler::PriorityQueue,Phase::SpatialModeler::PriorityQueueCommandType,std::variant<std::monostate,Phase::SpatialModeler::PriorityQueueEntry,Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueClusterIndexUpdate,Phase::SpatialModeler::PriorityQueueGlobals>>::CommandBatch::Clear((void *)(v5 + 80));
      uint64_t result = MEMORY[0x223C938A0](v5, 0x1020C40994B1BD2);
      if (!v3) {
        return result;
      }
    }
    uint64_t v11 = 0;
    long long v12 = *(_OWORD *)(v5 + 24);
    long long v49 = *v6;
    long long v50 = v49;
    long long v51 = v12;
    long long v13 = *(_OWORD *)(v5 + 56);
    long long v52 = *(_OWORD *)(v5 + 40);
    long long v53 = v13;
    unint64_t v14 = 0xCBF29CE484222325;
    do
      unint64_t v14 = 0x100000001B3 * (v14 ^ *((char *)&v49 + v11++));
    while (v11 != 16);
    unint64_t v15 = *(void *)(v48 + 48);
    if (v15)
    {
      uint8x8_t v16 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
      v16.i16[0] = vaddlv_u8(v16);
      if (v16.u32[0] > 1uLL)
      {
        unint64_t v2 = v14;
        if (v14 >= v15) {
          unint64_t v2 = v14 % v15;
        }
      }
      else
      {
        unint64_t v2 = (v15 - 1) & v14;
      }
      int v17 = *(void **)(*v4 + 8 * v2);
      if (v17)
      {
        for (uint64_t i = (void *)*v17; i; uint64_t i = (void *)*i)
        {
          unint64_t v19 = i[1];
          if (v19 == v14)
          {
            if (i[2] == (void)v49 && i[3] == *((void *)&v49 + 1)) {
              goto LABEL_84;
            }
          }
          else
          {
            if (v16.u32[0] > 1uLL)
            {
              if (v19 >= v15) {
                v19 %= v15;
              }
            }
            else
            {
              v19 &= v15 - 1;
            }
            if (v19 != v2) {
              break;
            }
          }
        }
      }
    }
    long long v21 = operator new(0x60uLL);
    *long long v21 = 0;
    v21[1] = v14;
    long long v22 = v50;
    long long v23 = v51;
    *((_OWORD *)v21 + 1) = v49;
    *((_OWORD *)v21 + 2) = v22;
    long long v24 = v52;
    long long v25 = v53;
    *((_OWORD *)v21 + objc_destroyWeak(this + 3) = v23;
    *((_OWORD *)v21 + 4) = v24;
    *((_OWORD *)v21 + std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear(this + 5) = v25;
    float v26 = (float)(unint64_t)(*(void *)(v48 + 64) + 1);
    float v27 = *(float *)(v48 + 72);
    if (v15 && (float)(v27 * (float)v15) >= v26)
    {
LABEL_74:
      uint64_t v43 = (void *)*v4;
      uint64_t v44 = *(void **)(*v4 + 8 * v2);
      if (v44)
      {
        *long long v21 = *v44;
      }
      else
      {
        *long long v21 = *v47;
        *int v47 = v21;
        v43[v2] = v47;
        if (!*v21)
        {
LABEL_83:
          ++*(void *)(v48 + 64);
          goto LABEL_84;
        }
        unint64_t v45 = *(void *)(*v21 + 8);
        if ((v15 & (v15 - 1)) != 0)
        {
          if (v45 >= v15) {
            v45 %= v15;
          }
        }
        else
        {
          v45 &= v15 - 1;
        }
        uint64_t v44 = (void *)(*v4 + 8 * v45);
      }
      *uint64_t v44 = v21;
      goto LABEL_83;
    }
    BOOL v28 = (v15 & (v15 - 1)) != 0;
    if (v15 < 3) {
      BOOL v28 = 1;
    }
    unint64_t v29 = v28 | (2 * v15);
    unint64_t v30 = vcvtps_u32_f32(v26 / v27);
    if (v29 <= v30) {
      int8x8_t prime = (int8x8_t)v30;
    }
    else {
      int8x8_t prime = (int8x8_t)v29;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v15 = *(void *)(v48 + 48);
    }
    if (*(void *)&prime > v15) {
      goto LABEL_40;
    }
    if (*(void *)&prime < v15)
    {
      unint64_t v38 = vcvtps_u32_f32((float)*(unint64_t *)(v48 + 64) / *(float *)(v48 + 72));
      if (v15 < 3 || (uint8x8_t v39 = (uint8x8_t)vcnt_s8((int8x8_t)v15), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
      {
        unint64_t v38 = std::__next_prime(v38);
      }
      else
      {
        uint64_t v40 = 1 << -(char)__clz(v38 - 1);
        if (v38 >= 2) {
          unint64_t v38 = v40;
        }
      }
      if (*(void *)&prime <= v38) {
        int8x8_t prime = (int8x8_t)v38;
      }
      if (*(void *)&prime >= v15)
      {
        unint64_t v15 = *(void *)(v48 + 48);
      }
      else
      {
        if (prime)
        {
LABEL_40:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v32 = operator new(8 * *(void *)&prime);
          uint64_t v33 = (void *)*v4;
          void *v4 = v32;
          if (v33) {
            operator delete(v33);
          }
          uint64_t v34 = 0;
          *(int8x8_t *)(v48 + 48) = prime;
          do
            *(void *)(*v4 + 8 * v34++) = 0;
          while (*(void *)&prime != v34);
          int v35 = (void *)*v47;
          if (*v47)
          {
            unint64_t v36 = v35[1];
            uint8x8_t v37 = (uint8x8_t)vcnt_s8(prime);
            v37.i16[0] = vaddlv_u8(v37);
            if (v37.u32[0] > 1uLL)
            {
              if (v36 >= *(void *)&prime) {
                v36 %= *(void *)&prime;
              }
            }
            else
            {
              v36 &= *(void *)&prime - 1;
            }
            *(void *)(*v4 + 8 * v36) = v47;
            int v41 = (void *)*v35;
            if (*v35)
            {
              do
              {
                unint64_t v42 = v41[1];
                if (v37.u32[0] > 1uLL)
                {
                  if (v42 >= *(void *)&prime) {
                    v42 %= *(void *)&prime;
                  }
                }
                else
                {
                  v42 &= *(void *)&prime - 1;
                }
                if (v42 != v36)
                {
                  if (!*(void *)(*v4 + 8 * v42))
                  {
                    *(void *)(*v4 + 8 * v42) = v35;
                    goto LABEL_65;
                  }
                  *int v35 = *v41;
                  void *v41 = **(void **)(*v4 + 8 * v42);
                  **(void **)(*v4 + 8 * v42) = v41;
                  int v41 = v35;
                }
                unint64_t v42 = v36;
LABEL_65:
                int v35 = v41;
                int v41 = (void *)*v41;
                unint64_t v36 = v42;
              }
              while (v41);
            }
          }
          unint64_t v15 = (unint64_t)prime;
          goto LABEL_69;
        }
        uint64_t v46 = (void *)*v4;
        void *v4 = 0;
        if (v46) {
          operator delete(v46);
        }
        unint64_t v15 = 0;
        *(void *)(v48 + 48) = 0;
      }
    }
LABEL_69:
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v14 >= v15) {
        unint64_t v2 = v14 % v15;
      }
      else {
        unint64_t v2 = v14;
      }
    }
    else
    {
      unint64_t v2 = (v15 - 1) & v14;
    }
    goto LABEL_74;
  }
  return result;
}

uint64_t Phase::SpatialModeler::PriorityQueue::ExecuteRemove(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    uint64_t v3 = result;
    uint64_t v4 = (void *)(result + 40);
    do
    {
      uint64_t v5 = v2;
      uint64_t v2 = *(void *)(v2 + 88);
      if (*(_DWORD *)(v5 + 72) != 2) {
        std::__throw_bad_variant_access[abi:ne180100]();
      }
      uint64_t v6 = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>(v4, (void *)(v5 + 8));
      if (v6)
      {
        uint64_t v7 = *(void *)(v3 + 176);
        if (v7) {
          (*(void (**)(uint64_t, uint64_t *))(*(void *)v7 + 48))(v7, v6 + 4);
        }
        std::__hash_table<Phase::Controller::Renderer *,std::hash<Phase::Controller::Renderer *>,std::equal_to<Phase::Controller::Renderer *>,std::allocator<Phase::Controller::Renderer *>>::erase(v4, v6);
      }
      Phase::SortedCommandQueue<Phase::SpatialModeler::PriorityQueue,Phase::SpatialModeler::PriorityQueueCommandType,std::variant<std::monostate,Phase::SpatialModeler::PriorityQueueEntry,Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueClusterIndexUpdate,Phase::SpatialModeler::PriorityQueueGlobals>>::CommandBatch::Clear((void *)(v5 + 80));
      uint64_t result = MEMORY[0x223C938A0](v5, 0x1020C40994B1BD2);
    }
    while (v2);
  }
  return result;
}

uint64_t Phase::SpatialModeler::PriorityQueue::ExecuteUpdateClusterIndices(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    uint64_t v3 = (void *)(result + 40);
    do
    {
      uint64_t v4 = v2;
      uint64_t v2 = *(void *)(v2 + 88);
      if (*(_DWORD *)(v4 + 72) != 3) {
        std::__throw_bad_variant_access[abi:ne180100]();
      }
      uint64_t v5 = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>(v3, (void *)(v4 + 8));
      if (v5)
      {
        *(_OWORD *)(v5 + 7) = *(_OWORD *)(v4 + 24);
        v5[9] = *(void *)(v4 + 40);
      }
      Phase::SortedCommandQueue<Phase::SpatialModeler::PriorityQueue,Phase::SpatialModeler::PriorityQueueCommandType,std::variant<std::monostate,Phase::SpatialModeler::PriorityQueueEntry,Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueClusterIndexUpdate,Phase::SpatialModeler::PriorityQueueGlobals>>::CommandBatch::Clear((void *)(v4 + 80));
      uint64_t result = MEMORY[0x223C938A0](v4, 0x1020C40994B1BD2);
    }
    while (v2);
  }
  return result;
}

uint64_t Phase::SpatialModeler::PriorityQueue::ExecuteUpdateGlobals(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = *(void *)(v2 + 88);
      if (*(_DWORD *)(v2 + 72) != 4) {
        std::__throw_bad_variant_access[abi:ne180100]();
      }
      Phase::SortedCommandQueue<Phase::SpatialModeler::PriorityQueue,Phase::SpatialModeler::PriorityQueueCommandType,std::variant<std::monostate,Phase::SpatialModeler::PriorityQueueEntry,Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueClusterIndexUpdate,Phase::SpatialModeler::PriorityQueueGlobals>>::CommandBatch::Clear((void *)(v2 + 80));
      uint64_t result = MEMORY[0x223C938A0](v2, 0x1020C40994B1BD2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  return result;
}

uint64_t Phase::SortedCommandQueue<Phase::SpatialModeler::PriorityQueue,Phase::SpatialModeler::PriorityQueueCommandType,std::variant<std::monostate,Phase::SpatialModeler::PriorityQueueEntry,Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueClusterIndexUpdate,Phase::SpatialModeler::PriorityQueueGlobals>>::SortCommandList(uint64_t result, unsigned int *a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = a2;
    uint64_t v5 = result;
    do
    {
      while (1)
      {
        uint64_t v6 = v4;
        uint64_t v4 = (unsigned int *)*((void *)v4 + 11);
        uint64_t v7 = *v6;
        if (v7) {
          break;
        }
        Phase::SortedCommandQueue<Phase::SpatialModeler::PriorityQueue,Phase::SpatialModeler::PriorityQueueCommandType,std::variant<std::monostate,Phase::SpatialModeler::PriorityQueueEntry,Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueClusterIndexUpdate,Phase::SpatialModeler::PriorityQueueGlobals>>::SortCommandList(v5, *((void *)v6 + 10), a3);
        *((void *)v6 + 10) = 0;
        long long v8 = v6 + 20;
LABEL_9:
        Phase::SortedCommandQueue<Phase::SpatialModeler::PriorityQueue,Phase::SpatialModeler::PriorityQueueCommandType,std::variant<std::monostate,Phase::SpatialModeler::PriorityQueueEntry,Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueClusterIndexUpdate,Phase::SpatialModeler::PriorityQueueGlobals>>::CommandBatch::Clear(v8);
        uint64_t result = MEMORY[0x223C938A0](v6, 0x1020C40994B1BD2);
        if (!v4) {
          return result;
        }
      }
      if (v7 > 4)
      {
        long long v8 = v6 + 20;
        goto LABEL_9;
      }
      *((void *)v6 + std::__function::__value_func<void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::~__value_func[abi:ne180100](this + 11) = *(void *)(a3 + 8 * v7);
      *(void *)(a3 + 8 * v7) = v6;
    }
    while (v4);
  }
  return result;
}

BOOL Phase::InitInPlace<Phase::SpatialModeler::SubmixListenerInput<float>>(uint64_t a1)
{
  return Phase::SpatialModeler::SubmixListenerInput<float>::SubmixListenerInput(a1, 1) != 0;
}

uint64_t Phase::InitInPlace<Phase::SpatialModeler::RenderGroupInput<float>>(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v7 = *MEMORY[0x263EF8340];
  *(void *)a1 = 0x200000002;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 244) = 1065353216;
  *(unsigned char *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 224) = 0;
  *(void *)(a1 + 228) = 1065353216;
  *(void *)(a1 + 236) = 0;
  do
  {
    uint64_t v3 = a1 + v2;
    *(_DWORD *)(v3 + 248) = 0;
    *(void *)(v3 + 256) = 0;
    v2 += 16;
  }
  while (v2 != 128);
  *(void *)(a1 + 376) = 0;
  uint64_t v5 = 0;
  int v6 = 0;
  Phase::Subbands<float>::Subbands(a1 + 384, &v5, 3);
  *(unsigned char *)(a1 + 512) = 0;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_DWORD *)(a1 + 544) = 0;
  *(void *)(a1 + 552) = 0;
  return 1;
}

uint64_t Phase::InitInPlace<Phase::SpatialModeler::ClusterSetInput<float>>(uint64_t a1)
{
  *(void *)a1 = 0x200000003;
  *(unsigned char *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 136) = 0;
  return 1;
}

uint64_t Phase::InitInPlace<Phase::SpatialModeler::StringInput>(uint64_t a1)
{
  *(void *)a1 = 0x200000004;
  *(unsigned char *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 56) = 0;
  return 1;
}

uint64_t Phase::DestroyInPlace<Phase::SpatialModeler::SubmixListenerInput<float>>()
{
  return 1;
}

uint64_t Phase::DestroyInPlace<Phase::SpatialModeler::RenderGroupInput<float>>()
{
  return 1;
}

uint64_t Phase::DestroyInPlace<Phase::SpatialModeler::ClusterSetInput<float>>(uint64_t *a1)
{
  return 1;
}

uint64_t Phase::DestroyInPlace<Phase::SpatialModeler::StringInput>(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  return 1;
}

uint64_t Phase::InitInPlace<Phase::SpatialModeler::CullabilityOutput<float>>(uint64_t a1)
{
  *(_DWORD *)a1 = 1;
  *(unsigned char *)(a1 + 4) = 1;
  *(_DWORD *)(a1 + 8) = 0;
  return 1;
}

uint64_t Phase::InitInPlace<Phase::SpatialModeler::ClusterSetOutput<float>>(uint64_t a1)
{
  *(_DWORD *)a1 = 2;
  *(unsigned char *)(a1 + 4) = 1;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 88) = 0;
  return 1;
}

uint64_t Phase::InitInPlace<Phase::SpatialModeler::DirectionalMetadataOutput<float>>(uint64_t a1)
{
  *(_DWORD *)a1 = 3;
  *(unsigned char *)(a1 + 4) = 1;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 204) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 176) = 0;
  *(_WORD *)(a1 + 200) = 0;
  return 1;
}

uint64_t Phase::DestroyInPlace<Phase::SpatialModeler::CullabilityOutput<float>>()
{
  return 1;
}

uint64_t Phase::DestroyInPlace<Phase::SpatialModeler::ClusterSetOutput<float>>(uint64_t *a1)
{
  return 1;
}

uint64_t Phase::DestroyInPlace<Phase::SpatialModeler::DirectionalMetadataOutput<float>>(uint64_t *a1)
{
  return 1;
}

uint64_t Phase::Controller::SpatialModelerInfo::GetDescription(Phase::Controller::SpatialModelerInfo *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v13);
  uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"SpatialModeler ", 15);
  int v3 = *((char *)this + 23);
  if (v3 >= 0) {
    uint64_t v4 = this;
  }
  else {
    uint64_t v4 = *(Phase::Controller::SpatialModelerInfo **)this;
  }
  if (v3 >= 0) {
    uint64_t v5 = *((unsigned __int8 *)this + 23);
  }
  else {
    uint64_t v5 = *((void *)this + 1);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v4, v5);
  int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" (category ", 11);
  GetSpatialCategoryString(*((_DWORD *)this + 10));
  id v7 = objc_claimAutoreleasedReturnValue();
  long long v8 = (const char *)[v7 UTF8String];
  size_t v9 = strlen(v8);
  long long v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v8, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)", ", 2);

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"id ", 3);
  uint64_t v11 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)")", 1);
  std::stringbuf::str();
  v13[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v13 + *(void *)(v13[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v13[1] = MEMORY[0x263F8C318] + 16;
  if (v14 < 0) {
    operator delete((void *)v13[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x223C937D0](&v15);
}

void sub_22206FC5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(Phase::Controller::SpatialModelerRegistry *this)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(&__str, "DirectPathTransmission");
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    if (!__str.__r_.__value_.__r.__words[0]) {
      goto LABEL_8;
    }
  }
  else
  {
    p_str = &__str;
  }
  unsigned int v2 = p_str->__r_.__value_.__s.__data_[0];
  if (p_str->__r_.__value_.__s.__data_[0])
  {
    int v3 = &p_str->__r_.__value_.__s.__data_[1];
    uint64_t v4 = 0xCBF29CE484222325;
    do
    {
      uint64_t v4 = 0x100000001B3 * (v4 ^ v2);
      unsigned int v5 = *v3++;
      unsigned int v2 = v5;
    }
    while (v5);
LABEL_9:
    memset(v10, 0, sizeof(v10));
    *(_OWORD *)int __p = 0u;
    memset(v14, 0, 60);
    long long v16 = 0u;
    long long v17 = 0u;
    memset(v18, 0, sizeof(v18));
    long long v21 = 0u;
    long long v22 = 0u;
    uint64_t v19 = 0;
    uint64_t v23 = 0;
    std::string::operator=((std::string *)v10, &__str);
    *(void *)&v10[24] = v4;
    uint64_t v11 = 1;
    int v12 = 1;
    int v6 = operator new(0x14uLL);
    *(_OWORD *)int v6 = constinit;
    void v6[4] = 5;
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    __p[0] = v6;
    __p[1] = v6 + 5;
    *(void *)&v14[0] = v6 + 5;
    Phase::SpatialModeler::DirectPathTransmission::GetSupportedQueryDescs((std::string **)&v24);
    std::vector<Phase::SpatialModeler::QueryDesc>::__vdeallocate((void **)v14 + 1);
    *(_OWORD *)((char *)v14 + 8) = v24;
    *((void *)&v14[1] + 1) = v25;
    uint64_t v25 = 0;
    long long v24 = 0uLL;
    *(void *)&long long v8 = &v24;
    std::vector<Phase::SpatialModeler::QueryDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
    id v7 = operator new(8uLL);
    void *v7 = 3;
    if (*(void *)&v14[2])
    {
      *((void *)&v14[2] + 1) = *(void *)&v14[2];
      operator delete(*(void **)&v14[2]);
    }
    *(void *)&void v14[2] = v7;
    *((void *)&v14[2] + 1) = v7 + 1;
    *(void *)&_OWORD v14[3] = v7 + 1;
    uint64_t v15 = 3;
    *(void *)&long long v16 = 0x4039000000000000;
    DWORD2(v14[3]) = 0;
    *(void *)&long long v24 = &unk_26D47A980;
    float v26 = &v24;
    std::__function::__value_func<Phase::SpatialModeler::BaseModeler * ()(void)>::swap[abi:ne180100](&v24, v20);
    std::__function::__value_func<Phase::SpatialModeler::BaseModeler * ()(void)>::~__value_func[abi:ne180100](&v24);
    operator new();
  }
LABEL_8:
  uint64_t v4 = 0;
  goto LABEL_9;
}

void sub_222071040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,char a32)
{
  operator delete(v33);
  Phase::Controller::SpatialModelerInfo::~SpatialModelerInfo((Phase::Controller::SpatialModelerInfo *)&a32);
  if (a30 < 0) {
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::SpatialModelerInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::SpatialModelerInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::SpatialModelerInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::SpatialModelerInfo>>>::~__hash_table(v32);
  _Unwind_Resume(a1);
}

__n128 Phase::Controller::SpatialModelerRegistry::RegisterSpatialModeler(Phase::Controller::SpatialModelerRegistry *this, unint64_t a2, Phase::Controller::SpatialModelerInfo *a3)
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  unint64_t v54 = a2;
  int v6 = (Phase::Logger *)std::__hash_table<std::__hash_value_type<unsigned long long,int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,int>>>::find<unsigned long long>(this, &v54);
  if (v6)
  {
    long long v52 = **(id **)(Phase::Logger::GetInstance(v6) + 736);
    if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "SpatialModelerRegistry.mm";
      *(_WORD *)&uint8_t buf[12] = 1024;
      *(_DWORD *)&buf[14] = 308;
      __int16 v56 = 2048;
      unint64_t v57 = v54;
      _os_log_impl(&dword_221E5E000, v52, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"A registry entry with id %llu already exists!\"", buf, 0x1Cu);
    }
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "A registry entry with id %llu already exists!");
  }
  unint64_t v7 = v54;
  unint64_t v8 = *((void *)this + 1);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v3 = v54;
      if (v8 <= v54) {
        unint64_t v3 = v54 % v8;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v54;
    }
    long long v10 = *(void ****)(*(void *)this + 8 * v3);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (void **)*i)
      {
        unint64_t v12 = (unint64_t)i[1];
        if (v12 == v54)
        {
          if (i[2] == (void *)v54) {
            goto LABEL_74;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v3) {
            break;
          }
        }
      }
    }
  }
  long long v13 = (char *)operator new(0x128uLL);
  char v14 = (void *)((char *)this + 16);
  *(void *)buf = v13;
  *(void *)&_OWORD buf[8] = (char *)this + 16;
  *(void *)long long v13 = 0;
  *((void *)v13 + 1) = v7;
  *((void *)v13 + 2) = v7;
  *(_OWORD *)(v13 + 40) = 0u;
  *(_OWORD *)(v13 + 56) = 0u;
  *(_OWORD *)(v13 + 72) = 0u;
  *(_OWORD *)(v13 + 88) = 0u;
  *(_OWORD *)(v13 + 104) = 0u;
  *(_OWORD *)(v13 + 120) = 0u;
  *(_OWORD *)(v13 + 136) = 0u;
  *(_OWORD *)(v13 + 152) = 0u;
  *(_OWORD *)(v13 + 168) = 0u;
  *(_OWORD *)(v13 + 184) = 0u;
  *(_OWORD *)(v13 + 200) = 0u;
  *(_OWORD *)(v13 + 216) = 0u;
  *(_OWORD *)(v13 + 232) = 0u;
  *(_OWORD *)(v13 + 248) = 0u;
  *(_OWORD *)(v13 + 264) = 0u;
  *(_OWORD *)(v13 + 24) = 0u;
  *(_OWORD *)(v13 + 280) = 0u;
  float v15 = (float)(unint64_t)(*((void *)this + 3) + 1);
  buf[16] = 1;
  float v16 = *((float *)this + 8);
  if ((((float)(v16 * (float)v8) >= v15) & ~(v8 == 0)) == 0)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      int8x8_t prime = (int8x8_t)v19;
    }
    else {
      int8x8_t prime = (int8x8_t)v18;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v8 = *((void *)this + 1);
    }
    if (*(void *)&prime > v8) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v8)
    {
      unint64_t v27 = vcvtps_u32_f32((float)*((unint64_t *)this + 3) / *((float *)this + 8));
      if (v8 < 3 || (uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        unint64_t v27 = std::__next_prime(v27);
      }
      else
      {
        uint64_t v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2) {
          unint64_t v27 = v29;
        }
      }
      if (*(void *)&prime <= v27) {
        int8x8_t prime = (int8x8_t)v27;
      }
      if (*(void *)&prime >= v8)
      {
        unint64_t v8 = *((void *)this + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          long long v21 = operator new(8 * *(void *)&prime);
          long long v22 = *(void **)this;
          *(void *)this = v21;
          if (v22) {
            operator delete(v22);
          }
          uint64_t v23 = 0;
          *((int8x8_t *)this + 1) = prime;
          do
            *(void *)(*(void *)this + 8 * v23++) = 0;
          while (*(void *)&prime != v23);
          long long v24 = (void *)*v14;
          if (*v14)
          {
            unint64_t v25 = v24[1];
            uint8x8_t v26 = (uint8x8_t)vcnt_s8(prime);
            v26.i16[0] = vaddlv_u8(v26);
            if (v26.u32[0] > 1uLL)
            {
              if (v25 >= *(void *)&prime) {
                v25 %= *(void *)&prime;
              }
            }
            else
            {
              v25 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)this + 8 * v2std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear(this + 5) = v14;
            unint64_t v30 = (void *)*v24;
            if (*v24)
            {
              do
              {
                unint64_t v31 = v30[1];
                if (v26.u32[0] > 1uLL)
                {
                  if (v31 >= *(void *)&prime) {
                    v31 %= *(void *)&prime;
                  }
                }
                else
                {
                  v31 &= *(void *)&prime - 1;
                }
                if (v31 != v25)
                {
                  if (!*(void *)(*(void *)this + 8 * v31))
                  {
                    *(void *)(*(void *)this + 8 * v31) = v24;
                    goto LABEL_55;
                  }
                  void *v24 = *v30;
                  *unint64_t v30 = **(void **)(*(void *)this + 8 * v31);
                  **(void **)(*(void *)this + 8 * v31) = v30;
                  unint64_t v30 = v24;
                }
                unint64_t v31 = v25;
LABEL_55:
                long long v24 = v30;
                unint64_t v30 = (void *)*v30;
                unint64_t v25 = v31;
              }
              while (v30);
            }
          }
          unint64_t v8 = (unint64_t)prime;
          goto LABEL_59;
        }
        long long v51 = *(void **)this;
        *(void *)this = 0;
        if (v51) {
          operator delete(v51);
        }
        unint64_t v8 = 0;
        *((void *)this + 1) = 0;
      }
    }
LABEL_59:
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v3 = v7 % v8;
      }
      else {
        unint64_t v3 = v7;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v7;
    }
  }
  uint64_t v32 = *(void ****)(*(void *)this + 8 * v3);
  uint64_t i = *(void ***)buf;
  if (v32)
  {
    **(void **)buf = *v32;
LABEL_72:
    *uint64_t v32 = i;
    goto LABEL_73;
  }
  **(void **)buf = *((void *)this + 2);
  *((void *)this + 2) = i;
  *(void *)(*(void *)this + 8 * vobjc_destroyWeak(this + 3) = v14;
  if (*i)
  {
    unint64_t v33 = *((void *)*i + 1);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v33 >= v8) {
        v33 %= v8;
      }
    }
    else
    {
      v33 &= v8 - 1;
    }
    uint64_t v32 = (void ***)(*(void *)this + 8 * v33);
    goto LABEL_72;
  }
LABEL_73:
  *(void *)buf = 0;
  ++*((void *)this + 3);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::Controller::SpatialModelerInfo>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::Controller::SpatialModelerInfo>,void *>>>>::reset[abi:ne180100]((uint64_t)buf);
LABEL_74:
  uint64_t v34 = i + 3;
  if (*((char *)i + 47) < 0) {
    operator delete(*v34);
  }
  long long v35 = *(_OWORD *)a3;
  i[5] = (void *)*((void *)a3 + 2);
  *(_OWORD *)uint64_t v34 = v35;
  *((unsigned char *)a3 + 2objc_destroyWeak(this + 3) = 0;
  *(unsigned char *)a3 = 0;
  int v36 = *((_DWORD *)a3 + 10);
  uint8x8_t v37 = i[9];
  *((_OWORD *)i + objc_destroyWeak(this + 3) = *(_OWORD *)((char *)a3 + 24);
  *((_DWORD *)i + 16) = v36;
  if (v37)
  {
    i[10] = v37;
    operator delete(v37);
    i[9] = 0;
    i[10] = 0;
    i[11] = 0;
  }
  *(_OWORD *)(i + 9) = *((_OWORD *)a3 + 3);
  i[11] = (void *)*((void *)a3 + 8);
  *((void *)a3 + 6) = 0;
  *((void *)a3 + 7) = 0;
  *((void *)a3 + 8) = 0;
  std::vector<Phase::SpatialModeler::QueryDesc>::__vdeallocate(i + 12);
  *((_OWORD *)i + 6) = *(_OWORD *)((char *)a3 + 72);
  i[14] = (void *)*((void *)a3 + 11);
  *((void *)a3 + 9) = 0;
  *((void *)a3 + 10) = 0;
  *((void *)a3 + std::__function::__value_func<void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::~__value_func[abi:ne180100](this + 11) = 0;
  unint64_t v38 = i[15];
  if (v38)
  {
    i[16] = v38;
    operator delete(v38);
    i[15] = 0;
    i[16] = 0;
    i[17] = 0;
  }
  *(_OWORD *)(i + 1std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear(this + 5) = *((_OWORD *)a3 + 6);
  i[17] = (void *)*((void *)a3 + 14);
  *((void *)a3 + 1objc_destroyWeak(this + 3) = 0;
  *((void *)a3 + 14) = 0;
  *((void *)a3 + 12) = 0;
  long long v39 = *(_OWORD *)((char *)a3 + 136);
  *((_OWORD *)i + 9) = *(_OWORD *)((char *)a3 + 120);
  long long v40 = *(_OWORD *)((char *)a3 + 152);
  long long v41 = *(_OWORD *)((char *)a3 + 168);
  long long v42 = *(_OWORD *)((char *)a3 + 184);
  i[28] = (void *)*((void *)a3 + 25);
  *((_OWORD *)i + 12) = v41;
  *((_OWORD *)i + 1objc_destroyWeak(this + 3) = v42;
  *((_OWORD *)i + 10) = v39;
  *((_OWORD *)i + std::__function::__value_func<void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::~__value_func[abi:ne180100](this + 11) = v40;
  uint64_t v43 = (Phase::Controller::SpatialModelerInfo *)(i + 29);
  uint64_t v44 = (uint64_t *)i[32];
  i[32] = 0;
  if (v44 == (uint64_t *)(i + 29))
  {
    (*(void (**)(uint64_t *))(*(void *)v43 + 32))((uint64_t *)i + 29);
  }
  else if (v44)
  {
    (*(void (**)(uint64_t *))(*v44 + 40))(v44);
  }
  unint64_t v45 = (Phase::Controller::SpatialModelerInfo **)(i + 32);
  uint64_t v46 = (void *)((char *)a3 + 232);
  int v47 = (Phase::Controller::SpatialModelerInfo *)*((void *)a3 + 29);
  if (!v47)
  {
    uint64_t v46 = i + 32;
    goto LABEL_88;
  }
  if (v47 != (Phase::Controller::SpatialModelerInfo *)((char *)a3 + 208))
  {
    *unint64_t v45 = v47;
LABEL_88:
    *uint64_t v46 = 0;
    goto LABEL_90;
  }
  *unint64_t v45 = v43;
  (*(void (**)(void, uint64_t *))(*(void *)*v46 + 24))(*v46, (uint64_t *)i + 29);
LABEL_90:
  uint64_t v48 = (void *)*((void *)a3 + 30);
  *((void *)a3 + 30) = 0;
  long long v49 = i[33];
  i[33] = v48;
  if (v49) {
    (*(void (**)(void *))(*(void *)v49 + 8))(v49);
  }
  std::vector<Phase::SpatialModeler::EntityShapeTemplate>::__vdeallocate(i + 34);
  __n128 result = *(__n128 *)((char *)a3 + 248);
  *((__n128 *)i + 17) = result;
  i[36] = (void *)*((void *)a3 + 33);
  *((void *)a3 + 31) = 0;
  *((void *)a3 + 32) = 0;
  *((void *)a3 + 3objc_destroyWeak(this + 3) = 0;
  return result;
}

void sub_222071888(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void Phase::Controller::SpatialModelerInfo::~SpatialModelerInfo(Phase::Controller::SpatialModelerInfo *this)
{
  unsigned int v5 = (void **)((char *)this + 248);
  std::vector<Phase::SpatialModeler::EntityShapeTemplate>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v2 = *((void *)this + 30);
  *((void *)this + 30) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::__function::__value_func<Phase::SpatialModeler::BaseModeler * ()(void)>::~__value_func[abi:ne180100]((void *)this + 26);
  unint64_t v3 = (void *)*((void *)this + 12);
  if (v3)
  {
    *((void *)this + 1objc_destroyWeak(this + 3) = v3;
    operator delete(v3);
  }
  unsigned int v5 = (void **)((char *)this + 72);
  std::vector<Phase::SpatialModeler::QueryDesc>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v4 = (void *)*((void *)this + 6);
  if (v4)
  {
    *((void *)this + 7) = v4;
    operator delete(v4);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void std::make_unique[abi:ne180100]<Phase::Controller::ConvolutionRendererConfig,Phase::Controller::IR::IRBuilder::Method,float,Phase::Controller::RendererType,std::vector<int> &,Phase::Controller::IRFilterType>()
{
}

void sub_222071A7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x223C938A0](v11, 0x1091C4099643F7FLL);
  _Unwind_Resume(a1);
}

void *Phase::Controller::SpatialModelerRegistry::CreateSpatialModelerInstance(Phase::Controller::SpatialModelerRegistry *this, unint64_t a2)
{
  unint64_t v4 = a2;
  __n128 result = std::__hash_table<std::__hash_value_type<unsigned long long,int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,int>>>::find<unsigned long long>(this, &v4);
  if (result)
  {
    uint64_t v3 = result[32];
    if (!v3) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    return (void *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 48))(v3);
  }
  return result;
}

void Phase::Controller::SpatialModelerRegistry::GetSpatialModelerIds(uint64_t a1@<X0>, int a2@<W1>, char **a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v3 = *(uint64_t **)(a1 + 16);
  if (v3)
  {
    int v6 = 0;
    unint64_t v7 = a3 + 2;
    do
    {
      if (*((_DWORD *)v3 + 16) == a2)
      {
        if ((unint64_t)v6 >= *v7)
        {
          uint8x8_t v9 = *a3;
          uint64_t v10 = (v6 - *a3) >> 3;
          unint64_t v11 = v10 + 1;
          if ((unint64_t)(v10 + 1) >> 61) {
            std::vector<Phase::SpatialModeler::OptionalPropertyDescription>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v12 = *v7 - (void)v9;
          if (v12 >> 2 > v11) {
            unint64_t v11 = v12 >> 2;
          }
          if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v13 = v11;
          }
          if (v13)
          {
            char v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)v7, v13);
            uint8x8_t v9 = *a3;
            int v6 = a3[1];
          }
          else
          {
            char v14 = 0;
          }
          float v15 = &v14[8 * v10];
          *(void *)float v15 = v3[2];
          unint64_t v8 = v15 + 8;
          while (v6 != v9)
          {
            uint64_t v16 = *((void *)v6 - 1);
            v6 -= 8;
            *((void *)v15 - 1) = v16;
            v15 -= 8;
          }
          *a3 = v15;
          a3[1] = v8;
          a3[2] = &v14[8 * v13];
          if (v9) {
            operator delete(v9);
          }
        }
        else
        {
          *(void *)int v6 = v3[2];
          unint64_t v8 = v6 + 8;
        }
        a3[1] = v8;
        int v6 = v8;
      }
      uint64_t v3 = (uint64_t *)*v3;
    }
    while (v3);
  }
}

void sub_222071C38(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void Phase::Controller::SpatialModelerRegistry::GetSpatialCategories(Phase::Controller::SpatialModelerRegistry *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  *(_OWORD *)a2 = 0u;
  *((_OWORD *)a2 + 1) = 0u;
  *((_DWORD *)a2 + 8) = 1065353216;
  unint64_t v4 = (uint64_t *)*((void *)this + 2);
  if (v4)
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    unint64_t v7 = (Phase::Controller::SpatialModelerRegistry **)(a2 + 2);
    while (1)
    {
      int v8 = *((_DWORD *)v4 + 16);
      if (v8 == 5 || v8 == 0)
      {
        unint64_t v33 = **(id **)(Phase::Logger::GetInstance(this) + 736);
        if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
        {
          int v35 = 136315394;
          int v36 = "SpatialModelerRegistry.mm";
          __int16 v37 = 1024;
          int v38 = 384;
          _os_log_impl(&dword_221E5E000, v33, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [spatialModelerInfo.mCategory == SpatialCategory::Invalid || spatialModelerInfo.mCategory == SpatialCategory::Count is true]: \"Invalid Spatial Category!\"", (uint8_t *)&v35, 0x12u);
        }
        exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Invalid Spatial Category!");
      }
      if (v6)
      {
        uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
        v10.i16[0] = vaddlv_u8(v10);
        if (v10.u32[0] > 1uLL)
        {
          unint64_t v2 = v8;
          if (v6 <= v8) {
            unint64_t v2 = v8 % v6;
          }
        }
        else
        {
          unint64_t v2 = (v6 - 1) & v8;
        }
        unint64_t v11 = *(uint64_t ***)(*a2 + 8 * v2);
        if (v11)
        {
          for (uint64_t i = *v11; i; uint64_t i = (uint64_t *)*i)
          {
            unint64_t v13 = i[1];
            if (v13 == v8)
            {
              if (*((_DWORD *)i + 4) == v8) {
                goto LABEL_79;
              }
            }
            else
            {
              if (v10.u32[0] > 1uLL)
              {
                if (v13 >= v6) {
                  v13 %= v6;
                }
              }
              else
              {
                v13 &= v6 - 1;
              }
              if (v13 != v2) {
                break;
              }
            }
          }
        }
      }
      this = (Phase::Controller::SpatialModelerRegistry *)operator new(0x18uLL);
      char v14 = this;
      *(void *)this = 0;
      *((void *)this + 1) = v8;
      *((_DWORD *)this + 4) = v8;
      float v15 = (float)(unint64_t)(v5 + 1);
      float v16 = *((float *)a2 + 8);
      if (!v6 || (float)(v16 * (float)v6) < v15) {
        break;
      }
LABEL_69:
      uint64_t v30 = *a2;
      unint64_t v31 = *(Phase::Controller::SpatialModelerRegistry ***)(*a2 + 8 * v2);
      if (v31)
      {
        *(void *)char v14 = *v31;
      }
      else
      {
        *(void *)char v14 = *v7;
        void *v7 = v14;
        *(void *)(v30 + 8 * v2) = v7;
        if (!*(void *)v14) {
          goto LABEL_78;
        }
        unint64_t v32 = *(void *)(*(void *)v14 + 8);
        if ((v6 & (v6 - 1)) != 0)
        {
          if (v32 >= v6) {
            v32 %= v6;
          }
        }
        else
        {
          v32 &= v6 - 1;
        }
        unint64_t v31 = (Phase::Controller::SpatialModelerRegistry **)(*a2 + 8 * v32);
      }
      *unint64_t v31 = v14;
LABEL_78:
      uint64_t v5 = a2[3] + 1;
      a2[3] = v5;
LABEL_79:
      unint64_t v4 = (uint64_t *)*v4;
      if (!v4) {
        return;
      }
    }
    BOOL v17 = (v6 & (v6 - 1)) != 0;
    if (v6 < 3) {
      BOOL v17 = 1;
    }
    unint64_t v18 = v17 | (2 * v6);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    if (v20 == 1)
    {
      size_t v20 = 2;
    }
    else if ((v20 & (v20 - 1)) != 0)
    {
      this = (Phase::Controller::SpatialModelerRegistry *)std::__next_prime(v20);
      size_t v20 = (size_t)this;
      unint64_t v6 = a2[1];
    }
    if (v20 > v6) {
      goto LABEL_35;
    }
    if (v20 < v6)
    {
      this = (Phase::Controller::SpatialModelerRegistry *)vcvtps_u32_f32((float)(unint64_t)a2[3] / *((float *)a2 + 8));
      if (v6 < 3 || (uint8x8_t v26 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
      {
        this = (Phase::Controller::SpatialModelerRegistry *)std::__next_prime((size_t)this);
      }
      else
      {
        unint64_t v27 = (Phase::Controller::SpatialModelerRegistry *)(1 << -(char)__clz((unint64_t)this - 1));
        if ((unint64_t)this >= 2) {
          this = v27;
        }
      }
      if (v20 <= (unint64_t)this) {
        size_t v20 = (size_t)this;
      }
      if (v20 >= v6)
      {
        unint64_t v6 = a2[1];
      }
      else
      {
        if (v20)
        {
LABEL_35:
          if (v20 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          long long v21 = operator new(8 * v20);
          this = (Phase::Controller::SpatialModelerRegistry *)*a2;
          *a2 = (uint64_t)v21;
          if (this) {
            operator delete(this);
          }
          uint64_t v22 = 0;
          a2[1] = v20;
          do
            *(void *)(*a2 + 8 * v22++) = 0;
          while (v20 != v22);
          uint64_t v23 = *v7;
          if (*v7)
          {
            size_t v24 = *((void *)v23 + 1);
            uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v20);
            v25.i16[0] = vaddlv_u8(v25);
            if (v25.u32[0] > 1uLL)
            {
              if (v24 >= v20) {
                v24 %= v20;
              }
            }
            else
            {
              v24 &= v20 - 1;
            }
            *(void *)(*a2 + 8 * v24) = v7;
            uint8x8_t v28 = *(Phase::Controller::SpatialModelerRegistry **)v23;
            if (*(void *)v23)
            {
              do
              {
                size_t v29 = *((void *)v28 + 1);
                if (v25.u32[0] > 1uLL)
                {
                  if (v29 >= v20) {
                    v29 %= v20;
                  }
                }
                else
                {
                  v29 &= v20 - 1;
                }
                if (v29 != v24)
                {
                  if (!*(void *)(*a2 + 8 * v29))
                  {
                    *(void *)(*a2 + 8 * v29) = v23;
                    goto LABEL_60;
                  }
                  *(void *)uint64_t v23 = *(void *)v28;
                  *(void *)uint8x8_t v28 = **(void **)(*a2 + 8 * v29);
                  **(void **)(*a2 + 8 * v29) = v28;
                  uint8x8_t v28 = v23;
                }
                size_t v29 = v24;
LABEL_60:
                uint64_t v23 = v28;
                uint8x8_t v28 = *(Phase::Controller::SpatialModelerRegistry **)v28;
                size_t v24 = v29;
              }
              while (v28);
            }
          }
          unint64_t v6 = v20;
          goto LABEL_64;
        }
        this = (Phase::Controller::SpatialModelerRegistry *)*a2;
        *a2 = 0;
        if (this) {
          operator delete(this);
        }
        unint64_t v6 = 0;
        a2[1] = 0;
      }
    }
LABEL_64:
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v8) {
        unint64_t v2 = v8 % v6;
      }
      else {
        unint64_t v2 = v8;
      }
    }
    else
    {
      unint64_t v2 = (v6 - 1) & v8;
    }
    goto LABEL_69;
  }
}

void sub_222072138(_Unwind_Exception *a1)
{
  operator delete(v2);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<Phase::SpatialModeler::BaseModeler * ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::SpatialModelerInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::SpatialModelerInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::SpatialModelerInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::SpatialModelerInfo>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::SpatialModelerInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::SpatialModelerInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::SpatialModelerInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::SpatialModelerInfo>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  unint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::SpatialModelerInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::SpatialModelerInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::SpatialModelerInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::SpatialModelerInfo>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    unint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<unsigned long long const,Phase::Controller::SpatialModelerInfo>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<unsigned long long const,Phase::Controller::SpatialModelerInfo>,0>(uint64_t a1)
{
  uint64_t v5 = (void **)(a1 + 256);
  std::vector<Phase::SpatialModeler::EntityShapeTemplate>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v2 = *(void *)(a1 + 248);
  *(void *)(a1 + 248) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::__function::__value_func<Phase::SpatialModeler::BaseModeler * ()(void)>::~__value_func[abi:ne180100]((void *)(a1 + 216));
  uint64_t v3 = *(void **)(a1 + 104);
  if (v3)
  {
    *(void *)(a1 + 112) = v3;
    operator delete(v3);
  }
  uint64_t v5 = (void **)(a1 + 80);
  std::vector<Phase::SpatialModeler::QueryDesc>::__destroy_vector::operator()[abi:ne180100](&v5);
  unint64_t v4 = *(void **)(a1 + 56);
  if (v4)
  {
    *(void *)(a1 + 64) = v4;
    operator delete(v4);
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::vector<Phase::SpatialModeler::QueryDesc>::__vdeallocate(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    unint64_t v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 80;
        std::allocator<Phase::SpatialModeler::QueryDesc>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      unint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::__function::__func<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_0,std::allocator<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_0>,Phase::SpatialModeler::BaseModeler * ()(void)>::~__func()
{
}

void *std::__function::__func<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_0,std::allocator<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_0>,Phase::SpatialModeler::BaseModeler * ()(void)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_26D47A980;
  return result;
}

void std::__function::__func<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_0,std::allocator<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_0>,Phase::SpatialModeler::BaseModeler * ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D47A980;
}

void std::__function::__func<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_0,std::allocator<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_0>,Phase::SpatialModeler::BaseModeler * ()(void)>::operator()()
{
}

void sub_2220726E8(void *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v2);
  operator delete(v4);
  os_unfair_lock_unlock((os_unfair_lock_t)&caulk::alloc::shared_allocator<caulk::alloc::multi_free_list<caulk::alloc::cascading_allocator<caulk::alloc::chunk_allocator<caulk::alloc::global_page_cache,caulk::alloc::serial_allocator,caulk::alloc::embed_block_memory,16384ul>>,caulk::concurrent::details::node_allocator<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>,10ul,(caulk::concurrent::skiplist_options)0>::size_generator,8ul,1ul,-1l>>::shared_instance(void)::global);
  uint64_t v5 = *(std::__shared_weak_count **)(v1 + 344);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  __clang_call_terminate(a1);
}

void std::__shared_ptr_emplace<caulk::alloc::multi_free_list<caulk::alloc::cascading_allocator<caulk::alloc::chunk_allocator<caulk::alloc::global_page_cache,caulk::alloc::serial_allocator,caulk::alloc::embed_block_memory,16384ul>>,caulk::concurrent::details::node_allocator<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>,10ul,(caulk::concurrent::skiplist_options)0>::size_generator,8ul,1ul,-1l>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D47A9C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<caulk::alloc::multi_free_list<caulk::alloc::cascading_allocator<caulk::alloc::chunk_allocator<caulk::alloc::global_page_cache,caulk::alloc::serial_allocator,caulk::alloc::embed_block_memory,16384ul>>,caulk::concurrent::details::node_allocator<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>,10ul,(caulk::concurrent::skiplist_options)0>::size_generator,8ul,1ul,-1l>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D47A9C8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C938A0);
}

caulk::alloc::base_allocator *std::__shared_ptr_emplace<caulk::alloc::multi_free_list<caulk::alloc::cascading_allocator<caulk::alloc::chunk_allocator<caulk::alloc::global_page_cache,caulk::alloc::serial_allocator,caulk::alloc::embed_block_memory,16384ul>>,caulk::concurrent::details::node_allocator<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>,10ul,(caulk::concurrent::skiplist_options)0>::size_generator,8ul,1ul,-1l>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v3 = a1 + 96;
  do
  {
    uint64_t v4 = caulk::alloc::multi_free_list<caulk::alloc::cascading_allocator<caulk::alloc::chunk_allocator<caulk::alloc::global_page_cache,caulk::alloc::serial_allocator,caulk::alloc::embed_block_memory,16384ul>>,caulk::concurrent::details::node_allocator<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>,10ul,(caulk::concurrent::skiplist_options)0>::size_generator,8ul,1ul,-1l>::Sizes[v2];
    while (1)
    {
      __n128 result = (caulk::alloc::base_allocator *)caulk::concurrent::stack<caulk::alloc::free_block,caulk::concurrent::intrusive_single_link_node<caulk::alloc::free_block>>::pop();
      if (!result) {
        break;
      }
      atomic_fetch_add((atomic_ullong *volatile)(v3 + 32 * v2 + 16), 0xFFFFFFFFFFFFFFFFLL);
      atomic_fetch_add((atomic_uint *volatile)(a1 + 72), 0x801u);
      unint64_t v6 = *(unint64_t **)(a1 + 48);
      if (v6)
      {
        while (v6 + 4 > (unint64_t *)result || (char *)result + v4 > (char *)(v6 + 2048))
        {
          unint64_t v6 = (unint64_t *)atomic_load(v6);
          if (!v6) {
            goto LABEL_11;
          }
        }
      }
      else
      {
LABEL_11:
        unint64_t v6 = (unint64_t *)atomic_load((unint64_t *)(a1 + 80));
        if (v6) {
          BOOL v8 = v6 + 4 > (unint64_t *)result;
        }
        else {
          BOOL v8 = 1;
        }
        if (v8 || (char *)result + v4 > (char *)(v6 + 2048)) {
LABEL_26:
        }
          caulk::alloc::base_allocator::bad_dealloc(result);
      }
      if (!v6) {
        goto LABEL_26;
      }
      if (v6 + 4 > (unint64_t *)result || (char *)result + v4 > (char *)(v6 + 2048)) {
        caulk::alloc::base_allocator::bad_dealloc(result);
      }
      atomic_fetch_add((atomic_uint *volatile)(a1 + 72), 0xFFFFFFFF);
    }
    ++v2;
  }
  while (v2 != 10);
  for (uint64_t i = *(unint64_t **)(a1 + 48);
        i;
        __n128 result = (caulk::alloc::base_allocator *)caulk::alloc::details::caching_page_allocator_base::deallocate())
  {
    uint64_t i = (unint64_t *)atomic_load(i);
  }
  return result;
}

void sub_2220728D8(void *a1)
{
  atomic_fetch_add((atomic_uint *volatile)(v1 + 72), 0xFFFFFFFF);
  __clang_call_terminate(a1);
}

void caulk::inplace_function_detail::vtable<void,caulk::concurrent::details::skiplist_node<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>>::layout_vk const&>::vtable(void)::{lambda(void *,caulk::concurrent::details::skiplist_node<unsigned long,std::shared_ptr<Phase::SpatialModeler::DirectPathTransmission::SourceHistory>>::layout_vk const&)#1}::__invoke()
{
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
}

void *std::__function::__value_func<Phase::SpatialModeler::BaseModeler * ()(void)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_222072BAC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void std::vector<Phase::SpatialModeler::EntityShapeTemplate>::__vdeallocate(void **a1)
{
  uint64_t v1 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        uint64_t v5 = v3 - 56;
        std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::~__hash_table((uint64_t)(v3 - 48));
        uint64_t v3 = v5;
      }
      while (v5 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::__function::__func<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_1,std::allocator<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_1>,Phase::SpatialModeler::BaseModeler * ()(void)>::~__func()
{
}

void *std::__function::__func<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_1,std::allocator<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_1>,Phase::SpatialModeler::BaseModeler * ()(void)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_26D47AA28;
  return result;
}

void std::__function::__func<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_1,std::allocator<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_1>,Phase::SpatialModeler::BaseModeler * ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D47AA28;
}

void std::__function::__func<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_1,std::allocator<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_1>,Phase::SpatialModeler::BaseModeler * ()(void)>::operator()()
{
}

void std::__function::__func<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_2,std::allocator<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_2>,Phase::SpatialModeler::BaseModeler * ()(void)>::~__func()
{
}

void *std::__function::__func<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_2,std::allocator<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_2>,Phase::SpatialModeler::BaseModeler * ()(void)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_26D47AA70;
  return result;
}

void std::__function::__func<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_2,std::allocator<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_2>,Phase::SpatialModeler::BaseModeler * ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D47AA70;
}

void std::__function::__func<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_2,std::allocator<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_2>,Phase::SpatialModeler::BaseModeler * ()(void)>::operator()()
{
}

void sub_222072EEC(_Unwind_Exception *a1)
{
  MEMORY[0x223C938A0](v1, 0x10F1C40D1858A81);
  _Unwind_Resume(a1);
}

void std::__function::__func<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_3,std::allocator<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_3>,Phase::SpatialModeler::BaseModeler * ()(void)>::~__func()
{
}

void *std::__function::__func<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_3,std::allocator<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_3>,Phase::SpatialModeler::BaseModeler * ()(void)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_26D47AAB8;
  return result;
}

void std::__function::__func<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_3,std::allocator<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_3>,Phase::SpatialModeler::BaseModeler * ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D47AAB8;
}

void std::__function::__func<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_3,std::allocator<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_3>,Phase::SpatialModeler::BaseModeler * ()(void)>::operator()()
{
}

void std::__function::__func<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_4,std::allocator<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_4>,Phase::SpatialModeler::BaseModeler * ()(void)>::~__func()
{
}

void *std::__function::__func<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_4,std::allocator<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_4>,Phase::SpatialModeler::BaseModeler * ()(void)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_26D47AB00;
  return result;
}

void std::__function::__func<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_4,std::allocator<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_4>,Phase::SpatialModeler::BaseModeler * ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D47AB00;
}

void std::__function::__func<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_4,std::allocator<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_4>,Phase::SpatialModeler::BaseModeler * ()(void)>::operator()()
{
}

void sub_2220731C0(_Unwind_Exception *a1)
{
  MEMORY[0x223C938A0](v1, 0x10F1C40D1858A81);
  _Unwind_Resume(a1);
}

void std::__function::__func<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_5,std::allocator<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_5>,Phase::SpatialModeler::BaseModeler * ()(void)>::~__func()
{
}

void *std::__function::__func<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_5,std::allocator<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_5>,Phase::SpatialModeler::BaseModeler * ()(void)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_26D47AB48;
  return result;
}

void std::__function::__func<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_5,std::allocator<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_5>,Phase::SpatialModeler::BaseModeler * ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D47AB48;
}

void std::__function::__func<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_5,std::allocator<Phase::Controller::SpatialModelerRegistry::SpatialModelerRegistry(BOOL)::$_5>,Phase::SpatialModeler::BaseModeler * ()(void)>::operator()()
{
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::Controller::SpatialModelerInfo>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::Controller::SpatialModelerInfo>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<unsigned long long const,Phase::Controller::SpatialModelerInfo>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void Phase::SpatialModeler::ReverbPresetDatabase::ReverbPresetDatabase(Phase::SpatialModeler::ReverbPresetDatabase *this, double a2)
{
}

void sub_2220733B0(_Unwind_Exception *a1)
{
  MEMORY[0x223C938A0](v1, 0x10F0C402509CF1DLL);
  _Unwind_Resume(a1);
}

void *Phase::SpatialModeler::ReverbPresetDatabase::Implementation::AddPreset(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  v125[53] = *MEMORY[0x263EF8340];
  uint64_t v6 = a3;
  if ((*(char *)(a3 + 23) & 0x80000000) == 0 || (uint64_t v6 = *(void *)a3) != 0)
  {
    unsigned int v7 = *(unsigned __int8 *)v6;
    if (*(unsigned char *)v6)
    {
      BOOL v8 = (unsigned __int8 *)(v6 + 1);
      uint64_t v6 = 0xCBF29CE484222325;
      do
      {
        uint64_t v6 = 0x100000001B3 * (v6 ^ v7);
        unsigned int v9 = *v8++;
        unsigned int v7 = v9;
      }
      while (v9);
    }
    else
    {
      uint64_t v6 = 0;
    }
  }
  unint64_t v57 = v6;
  uint8x8_t v10 = (void **)(a1 + 992);
  unint64_t v11 = std::__hash_table<std::__hash_value_type<unsigned long long,int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,int>>>::find<unsigned long long>((void *)(a1 + 992), &v57);
  if (v11)
  {
    int8x8_t v12 = *(int8x8_t *)(a1 + 1000);
    unint64_t v13 = v11[1];
    uint8x8_t v14 = (uint8x8_t)vcnt_s8(v12);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] > 1uLL)
    {
      if (v13 >= *(void *)&v12) {
        v13 %= *(void *)&v12;
      }
    }
    else
    {
      v13 &= *(void *)&v12 - 1;
    }
    float v15 = (void *)*((void *)*v10 + v13);
    do
    {
      float v16 = v15;
      float v15 = (void *)*v15;
    }
    while (v15 != v11);
    if (v16 == (void *)(a1 + 1008)) {
      goto LABEL_26;
    }
    unint64_t v17 = v16[1];
    if (v14.u32[0] > 1uLL)
    {
      if (v17 >= *(void *)&v12) {
        v17 %= *(void *)&v12;
      }
    }
    else
    {
      v17 &= *(void *)&v12 - 1;
    }
    if (v17 != v13)
    {
LABEL_26:
      if (!*v11) {
        goto LABEL_27;
      }
      unint64_t v18 = *(void *)(*v11 + 8);
      if (v14.u32[0] > 1uLL)
      {
        if (v18 >= *(void *)&v12) {
          v18 %= *(void *)&v12;
        }
      }
      else
      {
        v18 &= *(void *)&v12 - 1;
      }
      if (v18 != v13) {
LABEL_27:
      }
        *((void *)*v10 + v1objc_destroyWeak(this + 3) = 0;
    }
    uint64_t v19 = *v11;
    if (*v11)
    {
      unint64_t v20 = *(void *)(v19 + 8);
      if (v14.u32[0] > 1uLL)
      {
        if (v20 >= *(void *)&v12) {
          v20 %= *(void *)&v12;
        }
      }
      else
      {
        v20 &= *(void *)&v12 - 1;
      }
      if (v20 != v13)
      {
        *((void *)*v10 + v20) = v16;
        uint64_t v19 = *v11;
      }
    }
    void *v16 = v19;
    void *v11 = 0;
    --*(void *)(a1 + 1016);
    unint64_t v121 = (unint64_t)v11;
    *(void *)&long long __p = a1 + 1008;
    BYTE8(__p) = 1;
    std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>,void *>>>>::reset[abi:ne180100]((uint64_t)&v121);
  }
  long long v21 = &v63;
  bzero(&v64, 0x348uLL);
  int v64 = 3;
  char v65 = 1;
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  uint64_t v68 = 0;
  uint64_t v69 = 0;
  uint64_t v70 = 0;
  uint64_t v71 = 0;
  uint64_t v72 = 0;
  uint64_t v73 = 0;
  uint64_t v75 = 0;
  uint64_t v76 = 0;
  uint64_t v74 = 0;
  __int16 v77 = 0;
  int v78 = 3;
  char v79 = 1;
  uint64_t v80 = 0;
  uint64_t v81 = 0;
  uint64_t v82 = 0;
  uint64_t v83 = 0;
  uint64_t v84 = 0;
  uint64_t v85 = 0;
  uint64_t v86 = 0;
  uint64_t v87 = 0;
  uint64_t v89 = 0;
  uint64_t v90 = 0;
  uint64_t v88 = 0;
  __int16 v91 = 0;
  double v63 = &unk_26D47AB90;
  int v93 = 3;
  char v94 = 1;
  uint64_t v97 = 0;
  uint64_t v95 = 0;
  uint64_t v96 = 0;
  uint64_t v100 = 0;
  uint64_t v98 = 0;
  uint64_t v99 = 0;
  uint64_t v102 = 0;
  uint64_t v101 = 0;
  __int16 v106 = 0;
  uint64_t v105 = 0;
  uint64_t v103 = 0;
  uint64_t v104 = 0;
  int v107 = 3;
  char v108 = 1;
  uint64_t v111 = 0;
  uint64_t v109 = 0;
  uint64_t v110 = 0;
  uint64_t v113 = 0;
  uint64_t v112 = 0;
  uint64_t v114 = 0;
  uint64_t v116 = 0;
  uint64_t v115 = 0;
  __int16 v120 = 0;
  uint64_t v119 = 0;
  uint64_t v117 = 0;
  uint64_t v118 = 0;
  unint64_t v121 = v57;
  long long __p = 0uLL;
  uint64_t v123 = 0;
  double v60 = 0;
  uint64_t v61 = 0;
  uint64_t v92 = &unk_26D47ABD0;
  uint64_t v62 = 0;
  Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Collection::Collection((uint64_t)v124, (uint64_t)&v63);
  v124[0] = &unk_26D47AB90;
  Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Collection::Collection((uint64_t)v125, (uint64_t)&v92);
  v125[0] = &unk_26D47ABD0;
  unint64_t v22 = v121;
  unint64_t v23 = *(void *)(a1 + 1000);
  __int16 v56 = a2;
  if (v23)
  {
    uint8x8_t v24 = (uint8x8_t)vcnt_s8((int8x8_t)v23);
    v24.i16[0] = vaddlv_u8(v24);
    if (v24.u32[0] > 1uLL)
    {
      long long v21 = (void **)v121;
      if (v23 <= v121) {
        long long v21 = (void **)(v121 % v23);
      }
    }
    else
    {
      long long v21 = (void **)((v23 - 1) & v121);
    }
    uint8x8_t v25 = (void *)*((void *)*v10 + (void)v21);
    if (v25)
    {
      for (uint64_t i = (void *)*v25; i; uint64_t i = (void *)*i)
      {
        unint64_t v27 = i[1];
        if (v27 == v121)
        {
          if (i[2] == v121) {
            goto LABEL_109;
          }
        }
        else
        {
          if (v24.u32[0] > 1uLL)
          {
            if (v27 >= v23) {
              v27 %= v23;
            }
          }
          else
          {
            v27 &= v23 - 1;
          }
          if ((void **)v27 != v21) {
            break;
          }
        }
      }
    }
  }
  uint8x8_t v28 = (char *)operator new(0x380uLL);
  size_t v29 = (void *)(a1 + 1008);
  v58[0] = v28;
  v58[1] = a1 + 1008;
  *(void *)uint8x8_t v28 = 0;
  *((void *)v28 + 1) = v22;
  *((void *)v28 + 2) = v22;
  *(_OWORD *)(v28 + 24) = __p;
  *((void *)v28 + std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear(this + 5) = v123;
  long long __p = 0uLL;
  uint64_t v123 = 0;
  Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Collection::Collection((uint64_t)(v28 + 48), (uint64_t)v124);
  *((void *)v28 + 6) = &unk_26D47AB90;
  Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Collection::Collection((uint64_t)(v28 + 472), (uint64_t)v125);
  *((void *)v28 + 59) = &unk_26D47ABD0;
  char v59 = 1;
  float v30 = (float)(unint64_t)(*(void *)(a1 + 1016) + 1);
  float v31 = *(float *)(a1 + 1024);
  if (!v23 || (float)(v31 * (float)v23) < v30)
  {
    BOOL v32 = 1;
    if (v23 >= 3) {
      BOOL v32 = (v23 & (v23 - 1)) != 0;
    }
    unint64_t v33 = v32 | (2 * v23);
    unint64_t v34 = vcvtps_u32_f32(v30 / v31);
    if (v33 <= v34) {
      int8x8_t prime = (int8x8_t)v34;
    }
    else {
      int8x8_t prime = (int8x8_t)v33;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v23 = *(void *)(a1 + 1000);
    if (*(void *)&prime > v23) {
      goto LABEL_65;
    }
    if (*(void *)&prime < v23)
    {
      unint64_t v42 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 1016) / *(float *)(a1 + 1024));
      if (v23 < 3 || (uint8x8_t v43 = (uint8x8_t)vcnt_s8((int8x8_t)v23), v43.i16[0] = vaddlv_u8(v43), v43.u32[0] > 1uLL))
      {
        unint64_t v42 = std::__next_prime(v42);
      }
      else
      {
        uint64_t v44 = 1 << -(char)__clz(v42 - 1);
        if (v42 >= 2) {
          unint64_t v42 = v44;
        }
      }
      if (*(void *)&prime <= v42) {
        int8x8_t prime = (int8x8_t)v42;
      }
      if (*(void *)&prime >= v23)
      {
        unint64_t v23 = *(void *)(a1 + 1000);
      }
      else
      {
        if (prime)
        {
LABEL_65:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          int v36 = operator new(8 * *(void *)&prime);
          __int16 v37 = *v10;
          *uint8x8_t v10 = v36;
          if (v37) {
            operator delete(v37);
          }
          uint64_t v38 = 0;
          *(int8x8_t *)(a1 + 1000) = prime;
          do
            *((void *)*v10 + v38++) = 0;
          while (*(void *)&prime != v38);
          uint64_t v39 = (void *)*v29;
          if (*v29)
          {
            unint64_t v40 = v39[1];
            uint8x8_t v41 = (uint8x8_t)vcnt_s8(prime);
            v41.i16[0] = vaddlv_u8(v41);
            if (v41.u32[0] > 1uLL)
            {
              if (v40 >= *(void *)&prime) {
                v40 %= *(void *)&prime;
              }
            }
            else
            {
              v40 &= *(void *)&prime - 1;
            }
            *((void *)*v10 + v40) = v29;
            unint64_t v45 = (void *)*v39;
            if (*v39)
            {
              do
              {
                unint64_t v46 = v45[1];
                if (v41.u32[0] > 1uLL)
                {
                  if (v46 >= *(void *)&prime) {
                    v46 %= *(void *)&prime;
                  }
                }
                else
                {
                  v46 &= *(void *)&prime - 1;
                }
                if (v46 != v40)
                {
                  if (!*((void *)*v10 + v46))
                  {
                    *((void *)*v10 + v46) = v39;
                    goto LABEL_90;
                  }
                  void *v39 = *v45;
                  *unint64_t v45 = **((void **)*v10 + v46);
                  **((void **)*v10 + v46) = v45;
                  unint64_t v45 = v39;
                }
                unint64_t v46 = v40;
LABEL_90:
                uint64_t v39 = v45;
                unint64_t v45 = (void *)*v45;
                unint64_t v40 = v46;
              }
              while (v45);
            }
          }
          unint64_t v23 = (unint64_t)prime;
          goto LABEL_94;
        }
        uint64_t v55 = *v10;
        *uint8x8_t v10 = 0;
        if (v55) {
          operator delete(v55);
        }
        unint64_t v23 = 0;
        *(void *)(a1 + 1000) = 0;
      }
    }
LABEL_94:
    if ((v23 & (v23 - 1)) != 0)
    {
      if (v23 <= v22) {
        long long v21 = (void **)(v22 % v23);
      }
      else {
        long long v21 = (void **)v22;
      }
    }
    else
    {
      long long v21 = (void **)((v23 - 1) & v22);
    }
  }
  int v47 = (void *)*((void *)*v10 + (void)v21);
  uint64_t v48 = v58[0];
  if (v47)
  {
    *(void *)v58[0] = *v47;
LABEL_107:
    *int v47 = v48;
    goto LABEL_108;
  }
  *(void *)v58[0] = *v29;
  void *v29 = v48;
  *((void *)*v10 + (void)v21) = v29;
  if (*(void *)v48)
  {
    unint64_t v49 = *(void *)(*(void *)v48 + 8);
    if ((v23 & (v23 - 1)) != 0)
    {
      if (v49 >= v23) {
        v49 %= v23;
      }
    }
    else
    {
      v49 &= v23 - 1;
    }
    int v47 = (char *)*v10 + 8 * v49;
    goto LABEL_107;
  }
LABEL_108:
  v58[0] = 0;
  ++*(void *)(a1 + 1016);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>,void *>>>>::reset[abi:ne180100]((uint64_t)v58);
LABEL_109:
  Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Collection::~Collection((Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Collection *)v125);
  Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Collection::~Collection((Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Collection *)v124);
  if (SHIBYTE(v123) < 0) {
    operator delete((void *)__p);
  }
  Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Collection::~Collection((Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Collection *)&v92);
  Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Collection::~Collection((Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Collection *)&v63);
  if (SHIBYTE(v62) < 0) {
    operator delete(v60);
  }
  long long v50 = (std::string *)std::__hash_table<std::__hash_value_type<unsigned long long,int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,int>>>::find<unsigned long long>((void *)(a1 + 992), &v57);
  long long v51 = v50;
  if (!v50) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  std::string::operator=(v50 + 1, (const std::string *)a3);
  float v52 = *(double *)a1;
  Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Collection::Load((uint64_t)&v51[2], v56 + 3, v56[9], (uint64_t *)(a1 + 8), (uint64_t *)a3, (uint64_t *)&Phase::SpatialModeler::ReverbPresetDatabase::Implementation::EarlyReflectionsCollection::sName, v52);
  float v53 = *(double *)a1;
  return Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Collection::Load((uint64_t)&v51[19].__r_.__value_.__r.__words[2], v56 + 6, v56[9], (uint64_t *)(a1 + 8), (uint64_t *)a3, (uint64_t *)&Phase::SpatialModeler::ReverbPresetDatabase::Implementation::LateReflectionsCollection::sName, v53);
}

void sub_222073C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  std::pair<unsigned long long const,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>::~pair((uint64_t)&STACK[0x3A0]);
  Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry::~Entry((void **)va1);
  _Unwind_Resume(a1);
}

void *Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Query@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  unint64_t v13 = a2;
  __n128 result = std::__hash_table<std::__hash_value_type<unsigned long long,int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,int>>>::find<unsigned long long>((void *)(a1 + 992), &v13);
  if (!result) {
    goto LABEL_5;
  }
  if (a3 == 1)
  {
    int8x8_t v12 = (uint64_t (***)(void))(result + 59);
    return Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Collection::Query(v12, a4, (Phase *)(a1 + 8), a5, a6, *(double *)a1);
  }
  if (a3)
  {
LABEL_5:
    *(_DWORD *)a5 = 3;
    *(unsigned char *)(a5 + 4) = 1;
    *(void *)(a5 + 8) = 0;
    *(_DWORD *)(a5 + 204) = 0;
    *(void *)(a5 + 48) = 0;
    *(void *)(a5 + 56) = 0;
    *(void *)(a5 + 40) = 0;
    *(void *)(a5 + 96) = 0;
    *(void *)(a5 + 104) = 0;
    *(void *)(a5 + 88) = 0;
    *(void *)(a5 + 136) = 0;
    *(void *)(a5 + 144) = 0;
    *(void *)(a5 + 184) = 0;
    *(void *)(a5 + 192) = 0;
    *(void *)(a5 + 176) = 0;
    *(_WORD *)(a5 + 200) = 0;
    return result;
  }
  int8x8_t v12 = (uint64_t (***)(void))(result + 6);
  return Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Collection::Query(v12, a4, (Phase *)(a1 + 8), a5, a6, *(double *)a1);
}

uint64_t std::pair<unsigned long long const,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry::~Entry(void **this)
{
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void *Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Collection::Load(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, float a7)
{
  v88[5] = *MEMORY[0x263EF8340];
  if (a3 != 3 && a3 != 10) {
    __assert_rtn("Load", "SpatialModelerReverbPresetDatabase.cpp", 334, "inSubbandCount == 3 || inSubbandCount == 10");
  }
  uint64_t v13 = a2[1];
  uint64_t v56 = *a2;
  unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v13 - *a2) >> 3);
  unint64_t v83 = v14;
  uint64_t v81 = 4;
  uint64_t v85 = (uint64_t)a4;
  v86[0] = &v83;
  v86[1] = &v81;
  uint64_t v79 = (uint64_t)a4;
  Phase::details::AllocArray<Phase::Vector<float,3ul>,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&>(v14, (uint64_t)&v85, &v79, (Phase **)buf);
  uint64_t v15 = *(void *)buf;
  *(void *)buf = 0;
  uint64_t v87 = v15;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)v88, (uint64_t)&buf[8]);
  v88[4] = v14;
  std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)buf);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](&buf[8]);
  uint64_t v81 = v14;
  uint64_t v79 = 4;
  unint64_t v83 = (unint64_t)a4;
  v84[0] = &v81;
  v84[1] = &v79;
  uint64_t v59 = (uint64_t)a4;
  Phase::details::AllocArray<float,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(float*)#1} const&>(v14, (uint64_t)&v83, &v59, (Phase **)buf);
  uint64_t v16 = *(void *)buf;
  *(void *)buf = 0;
  uint64_t v85 = v16;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)v86, (uint64_t)&buf[8]);
  v86[4] = v14;
  std::unique_ptr<float [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)buf);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](&buf[8]);
  uint64_t v79 = v14;
  uint64_t v58 = a4;
  uint64_t v59 = 1;
  uint64_t v81 = (uint64_t)a4;
  v82[0] = &v79;
  v82[1] = &v59;
  Phase::details::AllocArray<BOOL,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(BOOL*)#1} const&>(v14, (uint64_t)&v81, (uint64_t *)&v58, (Phase **)buf);
  uint64_t v17 = *(void *)buf;
  *(void *)buf = 0;
  unint64_t v83 = v17;
  uint64_t v55 = (Phase::HeapAllocator *)a4;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)v84, (uint64_t)&buf[8]);
  v84[4] = v14;
  std::unique_ptr<BOOL [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)buf);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](&buf[8]);
  int v54 = (**(uint64_t (***)(uint64_t))a1)(a1);
  if (v13 != v56)
  {
    uint64_t v18 = 0;
    if (v14 <= 1) {
      uint64_t v19 = 1;
    }
    else {
      uint64_t v19 = v14;
    }
    do
    {
      unint64_t v20 = (Phase::Logger *)(*(void *(**)(unsigned char *__return_ptr, uint64_t, float, float))(*(void *)a1 + 8))(buf, a1, *(float *)(*a2 + 24 * v18), *(float *)(*a2 + 24 * v18 + 4));
      long long v21 = (_DWORD *)(v87 + 12 * v18);
      *long long v21 = *(_DWORD *)buf;
      v21[1] = *(_DWORD *)&buf[4];
      v21[2] = *(_DWORD *)&buf[8];
      uint64_t v22 = *a2 + 24 * v18;
      *(_DWORD *)(v85 + 4 * v18) = *(_DWORD *)(v22 + 8);
      unint64_t v23 = *(float **)(v22 + 16);
      uint8x8_t v24 = &v23[a3];
      uint64_t v25 = 4 * a3;
      uint8x8_t v26 = v23;
      while (*v26 >= 0.0)
      {
        ++v26;
        v25 -= 4;
        if (!v25)
        {
          uint8x8_t v26 = &v23[a3];
          break;
        }
      }
      uint64_t v27 = 4 * a3;
      while (*v23 <= 0.0)
      {
        ++v23;
        v27 -= 4;
        if (!v27)
        {
          if (v26 != v24)
          {
            LOBYTE(v28) = 1;
            goto LABEL_23;
          }
          goto LABEL_17;
        }
      }
      BOOL v29 = v26 == v24;
      BOOL v28 = v27 == 0;
      if ((v29 ^ v28)) {
        goto LABEL_23;
      }
LABEL_17:
      float v30 = **(NSObject ***)(Phase::Logger::GetInstance(v20) + 560);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
      {
        if (*((char *)a5 + 23) >= 0) {
          float v31 = a5;
        }
        else {
          float v31 = (uint64_t *)*a5;
        }
        uint64_t v32 = *a6;
        *(_DWORD *)buf = 136316162;
        *(void *)&uint8_t buf[4] = "SpatialModelerReverbPresetDatabase.cpp";
        __int16 v61 = 1024;
        int v62 = 151;
        __int16 v63 = 2080;
        int v64 = v31;
        __int16 v65 = 2080;
        uint64_t v66 = v32;
        __int16 v67 = 2048;
        uint64_t v68 = v18;
        _os_log_impl(&dword_221E5E000, v30, OS_LOG_TYPE_DEBUG, "%25s:%-5d Invalid mix of positive and negative subband gains: %s (%s[%zu])", buf, 0x30u);
      }
      LOBYTE(v28) = 0;
LABEL_23:
      *(unsigned char *)(v83 + v18++) = v28;
    }
    while (v18 != v19);
  }
  Phase::AllocPackedSubbandArray<float,Phase::HeapAllocator>(v55, v14, 3, (Phase **)&v81);
  Phase::AllocPackedSubbandArray<float,Phase::HeapAllocator>(v55, v14, 10, (Phase **)&v79);
  if (a3 == 10)
  {
    if (v13 != v56)
    {
      uint64_t v42 = 0;
      uint64_t v43 = 0;
      if (v14 <= 1) {
        uint64_t v44 = 1;
      }
      else {
        uint64_t v44 = v14;
      }
      do
      {
        uint64_t v45 = 0;
        uint64_t v46 = *(void *)(v79 + 8);
        int v47 = (char *)(v79 + 16 + 4 * v46 * v43);
        uint64_t v48 = *(void *)(*a2 + 24 * v43 + 16);
        unint64_t v49 = (char *)(v79 + 16 + v46 * v42);
        do
        {
          float v50 = *(float *)(v48 + v45);
          if (v50 < 0.0) {
            float v50 = -v50;
          }
          *(float *)&v49[v45] = v50;
          v45 += 4;
        }
        while (v45 != 40);
        Phase::GetValuesFromFrequencyResponse<float const*,float *,float const*,float *,&float Phase::Square<float>,&float Phase::SquareRoot<float>>(Phase::sOctaveBandFrequencies, Phase::sThreeBandFrequencies, (uint64_t)v47, Phase::sThreeBandFrequencies, &Phase::sThreeBandFrequencies[3], v81 + 4 * *(void *)(v81 + 8) * v43++ + 16);
        v42 += 4;
      }
      while (v43 != v44);
    }
  }
  else if (a3 == 3 && v13 != v56)
  {
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    if (v14 <= 1) {
      uint64_t v35 = 1;
    }
    else {
      uint64_t v35 = v14;
    }
    do
    {
      uint64_t v36 = 0;
      uint64_t v37 = *(void *)(v81 + 8);
      uint64_t v38 = (char *)(v81 + 16 + 4 * v37 * v34);
      uint64_t v39 = *(void *)(*a2 + 24 * v34 + 16);
      unint64_t v40 = (char *)(v81 + 16 + v37 * v33);
      do
      {
        float v41 = *(float *)(v39 + v36);
        if (v41 < 0.0) {
          float v41 = -v41;
        }
        *(float *)&v40[v36] = v41;
        v36 += 4;
      }
      while (v36 != 12);
      Phase::GetValuesFromFrequencyResponse<float const*,float *,float const*,float *,&float Phase::Square<float>,&float Phase::SquareRoot<float>>(Phase::sThreeBandFrequencies, &Phase::sThreeBandFrequencies[3], (uint64_t)v38, Phase::sOctaveBandFrequencies, Phase::sThreeBandFrequencies, v79 + 4 * *(void *)(v79 + 8) * v34++ + 16);
      v33 += 4;
    }
    while (v34 != v35);
  }
  double v51 = a7;
  Phase::SpatialModeler::sGenerateReflections(buf, &v87, &v85, (uint64_t **)&v81, (uint64_t *)&v83, 1, v54, v55, v51, v51);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)buf;
  *(unsigned char *)(a1 + 12) = buf[4];
  std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(a1 + 16), (uint64_t *)&buf[8]);
  *(void *)(a1 + 56) = v69;
  std::unique_ptr<float [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(a1 + 64), &v70);
  *(void *)(a1 + 104) = v72;
  std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(a1 + 112), &v73);
  std::unique_ptr<BOOL [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(a1 + 152), &v75);
  *(void *)(a1 + 192) = v77;
  *(_OWORD *)(a1 + 200) = v78;
  std::unique_ptr<BOOL [],std::function<void ()(void *)>>::reset[abi:ne180100](&v75);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v76);
  std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::reset[abi:ne180100](&v73, 0);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v74);
  std::unique_ptr<float [],std::function<void ()(void *)>>::reset[abi:ne180100](&v70);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v71);
  std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)&buf[8]);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((int *)((char *)&v62 + 2));
  Phase::SpatialModeler::sGenerateReflections(buf, &v87, &v85, (uint64_t **)&v79, (uint64_t *)&v83, 1, v54, v55, v51, v51);
  *(_DWORD *)(a1 + 216) = *(_DWORD *)buf;
  uint64_t v52 = a1 + 216;
  *(unsigned char *)(v52 + 4) = buf[4];
  std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(v52 + 8), (uint64_t *)&buf[8]);
  *(void *)(v52 + 48) = v69;
  std::unique_ptr<float [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(v52 + 56), &v70);
  *(void *)(v52 + 96) = v72;
  std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(v52 + 104), &v73);
  std::unique_ptr<BOOL [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(v52 + 144), &v75);
  *(void *)(v52 + 184) = v77;
  *(_OWORD *)(v52 + 192) = v78;
  std::unique_ptr<BOOL [],std::function<void ()(void *)>>::reset[abi:ne180100](&v75);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v76);
  std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::reset[abi:ne180100](&v73, 0);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v74);
  std::unique_ptr<float [],std::function<void ()(void *)>>::reset[abi:ne180100](&v70);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v71);
  std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)&buf[8]);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((int *)((char *)&v62 + 2));
  std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::reset[abi:ne180100](&v79, 0);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v80);
  std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::reset[abi:ne180100](&v81, 0);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v82);
  std::unique_ptr<BOOL [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)&v83);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v84);
  std::unique_ptr<float [],std::function<void ()(void *)>>::reset[abi:ne180100](&v85);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v86);
  std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::reset[abi:ne180100](&v87);
  return std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v88);
}

void sub_222074668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::reset[abi:ne180100](&a49, 0);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](&a50);
  std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::reset[abi:ne180100](&a54, 0);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](&a55);
  std::unique_ptr<BOOL [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)(v55 - 256));
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](a12);
  std::unique_ptr<float [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)(v55 - 208));
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](a13);
  std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)(v55 - 160));
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](a14);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<unsigned long long const,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<unsigned long long const,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>,0>(uint64_t a1)
{
  Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Collection::~Collection((Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Collection *)(a1 + 456));
  Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Collection::~Collection((Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Collection *)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 8);
    operator delete(v2);
  }
}

uint64_t Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Collection::Collection(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  *(void *)a1 = &unk_26D47ABB0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  *(void *)(a1 + 16) = v4;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100](a1 + 24, a2 + 24);
  uint64_t v5 = *(void *)(v2 + 56);
  uint64_t v6 = *(void *)(v2 + 64);
  *(void *)(v2 + 64) = 0;
  *(void *)(a1 + 56) = v5;
  *(void *)(a1 + 64) = v6;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100](a1 + 72, v2 + 72);
  uint64_t v7 = *(void *)(v2 + 104);
  uint64_t v8 = *(void *)(v2 + 112);
  *(void *)(v2 + 112) = 0;
  *(void *)(a1 + 104) = v7;
  *(void *)(a1 + 112) = v8;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100](a1 + 120, v2 + 120);
  uint64_t v9 = *(void *)(v2 + 152);
  *(void *)(v2 + 152) = 0;
  *(void *)(a1 + 152) = v9;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100](a1 + 160, v2 + 160);
  *(void *)(a1 + 192) = *(void *)(v2 + 192);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(v2 + 200);
  uint64_t v10 = *(void *)(v2 + 216);
  v2 += 216;
  *(void *)(a1 + 216) = v10;
  uint64_t v11 = *(void *)(v2 + 8);
  *(void *)(v2 + 8) = 0;
  *(void *)(a1 + 224) = v11;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100](a1 + 232, v2 + 16);
  uint64_t v12 = *(void *)(v2 + 48);
  uint64_t v13 = *(void *)(v2 + 56);
  *(void *)(v2 + 56) = 0;
  *(void *)(a1 + 264) = v12;
  *(void *)(a1 + 272) = v13;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100](a1 + 280, v2 + 64);
  uint64_t v14 = *(void *)(v2 + 96);
  uint64_t v15 = *(void *)(v2 + 104);
  *(void *)(v2 + 104) = 0;
  *(void *)(a1 + 312) = v14;
  *(void *)(a1 + 320) = v15;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100](a1 + 328, v2 + 112);
  uint64_t v16 = *(void *)(v2 + 144);
  *(void *)(v2 + 144) = 0;
  *(void *)(a1 + 360) = v16;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100](a1 + 368, v2 + 152);
  *(void *)(a1 + 400) = *(void *)(v2 + 184);
  *(_OWORD *)(a1 + 408) = *(_OWORD *)(v2 + 192);
  return a1;
}

uint64_t Phase::SpatialModeler::ReverbPresetDatabase::Implementation::EarlyReflectionsCollection::GetDirectionType(Phase::SpatialModeler::ReverbPresetDatabase::Implementation::EarlyReflectionsCollection *this)
{
  return 1;
}

float Phase::SpatialModeler::ReverbPresetDatabase::Implementation::EarlyReflectionsCollection::GetDirectionFromAngles@<S0>(float a1@<S0>, float a2@<S1>, float *a3@<X8>)
{
  float v6 = (float)((float)(a2 + -180.0) - (float)(floorf((float)(a2 + -180.0) / 360.0) * 360.0)) + 0.0;
  if (v6 >= 360.0) {
    float v6 = nextafterf(360.0, 0.0);
  }
  float v7 = (float)(90.0 - a1) * 0.017453;
  float v8 = v6 * 0.017453;
  __float2 v9 = __sincosf_stret(v7);
  __float2 v10 = __sincosf_stret(v8);
  float result = v9.__sinval * v10.__sinval;
  *a3 = v9.__sinval * v10.__sinval;
  a3[1] = v9.__cosval;
  a3[2] = v9.__sinval * v10.__cosval;
  return result;
}

uint64_t Phase::SpatialModeler::ReverbPresetDatabase::Implementation::LateReflectionsCollection::GetDirectionType(Phase::SpatialModeler::ReverbPresetDatabase::Implementation::LateReflectionsCollection *this)
{
  return 0;
}

void Phase::SpatialModeler::ReverbPresetDatabase::Implementation::LateReflectionsCollection::GetDirectionFromAngles(float a1@<S0>, float a2@<S1>, uint64_t a3@<X8>)
{
  float v6 = (float)((float)(360.0 - a2) - (float)(floorf((float)(360.0 - a2) / 360.0) * 360.0)) + 0.0;
  if (v6 >= 360.0) {
    float v6 = nextafterf(360.0, 0.0);
  }
  *(_DWORD *)a3 = 1065353216;
  *(float *)(a3 + 4) = 90.0 - a1;
  *(float *)(a3 + 8) = v6;
}

void Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Collection::~Collection(Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Collection *this)
{
  *(void *)this = &unk_26D47ABB0;
  uint64_t v2 = (uint64_t *)((char *)this + 224);
  std::unique_ptr<BOOL [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)this + 45);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 46);
  std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)this + 40, 0);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 41);
  std::unique_ptr<float [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)this + 34);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 35);
  std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::reset[abi:ne180100](v2);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 29);
  std::unique_ptr<BOOL [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)this + 19);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 20);
  std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)this + 14, 0);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 15);
  std::unique_ptr<float [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)this + 8);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 9);
  std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)this + 2);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 3);
}

void *Phase::SpatialModeler::sGenerateReflections(void *result, uint64_t *a2, uint64_t *a3, uint64_t **a4, uint64_t *a5, char a6, int a7, Phase *a8, double a9, double a10)
{
  uint64_t v17 = result;
  if (a9 >= a10) {
    double v18 = a9;
  }
  else {
    double v18 = a10;
  }
  uint64_t v19 = *a4;
  uint64_t v21 = **a4;
  unint64_t v20 = (*a4)[1];
  if (v21)
  {
    uint64_t v22 = 0;
    unsigned int v23 = 0;
    uint8x8_t v24 = (float *)(v19 + 2);
    uint64_t v25 = (char *)v19 + 20;
    do
    {
      if (v20)
      {
        if (v18 >= v24[v22 * v20])
        {
          uint64_t v27 = 0;
          do
          {
            uint64_t v28 = v27;
            if (v20 - 1 == v27) {
              break;
            }
            double v29 = *(float *)&v25[4 * v27++];
          }
          while (v18 >= v29);
          int v26 = v20 > v28 + 1;
        }
        else
        {
          int v26 = 1;
        }
      }
      else
      {
        int v26 = 0;
      }
      v23 += v26;
      ++v22;
      v25 += 4 * v20;
    }
    while (v22 != v21);
  }
  else
  {
    unsigned int v23 = 0;
  }
  *(_DWORD *)float result = 3;
  *((unsigned char *)result + 4) = 1;
  result[1] = 0;
  *((_DWORD *)result + 51) = 0;
  result[6] = 0;
  result[7] = 0;
  result[5] = 0;
  result[12] = 0;
  result[13] = 0;
  result[11] = 0;
  result[17] = 0;
  result[18] = 0;
  result[23] = 0;
  result[24] = 0;
  result[22] = 0;
  *((_WORD *)result + 100) = 0;
  if (v23)
  {
    float result = Phase::SpatialModeler::AllocMetadata<float,Phase::HeapAllocator>(result, a8, v23, v20);
    if (v21)
    {
      uint64_t v30 = 0;
      int v31 = 0;
      uint64_t v32 = (uint64_t)(*a4 + 2);
      uint64_t v33 = *a2;
      uint64_t v34 = v17[1];
      uint64_t v35 = *a3;
      uint64_t v36 = v17[7];
      uint64_t v37 = v17[13];
      uint64_t v38 = *a5;
      float result = (void *)v17[18];
      uint64_t v39 = 4 * (*a4)[1];
      do
      {
        if (v20)
        {
          uint64_t v40 = 0;
          while (v18 >= *(float *)(v32 + 4 * v40))
          {
            if (v20 == ++v40) {
              goto LABEL_30;
            }
          }
          uint64_t v41 = 0;
          uint64_t v42 = (_DWORD *)(v33 + 12 * v30);
          uint64_t v43 = (_DWORD *)(v34 + 12 * v31);
          _DWORD *v43 = *v42;
          v43[1] = v42[1];
          uint64_t v43[2] = v42[2];
          *(_DWORD *)(v36 + 4 * v31) = *(_DWORD *)(v35 + 4 * v30);
          uint64_t v44 = v37 + 16 + 4 * *(void *)(v37 + 8) * v31;
          do
          {
            float v45 = *(float *)(v32 + 4 * v41);
            if (v45 <= a10) {
              float v45 = a10;
            }
            *(float *)(v44 + 4 * v41++) = v45;
          }
          while (v20 != v41);
          *((unsigned char *)result + v31++) = *(unsigned char *)(v38 + v30);
        }
LABEL_30:
        ++v30;
        v32 += v39;
      }
      while (v30 != v21);
    }
    else
    {
      int v31 = 0;
    }
    if (v23 != v31) {
      __assert_rtn("sGenerateReflections", "SpatialModelerReverbPresetDatabase.cpp", 118, "outputReflectionCount == outIdx");
    }
    *((unsigned char *)v17 + 201) = a6;
    *((_DWORD *)v17 + 51) = a7;
  }
  return result;
}

void sub_222074DA0(_Unwind_Exception *a1)
{
  Phase::SpatialModeler::DirectionalMetadataOutput<float>::~DirectionalMetadataOutput(v1);
  _Unwind_Resume(a1);
}

void Phase::GetValuesFromFrequencyResponse<float const*,float *,float const*,float *,&float Phase::Square<float>,&float Phase::SquareRoot<float>>(float *a1, float *a2, uint64_t a3, float *a4, float *a5, uint64_t a6)
{
  uint64_t v9 = (char *)a2 - (char *)a1;
  if (a2 != a1)
  {
    for (uint64_t i = a1 + 1; i != a2; ++i)
    {
      float v12 = *(i - 1);
      float v11 = *i;
      if (v11 < v12) {
        __assert_rtn("GetValuesFromFrequencyResponse", "FrequencyResponse.hpp", 262, "std::is_sorted(inFrequenciesFirst, inFrequenciesLast)");
      }
    }
  }
  if (a4 != a5)
  {
    for (uint64_t j = a4 + 1; j != a5; ++j)
    {
      float v15 = *(j - 1);
      float v14 = *j;
      if (v14 < v15) {
        __assert_rtn("GetValuesFromFrequencyResponse", "FrequencyResponse.hpp", 263, "std::is_sorted(inOutputFrequenciesFirst, inOutputFrequenciesLast)");
      }
    }
  }
  Phase::GetBandsFromCenterFrequencies<float const*,float>(a1, a2, (float **)v88, 22000.0);
  Phase::GetBandsFromCenterFrequencies<float const*,float>(a4, a5, (float **)v87, 22000.0);
  long long __p = 0;
  uint64_t v85 = 0;
  uint64_t v86 = 0;
  uint64_t v81 = 0;
  uint64_t v82 = 0;
  unint64_t v83 = 0;
  long long v78 = 0;
  uint64_t v80 = 0;
  if ((char *)a5 - (char *)a4 > 0)
  {
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = a5 - a4;
    uint64_t v21 = v9 >> 2;
    uint64_t v22 = (v9 >> 2) - 1;
    if (v20 <= 1) {
      uint64_t v20 = 1;
    }
    uint64_t v76 = v20;
    do
    {
      unsigned int v23 = (float *)((char *)v87[0] + 8 * v19);
      float v24 = *v23;
      float v25 = v23[1];
      uint64_t v85 = (float *)__p;
      uint64_t v82 = v17;
      uint64_t v79 = v16;
      if (v18 < v21)
      {
        int v26 = (float *)((char *)v88[0] + 8 * v18);
        float v27 = *v26;
        float v28 = v26[1];
        if (v25 < v28) {
          float v28 = v25;
        }
        if (v27 >= v24) {
          float v29 = *v26;
        }
        else {
          float v29 = v24;
        }
        float v30 = fmaxf(v28 - v29, 0.0);
        float v31 = v25;
        uint64_t v32 = v18;
        if (v30 == 0.0)
        {
LABEL_62:
          v18 -= v27 != v31;
        }
        else
        {
          while (1)
          {
            uint64_t v33 = v85;
            if (v85 >= v86)
            {
              uint64_t v35 = (float *)__p;
              uint64_t v36 = ((char *)v85 - (unsigned char *)__p) >> 2;
              unint64_t v37 = v36 + 1;
              if ((unint64_t)(v36 + 1) >> 62) {
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v38 = (char *)v86 - (unsigned char *)__p;
              if (((char *)v86 - (unsigned char *)__p) >> 1 > v37) {
                unint64_t v37 = v38 >> 1;
              }
              if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v39 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v39 = v37;
              }
              if (v39)
              {
                uint64_t v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v86, v39);
                uint64_t v35 = (float *)__p;
                uint64_t v33 = v85;
              }
              else
              {
                uint64_t v40 = 0;
              }
              uint64_t v41 = (float *)&v40[4 * v36];
              float *v41 = v30;
              uint64_t v34 = v41 + 1;
              while (v33 != v35)
              {
                int v42 = *((_DWORD *)v33-- - 1);
                *((_DWORD *)v41-- - 1) = v42;
              }
              long long __p = v41;
              uint64_t v85 = v34;
              uint64_t v86 = (float *)&v40[4 * v39];
              if (v35) {
                operator delete(v35);
              }
            }
            else
            {
              *uint64_t v85 = v30;
              uint64_t v34 = v33 + 1;
            }
            uint64_t v85 = v34;
            uint64_t v43 = v82;
            if (v82 >= v83)
            {
              uint64_t v44 = (char *)v81;
              uint64_t v45 = (v82 - (unsigned char *)v81) >> 3;
              unint64_t v46 = v45 + 1;
              if ((unint64_t)(v45 + 1) >> 61) {
                std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v47 = v83 - (unsigned char *)v81;
              if ((v83 - (unsigned char *)v81) >> 2 > v46) {
                unint64_t v46 = v47 >> 2;
              }
              if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v48 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v48 = v46;
              }
              if (v48)
              {
                unint64_t v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)&v83, v48);
                uint64_t v44 = (char *)v81;
                uint64_t v43 = v82;
              }
              else
              {
                unint64_t v49 = 0;
              }
              float v50 = (uint64_t *)&v49[8 * v45];
              uint64_t *v50 = v18;
              uint64_t v17 = (char *)(v50 + 1);
              while (v43 != v44)
              {
                uint64_t v51 = *((void *)v43 - 1);
                v43 -= 8;
                *--float v50 = v51;
              }
              uint64_t v81 = v50;
              uint64_t v82 = v17;
              unint64_t v83 = &v49[8 * v48];
              if (v44) {
                operator delete(v44);
              }
            }
            else
            {
              *(void *)uint64_t v82 = v18;
              uint64_t v17 = v43 + 8;
            }
            uint64_t v82 = v17;
            if (v18 == v22) {
              uint64_t v32 = v18;
            }
            if (++v18 == v21) {
              break;
            }
            uint64_t v52 = (float *)((char *)v88[0] + 8 * v18);
            float v27 = *v52;
            float v53 = v52[1];
            int v54 = (float *)((char *)v87[0] + 8 * v19);
            float v55 = *v54;
            float v31 = v54[1];
            if (v31 < v53) {
              float v53 = v54[1];
            }
            if (v27 >= v55) {
              float v55 = v27;
            }
            float v30 = fmaxf(v53 - v55, 0.0);
            if (v30 == 0.0) {
              goto LABEL_62;
            }
          }
          uint64_t v18 = v32;
        }
      }
      uint64_t v56 = v79;
      if (v17 == v81)
      {
        float v59 = 0.0;
      }
      else
      {
        unint64_t v57 = 0;
        float v58 = v25 - v24;
        float v59 = 0.0;
        double v60 = v79;
        uint64_t v17 = (char *)v81;
        do
        {
          float v61 = *((float *)__p + v57) / v58;
          float v62 = *(float *)(a3 + 4 * *(void *)&v17[8 * v57]);
          float v63 = v61 * (float)(v62 * v62);
          if (v60 >= v80)
          {
            int v64 = v78;
            uint64_t v65 = v60 - v78;
            unint64_t v66 = v65 + 1;
            if ((unint64_t)(v65 + 1) >> 62) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v67 = (char *)v80 - (char *)v78;
            if (((char *)v80 - (char *)v78) >> 1 > v66) {
              unint64_t v66 = v67 >> 1;
            }
            if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v68 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v68 = v66;
            }
            if (v68)
            {
              uint64_t v69 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v80, v68);
              int v64 = v78;
              double v60 = v79;
            }
            else
            {
              uint64_t v69 = 0;
            }
            uint64_t v70 = (float *)&v69[4 * v65];
            *uint64_t v70 = v63;
            uint64_t v56 = v70 + 1;
            while (v60 != v64)
            {
              int v71 = *((_DWORD *)v60-- - 1);
              *((_DWORD *)v70-- - 1) = v71;
            }
            long long v78 = v70;
            uint64_t v80 = (float *)&v69[4 * v68];
            if (v64) {
              operator delete(v64);
            }
          }
          else
          {
            float *v60 = v63;
            uint64_t v56 = v60 + 1;
          }
          float v59 = v59 + v61;
          uint64_t v79 = v56;
          ++v57;
          uint64_t v17 = (char *)v81;
          double v60 = v56;
        }
        while (v57 < (v82 - (unsigned char *)v81) >> 3);
      }
      uint64_t v16 = v78;
      double v72 = 0.0;
      if (v78 != v56)
      {
        uint64_t v73 = v78;
        do
        {
          float v74 = *v73++;
          double v72 = v72 + v74;
        }
        while (v73 != v56);
      }
      float v75 = v72;
      uint64_t v22 = (v9 >> 2) - 1;
      *(float *)(a6 + 4 * v19++) = sqrtf(v75 / v59);
    }
    while (v19 != v76);
    if (v78)
    {
      operator delete(v78);
      uint64_t v17 = (char *)v81;
    }
    if (v17)
    {
      uint64_t v82 = v17;
      operator delete(v17);
    }
  }
  if (__p)
  {
    uint64_t v85 = (float *)__p;
    operator delete(__p);
  }
  if (v87[0])
  {
    v87[1] = v87[0];
    operator delete(v87[0]);
  }
  if (v88[0])
  {
    v88[1] = v88[0];
    operator delete(v88[0]);
  }
}

void sub_222075304(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Collection::Query@<X0>(uint64_t (***a1)(void)@<X0>, uint64_t a2@<X1>, Phase *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  LODWORD(v28) = 3;
  BYTE4(v28) = 1;
  HIDWORD(v40) = 0;
  uint64_t v29 = 0;
  float v30[3] = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  v33[3] = 0;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  v36[3] = 0;
  uint64_t v37 = 0;
  v38[3] = 0;
  uint64_t v39 = 0;
  *(void *)&long long v40 = 0;
  WORD4(v40) = 0;
  if (a2 == 10)
  {
    __float2 v10 = a1 + 27;
  }
  else
  {
    if (a2 != 3)
    {
      *(_DWORD *)a4 = 3;
      *(unsigned char *)(a4 + 4) = 1;
      *(void *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 204) = 0;
      *(void *)(a4 + 48) = 0;
      *(void *)(a4 + 56) = 0;
      *(void *)(a4 + 40) = 0;
      *(void *)(a4 + 96) = 0;
      *(void *)(a4 + 104) = 0;
      *(void *)(a4 + 88) = 0;
      *(void *)(a4 + 136) = 0;
      *(void *)(a4 + 144) = 0;
      *(void *)(a4 + 184) = 0;
      *(void *)(a4 + 192) = 0;
      *(void *)(a4 + 176) = 0;
      *(_WORD *)(a4 + 200) = 0;
      goto LABEL_7;
    }
    __float2 v10 = a1 + 1;
  }
  int v11 = *((unsigned __int8 *)v10 + 201);
  int v12 = (**a1)(a1);
  Phase::SpatialModeler::sGenerateReflections(&v18, (uint64_t *)v10 + 1, (uint64_t *)v10 + 7, (uint64_t **)v10 + 13, (uint64_t *)v10 + 18, v11 != 0, v12, a3, a5, a6);
  LODWORD(v28) = v18;
  BYTE4(v28) = BYTE4(v18);
  std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::operator=[abi:ne180100](&v29, &v19);
  uint64_t v31 = v20[4];
  std::unique_ptr<float [],std::function<void ()(void *)>>::operator=[abi:ne180100](&v32, &v21);
  uint64_t v34 = v22[4];
  std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::operator=[abi:ne180100](&v35, &v23);
  std::unique_ptr<BOOL [],std::function<void ()(void *)>>::operator=[abi:ne180100](&v37, &v25);
  uint64_t v39 = v26[4];
  long long v40 = v27;
  std::unique_ptr<BOOL [],std::function<void ()(void *)>>::reset[abi:ne180100](&v25);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v26);
  std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::reset[abi:ne180100](&v23, 0);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v24);
  std::unique_ptr<float [],std::function<void ()(void *)>>::reset[abi:ne180100](&v21);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v22);
  std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::reset[abi:ne180100](&v19);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v20);
  uint64_t v13 = v29;
  uint64_t v29 = 0;
  *(void *)a4 = v28;
  *(void *)(a4 + 8) = v13;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100](a4 + 16, (uint64_t)v30);
  uint64_t v14 = v32;
  uint64_t v32 = 0;
  *(void *)(a4 + 48) = v31;
  *(void *)(a4 + 56) = v14;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100](a4 + 64, (uint64_t)v33);
  uint64_t v15 = v35;
  uint64_t v35 = 0;
  *(void *)(a4 + 96) = v34;
  *(void *)(a4 + 104) = v15;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100](a4 + 112, (uint64_t)v36);
  uint64_t v16 = v37;
  uint64_t v37 = 0;
  *(void *)(a4 + 144) = v16;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100](a4 + 152, (uint64_t)v38);
  *(void *)(a4 + 184) = v39;
  *(_OWORD *)(a4 + 192) = v40;
LABEL_7:
  std::unique_ptr<BOOL [],std::function<void ()(void *)>>::reset[abi:ne180100](&v37);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v38);
  std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::reset[abi:ne180100](&v35, 0);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v36);
  std::unique_ptr<float [],std::function<void ()(void *)>>::reset[abi:ne180100](&v32);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v33);
  std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::reset[abi:ne180100](&v29);
  return std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v30);
}

void sub_222075680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
}

Phase::SpatialModeler::ReverbPresetDatabase::Implementation *Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Implementation(Phase::SpatialModeler::ReverbPresetDatabase::Implementation *this, double a2, int a3)
{
  *((unsigned char *)this + 8) = 0;
  float v6 = (Phase::SpatialModeler::ReverbPresetDatabase::Implementation *)((char *)this + 8);
  *((void *)this + 16) = 0;
  *((_DWORD *)this + 34) = 0;
  *((_OWORD *)this + objc_destroyWeak(this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *(_OWORD *)((char *)this + 76) = 0u;
  *((void *)this + 12) = 0;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_DWORD *)this + 30) = 0;
  *((void *)this + 2) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 0;
  memset((char *)this + 140, 255, 0x280uLL);
  *((_OWORD *)this + 49) = 0u;
  *((_DWORD *)this + 200) = 0;
  *((_OWORD *)v6 + 50) = 0u;
  *((_OWORD *)v6 + 51) = 0u;
  *((_OWORD *)v6 + 52) = 0u;
  *((_OWORD *)v6 + 5objc_destroyWeak(this + 3) = 0u;
  *((_OWORD *)v6 + 54) = 0u;
  *((_OWORD *)v6 + 5std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear(this + 5) = 0u;
  *((_OWORD *)v6 + 56) = 0u;
  *((_OWORD *)v6 + 57) = 0u;
  *((_OWORD *)v6 + 58) = 0u;
  *((_OWORD *)v6 + 59) = 0u;
  *((_OWORD *)v6 + 60) = 0u;
  *((_OWORD *)v6 + 61) = 0u;
  *((_OWORD *)v6 + 62) = 0u;
  *((void *)this + 1Phase::SortedCommandQueue<Phase::SpatialModeler::PriorityQueue,Phase::SpatialModeler::PriorityQueueCommandType,std::variant<std::monostate,Phase::SpatialModeler::PriorityQueueEntry,Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueClusterIndexUpdate,Phase::SpatialModeler::PriorityQueueGlobals>>::ClearCommands(this + 27) = 0;
  *((_DWORD *)this + 256) = 1065353216;
  *(long double *)this = exp(a2 * 10.0 / 10.0 * 0.115129255);
  Phase::HeapAllocator::InitializeWithBacking(v6, 0x4000000uLL, "SpatialModelerReverbPresetDatabaseHeap", 16, 128, a3);
  return this;
}

void sub_222075788(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>>>::~__hash_table(v2 + 992);
  Phase::HeapAllocator::Destroy(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<unsigned long long const,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

Phase::SpatialModeler::ReverbPresetDatabase::Implementation *std::unique_ptr<Phase::SpatialModeler::ReverbPresetDatabase::Implementation>::reset[abi:ne180100](Phase::SpatialModeler::ReverbPresetDatabase::Implementation **a1, Phase::SpatialModeler::ReverbPresetDatabase::Implementation *a2)
{
  float result = *a1;
  *a1 = a2;
  if (result)
  {
    Phase::SpatialModeler::ReverbPresetDatabase::Implementation::~Implementation(result);
    JUMPOUT(0x223C938A0);
  }
  return result;
}

void Phase::SpatialModeler::ReverbPresetDatabase::Implementation::~Implementation(Phase::SpatialModeler::ReverbPresetDatabase::Implementation *this)
{
  uint64_t v2 = (char *)this + 992;
  std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>>>::clear((uint64_t)this + 992);
  Phase::HeapAllocator::Destroy((Phase::SpatialModeler::ReverbPresetDatabase::Implementation *)((char *)this + 8));
  std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>>>::~__hash_table((uint64_t)v2);
  Phase::HeapAllocator::Destroy((Phase::SpatialModeler::ReverbPresetDatabase::Implementation *)((char *)this + 8));
}

void std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Entry>>>::__deallocate_node(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void Phase::SpatialModeler::ReverbPresetFile::Load(std::string *a1, const std::string *a2)
{
  v26[72] = *MEMORY[0x263EF8340];
  std::string::operator=(a1, a2);
  uint64_t v3 = std::ifstream::basic_ifstream(v26);
  if (v26[17])
  {
    std::istream::seekg();
    std::istream::tellg();
    std::istream::seekg();
    uint64_t v4 = (Phase::Logger *)std::istream::read();
    int v12 = **(NSObject ***)(Phase::Logger::GetInstance(v4) + 560);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      int v13 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
      uint64_t v14 = (const std::string *)a2->__r_.__value_.__r.__words[0];
      uint64_t v15 = __error();
      if (v13 >= 0) {
        uint64_t v16 = a2;
      }
      else {
        uint64_t v16 = v14;
      }
      int v17 = *v15;
      __p[0] = 136315906;
      *(void *)&__p[1] = "SpatialModelerReverbPresetFile.cpp";
      __int16 v20 = 1024;
      int v21 = 89;
      __int16 v22 = 2080;
      uint64_t v23 = v16;
      __int16 v24 = 1024;
      int v25 = v17;
      _os_log_impl(&dword_221E5E000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [earlyReflectionCount == 0 is true]: \"Reverb preset file does not contain early reflections: %s (errno: %d)\"", (uint8_t *)__p, 0x22u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Reverb preset file does not contain early reflections: %s (errno: %d)");
  }
  uint64_t v5 = **(NSObject ***)(Phase::Logger::GetInstance((Phase::Logger *)v3) + 560);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    int v6 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
    float v7 = (const std::string *)a2->__r_.__value_.__r.__words[0];
    float v8 = __error();
    if (v6 >= 0) {
      uint64_t v9 = a2;
    }
    else {
      uint64_t v9 = v7;
    }
    int v10 = *v8;
    __p[0] = 136315906;
    *(void *)&__p[1] = "SpatialModelerReverbPresetFile.cpp";
    __int16 v20 = 1024;
    int v21 = 76;
    __int16 v22 = 2080;
    uint64_t v23 = v9;
    __int16 v24 = 1024;
    int v25 = v10;
    _os_log_impl(&dword_221E5E000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [!presetFile.is_open() is true]: \"Failed to open reverb preset file: %s (errno: %d)\"", (uint8_t *)__p, 0x22u);
  }
  int v11 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(v11, "Failed to open reverb preset file: %s (errno: %d)");
}

void sub_2220765DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
}

void std::vector<Phase::SpatialModeler::ReverbPresetFile::ReflectionEntry>::resize(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *(void *)a1) >> 3);
  unint64_t v6 = a2 - v5;
  if (a2 <= v5)
  {
    if (a2 < v5)
    {
      uint64_t v22 = v4 + 24 * a2;
      std::vector<Phase::SpatialModeler::ReverbPresetFile::ReflectionEntry>::__base_destruct_at_end[abi:ne180100](a1, v22);
    }
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 16);
    if (0xAAAAAAAAAAAAAAABLL * ((v7 - v3) >> 3) >= v6)
    {
      bzero(*(void **)(a1 + 8), 24 * ((24 * v6 - 24) / 0x18) + 24);
      *(void *)(a1 + 8) = v3 + 24 * ((24 * v6 - 24) / 0x18) + 24;
    }
    else
    {
      if (a2 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v4) >> 3);
      uint64_t v9 = 2 * v8;
      if (2 * v8 <= a2) {
        uint64_t v9 = a2;
      }
      if (v8 >= 0x555555555555555) {
        unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v10 = v9;
      }
      if (v10 > 0xAAAAAAAAAAAAAAALL) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v11 = 3 * v10;
      int v12 = (char *)operator new(24 * v10);
      int v13 = &v12[24 * v5];
      uint64_t v14 = &v12[8 * v11];
      size_t v15 = 24 * ((24 * v6 - 24) / 0x18) + 24;
      bzero(v13, v15);
      uint64_t v16 = &v13[v15];
      if (v3 == v4)
      {
        *(void *)a1 = v13;
        *(void *)(a1 + 8) = v16;
        *(void *)(a1 + 16) = v14;
      }
      else
      {
        do
        {
          uint64_t v17 = *(void *)(v3 - 24);
          v3 -= 24;
          int v18 = *(_DWORD *)(v3 + 8);
          *((void *)v13 - objc_destroyWeak(this + 3) = v17;
          v13 -= 24;
          *((_DWORD *)v13 + 2) = v18;
          uint64_t v19 = *(void *)(v3 + 16);
          *(void *)(v3 + 16) = 0;
          *((void *)v13 + 2) = v19;
        }
        while (v3 != v4);
        uint64_t v3 = *(void *)a1;
        uint64_t v20 = *(void *)(a1 + 8);
        *(void *)a1 = v13;
        *(void *)(a1 + 8) = v16;
        *(void *)(a1 + 16) = v14;
        while (v20 != v3)
        {
          uint64_t v21 = *(void *)(v20 - 8);
          *(void *)(v20 - 8) = 0;
          if (v21) {
            MEMORY[0x223C93870](v21, 0x1000C8052888210);
          }
          v20 -= 24;
        }
      }
      if (v3)
      {
        operator delete((void *)v3);
      }
    }
  }
}

uint64_t Phase::SpatialModeler::Scheduler::Init(Phase::Logger *a1, uint64_t a2, Phase::Logger *this, uint64_t a4)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (!this)
  {
    unint64_t v6 = **(NSObject ***)(Phase::Logger::GetInstance(a1) + 208);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      int v8 = 136315394;
      uint64_t v9 = "SpatialModelerScheduler.cpp";
      __int16 v10 = 1024;
      int v11 = 129;
      _os_log_impl(&dword_221E5E000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [nullptr == inpModeler is true]: \"SpatialModeler::Scheduler : null inModeler passed to Init()\"", (uint8_t *)&v8, 0x12u);
    }
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "SpatialModeler::Scheduler : null inModeler passed to Init()");
  }
  *(void *)a1 = this;
  *((void *)a1 + 1) = a2;
  *((void *)this + 2) = a2;
  uint64_t v4 = *(uint64_t (**)(Phase::Logger *, uint64_t))(*(void *)this + 32);

  return v4(this, a4);
}

void sub_222076A04(_Unwind_Exception *exception_object)
{
}

unsigned __int8 *Phase::SpatialModeler::Scheduler::SubmitQuery@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = result;
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (a2 && a3 && a3[22] != a3[21])
  {
    unsigned __int8 v7 = atomic_load(result + 16);
    if (v7)
    {
      uint64_t v14 = result + 24;
      *(unsigned char *)a4 = 0;
      uint64_t v15 = 9;
    }
    else
    {
      int v9 = 0;
      atomic_compare_exchange_strong((atomic_uint *volatile)a2, (unsigned int *)&v9, 1u);
      if (v9)
      {
        uint64_t v14 = result + 24;
        *(unsigned char *)a4 = 0;
        uint64_t v15 = 2;
      }
      else
      {
        float result = (unsigned __int8 *)(*(uint64_t (**)(void))(**(void **)result + 8))();
        if (result)
        {
          int v10 = 0;
          atomic_compare_exchange_strong((atomic_uint *volatile)(a2 + 104), (unsigned int *)&v10, atomic_fetch_add((atomic_uint *volatile)v4 + 5, 1u) + 1);
          if (!v10)
          {
            uint64_t v12 = a3[19];
            uint64_t v11 = a3[20];
            if (v11) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
            }
            int v13 = *(std::__shared_weak_count **)(a2 + 72);
            *(void *)(a2 + 64) = v12;
            *(void *)(a2 + 72) = v11;
            if (v13) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v13);
            }
            Phase::SpatialModeler::ActiveQueryList::Add((Phase::SpatialModeler::ActiveQueryList *)(a3[21] + 56), (Phase::SpatialModeler::Query *)a2);
          }
        }
        uint64_t v14 = v4 + 24;
        *(unsigned char *)a4 = 0;
        uint64_t v15 = 7;
      }
    }
  }
  else
  {
    uint64_t v14 = result + 24;
    *(unsigned char *)a4 = 0;
    uint64_t v15 = 8;
  }
  *(void *)(a4 + 8) = v15;
  *(void *)(a4 + 16) = v14;
  return result;
}

void Phase::SpatialModeler::ActiveQueryList::Add(Phase::SpatialModeler::ActiveQueryList *this, Phase::SpatialModeler::Query *a2)
{
}

uint64_t *std::unique_ptr<Phase::SpatialModeler::QueryState,std::function<void ()(void *)>>::operator=[abi:ne180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  std::unique_ptr<Phase::SpatialModeler::QueryState,std::function<void ()(void *)>>::reset[abi:ne180100](a1, v4);
  std::__function::__value_func<void ()(void *)>::operator=[abi:ne180100](a1 + 1, (uint64_t)(a2 + 1));
  return a1;
}

void Phase::SpatialModeler::Scheduler::CancelAllQueries(void *a1, unsigned __int8 *a2)
{
  if (a2)
  {
    atomic_store(1u, a2 + 25);
    unsigned __int8 v4 = atomic_load(a2 + 24);
    if (v4)
    {
      do
      {
        __ns.__rep_ = 1000000;
        std::this_thread::sleep_for (&__ns);
        unsigned __int8 v5 = atomic_load(a2 + 24);
      }
      while ((v5 & 1) != 0);
    }
    uint64_t v6 = *(void *)a2;
    uint64_t v7 = *((void *)a2 + 1);
    if (*(void *)a2 != v7)
    {
      do
      {
        uint64_t v8 = *(void *)(v6 + 168);
        uint64_t v9 = *(void *)(v6 + 176);
        while (v8 != v9)
        {
          for (uint64_t i = *(void **)(v8 + 56); i; uint64_t i = (void *)i[10])
          {
            (*(void (**)(void, void))(*(void *)*a1 + 72))(*a1, *i);
            uint64_t v11 = *i;
            atomic_store(0, (unsigned int *)(*i + 104));
            atomic_store(5u, (unsigned int *)v11);
            uint64_t v12 = *(void *)(v11 + 32);
            if (v12) {
              (*(void (**)(uint64_t))(*(void *)v12 + 48))(v12);
            }
          }
          std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100]((uint64_t **)(v8 + 56), 0);
          v8 += 96;
        }
        v6 += 192;
      }
      while (v6 != v7);
    }
    atomic_store(0, a2 + 25);
  }
}

uint64_t Phase::SpatialModeler::Scheduler::InitGraphSequence(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  std::vector<Phase::SpatialModeler::Graph>::reserve(a2, 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
  uint64_t v6 = *a3;
  uint64_t v7 = a3[1];
  if (*a3 == v7) {
    return 1;
  }
  while (1)
  {
    uint64_t v9 = *a2;
    unint64_t v8 = a2[1];
    if (v8 >= a2[2])
    {
      uint64_t v10 = std::vector<Phase::SpatialModeler::Graph>::__emplace_back_slow_path<Phase::SpatialModeler::GraphSequence &>(a2, (uint64_t)a2);
    }
    else
    {
      *(void *)unint64_t v8 = a2;
      *(_OWORD *)(v8 + 8) = 0u;
      *(_OWORD *)(v8 + 24) = 0u;
      *(_OWORD *)(v8 + 40) = 0u;
      *(void *)(v8 + 56) = -1;
      *(void *)(v8 + 64) = 0;
      *(void *)(v8 + 96) = 0;
      *(_OWORD *)(v8 + 128) = 0u;
      *(_OWORD *)(v8 + 144) = 0u;
      uint64_t v10 = v8 + 192;
      *(_OWORD *)(v8 + 160) = 0u;
      *(_OWORD *)(v8 + 176) = 0u;
    }
    a2[1] = v10;
    if (!Phase::SpatialModeler::Scheduler::InitGraph(a1, a2, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - v9) >> 6), v6)) {
      break;
    }
    v6 += 24;
    if (v6 == v7) {
      return 1;
    }
  }
  uint64_t v13 = *a2;
  for (uint64_t i = a2[1]; i != v13; std::allocator<Phase::SpatialModeler::Graph>::destroy[abi:ne180100]((uint64_t)(a2 + 2), i))
    i -= 192;
  uint64_t result = 0;
  a2[1] = v13;
  return result;
}

void **std::vector<Phase::SpatialModeler::Graph>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 6) < a2)
  {
    if (a2 >= 0x155555555555556) {
      std::vector<Phase::SpatialModeler::Graph>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::SpatialModeler::Graph>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 192 * v6;
    std::vector<Phase::SpatialModeler::Graph>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<Phase::SpatialModeler::Graph>::~__split_buffer(v7);
  }
  return result;
}

void sub_2220770C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<Phase::SpatialModeler::Graph>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

BOOL Phase::SpatialModeler::Scheduler::InitGraph(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v77 = *MEMORY[0x263EF8340];
  uint64_t v4 = *a2;
  unint64_t v68 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 6);
  if (v68 <= a3) {
    return v68 > a3;
  }
  uint64_t v5 = *(void *)(a4 + 16);
  uint64_t v6 = *(const std::string **)a4;
  uint64_t v7 = v4 + 192 * a3;
  *(void *)(v7 + 56) = *(void *)(a4 + 8);
  unint64_t v8 = (const std::string *)(v7 + 8);
  std::string::operator=((std::string *)(v7 + 8), v6);
  if (v8 != v6)
  {
    uint64_t v9 = v4 + 192 * a3;
    uint64_t v12 = *(void *)(v9 + 48);
    uint64_t v11 = (void *)(v9 + 48);
    uint64_t v10 = v12;
    uint64_t v14 = (void **)(v11 - 2);
    uint64_t v13 = (std::string *)*(v11 - 2);
    data = (long long *)v6[1].__r_.__value_.__l.__data_;
    size = (long long *)v6[1].__r_.__value_.__l.__size_;
    unint64_t v17 = ((char *)size - (char *)data) >> 5;
    if (v17 > (v12 - (uint64_t)v13) >> 5)
    {
      if (v13)
      {
        std::vector<Phase::SpatialModeler::GraphDescriptionNode>::__clear[abi:ne180100](v11 - 2);
        operator delete(*v14);
        uint64_t v10 = 0;
        *uint64_t v14 = 0;
        *(v11 - 1) = 0;
        void *v11 = 0;
      }
      if ((char *)size - (char *)data < 0) {
        goto LABEL_60;
      }
      uint64_t v18 = v10 >> 4;
      if (v10 >> 4 <= v17) {
        uint64_t v18 = ((char *)size - (char *)data) >> 5;
      }
      unint64_t v19 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0 ? 0x7FFFFFFFFFFFFFFLL : v18;
      if (v19 >> 59) {
LABEL_60:
      }
        std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
      uint64_t v20 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::SpatialModeler::GraphDescriptionNode>>((uint64_t)v11, v19);
      *uint64_t v14 = v20;
      uint64_t v21 = v4 + 192 * a3;
      *(void *)(v21 + 40) = v20;
      uint64_t v22 = (std::string **)(v21 + 40);
      void *v11 = (char *)v20 + 32 * v23;
      __int16 v24 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Phase::SpatialModeler::GraphDescriptionNode>,Phase::SpatialModeler::GraphDescriptionNode*,Phase::SpatialModeler::GraphDescriptionNode*,Phase::SpatialModeler::GraphDescriptionNode*>((uint64_t)v11, data, size, v20);
      goto LABEL_16;
    }
    uint64_t v25 = v4 + 192 * a3;
    uint64_t v26 = *(void *)(v25 + 40);
    uint64_t v22 = (std::string **)(v25 + 40);
    unint64_t v27 = (v26 - (uint64_t)v13) >> 5;
    if (v27 < v17)
    {
      uint64_t v28 = (std::string *)&data[2 * v27];
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,Phase::SpatialModeler::GraphDescriptionNode *,Phase::SpatialModeler::GraphDescriptionNode *,Phase::SpatialModeler::GraphDescriptionNode *,0>((std::string *)data, v28, v13);
      __int16 v24 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Phase::SpatialModeler::GraphDescriptionNode>,Phase::SpatialModeler::GraphDescriptionNode*,Phase::SpatialModeler::GraphDescriptionNode*,Phase::SpatialModeler::GraphDescriptionNode*>((uint64_t)v11, (long long *)v28, size, *v22);
LABEL_16:
      *uint64_t v22 = v24;
      goto LABEL_22;
    }
    uint64_t v29 = std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,Phase::SpatialModeler::GraphDescriptionNode *,Phase::SpatialModeler::GraphDescriptionNode *,Phase::SpatialModeler::GraphDescriptionNode *,0>((std::string *)data, (std::string *)size, v13);
    for (uint64_t i = *v22; i != v29; uint64_t i = (std::string *)((char *)i - 32))
    {
      if (i[-1].__r_.__value_.__s.__data_[15] < 0) {
        operator delete((void *)i[-2].__r_.__value_.__r.__words[2]);
      }
    }
    *uint64_t v22 = v29;
  }
LABEL_22:
  *(void *)(v4 + 192 * a3 + 64) = v5;
  Phase::Geometry::System::ObserveSystemState(*(Phase::Geometry::System **)(a1 + 8), &v73);
  uint64_t v31 = v4 + 192 * a3;
  long long v32 = v73;
  long long v73 = 0uLL;
  uint64_t v33 = *(std::__shared_weak_count **)(v31 + 144);
  *(_OWORD *)(v31 + 136) = v32;
  if (v33)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
    if (*((void *)&v73 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v73 + 1));
    }
  }
  Phase::Geometry::System::GetCurrentState(*(Phase::Geometry::System **)(a1 + 8), &v73);
  uint64_t v34 = v4 + 192 * a3;
  long long v35 = v73;
  long long v73 = 0uLL;
  uint64_t v36 = *(std::__shared_weak_count **)(v34 + 160);
  *(_OWORD *)(v34 + 152) = v35;
  if (v36)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
    if (*((void *)&v73 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v73 + 1));
    }
  }
  uint64_t v37 = v4 + 192 * a3;
  uint64_t v40 = *(void *)(v37 + 168);
  uint64_t v39 = (uint64_t *)(v37 + 168);
  uint64_t v38 = v40;
  uint64_t v41 = (const std::string *)*(v39 - 17);
  int v42 = (const std::string *)*(v39 - 16);
  uint64_t v69 = (const std::string **)(v39 - 16);
  uint64_t v43 = v39 + 2;
  uint64_t v44 = (char *)v42 - (char *)v41;
  if (0xAAAAAAAAAAAAAAABLL * ((v39[2] - v40) >> 5) < ((char *)v42 - (char *)v41) >> 5)
  {
    if ((unint64_t)v44 >= 0x5555555555555541) {
      std::vector<Phase::SpatialModeler::Graph>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v45 = *(void *)(v4 + 192 * a3 + 176);
    uint64_t v76 = v39 + 2;
    unint64_t v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::SpatialModeler::GraphNode>>(v44 >> 5);
    *((void *)&v73 + 1) = &v46[32 * ((v45 - v38) >> 5)];
    float v74 = (char *)*((void *)&v73 + 1);
    *(void *)&long long v73 = v46;
    float v75 = (long long *)&v46[96 * v47];
    std::vector<Phase::SpatialModeler::GraphNode>::__swap_out_circular_buffer(v39, &v73);
    std::__split_buffer<Phase::SpatialModeler::GraphNode>::~__split_buffer((uint64_t)&v73);
    uint64_t v41 = (const std::string *)*(v39 - 17);
    int v42 = *v69;
  }
  if (v41 != v42)
  {
    uint64_t v48 = 0;
    unint64_t v49 = (uint64_t *)(v4 + 192 * a3 + 176);
    do
    {
      uint64_t v50 = *v49;
      if ((unint64_t)*v49 >= *v43)
      {
        unint64_t v52 = 0xAAAAAAAAAAAAAAABLL * ((v50 - *v39) >> 5);
        unint64_t v53 = v52 + 1;
        if (v52 + 1 > 0x2AAAAAAAAAAAAAALL) {
          std::vector<Phase::SpatialModeler::Graph>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * ((*v43 - *v39) >> 5) > v53) {
          unint64_t v53 = 0x5555555555555556 * ((*v43 - *v39) >> 5);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((*v43 - *v39) >> 5) >= 0x155555555555555) {
          unint64_t v54 = 0x2AAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v54 = v53;
        }
        uint64_t v76 = v39 + 2;
        float v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::SpatialModeler::GraphNode>>(v54);
        uint64_t v56 = &v55[96 * v52];
        *(void *)&long long v73 = v55;
        *((void *)&v73 + 1) = v56;
        float v75 = (long long *)&v55[96 * v57];
        *(void *)uint64_t v56 = a2;
        *((void *)v56 + 1) = a3;
        *((void *)v56 + 2) = v48;
        *((void *)v56 + std::__function::__value_func<void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::~__value_func[abi:ne180100](this + 11) = 0;
        *(_OWORD *)(v56 + 24) = 0u;
        *(_OWORD *)(v56 + 40) = 0u;
        *((void *)v56 + 7) = 0;
        float v74 = v56 + 96;
        std::vector<Phase::SpatialModeler::GraphNode>::__swap_out_circular_buffer(v39, &v73);
        uint64_t v51 = *v49;
        std::__split_buffer<Phase::SpatialModeler::GraphNode>::~__split_buffer((uint64_t)&v73);
      }
      else
      {
        *(void *)uint64_t v50 = a2;
        *(void *)(v50 + 8) = a3;
        *(void *)(v50 + 16) = v48;
        *(void *)(v50 + 88) = 0;
        *(_OWORD *)(v50 + 24) = 0u;
        *(_OWORD *)(v50 + 40) = 0u;
        *(void *)(v50 + 56) = 0;
        uint64_t v51 = v50 + 96;
        uint64_t *v49 = v50 + 96;
      }
      uint64_t *v49 = v51;
      float v58 = *v69;
      std::string::operator=((std::string *)(v51 - 72), v41);
      *(void *)(v51 - 48) = v41[1].__r_.__value_.__l.__data_;
      uint64_t data_low = LODWORD(v41[1].__r_.__value_.__l.__data_);
      if (data_low == 0xFFFFFFFFLL)
      {
        double v60 = operator new(0x30uLL);
        void *v60 = &unk_26D47ABF0;
        v60[1] = Phase::SpatialModeler::RunCommandsOnGraphNode;
        v60[2] = Phase::SpatialModeler::Scheduler::RunFullModelerQueries;
        v60[3] = 0;
        v60[4] = a1;
        *((_WORD *)v60 + 20) = 257;
      }
      else
      {
        BOOL v61 = v41 == (const std::string *)&v58[-2].__r_.__value_.__r.__words[2];
        if ((data_low & 2) != 0) {
          float v62 = Phase::SpatialModeler::Scheduler::RunSceneQueries;
        }
        else {
          float v62 = Phase::SpatialModeler::Scheduler::RunPartialModelerQueries;
        }
        float v75 = 0;
        double v60 = operator new(0x30uLL);
        void *v60 = &unk_26D47AC38;
        v60[1] = Phase::SpatialModeler::RunCommandsOnGraphNode;
        v60[2] = v62;
        v60[3] = 0;
        v60[4] = a1;
        *((unsigned char *)v60 + 40) = data_low & 1;
        *((unsigned char *)v60 + 41) = v61;
      }
      float v75 = (long long *)v60;
      uint64_t v65 = *(long long ***)(v51 - 8);
      int v64 = (long long **)(v51 - 8);
      float v63 = v65;
      unint64_t v66 = (long long *)(v64 - 3);
      *int v64 = 0;
      if (v65 == v64 - 3)
      {
        (*(void (**)(long long **))(*(void *)v66 + 32))(v64 - 3);
      }
      else if (v63)
      {
        (*((void (**)(long long **))*v63 + 5))(v63);
      }
      if (v75)
      {
        if (v75 == &v73)
        {
          *int v64 = v66;
          (*(void (**)(long long *, long long **))(*(void *)v75 + 24))(v75, v64 - 3);
          goto LABEL_57;
        }
        *int v64 = v75;
        int v64 = &v75;
      }
      *int v64 = 0;
LABEL_57:
      std::__function::__value_func<void ()(Phase::SpatialModeler::GraphNode &)>::~__value_func[abi:ne180100](&v73);
      ++v48;
      uint64_t v41 = (const std::string *)((char *)v41 + 32);
    }
    while (v41 != v42);
  }
  return v68 > a3;
}

void sub_222077764(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  void *v15 = v16;
  _Unwind_Resume(exception_object);
}

uint64_t **Phase::SpatialModeler::Scheduler::RunFullModelerQueries(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v28 = (uint64_t *)a2[7];
  uint64_t v3 = v28;
  a2[7] = 0;
  if (!v3) {
    return std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&v28, 0);
  }
  uint64_t v6 = a1 + 3;
  uint64_t v7 = (unsigned __int8 *)(v2 + 25);
LABEL_3:
  unsigned __int8 v8 = atomic_load(v7);
  uint64_t v9 = v28;
  if (v8)
  {
    uint64_t v28 = (uint64_t *)a2[7];
    a2[7] = (uint64_t)v9;
    return std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&v28, 0);
  }
  unint64_t v27 = (uint64_t *)v28[10];
  v28[10] = 0;
  uint64_t v10 = *v9;
  while (2)
  {
    unsigned int v11 = atomic_load((unsigned int *)v10);
    if (v11 == 6)
    {
      (*(void (**)(void, uint64_t))(*(void *)*a1 + 72))(*a1, v10);
      atomic_store(0, (unsigned int *)(v10 + 104));
      atomic_store(5u, (unsigned int *)v10);
      uint64_t v22 = *(void *)(v10 + 32);
      if (v22) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v22 + 48))(v22, v10);
      }
      goto LABEL_33;
    }
    unsigned int v31 = 0;
    (*(void (**)(void *__return_ptr))(*(void *)*a1 + 64))(v29);
    std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>>::__generic_assign[abi:ne180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>>((uint64_t)&v30, (uint64_t)v29);
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v29);
    if (v31 == -1) {
      uint64_t v12 = -1;
    }
    else {
      uint64_t v12 = v31;
    }
    switch(v12)
    {
      case 1:
        atomic_store(0, (unsigned int *)(v10 + 104));
        unsigned int v25 = 3;
        goto LABEL_40;
      case 2:
        if (v31 != 2) {
          std::__throw_bad_variant_access[abi:ne180100]();
        }
        *(_OWORD *)(v10 + 48) = v30;
        atomic_store(0, (unsigned int *)(v10 + 104));
        atomic_store(4u, (unsigned int *)v10);
        uint64_t v23 = *(void *)(v10 + 32);
        if (v23) {
          goto LABEL_31;
        }
        goto LABEL_32;
      case 3:
        if (v31 != 3) {
          std::__throw_bad_variant_access[abi:ne180100]();
        }
        uint64_t v13 = *(void *)(v10 + 64);
        if (v13)
        {
          uint64_t v14 = (uint64_t *)*((void *)&v30 + 1);
          uint64_t v15 = (uint64_t *)v30;
          if (((*((void *)&v30 + 1) - (void)v30) & 0x7FFFFFFF8) != 0)
          {
            uint64_t v16 = (void *)v30;
            if ((void)v30 == *((void *)&v30 + 1)) {
              goto LABEL_27;
            }
            while (*v16)
            {
              if (++v16 == *((void **)&v30 + 1))
              {
                do
                  Phase::Geometry::SceneQueryScheduler::RunQuery(a1[1] + 2280, v13, *v15++);
                while (v15 != v14);
                goto LABEL_27;
              }
            }
            *(void *)(v10 + 48) = 1;
            *(void *)(v10 + 56) = v6;
            atomic_store(0, (unsigned int *)(v10 + 104));
            atomic_store(4u, (unsigned int *)v10);
            uint64_t v23 = *(void *)(v10 + 32);
            if (!v23) {
              goto LABEL_32;
            }
          }
          else
          {
            *(void *)(v10 + 48) = 1;
            *(void *)(v10 + 56) = v6;
            atomic_store(0, (unsigned int *)(v10 + 104));
            atomic_store(4u, (unsigned int *)v10);
            uint64_t v23 = *(void *)(v10 + 32);
            if (!v23) {
              goto LABEL_32;
            }
          }
        }
        else
        {
          *(void *)(v10 + 48) = 8;
          *(void *)(v10 + 56) = v6;
          atomic_store(0, (unsigned int *)(v10 + 104));
          atomic_store(4u, (unsigned int *)v10);
          uint64_t v23 = *(void *)(v10 + 32);
          if (!v23) {
            goto LABEL_32;
          }
        }
        goto LABEL_31;
      case 4:
        if (v31 != 4) {
          std::__throw_bad_variant_access[abi:ne180100]();
        }
        uint64_t v20 = v30;
        if ((void)v30)
        {
          v9[9] = v30;
          unsigned int v21 = atomic_load((unsigned int *)(v10 + 104));
          if (!*(_DWORD *)(v20 + 64))
          {
            *(_DWORD *)(v20 + 64) = v21;
            goto LABEL_27;
          }
        }
        *(void *)(v10 + 48) = 1;
        *(void *)(v10 + 56) = v6;
        atomic_store(0, (unsigned int *)(v10 + 104));
        atomic_store(4u, (unsigned int *)v10);
        uint64_t v23 = *(void *)(v10 + 32);
        if (v23) {
          goto LABEL_31;
        }
        goto LABEL_32;
      case 5:
        if (v31 != 5) {
          std::__throw_bad_variant_access[abi:ne180100]();
        }
        unint64_t v17 = (void *)v30;
        if ((void)v30 == v9[9])
        {
          *(_DWORD *)(v30 + 64) = 0;
          uint64_t v18 = (void *)v17[9];
          unint64_t v19 = (void *)v17[10];
          v17[10] = 0;
          v17[11] = 0;
          v17[9] = 0;
          v9[9] = 0;
          if (v19 != v18) {
            std::terminate();
          }
          if (v18) {
            operator delete(v18);
          }
LABEL_27:
          std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v30);
          continue;
        }
        *(void *)(v10 + 48) = 12;
        *(void *)(v10 + 56) = v6;
        atomic_store(0, (unsigned int *)(v10 + 104));
        atomic_store(4u, (unsigned int *)v10);
        uint64_t v23 = *(void *)(v10 + 32);
        if (v23) {
LABEL_31:
        }
          (*(void (**)(uint64_t, uint64_t))(*(void *)v23 + 48))(v23, v10);
LABEL_32:
        std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v30);
LABEL_33:
        __int16 v24 = v27;
        unint64_t v27 = v28;
        uint64_t v28 = v24;
        std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&v27, 0);
        if (v28) {
          goto LABEL_3;
        }
        return std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&v28, 0);
      default:
        *(void *)(v10 + 48) = 1;
        *(void *)(v10 + 56) = v6;
        atomic_store(0, (unsigned int *)(v10 + 104));
        unsigned int v25 = 4;
LABEL_40:
        atomic_store(v25, (unsigned int *)v10);
        uint64_t v23 = *(void *)(v10 + 32);
        if (v23) {
          goto LABEL_31;
        }
        goto LABEL_32;
    }
  }
}

void sub_222077CF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

uint64_t **Phase::SpatialModeler::Scheduler::RunPartialModelerQueries(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v44 = (uint64_t *)a2[7];
  uint64_t v3 = v44;
  a2[7] = 0;
  if (!v3) {
    return std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&v44, 0);
  }
  uint64_t v6 = a1 + 3;
  uint64_t v7 = (unsigned __int8 *)(v2 + 25);
LABEL_3:
  unsigned __int8 v8 = atomic_load(v7);
  uint64_t v9 = v44;
  if (v8)
  {
    uint64_t v44 = (uint64_t *)a2[7];
    a2[7] = (uint64_t)v9;
    return std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&v44, 0);
  }
  uint64_t v43 = (uint64_t *)v44[10];
  v44[10] = 0;
  uint64_t v10 = *v9;
  while (2)
  {
    unsigned int v11 = atomic_load((unsigned int *)v10);
    if (v11 == 6)
    {
      (*(void (**)(void, uint64_t))(*(void *)*a1 + 72))(*a1, v10);
      atomic_store(0, (unsigned int *)(v10 + 104));
      atomic_store(5u, (unsigned int *)v10);
      uint64_t v17 = *(void *)(v10 + 32);
      if (v17) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 48))(v17, v10);
      }
      goto LABEL_69;
    }
    unsigned int v48 = 0;
    (*(void (**)(void *__return_ptr))(*(void *)*a1 + 64))(v45);
    std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>>::__generic_assign[abi:ne180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>>((uint64_t)&v46, (uint64_t)v45);
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v45);
    if (v48 == -1) {
      uint64_t v12 = -1;
    }
    else {
      uint64_t v12 = v48;
    }
    switch(v12)
    {
      case 1:
        atomic_store(0, (unsigned int *)(v10 + 104));
        atomic_store(3u, (unsigned int *)v10);
        goto LABEL_34;
      case 2:
        if (v48 != 2) {
          std::__throw_bad_variant_access[abi:ne180100]();
        }
        *(_OWORD *)(v10 + 48) = v46;
        atomic_store(0, (unsigned int *)(v10 + 104));
        atomic_store(4u, (unsigned int *)v10);
        uint64_t v24 = *(void *)(v10 + 32);
        if (v24) {
          goto LABEL_67;
        }
        goto LABEL_68;
      case 3:
        if (v48 != 3) {
          std::__throw_bad_variant_access[abi:ne180100]();
        }
        if (!*(void *)(v10 + 64))
        {
          *(void *)(v10 + 48) = 8;
          *(void *)(v10 + 56) = v6;
          atomic_store(0, (unsigned int *)(v10 + 104));
          atomic_store(4u, (unsigned int *)v10);
          uint64_t v24 = *(void *)(v10 + 32);
          if (!v24) {
            goto LABEL_68;
          }
          goto LABEL_67;
        }
        long long v18 = v46;
        if (((*((void *)&v46 + 1) - (void)v46) & 0x7FFFFFFF8) != 0)
        {
          for (uint64_t i = (void *)v46; i != *((void **)&v46 + 1); ++i)
          {
            if (!*i)
            {
              *(void *)(v10 + 48) = 1;
              *(void *)(v10 + 56) = v6;
              atomic_store(0, (unsigned int *)(v10 + 104));
              atomic_store(4u, (unsigned int *)v10);
              uint64_t v24 = *(void *)(v10 + 32);
              if (!v24) {
                goto LABEL_68;
              }
              goto LABEL_67;
            }
          }
          long long v46 = *((_OWORD *)v9 + 3);
          *((_OWORD *)v9 + objc_destroyWeak(this + 3) = v18;
          uint64_t v20 = v47;
          uint64_t v47 = v9[8];
          v9[8] = v20;
          uint64_t NextStage = Phase::SpatialModeler::Scheduler::GetNextStage((uint64_t)a2, 1);
          if (NextStage)
          {
            uint64_t v22 = v44;
            uint64_t v23 = (uint64_t *)v44[10];
            v44[10] = *(void *)(NextStage + 56);
            *(void *)(NextStage + 56) = v22;
            uint64_t v44 = v23;
            goto LABEL_68;
          }
          *(void *)(v10 + 48) = 11;
        }
        else
        {
          *(void *)(v10 + 48) = 1;
        }
        *(void *)(v10 + 56) = v6;
        atomic_store(0, (unsigned int *)(v10 + 104));
        atomic_store(4u, (unsigned int *)v10);
        uint64_t v24 = *(void *)(v10 + 32);
        if (!v24) {
          goto LABEL_68;
        }
        goto LABEL_67;
      case 4:
        if (v48 != 4) {
          std::__throw_bad_variant_access[abi:ne180100]();
        }
        uint64_t v13 = v46;
        if ((void)v46)
        {
          v9[9] = v46;
          unsigned int v14 = atomic_load((unsigned int *)(v10 + 104));
          if (*(_DWORD *)(v13 + 64))
          {
            uint64_t v25 = Phase::SpatialModeler::Scheduler::GetNextStage((uint64_t)a2, 3);
            if (v25)
            {
              uint64_t v26 = v44;
              unint64_t v27 = (uint64_t *)v44[10];
              v44[10] = *(void *)(v25 + 56);
              *(void *)(v25 + 56) = v26;
              uint64_t v44 = v27;
              uint64_t v28 = (void *)v46;
              unsigned int v29 = atomic_load((unsigned int *)(v10 + 104));
              long long v30 = (unsigned int *)v28[10];
              unint64_t v31 = v28[11];
              if ((unint64_t)v30 >= v31)
              {
                uint64_t v33 = *(unsigned int **)(v46 + 72);
                uint64_t v34 = v30 - v33;
                if ((unint64_t)(v34 + 1) >> 62) {
                  std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v35 = v31 - (void)v33;
                unint64_t v36 = (uint64_t)(v31 - (void)v33) >> 1;
                if (v36 <= v34 + 1) {
                  unint64_t v36 = v34 + 1;
                }
                if (v35 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v37 = v36;
                }
                if (v37)
                {
                  uint64_t v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v46 + 88, v37);
                  uint64_t v33 = (unsigned int *)v28[9];
                  long long v30 = (unsigned int *)v28[10];
                }
                else
                {
                  uint64_t v38 = 0;
                }
                uint64_t v39 = (unsigned int *)&v38[4 * v34];
                unsigned int *v39 = v29;
                long long v32 = v39 + 1;
                while (v30 != v33)
                {
                  unsigned int v40 = *--v30;
                  *--uint64_t v39 = v40;
                }
                v28[9] = v39;
                v28[10] = v32;
                void v28[11] = &v38[4 * v37];
                if (v33) {
                  operator delete(v33);
                }
              }
              else
              {
                *long long v30 = v29;
                long long v32 = v30 + 1;
              }
              v28[10] = v32;
              goto LABEL_68;
            }
            *(void *)(v10 + 48) = 11;
            goto LABEL_45;
          }
          *(_DWORD *)(v13 + 64) = v14;
LABEL_18:
          std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v46);
          continue;
        }
        *(void *)(v10 + 48) = 1;
LABEL_45:
        *(void *)(v10 + 56) = v6;
        atomic_store(0, (unsigned int *)(v10 + 104));
        atomic_store(4u, (unsigned int *)v10);
        uint64_t v24 = *(void *)(v10 + 32);
        if (v24) {
LABEL_67:
        }
          (*(void (**)(uint64_t, uint64_t))(*(void *)v24 + 48))(v24, v10);
LABEL_68:
        std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v46);
LABEL_69:
        uint64_t v41 = v43;
        uint64_t v43 = v44;
        uint64_t v44 = v41;
        std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&v43, 0);
        if (v44) {
          goto LABEL_3;
        }
        return std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&v44, 0);
      case 5:
        if (v48 != 5) {
          std::__throw_bad_variant_access[abi:ne180100]();
        }
        uint64_t v15 = (void *)v46;
        if ((void)v46 != v9[9])
        {
          *(void *)(v10 + 48) = 12;
          *(void *)(v10 + 56) = v6;
          atomic_store(0, (unsigned int *)(v10 + 104));
          atomic_store(4u, (unsigned int *)v10);
          uint64_t v24 = *(void *)(v10 + 32);
          if (v24) {
            goto LABEL_67;
          }
          goto LABEL_68;
        }
        *(_DWORD *)(v46 + 64) = 0;
        uint64_t v16 = (void *)v15[9];
        v15[10] = 0;
        v15[11] = 0;
        v15[9] = 0;
        v9[9] = 0;
        if (v16) {
          operator delete(v16);
        }
        goto LABEL_18;
      default:
        *(void *)(v10 + 48) = 1;
        *(void *)(v10 + 56) = v6;
        atomic_store(0, (unsigned int *)(v10 + 104));
        atomic_store(4u, (unsigned int *)v10);
LABEL_34:
        uint64_t v24 = *(void *)(v10 + 32);
        if (v24) {
          goto LABEL_67;
        }
        goto LABEL_68;
    }
  }
}

void sub_2220783BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

uint64_t **Phase::SpatialModeler::Scheduler::RunSceneQueries(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v23 = (uint64_t *)a2[7];
  uint64_t v3 = v23;
  a2[7] = 0;
  if (v3)
  {
    uint64_t v6 = a1 + 24;
    uint64_t v7 = (unsigned __int8 *)(v2 + 25);
    while (1)
    {
      unsigned __int8 v8 = atomic_load(v7);
      uint64_t v9 = v23;
      if (v8) {
        break;
      }
      uint64_t v22 = (uint64_t *)v23[10];
      v23[10] = 0;
      uint64_t v10 = (uint64_t *)v9[6];
      unsigned int v11 = (uint64_t *)v9[7];
      if (v10 != v11)
      {
        uint64_t v12 = *(void *)(*v9 + 64);
        do
          Phase::Geometry::SceneQueryScheduler::RunQuery(*(void *)(a1 + 8) + 2280, v12, *v10++);
        while (v10 != v11);
      }
      uint64_t NextStage = Phase::SpatialModeler::Scheduler::GetNextStage((uint64_t)a2, 2);
      if (NextStage)
      {
        unsigned int v14 = v23;
        uint64_t v15 = (uint64_t *)v23[10];
        v23[10] = *(void *)(NextStage + 56);
        *(void *)(NextStage + 56) = v14;
        uint64_t v23 = v15;
      }
      else
      {
        uint64_t v16 = v9[9];
        if (v16)
        {
          *(_DWORD *)(v16 + 64) = 0;
          uint64_t v17 = *(void **)(v16 + 72);
          *(void *)(v16 + 8std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = 0;
          *(void *)(v16 + 88) = 0;
          *(void *)(v16 + 72) = 0;
          if (v17) {
            operator delete(v17);
          }
          v9[9] = 0;
        }
        uint64_t v18 = *v9;
        *(void *)(v18 + 48) = 11;
        *(void *)(v18 + 56) = v6;
        atomic_store(0, (unsigned int *)(v18 + 104));
        atomic_store(4u, (unsigned int *)v18);
        uint64_t v19 = *(void *)(v18 + 32);
        if (v19) {
          (*(void (**)(uint64_t))(*(void *)v19 + 48))(v19);
        }
      }
      uint64_t v20 = v22;
      uint64_t v22 = v23;
      uint64_t v23 = v20;
      std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&v22, 0);
      if (!v23) {
        return std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&v23, 0);
      }
    }
    uint64_t v23 = (uint64_t *)a2[7];
    a2[7] = (uint64_t)v9;
  }
  return std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&v23, 0);
}

void sub_2220785C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t *a10)
{
}

void Phase::SpatialModeler::RunCommandsOnGraphNode(unint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, unsigned __int8 **a6)
{
  unsigned __int8 v8 = (void (*)(void *, unsigned __int8 **))a1;
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v9 = *a6;
  uint64_t v10 = a6[1];
  uint64_t v11 = *(void *)*a6;
  uint64_t v12 = v11 + 192 * (void)v10;
  uint64_t v13 = (void *)(v12 + 64);
  if (*(void *)(v12 + 64))
  {
    atomic_store(1u, v9 + 24);
    Phase::SortedCommandQueue<Phase::SpatialModeler::PriorityQueue,Phase::SpatialModeler::PriorityQueueCommandType,std::variant<std::monostate,Phase::SpatialModeler::PriorityQueueEntry,Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueClusterIndexUpdate,Phase::SpatialModeler::PriorityQueueGlobals>>::ExecuteCommands((atomic_ullong *)(*v13 + 216));
    if (a4)
    {
      uint64_t v16 = *(void *)(v11 + 192 * (void)v10 + 136);
      if (!v16) {
        std::terminate();
      }
      unint64_t v17 = atomic_exchange((atomic_ullong *volatile)v16, *(void *)(v16 + 16));
      *(void *)(v16 + 16) = v17;
      if (v17 && !*(unsigned char *)(v17 + 24))
      {
        long long v18 = *(_OWORD *)v17;
        *(void *)unint64_t v17 = 0;
        *(void *)(v17 + 8) = 0;
        uint64_t v19 = *(std::__shared_weak_count **)(v11 + 192 * (void)v10 + 160);
        *(_OWORD *)(v11 + 192 * (void)v10 + 152) = v18;
        if (v19) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v19);
        }
        uint64_t v20 = *(void *)(v16 + 16);
        unsigned int v21 = *(std::__shared_weak_count **)(v20 + 8);
        *(void *)uint64_t v20 = 0;
        *(void *)(v20 + 8) = 0;
        if (v21) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v21);
        }
        *(unsigned char *)(v20 + 24) = 1;
      }
      uint64_t v22 = *(void *)(*v13 + 112);
      if (v22) {
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)v22 + 48))(v22, *v13, v12);
      }
    }
    uint64_t v23 = (void *)(a3 + (a2 >> 1));
    if (a2) {
      unsigned __int8 v8 = *(void (**)(void *, unsigned __int8 **))(*v23 + v8);
    }
    v8(v23, a6);
    if (a5)
    {
      uint64_t v27 = *(void *)(*v13 + 144);
      if (v27) {
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)v27 + 48))(v27, *v13, v12);
      }
    }
    atomic_store(0, v9 + 24);
  }
  else
  {
    if (a2) {
      BOOL v24 = (a2 & 1 | a1) == 0;
    }
    else {
      BOOL v24 = 1;
    }
    char v25 = v24;
    if ((uint64_t **(*)(void *, uint64_t *))a1 == Phase::SpatialModeler::Scheduler::RunFullModelerQueries
      && (v25 & 1) != 0)
    {
      uint64_t v26 = "RunFullModelerQueries";
    }
    else
    {
      if ((uint64_t **(*)(void *, uint64_t *))a1 == Phase::SpatialModeler::Scheduler::RunPartialModelerQueries) {
        char v28 = v25;
      }
      else {
        char v28 = 0;
      }
      if (v28)
      {
        uint64_t v26 = "RunPartialModelerQueries";
      }
      else if (((a1 == (void)Phase::SpatialModeler::Scheduler::RunSceneQueries) & v25) != 0)
      {
        uint64_t v26 = "RunSceneQueries";
      }
      else
      {
        uint64_t v26 = "Unknown";
      }
    }
    uint64_t v29 = v11 + 192 * (void)v10;
    long long v30 = (void *)(v29 + 8);
    if (*(char *)(v29 + 31) < 0) {
      long long v30 = (void *)*v30;
    }
    long long v32 = **(NSObject ***)(Phase::Logger::GetInstance((Phase::Logger *)a1) + 224);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316418;
      unint64_t v35 = "SpatialModelerScheduler.cpp";
      __int16 v36 = 1024;
      int v37 = 95;
      __int16 v38 = 2080;
      uint64_t v39 = v26;
      __int16 v40 = 1024;
      int v41 = a4;
      __int16 v42 = 1024;
      int v43 = a5;
      __int16 v44 = 2080;
      uint64_t v45 = v30;
      _os_log_impl(&dword_221E5E000, v32, OS_LOG_TYPE_ERROR, "%25s:%-5d RunCommandsOnGraphNode (Function:%s, isFirstNode:%i, isFinalNode:%i): Graph (%s) has no Priority Queue.", buf, 0x32u);
    }
  }
}

uint64_t Phase::SpatialModeler::Scheduler::GetNextStage(uint64_t a1, char a2)
{
  uint64_t v2 = **(void **)a1 + 192 * *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(v2 + 168);
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v2 + 176) - v3) >> 5);
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 == v4) {
    return 0;
  }
  uint64_t v6 = 3 * v5;
  uint64_t result = v3 + 32 * v6;
  uint64_t v8 = 96 * v4 - 32 * v6;
  while ((*(void *)(result + 48) & (1 << a2)) == 0)
  {
    result += 96;
    v8 -= 96;
    if (!v8) {
      return 0;
    }
  }
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Phase::SpatialModeler::GraphDescriptionNode>,Phase::SpatialModeler::GraphDescriptionNode*,Phase::SpatialModeler::GraphDescriptionNode*,Phase::SpatialModeler::GraphDescriptionNode*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  unint64_t v4 = this;
  uint64_t v12 = this;
  uint64_t v13 = this;
  v10[0] = a1;
  v10[1] = &v12;
  uint64_t v10[2] = &v13;
  char v11 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        uint64_t v8 = v13;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
        uint64_t v8 = v4;
      }
      v4[1].__r_.__value_.__r.__words[0] = *((void *)v6 + 3);
      v6 += 2;
      unint64_t v4 = (std::string *)((char *)v8 + 32);
      uint64_t v13 = (std::string *)((char *)v8 + 32);
    }
    while (v6 != a3);
  }
  char v11 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Phase::SpatialModeler::GraphDescriptionNode>,Phase::SpatialModeler::GraphDescriptionNode*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
  return v4;
}

void sub_222078A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Phase::SpatialModeler::GraphDescriptionNode>,Phase::SpatialModeler::GraphDescriptionNode*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 8);
    for (uint64_t i = **(void **)(a1 + 16); i != v3; i -= 32)
    {
      if (*(char *)(i - 9) < 0) {
        operator delete(*(void **)(i - 32));
      }
    }
  }
  return a1;
}

std::string *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,Phase::SpatialModeler::GraphDescriptionNode *,Phase::SpatialModeler::GraphDescriptionNode *,Phase::SpatialModeler::GraphDescriptionNode *,0>(std::string *__str, std::string *a2, std::string *this)
{
  if (__str != a2)
  {
    uint64_t v5 = __str;
    do
    {
      std::string::operator=(this, v5);
      this[1].__r_.__value_.__r.__words[0] = v5[1].__r_.__value_.__r.__words[0];
      this = (std::string *)((char *)this + 32);
      uint64_t v5 = (std::string *)((char *)v5 + 32);
    }
    while (v5 != a2);
  }
  return this;
}

void std::vector<Phase::SpatialModeler::Graph>::__throw_length_error[abi:ne180100]()
{
}

uint64_t std::vector<Phase::SpatialModeler::Graph>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<Phase::SpatialModeler::Graph>,std::reverse_iterator<Phase::SpatialModeler::Graph*>,std::reverse_iterator<Phase::SpatialModeler::Graph*>,std::reverse_iterator<Phase::SpatialModeler::Graph*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::SpatialModeler::Graph>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x155555555555556) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(192 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<Phase::SpatialModeler::Graph>,std::reverse_iterator<Phase::SpatialModeler::Graph*>,std::reverse_iterator<Phase::SpatialModeler::Graph*>,std::reverse_iterator<Phase::SpatialModeler::Graph*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = a7 + v11;
      uint64_t v13 = a3 + v11;
      *(void *)(v12 - 192) = *(void *)(a3 + v11 - 192);
      long long v14 = *(_OWORD *)(a3 + v11 - 184);
      *(void *)(v12 - 168) = *(void *)(a3 + v11 - 168);
      *(_OWORD *)(v12 - 184) = v14;
      *(void *)(v13 - 176) = 0;
      *(void *)(v13 - 168) = 0;
      *(void *)(v13 - 184) = 0;
      *(void *)(v12 - 16std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = 0;
      *(void *)(v12 - 152) = 0;
      *(void *)(v12 - 144) = 0;
      *(_OWORD *)(v12 - 16std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = *(_OWORD *)(a3 + v11 - 160);
      *(void *)(v12 - 144) = *(void *)(a3 + v11 - 144);
      *(void *)(v13 - 16std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = 0;
      *(void *)(v13 - 152) = 0;
      *(void *)(v13 - 144) = 0;
      *(_OWORD *)(v12 - 136) = *(_OWORD *)(a3 + v11 - 136);
      std::__function::__value_func<void ()(Phase::SpatialModeler::Graph &)>::__value_func[abi:ne180100](a7 + v11 - 120, a3 + v11 - 120);
      std::__function::__value_func<void ()(Phase::SpatialModeler::Graph &)>::__value_func[abi:ne180100](a7 + v11 - 88, a3 + v11 - 88);
      *(_OWORD *)(v12 - 56) = *(_OWORD *)(a3 + v11 - 56);
      *(void *)(v13 - 56) = 0;
      *(void *)(v13 - 48) = 0;
      *(_OWORD *)(v12 - 4std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = *(_OWORD *)(a3 + v11 - 40);
      *(void *)(v13 - 4std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = 0;
      *(void *)(v13 - 32) = 0;
      *(void *)(v12 - 24) = 0;
      *(void *)(v12 - 16) = 0;
      *(void *)(v12 - 8) = 0;
      *(_OWORD *)(v12 - 24) = *(_OWORD *)(a3 + v11 - 24);
      *(void *)(v12 - 8) = *(void *)(a3 + v11 - 8);
      *(void *)(v13 - 24) = 0;
      *(void *)(v13 - 16) = 0;
      *(void *)(v13 - 8) = 0;
      v11 -= 192;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

uint64_t std::__function::__value_func<void ()(Phase::SpatialModeler::Graph &)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void **std::__split_buffer<Phase::SpatialModeler::Graph>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<Phase::SpatialModeler::Graph>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 192;
    std::allocator<Phase::SpatialModeler::Graph>::destroy[abi:ne180100](v4, i - 192);
  }
}

uint64_t std::vector<Phase::SpatialModeler::Graph>::__emplace_back_slow_path<Phase::SpatialModeler::GraphSequence &>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 6);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x155555555555555) {
    std::vector<Phase::SpatialModeler::Graph>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 6);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0xAAAAAAAAAAAAAALL) {
    unint64_t v9 = 0x155555555555555;
  }
  else {
    unint64_t v9 = v5;
  }
  _OWORD v14[4] = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::SpatialModeler::Graph>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[192 * v4];
  v14[0] = v10;
  v14[1] = v11;
  _OWORD v14[3] = &v10[192 * v9];
  *(void *)uint64_t v11 = a2;
  *(_OWORD *)(v11 + 8) = 0u;
  *(_OWORD *)(v11 + 24) = 0u;
  *(_OWORD *)(v11 + 4std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = 0u;
  *((void *)v11 + 7) = -1;
  *((void *)v11 + 8) = 0;
  *((void *)v11 + 12) = 0;
  *((_OWORD *)v11 + 8) = 0u;
  *((_OWORD *)v11 + 9) = 0u;
  *((_OWORD *)v11 + 1std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = 0u;
  *((_OWORD *)v11 + std::__function::__value_func<void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::~__value_func[abi:ne180100](this + 11) = 0u;
  void v14[2] = v11 + 192;
  std::vector<Phase::SpatialModeler::Graph>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<Phase::SpatialModeler::Graph>::~__split_buffer(v14);
  return v12;
}

void sub_222078EE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<Phase::SpatialModeler::Graph>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<Phase::SpatialModeler::GraphNode>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v5 = *result;
  uint64_t v4 = result[1];
  uint64_t v6 = a2[1];
  if (v4 != *result)
  {
    uint64_t v7 = 0;
    uint64_t v8 = result[1];
    while (1)
    {
      uint64_t v9 = v6 + v7;
      uint64_t v10 = v4 + v7;
      long long v11 = *(_OWORD *)(v4 + v7 - 96);
      *(void *)(v9 - 8std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = *(void *)(v4 + v7 - 80);
      *(_OWORD *)(v9 - 96) = v11;
      long long v12 = *(_OWORD *)(v4 + v7 - 72);
      *(void *)(v9 - 56) = *(void *)(v4 + v7 - 56);
      *(_OWORD *)(v9 - 72) = v12;
      *(void *)(v10 - 64) = 0;
      *(void *)(v10 - 56) = 0;
      *(void *)(v10 - 72) = 0;
      *(void *)(v9 - 48) = *(void *)(v4 + v7 - 48);
      uint64_t v13 = *(void *)(v4 + v7 - 40);
      *(void *)(v10 - 4std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = 0;
      *(void *)(v9 - 4std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = v13;
      uint64_t v14 = *(void *)(v4 + v7 - 8);
      if (v14)
      {
        if (v10 - 32 == v14)
        {
          *(void *)(v9 - 8) = v9 - 32;
          uint64_t result = (uint64_t *)(*(uint64_t (**)(void))(**(void **)(v10 - 8) + 24))(*(void *)(v10 - 8));
          goto LABEL_9;
        }
        uint64_t v15 = (void *)(v8 - 8);
        *(void *)(v9 - 8) = v14;
      }
      else
      {
        uint64_t v15 = (void *)(v9 - 8);
      }
      void *v15 = 0;
LABEL_9:
      v8 -= 96;
      v7 -= 96;
      if (v4 + v7 == v5)
      {
        v6 += v7;
        break;
      }
    }
  }
  a2[1] = v6;
  uint64_t v16 = *v3;
  *uint64_t v3 = v6;
  a2[1] = v16;
  uint64_t v17 = v3[1];
  v3[1] = a2[2];
  a2[2] = v17;
  uint64_t v18 = v3[2];
  _OWORD v3[2] = a2[3];
  a2[3] = v18;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::SpatialModeler::GraphNode>>(unint64_t a1)
{
  if (a1 >= 0x2AAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(96 * a1);
}

uint64_t std::__split_buffer<Phase::SpatialModeler::GraphNode>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    *(void *)(a1 + 16) = i - 96;
    std::allocator<Phase::SpatialModeler::GraphNode>::destroy[abi:ne180100](v4, i - 96);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__function::__func<std::__bind<void (*)(void (Phase::SpatialModeler::Scheduler::*)(Phase::SpatialModeler::GraphNode &),Phase::SpatialModeler::Scheduler*,BOOL,BOOL,Phase::SpatialModeler::GraphNode &),void (Phase::SpatialModeler::Scheduler::* const&)(Phase::SpatialModeler::GraphNode &),Phase::SpatialModeler::Scheduler*,BOOL,BOOL,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (*)(void (Phase::SpatialModeler::Scheduler::*)(Phase::SpatialModeler::GraphNode &),Phase::SpatialModeler::Scheduler*,BOOL,BOOL,Phase::SpatialModeler::GraphNode &),void (Phase::SpatialModeler::Scheduler::* const&)(Phase::SpatialModeler::GraphNode &),Phase::SpatialModeler::Scheduler*,BOOL,BOOL,std::placeholders::__ph<1> const&>>,void ()(Phase::SpatialModeler::GraphNode &)>::~__func()
{
}

__n128 std::__function::__func<std::__bind<void (*)(void (Phase::SpatialModeler::Scheduler::*)(Phase::SpatialModeler::GraphNode &),Phase::SpatialModeler::Scheduler*,BOOL,BOOL,Phase::SpatialModeler::GraphNode &),void (Phase::SpatialModeler::Scheduler::* const&)(Phase::SpatialModeler::GraphNode &),Phase::SpatialModeler::Scheduler*,BOOL,BOOL,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (*)(void (Phase::SpatialModeler::Scheduler::*)(Phase::SpatialModeler::GraphNode &),Phase::SpatialModeler::Scheduler*,BOOL,BOOL,Phase::SpatialModeler::GraphNode &),void (Phase::SpatialModeler::Scheduler::* const&)(Phase::SpatialModeler::GraphNode &),Phase::SpatialModeler::Scheduler*,BOOL,BOOL,std::placeholders::__ph<1> const&>>,void ()(Phase::SpatialModeler::GraphNode &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_26D47ABF0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear(this + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<std::__bind<void (*)(void (Phase::SpatialModeler::Scheduler::*)(Phase::SpatialModeler::GraphNode &),Phase::SpatialModeler::Scheduler*,BOOL,BOOL,Phase::SpatialModeler::GraphNode &),void (Phase::SpatialModeler::Scheduler::* const&)(Phase::SpatialModeler::GraphNode &),Phase::SpatialModeler::Scheduler*,BOOL,BOOL,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (*)(void (Phase::SpatialModeler::Scheduler::*)(Phase::SpatialModeler::GraphNode &),Phase::SpatialModeler::Scheduler*,BOOL,BOOL,Phase::SpatialModeler::GraphNode &),void (Phase::SpatialModeler::Scheduler::* const&)(Phase::SpatialModeler::GraphNode &),Phase::SpatialModeler::Scheduler*,BOOL,BOOL,std::placeholders::__ph<1> const&>>,void ()(Phase::SpatialModeler::GraphNode &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D47ABF0;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 4std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::__bind<void (*)(void (Phase::SpatialModeler::Scheduler::*)(Phase::SpatialModeler::GraphNode &),Phase::SpatialModeler::Scheduler*,BOOL,BOOL,Phase::SpatialModeler::GraphNode &),void (Phase::SpatialModeler::Scheduler::* const&)(Phase::SpatialModeler::GraphNode &),Phase::SpatialModeler::Scheduler*,BOOL,BOOL,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (*)(void (Phase::SpatialModeler::Scheduler::*)(Phase::SpatialModeler::GraphNode &),Phase::SpatialModeler::Scheduler*,BOOL,BOOL,Phase::SpatialModeler::GraphNode &),void (Phase::SpatialModeler::Scheduler::* const&)(Phase::SpatialModeler::GraphNode &),Phase::SpatialModeler::Scheduler*,BOOL,BOOL,std::placeholders::__ph<1> const&>>,void ()(Phase::SpatialModeler::GraphNode &)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void, void, void, void, uint64_t))(a1 + 8))(*(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40), *(unsigned __int8 *)(a1 + 41), a2);
}

void std::__function::__func<std::__bind<void (*)(void (Phase::SpatialModeler::Scheduler::*)(Phase::SpatialModeler::GraphNode &),Phase::SpatialModeler::Scheduler*,BOOL,BOOL,Phase::SpatialModeler::GraphNode &),void (Phase::SpatialModeler::Scheduler::* const&)(Phase::SpatialModeler::GraphNode &),Phase::SpatialModeler::Scheduler*,BOOL const&,BOOL const&,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (*)(void (Phase::SpatialModeler::Scheduler::*)(Phase::SpatialModeler::GraphNode &),Phase::SpatialModeler::Scheduler*,BOOL,BOOL,Phase::SpatialModeler::GraphNode &),void (Phase::SpatialModeler::Scheduler::* const&)(Phase::SpatialModeler::GraphNode &),Phase::SpatialModeler::Scheduler*,BOOL const&,BOOL const&,std::placeholders::__ph<1> const&>>,void ()(Phase::SpatialModeler::GraphNode &)>::~__func()
{
}

__n128 std::__function::__func<std::__bind<void (*)(void (Phase::SpatialModeler::Scheduler::*)(Phase::SpatialModeler::GraphNode &),Phase::SpatialModeler::Scheduler*,BOOL,BOOL,Phase::SpatialModeler::GraphNode &),void (Phase::SpatialModeler::Scheduler::* const&)(Phase::SpatialModeler::GraphNode &),Phase::SpatialModeler::Scheduler*,BOOL const&,BOOL const&,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (*)(void (Phase::SpatialModeler::Scheduler::*)(Phase::SpatialModeler::GraphNode &),Phase::SpatialModeler::Scheduler*,BOOL,BOOL,Phase::SpatialModeler::GraphNode &),void (Phase::SpatialModeler::Scheduler::* const&)(Phase::SpatialModeler::GraphNode &),Phase::SpatialModeler::Scheduler*,BOOL const&,BOOL const&,std::placeholders::__ph<1> const&>>,void ()(Phase::SpatialModeler::GraphNode &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_26D47AC38;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear(this + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<std::__bind<void (*)(void (Phase::SpatialModeler::Scheduler::*)(Phase::SpatialModeler::GraphNode &),Phase::SpatialModeler::Scheduler*,BOOL,BOOL,Phase::SpatialModeler::GraphNode &),void (Phase::SpatialModeler::Scheduler::* const&)(Phase::SpatialModeler::GraphNode &),Phase::SpatialModeler::Scheduler*,BOOL const&,BOOL const&,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (*)(void (Phase::SpatialModeler::Scheduler::*)(Phase::SpatialModeler::GraphNode &),Phase::SpatialModeler::Scheduler*,BOOL,BOOL,Phase::SpatialModeler::GraphNode &),void (Phase::SpatialModeler::Scheduler::* const&)(Phase::SpatialModeler::GraphNode &),Phase::SpatialModeler::Scheduler*,BOOL const&,BOOL const&,std::placeholders::__ph<1> const&>>,void ()(Phase::SpatialModeler::GraphNode &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D47AC38;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 4std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::__bind<void (*)(void (Phase::SpatialModeler::Scheduler::*)(Phase::SpatialModeler::GraphNode &),Phase::SpatialModeler::Scheduler*,BOOL,BOOL,Phase::SpatialModeler::GraphNode &),void (Phase::SpatialModeler::Scheduler::* const&)(Phase::SpatialModeler::GraphNode &),Phase::SpatialModeler::Scheduler*,BOOL const&,BOOL const&,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (*)(void (Phase::SpatialModeler::Scheduler::*)(Phase::SpatialModeler::GraphNode &),Phase::SpatialModeler::Scheduler*,BOOL,BOOL,Phase::SpatialModeler::GraphNode &),void (Phase::SpatialModeler::Scheduler::* const&)(Phase::SpatialModeler::GraphNode &),Phase::SpatialModeler::Scheduler*,BOOL const&,BOOL const&,std::placeholders::__ph<1> const&>>,void ()(Phase::SpatialModeler::GraphNode &)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void, void, void, void, uint64_t))(a1 + 8))(*(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40), *(unsigned __int8 *)(a1 + 41), a2);
}

Phase::Controller::SpeechDetector::SpeechDetectorImpl *std::unique_ptr<Phase::Controller::SpeechDetector::SpeechDetectorImpl>::reset[abi:ne180100](Phase::Controller::SpeechDetector::SpeechDetectorImpl **a1, Phase::Controller::SpeechDetector::SpeechDetectorImpl *a2)
{
  __n128 result = *a1;
  *a1 = a2;
  if (result)
  {
    Phase::Controller::SpeechDetector::SpeechDetectorImpl::~SpeechDetectorImpl(result);
    JUMPOUT(0x223C938A0);
  }
  return result;
}

uint64_t Phase::Controller::SpeechDetector::SpeechDetectorImpl::ProcessAndGetLatest(float *a1, _DWORD *a2, float *a3)
{
  if (*a2)
  {
    unint64_t v6 = 0;
    uint64_t v7 = a2 + 4;
    while (!Phase::Controller::Vad_Process(*(void *)a1, *v7, *((_DWORD *)v7 - 1) >> 2))
    {
      ++v6;
      v7 += 2;
      if (v6 >= *a2) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    float v11 = 0.0;
    SpeechProbabilityHardfloat Value = Phase::Controller::Vad_GetSpeechProbabilityHardValue(*(void *)a1, &v11);
    uint64_t result = 0;
    if (SpeechProbabilityHardValue) {
      return result;
    }
    float v10 = v11;
    *a3 = v11;
    if (a1[2] != v10)
    {
      a1[2] = v10;
      return 1;
    }
  }
  return 0;
}

void Phase::Controller::SpeechDetector::SpeechDetectorImpl::~SpeechDetectorImpl(Phase::Controller::SpeechDetector::SpeechDetectorImpl *this)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)this;
  if (v2)
  {
    char v10 = 0;
    off_267F77BF8(v2, &v10);
    if (v10)
    {
      long long v3 = (Phase::Logger *)off_267F77C00(*(void *)this);
      int v4 = (int)v3;
      if (v3)
      {
        uint64_t v5 = **(id **)(Phase::Logger::GetInstance(v3) + 912);
        if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          long long v12 = "SpeechDetector.mm";
          __int16 v13 = 1024;
          int v14 = 118;
          __int16 v15 = 1024;
          LODWORD(v16) = v4;
          _os_log_impl(&dword_221E5E000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d Unable to uninitialize VAD Speech Detector, err = %d", buf, 0x18u);
        }
      }
    }
    unint64_t v6 = (Phase::Logger *)off_267F77C08(*(void *)this);
    int v7 = (int)v6;
    if (v6)
    {
      uint64_t v8 = **(id **)(Phase::Logger::GetInstance(v6) + 912);
      unint64_t v6 = (Phase::Logger *)os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
      if (v6)
      {
        *(_DWORD *)buf = 136315650;
        long long v12 = "SpeechDetector.mm";
        __int16 v13 = 1024;
        int v14 = 126;
        __int16 v15 = 1024;
        LODWORD(v16) = v7;
        _os_log_impl(&dword_221E5E000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d Unable to destroy VAD Speech Detector, err = %d", buf, 0x18u);
      }
    }
    *(void *)this = 0;
    uint64_t v9 = **(id **)(Phase::Logger::GetInstance(v6) + 912);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      long long v12 = "SpeechDetector.mm";
      __int16 v13 = 1024;
      int v14 = 131;
      __int16 v15 = 2048;
      uint64_t v16 = this;
      _os_log_impl(&dword_221E5E000, v9, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Destroyed Speech Detector %p.", buf, 0x1Cu);
    }
  }
}

void sub_2220795B4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void Phase::DspLayer::SpringGain::GetNewRegistryEntry(Phase::DspLayer::SpringGain *this)
{
  uint64_t v2 = *MEMORY[0x263EF8340];
  uint64_t v1 = (char *)malloc_type_malloc(0xA8uLL, 0x1050040B063AAFAuLL);
  *(void *)uint64_t v1 = "Duration";
  *((void *)v1 + 1) = 0x500000000;
  *(void *)(v1 + 2std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = 0x100000000;
  *((_DWORD *)v1 + 7) = 3;
  *((_OWORD *)v1 + 2) = xmmword_2220E8480;
  *((void *)v1 + 6) = 0x3F91111120000000;
  *((void *)v1 + 7) = "Target";
  *((void *)v1 + 8) = 0x500000001;
  *(void *)(v1 + 76) = 0x100000000;
  *((_DWORD *)v1 + 21) = 3;
  *(_OWORD *)(v1 + 88) = xmmword_2220A4F90;
  *((void *)v1 + 1objc_destroyWeak(this + 3) = 0x3FF0000000000000;
  *((void *)v1 + 14) = "Damping Constant";
  *((void *)v1 + 1std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear(this + 5) = 0x500000002;
  *(void *)(v1 + 132) = 0x100000000;
  *((_DWORD *)v1 + 3std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear(this + 5) = 3;
  *((_OWORD *)v1 + 9) = xmmword_2220E7D70;
  *((void *)v1 + 2std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = 0x3FF0000000000000;
  operator new();
}

void sub_22207978C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Phase::DspLayer::SpringGain::~SpringGain(Phase::DspLayer::SpringGain *this)
{
  Phase::DspLayer::VoicePool::~VoicePool(this);

  JUMPOUT(0x223C938A0);
}

void anonymous namespace'::SpringGainSlice::~SpringGainSlice(_anonymous_namespace_::SpringGainSlice *this)
{
}

double anonymous namespace'::SpringGainSlice::Reset(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v12 = *MEMORY[0x263EF8340];
  __asm { FMOV            V1.4S, #1.0 }
  *(int32x4_t *)(a1 + 16) = vdupq_n_s32(0x3C888889u);
  *(_OWORD *)(a1 + 32) = _Q1;
  *(_OWORD *)(a1 + 48) = _Q1;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 4176) = 0u;
  *(_OWORD *)(a1 + 8368) = 0u;
  *(_OWORD *)(a1 + 8384) = 0u;
  long long v10 = _Q1;
  long long v11 = xmmword_2220A4FB0;
  do
  {
    *(_DWORD *)(a1 + 8368 + 4 * *(int *)((char *)&v10 + v2 + 16)) = *(_DWORD *)((char *)&v10 + v2);
    v2 += 4;
  }
  while (v2 != 16);
  uint64_t v8 = 0;
  long long v11 = xmmword_2220A4FB0;
  long long v10 = 0uLL;
  do
  {
    *(_DWORD *)(a1 + 8384 + 4 * *(int *)((char *)&v10 + v8 + 16)) = *(_DWORD *)((char *)&v10 + v8);
    v8 += 4;
  }
  while (v8 != 16);
  (*(void (**)(uint64_t))(*(void *)a1 + 48))(a1);
  double result = 0.0;
  *(_OWORD *)(a1 + 8416) = 0u;
  *(_OWORD *)(a1 + 840std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = 0u;
  return result;
}

uint64_t anonymous namespace'::SpringGainSlice::Reset(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  int v7 = (_DWORD *)(a1 + 4 * a3);
  v7[4] = 1015580809;
  v7[8] = 1065353216;
  v7[12] = 1065353216;
  v7[16] = 0;
  v7[1044] = 0;
  v7[2092] = 1065353216;
  v7[2096] = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  *(void *)(a1 + 8 * a3 + 840std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = a4;
  return result;
}

uint64_t anonymous namespace'::SpringGainSlice::GetParameter(_anonymous_namespace_::SpringGainSlice *this, unsigned int a2)
{
  if (a2 > 2) {
    return 9;
  }
  else {
    return 0;
  }
}

uint64_t anonymous namespace'::SpringGainSlice::SetParameter(_anonymous_namespace_::SpringGainSlice *this, int a2, int a3, double a4)
{
  if (a2 == 2)
  {
    uint64_t result = 0;
    float v7 = a4;
    *((float *)this + a3 + 12) = v7;
  }
  else if (a2 == 1)
  {
    uint64_t result = 0;
    float v8 = a4;
    *((float *)this + a3 + 8) = v8;
  }
  else if (a2)
  {
    return 9;
  }
  else
  {
    uint64_t result = 0;
    float v6 = a4;
    *((float *)this + a3 + 4) = v6;
  }
  return result;
}

__n128 anonymous namespace'::SpringGainSlice::UpdateParameters(uint64_t a1)
{
  long long v7 = *(_OWORD *)(a1 + 32);
  float32x4_t v2 = vdivq_f32((float32x4_t)vdupq_n_s32(0x40C90FDBu), *(float32x4_t *)(a1 + 16));
  float32x4_t v5 = vmulq_f32(v2, vaddq_f32(*(float32x4_t *)(a1 + 48), *(float32x4_t *)(a1 + 48)));
  float32x4_t v6 = vmulq_f32(v2, v2);
  __n128 v4 = *(__n128 *)(a1 + 4176);
  memcpy((void *)(a1 + 4192), (const void *)(a1 + 64), 0x1010uLL);
  *(float32x4_t *)(a1 + 8304) = v6;
  *(_OWORD *)(a1 + 832std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = v7;
  *(float32x4_t *)(a1 + 8336) = v5;
  __n128 result = v4;
  *(__n128 *)(a1 + 8352) = v4;
  return result;
}

uint64_t anonymous namespace'::SpringGainSlice::UpdateParameters(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3 = result + 4 * a3;
  float v4 = *(float *)(v3 + 16);
  unsigned int v5 = *(_DWORD *)(v3 + 32);
  if (v4 >= 0.001)
  {
    float v6 = 6.2832 / v4;
    float v7 = v6 * v6;
    float v8 = v6 * (float)(*(float *)(v3 + 48) + *(float *)(v3 + 48));
    *(float *)(v3 + 8304) = v7;
    *(float *)(v3 + 8336) = v8;
  }
  else
  {
    *(_DWORD *)(v3 + 8384) = 0;
    *(_DWORD *)(v3 + 8368) = v5;
  }
  unsigned int v9 = *(_DWORD *)(v3 + 4176);
  long long v10 = (unsigned int *)(result + 4 * a3);
  uint64_t v11 = v10[16];
  v10[1048] = v11;
  if ((int)v11 >= 1)
  {
    uint64_t v12 = (_DWORD *)(result + 4 * a3);
    do
    {
      v12[1052] = v12[20];
      v12[1056] = v12[24];
      v12 += 8;
      --v11;
    }
    while (v11);
  }
  v10[2080] = v5;
  v10[2088] = v9;
  return result;
}

uint64_t anonymous namespace'::SpringGainSlice::Run(uint64_t result, uint64_t a2, uint64_t a3, unsigned int a4)
{
  float v4 = *(float *)(a2 + 8);
  float32x4_t v5 = *(float32x4_t *)(result + 8368);
  float32x4_t v6 = vmlaq_n_f32(*(float32x4_t *)(result + 8384), vmlaq_f32(vmulq_f32(*(float32x4_t *)(result + 8384), vnegq_f32(*(float32x4_t *)(result + 8336))), vsubq_f32(*(float32x4_t *)(result + 8320), v5), *(float32x4_t *)(result + 8304)), v4);
  int32x4_t v7 = (int32x4_t)vandq_s8(*(int8x16_t *)(result + 4192), (int8x16_t)vcgtq_s32(vdupq_n_s32(a4), (int32x4_t)xmmword_2220A5190));
  int64x2_t v8 = (int64x2_t)vcgtzq_s32(v7);
  if (vorrq_s8((int8x16_t)vdupq_laneq_s64(v8, 1), (int8x16_t)v8).u64[0])
  {
    uint64_t v9 = *(void *)(a2 + 56);
    long long v10 = (float32x4_t *)(result + 4224);
    float32x4_t v11 = 0uLL;
    int32x4_t v12 = 0uLL;
    v13.i64[0] = 0x100000001;
    v13.i64[1] = 0x100000001;
    do
    {
      v14.i32[0] = *(_DWORD *)(v9 + 4 * v10[-1].i32[0]);
      v14.i32[1] = *(_DWORD *)(v9 + 4 * v10[-1].i32[1]);
      v14.i32[2] = *(_DWORD *)(v9 + 4 * v10[-1].i32[2]);
      v14.i32[3] = *(_DWORD *)(v9 + 4 * v10[-1].i32[3]);
      float32x4_t v11 = vmlaq_f32(v11, (float32x4_t)vandq_s8((int8x16_t)v8, v14), *v10);
      int32x4_t v12 = vaddq_s32(v12, v13);
      int64x2_t v8 = (int64x2_t)vcgtq_s32(v7, v12);
      v10 += 2;
    }
    while (vorrq_s8((int8x16_t)vdupq_laneq_s64(v8, 1), (int8x16_t)v8).u64[0]);
  }
  else
  {
    float32x4_t v11 = 0uLL;
  }
  float32x4_t v15 = vmlaq_n_f32(v5, v6, v4);
  HIDWORD(v16) = a4 - 1;
  LODWORD(v16) = a4 - 1;
  float32x4_t v17 = vmulq_f32(v15, v11);
  int8x16_t v18 = vandq_s8((int8x16_t)v17, vorrq_s8((int8x16_t)vcltzq_f32(v17), (int8x16_t)vcgezq_f32(v17)));
  switch((v16 >> 1))
  {
    case 0u:
      goto LABEL_10;
    case 1u:
      goto LABEL_9;
    case 3u:
      goto LABEL_8;
    case 7u:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8364)) = v18.i32[3];
LABEL_8:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8360)) = v18.i32[2];
LABEL_9:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 83Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Collection::~Collection((Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Collection *)(this + 56)) = v18.i32[1];
LABEL_10:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8352)) = v18.i32[0];
      break;
    default:
      break;
  }
  *(float32x4_t *)(result + 8368) = v15;
  *(float32x4_t *)(result + 8384) = v6;
  return result;
}

float anonymous namespace'::SpringGainSlice::CopyVoiceState(_anonymous_namespace_::SpringGainSlice *this, Phase::DspLayer::VoicePoolSlice *a2, unsigned int a3, unsigned int a4)
{
  float v4 = (_DWORD *)((char *)a2 + 4 * (int)a3);
  float32x4_t v5 = (_DWORD *)((char *)this + 4 * (int)a4);
  v5[4] = v4[4];
  v5[8] = v4[8];
  v5[12] = v4[12];
  uint64_t v6 = v4[16];
  v5[16] = v6;
  if ((int)v6 >= 1)
  {
    int32x4_t v7 = (_DWORD *)((char *)this + 4 * (int)a4 + 96);
    int64x2_t v8 = (int *)((char *)a2 + 4 * (int)a3 + 96);
    do
    {
      *(v7 - 4) = *(v8 - 4);
      int v9 = *v8;
      v8 += 8;
      _DWORD *v7 = v9;
      v7 += 8;
      --v6;
    }
    while (v6);
  }
  long long v10 = (_DWORD *)((char *)this + 4 * (int)a4);
  float32x4_t v11 = (_DWORD *)((char *)a2 + 4 * (int)a3);
  uint64_t v12 = v11[1048];
  v10[1048] = v12;
  if ((int)v12 >= 1)
  {
    int32x4_t v13 = v10 + 1056;
    int8x16_t v14 = v11 + 1056;
    do
    {
      *(v13 - 4) = *(v14 - 4);
      int v15 = *v14;
      v14 += 8;
      _DWORD *v13 = v15;
      v13 += 8;
      --v12;
    }
    while (v12);
  }
  v10[1044] = v11[1044];
  v10[2076] = v11[2076];
  v10[2080] = v11[2080];
  v10[2084] = v11[2084];
  v10[2088] = v11[2088];
  if (a3 >= 4) {
    __assert_rtn("Copy", "DelaylineLinear.hpp", 507, "fromLane >= 0 && fromLane < PHASE_SIMD_WIDTH");
  }
  if (a4 >= 4) {
    __assert_rtn("Copy", "DelaylineLinear.hpp", 508, "toLane >= 0 && toLane < PHASE_SIMD_WIDTH");
  }
  unint64_t v16 = (char *)a2 + 4 * a3;
  float32x4_t v17 = (char *)this + 4 * a4;
  *((_DWORD *)v17 + 2092) = *((_DWORD *)v16 + 2092);
  float result = *((float *)v16 + 2096);
  *((float *)v17 + 2096) = result;
  *((void *)this + (int)a4 + 105std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = *((void *)a2 + (int)a3 + 1050);
  return result;
}

uint64_t anonymous namespace'::SpringGainSlice::AddInput(_anonymous_namespace_::SpringGainSlice *this, int a2, int a3, int a4, float a5)
{
  if (a2) {
    return 8;
  }
  int32x4_t v7 = (char *)this + 64;
  uint64_t v8 = *((int *)this + a3 + 16);
  if ((int)v8 > 127) {
    return 6;
  }
  uint64_t result = 0;
  int v9 = (char *)this + 32 * v8 + 4 * a3;
  *((_DWORD *)v9 + 2std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = a4;
  *((float *)v9 + 24) = a5;
  *(_DWORD *)&v7[4 * a3] = v8 + 1;
  return result;
}

uint64_t anonymous namespace'::SpringGainSlice::RemoveInput(_anonymous_namespace_::SpringGainSlice *this, int a2, int a3, int a4)
{
  if (a2) {
    return 8;
  }
  else {
    return Phase::DspLayer::VoiceConnectionList<128>::RemoveConnection((uint64_t)this + 64, a3, a4);
  }
}

uint64_t anonymous namespace'::SpringGainSlice::SetInputGain(_anonymous_namespace_::SpringGainSlice *this, int a2, int a3, int a4, float a5)
{
  if (a2) {
    return 8;
  }
  uint64_t v6 = *((unsigned int *)this + a3 + 16);
  if ((int)v6 < 1) {
    return 7;
  }
  uint64_t v7 = 0;
  for (uint64_t i = (float *)((char *)this + 4 * a3 + 96); *((_DWORD *)i - 4) != a4; i += 8)
  {
    if (v6 == ++v7) {
      return 7;
    }
  }
  if ((v7 & 0x80000000) != 0) {
    return 7;
  }
  uint64_t result = 0;
  *uint64_t i = a5;
  return result;
}

void anonymous namespace'::SpringGainSlice::GetInputs(_anonymous_namespace_::SpringGainSlice *this@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (a2)
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    Phase::DspLayer::VoiceConnectionList<128>::GetConnections((uint64_t)this + 64, a3, (char **)a4);
  }
}

uint64_t anonymous namespace'::SpringGainSlice::ClearInputs(_anonymous_namespace_::SpringGainSlice *this, int a2)
{
  *((_DWORD *)this + a2 + 16) = 0;
  return 0;
}

uint64_t anonymous namespace'::SpringGainSlice::GetMaximumInputConnectionCount(_anonymous_namespace_::SpringGainSlice *this, int a2)
{
  return (a2 == 0) << 7;
}

unint64_t anonymous namespace'::SpringGainSlice::GetOutput(_anonymous_namespace_::SpringGainSlice *this, int a2, int a3)
{
  if (a2) {
    return 0xFFFFFFFF00000008;
  }
  else {
    return (unint64_t)*((unsigned int *)this + a3 + 1044) << 32;
  }
}

uint64_t anonymous namespace'::SpringGainSlice::SetOutput(_anonymous_namespace_::SpringGainSlice *this, int a2, int a3, int a4)
{
  if (a2) {
    return 8;
  }
  uint64_t result = 0;
  *((_DWORD *)this + a3 + 1044) = a4;
  return result;
}

void std::__function::__func<Phase::DspLayer::SpringGain::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::SpringGain::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::~__func()
{
}

void *std::__function::__func<Phase::DspLayer::SpringGain::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::SpringGain::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26D47AD78;
  return result;
}

void std::__function::__func<Phase::DspLayer::SpringGain::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::SpringGain::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D47AD78;
}

void std::__function::__func<Phase::DspLayer::SpringGain::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::SpringGain::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::operator()()
{
}

void sub_22207A138(_Unwind_Exception *a1)
{
  MEMORY[0x223C938A0](v1, 0x10F1C408EBD29CELL);
  _Unwind_Resume(a1);
}

uint64_t Phase::SampledMatrix::Matrix<double,Phase::SampledMatrix::Dimension<int>,Phase::SampledMatrix::Dimension<int>,Phase::SampledMatrix::Dimension<double>,Phase::SampledMatrix::Dimension<float>,Phase::SampledMatrix::Dimension<int>>::~Matrix(uint64_t a1)
{
  float32x4_t v2 = *(void **)(a1 + 248);
  if (v2)
  {
    *(void *)(a1 + 256) = v2;
    operator delete(v2);
  }
  std::__tree<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>,std::__map_value_compare<std::pair<Phase::DspLayer::VoicePool *,long long>,std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>,std::less<std::pair<Phase::DspLayer::VoicePool *,long long>>,true>,std::allocator<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>>>::destroy(*(void **)(a1 + 224));
  std::__tree<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>,std::__map_value_compare<std::pair<Phase::DspLayer::VoicePool *,long long>,std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>,std::less<std::pair<Phase::DspLayer::VoicePool *,long long>>,true>,std::allocator<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>>>::destroy(*(void **)(a1 + 176));
  std::__tree<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>,std::__map_value_compare<std::pair<Phase::DspLayer::VoicePool *,long long>,std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>,std::less<std::pair<Phase::DspLayer::VoicePool *,long long>>,true>,std::allocator<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>>>::destroy(*(void **)(a1 + 128));
  std::__tree<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>,std::__map_value_compare<std::pair<Phase::DspLayer::VoicePool *,long long>,std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>,std::less<std::pair<Phase::DspLayer::VoicePool *,long long>>,true>,std::allocator<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>>>::destroy(*(void **)(a1 + 72));
  std::__tree<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>,std::__map_value_compare<std::pair<Phase::DspLayer::VoicePool *,long long>,std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>,std::less<std::pair<Phase::DspLayer::VoicePool *,long long>>,true>,std::allocator<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>>>::destroy(*(void **)(a1 + 24));
  return a1;
}

void std::default_delete<Phase::Controller::StatisticsDatabase::Implementation>::operator()[abi:ne180100](uint64_t a1, id *a2)
{
  if (a2)
  {
    std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SampledMatrix::Matrix<double,Phase::SampledMatrix::Dimension<int>,Phase::SampledMatrix::Dimension<int>,Phase::SampledMatrix::Dimension<double>,Phase::SampledMatrix::Dimension<float>,Phase::SampledMatrix::Dimension<int>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SampledMatrix::Matrix<double,Phase::SampledMatrix::Dimension<int>,Phase::SampledMatrix::Dimension<int>,Phase::SampledMatrix::Dimension<double>,Phase::SampledMatrix::Dimension<float>,Phase::SampledMatrix::Dimension<int>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SampledMatrix::Matrix<double,Phase::SampledMatrix::Dimension<int>,Phase::SampledMatrix::Dimension<int>,Phase::SampledMatrix::Dimension<double>,Phase::SampledMatrix::Dimension<float>,Phase::SampledMatrix::Dimension<int>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SampledMatrix::Matrix<double,Phase::SampledMatrix::Dimension<int>,Phase::SampledMatrix::Dimension<int>,Phase::SampledMatrix::Dimension<double>,Phase::SampledMatrix::Dimension<float>,Phase::SampledMatrix::Dimension<int>>>>>::~__hash_table((uint64_t)(a2 + 1));

    JUMPOUT(0x223C938A0);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SampledMatrix::Matrix<double,Phase::SampledMatrix::Dimension<int>,Phase::SampledMatrix::Dimension<int>,Phase::SampledMatrix::Dimension<double>,Phase::SampledMatrix::Dimension<float>,Phase::SampledMatrix::Dimension<int>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SampledMatrix::Matrix<double,Phase::SampledMatrix::Dimension<int>,Phase::SampledMatrix::Dimension<int>,Phase::SampledMatrix::Dimension<double>,Phase::SampledMatrix::Dimension<float>,Phase::SampledMatrix::Dimension<int>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SampledMatrix::Matrix<double,Phase::SampledMatrix::Dimension<int>,Phase::SampledMatrix::Dimension<int>,Phase::SampledMatrix::Dimension<double>,Phase::SampledMatrix::Dimension<float>,Phase::SampledMatrix::Dimension<int>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SampledMatrix::Matrix<double,Phase::SampledMatrix::Dimension<int>,Phase::SampledMatrix::Dimension<int>,Phase::SampledMatrix::Dimension<double>,Phase::SampledMatrix::Dimension<float>,Phase::SampledMatrix::Dimension<int>>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SampledMatrix::Matrix<double,Phase::SampledMatrix::Dimension<int>,Phase::SampledMatrix::Dimension<int>,Phase::SampledMatrix::Dimension<double>,Phase::SampledMatrix::Dimension<float>,Phase::SampledMatrix::Dimension<int>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SampledMatrix::Matrix<double,Phase::SampledMatrix::Dimension<int>,Phase::SampledMatrix::Dimension<int>,Phase::SampledMatrix::Dimension<double>,Phase::SampledMatrix::Dimension<float>,Phase::SampledMatrix::Dimension<int>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SampledMatrix::Matrix<double,Phase::SampledMatrix::Dimension<int>,Phase::SampledMatrix::Dimension<int>,Phase::SampledMatrix::Dimension<double>,Phase::SampledMatrix::Dimension<float>,Phase::SampledMatrix::Dimension<int>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SampledMatrix::Matrix<double,Phase::SampledMatrix::Dimension<int>,Phase::SampledMatrix::Dimension<int>,Phase::SampledMatrix::Dimension<double>,Phase::SampledMatrix::Dimension<float>,Phase::SampledMatrix::Dimension<int>>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  float32x4_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SampledMatrix::Matrix<double,Phase::SampledMatrix::Dimension<int>,Phase::SampledMatrix::Dimension<int>,Phase::SampledMatrix::Dimension<double>,Phase::SampledMatrix::Dimension<float>,Phase::SampledMatrix::Dimension<int>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SampledMatrix::Matrix<double,Phase::SampledMatrix::Dimension<int>,Phase::SampledMatrix::Dimension<int>,Phase::SampledMatrix::Dimension<double>,Phase::SampledMatrix::Dimension<float>,Phase::SampledMatrix::Dimension<int>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SampledMatrix::Matrix<double,Phase::SampledMatrix::Dimension<int>,Phase::SampledMatrix::Dimension<int>,Phase::SampledMatrix::Dimension<double>,Phase::SampledMatrix::Dimension<float>,Phase::SampledMatrix::Dimension<int>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SampledMatrix::Matrix<double,Phase::SampledMatrix::Dimension<int>,Phase::SampledMatrix::Dimension<int>,Phase::SampledMatrix::Dimension<double>,Phase::SampledMatrix::Dimension<float>,Phase::SampledMatrix::Dimension<int>>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    float32x4_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      Phase::SampledMatrix::Matrix<double,Phase::SampledMatrix::Dimension<int>,Phase::SampledMatrix::Dimension<int>,Phase::SampledMatrix::Dimension<double>,Phase::SampledMatrix::Dimension<float>,Phase::SampledMatrix::Dimension<int>>::~Matrix((uint64_t)(v2 + 3));
      operator delete(v2);
      float32x4_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t Phase::Controller::StreamedSoundAssetInfo::InitWithURL(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, double a6, double a7, uint64_t a8, uint64_t a9)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  id v16 = a4;
  id v17 = a5;
  BOOL v18 = Phase::Controller::SoundAssetInfo::BaseInit(a1, 1, a2, a3, (void *)a9, a7);
  if (v18)
  {
    uint64_t v19 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance((Phase::Logger *)v18)
                                                                                        + 816)));
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v20 = *(void *)(a1 + 16);
      id v21 = [v16 description];
      *(_DWORD *)buf = 136315906;
      uint64_t v47 = "StreamedSoundAssetInfo.mm";
      __int16 v48 = 1024;
      int v49 = 43;
      __int16 v50 = 2048;
      uint64_t v51 = v20;
      __int16 v52 = 2080;
      uint64_t v53 = [v21 UTF8String];
      _os_log_impl(&dword_221E5E000, v19, OS_LOG_TYPE_DEFAULT, "%25s:%-5d StreamedSoundAssetInfo::InitWithURL for assetId %llu url: %s", buf, 0x26u);
    }
    if (v16)
    {
      *(_DWORD *)(a1 + 32) = 1;
      id v41 = 0;
      uint64_t v22 = [objc_alloc(MEMORY[0x263EF9380]) initForReading:v16 commonFormat:1 interleaved:0 error:&v41];
      id v23 = v41;
      BOOL v24 = *(void **)(a1 + 48);
      *(void *)(a1 + 48) = v22;

      if (v23)
      {
        char v25 = *(void **)(a1 + 48);
        *(void *)(a1 + 48) = 0;
      }
      if (*(void *)(a1 + 48))
      {
        id v26 = [v16 description];
        a9 = Phase::Controller::StreamedSoundAssetInfo::Initialize(a1, a3, [v26 UTF8String], v17, a9, a6);

        if (a9)
        {
          *(_DWORD *)(a1 + 32) = 4;
          a9 = 1;
        }
        goto LABEL_21;
      }
      unint64_t v31 = NSString;
      long long v32 = [v16 description];
      uint64_t v33 = [v23 description];
      uint64_t v34 = [v31 stringWithFormat:@"[AVAudioFile initForReading] failed on file '%@' with error '%@'", v32, v33];

      __int16 v36 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v35)
                                                                                          + 816)));
      if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
      {
        uint64_t v37 = *(void *)(a1 + 16);
        uint64_t v38 = [v34 UTF8String];
        *(_DWORD *)buf = 136315906;
        uint64_t v47 = "StreamedSoundAssetInfo.mm";
        __int16 v48 = 1024;
        int v49 = 67;
        __int16 v50 = 2048;
        uint64_t v51 = v37;
        __int16 v52 = 2080;
        uint64_t v53 = v38;
        _os_log_impl(&dword_221E5E000, v36, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", buf, 0x26u);
      }

      if (a9)
      {
        uint64_t v42 = *MEMORY[0x263F08320];
        int v43 = v34;
        uint64_t v39 = [NSDictionary dictionaryWithObjects:&v43 forKeys:&v42 count:1];
        *(void *)a9 = [MEMORY[0x263F087E8] errorWithDomain:@"com.apple.coreaudio.phase" code:1346920801 userInfo:v39];
      }
    }
    else
    {
      id v23 = [NSString stringWithFormat:@"File URL was nil"];
      uint64_t v27 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance((Phase::Logger *)v23)
                                                                                          + 816)));
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        uint64_t v28 = *(void *)(a1 + 16);
        uint64_t v29 = [v23 UTF8String];
        *(_DWORD *)buf = 136315906;
        uint64_t v47 = "StreamedSoundAssetInfo.mm";
        __int16 v48 = 1024;
        int v49 = 47;
        __int16 v50 = 2048;
        uint64_t v51 = v28;
        __int16 v52 = 2080;
        uint64_t v53 = v29;
        _os_log_impl(&dword_221E5E000, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", buf, 0x26u);
      }

      if (!a9) {
        goto LABEL_21;
      }
      uint64_t v44 = *MEMORY[0x263F08320];
      id v45 = v23;
      long long v30 = [NSDictionary dictionaryWithObjects:&v45 forKeys:&v44 count:1];
      *(void *)a9 = [MEMORY[0x263F087E8] errorWithDomain:@"com.apple.coreaudio.phase" code:1346920805 userInfo:v30];
    }
    a9 = 0;
LABEL_21:

    goto LABEL_22;
  }
  a9 = 0;
LABEL_22:

  return a9;
}

void sub_22207A760(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::StreamedSoundAssetInfo::Initialize(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, double a6)
{
  uint64_t v93 = *MEMORY[0x263EF8340];
  id v73 = a4;
  float32x4_t v11 = [*(id *)(a1 + 48) processingFormat];
  if ([v11 channelCount] == 1)
  {
  }
  else
  {
    uint64_t v12 = [*(id *)(a1 + 48) processingFormat];
    if ([v12 channelCount] <= 1)
    {

      std::terminate();
    }
    int32x4_t v13 = [*(id *)(a1 + 48) processingFormat];
    int v14 = [v13 isInterleaved];

    if (v14) {
      goto LABEL_61;
    }
  }
  int v15 = [*(id *)(a1 + 48) processingFormat];
  uint64_t v16 = [v15 commonFormat];

  if (v16 != 1) {
    goto LABEL_61;
  }
  if (a6 > 0.0)
  {
    BOOL v17 = a2 == 0;
    if (v73)
    {
      id v18 = v73;
    }
    else
    {
      uint64_t v22 = [*(id *)(a1 + 48) fileFormat];
      id v23 = [v22 channelLayout];

      BOOL v24 = *(void **)(a1 + 48);
      if (!v23)
      {
        id v45 = [v24 fileFormat];
        if ([v45 channelCount] == 1)
        {
        }
        else
        {
          uint64_t v46 = [*(id *)(a1 + 48) fileFormat];
          int v47 = [v46 channelCount];

          if (v47 != 2)
          {
            uint64_t v67 = NSString;
            unint64_t v68 = [*(id *)(a1 + 48) processingFormat];
            id v21 = objc_msgSend(v67, "stringWithFormat:", @"Cannot synthesize audio channel layout for audio file '%s' with channel count %d.", a3, objc_msgSend(v68, "channelCount"));

            uint64_t v70 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v69)
                                                                                                + 816)));
            if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
            {
              uint64_t v71 = *(void *)(a1 + 16);
              *(_DWORD *)buf = 136315906;
              *(void *)&uint8_t buf[4] = "StreamedSoundAssetInfo.mm";
              __int16 v87 = 1024;
              int v88 = 388;
              __int16 v89 = 2048;
              uint64_t v90 = v71;
              __int16 v91 = 2080;
              uint64_t v92 = [v21 UTF8String];
              _os_log_impl(&dword_221E5E000, v70, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", buf, 0x26u);
            }

            if (!a5)
            {
              id v18 = 0;
              goto LABEL_58;
            }
            uint64_t v78 = *MEMORY[0x263F08320];
            uint64_t v79 = v21;
            uint64_t v37 = [NSDictionary dictionaryWithObjects:&v79 forKeys:&v78 count:1];
            uint64_t v38 = [MEMORY[0x263F087E8] errorWithDomain:@"com.apple.coreaudio.phase" code:1346920801 userInfo:v37];
            id v18 = 0;
            goto LABEL_57;
          }
        }
        __int16 v48 = [*(id *)(a1 + 48) fileFormat];
        int v49 = [v48 channelCount];

        id v50 = objc_alloc(MEMORY[0x263EF9328]);
        if (v49 == 1) {
          uint64_t v51 = 6553601;
        }
        else {
          uint64_t v51 = 6619138;
        }
        id v18 = (id)[v50 initWithLayoutTag:v51];
LABEL_41:
        if (v18)
        {
          *(_DWORD *)(a1 + 36) = [v18 layoutTag];
          id v52 = objc_alloc(MEMORY[0x263EF9388]);
          uint64_t v53 = [*(id *)(a1 + 48) processingFormat];
          uint64_t v54 = [v53 commonFormat];
          float v55 = [*(id *)(a1 + 48) processingFormat];
          [v55 sampleRate];
          double v57 = v56;
          float v58 = [*(id *)(a1 + 48) processingFormat];
          uint64_t v59 = objc_msgSend(v52, "initWithCommonFormat:sampleRate:interleaved:channelLayout:", v54, objc_msgSend(v58, "isInterleaved"), v18, v57);
          double v60 = *(void **)(a1 + 56);
          *(void *)(a1 + 56) = v59;

          if (*(void *)(a1 + 56))
          {
            uint64_t v61 = [objc_alloc(MEMORY[0x263EF9388]) initWithCommonFormat:1 sampleRate:0 interleaved:v18 channelLayout:a6];
            float v62 = *(void **)(a1 + 64);
            *(void *)(a1 + 64) = v61;

            if (*(void *)(a1 + 64))
            {
              a5 = 1;
              goto LABEL_59;
            }
            id v21 = [NSString stringWithFormat:@"[AVAudioFormat initWithCommonFormat] failed on file '%s', for output format", a3];
            uint64_t v65 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance((Phase::Logger *)v21)
                                                                                                + 816)));
            if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR))
            {
              uint64_t v66 = *(void *)(a1 + 16);
              *(_DWORD *)buf = 136315906;
              *(void *)&uint8_t buf[4] = "StreamedSoundAssetInfo.mm";
              __int16 v87 = 1024;
              int v88 = 419;
              __int16 v89 = 2048;
              uint64_t v90 = v66;
              __int16 v91 = 2080;
              uint64_t v92 = [v21 UTF8String];
              _os_log_impl(&dword_221E5E000, v65, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", buf, 0x26u);
            }

            if (!a5) {
              goto LABEL_58;
            }
            uint64_t v74 = *MEMORY[0x263F08320];
            float v75 = v21;
            uint64_t v37 = [NSDictionary dictionaryWithObjects:&v75 forKeys:&v74 count:1];
            uint64_t v38 = [MEMORY[0x263F087E8] errorWithDomain:@"com.apple.coreaudio.phase" code:1346920801 userInfo:v37];
          }
          else
          {
            id v21 = [NSString stringWithFormat:@"[AVAudioFormat initWithCommonFormat] failed on file '%s', for input format", a3];
            float v63 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance((Phase::Logger *)v21)
                                                                                                + 816)));
            if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
            {
              uint64_t v64 = *(void *)(a1 + 16);
              *(_DWORD *)buf = 136315906;
              *(void *)&uint8_t buf[4] = "StreamedSoundAssetInfo.mm";
              __int16 v87 = 1024;
              int v88 = 405;
              __int16 v89 = 2048;
              uint64_t v90 = v64;
              __int16 v91 = 2080;
              uint64_t v92 = [v21 UTF8String];
              _os_log_impl(&dword_221E5E000, v63, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", buf, 0x26u);
            }

            if (!a5) {
              goto LABEL_58;
            }
            uint64_t v76 = *MEMORY[0x263F08320];
            uint64_t v77 = v21;
            uint64_t v37 = [NSDictionary dictionaryWithObjects:&v77 forKeys:&v76 count:1];
            uint64_t v38 = [MEMORY[0x263F087E8] errorWithDomain:@"com.apple.coreaudio.phase" code:1346920801 userInfo:v37];
          }
LABEL_57:
          *(void *)a5 = v38;

          goto LABEL_58;
        }
LABEL_61:
        std::terminate();
      }
      char v25 = [v24 fileFormat];
      id v18 = [v25 channelLayout];
    }
    if ((Phase::Controller::StreamRenderer::SupportsInputLayout(v18, 2 * v17) & 1) == 0)
    {
      uint64_t v39 = NSString;
      Phase::ChannelLayout::GetStringFromLayoutTag((Phase::ChannelLayout *)[v18 layoutTag], buf);
      if ((v90 & 0x80000000) == 0) {
        __int16 v40 = buf;
      }
      else {
        __int16 v40 = *(unsigned char **)buf;
      }
      objc_msgSend(v39, "stringWithFormat:", @"Unsupported channel layout '%s' on audio file '%s'!", v40, a3);
      id v41 = (Phase::Logger *)objc_claimAutoreleasedReturnValue();
      id v21 = v41;
      if (SBYTE3(v90) < 0) {
        operator delete(*(void **)buf);
      }
      uint64_t v42 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v41)
                                                                                          + 816)));
      if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
      {
        uint64_t v43 = *(void *)(a1 + 16);
        uint64_t v44 = [v21 UTF8String];
        *(_DWORD *)buf = 136315906;
        *(void *)&uint8_t buf[4] = "StreamedSoundAssetInfo.mm";
        __int16 v87 = 1024;
        int v88 = 363;
        __int16 v89 = 2048;
        uint64_t v90 = v43;
        __int16 v91 = 2080;
        uint64_t v92 = v44;
        _os_log_impl(&dword_221E5E000, v42, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", buf, 0x26u);
      }

      if (!a5) {
        goto LABEL_58;
      }
      uint64_t v82 = *MEMORY[0x263F08320];
      unint64_t v83 = v21;
      uint64_t v37 = [NSDictionary dictionaryWithObjects:&v83 forKeys:&v82 count:1];
      uint64_t v38 = [MEMORY[0x263F087E8] errorWithDomain:@"com.apple.coreaudio.phase" code:1346920801 userInfo:v37];
      goto LABEL_57;
    }
    unsigned __int16 v26 = [v18 layoutTag];
    uint64_t v27 = [*(id *)(a1 + 48) processingFormat];
    int v28 = [v27 channelCount];

    if (v26 != v28)
    {
      uint64_t v29 = NSString;
      long long v30 = buf;
      Phase::ChannelLayout::GetStringFromLayoutTag((Phase::ChannelLayout *)[v18 layoutTag], buf);
      if ((v90 & 0x80000000) != 0) {
        long long v30 = *(unsigned char **)buf;
      }
      unsigned __int16 v31 = [v18 layoutTag];
      long long v32 = [*(id *)(a1 + 48) processingFormat];
      id v21 = [v29 stringWithFormat:@"Channel layout '%s' on audio file '%s' has mismatched channel count [layout: %d, file: %d]!", v30, a3, v31, objc_msgSend(v32, "channelCount")];

      if (SBYTE3(v90) < 0) {
        operator delete(*(void **)buf);
      }
      uint64_t v34 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v33)
                                                                                          + 816)));
      if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
      {
        uint64_t v35 = *(void *)(a1 + 16);
        uint64_t v36 = [v21 UTF8String];
        *(_DWORD *)buf = 136315906;
        *(void *)&uint8_t buf[4] = "StreamedSoundAssetInfo.mm";
        __int16 v87 = 1024;
        int v88 = 374;
        __int16 v89 = 2048;
        uint64_t v90 = v35;
        __int16 v91 = 2080;
        uint64_t v92 = v36;
        _os_log_impl(&dword_221E5E000, v34, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", buf, 0x26u);
      }

      if (!a5) {
        goto LABEL_58;
      }
      uint64_t v80 = *MEMORY[0x263F08320];
      uint64_t v81 = v21;
      uint64_t v37 = [NSDictionary dictionaryWithObjects:&v81 forKeys:&v80 count:1];
      uint64_t v38 = [MEMORY[0x263F087E8] errorWithDomain:@"com.apple.coreaudio.phase" code:1346920801 userInfo:v37];
      goto LABEL_57;
    }
    goto LABEL_41;
  }
  objc_msgSend(NSString, "stringWithFormat:", @"Invalid sample rate %f for audio file '%s'!", *(void *)&a6, a3);
  id v18 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v19 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance((Phase::Logger *)v18)
                                                                                      + 816)));
  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
  {
    uint64_t v20 = *(void *)(a1 + 16);
    *(_DWORD *)buf = 136315906;
    *(void *)&uint8_t buf[4] = "StreamedSoundAssetInfo.mm";
    __int16 v87 = 1024;
    int v88 = 339;
    __int16 v89 = 2048;
    uint64_t v90 = v20;
    __int16 v91 = 2080;
    uint64_t v92 = [v18 UTF8String];
    _os_log_impl(&dword_221E5E000, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", buf, 0x26u);
  }

  if (a5)
  {
    uint64_t v84 = *MEMORY[0x263F08320];
    id v85 = v18;
    id v21 = [NSDictionary dictionaryWithObjects:&v85 forKeys:&v84 count:1];
    *(void *)a5 = [MEMORY[0x263F087E8] errorWithDomain:@"com.apple.coreaudio.phase" code:1346920801 userInfo:v21];
LABEL_58:

    a5 = 0;
  }
LABEL_59:

  return a5;
}

void sub_22207B304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::StreamedSoundAssetInfo::InitWithData(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, double a5, double a6, uint64_t a7, void *a8, uint64_t a9, void *a10)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  id v16 = a4;
  id v17 = a8;
  BOOL v18 = Phase::Controller::SoundAssetInfo::BaseInit(a1, 1, a2, a3, a10, a6);
  if (v18)
  {
    uint64_t v19 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)v18) + 816);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v20 = *(void *)(a1 + 16);
      buf[0] = 136315650;
      *(void *)&buf[1] = "StreamedSoundAssetInfo.mm";
      __int16 v30 = 1024;
      int v31 = 100;
      __int16 v32 = 2048;
      uint64_t v33 = v20;
      _os_log_impl(&dword_221E5E000, v19, OS_LOG_TYPE_DEFAULT, "%25s:%-5d StreamedSoundAssetInfo::InitWithData for assetId %llu", (uint8_t *)buf, 0x1Cu);
    }
    *(_DWORD *)(a1 + 32) = 1;
    if (v16) {
      operator new();
    }
    id v21 = [NSString stringWithFormat:@"NSData was nil"];
    uint64_t v22 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v21)
                                                                                        + 816)));
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      uint64_t v23 = *(void *)(a1 + 16);
      uint64_t v24 = [(Phase::Logger *)v21 UTF8String];
      buf[0] = 136315906;
      *(void *)&buf[1] = "StreamedSoundAssetInfo.mm";
      __int16 v30 = 1024;
      int v31 = 106;
      __int16 v32 = 2048;
      uint64_t v33 = v23;
      __int16 v34 = 2080;
      uint64_t v35 = v24;
      _os_log_impl(&dword_221E5E000, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", (uint8_t *)buf, 0x26u);
    }

    if (a10)
    {
      uint64_t v27 = *MEMORY[0x263F08320];
      int v28 = v21;
      char v25 = [NSDictionary dictionaryWithObjects:&v28 forKeys:&v27 count:1];
      *a10 = [MEMORY[0x263F087E8] errorWithDomain:@"com.apple.coreaudio.phase" code:1346920805 userInfo:v25];
    }
  }

  return 0;
}

void sub_22207BD38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  _Unwind_Resume(a1);
}

void Phase::Controller::StreamedSoundAssetInfo::~StreamedSoundAssetInfo(Phase::Controller::StreamedSoundAssetInfo *this)
{
  float32x4_t v2 = (void *)*((void *)this + 6);
  *((void *)this + 6) = 0;

  std::unique_ptr<Phase::Controller::InMemoryAudioFile>::reset[abi:ne180100]((Phase::Controller::InMemoryAudioFile **)this + 9, 0);
  std::unique_ptr<Phase::Controller::InMemoryAudioFile>::reset[abi:ne180100]((Phase::Controller::InMemoryAudioFile **)this + 9, 0);
}

{
  uint64_t vars8;

  Phase::Controller::StreamedSoundAssetInfo::~StreamedSoundAssetInfo(this);

  JUMPOUT(0x223C938A0);
}

Phase::Controller::InMemoryAudioFile *std::unique_ptr<Phase::Controller::InMemoryAudioFile>::reset[abi:ne180100](Phase::Controller::InMemoryAudioFile **a1, Phase::Controller::InMemoryAudioFile *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    Phase::Controller::InMemoryAudioFile::~InMemoryAudioFile(result);
    JUMPOUT(0x223C938A0);
  }
  return result;
}

uint64_t Phase::Controller::StreamedSoundAssetInfo::SizeInBytes(Phase::Controller::StreamedSoundAssetInfo *this)
{
  return 0;
}

void Phase::Controller::StreamedSoundAssetInfo::CreateStreamRenderer(Phase::Controller::StreamedSoundAssetInfo *this@<X0>, NSString *a2@<X2>, int a3@<W1>, void *a4@<X8>)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v7 = a2;
  if (!a3 || (uint64_t v8 = v7) == 0) {
    std::terminate();
  }
  if (*((void *)this + 7) && *((void *)this + 8)) {
    operator new();
  }
  int v9 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance((Phase::Logger *)v7)
                                                                                     + 816)));
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    id v10 = [*((id *)this + 7) description];
    uint64_t v11 = [v10 UTF8String];
    id v12 = [*((id *)this + 8) description];
    *(_DWORD *)buf = 136315906;
    int v14 = "StreamedSoundAssetInfo.mm";
    __int16 v15 = 1024;
    int v16 = 200;
    __int16 v17 = 2080;
    uint64_t v18 = v11;
    __int16 v19 = 2080;
    uint64_t v20 = [v12 UTF8String];
    _os_log_impl(&dword_221E5E000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d Error: invalid stream formats, inputFormat %s, outputFormat %s!", buf, 0x26u);
  }
  *a4 = 0;
}

void sub_22207C3FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  std::unique_ptr<Phase::Controller::StreamRenderer>::reset[abi:ne180100]((Phase::Controller::StreamRenderer **)va, 0);
  _Unwind_Resume(a1);
}

BOOL Phase::Controller::StreamedSoundAssetInfo::ScheduleFile(uint64_t a1, uint64_t a2, void *a3, char a4, uint64_t a5, void *a6)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  id v11 = a3;
  id v12 = a6;
  if (!a2) {
    std::terminate();
  }
  int32x4_t v13 = v12;
  BOOL v14 = Phase::Controller::StreamRenderer::ScheduleFile(a2, *(void **)(a1 + 48), v11, a4, a5, v12);
  BOOL v15 = v14;
  if (!v14)
  {
    int v16 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance((Phase::Logger *)v14)
                                                                                        + 816)));
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      __int16 v17 = [*(id *)(a1 + 48) url];
      id v18 = [v17 description];
      int v20 = 136315906;
      uint64_t v21 = "StreamedSoundAssetInfo.mm";
      __int16 v22 = 1024;
      int v23 = 274;
      __int16 v24 = 2048;
      uint64_t v25 = a2;
      __int16 v26 = 2080;
      uint64_t v27 = [v18 UTF8String];
      _os_log_impl(&dword_221E5E000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d stream renderer@%p: failed to schedule audio file '%s' for rendering!", (uint8_t *)&v20, 0x26u);
    }
  }

  return v15;
}

void sub_22207C654(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL Phase::Controller::StreamedSoundAssetInfo::ScheduleSegment(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  id v13 = a3;
  id v14 = a7;
  if (!a2) {
    std::terminate();
  }
  BOOL v15 = v14;
  BOOL v16 = Phase::Controller::StreamRenderer::ScheduleSegment(a2, *(void **)(a1 + 48), v13, a4, a5, a6, v14);
  BOOL v17 = v16;
  if (!v16)
  {
    id v18 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance((Phase::Logger *)v16)
                                                                                        + 816)));
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      __int16 v19 = [*(id *)(a1 + 48) url];
      id v20 = [v19 description];
      int v22 = 136315906;
      int v23 = "StreamedSoundAssetInfo.mm";
      __int16 v24 = 1024;
      int v25 = 304;
      __int16 v26 = 2048;
      uint64_t v27 = a2;
      __int16 v28 = 2080;
      uint64_t v29 = [v20 UTF8String];
      _os_log_impl(&dword_221E5E000, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d stream renderer@%p: failed to schedule audio file '%s' for rendering!", (uint8_t *)&v22, 0x26u);
    }
  }

  return v17;
}

void sub_22207C820(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double Phase::Controller::StreamedSoundAssetInfo::GetFileLengthInSeconds(id *this)
{
  uint64_t v2 = [this[6] length];
  uint64_t v3 = [this[6] fileFormat];
  [v3 sampleRate];
  double v5 = (double)v2 / v4;

  return v5;
}

void sub_22207C8BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::SoundAssetInfo::AsResidentSoundAssetInfo(Phase::Controller::SoundAssetInfo *this)
{
  return 0;
}

uint64_t Phase::Controller::StreamRenderer::StreamRenderer(uint64_t a1, void *a2, void *a3, unsigned int a4, unsigned int a5, uint64_t a6, void *a7, long long *a8)
{
  uint64_t v144 = *MEMORY[0x263EF8340];
  id v15 = a2;
  id v16 = a3;
  id v115 = a7;
  for (uint64_t i = 0; i != 48; i += 24)
  {
    uint64_t v18 = a1 + i;
    *(_DWORD *)uint64_t v18 = 0;
    *(void *)(v18 + 8) = 0;
    *(void *)(v18 + 16) = 0;
  }
  *(_OWORD *)(a1 + 48) = 0u;
  __int16 v19 = (id *)(a1 + 48);
  *(_OWORD *)(a1 + 64) = 0u;
  locatiouint64_t n = (id *)(a1 + 64);
  *(_OWORD *)(a1 + 8std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = 0u;
  id v114 = v15;
  *(void *)(a1 + 96) = v114;
  id v20 = v16;
  *(void *)(a1 + 104) = v20;
  *(_DWORD *)(a1 + 112) = a5;
  id v116 = v20;
  [v20 sampleRate];
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 12std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = v21;
  *(void *)(a1 + 128) = a6;
  *(_WORD *)(a1 + 136) = 0;
  int v22 = (void **)(a1 + 208);
  *(void *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 16std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = 0;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 20std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_WORD *)(a1 + 216) = 0;
  int v23 = (Phase::Logger *)caulk::pooled_semaphore_mutex::pooled_semaphore_mutex((caulk::pooled_semaphore_mutex *)(a1 + 220));
  *(unsigned char *)(a1 + 224) = 0;
  *(unsigned char *)(a1 + 288) = 0;
  *(unsigned char *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 36std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(a1 + 384) = xmmword_2220A5010;
  *(_DWORD *)(a1 + 40std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = 0;
  __int16 v24 = v114;
  Phase::Logger::GetInstance(v23);
  [v116 sampleRate];
  double v26 = v25;
  [v114 sampleRate];
  unsigned int v28 = vcvtmd_u64_f64(v26 * (double)a4 / v27);
  *(_DWORD *)(a1 + 20std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = v28;
  if (v28 < a5 && v28 != 0)
  {
    uint64_t v30 = [objc_alloc(MEMORY[0x263EF93B0]) initWithPCMFormat:v116 frameCapacity:*(unsigned int *)(a1 + 200)];
    int v31 = *(void **)(a1 + 184);
    *(void *)(a1 + 184) = v30;

    [*(id *)(a1 + 184) setFrameLength:*(unsigned int *)(a1 + 200)];
    uint64_t v32 = [*(id *)(a1 + 184) mutableAudioBufferList];
    *(void *)(a1 + 192) = v32;
    *(_DWORD *)(a1 + 204) = *(_DWORD *)(a1 + 200);
    if (!v32
      || !*(_DWORD *)v32
      || !*(void *)(v32 + 16)
      || [v114 isInterleaved] && objc_msgSend(v114, "channelCount") != 1)
    {
      goto LABEL_99;
    }
    if ([v116 isInterleaved] && objc_msgSend(v116, "channelCount") != 1
      || *(_DWORD *)(*(void *)(a1 + 192) + 12) != 4 * *(unsigned int *)(a1 + 200))
    {
      goto LABEL_99;
    }
  }
  dispatch_queue_t v33 = dispatch_queue_create("Phase.StreamRenderer", 0);
  __int16 v34 = *v22;
  *int v22 = v33;

  uint64_t v35 = applesauce::dispatch::v1::queue::operator*((id *)(a1 + 208));
  uint64_t v36 = dispatch_get_global_queue(0, 0);
  dispatch_set_target_queue(v35, v36);

  if (v115)
  {
    uint64_t v38 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v37)
                                                                                        + 384)));
    if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
    {
      id v39 = [*(id *)(a1 + 96) description];
      uint64_t v40 = [v39 UTF8String];
      id v41 = [*(id *)(a1 + 104) description];
      uint64_t v42 = [v41 UTF8String];
      int v43 = *(_DWORD *)(a1 + 112);
      uint64_t v44 = *(void *)(a1 + 128);
      *(_DWORD *)buf = 136316930;
      *(void *)&uint8_t buf[4] = "StreamRenderer.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 199;
      *(_WORD *)&unsigned char buf[18] = 2048;
      *(void *)&buf[20] = a1;
      __int16 v134 = 2080;
      uint64_t v135 = v40;
      __int16 v136 = 2080;
      uint64_t v137 = v42;
      __int16 v138 = 1024;
      unsigned int v139 = a4;
      __int16 v140 = 1024;
      int v141 = v43;
      __int16 v142 = 2048;
      uint64_t v143 = v44;
      _os_log_impl(&dword_221E5E000, v38, OS_LOG_TYPE_DEFAULT, "%25s:%-5d bufferstream@%p: initializing render block with buffer format %s, output format %s, in max #frames %d, out max #frames %d, config options 0x%lx", buf, 0x46u);
    }
  }
  if (!*(_DWORD *)(a1 + 112)) {
    goto LABEL_99;
  }
  uint64_t v45 = objc_opt_new();
  uint64_t v46 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = v45;

  uint64_t v47 = 200;
  if (!*(void *)(a1 + 192)) {
    uint64_t v47 = 112;
  }
  uint64_t v48 = *(unsigned int *)(a1 + v47);
  uint64_t v49 = ~*(_DWORD *)(a1 + 128) & 1;
  id v50 = *(void **)(a1 + 48);
  uint64_t v51 = *(void *)(a1 + 104);
  id v129 = 0;
  char v52 = [v50 enableManualRenderingMode:v49 format:v51 maximumFrameCount:v48 error:&v129];
  uint64_t v53 = (Phase::Logger *)v129;
  uint64_t v113 = v53;
  if (v53) {
    char v54 = 0;
  }
  else {
    char v54 = v52;
  }
  if ((v54 & 1) == 0)
  {
    float v75 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v53)
                                                                                        + 384)));
    if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
    {
      id v76 = [*(id *)(a1 + 104) description];
      uint64_t v77 = [v76 UTF8String];
      id v78 = [(Phase::Logger *)v113 description];
      uint64_t v79 = [v78 UTF8String];
      *(_DWORD *)buf = 136316162;
      *(void *)&uint8_t buf[4] = "StreamRenderer.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 229;
      *(_WORD *)&unsigned char buf[18] = 2048;
      *(void *)&buf[20] = a1;
      __int16 v134 = 2080;
      uint64_t v135 = v77;
      __int16 v136 = 2080;
      uint64_t v137 = v79;
      _os_log_impl(&dword_221E5E000, v75, OS_LOG_TYPE_ERROR, "%25s:%-5d bufferstream@%p: could not configure AVAE in ManualRenderingModeRealtime with format %s, err = %s", buf, 0x30u);
    }
    goto LABEL_61;
  }
  float v55 = (char *)operator new(0x58uLL);
  *((void *)v55 + 1) = 0;
  *((void *)v55 + 2) = 0;
  *(void *)float v55 = &unk_26D47AEB0;
  long long v56 = 0uLL;
  *(_OWORD *)(v55 + 24) = 0u;
  double v57 = v55 + 24;
  *(_OWORD *)(v55 + 4std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(v55 + 56) = 0u;
  *(_OWORD *)(v55 + 72) = 0u;
  float v58 = *(std::__shared_weak_count **)(a1 + 312);
  *(void *)(a1 + 304) = v55 + 24;
  *(void *)(a1 + 312) = v55;
  if (v58)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v58);
    long long v56 = 0uLL;
    double v57 = *(_OWORD **)(a1 + 304);
  }
  v57[2] = v56;
  v57[3] = v56;
  *double v57 = v56;
  v57[1] = v56;
  uint64_t v59 = operator new(0x20uLL);
  v59[1] = 0;
  v59[2] = 0;
  *uint64_t v59 = &unk_26D47AEE8;
  v59[3] = 0;
  double v60 = *(std::__shared_weak_count **)(a1 + 328);
  *(void *)(a1 + 32std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = v59 + 3;
  *(void *)(a1 + 328) = v59;
  if (v60) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v60);
  }
  uint64_t v61 = operator new(0x20uLL);
  v61[1] = 0;
  v61[2] = 0;
  *uint64_t v61 = &unk_26D47AF20;
  *((_DWORD *)v61 + 6) = 0;
  float v62 = *(std::__shared_weak_count **)(a1 + 176);
  *(void *)(a1 + 168) = v61 + 3;
  *(void *)(a1 + 176) = v61;
  if (v62) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v62);
  }
  if (v115)
  {
    uint64_t v111 = a8;
    uint64_t v63 = *(void *)(a1 + 304);
    uint64_t v64 = *(std::__shared_weak_count **)(a1 + 312);
    if (v64) {
      atomic_fetch_add_explicit(&v64->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v110 = v49;
    uint64_t v66 = *(void *)(a1 + 320);
    uint64_t v65 = *(std::__shared_weak_count **)(a1 + 328);
    if (v65) {
      atomic_fetch_add_explicit(&v65->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v67 = *(void *)(a1 + 168);
    unint64_t v68 = *(std::__shared_weak_count **)(a1 + 176);
    if (v68) {
      atomic_fetch_add_explicit(&v68->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    [*(id *)(a1 + 104) sampleRate];
    if (v69 == 0.0) {
      goto LABEL_99;
    }
    [*(id *)(a1 + 104) sampleRate];
    uint64_t v71 = v70;
    id v72 = objc_alloc(MEMORY[0x263EF9428]);
    v119[0] = MEMORY[0x263EF8330];
    v119[1] = 3321888768;
    v119[2] = ___ZN5Phase10Controller14StreamRendererC2EP13AVAudioFormatS3_jjNSt3__16bitsetILm8EEEU13block_pointerFiPbPK14AudioTimeStampjP15AudioBufferListENS4_8optionalINS1_29AudioIssueDetectorInformationEEE_block_invoke;
    v119[3] = &unk_26D47ADF0;
    uint64_t v121 = v63;
    float v122 = v64;
    if (v64) {
      atomic_fetch_add_explicit(&v64->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v123 = v66;
    float v124 = v65;
    __int16 v24 = v114;
    if (v65) {
      atomic_fetch_add_explicit(&v65->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v125 = v67;
    float v126 = v68;
    a8 = v111;
    if (v68) {
      atomic_fetch_add_explicit(&v68->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v127 = v71;
    uint64_t v128 = a1;
    id v120 = v115;
    uint64_t v73 = [v72 initWithFormat:v114 renderBlock:v119];
    uint64_t v49 = v110;
    id v74 = *location;
    *locatiouint64_t n = (id)v73;

    if (v126) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v126);
    }
    if (v124) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v124);
    }
    if (v122) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v122);
    }
    if (v68) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v68);
    }
    if (v65) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v65);
    }
    if (v64) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v64);
    }
  }
  else
  {
    __int16 v24 = v114;
    uint64_t v82 = objc_opt_new();
    unint64_t v83 = *(void **)(a1 + 72);
    *(void *)(a1 + 72) = v82;

    objc_storeStrong(location, *(id *)(a1 + 72));
  }
  uint64_t v84 = (Phase::Logger *)[*v19 attachNode:*location];
  if ((*(void *)(a1 + 128) & 6) != 2)
  {
    char v131 = 1;
    uint64_t v130 = &v131;
    if (atomic_load_explicit((atomic_ullong *volatile)&Phase::Controller::AudioDSPRegisterInternalAudioUnits(void)::onceflag, memory_order_acquire) != -1)
    {
      *(void *)buf = &v130;
      signed int v132 = buf;
      std::__call_once(&Phase::Controller::AudioDSPRegisterInternalAudioUnits(void)::onceflag, &v132, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<Phase::Controller::AudioDSPRegisterInternalAudioUnits(void)::$_0 &&>>);
    }
    if (!v131)
    {
      uint64_t v105 = **(id **)(Phase::Logger::GetInstance(v84) + 384);
      if (os_log_type_enabled(v105, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "StreamRenderer.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 336;
        *(_WORD *)&unsigned char buf[18] = 2048;
        *(void *)&buf[20] = a1;
        _os_log_impl(&dword_221E5E000, v105, OS_LOG_TYPE_ERROR, "%25s:%-5d bufferstream@%p: could not register internal audio units!", buf, 0x1Cu);
      }
LABEL_61:
      id v80 = *v19;
      id *v19 = 0;
      goto LABEL_62;
    }
  }
  id v80 = *(id *)(a1 + 64);
  uint64_t v85 = *(void *)(a1 + 128);
  if ((v85 & 4) == 0)
  {
LABEL_71:
    if ((v85 & 2) == 0)
    {
      int v118 = 0;
      long long v117 = *(_OWORD *)"xfuamndllppa";
      uint64_t v90 = [objc_alloc(MEMORY[0x263EF9468]) initWithAudioComponentDescription:&v117];
      __int16 v91 = *(void **)(a1 + 80);
      *(void *)(a1 + 8std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = v90;

      if (!*(void *)(a1 + 80)) {
        goto LABEL_99;
      }
      objc_msgSend(*v19, "attachNode:");
      [*(id *)(a1 + 48) connect:v80 to:*(void *)(a1 + 80) format:*(void *)(a1 + 96)];
      id v92 = *(id *)(a1 + 80);

      id v80 = v92;
    }
    char v93 = [v116 isEqual:v24];
    id v94 = *v19;
    if (v93)
    {
      uint64_t v95 = [*v19 outputNode];
      [v94 connect:v80 to:v95 format:*(void *)(a1 + 96)];
    }
    else
    {
      uint64_t v96 = [*v19 mainMixerNode];
      [v94 connect:v80 to:v96 format:*(void *)(a1 + 96)];

      id v97 = *v19;
      uint64_t v95 = [*v19 mainMixerNode];
      uint64_t v98 = [*v19 outputNode];
      [v97 connect:v95 to:v98 format:*(void *)(a1 + 104)];
    }
    uint64_t v99 = [*v19 manualRenderingBlock];
    uint64_t v100 = *(void **)(a1 + 56);
    *(void *)(a1 + 56) = v99;

    if (*(void *)(a1 + 56)
      && ([*v19 isInManualRenderingMode] & 1) != 0
      && [*v19 manualRenderingMode] == v49
      && (!*v19 || !*(unsigned char *)(a1 + 136)))
    {
      atomic_store(0, (unint64_t *)(a1 + 336));
      atomic_store(0, (unsigned __int8 *)(a1 + 216));
      atomic_store(0, (unsigned __int8 *)(a1 + 217));
      if (!*((unsigned char *)a8 + 24)) {
        goto LABEL_62;
      }
      long long v101 = *a8;
      *(void *)(a1 + 36std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = *((void *)a8 + 2);
      *(_OWORD *)(a1 + 344) = v101;
      if (!*((unsigned char *)a8 + 24)) {
        std::__throw_bad_optional_access[abi:ne180100]();
      }
      uint64_t v102 = *(void *)a8;
      uint64_t v103 = operator new(8uLL);
      void *v103 = v102;
      *(void *)&_OWORD buf[8] = v103 + 1;
      *(void *)&buf[16] = v103 + 1;
      *(void *)buf = v103;
      if (AudioIssueDetectorLibraryLoader(void)::once != -1) {
        dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_36);
      }
      __int16 v24 = v114;
      if (AudioIssueDetectorLibraryLoader(void)::libSym)
      {
        uint64_t v104 = (Phase::Logger *)AudioIssueDetectorLibraryLoader(void)::libSym(8, buf);
        uint64_t v103 = *(void **)buf;
        *(void *)(a1 + 368) = v104;
        if (!v103)
        {
          if (v104) {
            goto LABEL_62;
          }
          goto LABEL_94;
        }
      }
      else
      {
        *(void *)(a1 + 368) = 0;
      }
      *(void *)&_OWORD buf[8] = v103;
      operator delete(v103);
      uint64_t v104 = *(Phase::Logger **)(a1 + 368);
      if (v104) {
        goto LABEL_62;
      }
LABEL_94:
      __int16 v106 = **(id **)(Phase::Logger::GetInstance(v104) + 384);
      if (os_log_type_enabled(v106, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "StreamRenderer.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 436;
        *(_WORD *)&unsigned char buf[18] = 2048;
        *(void *)&buf[20] = a1;
        _os_log_impl(&dword_221E5E000, v106, OS_LOG_TYPE_ERROR, "%25s:%-5d bufferstream@%p: failed to create AID", buf, 0x1Cu);
      }
      goto LABEL_62;
    }
LABEL_99:
    std::terminate();
  }
  id v86 = objc_alloc_init(MEMORY[0x263EF9440]);
  __int16 v87 = *(void **)(a1 + 88);
  *(void *)(a1 + 88) = v86;

  if (*(void *)(a1 + 88))
  {
    objc_msgSend(*v19, "attachNode:");
    [*(id *)(a1 + 48) connect:v80 to:*(void *)(a1 + 88) format:*(void *)(a1 + 96)];
    id v89 = *(id *)(a1 + 88);

    uint64_t v85 = *(void *)(a1 + 128);
    id v80 = v89;
    goto LABEL_71;
  }
  int v107 = **(id **)(Phase::Logger::GetInstance(v88) + 384);
  if (os_log_type_enabled(v107, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "StreamRenderer.mm";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 352;
    *(_WORD *)&unsigned char buf[18] = 2048;
    *(void *)&buf[20] = a1;
    _os_log_impl(&dword_221E5E000, v107, OS_LOG_TYPE_ERROR, "%25s:%-5d bufferstream@%p: could not instantiate DSPGraph!", buf, 0x1Cu);
  }
  char v108 = *(void **)(a1 + 88);
  *(void *)(a1 + 88) = 0;

  uint64_t v109 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = 0;

LABEL_62:
  return a1;
}

void sub_22207D564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id *a12, id *a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  uint64_t v36 = *(std::__shared_weak_count **)(v32 + 328);
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  uint64_t v37 = *(std::__shared_weak_count **)(v32 + 312);
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }

  applesauce::dispatch::v1::queue::~queue(a12);
  uint64_t v38 = *(std::__shared_weak_count **)(v32 + 176);
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }

  std::array<Phase::Controller::StreamRenderer::IOConfiguration,2ul>::~array(v32);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::StreamRenderer::StreamRenderer(uint64_t a1, void *a2, void *a3, unsigned int a4, uint64_t a5)
{
  LOBYTE(v6) = 0;
  char v7 = 0;
  return Phase::Controller::StreamRenderer::StreamRenderer(a1, a2, a3, 0, a4, a5, 0, &v6);
}

void applesauce::dispatch::v1::queue::~queue(id *this)
{
  id v2 = *this;
  *this = 0;
}

uint64_t ___ZN5Phase10Controller14StreamRendererC2EP13AVAudioFormatS3_jjNSt3__16bitsetILm8EEEU13block_pointerFiPbPK14AudioTimeStampjP15AudioBufferListENS4_8optionalINS1_29AudioIssueDetectorInformationEEE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const AudioBufferList *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  memset(&v20.mHostTime, 0, 56);
  if ((*(unsigned char *)(a3 + 56) & 1) == 0) {
    return 4294956433;
  }
  v20.mSampleTime = *(Float64 *)a3;
  v20.mFlags = 1;
  uint64_t v12 = *(void *)(a1 + 40);
  int v13 = *(_DWORD *)(v12 + 56);
  if ((v13 & 2) != 0)
  {
    if ((v13 & 4) != 0)
    {
      double v14 = *(double *)(v12 + 16);
      v20.mRateScalar = v14;
      AudioTimeStampFlags v15 = 7;
    }
    else
    {
      double v14 = 1.0;
      AudioTimeStampFlags v15 = 3;
    }
    v20.mFlags = v15;
    double v16 = (double)*(uint64_t *)(v12 + 8) * 0.0000000416666667;
    unint64_t v17 = **(void **)(a1 + 56);
    unsigned int v18 = atomic_load(*(unsigned int **)(a1 + 72));
    v20.mHostTime = (uint64_t)((v16 + v14 * ((double)v17 + (double)v18) / *(double *)(a1 + 88)) * 24000000.0);
  }
  uint64_t v8 = (*(uint64_t (**)(void, uint64_t, AudioTimeStamp *, uint64_t, const AudioBufferList *, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), a2, &v20, a4, a5, a6, a7, a8);
  Phase::Controller::StreamRenderer::IOConfiguration::WriteCaptureBufferList(*(void *)(*(void *)(a1 + 96) + 40), &v20, a4, a5);
  return v8;
}

uint64_t Phase::Controller::StreamRenderer::IOConfiguration::WriteCaptureBufferList(uint64_t this, const AudioTimeStamp *a2, uint64_t a3, const AudioBufferList *a4)
{
  if (this)
  {
    uint64_t v6 = this;
    (*(void (**)(uint64_t, uint64_t, const AudioBufferList *, void))(*(void *)this + 24))(this, a3, a4, 0);
    UInt64 mHostTime = a2->mHostTime;
    uint64_t mSampleTime = (uint64_t)a2->mSampleTime;
    int v9 = *(uint64_t (**)(uint64_t, UInt64, uint64_t, uint64_t))(*(void *)v6 + 72);
    return v9(v6, mHostTime, mSampleTime, a3);
  }
  return this;
}

void *__copy_helper_block_ea8_40c42_ZTSNSt3__110shared_ptrI14AudioTimeStampEE56c27_ZTSNSt3__110shared_ptrImEE72c40_ZTSNSt3__110shared_ptrINS_6atomicIjEEEE(void *result, void *a2)
{
  uint64_t v2 = a2[6];
  result[5] = a2[5];
  result[6] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[8];
  result[7] = a2[7];
  result[8] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = a2[10];
  result[9] = a2[9];
  result[10] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_ea8_40c42_ZTSNSt3__110shared_ptrI14AudioTimeStampEE56c27_ZTSNSt3__110shared_ptrImEE72c40_ZTSNSt3__110shared_ptrINS_6atomicIjEEEE(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[10];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[8];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

uint64_t std::array<Phase::Controller::StreamRenderer::IOConfiguration,2ul>::~array(uint64_t a1)
{
  for (uint64_t i = 0; i != -48; i -= 24)
  {
    uint64_t v3 = *(void *)(a1 + i + 40);
    *(void *)(a1 + i + 4std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  return a1;
}

void Phase::Controller::StreamRenderer::~StreamRenderer(Phase::Controller::StreamRenderer *this)
{
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2 && *((unsigned char *)this + 136) && *((unsigned char *)this + 137))
  {
    unsigned int v18 = (char *)this + 220;
    char v19 = 1;
    caulk::pooled_semaphore_mutex::_lock((Phase::Controller::StreamRenderer *)((char *)this + 220));
    atomic_store(0, (unsigned __int8 *)this + 216);
    atomic_store(0, (unsigned __int8 *)this + 217);
    uint64_t v3 = applesauce::dispatch::v1::queue::operator*((id *)this + 26);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 3221225472;
    block[2] = ___ZN5Phase10Controller14StreamRenderer4StopEv_block_invoke;
    block[3] = &__block_descriptor_40_e5_v8__0l;
    block[4] = this;
    dispatch_sync(v3, block);

    uint64_t v4 = applesauce::dispatch::v1::queue::operator*((id *)this + 26);
    dispatch_sync(v4, &__block_literal_global_11);

    *((unsigned char *)this + 137) = 0;
    atomic_store(0, (unint64_t *)this + 42);
    if (*((unsigned char *)this + 288)) {
      *((unsigned char *)this + 288) = 0;
    }
    double v5 = (_OWORD *)*((void *)this + 38);
    _OWORD v5[2] = 0u;
    v5[3] = 0u;
    _OWORD *v5 = 0u;
    v5[1] = 0u;
    if (*((void *)this + 6) && *((unsigned char *)this + 136) && *((unsigned char *)this + 137)) {
      std::terminate();
    }
    Phase::Controller::StreamRenderer::StartStopInternalCaptures(this, 0);
    std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v18);
    uint64_t v2 = (void *)*((void *)this + 6);
  }
  *((void *)this + 6) = 0;

  uint64_t v6 = (void *)*((void *)this + 9);
  *((void *)this + 9) = 0;

  char v7 = (void *)*((void *)this + 8);
  *((void *)this + 8) = 0;

  uint64_t v8 = (void *)*((void *)this + 10);
  *((void *)this + 1std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = 0;

  int v9 = (void *)*((void *)this + 11);
  *((void *)this + std::__function::__value_func<void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::~__value_func[abi:ne180100](this + 11) = 0;

  Phase::Controller::StreamRenderer::StartStopInternalCaptures(this, 0);
  uint64_t v10 = *((void *)this + 46);
  if (v10)
  {
    if (AudioIssueDetectorLibraryLoader(void)::once != -1) {
      dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_36);
    }
    if (off_267F74C70) {
      off_267F74C70(v10);
    }
    *((void *)this + 46) = 0;
  }
  id v11 = (std::__shared_weak_count *)*((void *)this + 41);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)this + 39);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }

  int v13 = (void *)*((void *)this + 26);
  *((void *)this + 26) = 0;

  double v14 = (std::__shared_weak_count *)*((void *)this + 22);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }

  for (uint64_t i = 0; i != -48; i -= 24)
  {
    uint64_t v16 = *(void *)((char *)this + i + 40);
    *(void *)((char *)this + i + 4std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = 0;
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    }
  }
}

void sub_22207DE80(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)va);
  __clang_call_terminate(a1);
}

void Phase::Controller::StreamRenderer::StartStopInternalCaptures(Phase::Controller::StreamRenderer *this, char a2)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(Phase::Logger::GetInstance(this) + 1536)) {
    BOOL v4 = 0;
  }
  else {
    BOOL v4 = (*((unsigned char *)this + 128) & 0x80) == 0;
  }
  uint64_t v5 = 0;
  char v6 = v4 | a2 ^ 1;
  char v7 = 1;
  do
  {
    char v8 = v7;
    int v9 = (void *)((char *)this + 24 * v5);
    *(_DWORD *)int v9 = v5;
    uint64_t v10 = (id *)(v9 + 1);
    BOOL v11 = (v7 & 1) == 0;
    uint64_t v12 = 96;
    if (!v11) {
      uint64_t v12 = 104;
    }
    objc_storeStrong(v10, *(id *)((char *)this + v12));
    if (v6)
    {
      Phase::Controller::StreamRenderer::IOConfiguration::StopCaptures((void *)this + 3 * v5);
    }
    else
    {
      double v14 = (char *)this + 24 * v5;
      uint64_t v16 = *((void *)v14 + 2);
      AudioTimeStampFlags v15 = v14 + 16;
      if (!v16)
      {
        unint64_t v17 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v13)
                                                                                            + 384)));
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
        {
          id v18 = [*v10 description];
          uint64_t v19 = [v18 cStringUsingEncoding:4];
          *(_DWORD *)buf = 136316162;
          uint64_t v36 = "StreamRenderer.mm";
          __int16 v37 = 1024;
          int v38 = 1792;
          __int16 v39 = 2048;
          uint64_t v40 = this;
          __int16 v41 = 1024;
          int v42 = v5;
          __int16 v43 = 2080;
          uint64_t v44 = v19;
          _os_log_impl(&dword_221E5E000, v17, OS_LOG_TYPE_DEBUG, "%25s:%-5d bufferstream@%p: element[%d] format = %s", buf, 0x2Cu);
        }
        if (v8) {
          AudioTimeStamp v20 = "out";
        }
        else {
          AudioTimeStamp v20 = "in";
        }
        uint64_t v21 = (caulk::platform *)getpid();
        caulk::platform::process_name(v21);
        int v22 = v45;
        if (SBYTE3(v49) < 0) {
          int v22 = *(const char **)v45;
        }
        snprintf((char *)buf, 0x100uLL, "%s-%d-bufferstream@%p-%s", v22, v21, this, v20);
        if (SBYTE3(v49) < 0) {
          operator delete(*(void **)v45);
        }
        uint64_t v23 = [*v10 streamDescription];
        if (*(_DWORD *)(v23 + 28) && *(double *)v23 > 0.0)
        {
          Phase::Logger::CreateAudioCapturer((Phase::Logger *)buf, (const char *)v23, v45);
          uint64_t v24 = *(void *)v45;
          *(void *)uint64_t v45 = 0;
          uint64_t v25 = *(void *)v15;
          *(void *)AudioTimeStampFlags v15 = v24;
          if (v25)
          {
            (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
            uint64_t v26 = *(void *)v45;
            *(void *)uint64_t v45 = 0;
            if (v26) {
              (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
            }
            uint64_t v24 = *(void *)v15;
          }
          if (v24)
          {
            double v27 = (Phase::Logger *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v24 + 64))(v24, 10000);
            unsigned int v28 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v27)
                                                                                                + 384)));
            if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
            {
              int v29 = *(_DWORD *)v9;
              uint64_t v30 = (*(uint64_t (**)(void))(**(void **)v15 + 56))();
              *(_DWORD *)uint64_t v45 = 136316162;
              *(void *)&void v45[4] = "StreamRenderer.mm";
              __int16 v46 = 1024;
              int v47 = 1822;
              __int16 v48 = 2048;
              uint64_t v49 = v9;
              __int16 v50 = 1024;
              int v51 = v29;
              __int16 v52 = 2080;
              uint64_t v53 = v30;
              _os_log_impl(&dword_221E5E000, v28, OS_LOG_TYPE_DEFAULT, "%25s:%-5d bufferstream@%p [%d]: writing capture to %s", v45, 0x2Cu);
            }
          }
          else
          {
            dispatch_queue_t v33 = **(id **)(Phase::Logger::GetInstance(0) + 384);
            if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
            {
              int v34 = *(_DWORD *)v9;
              *(_DWORD *)uint64_t v45 = 136315906;
              *(void *)&void v45[4] = "StreamRenderer.mm";
              __int16 v46 = 1024;
              int v47 = 1827;
              __int16 v48 = 2048;
              uint64_t v49 = v9;
              __int16 v50 = 1024;
              int v51 = v34;
              _os_log_impl(&dword_221E5E000, v33, OS_LOG_TYPE_DEFAULT, "%25s:%-5d bufferstream@%p [%d]: Error: could not create capture file!", v45, 0x22u);
            }
          }
        }
        else
        {
          int v31 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)v23) + 384);
          if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
          {
            int v32 = *(_DWORD *)v9;
            *(_DWORD *)uint64_t v45 = 136315906;
            *(void *)&void v45[4] = "StreamRenderer.mm";
            __int16 v46 = 1024;
            int v47 = 1813;
            __int16 v48 = 2048;
            uint64_t v49 = v9;
            __int16 v50 = 1024;
            int v51 = v32;
            _os_log_impl(&dword_221E5E000, v31, OS_LOG_TYPE_DEFAULT, "%25s:%-5d bufferstream@%p [%d]: ERROR: invalid capture format!", v45, 0x22u);
          }
          Phase::Controller::StreamRenderer::IOConfiguration::StopCaptures(v9);
        }
      }
    }
    char v7 = 0;
    uint64_t v5 = 1;
  }
  while ((v8 & 1) != 0);
}

void sub_22207E378(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::StreamRenderer::SupportsInputLayout(void *a1, char a2)
{
  id v3 = a1;
  BOOL v4 = v3;
  if ((a2 & 2) != 0)
  {
    char v8 = (Phase::ChannelLayout *)[v3 layout];
    uint64_t v6 = (uint64_t)Phase::ChannelLayout::IsLayoutSupported(v8, v9);
    goto LABEL_33;
  }
  int v5 = [v3 layoutTag];
  uint64_t v6 = 1;
  if (v5 <= 8388615)
  {
    if (v5 > 7995397)
    {
      if (v5 <= 8126469)
      {
        if (v5 == 7995398) {
          goto LABEL_33;
        }
        int v7 = 8060934;
      }
      else
      {
        if (v5 == 8126470 || v5 == 8257544) {
          goto LABEL_33;
        }
        int v7 = 8323080;
      }
    }
    else if (v5 <= 7405570)
    {
      if (v5 == 6553601) {
        goto LABEL_33;
      }
      int v7 = 6619138;
    }
    else
    {
      if (v5 == 7405571 || v5 == 7667717) {
        goto LABEL_33;
      }
      int v7 = 7929862;
    }
  }
  else if (v5 <= 12189700)
  {
    if (v5 <= 8650755)
    {
      if (v5 == 8388616) {
        goto LABEL_33;
      }
      int v7 = 8454152;
    }
    else
    {
      if (v5 == 8650756 || v5 == 8716291) {
        goto LABEL_33;
      }
      int v7 = 12124164;
    }
  }
  else if (v5 > 12386311)
  {
    if (v5 == 12386312 || v5 == 12582924) {
      goto LABEL_33;
    }
    int v7 = 12713992;
  }
  else
  {
    if (v5 == 12189701 || v5 == 12255238) {
      goto LABEL_33;
    }
    int v7 = 12320775;
  }
  if (v5 != v7) {
    uint64_t v6 = 0;
  }
LABEL_33:

  return v6;
}

void sub_22207E5A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL Phase::Controller::StreamRenderer::Prepare(Phase::Controller::StreamRenderer *this)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  if (!*((void *)this + 6)) {
    return 0;
  }
  if (*((unsigned char *)this + 136)) {
    return 1;
  }
  *((unsigned char *)this + 136) = 0;
  id v3 = applesauce::dispatch::v1::queue::operator*((id *)this + 26);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = ___ZN5Phase10Controller14StreamRenderer7PrepareEv_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = this;
  dispatch_sync(v3, block);

  *((unsigned char *)this + 136) = 1;
  Phase::Controller::StreamRenderer::InitializeLatencyBuffer(this, 1);
  uint64_t v4 = *((void *)this + 46);
  if (v4)
  {
    if (AudioIssueDetectorLibraryLoader(void)::once != -1) {
      dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_36);
    }
    if (off_267F74C88) {
      off_267F74C88(v4);
    }
    snprintf(__str, 0x96uLL, "phasestream-out@%p", this);
    std::string::basic_string[abi:ne180100]<0>(__p, __str);
    uint64_t v5 = *((void *)this + 46);
    uint64_t v6 = (Phase::Logger *)[*((id *)this + 13) streamDescription];
    int v7 = v6;
    if (AudioIssueDetectorLibraryLoader(void)::once != -1) {
      dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_36);
    }
    if (off_267F74C80)
    {
      uint64_t v6 = (Phase::Logger *)off_267F74C80(v5, __p, 1, 1, v7, 4096);
      int v8 = (int)v6;
      if (!v6)
      {
        uint64_t v9 = *((void *)this + 46);
        if (AudioIssueDetectorLibraryLoader(void)::once != -1) {
          dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_36);
        }
        if (off_267F74C68)
        {
          uint64_t v6 = (Phase::Logger *)off_267F74C68(v9);
          int v10 = (int)v6;
          if (!v6)
          {
            BOOL v11 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v6)
                                                                                                + 384)));
            if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
            {
              if (v25 >= 0) {
                uint64_t v12 = __p;
              }
              else {
                uint64_t v12 = (void **)__p[0];
              }
              id v13 = [*((id *)this + 13) description];
              uint64_t v14 = [v13 UTF8String];
              *(_DWORD *)buf = 136316162;
              unsigned int v28 = "StreamRenderer.mm";
              __int16 v29 = 1024;
              int v30 = 642;
              __int16 v31 = 2048;
              int v32 = this;
              __int16 v33 = 2080;
              int v34 = v12;
              __int16 v35 = 2080;
              uint64_t v36 = v14;
              _os_log_impl(&dword_221E5E000, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d bufferstream@%p: created AID node %s, format %s", buf, 0x30u);
            }
            *((unsigned char *)this + 376) = 1;
            goto LABEL_33;
          }
        }
        else
        {
          int v10 = -1;
        }
        AudioTimeStamp v20 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v6)
                                                                                            + 384)));
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          if (v25 >= 0) {
            uint64_t v21 = __p;
          }
          else {
            uint64_t v21 = (void **)__p[0];
          }
          id v22 = [*((id *)this + 13) description];
          uint64_t v23 = [v22 UTF8String];
          *(_DWORD *)buf = 136316418;
          unsigned int v28 = "StreamRenderer.mm";
          __int16 v29 = 1024;
          int v30 = 636;
          __int16 v31 = 2048;
          int v32 = this;
          __int16 v33 = 2080;
          int v34 = v21;
          __int16 v35 = 2080;
          uint64_t v36 = v23;
          __int16 v37 = 1024;
          int v38 = v10;
          _os_log_impl(&dword_221E5E000, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d bufferstream@%p: failed to initialize AID node named %s with format %s, err = %d", buf, 0x36u);
        }
        uint64_t v19 = *((void *)this + 46);
        if (AudioIssueDetectorLibraryLoader(void)::once != -1) {
          dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_36);
        }
        if (!off_267F74C88) {
          goto LABEL_33;
        }
LABEL_32:
        off_267F74C88(v19);
LABEL_33:
        if (v25 < 0) {
          operator delete(__p[0]);
        }
        goto LABEL_35;
      }
    }
    else
    {
      int v8 = -1;
    }
    AudioTimeStampFlags v15 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v6)
                                                                                        + 384)));
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      if (v25 >= 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      id v17 = [*((id *)this + 13) description];
      uint64_t v18 = [v17 UTF8String];
      *(_DWORD *)buf = 136316418;
      unsigned int v28 = "StreamRenderer.mm";
      __int16 v29 = 1024;
      int v30 = 625;
      __int16 v31 = 2048;
      int v32 = this;
      __int16 v33 = 2080;
      int v34 = v16;
      __int16 v35 = 2080;
      uint64_t v36 = v18;
      __int16 v37 = 1024;
      int v38 = v8;
      _os_log_impl(&dword_221E5E000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d bufferstream@%p: failed to set format for AID node named %s with format %s, err = %d", buf, 0x36u);
    }
    uint64_t v19 = *((void *)this + 46);
    if (AudioIssueDetectorLibraryLoader(void)::once != -1) {
      dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_36);
    }
    if (!off_267F74C88) {
      goto LABEL_33;
    }
    goto LABEL_32;
  }
LABEL_35:
  if (*((void *)this + 6)) {
    return *((unsigned char *)this + 136) != 0;
  }
  return 0;
}

void sub_22207EAE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t ___ZN5Phase10Controller14StreamRenderer7PrepareEv_block_invoke(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 48) prepare];
}

void Phase::Controller::StreamRenderer::InitializeLatencyBuffer(Phase::Controller::StreamRenderer *this, char a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (*((void *)this + 6) && *((unsigned char *)this + 136))
  {
    *(void *)buf = 0;
    *(void *)&_OWORD buf[8] = buf;
    *(void *)&buf[16] = 0x4012000000;
    uint64_t v16 = __Block_byref_object_copy__15;
    id v17 = __Block_byref_object_dispose__16;
    uint64_t v18 = 0;
    char v19 = 0;
    char v20 = 0;
    uint64_t v4 = applesauce::dispatch::v1::queue::operator*((id *)this + 26);
    v14[0] = MEMORY[0x263EF8330];
    v14[1] = 3221225472;
    void v14[2] = ___ZNK5Phase10Controller14StreamRenderer19GetLatencyInSecondsEv_block_invoke;
    _OWORD v14[3] = &unk_2645F7BC0;
    _OWORD v14[4] = buf;
    v14[5] = this;
    dispatch_sync(v4, v14);

    uint64_t v5 = *(unsigned __int8 *)(*(void *)&buf[8] + 56);
    double v6 = *(double *)(*(void *)&buf[8] + 48);
    _Block_object_dispose(buf, 8);
    if (v5)
    {
      [*((id *)this + 13) sampleRate];
      LODWORD(vstd::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear(this + 5) = vcvtpd_u64_f64(v6 * v8);
      if ((a2 & 1) != 0 || (unsigned int v9 = atomic_load((unsigned int *)this + 40), v9 != v5))
      {
        if ([*((id *)this + 18) frameCapacity] < v5)
        {
          uint64_t v10 = [objc_alloc(MEMORY[0x263EF93B0]) initWithPCMFormat:*((void *)this + 13) frameCapacity:v5];
          BOOL v11 = (void *)*((void *)this + 18);
          *((void *)this + 18) = v10;

          objc_msgSend(*((id *)this + 18), "setFrameLength:", objc_msgSend(*((id *)this + 18), "frameCapacity"));
          uint64_t v12 = [*((id *)this + 18) mutableAudioBufferList];
          *((void *)this + std::__function::__value_func<void ()(Phase::SpatialModeler::PriorityQueueEntry &)>::~__value_func[abi:ne180100](this + 19) = v12;
          if (!v12 || !*(_DWORD *)v12 || !*(void *)(v12 + 16) || !*(_DWORD *)(v12 + 12)) {
            std::terminate();
          }
        }
        atomic_store(v5, (unsigned int *)this + 40);
        atomic_store(0, *((unsigned int **)this + 21));
      }
    }
    else
    {
      id v13 = **(id **)(Phase::Logger::GetInstance(v7) + 384);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "StreamRenderer.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1064;
        _os_log_impl(&dword_221E5E000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d Couldn't get latency in seconds for Stream Renderer.", buf, 0x12u);
      }
    }
  }
}

void sub_22207EDC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

uint64_t Phase::Controller::StreamRenderer::Start(Phase::Controller::StreamRenderer *this)
{
  if (!*((void *)this + 6)) {
    return 0;
  }
  if (*((unsigned char *)this + 136) && *((unsigned char *)this + 137)) {
    return 1;
  }
  if (!Phase::Controller::StreamRenderer::Prepare(this)) {
    return 0;
  }
  Phase::Controller::StreamRenderer::StartStopInternalCaptures(this, 1);
  *((unsigned char *)this + 137) = 0;
  atomic_store(0, (unint64_t *)this + 42);
  uint64_t v9 = 0;
  uint64_t v10 = &v9;
  uint64_t v11 = 0x2020000000;
  char v12 = 0;
  id v3 = applesauce::dispatch::v1::queue::operator*((id *)this + 26);
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 3221225472;
  _OWORD v8[2] = ___ZN5Phase10Controller14StreamRenderer5StartEv_block_invoke;
  v8[3] = &unk_2645F7BC0;
  v8[4] = &v9;
  v8[5] = this;
  dispatch_sync(v3, v8);

  uint64_t v4 = v10;
  int v5 = *((unsigned __int8 *)v10 + 24);
  *((unsigned char *)this + 137) = v5;
  if (*((unsigned char *)v4 + 24) && *((void *)this + 6))
  {
    if (v5) {
      BOOL v6 = *((unsigned char *)this + 136) == 0;
    }
    else {
      BOOL v6 = 1;
    }
    uint64_t v2 = !v6;
  }
  else
  {
    uint64_t v2 = 0;
  }
  _Block_object_dispose(&v9, 8);
  return v2;
}

void sub_22207EF1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZN5Phase10Controller14StreamRenderer5StartEv_block_invoke(uint64_t a1)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(id **)(a1 + 40);
  id v3 = v2[6];
  id v15 = 0;
  char v4 = [v3 startAndReturnError:&v15];
  int v5 = (Phase::Logger *)v15;
  BOOL v6 = v5;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v4;
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    BOOL v7 = v5 == 0;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7)
  {
    id v14 = v2[9];
    if (v14 && ([v14 play], (objc_msgSend(v2[9], "isPlaying") & 1) == 0)
      || ([v2[6] isRunning] & 1) == 0
      || ([v2[6] isInManualRenderingMode] & 1) == 0)
    {
      std::terminate();
    }
  }
  else
  {
    double v8 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v5)
                                                                                       + 384)));
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      id v9 = [v2[13] description];
      uint64_t v10 = [v9 UTF8String];
      id v11 = [(Phase::Logger *)v6 description];
      uint64_t v12 = [v11 UTF8String];
      *(_DWORD *)buf = 136316162;
      id v17 = "StreamRenderer.mm";
      __int16 v18 = 1024;
      int v19 = 688;
      __int16 v20 = 2048;
      uint64_t v21 = v2;
      __int16 v22 = 2080;
      uint64_t v23 = v10;
      __int16 v24 = 2080;
      uint64_t v25 = v12;
      _os_log_impl(&dword_221E5E000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d bufferstream@%p: could not start stream renderer with format %s, err = %s", buf, 0x30u);
    }
    id v13 = v2[6];
    v2[6] = 0;

    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  }
}

void sub_22207F110(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::StreamRenderer::Pause(uint64_t this)
{
  if (*(void *)(this + 48))
  {
    uint64_t v1 = this;
    if (*(unsigned char *)(this + 136))
    {
      if (*(unsigned char *)(this + 137))
      {
        uint64_t v5 = this + 220;
        char v6 = 1;
        caulk::pooled_semaphore_mutex::_lock((caulk::pooled_semaphore_mutex *)(this + 220));
        uint64_t v2 = applesauce::dispatch::v1::queue::operator*((id *)(v1 + 208));
        block[0] = MEMORY[0x263EF8330];
        block[1] = 3221225472;
        block[2] = ___ZN5Phase10Controller14StreamRenderer5PauseEv_block_invoke;
        block[3] = &__block_descriptor_40_e5_v8__0l;
        block[4] = v1;
        dispatch_sync(v2, block);

        id v3 = applesauce::dispatch::v1::queue::operator*((id *)(v1 + 208));
        dispatch_sync(v3, &__block_literal_global_5);

        *(unsigned char *)(v1 + 137) = 0;
        return std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v5);
      }
    }
  }
  return this;
}

void sub_22207F23C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ___ZN5Phase10Controller14StreamRenderer5PauseEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  [*(id *)(v1 + 72) pause];
  uint64_t v2 = *(void **)(v1 + 48);

  return [v2 pause];
}

uint64_t ___ZN5Phase10Controller14StreamRenderer4StopEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  [*(id *)(v1 + 72) stop];
  [*(id *)(v1 + 48) stop];
  [*(id *)(v1 + 80) reset];
  uint64_t v2 = *(void **)(v1 + 88);

  return [v2 reset];
}

uint64_t Phase::Controller::StreamRenderer::Reset(uint64_t this)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (*(void *)(this + 48))
  {
    uint64_t v1 = this;
    uint64_t v14 = this + 220;
    char v15 = 1;
    caulk::pooled_semaphore_mutex::_lock((caulk::pooled_semaphore_mutex *)(this + 220));
    atomic_store(0, (unsigned __int8 *)(v1 + 216));
    atomic_store(0, (unsigned __int8 *)(v1 + 217));
    uint64_t v10 = 0;
    id v11 = &v10;
    uint64_t v12 = 0x2020000000;
    char v13 = 0;
    uint64_t v2 = applesauce::dispatch::v1::queue::operator*((id *)(v1 + 208));
    v9[0] = MEMORY[0x263EF8330];
    v9[1] = 3221225472;
    v9[2] = ___ZN5Phase10Controller14StreamRenderer5ResetEv_block_invoke;
    v9[3] = &unk_2645F7BC0;
    v9[4] = &v10;
    v9[5] = v1;
    dispatch_sync(v2, v9);

    if (*((unsigned char *)v11 + 24))
    {
      id v3 = applesauce::dispatch::v1::queue::operator*((id *)(v1 + 208));
      dispatch_sync(v3, &__block_literal_global_13);
    }
    atomic_store(0, (unint64_t *)(v1 + 336));
    if (*(unsigned char *)(v1 + 288)) {
      *(unsigned char *)(v1 + 288) = 0;
    }
    char v4 = *(_OWORD **)(v1 + 304);
    _OWORD v4[2] = 0u;
    v4[3] = 0u;
    _OWORD *v4 = 0u;
    v4[1] = 0u;
    Phase::Controller::StreamRenderer::InitializeLatencyBuffer((Phase::Controller::StreamRenderer *)v1, 1);
    *(_DWORD *)(v1 + 204) = *(_DWORD *)(v1 + 200);
    uint64_t v6 = *(void *)(v1 + 368);
    if (!v6) {
      goto LABEL_16;
    }
    if (AudioIssueDetectorLibraryLoader(void)::once != -1) {
      dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_36);
    }
    if (off_267F74C88)
    {
      uint64_t v5 = (Phase::Logger *)off_267F74C88(v6);
      int v7 = (int)v5;
      if (!v5)
      {
LABEL_15:
        *(unsigned char *)(v1 + 376) = 0;
LABEL_16:
        _Block_object_dispose(&v10, 8);
        return std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v14);
      }
    }
    else
    {
      int v7 = -1;
    }
    double v8 = **(id **)(Phase::Logger::GetInstance(v5) + 384);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      id v17 = "StreamRenderer.mm";
      __int16 v18 = 1024;
      int v19 = 827;
      __int16 v20 = 2048;
      uint64_t v21 = v1;
      __int16 v22 = 1024;
      int v23 = v7;
      _os_log_impl(&dword_221E5E000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d bufferstream@%p: failed to reset AID, err = %d", buf, 0x22u);
    }
    goto LABEL_15;
  }
  return this;
}

void sub_22207F53C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN5Phase10Controller14StreamRenderer5ResetEv_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = [*(id *)(v2 + 72) isPlaying];
  [*(id *)(v2 + 72) stop];
  uint64_t result = [*(id *)(v2 + 48) reset];
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    char v4 = *(void **)(v2 + 72);
    return [v4 play];
  }
  return result;
}

uint64_t __Block_byref_object_copy__15(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(unsigned char *)(result + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(result + 48) = v2;
  return result;
}

void ___ZNK5Phase10Controller14StreamRenderer19GetLatencyInSecondsEv_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  [*(id *)(v2 + 64) latency];
  double v4 = v3 + 0.0;
  uint64_t v5 = *(void *)(v2 + 128);
  if ((v5 & 2) == 0)
  {
    [*(id *)(v2 + 80) latency];
    double v4 = v4 + v6;
    uint64_t v5 = *(void *)(v2 + 128);
  }
  if ((v5 & 4) != 0)
  {
    [*(id *)(v2 + 88) latency];
    double v4 = v4 + v7;
  }
  uint64_t v8 = [*(id *)(v2 + 48) outputNode];
  [v8 latency];
  double v10 = v4 + v9;

  uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 8);
  *(double *)(v11 + 48) = v10;
  *(unsigned char *)(v11 + 56) = 1;
}

void sub_22207F694(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::StreamRenderer::SetPreset(uint64_t a1, int a2, void *a3, double a4)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  double v7 = a3;
  uint64_t v8 = v7;
  if (a2)
  {
    double v9 = **(id **)(Phase::Logger::GetInstance(v7) + 384);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "StreamRenderer.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1171;
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = a2;
      _os_log_impl(&dword_221E5E000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d unhandled inProcessor %d", buf, 0x18u);
    }
LABEL_13:
    uint64_t v18 = 0;
    goto LABEL_14;
  }
  if ((*(unsigned char *)(a1 + 128) & 2) != 0)
  {
    int v19 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v7)
                                                                                        + 384)));
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      id v20 = [(Phase::Logger *)v8 description];
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "StreamRenderer.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1162;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = [v20 UTF8String];
      _os_log_impl(&dword_221E5E000, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d Attempted to set a Loudness Normalizer preset file '%s' on a Stream Renderer that was instantiated without that plugin!", buf, 0x1Cu);
    }
    goto LABEL_13;
  }
  *(void *)buf = 0;
  *(void *)&_OWORD buf[8] = buf;
  *(void *)&buf[16] = 0x3032000000;
  *(void *)&unsigned char buf[24] = __Block_byref_object_copy__17;
  __int16 v41 = __Block_byref_object_dispose__18;
  id v42 = 0;
  uint64_t v28 = 0;
  __int16 v29 = &v28;
  uint64_t v30 = 0x2020000000;
  char v31 = 0;
  double v10 = applesauce::dispatch::v1::queue::operator*((id *)(a1 + 208));
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = ___ZN5Phase10Controller14StreamRenderer9SetPresetENS1_9ProcessorEP5NSURLd_block_invoke;
  block[3] = &unk_2645F7C68;
  uint64_t v26 = a1;
  uint64_t v11 = v8;
  int v23 = v11;
  uint64_t v24 = buf;
  double v27 = a4;
  uint64_t v25 = &v28;
  dispatch_sync(v10, block);

  if (*((unsigned char *)v29 + 24) && !*(void *)(*(void *)&buf[8] + 40))
  {
    Phase::Controller::StreamRenderer::InitializeLatencyBuffer((Phase::Controller::StreamRenderer *)a1, 0);
    uint64_t v18 = 1;
  }
  else
  {
    char v13 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v12)
                                                                                        + 384)));
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      id v14 = [(Phase::Logger *)v11 description];
      uint64_t v15 = [v14 UTF8String];
      id v16 = [*(id *)(*(void *)&buf[8] + 40) description];
      uint64_t v17 = [v16 UTF8String];
      *(_DWORD *)int v32 = 136315906;
      __int16 v33 = "StreamRenderer.mm";
      __int16 v34 = 1024;
      int v35 = 1150;
      __int16 v36 = 2080;
      uint64_t v37 = v15;
      __int16 v38 = 2080;
      uint64_t v39 = v17;
      _os_log_impl(&dword_221E5E000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d [AVAudioFile loadAudioUnitPresetAtURL] failed to load a Loudness Normalizer preset file '%s' with error '%s'!", v32, 0x26u);
    }
    uint64_t v18 = 0;
  }

  _Block_object_dispose(&v28, 8);
  _Block_object_dispose(buf, 8);

LABEL_14:
  return v18;
}

void sub_22207FA54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);

  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v12 - 144), 8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__17(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__18(uint64_t a1)
{
}

void ___ZN5Phase10Controller14StreamRenderer9SetPresetENS1_9ProcessorEP5NSURLd_block_invoke(uint64_t a1)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 56);
  double v3 = *(void **)(v2 + 80);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
  obuint64_t j = *(id *)(v5 + 40);
  int v6 = [v3 loadAudioUnitPresetAtURL:v4 error:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);
  if (v6)
  {
    double v8 = *(double *)(a1 + 64);
    float v9 = v8;
    if (v8 < -60.0 || v8 > -3.0)
    {
      uint64_t v11 = **(id **)(Phase::Logger::GetInstance(v7) + 384);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = *(void *)(a1 + 64);
        *(_DWORD *)buf = 136316162;
        int v19 = "StreamRenderer.mm";
        __int16 v20 = 1024;
        int v21 = 1125;
        __int16 v22 = 2048;
        uint64_t v23 = v12;
        __int16 v24 = 2048;
        unint64_t v25 = 0xC04E000000000000;
        __int16 v26 = 2048;
        unint64_t v27 = 0xC008000000000000;
        _os_log_impl(&dword_221E5E000, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d inTargetLKFS: %f is out of range for AULN [%f, %f]. Clamping.", buf, 0x30u);
      }
      float v9 = fminf(fmaxf(v9, -60.0), -3.0);
    }
    char v13 = (Phase::Logger *)AudioUnitSetParameter((AudioUnit)[*(id *)(v2 + 80) audioUnit], 2u, 0, 0, v9, 0);
    if (v13)
    {
      int v14 = (int)v13;
      uint64_t v15 = **(id **)(Phase::Logger::GetInstance(v13) + 384);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        uint64_t v16 = *(void *)(a1 + 64);
        *(_DWORD *)buf = 136315906;
        int v19 = "StreamRenderer.mm";
        __int16 v20 = 1024;
        int v21 = 1140;
        __int16 v22 = 2048;
        uint64_t v23 = v16;
        __int16 v24 = 1024;
        LODWORD(v2std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear(this + 5) = v14;
        _os_log_impl(&dword_221E5E000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d [AVAudioFile loadAudioUnitPresetAtURL] failed to set Loudness Normalizer targetLKFS of value '%f' with error '%d'!", buf, 0x22u);
      }
    }
    else
    {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
    }
  }
}

uint64_t Phase::Controller::StreamRenderer::ConfigureDSPGraph(Phase::Controller::StreamRenderer *this, NSURL *a2, NSURL *a3)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v5 = a2;
  int v6 = a3;
  double v7 = (void *)*((void *)this + 11);
  id v20 = 0;
  char v8 = [v7 loadDSPGraphAtURL:v5 error:&v20];
  float v9 = (Phase::Logger *)v20;
  double v10 = v9;
  if (v8)
  {
    if (v6)
    {
      uint64_t v11 = (void *)*((void *)this + 11);
      int v19 = v10;
      char v12 = [v11 loadAudioUnitProcessingStripAtURL:v6 error:&v19];
      char v13 = v19;

      if (v12)
      {
        uint64_t v15 = 1;
      }
      else
      {
        uint64_t v17 = **(id **)(Phase::Logger::GetInstance(v14) + 384);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315906;
          __int16 v22 = "StreamRenderer.mm";
          __int16 v23 = 1024;
          int v24 = 1194;
          __int16 v25 = 2112;
          __int16 v26 = v6;
          __int16 v27 = 2112;
          uint64_t v28 = v13;
          _os_log_impl(&dword_221E5E000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d failed to load austrip file %@: %@", buf, 0x26u);
        }
        uint64_t v15 = 0;
      }
      double v10 = v13;
    }
    else
    {
      uint64_t v15 = 1;
    }
  }
  else
  {
    uint64_t v16 = **(id **)(Phase::Logger::GetInstance(v9) + 384);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      __int16 v22 = "StreamRenderer.mm";
      __int16 v23 = 1024;
      int v24 = 1186;
      __int16 v25 = 2112;
      __int16 v26 = v5;
      __int16 v27 = 2112;
      uint64_t v28 = v10;
      _os_log_impl(&dword_221E5E000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d failed to load dspg file %@: %@", buf, 0x26u);
    }
    uint64_t v15 = 0;
  }

  return v15;
}

void sub_22207FF28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

AVAudioTime *Phase::Controller::StreamRenderer::GetScheduleTime(Phase::Controller::StreamRenderer *this, AVAudioTime *a2)
{
  double v3 = a2;
  uint64_t v4 = v3;
  if (!v3) {
    goto LABEL_17;
  }
  if (![(AVAudioTime *)v3 isHostTimeValid])
  {
    if ([(AVAudioTime *)v4 isSampleTimeValid])
    {
      char v13 = v4;
      goto LABEL_14;
    }
LABEL_17:
    char v13 = 0;
    goto LABEL_18;
  }
  if (!*((unsigned char *)this + 288) || (*((unsigned char *)this + 280) & 3) == 0) {
    goto LABEL_16;
  }
  [*((id *)this + 13) sampleRate];
  double v6 = v5;
  if (!*((void *)this + 37))
  {
    if (!*((unsigned char *)this + 288)) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    uint64_t v7 = [MEMORY[0x263EF9430] timeWithAudioTimeStamp:(char *)this + 224 sampleRate:v5];
    char v8 = (void *)*((void *)this + 37);
    *((void *)this + 37) = v7;

    if (![*((id *)this + 37) isHostTimeValid]
      || ([*((id *)this + 37) isSampleTimeValid] & 1) == 0)
    {
      goto LABEL_16;
    }
  }
  int v16 = 2;
  v15[1] = [(AVAudioTime *)v4 hostTime];
  float v9 = [MEMORY[0x263EF9430] timeWithAudioTimeStamp:v15 sampleRate:v6];
  double v10 = [v9 extrapolateTimeFromAnchor:*((void *)this + 37)];
  if (([v10 isSampleTimeValid] & 1) == 0) {
LABEL_16:
  }
    std::terminate();
  uint64_t v11 = [v10 sampleTime];
  uint64_t v12 = [*((id *)this + 37) sampleTime];
  char v13 = [MEMORY[0x263EF9430] timeWithSampleTime:v11 - v12 atRate:v6];

  if (!v13) {
    goto LABEL_18;
  }
LABEL_14:
  if ([(AVAudioTime *)v13 isHostTimeValid]
    || ![(AVAudioTime *)v13 isSampleTimeValid])
  {
    goto LABEL_16;
  }
LABEL_18:

  return v13;
}

void sub_2220800F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL Phase::Controller::StreamRenderer::ScheduleBuffer(Phase::Controller::StreamRenderer *this, AVAudioPCMBuffer *a2, AVAudioTime *a3, unint64_t a4)
{
  return Phase::Controller::StreamRenderer::ScheduleBuffer((uint64_t)this, a2, a3, a4, 0, 0);
}

BOOL Phase::Controller::StreamRenderer::ScheduleBuffer(uint64_t a1, void *a2, void *a3, unint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  id v11 = a2;
  uint64_t v12 = a3;
  char v13 = a6;
  int v14 = v13;
  if (!v11)
  {
    __int16 v23 = **(id **)(Phase::Logger::GetInstance(v13) + 384);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.mSampleTime) = 136315650;
      *(void *)((char *)&buf.mSampleTime + 4) = "StreamRenderer.mm";
      WORD2(buf.mHostTime) = 1024;
      *(_DWORD *)((char *)&buf.mHostTime + 6) = 1265;
      WORD1(buf.mRateScalar) = 2048;
      *(void *)((char *)&buf.mRateScalar + 4) = a1;
      _os_log_impl(&dword_221E5E000, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [pInBuffer == nil is true]: \"bufferstream@%p: nil buffer!\"", (uint8_t *)&buf, 0x1Cu);
    }
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "bufferstream@%p: nil buffer!");
  }
  uint64_t v15 = *(void *)(a1 + 48);
  if (v15)
  {
    if (a5) {
      std::terminate();
    }
    int v16 = Phase::Controller::StreamRenderer::GetScheduleTime((Phase::Controller::StreamRenderer *)a1, v12);
    uint64_t v17 = applesauce::dispatch::v1::queue::operator*((id *)(a1 + 208));
    uint64_t v18 = (a4 >> 1) & 7;
    uint64_t v25 = MEMORY[0x263EF8330];
    uint64_t v26 = 3221225472;
    __int16 v27 = ___ZN5Phase10Controller14StreamRenderer14ScheduleBufferEP16AVAudioPCMBufferP11AVAudioTimem42PHASEPushStreamCompletionCallbackConditionU13block_pointerFvS6_E_block_invoke;
    uint64_t v28 = &unk_2645F7CB8;
    uint64_t v32 = a1;
    char v31 = v14;
    id v19 = v11;
    id v29 = v19;
    id v20 = v16;
    id v30 = v20;
    uint64_t v33 = v18;
    uint64_t v34 = 0;
    dispatch_sync(v17, &v25);

    Phase::Controller::StreamRenderer::StartStopInternalCaptures((Phase::Controller::StreamRenderer *)a1, 1);
    Phase::Controller::StreamRenderer::IOConfiguration::WriteCaptureBufferList(*(void *)(a1 + 40), &buf, objc_msgSend(v19, "frameLength", v25, v26, v27, v28), (const AudioBufferList *)objc_msgSend(v19, "audioBufferList"));
  }
  else
  {
    int v21 = **(id **)(Phase::Logger::GetInstance(v13) + 384);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf.mSampleTime) = 136315906;
      *(void *)((char *)&buf.mSampleTime + 4) = "StreamRenderer.mm";
      WORD2(buf.mHostTime) = 1024;
      *(_DWORD *)((char *)&buf.mHostTime + 6) = 1270;
      WORD1(buf.mRateScalar) = 2048;
      *(void *)((char *)&buf.mRateScalar + 4) = a1;
      WORD2(buf.mWordClockTime) = 2048;
      *(UInt64 *)((char *)&buf.mWordClockTime + 6) = (UInt64)v11;
      _os_log_impl(&dword_221E5E000, v21, OS_LOG_TYPE_DEBUG, "%25s:%-5d bufferstream@%p: uninitialized, could not schedule buffer@%p", (uint8_t *)&buf, 0x26u);
    }
    if (v14) {
      (*((void (**)(Phase::Logger *, uint64_t))v14 + 2))(v14, a5);
    }
  }

  return v15 != 0;
}

void sub_222080450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  __cxa_free_exception(v18);

  _Unwind_Resume(a1);
}

void ___ZN5Phase10Controller14StreamRenderer14ScheduleBufferEP16AVAudioPCMBufferP11AVAudioTimem42PHASEPushStreamCompletionCallbackConditionU13block_pointerFvS6_E_block_invoke(void *a1)
{
  uint64_t v1 = (void *)a1[6];
  uint64_t v2 = *(void **)(a1[7] + 72);
  uint64_t v3 = a1[4];
  uint64_t v4 = a1[5];
  uint64_t v5 = a1[8];
  if (v1)
  {
    BOOL v7 = a1[9] == 0;
    v11[0] = MEMORY[0x263EF8330];
    v11[1] = 3221225472;
    uint64_t v11[2] = ___ZN5Phase10Controller14StreamRenderer14ScheduleBufferEP16AVAudioPCMBufferP11AVAudioTimem42PHASEPushStreamCompletionCallbackConditionU13block_pointerFvS6_E_block_invoke_2;
    v11[3] = &unk_2645F7C90;
    id v8 = v1;
    uint64_t v9 = a1[9];
    id v12 = v8;
    uint64_t v13 = v9;
    [v2 scheduleBuffer:v3 atTime:v4 options:v5 completionCallbackType:v7 completionHandler:v11];
  }
  else
  {
    double v10 = *(void **)(a1[7] + 72);
    [v10 scheduleBuffer:v3 atTime:v4 options:v5 completionHandler:0];
  }
}

void sub_2220805C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN5Phase10Controller14StreamRenderer14ScheduleBufferEP16AVAudioPCMBufferP11AVAudioTimem42PHASEPushStreamCompletionCallbackConditionU13block_pointerFvS6_E_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(void *)(a1 + 40));
}

BOOL Phase::Controller::StreamRenderer::ScheduleFile(Phase::Controller::StreamRenderer *this, AVAudioFile *a2, AVAudioTime *a3, char a4)
{
  return Phase::Controller::StreamRenderer::ScheduleFile((uint64_t)this, a2, a3, a4, 0, 0);
}

BOOL Phase::Controller::StreamRenderer::ScheduleFile(uint64_t a1, void *a2, void *a3, char a4, uint64_t a5, void *a6)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  id v11 = a2;
  id v12 = a3;
  uint64_t v13 = a6;
  int v14 = v13;
  if (!v11)
  {
    uint64_t v25 = **(id **)(Phase::Logger::GetInstance(v13) + 384);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.mSampleTime) = 136315650;
      *(void *)((char *)&buf.mSampleTime + 4) = "StreamRenderer.mm";
      WORD2(buf.mHostTime) = 1024;
      *(_DWORD *)((char *)&buf.mHostTime + 6) = 1332;
      WORD1(buf.mRateScalar) = 2048;
      *(void *)((char *)&buf.mRateScalar + 4) = a1;
      _os_log_impl(&dword_221E5E000, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [pInFile == nil is true]: \"bufferstream@%p: Error: nil file!\"", (uint8_t *)&buf, 0x1Cu);
    }
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "bufferstream@%p: Error: nil file!");
  }
  if (*(void *)(a1 + 48))
  {
    if (a5) {
      std::terminate();
    }
    unsigned __int8 v15 = atomic_load((unsigned __int8 *)(a1 + 216));
    if ((v15 & 1) == 0)
    {
      uint64_t v35 = 0;
      uint64_t v36 = &v35;
      uint64_t v37 = 0x2020000000;
      char v38 = 1;
      int v16 = applesauce::dispatch::v1::queue::operator*((id *)(a1 + 208));
      block[0] = MEMORY[0x263EF8330];
      block[1] = 3221225472;
      block[2] = ___ZN5Phase10Controller14StreamRenderer12ScheduleFileEP11AVAudioFileP11AVAudioTimeb42PHASEPushStreamCompletionCallbackConditionU13block_pointerFvS6_E_block_invoke;
      block[3] = &unk_2645F7CE0;
      uint64_t v32 = a1;
      char v34 = a4;
      id v28 = v12;
      id v30 = v14;
      uint64_t v17 = (AVAudioFile *)v11;
      uint64_t v33 = 0;
      id v29 = v17;
      char v31 = &v35;
      dispatch_sync(v16, block);

      Phase::Controller::StreamRenderer::StartStopInternalCaptures((Phase::Controller::StreamRenderer *)a1, 1);
      Phase::Controller::StreamRenderer::IOConfiguration::WriteCaptureFile((Phase::Controller::StreamRenderer::IOConfiguration *)(a1 + 24), &buf, v17, 0, [(AVAudioFile *)v17 length]);
      BOOL v18 = *((unsigned char *)v36 + 24) != 0;

      _Block_object_dispose(&v35, 8);
      goto LABEL_14;
    }
    id v19 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v13)
                                                                                        + 384)));
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v22 = [v11 url];
      id v23 = [v22 description];
      LODWORD(buf.mSampleTime) = 136315906;
      *(void *)((char *)&buf.mSampleTime + 4) = "StreamRenderer.mm";
      WORD2(buf.mHostTime) = 1024;
      *(_DWORD *)((char *)&buf.mHostTime + 6) = 1353;
      WORD1(buf.mRateScalar) = 2048;
      *(void *)((char *)&buf.mRateScalar + 4) = a1;
      WORD2(buf.mWordClockTime) = 2080;
      *(UInt64 *)((char *)&buf.mWordClockTime + 6) = [v23 UTF8String];
      _os_log_impl(&dword_221E5E000, v19, OS_LOG_TYPE_DEFAULT, "%25s:%-5d bufferstream@%p: Warning: a looping file is previously scheduled, cannot schedule file [%s]", (uint8_t *)&buf, 0x26u);
    }
  }
  else
  {
    id v19 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v13)
                                                                                        + 384)));
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      id v20 = [v11 url];
      id v21 = [v20 description];
      LODWORD(buf.mSampleTime) = 136315906;
      *(void *)((char *)&buf.mSampleTime + 4) = "StreamRenderer.mm";
      WORD2(buf.mHostTime) = 1024;
      *(_DWORD *)((char *)&buf.mHostTime + 6) = 1338;
      WORD1(buf.mRateScalar) = 2048;
      *(void *)((char *)&buf.mRateScalar + 4) = a1;
      WORD2(buf.mWordClockTime) = 2080;
      *(UInt64 *)((char *)&buf.mWordClockTime + 6) = [v21 UTF8String];
      _os_log_impl(&dword_221E5E000, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d bufferstream@%p: Error: uninitialized, could not schedule file [%s]", (uint8_t *)&buf, 0x26u);
    }
  }

  if (v14) {
    (*((void (**)(Phase::Logger *, uint64_t))v14 + 2))(v14, a5);
  }
  BOOL v18 = 0;
LABEL_14:

  return v18;
}

void sub_222080A24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN5Phase10Controller14StreamRenderer12ScheduleFileEP11AVAudioFileP11AVAudioTimeb42PHASEPushStreamCompletionCallbackConditionU13block_pointerFvS6_E_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  if (*(unsigned char *)(a1 + 80))
  {
    atomic_store(1u, (unsigned __int8 *)(v2 + 216));
    atomic_store(0, (unsigned __int8 *)(v2 + 217));
    *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = Phase::Controller::StreamRenderer::ScheduleLoopingFile(v2, *(void **)(a1 + 40), *(void **)(a1 + 32), *(void *)(a1 + 72), *(void **)(a1 + 48));
  }
  else
  {
    uint64_t v3 = Phase::Controller::StreamRenderer::GetScheduleTime(*(Phase::Controller::StreamRenderer **)(a1 + 64), *(AVAudioTime **)(a1 + 32));
    uint64_t v4 = *(void **)(v2 + 72);
    uint64_t v6 = *(void *)(a1 + 40);
    uint64_t v5 = *(void **)(a1 + 48);
    uint64_t v7 = *(void *)(a1 + 72);
    BOOL v8 = v7 == 0;
    if (v5)
    {
      v11[0] = MEMORY[0x263EF8330];
      v11[1] = 3221225472;
      uint64_t v11[2] = ___ZN5Phase10Controller14StreamRenderer12ScheduleFileEP11AVAudioFileP11AVAudioTimeb42PHASEPushStreamCompletionCallbackConditionU13block_pointerFvS6_E_block_invoke_2;
      v11[3] = &unk_2645F7C90;
      id v9 = v5;
      uint64_t v10 = *(void *)(a1 + 72);
      id v12 = v9;
      uint64_t v13 = v10;
      [v4 scheduleFile:v6 atTime:v3 completionCallbackType:v8 completionHandler:v11];
    }
    else
    {
      [v4 scheduleFile:*(void *)(a1 + 40) atTime:v3 completionCallbackType:v7 == 0 completionHandler:0];
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 1;
  }
}

void sub_222080C10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN5Phase10Controller14StreamRenderer12ScheduleFileEP11AVAudioFileP11AVAudioTimeb42PHASEPushStreamCompletionCallbackConditionU13block_pointerFvS6_E_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(void *)(a1 + 40));
}

uint64_t Phase::Controller::StreamRenderer::ScheduleLoopingFile(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  id v9 = a2;
  uint64_t v37 = a3;
  char v38 = a5;
  if (!v9 || !*(void *)(a1 + 48)) {
    std::terminate();
  }
  uint64_t v10 = [v9 fileFormat];
  [v10 sampleRate];
  double v12 = v11;

  if (v12 <= 0.0)
  {
    uint64_t v33 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v13)
                                                                                        + 384)));
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      char v34 = [v9 fileFormat];
      id v35 = [v34 description];
      *(_DWORD *)AudioTimeStamp buf = 136315906;
      uint64_t v45 = "StreamRenderer.mm";
      __int16 v46 = 1024;
      int v47 = 1421;
      __int16 v48 = 2048;
      uint64_t v49 = a1;
      __int16 v50 = 2080;
      uint64_t v51 = [v35 UTF8String];
      _os_log_impl(&dword_221E5E000, v33, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [pInFile.fileFormat.sampleRate <= 0 is true]: \"bufferstream@%p: Error: invalid file format %s!\"", buf, 0x26u);
    }
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "bufferstream@%p: Error: invalid file format %s!");
  }
  uint64_t v14 = [v9 length];
  unsigned __int8 v15 = [v9 fileFormat];
  [v15 sampleRate];
  double v17 = (double)v14 / v16;

  if (v17 <= 0.0)
  {
    __int16 v27 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v18)
                                                                                        + 384)));
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      id v28 = [v9 url];
      id v29 = [v28 description];
      *(_DWORD *)AudioTimeStamp buf = 136315906;
      uint64_t v45 = "StreamRenderer.mm";
      __int16 v46 = 1024;
      int v47 = 1427;
      __int16 v48 = 2048;
      uint64_t v49 = a1;
      __int16 v50 = 2080;
      uint64_t v51 = [v29 UTF8String];
      _os_log_impl(&dword_221E5E000, v27, OS_LOG_TYPE_DEFAULT, "%25s:%-5d bufferstream@%p: Warning: trying to schedule a zero length looping file [%s], no-op", buf, 0x26u);
    }
    id v30 = v38;
    if (!v38)
    {
      uint64_t v26 = 0;
      goto LABEL_25;
    }
    v38[2]();
  }
  else
  {
    int v19 = 0;
    int v20 = vcvtpd_s64_f64(3.0 / v17);
    if (v20 <= 2) {
      int v21 = 2;
    }
    else {
      int v21 = v20;
    }
    while (1)
    {
      if (v19)
      {
        __int16 v22 = 0;
      }
      else
      {
        __int16 v22 = Phase::Controller::StreamRenderer::GetScheduleTime((Phase::Controller::StreamRenderer *)a1, v37);
      }
      unsigned __int8 v23 = atomic_load((unsigned __int8 *)(a1 + 216));
      if ((v23 & 1) == 0) {
        break;
      }
      int v24 = *(void **)(a1 + 72);
      v39[0] = MEMORY[0x263EF8330];
      v39[1] = 3221225472;
      _OWORD v39[2] = ___ZN5Phase10Controller14StreamRenderer19ScheduleLoopingFileEP11AVAudioFileP11AVAudioTime42PHASEPushStreamCompletionCallbackConditionU13block_pointerFvS6_E_block_invoke;
      v39[3] = &unk_2645F7D30;
      uint64_t v42 = a1;
      id v25 = v9;
      id v40 = v25;
      uint64_t v43 = a4;
      __int16 v41 = v38;
      [v24 scheduleFile:v25 atTime:v22 completionCallbackType:0 completionHandler:v39];

      if (v21 == ++v19)
      {
        uint64_t v26 = 1;
        goto LABEL_24;
      }
    }
    unsigned __int8 v31 = atomic_load((unsigned __int8 *)(a1 + 217));
    if ((v31 & 1) == 0)
    {
      if (v38) {
        v38[2]();
      }
      atomic_store(1u, (unsigned __int8 *)(a1 + 217));
    }
  }
  uint64_t v26 = 0;
LABEL_24:
  id v30 = v38;
LABEL_25:

  return v26;
}

void sub_22208106C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void Phase::Controller::StreamRenderer::IOConfiguration::WriteCaptureFile(Phase::Controller::StreamRenderer::IOConfiguration *this, const AudioTimeStamp *a2, AVAudioFile *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  id v9 = a3;
  if (a5 && *((void *)this + 2))
  {
    context = (void *)MEMORY[0x223C93F80]();
    id v10 = objc_alloc(MEMORY[0x263EF93B0]);
    double v11 = [(AVAudioFile *)v9 processingFormat];
    double v12 = (void *)[v10 initWithPCMFormat:v11 frameCapacity:a5];

    if (!v12)
    {
      double v16 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v13)
                                                                                          + 384)));
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        id v25 = [(AVAudioFile *)v9 url];
        id v26 = [v25 description];
        *(_DWORD *)AudioTimeStamp buf = 136315906;
        id v40 = "StreamRenderer.mm";
        __int16 v41 = 1024;
        int v42 = 1874;
        __int16 v43 = 2048;
        uint64_t v44 = this;
        __int16 v45 = 2080;
        uint64_t v46 = [v26 UTF8String];
        _os_log_impl(&dword_221E5E000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d bufferstream@%p: <debug captures> error allocating buffer for file [%s]", buf, 0x26u);
      }
      goto LABEL_18;
    }
    id v14 = objc_alloc(MEMORY[0x263EF9380]);
    unsigned __int8 v15 = [(AVAudioFile *)v9 url];
    id v38 = 0;
    double v16 = [v14 initForReading:v15 commonFormat:1 interleaved:0 error:&v38];
    double v17 = v38;

    if (v17)
    {
      int v19 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v18)
                                                                                          + 384)));
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        int v20 = [(AVAudioFile *)v9 url];
        id v21 = [v20 description];
        uint64_t v22 = [v21 UTF8String];
        id v23 = [v17 localizedDescription];
        uint64_t v24 = [v23 UTF8String];
        *(_DWORD *)AudioTimeStamp buf = 136316162;
        id v40 = "StreamRenderer.mm";
        __int16 v41 = 1024;
        int v42 = 1889;
        __int16 v43 = 2048;
        uint64_t v44 = this;
        __int16 v45 = 2080;
        uint64_t v46 = v22;
        __int16 v47 = 2080;
        uint64_t v48 = v24;
        _os_log_impl(&dword_221E5E000, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d bufferstream@%p: <debug captures> error initing file for reading [%s], Error: %s", buf, 0x30u);
      }
    }
    else if (v16)
    {
      [v16 setFramePosition:a4];
      id v37 = 0;
      [(AVAudioFile *)v9 readIntoBuffer:v12 error:&v37];
      __int16 v27 = (Phase::Logger *)v37;
      double v17 = v27;
      if (!v27)
      {
        __int16 v27 = (Phase::Logger *)[v12 frameLength];
        if (v27)
        {
          Phase::Controller::StreamRenderer::IOConfiguration::WriteCaptureBufferList(*((void *)this + 2), a2, [v12 frameLength], (const AudioBufferList *)objc_msgSend(v12, "audioBufferList"));
          goto LABEL_18;
        }
      }
      id v28 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v27)
                                                                                          + 384)));
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        id v29 = [(AVAudioFile *)v9 url];
        id v30 = [v29 description];
        uint64_t v31 = [v30 UTF8String];
        int v32 = [v17 code];
        *(_DWORD *)AudioTimeStamp buf = 136316162;
        id v40 = "StreamRenderer.mm";
        __int16 v41 = 1024;
        int v42 = 1908;
        __int16 v43 = 2048;
        uint64_t v44 = this;
        __int16 v45 = 2080;
        uint64_t v46 = v31;
        __int16 v47 = 1024;
        LODWORD(v48) = v32;
        _os_log_impl(&dword_221E5E000, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d bufferstream@%p: <debug captures> error reading from file [%s], %d", buf, 0x2Cu);
      }
    }
    else
    {
      double v17 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v18)
                                                                                          + 384)));
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        uint64_t v33 = [(AVAudioFile *)v9 url];
        id v34 = [v33 description];
        uint64_t v35 = [v34 UTF8String];
        *(_DWORD *)AudioTimeStamp buf = 136315906;
        id v40 = "StreamRenderer.mm";
        __int16 v41 = 1024;
        int v42 = 1897;
        __int16 v43 = 2048;
        uint64_t v44 = this;
        __int16 v45 = 2080;
        uint64_t v46 = v35;
        _os_log_impl(&dword_221E5E000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d bufferstream@%p: <debug captures> Could not create file for reading [%s]", buf, 0x26u);
      }
    }

LABEL_18:
  }
}

void sub_22208160C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *exc_bufa, uint64_t a12, uint64_t a13, uint64_t a14, long long buf, __int16 a16, __int16 a17, long long a18, uint64_t a19, long long a20)
{
  if (a2 == 1)
  {
    id v26 = (Phase::Logger *)objc_begin_catch(a1);
    __int16 v27 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v26)
                                                                                        + 384)));
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      id v28 = [v20 url];
      id v29 = [v28 description];
      uint64_t v30 = [v29 UTF8String];
      id v31 = [(Phase::Logger *)v26 name];
      uint64_t v32 = [v31 UTF8String];
      id v33 = [(Phase::Logger *)v26 reason];
      uint64_t v34 = [v33 UTF8String];
      LODWORD(buf) = 136316418;
      *(void *)((char *)&buf + 4) = "StreamRenderer.mm";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 1919;
      a17 = 2048;
      WORD2(a18) = 2080;
      *(void *)((char *)&a18 + 6) = v30;
      HIWORD(a18) = 2080;
      a19 = v32;
      LOWORD(a2std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = 2080;
      *(void *)((char *)&a20 + 2) = v34;
      _os_log_impl(&dword_221E5E000, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d bufferstream@%p: <debug captures> exception caught reading from file [%s], Name: %s, Reason: %s", (uint8_t *)&buf, 0x3Au);
    }
    objc_end_catch();
    JUMPOUT(0x22208158CLL);
  }

  _Unwind_Resume(a1);
}

void ___ZN5Phase10Controller14StreamRenderer19ScheduleLoopingFileEP11AVAudioFileP11AVAudioTime42PHASEPushStreamCompletionCallbackConditionU13block_pointerFvS6_E_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)(v2 + 216));
  if (v3)
  {
    uint64_t v6 = applesauce::dispatch::v1::queue::operator*((id *)(v2 + 208));
    v9[0] = MEMORY[0x263EF8330];
    v9[1] = 3221225472;
    v9[2] = ___ZN5Phase10Controller14StreamRenderer19ScheduleLoopingFileEP11AVAudioFileP11AVAudioTime42PHASEPushStreamCompletionCallbackConditionU13block_pointerFvS6_E_block_invoke_2;
    v9[3] = &unk_2645F7D08;
    uint64_t v12 = v2;
    id v7 = *(id *)(a1 + 32);
    uint64_t v8 = *(void *)(a1 + 56);
    id v10 = v7;
    uint64_t v13 = v8;
    id v11 = *(id *)(a1 + 40);
    dispatch_async(v6, v9);
  }
  else
  {
    unsigned __int8 v4 = atomic_load((unsigned __int8 *)(v2 + 217));
    if ((v4 & 1) == 0)
    {
      uint64_t v5 = *(void *)(a1 + 40);
      if (v5) {
        (*(void (**)(uint64_t, void))(v5 + 16))(v5, *(void *)(a1 + 56));
      }
      atomic_store(1u, (unsigned __int8 *)(v2 + 217));
    }
  }
}

uint64_t ___ZN5Phase10Controller14StreamRenderer19ScheduleLoopingFileEP11AVAudioFileP11AVAudioTime42PHASEPushStreamCompletionCallbackConditionU13block_pointerFvS6_E_block_invoke_2(void *a1)
{
  return Phase::Controller::StreamRenderer::ScheduleLoopingFile(a1[6], a1[4], 0, a1[7], a1[5]);
}

BOOL Phase::Controller::StreamRenderer::ScheduleSegment(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  id v13 = a2;
  id v14 = a3;
  unsigned __int8 v15 = a7;
  double v16 = v15;
  if (!v13)
  {
    uint64_t v24 = **(id **)(Phase::Logger::GetInstance(v15) + 384);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.mSampleTime) = 136315650;
      *(void *)((char *)&buf.mSampleTime + 4) = "StreamRenderer.mm";
      WORD2(buf.mHostTime) = 1024;
      *(_DWORD *)((char *)&buf.mHostTime + 6) = 1505;
      WORD1(buf.mRateScalar) = 2048;
      *(void *)((char *)&buf.mRateScalar + 4) = a1;
      _os_log_impl(&dword_221E5E000, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [pInFile == nil is true]: \"bufferstream@%p: nil file!\"", (uint8_t *)&buf, 0x1Cu);
    }
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "bufferstream@%p: nil file!");
LABEL_19:
  }
  if (a4 < 0 || !a5)
  {
    id v26 = **(id **)(Phase::Logger::GetInstance(v15) + 384);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.mSampleTime) = 136316162;
      *(void *)((char *)&buf.mSampleTime + 4) = "StreamRenderer.mm";
      WORD2(buf.mHostTime) = 1024;
      *(_DWORD *)((char *)&buf.mHostTime + 6) = 1507;
      WORD1(buf.mRateScalar) = 2048;
      *(void *)((char *)&buf.mRateScalar + 4) = a1;
      WORD2(buf.mWordClockTime) = 2048;
      *(UInt64 *)((char *)&buf.mWordClockTime + 6) = a4;
      HIWORD(buf.mSMPTETime.mCounter) = 1024;
      buf.mSMPTETime.mType = a5;
      _os_log_impl(&dword_221E5E000, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [inStartFrame < 0 || inNumberOfFrames <= 0 is true]: \"bufferstream@%p: invalid frame position/count, [%lld, %u]!\"", (uint8_t *)&buf, 0x2Cu);
    }
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "bufferstream@%p: invalid frame position/count, [%lld, %u]!");
    goto LABEL_19;
  }
  uint64_t v17 = *(void *)(a1 + 48);
  if (v17)
  {
    if (a6) {
      std::terminate();
    }
    BOOL v18 = applesauce::dispatch::v1::queue::operator*((id *)(a1 + 208));
    block[0] = MEMORY[0x263EF8330];
    block[1] = 3221225472;
    block[2] = ___ZN5Phase10Controller14StreamRenderer15ScheduleSegmentEP11AVAudioFileP11AVAudioTimexj42PHASEPushStreamCompletionCallbackConditionU13block_pointerFvS6_E_block_invoke;
    block[3] = &unk_2645F7D58;
    uint64_t v31 = a1;
    id v28 = v14;
    uint64_t v30 = v16;
    int v19 = (AVAudioFile *)v13;
    id v29 = v19;
    uint64_t v32 = a4;
    uint64_t v33 = 0;
    int v34 = a5;
    dispatch_sync(v18, block);

    Phase::Controller::StreamRenderer::StartStopInternalCaptures((Phase::Controller::StreamRenderer *)a1, 1);
    Phase::Controller::StreamRenderer::IOConfiguration::WriteCaptureFile((Phase::Controller::StreamRenderer::IOConfiguration *)(a1 + 24), &buf, v19, a4, a5);
  }
  else
  {
    int v20 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v15)
                                                                                        + 384)));
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
    {
      id v21 = [v13 url];
      id v22 = [v21 description];
      LODWORD(buf.mSampleTime) = 136315906;
      *(void *)((char *)&buf.mSampleTime + 4) = "StreamRenderer.mm";
      WORD2(buf.mHostTime) = 1024;
      *(_DWORD *)((char *)&buf.mHostTime + 6) = 1512;
      WORD1(buf.mRateScalar) = 2048;
      *(void *)((char *)&buf.mRateScalar + 4) = a1;
      WORD2(buf.mWordClockTime) = 2080;
      *(UInt64 *)((char *)&buf.mWordClockTime + 6) = [v22 UTF8String];
      _os_log_impl(&dword_221E5E000, v20, OS_LOG_TYPE_DEBUG, "%25s:%-5d bufferstream@%p: uninitialized, could not schedule file [%s]", (uint8_t *)&buf, 0x26u);
    }
    if (v16) {
      (*((void (**)(Phase::Logger *, uint64_t))v16 + 2))(v16, a6);
    }
  }

  return v17 != 0;
}

void sub_222081D8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN5Phase10Controller14StreamRenderer15ScheduleSegmentEP11AVAudioFileP11AVAudioTimexj42PHASEPushStreamCompletionCallbackConditionU13block_pointerFvS6_E_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(Phase::Controller::StreamRenderer **)(a1 + 56);
  unsigned __int8 v3 = Phase::Controller::StreamRenderer::GetScheduleTime(v2, *(AVAudioTime **)(a1 + 32));
  unsigned __int8 v4 = (void *)*((void *)v2 + 9);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v5 = *(void **)(a1 + 48);
  uint64_t v7 = *(unsigned int *)(a1 + 80);
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v8 = *(void *)(a1 + 72);
  BOOL v10 = v8 == 0;
  if (v5)
  {
    v13[0] = MEMORY[0x263EF8330];
    v13[1] = 3221225472;
    v13[2] = ___ZN5Phase10Controller14StreamRenderer15ScheduleSegmentEP11AVAudioFileP11AVAudioTimexj42PHASEPushStreamCompletionCallbackConditionU13block_pointerFvS6_E_block_invoke_2;
    v13[3] = &unk_2645F7C90;
    id v11 = v5;
    uint64_t v12 = *(void *)(a1 + 72);
    id v14 = v11;
    uint64_t v15 = v12;
    [v4 scheduleSegment:v6 startingFrame:v9 frameCount:v7 atTime:v3 completionCallbackType:v10 completionHandler:v13];
  }
  else
  {
    [v4 scheduleSegment:*(void *)(a1 + 40) startingFrame:*(void *)(a1 + 64) frameCount:*(unsigned int *)(a1 + 80) atTime:v3 completionCallbackType:v8 == 0 completionHandler:0];
  }
}

void sub_222081F28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN5Phase10Controller14StreamRenderer15ScheduleSegmentEP11AVAudioFileP11AVAudioTimexj42PHASEPushStreamCompletionCallbackConditionU13block_pointerFvS6_E_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(void *)(a1 + 40));
}

BOOL Phase::Controller::StreamRenderer::RenderOffline(Phase::Controller::StreamRenderer *this, unint64_t a2, AVAudioPCMBuffer *a3)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v5 = a3;
  uint64_t v6 = v5;
  if ((*((unsigned char *)this + 128) & 1) == 0)
  {
    uint64_t v7 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)v5) + 384);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v23.mSampleTime) = 136315650;
      *(void *)((char *)&v23.mSampleTime + 4) = "StreamRenderer.mm";
      WORD2(v23.mHostTime) = 1024;
      *(_DWORD *)((char *)&v23.mHostTime + 6) = 1570;
      WORD1(v23.mRateScalar) = 2048;
      *(void *)((char *)&v23.mRateScalar + 4) = this;
      _os_log_impl(&dword_221E5E000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d bufferstream@%p: Error: must be setup in offline mode before calling RenderOffline!", (uint8_t *)&v23, 0x1Cu);
    }
LABEL_15:
    BOOL v15 = 0;
    goto LABEL_16;
  }
  uint64_t v8 = [(AVAudioPCMBuffer *)v5 format];
  char v9 = [v8 isEqual:*((void *)this + 13)];

  if ((v9 & 1) == 0)
  {
    uint64_t v17 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v10)
                                                                                        + 384)));
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      id v18 = [*((id *)this + 13) description];
      UInt64 v19 = [v18 UTF8String];
      int v20 = [(AVAudioPCMBuffer *)v6 format];
      id v21 = [v20 description];
      LODWORD(v23.mSampleTime) = 136316162;
      *(void *)((char *)&v23.mSampleTime + 4) = "StreamRenderer.mm";
      WORD2(v23.mHostTime) = 1024;
      *(_DWORD *)((char *)&v23.mHostTime + 6) = 1578;
      WORD1(v23.mRateScalar) = 2048;
      *(void *)((char *)&v23.mRateScalar + 4) = this;
      WORD2(v23.mWordClockTime) = 2080;
      *(UInt64 *)((char *)&v23.mWordClockTime + 6) = v19;
      HIWORD(v23.mSMPTETime.mCounter) = 2080;
      *(void *)&v23.mSMPTETime.mType = [v21 UTF8String];
      _os_log_impl(&dword_221E5E000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d bufferstream@%p: Error: mismatch in the format of the buffer, expected %s, given %s", (uint8_t *)&v23, 0x30u);
    }
    goto LABEL_15;
  }
  AVAudioFrameCount v11 = [(AVAudioPCMBuffer *)v6 frameCapacity];
  if (v11 >= a2) {
    uint64_t v12 = a2;
  }
  else {
    uint64_t v12 = v11;
  }
  v23.mFlags = 0;
  [(AVAudioPCMBuffer *)v6 setFrameLength:[(AVAudioPCMBuffer *)v6 frameCapacity]];
  id v13 = (unsigned int *)[(AVAudioPCMBuffer *)v6 mutableAudioBufferList];
  BOOL v15 = Phase::Controller::StreamRenderer::IORender(this, &v23, v12, v13, v14);
  if (v15) {
    uint64_t v16 = a2;
  }
  else {
    uint64_t v16 = 0;
  }
  [(AVAudioPCMBuffer *)v6 setFrameLength:v16];
LABEL_16:

  return v15;
}

void sub_2220821CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL Phase::Controller::StreamRenderer::IORender(Phase::Controller::StreamRenderer *this, const AudioTimeStamp *a2, uint64_t a3, unsigned int *a4, AudioBufferList *a5)
{
  uint64_t v69 = *MEMORY[0x263EF8340];
  if (!a4 || !*a4) {
    return 0;
  }
  if (!this) {
    goto LABEL_74;
  }
  uint64_t v59 = (char *)this + 220;
  char v60 = caulk::pooled_semaphore_mutex::try_lock((Phase::Controller::StreamRenderer *)((char *)this + 220));
  if ((v60 & 1) == 0)
  {
    if (*a4)
    {
      unint64_t v45 = 0;
      uint64_t v46 = (void **)(a4 + 4);
      do
      {
        BOOL v44 = *v46 != 0;
        if (!*v46) {
          break;
        }
        bzero(*v46, *((unsigned int *)v46 - 1));
        ++v45;
        v46 += 2;
      }
      while (v45 < *a4);
    }
    else
    {
      BOOL v44 = 1;
    }
    goto LABEL_72;
  }
  if (!*((void *)this + 6) || !*((unsigned char *)this + 136) || !*((unsigned char *)this + 137))
  {
    BOOL v44 = 0;
    goto LABEL_72;
  }
  if (!*((unsigned char *)this + 288))
  {
    long long v9 = *(_OWORD *)&a2->mSampleTime;
    long long v10 = *(_OWORD *)&a2->mRateScalar;
    long long v11 = *(_OWORD *)&a2->mSMPTETime.mHours;
    *((_OWORD *)this + 16) = *(_OWORD *)&a2->mSMPTETime.mSubframes;
    *((_OWORD *)this + 17) = v11;
    *((_OWORD *)this + 14) = v9;
    *((_OWORD *)this + 1std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear(this + 5) = v10;
    *((unsigned char *)this + 288) = 1;
  }
  uint64_t v12 = (_OWORD *)*((void *)this + 38);
  long long v13 = *(_OWORD *)&a2->mSampleTime;
  long long v14 = *(_OWORD *)&a2->mRateScalar;
  long long v15 = *(_OWORD *)&a2->mSMPTETime.mHours;
  void v12[2] = *(_OWORD *)&a2->mSMPTETime.mSubframes;
  v12[3] = v15;
  _OWORD *v12 = v13;
  v12[1] = v14;
  **((void **)this + 4std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = 0;
  unsigned int v16 = atomic_load(*((unsigned int **)this + 21));
  LODWORD(v12) = atomic_load((unsigned int *)this + 40);
  if (v16 < v12)
  {
    do
    {
      uint64_t v17 = *((void *)this + 19);
      if (!v17) {
        break;
      }
      int v18 = *(_DWORD *)(v17 + 12);
      unsigned int v19 = atomic_load((unsigned int *)this + 40);
      unsigned int v20 = atomic_load(*((unsigned int **)this + 21));
      unsigned int v21 = v19 - v20;
      if (v21 >= *((_DWORD *)this + 28)) {
        unsigned int v22 = *((_DWORD *)this + 28);
      }
      else {
        unsigned int v22 = v21;
      }
      (*(void (**)(void))(*((void *)this + 7) + 16))();
      atomic_fetch_add(*((atomic_uint *volatile *)this + 21), v22);
      AudioTimeStamp v23 = (unsigned int *)*((void *)this + 19);
      uint64_t v24 = *v23;
      if (v24)
      {
        id v25 = v23 + 3;
        do
        {
          _DWORD *v25 = v18;
          v25 += 4;
          --v24;
        }
        while (v24);
      }
      unsigned int v26 = atomic_load(*((unsigned int **)this + 21));
      unsigned int v27 = atomic_load((unsigned int *)this + 40);
    }
    while (v26 < v27);
  }
  float v58 = a2;
  uint64_t v28 = *a4;
  if (!v28 || !*((void *)a4 + 2)) {
LABEL_74:
  }
    std::terminate();
  MEMORY[0x270FA5388]();
  id v29 = (int *)((char *)&v57 - ((4 * v28 + 15) & 0x7FFFFFFF0));
  bzero(v29, 4 * v28);
  for (uint64_t i = 0; i != v28; ++i)
  {
    uint64_t v31 = &a4[i * 4];
    unsigned int v32 = v31[2];
    v29[i] = v31[3];
    v31[3] = 4 * a3 * v32;
  }
  if (!a3)
  {
    BOOL v44 = 1;
    goto LABEL_56;
  }
  unsigned int v33 = a3;
  while (1)
  {
    int v34 = (_DWORD *)*((void *)this + 24);
    if (!v34)
    {
      *(_DWORD *)AudioTimeStamp buf = 0;
      uint64_t v41 = (*(uint64_t (**)(void))(*((void *)this + 7) + 16))();
      unsigned int v33 = 0;
      goto LABEL_41;
    }
    unsigned int v35 = *((_DWORD *)this + 50);
    unsigned int v36 = *((_DWORD *)this + 51);
    unsigned int v37 = v35 - v36;
    if (v35 <= v36) {
      break;
    }
    if (*v34 != *a4) {
      goto LABEL_74;
    }
    if (v33 >= v37) {
      uint64_t v38 = v37;
    }
    else {
      uint64_t v38 = v33;
    }
    if (*v34)
    {
      unint64_t v39 = 0;
      uint64_t v40 = 4;
      do
      {
        memcpy((void *)(*(void *)&a4[v40] + 4 * a3 - 4 * v33), (const void *)(*(void *)&v34[v40] + 4 * *((unsigned int *)this + 51)), 4 * v38);
        ++v39;
        int v34 = (_DWORD *)*((void *)this + 24);
        v40 += 4;
      }
      while (v39 < *v34);
      unsigned int v36 = *((_DWORD *)this + 51);
    }
    v33 -= v38;
    *((_DWORD *)this + 51) = v36 + v38;
    **((void **)this + 40) += v38;
LABEL_43:
    if (!v33)
    {
      BOOL v44 = 1;
      goto LABEL_55;
    }
  }
  *(_DWORD *)AudioTimeStamp buf = 0;
  uint64_t v42 = *v34;
  if (v42)
  {
    __int16 v43 = v34 + 3;
    do
    {
      _DWORD *v43 = 4 * v35;
      v43 += 4;
      --v42;
    }
    while (v42);
  }
  uint64_t v41 = (*(uint64_t (**)(void))(*((void *)this + 7) + 16))();
  *((_DWORD *)this + 51) = 0;
LABEL_41:
  if (v41 != -1)
  {
    if (v41 == 2) {
      goto LABEL_74;
    }
    goto LABEL_43;
  }
  BOOL v44 = 0;
LABEL_55:
  LODWORD(v28) = *a4;
LABEL_56:
  if (v28)
  {
    uint64_t v47 = v28;
    uint64_t v48 = a4 + 3;
    do
    {
      int v49 = *v29++;
      _DWORD *v48 = v49;
      v48 += 4;
      --v47;
    }
    while (v47);
  }
  __int16 v50 = v58;
  uint64_t ShouldFire = Phase::Controller::StreamRenderer::IOConfiguration::WriteCaptureBufferList(*((void *)this + 2), v58, a3, (const AudioBufferList *)a4);
  atomic_fetch_add((atomic_ullong *volatile)this + 42, a3);
  uint64_t v52 = *((void *)this + 46);
  if (v52 && *((unsigned char *)this + 376))
  {
    if (AudioIssueDetectorLibraryLoader(void)::once != -1) {
      dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_36);
    }
    if (off_267F74C90)
    {
      uint64_t ShouldFire = off_267F74C90(v52, 1, 0, a4, a3, v50);
      int v53 = ShouldFire;
      if (!ShouldFire) {
        goto LABEL_70;
      }
    }
    else
    {
      int v53 = -1;
    }
    uint64_t ShouldFire = Phase::Throttle::ShouldFire((Phase::Controller::StreamRenderer *)((char *)this + 384), 0);
    if (ShouldFire)
    {
      uint64_t v54 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)ShouldFire) + 384);
      uint64_t ShouldFire = os_log_type_enabled(v54, OS_LOG_TYPE_ERROR);
      if (ShouldFire)
      {
        *(_DWORD *)AudioTimeStamp buf = 136315906;
        float v62 = "StreamRenderer.mm";
        __int16 v63 = 1024;
        int v64 = 1749;
        __int16 v65 = 2048;
        uint64_t v66 = this;
        __int16 v67 = 1024;
        int v68 = v53;
        _os_log_impl(&dword_221E5E000, v54, OS_LOG_TYPE_ERROR, "%25s:%-5d bufferstream@%p: failed to analyze buffer %d", buf, 0x22u);
      }
    }
  }
LABEL_70:
  if (*(unsigned char *)(Phase::Logger::GetInstance((Phase::Logger *)ShouldFire) + 1552))
  {
    float v55 = *((double *)this + 15);
    Phase::Trace::PostSignalStatsTraceIfSignificant((Phase::Trace *)0x1621, *((const float **)a4 + 2), a3, v55);
  }
LABEL_72:
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v59);
  return v44;
}

void sub_222082738(_Unwind_Exception *a1)
{
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100](v1 - 144);
  _Unwind_Resume(a1);
}

void *Phase::Controller::StreamRenderer::IOConfiguration::StopCaptures(void *this)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (this[2])
  {
    uint64_t v1 = this;
    uint64_t v2 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)this) + 384);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      int v3 = *(_DWORD *)v1;
      int v4 = 136315906;
      uint64_t v5 = "StreamRenderer.mm";
      __int16 v6 = 1024;
      int v7 = 1835;
      __int16 v8 = 2048;
      long long v9 = v1;
      __int16 v10 = 1024;
      int v11 = v3;
      _os_log_impl(&dword_221E5E000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d bufferstream@%p [%d]: stopping capture", (uint8_t *)&v4, 0x22u);
    }
    this = (void *)v1[2];
    v1[2] = 0;
    if (this) {
      return (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
    }
  }
  return this;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<Phase::Controller::AudioDSPRegisterInternalAudioUnits(void)::$_0 &&>>(void **a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v1 = (unsigned char **)**a1;
  uint64_t v2 = dlopen("/System/Library/Frameworks/AudioToolbox.framework/libAudioDSP.dylib", 1);
  if (!v2)
  {
    int v4 = **(id **)(Phase::Logger::GetInstance(0) + 384);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v6 = 136315394;
      int v7 = "StreamRenderer.mm";
      __int16 v8 = 1024;
      int v9 = 80;
      uint64_t v5 = "%25s:%-5d Error: Unable to load AudioDSP lib!";
LABEL_10:
      _os_log_impl(&dword_221E5E000, v4, OS_LOG_TYPE_ERROR, v5, (uint8_t *)&v6, 0x12u);
    }
LABEL_11:
    **uint64_t v1 = 0;
    return;
  }
  int v3 = (void (*)(void))dlsym(v2, "RegisterAudioUnits_Internal");
  if (!v3)
  {
    int v4 = **(id **)(Phase::Logger::GetInstance(0) + 384);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v6 = 136315394;
      int v7 = "StreamRenderer.mm";
      __int16 v8 = 1024;
      int v9 = 74;
      uint64_t v5 = "%25s:%-5d Error: Unable to call RegisterAudioUnits_Internal from AudioDSP lib!";
      goto LABEL_10;
    }
    goto LABEL_11;
  }

  v3();
}

void *___Z31AudioIssueDetectorLibraryLoaderv_block_invoke_0()
{
  v0 = dlopen("/usr/lib/libAudioIssueDetector.dylib", 1);
  if (v0 || (v0 = dlopen("/usr/local/lib/libAudioIssueDetector.dylib", 1)) != 0)
  {
    AudioIssueDetectorLibraryLoader(void)::libSyuint64_t m = (uint64_t (*)(void, void))dlsym(v0, "AudioIssueDetectorCreate");
    off_267F74C68 = (uint64_t (*)(void))dlsym(v0, "AudioIssueDetectorInitialize");
    off_267F74C70 = (uint64_t (*)(void))dlsym(v0, "AudioIssueDetectorDispose");
    qword_267F74C78 = (uint64_t)dlsym(v0, "AudioIssueDetectorSetNodeFormat");
    off_267F74C80 = (uint64_t (*)(void, void, void, void, void, void))dlsym(v0, "AudioIssueDetectorSetNodeFormatWithDirection");
    off_267F74C88 = (uint64_t (*)(void))dlsym(v0, "AudioIssueDetectorReset");
    off_267F74C90 = (uint64_t (*)(void, void, void, void, void, void))dlsym(v0, "AudioIssueDetectorAnalyzeBuffer");
    qword_267F74C98 = (uint64_t)dlsym(v0, "AudioIssueDetectorUpdateReportingSessions");
    qword_267F74CA0 = (uint64_t)dlsym(v0, "AudioIssueDetectorRemoveNode");
    qword_267F74CA8 = (uint64_t)dlsym(v0, "AudioIssueDetectorSetUplinkMute");
    qword_267F74CB0 = (uint64_t)dlsym(v0, "AudioIssueDetectorSetDownlinkVolume");
    qword_267F74CB8 = (uint64_t)dlsym(v0, "AudioIssueDetectorSetRouteSpecificDownlinkGainAdjustment");
    qword_267F74CC0 = (uint64_t)dlsym(v0, "AudioIssueDetectorSetSmartCaseMicMute");
  }
  uint64_t result = dlopen("/System/Library/Frameworks/AudioToolbox.framework/libAudioDSP.dylib", 1);
  if (result)
  {
    uint64_t result = dlsym(result, "RegisterAudioUnits_Analyzer");
    if (result)
    {
      return (void *)((uint64_t (*)(void))result)();
    }
  }
  return result;
}

void std::__shared_ptr_emplace<AudioTimeStamp>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D47AEB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AudioTimeStamp>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D47AEB0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C938A0);
}

void std::__shared_ptr_emplace<unsigned long>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D47AEE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<unsigned long>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D47AEE8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C938A0);
}

void std::__shared_ptr_emplace<std::atomic<unsigned int>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D47AF20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::atomic<unsigned int>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D47AF20;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C938A0);
}

Phase::StringId *Phase::StringId::StringId(Phase::StringId *this, const char *a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = &str_33;
  *((unsigned char *)this + 16) = 1;
  Phase::StringId::Initialize(this, a2);
  return this;
}

void *Phase::StringId::Initialize(Phase::StringId *this, const char *__s)
{
  if (__s) {
    size_t v4 = strlen(__s);
  }
  else {
    size_t v4 = 0;
  }

  return Phase::StringId::Initialize(this, __s, v4);
}

void *Phase::StringId::Initialize(Phase::StringId *this, const char *a2, size_t a3)
{
  if (!a2)
  {
    uint64_t v12 = -1;
    long long v13 = &str_33;
LABEL_9:
    char v14 = 1;
    return (void *)Phase::StringId::operator=((uint64_t)this, (uint64_t)&v12);
  }
  if (!a3)
  {
    uint64_t v12 = 0;
    long long v13 = &str_33;
    goto LABEL_9;
  }
  unsigned int v6 = *(unsigned __int8 *)a2;
  if (*a2)
  {
    int v7 = a2 + 1;
    uint64_t v8 = 0xCBF29CE484222325;
    do
    {
      uint64_t v8 = 0x100000001B3 * (v8 ^ v6);
      unsigned int v9 = *(unsigned __int8 *)v7++;
      unsigned int v6 = v9;
    }
    while (v9);
  }
  else
  {
    uint64_t v8 = 0;
  }
  *(void *)this = v8;
  int v11 = malloc_type_malloc(a3 + 1, 0xE46A21D0uLL);
  uint64_t result = memcpy(v11, a2, a3);
  *((unsigned char *)v11 + aobjc_destroyWeak(this + 3) = 0;
  *((void *)this + 1) = v11;
  *((unsigned char *)this + 16) = 0;
  return result;
}

uint64_t Phase::StringId::StringId(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  if (!*(unsigned char *)(a2 + 16))
  {
    size_t v4 = *(const char **)(a2 + 8);
    size_t v5 = strlen(v4);
    unsigned int v6 = malloc_type_malloc(v5 + 1, 0xE46A21D0uLL);
    memcpy(v6, v4, v5);
    *((unsigned char *)v6 + vstd::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear(this + 5) = 0;
    *(void *)(a1 + 8) = v6;
  }
  return a1;
}

uint64_t Phase::StringId::operator=(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a1 + 16)) {
    free(*(void **)(a1 + 8));
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = &str_33;
  *(unsigned char *)(a1 + 16) = 1;
  size_t v4 = *(const char **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  int v5 = *(unsigned __int8 *)(a2 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  if (!v5)
  {
    size_t v6 = strlen(v4);
    int v7 = malloc_type_malloc(v6 + 1, 0xE46A21D0uLL);
    memcpy(v7, v4, v6);
    *((unsigned char *)v7 + v6) = 0;
    size_t v4 = (const char *)v7;
  }
  *(void *)(a1 + 8) = v4;
  return a1;
}

unint64_t Phase::StringPool::GetString(Phase::StringPool *this, unint64_t a2)
{
  uint64_t v2 = *((void *)this + 1);
  unint64_t v3 = a2 % *(void *)this;
  if (*(void *)(v2 + 24 * v3) == a2)
  {
LABEL_4:
    unint64_t v4 = *(unsigned int *)(v2 + 24 * v3 + 8);
    if (*((void *)this + 2) > v4) {
      return *((void *)this + 3) + v4;
    }
  }
  else
  {
    while (1)
    {
      unint64_t v3 = *(unsigned int *)(v2 + 24 * v3 + 12);
      if (v3 == 0x7FFFFFFF) {
        break;
      }
      if (*(void *)(v2 + 24 * v3) == a2) {
        goto LABEL_4;
      }
    }
  }
  return 0;
}

void Phase::BuildStringPool()
{
}

void sub_222083308(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11 = a10;
  a10 = 0;
  if (v11) {
    std::default_delete<Phase::StringPool>::operator()[abi:ne180100]((uint64_t)&a10, v11);
  }
  _Unwind_Resume(exception_object);
}

void Phase::DspLayer::SubmixGain::GetNewRegistryEntry(Phase::DspLayer::SubmixGain *this)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v1 = (char *)malloc_type_malloc(0x188uLL, 0x1050040B063AAFAuLL);
  *(void *)uint64_t v1 = "Interpolation Duration";
  *((void *)v1 + 1) = 0x500000000;
  *(void *)(v1 + 2std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = 0x100000000;
  *((_DWORD *)v1 + 7) = 3;
  *((_OWORD *)v1 + 2) = xmmword_2220E7D60;
  *((void *)v1 + 6) = 0x3F91111120000000;
  *((void *)v1 + 7) = "Session Fade Duration";
  *((void *)v1 + 8) = 0x500000001;
  *(void *)(v1 + 76) = 0x100000000;
  *((_DWORD *)v1 + 21) = 3;
  *(_OWORD *)(v1 + 88) = xmmword_2220E7D60;
  *((void *)v1 + 1objc_destroyWeak(this + 3) = 0x3FE6666660000000;
  *((void *)v1 + 14) = "Submix Gain";
  *((void *)v1 + 1std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear(this + 5) = 0x500000002;
  *(void *)(v1 + 132) = 0x100000000;
  *((_DWORD *)v1 + 3std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear(this + 5) = 3;
  *((_OWORD *)v1 + 9) = xmmword_2220A4F90;
  *((void *)v1 + 2std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = 0x3FF0000000000000;
  *((void *)v1 + 21) = "Session Mute";
  *((void *)v1 + 22) = 0x500000003;
  *(void *)(v1 + 188) = 0x100000000;
  *((_DWORD *)v1 + 49) = 3;
  *(_OWORD *)(v1 + 20std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = xmmword_2220A4F90;
  *((void *)v1 + Phase::SortedCommandQueue<Phase::SpatialModeler::PriorityQueue,Phase::SpatialModeler::PriorityQueueCommandType,std::variant<std::monostate,Phase::SpatialModeler::PriorityQueueEntry,Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueClusterIndexUpdate,Phase::SpatialModeler::PriorityQueueGlobals>>::ClearCommands(this + 27) = 0x3FF0000000000000;
  *((void *)v1 + 28) = "Session Fade Start";
  *((void *)v1 + 29) = 0x500000004;
  *(void *)(v1 + 244) = 0x100000000;
  *((_DWORD *)v1 + 6objc_destroyWeak(this + 3) = 3;
  *((_OWORD *)v1 + 16) = xmmword_2220A4F90;
  *((void *)v1 + 34) = 0x3FF0000000000000;
  *((void *)v1 + 3std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear(this + 5) = "Session Fade";
  *((void *)v1 + 36) = 0x500000005;
  *((_DWORD *)v1 + 7std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear(this + 5) = 0;
  *((void *)v1 + 38) = 0x300000001;
  *((void *)v1 + 39) = 0;
  __asm { FMOV            V2.2D, #1.0 }
  *((_OWORD *)v1 + 2std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = _Q2;
  *((void *)v1 + 42) = "Session Gain";
  *((void *)v1 + 4objc_destroyWeak(this + 3) = 0x500000006;
  *((_DWORD *)v1 + 89) = 0;
  *((void *)v1 + 4std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear(this + 5) = 0x300000001;
  *((_OWORD *)v1 + 2objc_destroyWeak(this + 3) = xmmword_2220A4F90;
  *((void *)v1 + 48) = 0x3FF0000000000000;
  operator new();
}

void sub_22208361C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Phase::DspLayer::SubmixGain::~SubmixGain(Phase::DspLayer::SubmixGain *this)
{
  Phase::DspLayer::VoicePool::~VoicePool(this);

  JUMPOUT(0x223C938A0);
}

void anonymous namespace'::SubmixGainSlice::~SubmixGainSlice(_anonymous_namespace_::SubmixGainSlice *this)
{
}

double anonymous namespace'::SubmixGainSlice::Reset(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v16 = *MEMORY[0x263EF8340];
  *(int32x4_t *)(a1 + 16) = vdupq_n_s32(0x3C888889u);
  *(int32x4_t *)(a1 + 32) = vdupq_n_s32(0x3F333333u);
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)(a1 + 48) = _Q0;
  *(_OWORD *)(a1 + 64) = _Q0;
  *(_OWORD *)(a1 + 8std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = _Q0;
  *(_OWORD *)(a1 + 96) = _Q0;
  *(_OWORD *)(a1 + 112) = _Q0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 424std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(a1 + 4256) = 0u;
  *(_OWORD *)(a1 + 4272) = 0u;
  *(_OWORD *)(a1 + 4288) = 0u;
  *(_OWORD *)(a1 + 8624) = 0u;
  *(_OWORD *)(a1 + 864std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(a1 + 8656) = 0u;
  *(_OWORD *)(a1 + 8672) = 0u;
  *(_OWORD *)(a1 + 8688) = 0u;
  *(_OWORD *)(a1 + 8704) = 0u;
  *(_OWORD *)(a1 + 872std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(a1 + 8736) = 0u;
  long long v14 = _Q0;
  long long v15 = xmmword_2220A4FB0;
  do
  {
    *(_DWORD *)(a1 + 8624 + 4 * *(int *)((char *)&v14 + v2 + 16)) = *(_DWORD *)((char *)&v14 + v2);
    v2 += 4;
  }
  while (v2 != 16);
  uint64_t v8 = 0;
  long long v15 = xmmword_2220A4FB0;
  long long v14 = 0uLL;
  do
  {
    *(_DWORD *)(a1 + 8640 + 4 * *(int *)((char *)&v14 + v8 + 16)) = *(_DWORD *)((char *)&v14 + v8);
    v8 += 4;
  }
  while (v8 != 16);
  uint64_t v9 = 0;
  long long v14 = _Q0;
  long long v15 = xmmword_2220A4FB0;
  do
  {
    *(_DWORD *)(a1 + 8656 + 4 * *(int *)((char *)&v14 + v9 + 16)) = *(_DWORD *)((char *)&v14 + v9);
    v9 += 4;
  }
  while (v9 != 16);
  uint64_t v10 = 0;
  long long v15 = xmmword_2220A4FB0;
  long long v14 = 0uLL;
  do
  {
    *(_DWORD *)(a1 + 8672 + 4 * *(int *)((char *)&v14 + v10 + 16)) = *(_DWORD *)((char *)&v14 + v10);
    v10 += 4;
  }
  while (v10 != 16);
  uint64_t v11 = 0;
  long long v14 = _Q0;
  long long v15 = xmmword_2220A4FB0;
  do
  {
    *(_DWORD *)(a1 + 8720 + 4 * *(int *)((char *)&v14 + v11 + 16)) = *(_DWORD *)((char *)&v14 + v11);
    v11 += 4;
  }
  while (v11 != 16);
  uint64_t v12 = 0;
  long long v15 = xmmword_2220A4FB0;
  long long v14 = 0uLL;
  do
  {
    *(_DWORD *)(a1 + 8736 + 4 * *(int *)((char *)&v14 + v12 + 16)) = *(_DWORD *)((char *)&v14 + v12);
    v12 += 4;
  }
  while (v12 != 16);
  (*(void (**)(uint64_t))(*(void *)a1 + 48))(a1);
  double result = 0.0;
  *(_OWORD *)(a1 + 8768) = 0u;
  *(_OWORD *)(a1 + 8752) = 0u;
  return result;
}

uint64_t anonymous namespace'::SubmixGainSlice::Reset(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7 = (_DWORD *)(a1 + 4 * a3);
  v7[4] = 1015580809;
  v7[8] = 1060320051;
  v7[12] = 1065353216;
  v7[16] = 1065353216;
  v7[20] = 1065353216;
  v7[24] = 1065353216;
  v7[28] = 1065353216;
  v7[32] = 0;
  v7[1060] = 0;
  v7[1064] = 0;
  v7[1068] = 0;
  v7[1072] = 0;
  v7[2172] = 0;
  v7[2176] = 0;
  v7[2156] = 1065353216;
  v7[2160] = 0;
  v7[2164] = 1065353216;
  v7[2168] = 0;
  v7[2180] = 1065353216;
  v7[2184] = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  *(void *)(a1 + 8 * a3 + 8752) = a4;
  return result;
}

double anonymous namespace'::SubmixGainSlice::GetParameter(_anonymous_namespace_::SubmixGainSlice *this, int a2, int a3)
{
  switch(a2)
  {
    case 0:
      unint64_t v3 = (float *)((char *)this + 4 * a3 + 16);
      goto LABEL_9;
    case 1:
      unint64_t v3 = (float *)((char *)this + 4 * a3 + 32);
      goto LABEL_9;
    case 2:
      unint64_t v3 = (float *)((char *)this + 4 * a3 + 48);
      goto LABEL_9;
    case 3:
      unint64_t v3 = (float *)((char *)this + 4 * a3 + 64);
      goto LABEL_9;
    case 4:
      unint64_t v3 = (float *)((char *)this + 4 * a3 + 80);
      goto LABEL_9;
    case 5:
      unint64_t v3 = (float *)((char *)this + 4 * a3 + 96);
      goto LABEL_9;
    case 6:
      unint64_t v3 = (float *)((char *)this + 4 * a3 + 112);
LABEL_9:
      double result = *v3;
      break;
    default:
      return result;
  }
  return result;
}

float anonymous namespace'::SubmixGainSlice::SetParameter(_anonymous_namespace_::SubmixGainSlice *this, int a2, int a3, double a4)
{
  switch(a2)
  {
    case 0:
      *(float *)&a4 = a4;
      *((_DWORD *)this + a3 + 4) = LODWORD(a4);
      break;
    case 1:
      *(float *)&a4 = a4;
      *((_DWORD *)this + a3 + 8) = LODWORD(a4);
      break;
    case 2:
      *(float *)&a4 = a4;
      *((_DWORD *)this + a3 + 12) = LODWORD(a4);
      break;
    case 3:
      *(float *)&a4 = a4;
      *((_DWORD *)this + a3 + 16) = LODWORD(a4);
      break;
    case 4:
      *(float *)&a4 = a4;
      *((_DWORD *)this + a3 + 2std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = LODWORD(a4);
      break;
    case 5:
      *(float *)&a4 = a4;
      *((_DWORD *)this + a3 + 24) = LODWORD(a4);
      break;
    case 6:
      *(float *)&a4 = a4;
      *((_DWORD *)this + a3 + 28) = LODWORD(a4);
      break;
    default:
      return *(float *)&a4;
  }
  return *(float *)&a4;
}

__n128 anonymous namespace'::SubmixGainSlice::UpdateParameters(uint64_t a1, uint64_t a2)
{
  float32x4_t v3 = *(float32x4_t *)(a1 + 16);
  float32x4_t v4 = vdivq_f32((float32x4_t)vdupq_n_s32(0x40C90FDBu), v3);
  float32x4_t v10 = vmulq_f32(v4, v4);
  float32x4_t v11 = vdivq_f32((float32x4_t)vdupq_n_s32(0x41490FDBu), v3);
  long long v8 = *(_OWORD *)(a1 + 48);
  long long v12 = *(_OWORD *)(a1 + 64);
  long long v13 = *(_OWORD *)(a1 + 4240);
  long long v15 = *(_OWORD *)(a1 + 4256);
  int v5 = (const float *)(a2 + 8);
  float32x4_t v6 = vld1q_dup_f32(v5);
  float32x4_t v16 = vdivq_f32(v6, *(float32x4_t *)(a1 + 32));
  long long v17 = *(_OWORD *)(a1 + 4272);
  float32x4_t v9 = *(float32x4_t *)(a1 + 96);
  float32x4_t v14 = *(float32x4_t *)(a1 + 80);
  long long v18 = *(_OWORD *)(a1 + 112);
  __n128 v19 = *(__n128 *)(a1 + 4288);
  memcpy((void *)(a1 + 4304), (const void *)(a1 + 128), 0x1010uLL);
  *(float32x4_t *)(a1 + 8416) = v10;
  *(_OWORD *)(a1 + 8432) = v8;
  *(float32x4_t *)(a1 + 8448) = v11;
  *(_OWORD *)(a1 + 8464) = v13;
  *(_OWORD *)(a1 + 848std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = v12;
  *(_OWORD *)(a1 + 8496) = v15;
  *(float32x4_t *)(a1 + 8512) = v9;
  *(float32x4_t *)(a1 + 8528) = v16;
  *(_OWORD *)(a1 + 8544) = v17;
  *(float32x4_t *)(a1 + 856std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = v14;
  *(float32x4_t *)(a1 + 8576) = vsubq_f32(v9, v14);
  *(_OWORD *)(a1 + 8592) = v18;
  __n128 result = v19;
  *(__n128 *)(a1 + 8608) = v19;
  return result;
}

uint64_t anonymous namespace'::SubmixGainSlice::UpdateParameters(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3 = result + 4 * a3;
  float v4 = *(float *)(v3 + 16);
  int v5 = *(_DWORD *)(v3 + 48);
  int v6 = *(_DWORD *)(v3 + 64);
  int v7 = *(_DWORD *)(v3 + 112);
  if (v4 >= 0.001)
  {
    *(float *)(v3 + 8416) = (float)(6.2832 / v4) * (float)(6.2832 / v4);
    *(float *)(v3 + 8448) = 12.566 / v4;
  }
  else
  {
    *(_DWORD *)(v3 + 864std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = 0;
    *(_DWORD *)(v3 + 8624) = v5;
    *(_DWORD *)(v3 + 8672) = 0;
    *(_DWORD *)(v3 + 8656) = v6;
    *(_DWORD *)(v3 + 8736) = 0;
    *(_DWORD *)(v3 + 872std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = v7;
  }
  uint64_t v8 = result + 4 * a3;
  int v9 = *(_DWORD *)(v8 + 4240);
  int v10 = *(_DWORD *)(v8 + 4256);
  float v11 = *(float *)(v8 + 96);
  float v12 = *(float *)(v8 + 32);
  float v13 = *(float *)(a2 + 8);
  int v14 = *(_DWORD *)(v8 + 4272);
  float v15 = *(float *)(v8 + 80);
  int v16 = *(_DWORD *)(v8 + 4288);
  uint64_t v17 = *(unsigned int *)(v8 + 128);
  *(_DWORD *)(v8 + 4304) = v17;
  if ((int)v17 >= 1)
  {
    long long v18 = (_DWORD *)(result + 4 * a3);
    do
    {
      v18[1080] = v18[36];
      v18[1084] = v18[40];
      v18 += 8;
      --v17;
    }
    while (v17);
  }
  *(_DWORD *)(v8 + 8432) = v5;
  *(_DWORD *)(v8 + 8464) = v9;
  *(_DWORD *)(v8 + 848std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = v6;
  *(_DWORD *)(v8 + 8496) = v10;
  *(float *)(v8 + 8512) = v11;
  *(float *)(v8 + 8528) = v13 / v12;
  *(_DWORD *)(v8 + 8544) = v14;
  *(float *)(v8 + 856std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = v15;
  *(float *)(v8 + 8576) = v11 - v15;
  *(_DWORD *)(v8 + 8592) = v7;
  *(_DWORD *)(v8 + 8608) = v16;
  return result;
}

uint64_t anonymous namespace'::SubmixGainSlice::Run(uint64_t result, uint64_t a2, uint64_t a3, unsigned int a4)
{
  float32x4_t v4 = *(float32x4_t *)(result + 8416);
  float32x4_t v5 = *(float32x4_t *)(result + 8640);
  float32x4_t v6 = *(float32x4_t *)(result + 8624);
  float32x4_t v9 = vsubq_f32(*(float32x4_t *)(result + 8432), v6);
  float32x4_t v7 = vnegq_f32(*(float32x4_t *)(result + 8448));
  float32x4_t v8 = vmlaq_f32(vmulq_f32(v5, v7), v9, v4);
  v9.i32[0] = *(_DWORD *)(a2 + 8);
  float32x4_t v10 = vmlaq_n_f32(v5, v8, v9.f32[0]);
  float32x4_t v11 = vmlaq_n_f32(v6, v10, v9.f32[0]);
  int32x4_t v12 = (int32x4_t)vandq_s8(*(int8x16_t *)(result + 4304), (int8x16_t)vcgtq_s32(vdupq_n_s32(a4), (int32x4_t)xmmword_2220A5190));
  int64x2_t v13 = (int64x2_t)vcgtzq_s32(v12);
  if (vorrq_s8((int8x16_t)vdupq_laneq_s64(v13, 1), (int8x16_t)v13).u64[0])
  {
    uint64_t v14 = *(void *)(a2 + 56);
    float v15 = (float32x4_t *)(result + 4336);
    float32x4_t v16 = 0uLL;
    int32x4_t v17 = 0uLL;
    v18.i64[0] = 0x100000001;
    v18.i64[1] = 0x100000001;
    do
    {
      v19.i32[0] = *(_DWORD *)(v14 + 4 * v15[-1].i32[0]);
      v19.i32[1] = *(_DWORD *)(v14 + 4 * v15[-1].i32[1]);
      v19.i32[2] = *(_DWORD *)(v14 + 4 * v15[-1].i32[2]);
      v19.i32[3] = *(_DWORD *)(v14 + 4 * v15[-1].i32[3]);
      float32x4_t v16 = vmlaq_f32(v16, (float32x4_t)vandq_s8((int8x16_t)v13, v19), *v15);
      int32x4_t v17 = vaddq_s32(v17, v18);
      int64x2_t v13 = (int64x2_t)vcgtq_s32(v12, v17);
      v15 += 2;
    }
    while (vorrq_s8((int8x16_t)vdupq_laneq_s64(v13, 1), (int8x16_t)v13).u64[0]);
  }
  else
  {
    float32x4_t v16 = 0uLL;
  }
  float32x4_t v20 = *(float32x4_t *)(result + 8480);
  float32x4_t v21 = *(float32x4_t *)(result + 8512);
  float32x4_t v22 = *(float32x4_t *)(result + 8528);
  float32x4_t v23 = *(float32x4_t *)(result + 8560);
  float32x4_t v24 = *(float32x4_t *)(result + 8576);
  float32x4_t v25 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 0);
  float32x4_t v26 = *(float32x4_t *)(result + 8592);
  float32x4_t v27 = vmulq_f32(v11, v16);
  HIDWORD(v29) = a4 - 1;
  LODWORD(v29) = a4 - 1;
  int v28 = v29 >> 1;
  int8x16_t v30 = vandq_s8((int8x16_t)v27, vorrq_s8((int8x16_t)vcltzq_f32(v27), (int8x16_t)vcgezq_f32(v27)));
  switch(v28)
  {
    case 0:
      goto LABEL_10;
    case 1:
      goto LABEL_9;
    case 3:
      goto LABEL_8;
    case 7:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8476)) = v30.i32[3];
LABEL_8:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8472)) = v30.i32[2];
LABEL_9:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8468)) = v30.i32[1];
LABEL_10:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8464)) = v30.i32[0];
      uint64_t v31 = (const float *)(a2 + 8);
      float32x4_t v25 = vld1q_dup_f32(v31);
      break;
    default:
      break;
  }
  float32x4_t v32 = *(float32x4_t *)(result + 8656);
  float32x4_t v33 = vmlaq_f32(*(float32x4_t *)(result + 8672), v25, vmlaq_f32(vmulq_f32(*(float32x4_t *)(result + 8672), v7), vsubq_f32(v20, v32), v4));
  float32x4_t v34 = vmlaq_f32(v32, v25, v33);
  float32x4_t v35 = vmulq_f32(v27, v34);
  int8x16_t v36 = vandq_s8((int8x16_t)v35, vorrq_s8((int8x16_t)vcltzq_f32(v35), (int8x16_t)vcgezq_f32(v35)));
  switch(v28)
  {
    case 0:
      goto LABEL_15;
    case 1:
      goto LABEL_14;
    case 3:
      goto LABEL_13;
    case 7:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8508)) = v36.i32[3];
LABEL_13:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8504)) = v36.i32[2];
LABEL_14:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8500)) = v36.i32[1];
LABEL_15:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8496)) = v36.i32[0];
      break;
    default:
      break;
  }
  __asm { FMOV            V20.4S, #1.0 }
  float32x4_t v42 = (float32x4_t)vandq_s8((int8x16_t)vminnmq_f32(vaddq_f32(v22, *(float32x4_t *)(result + 8704)), _Q20), (int8x16_t)vceqq_f32(v21, *(float32x4_t *)(result + 8688)));
  float32x4_t v43 = vmulq_f32(v35, vmlaq_f32(v23, v24, v42));
  int8x16_t v44 = vandq_s8((int8x16_t)v43, vorrq_s8((int8x16_t)vcltzq_f32(v43), (int8x16_t)vcgezq_f32(v43)));
  switch(v28)
  {
    case 0:
      goto LABEL_20;
    case 1:
      goto LABEL_19;
    case 3:
      goto LABEL_18;
    case 7:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 85Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Collection::~Collection((Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Collection *)(this + 56)) = v44.i32[3];
LABEL_18:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8552)) = v44.i32[2];
LABEL_19:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8548)) = v44.i32[1];
LABEL_20:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8544)) = v44.i32[0];
      break;
    default:
      break;
  }
  float32x4_t v45 = *(float32x4_t *)(result + 8736);
  float32x4_t v46 = *(float32x4_t *)(result + 8720);
  float32x4_t v47 = vmlaq_f32(vmulq_f32(v45, v7), vsubq_f32(v26, v46), v4);
  float v48 = *(float *)(a2 + 8);
  float32x4_t v49 = vmlaq_n_f32(v45, v47, v48);
  float32x4_t v50 = vmlaq_n_f32(v46, v49, v48);
  float32x4_t v51 = vmulq_f32(v43, v50);
  int8x16_t v52 = vandq_s8((int8x16_t)v51, vorrq_s8((int8x16_t)vcltzq_f32(v51), (int8x16_t)vcgezq_f32(v51)));
  switch(v28)
  {
    case 0:
      goto LABEL_25;
    case 1:
      goto LABEL_24;
    case 3:
      goto LABEL_23;
    case 7:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8620)) = v52.i32[3];
LABEL_23:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8616)) = v52.i32[2];
LABEL_24:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8612)) = v52.i32[1];
LABEL_25:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8608)) = v52.i32[0];
      break;
    default:
      break;
  }
  *(float32x4_t *)(result + 8624) = v11;
  *(float32x4_t *)(result + 864std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = v10;
  *(float32x4_t *)(result + 8656) = v34;
  *(float32x4_t *)(result + 8672) = v33;
  *(float32x4_t *)(result + 8688) = v21;
  *(float32x4_t *)(result + 8704) = v42;
  *(float32x4_t *)(result + 872std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = v50;
  *(float32x4_t *)(result + 8736) = v49;
  return result;
}

float anonymous namespace'::SubmixGainSlice::CopyVoiceState(_anonymous_namespace_::SubmixGainSlice *this, Phase::DspLayer::VoicePoolSlice *a2, unsigned int a3, unsigned int a4)
{
  float32x4_t v4 = (_DWORD *)((char *)a2 + 4 * (int)a3);
  float32x4_t v5 = (_DWORD *)((char *)this + 4 * (int)a4);
  v5[4] = v4[4];
  v5[8] = v4[8];
  v5[12] = v4[12];
  v5[16] = v4[16];
  v5[20] = v4[20];
  v5[24] = v4[24];
  v5[28] = v4[28];
  uint64_t v6 = v4[32];
  v5[32] = v6;
  if ((int)v6 >= 1)
  {
    float32x4_t v7 = (_DWORD *)((char *)this + 4 * (int)a4 + 160);
    float32x4_t v8 = (int *)((char *)a2 + 4 * (int)a3 + 160);
    do
    {
      *(v7 - 4) = *(v8 - 4);
      int v9 = *v8;
      v8 += 8;
      _DWORD *v7 = v9;
      v7 += 8;
      --v6;
    }
    while (v6);
  }
  float32x4_t v10 = (_DWORD *)((char *)this + 4 * (int)a4);
  float32x4_t v11 = (_DWORD *)((char *)a2 + 4 * (int)a3);
  uint64_t v12 = v11[1076];
  v10[1076] = v12;
  if ((int)v12 >= 1)
  {
    int64x2_t v13 = v10 + 1084;
    uint64_t v14 = v11 + 1084;
    do
    {
      *(v13 - 4) = *(v14 - 4);
      int v15 = *v14;
      v14 += 8;
      _DWORD *v13 = v15;
      v13 += 8;
      --v12;
    }
    while (v12);
  }
  v10[1060] = v11[1060];
  v10[1064] = v11[1064];
  v10[1068] = v11[1068];
  v10[1072] = v11[1072];
  v10[2104] = v11[2104];
  v10[2108] = v11[2108];
  v10[2112] = v11[2112];
  v10[2116] = v11[2116];
  v10[2120] = v11[2120];
  v10[2124] = v11[2124];
  v10[2128] = v11[2128];
  v10[2132] = v11[2132];
  v10[2136] = v11[2136];
  v10[2140] = v11[2140];
  v10[2144] = v11[2144];
  v10[2148] = v11[2148];
  v10[2152] = v11[2152];
  if (a3 >= 4) {
    __assert_rtn("Copy", "DelaylineLinear.hpp", 507, "fromLane >= 0 && fromLane < PHASE_SIMD_WIDTH");
  }
  if (a4 >= 4) {
    __assert_rtn("Copy", "DelaylineLinear.hpp", 508, "toLane >= 0 && toLane < PHASE_SIMD_WIDTH");
  }
  float32x4_t v16 = (char *)a2 + 4 * a3;
  int32x4_t v17 = (char *)this + 4 * a4;
  *((_DWORD *)v17 + 2156) = *((_DWORD *)v16 + 2156);
  *((_DWORD *)v17 + 216std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = *((_DWORD *)v16 + 2160);
  *((_DWORD *)v17 + 2164) = *((_DWORD *)v16 + 2164);
  *((_DWORD *)v17 + 2168) = *((_DWORD *)v16 + 2168);
  *((_DWORD *)v17 + 2172) = *((_DWORD *)v16 + 2172);
  *((_DWORD *)v17 + 2176) = *((_DWORD *)v16 + 2176);
  *((_DWORD *)v17 + 218std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = *((_DWORD *)v16 + 2180);
  float result = *((float *)v16 + 2184);
  *((float *)v17 + 2184) = result;
  *((void *)this + (int)a4 + 1094) = *((void *)a2 + (int)a3 + 1094);
  return result;
}

uint64_t anonymous namespace'::SubmixGainSlice::AddInput(_anonymous_namespace_::SubmixGainSlice *this, int a2, int a3, int a4, float a5)
{
  if (a2) {
    return 8;
  }
  float32x4_t v7 = (char *)this + 128;
  uint64_t v8 = *((int *)this + a3 + 32);
  if ((int)v8 > 127) {
    return 6;
  }
  uint64_t result = 0;
  int v9 = (char *)this + 32 * v8 + 4 * a3;
  *((_DWORD *)v9 + 36) = a4;
  *((float *)v9 + 4std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = a5;
  *(_DWORD *)&v7[4 * a3] = v8 + 1;
  return result;
}

uint64_t anonymous namespace'::SubmixGainSlice::RemoveInput(_anonymous_namespace_::SubmixGainSlice *this, int a2, int a3, int a4)
{
  if (a2) {
    return 8;
  }
  else {
    return Phase::DspLayer::VoiceConnectionList<128>::RemoveConnection((uint64_t)this + 128, a3, a4);
  }
}

uint64_t anonymous namespace'::SubmixGainSlice::SetInputGain(_anonymous_namespace_::SubmixGainSlice *this, int a2, int a3, int a4, float a5)
{
  if (a2) {
    return 8;
  }
  uint64_t v6 = *((unsigned int *)this + a3 + 32);
  if ((int)v6 < 1) {
    return 7;
  }
  uint64_t v7 = 0;
  for (uint64_t i = (float *)((char *)this + 4 * a3 + 160); *((_DWORD *)i - 4) != a4; i += 8)
  {
    if (v6 == ++v7) {
      return 7;
    }
  }
  if ((v7 & 0x80000000) != 0) {
    return 7;
  }
  uint64_t result = 0;
  *uint64_t i = a5;
  return result;
}

void anonymous namespace'::SubmixGainSlice::GetInputs(_anonymous_namespace_::SubmixGainSlice *this@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (a2)
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    Phase::DspLayer::VoiceConnectionList<128>::GetConnections((uint64_t)this + 128, a3, (char **)a4);
  }
}

uint64_t anonymous namespace'::SubmixGainSlice::ClearInputs(_anonymous_namespace_::SubmixGainSlice *this, int a2)
{
  *((_DWORD *)this + a2 + 32) = 0;
  return 0;
}

uint64_t anonymous namespace'::SubmixGainSlice::GetMaximumInputConnectionCount(_anonymous_namespace_::SubmixGainSlice *this, int a2)
{
  return (a2 == 0) << 7;
}

unint64_t anonymous namespace'::SubmixGainSlice::GetOutput(_anonymous_namespace_::SubmixGainSlice *this, int a2, int a3)
{
  switch(a2)
  {
    case 0:
      uint64_t v3 = (char *)this + 4 * a3;
      uint64_t v4 = 4240;
      goto LABEL_7;
    case 1:
      uint64_t v3 = (char *)this + 4 * a3;
      uint64_t v4 = 4256;
      goto LABEL_7;
    case 2:
      uint64_t v3 = (char *)this + 4 * a3;
      uint64_t v4 = 4272;
      goto LABEL_7;
    case 3:
      uint64_t v3 = (char *)this + 4 * a3;
      uint64_t v4 = 4288;
LABEL_7:
      unint64_t result = (unint64_t)*(unsigned int *)&v3[v4] << 32;
      break;
    default:
      unint64_t result = 0xFFFFFFFF00000008;
      break;
  }
  return result;
}

uint64_t anonymous namespace'::SubmixGainSlice::SetOutput(_anonymous_namespace_::SubmixGainSlice *this, int a2, int a3, int a4)
{
  switch(a2)
  {
    case 0:
      uint64_t v4 = (char *)this + 4 * a3;
      uint64_t v5 = 4240;
      goto LABEL_7;
    case 1:
      uint64_t v4 = (char *)this + 4 * a3;
      uint64_t v5 = 4256;
      goto LABEL_7;
    case 2:
      uint64_t v4 = (char *)this + 4 * a3;
      uint64_t v5 = 4272;
      goto LABEL_7;
    case 3:
      uint64_t v4 = (char *)this + 4 * a3;
      uint64_t v5 = 4288;
LABEL_7:
      uint64_t result = 0;
      *(_DWORD *)&v4[v5] = a4;
      break;
    default:
      uint64_t result = 8;
      break;
  }
  return result;
}

void std::__function::__func<Phase::DspLayer::SubmixGain::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::SubmixGain::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::~__func()
{
}

void *std::__function::__func<Phase::DspLayer::SubmixGain::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::SubmixGain::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26D47B050;
  return result;
}

void std::__function::__func<Phase::DspLayer::SubmixGain::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::SubmixGain::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D47B050;
}

void std::__function::__func<Phase::DspLayer::SubmixGain::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::SubmixGain::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::operator()()
{
}

void sub_222084704(_Unwind_Exception *a1)
{
  MEMORY[0x223C938A0](v1, 0x10F1C408EBD29CELL);
  _Unwind_Resume(a1);
}

double Phase::SpatialModeler::GetRoomDataForSpaceBlendTarget(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = 0;
  unint64_t v5 = 0;
  unint64_t v6 = 0;
  uint64_t v41 = *MEMORY[0x263EF8340];
  *(void *)a2 = 0;
  uint64_t v40 = 0;
  memset(v39, 0, sizeof(v39));
  long long v36 = 0u;
  long long v37 = 0u;
  uint64_t v38 = 0;
  do
  {
    if (v6 <= 9)
    {
      unint64_t v5 = v6 + 1;
      *((_DWORD *)&v36 + v6++) = *(_DWORD *)((char *)v39 + v4);
    }
    v4 += 4;
  }
  while (v4 != 40);
  if (v5 <= 9) {
    bzero((char *)&v36 + 4 * v5, 40 - 4 * v5);
  }
  long long v7 = v37;
  *(_OWORD *)(a2 + 8) = v36;
  *(_OWORD *)(a2 + 24) = v7;
  *(void *)(a2 + 4std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = v38;
  uint64_t v8 = *a1;
  if (*a1 <= 0x2FB51A26436E9690)
  {
    if (v8 <= 0x2FB51626436E8FC4)
    {
      if (v8 == 0xB2F0104201709A2BLL)
      {
        unint64_t v10 = 0;
        unint64_t v30 = 0;
        *(int32x2_t *)a2 = vdup_n_s32(0x497423F0u);
        uint64_t v38 = 0;
        long long v36 = 0u;
        long long v37 = 0u;
        uint64_t v31 = 10;
        do
        {
          if (v30 <= 9)
          {
            unint64_t v10 = v30 + 1;
            *((_DWORD *)&v36 + v30++) = 981668463;
          }
          --v31;
        }
        while (v31);
        goto LABEL_80;
      }
      if (v8 == 0x2FB51526436E8E12)
      {
        uint64_t v16 = 0;
        unint64_t v10 = 0;
        unint64_t v17 = 0;
        *(void *)a2 = 0x461C4000459C4000;
        uint64_t v38 = 0;
        long long v36 = 0u;
        long long v37 = 0u;
        do
        {
          if (v17 <= 9)
          {
            unint64_t v10 = v17 + 1;
            *((_DWORD *)&v36 + v17++) = dword_2220E8590[v16];
          }
          ++v16;
        }
        while (v16 != 10);
        goto LABEL_80;
      }
    }
    else
    {
      switch(v8)
      {
        case 0x2FB51626436E8FC5:
          uint64_t v22 = 0;
          unint64_t v10 = 0;
          unint64_t v23 = 0;
          *(void *)a2 = 0x4416000043960000;
          uint64_t v38 = 0;
          long long v36 = 0u;
          long long v37 = 0u;
          do
          {
            if (v23 <= 9)
            {
              unint64_t v10 = v23 + 1;
              *((_DWORD *)&v36 + v23++) = dword_2220E85B8[v22];
            }
            ++v22;
          }
          while (v22 != 10);
          goto LABEL_80;
        case 0x2FB51726436E9178:
          uint64_t v24 = 0;
          unint64_t v10 = 0;
          unint64_t v25 = 0;
          *(void *)a2 = 0x461C4000459C4000;
          uint64_t v38 = 0;
          long long v36 = 0u;
          long long v37 = 0u;
          do
          {
            if (v25 <= 9)
            {
              unint64_t v10 = v25 + 1;
              *((_DWORD *)&v36 + v25++) = dword_2220E8568[v24];
            }
            ++v24;
          }
          while (v24 != 10);
          goto LABEL_80;
        case 0x2FB51926436E94DELL:
          uint64_t v12 = 0;
          unint64_t v10 = 0;
          unint64_t v13 = 0;
          *(void *)a2 = 0x461C4000459C4000;
          uint64_t v38 = 0;
          long long v36 = 0u;
          long long v37 = 0u;
          do
          {
            if (v13 <= 9)
            {
              unint64_t v10 = v13 + 1;
              *((_DWORD *)&v36 + v13++) = dword_2220E8518[v12];
            }
            ++v12;
          }
          while (v12 != 10);
          goto LABEL_80;
      }
    }
LABEL_76:
    unint64_t v10 = 0;
    unint64_t v32 = 0;
    *(void *)a2 = 0x461C4000459C4000;
    uint64_t v38 = 0;
    long long v36 = 0u;
    long long v37 = 0u;
    uint64_t v33 = 10;
    do
    {
      if (v32 <= 9)
      {
        unint64_t v10 = v32 + 1;
        *((_DWORD *)&v36 + v32++) = 1050253722;
      }
      --v33;
    }
    while (v33);
    goto LABEL_80;
  }
  if (v8 > 0x2FB51E26436E9D5CLL)
  {
    switch(v8)
    {
      case 0x2FB8852643718239:
        uint64_t v26 = 0;
        unint64_t v10 = 0;
        unint64_t v27 = 0;
        *(void *)a2 = 0x461C4000459C4000;
        uint64_t v38 = 0;
        long long v36 = 0u;
        long long v37 = 0u;
        do
        {
          if (v27 <= 9)
          {
            unint64_t v10 = v27 + 1;
            *((_DWORD *)&v36 + v27++) = dword_2220E8608[v26];
          }
          ++v26;
        }
        while (v26 != 10);
        goto LABEL_80;
      case 0x2FB8832643717ED3:
        uint64_t v28 = 0;
        unint64_t v10 = 0;
        unint64_t v29 = 0;
        *(void *)a2 = 0x4416000043960000;
        uint64_t v38 = 0;
        long long v36 = 0u;
        long long v37 = 0u;
        do
        {
          if (v29 <= 9)
          {
            unint64_t v10 = v29 + 1;
            *((_DWORD *)&v36 + v29++) = dword_2220E85E0[v28];
          }
          ++v28;
        }
        while (v28 != 10);
        goto LABEL_80;
      case 0x2FB51E26436E9D5DLL:
        uint64_t v14 = 0;
        unint64_t v10 = 0;
        unint64_t v15 = 0;
        *(void *)a2 = 0x461C4000459C4000;
        uint64_t v38 = 0;
        long long v36 = 0u;
        long long v37 = 0u;
        do
        {
          if (v15 <= 9)
          {
            unint64_t v10 = v15 + 1;
            *((_DWORD *)&v36 + v15++) = dword_2220E85E0[v14];
          }
          ++v14;
        }
        while (v14 != 10);
        goto LABEL_80;
    }
    goto LABEL_76;
  }
  switch(v8)
  {
    case 0x2FB51A26436E9691:
      uint64_t v18 = 0;
      unint64_t v10 = 0;
      unint64_t v19 = 0;
      *(void *)a2 = 0x461C4000459C4000;
      uint64_t v38 = 0;
      long long v36 = 0u;
      long long v37 = 0u;
      do
      {
        if (v19 <= 9)
        {
          unint64_t v10 = v19 + 1;
          *((_DWORD *)&v36 + v19++) = dword_2220E8540[v18];
        }
        ++v18;
      }
      while (v18 != 10);
      break;
    case 0x2FB51B26436E9844:
      uint64_t v20 = 0;
      unint64_t v10 = 0;
      unint64_t v21 = 0;
      *(void *)a2 = 0x461C4000459C4000;
      uint64_t v38 = 0;
      long long v36 = 0u;
      long long v37 = 0u;
      do
      {
        if (v21 <= 9)
        {
          unint64_t v10 = v21 + 1;
          *((_DWORD *)&v36 + v21++) = dword_2220E84C8[v20];
        }
        ++v20;
      }
      while (v20 != 10);
      break;
    case 0x2FB51C26436E99F7:
      uint64_t v9 = 0;
      unint64_t v10 = 0;
      unint64_t v11 = 0;
      *(void *)a2 = 0x461C4000459C4000;
      uint64_t v38 = 0;
      long long v36 = 0u;
      long long v37 = 0u;
      do
      {
        if (v11 <= 9)
        {
          unint64_t v10 = v11 + 1;
          *((_DWORD *)&v36 + v11++) = dword_2220E84F0[v9];
        }
        ++v9;
      }
      while (v9 != 10);
      break;
    default:
      goto LABEL_76;
  }
LABEL_80:
  if (v10 <= 9) {
    bzero((char *)&v36 + 4 * v10, 40 - 4 * v10);
  }
  double result = *(double *)&v36;
  long long v35 = v37;
  *(_OWORD *)(a2 + 8) = v36;
  *(_OWORD *)(a2 + 24) = v35;
  *(void *)(a2 + 4std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = v38;
  return result;
}

float Phase::SpatialModeler::TailCorrection::sMaxEnergyCorrectionFactor(Phase::SpatialModeler::TailCorrection *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)qword_267F77C20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(qword_267F77C20))
  {
    _MergedGlobals_22 = 1098749243;
    __cxa_guard_release(qword_267F77C20);
  }
  return *(float *)&_MergedGlobals_22;
}

BOOL Phase::SpatialModeler::TailCorrection::validConfig(Phase::SpatialModeler::TailCorrection *this, const Phase::SpatialModeler::RayTracerState *a2)
{
  BOOL result = 0;
  if (*((float *)this + 4878) > 0.0 && *((float *)this + 28) > 0.0 && *((float *)this + 116) > 0.0)
  {
    uint64_t v4 = (float *)((char *)this + 19776);
    if (*((_DWORD *)v4 + 31))
    {
      BOOL result = 0;
      if (*((_DWORD *)v4 + 63))
      {
        if (*v4 > 0.0) {
          return v4[32] > 0.0;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t Phase::SpatialModeler::TailCorrection::prepareEDC(void **this, unsigned int a2)
{
  uint64_t v2 = *this;
  if (*this && v2[7] > a2)
  {
    std::vector<float>::resize((uint64_t)(this + 4), v2[6]);
    bzero(this[4], 4 * *((unsigned int *)*this + 6));
    this[10] = (void *)0xFFFFFFFFLL;
    float v5 = __exp10f(-0.2);
    unint64_t v6 = (float *)*this;
    if (*this)
    {
      if (*((_DWORD *)v6 + 7) > a2)
      {
        float v7 = v5;
        Phase::SpatialModeler::EnergyHistogram::getTemporalEnergyEnvelope_Band((Phase::SpatialModeler::EnergyHistogram *)*this, a2, __p);
        uint64_t v8 = (float *)__p[0];
        unint64_t v6 = (float *)*this;
        float v9 = *((float *)this + 21);
        unsigned int v10 = *((_DWORD *)*this + 6);
        if (v10)
        {
          for (unint64_t i = 0; i < v10; ++i)
          {
            float v12 = v8[i];
            if (v12 > v9)
            {
              *((_DWORD *)this + 2std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = i;
              *((float *)this + 21) = v12;
              unsigned int v10 = *((_DWORD *)v6 + 6);
              float v9 = v12;
            }
          }
        }
        float v13 = v7 * v9;
        uint64_t v14 = (int)(v10 - 1);
        while ((int)v14 > *((_DWORD *)this + 20))
        {
          float v15 = v8[v14--];
          --v10;
          if (v15 >= v13)
          {
            *((_DWORD *)this + 2std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = v10;
            *((float *)this + 21) = v15;
            goto LABEL_17;
          }
        }
        if (!v8) {
          goto LABEL_18;
        }
LABEL_17:
        __p[1] = v8;
        operator delete(v8);
        unint64_t v6 = (float *)*this;
      }
LABEL_18:
      unsigned int v16 = *((_DWORD *)this + 20);
      if ((v16 & 0x80000000) != 0)
      {
        this[10] = (void *)0xFFFFFFFFLL;
        if (!v6 || *((_DWORD *)v6 + 7) <= a2) {
          return 0;
        }
        float v29 = v6[10];
        if (v6[5] <= v29) {
          unsigned int v16 = -1;
        }
        else {
          unsigned int v16 = vcvtms_s32_f32(v29 / v6[4]);
        }
        *((_DWORD *)this + 2std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = v16;
        float v30 = 1.0;
        if (v29 > 0.0) {
          float v30 = 1.0 / (float)((float)(v29 * 343.0) * (float)(v29 * 343.0));
        }
        *((float *)this + 21) = v30;
        if ((v16 & 0x80000000) != 0) {
          return 0;
        }
      }
    }
    else
    {
      unsigned int v16 = *((_DWORD *)this + 20);
      if ((v16 & 0x80000000) != 0)
      {
        uint64_t result = 0;
        this[10] = (void *)0xFFFFFFFFLL;
        return result;
      }
      unint64_t v6 = 0;
    }
    uint64_t v17 = *((unsigned int *)v6 + 6);
    float v18 = 0.0;
    if (!*((unsigned char *)v6 + 36))
    {
      if (!v17) {
        return 1;
      }
      unint64_t v19 = (float *)(*((void *)v6 + 1) + 4 * a2);
      unsigned int v20 = *((_DWORD *)v6 + 6);
      do
      {
        float v18 = v18 + *v19;
        v19 += *((unsigned int *)v6 + 7);
        --v20;
      }
      while (v20);
    }
    if (v17)
    {
      unint64_t v21 = (float *)this[4];
      unsigned int v22 = *((_DWORD *)v6 + 7);
      uint64_t v23 = v16;
      unsigned int v24 = a2;
      float v25 = v18;
      do
      {
        float v26 = log10f((float)(v25 / v18) + 1.0e-15) * 10.0;
        *unint64_t v21 = v26;
        if (!v23) {
          *((float *)this + 22) = v26;
        }
        float v27 = 0.0;
        if (v22 > a2) {
          float v27 = *(float *)(*((void *)v6 + 1) + 4 * v24);
        }
        float v25 = v25 - v27;
        v24 += v22;
        --v23;
        ++v21;
        --v17;
      }
      while (v17);
    }
    return 1;
  }
  return 0;
}

uint64_t Phase::SpatialModeler::TailCorrection::validHistogramRange(Phase::SpatialModeler::TailCorrection *this, const Phase::SpatialModeler::RayTracerState *a2, int a3, float a4)
{
  unsigned int v5 = *((_DWORD *)a2 + 4754) - *((_DWORD *)a2 + 16);
  if (!v5) {
    return *((unsigned int *)this + 20);
  }
  float v9 = *((float *)a2 + 4878) / ((double)v5 * 3.14159265 * *((float *)a2 + 116) * *((float *)a2 + 29));
  float v10 = logf(1.0 / (float)(sqrtf(v9) * 4.3429)) / 6.9;
  float v11 = fabsf(logf(*((float *)a2 + 26)) * 10.0) / 60.0;
  if (v10 <= v11) {
    float v11 = v10;
  }
  if (v11 < 0.0) {
    float v11 = 0.0;
  }
  unsigned int v12 = (int)(float)((float)(*((float *)a2 + a3 + 4976) * v11) / *((float *)a2 + 28));
  unsigned int v13 = *(_DWORD *)(*(void *)this + 24);
  if (v13 <= v12) {
    return v13 - 1;
  }
  else {
    return v12;
  }
}

float Phase::SpatialModeler::TailCorrection::linearRegression(Phase::SpatialModeler::TailCorrection *this, signed int a2, double a3)
{
  signed int v3 = *((_DWORD *)this + 20);
  if (v3 >= a2) {
    return 3.4028e38;
  }
  unsigned int v4 = 0;
  LODWORD(aobjc_destroyWeak(this + 3) = *(_DWORD *)(*(void *)this + 16);
  uint32x4_t v5 = (uint32x4_t)vdupq_n_s32(a2 - v3);
  int32x4_t v6 = vaddq_s32(vdupq_n_s32(v3), (int32x4_t)xmmword_2220A4FB0);
  float32x4_t v7 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0);
  float v8 = 0.0;
  v9.i64[0] = 0x3F0000003F000000;
  v9.i64[1] = 0x3F0000003F000000;
  v10.i64[0] = 0x8000000080000000;
  v10.i64[1] = 0x8000000080000000;
  v11.i64[0] = 0x400000004;
  v11.i64[1] = 0x400000004;
  do
  {
    int8x16_t v12 = vbslq_s8((int8x16_t)vcgtq_u32((uint32x4_t)vorrq_s8((int8x16_t)vdupq_n_s32(v4), (int8x16_t)xmmword_2220A4FB0), v5), v10, (int8x16_t)vmlaq_f32(vmulq_n_f32(vcvtq_f32_s32(v6), *(float *)&a3), v9, v7));
    float v8 = (float)((float)((float)(v8 + *(float *)v12.i32) + *(float *)&v12.i32[1]) + *(float *)&v12.i32[2])
       + *(float *)&v12.i32[3];
    v4 += 4;
    int32x4_t v6 = vaddq_s32(v6, v11);
  }
  while (((a2 - v3 + 4) & 0xFFFFFFFC) != v4);
  int v13 = a2 - v3 + 1;
  float v14 = (float)v13;
  uint64_t v15 = *((void *)this + 4);
  unsigned int v16 = (float *)(v15 + 4 * v3);
  float v17 = 0.0;
  do
  {
    float v18 = *v16++;
    float v17 = v17 + v18;
    --v13;
  }
  while (v13);
  uint64_t v19 = 0;
  *(float *)v5.i32 = v8 / v14;
  uint64_t v20 = v15 + 4 * v3;
  float v21 = 0.0;
  float v22 = v17 / v14;
  do
  {
    float v21 = v21
        + (float)((float)((float)((float)(*(float *)&a3 * (float)(v3 + v19)) + (float)(*(float *)&a3 * 0.5))
                        - *(float *)v5.i32)
                * (float)(*(float *)(v20 + 4 * v19) - v22));
    ++v19;
  }
  while (a2 - v3 + 1 != v19);
  unsigned int v23 = 0;
  uint32x4_t v24 = (uint32x4_t)vdupq_n_s32(a2 - v3);
  int32x4_t v25 = vaddq_s32(vdupq_n_s32(v3), (int32x4_t)xmmword_2220A4FB0);
  float32x4_t v26 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0);
  float32x4_t v27 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.i8, 0);
  float v28 = 0.0;
  v29.i64[0] = 0x3F0000003F000000;
  v29.i64[1] = 0x3F0000003F000000;
  v30.i64[0] = 0x8000000080000000;
  v30.i64[1] = 0x8000000080000000;
  v31.i64[0] = 0x400000004;
  v31.i64[1] = 0x400000004;
  do
  {
    float32x4_t v32 = vsubq_f32(vmlaq_f32(vmulq_n_f32(vcvtq_f32_s32(v25), *(float *)&a3), v29, v26), v27);
    int8x16_t v33 = vbslq_s8((int8x16_t)vcgtq_u32((uint32x4_t)vorrq_s8((int8x16_t)vdupq_n_s32(v23), (int8x16_t)xmmword_2220A4FB0), v24), v30, (int8x16_t)vmulq_f32(v32, v32));
    float v28 = (float)((float)((float)(v28 + *(float *)v33.i32) + *(float *)&v33.i32[1]) + *(float *)&v33.i32[2])
        + *(float *)&v33.i32[3];
    v23 += 4;
    int32x4_t v25 = vaddq_s32(v25, v31);
  }
  while (((a2 - v3 + 4) & 0xFFFFFFFC) != v23);
  float result = v21 / v28;
  if (v28 == 0.0) {
    return 3.4028e38;
  }
  return result;
}

void Phase::SpatialModeler::TailCorrection::calcExtrapolatedDecay(Phase::SpatialModeler::TailCorrection *this, unsigned int a2, float a3, float a4)
{
  std::vector<float>::resize((uint64_t)this + 56, *(unsigned int *)(*(void *)this + 24));
  float v8 = (void *)*((void *)this + 7);
  Phase::SpatialModeler::EnergyHistogram::getTemporalEnergyEnvelope_Band(*(Phase::SpatialModeler::EnergyHistogram **)this, a2, __src);
  float32x4_t v9 = __src[0];
  memcpy(v8, __src[0], 4 * *((int *)this + 20) + 4);
  if (v9)
  {
    __src[1] = v9;
    operator delete(v9);
  }
  uint64_t v10 = *((int *)this + 20);
  uint64_t v11 = *(void *)this;
  unsigned int v12 = *(_DWORD *)(*(void *)this + 24);
  if ((int)v10 + 1 < v12)
  {
    float v13 = *((float *)this + 21);
    uint64_t v14 = *((void *)this + 7);
    int v15 = *((_DWORD *)this + 20);
    uint64_t v16 = v14 + 4 * v10;
    uint64_t v17 = 1;
    float v18 = (float)(a3 - a4) / (float)(a4 * -13.816);
    do
    {
      *(float *)(v16 + 4 * v17) = v13
                                * expf((float)-(float)(*(float *)(v11 + 16) * (float)(int)v17)/ (float)((float)(a3 / 13.816)+ (float)(v18 * (float)(*(float *)(v11 + 16) * (float)(int)v17))));
      ++v17;
    }
    while (v12 > v15 + (int)v17);
  }
}

void Phase::SpatialModeler::TailCorrection::modifyHistograms(Phase::SpatialModeler::EnergyHistogram **this, const Phase::SpatialModeler::RayTracerState *a2, unsigned int a3, int a4)
{
  if ((a3 & 0x80000000) == 0)
  {
    int32x4_t v6 = (float *)((char *)a2 + 19016);
    if (*((_DWORD *)a2 + 5007) > a3 && *((float *)a2 + a3 + 4976) > 0.0)
    {
      Phase::SpatialModeler::EnergyHistogram::getTemporalEnergyEnvelope_Band(*this, a3, __p);
      uint64_t v11 = (char *)__p[0];
      unsigned int v12 = this[7];
      if (a4)
      {
        uint64_t v13 = *((int *)this + 20);
        int v14 = *((_DWORD *)*this + 6);
        if (v14 >= (int)v13 + 3) {
          int v15 = v13 + 3;
        }
        else {
          int v15 = *((_DWORD *)*this + 6);
        }
        float v16 = 0.0;
        if ((int)v13 < v15)
        {
          unint64_t v17 = 0;
          uint64_t v18 = v15 - v13;
          unint64_t v19 = (v18 + 3) & 0xFFFFFFFFFFFFFFFCLL;
          uint64x2_t v20 = (uint64x2_t)vdupq_n_s64(v18 - 1);
          uint64_t v21 = 4 * v13 + 8;
          float32x4_t v22 = (float32x4_t)xmmword_2220A5530;
          unsigned int v23 = (__int32 *)((char *)__p[0] + v21);
          uint32x4_t v24 = (__int32 *)((char *)v12 + v21);
          do
          {
            float32x4_t v25 = v22;
            int8x16_t v26 = (int8x16_t)vdupq_n_s64(v17);
            int32x4_t v27 = (int32x4_t)vcgeq_u64(v20, (uint64x2_t)vorrq_s8(v26, (int8x16_t)xmmword_2220A5520));
            *(int32x2_t *)v10.i8 = vmovn_s64((int64x2_t)v27);
            *(int16x4_t *)v22.f32 = vmovn_s32(v10);
            if (v22.i8[0])
            {
              v22.i32[0] = *(v23 - 2);
              v9.i32[0] = *(v24 - 2);
            }
            int32x2_t v28 = (int32x2_t)vmovn_s32(v10);
            if (v28.i8[2])
            {
              v22.i32[1] = *(v23 - 1);
              v9.i32[1] = *(v24 - 1);
            }
            int32x4_t v29 = (int32x4_t)vcgeq_u64(v20, (uint64x2_t)vorrq_s8(v26, (int8x16_t)xmmword_2220A5510));
            int32x2_t v30 = (int32x2_t)vmovn_s32(vmovn_hight_s64(v28, (int64x2_t)v29));
            if (v30.i8[4])
            {
              v22.i32[2] = *v23;
              v9.i32[2] = *v24;
            }
            int32x4_t v10 = vmovn_hight_s64(v30, (int64x2_t)v29);
            if (vmovn_s32(v10).i8[6])
            {
              v22.i32[3] = v23[1];
              v9.i32[3] = v24[1];
            }
            float32x4_t v22 = vaddq_f32(v25, vdivq_f32(v22, v9));
            v17 += 4;
            v23 += 4;
            v24 += 4;
          }
          while (v19 != v17);
          int8x16_t v31 = vbslq_s8((int8x16_t)vuzp1q_s32(v27, v29), (int8x16_t)v22, (int8x16_t)v25);
          float v16 = (float)(vaddv_f32(*(float32x2_t *)v31.i8) + *(float *)&v31.i32[2]) + *(float *)&v31.i32[3];
        }
        float __B = v16 / 3.0;
        vDSP_vsmul((const float *)v12 + v13, 1, &__B, (float *)v12 + v13, 1, (v14 - v13));
      }
      signed int v32 = *((_DWORD *)this + 20);
      int8x16_t v33 = *this;
      if (v32 < *((_DWORD *)*this + 6))
      {
        float32x4_t v34 = (float *)&v11[4 * v32];
        long long v35 = (float *)((char *)v12 + 4 * v32);
        do
        {
          float v36 = *((float *)a2 + 29);
          float v37 = sqrtf(v6[124] / (float)(v36
                                      * (float)(*((float *)a2 + 116) * (float)((float)*(unsigned int *)v6 * 3.1416))))
              * 4.34;
          float v38 = expf((float)((float)((float)((float)v32 + 0.5) * 6.9) * v36) / *((float *)a2 + a3 + 4976));
          float v39 = expf((float)((float)((float)(v38 * v37) * 12.0) * 2.3026) / 10.0);
          Phase::SpatialModeler::EnergyHistogram::setEnergy((uint64_t)v33, (float)(*v34 * (float)(1.0 / (float)(v39 + 1.0)))+ (float)((float)(1.0 - (float)(1.0 / (float)(v39 + 1.0))) * *v35), a3, v32);
          int8x16_t v33 = *this;
          ++v32;
          ++v34;
          ++v35;
        }
        while (*((_DWORD *)*this + 6) > v32);
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
  }
}

void sub_222085810(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Phase::SpatialModeler::TailCorrection::modifyDirectivityHistogram(const float **this, const Phase::SpatialModeler::RayTracerState *a2, const Phase::SpatialModeler::EnergyHistogram *a3, float a4, float a5)
{
  float32x4_t v7 = (float *)((char *)a2 + 19776);
  unsigned int v8 = *((_DWORD *)a2 + 4975);
  if (v8)
  {
    float v9 = 0.0;
    uint64_t v10 = *((unsigned int *)a2 + 4975);
    do
    {
      float v11 = *v7++;
      float v9 = v9 + v11;
      --v10;
    }
    while (v10);
    if (v8 >= 2) {
      float v9 = v9 / (float)v8;
    }
  }
  else
  {
    float v9 = 0.0;
  }
  unsigned int v12 = *this;
  float v38 = -1.0;
  if ((*this)[5] > v9) {
    float v38 = (float)(int)floorf(v9 / v12[4]);
  }
  for (uint64_t i = *((int *)this + 20); *((_DWORD *)v12 + 6) > i; ++i)
  {
    vDSP_Length v14 = *((unsigned int *)a3 + 7);
    if (*((_DWORD *)a3 + 6) > i && *((unsigned char *)a3 + 36) == 0) {
      float v16 = (const float *)(*((void *)a3 + 1) + 4 * (v14 * i));
    }
    else {
      float v16 = (const float *)&Phase::SpatialModeler::EnergyHistogram::s_emptyTS;
    }
    unint64_t v17 = (const float *)&Phase::SpatialModeler::EnergyHistogram::s_emptyTS;
    if (!*((unsigned char *)v12 + 36)) {
      unint64_t v17 = (const float *)(*((void *)v12 + 1) + 4 * (*((_DWORD *)v12 + 7) * i));
    }
    float v39 = 0.0;
    float __C = 0.0;
    vDSP_sve(v16, 1, &__C, v14);
    vDSP_sve(v17, 1, &v39, *((unsigned int *)*this + 7));
    if (v39 <= __C)
    {
      unsigned int v12 = *this;
    }
    else
    {
      if (*((_DWORD *)*this + 28) <= i) {
        uint64_t v18 = 0;
      }
      else {
        uint64_t v18 = *((void *)*this + 15) + 4 * (73 * i);
      }
      float v19 = v39 - __C;
      uint64x2_t v20 = this[1];
      float v41 = 0.0;
      vDSP_sve(v20, 1, &v41, 0x48uLL);
      if (v41 <= 1.1755e-38)
      {
        uint64_t v30 = 0;
        float v31 = 0.0;
        do
        {
          float v32 = v31;
          float v31 = v31 + 0.5236;
          float v33 = cosf(v32);
          float v34 = cosf(v31);
          uint64_t v35 = 0;
          *(float *)v36.i32 = v19 * (float)((float)((float)(v33 - v34) * 0.5) / 12.0);
          int32x4_t v37 = vdupq_lane_s32(v36, 0);
          do
          {
            *(int32x4_t *)(v18 + v3std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear(this + 5) = v37;
            v35 += 16;
          }
          while (v35 != 48);
          ++v30;
          v18 += 48;
        }
        while (v30 != 6);
      }
      else
      {
        uint64_t v21 = 0;
        float v22 = fminf(fmaxf((float)(int)i / v38, 0.0), 1.0);
        float v23 = (float)(v22 * 0.8) + (float)((float)(1.0 - v22) * 0.25);
        float v24 = 0.0;
        do
        {
          float v25 = v24;
          float v24 = v24 + 0.5236;
          float v26 = cosf(v25);
          float v27 = cosf(v24);
          uint64_t v28 = 0;
          float v29 = v23 * (float)((float)((float)(v26 - v27) * 0.5) / 12.0);
          do
          {
            *(float *)(v18 + v28 * 4) = *(float *)(v18 + v28 * 4)
                                      + (float)(v19 * (float)(v29 + (float)((float)(1.0 - v23) * v20[v28])));
            ++v28;
          }
          while (v28 != 12);
          ++v21;
          v18 += 48;
          v20 += 12;
        }
        while (v21 != 6);
      }
      unsigned int v12 = *this;
      *(_DWORD *)(*((void *)*this + 11) + 4 * i) = 1;
    }
  }
}

void Phase::SpatialModeler::TailCorrection::execute(uint64_t a1, Phase::SpatialModeler::TailCorrection *this, uint64_t a3, float *a4, float a5, float a6)
{
  if (*(void *)a1 && Phase::SpatialModeler::TailCorrection::validConfig(this, this))
  {
    std::vector<float>::resize(a1 + 8, 0x48uLL);
    Phase::SpatialModeler::DirectivityHistogram::getNormalizedDirectionalDistribution(*(Phase::SpatialModeler::DirectivityHistogram **)a1, *(float **)(a1 + 8), 0x48u);
    unsigned int v12 = *(Phase::SpatialModeler::DirectivityHistogram **)a1;
    uint64_t v40 = &unk_26D476708;
    float v41 = 0;
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    int v44 = 1065353216;
    char v45 = 1;
    uint64_t v46 = 0;
    uint64_t v47 = 0;
    uint64_t v49 = 1065353216;
    uint64_t v50 = 0;
    int v48 = 0;
    int v51 = 1065353216;
    Phase::SpatialModeler::EnergyHistogram::operator=(&v40, (uint64_t)v12);
    uint64_t v13 = (_DWORD *)((char *)this + 19900);
    uint64_t v14 = *((unsigned int *)this + 4975);
    long long v33 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    memset(v39, 0, 28);
    *(_DWORD *)&v39[28] = v14;
    if (v14) {
      bzero(&v33, 4 * v14);
    }
    long long v15 = v38;
    *((_OWORD *)a4 + 4) = v37;
    *((_OWORD *)a4 + std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear(this + 5) = v15;
    long long v16 = *(_OWORD *)&v39[16];
    *((_OWORD *)a4 + 6) = *(_OWORD *)v39;
    *((_OWORD *)a4 + 7) = v16;
    long long v17 = v34;
    *(_OWORD *)a4 = v33;
    *((_OWORD *)a4 + 1) = v17;
    float v18 = *(float *)&v35;
    long long v19 = v36;
    *((_OWORD *)a4 + 2) = v35;
    *((_OWORD *)a4 + objc_destroyWeak(this + 3) = v19;
    if (*(_DWORD *)(*(void *)a1 + 28) && *v13)
    {
      unint64_t v20 = 0;
      uint64_t v21 = (char *)this + 19776;
      do
      {
        if (Phase::SpatialModeler::TailCorrection::prepareEDC((void **)a1, v20))
        {
          signed int valid = Phase::SpatialModeler::TailCorrection::validHistogramRange((Phase::SpatialModeler::TailCorrection *)a1, this, v20, v18);
          *(float *)&double v23 = *(float *)(*(void *)(a1 + 32) + 4 * *(int *)(a1 + 80))
                         - *(float *)(*(void *)(a1 + 32) + 4 * valid);
          if (*(float *)&v23 < 6.0
            || (float v24 = Phase::SpatialModeler::TailCorrection::linearRegression((Phase::SpatialModeler::TailCorrection *)a1, valid, v23), v24 == 3.4028e38))
          {
            Phase::SpatialModeler::TailCorrection::calcExtrapolatedDecay((Phase::SpatialModeler::TailCorrection *)a1, v20, *(float *)&v21[4 * v20], *(float *)&v21[4 * v20]);
            int v27 = 0;
          }
          else
          {
            float v25 = -60.0 / v24;
            a4[v20] = v25;
            float v26 = *(float *)&v21[4 * v20];
            if (v25 >= v26) {
              float v26 = v25;
            }
            Phase::SpatialModeler::TailCorrection::calcExtrapolatedDecay((Phase::SpatialModeler::TailCorrection *)a1, v20, v25, v26);
            int v27 = 1;
          }
          Phase::SpatialModeler::TailCorrection::modifyHistograms((Phase::SpatialModeler::EnergyHistogram **)a1, this, v20, v27);
          uint64_t v28 = *(unsigned int *)(a3 + 124);
          long long v33 = 0u;
          long long v34 = 0u;
          long long v35 = 0u;
          long long v36 = 0u;
          long long v37 = 0u;
          long long v38 = 0u;
          memset(v39, 0, 28);
          *(_DWORD *)&v39[28] = v28;
          if (v28)
          {
            float v29 = (float *)&v33;
            uint64_t v30 = (float *)a3;
            do
            {
              float v31 = *v30++;
              *v29++ = v31 * a6;
              --v28;
            }
            while (v28);
          }
          Phase::SpatialModeler::TailCorrection::totalEnergyCorrectionUsingPrediction((uint64_t *)a1, v20, (uint64_t)&v33, a5);
        }
      }
      while (++v20 < *(unsigned int *)(*(void *)a1 + 28) && v20 < *v13);
    }
    Phase::SpatialModeler::TailCorrection::modifyDirectivityHistogram((const float **)a1, this, (const Phase::SpatialModeler::EnergyHistogram *)&v40, v18, *(float *)&v19);
    uint64_t v40 = &unk_26D476708;
    free(v41);
  }
}

void sub_222085DF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{
}

void Phase::SpatialModeler::TailCorrection::totalEnergyCorrectionUsingPrediction(uint64_t *a1, unsigned int a2, uint64_t a3, float a4)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  uint64_t v8 = *a1;
  float v9 = 0.0;
  if (!*(unsigned char *)(*a1 + 36))
  {
    int v10 = *(_DWORD *)(v8 + 24);
    if (v10)
    {
      float v11 = (float *)(*(void *)(v8 + 8) + 4 * a2);
      uint64_t v12 = 4 * *(unsigned int *)(v8 + 28);
      do
      {
        float v9 = v9 + *v11;
        float v11 = (float *)((char *)v11 + v12);
        --v10;
      }
      while (v10);
    }
  }
  float v13 = *(float *)(a3 + 4 * (int)a2);
  float v14 = log10f(v9 / v13) * 10.0;
  float v16 = Phase::SpatialModeler::TailCorrection::sMaxEnergyCorrectionFactor(v15);
  float v18 = Phase::SpatialModeler::TailCorrection::sMaxEnergyCorrectionFactor(v17);
  uint64_t v19 = *a1;
  if (!*(unsigned char *)(*a1 + 36))
  {
    uint64_t v20 = *(unsigned int *)(v19 + 28);
    if (v20 > a2)
    {
      int v21 = *(_DWORD *)(v19 + 24);
      if (v21)
      {
        float v22 = fminf(fmaxf((float)((float)(v13 * a4) + (float)((float)(1.0 - a4) * v9)) / v9, 1.0 / v16), v18);
        double v23 = (float *)(*(void *)(v19 + 8) + 4 * a2);
        uint64_t v24 = 4 * v20;
        do
        {
          *double v23 = v22 * *v23;
          double v23 = (float *)((char *)v23 + v24);
          --v21;
        }
        while (v21);
      }
    }
  }
  if (fabsf(v14) > 6.0)
  {
    uint64_t ShouldFire = (Phase::Logger *)Phase::Throttle::ShouldFire((Phase::Throttle *)(a1 + 12), 0);
    if (ShouldFire)
    {
      float v26 = **(NSObject ***)(Phase::Logger::GetInstance(ShouldFire) + 1184);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        double v27 = v14;
        double v28 = (float)(log10f(v9) * 10.0);
        float v29 = log10f(*(float *)(a3 + 4 * (int)a2));
        int v30 = 136316418;
        float v31 = "TailCorrection.cpp";
        __int16 v32 = 1024;
        int v33 = 354;
        __int16 v34 = 2048;
        double v35 = v27;
        __int16 v36 = 2048;
        double v37 = v28;
        __int16 v38 = 2048;
        double v39 = (float)(v29 * 10.0);
        __int16 v40 = 2048;
        double v41 = a4;
        _os_log_impl(&dword_221E5E000, v26, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Tail-correction energy may be inaccurate by %.2f dB. Histogram: %.2f dB, Analytical: %.2f dB. Weighting: %.2f", (uint8_t *)&v30, 0x3Au);
      }
    }
  }
}

void Phase::SpatialModeler::TailCorrection::executeTargetRt60(uint64_t a1, Phase::SpatialModeler::TailCorrection *this, uint64_t a3, uint64_t a4, float *a5, float a6, float a7)
{
  if (*(void *)a1 && Phase::SpatialModeler::TailCorrection::validConfig(this, this))
  {
    std::vector<float>::resize(a1 + 8, 0x48uLL);
    Phase::SpatialModeler::DirectivityHistogram::getNormalizedDirectionalDistribution(*(Phase::SpatialModeler::DirectivityHistogram **)a1, *(float **)(a1 + 8), 0x48u);
    float v14 = *(Phase::SpatialModeler::DirectivityHistogram **)a1;
    double v39 = &unk_26D476708;
    __int16 v40 = 0;
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    int v43 = 1065353216;
    char v44 = 1;
    uint64_t v45 = 0;
    uint64_t v46 = 0;
    uint64_t v48 = 1065353216;
    uint64_t v49 = 0;
    int v47 = 0;
    int v50 = 1065353216;
    Phase::SpatialModeler::EnergyHistogram::operator=(&v39, (uint64_t)v14);
    uint64_t v15 = *(unsigned int *)(a4 + 124);
    long long v32 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    memset(v38, 0, 28);
    *(_DWORD *)&v38[28] = v15;
    if (v15) {
      bzero(&v32, 4 * v15);
    }
    long long v16 = v37;
    *((_OWORD *)a5 + 4) = v36;
    *((_OWORD *)a5 + std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear(this + 5) = v16;
    long long v17 = *(_OWORD *)&v38[16];
    *((_OWORD *)a5 + 6) = *(_OWORD *)v38;
    *((_OWORD *)a5 + 7) = v17;
    long long v18 = v33;
    *(_OWORD *)a5 = v32;
    *((_OWORD *)a5 + 1) = v18;
    float v19 = *(float *)&v34;
    long long v20 = v35;
    *((_OWORD *)a5 + 2) = v34;
    *((_OWORD *)a5 + objc_destroyWeak(this + 3) = v20;
    if (*(_DWORD *)(*(void *)a1 + 28) && *(_DWORD *)(a4 + 124))
    {
      unint64_t v21 = 0;
      do
      {
        if (Phase::SpatialModeler::TailCorrection::prepareEDC((void **)a1, v21))
        {
          signed int valid = Phase::SpatialModeler::TailCorrection::validHistogramRange((Phase::SpatialModeler::TailCorrection *)a1, this, v21, v19);
          *(float *)&double v23 = *(float *)(*(void *)(a1 + 32) + 4 * *(int *)(a1 + 80))
                         - *(float *)(*(void *)(a1 + 32) + 4 * valid);
          if (*(float *)&v23 < 6.0
            || (float v24 = Phase::SpatialModeler::TailCorrection::linearRegression((Phase::SpatialModeler::TailCorrection *)a1, valid, v23), v24 == 3.4028e38))
          {
            Phase::SpatialModeler::TailCorrection::calcExtrapolatedDecay((Phase::SpatialModeler::TailCorrection *)a1, v21, *(float *)(a4 + 4 * v21), *(float *)(a4 + 4 * v21));
            int v26 = 0;
          }
          else
          {
            float v25 = -60.0 / v24;
            a5[v21] = v25;
            Phase::SpatialModeler::TailCorrection::calcExtrapolatedDecay((Phase::SpatialModeler::TailCorrection *)a1, v21, v25, *(float *)(a4 + 4 * v21));
            int v26 = 1;
          }
          Phase::SpatialModeler::TailCorrection::modifyHistograms((Phase::SpatialModeler::EnergyHistogram **)a1, this, v21, v26);
          uint64_t v27 = *(unsigned int *)(a3 + 124);
          long long v32 = 0u;
          long long v33 = 0u;
          long long v34 = 0u;
          long long v35 = 0u;
          long long v36 = 0u;
          long long v37 = 0u;
          memset(v38, 0, 28);
          *(_DWORD *)&v38[28] = v27;
          if (v27)
          {
            double v28 = (float *)&v32;
            float v29 = (float *)a3;
            do
            {
              float v30 = *v29++;
              *v28++ = v30 * a7;
              --v27;
            }
            while (v27);
          }
          Phase::SpatialModeler::TailCorrection::totalEnergyCorrectionUsingPrediction((uint64_t *)a1, v21, (uint64_t)&v32, a6);
        }
      }
      while (++v21 < *(unsigned int *)(*(void *)a1 + 28) && v21 < *(unsigned int *)(a4 + 124));
    }
    Phase::SpatialModeler::TailCorrection::modifyDirectivityHistogram((const float **)a1, this, (const Phase::SpatialModeler::EnergyHistogram *)&v39, v19, *(float *)&v20);
    double v39 = &unk_26D476708;
    free(v40);
  }
}

void sub_2220862F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{
}

void Phase::Controller::TapManager::TapManager(Phase::Logger *a1)
{
}

void sub_222086440(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::TapReceiverObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::TapReceiverObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::TapReceiverObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::TapReceiverObject>>>>::~__hash_table((uint64_t)(v1 + 28));
  caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::TapReceiverObject *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::~guarded_lookup_hash_table(v3);
  std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::TapSourceObjectInterface>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::TapSourceObjectInterface>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::TapSourceObjectInterface>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::TapSourceObjectInterface>>>>::~__hash_table(v2);
  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::~Commandable(v1);
  _Unwind_Resume(a1);
}

void Phase::Controller::TapManager::~TapManager(Phase::Controller::TapManager *this)
{
  uint64_t v1 = this;
  v39[1] = *MEMORY[0x263EF8340];
  *(void *)this = &unk_26D47B098;
  uint64_t v2 = *((void *)this + 30);
  if (v2)
  {
    uint64_t v3 = 0;
    unsigned int v4 = 0;
    uint32x4_t v5 = 0;
    int32x4_t v6 = 0;
    do
    {
      float32x4_t v7 = *(void **)(*(void *)(v2 + 32) + 16);
      long long v35 = (uint64_t *)v2;
      if (v7)
      {
        uint64_t v8 = (_OWORD *)(v2 + 16);
        do
        {
          *(_OWORD *)long long __p = *v8;
          uint64_t v9 = v7[2];
          if (v6 >= v5)
          {
            unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v6 - v3);
            unint64_t v11 = v10 + 1;
            if (v10 + 1 > 0xAAAAAAAAAAAAAAALL) {
              std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
            }
            if (0x5555555555555556 * (v5 - v3) > v11) {
              unint64_t v11 = 0x5555555555555556 * (v5 - v3);
            }
            if (0xAAAAAAAAAAAAAAABLL * (v5 - v3) >= 0x555555555555555) {
              unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v12 = v11;
            }
            if (v12)
            {
              if (v12 > 0xAAAAAAAAAAAAAAALL) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              float v13 = (char *)operator new(24 * v12);
            }
            else
            {
              float v13 = 0;
            }
            float v14 = &v13[24 * v10];
            *(_OWORD *)float v14 = *(_OWORD *)__p;
            *((void *)v14 + 2) = v9;
            if (v4 == v3)
            {
              long long v16 = &v13[24 * v10];
            }
            else
            {
              uint64_t v15 = &v13[24 * v10];
              do
              {
                long long v16 = v15 - 24;
                long long v17 = *(_OWORD *)(v4 - 3);
                *((void *)v15 - 1) = *(v4 - 1);
                *(_OWORD *)(v15 - 24) = v17;
                v4 -= 3;
                v15 -= 24;
              }
              while (v4 != v3);
            }
            uint32x4_t v5 = (uint64_t *)&v13[24 * v12];
            unsigned int v4 = (uint64_t *)(v14 + 24);
            if (v3) {
              operator delete(v3);
            }
            uint64_t v3 = (uint64_t *)v16;
          }
          else
          {
            *(_OWORD *)int32x4_t v6 = *v8;
            void v6[2] = v9;
            unsigned int v4 = v6 + 3;
          }
          float32x4_t v7 = (void *)*v7;
          int32x4_t v6 = v4;
        }
        while (v7);
      }
      uint64_t v2 = *v35;
    }
    while (*v35);
    if (v3 == v6)
    {
      uint64_t v1 = this;
    }
    else
    {
      long long v18 = v3;
      uint64_t v1 = this;
      do
      {
        Phase::Controller::TapManager::DeRegisterTapReceiver((uint64_t)this, *v18, v18[1], v18[2]);
        v18 += 3;
      }
      while (v18 != v6);
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  __pa = 0;
  __p_8 = 0;
  v39[0] = 0;
  float v19 = (void *)*((void *)v1 + 7);
  if (v19)
  {
    long long v20 = 0;
    do
    {
      unint64_t v21 = v19 + 2;
      if ((unint64_t)v20 >= v39[0])
      {
        uint64_t v22 = ((char *)v20 - (char *)__pa) >> 4;
        if ((unint64_t)(v22 + 1) >> 60) {
          std::vector<Phase::MetaParamValue>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v23 = (uint64_t)(v39[0] - (void)__pa) >> 3;
        if (v23 <= v22 + 1) {
          unint64_t v23 = v22 + 1;
        }
        if (v39[0] - (void)__pa >= 0x7FFFFFFFFFFFFFF0uLL) {
          unint64_t v24 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v24 = v23;
        }
        if (v24) {
          float v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::UniqueObjectId>>((uint64_t)v39, v24);
        }
        else {
          float v25 = 0;
        }
        int v26 = &v25[16 * v22];
        *(_OWORD *)int v26 = *v21;
        uint64_t v27 = __p_8;
        double v28 = (unint64_t *)v26;
        if (__p_8 != __pa)
        {
          do
          {
            *((_OWORD *)v28 - 1) = *((_OWORD *)v27 - 1);
            v28 -= 2;
            v27 -= 2;
          }
          while (v27 != __pa);
          uint64_t v27 = __pa;
        }
        long long v20 = (unint64_t *)(v26 + 16);
        __pa = v28;
        v39[0] = &v25[16 * v24];
        if (v27) {
          operator delete(v27);
        }
      }
      else
      {
        *(_OWORD *)long long v20 = *v21;
        v20 += 2;
      }
      __p_8 = v20;
      float v19 = (void *)*v19;
    }
    while (v19);
    for (uint64_t i = __pa; i != v20; i += 2)
      Phase::Controller::TapManager::RemoveTapSourceObject(v1, *i, i[1]);
  }
  if (*((void *)v1 + 31))
  {
    std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::TapReceiverObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::TapReceiverObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::TapReceiverObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::TapReceiverObject>>>>::__deallocate_node(*((void **)v1 + 30));
    *((void *)v1 + 3std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = 0;
    uint64_t v30 = *((void *)v1 + 29);
    if (v30)
    {
      for (uint64_t j = 0; j != v30; ++j)
        *(void *)(*((void *)v1 + 28) + 8 * j) = 0;
    }
    *((void *)v1 + 31) = 0;
  }
  if (*((void *)v1 + 8))
  {
    std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::TapSourceObjectInterface>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::TapSourceObjectInterface>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::TapSourceObjectInterface>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::TapSourceObjectInterface>>>>::__deallocate_node(*((void **)v1 + 7));
    *((void *)v1 + 7) = 0;
    uint64_t v32 = *((void *)v1 + 6);
    if (v32)
    {
      for (uint64_t k = 0; k != v32; ++k)
        *(void *)(*((void *)v1 + 5) + 8 * k) = 0;
    }
    *((void *)v1 + 8) = 0;
  }
  if (__pa) {
    operator delete(__pa);
  }
  if (v3) {
    operator delete(v3);
  }
  std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::TapReceiverObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::TapReceiverObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::TapReceiverObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::TapReceiverObject>>>>::~__hash_table((uint64_t)v1 + 224);
  caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::TapReceiverObject *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::~guarded_lookup_hash_table((uint64_t)v1 + 80);
  std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::TapSourceObjectInterface>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::TapSourceObjectInterface>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::TapSourceObjectInterface>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::TapSourceObjectInterface>>>>::~__hash_table((uint64_t)v1 + 40);

  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::~Commandable(v1);
}

{
  uint64_t vars8;

  Phase::Controller::TapManager::~TapManager(this);

  JUMPOUT(0x223C938A0);
}

void sub_222086864(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (a2)
  {
    if (__p) {
      operator delete(__p);
    }
    if (v12) {
      operator delete(v12);
    }
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void Phase::Controller::TapManager::DeRegisterTapReceiver(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  v7[0] = a2;
  v7[1] = a3;
  if (std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>((void *)(a1 + 224), v7))
  {
    operator new();
  }
  int32x4_t v6 = **(id **)(Phase::Logger::GetInstance(0) + 944);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int buf = 136315906;
    buf_4 = "TapManager.mm";
    __int16 v10 = 1024;
    int v11 = 220;
    __int16 v12 = 2048;
    uint64_t v13 = a2;
    __int16 v14 = 2048;
    uint64_t v15 = a4;
    _os_log_impl(&dword_221E5E000, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Couldn't DeRegister receiver tapId %llu for client %lu because it doesn't exist", (uint8_t *)&buf, 0x26u);
  }
}

void sub_222086E40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::mutex *a13, char a14)
{
  if (a14) {
    std::mutex::unlock(a13);
  }
  std::unique_ptr<Phase::Controller::TapReceiverObject>::reset[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *Phase::Controller::TapManager::RemoveTapSourceObject(void *a1, unint64_t a2, unint64_t a3)
{
  v7.mStorage[0] = a2;
  v7.mStorage[1] = a3;
  unsigned int v4 = a1 + 5;
  float result = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>(a1 + 5, &v7);
  if (result)
  {
    int32x4_t v6 = result;
    Phase::Controller::TapManager::CheckUnregisterTap((Phase::Controller::TapManager *)a1, v7);
    return (uint64_t *)std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::TapSourceObjectInterface>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::TapSourceObjectInterface>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::TapSourceObjectInterface>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::TapSourceObjectInterface>>>>::erase(v4, v6);
  }
  return result;
}

void Phase::Controller::TapManager::RegisterTapReceiver(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  v3[0] = a2;
  v3[1] = a3;
  if (std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>((void *)(a1 + 224), v3))
  {
    operator new();
  }
  operator new();
}

void sub_2220873AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<Phase::Controller::TapReceiverObject>::reset[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *Phase::Controller::TapManager::CheckRegisterTap(Phase::Controller::TapManager *this, UniqueObjectId a2)
{
  UniqueObjectId v4 = a2;
  UniqueObjectId v5 = a2;
  float result = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((void *)this + 28, &v5);
  if (result)
  {
    float result = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>((void *)this + 5, &v4);
    if (result) {
      return (void *)(*(uint64_t (**)(void))(*(void *)result[4] + 24))(result[4]);
    }
  }
  return result;
}

void *Phase::Controller::TapManager::CheckUnregisterTap(Phase::Controller::TapManager *this, UniqueObjectId a2)
{
  UniqueObjectId v4 = a2;
  UniqueObjectId v5 = a2;
  float result = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((void *)this + 28, &v5);
  if (!result)
  {
    float result = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>((void *)this + 5, &v4);
    if (result) {
      return (void *)(*(uint64_t (**)(void))(*(void *)result[4] + 32))(result[4]);
    }
  }
  return result;
}

void Phase::Controller::TapManager::CreatePreSpatialTap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  *(void *)&v5[0] = a2;
  *((void *)&v5[0] + 1) = a3;
  uint64_t v3 = (Phase::Logger *)std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>((void *)(a1 + 40), v5);
  if (!v3)
  {
    v5[1] = v5[0];
    operator new();
  }
  UniqueObjectId v4 = **(id **)(Phase::Logger::GetInstance(v3) + 944);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int buf = 136315650;
    buf_4 = "TapManager.mm";
    __int16 buf_12 = 1024;
    int buf_14 = 250;
    __int16 v10 = 2048;
    uint64_t v11 = *(void *)&v5[0];
    _os_log_impl(&dword_221E5E000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Couldn't create source tapId %llu because it already exists.", (uint8_t *)&buf, 0x1Cu);
  }
}

void sub_222087B1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  std::unique_ptr<Phase::Controller::PreSpatialTapSourceObject>::reset[abi:ne180100]((Phase::Controller::PreSpatialTapSourceObject **)va);
  _Unwind_Resume(a1);
}

unint64_t Phase::Controller::TapManager::DVMCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int32x4_t v6 = (atomic_uint *)(a1 + 128);
  atomic_fetch_add((atomic_uint *volatile)(a1 + 128), 1u);
  unint64_t result = atomic_load((unint64_t *)(a1 + 120));
  if (result)
  {
    unint64_t result = caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl::findSlotForKey(result, a2, a3);
    if (v11)
    {
      uint64_t v12 = (atomic_uint *)v11;
      atomic_fetch_add((atomic_uint *volatile)v11, 1u);
      uint64_t v13 = *(void *)(v11 + 24);
      atomic_fetch_add((atomic_uint *volatile)(a1 + 128), 0xFFFFFFFF);
      unint64_t result = *(void *)(a1 + 296);
      if (result)
      {
        unint64_t result = Phase::Controller::ClientTapRegistryProxy::IORender(result, a2, a3, (uint64_t)&v14, a5, v13 + 40);
        int32x4_t v6 = v12;
      }
      else
      {
        int32x4_t v6 = (atomic_uint *)v11;
      }
    }
  }
  atomic_fetch_add(v6, 0xFFFFFFFF);
  return result;
}

void sub_222087C50(_Unwind_Exception *a1)
{
  atomic_fetch_add(v1, 0xFFFFFFFF);
  _Unwind_Resume(a1);
}

void *Phase::Controller::TapManager::RegisterSubmix(Phase::Controller::TapManager *this, UniqueObjectId a2, UniqueObjectId a3)
{
  unint64_t v3 = a3.mStorage[1];
  unint64_t v4 = a3.mStorage[0];
  UniqueObjectId v6 = a2;
  unint64_t result = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>((void *)this + 5, &v6);
  if (result) {
    return (void *)(*(uint64_t (**)(void, unint64_t, unint64_t))(*(void *)result[4] + 40))(result[4], v4, v3);
  }
  return result;
}

void *Phase::Controller::TapManager::DeRegisterSubmix(Phase::Controller::TapManager *this, UniqueObjectId a2, UniqueObjectId a3)
{
  unint64_t v3 = a3.mStorage[1];
  unint64_t v4 = a3.mStorage[0];
  UniqueObjectId v6 = a2;
  unint64_t result = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>((void *)this + 5, &v6);
  if (result) {
    return (void *)(*(uint64_t (**)(void, unint64_t, unint64_t))(*(void *)result[4] + 56))(result[4], v4, v3);
  }
  return result;
}

void *Phase::Controller::TapManager::RegisterSource(Phase::Controller::TapManager *this, UniqueObjectId a2, Handle64 a3)
{
  UniqueObjectId v5 = a2;
  unint64_t result = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>((void *)this + 5, &v5);
  if (result) {
    return (void *)(*(uint64_t (**)(void, unint64_t))(*(void *)result[4] + 48))(result[4], a3.mData);
  }
  return result;
}

void *Phase::Controller::TapManager::DeRegisterSource(Phase::Controller::TapManager *this, UniqueObjectId a2, Handle64 a3)
{
  UniqueObjectId v5 = a2;
  unint64_t result = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>((void *)this + 5, &v5);
  if (result) {
    return (void *)(*(uint64_t (**)(void, unint64_t))(*(void *)result[4] + 64))(result[4], a3.mData);
  }
  return result;
}

uint64_t Phase::Controller::TapManager::Update(Phase::Controller::TapManager *this)
{
  uint64_t result = Phase::Commandable<128,Phase::LockFreeQueueMPSC>::ExecuteCommands((uint64_t)this);
  for (uint64_t i = (uint64_t **)*((void *)this + 7); i; uint64_t i = (uint64_t **)*i)
    uint64_t result = (*(uint64_t (**)(uint64_t *))(*i[4] + 88))(i[4]);
  return result;
}

void *Phase::Controller::TapManager::EngineStartNotify(void *this)
{
  uint64_t v1 = (uint64_t *)this[7];
  if (v1)
  {
    uint64_t v2 = this + 28;
    do
    {
      long long v3 = *((_OWORD *)v1 + 1);
      this = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>(v2, &v3);
      if (this) {
        this = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v1[4] + 24))(v1[4]);
      }
      uint64_t v1 = (uint64_t *)*v1;
    }
    while (v1);
  }
  return this;
}

uint64_t std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::TapSourceObjectInterface>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::TapSourceObjectInterface>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::TapSourceObjectInterface>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::TapSourceObjectInterface>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::TapSourceObjectInterface>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::TapSourceObjectInterface>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::TapSourceObjectInterface>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::TapSourceObjectInterface>>>>::__deallocate_node(*(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::TapSourceObjectInterface>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::TapSourceObjectInterface>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::TapSourceObjectInterface>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::TapSourceObjectInterface>>>>::__deallocate_node(void *__p)
{
  if (__p)
  {
    uint64_t v1 = __p;
    do
    {
      uint64_t v2 = (void *)*v1;
      uint64_t v3 = v1[4];
      v1[4] = 0;
      if (v3) {
        (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
      }
      operator delete(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
}

void *caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::TapReceiverObject *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::~guarded_lookup_hash_table(uint64_t a1)
{
  if (atomic_load((unsigned int *)(a1 + 48)))
  {
    _os_assert_log();
    uint64_t result = (void *)_os_crash();
    __break(1u);
  }
  else
  {
    uint64_t v3 = atomic_load((unint64_t *)(a1 + 40));
    if (v3)
    {
      uint64_t v4 = caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::TapReceiverObject *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl::~table_impl(v3);
      MEMORY[0x223C938A0](v4, 0x1060C402CF69088);
    }
    std::mutex::~mutex((std::mutex *)(a1 + 80));
    UniqueObjectId v5 = *(uint64_t **)(a1 + 56);
    if (v5)
    {
      UniqueObjectId v6 = *(uint64_t **)(a1 + 64);
      UniqueObjectId v7 = *(void **)(a1 + 56);
      if (v6 != v5)
      {
        do
          std::unique_ptr<caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::TapReceiverObject *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl,std::default_delete<caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::TapReceiverObject *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl>>::reset[abi:ne180100](--v6);
        while (v6 != v5);
        UniqueObjectId v7 = *(void **)(a1 + 56);
      }
      *(void *)(a1 + 64) = v5;
      operator delete(v7);
    }
    return std::__function::__value_func<unsigned int ()(Phase::UniqueObjectId)>::~__value_func[abi:ne180100]((void *)a1);
  }
  return result;
}

uint64_t caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::TapReceiverObject *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl::~table_impl(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (unsigned int **)(a1 + 16);
    do
    {
      if ((unint64_t)*v3 + 1 >= 2) {
        caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::element_t::release(*v3);
      }
      ++v3;
      --v2;
    }
    while (v2);
  }
  return a1;
}

uint64_t std::unique_ptr<caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::TapReceiverObject *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl,std::default_delete<caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::TapReceiverObject *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl>>::reset[abi:ne180100](uint64_t *a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::TapReceiverObject *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl::~table_impl(result);
    JUMPOUT(0x223C938A0);
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::TapReceiverObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::TapReceiverObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::TapReceiverObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::TapReceiverObject>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::TapReceiverObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::TapReceiverObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::TapReceiverObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::TapReceiverObject>>>>::__deallocate_node(*(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::TapReceiverObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::TapReceiverObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::TapReceiverObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::TapReceiverObject>>>>::__deallocate_node(void *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    do
    {
      uint64_t v2 = (void *)*v1;
      std::unique_ptr<Phase::Controller::TapReceiverObject>::reset[abi:ne180100](v1 + 4);
      operator delete(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
}

uint64_t std::unordered_map<unsigned long,unsigned long long>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  UniqueObjectId v5 = *(void **)(a2 + 16);
  if (v5)
  {
    UniqueObjectId v6 = (void *)(a1 + 16);
    unint64_t v7 = *(void *)(a1 + 8);
    do
    {
      unint64_t v8 = v5[2];
      if (v7)
      {
        uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
        v9.i16[0] = vaddlv_u8(v9);
        if (v9.u32[0] > 1uLL)
        {
          unint64_t v2 = v5[2];
          if (v7 <= v8) {
            unint64_t v2 = v8 % v7;
          }
        }
        else
        {
          unint64_t v2 = (v7 - 1) & v8;
        }
        __int16 v10 = *(void **)(*(void *)a1 + 8 * v2);
        if (v10)
        {
          for (uint64_t i = (void *)*v10; i; uint64_t i = (void *)*i)
          {
            unint64_t v12 = i[1];
            if (v12 == v8)
            {
              if (i[2] == v8) {
                goto LABEL_41;
              }
            }
            else
            {
              if (v9.u32[0] > 1uLL)
              {
                if (v12 >= v7) {
                  v12 %= v7;
                }
              }
              else
              {
                v12 &= v7 - 1;
              }
              if (v12 != v2) {
                break;
              }
            }
          }
        }
      }
      uint64_t v13 = operator new(0x20uLL);
      void *v13 = 0;
      v13[1] = v8;
      *((_OWORD *)v13 + 1) = *((_OWORD *)v5 + 1);
      float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
      float v15 = *(float *)(a1 + 32);
      if (!v7 || (float)(v15 * (float)v7) < v14)
      {
        BOOL v16 = (v7 & (v7 - 1)) != 0;
        if (v7 < 3) {
          BOOL v16 = 1;
        }
        unint64_t v17 = v16 | (2 * v7);
        unint64_t v18 = vcvtps_u32_f32(v14 / v15);
        if (v17 <= v18) {
          size_t v19 = v18;
        }
        else {
          size_t v19 = v17;
        }
        std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>(a1, v19);
        unint64_t v7 = *(void *)(a1 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v7 <= v8) {
            unint64_t v2 = v8 % v7;
          }
          else {
            unint64_t v2 = v8;
          }
        }
        else
        {
          unint64_t v2 = (v7 - 1) & v8;
        }
      }
      uint64_t v20 = *(void *)a1;
      unint64_t v21 = *(void **)(*(void *)a1 + 8 * v2);
      if (v21)
      {
        void *v13 = *v21;
      }
      else
      {
        void *v13 = *v6;
        void *v6 = v13;
        *(void *)(v20 + 8 * v2) = v6;
        if (!*v13) {
          goto LABEL_40;
        }
        unint64_t v22 = *(void *)(*v13 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v22 >= v7) {
            v22 %= v7;
          }
        }
        else
        {
          v22 &= v7 - 1;
        }
        unint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
      }
      *unint64_t v21 = v13;
LABEL_40:
      ++*(void *)(a1 + 24);
LABEL_41:
      UniqueObjectId v5 = (void *)*v5;
    }
    while (v5);
  }
  return a1;
}

void sub_2220883A8(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<Phase::Controller::TapReceiverObject>::reset[abi:ne180100](uint64_t *a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(result);
    JUMPOUT(0x223C938A0);
  }
  return result;
}

void std::__hash_table<std::__hash_value_type<unsigned long,unsigned long long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long long>>>::__emplace_unique_key_args<unsigned long,unsigned long &,unsigned long long &>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = a2;
      if (v9 <= a2) {
        unint64_t v4 = a2 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & a2;
    }
    uint64_t v11 = *(void **)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      for (uint64_t i = (void *)*v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == a2)
        {
          if (i[2] == a2) {
            return;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4) {
            break;
          }
        }
      }
    }
  }
  float v14 = operator new(0x20uLL);
  *float v14 = 0;
  v14[1] = a2;
  void v14[2] = a3;
  _OWORD v14[3] = a4;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= a2) {
        unint64_t v4 = a2 % v9;
      }
      else {
        unint64_t v4 = a2;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & a2;
    }
  }
  uint64_t v21 = *(void *)a1;
  unint64_t v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *float v14 = *v22;
LABEL_38:
    *unint64_t v22 = v14;
    goto LABEL_39;
  }
  *float v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v21 + 8 * v4) = a1 + 16;
  if (*v14)
  {
    unint64_t v23 = *(void *)(*v14 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9) {
        v23 %= v9;
      }
    }
    else
    {
      v23 &= v9 - 1;
    }
    unint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
}

void sub_222088620(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::TapReceiverObject *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::_addOrReplace(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = (std::mutex *)(a1 + 80);
  std::mutex::lock((std::mutex *)(a1 + 80));
  unint64_t v9 = (_DWORD *)atomic_load((unint64_t *)(a1 + 40));
  int v10 = *(_DWORD *)(a1 + 32) + 1;
  *(_DWORD *)(a1 + 32) = v10;
  if (v9)
  {
    unsigned int v11 = 16 * v10;
    unsigned int v12 = v9[2];
    if (v11 / v12 < 0xB) {
      goto LABEL_6;
    }
    unsigned int v13 = 2 * v12;
  }
  else
  {
    unsigned int v13 = 8;
  }
  unint64_t v9 = caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::TapReceiverObject *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::rehash((unint64_t *)a1, v13);
LABEL_6:
  if ((caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl::findSlotForKey((uint64_t)v9, a2, a3) & 1) == 0)operator new(); {
  *(void *)(v14 + 24) = a4;
  }
  --*(_DWORD *)(a1 + 32);

  std::mutex::unlock(v8);
}

void sub_222088748(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

_DWORD *caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::TapReceiverObject *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::rehash(unint64_t *a1, unsigned int a2)
{
  unint64_t v4 = a1 + 5;
  unint64_t v5 = atomic_load(a1 + 5);
  UniqueObjectId v6 = operator new(8 * (a2 - 1) + 24);
  *(void *)UniqueObjectId v6 = a1;
  void v6[2] = a2;
  bzero(v6 + 4, 8 * a2);
  if (v5)
  {
    uint64_t v7 = *(unsigned int *)(v5 + 8);
    if (v7)
    {
      unint64_t v8 = (unint64_t *)(v5 + 16);
      do
      {
        unint64_t v9 = *v8;
        if (*v8 + 1 >= 2)
        {
          unint64_t SlotForKey = caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl::findSlotForKey((uint64_t)v6, *(void *)(v9 + 8), *(void *)(v9 + 16));
          if ((SlotForKey & 1) == 0)
          {
            atomic_fetch_add((atomic_uint *volatile)v9, 0x10000u);
            atomic_store(v9, (unint64_t *)&v6[2 * HIDWORD(SlotForKey) + 4]);
          }
        }
        ++v8;
        --v7;
      }
      while (v7);
    }
    atomic_store((unint64_t)v6, a1 + 5);
    unsigned int v12 = (uint64_t *)a1[8];
    unint64_t v11 = a1[9];
    if ((unint64_t)v12 >= v11)
    {
      uint64_t v14 = (void *)a1[7];
      uint64_t v15 = v12 - v14;
      unint64_t v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 61) {
        std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v17 = v11 - (void)v14;
      if (v17 >> 2 > v16) {
        unint64_t v16 = v17 >> 2;
      }
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v18 = v16;
      }
      if (v18)
      {
        if (v18 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v19 = (char *)operator new(8 * v18);
      }
      else
      {
        unint64_t v19 = 0;
      }
      size_t v20 = (unint64_t *)&v19[8 * v15];
      uint64_t v21 = &v19[8 * v18];
      unint64_t *v20 = v5;
      unsigned int v13 = v20 + 1;
      if (v12 == v14)
      {
        a1[7] = (unint64_t)v20;
        a1[8] = (unint64_t)v13;
        a1[9] = (unint64_t)v21;
      }
      else
      {
        do
        {
          unint64_t v22 = *--v12;
          uint64_t *v12 = 0;
          *--size_t v20 = v22;
        }
        while (v12 != v14);
        unsigned int v12 = (uint64_t *)a1[7];
        unint64_t v23 = (uint64_t *)a1[8];
        a1[7] = (unint64_t)v20;
        a1[8] = (unint64_t)v13;
        a1[9] = (unint64_t)v21;
        while (v23 != v12)
          std::unique_ptr<caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::TapReceiverObject *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl,std::default_delete<caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::TapReceiverObject *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl>>::reset[abi:ne180100](--v23);
      }
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      uint64_t *v12 = v5;
      unsigned int v13 = v12 + 1;
    }
    a1[8] = (unint64_t)v13;
  }
  else
  {
    atomic_store((unint64_t)v6, v4);
  }
  return v6;
}

uint64_t caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::TapReceiverObject *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::emptyReleasePool(uint64_t result)
{
  int v1 = atomic_load((unsigned int *)(result + 48));
  if (v1 <= 0)
  {
    uint64_t v2 = result;
    unint64_t v4 = *(uint64_t **)(result + 56);
    for (uint64_t i = *(uint64_t **)(result + 64);
          i != v4;
          uint64_t result = std::unique_ptr<caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::TapReceiverObject *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl,std::default_delete<caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::TapReceiverObject *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl>>::reset[abi:ne180100](i))
    {
      --i;
    }
    *(void *)(v2 + 64) = v4;
  }
  return result;
}

void std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::TapReceiverObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::TapReceiverObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::TapReceiverObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::TapReceiverObject>>>>::erase(void *a1, uint64_t *a2)
{
  int8x8_t v3 = (int8x8_t)a1[1];
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v3);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    if (v5 >= *(void *)&v3) {
      v5 %= *(void *)&v3;
    }
  }
  else
  {
    v5 &= *(void *)&v3 - 1;
  }
  uint64_t v7 = *(uint64_t **)(*a1 + 8 * v5);
  do
  {
    unint64_t v8 = v7;
    uint64_t v7 = (uint64_t *)*v7;
  }
  while (v7 != a2);
  if (v8 != a1 + 2)
  {
    unint64_t v9 = v8[1];
    if (v6.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }
    else
    {
      v9 &= *(void *)&v3 - 1;
    }
    if (v9 == v5)
    {
LABEL_20:
      if (!v4) {
        goto LABEL_27;
      }
      goto LABEL_21;
    }
  }
  if (!v4) {
    goto LABEL_19;
  }
  unint64_t v10 = *(void *)(v4 + 8);
  if (v6.u32[0] > 1uLL)
  {
    if (v10 >= *(void *)&v3) {
      v10 %= *(void *)&v3;
    }
  }
  else
  {
    v10 &= *(void *)&v3 - 1;
  }
  if (v10 != v5)
  {
LABEL_19:
    *(void *)(*a1 + 8 * vstd::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear(this + 5) = 0;
    uint64_t v4 = *a2;
    goto LABEL_20;
  }
LABEL_21:
  unint64_t v11 = *(void *)(v4 + 8);
  if (v6.u32[0] > 1uLL)
  {
    if (v11 >= *(void *)&v3) {
      v11 %= *(void *)&v3;
    }
  }
  else
  {
    v11 &= *(void *)&v3 - 1;
  }
  if (v11 != v5)
  {
    *(void *)(*a1 + 8 * vstd::__function::__value_func<void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::~__value_func[abi:ne180100](this + 11) = v8;
    uint64_t v4 = *a2;
  }
LABEL_27:
  uint64_t *v8 = v4;
  *a2 = 0;
  --a1[3];
  std::unique_ptr<Phase::Controller::TapReceiverObject>::reset[abi:ne180100](a2 + 4);

  operator delete(a2);
}

void std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::TapReceiverObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::TapReceiverObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::TapReceiverObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::TapReceiverObject>>>>::__emplace_unique_key_args<Phase::UniqueObjectId,Phase::UniqueObjectId&,std::unique_ptr<Phase::Controller::TapReceiverObject>>(uint64_t *a1, void *a2, _OWORD *a3, void *a4)
{
  uint64_t v8 = 0;
  unint64_t v9 = 0xCBF29CE484222325;
  do
    unint64_t v9 = 0x100000001B3 * (v9 ^ *((char *)a2 + v8++));
  while (v8 != 16);
  unint64_t v10 = a1[1];
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
    unsigned int v12 = *(void **)(*a1 + 8 * v4);
    if (v12)
    {
      for (uint64_t i = (void *)*v12; i; uint64_t i = (void *)*i)
      {
        unint64_t v14 = i[1];
        if (v14 == v9)
        {
          if (i[2] == *a2 && i[3] == a2[1]) {
            return;
          }
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
          }
          else
          {
            v14 &= v10 - 1;
          }
          if (v14 != v4) {
            break;
          }
        }
      }
    }
  }
  unint64_t v16 = a1 + 2;
  uint64_t v17 = operator new(0x28uLL);
  *uint64_t v17 = 0;
  v17[1] = v9;
  *((_OWORD *)v17 + 1) = *a3;
  v17[4] = *a4;
  *a4 = 0;
  float v18 = (float)(unint64_t)(a1[3] + 1);
  float v19 = *((float *)a1 + 8);
  if (!v10 || (float)(v19 * (float)v10) < v18)
  {
    BOOL v20 = 1;
    if (v10 >= 3) {
      BOOL v20 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v10);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      int8x8_t prime = (int8x8_t)v22;
    }
    else {
      int8x8_t prime = (int8x8_t)v21;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v10 = a1[1];
    }
    if (*(void *)&prime > v10) {
      goto LABEL_36;
    }
    if (*(void *)&prime < v10)
    {
      unint64_t v30 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v10 < 3 || (uint8x8_t v31 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        unint64_t v30 = std::__next_prime(v30);
      }
      else
      {
        uint64_t v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2) {
          unint64_t v30 = v32;
        }
      }
      if (*(void *)&prime <= v30) {
        int8x8_t prime = (int8x8_t)v30;
      }
      if (*(void *)&prime >= v10)
      {
        unint64_t v10 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_36:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          unint64_t v24 = operator new(8 * *(void *)&prime);
          float v25 = (void *)*a1;
          *a1 = (uint64_t)v24;
          if (v25) {
            operator delete(v25);
          }
          uint64_t v26 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(void *)(*a1 + 8 * v26++) = 0;
          while (*(void *)&prime != v26);
          uint64_t v27 = (void *)*v16;
          if (*v16)
          {
            unint64_t v28 = v27[1];
            uint8x8_t v29 = (uint8x8_t)vcnt_s8(prime);
            v29.i16[0] = vaddlv_u8(v29);
            if (v29.u32[0] > 1uLL)
            {
              if (v28 >= *(void *)&prime) {
                v28 %= *(void *)&prime;
              }
            }
            else
            {
              v28 &= *(void *)&prime - 1;
            }
            *(void *)(*a1 + 8 * v28) = v16;
            long long v33 = (void *)*v27;
            if (*v27)
            {
              do
              {
                unint64_t v34 = v33[1];
                if (v29.u32[0] > 1uLL)
                {
                  if (v34 >= *(void *)&prime) {
                    v34 %= *(void *)&prime;
                  }
                }
                else
                {
                  v34 &= *(void *)&prime - 1;
                }
                if (v34 != v28)
                {
                  if (!*(void *)(*a1 + 8 * v34))
                  {
                    *(void *)(*a1 + 8 * v34) = v27;
                    goto LABEL_61;
                  }
                  *uint64_t v27 = *v33;
                  *long long v33 = **(void **)(*a1 + 8 * v34);
                  **(void **)(*a1 + 8 * v34) = v33;
                  long long v33 = v27;
                }
                unint64_t v34 = v28;
LABEL_61:
                uint64_t v27 = v33;
                long long v33 = (void *)*v33;
                unint64_t v28 = v34;
              }
              while (v33);
            }
          }
          unint64_t v10 = (unint64_t)prime;
          goto LABEL_65;
        }
        __int16 v38 = (void *)*a1;
        *a1 = 0;
        if (v38) {
          operator delete(v38);
        }
        unint64_t v10 = 0;
        a1[1] = 0;
      }
    }
LABEL_65:
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  uint64_t v35 = *a1;
  long long v36 = *(void **)(*a1 + 8 * v4);
  if (v36)
  {
    *uint64_t v17 = *v36;
LABEL_78:
    void *v36 = v17;
    goto LABEL_79;
  }
  *uint64_t v17 = *v16;
  void *v16 = v17;
  *(void *)(v35 + 8 * v4) = v16;
  if (*v17)
  {
    unint64_t v37 = *(void *)(*v17 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v37 >= v10) {
        v37 %= v10;
      }
    }
    else
    {
      v37 &= v10 - 1;
    }
    long long v36 = (void *)(*a1 + 8 * v37);
    goto LABEL_78;
  }
LABEL_79:
  ++a1[3];
}

void sub_222088EF0(_Unwind_Exception *a1)
{
  std::unique_ptr<Phase::Controller::TapReceiverObject>::reset[abi:ne180100](v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<std::__bind<void (Phase::Controller::TapManager::*)(Phase::UniqueObjectId,float *,unsigned long),Phase::Controller::TapManager*,Phase::UniqueObjectId&,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,std::allocator<std::__bind<void (Phase::Controller::TapManager::*)(Phase::UniqueObjectId,float *,unsigned long),Phase::Controller::TapManager*,Phase::UniqueObjectId&,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>>,void ()(float *,unsigned long)>::~__func()
{
}

__n128 std::__function::__func<std::__bind<void (Phase::Controller::TapManager::*)(Phase::UniqueObjectId,float *,unsigned long),Phase::Controller::TapManager*,Phase::UniqueObjectId&,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,std::allocator<std::__bind<void (Phase::Controller::TapManager::*)(Phase::UniqueObjectId,float *,unsigned long),Phase::Controller::TapManager*,Phase::UniqueObjectId&,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>>,void ()(float *,unsigned long)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_26D47B0C8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear(this + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<std::__bind<void (Phase::Controller::TapManager::*)(Phase::UniqueObjectId,float *,unsigned long),Phase::Controller::TapManager*,Phase::UniqueObjectId&,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,std::allocator<std::__bind<void (Phase::Controller::TapManager::*)(Phase::UniqueObjectId,float *,unsigned long),Phase::Controller::TapManager*,Phase::UniqueObjectId&,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>>,void ()(float *,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D47B0C8;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 4std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::__bind<void (Phase::Controller::TapManager::*)(Phase::UniqueObjectId,float *,unsigned long),Phase::Controller::TapManager*,Phase::UniqueObjectId&,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,std::allocator<std::__bind<void (Phase::Controller::TapManager::*)(Phase::UniqueObjectId,float *,unsigned long),Phase::Controller::TapManager*,Phase::UniqueObjectId&,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>>,void ()(float *,unsigned long)>::operator()(void *a1, void *a2, void *a3)
{
  uint64_t v3 = a1[2];
  unint64_t v4 = (uint64_t (*)(void *, void, void, void, void))a1[1];
  unint64_t v5 = (void *)(a1[3] + (v3 >> 1));
  if (v3) {
    unint64_t v4 = *(uint64_t (**)(void *, void, void, void, void))(*v5 + v4);
  }
  return v4(v5, a1[4], a1[5], *a2, *a3);
}

Phase::Controller::PreSpatialTapSourceObject *std::unique_ptr<Phase::Controller::PreSpatialTapSourceObject>::reset[abi:ne180100](Phase::Controller::PreSpatialTapSourceObject **a1)
{
  __n128 result = *a1;
  *a1 = 0;
  if (result)
  {
    Phase::Controller::PreSpatialTapSourceObject::~PreSpatialTapSourceObject(result);
    JUMPOUT(0x223C938A0);
  }
  return result;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::TapSourceObjectInterface>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = __p[4];
    __p[4] = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

uint64_t std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::TapSourceObjectInterface>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::TapSourceObjectInterface>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::TapSourceObjectInterface>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::TapSourceObjectInterface>>>>::erase(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>>>::remove(a1, a2, (uint64_t)&__p);
  uint64_t v3 = __p;
  long long __p = 0;
  if (v3) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::TapSourceObjectInterface>>,void *>>>::operator()[abi:ne180100]((uint64_t)&v6, v3);
  }
  return v2;
}

void Phase::DspLayer::Tapper::GetNewRegistryEntry(Phase::DspLayer::Tapper *this)
{
  uint64_t v2 = *MEMORY[0x263EF8340];
  int v1 = (char *)malloc_type_malloc(0x70uLL, 0x1050040B063AAFAuLL);
  *(void *)int v1 = "TapId";
  *((void *)v1 + 1) = 0x500000000;
  *(void *)(v1 + 2std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = 0;
  *((_DWORD *)v1 + 7) = 3;
  *((_OWORD *)v1 + 2) = xmmword_2220A4F90;
  *((void *)v1 + 6) = 0;
  *((void *)v1 + 7) = "Start Position";
  *((void *)v1 + 8) = 0x500000001;
  *(void *)(v1 + 76) = 0;
  *((_DWORD *)v1 + 21) = 3;
  *(_OWORD *)(v1 + 88) = xmmword_2220E8650;
  *((void *)v1 + 1objc_destroyWeak(this + 3) = 0;
  operator new();
}

void sub_2220892CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Phase::DspLayer::Tapper::~Tapper(Phase::DspLayer::Tapper *this)
{
  Phase::DspLayer::VoicePool::~VoicePool(this);

  JUMPOUT(0x223C938A0);
}

void anonymous namespace'::TapperSlice::~TapperSlice(_anonymous_namespace_::TapperSlice *this)
{
}

double anonymous namespace'::TapperSlice::Reset(_OWORD *a1)
{
  a1[264] = 0u;
  a1[263] = 0u;
  a1[262] = 0u;
  a1[525] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  (*(void (**)(_OWORD *))(*(void *)a1 + 48))(a1);
  double result = 0.0;
  a1[527] = 0u;
  a1[526] = 0u;
  return result;
}

uint64_t anonymous namespace'::TapperSlice::Reset(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = a1 + 8 * a3;
  *(void *)(v5 + 16) = 0;
  uint64_t v6 = (_DWORD *)(a1 + 4 * a3);
  v6[12] = 0;
  v6[16] = 0;
  v6[20] = 0;
  *(void *)(a1 + 4192 + 8 * aobjc_destroyWeak(this + 3) = 0;
  *(_DWORD *)(a1 + 4192 + 4 * a3 + 32) = 0;
  v6[2100] = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  *(void *)(v5 + 8416) = a4;
  return result;
}

uint64_t anonymous namespace'::TapperSlice::GetParameter(_anonymous_namespace_::TapperSlice *this, int a2)
{
  if (a2 == 1) {
    return 0;
  }
  if (a2) {
    return 9;
  }
  return 0;
}

uint64_t anonymous namespace'::TapperSlice::SetParameter(_anonymous_namespace_::TapperSlice *this, int a2, int a3, double a4)
{
  if (a2 == 1)
  {
    uint64_t v6 = (char *)this + 4 * a3;
    int v8 = *((_DWORD *)v6 + 12);
    uint64_t v7 = v6 + 48;
    uint64_t result = 0;
    if (v8 != (int)a4)
    {
      _DWORD *v7 = (int)a4;
      *((_DWORD *)this + a3 + 16) = 1;
    }
  }
  else if (a2)
  {
    return 9;
  }
  else
  {
    uint64_t result = 0;
    *((void *)this + a3 + 2) = (uint64_t)a4;
  }
  return result;
}

void *anonymous namespace'::TapperSlice::UpdateParameters(_OWORD *a1)
{
  uint64_t v1 = 0;
  uint64_t v6 = *MEMORY[0x263EF8340];
  a1[522] = a1[262];
  a1[523] = a1[263];
  a1[524] = a1[264];
  v5[0] = a1[3];
  v5[1] = xmmword_2220A4FB0;
  do
  {
    *((_DWORD *)a1 + *(int *)((char *)&v5[1] + v1) + 210std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = *(_DWORD *)((char *)v5 + v1);
    v1 += 4;
  }
  while (v1 != 16);
  uint64_t v2 = a1 + 5;
  uint64_t v3 = a1 + 265;

  return memcpy(v3, v2, 0x1010uLL);
}

float anonymous namespace'::TapperSlice::UpdateParameters(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)(a1 + 8352 + 8 * aobjc_destroyWeak(this + 3) = *(void *)(a1 + 4192 + 8 * a3);
  *(_DWORD *)(a1 + 8352 + 4 * a3 + 32) = *(_DWORD *)(a1 + 4192 + 4 * a3 + 32);
  uint64_t v3 = a1 + 4 * a3;
  int v5 = *(_DWORD *)(v3 + 64);
  unint64_t v4 = (_DWORD *)(v3 + 64);
  if (v5)
  {
    *(_DWORD *)(a1 + 4 * a3 + 840std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = *(_DWORD *)(a1 + 4 * a3 + 48);
    _DWORD *v4 = 0;
  }
  uint64_t v6 = a1 + 4 * a3;
  uint64_t v7 = *(unsigned int *)(v6 + 80);
  *(_DWORD *)(v6 + 424std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = v7;
  if ((int)v7 >= 1)
  {
    do
    {
      *(_DWORD *)(v6 + 4256) = *(_DWORD *)(v6 + 96);
      float result = *(float *)(v6 + 112);
      *(float *)(v6 + 4272) = result;
      v6 += 32;
      --v7;
    }
    while (v7);
  }
  return result;
}

int8x16_t anonymous namespace'::TapperSlice::Run(int8x16_t *this, Phase::DspLayer::VoiceEngine *a2, Phase::DspLayer::VoicePool *a3, unsigned int a4)
{
  v34[1] = *MEMORY[0x263EF8340];
  int32x4_t v5 = (int32x4_t)vandq_s8(this[265], (int8x16_t)vcgtq_s32(vdupq_n_s32(a4), (int32x4_t)xmmword_2220A5190));
  int64x2_t v6 = (int64x2_t)vcgtzq_s32(v5);
  if (vorrq_s8((int8x16_t)vdupq_laneq_s64(v6, 1), (int8x16_t)v6).u64[0])
  {
    uint64_t v7 = *((void *)a2 + 7);
    int v8 = (float32x4_t *)&this[267];
    float32x4_t v9 = 0uLL;
    int32x4_t v10 = 0uLL;
    v11.i64[0] = 0x100000001;
    v11.i64[1] = 0x100000001;
    do
    {
      v12.i32[0] = *(_DWORD *)(v7 + 4 * v8[-1].i32[0]);
      v12.i32[1] = *(_DWORD *)(v7 + 4 * v8[-1].i32[1]);
      v12.i32[2] = *(_DWORD *)(v7 + 4 * v8[-1].i32[2]);
      v12.i32[3] = *(_DWORD *)(v7 + 4 * v8[-1].i32[3]);
      float32x4_t v9 = vmlaq_f32(v9, (float32x4_t)vandq_s8((int8x16_t)v6, v12), *v8);
      int32x4_t v10 = vaddq_s32(v10, v11);
      int64x2_t v6 = (int64x2_t)vcgtq_s32(v5, v10);
      v8 += 2;
    }
    while (vorrq_s8((int8x16_t)vdupq_laneq_s64(v6, 1), (int8x16_t)v6).u64[0]);
  }
  else
  {
    float32x4_t v9 = 0uLL;
  }
  int32x4_t v13 = (int32x4_t)this[525];
  HIDWORD(v14) = a4 - 1;
  LODWORD(v14) = a4 - 1;
  int8x16_t v15 = vandq_s8((int8x16_t)v9, vorrq_s8((int8x16_t)vcltzq_f32(v9), (int8x16_t)vcgezq_f32(v9)));
  switch((v14 >> 1))
  {
    case 0u:
      goto LABEL_10;
    case 1u:
      goto LABEL_9;
    case 3u:
      goto LABEL_8;
    case 7u:
      *(_DWORD *)(this[523].i64[1] + 4 * v13.i32[3]) = v15.i32[3];
LABEL_8:
      *(_DWORD *)(this[523].i64[0] + 4 * v13.i32[2]) = v15.i32[2];
LABEL_9:
      *(_DWORD *)(this[522].i64[1] + 4 * v13.i32[1]) = v15.i32[1];
LABEL_10:
      *(_DWORD *)(this[522].i64[0] + 4 * v13.i32[0]) = v15.i32[0];
      break;
    default:
      break;
  }
  v16.i64[0] = 0x100000001;
  v16.i64[1] = 0x100000001;
  uint64_t v17 = (const float *)((char *)a2 + 24);
  int32x4_t v18 = (int32x4_t)vld1q_dup_f32(v17);
  int32x4_t v19 = vaddq_s32(v13, v16);
  int8x16_t v20 = (int8x16_t)vcgtq_s32(v18, v19);
  int8x16_t v21 = vbicq_s8((int8x16_t)xmmword_2220E7D80, v20);
  int32x4_t v22 = (int32x4_t)vorrq_s8(vextq_s8(v21, v21, 8uLL), v21);
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s32(v22, 3), (int8x16_t)v22).u32[0] & a4) != 0)
  {
    MEMORY[0x270FA5388](this);
    v34[0] = v29;
    v29[0] = 0;
    v29[1] = 0;
    v33[0] = 1;
    v33[2] = 2;
    int32x4_t v31 = v24;
    int32x4_t v32 = v23;
    int8x16_t v30 = v25;
    Phase::DspLayer::VoicePool::ExternalCallbackWithMessage(v26, 0, this[526].i64, v27, v33, v34);
    int8x16_t v20 = v30;
    int32x4_t v18 = v31;
    int32x4_t v19 = v32;
  }
  int8x16_t result = (int8x16_t)vsubq_s32(v19, (int32x4_t)vbicq_s8((int8x16_t)v18, v20));
  this[525] = result;
  return result;
}

uint64_t anonymous namespace'::TapperSlice::CopyVoiceState(uint64_t this, Phase::DspLayer::VoicePoolSlice *a2, unsigned int a3, signed int a4)
{
  *(void *)(this + 8 * a4 + 16) = *((void *)a2 + (int)a3 + 2);
  unint64_t v4 = (_DWORD *)((char *)a2 + 4 * (int)a3);
  int32x4_t v5 = (_DWORD *)(this + 4 * a4);
  v5[12] = v4[12];
  v5[16] = v4[16];
  uint64_t v6 = v4[20];
  v5[20] = v6;
  if ((int)v6 >= 1)
  {
    uint64_t v7 = (_DWORD *)(this + 4 * a4 + 112);
    int v8 = (int *)((char *)a2 + 4 * (int)a3 + 112);
    do
    {
      *(v7 - 4) = *(v8 - 4);
      int v9 = *v8;
      v8 += 8;
      _DWORD *v7 = v9;
      v7 += 8;
      --v6;
    }
    while (v6);
  }
  uint64_t v10 = this + 4 * a4;
  int32x4_t v11 = (char *)a2 + 4 * (int)a3;
  uint64_t v12 = *((unsigned int *)v11 + 1060);
  *(_DWORD *)(v10 + 424std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = v12;
  if ((int)v12 >= 1)
  {
    int32x4_t v13 = (_DWORD *)(v10 + 4272);
    unint64_t v14 = (int *)(v11 + 4272);
    do
    {
      *(v13 - 4) = *(v14 - 4);
      int v15 = *v14;
      v14 += 8;
      _DWORD *v13 = v15;
      v13 += 8;
      --v12;
    }
    while (v12);
  }
  *(void *)(this + 4192 + 8 * a4) = *((void *)a2 + (int)a3 + 524);
  *(void *)(this + 8352 + 8 * a4) = *((void *)a2 + (int)a3 + 1044);
  *(_DWORD *)(this + 4192 + 4 * a4 + 32) = *((_DWORD *)a2 + (int)a3 + 1056);
  *(_DWORD *)(this + 8352 + 4 * a4 + 32) = *((_DWORD *)a2 + (int)a3 + 2096);
  if (a3 >= 4) {
    __assert_rtn("Copy", "DelaylineLinear.hpp", 507, "fromLane >= 0 && fromLane < PHASE_SIMD_WIDTH");
  }
  if (a4 >= 4) {
    __assert_rtn("Copy", "DelaylineLinear.hpp", 508, "toLane >= 0 && toLane < PHASE_SIMD_WIDTH");
  }
  *(_DWORD *)(this + 4 * a4 + 840std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = *((_DWORD *)a2 + a3 + 2100);
  *(void *)(this + 8 * a4 + 8416) = *((void *)a2 + (int)a3 + 1052);
  return this;
}

uint64_t anonymous namespace'::TapperSlice::AddInput(_anonymous_namespace_::TapperSlice *this, int a2, int a3, int a4, float a5)
{
  if (a2) {
    return 8;
  }
  uint64_t v7 = (char *)this + 80;
  uint64_t v8 = *((int *)this + a3 + 20);
  if ((int)v8 > 127) {
    return 6;
  }
  uint64_t result = 0;
  int v9 = (char *)this + 32 * v8 + 4 * a3;
  *((_DWORD *)v9 + 24) = a4;
  *((float *)v9 + 28) = a5;
  *(_DWORD *)&v7[4 * a3] = v8 + 1;
  return result;
}

uint64_t anonymous namespace'::TapperSlice::RemoveInput(_anonymous_namespace_::TapperSlice *this, int a2, int a3, int a4)
{
  if (a2) {
    return 8;
  }
  else {
    return Phase::DspLayer::VoiceConnectionList<128>::RemoveConnection((uint64_t)this + 80, a3, a4);
  }
}

uint64_t anonymous namespace'::TapperSlice::SetInputGain(_anonymous_namespace_::TapperSlice *this, int a2, int a3, int a4, float a5)
{
  if (a2) {
    return 8;
  }
  uint64_t v6 = *((unsigned int *)this + a3 + 20);
  if ((int)v6 < 1) {
    return 7;
  }
  uint64_t v7 = 0;
  for (uint64_t i = (float *)((char *)this + 4 * a3 + 112); *((_DWORD *)i - 4) != a4; i += 8)
  {
    if (v6 == ++v7) {
      return 7;
    }
  }
  if ((v7 & 0x80000000) != 0) {
    return 7;
  }
  uint64_t result = 0;
  *uint64_t i = a5;
  return result;
}

void anonymous namespace'::TapperSlice::GetInputs(_anonymous_namespace_::TapperSlice *this@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (a2)
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    Phase::DspLayer::VoiceConnectionList<128>::GetConnections((uint64_t)this + 80, a3, (char **)a4);
  }
}

uint64_t anonymous namespace'::TapperSlice::ClearInputs(_anonymous_namespace_::TapperSlice *this, int a2)
{
  *((_DWORD *)this + a2 + 2std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = 0;
  return 0;
}

uint64_t anonymous namespace'::TapperSlice::GetMaximumInputConnectionCount(_anonymous_namespace_::TapperSlice *this, int a2)
{
  return (a2 == 0) << 7;
}

uint64_t Phase::DspLayer::VoicePoolSlice::GetOutput(Phase::DspLayer::VoicePoolSlice *this)
{
  return 0xFFFFFFFF00000008;
}

uint64_t Phase::DspLayer::VoicePoolSlice::SetOutput(Phase::DspLayer::VoicePoolSlice *this)
{
  return 8;
}

uint64_t anonymous namespace'::TapperSlice::GetBuffer@<X0>(uint64_t this@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (a2)
  {
    uint64_t v4 = 0;
    int v5 = -1;
    int v6 = 10;
  }
  else
  {
    int v6 = 0;
    uint64_t v4 = *(void *)(this + 4192 + 8 * a3);
    int v5 = *(_DWORD *)(this + 4192 + 4 * a3 + 32);
  }
  *(_DWORD *)a4 = v6;
  *(void *)(a4 + 8) = v4;
  *(_DWORD *)(a4 + 16) = v5;
  return this;
}

uint64_t anonymous namespace'::TapperSlice::SetBuffer(_anonymous_namespace_::TapperSlice *this, int a2, int a3, void *a4, int a5)
{
  if (a2) {
    return 10;
  }
  uint64_t result = 0;
  this = (_anonymous_namespace_::TapperSlice *)((char *)this + 4192);
  *((void *)this + aobjc_destroyWeak(this + 3) = a4;
  *((_DWORD *)this + a3 + 8) = a5;
  return result;
}

void std::__function::__func<Phase::DspLayer::Tapper::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::Tapper::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::~__func()
{
}

void *std::__function::__func<Phase::DspLayer::Tapper::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::Tapper::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26D47B208;
  return result;
}

void std::__function::__func<Phase::DspLayer::Tapper::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::Tapper::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D47B208;
}

void std::__function::__func<Phase::DspLayer::Tapper::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::Tapper::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::operator()()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void sub_222089D94(_Unwind_Exception *a1)
{
  MEMORY[0x223C938A0](v1, 0x10F1C408EBD29CELL);
  _Unwind_Resume(a1);
}

Phase::Dispatch::TapsClientCommandProcessor *Phase::Dispatch::TapsClientCommandProcessor::TapsClientCommandProcessor(Phase::Dispatch::TapsClientCommandProcessor *this, Phase::Dispatch::TapsClientInterface *a2, Phase::Controller::TaskManager *a3)
{
  int v6 = (void *)Phase::Dispatch::TransactionExecutor<Phase::Dispatch::TapsServerMessageType>::TransactionExecutor((uint64_t)this);
  void *v6 = &unk_26D47B250;
  v6[10] = a2;
  uint64_t v7 = Phase::Controller::TaskManager::GetService<Phase::Controller::ClientTapRegistryProxy>(a3, 16);
  *((void *)this + std::__function::__value_func<void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::~__value_func[abi:ne180100](this + 11) = v7;
  if (!v7) {
    std::terminate();
  }
  return this;
}

void sub_222089E28(_Unwind_Exception *a1)
{
  Phase::Dispatch::TransactionExecutor<Phase::Dispatch::TapsServerMessageType>::~TransactionExecutor(v1);
  _Unwind_Resume(a1);
}

uint64_t Phase::Dispatch::TransactionExecutor<Phase::Dispatch::TapsServerMessageType>::TransactionExecutor(uint64_t a1)
{
  *(void *)a1 = &unk_26D474C38;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 4std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = 1065353216;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  id v2 = objc_alloc_init(MEMORY[0x263EFF980]);
  uint64_t v3 = *(void **)(a1 + 72);
  *(void *)(a1 + 72) = v2;

  return a1;
}

void sub_222089EB8(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::~__hash_table(v2);
  _Unwind_Resume(a1);
}

Phase::Dispatch::TapsClientDirectDispatcher *Phase::Dispatch::TapsClientDirectDispatcher::TapsClientDirectDispatcher(Phase::Dispatch::TapsClientDirectDispatcher *this, Phase::Controller::TaskManager *a2)
{
  *(void *)this = &unk_26D47B278;
  *((void *)this + 1) = 0;
  uint64_t v3 = Phase::Controller::TaskManager::GetService<Phase::Controller::TapManager>(a2, 18);
  *((void *)this + 1) = v3;
  if (!v3) {
    std::terminate();
  }
  return this;
}

uint64_t Phase::Controller::TaskManager::GetService<Phase::Controller::TapManager>(Phase::Logger *a1, int a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v3 = *((void *)a1 + 6);
  if (a2 >= (unint64_t)((*((void *)a1 + 7) - v3) >> 5))
  {
    uint64_t v7 = **(id **)(Phase::Logger::GetInstance(a1) + 448);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      unint64_t v14 = "TaskManager.hpp";
      __int16 v15 = 1024;
      int v16 = 112;
      _os_log_impl(&dword_221E5E000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: pId < mServiceRegistry.size() is false.", buf, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](exception, "PRECONDITION: pId < mServiceRegistry.size() is false.");
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v3 + 32 * a2);
  if (!v4)
  {
    int v9 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(a1)
                                                                                       + 448)));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      Phase::GetBacktraceFrame<1ul>(&__p);
      uint64_t v10 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)int buf = 136315906;
      unint64_t v14 = "TaskManager.hpp";
      __int16 v15 = 1024;
      int v16 = 121;
      __int16 v17 = 1024;
      int v18 = a2;
      __int16 v19 = 2080;
      int8x16_t v20 = v10;
      _os_log_impl(&dword_221E5E000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::domain_error) [not lService.has_value() is true]: \"No service registered for Id %i, in call \\n%s\"", buf, 0x22u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }

    int32x4_t v11 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](v11, "No service registered for Id %i, in call \n%s");
  }
  uint64_t v5 = v4(3);
  if (!v5) {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  return *(void *)v5;
}

void sub_22208A22C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_22208A33C(_Unwind_Exception *a1)
{
}

void sub_22208A35C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t Phase::Dispatch::TapsClientDirectDispatcher::TapCreatePreSpatialTap(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = **(void **)(v9 + 8);
  unint64_t v18 = 0;
  BOOL v17 = 1;
  int32x4_t v11 = (void *)Phase::LockFreeQueueMPSC::GetWriteBuffer((atomic_uchar *)v10, 48, &v18, &v17);
  if (!v11)
  {
    uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance(0);
    Phase::Logger::DumpTailspinWithThrottleAsync(Instance, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
    __int16 v15 = **(id **)(v10 + 48);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      int8x16_t v20 = "CommandQueue.hpp";
      __int16 v21 = 1024;
      int v22 = 100;
      _os_log_impl(&dword_221E5E000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [true is true]: \"CommandQueue unable to retrieve write buffer; buffer "
        "is full, unable to grow.\"",
        buf,
        0x12u);
    }
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
  }
  if (v17)
  {
    uint64_t v12 = **(id **)(v10 + 48);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 136315906;
      int8x16_t v20 = "CommandQueue.hpp";
      __int16 v21 = 1024;
      int v22 = 89;
      __int16 v23 = 2048;
      unint64_t v24 = v18;
      __int16 v25 = 2048;
      uint64_t v26 = 48;
      _os_log_impl(&dword_221E5E000, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: CommandQueue grew buffer to %zu bytes to accommodate extra %zu bytes - this usually means the system is under load or the command queue is too small.", buf, 0x26u);
    }
  }
  void *v11 = &unk_26D47B2F0;
  v11[1] = v9;
  uint64_t v11[2] = a2;
  v11[3] = a3;
  void v11[4] = a4;
  v11[5] = a5;
  uint64_t result = Phase::LockFreeQueueSPSC::CommitBytes((atomic_uchar *)v10, 48);
  atomic_store(0, (unsigned __int8 *)(v10 + 40));
  return result;
}

void sub_22208A5A0(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x22208A4B4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Dispatch::TapsClientDirectDispatcher::TapRemovePreSpatialTap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = **(void **)(v5 + 8);
  unint64_t v14 = 0;
  BOOL v13 = 1;
  uint64_t v7 = (void *)Phase::LockFreeQueueMPSC::GetWriteBuffer((atomic_uchar *)v6, 32, &v14, &v13);
  if (!v7)
  {
    uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance(0);
    Phase::Logger::DumpTailspinWithThrottleAsync(Instance, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
    int32x4_t v11 = **(id **)(v6 + 48);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      int v16 = "CommandQueue.hpp";
      __int16 v17 = 1024;
      int v18 = 100;
      _os_log_impl(&dword_221E5E000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [true is true]: \"CommandQueue unable to retrieve write buffer; buffer "
        "is full, unable to grow.\"",
        buf,
        0x12u);
    }
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
  }
  if (v13)
  {
    uint64_t v8 = **(id **)(v6 + 48);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 136315906;
      int v16 = "CommandQueue.hpp";
      __int16 v17 = 1024;
      int v18 = 89;
      __int16 v19 = 2048;
      unint64_t v20 = v14;
      __int16 v21 = 2048;
      uint64_t v22 = 32;
      _os_log_impl(&dword_221E5E000, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: CommandQueue grew buffer to %zu bytes to accommodate extra %zu bytes - this usually means the system is under load or the command queue is too small.", buf, 0x26u);
    }
  }
  void *v7 = &unk_26D47B318;
  v7[1] = v5;
  void v7[2] = a2;
  v7[3] = a3;
  uint64_t result = Phase::LockFreeQueueSPSC::CommitBytes((atomic_uchar *)v6, 32);
  atomic_store(0, (unsigned __int8 *)(v6 + 40));
  return result;
}

void sub_22208A810(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x22208A728);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Dispatch::TapsClientDirectDispatcher::TapRegisterSubmix(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = **(void **)(v9 + 8);
  unint64_t v18 = 0;
  BOOL v17 = 1;
  int32x4_t v11 = (void *)Phase::LockFreeQueueMPSC::GetWriteBuffer((atomic_uchar *)v10, 48, &v18, &v17);
  if (!v11)
  {
    uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance(0);
    Phase::Logger::DumpTailspinWithThrottleAsync(Instance, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
    __int16 v15 = **(id **)(v10 + 48);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      unint64_t v20 = "CommandQueue.hpp";
      __int16 v21 = 1024;
      int v22 = 100;
      _os_log_impl(&dword_221E5E000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [true is true]: \"CommandQueue unable to retrieve write buffer; buffer "
        "is full, unable to grow.\"",
        buf,
        0x12u);
    }
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
  }
  if (v17)
  {
    uint64_t v12 = **(id **)(v10 + 48);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 136315906;
      unint64_t v20 = "CommandQueue.hpp";
      __int16 v21 = 1024;
      int v22 = 89;
      __int16 v23 = 2048;
      unint64_t v24 = v18;
      __int16 v25 = 2048;
      uint64_t v26 = 48;
      _os_log_impl(&dword_221E5E000, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: CommandQueue grew buffer to %zu bytes to accommodate extra %zu bytes - this usually means the system is under load or the command queue is too small.", buf, 0x26u);
    }
  }
  void *v11 = &unk_26D47B340;
  v11[1] = v9;
  uint64_t v11[2] = a2;
  v11[3] = a3;
  void v11[4] = a4;
  v11[5] = a5;
  uint64_t result = Phase::LockFreeQueueSPSC::CommitBytes((atomic_uchar *)v10, 48);
  atomic_store(0, (unsigned __int8 *)(v10 + 40));
  return result;
}

void sub_22208AA94(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x22208A9A8);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Dispatch::TapsClientDirectDispatcher::TapDeRegisterSubmix(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = **(void **)(v9 + 8);
  unint64_t v18 = 0;
  BOOL v17 = 1;
  int32x4_t v11 = (void *)Phase::LockFreeQueueMPSC::GetWriteBuffer((atomic_uchar *)v10, 48, &v18, &v17);
  if (!v11)
  {
    uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance(0);
    Phase::Logger::DumpTailspinWithThrottleAsync(Instance, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
    __int16 v15 = **(id **)(v10 + 48);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      unint64_t v20 = "CommandQueue.hpp";
      __int16 v21 = 1024;
      int v22 = 100;
      _os_log_impl(&dword_221E5E000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [true is true]: \"CommandQueue unable to retrieve write buffer; buffer "
        "is full, unable to grow.\"",
        buf,
        0x12u);
    }
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
  }
  if (v17)
  {
    uint64_t v12 = **(id **)(v10 + 48);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 136315906;
      unint64_t v20 = "CommandQueue.hpp";
      __int16 v21 = 1024;
      int v22 = 89;
      __int16 v23 = 2048;
      unint64_t v24 = v18;
      __int16 v25 = 2048;
      uint64_t v26 = 48;
      _os_log_impl(&dword_221E5E000, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: CommandQueue grew buffer to %zu bytes to accommodate extra %zu bytes - this usually means the system is under load or the command queue is too small.", buf, 0x26u);
    }
  }
  void *v11 = &unk_26D47B368;
  v11[1] = v9;
  uint64_t v11[2] = a2;
  v11[3] = a3;
  void v11[4] = a4;
  v11[5] = a5;
  uint64_t result = Phase::LockFreeQueueSPSC::CommitBytes((atomic_uchar *)v10, 48);
  atomic_store(0, (unsigned __int8 *)(v10 + 40));
  return result;
}

void sub_22208AD18(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x22208AC2CLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Dispatch::TapsClientDirectDispatcher::TapRegisterSource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = **(void **)(v7 + 8);
  unint64_t v16 = 0;
  BOOL v15 = 1;
  uint64_t v9 = (void *)Phase::LockFreeQueueMPSC::GetWriteBuffer((atomic_uchar *)v8, 40, &v16, &v15);
  if (!v9)
  {
    uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance(0);
    Phase::Logger::DumpTailspinWithThrottleAsync(Instance, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
    BOOL v13 = **(id **)(v8 + 48);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      unint64_t v18 = "CommandQueue.hpp";
      __int16 v19 = 1024;
      int v20 = 100;
      _os_log_impl(&dword_221E5E000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [true is true]: \"CommandQueue unable to retrieve write buffer; buffer "
        "is full, unable to grow.\"",
        buf,
        0x12u);
    }
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
  }
  if (v15)
  {
    uint64_t v10 = **(id **)(v8 + 48);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 136315906;
      unint64_t v18 = "CommandQueue.hpp";
      __int16 v19 = 1024;
      int v20 = 89;
      __int16 v21 = 2048;
      unint64_t v22 = v16;
      __int16 v23 = 2048;
      uint64_t v24 = 40;
      _os_log_impl(&dword_221E5E000, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: CommandQueue grew buffer to %zu bytes to accommodate extra %zu bytes - this usually means the system is under load or the command queue is too small.", buf, 0x26u);
    }
  }
  *uint64_t v9 = &unk_26D47B390;
  v9[1] = v7;
  v9[2] = a2;
  v9[3] = a3;
  void v9[4] = a4;
  uint64_t result = Phase::LockFreeQueueSPSC::CommitBytes((atomic_uchar *)v8, 40);
  atomic_store(0, (unsigned __int8 *)(v8 + 40));
  return result;
}

void sub_22208AF98(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x22208AEACLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Dispatch::TapsClientDirectDispatcher::TapDeRegisterSource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = **(void **)(v7 + 8);
  unint64_t v16 = 0;
  BOOL v15 = 1;
  uint64_t v9 = (void *)Phase::LockFreeQueueMPSC::GetWriteBuffer((atomic_uchar *)v8, 40, &v16, &v15);
  if (!v9)
  {
    uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance(0);
    Phase::Logger::DumpTailspinWithThrottleAsync(Instance, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
    BOOL v13 = **(id **)(v8 + 48);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      unint64_t v18 = "CommandQueue.hpp";
      __int16 v19 = 1024;
      int v20 = 100;
      _os_log_impl(&dword_221E5E000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [true is true]: \"CommandQueue unable to retrieve write buffer; buffer "
        "is full, unable to grow.\"",
        buf,
        0x12u);
    }
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
  }
  if (v15)
  {
    uint64_t v10 = **(id **)(v8 + 48);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 136315906;
      unint64_t v18 = "CommandQueue.hpp";
      __int16 v19 = 1024;
      int v20 = 89;
      __int16 v21 = 2048;
      unint64_t v22 = v16;
      __int16 v23 = 2048;
      uint64_t v24 = 40;
      _os_log_impl(&dword_221E5E000, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: CommandQueue grew buffer to %zu bytes to accommodate extra %zu bytes - this usually means the system is under load or the command queue is too small.", buf, 0x26u);
    }
  }
  *uint64_t v9 = &unk_26D47B3B8;
  v9[1] = v7;
  v9[2] = a2;
  v9[3] = a3;
  void v9[4] = a4;
  uint64_t result = Phase::LockFreeQueueSPSC::CommitBytes((atomic_uchar *)v8, 40);
  atomic_store(0, (unsigned __int8 *)(v8 + 40));
  return result;
}

void sub_22208B218(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x22208B12CLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Dispatch::TapsClientDirectDispatcher::TapRegisterTapReceiver(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = **(void **)(v7 + 8);
  unint64_t v16 = 0;
  BOOL v15 = 1;
  uint64_t v9 = (void *)Phase::LockFreeQueueMPSC::GetWriteBuffer((atomic_uchar *)v8, 40, &v16, &v15);
  if (!v9)
  {
    uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance(0);
    Phase::Logger::DumpTailspinWithThrottleAsync(Instance, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
    BOOL v13 = **(id **)(v8 + 48);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      unint64_t v18 = "CommandQueue.hpp";
      __int16 v19 = 1024;
      int v20 = 100;
      _os_log_impl(&dword_221E5E000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [true is true]: \"CommandQueue unable to retrieve write buffer; buffer "
        "is full, unable to grow.\"",
        buf,
        0x12u);
    }
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
  }
  if (v15)
  {
    uint64_t v10 = **(id **)(v8 + 48);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 136315906;
      unint64_t v18 = "CommandQueue.hpp";
      __int16 v19 = 1024;
      int v20 = 89;
      __int16 v21 = 2048;
      unint64_t v22 = v16;
      __int16 v23 = 2048;
      uint64_t v24 = 40;
      _os_log_impl(&dword_221E5E000, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: CommandQueue grew buffer to %zu bytes to accommodate extra %zu bytes - this usually means the system is under load or the command queue is too small.", buf, 0x26u);
    }
  }
  *uint64_t v9 = &unk_26D47B3E0;
  v9[1] = v7;
  v9[2] = a2;
  v9[3] = a3;
  void v9[4] = a4;
  uint64_t result = Phase::LockFreeQueueSPSC::CommitBytes((atomic_uchar *)v8, 40);
  atomic_store(0, (unsigned __int8 *)(v8 + 40));
  return result;
}

void sub_22208B498(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x22208B3ACLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Dispatch::TapsClientDirectDispatcher::TapDeRegisterTapReceiver(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = **(void **)(v5 + 8);
  unint64_t v14 = 0;
  BOOL v13 = 1;
  uint64_t v7 = (void *)Phase::LockFreeQueueMPSC::GetWriteBuffer((atomic_uchar *)v6, 32, &v14, &v13);
  if (!v7)
  {
    uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance(0);
    Phase::Logger::DumpTailspinWithThrottleAsync(Instance, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
    int32x4_t v11 = **(id **)(v6 + 48);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      unint64_t v16 = "CommandQueue.hpp";
      __int16 v17 = 1024;
      int v18 = 100;
      _os_log_impl(&dword_221E5E000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [true is true]: \"CommandQueue unable to retrieve write buffer; buffer "
        "is full, unable to grow.\"",
        buf,
        0x12u);
    }
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
  }
  if (v13)
  {
    uint64_t v8 = **(id **)(v6 + 48);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 136315906;
      unint64_t v16 = "CommandQueue.hpp";
      __int16 v17 = 1024;
      int v18 = 89;
      __int16 v19 = 2048;
      unint64_t v20 = v14;
      __int16 v21 = 2048;
      uint64_t v22 = 32;
      _os_log_impl(&dword_221E5E000, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: CommandQueue grew buffer to %zu bytes to accommodate extra %zu bytes - this usually means the system is under load or the command queue is too small.", buf, 0x26u);
    }
  }
  void *v7 = &unk_26D47B408;
  v7[1] = v5;
  void v7[2] = a2;
  v7[3] = a3;
  uint64_t result = Phase::LockFreeQueueSPSC::CommitBytes((atomic_uchar *)v6, 32);
  atomic_store(0, (unsigned __int8 *)(v6 + 40));
  return result;
}

void sub_22208B708(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x22208B620);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Dispatch::TapsClientDirectDispatcher::GetTransactionBuffer(Phase::Dispatch::TapsClientDirectDispatcher *this)
{
  return 0;
}

void Phase::Dispatch::TapsClientDirectDispatcher::~TapsClientDirectDispatcher(Phase::Dispatch::TapsClientDirectDispatcher *this)
{
}

void Phase::LambdaFunction<Phase::Dispatch::TapsClientDirectDispatcher::TapCreatePreSpatialTap(Phase::UniqueObjectId,PHASETapBinding,PHASETapType)::$_0,void>::~LambdaFunction()
{
}

void Phase::LambdaFunction<Phase::Dispatch::TapsClientDirectDispatcher::TapCreatePreSpatialTap(Phase::UniqueObjectId,PHASETapBinding,PHASETapType)::$_0,void>::operator()(uint64_t *a1)
{
}

void Phase::LambdaFunction<Phase::Dispatch::TapsClientDirectDispatcher::TapRemovePreSpatialTap(Phase::UniqueObjectId)::$_0,void>::~LambdaFunction()
{
}

uint64_t *Phase::LambdaFunction<Phase::Dispatch::TapsClientDirectDispatcher::TapRemovePreSpatialTap(Phase::UniqueObjectId)::$_0,void>::operator()(uint64_t a1)
{
  return Phase::Controller::TapManager::RemoveTapSourceObject(*(void **)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24));
}

void Phase::LambdaFunction<Phase::Dispatch::TapsClientDirectDispatcher::TapRegisterSubmix(Phase::UniqueObjectId,Phase::UniqueObjectId)::$_0,void>::~LambdaFunction()
{
}

void *Phase::LambdaFunction<Phase::Dispatch::TapsClientDirectDispatcher::TapRegisterSubmix(Phase::UniqueObjectId,Phase::UniqueObjectId)::$_0,void>::operator()(uint64_t a1)
{
  return Phase::Controller::TapManager::RegisterSubmix(*(Phase::Controller::TapManager **)(a1 + 8), *(UniqueObjectId *)(a1 + 16), *(UniqueObjectId *)(a1 + 32));
}

void Phase::LambdaFunction<Phase::Dispatch::TapsClientDirectDispatcher::TapDeRegisterSubmix(Phase::UniqueObjectId,Phase::UniqueObjectId)::$_0,void>::~LambdaFunction()
{
}

void *Phase::LambdaFunction<Phase::Dispatch::TapsClientDirectDispatcher::TapDeRegisterSubmix(Phase::UniqueObjectId,Phase::UniqueObjectId)::$_0,void>::operator()(uint64_t a1)
{
  return Phase::Controller::TapManager::DeRegisterSubmix(*(Phase::Controller::TapManager **)(a1 + 8), *(UniqueObjectId *)(a1 + 16), *(UniqueObjectId *)(a1 + 32));
}

void Phase::LambdaFunction<Phase::Dispatch::TapsClientDirectDispatcher::TapRegisterSource(Phase::UniqueObjectId,Phase::Handle64)::$_0,void>::~LambdaFunction()
{
}

void *Phase::LambdaFunction<Phase::Dispatch::TapsClientDirectDispatcher::TapRegisterSource(Phase::UniqueObjectId,Phase::Handle64)::$_0,void>::operator()(uint64_t a1)
{
  v1.mData = *(void *)(a1 + 32);
  return Phase::Controller::TapManager::RegisterSource(*(Phase::Controller::TapManager **)(a1 + 8), *(UniqueObjectId *)(a1 + 16), v1);
}

void Phase::LambdaFunction<Phase::Dispatch::TapsClientDirectDispatcher::TapDeRegisterSource(Phase::UniqueObjectId,Phase::Handle64)::$_0,void>::~LambdaFunction()
{
}

void *Phase::LambdaFunction<Phase::Dispatch::TapsClientDirectDispatcher::TapDeRegisterSource(Phase::UniqueObjectId,Phase::Handle64)::$_0,void>::operator()(uint64_t a1)
{
  v1.mData = *(void *)(a1 + 32);
  return Phase::Controller::TapManager::DeRegisterSource(*(Phase::Controller::TapManager **)(a1 + 8), *(UniqueObjectId *)(a1 + 16), v1);
}

void Phase::LambdaFunction<Phase::Dispatch::TapsClientDirectDispatcher::TapRegisterTapReceiver(Phase::UniqueObjectId,unsigned long long)::$_0,void>::~LambdaFunction()
{
}

void Phase::LambdaFunction<Phase::Dispatch::TapsClientDirectDispatcher::TapRegisterTapReceiver(Phase::UniqueObjectId,unsigned long long)::$_0,void>::operator()(uint64_t *a1)
{
}

void Phase::LambdaFunction<Phase::Dispatch::TapsClientDirectDispatcher::TapDeRegisterTapReceiver(Phase::UniqueObjectId)::$_0,void>::~LambdaFunction()
{
}

void Phase::LambdaFunction<Phase::Dispatch::TapsClientDirectDispatcher::TapDeRegisterTapReceiver(Phase::UniqueObjectId)::$_0,void>::operator()(uint64_t *a1)
{
}

void Phase::Controller::TaskManager::TaskManager(Phase::Controller::TaskManager *this)
{
}

void sub_22208B9EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  int32x4_t v11 = v10;
  a9 = v11;
  std::vector<std::any>::__destroy_vector::operator()[abi:ne180100](&a9);
  uint64_t v13 = v9[5];
  v9[5] = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::~Commandable(v9);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::TaskManager::DefaultUpdate(uint64_t this, __n128 a2)
{
  uint64_t v2 = *(uint64_t **)(this + 72);
  uint64_t v3 = *(uint64_t **)(this + 80);
  while (v2 != v3)
  {
    this = *v2;
    if (*v2) {
      this = (**(uint64_t (***)(uint64_t, __n128))this)(this, a2);
    }
    ++v2;
  }
  return this;
}

void Phase::Controller::TaskManager::~TaskManager(std::__shared_weak_count **this)
{
  *this = (std::__shared_weak_count *)&unk_26D47B430;
  Phase::Controller::TaskManager::StopUpdateLoop((Phase::Controller::TaskManager *)this);
  uint64_t v2 = this[17];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__function::__value_func<void ()(double)>::~__value_func[abi:ne180100](this + 12);
  uint64_t v3 = this[9];
  if (v3)
  {
    this[10] = v3;
    operator delete(v3);
  }
  uint64_t v5 = (void **)(this + 6);
  std::vector<std::any>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v4 = this[5];
  this[5] = 0;
  if (v4) {
    ((void (*)(std::__shared_weak_count *))v4->~__shared_weak_count_0)(v4);
  }
  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::~Commandable(this);
}

{
  uint64_t vars8;

  Phase::Controller::TaskManager::~TaskManager(this);

  JUMPOUT(0x223C938A0);
}

void Phase::Controller::TaskManager::StopUpdateLoop(Phase::Controller::TaskManager *this)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v1 = *((void *)this + 16);
  if (v1)
  {
    uint64_t v3 = *((void *)this + 5);
    uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 17);
    uint64_t v9 = v1;
    uint64_t v10 = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t *, void))(*(void *)v3 + 64))(v3, &v9, 0);
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 17);
    *((void *)this + 16) = 0;
    *((void *)this + 17) = 0;
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
    *((void *)this + 18) = 0;
    uint64_t v6 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)v5) + 448);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 136315650;
      uint64_t v12 = "TaskManager.mm";
      __int16 v13 = 1024;
      int v14 = 110;
      __int16 v15 = 2048;
      unint64_t v16 = this;
      _os_log_impl(&dword_221E5E000, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d impl@%p: TaskManager: update loop stopped", buf, 0x1Cu);
    }
    uint64_t v8 = (void *)*((void *)this + 9);
    uint64_t v7 = (void *)*((void *)this + 10);
    while (v8 != v7)
    {
      if (*v8) {
        (*(void (**)(void))(*(void *)*v8 + 8))(*v8);
      }
      ++v8;
    }
  }
}

void sub_22208BCE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void Phase::Controller::TaskManager::ClearServiceRegistry(Phase::Controller::TaskManager *this)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v3 = (void *)*((void *)this + 9);
  uint64_t v4 = *((void *)this + 10);
  uint64_t v5 = (char *)this + 72;
  unint64_t v6 = v4 - (void)v3;
  unint64_t v7 = (v4 - (uint64_t)v3) >> 3;
  uint64_t v8 = *((void *)v5 + 2);
  if (v7 <= (v8 - (uint64_t)v3) >> 3)
  {
    if (v6 >= 8) {
      bzero(v3, v6 & 0xFFFFFFFFFFFFFFF8);
    }
    int32x4_t v11 = *(char **)v5;
  }
  else
  {
    if (v3)
    {
      *((void *)this + 1std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = v3;
      operator delete(v3);
      uint64_t v8 = 0;
      *(void *)uint64_t v5 = 0;
      *((void *)v5 + 1) = 0;
      *((void *)v5 + 2) = 0;
    }
    if ((v6 & 0x8000000000000000) != 0) {
      goto LABEL_21;
    }
    uint64_t v9 = v8 >> 2;
    if (v8 >> 2 <= v7) {
      uint64_t v9 = v7;
    }
    unint64_t v10 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v9;
    if (v10 >> 61) {
LABEL_21:
    }
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    int32x4_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)(v5 + 16), v10);
    *(void *)uint64_t v5 = v11;
    *((void *)v5 + 2) = &v11[8 * v12];
    bzero(v11, v6 & 0xFFFFFFFFFFFFFFF8);
  }
  *((void *)this + 1std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = &v11[8 * v7];
  __int16 v13 = (uint64_t (**)(void, void, void, void, void))*((void *)this + 6);
  int v14 = (uint64_t (**)(void, void, void, void, void))*((void *)this + 7);
  while (v13 != v14)
  {
    uint64_t v3 = std::any::reset[abi:ne180100](v13);
    v13 += 4;
  }
  __int16 v15 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)v3) + 448);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    int v16 = 136315650;
    uint64_t v17 = "TaskManager.mm";
    __int16 v18 = 1024;
    int v19 = 45;
    __int16 v20 = 2048;
    __int16 v21 = this;
    _os_log_impl(&dword_221E5E000, v15, OS_LOG_TYPE_DEFAULT, "%25s:%-5d impl@%p: TaskManager: cleared service registry", (uint8_t *)&v16, 0x1Cu);
  }
}

void *Phase::Controller::TaskManager::SetUpdateFunction(uint64_t a1, void *a2)
{
  _OWORD v14[3] = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 128))
  {
    uint64_t v8 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)a1) + 448);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)unint64_t v10 = 136315394;
      *(void *)&v10[4] = "TaskManager.mm";
      __int16 v11 = 1024;
      int v12 = 61;
      _os_log_impl(&dword_221E5E000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: !mUpdateJob is false.", v10, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "PRECONDITION: !mUpdateJob is false.");
  }
  uint64_t v3 = (void *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      __int16 v13 = v10;
      (*(void (**)(void *, unsigned char *))(*a2 + 24))(a2, v10);
    }
    else
    {
      __int16 v13 = (unsigned char *)(*(uint64_t (**)(void *))(*v3 + 16))(v3);
    }
  }
  else
  {
    __int16 v13 = 0;
  }
  uint64_t v4 = a1 + 96;
  if (v10 != (unsigned char *)(a1 + 96))
  {
    uint64_t v5 = v13;
    uint64_t v6 = *(void *)(a1 + 120);
    if (v13 == v10)
    {
      if (v6 == v4)
      {
        (*(void (**)(unsigned char *, void *))(*(void *)v10 + 24))(v10, v14);
        (*(void (**)(unsigned char *))(*(void *)v13 + 32))(v13);
        __int16 v13 = 0;
        (*(void (**)(void, unsigned char *))(**(void **)(a1 + 120) + 24))(*(void *)(a1 + 120), v10);
        (*(void (**)(void))(**(void **)(a1 + 120) + 32))(*(void *)(a1 + 120));
        *(void *)(a1 + 12std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = 0;
        __int16 v13 = v10;
        (*(void (**)(void *, uint64_t))(v14[0] + 24))(v14, a1 + 96);
        (*(void (**)(void *))(v14[0] + 32))(v14);
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t))(*(void *)v10 + 24))(v10, a1 + 96);
        (*(void (**)(unsigned char *))(*(void *)v13 + 32))(v13);
        __int16 v13 = *(unsigned char **)(a1 + 120);
      }
      *(void *)(a1 + 12std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = v4;
    }
    else if (v6 == v4)
    {
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v4 + 24))(a1 + 96, v10);
      (*(void (**)(void))(**(void **)(a1 + 120) + 32))(*(void *)(a1 + 120));
      *(void *)(a1 + 12std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = v13;
      __int16 v13 = v10;
    }
    else
    {
      __int16 v13 = *(unsigned char **)(a1 + 120);
      *(void *)(a1 + 12std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = v5;
    }
  }
  return std::__function::__value_func<void ()(double)>::~__value_func[abi:ne180100](v10);
}

void sub_22208C290(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *Phase::Controller::TaskManager::ResetUpdateFunction(Phase::Controller::TaskManager *this)
{
  v4[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = operator new(0x20uLL);
  *uint64_t v2 = &unk_26D47B460;
  v2[1] = Phase::Controller::TaskManager::DefaultUpdate;
  v2[2] = 0;
  v2[3] = this;
  v4[3] = v2;
  Phase::Controller::TaskManager::SetUpdateFunction((uint64_t)this, v4);
  return std::__function::__value_func<void ()(double)>::~__value_func[abi:ne180100](v4);
}

void sub_22208C364(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(double)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void Phase::Controller::TaskManager::StartUpdateLoop(Phase::Controller::TaskManager *this, double a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)this + 16);
  uint64_t v5 = **(id **)(Phase::Logger::GetInstance(this) + 448);
  uint64_t v6 = v5;
  if (v4)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315650;
      *(void *)&uint8_t buf[4] = "TaskManager.mm";
      __int16 v18 = 1024;
      int v19 = 98;
      __int16 v20 = 2048;
      __int16 v21 = this;
      _os_log_impl(&dword_221E5E000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d impl@%p: TaskManager: attempting to start update loop while already running", buf, 0x1Cu);
    }
  }
  else
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 136315906;
      *(void *)&uint8_t buf[4] = "TaskManager.mm";
      __int16 v18 = 1024;
      int v19 = 76;
      __int16 v20 = 2048;
      __int16 v21 = this;
      __int16 v22 = 2048;
      double v23 = a2;
      _os_log_impl(&dword_221E5E000, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d impl@%p: TaskManager: starting update loop with target framerate: %F1 Hz", buf, 0x26u);
    }
    *((double *)this + 18) = a2;
    uint64_t v7 = *((void *)this + 5);
    std::string::basic_string[abi:ne180100]<0>(buf, "Engine-Update");
    (*(void (**)(long long *__return_ptr, uint64_t, unsigned char *))(*(void *)v7 + 16))(&v15, v7, buf);
    long long v8 = v15;
    long long v15 = 0uLL;
    uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 17);
    *((_OWORD *)this + 8) = v8;
    if (v9)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      if (*((void *)&v15 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    if (SBYTE3(v21) < 0) {
      operator delete(*(void **)buf);
    }
    uint64_t v10 = *((void *)this + 16);
    *(void *)(v10 + 256) = &unk_26D47B4A8;
    *(void *)(v10 + 264) = Phase::Controller::TaskManager::UpdateFrame;
    *(void *)(v10 + 272) = 0;
    double v11 = 1.0 / a2;
    *(void *)(v10 + 28std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = this;
    *(void *)(v10 + 288) = 0xBFF0000000000000;
    *(unsigned char *)(v10 + 38objc_destroyWeak(this + 3) = 1;
    atomic_store(1u, (unsigned __int8 *)(v10 + 40));
    *((double *)this + std::__function::__value_func<void ()(Phase::SpatialModeler::PriorityQueueEntry &)>::~__value_func[abi:ne180100](this + 19) = (double)std::chrono::steady_clock::now().__d_.__rep_ / 1000000000.0;
    int v12 = (std::__shared_weak_count *)*((void *)this + 17);
    uint64_t v13 = *((void *)this + 16);
    int v14 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v16[3] = 0;
    Phase::JobManager::ScheduleJobWithPeriod(v7, &v13, (uint64_t)v16, v11);
    std::__function::__value_func<void ()(BOOL,std::list<std::shared_ptr<Phase::Job>>)>::~__value_func[abi:ne180100](v16);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
  }
}

void sub_22208C600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::TaskManager::UpdateFrame(Phase::Controller::TaskManager *this, double a2)
{
  double v2 = a2;
  if (a2 < 0.0)
  {
    v4.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    double v5 = *((double *)this + 19);
    double v2 = (double)v4.__d_.__rep_ / 1000000000.0 - v5;
    *((double *)this + std::__function::__value_func<void ()(Phase::SpatialModeler::PriorityQueueEntry &)>::~__value_func[abi:ne180100](this + 19) = v5 + v2;
  }
  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::ExecuteCommands((uint64_t)this);
  uint64_t v6 = *((void *)this + 15);
  double v8 = v2;
  if (!v6) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, double *))(*(void *)v6 + 48))(v6, &v8);
}

void std::vector<std::any>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  double v2 = **a1;
  if (v2)
  {
    std::chrono::steady_clock::time_point v4 = (uint64_t (**)(void, void, void, void, void))v1[1];
    double v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 4;
        std::any::reset[abi:ne180100](v4);
      }
      while (v4 != v2);
      double v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__function::__func<std::__bind<void (Phase::Controller::TaskManager::*)(double),Phase::Controller::TaskManager*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (Phase::Controller::TaskManager::*)(double),Phase::Controller::TaskManager*,std::placeholders::__ph<1> const&>>,void ()(double)>::~__func()
{
}

__n128 std::__function::__func<std::__bind<void (Phase::Controller::TaskManager::*)(double),Phase::Controller::TaskManager*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (Phase::Controller::TaskManager::*)(double),Phase::Controller::TaskManager*,std::placeholders::__ph<1> const&>>,void ()(double)>::__clone(uint64_t a1)
{
  double v2 = (char *)operator new(0x20uLL);
  *(void *)double v2 = &unk_26D47B460;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + objc_destroyWeak(this + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<std::__bind<void (Phase::Controller::TaskManager::*)(double),Phase::Controller::TaskManager*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (Phase::Controller::TaskManager::*)(double),Phase::Controller::TaskManager*,std::placeholders::__ph<1> const&>>,void ()(double)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D47B460;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::__bind<void (Phase::Controller::TaskManager::*)(double),Phase::Controller::TaskManager*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (Phase::Controller::TaskManager::*)(double),Phase::Controller::TaskManager*,std::placeholders::__ph<1> const&>>,void ()(double)>::operator()(void *a1, double *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = (uint64_t (*)(void *, double))a1[1];
  std::chrono::steady_clock::time_point v4 = (void *)(a1[3] + (v2 >> 1));
  if (v2) {
    uint64_t v3 = *(uint64_t (**)(void *, double))(*v4 + v3);
  }
  return v3(v4, *a2);
}

void Phase::Command<128>::Invoker<std::__mem_fn<void (Phase::Controller::TaskManager::*)(double)>,void,Phase::Controller::TaskManager*,double>::~Invoker()
{
}

uint64_t Phase::Command<128>::Invoker<std::__mem_fn<void (Phase::Controller::TaskManager::*)(double)>,void,Phase::Controller::TaskManager*,double>::Call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(uint64_t (**)(void *, double))(a1 + 8);
  uint64_t v3 = (void *)(*(void *)(a1 + 24) + (v1 >> 1));
  if (v1) {
    uint64_t v2 = *(uint64_t (**)(void *, double))(*v3 + v2);
  }
  return v2(v3, *(double *)(a1 + 32));
}

_DWORD *Phase::SpatialModeler::Telemetry::AddSceneObserverResults(_DWORD *result, uint64_t a2)
{
  uint64_t v2 = 0;
  ++result[166];
  do
  {
    int v3 = *(unsigned __int8 *)(a2 + v2);
    if (*(unsigned char *)(a2 + v2)) {
      BOOL v4 = 1;
    }
    else {
      BOOL v4 = v2 == 18;
    }
    ++v2;
  }
  while (!v4);
  if (v3)
  {
    int v5 = 1;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = a2 + 19;
    do
    {
      int v5 = *(unsigned __int8 *)(v7 + v6);
      if (*(unsigned char *)(v7 + v6)) {
        BOOL v8 = 1;
      }
      else {
        BOOL v8 = v6 == 18;
      }
      ++v6;
    }
    while (!v8);
  }
  uint64_t v9 = 0;
  result[167] += v5;
  uint64_t v10 = a2 + 38;
  do
  {
    int v11 = *(unsigned __int8 *)(v10 + v9);
    if (*(unsigned char *)(v10 + v9)) {
      BOOL v12 = 1;
    }
    else {
      BOOL v12 = v9 == 18;
    }
    ++v9;
  }
  while (!v12);
  if (v11)
  {
    int v13 = 1;
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t v15 = a2 + 57;
    do
    {
      int v13 = *(unsigned __int8 *)(v15 + v14);
      if (*(unsigned char *)(v15 + v14)) {
        BOOL v16 = 1;
      }
      else {
        BOOL v16 = v14 == 18;
      }
      ++v14;
    }
    while (!v16);
  }
  uint64_t v17 = 0;
  result[168] += v13;
  do
  {
    result[v17 + 175] += *(unsigned __int8 *)(a2 + v17);
    ++v17;
  }
  while (v17 != 19);
  for (uint64_t i = 0; i != 19; ++i)
    result[i + 194] += *(unsigned __int8 *)(a2 + 19 + i);
  for (uint64_t j = 0; j != 19; ++j)
    result[j + 213] += *(unsigned __int8 *)(v10 + j);
  for (uint64_t k = 0; k != 19; ++k)
    result[k + 232] += *(unsigned __int8 *)(a2 + 57 + k);
  return result;
}

uint64_t Phase::SpatialModeler::Telemetry::Send(Phase::SpatialModeler::Telemetry *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)_MergedGlobals_23, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(_MergedGlobals_23))
  {
    xmmword_267F77C40 = xmmword_2220E8660;
    dword_267F77C50 = 0;
    __cxa_guard_release(_MergedGlobals_23);
  }
  uint64_t result = Phase::Throttle::ShouldFire((Phase::Throttle *)&xmmword_267F77C40, 0);
  if (result)
  {
    analytics_send_event_lazy();
    if (*((_DWORD *)this + 31) == 10) {
      analytics_send_event_lazy();
    }
    if (*((_DWORD *)this + 63) == 10) {
      analytics_send_event_lazy();
    }
    if (*((_DWORD *)this + 95) == 10) {
      analytics_send_event_lazy();
    }
    if (*((_DWORD *)this + 127) == 10) {
      analytics_send_event_lazy();
    }
    if (*((_DWORD *)this + 159) == 10) {
      analytics_send_event_lazy();
    }
    analytics_send_event_lazy();
    analytics_send_event_lazy();
    analytics_send_event_lazy();
    analytics_send_event_lazy();
    return analytics_send_event_lazy();
  }
  return result;
}

xpc_object_t ___ZN5Phase14SpatialModeler9Telemetry4SendEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  unint64_t v3 = 0;
  uint64_t v4 = v1 + 676;
  do
  {
    std::to_string(&v7, v3);
    if ((v7.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v5 = &v7;
    }
    else {
      int v5 = (std::string *)v7.__r_.__value_.__r.__words[0];
    }
    xpc_dictionary_set_uint64(v2, (const char *)v5, *(unsigned int *)(v4 + 4 * v3));
    if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v7.__r_.__value_.__l.__data_);
    }
    *(_DWORD *)(v4 + 4 * v3++) = 0;
  }
  while (v3 != 4);
  return v2;
}

void sub_22208CEAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

xpc_object_t ___ZN5Phase14SpatialModeler9Telemetry4SendEv_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_double(v2, "mean_free_path", *(float *)(v1 + 640));
  xpc_dictionary_set_double(v2, "surface_area", *(float *)(v1 + 644));
  xpc_dictionary_set_double(v2, "volume", *(float *)(v1 + 648));
  xpc_dictionary_set_uint64(v2, "rays_per_query", *(unsigned int *)(v1 + 652));
  xpc_dictionary_set_uint64(v2, "intersections_per_query", *(unsigned int *)(v1 + 656));
  LODWORD(vobjc_destroyWeak(this + 3) = *(_DWORD *)(v1 + 660);
  xpc_dictionary_set_double(v2, "lr_ir_build_frequency", (double)v3 / 600.0);
  *(_DWORD *)(v1 + 66std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = 0;
  LODWORD(v4) = *(_DWORD *)(v1 + 664);
  xpc_dictionary_set_double(v2, "scene_observer_frequency", (double)v4 / 600.0);
  *(_DWORD *)(v1 + 664) = 0;
  LODWORD(vstd::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear(this + 5) = *(_DWORD *)(v1 + 668);
  xpc_dictionary_set_double(v2, "trace_frequency", (double)v5 / 600.0);
  *(_DWORD *)(v1 + 668) = 0;
  LODWORD(v6) = *(_DWORD *)(v1 + 672);
  xpc_dictionary_set_double(v2, "building_metadata_frequency", (double)v6 / 600.0);
  *(_DWORD *)(v1 + 672) = 0;
  xpc_dictionary_set_uint64(v2, "triangle_count", *(unsigned int *)(v1 + 692));
  LODWORD(v7) = *(_DWORD *)(v1 + 696);
  xpc_dictionary_set_double(v2, "triangle_count_change_frequency", (double)v7 / 600.0);
  *(_DWORD *)(v1 + 696) = 0;
  return v2;
}

xpc_object_t ___ZZN5Phase14SpatialModeler9Telemetry4SendEvENK3__0clIPKcNS_8SubbandsIfEEEEDaT_RKT0__block_invoke(uint64_t a1)
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  uint64_t v3 = *(void *)(a1 + 32);
  if (*(_DWORD *)(v3 + 124))
  {
    unint64_t v4 = 0;
    do
    {
      xpc_dictionary_set_double(v2, _ZZZN5Phase14SpatialModeler9Telemetry4SendEvENK3__0clIPKcNS_8SubbandsIfEEEEDaT_RKT0_E9bandNames[v4], *(float *)(v3 + 4 * v4));
      ++v4;
      uint64_t v3 = *(void *)(a1 + 32);
    }
    while (v4 < *(unsigned int *)(v3 + 124));
  }
  xpc_dictionary_set_double(v2, "din", (float)((float)(*(float *)(v3 + 16) + *(float *)(v3 + 20)) * 0.5));
  uint64_t v5 = *(void *)(a1 + 32);
  unsigned int v6 = *(_DWORD *)(v5 + 124);
  if (v6)
  {
    float v7 = 0.0;
    uint64_t v8 = *(unsigned int *)(v5 + 124);
    do
    {
      float v9 = *(float *)v5;
      v5 += 4;
      float v7 = v7 + v9;
      --v8;
    }
    while (v8);
    if (v6 >= 2) {
      float v7 = v7 / (float)v6;
    }
  }
  else
  {
    float v7 = 0.0;
  }
  xpc_dictionary_set_double(v2, "mean", v7);
  return v2;
}

xpc_object_t ___ZZN5Phase14SpatialModeler9Telemetry4SendEvENK3__1clIPKcNSt3__15arrayIjLm19EEEEEDaT_RT0__block_invoke(uint64_t a1)
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  uint64_t v4 = 0;
  uint64_t v5 = *(void *)(a1 + 32);
  do
  {
    LODWORD(vobjc_destroyWeak(this + 3) = *(_DWORD *)(v5 + 4 * v4);
    xpc_dictionary_set_double(v2, Phase::SpatialModeler::kCauseNames[v4], (double)v3 / 600.0);
    uint64_t v5 = *(void *)(a1 + 32);
    *(_DWORD *)(v5 + 4 * v4++) = 0;
  }
  while (v4 != 19);
  return v2;
}

float Phase::Trace::YawFromAffine(float *a1)
{
  Phase::Matrix33From<float>(a1, &v6);
  if (fabsf(v8) >= 1.0)
  {
    float v2 = v6.f32[0];
    float v1 = -v6.f32[2];
  }
  else
  {
    float v1 = v7;
    float v2 = v9;
  }
  float result = atan2f(v1, v2) * -57.296;
  double v4 = fabsf(result);
  if (v4 >= 1.0e15 || v4 <= 1.0e-15) {
    return 0.0;
  }
  return result;
}

uint64_t Phase::Trace::PostDirectPathSpatialModelerOutput(Phase::Logger *a1, uint64_t a2, float *a3)
{
  uint64_t result = Phase::Logger::GetInstance(a1);
  if (*(unsigned char *)(result + 1552))
  {
    Phase::Trace::YawFromAffine(a3);
    return kdebug_trace();
  }
  return result;
}

uint64_t Phase::Trace::PostSharedListenerTransformUpdate(Phase::Logger *a1, float *a2)
{
  uint64_t result = Phase::Logger::GetInstance(a1);
  if (*(unsigned char *)(result + 1552))
  {
    Phase::Trace::YawFromAffine(a2);
    return kdebug_trace();
  }
  return result;
}

uint64_t Phase::Trace::PostSignalStatsTraceIfSignificant(Phase::Trace *this, const float *__A, vDSP_Length __N, float a4)
{
  if (__N)
  {
    unint64_t v6 = 0;
    while (fabsf(__A[v6]) <= 0.01)
    {
      if (__N == ++v6) {
        return result;
      }
    }
    if ((float)((float)v6 / a4) != -1.0)
    {
      float __C = 0.0;
      vDSP_rmsqv(__A, 1, &__C, __N);
      log10f(__C);
      float v9 = 0.0;
      vDSP_Length v8 = 0;
      vDSP_maxmgvi(__A, 1, &v9, &v8, __N);
      log10f(v9);
      return kdebug_trace();
    }
  }
  return result;
}

void Phase::SpatialModeler::RaycastWithEnergyVsMesh(uint64_t a1, uint64_t a2, float32x2_t *a3, uint64_t *a4)
{
  uint64_t v76 = *MEMORY[0x263EF8340];
  unsigned int v66 = -1;
  uint64_t v4 = *a4;
  uint64_t v5 = **(void **)(a4[1] + 120);
  uint64_t v6 = *(void *)(*(void *)(**(void **)(v5 + 16) + 16 * *(void *)(v5 + 24)) + 8);
  double v7 = a3[1].f32[0];
  double v8 = a3[3].f32[0];
  float64x2_t v59 = vcvtq_f64_f32(*a3);
  *(double *)char v60 = v7;
  *(float64x2_t *)((char *)v60 + 8) = vcvtq_f64_f32(a3[2]);
  *((double *)&v60[1] + 1) = v8;
  uint64_t v9 = *(void *)(v5 + 56);
  uint64_t v10 = **(void **)(v5 + 48);
  int v11 = *(void **)(v10 + 16 * v9);
  if (v11[3])
  {
    uint64_t v56 = v4;
    unint64_t v13 = 0;
    float v14 = -1.0;
    float v15 = 3.4028e38;
    do
    {
      uint64_t v16 = v11[1] + v11[4] * v13;
      if (*(_DWORD *)(v16 + 24) != 1) {
        __assert_rtn("RaycastVsMesh", "GeoRaycastUtility.hpp", 533, "MeshTopology::Triangles == submesh.mTopology");
      }
      uint64_t v17 = *(void *)(*(void *)(**(void **)(v16 + 48) + 16 * *(void *)(v16 + 56)) + 24);
      if (v17)
      {
        uint64_t v18 = 0;
        int v19 = (unsigned int *)(*(void *)(*(void *)(**(void **)(v16 + 32) + 16 * *(void *)(v16 + 40)) + 8)
                             + 8);
        do
        {
          __int16 v20 = (float32x2_t *)(v6 + 12 * *(v19 - 2));
          __int16 v21 = (float32x2_t *)(v6 + 12 * *(v19 - 1));
          __int16 v22 = (float32x2_t *)(v6 + 12 * *v19);
          float64x2_t v67 = vcvtq_f64_f32(*v20);
          *(double *)int v68 = v20[1].f32[0];
          *(float64x2_t *)((char *)v68 + 8) = vcvtq_f64_f32(*v21);
          *((double *)&v68[1] + 1) = v21[1].f32[0];
          float64x2_t v69 = vcvtq_f64_f32(*v22);
          *(double *)&long long v70 = v22[1].f32[0];
          Phase::Intersection<double>(v67.f64, v59.f64, (uint64_t)&v73);
          if (v75 && v73 < a3[3].f32[1] && v73 > a3[1].f32[1])
          {
            if (v13 >= 0x100) {
              std::terminate();
            }
            float v23 = v73;
            float v15 = fminf(v15, v23);
            float v14 = fmaxf(v14, v23);
            unsigned int v66 = (v13 << 24) | v18;
          }
          v19 += 3;
          ++v18;
        }
        while (v17 != v18);
        uint64_t v9 = *(void *)(v5 + 56);
        uint64_t v10 = **(void **)(v5 + 48);
      }
      ++v13;
      int v11 = *(void **)(v10 + 16 * v9);
    }
    while (v13 < v11[3]);
    if (v14 > v15)
    {
      uint64_t v24 = **(void **)(a4[1] + 120);
      uint64_t v65 = 0;
      Phase::Geometry::GetMaterials(v24, &v66, 1, &v65, 1, 1);
      if (*(_DWORD *)(a1 + 88) > v65)
      {
        uint64_t v25 = *(void *)(a1 + 72);
        if (*(_DWORD *)(v25 + 24 * v65 + 20) == HIDWORD(v65))
        {
          uint64_t v26 = *(void *)(v25 + 24 * v65);
          if (v26)
          {
            if (*(_DWORD *)v26 == 1)
            {
              uint64_t v27 = *(void *)(*(void *)(v26 + 40) + 40 * a3[5].i32[1]);
              if (v27)
              {
                float v28 = (float)(v14 - v15) * *(float *)(v56 + 76);
                a3[7].f32[1] = a3[7].f32[1] + v28;
                float v29 = v28 / *(float *)(v27 + 272);
                if (v29 <= 1.0)
                {
                  uint64_t v40 = *(unsigned int *)(v27 + 268);
                  float64x2_t v67 = 0u;
                  memset(v68, 0, sizeof(v68));
                  float64x2_t v69 = 0u;
                  long long v70 = 0u;
                  long long v71 = 0u;
                  memset(v72, 0, sizeof(v72));
                  if (v40)
                  {
                    float v41 = 1.0 - (float)((float)(1.0 - v29) * (float)(1.0 - v29));
                    uint64_t v42 = (float *)(v27 + 144);
                    int v43 = (float *)&v67;
                    uint64_t v44 = v40;
                    do
                    {
                      float v45 = *v42++;
                      *v43++ = v41 * v45;
                      --v44;
                    }
                    while (v44);
                    long long v63 = 0u;
                    memset(v64, 0, 28);
                    long long v61 = 0u;
                    long long v62 = 0u;
                    memset(v60, 0, sizeof(v60));
                    uint64_t v46 = (float *)&v59;
                    int v47 = (float *)&v67;
                    float64x2_t v59 = 0u;
                    do
                    {
                      float v48 = *v47++;
                      *v46++ = fmaxf(v48, 0.0);
                      --v40;
                    }
                    while (v40);
LABEL_36:
                    uint64_t v49 = 0;
                    unint64_t v50 = 0;
                    unint64_t v51 = 0;
                    float64_t v73 = v59.f64[0];
                    float v74 = *(float *)&v59.f64[1];
                    v67.f64[0] = 0.0;
                    LODWORD(v67.f64[1]) = 0;
                    do
                    {
                      if (v51 <= 2)
                      {
                        unint64_t v50 = v51 + 1;
                        *((_DWORD *)v67.f64 + v51++) = *(_DWORD *)((char *)&v73 + v49);
                      }
                      v49 += 4;
                    }
                    while (v49 != 12);
                    if (v50 <= 2) {
                      bzero((char *)&v67 + 4 * v50, 12 - 4 * v50);
                    }
                    uint64_t v52 = 0;
                    unint64_t v53 = 0;
                    unint64_t v54 = 0;
                    float64_t v73 = COERCE_DOUBLE(vadd_f32(*(float32x2_t *)&v67.f64[0], a3[6]));
                    float v74 = *(float *)&v67.f64[1] + a3[7].f32[0];
                    v67.f64[0] = 0.0;
                    LODWORD(v67.f64[1]) = 0;
                    do
                    {
                      if (v54 <= 2)
                      {
                        unint64_t v53 = v54 + 1;
                        *((_DWORD *)v67.f64 + v54++) = *(_DWORD *)((char *)&v73 + v52);
                      }
                      v52 += 4;
                    }
                    while (v52 != 12);
                    if (v53 <= 2) {
                      bzero((char *)&v67 + 4 * v53, 12 - 4 * v53);
                    }
                    __int32 v55 = LODWORD(v67.f64[1]);
                    a3[6] = *(float32x2_t *)&v67.f64[0];
                    a3[7].i32[0] = v55;
                    return;
                  }
                }
                else
                {
                  float v30 = log2f(v29);
                  uint64_t v31 = *(unsigned int *)(v27 + 268);
                  float64x2_t v67 = 0u;
                  memset(v68, 0, sizeof(v68));
                  float64x2_t v69 = 0u;
                  long long v70 = 0u;
                  long long v71 = 0u;
                  memset(v72, 0, sizeof(v72));
                  if (v31)
                  {
                    float v32 = v30 * 6.0206;
                    long long v33 = (float *)(v27 + 144);
                    unint64_t v34 = (float *)&v67;
                    uint64_t v35 = v31;
                    do
                    {
                      float v36 = *v33++;
                      *v34++ = v32 + v36;
                      --v35;
                    }
                    while (v35);
                    long long v63 = 0u;
                    memset(v64, 0, 28);
                    long long v61 = 0u;
                    long long v62 = 0u;
                    memset(v60, 0, sizeof(v60));
                    unint64_t v37 = (float *)&v59;
                    __int16 v38 = (float *)&v67;
                    float64x2_t v59 = 0u;
                    do
                    {
                      float v39 = *v38++;
                      *v37++ = fmaxf(v39, 0.0);
                      --v31;
                    }
                    while (v31);
                    goto LABEL_36;
                  }
                }
                memset(v64, 0, sizeof(v64));
                long long v62 = 0uLL;
                long long v63 = 0uLL;
                long long v61 = 0uLL;
                float64x2_t v59 = 0uLL;
                memset(v60, 0, sizeof(v60));
                goto LABEL_36;
              }
            }
          }
        }
      }
    }
  }
}

float Phase::SpatialModeler::RaycastWithEnergyVsVoxelTree(uint64_t a1, double a2, double a3, double a4, double a5, double a6, float64x2_t a7, uint64_t a8, float32x2_t *a9, uint64_t *a10)
{
  uint64_t v74 = *MEMORY[0x263EF8340];
  float v63 = -1.0;
  float v64 = 3.4028e38;
  unsigned int v62 = -1;
  v61[0] = &v64;
  v61[1] = &v63;
  v61[2] = &v62;
  uint64_t v11 = *a10;
  uint64_t v10 = a10[1];
  uint64_t v12 = **(void **)(v10 + 120);
  *(void *)&long long v65 = v61;
  *((void *)&v65 + 1) = v10;
  uint64_t v13 = *(void *)(v12 + 48);
  uint64_t v14 = **(void **)(v12 + 40);
  float v15 = *(void **)(v14 + 16 * v13);
  if (v15[3])
  {
    unint64_t v19 = 0;
    do
    {
      uint64_t v20 = v15[1] + v15[4] * v19;
      if (*(void *)(*(void *)(**(void **)(v20 + 40) + 16 * *(void *)(v20 + 48)) + 24))
      {
        _ZN5Phase8Geometry7details21RaycastVsVoxelSubtreeILb0ERKZNS0_18RaycastVsVoxelTreeILb0ERZNS_14SpatialModeler28RaycastWithEnergyVsVoxelTreeERNS0_11SystemStateERNS0_15SceneQueryBatchERNS0_10SceneQueryERNS0_20SceneQueryShapeStateEE3__0EEvS6_RNS0_12RaycastInputERKNS0_5ShapeEOT0_EUlT_SK_T1_E_EEvS6_SG_RKNS0_12VoxelSubtreeESL_(a9, v20, (float ***)&v65, a2, a3, a4, a5, a6, a7);
        uint64_t v13 = *(void *)(v12 + 48);
        uint64_t v14 = **(void **)(v12 + 40);
      }
      ++v19;
      float v15 = *(void **)(v14 + 16 * v13);
    }
    while (v15[3] > v19);
    *(float *)&a2 = v63;
    if (v63 > v64)
    {
      uint64_t v21 = **(void **)(a10[1] + 120);
      uint64_t v60 = 0;
      Phase::Geometry::GetMaterials(v21, &v62, 1, &v60, 1, 1);
      if (*(_DWORD *)(a1 + 88) > v60)
      {
        uint64_t v22 = *(void *)(a1 + 72);
        if (*(_DWORD *)(v22 + 24 * v60 + 20) == HIDWORD(v60))
        {
          uint64_t v23 = *(void *)(v22 + 24 * v60);
          if (v23)
          {
            if (*(_DWORD *)v23 == 1)
            {
              uint64_t v24 = *(void *)(*(void *)(v23 + 40) + 40 * a9[5].i32[1]);
              if (v24)
              {
                float v25 = (float)(v63 - v64) * *(float *)(v11 + 76);
                a9[7].f32[1] = a9[7].f32[1] + v25;
                float v26 = v25 / *(float *)(v24 + 272);
                if (v26 <= 1.0)
                {
                  uint64_t v37 = *(unsigned int *)(v24 + 268);
                  long long v65 = 0u;
                  long long v66 = 0u;
                  long long v67 = 0u;
                  long long v68 = 0u;
                  long long v69 = 0u;
                  long long v70 = 0u;
                  memset(v71, 0, sizeof(v71));
                  if (v37)
                  {
                    float v38 = 1.0 - (float)((float)(1.0 - v26) * (float)(1.0 - v26));
                    float v39 = (float *)(v24 + 144);
                    uint64_t v40 = (float *)&v65;
                    uint64_t v41 = v37;
                    do
                    {
                      float v42 = *v39++;
                      *v40++ = v38 * v42;
                      --v41;
                    }
                    while (v41);
                    long long v58 = 0u;
                    memset(v59, 0, 28);
                    long long v56 = 0u;
                    long long v57 = 0u;
                    long long v54 = 0u;
                    long long v55 = 0u;
                    int v43 = (float *)&v53;
                    uint64_t v44 = (float *)&v65;
                    long long v53 = 0u;
                    do
                    {
                      float v45 = *v44++;
                      *v43++ = fmaxf(v45, 0.0);
                      --v37;
                    }
                    while (v37);
LABEL_26:
                    uint64_t v46 = 0;
                    unint64_t v47 = 0;
                    unint64_t v48 = 0;
                    float32x2_t v72 = (float32x2_t)v53;
                    float v73 = *((float *)&v53 + 2);
                    *(void *)&long long v65 = 0;
                    DWORD2(v6std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear(this + 5) = 0;
                    do
                    {
                      if (v48 <= 2)
                      {
                        unint64_t v47 = v48 + 1;
                        *((_DWORD *)&v65 + v48++) = v72.i32[v46];
                      }
                      ++v46;
                    }
                    while (v46 != 3);
                    if (v47 <= 2) {
                      bzero((char *)&v65 + 4 * v47, 12 - 4 * v47);
                    }
                    uint64_t v49 = 0;
                    unint64_t v50 = 0;
                    unint64_t v51 = 0;
                    float32x2_t v72 = vadd_f32(*(float32x2_t *)&v65, a9[6]);
                    float v73 = *((float *)&v65 + 2) + a9[7].f32[0];
                    *(void *)&long long v65 = 0;
                    DWORD2(v6std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear(this + 5) = 0;
                    do
                    {
                      if (v51 <= 2)
                      {
                        unint64_t v50 = v51 + 1;
                        *((_DWORD *)&v65 + v51++) = v72.i32[v49];
                      }
                      ++v49;
                    }
                    while (v49 != 3);
                    if (v50 <= 2) {
                      bzero((char *)&v65 + 4 * v50, 12 - 4 * v50);
                    }
                    LODWORD(a2) = DWORD2(v65);
                    a9[6] = (float32x2_t)v65;
                    a9[7].i32[0] = LODWORD(a2);
                    return *(float *)&a2;
                  }
                }
                else
                {
                  float v27 = log2f(v26);
                  uint64_t v28 = *(unsigned int *)(v24 + 268);
                  long long v65 = 0u;
                  long long v66 = 0u;
                  long long v67 = 0u;
                  long long v68 = 0u;
                  long long v69 = 0u;
                  long long v70 = 0u;
                  memset(v71, 0, sizeof(v71));
                  if (v28)
                  {
                    float v29 = v27 * 6.0206;
                    float v30 = (float *)(v24 + 144);
                    uint64_t v31 = (float *)&v65;
                    uint64_t v32 = v28;
                    do
                    {
                      float v33 = *v30++;
                      *v31++ = v29 + v33;
                      --v32;
                    }
                    while (v32);
                    long long v58 = 0u;
                    memset(v59, 0, 28);
                    long long v56 = 0u;
                    long long v57 = 0u;
                    long long v54 = 0u;
                    long long v55 = 0u;
                    unint64_t v34 = (float *)&v53;
                    uint64_t v35 = (float *)&v65;
                    long long v53 = 0u;
                    do
                    {
                      float v36 = *v35++;
                      *v34++ = fmaxf(v36, 0.0);
                      --v28;
                    }
                    while (v28);
                    goto LABEL_26;
                  }
                }
                memset(v59, 0, sizeof(v59));
                long long v57 = 0uLL;
                long long v58 = 0uLL;
                long long v55 = 0uLL;
                long long v56 = 0uLL;
                long long v53 = 0uLL;
                long long v54 = 0uLL;
                goto LABEL_26;
              }
            }
          }
        }
      }
    }
  }
  return *(float *)&a2;
}

void Phase::SpatialModeler::RaycastWithEnergyVsScene(uint64_t a1, uint64_t a2, float *a3, void *a4, int a5)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  if (a5)
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    unint64_t v8 = 0;
    float32x2_t v52 = 0;
    float v53 = 0.0;
    *(void *)&long long v42 = 0;
    DWORD2(v42) = 0;
    do
    {
      if (v8 <= 2)
      {
        unint64_t v7 = v8 + 1;
        *(_DWORD *)&v43[4 * v8++ - 16] = v52.i32[v6];
      }
      ++v6;
    }
    while (v6 != 3);
    if (v7 <= 2)
    {
      uint64_t v9 = a2;
      uint64_t v10 = a3;
      bzero(&v43[4 * v7 - 16], 12 - 4 * v7);
      a2 = v9;
      a3 = v10;
    }
    HIDWORD(v42) = 0;
    a3[16] = 0.0;
    *((_OWORD *)a3 + objc_destroyWeak(this + 3) = v42;
  }
  uint64_t v11 = a3 + 8;
  uint64_t v48 = *((void *)a3 + 4);
  int v49 = *((_DWORD *)a3 + 10);
  uint64_t v12 = *(float32x2_t ***)(a1 + 120);
  unsigned int v13 = *(_DWORD *)(a1 + 136);
  uint64_t v14 = &v12[3 * v13];
  if (v13)
  {
    float v15 = *v12;
    if (!*v12)
    {
      uint64_t v16 = v12 + 3;
      while (1)
      {
        uint64_t v12 = v16;
        if (v16 >= v14) {
          break;
        }
        v16 += 3;
        float v15 = *v12;
        if (*v12) {
          goto LABEL_17;
        }
      }
      float v15 = 0;
    }
LABEL_17:
    unint64_t v17 = (unint64_t)v14;
  }
  else
  {
    float v15 = 0;
    unint64_t v17 = *(void *)(a1 + 120);
  }
  if (v12 != v14)
  {
    uint64_t v18 = (long long *)(a3 + 12);
    uint64_t v37 = v14;
    float v38 = a3;
    uint64_t v40 = a2;
    do
    {
      if (v15)
      {
        if (v15->i32[0] == 4 && (v15[18].i32[0] & *(_DWORD *)(a2 + 72)) != 0)
        {
          uint64_t v20 = (void *)v15[15];
          for (uint64_t i = (void *)v15[16]; v20 != i; ++v20)
          {
            if (*(_DWORD *)(a1 + 112) > *v20)
            {
              uint64_t v21 = *(void *)(a1 + 96);
              if (*(_DWORD *)(v21 + 24 * *v20 + 20) == HIDWORD(*v20))
              {
                uint64_t v22 = *(unsigned int **)(v21 + 24 * *v20);
                if (v22)
                {
                  if ((v22[4] & *(_DWORD *)(a2 + 72)) != 0)
                  {
                    uint64_t v23 = *a4 + 32 * *v22;
                    uint64_t v25 = *(void *)(v23 + 24);
                    uint64_t v24 = (void *)(v23 + 24);
                    if (v25)
                    {
                      v41[0] = v15;
                      v41[1] = v22;
                      long long v42 = *(_OWORD *)a3;
                      *(float *)int v43 = a3[4];
                      *(void *)&void v43[4] = *(void *)(a3 + 5);
                      float v44 = a3[7];
                      long long v45 = *(_OWORD *)v11;
                      long long v46 = *v18;
                      int v47 = *((_DWORD *)v18 + 4);
                      Phase::TransformPositionByInverse<float>(v15 + 6, (float32x2_t *)&v42, (float *)&v52);
                      *(float32x2_t *)&long long v42 = v52;
                      *((float *)&v42 + 2) = v53;
                      __int32 v26 = v15[7].i32[1];
                      float v27 = -v15[7].f32[0];
                      float32x2_t v52 = vneg_f32(v15[6]);
                      float v53 = v27;
                      __int32 v54 = v26;
                      Phase::operator*<float>((float *)&v52, (float *)v43, (float *)&v50);
                      uint64_t v28 = 0;
                      unint64_t v29 = 0;
                      unint64_t v30 = 0;
                      *(void *)int v43 = v50;
                      float v31 = 1.0 / v15[9].f32[1];
                      *((float *)&v42 + objc_destroyWeak(this + 3) = *((float *)&v42 + 3) * v31;
                      *(_DWORD *)&v43[8] = v51;
                      float v44 = v31 * v44;
                      uint64_t v50 = 0;
                      int v51 = 0;
                      float32x2_t v52 = 0;
                      float v53 = 0.0;
                      do
                      {
                        if (v30 <= 2)
                        {
                          unint64_t v29 = v30 + 1;
                          v52.i32[v30++] = *(_DWORD *)((char *)&v50 + v28);
                        }
                        v28 += 4;
                      }
                      while (v28 != 12);
                      if (v29 <= 2) {
                        bzero((char *)&v52 + 4 * v29, 12 - 4 * v29);
                      }
                      *(float32x2_t *)&long long v46 = v52;
                      *((void *)&v46 + 1) = LODWORD(v53);
                      if (!*v24) {
                        std::__throw_bad_function_call[abi:ne180100]();
                      }
                      (*(void (**)(void, uint64_t, uint64_t, long long *, void *))(*(void *)*v24 + 48))(*v24, a1, v40, &v42, v41);
                      uint64_t v32 = 0;
                      uint64_t v14 = v37;
                      a3 = v38;
                      v38[15] = *((float *)&v46 + 3) + v38[15];
                      BOOL v33 = 1;
                      do
                      {
                        while (1)
                        {
                          float v34 = *((float *)&v46 + v32) + *((float *)v18 + v32);
                          *((float *)v18 + v32) = v34;
                          if (v33) {
                            break;
                          }
                          BOOL v33 = 0;
                          if (++v32 == 3) {
                            goto LABEL_44;
                          }
                        }
                        float v35 = v11[v32];
                        BOOL v33 = v34 > v35;
                        ++v32;
                      }
                      while (v32 != 3);
                      if (v34 > v35) {
                        v38[7] = -1.0;
                      }
LABEL_44:
                      a2 = v40;
                    }
                  }
                }
              }
            }
          }
        }
      }
      if ((unint64_t)v12 < v17)
      {
        float v36 = v12 + 3;
        while (1)
        {
          uint64_t v12 = v36;
          if ((unint64_t)v36 >= v17) {
            break;
          }
          v36 += 3;
          float v15 = *v12;
          if (*v12) {
            goto LABEL_52;
          }
        }
        float v15 = 0;
      }
LABEL_52:
      ;
    }
    while (v12 != v14);
  }
  *(void *)uint64_t v11 = v48;
  *((_DWORD *)v11 + 2) = v49;
}

void Phase::SpatialModeler::IterateTraceWithEnergyBatch(Phase::Logger *a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a3 + 88)) {
    __assert_rtn("IterateTraceWithEnergyBatch", "TraceWithEnergy.cpp", 277, "inSceneQueryFunctionTable.mTestScene");
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  Phase::Geometry::RunSceneQueriesOnRange(a1, a2, a3, 0, *(_DWORD *)(a2 + 96));
  Phase::SpatialModeler::CalculateFinalEnergyLoss((uint64_t)a1, a2);
  atomic_store(3u, (unsigned int *)a2);
  atomic_store(2u, (unsigned int *)(a2 + 4));
  if (*(void *)(a2 + 48))
  {
    std::function<void ()(Phase::Geometry::SceneQueryBatch *)>::operator()(a2 + 24, a2);
  }
}

void Phase::SpatialModeler::CalculateFinalEnergyLoss(uint64_t a1, uint64_t a2)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 152);
  if (*(_DWORD *)(a1 + 64) > v3)
  {
    uint64_t v4 = *(void *)(a1 + 48);
    if (*(_DWORD *)(v4 + 24 * v3 + 20) == HIDWORD(v3))
    {
      uint64_t v5 = *(void *)(v4 + 24 * *(void *)(a1 + 152));
      if (v5)
      {
        if (*(_DWORD *)v5 == 1)
        {
          uint64_t v6 = *(void *)(*(void *)(v5 + 40) + 40);
          long long v7 = *(_OWORD *)(v6 + 224);
          v37[4] = *(_OWORD *)(v6 + 208);
          v37[5] = v7;
          long long v8 = *(_OWORD *)(v6 + 256);
          v37[6] = *(_OWORD *)(v6 + 240);
          long long v38 = v8;
          long long v9 = *(_OWORD *)(v6 + 160);
          v37[0] = *(_OWORD *)(v6 + 144);
          v37[1] = v9;
          long long v10 = *(_OWORD *)(v6 + 192);
          v37[2] = *(_OWORD *)(v6 + 176);
          v37[3] = v10;
          unsigned int v11 = *(_DWORD *)(a2 + 96);
          if (v11)
          {
            unsigned int v12 = 0;
            float v13 = *(float *)(v6 + 272);
            int v14 = HIDWORD(v38);
            uint64_t v15 = 4 * HIDWORD(v38);
            do
            {
              uint64_t v16 = (float32x2_t *)(*(void *)(a2 + 88) + *(_DWORD *)(a2 + 100) * v12);
              float v17 = (float)(v16[3].f32[1] - v16[1].f32[1]) - v16[7].f32[1];
              if (v17 > 0.0)
              {
                memset(v34, 0, 124);
                if (v14)
                {
                  uint64_t v18 = 0;
                  do
                  {
                    *(float *)((char *)v34 + v18) = v17 * *(float *)((char *)v37 + v18);
                    v18 += 4;
                  }
                  while (v15 != v18);
                  float32x2_t v19 = *(float32x2_t *)&v34[0];
                  float v20 = *((float *)v34 + 2);
                }
                else
                {
                  float32x2_t v19 = 0;
                  float v20 = 0.0;
                }
                uint64_t v21 = 0;
                unint64_t v22 = 0;
                unint64_t v23 = 0;
                float32x2_t v39 = v19;
                float v40 = v20;
                float32x2_t v35 = 0;
                float v36 = 0.0;
                do
                {
                  if (v23 <= 2)
                  {
                    unint64_t v22 = v23 + 1;
                    v35.i32[v23++] = v39.i32[v21];
                  }
                  ++v21;
                }
                while (v21 != 3);
                if (v22 <= 2) {
                  bzero((char *)&v35 + 4 * v22, 12 - 4 * v22);
                }
                uint64_t v24 = 0;
                unint64_t v25 = 0;
                unint64_t v26 = 0;
                float32x2_t v39 = vadd_f32(v35, v16[6]);
                float v40 = v36 + v16[7].f32[0];
                float32x2_t v35 = 0;
                float v36 = 0.0;
                do
                {
                  if (v26 <= 2)
                  {
                    unint64_t v25 = v26 + 1;
                    v35.i32[v26++] = v39.i32[v24];
                  }
                  ++v24;
                }
                while (v24 != 3);
                if (v25 <= 2) {
                  bzero((char *)&v35 + 4 * v25, 12 - 4 * v25);
                }
                float v27 = v36;
                v16[6] = v35;
                v16[7].f32[0] = v27;
                v16[8].f32[0] = v17 / v13;
                unsigned int v11 = *(_DWORD *)(a2 + 96);
              }
              ++v12;
            }
            while (v12 < v11);
          }
        }
      }
    }
  }
  if (*(_DWORD *)(a2 + 96))
  {
    unsigned int v28 = 0;
    do
    {
      uint64_t v29 = 0;
      unint64_t v30 = 0;
      unint64_t v31 = 0;
      uint64_t v32 = (float32x2_t *)(*(void *)(a2 + 88) + *(_DWORD *)(a2 + 100) * v28);
      *(float32x2_t *)&v37[0] = vminnm_f32(v32[6], v32[4]);
      DWORD2(v37[0]) = fminf(v32[7].f32[0], v32[5].f32[0]);
      *(void *)&v34[0] = 0;
      DWORD2(v34[0]) = 0;
      do
      {
        if (v31 <= 2)
        {
          unint64_t v30 = v31 + 1;
          *((_DWORD *)v34 + v31++) = *(_DWORD *)((char *)v37 + v29);
        }
        v29 += 4;
      }
      while (v29 != 12);
      if (v30 <= 2) {
        bzero((char *)v34 + 4 * v30, 12 - 4 * v30);
      }
      __int32 v33 = DWORD2(v34[0]);
      v32[6] = *(float32x2_t *)&v34[0];
      v32[7].i32[0] = v33;
      ++v28;
    }
    while (v28 < *(_DWORD *)(a2 + 96));
  }
}

void Phase::SpatialModeler::RunTraceWithEnergyBatchAsync(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a3 + 88)) {
    __assert_rtn("IterateBatchAsync", "GeoSceneQueryUtility.hpp", 85, "inSceneQueryFunctionTable.mTestScene");
  }
  unsigned int v6 = *(unsigned __int8 *)(a2 + 80);
  if (v6 <= 0xC0) {
    int v7 = v6 > 0x3F;
  }
  else {
    int v7 = 2;
  }
  uint64_t v8 = *(void *)(*(void *)(a1 + 1016) + 2416);
  std::string::basic_string[abi:ne180100]<0>(__p, "GeoBatch");
  (*(void (**)(long long *__return_ptr, uint64_t, void **))(*(void *)v8 + 16))(&v29, v8, __p);
  long long v9 = v29;
  long long v29 = 0uLL;
  long long v10 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v9;
  if (v10)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    if (*((void *)&v29 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v29 + 1));
    }
  }
  if (v28 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v11 = *(void *)(a2 + 8);
  *(void *)(v11 + 256) = &unk_26D47B4D0;
  *(void *)(v11 + 264) = Phase::SpatialModeler::CompleteTraceWithEnergyBatch;
  *(void *)(v11 + 272) = a1;
  *(void *)(v11 + 28std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = a2;
  *(unsigned char *)(v11 + 38objc_destroyWeak(this + 3) = 1;
  atomic_store(1u, (unsigned __int8 *)(v11 + 40));
  uint64_t v12 = *(void *)(a2 + 8);
  *(_DWORD *)(v12 + 524) = v7;
  atomic_store(1u, (unsigned __int8 *)(v12 + 40));
  unsigned int v13 = *(_DWORD *)(a2 + 96);
  if (v13)
  {
    unsigned int v14 = 0;
    unsigned int v15 = v13 >> 4;
    int v16 = *(_DWORD *)(a2 + 96) & 0xF;
    do
    {
      BOOL v17 = v16 <= 0;
      if (v16 <= 0) {
        int v16 = 0;
      }
      else {
        --v16;
      }
      if (v17) {
        unsigned int v18 = v14 + v15;
      }
      else {
        unsigned int v18 = v14 + v15 + 1;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "GeoTestScene");
      (*(void (**)(long long *__return_ptr, uint64_t, void **))(*(void *)v8 + 16))(&v29, v8, __p);
      if (v28 < 0) {
        operator delete(__p[0]);
      }
      uint64_t v19 = v29;
      *(void *)(v29 + 256) = &unk_26D4770E8;
      *(void *)(v19 + 264) = Phase::Geometry::RunSceneQueriesOnRange;
      *(void *)(v19 + 272) = a1;
      *(void *)(v19 + 28std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = a2;
      *(void *)(v19 + 288) = a3;
      *(_DWORD *)(v19 + 296) = v14;
      *(_DWORD *)(v19 + 30std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = v18;
      *(unsigned char *)(v19 + 38objc_destroyWeak(this + 3) = 1;
      atomic_store(1u, (unsigned __int8 *)(v19 + 40));
      *(_DWORD *)(v19 + 524) = v7;
      atomic_store(1u, (unsigned __int8 *)(v19 + 40));
      float v20 = *(std::__shared_weak_count **)(a2 + 16);
      uint64_t v25 = *(void *)(a2 + 8);
      unint64_t v26 = v20;
      if (v20) {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v23 = v19;
      uint64_t v24 = (std::__shared_weak_count *)*((void *)&v29 + 1);
      if (*((void *)&v29 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v29 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v8 + 24))(v8, &v25, &v23);
      if (v24) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v24);
      }
      if (v26) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v26);
      }
      if (*((void *)&v29 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v29 + 1));
      }
      unsigned int v14 = v18;
    }
    while (v18 < *(_DWORD *)(a2 + 96));
  }
  uint64_t v21 = *(void **)(a2 + 8);
  unint64_t v22 = *(std::__shared_weak_count **)(a2 + 16);
  __p[0] = v21;
  __p[1] = v22;
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Phase::JobManager::RunJobAsync(v8, (uint64_t *)__p);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
}

void sub_22208E8DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21)
{
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::SpatialModeler::TraceWithEnergyQuery::RegisterQuery(Phase::SpatialModeler::TraceWithEnergyQuery *this, Phase::Geometry::System *a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  float v2 = (void *)((char *)this + 2288);
  unsigned int v6 = &unk_26D4775A0;
  int v7 = Phase::SpatialModeler::IterateTraceWithEnergyBatch;
  uint64_t v8 = &v6;
  v5[0] = &unk_26D4775A0;
  v5[1] = Phase::SpatialModeler::RunTraceWithEnergyBatchAsync;
  v5[3] = v5;
  uint64_t v3 = Phase::Geometry::SceneQueryTypeRegistry::RegisterNewType((void *)this + 286, (uint64_t)&v6, (uint64_t)v5);
  std::__function::__value_func<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQueryFunctionTable const&)>::~__value_func[abi:ne180100](v5);
  std::__function::__value_func<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQueryFunctionTable const&)>::~__value_func[abi:ne180100](&v6);
  unsigned int v6 = &unk_26D4775E8;
  int v7 = Phase::SpatialModeler::RaycastWithEnergyVsScene;
  uint64_t v8 = &v6;
  Phase::Geometry::SceneQueryTypeRegistry::CustomizeType((uint64_t)v2, v3, (uint64_t)&v6);
  std::__function::__value_func<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,std::vector<std::function<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>> const&,BOOL)>::~__value_func[abi:ne180100](&v6);
  unsigned int v6 = &unk_26D477630;
  int v7 = Phase::SpatialModeler::RaycastWithEnergyVsMesh;
  uint64_t v8 = &v6;
  Phase::Geometry::SceneQueryTypeRegistry::CustomizeType(v2, v3, 1u, (uint64_t)&v6);
  std::__function::__value_func<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>::~__value_func[abi:ne180100](&v6);
  unsigned int v6 = &unk_26D477630;
  int v7 = Phase::SpatialModeler::RaycastWithEnergyVsVoxelTree;
  uint64_t v8 = &v6;
  Phase::Geometry::SceneQueryTypeRegistry::CustomizeType(v2, v3, 2u, (uint64_t)&v6);
  std::__function::__value_func<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>::~__value_func[abi:ne180100](&v6);
  return v3;
}

void sub_22208EB10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::__function::__value_func<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void _ZN5Phase8Geometry7details21RaycastVsVoxelSubtreeILb0ERKZNS0_18RaycastVsVoxelTreeILb0ERZNS_14SpatialModeler28RaycastWithEnergyVsVoxelTreeERNS0_11SystemStateERNS0_15SceneQueryBatchERNS0_10SceneQueryERNS0_20SceneQueryShapeStateEE3__0EEvS6_RNS0_12RaycastInputERKNS0_5ShapeEOT0_EUlT_SK_T1_E_EEvS6_SG_RKNS0_12VoxelSubtreeESL_(float32x2_t *a1, uint64_t a2, float ***a3, double a4, double a5, double a6, double a7, double a8, float64x2_t a9)
{
  uint64_t v144 = *MEMORY[0x263EF8340];
  float64x2_t v12 = vcvtq_f64_f32(*a1);
  v10.f64[0] = a1[1].f32[0];
  float64x2_t v13 = vcvtq_f64_f32(a1[2]);
  v9.f64[0] = a1[3].f32[0];
  __asm { FMOV            V16.2D, #1.0 }
  float64x2_t v19 = vminnmq_f64(vmaxnmq_f64(vdivq_f64(_Q16, v13), (float64x2_t)vdupq_n_s64(0xC1EFFFFFFFE00000)), (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL));
  float64x2_t v20 = vminnmq_f64((float64x2_t)(unint64_t)*(_OWORD *)&vmaxnmq_f64((float64x2_t)(unint64_t)*(_OWORD *)&vdivq_f64(_Q16, v9), (float64x2_t)xmmword_2220A5DE0), (float64x2_t)xmmword_2220A5DF0);
  v11.f64[0] = *(float *)(a2 + 8);
  a9.f64[0] = *(float *)(a2 + 20);
  float64x2_t v21 = vmulq_f64(v19, vsubq_f64(vcvtq_f64_f32(*(float32x2_t *)a2), v12));
  unint64_t v22 = *(_OWORD *)&vmulq_f64(v20, vsubq_f64(v11, v10));
  float64x2_t v23 = vmulq_f64(v19, vsubq_f64(vcvtq_f64_f32(*(float32x2_t *)(a2 + 12)), v12));
  *(void *)&v20.f64[0] = *(_OWORD *)&vmulq_f64(v20, vsubq_f64(a9, v10));
  *(void *)&v24.f64[0] = *(_OWORD *)&vminnmq_f64((float64x2_t)v22, (float64x2_t)*(unint64_t *)&v20.f64[0]);
  v24.f64[1] = a1[1].f32[1];
  *(void *)&v25.f64[0] = *(_OWORD *)&vmaxnmq_f64((float64x2_t)v22, (float64x2_t)*(unint64_t *)&v20.f64[0]);
  v25.f64[1] = a1[3].f32[1];
  double v26 = vpmaxq_f64(vmaxnmq_f64(vminnmq_f64(v21, v23), v24));
  double v27 = vpminq_f64(vminnmq_f64(vmaxnmq_f64(v21, v23), v25));
  if (v26 <= v27)
  {
    if (v26 >= 0.0 || (double v26 = 0.0, v27 > 0.0))
    {
      long long v29 = *(void **)(**(void **)(a2 + 40) + 16 * *(void *)(a2 + 48));
      uint64_t v30 = v29[3];
      if (v30 == 1)
      {
        unint64_t v31 = *a3;
        float v32 = v26;
        ***a3 = fminf(***a3, v32);
        float v33 = v27;
        *v31[1] = fmaxf(*v31[1], v33);
        *void v31[2] = 0.0;
        return;
      }
      if ((int)v30 <= 32)
      {
        float64x2_t v133 = (float64x2_t)xmmword_2220A5DF0;
        float64x2_t v134 = (float64x2_t)xmmword_2220A5DE0;
        int8x16_t v130 = vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL);
        MEMORY[0x270FA5388](a1);
        float32x2_t v35 = (char *)&v126 - v34;
        float64x2_t v136 = v37;
        float64x2_t v137 = v36;
        float64x2_t v135 = v38;
        float64x2_t v131 = v40;
        float64x2_t v132 = v39;
        float64x2_t v126 = v41;
        float64x2_t v127 = v42;
        float64x2_t v128 = v43;
        float64x2_t v129 = v44;
        bzero((char *)&v126 - v34, v34);
        v47.f64[1] = v135.f64[1];
        double v46 = v136.f64[0];
        double v48 = v137.f64[0];
        int v49 = (float32x2_t *)v29[1];
        v50.f64[0] = v49[3].f32[0];
        float64x2_t v51 = vdivq_f64(v135, vcvtq_f64_f32(v49[2]));
        float64x2_t v52 = vdivq_f64(v135, v50);
        v53.f64[0] = v131.f64[0];
        *(void *)&v53.f64[1] = v130.i64[0];
        v54.f64[0] = 1073741820.0;
        float64x2_t v55 = (float64x2_t)vdupq_n_s64(0x41CFFFFFFF800000uLL);
        int32x4_t v56 = (int32x4_t)vcvtq_s64_f64(vmulq_f64(vminnmq_f64(vmaxnmq_f64(vmulq_f64(vsubq_f64(vmlaq_n_f64(v126, v53, v137.f64[0]), v129), v51), (float64x2_t)0), v135), v55));
        int32x4_t v57 = (int32x4_t)vcvtq_s64_f64(vmulq_f64(vminnmq_f64((float64x2_t)(unint64_t)*(_OWORD *)&vmaxnmq_f64((float64x2_t)(unint64_t)*(_OWORD *)&vmulq_f64(vsubq_f64(vmlaq_f64(v127, v137, v132), v128), v52), (float64x2_t)0), (float64x2_t)xmmword_2220A4FA0), v54));
        int32x4_t v58 = (int32x4_t)vcvtq_s64_f64(vmulq_f64(vminnmq_f64(vmaxnmq_f64(vmulq_f64(vsubq_f64(vmlaq_n_f64(v126, v53, v136.f64[0]), v129), v51), (float64x2_t)0), v135), v55));
        int32x4_t v59 = (int32x4_t)vcvtq_s64_f64(vmulq_f64(vminnmq_f64((float64x2_t)(unint64_t)*(_OWORD *)&vmaxnmq_f64((float64x2_t)(unint64_t)*(_OWORD *)&vmulq_f64(vsubq_f64(vmlaq_f64(v127, v136, v132), v128), v52), (float64x2_t)0), (float64x2_t)xmmword_2220A4FA0), v54));
        *(int32x2_t *)&v53.f64[0] = vsub_s32(vmovn_s64((int64x2_t)v58), vmovn_s64((int64x2_t)v56));
        v60.i64[0] = SLODWORD(v53.f64[0]);
        v60.i64[1] = SHIDWORD(v53.f64[0]);
        float64x2_t v61 = vcvtq_f64_s64(v60);
        *(int32x2_t *)&v50.f64[0] = vsub_s32(vmovn_s64((int64x2_t)v59), vmovn_s64((int64x2_t)v57));
        v60.i64[0] = SLODWORD(v50.f64[0]);
        v60.i64[1] = SHIDWORD(v50.f64[0]);
        float64x2_t v62 = vcvtq_f64_s64(v60);
        int64x2_t v63 = vceqzq_f64(v61);
        if ((vandq_s8(vandq_s8((int8x16_t)vdupq_laneq_s64(v63, 1), (int8x16_t)v63), (int8x16_t)vceqzq_f64(v62)).u64[0] & 0x8000000000000000) != 0)
        {
          *(void *)&v51.f64[1] = vextq_s8((int8x16_t)v51, (int8x16_t)v51, 8uLL).u64[0];
          float64x2_t v62 = vmulq_f64(vmulq_f64(v132, v52), v54);
          float64x2_t v61 = vmulq_f64(vmulq_f64(v131, v51), v55);
        }
        int32x4_t v64 = vuzp1q_s32(v56, v57);
        unint64_t v65 = vextq_s8((int8x16_t)v61, (int8x16_t)v61, 8uLL).u64[0];
        float64x2_t v66 = vminnmq_f64(vmaxnmq_f64(vdivq_f64(v135, v61), (float64x2_t)vdupq_n_s64(0xC1EFFFFFFFE00000)), (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL));
        float64x2_t v67 = vminnmq_f64((float64x2_t)(unint64_t)*(_OWORD *)&vmaxnmq_f64((float64x2_t)(unint64_t)*(_OWORD *)&vdivq_f64(v135, v62), v134), v133);
        if ((int)v30 >= 1)
        {
          uint64_t v68 = 0;
          int8x16_t v69 = (int8x16_t)vcltzq_s32(vsubq_s32(vuzp1q_s32(v58, v59), v64));
          uint64_t v70 = v29[4];
          long long v71 = v49 + 8;
          int v72 = 30;
          do
          {
            float v73 = &v35[v68];
            int8x16_t v74 = (int8x16_t)vdupq_n_s32(1 << v72);
            *((_DWORD *)v73 + 52) = v72;
            *((int8x16_t *)v73 + objc_destroyWeak(this + 3) = vorrq_s8(v74, v69);
            int8x16_t v75 = vorrq_s8(vandq_s8((int8x16_t)vdupq_n_s32(-(1 << v72)), v69), vbicq_s8(v74, v69));
            v76.i64[0] = v75.i32[2];
            v76.i64[1] = v75.i32[3];
            *((float64x2_t *)v73 + 9) = vmulq_f64(v67, vcvtq_f64_s64(v76));
            v76.i64[0] = v75.i32[0];
            v76.i64[1] = v75.i32[1];
            *((int8x16_t *)v73 + 7) = v75;
            *((float64x2_t *)v73 + 8) = vmulq_f64(v66, vcvtq_f64_s64(v76));
            *((void *)v73 + Phase::SortedCommandQueue<Phase::SpatialModeler::PriorityQueue,Phase::SpatialModeler::PriorityQueueCommandType,std::variant<std::monostate,Phase::SpatialModeler::PriorityQueueEntry,Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueClusterIndexUpdate,Phase::SpatialModeler::PriorityQueueGlobals>>::ClearCommands(this + 27) = *(void *)(*(void *)(**(void **)&v71[-1] + 16 * *(void *)v71) + 8);
            v68 += 224;
            long long v71 = (float32x2_t *)((char *)v71 + v70);
            v72 -= 2;
          }
          while (224 * v30 != v68);
        }
        double v77 = v46 - v48;
        id v78 = (unint64_t *)*((void *)v35 + 27);
        unint64_t v80 = *v78;
        unint64_t v79 = v78[1];
        *((void *)v35 + 28) = v80;
        uint64_t v81 = v35 + 224;
        int32x4_t v82 = vdupq_n_s32(*((_DWORD *)v81 + 52));
        LODWORD(v54.f64[0]) = *((_DWORD *)v81 + 52);
        unsigned long long v83 = *(_OWORD *)&vshlq_s32(v64, vnegq_s32(v82)) & __PAIR128__(0xFFFFFFFCFFFFFFFCLL, 0xFFFFFFFCFFFFFFFCLL);
        v84.i64[0] = 0x400000004;
        v84.i64[1] = 0x400000004;
        *((uint32x4_t *)v81 + 1) = vshlq_u32((uint32x4_t)v83, (uint32x4_t)v82);
        *((uint32x4_t *)v81 + 2) = vshlq_u32((uint32x4_t)vaddq_s32((int32x4_t)v83, v84), (uint32x4_t)v82);
        v85.i64[0] = -1;
        v85.i64[1] = -1;
        int32x4_t v86 = vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vshlq_u32(v85, (uint32x4_t)v54), 0), (int8x16_t)v64), *((int32x4_t *)v81 + 3));
        int32x4_t v87 = vsubq_s32(v86, v64);
        v88.i64[0] = v87.i32[2];
        v88.i64[1] = v87.i32[3];
        float64x2_t v89 = vcvtq_f64_s64(v88);
        v88.i64[0] = v87.i32[0];
        v88.i64[1] = v87.i32[1];
        *((float64x2_t *)v81 + std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear(this + 5) = vmulq_f64(v66, vcvtq_f64_s64(v88));
        *((float64x2_t *)v81 + 6) = vmulq_f64(v67, v89);
        *((int32x4_t *)v81 + 4) = v86;
        *((_DWORD *)v81 + 2) = v79;
        double v90 = 0.0;
        int v91 = 1;
        v92.i64[0] = 0x100000001;
        v92.i64[1] = 0x100000001;
        v93.i64[0] = 0x800000008;
        v93.i64[1] = 0x800000008;
        *(void *)&v61.f64[1] = v65;
        int8x16_t v94 = (int8x16_t)vdupq_n_s64(0x8000000000000000);
        int32x4_t v95 = v64;
        while (1)
        {
          float64x2_t v96 = *((float64x2_t *)v81 + 5);
          float64x2_t v97 = *((float64x2_t *)v81 + 6);
          v47.f64[0] = fmin(fmin(v96.f64[0], v97.f64[0]), *((double *)v81 + 11));
          uint64_t v98 = (const float *)(v81 + 208);
          int32x4_t v99 = (int32x4_t)vld1q_dup_f32(v98);
          int32x4_t v100 = vshlq_s32(v95, vnegq_s32(v99));
          int32x4_t v101 = (int32x4_t)vshlq_u32((uint32x4_t)vorrq_s8(vandq_s8((int8x16_t)vshlq_n_s32(v100, 2uLL), v93), vandq_s8((int8x16_t)v100, v92)), (uint32x4_t)xmmword_2220A5E00);
          unsigned __int8 v102 = vorrq_s8(vorrq_s8((int8x16_t)vdupq_lane_s32(*(int32x2_t *)v101.i8, 1), (int8x16_t)vdupq_laneq_s32(v101, 2)), (int8x16_t)v101).u8[0];
          if (((v80 >> v102) & 1) == 0) {
            goto LABEL_17;
          }
          uint8x8_t v103 = (uint8x8_t)vcnt_s8((int8x8_t)(v80 & ~(-1 << v102)));
          v103.i16[0] = vaddlv_u8(v103);
          __int32 v104 = *((_DWORD *)v81 + 2) + v103.i32[0];
          if (v30 - 1 == v91)
          {
            id v115 = *a3;
            float v116 = v48 + v77 * v90;
            ***a3 = fminf(***a3, v116);
            float v117 = v48 + v77 * v47.f64[0];
            *v115[1] = fmaxf(*v115[1], v117);
            *(_DWORD *)void v115[2] = v104;
LABEL_17:
            if (v47.f64[0] >= 1.0) {
              return;
            }
            int32x4_t v118 = (int32x4_t)vceqq_f64(*((float64x2_t *)v81 + 6), v47);
            int8x16_t v119 = *((int8x16_t *)v81 + 4);
            int32x4_t v120 = (int32x4_t)vceqq_f64(*((float64x2_t *)v81 + 5), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v47.f64[0], 0));
            int8x16_t v121 = (int8x16_t)vuzp1q_s32(v120, v118);
            *((int32x4_t *)v81 + 1std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = v120;
            *((int32x4_t *)v81 + std::__function::__value_func<void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::~__value_func[abi:ne180100](this + 11) = v118;
            *((int8x16_t *)v81 + 12) = v121;
            int32x4_t v95 = (int32x4_t)vbslq_s8(v121, v119, (int8x16_t)vaddq_s32(vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vmulq_n_f64(v61, v47.f64[0])), (int32x4_t)vcvtq_s64_f64(vmulq_f64(v62, v47))), v64));
            while (1)
            {
              uint32x4_t v122 = (uint32x4_t)vorrq_s8((int8x16_t)vcgeq_s32(v95, *((int32x4_t *)v81 + 2)), (int8x16_t)vcgtq_s32(*((int32x4_t *)v81 + 1), v95));
              v122.i32[3] = v122.i32[2];
              if ((vmaxvq_u32(v122) & 0x80000000) == 0) {
                break;
              }
              if (v91 < 2) {
                return;
              }
              --v91;
              v81 -= 224;
            }
            v45.i64[0] = 0x8000000000000000;
            float64x2_t v123 = vaddq_f64(*((float64x2_t *)v81 + 6), (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64((int64x2_t)*((unint64_t *)v81 + 22)), *((int8x16_t *)v81 + 9), v45));
            float64x2_t v124 = vaddq_f64(*((float64x2_t *)v81 + 5), (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(*((int64x2_t *)v81 + 10)), *((int8x16_t *)v81 + 8), v94));
            *((int8x16_t *)v81 + 4) = vbslq_s8(*((int8x16_t *)v81 + 12), (int8x16_t)vaddq_s32(*((int32x4_t *)v81 + 7), *((int32x4_t *)v81 + 4)), *((int8x16_t *)v81 + 4));
            *((float64x2_t *)v81 + std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear(this + 5) = v124;
            *((float64x2_t *)v81 + 6) = v123;
            unint64_t v80 = *(void *)v81;
            double v90 = v47.f64[0];
          }
          else
          {
            float64x2_t v105 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v47.f64[0], 0);
            int32x4_t v106 = (int32x4_t)vceqq_f64(v97, v47);
            int32x4_t v107 = (int32x4_t)vceqq_f64(v96, v105);
            *((int32x4_t *)v81 + 1std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = v107;
            *((int32x4_t *)v81 + std::__function::__value_func<void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::~__value_func[abi:ne180100](this + 11) = v106;
            *((int32x4_t *)v81 + 12) = vuzp1q_s32(v107, v106);
            char v108 = (unint64_t *)(*((void *)v81 + 27) + 16 * v104);
            unint64_t v80 = *v108;
            unint64_t v109 = v108[1];
            *((void *)v81 + 28) = v80;
            v81 += 224;
            ++v91;
            int32x4_t v110 = vdupq_n_s32(*((_DWORD *)v81 + 52));
            v107.i32[0] = *((_DWORD *)v81 + 52);
            unsigned long long v111 = *(_OWORD *)&vshlq_s32(v95, vnegq_s32(v110)) & __PAIR128__(0xFFFFFFFCFFFFFFFCLL, 0xFFFFFFFCFFFFFFFCLL);
            *((uint32x4_t *)v81 + 1) = vshlq_u32((uint32x4_t)v111, (uint32x4_t)v110);
            *((uint32x4_t *)v81 + 2) = vshlq_u32((uint32x4_t)vaddq_s32((int32x4_t)v111, v84), (uint32x4_t)v110);
            float64x2_t v47 = (float64x2_t)vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vshlq_u32(v85, (uint32x4_t)v107), 0), (int8x16_t)v95), *((int32x4_t *)v81 + 3));
            int32x4_t v112 = vsubq_s32((int32x4_t)v47, v64);
            v113.i64[0] = v112.i32[2];
            v113.i64[1] = v112.i32[3];
            float64x2_t v114 = vcvtq_f64_s64(v113);
            v113.i64[0] = v112.i32[0];
            v113.i64[1] = v112.i32[1];
            *((float64x2_t *)v81 + std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear(this + 5) = vmulq_f64(v66, vcvtq_f64_s64(v113));
            *((float64x2_t *)v81 + 6) = vmulq_f64(v67, v114);
            *((float64x2_t *)v81 + 4) = v47;
            *((_DWORD *)v81 + 2) = v109;
          }
        }
      }
      uint64_t v125 = **(NSObject ***)(Phase::Logger::GetInstance((Phase::Logger *)a1) + 416);
      if (os_log_type_enabled(v125, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315650;
        unsigned int v139 = "GeoRaycastUtility.hpp";
        __int16 v140 = 1024;
        int v141 = 477;
        __int16 v142 = 1024;
        int v143 = v30;
        _os_log_impl(&dword_221E5E000, v125, OS_LOG_TYPE_ERROR, "%25s:%-5d Excessive level count (%d) in voxel tree: resolution has an invalid numerical value.", buf, 0x18u);
      }
    }
  }
}

void Phase::SpatialModeler::CompleteTraceWithEnergyBatch(uint64_t a1, uint64_t a2)
{
  int v2 = 1;
  atomic_compare_exchange_strong((atomic_uint *volatile)(a2 + 4), (unsigned int *)&v2, 2u);
  if (v2 == 1)
  {
    uint64_t v5 = *(std::__shared_weak_count **)(a2 + 16);
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
    unsigned int v6 = atomic_load((unsigned int *)a2);
    if (v6 != 5)
    {
      if (v6 == 2)
      {
        Phase::SpatialModeler::CalculateFinalEnergyLoss(a1, a2);
        unsigned int v7 = 3;
      }
      else
      {
        unsigned int v7 = 5;
      }
      atomic_store(v7, (unsigned int *)a2);
    }
    atomic_store(4u, (unsigned int *)(a2 + 4));
    if (*(void *)(a2 + 48))
    {
      std::function<void ()(Phase::Geometry::SceneQueryBatch *)>::operator()(a2 + 24, a2);
    }
  }
}

void Phase::Command<128>::Invoker<void (*)(Phase::Geometry::SystemState *,Phase::Geometry::SceneQueryBatch *),void,Phase::Geometry::SystemState *,Phase::Geometry::SceneQueryBatch *>::~Invoker()
{
}

uint64_t Phase::Command<128>::Invoker<void (*)(Phase::Geometry::SystemState *,Phase::Geometry::SceneQueryBatch *),void,Phase::Geometry::SystemState *,Phase::Geometry::SceneQueryBatch *>::Call(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(a1 + 8))(*(void *)(a1 + 16), *(void *)(a1 + 24));
}

BOOL Phase::SpatialModeler::TRAP::IsExpectedInputSubbandCount(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  int v2 = *(_DWORD *)(a1 + 124);
  if (v2 == 10) {
    return 1;
  }
  if (!v2)
  {
    *(void *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_DWORD *)(a1 + 124) = 10;
    return 1;
  }
  unsigned int v6 = **(NSObject ***)(Phase::Logger::GetInstance((Phase::Logger *)a1) + 1184);
  BOOL result = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
  if (result)
  {
    int v7 = *(_DWORD *)(a1 + 124);
    int v8 = 136316162;
    float64x2_t v9 = "TRAPCommon.cpp";
    __int16 v10 = 1024;
    int v11 = 34;
    __int16 v12 = 2080;
    uint64_t v13 = a2;
    __int16 v14 = 1024;
    int v15 = v7;
    __int16 v16 = 1024;
    int v17 = 10;
    _os_log_impl(&dword_221E5E000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d CheckInputDataSubbandCount: subband count of %s is %d. Only %d or 0 are supported", (uint8_t *)&v8, 0x28u);
    return 0;
  }
  return result;
}

char *Phase::SpatialModeler::TRAP::CleanInputReverbTime(char *this, float *a2)
{
  int v2 = this;
  float v3 = *(float *)this;
  if ((*(_DWORD *)this & 0x7FFFFFFFu) > 0x7F7FFFFF
    || (this = Phase::SpatialModeler::TRAP::TP((Phase::SpatialModeler::TRAP *)this), v3 < *((float *)this + 100)))
  {
    this = Phase::SpatialModeler::TRAP::TP((Phase::SpatialModeler::TRAP *)this);
    *(_DWORD *)int v2 = *((_DWORD *)this + 100);
  }
  return this;
}

float Phase::SpatialModeler::TRAP::CleanInputReverbTimeAndConfidence(Phase::SpatialModeler::TRAP *this, float *a2, float *a3)
{
  float v5 = *(float *)this;
  int v6 = *(_DWORD *)this & 0x7FFFFFFF;
  int v7 = (float *)Phase::SpatialModeler::TRAP::TP(this);
  float v8 = v7[100];
  if (v6 >= 2139095040)
  {
    *(float *)this = v8;
    *a2 = 0.0;
  }
  else if (v5 < v8)
  {
    *(_DWORD *)this = *((_DWORD *)Phase::SpatialModeler::TRAP::TP((Phase::SpatialModeler::TRAP *)v7) + 100);
  }
  float result = fminf(fmaxf(*a2, 0.0), 1.0);
  *a2 = result;
  return result;
}

void Phase::SpatialModeler::TRAP::MixMultibandValuesAndConfidences(uint64_t a1, float32x2_t *a2, float (*a3)(float), float (*a4)(float), float (*a5)(float, float, float, float), float (*a6)(float), float (*a7)(float))
{
  int32x4_t v57 = a4;
  uint64_t v13 = 0;
  memset(v59, 0, 124);
  do
  {
    *(float *)((char *)v59 + v1objc_destroyWeak(this + 3) = a3(*(float *)(a1 + v13));
    v13 += 4;
  }
  while (v13 != 40);
  uint64_t v14 = 0;
  memset(v58, 0, 124);
  do
  {
    *(float *)((char *)v58 + v14) = a3(*(float *)(a1 + 256 + v14));
    v14 += 4;
  }
  while (v14 != 40);
  uint64_t v15 = 0;
  *a2 = 0;
  a2[1] = 0;
  a2[3].i32[0] = 0;
  a2[2] = 0;
  __int16 v16 = (_DWORD *)(a1 + 512);
  *(_OWORD *)(a1 + 62std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 56std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 64std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 72std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 748) = 0u;
  *(_DWORD *)(a1 + 636) = 10;
  *(_DWORD *)(a1 + 764) = 10;
  *(_OWORD *)(a1 + 876) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_DWORD *)(a1 + 892) = 10;
  float v17 = 0.0;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 80std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  float v18 = 0.0;
  do
  {
    float v19 = *(float *)((char *)v59 + v15);
    float v20 = *(float *)((char *)v58 + v15);
    float64x2_t v21 = (float *)(a1 + v15);
    float v22 = a5(v19, v20, *(float *)(a1 + v15 + 128), *(float *)(a1 + v15 + 384));
    v21[192] = v22;
    float v23 = *(float *)(a1 + v15 + 128);
    float v24 = *(float *)(a1 + v15 + 384);
    v21[160] = (float)(v22 * v24) + (float)((float)(1.0 - v22) * v23);
    if (v15)
    {
      float v25 = *(float *)((char *)&v58[7] + v15 + 12);
      float v26 = *(float *)((char *)&v57 + v15 + 4);
      float v27 = a5((float)(v19 + v25) * 0.5, (float)(v20 + v26) * 0.5, sqrtf(v23 * v21[31]), sqrtf(v24 * v21[95]));
      v21[128] = v21[127]
               + (float)((float)((float)(v20 - v26) * v27) + (float)((float)(1.0 - v27) * (float)(v19 - v25)));
    }
    else
    {
      _DWORD *v16 = 0;
    }
    float v28 = a6(v21[32]);
    float v29 = fmaxf(v28, fmaxf(v28, 0.00000011921) * 0.00000011921);
    float v30 = a7(v21[96]);
    float v31 = v29 * fmaxf(v30, fmaxf(v30, 0.00000011921) * 0.00000011921);
    float v17 = v17 + v31;
    float v32 = a2->f32[1];
    float v33 = a2->f32[0] + (float)(v31 * v19);
    a2->f32[0] = v33;
    float v34 = v32 + (float)(v31 * v21[32]);
    float v35 = a2[1].f32[1];
    float v36 = a2[1].f32[0] + (float)(v31 * v20);
    a2->f32[1] = v34;
    a2[1].f32[0] = v36;
    float v37 = v35 + (float)(v31 * v21[96]);
    a2[1].f32[1] = v37;
    float v18 = v18 + (float)(v31 * *(float *)(a1 + v15 + 512));
    v15 += 4;
  }
  while (v15 != 40);
  a2->f32[0] = v33 / v17;
  a2->f32[1] = v34 / v17;
  a2[1].f32[0] = v36 / v17;
  a2[1].f32[1] = v37 / v17;
  float v38 = ((float (*)(void))a5)();
  a2[3].f32[0] = v38;
  int32x2_t v39 = (int32x2_t)vmla_n_f32(vmul_n_f32(a2[1], v38), *a2, 1.0 - v38);
  a2[2] = (float32x2_t)v39;
  uint64_t v40 = *(unsigned int *)(a1 + 636);
  if (v40)
  {
    *(float *)v39.i32 = *(float *)v39.i32 - (float)(v18 / v17);
    if (v40 == 10)
    {
      float32x4_t v50 = (float32x4_t)vdupq_lane_s32(v39, 0);
      float32x4_t v51 = vaddq_f32(v50, *(float32x4_t *)(a1 + 512));
      float32x4_t v52 = vaddq_f32(v50, *(float32x4_t *)(a1 + 528));
      float32x4_t v53 = vaddq_f32(v50, *(float32x4_t *)(a1 + 544));
      *(float32x4_t *)(a1 + 512) = v51;
      *(float32x4_t *)(a1 + 528) = v52;
      *(float32x4_t *)(a1 + 544) = v53;
    }
    else if (v40 == 31)
    {
      float32x4_t v41 = (float32x4_t)vdupq_lane_s32(v39, 0);
      float32x4_t v42 = vaddq_f32(v41, *(float32x4_t *)(a1 + 528));
      float32x4_t v43 = vaddq_f32(v41, *(float32x4_t *)(a1 + 512));
      float32x4_t v44 = vaddq_f32(v41, *(float32x4_t *)(a1 + 560));
      float32x4_t v45 = vaddq_f32(v41, *(float32x4_t *)(a1 + 544));
      float32x4_t v46 = vaddq_f32(v41, *(float32x4_t *)(a1 + 592));
      float32x4_t v47 = vaddq_f32(v41, *(float32x4_t *)(a1 + 576));
      float32x4_t v48 = vaddq_f32(v41, *(float32x4_t *)(a1 + 608));
      float32x4_t v49 = vaddq_f32(v41, *(float32x4_t *)(a1 + 624));
      v49.i32[3] = HIDWORD(*(_OWORD *)(a1 + 624));
      *(float32x4_t *)(a1 + 512) = v43;
      *(float32x4_t *)(a1 + 528) = v42;
      *(float32x4_t *)(a1 + 544) = v45;
      *(float32x4_t *)(a1 + 56std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = v44;
      *(float32x4_t *)(a1 + 576) = v47;
      *(float32x4_t *)(a1 + 592) = v46;
      *(float32x4_t *)(a1 + 608) = v48;
      *(float32x4_t *)(a1 + 624) = v49;
    }
    else
    {
      float64x2_t v54 = (float *)(a1 + 512);
      do
      {
        *float64x2_t v54 = *(float *)v39.i32 + *v54;
        ++v54;
        --v40;
      }
      while (v40);
    }
  }
  uint64_t v55 = 0;
  int32x4_t v56 = v57;
  do
  {
    *(float *)&v16[v55] = v56(*(float *)&v16[v55]);
    ++v55;
  }
  while (v55 != 10);
  a2->f32[0] = v56(a2->f32[0]);
  a2[1].f32[0] = v56(a2[1].f32[0]);
  a2[2].f32[0] = v56(a2[2].f32[0]);
}

char *Phase::SpatialModeler::TRAP::CalculateSeatbeltReverbTimeAndConfidenceFromMFP(Phase::SpatialModeler::TRAP *a1, uint64_t a2, float a3)
{
  int v6 = Phase::SpatialModeler::TRAP::TP(a1);
  float v7 = *((float *)v6 + 118);
  float result = Phase::SpatialModeler::TRAP::TP((Phase::SpatialModeler::TRAP *)v6);
  uint64_t v9 = 0;
  float v10 = fminf(fmaxf(a3, v7), *((float *)result + 119));
  *((_DWORD *)a1 + 31) = 10;
  *(_DWORD *)(a2 + 124) = 10;
  do
  {
    *(float *)((char *)a1 + v9 * 4) = *(float *)&__const__ZN5Phase14SpatialModeler4TRAP47CalculateSeatbeltReverbTimeAndConfidenceFromMFPEfRNS_8SubbandsIfEES4__kCCoef[v9]
                                    + (float)((float)(*(float *)&__const__ZN5Phase14SpatialModeler4TRAP47CalculateSeatbeltReverbTimeAndConfidenceFromMFPEfRNS_8SubbandsIfEES4__kBCoef[v9]
                                                    + (float)(*(float *)&__const__ZN5Phase14SpatialModeler4TRAP47CalculateSeatbeltReverbTimeAndConfidenceFromMFPEfRNS_8SubbandsIfEES4__kACoef[v9]
                                                            * v10))
                                            * v10);
    float result = Phase::SpatialModeler::TRAP::TP((Phase::SpatialModeler::TRAP *)result);
    *(_DWORD *)(a2 + v9 * 4) = *((_DWORD *)result + 111);
    ++v9;
  }
  while (v9 != 10);
  return result;
}

float Phase::SpatialModeler::TRAP::CalculateRoomChangeConfidence(Phase::SpatialModeler::TRAP *this, float a2)
{
  float v3 = (float *)Phase::SpatialModeler::TRAP::TP(this);
  float v4 = v3[120];
  float v5 = (float *)Phase::SpatialModeler::TRAP::TP((Phase::SpatialModeler::TRAP *)v3);
  float v6 = fminf(fmaxf((float)(a2 - v4) / (float)(v5[121] - v4), 0.0), 1.0);
  float v7 = Phase::SpatialModeler::TRAP::TP((Phase::SpatialModeler::TRAP *)v5);
  float v8 = powf(v6, *((float *)v7 + 122));
  float v10 = (float *)Phase::SpatialModeler::TRAP::TP(v9);
  float v11 = v10[122];
  return v8
       * (float)((float)(*((float *)Phase::SpatialModeler::TRAP::TP((Phase::SpatialModeler::TRAP *)v10) + 122) + 1.0)
               - (float)(v11 * v6));
}

float Phase::SpatialModeler::TRAP::CalculateAcousticAndVisualMix(Phase::SpatialModeler::TRAP *this, float a2, float a3, float a4, float a5)
{
  float v7 = Phase::SpatialModeler::TRAP::TP(this);
  float v8 = powf(a4, *((float *)v7 + 109)) + 1.1755e-38;
  float v10 = Phase::SpatialModeler::TRAP::TP(v9);
  return fmaxf(1.0 - (float)(v8 / (float)(powf(a5, *((float *)v10 + 110)) + 1.1755e-38)), 0.0);
}

float Phase::SpatialModeler::TRAP::CalculateSeatbeltAndAcousticVisualMix(Phase::SpatialModeler::TRAP *this, float a2, int8x16_t a3, float a4, float a5)
{
  float result = 1.0;
  if (a2 < *(float *)a3.i32)
  {
    *(float *)a3.i32 = a4 - a5;
    int8x16_t v12 = a3;
    if ((float)(a4 - a5) < 0.0) {
      float v7 = -(float)(a4 - a5);
    }
    else {
      float v7 = a4 - a5;
    }
    float v8 = Phase::SpatialModeler::TRAP::TP(this);
    *(float *)v9.i32 = powf(v7, *((float *)v8 + 116));
    v10.i64[0] = 0x8000000080000000;
    v10.i64[1] = 0x8000000080000000;
    return 1.0
         - fminf((float)(*(float *)vbslq_s8(v10, v9, v12).i32 * 0.5) + 0.5, *((float *)Phase::SpatialModeler::TRAP::TP(v11) + 117));
  }
  return result;
}

float Phase::SpatialModeler::TRAP::CalculateRateLimitingConfidenceWithRoomChange(Phase::SpatialModeler::TRAP *this, float a2, float a3)
{
  float v5 = Phase::SpatialModeler::TRAP::TP(this);
  float v6 = powf(a3, *((float *)v5 + 124));
  float v8 = (float *)Phase::SpatialModeler::TRAP::TP(v7);
  float v9 = fmaxf(a2, v8[104]);
  int8x16_t v10 = Phase::SpatialModeler::TRAP::TP((Phase::SpatialModeler::TRAP *)v8);
  float v11 = powf(v9, *((float *)v10 + 103));
  return (float)(v6 * *((float *)Phase::SpatialModeler::TRAP::TP(v12) + 125)) + (float)((float)(1.0 - v6) * v11);
}

char *Phase::SpatialModeler::TRAP::TP(Phase::SpatialModeler::TRAP *this)
{
  uint64_t v136 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)_MergedGlobals_24, memory_order_acquire) & 1) == 0)
  {
    this = (Phase::SpatialModeler::TRAP *)__cxa_guard_acquire(_MergedGlobals_24);
    if (this)
    {
      Phase::SpatialModeler::TRAP::TuningParameters::TuningParameters(this);
      __cxa_guard_release(_MergedGlobals_24);
    }
  }
  if (!byte_267F77C70)
  {
    byte_267F77C70 = 1;
    uint64_t Instance = Phase::Logger::GetInstance(this);
    int v2 = (Phase::Logger *)Phase::SpatialModeler::TRAP::TP((Phase::SpatialModeler::TRAP *)Instance);
    float v3 = **(NSObject ***)(Phase::Logger::GetInstance(v2) + 1184);
    BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
    if (v4)
    {
      double v5 = *(float *)(Instance + 1232);
      int v128 = 136315906;
      float64x2_t v129 = "TRAPParameters.cpp";
      __int16 v130 = 1024;
      int v131 = 34;
      __int16 v132 = 2080;
      float64x2_t v133 = "minimum_reverb_time";
      __int16 v134 = 2048;
      double v135 = v5;
      _os_log_impl(&dword_221E5E000, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d ReadTuningParametersFromDefaults changed phase_are_process_rt60_%s to %f", (uint8_t *)&v128, 0x26u);
    }
    LODWORD(xmmword_267F77E0std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = *(_DWORD *)(Instance + 1232);
    float v6 = (Phase::Logger *)Phase::SpatialModeler::TRAP::TP((Phase::SpatialModeler::TRAP *)v4);
    float v7 = **(NSObject ***)(Phase::Logger::GetInstance(v6) + 1184);
    BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    if (v8)
    {
      double v9 = *(float *)(Instance + 1236);
      int v128 = 136315906;
      float64x2_t v129 = "TRAPParameters.cpp";
      __int16 v130 = 1024;
      int v131 = 34;
      __int16 v132 = 2080;
      float64x2_t v133 = "maximum_reverb_time";
      __int16 v134 = 2048;
      double v135 = v9;
      _os_log_impl(&dword_221E5E000, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d ReadTuningParametersFromDefaults changed phase_are_process_rt60_%s to %f", (uint8_t *)&v128, 0x26u);
    }
    DWORD1(xmmword_267F77E0std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = *(_DWORD *)(Instance + 1236);
    int8x16_t v10 = (Phase::Logger *)Phase::SpatialModeler::TRAP::TP((Phase::SpatialModeler::TRAP *)v8);
    float v11 = **(NSObject ***)(Phase::Logger::GetInstance(v10) + 1184);
    BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    if (v12)
    {
      double v13 = *(float *)(Instance + 1240);
      int v128 = 136315906;
      float64x2_t v129 = "TRAPParameters.cpp";
      __int16 v130 = 1024;
      int v131 = 34;
      __int16 v132 = 2080;
      float64x2_t v133 = "smoothing_in_seconds_per_jnd";
      __int16 v134 = 2048;
      double v135 = v13;
      _os_log_impl(&dword_221E5E000, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d ReadTuningParametersFromDefaults changed phase_are_process_rt60_%s to %f", (uint8_t *)&v128, 0x26u);
    }
    DWORD2(xmmword_267F77E0std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = *(_DWORD *)(Instance + 1240);
    uint64_t v14 = (Phase::Logger *)Phase::SpatialModeler::TRAP::TP((Phase::SpatialModeler::TRAP *)v12);
    uint64_t v15 = **(NSObject ***)(Phase::Logger::GetInstance(v14) + 1184);
    BOOL v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    if (v16)
    {
      double v17 = *(float *)(Instance + 1244);
      int v128 = 136315906;
      float64x2_t v129 = "TRAPParameters.cpp";
      __int16 v130 = 1024;
      int v131 = 34;
      __int16 v132 = 2080;
      float64x2_t v133 = "low_confidence_convergence_slowing_exponent";
      __int16 v134 = 2048;
      double v135 = v17;
      _os_log_impl(&dword_221E5E000, v15, OS_LOG_TYPE_DEFAULT, "%25s:%-5d ReadTuningParametersFromDefaults changed phase_are_process_rt60_%s to %f", (uint8_t *)&v128, 0x26u);
    }
    HIDWORD(xmmword_267F77E0std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = *(_DWORD *)(Instance + 1244);
    float v18 = (Phase::Logger *)Phase::SpatialModeler::TRAP::TP((Phase::SpatialModeler::TRAP *)v16);
    float v19 = **(NSObject ***)(Phase::Logger::GetInstance(v18) + 1184);
    BOOL v20 = os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
    if (v20)
    {
      double v21 = *(float *)(Instance + 1248);
      int v128 = 136315906;
      float64x2_t v129 = "TRAPParameters.cpp";
      __int16 v130 = 1024;
      int v131 = 34;
      __int16 v132 = 2080;
      float64x2_t v133 = "minimum_convergence_confidence";
      __int16 v134 = 2048;
      double v135 = v21;
      _os_log_impl(&dword_221E5E000, v19, OS_LOG_TYPE_DEFAULT, "%25s:%-5d ReadTuningParametersFromDefaults changed phase_are_process_rt60_%s to %f", (uint8_t *)&v128, 0x26u);
    }
    dword_267F77E10 = *(_DWORD *)(Instance + 1248);
    Phase::SpatialModeler::TRAP::TP((Phase::SpatialModeler::TRAP *)v20);
    float v22 = Phase::SpatialModeler::TRAP::TP(void)::$_0::operator()<std::vector<float>,std::array<float,31ul>>((const void **)(Instance + 1256), &unk_267F77C80, (uint64_t)"acoustic_confidence_multipliers");
    Phase::SpatialModeler::TRAP::TP((Phase::SpatialModeler::TRAP *)v22);
    float v23 = Phase::SpatialModeler::TRAP::TP(void)::$_0::operator()<std::vector<float>,std::array<float,31ul>>((const void **)(Instance + 1280), &unk_267F77D00, (uint64_t)"default_curated_from_scene_reverb_time");
    Phase::SpatialModeler::TRAP::TP((Phase::SpatialModeler::TRAP *)v23);
    float v24 = Phase::SpatialModeler::TRAP::TP(void)::$_0::operator()<std::vector<float>,std::array<float,31ul>>((const void **)(Instance + 1304), &unk_267F77D80, (uint64_t)"default_curated_from_scene_confidence");
    float v25 = (Phase::Logger *)Phase::SpatialModeler::TRAP::TP((Phase::SpatialModeler::TRAP *)v24);
    float v26 = **(NSObject ***)(Phase::Logger::GetInstance(v25) + 1184);
    BOOL v27 = os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT);
    if (v27)
    {
      double v28 = *(float *)(Instance + 1328);
      int v128 = 136315906;
      float64x2_t v129 = "TRAPParameters.cpp";
      __int16 v130 = 1024;
      int v131 = 34;
      __int16 v132 = 2080;
      float64x2_t v133 = "acoustic_high_confidence_weight_exponent";
      __int16 v134 = 2048;
      double v135 = v28;
      _os_log_impl(&dword_221E5E000, v26, OS_LOG_TYPE_DEFAULT, "%25s:%-5d ReadTuningParametersFromDefaults changed phase_are_process_rt60_%s to %f", (uint8_t *)&v128, 0x26u);
    }
    dword_267F77E14 = *(_DWORD *)(Instance + 1328);
    float v29 = (Phase::Logger *)Phase::SpatialModeler::TRAP::TP((Phase::SpatialModeler::TRAP *)v27);
    float v30 = **(NSObject ***)(Phase::Logger::GetInstance(v29) + 1184);
    BOOL v31 = os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT);
    if (v31)
    {
      double v32 = *(float *)(Instance + 1332);
      int v128 = 136315906;
      float64x2_t v129 = "TRAPParameters.cpp";
      __int16 v130 = 1024;
      int v131 = 34;
      __int16 v132 = 2080;
      float64x2_t v133 = "visual_high_confidence_weight_exponent";
      __int16 v134 = 2048;
      double v135 = v32;
      _os_log_impl(&dword_221E5E000, v30, OS_LOG_TYPE_DEFAULT, "%25s:%-5d ReadTuningParametersFromDefaults changed phase_are_process_rt60_%s to %f", (uint8_t *)&v128, 0x26u);
    }
    dword_267F77E18 = *(_DWORD *)(Instance + 1332);
    float v33 = (Phase::Logger *)Phase::SpatialModeler::TRAP::TP((Phase::SpatialModeler::TRAP *)v31);
    float v34 = **(NSObject ***)(Phase::Logger::GetInstance(v33) + 1184);
    BOOL v35 = os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT);
    if (v35)
    {
      double v36 = *(float *)(Instance + 1336);
      int v128 = 136315906;
      float64x2_t v129 = "TRAPParameters.cpp";
      __int16 v130 = 1024;
      int v131 = 34;
      __int16 v132 = 2080;
      float64x2_t v133 = "seatbelt_high_confidence_weight_exponent";
      __int16 v134 = 2048;
      double v135 = v36;
      _os_log_impl(&dword_221E5E000, v34, OS_LOG_TYPE_DEFAULT, "%25s:%-5d ReadTuningParametersFromDefaults changed phase_are_process_rt60_%s to %f", (uint8_t *)&v128, 0x26u);
    }
    dword_267F77E1C = *(_DWORD *)(Instance + 1336);
    float v37 = (Phase::Logger *)Phase::SpatialModeler::TRAP::TP((Phase::SpatialModeler::TRAP *)v35);
    float v38 = **(NSObject ***)(Phase::Logger::GetInstance(v37) + 1184);
    BOOL v39 = os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT);
    if (v39)
    {
      double v40 = *(float *)(Instance + 1340);
      int v128 = 136315906;
      float64x2_t v129 = "TRAPParameters.cpp";
      __int16 v130 = 1024;
      int v131 = 34;
      __int16 v132 = 2080;
      float64x2_t v133 = "visual_acoustic_high_confidence_weight_exponent";
      __int16 v134 = 2048;
      double v135 = v40;
      _os_log_impl(&dword_221E5E000, v38, OS_LOG_TYPE_DEFAULT, "%25s:%-5d ReadTuningParametersFromDefaults changed phase_are_process_rt60_%s to %f", (uint8_t *)&v128, 0x26u);
    }
    LODWORD(xmmword_267F77E2std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = *(_DWORD *)(Instance + 1340);
    float32x4_t v41 = (Phase::Logger *)Phase::SpatialModeler::TRAP::TP((Phase::SpatialModeler::TRAP *)v39);
    float32x4_t v42 = **(NSObject ***)(Phase::Logger::GetInstance(v41) + 1184);
    BOOL v43 = os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT);
    if (v43)
    {
      double v44 = *(float *)(Instance + 1344);
      int v128 = 136315906;
      float64x2_t v129 = "TRAPParameters.cpp";
      __int16 v130 = 1024;
      int v131 = 34;
      __int16 v132 = 2080;
      float64x2_t v133 = "acoustic_mix_confidence_reduction_exponent";
      __int16 v134 = 2048;
      double v135 = v44;
      _os_log_impl(&dword_221E5E000, v42, OS_LOG_TYPE_DEFAULT, "%25s:%-5d ReadTuningParametersFromDefaults changed phase_are_process_rt60_%s to %f", (uint8_t *)&v128, 0x26u);
    }
    DWORD1(xmmword_267F77E2std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = *(_DWORD *)(Instance + 1344);
    float32x4_t v45 = (Phase::Logger *)Phase::SpatialModeler::TRAP::TP((Phase::SpatialModeler::TRAP *)v43);
    float32x4_t v46 = **(NSObject ***)(Phase::Logger::GetInstance(v45) + 1184);
    BOOL v47 = os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT);
    if (v47)
    {
      double v48 = *(float *)(Instance + 1348);
      int v128 = 136315906;
      float64x2_t v129 = "TRAPParameters.cpp";
      __int16 v130 = 1024;
      int v131 = 34;
      __int16 v132 = 2080;
      float64x2_t v133 = "visual_mix_confidence_reduction_exponent";
      __int16 v134 = 2048;
      double v135 = v48;
      _os_log_impl(&dword_221E5E000, v46, OS_LOG_TYPE_DEFAULT, "%25s:%-5d ReadTuningParametersFromDefaults changed phase_are_process_rt60_%s to %f", (uint8_t *)&v128, 0x26u);
    }
    DWORD2(xmmword_267F77E2std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = *(_DWORD *)(Instance + 1348);
    float32x4_t v49 = (Phase::Logger *)Phase::SpatialModeler::TRAP::TP((Phase::SpatialModeler::TRAP *)v47);
    float32x4_t v50 = **(NSObject ***)(Phase::Logger::GetInstance(v49) + 1184);
    BOOL v51 = os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT);
    if (v51)
    {
      double v52 = *(float *)(Instance + 1352);
      int v128 = 136315906;
      float64x2_t v129 = "TRAPParameters.cpp";
      __int16 v130 = 1024;
      int v131 = 34;
      __int16 v132 = 2080;
      float64x2_t v133 = "broadband_seatbelt_confidence";
      __int16 v134 = 2048;
      double v135 = v52;
      _os_log_impl(&dword_221E5E000, v50, OS_LOG_TYPE_DEFAULT, "%25s:%-5d ReadTuningParametersFromDefaults changed phase_are_process_rt60_%s to %f", (uint8_t *)&v128, 0x26u);
    }
    HIDWORD(xmmword_267F77E2std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = *(_DWORD *)(Instance + 1352);
    float32x4_t v53 = (Phase::Logger *)Phase::SpatialModeler::TRAP::TP((Phase::SpatialModeler::TRAP *)v51);
    float64x2_t v54 = **(NSObject ***)(Phase::Logger::GetInstance(v53) + 1184);
    BOOL v55 = os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT);
    if (v55)
    {
      double v56 = *(float *)(Instance + 1356);
      int v128 = 136315906;
      float64x2_t v129 = "TRAPParameters.cpp";
      __int16 v130 = 1024;
      int v131 = 34;
      __int16 v132 = 2080;
      float64x2_t v133 = "broadband_visual_confidence";
      __int16 v134 = 2048;
      double v135 = v56;
      _os_log_impl(&dword_221E5E000, v54, OS_LOG_TYPE_DEFAULT, "%25s:%-5d ReadTuningParametersFromDefaults changed phase_are_process_rt60_%s to %f", (uint8_t *)&v128, 0x26u);
    }
    dword_267F77E30 = *(_DWORD *)(Instance + 1356);
    int32x4_t v57 = (Phase::Logger *)Phase::SpatialModeler::TRAP::TP((Phase::SpatialModeler::TRAP *)v55);
    int32x4_t v58 = **(NSObject ***)(Phase::Logger::GetInstance(v57) + 1184);
    BOOL v59 = os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT);
    if (v59)
    {
      double v60 = *(float *)(Instance + 1360);
      int v128 = 136315906;
      float64x2_t v129 = "TRAPParameters.cpp";
      __int16 v130 = 1024;
      int v131 = 34;
      __int16 v132 = 2080;
      float64x2_t v133 = "seatbelt_to_initial_reverb_time_multiplier";
      __int16 v134 = 2048;
      double v135 = v60;
      _os_log_impl(&dword_221E5E000, v58, OS_LOG_TYPE_DEFAULT, "%25s:%-5d ReadTuningParametersFromDefaults changed phase_are_process_rt60_%s to %f", (uint8_t *)&v128, 0x26u);
    }
    dword_267F77E34 = *(_DWORD *)(Instance + 1360);
    float64x2_t v61 = (Phase::Logger *)Phase::SpatialModeler::TRAP::TP((Phase::SpatialModeler::TRAP *)v59);
    float64x2_t v62 = **(NSObject ***)(Phase::Logger::GetInstance(v61) + 1184);
    BOOL v63 = os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT);
    if (v63)
    {
      double v64 = *(float *)(Instance + 1364);
      int v128 = 136315906;
      float64x2_t v129 = "TRAPParameters.cpp";
      __int16 v130 = 1024;
      int v131 = 34;
      __int16 v132 = 2080;
      float64x2_t v133 = "broadband_seatbelt_initial_confidence";
      __int16 v134 = 2048;
      double v135 = v64;
      _os_log_impl(&dword_221E5E000, v62, OS_LOG_TYPE_DEFAULT, "%25s:%-5d ReadTuningParametersFromDefaults changed phase_are_process_rt60_%s to %f", (uint8_t *)&v128, 0x26u);
    }
    dword_267F77E38 = *(_DWORD *)(Instance + 1364);
    unint64_t v65 = (Phase::Logger *)Phase::SpatialModeler::TRAP::TP((Phase::SpatialModeler::TRAP *)v63);
    float64x2_t v66 = **(NSObject ***)(Phase::Logger::GetInstance(v65) + 1184);
    BOOL v67 = os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT);
    if (v67)
    {
      double v68 = *(float *)(Instance + 1368);
      int v128 = 136315906;
      float64x2_t v129 = "TRAPParameters.cpp";
      __int16 v130 = 1024;
      int v131 = 34;
      __int16 v132 = 2080;
      float64x2_t v133 = "seatbelt_reverb_time_multiplier";
      __int16 v134 = 2048;
      double v135 = v68;
      _os_log_impl(&dword_221E5E000, v66, OS_LOG_TYPE_DEFAULT, "%25s:%-5d ReadTuningParametersFromDefaults changed phase_are_process_rt60_%s to %f", (uint8_t *)&v128, 0x26u);
    }
    dword_267F77E3C = *(_DWORD *)(Instance + 1368);
    int8x16_t v69 = (Phase::Logger *)Phase::SpatialModeler::TRAP::TP((Phase::SpatialModeler::TRAP *)v67);
    uint64_t v70 = **(NSObject ***)(Phase::Logger::GetInstance(v69) + 1184);
    BOOL v71 = os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT);
    if (v71)
    {
      double v72 = *(float *)(Instance + 1372);
      int v128 = 136315906;
      float64x2_t v129 = "TRAPParameters.cpp";
      __int16 v130 = 1024;
      int v131 = 34;
      __int16 v132 = 2080;
      float64x2_t v133 = "seatbelt_confidence_exponent";
      __int16 v134 = 2048;
      double v135 = v72;
      _os_log_impl(&dword_221E5E000, v70, OS_LOG_TYPE_DEFAULT, "%25s:%-5d ReadTuningParametersFromDefaults changed phase_are_process_rt60_%s to %f", (uint8_t *)&v128, 0x26u);
    }
    LODWORD(xmmword_267F77E4std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = *(_DWORD *)(Instance + 1372);
    float v73 = (Phase::Logger *)Phase::SpatialModeler::TRAP::TP((Phase::SpatialModeler::TRAP *)v71);
    int8x16_t v74 = **(NSObject ***)(Phase::Logger::GetInstance(v73) + 1184);
    BOOL v75 = os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT);
    if (v75)
    {
      double v76 = *(float *)(Instance + 1376);
      int v128 = 136315906;
      float64x2_t v129 = "TRAPParameters.cpp";
      __int16 v130 = 1024;
      int v131 = 34;
      __int16 v132 = 2080;
      float64x2_t v133 = "seatbelt_maximum_mix";
      __int16 v134 = 2048;
      double v135 = v76;
      _os_log_impl(&dword_221E5E000, v74, OS_LOG_TYPE_DEFAULT, "%25s:%-5d ReadTuningParametersFromDefaults changed phase_are_process_rt60_%s to %f", (uint8_t *)&v128, 0x26u);
    }
    DWORD1(xmmword_267F77E4std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = *(_DWORD *)(Instance + 1376);
    double v77 = (Phase::Logger *)Phase::SpatialModeler::TRAP::TP((Phase::SpatialModeler::TRAP *)v75);
    id v78 = **(NSObject ***)(Phase::Logger::GetInstance(v77) + 1184);
    BOOL v79 = os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT);
    if (v79)
    {
      double v80 = *(float *)(Instance + 1380);
      int v128 = 136315906;
      float64x2_t v129 = "TRAPParameters.cpp";
      __int16 v130 = 1024;
      int v131 = 34;
      __int16 v132 = 2080;
      float64x2_t v133 = "lower_seatbelt_mean_free_path_limit";
      __int16 v134 = 2048;
      double v135 = v80;
      _os_log_impl(&dword_221E5E000, v78, OS_LOG_TYPE_DEFAULT, "%25s:%-5d ReadTuningParametersFromDefaults changed phase_are_process_rt60_%s to %f", (uint8_t *)&v128, 0x26u);
    }
    DWORD2(xmmword_267F77E4std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = *(_DWORD *)(Instance + 1380);
    uint64_t v81 = (Phase::Logger *)Phase::SpatialModeler::TRAP::TP((Phase::SpatialModeler::TRAP *)v79);
    int32x4_t v82 = **(NSObject ***)(Phase::Logger::GetInstance(v81) + 1184);
    BOOL v83 = os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT);
    if (v83)
    {
      double v84 = *(float *)(Instance + 1384);
      int v128 = 136315906;
      float64x2_t v129 = "TRAPParameters.cpp";
      __int16 v130 = 1024;
      int v131 = 34;
      __int16 v132 = 2080;
      float64x2_t v133 = "upper_seatbelt_mean_free_path_limit";
      __int16 v134 = 2048;
      double v135 = v84;
      _os_log_impl(&dword_221E5E000, v82, OS_LOG_TYPE_DEFAULT, "%25s:%-5d ReadTuningParametersFromDefaults changed phase_are_process_rt60_%s to %f", (uint8_t *)&v128, 0x26u);
    }
    HIDWORD(xmmword_267F77E4std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = *(_DWORD *)(Instance + 1384);
    uint32x4_t v85 = (Phase::Logger *)Phase::SpatialModeler::TRAP::TP((Phase::SpatialModeler::TRAP *)v83);
    int32x4_t v86 = **(NSObject ***)(Phase::Logger::GetInstance(v85) + 1184);
    BOOL v87 = os_log_type_enabled(v86, OS_LOG_TYPE_DEFAULT);
    if (v87)
    {
      double v88 = *(float *)(Instance + 1388);
      int v128 = 136315906;
      float64x2_t v129 = "TRAPParameters.cpp";
      __int16 v130 = 1024;
      int v131 = 34;
      __int16 v132 = 2080;
      float64x2_t v133 = "room_change_probability_min";
      __int16 v134 = 2048;
      double v135 = v88;
      _os_log_impl(&dword_221E5E000, v86, OS_LOG_TYPE_DEFAULT, "%25s:%-5d ReadTuningParametersFromDefaults changed phase_are_process_rt60_%s to %f", (uint8_t *)&v128, 0x26u);
    }
    dword_267F77E50 = *(_DWORD *)(Instance + 1388);
    float64x2_t v89 = (Phase::Logger *)Phase::SpatialModeler::TRAP::TP((Phase::SpatialModeler::TRAP *)v87);
    double v90 = **(NSObject ***)(Phase::Logger::GetInstance(v89) + 1184);
    BOOL v91 = os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT);
    if (v91)
    {
      double v92 = *(float *)(Instance + 1392);
      int v128 = 136315906;
      float64x2_t v129 = "TRAPParameters.cpp";
      __int16 v130 = 1024;
      int v131 = 34;
      __int16 v132 = 2080;
      float64x2_t v133 = "room_change_probability_max";
      __int16 v134 = 2048;
      double v135 = v92;
      _os_log_impl(&dword_221E5E000, v90, OS_LOG_TYPE_DEFAULT, "%25s:%-5d ReadTuningParametersFromDefaults changed phase_are_process_rt60_%s to %f", (uint8_t *)&v128, 0x26u);
    }
    dword_267F77E54 = *(_DWORD *)(Instance + 1392);
    int8x16_t v93 = (Phase::Logger *)Phase::SpatialModeler::TRAP::TP((Phase::SpatialModeler::TRAP *)v91);
    int8x16_t v94 = **(NSObject ***)(Phase::Logger::GetInstance(v93) + 1184);
    BOOL v95 = os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT);
    if (v95)
    {
      double v96 = *(float *)(Instance + 1396);
      int v128 = 136315906;
      float64x2_t v129 = "TRAPParameters.cpp";
      __int16 v130 = 1024;
      int v131 = 34;
      __int16 v132 = 2080;
      float64x2_t v133 = "room_change_confidence_exponent";
      __int16 v134 = 2048;
      double v135 = v96;
      _os_log_impl(&dword_221E5E000, v94, OS_LOG_TYPE_DEFAULT, "%25s:%-5d ReadTuningParametersFromDefaults changed phase_are_process_rt60_%s to %f", (uint8_t *)&v128, 0x26u);
    }
    dword_267F77E58 = *(_DWORD *)(Instance + 1396);
    float64x2_t v97 = (Phase::Logger *)Phase::SpatialModeler::TRAP::TP((Phase::SpatialModeler::TRAP *)v95);
    uint64_t v98 = **(NSObject ***)(Phase::Logger::GetInstance(v97) + 1184);
    BOOL v99 = os_log_type_enabled(v98, OS_LOG_TYPE_DEFAULT);
    if (v99)
    {
      double v100 = *(float *)(Instance + 1400);
      int v128 = 136315906;
      float64x2_t v129 = "TRAPParameters.cpp";
      __int16 v130 = 1024;
      int v131 = 34;
      __int16 v132 = 2080;
      float64x2_t v133 = "room_change_acoustic_confidence_exponent";
      __int16 v134 = 2048;
      double v135 = v100;
      _os_log_impl(&dword_221E5E000, v98, OS_LOG_TYPE_DEFAULT, "%25s:%-5d ReadTuningParametersFromDefaults changed phase_are_process_rt60_%s to %f", (uint8_t *)&v128, 0x26u);
    }
    dword_267F77E5C = *(_DWORD *)(Instance + 1400);
    int32x4_t v101 = (Phase::Logger *)Phase::SpatialModeler::TRAP::TP((Phase::SpatialModeler::TRAP *)v99);
    unsigned __int8 v102 = **(NSObject ***)(Phase::Logger::GetInstance(v101) + 1184);
    BOOL v103 = os_log_type_enabled(v102, OS_LOG_TYPE_DEFAULT);
    if (v103)
    {
      double v104 = *(float *)(Instance + 1404);
      int v128 = 136315906;
      float64x2_t v129 = "TRAPParameters.cpp";
      __int16 v130 = 1024;
      int v131 = 34;
      __int16 v132 = 2080;
      float64x2_t v133 = "room_change_rate_confidence_exponent";
      __int16 v134 = 2048;
      double v135 = v104;
      _os_log_impl(&dword_221E5E000, v102, OS_LOG_TYPE_DEFAULT, "%25s:%-5d ReadTuningParametersFromDefaults changed phase_are_process_rt60_%s to %f", (uint8_t *)&v128, 0x26u);
    }
    LODWORD(qword_267F77E6std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = *(_DWORD *)(Instance + 1404);
    float64x2_t v105 = (Phase::Logger *)Phase::SpatialModeler::TRAP::TP((Phase::SpatialModeler::TRAP *)v103);
    int32x4_t v106 = **(NSObject ***)(Phase::Logger::GetInstance(v105) + 1184);
    BOOL v107 = os_log_type_enabled(v106, OS_LOG_TYPE_DEFAULT);
    if (v107)
    {
      double v108 = *(float *)(Instance + 1408);
      int v128 = 136315906;
      float64x2_t v129 = "TRAPParameters.cpp";
      __int16 v130 = 1024;
      int v131 = 34;
      __int16 v132 = 2080;
      float64x2_t v133 = "room_change_rate_confidence_max";
      __int16 v134 = 2048;
      double v135 = v108;
      _os_log_impl(&dword_221E5E000, v106, OS_LOG_TYPE_DEFAULT, "%25s:%-5d ReadTuningParametersFromDefaults changed phase_are_process_rt60_%s to %f", (uint8_t *)&v128, 0x26u);
    }
    HIDWORD(qword_267F77E6std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = *(_DWORD *)(Instance + 1408);
    unint64_t v109 = (Phase::Logger *)Phase::SpatialModeler::TRAP::TP((Phase::SpatialModeler::TRAP *)v107);
    int32x4_t v110 = **(NSObject ***)(Phase::Logger::GetInstance(v109) + 1184);
    BOOL v111 = os_log_type_enabled(v110, OS_LOG_TYPE_DEFAULT);
    if (v111)
    {
      double v112 = *(float *)(Instance + 1412);
      int v128 = 136315906;
      float64x2_t v129 = "TRAPParameters.cpp";
      __int16 v130 = 1024;
      int v131 = 34;
      __int16 v132 = 2080;
      float64x2_t v133 = "minimum_seatbelt_initial_confidence";
      __int16 v134 = 2048;
      double v135 = v112;
      _os_log_impl(&dword_221E5E000, v110, OS_LOG_TYPE_DEFAULT, "%25s:%-5d ReadTuningParametersFromDefaults changed phase_are_process_rt60_%s to %f", (uint8_t *)&v128, 0x26u);
    }
    dword_267F77E68 = *(_DWORD *)(Instance + 1412);
    int64x2_t v113 = (Phase::Logger *)Phase::SpatialModeler::TRAP::TP((Phase::SpatialModeler::TRAP *)v111);
    if (*(unsigned char *)(Instance + 1416))
    {
      float64x2_t v114 = **(NSObject ***)(Phase::Logger::GetInstance(v113) + 1184);
      int64x2_t v113 = (Phase::Logger *)os_log_type_enabled(v114, OS_LOG_TYPE_DEFAULT);
      if (v113)
      {
        *(double *)&id v115 = COERCE_DOUBLE("true");
        int v116 = *(unsigned __int8 *)(Instance + 1416);
        float64x2_t v129 = "TRAPParameters.cpp";
        int v128 = 136315906;
        if (!v116) {
          *(double *)&id v115 = COERCE_DOUBLE("false");
        }
        __int16 v130 = 1024;
        int v131 = 42;
        __int16 v132 = 2080;
        float64x2_t v133 = "enable_soft_limiting";
        __int16 v134 = 2080;
        double v135 = *(double *)&v115;
        _os_log_impl(&dword_221E5E000, v114, OS_LOG_TYPE_DEFAULT, "%25s:%-5d ReadTuningParametersFromDefaults changed phase_are_process_rt60_%s to %s", (uint8_t *)&v128, 0x26u);
      }
      byte_267F77E6C = *(unsigned char *)(Instance + 1416);
    }
    float v117 = (Phase::Logger *)Phase::SpatialModeler::TRAP::TP(v113);
    int32x4_t v118 = **(NSObject ***)(Phase::Logger::GetInstance(v117) + 1184);
    BOOL v119 = os_log_type_enabled(v118, OS_LOG_TYPE_DEFAULT);
    if (v119)
    {
      double v120 = *(float *)(Instance + 1420);
      int v128 = 136315906;
      float64x2_t v129 = "TRAPParameters.cpp";
      __int16 v130 = 1024;
      int v131 = 34;
      __int16 v132 = 2080;
      float64x2_t v133 = "maximum_log_rate_in_hz";
      __int16 v134 = 2048;
      double v135 = v120;
      _os_log_impl(&dword_221E5E000, v118, OS_LOG_TYPE_DEFAULT, "%25s:%-5d ReadTuningParametersFromDefaults changed phase_are_process_rt60_%s to %f", (uint8_t *)&v128, 0x26u);
    }
    dword_267F77E70 = *(_DWORD *)(Instance + 1420);
    int8x16_t v121 = (Phase::Logger *)Phase::SpatialModeler::TRAP::TP((Phase::SpatialModeler::TRAP *)v119);
    if (*(void *)(Instance + 1424))
    {
      uint32x4_t v122 = **(NSObject ***)(Phase::Logger::GetInstance(v121) + 1184);
      int8x16_t v121 = (Phase::Logger *)os_log_type_enabled(v122, OS_LOG_TYPE_DEFAULT);
      if (v121)
      {
        double v123 = *(double *)(Instance + 1424);
        int v128 = 136315906;
        float64x2_t v129 = "TRAPParameters.cpp";
        __int16 v130 = 1024;
        int v131 = 64;
        __int16 v132 = 2080;
        float64x2_t v133 = "simulation_in_file_pathname";
        __int16 v134 = 2080;
        double v135 = v123;
        _os_log_impl(&dword_221E5E000, v122, OS_LOG_TYPE_DEFAULT, "%25s:%-5d ReadTuningParametersFromDefaults changed phase_are_process_rt60_%s to %s", (uint8_t *)&v128, 0x26u);
      }
      *(void *)&xmmword_267F77E78 = *(void *)(Instance + 1424);
    }
    float64x2_t v124 = (Phase::Logger *)Phase::SpatialModeler::TRAP::TP(v121);
    if (*(void *)(Instance + 1432))
    {
      uint64_t v125 = **(NSObject ***)(Phase::Logger::GetInstance(v124) + 1184);
      if (os_log_type_enabled(v125, OS_LOG_TYPE_DEFAULT))
      {
        double v126 = *(double *)(Instance + 1432);
        int v128 = 136315906;
        float64x2_t v129 = "TRAPParameters.cpp";
        __int16 v130 = 1024;
        int v131 = 64;
        __int16 v132 = 2080;
        float64x2_t v133 = "simulation_out_file_pathname";
        __int16 v134 = 2080;
        double v135 = v126;
        _os_log_impl(&dword_221E5E000, v125, OS_LOG_TYPE_DEFAULT, "%25s:%-5d ReadTuningParametersFromDefaults changed phase_are_process_rt60_%s to %s", (uint8_t *)&v128, 0x26u);
      }
      *((void *)&xmmword_267F77E78 + 1) = *(void *)(Instance + 1432);
    }
  }
  return &byte_267F77C70;
}

void sub_222091240(_Unwind_Exception *a1)
{
}

double Phase::SpatialModeler::TRAP::TuningParameters::TuningParameters(Phase::SpatialModeler::TRAP::TuningParameters *this)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  byte_267F77C70 = 0;
  long long v2 = xmmword_2220E8770;
  long long v3 = unk_2220E8780;
  uint64_t v4 = 0;
  Phase::Subbands<float>::Subbands((uint64_t)&unk_267F77C80, &v2, 10);
  long long v2 = xmmword_2220E8798;
  long long v3 = unk_2220E87A8;
  uint64_t v4 = 0x3E99999A3E99999ALL;
  Phase::Subbands<float>::Subbands((uint64_t)&unk_267F77D00, &v2, 10);
  long long v2 = xmmword_2220E87C0;
  long long v3 = unk_2220E87D0;
  uint64_t v4 = 0x3F8000003F800000;
  Phase::Subbands<float>::Subbands((uint64_t)&unk_267F77D80, &v2, 10);
  xmmword_267F77E00 = xmmword_2220E8710;
  *(_OWORD *)&dword_267F77E10 = xmmword_2220E8720;
  xmmword_267F77E20 = xmmword_2220E8730;
  *(_OWORD *)&dword_267F77E30 = xmmword_2220E8740;
  xmmword_267F77E40 = xmmword_2220E8750;
  *(_OWORD *)&dword_267F77E50 = xmmword_2220E8760;
  qword_267F77E60 = 0x40C000003F800000;
  dword_267F77E68 = 1050253722;
  byte_267F77E6C = 1;
  dword_267F77E70 = 1056964608;
  double result = 0.0;
  xmmword_267F77E78 = 0u;
  return result;
}

const void **Phase::SpatialModeler::TRAP::TP(void)::$_0::operator()<std::vector<float>,std::array<float,31ul>>(const void **result, void *a2, uint64_t a3)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (*result != result[1])
  {
    uint64_t v5 = result;
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v14);
    float v6 = (Phase::Logger *)std::ostream::operator<<();
    if ((unint64_t)((unsigned char *)v5[1] - (unsigned char *)*v5) >= 5)
    {
      unint64_t v7 = 1;
      do
      {
        buf[0] = 44;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)buf, 1);
        float v6 = (Phase::Logger *)std::ostream::operator<<();
        ++v7;
      }
      while (v7 < ((unsigned char *)v5[1] - (unsigned char *)*v5) >> 2);
    }
    BOOL v8 = **(NSObject ***)(Phase::Logger::GetInstance(v6) + 1184);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      std::stringbuf::str();
      double v9 = v13 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)int buf = 136315906;
      float v19 = "TRAPParameters.cpp";
      __int16 v20 = 1024;
      int v21 = 56;
      __int16 v22 = 2080;
      uint64_t v23 = a3;
      __int16 v24 = 2080;
      float v25 = v9;
      _os_log_impl(&dword_221E5E000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d ReadTuningParametersFromDefaults changed phase_are_process_rt60_%s to %s", buf, 0x26u);
      if (v13 < 0) {
        operator delete(__p);
      }
    }
    int8x16_t v10 = v5[1];
    if (v10 != *v5) {
      memmove(a2, *v5, v10 - (unsigned char *)*v5);
    }
    v14[0] = *MEMORY[0x263F8C2B8];
    uint64_t v11 = *(void *)(MEMORY[0x263F8C2B8] + 72);
    *(void *)((char *)v14 + *(void *)(v14[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
    v15[0] = v11;
    v15[1] = MEMORY[0x263F8C318] + 16;
    if (v16 < 0) {
      operator delete((void *)v15[9]);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    return (const void **)MEMORY[0x223C937D0](&v17);
  }
  return result;
}

void sub_222091660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

Phase::DspLayer::UPConvolver *Phase::DspLayer::UPConvolver::UPConvolver(Phase::DspLayer::UPConvolver *this, int a2, int a3, int a4)
{
  *(void *)this = &unk_26D47B4F8;
  *((_DWORD *)this + 2) = a2;
  *((_DWORD *)this + objc_destroyWeak(this + 3) = a4;
  int v6 = 2 * a2;
  if (a3 % a2 <= 0) {
    int v7 = 0;
  }
  else {
    int v7 = a2;
  }
  int v8 = v7 + a3 / a2 * a2;
  *((_DWORD *)this + 4) = v6;
  *((_DWORD *)this + std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear(this + 5) = v8;
  int v9 = v8 / a2;
  int v10 = v6 + 8;
  *((_DWORD *)this + 6) = v9;
  *((_DWORD *)this + 7) = v10;
  int v11 = v9 * v10;
  *((_DWORD *)this + 8) = a2 + 4;
  *((_DWORD *)this + 9) = v11;
  *((_DWORD *)this + 1std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = 0;
  *((void *)this + 6) = malloc_type_malloc(4 * v11 * a4, 0x100004052888210uLL);
  *((_DWORD *)this + 2std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = 0;
  *((void *)this + std::__function::__value_func<void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::~__value_func[abi:ne180100](this + 11) = Phase::DspLayer::IConvolver::GetFftFwd(this, *((_DWORD *)this + 4));
  *((void *)this + 12) = Phase::DspLayer::IConvolver::GetFftInv(this, *((_DWORD *)this + 4));
  *((void *)this + 7) = malloc_type_malloc(4 * *((int *)this + 9), 0x100004052888210uLL);
  *((void *)this + 8) = malloc_type_malloc(4 * *((int *)this + 2), 0x100004052888210uLL);
  int v12 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 18) = a2;
  *((_DWORD *)this + std::__function::__value_func<void ()(Phase::SpatialModeler::PriorityQueueEntry &)>::~__value_func[abi:ne180100](this + 19) = v12;
  (*(void (**)(Phase::DspLayer::UPConvolver *))(*(void *)this + 32))(this);
  return this;
}

void Phase::DspLayer::UPConvolver::~UPConvolver(void **this)
{
  *this = &unk_26D47B4F8;
  free(this[6]);
  free(this[7]);
  free(this[8]);
}

{
  uint64_t vars8;

  Phase::DspLayer::UPConvolver::~UPConvolver(this);

  JUMPOUT(0x223C938A0);
}

void Phase::DspLayer::UPConvolver::Reset(Phase::DspLayer::UPConvolver *this)
{
  *((_DWORD *)this + 1std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = 0;
  *((_DWORD *)this + 2std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = 0;
  vDSP_vclr(*((float **)this + 6), 1, *((int *)this + 9) * (uint64_t)*((int *)this + 3));
  vDSP_vclr(*((float **)this + 7), 1, *((int *)this + 9));
  long long v2 = (float *)*((void *)this + 8);
  vDSP_Length v3 = *((int *)this + 2);

  vDSP_vclr(v2, 1, v3);
}

uint64_t Phase::DspLayer::UPConvolver::SetFilter(Phase::DspLayer::UPConvolver *this, int a2, float *a3, int a4)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  if (a2 < 0 || *((_DWORD *)this + 3) <= a2) {
    return 2;
  }
  if (a4 < 1 || (*(int (**)(Phase::DspLayer::UPConvolver *))(*(void *)this + 48))(this) < a4) {
    return 1;
  }
  int v9 = *((_DWORD *)this + 2);
  unsigned int v10 = a4 / v9;
  if (a4 % v9) {
    uint64_t v11 = v10 + 1;
  }
  else {
    uint64_t v11 = v10;
  }
  *((_DWORD *)this + 1std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = v11 * *((_DWORD *)this + 7);
  uint64_t v12 = *((void *)this + 6);
  vDSP_Length v13 = *((int *)this + 9);
  uint64_t v27 = (v13 * a2);
  uint64_t v28 = v12;
  uint64_t v14 = (float *)(v12 + 4 * (int)v27);
  vDSP_vclr(v14, 1, v13);
  int v16 = *((_DWORD *)this + 2);
  if (v16 <= a4)
  {
    LODWORD(v18) = 0;
    int v17 = 0;
    do
    {
      float __C = 0.0;
      vDSP_Length __I = 0;
      vDSP_maxvi(&a3[v17], 1, &__C, &__I, v16);
      if (__C > 0.000015849)
      {
        Phase::DspLayer::UPConvolver::fftFwd(this, (DSPComplex *)&a3[v17], &v14[(int)v18]);
        v14[(int)v18 - 1 + *((int *)this + 8)] = 1.1755e-38;
      }
      int v16 = *((_DWORD *)this + 2);
      v17 += v16;
      uint64_t v18 = *((int *)this + 7) + (uint64_t)(int)v18;
    }
    while (v17 <= a4 - v16);
  }
  else
  {
    int v17 = 0;
    uint64_t v18 = 0;
  }
  if (a4 > v17)
  {
    if (v16 > 4096) {
      operator new[]();
    }
    vDSP_Length v19 = v16;
    MEMORY[0x270FA5388](v15);
    int v21 = (DSPComplex *)((char *)&v26 - v20);
    bzero((char *)&v26 - v20, v22);
    vDSP_vclr((float *)v21, 1, v19);
    memcpy(v21, &a3[v17], 4 * (a4 - v17));
    float __C = 0.0;
    vDSP_Length __I = 0;
    vDSP_maxvi((const float *)v21, 1, &__C, &__I, *((int *)this + 2));
    if (__C > 0.000015849)
    {
      Phase::DspLayer::UPConvolver::fftFwd(this, v21, &v14[v18]);
      v14[v18 - 1 + *((int *)this + 8)] = 1.1755e-38;
    }
  }
  if ((int)v11 >= 1)
  {
    uint64_t v23 = *((int *)this + 7);
    unint64_t v24 = v11 + 1;
    float v25 = (float *)(4 * (v11 - 1) * v23 + 4 * *((int *)this + 8) + 4 * (int)v27 + v28 - 4);
    while (*v25 != 1.1755e-38)
    {
      uint64_t result = 0;
      *((_DWORD *)this + 10) -= v23;
      --v24;
      v25 -= v23;
      if (v24 <= 1) {
        return result;
      }
    }
  }
  return 0;
}

void sub_222091BFC(_Unwind_Exception *exception_object)
{
  if (v1) {
    MEMORY[0x223C93870](v1, 0x1000C8052888210);
  }
  _Unwind_Resume(exception_object);
}

void Phase::DspLayer::UPConvolver::fftFwd(Phase::DspLayer::UPConvolver *this, DSPComplex *__C, float *a3)
{
  int v5 = *((_DWORD *)this + 2) + (*((int *)this + 2) < 0);
  int v6 = *((_DWORD *)this + 2) / 2;
  int v7 = &a3[*((int *)this + 8)];
  v14.realp = a3;
  v14.imagp = v7;
  vDSP_ctoz(__C, 2, &v14, 1, (uint64_t)v5 >> 1);
  int v8 = *((_DWORD *)this + 7);
  int v9 = *((_DWORD *)this + 2);
  BOOL v10 = __OFSUB__(v8, v9);
  int v11 = v8 - v9;
  if (v11 < 0 != v10) {
    ++v11;
  }
  vDSP_Length v12 = (uint64_t)v11 >> 1;
  vDSP_vclr(&v14.realp[v6], 1, v12);
  vDSP_vclr(&v14.imagp[v6], 1, v12);
  vDSP_Length v13 = &a3[*((int *)this + 8)];
  vDSP_DFT_Execute(*((const vDSP_DFT_SetupStruct **)this + 11), a3, v13, a3, v13);
  a3[*((_DWORD *)this + 4) / 2] = *v13;
  float *v13 = 0.0;
}

void Phase::DspLayer::UPConvolver::Process(Phase::DspLayer::UPConvolver *this, const DSPComplex *a2, float **a3)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t v7 = *((void *)this + 7);
  int v6 = (DSPComplex *)*((void *)this + 8);
  int v8 = (float *)(v7 + 4 * *((int *)this + 20));
  int v9 = *((_DWORD *)this + 2) + (*((int *)this + 2) < 0);
  int v10 = *((_DWORD *)this + 2) / 2;
  int v11 = &v8[*((int *)this + 8)];
  __Z.realp = v8;
  __Z.imagp = v11;
  vDSP_Length v12 = (uint64_t)v9 >> 1;
  vDSP_ctoz(v6, 2, &__Z, 1, v12);
  __Z.realp += v10;
  __Z.imagp += v10;
  vDSP_ctoz(a2, 2, &__Z, 1, v12);
  vDSP_Length v13 = &v8[*((int *)this + 8)];
  __Z.realp = v8;
  __Z.imagp = v13;
  vDSP_DFT_Execute(*((const vDSP_DFT_SetupStruct **)this + 11), v8, v13, v8, v13);
  imagp = __Z.imagp;
  __Z.realp[*((_DWORD *)this + 4) / 2] = *__Z.imagp;
  float *imagp = 0.0;
  uint64_t v15 = memcpy(v6, a2, 4 * *((int *)this + 2));
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (DSPComplex *)((char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (*((int *)this + 3) >= 1)
  {
    bzero((char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), v16);
    uint64_t v19 = 0;
    do
    {
      vDSP_Length v20 = *((int *)this + 8);
      int v21 = (float *)(*((void *)this + 6) + 4 * *((_DWORD *)this + 9) * (int)v19);
      uint64_t v22 = *((int *)this + 20);
      __Z.realp = (float *)v18;
      __Z.imagp = (float *)v18 + v20;
      __A.realp = v21;
      __A.imagp = &v21[v20];
      __B.realp = (float *)(v7 + 4 * v22);
      __B.imagp = &__B.realp[v20];
      if (*(__A.imagp - 1) == 1.1755e-38) {
        vDSP_zvmul(&__A, 1, &__B, 1, &__Z, 1, v20, 1);
      }
      else {
        vDSP_vclr((float *)v18, 1, *((int *)this + 7));
      }
      int v23 = *((_DWORD *)this + 7);
      int v24 = v22 - v23;
      if ((int)v22 - v23 < 0)
      {
        int v25 = *((_DWORD *)this + 7);
      }
      else
      {
        int v25 = *((_DWORD *)this + 7);
        do
        {
          if (v25 >= *((_DWORD *)this + 10)) {
            break;
          }
          vDSP_Length v26 = *((int *)this + 8);
          __A.realp = &v21[v25];
          __A.imagp = &__A.realp[v26];
          __B.realp = (float *)(v7 + 4 * v24);
          __B.imagp = &__B.realp[v26];
          if (*(__A.imagp - 1) == 1.1755e-38)
          {
            vDSP_zvma(&__A, 1, &__B, 1, &__Z, 1, &__Z, 1, v26);
            int v23 = *((_DWORD *)this + 7);
          }
          v25 += v23;
          v24 -= v23;
        }
        while (v24 >= 0);
      }
      int v27 = *((_DWORD *)this + 10);
      if (v25 < v27)
      {
        int v28 = *((_DWORD *)this + 9) + v24;
        do
        {
          vDSP_Length v29 = *((int *)this + 8);
          __A.realp = &v21[v25];
          __A.imagp = &__A.realp[v29];
          __B.realp = (float *)(v7 + 4 * v28);
          __B.imagp = &__B.realp[v29];
          if (*(__A.imagp - 1) == 1.1755e-38)
          {
            vDSP_zvma(&__A, 1, &__B, 1, &__Z, 1, &__Z, 1, v29);
            int v23 = *((_DWORD *)this + 7);
            int v27 = *((_DWORD *)this + 10);
          }
          v25 += v23;
          v28 -= v23;
        }
        while (v25 < v27);
      }
      Phase::DspLayer::UPConvolver::fftInv((const vDSP_DFT_SetupStruct **)this, (const float *)v18, v18);
      vDSP_Length v30 = *((int *)this + 2);
      *(float *)&__A.realp = 0.125 / (float)(int)v30;
      vDSP_vsmul((const float *)v18 + v30, 1, (const float *)&__A, a3[v19++], 1, v30);
    }
    while (v19 < *((int *)this + 3));
    int v17 = *((_DWORD *)this + 7);
  }
  *((_DWORD *)this + 2std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = (*((_DWORD *)this + 20) + v17) % *((_DWORD *)this + 9);
}

void Phase::DspLayer::UPConvolver::fftInv(const vDSP_DFT_SetupStruct **this, const float *a2, DSPComplex *a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v6 = *((int *)this + 8);
  uint64_t v7 = (float *)&a2[v6];
  MEMORY[0x270FA5388](this);
  int v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v9, v8);
  int v10 = (float *)&v9[4 * v6];
  float *v7 = a2[*((_DWORD *)this + 4) / 2];
  vDSP_DFT_Execute(this[12], a2, v7, (float *)v9, v10);
  __Z.realp = (float *)v9;
  __Z.imagp = v10;
  vDSP_ztoc(&__Z, 1, a3, 2, (uint64_t)(*((_DWORD *)this + 4) + (*((int *)this + 4) < 0)) >> 1);
}

uint64_t Phase::DspLayer::UPConvolver::GetFilterState(Phase::DspLayer::UPConvolver *this)
{
  return (uint64_t)this + 56;
}

uint64_t Phase::DspLayer::UPConvolver::GetBlockSize(Phase::DspLayer::UPConvolver *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t Phase::DspLayer::UPConvolver::GetFilterLength(Phase::DspLayer::UPConvolver *this)
{
  return (*((_DWORD *)this + 2) * (*((_DWORD *)this + 10) / *((_DWORD *)this + 7)));
}

uint64_t Phase::DspLayer::UPConvolver::GetMaxFilterLength(Phase::DspLayer::UPConvolver *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t Phase::DspLayer::UPConvolver::GetNumOutputChannels(Phase::DspLayer::UPConvolver *this)
{
  return *((unsigned int *)this + 3);
}

uint64_t Phase::DspLayer::UPConvolver::GetNumPartitions(Phase::DspLayer::UPConvolver *this)
{
  return 1;
}

uint64_t Phase::DspLayer::UPConvolver::CopyStates(Phase::DspLayer::UPConvolver *this, Phase::DspLayer::IConvolver *a2)
{
  int v4 = (*(uint64_t (**)(Phase::DspLayer::IConvolver *))(*(void *)a2 + 72))(a2);
  if ((*(unsigned int (**)(Phase::DspLayer::UPConvolver *))(*(void *)this + 72))(this) != v4) {
    return 0;
  }
  uint64_t v5 = (*(uint64_t (**)(Phase::DspLayer::IConvolver *))(*(void *)a2 + 88))(a2);

  return Phase::DspLayer::IConvolver::FilterState::Copy((uint64_t)this + 56, v5);
}

void *Phase::Controller::VbapSpatializer::VbapSpatializer(void *a1, long long *a2, uint64_t a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "VBAP");
  Phase::Controller::Spatializer::Spatializer((uint64_t)a1, a2, a3, (long long *)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  *a1 = &unk_26D47B578;
  return a1;
}

void sub_222092344(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Phase::Controller::VbapSpatializer::~VbapSpatializer(void **this)
{
  Phase::Controller::Spatializer::~Spatializer(this);

  JUMPOUT(0x223C938A0);
}

void Phase::Controller::VbapSpatializer::Initialize(Phase::Controller::VbapSpatializer *this)
{
  long long v2 = operator new(0x70uLL);
  v2[1] = 0;
  v2[2] = 0;
  *long long v2 = &unk_26D47B630;
  Phase::Controller::VbapEncoder::VbapEncoder((Phase::Controller::VbapEncoder *)(v2 + 3), this);
}

void sub_222092438(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void Phase::Controller::VbapSpatializer::OutputChannelLayoutChanged(uint64_t a1, char **a2)
{
  __p[6] = *(void **)MEMORY[0x263EF8340];
  vDSP_Length v3 = *(const void **)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = (char **)(a1 + 24);
  memset(__p, 0, 24);
  std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(__p, v3, v4, v4 - (void)v3);
  if (v5 != a2) {
    std::vector<char>::__assign_with_size[abi:ne180100]<char *,char *>(v5, *a2, a2[1], a2[1] - *a2);
  }
  operator new();
}

void sub_2220925A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_222092620()
{
}

void sub_2220926F8()
{
}

void sub_22209270C(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x222092618);
}

void Phase::Controller::VbapEncoder::VbapEncoder(Phase::Controller::VbapEncoder *this, const Phase::Controller::VbapSpatializer *a2)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  *((_WORD *)this + 4) = 1;
  *((void *)this + 2) = a2;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(void *)this = &unk_26D47B5B0;
  *(_OWORD *)((char *)this + 4std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_DWORD *)this + 18) = -1;
  *((void *)this + 1std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = 0;
  uint64_t v5 = (_DWORD *)*((void *)a2 + 3);
  vDSP_Length v3 = (void *)((char *)a2 + 24);
  uint64_t v4 = v5;
  int v6 = *v5;
  if (*v5 == 0x10000)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v4[1]);
    v8.i16[0] = vaddlv_u8(v8);
    __int32 v7 = v8.i32[0];
  }
  else if (v6)
  {
    __int32 v7 = (unsigned __int16)v6;
  }
  else
  {
    __int32 v7 = v4[2];
  }
  *((_DWORD *)this + 18) = v7;
  Phase::ChannelLayout::GetChannelLayoutChannelDescriptions(v3, (uint64_t *)&v39);
  std::string __p = 0;
  float v37 = 0;
  float v38 = 0;
  float v33 = 0;
  float v34 = 0;
  uint64_t v35 = 0;
  int v10 = (float *)v39;
  uint64_t v11 = v40;
  if (v39 != v40)
  {
    do
    {
      if (*(_DWORD *)v10 == 4 || *(_DWORD *)v10 == 37)
      {
        --*((_DWORD *)this + 18);
      }
      else
      {
        float v12 = (float)(v10[2] - (float)(floorf(v10[2] / 360.0) * 360.0)) + 0.0;
        if (v12 >= 360.0) {
          float v12 = nextafterf(360.0, 0.0);
        }
        uint64_t v13 = v37;
        if (v37 >= v38)
        {
          int v9 = (float *)__p;
          uint64_t v15 = ((char *)v37 - (unsigned char *)__p) >> 2;
          unint64_t v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 62) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v17 = (char *)v38 - (unsigned char *)__p;
          if (((char *)v38 - (unsigned char *)__p) >> 1 > v16) {
            unint64_t v16 = v17 >> 1;
          }
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v18 = v16;
          }
          if (v18)
          {
            uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v38, v18);
            int v9 = (float *)__p;
            uint64_t v13 = v37;
          }
          else
          {
            uint64_t v19 = 0;
          }
          vDSP_Length v20 = (float *)&v19[4 * v15];
          float *v20 = v12;
          DSPSplitComplex v14 = v20 + 1;
          while (v13 != v9)
          {
            int v21 = *((_DWORD *)v13-- - 1);
            *((_DWORD *)v20-- - 1) = v21;
          }
          std::string __p = v20;
          float v37 = v14;
          float v38 = (float *)&v19[4 * v18];
          if (v9) {
            operator delete(v9);
          }
        }
        else
        {
          float *v37 = v12;
          DSPSplitComplex v14 = v13 + 1;
        }
        float v37 = v14;
        uint64_t v22 = v34;
        if (v34 >= v35)
        {
          int v9 = v33;
          uint64_t v24 = (v34 - (char *)v33) >> 2;
          unint64_t v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 62) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v26 = v35 - (char *)v33;
          if ((v35 - (char *)v33) >> 1 > v25) {
            unint64_t v25 = v26 >> 1;
          }
          if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v27 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v27 = v25;
          }
          if (v27)
          {
            int v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v35, v27);
            int v9 = v33;
            uint64_t v22 = v34;
          }
          else
          {
            int v28 = 0;
          }
          vDSP_Length v29 = &v28[4 * v24];
          *(float *)vDSP_Length v29 = v10[3];
          int v23 = v29 + 4;
          while (v22 != (char *)v9)
          {
            int v30 = *((_DWORD *)v22 - 1);
            v22 -= 4;
            *((_DWORD *)v29 - 1) = v30;
            v29 -= 4;
          }
          float v33 = (float *)v29;
          uint64_t v35 = &v28[4 * v27];
          if (v9) {
            operator delete(v9);
          }
        }
        else
        {
          *(float *)float v34 = v10[3];
          int v23 = v34 + 4;
        }
        float v34 = v23;
        if (*((float *)v23 - 1) != fminf(fmaxf(*((float *)v23 - 1), -90.0), 90.0))
        {
          uint64_t v31 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)v9) + 576);
          if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)int buf = 136315394;
            *(void *)float32x4_t v42 = "VbapSpatializer.mm";
            *(_WORD *)&v42[8] = 1024;
            *(_DWORD *)&v42[10] = 58;
            _os_log_impl(&dword_221E5E000, v31, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [elevations.back() != Clamp(elevations.back(), -90.f, 90.f) is true]: \"VBAP encoder init: Invalid elevation angle in channel description!\"", buf, 0x12u);
          }
          exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "VBAP encoder init: Invalid elevation angle in channel description!");
          exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
        }
      }
      v10 += 5;
    }
    while (v10 != v11);
  }
  *(_DWORD *)int buf = 1;
  *(_OWORD *)&v42[4] = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  operator new();
}

void sub_222092BB8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, Phase::Controller::SpatializerFilterHandle *a10, AudioDSP::Core::VBAP **a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,long long buf)
{
  MEMORY[0x223C938A0](v23, 0x20C4093837F09);
  AudioDSP::Core::VBAP::InitParameters::~InitParameters((AudioDSP::Core::VBAP::InitParameters *)&buf);
  if (a2 == 1)
  {
    uint64_t v26 = (Phase::Logger *)__cxa_begin_catch(a1);
    unint64_t v27 = **(id **)(Phase::Logger::GetInstance(v26) + 576);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 136315394;
      *(void *)((char *)&buf + 4) = "VbapSpatializer.mm";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 75;
      _os_log_impl(&dword_221E5E000, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument): \"VBAP encoder init: invalid output channel layout!\"", (uint8_t *)&buf, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "VBAP encoder init: invalid output channel layout!");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  if (a19) {
    operator delete(a19);
  }
  std::unique_ptr<AudioDSP::Core::VBAP>::reset[abi:ne180100](a11, 0);
  Phase::Controller::SpatializerFilterHandle::~SpatializerFilterHandle(a10);
  _Unwind_Resume(a1);
}

void sub_222092CC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, Phase::Controller::SpatializerFilterHandle *a10, AudioDSP::Core::VBAP **a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19)
{
  if (a13) {
    operator delete(a13);
  }
  if (a16) {
    operator delete(a16);
  }
  if (a19) {
    operator delete(a19);
  }
  std::unique_ptr<AudioDSP::Core::VBAP>::reset[abi:ne180100](a11, 0);
  Phase::Controller::SpatializerFilterHandle::~SpatializerFilterHandle(a10);
  _Unwind_Resume(a1);
}

void sub_222092CE0(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x222092D60);
}

void sub_222092CF0()
{
}

void sub_222092CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, Phase::Controller::SpatializerFilterHandle *a10, AudioDSP::Core::VBAP **a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19)
{
  __cxa_free_exception(v19);
  if (a13) {
    operator delete(a13);
  }
  if (a16) {
    operator delete(a16);
  }
  if (a19) {
    operator delete(a19);
  }
  std::unique_ptr<AudioDSP::Core::VBAP>::reset[abi:ne180100](a11, 0);
  Phase::Controller::SpatializerFilterHandle::~SpatializerFilterHandle(a10);
  _Unwind_Resume(a1);
}

void sub_222092D08()
{
}

void AudioDSP::Core::VBAP::InitParameters::~InitParameters(AudioDSP::Core::VBAP::InitParameters *this)
{
  vDSP_Length v3 = (void **)((char *)this + 32);
  std::vector<std::list<int>>::__destroy_vector::operator()[abi:ne180100](&v3);
  long long v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
}

void Phase::Controller::VbapEncoder::~VbapEncoder(AudioDSP::Core::VBAP **this)
{
  Phase::Controller::VbapEncoder::~VbapEncoder(this);

  JUMPOUT(0x223C938A0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;

  *this = (AudioDSP::Core::VBAP *)&unk_26D47B5B0;
  std::unique_ptr<AudioDSP::Core::VBAP>::reset[abi:ne180100](this + 10, 0);
  long long v2 = (std::__shared_weak_count *)this[8];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  vDSP_Length v3 = (std::__shared_weak_count *)this[6];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)this[4];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void Phase::Controller::VbapEncoder::Initialize(Phase::Controller::VbapEncoder *this)
{
  long long v2 = (const Phase::Controller::Spatializer *)*((void *)this + 2);
  long long v12 = 0u;
  long long v13 = 0u;
  long long v11 = 0u;
  int v3 = (*(uint64_t (**)(Phase::Controller::VbapEncoder *, long long *))(*(void *)this + 56))(this, &v11);
  uint64_t v19 = this;
  vDSP_Length v20 = v2;
  int v18 = v3;
  std::allocate_shared[abi:ne180100]<Phase::Controller::SpatializerFilterDatabase,std::allocator<Phase::Controller::SpatializerFilterDatabase>,Phase::Controller::Spatializer const*&,Phase::Controller::SpatializerEncoder const*&,unsigned int &,void>(&v20, &v19, &v18, &v14);
  long long v16 = 0u;
  long long v17 = 0u;
  uint64_t v5 = v14;
  uint64_t v4 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v6 = (std::__shared_weak_count *)*((void *)this + 4);
  *((void *)this + objc_destroyWeak(this + 3) = v5;
  *((void *)this + 4) = v4;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  long long v7 = v16;
  if (*((void *)&v16 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v16 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  uint8x8_t v8 = (std::__shared_weak_count *)*((void *)this + 6);
  *(_OWORD *)((char *)this + 4std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = v7;
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  long long v9 = v17;
  if (*((void *)&v17 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  int v10 = (std::__shared_weak_count *)*((void *)this + 8);
  *(_OWORD *)((char *)this + 56) = v9;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (*((void *)&v17 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v17 + 1));
  }
  if (*((void *)&v16 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v16 + 1));
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (*((void *)&v13 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v13 + 1));
  }
  if (*((void *)&v12 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v12 + 1));
  }
  if (*((void *)&v11 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v11 + 1));
  }
}

void sub_222092F2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL Phase::Controller::VbapEncoder::GetFiltersAndDelays(Phase::Controller::VbapEncoder *this, float a2, float a3, float a4, unsigned int a5, float **a6, float *a7)
{
  int v14 = (*(uint64_t (**)(Phase::Controller::VbapEncoder *))(*(void *)this + 48))(this);
  int v15 = v14;
  uint64_t v16 = v14;
  if (v14 >= 1)
  {
    long long v17 = a6;
    uint64_t v18 = v14;
    do
    {
      vDSP_vclr(*v17++, 1, a5);
      --v18;
    }
    while (v18);
  }
  vDSP_vclr(a7, 1, v15);
  Phase::Controller::SpatializerEncoder::VerifyCoordinateRanges(this, a2, a3, a4);
  unint64_t v19 = *((int *)this + 18);
  v33[0] = 0;
  std::vector<float>::vector(__p, v19, v33);
  __double2 v20 = __sincos_stret((float)((float)(a2 + -90.0) * 0.017453));
  __double2 v21 = __sincos_stret((float)(a3 * 0.017453));
  float v22 = v21.__cosval * v20.__cosval;
  float v23 = v21.__sinval * v20.__cosval;
  float sinval = v20.__sinval;
  *(float *)float v33 = v22;
  *(float *)&v33[1] = v23;
  *(float *)&v33[2] = sinval;
  int v25 = AudioDSP::Core::VBAP::calculateVBAPGains();
  uint64_t v26 = __p[0];
  if (v15 >= 1 && v25 == 0)
  {
    int v28 = (int *)__p[0];
    do
    {
      int v29 = *v28++;
      int v30 = v29;
      uint64_t v31 = *a6++;
      *uint64_t v31 = v30;
      --v16;
    }
    while (v16);
  }
  else if (!__p[0])
  {
    return v25 == 0;
  }
  __p[1] = v26;
  operator delete(v26);
  return v25 == 0;
}

void sub_2220930E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *Phase::Controller::VbapEncoder::GetDescription@<X0>(Phase::Controller::VbapEncoder *this@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  snprintf(__str, 0x100uLL, "<Encoder Type: Vbap, Filter Length: %d, Output Channel Count: %d>", *(_DWORD *)(*((void *)this + 3) + 8), *((_DWORD *)this + 18));
  return std::string::basic_string[abi:ne180100]<0>(a2, __str);
}

uint64_t Phase::Controller::VbapEncoder::GetOutputChannelCount(Phase::Controller::VbapEncoder *this)
{
  return *((unsigned int *)this + 18);
}

unint64_t Phase::Controller::VbapEncoder::GetNearestFilter(Phase::Controller::SpatializerFilterDatabase **this, const Phase::Controller::SpatializerFilterHandle *a2, float a3, float a4, void *a5)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (a5)
  {
    int v10 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)this) + 576);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      int v12 = 136315394;
      long long v13 = "VbapSpatializer.mm";
      __int16 v14 = 1024;
      int v15 = 147;
      _os_log_impl(&dword_221E5E000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: nullptr == pInWorkBuffer is false.", (uint8_t *)&v12, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "PRECONDITION: nullptr == pInWorkBuffer is false.");
  }
  Phase::Controller::SpatializerEncoder::VerifyCoordinateRanges((Phase::Logger *)this, a3, a4, 0.0);
  uint8x8_t v8 = this[3];

  return Phase::Controller::SpatializerFilterDatabase::GetNearestFilter(v8, a3, a4);
}

void sub_2220932C8(_Unwind_Exception *exception_object)
{
}

AudioDSP::Core::VBAP *std::unique_ptr<AudioDSP::Core::VBAP>::reset[abi:ne180100](AudioDSP::Core::VBAP **a1, AudioDSP::Core::VBAP *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    AudioDSP::Core::VBAP::~VBAP(result);
    JUMPOUT(0x223C938A0);
  }
  return result;
}

void std::vector<std::list<int>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  long long v2 = (uint64_t *)**a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        int v6 = v4 - 3;
        if (*(v4 - 1))
        {
          uint64_t v8 = *(v4 - 3);
          long long v7 = (uint64_t *)*(v4 - 2);
          uint64_t v9 = *v7;
          *(void *)(v9 + 8) = *(void *)(v8 + 8);
          **(void **)(v8 + 8) = v9;
          *(v4 - 1) = 0;
          if (v7 != v6)
          {
            do
            {
              int v10 = (uint64_t *)v7[1];
              operator delete(v7);
              long long v7 = v10;
            }
            while (v10 != v6);
          }
        }
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__shared_ptr_emplace<Phase::Controller::VbapEncoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D47B630;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Phase::Controller::VbapEncoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D47B630;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C938A0);
}

uint64_t std::__shared_ptr_emplace<Phase::Controller::VbapEncoder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_pointer<Phase::Controller::VbapEncoder *,std::shared_ptr<Phase::Controller::SpatializerEncoder>::__shared_ptr_default_delete<Phase::Controller::SpatializerEncoder,Phase::Controller::VbapEncoder>,std::allocator<Phase::Controller::VbapEncoder>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C938A0);
}

uint64_t std::__shared_ptr_pointer<Phase::Controller::VbapEncoder *,std::shared_ptr<Phase::Controller::SpatializerEncoder>::__shared_ptr_default_delete<Phase::Controller::SpatializerEncoder,Phase::Controller::VbapEncoder>,std::allocator<Phase::Controller::VbapEncoder>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t Phase::VirtualAllocator::ReserveAddressSpace(Phase::VirtualAllocator *this)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  size_t v1 = (void)this << *MEMORY[0x263EF8AF0];
  long long v2 = mmap(0, v1, 0, 4098, -1, 0);
  if (v2 == (void *)-1)
  {
    int v6 = **(NSObject ***)(Phase::Logger::GetInstance((Phase::Logger *)0xFFFFFFFFFFFFFFFFLL) + 112);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      int v7 = *__error();
      int v12 = 136316162;
      long long v13 = "VirtualAllocator.cpp";
      __int16 v14 = 1024;
      int v15 = 45;
      __int16 v16 = 2048;
      size_t v17 = v1;
      __int16 v18 = 2048;
      uint64_t v19 = -1;
      __int16 v20 = 1024;
      int v21 = v7;
      _os_log_impl(&dword_221E5E000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [pBaseAddress == MAP_FAILED is true]: \"mmap() failed to map %zu bytes from address space %p (errno: %d)\\n\"", (uint8_t *)&v12, 0x2Cu);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "mmap() failed to map %zu bytes from address space %p (errno: %d)\n");
  }
  uint64_t v3 = (uint64_t)v2;
  uint64_t v4 = (Phase::Logger *)msync(v2, v1, 18);
  if (v4 == -1)
  {
    uint64_t v9 = **(NSObject ***)(Phase::Logger::GetInstance(v4) + 112);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      int v10 = *__error();
      int v12 = 136316162;
      long long v13 = "VirtualAllocator.cpp";
      __int16 v14 = 1024;
      int v15 = 49;
      __int16 v16 = 2048;
      size_t v17 = v1;
      __int16 v18 = 2048;
      uint64_t v19 = v3;
      __int16 v20 = 1024;
      int v21 = v10;
      _os_log_impl(&dword_221E5E000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [result == -1 is true]: \"msync() failed to sync %zu bytes from address space %p (errno: %d)\\n\"", (uint8_t *)&v12, 0x2Cu);
    }
    long long v11 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v11, "msync() failed to sync %zu bytes from address space %p (errno: %d)\n");
  }
  return v3;
}

void sub_2220937B4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

Phase::Logger *Phase::VirtualAllocator::ReleaseAddressSpace(Phase::VirtualAllocator *this, const void *a2)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if ((*MEMORY[0x263EF8AE8] & (unint64_t)this) != 0)
  {
    int v6 = **(NSObject ***)(Phase::Logger::GetInstance(this) + 112);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      int v7 = (Phase::VirtualAllocator *)*MEMORY[0x263EF8AF8];
      int v15 = 136315906;
      __int16 v16 = "VirtualAllocator.cpp";
      __int16 v17 = 1024;
      int v18 = 59;
      __int16 v19 = 2048;
      __int16 v20 = this;
      __int16 v21 = 2048;
      uint64_t v22 = v7;
      _os_log_impl(&dword_221E5E000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [(((uintptr_t) pInBaseAddress) & vm_page_mask) != 0 is true]: \"base address %p must be aligned to the page size %lu!)\\n\"", (uint8_t *)&v15, 0x26u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "base address %p must be aligned to the page size %lu!)\n");
  }
  size_t v3 = (void)a2 << *MEMORY[0x263EF8AF0];
  uint64_t v4 = (Phase::Logger *)msync(this, v3, 16);
  if (v4 == -1)
  {
    uint64_t v9 = **(NSObject ***)(Phase::Logger::GetInstance(v4) + 112);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      int v10 = *__error();
      int v15 = 136316162;
      __int16 v16 = "VirtualAllocator.cpp";
      __int16 v17 = 1024;
      int v18 = 65;
      __int16 v19 = 2048;
      __int16 v20 = (Phase::VirtualAllocator *)v3;
      __int16 v21 = 2048;
      uint64_t v22 = this;
      __int16 v23 = 1024;
      int v24 = v10;
      _os_log_impl(&dword_221E5E000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [result == -1 is true]: \"msync() failed to unsync %zu bytes from address space %p (errno: %d)\\n\"", (uint8_t *)&v15, 0x2Cu);
    }
    long long v11 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v11, "msync() failed to unsync %zu bytes from address space %p (errno: %d)\n");
  }
  uint64_t result = (Phase::Logger *)munmap(this, v3);
  if (result == -1)
  {
    int v12 = **(NSObject ***)(Phase::Logger::GetInstance(result) + 112);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      int v13 = *__error();
      int v15 = 136316162;
      __int16 v16 = "VirtualAllocator.cpp";
      __int16 v17 = 1024;
      int v18 = 69;
      __int16 v19 = 2048;
      __int16 v20 = (Phase::VirtualAllocator *)v3;
      __int16 v21 = 2048;
      uint64_t v22 = this;
      __int16 v23 = 1024;
      int v24 = v13;
      _os_log_impl(&dword_221E5E000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [result == -1 is true]: \"munmap() failed to unmap %zu bytes from address space %p (errno: %d)\\n\"", (uint8_t *)&v15, 0x2Cu);
    }
    __int16 v14 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v14, "munmap() failed to unmap %zu bytes from address space %p (errno: %d)\n");
  }
  return result;
}

void sub_222093AD4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

Phase::Logger *Phase::VirtualAllocator::CommitPages(Phase::VirtualAllocator *this, void *a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if ((*MEMORY[0x263EF8AE8] & (unint64_t)this) != 0)
  {
    int v7 = **(NSObject ***)(Phase::Logger::GetInstance(this) + 112);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = *MEMORY[0x263EF8AF8];
      int v16 = 136315906;
      __int16 v17 = "VirtualAllocator.cpp";
      __int16 v18 = 1024;
      int v19 = 78;
      __int16 v20 = 2048;
      __int16 v21 = this;
      __int16 v22 = 2048;
      uint64_t v23 = v8;
      _os_log_impl(&dword_221E5E000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [(((uintptr_t) pInBaseAddress) & vm_page_mask) != 0 is true]: \"base address %p must be aligned to the page size %lu!)\\n\"", (uint8_t *)&v16, 0x26u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "base address %p must be aligned to the page size %lu!)\n");
  }
  size_t v3 = (void)a2 << *MEMORY[0x263EF8AF0];
  uint64_t v4 = mmap(this, v3, 3, 4113, -1, 0);
  if (v4 == (void *)-1)
  {
    int v10 = **(NSObject ***)(Phase::Logger::GetInstance((Phase::Logger *)0xFFFFFFFFFFFFFFFFLL) + 112);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      int v11 = *__error();
      int v16 = 136316162;
      __int16 v17 = "VirtualAllocator.cpp";
      __int16 v18 = 1024;
      int v19 = 84;
      __int16 v20 = 2048;
      __int16 v21 = (Phase::VirtualAllocator *)v3;
      __int16 v22 = 2048;
      uint64_t v23 = -1;
      __int16 v24 = 1024;
      int v25 = v11;
      _os_log_impl(&dword_221E5E000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [pBaseAddress == MAP_FAILED is true]: \"mmap() failed to map %zu bytes from address space %p (errno: %d)\\n\"", (uint8_t *)&v16, 0x2Cu);
    }
    int v12 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v12, "mmap() failed to map %zu bytes from address space %p (errno: %d)\n");
  }
  uint64_t v5 = (uint64_t)v4;
  uint64_t result = (Phase::Logger *)msync(v4, v3, 18);
  if (result == -1)
  {
    int v13 = **(NSObject ***)(Phase::Logger::GetInstance(result) + 112);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      int v14 = *__error();
      int v16 = 136316162;
      __int16 v17 = "VirtualAllocator.cpp";
      __int16 v18 = 1024;
      int v19 = 88;
      __int16 v20 = 2048;
      __int16 v21 = (Phase::VirtualAllocator *)v3;
      __int16 v22 = 2048;
      uint64_t v23 = v5;
      __int16 v24 = 1024;
      int v25 = v14;
      _os_log_impl(&dword_221E5E000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [result == -1 is true]: \"msync() failed to sync %zu bytes from address space %p (errno: %d)\\n\"", (uint8_t *)&v16, 0x2Cu);
    }
    int v15 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v15, "msync() failed to sync %zu bytes from address space %p (errno: %d)\n");
  }
  return result;
}

void sub_222093E0C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

Phase::Logger *Phase::VirtualAllocator::DecommitPages(Phase::VirtualAllocator *this, const void *a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if ((*MEMORY[0x263EF8AE8] & (unint64_t)this) != 0)
  {
    int v7 = **(NSObject ***)(Phase::Logger::GetInstance(this) + 112);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = *MEMORY[0x263EF8AF8];
      int v16 = 136315906;
      __int16 v17 = "VirtualAllocator.cpp";
      __int16 v18 = 1024;
      int v19 = 99;
      __int16 v20 = 2048;
      __int16 v21 = this;
      __int16 v22 = 2048;
      uint64_t v23 = v8;
      _os_log_impl(&dword_221E5E000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [(((uintptr_t) pInBaseAddress) & vm_page_mask) != 0 is true]: \"base address %p must be aligned to the page size %lu!)\\n\"", (uint8_t *)&v16, 0x26u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "base address %p must be aligned to the page size %lu!)\n");
  }
  size_t v3 = (void)a2 << *MEMORY[0x263EF8AF0];
  uint64_t v4 = mmap(this, v3, 0, 4114, -1, 0);
  if (v4 == (void *)-1)
  {
    int v10 = **(NSObject ***)(Phase::Logger::GetInstance((Phase::Logger *)0xFFFFFFFFFFFFFFFFLL) + 112);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      int v11 = *__error();
      int v16 = 136316162;
      __int16 v17 = "VirtualAllocator.cpp";
      __int16 v18 = 1024;
      int v19 = 105;
      __int16 v20 = 2048;
      __int16 v21 = (Phase::VirtualAllocator *)v3;
      __int16 v22 = 2048;
      uint64_t v23 = -1;
      __int16 v24 = 1024;
      int v25 = v11;
      _os_log_impl(&dword_221E5E000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [pBaseAddress == MAP_FAILED is true]: \"mmap() failed to map %zu bytes from address space %p (errno: %d)\\n\"", (uint8_t *)&v16, 0x2Cu);
    }
    int v12 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v12, "mmap() failed to map %zu bytes from address space %p (errno: %d)\n");
  }
  uint64_t v5 = (uint64_t)v4;
  uint64_t result = (Phase::Logger *)msync(v4, v3, 18);
  if (result == -1)
  {
    int v13 = **(NSObject ***)(Phase::Logger::GetInstance(result) + 112);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      int v14 = *__error();
      int v16 = 136316162;
      __int16 v17 = "VirtualAllocator.cpp";
      __int16 v18 = 1024;
      int v19 = 109;
      __int16 v20 = 2048;
      __int16 v21 = (Phase::VirtualAllocator *)v3;
      __int16 v22 = 2048;
      uint64_t v23 = v5;
      __int16 v24 = 1024;
      int v25 = v14;
      _os_log_impl(&dword_221E5E000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [result == -1 is true]: \"msync() failed to sync %zu bytes from address space %p (errno: %d)\\n\"", (uint8_t *)&v16, 0x2Cu);
    }
    int v15 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v15, "msync() failed to sync %zu bytes from address space %p (errno: %d)\n");
  }
  return result;
}

void sub_222094144(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Phase::Controller::VoiceBufferExchange::AllocateVoiceBuffer(Phase::Controller::VoiceBufferExchange *this, int a2)
{
}

void sub_22209421C(void *a1)
{
  __cxa_begin_catch(a1);
  free(*v1);
  *size_t v1 = 0;
  MEMORY[0x223C938A0](v1, 0x1080C4020793F04);
  __cxa_rethrow();
}

void sub_22209424C(_Unwind_Exception *a1)
{
}

void Phase::Controller::VoiceBufferExchange::CommitVoiceBuffer(uint64_t a1, uint64_t *a2)
{
  long long v2 = (unsigned int *)(a1 + 8);
  size_t v3 = (std::__shared_weak_count *)a2[1];
  uint64_t v4 = *a2;
  uint64_t v5 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  caulk::concurrent::multi_buffer<std::shared_ptr<Phase::DspLayer::VoiceBuffer>,3>::write(v2, &v4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_2220942B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t caulk::concurrent::multi_buffer<std::shared_ptr<Phase::DspLayer::VoiceBuffer>,3>::write(unsigned int *a1, uint64_t *a2)
{
  int v10 = 0;
  if (a1[1] == 3) {
    unsigned int v4 = 0;
  }
  else {
    unsigned int v4 = a1[1];
  }
  for (unsigned int i = atomic_load(a1); ; unsigned int i = atomic_load(a1))
  {
    BOOL v6 = v4 == (unsigned __int16)i || v4 == HIWORD(i);
    if (!v6) {
      break;
    }
    caulk::concurrent::details::spinloop::spin((uint64_t)&v10);
    if (v4 == 2) {
      unsigned int v4 = 0;
    }
    else {
      ++v4;
    }
  }
  std::optional<std::shared_ptr<Phase::DspLayer::VoiceBuffer>>::operator=[abi:ne180100]<std::shared_ptr<Phase::DspLayer::VoiceBuffer>&,void>((uint64_t)&a1[6 * v4 + 2], a2);
  unsigned int v7 = i;
  atomic_compare_exchange_strong((atomic_uint *volatile)a1, &v7, (unsigned __int16)i | ((unsigned __int16)v4 << 16));
  if (v7 != i)
  {
    unsigned int v8 = v7;
    do
    {
      atomic_compare_exchange_strong((atomic_uint *volatile)a1, &v8, (unsigned __int16)v7 | (v4 << 16));
      BOOL v6 = v8 == v7;
      unsigned int v7 = v8;
    }
    while (!v6);
  }
  a1[1] = v4 + 1;
  return (uint64_t)&a1[6 * v4 + 2];
}

void Phase::Controller::VoiceBufferExchange::PrepareVoiceBufferParameterForSubmission(Phase::Controller::VoiceBufferExchange *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int v4 = (uint64_t *)caulk::concurrent::multi_buffer<std::shared_ptr<Phase::DspLayer::VoiceBuffer>,3>::read_if ((unsigned int *)this + 2);
  if (v4)
  {
    unsigned int v5 = *(_DWORD *)this;
    uint64_t v7 = *v4;
    BOOL v6 = (std::__shared_weak_count *)v4[1];
    if (v6)
    {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      *(_DWORD *)a2 = v5;
      *(void *)(a2 + 8) = v7;
      *(void *)(a2 + 16) = v6;
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      *(unsigned char *)(a2 + 24) = 1;
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
    else
    {
      *(_DWORD *)a2 = v5;
      *(void *)(a2 + 8) = v7;
      *(void *)(a2 + 16) = 0;
      *(unsigned char *)(a2 + 24) = 1;
    }
  }
  else
  {
    *(_DWORD *)a2 = 0x7FFFFFFF;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(unsigned char *)(a2 + 24) = 0;
  }
}

uint64_t caulk::concurrent::multi_buffer<std::shared_ptr<Phase::DspLayer::VoiceBuffer>,3>::read_if (unsigned int *a1)
{
  unsigned int v1 = atomic_load(a1);
  unsigned int v2 = HIWORD(v1);
  if (HIWORD(v1) == 0xFFFF)
  {
    LOWORD(vobjc_destroyWeak(this + 3) = v1;
LABEL_6:
    unsigned int v2 = (unsigned __int16)v3;
    if ((unsigned __int16)v3 == 0xFFFF) {
      return 0;
    }
  }
  else
  {
    unsigned int v3 = v1;
    while (1)
    {
      atomic_compare_exchange_strong((atomic_uint *volatile)a1, &v3, v2 | 0xFFFF0000);
      if (v3 == v1) {
        break;
      }
      unsigned int v2 = HIWORD(v3);
      unsigned int v1 = v3;
      if (HIWORD(v3) == 0xFFFF) {
        goto LABEL_6;
      }
    }
  }
  unsigned int v5 = &a1[6 * v2];
  if (*((unsigned char *)v5 + 24)) {
    return (uint64_t)(v5 + 2);
  }
  _os_assert_log();
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

void std::__shared_ptr_pointer<Phase::DspLayer::VoiceBuffer *,Phase::Controller::VoiceBufferExchange::AllocateVoiceBuffer(int)::$_0,std::allocator<Phase::DspLayer::VoiceBuffer>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C938A0);
}

void std::__shared_ptr_pointer<Phase::DspLayer::VoiceBuffer *,Phase::Controller::VoiceBufferExchange::AllocateVoiceBuffer(int)::$_0,std::allocator<Phase::DspLayer::VoiceBuffer>>::__on_zero_shared(uint64_t a1)
{
  unsigned int v1 = *(void ***)(a1 + 24);
  free(*v1);
  *unsigned int v1 = 0;

  JUMPOUT(0x223C938A0);
}

uint64_t std::optional<std::shared_ptr<Phase::DspLayer::VoiceBuffer>>::operator=[abi:ne180100]<std::shared_ptr<Phase::DspLayer::VoiceBuffer>&,void>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (*(unsigned char *)(a1 + 16))
  {
    uint64_t v4 = a2[1];
    if (v4) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
    }
    unsigned int v5 = *(std::__shared_weak_count **)(a1 + 8);
    *(void *)a1 = v3;
    *(void *)(a1 + 8) = v4;
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
  else
  {
    uint64_t v6 = a2[1];
    *(void *)a1 = v3;
    *(void *)(a1 + 8) = v6;
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t Phase::Controller::VoiceBufferExchangeManager::VoiceBufferExchangeManager(uint64_t a1, int **a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  while (v3 != v4)
  {
    std::__hash_table<std::__hash_value_type<int,Phase::Controller::VoiceBufferExchange>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::VoiceBufferExchange>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::VoiceBufferExchange>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::VoiceBufferExchange>>>::__emplace_unique_key_args<int,int const&,int const&>(a1, v3, v3, v3);
    ++v3;
  }
  return a1;
}

void sub_222094634(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<int,Phase::Controller::VoiceBufferExchange>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::VoiceBufferExchange>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::VoiceBufferExchange>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::VoiceBufferExchange>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void Phase::Controller::VoiceBufferExchangeManager::GetManagedVoiceBuffer(Phase::Controller::VoiceBufferExchangeManager *this, int a2, int a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unsigned int v5 = std::__hash_table<std::__hash_value_type<Phase::Controller::IR::IRBuilder::Processor,std::unordered_map<Phase::Controller::IR::IRBuilder::Method,Phase::Controller::IR::IRBuilderBase *>>,std::__unordered_map_hasher<Phase::Controller::IR::IRBuilder::Processor,std::__hash_value_type<Phase::Controller::IR::IRBuilder::Processor,std::unordered_map<Phase::Controller::IR::IRBuilder::Method,Phase::Controller::IR::IRBuilderBase *>>,std::hash<Phase::Controller::IR::IRBuilder::Processor>,std::equal_to<Phase::Controller::IR::IRBuilder::Processor>,true>,std::__unordered_map_equal<Phase::Controller::IR::IRBuilder::Processor,std::__hash_value_type<Phase::Controller::IR::IRBuilder::Processor,std::unordered_map<Phase::Controller::IR::IRBuilder::Method,Phase::Controller::IR::IRBuilderBase *>>,std::equal_to<Phase::Controller::IR::IRBuilder::Processor>,std::hash<Phase::Controller::IR::IRBuilder::Processor>,true>,std::allocator<std::__hash_value_type<Phase::Controller::IR::IRBuilder::Processor,std::unordered_map<Phase::Controller::IR::IRBuilder::Method,Phase::Controller::IR::IRBuilderBase *>>>>::find<Phase::Controller::IR::IRBuilder::Processor>(this, a2);
  if (v5)
  {
    uint64_t v6 = (Phase::Controller::VoiceBufferExchange *)(v5 + 3);
    Phase::Controller::VoiceBufferExchange::AllocateVoiceBuffer(v6, a3);
  }
  uint64_t v7 = **(id **)(Phase::Logger::GetInstance(0) + 512);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    int v9 = 136315650;
    int v10 = "VoiceBufferExchangeManager.mm";
    __int16 v11 = 1024;
    int v12 = 33;
    __int16 v13 = 1024;
    int v14 = a2;
    _os_log_impl(&dword_221E5E000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Parameter %d not managed by VoiceBufferExchangeManager. \\n\"", (uint8_t *)&v9, 0x18u);
  }
  exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Parameter %d not managed by VoiceBufferExchangeManager. \n");
}

void sub_222094780(_Unwind_Exception *exception_object)
{
}

void Phase::Controller::VoiceBufferExchangeManager::CommitVoiceBuffer(void *a1, int a2, uint64_t *a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  unsigned int v5 = std::__hash_table<std::__hash_value_type<Phase::Controller::IR::IRBuilder::Processor,std::unordered_map<Phase::Controller::IR::IRBuilder::Method,Phase::Controller::IR::IRBuilderBase *>>,std::__unordered_map_hasher<Phase::Controller::IR::IRBuilder::Processor,std::__hash_value_type<Phase::Controller::IR::IRBuilder::Processor,std::unordered_map<Phase::Controller::IR::IRBuilder::Method,Phase::Controller::IR::IRBuilderBase *>>,std::hash<Phase::Controller::IR::IRBuilder::Processor>,std::equal_to<Phase::Controller::IR::IRBuilder::Processor>,true>,std::__unordered_map_equal<Phase::Controller::IR::IRBuilder::Processor,std::__hash_value_type<Phase::Controller::IR::IRBuilder::Processor,std::unordered_map<Phase::Controller::IR::IRBuilder::Method,Phase::Controller::IR::IRBuilderBase *>>,std::equal_to<Phase::Controller::IR::IRBuilder::Processor>,std::hash<Phase::Controller::IR::IRBuilder::Processor>,true>,std::allocator<std::__hash_value_type<Phase::Controller::IR::IRBuilder::Processor,std::unordered_map<Phase::Controller::IR::IRBuilder::Method,Phase::Controller::IR::IRBuilderBase *>>>>::find<Phase::Controller::IR::IRBuilder::Processor>(a1, a2);
  if (!v5)
  {
    unsigned int v8 = **(id **)(Phase::Logger::GetInstance(0) + 512);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315650;
      int v12 = "VoiceBufferExchangeManager.mm";
      __int16 v13 = 1024;
      int v14 = 48;
      __int16 v15 = 1024;
      int v16 = a2;
      _os_log_impl(&dword_221E5E000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Parameter %d not managed by VoiceBufferExchangeManager. \\n\"", buf, 0x18u);
    }
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Parameter %d not managed by VoiceBufferExchangeManager. \n");
  }
  uint64_t v6 = (uint64_t)(v5 + 3);
  uint64_t v7 = (std::__shared_weak_count *)a3[1];
  v10[0] = *a3;
  v10[1] = (uint64_t)v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Phase::Controller::VoiceBufferExchange::CommitVoiceBuffer(v6, v10);
  if (v7)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_222094910(_Unwind_Exception *exception_object)
{
}

void Phase::Controller::VoiceBufferExchangeManager::GetPreparedVoiceBufferParameters(Phase::Controller::VoiceBufferExchangeManager *this@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  unsigned int v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    uint64_t v4 = a2 + 2;
    do
    {
      Phase::Controller::VoiceBufferExchange::PrepareVoiceBufferParameterForSubmission((Phase::Controller::VoiceBufferExchange *)(v2 + 3), (uint64_t)&v16);
      uint64_t v5 = v17;
      if (v17)
      {
        unint64_t v6 = a2[1];
        unint64_t v7 = a2[2];
        if (v6 >= v7)
        {
          uint64_t v10 = (uint64_t)(v6 - *a2) >> 5;
          unint64_t v11 = v10 + 1;
          if ((unint64_t)(v10 + 1) >> 59) {
            std::vector<Phase::Controller::VoiceBufferParameter>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v12 = v7 - *a2;
          if (v12 >> 4 > v11) {
            unint64_t v11 = v12 >> 4;
          }
          if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v13 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v13 = v11;
          }
          v20[4] = v4;
          if (v13) {
            int v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::SpatialModeler::GraphDescriptionNode>>((uint64_t)v4, v13);
          }
          else {
            int v14 = 0;
          }
          __int16 v15 = &v14[32 * v10];
          v20[0] = v14;
          v20[1] = v15;
          void v20[3] = &v14[32 * v13];
          *(_DWORD *)__int16 v15 = v16;
          *((void *)v15 + 1) = v5;
          unsigned int v8 = v18;
          *((void *)v15 + 2) = v18;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          v15[24] = v19;
          void v20[2] = v15 + 32;
          std::vector<Phase::Controller::VoiceBufferParameter>::__swap_out_circular_buffer(a2, v20);
          uint64_t v9 = a2[1];
          std::__split_buffer<Phase::Controller::VoiceBufferParameter>::~__split_buffer(v20);
        }
        else
        {
          *(_DWORD *)unint64_t v6 = v16;
          *(void *)(v6 + 8) = v5;
          unsigned int v8 = v18;
          *(void *)(v6 + 16) = v18;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          *(unsigned char *)(v6 + 24) = v19;
          uint64_t v9 = v6 + 32;
        }
        a2[1] = v9;
        if (!v8) {
          goto LABEL_24;
        }
      }
      else
      {
        unsigned int v8 = v18;
        if (!v18) {
          goto LABEL_24;
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
LABEL_24:
      unsigned int v2 = (void *)*v2;
    }
    while (v2);
  }
}

void sub_222094AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  std::vector<Phase::Controller::VoiceBufferParameter>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<int,Phase::Controller::VoiceBufferExchange>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::VoiceBufferExchange>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::VoiceBufferExchange>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::VoiceBufferExchange>>>::__emplace_unique_key_args<int,int const&,int const&>(uint64_t a1, int *a2, int *a3, int *a4)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 <= v6) {
        unint64_t v4 = v6 % v7;
      }
    }
    else
    {
      unint64_t v4 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v9)
    {
      for (unsigned int i = *v9; i; unsigned int i = (uint64_t *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == v6)
        {
          if (*((_DWORD *)i + 4) == v6) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v4) {
            break;
          }
        }
      }
    }
  }
  int v12 = *a3;
  int v13 = *a4;
  int v14 = (void *)(a1 + 16);
  __int16 v15 = operator new(0x70uLL);
  uint64_t v16 = 0;
  v39[0] = v15;
  v39[1] = a1 + 16;
  void *v15 = 0;
  v15[1] = v6;
  *((_DWORD *)v15 + 4) = v12;
  *((_DWORD *)v15 + 6) = v13;
  v15[4] = 0xFFFFFFFFLL;
  do
  {
    uint64_t v17 = (char *)&v15[v16];
    v17[40] = 0;
    v17[56] = 0;
    v16 += 3;
  }
  while (v16 != 9);
  char v40 = 1;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v7 || (float)(v19 * (float)v7) < v18)
  {
    BOOL v20 = 1;
    if (v7 >= 3) {
      BOOL v20 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v7);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      int8x8_t prime = (int8x8_t)v22;
    }
    else {
      int8x8_t prime = (int8x8_t)v21;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v7 = *(void *)(a1 + 8);
    }
    if (*(void *)&prime > v7) {
      goto LABEL_32;
    }
    if (*(void *)&prime < v7)
    {
      unint64_t v30 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (uint8x8_t v31 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        unint64_t v30 = std::__next_prime(v30);
      }
      else
      {
        uint64_t v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2) {
          unint64_t v30 = v32;
        }
      }
      if (*(void *)&prime <= v30) {
        int8x8_t prime = (int8x8_t)v30;
      }
      if (*(void *)&prime >= v7)
      {
        unint64_t v7 = *(void *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_32:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          __int16 v24 = operator new(8 * *(void *)&prime);
          int v25 = *(void **)a1;
          *(void *)a1 = v24;
          if (v25) {
            operator delete(v25);
          }
          uint64_t v26 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v26++) = 0;
          while (*(void *)&prime != v26);
          unint64_t v27 = (void *)*v14;
          if (*v14)
          {
            unint64_t v28 = v27[1];
            uint8x8_t v29 = (uint8x8_t)vcnt_s8(prime);
            v29.i16[0] = vaddlv_u8(v29);
            if (v29.u32[0] > 1uLL)
            {
              if (v28 >= *(void *)&prime) {
                v28 %= *(void *)&prime;
              }
            }
            else
            {
              v28 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v28) = v14;
            float v33 = (void *)*v27;
            if (*v27)
            {
              do
              {
                unint64_t v34 = v33[1];
                if (v29.u32[0] > 1uLL)
                {
                  if (v34 >= *(void *)&prime) {
                    v34 %= *(void *)&prime;
                  }
                }
                else
                {
                  v34 &= *(void *)&prime - 1;
                }
                if (v34 != v28)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v34))
                  {
                    *(void *)(*(void *)a1 + 8 * v34) = v27;
                    goto LABEL_57;
                  }
                  *unint64_t v27 = *v33;
                  *float v33 = **(void **)(*(void *)a1 + 8 * v34);
                  **(void **)(*(void *)a1 + 8 * v34) = v33;
                  float v33 = v27;
                }
                unint64_t v34 = v28;
LABEL_57:
                unint64_t v27 = v33;
                float v33 = (void *)*v33;
                unint64_t v28 = v34;
              }
              while (v33);
            }
          }
          unint64_t v7 = (unint64_t)prime;
          goto LABEL_61;
        }
        float v38 = *(void **)a1;
        *(void *)a1 = 0;
        if (v38) {
          operator delete(v38);
        }
        unint64_t v7 = 0;
        *(void *)(a1 + 8) = 0;
      }
    }
LABEL_61:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v4 = v6 % v7;
      }
      else {
        unint64_t v4 = v6;
      }
    }
    else
    {
      unint64_t v4 = (v7 - 1) & v6;
    }
  }
  uint64_t v35 = *(void **)(*(void *)a1 + 8 * v4);
  unsigned int i = (uint64_t *)v39[0];
  if (v35)
  {
    *(void *)v39[0] = *v35;
LABEL_74:
    *uint64_t v35 = i;
    goto LABEL_75;
  }
  *(void *)v39[0] = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(*(void *)a1 + 8 * v4) = v14;
  if (*i)
  {
    unint64_t v36 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v36 >= v7) {
        v36 %= v7;
      }
    }
    else
    {
      v36 &= v7 - 1;
    }
    uint64_t v35 = (void *)(*(void *)a1 + 8 * v36);
    goto LABEL_74;
  }
LABEL_75:
  v39[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<int,Phase::Controller::VoiceBufferExchange>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,Phase::Controller::VoiceBufferExchange>,void *>>>>::reset[abi:ne180100]((uint64_t)v39);
  return i;
}

void sub_222094F34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<int,Phase::Controller::VoiceBufferExchange>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,Phase::Controller::VoiceBufferExchange>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<int,Phase::Controller::VoiceBufferExchange>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,Phase::Controller::VoiceBufferExchange>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(unsigned char **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      for (uint64_t i = 0; i != -72; i -= 24)
      {
        if (v1[i + 104])
        {
          uint64_t v3 = *(std::__shared_weak_count **)&v1[i + 96];
          if (v3) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v3);
          }
        }
      }
    }
    operator delete(v1);
  }
}

uint64_t Phase::DspLayer::VoiceEngine::VoiceEngine(uint64_t a1, long long *a2)
{
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 1065353216;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 256;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 6std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = 0;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 136), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    *(void *)(a1 + 152) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 136) = v3;
  }
  for (uint64_t i = 0; i != 73728; i += 72)
  {
    uint64_t v5 = (void *)(a1 + i);
    v5[156] = 0;
    v5[149] = 0;
    v5[151] = 0;
    v5[150] = 0;
  }
  bzero((void *)(a1 + 168), 0x12404uLL);
  *(void *)(a1 + 16std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = a1 + 1192;
  unint64_t v6 = (void *)(a1 + 1264);
  uint64_t v7 = 1023;
  do
  {
    *(v6 - 8) = v6;
    void *v6 = v6 - 9;
    v6 += 9;
    --v7;
  }
  while (v7);
  *(void *)(a1 + 74848) = a1 + 74776;
  *(void *)(a1 + 74928) = 0;
  *(void *)(a1 + 74936) = 0;
  uint8x8_t v8 = malloc_type_malloc(0x2EE00uLL, 0x100004052888210uLL);
  *(void *)(a1 + 74944) = v8;
  *(void *)(a1 + 74928) = DefaultVoiceEngineCallback;
  *(void *)(a1 + 64) = 0;
  bzero(v8, 0x2EE00uLL);
  return a1;
}

void sub_222095108(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)(v1 + 32);
  if (v3)
  {
    *(void *)(v1 + 4std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void Phase::DspLayer::VoiceEngine::~VoiceEngine(Phase::DspLayer::VoiceEngine *this)
{
  *((void *)this + 9366) = DefaultVoiceEngineCallback;
  *((void *)this + 9367) = 0;
  free(*((void **)this + 9368));
  free(*((void **)this + 7));
  for (uint64_t i = 74880; i != 1152; i -= 72)
    std::__function::__value_func<void ()(Phase::DspLayer::VoiceEngine *,long long,void *)>::~__value_func[abi:ne180100]((Phase::DspLayer::VoiceEngine *)((char *)this + i));
  if (*((char *)this + 159) < 0) {
    operator delete(*((void **)this + 17));
  }
  long long v3 = (void *)*((void *)this + 4);
  if (v3)
  {
    *((void *)this + std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear(this + 5) = v3;
    operator delete(v3);
  }
}

uint64_t Phase::DspLayer::VoiceEngine::SetVoicePoolMessageCallback(uint64_t result, uint64_t a2, uint64_t (*a3)())
{
  if (a3) {
    long long v3 = a3;
  }
  else {
    long long v3 = DefaultVoiceEngineCallback;
  }
  *(void *)(result + 74928) = v3;
  *(void *)(result + 74936) = a2;
  return result;
}

void Phase::DspLayer::VoiceEngine::Configure(uint64_t a1, _DWORD *a2)
{
  unsigned int v2 = a2;
  double v4 = *(double *)a2;
  *(void *)a1 = *(void *)a2;
  *(float *)&double v4 = 1.0 / v4;
  *(_DWORD *)(a1 + 8) = LODWORD(v4);
  std::vector<Phase::DspLayer::VoicePool *>::reserve((void **)(a1 + 32), (int)a2[2]);
  *(void *)(a1 + 4std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = *(void *)(a1 + 32);
  Phase::CalendarQueue<128,1024,Phase::DspLayer::VoiceEngine::Action>::Clear(a1 + 160);
  unsigned int v5 = (v2[3] + 3) & 0xFFFFFFFC;
  *(_DWORD *)(a1 + 112) = v5;
  unsigned int v6 = (v2[5] + 3) & 0xFFFFFFFC;
  *(_DWORD *)(a1 + 116) = v6;
  unsigned int v7 = (v2[6] + 3) & 0xFFFFFFFC;
  *(_DWORD *)(a1 + 12std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = v7;
  unsigned int v8 = (v2[4] + 3) & 0xFFFFFFFC;
  *(_DWORD *)(a1 + 124) = v8;
  unsigned int v9 = (v2[7] + 3) & 0xFFFFFFFC;
  *(_DWORD *)(a1 + 128) = v9;
  unsigned int v10 = (v2[8] + 3) & 0xFFFFFFFC;
  *(_DWORD *)(a1 + 132) = v10;
  LODWORD(v2) = v6 + v5 + v7 + v8 + v9 + v10;
  free(*(void **)(a1 + 56));
  size_t v11 = 4 * (int)v2;
  int v12 = malloc_type_malloc(v11, 0x100004052888210uLL);
  *(void *)(a1 + 56) = v12;
  bzero(v12, v11);
  uint64_t v13 = 0;
  uint64_t v14 = *(void *)(a1 + 56);
  *(void *)(a1 + 64) = v14;
  uint64_t v15 = a1 + 72;
  do
  {
    v14 += 4 * *(int *)(v15 + 4 * v13 + 40);
    *(void *)(v15 + 8 * v13++) = v14;
  }
  while (v13 != 5);
}

void std::vector<Phase::DspLayer::VoicePool *>::reserve(void **a1, unint64_t a2)
{
  double v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      std::vector<Phase::DspLayer::VoicePool *>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    unsigned int v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v3, a2);
    unsigned int v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    unsigned int v9 = &v6[8 * v8];
    size_t v11 = (char *)*a1;
    unsigned int v10 = (char *)a1[1];
    int v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        uint64_t v13 = *((void *)v10 - 1);
        v10 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      unsigned int v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

uint64_t Phase::CalendarQueue<128,1024,Phase::DspLayer::VoiceEngine::Action>::Clear(uint64_t result)
{
  for (uint64_t i = 0; i != 128; ++i)
  {
    uint64_t v2 = result + 8 * i;
    uint64_t v5 = *(void *)(v2 + 8);
    uint64_t v3 = (void *)(v2 + 8);
    uint64_t v4 = v5;
    if (v5)
    {
      uint64_t v6 = v4;
      do
      {
        uint64_t v7 = v6;
        uint64_t v6 = *(void *)(v6 + 8);
      }
      while (v6);
      uint64_t v8 = *(void **)result;
      *(void *)(v7 + 8) = *(void *)result;
      if (v8) {
        void *v8 = v7;
      }
      *(void *)uint64_t result = v4;
    }
    *uint64_t v3 = 0;
  }
  *(_DWORD *)(result + 7476std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = 0;
  return result;
}

uint64_t Phase::DspLayer::VoiceEngine::AddPool(Phase::DspLayer::VoiceEngine *this, Phase::DspLayer::VoicePool *a2, uint64_t a3)
{
  uint64_t v23 = a2;
  if ((a3 & 0x80000000) != 0)
  {
    uint64_t v8 = (void *)*((void *)this + 5);
  }
  else
  {
    uint64_t v5 = a3;
    uint64_t v7 = *((void *)this + 4);
    uint64_t v8 = (void *)*((void *)this + 5);
    uint64_t v6 = (char **)((char *)this + 32);
    if ((int)(((unint64_t)v8 - v7) >> 3) > (int)a3)
    {
      std::vector<Phase::DspLayer::VoicePool *>::insert(v6, (char *)(v7 + 8 * a3), (char *)&v23);
      return v5;
    }
  }
  unint64_t v9 = *((void *)this + 6);
  if ((unint64_t)v8 >= v9)
  {
    uint64_t v11 = *((void *)this + 4);
    uint64_t v12 = ((uint64_t)v8 - v11) >> 3;
    if ((unint64_t)(v12 + 1) >> 61) {
      std::vector<Phase::DspLayer::VoicePool *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v13 = v9 - v11;
    uint64_t v14 = v13 >> 2;
    if (v13 >> 2 <= (unint64_t)(v12 + 1)) {
      uint64_t v14 = v12 + 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v14;
    }
    if (v15) {
      uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)this + 48, v15);
    }
    else {
      uint64_t v16 = 0;
    }
    uint64_t v17 = &v16[8 * v12];
    float v18 = &v16[8 * v15];
    *(void *)uint64_t v17 = a2;
    unsigned int v10 = v17 + 8;
    BOOL v20 = (char *)*((void *)this + 4);
    float v19 = (char *)*((void *)this + 5);
    if (v19 != v20)
    {
      do
      {
        uint64_t v21 = *((void *)v19 - 1);
        v19 -= 8;
        *((void *)v17 - 1) = v21;
        v17 -= 8;
      }
      while (v19 != v20);
      float v19 = (char *)*((void *)this + 4);
    }
    *((void *)this + 4) = v17;
    *((void *)this + std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear(this + 5) = v10;
    *((void *)this + 6) = v18;
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    void *v8 = a2;
    unsigned int v10 = v8 + 1;
  }
  *((void *)this + std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear(this + 5) = v10;
  return (((unint64_t)v10 - *((void *)this + 4)) >> 3) - 1;
}

char *std::vector<Phase::DspLayer::VoicePool *>::insert(char **a1, char *a2, char *a3)
{
  uint64_t v3 = a3;
  uint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v7 = a2 - *a1;
  uint64_t v8 = &(*a1)[v7 & 0xFFFFFFFFFFFFFFF8];
  uint64_t v10 = (uint64_t)(a1 + 2);
  unint64_t v9 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v9)
  {
    unint64_t v15 = ((v5 - v6) >> 3) + 1;
    if (v15 >> 61) {
      std::vector<Phase::DspLayer::VoicePool *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v17 = v7 >> 3;
    uint64_t v18 = v9 - (void)v6;
    if (v18 >> 2 > v15) {
      unint64_t v15 = v18 >> 2;
    }
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v19 = v15;
    }
    if (v19) {
      BOOL v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)(a1 + 2), v19);
    }
    else {
      BOOL v20 = 0;
    }
    uint64_t v21 = &v20[8 * v17];
    unint64_t v22 = &v20[8 * v19];
    if (v17 == v19)
    {
      if (v7 < 1)
      {
        if (v6 == a2) {
          unint64_t v24 = 1;
        }
        else {
          unint64_t v24 = v7 >> 2;
        }
        int v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v10, v24);
        uint64_t v21 = &v25[8 * (v24 >> 2)];
        unint64_t v22 = &v25[8 * v26];
        if (v20)
        {
          unint64_t v27 = &v25[8 * v26];
          operator delete(v20);
          unint64_t v22 = v27;
        }
      }
      else
      {
        unint64_t v23 = v17 + 2;
        if (v17 >= -1) {
          unint64_t v23 = v17 + 1;
        }
        v21 -= 8 * (v23 >> 1);
      }
    }
    *(void *)uint64_t v21 = *(void *)v3;
    unint64_t v28 = *a1;
    uint8x8_t v29 = v21;
    if (*a1 != v8)
    {
      unint64_t v30 = v8;
      uint8x8_t v29 = v21;
      do
      {
        uint64_t v31 = *((void *)v30 - 1);
        v30 -= 8;
        *((void *)v29 - 1) = v31;
        v29 -= 8;
      }
      while (v30 != v28);
    }
    uint64_t v32 = a1[1];
    int64_t v33 = v32 - v8;
    if (v32 != v8)
    {
      unint64_t v34 = v8;
      size_t v35 = v32 - v8;
      unint64_t v36 = v22;
      memmove(v21 + 8, v34, v35);
      unint64_t v22 = v36;
    }
    float v37 = *a1;
    *a1 = v29;
    a1[1] = &v21[v33 + 8];
    a1[2] = v22;
    if (v37) {
      operator delete(v37);
    }
    return v21;
  }
  else if (v8 == v5)
  {
    *(void *)uint64_t v8 = *(void *)a3;
    a1[1] = v8 + 8;
  }
  else
  {
    uint64_t v11 = v8 + 8;
    uint64_t v12 = v5 - 8;
    uint64_t v13 = a1[1];
    while (v12 < v5)
    {
      uint64_t v14 = *(void *)v12;
      v12 += 8;
      *(void *)uint64_t v13 = v14;
      v13 += 8;
    }
    a1[1] = v13;
    if (v5 != v11) {
      memmove(&v5[-8 * ((v5 - v11) >> 3)], v8, v5 - v11);
    }
    if (v8 <= v3) {
      v3 += 8 * (a1[1] > v3);
    }
    *(void *)uint64_t v8 = *(void *)v3;
  }
  return v8;
}

void sub_222095774(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL Phase::DspLayer::VoiceEngine::RemovePool(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(char **)(a1 + 32);
  uint64_t v4 = *(char **)(a1 + 40);
  if (v3 != v4)
  {
    while (*(void *)v3 != a2)
    {
      v3 += 8;
      if (v3 == v4)
      {
        uint64_t v3 = *(char **)(a1 + 40);
        break;
      }
    }
  }
  if (v3 != v4)
  {
    if (v4 != v3 + 8) {
      memmove(v3, v3 + 8, v4 - (v3 + 8));
    }
    *(void *)(a1 + 4std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = v4 - 8;
  }
  return v3 != v4;
}

uint64_t Phase::DspLayer::VoiceEngine::Run(uint64_t **this)
{
  uint64_t result = Phase::DspLayer::VoiceEngine::ExecuteActions((Phase::DspLayer::VoiceEngine *)this);
  uint64_t v3 = this[4];
  uint64_t v4 = this[5];
  while (v3 != v4)
  {
    uint64_t v5 = *v3++;
    uint64_t result = Phase::DspLayer::VoicePool::Run(v5);
  }
  this[2] = (uint64_t *)((char *)this[2] + 1);
  ++*((_DWORD *)this + 7);
  return result;
}

uint64_t Phase::DspLayer::VoiceEngine::ExecuteActions(Phase::DspLayer::VoiceEngine *this)
{
  uint64_t v2 = (char *)this + 160;
  uint64_t v3 = Phase::CalendarQueue<128,1024,Phase::DspLayer::VoiceEngine::Action>::PopAtTime((uint64_t)this + 160, *((void *)this + 2));
  for (uint64_t i = 0;
        v3;
        uint64_t v3 = Phase::CalendarQueue<128,1024,Phase::DspLayer::VoiceEngine::Action>::PopAtTime((uint64_t)v2, *((void *)this + 2)))
  {
    std::function<void ()(Phase::DspLayer::VoiceEngine *,long long,void *)>::operator()((uint64_t)(v3 + 1), (uint64_t)this, *((void *)this + 2), v3[5]);
    uint64_t i = (i + 1);
  }
  return i;
}

uint64_t Phase::DspLayer::VoiceEngine::ScheduleAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[5] = *MEMORY[0x263EF8340];
  uint64_t v8 = *(void *)(a1 + 16) + a3;
  uint64_t v6 = v8;
  std::__function::__value_func<void ()(Phase::DspLayer::VoiceEngine *,long long,void *)>::__value_func[abi:ne180100]((uint64_t)v9, a2);
  void v9[4] = a4;
  if (!Phase::CalendarQueue<128,1024,Phase::DspLayer::VoiceEngine::Action>::ScheduleEvent(a1 + 160, v8, &v8)) {
    uint64_t v6 = -1;
  }
  std::__function::__value_func<void ()(Phase::DspLayer::VoiceEngine *,long long,void *)>::~__value_func[abi:ne180100](v9);
  return v6;
}

void sub_22209597C(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(Phase::DspLayer::VoiceEngine *,long long,void *)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

BOOL Phase::CalendarQueue<128,1024,Phase::DspLayer::VoiceEngine::Action>::ScheduleEvent(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = Phase::CalendarQueue<128,1024,Phase::DspLayer::VoiceEngine::Action>::ScheduleEvent(a1, a2);
  uint64_t v5 = v4;
  if (v4)
  {
    void *v4 = *a3;
    std::function<void ()(Phase::DspLayer::VoiceEngine *,long long,void *)>::operator=(v4 + 1, (uint64_t)(a3 + 1));
    v5[5] = a3[5];
  }
  return v5 != 0;
}

uint64_t *Phase::CalendarQueue<128,1024,Phase::DspLayer::VoiceEngine::Action>::PopAtTime(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t **)(a1 + 8 * (a2 & 0x7F) + 8);
  if (!v2) {
    return 0;
  }
  while (1)
  {
    uint64_t v3 = v2[2];
    if (v3 >= a2) {
      break;
    }
    uint64_t v2 = (uint64_t *)v2[1];
    if (!v2) {
      return 0;
    }
  }
  if (v3 != a2) {
    return 0;
  }
  Phase::CalendarQueue<128,1024,Phase::DspLayer::VoiceEngine::Action>::RemoveNode(a1, v2);
  return v2 + 3;
}

uint64_t std::function<void ()(Phase::DspLayer::VoiceEngine *,long long,void *)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = a2;
  uint64_t v6 = a4;
  uint64_t v7 = a3;
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, uint64_t *))(*(void *)v4 + 48))(v4, &v8, &v7, &v6);
}

void *std::__function::__value_func<void ()(Phase::DspLayer::VoiceEngine *,long long,void *)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::vector<Phase::DspLayer::VoicePool *>::__throw_length_error[abi:ne180100]()
{
}

uint64_t std::__function::__value_func<void ()(Phase::DspLayer::VoiceEngine *,long long,void *)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *Phase::CalendarQueue<128,1024,Phase::DspLayer::VoiceEngine::Action>::ScheduleEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  if (*(void *)a1)
  {
    uint64_t v3 = (void *)v2[1];
    *(void *)a1 = v3;
    if (v3) {
      *uint64_t v3 = 0;
    }
    *uint64_t v2 = 0;
    v2[1] = 0;
    v2[2] = a2;
    uint64_t v4 = a1 + 8 * (a2 & 0x7F);
    uint64_t v7 = *(void **)(v4 + 8);
    uint64_t v6 = (void *)(v4 + 8);
    uint64_t v5 = v7;
    if (v7)
    {
      if (v5[2] <= a2)
      {
        while (1)
        {
          unint64_t v9 = v5;
          uint64_t v5 = (void *)v5[1];
          if (!v5) {
            break;
          }
          if (v5[2] > a2)
          {
            void *v5 = v2;
            *uint64_t v2 = v9;
            v2[1] = v5;
            v9[1] = v2;
            goto LABEL_8;
          }
        }
        v9[1] = v2;
        *uint64_t v2 = v9;
        goto LABEL_8;
      }
      v2[1] = v5;
      void *v5 = v2;
    }
    void *v6 = v2;
LABEL_8:
    ++*(_DWORD *)(a1 + 74760);
    return v2 + 3;
  }
  return 0;
}

void *std::function<void ()(Phase::DspLayer::VoiceEngine *,long long,void *)>::operator=(void *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<void ()(Phase::DspLayer::VoiceEngine *,long long,void *)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<void ()(Phase::DspLayer::VoiceEngine *,long long,void *)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<void ()(Phase::DspLayer::VoiceEngine *,long long,void *)>::~__value_func[abi:ne180100](v4);
  return a1;
}

void *std::__function::__value_func<void ()(Phase::DspLayer::VoiceEngine *,long long,void *)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_222095F4C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t Phase::CalendarQueue<128,1024,Phase::DspLayer::VoiceEngine::Action>::RemoveNode(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (!*a2) {
    uint64_t v2 = result + 8 * (a2[2] & 0x7F);
  }
  *(void *)(v2 + 8) = a2[1];
  uint64_t v3 = (uint64_t *)a2[1];
  if (v3) {
    *uint64_t v3 = *a2;
  }
  uint64_t v4 = *(uint64_t ***)result;
  *a2 = 0;
  a2[1] = (uint64_t)v4;
  if (v4) {
    void *v4 = a2;
  }
  *(void *)uint64_t result = a2;
  --*(_DWORD *)(result + 74760);
  return result;
}

Phase::DspLayer::VoiceMap *Phase::DspLayer::VoiceMap::VoiceMap(Phase::DspLayer::VoiceMap *this, int a2, int a3)
{
  unsigned int v4 = a2 - 1;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  unsigned int v5 = 1;
  do
  {
    v4 |= v4 >> v5;
    BOOL v6 = v5 >= 0x10;
    v5 *= 2;
  }
  while (!v6);
  int v7 = v4 + 1;
  *((_DWORD *)this + objc_destroyWeak(this + 3) = v7;
  unsigned int v8 = a3 - 1;
  unsigned int v9 = 1;
  do
  {
    v8 |= v8 >> v9;
    BOOL v6 = v9 >= 0x10;
    v9 *= 2;
  }
  while (!v6);
  int v10 = v7 / (int)(v8 + 1);
  if (v10 <= 2) {
    int v10 = 2;
  }
  *((_DWORD *)this + 2) = v10;
  *(_DWORD *)this = v10 - 1;
  *((void *)this + 2) = malloc_type_malloc(8 * v10, 0x2004093837F09uLL);
  *((void *)this + objc_destroyWeak(this + 3) = malloc_type_malloc(24 * *((int *)this + 3), 0x102004062D53EE8uLL);
  bzero(*((void **)this + 2), 8 * *((int *)this + 2));
  uint64_t v11 = *((unsigned int *)this + 3);
  if ((int)v11 >= 1)
  {
    uint64_t v12 = (void *)(*((void *)this + 3) + 16);
    do
    {
      *(v12 - 1) = 0;
      void *v12 = -1;
      *(v12 - 2) = 0;
      v12 += 3;
      --v11;
    }
    while (v11);
  }
  return this;
}

uint64_t Phase::DspLayer::VoiceMap::Put(Phase::DspLayer::VoiceMap *this, uint64_t a2, unsigned int a3)
{
  if ((a3 & 0x80000000) != 0) {
    return 0;
  }
  int v3 = *((_DWORD *)this + 3);
  if (v3 <= (int)a3) {
    return 0;
  }
  uint64_t v4 = *((void *)this + 3);
  unsigned int v5 = (void *)(v4 + 24 * a3);
  BOOL v6 = v5 + 2;
  if (v5[2] != -1 || *v5) {
    return 0;
  }
  unsigned int v8 = (void *)(*((void *)this + 2) + 8 * (int)(*(_DWORD *)this & a2));
  unsigned int v9 = (void *)*v8;
  if (*v8)
  {
    int v10 = (void *)*v8;
    do
    {
      if (v10[2] == a2)
      {
        if (-1431655765 * (((unint64_t)v10 - v4) >> 3) != a3)
        {
          void *v6 = a2;
          *(_OWORD *)unsigned int v5 = *(_OWORD *)v10;
          if (*v10) {
            *(void *)(*v10 + 8) = v5;
          }
          if (v10[1]) {
            unsigned int v8 = (void *)v10[1];
          }
          void *v8 = v5;
          v10[1] = 0;
          uint64_t v10[2] = -1;
          *int v10 = 0;
        }
        return 1;
      }
      int v10 = (void *)*v10;
    }
    while (v10);
    int v13 = *((_DWORD *)this + 1);
    uint64_t v11 = (_DWORD *)((char *)this + 4);
    int v12 = v13;
    if (v13 >= v3) {
      return 0;
    }
    void *v6 = a2;
    *(void *)(v4 + 24 * a3 + 8) = 0;
    void *v5 = v9;
    v9[1] = v5;
  }
  else
  {
    int v14 = *((_DWORD *)this + 1);
    uint64_t v11 = (_DWORD *)((char *)this + 4);
    int v12 = v14;
    if (v14 >= v3) {
      return 0;
    }
    void *v6 = a2;
    void *v5 = 0;
    v5[1] = 0;
  }
  void *v8 = v5;
  _DWORD *v11 = v12 + 1;
  return 1;
}

BOOL Phase::DspLayer::VoiceMap::Remove(Phase::DspLayer::VoiceMap *this, uint64_t a2)
{
  uint64_t v2 = (void *)(*((void *)this + 2) + 8 * (int)(*(_DWORD *)this & a2));
  while (1)
  {
    uint64_t v2 = (void *)*v2;
    if (!v2) {
      break;
    }
    if (v2[2] == a2)
    {
      uint64_t v4 = (void *)*v2;
      int v3 = (void *)v2[1];
      if (v3) {
        *int v3 = v4;
      }
      else {
        *(void *)(*((void *)this + 2) + 8 * (int)(*(_DWORD *)this & a2)) = v4;
      }
      if (*v2) {
        *(void *)(*v2 + 8) = v3;
      }
      v2[1] = 0;
      v2[2] = -1;
      *uint64_t v2 = 0;
      --*((_DWORD *)this + 1);
      return v2 != 0;
    }
  }
  return v2 != 0;
}

uint64_t Phase::DspLayer::VoiceMap::Move(Phase::DspLayer::VoiceMap *this, unsigned int a2, unsigned int a3)
{
  if ((a2 & 0x80000000) != 0) {
    return 0;
  }
  if (*((_DWORD *)this + 3) <= (signed int)a2) {
    return 0;
  }
  uint64_t v3 = *(void *)(*((void *)this + 3) + 24 * a2 + 16);
  if (v3 < 0) {
    return 0;
  }
  else {
    return Phase::DspLayer::VoiceMap::Put(this, v3, a3);
  }
}

uint64_t Phase::DspLayer::VoicePool::VoicePool(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  *(void *)a1 = &unk_26D47B6D8;
  *(_DWORD *)(a1 + 8) = (a4 + 3) & 0xFFFFFFFC;
  *(_DWORD *)(a1 + 12) = 0;
  unsigned int v8 = (a5 + 15) & 0xFFFFFFF0;
  signed int v9 = v8 + v8 * ((a4 + 3) >> 2);
  *(_DWORD *)(a1 + 16) = v8;
  *(_DWORD *)(a1 + 2std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = v9;
  *(void *)(a1 + 24) = malloc_type_malloc(v9, 0x4221994CuLL);
  *(void *)(a1 + 32) = a3;
  int v10 = *(_DWORD *)(a1 + 8) + 4;
  *(_DWORD *)(a1 + 4std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = *(_DWORD *)(a1 + 20) / *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 44) = v10;
  *(void *)(a1 + 48) = a2;
  Phase::DspLayer::VoiceMap::VoiceMap((Phase::DspLayer::VoiceMap *)(a1 + 56), v10, 4);
  bzero(*(void **)(a1 + 24), *(int *)(a1 + 20));
  return a1;
}

void Phase::DspLayer::VoicePool::~VoicePool(Phase::DspLayer::VoicePool *this)
{
  *(void *)this = &unk_26D47B6D8;
  if (*((int *)this + 10) >= 1)
  {
    int v2 = 0;
    do
    {
      uint64_t v3 = (void (***)(void))(*((void *)this + 3) + *((int *)this + 4) * (uint64_t)v2);
      (**v3)(v3);
      ++v2;
    }
    while (v2 < *((_DWORD *)this + 10));
  }
  free(*((void **)this + 3));
  free(*((void **)this + 9));
  free(*((void **)this + 10));
}

{
  uint64_t vars8;

  Phase::DspLayer::VoicePool::~VoicePool(this);

  JUMPOUT(0x223C938A0);
}

uint64_t Phase::DspLayer::VoicePool::ExternalCallbackWithMessage(uint64_t result, uint64_t a2, uint64_t *a3, char a4, unsigned int *a5, void *a6)
{
  signed int v9 = a3;
  uint64_t v11 = result;
  switch(a4 & 0xF)
  {
    case 1:
      unsigned int v12 = 0;
      goto LABEL_26;
    case 2:
      signed int v9 = a3 + 1;
      goto LABEL_5;
    case 3:
      uint64_t v13 = *(void *)(result + 32);
      signed int v9 = a3 + 1;
      uint64_t v14 = *a3;
      Phase::DspLayer::VoicePool::SetMessageArguments(0, a5, a6);
      (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *))(v13 + 74928))(*(void *)(v13 + 74936), v13, v11, v14, a2, a5);
LABEL_5:
      unsigned int v12 = 1;
      goto LABEL_26;
    case 4:
      goto LABEL_10;
    case 5:
      uint64_t v15 = *(void *)(result + 32);
      signed int v9 = a3 + 2;
      uint64_t v16 = *a3;
      Phase::DspLayer::VoicePool::SetMessageArguments(0, a5, a6);
      (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *))(v15 + 74928))(*(void *)(v15 + 74936), v15, v11, v16, a2, a5);
      goto LABEL_11;
    case 6:
      uint64_t v17 = *(void *)(result + 32);
      uint64_t v18 = v17 + 74928;
      goto LABEL_9;
    case 7:
      uint64_t v19 = *(void *)(result + 32);
      uint64_t v20 = *a3;
      Phase::DspLayer::VoicePool::SetMessageArguments(0, a5, a6);
      (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *))(v19 + 74928))(*(void *)(v19 + 74936), v19, v11, v20, a2, a5);
      uint64_t v17 = *(void *)(v11 + 32);
      uint64_t v18 = v17 + 74928;
LABEL_9:
      uint64_t v21 = v9[1];
      Phase::DspLayer::VoicePool::SetMessageArguments(1u, a5, a6);
      (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *))v18)(*(void *)(v18 + 8), v17, v11, v21, a2, a5);
LABEL_10:
      v9 += 2;
LABEL_11:
      unsigned int v12 = 2;
      goto LABEL_26;
    case 8:
      goto LABEL_24;
    case 9:
      uint64_t v22 = *(void *)(result + 32);
      signed int v9 = a3 + 3;
      uint64_t v23 = *a3;
      Phase::DspLayer::VoicePool::SetMessageArguments(0, a5, a6);
      (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *))(v22 + 74928))(*(void *)(v22 + 74936), v22, v11, v23, a2, a5);
      goto LABEL_25;
    case 0xA:
      uint64_t v24 = *(void *)(result + 32);
      uint64_t v25 = v24 + 74928;
      goto LABEL_15;
    case 0xB:
      uint64_t v26 = *(void *)(result + 32);
      uint64_t v27 = *a3;
      Phase::DspLayer::VoicePool::SetMessageArguments(0, a5, a6);
      (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *))(v26 + 74928))(*(void *)(v26 + 74936), v26, v11, v27, a2, a5);
      uint64_t v24 = *(void *)(v11 + 32);
      uint64_t v25 = v24 + 74928;
LABEL_15:
      uint64_t v28 = v9[1];
      unsigned int v29 = 1;
      goto LABEL_23;
    case 0xC:
      uint64_t v24 = *(void *)(result + 32);
      uint64_t v25 = v24 + 74928;
      goto LABEL_22;
    case 0xD:
      uint64_t v30 = *(void *)(result + 32);
      uint64_t v31 = v30 + 74928;
      uint64_t v32 = *a3;
      unsigned int v33 = 0;
      goto LABEL_21;
    case 0xE:
      uint64_t v30 = *(void *)(result + 32);
      goto LABEL_20;
    case 0xF:
      uint64_t v34 = *(void *)(result + 32);
      uint64_t v35 = *a3;
      Phase::DspLayer::VoicePool::SetMessageArguments(0, a5, a6);
      (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *))(v34 + 74928))(*(void *)(v34 + 74936), v34, v11, v35, a2, a5);
      uint64_t v30 = *(void *)(v11 + 32);
LABEL_20:
      uint64_t v31 = v30 + 74928;
      uint64_t v32 = v9[1];
      unsigned int v33 = 1;
LABEL_21:
      Phase::DspLayer::VoicePool::SetMessageArguments(v33, a5, a6);
      (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *))v31)(*(void *)(v31 + 8), v30, v11, v32, a2, a5);
      uint64_t v24 = *(void *)(v11 + 32);
      uint64_t v25 = v24 + 74928;
LABEL_22:
      uint64_t v28 = v9[2];
      unsigned int v29 = 2;
LABEL_23:
      Phase::DspLayer::VoicePool::SetMessageArguments(v29, a5, a6);
      (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *))v25)(*(void *)(v25 + 8), v24, v11, v28, a2, a5);
LABEL_24:
      v9 += 3;
LABEL_25:
      unsigned int v12 = 3;
LABEL_26:
      uint64_t v36 = *(void *)(v11 + 32);
      uint64_t v37 = *v9;
      Phase::DspLayer::VoicePool::SetMessageArguments(v12, a5, a6);
      BOOL v39 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *))(v36 + 74928);
      uint64_t v38 = *(void *)(v36 + 74936);
      uint64_t result = v39(v38, v36, v11, v37, a2, a5);
      break;
    default:
      return result;
  }
  return result;
}

unsigned int *Phase::DspLayer::VoicePool::SetMessageArguments(unsigned int a1, unsigned int *a2, void *a3)
{
  uint64_t v3 = *a2;
  if ((int)v3 >= 1)
  {
    uint64_t v4 = a2 + 4;
    unsigned int v5 = a3;
    do
    {
      int v6 = *(v4 - 2);
      switch(v6)
      {
        case 1:
          _DWORD *v4 = *(_DWORD *)(*v5 + 4 * a1);
          break;
        case 2:
          _DWORD *v4 = *(_DWORD *)(*v5 + 4 * a1);
          break;
        case 3:
          *(void *)uint64_t v4 = a3[a1];
          break;
        default:
          _DWORD *v4 = 0;
          break;
      }
      v4 += 4;
      ++v5;
      --v3;
    }
    while (v3);
  }
  return a2;
}

uint64_t Phase::DspLayer::VoicePool::Run(uint64_t this)
{
  int v1 = *(_DWORD *)(this + 12);
  if (v1 >= 1)
  {
    uint64_t v2 = this;
    if (v1 < 5)
    {
      int v3 = 0;
    }
    else
    {
      int v3 = 0;
      unsigned int v4 = *(_DWORD *)(this + 12);
      do
      {
        uint64_t v5 = *(void *)(v2 + 24) + *(int *)(v2 + 16) * (uint64_t)v3;
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)v5 + 64))(v5, *(void *)(v2 + 32), v2, 15);
        ++v3;
        BOOL v6 = v4 > 8;
        v4 -= 4;
      }
      while (v6);
    }
    int v7 = *(uint64_t (**)(void))(*(void *)(*(void *)(v2 + 24) + *(int *)(v2 + 16) * (uint64_t)v3) + 64);
    return v7();
  }
  return this;
}

uint64_t Phase::DspLayer::VoicePool::Play(Phase::DspLayer::VoicePool *this, uint64_t a2)
{
  unsigned int v4 = (Phase::DspLayer::VoicePool *)((char *)this + 56);
  uint64_t v5 = (void *)(*((void *)this + 9) + 8 * (int)(*((_DWORD *)this + 14) & a2));
  do
  {
    uint64_t v5 = (void *)*v5;
    if (!v5)
    {
      int v7 = *((_DWORD *)this + 3);
      goto LABEL_8;
    }
  }
  while (v5[2] != a2);
  signed int v6 = -1431655765 * (((unint64_t)v5 - *((void *)this + 10)) >> 3);
  int v7 = *((_DWORD *)this + 3);
  if (v6 < 0)
  {
LABEL_8:
    if (v7 + 4 >= *((_DWORD *)this + 11)) {
      return 1;
    }
    *((_DWORD *)this + objc_destroyWeak(this + 3) = v7 + 1;
    uint64_t v9 = *((void *)this + 3) + *((int *)this + 4) * (uint64_t)(v7 >> 2);
    (*(void (**)(uint64_t, void, void, uint64_t))(*(void *)v9 + 24))(v9, *((void *)this + 4), v7 & 3, a2);
    Phase::DspLayer::VoiceMap::Put(v4, a2, v7);
    (*(void (**)(uint64_t, void, Phase::DspLayer::VoicePool *, void))(*(void *)v9 + 72))(v9, *((void *)this + 4), this, v7 & 3);
    return 0;
  }
  if (v7 > v6) {
    return 4;
  }
  if (*((_DWORD *)this + 11) <= v6)
  {
    *((_DWORD *)this + objc_destroyWeak(this + 3) = v7 + 1;
    Phase::DspLayer::VoicePool::CopyVoiceState(this, v6, v7);
    signed int v10 = *((_DWORD *)this + 11);
    if (v10 != v6)
    {
      Phase::DspLayer::VoicePool::CopyVoiceState(this, v10, v6);
      signed int v6 = *((_DWORD *)this + 11);
    }
    *((_DWORD *)this + std::__function::__value_func<void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::~__value_func[abi:ne180100](this + 11) = v6 + 1;
    uint64_t v11 = *((void *)this + 3) + *((int *)this + 4) * (uint64_t)(v7 >> 2);
    (*(void (**)(uint64_t, void, Phase::DspLayer::VoicePool *, void))(*(void *)v11 + 88))(v11, *((void *)this + 4), this, v7 & 3);
    return 0;
  }
  return 2;
}

uint64_t Phase::DspLayer::VoicePool::CopyVoiceState(Phase::DspLayer::VoicePool *this, signed int a2, signed int a3)
{
  (*(void (**)(void, void, void, void))(*(void *)(*((void *)this + 3)
                                                                     + *((_DWORD *)this + 4) * (a3 >> 2))
                                                         + 104))(*((void *)this + 3) + *((_DWORD *)this + 4) * (a3 >> 2), *((void *)this + 3) + *((_DWORD *)this + 4) * (a2 >> 2), a2 & 3, a3 & 3);

  return Phase::DspLayer::VoiceMap::Move((Phase::DspLayer::VoicePool *)((char *)this + 56), a2, a3);
}

uint64_t Phase::DspLayer::VoicePool::Stop(Phase::DspLayer::VoicePool *this, uint64_t a2)
{
  int v4 = *((_DWORD *)this + 14);
  int v3 = (Phase::DspLayer::VoicePool *)((char *)this + 56);
  uint64_t v5 = (void *)(*((void *)v3 + 2) + 8 * (int)(v4 & a2));
  while (1)
  {
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      break;
    }
    if (v5[2] == a2)
    {
      signed int v6 = -1431655765 * (((unint64_t)v5 - *((void *)this + 10)) >> 3);
      goto LABEL_6;
    }
  }
  signed int v6 = -1;
LABEL_6:
  if (!Phase::DspLayer::VoiceMap::Remove(v3, a2)) {
    return 2;
  }
  uint64_t v7 = *((void *)this + 3) + *((int *)this + 4) * (uint64_t)(v6 >> 2);
  (*(void (**)(uint64_t, void, Phase::DspLayer::VoicePool *, void))(*(void *)v7 + 96))(v7, *((void *)this + 4), this, v6 & 3);
  signed int v8 = *((_DWORD *)this + 3);
  if (v8 <= v6)
  {
    signed int v9 = *((_DWORD *)this + 11);
    if (v9 <= v6)
    {
      *((_DWORD *)this + std::__function::__value_func<void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::~__value_func[abi:ne180100](this + 11) = v9 + 1;
      goto LABEL_12;
    }
    return 2;
  }
  signed int v9 = v8 - 1;
  *((_DWORD *)this + objc_destroyWeak(this + 3) = v8 - 1;
LABEL_12:
  if (v6 != v9) {
    Phase::DspLayer::VoicePool::CopyVoiceState(this, v9, v6);
  }
  return 0;
}

uint64_t Phase::DspLayer::VoicePool::Pause(Phase::DspLayer::VoicePool *this, uint64_t a2)
{
  int v3 = (void *)(*((void *)this + 9) + 8 * (int)(*((_DWORD *)this + 14) & a2));
  do
  {
    int v3 = (void *)*v3;
    if (!v3) {
      return 2;
    }
  }
  while (v3[2] != a2);
  signed int v4 = -1431655765 * (((unint64_t)v3 - *((void *)this + 10)) >> 3);
  if (v4 < 0) {
    return 2;
  }
  signed int v5 = *((_DWORD *)this + 11);
  if (v5 <= v4) {
    return 5;
  }
  signed int v6 = v5 - 1;
  *((_DWORD *)this + std::__function::__value_func<void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::~__value_func[abi:ne180100](this + 11) = v5 - 1;
  int v7 = *((_DWORD *)this + 4);
  signed int v8 = *((_DWORD *)this + 3) - 1;
  *((_DWORD *)this + objc_destroyWeak(this + 3) = v8;
  uint64_t v9 = *((void *)this + 4);
  uint64_t v10 = *((void *)this + 3) + v7 * (uint64_t)(v4 >> 2);
  (*(void (**)(uint64_t, uint64_t, Phase::DspLayer::VoicePool *, void))(*(void *)v10 + 80))(v10, v9, this, v4 & 3);
  Phase::DspLayer::VoicePool::CopyVoiceState(this, v4, v6);
  if (v8 != v4) {
    Phase::DspLayer::VoicePool::CopyVoiceState(this, v8, v4);
  }
  return 0;
}

uint64_t Phase::DspLayer::VoicePool::SetParameter(Phase::DspLayer::VoicePool *this, uint64_t a2, uint64_t a3, __n128 a4)
{
  signed int v4 = (void *)(*((void *)this + 9) + 8 * (int)(*((_DWORD *)this + 14) & a2));
  while (1)
  {
    signed int v4 = (void *)*v4;
    if (!v4) {
      break;
    }
    if (v4[2] == a2)
    {
      unsigned int v5 = -1431655765 * (((unint64_t)v4 - *((void *)this + 10)) >> 3);
      if ((v5 & 0x80000000) == 0)
      {
        uint64_t v6 = *((void *)this + 3) + *((int *)this + 4) * (uint64_t)(v5 >> 2);
        return (*(uint64_t (**)(uint64_t, uint64_t, void, __n128))(*(void *)v6 + 40))(v6, a3, v5 & 3, a4);
      }
      return 2;
    }
  }
  return 2;
}

uint64_t Phase::DspLayer::VoicePool::AddInput(Phase::DspLayer::VoicePool *this, uint64_t a2, uint64_t a3, __n128 a4)
{
  signed int v4 = (void *)(*((void *)this + 9) + 8 * (int)(*((_DWORD *)this + 14) & a2));
  while (1)
  {
    signed int v4 = (void *)*v4;
    if (!v4) {
      break;
    }
    if (v4[2] == a2)
    {
      unsigned int v5 = -1431655765 * (((unint64_t)v4 - *((void *)this + 10)) >> 3);
      if ((v5 & 0x80000000) == 0)
      {
        uint64_t v6 = *((void *)this + 3) + *((int *)this + 4) * (uint64_t)(v5 >> 2);
        return (*(uint64_t (**)(uint64_t, uint64_t, void, __n128))(*(void *)v6 + 120))(v6, a3, v5 & 3, a4);
      }
      return 2;
    }
  }
  return 2;
}

uint64_t Phase::DspLayer::VoicePool::SetInputGain(Phase::DspLayer::VoicePool *this, uint64_t a2, uint64_t a3, __n128 a4)
{
  signed int v4 = (void *)(*((void *)this + 9) + 8 * (int)(*((_DWORD *)this + 14) & a2));
  while (1)
  {
    signed int v4 = (void *)*v4;
    if (!v4) {
      break;
    }
    if (v4[2] == a2)
    {
      unsigned int v5 = -1431655765 * (((unint64_t)v4 - *((void *)this + 10)) >> 3);
      if ((v5 & 0x80000000) == 0)
      {
        uint64_t v6 = *((void *)this + 3) + *((int *)this + 4) * (uint64_t)(v5 >> 2);
        return (*(uint64_t (**)(uint64_t, uint64_t, void, __n128))(*(void *)v6 + 136))(v6, a3, v5 & 3, a4);
      }
      return 2;
    }
  }
  return 2;
}

uint64_t Phase::DspLayer::VoicePool::RemoveInput(Phase::DspLayer::VoicePool *this, uint64_t a2, uint64_t a3)
{
  int v3 = (void *)(*((void *)this + 9) + 8 * (int)(*((_DWORD *)this + 14) & a2));
  while (1)
  {
    int v3 = (void *)*v3;
    if (!v3) {
      break;
    }
    if (v3[2] == a2)
    {
      unsigned int v4 = -1431655765 * (((unint64_t)v3 - *((void *)this + 10)) >> 3);
      if ((v4 & 0x80000000) == 0)
      {
        uint64_t v5 = *((void *)this + 3) + *((int *)this + 4) * (uint64_t)(v4 >> 2);
        return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v5 + 128))(v5, a3, v4 & 3);
      }
      return 2;
    }
  }
  return 2;
}

uint64_t Phase::DspLayer::VoicePool::ClearInputs(Phase::DspLayer::VoicePool *this, uint64_t a2)
{
  uint64_t v2 = (void *)(*((void *)this + 9) + 8 * (int)(*((_DWORD *)this + 14) & a2));
  while (1)
  {
    uint64_t v2 = (void *)*v2;
    if (!v2) {
      break;
    }
    if (v2[2] == a2)
    {
      unsigned int v3 = -1431655765 * (((unint64_t)v2 - *((void *)this + 10)) >> 3);
      if ((v3 & 0x80000000) == 0)
      {
        uint64_t v4 = *((void *)this + 3) + *((int *)this + 4) * (uint64_t)(v3 >> 2);
        return (*(uint64_t (**)(uint64_t, void))(*(void *)v4 + 152))(v4, v3 & 3);
      }
      return 2;
    }
  }
  return 2;
}

uint64_t Phase::DspLayer::VoicePool::ClearInputsFromAllVoices(uint64_t this)
{
  uint64_t v1 = this;
  int v2 = *(_DWORD *)(this + 12);
  if (v2 >= 1)
  {
    int v3 = 0;
    unsigned int v4 = (v2 + 3) >> 2;
    do
    {
      uint64_t v5 = 0;
      uint64_t v6 = *(void *)(v1 + 24) + *(int *)(v1 + 16) * (uint64_t)v3;
      do
      {
        this = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 152))(v6, v5);
        uint64_t v5 = (v5 + 1);
      }
      while (v5 != 4);
      ++v3;
    }
    while (v3 != v4);
  }
  int v7 = *(_DWORD *)(v1 + 40);
  int v8 = *(_DWORD *)(v1 + 8) - *(_DWORD *)(v1 + 44);
  int v9 = v8 + 7;
  int v10 = v8 + 10;
  if (v9 >= 0) {
    int v10 = v9;
  }
  int v11 = v7 - (v10 >> 2);
  if (v11 < v7)
  {
    do
    {
      uint64_t v12 = 0;
      uint64_t v13 = *(void *)(v1 + 24) + *(int *)(v1 + 16) * (uint64_t)v11;
      do
      {
        this = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v13 + 152))(v13, v12);
        uint64_t v12 = (v12 + 1);
      }
      while (v12 != 4);
      ++v11;
    }
    while (v11 < *(_DWORD *)(v1 + 40));
  }
  return this;
}

uint64_t Phase::DspLayer::VoicePool::SetOutput(Phase::DspLayer::VoicePool *this, uint64_t a2, uint64_t a3)
{
  int v3 = (void *)(*((void *)this + 9) + 8 * (int)(*((_DWORD *)this + 14) & a2));
  while (1)
  {
    int v3 = (void *)*v3;
    if (!v3) {
      break;
    }
    if (v3[2] == a2)
    {
      unsigned int v4 = -1431655765 * (((unint64_t)v3 - *((void *)this + 10)) >> 3);
      if ((v4 & 0x80000000) == 0)
      {
        uint64_t v5 = *((void *)this + 3) + *((int *)this + 4) * (uint64_t)(v4 >> 2);
        return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v5 + 176))(v5, a3, v4 & 3);
      }
      return 2;
    }
  }
  return 2;
}

uint64_t Phase::DspLayer::VoicePool::GetBuffer@<X0>(uint64_t this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v4 = (void *)(*(void *)(this + 72) + 8 * (int)(*(_DWORD *)(this + 56) & a2));
  while (1)
  {
    unsigned int v4 = (void *)*v4;
    if (!v4) {
      break;
    }
    if (v4[2] == a2)
    {
      unsigned int v5 = -1431655765 * (((unint64_t)v4 - *(void *)(this + 80)) >> 3);
      if ((v5 & 0x80000000) == 0)
      {
        uint64_t v6 = *(void *)(this + 24) + *(int *)(this + 16) * (uint64_t)(v5 >> 2);
        return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v6 + 184))(v6, a3, v5 & 3);
      }
      break;
    }
  }
  *(_DWORD *)a4 = 10;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = -1;
  return this;
}

uint64_t Phase::DspLayer::VoicePool::SetBuffer(Phase::DspLayer::VoicePool *this, uint64_t a2, uint64_t a3, void *a4)
{
  unsigned int v4 = (void *)(*((void *)this + 9) + 8 * (int)(*((_DWORD *)this + 14) & a2));
  while (1)
  {
    unsigned int v4 = (void *)*v4;
    if (!v4) {
      break;
    }
    if (v4[2] == a2)
    {
      unsigned int v5 = -1431655765 * (((unint64_t)v4 - *((void *)this + 10)) >> 3);
      if ((v5 & 0x80000000) == 0)
      {
        uint64_t v6 = *((void *)this + 3) + *((int *)this + 4) * (uint64_t)(v5 >> 2);
        return (*(uint64_t (**)(uint64_t, uint64_t, void, void *))(*(void *)v6 + 192))(v6, a3, v5 & 3, a4);
      }
      return 2;
    }
  }
  return 2;
}

uint64_t Phase::DspLayer::VoicePool::UpdateParameters(Phase::DspLayer::VoicePool *this, uint64_t a2)
{
  int v2 = (void *)(*((void *)this + 9) + 8 * (int)(*((_DWORD *)this + 14) & a2));
  while (1)
  {
    int v2 = (void *)*v2;
    if (!v2) {
      break;
    }
    if (v2[2] == a2)
    {
      unsigned int v3 = -1431655765 * (((unint64_t)v2 - *((void *)this + 10)) >> 3);
      if ((v3 & 0x80000000) == 0)
      {
        uint64_t v4 = *((void *)this + 4);
        uint64_t v5 = *((void *)this + 3) + *((int *)this + 4) * (uint64_t)(v3 >> 2);
        (*(void (**)(uint64_t, uint64_t, void))(*(void *)v5 + 56))(v5, v4, v3 & 3);
        return 0;
      }
      return 2;
    }
  }
  return 2;
}

uint64_t Phase::Controller::VoicePoolEntry::VoicePoolEntry(uint64_t a1, char *a2, int a3, uint64_t a4, uint64_t a5)
{
  std::string::basic_string[abi:ne180100]<0>((void *)a1, a2);
  if (a2 && (unsigned int v10 = *a2, *a2))
  {
    int v11 = (unsigned __int8 *)(a2 + 1);
    uint64_t v12 = 0xCBF29CE484222325;
    do
    {
      uint64_t v12 = 0x100000001B3 * (v12 ^ v10);
      unsigned int v13 = *v11++;
      unsigned int v10 = v13;
    }
    while (v13);
  }
  else
  {
    uint64_t v12 = 0;
  }
  *(_OWORD *)(a1 + 32) = 0u;
  *(void *)(a1 + 24) = v12;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 8std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = 0u;
  *(void *)(a1 + 96) = 0;
  std::__function::__value_func<Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::__value_func[abi:ne180100](a1 + 104, a5);
  *(void *)(a1 + 136) = a4;
  *(_DWORD *)(a1 + 144) = a3;
  return a1;
}

void sub_222097450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  a10 = (void **)(v10 + 80);
  std::vector<Phase::Controller::VoicePoolBufferEntry>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = (void **)(v10 + 56);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  if (*(char *)(v10 + 23) < 0) {
    operator delete(*(void **)v10);
  }
  _Unwind_Resume(a1);
}

void Phase::Controller::VoicePoolEntry::~VoicePoolEntry(void **this)
{
  free(this[17]);
  std::__function::__value_func<Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::~__value_func[abi:ne180100](this + 13);
  int v2 = this + 10;
  std::vector<Phase::Controller::VoicePoolBufferEntry>::__destroy_vector::operator()[abi:ne180100](&v2);
  int v2 = this + 7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  int v2 = this + 4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

uint64_t Phase::Controller::VoicePoolEntry::AddInput(uint64_t *a1, long long *a2)
{
  unsigned int v3 = a1 + 4;
  unint64_t v4 = a1[5];
  if (v4 >= a1[6])
  {
    uint64_t result = std::vector<std::string>::__push_back_slow_path<std::string const&>(v3, a2);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v3, a2);
    uint64_t result = v4 + 24;
  }
  a1[5] = result;
  return result;
}

uint64_t Phase::Controller::VoicePoolEntry::AddOutput(uint64_t *a1, long long *a2)
{
  unsigned int v3 = a1 + 7;
  unint64_t v4 = a1[8];
  if (v4 >= a1[9])
  {
    uint64_t result = std::vector<std::string>::__push_back_slow_path<std::string const&>(v3, a2);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v3, a2);
    uint64_t result = v4 + 24;
  }
  a1[8] = result;
  return result;
}

void Phase::Controller::VoicePoolEntry::AddBuffer(int64x2_t *a1, int a2, uint64_t a3, int a4, int a5)
{
  int v7 = a1 + 5;
  int v8 = a2;
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string __p = *(std::string *)a3;
  }
  int v10 = a4;
  int v11 = a5;
  std::vector<Phase::Controller::VoicePoolBufferEntry>::emplace_back<Phase::Controller::VoicePoolBufferEntry>(v7, (uint64_t)&v8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_222097624(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<Phase::Controller::VoicePoolBufferEntry>::emplace_back<Phase::Controller::VoicePoolBufferEntry>(int64x2_t *a1, uint64_t a2)
{
  unint64_t v4 = a1[1].u64[0];
  unint64_t v5 = a1->u64[1];
  if (v5 >= v4)
  {
    unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - a1->i64[0]) >> 3);
    unint64_t v9 = v8 + 1;
    if (v8 + 1 > 0x666666666666666) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v4 - a1->i64[0]) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x333333333333333) {
      unint64_t v9 = 0x666666666666666;
    }
    uint64_t v28 = a1 + 1;
    if (v9 > 0x666666666666666) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v11 = 5 * v9;
    uint64_t v12 = (char *)operator new(40 * v9);
    unsigned int v13 = &v12[40 * v8];
    *(_DWORD *)unsigned int v13 = *(_DWORD *)a2;
    *(_OWORD *)(v13 + 8) = *(_OWORD *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    uint64_t v14 = *(void *)(a2 + 24);
    uint64_t v15 = *(void *)(a2 + 32);
    *(void *)(a2 + 24) = 0;
    *((void *)v13 + objc_destroyWeak(this + 3) = v14;
    *((void *)v13 + 4) = v15;
    int v7 = v13 + 40;
    uint64_t v17 = a1->i64[0];
    unint64_t v16 = a1->u64[1];
    if (v16 == a1->i64[0])
    {
      int64x2_t v22 = vdupq_n_s64(v16);
    }
    else
    {
      uint64_t v18 = 0;
      do
      {
        uint64_t v19 = &v13[v18];
        uint64_t v20 = v16 + v18;
        *((_DWORD *)v19 - 1std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = *(_DWORD *)(v16 + v18 - 40);
        long long v21 = *(_OWORD *)(v16 + v18 - 32);
        *((void *)v19 - 2) = *(void *)(v16 + v18 - 16);
        *((_OWORD *)v19 - 2) = v21;
        *(void *)(v20 - 24) = 0;
        *(void *)(v20 - 16) = 0;
        *(void *)(v20 - 32) = 0;
        *((void *)v19 - 1) = *(void *)(v16 + v18 - 8);
        v18 -= 40;
      }
      while (v16 + v18 != v17);
      int64x2_t v22 = *a1;
      v13 += v18;
    }
    a1->i64[0] = (uint64_t)v13;
    a1->i64[1] = (uint64_t)v7;
    int64x2_t v26 = v22;
    uint64_t v23 = a1[1].i64[0];
    a1[1].i64[0] = (uint64_t)&v12[8 * v11];
    uint64_t v27 = v23;
    uint64_t v25 = v22.i64[0];
    std::__split_buffer<Phase::Controller::VoicePoolBufferEntry>::~__split_buffer((uint64_t)&v25);
  }
  else
  {
    *(_DWORD *)unint64_t v5 = *(_DWORD *)a2;
    long long v6 = *(_OWORD *)(a2 + 8);
    *(void *)(v5 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(v5 + 8) = v6;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(v5 + 32) = *(void *)(a2 + 32);
    int v7 = (char *)(v5 + 40);
  }
  a1->i64[1] = (uint64_t)v7;
  return v7 - 40;
}

uint64_t Phase::Controller::VoicePoolEntry::GetParameter(Phase::Controller::VoicePoolEntry *this, int a2)
{
  uint64_t v2 = *((unsigned int *)this + 36);
  if ((int)v2 <= a2) {
    return 0;
  }
  uint64_t result = *((void *)this + 17);
  if (*(_DWORD *)(result + 56 * a2 + 8) == a2)
  {
    result += 56 * a2;
    return result;
  }
  if ((int)v2 < 1) {
    return 0;
  }
  while (*(_DWORD *)(result + 8) != a2)
  {
    result += 56;
    if (!--v2) {
      return 0;
    }
  }
  return result;
}

void Phase::Controller::VoicePoolEntry::GetIdsOfParameterOfClass(uint64_t a1@<X0>, int a2@<W1>, char **a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  int v4 = *(_DWORD *)(a1 + 144);
  if (v4 >= 1)
  {
    int v7 = 0;
    uint64_t v8 = 0;
    unint64_t v9 = a3 + 2;
    do
    {
      uint64_t v10 = *(void *)(a1 + 136);
      if (*(_DWORD *)(v10 + 56 * v8 + 12) == a2)
      {
        int v11 = *(_DWORD *)(v10 + 56 * v8 + 8);
        if ((unint64_t)v7 >= *v9)
        {
          unsigned int v13 = *a3;
          uint64_t v14 = (v7 - *a3) >> 2;
          unint64_t v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v16 = *v9 - (void)v13;
          if (v16 >> 1 > v15) {
            unint64_t v15 = v16 >> 1;
          }
          if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v17 = v15;
          }
          if (v17)
          {
            uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a3 + 2), v17);
            unsigned int v13 = *a3;
            int v7 = a3[1];
          }
          else
          {
            uint64_t v18 = 0;
          }
          uint64_t v19 = &v18[4 * v14];
          *(_DWORD *)uint64_t v19 = v11;
          uint64_t v12 = v19 + 4;
          while (v7 != v13)
          {
            int v20 = *((_DWORD *)v7 - 1);
            v7 -= 4;
            *((_DWORD *)v19 - 1) = v20;
            v19 -= 4;
          }
          *a3 = v19;
          a3[1] = v12;
          a3[2] = &v18[4 * v17];
          if (v13) {
            operator delete(v13);
          }
        }
        else
        {
          *(_DWORD *)int v7 = v11;
          uint64_t v12 = v7 + 4;
        }
        a3[1] = v12;
        int v4 = *(_DWORD *)(a1 + 144);
        int v7 = v12;
      }
      ++v8;
    }
    while (v8 < v4);
  }
}

void sub_22209798C(_Unwind_Exception *exception_object)
{
  unsigned int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void Phase::Controller::VoicePoolEntry::GetInputBufferIds(Phase::Controller::VoicePoolEntry *this@<X0>, char **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = (_DWORD *)*((void *)this + 10);
  unsigned int v3 = (_DWORD *)*((void *)this + 11);
  if (v2 != v3)
  {
    unint64_t v5 = 0;
    long long v6 = a2 + 2;
    do
    {
      if (v2[8] == 3)
      {
        if ((unint64_t)v5 >= *v6)
        {
          uint64_t v8 = *a2;
          uint64_t v9 = (v5 - *a2) >> 2;
          unint64_t v10 = v9 + 1;
          if ((unint64_t)(v9 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v11 = *v6 - (void)v8;
          if (v11 >> 1 > v10) {
            unint64_t v10 = v11 >> 1;
          }
          if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v12 = v10;
          }
          if (v12)
          {
            unsigned int v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v6, v12);
            uint64_t v8 = *a2;
            unint64_t v5 = a2[1];
          }
          else
          {
            unsigned int v13 = 0;
          }
          uint64_t v14 = &v13[4 * v9];
          *(_DWORD *)uint64_t v14 = *v2;
          int v7 = v14 + 4;
          while (v5 != v8)
          {
            int v15 = *((_DWORD *)v5 - 1);
            v5 -= 4;
            *((_DWORD *)v14 - 1) = v15;
            v14 -= 4;
          }
          *a2 = v14;
          a2[1] = v7;
          a2[2] = &v13[4 * v12];
          if (v8) {
            operator delete(v8);
          }
        }
        else
        {
          *(_DWORD *)unint64_t v5 = *v2;
          int v7 = v5 + 4;
        }
        a2[1] = v7;
        unint64_t v5 = v7;
      }
      v2 += 10;
    }
    while (v2 != v3);
  }
}

void sub_222097AD4(_Unwind_Exception *exception_object)
{
  unsigned int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void Phase::Controller::VoicePoolEntry::GetOutputBufferIds(Phase::Controller::VoicePoolEntry *this@<X0>, char **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = (_DWORD *)*((void *)this + 10);
  unsigned int v3 = (_DWORD *)*((void *)this + 11);
  if (v2 != v3)
  {
    unint64_t v5 = 0;
    long long v6 = a2 + 2;
    do
    {
      if (v2[8] == 2)
      {
        if ((unint64_t)v5 >= *v6)
        {
          uint64_t v8 = *a2;
          uint64_t v9 = (v5 - *a2) >> 2;
          unint64_t v10 = v9 + 1;
          if ((unint64_t)(v9 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v11 = *v6 - (void)v8;
          if (v11 >> 1 > v10) {
            unint64_t v10 = v11 >> 1;
          }
          if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v12 = v10;
          }
          if (v12)
          {
            unsigned int v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v6, v12);
            uint64_t v8 = *a2;
            unint64_t v5 = a2[1];
          }
          else
          {
            unsigned int v13 = 0;
          }
          uint64_t v14 = &v13[4 * v9];
          *(_DWORD *)uint64_t v14 = *v2;
          int v7 = v14 + 4;
          while (v5 != v8)
          {
            int v15 = *((_DWORD *)v5 - 1);
            v5 -= 4;
            *((_DWORD *)v14 - 1) = v15;
            v14 -= 4;
          }
          *a2 = v14;
          a2[1] = v7;
          a2[2] = &v13[4 * v12];
          if (v8) {
            operator delete(v8);
          }
        }
        else
        {
          *(_DWORD *)unint64_t v5 = *v2;
          int v7 = v5 + 4;
        }
        a2[1] = v7;
        unint64_t v5 = v7;
      }
      v2 += 10;
    }
    while (v2 != v3);
  }
}

void sub_222097C1C(_Unwind_Exception *exception_object)
{
  unsigned int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::function<Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::operator()(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = a2;
  int v5 = a3;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, int *))(*(void *)v3 + 48))(v3, &v6, &v5);
}

uint64_t std::__function::__value_func<Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void std::vector<Phase::Controller::VoicePoolBufferEntry>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<Phase::Controller::VoicePoolBufferEntry>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<Phase::Controller::VoicePoolBufferEntry>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 40)
  {
    if (*(char *)(i - 9) < 0) {
      operator delete(*(void **)(i - 32));
    }
  }
  a1[1] = v2;
}

void std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *(void *)(v3 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v3 = v4;
  }
  *(void *)(a1 + 8) = v3 + 24;
}

void sub_222097E2C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<Phase::Controller::VoicePoolBufferEntry>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      uint64_t v4 = v2 - 40;
      *(void *)(a1 + 16) = v2 - 40;
      if (*(char *)(v2 - 9) < 0)
      {
        operator delete(*(void **)(v2 - 32));
        uint64_t v4 = *(void *)(a1 + 16);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void Phase::Controller::VoicePoolRegistry::VoicePoolRegistry(Phase::Controller::VoicePoolRegistry *this)
{
}

void sub_222098084(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::VoicePoolEntry const>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::VoicePoolEntry const>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::VoicePoolEntry const>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::VoicePoolEntry const>>>>::~__hash_table(v2);
  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::~Commandable(v1);
  _Unwind_Resume(a1);
}

void **Phase::Controller::VoicePoolRegistry::AddVoicePoolEntry(Phase::Controller::VoicePoolRegistry *this, const Phase::Controller::VoicePoolEntry *a2)
{
  int v5 = (void *)((char *)a2 + 24);
  uint64_t v3 = (void ***)std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::VoicePoolEntry const>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::VoicePoolEntry const>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::VoicePoolEntry const>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::VoicePoolEntry const>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t *)this + 5, (unint64_t *)a2 + 3, (uint64_t)&std::piecewise_construct, &v5);
  return std::unique_ptr<Phase::Controller::VoicePoolEntry const>::reset[abi:ne180100](v3 + 3, (void **)a2);
}

void sub_2220980FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<Phase::Controller::VoicePoolEntry const>::reset[abi:ne180100]((void ***)va, 0);
  _Unwind_Resume(a1);
}

void Phase::Controller::VoicePoolRegistry::~VoicePoolRegistry(Phase::Controller::VoicePoolRegistry *this)
{
  *(void *)this = &unk_26D47B6F8;
  std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::VoicePoolEntry const>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::VoicePoolEntry const>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::VoicePoolEntry const>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::VoicePoolEntry const>>>>::~__hash_table((uint64_t)this + 40);

  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::~Commandable(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26D47B6F8;
  std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::VoicePoolEntry const>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::VoicePoolEntry const>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::VoicePoolEntry const>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::VoicePoolEntry const>>>>::~__hash_table((uint64_t)this + 40);
  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::~Commandable(this);

  JUMPOUT(0x223C938A0);
}

void *Phase::Controller::VoicePoolRegistry::CreateVoicePoolInstance(uint64_t a1, unint64_t a2, uint64_t a3, int a4)
{
  unint64_t v7 = a2;
  uint64_t result = std::__hash_table<std::__hash_value_type<unsigned long long,int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,int>>>::find<unsigned long long>((void *)(a1 + 40), &v7);
  if (result) {
    return (void *)std::function<Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::operator()(result[3] + 104, a3, a4);
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::VoicePoolEntry const>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::VoicePoolEntry const>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::VoicePoolEntry const>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::VoicePoolEntry const>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::VoicePoolEntry const>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::VoicePoolEntry const>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::VoicePoolEntry const>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::VoicePoolEntry const>>>>::__deallocate_node(a1, *(void ****)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::VoicePoolEntry const>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::VoicePoolEntry const>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::VoicePoolEntry const>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::VoicePoolEntry const>>>>::__deallocate_node(uint64_t a1, void ***a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = *v2;
      std::unique_ptr<Phase::Controller::VoicePoolEntry const>::reset[abi:ne180100](v2 + 3, 0);
      operator delete(v2);
      uint64_t v2 = (void ***)v3;
    }
    while (v3);
  }
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::VoicePoolEntry const>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::VoicePoolEntry const>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::VoicePoolEntry const>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::VoicePoolEntry const>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t *a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = a1[1];
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    unint64_t v10 = *(void ***)(*a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  unsigned int v13 = a1 + 2;
  uint64_t i = operator new(0x20uLL);
  *uint64_t i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  float v14 = (float)(unint64_t)(a1[3] + 1);
  float v15 = *((float *)a1 + 8);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      int8x8_t prime = (int8x8_t)v18;
    }
    else {
      int8x8_t prime = (int8x8_t)v17;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v8 = a1[1];
    }
    if (*(void *)&prime > v8) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v8)
    {
      unint64_t v26 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v8 < 3 || (uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        unint64_t v26 = std::__next_prime(v26);
      }
      else
      {
        uint64_t v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2) {
          unint64_t v26 = v28;
        }
      }
      if (*(void *)&prime <= v26) {
        int8x8_t prime = (int8x8_t)v26;
      }
      if (*(void *)&prime >= v8)
      {
        unint64_t v8 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          int v20 = operator new(8 * *(void *)&prime);
          long long v21 = (void *)*a1;
          *a1 = (uint64_t)v20;
          if (v21) {
            operator delete(v21);
          }
          uint64_t v22 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(void *)(*a1 + 8 * v22++) = 0;
          while (*(void *)&prime != v22);
          uint64_t v23 = (void *)*v13;
          if (*v13)
          {
            unint64_t v24 = v23[1];
            uint8x8_t v25 = (uint8x8_t)vcnt_s8(prime);
            v25.i16[0] = vaddlv_u8(v25);
            if (v25.u32[0] > 1uLL)
            {
              if (v24 >= *(void *)&prime) {
                v24 %= *(void *)&prime;
              }
            }
            else
            {
              v24 &= *(void *)&prime - 1;
            }
            *(void *)(*a1 + 8 * v24) = v13;
            unsigned int v29 = (void *)*v23;
            if (*v23)
            {
              do
              {
                unint64_t v30 = v29[1];
                if (v25.u32[0] > 1uLL)
                {
                  if (v30 >= *(void *)&prime) {
                    v30 %= *(void *)&prime;
                  }
                }
                else
                {
                  v30 &= *(void *)&prime - 1;
                }
                if (v30 != v24)
                {
                  if (!*(void *)(*a1 + 8 * v30))
                  {
                    *(void *)(*a1 + 8 * v3std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = v23;
                    goto LABEL_55;
                  }
                  *uint64_t v23 = *v29;
                  void *v29 = **(void **)(*a1 + 8 * v30);
                  **(void **)(*a1 + 8 * v3std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = v29;
                  unsigned int v29 = v23;
                }
                unint64_t v30 = v24;
LABEL_55:
                uint64_t v23 = v29;
                unsigned int v29 = (void *)*v29;
                unint64_t v24 = v30;
              }
              while (v29);
            }
          }
          unint64_t v8 = (unint64_t)prime;
          goto LABEL_59;
        }
        uint64_t v35 = (void *)*a1;
        *a1 = 0;
        if (v35) {
          operator delete(v35);
        }
        unint64_t v8 = 0;
        a1[1] = 0;
      }
    }
LABEL_59:
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v31 = *a1;
  uint64_t v32 = *(void **)(*a1 + 8 * v4);
  if (v32)
  {
    *uint64_t i = *v32;
LABEL_72:
    *uint64_t v32 = i;
    goto LABEL_73;
  }
  *uint64_t i = *v13;
  void *v13 = i;
  *(void *)(v31 + 8 * v4) = v13;
  if (*i)
  {
    unint64_t v33 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v33 >= v8) {
        v33 %= v8;
      }
    }
    else
    {
      v33 &= v8 - 1;
    }
    uint64_t v32 = (void *)(*a1 + 8 * v33);
    goto LABEL_72;
  }
LABEL_73:
  ++a1[3];
  return i;
}

void sub_222098694(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::VoicePoolEntry const>>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::VoicePoolEntry const>>,void *>>>::operator()[abi:ne180100](char a1, void ***__p)
{
  if (a1) {
    std::unique_ptr<Phase::Controller::VoicePoolEntry const>::reset[abi:ne180100](__p + 3, 0);
  }
  if (__p)
  {
    operator delete(__p);
  }
}

void **std::unique_ptr<Phase::Controller::VoicePoolEntry const>::reset[abi:ne180100](void ***a1, void **a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    Phase::Controller::VoicePoolEntry::~VoicePoolEntry(result);
    JUMPOUT(0x223C938A0);
  }
  return result;
}

void Phase::Controller::DVM::WaterProcedure::WaterProcedure(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  *(void *)a1 = &unk_26D47B728;
  *(void *)(a1 + 8) = a2;
  *(_OWORD *)(a1 + 16) = xmmword_2220E87F0;
  *(_OWORD *)(a1 + 32) = xmmword_2220E8800;
  *(_OWORD *)(a1 + 48) = xmmword_2220E8810;
  *(void *)(a1 + 64) = 0x43FA00003F800000;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(_DWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 132) = a3;
  *(void *)(a1 + 136) = a4;
  *(void *)(a1 + 16std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = 0;
  *(_OWORD *)(a1 + 144) = xmmword_2220A4EB0;
  *(_OWORD *)(a1 + 168) = xmmword_2220E8820;
  *(void *)(a1 + 184) = 1065353216;
  *(_DWORD *)(a1 + 192) = 1065353216;
  *(unsigned char *)(a1 + 20std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a1 + 208) = 0;
  *(_DWORD *)(a1 + 216) = 0;
  operator new();
}

void sub_2220989B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  MEMORY[0x223C938A0](v19, 0x10F1C408EBD29CELL);
  _Unwind_Resume(a1);
}

void Phase::Controller::DVM::WaterProcedure::~WaterProcedure(Phase::Controller::DVM::WaterProcedure *this)
{
  *(void *)this = &unk_26D47B728;
  Phase::DspLayer::VoiceEngine::RemovePool(*((void *)this + 10), *((void *)this + 11));
  Phase::DspLayer::VoiceEngine::RemovePool(*((void *)this + 10), *((void *)this + 12));
  Phase::DspLayer::VoiceEngine::RemovePool(*((void *)this + 10), *((void *)this + 13));
  uint64_t v2 = *((void *)this + 11);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 12);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 13);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  int v5 = (Phase::DspLayer::VoiceEngine *)*((void *)this + 10);
  if (v5)
  {
    Phase::DspLayer::VoiceEngine::~VoiceEngine(v5);
    MEMORY[0x223C938A0]();
  }
}

{
  uint64_t vars8;

  Phase::Controller::DVM::WaterProcedure::~WaterProcedure(this);

  JUMPOUT(0x223C938A0);
}

uint64_t Phase::Controller::DVM::WaterProcedure::GetNumOutputs(Phase::Controller::DVM::WaterProcedure *this)
{
  return 1;
}

uint64_t Phase::Controller::DVM::WaterProcedure::GetChannelsForBus(uint64_t a1, int a2)
{
  return *(void *)(*(void *)(a1 + 80) + 8 * a2 + 64);
}

uint64_t Phase::Controller::DVM::WaterProcedure::SetParameter(Phase::Controller::DVM::WaterProcedure *this, int a2, float a3)
{
  switch(a2)
  {
    case 0:
      uint64_t result = 0;
      *((float *)this + 4) = a3;
      break;
    case 1:
      uint64_t result = 0;
      *((float *)this + std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear(this + 5) = a3;
      break;
    case 2:
      uint64_t result = 0;
      *((float *)this + 6) = a3;
      break;
    case 3:
      uint64_t result = 0;
      *((float *)this + 7) = a3;
      break;
    case 4:
      uint64_t result = 0;
      *((float *)this + 8) = a3;
      break;
    case 5:
      uint64_t result = 0;
      *((float *)this + 9) = a3;
      break;
    case 6:
      uint64_t result = 0;
      *((float *)this + 1std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = a3;
      break;
    case 7:
      uint64_t result = 0;
      *((float *)this + std::__function::__value_func<void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::~__value_func[abi:ne180100](this + 11) = a3;
      break;
    case 8:
      uint64_t result = 0;
      *((float *)this + 12) = a3;
      break;
    case 9:
      uint64_t result = 0;
      *((float *)this + 1objc_destroyWeak(this + 3) = a3;
      break;
    case 10:
      uint64_t result = 0;
      *((float *)this + 14) = a3;
      break;
    case 11:
      uint64_t result = 0;
      *((float *)this + 1std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear(this + 5) = a3;
      break;
    case 12:
      uint64_t result = 0;
      *((float *)this + 16) = a3;
      break;
    case 13:
      uint64_t result = 0;
      *((float *)this + 17) = a3;
      break;
    case 14:
      uint64_t result = 0;
      *((float *)this + 18) = a3;
      break;
    default:
      uint64_t result = 9;
      break;
  }
  return result;
}

uint64_t Phase::Controller::DVM::WaterProcedure::SetOutput(uint64_t a1, int a2, int a3, int a4)
{
  if (a2) {
    return 8;
  }
  uint64_t result = 0;
  *(_DWORD *)(a1 + 116) = a3;
  *(_DWORD *)(a1 + 12std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = a4;
  return result;
}

double Phase::Controller::DVM::WaterProcedure::UpdateParameters(Phase::Controller::DVM::WaterProcedure *this)
{
  float v1 = 1000.0 / *((float *)this + 5);
  *((float *)this + 42) = (float)(unint64_t)*((float *)this + 4);
  *((float *)this + 4objc_destroyWeak(this + 3) = v1;
  double result = *(double *)((char *)this + 116);
  *(double *)((char *)this + 124) = result;
  return result;
}

uint64_t Phase::Controller::DVM::WaterProcedure::Run(Phase::Controller::DVM::WaterProcedure *this)
{
  uint64_t v49[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 10);
  if (*(void *)(v2 + 16) == *((void *)this + 26))
  {
    unint64_t v3 = *((void *)this + 19);
    unint64_t v4 = *((void *)this + 18) ^ (*((void *)this + 18) << 23);
    unint64_t v5 = (v3 >> 26) ^ (v4 >> 17) ^ v3 ^ v4;
    *((void *)this + 18) = v3;
    *((void *)this + std::__function::__value_func<void ()(Phase::SpatialModeler::PriorityQueueEntry &)>::~__value_func[abi:ne180100](this + 19) = v5;
    float v6 = logf((float)((float)(v5 + v3) * -5.421e-20) + 1.0);
    float v7 = *((float *)this + 43);
    float v8 = *((float *)this + 6);
    if (!Phase::DspLayer::VoicePool::Play(*((Phase::DspLayer::VoicePool **)this + 11), *((int *)this + 54)))
    {
      float v10 = fmaxf(fminf((float)-v6 / v7, v8 / 1000.0), 0.0001);
      float v11 = v10 / sqrtf((float)(v10 * 0.5) * 45244.0);
      v9.n128_f64[0] = v11;
      Phase::DspLayer::VoicePool::SetParameter(*((Phase::DspLayer::VoicePool **)this + 11), *((int *)this + 54), 0, v9);
      v12.n128_f64[0] = *((float *)this + 7);
      Phase::DspLayer::VoicePool::SetParameter(*((Phase::DspLayer::VoicePool **)this + 11), *((int *)this + 54), 1, v12);
      float v13 = *((float *)this + 47);
      float v14 = *((float *)this + 48);
      if (*((unsigned char *)this + 200))
      {
        *((unsigned char *)this + 20std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = 0;
        float v15 = *((float *)this + 49);
      }
      else
      {
        unint64_t v16 = *((void *)this + 18);
        unint64_t v17 = *((void *)this + 19);
        do
        {
          do
          {
            v16 ^= (v17 >> 26) ^ ((v16 ^ (v16 << 23)) >> 17) ^ v17 ^ (v16 << 23);
            float v18 = (float)(v16 + v17) * 5.421e-20;
            v17 ^= ((v17 ^ (v17 << 23)) >> 17) ^ (v16 >> 26) ^ (v17 << 23) ^ v16;
            float v19 = (float)(v18 * 2.0) + -1.0;
            float v20 = (float)((float)((float)(v17 + v16) * 5.421e-20) * 2.0) + -1.0;
            float v21 = (float)(v20 * v20) + (float)(v19 * v19);
          }
          while (v21 > 1.0);
        }
        while (v21 == 0.0);
        *((void *)this + 18) = v16;
        *((void *)this + std::__function::__value_func<void ()(Phase::SpatialModeler::PriorityQueueEntry &)>::~__value_func[abi:ne180100](this + 19) = v17;
        float v22 = sqrtf((float)(logf((float)(v20 * v20) + (float)(v19 * v19)) * -2.0) / v21);
        *((float *)this + 49) = v20 * v22;
        *((unsigned char *)this + 20std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = 1;
        float v15 = v19 * v22;
      }
      float v23 = v13 + (float)(v15 * v14);
      v24.n128_f32[0] = powf(v10 / (float)(*((float *)this + 6) / 1000.0), *((float *)this + 8));
      if (v23 < 0.0) {
        float v25 = -v24.n128_f32[0];
      }
      else {
        float v25 = v24.n128_f32[0];
      }
      v24.n128_f64[0] = (float)(v25 * *((float *)this + 9));
      Phase::DspLayer::VoicePool::SetParameter(*((Phase::DspLayer::VoicePool **)this + 11), *((int *)this + 54), 2, v24);
      Phase::DspLayer::VoicePool::SetOutput(*((Phase::DspLayer::VoicePool **)this + 11), *((int *)this + 54), 0);
      v26.n128_u32[0] = 1.0;
      Phase::DspLayer::VoicePool::AddInput(*((Phase::DspLayer::VoicePool **)this + 13), 0, 0, v26);
      Phase::DspLayer::VoicePool::UpdateParameters(*((Phase::DspLayer::VoicePool **)this + 11), *((int *)this + 54));
      Phase::DspLayer::VoicePool::UpdateParameters(*((Phase::DspLayer::VoicePool **)this + 13), 0);
      uint8x8_t v27 = (double *)*((void *)this + 10);
      uint64_t v28 = *((void *)this + 11);
      unint64_t v29 = *((unsigned int *)this + 54) | ((unint64_t)*((unsigned int *)this + 28) << 32);
      v49[0] = &unk_26D47B778;
      v49[1] = v29;
      void v49[2] = this;
      v49[3] = v49;
      float v30 = *v27;
      Phase::DspLayer::VoiceEngine::ScheduleAction((uint64_t)v27, (uint64_t)v49, vcvtps_u32_f32(v11 * v30), v28);
      std::__function::__value_func<void ()(Phase::DspLayer::VoiceEngine *,long long,void *)>::~__value_func[abi:ne180100](v49);
      uint64_t v31 = (double *)*((void *)this + 10);
      int v32 = *((_DWORD *)this + 54);
      int v33 = *((_DWORD *)this + 28);
      uint64_t v34 = operator new(0x28uLL);
      *(void *)uint64_t v34 = &unk_26D47B7C0;
      void v34[2] = v32;
      v34[3] = v33 + 1;
      *((void *)v34 + 2) = this;
      *((float *)v34 + 6) = v10;
      *((float *)v34 + 7) = v25;
      *((float *)v34 + 8) = v11;
      v48[3] = v34;
      unint64_t v35 = *((void *)this + 19);
      unint64_t v36 = *((void *)this + 18) ^ (*((void *)this + 18) << 23);
      unint64_t v37 = (v35 >> 26) ^ (v36 >> 17) ^ v35 ^ v36;
      *((void *)this + 18) = v35;
      *((void *)this + std::__function::__value_func<void ()(Phase::SpatialModeler::PriorityQueueEntry &)>::~__value_func[abi:ne180100](this + 19) = v37;
      float v38 = logf((float)((float)(v37 + v35) * -5.421e-20) + 1.0);
      float v39 = *v31;
      Phase::DspLayer::VoiceEngine::ScheduleAction((uint64_t)v31, (uint64_t)v48, vcvtps_u32_f32((float)(v11 * (float)(1.0 - (float)(v38 / *((float *)this + 44)))) * v39), *((void *)this + 12));
      std::__function::__value_func<void ()(Phase::DspLayer::VoiceEngine *,long long,void *)>::~__value_func[abi:ne180100](v48);
    }
    int v40 = *((_DWORD *)this + 33);
    *((_DWORD *)this + 28) = (*((_DWORD *)this + 28) + 2) % (2 * v40);
    uint64_t v2 = *((void *)this + 10);
    float v41 = *(double *)v2;
    unint64_t v42 = *((void *)this + 19);
    unint64_t v43 = *((void *)this + 18) ^ (*((void *)this + 18) << 23);
    unint64_t v44 = (v42 >> 26) ^ (v43 >> 17) ^ v42 ^ v43;
    *((void *)this + 18) = v42;
    *((void *)this + std::__function::__value_func<void ()(Phase::SpatialModeler::PriorityQueueEntry &)>::~__value_func[abi:ne180100](this + 19) = v44;
    *((void *)this + 26) = (unint64_t)(float)((float)*((unint64_t *)this + 26)
                                                     + (float)(unint64_t)fmaxf(ceilf((float)((float)-logf((float)((float)(v44 + v42) * -5.421e-20) + 1.0)/ *((float *)this + 42))* v41), 1.0));
    *((_DWORD *)this + 54) = (*((_DWORD *)this + 54) + 1) % v40;
  }
  uint64_t result = Phase::DspLayer::VoiceEngine::Run((uint64_t **)v2);
  float32x4_t v46 = *(float **)(*((void *)this + 10) + 64);
  float v47 = *((float *)this + 14) * *v46;
  *float32x4_t v46 = v47;
  *(float *)(*(void *)(*((void *)this + 1) + 8 * *((int *)this + 31) + 64) + 4 * *((int *)this + 32)) = v47;
  return result;
}

void sub_2220991A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(Phase::DspLayer::VoiceEngine *,long long,void *)>::~__value_func[abi:ne180100](va);
  _Unwind_Resume(a1);
}

void std::__function::__func<Phase::Controller::DVM::WaterProcedure::Run(unsigned long long)::$_0,std::allocator<Phase::Controller::DVM::WaterProcedure::Run(unsigned long long)::$_0>,void ()(Phase::DspLayer::VoiceEngine *,long long,void *)>::~__func()
{
}

__n128 std::__function::__func<Phase::Controller::DVM::WaterProcedure::Run(unsigned long long)::$_0,std::allocator<Phase::Controller::DVM::WaterProcedure::Run(unsigned long long)::$_0>,void ()(Phase::DspLayer::VoiceEngine *,long long,void *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26D47B778;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<Phase::Controller::DVM::WaterProcedure::Run(unsigned long long)::$_0,std::allocator<Phase::Controller::DVM::WaterProcedure::Run(unsigned long long)::$_0>,void ()(Phase::DspLayer::VoiceEngine *,long long,void *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D47B778;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<Phase::Controller::DVM::WaterProcedure::Run(unsigned long long)::$_0,std::allocator<Phase::Controller::DVM::WaterProcedure::Run(unsigned long long)::$_0>,void ()(Phase::DspLayer::VoiceEngine *,long long,void *)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, Phase::DspLayer::VoicePool **a4)
{
  uint64_t v4 = *(void *)(a1 + 16);
  Phase::DspLayer::VoicePool::Stop(*a4, *(int *)(a1 + 8));
  Phase::DspLayer::VoicePool::RemoveInput(*(Phase::DspLayer::VoicePool **)(v4 + 104), 0, 0);
  unint64_t v5 = *(Phase::DspLayer::VoicePool **)(v4 + 104);

  return Phase::DspLayer::VoicePool::UpdateParameters(v5, 0);
}

void std::__function::__func<Phase::Controller::DVM::WaterProcedure::Run(unsigned long long)::$_1,std::allocator<Phase::Controller::DVM::WaterProcedure::Run(unsigned long long)::$_1>,void ()(Phase::DspLayer::VoiceEngine *,long long,void *)>::~__func()
{
}

__n128 std::__function::__func<Phase::Controller::DVM::WaterProcedure::Run(unsigned long long)::$_1,std::allocator<Phase::Controller::DVM::WaterProcedure::Run(unsigned long long)::$_1>,void ()(Phase::DspLayer::VoiceEngine *,long long,void *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_26D47B7C0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<Phase::Controller::DVM::WaterProcedure::Run(unsigned long long)::$_1,std::allocator<Phase::Controller::DVM::WaterProcedure::Run(unsigned long long)::$_1>,void ()(Phase::DspLayer::VoiceEngine *,long long,void *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D47B7C0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void *std::__function::__func<Phase::Controller::DVM::WaterProcedure::Run(unsigned long long)::$_1,std::allocator<Phase::Controller::DVM::WaterProcedure::Run(unsigned long long)::$_1>,void ()(Phase::DspLayer::VoiceEngine *,long long,void *)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, Phase::DspLayer::VoicePool **a4)
{
  v19[4] = *MEMORY[0x263EF8340];
  unint64_t v5 = *a4;
  uint64_t v6 = *(void *)(a1 + 16);
  __n128 result = (void *)Phase::DspLayer::VoicePool::Play(*(Phase::DspLayer::VoicePool **)(v6 + 96), *(int *)(a1 + 8));
  if (!result)
  {
    v8.n128_f64[0] = (float)(*(float *)(a1 + 24) * 0.5);
    Phase::DspLayer::VoicePool::SetParameter(v5, *(int *)(a1 + 8), 0, v8);
    v9.n128_f64[0] = (float)(fabsf(*(float *)(a1 + 28)) * *(float *)(v6 + 48));
    Phase::DspLayer::VoicePool::SetParameter(v5, *(int *)(a1 + 8), 3, v9);
    v10.n128_f64[0] = *(float *)(v6 + 40);
    Phase::DspLayer::VoicePool::SetParameter(v5, *(int *)(a1 + 8), 2, v10);
    v11.n128_f64[0] = *(float *)(v6 + 44);
    Phase::DspLayer::VoicePool::SetParameter(v5, *(int *)(a1 + 8), 1, v11);
    v12.n128_f64[0] = (float)(*(float *)(a1 + 32) * 50.0);
    Phase::DspLayer::VoicePool::SetParameter(v5, *(int *)(a1 + 8), 4, v12);
    Phase::DspLayer::VoicePool::SetOutput(v5, *(int *)(a1 + 8), 0);
    v13.n128_u32[0] = 1.0;
    Phase::DspLayer::VoicePool::AddInput(*(Phase::DspLayer::VoicePool **)(v6 + 104), 0, 0, v13);
    Phase::DspLayer::VoicePool::UpdateParameters(v5, *(int *)(a1 + 8));
    Phase::DspLayer::VoicePool::UpdateParameters(*(Phase::DspLayer::VoicePool **)(v6 + 104), 0);
    float v14 = *(double **)(v6 + 80);
    int v15 = *(_DWORD *)(a1 + 8);
    int v16 = *(_DWORD *)(a1 + 12);
    unint64_t v17 = operator new(0x20uLL);
    *(void *)unint64_t v17 = &unk_26D47B808;
    v17[2] = v15;
    *((void *)v17 + 2) = v6;
    float v17[6] = v16;
    void v19[3] = v17;
    float v18 = *v14;
    Phase::DspLayer::VoiceEngine::ScheduleAction((uint64_t)v14, (uint64_t)v19, vcvtps_u32_f32((float)(*(float *)(a1 + 32) * 50.0) * v18), (uint64_t)v5);
    return std::__function::__value_func<void ()(Phase::DspLayer::VoiceEngine *,long long,void *)>::~__value_func[abi:ne180100](v19);
  }
  return result;
}

void sub_222099580(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(Phase::DspLayer::VoiceEngine *,long long,void *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<Phase::Controller::DVM::WaterProcedure::Run(unsigned long long)::$_1::operator() const(Phase::DspLayer::VoiceEngine *,long long,void *)::{lambda(Phase::DspLayer::VoiceEngine *,long long,void *)#1},std::allocator<Phase::Controller::DVM::WaterProcedure::Run(unsigned long long)::$_1::operator() const(Phase::DspLayer::VoiceEngine *,long long,void *)::{lambda(Phase::DspLayer::VoiceEngine *,long long,void *)#1}>,void ()(Phase::DspLayer::VoiceEngine *,long long,void *)>::~__func()
{
}

__n128 std::__function::__func<Phase::Controller::DVM::WaterProcedure::Run(unsigned long long)::$_1::operator() const(Phase::DspLayer::VoiceEngine *,long long,void *)::{lambda(Phase::DspLayer::VoiceEngine *,long long,void *)#1},std::allocator<Phase::Controller::DVM::WaterProcedure::Run(unsigned long long)::$_1::operator() const(Phase::DspLayer::VoiceEngine *,long long,void *)::{lambda(Phase::DspLayer::VoiceEngine *,long long,void *)#1}>,void ()(Phase::DspLayer::VoiceEngine *,long long,void *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26D47B808;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + objc_destroyWeak(this + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<Phase::Controller::DVM::WaterProcedure::Run(unsigned long long)::$_1::operator() const(Phase::DspLayer::VoiceEngine *,long long,void *)::{lambda(Phase::DspLayer::VoiceEngine *,long long,void *)#1},std::allocator<Phase::Controller::DVM::WaterProcedure::Run(unsigned long long)::$_1::operator() const(Phase::DspLayer::VoiceEngine *,long long,void *)::{lambda(Phase::DspLayer::VoiceEngine *,long long,void *)#1}>,void ()(Phase::DspLayer::VoiceEngine *,long long,void *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D47B808;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<Phase::Controller::DVM::WaterProcedure::Run(unsigned long long)::$_1::operator() const(Phase::DspLayer::VoiceEngine *,long long,void *)::{lambda(Phase::DspLayer::VoiceEngine *,long long,void *)#1},std::allocator<Phase::Controller::DVM::WaterProcedure::Run(unsigned long long)::$_1::operator() const(Phase::DspLayer::VoiceEngine *,long long,void *)::{lambda(Phase::DspLayer::VoiceEngine *,long long,void *)#1}>,void ()(Phase::DspLayer::VoiceEngine *,long long,void *)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, Phase::DspLayer::VoicePool **a4)
{
  uint64_t v4 = *(void *)(a1 + 16);
  Phase::DspLayer::VoicePool::Stop(*a4, *(int *)(a1 + 8));
  Phase::DspLayer::VoicePool::RemoveInput(*(Phase::DspLayer::VoicePool **)(v4 + 104), 0, 0);
  unint64_t v5 = *(Phase::DspLayer::VoicePool **)(v4 + 104);

  return Phase::DspLayer::VoicePool::UpdateParameters(v5, 0);
}

void Phase::SpatialModeler::CombineMetadataScaled_EnergyDomain(uint64_t a1, uint64_t a2, uint64_t a3, char a4, float a5, float a6)
{
  v73[4] = *MEMORY[0x263EF8340];
  int v6 = *(_DWORD *)(a1 + 204);
  if (v6 != *(_DWORD *)(a2 + 204))
  {
    float v14 = **(NSObject ***)(Phase::Logger::GetInstance((Phase::Logger *)a1) + 1184);
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_DWORD *)int buf = 136315394;
    *(void *)&uint8_t buf[4] = "XfadeDirectionalMetadata.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 27;
    int v15 = "%25s:%-5d CombineMetadataScaled: mDirectionType mismatch.";
LABEL_19:
    _os_log_impl(&dword_221E5E000, v14, OS_LOG_TYPE_ERROR, v15, buf, 0x12u);
    return;
  }
  *(_DWORD *)(a3 + 204) = v6;
  __n128 v12 = *(uint64_t **)(a1 + 104);
  if (v12) {
    unint64_t v13 = v12[1];
  }
  else {
    unint64_t v13 = 0;
  }
  int v16 = *(uint64_t **)(a2 + 104);
  if (v16) {
    unint64_t v17 = v16[1];
  }
  else {
    unint64_t v17 = 0;
  }
  if (v13 <= v17) {
    uint64_t v18 = v17;
  }
  else {
    uint64_t v18 = v13;
  }
  if (!v18)
  {
    float v14 = **(NSObject ***)(Phase::Logger::GetInstance((Phase::Logger *)a1) + 1184);
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_DWORD *)int buf = 136315394;
    *(void *)&uint8_t buf[4] = "XfadeDirectionalMetadata.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 36;
    int v15 = "%25s:%-5d CombineMetadataScaled: Called with both empty metadata.";
    goto LABEL_19;
  }
  if (!v12)
  {
    uint64_t v19 = 0;
    if (v16) {
      goto LABEL_16;
    }
LABEL_21:
    uint64_t v20 = 0;
    goto LABEL_22;
  }
  uint64_t v19 = *v12;
  if (!v16) {
    goto LABEL_21;
  }
LABEL_16:
  uint64_t v20 = *v16;
LABEL_22:
  uint64_t v68 = 4;
  uint64_t v69 = v20 + v19;
  *(void *)int buf = &v69;
  *(void *)&_OWORD buf[8] = &v68;
  Phase::details::AllocArray<Phase::Vector<float,3ul>,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>>(unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>>(unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&>(v20 + v19, (uint64_t)buf, &v72);
  uint64_t v21 = v72;
  uint64_t v72 = 0;
  *(void *)int buf = v21;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&buf[8], (uint64_t)v73);
  uint64_t v71 = v20 + v19;
  std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::reset[abi:ne180100](&v72);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v73);
  std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(a3 + 8), (uint64_t *)buf);
  *(void *)(a3 + 48) = v71;
  std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)buf);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](&buf[8]);
  uint64_t v68 = 4;
  uint64_t v69 = v20 + v19;
  *(void *)int buf = &v69;
  *(void *)&_OWORD buf[8] = &v68;
  Phase::details::AllocArray<float,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float>(unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float>(unsigned long,unsigned long)::{lambda(float*)#1} const&>(v20 + v19, (uint64_t)buf, &v72);
  uint64_t v22 = v72;
  uint64_t v72 = 0;
  *(void *)int buf = v22;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&buf[8], (uint64_t)v73);
  uint64_t v71 = v20 + v19;
  std::unique_ptr<float [],std::function<void ()(void *)>>::reset[abi:ne180100](&v72);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v73);
  float v23 = (uint64_t *)(a3 + 56);
  std::unique_ptr<float [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(a3 + 56), (uint64_t *)buf);
  *(void *)(a3 + 96) = v71;
  std::unique_ptr<float [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)buf);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](&buf[8]);
  Phase::AllocPackedSubbandArray<float>(v20 + v19, v18, (void **)buf);
  uint64_t v24 = a3 + 104;
  std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(a3 + 104), (uint64_t *)buf);
  std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)buf, 0);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](&buf[8]);
  uint64_t v68 = 1;
  uint64_t v69 = v20 + v19;
  *(void *)int buf = &v69;
  *(void *)&_OWORD buf[8] = &v68;
  Phase::details::AllocArray<BOOL,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL>(unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL>(unsigned long,unsigned long)::{lambda(BOOL*)#1} const&>(v20 + v19, (uint64_t)buf, &v72);
  uint64_t v25 = v72;
  uint64_t v72 = 0;
  *(void *)int buf = v25;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&buf[8], (uint64_t)v73);
  uint64_t v71 = v20 + v19;
  std::unique_ptr<BOOL [],std::function<void ()(void *)>>::reset[abi:ne180100](&v72);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v73);
  __n128 v26 = (uint64_t *)(a3 + 144);
  std::unique_ptr<BOOL [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(a3 + 144), (uint64_t *)buf);
  *(void *)(a3 + 184) = v71;
  std::unique_ptr<BOOL [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)buf);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](&buf[8]);
  if (v19)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *(void *)(a1 + 8);
    uint64_t v29 = *(void *)(a3 + 8);
    uint64_t v30 = *(void *)(a1 + 56);
    uint64_t v31 = *v23;
    uint64_t v32 = *(void *)(a1 + 104);
    int v33 = (float *)(v32 + 16);
    uint64_t v34 = *(void *)(v32 + 8);
    uint64_t v35 = *(void *)v24 + 16;
    float v36 = sqrtf(a5);
    uint64_t v37 = *(void *)(a1 + 144);
    uint64_t v38 = *v26;
    uint64_t v39 = 4 * *(void *)(*(void *)v24 + 8);
    do
    {
      int v40 = (_DWORD *)(v28 + 12 * v27);
      float v41 = (_DWORD *)(v29 + 12 * v27);
      _DWORD *v41 = *v40;
      v41[1] = v40[1];
      void v41[2] = v40[2];
      *(_DWORD *)(v31 + 4 * vPhase::SortedCommandQueue<Phase::SpatialModeler::PriorityQueue,Phase::SpatialModeler::PriorityQueueCommandType,std::variant<std::monostate,Phase::SpatialModeler::PriorityQueueEntry,Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueClusterIndexUpdate,Phase::SpatialModeler::PriorityQueueGlobals>>::ClearCommands(this + 27) = *(_DWORD *)(v30 + 4 * v27);
      unint64_t v42 = v33;
      unint64_t v43 = (float *)v35;
      for (uint64_t i = v34; i; --i)
      {
        float v45 = *v42++;
        *v43++ = v36 * v45;
      }
      *(unsigned char *)(v38 + vPhase::SortedCommandQueue<Phase::SpatialModeler::PriorityQueue,Phase::SpatialModeler::PriorityQueueCommandType,std::variant<std::monostate,Phase::SpatialModeler::PriorityQueueEntry,Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueClusterIndexUpdate,Phase::SpatialModeler::PriorityQueueGlobals>>::ClearCommands(this + 27) = *(unsigned char *)(v37 + v27);
      ++v27;
      v35 += v39;
      v33 += v34;
    }
    while (v27 != v19);
  }
  if (v20)
  {
    uint64_t v46 = 0;
    uint64_t v47 = *(void *)(a2 + 8);
    uint64_t v48 = *(void *)(a3 + 8);
    uint64_t v49 = *(void *)(a2 + 56);
    uint64_t v50 = *v23;
    uint64_t v51 = *(void *)(a2 + 104);
    double v52 = (float *)(v51 + 16);
    uint64_t v53 = *(void *)(v51 + 8);
    uint64_t v54 = *(void *)(*(void *)v24 + 8);
    float v55 = sqrtf(a6);
    uint64_t v56 = *(void *)(a2 + 144);
    uint64_t v57 = *v26;
    uint64_t v58 = *(void *)v24 + 4 * v19 * v54 + 16;
    uint64_t v59 = 4 * v54;
    do
    {
      double v60 = (_DWORD *)(v47 + 12 * v46);
      float64x2_t v61 = (_DWORD *)(v48 + 12 * (v46 + v19));
      *float64x2_t v61 = *v60;
      v61[1] = v60[1];
      v61[2] = v60[2];
      *(_DWORD *)(v50 + 4 * (v46 + v19)) = *(_DWORD *)(v49 + 4 * v46);
      float64x2_t v62 = v52;
      BOOL v63 = (float *)v58;
      for (uint64_t j = v53; j; --j)
      {
        float v65 = *v62++;
        *v63++ = v55 * v65;
      }
      *(unsigned char *)(v57 + v46 + vstd::__function::__value_func<void ()(Phase::SpatialModeler::PriorityQueueEntry &)>::~__value_func[abi:ne180100](this + 19) = *(unsigned char *)(v56 + v46);
      ++v46;
      v58 += v59;
      v52 += v53;
    }
    while (v46 != v20);
  }
  char v66 = a4;
  if (a4)
  {
    Phase::SpatialModeler::SortMetadataByDelay<float>(a3);
    char v66 = a4;
  }
  *(unsigned char *)(a3 + 201) = v66;
}

void Phase::SpatialModeler::XfadeDirectionalMetadata(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, float a4@<S0>, float a5@<S1>)
{
  *(_DWORD *)a3 = 3;
  *(unsigned char *)(a3 + 4) = 1;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 204) = 0;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 4std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a3 + 96) = 0;
  *(void *)(a3 + 104) = 0;
  *(void *)(a3 + 88) = 0;
  *(void *)(a3 + 136) = 0;
  *(void *)(a3 + 144) = 0;
  *(void *)(a3 + 184) = 0;
  *(void *)(a3 + 192) = 0;
  *(void *)(a3 + 176) = 0;
  *(_WORD *)(a3 + 20std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = 0;
  if (a4 == 0.0 && a5 == 1.0) {
    goto LABEL_6;
  }
  if (a4 == 1.0 && a5 == 0.0)
  {
    a2 = a1;
LABEL_6:
    Phase::SpatialModeler::CopyMetadata<float>(a2, a3);
    return;
  }
  Phase::SpatialModeler::CombineMetadataScaled_EnergyDomain(a1, a2, a3, 1, a4, a5);
}

void sub_222099C90(_Unwind_Exception *a1)
{
  Phase::SpatialModeler::DirectionalMetadataOutput<float>::~DirectionalMetadataOutput(v1);
  _Unwind_Resume(a1);
}

void *Phase::Controller::XTCBinauralSpatializer::XTCBinauralSpatializer(void *a1, long long *a2, uint64_t a3)
{
  LOBYTE(__p[0]) = 0;
  std::vector<char>::vector(&v10, 0x20uLL, (const std::vector<char>::value_type *)__p);
  begiuint64_t n = v10.__begin_;
  *(void *)v10.__begin_ = 6619138;
  *((_DWORD *)begin + 2) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "XTCBinaural");
  Phase::Controller::Spatializer::Spatializer((uint64_t)a1, a2, (uint64_t)&v10, (long long *)__p);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v10.__begin_)
  {
    v10.__end_ = v10.__begin_;
    operator delete(v10.__begin_);
  }
  *a1 = &unk_26D47B850;
  IR::IRDataAttributes::IRDataAttributes((uint64_t)(a1 + 12), a3);
  return a1;
}

void sub_222099D74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void Phase::Controller::XTCBinauralSpatializer::~XTCBinauralSpatializer(void **this)
{
  *this = &unk_26D47B850;
  IR::IRDataAttributes::~IRDataAttributes((IR::IRDataAttributes *)(this + 12));

  Phase::Controller::Spatializer::~Spatializer(this);
}

{
  uint64_t vars8;

  *this = &unk_26D47B850;
  IR::IRDataAttributes::~IRDataAttributes((IR::IRDataAttributes *)(this + 12));
  Phase::Controller::Spatializer::~Spatializer(this);

  JUMPOUT(0x223C938A0);
}

uint64_t Phase::Controller::XTCBinauralSpatializer::Initialize(Phase::Controller::XTCBinauralSpatializer *this)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v2 = (char *)this + 96;
  unint64_t v3 = operator new(0x240uLL);
  v3[1] = 0;
  void v3[2] = 0;
  *unint64_t v3 = &unk_26D47B8E0;
  uint64_t v4 = (char *)(v3 + 3);
  *((_WORD *)v3 + 16) = 1;
  v3[5] = this;
  v3[3] = &unk_26D47B918;
  *((_OWORD *)v3 + objc_destroyWeak(this + 3) = 0u;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear(this + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  *((_OWORD *)v3 + 8) = 0u;
  *((_OWORD *)v3 + 9) = 0u;
  *((_OWORD *)v3 + 1std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = 0u;
  *((_OWORD *)v3 + std::__function::__value_func<void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::~__value_func[abi:ne180100](this + 11) = 0u;
  *((_OWORD *)v3 + 12) = 0u;
  *((_OWORD *)v3 + 1objc_destroyWeak(this + 3) = 0u;
  *((_OWORD *)v3 + 14) = 0u;
  *((_OWORD *)v3 + 1std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear(this + 5) = 0u;
  *((_OWORD *)v3 + 16) = 0u;
  *((_OWORD *)v3 + 17) = 0u;
  *((_OWORD *)v3 + 18) = 0u;
  *((_OWORD *)v3 + std::__function::__value_func<void ()(Phase::SpatialModeler::PriorityQueueEntry &)>::~__value_func[abi:ne180100](this + 19) = 0u;
  *((_OWORD *)v3 + 2std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = 0u;
  *((_OWORD *)v3 + 21) = 0u;
  *((_OWORD *)v3 + 22) = 0u;
  *((_OWORD *)v3 + 2objc_destroyWeak(this + 3) = 0u;
  *((_OWORD *)v3 + 24) = 0u;
  *((_OWORD *)v3 + 2std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear(this + 5) = 0u;
  unint64_t v5 = (Phase::Logger *)IR::IRDataAttributes::IRDataAttributes((uint64_t)(v3 + 52), (uint64_t)v2);
  v3[71] = 0;
  if (!*((void *)this + 12))
  {
    char v9 = **(id **)(Phase::Logger::GetInstance(v5) + 576);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      int v12 = 136315394;
      unint64_t v13 = "XTCBinauralSpatializer.mm";
      __int16 v14 = 1024;
      int v15 = 37;
      _os_log_impl(&dword_221E5E000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: inIrDataAttributes.fileURL.is_valid() is false.", (uint8_t *)&v12, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "PRECONDITION: inIrDataAttributes.fileURL.is_valid() is false.");
LABEL_14:
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C380] + 16);
  }
  if (*((float *)this + 26) <= 0.0)
  {
    __n128 v11 = **(id **)(Phase::Logger::GetInstance(v5) + 576);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      int v12 = 136315394;
      unint64_t v13 = "XTCBinauralSpatializer.mm";
      __int16 v14 = 1024;
      int v15 = 38;
      _os_log_impl(&dword_221E5E000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: inIrDataAttributes.sampleRate > 0 is false.", (uint8_t *)&v12, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "PRECONDITION: inIrDataAttributes.sampleRate > 0 is false.");
    goto LABEL_14;
  }
  int v6 = (std::__shared_weak_count *)*((void *)this + 7);
  *((void *)this + 6) = v4;
  *((void *)this + 7) = v3;
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    uint64_t v4 = (char *)*((void *)this + 6);
  }
  float v7 = *(uint64_t (**)(char *))(*(void *)v4 + 16);

  return v7(v4);
}

void sub_22209A114(_Unwind_Exception *a1)
{
  __cxa_free_exception(v3);
  std::unique_ptr<Phase::Controller::HrirAsset>::reset[abi:ne180100]((uint64_t **)(v1 + 568), 0);
  IR::IRDataAttributes::~IRDataAttributes(v2);
  uint64_t v5 = 336;
  while (1)
  {
    int v6 = *(std::__shared_weak_count **)(v1 + v5 + 56);
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
    float v7 = *(std::__shared_weak_count **)(v1 + v5 + 40);
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    __n128 v8 = *(std::__shared_weak_count **)(v1 + v5 + 24);
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    v5 -= 48;
    if (!v5)
    {
      char v9 = *(std::__shared_weak_count **)(v1 + 56);
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
      std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v1);
      operator delete(v10);
      _Unwind_Resume(a1);
    }
  }
}

BOOL Phase::Controller::XTCBinauralSpatializer::SetDeviceOrientation(uint64_t a1, unsigned int a2)
{
  return Phase::Controller::XTCBinauralEncoder::SetDeviceOrientation(*(void *)(a1 + 48), a2);
}

BOOL Phase::Controller::XTCBinauralEncoder::SetDeviceOrientation(uint64_t a1, unsigned int a2)
{
  unsigned int v2 = a2;
  uint64_t v34 = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 48 * a2 + 40))
  {
LABEL_2:
    char v4 = 0;
    int v5 = 1;
    goto LABEL_13;
  }
  unsigned int v6 = a2 - 1;
  if (a2) {
    unsigned int v6 = a2 + 1;
  }
  if (a2) {
    unsigned int v2 = v6;
  }
  else {
    unsigned int v2 = 0;
  }
  if (*(void *)(a1 + 48 * v2 + 40))
  {
    int v5 = 0;
    char v4 = 1;
  }
  else
  {
    if (!*(void *)(a1 + 184) && !*(void *)(a1 + 232))
    {
      if (!*(void *)(a1 + 40))
      {
        uint64_t v18 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)a1) + 576);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 136315394;
          uint64_t v25 = "XTCBinauralSpatializer.mm";
          __int16 v26 = 1024;
          int v27 = 377;
          _os_log_impl(&dword_221E5E000, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"[XTCBinauralSpatializer] No valid HRIR filter database for current orientation.\"", buf, 0x12u);
        }
        exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "[XTCBinauralSpatializer] No valid HRIR filter database for current orientation.");
      }
      unsigned int v2 = 0;
      goto LABEL_2;
    }
    char v4 = 0;
    int v5 = 1;
    unsigned int v2 = 3;
  }
LABEL_13:
  float v7 = operator new(0x28uLL);
  v7[1] = 0;
  void v7[2] = 0;
  void *v7 = &unk_26D47B888;
  v7[3] = &unk_26D47B8C0;
  *((unsigned char *)v7 + 32) = v4;
  uint64_t v8 = a1 + 48 * v2;
  char v9 = *(std::__shared_weak_count **)(v8 + 80);
  *(void *)(v8 + 72) = v7 + 3;
  *(void *)(v8 + 8std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = v7;
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  int v10 = *(_DWORD *)(a1 + 388);
  if (v2 != v10)
  {
    __n128 v11 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance((Phase::Logger *)v9)
                                                                                        + 576)));
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 40))(v22, a1);
      int v12 = v23;
      unint64_t v13 = (void **)v22[0];
      Phase::Device::GetOrientationString((uint64_t)__p);
      __int16 v14 = v22;
      if (v12 < 0) {
        __int16 v14 = v13;
      }
      if (v21 >= 0) {
        int v15 = __p;
      }
      else {
        int v15 = (void **)__p[0];
      }
      *(_DWORD *)int buf = 136316162;
      uint64_t v25 = "XTCBinauralSpatializer.mm";
      uint64_t v16 = " with flipped channels";
      __int16 v26 = 1024;
      int v27 = 340;
      __int16 v28 = 2080;
      if (v5) {
        uint64_t v16 = "";
      }
      uint64_t v29 = v14;
      __int16 v30 = 2080;
      uint64_t v31 = v15;
      __int16 v32 = 2080;
      int v33 = v16;
      _os_log_impl(&dword_221E5E000, v11, OS_LOG_TYPE_INFO, "%25s:%-5d [XTCBinauralSpatializer] %s Using XTC HRIR for orientation %s%s.", buf, 0x30u);
      if (v21 < 0) {
        operator delete(__p[0]);
      }
      if (v23 < 0) {
        operator delete(v22[0]);
      }
    }

    *(_DWORD *)(a1 + 388) = v2;
  }
  return v2 != v10;
}

void sub_22209A4DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Phase::Controller::XTCBinauralEncoder::FilterMetadata>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D47B888;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Phase::Controller::XTCBinauralEncoder::FilterMetadata>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D47B888;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C938A0);
}

uint64_t std::__shared_ptr_emplace<Phase::Controller::XTCBinauralEncoder::FilterMetadata>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void Phase::Controller::XTCBinauralEncoder::FilterMetadata::~FilterMetadata(Phase::Controller::XTCBinauralEncoder::FilterMetadata *this)
{
}

void std::__shared_ptr_emplace<Phase::Controller::XTCBinauralEncoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D47B8E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Phase::Controller::XTCBinauralEncoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D47B8E0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C938A0);
}

uint64_t std::__shared_ptr_emplace<Phase::Controller::XTCBinauralEncoder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void Phase::Controller::XTCBinauralEncoder::~XTCBinauralEncoder(uint64_t **this)
{
  Phase::Controller::XTCBinauralEncoder::~XTCBinauralEncoder(this);

  JUMPOUT(0x223C938A0);
}

{
  uint64_t i;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *this = (uint64_t *)&unk_26D47B918;
  std::unique_ptr<Phase::Controller::HrirAsset>::reset[abi:ne180100](this + 68, 0);
  IR::IRDataAttributes::~IRDataAttributes((IR::IRDataAttributes *)(this + 49));
  for (uint64_t i = 0; i != -42; i -= 6)
  {
    unint64_t v3 = (std::__shared_weak_count *)this[i + 46];
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    char v4 = (std::__shared_weak_count *)this[i + 44];
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    int v5 = (std::__shared_weak_count *)this[i + 42];
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
  unsigned int v6 = (std::__shared_weak_count *)this[4];
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void Phase::Controller::XTCBinauralEncoder::Initialize(Phase::Controller::XTCBinauralEncoder *this)
{
  v88[19] = *MEMORY[0x263EF8340];
  IR::IRDataLoader::instance(this);
  CFTypeRef cf = 0;
  memset(__p, 0, 24);
  IR::IRDataLoader::load();
  long long v2 = *(_OWORD *)v75;
  v75[0] = 0;
  v75[1] = 0;
  unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 4);
  *(_OWORD *)((char *)this + 24) = v2;
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    if (v75[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v75[1]);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (cf) {
    CFRelease(cf);
  }
  *((_DWORD *)this + 94) = IR::IRData::getFilterLength(*((IR::IRData **)this + 3));
  IR::IRData::getMaxDelay(*((IR::IRData **)this + 3));
  float v5 = v4 + (float)*((int *)this + 94);
  int v6 = (int)v5;
  *((float *)this + 9std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear(this + 5) = v4;
  v7.i32[0] = (int)v5;
  uint8x8_t v8 = (uint8x8_t)vcnt_s8(v7);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.i32[0] != 1)
  {
    int v9 = SLODWORD(v5) >> 23;
    if ((LODWORD(v5) & 0x7FFFFF) != 0) {
      LOBYTE(v9) = v9 + 1;
    }
    int v6 = (int)(float)(1 << (v9 - 127));
  }
  *((_DWORD *)this + 96) = v6;
  if (IR::IRData::getNumDimensions(*((IR::IRData **)this + 3)) > 2)
  {
    CoordinateTree = IR::IRData::getCoordinateTree((uint64_t *)v75, *((IR::IRData **)this + 3));
    if (LODWORD(v75[0]) != 5) {
      std::terminate();
    }
    for (uint64_t i = 0; i != 7; ++i)
    {
      uint64_t v24 = (float *)v75[1];
      if (v76 != v75[1])
      {
        unint64_t v25 = (int64_t)((uint64_t)v76 - (unint64_t)v75[1]) >> 2;
        if (v25 <= 1) {
          unint64_t v25 = 1;
        }
        while (*v24 != (float)(int)i)
        {
          ++v24;
          if (!--v25) {
            goto LABEL_66;
          }
        }
        *((_DWORD *)this + 97) = i;
        int v26 = *((_DWORD *)this + 96);
        *(void *)int buf = *((void *)this + 2);
        uint64_t v72 = 0;
        LODWORD(v70[0]) = v26;
        std::allocate_shared[abi:ne180100]<Phase::Controller::SpatializerFilterDatabase,std::allocator<Phase::Controller::SpatializerFilterDatabase>,Phase::Controller::Spatializer const*&,Phase::Controller::SpatializerEncoder const*&,unsigned int &,void>((const Phase::Controller::Spatializer **)buf, &v72, (int *)v70, __p);
        *(_OWORD *)&__p[2] = 0u;
        long long v85 = 0u;
        __int16 v28 = __p[0];
        int v27 = __p[1];
        if (__p[1]) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)__p[1] + 1, 1uLL, memory_order_relaxed);
        }
        uint64_t v29 = (char *)this + 48 * i;
        __int16 v30 = (int **)(v29 + 40);
        uint64_t v31 = (std::__shared_weak_count *)*((void *)v29 + 6);
        *((void *)v29 + std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear(this + 5) = v28;
        *((void *)v29 + 6) = v27;
        if (v31) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v31);
        }
        int v33 = __p[2];
        __int16 v32 = __p[3];
        if (__p[3]) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)__p[3] + 1, 1uLL, memory_order_relaxed);
        }
        *((void *)this + 6 * i + 7) = v33;
        uint64_t v34 = (char *)this + 48 * i;
        uint64_t v35 = (std::__shared_weak_count *)*((void *)v34 + 8);
        *((void *)v34 + 8) = v32;
        if (v35) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v35);
        }
        long long v36 = v85;
        if (*((void *)&v85 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v85 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        *((void *)this + 6 * i + 9) = v36;
        uint64_t v37 = (char *)this + 48 * i;
        uint64_t v38 = (std::__shared_weak_count *)*((void *)v37 + 10);
        *((void *)v37 + 1std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = *((void *)&v36 + 1);
        if (v38) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v38);
        }
        if (*((void *)&v85 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v85 + 1));
        }
        if (__p[3]) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[3]);
        }
        CoordinateTree = (uint64_t *)__p[1];
        if (__p[1]) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
        }
        if (**v30 <= 0)
        {
          double v64 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance((Phase::Logger *)CoordinateTree)
                                                           + 576));
          if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
          {
            LODWORD(__p[0]) = 136315394;
            *(void **)((char *)__p + 4) = "XTCBinauralSpatializer.mm";
            WORD2(__p[1]) = 1024;
            *(_DWORD *)((char *)&__p[1] + 6) = 85;
            _os_log_impl(&dword_221E5E000, v64, OS_LOG_TYPE_ERROR, "%25s:%-5d POSTCONDITION: mFilterDatabases[lOrientation]->GetCoordinateCount() > 0 is false.", (uint8_t *)__p, 0x12u);
          }
          exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "POSTCONDITION: mFilterDatabases[lOrientation]->GetCoordinateCount() > 0 is false.");
        }
        *((_DWORD *)this + 97) = 0;
      }
LABEL_66:
      ;
    }
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    uint64_t v72 = (const Phase::Controller::SpatializerEncoder *)&v72;
    float v73 = (const Phase::Controller::SpatializerEncoder *)&v72;
    uint64_t v74 = 0;
    uint64_t v41 = 40;
    do
    {
      if (*(void *)((char *)this + v41)) {
        goto LABEL_74;
      }
      unsigned int v42 = v40 - 1;
      if (v40) {
        unsigned int v42 = v40 + 1;
      }
      if (!v40) {
        unsigned int v42 = 0;
      }
      if (*((void *)this + 6 * v42 + 5))
      {
LABEL_74:
        Phase::Device::GetOrientationString((uint64_t)__p);
        CoordinateTree = (uint64_t *)operator new(0x28uLL);
        *((_OWORD *)CoordinateTree + 1) = *(_OWORD *)__p;
        CoordinateTree[4] = (uint64_t)__p[2];
        unint64_t v43 = v72;
        uint64_t *CoordinateTree = (uint64_t)v72;
        CoordinateTree[1] = (uint64_t)&v72;
        *((void *)v43 + 1) = CoordinateTree;
        uint64_t v39 = v74 + 1;
        uint64_t v72 = (const Phase::Controller::SpatializerEncoder *)CoordinateTree;
        ++v74;
      }
      ++v40;
      v41 += 48;
    }
    while (v40 != 7);
    if (v39)
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
      float v45 = v72;
      unint64_t v44 = v73;
      *(void *)int buf = &__p[2];
      *(void *)&_OWORD buf[8] = ", ";
      if (v73 != v72)
      {
        do
        {
          std::ostream_iterator<std::string,char,std::char_traits<char>>::operator=[abi:ne180100]((uint64_t)buf, (uint64_t)v44 + 16);
          unint64_t v44 = (const Phase::Controller::SpatializerEncoder *)*((void *)v44 + 1);
        }
        while (v44 != v45);
        unint64_t v44 = v72;
      }
      uint64_t v48 = *((void *)v44 + 2);
      uint64_t v47 = (char *)v44 + 16;
      uint64_t v46 = v48;
      int v49 = v47[23];
      if (v49 >= 0) {
        uint64_t v50 = (uint64_t)v47;
      }
      else {
        uint64_t v50 = v46;
      }
      if (v49 >= 0) {
        uint64_t v51 = v47[23];
      }
      else {
        uint64_t v51 = *((void *)v47 + 1);
      }
      double v52 = (Phase::Logger *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[2], v50, v51);
      uint64_t v53 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v52)
                                                                                          + 576)));
      if (os_log_type_enabled(v53, OS_LOG_TYPE_INFO))
      {
        (*(void (**)(void **__return_ptr, Phase::Controller::XTCBinauralEncoder *))(*(void *)this + 40))(v70, this);
        int v54 = v71;
        float v55 = (void **)v70[0];
        std::stringbuf::str();
        uint64_t v56 = v70;
        if (v54 < 0) {
          uint64_t v56 = v55;
        }
        if (v69 >= 0) {
          uint64_t v57 = &v68;
        }
        else {
          uint64_t v57 = v68;
        }
        *(_DWORD *)int buf = 136315906;
        *(void *)&uint8_t buf[4] = "XTCBinauralSpatializer.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 115;
        __int16 v80 = 2080;
        uint64_t v81 = v56;
        __int16 v82 = 2080;
        BOOL v83 = v57;
        _os_log_impl(&dword_221E5E000, v53, OS_LOG_TYPE_INFO, "%25s:%-5d [XTCBinauralSpatializer] %s Initialized with supported orientations { %s }", buf, 0x26u);
        if (v69 < 0) {
          operator delete(v68);
        }
        if (v71 < 0) {
          operator delete(v70[0]);
        }
      }

      __p[0] = *(void **)MEMORY[0x263F8C2B8];
      uint64_t v58 = *(void **)(MEMORY[0x263F8C2B8] + 72);
      *(void **)((char *)__p + *((void *)__p[0] - Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Collection::~Collection((Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Collection *)(this + 3)) = *(void **)(MEMORY[0x263F8C2B8] + 64);
      __p[2] = v58;
      _DWORD __p[3] = (void *)(MEMORY[0x263F8C318] + 16);
      if (v87 < 0) {
        operator delete(v86);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      uint64_t v59 = (Phase::Logger *)MEMORY[0x223C937D0](v88);
    }
    else
    {
      double v60 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance((Phase::Logger *)CoordinateTree)
                                                                                          + 576)));
      if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
      {
        (*(void (**)(unsigned char *__return_ptr, Phase::Controller::XTCBinauralEncoder *))(*(void *)this + 40))(buf, this);
        float64x2_t v61 = SBYTE3(v81) >= 0 ? buf : *(unsigned char **)buf;
        LODWORD(__p[0]) = 136315650;
        *(void **)((char *)__p + 4) = "XTCBinauralSpatializer.mm";
        WORD2(__p[1]) = 1024;
        *(_DWORD *)((char *)&__p[1] + 6) = 121;
        WORD1(__p[2]) = 2080;
        *(void **)((char *)&__p[2] + 4) = v61;
        _os_log_impl(&dword_221E5E000, v60, OS_LOG_TYPE_ERROR, "%25s:%-5d [XTCBinauralSpatializer] %s Initialize: IR asset has orientation dimension but no valid data.", (uint8_t *)__p, 0x1Cu);
        if (SBYTE3(v81) < 0) {
          operator delete(*(void **)buf);
        }
      }
    }
    if (!*((void *)this + 23) && !*((void *)this + 29))
    {
      char v66 = **(id **)(Phase::Logger::GetInstance(v59) + 576);
      if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
      {
        LODWORD(__p[0]) = 136315394;
        *(void **)((char *)__p + 4) = "XTCBinauralSpatializer.mm";
        WORD2(__p[1]) = 1024;
        *(_DWORD *)((char *)&__p[1] + 6) = 126;
        _os_log_impl(&dword_221E5E000, v66, OS_LOG_TYPE_ERROR, "%25s:%-5d POSTCONDITION: IsDeviceOrientationSupported(static_cast<CAOrientation>(kDefaultDeviceOrientation)) is false.", (uint8_t *)__p, 0x12u);
      }
      BOOL v67 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v67, "POSTCONDITION: IsDeviceOrientationSupported(static_cast<CAOrientation>(kDefaultDeviceOrientation)) is false.");
    }
    std::__list_imp<std::string>::clear(&v72);
    __p[0] = &v77;
    std::vector<IR::IRCoordinateTree>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    if (v75[1])
    {
      double v76 = v75[1];
      operator delete(v75[1]);
    }
  }
  else
  {
    int v10 = *((_DWORD *)this + 96);
    v75[0] = *((void **)this + 2);
    *(void *)int buf = 0;
    LODWORD(v72) = v10;
    std::allocate_shared[abi:ne180100]<Phase::Controller::SpatializerFilterDatabase,std::allocator<Phase::Controller::SpatializerFilterDatabase>,Phase::Controller::Spatializer const*&,Phase::Controller::SpatializerEncoder const*&,unsigned int &,void>((const Phase::Controller::Spatializer **)v75, (const Phase::Controller::SpatializerEncoder **)buf, (int *)&v72, __p);
    *(_OWORD *)&__p[2] = 0u;
    long long v85 = 0u;
    int v12 = __p[0];
    __n128 v11 = __p[1];
    if (__p[1]) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)__p[1] + 1, 1uLL, memory_order_relaxed);
    }
    unint64_t v13 = (std::__shared_weak_count *)*((void *)this + 6);
    *((void *)this + std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear(this + 5) = v12;
    *((void *)this + 6) = v11;
    if (v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
    int v15 = __p[2];
    __int16 v14 = __p[3];
    if (__p[3]) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)__p[3] + 1, 1uLL, memory_order_relaxed);
    }
    uint64_t v16 = (std::__shared_weak_count *)*((void *)this + 8);
    *((void *)this + 7) = v15;
    *((void *)this + 8) = v14;
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
    long long v17 = v85;
    if (*((void *)&v85 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v85 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v18 = (std::__shared_weak_count *)*((void *)this + 10);
    *(_OWORD *)((char *)this + 72) = v17;
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
    if (*((void *)&v85 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v85 + 1));
    }
    if (__p[3]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[3]);
    }
    uint64_t v19 = (Phase::Logger *)__p[1];
    if (__p[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
    }
    uint64_t v20 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v19)
                                                                                        + 576)));
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      (*(void (**)(void **__return_ptr, Phase::Controller::XTCBinauralEncoder *))(*(void *)this + 40))(v75, this);
      char v21 = SHIBYTE(v76) >= 0 ? v75 : (void **)v75[0];
      LODWORD(__p[0]) = 136315650;
      *(void **)((char *)__p + 4) = "XTCBinauralSpatializer.mm";
      WORD2(__p[1]) = 1024;
      *(_DWORD *)((char *)&__p[1] + 6) = 65;
      WORD1(__p[2]) = 2080;
      *(void **)((char *)&__p[2] + 4) = v21;
      _os_log_impl(&dword_221E5E000, v20, OS_LOG_TYPE_INFO, "%25s:%-5d [XTCBinauralSpatializer] %s Initialized with no orientation information.", (uint8_t *)__p, 0x1Cu);
      if (SHIBYTE(v76) < 0) {
        operator delete(v75[0]);
      }
    }
  }
  unsigned int v62 = CAGetDeviceOrientation();
  Phase::Controller::XTCBinauralEncoder::SetDeviceOrientation((uint64_t)this, v62);
  BOOL v63 = (std::__shared_weak_count *)*((void *)this + 4);
  *((void *)this + objc_destroyWeak(this + 3) = 0;
  *((void *)this + 4) = 0;
  if (v63) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v63);
  }
}

void sub_22209B0A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
}

uint64_t Phase::Controller::XTCBinauralEncoder::GetFiltersAndDelays(IR::IRData **this, float a2, float a3, float a4, unsigned int a5, float **a6, float *a7)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  if (!this[3])
  {
    __int16 v14 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)this) + 576);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      uint64_t v20 = "XTCBinauralSpatializer.mm";
      __int16 v21 = 1024;
      int v22 = 210;
      _os_log_impl(&dword_221E5E000, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: nullptr != mIRData.get() is false.", buf, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "PRECONDITION: nullptr != mIRData.get() is false.");
  }
  Phase::Controller::SpatializerEncoder::VerifyCoordinateRanges((Phase::Logger *)this, a2, a3, a4);
  IR::IRCoordinates::IRCoordinates((IR::IRCoordinates *)buf);
  IR::IRCoordinates::set();
  IR::IRCoordinates::set();
  if (IR::IRData::getNumDimensions(this[3]) >= 3) {
    IR::IRCoordinates::set();
  }
  if (IR::IRData::getNumFiltersPerSpatialPoint(this[3]) != 2) {
    std::terminate();
  }
  unsigned int FilterLength = IR::IRData::getFilterLength(this[3]);
  std::vector<float>::vector(&__p, FilterLength);
  std::vector<std::vector<float>>::vector(v18, 2uLL, (uint64_t)&__p);
  if (__p)
  {
    long long v17 = __p;
    operator delete(__p);
  }
  std::vector<float>::vector(&__p, 2uLL);
  IR::IRData::getInterpolatedTimeDomainCoeffs();
  uint64_t v11 = 0;
  for (unint64_t i = 0; (uint64_t)i < (*((int (**)(IR::IRData **))*this + 6))(this); ++i)
  {
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18[1] - v18[0]) >> 3) <= i) {
      std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
    }
    memcpy(a6[i], *(const void **)(v18[0] + v11), 4 * *((int *)this + 94));
    a7[i] = *((float *)__p + i);
    v11 += 24;
  }
  if (__p)
  {
    long long v17 = __p;
    operator delete(__p);
  }
  std::string __p = v18;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  return 1;
}

void sub_22209B448(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12)
{
  __cxa_free_exception(v12);
  _Unwind_Resume(a1);
}

void *Phase::Controller::XTCBinauralEncoder::AcquireFilters@<X0>(Phase::Controller::XTCBinauralEncoder *this@<X0>, void *a2@<X8>)
{
  return Phase::Controller::SpatializerFilterHandle::SpatializerFilterHandle(a2, (Phase::Controller::XTCBinauralEncoder *)((char *)this + 48 * *((unsigned int *)this + 97) + 40));
}

void *Phase::Controller::XTCBinauralEncoder::GetDescription@<X0>(Phase::Controller::XTCBinauralEncoder *this@<X0>, void *a2@<X8>)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  int v3 = *((_DWORD *)this + 94);
  int v4 = (*(uint64_t (**)(Phase::Controller::XTCBinauralEncoder *))(*(void *)this + 48))(this);
  Phase::Device::GetOrientationString((uint64_t)__p);
  if (v8 >= 0) {
    float v5 = __p;
  }
  else {
    float v5 = (void **)__p[0];
  }
  snprintf(__str, 0x100uLL, "<Encoder Type: XTCBinaural, Filter Length: %d, Output Channel Count: %d, Device Orientation: %s>", v3, v4, (const char *)v5);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, __str);
}

uint64_t Phase::Controller::XTCBinauralEncoder::GetOutputChannelCount(Phase::Controller::XTCBinauralEncoder *this)
{
  return 2;
}

uint64_t Phase::Controller::XTCBinauralEncoder::GetFilterLengthInSamples(Phase::Controller::XTCBinauralEncoder *this, const Phase::Controller::SpatializerFilterHandle *a2)
{
  return *((unsigned int *)this + 94);
}

uint64_t Phase::Controller::XTCBinauralEncoder::GetTotalFilterLengthInSamples(Phase::Controller::XTCBinauralEncoder *this, const Phase::Controller::SpatializerFilterHandle *a2)
{
  return *((unsigned int *)this + 96);
}

uint64_t Phase::Controller::XTCBinauralEncoder::GetCoordinateCount(Phase::Controller::XTCBinauralEncoder *this, const Phase::Controller::SpatializerFilterHandle *a2)
{
  uint64_t result = 0;
  for (uint64_t i = 40; i != 376; i += 48)
  {
    float v5 = *(_DWORD **)((char *)this + i);
    if (v5) {
      uint64_t result = (*v5 + result);
    }
  }
  return result;
}

uint64_t Phase::Controller::XTCBinauralEncoder::GetWorkBufferSizeInBytes(Phase::Controller::XTCBinauralEncoder *this, const Phase::Controller::SpatializerFilterHandle *a2)
{
  if (!*(unsigned char *)(*((void *)a2 + 4) + 8)) {
    return 0;
  }
  int v3 = (*(uint64_t (**)(Phase::Controller::XTCBinauralEncoder *))(*(void *)this + 56))(this);
  return 4
       * v3
       * (*(unsigned int (**)(Phase::Controller::XTCBinauralEncoder *))(*(void *)this + 48))(this);
}

char *Phase::Controller::XTCBinauralEncoder::GetNearestFilter(Phase::Controller::XTCBinauralEncoder *this, Phase::Controller::SpatializerFilterDatabase **a2, float a3, float a4, char *a5)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (!*a2)
  {
    uint64_t v20 = **(id **)(Phase::Logger::GetInstance(this) + 576);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      int v26 = 136315394;
      int v27 = "XTCBinauralSpatializer.mm";
      __int16 v28 = 1024;
      int v29 = 290;
      _os_log_impl(&dword_221E5E000, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: inHandle is false.", (uint8_t *)&v26, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "PRECONDITION: inHandle is false.");
  }
  uint64_t v10 = Phase::Controller::SpatializerEncoder::VerifyCoordinateRanges(this, a3, a4, 0.0);
  if (*((unsigned char *)a2[4] + 8))
  {
    if (!a5)
    {
      int v22 = **(id **)(Phase::Logger::GetInstance(v10) + 576);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        int v26 = 136315394;
        int v27 = "XTCBinauralSpatializer.mm";
        __int16 v28 = 1024;
        int v29 = 301;
        _os_log_impl(&dword_221E5E000, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: nullptr != pInWorkBuffer is false.", (uint8_t *)&v26, 0x12u);
      }
      uint64_t v23 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::invalid_argument::invalid_argument[abi:ne180100](v23, "PRECONDITION: nullptr != pInWorkBuffer is false.");
    }
    uint64_t v11 = (Phase::Logger *)(*(uint64_t (**)(Phase::Controller::XTCBinauralEncoder *))(*(void *)this + 48))(this);
    if (v11 != 2)
    {
      uint64_t v24 = **(id **)(Phase::Logger::GetInstance(v11) + 576);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        int v26 = 136315394;
        int v27 = "XTCBinauralSpatializer.mm";
        __int16 v28 = 1024;
        int v29 = 302;
        _os_log_impl(&dword_221E5E000, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: 2 == GetOutputChannelCount() is false.", (uint8_t *)&v26, 0x12u);
      }
      unint64_t v25 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v25, "PRECONDITION: 2 == GetOutputChannelCount() is false.");
    }
    float v12 = 0.0;
    if (a4 > 0.0) {
      float v12 = 360.0 - a4;
    }
    unint64_t NearestFilter = Phase::Controller::SpatializerFilterDatabase::GetNearestFilter(*a2, a3, v12);
    int v14 = (*(uint64_t (**)(Phase::Controller::XTCBinauralEncoder *, Phase::Controller::SpatializerFilterDatabase **))(*(void *)this + 56))(this, a2);
    if (v14)
    {
      uint64_t v15 = 0;
      uint64_t v16 = v14;
      do
      {
        long long v17 = &a5[v15];
        *(_DWORD *)long long v17 = *(_DWORD *)(NearestFilter + v15 + 4);
        *((_DWORD *)v17 + 1) = *(_DWORD *)(NearestFilter + v15);
        v15 += 8;
        --v16;
      }
      while (v16);
    }
    return a5;
  }
  else
  {
    uint64_t v19 = *a2;
    return (char *)Phase::Controller::SpatializerFilterDatabase::GetNearestFilter(v19, a3, a4);
  }
}

void sub_22209BA1C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void IR::IRCoordinateTree::~IRCoordinateTree(IR::IRCoordinateTree *this)
{
  int v3 = (void **)((char *)this + 32);
  std::vector<IR::IRCoordinateTree>::__destroy_vector::operator()[abi:ne180100](&v3);
  long long v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
}

uint64_t std::ostream_iterator<std::string,char,std::char_traits<char>>::operator=[abi:ne180100](uint64_t a1, uint64_t a2)
{
  int v3 = *(void **)a1;
  uint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    uint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    uint64_t v5 = v4;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, a2, v5);
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    size_t v7 = strlen(*(const char **)(a1 + 8));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)a1, v6, v7);
  }
  return a1;
}

void std::__list_imp<std::string>::clear(void *a1)
{
  if (a1[2])
  {
    uint64_t v3 = *a1;
    uint64_t v2 = a1[1];
    uint64_t v4 = *(void **)v2;
    v4[1] = *(void *)(*a1 + 8);
    **(void **)(v3 + 8) = v4;
    a1[2] = 0;
    while ((void *)v2 != a1)
    {
      uint64_t v5 = *(void *)(v2 + 8);
      std::__list_imp<std::string>::__delete_node[abi:ne180100]<>((int)a1, (void **)v2);
      uint64_t v2 = v5;
    }
  }
}

void std::__list_imp<std::string>::__delete_node[abi:ne180100]<>(int a1, void **__p)
{
  if (*((char *)__p + 39) < 0) {
    operator delete(__p[2]);
  }

  operator delete(__p);
}

void std::vector<IR::IRCoordinateTree>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = (uint64_t)v4 - 24;
      do
      {
        uint64_t v9 = v6;
        std::vector<IR::IRCoordinateTree>::__destroy_vector::operator()[abi:ne180100](&v9);
        size_t v7 = *(void **)(v6 - 24);
        if (v7)
        {
          *(void *)(v6 - 16) = v7;
          operator delete(v7);
        }
        char v8 = (void *)(v6 - 32);
        v6 -= 56;
      }
      while (v8 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

Phase::Zeppelin::HorizontalSliceDatabaseContext *Phase::Zeppelin::HorizontalSliceDatabaseContext::HorizontalSliceDatabaseContext(Phase::Zeppelin::HorizontalSliceDatabaseContext *this)
{
  *(_DWORD *)this = 181;
  uint64_t DefaultThirdOctaveBandCenterFrequencies = Phase::Zeppelin::AcousticsUtils::GetDefaultThirdOctaveBandCenterFrequencies(this);
  *((void *)this + 2) = 0;
  *((void *)this + objc_destroyWeak(this + 3) = 0;
  *((void *)this + 1) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)this + 1, *(const void **)DefaultThirdOctaveBandCenterFrequencies, *(void *)(DefaultThirdOctaveBandCenterFrequencies + 8), (uint64_t)(*(void *)(DefaultThirdOctaveBandCenterFrequencies + 8)- *(void *)DefaultThirdOctaveBandCenterFrequencies) >> 2);
  return this;
}

Phase::Zeppelin::HorizontalSliceDatabaseContext *Phase::Zeppelin::HorizontalSliceDatabaseContext::HorizontalSliceDatabaseContext(Phase::Zeppelin::HorizontalSliceDatabaseContext *this, int a2, const float *a3, unint64_t a4)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  *(_DWORD *)this = a2;
  *((void *)this + 1) = 0;
  uint64_t v5 = (char *)this + 8;
  *((void *)this + 2) = 0;
  *((void *)this + objc_destroyWeak(this + 3) = 0;
  if (!a4 || !a2 || !a3)
  {
    float v12 = **(NSObject ***)(Phase::Logger::GetInstance(this) + 928);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      *(void *)&uint8_t buf[4] = "ZeppelinContexts.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 46;
      _os_log_impl(&dword_221E5E000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [(!SphereSampling::IsDatabaseContextValid(inNumAngles, kNumElevation, pInCenterFrequenciesArr, inCenterFrequenciesArrLength)) is true]: ErrorDescriptions::kErrDescr_invalidHorizontalSliceDatabaseDefinition", buf, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, (const char *)Phase::Zeppelin::ErrorDescriptions::kErrDescr_invalidHorizontalSliceDatabaseDefinition);
LABEL_14:
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
  }
  memset(buf, 0, sizeof(buf));
  std::vector<float>::__init_with_size[abi:ne180100]<float const*,float const*>(buf, a3, (uint64_t)&a3[a4], a4);
  uint64_t v6 = *(void **)v5;
  if (*(void *)v5)
  {
    *((void *)this + 2) = v6;
    operator delete(v6);
    *(void *)uint64_t v5 = 0;
    *((void *)v5 + 1) = 0;
    *((void *)v5 + 2) = 0;
  }
  size_t v7 = *(float **)buf;
  *((void *)this + 1) = *(void *)buf;
  char v8 = *(float **)&buf[8];
  *((_OWORD *)this + 1) = *(_OWORD *)&buf[8];
  while (v7 != v8)
  {
    if (*v7 <= 0.0)
    {
      uint64_t v10 = **(NSObject ***)(Phase::Logger::GetInstance((Phase::Logger *)v6) + 928);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315394;
        *(void *)&uint8_t buf[4] = "ZeppelinContexts.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 53;
        _os_log_impl(&dword_221E5E000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [(!AcousticsUtils::AreCenterFrequenciesValid(mCenterFrequencies)) is true]: ErrorDescriptions::kErrDescr_invalidCenterFrequencies", buf, 0x12u);
      }
      exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, (const char *)Phase::Zeppelin::ErrorDescriptions::kErrDescr_invalidCenterFrequencies);
      goto LABEL_14;
    }
    ++v7;
  }
  return this;
}

void sub_22209BF70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10)
{
  __cxa_free_exception(v11);
  unint64_t v13 = *a10;
  if (*a10)
  {
    *(void *)(v10 + 16) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(a1);
}

uint64_t Phase::Zeppelin::ScsRadiationContext::ScsRadiationContext(uint64_t result, unsigned int a2, int a3, double a4, double a5)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  *(double *)uint64_t result = a4;
  *(double *)(result + 8) = a5;
  *(_DWORD *)(result + 16) = a2;
  *(_DWORD *)(result + 2std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](&a9, 0) = a3;
  if (a2 > 0xC || a5 > 3.14159265 || a4 <= 0.0 || a5 <= 0.0)
  {
    uint64_t v5 = **(NSObject ***)(Phase::Logger::GetInstance((Phase::Logger *)result) + 928);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315394;
      char v8 = "ZeppelinContexts.cpp";
      __int16 v9 = 1024;
      int v10 = 275;
      _os_log_impl(&dword_221E5E000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [(!ScsRadiationContext::IsValid(mSphereRadius, mCapHalfAngleRad, mNumberOfExpansionTerms)) is true]: ErrorDescriptions::kErrDescr_invalidScsDefinition", (uint8_t *)&v7, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, (const char *)Phase::Zeppelin::ErrorDescriptions::kErrDescr_invalidScsDefinition);
  }
  return result;
}

void sub_22209C0D8(_Unwind_Exception *exception_object)
{
}

float *Phase::Zeppelin::PropagationMediumContext::PropagationMediumContext(float *this, float a2, float a3)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  *this = a2;
  this[1] = a3;
  if (a2 <= 0.0 || a3 <= 0.0)
  {
    uint64_t v3 = **(NSObject ***)(Phase::Logger::GetInstance((Phase::Logger *)this) + 928);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      int v5 = 136315394;
      uint64_t v6 = "ZeppelinContexts.cpp";
      __int16 v7 = 1024;
      int v8 = 364;
      _os_log_impl(&dword_221E5E000, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [(!PropagationMediumContext::IsValid(mSpeedOfSound, mMediumDensity)) is true]: ErrorDescriptions::kErrDescr_invalidPropagationMedium", (uint8_t *)&v5, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, (const char *)Phase::Zeppelin::ErrorDescriptions::kErrDescr_invalidPropagationMedium);
  }
  return this;
}

void sub_22209C1FC(_Unwind_Exception *exception_object)
{
}

void Phase::Zeppelin::SCSRadiationPrecomputedData::~SCSRadiationPrecomputedData(Phase::Zeppelin::SCSRadiationPrecomputedData *this)
{
  uint64_t v4 = (uint64_t *)*((void *)this + 1);
  uint64_t v2 = (void *)((char *)this + 8);
  uint64_t v3 = v4;
  *uint64_t v2 = 0;
  if (v4) {
    std::default_delete<Phase::Zeppelin::SCSRadiationSphereSamplingDependentPrecomputedData>::operator()[abi:ne180100]((uint64_t)v2, v3);
  }
  std::unique_ptr<Phase::Zeppelin::SCSRadiationSphereSamplingIndependentPrecomputedData>::reset[abi:ne180100]((Phase::Zeppelin::SCSRadiationSphereSamplingIndependentPrecomputedData **)this, 0);
}

uint64_t Phase::Zeppelin::SphereSampling::NDimEquiangularHalfCircleData<float,double>::Populate(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3 = *(void *)(result + 8) - *(void *)result;
  if (v3)
  {
    uint64_t v6 = (void *)result;
    uint64_t v7 = 0;
    unsigned int v8 = 0;
    float v9 = *(float *)(result + 28);
    unint64_t v10 = v3 >> 2;
    uint64_t v11 = *(unsigned int *)(result + 24);
    do
    {
      float v12 = *(float *)(*v6 + 4 * v7);
      double v13 = 1.0;
      if (a3)
      {
        uint64_t result = std::function<double ()(float,float)>::operator()(*(void *)(a2 + 24), 0.0, *(float *)(*v6 + 4 * v7));
        double v13 = v14;
      }
      if (v11)
      {
        for (uint64_t i = 0; i != v11; ++i)
        {
          float v16 = (float)(v9 * (float)i) * 0.0174532925;
          uint64_t result = std::function<double ()(float,float)>::operator()(*(void *)(a2 + 24), v16, v12);
          *(double *)(*(void *)(v6[4] + 8 * i) + 8 * v7) = v17 / v13;
        }
      }
      uint64_t v7 = ++v8;
    }
    while (v10 > v8);
  }
  return result;
}

void Phase::Zeppelin::HorizontalSliceDatabase::HorizontalSliceDatabase(Phase::Logger *a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  *(void *)a1 = 0;
  if (a2 && a3 && a4 && a5)
  {
    memset(v12, 0, sizeof(v12));
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v12, *((const void **)a2 + 1), *((void *)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 2);
    Phase::Zeppelin::SCSRadiationPrecomputedData::SCSRadiationPrecomputedData((Phase::Logger *)&v11, v12, *a2, a3, a4, a5);
  }
  float v9 = **(NSObject ***)(Phase::Logger::GetInstance(a1) + 928);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)int buf = 136315394;
    double v14 = "ZeppelinContexts.cpp";
    __int16 v15 = 1024;
    int v16 = 597;
    _os_log_impl(&dword_221E5E000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [(nullptr == pInHorSlcDbContext || nullptr == pInScsRadiationCtx || nullptr == pInPropagationMediumCtx || nullptr == pInNormalizationCtx) is true]: ErrorDescriptions::kErrDescr_nullPtr", buf, 0x12u);
  }
  exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, (const char *)Phase::Zeppelin::ErrorDescriptions::kErrDescr_nullPtr);
  exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
}

void sub_22209C658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,void *__p,uint64_t a22)
{
  std::unique_ptr<Phase::Zeppelin::SphereSampling::NDimEquiangularHalfCircleData<float,double>>::reset[abi:ne180100](v22, 0);
  _Unwind_Resume(a1);
}

uint64_t Phase::Zeppelin::SphereSampling::NDimEquiangularHalfCircleData<float,double>::GetValuesForAllDimensionsAt(uint64_t a1, int a2, float a3)
{
  if (a2)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, (const char *)Phase::Zeppelin::ErrorDescriptions::kErrDescr_invalidLookupMode);
  }
  return *(void *)(*(void *)(a1 + 32)
                   + 8
                   * (((int)llroundf((float)(a3 * 57.296) / *(float *)(a1 + 28)) % *(_DWORD *)(a1 + 24)
                     + *(_DWORD *)(a1 + 24))
                    % *(_DWORD *)(a1 + 24)));
}

void sub_22209C7C4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Phase::Zeppelin::HorizontalSliceDatabase::GenerateDatabaseForNewFrequencyResolution(Phase::Zeppelin::HorizontalSliceDatabase *this, const float *a2, uint64_t a3)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (a2)
  {
    if (a3) {
      operator new();
    }
    int v5 = **(NSObject ***)(Phase::Logger::GetInstance(this) + 928);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      int buf = 136315394;
      buf_4 = "ZeppelinContexts.cpp";
      __int16 v9 = 1024;
      int v10 = 673;
      _os_log_impl(&dword_221E5E000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument): \"HorizontalSliceDatabase: The passed frequencies array length is smaller than or equal to zero.\"", (uint8_t *)&buf, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "HorizontalSliceDatabase: The passed frequencies array length is smaller than or equal to zero.");
  }
  uint64_t v3 = **(NSObject ***)(Phase::Logger::GetInstance(this) + 928);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    int buf = 136315394;
    buf_4 = "ZeppelinContexts.cpp";
    __int16 v9 = 1024;
    int v10 = 667;
    _os_log_impl(&dword_221E5E000, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [(nullptr == pInNewCenterFrequenciesArr) is true]: ErrorDescriptions::kErrDescr_nullPtr", (uint8_t *)&buf, 0x12u);
  }
  uint64_t v4 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::invalid_argument::invalid_argument[abi:ne180100](v4, (const char *)Phase::Zeppelin::ErrorDescriptions::kErrDescr_nullPtr);
}

void sub_22209D1FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40)
{
  __cxa_free_exception(v40);
  _Unwind_Resume(a1);
}

void Phase::Zeppelin::SphereSampling::NDimEquiangularHalfCircleData<float,double>::NDimEquiangularHalfCircleData(uint64_t a1, int a2, uint64_t a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)a1, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  *(_DWORD *)(a1 + 24) = a2;
  *(float *)(a1 + 28) = 180.0 / (float)(a2 - 1);
  operator new[]();
}

void sub_22209D4C8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<Phase::Zeppelin::HorizontalSliceDatabase::HorizontalSliceDatabase(void)::$_0,std::allocator<Phase::Zeppelin::HorizontalSliceDatabase::HorizontalSliceDatabase(void)::$_0>,double ()(float,float)>::~__func()
{
}

void *std::__function::__func<Phase::Zeppelin::HorizontalSliceDatabase::HorizontalSliceDatabase(void)::$_0,std::allocator<Phase::Zeppelin::HorizontalSliceDatabase::HorizontalSliceDatabase(void)::$_0>,double ()(float,float)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26D47B998;
  return result;
}

void std::__function::__func<Phase::Zeppelin::HorizontalSliceDatabase::HorizontalSliceDatabase(void)::$_0,std::allocator<Phase::Zeppelin::HorizontalSliceDatabase::HorizontalSliceDatabase(void)::$_0>,double ()(float,float)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D47B998;
}

double std::__function::__func<Phase::Zeppelin::HorizontalSliceDatabase::HorizontalSliceDatabase(void)::$_0,std::allocator<Phase::Zeppelin::HorizontalSliceDatabase::HorizontalSliceDatabase(void)::$_0>,double ()(float,float)>::operator()()
{
  return 1.0;
}

void *std::__function::__value_func<double ()(float,float)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::function<double ()(float,float)>::operator()(uint64_t a1, float a2, float a3)
{
  float v5 = a2;
  float v4 = a3;
  if (!a1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, float *, float *))(*(void *)a1 + 48))(a1, &v5, &v4);
}

uint64_t std::__function::__value_func<double ()(float,float)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__func<Phase::Zeppelin::HorizontalSliceDatabase::HorizontalSliceDatabase(Phase::Zeppelin::HorizontalSliceDatabaseContext const*,Phase::Zeppelin::ScsRadiationContext *,Phase::Zeppelin::PropagationMediumContext const*,Phase::Zeppelin::NormalizationContext const*)::$_0,std::allocator<Phase::Zeppelin::HorizontalSliceDatabase::HorizontalSliceDatabase(Phase::Zeppelin::HorizontalSliceDatabaseContext const*,Phase::Zeppelin::ScsRadiationContext *,Phase::Zeppelin::PropagationMediumContext const*,Phase::Zeppelin::NormalizationContext const*)::$_0>,double ()(float,float)>::~__func(void *a1)
{
  *a1 = &unk_26D47B9E0;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void std::__function::__func<Phase::Zeppelin::HorizontalSliceDatabase::HorizontalSliceDatabase(Phase::Zeppelin::HorizontalSliceDatabaseContext const*,Phase::Zeppelin::ScsRadiationContext *,Phase::Zeppelin::PropagationMediumContext const*,Phase::Zeppelin::NormalizationContext const*)::$_0,std::allocator<Phase::Zeppelin::HorizontalSliceDatabase::HorizontalSliceDatabase(Phase::Zeppelin::HorizontalSliceDatabaseContext const*,Phase::Zeppelin::ScsRadiationContext *,Phase::Zeppelin::PropagationMediumContext const*,Phase::Zeppelin::NormalizationContext const*)::$_0>,double ()(float,float)>::~__func(void *a1)
{
  *a1 = &unk_26D47B9E0;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x223C938A0);
}

void *std::__function::__func<Phase::Zeppelin::HorizontalSliceDatabase::HorizontalSliceDatabase(Phase::Zeppelin::HorizontalSliceDatabaseContext const*,Phase::Zeppelin::ScsRadiationContext *,Phase::Zeppelin::PropagationMediumContext const*,Phase::Zeppelin::NormalizationContext const*)::$_0,std::allocator<Phase::Zeppelin::HorizontalSliceDatabase::HorizontalSliceDatabase(Phase::Zeppelin::HorizontalSliceDatabaseContext const*,Phase::Zeppelin::ScsRadiationContext *,Phase::Zeppelin::PropagationMediumContext const*,Phase::Zeppelin::NormalizationContext const*)::$_0>,double ()(float,float)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x30uLL);
  *uint64_t v2 = &unk_26D47B9E0;
  v2[2] = 0;
  v2[3] = 0;
  v2[1] = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v2 + 1, *(const void **)(a1 + 8), *(void *)(a1 + 16), (uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 2);
  *((_OWORD *)v2 + 2) = *(_OWORD *)(a1 + 32);
  return v2;
}

void sub_22209D808(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 std::__function::__func<Phase::Zeppelin::HorizontalSliceDatabase::HorizontalSliceDatabase(Phase::Zeppelin::HorizontalSliceDatabaseContext const*,Phase::Zeppelin::ScsRadiationContext *,Phase::Zeppelin::PropagationMediumContext const*,Phase::Zeppelin::NormalizationContext const*)::$_0,std::allocator<Phase::Zeppelin::HorizontalSliceDatabase::HorizontalSliceDatabase(Phase::Zeppelin::HorizontalSliceDatabaseContext const*,Phase::Zeppelin::ScsRadiationContext *,Phase::Zeppelin::PropagationMediumContext const*,Phase::Zeppelin::NormalizationContext const*)::$_0>,double ()(float,float)>::__clone(uint64_t a1, __n128 *a2)
{
  a2->n128_u64[0] = (unint64_t)&unk_26D47B9E0;
  a2[1].n128_u64[0] = 0;
  a2[1].n128_u64[1] = 0;
  a2->n128_u64[1] = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&a2->n128_u64[1], *(const void **)(a1 + 8), *(void *)(a1 + 16), (uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 2);
  __n128 result = *(__n128 *)(a1 + 32);
  a2[2] = result;
  return result;
}

void std::__function::__func<Phase::Zeppelin::HorizontalSliceDatabase::HorizontalSliceDatabase(Phase::Zeppelin::HorizontalSliceDatabaseContext const*,Phase::Zeppelin::ScsRadiationContext *,Phase::Zeppelin::PropagationMediumContext const*,Phase::Zeppelin::NormalizationContext const*)::$_0,std::allocator<Phase::Zeppelin::HorizontalSliceDatabase::HorizontalSliceDatabase(Phase::Zeppelin::HorizontalSliceDatabaseContext const*,Phase::Zeppelin::ScsRadiationContext *,Phase::Zeppelin::PropagationMediumContext const*,Phase::Zeppelin::NormalizationContext const*)::$_0>,double ()(float,float)>::destroy(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void std::__function::__func<Phase::Zeppelin::HorizontalSliceDatabase::HorizontalSliceDatabase(Phase::Zeppelin::HorizontalSliceDatabaseContext const*,Phase::Zeppelin::ScsRadiationContext *,Phase::Zeppelin::PropagationMediumContext const*,Phase::Zeppelin::NormalizationContext const*)::$_0,std::allocator<Phase::Zeppelin::HorizontalSliceDatabase::HorizontalSliceDatabase(Phase::Zeppelin::HorizontalSliceDatabaseContext const*,Phase::Zeppelin::ScsRadiationContext *,Phase::Zeppelin::PropagationMediumContext const*,Phase::Zeppelin::NormalizationContext const*)::$_0>,double ()(float,float)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

double std::__function::__func<Phase::Zeppelin::HorizontalSliceDatabase::HorizontalSliceDatabase(Phase::Zeppelin::HorizontalSliceDatabaseContext const*,Phase::Zeppelin::ScsRadiationContext *,Phase::Zeppelin::PropagationMediumContext const*,Phase::Zeppelin::NormalizationContext const*)::$_0,std::allocator<Phase::Zeppelin::HorizontalSliceDatabase::HorizontalSliceDatabase(Phase::Zeppelin::HorizontalSliceDatabaseContext const*,Phase::Zeppelin::ScsRadiationContext *,Phase::Zeppelin::PropagationMediumContext const*,Phase::Zeppelin::NormalizationContext const*)::$_0>,double ()(float,float)>::operator()(uint64_t a1, float *a2, float *a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(float **)(a1 + 8);
  float v4 = *(float **)(a1 + 16);
  if (v3 == v4)
  {
    float v5 = *(float **)(a1 + 8);
  }
  else
  {
    float v5 = *(float **)(a1 + 8);
    while (*v5 != *a3)
    {
      if (++v5 == v4)
      {
        float v5 = *(float **)(a1 + 16);
        break;
      }
    }
  }
  if (v5 == v4)
  {
    __int16 v9 = **(NSObject ***)(Phase::Logger::GetInstance((Phase::Logger *)a1) + 928);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      int v11 = 136315394;
      float v12 = "ZeppelinContexts.cpp";
      __int16 v13 = 1024;
      int v14 = 616;
      _os_log_impl(&dword_221E5E000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [(it == centerFreqs.end()) is true]: ErrorDescriptions::kErrDescr_nonexistingFrequency", (uint8_t *)&v11, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, (const char *)Phase::Zeppelin::ErrorDescriptions::kErrDescr_nonexistingFrequency);
  }
  long double v6 = Phase::Zeppelin::SCSRadiationModel::ComputeDirectionalResponse(*(Phase::Logger **)(a1 + 32), *(Phase::Zeppelin::SCSRadiationSphereSamplingDependentPrecomputedData ***)(a1 + 40), (unint64_t)((char *)v5 - (char *)v3) >> 2, *a2);

  return hypot(v6, v7);
}

void sub_22209DA38(_Unwind_Exception *exception_object)
{
}

Phase::Logger *Phase::GetBandsFromCenterFrequencies<std::__wrap_iter<double const*>,double>(double **a1, double *a2, double *a3)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  uint64_t v6 = (char *)a3 - (char *)a2;
  int64_t v7 = a3 - a2;
  *(void *)uint64_t v39 = 0;
  *(void *)&v39[8] = 0;
  __n128 result = (Phase::Logger *)std::vector<Phase::FrequencyBand<double>>::vector(a1, v7, v39);
  __int16 v9 = *a1;
  **a1 = 10.0;
  if (v7 == 31)
  {
    if (a2 == a3)
    {
      BOOL v13 = 0;
      BOOL v18 = 1;
    }
    else
    {
      uint64_t v15 = a2 + 1;
      int v16 = (float *)&Phase::sThirdOctaveBandFrequencies;
      do
      {
        float v17 = *v16++;
        BOOL v18 = *(v15 - 1) == v17;
        BOOL v19 = *(v15 - 1) != v17 || v15 == a3;
        ++v15;
      }
      while (!v19);
      BOOL v13 = 0;
    }
  }
  else
  {
    if (v7 != 10)
    {
      BOOL v13 = 0;
LABEL_20:
      BOOL v18 = 0;
      goto LABEL_21;
    }
    if (a2 != a3)
    {
      int v10 = a2 + 1;
      int v11 = (float *)&Phase::sOctaveBandFrequencies;
      do
      {
        float v12 = *v11++;
        BOOL v13 = *(v10 - 1) == v12;
        BOOL v14 = *(v10 - 1) != v12 || v10 == a3;
        ++v10;
      }
      while (!v14);
      goto LABEL_20;
    }
    BOOL v18 = 0;
    BOOL v13 = 1;
  }
LABEL_21:
  if (v6 >= 1)
  {
    int64_t v20 = 0;
    int64_t v21 = v7 - 1;
    if (v7 <= 1) {
      uint64_t v22 = 1;
    }
    else {
      uint64_t v22 = v7;
    }
    uint64_t v23 = v9 + 2;
    uint64_t v24 = a2;
    do
    {
      double v25 = *v24;
      if (v13)
      {
        double v26 = fmin(v25 + v25 / 1.41421356 * 0.5, 22000.0);
        double v27 = 20.3630682;
      }
      else if (v18)
      {
        double v26 = fmin(v25 + v25 / 4.24264069 * 0.5, 22000.0);
        double v27 = 17.6429774;
      }
      else
      {
        if ((*(void *)&v25 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
        {
          int v29 = **(NSObject ***)(Phase::Logger::GetInstance(result) + 1136);
          if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
          {
            double v30 = *v24;
            *(_DWORD *)uint64_t v39 = 136315650;
            *(void *)&void v39[4] = "FrequencyResponse.hpp";
            *(_WORD *)&v39[12] = 1024;
            *(_DWORD *)&v39[14] = 99;
            __int16 v40 = 2048;
            double v41 = v30;
            _os_log_impl(&dword_221E5E000, v29, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [!std::isfinite(inFrequenciesFirst[i]) is true]: \"GetBandsFromCenterFrequencies: bad center frequency: %fHz\"", v39, 0x1Cu);
          }
          exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "GetBandsFromCenterFrequencies: bad center frequency: %fHz");
LABEL_56:
          exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
        }
        if (v25 < 10.0)
        {
          uint64_t v34 = **(NSObject ***)(Phase::Logger::GetInstance(result) + 1136);
          if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
          {
            double v35 = *v24;
            *(_DWORD *)uint64_t v39 = 136315906;
            *(void *)&void v39[4] = "FrequencyResponse.hpp";
            *(_WORD *)&v39[12] = 1024;
            *(_DWORD *)&v39[14] = 103;
            __int16 v40 = 2048;
            double v41 = v35;
            __int16 v42 = 2048;
            uint64_t v43 = 0x4024000000000000;
            _os_log_impl(&dword_221E5E000, v34, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [inFrequenciesFirst[i] < lowestSupportedFreqInHz is true]: \"GetBandsFromCenterFrequencies: center frequency: %fHz cannot be below lowest supported frequency: %fHz\"", v39, 0x26u);
          }
          exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "GetBandsFromCenterFrequencies: center frequency: %fHz cannot be below lowest supported frequency: %fHz");
          goto LABEL_56;
        }
        if (v25 > 22000.0)
        {
          __int16 v32 = **(NSObject ***)(Phase::Logger::GetInstance(result) + 1136);
          if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
          {
            double v33 = *v24;
            *(_DWORD *)uint64_t v39 = 136315906;
            *(void *)&void v39[4] = "FrequencyResponse.hpp";
            *(_WORD *)&v39[12] = 1024;
            *(_DWORD *)&v39[14] = 107;
            __int16 v40 = 2048;
            double v41 = v33;
            __int16 v42 = 2048;
            uint64_t v43 = 0x40D57C0000000000;
            _os_log_impl(&dword_221E5E000, v32, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [inFrequenciesFirst[i] > highestSupportedFreqInHz is true]: \"GetBandsFromCenterFrequencies: center frequency: %fHz cannot be above highest supported frequency: %fHz\"", v39, 0x26u);
          }
          exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "GetBandsFromCenterFrequencies: center frequency: %fHz cannot be above highest supported frequency: %fHz");
          goto LABEL_56;
        }
        if (v20)
        {
          uint64_t v28 = (v20 - 1);
          if (a2[v28] >= v25)
          {
            long long v36 = **(NSObject ***)(Phase::Logger::GetInstance(result) + 1136);
            if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
            {
              double v37 = a2[v28];
              double v38 = *v24;
              *(_DWORD *)uint64_t v39 = 136315906;
              *(void *)&void v39[4] = "FrequencyResponse.hpp";
              *(_WORD *)&v39[12] = 1024;
              *(_DWORD *)&v39[14] = 111;
              __int16 v40 = 2048;
              double v41 = v37;
              __int16 v42 = 2048;
              uint64_t v43 = *(void *)&v38;
              _os_log_impl(&dword_221E5E000, v36, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [i > 0 && inFrequenciesFirst[i - 1] >= inFrequenciesFirst[i] is true]: \"GetBandsFromCenterFrequencies: center frequencies are not in ascending order. %fHz is before %fHz\"", v39, 0x26u);
            }
            exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(exception, "GetBandsFromCenterFrequencies: center frequencies are not in ascending order. %fHz is before %fHz");
            goto LABEL_56;
          }
        }
        double v27 = 10.0;
        if (v21 <= v20) {
          double v26 = 22000.0;
        }
        else {
          double v26 = v25 * sqrt(v24[1] / v25);
        }
      }
      *(v23 - 1) = v26;
      *__int16 v9 = v27;
      if (v21 > v20) {
        *uint64_t v23 = v26;
      }
      ++v20;
      ++v24;
      v23 += 2;
    }
    while (v22 != v20);
  }
  return result;
}

void sub_22209DF48(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  float v4 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

uint64_t ATThreadSafeHeadTrackerGetSharedInstance()
{
  return MEMORY[0x270EE1F40]();
}

uint64_t ATThreadSafeHeadTrackerPredictLatestTransform()
{
  return MEMORY[0x270EE1F48]();
}

AudioComponent AudioComponentFindNext(AudioComponent inComponent, const AudioComponentDescription *inDesc)
{
  return (AudioComponent)MEMORY[0x270EE2048](inComponent, inDesc);
}

OSStatus AudioComponentInstanceDispose(AudioComponentInstance inInstance)
{
  return MEMORY[0x270EE2058](inInstance);
}

OSStatus AudioComponentInstanceNew(AudioComponent inComponent, AudioComponentInstance *outInstance)
{
  return MEMORY[0x270EE2068](inComponent, outInstance);
}

OSStatus AudioFileClose(AudioFileID inAudioFile)
{
  return MEMORY[0x270EE20D8](inAudioFile);
}

OSStatus AudioFileOpenWithCallbacks(void *inClientData, AudioFile_ReadProc inReadFunc, AudioFile_WriteProc inWriteFunc, AudioFile_GetSizeProc inGetSizeFunc, AudioFile_SetSizeProc inSetSizeFunc, AudioFileTypeID inFileTypeHint, AudioFileID *outAudioFile)
{
  return MEMORY[0x270EE2128](inClientData, inReadFunc, inWriteFunc, inGetSizeFunc, inSetSizeFunc, *(void *)&inFileTypeHint, outAudioFile);
}

OSStatus AudioFormatGetProperty(AudioFormatPropertyID inPropertyID, UInt32 inSpecifierSize, const void *inSpecifier, UInt32 *ioPropertyDataSize, void *outPropertyData)
{
  return MEMORY[0x270EE2148](*(void *)&inPropertyID, *(void *)&inSpecifierSize, inSpecifier, ioPropertyDataSize, outPropertyData);
}

OSStatus AudioFormatGetPropertyInfo(AudioFormatPropertyID inPropertyID, UInt32 inSpecifierSize, const void *inSpecifier, UInt32 *outPropertyDataSize)
{
  return MEMORY[0x270EE2150](*(void *)&inPropertyID, *(void *)&inSpecifierSize, inSpecifier, outPropertyDataSize);
}

OSStatus AudioUnitGetProperty(AudioUnit inUnit, AudioUnitPropertyID inID, AudioUnitScope inScope, AudioUnitElement inElement, void *outData, UInt32 *ioDataSize)
{
  return MEMORY[0x270EE22A8](inUnit, *(void *)&inID, *(void *)&inScope, *(void *)&inElement, outData, ioDataSize);
}

OSStatus AudioUnitRender(AudioUnit inUnit, AudioUnitRenderActionFlags *ioActionFlags, const AudioTimeStamp *inTimeStamp, UInt32 inOutputBusNumber, UInt32 inNumberFrames, AudioBufferList *ioData)
{
  return MEMORY[0x270EE22D0](inUnit, ioActionFlags, inTimeStamp, *(void *)&inOutputBusNumber, *(void *)&inNumberFrames, ioData);
}

OSStatus AudioUnitSetParameter(AudioUnit inUnit, AudioUnitParameterID inID, AudioUnitScope inScope, AudioUnitElement inElement, AudioUnitParameterValue inValue, UInt32 inBufferOffsetInFrames)
{
  return MEMORY[0x270EE22E0](inUnit, *(void *)&inID, *(void *)&inScope, *(void *)&inElement, *(void *)&inBufferOffsetInFrames, inValue);
}

uint64_t CACentralStateDumpUnregisterSubsystem()
{
  return MEMORY[0x270EE22F8]();
}

uint64_t CAGetDeviceOrientation()
{
  return MEMORY[0x270EE2308]();
}

uint64_t CARegisterDeviceOrientation()
{
  return MEMORY[0x270EE2310]();
}

uint64_t CAReportingClientSendSingleMessage()
{
  return MEMORY[0x270F91148]();
}

uint64_t CAUnregisterDeviceOrientation()
{
  return MEMORY[0x270EE2320]();
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x270EE4528]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x270EE4530](BOOLean);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x270EE4908](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x270EE4A30](cf);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x270EE4E10](cf);
}

CFStringRef CFStringCreateWithBytes(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation)
{
  return (CFStringRef)MEMORY[0x270EE50D0](alloc, bytes, numBytes, *(void *)&encoding, isExternalRepresentation);
}

uint64_t CFStringCreateWithCAOrientation()
{
  return MEMORY[0x270EE2330]();
}

CFIndex CFStringGetBytes(CFStringRef theString, CFRange range, CFStringEncoding encoding, UInt8 lossByte, Boolean isExternalRepresentation, UInt8 *buffer, CFIndex maxBufLen, CFIndex *usedBufLen)
{
  return MEMORY[0x270EE5170](theString, range.location, range.length, *(void *)&encoding, lossByte, isExternalRepresentation, buffer, maxBufLen);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x270EE5180](theString, *(void *)&encoding);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x270EE51D8](theString);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x270EE5218]();
}

CFURLRef CFURLCopyAbsoluteURL(CFURLRef relativeURL)
{
  return (CFURLRef)MEMORY[0x270EE5320](relativeURL);
}

CFStringRef CFURLCopyFileSystemPath(CFURLRef anURL, CFURLPathStyle pathStyle)
{
  return (CFStringRef)MEMORY[0x270EE5328](anURL, pathStyle);
}

CFURLRef CFURLCreateFromFileSystemRepresentationRelativeToBase(CFAllocatorRef allocator, const UInt8 *buffer, CFIndex bufLen, Boolean isDirectory, CFURLRef baseURL)
{
  return (CFURLRef)MEMORY[0x270EE53C8](allocator, buffer, bufLen, isDirectory, baseURL);
}

CFURLRef CFURLCreateWithBytes(CFAllocatorRef allocator, const UInt8 *URLBytes, CFIndex length, CFStringEncoding encoding, CFURLRef baseURL)
{
  return (CFURLRef)MEMORY[0x270EE53E8](allocator, URLBytes, length, *(void *)&encoding, baseURL);
}

CFTypeID CFURLGetTypeID(void)
{
  return MEMORY[0x270EE5448]();
}

OSStatus ExtAudioFileWrapAudioFileID(AudioFileID inFileID, Boolean inForWriting, ExtAudioFileRef *outExtAudioFile)
{
  return MEMORY[0x270EE23C8](inFileID, inForWriting, outExtAudioFile);
}

uint64_t ExtendedAudioBufferList_Create()
{
  return MEMORY[0x270EE23E8]();
}

uint64_t ExtendedAudioBufferList_Destroy()
{
  return MEMORY[0x270EE23F0]();
}

uint64_t ExtendedAudioBufferList_Prepare()
{
  return MEMORY[0x270EE23F8]();
}

uint64_t MGCopyAnswer()
{
  return MEMORY[0x270F95F98]();
}

uint64_t MGGetBoolAnswer()
{
  return MEMORY[0x270F95FB8]();
}

uint64_t MGGetSInt32Answer()
{
  return MEMORY[0x270F95FE8]();
}

uint64_t MGIsQuestionValid()
{
  return MEMORY[0x270F96018]();
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x270EF2C08](aClass);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return (NSString *)MEMORY[0x270EF2C38](aSelector);
}

CFTypeRef SecTaskCopyValueForEntitlement(SecTaskRef task, CFStringRef entitlement, CFErrorRef *error)
{
  return (CFTypeRef)MEMORY[0x270EFDCB0](task, entitlement, error);
}

SecTaskRef SecTaskCreateFromSelf(CFAllocatorRef allocator)
{
  return (SecTaskRef)MEMORY[0x270EFDCD0](allocator);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x270ED7CD8](aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

uint64_t IR::IRDataLoader::getPersonalizedHRTFStatus(IR::IRDataLoader *this)
{
  return MEMORY[0x270F91070](this);
}

uint64_t IR::IRDataLoader::rebuildPersonalizedHRTFCache(IR::IRDataLoader *this)
{
  return MEMORY[0x270F91078](this);
}

uint64_t IR::IRDataLoader::checkIfPersonalizedHRTFIsAllowed(IR::IRDataLoader *this)
{
  return MEMORY[0x270F91080](this);
}

uint64_t IR::IRDataLoader::addPersonalizedHRTFListenerCallback()
{
  return MEMORY[0x270F91088]();
}

uint64_t IR::IRDataLoader::removePersonalizedHRTFListenerCallback()
{
  return MEMORY[0x270F91090]();
}

uint64_t IR::IRDataLoader::load()
{
  return MEMORY[0x270F91098]();
}

uint64_t IR::IRDataLoader::instance(IR::IRDataLoader *this)
{
  return MEMORY[0x270F910A0](this);
}

uint64_t IR::IRCoordinates::set()
{
  return MEMORY[0x270F910A8]();
}

uint64_t IR::IRCoordinates::IRCoordinates(IR::IRCoordinates *this)
{
  return MEMORY[0x270F910B0](this);
}

uint64_t IR::getPresetDataAttributes()
{
  return MEMORY[0x270F910B8]();
}

uint64_t IR::IRData::getCoordinateTree(IR::IRData *this)
{
  return MEMORY[0x270F910C0](this);
}

uint64_t caulk::concurrent::messenger::enqueue()
{
  return MEMORY[0x270F87AB8]();
}

uint64_t caulk::deferred_logger::create_message(caulk::deferred_logger *this, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270F87AD8](this, a2, a3);
}

uint64_t caulk::deferred_logger::create_v(caulk::deferred_logger *this, void *a2)
{
  return MEMORY[0x270F87AE0](this, a2);
}

uint64_t caulk::pooled_semaphore_mutex::_lock(caulk::pooled_semaphore_mutex *this)
{
  return MEMORY[0x270F87AE8](this);
}

uint64_t caulk::pooled_semaphore_mutex::_unlock(caulk::pooled_semaphore_mutex *this)
{
  return MEMORY[0x270F87AF0](this);
}

uint64_t caulk::pooled_semaphore_mutex::try_lock(caulk::pooled_semaphore_mutex *this)
{
  return MEMORY[0x270F87AF8](this);
}

uint64_t caulk::pooled_semaphore_mutex::pooled_semaphore_mutex(caulk::pooled_semaphore_mutex *this)
{
  return MEMORY[0x270F87B00](this);
}

uint64_t caulk::alloc::global_page_cache::instance(caulk::alloc::global_page_cache *this)
{
  return MEMORY[0x270F87B98](this);
}

uint64_t caulk::alloc::details::caching_page_allocator_base::deallocate()
{
  return MEMORY[0x270F87BA0]();
}

uint64_t caulk::alloc::details::caching_page_allocator_base::allocate(caulk::alloc::details::caching_page_allocator_base *this)
{
  return MEMORY[0x270F87BA8](this);
}

uint64_t caulk::platform::process_name(caulk::platform *this)
{
  return MEMORY[0x270F87BF0](this);
}

uint64_t AudioDSP::Core::VBAP::calculateVBAPGains()
{
  return MEMORY[0x270F910E0]();
}

uint64_t AudioDSP::Core::VBAP::VBAP()
{
  return MEMORY[0x270F910E8]();
}

void AudioDSP::Core::VBAP::~VBAP(AudioDSP::Core::VBAP *this)
{
}

uint64_t IR::IRData::getMaxDelay(IR::IRData *this)
{
  return MEMORY[0x270F910F8](this);
}

uint64_t IR::IRData::getFilterLength(IR::IRData *this)
{
  return MEMORY[0x270F91110](this);
}

uint64_t IR::IRData::getNumDimensions(IR::IRData *this)
{
  return MEMORY[0x270F91118](this);
}

uint64_t IR::IRData::getIRDataAttributes(IR::IRData *this)
{
  return MEMORY[0x270F91120](this);
}

uint64_t IR::IRData::getNumFiltersPerSpatialPoint(IR::IRData *this)
{
  return MEMORY[0x270F91130](this);
}

uint64_t IR::IRData::getInterpolatedTimeDomainCoeffs()
{
  return MEMORY[0x270F91140]();
}

std::string *__cdecl std::error_code::message(std::string *__return_ptr retstr, const std::error_code *this)
{
  return (std::string *)MEMORY[0x270F98210](retstr, this);
}

uint64_t std::stringbuf::str()
{
  return MEMORY[0x270F98268]();
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x270F982E8](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x270F982F8](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x270F98318](this, a2);
}

{
  return (std::logic_error *)MEMORY[0x270F98330](this, a2);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const std::string *a2)
{
  return (std::logic_error *)MEMORY[0x270F98320](this, a2);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const std::logic_error *a2)
{
  return (std::logic_error *)MEMORY[0x270F98340](this, a2);
}

void std::logic_error::~logic_error(std::logic_error *this)
{
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return (std::runtime_error *)MEMORY[0x270F983B0](this, a2);
}

{
  return (std::runtime_error *)MEMORY[0x270F983C8](this, a2);
}

void std::runtime_error::~runtime_error(std::runtime_error *this)
{
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x270F98428](this);
}

void std::__call_once(std::once_flag::_State_type *a1, void *a2, void (__cdecl *a3)(void *))
{
}

void std::this_thread::sleep_for (const std::chrono::nanoseconds *__ns)
{
}

std::__sp_mut *__cdecl std::__get_sp_mut(const void *a1)
{
  return (std::__sp_mut *)MEMORY[0x270F98450](a1);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x270F98458](__n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x270F98498](this, __s);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x270F984A0](this, __s, __n);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x270F984B8](this, __s);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x270F984E0](this, __pos, __s);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x270F984E8](this, __pos, __s, __n);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
}

std::string *__cdecl std::string::basic_string(std::string *this, const std::string *__str, std::string::size_type __pos, std::string::size_type __n, std::allocator<char> *__a)
{
  return (std::string *)MEMORY[0x270F98548](this, __str, __pos, __n, __a);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x270F98560](this, __str);
}

uint64_t std::filebuf::open()
{
  return MEMORY[0x270F98638]();
}

uint64_t std::filebuf::close()
{
  return MEMORY[0x270F98640]();
}

uint64_t std::filebuf::basic_filebuf()
{
  return MEMORY[0x270F98650]();
}

uint64_t std::filebuf::~filebuf()
{
  return MEMORY[0x270F98658]();
}

uint64_t std::istream::read()
{
  return MEMORY[0x270F98678]();
}

uint64_t std::istream::seekg()
{
  return MEMORY[0x270F98690]();
}

uint64_t std::istream::tellg()
{
  return MEMORY[0x270F98698]();
}

uint64_t std::istream::sentry::sentry()
{
  return MEMORY[0x270F986B0]();
}

uint64_t std::istream::~istream()
{
  return MEMORY[0x270F986D0]();
}

uint64_t std::istream::operator>>()
{
  return MEMORY[0x270F986F8]();
}

uint64_t std::ostream::put()
{
  return MEMORY[0x270F98740]();
}

uint64_t std::ostream::flush()
{
  return MEMORY[0x270F98748]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x270F98758]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x270F98760]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x270F98770]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x270F98778]();
}

{
  return MEMORY[0x270F98790]();
}

{
  return MEMORY[0x270F987A0]();
}

{
  return MEMORY[0x270F987A8]();
}

{
  return MEMORY[0x270F987B0]();
}

{
  return MEMORY[0x270F987B8]();
}

{
  return MEMORY[0x270F987C0]();
}

{
  return MEMORY[0x270F987D8]();
}

{
  return MEMORY[0x270F987E0]();
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x270F98870]();
}

uint64_t std::ofstream::open()
{
  return MEMORY[0x270F98878]();
}

void std::error_category::~error_category(std::error_category *this)
{
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x270F988A8]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x270F988B0]();
}

void std::recursive_mutex::lock(std::recursive_mutex *this)
{
}

void std::recursive_mutex::unlock(std::recursive_mutex *this)
{
}

std::recursive_mutex *__cdecl std::recursive_mutex::recursive_mutex(std::recursive_mutex *this)
{
  return (std::recursive_mutex *)MEMORY[0x270F98900](this);
}

void std::recursive_mutex::~recursive_mutex(std::recursive_mutex *this)
{
}

const std::error_category *std::system_category(void)
{
  return (const std::error_category *)MEMORY[0x270F98910]();
}

const std::error_category *std::generic_category(void)
{
  return (const std::error_category *)MEMORY[0x270F98918]();
}

void std::condition_variable::notify_all(std::condition_variable *this)
{
}

void std::condition_variable::wait(std::condition_variable *this, std::unique_lock<std::mutex> *__lk)
{
}

void std::condition_variable::~condition_variable(std::condition_variable *this)
{
}

void std::__shared_mutex_base::lock_shared(std::__shared_mutex_base *this)
{
}

void std::__shared_mutex_base::unlock_shared(std::__shared_mutex_base *this)
{
}

BOOL std::__shared_mutex_base::try_lock_shared(std::__shared_mutex_base *this)
{
  return MEMORY[0x270F989B8](this);
}

void std::__shared_mutex_base::lock(std::__shared_mutex_base *this)
{
}

void std::__shared_mutex_base::unlock(std::__shared_mutex_base *this)
{
}

BOOL std::__shared_mutex_base::try_lock(std::__shared_mutex_base *this)
{
  return MEMORY[0x270F989D0](this);
}

std::__shared_mutex_base *__cdecl std::__shared_mutex_base::__shared_mutex_base(std::__shared_mutex_base *this)
{
  return (std::__shared_mutex_base *)MEMORY[0x270F989D8](this);
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
}

std::__shared_weak_count *__cdecl std::__shared_weak_count::lock(std::__shared_weak_count *this)
{
  return (std::__shared_weak_count *)MEMORY[0x270F989E8](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
}

void std::__throw_system_error(int __ev, const char *__what_arg)
{
}

void std::mutex::lock(std::mutex *this)
{
}

void std::mutex::unlock(std::mutex *this)
{
}

void std::mutex::~mutex(std::mutex *this)
{
}

uint64_t std::__sort<std::__less<float,float> &,float *>()
{
  return MEMORY[0x270F98BE0]();
}

std::chrono::steady_clock::time_point std::chrono::steady_clock::now(void)
{
  return (std::chrono::steady_clock::time_point)MEMORY[0x270F98C18]();
}

void std::locale::~locale(std::locale *this)
{
}

void std::__sp_mut::lock(std::__sp_mut *this)
{
}

void std::__sp_mut::unlock(std::__sp_mut *this)
{
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x270F98DE8]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, int __val)
{
  return (std::string *)MEMORY[0x270F98E08](retstr, *(void *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unsigned int __val)
{
  return (std::string *)MEMORY[0x270F98E10](retstr, *(void *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, uint64_t __val)
{
  return (std::string *)MEMORY[0x270F98E18](retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  return (std::string *)MEMORY[0x270F98E20](retstr, __val);
}

std::bad_cast *__cdecl std::bad_cast::bad_cast(std::bad_cast *this)
{
  return (std::bad_cast *)MEMORY[0x270F98E48](this);
}

void std::bad_cast::~bad_cast(std::bad_cast *this)
{
}

void std::bad_alloc::~bad_alloc(std::bad_alloc *this)
{
}

void std::exception::~exception(std::exception *this)
{
}

void std::terminate(void)
{
}

void operator delete[]()
{
  while (1)
    ;
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete(void *__p, std::align_val_t a2)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void operator new[]()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz, const std::nothrow_t *a2)
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz, std::align_val_t a2)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x270F98EC0](thrown_size);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x270F98ED8](a1);
}

char *__cxa_demangle(const char *lpmangled, char *lpout, size_t *lpoutlen, int *lpstatus)
{
  return (char *)MEMORY[0x270F98EE8](lpmangled, lpout, lpoutlen, lpstatus);
}

void __cxa_end_catch(void)
{
}

void __cxa_free_exception(void *a1)
{
}

void *__cxa_get_exception_ptr(void *a1)
{
  return (void *)MEMORY[0x270F98F00](a1);
}

void __cxa_guard_abort(__guard *a1)
{
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x270F98F10](a1);
}

void __cxa_guard_release(__guard *a1)
{
}

void __cxa_rethrow(void)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

int *__error(void)
{
  return (int *)MEMORY[0x270ED7DC0]();
}

double __exp10(double a1)
{
  MEMORY[0x270ED7DC8](a1);
  return result;
}

float __exp10f(float a1)
{
  MEMORY[0x270ED7DD0](a1);
  return result;
}

simd_float4x4 __invert_f4(simd_float4x4 a1)
{
  MEMORY[0x270ED7E20]((__n128)a1.columns[0], (__n128)a1.columns[1], (__n128)a1.columns[2], (__n128)a1.columns[3]);
  result.columns[3].i64[1] = v8;
  result.columns[3].i64[0] = v7;
  result.columns[2].i64[1] = v6;
  result.columns[2].i64[0] = v5;
  result.columns[1].i64[1] = v4;
  result.columns[1].i64[0] = v3;
  result.columns[0].i64[1] = v2;
  result.columns[0].i64[0] = v1;
  return result;
}

__double2 __sincos_stret(double a1)
{
  MEMORY[0x270ED7E88](a1);
  result.__cosval = v2;
  result.__float sinval = v1;
  return result;
}

__float2 __sincosf_stret(float a1)
{
  MEMORY[0x270ED7E90](a1);
  result.__cosval = v2;
  result.__float sinval = v1;
  return result;
}

uint64_t __udivti3()
{
  return MEMORY[0x270ED7F10]();
}

uint64_t _os_assert_log()
{
  return MEMORY[0x270ED8050]();
}

uint64_t _os_crash()
{
  return MEMORY[0x270ED8060]();
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x270ED8070]();
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _os_log_pack_fill()
{
  return MEMORY[0x270ED80A0]();
}

uint64_t _os_log_pack_size()
{
  return MEMORY[0x270ED80A8]();
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
}

simd_float4 _simd_cos_f4(simd_float4 x)
{
  MEMORY[0x270ED81E8]((__n128)x);
  return result;
}

simd_float4 _simd_exp10_f4(simd_float4 x)
{
  MEMORY[0x270ED8238]((__n128)x);
  return result;
}

simd_float4 _simd_exp_f4(simd_float4 x)
{
  MEMORY[0x270ED8258]((__n128)x);
  return result;
}

simd_float4 _simd_log10_f4(simd_float4 x)
{
  MEMORY[0x270ED82A8]((__n128)x);
  return result;
}

simd_float4 _simd_pow_f4(simd_float4 x, simd_float4 y)
{
  MEMORY[0x270ED8320]((__n128)x, (__n128)y);
  return result;
}

simd_float4 _simd_sin_f4(simd_float4 x)
{
  MEMORY[0x270ED8348]((__n128)x);
  return result;
}

simd_float4 _simd_tan_f4(simd_float4 x)
{
  MEMORY[0x270ED8378]((__n128)x);
  return result;
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x270F76310]();
}

float acosf(float a1)
{
  MEMORY[0x270ED8598](a1);
  return result;
}

uint64_t analytics_send_event_lazy()
{
  return MEMORY[0x270F18A78]();
}

float asinf(float a1)
{
  MEMORY[0x270ED8618](a1);
  return result;
}

long double atan2(long double __y, long double __x)
{
  MEMORY[0x270ED86A8](__y, __x);
  return result;
}

float atan2f(float a1, float a2)
{
  MEMORY[0x270ED86B8](a1, a2);
  return result;
}

int backtrace(void **a1, int a2)
{
  return MEMORY[0x270ED8718](a1, *(void *)&a2);
}

char **__cdecl backtrace_symbols(void *const *a1, int a2)
{
  return (char **)MEMORY[0x270ED8730](a1, *(void *)&a2);
}

void bzero(void *a1, size_t a2)
{
}

long double cos(long double __x)
{
  MEMORY[0x270ED9128](__x);
  return result;
}

float cosf(float a1)
{
  MEMORY[0x270ED9130](a1);
  return result;
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_block_cancel(dispatch_block_t block)
{
}

dispatch_block_t dispatch_block_create(dispatch_block_flags_t flags, dispatch_block_t block)
{
  return (dispatch_block_t)MEMORY[0x270ED9278](flags, block);
}

void dispatch_block_notify(dispatch_block_t block, dispatch_queue_t queue, dispatch_block_t notification_block)
{
}

intptr_t dispatch_block_wait(dispatch_block_t block, dispatch_time_t timeout)
{
  return MEMORY[0x270ED92B0](block, timeout);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x270ED9318](identifier, flags);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x270ED9340]();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x270ED9448](attr, frequency);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x270ED9458](attr, *(void *)&qos_class, *(void *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x270ED9460](label, attr);
}

void dispatch_release(dispatch_object_t object)
{
}

void dispatch_set_target_queue(dispatch_object_t object, dispatch_queue_t queue)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x270ED95A8](when, delta);
}

int dladdr(const void *a1, Dl_info *a2)
{
  return MEMORY[0x270ED9610](a1, a2);
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x270ED9628](__path, *(void *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x270ED9648](__handle, __symbol);
}

long double exp(long double __x)
{
  MEMORY[0x270ED9858](__x);
  return result;
}

float expf(float a1)
{
  MEMORY[0x270ED9870](a1);
  return result;
}

long double fmod(long double __x, long double __y)
{
  MEMORY[0x270ED99D0](__x, __y);
  return result;
}

void free(void *a1)
{
}

pid_t getpid(void)
{
  return MEMORY[0x270ED9CE0]();
}

long double hypot(long double __x, long double __y)
{
  MEMORY[0x270ED9E58](__x, __y);
  return result;
}

uint64_t kdebug_trace()
{
  return MEMORY[0x270ED9F50]();
}

long double ldexp(long double __x, int __e)
{
  MEMORY[0x270EDA028](*(void *)&__e, __x);
  return result;
}

float ldexpf(float a1, int a2)
{
  MEMORY[0x270EDA030](*(void *)&a2, a1);
  return result;
}

long double log(long double __x)
{
  MEMORY[0x270EDA0A8](__x);
  return result;
}

long double log10(long double __x)
{
  MEMORY[0x270EDA0B0](__x);
  return result;
}

float log10f(float a1)
{
  MEMORY[0x270EDA0B8](a1);
  return result;
}

float log2f(float a1)
{
  MEMORY[0x270EDA0E0](a1);
  return result;
}

long double logb(long double __x)
{
  MEMORY[0x270EDA0E8](__x);
  return result;
}

float logf(float a1)
{
  MEMORY[0x270EDA0F8](a1);
  return result;
}

uint64_t mach_absolute_time(void)
{
  return MEMORY[0x270EDA138]();
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA388](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA390](size, type_id);
}

int malloc_type_posix_memalign(void **memptr, size_t alignment, size_t size, malloc_type_id_t type_id)
{
  return MEMORY[0x270EDA398](memptr, alignment, size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA3A0](ptr, size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x270EDA458](__s, *(void *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x270EDA468](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x270EDA470](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x270EDA488](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x270EDA498](__b, *(void *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
}

void memset_pattern8(void *__b, const void *__pattern8, size_t __len)
{
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return (void *)MEMORY[0x270EDA598](a1, a2, *(void *)&a3, *(void *)&a4, *(void *)&a5, a6);
}

long double modf(long double __x, long double *__y)
{
  MEMORY[0x270EDA5A8](__y, __x);
  return result;
}

float modff(float a1, float *a2)
{
  MEMORY[0x270EDA5B0](a2, a1);
  return result;
}

int msync(void *a1, size_t a2, int a3)
{
  return MEMORY[0x270EDA5E0](a1, a2, *(void *)&a3);
}

int munmap(void *a1, size_t a2)
{
  return MEMORY[0x270EDA5F8](a1, a2);
}

float nextafterf(float a1, float a2)
{
  MEMORY[0x270EDA718](a1, a2);
  return result;
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x270F9A528](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x270F9A540]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x270F9A568](a1);
}

{
  MEMORY[0x270F9A570](context);
}

{
  return (void *)MEMORY[0x270F9A588]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A590](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x270F9A598](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x270F9A5A8]();
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void objc_end_catch(void)
{
}

void objc_enumerationMutation(id obj)
{
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x270F9A658](name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x270F9A678](self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x270F9A688](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x270F9A6B0](location);
}

void objc_moveWeak(id *to, id *from)
{
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6E8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x270F9A6F8]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x270F9A700]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x270F9A710]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x270F9A728]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x270F9A870](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x270F9A880](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A888](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A890](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x270F9A898](a1);
}

void objc_setProperty_atomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x270F9A9F8](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x270F9AA18](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x270F9AA20](obj);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x270EDA9A0](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x270EDA9D0](oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x270EDAA58](log);
}

os_signpost_id_t os_signpost_id_generate(os_log_t log)
{
  return MEMORY[0x270EDAA60](log);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

BOOL os_unfair_lock_trylock(os_unfair_lock_t lock)
{
  return MEMORY[0x270EDAAD8](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

uint64_t os_unfair_recursive_lock_lock_with_options()
{
  return MEMORY[0x270EDAAF0]();
}

uint64_t os_unfair_recursive_lock_unlock()
{
  return MEMORY[0x270EDAB08]();
}

long double pow(long double __x, long double __y)
{
  MEMORY[0x270EDACF8](__x, __y);
  return result;
}

float powf(float a1, float a2)
{
  MEMORY[0x270EDAD00](a1, a2);
  return result;
}

pthread_t pthread_self(void)
{
  return (pthread_t)MEMORY[0x270EDB010]();
}

int rand(void)
{
  return MEMORY[0x270EDB0D8]();
}

long double scalbn(long double __x, int __y)
{
  MEMORY[0x270EDB2F0](*(void *)&__y, __x);
  return result;
}

int sched_yield(void)
{
  return MEMORY[0x270EDB320]();
}

long double sin(long double __x)
{
  MEMORY[0x270EDB4E8](__x);
  return result;
}

float sinf(float a1)
{
  MEMORY[0x270EDB4F0](a1);
  return result;
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x270EDB510](__str, __size, __format);
}

void srand(unsigned int a1)
{
}

char *__cdecl strcat(char *__s1, const char *__s2)
{
  return (char *)MEMORY[0x270EDB5A0](__s1, __s2);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x270EDB5B0](__s1, __s2);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x270EDB610](__s);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x270EDB648](__dst, __src, __n);
}

long double tan(long double __x)
{
  MEMORY[0x270EDB810](__x);
  return result;
}

float tanf(float a1)
{
  MEMORY[0x270EDB818](a1);
  return result;
}

time_t time(time_t *a1)
{
  return MEMORY[0x270EDB930](a1);
}

int usleep(useconds_t a1)
{
  return MEMORY[0x270EDB9E8](*(void *)&a1);
}

void uuid_generate(uuid_t out)
{
}

void uuid_unparse(const uuid_t uu, uuid_string_t out)
{
}

void vDSP_DFT_DestroySetup(vDSP_DFT_Setup __Setup)
{
}

void vDSP_DFT_Execute(const vDSP_DFT_SetupStruct *__Setup, const float *__Ir, const float *__Ii, float *__Or, float *__Oi)
{
}

vDSP_DFT_Setup vDSP_DFT_zrop_CreateSetup(vDSP_DFT_Setup __Previous, vDSP_Length __Length, vDSP_DFT_Direction __Direction)
{
  return (vDSP_DFT_Setup)MEMORY[0x270EDE950](__Previous, __Length, *(void *)&__Direction);
}

void vDSP_biquad(const vDSP_biquad_SetupStruct *__Setup, float *__Delay, const float *__X, vDSP_Stride __IX, float *__Y, vDSP_Stride __IY, vDSP_Length __N)
{
}

void vDSP_biquadD(const vDSP_biquad_SetupStructD *__Setup, double *__Delay, const double *__X, vDSP_Stride __IX, double *__Y, vDSP_Stride __IY, vDSP_Length __N)
{
}

vDSP_biquad_Setup vDSP_biquad_CreateSetup(const double *__Coefficients, vDSP_Length __M)
{
  return (vDSP_biquad_Setup)MEMORY[0x270EDE968](__Coefficients, __M);
}

vDSP_biquad_SetupD vDSP_biquad_CreateSetupD(const double *__Coefficients, vDSP_Length __M)
{
  return (vDSP_biquad_SetupD)MEMORY[0x270EDE970](__Coefficients, __M);
}

void vDSP_biquad_DestroySetup(vDSP_biquad_Setup __setup)
{
}

void vDSP_biquad_DestroySetupD(vDSP_biquad_SetupD __setup)
{
}

void vDSP_conv(const float *__A, vDSP_Stride __IA, const float *__F, vDSP_Stride __IF, float *__C, vDSP_Stride __IC, vDSP_Length __N, vDSP_Length __P)
{
}

void vDSP_ctoz(const DSPComplex *__C, vDSP_Stride __IC, const DSPSplitComplex *__Z, vDSP_Stride __IZ, vDSP_Length __N)
{
}

void vDSP_dotpr(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Length __N)
{
}

void vDSP_maxmgvi(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Length *__I, vDSP_Length __N)
{
}

void vDSP_maxv(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Length __N)
{
}

void vDSP_maxvi(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Length *__I, vDSP_Length __N)
{
}

void vDSP_meanv(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Length __N)
{
}

void vDSP_measqv(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Length __N)
{
}

void vDSP_rmsqv(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Length __N)
{
}

void vDSP_sve(const float *__A, vDSP_Stride __I, float *__C, vDSP_Length __N)
{
}

void vDSP_svesq(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Length __N)
{
}

void vDSP_vabs(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vadd(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vclr(float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vclrD(double *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vdpsp(const double *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vfill(const float *__A, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vflt16(const __int16 *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vflt32(const int *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vmul(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vrampmul(const float *__I, vDSP_Stride __IS, float *__Start, const float *__Step, float *__O, vDSP_Stride __OS, vDSP_Length __N)
{
}

void vDSP_vrampmul2(const float *__I0, const float *__I1, vDSP_Stride __IS, float *__Start, const float *__Step, float *__O0, float *__O1, vDSP_Stride __OS, vDSP_Length __N)
{
}

void vDSP_vrampmuladd(const float *__I, vDSP_Stride __IS, float *__Start, const float *__Step, float *__O, vDSP_Stride __OS, vDSP_Length __N)
{
}

void vDSP_vrampmuladd2(const float *__I0, const float *__I1, vDSP_Stride __IS, float *__Start, const float *__Step, float *__O0, float *__O1, vDSP_Stride __OS, vDSP_Length __N)
{
}

void vDSP_vrvrs(float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vsadd(const float *__A, vDSP_Stride __IA, const float *__B, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vsma(const float *__A, vDSP_Stride __IA, const float *__B, const float *__C, vDSP_Stride __IC, float *__D, vDSP_Stride __ID, vDSP_Length __N)
{
}

void vDSP_vsmul(const float *__A, vDSP_Stride __IA, const float *__B, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_ztoc(const DSPSplitComplex *__Z, vDSP_Stride __IZ, DSPComplex *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_zvma(const DSPSplitComplex *__A, vDSP_Stride __IA, const DSPSplitComplex *__B, vDSP_Stride __IB, const DSPSplitComplex *__C, vDSP_Stride __IC, const DSPSplitComplex *__D, vDSP_Stride __ID, vDSP_Length __N)
{
}

void vDSP_zvmul(const DSPSplitComplex *__A, vDSP_Stride __IA, const DSPSplitComplex *__B, vDSP_Stride __IB, const DSPSplitComplex *__C, vDSP_Stride __IC, vDSP_Length __N, int __Conjugate)
{
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  return MEMORY[0x270EDBB18](__str, __size, __format, a4);
}

void vvcosf(float *a1, const float *a2, const int *a3)
{
}

void vvexpf(float *a1, const float *a2, const int *a3)
{
}

void vvlogf(float *a1, const float *a2, const int *a3)
{
}

void vvsinf(float *a1, const float *a2, const int *a3)
{
}

__int32 *__cdecl wmemchr(__int32 *__s, __int32 __c, size_t __n)
{
  return (__int32 *)MEMORY[0x270EDBBE8](__s, *(void *)&__c, __n);
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return (xpc_object_t)MEMORY[0x270EDC008](keys, values, count);
}

void xpc_dictionary_set_double(xpc_object_t xdict, const char *key, double value)
{
}

void xpc_dictionary_set_uint64(xpc_object_t xdict, const char *key, uint64_t value)
{
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return (xpc_type_t)MEMORY[0x270EDC200](object);
}