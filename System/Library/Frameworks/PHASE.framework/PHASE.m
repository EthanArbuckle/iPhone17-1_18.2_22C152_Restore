uint64_t Phase::Zeppelin::AcousticsUtils::GetDefaultThirdOctaveBandCenterFrequencies(Phase::Zeppelin::AcousticsUtils *this)
{
  {
    operator new();
  }
  return Phase::Zeppelin::AcousticsUtils::GetDefaultThirdOctaveBandCenterFrequencies(void)::centerFreqs;
}

void sub_221E60460(_Unwind_Exception *a1)
{
  MEMORY[0x223C938A0](v1, 0x80C40D6874129);
  _Unwind_Resume(a1);
}

float Phase::Zeppelin::AcousticsUtils::ComputeWavenumber(Phase::Zeppelin::AcousticsUtils *this, float a2, float a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (a2 <= 0.0)
  {
    v4 = **(NSObject ***)(Phase::Logger::GetInstance(this) + 928);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v8 = 136315394;
      v9 = "AcousticsUtils.cpp";
      __int16 v10 = 1024;
      int v11 = 44;
      _os_log_impl(&dword_221E5E000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [(0.0 >= inFrequency) is true]: ErrorDescriptions::kErrDescr_nonPositiveFrequency", (uint8_t *)&v8, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, (const char *)Phase::Zeppelin::ErrorDescriptions::kErrDescr_nonPositiveFrequency);
  }
  if (a3 <= 0.0)
  {
    v6 = **(NSObject ***)(Phase::Logger::GetInstance(this) + 928);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      int v8 = 136315394;
      v9 = "AcousticsUtils.cpp";
      __int16 v10 = 1024;
      int v11 = 49;
      _os_log_impl(&dword_221E5E000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [(0.0f >= inSpeedOfSound) is true]: ErrorDescriptions::kErrDescr_nonPositiveSpeedOfSound", (uint8_t *)&v8, 0x12u);
    }
    v7 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](v7, (const char *)Phase::Zeppelin::ErrorDescriptions::kErrDescr_nonPositiveSpeedOfSound);
  }
  return a2 * 6.28318531 / a3;
}

void sub_221E6065C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::invalid_argument::invalid_argument[abi:ne180100](std::logic_error *a1, const char *a2)
{
  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
  return result;
}

void *std::vector<float>::__init_with_size[abi:ne180100]<float const*,float const*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    v6 = result;
    result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_221E60710(_Unwind_Exception *exception_object)
{
  v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<float>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void std::vector<float>::__throw_length_error[abi:ne180100]()
{
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(4 * a2);
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
}

void sub_221E60808(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C388] + 16);
  return result;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
}

void Phase::ActionTreeServerCallbackInterface::SubmitGeneratorPreparedResult(uint64_t a1, os_signpost_id_t a2, uint64_t a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  __src[0] = a2;
  __src[1] = a3;
  __src[2] = mach_absolute_time();
  Phase::MessagePipeWriter<Phase::ActionTreeClientCommand>::WriteMessage((void *)(a1 + 32), 1u, __src, 0x18uLL);
  Instance = (Phase::Logger *)Phase::Logger::GetInstance(v5);
  if (*((unsigned char *)Instance + 696))
  {
    uint64_t v7 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(Instance)
                                                                                       + 688)));
    size_t v8 = v7;
    if (a2 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v7))
    {
      *(_DWORD *)buf = 134217984;
      os_signpost_id_t v11 = a2;
      _os_signpost_emit_with_name_impl(&dword_221E5E000, v8, OS_SIGNPOST_INTERVAL_END, a2, "Phase_Generator_Prepare", "Generator ID %llu", buf, 0xCu);
    }
  }
}

uint64_t Phase::ActionTreeServerCallbackInterface::SubmitGeneratorCompletedResult(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  __src[0] = a2;
  __src[1] = a3;
  __src[2] = *a4;
  Phase::MessagePipeWriter<Phase::ActionTreeClientCommand>::WriteMessage((void *)(a1 + 32), 2u, __src, 0x18uLL);
  (*(void (**)(void, uint64_t, uint64_t, void))(**(void **)(a1 + 96) + 16))(*(void *)(a1 + 96), a2, a3, 0);
  uint64_t v7 = *(uint64_t (**)(void))(**(void **)(a1 + 96) + 40);

  return v7();
}

void Phase::ActionTreeServerCallbackInterface::SubmitGeneratorSeekCompletedResult(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  __src[0] = a2;
  __src[1] = a3;
  int v5 = a4;
  Phase::MessagePipeWriter<Phase::ActionTreeClientCommand>::WriteMessage((void *)(a1 + 32), 3u, __src, 0x18uLL);
}

void Phase::ActionTreeServerCallbackInterface::SubmitGeneratorPlayStateChanged(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  __src[0] = a2;
  __src[1] = a3;
  int v5 = a4;
  Phase::MessagePipeWriter<Phase::ActionTreeClientCommand>::WriteMessage((void *)(a1 + 32), 5u, __src, 0x18uLL);
}

uint64_t Phase::ActionTreeServerCallbackInterface::GetResidentBufferForGenerator(Phase::ActionTreeServerCallbackInterface *this, UniqueObjectId a2)
{
  uint64_t v2 = *((void *)this + 12);
  if (!v2) {
    std::terminate();
  }
  v3 = *(uint64_t (**)(void))(*(void *)v2 + 48);

  return v3();
}

uint64_t Phase::ActionTreeServerCallbackInterface::GeneratorStreamSeek(Phase::ActionTreeServerCallbackInterface *this, UniqueObjectId a2, __n128 a3, PHASEPlaybackMode a4)
{
  uint64_t v4 = *((void *)this + 12);
  if (!v4) {
    std::terminate();
  }
  int v5 = *(uint64_t (**)(__n128))(*(void *)v4 + 56);

  return v5(a3);
}

uint64_t Phase::ActionTreeServerCallbackInterface::IORenderOutput(Phase::ActionTreeServerCallbackInterface *this, UniqueObjectId a2, const AudioTimeStamp *a3, uint64_t a4, AudioBufferList *a5)
{
  uint64_t v6 = *((void *)this + 12);
  if (!v6 || !(*(unsigned int (**)(uint64_t))(*(void *)v6 + 72))(v6)) {
    return 0;
  }
  uint64_t v7 = *(uint64_t (**)(void))(**((void **)this + 12) + 80);

  return v7();
}

uint64_t Phase::ActionTreeServerCommandProcessor::ActionTreeServerCommandProcessor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26D471068;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v11 = a1 + 8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  id v12 = objc_alloc_init(MEMORY[0x263EFF980]);
  v13 = *(void **)(a1 + 72);
  *(void *)(a1 + 72) = v12;

  *(void *)a1 = &unk_26D471018;
  *(void *)(a1 + 80) = a2;
  *(void *)(a1 + 88) = a3;
  *(void *)(a1 + 96) = a4;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 136) = 1065353216;
  *(void *)(a1 + 144) = a6;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = &unk_26D470FC0;
  *(_OWORD *)(a1 + 168) = 0u;
  *(void *)(a1 + 248) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(void *)(a1 + 216) = 0;
  std::vector<char>::__append((std::vector<char> *)(a1 + 168), 0x20000uLL);
  uint64_t v14 = *(void *)(a1 + 168);
  uint64_t v15 = *(void *)(a1 + 184) - v14;
  *(void *)(a1 + 192) = v14;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = v15;
  *(void *)(a1 + 216) = a1 + 168;
  v18 = &unk_26D471118;
  v19 = Phase::Dispatch::sMessageWriterCallback;
  v21 = &v18;
  std::function<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::operator=((void *)(a1 + 224), (uint64_t)&v18);
  std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::~__value_func[abi:ne180100](&v18);
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  if (!*(void *)(a1 + 144)) {
    operator new();
  }
  uint64_t v16 = *(void *)(a1 + 152);
  if (!v16) {
    std::terminate();
  }
  *(void *)(a1 + 256) = v16;
  v18 = Phase::ActionTreeServerCommandProcessor::SleepGeneratorHandler;
  v19 = 0;
  uint64_t v20 = a1;
  std::__hash_table<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeServerCommand>,std::equal_to<Phase::ActionTreeServerCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeServerCommand>,std::hash<Phase::ActionTreeServerCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::ActionTreeServerCommand,Phase::ActionTreeServerCommand,std::__bind<void (Phase::ActionTreeServerCommandProcessor::*)(void const*),Phase::ActionTreeServerCommandProcessor*,std::placeholders::__ph<1> const&>>(v11, 1, 1, (uint64_t)&v18);
  v18 = Phase::ActionTreeServerCommandProcessor::WakeGeneratorHandler;
  v19 = 0;
  uint64_t v20 = a1;
  std::__hash_table<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeServerCommand>,std::equal_to<Phase::ActionTreeServerCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeServerCommand>,std::hash<Phase::ActionTreeServerCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::ActionTreeServerCommand,Phase::ActionTreeServerCommand,std::__bind<void (Phase::ActionTreeServerCommandProcessor::*)(void const*),Phase::ActionTreeServerCommandProcessor*,std::placeholders::__ph<1> const&>>(v11, 2, 2, (uint64_t)&v18);
  v18 = Phase::ActionTreeServerCommandProcessor::StopGeneratorHandler;
  v19 = 0;
  uint64_t v20 = a1;
  std::__hash_table<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeServerCommand>,std::equal_to<Phase::ActionTreeServerCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeServerCommand>,std::hash<Phase::ActionTreeServerCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::ActionTreeServerCommand,Phase::ActionTreeServerCommand,std::__bind<void (Phase::ActionTreeServerCommandProcessor::*)(void const*),Phase::ActionTreeServerCommandProcessor*,std::placeholders::__ph<1> const&>>(v11, 3, 3, (uint64_t)&v18);
  v18 = Phase::ActionTreeServerCommandProcessor::PauseGeneratorHandler;
  v19 = 0;
  uint64_t v20 = a1;
  std::__hash_table<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeServerCommand>,std::equal_to<Phase::ActionTreeServerCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeServerCommand>,std::hash<Phase::ActionTreeServerCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::ActionTreeServerCommand,Phase::ActionTreeServerCommand,std::__bind<void (Phase::ActionTreeServerCommandProcessor::*)(void const*),Phase::ActionTreeServerCommandProcessor*,std::placeholders::__ph<1> const&>>(v11, 4, 4, (uint64_t)&v18);
  v18 = Phase::ActionTreeServerCommandProcessor::ResumeGeneratorHandler;
  v19 = 0;
  uint64_t v20 = a1;
  std::__hash_table<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeServerCommand>,std::equal_to<Phase::ActionTreeServerCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeServerCommand>,std::hash<Phase::ActionTreeServerCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::ActionTreeServerCommand,Phase::ActionTreeServerCommand,std::__bind<void (Phase::ActionTreeServerCommandProcessor::*)(void const*),Phase::ActionTreeServerCommandProcessor*,std::placeholders::__ph<1> const&>>(v11, 5, 5, (uint64_t)&v18);
  v18 = Phase::ActionTreeServerCommandProcessor::SeekGeneratorHandler;
  v19 = 0;
  uint64_t v20 = a1;
  std::__hash_table<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeServerCommand>,std::equal_to<Phase::ActionTreeServerCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeServerCommand>,std::hash<Phase::ActionTreeServerCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::ActionTreeServerCommand,Phase::ActionTreeServerCommand,std::__bind<void (Phase::ActionTreeServerCommandProcessor::*)(void const*),Phase::ActionTreeServerCommandProcessor*,std::placeholders::__ph<1> const&>>(v11, 6, 6, (uint64_t)&v18);
  v18 = Phase::ActionTreeServerCommandProcessor::PrepareSamplerHandler;
  v19 = 0;
  uint64_t v20 = a1;
  std::__hash_table<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeServerCommand>,std::equal_to<Phase::ActionTreeServerCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeServerCommand>,std::hash<Phase::ActionTreeServerCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::ActionTreeServerCommand,Phase::ActionTreeServerCommand,std::__bind<void (Phase::ActionTreeServerCommandProcessor::*)(void const*),Phase::ActionTreeServerCommandProcessor*,std::placeholders::__ph<1> const&>>(v11, 7, 7, (uint64_t)&v18);
  v18 = Phase::ActionTreeServerCommandProcessor::PrepareProcedureHandler;
  v19 = 0;
  uint64_t v20 = a1;
  std::__hash_table<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeServerCommand>,std::equal_to<Phase::ActionTreeServerCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeServerCommand>,std::hash<Phase::ActionTreeServerCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::ActionTreeServerCommand,Phase::ActionTreeServerCommand,std::__bind<void (Phase::ActionTreeServerCommandProcessor::*)(void const*),Phase::ActionTreeServerCommandProcessor*,std::placeholders::__ph<1> const&>>(v11, 8, 8, (uint64_t)&v18);
  v18 = Phase::ActionTreeServerCommandProcessor::SetGeneratorParameterHandler;
  v19 = 0;
  uint64_t v20 = a1;
  std::__hash_table<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeServerCommand>,std::equal_to<Phase::ActionTreeServerCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeServerCommand>,std::hash<Phase::ActionTreeServerCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::ActionTreeServerCommand,Phase::ActionTreeServerCommand,std::__bind<void (Phase::ActionTreeServerCommandProcessor::*)(void const*),Phase::ActionTreeServerCommandProcessor*,std::placeholders::__ph<1> const&>>(v11, 9, 9, (uint64_t)&v18);
  v18 = Phase::ActionTreeServerCommandProcessor::SetGeneratorUpdateParametersHandler;
  v19 = 0;
  uint64_t v20 = a1;
  std::__hash_table<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeServerCommand>,std::equal_to<Phase::ActionTreeServerCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeServerCommand>,std::hash<Phase::ActionTreeServerCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::ActionTreeServerCommand,Phase::ActionTreeServerCommand,std::__bind<void (Phase::ActionTreeServerCommandProcessor::*)(void const*),Phase::ActionTreeServerCommandProcessor*,std::placeholders::__ph<1> const&>>(v11, 10, 10, (uint64_t)&v18);
  v18 = Phase::ActionTreeServerCommandProcessor::PlayGeneratorHandler;
  v19 = 0;
  uint64_t v20 = a1;
  std::__hash_table<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeServerCommand>,std::equal_to<Phase::ActionTreeServerCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeServerCommand>,std::hash<Phase::ActionTreeServerCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::ActionTreeServerCommand,Phase::ActionTreeServerCommand,std::__bind<void (Phase::ActionTreeServerCommandProcessor::*)(void const*),Phase::ActionTreeServerCommandProcessor*,std::placeholders::__ph<1> const&>>(v11, 11, 11, (uint64_t)&v18);
  v18 = Phase::ActionTreeServerCommandProcessor::EnqueueGeneratorBufferHandler;
  v19 = 0;
  uint64_t v20 = a1;
  std::__hash_table<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeServerCommand>,std::equal_to<Phase::ActionTreeServerCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeServerCommand>,std::hash<Phase::ActionTreeServerCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::ActionTreeServerCommand,Phase::ActionTreeServerCommand,std::__bind<void (Phase::ActionTreeServerCommandProcessor::*)(void const*),Phase::ActionTreeServerCommandProcessor*,std::placeholders::__ph<1> const&>>(v11, 12, 12, (uint64_t)&v18);
  v18 = Phase::ActionTreeServerCommandProcessor::SetSpatialCategorySendLevelHandler;
  v19 = 0;
  uint64_t v20 = a1;
  std::__hash_table<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeServerCommand>,std::equal_to<Phase::ActionTreeServerCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeServerCommand>,std::hash<Phase::ActionTreeServerCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::ActionTreeServerCommand,Phase::ActionTreeServerCommand,std::__bind<void (Phase::ActionTreeServerCommandProcessor::*)(void const*),Phase::ActionTreeServerCommandProcessor*,std::placeholders::__ph<1> const&>>(v11, 13, 13, (uint64_t)&v18);
  v18 = Phase::ActionTreeServerCommandProcessor::SetSpatialCategoryParameterHandler;
  v19 = 0;
  uint64_t v20 = a1;
  std::__hash_table<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeServerCommand>,std::equal_to<Phase::ActionTreeServerCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeServerCommand>,std::hash<Phase::ActionTreeServerCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::ActionTreeServerCommand,Phase::ActionTreeServerCommand,std::__bind<void (Phase::ActionTreeServerCommandProcessor::*)(void const*),Phase::ActionTreeServerCommandProcessor*,std::placeholders::__ph<1> const&>>(v11, 14, 14, (uint64_t)&v18);
  v18 = Phase::ActionTreeServerCommandProcessor::CreateSpatialSubmixHandler;
  v19 = 0;
  uint64_t v20 = a1;
  std::__hash_table<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeServerCommand>,std::equal_to<Phase::ActionTreeServerCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeServerCommand>,std::hash<Phase::ActionTreeServerCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::ActionTreeServerCommand,Phase::ActionTreeServerCommand,std::__bind<void (Phase::ActionTreeServerCommandProcessor::*)(void const*),Phase::ActionTreeServerCommandProcessor*,std::placeholders::__ph<1> const&>>(v11, 15, 15, (uint64_t)&v18);
  v18 = Phase::ActionTreeServerCommandProcessor::CreateAmbientSubmixHandler;
  v19 = 0;
  uint64_t v20 = a1;
  std::__hash_table<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeServerCommand>,std::equal_to<Phase::ActionTreeServerCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeServerCommand>,std::hash<Phase::ActionTreeServerCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::ActionTreeServerCommand,Phase::ActionTreeServerCommand,std::__bind<void (Phase::ActionTreeServerCommandProcessor::*)(void const*),Phase::ActionTreeServerCommandProcessor*,std::placeholders::__ph<1> const&>>(v11, 16, 16, (uint64_t)&v18);
  v18 = Phase::ActionTreeServerCommandProcessor::CreateChannelSubmixHandler;
  v19 = 0;
  uint64_t v20 = a1;
  std::__hash_table<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeServerCommand>,std::equal_to<Phase::ActionTreeServerCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeServerCommand>,std::hash<Phase::ActionTreeServerCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::ActionTreeServerCommand,Phase::ActionTreeServerCommand,std::__bind<void (Phase::ActionTreeServerCommandProcessor::*)(void const*),Phase::ActionTreeServerCommandProcessor*,std::placeholders::__ph<1> const&>>(v11, 17, 17, (uint64_t)&v18);
  v18 = Phase::ActionTreeServerCommandProcessor::SetSubmixParameterHandler;
  v19 = 0;
  uint64_t v20 = a1;
  std::__hash_table<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeServerCommand>,std::equal_to<Phase::ActionTreeServerCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeServerCommand>,std::hash<Phase::ActionTreeServerCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::ActionTreeServerCommand,Phase::ActionTreeServerCommand,std::__bind<void (Phase::ActionTreeServerCommandProcessor::*)(void const*),Phase::ActionTreeServerCommandProcessor*,std::placeholders::__ph<1> const&>>(v11, 18, 18, (uint64_t)&v18);
  v18 = Phase::ActionTreeServerCommandProcessor::SetAmbientSubmixOrientationHandler;
  v19 = 0;
  uint64_t v20 = a1;
  std::__hash_table<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeServerCommand>,std::equal_to<Phase::ActionTreeServerCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeServerCommand>,std::hash<Phase::ActionTreeServerCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::ActionTreeServerCommand,Phase::ActionTreeServerCommand,std::__bind<void (Phase::ActionTreeServerCommandProcessor::*)(void const*),Phase::ActionTreeServerCommandProcessor*,std::placeholders::__ph<1> const&>>(v11, 19, 19, (uint64_t)&v18);
  v18 = Phase::ActionTreeServerCommandProcessor::DestroySubmixHandler;
  v19 = 0;
  uint64_t v20 = a1;
  std::__hash_table<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeServerCommand>,std::equal_to<Phase::ActionTreeServerCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeServerCommand>,std::hash<Phase::ActionTreeServerCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::ActionTreeServerCommand,Phase::ActionTreeServerCommand,std::__bind<void (Phase::ActionTreeServerCommandProcessor::*)(void const*),Phase::ActionTreeServerCommandProcessor*,std::placeholders::__ph<1> const&>>(v11, 20, 20, (uint64_t)&v18);
  v18 = Phase::ActionTreeServerCommandProcessor::GeoQueryHandler;
  v19 = 0;
  uint64_t v20 = a1;
  std::__hash_table<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeServerCommand>,std::equal_to<Phase::ActionTreeServerCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeServerCommand>,std::hash<Phase::ActionTreeServerCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::ActionTreeServerCommand,Phase::ActionTreeServerCommand,std::__bind<void (Phase::ActionTreeServerCommandProcessor::*)(void const*),Phase::ActionTreeServerCommandProcessor*,std::placeholders::__ph<1> const&>>(v11, 21, 21, (uint64_t)&v18);
  return a1;
}

void sub_221E611E8(_Unwind_Exception *a1)
{
  MEMORY[0x223C938A0](v4, 0x10A1C405A4BACE5);
  uint64_t v6 = *(void **)(v1 + 264);
  if (v6)
  {
    do
    {
      uint64_t v7 = (void *)*v6;
      operator delete(v6);
      uint64_t v6 = v7;
    }
    while (v7);
  }
  *(void *)(v1 + 264) = 0;
  Phase::ActionTreeServerCallbackInterface::~ActionTreeServerCallbackInterface(v3);
  uint64_t v8 = *(void *)(v1 + 152);
  *(void *)(v1 + 152) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::~__hash_table(v2);
  Phase::Dispatch::TransactionExecutor<Phase::ActionTreeServerCommand>::~TransactionExecutor(v1);
  _Unwind_Resume(a1);
}

void sub_221E612CC(uint64_t a1, ...)
{
  va_start(va, a1);
  std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::~__value_func[abi:ne180100](v1 + 28);
  uint64_t v2 = (void *)v1[21];
  if (v2)
  {
    v1[22] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x221E61284);
}

void sub_221E612FC()
{
  std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::~__hash_table(v1);
  JUMPOUT(0x221E612C4);
}

void Phase::ActionTreeServerCommandProcessor::SleepGeneratorHandler(Phase::ActionTreeServerCommandProcessor *this, uint64_t *a2)
{
  unint64_t v4 = Phase::Controller::VoiceManager::Implementation::SleepGenerator(**((void **)this + 11), *a2, a2[1]);
  if (HIDWORD(v4)) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = v4 == 0;
  }
  if (!v5)
  {
    long long v6 = *(_OWORD *)a2;
    Phase::MessagePipeWriter<Phase::ActionTreeClientCommand>::WriteMessage((void *)this + 24, 7u, &v6, 0x10uLL);
  }
}

void Phase::ActionTreeServerCommandProcessor::WakeGeneratorHandler(Phase::ActionTreeServerCommandProcessor *this, uint64_t *a2)
{
  unint64_t v4 = Phase::Controller::VoiceManager::Implementation::WakeGenerator(**((void **)this + 11), *a2, a2[1]);
  if (HIDWORD(v4)) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = v4 == 0;
  }
  if (!v5)
  {
    long long v6 = *(_OWORD *)a2;
    Phase::MessagePipeWriter<Phase::ActionTreeClientCommand>::WriteMessage((void *)this + 24, 7u, &v6, 0x10uLL);
  }
}

void Phase::ActionTreeServerCommandProcessor::StopGeneratorHandler(Phase::ActionTreeServerCommandProcessor *this, uint64_t *a2)
{
  unint64_t v4 = Phase::Controller::VoiceManager::Implementation::StopGenerator(**((void **)this + 11), *a2, a2[1], 0.0);
  if (HIDWORD(v4)) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = v4 == 0;
  }
  if (!v5)
  {
    long long v6 = *(_OWORD *)a2;
    Phase::MessagePipeWriter<Phase::ActionTreeClientCommand>::WriteMessage((void *)this + 24, 7u, &v6, 0x10uLL);
  }
}

void Phase::ActionTreeServerCommandProcessor::PauseGeneratorHandler(Phase::ActionTreeServerCommandProcessor *this, uint64_t *a2)
{
  unint64_t v4 = Phase::Controller::VoiceManager::Implementation::PauseGenerator(**((void **)this + 11), *a2, a2[1]);
  if (HIDWORD(v4)) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = v4 == 0;
  }
  if (v5)
  {
    long long v6 = *(void (**)(void))(**((void **)this + 19) + 16);
    v6();
  }
  else
  {
    long long v7 = *(_OWORD *)a2;
    Phase::MessagePipeWriter<Phase::ActionTreeClientCommand>::WriteMessage((void *)this + 24, 7u, &v7, 0x10uLL);
  }
}

void Phase::ActionTreeServerCommandProcessor::ResumeGeneratorHandler(Phase::ActionTreeServerCommandProcessor *this, uint64_t *a2)
{
  unint64_t v4 = Phase::Controller::VoiceManager::Implementation::ResumeGenerator(**((void **)this + 11), *a2, a2[1]);
  if (HIDWORD(v4)) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = v4 == 0;
  }
  if (v5)
  {
    long long v6 = *(void (**)(void))(**((void **)this + 19) + 16);
    v6();
  }
  else
  {
    long long v7 = *(_OWORD *)a2;
    Phase::MessagePipeWriter<Phase::ActionTreeClientCommand>::WriteMessage((void *)this + 24, 7u, &v7, 0x10uLL);
  }
}

void Phase::ActionTreeServerCommandProcessor::SeekGeneratorHandler(Phase::ActionTreeServerCommandProcessor *this, long long *a2)
{
  unint64_t v4 = Phase::Controller::VoiceManager::Implementation::SeekGeneratorTime(**((void **)this + 11), *(void *)a2, *((void *)a2 + 1), *((double *)a2 + 2));
  if (HIDWORD(v4)) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = v4 == 0;
  }
  if (!v5)
  {
    long long v6 = *a2;
    Phase::MessagePipeWriter<Phase::ActionTreeClientCommand>::WriteMessage((void *)this + 24, 7u, &v6, 0x10uLL);
  }
}

void Phase::ActionTreeServerCommandProcessor::PrepareSamplerHandler(Phase::ActionTreeServerCommandProcessor *this, unsigned __int8 *a2)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  int v4 = a2[48];
  char v31 = 0;
  int v36 = *((_DWORD *)a2 + 8);
  uint64_t v37 = -1;
  uint64_t v5 = *((void *)a2 + 14);
  uint64_t v43 = *((void *)a2 + 13);
  long long v44 = 0uLL;
  char v38 = v4;
  uint64_t v39 = 0;
  long long v6 = *(_OWORD *)(a2 + 72);
  long long v40 = *(_OWORD *)(a2 + 56);
  long long v41 = v6;
  long long v42 = *(_OWORD *)(a2 + 88);
  v30 = &unk_26D471090;
  uint64_t v32 = v5;
  uint64_t v7 = *((void *)a2 + 15);
  uint64_t v35 = *((void *)a2 + 16);
  *(void *)&long long v6 = *((void *)a2 + 5);
  uint64_t v33 = v7;
  uint64_t v34 = v6;
  long long v45 = *(_OWORD *)(a2 + 152);
  if (v4 == 3)
  {
    long long v44 = *(_OWORD *)(a2 + 136);
    uint64_t v8 = Phase::Controller::TaskManager::GetObjCService<ExternalStreamManager>(*((Phase::Logger **)this + 10), 15);
    v9 = (void *)[objc_alloc(MEMORY[0x263F08C38]) initWithUUIDBytes:a2 + 136];
    id v29 = 0;
    __int16 v10 = [v8 formatForStream:v9 error:&v29];
    uint64_t v11 = (Phase::Logger *)v29;
    id v12 = v11;
    if (v11)
    {
      v13 = **(id **)(Phase::Logger::GetInstance(v11) + 384);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136316162;
        *(void *)&uint8_t buf[4] = "ActionTreeInterface.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 518;
        __int16 v47 = 2048;
        v48 = this;
        __int16 v49 = 2112;
        v50 = v9;
        __int16 v51 = 2112;
        v52 = v12;
        _os_log_impl(&dword_221E5E000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d impl@%p: failed to query pull stream %@ format: %@", buf, 0x30u);
      }
      *(_OWORD *)buf = *(_OWORD *)a2;
      Phase::MessagePipeWriter<Phase::ActionTreeClientCommand>::WriteMessage((void *)this + 24, 7u, buf, 0x10uLL);
LABEL_10:

      return;
    }
    id v28 = 0;
    uint64_t v14 = [v8 typeForStream:v9 error:&v28];
    uint64_t v15 = (Phase::Logger *)v28;
    if (v15)
    {
      id v12 = v15;
      uint64_t v16 = **(id **)(Phase::Logger::GetInstance(v15) + 384);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136316162;
        *(void *)&uint8_t buf[4] = "ActionTreeInterface.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 528;
        __int16 v47 = 2048;
        v48 = this;
        __int16 v49 = 2112;
        v50 = v9;
        __int16 v51 = 2112;
        v52 = v12;
        _os_log_impl(&dword_221E5E000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d impl@%p: failed to query pull stream %@ type: %@", buf, 0x30u);
      }
      *(_OWORD *)buf = *(_OWORD *)a2;
      Phase::MessagePipeWriter<Phase::ActionTreeClientCommand>::WriteMessage((void *)this + 24, 7u, buf, 0x10uLL);
      goto LABEL_10;
    }
    v17 = (void *)[objc_alloc(MEMORY[0x263EF9328]) initWithLayoutTag:*((unsigned int *)a2 + 8)];
    id v18 = objc_alloc(MEMORY[0x263EF9388]);
    [v10 sampleRate];
    v19 = objc_msgSend(v18, "initStandardFormatWithSampleRate:channelLayout:", v17);
    uint64_t v20 = [v19 streamDescription];
    long long v21 = *(_OWORD *)v20;
    long long v22 = *(_OWORD *)(v20 + 16);
    uint64_t v43 = *(void *)(v20 + 32);
    long long v41 = v21;
    long long v42 = v22;
    uint64_t v39 = v14;
  }
  v23 = (Phase::Logger *)(*(uint64_t (**)(void, unsigned __int8 *))(**((void **)this + 19) + 32))(*((void *)this + 19), a2);
  if ((v23 & 1) == 0)
  {
    v25 = **(id **)(Phase::Logger::GetInstance(v23) + 688);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      v26 = *(Phase::ActionTreeServerCommandProcessor **)a2;
      v27 = (void *)*((void *)a2 + 2);
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "ActionTreeInterface.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 549;
      __int16 v47 = 2048;
      v48 = v26;
      __int16 v49 = 2048;
      v50 = v27;
      _os_log_impl(&dword_221E5E000, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d Error: could not prepare IO manager for generatorId %llu, submixId %llu!", buf, 0x26u);
    }
    goto LABEL_18;
  }
  unint64_t v24 = Phase::Controller::VoiceManager::Implementation::PrepareGenerator(**((void **)this + 11), *(void *)a2, *((void *)a2 + 1), *((void *)a2 + 2), *((void *)a2 + 3), (uint64_t)&v30);
  if (!HIDWORD(v24) && (_BYTE)v24)
  {
LABEL_18:
    *(_OWORD *)buf = *(_OWORD *)a2;
    Phase::MessagePipeWriter<Phase::ActionTreeClientCommand>::WriteMessage((void *)this + 24, 7u, buf, 0x10uLL);
  }
}

void sub_221E61ADC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void Phase::ActionTreeServerCommandProcessor::PrepareProcedureHandler(Phase::ActionTreeServerCommandProcessor *this, long long *a2)
{
  char v4 = *((unsigned char *)a2 + 48);
  char v10 = 1;
  char v17 = v4;
  int v15 = *((_DWORD *)a2 + 8);
  uint64_t v16 = -1;
  uint64_t v5 = *((void *)a2 + 7);
  v9 = &unk_26D4710C0;
  uint64_t v11 = v5;
  uint64_t v6 = *((void *)a2 + 8);
  uint64_t v14 = *((void *)a2 + 9);
  uint64_t v7 = *((void *)a2 + 5);
  uint64_t v12 = v6;
  uint64_t v13 = v7;
  long long v18 = a2[5];
  int v19 = *((_DWORD *)a2 + 24);
  uint64_t v20 = *((void *)a2 + 13);
  unint64_t v8 = Phase::Controller::VoiceManager::Implementation::PrepareGenerator(**((void **)this + 11), *(void *)a2, *((void *)a2 + 1), *((void *)a2 + 2), *((void *)a2 + 3), (uint64_t)&v9);
  if (!HIDWORD(v8))
  {
    if ((_BYTE)v8)
    {
      long long __src = *a2;
      Phase::MessagePipeWriter<Phase::ActionTreeClientCommand>::WriteMessage((void *)this + 24, 7u, &__src, 0x10uLL);
    }
  }
}

void Phase::ActionTreeServerCommandProcessor::SetGeneratorParameterHandler(Phase::ActionTreeServerCommandProcessor *this, long long *a2)
{
  unint64_t v4 = Phase::Controller::VoiceManager::Implementation::SetGeneratorParameter(**((void **)this + 11), *(void *)a2, *((void *)a2 + 1), *((void *)a2 + 2), *((double *)a2 + 3));
  if (HIDWORD(v4)) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = v4 == 0;
  }
  if (!v5)
  {
    long long v6 = *a2;
    Phase::MessagePipeWriter<Phase::ActionTreeClientCommand>::WriteMessage((void *)this + 24, 7u, &v6, 0x10uLL);
  }
}

void Phase::ActionTreeServerCommandProcessor::SetGeneratorUpdateParametersHandler(Phase::ActionTreeServerCommandProcessor *this, long long *a2)
{
  unint64_t v4 = Phase::Controller::VoiceManager::Implementation::SetGeneratorParameter(**((void **)this + 11), *(void *)a2, *((void *)a2 + 1), 0xB5767F7E05AD941ELL, *((double *)a2 + 2));
  if (HIDWORD(v4)) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = v4 == 0;
  }
  if (!v5
    || ((v6 = Phase::Controller::VoiceManager::Implementation::SetGeneratorParameter(**((void **)this + 11), *(void *)a2, *((void *)a2 + 1), 0x8119B92FBF50030uLL, *((double *)a2 + 3)), !HIDWORD(v6))? (v7 = v6 == 0): (v7 = 1), !v7|| ((unint64_t v8 = Phase::Controller::VoiceManager::Implementation::SetGeneratorParameter(**((void **)this + 11), *(void *)a2, *((void *)a2 + 1), 0x81FBB92FC0173ECuLL, *((double *)a2 + 4)), !HIDWORD(v8))? (v9 = v8 == 0): (v9 = 1), !v9
      || ((unint64_t v10 = Phase::Controller::VoiceManager::Implementation::SetGeneratorParameter(**((void **)this + 11), *(void *)a2, *((void *)a2 + 1), 0x981F232BD33EC927, *((double *)a2 + 5)), !HIDWORD(v10))? (v11 = v10 == 0): (v11 = 1), !v11))))
  {
    long long v12 = *a2;
    Phase::MessagePipeWriter<Phase::ActionTreeClientCommand>::WriteMessage((void *)this + 24, 7u, &v12, 0x10uLL);
  }
}

void Phase::ActionTreeServerCommandProcessor::PlayGeneratorHandler(uint64_t **this, uint64_t *a2)
{
  uint64_t Instance = Phase::Logger::GetInstance((Phase::Logger *)this);
  BOOL v5 = (Phase::Logger *)os_signpost_id_generate(**(os_log_t **)(Instance + 688));
  unint64_t v6 = (Phase::Logger *)Phase::Logger::GetInstance(v5);
  if (*((unsigned char *)v6 + 696))
  {
    BOOL v7 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v6)
                                                                                       + 688)));
    unint64_t v8 = v7;
    if ((unint64_t)v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v7))
    {
      LOWORD(v15) = 0;
      _os_signpost_emit_with_name_impl(&dword_221E5E000, v8, OS_SIGNPOST_INTERVAL_BEGIN, (os_signpost_id_t)v5, "Phase_PlayGenerator", "PlayGenerator", (uint8_t *)&v15, 2u);
    }
  }
  unint64_t v9 = Phase::Controller::VoiceManager::Implementation::PlayGenerator(*this[11], *a2, a2[1]);
  if (HIDWORD(v9)) {
    BOOL v10 = 1;
  }
  else {
    BOOL v10 = v9 == 0;
  }
  if (v10)
  {
    BOOL v11 = (Phase::Logger *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*this[19] + 16))(this[19], *a2, a2[1], 1);
  }
  else
  {
    long long v15 = *(_OWORD *)a2;
    Phase::MessagePipeWriter<Phase::ActionTreeClientCommand>::WriteMessage(this + 24, 7u, &v15, 0x10uLL);
  }
  long long v12 = (Phase::Logger *)Phase::Logger::GetInstance(v11);
  if (*((unsigned char *)v12 + 696))
  {
    uint64_t v13 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v12)
                                                                                        + 688)));
    uint64_t v14 = v13;
    if ((unint64_t)v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v13))
    {
      LOWORD(v15) = 0;
      _os_signpost_emit_with_name_impl(&dword_221E5E000, v14, OS_SIGNPOST_INTERVAL_END, (os_signpost_id_t)v5, "Phase_PlayGenerator", "PlayGenerator Finish", (uint8_t *)&v15, 2u);
    }
  }
}

void Phase::ActionTreeServerCommandProcessor::EnqueueGeneratorBufferHandler(Phase::ActionTreeServerCommandProcessor *this, char *a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  v3 = (Phase::Logger *)(*(uint64_t (**)(void, void, void, char *))(**((void **)this + 19) + 64))(*((void *)this + 19), *(void *)a2, *((void *)a2 + 1), a2 + 16);
  if ((v3 & 1) == 0)
  {
    unint64_t v4 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v3)
                                                                                       + 688)));
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "<error>: empty GeneratorBufferParams");
      if (v8 >= 0) {
        BOOL v5 = __p;
      }
      else {
        BOOL v5 = (void **)__p[0];
      }
      uint64_t v6 = *(void *)a2;
      *(_DWORD *)buf = 136315906;
      BOOL v10 = "ActionTreeInterface.mm";
      __int16 v11 = 1024;
      int v12 = 670;
      __int16 v13 = 2080;
      uint64_t v14 = v5;
      __int16 v15 = 2048;
      uint64_t v16 = v6;
      _os_log_impl(&dword_221E5E000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d Error: could not enqueue buffer %s for generatorId %llu!", buf, 0x26u);
      if (v8 < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

void sub_221E620D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void Phase::ActionTreeServerCommandProcessor::SetSpatialCategorySendLevelHandler(Phase::ActionTreeServerCommandProcessor *this, unsigned int *a2)
{
  unint64_t v4 = Phase::Controller::VoiceManager::Implementation::SetSpatialCategorySendLevel(**((void **)this + 11), *(void *)a2, *((void *)a2 + 1), a2[4], *((double *)a2 + 3));
  if (HIDWORD(v4)) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = v4 == 0;
  }
  if (!v5)
  {
    long long v6 = *(_OWORD *)a2;
    Phase::MessagePipeWriter<Phase::ActionTreeClientCommand>::WriteMessage((void *)this + 24, 8u, &v6, 0x10uLL);
  }
}

void Phase::ActionTreeServerCommandProcessor::SetSpatialCategoryParameterHandler(Phase::ActionTreeServerCommandProcessor *this, unsigned int *a2)
{
  unint64_t v4 = Phase::Controller::VoiceManager::Implementation::SetSpatialCategoryParameter(**((void **)this + 11), *(void *)a2, *((void *)a2 + 1), a2[4], *((void *)a2 + 3), *((double *)a2 + 4));
  if (HIDWORD(v4)) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = v4 == 0;
  }
  if (!v5)
  {
    long long v6 = *(_OWORD *)a2;
    Phase::MessagePipeWriter<Phase::ActionTreeClientCommand>::WriteMessage((void *)this + 24, 8u, &v6, 0x10uLL);
  }
}

uint64_t Phase::ActionTreeServerCommandProcessor::CreateSpatialSubmixHandler(Phase::ActionTreeServerCommandProcessor *this, _OWORD *a2)
{
  uint64_t v33 = this;
  uint64_t v50 = *MEMORY[0x263EF8340];
  long long v39 = 0u;
  long long v38 = 0u;
  float v40 = 1.0;
  uint64_t v41 = 0;
  long long v42 = 0u;
  LOBYTE(v43[0]) = 0;
  long long v44 = 0u;
  *(_OWORD *)&v43[51] = xmmword_2220A4DF0;
  v43[53] = 0x3FF0000000000000;
  long long v45 = a2[55];
  int v46 = *((_DWORD *)a2 + 224);
  uint64_t v34 = *((void *)a2 + 2);
  long long v35 = *a2;
  long long v36 = *(_OWORD *)((char *)a2 + 24);
  long long v37 = *(_OWORD *)((char *)a2 + 40);
  if (*((_DWORD *)a2 + 14))
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    uint64_t v6 = 0;
    while (1)
    {
      BOOL v7 = (char *)a2 + 24 * v6 + 64;
      uint64_t v8 = *((void *)v7 + 1);
      char v9 = v7[16];
      int v10 = *(_DWORD *)v7;
      if (v5)
      {
        uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
        v11.i16[0] = vaddlv_u8(v11);
        if (v11.u32[0] > 1uLL)
        {
          unint64_t v2 = v10;
          if (v5 <= v10) {
            unint64_t v2 = v10 % v5;
          }
        }
        else
        {
          unint64_t v2 = (v5 - 1) & v10;
        }
        int v12 = *(uint64_t ***)(v38 + 8 * v2);
        if (v12)
        {
          for (i = *v12; i; i = (uint64_t *)*i)
          {
            unint64_t v14 = i[1];
            if (v14 == v10)
            {
              if (*((_DWORD *)i + 4) == v10)
              {
                id v28 = **(id **)(Phase::Logger::GetInstance(this) + 784);
                if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
                {
                  GetSpatialCategoryString(*(_DWORD *)v7);
                  id v30 = objc_claimAutoreleasedReturnValue();
                  uint64_t v31 = [v30 UTF8String];
                  *(_DWORD *)buf = 136315650;
                  *(void *)&uint8_t buf[4] = "ActionTreeInterface.mm";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 721;
                  __int16 v48 = 2080;
                  uint64_t v49 = v31;
                  _os_log_impl(&dword_221E5E000, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [!pair.second is true]: \"Entry with category %s already exists\"", buf, 0x1Cu);
                }
                exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(exception, "Entry with category %s already exists");
              }
            }
            else
            {
              if (v11.u32[0] > 1uLL)
              {
                if (v14 >= v5) {
                  v14 %= v5;
                }
              }
              else
              {
                v14 &= v5 - 1;
              }
              if (v14 != v2) {
                break;
              }
            }
          }
        }
      }
      this = (Phase::ActionTreeServerCommandProcessor *)operator new(0x28uLL);
      __int16 v15 = this;
      *(void *)this = 0;
      *((void *)this + 1) = v10;
      *((_DWORD *)this + 4) = v10;
      *((void *)this + 3) = v8;
      *((unsigned char *)this + 32) = v9;
      float v16 = (float)(unint64_t)(v4 + 1);
      if (!v5 || (float)(v40 * (float)v5) < v16)
      {
        BOOL v17 = (v5 & (v5 - 1)) != 0;
        if (v5 < 3) {
          BOOL v17 = 1;
        }
        unint64_t v18 = v17 | (2 * v5);
        unint64_t v19 = vcvtps_u32_f32(v16 / v40);
        if (v18 <= v19) {
          size_t v20 = v19;
        }
        else {
          size_t v20 = v18;
        }
        std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::__rehash<true>((uint64_t)&v38, v20);
        unint64_t v5 = *((void *)&v38 + 1);
        if ((*((void *)&v38 + 1) & (*((void *)&v38 + 1) - 1)) != 0)
        {
          if (*((void *)&v38 + 1) <= (unint64_t)v10) {
            unint64_t v2 = (unint64_t)v10 % *((void *)&v38 + 1);
          }
          else {
            unint64_t v2 = v10;
          }
        }
        else
        {
          unint64_t v2 = (*((void *)&v38 + 1) - 1) & v10;
        }
      }
      uint64_t v21 = v38;
      long long v22 = *(Phase::ActionTreeServerCommandProcessor ***)(v38 + 8 * v2);
      if (v22) {
        break;
      }
      *(void *)__int16 v15 = v39;
      *(void *)&long long v39 = v15;
      *(void *)(v21 + 8 * v2) = &v39;
      if (*(void *)v15)
      {
        unint64_t v23 = *(void *)(*(void *)v15 + 8);
        if ((v5 & (v5 - 1)) != 0)
        {
          if (v23 >= v5) {
            v23 %= v5;
          }
        }
        else
        {
          v23 &= v5 - 1;
        }
        long long v22 = (Phase::ActionTreeServerCommandProcessor **)(v38 + 8 * v23);
        goto LABEL_39;
      }
LABEL_40:
      uint64_t v4 = ++*((void *)&v39 + 1);
      if (++v6 >= (unint64_t)*((unsigned int *)a2 + 14)) {
        goto LABEL_41;
      }
    }
    *(void *)__int16 v15 = *v22;
LABEL_39:
    *long long v22 = v15;
    goto LABEL_40;
  }
LABEL_41:
  memcpy(v43, a2 + 28, sizeof(v43));
  long long v44 = 0uLL;
  unint64_t SpatialSubmix = Phase::Controller::VoiceManager::Implementation::CreateSpatialSubmix(**((Phase::Controller::VoiceManager::Implementation ***)v33 + 11), (const Phase::Controller::CreateSpatialSubmixParameters *)&v34);
  if (HIDWORD(SpatialSubmix) || !(_BYTE)SpatialSubmix)
  {
    uint64_t v25 = *((void *)v33 + 33);
    v26 = (char *)operator new(0x18uLL);
    *(void *)v26 = v25;
    *(_OWORD *)(v26 + 8) = *a2;
    *((void *)v33 + 33) = v26;
  }
  else
  {
    *(_OWORD *)buf = *a2;
    Phase::MessagePipeWriter<Phase::ActionTreeClientCommand>::WriteMessage((void *)v33 + 24, 8u, buf, 0x10uLL);
  }
  *(void *)buf = &v41;
  std::vector<Phase::VoiceDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  return std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)&v38);
}

void sub_221E62664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);

  Phase::Controller::CreateSpatialSubmixParameters::~CreateSpatialSubmixParameters((Phase::Controller::CreateSpatialSubmixParameters *)va);
  _Unwind_Resume(a1);
}

void Phase::ActionTreeServerCommandProcessor::CreateAmbientSubmixHandler(Phase::Logger ***this, _OWORD *a2)
{
  uint8x8_t v11 = 0;
  long long v13 = xmmword_2220A4E00;
  LOBYTE(v10.__begin_) = 0;
  std::vector<char>::vector(&__p, 0x20uLL, (const std::vector<char>::value_type *)&v10);
  std::vector<char>::pointer begin = __p.__begin_;
  *(void *)__p.__begin_ = 0;
  *((_DWORD *)begin + 2) = 0;
  long long v15 = a2[3];
  int v16 = *((_DWORD *)a2 + 16);
  uint8x8_t v11 = (unsigned int *)*((void *)a2 + 2);
  long long v12 = *a2;
  long long v13 = *(_OWORD *)((char *)a2 + 24);
  int v5 = *((_DWORD *)a2 + 10);
  std::vector<char>::value_type __x = 0;
  std::vector<char>::vector(&v10, 0x20uLL, &__x);
  std::vector<char>::pointer v6 = v10.__begin_;
  *((_DWORD *)v10.__begin_ + 1) = 0;
  *((_DWORD *)v6 + 2) = 0;
  *(_DWORD *)std::vector<char>::pointer v6 = v5;
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
    std::vector<char>::pointer v6 = v10.__begin_;
  }
  __p.__begin_ = v6;
  *(_OWORD *)&__p.__end_ = *(_OWORD *)&v10.__end_;
  unint64_t v7 = Phase::Controller::VoiceManager::Implementation::CreateAmbientSubmix(*this[11], &v11);
  if (HIDWORD(v7) || !(_BYTE)v7)
  {
    uint64_t v8 = this[33];
    char v9 = (char *)operator new(0x18uLL);
    *(void *)char v9 = v8;
    *(_OWORD *)(v9 + 8) = *a2;
    this[33] = (Phase::Logger **)v9;
  }
  else
  {
    *(_OWORD *)&v10.__begin_ = *a2;
    Phase::MessagePipeWriter<Phase::ActionTreeClientCommand>::WriteMessage(this + 24, 8u, &v10, 0x10uLL);
  }
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
}

void sub_221E62804(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Phase::ActionTreeServerCommandProcessor::CreateChannelSubmixHandler(Phase::ActionTreeServerCommandProcessor *this, char *a2)
{
  LOBYTE(v10.__begin_) = 0;
  std::vector<char>::vector(&__p, 0x20uLL, (const std::vector<char>::value_type *)&v10);
  std::vector<char>::pointer begin = __p.__begin_;
  *(void *)__p.__begin_ = 0;
  *((_DWORD *)begin + 2) = 0;
  long long v13 = *(_OWORD *)(a2 + 24);
  int v14 = *((_DWORD *)a2 + 10);
  long long v11 = *(_OWORD *)a2;
  int v5 = *((_DWORD *)a2 + 4);
  std::vector<char>::value_type __x = 0;
  std::vector<char>::vector(&v10, 0x20uLL, &__x);
  std::vector<char>::pointer v6 = v10.__begin_;
  *((_DWORD *)v10.__begin_ + 1) = 0;
  *((_DWORD *)v6 + 2) = 0;
  *(_DWORD *)std::vector<char>::pointer v6 = v5;
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
    std::vector<char>::pointer v6 = v10.__begin_;
  }
  __p.__begin_ = v6;
  *(_OWORD *)&__p.__end_ = *(_OWORD *)&v10.__end_;
  unint64_t ChannelSubmix = Phase::Controller::VoiceManager::Implementation::CreateChannelSubmix(**((void **)this + 11), (uint64_t)&v11);
  if (HIDWORD(ChannelSubmix) || !(_BYTE)ChannelSubmix)
  {
    uint64_t v8 = *((void *)this + 33);
    char v9 = (char *)operator new(0x18uLL);
    *(void *)char v9 = v8;
    *(_OWORD *)(v9 + 8) = *(_OWORD *)a2;
    *((void *)this + 33) = v9;
  }
  else
  {
    *(_OWORD *)&v10.__begin_ = *(_OWORD *)a2;
    Phase::MessagePipeWriter<Phase::ActionTreeClientCommand>::WriteMessage((void *)this + 24, 8u, &v10, 0x10uLL);
  }
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
}

void sub_221E62944(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Phase::ActionTreeServerCommandProcessor::SetSubmixParameterHandler(Phase::ActionTreeServerCommandProcessor *this, long long *a2)
{
  unint64_t v4 = Phase::Controller::VoiceManager::Implementation::SetSubmixParameter(**((void **)this + 11), *(void *)a2, *((void *)a2 + 1), *((void *)a2 + 2), *((double *)a2 + 3));
  if (HIDWORD(v4)) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = v4 == 0;
  }
  if (!v5)
  {
    long long v6 = *a2;
    Phase::MessagePipeWriter<Phase::ActionTreeClientCommand>::WriteMessage((void *)this + 24, 8u, &v6, 0x10uLL);
  }
}

void Phase::ActionTreeServerCommandProcessor::SetAmbientSubmixOrientationHandler(Phase::ActionTreeServerCommandProcessor *this, uint64_t *a2)
{
  unint64_t v4 = Phase::Controller::VoiceManager::Implementation::SetSubmixParameterData(**((void **)this + 11), *a2, a2[1], 0xB11F8D5B5762E28DLL, (uint64_t)(a2 + 2), 16);
  if (HIDWORD(v4)) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = v4 == 0;
  }
  if (!v5)
  {
    long long v6 = *(_OWORD *)a2;
    Phase::MessagePipeWriter<Phase::ActionTreeClientCommand>::WriteMessage((void *)this + 24, 8u, &v6, 0x10uLL);
  }
}

void Phase::ActionTreeServerCommandProcessor::DestroySubmixHandler(Phase::ActionTreeServerCommandProcessor *this, uint64_t *a2)
{
  unint64_t v4 = Phase::Controller::VoiceManager::Implementation::DestroySubmix(**((void ***)this + 11), *a2, a2[1]);
  if (HIDWORD(v4)) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = v4 == 0;
  }
  if (v5)
  {
    i = (void *)*((void *)this + 33);
    if (i)
    {
      unint64_t v7 = 0;
      uint64_t v8 = (void **)((char *)this + 264);
      uint64_t v9 = *a2;
      uint64_t v10 = a2[1];
      do
      {
        if (i[1] == v9 && i[2] == v10)
        {
          for (i = (void *)*i; i; i = (void *)*i)
          {
            if (i[1] != v9) {
              break;
            }
            if (i[2] != a2[1]) {
              break;
            }
          }
          if (v8 != i)
          {
            long long v11 = v8;
            do
            {
              long long v12 = v11;
              long long v11 = (void *)*v11;
            }
            while (v11 != i);
            if (v12 != v8)
            {
              *long long v12 = v7;
              unint64_t v7 = *v8;
              *uint64_t v8 = i;
            }
          }
          if (!i) {
            break;
          }
        }
        uint64_t v8 = (void **)i;
        i = (void *)*i;
      }
      while (i);
      if (v7)
      {
        do
        {
          long long v13 = (void *)*v7;
          operator delete(v7);
          unint64_t v7 = v13;
        }
        while (v13);
      }
    }
  }
  else
  {
    long long v14 = *(_OWORD *)a2;
    Phase::MessagePipeWriter<Phase::ActionTreeClientCommand>::WriteMessage((void *)this + 24, 8u, &v14, 0x10uLL);
  }
}

void Phase::ActionTreeServerCommandProcessor::GeoQueryHandler(Phase::Geometry::System **this, void *a2)
{
  Phase::Geometry::System::GetCurrentState(this[12], &v8);
  uint64_t v4 = v8;
  BOOL v5 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  double v6 = Phase::DistanceBetweenListenerAndSource<double>(v4, a2[4], a2[3]);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  int v7 = *((_DWORD *)a2 + 4);
  long long __src = *(_OWORD *)a2;
  int v11 = v7;
  char v12 = 0;
  double v13 = v6;
  Phase::MessagePipeWriter<Phase::ActionTreeClientCommand>::WriteMessage(this + 24, 6u, &__src, 0x20uLL);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void sub_221E62C2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Dispatch::TransactionExecutor<Phase::ActionTreeServerCommand>::~TransactionExecutor(uint64_t a1)
{
  *(void *)a1 = &unk_26D471068;

  std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::~__hash_table(a1 + 8);
  return a1;
}

{
  *(void *)a1 = &unk_26D471068;

  std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::~__hash_table(a1 + 8);
  return a1;
}

void Phase::ActionTreeServerCommandProcessor::~ActionTreeServerCommandProcessor(Phase::ActionTreeServerCommandProcessor *this)
{
  unint64_t v2 = (void *)*((void *)this + 33);
  if (v2)
  {
    do
    {
      v3 = (void *)*v2;
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
  *((void *)this + 33) = 0;
  Phase::ActionTreeServerCallbackInterface::~ActionTreeServerCallbackInterface((Phase::ActionTreeServerCommandProcessor *)((char *)this + 160));
  uint64_t v4 = *((void *)this + 19);
  *((void *)this + 19) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::~__hash_table((uint64_t)this + 104);
  *(void *)this = &unk_26D471068;

  std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::~__hash_table((uint64_t)this + 8);
}

{
  uint64_t vars8;

  Phase::ActionTreeServerCommandProcessor::~ActionTreeServerCommandProcessor(this);

  JUMPOUT(0x223C938A0);
}

id Phase::Controller::TaskManager::GetObjCService<ExternalStreamManager>(Phase::Logger *a1, int a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v3 = *((void *)a1 + 6);
  if (a2 >= (unint64_t)((*((void *)a1 + 7) - v3) >> 5))
  {
    uint64_t v8 = **(id **)(Phase::Logger::GetInstance(a1) + 448);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      long long v15 = "TaskManager.hpp";
      __int16 v16 = 1024;
      int v17 = 140;
      _os_log_impl(&dword_221E5E000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: pId < mServiceRegistry.size() is false.", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](exception, "PRECONDITION: pId < mServiceRegistry.size() is false.");
  }
  uint64_t v4 = (Phase::Logger *)(v3 + 32 * a2);
  if (!*(void *)v4)
  {
    uint64_t v10 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v4)
                                                                                        + 448)));
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      Phase::GetBacktraceFrame<1ul>(&__p);
      int v11 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315906;
      long long v15 = "TaskManager.hpp";
      __int16 v16 = 1024;
      int v17 = 149;
      __int16 v18 = 1024;
      int v19 = a2;
      __int16 v20 = 2080;
      uint64_t v21 = v11;
      _os_log_impl(&dword_221E5E000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::domain_error) [not lService.has_value() is true]: \"No service registered for Id %i, in call \\n%s\"", buf, 0x22u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }

    char v12 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](v12, "No service registered for Id %i, in call \n%s");
  }
  BOOL v5 = (id *)std::any_cast[abi:ne180100]<ExternalStreamManager * const {__strong}>((uint64_t (**)(uint64_t, void, void, void, void *))v4);
  if (!v5) {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  id v6 = *v5;

  return v6;
}

void sub_221E62FD4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_221E630E4(_Unwind_Exception *a1)
{
}

void sub_221E63104(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void Phase::Controller::CreateSpatialSubmixParameters::~CreateSpatialSubmixParameters(Phase::Controller::CreateSpatialSubmixParameters *this)
{
  unint64_t v2 = (void **)((char *)this + 96);
  std::vector<Phase::VoiceDescriptor>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)this + 56);
}

uint64_t Phase::ActionTreeClientCommandProcessor::ActionTreeClientCommandProcessor(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26D4710F0;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v4 = a1 + 8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  id v5 = objc_alloc_init(MEMORY[0x263EFF980]);
  id v6 = *(void **)(a1 + 72);
  *(void *)(a1 + 72) = v5;

  *(void *)a1 = &unk_26D471040;
  *(void *)(a1 + 80) = a2;
  uint64_t v8 = (uint64_t (*)(Phase::ActionTreeClientCommandProcessor *, const void *))Phase::ActionTreeClientCommandProcessor::SubmitGeneratorPreparedResultHandler;
  uint64_t v9 = 0;
  uint64_t v10 = a1;
  std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::ActionTreeClientCommand,Phase::ActionTreeClientCommand,std::__bind<void (Phase::ActionTreeClientCommandProcessor::*)(void const*),Phase::ActionTreeClientCommandProcessor*,std::placeholders::__ph<1> const&>>(v4, 1, 1, (uint64_t)&v8);
  uint64_t v8 = (uint64_t (*)(Phase::ActionTreeClientCommandProcessor *, const void *))Phase::ActionTreeClientCommandProcessor::SubmitGeneratorCompletedResultHandler;
  uint64_t v9 = 0;
  uint64_t v10 = a1;
  std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::ActionTreeClientCommand,Phase::ActionTreeClientCommand,std::__bind<void (Phase::ActionTreeClientCommandProcessor::*)(void const*),Phase::ActionTreeClientCommandProcessor*,std::placeholders::__ph<1> const&>>(v4, 2, 2, (uint64_t)&v8);
  uint64_t v8 = (uint64_t (*)(Phase::ActionTreeClientCommandProcessor *, const void *))Phase::ActionTreeClientCommandProcessor::SubmitGeneratorSeekCompletedResultHandler;
  uint64_t v9 = 0;
  uint64_t v10 = a1;
  std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::ActionTreeClientCommand,Phase::ActionTreeClientCommand,std::__bind<void (Phase::ActionTreeClientCommandProcessor::*)(void const*),Phase::ActionTreeClientCommandProcessor*,std::placeholders::__ph<1> const&>>(v4, 3, 3, (uint64_t)&v8);
  uint64_t v8 = (uint64_t (*)(Phase::ActionTreeClientCommandProcessor *, const void *))Phase::ActionTreeClientCommandProcessor::SubmitGeneratorBufferCompletedResultHandler;
  uint64_t v9 = 0;
  uint64_t v10 = a1;
  std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::ActionTreeClientCommand,Phase::ActionTreeClientCommand,std::__bind<void (Phase::ActionTreeClientCommandProcessor::*)(void const*),Phase::ActionTreeClientCommandProcessor*,std::placeholders::__ph<1> const&>>(v4, 4, 4, (uint64_t)&v8);
  uint64_t v8 = Phase::ActionTreeClientCommandProcessor::SubmitGeneratorPlayStateChangedHandler;
  uint64_t v9 = 0;
  uint64_t v10 = a1;
  std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::ActionTreeClientCommand,Phase::ActionTreeClientCommand,std::__bind<void (Phase::ActionTreeClientCommandProcessor::*)(void const*),Phase::ActionTreeClientCommandProcessor*,std::placeholders::__ph<1> const&>>(v4, 5, 5, (uint64_t)&v8);
  uint64_t v8 = (uint64_t (*)(Phase::ActionTreeClientCommandProcessor *, const void *))Phase::ActionTreeClientCommandProcessor::GeoQueryResponseHandler;
  uint64_t v9 = 0;
  uint64_t v10 = a1;
  std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::ActionTreeClientCommand,Phase::ActionTreeClientCommand,std::__bind<void (Phase::ActionTreeClientCommandProcessor::*)(void const*),Phase::ActionTreeClientCommandProcessor*,std::placeholders::__ph<1> const&>>(v4, 6, 6, (uint64_t)&v8);
  uint64_t v8 = (uint64_t (*)(Phase::ActionTreeClientCommandProcessor *, const void *))Phase::ActionTreeClientCommandProcessor::GeneratorResponseHandler;
  uint64_t v9 = 0;
  uint64_t v10 = a1;
  std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::ActionTreeClientCommand,Phase::ActionTreeClientCommand,std::__bind<void (Phase::ActionTreeClientCommandProcessor::*)(void const*),Phase::ActionTreeClientCommandProcessor*,std::placeholders::__ph<1> const&>>(v4, 7, 7, (uint64_t)&v8);
  uint64_t v8 = (uint64_t (*)(Phase::ActionTreeClientCommandProcessor *, const void *))Phase::ActionTreeClientCommandProcessor::SubmixResponseHandler;
  uint64_t v9 = 0;
  uint64_t v10 = a1;
  std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::ActionTreeClientCommand,Phase::ActionTreeClientCommand,std::__bind<void (Phase::ActionTreeClientCommandProcessor::*)(void const*),Phase::ActionTreeClientCommandProcessor*,std::placeholders::__ph<1> const&>>(v4, 8, 8, (uint64_t)&v8);
  return a1;
}

void sub_221E63374(_Unwind_Exception *a1)
{
  Phase::Dispatch::TransactionExecutor<Phase::ActionTreeClientCommand>::~TransactionExecutor(v1);
  _Unwind_Resume(a1);
}

void sub_221E633A4()
{
  std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::~__hash_table(v1);
  JUMPOUT(0x221E6339CLL);
}

void Phase::ActionTreeClientCommandProcessor::SubmitGeneratorPreparedResultHandler(Phase::ActionTreeClientCommandProcessor *this, uint64_t *a2)
{
}

void Phase::ActionTreeClientCommandProcessor::SubmitGeneratorCompletedResultHandler(Phase::ActionTreeManager **this, uint64_t *a2)
{
}

void Phase::ActionTreeClientCommandProcessor::SubmitGeneratorSeekCompletedResultHandler(Phase::ActionTreeClientCommandProcessor *this, const void *a2)
{
}

void Phase::ActionTreeClientCommandProcessor::SubmitGeneratorBufferCompletedResultHandler(Phase::ActionTreeClientCommandProcessor *this, uint64_t *a2)
{
}

uint64_t Phase::ActionTreeClientCommandProcessor::SubmitGeneratorPlayStateChangedHandler(Phase::ActionTreeClientCommandProcessor *this, const void *a2)
{
  return Phase::ActionTreeManager::SubmitGeneratorPlayStateChanged(*((void *)this + 10), *(void *)a2, *((void *)a2 + 1), *((_DWORD *)a2 + 4));
}

void *Phase::ActionTreeClientCommandProcessor::GeoQueryResponseHandler(Phase::ActionTreeManager **this, unsigned __int8 *a2)
{
  return Phase::ActionTreeManager::ReceiveGeoQueryResult(this[10], *(UniqueObjectId *)a2, *((double *)a2 + 3), *((_DWORD *)a2 + 4), a2[20]);
}

Phase::Logger *Phase::ActionTreeClientCommandProcessor::GeneratorResponseHandler(Phase::Logger **this, uint64_t *a2)
{
  return Phase::ActionTreeManager::HandleGeneratorError(this[10], *a2, a2[1]);
}

Phase::Logger *Phase::ActionTreeClientCommandProcessor::SubmixResponseHandler(Phase::Logger **this, uint64_t *a2)
{
  return Phase::ActionTreeManager::HandleSubmixError(this[10], *a2, a2[1]);
}

uint64_t Phase::Dispatch::TransactionExecutor<Phase::ActionTreeClientCommand>::~TransactionExecutor(uint64_t a1)
{
  *(void *)a1 = &unk_26D4710F0;

  std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::~__hash_table(a1 + 8);
  return a1;
}

{
  *(void *)a1 = &unk_26D4710F0;

  std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::~__hash_table(a1 + 8);
  return a1;
}

void Phase::ActionTreeServerCallbackInterface::~ActionTreeServerCallbackInterface(Phase::ActionTreeServerCallbackInterface *this)
{
  Phase::ActionTreeServerCallbackInterface::~ActionTreeServerCallbackInterface(this);

  JUMPOUT(0x223C938A0);
}

{
  void *v2;

  std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::~__value_func[abi:ne180100]((void *)this + 8);
  unint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
}

void Phase::Dispatch::TransactionExecutor<Phase::ActionTreeServerCommand>::ExecuteTransactions(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  id v2 = *(id *)(a1 + 72);
  objc_sync_enter(v2);
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v3 = *(id *)(a1 + 72);
  uint64_t v4 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v11;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v3);
        }
        id v7 = *(id *)(*((void *)&v10 + 1) + 8 * v6);
        uint64_t v8 = objc_msgSend(v7, "bytes", (void)v10);
        uint64_t v9 = [v7 length];
        *(void *)(a1 + 48) = v8;
        *(void *)(a1 + 56) = v9;
        *(void *)(a1 + 64) = 0;
        Phase::MessagePipeReader<Phase::ActionTreeServerCommand>::Execute((uint64_t *)(a1 + 48), (void *)(a1 + 8));

        ++v6;
      }
      while (v4 != v6);
      uint64_t v4 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v4);
  }

  [*(id *)(a1 + 72) removeAllObjects];
  objc_sync_exit(v2);
}

void sub_221E63640(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void Phase::ActionTreeClientCommandProcessor::~ActionTreeClientCommandProcessor(id *this)
{
  *this = &unk_26D4710F0;

  std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::~__hash_table((uint64_t)(this + 1));
}

{
  uint64_t vars8;

  *this = &unk_26D4710F0;

  std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::~__hash_table((uint64_t)(this + 1));

  JUMPOUT(0x223C938A0);
}

void Phase::Dispatch::TransactionExecutor<Phase::ActionTreeClientCommand>::ExecuteTransactions(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  id v2 = *(id *)(a1 + 72);
  objc_sync_enter(v2);
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v3 = *(id *)(a1 + 72);
  uint64_t v4 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v11;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v3);
        }
        id v7 = *(id *)(*((void *)&v10 + 1) + 8 * v6);
        uint64_t v8 = objc_msgSend(v7, "bytes", (void)v10);
        uint64_t v9 = [v7 length];
        *(void *)(a1 + 48) = v8;
        *(void *)(a1 + 56) = v9;
        *(void *)(a1 + 64) = 0;
        Phase::MessagePipeReader<Phase::ActionTreeClientCommand>::Execute((uint64_t *)(a1 + 48), (void *)(a1 + 8));

        ++v6;
      }
      while (v4 != v6);
      uint64_t v4 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v4);
  }

  [*(id *)(a1 + 72) removeAllObjects];
  objc_sync_exit(v2);
}

void sub_221E6389C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void __clang_call_terminate(void *a1)
{
}

void *std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::~__value_func[abi:ne180100](void *a1)
{
  id v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void Phase::Dispatch::TransactionExecutor<Phase::ActionTreeServerCommand>::~TransactionExecutor(uint64_t a1)
{
  *(void *)a1 = &unk_26D471068;

  std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::~__hash_table(a1 + 8);

  JUMPOUT(0x223C938A0);
}

void Phase::Controller::SamplerPrepareParameters::~SamplerPrepareParameters(Phase::Controller::SamplerPrepareParameters *this)
{
}

uint64_t Phase::Controller::GeneratorPrepareParameters::AsProcedurePrepareParameters(Phase::Controller::GeneratorPrepareParameters *this)
{
  return 0;
}

uint64_t Phase::Controller::GeneratorPrepareParameters::AsSamplerPrepareParameters(Phase::Controller::GeneratorPrepareParameters *this)
{
  return 0;
}

void Phase::Controller::ProcedurePrepareParameters::~ProcedurePrepareParameters(Phase::Controller::ProcedurePrepareParameters *this)
{
}

void *std::string::basic_string[abi:ne180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    uint64_t v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

void std::vector<Phase::VoiceDescriptor>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  id v2 = *a1;
  if (*v2)
  {
    std::vector<Phase::VoiceDescriptor>::__clear[abi:ne180100]((uint64_t *)v2);
    id v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<Phase::VoiceDescriptor>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 32)
  {
    size_t v4 = *(void **)(i - 24);
    if (v4)
    {
      *(void *)(i - 16) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

uint64_t std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      id v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  size_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

std::vector<char> *__cdecl std::vector<char>::vector(std::vector<char> *this, std::vector<char>::size_type __n, const std::vector<char>::value_type *__x)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<char>::size_type v5 = __n;
    std::vector<char>::__vallocate[abi:ne180100](this, __n);
    std::vector<char>::pointer end = this->__end_;
    uint64_t v7 = &end[v5];
    do
    {
      *end++ = *__x;
      --v5;
    }
    while (v5);
    this->__end_ = v7;
  }
  return this;
}

void sub_221E63CD0(_Unwind_Exception *exception_object)
{
  id v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<char>::__vallocate[abi:ne180100](void *a1, size_t __sz)
{
  if ((__sz & 0x8000000000000000) != 0) {
    std::vector<char>::__throw_length_error[abi:ne180100]();
  }
  result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

void std::vector<char>::__throw_length_error[abi:ne180100]()
{
}

void Phase::Dispatch::TransactionExecutor<Phase::ActionTreeClientCommand>::~TransactionExecutor(uint64_t a1)
{
  *(void *)a1 = &unk_26D4710F0;

  std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::~__hash_table(a1 + 8);

  JUMPOUT(0x223C938A0);
}

uint64_t std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      id v3 = (void *)*v2;
      std::__function::__value_func<void ()(void const*)>::~__value_func[abi:ne180100](v2 + 3);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void *std::__function::__value_func<void ()(void const*)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__shared_weak_count::__release_shared[abi:ne180100](std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

void Phase::Dispatch::sMessageWriterCallback(uint64_t a1, void *a2, uint64_t a3)
{
  id v3 = *(void **)(a1 + 24);
  if (!v3) {
    __assert_rtn("sMessageWriterCallback", "DispatcherTransactionWriter.h", 24, "inOldBuffer.mUserData != nullptr");
  }
  uint64_t v6 = *v3;
  unint64_t v7 = 2 * (v3[2] - *v3);
  unint64_t v8 = v3[1] - *v3;
  if (v7 <= v8 + a3) {
    unint64_t v7 = v8 + a3;
  }
  if (v7 <= v8)
  {
    if (v7 < v8) {
      v3[1] = v6 + v7;
    }
    uint64_t v9 = v3;
  }
  else
  {
    std::vector<char>::__append(*(std::vector<char> **)(a1 + 24), v7 - v8);
    uint64_t v6 = *v3;
    uint64_t v9 = *(void **)(a1 + 24);
  }
  uint64_t v10 = *(void *)(a1 + 8);
  *a2 = v6;
  uint64_t v11 = v3[2] - v6;
  a2[1] = v10;
  a2[2] = v11;
  a2[3] = v9;
}

{
  void *v3;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;

  id v3 = *(void **)(a1 + 24);
  if (!v3) {
    __assert_rtn("sMessageWriterCallback", "DispatcherTransactionWriter.h", 24, "inOldBuffer.mUserData != nullptr");
  }
  uint64_t v6 = *v3;
  unint64_t v7 = 2 * (v3[2] - *v3);
  unint64_t v8 = v3[1] - *v3;
  if (v7 <= v8 + a3) {
    unint64_t v7 = v8 + a3;
  }
  if (v7 <= v8)
  {
    if (v7 < v8) {
      v3[1] = v6 + v7;
    }
    uint64_t v9 = v3;
  }
  else
  {
    std::vector<char>::__append(*(std::vector<char> **)(a1 + 24), v7 - v8);
    uint64_t v6 = *v3;
    uint64_t v9 = *(void **)(a1 + 24);
  }
  uint64_t v10 = *(void *)(a1 + 8);
  *a2 = v6;
  uint64_t v11 = v3[2] - v6;
  a2[1] = v10;
  a2[2] = v11;
  a2[3] = v9;
}

void std::vector<char>::__append(std::vector<char> *this, std::vector<char>::size_type __n)
{
  std::vector<char>::pointer end = this->__end_;
  value = this->__end_cap_.__value_;
  if (value - end >= __n)
  {
    if (__n)
    {
      bzero(this->__end_, __n);
      end += __n;
    }
    this->__end_ = end;
  }
  else
  {
    std::vector<char>::pointer begin = this->__begin_;
    int64_t v7 = end - this->__begin_;
    unint64_t v8 = v7 + __n;
    if ((uint64_t)(v7 + __n) < 0) {
      std::vector<char>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = value - begin;
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v10 = v8;
    }
    if (v10) {
      uint64_t v11 = (char *)operator new(v10);
    }
    else {
      uint64_t v11 = 0;
    }
    long long v12 = &v11[v7];
    long long v13 = &v11[v10];
    bzero(v12, __n);
    if (end == begin)
    {
      uint64_t v11 = v12;
    }
    else
    {
      long long v14 = &end[~(unint64_t)begin];
      do
      {
        char v15 = *--end;
        (v14--)[(void)v11] = v15;
      }
      while (end != begin);
      std::vector<char>::pointer end = this->__begin_;
    }
    this->__begin_ = v11;
    this->__end_ = &v12[__n];
    this->__end_cap_.__value_ = v13;
    if (end)
    {
      operator delete(end);
    }
  }
}

void *std::function<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::operator=(void *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::~__value_func[abi:ne180100](v4);
  return a1;
}

uint64_t std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    size_t v4 = (void *)result[3];
    std::vector<char>::size_type v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_221E644E0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void std::__function::__func<void (*)(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long),std::allocator<void (*)(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>,void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::~__func()
{
}

void *std::__function::__func<void (*)(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long),std::allocator<void (*)(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>,void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::__clone(uint64_t a1)
{
  result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26D471118;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long),std::allocator<void (*)(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>,void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D471118;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long),std::allocator<void (*)(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>,void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(a1 + 8))(a2, a3, *a4);
}

void Phase::MessagePipeWriter<Phase::ActionTreeClientCommand>::WriteMessage(void *a1, unsigned int a2, void *__src, size_t __n)
{
  unsigned int v4 = __n;
  uint64_t v31 = *MEMORY[0x263EF8340];
  size_t v8 = __n;
  uint64_t v9 = __n + 8;
  uint64_t v11 = *a1;
  uint64_t v10 = a1[1];
  unint64_t v12 = v10 + v9;
  if (*a1 && v12 <= a1[2]) {
    goto LABEL_8;
  }
  if (a1[7])
  {
    memset(v26, 0, 32);
    long long v13 = (Phase::Logger *)std::function<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::operator()((uint64_t)(a1 + 4), (uint64_t)a1, (uint64_t)v26, v12);
    long long v14 = *(_OWORD *)&v26[16];
    *(_OWORD *)a1 = *(_OWORD *)v26;
    *((_OWORD *)a1 + 1) = v14;
    uint64_t v11 = *a1;
    uint64_t v10 = a1[1];
    unint64_t v15 = v10 + v9;
    if (!*a1 || v15 > a1[2])
    {
      __int16 v16 = **(id **)(Phase::Logger::GetInstance(v13) + 848);
      if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
        return;
      }
      uint64_t v17 = *a1;
      uint64_t v18 = a1[2];
      *(_DWORD *)v26 = 136316418;
      *(void *)&v26[4] = "MessagePipe.hpp";
      *(_WORD *)&v26[12] = 1024;
      *(_DWORD *)&v26[14] = 284;
      *(_WORD *)&v26[18] = 2048;
      *(void *)&v26[20] = v17;
      *(_WORD *)&v26[28] = 2048;
      *(void *)&v26[30] = v18;
      __int16 v27 = 2048;
      unint64_t v28 = v15;
      __int16 v29 = 2048;
      uint64_t v30 = a2;
      int v19 = "%25s:%-5d write buffer left in invalid state with pointer %p and %lu max bytes compared to required %lu byte"
            "s for message type %llu";
      __int16 v20 = v16;
      uint32_t v21 = 58;
      goto LABEL_11;
    }
LABEL_8:
    uint64_t v22 = (unsigned int *)(v11 + v10);
    *uint64_t v22 = a2;
    v22[1] = v4;
    uint64_t v23 = *a1;
    uint64_t v24 = a1[1] + 8;
    a1[1] = v24;
    memcpy((void *)(v23 + v24), __src, v8);
    a1[1] += v8;
    return;
  }
  uint64_t v25 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)a1) + 848);
  if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
    return;
  }
  *(_DWORD *)v26 = 136315906;
  *(void *)&v26[4] = "MessagePipe.hpp";
  *(_WORD *)&v26[12] = 1024;
  *(_DWORD *)&v26[14] = 270;
  *(_WORD *)&v26[18] = 2048;
  *(void *)&v26[20] = a2;
  *(_WORD *)&v26[28] = 2048;
  *(void *)&v26[30] = v12;
  int v19 = "%25s:%-5d failed to acquire write buffer for message type %llu of size %lu";
  __int16 v20 = v25;
  uint32_t v21 = 38;
LABEL_11:
  _os_log_impl(&dword_221E5E000, v20, OS_LOG_TYPE_ERROR, v19, v26, v21);
}

uint64_t std::function<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a4;
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)v4 + 48))(v4, a2, a3, &v6);
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);

  JUMPOUT(0x223C938A0);
}

double Phase::MessagePipeWriter<Phase::ActionTreeClientCommand>::Clear(uint64_t a1)
{
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = 0;
  }
  else if (*(void *)(a1 + 56))
  {
    long long v4 = 0u;
    long long v5 = 0u;
    std::function<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::operator()(a1 + 32, a1, (uint64_t)&v4, 0);
    double result = *(double *)&v4;
    long long v3 = v5;
    *(_OWORD *)a1 = v4;
    *(_OWORD *)(a1 + 16) = v3;
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::__deallocate_node(int a1, void *__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      long long v3 = (void *)*v2;
      uint64_t v4 = v2[4];
      v2[4] = 0;
      if (v4) {
        std::default_delete<Phase::ActionTreeIOManager::BufferInfo>::operator()[abi:ne180100]((uint64_t)(v2 + 4), v4);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::default_delete<Phase::ActionTreeIOManager::BufferInfo>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(void **)(a2 + 48);
    if (v2)
    {
      *(void *)(a2 + 56) = v2;
      operator delete(v2);
    }
    JUMPOUT(0x223C938A0);
  }
}

void std::__hash_table<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeServerCommand>,std::equal_to<Phase::ActionTreeServerCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeServerCommand>,std::hash<Phase::ActionTreeServerCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::ActionTreeServerCommand,Phase::ActionTreeServerCommand,std::__bind<void (Phase::ActionTreeServerCommandProcessor::*)(void const*),Phase::ActionTreeServerCommandProcessor*,std::placeholders::__ph<1> const&>>(uint64_t a1, int a2, int a3, uint64_t a4)
{
  unint64_t v8 = a2;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = a2;
      if (v9 <= a2) {
        unint64_t v4 = a2 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & a2;
    }
    uint64_t v11 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == a2)
        {
          if (*((_DWORD *)i + 4) == a2) {
            return;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4) {
            break;
          }
        }
      }
    }
  }
  long long v14 = (void *)(a1 + 16);
  unint64_t v15 = operator new(0x38uLL);
  v38[0] = v15;
  v38[1] = a1 + 16;
  char v39 = 0;
  *unint64_t v15 = 0;
  v15[1] = v8;
  *((_DWORD *)v15 + 4) = a3;
  v15[6] = 0;
  __int16 v16 = (char *)operator new(0x20uLL);
  *(void *)__int16 v16 = &unk_26D471160;
  *(_OWORD *)(v16 + 8) = *(_OWORD *)a4;
  *((void *)v16 + 3) = *(void *)(a4 + 16);
  v15[6] = v16;
  char v39 = 1;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    BOOL v19 = 1;
    if (v9 >= 3) {
      BOOL v19 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v9);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      int8x8_t prime = (int8x8_t)v21;
    }
    else {
      int8x8_t prime = (int8x8_t)v20;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v9 = *(void *)(a1 + 8);
    }
    if (*(void *)&prime > v9) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (uint8x8_t v30 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        unint64_t v29 = std::__next_prime(v29);
      }
      else
      {
        uint64_t v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2) {
          unint64_t v29 = v31;
        }
      }
      if (*(void *)&prime <= v29) {
        int8x8_t prime = (int8x8_t)v29;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = *(void *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v23 = operator new(8 * *(void *)&prime);
          uint64_t v24 = *(void **)a1;
          *(void *)a1 = v23;
          if (v24) {
            operator delete(v24);
          }
          uint64_t v25 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v25++) = 0;
          while (*(void *)&prime != v25);
          v26 = (void *)*v14;
          if (*v14)
          {
            unint64_t v27 = v26[1];
            uint8x8_t v28 = (uint8x8_t)vcnt_s8(prime);
            v28.i16[0] = vaddlv_u8(v28);
            if (v28.u32[0] > 1uLL)
            {
              if (v27 >= *(void *)&prime) {
                v27 %= *(void *)&prime;
              }
            }
            else
            {
              v27 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v27) = v14;
            uint64_t v32 = (void *)*v26;
            if (*v26)
            {
              do
              {
                unint64_t v33 = v32[1];
                if (v28.u32[0] > 1uLL)
                {
                  if (v33 >= *(void *)&prime) {
                    v33 %= *(void *)&prime;
                  }
                }
                else
                {
                  v33 &= *(void *)&prime - 1;
                }
                if (v33 != v27)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v33))
                  {
                    *(void *)(*(void *)a1 + 8 * v33) = v26;
                    goto LABEL_55;
                  }
                  void *v26 = *v32;
                  *uint64_t v32 = **(void **)(*(void *)a1 + 8 * v33);
                  **(void **)(*(void *)a1 + 8 * v33) = v32;
                  uint64_t v32 = v26;
                }
                unint64_t v33 = v27;
LABEL_55:
                v26 = v32;
                uint64_t v32 = (void *)*v32;
                unint64_t v27 = v33;
              }
              while (v32);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_59;
        }
        long long v37 = *(void **)a1;
        *(void *)a1 = 0;
        if (v37) {
          operator delete(v37);
        }
        unint64_t v9 = 0;
        *(void *)(a1 + 8) = 0;
      }
    }
LABEL_59:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v8) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  uint64_t v34 = *(void **)(*(void *)a1 + 8 * v4);
  uint64_t v35 = v38[0];
  if (v34)
  {
    *(void *)v38[0] = *v34;
LABEL_72:
    *uint64_t v34 = v35;
    goto LABEL_73;
  }
  *(void *)v38[0] = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v35;
  *(void *)(*(void *)a1 + 8 * v4) = v14;
  if (*(void *)v35)
  {
    unint64_t v36 = *(void *)(*(void *)v35 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v36 >= v9) {
        v36 %= v9;
      }
    }
    else
    {
      v36 &= v9 - 1;
    }
    uint64_t v34 = (void *)(*(void *)a1 + 8 * v36);
    goto LABEL_72;
  }
LABEL_73:
  v38[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,void *>>>>::reset[abi:ne180100]((uint64_t)v38);
}

void sub_221E64E28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<std::__bind<void (Phase::ActionTreeServerCommandProcessor::*)(void const*),Phase::ActionTreeServerCommandProcessor*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (Phase::ActionTreeServerCommandProcessor::*)(void const*),Phase::ActionTreeServerCommandProcessor*,std::placeholders::__ph<1> const&>>,void ()(void const*)>::~__func()
{
}

__n128 std::__function::__func<std::__bind<void (Phase::ActionTreeServerCommandProcessor::*)(void const*),Phase::ActionTreeServerCommandProcessor*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (Phase::ActionTreeServerCommandProcessor::*)(void const*),Phase::ActionTreeServerCommandProcessor*,std::placeholders::__ph<1> const&>>,void ()(void const*)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26D471160;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<std::__bind<void (Phase::ActionTreeServerCommandProcessor::*)(void const*),Phase::ActionTreeServerCommandProcessor*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (Phase::ActionTreeServerCommandProcessor::*)(void const*),Phase::ActionTreeServerCommandProcessor*,std::placeholders::__ph<1> const&>>,void ()(void const*)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D471160;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::__bind<void (Phase::ActionTreeServerCommandProcessor::*)(void const*),Phase::ActionTreeServerCommandProcessor*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (Phase::ActionTreeServerCommandProcessor::*)(void const*),Phase::ActionTreeServerCommandProcessor*,std::placeholders::__ph<1> const&>>,void ()(void const*)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  long long v3 = (uint64_t (*)(void *, void))a1[1];
  unint64_t v4 = (void *)(a1[3] + (v2 >> 1));
  if (v2) {
    long long v3 = *(uint64_t (**)(void *, void))(*v4 + v3);
  }
  return v3(v4, *a2);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__function::__value_func<void ()(void const*)>::~__value_func[abi:ne180100](v1 + 3);
    }
    operator delete(v1);
  }
}

std::logic_error *std::domain_error::domain_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  __n128 result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C380] + 16);
  return result;
}

void Phase::GetBacktraceFrame<1ul>(std::string *a1@<X8>)
{
  std::vector<void *>::vector(&v19, 3uLL);
  int v2 = backtrace(v19, (unint64_t)((char *)v20 - (char *)v19) >> 3);
  std::vector<void *>::resize((uint64_t)&v19, v2);
  applesauce::backtrace::detail::symbolicate_snapshot((uint64_t)&v19, 3, &__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](v16, &__p, 24);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  memset(&__p, 0, sizeof(__p));
  uint64_t v12 = 0;
  unint64_t v13 = 0;
  unint64_t v14 = 0;
  long long v3 = (std::locale::id *)MEMORY[0x263F8C108];
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(void *)(v16[0] - 24)));
    unint64_t v4 = std::locale::use_facet(&v21, v3);
    unsigned __int8 v5 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10);
    std::locale::~locale(&v21);
    uint64_t v6 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v16, (uint64_t)&__p, v5);
    if ((*((unsigned char *)v6 + *(void *)(*v6 - 24) + 32) & 5) != 0) {
      break;
    }
    int64_t v7 = v13;
    if ((unint64_t)v13 >= v14)
    {
      unint64_t v9 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v12, (long long *)&__p);
    }
    else
    {
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v13, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else
      {
        long long v8 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v13->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
      }
      unint64_t v9 = v7 + 1;
    }
    unint64_t v13 = v9;
  }
  if (*(char *)(v12 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(a1, *(const std::string::value_type **)(v12 + 48), *(void *)(v12 + 56));
  }
  else
  {
    long long v10 = *(_OWORD *)(v12 + 48);
    a1->__r_.__value_.__r.__words[2] = *(void *)(v12 + 64);
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v10;
  }
  uint64_t v22 = (void **)&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v22);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v16[0] = *MEMORY[0x263F8C2B8];
  uint64_t v11 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(uint64_t *)((char *)v16 + *(void *)(v16[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v16[2] = v11;
  v16[3] = MEMORY[0x263F8C318] + 16;
  if (v17 < 0) {
    operator delete((void *)v16[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x223C937D0](&v18);
  if (v19)
  {
    unint64_t v20 = v19;
    operator delete(v19);
  }
}

void sub_221E652BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  *(void *)(v18 - 56) = &a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v18 - 56));
  if (a17 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a18);
  unint64_t v20 = *(void **)(v18 - 88);
  if (v20)
  {
    *(void *)(v18 - 80) = v20;
    operator delete(v20);
  }
  _Unwind_Resume(a1);
}

uint64_t *std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t *a1, const std::string *a2, int a3)
{
  uint64_t v6 = MEMORY[0x263F8C328] + 104;
  a1[16] = MEMORY[0x263F8C328] + 104;
  int64_t v7 = a1 + 2;
  uint64_t v8 = MEMORY[0x263F8C328] + 64;
  a1[2] = MEMORY[0x263F8C328] + 64;
  uint64_t v9 = (uint64_t)(a1 + 3);
  long long v10 = (void *)MEMORY[0x263F8C2B8];
  uint64_t v11 = *(void *)(MEMORY[0x263F8C2B8] + 24);
  uint64_t v12 = *(void *)(MEMORY[0x263F8C2B8] + 16);
  *a1 = v12;
  *(uint64_t *)((char *)a1 + *(void *)(v12 - 24)) = v11;
  a1[1] = 0;
  unint64_t v13 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v13, a1 + 3);
  uint64_t v14 = MEMORY[0x263F8C328] + 24;
  v13[1].__vftable = 0;
  v13[1].__fmtflags_ = -1;
  uint64_t v15 = v10[5];
  uint64_t v16 = v10[4];
  a1[2] = v16;
  *(void *)((char *)v7 + *(void *)(v16 - 24)) = v15;
  uint64_t v17 = v10[1];
  *a1 = v17;
  *(uint64_t *)((char *)a1 + *(void *)(v17 - 24)) = v10[6];
  *a1 = v14;
  a1[16] = v6;
  a1[2] = v8;
  std::stringbuf::basic_stringbuf[abi:ne180100](v9, a2, a3);
  return a1;
}

void sub_221E655D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C2B8];
  uint64_t v3 = *MEMORY[0x263F8C2B8];
  *(void *)a1 = *MEMORY[0x263F8C2B8];
  uint64_t v4 = *(void *)(v2 + 72);
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 64);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x223C937D0](a1 + 128);
  return a1;
}

void std::vector<void *>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<void *>::__append((void **)a1, a2 - v2);
  }
}

void *std::vector<void *>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<void *>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_221E657C4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<void *>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::vector<char>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a2);
}

void std::vector<void *>::__append(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unsigned __int8 v5 = v6;
  int64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 3);
    if (v9 >> 61) {
      std::vector<char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 3;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 2 > v9) {
      unint64_t v9 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v4, v12);
    }
    else {
      unint64_t v13 = 0;
    }
    uint64_t v14 = &v13[8 * v10];
    uint64_t v15 = &v13[8 * v12];
    bzero(v14, 8 * a2);
    uint64_t v16 = &v14[8 * a2];
    uint64_t v18 = (char *)*a1;
    uint64_t v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        uint64_t v19 = *((void *)v17 - 1);
        v17 -= 8;
        *((void *)v14 - 1) = v19;
        v14 -= 8;
      }
      while (v17 != v18);
      uint64_t v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

void applesauce::backtrace::detail::symbolicate_snapshot(uint64_t a1@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  unsigned __int8 v5 = *(void *const **)a1;
  unint64_t v7 = *(void *)(a1 + 8) - (void)v5;
  uint64_t v8 = backtrace_symbols(v5, v7 >> 3);
  unint64_t v34 = v7 >> 3;
  if ((int)(v7 >> 3) >= 1)
  {
    uint64_t v9 = 0;
    uint64_t v10 = (v7 >> 3);
    while (1)
    {
      uint64_t v11 = *(const void **)(*(void *)a1 + 8 * v9);
      snprintf(__str, 0x40uLL, "%-3d\t%*p\t", v9, 18, v11);
      std::string::append(a3, __str);
      memset(&v43, 0, sizeof(v43));
      if (dladdr(v11, &v43)) {
        BOOL v12 = v43.dli_sname == 0;
      }
      else {
        BOOL v12 = 1;
      }
      if (v12)
      {
        unint64_t v13 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&__dst, v8[v9]);
        uint64_t v14 = std::string::append(v13, "\n");
        long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
        int64_t v41 = v14->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v15;
        v14->__r_.__value_.__l.__size_ = 0;
        v14->__r_.__value_.__r.__words[2] = 0;
        v14->__r_.__value_.__r.__words[0] = 0;
        if (v41 >= 0) {
          uint64_t v16 = __p;
        }
        else {
          uint64_t v16 = (void **)__p[0];
        }
        if (v41 >= 0) {
          std::string::size_type v17 = HIBYTE(v41);
        }
        else {
          std::string::size_type v17 = (std::string::size_type)__p[1];
        }
        std::string::append(a3, (const std::string::value_type *)v16, v17);
        if (SHIBYTE(v41) < 0) {
          operator delete(__p[0]);
        }
        if ((SHIBYTE(v45) & 0x80000000) == 0) {
          goto LABEL_60;
        }
        uint64_t v18 = (void *)__dst;
        goto LABEL_59;
      }
      std::string::basic_string[abi:ne180100]<0>(&v39, (char *)v43.dli_sname);
      LODWORD(status.__r_.__value_.__l.__data_) = 0;
      outlen.__r_.__value_.__r.__words[0] = 0;
      uint64_t v19 = (v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v39
          : (std::string *)v39.__r_.__value_.__r.__words[0];
      unint64_t v20 = __cxa_demangle((const char *)v19, 0, (size_t *)&outlen, (int *)&status);
      std::locale v21 = v20;
      if (!LODWORD(status.__r_.__value_.__l.__data_)) {
        break;
      }
      LOBYTE(__p[0]) = 0;
      char v42 = 0;
      if (v20) {
        goto LABEL_23;
      }
LABEL_24:
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v39.__r_.__value_.__l.__data_);
      }
      if (v42)
      {
        if (v41 >= 0) {
          dli_sname = (char *)__p;
        }
        else {
          dli_sname = (char *)__p[0];
        }
      }
      else
      {
        dli_sname = (char *)v43.dli_sname;
        if (!v43.dli_sname) {
          dli_sname = v8[v9];
        }
      }
      dli_saddr = v43.dli_saddr;
      std::string::basic_string[abi:ne180100]<0>(&status, dli_sname);
      uint64_t v24 = std::string::append(&status, " + ");
      long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      outlen.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
      *(_OWORD *)&outlen.__r_.__value_.__l.__data_ = v25;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v36, (unsigned char *)v11 - dli_saddr);
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v26 = &v36;
      }
      else {
        v26 = (std::string *)v36.__r_.__value_.__r.__words[0];
      }
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v36.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v36.__r_.__value_.__l.__size_;
      }
      uint8x8_t v28 = std::string::append(&outlen, (const std::string::value_type *)v26, size);
      long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v39.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      uint8x8_t v30 = std::string::append(&v39, "\n");
      long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
      int64_t v45 = v30->__r_.__value_.__r.__words[2];
      long long __dst = v31;
      v30->__r_.__value_.__l.__size_ = 0;
      v30->__r_.__value_.__r.__words[2] = 0;
      v30->__r_.__value_.__r.__words[0] = 0;
      if (v45 >= 0) {
        p_dst = (const std::string::value_type *)&__dst;
      }
      else {
        p_dst = (const std::string::value_type *)__dst;
      }
      if (v45 >= 0) {
        std::string::size_type v33 = HIBYTE(v45);
      }
      else {
        std::string::size_type v33 = *((void *)&__dst + 1);
      }
      std::string::append(a3, p_dst, v33);
      if (SHIBYTE(v45) < 0) {
        operator delete((void *)__dst);
      }
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v39.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v36.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(outlen.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(outlen.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(status.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(status.__r_.__value_.__l.__data_);
      }
      if (!v42 || (SHIBYTE(v41) & 0x80000000) == 0) {
        goto LABEL_60;
      }
      uint64_t v18 = __p[0];
LABEL_59:
      operator delete(v18);
LABEL_60:
      if (v10 == ++v9) {
        goto LABEL_61;
      }
    }
    std::string::basic_string[abi:ne180100](&__dst, v20, outlen.__r_.__value_.__r.__words[0] - 1);
    *(_OWORD *)std::string __p = __dst;
    int64_t v41 = v45;
    char v42 = 1;
    if (!v21) {
      goto LABEL_24;
    }
LABEL_23:
    free(v21);
    goto LABEL_24;
  }
LABEL_61:
  if (v34 == a2) {
    std::string::append(a3, "[truncated?]\n");
  }
  if (v8) {
    free(v8);
  }
}

void sub_221E65D20(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void *std::string::basic_string[abi:ne180100](void *__dst, void *__src, size_t __len)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *long long __dst = v6;
  }
  else
  {
    *((unsigned char *)__dst + 23) = __len;
    uint64_t v6 = __dst;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __dst;
}

uint64_t std::stringbuf::basic_stringbuf[abi:ne180100](uint64_t a1, const std::string *a2, int a3)
{
  uint64_t v6 = std::streambuf::basic_streambuf();
  *(void *)uint64_t v6 = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_DWORD *)(v6 + 96) = a3;
  std::string::operator=((std::string *)(v6 + 64), a2);
  std::stringbuf::__init_buf_ptrs[abi:ne180100](a1);
  return a1;
}

void sub_221E65E7C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 87) < 0) {
    operator delete(*v2);
  }
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

void std::stringbuf::__init_buf_ptrs[abi:ne180100](uint64_t a1)
{
  *(void *)(a1 + 88) = 0;
  unint64_t v2 = (std::string *)(a1 + 64);
  char v3 = *(unsigned char *)(a1 + 87);
  if (v3 < 0)
  {
    uint64_t v4 = *(std::string **)(a1 + 64);
    unint64_t v5 = *(void *)(a1 + 72);
  }
  else
  {
    uint64_t v4 = v2;
    unint64_t v5 = *(unsigned __int8 *)(a1 + 87);
  }
  int v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    *(void *)(a1 + 88) = (char *)v4 + v5;
    *(void *)(a1 + 16) = v4;
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = (char *)v4 + v5;
  }
  if ((v6 & 0x10) != 0)
  {
    *(void *)(a1 + 88) = (char *)v4 + v5;
    std::string::size_type v7 = v3 < 0 ? (*(void *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize(v2, v7, 0);
    uint64_t v8 = *(char *)(a1 + 87) < 0 ? *(void *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(void *)(a1 + 40) = v4;
    *(void *)(a1 + 48) = v4;
    *(void *)(a1 + 56) = (char *)v4 + v8;
    if ((*(unsigned char *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        uint64_t v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        unint64_t v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        uint64_t v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        unint64_t v5 = v5 - v10 - 0x7FFFFFFF;
        *(void *)(a1 + 48) = v4;
      }
      if (v5) {
        *(void *)(a1 + 48) = (char *)v4 + v5;
      }
    }
  }
}

void *std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(void *a1, uint64_t a2, unsigned __int8 a3)
{
  MEMORY[0x223C93480](&v11, a1, 1);
  if (!v11) {
    return a1;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    **(unsigned char **)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 23) = 0;
  }
  uint64_t v6 = 0;
  while (1)
  {
    std::string::size_type v7 = *(void **)((char *)a1 + *(void *)(*a1 - 24) + 40);
    uint64_t v8 = (unsigned char *)v7[3];
    if (v8 != (unsigned char *)v7[4])
    {
      v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(void *))(*v7 + 80))(v7);
    if (v7 == -1) {
      break;
    }
LABEL_9:
    if (v7 == a3)
    {
      int v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    --v6;
    if (*(char *)(a2 + 23) < 0 && *(void *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      int v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6) {
    int v9 = 2;
  }
  else {
    int v9 = 6;
  }
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_221E66114(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v2 = *v1;
  *(_DWORD *)((char *)v1 + *(void *)(*v1 - 24) + 32) |= 1u;
  if ((*((unsigned char *)v1 + *(void *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x221E660D4);
  }
  __cxa_rethrow();
}

void sub_221E66190(_Unwind_Exception *a1)
{
}

uint64_t std::vector<std::string>::__push_back_slow_path<std::string const&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<char>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9) {
    unint64_t v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  std::__split_buffer<std::string>::pointer end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    std::__split_buffer<std::string>::pointer end = __v.__end_;
  }
  else
  {
    long long v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  uint64_t v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_221E662B4(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  std::vector<char>::pointer begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  std::__split_buffer<std::string>::pointer end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(24 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((void *)&v15 + 1) = v9;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 24;
  }
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  if (this->__first_) {
    operator delete(this->__first_);
  }
}

void std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      unint64_t v5 = v2 - 3;
      *(void *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        unint64_t v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  unint64_t v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    unint64_t v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    unint64_t v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }

  memmove(v5, __s, __sz + 1);
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

void std::__throw_bad_any_cast[abi:ne180100]()
{
  exception = (std::bad_any_cast *)__cxa_allocate_exception(8uLL);
  exception->__vftable = 0;
  uint64_t v1 = std::bad_any_cast::bad_any_cast(exception);
}

uint64_t (**std::any_cast[abi:ne180100]<ExternalStreamManager * const {__strong}>(uint64_t (**result)(uint64_t, void, void, void, void *)))(uint64_t, void, void, void, void *)
{
  if (result)
  {
    if (*result) {
      return (uint64_t (**)(uint64_t, void, void, void, void *))(*result)(3, result, 0, 0, &std::__any_imp::__unique_typeinfo<ExternalStreamManager * {__strong}>::__id);
    }
    else {
      return 0;
    }
  }
  return result;
}

std::bad_cast *std::bad_any_cast::bad_any_cast(std::bad_any_cast *this)
{
  __n128 result = std::bad_cast::bad_cast(this);
  result->__vftable = (std::bad_cast_vtbl *)(MEMORY[0x263F8C378] + 16);
  return result;
}

void std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::__do_rehash<true>(a1, prime);
    }
  }
}

void std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      char v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            void *v7 = *v11;
            *char v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = v11;
            char v11 = v7;
          }
          unint64_t v12 = v8;
LABEL_24:
          uint64_t v7 = v11;
          char v11 = (void *)*v11;
          unint64_t v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    long long v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::__emplace_unique_key_args<Phase::ActionTreeClientCommand,Phase::ActionTreeClientCommand,std::__bind<void (Phase::ActionTreeClientCommandProcessor::*)(void const*),Phase::ActionTreeClientCommandProcessor*,std::placeholders::__ph<1> const&>>(uint64_t a1, int a2, int a3, uint64_t a4)
{
  unint64_t v8 = a2;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = a2;
      if (v9 <= a2) {
        unint64_t v4 = a2 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & a2;
    }
    char v11 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == a2)
        {
          if (*((_DWORD *)i + 4) == a2) {
            return;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4) {
            break;
          }
        }
      }
    }
  }
  long long v14 = (void *)(a1 + 16);
  long long v15 = operator new(0x38uLL);
  v38[0] = v15;
  v38[1] = a1 + 16;
  char v39 = 0;
  *long long v15 = 0;
  v15[1] = v8;
  *((_DWORD *)v15 + 4) = a3;
  v15[6] = 0;
  uint64_t v16 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v16 = &unk_26D4711A8;
  *(_OWORD *)(v16 + 8) = *(_OWORD *)a4;
  *((void *)v16 + 3) = *(void *)(a4 + 16);
  v15[6] = v16;
  char v39 = 1;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    BOOL v19 = 1;
    if (v9 >= 3) {
      BOOL v19 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v9);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      int8x8_t prime = (int8x8_t)v21;
    }
    else {
      int8x8_t prime = (int8x8_t)v20;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v9 = *(void *)(a1 + 8);
    }
    if (*(void *)&prime > v9) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (uint8x8_t v30 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        unint64_t v29 = std::__next_prime(v29);
      }
      else
      {
        uint64_t v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2) {
          unint64_t v29 = v31;
        }
      }
      if (*(void *)&prime <= v29) {
        int8x8_t prime = (int8x8_t)v29;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = *(void *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v23 = operator new(8 * *(void *)&prime);
          uint64_t v24 = *(void **)a1;
          *(void *)a1 = v23;
          if (v24) {
            operator delete(v24);
          }
          uint64_t v25 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v25++) = 0;
          while (*(void *)&prime != v25);
          v26 = (void *)*v14;
          if (*v14)
          {
            unint64_t v27 = v26[1];
            uint8x8_t v28 = (uint8x8_t)vcnt_s8(prime);
            v28.i16[0] = vaddlv_u8(v28);
            if (v28.u32[0] > 1uLL)
            {
              if (v27 >= *(void *)&prime) {
                v27 %= *(void *)&prime;
              }
            }
            else
            {
              v27 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v27) = v14;
            uint64_t v32 = (void *)*v26;
            if (*v26)
            {
              do
              {
                unint64_t v33 = v32[1];
                if (v28.u32[0] > 1uLL)
                {
                  if (v33 >= *(void *)&prime) {
                    v33 %= *(void *)&prime;
                  }
                }
                else
                {
                  v33 &= *(void *)&prime - 1;
                }
                if (v33 != v27)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v33))
                  {
                    *(void *)(*(void *)a1 + 8 * v33) = v26;
                    goto LABEL_55;
                  }
                  void *v26 = *v32;
                  *uint64_t v32 = **(void **)(*(void *)a1 + 8 * v33);
                  **(void **)(*(void *)a1 + 8 * v33) = v32;
                  uint64_t v32 = v26;
                }
                unint64_t v33 = v27;
LABEL_55:
                v26 = v32;
                uint64_t v32 = (void *)*v32;
                unint64_t v27 = v33;
              }
              while (v32);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_59;
        }
        long long v37 = *(void **)a1;
        *(void *)a1 = 0;
        if (v37) {
          operator delete(v37);
        }
        unint64_t v9 = 0;
        *(void *)(a1 + 8) = 0;
      }
    }
LABEL_59:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v8) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  unint64_t v34 = *(void **)(*(void *)a1 + 8 * v4);
  uint64_t v35 = v38[0];
  if (v34)
  {
    *(void *)v38[0] = *v34;
LABEL_72:
    *unint64_t v34 = v35;
    goto LABEL_73;
  }
  *(void *)v38[0] = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v35;
  *(void *)(*(void *)a1 + 8 * v4) = v14;
  if (*(void *)v35)
  {
    unint64_t v36 = *(void *)(*(void *)v35 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v36 >= v9) {
        v36 %= v9;
      }
    }
    else
    {
      v36 &= v9 - 1;
    }
    unint64_t v34 = (void *)(*(void *)a1 + 8 * v36);
    goto LABEL_72;
  }
LABEL_73:
  v38[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,void *>>>>::reset[abi:ne180100]((uint64_t)v38);
}

void sub_221E66DC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<std::__bind<void (Phase::ActionTreeClientCommandProcessor::*)(void const*),Phase::ActionTreeClientCommandProcessor*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (Phase::ActionTreeClientCommandProcessor::*)(void const*),Phase::ActionTreeClientCommandProcessor*,std::placeholders::__ph<1> const&>>,void ()(void const*)>::~__func()
{
}

__n128 std::__function::__func<std::__bind<void (Phase::ActionTreeClientCommandProcessor::*)(void const*),Phase::ActionTreeClientCommandProcessor*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (Phase::ActionTreeClientCommandProcessor::*)(void const*),Phase::ActionTreeClientCommandProcessor*,std::placeholders::__ph<1> const&>>,void ()(void const*)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26D4711A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<std::__bind<void (Phase::ActionTreeClientCommandProcessor::*)(void const*),Phase::ActionTreeClientCommandProcessor*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (Phase::ActionTreeClientCommandProcessor::*)(void const*),Phase::ActionTreeClientCommandProcessor*,std::placeholders::__ph<1> const&>>,void ()(void const*)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D4711A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::__bind<void (Phase::ActionTreeClientCommandProcessor::*)(void const*),Phase::ActionTreeClientCommandProcessor*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (Phase::ActionTreeClientCommandProcessor::*)(void const*),Phase::ActionTreeClientCommandProcessor*,std::placeholders::__ph<1> const&>>,void ()(void const*)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = (uint64_t (*)(void *, void))a1[1];
  unint64_t v4 = (void *)(a1[3] + (v2 >> 1));
  if (v2) {
    uint64_t v3 = *(uint64_t (**)(void *, void))(*v4 + v3);
  }
  return v3(v4, *a2);
}

void Phase::MessagePipeReader<Phase::ActionTreeServerCommand>::Execute(uint64_t *a1, void *a2)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  unint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  uint64_t v4 = v2 + 8;
  if (v2 + 8 <= v3)
  {
    uint64_t v6 = *a1;
    uint64_t v7 = *a1 + v2;
    unint64_t v8 = v4 + *(unsigned int *)(v7 + 4);
    if (v8 <= v3)
    {
      a1[2] = v8;
      int v18 = *(_DWORD *)v7;
      if (v18)
      {
        uint64_t v10 = v6 + v4;
        do
        {
          char v11 = std::__hash_table<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeServerCommand>,std::equal_to<Phase::ActionTreeServerCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeServerCommand>,std::hash<Phase::ActionTreeServerCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>>>::find<Phase::ActionTreeServerCommand>(a2, &v18);
          if (v11)
          {
            if (!v10 || !v11[6]) {
              std::terminate();
            }
            std::function<void ()(void const*)>::operator()((uint64_t)(v11 + 3), v10);
          }
          else
          {
            unint64_t v12 = **(id **)(Phase::Logger::GetInstance(0) + 848);
            if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315650;
              unint64_t v20 = "MessagePipe.hpp";
              __int16 v21 = 1024;
              int v22 = 102;
              __int16 v23 = 1024;
              int v24 = v18;
              _os_log_impl(&dword_221E5E000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d skipping unrecognized transaction message %d", buf, 0x18u);
            }
          }
          unint64_t v14 = a1[1];
          uint64_t v13 = a1[2];
          uint64_t v15 = v13 + 8;
          if (v13 + 8 > v14) {
            break;
          }
          uint64_t v16 = *a1 + v13;
          unint64_t v17 = v15 + *(unsigned int *)(v16 + 4);
          if (v17 > v14) {
            break;
          }
          uint64_t v10 = *a1 + v15;
          a1[2] = v17;
          int v18 = *(_DWORD *)v16;
        }
        while (v18);
      }
    }
  }
}

uint64_t std::function<void ()(void const*)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

uint64_t *std::__hash_table<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeServerCommand>,std::equal_to<Phase::ActionTreeServerCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeServerCommand>,std::hash<Phase::ActionTreeServerCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>>>::find<Phase::ActionTreeServerCommand>(void *a1, int *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (*(void *)&v2 <= v3) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  uint64_t v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  for (__n128 result = *v6; result; __n128 result = (uint64_t *)*result)
  {
    unint64_t v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == v3) {
        return result;
      }
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(void *)&v2) {
          v8 %= *(void *)&v2;
        }
      }
      else
      {
        v8 &= *(void *)&v2 - 1;
      }
      if (v8 != v5) {
        return 0;
      }
    }
  }
  return result;
}

void Phase::MessagePipeReader<Phase::ActionTreeClientCommand>::Execute(uint64_t *a1, void *a2)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  unint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  uint64_t v4 = v2 + 8;
  if (v2 + 8 <= v3)
  {
    uint64_t v6 = *a1;
    uint64_t v7 = *a1 + v2;
    unint64_t v8 = v4 + *(unsigned int *)(v7 + 4);
    if (v8 <= v3)
    {
      a1[2] = v8;
      int v18 = *(_DWORD *)v7;
      if (v18)
      {
        uint64_t v10 = v6 + v4;
        do
        {
          char v11 = std::__hash_table<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeServerCommand>,std::equal_to<Phase::ActionTreeServerCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeServerCommand>,std::hash<Phase::ActionTreeServerCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>>>::find<Phase::ActionTreeServerCommand>(a2, &v18);
          if (v11)
          {
            if (!v10 || !v11[6]) {
              std::terminate();
            }
            std::function<void ()(void const*)>::operator()((uint64_t)(v11 + 3), v10);
          }
          else
          {
            unint64_t v12 = **(id **)(Phase::Logger::GetInstance(0) + 848);
            if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315650;
              unint64_t v20 = "MessagePipe.hpp";
              __int16 v21 = 1024;
              int v22 = 102;
              __int16 v23 = 1024;
              int v24 = v18;
              _os_log_impl(&dword_221E5E000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d skipping unrecognized transaction message %d", buf, 0x18u);
            }
          }
          unint64_t v14 = a1[1];
          uint64_t v13 = a1[2];
          uint64_t v15 = v13 + 8;
          if (v13 + 8 > v14) {
            break;
          }
          uint64_t v16 = *a1 + v13;
          unint64_t v17 = v15 + *(unsigned int *)(v16 + 4);
          if (v17 > v14) {
            break;
          }
          uint64_t v10 = *a1 + v15;
          a1[2] = v17;
          int v18 = *(_DWORD *)v16;
        }
        while (v18);
      }
    }
  }
}

uint64_t Phase::ActionTreeIOManager::PrepareGenerator(Phase::Logger *a1, uint64_t *a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  switch(*((unsigned char *)a2 + 48))
  {
    case 0:
      unint64_t v3 = *(uint64_t (**)(void))(*(void *)a1 + 88);
      goto LABEL_16;
    case 1:
    case 2:
      unint64_t v3 = *(uint64_t (**)(void))(*(void *)a1 + 96);
      goto LABEL_16;
    case 3:
      unint64_t v3 = *(uint64_t (**)(void))(*(void *)a1 + 112);
      goto LABEL_16;
    case 4:
      unint64_t v3 = *(uint64_t (**)(void))(*(void *)a1 + 104);
LABEL_16:
      uint64_t result = v3();
      break;
    default:
      uint64_t v4 = **(id **)(Phase::Logger::GetInstance(a1) + 688);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        int v5 = *((char *)a2 + 48);
        uint64_t v6 = *a2;
        int v8 = 136315906;
        unint64_t v9 = "ActionTreeIOManager.mm";
        __int16 v10 = 1024;
        int v11 = 62;
        __int16 v12 = 1024;
        int v13 = v5;
        __int16 v14 = 2048;
        uint64_t v15 = v6;
        _os_log_impl(&dword_221E5E000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d Error: invalid generator type %d for generatorId %llu!", (uint8_t *)&v8, 0x22u);
      }
      uint64_t result = 0;
      break;
  }
  return result;
}

std::vector<char> *Phase::ActionTreeIOManager::GetResidentBufferForGenerator@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  *(void *)__int16 v12 = a2;
  *(void *)&v12[8] = a3;
  uint64_t v6 = (Phase::Logger *)std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((void *)(a1 + 24), v12);
  if (v6 && (uint64_t v7 = *((void *)v6 + 4)) != 0)
  {
    long long v8 = *(_OWORD *)(v7 + 8);
    long long v9 = *(_OWORD *)(v7 + 24);
    *(void *)(a4 + 32) = *(void *)(v7 + 40);
    *(_OWORD *)a4 = v8;
    *(_OWORD *)(a4 + 16) = v9;
    *(void *)(a4 + 48) = 0;
    *(void *)(a4 + 56) = 0;
    *(void *)(a4 + 40) = 0;
    uint64_t result = (std::vector<char> *)std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>((void *)(a4 + 40), *(const void **)(v7 + 48), *(void *)(v7 + 56), *(void *)(v7 + 56) - *(void *)(v7 + 48));
    *(_DWORD *)(a4 + 64) = *(_DWORD *)(v7 + 72);
  }
  else
  {
    int v11 = **(id **)(Phase::Logger::GetInstance(v6) + 688);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int16 v12 = 136315650;
      *(void *)&v12[4] = "ActionTreeIOManager.mm";
      *(_WORD *)&v12[12] = 1024;
      *(_DWORD *)&v12[14] = 75;
      __int16 v13 = 2048;
      uint64_t v14 = a2;
      _os_log_impl(&dword_221E5E000, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: did not find resident buffer for generatorId %llu!", v12, 0x1Cu);
    }
    *(void *)(a4 + 64) = 0;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    v12[0] = 0;
    uint64_t result = std::vector<char>::vector((std::vector<char> *)(a4 + 40), 8uLL, v12);
    *(_DWORD *)result->__begin_ = 0;
    *(_DWORD *)(a4 + 64) = 0;
  }
  return result;
}

void Phase::ActionTreeIOManager::DestroyGenerator(int8x8_t *this, UniqueObjectId a2)
{
  unint64_t v2 = a2.mStorage[1];
  unint64_t v3 = a2.mStorage[0];
  UniqueObjectId v23 = a2;
  UniqueObjectId v24 = a2;
  int v5 = this + 3;
  if (!std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>(&this[3], &v24))return; {
  uint64_t v6 = 0;
  }
  unint64_t v7 = 0xCBF29CE484222325;
  do
    unint64_t v7 = 0x100000001B3 * (v7 ^ *((char *)v23.mStorage + v6++));
  while (v6 != 16);
  int8x8_t v8 = this[4];
  if (!*(void *)&v8) {
    return;
  }
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v8);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v7;
    if (v7 >= *(void *)&v8) {
      unint64_t v10 = v7 % *(void *)&v8;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v8 - 1) & v7;
  }
  int8x8_t v11 = *v5;
  __int16 v12 = *(char ***)(*(void *)v5 + 8 * v10);
  if (!v12) {
    return;
  }
  __int16 v13 = *v12;
  if (!*v12) {
    return;
  }
  uint64_t v14 = *(void *)&v8 - 1;
  while (1)
  {
    unint64_t v15 = *((void *)v13 + 1);
    if (v15 == v7) {
      break;
    }
    if (v9.u32[0] > 1uLL)
    {
      if (v15 >= *(void *)&v8) {
        v15 %= *(void *)&v8;
      }
    }
    else
    {
      v15 &= v14;
    }
    if (v15 != v10) {
      return;
    }
LABEL_24:
    __int16 v13 = *(char **)v13;
    if (!v13) {
      return;
    }
  }
  if (*((void *)v13 + 2) != v3 || *((void *)v13 + 3) != v2) {
    goto LABEL_24;
  }
  unint64_t v17 = *(char **)v13;
  if (v9.u32[0] > 1uLL)
  {
    if (v7 >= *(void *)&v8) {
      v7 %= *(void *)&v8;
    }
  }
  else
  {
    v7 &= v14;
  }
  int v18 = *(char **)(*(void *)&v11 + 8 * v7);
  do
  {
    BOOL v19 = (int8x8_t *)v18;
    int v18 = *(char **)v18;
  }
  while (v18 != v13);
  if (v19 == &this[5]) {
    goto LABEL_43;
  }
  unint64_t v20 = (unint64_t)v19[1];
  if (v9.u32[0] > 1uLL)
  {
    if (v20 >= *(void *)&v8) {
      v20 %= *(void *)&v8;
    }
  }
  else
  {
    v20 &= v14;
  }
  if (v20 == v7)
  {
LABEL_45:
    if (v17)
    {
      unint64_t v21 = *((void *)v17 + 1);
      goto LABEL_47;
    }
  }
  else
  {
LABEL_43:
    if (!v17) {
      goto LABEL_44;
    }
    unint64_t v21 = *((void *)v17 + 1);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v22 = *((void *)v17 + 1);
      if (v21 >= *(void *)&v8) {
        unint64_t v22 = v21 % *(void *)&v8;
      }
    }
    else
    {
      unint64_t v22 = v21 & v14;
    }
    if (v22 != v7)
    {
LABEL_44:
      *(void *)(*(void *)&v11 + 8 * v7) = 0;
      unint64_t v17 = *(char **)v13;
      goto LABEL_45;
    }
LABEL_47:
    if (v9.u32[0] > 1uLL)
    {
      if (v21 >= *(void *)&v8) {
        v21 %= *(void *)&v8;
      }
    }
    else
    {
      v21 &= v14;
    }
    if (v21 != v7)
    {
      *(void *)(*(void *)v5 + 8 * v21) = v19;
      unint64_t v17 = *(char **)v13;
    }
  }
  int8x8_t *v19 = (int8x8_t)v17;
  *(void *)__int16 v13 = 0;
  --*(void *)&this[6];

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,void *>>>::operator()[abi:ne180100](1, v13);
}

Phase::ActionTreeDirectIOManager *Phase::ActionTreeDirectIOManager::ActionTreeDirectIOManager(Phase::ActionTreeDirectIOManager *this, Phase::Controller::TaskManager *a2, Phase::ActionTreeServerCallbackInterface *a3)
{
  *((void *)this + 1) = a2;
  *((void *)this + 2) = a3;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 1065353216;
  *((void *)a3 + 12) = this;
  *(void *)this = &unk_26D471290;
  *((void *)this + 8) = 0;
  uint64_t v4 = Phase::Controller::TaskManager::GetService<Phase::ActionTreeManager>(a2, 7);
  *((void *)this + 8) = v4;
  if (!v4) {
    std::terminate();
  }
  return this;
}

void sub_221E679DC(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_26D471318;
  std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::~__hash_table(v2);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::TaskManager::GetService<Phase::ActionTreeManager>(Phase::Logger *a1, int a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v3 = *((void *)a1 + 6);
  if (a2 >= (unint64_t)((*((void *)a1 + 7) - v3) >> 5))
  {
    unint64_t v7 = **(id **)(Phase::Logger::GetInstance(a1) + 448);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v14 = "TaskManager.hpp";
      __int16 v15 = 1024;
      int v16 = 112;
      _os_log_impl(&dword_221E5E000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: pId < mServiceRegistry.size() is false.", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](exception, "PRECONDITION: pId < mServiceRegistry.size() is false.");
  }
  uint64_t v4 = (Phase::Logger *)(v3 + 32 * a2);
  if (!*(void *)v4)
  {
    uint8x8_t v9 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v4)
                                                                                       + 448)));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      Phase::GetBacktraceFrame<1ul>(&__p);
      unint64_t v10 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315906;
      uint64_t v14 = "TaskManager.hpp";
      __int16 v15 = 1024;
      int v16 = 121;
      __int16 v17 = 1024;
      int v18 = a2;
      __int16 v19 = 2080;
      unint64_t v20 = v10;
      _os_log_impl(&dword_221E5E000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::domain_error) [not lService.has_value() is true]: \"No service registered for Id %i, in call \\n%s\"", buf, 0x22u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }

    int8x8_t v11 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](v11, "No service registered for Id %i, in call \n%s");
  }
  int v5 = std::any_cast[abi:ne180100]<Phase::ActionTreeManager * const>((uint64_t (**)(uint64_t, void, void, void, void *))v4);
  if (!v5) {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  return (uint64_t)*v5;
}

void sub_221E67C38(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_221E67D48(_Unwind_Exception *a1)
{
}

void sub_221E67D68(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

BOOL Phase::ActionTreeDirectIOManager::PrepareResidentBufferGenerator(uint64_t a1, uint64_t *a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (*((unsigned char *)a2 + 48)) {
    std::terminate();
  }
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  *(void *)buf = *a2;
  *(void *)&buf[8] = v4;
  uint64_t v6 = (Phase::Logger *)std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((void *)(a1 + 24), buf);
  if (v6)
  {
    unint64_t v7 = **(id **)(Phase::Logger::GetInstance(v6) + 688);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "ActionTreeIOManager.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 111;
      __int16 v14 = 2048;
      uint64_t v15 = v5;
      _os_log_impl(&dword_221E5E000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d Error: resident buffer for generatorId %llu already exists, no-op!", buf, 0x1Cu);
    }
    return 0;
  }
  else
  {
    uint8x8_t v9 = Phase::Controller::TaskManager::GetObjCService<PHASEAssetRegistry>(*(Phase::Logger **)(a1 + 8), 1);
    uint64_t v10 = [v9 getSoundAssetInfo:a2[8]];
    BOOL v8 = v10 != 0;
    if (v10)
    {
      *(id *)((*(uint64_t (**)(uint64_t))(*(void *)v10 + 16))(v10) + 48);
      operator new();
    }
    int8x8_t v11 = **(id **)(Phase::Logger::GetInstance(0) + 688);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "ActionTreeIOManager.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 134;
      __int16 v14 = 2048;
      uint64_t v15 = v5;
      _os_log_impl(&dword_221E5E000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d Error: did not find asset info for resident buffer generatorId %llu!", buf, 0x1Cu);
    }
  }
  return v8;
}

void sub_221E684C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id Phase::Controller::TaskManager::GetObjCService<PHASEAssetRegistry>(Phase::Logger *a1, int a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v3 = *((void *)a1 + 6);
  if (a2 >= (unint64_t)((*((void *)a1 + 7) - v3) >> 5))
  {
    BOOL v8 = **(id **)(Phase::Logger::GetInstance(a1) + 448);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v15 = "TaskManager.hpp";
      __int16 v16 = 1024;
      int v17 = 140;
      _os_log_impl(&dword_221E5E000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: pId < mServiceRegistry.size() is false.", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](exception, "PRECONDITION: pId < mServiceRegistry.size() is false.");
  }
  uint64_t v4 = (Phase::Logger *)(v3 + 32 * a2);
  if (!*(void *)v4)
  {
    uint64_t v10 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v4)
                                                                                        + 448)));
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      Phase::GetBacktraceFrame<1ul>(&__p);
      int8x8_t v11 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315906;
      uint64_t v15 = "TaskManager.hpp";
      __int16 v16 = 1024;
      int v17 = 149;
      __int16 v18 = 1024;
      int v19 = a2;
      __int16 v20 = 2080;
      uint64_t v21 = v11;
      _os_log_impl(&dword_221E5E000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::domain_error) [not lService.has_value() is true]: \"No service registered for Id %i, in call \\n%s\"", buf, 0x22u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }

    __int16 v12 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](v12, "No service registered for Id %i, in call \n%s");
  }
  uint64_t v5 = (id *)std::any_cast[abi:ne180100]<PHASEAssetRegistry * const {__strong}>((uint64_t (**)(uint64_t, void, void, void, void *))v4);
  if (!v5) {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  id v6 = *v5;

  return v6;
}

void sub_221E687A8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_221E688B8(_Unwind_Exception *a1)
{
}

void sub_221E688D8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t Phase::ActionTreeDirectIOManager::GeneratorStreamSeek(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  return Phase::ActionTreeManager::GeneratorStreamSeek(*(void *)(a1 + 64), a2, a3, a4);
}

void Phase::ActionTreeDirectIOManager::EnqueueGeneratorBuffer()
{
}

BOOL Phase::ActionTreeDirectIOManager::IORenderOutput(uint64_t a1, uint64_t a2, uint64_t a3, const AudioTimeStamp *a4, uint64_t a5, unsigned int *a6)
{
  return Phase::ActionTreeManager::IORenderOutput(*(void *)(a1 + 64), a2, a3, a4, a5, a6);
}

BOOL Phase::ActionTreeIOManager::HasActiveGenerators(Phase::ActionTreeIOManager *this)
{
  return *((void *)this + 6) != 0;
}

void Phase::ActionTreeDirectIOManager::~ActionTreeDirectIOManager(Phase::ActionTreeDirectIOManager *this)
{
  *(void *)this = &unk_26D471318;
  std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::~__hash_table((uint64_t)this + 24);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26D471318;
  std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::~__hash_table((uint64_t)this + 24);

  JUMPOUT(0x223C938A0);
}

BOOL Phase::ActionTreeDirectIOManager::IOCanRenderGenerator(Phase::ActionTreeDirectIOManager *this, UniqueObjectId a2)
{
  UniqueObjectId v3 = a2;
  return std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((void *)this + 3, &v3) == 0;
}

uint64_t Phase::ActionTreeDirectIOManager::PrepareStreamingBufferGenerator()
{
  return 1;
}

uint64_t Phase::ActionTreeDirectIOManager::PreparePullStreamBufferGenerator()
{
  return 1;
}

uint64_t Phase::ActionTreeDirectIOManager::PrepareExternalOutputPullStreamBufferGenerator()
{
  return 1;
}

void *std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>(void *a1, void *a2)
{
  uint64_t v2 = 0;
  unint64_t v3 = 0xCBF29CE484222325;
  do
    unint64_t v3 = 0x100000001B3 * (v3 ^ *((char *)a2 + v2++));
  while (v2 != 16);
  int8x8_t v4 = (int8x8_t)a1[1];
  if (!*(void *)&v4) {
    return 0;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = v3;
    if (v3 >= *(void *)&v4) {
      unint64_t v6 = v3 % *(void *)&v4;
    }
  }
  else
  {
    unint64_t v6 = (*(void *)&v4 - 1) & v3;
  }
  unint64_t v7 = *(void **)(*a1 + 8 * v6);
  if (!v7) {
    return 0;
  }
  uint64_t result = (void *)*v7;
  if (*v7)
  {
    do
    {
      unint64_t v9 = result[1];
      if (v3 == v9)
      {
        if (result[2] == *a2 && result[3] == a2[1]) {
          return result;
        }
      }
      else
      {
        if (v5.u32[0] > 1uLL)
        {
          if (v9 >= *(void *)&v4) {
            v9 %= *(void *)&v4;
          }
        }
        else
        {
          v9 &= *(void *)&v4 - 1;
        }
        if (v9 != v6) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void *std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    unint64_t v6 = result;
    uint64_t result = std::vector<char>::__vallocate[abi:ne180100](result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_221E68B70(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

std::vector<char> *__cdecl std::vector<char>::vector(std::vector<char> *this, std::vector<char>::size_type __n)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<char>::__vallocate[abi:ne180100](this, __n);
    std::vector<char>::pointer end = this->__end_;
    uint8x8_t v5 = &end[__n];
    bzero(end, __n);
    this->__end_ = v5;
  }
  return this;
}

void sub_221E68BE4(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,void *>>>::operator()[abi:ne180100](char a1, char *__p)
{
  if (a1)
  {
    unint64_t v3 = __p + 32;
    uint64_t v4 = *((void *)__p + 4);
    *((void *)__p + 4) = 0;
    if (v4) {
      std::default_delete<Phase::ActionTreeIOManager::BufferInfo>::operator()[abi:ne180100]((uint64_t)v3, v4);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

uint64_t (**std::any_cast[abi:ne180100]<Phase::ActionTreeManager * const>(uint64_t (**result)(uint64_t, void, void, void, void *)))(uint64_t, void, void, void, void *)
{
  if (result)
  {
    if (*result) {
      return (uint64_t (**)(uint64_t, void, void, void, void *))(*result)(3, result, 0, 0, &std::__any_imp::__unique_typeinfo<Phase::ActionTreeManager *>::__id);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t (**std::any_cast[abi:ne180100]<PHASEAssetRegistry * const {__strong}>(uint64_t (**result)(uint64_t, void, void, void, void *)))(uint64_t, void, void, void, void *)
{
  if (result)
  {
    if (*result) {
      return (uint64_t (**)(uint64_t, void, void, void, void *))(*result)(3, result, 0, 0, &std::__any_imp::__unique_typeinfo<PHASEAssetRegistry * {__strong}>::__id);
    }
    else {
      return 0;
    }
  }
  return result;
}

Phase::ActionTreeObject *Phase::ActionTreeObject::ActionTreeObject(Phase::ActionTreeObject *this, PHASESoundEventNodeAsset *a2, PHASESoundEvent *a3)
{
  uint64_t v121 = *MEMORY[0x263EF8340];
  uint8x8_t v5 = a2;
  val = a3;
  MEMORY[0x223C944F0](buf);
  *(_OWORD *)this = *(_OWORD *)buf;
  unint64_t v6 = v5;
  *((void *)this + 2) = v6;
  v109 = v6;
  uint64_t v7 = [(PHASESoundEventNodeAsset *)v6 getActionTree];
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((void *)this + 16) = 0;
  *((_OWORD *)this + 2) = 0u;
  size_t v8 = (int64x2_t *)((char *)this + 32);
  unint64_t v9 = *(unsigned int *)(v7 + 8);
  unint64_t v10 = *(unsigned int *)(v7 + 96);
  *((_OWORD *)this + 14) = 0u;
  *((void *)this + 3) = v7;
  *((_DWORD *)this + 34) = 1065353216;
  *((_DWORD *)this + 54) = v9;
  *((_DWORD *)this + 55) = v10;
  *((_OWORD *)this + 17) = 0u;
  *((void *)this + 36) = 0;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  std::vector<Phase::MetaParamValue>::resize((char **)this + 28, v9);
  int8x8_t v11 = (char *)*((void *)this + 31);
  __int16 v12 = (unsigned char *)*((void *)this + 32);
  unint64_t v13 = (v12 - v11) >> 2;
  if (v9 <= v13)
  {
    if (v9 >= v13) {
      goto LABEL_18;
    }
    UniqueObjectId v24 = &v11[4 * v9];
    goto LABEL_15;
  }
  unint64_t v14 = v9 - v13;
  uint64_t v15 = *((void *)this + 33);
  if (v9 - v13 <= (v15 - (uint64_t)v12) >> 2)
  {
    bzero(*((void **)this + 32), 4 * v14);
    UniqueObjectId v24 = &v12[4 * v14];
LABEL_15:
    *((void *)this + 32) = v24;
    goto LABEL_18;
  }
  uint64_t v16 = v15 - (void)v11;
  uint64_t v17 = v16 >> 1;
  if (v16 >> 1 <= v9) {
    uint64_t v17 = v9;
  }
  if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v18 = v17;
  }
  if (v18 >> 62) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  int v19 = (char *)operator new(4 * v18);
  __int16 v20 = &v19[4 * v13];
  uint64_t v21 = &v19[4 * v18];
  bzero(v20, 4 * v14);
  uint64_t v22 = &v20[4 * v14];
  while (v12 != v11)
  {
    int v23 = *((_DWORD *)v12 - 1);
    v12 -= 4;
    *((_DWORD *)v20 - 1) = v23;
    v20 -= 4;
  }
  *((void *)this + 31) = v20;
  *((void *)this + 32) = v22;
  *((void *)this + 33) = v21;
  if (v11) {
    operator delete(v11);
  }
LABEL_18:
  std::vector<Phase::MetaParamValue>::resize((char **)this + 34, v10);
  inited = (Phase::Logger *)objc_initWeak((id *)this + 37, val);
  *((unsigned char *)this + 304) = 0;
  *((unsigned char *)this + 312) = 0;
  *((unsigned char *)this + 320) = 0;
  *((_DWORD *)this + 81) = 0;
  uint64_t v26 = *((void *)this + 4);
  unint64_t v27 = *(unsigned int *)(*((void *)this + 3) + 64);
  uint8x8_t v28 = (_OWORD *)*((void *)this + 5);
  unint64_t v29 = ((uint64_t)v28 - v26) >> 6;
  if (v27 <= v29)
  {
    if (v27 >= v29) {
      goto LABEL_41;
    }
    for (uint64_t i = (_OWORD *)(v26 + (v27 << 6)); v28 != i; v28 -= 4)
    {
      *(void *)buf = (char *)v28 - 56;
      std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    }
    goto LABEL_38;
  }
  uint64_t v30 = *((void *)this + 6);
  if (v27 - v29 <= (v30 - (uint64_t)v28) >> 6)
  {
    uint64_t i = &v28[4 * (v27 - v29)];
    unint64_t v47 = (v27 << 6) - (v29 << 6);
    do
    {
      v28[2] = 0u;
      v28[3] = 0u;
      *uint8x8_t v28 = 0u;
      v28[1] = 0u;
      inited = Phase::Fader<double>::Fader((Phase::Logger *)((char *)v28 + 8), 0.0);
      v28 += 4;
      v47 -= 64;
    }
    while (v47);
LABEL_38:
    *((void *)this + 5) = i;
    goto LABEL_41;
  }
  uint64_t v31 = v30 - v26;
  uint64_t v32 = v31 >> 5;
  if (v31 >> 5 <= v27) {
    uint64_t v32 = *(unsigned int *)(*((void *)this + 3) + 64);
  }
  if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFC0) {
    unint64_t v33 = 0x3FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v33 = v32;
  }
  *(void *)&buf[32] = (char *)this + 48;
  if (v33 >> 58) {
    goto LABEL_105;
  }
  unint64_t v34 = (char *)operator new(v33 << 6);
  uint64_t v35 = &v34[64 * v29];
  *(void *)buf = v34;
  *(void *)&buf[8] = v35;
  *(void *)&buf[16] = v35;
  *(void *)&buf[24] = &v34[64 * v33];
  unint64_t v36 = &v34[64 * v27];
  unint64_t v37 = (v27 << 6) - (v29 << 6);
  do
  {
    *((_OWORD *)v35 + 2) = 0u;
    *((_OWORD *)v35 + 3) = 0u;
    *(_OWORD *)uint64_t v35 = 0u;
    *((_OWORD *)v35 + 1) = 0u;
    Phase::Fader<double>::Fader((Phase::Logger *)(v35 + 8), 0.0);
    v35 += 64;
    v37 -= 64;
  }
  while (v37);
  *(void *)&buf[16] = v36;
  uint64_t v39 = *((void *)this + 4);
  unint64_t v38 = *((void *)this + 5);
  uint64_t v40 = *(void *)&buf[8];
  if (v38 == v39)
  {
    int64x2_t v45 = vdupq_n_s64(v38);
  }
  else
  {
    uint64_t v41 = 0;
    do
    {
      uint64_t v42 = v40 + v41;
      uint64_t v43 = v38 + v41;
      *(void *)(v42 - 64) = *(void *)(v38 + v41 - 64);
      *(void *)(v42 - 56) = 0;
      *(void *)(v42 - 48) = 0;
      *(void *)(v42 - 40) = 0;
      *(_OWORD *)(v42 - 56) = *(_OWORD *)(v38 + v41 - 56);
      *(void *)(v42 - 40) = *(void *)(v38 + v41 - 40);
      *(void *)(v43 - 56) = 0;
      *(void *)(v43 - 48) = 0;
      *(void *)(v43 - 40) = 0;
      long long v44 = *(_OWORD *)(v38 + v41 - 32);
      *(void *)(v42 - 16) = *(void *)(v38 + v41 - 16);
      *(_OWORD *)(v42 - 32) = v44;
      *(void *)(v42 - 8) = *(void *)(v38 + v41 - 8);
      v41 -= 64;
    }
    while (v38 + v41 != v39);
    int64x2_t v45 = *v8;
    unint64_t v36 = *(char **)&buf[16];
    v40 += v41;
  }
  *((void *)this + 4) = v40;
  *((void *)this + 5) = v36;
  *(int64x2_t *)&buf[8] = v45;
  uint64_t v48 = *((void *)this + 6);
  *((void *)this + 6) = *(void *)&buf[24];
  *(void *)&buf[24] = v48;
  *(void *)buf = v45.i64[0];
  inited = (Phase::Logger *)std::__split_buffer<Phase::MetaParamState>::~__split_buffer((uint64_t)buf);
LABEL_41:
  unint64_t v49 = *(unsigned int *)(*((void *)this + 3) + 40);
  uint64_t v50 = (Phase::Controller::StreamRenderer **)*((void *)this + 7);
  __int16 v51 = (Phase::Controller::StreamRenderer **)*((void *)this + 8);
  unint64_t v52 = 0xF0F0F0F0F0F0F0F1 * (v51 - v50);
  unint64_t v53 = v49 - v52;
  if (v49 > v52)
  {
    uint64_t v54 = *((void *)this + 9);
    if (0xF0F0F0F0F0F0F0F1 * ((v54 - (uint64_t)v51) >> 3) >= v53)
    {
      v70 = &v51[17 * v53];
      do
      {
        *((_OWORD *)v51 + 3) = 0uLL;
        *((_OWORD *)v51 + 4) = 0uLL;
        v51[10] = 0;
        *((_OWORD *)v51 + 1) = 0uLL;
        *((_OWORD *)v51 + 2) = 0uLL;
        *(_OWORD *)__int16 v51 = 0uLL;
        *((unsigned char *)v51 + 24) = 1;
        v51[6] = 0;
        v51[7] = 0;
        *((unsigned char *)v51 + 64) = 0;
        *(_OWORD *)(v51 + 11) = 0uLL;
        *(_OWORD *)(v51 + 13) = 0uLL;
        *(_OWORD *)(v51 + 15) = 0uLL;
        v51 += 17;
      }
      while (v51 != v70);
      *((void *)this + 8) = v70;
      goto LABEL_66;
    }
    unint64_t v55 = 0xE1E1E1E1E1E1E1E2 * ((v54 - (uint64_t)v50) >> 3);
    if (v55 <= v49) {
      unint64_t v55 = *(unsigned int *)(*((void *)this + 3) + 40);
    }
    if (0xF0F0F0F0F0F0F0F1 * ((v54 - (uint64_t)v50) >> 3) >= 0xF0F0F0F0F0F0F0) {
      unint64_t v56 = 0x1E1E1E1E1E1E1E1;
    }
    else {
      unint64_t v56 = v55;
    }
    if (v56 <= 0x1E1E1E1E1E1E1E1)
    {
      inited = (Phase::Logger *)operator new(136 * v56);
      v57 = (char *)inited + 8 * (v51 - v50);
      v58 = (char *)inited + 136 * v49;
      v59 = v57;
      do
      {
        *((_OWORD *)v59 + 3) = 0uLL;
        *((_OWORD *)v59 + 4) = 0uLL;
        *((void *)v59 + 10) = 0;
        *((_OWORD *)v59 + 1) = 0uLL;
        *((_OWORD *)v59 + 2) = 0uLL;
        *(_OWORD *)v59 = 0uLL;
        v59[24] = 1;
        *((void *)v59 + 6) = 0;
        *((void *)v59 + 7) = 0;
        v59[64] = 0;
        *(_OWORD *)(v59 + 88) = 0uLL;
        *(_OWORD *)(v59 + 104) = 0uLL;
        *(_OWORD *)(v59 + 120) = 0uLL;
        v59 += 136;
      }
      while (v59 != v58);
      v60 = (char *)inited + 136 * v56;
      if (v51 == v50)
      {
        *((void *)this + 7) = v57;
        *((void *)this + 8) = v58;
        *((void *)this + 9) = v60;
        if (!v51) {
          goto LABEL_66;
        }
      }
      else
      {
        do
        {
          long long v61 = *(_OWORD *)(v51 - 17);
          *(_OWORD *)(v57 - 126) = *(_OWORD *)((char *)v51 - 126);
          *(_OWORD *)(v57 - 136) = v61;
          uint64_t v62 = (uint64_t)*(v51 - 13);
          *(v51 - 13) = 0;
          *((void *)v57 - 13) = v62;
          long long v63 = *((_OWORD *)v51 - 5);
          *((_OWORD *)v57 - 6) = *((_OWORD *)v51 - 6);
          *((_OWORD *)v57 - 5) = v63;
          long long v64 = *((_OWORD *)v51 - 4);
          long long v65 = *((_OWORD *)v51 - 3);
          long long v66 = *((_OWORD *)v51 - 1);
          *((_OWORD *)v57 - 2) = *((_OWORD *)v51 - 2);
          *((_OWORD *)v57 - 1) = v66;
          *((_OWORD *)v57 - 4) = v64;
          *((_OWORD *)v57 - 3) = v65;
          v57 -= 136;
          v51 -= 17;
        }
        while (v51 != v50);
        __int16 v51 = (Phase::Controller::StreamRenderer **)*((void *)this + 7);
        v67 = (Phase::Controller::StreamRenderer **)*((void *)this + 8);
        *((void *)this + 7) = v57;
        *((void *)this + 8) = v58;
        *((void *)this + 9) = v60;
        if (v67 != v51)
        {
          do
          {
            v68 = v67 - 17;
            inited = std::unique_ptr<Phase::Controller::StreamRenderer>::reset[abi:ne180100](v67 - 13, 0);
            v67 = v68;
          }
          while (v68 != v51);
        }
        if (!v51) {
          goto LABEL_66;
        }
      }
      operator delete(v51);
      goto LABEL_66;
    }
LABEL_105:
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  if (v49 < v52)
  {
    for (j = &v50[17 * v49]; v51 != j; v51 -= 17)
      inited = std::unique_ptr<Phase::Controller::StreamRenderer>::reset[abi:ne180100](v51 - 13, 0);
    *((void *)this + 8) = j;
  }
LABEL_66:
  unint64_t v71 = *(unsigned int *)(*((void *)this + 3) + 96);
  v72 = (char *)*((void *)this + 10);
  v73 = (char *)*((void *)this + 11);
  unint64_t v74 = 0xAAAAAAAAAAAAAAABLL * ((v73 - v72) >> 5);
  unint64_t v75 = v71 - v74;
  if (v71 <= v74)
  {
    if (v71 >= v74) {
      goto LABEL_86;
    }
    v85 = &v72[96 * v71];
    goto LABEL_85;
  }
  uint64_t v76 = *((void *)this + 12);
  if (0xAAAAAAAAAAAAAAABLL * ((v76 - (uint64_t)v73) >> 5) >= v75)
  {
    v85 = &v73[96 * v75];
    do
    {
      *((_OWORD *)v73 + 3) = 0uLL;
      *((_OWORD *)v73 + 4) = 0uLL;
      *((void *)v73 + 10) = 0;
      *((void *)v73 + 11) = 0;
      *((_OWORD *)v73 + 1) = 0uLL;
      *((_OWORD *)v73 + 2) = 0uLL;
      *(_OWORD *)v73 = 0uLL;
      *((_DWORD *)v73 + 19) = 1065353216;
      v73 += 96;
    }
    while (v73 != v85);
LABEL_85:
    *((void *)this + 11) = v85;
    goto LABEL_86;
  }
  unint64_t v77 = 0x5555555555555556 * ((v76 - (uint64_t)v72) >> 5);
  if (v77 <= v71) {
    unint64_t v77 = *(unsigned int *)(*((void *)this + 3) + 96);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((v76 - (uint64_t)v72) >> 5) >= 0x155555555555555) {
    unint64_t v78 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v78 = v77;
  }
  if (v78 > 0x2AAAAAAAAAAAAAALL) {
    goto LABEL_105;
  }
  inited = (Phase::Logger *)operator new(96 * v78);
  v79 = (char *)inited + 32 * ((v73 - v72) >> 5);
  v80 = (char *)inited + 96 * v71;
  v81 = v79;
  do
  {
    *((_OWORD *)v81 + 3) = 0uLL;
    *((_OWORD *)v81 + 4) = 0uLL;
    *((void *)v81 + 10) = 0;
    *((void *)v81 + 11) = 0;
    *((_OWORD *)v81 + 1) = 0uLL;
    *((_OWORD *)v81 + 2) = 0uLL;
    *(_OWORD *)v81 = 0uLL;
    *((_DWORD *)v81 + 19) = 1065353216;
    v81 += 96;
  }
  while (v81 != v80);
  if (v73 != v72)
  {
    do
    {
      long long v82 = *((_OWORD *)v73 - 6);
      long long v83 = *((_OWORD *)v73 - 5);
      long long v84 = *((_OWORD *)v73 - 3);
      *((_OWORD *)v79 - 4) = *((_OWORD *)v73 - 4);
      *((_OWORD *)v79 - 3) = v84;
      *((_OWORD *)v79 - 6) = v82;
      *((_OWORD *)v79 - 5) = v83;
      *((_DWORD *)v79 - 8) = *((_DWORD *)v73 - 8);
      *((_DWORD *)v79 - 7) = *((_DWORD *)v73 - 7);
      *((_DWORD *)v79 - 6) = *((_DWORD *)v73 - 6);
      *((_DWORD *)v79 - 5) = *((_DWORD *)v73 - 5);
      *((_OWORD *)v79 - 1) = *((_OWORD *)v73 - 1);
      v79 -= 96;
      v73 -= 96;
    }
    while (v73 != v72);
    v73 = v72;
  }
  *((void *)this + 10) = v79;
  *((void *)this + 11) = v80;
  *((void *)this + 12) = (char *)inited + 96 * v78;
  if (v73) {
    operator delete(v73);
  }
LABEL_86:
  if (*((unsigned char *)this + 312)) {
    *((unsigned char *)this + 312) = 0;
  }
  *((unsigned char *)this + 200) = 0;
  *((unsigned char *)this + 144) = 1;
  *((void *)this + 26) = 0;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  uint64_t v86 = *((void *)this + 3);
  if (*(_DWORD *)(v86 + 64))
  {
    uint64_t v87 = 0;
    uint64_t v88 = 0;
    unint64_t v89 = 0;
    do
    {
      v90 = (void *)(v8->i64[0] + v88);
      uint64_t v91 = *(void *)(v86 + 72) + v87;
      inited = (Phase::Logger *)Phase::Fader<double>::SetDefaultValue((uint64_t)(v90 + 1), *(double *)(v91 + 48));
      v90[7] = *(void *)(v91 + 48);
      void *v90 = v91;
      ++v89;
      uint64_t v86 = *((void *)this + 3);
      v88 += 64;
      v87 += 464;
    }
    while (v89 < *(unsigned int *)(v86 + 64));
  }
  if (*(_DWORD *)(v86 + 96))
  {
    unint64_t v92 = 0;
    uint64_t v93 = 8;
    do
    {
      inited = (Phase::Logger *)MEMORY[0x223C944F0](buf);
      *(_OWORD *)(*((void *)this + 10) + v93) = *(_OWORD *)buf;
      ++v92;
      v93 += 96;
    }
    while (v92 < *(unsigned int *)(*((void *)this + 3) + 96));
  }
  uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance(inited);
  if (*((unsigned char *)Instance + 1557))
  {
    v95 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(Instance)
                                                                                        + 688)));
    if (os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v96 = *(void *)this;
      id v97 = [(PHASEAsset *)v109 identifier];
      uint64_t v98 = [v97 UTF8String];
      unint64_t v99 = *((char *)this + 144);
      v100 = "<not found>";
      v101 = "<not found>";
      if (v99 <= 0xA) {
        v101 = off_2645F6DD8[v99];
      }
      int v102 = *((unsigned __int8 *)this + 145);
      v103 = (_DWORD *)*((void *)this + 3);
      if (v102 == 1) {
        v100 = "seeking";
      }
      int v104 = v103[16];
      BOOL v105 = v102 == 0;
      int v106 = v103[24];
      if (v105) {
        v100 = "not seeking";
      }
      int v107 = v103[10];
      *(_DWORD *)buf = 136317186;
      *(void *)&uint8_t buf[4] = "ActionTreeManager.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 541;
      *(_WORD *)&unsigned char buf[18] = 2048;
      *(void *)&buf[20] = v96;
      *(_WORD *)&buf[28] = 2080;
      *(void *)&buf[30] = v98;
      *(_WORD *)&buf[38] = 2080;
      v112 = v101;
      __int16 v113 = 2080;
      v114 = v100;
      __int16 v115 = 1024;
      int v116 = v104;
      __int16 v117 = 1024;
      int v118 = v106;
      __int16 v119 = 1024;
      int v120 = v107;
      _os_log_impl(&dword_221E5E000, v95, OS_LOG_TYPE_DEFAULT, "%25s:%-5d (sound event: %llu) - created (identifier: %s, run state: %s, seek state: %s, metaparameter count: %d, submix count: %d, generator count: %d)", buf, 0x4Cu);
    }
  }

  return this;
}

void sub_221E69650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, Phase::ActionTreeGatheredParams *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17)
{
  objc_destroyWeak(v18);
  Phase::ActionTreeGatheredParams::~ActionTreeGatheredParams(a10);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(a11 - 120);
  uint64_t v22 = *(void **)(v17 + 80);
  if (v22)
  {
    *(void *)(v17 + 88) = v22;
    operator delete(v22);
  }
  a14 = a11 - 168;
  std::vector<Phase::ActionTreeObject::LeafNodeInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  std::vector<Phase::MetaParamState>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);

  _Unwind_Resume(a1);
}

void *Phase::Fader<double>::SetDefaultValue(uint64_t a1, double a2)
{
  v3[4] = *MEMORY[0x263EF8340];
  *(double *)(a1 + 32) = a2;
  v3[0] = &unk_26D4715B0;
  v3[1] = Phase::CurveFunction::Linear<double>;
  v3[3] = v3;
  Phase::Fader<double>::SetInternal(a1, (uint64_t)v3, a2, 0.0);
  return std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](v3);
}

void sub_221E697F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void Phase::ActionTreeGatheredParams::~ActionTreeGatheredParams(Phase::ActionTreeGatheredParams *this)
{
  uint64_t v2 = (void *)*((void *)this + 7);
  if (v2)
  {
    *((void *)this + 8) = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 4);
  if (v3)
  {
    *((void *)this + 5) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 1);
  if (v4)
  {
    *((void *)this + 2) = v4;
    operator delete(v4);
  }
}

Phase::Controller::StreamRenderer *std::unique_ptr<Phase::Controller::StreamRenderer>::reset[abi:ne180100](Phase::Controller::StreamRenderer **a1, Phase::Controller::StreamRenderer *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    Phase::Controller::StreamRenderer::~StreamRenderer(result);
    JUMPOUT(0x223C938A0);
  }
  return result;
}

void Phase::ActionTreeObject::SetRunState(char *a1, unsigned int a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance((Phase::Logger *)a1);
  if (*((unsigned char *)Instance + 1557))
  {
    uint8x8_t v5 = **(id **)(Phase::Logger::GetInstance(Instance) + 688);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v6 = a1[144];
      if (v6 > 0xA) {
        uint64_t v7 = "<not found>";
      }
      else {
        uint64_t v7 = off_2645F6DD8[v6];
      }
      uint64_t v8 = *(void *)a1;
      if (a2 > 0xA) {
        unint64_t v9 = "<not found>";
      }
      else {
        unint64_t v9 = off_2645F6DD8[a2];
      }
      int v10 = 136316162;
      int8x8_t v11 = "ActionTreeManager.mm";
      __int16 v12 = 1024;
      int v13 = 565;
      __int16 v14 = 2048;
      uint64_t v15 = v8;
      __int16 v16 = 2080;
      uint64_t v17 = v7;
      __int16 v18 = 2080;
      int v19 = v9;
      _os_log_impl(&dword_221E5E000, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d (sound event: %llu) - run state changed from '%s' to '%s'", (uint8_t *)&v10, 0x30u);
    }
  }
  a1[144] = a2;
}

void Phase::ActionTreeObject::SetSeekState(unsigned __int8 *a1, int a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance((Phase::Logger *)a1);
  if (*((unsigned char *)Instance + 1557))
  {
    uint8x8_t v5 = **(id **)(Phase::Logger::GetInstance(Instance) + 688);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)a1;
      int v7 = a1[145];
      uint64_t v8 = "<not found>";
      if (v7 == 1) {
        unint64_t v9 = "seeking";
      }
      else {
        unint64_t v9 = "<not found>";
      }
      __int16 v12 = "ActionTreeManager.mm";
      int v11 = 136316162;
      if (v7) {
        int v10 = v9;
      }
      else {
        int v10 = "not seeking";
      }
      __int16 v13 = 1024;
      int v14 = 576;
      if (a2 == 1) {
        uint64_t v8 = "seeking";
      }
      __int16 v15 = 2048;
      uint64_t v16 = v6;
      __int16 v17 = 2080;
      if (!a2) {
        uint64_t v8 = "not seeking";
      }
      __int16 v18 = v10;
      __int16 v19 = 2080;
      uint64_t v20 = v8;
      _os_log_impl(&dword_221E5E000, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d (sound event: %llu) - seek state changed from '%s' to '%s'", (uint8_t *)&v11, 0x30u);
    }
  }
  a1[145] = a2;
}

BOOL Phase::ActionTreeObject::LeafNodeInfo::Configure(uint64_t a1, void *a2, unsigned char *a3, void *a4, void *a5, _OWORD *a6)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  if (*a2)
  {
    if (*a3) {
      goto LABEL_3;
    }
LABEL_11:
    std::terminate();
  }
  if (a2[1]) {
    BOOL v10 = *a3 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10) {
    goto LABEL_11;
  }
LABEL_3:
  if (*(unsigned char *)a1)
  {
    int v7 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)a1) + 688);
    BOOL result = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
    if (result)
    {
      uint64_t v9 = *(void *)(a1 + 8);
      int v24 = 136315650;
      uint64_t v25 = "ActionTreeManager.mm";
      __int16 v26 = 1024;
      int v27 = 597;
      __int16 v28 = 2048;
      uint64_t v29 = v9;
      _os_log_impl(&dword_221E5E000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d Error: attempting to reconfigure a node without resetting, generatorId %llu!", (uint8_t *)&v24, 0x1Cu);
      return 0;
    }
  }
  else
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
    *(unsigned char *)(a1 + 64) = *a3;
    *(void *)(a1 + 88) = *a4;
    *(unsigned char *)a1 = 1;
    *(void *)(a1 + 112) = *a5;
    *(_OWORD *)(a1 + 120) = *a6;
    uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance((Phase::Logger *)a1);
    if (*((unsigned char *)Instance + 1557))
    {
      __int16 v12 = **(id **)(Phase::Logger::GetInstance(Instance) + 688);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v13 = *(char *)(a1 + 64);
        int v14 = "<not found>";
        __int16 v15 = "<not found>";
        if (v13 <= 6) {
          __int16 v15 = off_2645F6E30[v13];
        }
        uint64_t v16 = *(void *)(a1 + 88);
        __int16 v17 = "looping";
        if (v16 != 1) {
          __int16 v17 = "<not found>";
        }
        if (v16) {
          __int16 v18 = v17;
        }
        else {
          __int16 v18 = "one shot";
        }
        unint64_t v19 = *(char *)(a1 + 24);
        if (v19 <= 8) {
          int v14 = off_2645F6E68[v19];
        }
        uint64_t v20 = *(void *)(a1 + 120);
        uint64_t v21 = *(void *)(a1 + 8);
        unint64_t v22 = *(char *)(a1 + 25);
        if (v22 > 3) {
          int v23 = "<not found>";
        }
        else {
          int v23 = off_2645F6EB0[v22];
        }
        int v24 = 136316930;
        uint64_t v25 = "ActionTreeManager.mm";
        __int16 v26 = 1024;
        int v27 = 614;
        __int16 v28 = 2048;
        uint64_t v29 = v20;
        __int16 v30 = 2048;
        uint64_t v31 = v21;
        __int16 v32 = 2080;
        unint64_t v33 = v15;
        __int16 v34 = 2080;
        uint64_t v35 = v18;
        __int16 v36 = 2080;
        unint64_t v37 = v14;
        __int16 v38 = 2080;
        uint64_t v39 = v23;
        _os_log_impl(&dword_221E5E000, v12, OS_LOG_TYPE_DEFAULT, "%25s:%-5d (sound event: %llu, generator: %llu) - configured (type: %s, playback mode: %s, state: %s, seek state: %s)", (uint8_t *)&v24, 0x4Eu);
      }
    }
    return *(unsigned char *)a1 != 0;
  }
  return result;
}

void Phase::ActionTreeObject::LeafNodeInfo::SetLeafNodeState(uint64_t a1, unsigned int a2)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance((Phase::Logger *)a1);
  if (*((unsigned char *)Instance + 1557))
  {
    uint8x8_t v5 = **(id **)(Phase::Logger::GetInstance(Instance) + 688);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v6 = *(char *)(a1 + 24);
      if (v6 > 8) {
        int v7 = "<not found>";
      }
      else {
        int v7 = off_2645F6E68[v6];
      }
      uint64_t v8 = *(void *)(a1 + 120);
      uint64_t v9 = *(void *)(a1 + 8);
      if (a2 > 8) {
        BOOL v10 = "<not found>";
      }
      else {
        BOOL v10 = off_2645F6E68[a2];
      }
      int v11 = 136316418;
      __int16 v12 = "ActionTreeManager.mm";
      __int16 v13 = 1024;
      int v14 = 1140;
      __int16 v15 = 2048;
      uint64_t v16 = v8;
      __int16 v17 = 2048;
      uint64_t v18 = v9;
      __int16 v19 = 2080;
      uint64_t v20 = v7;
      __int16 v21 = 2080;
      unint64_t v22 = v10;
      _os_log_impl(&dword_221E5E000, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d (sound event: %llu, generator: %llu) - state changed from '%s' to '%s'", (uint8_t *)&v11, 0x3Au);
    }
  }
  *(unsigned char *)(a1 + 24) = a2;
}

void Phase::ActionTreeObject::LeafNodeInfo::SetLeafNodeSeekState(uint64_t a1, unsigned int a2)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance((Phase::Logger *)a1);
  if (*((unsigned char *)Instance + 1557))
  {
    uint8x8_t v5 = **(id **)(Phase::Logger::GetInstance(Instance) + 688);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v6 = *(char *)(a1 + 25);
      if (v6 > 3) {
        int v7 = "<not found>";
      }
      else {
        int v7 = off_2645F6EB0[v6];
      }
      uint64_t v8 = *(void *)(a1 + 120);
      uint64_t v9 = *(void *)(a1 + 8);
      if (a2 > 3) {
        BOOL v10 = "<not found>";
      }
      else {
        BOOL v10 = off_2645F6EB0[a2];
      }
      int v11 = 136316418;
      __int16 v12 = "ActionTreeManager.mm";
      __int16 v13 = 1024;
      int v14 = 1152;
      __int16 v15 = 2048;
      uint64_t v16 = v8;
      __int16 v17 = 2048;
      uint64_t v18 = v9;
      __int16 v19 = 2080;
      uint64_t v20 = v7;
      __int16 v21 = 2080;
      unint64_t v22 = v10;
      _os_log_impl(&dword_221E5E000, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d (sound event: %llu, generator: %llu) - seek state changed from '%s' to '%s'", (uint8_t *)&v11, 0x3Au);
    }
  }
  *(unsigned char *)(a1 + 25) = a2;
}

uint64_t Phase::ActionTreeObject::LeafNodeInfo::GeneratorStreamSeek(Phase::ActionTreeObject::LeafNodeInfo *this, Phase::Controller::TaskManager *a2)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  if (*((void *)this + 4))
  {
    if (!*((unsigned char *)this + 40)) {
      goto LABEL_29;
    }
    unint64_t v3 = Phase::Controller::TaskManager::GetObjCService<PHASEAssetRegistry>(a2, 1);
    uint64_t v4 = [v3 getSoundAssetInfo:*((void *)this + 7)];
    if (!v4)
    {
      uint64_t v20 = **(id **)(Phase::Logger::GetInstance(0) + 688);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        uint64_t v21 = *((void *)this + 1);
        double v22 = *((double *)this + 7);
        *(_DWORD *)buf = 136315906;
        unint64_t v37 = "ActionTreeManager.mm";
        __int16 v38 = 1024;
        int v39 = 1021;
        __int16 v40 = 2048;
        uint64_t v41 = v21;
        __int16 v42 = 2048;
        long double v43 = v22;
        uint64_t v23 = "%25s:%-5d generatorId %llu: Error: did not find asset info with assetId %llu";
        int v24 = v20;
        uint32_t v25 = 38;
LABEL_22:
        _os_log_impl(&dword_221E5E000, v24, OS_LOG_TYPE_ERROR, v23, buf, v25);
      }
LABEL_23:
      uint64_t v19 = 1;
LABEL_24:

      return v19;
    }
    long double v5 = *((double *)this + 6);
    *((unsigned char *)this + 40) = 0;
    *((void *)this + 6) = 0;
    unint64_t v6 = (id *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
    int v7 = v6;
    if (!v6) {
LABEL_29:
    }
      std::terminate();
    long double FileLengthInSeconds = Phase::Controller::StreamedSoundAssetInfo::GetFileLengthInSeconds(v6);
    if (v5 >= FileLengthInSeconds)
    {
      if (!*((void *)this + 11))
      {
        unint64_t v33 = **(id **)(Phase::Logger::GetInstance(v8) + 688);
        if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v34 = *((void *)this + 1);
          *(_DWORD *)buf = 136316162;
          unint64_t v37 = "ActionTreeManager.mm";
          __int16 v38 = 1024;
          int v39 = 1042;
          __int16 v40 = 2048;
          uint64_t v41 = v34;
          __int16 v42 = 2048;
          long double v43 = v5;
          __int16 v44 = 2048;
          long double v45 = FileLengthInSeconds;
          _os_log_impl(&dword_221E5E000, v33, OS_LOG_TYPE_DEFAULT, "%25s:%-5d generatorId %llu: seek to time %.2fs, past end of stream (%.2fs) of one-shot", buf, 0x30u);
        }
        uint64_t v19 = 2;
        goto LABEL_24;
      }
      long double v5 = fmod(v5, FileLengthInSeconds);
    }
    double v10 = Phase::Controller::StreamedSoundAssetInfo::GetFileLengthInSeconds(v7);
    uint64_t v11 = [v7[6] length];
    Phase::Controller::StreamRenderer::Reset(*((void *)this + 4));
    uint64_t v12 = (uint64_t)(v5 / v10 * (double)v11);
    uint64_t v13 = *((void *)this + 4);
    id v14 = v7[6];
    if (*((void *)this + 11) == 1)
    {
      BOOL v15 = Phase::Controller::StreamedSoundAssetInfo::ScheduleSegment((uint64_t)v7, v13, 0, v12, [v14 length] - v12, 0, 0);
      if (!v15) {
        goto LABEL_20;
      }
      BOOL v15 = Phase::Controller::StreamedSoundAssetInfo::ScheduleFile((uint64_t)v7, *((void *)this + 4), 0, 1, 0, 0);
    }
    else
    {
      int v26 = [v14 length];
      v35[0] = MEMORY[0x263EF8330];
      v35[1] = 3321888768;
      v35[2] = ___ZN5Phase16ActionTreeObject12LeafNodeInfo19GeneratorStreamSeekERNS_10Controller11TaskManagerE_block_invoke;
      v35[3] = &__block_descriptor_40_ea8_32c102_ZTSKZN5Phase16ActionTreeObject12LeafNodeInfo19GeneratorStreamSeekERNS_10Controller11TaskManagerEE3__0_e8_v16__0q8l;
      v35[4] = this;
      BOOL v15 = Phase::Controller::StreamedSoundAssetInfo::ScheduleSegment((uint64_t)v7, v13, 0, v12, (v26 - v12), 0, v35);
    }
    if (v15)
    {
      int v27 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)v15) + 688);
      uint64_t v19 = 0;
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v28 = *((void *)this + 1);
        int v29 = *((char *)this + 24);
        *(_DWORD *)buf = 136316162;
        unint64_t v37 = "ActionTreeManager.mm";
        __int16 v38 = 1024;
        int v39 = 1089;
        __int16 v40 = 2048;
        uint64_t v41 = v28;
        __int16 v42 = 2048;
        long double v43 = v5;
        __int16 v44 = 1024;
        LODWORD(v45) = v29;
        _os_log_impl(&dword_221E5E000, v27, OS_LOG_TYPE_DEFAULT, "%25s:%-5d generatorId %llu: completed seek to time %.2fs, node state %hhd", buf, 0x2Cu);
        uint64_t v19 = 0;
      }
      goto LABEL_24;
    }
LABEL_20:
    __int16 v30 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)v15) + 688);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      uint64_t v31 = *((void *)this + 7);
      *(_DWORD *)buf = 136315650;
      unint64_t v37 = "ActionTreeManager.mm";
      __int16 v38 = 1024;
      int v39 = 1084;
      __int16 v40 = 2048;
      uint64_t v41 = v31;
      uint64_t v23 = "%25s:%-5d Failed to schedule segment/file for assetId %llu";
      int v24 = v30;
      uint32_t v25 = 28;
      goto LABEL_22;
    }
    goto LABEL_23;
  }
  uint64_t v16 = **(id **)(Phase::Logger::GetInstance(this) + 688);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    uint64_t v17 = *((void *)this + 1);
    int v18 = *((char *)this + 64);
    *(_DWORD *)buf = 136315906;
    unint64_t v37 = "ActionTreeManager.mm";
    __int16 v38 = 1024;
    int v39 = 1008;
    __int16 v40 = 2048;
    uint64_t v41 = v17;
    __int16 v42 = 1024;
    LODWORD(v43) = v18;
    _os_log_impl(&dword_221E5E000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d generatorId %llu: Error: cannot seek a non-streaming node type %hhd", buf, 0x22u);
  }
  return 1;
}

void sub_221E6A500(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN5Phase16ActionTreeObject12LeafNodeInfo19GeneratorStreamSeekERNS_10Controller11TaskManagerE_block_invoke(uint64_t a1)
{
}

uint64_t __copy_helper_block_ea8_32c102_ZTSKZN5Phase16ActionTreeObject12LeafNodeInfo19GeneratorStreamSeekERNS_10Controller11TaskManagerEE3__0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = *(void *)(a2 + 32);
  return result;
}

void Phase::ActionTreeObject::LeafNodeInfo::HandleStreamRendererFinishedCallback(Phase::ActionTreeObject::LeafNodeInfo *this)
{
  if (*((void *)this + 4) && *((unsigned char *)this + 25) != 1)
  {
    int v1 = *((unsigned __int8 *)this + 24);
    if (*((unsigned char *)this + 24)) {
      BOOL v2 = v1 == 6;
    }
    else {
      BOOL v2 = 1;
    }
    if (!v2)
    {
      if (v1 == 2) {
        *((unsigned char *)this + 41) = 1;
      }
      else {
        Phase::ActionTreeObject::LeafNodeInfo::SetLeafNodeState((uint64_t)this, 5u);
      }
    }
  }
}

void Phase::ActionTreeManager::ActionTreeManager(Phase::Logger *a1)
{
}

void sub_221E6A690(_Unwind_Exception *a1)
{
  caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::~guarded_lookup_hash_table(v3);
  std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::~__hash_table(v2);
  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::~Commandable(v1);
  _Unwind_Resume(a1);
}

void Phase::Commandable<128,Phase::LockFreeQueueMPSC>::Commandable(void *a1)
{
  *a1 = &unk_26D4714F8;
  operator new[]();
}

void sub_221E6A81C(_Unwind_Exception *a1)
{
  MEMORY[0x223C938A0](v1, 0x1070C405653F1FALL);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::TaskManager::GetService<Phase::Controller::GroupManager>(Phase::Logger *a1, int a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v3 = *((void *)a1 + 6);
  if (a2 >= (unint64_t)((*((void *)a1 + 7) - v3) >> 5))
  {
    int v7 = **(id **)(Phase::Logger::GetInstance(a1) + 448);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      id v14 = "TaskManager.hpp";
      __int16 v15 = 1024;
      int v16 = 112;
      _os_log_impl(&dword_221E5E000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: pId < mServiceRegistry.size() is false.", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](exception, "PRECONDITION: pId < mServiceRegistry.size() is false.");
  }
  uint64_t v4 = (Phase::Logger *)(v3 + 32 * a2);
  if (!*(void *)v4)
  {
    uint64_t v9 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v4)
                                                                                       + 448)));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      Phase::GetBacktraceFrame<1ul>(&__p);
      double v10 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315906;
      id v14 = "TaskManager.hpp";
      __int16 v15 = 1024;
      int v16 = 121;
      __int16 v17 = 1024;
      int v18 = a2;
      __int16 v19 = 2080;
      uint64_t v20 = v10;
      _os_log_impl(&dword_221E5E000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::domain_error) [not lService.has_value() is true]: \"No service registered for Id %i, in call \\n%s\"", buf, 0x22u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }

    uint64_t v11 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](v11, "No service registered for Id %i, in call \n%s");
  }
  long double v5 = std::any_cast[abi:ne180100]<Phase::Controller::GroupManager * const>((uint64_t (**)(uint64_t, void, void, void, void *))v4);
  if (!v5) {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  return (uint64_t)*v5;
}

void sub_221E6AA6C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_221E6AB7C(_Unwind_Exception *a1)
{
}

void sub_221E6AB9C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void *Phase::Commandable<128,Phase::LockFreeQueueMPSC>::~Commandable(void *a1)
{
  *a1 = &unk_26D4714F8;
  uint64_t v2 = a1[1];
  if (v2)
  {
    uint64_t v5 = *(void *)(v2 - 8);
    uint64_t v4 = v2 - 8;
    uint64_t v3 = v5;
    if (v5)
    {
      uint64_t v6 = 8 * v3;
      do
      {
        std::unique_ptr<Phase::CommandQueue<Phase::LockFreeQueueMPSC>>::reset[abi:ne180100]((uint64_t *)(v4 + v6), 0);
        v6 -= 8;
      }
      while (v6);
    }
    MEMORY[0x223C93870](v4 - 8, 0x20C8093837F09);
  }
  return a1;
}

uint64_t Phase::Controller::TaskManager::GetService<Phase::GlobalMetaParameterManager>(Phase::Logger *a1, int a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v3 = *((void *)a1 + 6);
  if (a2 >= (unint64_t)((*((void *)a1 + 7) - v3) >> 5))
  {
    int v7 = **(id **)(Phase::Logger::GetInstance(a1) + 448);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      id v14 = "TaskManager.hpp";
      __int16 v15 = 1024;
      int v16 = 112;
      _os_log_impl(&dword_221E5E000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: pId < mServiceRegistry.size() is false.", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](exception, "PRECONDITION: pId < mServiceRegistry.size() is false.");
  }
  uint64_t v4 = (Phase::Logger *)(v3 + 32 * a2);
  if (!*(void *)v4)
  {
    uint64_t v9 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v4)
                                                                                       + 448)));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      Phase::GetBacktraceFrame<1ul>(&__p);
      double v10 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315906;
      id v14 = "TaskManager.hpp";
      __int16 v15 = 1024;
      int v16 = 121;
      __int16 v17 = 1024;
      int v18 = a2;
      __int16 v19 = 2080;
      uint64_t v20 = v10;
      _os_log_impl(&dword_221E5E000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::domain_error) [not lService.has_value() is true]: \"No service registered for Id %i, in call \\n%s\"", buf, 0x22u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }

    uint64_t v11 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](v11, "No service registered for Id %i, in call \n%s");
  }
  uint64_t v5 = std::any_cast[abi:ne180100]<Phase::GlobalMetaParameterManager * const>((uint64_t (**)(uint64_t, void, void, void, void *))v4);
  if (!v5) {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  return (uint64_t)*v5;
}

void sub_221E6AE70(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_221E6AF80(_Unwind_Exception *a1)
{
}

void sub_221E6AFA0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t Phase::ActionTreeManager::GetParamValue(uint64_t a1, unint64_t a2, MetaParamValue *a3, _DWORD *a4, void *a5)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  uint64_t GlobalMetaParameterState = (uint64_t)Phase::Fader<double>::Fader((Phase::Logger *)&v35.mFader, 0.0);
  if (!a5) {
    goto LABEL_7;
  }
  uint64_t v11 = a5[3];
  uint64_t v12 = a5[4];
  uint64_t v13 = *(unsigned int *)(v11 + 64);
  if (v13 != (a5[5] - v12) >> 6) {
    goto LABEL_8;
  }
  if (!v13)
  {
LABEL_7:
    __int16 v15 = (Phase::GlobalMetaParameterManager *)Phase::Controller::TaskManager::GetService<Phase::GlobalMetaParameterManager>(*(Phase::Logger **)(a1 + 224), 6);
    uint64_t GlobalMetaParameterState = Phase::GlobalMetaParameterManager::GetGlobalMetaParameterState(v15, a2, &v35);
    if (GlobalMetaParameterState) {
      goto LABEL_19;
    }
LABEL_8:
    int v16 = Phase::Controller::TaskManager::GetObjCService<PHASEAssetRegistry>(*(Phase::Logger **)(a1 + 224), 1);
    __int16 v17 = (Phase::Logger *)[v16 getString:a2];
    if (v17) {
      int v18 = (const char *)v17;
    }
    else {
      int v18 = "<unknown>";
    }
    __int16 v19 = **(id **)(Phase::Logger::GetInstance(v17) + 688);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "ActionTreeManager.mm";
      __int16 v37 = 1024;
      int v38 = 1206;
      __int16 v39 = 2080;
      __int16 v40 = v18;
      _os_log_impl(&dword_221E5E000, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d Error gathering param %s\n", buf, 0x1Cu);
    }

    goto LABEL_14;
  }
  id v14 = *(void **)(v11 + 72);
  while (*v14 != a2)
  {
    v14 += 58;
    v12 += 64;
    if (!--v13) {
      goto LABEL_7;
    }
  }
  v35.param = *(MetaParameter **)v12;
  if ((MetaParamState *)v12 != &v35) {
    uint64_t GlobalMetaParameterState = std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__assign_with_size[abi:ne180100]<Phase::Envelope<double>::SegmentInternal*,Phase::Envelope<double>::SegmentInternal*>((uint64_t)&v35.mFader, *(void **)(v12 + 8), *(void **)(v12 + 16), (uint64_t)(*(void *)(v12 + 16) - *(void *)(v12 + 8)) >> 6);
  }
  long long v22 = *(_OWORD *)(v12 + 32);
  v35.mFader.mValue = *(double *)(v12 + 48);
  *(_OWORD *)&v35.mFader.mOffset = v22;
  v35.currentInputValue.stringVal = *(void *)(v12 + 56);
LABEL_19:
  param = v35.param;
  if (!v35.param)
  {
    uint64_t v31 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance((Phase::Logger *)GlobalMetaParameterState)
                                                     + 688));
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "ActionTreeManager.mm";
      __int16 v37 = 1024;
      int v38 = 1276;
      __int16 v39 = 2080;
      __int16 v40 = "todo";
LABEL_35:
      _os_log_impl(&dword_221E5E000, v31, OS_LOG_TYPE_ERROR, "%25s:%-5d Error gathering param %s\n", buf, 0x1Cu);
    }
LABEL_14:
    uint64_t v20 = 0;
    goto LABEL_15;
  }
  uint64_t v24 = *((void *)v35.param + 3);
  if (!v24)
  {
    *(MetaParamValue *)&a3->fltVal = v35.currentInputValue;
    int v32 = *((_DWORD *)param + 3);
    if ((v32 - 1) <= 1) {
      goto LABEL_44;
    }
    goto LABEL_14;
  }
  ParamValue = (Phase::Logger *)Phase::ActionTreeManager::GetParamValue(a1, v24, &v34, v33, a5);
  if ((ParamValue & 1) == 0) {
    goto LABEL_14;
  }
  int v26 = *((_DWORD *)param + 2);
  if (v26 == 2)
  {
    a3->fltVal = Phase::EvaluateEnvelopeDef((uint64_t)param + 56, v34);
    goto LABEL_43;
  }
  if (v26 != 3)
  {
    uint64_t v31 = **(id **)(Phase::Logger::GetInstance(ParamValue) + 688);
    if (!os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
      goto LABEL_14;
    }
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "ActionTreeManager.mm";
    __int16 v37 = 1024;
    int v38 = 1246;
    __int16 v39 = 2080;
    __int16 v40 = "todo";
    goto LABEL_35;
  }
  uint64_t v27 = *((unsigned int *)param + 14);
  if (!v27)
  {
LABEL_32:
    unint64_t v30 = *((void *)param + 6);
    goto LABEL_42;
  }
  int v28 = *((_DWORD *)param + 3);
  int v29 = (char *)param + 64;
  while (v28 == 1)
  {
    if (*(double *)v29 == v34) {
      goto LABEL_41;
    }
LABEL_31:
    v29 += 16;
    if (!--v27) {
      goto LABEL_32;
    }
  }
  if (v28 != 2 || *(void *)v29 != *(void *)&v34) {
    goto LABEL_31;
  }
LABEL_41:
  unint64_t v30 = *((void *)v29 + 1);
LABEL_42:
  a3->stringVal = v30;
LABEL_43:
  int v32 = *((_DWORD *)param + 4);
LABEL_44:
  *a4 = v32;
  uint64_t v20 = 1;
LABEL_15:
  *(void *)buf = &v35.mFader;
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  return v20;
}

void sub_221E6B374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

double Phase::EvaluateEnvelopeDef(uint64_t a1, double a2)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  float64x2_t v3 = *(float64x2_t *)a1;
  unint64_t v4 = *(unsigned int *)(a1 + 16);
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  long long v22 = 0;
  uint32_t v25 = &v22;
  char v26 = 0;
  if (v4)
  {
    float64x2_t v20 = v3;
    uint64_t v6 = (double *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Envelope<double>::Segment>>((uint64_t)&v24, v4);
    int v7 = v6;
    uint64_t v8 = 0;
    long long v22 = v6;
    uint64_t v24 = &v6[6 * v9];
    do
    {
      double v10 = &v6[v8];
      *(_OWORD *)double v10 = 0uLL;
      *(_OWORD *)&v6[v8 + 2] = 0uLL;
      uint64_t v11 = &v6[v8 + 2];
      v10[4] = 0.0;
      *((void *)v10 + 5) = v11;
      *(void *)uint64_t v11 = &unk_26D471430;
      v8 += 6;
    }
    while (v10 + 6 != &v6[6 * v4]);
    uint64_t v12 = 0;
    uint64_t v13 = a1 + 24;
    uint64_t v23 = (long long *)&v6[6 * v4];
    unsigned int v14 = 1;
    do
    {
      uint64_t v15 = v13 + 24 * v12;
      *(float64x2_t *)&v7[6 * v12] = vcvtq_f64_f32(vcvt_f32_f64(*(float64x2_t *)v15));
      Phase::Controller::GetCurveFunctionFromCurveType<double>(*(Phase::Logger **)(v15 + 16), &v25);
      std::__function::__value_func<double ()(double)>::operator=[abi:ne180100](&v7[6 * v12 + 2], (uint64_t)&v25);
      std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&v25);
      uint64_t v12 = v14;
      int v7 = v22;
      int v16 = v23;
    }
    while (0xAAAAAAAAAAAAAAABLL * (((char *)v23 - (char *)v22) >> 4) > v14++);
    float64x2_t v3 = v20;
  }
  else
  {
    int v16 = 0;
    int v7 = 0;
  }
  float64x2_t v21 = vcvtq_f64_f32(vcvt_f32_f64(v3));
  Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>((Phase::Logger *)&v25, (uint64_t)&v21, v7, v16);
  double v18 = Phase::Envelope<double>::operator()((double **)&v25, a2);
  *(void *)&v21.f64[0] = &v25;
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
  uint32_t v25 = &v22;
  std::vector<Phase::Envelope<double>::Segment,std::allocator<Phase::Envelope<double>::Segment>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  return v18;
}

void sub_221E6B5A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  std::vector<Phase::Envelope<double>::Segment,std::allocator<Phase::Envelope<double>::Segment>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

Phase::Logger **Phase::ActionTreeManager::UpdateGeoQueries(Phase::Logger **result, UniqueObjectId *a2)
{
  unint64_t v2 = a2[1].mStorage[1];
  if (*(_DWORD *)(v2 + 24))
  {
    unint64_t v4 = result;
    unint64_t v5 = 0;
    do
    {
      if (*(_DWORD *)(v2 + 96))
      {
        uint64_t v6 = 0;
        uint64_t v7 = 0;
        unint64_t v8 = 0;
        uint64_t v9 = *(void *)(*(void *)(v2 + 32) + 8 * v5);
        do
        {
          unint64_t v10 = a2[5].mStorage[0];
          if (*(void *)(*(void *)(v2 + 104) + v6) == v9 && !*(unsigned char *)(v10 + v7 + 80))
          {
            uint64_t v11 = (Phase::Geometry::System *)Phase::Controller::TaskManager::GetService<Phase::Geometry::System>(v4[28], 2);
            if (!v11) {
              std::terminate();
            }
            Phase::Geometry::System::GetCurrentState(v11, &v13);
            double v12 = Phase::DistanceBetweenListenerAndSource<double>(v13, *(void *)(a2[5].mStorage[0] + v7 + 32), *(void *)(a2[5].mStorage[0] + v7 + 24));
            if (v14) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v14);
            }
            BOOL result = (Phase::Logger **)Phase::ActionTreeManager::ReceiveGeoQueryResult((Phase::ActionTreeManager *)v4, *a2, v12, v8, 0);
            unint64_t v2 = a2[1].mStorage[1];
          }
          else
          {
            *(unsigned char *)(v10 + v7 + 80) = 0;
          }
          ++v8;
          v7 += 96;
          v6 += 5944;
        }
        while (v8 < *(unsigned int *)(v2 + 96));
      }
      ++v5;
    }
    while (v5 < *(unsigned int *)(v2 + 24));
  }
  return result;
}

void sub_221E6B71C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Controller::TaskManager::GetService<Phase::Geometry::System>(Phase::Logger *a1, int a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v3 = *((void *)a1 + 6);
  if (a2 >= (unint64_t)((*((void *)a1 + 7) - v3) >> 5))
  {
    uint64_t v7 = **(id **)(Phase::Logger::GetInstance(a1) + 448);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      unsigned int v14 = "TaskManager.hpp";
      __int16 v15 = 1024;
      int v16 = 112;
      _os_log_impl(&dword_221E5E000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: pId < mServiceRegistry.size() is false.", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](exception, "PRECONDITION: pId < mServiceRegistry.size() is false.");
  }
  unint64_t v4 = (Phase::Logger *)(v3 + 32 * a2);
  if (!*(void *)v4)
  {
    uint64_t v9 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v4)
                                                                                       + 448)));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      Phase::GetBacktraceFrame<1ul>(&__p);
      unint64_t v10 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315906;
      unsigned int v14 = "TaskManager.hpp";
      __int16 v15 = 1024;
      int v16 = 121;
      __int16 v17 = 1024;
      int v18 = a2;
      __int16 v19 = 2080;
      float64x2_t v20 = v10;
      _os_log_impl(&dword_221E5E000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::domain_error) [not lService.has_value() is true]: \"No service registered for Id %i, in call \\n%s\"", buf, 0x22u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }

    uint64_t v11 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](v11, "No service registered for Id %i, in call \n%s");
  }
  unint64_t v5 = std::any_cast[abi:ne180100]<Phase::Geometry::System * const>((uint64_t (**)(uint64_t, void, void, void, void *))v4);
  if (!v5) {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  return (uint64_t)*v5;
}

void sub_221E6B960(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_221E6BA70(_Unwind_Exception *a1)
{
}

void sub_221E6BA90(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void *Phase::ActionTreeManager::ReceiveGeoQueryResult(Phase::ActionTreeManager *this, UniqueObjectId a2, double a3, unsigned int a4, int a5)
{
  UniqueObjectId v15 = a2;
  BOOL result = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>((void *)this + 5, &v15);
  if (result)
  {
    uint64_t v9 = result[4];
    if (v9)
    {
      uint64_t v11 = v9 + 80;
      uint64_t v10 = *(void *)(v9 + 80);
      if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v11 + 8) - v10) >> 5) > a4)
      {
        uint64_t v12 = v10 + 96 * a4;
        uint64_t v13 = (unsigned char *)(v12 + 80);
        unsigned int v14 = (double *)(v12 + 88);
        if (a3 < 0.0 || a5)
        {
          unsigned char *v13 = 3;
          *unsigned int v14 = 0.0;
        }
        else
        {
          unsigned char *v13 = 2;
          *unsigned int v14 = a3;
        }
      }
    }
  }
  return result;
}

double Phase::DistanceBetweenListenerAndSource<double>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  if (a1)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 136);
    double v4 = -1.0;
    if (v3 <= a2) {
      return v4;
    }
    uint64_t v5 = *(void *)(a1 + 120);
    if (*(_DWORD *)(v5 + 24 * a2 + 20) != HIDWORD(a2)) {
      return v4;
    }
    uint64_t v6 = *(void *)(v5 + 24 * a2);
    if (!v6) {
      return v4;
    }
    if (*(_DWORD *)v6 != 2 || v3 <= a3) {
      return v4;
    }
    if (*(_DWORD *)(v5 + 24 * a3 + 20) != HIDWORD(a3)) {
      return v4;
    }
    uint64_t v9 = *(float32x2_t **)(v5 + 24 * a3);
    if (!v9 || v9->i32[0] != 3) {
      return v4;
    }
    uint64_t v10 = (void *)v9[15];
    uint64_t v11 = (void *)v9[16];
    if (v10 == v11)
    {
      uint64_t v13 = 0;
    }
    else if (*(_DWORD *)(a1 + 112) <= *v10 {
           || (uint64_t v12 = *(void *)(a1 + 96), *(_DWORD *)(v12 + 24 * *v10 + 20) != HIDWORD(*v10))
    }
           || (uint64_t v13 = *(void *)(v12 + 24 * *v10)) == 0)
    {
      unsigned int v14 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)a1) + 384);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "GeometryUtility.hpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 75;
        *(_WORD *)&unsigned char buf[18] = 2048;
        *(void *)&buf[20] = a3;
        UniqueObjectId v15 = "%25s:%-5d DistanceBetweenListenerAndSource(): inSourceEntityHandle 0x%llx is volumetric but doesn't have a"
              "ny valid shapes!\n";
        int v16 = v14;
        uint32_t v17 = 28;
LABEL_21:
        _os_log_impl(&dword_221E5E000, v16, OS_LOG_TYPE_ERROR, v15, buf, v17);
        return v4;
      }
      return v4;
    }
    float64x2_t v20 = vcvtq_f64_f32(v9[7]);
    *(float64x2_t *)buf = vcvtq_f64_f32(v9[6]);
    *(float64x2_t *)&buf[16] = v20;
    float64x2_t v21 = vcvtq_f64_f32(v9[9]);
    float64x2_t v30 = vcvtq_f64_f32(v9[8]);
    float64x2_t v31 = v21;
    float64x2_t v25 = vcvtq_f64_f32(*(float32x2_t *)(v6 + 64));
    double v26 = *(float *)(v6 + 72);
    Phase::TransformPositionByInverse<double>((uint64_t)buf, &v25, v27.f64);
    float64x2_t v22 = v27;
    double v23 = v28;
    if (v10 != v11)
    {
      double v23 = fmin(fmax(v28, *(float *)(v13 + 32)), *(float *)(v13 + 44)) - v28;
      float64x2_t v22 = vsubq_f64(vminnmq_f64(vmaxnmq_f64(v27, vcvtq_f64_f32(*(float32x2_t *)(v13 + 24))), vcvtq_f64_f32(*(float32x2_t *)(v13 + 36))), v27);
    }
    float64x2_t v24 = vmulq_f64(v22, v22);
    return fmax(sqrt(vaddq_f64(v24, (float64x2_t)vdupq_laneq_s64((int64x2_t)v24, 1)).f64[0] + v23 * v23)- *(double *)(v6 + 152) / v31.f64[1], 0.0);
  }
  int v18 = **(id **)(Phase::Logger::GetInstance(0) + 384);
  double v4 = -1.0;
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = "GeometryUtility.hpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 41;
    UniqueObjectId v15 = "%25s:%-5d DistanceBetweenListenerAndSource(): pInSystemState is null!\n";
    int v16 = v18;
    uint32_t v17 = 18;
    goto LABEL_21;
  }
  return v4;
}

uint64_t Phase::ActionTreeManager::WriteLeafNodeUpdateParameters(Phase::Logger **a1, Phase::ActionTreeObject *a2, int a3, uint64_t a4, Phase::ActionTreeGatheredParams *a5, void *a6, double a7)
{
  uint64_t v13 = *((void *)a2 + 7);
  uint64_t v14 = v13 + 136 * a3;
  unint64_t v16 = *(void *)(v14 + 72);
  UniqueObjectId v15 = (void *)(v14 + 72);
  double v28 = Phase::Controller::GroupManager::GetGain(a1[29], v16) * a7;
  uint32_t v17 = a1[29];
  *(void *)&long long __src = *v15;
  int v18 = (double *)std::__hash_table<std::__hash_value_type<unsigned long long,int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,int>>>::find<unsigned long long>((void *)v17 + 5, (unint64_t *)&__src);
  double v19 = 1.0;
  double v20 = 1.0;
  if (v18) {
    double v20 = v18[28] * v18[55];
  }
  double v27 = v20 * *(double *)(a4 + 24);
  float64x2_t v21 = a1[29];
  *(void *)&long long __src = *v15;
  float64x2_t v22 = (double *)std::__hash_table<std::__hash_value_type<unsigned long long,int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,int>>>::find<unsigned long long>((void *)v21 + 5, (unint64_t *)&__src);
  if (v22) {
    double v19 = v22[16] * v22[49] * v22[31];
  }
  double v23 = a1[29];
  *(void *)&long long __src = *v15;
  float64x2_t v24 = (double *)std::__hash_table<std::__hash_value_type<unsigned long long,int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,int>>>::find<unsigned long long>((void *)v23 + 5, (unint64_t *)&__src);
  if (v24) {
    double v25 = v24[22] * v24[43] * v24[30];
  }
  else {
    double v25 = 1.0;
  }
  uint64_t result = Phase::ActionTreeManager::ScaleFloatParam(a1, *(char *)(a4 + 41), &v27, a5, a2);
  if (result)
  {
    uint64_t result = Phase::ActionTreeManager::ScaleFloatParam(a1, *(char *)(a4 + 40), &v28, a5, a2);
    if (result)
    {
      long long __src = *(_OWORD *)(v13 + 136 * a3 + 8);
      double v30 = v28;
      double v31 = v25;
      double v32 = v19;
      double v33 = v27;
      Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a6, 0xAu, &__src, 0x30uLL);
      return 1;
    }
  }
  return result;
}

uint64_t Phase::ActionTreeManager::ScaleFloatParam(Phase::Logger **this, int a2, double *a3, Phase::ActionTreeGatheredParams *a4, Phase::ActionTreeObject *a5)
{
  if (a2 == -1) {
    return 1;
  }
  if (a2 < 0 || (uint64_t v6 = *((void *)a4 + 1), a2 >= (unint64_t)((*((void *)a4 + 2) - v6) >> 3)))
  {
    int v8 = 0;
  }
  else
  {
    if (*(_DWORD *)(*((void *)a4 + 4) + 4 * a2) == 1)
    {
      *a3 = *(double *)(v6 + 8 * a2) * *a3;
      return 1;
    }
    int v8 = 1;
  }
  Phase::ActionTreeManager::HandleParamError(this[28], v8, (uint64_t)a5, a2);
  return 0;
}

BOOL Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(void *a1, unsigned int a2, void *__src, size_t __n)
{
  unsigned int v4 = __n;
  uint64_t v32 = *MEMORY[0x263EF8340];
  size_t v8 = __n;
  uint64_t v9 = __n + 8;
  uint64_t v11 = *a1;
  uint64_t v10 = a1[1];
  unint64_t v12 = v10 + v9;
  if (*a1 && v12 <= a1[2]) {
    goto LABEL_8;
  }
  if (a1[7])
  {
    memset(v27, 0, 32);
    uint64_t v13 = (Phase::Logger *)std::function<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::operator()((uint64_t)(a1 + 4), (uint64_t)a1, (uint64_t)v27, v12);
    long long v14 = *(_OWORD *)&v27[16];
    *(_OWORD *)a1 = *(_OWORD *)v27;
    *((_OWORD *)a1 + 1) = v14;
    uint64_t v11 = *a1;
    uint64_t v10 = a1[1];
    unint64_t v15 = v10 + v9;
    if (!*a1 || v15 > a1[2])
    {
      unint64_t v16 = **(id **)(Phase::Logger::GetInstance(v13) + 848);
      BOOL result = os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      uint64_t v18 = *a1;
      uint64_t v19 = a1[2];
      *(_DWORD *)double v27 = 136316418;
      *(void *)&v27[4] = "MessagePipe.hpp";
      *(_WORD *)&v27[12] = 1024;
      *(_DWORD *)&v27[14] = 284;
      *(_WORD *)&v27[18] = 2048;
      *(void *)&v27[20] = v18;
      *(_WORD *)&v27[28] = 2048;
      *(void *)&v27[30] = v19;
      __int16 v28 = 2048;
      unint64_t v29 = v15;
      __int16 v30 = 2048;
      uint64_t v31 = a2;
      double v20 = "%25s:%-5d write buffer left in invalid state with pointer %p and %lu max bytes compared to required %lu byte"
            "s for message type %llu";
      float64x2_t v21 = v16;
      uint32_t v22 = 58;
      goto LABEL_11;
    }
LABEL_8:
    double v23 = (unsigned int *)(v11 + v10);
    unsigned int *v23 = a2;
    v23[1] = v4;
    uint64_t v24 = *a1;
    uint64_t v25 = a1[1] + 8;
    a1[1] = v25;
    memcpy((void *)(v24 + v25), __src, v8);
    a1[1] += v8;
    return 1;
  }
  double v26 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)a1) + 848);
  BOOL result = os_log_type_enabled(v26, OS_LOG_TYPE_ERROR);
  if (!result) {
    return result;
  }
  *(_DWORD *)double v27 = 136315906;
  *(void *)&v27[4] = "MessagePipe.hpp";
  *(_WORD *)&v27[12] = 1024;
  *(_DWORD *)&v27[14] = 270;
  *(_WORD *)&v27[18] = 2048;
  *(void *)&v27[20] = a2;
  *(_WORD *)&v27[28] = 2048;
  *(void *)&v27[30] = v12;
  double v20 = "%25s:%-5d failed to acquire write buffer for message type %llu of size %lu";
  float64x2_t v21 = v26;
  uint32_t v22 = 38;
LABEL_11:
  _os_log_impl(&dword_221E5E000, v21, OS_LOG_TYPE_ERROR, v20, v27, v22);
  return 0;
}

uint64_t Phase::ActionTreeObject::FindSubmixIdFromHashName(Phase::ActionTreeObject *this, uint64_t a2)
{
  uint64_t v2 = *((void *)this + 3);
  uint64_t v3 = *(unsigned int *)(v2 + 96);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = 0;
  uint64_t v5 = *(void **)(v2 + 104);
  uint64_t v6 = 96 * v3;
  while (*v5 != a2)
  {
    v5 += 743;
    v4 += 96;
    if (v6 == v4) {
      return 0;
    }
  }
  return *(void *)(*((void *)this + 10) + v4 + 8);
}

void Phase::ActionTreeManager::SubmitGeneratorSeekCompletedResult(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4 = *(void **)(a1 + 56);
  if (v4)
  {
    unsigned int v8 = (char)(0x20302u >> (8 * a4));
    do
    {
      uint64_t v9 = v4[4];
      if (*(unsigned char *)(v9 + 144))
      {
        uint64_t v11 = *(void *)(v9 + 56);
        uint64_t v10 = *(void *)(v9 + 64);
        if (v10 != v11)
        {
          uint64_t v12 = 0;
          unsigned int v13 = 1;
          do
          {
            uint64_t v14 = v11 + 136 * v12;
            if (*(void *)(v14 + 8) == a2)
            {
              BOOL v15 = *(void *)(v14 + 16) != a3 || a4 > 2;
              if (!v15)
              {
                Phase::ActionTreeObject::LeafNodeInfo::SetLeafNodeSeekState(v14, v8);
                uint64_t v11 = *(void *)(v9 + 56);
                uint64_t v10 = *(void *)(v9 + 64);
              }
            }
            uint64_t v12 = v13;
            BOOL v15 = 0xF0F0F0F0F0F0F0F1 * ((v10 - v11) >> 3) > v13++;
          }
          while (v15);
        }
      }
      uint64_t v4 = (void *)*v4;
    }
    while (v4);
  }
}

void ___ZN5Phase17ActionTreeManager18ProcessSamplerNodeEPKNS_10SamplerMsgEPNS_10ParamStackEiPNS_16ActionTreeObjectERNS_24ActionTreeGatheredParamsERNS_17MessagePipeWriterINS_23ActionTreeServerCommandEEE_block_invoke(uint64_t a1)
{
}

uint64_t __copy_helper_block_ea8_32c203_ZTSKZN5Phase17ActionTreeManager18ProcessSamplerNodeEPKNS_10SamplerMsgEPNS_10ParamStackEiPNS_16ActionTreeObjectERNS_24ActionTreeGatheredParamsERNS_17MessagePipeWriterINS_23ActionTreeServerCommandEEEE3__0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = *(void *)(a2 + 32);
  return result;
}

uint64_t Phase::ActionTreeManager::StartPreparedVoice(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  long long v11 = *(_OWORD *)(a2 + 8);
  Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a3, 0xBu, &v11, 0x10uLL);
  Phase::ActionTreeObject::LeafNodeInfo::SetLeafNodeState(a2, 4u);
  uint64_t v5 = *(Phase::Controller::StreamRenderer **)(a2 + 32);
  if (!v5) {
    return 1;
  }
  uint64_t v6 = (Phase::Logger *)Phase::Controller::StreamRenderer::Start(v5);
  if (v6) {
    return 1;
  }
  unsigned int v8 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v6)
                                                                                     + 688)));
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    id v9 = [*(id *)(a1 + 16) identifier];
    uint64_t v10 = [v9 UTF8String];
    *(_DWORD *)buf = 136315650;
    unsigned int v13 = "ActionTreeManager.mm";
    __int16 v14 = 1024;
    int v15 = 4017;
    __int16 v16 = 2080;
    uint64_t v17 = v10;
    _os_log_impl(&dword_221E5E000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to start stream renderer for sound event node %s", buf, 0x1Cu);
  }
  return 0;
}

void sub_221E6C544(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id Phase::UniqueObjectId::CreateNSUUID(Phase::UniqueObjectId *this)
{
  uint64_t v1 = (void *)[objc_alloc(MEMORY[0x263F08C38]) initWithUUIDBytes:this];

  return v1;
}

uint64_t Phase::ActionTreeManager::ConfigureStreamNode(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  id v7 = a3;
  char v40 = a4;
  unsigned int v8 = [v7 format];
  id v9 = [v8 channelLayout];
  uint64_t v10 = (Phase::ChannelLayout *)[v9 layout];
  unsigned __int8 v12 = Phase::ChannelLayout::IsLayoutSupported(v10, v11);

  if (v12)
  {
    __int16 v14 = [v8 channelLayout];

    if (v14)
    {
      id v15 = objc_alloc(MEMORY[0x263EF9388]);
      __int16 v16 = [v7 engine];
      [v16 sampleRate];
      double v18 = v17;
      uint64_t v19 = [v8 channelLayout];
      double v20 = [v15 initWithCommonFormat:1 sampleRate:0 interleaved:v19 channelLayout:v18];
    }
    else
    {
      id v22 = objc_alloc(MEMORY[0x263EF9388]);
      __int16 v16 = [v7 engine];
      [v16 sampleRate];
      double v20 = objc_msgSend(v22, "initWithCommonFormat:sampleRate:channels:interleaved:", 1, objc_msgSend(v8, "channelCount"), 0, v23);
    }

    if (v20)
    {
      MEMORY[0x223C944F0](buf);
      long long v39 = *(_OWORD *)buf;
      *(void *)buf = 1;
      if (Phase::ActionTreeObject::LeafNodeInfo::Configure(a2, &v39, &v40, buf, (void *)(a1 + 264), (_OWORD *)(a2 + 120)))
      {
        if (!*(unsigned char *)a2) {
          std::terminate();
        }
        [v7 normalize];
        uint64_t v25 = (Phase::Logger *)[v20 sampleRate];
        if (a4 == 4)
        {
          id v32 = v7;
          double v33 = [v32 renderBlock];
          BOOL v34 = v33 == 0;

          if (!v34)
          {
            char v40 = 4;
            [v32 renderBlock];
            objc_claimAutoreleasedReturnValue();
            operator new();
          }
          Phase::Controller::TaskManager::GetObjCService<PHASEAssetRegistry>(*(Phase::Logger **)(a1 + 224), 1);
          __int16 v36 = (Phase::Logger *)objc_claimAutoreleasedReturnValue();
          __int16 v37 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v36)
                                                                                              + 688)));
          if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
          {
            uint64_t v38 = -[Phase::Logger getString:](v36, "getString:", [v32 nodeUID]);
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = "ActionTreeManager.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 4174;
            __int16 v42 = 2080;
            uint64_t v43 = v38;
            _os_log_impl(&dword_221E5E000, v37, OS_LOG_TYPE_ERROR, "%25s:%-5d Missing renderblock on pullstream node %s.  Set it before preparing or starting the sound event", buf, 0x1Cu);
          }
        }
        else
        {
          if (a4 == 3) {
            operator new();
          }
          MetaParamState v35 = **(id **)(Phase::Logger::GetInstance(v25) + 688);
          if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = "ActionTreeManager.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 4190;
            __int16 v42 = 1024;
            LODWORD(v43) = a4;
            _os_log_impl(&dword_221E5E000, v35, OS_LOG_TYPE_ERROR, "%25s:%-5d Invalid stream node type: %d", buf, 0x18u);
          }
        }
      }
      else
      {
        Phase::Controller::TaskManager::GetObjCService<PHASEAssetRegistry>(*(Phase::Logger **)(a1 + 224), 1);
        __int16 v28 = (Phase::Logger *)objc_claimAutoreleasedReturnValue();
        unint64_t v29 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v28)
                                                                                            + 688)));
        if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
        {
          uint64_t v30 = -[Phase::Logger getString:](v28, "getString:", [v7 nodeUID]);
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "ActionTreeManager.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 4144;
          __int16 v42 = 2080;
          uint64_t v43 = v30;
          _os_log_impl(&dword_221E5E000, v29, OS_LOG_TYPE_ERROR, "%25s:%-5d Fatal Action tree data error: could not configure push stream leaf node %s", buf, 0x1Cu);
        }
      }
    }
    else
    {
      double v26 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v24)
                                                                                          + 688)));
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        id v27 = [v7 description];
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "ActionTreeManager.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 4133;
        __int16 v42 = 2080;
        uint64_t v43 = [v27 UTF8String];
        _os_log_impl(&dword_221E5E000, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d [AVAudioFormat initWithCommonFormat] failed on node '%s'", buf, 0x1Cu);
      }
      double v20 = 0;
    }
  }
  else
  {
    double v20 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v13)
                                                                                        + 688)));
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      float64x2_t v21 = [v8 channelLayout];
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "ActionTreeManager.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 4108;
      __int16 v42 = 1024;
      LODWORD(v43) = [v21 layoutTag];
      _os_log_impl(&dword_221E5E000, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d Fatal Action tree data error: push stream data has invalid audio format, layoutTag = 0x%x", buf, 0x18u);
    }
  }

  return 0;
}

void sub_221E6CE18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Phase::ActionTreeManager::SetFloatParam(Phase::Logger **this, int a2, double *a3, Phase::ActionTreeGatheredParams *a4, Phase::ActionTreeObject *a5)
{
  if (a2 < 0 || (uint64_t v6 = *((void *)a4 + 1), a2 >= (unint64_t)((*((void *)a4 + 2) - v6) >> 3)))
  {
    int v8 = 0;
  }
  else
  {
    if (*(_DWORD *)(*((void *)a4 + 4) + 4 * a2) == 1)
    {
      *a3 = *(double *)(v6 + 8 * a2);
      return 1;
    }
    int v8 = 1;
  }
  Phase::ActionTreeManager::HandleParamError(this[28], v8, (uint64_t)a5, a2);
  return 0;
}

uint64_t Phase::ActionTreeManager::ProcessNodes(void *a1, uint64_t a2, Phase::ActionTreeGatheredParams *a3, void *a4)
{
  v490[5] = *MEMORY[0x263EF8340];
  uint64_t result = 1;
  v475[0] = 1;
  uint64_t v477 = 0;
  int v476 = 1065353216;
  uint64_t v7 = *(void *)(a2 + 24);
  unint64_t v460 = *(unsigned int *)(v7 + 80);
  if (!v460) {
    return result;
  }
  int v8 = (Phase::ActionTreeObject *)a2;
  uint64_t v9 = 0;
  int v458 = 0;
  unint64_t v10 = 0;
  uint64_t v461 = *(void *)(v7 + 88);
  v453 = (uint64_t *)(a2 + 104);
  v455 = (Phase::ActionTreeManager *)a1;
  uint64_t v439 = (uint64_t)(a1 + 10);
  location = (id *)(a2 + 296);
  v440 = (uint64_t *)(a2 + 120);
  v441 = a1 + 33;
  v459 = (float *)v475;
  while (2)
  {
    uint64_t v11 = v461 + v10;
    int v12 = *(_DWORD *)(v461 + v10);
    v10 += 8;
    switch(v12)
    {
      case 0:
        if (*(_DWORD *)(*((void *)v8 + 3) + 40) <= v9)
        {
          v404 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)result) + 688);
          if (os_log_type_enabled(v404, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(void *)&uint8_t buf[4] = "ActionTreeManager.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1477;
            v399 = "%25s:%-5d Fatal Sound Event data error: Encountered more leafnodes than is allowed";
            goto LABEL_614;
          }
          return 0;
        }
        v443 = (void *)(v461 + v10);
        unint64_t v4 = (int)v9;
        uint64_t v60 = *((void *)v8 + 7);
        long long v61 = (unsigned __int8 *)(v60 + 136 * (int)v9);
        int v62 = v61[24];
        if (*(unsigned char *)v459)
        {
          switch(v61[24])
          {
            case 1u:
              goto LABEL_160;
            case 4u:
              uint64_t result = Phase::ActionTreeManager::WriteLeafNodeUpdateParameters((Phase::Logger **)v455, v8, v9, (uint64_t)(v443 + 2), a3, a4, v459[1]);
              int v8 = (Phase::ActionTreeObject *)a2;
              if ((result & 1) == 0) {
                return 0;
              }
              goto LABEL_444;
            case 5u:
              goto LABEL_309;
            case 6u:
              *(_OWORD *)buf = *(_OWORD *)(v60 + 136 * (int)v9 + 8);
              uint64_t result = Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a4, 3u, buf, 0x18uLL);
              goto LABEL_310;
            case 7u:
            case 8u:
              if ((unint64_t)(v443[8] - 1) <= 2)
              {
                if (!Phase::ActionTreeManager::WriteLeafNodeUpdateParameters((Phase::Logger **)v455, v8, v9, (uint64_t)(v443 + 2), a3, a4, v459[1]))return 0; {
                *(_OWORD *)buf = *(_OWORD *)(v60 + 136 * (int)v9 + 8);
                }
                Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a4, 2u, buf, 0x10uLL);
                Phase::ActionTreeObject::LeafNodeInfo::SetLeafNodeState(v60 + 136 * (int)v9, 4u);
                int v8 = (Phase::ActionTreeObject *)a2;
                goto LABEL_444;
              }
LABEL_160:
              int v449 = v9;
              v434 = Phase::Controller::TaskManager::GetObjCService<PHASEAssetRegistry>(*((Phase::Logger **)v455 + 28), 1);
              v125 = (void *)[v434 getSoundAssetInfo:v443[1]];
              if (!v125)
              {
                v410 = **(id **)(Phase::Logger::GetInstance(0) + 688);
                if (os_log_type_enabled(v410, OS_LOG_TYPE_ERROR))
                {
                  uint64_t v411 = v443[1];
                  *(_DWORD *)buf = 136315650;
                  *(void *)&uint8_t buf[4] = "ActionTreeManager.mm";
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 1521;
                  *(_WORD *)&unsigned char buf[18] = 2048;
                  *(void *)&buf[20] = v411;
                  _os_log_impl(&dword_221E5E000, v410, OS_LOG_TYPE_ERROR, "%25s:%-5d Fatal Sound Event data error: did not find asset info for assetId %llu", buf, 0x1Cu);
                }
                goto LABEL_603;
              }
              uint64_t v126 = v60 + 136 * (int)v9;
              *(void *)(v126 + 8) = 0;
              v436 = (uint64_t *)(v126 + 8);
              *(void *)(v126 + 16) = 0;
              Phase::ActionTreeObject::LeafNodeInfo::SetLeafNodeState(v126, 1u);
              Phase::ActionTreeObject::LeafNodeInfo::SetLeafNodeSeekState(v60 + 136 * (int)v9, 0);
              uint64_t v127 = v60 + 136 * (int)v9;
              v432 = (Phase::Controller::StreamRenderer **)(v127 + 32);
              v128 = std::unique_ptr<Phase::Controller::StreamRenderer>::reset[abi:ne180100]((Phase::Controller::StreamRenderer **)(v127 + 32), 0);
              *(void *)(v127 + 48) = 0;
              v129 = (uint64_t *)(v127 + 48);
              *((unsigned char *)v129 - 8) = 0;
              v130 = v129 - 1;
              v129[5] = 0;
              v430 = v129 + 5;
              v129[3] = 0;
              *((_DWORD *)v129 + 8) = 0;
              *long long v61 = 0;
              v129[1] = 0;
              *((unsigned char *)v129 + 16) = 0;
              uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance(v128);
              if (*((unsigned char *)Instance + 1557))
              {
                v132 = **(id **)(Phase::Logger::GetInstance(Instance) + 688);
                if (os_log_type_enabled(v132, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v133 = *(void *)(v60 + 136 * (int)v4 + 120);
                  uint64_t v134 = *v436;
                  *(_DWORD *)buf = 136315906;
                  *(void *)&uint8_t buf[4] = "ActionTreeManager.mm";
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 644;
                  *(_WORD *)&unsigned char buf[18] = 2048;
                  *(void *)&buf[20] = v133;
                  *(_WORD *)&buf[28] = 2048;
                  *(void *)&buf[30] = v134;
                  _os_log_impl(&dword_221E5E000, v132, OS_LOG_TYPE_DEFAULT, "%25s:%-5d (sound event: %llu, generator: %llu) - reset", buf, 0x26u);
                }
              }
              MEMORY[0x223C944F0](buf);
              long long v466 = *(_OWORD *)buf;
              if (v125[1]) {
                char v135 = 2;
              }
              else {
                char v135 = 1;
              }
              LOBYTE(v474) = v135;
              BOOL v136 = Phase::ActionTreeObject::LeafNodeInfo::Configure((uint64_t)v61, &v466, &v474, v443 + 9, v441, (_OWORD *)a2);
              if (v136)
              {
                if (!*v61) {
                  goto LABEL_629;
                }
                uint64_t v137 = v443[2];
                *(void *)(v60 + 136 * (int)v4 + 56) = v443[1];
                v428 = v443 + 2;
                v129[3] = v443[6];
                uint64_t SubmixIdFromHashName = Phase::ActionTreeObject::FindSubmixIdFromHashName((Phase::ActionTreeObject *)a2, v137);
                if (SubmixIdFromHashName | v139)
                {
                  *(_DWORD *)&unsigned char buf[32] = 6553601;
                  unint64_t v482 = 0xC028000000000000;
                  char v483 = 0;
                  uint64_t v484 = 0;
                  uint64_t v485 = 0;
                  uint64_t v488 = 0;
                  uint64_t v489 = 0x3FF0000000000000;
                  memset(v490, 0, 40);
                  uint64_t v140 = v125[1];
                  uint64_t v426 = v139;
                  uint64_t v427 = SubmixIdFromHashName;
                  if (v140 != 1)
                  {
                    if (!v140)
                    {
                      *(unsigned char *)(v60 + 136 * (int)v4 + 64) = 1;
                      uint64_t v141 = (*(uint64_t (**)(void *))(*v125 + 16))(v125);
                      uint64_t v142 = v141;
                      if (!v141) {
                        goto LABEL_629;
                      }
                      id v143 = *(id *)(v141 + 48);
                      char v483 = 0;
                      v144 = [v143 format];
                      uint64_t v145 = [v144 streamDescription];
                      v486[0] = *(_OWORD *)v145;
                      v486[1] = *(_OWORD *)(v145 + 16);
                      uint64_t v487 = *(void *)(v145 + 32);

                      v146 = [v143 format];
                      v147 = [v146 channelLayout];
                      *(_DWORD *)&unsigned char buf[32] = [v147 layoutTag];

                      goto LABEL_422;
                    }
                    v416 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance((Phase::Logger *)SubmixIdFromHashName)
                                                                      + 688));
                    if (os_log_type_enabled(v416, OS_LOG_TYPE_ERROR))
                    {
                      uint64_t v417 = v125[1];
                      *(_DWORD *)long long __src = 136315650;
                      *(void *)&__src[4] = "ActionTreeManager.mm";
                      *(_WORD *)&__src[12] = 1024;
                      *(_DWORD *)&__src[14] = 1823;
                      *(_WORD *)&__src[18] = 1024;
                      *(_DWORD *)&__src[20] = v417;
                      v418 = "%25s:%-5d Unhandled AssetType %d for Sampler!";
                      v419 = v416;
                      uint32_t v420 = 24;
LABEL_627:
                      _os_log_impl(&dword_221E5E000, v419, OS_LOG_TYPE_ERROR, v418, __src, v420);
                    }
LABEL_603:

                    return 0;
                  }
                  *(unsigned char *)(v60 + 136 * (int)v4 + 64) = 2;
                  v181 = (Phase::Logger *)(*(uint64_t (**)(void *))(*v125 + 24))(v125);
                  uint64_t v142 = (uint64_t)v181;
                  if (!v181) {
                    goto LABEL_629;
                  }
                  if (*v432)
                  {
                    v182 = **(id **)(Phase::Logger::GetInstance(v181) + 688);
                    if (os_log_type_enabled(v182, OS_LOG_TYPE_ERROR))
                    {
                      uint64_t v183 = v443[1];
                      *(_DWORD *)long long __src = 136315650;
                      *(void *)&__src[4] = "ActionTreeManager.mm";
                      *(_WORD *)&__src[12] = 1024;
                      *(_DWORD *)&__src[14] = 1684;
                      *(_WORD *)&__src[18] = 2048;
                      *(void *)&__src[20] = v183;
                      _os_log_impl(&dword_221E5E000, v182, OS_LOG_TYPE_ERROR, "%25s:%-5d Warning: overriding the stream renderer for streaming assetId %llu", __src, 0x1Cu);
                    }
                  }
                  id v184 = *(id *)(v142 + 64);
                  [v184 sampleRate];
                  *(float *)&double v185 = v185;
                  unsigned int v186 = vcvtps_u32_f32((float)(*(float *)&v185 * 80.0) / 1000.0);
                  if (v186 <= 0x4000) {
                    unsigned int v186 = 0x4000;
                  }
                  Phase::Controller::StreamedSoundAssetInfo::CreateStreamRenderer((Phase::Controller::StreamedSoundAssetInfo *)v142, &cfstr_Mpegdefault12l.isa, (v186 + 1) & 0xFFFFFFFE, __src);
                  v187 = *(Phase::Controller::StreamRenderer **)__src;
                  *(void *)long long __src = 0;
                  std::unique_ptr<Phase::Controller::StreamRenderer>::reset[abi:ne180100](v432, v187);
                  std::unique_ptr<Phase::Controller::StreamRenderer>::reset[abi:ne180100]((Phase::Controller::StreamRenderer **)__src, 0);

                  if (*v432)
                  {
                    uint64_t v189 = v60 + 136 * (int)v4;
                    uint64_t v191 = *(void *)(v189 + 16);
                    v190 = (uint64_t *)(v189 + 16);
                    caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::_addOrReplace(v439, *v436, v191, (uint64_t)*v432);
                    if (*(unsigned char *)v130)
                    {
                      uint64_t v425 = *v129;
                      unsigned int v192 = Phase::ActionTreeObject::LeafNodeInfo::GeneratorStreamSeek((Phase::ActionTreeObject::LeafNodeInfo *)v61, *((Phase::Controller::TaskManager **)v455 + 28));
                      Phase::ActionTreeManager::SubmitGeneratorSeekCompletedResult((uint64_t)v455, *v436, *v190, v192);
                      if (*(unsigned char *)v130) {
                        goto LABEL_629;
                      }
                      if (v192)
                      {
                        v194 = **(id **)(Phase::Logger::GetInstance(v193) + 688);
                        if (os_log_type_enabled(v194, OS_LOG_TYPE_DEFAULT))
                        {
                          uint64_t v195 = *v436;
                          *(_DWORD *)long long __src = 136316162;
                          *(void *)&__src[4] = "ActionTreeManager.mm";
                          *(_WORD *)&__src[12] = 1024;
                          *(_DWORD *)&__src[14] = 1722;
                          *(_WORD *)&__src[18] = 2048;
                          *(void *)&__src[20] = v195;
                          *(_WORD *)&__src[28] = 2048;
                          *(void *)&__src[30] = v425;
                          __int16 v479 = 1024;
                          unsigned int v480 = v192;
                          _os_log_impl(&dword_221E5E000, v194, OS_LOG_TYPE_DEFAULT, "%25s:%-5d generatorId %llu: seeking to time %.2fs before preparing, result %d, aborting prepare, stopping", __src, 0x2Cu);
                        }
                        Phase::ActionTreeManager::LeafNodeCompleted(v455, *v436, *v190, (void *)(v60 + 136 * (int)v4 + 104));

                        goto LABEL_442;
                      }
                    }
                    else
                    {
                      v223 = *v432;
                      if (v443[9] == 1)
                      {
                        BOOL v224 = Phase::Controller::StreamedSoundAssetInfo::ScheduleFile(v142, (uint64_t)v223, 0, 1, 0, 0);
                      }
                      else
                      {
                        *(void *)&long long v462 = MEMORY[0x263EF8330];
                        *((void *)&v462 + 1) = 3321888768;
                        v463 = ___ZN5Phase17ActionTreeManager18ProcessSamplerNodeEPKNS_10SamplerMsgEPNS_10ParamStackEiPNS_16ActionTreeObjectERNS_24ActionTreeGatheredParamsERNS_17MessagePipeWriterINS_23ActionTreeServerCommandEEE_block_invoke;
                        v464 = &__block_descriptor_40_ea8_32c203_ZTSKZN5Phase17ActionTreeManager18ProcessSamplerNodeEPKNS_10SamplerMsgEPNS_10ParamStackEiPNS_16ActionTreeObjectERNS_24ActionTreeGatheredParamsERNS_17MessagePipeWriterINS_23ActionTreeServerCommandEEEE3__0_e8_v16__0q8l;
                        v465 = v61;
                        BOOL v224 = Phase::Controller::StreamedSoundAssetInfo::ScheduleFile(v142, (uint64_t)v223, 0, 0, 0, &v462);
                      }
                      if (!v224)
                      {
                        v421 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance((Phase::Logger *)v224)
                                                                          + 688));
                        if (!os_log_type_enabled(v421, OS_LOG_TYPE_ERROR)) {
                          goto LABEL_603;
                        }
                        uint64_t v424 = v443[1];
                        *(_DWORD *)long long __src = 136315650;
                        *(void *)&__src[4] = "ActionTreeManager.mm";
                        *(_WORD *)&__src[12] = 1024;
                        *(_DWORD *)&__src[14] = 1764;
                        *(_WORD *)&__src[18] = 2048;
                        *(void *)&__src[20] = v424;
                        v418 = "%25s:%-5d Failed to schedule streaming assetId %llu on stream renderer";
                        goto LABEL_626;
                      }
                    }
                    v281 = (Phase::Logger *)Phase::Controller::StreamRenderer::Start(*v432);
                    if (v281)
                    {
                      char v483 = 2;
                      id v143 = *(id *)(v142 + 64);
                      uint64_t v282 = [v143 streamDescription];
                      v486[0] = *(_OWORD *)v282;
                      v486[1] = *(_OWORD *)(v282 + 16);
                      uint64_t v487 = *(void *)(v282 + 32);
                      v146 = [v143 channelLayout];
                      *(_DWORD *)&unsigned char buf[32] = [v146 layoutTag];
LABEL_422:

                      uint64_t v488 = v443[3];
                      uint64_t v489 = v443[4];
                      v490[0] = *(void *)(v142 + 24);
                      unint64_t v482 = *(void *)(v142 + 40);

                      uint64_t v283 = *v430;
                      if (*v430 != v443[9]) {
                        goto LABEL_629;
                      }
                      *(_OWORD *)buf = *(_OWORD *)v436;
                      *(void *)&buf[16] = v427;
                      *(void *)&buf[24] = v426;
                      uint64_t v484 = 0;
                      uint64_t v485 = v443[1];
                      v490[3] = v443[8];
                      v490[4] = v283;
                      uint64_t v284 = a2;
                      if (!Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a4, 7u, buf, 0xA8uLL)) {
                        goto LABEL_603;
                      }
                      uint64_t v285 = Phase::ActionTreeManager::WriteLeafNodeUpdateParameters((Phase::Logger **)v455, (Phase::ActionTreeObject *)a2, v449, (uint64_t)v428, a3, a4, v459[1]);
                      if ((v285 & 1) == 0) {
                        goto LABEL_603;
                      }
                      v286 = (Phase::Logger *)Phase::Logger::GetInstance((Phase::Logger *)v285);
                      if (*((unsigned char *)v286 + 696))
                      {
                        v287 = **(id **)(Phase::Logger::GetInstance(v286) + 688);
                        v288 = v287;
                        os_signpost_id_t v289 = *v436;
                        if ((unint64_t)(*v436 - 1) <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v287))
                        {
                          *(_DWORD *)long long __src = 134217984;
                          *(void *)&__src[4] = v289;
                          _os_signpost_emit_with_name_impl(&dword_221E5E000, v288, OS_SIGNPOST_INTERVAL_BEGIN, v289, "Phase_Generator_Prepare", "Generator ID %llu Prepare Begin", __src, 0xCu);
                        }

                        uint64_t v284 = a2;
                      }
                      Phase::ActionTreeObject::LeafNodeInfo::SetLeafNodeState((uint64_t)v61, 2u);
                      int v290 = *(unsigned __int8 *)(v284 + 144);
                      if ((v290 - 2) < 2) {
                        goto LABEL_632;
                      }
                      if (v290 == 4)
                      {
LABEL_435:
                        started = (Phase::Logger *)Phase::ActionTreeManager::StartPreparedVoice(v284, (uint64_t)v61, a4);
                        if (!started) {
                          goto LABEL_603;
                        }
                        v292 = (Phase::Logger *)Phase::Logger::GetInstance(started);
                        if (*((unsigned char *)v292 + 696))
                        {
                          v293 = **(id **)(Phase::Logger::GetInstance(v292) + 688);
                          v294 = v293;
                          os_signpost_id_t v295 = *v436;
                          if ((unint64_t)(*v436 - 1) <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v293))
                          {
                            *(_DWORD *)long long __src = 134217984;
                            *(void *)&__src[4] = v295;
                            _os_signpost_emit_with_name_impl(&dword_221E5E000, v294, OS_SIGNPOST_INTERVAL_BEGIN, v295, "Phase_Generator_Start", "Generator ID %llu Start", __src, 0xCu);
                          }
                        }
                        goto LABEL_441;
                      }
                      if (v290 == 8)
                      {
LABEL_632:
                        if (v290 == 4 || *(unsigned char *)(v284 + 200)) {
                          goto LABEL_435;
                        }
                      }
LABEL_441:

                      goto LABEL_442;
                    }
                    v421 = **(id **)(Phase::Logger::GetInstance(v281) + 688);
                    if (!os_log_type_enabled(v421, OS_LOG_TYPE_ERROR)) {
                      goto LABEL_603;
                    }
                    uint64_t v423 = v443[1];
                    *(_DWORD *)long long __src = 136315650;
                    *(void *)&__src[4] = "ActionTreeManager.mm";
                    *(_WORD *)&__src[12] = 1024;
                    *(_DWORD *)&__src[14] = 1773;
                    *(_WORD *)&__src[18] = 2048;
                    *(void *)&__src[20] = v423;
                    v418 = "%25s:%-5d Failed to start stream renderer for streaming assetId %llu";
                  }
                  else
                  {
                    v421 = **(id **)(Phase::Logger::GetInstance(v188) + 688);
                    if (!os_log_type_enabled(v421, OS_LOG_TYPE_ERROR)) {
                      goto LABEL_603;
                    }
                    uint64_t v422 = v443[1];
                    *(_DWORD *)long long __src = 136315650;
                    *(void *)&__src[4] = "ActionTreeManager.mm";
                    *(_WORD *)&__src[12] = 1024;
                    *(_DWORD *)&__src[14] = 1698;
                    *(_WORD *)&__src[18] = 2048;
                    *(void *)&__src[20] = v422;
                    v418 = "%25s:%-5d Failed to create stream renderer for streaming assetId %llu";
                  }
LABEL_626:
                  v419 = v421;
                  uint32_t v420 = 28;
                  goto LABEL_627;
                }
                v412 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance((Phase::Logger *)SubmixIdFromHashName)
                                                                  + 688));
                if (!os_log_type_enabled(v412, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_603;
                }
                uint64_t v415 = *v428;
                *(_DWORD *)buf = 136315650;
                *(void *)&uint8_t buf[4] = "ActionTreeManager.mm";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 1622;
                *(_WORD *)&unsigned char buf[18] = 2048;
                *(void *)&buf[20] = v415;
                v414 = "%25s:%-5d Fatal Sound Event data error: Submix %llx not registered.";
              }
              else
              {
                v412 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance((Phase::Logger *)v136)
                                                                  + 688));
                if (!os_log_type_enabled(v412, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_603;
                }
                uint64_t v413 = v443[1];
                *(_DWORD *)buf = 136315650;
                *(void *)&uint8_t buf[4] = "ActionTreeManager.mm";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 1537;
                *(_WORD *)&unsigned char buf[18] = 2048;
                *(void *)&buf[20] = v413;
                v414 = "%25s:%-5d Fatal Sound Event data error: could not configure leaf node for assetId %llu";
              }
              _os_log_impl(&dword_221E5E000, v412, OS_LOG_TYPE_ERROR, v414, buf, 0x1Cu);
              goto LABEL_603;
            default:
              goto LABEL_444;
          }
        }
        if (v62 == 5) {
          goto LABEL_309;
        }
        if (v62 != 4) {
          goto LABEL_444;
        }
        uint64_t v104 = v443[8];
        if ((unint64_t)(v104 - 1) >= 3)
        {
          if (v104) {
            goto LABEL_444;
          }
LABEL_309:
          Phase::ActionTreeObject::LeafNodeInfo::SetLeafNodeState(v60 + 136 * (int)v9, 6u);
          *(_OWORD *)buf = *(_OWORD *)(v60 + 136 * (int)v9 + 8);
          uint64_t result = Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a4, 3u, buf, 0x18uLL);
        }
        else
        {
          Phase::ActionTreeObject::LeafNodeInfo::SetLeafNodeState(v60 + 136 * (int)v9, 7u);
          *(_OWORD *)buf = *(_OWORD *)(v60 + 136 * (int)v9 + 8);
          uint64_t result = Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a4, 1u, buf, 0x10uLL);
        }
LABEL_310:
        int v8 = (Phase::ActionTreeObject *)a2;
        goto LABEL_444;
      case 1:
        if (v458 >= 15)
        {
          v404 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)result) + 688);
          uint64_t result = os_log_type_enabled(v404, OS_LOG_TYPE_ERROR);
          if (result)
          {
            *(_DWORD *)buf = 136315394;
            *(void *)&uint8_t buf[4] = "ActionTreeManager.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 3426;
            v399 = "%25s:%-5d Fatal Sound Event data error: Failed to push blend stack";
            goto LABEL_614;
          }
          return result;
        }
        uint64_t v63 = v458 + 1;
        long long v64 = (float *)&v475[16 * v63];
        *(_OWORD *)long long v64 = *(_OWORD *)&v475[16 * v458];
        v459 = v64;
        if (!*(unsigned char *)v64) {
          goto LABEL_307;
        }
        uint64_t v65 = v461 + v10;
        unsigned int v66 = *(char *)(v461 + v10 + 8);
        if (v66 == -2)
        {
          uint64_t v67 = *((void *)v8 + 3);
          uint64_t v68 = *(unsigned int *)(v67 + 96);
          if (!v68)
          {
LABEL_568:
            Phase::Controller::TaskManager::GetObjCService<PHASEAssetRegistry>(*((Phase::Logger **)v455 + 28), 1);
            v400 = (Phase::Logger *)objc_claimAutoreleasedReturnValue();
            v401 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v400)
                                                                                                 + 688)));
            if (os_log_type_enabled(v401, OS_LOG_TYPE_ERROR))
            {
              uint64_t v402 = [(Phase::Logger *)v400 getString:*(void *)(v65 + 424)];
              *(_DWORD *)buf = 136315650;
              *(void *)&uint8_t buf[4] = "ActionTreeManager.mm";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 3457;
              *(_WORD *)&unsigned char buf[18] = 2080;
              *(void *)&buf[20] = v402;
              _os_log_impl(&dword_221E5E000, v401, OS_LOG_TYPE_ERROR, "%25s:%-5d Fatal Sound Event data error: Submix %s not found for distance tracking", buf, 0x1Cu);
            }

            return 0;
          }
          uint64_t v69 = 0;
          v70 = *(void **)(v67 + 104);
          uint64_t v71 = 8 * v68;
          while (*v70 != *(void *)(v65 + 424))
          {
            v70 += 743;
            v69 += 8;
            if (v71 == v69) {
              goto LABEL_568;
            }
          }
          v109 = (double *)(*((void *)a3 + 7) + v69);
        }
        else
        {
          unint64_t v106 = *(unsigned __int8 *)(v461 + v10 + 8);
          if ((v66 & 0x80) != 0 || *(_DWORD *)(*((void *)v8 + 3) + 8) <= v66)
          {
            v404 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)result) + 688);
            uint64_t result = os_log_type_enabled(v404, OS_LOG_TYPE_ERROR);
            if (result)
            {
              *(_DWORD *)buf = 136315394;
              *(void *)&uint8_t buf[4] = "ActionTreeManager.mm";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 3465;
              v399 = "%25s:%-5d Fatal Sound Event data error: blend parameter invalid";
              goto LABEL_614;
            }
            return result;
          }
          uint64_t v107 = *((void *)a3 + 1);
          if (v106 >= (*((void *)a3 + 2) - v107) >> 3)
          {
            Phase::ActionTreeManager::HandleParamError(*((Phase::Logger **)v455 + 28), 0, (uint64_t)v8, (char)v66);
            return 0;
          }
          uint64_t v108 = *((void *)a3 + 4);
          if (v106 >= (*((void *)a3 + 5) - v108) >> 2)
          {
            Phase::ActionTreeManager::HandleParamError(*((Phase::Logger **)v455 + 28), 0, (uint64_t)v8, v66);
            return 0;
          }
          if (*(_DWORD *)(v108 + 4 * v106) != 1)
          {
            char v152 = 0;
            float v149 = 0.0;
            goto LABEL_306;
          }
          v109 = (double *)(v107 + 8 * v106);
        }
        int v148 = *(_DWORD *)(v65 + 32);
        float v149 = 0.0;
        if ((v148 - 17) < 0xFFFFFFF0
          || (double v150 = *v109, v151 = v65 + 16 + 24 * (v148 - 1), *(double *)(v65 + 16) > v150)
          && *(double *)(v65 + 24) == 0.0
          || *(double *)(v151 + 24) < v150 && *(double *)(v151 + 32) == 0.0)
        {
          char v152 = 0;
        }
        else
        {
          float v149 = Phase::EvaluateEnvelopeDef(v65 + 16, v150);
          char v152 = 1;
          int v8 = (Phase::ActionTreeObject *)a2;
        }
LABEL_306:
        *(float *)&v475[16 * v63 + 4] = v149 * *(float *)&v475[16 * v63 + 4];
        *(unsigned char *)v459 = v152;
LABEL_307:
        v10 += *(unsigned int *)(v11 + 4);
        ++v458;
        goto LABEL_446;
      case 2:
      case 4:
        int v13 = v458;
        int v14 = v458 > 0;
        v458 -= v14;
        v459 = (float *)&v475[16 * (v13 - v14)];
        goto LABEL_445;
      case 3:
        if (v458 >= 15)
        {
          v404 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)result) + 688);
          uint64_t result = os_log_type_enabled(v404, OS_LOG_TYPE_ERROR);
          if (result)
          {
            *(_DWORD *)buf = 136315394;
            *(void *)&uint8_t buf[4] = "ActionTreeManager.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 3501;
            v399 = "%25s:%-5d Fatal Sound Event data error: Failed to push switch stack";
            goto LABEL_614;
          }
          return result;
        }
        uint64_t v27 = v458 + 1;
        __int16 v28 = (float *)&v475[16 * v27];
        *(_OWORD *)__int16 v28 = *(_OWORD *)&v475[16 * v458];
        v459 = v28;
        if (!*(unsigned char *)v28) {
          goto LABEL_63;
        }
        unint64_t v29 = *(unsigned __int8 *)(v461 + v10 + 8);
        if (*(char *)(v461 + v10 + 8) < 0 || (uint64_t v30 = *((void *)a3 + 1), v29 >= (*((void *)a3 + 2) - v30) >> 3))
        {
          int v403 = 0;
LABEL_591:
          Phase::ActionTreeManager::HandleParamError(*((Phase::Logger **)v455 + 28), v403, (uint64_t)v8, (char)v29);
          return 0;
        }
        if (*(_DWORD *)(*((void *)a3 + 4) + 4 * v29) != 2)
        {
          int v403 = 1;
          goto LABEL_591;
        }
        *(unsigned char *)v459 = *(void *)(v30 + 8 * v29) == *(void *)(v461 + v10 + 16);
LABEL_63:
        v10 += *(unsigned int *)(v11 + 4);
        int v458 = v27;
        goto LABEL_446;
      case 5:
        uint64_t v77 = v9;
        uint64_t v78 = *(unsigned int *)(v11 + 4);
        BOOL v79 = *(unsigned char *)v459 == 0;
        uint64_t v448 = v461 + v10;
        uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned long long,int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,int>>>::find<unsigned long long>(v453, (unint64_t *)(v461 + v10));
        v10 += v78;
        if (v79)
        {
          int v8 = (Phase::ActionTreeObject *)a2;
          if (result)
          {
            int8x8_t v101 = *(int8x8_t *)(a2 + 112);
            unint64_t v102 = *(void *)(result + 8);
            uint8x8_t v103 = (uint8x8_t)vcnt_s8(v101);
            v103.i16[0] = vaddlv_u8(v103);
            if (v103.u32[0] > 1uLL)
            {
              if (v102 >= *(void *)&v101) {
                v102 %= *(void *)&v101;
              }
            }
            else
            {
              v102 &= *(void *)&v101 - 1;
            }
            uint64_t v153 = *(void *)result;
            v154 = *(uint64_t **)(*v453 + 8 * v102);
            do
            {
              v155 = v154;
              v154 = (uint64_t *)*v154;
            }
            while (v154 != (uint64_t *)result);
            if (v155 == v440) {
              goto LABEL_293;
            }
            unint64_t v156 = v155[1];
            if (v103.u32[0] > 1uLL)
            {
              if (v156 >= *(void *)&v101) {
                v156 %= *(void *)&v101;
              }
            }
            else
            {
              v156 &= *(void *)&v101 - 1;
            }
            if (v156 == v102)
            {
LABEL_295:
              if (v153)
              {
                unint64_t v199 = *(void *)(v153 + 8);
                goto LABEL_297;
              }
            }
            else
            {
LABEL_293:
              if (!v153) {
                goto LABEL_294;
              }
              unint64_t v199 = *(void *)(v153 + 8);
              if (v103.u32[0] > 1uLL)
              {
                unint64_t v200 = *(void *)(v153 + 8);
                if (v199 >= *(void *)&v101) {
                  unint64_t v200 = v199 % *(void *)&v101;
                }
              }
              else
              {
                unint64_t v200 = v199 & (*(void *)&v101 - 1);
              }
              if (v200 != v102)
              {
LABEL_294:
                *(void *)(*v453 + 8 * v102) = 0;
                uint64_t v153 = *(void *)result;
                goto LABEL_295;
              }
LABEL_297:
              if (v103.u32[0] > 1uLL)
              {
                if (v199 >= *(void *)&v101) {
                  v199 %= *(void *)&v101;
                }
              }
              else
              {
                v199 &= *(void *)&v101 - 1;
              }
              if (v199 != v102)
              {
                *(void *)(*v453 + 8 * v199) = v155;
                uint64_t v153 = *(void *)result;
              }
            }
            uint64_t *v155 = v153;
            *(void *)uint64_t result = 0;
            --*(void *)(a2 + 128);
            operator delete((void *)result);
          }
          *((void *)v459 + 1) = 0xFFFFFFFFLL;
          goto LABEL_446;
        }
        int v8 = (Phase::ActionTreeObject *)a2;
        if (result)
        {
          v459[2] = *(float *)(result + 24);
          v459[3] = 0.0;
          int v80 = *(unsigned __int8 *)(v448 + 12);
          if (*(unsigned char *)(v448 + 12))
          {
            while (1)
            {
              v81 = (_DWORD *)(v461 + v10);
              unint64_t v82 = v10 + 8;
              v10 += 8 + *(unsigned int *)(v461 + v10 + 4);
              if (v10 >= v460 || v82 > v460 || *v81 != 6) {
                break;
              }
              if (!--v80) {
                goto LABEL_446;
              }
            }
            v404 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)result) + 688);
            uint64_t result = os_log_type_enabled(v404, OS_LOG_TYPE_ERROR);
            if (result)
            {
              *(_DWORD *)buf = 136315394;
              *(void *)&uint8_t buf[4] = "ActionTreeManager.mm";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 3547;
              v399 = "%25s:%-5d Fatal Sound Event data error: Failed to process random weights";
              goto LABEL_614;
            }
            return result;
          }
          goto LABEL_446;
        }
        uint64_t v123 = v448;
        if (*(int *)(v448 + 8) < 1)
        {
          v124 = 0;
        }
        else
        {
          uint64_t result = [*(id *)(a2 + 16) getRandomHistory:*(void *)v448];
          v124 = (uint64_t *)result;
          int v8 = (Phase::ActionTreeObject *)a2;
          uint64_t v123 = v448;
        }
        int v157 = *(unsigned __int8 *)(v123 + 12);
        if (*(unsigned char *)(v123 + 12))
        {
          int v158 = 0;
          int v159 = 0;
          double v160 = 0.0;
          while (1)
          {
            v161 = (_DWORD *)(v461 + v10);
            unint64_t v162 = v10 + 8;
            v10 += 8 + *(unsigned int *)(v461 + v10 + 4);
            if (v10 >= v460 || v162 > v460 || *v161 != 6) {
              break;
            }
            double v163 = *(double *)(v461 + v162);
            if (v124)
            {
              unint64_t v164 = v124[4];
              uint64_t v165 = v124[1];
              uint64_t v166 = v124[2];
              v167 = (void *)(v165 + 8 * (v164 >> 10));
              if (v166 == v165) {
                v168 = 0;
              }
              else {
                v168 = (_DWORD *)(*v167 + 4 * (v124[4] & 0x3FF));
              }
LABEL_200:
              v169 = v168 - 1024;
              while (1)
              {
                uint64_t v170 = v166 == v165
                     ? 0
                     : *(void *)(v165 + (((v124[5] + v164) >> 7) & 0x1FFFFFFFFFFFFF8))
                     + 4 * ((v124[5] + v164) & 0x3FF);
                if (v168 == (_DWORD *)v170) {
                  break;
                }
                if (*v168 == v158) {
                  goto LABEL_210;
                }
                ++v168;
                if ((_DWORD *)*v167 == ++v169)
                {
                  v171 = (_DWORD *)v167[1];
                  ++v167;
                  v168 = v171;
                  goto LABEL_200;
                }
              }
            }
            double v160 = v160 + v163;
            unint64_t v172 = *((void *)v455 + 31);
            unint64_t v173 = *((void *)v455 + 30) ^ (*((void *)v455 + 30) << 23);
            unint64_t v174 = (v172 >> 26) ^ (v173 >> 17) ^ v172 ^ v173;
            *((void *)v455 + 30) = v172;
            *((void *)v455 + 31) = v174;
            if (v160 * ((double)(v174 + v172) * 5.42101086e-20 * 8.98846567e307 + 0.0) < v163 * 8.98846567e307) {
              int v159 = v158;
            }
LABEL_210:
            if (++v158 == v157) {
              goto LABEL_213;
            }
          }
          v404 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)result) + 688);
          uint64_t result = os_log_type_enabled(v404, OS_LOG_TYPE_ERROR);
          if (result)
          {
            *(_DWORD *)buf = 136315394;
            *(void *)&uint8_t buf[4] = "ActionTreeManager.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 3570;
            v399 = "%25s:%-5d Fatal Sound Event data error: Failed to process random weights";
            goto LABEL_614;
          }
          return result;
        }
        int v159 = 0;
LABEL_213:
        *((_DWORD *)v459 + 2) = v159;
        v459[3] = 0.0;
        v175 = v8;
        unint64_t v176 = *(void *)v123;
        unint64_t v177 = *((void *)v175 + 14);
        if (v177)
        {
          uint8x8_t v178 = (uint8x8_t)vcnt_s8((int8x8_t)v177);
          v178.i16[0] = vaddlv_u8(v178);
          if (v178.u32[0] > 1uLL)
          {
            unint64_t v4 = *(void *)v123;
            if (v177 <= v176) {
              unint64_t v4 = v176 % v177;
            }
          }
          else
          {
            unint64_t v4 = (v177 - 1) & v176;
          }
          v213 = *(uint64_t **)(*v453 + 8 * v4);
          if (v213)
          {
            for (uint64_t i = *v213; i; uint64_t i = *(void *)i)
            {
              unint64_t v215 = *(void *)(i + 8);
              if (v215 == v176)
              {
                if (*(void *)(i + 16) == v176)
                {
                  int v8 = (Phase::ActionTreeObject *)a2;
                  goto LABEL_405;
                }
              }
              else
              {
                if (v178.u32[0] > 1uLL)
                {
                  if (v215 >= v177) {
                    v215 %= v177;
                  }
                }
                else
                {
                  v215 &= v177 - 1;
                }
                if (v215 != v4) {
                  break;
                }
              }
            }
          }
        }
        uint64_t result = (uint64_t)operator new(0x20uLL);
        uint64_t i = result;
        *(void *)uint64_t result = 0;
        *(void *)(result + 8) = v176;
        *(void *)(result + 16) = v176;
        float v216 = (float)(unint64_t)(*(void *)(a2 + 128) + 1);
        *(_DWORD *)(result + 24) = 0;
        float v217 = *(float *)(a2 + 136);
        if ((((float)(v217 * (float)v177) >= v216) & ~(v177 == 0)) == 0)
        {
          BOOL v218 = (v177 & (v177 - 1)) != 0;
          if (v177 < 3) {
            BOOL v218 = 1;
          }
          unint64_t v219 = v218 | (2 * v177);
          unint64_t v220 = vcvtps_u32_f32(v216 / v217);
          if (v219 <= v220) {
            size_t v221 = v220;
          }
          else {
            size_t v221 = v219;
          }
          std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::__rehash<true>((uint64_t)v453, v221);
          unint64_t v177 = *(void *)(a2 + 112);
          if ((v177 & (v177 - 1)) != 0)
          {
            if (v177 <= v176) {
              unint64_t v4 = v176 % v177;
            }
            else {
              unint64_t v4 = v176;
            }
          }
          else
          {
            unint64_t v4 = (v177 - 1) & v176;
          }
        }
        uint64_t v250 = *v453;
        v251 = *(uint64_t **)(*v453 + 8 * v4);
        if (v251)
        {
          *(void *)uint64_t i = *v251;
          int v8 = (Phase::ActionTreeObject *)a2;
        }
        else
        {
          *(void *)uint64_t i = *v440;
          uint64_t *v440 = i;
          *(void *)(v250 + 8 * v4) = v440;
          int v8 = (Phase::ActionTreeObject *)a2;
          if (!*(void *)i) {
            goto LABEL_404;
          }
          unint64_t v252 = *(void *)(*(void *)i + 8);
          if ((v177 & (v177 - 1)) != 0)
          {
            if (v252 >= v177) {
              v252 %= v177;
            }
          }
          else
          {
            v252 &= v177 - 1;
          }
          v251 = (uint64_t *)(*v453 + 8 * v252);
        }
        uint64_t *v251 = i;
LABEL_404:
        ++*((void *)v8 + 16);
LABEL_405:
        *(_DWORD *)(i + 24) = v159;
        if (!v124) {
          goto LABEL_509;
        }
        v267 = (uint64_t *)v124[2];
        v268 = (void **)v124[1];
        uint64_t v269 = (char *)v267 - (char *)v268;
        if (v267 == (uint64_t *)v268) {
          uint64_t v270 = 0;
        }
        else {
          uint64_t v270 = (((char *)v267 - (char *)v268) << 7) - 1;
        }
        unint64_t v271 = v124[4];
        uint64_t v272 = v124[5];
        unint64_t v273 = v272 + v271;
        if (v270 != v272 + v271)
        {
          uint64_t v9 = v77;
          goto LABEL_506;
        }
        BOOL v274 = v271 >= 0x400;
        unint64_t v275 = v271 - 1024;
        if (v274)
        {
          v124[4] = v275;
          v277 = *v268;
          v276 = (uint64_t *)(v268 + 1);
          unint64_t v4 = (unint64_t)v277;
          v124[1] = (uint64_t)v276;
          if (v267 == (uint64_t *)v124[3])
          {
            uint64_t v322 = (uint64_t)v276 - *v124;
            if ((unint64_t)v276 <= *v124)
            {
              if (v267 == (uint64_t *)*v124) {
                unint64_t v344 = 1;
              }
              else {
                unint64_t v344 = ((uint64_t)v267 - *v124) >> 2;
              }
              uint64_t result = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int *>>(v344);
              v346 = (uint64_t *)(result + 8 * (v344 >> 2));
              v347 = (uint64_t *)v124[1];
              v267 = v346;
              uint64_t v348 = v124[2] - (void)v347;
              int v8 = (Phase::ActionTreeObject *)a2;
              uint64_t v9 = v77;
              if (v348)
              {
                v267 = (uint64_t *)((char *)v346 + (v348 & 0xFFFFFFFFFFFFFFF8));
                uint64_t v349 = 8 * (v348 >> 3);
                v350 = (void *)(result + 8 * (v344 >> 2));
                do
                {
                  uint64_t v351 = *v347++;
                  *v350++ = v351;
                  v349 -= 8;
                }
                while (v349);
              }
              v352 = (void *)*v124;
              uint64_t *v124 = result;
              v124[1] = (uint64_t)v346;
              v124[2] = (uint64_t)v267;
              v124[3] = result + 8 * v345;
              if (v352)
              {
                operator delete(v352);
                v267 = (uint64_t *)v124[2];
              }
            }
            else
            {
              uint64_t v323 = v322 >> 3;
              BOOL v324 = v322 >> 3 < -1;
              uint64_t v325 = (v322 >> 3) + 2;
              if (v324) {
                uint64_t v326 = v325;
              }
              else {
                uint64_t v326 = v323 + 1;
              }
              v327 = &v276[-(v326 >> 1)];
              int64_t v328 = (char *)v267 - (char *)v276;
              uint64_t v9 = v77;
              if (v267 != v276)
              {
                uint64_t result = (uint64_t)memmove(&v276[-(v326 >> 1)], v276, (char *)v267 - (char *)v276);
                v267 = (uint64_t *)v124[1];
              }
              v329 = &v267[-(v326 >> 1)];
              v267 = (uint64_t *)((char *)v327 + v328);
              v124[1] = (uint64_t)v329;
              v124[2] = (uint64_t)v327 + v328;
              int v8 = (Phase::ActionTreeObject *)a2;
            }
          }
          else
          {
            uint64_t v9 = v77;
          }
          uint64_t *v267 = v4;
LABEL_504:
          v124[2] += 8;
          goto LABEL_505;
        }
        v278 = (uint64_t *)v124[3];
        unint64_t v4 = *v124;
        uint64_t v279 = (uint64_t)v278 - *v124;
        if (v269 >> 3 < (unint64_t)(v279 >> 3))
        {
          uint64_t result = (uint64_t)operator new(0x1000uLL);
          v280 = (void *)result;
          if (v278 != v267)
          {
            uint64_t *v267 = result;
            v124[2] += 8;
            int v8 = (Phase::ActionTreeObject *)a2;
            uint64_t v9 = v77;
            goto LABEL_505;
          }
          if (v268 == (void **)v4)
          {
            if (v267 == (uint64_t *)v268) {
              unint64_t v370 = 1;
            }
            else {
              unint64_t v370 = ((char *)v278 - (char *)v268) >> 2;
            }
            uint64_t result = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int *>>(v370);
            v268 = (void **)(result + 8 * ((v370 + 3) >> 2));
            v372 = (void **)v124[1];
            v373 = v268;
            uint64_t v374 = v124[2] - (void)v372;
            int v8 = (Phase::ActionTreeObject *)a2;
            uint64_t v9 = v77;
            if (v374)
            {
              v373 = (void **)((char *)v268 + (v374 & 0xFFFFFFFFFFFFFFF8));
              uint64_t v375 = 8 * (v374 >> 3);
              v376 = v268;
              do
              {
                v377 = *v372++;
                *v376++ = v377;
                v375 -= 8;
              }
              while (v375);
            }
            v378 = (void *)*v124;
            uint64_t *v124 = result;
            v124[1] = (uint64_t)v268;
            v124[2] = (uint64_t)v373;
            v124[3] = result + 8 * v371;
            if (v378)
            {
              operator delete(v378);
              v268 = (void **)v124[1];
            }
          }
          else
          {
            uint64_t v9 = v77;
            int v8 = (Phase::ActionTreeObject *)a2;
          }
          *(v268 - 1) = v280;
          v379 = (char *)v124[1];
          v380 = (char *)v124[2];
          v124[1] = (uint64_t)(v379 - 8);
          uint64_t v381 = *((void *)v379 - 1);
          v124[1] = (uint64_t)v379;
          if (v380 == (char *)v124[3])
          {
            uint64_t v382 = (uint64_t)&v379[-*v124];
            if ((unint64_t)v379 <= *v124)
            {
              if (v380 == (char *)*v124) {
                unint64_t v388 = 1;
              }
              else {
                unint64_t v388 = (uint64_t)&v380[-*v124] >> 2;
              }
              uint64_t result = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int *>>(v388);
              v390 = (char *)(result + 8 * (v388 >> 2));
              v391 = (uint64_t *)v124[1];
              v380 = v390;
              uint64_t v392 = v124[2] - (void)v391;
              int v8 = (Phase::ActionTreeObject *)a2;
              uint64_t v9 = v77;
              if (v392)
              {
                v380 = &v390[v392 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v393 = 8 * (v392 >> 3);
                v394 = (void *)(result + 8 * (v388 >> 2));
                do
                {
                  uint64_t v395 = *v391++;
                  *v394++ = v395;
                  v393 -= 8;
                }
                while (v393);
              }
              v396 = (void *)*v124;
              uint64_t *v124 = result;
              v124[1] = (uint64_t)v390;
              v124[2] = (uint64_t)v380;
              v124[3] = result + 8 * v389;
              if (v396)
              {
                operator delete(v396);
                v380 = (char *)v124[2];
              }
            }
            else
            {
              uint64_t v383 = v382 >> 3;
              BOOL v324 = v382 >> 3 < -1;
              uint64_t v384 = (v382 >> 3) + 2;
              if (v324) {
                uint64_t v385 = v384;
              }
              else {
                uint64_t v385 = v383 + 1;
              }
              v386 = &v379[-8 * (v385 >> 1)];
              int64_t v387 = v380 - v379;
              if (v380 != v379)
              {
                uint64_t result = (uint64_t)memmove(&v379[-8 * (v385 >> 1)], v379, v380 - v379);
                v379 = (char *)v124[1];
              }
              v380 = &v386[v387];
              v124[1] = (uint64_t)&v379[-8 * (v385 >> 1)];
              v124[2] = (uint64_t)&v386[v387];
              int v8 = (Phase::ActionTreeObject *)a2;
            }
          }
          *(void *)v380 = v381;
          goto LABEL_504;
        }
        uint64_t v445 = v269 >> 3;
        uint64_t v296 = v279 >> 2;
        if (v278 == (uint64_t *)v4) {
          unint64_t v297 = 1;
        }
        else {
          unint64_t v297 = v296;
        }
        v298 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int *>>(v297);
        uint64_t v300 = v299;
        v301 = operator new(0x1000uLL);
        v302 = &v298[8 * v445];
        unint64_t v4 = (unint64_t)&v298[8 * v300];
        if (v445 != v300) {
          goto LABEL_457;
        }
        uint64_t v303 = 8 * v445;
        if (v269 < 1)
        {
          v356 = v301;
          uint64_t v357 = v303 >> 2;
          if (v267 == (uint64_t *)v268) {
            unint64_t v358 = 1;
          }
          else {
            unint64_t v358 = v357;
          }
          v359 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int *>>(v358);
          v302 = &v359[8 * (v358 >> 2)];
          unint64_t v4 = (unint64_t)&v359[8 * v360];
          uint64_t v9 = v77;
          if (v298) {
            operator delete(v298);
          }
          v298 = v359;
          v301 = v356;
        }
        else
        {
          uint64_t v304 = v303 >> 3;
          if (v304 >= -1) {
            unint64_t v305 = v304 + 1;
          }
          else {
            unint64_t v305 = v304 + 2;
          }
          v302 -= 8 * (v305 >> 1);
LABEL_457:
          uint64_t v9 = v77;
        }
        *(void *)v302 = v301;
        v306 = v302 + 8;
        for (uint64_t j = v124[2]; j != v124[1]; j -= 8)
        {
          if (v302 == v298)
          {
            if ((unint64_t)v306 >= v4)
            {
              if ((char *)v4 == v298) {
                unint64_t v312 = 1;
              }
              else {
                unint64_t v312 = (uint64_t)(v4 - (void)v298) >> 2;
              }
              v313 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int *>>(v312);
              v315 = v313;
              v302 = &v313[(2 * v312 + 6) & 0xFFFFFFFFFFFFFFF8];
              uint64_t v316 = v306 - v298;
              BOOL v75 = v306 == v298;
              v306 = v302;
              if (!v75)
              {
                v306 = &v302[v316 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v317 = 8 * (v316 >> 3);
                v318 = v302;
                v319 = v298;
                do
                {
                  uint64_t v320 = *(void *)v319;
                  v319 += 8;
                  *(void *)v318 = v320;
                  v318 += 8;
                  v317 -= 8;
                }
                while (v317);
              }
              unint64_t v4 = (unint64_t)&v313[8 * v314];
              if (v298) {
                operator delete(v298);
              }
              v298 = v315;
            }
            else
            {
              uint64_t v308 = (uint64_t)(v4 - (void)v306) >> 3;
              if (v308 >= -1) {
                uint64_t v309 = v308 + 1;
              }
              else {
                uint64_t v309 = v308 + 2;
              }
              uint64_t v310 = v309 >> 1;
              v302 = &v298[8 * (v309 >> 1)];
              v311 = v298;
              if (v306 != v298)
              {
                memmove(v302, v298, v306 - v298);
                v311 = v306;
              }
              v306 = &v311[8 * v310];
            }
          }
          uint64_t v321 = *(void *)(j - 8);
          *((void *)v302 - 1) = v321;
          v302 -= 8;
        }
        uint64_t result = *v124;
        uint64_t *v124 = (uint64_t)v298;
        v124[1] = (uint64_t)v302;
        v124[2] = (uint64_t)v306;
        v124[3] = v4;
        int v8 = (Phase::ActionTreeObject *)a2;
        if (result) {
          operator delete((void *)result);
        }
LABEL_505:
        v268 = (void **)v124[1];
        unint64_t v271 = v124[4];
        uint64_t v272 = v124[5];
        unint64_t v273 = v271 + v272;
LABEL_506:
        (*(float **)((char *)v268 + ((v273 >> 7) & 0x1FFFFFFFFFFFFF8)))[v273 & 0x3FF] = v459[2];
        v124[5] = v272 + 1;
        if (v272 + 1 > (unint64_t)*(int *)(v448 + 8))
        {
          unint64_t v353 = v271 + 1;
          v124[4] = v353;
          v124[5] = v272;
          if (v353 >= 0x800)
          {
            operator delete(*v268);
            v124[1] += 8;
            v124[4] -= 1024;
          }
        }
LABEL_509:
        if (v10 >= v460)
        {
          v404 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)result) + 688);
          uint64_t result = os_log_type_enabled(v404, OS_LOG_TYPE_ERROR);
          if (!result) {
            return result;
          }
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "ActionTreeManager.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3618;
          v399 = "%25s:%-5d Fatal Sound Event data error: Unexpected end of node message stream";
          goto LABEL_614;
        }
        if (*(_DWORD *)(v461 + v10) != 7)
        {
          v404 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)result) + 688);
          uint64_t result = os_log_type_enabled(v404, OS_LOG_TYPE_ERROR);
          if (!result) {
            return result;
          }
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "ActionTreeManager.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3626;
          v399 = "%25s:%-5d Fatal Sound Event data error: Unexpected message processing subtree";
LABEL_614:
          v406 = v404;
          uint32_t v409 = 18;
LABEL_615:
          _os_log_impl(&dword_221E5E000, v406, OS_LOG_TYPE_ERROR, v399, buf, v409);
          return 0;
        }
LABEL_446:
        if (v10 >= v460) {
          return 1;
        }
        continue;
      case 6:
        if (!*(unsigned char *)v459) {
          goto LABEL_445;
        }
        v404 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)result) + 688);
        uint64_t result = os_log_type_enabled(v404, OS_LOG_TYPE_ERROR);
        if (!result) {
          return result;
        }
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "ActionTreeManager.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3646;
        v399 = "%25s:%-5d Fatal Sound Event data error: Bad randomweight message encountered";
        goto LABEL_614;
      case 7:
        if (v458 >= 15)
        {
          v404 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)result) + 688);
          uint64_t result = os_log_type_enabled(v404, OS_LOG_TYPE_ERROR);
          if (result)
          {
            *(_DWORD *)buf = 136315394;
            *(void *)&uint8_t buf[4] = "ActionTreeManager.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 3661;
            v399 = "%25s:%-5d Fatal Sound Event data error: Failed to push random stack";
            goto LABEL_614;
          }
          return result;
        }
        uint64_t v27 = v458 + 1;
        int v72 = *((_DWORD *)v459 + 2);
        int v73 = *((_DWORD *)v459 + 3);
        unint64_t v74 = &v475[16 * v27];
        *unint64_t v74 = *(_OWORD *)&v475[16 * v458];
        if (*(unsigned char *)v74) {
          BOOL v75 = v73 == v72;
        }
        else {
          BOOL v75 = 0;
        }
        char v76 = v75;
        v459 = (float *)&v475[16 * v27];
        *(unsigned char *)unint64_t v74 = v76;
        goto LABEL_63;
      case 8:
        v458 -= v458 > 0;
        v459 = (float *)&v475[16 * v458];
        ++*((_DWORD *)v459 + 3);
        goto LABEL_445;
      case 9:
        if (*(_DWORD *)(*((void *)v8 + 3) + 40) <= v9)
        {
          unint64_t v99 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)result) + 688);
          uint64_t result = os_log_type_enabled(v99, OS_LOG_TYPE_ERROR);
          if (!result) {
            goto LABEL_363;
          }
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "ActionTreeManager.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2005;
          uint64_t v25 = v99;
          double v26 = "%25s:%-5d Fatal Sound Event data error: Encountered more leafnodes than is allowed";
LABEL_115:
          uint32_t v100 = 18;
LABEL_116:
          _os_log_impl(&dword_221E5E000, v25, OS_LOG_TYPE_ERROR, v26, buf, v100);
LABEL_363:
          int v8 = (Phase::ActionTreeObject *)a2;
          goto LABEL_446;
        }
        uint64_t v45 = v9;
        unint64_t v4 = (int)v9;
        uint64_t v46 = *((void *)v8 + 7);
        uint64_t v33 = v45;
        unint64_t v47 = (unsigned char *)(v46 + 136 * (int)v45);
        int v48 = v47[24];
        if (!*(unsigned char *)v459)
        {
          if (v48 != 5) {
            goto LABEL_362;
          }
LABEL_159:
          *(_OWORD *)buf = *(_OWORD *)(v46 + 136 * (int)v4 + 8);
          Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a4, 3u, buf, 0x18uLL);
          Phase::ActionTreeObject::LeafNodeInfo::SetLeafNodeState((uint64_t)v47, 6u);
          goto LABEL_362;
        }
        if (v48 == 5) {
          goto LABEL_159;
        }
        __int16 v36 = (uint64_t *)(v461 + v10);
        if (v48 == 4)
        {
LABEL_231:
          uint64_t result = Phase::ActionTreeManager::WriteLeafNodeUpdateParameters((Phase::Logger **)v455, (Phase::ActionTreeObject *)a2, v33, (uint64_t)(v36 + 1), a3, a4, v459[1]);
          if (result) {
            goto LABEL_362;
          }
          goto LABEL_481;
        }
        if (v48 != 1) {
          goto LABEL_362;
        }
        if (!*v47 || (uint64_t v49 = v46 + 136 * (int)v4, v51 = *(void *)(v49 + 32), v50 = (uint64_t *)(v49 + 32), !v51))
        {
          v211 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)result) + 688);
          uint64_t result = os_log_type_enabled(v211, OS_LOG_TYPE_ERROR);
          if (result)
          {
            uint64_t v212 = *v36;
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = "ActionTreeManager.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2032;
            *(_WORD *)&unsigned char buf[18] = 2048;
            *(void *)&buf[20] = v212;
            v58 = v211;
            v59 = "%25s:%-5d Fatal Sound Event data error: push stream leaf node is expected to be already configured %llu";
            goto LABEL_313;
          }
LABEL_481:
          int v8 = (Phase::ActionTreeObject *)a2;
          uint64_t v9 = v33;
          goto LABEL_446;
        }
        uint64_t v52 = v46 + 136 * (int)v4;
        *(void *)(v52 + 72) = v36[5];
        if (*(unsigned char *)(v52 + 64) != 3) {
          goto LABEL_629;
        }
        unint64_t v53 = v36 + 1;
        uint64_t v54 = Phase::ActionTreeObject::FindSubmixIdFromHashName((Phase::ActionTreeObject *)a2, v36[1]);
        if (!(v54 | v55))
        {
          unint64_t v56 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)v54) + 688);
          uint64_t result = os_log_type_enabled(v56, OS_LOG_TYPE_ERROR);
          if (result)
          {
            uint64_t v57 = *v53;
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = "ActionTreeManager.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2075;
            *(_WORD *)&unsigned char buf[18] = 2048;
            *(void *)&buf[20] = v57;
            v58 = v56;
            v59 = "%25s:%-5d Fatal Sound Event data error: Submix %llx not registered.";
LABEL_313:
            _os_log_impl(&dword_221E5E000, v58, OS_LOG_TYPE_ERROR, v59, buf, 0x1Cu);
            goto LABEL_481;
          }
          goto LABEL_481;
        }
        *(_DWORD *)&unsigned char buf[32] = 6553601;
        v490[1] = 0;
        v490[2] = 0;
        uint64_t v450 = v46 + 136 * (int)v4;
        *(_OWORD *)buf = *(_OWORD *)(v450 + 8);
        *(void *)&buf[16] = v54;
        *(void *)&buf[24] = v55;
        char v483 = 1;
        uint64_t v484 = 0;
        uint64_t v485 = 0;
        uint64_t v488 = v36[2];
        uint64_t v489 = v36[3];
        v490[0] = *((unsigned __int8 *)v36 + 56);
        unint64_t v482 = v36[8];
        *(_OWORD *)&v490[3] = xmmword_2220A4EC0;
        id v253 = *(id *)(*v50 + 104);
        v254 = [v253 channelLayout];
        *(_DWORD *)&unsigned char buf[32] = [v254 layoutTag];

        uint64_t v255 = [v253 streamDescription];
        v486[0] = *(_OWORD *)v255;
        v486[1] = *(_OWORD *)(v255 + 16);
        uint64_t v487 = *(void *)(v255 + 32);
        Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a4, 7u, buf, 0xA8uLL);
        uint64_t v256 = Phase::ActionTreeManager::WriteLeafNodeUpdateParameters((Phase::Logger **)v455, (Phase::ActionTreeObject *)a2, v33, (uint64_t)v53, a3, a4, v459[1]);
        if ((v256 & 1) == 0) {
          goto LABEL_480;
        }
        v257 = (Phase::Logger *)Phase::Logger::GetInstance((Phase::Logger *)v256);
        v451 = (uint64_t *)(v450 + 8);
        if (*((unsigned char *)v257 + 696))
        {
          v258 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v257)
                                                                                               + 688)));
          v259 = v258;
          os_signpost_id_t v260 = *v451;
          if ((unint64_t)(*v451 - 1) <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v258))
          {
            *(_DWORD *)long long __src = 134217984;
            *(void *)&__src[4] = v260;
            _os_signpost_emit_with_name_impl(&dword_221E5E000, v259, OS_SIGNPOST_INTERVAL_BEGIN, v260, "Phase_Generator_Prepare", "Generator ID %llu Prepare", __src, 0xCu);
          }
        }
        caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::_addOrReplace(v439, *v451, *(void *)(v46 + 136 * (int)v4 + 16), *v50);
        Phase::ActionTreeObject::LeafNodeInfo::SetLeafNodeState((uint64_t)v47, 2u);
        int v261 = *(unsigned __int8 *)(a2 + 144);
        if ((v261 - 2) < 2) {
          goto LABEL_391;
        }
        if (v261 != 4)
        {
          if (v261 != 8) {
            goto LABEL_399;
          }
LABEL_391:
          if (v261 != 4 && !*(unsigned char *)(a2 + 200)) {
            goto LABEL_399;
          }
        }
        if (Phase::ActionTreeManager::StartPreparedVoice(a2, (uint64_t)v47, a4))
        {
          Phase::ActionTreeObject::LeafNodeInfo::SetLeafNodeState((uint64_t)v47, 4u);
          v263 = (Phase::Logger *)Phase::Logger::GetInstance(v262);
          if (*((unsigned char *)v263 + 696))
          {
            v264 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v263)
                                                                                                 + 688)));
            v265 = v264;
            os_signpost_id_t v266 = *v451;
            if ((unint64_t)(*v451 - 1) <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v264))
            {
              *(_DWORD *)long long __src = 134217984;
              *(void *)&__src[4] = v266;
              _os_signpost_emit_with_name_impl(&dword_221E5E000, v265, OS_SIGNPOST_INTERVAL_BEGIN, v266, "Phase_Generator_Start", "Generator ID %llu Start", __src, 0xCu);
            }
          }
LABEL_399:

          goto LABEL_362;
        }
LABEL_480:

        goto LABEL_481;
      case 10:
        if (*(_DWORD *)(*((void *)v8 + 3) + 40) <= v9)
        {
          v404 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)result) + 688);
          uint64_t result = os_log_type_enabled(v404, OS_LOG_TYPE_ERROR);
          if (result)
          {
            *(_DWORD *)buf = 136315394;
            *(void *)&uint8_t buf[4] = "ActionTreeManager.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2789;
            v399 = "%25s:%-5d Fatal Sound Event data error: Encountered more leafnodes than is allowed";
            goto LABEL_614;
          }
          return result;
        }
        uint64_t v83 = v461 + v10;
        int v84 = v9;
        unint64_t v4 = (int)v9;
        uint64_t v85 = *((void *)v8 + 7);
        int v449 = v84;
        uint64_t v86 = (unsigned char *)(v85 + 136 * v84);
        int v87 = v86[24];
        if (!*(unsigned char *)v459)
        {
          if (v87 == 4)
          {
            uint64_t v105 = *(void *)(v83 + 56);
            if ((unint64_t)(v105 - 1) < 3)
            {
              Phase::ActionTreeObject::LeafNodeInfo::SetLeafNodeState((uint64_t)v86, 7u);
              *(_OWORD *)buf = *(_OWORD *)(v85 + 136 * (int)v4 + 8);
              uint64_t result = Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a4, 1u, buf, 0x10uLL);
              goto LABEL_442;
            }
            if (!v105)
            {
              Phase::ActionTreeObject::LeafNodeInfo::SetLeafNodeState((uint64_t)v86, 6u);
              *(_OWORD *)buf = *(_OWORD *)(v85 + 136 * (int)v4 + 8);
              uint64_t result = Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a4, 3u, buf, 0x18uLL);
              goto LABEL_442;
            }
          }
LABEL_443:
          LODWORD(v9) = v449;
LABEL_444:
          uint64_t v9 = (v9 + 1);
LABEL_445:
          v10 += *(unsigned int *)(v11 + 4);
          goto LABEL_446;
        }
        if ((v87 - 7) < 2)
        {
          if ((unint64_t)(*(void *)(v83 + 56) - 1) <= 2)
          {
            uint64_t result = Phase::ActionTreeManager::WriteLeafNodeUpdateParameters((Phase::Logger **)v455, v8, v449, v83 + 8, a3, a4, v459[1]);
            if (!result) {
              return result;
            }
            *(_OWORD *)buf = *(_OWORD *)(v85 + 136 * (int)v4 + 8);
            Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a4, 2u, buf, 0x10uLL);
            Phase::ActionTreeObject::LeafNodeInfo::SetLeafNodeState((uint64_t)v86, 4u);
            goto LABEL_442;
          }
        }
        else if (v87 != 1)
        {
          if (v87 != 4) {
            goto LABEL_443;
          }
          uint64_t result = Phase::ActionTreeManager::WriteLeafNodeUpdateParameters((Phase::Logger **)v455, v8, v449, v83 + 8, a3, a4, v459[1]);
          if (!result) {
            return result;
          }
          int v8 = (Phase::ActionTreeObject *)a2;
          if (*(unsigned char *)(v83 + 88) != 1) {
            goto LABEL_443;
          }
          int v88 = *(unsigned __int8 *)(v83 + 168);
          if (v88 != 255)
          {
            *(void *)long long __src = *(void *)(v83 + 96);
            uint64_t result = Phase::ActionTreeManager::SetFloatParam((Phase::Logger **)v455, (char)v88, (double *)__src, a3, (Phase::ActionTreeObject *)a2);
            if (!result) {
              return result;
            }
            *(_OWORD *)buf = *(_OWORD *)(v85 + 136 * (int)v4 + 8);
            *(void *)&buf[16] = 0xD5446B03D63B0AC2;
            *(void *)&buf[24] = *(void *)__src;
            uint64_t result = Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a4, 9u, buf, 0x20uLL);
            int v8 = (Phase::ActionTreeObject *)a2;
          }
          int v89 = *(unsigned __int8 *)(v83 + 169);
          if (v89 != 255)
          {
            *(void *)long long __src = *(void *)(v83 + 104);
            uint64_t result = Phase::ActionTreeManager::SetFloatParam((Phase::Logger **)v455, (char)v89, (double *)__src, a3, v8);
            if (!result) {
              return result;
            }
            *(_OWORD *)buf = *(_OWORD *)(v85 + 136 * (int)v4 + 8);
            *(void *)&buf[16] = 0x689B3C6AD0C10930;
            *(void *)&buf[24] = *(void *)__src;
            uint64_t result = Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a4, 9u, buf, 0x20uLL);
            int v8 = (Phase::ActionTreeObject *)a2;
          }
          int v90 = *(unsigned __int8 *)(v83 + 170);
          if (v90 != 255)
          {
            *(void *)long long __src = *(void *)(v83 + 112);
            uint64_t result = Phase::ActionTreeManager::SetFloatParam((Phase::Logger **)v455, (char)v90, (double *)__src, a3, v8);
            if (!result) {
              return result;
            }
            *(_OWORD *)buf = *(_OWORD *)(v85 + 136 * (int)v4 + 8);
            *(void *)&buf[16] = 0x6256579BE092E3DDLL;
            *(void *)&buf[24] = *(void *)__src;
            uint64_t result = Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a4, 9u, buf, 0x20uLL);
            int v8 = (Phase::ActionTreeObject *)a2;
          }
          int v91 = *(unsigned __int8 *)(v83 + 171);
          if (v91 != 255)
          {
            *(void *)long long __src = *(void *)(v83 + 120);
            uint64_t result = Phase::ActionTreeManager::SetFloatParam((Phase::Logger **)v455, (char)v91, (double *)__src, a3, v8);
            if (!result) {
              return result;
            }
            *(_OWORD *)buf = *(_OWORD *)(v85 + 136 * (int)v4 + 8);
            *(void *)&buf[16] = 0x1EF815B19E7DFB31;
            *(void *)&buf[24] = *(void *)__src;
            uint64_t result = Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a4, 9u, buf, 0x20uLL);
            int v8 = (Phase::ActionTreeObject *)a2;
          }
          int v92 = *(unsigned __int8 *)(v83 + 172);
          if (v92 != 255)
          {
            *(void *)long long __src = *(void *)(v83 + 128);
            uint64_t result = Phase::ActionTreeManager::SetFloatParam((Phase::Logger **)v455, (char)v92, (double *)__src, a3, v8);
            if (!result) {
              return result;
            }
            *(_OWORD *)buf = *(_OWORD *)(v85 + 136 * (int)v4 + 8);
            *(void *)&buf[16] = 0xF12C986EFB9BD1AELL;
            *(void *)&buf[24] = *(void *)__src;
            uint64_t result = Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a4, 9u, buf, 0x20uLL);
            int v8 = (Phase::ActionTreeObject *)a2;
          }
          int v93 = *(unsigned __int8 *)(v83 + 173);
          if (v93 != 255)
          {
            *(void *)long long __src = *(void *)(v83 + 136);
            uint64_t result = Phase::ActionTreeManager::SetFloatParam((Phase::Logger **)v455, (char)v93, (double *)__src, a3, v8);
            if (!result) {
              return result;
            }
            *(_OWORD *)buf = *(_OWORD *)(v85 + 136 * (int)v4 + 8);
            *(void *)&buf[16] = 0x1F3CFA678783F49FLL;
            *(void *)&buf[24] = *(void *)__src;
            uint64_t result = Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a4, 9u, buf, 0x20uLL);
            int v8 = (Phase::ActionTreeObject *)a2;
          }
          int v94 = *(unsigned __int8 *)(v83 + 174);
          if (v94 != 255)
          {
            *(void *)long long __src = *(void *)(v83 + 144);
            uint64_t result = Phase::ActionTreeManager::SetFloatParam((Phase::Logger **)v455, (char)v94, (double *)__src, a3, v8);
            if (!result) {
              return result;
            }
            *(_OWORD *)buf = *(_OWORD *)(v85 + 136 * (int)v4 + 8);
            *(void *)&buf[16] = 0x321AF1D82F39218ALL;
            *(void *)&buf[24] = *(void *)__src;
            uint64_t result = Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a4, 9u, buf, 0x20uLL);
            int v8 = (Phase::ActionTreeObject *)a2;
          }
          int v95 = *(unsigned __int8 *)(v83 + 175);
          if (v95 != 255)
          {
            *(void *)long long __src = *(void *)(v83 + 152);
            uint64_t result = Phase::ActionTreeManager::SetFloatParam((Phase::Logger **)v455, (char)v95, (double *)__src, a3, v8);
            if (!result) {
              return result;
            }
            *(_OWORD *)buf = *(_OWORD *)(v85 + 136 * (int)v4 + 8);
            *(void *)&buf[16] = 0x10483E0F24E3A555;
            *(void *)&buf[24] = *(void *)__src;
            uint64_t result = Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a4, 9u, buf, 0x20uLL);
            int v8 = (Phase::ActionTreeObject *)a2;
          }
          int v96 = *(unsigned __int8 *)(v83 + 176);
          if (v96 == 255) {
            goto LABEL_443;
          }
          *(void *)long long __src = *(void *)(v83 + 160);
          uint64_t result = Phase::ActionTreeManager::SetFloatParam((Phase::Logger **)v455, (char)v96, (double *)__src, a3, v8);
          if (!result) {
            return result;
          }
          *(_OWORD *)buf = *(_OWORD *)(v85 + 136 * (int)v4 + 8);
          *(void *)&buf[16] = 0xA19D398D00200576;
          *(void *)&buf[24] = *(void *)__src;
          uint64_t result = Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a4, 9u, buf, 0x20uLL);
          goto LABEL_442;
        }
        MEMORY[0x223C944F0](buf);
        uint64_t v444 = *(void *)buf;
        long long v462 = *(_OWORD *)buf;
        buf[0] = 6;
        BOOL v110 = Phase::ActionTreeObject::LeafNodeInfo::Configure((uint64_t)v86, &v462, buf, (void *)(v83 + 64), v441, (_OWORD *)a2);
        if (!v110)
        {
          v405 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)v110) + 688);
          if (!os_log_type_enabled(v405, OS_LOG_TYPE_ERROR)) {
            return 0;
          }
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "ActionTreeManager.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2835;
          *(_WORD *)&unsigned char buf[18] = 2048;
          *(void *)&buf[20] = v444;
          v399 = "%25s:%-5d Fatal Sound Event data error: could not configure procedure leaf node %llu";
          v406 = v405;
LABEL_598:
          uint32_t v409 = 28;
          goto LABEL_615;
        }
        if (!*v86) {
          goto LABEL_629;
        }
        uint64_t v111 = Phase::ActionTreeObject::FindSubmixIdFromHashName((Phase::ActionTreeObject *)a2, *(void *)(v83 + 8));
        uint64_t v112 = v111;
        uint64_t v114 = v113;
        if (!(v111 | v113))
        {
          v407 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)v111) + 688);
          if (!os_log_type_enabled(v407, OS_LOG_TYPE_ERROR)) {
            return 0;
          }
          uint64_t v408 = *(void *)(v83 + 8);
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "ActionTreeManager.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2844;
          *(_WORD *)&unsigned char buf[18] = 2048;
          *(void *)&buf[20] = v408;
          v399 = "%25s:%-5d Fatal Sound Event data error: Submix %llx not registered.";
          v406 = v407;
          goto LABEL_598;
        }
        if (!*v86
          || *(unsigned char *)(v85 + 136 * (int)v4 + 64) != 6
          || *(void *)(v85 + 136 * (int)v4 + 88) != *(void *)(v83 + 64))
        {
          goto LABEL_629;
        }
        Phase::ActionTreeObject::LeafNodeInfo::SetLeafNodeState((uint64_t)v86, 2u);
        *(void *)(v85 + 136 * (int)v4 + 72) = *(void *)(v83 + 40);
        if (*(unsigned char *)(v83 + 88) == 1)
        {
          *(void *)&v486[0] = 0;
          unint64_t v4 = v85 + 136 * (int)v4;
          *(_OWORD *)buf = *(_OWORD *)(v4 + 8);
          *(void *)&buf[16] = v112;
          *(void *)&buf[24] = v114;
          *(_DWORD *)&unsigned char buf[32] = 6553601;
          char v483 = 1;
          uint64_t v484 = *(void *)(v83 + 16);
          uint64_t v485 = *(void *)(v83 + 24);
          unint64_t v482 = 0xC028000000000000;
          *(_OWORD *)((char *)v486 + 8) = *(_OWORD *)(v83 + 56);
          DWORD2(v486[1]) = *(_DWORD *)(v83 + 72);
          uint64_t v487 = *(void *)(v83 + 80);
          Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a4, 8u, buf, 0x70uLL);
          int v116 = (Phase::Logger *)Phase::ActionTreeManager::WriteLeafNodeUpdateParameters((Phase::Logger **)v455, (Phase::ActionTreeObject *)a2, v449, v83 + 8, a3, a4, v459[1]);
          if (!v116) {
            return 0;
          }
          __int16 v117 = (Phase::Logger *)Phase::Logger::GetInstance(v116);
          int v118 = (os_signpost_id_t *)(v4 + 8);
          if (*((unsigned char *)v117 + 696))
          {
            __int16 v119 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v117)
                                                                                                 + 688)));
            int v120 = v119;
            os_signpost_id_t v121 = *v118;
            if (*v118 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v119))
            {
              *(_DWORD *)long long __src = 134217984;
              *(void *)&__src[4] = v121;
              _os_signpost_emit_with_name_impl(&dword_221E5E000, v120, OS_SIGNPOST_INTERVAL_BEGIN, v121, "Phase_Generator_Prepare", "Generator ID %llu Prepare", __src, 0xCu);
            }
          }
          *(void *)&long long v466 = 0;
          int v122 = *(unsigned __int8 *)(v83 + 168);
          if (v122 == 255)
          {
            *(void *)&long long v466 = *(void *)(v83 + 96);
          }
          else if ((Phase::ActionTreeManager::SetFloatParam((Phase::Logger **)v455, (char)v122, (double *)&v466, a3, (Phase::ActionTreeObject *)a2) & 1) == 0)
          {
            return 0;
          }
          v474 = 0;
          int v179 = *(unsigned __int8 *)(v83 + 169);
          if (v179 == 255)
          {
            v474 = *(Phase::Logger **)(v83 + 104);
          }
          else if ((Phase::ActionTreeManager::SetFloatParam((Phase::Logger **)v455, (char)v179, (double *)&v474, a3, (Phase::ActionTreeObject *)a2) & 1) == 0)
          {
            return 0;
          }
          double v473 = 0.0;
          int v180 = *(unsigned __int8 *)(v83 + 170);
          if (v180 == 255)
          {
            double v473 = *(double *)(v83 + 112);
          }
          else if ((Phase::ActionTreeManager::SetFloatParam((Phase::Logger **)v455, (char)v180, &v473, a3, (Phase::ActionTreeObject *)a2) & 1) == 0)
          {
            return 0;
          }
          double v472 = 0.0;
          int v196 = *(unsigned __int8 *)(v83 + 171);
          if (v196 == 255)
          {
            double v472 = *(double *)(v83 + 120);
          }
          else if ((Phase::ActionTreeManager::SetFloatParam((Phase::Logger **)v455, (char)v196, &v472, a3, (Phase::ActionTreeObject *)a2) & 1) == 0)
          {
            return 0;
          }
          double v471 = 0.0;
          int v197 = *(unsigned __int8 *)(v83 + 172);
          if (v197 == 255)
          {
            double v471 = *(double *)(v83 + 128);
          }
          else if ((Phase::ActionTreeManager::SetFloatParam((Phase::Logger **)v455, (char)v197, &v471, a3, (Phase::ActionTreeObject *)a2) & 1) == 0)
          {
            return 0;
          }
          double v470 = 0.0;
          int v198 = *(unsigned __int8 *)(v83 + 173);
          if (v198 == 255)
          {
            double v470 = *(double *)(v83 + 136);
          }
          else if ((Phase::ActionTreeManager::SetFloatParam((Phase::Logger **)v455, (char)v198, &v470, a3, (Phase::ActionTreeObject *)a2) & 1) == 0)
          {
            return 0;
          }
          double v469 = 0.0;
          int v201 = *(unsigned __int8 *)(v83 + 174);
          if (v201 == 255)
          {
            double v469 = *(double *)(v83 + 144);
          }
          else if ((Phase::ActionTreeManager::SetFloatParam((Phase::Logger **)v455, (char)v201, &v469, a3, (Phase::ActionTreeObject *)a2) & 1) == 0)
          {
            return 0;
          }
          double v468 = 0.0;
          int v202 = *(unsigned __int8 *)(v83 + 175);
          if (v202 == 255)
          {
            double v468 = *(double *)(v83 + 152);
          }
          else if ((Phase::ActionTreeManager::SetFloatParam((Phase::Logger **)v455, (char)v202, &v468, a3, (Phase::ActionTreeObject *)a2) & 1) == 0)
          {
            return 0;
          }
          double v467 = 0.0;
          int v203 = *(unsigned __int8 *)(v83 + 176);
          if (v203 == 255)
          {
            v204 = (double *)(v83 + 160);
          }
          else
          {
            if ((Phase::ActionTreeManager::SetFloatParam((Phase::Logger **)v455, (char)v203, &v467, a3, (Phase::ActionTreeObject *)a2) & 1) == 0)return 0; {
            v204 = &v467;
            }
          }
          uint64_t v205 = *(void *)v204;
          *(_OWORD *)long long __src = *(_OWORD *)v118;
          *(void *)&__src[16] = 0xD5446B03D63B0AC2;
          *(void *)&__src[24] = v466;
          Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a4, 9u, __src, 0x20uLL);
          *(void *)&__src[16] = 0x689B3C6AD0C10930;
          *(void *)&__src[24] = v474;
          Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a4, 9u, __src, 0x20uLL);
          *(void *)&__src[16] = 0x6256579BE092E3DDLL;
          *(double *)&__src[24] = v473;
          Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a4, 9u, __src, 0x20uLL);
          *(void *)&__src[16] = 0x1EF815B19E7DFB31;
          *(double *)&__src[24] = v472;
          Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a4, 9u, __src, 0x20uLL);
          *(void *)&__src[16] = 0xF12C986EFB9BD1AELL;
          *(double *)&__src[24] = v471;
          Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a4, 9u, __src, 0x20uLL);
          *(void *)&__src[16] = 0x1F3CFA678783F49FLL;
          *(double *)&__src[24] = v470;
          Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a4, 9u, __src, 0x20uLL);
          *(void *)&__src[16] = 0x321AF1D82F39218ALL;
          *(double *)&__src[24] = v469;
          Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a4, 9u, __src, 0x20uLL);
          *(void *)&__src[16] = 0x10483E0F24E3A555;
          *(double *)&__src[24] = v468;
          Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a4, 9u, __src, 0x20uLL);
          *(void *)&__src[16] = 0xA19D398D00200576;
          *(void *)&__src[24] = v205;
          uint64_t result = Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a4, 9u, __src, 0x20uLL);
          int v206 = *(unsigned __int8 *)(a2 + 144);
          if ((v206 - 2) < 2) {
            goto LABEL_284;
          }
          if (v206 == 4) {
            goto LABEL_285;
          }
          if (v206 == 8)
          {
LABEL_284:
            if (v206 != 4 && !*(unsigned char *)(a2 + 200)) {
              goto LABEL_442;
            }
LABEL_285:
            if (!Phase::ActionTreeManager::StartPreparedVoice(a2, (uint64_t)v86, a4)) {
              return 0;
            }
            Phase::ActionTreeObject::LeafNodeInfo::SetLeafNodeState((uint64_t)v86, 4u);
            uint64_t result = Phase::Logger::GetInstance(v207);
            if (*(unsigned char *)(result + 696))
            {
              v208 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)result) + 688);
              v209 = v208;
              os_signpost_id_t v210 = *v118;
              if (*v118 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v208))
              {
                *(_DWORD *)long long __src = 134217984;
                *(void *)&__src[4] = v210;
                _os_signpost_emit_with_name_impl(&dword_221E5E000, v209, OS_SIGNPOST_INTERVAL_BEGIN, v210, "Phase_Generator_Start", "Generator ID %llu Start", __src, 0xCu);
              }
            }
          }
LABEL_442:
          int v8 = (Phase::ActionTreeObject *)a2;
          goto LABEL_443;
        }
        v404 = **(id **)(Phase::Logger::GetInstance(v115) + 688);
        if (os_log_type_enabled(v404, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "ActionTreeManager.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2860;
          v399 = "%25s:%-5d Fatal Sound Event data error: Procedure Type is set to None.";
          goto LABEL_614;
        }
        return 0;
      case 11:
        if (*(_DWORD *)(*((void *)v8 + 3) + 40) <= v9)
        {
          id v97 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)result) + 688);
          uint64_t result = os_log_type_enabled(v97, OS_LOG_TYPE_ERROR);
          int v8 = (Phase::ActionTreeObject *)a2;
          if (result)
          {
            *(_DWORD *)buf = 136315394;
            *(void *)&uint8_t buf[4] = "ActionTreeManager.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2271;
            _os_log_impl(&dword_221E5E000, v97, OS_LOG_TYPE_ERROR, "%25s:%-5d Fatal Sound Event data error: Encountered more leafnodes than is allowed", buf, 0x12u);
          }
          goto LABEL_446;
        }
        uint64_t v15 = *((void *)v8 + 7);
        __int16 v16 = (unsigned char *)(v15 + 136 * (int)v9);
        int v17 = v16[24];
        if (!*(unsigned char *)v459)
        {
          if (v17 != 5) {
            goto LABEL_444;
          }
LABEL_155:
          *(_OWORD *)buf = *(_OWORD *)(v15 + 136 * (int)v9 + 8);
          Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a4, 3u, buf, 0x18uLL);
          Phase::ActionTreeObject::LeafNodeInfo::SetLeafNodeState(v15 + 136 * (int)v9, 6u);
          goto LABEL_310;
        }
        if (v17 == 5) {
          goto LABEL_155;
        }
        unint64_t v4 = v461 + v10;
        if (v17 == 4)
        {
          uint64_t result = Phase::ActionTreeManager::WriteLeafNodeUpdateParameters((Phase::Logger **)v455, v8, v9, v4 + 24, a3, a4, v459[1]);
          int v8 = (Phase::ActionTreeObject *)a2;
          if (result) {
            goto LABEL_444;
          }
          goto LABEL_446;
        }
        if (v17 != 1) {
          goto LABEL_444;
        }
        MEMORY[0x223C944F0](buf);
        uint64_t v446 = *(void *)buf;
        long long v462 = *(_OWORD *)buf;
        __src[0] = 5;
        *(void *)buf = 1;
        BOOL v18 = Phase::ActionTreeObject::LeafNodeInfo::Configure(v15 + 136 * (int)v9, &v462, __src, buf, v441, (_OWORD *)a2);
        if (!v18)
        {
          v222 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)v18) + 688);
          uint64_t result = os_log_type_enabled(v222, OS_LOG_TYPE_ERROR);
          if (!result) {
            goto LABEL_363;
          }
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "ActionTreeManager.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2302;
          *(_WORD *)&unsigned char buf[18] = 2048;
          *(void *)&buf[20] = v446;
          uint64_t v25 = v222;
          double v26 = "%25s:%-5d Fatal Sound Event data error: could not configure pull stream leaf node %llu";
          goto LABEL_337;
        }
        if (!*v16) {
          goto LABEL_629;
        }
        uint64_t v19 = Phase::ActionTreeObject::FindSubmixIdFromHashName((Phase::ActionTreeObject *)a2, *(void *)(v4 + 24));
        uint64_t v20 = v19;
        uint64_t v22 = v21;
        if (!(v19 | v21))
        {
          double v23 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)v19) + 688);
          uint64_t result = os_log_type_enabled(v23, OS_LOG_TYPE_ERROR);
          if (!result) {
            goto LABEL_363;
          }
          uint64_t v24 = *(void *)(v4 + 24);
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "ActionTreeManager.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2311;
          *(_WORD *)&unsigned char buf[18] = 2048;
          *(void *)&buf[20] = v24;
          uint64_t v25 = v23;
          double v26 = "%25s:%-5d Fatal Sound Event data error: Submix %llx not registered.";
LABEL_337:
          uint32_t v100 = 28;
          goto LABEL_116;
        }
        if (!*v16 || *(unsigned char *)(v15 + 136 * (int)v9 + 64) != 5 || *(void *)(v15 + 136 * (int)v9 + 88) != 1) {
LABEL_629:
        }
          std::terminate();
        Phase::ActionTreeObject::LeafNodeInfo::SetLeafNodeState(v15 + 136 * (int)v9, 2u);
        uint64_t v243 = v15 + 136 * (int)v9;
        *(void *)(v243 + 72) = *(void *)(v4 + 56);
        *(_OWORD *)buf = *(_OWORD *)(v243 + 8);
        *(void *)&buf[16] = v20;
        *(void *)&buf[24] = v22;
        char v483 = 3;
        uint64_t v484 = 0;
        uint64_t v485 = 0;
        uint64_t v488 = *(void *)(v4 + 32);
        uint64_t v489 = *(void *)(v4 + 40);
        v490[0] = *(unsigned __int8 *)(v4 + 72);
        unint64_t v482 = *(void *)(v4 + 80);
        *(_OWORD *)&v490[1] = *(_OWORD *)(v4 + 8);
        *(_OWORD *)&v490[3] = xmmword_2220A4EC0;
        uint64_t v244 = *(unsigned int *)(v4 + 88);
        *(_DWORD *)&unsigned char buf[32] = *(_DWORD *)(v4 + 88);
        memset(v486, 0, sizeof(v486));
        uint64_t v487 = 0;
        if (*v441) {
          goto LABEL_368;
        }
        v437 = Phase::Controller::TaskManager::GetObjCService<ExternalStreamManager>(*((Phase::Logger **)v455 + 28), 15);
        uint64_t v330 = Phase::UniqueObjectId::CreateNSUUID((Phase::UniqueObjectId *)(v4 + 8));
        *(void *)&long long v466 = 0;
        v433 = (void *)v330;
        uint64_t v331 = [v437 formatForStream:v330 error:&v466];
        v332 = (Phase::Logger *)(id)v466;
        v452 = v332;
        v435 = (void *)v331;
        if (v331)
        {
          v431 = (void *)[objc_alloc(MEMORY[0x263EF9328]) initWithLayoutTag:v244];
          id v333 = objc_alloc(MEMORY[0x263EF9388]);
          [v435 sampleRate];
          v429 = objc_msgSend(v333, "initStandardFormatWithSampleRate:channelLayout:", v431);
          uint64_t v334 = [v429 streamDescription];
          v486[0] = *(_OWORD *)v334;
          v486[1] = *(_OWORD *)(v334 + 16);
          uint64_t v487 = *(void *)(v334 + 32);
          uint64_t v335 = v15 + 136 * (int)v9;
          uint64_t v337 = *(void *)(v335 + 32);
          v336 = (Phase::Controller::StreamRenderer **)(v335 + 32);
          if (v337)
          {
            v338 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)v334) + 688);
            if (os_log_type_enabled(v338, OS_LOG_TYPE_ERROR))
            {
              v339 = *(void **)v4;
              *(_DWORD *)long long __src = 136315650;
              *(void *)&__src[4] = "ActionTreeManager.mm";
              *(_WORD *)&__src[12] = 1024;
              *(_DWORD *)&__src[14] = 2380;
              *(_WORD *)&__src[18] = 2048;
              *(void *)&__src[20] = v339;
              _os_log_impl(&dword_221E5E000, v338, OS_LOG_TYPE_ERROR, "%25s:%-5d Warning: overriding the stream renderer for pull stream %llu", __src, 0x1Cu);
            }
          }
          int v340 = *(unsigned __int8 *)(v4 + 72);
          double v341 = *(double *)(v4 + 80);
          v474 = v452;
          if (v437)
          {
            [v437 createRendererForStream:v433 outputChannelLayout:v244 normalize:v340 != 0 targetLKFS:&v474 error:v341];
            v342 = v474;

            v343 = *(Phase::Controller::StreamRenderer **)__src;
            v452 = v342;
          }
          else
          {
            v343 = 0;
          }
          *(void *)long long __src = 0;
          std::unique_ptr<Phase::Controller::StreamRenderer>::reset[abi:ne180100](v336, v343);
          std::unique_ptr<Phase::Controller::StreamRenderer>::reset[abi:ne180100]((Phase::Controller::StreamRenderer **)__src, 0);
          if (*v336)
          {
            v361 = v429;
            v362 = (Phase::Controller::StreamRenderer *)Phase::Controller::StreamRenderer::Prepare(*v336);
            if (v362 && (v362 = *v336, *((void *)*v336 + 6)) && *((unsigned char *)v362 + 136))
            {
              v363 = (Phase::Logger *)Phase::Controller::StreamRenderer::Start(v362);
              if (v363)
              {
                int v355 = 0;
LABEL_536:

                goto LABEL_537;
              }
              v397 = **(id **)(Phase::Logger::GetInstance(v363) + 688);
              v361 = v429;
              if (os_log_type_enabled(v397, OS_LOG_TYPE_ERROR))
              {
                v398 = *(void **)v4;
                *(_DWORD *)long long __src = 136315650;
                *(void *)&__src[4] = "ActionTreeManager.mm";
                *(_WORD *)&__src[12] = 1024;
                *(_DWORD *)&__src[14] = 2408;
                *(_WORD *)&__src[18] = 2048;
                *(void *)&__src[20] = v398;
                v365 = v397;
                v366 = "%25s:%-5d Failed to start stream renderer for pull stream %llu";
                uint32_t v367 = 28;
LABEL_534:
                _os_log_impl(&dword_221E5E000, v365, OS_LOG_TYPE_ERROR, v366, __src, v367);
              }
            }
            else
            {
              v364 = **(id **)(Phase::Logger::GetInstance(v362) + 688);
              v361 = v429;
              if (os_log_type_enabled(v364, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)long long __src = 136315394;
                *(void *)&__src[4] = "ActionTreeManager.mm";
                *(_WORD *)&__src[12] = 1024;
                *(_DWORD *)&__src[14] = 2400;
                v365 = v364;
                v366 = "%25s:%-5d Failed to prepare stream renderer!";
                uint32_t v367 = 18;
                goto LABEL_534;
              }
            }
          }
          else
          {
            v368 = **(id **)(Phase::Logger::GetInstance(0) + 688);
            v361 = v429;
            if (os_log_type_enabled(v368, OS_LOG_TYPE_ERROR))
            {
              v369 = *(void **)v4;
              *(_DWORD *)long long __src = 136315906;
              *(void *)&__src[4] = "ActionTreeManager.mm";
              *(_WORD *)&__src[12] = 1024;
              *(_DWORD *)&__src[14] = 2392;
              *(_WORD *)&__src[18] = 2048;
              *(void *)&__src[20] = v369;
              *(_WORD *)&__src[28] = 2112;
              *(void *)&__src[30] = v452;
              v365 = v368;
              v366 = "%25s:%-5d Failed to create stream renderer for pull stream %llu (%@)";
              uint32_t v367 = 38;
              goto LABEL_534;
            }
          }
          int v355 = 1;
          goto LABEL_536;
        }
        v354 = **(id **)(Phase::Logger::GetInstance(v332) + 688);
        if (os_log_type_enabled(v354, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long __src = 136315906;
          *(void *)&__src[4] = "ActionTreeManager.mm";
          *(_WORD *)&__src[12] = 1024;
          *(_DWORD *)&__src[14] = 2360;
          *(_WORD *)&__src[18] = 2112;
          *(void *)&__src[20] = v433;
          *(_WORD *)&__src[28] = 2112;
          *(void *)&__src[30] = v452;
          _os_log_impl(&dword_221E5E000, v354, OS_LOG_TYPE_ERROR, "%25s:%-5d Fatal Sound Event data error: could not get stream format for stream uuid %@ (%@)", __src, 0x26u);
        }
        int v355 = 1;
LABEL_537:

        if (v355) {
          goto LABEL_363;
        }
LABEL_368:
        Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a4, 7u, buf, 0xA8uLL);
        uint64_t result = Phase::ActionTreeManager::WriteLeafNodeUpdateParameters((Phase::Logger **)v455, (Phase::ActionTreeObject *)a2, v9, v4 + 24, a3, a4, v459[1]);
        if (!result) {
          goto LABEL_363;
        }
        v245 = (uint64_t *)(v15 + 136 * (int)v9 + 8);
        uint64_t v246 = *(void *)(v15 + 136 * (int)v9 + 32);
        if (v246) {
          caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::_addOrReplace(v439, *v245, *(void *)(v15 + 136 * (int)v9 + 16), v246);
        }
        uint64_t result = Phase::Logger::GetInstance((Phase::Logger *)result);
        if (*(unsigned char *)(result + 696))
        {
          v247 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance((Phase::Logger *)result)
                                                                                               + 688)));
          v248 = v247;
          os_signpost_id_t v249 = *v245;
          if (v249 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v247))
          {
            *(_DWORD *)long long __src = 134217984;
            *(void *)&__src[4] = v249;
            _os_signpost_emit_with_name_impl(&dword_221E5E000, v248, OS_SIGNPOST_INTERVAL_BEGIN, v249, "Phase_Generator_Prepare", "Generator ID %llu Prepare", __src, 0xCu);
          }
        }
        goto LABEL_310;
      case 12:
        if (*(_DWORD *)(*((void *)v8 + 3) + 40) <= v9)
        {
          uint64_t v98 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)result) + 688);
          uint64_t result = os_log_type_enabled(v98, OS_LOG_TYPE_ERROR);
          if (!result) {
            goto LABEL_363;
          }
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "ActionTreeManager.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2542;
          uint64_t v25 = v98;
          double v26 = "%25s:%-5d Fatal Sound Event data error: Encountered more leafnodes than is allowed";
          goto LABEL_115;
        }
        uint64_t v31 = v9;
        unint64_t v4 = (int)v9;
        uint64_t v32 = *((void *)v8 + 7);
        uint64_t v33 = v31;
        uint64_t v34 = v32 + 136 * (int)v31;
        int v35 = *(unsigned __int8 *)(v34 + 24);
        if (!*(unsigned char *)v459)
        {
          if (v35 != 5) {
            goto LABEL_362;
          }
LABEL_157:
          *(_OWORD *)buf = *(_OWORD *)(v32 + 136 * (int)v4 + 8);
          Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a4, 3u, buf, 0x18uLL);
          Phase::ActionTreeObject::LeafNodeInfo::SetLeafNodeState(v34, 6u);
          goto LABEL_362;
        }
        if (v35 == 5) {
          goto LABEL_157;
        }
        __int16 v36 = (uint64_t *)(v461 + v10);
        if (v35 == 4) {
          goto LABEL_231;
        }
        if (v35 != 1) {
          goto LABEL_362;
        }
        v447 = Phase::Controller::TaskManager::GetObjCService<PHASEAssetRegistry>(*((Phase::Logger **)v455 + 28), 1);
        v442 = objc_msgSend(NSString, "stringWithCString:encoding:", objc_msgSend(v447, "getString:", *v36), 4);
        id WeakRetained = objc_loadWeakRetained(location);
        uint64_t v38 = [WeakRetained pullStreamNodes];
        long long v39 = [v38 objectForKeyedSubscript:v442];

        if ((Phase::ActionTreeManager::ConfigureStreamNode((uint64_t)v455, v34, v39, 4) & 1) == 0) {
          goto LABEL_360;
        }
        char v40 = v36 + 1;
        uint64_t v41 = Phase::ActionTreeObject::FindSubmixIdFromHashName((Phase::ActionTreeObject *)a2, v36[1]);
        if (!(v41 | v42))
        {
          uint64_t v43 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)v41) + 688);
          if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
          {
            uint64_t v44 = *v40;
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = "ActionTreeManager.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2611;
            *(_WORD *)&unsigned char buf[18] = 2048;
            *(void *)&buf[20] = v44;
            _os_log_impl(&dword_221E5E000, v43, OS_LOG_TYPE_ERROR, "%25s:%-5d Fatal Sound Event data error: Submix %llx not registered.", buf, 0x1Cu);
          }
          goto LABEL_360;
        }
        uint64_t v225 = v32 + 136 * (int)v4;
        *(void *)(v225 + 72) = v36[5];
        *(_DWORD *)&unsigned char buf[32] = 6553601;
        v490[1] = 0;
        v490[2] = 0;
        *(_OWORD *)buf = *(_OWORD *)(v225 + 8);
        *(void *)&buf[16] = v41;
        *(void *)&buf[24] = v42;
        char v483 = 4;
        uint64_t v484 = 0;
        uint64_t v485 = 0;
        uint64_t v488 = v36[2];
        uint64_t v489 = v36[3];
        v490[0] = *((unsigned __int8 *)v36 + 56);
        unint64_t v482 = v36[8];
        *(_OWORD *)&v490[3] = xmmword_2220A4EC0;
        v226 = [v39 format];
        v227 = [v226 channelLayout];
        *(_DWORD *)&unsigned char buf[32] = [v227 layoutTag];

        v228 = [v39 format];
        uint64_t v229 = [v228 streamDescription];
        v486[0] = *(_OWORD *)v229;
        v486[1] = *(_OWORD *)(v229 + 16);
        uint64_t v487 = *(void *)(v229 + 32);

        Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a4, 7u, buf, 0xA8uLL);
        if ((Phase::ActionTreeManager::WriteLeafNodeUpdateParameters((Phase::Logger **)v455, (Phase::ActionTreeObject *)a2, v33, (uint64_t)v40, a3, a4, v459[1]) & 1) == 0)goto LABEL_360; {
        Phase::ActionTreeObject::LeafNodeInfo::SetLeafNodeState(v34, 2u);
        }
        v231 = (Phase::Logger *)Phase::Logger::GetInstance(v230);
        v232 = (uint64_t *)(v32 + 136 * (int)v4 + 8);
        if (*((unsigned char *)v231 + 696))
        {
          v233 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v231)
                                                                                               + 688)));
          v234 = v233;
          os_signpost_id_t v235 = *v232;
          if ((unint64_t)(*v232 - 1) <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v233))
          {
            *(_DWORD *)long long __src = 134217984;
            *(void *)&__src[4] = v235;
            _os_signpost_emit_with_name_impl(&dword_221E5E000, v234, OS_SIGNPOST_INTERVAL_BEGIN, v235, "Phase_Generator_Prepare", "Generator ID %llu Prepare", __src, 0xCu);
          }
        }
        caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::_addOrReplace(v439, *v232, *(void *)(v32 + 136 * (int)v4 + 16), *(void *)(v32 + 136 * (int)v4 + 32));
        int v236 = *(unsigned __int8 *)(a2 + 144);
        if ((v236 - 2) < 2) {
          goto LABEL_351;
        }
        if (v236 != 4)
        {
          if (v236 != 8) {
            goto LABEL_359;
          }
LABEL_351:
          if (v236 != 4 && !*(unsigned char *)(a2 + 200)) {
            goto LABEL_359;
          }
        }
        if (Phase::ActionTreeManager::StartPreparedVoice(a2, v34, a4))
        {
          Phase::ActionTreeObject::LeafNodeInfo::SetLeafNodeState(v34, 4u);
          v238 = (Phase::Logger *)Phase::Logger::GetInstance(v237);
          if (*((unsigned char *)v238 + 696))
          {
            v239 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v238)
                                                                                                 + 688)));
            v240 = v239;
            os_signpost_id_t v241 = *v232;
            if ((unint64_t)(*v232 - 1) <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v239))
            {
              *(_DWORD *)long long __src = 134217984;
              *(void *)&__src[4] = v241;
              _os_signpost_emit_with_name_impl(&dword_221E5E000, v240, OS_SIGNPOST_INTERVAL_BEGIN, v241, "Phase_Generator_Start", "Generator ID %llu Start", __src, 0xCu);
            }
          }
LABEL_359:
          int v242 = 2;
          goto LABEL_361;
        }
LABEL_360:
        int v242 = 1;
LABEL_361:

        if (v242 != 2) {
          goto LABEL_481;
        }
LABEL_362:
        uint64_t v9 = (v33 + 1);
        v10 += *(unsigned int *)(v11 + 4);
        goto LABEL_363;
      default:
        v404 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)result) + 688);
        uint64_t result = os_log_type_enabled(v404, OS_LOG_TYPE_ERROR);
        if (!result) {
          return result;
        }
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "ActionTreeManager.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3698;
        v399 = "%25s:%-5d Fatal Sound Event data error: bad message encountered in message stream";
        goto LABEL_614;
    }
  }
}

void sub_221E713D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void Phase::ActionTreeManager::HandleParamError(Phase::Logger *a1, int a2, uint64_t a3, int a4)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  Phase::Controller::TaskManager::GetObjCService<PHASEAssetRegistry>(a1, 1);
  uint64_t v7 = (Phase::Logger *)objc_claimAutoreleasedReturnValue();
  int v8 = v7;
  if (a2 == 1)
  {
    uint64_t v9 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v7)
                                                                                       + 688)));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = [(Phase::Logger *)v8 getString:**(void **)(a3 + 24)];
      int v13 = 136315906;
      int v14 = "ActionTreeManager.mm";
      __int16 v15 = 1024;
      int v16 = 5560;
      __int16 v17 = 2080;
      uint64_t v18 = v12;
      __int16 v19 = 1024;
      int v20 = a4;
      uint64_t v11 = "%25s:%-5d Action tree: %s tried to use a metaparameter with the wrong type, index %d";
      goto LABEL_7;
    }
LABEL_8:

    goto LABEL_9;
  }
  if (!a2)
  {
    uint64_t v9 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v7)
                                                                                       + 688)));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = [(Phase::Logger *)v8 getString:**(void **)(a3 + 24)];
      int v13 = 136315906;
      int v14 = "ActionTreeManager.mm";
      __int16 v15 = 1024;
      int v16 = 5554;
      __int16 v17 = 2080;
      uint64_t v18 = v10;
      __int16 v19 = 1024;
      int v20 = a4;
      uint64_t v11 = "%25s:%-5d Action tree: %s tried to use an invalid metaparameter index %d";
LABEL_7:
      _os_log_impl(&dword_221E5E000, v9, OS_LOG_TYPE_ERROR, v11, (uint8_t *)&v13, 0x22u);
      goto LABEL_8;
    }
    goto LABEL_8;
  }
LABEL_9:
}

void sub_221E717E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL Phase::ActionTreeManager::UpdateSpatialPipeline(BOOL this, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, Phase::ActionTreeObject *a6, Phase::ActionTreeGatheredParams *a7)
{
  if (*(_DWORD *)(a2 + 2548))
  {
    int v13 = (Phase::Logger **)this;
    unint64_t v14 = 0;
    __int16 v15 = (double *)(a2 + 2584);
    do
    {
      double v19 = *(v15 - 3);
      Phase::ActionTreeManager::ScaleFloatParam(v13, *(char *)v15, &v19, a7, a6);
      __src[0] = a3;
      __src[1] = a4;
      int v17 = *((_DWORD *)v15 - 8);
      double v18 = v19;
      this = Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a5, 0xDu, __src, 0x20uLL);
      ++v14;
      v15 += 53;
    }
    while (v14 < *(unsigned int *)(a2 + 2548));
  }
  return this;
}

uint64_t Phase::ActionTreeManager::DestroySubmixes(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 24);
  if (*(_DWORD *)(v2 + 96))
  {
    uint64_t v4 = result;
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    do
    {
      uint64_t v7 = *(void *)(v4 + 80);
      if (*(unsigned char *)(v7 + v5))
      {
        *(unsigned char *)(v7 + v5) = 0;
        long long v8 = *(_OWORD *)(v7 + v5 + 8);
        uint64_t result = Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a2, 0x14u, &v8, 0x10uLL);
        uint64_t v2 = *(void *)(v4 + 24);
      }
      ++v6;
      v5 += 96;
    }
    while (v6 < *(unsigned int *)(v2 + 96));
  }
  return result;
}

uint64_t Phase::ActionTreeManager::StartPreparedVoices(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (*(_DWORD *)(v2 + 40))
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    do
    {
      uint64_t v7 = *(void *)(a1 + 56) + v5;
      if ((*(unsigned char *)(v7 + 24) & 0xFE) == 2)
      {
        uint64_t result = Phase::ActionTreeManager::StartPreparedVoice(a1, v7, a2);
        if (!result) {
          return result;
        }
        uint64_t v2 = *(void *)(a1 + 24);
      }
      ++v6;
      v5 += 136;
    }
    while (v6 < *(unsigned int *)(v2 + 40));
  }
  return 1;
}

BOOL Phase::ActionTreeManager::ExecuteTree(uint64_t this, Phase::ActionTreeObject *a2, void *a3, double a4)
{
  unint64_t v6 = (Phase::ActionTreeManager *)this;
  uint64_t v99 = *MEMORY[0x263EF8340];
  if (a4 > 0.0)
  {
    long long v8 = (void *)*((void *)a2 + 4);
    for (uint64_t i = (void *)*((void *)a2 + 5); v8 != i; v8 += 8)
    {
      if (*(_DWORD *)(*v8 + 12) == 1)
      {
        Phase::Fader<double>::Update((uint64_t)(v8 + 1), a4);
        v8[7] = v8[6];
        uint64_t i = (void *)*((void *)a2 + 5);
      }
    }
  }
  uint64_t v86 = a3;
  uint64_t v10 = *((void *)a2 + 3);
  if (*(_DWORD *)(v10 + 8))
  {
    unint64_t v11 = 0;
    do
    {
      this = Phase::ActionTreeManager::GetParamValue((uint64_t)v6, *(void *)(*(void *)(*((void *)a2 + 3) + 16) + 8 * v11), (MetaParamValue *)(*((void *)a2 + 28) + 8 * v11), (_DWORD *)(*((void *)a2 + 31) + 4 * v11), a2);
      if ((this & 1) == 0) {
        return 0;
      }
      ++v11;
    }
    while (v11 < *(unsigned int *)(v10 + 8));
  }
  unint64_t v12 = *(unsigned int *)(v10 + 24);
  if (v12)
  {
    unint64_t v13 = 0;
    uint64_t v14 = *((void *)a2 + 3);
    do
    {
      if (*(_DWORD *)(v14 + 96))
      {
        uint64_t v15 = 0;
        uint64_t v16 = 0;
        unint64_t v17 = 0;
        uint64_t v18 = *(void *)(*(void *)(v14 + 32) + 8 * v13);
        do
        {
          if (*(void *)(*(void *)(v14 + 104) + v15) == v18)
          {
            uint64_t v19 = *((void *)a2 + 10) + v16;
            int v20 = *(unsigned __int8 *)(v19 + 80);
            if (v20 == 2)
            {
              uint64_t v21 = *(void *)(v19 + 88);
              *(unsigned char *)(v19 + 80) = 0;
              *(void *)(*((void *)a2 + 34) + 8 * v17) = v21;
              uint64_t v14 = *((void *)a2 + 3);
            }
            else if (v20 == 3)
            {
              return 0;
            }
          }
          ++v17;
          v16 += 96;
          v15 += 5944;
        }
        while (v17 < *(unsigned int *)(v14 + 96));
        unint64_t v12 = *(unsigned int *)(v10 + 24);
      }
      ++v13;
    }
    while (v13 < v12);
  }
  uint64_t v22 = *((void *)a2 + 7);
  uint64_t v23 = *((void *)a2 + 8);
  while (v22 != v23)
  {
    uint64_t v24 = *((void *)v6 + 29);
    *(void *)buf = *(void *)(v22 + 72);
    this = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned long long,int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,int>>>::find<unsigned long long>((void *)(v24 + 40), (unint64_t *)buf);
    if (this) {
      int v25 = *(_DWORD *)(this + 456);
    }
    else {
      int v25 = 0;
    }
    if (*(_DWORD *)(v22 + 80) != v25) {
      *(_DWORD *)(v22 + 80) = v25;
    }
    v22 += 136;
  }
  int v26 = -2128831035;
  uint64_t v27 = (char *)*((void *)a2 + 28);
  int v28 = -2128831035;
  for (uint64_t j = *((void *)a2 + 29) - (void)v27; j; --j)
  {
    int v30 = *v27++;
    int v28 = 16777619 * (v28 ^ v30);
  }
  uint64_t v31 = (char *)*((void *)a2 + 31);
  int v32 = -2128831035;
  uint64_t v33 = *((void *)a2 + 32) - (void)v31;
  for (k = v86; v33; --v33)
  {
    int v35 = *v31++;
    int v32 = 16777619 * (v32 ^ v35);
  }
  __int16 v36 = (Phase::ActionTreeObject *)((char *)a2 + 216);
  __int16 v37 = (char *)*((void *)a2 + 34);
  for (uint64_t m = *((void *)a2 + 35) - (void)v37; m; --m)
  {
    int v39 = *v37++;
    int v26 = 16777619 * (v26 ^ v39);
  }
  *((void *)a2 + 26) = (v32 + v28 + v26);
  uint64_t v40 = *((void *)a2 + 3);
  if (!*(_DWORD *)(v40 + 96))
  {
LABEL_60:
    uint64_t v81 = Phase::ActionTreeManager::ProcessNodes(v6, (uint64_t)a2, v36, k);
    if (v81) {
      return 1;
    }
    uint64_t v83 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)v81) + 688);
    BOOL result = os_log_type_enabled(v83, OS_LOG_TYPE_ERROR);
    if (result)
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "ActionTreeManager.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 4084;
      int v84 = "%25s:%-5d Fatal Sound Event data error: Error executing action tree nodes";
      goto LABEL_68;
    }
    return result;
  }
  unint64_t v41 = 0;
  uint64_t v42 = 2584;
  while (1)
  {
    uint64_t v43 = *(void *)(v40 + 104);
    uint64_t v44 = *(void *)(v43 + 5944 * v41 + 8);
    if (v44 == 3)
    {
      uint64_t v53 = *((void *)a2 + 10);
      uint64_t v54 = (unsigned char *)(v53 + 96 * v41);
      if (*v54)
      {
        *(_OWORD *)buf = *(_OWORD *)(v53 + 96 * v41 + 8);
        uint64_t v55 = v43 + 5944 * v41;
        *(void *)&long long __src = *(void *)(v55 + 16);
        Phase::ActionTreeManager::ScaleFloatParam((Phase::Logger **)v6, *(char *)(v55 + 26), (double *)&__src, v36, a2);
        *(void *)&buf[16] = 0xB5767F7E05AD941ELL;
        *(void *)&buf[24] = __src;
        p_src = (long long *)buf;
LABEL_57:
        long long v61 = k;
        unsigned int v62 = 18;
        goto LABEL_58;
      }
      *uint64_t v54 = 1;
      *(_OWORD *)buf = *(_OWORD *)(v53 + 96 * v41 + 8);
      *(_OWORD *)&buf[24] = *(_OWORD *)a2;
      *(_DWORD *)&unsigned char buf[40] = *((_DWORD *)a2 + 81);
      uint64_t v76 = v43 + 5944 * v41;
      *(_DWORD *)&buf[16] = *(_DWORD *)(v76 + 32);
      uint64_t v77 = k;
      unsigned int v78 = 17;
      size_t v79 = 48;
LABEL_56:
      Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(v77, v78, buf, v79);
      *(void *)&long long v90 = *(void *)(v76 + 16);
      Phase::ActionTreeManager::ScaleFloatParam((Phase::Logger **)v6, *(char *)(v76 + 26), (double *)&v90, v36, a2);
      *(void *)&long long v89 = 0xB5767F7E05AD941ELL;
      long long __src = *(_OWORD *)buf;
      *((void *)&v89 + 1) = v90;
      p_src = &__src;
      goto LABEL_57;
    }
    if (v44 == 2)
    {
      uint64_t v57 = *((void *)a2 + 10);
      v58 = (unsigned char *)(v57 + 96 * v41);
      if (*v58)
      {
        long long v90 = *(_OWORD *)(v57 + 96 * v41 + 8);
        uint64_t v59 = v43 + 5944 * v41;
        double v87 = *(double *)(v59 + 16);
        Phase::ActionTreeManager::ScaleFloatParam((Phase::Logger **)v6, *(char *)(v59 + 26), &v87, v36, a2);
        *(void *)&buf[16] = 0xB5767F7E05AD941ELL;
        *(_OWORD *)buf = v90;
        *(double *)&buf[24] = v87;
        Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(k, 0x12u, buf, 0x20uLL);
        long long v60 = *(_OWORD *)(*((void *)a2 + 10) + 96 * v41 + 64);
        long long __src = v90;
        long long v89 = v60;
        p_src = &__src;
        long long v61 = k;
        unsigned int v62 = 19;
LABEL_58:
        this = Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(v61, v62, p_src, 0x20uLL);
        goto LABEL_59;
      }
      unsigned char *v58 = 1;
      uint64_t v80 = v57 + 96 * v41;
      *(_OWORD *)buf = *(_OWORD *)(v80 + 8);
      long long v92 = *(_OWORD *)a2;
      int v93 = *((_DWORD *)a2 + 81);
      *(void *)&buf[16] = *(void *)(v80 + 32);
      *(_OWORD *)&buf[24] = *(_OWORD *)(v80 + 64);
      uint64_t v76 = v43 + 5944 * v41;
      *(_DWORD *)&unsigned char buf[40] = *(_DWORD *)(v76 + 32);
      uint64_t v77 = k;
      unsigned int v78 = 16;
      size_t v79 = 72;
      goto LABEL_56;
    }
    if (v44 != 1) {
      break;
    }
    uint64_t v45 = *((void *)a2 + 10);
    uint64_t v46 = (unsigned char *)(v45 + 96 * v41);
    if (*v46)
    {
      uint64_t v47 = v45 + 96 * v41;
      int v48 = v36;
      uint64_t v49 = *(void *)(v47 + 8);
      uint64_t v50 = *(void *)(v47 + 16);
      uint64_t v51 = v43 + 5944 * v41;
      *(void *)&long long __src = *(void *)(v51 + 16);
      Phase::ActionTreeManager::ScaleFloatParam((Phase::Logger **)v6, *(char *)(v51 + 26), (double *)&__src, v48, a2);
      *(void *)&buf[8] = v50;
      *(void *)&buf[16] = 0xB5767F7E05AD941ELL;
      *(void *)buf = v49;
      *(void *)&buf[24] = __src;
      Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(k, 0x12u, buf, 0x20uLL);
      uint64_t v52 = v49;
      __int16 v36 = v48;
      this = Phase::ActionTreeManager::UpdateSpatialPipeline((BOOL)v6, v43 + 5944 * v41, v52, v50, k, a2, v48);
    }
    else
    {
      uint64_t v63 = 0;
      *uint64_t v46 = 1;
      do
      {
        long long v64 = &buf[v63];
        *((_DWORD *)v64 + 16) = 0;
        *((void *)v64 + 9) = 0x3FF0000000000000;
        v64[80] = 0;
        v63 += 24;
      }
      while (v63 != 384);
      uint64_t v65 = v45 + 96 * v41;
      *(_OWORD *)buf = *(_OWORD *)(v65 + 8);
      long long v97 = *(_OWORD *)a2;
      int v98 = *((_DWORD *)a2 + 81);
      *(int8x16_t *)&buf[16] = vextq_s8(*(int8x16_t *)(v65 + 24), *(int8x16_t *)(v65 + 24), 8uLL);
      *(int8x16_t *)&unsigned char buf[32] = vextq_s8(*(int8x16_t *)(v65 + 40), *(int8x16_t *)(v65 + 40), 8uLL);
      *(void *)&long long v92 = *(void *)(v65 + 56);
      uint64_t v66 = v43 + 5944 * v41;
      uint64_t v67 = (Phase::Logger *)memcpy(v95, (const void *)(v66 + 32), sizeof(v95));
      long long v96 = *(_OWORD *)(v66 + 2464);
      unsigned int v68 = *(_DWORD *)(v66 + 2548);
      if (v68 > 0x10) {
        goto LABEL_66;
      }
      DWORD2(v92) = *(_DWORD *)(v66 + 2548);
      uint64_t v69 = (Phase::Logger **)v6;
      v70 = v36;
      if (v68)
      {
        unint64_t v71 = 0;
        int v72 = (unsigned int *)(v66 + 2548);
        int v73 = (char *)(v43 + v42);
        unint64_t v74 = &v94;
        do
        {
          *((_DWORD *)v74 - 4) = *((_DWORD *)v73 - 8);
          *(v74 - 1) = *((void *)v73 - 3);
          Phase::ActionTreeManager::ScaleFloatParam(v69, *v73, (double *)v74 - 1, v70, a2);
          *(unsigned char *)unint64_t v74 = 1;
          v74 += 3;
          ++v71;
          v73 += 424;
        }
        while (v71 < *v72);
      }
      k = v86;
      Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(v86, 0xFu, buf, 0x388uLL);
      uint64_t v75 = v43 + 5944 * v41;
      *(void *)&long long v90 = *(void *)(v75 + 16);
      Phase::ActionTreeManager::ScaleFloatParam(v69, *(char *)(v75 + 26), (double *)&v90, v70, a2);
      *(void *)&long long v89 = 0xB5767F7E05AD941ELL;
      long long __src = *(_OWORD *)buf;
      *((void *)&v89 + 1) = v90;
      Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(v86, 0x12u, &__src, 0x20uLL);
      this = Phase::ActionTreeManager::UpdateSpatialPipeline((BOOL)v69, v43 + 5944 * v41, *(uint64_t *)buf, *(uint64_t *)&buf[8], v86, a2, v70);
      __int16 v36 = v70;
      unint64_t v6 = (Phase::ActionTreeManager *)v69;
    }
LABEL_59:
    ++v41;
    uint64_t v40 = *((void *)a2 + 3);
    v42 += 5944;
    if (v41 >= *(unsigned int *)(v40 + 96)) {
      goto LABEL_60;
    }
  }
  uint64_t v85 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)this) + 688);
  uint64_t v67 = (Phase::Logger *)os_log_type_enabled(v85, OS_LOG_TYPE_ERROR);
  if (v67)
  {
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = "ActionTreeManager.mm";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 3975;
    _os_log_impl(&dword_221E5E000, v85, OS_LOG_TYPE_ERROR, "%25s:%-5d Fatal Sound Event data error: Bad submix type in action tree", buf, 0x12u);
  }
LABEL_66:
  uint64_t v83 = **(id **)(Phase::Logger::GetInstance(v67) + 688);
  BOOL result = os_log_type_enabled(v83, OS_LOG_TYPE_ERROR);
  if (result)
  {
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = "ActionTreeManager.mm";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 4078;
    int v84 = "%25s:%-5d Fatal Sound Event data error: Error updating submixes";
LABEL_68:
    _os_log_impl(&dword_221E5E000, v83, OS_LOG_TYPE_ERROR, v84, buf, 0x12u);
    return 0;
  }
  return result;
}

void Phase::ActionTreeManager::AllocateActionTreeObject(PHASESoundEventNodeAsset *a1@<X1>, PHASESoundEvent *a2@<X2>, void *a3@<X8>)
{
  uint64_t v7 = a1;
  unint64_t v6 = a2;
  std::allocate_shared[abi:ne180100]<Phase::ActionTreeObject,std::allocator<Phase::ActionTreeObject>,PHASESoundEventNodeAsset * {__strong}&,PHASESoundEvent * {__strong}&,void>(&v7, &v6, a3);
}

void sub_221E722FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

uint64_t Phase::ActionTreeManager::RegisterActionTreeInstance(uint64_t a1, void *a2)
{
  uint64_t v4 = 0;
  uint64_t v65 = *MEMORY[0x263EF8340];
  uint64_t v5 = *a2;
  unint64_t v6 = 0xCBF29CE484222325;
  do
    unint64_t v6 = 0x100000001B3 * (v6 ^ *(char *)(v5 + v4++));
  while (v4 != 16);
  unint64_t v7 = *(void *)(a1 + 48);
  if (!v7) {
    goto LABEL_24;
  }
  uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] > 1uLL)
  {
    unint64_t v2 = v6;
    if (v6 >= v7) {
      unint64_t v2 = v6 % v7;
    }
  }
  else
  {
    unint64_t v2 = (v7 - 1) & v6;
  }
  uint64_t v9 = *(void ***)(*(void *)(a1 + 40) + 8 * v2);
  if (!v9 || (uint64_t v10 = *v9) == 0)
  {
LABEL_24:
    unint64_t v13 = (void *)(a1 + 56);
    uint64_t v10 = operator new(0x30uLL);
    *(void *)uint64_t v10 = 0;
    *((void *)v10 + 1) = v6;
    *((_OWORD *)v10 + 1) = *(_OWORD *)v5;
    *((void *)v10 + 4) = 0;
    *((void *)v10 + 5) = 0;
    float v14 = (float)(unint64_t)(*(void *)(a1 + 64) + 1);
    float v15 = *(float *)(a1 + 72);
    if (v7 && (float)(v15 * (float)v7) >= v14)
    {
LABEL_70:
      uint64_t v32 = *(void *)(a1 + 40);
      uint64_t v33 = *(void **)(v32 + 8 * v2);
      if (v33)
      {
        *(void *)uint64_t v10 = *v33;
        uint64_t v55 = a2;
      }
      else
      {
        *(void *)uint64_t v10 = *v13;
        void *v13 = v10;
        *(void *)(v32 + 8 * v2) = v13;
        uint64_t v55 = a2;
        if (!*(void *)v10)
        {
LABEL_79:
          ++*(void *)(a1 + 64);
          uint64_t v5 = *v55;
          goto LABEL_80;
        }
        unint64_t v34 = *(void *)(*(void *)v10 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v34 >= v7) {
            v34 %= v7;
          }
        }
        else
        {
          v34 &= v7 - 1;
        }
        uint64_t v33 = (void *)(*(void *)(a1 + 40) + 8 * v34);
      }
      *uint64_t v33 = v10;
      goto LABEL_79;
    }
    BOOL v16 = 1;
    if (v7 >= 3) {
      BOOL v16 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v7);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      int8x8_t prime = (int8x8_t)v18;
    }
    else {
      int8x8_t prime = (int8x8_t)v17;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v7 = *(void *)(a1 + 48);
    }
    if (*(void *)&prime > v7) {
      goto LABEL_36;
    }
    if (*(void *)&prime < v7)
    {
      unint64_t v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 64) / *(float *)(a1 + 72));
      if (v7 < 3 || (uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        unint64_t v26 = std::__next_prime(v26);
      }
      else
      {
        uint64_t v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2) {
          unint64_t v26 = v28;
        }
      }
      if (*(void *)&prime <= v26) {
        int8x8_t prime = (int8x8_t)v26;
      }
      if (*(void *)&prime >= v7)
      {
        unint64_t v7 = *(void *)(a1 + 48);
      }
      else
      {
        if (prime)
        {
LABEL_36:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          int v20 = operator new(8 * *(void *)&prime);
          uint64_t v21 = *(void **)(a1 + 40);
          *(void *)(a1 + 40) = v20;
          if (v21) {
            operator delete(v21);
          }
          uint64_t v22 = 0;
          *(int8x8_t *)(a1 + 48) = prime;
          do
            *(void *)(*(void *)(a1 + 40) + 8 * v22++) = 0;
          while (*(void *)&prime != v22);
          uint64_t v23 = (void *)*v13;
          if (*v13)
          {
            unint64_t v24 = v23[1];
            uint8x8_t v25 = (uint8x8_t)vcnt_s8(prime);
            v25.i16[0] = vaddlv_u8(v25);
            if (v25.u32[0] > 1uLL)
            {
              if (v24 >= *(void *)&prime) {
                v24 %= *(void *)&prime;
              }
            }
            else
            {
              v24 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)(a1 + 40) + 8 * v24) = v13;
            unint64_t v29 = (void *)*v23;
            if (*v23)
            {
              do
              {
                unint64_t v30 = v29[1];
                if (v25.u32[0] > 1uLL)
                {
                  if (v30 >= *(void *)&prime) {
                    v30 %= *(void *)&prime;
                  }
                }
                else
                {
                  v30 &= *(void *)&prime - 1;
                }
                if (v30 != v24)
                {
                  uint64_t v31 = *(void *)(a1 + 40);
                  if (!*(void *)(v31 + 8 * v30))
                  {
                    *(void *)(v31 + 8 * v30) = v23;
                    goto LABEL_61;
                  }
                  void *v23 = *v29;
                  *unint64_t v29 = **(void **)(*(void *)(a1 + 40) + 8 * v30);
                  **(void **)(*(void *)(a1 + 40) + 8 * v30) = v29;
                  unint64_t v29 = v23;
                }
                unint64_t v30 = v24;
LABEL_61:
                uint64_t v23 = v29;
                unint64_t v29 = (void *)*v29;
                unint64_t v24 = v30;
              }
              while (v29);
            }
          }
          unint64_t v7 = (unint64_t)prime;
          goto LABEL_65;
        }
        unint64_t v56 = *(void **)(a1 + 40);
        *(void *)(a1 + 40) = 0;
        if (v56) {
          operator delete(v56);
        }
        unint64_t v7 = 0;
        *(void *)(a1 + 48) = 0;
      }
    }
LABEL_65:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v2 = v6 % v7;
      }
      else {
        unint64_t v2 = v6;
      }
    }
    else
    {
      unint64_t v2 = (v7 - 1) & v6;
    }
    goto LABEL_70;
  }
  while (1)
  {
    unint64_t v11 = *((void *)v10 + 1);
    if (v11 == v6) {
      break;
    }
    if (v8.u32[0] > 1uLL)
    {
      if (v11 >= v7) {
        v11 %= v7;
      }
    }
    else
    {
      v11 &= v7 - 1;
    }
    if (v11 != v2) {
      goto LABEL_24;
    }
LABEL_23:
    uint64_t v10 = *(void **)v10;
    if (!v10) {
      goto LABEL_24;
    }
  }
  if (*((void *)v10 + 2) != *(void *)v5 || *((void *)v10 + 3) != *(void *)(v5 + 8)) {
    goto LABEL_23;
  }
  uint64_t v55 = a2;
LABEL_80:
  uint64_t v35 = v55[1];
  if (v35) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v35 + 8), 1uLL, memory_order_relaxed);
  }
  __int16 v36 = (std::__shared_weak_count *)*((void *)v10 + 5);
  *((void *)v10 + 4) = v5;
  *((void *)v10 + 5) = v35;
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  long long v62 = 0u;
  long long v63 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  id WeakRetained = objc_loadWeakRetained((id *)(*v55 + 296));
  uint64_t v38 = [WeakRetained pushStreamNodes];
  int v39 = [v38 allKeys];

  uint64_t v41 = [v39 countByEnumeratingWithState:&v60 objects:v64 count:16];
  if (!v41)
  {
    uint64_t v53 = 1;
    goto LABEL_100;
  }
  obuint64_t j = v39;
  uint64_t v58 = *(void *)v61;
LABEL_86:
  uint64_t v42 = 0;
  while (1)
  {
    if (*(void *)v61 != v58) {
      objc_enumerationMutation(obj);
    }
    uint64_t v43 = *(Phase **)(*((void *)&v60 + 1) + 8 * v42);
    uint64_t StringHashId = Phase::GetStringHashId(v43, v40);
    uint64_t v45 = *v55;
    uint64_t v46 = *(void *)(*v55 + 24);
    if (*(_DWORD *)(v46 + 40)) {
      break;
    }
LABEL_95:
    if (++v42 == v41)
    {
      int v39 = obj;
      uint64_t v41 = [obj countByEnumeratingWithState:&v60 objects:v64 count:16];
      uint64_t v53 = 1;
      if (!v41) {
        goto LABEL_100;
      }
      goto LABEL_86;
    }
  }
  uint64_t v47 = StringHashId;
  uint64_t v48 = 0;
  unint64_t v49 = 0;
  while (2)
  {
    if (v47 != *(void *)(*(void *)(v46 + 48) + 8 * v49))
    {
LABEL_94:
      ++v49;
      uint64_t v46 = *(void *)(v45 + 24);
      v48 += 136;
      if (v49 >= *(unsigned int *)(v46 + 40)) {
        goto LABEL_95;
      }
      continue;
    }
    break;
  }
  id v50 = objc_loadWeakRetained((id *)(v45 + 296));
  uint64_t v51 = [v50 pushStreamNodes];
  uint64_t v52 = [v51 objectForKeyedSubscript:v43];

  LODWORD(v50) = Phase::ActionTreeManager::ConfigureStreamNode(a1, *(void *)(*a2 + 56) + v48, v52, 3);
  if (v50)
  {
    uint64_t v55 = a2;
    uint64_t v45 = *a2;
    goto LABEL_94;
  }
  uint64_t v53 = 0;
  int v39 = obj;
LABEL_100:

  return v53;
}

void sub_221E7292C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void Phase::ActionTreeManager::GetAllValidSubmixIds(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char **a4@<X8>)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  *(void *)&long long v21 = a2;
  *((void *)&v21 + 1) = a3;
  uint64_t v5 = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>((void *)(a1 + 40), &v21);
  if (v5)
  {
    uint64_t v6 = v5[4];
    if (v6)
    {
      uint64_t v7 = *(void *)(v6 + 24);
      if (*(_DWORD *)(v7 + 96))
      {
        uint8x8_t v8 = 0;
        unint64_t v9 = 0;
        uint64_t v10 = a4 + 2;
        do
        {
          uint64_t v11 = *(void *)(v6 + 80) + 96 * v9;
          long long v21 = *(_OWORD *)(v11 + 8);
          if (*(unsigned char *)v11)
          {
            if ((unint64_t)v8 >= *v10)
            {
              uint64_t v12 = (v8 - *a4) >> 4;
              if ((unint64_t)(v12 + 1) >> 60) {
                std::vector<Phase::MetaParamValue>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v13 = *v10 - (void)*a4;
              uint64_t v14 = v13 >> 3;
              if (v13 >> 3 <= (unint64_t)(v12 + 1)) {
                uint64_t v14 = v12 + 1;
              }
              if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v15 = v14;
              }
              if (v15) {
                BOOL v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::UniqueObjectId>>((uint64_t)(a4 + 2), v15);
              }
              else {
                BOOL v16 = 0;
              }
              unint64_t v17 = &v16[16 * v12];
              *(_OWORD *)unint64_t v17 = v21;
              uint64_t v19 = *a4;
              unint64_t v18 = a4[1];
              int v20 = v17;
              if (v18 != *a4)
              {
                do
                {
                  *((_OWORD *)v20 - 1) = *((_OWORD *)v18 - 1);
                  v20 -= 16;
                  v18 -= 16;
                }
                while (v18 != v19);
                unint64_t v18 = *a4;
              }
              uint8x8_t v8 = v17 + 16;
              *a4 = v20;
              a4[1] = v17 + 16;
              a4[2] = &v16[16 * v15];
              if (v18) {
                operator delete(v18);
              }
            }
            else
            {
              *(_OWORD *)uint8x8_t v8 = *(_OWORD *)(v11 + 8);
              v8 += 16;
            }
            a4[1] = v8;
            uint64_t v7 = *(void *)(v6 + 24);
          }
          ++v9;
        }
        while (v9 < *(unsigned int *)(v7 + 96));
      }
    }
  }
}

void sub_221E72B50(_Unwind_Exception *exception_object)
{
}

uint64_t Phase::ActionTreeManager::PrepareActionTree(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  *(void *)uint64_t v11 = a2;
  *(void *)&v11[8] = a3;
  uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>((void *)(a1 + 40), v11);
  if (result)
  {
    uint64_t result = *(void *)(result + 32);
    if (result)
    {
      *(void *)(result + 152) = a4;
      *(void *)(result + 176) = a5;
      int v8 = *(unsigned __int8 *)(result + 144);
      if ((v8 - 2) < 9 || v8 == 0)
      {
        uint64_t v10 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)result) + 688);
        uint64_t result = os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
        if (result)
        {
          *(_DWORD *)uint64_t v11 = 136315394;
          *(void *)&v11[4] = "ActionTreeManager.mm";
          *(_WORD *)&v11[12] = 1024;
          *(_DWORD *)&v11[14] = 4337;
          _os_log_impl(&dword_221E5E000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d Prepare called on action tree at the wrong time\n", v11, 0x12u);
          return 0;
        }
      }
      else
      {
        if (v8 == 1) {
          Phase::ActionTreeObject::SetRunState((char *)result, 2u);
        }
        return 1;
      }
    }
  }
  return result;
}

uint64_t Phase::ActionTreeManager::StartActionTree(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  *(void *)uint64_t v13 = a2;
  *(void *)&v13[8] = a3;
  uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>((void *)(a1 + 40), v13);
  if (result)
  {
    uint64_t v11 = *(void *)(result + 32);
    if (v11)
    {
      uint64_t result = 0;
      switch(*(unsigned char *)(v11 + 144))
      {
        case 0:
          uint64_t v12 = **(id **)(Phase::Logger::GetInstance(0) + 688);
          uint64_t result = os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
          if (result)
          {
            *(_DWORD *)uint64_t v13 = 136315394;
            *(void *)&v13[4] = "ActionTreeManager.mm";
            *(_WORD *)&v13[12] = 1024;
            *(_DWORD *)&v13[14] = 4363;
            _os_log_impl(&dword_221E5E000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d Start called on action tree before initialization\n", v13, 0x12u);
            return 0;
          }
          return result;
        case 1:
          Phase::ActionTreeManager::PrepareActionTree(a1, a2, a3, 0, 0);
          goto LABEL_9;
        case 2:
        case 3:
        case 8:
          *(void *)(v11 + 160) = a4;
          *(void *)(v11 + 184) = a5;
          *(unsigned char *)(v11 + 200) = 1;
          *(unsigned char *)(v11 + 320) = 1;
          goto LABEL_9;
        case 4:
        case 5:
        case 6:
        case 7:
        case 9:
        case 0xA:
          return result;
        default:
LABEL_9:
          uint64_t result = 1;
          break;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t Phase::ActionTreeManager::PauseActionTree(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v8[0] = a2;
  v8[1] = a3;
  uint64_t v3 = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>((void *)(a1 + 40), v8);
  if (v3)
  {
    uint64_t v4 = (unsigned __int8 *)v3[4];
    if (v4)
    {
      unsigned int v5 = v4[144];
      if (v5 <= 8)
      {
        int v6 = 1 << v5;
        if ((v6 & 0x98) != 0)
        {
          Phase::ActionTreeObject::SetRunState((char *)v3[4], 5u);
LABEL_8:
          v4[320] = 0;
          return 0;
        }
        if ((v6 & 0x104) != 0)
        {
          v4[200] = 0;
          goto LABEL_8;
        }
      }
    }
  }
  return 0;
}

uint64_t Phase::ActionTreeManager::UnPauseActionTree(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v8[0] = a2;
  v8[1] = a3;
  uint64_t v3 = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>((void *)(a1 + 40), v8);
  if (v3)
  {
    uint64_t v4 = (char *)v3[4];
    if (v4)
    {
      unsigned int v5 = v4[144];
      if (v5 <= 8)
      {
        int v6 = 1 << v5;
        if ((v6 & 0x70) != 0)
        {
          if (v4[312]) {
            v4[320] = 1;
          }
          else {
            Phase::ActionTreeObject::SetRunState(v4, 7u);
          }
        }
        else if ((v6 & 0x10C) != 0)
        {
          if (v4[312] || v4[145] == 1) {
            v4[320] = 1;
          }
          v4[200] = 1;
        }
      }
    }
  }
  return 0;
}

uint64_t Phase::ActionTreeManager::StopActionTree(uint64_t a1, uint64_t a2, uint64_t a3, PHASESoundEventPrepareHandlerReason a4, PHASESoundEventStartHandlerReason a5)
{
  v10[0] = a2;
  v10[1] = a3;
  uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>((void *)(a1 + 40), v10);
  if (result)
  {
    uint64_t v8 = *(void *)(result + 32);
    if (v8)
    {
      unsigned int v9 = 0;
      uint64_t result = 0;
      switch(*(unsigned char *)(v8 + 144))
      {
        case 0:
        case 1:
          goto LABEL_5;
        case 2:
          Phase::ActionTreeObject::CallPrepareCallback((void *)v8, 1, a4);
          Phase::ActionTreeObject::CallCompleteCallback((void *)v8, a5);
          unsigned int v9 = 0;
          goto LABEL_5;
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
          goto LABEL_4;
        case 8:
          Phase::ActionTreeObject::CallPrepareCallback((void *)v8, 1, a4);
LABEL_4:
          unsigned int v9 = 9;
LABEL_5:
          Phase::ActionTreeObject::SetRunState((char *)v8, v9);
          goto LABEL_6;
        case 9:
        case 0xA:
          return result;
        default:
LABEL_6:
          uint64_t result = 1;
          break;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void *Phase::ActionTreeObject::CallPrepareCallback(void *this, uint64_t a2, PHASESoundEventPrepareHandlerReason a3)
{
  uint64_t v3 = (uint64_t (*)(void, void, unint64_t, uint64_t, PHASESoundEventPrepareHandlerReason, void))this[19];
  if (v3)
  {
    unsigned int v5 = this;
    uint64_t v6 = this[7];
    uint64_t v7 = this[8];
    if (v6 == v7)
    {
      unint64_t v8 = 0;
    }
    else
    {
      unint64_t v8 = 0;
      do
      {
        if (*(void *)(v6 + 96) > v8) {
          unint64_t v8 = *(void *)(v6 + 96);
        }
        v6 += 136;
      }
      while (v6 != v7);
    }
    this = (void *)v3(*this, this[1], v8, a2, a3, this[22]);
    v5[19] = 0;
    v5[22] = 0;
  }
  return this;
}

void *Phase::ActionTreeObject::CallCompleteCallback(void *this, PHASESoundEventStartHandlerReason a2)
{
  unint64_t v2 = (uint64_t (*)(void, void, unint64_t *, PHASESoundEventStartHandlerReason, void))this[20];
  if (v2)
  {
    uint64_t v3 = this;
    uint64_t v4 = this[7];
    unint64_t v5 = -1;
    while (v4 != this[8])
    {
      unint64_t v6 = *(void *)(v4 + 104);
      if (v6 < v5 && v6 != 0) {
        unint64_t v5 = *(void *)(v4 + 104);
      }
      v4 += 136;
    }
    unint64_t v8 = v5;
    this = (void *)v2(*this, this[1], &v8, a2, this[23]);
    v3[20] = 0;
    v3[23] = 0;
  }
  return this;
}

uint64_t Phase::ActionTreeManager::SeekActionTree(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void, void, uint64_t, uint64_t), uint64_t a5, double a6)
{
  v13[0] = a2;
  v13[1] = a3;
  uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>((void *)(a1 + 40), v13);
  if (result)
  {
    uint64_t v10 = *(void *)(result + 32);
    if (v10)
    {
      unsigned int v11 = *(unsigned __int8 *)(v10 + 144);
      if (v11 - 1 >= 8)
      {
        if (v11 <= 0xA && ((1 << v11) & 0x601) != 0) {
          return 0;
        }
      }
      else
      {
        if (*(unsigned char *)(v10 + 312) || *(void *)(v10 + 168))
        {
          if (a4) {
            a4(*(void *)v10, *(void *)(v10 + 8), 1, a5);
          }
          return 0;
        }
        *(void *)(v10 + 168) = a4;
        *(void *)(v10 + 192) = a5;
        *(double *)(v10 + 304) = a6;
        *(unsigned char *)(v10 + 312) = 1;
      }
      return 1;
    }
    return 0;
  }
  return result;
}

void *Phase::ActionTreeManager::SetAmbientOrientation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  v8[0] = a2;
  v8[1] = a3;
  uint64_t result = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>((void *)(a1 + 40), v8);
  if (result)
  {
    uint64_t result = (void *)result[4];
    if (result)
    {
      if (result[3]) {
        return (void *)Phase::ActionTreeObject::SetAmbientOrientation((uint64_t)result, a4, a5);
      }
      else {
        return 0;
      }
    }
  }
  return result;
}

BOOL Phase::ActionTreeObject::SetAmbientOrientation(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3 = *(void *)(a1 + 24);
  unint64_t v4 = *(unsigned int *)(v3 + 96);
  if (v4)
  {
    uint64_t v5 = 0;
    unint64_t v6 = (void *)(*(void *)(v3 + 104) + 8);
    unint64_t v7 = 1;
    BOOL v8 = 1;
    while (*(v6 - 1) != a2 || *v6 != 2)
    {
      BOOL v8 = v7 < v4;
      v5 += 96;
      ++v7;
      v6 += 743;
      if (96 * v4 == v5) {
        return 0;
      }
    }
    unsigned int v9 = (_DWORD *)(*(void *)(a1 + 80) + v5);
    v9[16] = *a3;
    v9[17] = a3[1];
    v9[18] = a3[2];
    v9[19] = a3[3];
  }
  else
  {
    return 0;
  }
  return v8;
}

uint64_t Phase::ActionTreeManager::UpdateActionTree(Phase::Logger **a1, void *a2, void *a3, double a4)
{
  uint64_t v91 = *MEMORY[0x263EF8340];
  if (*((unsigned char *)a2 + 312))
  {
    unsigned int v8 = *((unsigned __int8 *)a2 + 144);
    BOOL v9 = v8 > 0xA;
    int v10 = (1 << v8) & 0x6A4;
    if (v9 || v10 == 0)
    {
      Phase::ActionTreeObject::SetRunState((char *)a2, 8u);
      unint64_t v62 = *(unsigned int *)(a2[3] + 40);
      if (v62)
      {
        unint64_t v63 = 0;
        char v64 = 0;
        while (2)
        {
          uint64_t v65 = a2[7] + 136 * v63;
          while (1)
          {
            unsigned int v66 = *(unsigned __int8 *)(v65 + 24);
            BOOL v9 = v66 > 6;
            int v67 = (1 << v66) & 0x63;
            if (v9 || v67 == 0) {
              break;
            }
            ++v63;
            v65 += 136;
            if (v63 >= v62)
            {
              if ((v64 & 1) == 0) {
                goto LABEL_6;
              }
              goto LABEL_96;
            }
          }
          Phase::ActionTreeObject::LeafNodeInfo::SetLeafNodeSeekState(v65, 1u);
          long long __src = *(_OWORD *)(v65 + 8);
          if (!*((unsigned char *)a2 + 312)) {
            std::__throw_bad_optional_access[abi:ne180100]();
          }
          uint64_t v81 = a2[38];
          BOOL v69 = Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a3, 6u, &__src, 0x18uLL);
          *(unsigned char *)(v65 + 40) = 1;
          if (!*((unsigned char *)a2 + 312)) {
            std::__throw_bad_optional_access[abi:ne180100]();
          }
          *(void *)(v65 + 48) = a2[38];
          v70 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)v69) + 688);
          if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v71 = *(void *)(v65 + 8);
            uint64_t v72 = *(void *)(v65 + 48);
            int v73 = *(char *)(v65 + 64);
            int v74 = *(char *)(v65 + 24);
            *(_DWORD *)buf = 136316418;
            *(void *)&uint8_t buf[4] = "ActionTreeManager.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 4916;
            __int16 v83 = 2048;
            uint64_t v84 = v71;
            __int16 v85 = 2048;
            uint64_t v86 = v72;
            __int16 v87 = 1024;
            int v88 = v73;
            __int16 v89 = 1024;
            int v90 = v74;
            _os_log_impl(&dword_221E5E000, v70, OS_LOG_TYPE_DEFAULT, "%25s:%-5d generatorId %llu: request seek to time %.2fs, node type %hhd, state %hhd", buf, 0x32u);
          }
          ++v63;
          unint64_t v62 = *(unsigned int *)(a2[3] + 40);
          char v64 = 1;
          if (v63 < v62) {
            continue;
          }
          break;
        }
LABEL_96:
        Phase::ActionTreeObject::SetSeekState((unsigned __int8 *)a2, 1);
        if (*((unsigned char *)a2 + 312)) {
          *((unsigned char *)a2 + 312) = 0;
        }
      }
    }
  }
LABEL_6:
  switch(*((unsigned char *)a2 + 144))
  {
    case 2:
      if (a2[11] != a2[10])
      {
        unint64_t v12 = 0;
        uint64_t v13 = 80;
        do
        {
          Phase::ActionTreeManager::UpdateGeoQueries(a1, (UniqueObjectId *)a2);
          uint64_t v14 = a2[10];
          int v15 = *(unsigned __int8 *)(v14 + v13);
          if (v15 == 1) {
            return 1;
          }
          if (v15 == 3) {
            return 0;
          }
          ++v12;
          v13 += 96;
        }
        while (0xAAAAAAAAAAAAAAABLL * ((a2[11] - v14) >> 5) > v12);
      }
      uint64_t result = Phase::ActionTreeManager::ExecuteTree((uint64_t)a1, (Phase::ActionTreeObject *)a2, a3, 0.0);
      if (result)
      {
        Phase::ActionTreeObject::SetRunState((char *)a2, 8u);
        return !*((unsigned char *)a2 + 200) || (Phase::ActionTreeManager::UpdateActionTree(a1, a2, a3, 0.0) & 1) != 0;
      }
      return result;
    case 3:
      if (!*((unsigned char *)a2 + 200)) {
        return 1;
      }
      uint64_t result = Phase::ActionTreeManager::StartPreparedVoices((uint64_t)a2, a3);
      if (result)
      {
        Phase::ActionTreeObject::SetRunState((char *)a2, 4u);
        uint64_t result = Phase::ActionTreeManager::ExecuteTree((uint64_t)a1, (Phase::ActionTreeObject *)a2, a3, 0.0);
        if (result) {
          goto LABEL_79;
        }
      }
      return result;
    case 4:
      uint64_t v47 = a2[3];
      uint64_t v48 = *(unsigned int *)(v47 + 40);
      if (!v48) {
        goto LABEL_66;
      }
      int v49 = *(unsigned __int8 *)(v47 + 112);
      id v50 = (unsigned __int8 *)(a2[7] + 24);
      char v51 = 1;
      do
      {
        int v53 = *v50;
        v50 += 136;
        int v52 = v53;
        if (v49)
        {
          if (v52) {
            v51 &= v52 == 1;
          }
        }
        else
        {
          v51 &= v52 == 0;
        }
        --v48;
      }
      while (v48);
      if (v51) {
        goto LABEL_66;
      }
      uint64_t result = Phase::ActionTreeManager::ExecuteTree((uint64_t)a1, (Phase::ActionTreeObject *)a2, a3, a4);
      if (result)
      {
        Phase::ActionTreeManager::UpdateGeoQueries(a1, (UniqueObjectId *)a2);
        return 1;
      }
      return result;
    case 5:
      uint64_t v54 = a2[3];
      if (*(_DWORD *)(v54 + 40))
      {
        uint64_t v55 = 0;
        unint64_t v56 = 0;
        do
        {
          uint64_t v57 = a2[7];
          if (*(unsigned char *)(v57 + v55))
          {
            *(_OWORD *)buf = *(_OWORD *)(v57 + v55 + 8);
            Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a3, 4u, buf, 0x10uLL);
            uint64_t v54 = a2[3];
          }
          ++v56;
          v55 += 136;
        }
        while (v56 < *(unsigned int *)(v54 + 40));
      }
      Phase::ActionTreeObject::SetRunState((char *)a2, 6u);
      *((unsigned char *)a2 + 320) = 0;
      return 1;
    case 7:
      uint64_t v58 = a2[3];
      if (*(_DWORD *)(v58 + 40))
      {
        uint64_t v59 = 0;
        unint64_t v60 = 0;
        do
        {
          uint64_t v61 = a2[7];
          if (*(unsigned char *)(v61 + v59))
          {
            *(_OWORD *)buf = *(_OWORD *)(v61 + v59 + 8);
            Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a3, 5u, buf, 0x10uLL);
            uint64_t v58 = a2[3];
          }
          ++v60;
          v59 += 136;
        }
        while (v60 < *(unsigned int *)(v58 + 40));
      }
      Phase::ActionTreeObject::SetRunState((char *)a2, 4u);
LABEL_79:
      *((unsigned char *)a2 + 320) = 1;
      return 1;
    case 8:
      uint64_t v17 = *(unsigned int *)(a2[3] + 40);
      if (v17)
      {
        unint64_t v18 = (unsigned char *)(a2[7] + 25);
        do
        {
          if (*(v18 - 1) == 2 || *v18 == 1) {
            return 1;
          }
          v18 += 136;
          --v17;
        }
        while (v17);
        if (*((unsigned char *)a2 + 145))
        {
          unint64_t v19 = 0;
          int v20 = 0;
          uint64_t v21 = 25;
          do
          {
            uint64_t v22 = (unsigned __int8 *)(a2[7] + v21);
            int v25 = *v22;
            uint64_t v23 = (uint64_t)(v22 - 25);
            int v24 = v25;
            if (v25 == 1) {
              int v26 = 1;
            }
            else {
              int v26 = v20;
            }
            if (v24 == 3) {
              int v20 = 1;
            }
            else {
              int v20 = v26;
            }
            Phase::ActionTreeObject::LeafNodeInfo::SetLeafNodeSeekState(v23, 0);
            ++v19;
            v21 += 136;
          }
          while (v19 < *(unsigned int *)(a2[3] + 40));
          if (v20)
          {
            uint64_t v28 = a2 + 21;
            uint8x8_t v27 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))a2[21];
            if (v27)
            {
              uint64_t v29 = *a2;
              uint64_t v30 = a2[1];
              uint64_t v32 = a2 + 24;
              uint64_t v31 = a2[24];
              uint64_t v33 = 0;
LABEL_101:
              v27(v29, v30, v33, v31);
              *uint64_t v28 = 0;
              *uint64_t v32 = 0;
              goto LABEL_102;
            }
            goto LABEL_102;
          }
LABEL_99:
          uint64_t v28 = a2 + 21;
          uint8x8_t v27 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))a2[21];
          if (v27)
          {
            uint64_t v29 = *a2;
            uint64_t v30 = a2[1];
            uint64_t v32 = a2 + 24;
            uint64_t v31 = a2[24];
            uint64_t v33 = 2;
            goto LABEL_101;
          }
LABEL_102:
          Phase::ActionTreeObject::SetSeekState((unsigned __int8 *)a2, 0);
          char v75 = 0;
          goto LABEL_106;
        }
      }
      else if (*((unsigned char *)a2 + 145))
      {
        goto LABEL_99;
      }
      char v75 = 1;
LABEL_106:
      if (!*((unsigned char *)a2 + 200))
      {
        Phase::ActionTreeObject::SetRunState((char *)a2, 3u);
LABEL_120:
        Phase::ActionTreeObject::CallPrepareCallback(a2, 0, PHASESoundEventPrepareHandlerReasonPrepared);
        return 1;
      }
      uint64_t result = Phase::ActionTreeManager::StartPreparedVoices((uint64_t)a2, a3);
      if (!result) {
        return result;
      }
      if (v75)
      {
        Phase::ActionTreeObject::SetRunState((char *)a2, 4u);
        *((unsigned char *)a2 + 320) = 1;
      }
      else if (*((unsigned char *)a2 + 320))
      {
        uint64_t v76 = a2[3];
        if (*(_DWORD *)(v76 + 40))
        {
          uint64_t v77 = 0;
          unint64_t v78 = 0;
          do
          {
            uint64_t v79 = a2[7] + v77;
            if (*(unsigned char *)(v79 + 24) == 4)
            {
              *(_OWORD *)buf = *(_OWORD *)(v79 + 8);
              Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a3, 5u, buf, 0x10uLL);
              uint64_t v76 = a2[3];
            }
            ++v78;
            v77 += 136;
          }
          while (v78 < *(unsigned int *)(v76 + 40));
        }
        Phase::ActionTreeObject::SetRunState((char *)a2, 4u);
      }
      else
      {
        Phase::ActionTreeObject::SetRunState((char *)a2, 6u);
      }
      if (Phase::ActionTreeManager::ExecuteTree((uint64_t)a1, (Phase::ActionTreeObject *)a2, a3, 0.0)) {
        goto LABEL_120;
      }
      return 0;
    case 9:
      uint64_t v34 = a2[3];
      if (*(_DWORD *)(v34 + 40))
      {
        uint64_t v35 = 0;
        unint64_t v36 = 0;
        do
        {
          uint64_t v37 = a2[7] + v35;
          unsigned int v38 = *(unsigned __int8 *)(v37 + 24);
          BOOL v9 = v38 > 6;
          int v39 = (1 << v38) & 0x43;
          if (v9 || v39 == 0)
          {
            *(_OWORD *)buf = *(_OWORD *)(v37 + 8);
            Phase::MessagePipeWriter<Phase::ActionTreeServerCommand>::WriteMessage(a3, 3u, buf, 0x18uLL);
            Phase::ActionTreeObject::LeafNodeInfo::SetLeafNodeState(a2[7] + v35, 6u);
            uint64_t v34 = a2[3];
          }
          ++v36;
          v35 += 136;
        }
        while (v36 < *(unsigned int *)(v34 + 40));
      }
      Phase::ActionTreeObject::SetRunState((char *)a2, 0xAu);
      return 1;
    case 0xA:
      uint64_t v41 = *(unsigned int *)(a2[3] + 40);
      if (!v41) {
        goto LABEL_54;
      }
      uint64_t v42 = (unsigned __int8 *)(a2[7] + 24);
      while (1)
      {
        unsigned int v43 = *v42;
        v42 += 136;
        int v44 = (1 << v43) & 0x103;
        if (v43 > 8 || v44 == 0) {
          break;
        }
        if (!--v41)
        {
LABEL_54:
          if (*((unsigned char *)a2 + 145) || *((unsigned char *)a2 + 312))
          {
            uint64_t v46 = (void (*)(void, void, void, void))a2[21];
            if (v46)
            {
              v46(*a2, a2[1], 0, a2[24]);
              a2[21] = 0;
              a2[24] = 0;
            }
          }
LABEL_66:
          Phase::ActionTreeObject::CallCompleteCallback(a2, PHASESoundEventStartHandlerReasonFinishedPlaying);
          Phase::ActionTreeManager::DestroySubmixes((uint64_t)a2, a3);
          Phase::ActionTreeObject::SetRunState((char *)a2, 0);
          return 1;
        }
      }
      return 1;
    default:
      return 1;
  }
}

void Phase::ActionTreeManager::UpdateActionTrees(Phase::Logger *a1, void *a2, double a3)
{
  uint64_t Instance = Phase::Logger::GetInstance(a1);
  unint64_t v7 = (Phase::Logger *)os_signpost_id_generate(**(os_log_t **)(Instance + 896));
  unsigned int v8 = (Phase::Logger *)Phase::Logger::GetInstance(v7);
  if (*((unsigned char *)v8 + 904))
  {
    BOOL v9 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v8)
                                                                                       + 896)));
    int v10 = v9;
    if ((unint64_t)v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v9))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_221E5E000, v10, OS_SIGNPOST_INTERVAL_BEGIN, (os_signpost_id_t)v7, "Phase_ActionTree_Update", "Action Tree Update", buf, 2u);
    }
  }
  unsigned int v11 = (Phase::Logger *)Phase::Commandable<128,Phase::LockFreeQueueMPSC>::ExecuteCommands((uint64_t)a1);
  uint64_t v12 = *((void *)a1 + 7);
  if (v12)
  {
    do
    {
      while (1)
      {
        uint64_t v13 = *(void *)(v12 + 32);
        if (*(unsigned char *)(v13 + 144)
          && (Phase::ActionTreeManager::UpdateActionTree((Phase::Logger **)a1, (void *)v13, a2, a3) & 1) == 0)
        {
          Phase::ActionTreeManager::StopActionTree((uint64_t)a1, *(void *)(v12 + 16), *(void *)(v12 + 24), PHASESoundEventPrepareHandlerReasonFailure, PHASESoundEventStartHandlerReasonFailure);
        }
        unsigned int v11 = *(Phase::Logger **)(v12 + 32);
        if (!*((unsigned char *)v11 + 144)) {
          break;
        }
        uint64_t v12 = *(void *)v12;
        if (!v12) {
          goto LABEL_14;
        }
      }
      Phase::ActionTreeManager::DestroySubmixes((uint64_t)v11, a2);
      Phase::ActionTreeManager::ReleaseActionTreeObject(a1, *(Phase::ActionTreeObject **)(v12 + 32));
      unsigned int v11 = (Phase::Logger *)std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::erase((void *)a1 + 5, (uint64_t *)v12);
      uint64_t v12 = (uint64_t)v11;
    }
    while (v11);
LABEL_14:
    for (uint64_t i = *((void *)a1 + 7); ; uint64_t i = (uint64_t)v11)
    {
      while (1)
      {
        if (!i) {
          goto LABEL_31;
        }
        int v15 = *(void **)(i + 32);
        int v16 = *((unsigned __int8 *)v15 + 144);
        if (v16 == 4 || v16 == 9) {
          break;
        }
LABEL_30:
        uint64_t i = *(void *)i;
      }
      uint64_t v18 = *(unsigned int *)(v15[3] + 40);
      if (v18)
      {
        unint64_t v19 = (unsigned __int8 *)(v15[7] + 24);
        do
        {
          int v20 = *v19;
          v19 += 136;
          if (v20) {
            goto LABEL_30;
          }
        }
        while (--v18);
      }
      if (*((unsigned char *)v15 + 145) || *((unsigned char *)v15 + 312))
      {
        uint64_t v21 = (void (*)(void, void, void, void))v15[21];
        if (v21)
        {
          v21(*v15, v15[1], 0, v15[24]);
          v15[21] = 0;
          v15[24] = 0;
        }
      }
      Phase::ActionTreeObject::CallCompleteCallback(v15, PHASESoundEventStartHandlerReasonFinishedPlaying);
      Phase::ActionTreeManager::DestroySubmixes((uint64_t)v15, a2);
      Phase::ActionTreeManager::ReleaseActionTreeObject(a1, *(Phase::ActionTreeObject **)(i + 32));
      unsigned int v11 = (Phase::Logger *)std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::erase((void *)a1 + 5, (uint64_t *)i);
    }
  }
LABEL_31:
  uint64_t v22 = (Phase::Logger *)Phase::Logger::GetInstance(v11);
  if (*((unsigned char *)v22 + 904))
  {
    uint64_t v23 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v22)
                                                                                        + 896)));
    int v24 = v23;
    if ((unint64_t)v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v23))
    {
      *(_WORD *)int v25 = 0;
      _os_signpost_emit_with_name_impl(&dword_221E5E000, v24, OS_SIGNPOST_INTERVAL_END, (os_signpost_id_t)v7, "Phase_ActionTree_Update", (const char *)&unk_222112ABB, v25, 2u);
    }
  }
}

uint64_t Phase::Commandable<128,Phase::LockFreeQueueMPSC>::ExecuteCommands(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (*(int *)(a1 + 16) < 1)
  {
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v2 = 0;
    LODWORD(v3) = 0;
    do
      uint64_t v3 = Phase::CommandQueue<Phase::LockFreeQueueMPSC>::ExecuteCommands(*(void *)(*(void *)(a1 + 8)
                                                                                                  + 8 * v2++))
         + v3;
    while (v2 < *(int *)(a1 + 16));
  }
  int v4 = 1;
  atomic_compare_exchange_strong((atomic_uchar *volatile)(a1 + 32), (unsigned __int8 *)&v4, 0);
  if (v4 == 1)
  {
    uint64_t v5 = **(id **)(a1 + 24);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      int v7 = 136315394;
      unsigned int v8 = "Commandable.hpp";
      __int16 v9 = 1024;
      int v10 = 285;
      _os_log_impl(&dword_221E5E000, v5, OS_LOG_TYPE_INFO, "%25s:%-5d Commandable: Executing pending commands in overflow queue.", (uint8_t *)&v7, 0x12u);
    }
  }
  return v3;
}

void Phase::ActionTreeManager::ReleaseActionTreeObject(Phase::ActionTreeManager *this, Phase::ActionTreeObject *a2)
{
  uint64_t v4 = *((void *)a2 + 7);
  uint64_t v3 = *((void *)a2 + 8);
  if (v3 != v4)
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    int v7 = (char *)this + 80;
    do
    {
      if (*(void *)(v4 + v5 + 32))
      {
        caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::remove((uint64_t)v7, *(void *)(v4 + v5 + 8), *(void *)(v4 + v5 + 16));
        std::unique_ptr<Phase::Controller::StreamRenderer>::reset[abi:ne180100]((Phase::Controller::StreamRenderer **)(*((void *)a2 + 7) + v5 + 32), 0);
        uint64_t v4 = *((void *)a2 + 7);
        uint64_t v3 = *((void *)a2 + 8);
      }
      ++v6;
      v5 += 136;
    }
    while (0xF0F0F0F0F0F0F0F1 * ((v3 - v4) >> 3) > v6);
  }
  id WeakRetained = objc_loadWeakRetained((id *)a2 + 37);
  [WeakRetained internalCleanup];
}

void sub_221E73F70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void *Phase::ActionTreeManager::SetMetaParameter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, double a7)
{
  v15[0] = a2;
  v15[1] = a3;
  uint64_t result = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>((void *)(a1 + 40), v15);
  if (result)
  {
    uint64_t v12 = result[4];
    if (v12)
    {
      uint64_t v13 = *(void **)(v12 + 32);
      uint64_t v14 = *(void **)(v12 + 40);
      while (v13 != v14)
      {
        if (*(void *)*v13 == a4) {
          return (void *)Phase::SetMetaParameterValue(v13, a5, a6, a7);
        }
        v13 += 8;
      }
    }
    return 0;
  }
  return result;
}

void Phase::ActionTreeManager::LeafNodePrepared(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  for (uint64_t i = *(void **)(a1 + 56); i; uint64_t i = (void *)*i)
  {
    uint64_t v6 = i[4];
    if (*(unsigned char *)(v6 + 144))
    {
      uint64_t v8 = *(void *)(v6 + 56);
      uint64_t v7 = *(void *)(v6 + 64);
      while (v8 != v7)
      {
        if (*(void *)(v8 + 8) == a2 && *(void *)(v8 + 16) == a3 && *(unsigned char *)(v8 + 24) == 2)
        {
          Phase::ActionTreeObject::LeafNodeInfo::SetLeafNodeState(v8, 3u);
          *(void *)(v8 + 96) = a4;
          return;
        }
        v8 += 136;
      }
    }
  }
}

void Phase::ActionTreeManager::LeafNodeCompleted(Phase::ActionTreeManager *this, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = (void *)*((void *)this + 7);
  if (v4)
  {
    while (1)
    {
      uint64_t v7 = v4[4];
      if (*(unsigned char *)(v7 + 144))
      {
        uint64_t v8 = *(void *)(v7 + 56);
        uint64_t v9 = *(void *)(v7 + 64) - v8;
        if (v9) {
          break;
        }
      }
LABEL_8:
      uint64_t v4 = (void *)*v4;
      if (!v4) {
        return;
      }
    }
    unint64_t v10 = 0;
    unint64_t v11 = 0xF0F0F0F0F0F0F0F1 * (v9 >> 3);
    unsigned int v12 = 1;
    while (1)
    {
      uint64_t v13 = v8 + 136 * v10;
      uint64_t v15 = *(void *)(v13 + 8);
      uint64_t v14 = v13 + 8;
      if (v15 == a2 && *(void *)(v14 + 8) == a3) {
        break;
      }
      unint64_t v10 = v12;
      if (v11 <= v12++) {
        goto LABEL_8;
      }
    }
    uint64_t v17 = v8 + 136 * v10;
    unsigned int v20 = *(unsigned __int8 *)(v17 + 24);
    unint64_t v19 = (unsigned __int8 *)(v17 + 24);
    unsigned int v18 = v20;
    unsigned int v21 = 8;
    switch(v20)
    {
      case 1u:
      case 8u:
        std::terminate();
        return;
      case 2u:
      case 3u:
      case 4u:
        unsigned int v21 = 0;
        goto LABEL_13;
      case 5u:
      case 6u:
        unsigned int v21 = 1;
        goto LABEL_13;
      case 7u:
LABEL_13:
        Phase::ActionTreeObject::LeafNodeInfo::SetLeafNodeState(v8 + 136 * v10, v21);
        unsigned int v18 = *v19;
        break;
      default:
        break;
    }
    if (v18 <= 1) {
      Phase::ActionTreeManager::StopStreamRenderer(this, (Phase::ActionTreeObject *)v7, v10);
    }
    *(void *)(v8 + 136 * v10 + 104) = *a4;
  }
}

Phase::Controller::StreamRenderer *Phase::ActionTreeManager::StopStreamRenderer(Phase::ActionTreeManager *this, Phase::ActionTreeObject *a2, unint64_t a3)
{
  if (!a2 || (uint64_t v4 = *((void *)a2 + 7), 0xF0F0F0F0F0F0F0F1 * ((*((void *)a2 + 8) - v4) >> 3) <= a3)) {
    __assert_rtn("StopStreamRenderer", "ActionTreeManager.mm", 5660, "inObject != nullptr && inLeafNodeIdIndex < inObject->mLeafNodes.size()");
  }
  uint64_t v5 = 17 * a3;
  caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::remove((uint64_t)this + 80, *(void *)(v4 + 136 * a3 + 8), *(void *)(v4 + 136 * a3 + 16));
  uint64_t v6 = (Phase::Controller::StreamRenderer **)(*((void *)a2 + 7) + 8 * v5 + 32);

  return std::unique_ptr<Phase::Controller::StreamRenderer>::reset[abi:ne180100](v6, 0);
}

void Phase::ActionTreeManager::Reset(Phase::ActionTreeManager *this)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (*((int *)this + 4) >= 1)
  {
    uint64_t v2 = 0;
    do
      Phase::CommandQueue<Phase::LockFreeQueueMPSC>::Reset(*(void *)(*((void *)this + 1) + 8 * v2++));
    while (v2 < *((int *)this + 4));
  }
  for (uint64_t i = (void *)*((void *)this + 7); i; uint64_t i = (void *)*i)
  {
    uint64_t v4 = (uint64_t *)i[4];
    if (*((unsigned char *)v4 + 144))
    {
      if (*((unsigned char *)v4 + 145) || *((unsigned char *)v4 + 312))
      {
        uint64_t v5 = (void (*)(void, uint64_t, void, uint64_t))v4[21];
        if (v5)
        {
          v5(*v4, v4[1], 0, v4[24]);
          v4[21] = 0;
          v4[24] = 0;
        }
      }
      Phase::ActionTreeObject::CallPrepareCallback(v4, 1, PHASESoundEventPrepareHandlerReasonPrepared);
      uint64_t v6 = (Phase::Logger *)Phase::ActionTreeObject::CallCompleteCallback(v4, PHASESoundEventStartHandlerReasonFinishedPlaying);
      uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance(v6);
      if (*((unsigned char *)Instance + 1558))
      {
        uint64_t v8 = **(id **)(Phase::Logger::GetInstance(Instance) + 432);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v9 = *v4;
          *(_DWORD *)buf = 136315650;
          uint64_t v13 = "ActionTreeManager.mm";
          __int16 v14 = 1024;
          int v15 = 5516;
          __int16 v16 = 2048;
          uint64_t v17 = v9;
          _os_log_impl(&dword_221E5E000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d (sound event: %llu) - sound event was stopped by engine teardown", buf, 0x1Cu);
        }
      }
      Phase::ActionTreeObject::SetRunState((char *)v4, 0);
    }
    Phase::ActionTreeManager::ReleaseActionTreeObject(this, (Phase::ActionTreeObject *)v4);
  }
  if (*((void *)this + 8))
  {
    std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::__deallocate_node(this + 40, *((void **)this + 7));
    *((void *)this + 7) = 0;
    uint64_t v10 = *((void *)this + 6);
    if (v10)
    {
      for (uint64_t j = 0; j != v10; ++j)
        *(void *)(*((void *)this + 5) + 8 * j) = 0;
    }
    *((void *)this + 8) = 0;
  }
}

uint64_t Phase::Commandable<128,Phase::LockFreeQueueMPSC>::FlushCommands(uint64_t result)
{
  if (*(int *)(result + 16) >= 1)
  {
    uint64_t v1 = result;
    uint64_t v2 = 0;
    do
      uint64_t result = Phase::CommandQueue<Phase::LockFreeQueueMPSC>::Reset(*(void *)(*(void *)(v1 + 8) + 8 * v2++));
    while (v2 < *(int *)(v1 + 16));
  }
  return result;
}

uint64_t Phase::ActionTreeManager::ScheduleBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, unint64_t a7, uint64_t a8, void *a9)
{
  id v16 = a5;
  id v17 = a6;
  id v18 = a9;
  v29[0] = a2;
  v29[1] = a3;
  uint64_t v19 = (uint64_t)std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>((void *)(a1 + 40), v29);
  if (v19 && (uint64_t v20 = *(void *)(v19 + 32)) != 0)
  {
    uint64_t v21 = *(void *)(v20 + 24);
    unint64_t v22 = *(unsigned int *)(v21 + 40);
    if (v22)
    {
      uint64_t v23 = 0;
      uint64_t v24 = *(void *)(v21 + 48);
      BOOL v25 = 1;
      uint64_t v26 = 32;
      while (1)
      {
        if (*(void *)(v24 + 8 * v23) == a4)
        {
          uint64_t v19 = *(void *)(*(void *)(v20 + 56) + v26);
          if (v19) {
            break;
          }
        }
        BOOL v25 = ++v23 < v22;
        v26 += 136;
        if (v22 == v23) {
          goto LABEL_8;
        }
      }
      LOBYTE(v19) = Phase::Controller::StreamRenderer::ScheduleBuffer(v19, v16, v17, a7, a8, v18);
    }
    else
    {
LABEL_8:
      BOOL v25 = 0;
    }
    char v27 = v25 & v19;
  }
  else
  {
    char v27 = 0;
  }

  return v27 & 1;
}

void sub_221E745F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::remove(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v18.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 80);
  v18.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 80));
  uint64_t v6 = atomic_load((unint64_t *)(a1 + 40));
  if (v6
    && (unint64_t SlotForKey = caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl::findSlotForKey(v6, a2, a3), (SlotForKey & 1) != 0))
  {
    uint64_t v9 = v8;
    atomic_store(0xFFFFFFFFFFFFFFFFLL, (unint64_t *)(v6 + 8 * HIDWORD(SlotForKey) + 16));
    if (v8)
    {
      int v11 = atomic_load((unsigned int *)(a1 + 48));
      if (v11 >= 1)
      {
        do
        {
          __ns.__rep_ = 50000;
          std::this_thread::sleep_for (&__ns);
          int v12 = atomic_load((unsigned int *)(a1 + 48));
        }
        while (v12 > 0);
      }
      if ((unsigned __int16)atomic_load((unsigned int *)v9))
      {
        std::unique_lock<std::mutex>::unlock(&v18);
        while ((unsigned __int16)atomic_load((unsigned int *)v9))
        {
          __ns.__rep_ = 500000;
          std::this_thread::sleep_for (&__ns);
        }
        std::unique_lock<std::mutex>::lock(&v18);
        uint64_t v6 = atomic_load((unint64_t *)(a1 + 40));
      }
      caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::element_t::release((unsigned int *)v9);
      int v16 = *(_DWORD *)(a1 + 32) - 1;
      *(_DWORD *)(a1 + 32) = v16;
      if (v6)
      {
        unsigned int v17 = *(_DWORD *)(v6 + 8);
        uint64_t v9 = 1;
        if (v17 >= 9 && 16 * v16 / v17 <= 2) {
          caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::rehash((unint64_t *)a1, v17 >> 1);
        }
      }
      else
      {
        uint64_t v9 = 1;
      }
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::emptyReleasePool(a1);
  if (v18.__owns_) {
    std::mutex::unlock(v18.__m_);
  }
  return v9;
}

void sub_221E74784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, char a11)
{
  if (a11) {
    std::mutex::unlock(a10);
  }
  _Unwind_Resume(exception_object);
}

void Phase::ActionTreeManager::SubmitGeneratorBufferCompletedResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void **)(a1 + 56);
  if (!v3) {
    return;
  }
  while (1)
  {
    uint64_t v6 = v3[4];
    if (*(unsigned char *)(v6 + 144))
    {
      uint64_t v7 = *(void *)(v6 + 56);
      uint64_t v8 = *(void *)(v6 + 64);
      if (v8 != v7) {
        break;
      }
    }
LABEL_13:
    uint64_t v3 = (void *)*v3;
    if (!v3) {
      return;
    }
  }
  uint64_t v9 = 0;
  unsigned int v10 = 1;
  while (1)
  {
    int v11 = (Phase::ActionTreeObject::LeafNodeInfo *)(v7 + 136 * v9);
    if (*((void *)v11 + 1) != a2) {
      goto LABEL_12;
    }
    if (*((void *)v11 + 2) != a3) {
      goto LABEL_12;
    }
    if (*(unsigned __int8 *)(v7 + 136 * v9 + 24) - 2 > 2) {
      goto LABEL_12;
    }
    uint64_t v12 = v7 + 136 * v9;
    int v14 = *(unsigned __int8 *)(v12 + 40);
    uint64_t v13 = (unsigned char *)(v12 + 40);
    if (!v14) {
      goto LABEL_12;
    }
    uint64_t v19 = *(void *)(v7 + 136 * v9 + 48);
    int v15 = (Phase::Logger *)Phase::ActionTreeObject::LeafNodeInfo::GeneratorStreamSeek(v11, *(Phase::Controller::TaskManager **)(a1 + 224));
    if (*v13) {
      std::terminate();
    }
    int v16 = (int)v15;
    if (v15) {
      break;
    }
    uint64_t v7 = *(void *)(v6 + 56);
    uint64_t v8 = *(void *)(v6 + 64);
LABEL_12:
    uint64_t v9 = v10;
    if (0xF0F0F0F0F0F0F0F1 * ((v8 - v7) >> 3) <= v10++) {
      goto LABEL_13;
    }
  }
  std::unique_lock<std::mutex> v18 = **(id **)(Phase::Logger::GetInstance(v15) + 688);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136316162;
    unint64_t v22 = "ActionTreeManager.mm";
    __int16 v23 = 1024;
    int v24 = 5799;
    __int16 v25 = 2048;
    uint64_t v26 = a2;
    __int16 v27 = 2048;
    uint64_t v28 = v19;
    __int16 v29 = 1024;
    int v30 = v16;
    _os_log_impl(&dword_221E5E000, v18, OS_LOG_TYPE_DEFAULT, "%25s:%-5d generatorId %llu: buffer completion handler, seeking to time %.2fs, result %d, requesting deactivation", buf, 0x2Cu);
  }
  Phase::ActionTreeObject::LeafNodeInfo::SetLeafNodeState((uint64_t)v11, 6u);
}

uint64_t Phase::ActionTreeManager::GeneratorStreamSeek(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v4 = *(void **)(a1 + 56);
  if (!v4) {
    return 1;
  }
  while (1)
  {
    uint64_t v5 = v4[4];
    if (*(unsigned char *)(v5 + 144))
    {
      uint64_t v8 = v5 + 56;
      uint64_t v6 = *(void *)(v5 + 56);
      uint64_t v7 = *(void *)(v8 + 8);
      uint64_t v9 = v7 - v6;
      if (v7 != v6) {
        break;
      }
    }
LABEL_9:
    uint64_t v4 = (void *)*v4;
    if (!v4) {
      return 1;
    }
  }
  uint64_t v10 = 0;
  unint64_t v11 = 0xF0F0F0F0F0F0F0F1 * (v9 >> 3);
  unsigned int v12 = 1;
  while (1)
  {
    uint64_t v13 = v6 + 136 * v10;
    uint64_t v15 = *(void *)(v13 + 8);
    uint64_t v14 = v13 + 8;
    if (v15 == a2 && *(void *)(v14 + 8) == a3 && *(void *)(v6 + 136 * v10 + 32)) {
      break;
    }
    uint64_t v10 = v12;
    if (v11 <= v12++) {
      goto LABEL_9;
    }
  }
  uint64_t v18 = v6 + 136 * v10;
  int v20 = *(unsigned __int8 *)(v18 + 40);
  uint64_t v19 = (unsigned char *)(v18 + 40);
  if (!v20
    || (*(double *)(v6 + 136 * v10 + 48) = a4,
        uint64_t result = Phase::ActionTreeObject::LeafNodeInfo::GeneratorStreamSeek((Phase::ActionTreeObject::LeafNodeInfo *)(v6 + 136 * v10), *(Phase::Controller::TaskManager **)(a1 + 224)), *v19))
  {
    std::terminate();
  }
  return result;
}

uint64_t Phase::ActionTreeManager::SubmitGeneratorPlayStateChanged(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  if ((unint64_t)(*(void *)(result + 264) - 1) <= 1)
  {
    uint64_t v4 = *(void **)(result + 56);
    if (v4)
    {
      unsigned int v7 = a4 & 0xFFFFFFFD;
      do
      {
        uint64_t v8 = v4[4];
        if (*(unsigned char *)(v8 + 144))
        {
          uint64_t v9 = *(void *)(v8 + 56);
          if (*(void *)(v8 + 64) != v9)
          {
            uint64_t v10 = 0;
            unsigned int v11 = 1;
            do
            {
              uint64_t v12 = v9 + 136 * v10;
              uint64_t v14 = *(void *)(v12 + 8);
              uint64_t v13 = v12 + 8;
              if (v14 == a2 && *(void *)(v13 + 8) == a3 && *(unsigned char *)(v9 + 136 * v10 + 64) == 4)
              {
                if (v7 == 1)
                {
                  uint64_t result = Phase::Controller::StreamRenderer::Start(*(Phase::Controller::StreamRenderer **)(v9 + 136 * v10 + 32));
                }
                else if (!v7)
                {
                  uint64_t result = Phase::Controller::StreamRenderer::Pause(*(void *)(v9 + 136 * v10 + 32));
                }
              }
              uint64_t v10 = v11;
              uint64_t v9 = *(void *)(v8 + 56);
            }
            while (0xF0F0F0F0F0F0F0F1 * ((*(void *)(v8 + 64) - v9) >> 3) > v11++);
          }
        }
        uint64_t v4 = (void *)*v4;
      }
      while (v4);
    }
  }
  return result;
}

BOOL Phase::ActionTreeManager::IORenderOutput(uint64_t a1, uint64_t a2, uint64_t a3, const AudioTimeStamp *a4, uint64_t a5, unsigned int *a6)
{
  uint64_t v8 = (atomic_uint *)(a1 + 128);
  atomic_fetch_add((atomic_uint *volatile)(a1 + 128), 1u);
  uint64_t v9 = atomic_load((unint64_t *)(a1 + 120));
  if (!v9)
  {
    uint64_t v14 = 0;
    goto LABEL_6;
  }
  caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl::findSlotForKey(v9, a2, a3);
  uint64_t v14 = (atomic_uint *)v12;
  if (!v12)
  {
LABEL_6:
    atomic_fetch_add(v8, 0xFFFFFFFF);
    goto LABEL_7;
  }
  atomic_fetch_add((atomic_uint *volatile)v12, 1u);
  uint64_t v15 = *(Phase::Controller::StreamRenderer **)(v12 + 24);
  atomic_fetch_add((atomic_uint *volatile)(a1 + 128), 0xFFFFFFFF);
  if (v15)
  {
    BOOL v16 = Phase::Controller::StreamRenderer::IORender(v15, a4, a5, a6, v13);
LABEL_15:
    atomic_fetch_add(v14, 0xFFFFFFFF);
    return v16;
  }
LABEL_7:
  if (a6 && *a6)
  {
    unint64_t v17 = 0;
    uint64_t v18 = (void **)(a6 + 4);
    do
    {
      BOOL v16 = *v18 != 0;
      if (!*v18) {
        break;
      }
      bzero(*v18, *((unsigned int *)v18 - 1));
      ++v17;
      v18 += 2;
    }
    while (v17 < *a6);
  }
  else
  {
    BOOL v16 = 0;
  }
  if (v14) {
    goto LABEL_15;
  }
  return v16;
}

void sub_221E74C58(_Unwind_Exception *a1)
{
  atomic_fetch_add(v1, 0xFFFFFFFF);
  _Unwind_Resume(a1);
}

uint64_t Phase::ActionTreeManager::StopActionTreesWithActionTreeAsset(Phase::ActionTreeManager *this, uint64_t a2)
{
  uint64_t v2 = (void *)*((void *)this + 7);
  if (!v2) {
    return 0;
  }
  uint64_t v5 = 0;
  do
  {
    uint64_t v6 = (Phase::ActionTreeObject *)v2[4];
    if (**((void **)v6 + 3) == a2)
    {
      if (Phase::ActionTreeManager::StopByAssetUpdate(this, v6)) {
        uint64_t v5 = 1;
      }
      else {
        uint64_t v5 = v5;
      }
    }
    uint64_t v2 = (void *)*v2;
  }
  while (v2);
  return v5;
}

BOOL Phase::ActionTreeManager::StopByAssetUpdate(Phase::ActionTreeManager *this, Phase::ActionTreeObject *a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  int v2 = *((unsigned __int8 *)a2 + 144);
  if ((v2 - 1) >= 8) {
    return (v2 - 9) < 2;
  }
  uint64_t v5 = **(id **)(Phase::Logger::GetInstance(this) + 688);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)a2;
    int v8 = 136315650;
    uint64_t v9 = "ActionTreeManager.mm";
    __int16 v10 = 1024;
    int v11 = 6028;
    __int16 v12 = 2048;
    uint64_t v13 = v6;
    _os_log_impl(&dword_221E5E000, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Warning: Stopping Action tree %llu due to asset update.", (uint8_t *)&v8, 0x1Cu);
  }
  Phase::ActionTreeManager::StopActionTree((uint64_t)this, *(void *)a2, *((void *)a2 + 1), PHASESoundEventPrepareHandlerReasonPrepared, PHASESoundEventStartHandlerReasonFinishedPlaying);
  return 1;
}

BOOL Phase::ActionTreeManager::StopActionTreesWithSoundAsset(Phase::ActionTreeManager *this, uint64_t a2)
{
  int v2 = (void *)*((void *)this + 7);
  if (!v2) {
    return 0;
  }
  do
  {
    uint64_t v5 = (Phase::ActionTreeObject *)v2[4];
    for (uint64_t i = *((void *)v5 + 7); ; i += 136)
    {
      if (i == *((void *)v5 + 8))
      {
        BOOL result = 0;
        goto LABEL_8;
      }
      if (*(void *)(i + 56) == a2) {
        break;
      }
    }
    BOOL result = Phase::ActionTreeManager::StopByAssetUpdate(this, v5);
LABEL_8:
    int v2 = (void *)*v2;
    if (v2) {
      BOOL v8 = !result;
    }
    else {
      BOOL v8 = 0;
    }
  }
  while (v8);
  return result;
}

uint64_t Phase::ActionTreeManager::StopActionTreesWithGlobalMetaParameterAsset(Phase::ActionTreeManager *this, uint64_t a2)
{
  int v2 = (void *)*((void *)this + 7);
  if (!v2) {
    return 0;
  }
  uint64_t v5 = 0;
  do
  {
    uint64_t v6 = (Phase::ActionTreeObject *)v2[4];
    uint64_t v7 = *((void *)v6 + 3);
    uint64_t v8 = *(unsigned int *)(v7 + 8);
    if (v8)
    {
      uint64_t v9 = *(uint64_t **)(v7 + 16);
      while (1)
      {
        uint64_t v10 = *v9++;
        if (v10 == a2) {
          break;
        }
        if (!--v8) {
          goto LABEL_11;
        }
      }
      if (Phase::ActionTreeManager::StopByAssetUpdate(this, v6)) {
        uint64_t v5 = 1;
      }
      else {
        uint64_t v5 = v5;
      }
    }
LABEL_11:
    int v2 = (void *)*v2;
  }
  while (v2);
  return v5;
}

uint64_t Phase::ActionTreeManager::StopActionTreesWithListenerSourceId(Phase::ActionTreeManager *this, Handle64 a2)
{
  int v2 = (void *)*((void *)this + 7);
  if (!v2) {
    return 0;
  }
  uint64_t v5 = 0;
  do
  {
    uint64_t v6 = (Phase::ActionTreeObject *)v2[4];
    for (uint64_t i = *((void *)v6 + 10); i != *((void *)v6 + 11); i += 96)
    {
      if (*(void *)(i + 32) == a2.mData || *(void *)(i + 24) == a2.mData)
      {
        if (Phase::ActionTreeManager::StopByAssetUpdate(this, v6)) {
          uint64_t v5 = 1;
        }
        else {
          uint64_t v5 = v5;
        }
        break;
      }
    }
    int v2 = (void *)*v2;
  }
  while (v2);
  return v5;
}

void *Phase::ActionTreeManager::GetActiveGroups(void *result, uint64_t a2)
{
  for (uint64_t i = (void *)result[7]; i; uint64_t i = (void *)*i)
  {
    uint64_t v4 = i[4];
    unsigned int v5 = *(unsigned __int8 *)(v4 + 144);
    BOOL v6 = v5 > 9;
    int v7 = (1 << v5) & 0x230;
    if (!v6 && v7 != 0)
    {
      uint64_t v9 = *(void *)(v4 + 56);
      uint64_t v10 = *(void *)(v4 + 64);
      while (v9 != v10)
      {
        if ((*(unsigned char *)(v9 + 24) & 0xFC) == 4) {
          BOOL result = std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>(a2, (unint64_t *)(v9 + 72), (void *)(v9 + 72));
        }
        v9 += 136;
      }
    }
  }
  return result;
}

Phase::Logger *Phase::ActionTreeManager::HandleGeneratorError(Phase::Logger *result, uint64_t a2, uint64_t a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v3 = (uint64_t **)*((void *)result + 7);
  if (v3)
  {
    uint64_t v4 = (uint64_t)result;
    while (2)
    {
      unsigned int v5 = v3[4];
      uint64_t v6 = v5[7];
      uint64_t v7 = v5[8];
      while (v6 != v7)
      {
        if (*(void *)(v6 + 8) == a2 && *(void *)(v6 + 16) == a3)
        {
          uint64_t v8 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(result)
                                                                                             + 688)));
          if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
          {
            uint64_t v9 = [(id)v3[4][2] identifier];
            int v10 = 136315650;
            int v11 = "ActionTreeManager.mm";
            __int16 v12 = 1024;
            int v13 = 6201;
            __int16 v14 = 2112;
            uint64_t v15 = v9;
            _os_log_impl(&dword_221E5E000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d Received Generator error.  Stopping action tree instance with action tree UID: %@", (uint8_t *)&v10, 0x1Cu);
          }
          return (Phase::Logger *)Phase::ActionTreeManager::StopActionTree(v4, *v3[4], v3[4][1], PHASESoundEventPrepareHandlerReasonFailure, PHASESoundEventStartHandlerReasonFailure);
        }
        v6 += 136;
      }
      uint64_t v3 = (uint64_t **)*v3;
      if (v3) {
        continue;
      }
      break;
    }
  }
  return result;
}

void sub_221E75170(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

Phase::Logger *Phase::ActionTreeManager::HandleSubmixError(Phase::Logger *result, uint64_t a2, uint64_t a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v3 = (uint64_t **)*((void *)result + 7);
  if (v3)
  {
    uint64_t v4 = (uint64_t)result;
    while (2)
    {
      unsigned int v5 = v3[4];
      uint64_t v6 = v5[10];
      uint64_t v7 = v5[11];
      while (v6 != v7)
      {
        if (*(void *)(v6 + 8) == a2 && *(void *)(v6 + 16) == a3)
        {
          uint64_t v8 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(result)
                                                                                             + 688)));
          if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
          {
            uint64_t v9 = [(id)v3[4][2] identifier];
            int v10 = 136315650;
            int v11 = "ActionTreeManager.mm";
            __int16 v12 = 1024;
            int v13 = 6220;
            __int16 v14 = 2112;
            uint64_t v15 = v9;
            _os_log_impl(&dword_221E5E000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d Received Submix error.  Stopping action tree instance with action tree UID: %@", (uint8_t *)&v10, 0x1Cu);
          }
          return (Phase::Logger *)Phase::ActionTreeManager::StopActionTree(v4, *v3[4], v3[4][1], PHASESoundEventPrepareHandlerReasonFailure, PHASESoundEventStartHandlerReasonFailure);
        }
        v6 += 96;
      }
      uint64_t v3 = (uint64_t **)*v3;
      if (v3) {
        continue;
      }
      break;
    }
  }
  return result;
}

void sub_221E752DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void Phase::ActionTreeManager::~ActionTreeManager(Phase::ActionTreeManager *this)
{
  caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::~guarded_lookup_hash_table((uint64_t)this + 80);
  std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::~__hash_table((uint64_t)this + 40);

  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::~Commandable(this);
}

{
  uint64_t vars8;

  caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::~guarded_lookup_hash_table((uint64_t)this + 80);
  std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::~__hash_table((uint64_t)this + 40);
  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::~Commandable(this);

  JUMPOUT(0x223C938A0);
}

void std::vector<Phase::MetaParamValue>::resize(char **a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  unint64_t v5 = (v3 - *a1) >> 3;
  if (a2 <= v5)
  {
    if (a2 >= v5) {
      return;
    }
    uint64_t v16 = &v4[8 * a2];
    goto LABEL_20;
  }
  unint64_t v6 = a2 - v5;
  uint64_t v7 = a1[2];
  if (a2 - v5 <= (v7 - v3) >> 3)
  {
    bzero(a1[1], 8 * v6);
    uint64_t v16 = &v3[8 * v6];
LABEL_20:
    a1[1] = v16;
    return;
  }
  if (a2 >> 61) {
    std::vector<Phase::MetaParamValue>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v8 = v7 - v4;
  uint64_t v9 = v8 >> 2;
  if (v8 >> 2 <= a2) {
    uint64_t v9 = a2;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v9;
  }
  if (v10 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  int v11 = (char *)operator new(8 * v10);
  __int16 v12 = &v11[8 * v5];
  int v13 = &v11[8 * v10];
  bzero(v12, 8 * v6);
  __int16 v14 = &v12[8 * v6];
  if (v3 != v4)
  {
    do
    {
      uint64_t v15 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v12 - 1) = v15;
      v12 -= 8;
    }
    while (v3 != v4);
    uint64_t v3 = v4;
  }
  *a1 = v12;
  a1[1] = v14;
  a1[2] = v13;
  if (v3)
  {
    operator delete(v3);
  }
}

void std::vector<Phase::MetaParamValue>::__throw_length_error[abi:ne180100]()
{
}

uint64_t std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__assign_with_size[abi:ne180100]<Phase::Envelope<double>::SegmentInternal*,Phase::Envelope<double>::SegmentInternal*>(uint64_t a1, void *a2, void *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(void **)a1;
  if (a4 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 6)
  {
    std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__vdeallocate((void **)a1);
    if (a4 >> 58) {
      std::vector<Phase::MetaParamValue>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v11 = v10 >> 5;
    if (v10 >> 5 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__vallocate[abi:ne180100]((void *)a1, v12);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Phase::Envelope<double>::SegmentInternal>,Phase::Envelope<double>::SegmentInternal*,Phase::Envelope<double>::SegmentInternal*,Phase::Envelope<double>::SegmentInternal*>(v8, (uint64_t)a2, (uint64_t)a3, *(void *)(a1 + 8));
    goto LABEL_11;
  }
  unint64_t v14 = (uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 6;
  if (v14 < a4)
  {
    uint64_t v15 = &a2[8 * v14];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<Phase::Envelope<double>::SegmentInternal *,Phase::Envelope<double>::SegmentInternal *,Phase::Envelope<double>::SegmentInternal *>((uint64_t)&v20, a2, v15, v9);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Phase::Envelope<double>::SegmentInternal>,Phase::Envelope<double>::SegmentInternal*,Phase::Envelope<double>::SegmentInternal*,Phase::Envelope<double>::SegmentInternal*>(v8, (uint64_t)v15, (uint64_t)a3, *(void *)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = result;
    return result;
  }
  uint64_t result = (uint64_t)std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<Phase::Envelope<double>::SegmentInternal *,Phase::Envelope<double>::SegmentInternal *,Phase::Envelope<double>::SegmentInternal *>((uint64_t)&v21, a2, a3, v9);
  uint64_t v17 = v16;
  uint64_t v18 = *(void *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      uint64_t v19 = v18 - 64;
      uint64_t result = (uint64_t)std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100]((void *)(v18 - 32));
      uint64_t v18 = v19;
    }
    while (v19 != v17);
  }
  *(void *)(a1 + 8) = v17;
  return result;
}

void sub_221E75610(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_221E75618(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__vdeallocate(void **a1)
{
  uint64_t v1 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        unint64_t v5 = v3 - 64;
        std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100]((void *)v3 - 4);
        uint64_t v3 = v5;
      }
      while (v5 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 58) {
    std::vector<Phase::MetaParamValue>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Envelope<double>::SegmentInternal>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[64 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Phase::Envelope<double>::SegmentInternal>,Phase::Envelope<double>::SegmentInternal*,Phase::Envelope<double>::SegmentInternal*,Phase::Envelope<double>::SegmentInternal*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = (void *)(a4 + v7);
      uint64_t v9 = a2 + v7;
      *uint64_t v8 = *(void *)(a2 + v7);
      v8[1] = *(void *)(a2 + v7 + 8);
      void v8[2] = *(void *)(a2 + v7 + 16);
      v8[3] = *(void *)(a2 + v7 + 24);
      std::__function::__value_func<double ()(double)>::__value_func[abi:ne180100](a4 + v7 + 32, a2 + v7 + 32);
      v7 += 64;
    }
    while (v9 + 64 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_221E75760(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 32;
    do
    {
      std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100]((void *)(v4 + v2));
      v2 -= 64;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__value_func<double ()(double)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

{
  void *v3;
  uint64_t v4;

  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  char *v3 = 0;
  return a1;
}

void *std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<Phase::Envelope<double>::SegmentInternal *,Phase::Envelope<double>::SegmentInternal *,Phase::Envelope<double>::SegmentInternal *>(uint64_t a1, void *a2, void *a3, void *a4)
{
  unint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  unint64_t v6 = a3;
  do
  {
    *a4 = *v5;
    a4[1] = v5[1];
    a4[2] = v5[2];
    a4[3] = v5[3];
    std::function<double ()(double)>::operator=(a4 + 4, (uint64_t)(v5 + 4));
    a4 += 8;
    v5 += 8;
  }
  while (v5 != v6);
  return v6;
}

void *std::function<double ()(double)>::operator=(void *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<double ()(double)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<double ()(double)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](v4);
  return a1;
}

void *std::__function::__value_func<double ()(double)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    unint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_221E75BF8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Envelope<double>::SegmentInternal>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 58) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(a2 << 6);
}

Phase::Logger *Phase::Fader<double>::Fader(Phase::Logger *a1, double a2)
{
  uint64_t v4 = Phase::Envelope<double>::Envelope(a1);
  *((void *)v4 + 3) = 0;
  *((void *)v4 + 4) = 0;
  *((void *)v4 + 5) = 0;
  Phase::Fader<double>::SetDefaultValue((uint64_t)v4, a2);
  return a1;
}

void sub_221E75C88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

Phase::Logger *Phase::Envelope<double>::Envelope(Phase::Logger *a1)
{
  v5[4] = *MEMORY[0x263EF8340];
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = 0;
  v3[0] = 0.0;
  v3[1] = 0.0;
  v4[0] = 0.0;
  v4[1] = 0.0;
  v5[0] = &unk_26D471528;
  v5[3] = v5;
  Phase::Envelope<double>::InitializeFromSingleSegment(a1, v3, v4);
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](v5);
  return a1;
}

void sub_221E75D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](v4);
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

double Phase::Envelope<double>::InitializeFromSingleSegment(Phase::Logger *a1, double *a2, double *a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  double v4 = *a3;
  if (*a2 > *a3)
  {
    uint64_t v10 = **(id **)(Phase::Logger::GetInstance(a1) + 96);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      double v11 = *a2;
      double v12 = *a3;
      *(_DWORD *)unint64_t v14 = 136315906;
      *(void *)&v14[4] = "Envelope.hpp";
      *(_WORD *)&v14[12] = 1024;
      *(_DWORD *)&v14[14] = 243;
      *(_WORD *)&v14[18] = 2048;
      *(double *)&v14[20] = v11;
      *(_WORD *)&v14[28] = 2048;
      *(double *)&v14[30] = v12;
      _os_log_impl(&dword_221E5E000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (EnvelopeException::InvalidStartPoint) [!(inStartPoint.x <= inSegment.mEndPoint.x) is true]: \"Invalid start point x value: %f. Must be <= end point x value: %f\"", v14, 0x26u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _ZN5Phase17EnvelopeException17InvalidStartPointCI1St11logic_errorEPKc(exception, "Invalid start point x value: %f. Must be <= end point x value: %f");
  }
  *(void *)unint64_t v14 = 0;
  *(void *)&v14[8] = 0;
  uint64_t v6 = *((void *)a3 + 1);
  *(double *)&v14[16] = v4;
  *(void *)&v14[24] = v6;
  std::__function::__value_func<double ()(double)>::__value_func[abi:ne180100]((uint64_t)&v14[32], (uint64_t)(a3 + 2));
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::assign((uint64_t)a1, 1uLL, v14);
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&v14[32]);
  uint64_t v7 = *(double **)a1;
  double *v7 = *a2;
  double result = a2[1];
  v7[1] = result;
  return result;
}

void sub_221E75EF0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *_ZN5Phase17EnvelopeException17InvalidStartPointCI1St11logic_errorEPKc(std::logic_error *a1, const char *a2)
{
  double result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)&unk_26D471588;
  return result;
}

uint64_t std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::assign(uint64_t result, unint64_t a2, void *a3)
{
  unint64_t v5 = (void *)result;
  uint64_t v6 = *(void **)result;
  if (a2 <= (uint64_t)(*(void *)(result + 16) - *(void *)result) >> 6)
  {
    uint64_t v13 = *(void *)(result + 8) - (void)v6;
    unint64_t v14 = v13 >> 6;
    if (v13 >> 6 >= a2) {
      uint64_t v15 = a2;
    }
    else {
      uint64_t v15 = v13 >> 6;
    }
    for (; v15; --v15)
    {
      void *v6 = *a3;
      v6[1] = a3[1];
      v6[2] = a3[2];
      v6[3] = a3[3];
      double result = (uint64_t)std::function<double ()(double)>::operator=(v6 + 4, (uint64_t)(a3 + 4));
      v6 += 8;
    }
    if (a2 <= v14)
    {
      uint64_t v19 = v5[1];
      unint64_t v20 = *v5 + (a2 << 6);
      if (v19 != v20)
      {
        do
        {
          uint64_t v21 = v19 - 64;
          double result = (uint64_t)std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100]((void *)(v19 - 32));
          uint64_t v19 = v21;
        }
        while (v21 != v20);
      }
      v5[1] = v20;
    }
    else
    {
      uint64_t v16 = (void *)v5[1];
      uint64_t v17 = &v16[8 * (a2 - v14)];
      unint64_t v18 = (a2 << 6) - (v14 << 6);
      do
      {
        *uint64_t v16 = *a3;
        v16[1] = a3[1];
        v16[2] = a3[2];
        v16[3] = a3[3];
        double result = std::__function::__value_func<double ()(double)>::__value_func[abi:ne180100]((uint64_t)(v16 + 4), (uint64_t)(a3 + 4));
        v16 += 8;
        v18 -= 64;
      }
      while (v18);
      v5[1] = v17;
    }
  }
  else
  {
    std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__vdeallocate((void **)result);
    if (a2 >> 58) {
      std::vector<Phase::MetaParamValue>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v7 = v5[2] - *v5;
    uint64_t v8 = v7 >> 5;
    if (v7 >> 5 <= a2) {
      uint64_t v8 = a2;
    }
    if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v9 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v8;
    }
    std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__vallocate[abi:ne180100](v5, v9);
    uint64_t v10 = (void *)v5[1];
    double v11 = &v10[8 * a2];
    unint64_t v12 = a2 << 6;
    do
    {
      *uint64_t v10 = *a3;
      v10[1] = a3[1];
      void v10[2] = a3[2];
      v10[3] = a3[3];
      double result = std::__function::__value_func<double ()(double)>::__value_func[abi:ne180100]((uint64_t)(v10 + 4), (uint64_t)(a3 + 4));
      v10 += 8;
      v12 -= 64;
    }
    while (v12);
    v5[1] = v11;
  }
  return result;
}

void sub_221E7611C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_221E76124(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void Phase::EnvelopeException::InvalidStartPoint::~InvalidStartPoint(std::logic_error *this)
{
  std::logic_error::~logic_error(this);

  JUMPOUT(0x223C938A0);
}

void std::__function::__func<Phase::Envelope<double>::Envelope(void)::{lambda(double)#1},std::allocator<Phase::Envelope<double>::Envelope(void)::{lambda(double)#1}>,double ()(double)>::~__func()
{
}

void *std::__function::__func<Phase::Envelope<double>::Envelope(void)::{lambda(double)#1},std::allocator<Phase::Envelope<double>::Envelope(void)::{lambda(double)#1}>,double ()(double)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_26D471528;
  return result;
}

void std::__function::__func<Phase::Envelope<double>::Envelope(void)::{lambda(double)#1},std::allocator<Phase::Envelope<double>::Envelope(void)::{lambda(double)#1}>,double ()(double)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D471528;
}

double std::__function::__func<Phase::Envelope<double>::Envelope(void)::{lambda(double)#1},std::allocator<Phase::Envelope<double>::Envelope(void)::{lambda(double)#1}>,double ()(double)>::operator()(uint64_t a1, uint64_t a2)
{
  return *(double *)a2;
}

void std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    double v4 = (char *)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = v4 - 64;
        std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100]((void *)v4 - 4);
        double v4 = v6;
      }
      while (v6 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void Phase::Controller::GetCurveFunctionFromCurveType<double>(Phase::Logger *a1@<X0>, void *a2@<X8>)
{
  int v2 = (int)a1;
  uint64_t v12 = *MEMORY[0x263EF8340];
  if ((uint64_t)a1 > 1668434002)
  {
    if ((uint64_t)a1 > 1668434500)
    {
      if ((uint64_t)a1 <= 1668436838)
      {
        if (a1 == (Phase::Logger *)1668434501)
        {
          double v4 = (uint64_t (*)())Phase::CurveFunction::JumpToEndValue<double>;
          goto LABEL_31;
        }
        if (a1 == (Phase::Logger *)1668435054)
        {
LABEL_30:
          double v4 = Phase::CurveFunction::Linear<double>;
          goto LABEL_31;
        }
      }
      else
      {
        if (a1 == (Phase::Logger *)1668436839)
        {
LABEL_22:
          double v4 = (uint64_t (*)())Phase::CurveFunction::Sigmoid<double>;
          goto LABEL_31;
        }
        if (a1 == (Phase::Logger *)1668436846)
        {
LABEL_23:
          double v4 = (uint64_t (*)())Phase::CurveFunction::Sine<double>;
          goto LABEL_31;
        }
        if (a1 == (Phase::Logger *)1668436849)
        {
LABEL_13:
          double v4 = (uint64_t (*)())Phase::CurveFunction::Squared<double>;
          goto LABEL_31;
        }
      }
    }
    else if ((uint64_t)a1 <= 1668434246)
    {
      if (a1 == (Phase::Logger *)1668434003)
      {
        double v4 = (uint64_t (*)())Phase::CurveFunction::HoldStartValue<double>;
        goto LABEL_31;
      }
      if (a1 == (Phase::Logger *)1668434243)
      {
LABEL_16:
        double v4 = (uint64_t (*)())Phase::CurveFunction::InverseCubed<double>;
        goto LABEL_31;
      }
    }
    else
    {
      if (a1 == (Phase::Logger *)1668434247)
      {
LABEL_20:
        double v4 = (uint64_t (*)())Phase::CurveFunction::InverseSigmoid<double>;
        goto LABEL_31;
      }
      if (a1 == (Phase::Logger *)1668434257)
      {
LABEL_21:
        double v4 = (uint64_t (*)())Phase::CurveFunction::InverseSquared<double>;
        goto LABEL_31;
      }
      if (a1 == (Phase::Logger *)1668434259)
      {
LABEL_8:
        double v4 = (uint64_t (*)())Phase::CurveFunction::InverseSine<double>;
        goto LABEL_31;
      }
    }
LABEL_28:
    unint64_t v5 = **(id **)(Phase::Logger::GetInstance(a1) + 640);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      int v6 = 136315650;
      uint64_t v7 = "CurveUtility.hpp";
      __int16 v8 = 1024;
      int v9 = 90;
      __int16 v10 = 1024;
      int v11 = v2;
      _os_log_impl(&dword_221E5E000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d Unsupported PHASECurveType %d. Setting the curve to linear.", (uint8_t *)&v6, 0x18u);
    }
    goto LABEL_30;
  }
  switch((unint64_t)a1)
  {
    case 0uLL:
      goto LABEL_30;
    case 1uLL:
      goto LABEL_13;
    case 2uLL:
      goto LABEL_21;
    case 3uLL:
      break;
    case 4uLL:
      goto LABEL_16;
    case 5uLL:
      goto LABEL_8;
    case 6uLL:
      goto LABEL_23;
    case 7uLL:
      goto LABEL_22;
    case 8uLL:
      goto LABEL_20;
    default:
      if (a1 != (Phase::Logger *)1668432757) {
        goto LABEL_28;
      }
      break;
  }
  double v4 = (uint64_t (*)())Phase::CurveFunction::Cubed<double>;
LABEL_31:
  *a2 = &unk_26D4715B0;
  a2[1] = v4;
  a2[3] = a2;
}

double Phase::Envelope<double>::operator()(double **a1, double a2)
{
  uint64_t v3 = *a1;
  double v4 = a1[1];
  double v5 = *v3;
  double v6 = *(v4 - 6);
  BOOL v7 = v6 >= a2 && v5 <= a2;
  double v8 = fmin(fmax(a2, v5), v6);
  if (!v7) {
    a2 = v8;
  }
  if (v4 != v3)
  {
    while (a2 < *v3 || a2 >= v3[2])
    {
      v3 += 8;
      if (v3 == v4) {
        goto LABEL_14;
      }
    }
  }
  if (v3 == v4)
  {
LABEL_14:
    if (a2 != *(v4 - 6)) {
      std::terminate();
    }
    uint64_t v3 = v4 - 8;
  }

  return Phase::Envelope<double>::SegmentInternal::operator()(v3, a2);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Envelope<double>::Segment>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(48 * a2);
}

void std::__function::__func<Phase::Envelope<double>::Segment::{lambda(double)#1},std::allocator<Phase::Envelope<double>::Segment::{lambda(double)#1}>,double ()(double)>::~__func()
{
}

void *std::__function::__func<Phase::Envelope<double>::Segment::{lambda(double)#1},std::allocator<Phase::Envelope<double>::Segment::{lambda(double)#1}>,double ()(double)>::__clone()
{
  double result = operator new(0x10uLL);
  void *result = &unk_26D471430;
  return result;
}

void std::__function::__func<Phase::Envelope<double>::Segment::{lambda(double)#1},std::allocator<Phase::Envelope<double>::Segment::{lambda(double)#1}>,double ()(double)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D471430;
}

double std::__function::__func<Phase::Envelope<double>::Segment::{lambda(double)#1},std::allocator<Phase::Envelope<double>::Segment::{lambda(double)#1}>,double ()(double)>::operator()(uint64_t a1, uint64_t a2)
{
  return *(double *)a2;
}

void std::vector<Phase::Envelope<double>::Segment,std::allocator<Phase::Envelope<double>::Segment>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  int v2 = (char *)**a1;
  if (v2)
  {
    double v4 = (char *)v1[1];
    double v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        double v6 = v4 - 48;
        std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100]((void *)v4 - 4);
        double v4 = v6;
      }
      while (v6 != v2);
      double v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

double Phase::CurveFunction::Squared<double>(double a1)
{
  return a1 * a1;
}

double Phase::CurveFunction::InverseSquared<double>(double a1)
{
  return 1.0 - (1.0 - a1) * (1.0 - a1);
}

double Phase::CurveFunction::Cubed<double>(double a1)
{
  return a1 * a1 * a1;
}

double Phase::CurveFunction::InverseCubed<double>(double a1)
{
  return 1.0 - (1.0 - a1) * ((1.0 - a1) * (1.0 - a1));
}

long double Phase::CurveFunction::Sine<double>(double a1)
{
  return sin((a1 + -1.0 + 1.0) * 3.14159265 * 0.5) + -1.0 + 1.0;
}

long double Phase::CurveFunction::InverseSine<double>(double a1)
{
  return sin((1.0 - a1) * -3.14159265 * 0.5) + 1.0;
}

void Phase::CurveFunction::Sigmoid<double>(double a1)
{
  if (a1 >= 0.5) {
    sin((1.0 - ((a1 + -0.5) * -2.0 + 1.0)) * 3.14159265 * 0.5);
  }
  else {
    sin((1.0 - (a1 + a1)) * -3.14159265 * 0.5);
  }
}

void Phase::CurveFunction::InverseSigmoid<double>(double a1)
{
  if (a1 >= 0.5) {
    sin((1.0 - (a1 + -0.5 + a1 + -0.5)) * -3.14159265 * 0.5);
  }
  else {
    sin((1.0 - (a1 * -2.0 + 1.0)) * 3.14159265 * 0.5);
  }
}

double Phase::CurveFunction::HoldStartValue<double>()
{
  return 0.0;
}

double Phase::CurveFunction::JumpToEndValue<double>()
{
  return 1.0;
}

void std::__function::__func<double (*)(double),std::allocator<double (*)(double)>,double ()(double)>::~__func()
{
}

void *std::__function::__func<double (*)(double),std::allocator<double (*)(double)>,double ()(double)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26D4715B0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<double (*)(double),std::allocator<double (*)(double)>,double ()(double)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D4715B0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<double (*)(double),std::allocator<double (*)(double)>,double ()(double)>::operator()(uint64_t a1, double *a2)
{
  return (*(uint64_t (**)(double))(a1 + 8))(*a2);
}

void *std::__function::__value_func<double ()(double)>::operator=[abi:ne180100](void *a1, uint64_t a2)
{
  std::__function::__value_func<double ()(double)>::operator=[abi:ne180100](a1);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v4;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void *std::__function::__value_func<double ()(double)>::operator=[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

Phase::Logger *Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Logger *a1, uint64_t a2, double *a3, long long *a4)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = 0;
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (((char *)a4 - (char *)a3) >> 4);
  if (v6 == 1)
  {
    Phase::Envelope<double>::InitializeFromSingleSegment(a1, (double *)a2, a3);
  }
  else if (v6)
  {
    std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__assign_with_size[abi:ne180100]<std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>>((uint64_t)a1, (long long *)a3, a4, v6);
    BOOL v7 = (double *)*((void *)a1 + 1);
    unint64_t v8 = 126 - 2 * __clz(((uint64_t)v7 - *(void *)a1) >> 6);
    if (v7 == *(double **)a1) {
      uint64_t v9 = 0;
    }
    else {
      uint64_t v9 = v8;
    }
    __int16 v10 = std::__introsort<std::_ClassicAlgPolicy,Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1} &,Phase::Envelope<double>::SegmentInternal*,false>(*(long long **)a1, v7, (uint64_t)&v20, v9, 1);
    int v11 = *(long long **)a1;
    if (*(double *)a2 > *(double *)(*(void *)a1 + 16))
    {
      uint64_t v16 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)v10) + 640);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        double v17 = *(double *)a2;
        uint64_t v18 = *(void *)(*(void *)a1 + 16);
        *(_DWORD *)buf = 136315906;
        *(void *)&uint8_t buf[4] = "Envelope.hpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 117;
        *(_WORD *)&unsigned char buf[18] = 2048;
        *(double *)&buf[20] = v17;
        __int16 v22 = 2048;
        uint64_t v23 = v18;
        _os_log_impl(&dword_221E5E000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (EnvelopeException::InvalidStartPoint) [!(inStartPoint.x <= mSegments[0].mEndPoint.x) is true]: \"Invalid start point x value: %f. Must be <= first end point x value: %f\"", buf, 0x26u);
      }
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Invalid start point x value: %f. Must be <= first end point x value: %f");
      exception->__vftable = (std::logic_error_vtbl *)&unk_26D471588;
    }
    *(void *)int v11 = *(void *)a2;
    *((void *)v11 + 1) = *(void *)(a2 + 8);
    uint64_t v12 = (uint64_t)(*((void *)a1 + 1) - (void)v11) >> 6;
    uint64_t v13 = v12 - 1;
    if (v12 != 1)
    {
      unint64_t v14 = &v11[4 * v12 - 7];
      do
      {
        v14[3] = *v14;
        v14 -= 4;
        --v13;
      }
      while (v13);
    }
  }
  else
  {
    *(void *)&uint8_t buf[16] = &unk_26D471430;
    int v24 = &buf[16];
    *(_OWORD *)buf = *(_OWORD *)a2;
    Phase::Envelope<double>::InitializeFromSingleSegment(a1, (double *)a2, (double *)buf);
    std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&buf[16]);
  }
  return a1;
}

void sub_221E76D40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  __cxa_free_exception(v11);
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  _Unwind_Resume(a1);
}

uint64_t std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__assign_with_size[abi:ne180100]<std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>>(uint64_t a1, long long *a2, long long *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(void **)a1;
  if (a4 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 6)
  {
    std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__vdeallocate((void **)a1);
    if (a4 >> 58) {
      std::vector<Phase::MetaParamValue>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v11 = v10 >> 5;
    if (v10 >> 5 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__vallocate[abi:ne180100]((void *)a1, v12);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Phase::Envelope<double>::SegmentInternal>,Phase::Envelope<double>::Segment *,Phase::Envelope<double>::Segment *,Phase::Envelope<double>::SegmentInternal*>(v8, (uint64_t)a2, (uint64_t)a3, *(void *)(a1 + 8));
    goto LABEL_11;
  }
  unint64_t v14 = (uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 6;
  if (v14 < a4)
  {
    uint64_t v15 = &a2[3 * v14];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<Phase::Envelope<double>::Segment *,Phase::Envelope<double>::Segment *,Phase::Envelope<double>::SegmentInternal *>((uint64_t)&v20, a2, v15, (uint64_t)v9);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Phase::Envelope<double>::SegmentInternal>,Phase::Envelope<double>::Segment *,Phase::Envelope<double>::Segment *,Phase::Envelope<double>::SegmentInternal*>(v8, (uint64_t)v15, (uint64_t)a3, *(void *)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = result;
    return result;
  }
  uint64_t result = (uint64_t)std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<Phase::Envelope<double>::Segment *,Phase::Envelope<double>::Segment *,Phase::Envelope<double>::SegmentInternal *>((uint64_t)&v21, a2, a3, (uint64_t)v9);
  uint64_t v17 = v16;
  uint64_t v18 = *(void *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      uint64_t v19 = v18 - 64;
      uint64_t result = (uint64_t)std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100]((void *)(v18 - 32));
      uint64_t v18 = v19;
    }
    while (v19 != v17);
  }
  *(void *)(a1 + 8) = v17;
  return result;
}

void sub_221E76EC4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_221E76ECC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Phase::Envelope<double>::SegmentInternal>,Phase::Envelope<double>::Segment *,Phase::Envelope<double>::Segment *,Phase::Envelope<double>::SegmentInternal*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v6 = 0;
    uint64_t v7 = a2 + 16;
    do
    {
      uint64_t v8 = (void *)(a4 + v6);
      *uint64_t v8 = 0;
      v8[1] = 0;
      uint64_t v9 = v7 - 16;
      void v8[2] = *(void *)(v7 - 16);
      v8[3] = *(void *)(v7 - 8);
      std::__function::__value_func<double ()(double)>::__value_func[abi:ne180100](a4 + v6 + 32, v7);
      v6 += 64;
      v7 += 48;
    }
    while (v9 + 48 != a3);
    a4 += v6;
  }
  return a4;
}

void sub_221E76F5C(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 32;
    do
    {
      std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100]((void *)(v4 + v2));
      v2 -= 64;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

long long *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<Phase::Envelope<double>::Segment *,Phase::Envelope<double>::Segment *,Phase::Envelope<double>::SegmentInternal *>(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v4 = a2;
  v9[5] = *MEMORY[0x263EF8340];
  if (a2 == a3) {
    return a2;
  }
  double v5 = a3;
  do
  {
    uint64_t v6 = a4;
    long long v8 = *v4;
    std::__function::__value_func<double ()(double)>::__value_func[abi:ne180100]((uint64_t)v9, (uint64_t)(v4 + 1));
    *(_OWORD *)uint64_t v6 = 0uLL;
    *(_OWORD *)(v6 + 16) = v8;
    std::__function::__value_func<double ()(double)>::operator=[abi:ne180100]((void *)(v6 + 32), (uint64_t)v9);
    std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](v9);
    v4 += 3;
    a4 = v6 + 64;
  }
  while (v4 != v5);
  return v5;
}

void sub_221E77060(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

long long *std::__introsort<std::_ClassicAlgPolicy,Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1} &,Phase::Envelope<double>::SegmentInternal*,false>(long long *result, double *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v9 = a2;
  uint64_t v10 = (double *)result;
  uint64_t v23 = a2;
  int v24 = (double *)result;
LABEL_2:
  for (uint64_t i = 1 - a4; ; ++i)
  {
    uint64_t v12 = (char *)v9 - (char *)v10;
    unint64_t v13 = ((char *)v9 - (char *)v10) >> 6;
    if (!(!v6 & v5))
    {
      switch(v13)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t v23 = v9 - 8;
          if (*(v9 - 6) < v10[2]) {
            uint64_t result = (long long *)std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<Phase::Envelope<double>::SegmentInternal *&,Phase::Envelope<double>::SegmentInternal *&>((long long **)&v24, (void **)&v23);
          }
          break;
        case 3uLL:
          uint64_t v23 = v9 - 8;
          uint64_t result = (long long *)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1} &,Phase::Envelope<double>::SegmentInternal*>(v10, v10 + 8, v9 - 8);
          break;
        case 4uLL:
          uint64_t v23 = v9 - 8;
          uint64_t result = (long long *)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1} &,Phase::Envelope<double>::SegmentInternal*>((uint64_t)v10, (uint64_t)(v10 + 8), (uint64_t)(v10 + 16), (uint64_t)(v9 - 8));
          break;
        case 5uLL:
          uint64_t v23 = v9 - 8;
          uint64_t result = (long long *)std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1} &,Phase::Envelope<double>::SegmentInternal*>((uint64_t)v10, (uint64_t)(v10 + 8), (uint64_t)(v10 + 16), (uint64_t)(v10 + 24), (uint64_t)(v9 - 8));
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v12 <= 1535)
    {
      if (a5) {
        return (long long *)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1} &,Phase::Envelope<double>::SegmentInternal*>(v10, v9);
      }
      else {
        return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1} &,Phase::Envelope<double>::SegmentInternal*>(v10, v9);
      }
    }
    if (i == 1) {
      break;
    }
    unint64_t v14 = v13 >> 1;
    uint64_t v15 = v9 - 8;
    if ((unint64_t)v12 > 0x2000)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1} &,Phase::Envelope<double>::SegmentInternal*>(v10, &v10[8 * (v13 >> 1)], v15);
      uint64_t v16 = v23;
      uint64_t v17 = (v14 << 6) - 64;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1} &,Phase::Envelope<double>::SegmentInternal*>(v24 + 8, (double *)((char *)v24 + v17), v23 - 16);
      uint64_t v18 = (v14 << 6) + 64;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1} &,Phase::Envelope<double>::SegmentInternal*>(v24 + 16, (double *)((char *)v24 + v18), v16 - 24);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1} &,Phase::Envelope<double>::SegmentInternal*>((double *)((char *)v24 + v17), &v24[8 * v14], (double *)((char *)v24 + v18));
      __int16 v22 = (long long *)&v24[8 * v14];
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<Phase::Envelope<double>::SegmentInternal *&,Phase::Envelope<double>::SegmentInternal *>((long long **)&v24, (void **)&v22);
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1} &,Phase::Envelope<double>::SegmentInternal*>(&v10[8 * (v13 >> 1)], v10, v15);
    }
    if (a5)
    {
      uint64_t v9 = v23;
    }
    else
    {
      uint64_t v9 = v23;
      if (*(v24 - 6) >= v24[2])
      {
        uint64_t result = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<double>::SegmentInternal *,Phase::Envelope<double>::<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1} &>((uint64_t)v24, v23);
        uint64_t v10 = (double *)result;
        goto LABEL_22;
      }
    }
    uint64_t v19 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<double>::SegmentInternal *,Phase::Envelope<double>::<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1} &>((uint64_t)v24, v9);
    if ((v20 & 1) == 0) {
      goto LABEL_20;
    }
    int v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1} &,Phase::Envelope<double>::SegmentInternal*>((uint64_t)v24, v19);
    uint64_t v10 = (double *)(v19 + 4);
    uint64_t result = (long long *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1} &,Phase::Envelope<double>::SegmentInternal*>((uint64_t)(v19 + 4), v9);
    if (result)
    {
      if (v21) {
        return result;
      }
      uint64_t v23 = (double *)v19;
      uint64_t v10 = v24;
      uint64_t v9 = (double *)v19;
    }
    else
    {
      if (!v21)
      {
LABEL_20:
        uint64_t result = (long long *)std::__introsort<std::_ClassicAlgPolicy,Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1} &,Phase::Envelope<double>::SegmentInternal*,false>(v24, v19, a3, -i, a5 & 1);
        uint64_t v10 = (double *)(v19 + 4);
LABEL_22:
        a5 = 0;
        int v24 = v10;
        a4 = -i;
        goto LABEL_2;
      }
      int v24 = (double *)(v19 + 4);
    }
  }
  if (v10 != v9) {
    return std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1} &,Phase::Envelope<double>::SegmentInternal*,Phase::Envelope<double>::SegmentInternal*>((long long *)v10, (long long *)v9, (long long *)v9, a3);
  }
  return result;
}

void *std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<Phase::Envelope<double>::SegmentInternal *&,Phase::Envelope<double>::SegmentInternal *&>(long long **a1, void **a2)
{
  v7[5] = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  long long v5 = **a1;
  long long v6 = (*a1)[1];
  std::__function::__value_func<double ()(double)>::__value_func[abi:ne180100]((uint64_t)v7, (uint64_t)(*a1 + 2));
  *(void *)uint64_t v2 = *v3;
  *((void *)v2 + 1) = v3[1];
  *((void *)v2 + 2) = v3[2];
  *((void *)v2 + 3) = v3[3];
  std::__function::__value_func<double ()(double)>::operator=[abi:ne180100]((void *)v2 + 4, (uint64_t)(v3 + 4));
  *(_OWORD *)uint64_t v3 = v5;
  *((_OWORD *)v3 + 1) = v6;
  std::__function::__value_func<double ()(double)>::operator=[abi:ne180100](v3 + 4, (uint64_t)v7);
  return std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](v7);
}

void sub_221E7742C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1} &,Phase::Envelope<double>::SegmentInternal*>(void *result, void *a2)
{
  v14[5] = *MEMORY[0x263EF8340];
  if (result != a2)
  {
    uint64_t v3 = (char *)result;
    uint64_t v4 = result + 8;
    if (result + 8 != a2)
    {
      uint64_t v5 = 0;
      long long v6 = (double *)result;
      do
      {
        uint64_t v7 = v4;
        if (v6[10] < v6[2])
        {
          *(_OWORD *)uint64_t v12 = *v4;
          *(double *)&v12[16] = v6[10];
          uint64_t v13 = *((void *)v6 + 11);
          std::__function::__value_func<double ()(double)>::__value_func[abi:ne180100]((uint64_t)v14, (uint64_t)(v6 + 12));
          uint64_t v8 = v5;
          while (1)
          {
            uint64_t v9 = v8;
            uint64_t v10 = &v3[v8];
            *((void *)v10 + 8) = *(void *)v10;
            *(_OWORD *)(v10 + 72) = *(_OWORD *)(v10 + 8);
            *((void *)v10 + 11) = *((void *)v10 + 3);
            std::__function::__value_func<double ()(double)>::operator=[abi:ne180100]((void *)v10 + 12, (uint64_t)(v10 + 32));
            if (!v9) {
              break;
            }
            uint64_t v8 = v9 - 64;
            if (*(double *)&v12[16] >= *(double *)&v3[v9 - 48])
            {
              uint64_t v11 = &v3[v9];
              goto LABEL_10;
            }
          }
          uint64_t v11 = v3;
LABEL_10:
          *(void *)uint64_t v11 = *(void *)v12;
          *(_OWORD *)(v11 + 8) = *(_OWORD *)&v12[8];
          *((void *)v11 + 3) = v13;
          std::__function::__value_func<double ()(double)>::operator=[abi:ne180100](&v3[v9 + 32], (uint64_t)v14);
          uint64_t result = std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](v14);
        }
        uint64_t v4 = v7 + 4;
        v5 += 64;
        long long v6 = (double *)v7;
      }
      while (v7 + 4 != (_OWORD *)a2);
    }
  }
  return result;
}

void sub_221E77598(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

_OWORD *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1} &,Phase::Envelope<double>::SegmentInternal*>(_OWORD *result, _OWORD *a2)
{
  v12[5] = *MEMORY[0x263EF8340];
  if (result != a2)
  {
    uint64_t v3 = result + 4;
    if (result + 4 != a2)
    {
      uint64_t v4 = (double *)(result + 6);
      do
      {
        uint64_t v5 = v3;
        if (*((double *)result + 10) < *((double *)result + 2))
        {
          long long v9 = *v3;
          double v10 = *((double *)result + 10);
          uint64_t v11 = *((void *)result + 11);
          std::__function::__value_func<double ()(double)>::__value_func[abi:ne180100]((uint64_t)v12, (uint64_t)(result + 6));
          long long v6 = v4;
          do
          {
            *(v6 - 4) = *(v6 - 12);
            *(_OWORD *)(v6 - 3) = *(_OWORD *)(v6 - 11);
            *(v6 - 1) = *(v6 - 9);
            uint64_t v7 = v6 - 8;
            std::__function::__value_func<double ()(double)>::operator=[abi:ne180100](v6, (uint64_t)(v6 - 8));
            double v8 = *(v6 - 18);
            v6 -= 8;
          }
          while (v10 < v8);
          *((_OWORD *)v7 - 2) = v9;
          *(v7 - 2) = v10;
          *((void *)v7 - 1) = v11;
          std::__function::__value_func<double ()(double)>::operator=[abi:ne180100](v7, (uint64_t)v12);
          std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](v12);
        }
        uint64_t v3 = v5 + 4;
        v4 += 8;
        uint64_t result = v5;
      }
      while (v5 + 4 != a2);
    }
  }
  return result;
}

void sub_221E776D4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1} &,Phase::Envelope<double>::SegmentInternal*>(double *a1, double *a2, double *a3)
{
  double v10 = a1;
  double v8 = a3;
  long long v9 = a2;
  double v3 = a2[2];
  double v4 = a3[2];
  if (v3 < a1[2])
  {
    if (v4 < v3)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<Phase::Envelope<double>::SegmentInternal *&,Phase::Envelope<double>::SegmentInternal *&>((long long **)&v10, (void **)&v8);
      return 1;
    }
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<Phase::Envelope<double>::SegmentInternal *&,Phase::Envelope<double>::SegmentInternal *&>((long long **)&v10, (void **)&v9);
    if (v8[2] >= v9[2]) {
      return 1;
    }
    uint64_t v5 = &v9;
    long long v6 = &v8;
LABEL_9:
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<Phase::Envelope<double>::SegmentInternal *&,Phase::Envelope<double>::SegmentInternal *&>((long long **)v5, (void **)v6);
    return 2;
  }
  if (v4 < v3)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<Phase::Envelope<double>::SegmentInternal *&,Phase::Envelope<double>::SegmentInternal *&>((long long **)&v9, (void **)&v8);
    if (v9[2] >= v10[2]) {
      return 1;
    }
    uint64_t v5 = &v10;
    long long v6 = &v9;
    goto LABEL_9;
  }
  return 0;
}

void *std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<Phase::Envelope<double>::SegmentInternal *&,Phase::Envelope<double>::SegmentInternal *>(long long **a1, void **a2)
{
  v7[5] = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  double v3 = *a2;
  long long v5 = **a1;
  long long v6 = (*a1)[1];
  std::__function::__value_func<double ()(double)>::__value_func[abi:ne180100]((uint64_t)v7, (uint64_t)(*a1 + 2));
  *(void *)uint64_t v2 = *v3;
  *((void *)v2 + 1) = v3[1];
  *((void *)v2 + 2) = v3[2];
  *((void *)v2 + 3) = v3[3];
  std::__function::__value_func<double ()(double)>::operator=[abi:ne180100]((void *)v2 + 4, (uint64_t)(v3 + 4));
  *(_OWORD *)double v3 = v5;
  *((_OWORD *)v3 + 1) = v6;
  std::__function::__value_func<double ()(double)>::operator=[abi:ne180100](v3 + 4, (uint64_t)v7);
  return std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](v7);
}

void sub_221E7788C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

long long *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<double>::SegmentInternal *,Phase::Envelope<double>::<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1} &>(uint64_t a1, double *a2)
{
  uint64_t v2 = a2;
  v21[5] = *MEMORY[0x263EF8340];
  uint64_t v17 = a2;
  long long v4 = *(_OWORD *)(a1 + 16);
  long long v19 = *(_OWORD *)a1;
  long long v20 = v4;
  long long v5 = (void *)(a1 + 32);
  std::__function::__value_func<double ()(double)>::__value_func[abi:ne180100]((uint64_t)v21, a1 + 32);
  if (*(double *)&v20 >= *(v2 - 6))
  {
    unint64_t v9 = a1 + 64;
    do
    {
      uint64_t v7 = (long long *)v9;
      if (v9 >= (unint64_t)v2) {
        break;
      }
      double v10 = *(double *)(v9 + 16);
      v9 += 64;
    }
    while (*(double *)&v20 >= v10);
  }
  else
  {
    uint64_t v6 = a1;
    do
    {
      uint64_t v7 = (long long *)(v6 + 64);
      double v8 = *(double *)(v6 + 80);
      v6 += 64;
    }
    while (*(double *)&v20 >= v8);
  }
  uint64_t v18 = v7;
  if (v7 < (long long *)v2)
  {
    do
    {
      double v11 = *(v2 - 6);
      v2 -= 8;
    }
    while (*(double *)&v20 < v11);
    uint64_t v17 = v2;
  }
  if (v7 < (long long *)v2)
  {
    do
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<Phase::Envelope<double>::SegmentInternal *&,Phase::Envelope<double>::SegmentInternal *&>(&v18, (void **)&v17);
      uint64_t v7 = v18;
      do
      {
        double v12 = *((double *)v7 + 10);
        v7 += 4;
      }
      while (*(double *)&v20 >= v12);
      uint64_t v18 = v7;
      uint64_t v13 = v17 - 8;
      do
      {
        uint64_t v17 = v13;
        double v14 = v13[2];
        v13 -= 8;
      }
      while (*(double *)&v20 < v14);
    }
    while (v7 < (long long *)v13 + 4);
  }
  if (v7 - 4 != (long long *)a1)
  {
    *(void *)a1 = *((void *)v7 - 8);
    *(void *)(a1 + 8) = *((void *)v7 - 7);
    *(void *)(a1 + 16) = *((void *)v7 - 6);
    *(void *)(a1 + 24) = *((void *)v7 - 5);
    std::__function::__value_func<double ()(double)>::operator=[abi:ne180100](v5, (uint64_t)(v7 - 2));
  }
  *(v7 - 4) = v19;
  *(v7 - 3) = v20;
  std::__function::__value_func<double ()(double)>::operator=[abi:ne180100]((void *)v7 - 4, (uint64_t)v21);
  uint64_t v15 = v18;
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](v21);
  return v15;
}

void sub_221E77A60(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

long long *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<double>::SegmentInternal *,Phase::Envelope<double>::<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1} &>(uint64_t a1, void *a2)
{
  v23[5] = *MEMORY[0x263EF8340];
  long long v4 = *(_OWORD *)(a1 + 16);
  long long v21 = *(_OWORD *)a1;
  long long v22 = v4;
  long long v5 = (void *)(a1 + 32);
  std::__function::__value_func<double ()(double)>::__value_func[abi:ne180100]((uint64_t)v23, a1 + 32);
  uint64_t v6 = 0;
  do
  {
    double v7 = *(double *)(a1 + v6 + 80);
    v6 += 64;
  }
  while (v7 < *(double *)&v22);
  double v8 = (long long *)(a1 + v6);
  long long v20 = (long long *)(a1 + v6);
  if (v6 == 64)
  {
    if (v8 >= (long long *)a2)
    {
      unint64_t v9 = a2;
    }
    else
    {
      double v11 = (double *)(a2 - 8);
      do
      {
        double v12 = v11 - 8;
        BOOL v13 = v11[2] < *(double *)&v22 || v8 >= (long long *)v11;
        v11 -= 8;
      }
      while (!v13);
      unint64_t v9 = v12 + 8;
    }
  }
  else
  {
    do
    {
      unint64_t v9 = a2 - 8;
      double v10 = *((double *)a2 - 6);
      a2 -= 8;
    }
    while (v10 >= *(double *)&v22);
  }
  long long v19 = v9;
  double v14 = v8;
  if (v8 < (long long *)v9)
  {
    do
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<Phase::Envelope<double>::SegmentInternal *&,Phase::Envelope<double>::SegmentInternal *&>(&v20, &v19);
      double v14 = v20;
      do
      {
        double v15 = *((double *)v14 + 10);
        v14 += 4;
      }
      while (v15 < *(double *)&v22);
      long long v20 = v14;
      uint64_t v16 = v19 - 8;
      do
      {
        long long v19 = v16;
        double v17 = *((double *)v16 + 2);
        v16 -= 8;
      }
      while (v17 >= *(double *)&v22);
    }
    while (v14 < (long long *)v16 + 4);
  }
  if (v14 - 4 != (long long *)a1)
  {
    *(void *)a1 = *((void *)v14 - 8);
    *(void *)(a1 + 8) = *((void *)v14 - 7);
    *(void *)(a1 + 16) = *((void *)v14 - 6);
    *(void *)(a1 + 24) = *((void *)v14 - 5);
    std::__function::__value_func<double ()(double)>::operator=[abi:ne180100](v5, (uint64_t)(v14 - 2));
  }
  *(v14 - 4) = v21;
  *(v14 - 3) = v22;
  std::__function::__value_func<double ()(double)>::operator=[abi:ne180100]((void *)v14 - 4, (uint64_t)v23);
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](v23);
  return v14 - 4;
}

void sub_221E77C68(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1} &,Phase::Envelope<double>::SegmentInternal*>(uint64_t a1, void *a2)
{
  uint64_t v2 = a2;
  v17[5] = *MEMORY[0x263EF8340];
  double v12 = a2;
  BOOL v13 = (long long *)a1;
  BOOL v4 = 1;
  switch(((uint64_t)a2 - a1) >> 6)
  {
    case 0:
    case 1:
      return v4;
    case 2:
      double v12 = a2 - 8;
      if (*((double *)a2 - 6) < *(double *)(a1 + 16)) {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<Phase::Envelope<double>::SegmentInternal *&,Phase::Envelope<double>::SegmentInternal *&>(&v13, &v12);
      }
      return v4;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1} &,Phase::Envelope<double>::SegmentInternal*>((double *)a1, (double *)(a1 + 64), (double *)a2 - 8);
      return v4;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1} &,Phase::Envelope<double>::SegmentInternal*>(a1, a1 + 64, a1 + 128, (uint64_t)(a2 - 8));
      return v4;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1} &,Phase::Envelope<double>::SegmentInternal*>(a1, a1 + 64, a1 + 128, a1 + 192, (uint64_t)(a2 - 8));
      return v4;
    default:
      uint64_t v5 = a1 + 128;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1} &,Phase::Envelope<double>::SegmentInternal*>((double *)a1, (double *)(a1 + 64), (double *)(a1 + 128));
      uint64_t v6 = a1 + 192;
      if ((void *)(a1 + 192) == v2) {
        return 1;
      }
      int v7 = 0;
      break;
  }
  while (1)
  {
    double v8 = *(double *)(v6 + 16);
    if (v8 < *(double *)(v5 + 16)) {
      break;
    }
LABEL_13:
    uint64_t v5 = v6;
    v6 += 64;
    if ((void *)v6 == v2) {
      return 1;
    }
  }
  long long v14 = *(_OWORD *)v6;
  uint64_t v9 = *(void *)(v6 + 24);
  double v15 = v8;
  uint64_t v16 = v9;
  std::__function::__value_func<double ()(double)>::__value_func[abi:ne180100]((uint64_t)v17, v6 + 32);
  do
  {
    uint64_t v10 = v5;
    *(void *)(v5 + 64) = *(void *)v5;
    *(_OWORD *)(v5 + 72) = *(_OWORD *)(v5 + 8);
    *(void *)(v5 + 88) = *(void *)(v5 + 24);
    std::__function::__value_func<double ()(double)>::operator=[abi:ne180100]((void *)(v5 + 96), v5 + 32);
    if ((long long *)v5 == v13) {
      break;
    }
    v5 -= 64;
  }
  while (v15 < *(double *)(v10 - 48));
  *(_OWORD *)uint64_t v10 = v14;
  *(double *)(v10 + 16) = v15;
  *(void *)(v10 + 24) = v16;
  std::__function::__value_func<double ()(double)>::operator=[abi:ne180100]((void *)(v10 + 32), (uint64_t)v17);
  if (++v7 != 8)
  {
    std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](v17);
    uint64_t v2 = v12;
    goto LABEL_13;
  }
  BOOL v4 = v6 + 64 == (void)v12;
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](v17);
  return v4;
}

void sub_221E77ED0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1} &,Phase::Envelope<double>::SegmentInternal*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v11 = (double *)a2;
  double v12 = (long long *)a1;
  uint64_t v9 = (void *)a4;
  uint64_t v10 = (double *)a3;
  uint64_t result = (void *)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1} &,Phase::Envelope<double>::SegmentInternal*>((double *)a1, (double *)a2, (double *)a3);
  if (*(double *)(a4 + 16) < *(double *)(a3 + 16))
  {
    uint64_t result = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<Phase::Envelope<double>::SegmentInternal *&,Phase::Envelope<double>::SegmentInternal *&>((long long **)&v10, &v9);
    if (v10[2] < *(double *)(a2 + 16))
    {
      uint64_t result = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<Phase::Envelope<double>::SegmentInternal *&,Phase::Envelope<double>::SegmentInternal *&>((long long **)&v11, (void **)&v10);
      if (v11[2] < *(double *)(a1 + 16)) {
        return std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<Phase::Envelope<double>::SegmentInternal *&,Phase::Envelope<double>::SegmentInternal *&>(&v12, (void **)&v11);
      }
    }
  }
  return result;
}

void *std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1} &,Phase::Envelope<double>::SegmentInternal*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  long long v14 = (double *)a2;
  double v15 = (long long *)a1;
  double v12 = (double *)a4;
  BOOL v13 = (double *)a3;
  double v11 = (void *)a5;
  uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1} &,Phase::Envelope<double>::SegmentInternal*>(a1, a2, a3, a4);
  if (*(double *)(a5 + 16) < *(double *)(a4 + 16))
  {
    uint64_t result = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<Phase::Envelope<double>::SegmentInternal *&,Phase::Envelope<double>::SegmentInternal *&>((long long **)&v12, &v11);
    if (v12[2] < *(double *)(a3 + 16))
    {
      uint64_t result = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<Phase::Envelope<double>::SegmentInternal *&,Phase::Envelope<double>::SegmentInternal *&>((long long **)&v13, (void **)&v12);
      if (v13[2] < *(double *)(a2 + 16))
      {
        uint64_t result = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<Phase::Envelope<double>::SegmentInternal *&,Phase::Envelope<double>::SegmentInternal *&>((long long **)&v14, (void **)&v13);
        if (v14[2] < *(double *)(a1 + 16)) {
          return std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<Phase::Envelope<double>::SegmentInternal *&,Phase::Envelope<double>::SegmentInternal *&>(&v15, (void **)&v14);
        }
      }
    }
  }
  return result;
}

long long *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1} &,Phase::Envelope<double>::SegmentInternal*,Phase::Envelope<double>::SegmentInternal*>(long long *a1, long long *a2, long long *a3, uint64_t a4)
{
  long long v19 = a1;
  if (a1 != a2)
  {
    uint64_t v6 = a2;
    int v7 = a1;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) >> 6;
    if ((char *)a2 - (char *)a1 >= 65)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      double v12 = &a1[4 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1} &,Phase::Envelope<double>::SegmentInternal*>(v7, a4, v9, v12);
        v12 -= 4;
        --v11;
      }
      while (v11);
    }
    uint64_t v18 = v6;
    if (v6 == a3)
    {
      a3 = v6;
    }
    else
    {
      BOOL v13 = v6;
      do
      {
        if (*((double *)v13 + 2) < *((double *)v19 + 2))
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<Phase::Envelope<double>::SegmentInternal *&,Phase::Envelope<double>::SegmentInternal *&>(&v18, (void **)&v19);
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1} &,Phase::Envelope<double>::SegmentInternal*>(v19, a4, v9, v19);
          BOOL v13 = v18;
        }
        v13 += 4;
        uint64_t v18 = v13;
      }
      while (v13 != a3);
      int v7 = v19;
      uint64_t v8 = (char *)v6 - (char *)v19;
    }
    if (v8 >= 65)
    {
      unint64_t v14 = (unint64_t)v8 >> 6;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1},Phase::Envelope<double>::SegmentInternal*>((double *)v7, (uint64_t)v6, a4, v14);
        v6 -= 4;
        BOOL v15 = v14 >= 2;
        BOOL v16 = v14-- == 2;
      }
      while (!v16 && v15);
      return v18;
    }
  }
  return a3;
}

void *std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1} &,Phase::Envelope<double>::SegmentInternal*>(void *result, uint64_t a2, uint64_t a3, long long *a4)
{
  v20[5] = *MEMORY[0x263EF8340];
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v5 = a4;
    uint64_t v6 = result;
    uint64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((char *)a4 - (char *)result) >> 6)
    {
      uint64_t v9 = ((char *)a4 - (char *)result) >> 5;
      uint64_t v10 = v9 + 1;
      unint64_t v11 = &result[8 * v9 + 8];
      uint64_t v12 = v9 + 2;
      if (v12 < a3 && *((double *)v11 + 2) < *((double *)v11 + 10))
      {
        v11 += 8;
        uint64_t v10 = v12;
      }
      if (*((double *)v11 + 2) >= *((double *)a4 + 2))
      {
        long long v17 = *a4;
        double v18 = *((double *)a4 + 2);
        uint64_t v19 = *((void *)a4 + 3);
        std::__function::__value_func<double ()(double)>::__value_func[abi:ne180100]((uint64_t)v20, (uint64_t)(a4 + 2));
        do
        {
          BOOL v13 = v11;
          void *v5 = *v11;
          v5[1] = v11[1];
          v5[2] = v11[2];
          v5[3] = v11[3];
          unint64_t v14 = v11 + 4;
          std::__function::__value_func<double ()(double)>::operator=[abi:ne180100](v5 + 4, (uint64_t)(v11 + 4));
          if (v7 < v10) {
            break;
          }
          uint64_t v15 = 2 * v10;
          uint64_t v10 = (2 * v10) | 1;
          unint64_t v11 = &v6[8 * v10];
          uint64_t v16 = v15 + 2;
          if (v16 < a3 && *((double *)v11 + 2) < *((double *)v11 + 10))
          {
            v11 += 8;
            uint64_t v10 = v16;
          }
          uint64_t v5 = v13;
        }
        while (*((double *)v11 + 2) >= v18);
        *(_OWORD *)BOOL v13 = v17;
        *((double *)v13 + 2) = v18;
        v13[3] = v19;
        std::__function::__value_func<double ()(double)>::operator=[abi:ne180100](v14, (uint64_t)v20);
        return std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](v20);
      }
    }
  }
  return result;
}

void sub_221E783E8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

double *std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1},Phase::Envelope<double>::SegmentInternal*>(double *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v12[5] = *MEMORY[0x263EF8340];
  if (a4 >= 2)
  {
    uint64_t v7 = result;
    long long v10 = *(_OWORD *)result;
    long long v11 = *((_OWORD *)result + 1);
    std::__function::__value_func<double ()(double)>::__value_func[abi:ne180100]((uint64_t)v12, (uint64_t)(result + 4));
    uint64_t v8 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1} &,Phase::Envelope<double>::SegmentInternal*>(v7, a3, a4);
    uint64_t v9 = v8;
    if (v8 == (double *)(a2 - 64))
    {
      *(_OWORD *)uint64_t v8 = v10;
      *((_OWORD *)v8 + 1) = v11;
      std::__function::__value_func<double ()(double)>::operator=[abi:ne180100]((void *)v8 + 4, (uint64_t)v12);
    }
    else
    {
      *uint64_t v8 = *(double *)(a2 - 64);
      v8[1] = *(double *)(a2 - 56);
      void v8[2] = *(double *)(a2 - 48);
      v8[3] = *(double *)(a2 - 40);
      std::__function::__value_func<double ()(double)>::operator=[abi:ne180100]((void *)v8 + 4, a2 - 32);
      *(_OWORD *)(a2 - 64) = v10;
      *(_OWORD *)(a2 - 48) = v11;
      std::__function::__value_func<double ()(double)>::operator=[abi:ne180100]((void *)(a2 - 32), (uint64_t)v12);
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1} &,Phase::Envelope<double>::SegmentInternal*>(v7, (uint64_t)(v9 + 8), a3, ((char *)(v9 + 8) - (char *)v7) >> 6);
    }
    return (double *)std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](v12);
  }
  return result;
}

void sub_221E78540(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

double *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1} &,Phase::Envelope<double>::SegmentInternal*>(double *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = 0;
  uint64_t v5 = a3 - 2;
  if (a3 < 2) {
    uint64_t v5 = a3 - 1;
  }
  uint64_t v6 = v5 >> 1;
  do
  {
    uint64_t v7 = &a1[8 * v4 + 8];
    uint64_t v8 = 2 * v4;
    uint64_t v4 = (2 * v4) | 1;
    uint64_t v9 = v8 + 2;
    if (v9 < a3 && v7[2] < v7[10])
    {
      v7 += 8;
      uint64_t v4 = v9;
    }
    *a1 = *v7;
    a1[1] = v7[1];
    a1[2] = v7[2];
    a1[3] = v7[3];
    std::__function::__value_func<double ()(double)>::operator=[abi:ne180100]((void *)a1 + 4, (uint64_t)(v7 + 4));
    a1 = v7;
  }
  while (v4 <= v6);
  return v7;
}

void *std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>(Phase::Vector<double,2ul> const&,std::__wrap_iter<Phase::Envelope<double>::Segment *>,std::__wrap_iter<Phase::Envelope<double>::Segment *>)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1} &,Phase::Envelope<double>::SegmentInternal*>(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v12[5] = *MEMORY[0x263EF8340];
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v5 = result;
    unint64_t v6 = v4 >> 1;
    if (*(double *)&result[8 * (v4 >> 1) + 2] < *(double *)(a2 - 48))
    {
      uint64_t v7 = (void *)(a2 - 64);
      long long v9 = *(_OWORD *)(a2 - 64);
      double v10 = *(double *)(a2 - 48);
      uint64_t v11 = *(void *)(a2 - 40);
      std::__function::__value_func<double ()(double)>::__value_func[abi:ne180100]((uint64_t)v12, a2 - 32);
      do
      {
        uint64_t v8 = v7;
        uint64_t v7 = &v5[8 * v6];
        *uint64_t v8 = *v7;
        v8[1] = v7[1];
        void v8[2] = v7[2];
        v8[3] = v7[3];
        std::__function::__value_func<double ()(double)>::operator=[abi:ne180100](v8 + 4, (uint64_t)(v7 + 4));
        if (!v6) {
          break;
        }
        unint64_t v6 = (v6 - 1) >> 1;
      }
      while (*(double *)&v5[8 * v6 + 2] < v10);
      *(_OWORD *)uint64_t v7 = v9;
      *((double *)v7 + 2) = v10;
      v7[3] = v11;
      std::__function::__value_func<double ()(double)>::operator=[abi:ne180100](v7 + 4, (uint64_t)v12);
      return std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](v12);
    }
  }
  return result;
}

void sub_221E78760(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

double Phase::Envelope<double>::SegmentInternal::operator()(double *a1, double a2)
{
  double v3 = *a1;
  double v4 = a1[2];
  double v5 = *a1 - v4;
  if (v5 < 0.0) {
    double v5 = -v5;
  }
  if (v5 <= 0.001)
  {
    double v6 = 0.0;
    if (v3 <= a2)
    {
      double v6 = 1.0;
      if (v3 >= a2) {
        double v6 = 0.5;
      }
    }
  }
  else
  {
    double v6 = fmin(fmax((a2 - v3) / (v4 - v3), 0.0), 1.0);
  }
  std::function<double ()(double)>::operator()((uint64_t)(a1 + 4), v6);
  return a1[1] + fmin(fmax(v7, 0.0), 1.0) * (a1[3] - a1[1]);
}

uint64_t std::function<double ()(double)>::operator()(uint64_t a1, double a2)
{
  double v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, double *))(*(void *)v2 + 48))(v2, &v4);
}

void std::__throw_bad_optional_access[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x263F8C3B0] + 16;
}

uint64_t std::unique_ptr<Phase::CommandQueue<Phase::LockFreeQueueMPSC>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    Phase::CommandQueue<Phase::LockFreeQueueMPSC>::~CommandQueue(result);
    JUMPOUT(0x223C938A0);
  }
  return result;
}

void Phase::Commandable<128,Phase::LockFreeQueueMPSC>::~Commandable(void *a1)
{
  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::~Commandable(a1);

  JUMPOUT(0x223C938A0);
}

void Phase::CommandQueue<Phase::LockFreeQueueMPSC>::~CommandQueue(uint64_t a1)
{
  for (;
        Phase::LockFreeQueueSPSC::HasData((Phase::LockFreeQueueSPSC *)a1);
        *(_DWORD *)(a1 + 4) += ((*(_DWORD *)(*(void *)(a1 + 16) + *(int *)(a1 + 4)) + 15) & 0xFFFFFFF0) + 16)
  {
    (**(void (***)(void))(*(void *)(a1 + 16) + *(int *)(a1 + 4) + 16))();
  }
  atomic_store(0, (unsigned __int8 *)(a1 + 40));

  Phase::LockFreeQueueSPSC::~LockFreeQueueSPSC((void **)a1);
}

void std::vector<Phase::MetaParamState>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    double v4 = (char *)v1[1];
    double v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        double v6 = v4 - 64;
        double v7 = (void **)(v4 - 56);
        std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100](&v7);
        double v4 = v6;
      }
      while (v6 != v2);
      double v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<Phase::ActionTreeObject::LeafNodeInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (Phase::Controller::StreamRenderer **)**a1;
  if (v2)
  {
    double v4 = (Phase::Controller::StreamRenderer **)v1[1];
    double v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        double v6 = v4 - 17;
        std::unique_ptr<Phase::Controller::StreamRenderer>::reset[abi:ne180100](v4 - 13, 0);
        double v4 = v6;
      }
      while (v6 != v2);
      double v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__split_buffer<Phase::MetaParamState>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 64;
    double v5 = (void **)(i - 56);
    std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *Phase::Fader<double>::SetInternal(uint64_t a1, uint64_t a2, double a3, double a4)
{
  v12[4] = *MEMORY[0x263EF8340];
  if (a4 < 0.0) {
    a4 = 0.0;
  }
  if (a4 == 0.0)
  {
    *(double *)(a1 + 40) = a3;
    double v5 = a3;
  }
  else
  {
    double v5 = *(double *)(a1 + 40);
  }
  v7[0] = 0.0;
  v7[1] = v5;
  v11[0] = a4;
  v11[1] = a3;
  std::__function::__value_func<double ()(double)>::__value_func[abi:ne180100]((uint64_t)v12, a2);
  Phase::Envelope<double>::Envelope((Phase::Logger *)&v8, v7, v11);
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__vdeallocate((void **)a1);
  *(_OWORD *)a1 = v8;
  *(void *)(a1 + 16) = v9;
  uint64_t v9 = 0;
  long long v8 = 0uLL;
  double v10 = (void **)&v8;
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100](&v10);
  uint64_t result = std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](v12);
  *(void *)(a1 + 24) = 0;
  return result;
}

void sub_221E78C3C(_Unwind_Exception *a1, int a2)
{
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](v2);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    std::terminate();
  }
  _Unwind_Resume(a1);
}

Phase::Logger *Phase::Envelope<double>::Envelope(Phase::Logger *a1, double *a2, double *a3)
{
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = 0;
  Phase::Envelope<double>::InitializeFromSingleSegment(a1, a2, a3);
  return a1;
}

void sub_221E78CA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<std::hash<Phase::UniqueObjectId>,std::allocator<std::hash<Phase::UniqueObjectId>>,unsigned int ()(Phase::UniqueObjectId)>::~__func()
{
}

void *std::__function::__func<std::hash<Phase::UniqueObjectId>,std::allocator<std::hash<Phase::UniqueObjectId>>,unsigned int ()(Phase::UniqueObjectId)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26D471478;
  return result;
}

void std::__function::__func<std::hash<Phase::UniqueObjectId>,std::allocator<std::hash<Phase::UniqueObjectId>>,unsigned int ()(Phase::UniqueObjectId)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D471478;
}

uint64_t std::__function::__func<std::hash<Phase::UniqueObjectId>,std::allocator<std::hash<Phase::UniqueObjectId>>,unsigned int ()(Phase::UniqueObjectId)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  LODWORD(result) = -2078137563;
  do
    uint64_t result = 435 * (result ^ *(char *)(a2 + v2++));
  while (v2 != 16);
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::__deallocate_node(int a1, void *__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      uint64_t v3 = (void *)*v2;
      double v4 = (std::__shared_weak_count *)v2[5];
      if (v4) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void *caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::~guarded_lookup_hash_table(uint64_t a1)
{
  if (atomic_load((unsigned int *)(a1 + 48)))
  {
    _os_assert_log();
    uint64_t result = (void *)_os_crash();
    __break(1u);
  }
  else
  {
    uint64_t v3 = atomic_load((unint64_t *)(a1 + 40));
    if (v3)
    {
      uint64_t v4 = caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl::~table_impl(v3);
      MEMORY[0x223C938A0](v4, 0x1060C402CF69088);
    }
    std::mutex::~mutex((std::mutex *)(a1 + 80));
    double v6 = (void **)(a1 + 56);
    std::vector<std::unique_ptr<caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl,std::default_delete<caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl>>>::__destroy_vector::operator()[abi:ne180100](&v6);
    return std::__function::__value_func<unsigned int ()(Phase::UniqueObjectId)>::~__value_func[abi:ne180100]((void *)a1);
  }
  return result;
}

uint64_t caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl::~table_impl(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (unsigned int **)(a1 + 16);
    do
    {
      if ((unint64_t)*v3 + 1 >= 2) {
        caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::element_t::release(*v3);
      }
      ++v3;
      --v2;
    }
    while (v2);
  }
  return a1;
}

unsigned int *caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::element_t::release(unsigned int *result)
{
  if ((atomic_fetch_add((atomic_uint *volatile)result, 0xFFFF0000) & 0xFFFF0000) == 0x10000)
  {
    if (atomic_load(result))
    {
      _os_assert_log();
      _os_crash();
      __break(1u);
    }
    else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
    {
      __break(0xC471u);
    }
    JUMPOUT(0x223C938A0);
  }
  return result;
}

void std::vector<std::unique_ptr<caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl,std::default_delete<caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (uint64_t *)**a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t *)v1[1];
    double v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl,std::default_delete<caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl>>::reset[abi:ne180100](--v4, 0);
      while (v4 != v2);
      double v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::unique_ptr<caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl,std::default_delete<caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl::~table_impl(result);
    JUMPOUT(0x223C938A0);
  }
  return result;
}

void *std::__function::__value_func<unsigned int ()(Phase::UniqueObjectId)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t (**std::any_cast[abi:ne180100]<Phase::Controller::GroupManager * const>(uint64_t (**result)(uint64_t, void, void, void, void *)))(uint64_t, void, void, void, void *)
{
  if (result)
  {
    if (*result) {
      return (uint64_t (**)(uint64_t, void, void, void, void *))(*result)(3, result, 0, 0, &std::__any_imp::__unique_typeinfo<Phase::Controller::GroupManager *>::__id);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t (**std::any_cast[abi:ne180100]<Phase::GlobalMetaParameterManager * const>(uint64_t (**result)(uint64_t, void, void, void, void *)))(uint64_t, void, void, void, void *)
{
  if (result)
  {
    if (*result) {
      return (uint64_t (**)(uint64_t, void, void, void, void *))(*result)(3, result, 0, 0, &std::__any_imp::__unique_typeinfo<Phase::GlobalMetaParameterManager *>::__id);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t (**std::any_cast[abi:ne180100]<Phase::Geometry::System * const>(uint64_t (**result)(uint64_t, void, void, void, void *)))(uint64_t, void, void, void, void *)
{
  if (result)
  {
    if (*result) {
      return (uint64_t (**)(uint64_t, void, void, void, void *))(*result)(3, result, 0, 0, &std::__any_imp::__unique_typeinfo<Phase::Geometry::System *>::__id);
    }
    else {
      return 0;
    }
  }
  return result;
}

double Phase::TransformPositionByInverse<double>@<D0>(uint64_t a1@<X0>, float64x2_t *a2@<X1>, double *a3@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 24);
  double v4 = -*(double *)(a1 + 16);
  float64x2_t v10 = vnegq_f64(*(float64x2_t *)a1);
  double v11 = v4;
  uint64_t v12 = v3;
  uint64_t v5 = *(uint64_t *)(a1 + 56);
  double v6 = (a2[1].f64[0] - *(double *)(a1 + 48)) / *(double *)&v5;
  float64x2_t v8 = vdivq_f64(vsubq_f64(*a2, *(float64x2_t *)(a1 + 32)), (float64x2_t)vdupq_lane_s64(v5, 0));
  double v9 = v6;
  return Phase::operator*<double>(v10.f64, v8.f64, a3);
}

double Phase::operator*<double>@<D0>(double *a1@<X0>, double *a2@<X1>, double *a3@<X8>)
{
  double v3 = a1[1];
  double v4 = *a1 + *a1;
  double v5 = v3 + v3;
  double v6 = a1[2];
  double v7 = a1[3];
  double v8 = v6 + v6;
  double v10 = a2[1];
  double v9 = a2[2];
  double v11 = *a1 * v10 - v3 * *a2;
  double v12 = v3 * v9 - v6 * v10 + *a2 * v7;
  double v13 = v6 * *a2 - *a1 * v9 + v10 * v7;
  double v14 = v11 + v9 * v7;
  double v15 = v5 * v14 - v8 * v13;
  double result = v10 + v8 * v12 - v4 * v14;
  *a3 = *a2 + v15;
  a3[1] = result;
  a3[2] = v9 + v4 * v13 - v5 * v12;
  return result;
}

void caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::_addOrReplace(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v8 = (std::mutex *)(a1 + 80);
  std::mutex::lock((std::mutex *)(a1 + 80));
  double v9 = (_DWORD *)atomic_load((unint64_t *)(a1 + 40));
  int v10 = *(_DWORD *)(a1 + 32) + 1;
  *(_DWORD *)(a1 + 32) = v10;
  if (v9)
  {
    unsigned int v11 = 16 * v10;
    unsigned int v12 = v9[2];
    if (v11 / v12 < 0xB) {
      goto LABEL_6;
    }
    unsigned int v13 = 2 * v12;
  }
  else
  {
    unsigned int v13 = 8;
  }
  double v9 = caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::rehash((unint64_t *)a1, v13);
LABEL_6:
  if ((caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl::findSlotForKey((uint64_t)v9, a2, a3) & 1) == 0)operator new(); {
  *(void *)(v14 + 24) = a4;
  }
  --*(_DWORD *)(a1 + 32);

  std::mutex::unlock(v8);
}

void sub_221E79368(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

_DWORD *caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::rehash(unint64_t *a1, unsigned int a2)
{
  double v4 = a1 + 5;
  unint64_t v5 = atomic_load(a1 + 5);
  double v6 = operator new(8 * (a2 - 1) + 24);
  *(void *)double v6 = a1;
  v6[2] = a2;
  bzero(v6 + 4, 8 * a2);
  if (v5)
  {
    uint64_t v7 = *(unsigned int *)(v5 + 8);
    if (v7)
    {
      double v8 = (unint64_t *)(v5 + 16);
      do
      {
        unint64_t v9 = *v8;
        if (*v8 + 1 >= 2)
        {
          unint64_t SlotForKey = caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl::findSlotForKey((uint64_t)v6, *(void *)(v9 + 8), *(void *)(v9 + 16));
          if ((SlotForKey & 1) == 0)
          {
            atomic_fetch_add((atomic_uint *volatile)v9, 0x10000u);
            atomic_store(v9, (unint64_t *)&v6[2 * HIDWORD(SlotForKey) + 4]);
          }
        }
        ++v8;
        --v7;
      }
      while (v7);
    }
    atomic_store((unint64_t)v6, a1 + 5);
    unsigned int v12 = (uint64_t *)a1[8];
    unint64_t v11 = a1[9];
    if ((unint64_t)v12 >= v11)
    {
      uint64_t v14 = (void *)a1[7];
      uint64_t v15 = v12 - v14;
      unint64_t v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 61) {
        std::vector<Phase::MetaParamValue>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v17 = v11 - (void)v14;
      if (v17 >> 2 > v16) {
        unint64_t v16 = v17 >> 2;
      }
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v18 = v16;
      }
      if (v18)
      {
        if (v18 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v19 = (char *)operator new(8 * v18);
      }
      else
      {
        uint64_t v19 = 0;
      }
      long long v20 = (unint64_t *)&v19[8 * v15];
      long long v21 = &v19[8 * v18];
      *long long v20 = v5;
      unsigned int v13 = v20 + 1;
      if (v12 == v14)
      {
        a1[7] = (unint64_t)v20;
        a1[8] = (unint64_t)v13;
        a1[9] = (unint64_t)v21;
      }
      else
      {
        do
        {
          unint64_t v22 = *--v12;
          *unsigned int v12 = 0;
          *--long long v20 = v22;
        }
        while (v12 != v14);
        unsigned int v12 = (uint64_t *)a1[7];
        uint64_t v23 = (uint64_t *)a1[8];
        a1[7] = (unint64_t)v20;
        a1[8] = (unint64_t)v13;
        a1[9] = (unint64_t)v21;
        while (v23 != v12)
          std::unique_ptr<caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl,std::default_delete<caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl>>::reset[abi:ne180100](--v23, 0);
      }
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      *unsigned int v12 = v5;
      unsigned int v13 = v12 + 1;
    }
    a1[8] = (unint64_t)v13;
  }
  else
  {
    atomic_store((unint64_t)v6, v4);
  }
  return v6;
}

uint64_t caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::emptyReleasePool(uint64_t result)
{
  int v1 = atomic_load((unsigned int *)(result + 48));
  if (v1 <= 0)
  {
    uint64_t v2 = result;
    double v4 = *(uint64_t **)(result + 56);
    for (uint64_t i = *(uint64_t **)(result + 64);
          i != v4;
          double result = std::unique_ptr<caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl,std::default_delete<caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl>>::reset[abi:ne180100](i, 0))
    {
      --i;
    }
    *(void *)(v2 + 64) = v4;
  }
  return result;
}

uint64_t caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl::findSlotForKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(_DWORD *)(a1 + 8);
  uint64_t result = std::function<unsigned int ()(Phase::UniqueObjectId)>::operator()(*(void *)a1, a2, a3);
  signed int v8 = result % *(_DWORD *)(a1 + 8);
  if (v8 >= 3) {
    int v9 = 0;
  }
  else {
    int v9 = v6;
  }
  uint64_t v10 = (v8 + v9 - 3);
  uint64_t v11 = 0xFFFFFFFFLL;
  uint64_t v12 = 1;
  uint64_t v13 = result % *(_DWORD *)(a1 + 8);
  do
  {
    uint64_t v14 = v13;
    uint64_t v13 = v10;
    unint64_t v15 = atomic_load((unint64_t *)(a1 + 8 * v14 + 16));
    if (v15 == -1)
    {
      if ((int)v11 >= 0) {
        uint64_t v11 = v11;
      }
      else {
        uint64_t v11 = v14;
      }
    }
    else
    {
      if (!v15)
      {
        uint64_t v12 = 0;
        if ((int)v11 >= 0) {
          uint64_t v14 = v11;
        }
        else {
          uint64_t v14 = v14;
        }
        return v12 | (v14 << 32);
      }
      if (*(void *)(v15 + 8) == a2 && *(void *)(v15 + 16) == a3) {
        return v12 | (v14 << 32);
      }
    }
    if ((int)v10 >= 3) {
      int v16 = 0;
    }
    else {
      int v16 = v6;
    }
    uint64_t v10 = (v10 + v16 - 3);
  }
  while (v13 != v8);
  if ((v11 & 0x80000000) == 0)
  {
    uint64_t v12 = 0;
    uint64_t v14 = v11;
    return v12 | (v14 << 32);
  }
  __break(1u);
  return result;
}

uint64_t std::function<unsigned int ()(Phase::UniqueObjectId)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v5[0] = a2;
  v5[1] = a3;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, void *))(*(void *)v3 + 48))(v3, v5);
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,int>>>::find<unsigned long long>(void *a1, unint64_t *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (v3 >= *(void *)&v2) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  int v6 = *(void **)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  uint64_t result = (void *)*v6;
  if (*v6)
  {
    do
    {
      unint64_t v8 = result[1];
      if (v8 == v3)
      {
        if (result[2] == v3) {
          return result;
        }
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(void *)&v2) {
            v8 %= *(void *)&v2;
          }
        }
        else
        {
          v8 &= *(void *)&v2 - 1;
        }
        if (v8 != v5) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<int *>>(unint64_t a1)
{
  if (a1 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a1);
}

void *std::allocate_shared[abi:ne180100]<Phase::ActionTreeObject,std::allocator<Phase::ActionTreeObject>,PHASESoundEventNodeAsset * {__strong}&,PHASESoundEvent * {__strong}&,void>@<X0>(PHASESoundEventNodeAsset **a1@<X1>, PHASESoundEvent **a2@<X2>, void *a3@<X8>)
{
  int v6 = operator new(0x160uLL);
  uint64_t result = std::__shared_ptr_emplace<Phase::ActionTreeObject>::__shared_ptr_emplace[abi:ne180100]<PHASESoundEventNodeAsset * {__strong}&,PHASESoundEvent * {__strong}&,std::allocator<Phase::ActionTreeObject>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_221E7980C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<Phase::ActionTreeObject>::__shared_ptr_emplace[abi:ne180100]<PHASESoundEventNodeAsset * {__strong}&,PHASESoundEvent * {__strong}&,std::allocator<Phase::ActionTreeObject>,0>(void *a1, PHASESoundEventNodeAsset **a2, PHASESoundEvent **a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D4714C0;
  Phase::ActionTreeObject::ActionTreeObject((Phase::ActionTreeObject *)(a1 + 3), *a2, *a3);
  return a1;
}

void sub_221E79870(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Phase::ActionTreeObject>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4714C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Phase::ActionTreeObject>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4714C0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C938A0);
}

void std::__shared_ptr_emplace<Phase::ActionTreeObject>::__on_zero_shared(Phase::Controller::StreamRenderer *a1)
{
  int v1 = a1;
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)a1 + 10);
  uint64_t v3 = *((void *)a1 + 11);
  uint8x8_t v4 = (char *)a1 + 80;
  while (v2 != v3)
  {
    a1 = std::unique_ptr<Phase::Controller::StreamRenderer>::reset[abi:ne180100]((Phase::Controller::StreamRenderer **)(v2 + 32), 0);
    v2 += 136;
  }
  uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance(a1);
  if (*((unsigned char *)Instance + 1557))
  {
    int v6 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(Instance)
                                                                                       + 688)));
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *((void *)v1 + 3);
      id v8 = [*((id *)v1 + 5) identifier];
      *(_DWORD *)uint64_t v13 = 136315906;
      *(void *)&v13[4] = "ActionTreeManager.mm";
      __int16 v14 = 1024;
      int v15 = 556;
      __int16 v16 = 2048;
      uint64_t v17 = v7;
      __int16 v18 = 2080;
      uint64_t v19 = [v8 UTF8String];
      _os_log_impl(&dword_221E5E000, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d (sound event: %llu) - destroyed (identifier: %s)", v13, 0x26u);
    }
  }
  objc_destroyWeak((id *)v1 + 40);
  int v9 = (void *)*((void *)v1 + 37);
  if (v9)
  {
    *((void *)v1 + 38) = v9;
    operator delete(v9);
  }
  uint64_t v10 = (void *)*((void *)v1 + 34);
  if (v10)
  {
    *((void *)v1 + 35) = v10;
    operator delete(v10);
  }
  uint64_t v11 = (void *)*((void *)v1 + 31);
  if (v11)
  {
    *((void *)v1 + 32) = v11;
    operator delete(v11);
  }
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)v1 + 128);
  uint64_t v12 = (void *)*((void *)v1 + 13);
  if (v12)
  {
    *((void *)v1 + 14) = v12;
    operator delete(v12);
  }
  *(void *)uint64_t v13 = v4;
  std::vector<Phase::ActionTreeObject::LeafNodeInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)v13);
  *(void *)uint64_t v13 = (char *)v1 + 56;
  std::vector<Phase::MetaParamState>::__destroy_vector::operator()[abi:ne180100]((void ***)v13);
}

void sub_221E79AB0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,void *>>>::operator()[abi:ne180100](char a1, void *__p)
{
  if (a1)
  {
    uint64_t v3 = (std::__shared_weak_count *)__p[5];
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void *std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>(void *a1, void *a2)
{
  uint64_t v2 = 0;
  unint64_t v3 = 0xCBF29CE484222325;
  do
    unint64_t v3 = 0x100000001B3 * (v3 ^ *((char *)a2 + v2++));
  while (v2 != 16);
  int8x8_t v4 = (int8x8_t)a1[1];
  if (!*(void *)&v4) {
    return 0;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = v3;
    if (v3 >= *(void *)&v4) {
      unint64_t v6 = v3 % *(void *)&v4;
    }
  }
  else
  {
    unint64_t v6 = (*(void *)&v4 - 1) & v3;
  }
  uint64_t v7 = *(void **)(*a1 + 8 * v6);
  if (!v7) {
    return 0;
  }
  uint64_t result = (void *)*v7;
  if (*v7)
  {
    do
    {
      unint64_t v9 = result[1];
      if (v9 == v3)
      {
        if (result[2] == *a2 && result[3] == a2[1]) {
          return result;
        }
      }
      else
      {
        if (v5.u32[0] > 1uLL)
        {
          if (v9 >= *(void *)&v4) {
            v9 %= *(void *)&v4;
          }
        }
        else
        {
          v9 &= *(void *)&v4 - 1;
        }
        if (v9 != v6) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::UniqueObjectId>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a2);
}

uint64_t Phase::CommandQueue<Phase::LockFreeQueueMPSC>::ExecuteCommands(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  for (uint64_t i = 0; Phase::LockFreeQueueSPSC::HasData((Phase::LockFreeQueueSPSC *)a1); uint64_t i = (i + 1))
  {
    unint64_t v3 = (int *)(*(void *)(a1 + 16) + *(int *)(a1 + 4));
    int v5 = *v3;
    int8x8_t v4 = v3 + 4;
    if (!v5)
    {
      uint64_t v7 = **(id **)(a1 + 48);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        int v9 = 136315394;
        uint64_t v10 = "CommandQueue.hpp";
        __int16 v11 = 1024;
        int v12 = 115;
        _os_log_impl(&dword_221E5E000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d POSTCONDITION: numBytes > 0 is false.", (uint8_t *)&v9, 0x12u);
      }
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::invalid_argument::invalid_argument[abi:ne180100](exception, "POSTCONDITION: numBytes > 0 is false.");
    }
    (*(void (**)(_DWORD *))(*(void *)v4 + 16))(v4);
    (**(void (***)(_DWORD *))v4)(v4);
    *(_DWORD *)(a1 + 4) += ((*(_DWORD *)(*(void *)(a1 + 16) + *(int *)(a1 + 4)) + 15) & 0xFFFFFFF0) + 16;
  }
  return i;
}

void sub_221E79DE4(_Unwind_Exception *exception_object)
{
}

void sub_221E79DEC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_221E79DFC(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    (**v3)(v3);
    *(_DWORD *)(v2 + 4) += ((*(_DWORD *)(*(void *)(v2 + 16) + *(int *)(v2 + 4)) + 15) & 0xFFFFFFF0) + 16;
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_221E79E5C(_Unwind_Exception *a1)
{
}

void sub_221E79E68(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x221E79E70);
  }
  __clang_call_terminate(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::erase(void *a1, uint64_t *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  uint64_t v4 = *a2;
  unint64_t v3 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v2);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v3 >= *(void *)&v2) {
      v3 %= *(void *)&v2;
    }
  }
  else
  {
    v3 &= *(void *)&v2 - 1;
  }
  unint64_t v6 = *(uint64_t **)(*a1 + 8 * v3);
  do
  {
    uint64_t v7 = v6;
    unint64_t v6 = (uint64_t *)*v6;
  }
  while (v6 != a2);
  if (v7 != a1 + 2)
  {
    unint64_t v8 = v7[1];
    if (v5.u32[0] > 1uLL)
    {
      if (v8 >= *(void *)&v2) {
        v8 %= *(void *)&v2;
      }
    }
    else
    {
      v8 &= *(void *)&v2 - 1;
    }
    uint64_t v9 = *a2;
    if (v8 == v3)
    {
LABEL_20:
      if (!v9) {
        goto LABEL_27;
      }
      goto LABEL_21;
    }
  }
  if (!v4) {
    goto LABEL_19;
  }
  unint64_t v10 = *(void *)(v4 + 8);
  if (v5.u32[0] > 1uLL)
  {
    if (v10 >= *(void *)&v2) {
      v10 %= *(void *)&v2;
    }
  }
  else
  {
    v10 &= *(void *)&v2 - 1;
  }
  uint64_t v9 = *a2;
  if (v10 != v3)
  {
LABEL_19:
    *(void *)(*a1 + 8 * v3) = 0;
    uint64_t v9 = *a2;
    goto LABEL_20;
  }
LABEL_21:
  unint64_t v11 = *(void *)(v9 + 8);
  if (v5.u32[0] > 1uLL)
  {
    if (v11 >= *(void *)&v2) {
      v11 %= *(void *)&v2;
    }
  }
  else
  {
    v11 &= *(void *)&v2 - 1;
  }
  if (v11 != v3)
  {
    *(void *)(*a1 + 8 * v11) = v7;
    uint64_t v9 = *a2;
  }
LABEL_27:
  uint64_t *v7 = v9;
  *a2 = 0;
  --a1[3];
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,void *>>>::operator()[abi:ne180100](1, a2);
  return v4;
}

BOOL Phase::CommandQueue<Phase::LockFreeQueueMPSC>::Reset(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  for (BOOL result = Phase::LockFreeQueueSPSC::HasData((Phase::LockFreeQueueSPSC *)a1);
        result;
        BOOL result = Phase::LockFreeQueueSPSC::HasData((Phase::LockFreeQueueSPSC *)a1))
  {
    uint64_t v3 = *(void *)(a1 + 16) + *(int *)(a1 + 4);
    if (!*(_DWORD *)v3)
    {
      uint64_t v4 = **(id **)(a1 + 48);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        int v6 = 136315394;
        uint64_t v7 = "CommandQueue.hpp";
        __int16 v8 = 1024;
        int v9 = 146;
        _os_log_impl(&dword_221E5E000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d POSTCONDITION: numBytes > 0 is false.", (uint8_t *)&v6, 0x12u);
      }
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::invalid_argument::invalid_argument[abi:ne180100](exception, "POSTCONDITION: numBytes > 0 is false.");
    }
    (**(void (***)(void))(v3 + 16))();
    *(_DWORD *)(a1 + 4) += ((*(_DWORD *)(*(void *)(a1 + 16) + *(int *)(a1 + 4)) + 15) & 0xFFFFFFF0) + 16;
  }
  return result;
}

void sub_221E7A134(_Unwind_Exception *exception_object)
{
}

void std::unique_lock<std::mutex>::unlock(std::unique_lock<std::mutex> *this)
{
  if (this->__owns_)
  {
    std::mutex::unlock(this->__m_);
    this->__owns_ = 0;
  }
  else
  {
    std::__throw_system_error(1, "unique_lock::unlock: not locked");
    std::unique_lock<std::mutex>::lock(v2);
  }
}

void std::unique_lock<std::mutex>::lock(std::unique_lock<std::mutex> *this)
{
  uint64_t m = this->__m_;
  if (m)
  {
    if (!this->__owns_)
    {
      std::mutex::lock(m);
      this->__owns_ = 1;
      return;
    }
  }
  else
  {
    std::__throw_system_error(1, "unique_lock::lock: references null mutex");
  }
  std::__throw_system_error(11, "unique_lock::lock: already locked");
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>();
}

void *std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>(uint64_t a1, unint64_t *a2, void *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    int v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x18uLL);
  void *i = 0;
  i[1] = v6;
  i[2] = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  uint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    void *i = *v19;
LABEL_38:
    void *v19 = i;
    goto LABEL_39;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v20 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    uint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_221E7A3F8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_221E7A480(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void Phase::DspLayer::Add8::GetNewRegistryEntry(Phase::DspLayer::Add8 *this)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  int v1 = (char *)malloc_type_malloc(0x230uLL, 0x1050040B063AAFAuLL);
  *(void *)int v1 = "Frequency";
  *((void *)v1 + 1) = 0x500000000;
  *(void *)(v1 + 20) = 0x100000000;
  *((_DWORD *)v1 + 7) = 3;
  *((_OWORD *)v1 + 2) = xmmword_2220A4F80;
  *((void *)v1 + 6) = 0x407B800000000000;
  *((void *)v1 + 7) = "Fundamental Harmonic Gain";
  *((void *)v1 + 8) = 0x500000001;
  *(void *)(v1 + 76) = 0x100000000;
  *((_DWORD *)v1 + 21) = 3;
  *(_OWORD *)(v1 + 88) = xmmword_2220A4F90;
  *((void *)v1 + 13) = 0x3FF0000000000000;
  *((void *)v1 + 14) = "1. Harmonic Gain";
  *((void *)v1 + 15) = 0x500000002;
  *(void *)(v1 + 132) = 0x100000000;
  *((_DWORD *)v1 + 35) = 3;
  *((_OWORD *)v1 + 9) = xmmword_2220A4F90;
  *((void *)v1 + 20) = 0;
  *((void *)v1 + 21) = "2. Harmonic Gain";
  *((void *)v1 + 22) = 0x500000003;
  *(void *)(v1 + 188) = 0x100000000;
  *((_DWORD *)v1 + 49) = 3;
  *(_OWORD *)(v1 + 200) = xmmword_2220A4F90;
  *((void *)v1 + 27) = 0;
  *((void *)v1 + 28) = "3. Harmonic Gain";
  *((void *)v1 + 29) = 0x500000004;
  *(void *)(v1 + 244) = 0x100000000;
  *((_DWORD *)v1 + 63) = 3;
  *((_OWORD *)v1 + 16) = xmmword_2220A4F90;
  *((void *)v1 + 34) = 0;
  *((void *)v1 + 35) = "4. Harmonic Gain";
  *((void *)v1 + 36) = 0x500000005;
  *((_DWORD *)v1 + 75) = 0;
  *((void *)v1 + 38) = 0x300000001;
  *((void *)v1 + 39) = 0;
  *((_OWORD *)v1 + 20) = xmmword_2220A4FA0;
  *((void *)v1 + 42) = "5. Harmonic Gain";
  *((void *)v1 + 43) = 0x500000006;
  *((_DWORD *)v1 + 89) = 0;
  *((void *)v1 + 45) = 0x300000001;
  *((_OWORD *)v1 + 23) = xmmword_2220A4F90;
  *((void *)v1 + 48) = 0;
  *((void *)v1 + 49) = "6. Harmonic Gain";
  *((void *)v1 + 50) = 0x500000007;
  *((_DWORD *)v1 + 103) = 0;
  *((void *)v1 + 52) = 0x300000001;
  *((void *)v1 + 53) = 0;
  *((_OWORD *)v1 + 27) = xmmword_2220A4FA0;
  *((void *)v1 + 56) = "7. Harmonic Gain";
  *((void *)v1 + 57) = 0x500000008;
  *((_DWORD *)v1 + 117) = 0;
  *((void *)v1 + 59) = 0x300000001;
  *((_OWORD *)v1 + 30) = xmmword_2220A4F90;
  *((void *)v1 + 62) = 0;
  *((void *)v1 + 63) = "Group Gain";
  *((void *)v1 + 64) = 0x500000009;
  *((_DWORD *)v1 + 131) = 0;
  *((void *)v1 + 66) = 0x300000001;
  *((void *)v1 + 67) = 0;
  __asm { FMOV            V0.2D, #1.0 }
  *((_OWORD *)v1 + 34) = _Q0;
  operator new();
}

void sub_221E7A74C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Phase::DspLayer::Add8::~Add8(Phase::DspLayer::Add8 *this)
{
  Phase::DspLayer::VoicePool::~VoicePool(this);

  JUMPOUT(0x223C938A0);
}

void anonymous namespace'::Add8Slice::~Add8Slice(_anonymous_namespace_::Add8Slice *this)
{
}

double anonymous namespace'::Add8Slice::Reset(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v12 = *MEMORY[0x263EF8340];
  __asm { FMOV            V1.4S, #1.0 }
  *(int32x4_t *)(a1 + 16) = vdupq_n_s32(0x43DC0000u);
  *(_OWORD *)(a1 + 32) = _Q1;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = _Q1;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  long long v10 = _Q1;
  long long v11 = xmmword_2220A4FB0;
  do
  {
    *(_DWORD *)(a1 + 384 + 4 * *(int *)((char *)&v10 + v2 + 16)) = *(_DWORD *)((char *)&v10 + v2);
    v2 += 4;
  }
  while (v2 != 16);
  uint64_t v8 = 0;
  long long v11 = xmmword_2220A4FB0;
  long long v10 = 0uLL;
  do
  {
    *(_DWORD *)(a1 + 400 + 4 * *(int *)((char *)&v10 + v8 + 16)) = *(_DWORD *)((char *)&v10 + v8);
    v8 += 4;
  }
  while (v8 != 16);
  (*(void (**)(uint64_t))(*(void *)a1 + 48))(a1);
  double result = 0.0;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  return result;
}

uint64_t anonymous namespace'::Add8Slice::Reset(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7 = (_DWORD *)(a1 + 4 * a3);
  v7[4] = 1138491392;
  v7[8] = 1065353216;
  v7[12] = 0;
  v7[16] = 0;
  v7[20] = 0;
  v7[24] = 0;
  v7[28] = 0;
  v7[32] = 0;
  v7[36] = 0;
  v7[40] = 1065353216;
  v7[44] = 0;
  v7[96] = 1065353216;
  v7[100] = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  *(void *)(a1 + 8 * a3 + 416) = a4;
  return result;
}

double anonymous namespace'::Add8Slice::GetParameter(_anonymous_namespace_::Add8Slice *this, int a2, int a3)
{
  switch(a2)
  {
    case 0:
      unint64_t v3 = (float *)((char *)this + 4 * a3 + 16);
      goto LABEL_12;
    case 1:
      unint64_t v3 = (float *)((char *)this + 4 * a3 + 32);
      goto LABEL_12;
    case 2:
      unint64_t v3 = (float *)((char *)this + 4 * a3 + 48);
      goto LABEL_12;
    case 3:
      unint64_t v3 = (float *)((char *)this + 4 * a3 + 64);
      goto LABEL_12;
    case 4:
      unint64_t v3 = (float *)((char *)this + 4 * a3 + 80);
      goto LABEL_12;
    case 5:
      unint64_t v3 = (float *)((char *)this + 4 * a3 + 96);
      goto LABEL_12;
    case 6:
      unint64_t v3 = (float *)((char *)this + 4 * a3 + 112);
      goto LABEL_12;
    case 7:
      unint64_t v3 = (float *)((char *)this + 4 * a3 + 128);
      goto LABEL_12;
    case 8:
      unint64_t v3 = (float *)((char *)this + 4 * a3 + 144);
      goto LABEL_12;
    case 9:
      unint64_t v3 = (float *)((char *)this + 4 * a3 + 160);
LABEL_12:
      double result = *v3;
      break;
    default:
      return result;
  }
  return result;
}

float anonymous namespace'::Add8Slice::SetParameter(_anonymous_namespace_::Add8Slice *this, int a2, int a3, double a4)
{
  switch(a2)
  {
    case 0:
      *(float *)&a4 = a4;
      *((_DWORD *)this + a3 + 4) = LODWORD(a4);
      break;
    case 1:
      *(float *)&a4 = a4;
      *((_DWORD *)this + a3 + 8) = LODWORD(a4);
      break;
    case 2:
      *(float *)&a4 = a4;
      *((_DWORD *)this + a3 + 12) = LODWORD(a4);
      break;
    case 3:
      *(float *)&a4 = a4;
      *((_DWORD *)this + a3 + 16) = LODWORD(a4);
      break;
    case 4:
      *(float *)&a4 = a4;
      *((_DWORD *)this + a3 + 20) = LODWORD(a4);
      break;
    case 5:
      *(float *)&a4 = a4;
      *((_DWORD *)this + a3 + 24) = LODWORD(a4);
      break;
    case 6:
      *(float *)&a4 = a4;
      *((_DWORD *)this + a3 + 28) = LODWORD(a4);
      break;
    case 7:
      *(float *)&a4 = a4;
      *((_DWORD *)this + a3 + 32) = LODWORD(a4);
      break;
    case 8:
      *(float *)&a4 = a4;
      *((_DWORD *)this + a3 + 36) = LODWORD(a4);
      break;
    case 9:
      *(float *)&a4 = a4;
      *((_DWORD *)this + a3 + 40) = LODWORD(a4);
      break;
    default:
      return *(float *)&a4;
  }
  return *(float *)&a4;
}

void anonymous namespace'::Add8Slice::UpdateParameters(uint64_t a1, uint64_t a2)
{
  float32x4_t v3 = (float32x4_t)_simd_tan_f4((simd_float4)vmulq_f32(vmulq_n_f32(*(float32x4_t *)(a1 + 16), *(float *)(a2 + 8)), (float32x4_t)vdupq_n_s32(0x40490FDBu)));
  __asm { FMOV            V2.4S, #1.0 }
  long long v10 = *(_OWORD *)(a1 + 160);
  long long v9 = *(_OWORD *)(a1 + 176);
  float32x4_t v11 = vdivq_f32(vaddq_f32(v3, v3), vmlaq_f32(_Q2, v3, v3));
  long long v12 = *(_OWORD *)(a1 + 32);
  long long v13 = *(_OWORD *)(a1 + 48);
  long long v14 = *(_OWORD *)(a1 + 64);
  long long v15 = *(_OWORD *)(a1 + 80);
  long long v16 = *(_OWORD *)(a1 + 96);
  long long v17 = *(_OWORD *)(a1 + 112);
  long long v18 = *(_OWORD *)(a1 + 128);
  long long v19 = *(_OWORD *)(a1 + 144);
  *(float32x4_t *)(a1 + 192) = v3;
  *(float32x4_t *)(a1 + 208) = v11;
  *(_OWORD *)(a1 + 224) = v9;
  *(_OWORD *)(a1 + 240) = v10;
  *(_OWORD *)(a1 + 256) = v12;
  *(_OWORD *)(a1 + 272) = v13;
  *(_OWORD *)(a1 + 288) = v14;
  *(_OWORD *)(a1 + 304) = v15;
  *(_OWORD *)(a1 + 320) = v16;
  *(_OWORD *)(a1 + 336) = v17;
  *(_OWORD *)(a1 + 352) = v18;
  *(_OWORD *)(a1 + 368) = v19;
}

float anonymous namespace'::Add8Slice::UpdateParameters(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = a1 + 4 * a3;
  float v4 = tanf((float)(*(float *)(v3 + 16) * *(float *)(a2 + 8)) * 3.1416);
  float v5 = v4 + v4;
  float v6 = (float)(v4 * v4) + 1.0;
  int v7 = *(_DWORD *)(v3 + 176);
  int v8 = *(_DWORD *)(v3 + 160);
  int v9 = *(_DWORD *)(v3 + 32);
  int v10 = *(_DWORD *)(v3 + 48);
  int v11 = *(_DWORD *)(v3 + 64);
  int v12 = *(_DWORD *)(v3 + 80);
  int v13 = *(_DWORD *)(v3 + 96);
  int v14 = *(_DWORD *)(v3 + 112);
  int v15 = *(_DWORD *)(v3 + 128);
  *(float *)(v3 + 192) = v4;
  float result = *(float *)(v3 + 144);
  *(float *)(v3 + 208) = v5 / v6;
  *(_DWORD *)(v3 + 224) = v7;
  *(_DWORD *)(v3 + 240) = v8;
  *(_DWORD *)(v3 + 256) = v9;
  *(_DWORD *)(v3 + 272) = v10;
  *(_DWORD *)(v3 + 288) = v11;
  *(_DWORD *)(v3 + 304) = v12;
  *(_DWORD *)(v3 + 320) = v13;
  *(_DWORD *)(v3 + 336) = v14;
  *(_DWORD *)(v3 + 352) = v15;
  *(float *)(v3 + 368) = result;
  return result;
}

float32x4_t *anonymous namespace'::Add8Slice::Run(float32x4_t *result, uint64_t a2, uint64_t a3, int a4)
{
  float32x4_t v4 = result[12];
  float32x4_t v5 = result[25];
  float32x4_t v6 = vmlsq_f32(result[24], v5, v4);
  float32x4_t v7 = vmlaq_f32(v5, v6, result[13]);
  float32x4_t v8 = vmlsq_f32(v6, v7, v4);
  HIDWORD(v9) = a4 - 1;
  LODWORD(v9) = a4 - 1;
  float32x4_t v10 = vaddq_f32(v8, v8);
  v11.i64[0] = 0x4000000040000000;
  v11.i64[1] = 0x4000000040000000;
  __asm { FMOV            V22.4S, #-1.0 }
  float32x4_t v17 = vmlaq_f32(_Q22, v11, vmulq_f32(v8, v10));
  float32x4_t v18 = vmlaq_f32(vnegq_f32(v10), v17, v10);
  float32x4_t v19 = vmlaq_f32(vnegq_f32(v17), v18, v10);
  float32x4_t v20 = vmlaq_f32(vnegq_f32(v18), v19, v10);
  float32x4_t v21 = vmlaq_f32(vnegq_f32(v19), v20, v10);
  float32x4_t v22 = vmulq_f32(result[15], vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(result[17], vmulq_f32(v7, v10)), v7, result[16]), vmulq_f32(v7, v17), result[18]), vmulq_f32(v7, v18), result[19]), vmulq_f32(v7, v19), result[20]), vmulq_f32(v7, v20), result[21]), vmulq_f32(v7, v21), result[22]), vmulq_f32(v7, vmlaq_f32(vnegq_f32(v20), v21, v10)),
            result[23]));
  int8x16_t v23 = vandq_s8((int8x16_t)v22, vorrq_s8((int8x16_t)vcltzq_f32(v22), (int8x16_t)vcgezq_f32(v22)));
  switch((v9 >> 1))
  {
    case 0u:
      goto LABEL_5;
    case 1u:
      goto LABEL_4;
    case 3u:
      goto LABEL_3;
    case 7u:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * result[14].i32[3]) = v23.i32[3];
LABEL_3:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * result[14].i32[2]) = v23.i32[2];
LABEL_4:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * result[14].i32[1]) = v23.i32[1];
LABEL_5:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * result[14].i32[0]) = v23.i32[0];
      break;
    default:
      break;
  }
  result[24] = v8;
  result[25] = v7;
  return result;
}

float anonymous namespace'::Add8Slice::CopyVoiceState(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  float32x4_t v4 = (_DWORD *)(a2 + 4 * (int)a3);
  float32x4_t v5 = (_DWORD *)(a1 + 4 * (int)a4);
  v5[4] = v4[4];
  v5[8] = v4[8];
  v5[12] = v4[12];
  v5[16] = v4[16];
  v5[20] = v4[20];
  v5[24] = v4[24];
  v5[28] = v4[28];
  v5[32] = v4[32];
  v5[36] = v4[36];
  v5[40] = v4[40];
  v5[44] = v4[44];
  v5[48] = v4[48];
  v5[52] = v4[52];
  v5[56] = v4[56];
  v5[60] = v4[60];
  v5[64] = v4[64];
  v5[68] = v4[68];
  v5[72] = v4[72];
  v5[76] = v4[76];
  v5[80] = v4[80];
  v5[84] = v4[84];
  v5[88] = v4[88];
  v5[92] = v4[92];
  if (a3 >= 4) {
    __assert_rtn("Copy", "DelaylineLinear.hpp", 507, "fromLane >= 0 && fromLane < PHASE_SIMD_WIDTH");
  }
  if (a4 >= 4) {
    __assert_rtn("Copy", "DelaylineLinear.hpp", 508, "toLane >= 0 && toLane < PHASE_SIMD_WIDTH");
  }
  uint64_t v6 = a2 + 4 * a3;
  uint64_t v7 = a1 + 4 * a4;
  *(_DWORD *)(v7 + 384) = *(_DWORD *)(v6 + 384);
  float result = *(float *)(v6 + 400);
  *(float *)(v7 + 400) = result;
  *(void *)(a1 + 8 * (int)a4 + 416) = *(void *)(a2 + 8 * (int)a3 + 416);
  return result;
}

uint64_t Phase::DspLayer::VoicePoolSlice::GetInput(Phase::DspLayer::VoicePoolSlice *this)
{
  return 0xFFFFFFFF00000008;
}

uint64_t Phase::DspLayer::VoicePoolSlice::AddInput(Phase::DspLayer::VoicePoolSlice *this, float a2)
{
  return 8;
}

uint64_t Phase::DspLayer::VoicePoolSlice::RemoveInput(Phase::DspLayer::VoicePoolSlice *this)
{
  return 8;
}

uint64_t Phase::DspLayer::VoicePoolSlice::SetInputGain(Phase::DspLayer::VoicePoolSlice *this, float a2)
{
  return 8;
}

void Phase::DspLayer::VoicePoolSlice::GetInputs(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t Phase::DspLayer::VoicePoolSlice::ClearInputs(Phase::DspLayer::VoicePoolSlice *this)
{
  return 0;
}

uint64_t Phase::DspLayer::VoicePoolSlice::GetMaximumInputConnectionCount(Phase::DspLayer::VoicePoolSlice *this)
{
  return 0;
}

unint64_t anonymous namespace'::Add8Slice::GetOutput(_anonymous_namespace_::Add8Slice *this, int a2, int a3)
{
  if (a2) {
    return 0xFFFFFFFF00000008;
  }
  else {
    return (unint64_t)*((unsigned int *)this + a3 + 44) << 32;
  }
}

uint64_t anonymous namespace'::Add8Slice::SetOutput(_anonymous_namespace_::Add8Slice *this, int a2, int a3, int a4)
{
  if (a2) {
    return 8;
  }
  uint64_t result = 0;
  *((_DWORD *)this + a3 + 44) = a4;
  return result;
}

void Phase::DspLayer::VoicePoolSlice::GetBuffer(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 10;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = -1;
}

uint64_t Phase::DspLayer::VoicePoolSlice::SetBuffer(Phase::DspLayer::VoicePoolSlice *this, int a2, int a3, void *a4)
{
  return 10;
}

void std::__function::__func<Phase::DspLayer::Add8::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::Add8::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::~__func()
{
}

void *std::__function::__func<Phase::DspLayer::Add8::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::Add8::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26D471708;
  return result;
}

void std::__function::__func<Phase::DspLayer::Add8::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::Add8::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D471708;
}

void std::__function::__func<Phase::DspLayer::Add8::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::Add8::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::operator()()
{
}

void sub_221E7B15C(_Unwind_Exception *a1)
{
  MEMORY[0x223C938A0](v1, 0x10F1C408EBD29CELL);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

const char *Phase::SpatialModeler::AmbientErrorCategory::name(Phase::SpatialModeler::AmbientErrorCategory *this)
{
  return "Ambient";
}

void Phase::SpatialModeler::AmbientErrorCategory::message(int a1@<W1>, void *a2@<X8>)
{
  if (a1 > 7)
  {
    switch(a1)
    {
      case 130:
        float32x4_t v5 = "Ambient Modeler Error: QueryInput has an unsupported Subband Count.";
        break;
      case 129:
        float32x4_t v5 = "Ambient Modeler Error: Query has an invalid Source at the World Origin. Please translate the Source away fr"
             "om the World Origin and try again.";
        break;
      case 128:
        float32x4_t v5 = "Ambient Modeler Error: Query has an invalid Volumetric Source. Please replace with a Point Source and try again.";
        break;
      default:
        float32x4_t v5 = "Ambient Modeler Error: <unrecognized error>";
        break;
    }
    std::string::basic_string[abi:ne180100]<0>(a2, v5);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "Ambient ");
    Phase::SpatialModeler::ModelerErrorMessage(a1, (const void **)__p, (uint64_t)a2);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_221E7B2EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Phase::SpatialModeler::AmbientErrorCategory::~AmbientErrorCategory(std::error_category *this)
{
  std::error_category::~error_category(this);

  JUMPOUT(0x223C938A0);
}

void Phase::SpatialModeler::Ambient::GetSupportedQueryDescs(int64x2_t *a1@<X8>)
{
  long long v21 = 0uLL;
  uint64_t v22 = 0;
  uint64_t v23 = -1;
  uint64_t v24 = 0;
  int v25 = 0;
  long long v26 = 0u;
  long long v27 = 0u;
  MEMORY[0x223C933A0](&v21, "CULL");
  uint64_t v23 = 0;
  uint64_t v24 = 0x100000001;
  int v25 = 1;
  long long v14 = 0uLL;
  uint64_t v15 = 0;
  uint64_t v16 = -1;
  uint64_t v17 = 0;
  int v18 = 0;
  *(_OWORD *)float32x4_t v19 = 0u;
  long long v20 = 0u;
  MEMORY[0x223C933A0](&v14, "CLUSTER");
  uint64_t v16 = 1;
  uint64_t v17 = 0x200000003;
  int v18 = 1;
  long long v7 = 0uLL;
  uint64_t v8 = 0;
  uint64_t v9 = -1;
  uint64_t v10 = 0;
  int v11 = 0;
  *(_OWORD *)std::string __p = 0u;
  long long v13 = 0u;
  MEMORY[0x223C933A0](&v7, "SPATIAL");
  uint64_t v9 = 2;
  uint64_t v10 = 0x300000002;
  int v11 = 1;
  a1->i64[0] = 0;
  a1->i64[1] = 0;
  a1[1].i64[0] = 0;
  uint64_t v3 = (std::string *)std::vector<Phase::SpatialModeler::QueryDesc>::__push_back_slow_path<Phase::SpatialModeler::QueryDesc const&>(a1, &v21);
  unint64_t v4 = a1[1].u64[0];
  a1->i64[1] = (uint64_t)v3;
  if ((unint64_t)v3 >= v4)
  {
    float32x4_t v5 = (std::string *)std::vector<Phase::SpatialModeler::QueryDesc>::__push_back_slow_path<Phase::SpatialModeler::QueryDesc const&>(a1, &v14);
  }
  else
  {
    std::allocator<Phase::SpatialModeler::QueryDesc>::construct[abi:ne180100]<Phase::SpatialModeler::QueryDesc,Phase::SpatialModeler::QueryDesc const&>(a1 + 16, v3, &v14);
    float32x4_t v5 = (std::string *)((char *)v3 + 80);
    a1->i64[1] = (uint64_t)v5;
  }
  a1->i64[1] = (uint64_t)v5;
  if ((unint64_t)v5 >= a1[1].i64[0])
  {
    p_std::string::size_type size = std::vector<Phase::SpatialModeler::QueryDesc>::__push_back_slow_path<Phase::SpatialModeler::QueryDesc const&>(a1, &v7);
  }
  else
  {
    std::allocator<Phase::SpatialModeler::QueryDesc>::construct[abi:ne180100]<Phase::SpatialModeler::QueryDesc,Phase::SpatialModeler::QueryDesc const&>(a1 + 16, v5, &v7);
    p_std::string::size_type size = (uint64_t)&v5[3].__r_.__value_.__l.__size_;
    a1->i64[1] = (uint64_t)&v5[3].__r_.__value_.__l.__size_;
  }
  a1->i64[1] = p_size;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (SHIBYTE(v8) < 0) {
    operator delete((void *)v7);
  }
  if (v19[0])
  {
    v19[1] = v19[0];
    operator delete(v19[0]);
  }
  if (SHIBYTE(v15) < 0) {
    operator delete((void *)v14);
  }
  if ((void)v26)
  {
    *((void *)&v26 + 1) = v26;
    operator delete((void *)v26);
  }
  if (SHIBYTE(v22) < 0) {
    operator delete((void *)v21);
  }
}

void sub_221E7B538(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  *(void *)(v2 + 8) = v3;
  *(void *)(v4 - 40) = v2;
  std::vector<Phase::SpatialModeler::QueryDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)(v4 - 40));
  Phase::SpatialModeler::QueryDesc::~QueryDesc((Phase::SpatialModeler::QueryDesc *)va);
  Phase::SpatialModeler::QueryDesc::~QueryDesc((Phase::SpatialModeler::QueryDesc *)va1);
  Phase::SpatialModeler::QueryDesc::~QueryDesc((Phase::SpatialModeler::QueryDesc *)(v4 - 120));
  _Unwind_Resume(a1);
}

void Phase::SpatialModeler::QueryDesc::~QueryDesc(Phase::SpatialModeler::QueryDesc *this)
{
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void Phase::SpatialModeler::Ambient::Init(void *a1)
{
  uint64_t v2 = a1 + 6;
  uint64_t v1 = a1[6];
  if (0xCF3CF3CF3CF3CF3DLL * ((a1[8] - v1) >> 4) <= 0x7F)
  {
    uint64_t v3 = a1[7] - v1;
    __p[4] = a1 + 8;
    __p[0] = operator new(0xA800uLL);
    __p[1] = (char *)__p[0] + v3;
    __p[2] = (char *)__p[0] + v3;
    __p[3] = (char *)__p[0] + 43008;
    std::vector<Phase::SpatialModeler::RenderGroup>::__swap_out_circular_buffer(v2, __p);
    if (__p[0]) {
      operator delete(__p[0]);
    }
  }
}

void Phase::SpatialModeler::Ambient::RunQuery(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v116 = *MEMORY[0x263EF8340];
  uint64_t v6 = a2[10];
  if (v6 == 2)
  {
    uint64_t v9 = a2[11];
    if (!v9 || *(_DWORD *)v9 != 2) {
      goto LABEL_29;
    }
    uint64_t v10 = a2[12];
    if (!v10 || *(_DWORD *)v10 != 3) {
      goto LABEL_31;
    }
    uint64_t v11 = a2[8];
    if (!v11)
    {
LABEL_37:
      if (a1)
      {
        uint64_t v19 = (*(uint64_t (**)(uint64_t *))*a1)(a1);
        uint64_t v45 = 5;
        goto LABEL_33;
      }
      goto LABEL_112;
    }
    uint64_t v12 = (float32x2_t *)Phase::Geometry::SystemState::GetEntityChecked<Phase::Geometry::Listener>(a2[8], *(void *)(v9 + 552));
    if (v12)
    {
      if (*(void *)(v9 + 8) != 1)
      {
        uint64_t v19 = (*(uint64_t (**)(uint64_t *))*a1)(a1);
        uint64_t v45 = 130;
        goto LABEL_33;
      }
      uint64_t v13 = v12;
      uint64_t v14 = (Phase::Logger *)Phase::SpatialModeler::AllocMetadata<float,Phase::SystemAllocator>((uint64_t *)v10, (uint64_t)(a1 + 4), (Phase::Logger *)1, 1);
      float32x2_t v15 = v13[6];
      float v17 = v13[7].f32[0];
      __int32 v16 = v13[7].i32[1];
      *(void *)((char *)&v112 + 4) = 0;
      if (!*(unsigned char *)(Phase::Logger::GetInstance(v14) + 1559))
      {
        *(void *)&long long v112 = *(void *)(v9 + 232);
        float v87 = *(float *)(v9 + 240);
LABEL_98:
        *((float *)&v112 + 2) = v87;
        *(float32x2_t *)&v113[0] = vneg_f32(v15);
        *((float *)v113 + 2) = -v17;
        HIDWORD(v113[0]) = v16;
        Phase::operator*<float>((float *)v113, (float *)&v112, &v109);
        float v93 = v109;
        if (v109 < 0.0) {
          float v93 = -v109;
        }
        if (v93 > 0.00000011921) {
          goto LABEL_107;
        }
        float v94 = v110;
        if (v110 < 0.0) {
          float v94 = -v110;
        }
        if (v94 > 0.00000011921) {
          goto LABEL_107;
        }
        float v95 = v111;
        if (v111 < 0.0) {
          float v95 = -v111;
        }
        if (v95 <= 0.00000011921)
        {
          float v96 = 0.0;
          float v97 = 180.0;
        }
        else
        {
LABEL_107:
          Phase::CartesianToSphericalXZ<float>(&v109, (float *)v113);
          float v96 = *((float *)v113 + 1) * 57.296;
          float v97 = 180.0 - (float)(*((float *)v113 + 2) * 57.296);
        }
        uint64_t v98 = *(void *)(v10 + 8);
        uint64_t v99 = *(_DWORD **)(v10 + 56);
        uint64_t v100 = *(void *)(v10 + 104);
        int8x8_t v101 = *(unsigned char **)(v10 + 144);
        *(_DWORD *)uint64_t v98 = 1065353216;
        *(float *)(v98 + 4) = v96;
        float v102 = (float)(v97 - (float)(floorf(v97 / 360.0) * 360.0)) + 0.0;
        if (v102 >= 360.0) {
          float v102 = nextafterf(360.0, 0.0);
        }
        *(float *)(v98 + 8) = v102;
        *uint64_t v99 = 0;
        if (*(void *)(a2[11] + 8) != 1) {
          goto LABEL_112;
        }
        *(_DWORD *)(v100 + 16) = 1065353216;
        unsigned char *v101 = 0;
        int v8 = 1;
        *(unsigned char *)(v10 + 201) = 1;
        *(_DWORD *)(v10 + 204) = 0;
        *(unsigned char *)(v10 + 4) = 1;
        goto LABEL_34;
      }
      int v18 = Phase::Geometry::SystemState::GetEntityChecked<Phase::Geometry::Source>(v11, *(void *)(v9 + 208));
      if (v18)
      {
        if (*((void *)v18 + 15) != *((void *)v18 + 16))
        {
          uint64_t v19 = (*(uint64_t (**)(uint64_t *))*a1)(a1);
          goto LABEL_114;
        }
        float v88 = *((float *)v18 + 16);
        float v89 = *((float *)v18 + 17);
        float v87 = *((float *)v18 + 18);
        float v90 = -v88;
        if (v88 >= 0.0) {
          float v90 = *((float *)v18 + 16);
        }
        if (v90 <= 0.00000011921)
        {
          float v91 = -v89;
          if (v89 >= 0.0) {
            float v91 = *((float *)v18 + 17);
          }
          if (v91 <= 0.00000011921)
          {
            float v92 = -v87;
            if (v87 >= 0.0) {
              float v92 = *((float *)v18 + 18);
            }
            if (v92 <= 0.00000011921)
            {
              uint64_t v19 = (*(uint64_t (**)(uint64_t *))*a1)(a1);
LABEL_118:
              uint64_t v45 = 129;
              goto LABEL_33;
            }
          }
        }
        LODWORD(v112) = v18[16];
        *((float *)&v112 + 1) = v89;
        goto LABEL_98;
      }
    }
    if (a1)
    {
      uint64_t v19 = (*(uint64_t (**)(uint64_t *))*a1)(a1);
      uint64_t v45 = 7;
      goto LABEL_33;
    }
    goto LABEL_112;
  }
  if (v6 != 1)
  {
    if (v6)
    {
      if (!a1) {
        goto LABEL_112;
      }
      uint64_t v46 = (*(uint64_t (**)(uint64_t *))*a1)(a1);
      *(void *)a3 = 2;
      *(void *)(a3 + 8) = v46;
      *(_DWORD *)(a3 + 24) = 2;
      return;
    }
    long long v7 = (_DWORD *)a2[12];
    if (v7 && *v7 == 1)
    {
      double v7[2] = 0;
LABEL_7:
      int v8 = 1;
      goto LABEL_34;
    }
LABEL_31:
    if (a1)
    {
      uint64_t v19 = (*(uint64_t (**)(uint64_t *))*a1)(a1);
      uint64_t v45 = 4;
      goto LABEL_33;
    }
    goto LABEL_112;
  }
  uint64_t v20 = a2[11];
  if (!v20 || *(_DWORD *)v20 != 3)
  {
LABEL_29:
    if (a1)
    {
      uint64_t v19 = (*(uint64_t (**)(uint64_t *))*a1)(a1);
      uint64_t v45 = 3;
      goto LABEL_33;
    }
    goto LABEL_112;
  }
  uint64_t v21 = a2[12];
  if (!v21 || *(_DWORD *)v21 != 2) {
    goto LABEL_31;
  }
  uint64_t v22 = a2[8];
  if (!v22) {
    goto LABEL_37;
  }
  if (*(unsigned char *)(Phase::Logger::GetInstance((Phase::Logger *)a1) + 1559))
  {
    uint64_t v23 = (uint64_t)(a1 + 4);
    Phase::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::SystemAllocator>((uint64_t *)v113, v23, *(Phase::Logger **)(v20 + 144));
    std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(v21 + 8), (uint64_t *)v113);
    *(void *)(v21 + 48) = v114;
    std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)v113);
    std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)v113 + 1);
    Phase::AllocArray<BOOL,Phase::SystemAllocator>((uint64_t *)v113, v23, *(Phase::Logger **)(v20 + 144));
    std::unique_ptr<BOOL [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(v21 + 56), (uint64_t *)v113);
    *(void *)(v21 + 96) = v114;
    std::unique_ptr<BOOL [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)v113);
    std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)v113 + 1);
    Phase::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::SystemAllocator>((uint64_t *)v113, v23, *(Phase::Logger **)(v20 + 144));
    std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(v21 + 104), (uint64_t *)v113);
    *(void *)(v21 + 144) = v114;
    std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)v113);
    std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)v113 + 1);
    if (*(void *)(v21 + 144))
    {
      uint64_t v24 = 0;
      uint64_t v25 = 0;
      uint64_t v26 = 0;
      unint64_t v27 = 0;
      do
      {
        uint64_t v28 = (unint64_t *)(*(void *)(v21 + 104) + v24);
        *uint64_t v28 = v27;
        v28[1] = 0;
        *(_OWORD *)(*(void *)(v21 + 8) + v26) = *(_OWORD *)(*(void *)(v20 + 104) + v25);
        uint64_t v29 = *(void *)(v20 + 104) + v25;
        uint64_t v30 = *(void *)(v21 + 8) + v26;
        *(void *)(v30 + 16) = *(void *)(v29 + 144);
        long long v31 = *(_OWORD *)(v29 + 16);
        long long v32 = *(_OWORD *)(v29 + 32);
        long long v33 = *(_OWORD *)(v29 + 64);
        *(_OWORD *)(v30 + 224) = *(_OWORD *)(v29 + 48);
        *(_OWORD *)(v30 + 240) = v33;
        *(_OWORD *)(v30 + 192) = v31;
        *(_OWORD *)(v30 + 208) = v32;
        long long v34 = *(_OWORD *)(v29 + 80);
        long long v35 = *(_OWORD *)(v29 + 96);
        long long v36 = *(_OWORD *)(v29 + 128);
        *(_OWORD *)(v30 + 288) = *(_OWORD *)(v29 + 112);
        *(_OWORD *)(v30 + 304) = v36;
        *(_OWORD *)(v30 + 256) = v34;
        *(_OWORD *)(v30 + 272) = v35;
        uint64_t v37 = (_OWORD *)(*(void *)(v20 + 104) + v25);
        uint64_t v38 = *(void *)(v21 + 8) + v26;
        long long v39 = v37[16];
        long long v40 = v37[17];
        long long v41 = v37[15];
        *(_OWORD *)(v38 + 120) = v37[14];
        *(_OWORD *)(v38 + 168) = v40;
        *(_OWORD *)(v38 + 152) = v39;
        *(_OWORD *)(v38 + 136) = v41;
        long long v42 = v37[10];
        long long v43 = v37[11];
        long long v44 = v37[12];
        *(_OWORD *)(v38 + 104) = v37[13];
        *(_OWORD *)(v38 + 88) = v44;
        *(_OWORD *)(v38 + 72) = v43;
        *(_OWORD *)(v38 + 56) = v42;
        *(unsigned char *)(*(void *)(v21 + 56) + v27++) = 1;
        v26 += 336;
        v25 += 304;
        v24 += 16;
      }
      while (v27 < *(void *)(v21 + 144));
    }
    goto LABEL_7;
  }
  a1[7] = a1[6];
  uint64_t v105 = (uint64_t)(a1 + 4);
  Phase::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::SystemAllocator>((uint64_t *)v113, (uint64_t)(a1 + 4), *(Phase::Logger **)(v20 + 144));
  uint64_t v47 = (uint64_t *)(v21 + 104);
  std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(v21 + 104), (uint64_t *)v113);
  *(void *)(v21 + 144) = v114;
  std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)v113);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)v113 + 1);
  unint64_t v48 = *(void *)(v20 + 144);
  if (!v48)
  {
LABEL_77:
    uint64_t v72 = (Phase::Logger *)(*(void *)(v20 + 96) - 0x30C30C30C30C30C3 * ((a1[7] - a1[6]) >> 4));
    Phase::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::SystemAllocator>((uint64_t *)v113, v105, v72);
    int v73 = (void *)(v21 + 8);
    std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(v21 + 8), (uint64_t *)v113);
    *(void *)(v21 + 48) = v114;
    std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)v113);
    std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)v113 + 1);
    Phase::AllocArray<BOOL,Phase::SystemAllocator>((uint64_t *)v113, v105, v72);
    int v74 = (void *)(v21 + 56);
    std::unique_ptr<BOOL [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(v21 + 56), (uint64_t *)v113);
    *(void *)(v21 + 96) = v114;
    std::unique_ptr<BOOL [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)v113);
    std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)v113 + 1);
    if (*(void *)(v20 + 96))
    {
      unint64_t v75 = 0;
      uint64_t v76 = 56;
      do
      {
        uint64_t v77 = (void *)(*(void *)(v20 + 56) + v76);
        unint64_t v78 = (void *)(*v73 + v76);
        long long v79 = *(_OWORD *)(v77 - 7);
        *(v78 - 5) = *(v77 - 5);
        *(_OWORD *)(v78 - 7) = v79;
        *((_DWORD *)v78 - 8) = *((_DWORD *)v77 - 8);
        *((_DWORD *)v78 - 7) = *((_DWORD *)v77 - 7);
        *((_DWORD *)v78 - 6) = *((_DWORD *)v77 - 6);
        *((_DWORD *)v78 - 5) = *((_DWORD *)v77 - 5);
        *((_DWORD *)v78 - 4) = *((_DWORD *)v77 - 4);
        *((_DWORD *)v78 - 3) = *((_DWORD *)v77 - 3);
        *((_DWORD *)v78 - 2) = *((_DWORD *)v77 - 2);
        *((_DWORD *)v78 - 1) = *((_DWORD *)v77 - 1);
        memcpy(v78, v77, 0x109uLL);
        *(unsigned char *)(*v74 + v75++) = 1;
        v76 += 336;
      }
      while (v75 < *(void *)(v20 + 96));
    }
    uint64_t v80 = a1[6];
    if (a1[7] != v80)
    {
      unint64_t v81 = 0;
      uint64_t v82 = 56;
      do
      {
        uint64_t v83 = *(void *)(v20 + 96);
        uint64_t v84 = (void *)(v80 + v82);
        uint64_t v85 = *v73 + 336 * (v81 + v83);
        long long v86 = *(_OWORD *)(v84 - 7);
        *(void *)(v85 + 16) = *(v84 - 5);
        *(_OWORD *)uint64_t v85 = v86;
        *(_DWORD *)(v85 + 24) = *((_DWORD *)v84 - 8);
        *(_DWORD *)(v85 + 28) = *((_DWORD *)v84 - 7);
        *(_DWORD *)(v85 + 32) = *((_DWORD *)v84 - 6);
        *(_DWORD *)(v85 + 36) = *((_DWORD *)v84 - 5);
        *(_DWORD *)(v85 + 40) = *((_DWORD *)v84 - 4);
        *(_DWORD *)(v85 + 44) = *((_DWORD *)v84 - 3);
        *(_DWORD *)(v85 + 48) = *((_DWORD *)v84 - 2);
        *(_DWORD *)(v85 + 52) = *((_DWORD *)v84 - 1);
        memcpy((void *)(v85 + 56), v84, 0x109uLL);
        *(unsigned char *)(*v74 + v83 + v81++) = 1;
        uint64_t v80 = a1[6];
        v82 += 336;
      }
      while (v81 < 0xCF3CF3CF3CF3CF3DLL * ((a1[7] - v80) >> 4));
    }
    goto LABEL_7;
  }
  uint64_t v49 = 0;
  uint64_t v104 = v22;
  while (1)
  {
    uint64_t v50 = *(void *)(v20 + 104);
    char v51 = (void *)(*v47 + 16 * v49);
    uint64_t v52 = *(void *)(v50 + 304 * v49 + 288);
    if (v52 != -1)
    {
      *char v51 = v52;
      v51[1] = *(void *)(v50 + 304 * v49 + 296);
      goto LABEL_76;
    }
    uint64_t v53 = *(void *)(v50 + 304 * v49 + 144);
    if (*(_DWORD *)(v22 + 136) <= v53
      || (uint64_t v54 = *(void *)(v22 + 120), *(_DWORD *)(v54 + 24 * v53 + 20) != HIDWORD(v53))
      || (uint64_t v55 = *(void *)(v54 + 24 * *(void *)(v50 + 304 * v49 + 144))) == 0
      || *(_DWORD *)v55 != 3)
    {
      if (a1)
      {
        uint64_t v19 = (*(uint64_t (**)(uint64_t *))*a1)(a1);
        uint64_t v45 = 6;
        goto LABEL_33;
      }
LABEL_112:
      std::terminate();
    }
    if (*(void *)(v55 + 120) != *(void *)(v55 + 128)) {
      break;
    }
    uint64_t v107 = (void *)(*v47 + 16 * v49);
    uint64_t v108 = *v47;
    unint64_t v106 = v48;
    float v56 = *(float *)(v55 + 64);
    float v57 = *(float *)(v55 + 68);
    float v109 = v56;
    float v110 = v57;
    float v58 = *(float *)(v55 + 72);
    float v111 = v58;
    float v59 = -v56;
    if (v56 >= 0.0) {
      float v59 = v56;
    }
    if (v59 <= 0.00000011921)
    {
      float v60 = -v57;
      if (v57 >= 0.0) {
        float v60 = v57;
      }
      if (v60 <= 0.00000011921)
      {
        float v61 = -v58;
        if (v58 >= 0.0) {
          float v61 = v58;
        }
        if (v61 <= 0.00000011921)
        {
          uint64_t v19 = (*(uint64_t (**)(uint64_t *))*a1)(a1);
          goto LABEL_118;
        }
      }
    }
    uint64_t v62 = *(void *)(v20 + 96);
    if (v62)
    {
      uint64_t v63 = 0;
      char v64 = (float *)(*(void *)(v20 + 56) + 40);
      while (!Phase::IsNearlyEqual<float>(v64, &v109))
      {
        ++v63;
        v64 += 84;
        if (v62 == v63) {
          goto LABEL_63;
        }
      }
      *uint64_t v107 = v63;
      *(void *)(v108 + 16 * v49 + 8) = *(void *)(v50 + 304 * v49 + 296);
    }
    else
    {
LABEL_63:
      uint64_t v65 = a1[6];
      uint64_t v66 = a1[7] - v65;
      if (!v66)
      {
        unint64_t v71 = 0;
LABEL_73:
        *uint64_t v107 = v71 + v62;
        *(void *)(v108 + 16 * v49 + 8) = *(void *)(v50 + 304 * v49 + 296);
        Phase::SpatialModeler::RenderGroup::RenderGroup((Phase::SpatialModeler::RenderGroup *)v113);
        uint64_t v47 = (uint64_t *)(v21 + 104);
        MEMORY[0x223C944F0](&v112);
        v113[0] = v112;
        unint64_t v114 = __PAIR64__(LODWORD(v57), LODWORD(v56));
        float v115 = v58;
        std::vector<Phase::SpatialModeler::RenderGroup>::push_back[abi:ne180100](a1 + 6, v113);
        unint64_t v48 = *(void *)(v20 + 144);
        goto LABEL_76;
      }
      unint64_t v67 = v66 / 336;
      unint64_t v103 = v67;
      if (v67 <= 1) {
        uint64_t v68 = 1;
      }
      else {
        uint64_t v68 = v67;
      }
      BOOL v69 = (float *)(v65 + 40);
      uint64_t v70 = v62;
      while (!Phase::IsNearlyEqual<float>(v69, &v109))
      {
        ++v70;
        v69 += 84;
        if (!--v68)
        {
          unint64_t v71 = v103;
          uint64_t v22 = v104;
          goto LABEL_73;
        }
      }
      *uint64_t v107 = v70;
      *(void *)(v108 + 16 * v49 + 8) = *(void *)(v50 + 304 * v49 + 296);
      uint64_t v22 = v104;
    }
    uint64_t v47 = (uint64_t *)(v21 + 104);
    unint64_t v48 = v106;
LABEL_76:
    if (++v49 >= v48) {
      goto LABEL_77;
    }
  }
  uint64_t v19 = (*(uint64_t (**)(uint64_t *))*a1)(a1);
LABEL_114:
  uint64_t v45 = 128;
LABEL_33:
  *(void *)a3 = v45;
  *(void *)(a3 + 8) = v19;
  int v8 = 2;
LABEL_34:
  *(_DWORD *)(a3 + 24) = v8;
}

void *Phase::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::SystemAllocator>(uint64_t *a1, uint64_t a2, Phase::Logger *a3)
{
  v12[4] = *MEMORY[0x263EF8340];
  uint64_t v9 = 16;
  uint64_t v10 = a3;
  v8[0] = a2;
  v8[1] = &v10;
  void v8[2] = &v9;
  uint64_t v7 = a2;
  Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::RenderGroup*)#1} const&>(a3, (uint64_t)v8, &v7, (size_t *)&v11);
  uint64_t v5 = v11;
  uint64_t v11 = 0;
  *a1 = v5;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)(a1 + 1), (uint64_t)v12);
  a1[5] = (uint64_t)a3;
  std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>>::reset[abi:ne180100](&v11);
  return std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v12);
}

void *Phase::AllocArray<BOOL,Phase::SystemAllocator>(uint64_t *a1, uint64_t a2, Phase::Logger *a3)
{
  v12[4] = *MEMORY[0x263EF8340];
  uint64_t v9 = 1;
  uint64_t v10 = a3;
  v8[0] = a2;
  v8[1] = &v10;
  void v8[2] = &v9;
  uint64_t v7 = a2;
  Phase::details::AllocArray<BOOL,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(BOOL*)#1} const&>(a3, (uint64_t)v8, &v7, &v11);
  uint64_t v5 = v11;
  uint64_t v11 = 0;
  *a1 = v5;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)(a1 + 1), (uint64_t)v12);
  a1[5] = (uint64_t)a3;
  std::unique_ptr<BOOL [],std::function<void ()(void *)>>::reset[abi:ne180100](&v11);
  return std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v12);
}

void *Phase::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::SystemAllocator>(uint64_t *a1, uint64_t a2, Phase::Logger *a3)
{
  v12[4] = *MEMORY[0x263EF8340];
  uint64_t v9 = 8;
  uint64_t v10 = a3;
  v8[0] = a2;
  v8[1] = &v10;
  void v8[2] = &v9;
  uint64_t v7 = a2;
  Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingOutput*)#1} const&>(a3, (uint64_t)v8, &v7, &v11);
  uint64_t v5 = v11;
  uint64_t v11 = 0;
  *a1 = v5;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)(a1 + 1), (uint64_t)v12);
  a1[5] = (uint64_t)a3;
  std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>>::reset[abi:ne180100](&v11);
  return std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v12);
}

_DWORD *Phase::Geometry::SystemState::GetEntityChecked<Phase::Geometry::Source>(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 136) <= a2) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 120);
  if (*(_DWORD *)(v2 + 24 * a2 + 20) != HIDWORD(a2)) {
    return 0;
  }
  uint64_t result = *(_DWORD **)(v2 + 24 * a2);
  if (!result || *result != 3) {
    return 0;
  }
  return result;
}

BOOL Phase::IsNearlyEqual<float>(float *a1, float *a2)
{
  float v2 = *a1 - *a2;
  if (v2 < 0.0) {
    float v2 = -v2;
  }
  if (v2 > 0.00000011921) {
    return 0;
  }
  float v3 = a1[1] - a2[1];
  if (v3 < 0.0) {
    float v3 = -v3;
  }
  if (v3 > 0.00000011921) {
    return 0;
  }
  float v5 = a1[2] - a2[2];
  if (v5 < 0.0) {
    float v5 = -v5;
  }
  return v5 <= 0.00000011921;
}

Phase::SpatialModeler::RenderGroup *Phase::SpatialModeler::RenderGroup::RenderGroup(Phase::SpatialModeler::RenderGroup *this)
{
  uint64_t v2 = 0;
  uint64_t v7 = *MEMORY[0x263EF8340];
  *((_DWORD *)this + 8) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *(void *)((char *)this + 36) = 1065353216;
  *(void *)((char *)this + 44) = 0;
  *((_DWORD *)this + 13) = 1065353216;
  do
  {
    float v3 = (char *)this + v2;
    *((_DWORD *)v3 + 14) = 0;
    *((void *)v3 + 8) = 0;
    v2 += 16;
  }
  while (v2 != 128);
  *((void *)this + 23) = 0;
  uint64_t v5 = 0;
  int v6 = 0;
  Phase::Subbands<float>::Subbands((uint64_t)this + 192, &v5, 3);
  *((unsigned char *)this + 320) = 0;
  return this;
}

void std::vector<Phase::SpatialModeler::RenderGroup>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  uint64_t v4 = a1 + 2;
  unint64_t v5 = a1[2];
  unint64_t v6 = a1[1];
  if (v6 >= v5)
  {
    unint64_t v9 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v6 - *a1) >> 4);
    if (v9 + 1 > 0xC30C30C30C30C3) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v5 - *a1) >> 4);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= v9 + 1) {
      uint64_t v11 = v9 + 1;
    }
    if (v10 >= 0x61861861861861) {
      unint64_t v12 = 0xC30C30C30C30C3;
    }
    else {
      unint64_t v12 = v11;
    }
    __p[4] = v4;
    if (v12) {
      unint64_t v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::SpatialModeler::RenderGroup>>(v12);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = (_OWORD *)(v12 + 336 * v9);
    __p[0] = (void *)v12;
    __p[1] = v14;
    __p[3] = (void *)(v12 + 336 * v13);
    uint64_t v15 = *((void *)a2 + 2);
    *uint64_t v14 = *a2;
    *((void *)v14 + 2) = v15;
    *((_DWORD *)v14 + 6) = *((_DWORD *)a2 + 6);
    *((_DWORD *)v14 + 7) = *((_DWORD *)a2 + 7);
    *((_DWORD *)v14 + 8) = *((_DWORD *)a2 + 8);
    *((_DWORD *)v14 + 9) = *((_DWORD *)a2 + 9);
    *((_DWORD *)v14 + 10) = *((_DWORD *)a2 + 10);
    *((_DWORD *)v14 + 11) = *((_DWORD *)a2 + 11);
    *((_DWORD *)v14 + 12) = *((_DWORD *)a2 + 12);
    *((_DWORD *)v14 + 13) = *((_DWORD *)a2 + 13);
    memcpy((char *)v14 + 56, (char *)a2 + 56, 0x109uLL);
    __p[2] = v14 + 21;
    std::vector<Phase::SpatialModeler::RenderGroup>::__swap_out_circular_buffer(a1, __p);
    uint64_t v8 = a1[1];
    if (__p[0]) {
      operator delete(__p[0]);
    }
  }
  else
  {
    long long v7 = *a2;
    *(void *)(v6 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v6 = v7;
    *(_DWORD *)(v6 + 24) = *((_DWORD *)a2 + 6);
    *(_DWORD *)(v6 + 28) = *((_DWORD *)a2 + 7);
    *(_DWORD *)(v6 + 32) = *((_DWORD *)a2 + 8);
    *(_DWORD *)(v6 + 36) = *((_DWORD *)a2 + 9);
    *(_DWORD *)(v6 + 40) = *((_DWORD *)a2 + 10);
    *(_DWORD *)(v6 + 44) = *((_DWORD *)a2 + 11);
    *(_DWORD *)(v6 + 48) = *((_DWORD *)a2 + 12);
    *(_DWORD *)(v6 + 52) = *((_DWORD *)a2 + 13);
    memcpy((void *)(v6 + 56), (char *)a2 + 56, 0x109uLL);
    uint64_t v8 = v6 + 336;
  }
  a1[1] = v8;
}

_DWORD *Phase::Geometry::SystemState::GetEntityChecked<Phase::Geometry::Listener>(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 136) <= a2) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 120);
  if (*(_DWORD *)(v2 + 24 * a2 + 20) != HIDWORD(a2)) {
    return 0;
  }
  uint64_t result = *(_DWORD **)(v2 + 24 * a2);
  if (!result || *result != 2) {
    return 0;
  }
  return result;
}

void *Phase::SpatialModeler::AllocMetadata<float,Phase::SystemAllocator>(uint64_t *a1, uint64_t a2, Phase::Logger *a3, uint64_t a4)
{
  v20[4] = *MEMORY[0x263EF8340];
  uint64_t v13 = 4;
  uint64_t v14 = a3;
  uint64_t v15 = a2;
  __int32 v16 = &v14;
  float v17 = &v13;
  uint64_t v12 = a2;
  Phase::details::AllocArray<Phase::Vector<float,3ul>,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&>(a3, (uint64_t)&v15, &v12, (size_t *)&v19);
  uint64_t v8 = v19;
  uint64_t v19 = 0;
  uint64_t v15 = v8;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&v16, (uint64_t)v20);
  int v18 = a3;
  std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::reset[abi:ne180100](&v19);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v20);
  std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::operator=[abi:ne180100](a1 + 1, &v15);
  a1[6] = (uint64_t)v18;
  std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::reset[abi:ne180100](&v15);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](&v16);
  uint64_t v13 = 4;
  uint64_t v14 = a3;
  uint64_t v15 = a2;
  __int32 v16 = &v14;
  float v17 = &v13;
  uint64_t v12 = a2;
  Phase::details::AllocArray<float,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(float*)#1} const&>(a3, (uint64_t)&v15, &v12, &v19);
  uint64_t v9 = v19;
  uint64_t v19 = 0;
  uint64_t v15 = v9;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&v16, (uint64_t)v20);
  int v18 = a3;
  std::unique_ptr<float [],std::function<void ()(void *)>>::reset[abi:ne180100](&v19);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v20);
  std::unique_ptr<float [],std::function<void ()(void *)>>::operator=[abi:ne180100](a1 + 7, &v15);
  a1[12] = (uint64_t)v18;
  std::unique_ptr<float [],std::function<void ()(void *)>>::reset[abi:ne180100](&v15);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](&v16);
  Phase::AllocPackedSubbandArray<float,Phase::SystemAllocator>(a2, (uint64_t)a3, a4, &v15);
  std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::operator=[abi:ne180100](a1 + 13, &v15);
  std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::reset[abi:ne180100](&v15, 0);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](&v16);
  uint64_t v13 = 1;
  uint64_t v14 = a3;
  uint64_t v15 = a2;
  __int32 v16 = &v14;
  float v17 = &v13;
  uint64_t v12 = a2;
  Phase::details::AllocArray<BOOL,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(BOOL*)#1} const&>(a3, (uint64_t)&v15, &v12, &v19);
  uint64_t v10 = v19;
  uint64_t v19 = 0;
  uint64_t v15 = v10;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&v16, (uint64_t)v20);
  int v18 = a3;
  std::unique_ptr<BOOL [],std::function<void ()(void *)>>::reset[abi:ne180100](&v19);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v20);
  std::unique_ptr<BOOL [],std::function<void ()(void *)>>::operator=[abi:ne180100](a1 + 18, &v15);
  a1[23] = (uint64_t)v18;
  std::unique_ptr<BOOL [],std::function<void ()(void *)>>::reset[abi:ne180100](&v15);
  return std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](&v16);
}

float Phase::operator*<float>@<S0>(float *a1@<X0>, float *a2@<X1>, float *a3@<X8>)
{
  float v3 = a1[1];
  float v4 = *a1 + *a1;
  float v5 = v3 + v3;
  float v6 = a1[2];
  float v7 = a1[3];
  float v8 = v6 + v6;
  float v10 = a2[1];
  float v9 = a2[2];
  float v11 = (float)(*a1 * v10) - (float)(v3 * *a2);
  float v12 = (float)((float)(v3 * v9) - (float)(v6 * v10)) + (float)(*a2 * v7);
  float v13 = (float)((float)(v6 * *a2) - (float)(*a1 * v9)) + (float)(v10 * v7);
  float v14 = v11 + (float)(v9 * v7);
  float v15 = (float)(v5 * v14) - (float)(v8 * v13);
  float result = v10 + (float)((float)(v8 * v12) - (float)(v4 * v14));
  *a3 = *a2 + v15;
  a3[1] = result;
  a3[2] = v9 + (float)((float)(v4 * v13) - (float)(v5 * v12));
  return result;
}

{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float result;

  float v3 = a1[1];
  float v5 = a2[2];
  float v4 = a2[3];
  float v7 = a1[2];
  float v6 = a1[3];
  float v8 = a2[1];
  float v9 = (float)((float)((float)(v4 * v3) + (float)(v6 * v8)) + (float)(v7 * *a2)) - (float)(*a1 * v5);
  float v10 = (float)((float)((float)(v4 * v7) + (float)(v6 * v5)) + (float)(*a1 * v8)) - (float)(v3 * *a2);
  float v11 = (float)((float)(v6 * v4) - (float)(*a1 * *a2)) - (float)(v3 * v8);
  *a3 = (float)((float)((float)(*a1 * v4) + (float)(v6 * *a2)) + (float)(v3 * v5)) - (float)(v7 * v8);
  a3[1] = v9;
  float result = v11 - (float)(v7 * v5);
  a3[2] = v10;
  a3[3] = result;
  return result;
}

void Phase::CartesianToSphericalXZ<float>(float *a1@<X0>, float *a2@<X8>)
{
  float v4 = *a1;
  float v3 = a1[1];
  float v5 = a1[2];
  float v6 = sqrtf((float)((float)(v4 * v4) + (float)(v3 * v3)) + (float)(v5 * v5));
  float v7 = acosf(v3 / v6);
  float v8 = atan2f(v4, v5);
  *a2 = v6;
  a2[1] = v7;
  a2[2] = v8;
}

uint64_t Phase::SpatialModeler::Ambient::GetGraphDescription@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  switch(a1)
  {
    case 2:
      *(_OWORD *)(a2 + 16) = 0uLL;
      *(_OWORD *)(a2 + 32) = 0uLL;
      *(_OWORD *)a2 = 0uLL;
      MEMORY[0x223C933A0](a2, "AmbientSpatialQueryGraph");
      std::vector<Phase::SpatialModeler::GraphDescriptionNode>::resize((uint64_t *)(a2 + 24), 1uLL);
      uint64_t v4 = *(void *)(a2 + 24);
      uint64_t result = MEMORY[0x223C933A0](v4, "FullAmbientSpatialGraph");
      goto LABEL_7;
    case 1:
      *(_OWORD *)(a2 + 16) = 0uLL;
      *(_OWORD *)(a2 + 32) = 0uLL;
      *(_OWORD *)a2 = 0uLL;
      MEMORY[0x223C933A0](a2, "AmbientClusterQueryGraph");
      std::vector<Phase::SpatialModeler::GraphDescriptionNode>::resize((uint64_t *)(a2 + 24), 1uLL);
      uint64_t v4 = *(void *)(a2 + 24);
      uint64_t result = MEMORY[0x223C933A0](v4, "FullAmbientClusterGraph");
      goto LABEL_7;
    case 0:
      *(_OWORD *)(a2 + 16) = 0uLL;
      *(_OWORD *)(a2 + 32) = 0uLL;
      *(_OWORD *)a2 = 0uLL;
      MEMORY[0x223C933A0](a2, "AmbientCullQueryGraph");
      std::vector<Phase::SpatialModeler::GraphDescriptionNode>::resize((uint64_t *)(a2 + 24), 1uLL);
      uint64_t v4 = *(void *)(a2 + 24);
      uint64_t result = MEMORY[0x223C933A0](v4, "FullAmbientCullGraph");
LABEL_7:
      *(void *)(v4 + 24) = 0xFFFFFFFFLL;
      return result;
  }
  *(_OWORD *)(a2 + 16) = 0uLL;
  *(_OWORD *)(a2 + 32) = 0uLL;
  *(_OWORD *)a2 = 0uLL;
  return result;
}

void sub_221E7CC8C(_Unwind_Exception *a1)
{
  Phase::SpatialModeler::GraphDescription::~GraphDescription(v1);
  _Unwind_Resume(a1);
}

void std::vector<Phase::SpatialModeler::GraphDescriptionNode>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = (v3 - *a1) >> 5;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      uint64_t v6 = *a1 + 32 * a2;
      while (v3 != v6)
      {
        if (*(char *)(v3 - 9) < 0) {
          operator delete(*(void **)(v3 - 32));
        }
        v3 -= 32;
      }
      a1[1] = v6;
    }
  }
  else
  {
    unint64_t v5 = a2 - v4;
    std::vector<Phase::SpatialModeler::GraphDescriptionNode>::__append(a1, v5);
  }
}

void Phase::SpatialModeler::GraphDescription::~GraphDescription(void **this)
{
  uint64_t v2 = this + 3;
  std::vector<Phase::SpatialModeler::GraphDescriptionNode>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

uint64_t Phase::SpatialModeler::Ambient::GetErrorCategory(Phase::SpatialModeler::Ambient *this)
{
  return (uint64_t)this + 40;
}

BOOL Phase::SpatialModeler::Ambient::IsQueryIndexValid(Phase::SpatialModeler::Ambient *this, unint64_t a2)
{
  return a2 < 3;
}

void Phase::SpatialModeler::Ambient::~Ambient(std::error_category *this)
{
  this->__vftable = (std::error_category_vtbl *)&unk_26D471798;
  uint64_t v2 = this[6].__vftable;
  if (v2)
  {
    this[7].__vftable = v2;
    operator delete(v2);
  }
  std::error_category::~error_category(this + 5);
  this->__vftable = (std::error_category_vtbl *)&unk_26D471808;
  std::error_category::~error_category(this + 1);
}

{
  std::error_category_vtbl *v2;
  uint64_t vars8;

  this->__vftable = (std::error_category_vtbl *)&unk_26D471798;
  uint64_t v2 = this[6].__vftable;
  if (v2)
  {
    this[7].__vftable = v2;
    operator delete(v2);
  }
  std::error_category::~error_category(this + 5);
  this->__vftable = (std::error_category_vtbl *)&unk_26D471808;
  std::error_category::~error_category(this + 1);

  JUMPOUT(0x223C938A0);
}

void Phase::SpatialModeler::BaseModeler::AllocateQueryState(void *a1@<X8>)
{
  *a1 = 0;
  a1[4] = 0;
}

uint64_t *std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1 = *result;
  _DWORD *result = 0;
  if (v1) {
    return (uint64_t *)std::function<void ()(void *)>::operator()((uint64_t)(result + 1), v1);
  }
  return result;
}

uint64_t std::function<void ()(void *)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void *std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t *std::unique_ptr<BOOL [],std::function<void ()(void *)>>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1 = *result;
  _DWORD *result = 0;
  if (v1) {
    return (uint64_t *)std::function<void ()(void *)>::operator()((uint64_t)(result + 1), v1);
  }
  return result;
}

uint64_t *std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1 = *result;
  _DWORD *result = 0;
  if (v1) {
    return (uint64_t *)std::function<void ()(void *)>::operator()((uint64_t)(result + 1), v1);
  }
  return result;
}

uint64_t Phase::Subbands<float>::Subbands(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 108) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 124) = a3;
  if (a3)
  {
    unint64_t v4 = 0;
    unint64_t v5 = 0;
    uint64_t v6 = 4 * a3;
    do
    {
      if (v5 < a3)
      {
        unint64_t v4 = v5 + 1;
        *(_DWORD *)(a1 + 4 * v5++) = *a2;
      }
      ++a2;
      v6 -= 4;
    }
    while (v6);
    if (a3 > v4) {
      bzero((void *)(a1 + 4 * v4), 4 * (a3 - v4));
    }
  }
  return a1;
}

void std::vector<Phase::SpatialModeler::GraphDescriptionNode>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<Phase::SpatialModeler::GraphDescriptionNode>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<Phase::SpatialModeler::GraphDescriptionNode>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 32)
  {
    if (*(char *)(i - 9) < 0) {
      operator delete(*(void **)(i - 32));
    }
  }
  a1[1] = v2;
}

uint64_t Phase::SpatialModeler::BaseModeler::GetErrorCategory(Phase::SpatialModeler::BaseModeler *this)
{
  return (uint64_t)this + 8;
}

uint64_t Phase::SpatialModeler::BaseModeler::IsQueryIndexValid(Phase::SpatialModeler::BaseModeler *this)
{
  return 0;
}

double Phase::SpatialModeler::BaseModeler::GetGraphDescription@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

void std::vector<Phase::SpatialModeler::QueryDesc>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 80;
        std::allocator<Phase::SpatialModeler::QueryDesc>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<Phase::SpatialModeler::QueryDesc>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 48);
  if (v3)
  {
    *(void *)(a2 + 56) = v3;
    operator delete(v3);
  }
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v4 = *(void **)a2;
    operator delete(v4);
  }
}

uint64_t std::vector<Phase::SpatialModeler::QueryDesc>::__push_back_slow_path<Phase::SpatialModeler::QueryDesc const&>(int64x2_t *a1, long long *a2)
{
  unint64_t v2 = 0xCCCCCCCCCCCCCCCDLL * ((a1->i64[1] - a1->i64[0]) >> 4);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x333333333333333) {
    std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
  }
  int v6 = a1 + 16;
  if (0x999999999999999ALL * ((a1[1].i64[0] - a1->i64[0]) >> 4) > v3) {
    unint64_t v3 = 0x999999999999999ALL * ((a1[1].i64[0] - a1->i64[0]) >> 4);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[1].i64[0] - a1->i64[0]) >> 4) >= 0x199999999999999) {
    unint64_t v7 = 0x333333333333333;
  }
  else {
    unint64_t v7 = v3;
  }
  uint64_t v24 = a1 + 1;
  if (v7)
  {
    if (v7 > 0x333333333333333) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    float v8 = (char *)operator new(80 * v7);
  }
  else
  {
    float v8 = 0;
  }
  uint64_t v21 = v8;
  v22.i64[0] = (uint64_t)&v8[80 * v2];
  uint64_t v23 = &v8[80 * v7];
  std::allocator<Phase::SpatialModeler::QueryDesc>::construct[abi:ne180100]<Phase::SpatialModeler::QueryDesc,Phase::SpatialModeler::QueryDesc const&>(v6, (std::string *)v22.i64[0], a2);
  uint64_t v9 = v22.i64[0];
  uint64_t v10 = v22.i64[0] + 80;
  v22.i64[1] = v22.i64[0] + 80;
  uint64_t v12 = a1->i64[0];
  unint64_t v11 = a1->u64[1];
  if (v11 == a1->i64[0])
  {
    int64x2_t v18 = vdupq_n_s64(v11);
  }
  else
  {
    uint64_t v13 = 0;
    do
    {
      uint64_t v14 = v9 + v13;
      uint64_t v15 = v11 + v13;
      long long v16 = *(_OWORD *)(v11 + v13 - 80);
      *(void *)(v14 - 64) = *(void *)(v11 + v13 - 64);
      *(_OWORD *)(v14 - 80) = v16;
      *(void *)(v15 - 72) = 0;
      *(void *)(v15 - 64) = 0;
      *(void *)(v15 - 80) = 0;
      long long v17 = *(_OWORD *)(v11 + v13 - 56);
      *(_DWORD *)(v14 - 40) = *(_DWORD *)(v11 + v13 - 40);
      *(_OWORD *)(v14 - 56) = v17;
      *(void *)(v14 - 24) = 0;
      *(void *)(v14 - 16) = 0;
      *(void *)(v14 - 32) = 0;
      *(_OWORD *)(v14 - 32) = *(_OWORD *)(v11 + v13 - 32);
      *(void *)(v14 - 16) = *(void *)(v11 + v13 - 16);
      *(void *)(v15 - 32) = 0;
      *(void *)(v15 - 24) = 0;
      *(void *)(v15 - 16) = 0;
      *(void *)(v14 - 8) = *(void *)(v11 + v13 - 8);
      v13 -= 80;
    }
    while (v11 + v13 != v12);
    int64x2_t v18 = *a1;
    uint64_t v10 = v22.i64[1];
    v9 += v13;
  }
  a1->i64[0] = v9;
  a1->i64[1] = v10;
  int64x2_t v22 = v18;
  uint64_t v19 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v23;
  uint64_t v23 = v19;
  uint64_t v21 = (char *)v18.i64[0];
  std::__split_buffer<Phase::SpatialModeler::QueryDesc>::~__split_buffer((uint64_t)&v21);
  return v10;
}

void sub_221E7D428(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<Phase::SpatialModeler::QueryDesc>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

double std::allocator<Phase::SpatialModeler::QueryDesc>::construct[abi:ne180100]<Phase::SpatialModeler::QueryDesc,Phase::SpatialModeler::QueryDesc const&>(int a1, std::string *this, long long *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v5 = *a3;
    this->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  long long v6 = *(long long *)((char *)a3 + 24);
  int v7 = *((_DWORD *)a3 + 10);
  this[2].__r_.__value_.__r.__words[0] = 0;
  LODWORD(this[1].__r_.__value_.__r.__words[2]) = v7;
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v6;
  this[2].__r_.__value_.__l.__size_ = 0;
  this[2].__r_.__value_.__r.__words[2] = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(this[2].__r_.__value_.__r.__words, *((const void **)a3 + 6), *((void *)a3 + 7), (uint64_t)(*((void *)a3 + 7) - *((void *)a3 + 6)) >> 2);
  double result = *((double *)a3 + 9);
  *(double *)&this[3].__r_.__value_.__l.__data_ = result;
  return result;
}

void sub_221E7D4BC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    double result = std::vector<unsigned int>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      double result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_221E7D538(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned int>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
  }
  double result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void std::vector<unsigned int>::__throw_length_error[abi:ne180100]()
{
}

uint64_t std::__split_buffer<Phase::SpatialModeler::QueryDesc>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    *(void *)(a1 + 16) = i - 80;
    std::allocator<Phase::SpatialModeler::QueryDesc>::destroy[abi:ne180100](v4, i - 80);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t *std::vector<Phase::SpatialModeler::RenderGroup>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v5 = *result;
  uint64_t v4 = result[1];
  uint64_t v6 = a2[1];
  if (v4 != *result)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = v6 + v7 - 336;
      long long v9 = *(_OWORD *)(v4 + v7 - 336);
      *(void *)(v8 + 16) = *(void *)(v4 + v7 - 320);
      *(_OWORD *)uint64_t v8 = v9;
      *(_DWORD *)(v6 + v7 - 312) = *(_DWORD *)(v4 + v7 - 312);
      *(_DWORD *)(v6 + v7 - 308) = *(_DWORD *)(v4 + v7 - 308);
      *(_DWORD *)(v6 + v7 - 304) = *(_DWORD *)(v4 + v7 - 304);
      *(_DWORD *)(v6 + v7 - 300) = *(_DWORD *)(v4 + v7 - 300);
      *(_DWORD *)(v6 + v7 - 296) = *(_DWORD *)(v4 + v7 - 296);
      *(_DWORD *)(v6 + v7 - 292) = *(_DWORD *)(v4 + v7 - 292);
      *(_DWORD *)(v6 + v7 - 288) = *(_DWORD *)(v4 + v7 - 288);
      *(_DWORD *)(v6 + v7 - 284) = *(_DWORD *)(v4 + v7 - 284);
      double result = (uint64_t *)memcpy((void *)(v6 + v7 - 280), (const void *)(v4 + v7 - 280), 0x109uLL);
      v7 -= 336;
    }
    while (v4 + v7 != v5);
    v6 += v7;
  }
  a2[1] = v6;
  uint64_t v10 = *v3;
  uint64_t *v3 = v6;
  a2[1] = v10;
  uint64_t v11 = v3[1];
  v3[1] = a2[2];
  a2[2] = v11;
  uint64_t v12 = v3[2];
  double v3[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::SpatialModeler::RenderGroup>>(unint64_t a1)
{
  if (a1 >= 0xC30C30C30C30C4) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(336 * a1);
}

void *Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::RenderGroup*)#1} const&>@<X0>(Phase::Logger *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, size_t *a4@<X8>)
{
  *(void *)&v21[5] = *MEMORY[0x263EF8340];
  if (!a1)
  {
    long long v17 = **(NSObject ***)(Phase::Logger::GetInstance(0) + 112);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v19 = 136315394;
      *(void *)&v19[4] = "ManagedPtr.hpp";
      *(_WORD *)&v19[12] = 1024;
      *(_DWORD *)&v19[14] = 229;
      _os_log_impl(&dword_221E5E000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [inCount == 0 is true]: \"Attempting to allocate an array of 0 elements\"", v19, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Attempting to allocate an array of 0 elements");
  }
  size_t v7 = 336 * **(void **)(a2 + 8);
  if (v7)
  {
    std::align_val_t v8 = **(void **)(a2 + 16);
    if (!v8)
    {
      long long v9 = operator new(v7);
      goto LABEL_7;
    }
    if ((v8 & (v8 - 1)) == 0)
    {
      long long v9 = operator new(v7, v8);
LABEL_7:
      size_t v7 = (size_t)v9;
      goto LABEL_11;
    }
    uint64_t v10 = **(NSObject ***)(Phase::Logger::GetInstance(a1) + 176);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v19 = 136315650;
      *(void *)&v19[4] = "SystemAllocator.hpp";
      *(_WORD *)&v19[12] = 1024;
      *(_DWORD *)&v19[14] = 47;
      __int16 v20 = 2048;
      *(void *)uint64_t v21 = v7;
      _os_log_impl(&dword_221E5E000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d Error allocating memory - alignment must be power of two. Alignment requested %zu", v19, 0x1Cu);
    }
    size_t v7 = 0;
  }
LABEL_11:
  size_t v11 = v7 + 336 * (void)a1;
  size_t v12 = v7;
  do
  {
    uint64_t v13 = 0;
    *(_DWORD *)(v12 + 32) = 0;
    *(_OWORD *)size_t v12 = 0u;
    *(_OWORD *)(v12 + 16) = 0u;
    *(void *)(v12 + 36) = 1065353216;
    *(void *)(v12 + 44) = 0;
    *(_DWORD *)(v12 + 52) = 1065353216;
    do
    {
      size_t v14 = v12 + v13;
      *(_DWORD *)(v14 + 56) = 0;
      *(void *)(v14 + 64) = 0;
      v13 += 16;
    }
    while (v13 != 128);
    *(void *)(v12 + 184) = 0;
    *(void *)uint64_t v19 = 0;
    *(_DWORD *)&v19[8] = 0;
    Phase::Subbands<float>::Subbands(v12 + 192, v19, 3);
    *(unsigned char *)(v12 + 320) = 0;
    v12 += 336;
  }
  while (v12 != v11);
  uint64_t v15 = *a3;
  *(void *)uint64_t v19 = &unk_26D471878;
  *(void *)&v19[8] = v15;
  *(void *)&v21[1] = v19;
  *a4 = v7;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)(a4 + 1), (uint64_t)v19);
  return std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v19);
}

void sub_221E7DA28(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::RenderGroup*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::RenderGroup*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::RenderGroup*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::RenderGroup*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::~__func()
{
}

void *std::__function::__func<std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::RenderGroup*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::RenderGroup*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::RenderGroup*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::RenderGroup*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26D471878;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::RenderGroup*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::RenderGroup*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::RenderGroup*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::RenderGroup*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D471878;
  a2[1] = v2;
  return result;
}

void std::__function::__func<std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::RenderGroup*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::RenderGroup*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::RenderGroup*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::RenderGroup*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::operator()(uint64_t a1, void **a2)
{
}

uint64_t std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

uint64_t *std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>>::operator=[abi:ne180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>>::reset[abi:ne180100]<Phase::SpatialModeler::RenderGroup*,0>(a1, v4);
  std::__function::__value_func<void ()(void *)>::operator=[abi:ne180100](a1 + 1, (uint64_t)(a2 + 1));
  return a1;
}

uint64_t *std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>>::reset[abi:ne180100]<Phase::SpatialModeler::RenderGroup*,0>(uint64_t *result, uint64_t a2)
{
  uint64_t v3 = *result;
  void *result = a2;
  if (v3) {
    return (uint64_t *)std::function<void ()(void *)>::operator()((uint64_t)(result + 1), v3);
  }
  return result;
}

void *std::__function::__value_func<void ()(void *)>::operator=[abi:ne180100](void *a1, uint64_t a2)
{
  std::__function::__value_func<void ()(void *)>::operator=[abi:ne180100](a1);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v4;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void *std::__function::__value_func<void ()(void *)>::operator=[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *Phase::details::AllocArray<BOOL,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(BOOL*)#1} const&>@<X0>(Phase::Logger *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  *(void *)&v16[5] = *MEMORY[0x263EF8340];
  if (!a1)
  {
    size_t v12 = **(NSObject ***)(Phase::Logger::GetInstance(0) + 112);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)size_t v14 = 136315394;
      *(void *)&v14[4] = "ManagedPtr.hpp";
      *(_WORD *)&v14[12] = 1024;
      *(_DWORD *)&v14[14] = 229;
      _os_log_impl(&dword_221E5E000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [inCount == 0 is true]: \"Attempting to allocate an array of 0 elements\"", v14, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Attempting to allocate an array of 0 elements");
  }
  size_t v6 = **(void **)(a2 + 8);
  if (!v6) {
    goto LABEL_9;
  }
  std::align_val_t v7 = **(void **)(a2 + 16);
  if (!v7)
  {
    std::align_val_t v8 = operator new(v6);
    goto LABEL_10;
  }
  if ((v7 & (v7 - 1)) != 0)
  {
    long long v9 = **(NSObject ***)(Phase::Logger::GetInstance(a1) + 176);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)size_t v14 = 136315650;
      *(void *)&v14[4] = "SystemAllocator.hpp";
      *(_WORD *)&v14[12] = 1024;
      *(_DWORD *)&v14[14] = 47;
      __int16 v15 = 2048;
      *(void *)long long v16 = v6;
      _os_log_impl(&dword_221E5E000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d Error allocating memory - alignment must be power of two. Alignment requested %zu", v14, 0x1Cu);
    }
LABEL_9:
    std::align_val_t v8 = 0;
    goto LABEL_10;
  }
  std::align_val_t v8 = operator new(v6, v7);
LABEL_10:
  uint64_t v10 = *a3;
  *(void *)size_t v14 = &unk_26D4718C0;
  *(void *)&v14[8] = v10;
  *(void *)&v16[1] = v14;
  *a4 = v8;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)(a4 + 1), (uint64_t)v14);
  return std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v14);
}

void sub_221E7DED4(_Unwind_Exception *exception_object)
{
}

void std::__function::__func<std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(BOOL*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(BOOL*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(BOOL*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(BOOL*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::~__func()
{
}

void *std::__function::__func<std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(BOOL*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(BOOL*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(BOOL*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(BOOL*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26D4718C0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(BOOL*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(BOOL*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(BOOL*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(BOOL*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D4718C0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(BOOL*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(BOOL*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(BOOL*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(BOOL*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::operator()(uint64_t a1, void **a2)
{
}

uint64_t *std::unique_ptr<BOOL [],std::function<void ()(void *)>>::operator=[abi:ne180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  std::unique_ptr<BOOL [],std::function<void ()(void *)>>::reset[abi:ne180100]<BOOL *,0>(a1, v4);
  std::__function::__value_func<void ()(void *)>::operator=[abi:ne180100](a1 + 1, (uint64_t)(a2 + 1));
  return a1;
}

uint64_t *std::unique_ptr<BOOL [],std::function<void ()(void *)>>::reset[abi:ne180100]<BOOL *,0>(uint64_t *result, uint64_t a2)
{
  uint64_t v3 = *result;
  void *result = a2;
  if (v3) {
    return (uint64_t *)std::function<void ()(void *)>::operator()((uint64_t)(result + 1), v3);
  }
  return result;
}

void *Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingOutput*)#1} const&>@<X0>(Phase::Logger *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  *(void *)&v18[5] = *MEMORY[0x263EF8340];
  if (!a1)
  {
    size_t v14 = **(NSObject ***)(Phase::Logger::GetInstance(0) + 112);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long v16 = 136315394;
      *(void *)&v16[4] = "ManagedPtr.hpp";
      *(_WORD *)&v16[12] = 1024;
      *(_DWORD *)&v16[14] = 229;
      _os_log_impl(&dword_221E5E000, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [inCount == 0 is true]: \"Attempting to allocate an array of 0 elements\"", v16, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Attempting to allocate an array of 0 elements");
  }
  size_t v7 = 16 * **(void **)(a2 + 8);
  if (!v7) {
    goto LABEL_9;
  }
  std::align_val_t v8 = **(void **)(a2 + 16);
  if (!v8)
  {
    long long v9 = operator new(v7);
    goto LABEL_10;
  }
  if ((v8 & (v8 - 1)) != 0)
  {
    uint64_t v10 = **(NSObject ***)(Phase::Logger::GetInstance(a1) + 176);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long v16 = 136315650;
      *(void *)&v16[4] = "SystemAllocator.hpp";
      *(_WORD *)&v16[12] = 1024;
      *(_DWORD *)&v16[14] = 47;
      __int16 v17 = 2048;
      *(void *)int64x2_t v18 = v7;
      _os_log_impl(&dword_221E5E000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d Error allocating memory - alignment must be power of two. Alignment requested %zu", v16, 0x1Cu);
    }
LABEL_9:
    long long v9 = 0;
    goto LABEL_10;
  }
  long long v9 = operator new(v7, v8);
LABEL_10:
  size_t v11 = v9;
  do
  {
    *size_t v11 = -1;
    v11[1] = 0;
    v11 += 2;
  }
  while (v11 != &v9[2 * (void)a1]);
  uint64_t v12 = *a3;
  *(void *)long long v16 = &unk_26D471908;
  *(void *)&v16[8] = v12;
  *(void *)&v18[1] = v16;
  *a4 = v9;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)(a4 + 1), (uint64_t)v16);
  return std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v16);
}

void sub_221E7E21C(_Unwind_Exception *exception_object)
{
}

void std::__function::__func<std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingOutput*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingOutput*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingOutput*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingOutput*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::~__func()
{
}

void *std::__function::__func<std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingOutput*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingOutput*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingOutput*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingOutput*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26D471908;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingOutput*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingOutput*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingOutput*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingOutput*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D471908;
  a2[1] = v2;
  return result;
}

void std::__function::__func<std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingOutput*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingOutput*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingOutput*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingOutput*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::operator()(uint64_t a1, void **a2)
{
}

uint64_t *std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>>::operator=[abi:ne180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>>::reset[abi:ne180100]<Phase::SpatialModeler::SubmixRoutingOutput*,0>(a1, v4);
  std::__function::__value_func<void ()(void *)>::operator=[abi:ne180100](a1 + 1, (uint64_t)(a2 + 1));
  return a1;
}

uint64_t *std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>>::reset[abi:ne180100]<Phase::SpatialModeler::SubmixRoutingOutput*,0>(uint64_t *result, uint64_t a2)
{
  uint64_t v3 = *result;
  void *result = a2;
  if (v3) {
    return (uint64_t *)std::function<void ()(void *)>::operator()((uint64_t)(result + 1), v3);
  }
  return result;
}

void *Phase::AllocPackedSubbandArray<float,Phase::SystemAllocator>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  v12[4] = *MEMORY[0x263EF8340];
  uint64_t v8 = 4 * a2 * a3;
  long long v9 = (void *)(v8 + 16);
  if (v8 != -16) {
    long long v9 = operator new((size_t)v9, (std::align_val_t)8uLL);
  }
  v12[0] = &unk_26D4719E0;
  v12[1] = a1;
  void v12[3] = v12;
  *a4 = v9;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)(a4 + 1), (uint64_t)v12);
  double result = std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v12);
  size_t v11 = (void *)*a4;
  *size_t v11 = a2;
  v11[1] = a3;
  return result;
}

uint64_t *std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::operator=[abi:ne180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::reset[abi:ne180100](a1, v4);
  std::__function::__value_func<void ()(void *)>::operator=[abi:ne180100](a1 + 1, (uint64_t)(a2 + 1));
  return a1;
}

void *Phase::details::AllocArray<Phase::Vector<float,3ul>,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&>@<X0>(Phase::Logger *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, size_t *a4@<X8>)
{
  *(void *)&v17[5] = *MEMORY[0x263EF8340];
  if (!a1)
  {
    uint64_t v13 = **(NSObject ***)(Phase::Logger::GetInstance(0) + 112);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int16 v15 = 136315394;
      *(void *)&v15[4] = "ManagedPtr.hpp";
      *(_WORD *)&v15[12] = 1024;
      *(_DWORD *)&v15[14] = 229;
      _os_log_impl(&dword_221E5E000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [inCount == 0 is true]: \"Attempting to allocate an array of 0 elements\"", v15, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Attempting to allocate an array of 0 elements");
  }
  size_t v7 = 12 * **(void **)(a2 + 8);
  if (v7)
  {
    std::align_val_t v8 = **(void **)(a2 + 16);
    if (!v8)
    {
      long long v9 = operator new(v7);
      goto LABEL_7;
    }
    if ((v8 & (v8 - 1)) == 0)
    {
      long long v9 = operator new(v7, v8);
LABEL_7:
      size_t v7 = (size_t)v9;
      goto LABEL_11;
    }
    uint64_t v10 = **(NSObject ***)(Phase::Logger::GetInstance(a1) + 176);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int16 v15 = 136315650;
      *(void *)&v15[4] = "SystemAllocator.hpp";
      *(_WORD *)&v15[12] = 1024;
      *(_DWORD *)&v15[14] = 47;
      __int16 v16 = 2048;
      *(void *)__int16 v17 = v7;
      _os_log_impl(&dword_221E5E000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d Error allocating memory - alignment must be power of two. Alignment requested %zu", v15, 0x1Cu);
    }
    size_t v7 = 0;
  }
LABEL_11:
  bzero((void *)v7, 12 * ((12 * (uint64_t)a1 - 12) / 0xCuLL) + 12);
  uint64_t v11 = *a3;
  *(void *)__int16 v15 = &unk_26D471950;
  *(void *)&v15[8] = v11;
  *(void *)&v17[1] = v15;
  *a4 = v7;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)(a4 + 1), (uint64_t)v15);
  return std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v15);
}

void sub_221E7E688(_Unwind_Exception *exception_object)
{
}

void std::__function::__func<std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::~__func()
{
}

void *std::__function::__func<std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26D471950;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D471950;
  a2[1] = v2;
  return result;
}

void std::__function::__func<std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::operator()(uint64_t a1, void **a2)
{
}

uint64_t *std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1 = *result;
  void *result = 0;
  if (v1) {
    return (uint64_t *)std::function<void ()(void *)>::operator()((uint64_t)(result + 1), v1);
  }
  return result;
}

uint64_t *std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::operator=[abi:ne180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::reset[abi:ne180100]<Phase::Vector<float,3ul>*,0>(a1, v4);
  std::__function::__value_func<void ()(void *)>::operator=[abi:ne180100](a1 + 1, (uint64_t)(a2 + 1));
  return a1;
}

uint64_t *std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::reset[abi:ne180100]<Phase::Vector<float,3ul>*,0>(uint64_t *result, uint64_t a2)
{
  uint64_t v3 = *result;
  void *result = a2;
  if (v3) {
    return (uint64_t *)std::function<void ()(void *)>::operator()((uint64_t)(result + 1), v3);
  }
  return result;
}

void *Phase::details::AllocArray<float,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(float*)#1} const&>@<X0>(Phase::Logger *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  *(void *)&v16[5] = *MEMORY[0x263EF8340];
  if (!a1)
  {
    uint64_t v12 = **(NSObject ***)(Phase::Logger::GetInstance(0) + 112);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)size_t v14 = 136315394;
      *(void *)&v14[4] = "ManagedPtr.hpp";
      *(_WORD *)&v14[12] = 1024;
      *(_DWORD *)&v14[14] = 229;
      _os_log_impl(&dword_221E5E000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [inCount == 0 is true]: \"Attempting to allocate an array of 0 elements\"", v14, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Attempting to allocate an array of 0 elements");
  }
  size_t v6 = 4 * **(void **)(a2 + 8);
  if (!v6) {
    goto LABEL_9;
  }
  std::align_val_t v7 = **(void **)(a2 + 16);
  if (!v7)
  {
    std::align_val_t v8 = operator new(v6);
    goto LABEL_10;
  }
  if ((v7 & (v7 - 1)) != 0)
  {
    long long v9 = **(NSObject ***)(Phase::Logger::GetInstance(a1) + 176);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)size_t v14 = 136315650;
      *(void *)&v14[4] = "SystemAllocator.hpp";
      *(_WORD *)&v14[12] = 1024;
      *(_DWORD *)&v14[14] = 47;
      __int16 v15 = 2048;
      *(void *)__int16 v16 = v6;
      _os_log_impl(&dword_221E5E000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d Error allocating memory - alignment must be power of two. Alignment requested %zu", v14, 0x1Cu);
    }
LABEL_9:
    std::align_val_t v8 = 0;
    goto LABEL_10;
  }
  std::align_val_t v8 = operator new(v6, v7);
LABEL_10:
  uint64_t v10 = *a3;
  *(void *)size_t v14 = &unk_26D471998;
  *(void *)&v14[8] = v10;
  *(void *)&v16[1] = v14;
  *a4 = v8;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)(a4 + 1), (uint64_t)v14);
  return std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v14);
}

void sub_221E7E9D8(_Unwind_Exception *exception_object)
{
}

void std::__function::__func<std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(float*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(float*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(float*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(float*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::~__func()
{
}

void *std::__function::__func<std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(float*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(float*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(float*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(float*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26D471998;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(float*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(float*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(float*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(float*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D471998;
  a2[1] = v2;
  return result;
}

void std::__function::__func<std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(float*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(float*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(float*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(float*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::operator()(uint64_t a1, void **a2)
{
}

uint64_t *std::unique_ptr<float [],std::function<void ()(void *)>>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1 = *result;
  void *result = 0;
  if (v1) {
    return (uint64_t *)std::function<void ()(void *)>::operator()((uint64_t)(result + 1), v1);
  }
  return result;
}

uint64_t *std::unique_ptr<float [],std::function<void ()(void *)>>::operator=[abi:ne180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  std::unique_ptr<float [],std::function<void ()(void *)>>::reset[abi:ne180100]<float *,0>(a1, v4);
  std::__function::__value_func<void ()(void *)>::operator=[abi:ne180100](a1 + 1, (uint64_t)(a2 + 1));
  return a1;
}

uint64_t *std::unique_ptr<float [],std::function<void ()(void *)>>::reset[abi:ne180100]<float *,0>(uint64_t *result, uint64_t a2)
{
  uint64_t v3 = *result;
  void *result = a2;
  if (v3) {
    return (uint64_t *)std::function<void ()(void *)>::operator()((uint64_t)(result + 1), v3);
  }
  return result;
}

void std::__function::__func<std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>> Phase::details::AllocMem<Phase::PackedSubbandArray<float>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>> Phase::details::AllocMem<Phase::PackedSubbandArray<float>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void *)#1}>,void ()(void *)>::~__func()
{
}

void *std::__function::__func<std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>> Phase::details::AllocMem<Phase::PackedSubbandArray<float>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>> Phase::details::AllocMem<Phase::PackedSubbandArray<float>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void *)#1}>,void ()(void *)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26D4719E0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>> Phase::details::AllocMem<Phase::PackedSubbandArray<float>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>> Phase::details::AllocMem<Phase::PackedSubbandArray<float>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void *)#1}>,void ()(void *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D4719E0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>> Phase::details::AllocMem<Phase::PackedSubbandArray<float>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>> Phase::details::AllocMem<Phase::PackedSubbandArray<float>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void *)#1}>,void ()(void *)>::operator()(uint64_t a1, void **a2)
{
}

uint64_t *std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v3 = *result;
  void *result = a2;
  if (v3) {
    return (uint64_t *)std::function<void ()(void *)>::operator()((uint64_t)(result + 1), v3);
  }
  return result;
}

void std::vector<Phase::SpatialModeler::GraphDescriptionNode>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (a2 <= (v6 - v7) >> 5)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 32 * a2);
      v7 += 32 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - *a1;
    unint64_t v9 = a2 + (v8 >> 5);
    if (v9 >> 59) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 5;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 4 > v9) {
      unint64_t v9 = v11 >> 4;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    uint64_t v18 = v4;
    if (v12) {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::SpatialModeler::GraphDescriptionNode>>(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    size_t v14 = v13;
    __int16 v15 = &v13[32 * v10];
    __int16 v17 = &v13[32 * v12];
    bzero(v15, 32 * a2);
    __int16 v16 = &v15[32 * a2];
    std::vector<Phase::SpatialModeler::GraphDescriptionNode>::__swap_out_circular_buffer(a1, &v14);
    std::__split_buffer<Phase::SpatialModeler::GraphDescriptionNode>::~__split_buffer((uint64_t)&v14);
  }
}

void sub_221E7ECDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<Phase::SpatialModeler::GraphDescriptionNode>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<Phase::SpatialModeler::GraphDescriptionNode>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<Phase::SpatialModeler::GraphDescriptionNode>,std::reverse_iterator<Phase::SpatialModeler::GraphDescriptionNode*>,std::reverse_iterator<Phase::SpatialModeler::GraphDescriptionNode*>,std::reverse_iterator<Phase::SpatialModeler::GraphDescriptionNode*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::SpatialModeler::GraphDescriptionNode>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(32 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<Phase::SpatialModeler::GraphDescriptionNode>,std::reverse_iterator<Phase::SpatialModeler::GraphDescriptionNode*>,std::reverse_iterator<Phase::SpatialModeler::GraphDescriptionNode*>,std::reverse_iterator<Phase::SpatialModeler::GraphDescriptionNode*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  double v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 32);
      *(void *)(v7 - 16) = *(void *)(a3 - 16);
      *(_OWORD *)(v7 - 32) = v8;
      *(void *)(a3 - 24) = 0;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(v7 - 8) = *(void *)(a3 - 8);
      uint64_t v7 = *((void *)&v14 + 1) - 32;
      *((void *)&v14 + 1) -= 32;
      a3 -= 32;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Phase::SpatialModeler::GraphDescriptionNode>,std::reverse_iterator<Phase::SpatialModeler::GraphDescriptionNode*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Phase::SpatialModeler::GraphDescriptionNode>,std::reverse_iterator<Phase::SpatialModeler::GraphDescriptionNode*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<Phase::SpatialModeler::GraphDescriptionNode>,std::reverse_iterator<Phase::SpatialModeler::GraphDescriptionNode*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<Phase::SpatialModeler::GraphDescriptionNode>,std::reverse_iterator<Phase::SpatialModeler::GraphDescriptionNode*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 32;
  }
}

uint64_t std::__split_buffer<Phase::SpatialModeler::GraphDescriptionNode>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<Phase::SpatialModeler::GraphDescriptionNode>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 4;
      *(void *)(a1 + 16) = v2 - 4;
      if (*((char *)v2 - 9) < 0)
      {
        operator delete(*v5);
        uint64_t v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

void Phase::ArrayFunction::Interleave(const void **this, DSPComplex *__C, vDSP_Length __N, uint64_t a4)
{
  if (a4 == 1)
  {
    uint64_t v5 = *this;
    size_t v6 = 4 * __N;
    memcpy(__C, v5, v6);
  }
  else if (a4 == 2)
  {
    DSPSplitComplex v12 = *(DSPSplitComplex *)this;
    vDSP_ztoc(&v12, 1, __C, 2, __N);
  }
  else if (__N)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    do
    {
      uint64_t v9 = (Phase::ArrayFunction *)this;
      for (uint64_t i = a4; i; --i)
      {
        uint64_t v11 = *(void *)v9;
        uint64_t v9 = (Phase::ArrayFunction *)((char *)v9 + 8);
        *((_DWORD *)&__C->real + v8++) = *(_DWORD *)(v11 + 4 * v7);
      }
      ++v7;
    }
    while (v7 != __N);
  }
}

void Phase::ArrayFunction::Deinterleave(DSPComplex *__C, const float *a2, vDSP_Length __N, uint64_t a4)
{
  if (a4 == 1)
  {
    uint64_t v5 = *(void **)a2;
    size_t v6 = 4 * __N;
    memcpy(v5, __C, v6);
  }
  else if (a4 == 2)
  {
    DSPSplitComplex v13 = *(DSPSplitComplex *)a2;
    vDSP_ctoz(__C, 2, &v13, 1, __N);
  }
  else if (__N)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    do
    {
      uint64_t v9 = a2;
      for (uint64_t i = a4; i; --i)
      {
        int v11 = *((_DWORD *)&__C->real + v8++);
        uint64_t v12 = *(void *)v9;
        v9 += 2;
        *(_DWORD *)(v12 + 4 * v7) = v11;
      }
      ++v7;
    }
    while (v7 != __N);
  }
}

void Phase::Controller::AssetUnloader::AssetUnloader(Phase::Controller::AssetUnloader *this, PHASEEngineImpl *a2)
{
}

void sub_221E7F18C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v4);
  std::__list_imp<Phase::Controller::AssetUnloader::ObjectUnloadRequest>::clear(v3);
  std::__list_imp<Phase::Controller::AssetUnloader::UnloadRequest>::clear(v2);
  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::~Commandable(v1);
  _Unwind_Resume(a1);
}

void Phase::Controller::AssetUnloader::UnregisterAsset(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id aBlock = a3;
  size_t v6 = operator new(0x20uLL);
  v6[2] = v5;
  id v7 = v5;
  v6[3] = _Block_copy(aBlock);
  uint64_t v8 = a1[5];
  a1 += 5;
  *(void *)(v8 + 8) = v6;

  *a1 = v6;
  void *v6 = v8;
  v6[1] = a1;
  ++a1[2];
}

void sub_221E7F254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void Phase::Controller::AssetUnloader::Update(Phase::Controller::AssetUnloader *this)
{
  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::ExecuteCommands((uint64_t)this);
  uint64_t v2 = (Phase::Controller::AssetUnloader *)*((void *)this + 6);
  if (v2 != (Phase::Controller::AssetUnloader *)((char *)this + 40))
  {
    int v3 = 0;
    uint64_t v4 = (id *)((char *)this + 104);
    unint64_t v5 = 0x2645F6000uLL;
    while (1)
    {
      id v6 = *((id *)v2 + 2);
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        break;
      }
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        uint64_t v12 = (Phase::ActionTreeManager *)*((void *)this + 12);
        uint64_t v8 = [v6 identifier];
        uint64_t StringHashId = Phase::GetStringHashId(v8, v13);
        int v11 = Phase::ActionTreeManager::StopActionTreesWithActionTreeAsset(v12, StringHashId);
        goto LABEL_9;
      }
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        __int16 v15 = (Phase::ActionTreeManager *)*((void *)this + 12);
        uint64_t v8 = [v6 identifier];
        uint64_t v17 = Phase::GetStringHashId(v8, v16);
        int v11 = Phase::ActionTreeManager::StopActionTreesWithGlobalMetaParameterAsset(v15, v17);
        goto LABEL_9;
      }
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0) {
        goto LABEL_11;
      }
      unint64_t v22 = v5;
      uint64_t v8 = (Phase *)v6;
      uint64_t v23 = (void *)[(Phase *)v8 getDataBundle];
      if (v23[1])
      {
        uint64_t v24 = 0;
        unint64_t v25 = 0;
        int v3 = 0;
        do
        {
          if (Phase::ActionTreeManager::StopActionTreesWithActionTreeAsset(*((Phase::ActionTreeManager **)this + 12), *(void *)(v23[2] + v24)))int v3 = 1; {
          ++v25;
          }
          v24 += 120;
        }
        while (v25 < v23[1]);
      }
      else
      {
        int v3 = 0;
      }
      if (v23[3])
      {
        uint64_t v26 = 0;
        unint64_t v27 = 0;
        do
        {
          if (Phase::ActionTreeManager::StopActionTreesWithSoundAsset(*((Phase::ActionTreeManager **)this + 12), *(void *)(v23[4] + v26)))
          {
            int v3 = 1;
          }
          ++v27;
          v26 += 1064;
        }
        while (v27 < v23[3]);
      }
      if (v23[7])
      {
        uint64_t v28 = 0;
        unint64_t v29 = 0;
        do
        {
          if (Phase::ActionTreeManager::StopActionTreesWithGlobalMetaParameterAsset(*((Phase::ActionTreeManager **)this + 12), *(void *)(v23[8] + v28)))int v3 = 1; {
          ++v29;
          }
          v28 += 464;
        }
        while (v29 < v23[7]);
      }
      uint64_t v4 = (id *)((char *)this + 104);
      unint64_t v5 = v22;
LABEL_10:

LABEL_11:
      if (v3)
      {
        uint64_t v18 = (Phase::Controller::AssetUnloader *)*((void *)v2 + 1);
      }
      else
      {
        id WeakRetained = objc_loadWeakRetained(v4);
        [WeakRetained removeAssetInternal:v6];

        uint64_t v20 = *((void *)v2 + 3);
        if (v20) {
          (*(void (**)(uint64_t, uint64_t))(v20 + 16))(v20, 1);
        }
        uint64_t v21 = *(void **)v2;
        uint64_t v18 = (Phase::Controller::AssetUnloader *)*((void *)v2 + 1);
        v21[1] = v18;
        **((void **)v2 + 1) = v21;
        --*((void *)this + 7);
        std::__list_imp<Phase::Controller::AssetUnloader::UnloadRequest>::__delete_node[abi:ne180100]<>((uint64_t)this + 40, (id *)v2);
      }

      uint64_t v2 = v18;
      if (v18 == (Phase::Controller::AssetUnloader *)((char *)this + 40)) {
        goto LABEL_37;
      }
    }
    id v7 = (Phase::ActionTreeManager *)*((void *)this + 12);
    uint64_t v8 = [v6 identifier];
    uint64_t v10 = Phase::GetStringHashId(v8, v9);
    int v11 = Phase::ActionTreeManager::StopActionTreesWithSoundAsset(v7, v10);
LABEL_9:
    int v3 = v11;
    goto LABEL_10;
  }
LABEL_37:
  uint64_t v30 = (uint64_t *)*((void *)this + 9);
  while (v30 != (uint64_t *)((char *)this + 64))
  {
    v31.mData = v30[3];
    if (Phase::ActionTreeManager::StopActionTreesWithListenerSourceId(*((Phase::ActionTreeManager **)this + 12), v31))
    {
      uint64_t v30 = (uint64_t *)v30[1];
    }
    else
    {
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(*((void *)this + 11) + 368) + 248))(*(void *)(*((void *)this + 11) + 368), v30[2], v30[3]);
      uint64_t v32 = *v30;
      long long v33 = (uint64_t *)v30[1];
      *(void *)(v32 + 8) = v33;
      *(void *)v30[1] = v32;
      --*((void *)this + 10);
      operator delete(v30);
      uint64_t v30 = v33;
    }
  }
}

void sub_221E7F5AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void Phase::Controller::AssetUnloader::~AssetUnloader(id *this)
{
  objc_destroyWeak(this + 13);
  std::__list_imp<Phase::Controller::AssetUnloader::ObjectUnloadRequest>::clear(this + 8);
  std::__list_imp<Phase::Controller::AssetUnloader::UnloadRequest>::clear(this + 5);

  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::~Commandable(this);
}

{
  uint64_t vars8;

  objc_destroyWeak(this + 13);
  std::__list_imp<Phase::Controller::AssetUnloader::ObjectUnloadRequest>::clear(this + 8);
  std::__list_imp<Phase::Controller::AssetUnloader::UnloadRequest>::clear(this + 5);
  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::~Commandable(this);

  JUMPOUT(0x223C938A0);
}

void *std::__list_imp<Phase::Controller::AssetUnloader::ObjectUnloadRequest>::clear(void *result)
{
  if (result[2])
  {
    uint64_t v1 = result;
    uint64_t result = (void *)result[1];
    uint64_t v2 = *v1;
    uint64_t v3 = *result;
    *(void *)(v3 + 8) = *(void *)(*v1 + 8);
    **(void **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        uint64_t v4 = (void *)result[1];
        operator delete(result);
        uint64_t result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

void std::__list_imp<Phase::Controller::AssetUnloader::UnloadRequest>::clear(void *a1)
{
  if (a1[2])
  {
    uint64_t v3 = *a1;
    uint64_t v2 = a1[1];
    uint64_t v4 = *(void **)v2;
    v4[1] = *(void *)(*a1 + 8);
    **(void **)(v3 + 8) = v4;
    a1[2] = 0;
    while ((void *)v2 != a1)
    {
      uint64_t v5 = *(void *)(v2 + 8);
      std::__list_imp<Phase::Controller::AssetUnloader::UnloadRequest>::__delete_node[abi:ne180100]<>((uint64_t)a1, (id *)v2);
      uint64_t v2 = v5;
    }
  }
}

void std::__list_imp<Phase::Controller::AssetUnloader::UnloadRequest>::__delete_node[abi:ne180100]<>(uint64_t a1, id *a2)
{
  operator delete(a2);
}

float Phase::SpatialModeler::AudibleEarlyReflection::sAerPlaneHashingToleranceFactorOrientationInternal(Phase::SpatialModeler::AudibleEarlyReflection *this)
{
  uint64_t v1 = (float *)&unk_267F77000;
  {
    uint64_t v1 = (float *)&unk_267F77000;
    if (v3)
    {
      Phase::SpatialModeler::AudibleEarlyReflection::sAerPlaneHashingToleranceFactorOrientationInternal(void)::sToleranceFactor = 1085635364;
      uint64_t v1 = (float *)&unk_267F77000;
    }
  }
  return v1[494];
}

int *Phase::SpatialModeler::AudibleEarlyReflection::AudibleEarlyReflection(int *a1, uint64_t a2, float *a3, uint64_t a4, int *a5, int *a6, int *a7, float a8)
{
  *((_OWORD *)a1 + 1) = 0u;
  uint64_t v8 = a1 + 4;
  *((_OWORD *)a1 + 7) = 0u;
  *((_OWORD *)a1 + 8) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  a1[67] = 0;
  *((void *)a1 + 34) = 0;
  *(_OWORD *)(a1 + 37) = 0u;
  *(_OWORD *)(a1 + 41) = 0u;
  *(_OWORD *)(a1 + 45) = 0u;
  *(_OWORD *)(a1 + 49) = 0u;
  *(_OWORD *)(a1 + 53) = 0u;
  *(_OWORD *)(a1 + 57) = 0u;
  *((_OWORD *)a1 + 15) = 0u;
  if (!a2) {
    std::terminate();
  }
  DSPSplitComplex v13 = a3;
  int v15 = *(_DWORD *)(a2 + 68);
  *a1 = v15;
  *(void *)(a1 + 1) = *(void *)(a2 + 60);
  *((float *)a1 + 3) = a8;
  uint64_t v16 = *((unsigned int *)a3 + 31);
  long long v30 = 0uLL;
  long long v31 = 0uLL;
  long long v32 = 0uLL;
  long long v33 = 0uLL;
  long long v34 = 0uLL;
  long long v35 = 0uLL;
  memset(v36, 0, 28);
  *(_DWORD *)&v36[28] = v16;
  if (v16) {
    bzero(&v30, 4 * v16);
  }
  long long v17 = v35;
  v8[4] = v34;
  v8[5] = v17;
  long long v18 = *(_OWORD *)&v36[16];
  v8[6] = *(_OWORD *)v36;
  v8[7] = v18;
  long long v19 = v31;
  *uint64_t v8 = v30;
  v8[1] = v19;
  long long v20 = v33;
  void v8[2] = v32;
  void v8[3] = v20;
  a1[61] = *a6;
  a1[62] = a6[1];
  a1[63] = a6[2];
  a1[55] = *a5;
  a1[56] = a5[1];
  a1[57] = a5[2];
  a1[58] = *a7;
  a1[59] = a7[1];
  a1[60] = a7[2];
  uint64_t v21 = *((unsigned int *)v13 + 31);
  if (v21)
  {
    do
    {
      float v22 = *v13++;
      *(float *)uint64_t v8 = sqrtf(v22);
      uint64_t v8 = (_OWORD *)((char *)v8 + 4);
      --v21;
    }
    while (v21);
  }
  unint64_t v23 = 0;
  a1[36] = 1065353216;
  uint64_t v24 = a4 + 12;
  do
  {
    unint64_t v25 = &a1[v23 / 4];
    v25[37] = *(_DWORD *)(a4 + v23);
    v25[38] = *(_DWORD *)(v24 + v23 - 8);
    v25[39] = *(_DWORD *)(v24 + v23 - 4);
    v25[40] = *(_DWORD *)(v24 + v23);
    v25[41] = *(_DWORD *)(v24 + v23 + 4);
    v25[42] = *(_DWORD *)(v24 + v23 + 8);
    v23 += 24;
  }
  while (v23 != 72);
  if (v15 < 1)
  {
    uint64_t v27 = 0;
  }
  else
  {
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v28 = (Phase::SpatialModeler::AudibleEarlyReflection *)(a1 + 40);
    do
    {
      ++v26;
      v27 += Phase::SpatialModeler::AudibleEarlyReflection::sPlaneHashWithBucketNormal(v28, (float *)v28 - 3) * v26;
      uint64_t v28 = (Phase::SpatialModeler::AudibleEarlyReflection *)((char *)v28 + 24);
    }
    while (v26 < *a1);
  }
  *((void *)a1 + 32) = v27;
  return a1;
}

float Phase::SpatialModeler::AudibleEarlyReflection::updateISPositionEstimate(Phase::SpatialModeler::AudibleEarlyReflection *this, float a2)
{
  float v3 = *((float *)this + 3) * a2;
  float v4 = *((float *)this + 1) * 0.017453;
  __float2 v5 = __sincosf_stret((float)(90.0 - *((float *)this + 2)) * 0.017453);
  __float2 v6 = __sincosf_stret(v4);
  float v7 = *((float *)this + 59) + (float)(v3 * v5.__cosval);
  float v8 = *((float *)this + 60);
  *((float *)this + 67) = *((float *)this + 58) + (float)(v6.__sinval * (float)(v3 * v5.__sinval));
  float result = v8 + (float)(v6.__cosval * (float)(v3 * v5.__sinval));
  *((float *)this + 68) = v7;
  *((float *)this + 69) = result;
  return result;
}

float Phase::SpatialModeler::AudibleEarlyReflection::operator+=(unsigned int *a1, unsigned int *a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  float v8 = *((float *)a1 + 36);
  float v9 = v8 / (float)(v8 + *((float *)a2 + 36));
  float v10 = 1.0 - v9;
  if (v9 >= (float)(1.0 - v9)) {
    int v11 = a1;
  }
  else {
    int v11 = a2;
  }
  uint64_t v12 = *v11;
  *a1 = v12;
  float v13 = *((float *)a1 + 1);
  float v14 = *((float *)a2 + 1);
  float v15 = vabds_f32(v13, v14);
  float v16 = v14 + 360.0;
  float v17 = v13 + 360.0;
  if (v13 >= v14) {
    float v17 = *((float *)a1 + 1);
  }
  else {
    float v16 = *((float *)a2 + 1);
  }
  if (v15 > 180.0)
  {
    float v14 = v16;
    float v13 = v17;
  }
  float v18 = (float)(v10 * v14) + (float)(v13 * v9);
  if (v18 > 360.0) {
    float v18 = v18 + -360.0;
  }
  *((float *)a1 + 1) = v18;
  float32x2_t v19 = vmla_n_f32(vmul_n_f32(*(float32x2_t *)(a2 + 2), v10), *(float32x2_t *)(a1 + 2), v9);
  *((float32x2_t *)a1 + 1) = v19;
  float v20 = (float)(v9 * *((float *)a1 + 63)) + (float)(v10 * *((float *)a2 + 63));
  float32x2_t v21 = vadd_f32(vmul_n_f32(*(float32x2_t *)(a1 + 61), v9), vmul_n_f32(*(float32x2_t *)(a2 + 61), v10));
  *(float *)&a8 = sqrtf(vaddv_f32(vmul_f32(v21, v21)) + (float)(v20 * v20));
  *(float32x2_t *)(a1 + 61) = vdiv_f32(v21, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a8, 0));
  *((float *)a1 + 63) = v20 / *(float *)&a8;
  float v22 = v8 + *((float *)a2 + 36);
  *((float *)a1 + 36) = v22;
  float v23 = (float)(v9 * *((float *)a1 + 60)) + (float)(v10 * *((float *)a2 + 60));
  *((float32x2_t *)a1 + 29) = vadd_f32(vmul_n_f32(*(float32x2_t *)(a1 + 58), v9), vmul_n_f32(*(float32x2_t *)(a2 + 58), v10));
  *((float *)a1 + 60) = v23;
  float v24 = v9 * *((float *)a1 + 57);
  float v25 = *((float *)a2 + 57);
  *(float32x2_t *)(a1 + 55) = vadd_f32(vmul_n_f32(*(float32x2_t *)(a1 + 55), v9), vmul_n_f32(*(float32x2_t *)(a2 + 55), v10));
  *((float *)a1 + 57) = v24 + (float)(v10 * v25);
  uint64_t v26 = a1[35];
  memset(v77, 0, 124);
  uint64_t v27 = a1 + 4;
  if (v26)
  {
    uint64_t v28 = (float *)v77;
    unint64_t v29 = (float *)(a1 + 4);
    uint64_t v30 = v26;
    do
    {
      float v31 = *v29++;
      *v28++ = v31 * v31;
      --v30;
    }
    while (v30);
    long long v83 = 0u;
    memset(v84, 0, 28);
    long long v81 = 0u;
    long long v82 = 0u;
    long long v79 = 0u;
    long long v80 = 0u;
    long long v32 = (float *)&v78;
    long long v33 = (float *)v77;
    uint64_t v34 = v26;
    long long v78 = 0u;
    do
    {
      float v35 = *v33++;
      *v32++ = v9 * v35;
      --v34;
    }
    while (v34);
  }
  else
  {
    memset(v84, 0, sizeof(v84));
    long long v82 = 0uLL;
    long long v83 = 0uLL;
    long long v80 = 0uLL;
    long long v81 = 0uLL;
    long long v78 = 0uLL;
    long long v79 = 0uLL;
  }
  uint64_t v36 = a2[35];
  memset(v69, 0, 124);
  if (v36)
  {
    uint64_t v37 = (float *)(a2 + 4);
    uint64_t v38 = (float *)v69;
    uint64_t v39 = v36;
    do
    {
      float v40 = *v37++;
      *v38++ = v40 * v40;
      --v39;
    }
    while (v39);
    long long v75 = 0u;
    memset(v76, 0, 28);
    long long v73 = 0u;
    long long v74 = 0u;
    long long v71 = 0u;
    long long v72 = 0u;
    long long v41 = (float *)&v70;
    long long v42 = (float *)v69;
    long long v70 = 0u;
    do
    {
      float v43 = *v42++;
      *v41++ = v10 * v43;
      --v36;
    }
    while (v36);
  }
  else
  {
    memset(v76, 0, sizeof(v76));
    long long v74 = 0uLL;
    long long v75 = 0uLL;
    long long v72 = 0uLL;
    long long v73 = 0uLL;
    long long v70 = 0uLL;
    long long v71 = 0uLL;
  }
  memset(v85, 0, 124);
  if (v26)
  {
    long long v44 = (float *)v85;
    uint64_t v45 = (float *)&v70;
    uint64_t v46 = (float *)&v78;
    uint64_t v47 = v26;
    do
    {
      float v48 = *v46++;
      float v49 = v48;
      float v50 = *v45++;
      *v44++ = v49 + v50;
      --v47;
    }
    while (v47);
    long long v91 = 0u;
    memset(v92, 0, 28);
    long long v89 = 0u;
    long long v90 = 0u;
    long long v87 = 0u;
    long long v88 = 0u;
    long long v86 = 0u;
    char v51 = (float *)&v86;
    uint64_t v52 = (float *)v85;
    HIDWORD(v92[1]) = v26;
    do
    {
      float v53 = *v52++;
      *v51++ = sqrtf(v53);
      --v26;
    }
    while (v26);
  }
  else
  {
    memset(v92, 0, sizeof(v92));
    long long v90 = 0uLL;
    long long v91 = 0uLL;
    long long v88 = 0uLL;
    long long v89 = 0uLL;
    long long v86 = 0uLL;
    long long v87 = 0uLL;
  }
  long long v54 = v91;
  *((_OWORD *)a1 + 5) = v90;
  *((_OWORD *)a1 + 6) = v54;
  long long v55 = v92[1];
  *((_OWORD *)a1 + 7) = v92[0];
  *((_OWORD *)a1 + 8) = v55;
  long long v56 = v87;
  _OWORD *v27 = v86;
  *((_OWORD *)a1 + 2) = v56;
  long long v57 = v89;
  *((_OWORD *)a1 + 3) = v88;
  *((_OWORD *)a1 + 4) = v57;
  if ((int)v12 >= 1)
  {
    float v58 = (float *)(a1 + 42);
    float v59 = (float *)(a2 + 42);
    do
    {
      float v60 = (float)(v9 * *(v58 - 3)) + (float)(v10 * *(v59 - 3));
      int32x2_t v61 = (int32x2_t)vadd_f32(vmul_n_f32(*(float32x2_t *)(v58 - 5), v9), vmul_n_f32(*(float32x2_t *)(v59 - 5), v10));
      *(int32x2_t *)(v58 - 5) = v61;
      *(v58 - 3) = v60;
      float v62 = (float)(v9 * *v58) + (float)(v10 * *v59);
      float32x2_t v63 = vadd_f32(vmul_n_f32(*(float32x2_t *)(v58 - 2), v9), vmul_n_f32(*(float32x2_t *)(v59 - 2), v10));
      *(float *)v61.i32 = sqrtf(vaddv_f32(vmul_f32(v63, v63)) + (float)(v62 * v62));
      *((float32x2_t *)v58 - 1) = vdiv_f32(v63, (float32x2_t)vdup_lane_s32(v61, 0));
      float *v58 = v62 / *(float *)v61.i32;
      v58 += 6;
      v59 += 6;
      --v12;
    }
    while (v12);
  }
  if (v9 <= v10) {
    char v64 = a2;
  }
  else {
    char v64 = a1;
  }
  *((void *)a1 + 32) = *((void *)v64 + 32);
  uint64_t v65 = a1[35];
  if (v65)
  {
    float v66 = 0.0;
    do
    {
      float v67 = *(float *)v27;
      uint64_t v27 = (_OWORD *)((char *)v27 + 4);
      float v66 = v66 + (float)(v67 * v67);
      --v65;
    }
    while (v65);
  }
  else
  {
    float v66 = 0.0;
  }
  float result = v22 * (float)(v66 / COERCE_FLOAT(vmul_f32(v19, v19).i32[1]));
  *((float *)a1 + 70) = result;
  return result;
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C328] + 104;
  *(void *)(a1 + 128) = MEMORY[0x263F8C328] + 104;
  uint64_t v3 = a1 + 16;
  uint64_t v4 = MEMORY[0x263F8C328] + 64;
  *(void *)(a1 + 16) = MEMORY[0x263F8C328] + 64;
  __float2 v5 = (void *)MEMORY[0x263F8C2B8];
  uint64_t v6 = *(void *)(MEMORY[0x263F8C2B8] + 24);
  uint64_t v7 = *(void *)(MEMORY[0x263F8C2B8] + 16);
  *(void *)a1 = v7;
  *(void *)(a1 + *(void *)(v7 - 24)) = v6;
  *(void *)(a1 + 8) = 0;
  float v8 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  uint64_t v9 = MEMORY[0x263F8C328] + 24;
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  uint64_t v10 = v5[5];
  uint64_t v11 = v5[4];
  *(void *)(a1 + 16) = v11;
  *(void *)(v3 + *(void *)(v11 - 24)) = v10;
  uint64_t v12 = v5[1];
  *(void *)a1 = v12;
  *(void *)(a1 + *(void *)(v12 - 24)) = v5[6];
  *(void *)a1 = v9;
  *(void *)(a1 + 128) = v2;
  *(void *)(a1 + 16) = v4;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 24) = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_221E80170(_Unwind_Exception *a1)
{
  std::iostream::~basic_iostream();
  MEMORY[0x223C937D0](v1);
  _Unwind_Resume(a1);
}

uint64_t Phase::SpatialModeler::AudibleEarlyReflection::sPlaneHashWithBucketNormal(Phase::SpatialModeler::AudibleEarlyReflection *a1, float *a2)
{
  uint64_t v3 = (float *)a1;
  {
    if (a1)
    {
      *(float *)&Phase::SpatialModeler::AudibleEarlyReflection::sPlaneHashWithBucketNormal(Phase::Vector<float,3ul> const&,Phase::Vector<float,3ul> const&)::invOrientationTolerance = 1.0 / Phase::SpatialModeler::AudibleEarlyReflection::sAerPlaneHashingToleranceFactorOrientationInternal(a1);
    }
  }
  float v4 = Phase::SpatialModeler::AudibleEarlyReflection::sAerPlaneHashingToleranceFactorOrientationInternal(a1);
  float v5 = v4 * *v3;
  float v6 = v4 * v3[1];
  float v7 = v4 * v3[2];
  float v8 = roundf(v5)
     * *(float *)&Phase::SpatialModeler::AudibleEarlyReflection::sPlaneHashWithBucketNormal(Phase::Vector<float,3ul> const&,Phase::Vector<float,3ul> const&)::invOrientationTolerance;
  float v9 = roundf(v6)
     * *(float *)&Phase::SpatialModeler::AudibleEarlyReflection::sPlaneHashWithBucketNormal(Phase::Vector<float,3ul> const&,Phase::Vector<float,3ul> const&)::invOrientationTolerance;
  float v10 = *(float *)&Phase::SpatialModeler::AudibleEarlyReflection::sPlaneHashWithBucketNormal(Phase::Vector<float,3ul> const&,Phase::Vector<float,3ul> const&)::invOrientationTolerance
      * roundf(v7);
  float v11 = sqrtf((float)((float)(v8 * v8) + (float)(v9 * v9)) + (float)(v10 * v10));
  signed int v12 = llroundf(v6);
  signed int v13 = llroundf(v7);
  uint64_t v14 = 269431639 * (int)llroundf(v5);
  float v15 = (float)((float)(a2[2] * (float)(v10 / v11))
              + (float)((float)(*a2 * (float)(v8 / v11)) + (float)(a2[1] * (float)(v9 / v11))))
      * 1.9117;
  float v16 = 0.5;
  if (v15 < 0.0) {
    float v16 = -0.5;
  }
  return v14 + 93309929 * v12 + 775157 * v13 + 74831 * (int)(float)(v15 + v16);
}

void *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(void *a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x223C934D0](v13, a1);
  if (v13[0])
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      float v10 = std::locale::use_facet(&v14, MEMORY[0x263F8C108]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x223C934E0](v13);
  return a1;
}

void sub_221E80418(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  MEMORY[0x223C934E0](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x221E803F8);
}

void sub_221E8046C(_Unwind_Exception *a1)
{
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      int64_t v12 = 0;
    }
    else {
      int64_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if (v12 >= 1)
    {
      std::string::basic_string[abi:ne180100](__p, v12, __c);
      signed int v13 = v18 >= 0 ? __p : (void **)__p[0];
      uint64_t v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(void *)v6 + 96))(v6, v13, v12);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v14 != v12) {
        return 0;
      }
    }
    uint64_t v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v15) == v15) {
      *(void *)(a5 + 24) = 0;
    }
    else {
      return 0;
    }
  }
  return v6;
}

void sub_221E805EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::string::basic_string[abi:ne180100](void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((unsigned char *)__b + 23) = __len;
    uint64_t v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memset(v6, __c, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __b;
}

BOOL Phase::Controller::SystemAudioIO::IsValidFormat(Phase::Controller::SystemAudioIO *this, AVAudioFormat *a2)
{
  uint64_t v2 = this;
  uint64_t v3 = v2;
  BOOL v5 = v2
    && ([(Phase::Controller::SystemAudioIO *)v2 sampleRate], v4 > 0.0)
    && [(Phase::Controller::SystemAudioIO *)v3 channelCount] != 0;

  return v5;
}

void sub_221E8070C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id Phase::Controller::SystemAudioIO::GetOutputChannelLayout(Phase::Controller::SystemAudioIO *this, AVAudioFormat *a2)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t v2 = this;
  uint64_t v3 = v2;
  if (!v2)
  {
    signed int v13 = **(id **)(Phase::Logger::GetInstance(0) + 528);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "AudioIOBase.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 28;
      uint64_t v14 = "%25s:%-5d Undefined audio output format (AVAudioFormat* is nil).";
LABEL_26:
      _os_log_impl(&dword_221E5E000, v13, OS_LOG_TYPE_ERROR, v14, buf, 0x12u);
    }
LABEL_27:
    BOOL v5 = 0;
    goto LABEL_43;
  }
  double v4 = [(Phase::Controller::SystemAudioIO *)v2 channelLayout];
  BOOL v5 = v4;
  if (v4)
  {
    uint64_t v6 = (_DWORD *)[v4 layout];
    unsigned int v7 = v6[2];
    if (v7 <= 1) {
      unsigned int v7 = 1;
    }
    std::vector<char>::vector(&__dst, 20 * v7 + 12);
    memcpy(__dst.__begin_, v6, 20 * v6[2] + 12);
    Phase::ChannelLayout::GetChannelLayoutChannelDescriptions(&__dst, (uint64_t *)buf);
    if (__dst.__begin_)
    {
      __dst.__end_ = __dst.__begin_;
      operator delete(__dst.__begin_);
    }
    size_t v8 = *(void **)buf;
    unint64_t v9 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 2);
    if (v9 > 0x40) {
      std::terminate();
    }
    if (*(void *)&buf[8] != *(void *)buf)
    {
      if (v9 <= 1) {
        unint64_t v10 = 1;
      }
      else {
        unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 2);
      }
      uint64_t v11 = *(int **)buf;
      while (1)
      {
        int v12 = *v11;
        v11 += 5;
        if (v12 != -1) {
          goto LABEL_42;
        }
        if (!--v10) {
          goto LABEL_19;
        }
      }
    }
    if (*(void *)&buf[8])
    {
LABEL_19:
      *(void *)&buf[8] = *(void *)buf;
      operator delete(*(void **)buf);
    }
  }

  uint64_t v15 = (Phase::Logger *)[(Phase::Controller::SystemAudioIO *)v3 channelCount];
  switch(v15)
  {
    case 0:
      signed int v13 = **(id **)(Phase::Logger::GetInstance(v15) + 528);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "AudioIOBase.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 56;
        uint64_t v14 = "%25s:%-5d 0 output channels.";
        goto LABEL_26;
      }
      goto LABEL_27;
    case 1:
      uint64_t v16 = 6553601;
      goto LABEL_29;
    case 2:
      uint64_t v16 = 6619138;
LABEL_29:
      BOOL v5 = [MEMORY[0x263EF9328] layoutWithLayoutTag:v16];
      goto LABEL_43;
  }
  float v17 = **(id **)(Phase::Logger::GetInstance(v15) + 528);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = "AudioIOBase.mm";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 61;
    _os_log_impl(&dword_221E5E000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d Undefined output channel layout for channel count > 2. Using stereo as a fallback.", buf, 0x12u);
  }
  unint64_t v18 = [(Phase::Controller::SystemAudioIO *)v3 channelCount];
  memset(buf, 0, sizeof(buf));
  float32x2_t v19 = std::__allocate_at_least[abi:ne180100]<std::allocator<AudioChannelDescription>>((uint64_t)&buf[16], v18);
  *(void *)buf = v19;
  *(void *)&uint8_t buf[16] = (char *)v19 + 20 * v20;
  float32x2_t v21 = (char *)v19 + 20 * v18;
  uint64_t v22 = 20 * v18;
  do
  {
    void *v19 = 0;
    v19[1] = 0;
    *((_DWORD *)v19 + 4) = 0;
    float32x2_t v19 = (void *)((char *)v19 + 20);
    v22 -= 20;
  }
  while (v22);
  *(void *)&buf[8] = v21;
  uint64_t v23 = *(void *)buf;
  **(_DWORD **)buf = 1;
  *(_DWORD *)(v23 + 20) = 2;
  unsigned int v24 = [(Phase::Controller::SystemAudioIO *)v3 channelCount];
  unsigned int v25 = v24;
  uint64_t v26 = *(const void **)buf;
  if (v24 <= 1) {
    unsigned int v27 = 1;
  }
  else {
    unsigned int v27 = v24;
  }
  std::vector<char>::value_type __x = 0;
  std::vector<char>::vector(&__dst, 20 * v27 + 12, &__x);
  std::vector<char>::pointer begin = __dst.__begin_;
  *(void *)__dst.__begin_ = 0;
  *((_DWORD *)begin + 2) = v25;
  if (v25) {
    memmove(begin + 12, v26, 20 * v25);
  }
  BOOL v5 = [MEMORY[0x263EF9328] layoutWithLayout:begin];
  if (__dst.__begin_)
  {
    __dst.__end_ = __dst.__begin_;
    operator delete(__dst.__begin_);
  }
  size_t v8 = *(void **)buf;
  if (*(void *)buf)
  {
LABEL_42:
    *(void *)&buf[8] = v8;
    operator delete(v8);
  }
LABEL_43:

  return v5;
}

void sub_221E80AF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }

  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::SystemAudioIO::GetRenderedChannels(Phase::Controller::SystemAudioIO *this, AVAudioChannelLayout *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v2 = this;
  uint64_t v3 = v2;
  if (!v2) {
    goto LABEL_25;
  }
  uint64_t v2 = (Phase::Controller::SystemAudioIO *)[(Phase::Controller::SystemAudioIO *)v2 layout];
  if (!v2) {
    goto LABEL_25;
  }
  double v4 = (_DWORD *)[(Phase::Controller::SystemAudioIO *)v3 layout];
  unsigned int v5 = v4[2];
  if (v5 <= 1) {
    unsigned int v5 = 1;
  }
  std::vector<char>::vector(&v20, 20 * v5 + 12);
  memcpy(v20.__begin_, v4, 20 * v4[2] + 12);
  Phase::ChannelLayout::GetChannelLayoutChannelDescriptions(&v20, (uint64_t *)__p);
  if (v20.__begin_)
  {
    v20.__end_ = v20.__begin_;
    operator delete(v20.__begin_);
  }
  uint64_t v6 = *(int **)__p;
  unint64_t v7 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)&__p[8] - *(void *)__p) >> 2);
  if (v7 > 0x40) {
    std::terminate();
  }
  if (*(void *)&__p[8] == *(void *)__p)
  {
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    if (v7 <= 1) {
      unint64_t v7 = 1;
    }
    do
    {
      int v10 = *v6;
      v6 += 5;
      if ((v10 + 1) >= 2) {
        v9 |= 1 << v8;
      }
      ++v8;
    }
    while (v7 != v8);
  }
  uint64_t v11 = (_DWORD *)[(Phase::Controller::SystemAudioIO *)v3 layout];
  unsigned int v12 = v11[2];
  if (v12 <= 1) {
    unsigned int v12 = 1;
  }
  std::vector<char>::vector(&v20, 20 * v12 + 12);
  memcpy(v20.__begin_, v11, 20 * v11[2] + 12);
  uint64_t NumActiveChannels = (int)Phase::ChannelLayout::GetNumActiveChannels((int **)&v20, v9);
  uint64_t v2 = *(Phase::Controller::SystemAudioIO **)__p;
  unint64_t v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)&__p[8] - *(void *)__p) >> 2);
  if (v20.__begin_)
  {
    v20.__end_ = v20.__begin_;
    operator delete(v20.__begin_);
    uint64_t v2 = *(Phase::Controller::SystemAudioIO **)__p;
  }
  if (v14 == NumActiveChannels) {
    uint64_t v9 = -1;
  }
  if (v2)
  {
    *(void *)&__p[8] = v2;
    operator delete(v2);
  }
  if (!v9)
  {
LABEL_25:
    uint64_t v15 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v2)
                                                                                        + 528)));
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = (Phase::ChannelLayout *)[(Phase::Controller::SystemAudioIO *)v3 layout];
      Phase::ChannelLayout::GetStringDescription(v16, v17);
      if (SHIBYTE(v20.__end_cap_.__value_) >= 0) {
        std::vector<char>::pointer begin = &v20;
      }
      else {
        std::vector<char>::pointer begin = v20.__begin_;
      }
      *(_DWORD *)std::string __p = 136315650;
      *(void *)&__p[4] = "AudioIOBase.mm";
      *(_WORD *)&__p[12] = 1024;
      *(_DWORD *)&__p[14] = 104;
      __int16 v22 = 2080;
      uint64_t v23 = begin;
      _os_log_impl(&dword_221E5E000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d System output layout does not contain any valid channel description.\n%s", __p, 0x1Cu);
      if (SHIBYTE(v20.__end_cap_.__value_) < 0) {
        operator delete(v20.__begin_);
      }
    }

    uint64_t v9 = 0;
  }

  return v9;
}

void sub_221E80E1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t std::array<Phase::Controller::SystemAudioIO::AudioIOBase::IOConfiguration,2ul>::array(uint64_t a1)
{
  char v2 = 0;
  uint64_t v3 = 0;
  do
  {
    uint64_t v4 = a1 + 88 * v3;
    *(unsigned char *)uint64_t v4 = 0;
    *(_OWORD *)(v4 + 4) = 0u;
    char v5 = v2;
    *(_OWORD *)(v4 + 20) = 0u;
    *(_OWORD *)(v4 + 36) = 0u;
    *(_OWORD *)(v4 + 52) = 0u;
    *(_DWORD *)(v4 + 68) = 0;
    caulk::pooled_semaphore_mutex::pooled_semaphore_mutex((caulk::pooled_semaphore_mutex *)(v4 + 72));
    *(void *)(a1 + 88 * v3 + 80) = 0;
    char v2 = 1;
    uint64_t v3 = 1;
  }
  while ((v5 & 1) == 0);
  return a1;
}

void sub_221E80EFC(_Unwind_Exception *a1)
{
  char v4 = v2;
  uint64_t v6 = v1 + 88 * v3;
  std::unique_ptr<Phase::Controller::SpeechDetector>::reset[abi:ne180100]((Phase::Controller::SpeechDetector::SpeechDetectorImpl ***)(v6 + 64), 0);

  if ((v4 & 1) == 0)
  {
    uint64_t v7 = 88 * v3;
    do
    {
      uint64_t v8 = v1 + v7;
      uint64_t v9 = *(void *)(v1 + v7 - 8);
      *(void *)(v1 + v7 - 8) = 0;
      if (v9) {
        (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
      }
      std::unique_ptr<Phase::Controller::SpeechDetector>::reset[abi:ne180100]((Phase::Controller::SpeechDetector::SpeechDetectorImpl ***)(v8 - 24), 0);

      v7 -= 88;
    }
    while (v7);
  }
  _Unwind_Resume(a1);
}

Phase::Controller::SpeechDetector::SpeechDetectorImpl ***std::unique_ptr<Phase::Controller::SpeechDetector>::reset[abi:ne180100](Phase::Controller::SpeechDetector::SpeechDetectorImpl ***result, Phase::Controller::SpeechDetector::SpeechDetectorImpl **a2)
{
  char v2 = *result;
  void *result = a2;
  if (v2)
  {
    std::unique_ptr<Phase::Controller::SpeechDetector::SpeechDetectorImpl>::reset[abi:ne180100](v2, 0);
    std::unique_ptr<Phase::Controller::SpeechDetector::SpeechDetectorImpl>::reset[abi:ne180100](v2, 0);
    JUMPOUT(0x223C938A0);
  }
  return result;
}

void Phase::Controller::SystemAudioIO::AudioIOBase::GetRenderedChannelLayout(Phase::Controller::SystemAudioIO::AudioIOBase *this@<X0>, std::vector<char> *a2@<X8>)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  char v4 = (*(void (**)(Phase::Controller::SystemAudioIO::AudioIOBase *))(*(void *)this + 88))(this);
  __x[0] = 0;
  char v5 = std::vector<char>::vector(&v28, 0x20uLL, __x);
  std::vector<char>::pointer begin = v28.__begin_;
  *(void *)v28.__begin_ = 6619138;
  *((_DWORD *)begin + 2) = 0;
  if (!v4 || (char v5 = (std::vector<char> *)[v4 layout]) == 0)
  {
    uint64_t v15 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)v5) + 528);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::vector<char>::value_type __x = 136315394;
      *(void *)&__x[4] = "AudioIOBase.mm";
      *(_WORD *)&__x[12] = 1024;
      *(_DWORD *)&__x[14] = 163;
      _os_log_impl(&dword_221E5E000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d Undefined hardware output channel layout, falling back to stereo.", __x, 0x12u);
    }
    goto LABEL_20;
  }
  uint64_t v7 = (Phase::ChannelLayout *)[v4 layout];
  uint64_t v9 = Phase::ChannelLayout::IsLayoutSupported(v7, v8);
  if ((v9 & 1) == 0)
  {
    uint64_t v16 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance((Phase::Logger *)v9)
                                                                                        + 528)));
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      float v17 = (Phase::ChannelLayout *)[v4 layout];
      Phase::ChannelLayout::GetStringDescription(v17, v18);
      float32x2_t v19 = v27 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)std::vector<char>::value_type __x = 136315650;
      *(void *)&__x[4] = "AudioIOBase.mm";
      *(_WORD *)&__x[12] = 1024;
      *(_DWORD *)&__x[14] = 168;
      __int16 v30 = 2080;
      float v31 = (Phase::Controller::SystemAudioIO::AudioIOBase *)v19;
      _os_log_impl(&dword_221E5E000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d Unsupported hardware output channel layout, falling back to stereo.\n%s", __x, 0x1Cu);
      if (v27 < 0) {
        operator delete(__p);
      }
    }

    goto LABEL_20;
  }
  int v10 = (_DWORD *)[v4 layout];
  unsigned int v11 = v10[2];
  if (v11 <= 1) {
    unsigned int v11 = 1;
  }
  std::vector<char>::vector((std::vector<char> *)__x, 20 * v11 + 12);
  memcpy(*(void **)__x, v10, 20 * v10[2] + 12);
  unint64_t RenderedChannels = Phase::Controller::SystemAudioIO::GetRenderedChannels((Phase::Controller::SystemAudioIO *)v4, v12);
  Phase::ChannelLayout::ReduceLayout((const void **)__x, RenderedChannels, a2);
  if (*(void *)__x)
  {
    *(void *)&__x[8] = *(void *)__x;
    operator delete(*(void **)__x);
  }
  if (!Phase::ChannelLayout::IsLayoutSupported((unsigned int **)a2))
  {
    unint64_t v14 = a2->__begin_;
    if (a2->__begin_)
    {
      a2->__end_ = v14;
      operator delete(v14);
    }
LABEL_20:
    std::vector<char> v20 = (Phase::Logger *)(*(uint64_t (**)(Phase::Controller::SystemAudioIO::AudioIOBase *))(*(void *)this + 80))(this);
    if (v20 == 1)
    {
      uint64_t v24 = **(id **)(Phase::Logger::GetInstance(v20) + 384);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::vector<char>::value_type __x = 136315650;
        *(void *)&__x[4] = "AudioIOBase.mm";
        *(_WORD *)&__x[12] = 1024;
        *(_DWORD *)&__x[14] = 201;
        __int16 v30 = 2048;
        float v31 = this;
        _os_log_impl(&dword_221E5E000, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d impl@%p: Output layout not supported.\n                                    Falling back to mono.\n                                    Make sure that a valid speaker layout is set for the device in Audio and MIDI settings.", __x, 0x1Cu);
      }
      __x[0] = 0;
      std::vector<char>::vector(a2, 0x20uLL, __x);
      __int16 v22 = a2->__begin_;
      int v23 = 6553601;
    }
    else if (v20)
    {
      unsigned int v25 = **(id **)(Phase::Logger::GetInstance(v20) + 384);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::vector<char>::value_type __x = 136315650;
        *(void *)&__x[4] = "AudioIOBase.mm";
        *(_WORD *)&__x[12] = 1024;
        *(_DWORD *)&__x[14] = 212;
        __int16 v30 = 2048;
        float v31 = this;
        _os_log_impl(&dword_221E5E000, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d impl@%p: Output layout not supported.\n                                    Falling back to stereo over the first 2 output channels.\n                                    Make sure that a valid speaker layout is set for the device in Audio and MIDI settings.", __x, 0x1Cu);
      }
      __x[0] = 0;
      std::vector<char>::vector(a2, 0x20uLL, __x);
      __int16 v22 = a2->__begin_;
      int v23 = 6619138;
    }
    else
    {
      float32x2_t v21 = **(id **)(Phase::Logger::GetInstance(v20) + 384);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::vector<char>::value_type __x = 136315650;
        *(void *)&__x[4] = "AudioIOBase.mm";
        *(_WORD *)&__x[12] = 1024;
        *(_DWORD *)&__x[14] = 190;
        __int16 v30 = 2048;
        float v31 = this;
        _os_log_impl(&dword_221E5E000, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d impl@%p: Output layout not supported, with 0 output channels.", __x, 0x1Cu);
      }
      __x[0] = 0;
      std::vector<char>::vector(a2, 0x20uLL, __x);
      __int16 v22 = a2->__begin_;
      int v23 = -65536;
    }
    *__int16 v22 = v23;
    v22[1] = 0;
    v22[2] = 0;
  }
  if (v28.__begin_)
  {
    v28.__end_ = v28.__begin_;
    operator delete(v28.__begin_);
  }
}

void sub_221E814B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void Phase::Controller::SystemAudioIO::AudioIOBase::BeginRouteChange(Phase::Controller::SystemAudioIO::AudioIOBase *this)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t Instance = Phase::Logger::GetInstance(this);
  uint64_t v3 = (Phase::Logger *)os_signpost_id_generate(**(os_log_t **)(Instance + 528));
  char v4 = (Phase::Logger *)Phase::Logger::GetInstance(v3);
  if (*((unsigned char *)v4 + 536))
  {
    char v5 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v4)
                                                                                       + 528)));
    uint64_t v6 = v5;
    if ((unint64_t)v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v5))
    {
      LOWORD(v15) = 0;
      _os_signpost_emit_with_name_impl(&dword_221E5E000, v6, OS_SIGNPOST_INTERVAL_BEGIN, (os_signpost_id_t)v3, "Phase_BeginRouteChange", "Begin route change", (uint8_t *)&v15, 2u);
    }
  }
  uint64_t v7 = (Phase::Logger *)(*(uint64_t (**)(Phase::Controller::SystemAudioIO::AudioIOBase *))(*(void *)this + 64))(this);
  int v8 = *((_DWORD *)this + 82);
  if (v7)
  {
    if (v8)
    {
      signed int v13 = **(id **)(Phase::Logger::GetInstance(v7) + 528);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        int v15 = 136315394;
        uint64_t v16 = "AudioIOBase.mm";
        __int16 v17 = 1024;
        int v18 = 232;
        _os_log_impl(&dword_221E5E000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: mRouteChangeResumeSemaphore == 0U is false.", (uint8_t *)&v15, 0x12u);
      }
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "PRECONDITION: mRouteChangeResumeSemaphore == 0U is false.");
    }
    *((_DWORD *)this + 82) = 1;
    *((void *)this + 16) = *((void *)this + 14);
    *((unsigned char *)this + 136) = *((unsigned char *)this + 120);
    (*(void (**)(Phase::Controller::SystemAudioIO::AudioIOBase *))(*(void *)this + 56))(this);
  }
  else if (v8)
  {
    *((_DWORD *)this + 82) = v8 + 1;
  }
  (*(void (**)(Phase::Controller::SystemAudioIO::AudioIOBase *))(*(void *)this + 32))(this);
  uint64_t v9 = (Phase::Logger *)(*(uint64_t (**)(Phase::Controller::SystemAudioIO::AudioIOBase *))(*(void *)this + 24))(this);
  int v10 = (Phase::Logger *)Phase::Logger::GetInstance(v9);
  if (*((unsigned char *)v10 + 536))
  {
    unsigned int v11 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v10)
                                                                                        + 528)));
    unsigned int v12 = v11;
    if ((unint64_t)v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v11))
    {
      LOWORD(v15) = 0;
      _os_signpost_emit_with_name_impl(&dword_221E5E000, v12, OS_SIGNPOST_INTERVAL_END, (os_signpost_id_t)v3, "Phase_BeginRouteChange", "Begin route change done", (uint8_t *)&v15, 2u);
    }
  }
}

void sub_221E817FC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Phase::Controller::SystemAudioIO::AudioIOBase::EndRouteChange(atomic_uint *this)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  uint64_t Instance = Phase::Logger::GetInstance((Phase::Logger *)this);
  uint64_t v3 = (Phase::Logger *)os_signpost_id_generate(**(os_log_t **)(Instance + 528));
  char v4 = (Phase::Logger *)Phase::Logger::GetInstance(v3);
  if (*((unsigned char *)v4 + 536))
  {
    char v5 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v4)
                                                                                       + 528)));
    uint64_t v6 = v5;
    if ((unint64_t)v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v5))
    {
      LOWORD(v31) = 0;
      _os_signpost_emit_with_name_impl(&dword_221E5E000, v6, OS_SIGNPOST_INTERVAL_BEGIN, (os_signpost_id_t)v3, "Phase_EndRouteChange", "End route change", (uint8_t *)&v31, 2u);
    }
  }
  atomic_uint v7 = this[82];
  if (v7 == 1)
  {
    if (*((unsigned char *)this + 136))
    {
      uint64_t v8 = mach_absolute_time();
      double v9 = (double)(uint64_t)(v8 - *((void *)this + 16)) * 0.0000000416666667;
      unsigned int v10 = (v9 * (*(double (**)(atomic_uint *))(*(void *)this + 104))(this));
      unsigned int v11 = (Phase::Logger *)(*(uint64_t (**)(atomic_uint *))(*(void *)this + 120))(this);
      unsigned int v12 = vcvtpd_u64_f64(256.0 / (double)v11);
      unsigned int v13 = vcvtad_u64_f64((double)v10 / (double)v11);
      if (v10 <= 0x100) {
        unsigned int v14 = 256;
      }
      else {
        unsigned int v14 = v10;
      }
      if (v12 <= v13) {
        unsigned int v12 = v13;
      }
      unsigned int v15 = v12 * v11;
      if (v11) {
        uint64_t v16 = v15;
      }
      else {
        uint64_t v16 = v14;
      }
      uint64_t v17 = Phase::Logger::GetInstance(v11);
      int v18 = (Phase::Logger *)os_signpost_id_generate(**(os_log_t **)(v17 + 528));
      uint64_t v19 = (Phase::Logger *)Phase::Logger::GetInstance(v18);
      if (*((unsigned char *)v19 + 536))
      {
        std::vector<char> v20 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v19)
                                                                                            + 528)));
        float32x2_t v21 = v20;
        if ((unint64_t)v18 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v20))
        {
          int v31 = 67109120;
          LODWORD(v32) = v16;
          _os_signpost_emit_with_name_impl(&dword_221E5E000, v21, OS_SIGNPOST_INTERVAL_BEGIN, (os_signpost_id_t)v18, "Phase_FlushFrames", "End route change: start flush %i frames", (uint8_t *)&v31, 8u);
        }
      }
      if (v16)
      {
        uint64_t v22 = v16;
        do
        {
          Phase::Controller::DVM_RT::RtUpdate(*(Phase::Controller::DVM_RT **)(**(void **)(**((void **)this + 1)
                                                                                          + 696)
                                                                            + 75096));
          --v22;
        }
        while (v22);
      }
      int v23 = (Phase::Logger *)Phase::Logger::GetInstance(v19);
      if (*((unsigned char *)v23 + 536))
      {
        uint64_t v24 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v23)
                                                                                            + 528)));
        unsigned int v25 = v24;
        if ((unint64_t)v18 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v24))
        {
          LOWORD(v31) = 0;
          _os_signpost_emit_with_name_impl(&dword_221E5E000, v25, OS_SIGNPOST_INTERVAL_END, (os_signpost_id_t)v18, "Phase_EndRouteChange", "End route change: end flush frames", (uint8_t *)&v31, 2u);
        }
      }
      uint64_t v26 = **(id **)(Phase::Logger::GetInstance(v23) + 528);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        int v31 = 136315650;
        uint64_t v32 = "AudioIOBase.mm";
        __int16 v33 = 1024;
        int v34 = 336;
        __int16 v35 = 1024;
        int v36 = v16;
        _os_log_impl(&dword_221E5E000, v26, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Flushed %i audio frames.", (uint8_t *)&v31, 0x18u);
      }
      *((void *)this + 16) = v8;
      *((unsigned char *)this + 136) = 1;
    }
    char v4 = (Phase::Logger *)(*(uint64_t (**)(atomic_uint *))(*(void *)this + 40))(this);
    atomic_uint v7 = this[82];
  }
  if (v7) {
    this[82] = v7 - 1;
  }
  if (atomic_load((unsigned int *)this + 36)) {
    atomic_fetch_add(this + 36, 0xFFFFFFFF);
  }
  std::vector<char> v28 = (Phase::Logger *)Phase::Logger::GetInstance(v4);
  if (*((unsigned char *)v28 + 536))
  {
    unint64_t v29 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v28)
                                                                                        + 528)));
    __int16 v30 = v29;
    if ((unint64_t)v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v29))
    {
      LOWORD(v31) = 0;
      _os_signpost_emit_with_name_impl(&dword_221E5E000, v30, OS_SIGNPOST_INTERVAL_END, (os_signpost_id_t)v3, "Phase_EndRouteChange", "End route change done", (uint8_t *)&v31, 2u);
    }
  }
}

void Phase::Controller::SystemAudioIO::AudioIOBase::StartStopInternalCaptures(Phase::Controller::SystemAudioIO::AudioIOBase *this, char a2)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  uint64_t Instance = Phase::Logger::GetInstance(this);
  uint64_t v5 = 0;
  unsigned int v6 = *(_DWORD *)(Instance + 1532);
  atomic_uint v7 = (char *)this + 152;
  char v8 = a2 ^ 1;
  char v9 = 1;
  unsigned int v10 = "audioio-out";
  do
  {
    char v11 = v9;
    if ((v6 >> v5)) {
      char v12 = v8;
    }
    else {
      char v12 = 1;
    }
    if ((v12 & 1) != 0 || !v7[88 * v5]) {
      goto LABEL_22;
    }
    unsigned int v13 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance((Phase::Logger *)Instance)
                                                                                        + 528)));
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      id v14 = [*(id *)&v7[88 * v5 + 16] description];
      uint64_t v15 = [v14 cStringUsingEncoding:4];
      *(_DWORD *)buf = 136316162;
      *(void *)&uint8_t buf[4] = "AudioIOBase.mm";
      __int16 v36 = 1024;
      int v37 = 351;
      __int16 v38 = 2048;
      *(void *)uint64_t v39 = this;
      *(_WORD *)&v39[8] = 1024;
      *(_DWORD *)&v39[10] = v5;
      __int16 v40 = 2080;
      uint64_t v41 = v15;
      _os_log_impl(&dword_221E5E000, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d audioio@%p: element[%d] format = %s", buf, 0x2Cu);
    }
    uint64_t v17 = &v7[88 * v5];
    double v19 = *((double *)v17 + 3);
    int v18 = v17 + 24;
    double v20 = v19;
    if (!*((_DWORD *)v18 + 7) || v20 <= 0.0)
    {
      int v31 = **(id **)(Phase::Logger::GetInstance(v16) + 528);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        int v32 = *(_DWORD *)&v7[88 * v5 + 4];
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "AudioIOBase.mm";
        __int16 v36 = 1024;
        int v37 = 369;
        __int16 v38 = 1024;
        *(_DWORD *)uint64_t v39 = v32;
        _os_log_impl(&dword_221E5E000, v31, OS_LOG_TYPE_DEFAULT, "%25s:%-5d audioio[%d]: ERROR: invalid capture format!", buf, 0x18u);
      }
LABEL_22:
      uint64_t Instance = (uint64_t)Phase::Controller::SystemAudioIO::AudioIOBase::IOConfiguration::StopCaptures(&v7[88 * v5]);
      goto LABEL_23;
    }
    Phase::Logger::CreateAudioCapturer((Phase::Logger *)v10, v18, buf);
    float32x2_t v21 = &v7[88 * v5];
    uint64_t v24 = *((void *)v21 + 10);
    int v23 = v21 + 80;
    uint64_t v22 = v24;
    uint64_t v25 = *(void *)buf;
    *(void *)buf = 0;
    *(void *)int v23 = v25;
    if (v24)
    {
      (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
      uint64_t v26 = *(void *)buf;
      *(void *)buf = 0;
      if (v26) {
        (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
      }
      uint64_t v25 = *(void *)v23;
    }
    if (v25)
    {
      char v27 = (Phase::Logger *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v25 + 64))(v25, 10000);
      std::vector<char> v28 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v27)
                                                                                          + 528)));
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        int v29 = *(_DWORD *)&v7[88 * v5 + 4];
        uint64_t v30 = (*(uint64_t (**)(void))(**(void **)v23 + 56))();
        *(_DWORD *)buf = 136315906;
        *(void *)&uint8_t buf[4] = "AudioIOBase.mm";
        __int16 v36 = 1024;
        int v37 = 377;
        __int16 v38 = 1024;
        *(_DWORD *)uint64_t v39 = v29;
        *(_WORD *)&v39[4] = 2080;
        *(void *)&v39[6] = v30;
        _os_log_impl(&dword_221E5E000, v28, OS_LOG_TYPE_DEFAULT, "%25s:%-5d audioio[%d]: writing capture to %s", buf, 0x22u);
      }
    }
    else
    {
      __int16 v33 = **(id **)(Phase::Logger::GetInstance(0) + 528);
      uint64_t Instance = os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT);
      if (Instance)
      {
        int v34 = *(_DWORD *)&v7[88 * v5 + 4];
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "AudioIOBase.mm";
        __int16 v36 = 1024;
        int v37 = 381;
        __int16 v38 = 1024;
        *(_DWORD *)uint64_t v39 = v34;
        _os_log_impl(&dword_221E5E000, v33, OS_LOG_TYPE_DEFAULT, "%25s:%-5d audioio[%d]: Error: could not create capture file!", buf, 0x18u);
      }
    }
LABEL_23:
    char v9 = 0;
    unsigned int v10 = "audioio-in";
    uint64_t v5 = 1;
  }
  while ((v11 & 1) != 0);
}

void sub_221E820B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *Phase::Controller::SystemAudioIO::AudioIOBase::IOConfiguration::StopCaptures(void *this)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (this[10])
  {
    uint64_t v1 = this;
    char v2 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)this) + 528);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      int v3 = *((_DWORD *)v1 + 1);
      int v4 = 136315650;
      uint64_t v5 = "AudioIOBase.mm";
      __int16 v6 = 1024;
      int v7 = 389;
      __int16 v8 = 1024;
      int v9 = v3;
      _os_log_impl(&dword_221E5E000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d audioio[%d]: stopping capture", (uint8_t *)&v4, 0x18u);
    }
    this = (void *)v1[10];
    v1[10] = 0;
    if (this) {
      return (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
    }
  }
  return this;
}

uint64_t Phase::Controller::SystemAudioIO::AudioIOBase::IOConfiguration::WriteCaptureBufferList(uint64_t this, const AudioTimeStamp *a2, uint64_t a3, const AudioBufferList *a4)
{
  uint64_t v4 = *(void *)(this + 80);
  if (v4)
  {
    (*(void (**)(void, uint64_t, const AudioBufferList *, void))(*(void *)v4 + 24))(*(void *)(this + 80), a3, a4, 0);
    UInt64 mHostTime = a2->mHostTime;
    uint64_t mSampleTime = (uint64_t)a2->mSampleTime;
    int v9 = *(uint64_t (**)(uint64_t, UInt64, uint64_t, uint64_t))(*(void *)v4 + 72);
    return v9(v4, mHostTime, mSampleTime, a3);
  }
  return this;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<AudioChannelDescription>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xCCCCCCCCCCCCCCDLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(20 * a2);
}

uint64_t std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    caulk::pooled_semaphore_mutex::_unlock(*(caulk::pooled_semaphore_mutex **)a1);
  }
  return a1;
}

uint64_t Phase::Controller::SystemAudioIO::AudioIOPlatformAdapter::AudioIOPlatformAdapter(uint64_t a1, uint64_t a2, void *a3, double a4)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  id v7 = a3;
  *(void *)a1 = &unk_26D471A58;
  *(void *)(a1 + 8) = a2;
  *(_OWORD *)(a1 + 16) = xmmword_2220A5010;
  *(_DWORD *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 120) = 0;
  *(unsigned char *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 144) = 0;
  std::array<Phase::Controller::SystemAudioIO::AudioIOBase::IOConfiguration,2ul>::array(a1 + 152);
  *(_DWORD *)(a1 + 328) = 0;
  *(void *)a1 = &unk_26D471B00;
  *(double *)(a1 + 336) = a4;
  id v8 = v7;
  *(void *)(a1 + 344) = v8;
  *(_WORD *)(a1 + 352) = 0;
  *(_DWORD *)(a1 + 368) = 0;
  *(unsigned char *)(a1 + 408) = 0;
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 376) = 0;
  *(unsigned char *)(a1 + 400) = 0;
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 424) = 0;
  *(unsigned char *)(a1 + 432) = 0;
  if (_MergedGlobals_13 != -1) {
    dispatch_once(&_MergedGlobals_13, &__block_literal_global);
  }
  if (off_267F77880)
  {
    uint64_t v9 = off_267F77880();
    uint64_t v10 = _MergedGlobals_13;
    *(void *)(a1 + 440) = v9;
    if (v10 != -1) {
      dispatch_once(&_MergedGlobals_13, &__block_literal_global);
    }
  }
  else
  {
    uint64_t v9 = 0;
    *(void *)(a1 + 440) = 0;
  }
  if (off_267F778A8) {
    off_267F778A8(v9, 0);
  }
  uint64_t v11 = *(void *)(a1 + 440);
  char v12 = operator new(8uLL);
  *char v12 = v11;
  *(void *)&__p[8] = v12 + 1;
  *(void *)&__p[16] = v12 + 1;
  *(void *)std::string __p = v12;
  if (AudioIssueDetectorLibraryLoader(void)::once != -1) {
    dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_44);
  }
  if (AudioIssueDetectorLibraryLoader(void)::libSym)
  {
    unsigned int v13 = (Phase::Logger *)AudioIssueDetectorLibraryLoader(void)::libSym(8, __p);
    char v12 = *(void **)__p;
    *(void *)(a1 + 424) = v13;
    if (!v12)
    {
      if (v13) {
        goto LABEL_19;
      }
      goto LABEL_17;
    }
  }
  else
  {
    *(void *)(a1 + 424) = 0;
  }
  *(void *)&__p[8] = v12;
  operator delete(v12);
  unsigned int v13 = *(Phase::Logger **)(a1 + 424);
  if (v13) {
    goto LABEL_19;
  }
LABEL_17:
  id v14 = **(id **)(Phase::Logger::GetInstance(v13) + 528);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)std::string __p = 136315650;
    *(void *)&__p[4] = "AudioIOPlatformAdapter.mm";
    *(_WORD *)&__p[12] = 1024;
    *(_DWORD *)&__p[14] = 41;
    *(_WORD *)&unsigned char __p[18] = 2048;
    *(void *)&__p[20] = a1;
    _os_log_impl(&dword_221E5E000, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d audioio@%p: failed to create AID", __p, 0x1Cu);
  }
LABEL_19:

  return a1;
}

void sub_221E825E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  std::__optional_destruct_base<CA::AudioBuffers,false>::~__optional_destruct_base[abi:ne180100](v10 + 400);
  unsigned int v13 = *(void **)(v10 + 376);
  if (v13)
  {
    *(void *)(v10 + 384) = v13;
    operator delete(v13);
  }

  Phase::Controller::SystemAudioIO::AudioIOBase::~AudioIOBase((Phase::Controller::SystemAudioIO::AudioIOBase *)v10);
  _Unwind_Resume(a1);
}

void Phase::Controller::SystemAudioIO::AudioIOBase::~AudioIOBase(Phase::Controller::SystemAudioIO::AudioIOBase *this)
{
  uint64_t v2 = 0;
  *(void *)this = &unk_26D471A58;
  do
  {
    int v3 = (char *)this + v2;
    uint64_t v4 = *(void *)((char *)this + v2 + 320);
    *(void *)((char *)this + v2 + 320) = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    std::unique_ptr<Phase::Controller::SpeechDetector>::reset[abi:ne180100]((Phase::Controller::SpeechDetector::SpeechDetectorImpl ***)v3 + 38, 0);

    v2 -= 88;
  }
  while (v2 != -176);
}

void Phase::Controller::SystemAudioIO::AudioIOPlatformAdapter::~AudioIOPlatformAdapter(id *this)
{
  *this = &unk_26D471B00;
  Phase::Controller::SystemAudioIO::AudioIOPlatformAdapter::Uninitialize((Phase::Controller::SystemAudioIO::AudioIOPlatformAdapter *)this);
  id v2 = this[53];
  if (v2)
  {
    if (AudioIssueDetectorLibraryLoader(void)::once != -1) {
      dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_44);
    }
    if (off_267F74C70) {
      off_267F74C70(v2);
    }
    this[53] = 0;
  }
  id v3 = this[55];
  if (v3)
  {
    if (_MergedGlobals_13 != -1) {
      dispatch_once(&_MergedGlobals_13, &__block_literal_global);
    }
    if (off_267F778D8) {
      off_267F778D8(v3);
    }
    this[55] = 0;
  }
  std::__optional_destruct_base<CA::AudioBuffers,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(this + 50));
  id v4 = this[47];
  if (v4)
  {
    this[48] = v4;
    operator delete(v4);
  }

  Phase::Controller::SystemAudioIO::AudioIOBase::~AudioIOBase((Phase::Controller::SystemAudioIO::AudioIOBase *)this);
}

{
  uint64_t vars8;

  Phase::Controller::SystemAudioIO::AudioIOPlatformAdapter::~AudioIOPlatformAdapter(this);

  JUMPOUT(0x223C938A0);
}

uint64_t Phase::Controller::SystemAudioIO::AudioIOPlatformAdapter::EnableBus(Phase::Controller::SystemAudioIO::AudioIOPlatformAdapter *this, unsigned int a2, char a3)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  char v23 = a3;
  if (*((unsigned char *)this + 352)) {
    return 4294956447;
  }
  __int16 v6 = (char *)this + 88 * a2;
  char v9 = v6[152];
  id v7 = v6 + 152;
  char v8 = v9;
  char *v7 = a3;
  uint64_t v10 = objc_opt_respondsToSelector();
  if (v10)
  {
    BOOL v22 = a2 == 1;
    uint64_t v11 = [(id)objc_opt_class() instanceMethodSignatureForSelector:sel_enableIO_direction_];
    char v12 = [MEMORY[0x263EFF958] invocationWithMethodSignature:v11];
    [v12 setTarget:*((void *)this + 43)];
    [v12 setSelector:sel_enableIO_direction_];
    [v12 setArgument:&v23 atIndex:2];
    [v12 setArgument:&v22 atIndex:3];
    [v12 invoke];
    char v21 = 0;
    unsigned int v13 = (Phase::Logger *)[v12 getReturnValue:&v21];
    if (!v21)
    {
      char *v7 = v8;
      id v14 = **(id **)(Phase::Logger::GetInstance(v13) + 528);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        int v15 = *v7;
        if (v23) {
          uint64_t v16 = "enable";
        }
        else {
          uint64_t v16 = "disable";
        }
        *(_DWORD *)buf = 136316418;
        uint64_t v25 = "AudioIOPlatformAdapter.mm";
        __int16 v26 = 1024;
        int v27 = 101;
        __int16 v28 = 2048;
        int v29 = this;
        __int16 v30 = 2080;
        int v31 = v16;
        __int16 v32 = 1024;
        unsigned int v33 = a2;
        __int16 v34 = 1024;
        int v35 = v15;
        _os_log_impl(&dword_221E5E000, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d audioio@%p: error: could not %s bus %d, final state %d", buf, 0x32u);
      }
    }
  }
  uint64_t v17 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)v10) + 528);
  BOOL v18 = os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0;
  if (v18)
  {
    int v19 = *v7;
    double v20 = "enabled";
    uint64_t v25 = "AudioIOPlatformAdapter.mm";
    *(_DWORD *)buf = 136316162;
    __int16 v26 = 1024;
    if (!v19) {
      double v20 = "disabled";
    }
    int v27 = 106;
    __int16 v28 = 2048;
    int v29 = this;
    __int16 v30 = 2080;
    int v31 = v20;
    __int16 v32 = 1024;
    unsigned int v33 = a2;
    _os_log_impl(&dword_221E5E000, v17, OS_LOG_TYPE_DEFAULT, "%25s:%-5d audioio@%p: %s bus %d for Audio IO", buf, 0x2Cu);
    return 0;
  }
  return result;
}

void sub_221E82AF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::SystemAudioIO::AudioIOPlatformAdapter::Initialize(Phase::Controller::SystemAudioIO::AudioIOPlatformAdapter *this)
{
  uint64_t v94 = *MEMORY[0x263EF8340];
  if (*((unsigned char *)this + 352)) {
    return 0;
  }
  if (*((unsigned char *)this + 240))
  {
    uint64_t v5 = (Phase::Logger *)(*(uint64_t (**)(Phase::Controller::SystemAudioIO::AudioIOPlatformAdapter *, uint64_t))(*(void *)this + 144))(this, 1);
    if (v5)
    {
      uint64_t v2 = (uint64_t)v5;
      __int16 v6 = **(id **)(Phase::Logger::GetInstance(v5) + 528);
      if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        return v2;
      }
      uint64_t v7 = *((void *)this + 43);
      *(_DWORD *)buf = 136316162;
      *(void *)&uint8_t buf[4] = "AudioIOPlatformAdapter.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 129;
      __int16 v90 = 2048;
      long long v91 = this;
      __int16 v92 = 2080;
      *(void *)float v93 = "input";
      *(_WORD *)&v93[8] = 2048;
      *(void *)&v93[10] = v7;
LABEL_32:
      _os_log_impl(&dword_221E5E000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d audioio@%p: error: could not get %s HW format from platform@%p, initialize failed!", buf, 0x30u);
      return v2;
    }
    char v8 = (Phase::Controller::SystemAudioIO *)*((id *)this + 32);
    if (!Phase::Controller::SystemAudioIO::IsValidFormat(v8, v9)) {
      std::terminate();
    }
    [*((id *)this + 43) bufferFrameSize];
    [(Phase::Controller::SystemAudioIO *)v8 channelCount];
    std::__optional_destruct_base<CA::AudioBuffers,false>::reset[abi:ne180100]((uint64_t)this + 400);
    uint64_t v10 = ExtendedAudioBufferList_Create();
    uint64_t v11 = CA::AudioBuffers::AudioBuffers((Phase::Controller::SystemAudioIO::AudioIOPlatformAdapter *)((char *)this + 400), v10);
    *((unsigned char *)this + 408) = 1;
    char v12 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v11)
                                                                                        + 528)));
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      if (v8)
      {
        uint64_t v13 = [(Phase::Controller::SystemAudioIO *)v8 streamDescription];
        long long v14 = *(_OWORD *)v13;
        int16x8_t v15 = *(int16x8_t *)(v13 + 16);
        uint64_t v86 = *(void *)(v13 + 32);
        long long v84 = v14;
        int16x8_t v85 = v15;
        CA::StreamDescription::AsString((CA::StreamDescription *)&v84, (uint64_t)v87, v15);
        if (v88 >= 0) {
          uint64_t v16 = (const char *)v87;
        }
        else {
          uint64_t v16 = (const char *)v87[0];
        }
      }
      else
      {
        uint64_t v16 = "invalid";
      }
      uint64_t v17 = [(Phase::Controller::SystemAudioIO *)v8 channelLayout];
      uint64_t v18 = [v17 layout];
      if (v18)
      {
        uint64_t v1 = [(Phase::Controller::SystemAudioIO *)v8 channelLayout];
        int v19 = (Phase::ChannelLayout *)[v1 layout];
        Phase::ChannelLayout::GetStringDescription(v19, v20);
        if (v83 >= 0) {
          p_p = (const char *)&__p;
        }
        else {
          p_p = (const char *)__p;
        }
      }
      else
      {
        p_p = "None";
      }
      *(_DWORD *)buf = 136316162;
      *(void *)&uint8_t buf[4] = "AudioIOPlatformAdapter.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 146;
      __int16 v90 = 2048;
      long long v91 = this;
      __int16 v92 = 2080;
      *(void *)float v93 = v16;
      *(_WORD *)&v93[8] = 2080;
      *(void *)&v93[10] = p_p;
      _os_log_impl(&dword_221E5E000, v12, OS_LOG_TYPE_DEFAULT, "%25s:%-5d audioio@%p: initialize: input asbd <%s>, channel layout: \n%s", buf, 0x30u);
      if (v18)
      {
        if (v83 < 0) {
          operator delete(__p);
        }
      }
      if (v8 && v88 < 0) {
        operator delete(v87[0]);
      }
    }
  }
  if (*((unsigned char *)this + 152))
  {
    BOOL v22 = (Phase::Logger *)(*(uint64_t (**)(Phase::Controller::SystemAudioIO::AudioIOPlatformAdapter *, void))(*(void *)this + 144))(this, 0);
    uint64_t v2 = (uint64_t)v22;
    if (v22)
    {
      __int16 v6 = **(id **)(Phase::Logger::GetInstance(v22) + 528);
      if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        return v2;
      }
      uint64_t v23 = *((void *)this + 43);
      *(_DWORD *)buf = 136316162;
      *(void *)&uint8_t buf[4] = "AudioIOPlatformAdapter.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 158;
      __int16 v90 = 2048;
      long long v91 = this;
      __int16 v92 = 2080;
      *(void *)float v93 = "output";
      *(_WORD *)&v93[8] = 2048;
      *(void *)&v93[10] = v23;
      goto LABEL_32;
    }
    (*(void (**)(Phase::Controller::SystemAudioIO::AudioIOPlatformAdapter *))(*(void *)this + 88))(this);
    uint64_t v24 = (Phase::Controller::SystemAudioIO *)objc_claimAutoreleasedReturnValue();
    *((void *)this + 45) = Phase::Controller::SystemAudioIO::GetRenderedChannels(v24, v25);
    if (v24)
    {
      __int16 v26 = (_DWORD *)[(Phase::Controller::SystemAudioIO *)v24 layout];
      unsigned int v27 = v26[2];
      if (v27 <= 1) {
        unsigned int v27 = 1;
      }
      std::vector<char>::vector((std::vector<char> *)buf, 20 * v27 + 12);
      memcpy(*(void **)buf, v26, 20 * v26[2] + 12);
      *((_DWORD *)this + 92) = Phase::ChannelLayout::GetNumActiveChannels((int **)buf, *((void *)this + 45));
      if (*(void *)buf)
      {
        *(void *)&buf[8] = *(void *)buf;
        operator delete(*(void **)buf);
      }
    }
    else
    {
      *((_DWORD *)this + 92) = 0;
    }
    unint64_t v28 = 0;
    int v29 = (void **)((char *)this + 376);
    *((void *)this + 48) = *((void *)this + 47);
    while (1)
    {
      __int16 v30 = (Phase::Logger *)(*(uint64_t (**)(Phase::Controller::SystemAudioIO::AudioIOPlatformAdapter *))(*(void *)this + 80))(this);
      if (v28 >= v30) {
        break;
      }
      if ((*((void *)this + 45) >> v28))
      {
        __int16 v32 = (char *)*((void *)this + 48);
        unint64_t v31 = *((void *)this + 49);
        if ((unint64_t)v32 >= v31)
        {
          __int16 v34 = (char *)*v29;
          uint64_t v35 = (v32 - (unsigned char *)*v29) >> 2;
          unint64_t v36 = v35 + 1;
          if ((unint64_t)(v35 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v37 = v31 - (void)v34;
          if (v37 >> 1 > v36) {
            unint64_t v36 = v37 >> 1;
          }
          if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v38 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v38 = v36;
          }
          if (v38)
          {
            uint64_t v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)this + 392, v38);
            __int16 v34 = (char *)*((void *)this + 47);
            __int16 v32 = (char *)*((void *)this + 48);
          }
          else
          {
            uint64_t v39 = 0;
          }
          __int16 v40 = &v39[4 * v35];
          *(_DWORD *)__int16 v40 = v28;
          unsigned int v33 = v40 + 4;
          while (v32 != v34)
          {
            int v41 = *((_DWORD *)v32 - 1);
            v32 -= 4;
            *((_DWORD *)v40 - 1) = v41;
            v40 -= 4;
          }
          *((void *)this + 47) = v40;
          *((void *)this + 48) = v33;
          *((void *)this + 49) = &v39[4 * v38];
          if (v34) {
            operator delete(v34);
          }
        }
        else
        {
          *(_DWORD *)__int16 v32 = v28;
          unsigned int v33 = v32 + 4;
        }
        *((void *)this + 48) = v33;
      }
      ++v28;
    }
    if (*((_DWORD *)this + 92) == (uint64_t)(*((void *)this + 48) - *((void *)this + 47)) >> 2)
    {
      uint64_t v42 = (Phase::Controller::SystemAudioIO *)*((id *)this + 21);
      BOOL IsValidFormat = Phase::Controller::SystemAudioIO::IsValidFormat(v42, v43);
      if (IsValidFormat)
      {
        uint64_t v45 = *((void *)this + 55);
        if (v45) {
          AudioStatisticsStartReporter(v45);
        }
        uint64_t v46 = (Phase::Logger *)*((void *)this + 53);
        if (!v46) {
          goto LABEL_83;
        }
        AudioIssueDetectorClientReset((uint64_t)v46);
        uint64_t v47 = *((void *)this + 53);
        std::string::basic_string[abi:ne180100]<0>(buf, "phase-spatialout");
        uint64_t v48 = [(Phase::Controller::SystemAudioIO *)v42 streamDescription];
        uint64_t v49 = (*(uint64_t (**)(Phase::Controller::SystemAudioIO::AudioIOPlatformAdapter *))(*(void *)this + 112))(this);
        float v50 = (Phase::Logger *)AudioIssueDetectorClientSetNodeFormatWithDirection(v47, (uint64_t)buf, v48, v49);
        int v51 = (int)v50;
        if (SBYTE3(v91) < 0) {
          operator delete(*(void **)buf);
        }
        if (v51)
        {
          uint64_t v52 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v50)
                                                                                              + 528)));
          if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
          {
            id v53 = [(Phase::Controller::SystemAudioIO *)v42 description];
            uint64_t v54 = [v53 UTF8String];
            *(_DWORD *)buf = 136316162;
            *(void *)&uint8_t buf[4] = "AudioIOPlatformAdapter.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 216;
            __int16 v90 = 2048;
            long long v91 = this;
            __int16 v92 = 2080;
            *(void *)float v93 = v54;
            *(_WORD *)&v93[8] = 1024;
            *(_DWORD *)&v93[10] = v51;
            _os_log_impl(&dword_221E5E000, v52, OS_LOG_TYPE_ERROR, "%25s:%-5d audioio@%p: failed to set format for AID node with format %s, err = %d", buf, 0x2Cu);
          }
        }
        else
        {
          uint64_t v46 = (Phase::Logger *)AudioIssueDetectorClientInitialize(*((void *)this + 53));
          int v59 = (int)v46;
          if (!v46)
          {
            *((unsigned char *)this + 432) = 1;
            goto LABEL_83;
          }
          uint64_t v52 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v46)
                                                                                              + 528)));
          if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
          {
            id v60 = [(Phase::Controller::SystemAudioIO *)v42 description];
            uint64_t v61 = [v60 UTF8String];
            *(_DWORD *)buf = 136316162;
            *(void *)&uint8_t buf[4] = "AudioIOPlatformAdapter.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 225;
            __int16 v90 = 2048;
            long long v91 = this;
            __int16 v92 = 2080;
            *(void *)float v93 = v61;
            *(_WORD *)&v93[8] = 1024;
            *(_DWORD *)&v93[10] = v59;
            _os_log_impl(&dword_221E5E000, v52, OS_LOG_TYPE_ERROR, "%25s:%-5d audioio@%p: failed to initialize AID node with format %s, err = %d", buf, 0x2Cu);
          }
        }

LABEL_83:
        float v62 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v46)
                                                                                            + 528)));
        if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
        {
          if (v42)
          {
            uint64_t v63 = [(Phase::Controller::SystemAudioIO *)v42 streamDescription];
            long long v64 = *(_OWORD *)v63;
            int16x8_t v65 = *(int16x8_t *)(v63 + 16);
            uint64_t v86 = *(void *)(v63 + 32);
            long long v84 = v64;
            int16x8_t v85 = v65;
            float v66 = v80;
            CA::StreamDescription::AsString((CA::StreamDescription *)&v84, (uint64_t)v80, v65);
            if (v81 < 0) {
              float v66 = (void **)v80[0];
            }
          }
          else
          {
            float v66 = (void **)"invalid";
          }
          if (v24)
          {
            float v67 = (Phase::ChannelLayout *)[(Phase::Controller::SystemAudioIO *)v24 layout];
            Phase::ChannelLayout::GetStringDescription(v67, v68);
            if (v79 >= 0) {
              BOOL v69 = &v78;
            }
            else {
              BOOL v69 = v78;
            }
            *(_DWORD *)buf = 136316162;
            *(void *)&uint8_t buf[4] = "AudioIOPlatformAdapter.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 237;
            __int16 v90 = 2048;
            long long v91 = this;
            __int16 v92 = 2080;
            *(void *)float v93 = v66;
            *(_WORD *)&v93[8] = 2080;
            *(void *)&v93[10] = v69;
            _os_log_impl(&dword_221E5E000, v62, OS_LOG_TYPE_DEFAULT, "%25s:%-5d audioio@%p: initialize: output asbd <%s>, channel layout: \n%s", buf, 0x30u);
            if (v79 < 0) {
              operator delete(v78);
            }
          }
          else
          {
            *(_DWORD *)buf = 136316162;
            *(void *)&uint8_t buf[4] = "AudioIOPlatformAdapter.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 237;
            __int16 v90 = 2048;
            long long v91 = this;
            __int16 v92 = 2080;
            *(void *)float v93 = v66;
            *(_WORD *)&v93[8] = 2080;
            *(void *)&v93[10] = "None";
            _os_log_impl(&dword_221E5E000, v62, OS_LOG_TYPE_DEFAULT, "%25s:%-5d audioio@%p: initialize: output asbd <%s>, channel layout: \n%s", buf, 0x30u);
          }
          if (v42 && v81 < 0) {
            operator delete(v80[0]);
          }
        }

        goto LABEL_100;
      }
      float v58 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)IsValidFormat) + 528);
      if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "AudioIOPlatformAdapter.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 189;
        __int16 v90 = 2048;
        long long v91 = this;
        _os_log_impl(&dword_221E5E000, v58, OS_LOG_TYPE_ERROR, "%25s:%-5d audioio@%p: error: output channel format not valid, initialize failed!", buf, 0x1Cu);
      }
    }
    else
    {
      long long v55 = **(id **)(Phase::Logger::GetInstance(v30) + 528);
      if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
      {
        int v56 = *((_DWORD *)this + 92);
        uint64_t v57 = (uint64_t)(*((void *)this + 48) - *((void *)this + 47)) >> 2;
        *(_DWORD *)buf = 136316162;
        *(void *)&uint8_t buf[4] = "AudioIOPlatformAdapter.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 181;
        __int16 v90 = 2048;
        long long v91 = this;
        __int16 v92 = 1024;
        *(_DWORD *)float v93 = v56;
        *(_WORD *)&v93[4] = 2048;
        *(void *)&v93[6] = v57;
        _os_log_impl(&dword_221E5E000, v55, OS_LOG_TYPE_ERROR, "%25s:%-5d audioio@%p: error: output channel count %d does not match the active channel count %zu, initialize failed!", buf, 0x2Cu);
      }
    }
    return 4294956428;
  }
LABEL_100:
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 3221225472;
  aBlock[2] = ___ZN5Phase10Controller13SystemAudioIO22AudioIOPlatformAdapter10InitializeEv_block_invoke;
  aBlock[3] = &__block_descriptor_40_e333_v48__0r__PHASEIOCycleInfo__AudioTimeStamp_dQdQ_SMPTETime_ssIIIssss_II__AudioTimeStamp_dQdQ_SMPTETime_ssIIIssss_II__AudioTimeStamp_dQdQ_SMPTETime_ssIIIssss_II_Q_8Q16__PHASEIOStream__AudioTimeStamp_dQdQ_SMPTETime_ssIIIssss_II_IB__AudioBufferList__24Q32__PHASEIOStream__AudioTimeStamp_dQdQ_SMPTETime_ssIIIssss_II_IB__AudioBufferList__40l;
  aBlock[4] = this;
  long long v70 = _Block_copy(aBlock);
  long long v71 = (Phase::Logger *)[*((id *)this + 43) registerIOBlock:v70];
  int v72 = (int)v71;
  if ((v71 & 1) == 0)
  {
    long long v73 = **(id **)(Phase::Logger::GetInstance(v71) + 528);
    if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
    {
      uint64_t v74 = *((void *)this + 43);
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "AudioIOPlatformAdapter.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 256;
      __int16 v90 = 2048;
      long long v91 = this;
      __int16 v92 = 2048;
      *(void *)float v93 = v74;
      _os_log_impl(&dword_221E5E000, v73, OS_LOG_TYPE_ERROR, "%25s:%-5d audioio@%p: error: could not set IO block on platform@%p, initialize failed!", buf, 0x26u);
    }
  }
  *((unsigned char *)this + 352) = v72;
  long long v75 = (void *)*((void *)this + 43);
  v76[0] = MEMORY[0x263EF8330];
  v76[1] = 3221225472;
  _OWORD v76[2] = ___ZN5Phase10Controller13SystemAudioIO22AudioIOPlatformAdapter10InitializeEv_block_invoke_11;
  v76[3] = &__block_descriptor_40_e32_v16__0___PHASERouteChangeInfo__8l;
  v76[4] = this;
  [v75 registerRouteChangeNotification:v76];
  if (v72) {
    uint64_t v2 = 0;
  }
  else {
    uint64_t v2 = 4294956433;
  }

  return v2;
}

void sub_221E83734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  _Unwind_Resume(a1);
}

void CA::StreamDescription::AsString(CA::StreamDescription *this@<X0>, uint64_t a2@<X8>, int16x8_t a3@<Q1>)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  unsigned int v5 = *((_DWORD *)this + 2);
  if (v5 == 1718773105)
  {
    caulk::make_string((caulk *)"%2u ch, %6.0f Hz, 'freq'", a2, *((unsigned int *)this + 7), *(void *)this);
    return;
  }
  if (v5 == 1819304813 && *((_DWORD *)this + 5) == 1)
  {
    unsigned int v6 = *((_DWORD *)this + 6);
    if (v6 == *((_DWORD *)this + 4))
    {
      unsigned int v7 = *((_DWORD *)this + 8);
      if (v6 >= v7 >> 3)
      {
        uint64_t v8 = *((unsigned int *)this + 7);
        if (v8)
        {
          unsigned int v9 = *((_DWORD *)this + 3);
          if ((v9 & 0x20) == 0)
          {
            if (v6 % v8) {
              goto LABEL_19;
            }
            v6 /= v8;
          }
          if ((v9 & 2) == 0 && 8 * v6 == v7)
          {
            if (v9)
            {
              if ((v9 & 0x1F84) == 0)
              {
                if (v6 == 4)
                {
                  uint64_t v11 = 1;
                  goto LABEL_162;
                }
                if (v6 == 8)
                {
                  uint64_t v11 = 4;
                  goto LABEL_162;
                }
              }
            }
            else if ((v9 & 4) != 0)
            {
              int v10 = (v9 >> 7) & 0x3F;
              if (v10 == 24 && v6 == 4)
              {
                uint64_t v11 = 3;
LABEL_162:
                if ((v9 & 0x20) != 0) {
                  int v51 = ", deinterleaved";
                }
                else {
                  int v51 = ", interleaved";
                }
                if (v8 <= 1) {
                  int v51 = "";
                }
                caulk::make_string((caulk *)"%2u ch, %6.0f Hz, %s%s", a2, v8, *(void *)this, *((void *)&off_2645F6F10 + v11), v51);
                return;
              }
              if (!v10 && v6 == 4)
              {
                uint64_t v11 = 5;
                goto LABEL_162;
              }
              if (!v10 && v6 == 2)
              {
                uint64_t v11 = 2;
                goto LABEL_162;
              }
            }
          }
        }
      }
    }
  }
LABEL_19:
  uint64_t v12 = *((unsigned int *)this + 7);
  double v13 = *(double *)this;
  if (v12) {
    BOOL v14 = 0;
  }
  else {
    BOOL v14 = v5 == 0;
  }
  if (v14 && v13 == 0.0)
  {
    caulk::make_string((caulk *)"%2u ch, %6.0f Hz", a2, 0, *(void *)this);
    return;
  }
  a3.i32[0] = bswap32(v5);
  *(int8x8_t *)a3.i8 = vzip1_s8(*(int8x8_t *)a3.i8, *(int8x8_t *)&v13);
  v15.i64[0] = 0x1F0000001FLL;
  v15.i64[1] = 0x1F0000001FLL;
  v16.i64[0] = 0x5F0000005FLL;
  v16.i64[1] = 0x5F0000005FLL;
  *(int8x8_t *)a3.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v16, (uint32x4_t)vsraq_n_s32(v15, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)a3.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)a3.i8, (int8x8_t)0x2E002E002E002ELL);
  *((unsigned char *)&v55.__r_.__value_.__s + 23) = 4;
  LODWORD(v55.__r_.__value_.__l.__data_) = vmovn_s16(a3).u32[0];
  v55.__r_.__value_.__s.__data_[4] = 0;
  caulk::make_string((caulk *)"%2u ch, %6.0f Hz, %s (0x%08X) ", (uint64_t)&v53, v12, *(void *)&v13, &v55, *((unsigned int *)this + 3));
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v55.__r_.__value_.__l.__data_);
  }
  int v17 = *((_DWORD *)this + 2);
  if (v17 <= 1819304812)
  {
    if (v17 != 1634492771 && v17 != 1634497332 && v17 != 1718378851)
    {
LABEL_70:
      caulk::make_string((caulk *)"%u bits/channel, %u bytes/packet, %u frames/packet, %u bytes/frame", (uint64_t)&v55, *((unsigned int *)this + 8), *((unsigned int *)this + 4), *((unsigned int *)this + 5), *((unsigned int *)this + 6));
      if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v29 = &v53;
      }
      else {
        int v29 = (std::string *)v53.__r_.__value_.__r.__words[0];
      }
      if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v53.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v53.__r_.__value_.__l.__size_;
      }
LABEL_62:
      unint64_t v31 = std::string::insert(&v55, 0, (const std::string::value_type *)v29, size);
      long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
      *(void *)(a2 + 16) = *((void *)&v31->__r_.__value_.__l + 2);
      *(_OWORD *)a2 = v32;
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_65;
      }
      unsigned int v33 = (void *)v55.__r_.__value_.__r.__words[0];
      goto LABEL_64;
    }
LABEL_45:
    uint64_t v26 = *((unsigned int *)this + 3);
    if ((v26 - 1) < 4 || !v26 && (v17 == 1634497332 || v17 == 1936487278 || v17 == 1936487267))
    {
      caulk::make_string((caulk *)"from %u-bit source, ", (uint64_t)&v55, CA::StreamDescription::AsString(void)const::kSourceBits[v26]);
      if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unsigned int v27 = &v55;
      }
      else {
        unsigned int v27 = (std::string *)v55.__r_.__value_.__r.__words[0];
      }
      if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v28 = HIBYTE(v55.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v28 = v55.__r_.__value_.__l.__size_;
      }
      std::string::append(&v53, (const std::string::value_type *)v27, v28);
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v55.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      std::string::append(&v53, "from UNKNOWN source bit depth, ");
    }
    caulk::make_string((caulk *)"%u frames/packet", (uint64_t)&v55, *((unsigned int *)this + 5));
    if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v29 = &v53;
    }
    else {
      int v29 = (std::string *)v53.__r_.__value_.__r.__words[0];
    }
    if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v53.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v53.__r_.__value_.__l.__size_;
    }
    goto LABEL_62;
  }
  if (v17 == 1936487278 || v17 == 1936487267) {
    goto LABEL_45;
  }
  if (v17 != 1819304813) {
    goto LABEL_70;
  }
  unsigned int v18 = *((_DWORD *)this + 3);
  unsigned int v19 = *((_DWORD *)this + 6);
  int v20 = v18 & 0x20;
  char v21 = "";
  if (!v19) {
    goto LABEL_37;
  }
  if ((v18 & 0x20) != 0)
  {
    unsigned int v22 = 1;
  }
  else
  {
    unsigned int v22 = *((_DWORD *)this + 7);
    if (!v22)
    {
      int v20 = 0;
LABEL_37:
      uint64_t v23 = " signed";
      if ((v18 & 4) == 0) {
        uint64_t v23 = " unsigned";
      }
      if (v18) {
        uint64_t v24 = "float";
      }
      else {
        uint64_t v24 = "integer";
      }
      if (v18) {
        uint64_t v25 = "";
      }
      else {
        uint64_t v25 = v23;
      }
LABEL_102:
      v55.__r_.__value_.__s.__data_[0] = 0;
      if (v20) {
        unint64_t v38 = ", deinterleaved";
      }
      else {
        unint64_t v38 = "";
      }
      uint64_t v35 = "";
      uint64_t v39 = "";
      goto LABEL_106;
    }
  }
  int v34 = v19 / v22;
  if (v19 / v22 < 2)
  {
    uint64_t v37 = " signed";
    if ((v18 & 4) == 0) {
      uint64_t v37 = " unsigned";
    }
    if (v18) {
      uint64_t v24 = "float";
    }
    else {
      uint64_t v24 = "integer";
    }
    if (v18) {
      uint64_t v25 = "";
    }
    else {
      uint64_t v25 = v37;
    }
    if (v22 > v19) {
      goto LABEL_102;
    }
    int v34 = 1;
    uint64_t v35 = "";
  }
  else
  {
    if ((v18 & 2) != 0) {
      uint64_t v35 = " big-endian";
    }
    else {
      uint64_t v35 = " little-endian";
    }
    unint64_t v36 = " unsigned";
    if ((v18 & 4) != 0) {
      unint64_t v36 = " signed";
    }
    if (v18) {
      uint64_t v24 = "float";
    }
    else {
      uint64_t v24 = "integer";
    }
    if (v18) {
      uint64_t v25 = "";
    }
    else {
      uint64_t v25 = v36;
    }
  }
  unsigned int v40 = *((_DWORD *)this + 7);
  if ((v18 & 0x20) != 0) {
    unsigned int v41 = 1;
  }
  else {
    unsigned int v41 = *((_DWORD *)this + 7);
  }
  if (v41) {
    unsigned int v41 = 8 * (v19 / v41);
  }
  if (v41 == *((_DWORD *)this + 8))
  {
    v55.__r_.__value_.__s.__data_[0] = 0;
  }
  else
  {
    if ((v18 & 8) != 0) {
      uint64_t v42 = "";
    }
    else {
      uint64_t v42 = "un";
    }
    snprintf((char *)&v55, 0x20uLL, "%spacked in %u bytes", v42, v34);
    unsigned int v19 = *((_DWORD *)this + 6);
    unsigned int v18 = *((_DWORD *)this + 3);
    if (!v19)
    {
      unsigned int v43 = 0;
      int v20 = *((_DWORD *)this + 3) & 0x20;
      goto LABEL_128;
    }
    unsigned int v40 = *((_DWORD *)this + 7);
    int v20 = *((_DWORD *)this + 3) & 0x20;
  }
  if (v20) {
    unsigned int v43 = 1;
  }
  else {
    unsigned int v43 = v40;
  }
  if (v43) {
    unsigned int v43 = 8 * (v19 / v43);
  }
LABEL_128:
  int v44 = *((_DWORD *)this + 8);
  uint64_t v45 = " high-aligned";
  if ((v18 & 0x10) == 0) {
    uint64_t v45 = " low-aligned";
  }
  if ((v44 & 7) == 0 && v43 == v44) {
    uint64_t v39 = "";
  }
  else {
    uint64_t v39 = v45;
  }
  if (v20) {
    unint64_t v38 = ", deinterleaved";
  }
  else {
    unint64_t v38 = "";
  }
  if (v55.__r_.__value_.__s.__data_[0])
  {
    char v21 = ", ";
    goto LABEL_141;
  }
LABEL_106:
  if (*v39) {
    char v21 = ", ";
  }
LABEL_141:
  if (((v18 >> 7) & 0x3F) != 0) {
    snprintf(__str, 0x14uLL, "%u.%u");
  }
  else {
    snprintf(__str, 0x14uLL, "%u");
  }
  caulk::make_string((caulk *)"%s-bit%s%s %s%s%s%s%s", (uint64_t)&v52, __str, v35, v25, v24, v21, &v55, v39, v38);
  if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v47 = &v53;
  }
  else {
    uint64_t v47 = (std::string *)v53.__r_.__value_.__r.__words[0];
  }
  if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v48 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v48 = v53.__r_.__value_.__l.__size_;
  }
  uint64_t v49 = std::string::insert(&v52, 0, (const std::string::value_type *)v47, v48);
  long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
  *(void *)(a2 + 16) = *((void *)&v49->__r_.__value_.__l + 2);
  *(_OWORD *)a2 = v50;
  v49->__r_.__value_.__l.__size_ = 0;
  v49->__r_.__value_.__r.__words[2] = 0;
  v49->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
  {
    unsigned int v33 = (void *)v52.__r_.__value_.__r.__words[0];
LABEL_64:
    operator delete(v33);
  }
LABEL_65:
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v53.__r_.__value_.__l.__data_);
  }
}

void sub_221E83F74(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void AudioStatisticsStartReporter(uint64_t a1)
{
  if (_MergedGlobals_13 != -1) {
    dispatch_once(&_MergedGlobals_13, &__block_literal_global);
  }
  if (off_267F77898)
  {
    uint64_t v2 = (void (*)(uint64_t))off_267F77898;
    v2(a1);
  }
}

void AudioIssueDetectorClientReset(uint64_t a1)
{
  if (AudioIssueDetectorLibraryLoader(void)::once != -1) {
    dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_44);
  }
  if (off_267F74C88)
  {
    uint64_t v2 = (void (*)(uint64_t))off_267F74C88;
    v2(a1);
  }
}

uint64_t AudioIssueDetectorClientSetNodeFormatWithDirection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (AudioIssueDetectorLibraryLoader(void)::once != -1) {
    dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_44);
  }
  if (!off_267F74C80) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))off_267F74C80;

  return v8(a1, a2, 2, 1, a3, a4);
}

uint64_t AudioIssueDetectorClientInitialize(uint64_t a1)
{
  if (AudioIssueDetectorLibraryLoader(void)::once != -1) {
    dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_44);
  }
  if (!off_267F74C68) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v2 = (uint64_t (*)(uint64_t))off_267F74C68;

  return v2(a1);
}

void ___ZN5Phase10Controller13SystemAudioIO22AudioIOPlatformAdapter10InitializeEv_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v142 = *MEMORY[0x263EF8340];
  uint64_t v11 = *(void *)(a1 + 32);
  if (atomic_load((unsigned int *)(v11 + 144)))
  {
    int v13 = 0;
    if (a3 && a4) {
      int v13 = *(_DWORD *)(a4 + 64);
    }
    kdebug_trace();
    BOOL v14 = (Phase::Logger *)_os_log_pack_size();
    uint64_t v15 = (uint64_t)v14 + 88;
    uint64_t Instance = Phase::Logger::GetInstance(v14);
    if (caulk::deferred_logger::create_message(*(caulk::deferred_logger **)(Instance + 1168), v15, 0))
    {
      uint64_t v17 = _os_log_pack_fill();
      uint64_t v18 = *(void *)(a2 + 72);
      *(_DWORD *)uint64_t v17 = 134218240;
      *(void *)(v17 + 4) = v18;
      *(_WORD *)(v17 + 12) = 1024;
      *(_DWORD *)(v17 + 14) = v13;
      Phase::Logger::GetInstance((Phase::Logger *)v17);
      caulk::concurrent::messenger::enqueue();
    }
  }
  else if (*(unsigned char *)(v11 + 240) && a4 && a3 && *(unsigned char *)(v11 + 408))
  {
    if ((*(unsigned char *)(a2 + 120) & 3) != 0)
    {
      unsigned int v19 = (const AudioTimeStamp *)(a2 + 64);
      kdebug_trace();
      int v20 = *(unsigned int **)(a4 + 72);
      uint64_t v21 = *v20;
      if (v21 == 1)
      {
        *(_DWORD *)__str = 0;
        if (*(void *)(v11 + 304))
        {
          *(void *)__s = v11 + 312;
          int v22 = caulk::pooled_semaphore_mutex::try_lock((caulk::pooled_semaphore_mutex *)(v11 + 312));
          __s[8] = v22;
          if (v22 && (uint64_t v23 = *(float ***)(v11 + 304)) != 0 && *v23)
          {
            Phase::Controller::SpeechDetector::SpeechDetectorImpl::ProcessAndGetLatest(*v23, *(_DWORD **)(a4 + 72), (float *)__str);
            std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)__s);
          }
          else
          {
            std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)__s);
          }
        }
      }
      else
      {
        uint64_t v24 = *(void *)(v11 + 400);
        uint64_t v25 = (_DWORD *)(v24 + 48);
        if (v21)
        {
          uint64_t v26 = 0;
          unsigned int v27 = *(_DWORD **)(v24 + 64);
          uint64_t v28 = *(unsigned int *)(a4 + 64);
          do
          {
            if (v28)
            {
              int v29 = *(int **)&v20[4 * v26 + 4];
              __int16 v30 = v27;
              uint64_t v31 = v28;
              do
              {
                int v32 = *v29++;
                _DWORD *v30 = v32;
                v30 += v21;
                --v31;
              }
              while (v31);
            }
            ++v26;
            ++v27;
          }
          while (v26 != v21);
        }
        *(_DWORD *)__str = 0;
        if (*(void *)(v11 + 304))
        {
          *(void *)__s = v11 + 312;
          int v33 = caulk::pooled_semaphore_mutex::try_lock((caulk::pooled_semaphore_mutex *)(v11 + 312));
          __s[8] = v33;
          if (v33 && (int v34 = *(float ***)(v11 + 304)) != 0 && *v34)
          {
            Phase::Controller::SpeechDetector::SpeechDetectorImpl::ProcessAndGetLatest(*v34, v25, (float *)__str);
            std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)__s);
          }
          else
          {
            std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)__s);
          }
        }
      }
      Phase::Controller::VoiceManager::IOExecuteRealtimeInputActions(*(uint64_t **)(v11 + 8), (uint64_t)v19);
      uint64_t v35 = (Phase::Logger *)Phase::Controller::SystemAudioIO::AudioIOBase::IOConfiguration::WriteCaptureBufferList(v11 + 240, v19, *(unsigned int *)(a4 + 64), *(const AudioBufferList **)(a4 + 72));
      if (*(unsigned char *)(Phase::Logger::GetInstance(v35) + 1552))
      {
        float v36 = *(double *)(v11 + 336);
        Phase::Trace::PostSignalStatsTraceIfSignificant((Phase::Trace *)0x161F, *(const float **)(*(void *)(a4 + 72) + 16), *(unsigned int *)(a4 + 64), v36);
      }
      kdebug_trace();
    }
    else
    {
      *(void *)__s = *(void *)(a1 + 32);
      Phase::Controller::SystemAudioIO::AudioIOBase::IOProcError<Phase::Controller::SystemAudioIO::AudioIOPlatformAdapter *,unsigned int const&>(v11, "audioio@%p: error: invalid input timestamp, flags 0x%x", __s, (unsigned int *)(a2 + 120));
    }
  }
  if (a6)
  {
    if (a5)
    {
      uint64_t v37 = *(void *)(a1 + 32);
      if (*(unsigned char *)(v37 + 152))
      {
        unint64_t v38 = *(void ***)(a6 + 72);
        if (v38)
        {
          uint64_t v39 = *(unsigned int *)v38;
          if (v39 && v38[2])
          {
            if ((*(unsigned char *)(a2 + 184) & 3) == 0)
            {
              *(void *)__s = v37;
              Phase::Controller::SystemAudioIO::AudioIOBase::IOProcError<Phase::Controller::SystemAudioIO::AudioIOPlatformAdapter *,unsigned int const&>(v37, "audioio@%p: error: invalid output timestamp, flags 0x%x", __s, (unsigned int *)(a2 + 184));
              return;
            }
            unsigned int v40 = (const AudioTimeStamp *)(a2 + 128);
            if (!*(unsigned char *)(v37 + 104))
            {
              long long v41 = *(_OWORD *)&v40->mSampleTime;
              long long v42 = *(_OWORD *)(a2 + 144);
              long long v43 = *(_OWORD *)(a2 + 176);
              *(_OWORD *)(v37 + 72) = *(_OWORD *)(a2 + 160);
              *(_OWORD *)(v37 + 88) = v43;
              *(_OWORD *)(v37 + 40) = v41;
              *(_OWORD *)(v37 + 56) = v42;
              *(unsigned char *)(v37 + 104) = 1;
              LODWORD(v39) = *(_DWORD *)v38;
            }
            uint64_t v44 = LODWORD(v38[v39 == 1]);
            if (atomic_load((unsigned int *)(v37 + 144)))
            {
              int v46 = *(_DWORD *)(a6 + 64);
              *(unsigned char *)(a6 + 68) = 1;
              if (v39 == 1)
              {
                bzero(v38[2], *((unsigned int *)v38 + 3));
              }
              else if (v44)
              {
                std::string v52 = v38 + 2;
                do
                {
                  bzero(*v52, *((unsigned int *)v52 - 1));
                  v52 += 2;
                  --v44;
                }
                while (v44);
              }
              kdebug_trace();
              std::string v53 = (Phase::Logger *)_os_log_pack_size();
              uint64_t v54 = (uint64_t)v53 + 88;
              uint64_t v55 = Phase::Logger::GetInstance(v53);
              if (caulk::deferred_logger::create_message(*(caulk::deferred_logger **)(v55 + 1168), v54, 0))
              {
                uint64_t v56 = _os_log_pack_fill();
                uint64_t v57 = *(void *)(a2 + 136);
                *(_DWORD *)uint64_t v56 = 134218240;
                *(void *)(v56 + 4) = v57;
                *(_WORD *)(v56 + 12) = 1024;
                *(_DWORD *)(v56 + 14) = v46;
                Phase::Logger::GetInstance((Phase::Logger *)v56);
                caulk::concurrent::messenger::enqueue();
              }
              return;
            }
            if (v44 < *(_DWORD *)(v37 + 368))
            {
              strcpy(__s, "(%d): ");
              strcat(__s, "audioio@%p: error: mismatch in channel count, actual %u, expected %u");
              uint64_t ShouldFire = Phase::Throttle::ShouldFire((Phase::Throttle *)(v37 + 16), 0);
              if (!ShouldFire) {
                return;
              }
              int v51 = (Phase::Logger *)snprintf(__str, 0x100uLL, __s, ShouldFire, v37, v44, *(unsigned int *)(v37 + 368));
              uint64_t v49 = **(id **)(Phase::Logger::GetInstance(v51) + 528);
              if (!os_log_type_enabled(v49, OS_LOG_TYPE_ERROR)) {
                return;
              }
              goto LABEL_51;
            }
            *(void *)(v37 + 416) = *(unsigned int *)(a6 + 64);
            uint64_t v133 = (AudioTimeStamp *)(a2 + 128);
            if (*(unsigned char *)(v37 + 136))
            {
              uint64_t v58 = mach_absolute_time();
              uint64_t v131 = *(void *)(v37 + 128);
              uint64_t v132 = v58;
              double v59 = (*(double (**)(uint64_t))(*(void *)v37 + 104))(v37);
              id v60 = (Phase::Logger *)_os_log_pack_size();
              uint64_t v61 = (uint64_t)v60 + 88;
              uint64_t v62 = Phase::Logger::GetInstance(v60);
              if (caulk::deferred_logger::create_message(*(caulk::deferred_logger **)(v62 + 1168), v61, 0))
              {
                uint64_t v63 = (Phase::Logger *)_os_log_pack_fill();
                *(_DWORD *)uint64_t v63 = 67109120;
                *((_DWORD *)v63 + 1) = ((double)(uint64_t)(v132 - v131) * 0.0000000416666667 * v59);
                Phase::Logger::GetInstance(v63);
                caulk::concurrent::messenger::enqueue();
              }
              unsigned int v40 = (const AudioTimeStamp *)(a2 + 128);
              if (*(unsigned char *)(v37 + 136)) {
                *(unsigned char *)(v37 + 136) = 0;
              }
            }
            kdebug_trace();
            int v64 = *(_DWORD *)(a6 + 64);
            uint64_t v65 = **(void **)(**(void **)(v37 + 8) + 696);
            long long v67 = *(_OWORD *)&v40->mSMPTETime.mSubframes;
            long long v66 = *(_OWORD *)&v40->mSMPTETime.mHours;
            long long v68 = *(_OWORD *)&v40->mRateScalar;
            *(_OWORD *)(v65 + 75224) = *(_OWORD *)&v40->mSampleTime;
            *(_OWORD *)(v65 + 75240) = v68;
            *(_OWORD *)(v65 + 75256) = v67;
            *(_OWORD *)(v65 + 75272) = v66;
            *(_DWORD *)(v65 + 104) = v64;
            *(_DWORD *)(v65 + 108) = 0;
            uint64_t v69 = *(void *)(v65 + 75096);
            long long v71 = *(_OWORD *)&v40->mSMPTETime.mSubframes;
            long long v70 = *(_OWORD *)&v40->mSMPTETime.mHours;
            long long v72 = *(_OWORD *)&v40->mRateScalar;
            *(_OWORD *)(v69 + 48) = *(_OWORD *)&v40->mSampleTime;
            *(_OWORD *)(v69 + 64) = v72;
            *(_OWORD *)(v69 + 80) = v71;
            *(_OWORD *)(v69 + 96) = v70;
            *(void *)(v69 + 40) = *(void *)(*(void *)(v69 + 16) + 16);
            Phase::Controller::VoiceManager::IOExecuteRealtimeActions(*(Phase::Controller::VoiceManager **)(v37 + 8), v40);
            unsigned int v73 = *(_DWORD *)(**(void **)(**(void **)(v37 + 8) + 696) + 192);
            if (v39 == 1)
            {
              signed int v74 = v44;
              if (v44 > v73)
              {
                bzero(v38[2], *((unsigned int *)v38 + 3));
                signed int v74 = v73;
              }
              int v75 = *(_DWORD *)(a6 + 64);
              if (*(void *)(v37 + 360) == -1)
              {
                if (v75)
                {
                  unsigned int v93 = 0;
                  uint64_t v94 = (char *)v38[2];
                  size_t v95 = 4 * v74;
                  do
                  {
                    uint64_t v96 = **(void **)(**(void **)(v37 + 8) + 696);
                    Phase::Controller::DVM_RT::RtUpdate(*(Phase::Controller::DVM_RT **)(v96 + 75096));
                    memcpy(v94, *(const void **)(v96 + 144), v95);
                    ++v93;
                    unsigned int v85 = *(_DWORD *)(a6 + 64);
                    v94 += 4 * v44;
                  }
                  while (v93 < v85);
LABEL_98:
                  *(_DWORD *)__s = 0;
                  vDSP_rmsqv((const float *)v38[2], 1, (float *)__s, v85 * v44);
                  BOOL v97 = *(float *)__s < 0.000001;
                  *(unsigned char *)(a6 + 68) = *(float *)__s < 0.000001;
                  if (v97) {
                    bzero(v38[2], *((unsigned int *)v38 + 3));
                  }
LABEL_132:
                  *(void *)(v37 + 112) = mach_absolute_time();
                  *(unsigned char *)(v37 + 120) = 1;
                  uint64_t v121 = Phase::Controller::SystemAudioIO::AudioIOBase::IOConfiguration::WriteCaptureBufferList(v37 + 152, v133, *(unsigned int *)(a6 + 64), (const AudioBufferList *)v38);
                  uint64_t v122 = *(void *)(v37 + 424);
                  if (!v122 || !*(unsigned char *)(v37 + 432)) {
                    goto LABEL_143;
                  }
                  uint64_t v123 = *(unsigned int *)(a6 + 64);
                  if (AudioIssueDetectorLibraryLoader(void)::once != -1) {
                    dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_44);
                  }
                  if (off_267F74C90)
                  {
                    uint64_t v121 = off_267F74C90(v122, 2, 0, v38, v123, v133);
                    uint64_t v124 = v121;
                    if (!v121)
                    {
LABEL_143:
                      if (*(unsigned char *)(Phase::Logger::GetInstance((Phase::Logger *)v121) + 1552))
                      {
                        vDSP_Length v127 = *(unsigned int *)(a6 + 64);
                        v128 = (const float *)v38[2];
                        if (v127)
                        {
                          for (uint64_t i = 0; i != v127; ++i)
                          {
                            if (fabsf(v128[i]) > 0.01) {
                              break;
                            }
                          }
                        }
                        else
                        {
                          vDSP_Length v127 = 0;
                        }
                        float v130 = *(double *)(v37 + 336);
                        Phase::Trace::PostSignalStatsTraceIfSignificant((Phase::Trace *)0x1620, v128, v127, v130);
                      }
                      mach_absolute_time();
                      __udivti3();
                      kdebug_trace();
                      return;
                    }
                  }
                  else
                  {
                    uint64_t v124 = 0xFFFFFFFFLL;
                  }
                  strcpy(__s, "(%d): ");
                  strcat(__s, "audioio@%p: failed to analyze buffer %d");
                  uint64_t v121 = Phase::Throttle::ShouldFire((Phase::Throttle *)(v37 + 16), 0);
                  if (v121)
                  {
                    v125 = (Phase::Logger *)snprintf(__str, 0x100uLL, __s, v121, v37, v124);
                    uint64_t v126 = **(id **)(Phase::Logger::GetInstance(v125) + 528);
                    uint64_t v121 = os_log_type_enabled(v126, OS_LOG_TYPE_ERROR);
                    if (v121)
                    {
                      *(_DWORD *)buf = 136315650;
                      char v135 = "AudioIOBase.hpp";
                      __int16 v136 = 1024;
                      int v137 = 133;
                      __int16 v138 = 2080;
                      uint64_t v139 = __str;
                      _os_log_impl(&dword_221E5E000, v126, OS_LOG_TYPE_ERROR, "%25s:%-5d %s", buf, 0x1Cu);
                    }
                  }
                  goto LABEL_143;
                }
              }
              else if (v75)
              {
                unsigned int v76 = 0;
                uint64_t v77 = (char *)v38[2];
                do
                {
                  long long v78 = *(uint64_t **)(**(void **)(v37 + 8) + 696);
                  uint64_t v79 = *v78;
                  Phase::Controller::DVM_RT::RtUpdate(*(Phase::Controller::DVM_RT **)(*v78 + 75096));
                  if (v44)
                  {
                    uint64_t v80 = 0;
                    int v81 = 0;
                    uint64_t v82 = *(void *)(v79 + 144);
                    unint64_t v83 = *(void *)(v37 + 360);
                    do
                    {
                      if ((v83 >> v80)) {
                        int v84 = *(_DWORD *)(v82 + 4 * v81++);
                      }
                      else {
                        int v84 = 0;
                      }
                      *(_DWORD *)&v77[4 * v80++] = v84;
                    }
                    while (v44 != v80);
                  }
                  ++v76;
                  unsigned int v85 = *(_DWORD *)(a6 + 64);
                  v77 += 4 * v44;
                }
                while (v76 < v85);
                goto LABEL_98;
              }
              unsigned int v85 = 0;
              goto LABEL_98;
            }
            int v86 = v44;
            if (v44 > v73)
            {
              long long v87 = &v38[2 * (int)v73 + 2];
              unsigned int v88 = *(_DWORD *)(**(void **)(**(void **)(v37 + 8) + 696) + 192);
              do
              {
                bzero(*v87, *((unsigned int *)v87 - 1));
                ++v88;
                v87 += 2;
              }
              while (v44 > v88);
              int v86 = v73;
            }
            if (v86 == 1)
            {
              if (!*(_DWORD *)(a6 + 64)) {
                goto LABEL_123;
              }
              unint64_t v98 = 0;
              do
              {
                uint64_t v99 = *(uint64_t **)(**(void **)(v37 + 8) + 696);
                uint64_t v100 = *v99;
                Phase::Controller::DVM_RT::RtUpdate(*(Phase::Controller::DVM_RT **)(*v99 + 75096));
                *((_DWORD *)v38[2] + v98++) = **(_DWORD **)(v100 + 144);
              }
              while (v98 < *(unsigned int *)(a6 + 64));
            }
            else if (v86 == 2)
            {
              if (!*(_DWORD *)(a6 + 64)) {
                goto LABEL_123;
              }
              unint64_t v89 = 0;
              do
              {
                __int16 v90 = *(uint64_t **)(**(void **)(v37 + 8) + 696);
                uint64_t v91 = *v90;
                Phase::Controller::DVM_RT::RtUpdate(*(Phase::Controller::DVM_RT **)(*v90 + 75096));
                __int16 v92 = *(_DWORD **)(v91 + 144);
                *((_DWORD *)v38[2] + v89) = *v92;
                *((_DWORD *)v38[4] + v89++) = v92[1];
              }
              while (v89 < *(unsigned int *)(a6 + 64));
            }
            else
            {
              int v101 = *(_DWORD *)(a6 + 64);
              if (*(void *)(v37 + 360) == -1)
              {
                if (v101)
                {
                  unint64_t v109 = 0;
                  do
                  {
                    uint64_t v110 = **(void **)(**(void **)(v37 + 8) + 696);
                    Phase::Controller::DVM_RT::RtUpdate(*(Phase::Controller::DVM_RT **)(v110 + 75096));
                    if (v86 >= 1)
                    {
                      float v111 = *(int **)(v110 + 144);
                      long long v112 = (uint64_t *)(v38 + 2);
                      uint64_t v113 = v86;
                      do
                      {
                        int v114 = *v111++;
                        int v115 = v114;
                        uint64_t v116 = *v112;
                        v112 += 2;
                        *(_DWORD *)(v116 + 4 * v109) = v115;
                        --v113;
                      }
                      while (v113);
                    }
                    ++v109;
                  }
                  while (v109 < *(unsigned int *)(a6 + 64));
                }
              }
              else if (v101)
              {
                unint64_t v102 = 0;
                do
                {
                  uint64_t v103 = **(void **)(**(void **)(v37 + 8) + 696);
                  Phase::Controller::DVM_RT::RtUpdate(*(Phase::Controller::DVM_RT **)(v103 + 75096));
                  if (v86 >= 1)
                  {
                    uint64_t v104 = 0;
                    int v105 = 0;
                    uint64_t v106 = *(void *)(v103 + 144);
                    uint64_t v107 = *(void *)(v37 + 376);
                    uint64_t v108 = v38 + 2;
                    do
                    {
                      if (v104 == *(_DWORD *)(v107 + 4 * v105)) {
                        *(_DWORD *)(*v108 + 4 * v102) = *(_DWORD *)(v106 + 4 * v105++);
                      }
                      else {
                        *(_DWORD *)(*v108 + 4 * v102) = 0;
                      }
                      ++v104;
                      v108 += 2;
                    }
                    while (v86 != v104);
                  }
                  ++v102;
                }
                while (v102 < *(unsigned int *)(a6 + 64));
              }
            }
            if (v86 < 1)
            {
              *(unsigned char *)(a6 + 68) = 1;
              if (!v44) {
                goto LABEL_132;
              }
              goto LABEL_130;
            }
LABEL_123:
            __int16 v117 = (const float **)(v38 + 2);
            unint64_t v118 = 1;
            do
            {
              *(_DWORD *)__s = 0;
              vDSP_rmsqv(*v117, 1, (float *)__s, *(unsigned int *)(a6 + 64));
              float v119 = *(float *)__s;
              if (v118 >= v86) {
                break;
              }
              ++v118;
              v117 += 2;
            }
            while (*(float *)__s < 0.000015849);
            *(unsigned char *)(a6 + 68) = *(float *)__s < 0.000015849;
            if (!v44 || v119 >= 0.000015849) {
              goto LABEL_132;
            }
LABEL_130:
            int v120 = v38 + 2;
            do
            {
              bzero(*v120, *((unsigned int *)v120 - 1));
              v120 += 2;
              --v44;
            }
            while (v44);
            goto LABEL_132;
          }
        }
        else
        {
          uint64_t v39 = 0xFFFFFFFFLL;
        }
        strcpy(__s, "(%d): ");
        strcat(__s, "audioio@%p: invalid output ABL: %p / %d / %p");
        uint64_t v47 = Phase::Throttle::ShouldFire((Phase::Throttle *)(v37 + 16), 0);
        if (!v47) {
          return;
        }
        std::string::size_type v48 = (Phase::Logger *)snprintf(__str, 0x100uLL, __s, v47, v37, v38, v39, 0);
        uint64_t v49 = **(id **)(Phase::Logger::GetInstance(v48) + 528);
        if (!os_log_type_enabled(v49, OS_LOG_TYPE_ERROR)) {
          return;
        }
LABEL_51:
        *(_DWORD *)buf = 136315650;
        char v135 = "AudioIOBase.hpp";
        __int16 v136 = 1024;
        int v137 = 133;
        __int16 v138 = 2080;
        uint64_t v139 = __str;
        _os_log_impl(&dword_221E5E000, v49, OS_LOG_TYPE_ERROR, "%25s:%-5d %s", buf, 0x1Cu);
      }
    }
  }
}

void sub_221E850CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
}

void ___ZN5Phase10Controller13SystemAudioIO22AudioIOPlatformAdapter10InitializeEv_block_invoke_11(uint64_t a1, void *a2)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = a2;
  id v4 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v3)
                                                                                     + 528)));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    unsigned int v5 = [(Phase::Logger *)v3 description];
    unsigned int v6 = [v5 description];
    int v25 = 136315906;
    uint64_t v26 = "AudioIOPlatformAdapter.mm";
    __int16 v27 = 1024;
    int v28 = 895;
    __int16 v29 = 2048;
    uint64_t v30 = v2;
    __int16 v31 = 2112;
    int v32 = v6;
    _os_log_impl(&dword_221E5E000, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d audioio@%p: route change notification received with description \n%@", (uint8_t *)&v25, 0x26u);
  }
  unsigned int v7 = [(Phase::Logger *)v3 description];
  uint64_t v8 = [v7 objectForKeyedSubscript:@"beginning"];

  unsigned int v9 = [(Phase::Logger *)v3 description];
  int v10 = [v9 objectForKeyedSubscript:@"end"];

  uint64_t v11 = [(Phase::Logger *)v3 description];
  if ([v11 count] != 2 || !v8 || !v10)
  {

LABEL_11:
    unsigned int v19 = **(id **)(Phase::Logger::GetInstance(v14) + 528);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      int v25 = 136315394;
      uint64_t v26 = "AudioIOPlatformAdapter.mm";
      __int16 v27 = 1024;
      int v28 = 903;
      uint64_t v18 = "%25s:%-5d Invalid route change information received from PHASEPlatform";
      int v20 = v19;
      os_log_type_t v21 = OS_LOG_TYPE_ERROR;
      uint32_t v22 = 18;
LABEL_18:
      _os_log_impl(&dword_221E5E000, v20, v21, v18, (uint8_t *)&v25, v22);
      goto LABEL_19;
    }
    goto LABEL_19;
  }
  int v12 = [v8 BOOLValue];
  int v13 = [v10 BOOLValue];

  if (((v12 ^ v13) & 1) == 0) {
    goto LABEL_11;
  }
  uint64_t v15 = (Phase::Logger *)[v8 BOOLValue];
  if (v15)
  {
    uint32x4_t v16 = **(id **)(Phase::Logger::GetInstance(v15) + 528);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v17 = *(void *)(v2 + 40);
      int v25 = 136315650;
      uint64_t v26 = "AudioIOPlatformAdapter.mm";
      __int16 v27 = 1024;
      int v28 = 910;
      __int16 v29 = 2048;
      uint64_t v30 = v17;
      uint64_t v18 = "%25s:%-5d [AudioIOPlatformAdapter] Route change begin at timestamp %f";
LABEL_17:
      int v20 = v16;
      os_log_type_t v21 = OS_LOG_TYPE_DEFAULT;
      uint32_t v22 = 28;
      goto LABEL_18;
    }
  }
  else
  {
    BOOL v23 = Phase::Controller::VoiceManager::Implementation::AudioIOConfigChanged(**(Phase::Controller::VoiceManager::Implementation ***)(v2 + 8));
    if (v23) {
      atomic_fetch_add((atomic_uint *volatile)(v2 + 144), 1u);
    }
    uint32x4_t v16 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)v23) + 528);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v24 = *(void *)(v2 + 40);
      int v25 = 136315650;
      uint64_t v26 = "AudioIOPlatformAdapter.mm";
      __int16 v27 = 1024;
      int v28 = 922;
      __int16 v29 = 2048;
      uint64_t v30 = v24;
      uint64_t v18 = "%25s:%-5d [AudioIOPlatformAdapter] Route change end at timestamp %f";
      goto LABEL_17;
    }
  }
LABEL_19:
}

void sub_221E85438(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void Phase::Controller::SystemAudioIO::AudioIOPlatformAdapter::Uninitialize(Phase::Controller::SystemAudioIO::AudioIOPlatformAdapter *this)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (!*((unsigned char *)this + 352)) {
    return;
  }
  [*((id *)this + 43) registerRouteChangeNotification:0];
  (*(void (**)(Phase::Controller::SystemAudioIO::AudioIOPlatformAdapter *))(*(void *)this + 56))(this);
  [*((id *)this + 43) registerIOBlock:0];
  uint64_t v2 = std::__optional_destruct_base<CA::AudioBuffers,false>::reset[abi:ne180100]((uint64_t)this + 400);
  *((unsigned char *)this + 352) = 0;
  uint64_t v3 = *((void *)this + 53);
  if (v3)
  {
    if (AudioIssueDetectorLibraryLoader(void)::once != -1) {
      dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global_44);
    }
    if (off_267F74C88)
    {
      uint64_t v2 = off_267F74C88(v3);
      int v4 = v2;
      if (!v2)
      {
LABEL_11:
        *((unsigned char *)this + 432) = 0;
        goto LABEL_12;
      }
    }
    else
    {
      int v4 = -1;
    }
    unsigned int v5 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)v2) + 528);
    uint64_t v2 = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    if (v2)
    {
      int v8 = 136315906;
      unsigned int v9 = "AudioIOPlatformAdapter.mm";
      __int16 v10 = 1024;
      int v11 = 289;
      __int16 v12 = 2048;
      int v13 = this;
      __int16 v14 = 1024;
      int v15 = v4;
      _os_log_impl(&dword_221E5E000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d audioio@%p: failed to reset AID, err = %d", (uint8_t *)&v8, 0x22u);
    }
    goto LABEL_11;
  }
LABEL_12:
  uint64_t v6 = *((void *)this + 55);
  if (v6)
  {
    if (_MergedGlobals_13 != -1) {
      dispatch_once(&_MergedGlobals_13, &__block_literal_global);
    }
    if (off_267F778A0) {
      uint64_t v2 = off_267F778A0(v6);
    }
  }
  unsigned int v7 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)v2) + 528);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 136315650;
    unsigned int v9 = "AudioIOPlatformAdapter.mm";
    __int16 v10 = 1024;
    int v11 = 301;
    __int16 v12 = 2048;
    int v13 = this;
    _os_log_impl(&dword_221E5E000, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d audioio@%p: uninitialized", (uint8_t *)&v8, 0x1Cu);
  }
}

uint64_t std::__optional_destruct_base<CA::AudioBuffers,false>::reset[abi:ne180100](uint64_t result)
{
  if (*(unsigned char *)(result + 8))
  {
    uint64_t v1 = result;
    uint64_t result = ExtendedAudioBufferList_Destroy();
    *(unsigned char *)(v1 + 8) = 0;
  }
  return result;
}

uint64_t Phase::Controller::SystemAudioIO::AudioIOPlatformAdapter::Start(id *this)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  if ((*((unsigned __int8 *)this + 353) | 2) != 2) {
    return 0;
  }
  uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance((Phase::Logger *)this);
  if (*((unsigned char *)Instance + 536))
  {
    uint64_t v3 = (Phase::Logger *)objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(Instance)
                                                                                            + 528)));
    uint64_t v4 = Phase::Logger::GetInstance(v3);
    os_signpost_id_t v5 = os_signpost_id_generate(**(os_log_t **)(v4 + 528));
    if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      os_signpost_id_t v6 = v5;
      if (os_signpost_enabled((os_log_t)v3))
      {
        if (*((unsigned char *)this + 240)) {
          unsigned int v7 = "in";
        }
        else {
          unsigned int v7 = "-";
        }
        if (*((unsigned char *)this + 152)) {
          int v8 = "out";
        }
        else {
          int v8 = "-";
        }
        [this[31] sampleRate];
        uint64_t v10 = v9;
        int v11 = [this[31] channelCount];
        [this[20] sampleRate];
        uint64_t v13 = v12;
        int v14 = [this[20] channelCount];
        [this[32] sampleRate];
        uint64_t v16 = v15;
        int v17 = [this[32] channelCount];
        [this[21] sampleRate];
        uint64_t v19 = v18;
        int v20 = [this[21] channelCount];
        int v27 = 136317442;
        int v28 = v7;
        __int16 v29 = 2080;
        *(void *)uint64_t v30 = v8;
        *(_WORD *)&v30[8] = 2048;
        *(void *)&v30[10] = v10;
        *(_WORD *)&v30[18] = 1024;
        *(_DWORD *)__int16 v31 = v11;
        *(_WORD *)&v31[4] = 2048;
        uint64_t v32 = v13;
        __int16 v33 = 1024;
        int v34 = v14;
        __int16 v35 = 2048;
        uint64_t v36 = v16;
        __int16 v37 = 1024;
        int v38 = v17;
        __int16 v39 = 2048;
        uint64_t v40 = v19;
        __int16 v41 = 1024;
        int v42 = v20;
        _os_signpost_emit_with_name_impl(&dword_221E5E000, (os_log_t)v3, OS_SIGNPOST_EVENT, v6, "Phase_AudioIO_Start", "enable [%s, %s], hardware format [%.f/%d, %.f/%d], client format [%.f/%d, %.f/%d]", (uint8_t *)&v27, 0x56u);
      }
    }
  }
  Phase::Controller::SystemAudioIO::AudioIOBase::StartStopInternalCaptures((Phase::Controller::SystemAudioIO::AudioIOBase *)this, 1);
  os_log_type_t v21 = (Phase::Logger *)[this[43] start];
  if (v21)
  {
    uint64_t v22 = 0;
    *((unsigned char *)this + 353) = 1;
  }
  else
  {
    Phase::Controller::SystemAudioIO::AudioIOBase::StartStopInternalCaptures((Phase::Controller::SystemAudioIO::AudioIOBase *)this, 0);
    uint64_t v22 = 4294956433;
  }
  BOOL v23 = **(id **)(Phase::Logger::GetInstance(v21) + 528);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    int v24 = *((unsigned __int8 *)this + 240);
    int v25 = *((unsigned __int8 *)this + 152);
    int v27 = 136316418;
    int v28 = "AudioIOPlatformAdapter.mm";
    __int16 v29 = 1024;
    *(_DWORD *)uint64_t v30 = 333;
    *(_WORD *)&v30[4] = 2048;
    *(void *)&v30[6] = this;
    *(_WORD *)&v30[14] = 1024;
    *(_DWORD *)&v30[16] = v24;
    *(_WORD *)__int16 v31 = 1024;
    *(_DWORD *)&v31[2] = v25;
    LOWORD(v32) = 1024;
    *(_DWORD *)((char *)&v32 + 2) = v22;
    _os_log_impl(&dword_221E5E000, v23, OS_LOG_TYPE_DEFAULT, "%25s:%-5d audioio@%p: start IO (input %d, output %d), err %d", (uint8_t *)&v27, 0x2Eu);
  }
  return v22;
}

void sub_221E85A20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void Phase::Controller::SystemAudioIO::AudioIOPlatformAdapter::Pause(id *this)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (*((unsigned char *)this + 353) == 1)
  {
    uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance((Phase::Logger *)this);
    if (*((unsigned char *)Instance + 536))
    {
      uint64_t v3 = (Phase::Logger *)objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(Instance)
                                                                                              + 528)));
      uint64_t v4 = Phase::Logger::GetInstance(v3);
      os_signpost_id_t v5 = os_signpost_id_generate(**(os_log_t **)(v4 + 528));
      if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        os_signpost_id_t v6 = v5;
        if (os_signpost_enabled((os_log_t)v3))
        {
          LOWORD(v9) = 0;
          _os_signpost_emit_with_name_impl(&dword_221E5E000, (os_log_t)v3, OS_SIGNPOST_EVENT, v6, "Phase_AudioIO_Pause", (const char *)&unk_222112ABB, (uint8_t *)&v9, 2u);
        }
      }
    }
    [this[43] stop];
    if (*((unsigned char *)this + 104)) {
      *((unsigned char *)this + 104) = 0;
    }
    *((unsigned char *)this + 353) = 2;
    Phase::Controller::SystemAudioIO::AudioIOBase::StartStopInternalCaptures((Phase::Controller::SystemAudioIO::AudioIOBase *)this, 0);
    int v8 = **(id **)(Phase::Logger::GetInstance(v7) + 528);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 136315650;
      uint64_t v10 = "AudioIOPlatformAdapter.mm";
      __int16 v11 = 1024;
      int v12 = 349;
      __int16 v13 = 2048;
      int v14 = this;
      _os_log_impl(&dword_221E5E000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d audioio@%p: paused IO", (uint8_t *)&v9, 0x1Cu);
    }
  }
}

void sub_221E85BD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void Phase::Controller::SystemAudioIO::AudioIOPlatformAdapter::Stop(id *this)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (*((unsigned char *)this + 353) == 1)
  {
    uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance((Phase::Logger *)this);
    if (*((unsigned char *)Instance + 536))
    {
      uint64_t v3 = (Phase::Logger *)objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(Instance)
                                                                                              + 528)));
      uint64_t v4 = Phase::Logger::GetInstance(v3);
      os_signpost_id_t v5 = os_signpost_id_generate(**(os_log_t **)(v4 + 528));
      if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        os_signpost_id_t v6 = v5;
        if (os_signpost_enabled((os_log_t)v3))
        {
          LOWORD(v9) = 0;
          _os_signpost_emit_with_name_impl(&dword_221E5E000, (os_log_t)v3, OS_SIGNPOST_EVENT, v6, "Phase_AudioIO_Stop", (const char *)&unk_222112ABB, (uint8_t *)&v9, 2u);
        }
      }
    }
    [this[43] stop];
    if (*((unsigned char *)this + 104)) {
      *((unsigned char *)this + 104) = 0;
    }
    if (*((unsigned char *)this + 120)) {
      *((unsigned char *)this + 120) = 0;
    }
    Phase::Controller::SystemAudioIO::AudioIOBase::StartStopInternalCaptures((Phase::Controller::SystemAudioIO::AudioIOBase *)this, 0);
    int v8 = **(id **)(Phase::Logger::GetInstance(v7) + 528);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 136315650;
      uint64_t v10 = "AudioIOPlatformAdapter.mm";
      __int16 v11 = 1024;
      int v12 = 364;
      __int16 v13 = 2048;
      int v14 = this;
      _os_log_impl(&dword_221E5E000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d audioio@%p: stopped IO", (uint8_t *)&v9, 0x1Cu);
    }
  }
  *((unsigned char *)this + 353) = 0;
}

void sub_221E85D84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id Phase::Controller::SystemAudioIO::AudioIOPlatformAdapter::GetHWFormat(id *this, int a2)
{
  uint64_t v2 = [this[43] streamInfoForIndex:0 direction:a2 == 1];
  uint64_t v3 = v2;
  if (v2)
  {
    uint64_t v4 = [v2 format];
  }
  else
  {
    uint64_t v4 = 0;
  }

  return v4;
}

void sub_221E85E08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::SystemAudioIO::AudioIOPlatformAdapter::UpdateFormats(Phase::Controller::SystemAudioIO::AudioIOPlatformAdapter *this, unsigned int a2)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  os_signpost_id_t v5 = (char *)this + 152;
  uint64_t v4 = *(void *)this;
  os_signpost_id_t v6 = (char *)this + 88 * a2 + 152;
  *((_DWORD *)v6 + 1) = a2;
  uint64_t v7 = (*(void (**)(void))(v4 + 136))();
  int v8 = (void *)*((void *)v6 + 1);
  *((void *)v6 + 1) = v7;

  int v9 = (id *)(v6 + 16);
  objc_storeStrong((id *)v6 + 2, *((id *)v6 + 1));
  BOOL IsValidFormat = (Phase::Logger *)*((void *)v6 + 1);
  if (IsValidFormat
    && (BOOL IsValidFormat = (Phase::Logger *)Phase::Controller::SystemAudioIO::IsValidFormat(IsValidFormat, v10),
        (IsValidFormat & 1) != 0))
  {
    if (!*v9) {
      std::terminate();
    }
    uint64_t v12 = [*v9 streamDescription];
    uint64_t result = 0;
    int v14 = &v5[88 * a2];
    uint64_t v15 = *(void *)(v12 + 32);
    long long v16 = *(_OWORD *)(v12 + 16);
    *(_OWORD *)(v14 + 24) = *(_OWORD *)v12;
    *(_OWORD *)(v14 + 40) = v16;
    *((void *)v14 + 7) = v15;
  }
  else
  {
    int v17 = **(id **)(Phase::Logger::GetInstance(IsValidFormat) + 528);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = "output";
      int v20 = "AudioIOPlatformAdapter.mm";
      __int16 v21 = 1024;
      int v22 = 388;
      int v19 = 136315906;
      if (a2 == 1) {
        uint64_t v18 = "input";
      }
      __int16 v23 = 2048;
      int v24 = this;
      __int16 v25 = 2080;
      uint64_t v26 = v18;
      _os_log_impl(&dword_221E5E000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d audioio@%p: error: invalid %s HW format!", (uint8_t *)&v19, 0x26u);
    }
    return 4294956433;
  }
  return result;
}

uint64_t Phase::Controller::SystemAudioIO::AudioIOPlatformAdapter::IsRunning(id *this)
{
  if (*((unsigned char *)this + 353) == 1) {
    return [this[43] running];
  }
  else {
    return 0;
  }
}

uint64_t Phase::Controller::SystemAudioIO::AudioIOPlatformAdapter::GetInputChannelCount(id *this)
{
  uint64_t v1 = [this[43] streamInfoForIndex:0 direction:1];
  uint64_t v2 = [v1 format];
  uint64_t v3 = [v2 channelCount];

  return v3;
}

void sub_221E86038(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::SystemAudioIO::AudioIOPlatformAdapter::GetOutputChannelCount(id *this)
{
  uint64_t v1 = [this[43] streamInfoForIndex:0 direction:0];
  uint64_t v2 = [v1 format];
  uint64_t v3 = [v2 channelCount];

  return v3;
}

void sub_221E860B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id Phase::Controller::SystemAudioIO::AudioIOPlatformAdapter::GetOutputChannelLayout(id *this)
{
  uint64_t v1 = [this[43] streamInfoForIndex:0 direction:0];
  uint64_t v2 = [v1 format];
  uint64_t v4 = Phase::Controller::SystemAudioIO::GetOutputChannelLayout(v2, v3);

  return v4;
}

void sub_221E8613C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void Phase::Controller::SystemAudioIO::AudioIOPlatformAdapter::GetCurrentOutputRoute(id *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = [this[43] streamInfoForIndex:0 direction:0];
  Phase::Controller::SystemAudioIO::AudioIOBase::GetRenderedChannelLayout((Phase::Controller::SystemAudioIO::AudioIOBase *)this, &__p);
  Phase::Controller::AudioRouteDescription::AudioRouteDescription(a2, v4, (uint64_t)&__p);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
}

void sub_221E861D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::SystemAudioIO::AudioIOPlatformAdapter::GetSampleRate(id *this)
{
  return [this[43] sampleRate];
}

uint64_t Phase::Controller::SystemAudioIO::AudioIOPlatformAdapter::GetMaximumFramesToRender(id *this)
{
  return [this[43] bufferFrameSize];
}

uint64_t Phase::Controller::SystemAudioIO::AudioIOPlatformAdapter::GetLastFrameCount(Phase::Controller::SystemAudioIO::AudioIOPlatformAdapter *this)
{
  if (*((void *)this + 52) <= 1uLL) {
    return 1;
  }
  else {
    return *((void *)this + 52);
  }
}

id Phase::Controller::SystemAudioIO::AudioIOPlatformAdapter::CopyWorkGroup(id *this)
{
  if (objc_opt_respondsToSelector())
  {
    uint64_t v2 = [this[43] workgroup];
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

void Phase::Controller::SystemAudioIO::AudioIOBase::IOProcError<Phase::Controller::SystemAudioIO::AudioIOPlatformAdapter *,unsigned int const&>(uint64_t a1, const char *a2, void *a3, unsigned int *a4)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  strcpy(__s1, "(%d): ");
  strcat(__s1, a2);
  uint64_t ShouldFire = Phase::Throttle::ShouldFire((Phase::Throttle *)(a1 + 16), 0);
  if (ShouldFire)
  {
    int v8 = (Phase::Logger *)snprintf(__str, 0x100uLL, __s1, ShouldFire, *a3, *a4);
    int v9 = **(id **)(Phase::Logger::GetInstance(v8) + 528);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      __int16 v11 = "AudioIOBase.hpp";
      __int16 v12 = 1024;
      int v13 = 133;
      __int16 v14 = 2080;
      uint64_t v15 = __str;
      _os_log_impl(&dword_221E5E000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d %s", buf, 0x1Cu);
    }
  }
}

void *___Z28AudioStatisticsLibraryLoaderv_block_invoke()
{
  uint64_t result = dlopen("/usr/lib/libAudioStatistics.dylib", 1);
  if (result)
  {
    uint64_t v1 = result;
    qword_267F77878 = (uint64_t)dlsym(result, "CreateSharedCAReportingClient");
    off_267F77880 = dlsym(v1, "CAReportingClientCreateReporterID");
    qword_267F77888 = (uint64_t)dlsym(v1, "CAReportingClientCreateReporterIDFromSessionID");
    qword_267F77890 = (uint64_t)dlsym(v1, "CAReportingClientCreatePerformanceReporterID");
    off_267F77898 = dlsym(v1, "CAReportingClientStartReporter");
    off_267F778A0 = (uint64_t (*)(void))dlsym(v1, "CAReportingClientStopReporter");
    off_267F778A8 = dlsym(v1, "CAReportingClientSetAudioServiceType");
    qword_267F778B0 = (uint64_t)dlsym(v1, "CAReportingClientGetAudioServiceType");
    qword_267F778B8 = (uint64_t)dlsym(v1, "CAReportingClientSetConfiguration");
    qword_267F778C0 = (uint64_t)dlsym(v1, "CAReportingClientCopyConfiguration");
    qword_267F778C8 = (uint64_t)dlsym(v1, "CAReportingClientSendMessage");
    qword_267F778D0 = (uint64_t)dlsym(v1, "CAReportingClientSendSingleMessage");
    off_267F778D8 = (uint64_t (*)(void))dlsym(v1, "CAReportingClientDestroyReporterID");
    uint64_t result = dlsym(v1, "CAReportingClientRequestMessage");
    qword_267F778E0 = (uint64_t)result;
  }
  return result;
}

void *___Z31AudioIssueDetectorLibraryLoaderv_block_invoke()
{
  uint64_t v0 = dlopen("/usr/lib/libAudioIssueDetector.dylib", 1);
  if (v0 || (uint64_t v0 = dlopen("/usr/local/lib/libAudioIssueDetector.dylib", 1)) != 0)
  {
    AudioIssueDetectorLibraryLoader(void)::libSyuint64_t m = dlsym(v0, "AudioIssueDetectorCreate");
    off_267F74C68 = dlsym(v0, "AudioIssueDetectorInitialize");
    off_267F74C70 = (uint64_t (*)(void))dlsym(v0, "AudioIssueDetectorDispose");
    qword_267F74C78 = (uint64_t)dlsym(v0, "AudioIssueDetectorSetNodeFormat");
    off_267F74C80 = dlsym(v0, "AudioIssueDetectorSetNodeFormatWithDirection");
    off_267F74C88 = (uint64_t (*)(void))dlsym(v0, "AudioIssueDetectorReset");
    off_267F74C90 = (uint64_t (*)(void, void, void, void, void, void))dlsym(v0, "AudioIssueDetectorAnalyzeBuffer");
    qword_267F74C98 = (uint64_t)dlsym(v0, "AudioIssueDetectorUpdateReportingSessions");
    qword_267F74CA0 = (uint64_t)dlsym(v0, "AudioIssueDetectorRemoveNode");
    qword_267F74CA8 = (uint64_t)dlsym(v0, "AudioIssueDetectorSetUplinkMute");
    qword_267F74CB0 = (uint64_t)dlsym(v0, "AudioIssueDetectorSetDownlinkVolume");
    qword_267F74CB8 = (uint64_t)dlsym(v0, "AudioIssueDetectorSetRouteSpecificDownlinkGainAdjustment");
    qword_267F74CC0 = (uint64_t)dlsym(v0, "AudioIssueDetectorSetSmartCaseMicMute");
  }
  uint64_t result = dlopen("/System/Library/Frameworks/AudioToolbox.framework/libAudioDSP.dylib", 1);
  if (result)
  {
    uint64_t result = dlsym(result, "RegisterAudioUnits_Analyzer");
    if (result)
    {
      return (void *)((uint64_t (*)(void))result)();
    }
  }
  return result;
}

uint64_t std::__optional_destruct_base<CA::AudioBuffers,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    ExtendedAudioBufferList_Destroy();
  }
  return a1;
}

void caulk::make_string(caulk *this@<X0>, uint64_t a2@<X8>, ...)
{
  va_start(va, a2);
  int v5 = vsnprintf(0, 0, (const char *)this, va);
  if (v5 <= 0)
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  else
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    std::string::resize((std::string *)a2, (v5 + 1), 0);
    int v6 = *(char *)(a2 + 23);
    if (v6 >= 0) {
      uint64_t v7 = (char *)a2;
    }
    else {
      uint64_t v7 = *(char **)a2;
    }
    if (v6 >= 0) {
      size_t v8 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      size_t v8 = *(void *)(a2 + 8);
    }
    int v9 = vsnprintf(v7, v8, (const char *)this, va);
    std::string::resize((std::string *)a2, v9, 0);
  }
}

uint64_t Phase::Controller::AudioRouteDescription::AudioRouteDescription(uint64_t a1, void *a2, uint64_t a3)
{
  *(void *)a1 = a2;
  *(_DWORD *)(a1 + 8) = 2;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>((void *)(a1 + 16), *(const void **)a3, *(void *)(a3 + 8), *(void *)(a3 + 8) - *(void *)a3);
  return a1;
}

void sub_221E867E0(_Unwind_Exception *a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,unsigned int,objc_object * {__strong}>,(std::__variant_detail::_Trait)1>::~__dtor(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,unsigned int,objc_object * {__strong}>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26D471BD8[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 8) = -1;
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEjU8__strongP11objc_objectEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS8_jSB_EEEEEEDcSF_DpT0_(uint64_t a1, id *a2)
{
}

CA::AudioBuffers *CA::AudioBuffers::AudioBuffers(CA::AudioBuffers *a1, uint64_t a2)
{
  *(void *)a1 = a2;
  if (!a2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "ExtendedAudioBufferList_CreateWithFormat failed");
  }
  CA::AudioBuffers::Prepare(a1);
  return a1;
}

void sub_221E868D4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t CA::AudioBuffers::Prepare(CA::AudioBuffers *this)
{
  uint64_t result = ExtendedAudioBufferList_Prepare();
  if (!result)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "ExtendedAudioBufferList_Prepare failed");
  }
  return result;
}

void sub_221E86948(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::vector<int>::__throw_length_error[abi:ne180100]()
{
}

uint64_t Phase::Throttle::ShouldFire(Phase::Throttle *this, double *a2)
{
  uint64_t v4 = mach_absolute_time();
  uint64_t v5 = *((void *)this + 1);
  if (!v5)
  {
    *((void *)this + 1) = v4;
    uint64_t v5 = v4;
  }
  uint64_t v6 = v4 - v5;
  if (a2) {
    *a2 = (double)v6 * 0.0000000416666667;
  }
  if ((unint64_t)v6 >= *(void *)this)
  {
    *((void *)this + 1) = v4;
    uint64_t result = (*((_DWORD *)this + 4) + 1);
    *((_DWORD *)this + 4) = 0;
  }
  else
  {
    uint64_t result = 0;
    ++*((_DWORD *)this + 4);
  }
  return result;
}

void Phase::Controller::SystemAudioIO::AudioIOUnit::AudioIOUnit(Phase::Controller::SystemAudioIO::AudioIOUnit *this, Phase::Controller::VoiceManager *a2, double a3)
{
  *(void *)this = &unk_26D471A58;
  *((void *)this + 1) = a2;
  *((_OWORD *)this + 1) = xmmword_2220A5010;
  *((_DWORD *)this + 8) = 0;
  *((unsigned char *)this + 40) = 0;
  *((unsigned char *)this + 104) = 0;
  *((unsigned char *)this + 112) = 0;
  *((unsigned char *)this + 120) = 0;
  *((unsigned char *)this + 128) = 0;
  *((unsigned char *)this + 136) = 0;
  *((_DWORD *)this + 36) = 0;
  std::array<Phase::Controller::SystemAudioIO::AudioIOBase::IOConfiguration,2ul>::array((uint64_t)this + 152);
  *((_DWORD *)this + 82) = 0;
  *(void *)this = &unk_26D471C00;
  *((double *)this + 42) = a3;
  *((void *)this + 43) = 0;
  *((void *)this + 44) = 0;
  *((unsigned char *)this + 360) = 0;
  operator new();
}

void sub_221E86B08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<Phase::Controller::SystemAudioIO::Implementation>::reset[abi:ne180100]((id **)va, 0);

  Phase::Controller::SystemAudioIO::AudioIOBase::~AudioIOBase((Phase::Controller::SystemAudioIO::AudioIOBase *)v2);
  _Unwind_Resume(a1);
}

void Phase::Controller::SystemAudioIO::AudioIOUnit::~AudioIOUnit(id *this)
{
  *this = &unk_26D471C00;
  Phase::Controller::SystemAudioIO::AudioIOUnit::Cleanup((Phase::Controller::SystemAudioIO::AudioIOUnit *)this);
  uint64_t v2 = (std::__shared_weak_count *)this[47];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  Phase::Controller::SystemAudioIO::AudioIOBase::~AudioIOBase((Phase::Controller::SystemAudioIO::AudioIOBase *)this);
}

{
  uint64_t vars8;

  Phase::Controller::SystemAudioIO::AudioIOUnit::~AudioIOUnit(this);

  JUMPOUT(0x223C938A0);
}

OpaqueAudioComponentInstance *Phase::Controller::SystemAudioIO::AudioIOUnit::Cleanup(Phase::Controller::SystemAudioIO::AudioIOUnit *this)
{
  uint64_t v2 = (void *)*((void *)this + 44);
  if (v2)
  {
    [v2 stopHardware];
    [*((id *)this + 44) deallocateRenderResources];
    [*((id *)this + 44) invalidateAudioUnit];
    uint64_t v3 = (void *)*((void *)this + 44);
    *((void *)this + 44) = 0;
  }
  uint64_t result = (OpaqueAudioComponentInstance *)*((void *)this + 43);
  if (result)
  {
    uint64_t result = (OpaqueAudioComponentInstance *)AudioComponentInstanceDispose(result);
    *((void *)this + 43) = 0;
  }
  return result;
}

uint64_t Phase::Controller::SystemAudioIO::AudioIOUnit::EnableBus(Phase::Controller::SystemAudioIO::AudioIOUnit *this, unsigned int a2, int a3)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (a2 >= 2) {
    std::terminate();
  }
  uint64_t v6 = *((void *)this + 44);
  if (v6)
  {
    uint64_t v6 = [(id)v6 renderResourcesAllocated];
    if (v6) {
      return 4294956447;
    }
  }
  *((unsigned char *)this + 88 * a2 + 152) = a3;
  size_t v8 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)v6) + 528);
  BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0;
  if (v9)
  {
    uint64_t v10 = "Disabled";
    __int16 v12 = "AudioIOUnit.mm";
    int v14 = 328;
    __int16 v15 = 2080;
    int v11 = 136315906;
    __int16 v13 = 1024;
    if (a3) {
      uint64_t v10 = "Enabled";
    }
    long long v16 = v10;
    __int16 v17 = 1024;
    unsigned int v18 = a2;
    _os_log_impl(&dword_221E5E000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s bus %d for Audio IO.", (uint8_t *)&v11, 0x22u);
    return 0;
  }
  return result;
}

uint64_t Phase::Controller::SystemAudioIO::AudioIOUnit::Initialize(Phase::Controller::SystemAudioIO::AudioIOUnit *this)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  uint64_t v2 = (void *)*((void *)this + 44);
  if (!v2 || ([v2 renderResourcesAllocated] & 1) == 0)
  {
    if (*((void *)this + 43))
    {
      uint64_t v4 = (void *)*((void *)this + 44);
      if (v4)
      {
LABEL_6:
        [v4 setOutputEnabled:*((unsigned __int8 *)this + 152)];
        [*((id *)this + 44) setInputEnabled:*((unsigned __int8 *)this + 240)];
        uint64_t v5 = (void *)*((void *)this + 44);
        id v46 = 0;
        [v5 allocateRenderResourcesAndReturnError:&v46];
        id v6 = v46;
        uint64_t v7 = v6;
        if (v6)
        {
          uint64_t v3 = [v6 code];
LABEL_50:

          return v3;
        }
        if (*((unsigned char *)this + 152))
        {
          int v11 = (Phase::Logger *)[*((id *)this + 44) isOutputEnabled];
          if ((v11 & 1) == 0)
          {
            int v20 = **(id **)(Phase::Logger::GetInstance(v11) + 528);
            if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315650;
              *(void *)&uint8_t buf[4] = "AudioIOUnit.mm";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 370;
              *(_WORD *)&unsigned char buf[18] = 2048;
              *(void *)&buf[20] = this;
              __int16 v21 = "%25s:%-5d audioio@%p: output is not enabled on the IOUnit!";
LABEL_30:
              _os_log_impl(&dword_221E5E000, v20, OS_LOG_TYPE_ERROR, v21, buf, 0x1Cu);
            }
LABEL_31:
            uint64_t v3 = 4294956420;
            goto LABEL_50;
          }
          uint64_t v3 = (*(uint64_t (**)(Phase::Controller::SystemAudioIO::AudioIOUnit *, void))(*(void *)this
                                                                                                  + 144))(this, 0);
          if (v3) {
            goto LABEL_50;
          }
          Phase::Controller::SystemAudioIO::AudioIOUnit::SetOutputProvider(this);
        }
        if (!*((unsigned char *)this + 240)) {
          goto LABEL_21;
        }
        __int16 v12 = (Phase::Logger *)[*((id *)this + 44) isInputEnabled];
        if (v12)
        {
          uint64_t v3 = (*(uint64_t (**)(Phase::Controller::SystemAudioIO::AudioIOUnit *, uint64_t))(*(void *)this + 144))(this, 1);
          if (v3) {
            goto LABEL_50;
          }
          Phase::Controller::SystemAudioIO::AudioIOUnit::SetInputHandler(this);
LABEL_21:
          __int16 v13 = (*(void (**)(Phase::Controller::SystemAudioIO::AudioIOUnit *, void))(*(void *)this + 136))(this, 0);
          (*(void (**)(Phase::Controller::SystemAudioIO::AudioIOUnit *))(*(void *)this + 88))(this);
          int v14 = (Phase::Logger *)objc_claimAutoreleasedReturnValue();
          __int16 v15 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v14)
                                                                                              + 528)));
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
            if (v13)
            {
              uint64_t v16 = [v13 streamDescription];
              long long v17 = *(_OWORD *)v16;
              int16x8_t v18 = *(int16x8_t *)(v16 + 16);
              uint64_t v50 = *(void *)(v16 + 32);
              *(_OWORD *)buf = v17;
              *(int16x8_t *)&uint8_t buf[16] = v18;
              uint64_t v19 = v44;
              CA::StreamDescription::AsString((CA::StreamDescription *)buf, (uint64_t)v44, v18);
              if (v45 < 0) {
                uint64_t v19 = (void **)v44[0];
              }
            }
            else
            {
              uint64_t v19 = (void **)"invalid";
            }
            if (v14)
            {
              int v22 = (Phase::ChannelLayout *)[(Phase::Logger *)v14 layout];
              Phase::ChannelLayout::GetStringDescription(v22, v23);
              if (v43 >= 0) {
                p_p = &__p;
              }
              else {
                p_p = __p;
              }
              *(_DWORD *)uint64_t v47 = 136315906;
              *(void *)&v47[4] = "AudioIOUnit.mm";
              *(_WORD *)&v47[12] = 1024;
              *(_DWORD *)&v47[14] = 403;
              *(_WORD *)&v47[18] = 2080;
              *(void *)&v47[20] = v19;
              *(_WORD *)&v47[28] = 2080;
              *(void *)&v47[30] = p_p;
              _os_log_impl(&dword_221E5E000, v15, OS_LOG_TYPE_DEFAULT, "%25s:%-5d initialized: output asbd <%s>, channel layout: \n%s", v47, 0x26u);
              if (v43 < 0) {
                operator delete(__p);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v47 = 136315906;
              *(void *)&v47[4] = "AudioIOUnit.mm";
              *(_WORD *)&v47[12] = 1024;
              *(_DWORD *)&v47[14] = 403;
              *(_WORD *)&v47[18] = 2080;
              *(void *)&v47[20] = v19;
              *(_WORD *)&v47[28] = 2080;
              *(void *)&v47[30] = "None";
              _os_log_impl(&dword_221E5E000, v15, OS_LOG_TYPE_DEFAULT, "%25s:%-5d initialized: output asbd <%s>, channel layout: \n%s", v47, 0x26u);
            }
            if (v13 && v45 < 0) {
              operator delete(v44[0]);
            }
          }

          __int16 v25 = (uint64_t *)*((void *)this + 46);
          uint64_t v26 = (std::__shared_weak_count *)v25[1];
          if (!v26 || (v27 = *v25, (int v28 = std::__shared_weak_count::lock(v26)) == 0)) {
            std::__throw_bad_weak_ptr[abi:ne180100]();
          }
          __int16 v29 = v28;
          p_shared_weak_owners = &v28->__shared_weak_owners_;
          atomic_fetch_add_explicit(&v28->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          std::__shared_weak_count::__release_shared[abi:ne180100](v28);
          __int16 v31 = [MEMORY[0x263F08A00] defaultCenter];
          uint64_t v32 = *MEMORY[0x263EF9248];
          uint64_t v33 = v25[3];
          *(void *)buf = MEMORY[0x263EF8330];
          *(void *)&buf[8] = 3321888768;
          *(void *)&uint8_t buf[16] = ___ZN5Phase10Controller13SystemAudioIO14Implementation10InitializeEv_block_invoke;
          *(void *)&uint8_t buf[24] = &__block_descriptor_48_ea8_32c74_ZTSNSt3__18weak_ptrIN5Phase10Controller13SystemAudioIO14ImplementationEEE_e24_v16__0__NSNotification_8l;
          uint64_t v50 = v27;
          int v51 = v29;
          atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
          uint64_t v34 = [v31 addObserverForName:v32 object:v33 queue:0 usingBlock:buf];
          __int16 v35 = (void *)v25[4];
          v25[4] = v34;

          uint64_t v36 = [MEMORY[0x263F08A00] defaultCenter];
          uint64_t v37 = *MEMORY[0x263EF90A0];
          uint64_t v38 = v25[3];
          *(void *)uint64_t v47 = MEMORY[0x263EF8330];
          *(void *)&v47[8] = 3321888768;
          *(void *)&v47[16] = ___ZN5Phase10Controller13SystemAudioIO14Implementation10InitializeEv_block_invoke_67;
          *(void *)&v47[24] = &__block_descriptor_48_ea8_32c74_ZTSNSt3__18weak_ptrIN5Phase10Controller13SystemAudioIO14ImplementationEEE_e24_v16__0__NSNotification_8l;
          *(void *)&v47[32] = v27;
          std::string::size_type v48 = v29;
          atomic_fetch_add_explicit(&v29->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          uint64_t v39 = [v36 addObserverForName:v37 object:v38 queue:0 usingBlock:v47];
          uint64_t v40 = (void *)v25[5];
          v25[5] = v39;

          if (v48) {
            std::__shared_weak_count::__release_weak(v48);
          }
          if (v51) {
            std::__shared_weak_count::__release_weak(v51);
          }
          std::__shared_weak_count::__release_weak(v29);

          uint64_t v3 = 0;
          goto LABEL_50;
        }
        int v20 = **(id **)(Phase::Logger::GetInstance(v12) + 528);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "AudioIOUnit.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 388;
          *(_WORD *)&unsigned char buf[18] = 2048;
          *(void *)&buf[20] = this;
          __int16 v21 = "%25s:%-5d audioio@%p: input is not enabled on the IOUnit!";
          goto LABEL_30;
        }
        goto LABEL_31;
      }
    }
    Next = AudioComponentFindNext(0, (const AudioComponentDescription *)"uouacoirlppa");
    if (Next)
    {
      uint64_t v3 = AudioComponentInstanceNew(Next, (AudioComponentInstance *)this + 43);
      if (v3)
      {
LABEL_12:
        Phase::Controller::SystemAudioIO::AudioIOUnit::Cleanup(this);
        return v3;
      }
      uint64_t v9 = [MEMORY[0x263EFC0A8] auAudioUnitForAudioUnit:*((void *)this + 43)];
      uint64_t v10 = (void *)*((void *)this + 44);
      *((void *)this + 44) = v9;

      uint64_t v4 = (void *)*((void *)this + 44);
      if (v4) {
        goto LABEL_6;
      }
    }
    uint64_t v3 = 4294956421;
    goto LABEL_12;
  }
  return 0;
}

void sub_221E873CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31)
{
  _Unwind_Resume(a1);
}

void Phase::Controller::SystemAudioIO::AudioIOUnit::SetOutputProvider(Phase::Controller::SystemAudioIO::AudioIOUnit *this)
{
  uint64_t v2 = (void *)*((void *)this + 44);
  if (!v2 || ([v2 isOutputEnabled] & 1) == 0) {
    goto LABEL_34;
  }
  v26[0] = 0;
  v26[1] = v26;
  v26[2] = 0x2020000000;
  v26[3] = (char *)this + 40;
  v25[0] = 0;
  v25[1] = v25;
  v25[2] = 0x2020000000;
  uint64_t v3 = *(void *)this;
  v25[3] = *((void *)this + 1);
  v24[0] = 0;
  v24[1] = v24;
  v24[2] = 0x2020000000;
  v24[3] = (char *)this + 152;
  (*(void (**)(Phase::Controller::SystemAudioIO::AudioIOUnit *))(v3 + 88))(this);
  uint64_t v4 = (Phase::Controller::SystemAudioIO *)objc_claimAutoreleasedReturnValue();
  unint64_t RenderedChannels = Phase::Controller::SystemAudioIO::GetRenderedChannels(v4, v5);
  if (v4)
  {
    uint64_t v7 = (_DWORD *)[(Phase::Controller::SystemAudioIO *)v4 layout];
    unsigned int v8 = v7[2];
    if (v8 <= 1) {
      unsigned int v8 = 1;
    }
    std::vector<char>::vector(&v23, 20 * v8 + 12);
    memcpy(v23.__begin_, v7, 20 * v7[2] + 12);
    int NumActiveChannels = Phase::ChannelLayout::GetNumActiveChannels((int **)&v23, RenderedChannels);
    if (v23.__begin_)
    {
      v23.__end_ = v23.__begin_;
      operator delete(v23.__begin_);
    }
  }
  else
  {
    int NumActiveChannels = 0;
  }
  unint64_t v10 = 0;
  memset(&v23, 0, sizeof(v23));
  while (v10 < (*(unsigned int (**)(Phase::Controller::SystemAudioIO::AudioIOUnit *))(*(void *)this + 80))(this))
  {
    if ((RenderedChannels >> v10))
    {
      std::vector<char>::pointer end = v23.__end_;
      if (v23.__end_ >= v23.__end_cap_.__value_)
      {
        std::vector<char>::pointer begin = v23.__begin_;
        int64_t v14 = (v23.__end_ - v23.__begin_) >> 2;
        unint64_t v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        int64_t v16 = v23.__end_cap_.__value_ - v23.__begin_;
        if ((v23.__end_cap_.__value_ - v23.__begin_) >> 1 > v15) {
          unint64_t v15 = v16 >> 1;
        }
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v15;
        }
        if (v17)
        {
          int16x8_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v23.__end_cap_, v17);
          std::vector<char>::pointer begin = v23.__begin_;
          std::vector<char>::pointer end = v23.__end_;
        }
        else
        {
          int16x8_t v18 = 0;
        }
        uint64_t v19 = &v18[4 * v14];
        *(_DWORD *)uint64_t v19 = v10;
        __int16 v12 = v19 + 4;
        while (end != begin)
        {
          int v20 = *((_DWORD *)end - 1);
          end -= 4;
          *((_DWORD *)v19 - 1) = v20;
          v19 -= 4;
        }
        v23.__begin_ = v19;
        v23.__end_ = v12;
        v23.__end_cap_.__value_ = &v18[4 * v17];
        if (begin) {
          operator delete(begin);
        }
      }
      else
      {
        *(_DWORD *)v23.__end_ = v10;
        __int16 v12 = end + 4;
      }
      v23.__end_ = v12;
    }
    ++v10;
  }
  if (NumActiveChannels != (v23.__end_ - v23.__begin_) >> 2) {
LABEL_34:
  }
    std::terminate();
  v21[0] = MEMORY[0x263EF8330];
  v21[1] = 3221225472;
  v21[2] = ___ZN5Phase10Controller13SystemAudioIO11AudioIOUnit17SetOutputProviderEv_block_invoke;
  v21[3] = &unk_2645F6F68;
  int v22 = NumActiveChannels;
  v21[4] = v26;
  v21[5] = v25;
  _DWORD v21[7] = this;
  v21[8] = RenderedChannels;
  void v21[6] = v24;
  [*((id *)this + 44) setOutputProvider:v21];
  if (v23.__begin_)
  {
    v23.__end_ = v23.__begin_;
    operator delete(v23.__begin_);
  }

  _Block_object_dispose(v24, 8);
  _Block_object_dispose(v25, 8);
  _Block_object_dispose(v26, 8);
}

void sub_221E87780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (__p) {
    operator delete(__p);
  }

  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v28 - 112), 8);
  _Unwind_Resume(a1);
}

void Phase::Controller::SystemAudioIO::AudioIOUnit::SetInputHandler(Phase::Controller::SystemAudioIO::AudioIOUnit *this)
{
  uint64_t v2 = (void *)*((void *)this + 44);
  if (!v2) {
    goto LABEL_6;
  }
  if (([v2 isInputEnabled] & 1) == 0) {
    goto LABEL_6;
  }
  v9[0] = 0;
  v9[1] = v9;
  v9[2] = 0x2020000000;
  v9[3] = (char *)this + 240;
  v8[0] = 0;
  v8[1] = v8;
  void v8[2] = 0x2020000000;
  void v8[3] = *((void *)this + 1);
  int v3 = *((_DWORD *)this + 73);
  if (!v3 || (int v4 = *((_DWORD *)this + 72)) == 0) {
LABEL_6:
  }
    std::terminate();
  v5[0] = MEMORY[0x263EF8330];
  v5[1] = 3221225472;
  void v5[2] = ___ZN5Phase10Controller13SystemAudioIO11AudioIOUnit15SetInputHandlerEv_block_invoke;
  v5[3] = &unk_2645F6F90;
  int v6 = v3;
  int v7 = v4;
  v5[4] = v9;
  void v5[5] = v8;
  v5[6] = this;
  [*((id *)this + 44) setInputHandler:v5];
  _Block_object_dispose(v8, 8);
  _Block_object_dispose(v9, 8);
}

void sub_221E878D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

void Phase::Controller::SystemAudioIO::AudioIOUnit::Uninitialize(Phase::Controller::SystemAudioIO::AudioIOUnit *this)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v2 = (void *)*((void *)this + 44);
  if (v2)
  {
    uint64_t v2 = (void *)[v2 renderResourcesAllocated];
    if (v2)
    {
      uint64_t v3 = *((void *)this + 46);
      int v4 = [MEMORY[0x263F08A00] defaultCenter];
      [v4 removeObserver:*(void *)(v3 + 32)];

      uint64_t v5 = *(void **)(v3 + 32);
      *(void *)(v3 + 32) = 0;

      int v6 = [MEMORY[0x263F08A00] defaultCenter];
      [v6 removeObserver:*(void *)(v3 + 40)];

      int v7 = *(void **)(v3 + 40);
      *(void *)(v3 + 40) = 0;

      [*((id *)this + 44) stopHardware];
      uint64_t v2 = (void *)[*((id *)this + 44) deallocateRenderResources];
    }
  }
  unsigned int v8 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)v2) + 528);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 136315394;
    unint64_t v10 = "AudioIOUnit.mm";
    __int16 v11 = 1024;
    int v12 = 420;
    _os_log_impl(&dword_221E5E000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Uninitialized audio IO", (uint8_t *)&v9, 0x12u);
  }
}

void sub_221E87A3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::SystemAudioIO::AudioIOUnit::Start(id *this)
{
  v90[19] = *MEMORY[0x263EF8340];
  if ((*((unsigned __int8 *)this + 360) | 2) != 2) {
    return 0;
  }
  uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance((Phase::Logger *)this);
  if (*((unsigned char *)Instance + 536))
  {
    uint64_t v3 = (Phase::Logger *)objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(Instance)
                                                                                            + 528)));
    uint64_t v4 = Phase::Logger::GetInstance(v3);
    os_signpost_id_t v5 = os_signpost_id_generate(**(os_log_t **)(v4 + 528));
    if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      os_signpost_id_t v6 = v5;
      if (os_signpost_enabled((os_log_t)v3))
      {
        if (*((unsigned char *)this + 240)) {
          int v7 = "in";
        }
        else {
          int v7 = "-";
        }
        if (*((unsigned char *)this + 152)) {
          unsigned int v8 = "out";
        }
        else {
          unsigned int v8 = "-";
        }
        [this[31] sampleRate];
        uint64_t v10 = v9;
        int v11 = [this[31] channelCount];
        [this[20] sampleRate];
        uint64_t v13 = v12;
        int v14 = [this[20] channelCount];
        [this[32] sampleRate];
        uint64_t v16 = v15;
        int v17 = [this[32] channelCount];
        [this[21] sampleRate];
        uint64_t v19 = v18;
        int v20 = [this[21] channelCount];
        *(_DWORD *)buf = 136317442;
        *(void *)&uint8_t buf[4] = v7;
        __int16 v72 = 2080;
        *(void *)unsigned int v73 = v8;
        *(_WORD *)&v73[8] = 2048;
        *(void *)&v73[10] = v10;
        __int16 v74 = 1024;
        int v75 = v11;
        __int16 v76 = 2048;
        uint64_t v77 = v13;
        __int16 v78 = 1024;
        int v79 = v14;
        __int16 v80 = 2048;
        uint64_t v81 = v16;
        __int16 v82 = 1024;
        int v83 = v17;
        __int16 v84 = 2048;
        uint64_t v85 = v19;
        __int16 v86 = 1024;
        int v87 = v20;
        _os_signpost_emit_with_name_impl(&dword_221E5E000, (os_log_t)v3, OS_SIGNPOST_EVENT, v6, "Phase_AudioIO_Start", "enable [%s, %s], hardware format [%.f/%d, %.f/%d], client format [%.f/%d, %.f/%d]", buf, 0x56u);
      }
    }
  }
  id v21 = this[44];
  if (v21 && ([v21 renderResourcesAllocated] & 1) != 0
    || (uint64_t v22 = (*((uint64_t (**)(id *))*this + 3))(this), !v22))
  {
    Phase::Controller::SystemAudioIO::AudioIOBase::StartStopInternalCaptures((Phase::Controller::SystemAudioIO::AudioIOBase *)this, 1);
    id v23 = this[44];
    id v60 = 0;
    [v23 startHardwareAndReturnError:&v60];
    id v24 = v60;
    __int16 v25 = (Phase::Logger *)[v24 code];
    uint64_t v22 = (uint64_t)v25;
    if (v25)
    {
      Phase::Controller::SystemAudioIO::AudioIOBase::StartStopInternalCaptures((Phase::Controller::SystemAudioIO::AudioIOBase *)this, 0);
      uint64_t v26 = [MEMORY[0x263F087E8] errorWithDomain:*MEMORY[0x263F08410] code:(int)v22 userInfo:0];
      uint64_t v27 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v26)
                                                                                          + 528)));
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        id v28 = [(Phase::Logger *)v26 description];
        uint64_t v29 = [v28 UTF8String];
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "AudioIOUnit.mm";
        __int16 v72 = 1024;
        *(_DWORD *)unsigned int v73 = 456;
        *(_WORD *)&v73[4] = 2080;
        *(void *)&v73[6] = v29;
        _os_log_impl(&dword_221E5E000, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d Error starting Audio IO. Err = %s", buf, 0x1Cu);
      }
    }
    else
    {
      *((unsigned char *)this + 360) = 1;
      uint64_t v26 = (Phase::Logger *)objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v25)
                                                                                               + 528)));
      if (os_log_type_enabled((os_log_t)v26, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v30 = (Phase::Controller::SystemAudioIO::AudioIOBase **)this[46];
        __int16 v31 = [MEMORY[0x263EF93E0] sharedInstance];
        uint64_t v32 = [v31 currentRoute];
        uint64_t v33 = [v32 outputs];

        uint64_t v34 = (Phase::Logger *)[v33 count];
        int v35 = (int)v34;
        if (v34)
        {
          if (v34 != 1)
          {
            uint64_t v36 = **(id **)(Phase::Logger::GetInstance(v34) + 528);
            if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315650;
              *(void *)&uint8_t buf[4] = "AudioIOUnit.mm";
              __int16 v72 = 1024;
              *(_DWORD *)unsigned int v73 = 174;
              *(_WORD *)&v73[4] = 1024;
              *(_DWORD *)&v73[6] = v35;
              _os_log_impl(&dword_221E5E000, v36, OS_LOG_TYPE_ERROR, "%25s:%-5d AVAudioSession route has more than 1 output; using the first of %i outputs.",
                buf,
                0x18u);
            }
          }
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)buf);
          uint64_t v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v73[2], (uint64_t)"AVAudioSession ", 15);
          uint64_t v38 = [v33 objectAtIndexedSubscript:0];
          id v39 = [v38 portName];
          uint64_t v40 = (const char *)[v39 UTF8String];
          size_t v41 = strlen(v40);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)v40, v41);

          int v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v73[2], (uint64_t)" of type ", 9);
          char v43 = [v33 objectAtIndexedSubscript:0];
          id v44 = [v43 portType];
          char v45 = (const char *)[v44 UTF8String];
          size_t v46 = strlen(v45);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)v45, v46);

          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v73[2], (uint64_t)", with ", 7);
          uint64_t v47 = [v33 objectAtIndexedSubscript:0];
          std::string::size_type v48 = [v47 channels];
          [v48 count];
          uint64_t v49 = (void *)std::ostream::operator<<();
          uint64_t v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)" channels", 9);
          std::ios_base::getloc((const std::ios_base *)((char *)v50 + *(void *)(*v50 - 24)));
          int v51 = std::locale::use_facet(&v62, MEMORY[0x263F8C108]);
          ((void (*)(const std::locale::facet *, uint64_t))v51->__vftable[2].~facet_0)(v51, 10);
          std::locale::~locale(&v62);
          std::ostream::put();
          std::ostream::flush();

          Phase::Controller::SystemAudioIO::AudioIOBase::GetRenderedChannelLayout(v30[2], &__p);
          Phase::ChannelLayout::GetStringDescription((unsigned int **)&__p);
          if ((v64 & 0x80u) == 0) {
            locale = &v62;
          }
          else {
            locale = v62.__locale_;
          }
          if ((v64 & 0x80u) == 0) {
            uint64_t v53 = v64;
          }
          else {
            uint64_t v53 = v63;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v73[2], (uint64_t)locale, v53);
          if ((char)v64 < 0) {
            operator delete(v62.__locale_);
          }
          if (__p.__begin_)
          {
            __p.__end_ = __p.__begin_;
            operator delete(__p.__begin_);
          }
          std::stringbuf::str();
          *(void *)buf = *MEMORY[0x263F8C2B8];
          uint64_t v54 = *(void *)(MEMORY[0x263F8C2B8] + 72);
          *(void *)&buf[*(void *)(*(void *)buf - 24)] = *(void *)(MEMORY[0x263F8C2B8] + 64);
          *(void *)&v73[2] = v54;
          *(void *)&v73[10] = MEMORY[0x263F8C318] + 16;
          if (v89 < 0) {
            operator delete(v88);
          }
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x223C937D0](v90);
        }
        else
        {
          uint64_t v55 = **(id **)(Phase::Logger::GetInstance(v34) + 528);
          if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(void *)&uint8_t buf[4] = "AudioIOUnit.mm";
            __int16 v72 = 1024;
            *(_DWORD *)unsigned int v73 = 165;
            _os_log_impl(&dword_221E5E000, v55, OS_LOG_TYPE_ERROR, "%25s:%-5d New Audio session route has no outputs.", buf, 0x12u);
          }
          std::string::basic_string[abi:ne180100]<0>(v58, "Invalid AVAudioSession");
        }

        uint64_t v56 = v58;
        if (v59 < 0) {
          uint64_t v56 = (void **)v58[0];
        }
        *(_DWORD *)uint64_t v65 = 136315650;
        long long v66 = "AudioIOUnit.mm";
        __int16 v67 = 1024;
        int v68 = 462;
        __int16 v69 = 2080;
        long long v70 = v56;
        _os_log_impl(&dword_221E5E000, (os_log_t)v26, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Started Audio IO on output: %s", v65, 0x1Cu);
        if (v59 < 0) {
          operator delete(v58[0]);
        }
      }
    }
  }
  return v22;
}

void sub_221E882E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Unwind_Resume(a1);
}

void Phase::Controller::SystemAudioIO::AudioIOUnit::Pause(id *this)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (*((unsigned char *)this + 360) == 1)
  {
    uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance((Phase::Logger *)this);
    if (*((unsigned char *)Instance + 536))
    {
      uint64_t v3 = (Phase::Logger *)objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(Instance)
                                                                                              + 528)));
      uint64_t v4 = Phase::Logger::GetInstance(v3);
      os_signpost_id_t v5 = os_signpost_id_generate(**(os_log_t **)(v4 + 528));
      if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        os_signpost_id_t v6 = v5;
        if (os_signpost_enabled((os_log_t)v3))
        {
          LOWORD(v9) = 0;
          _os_signpost_emit_with_name_impl(&dword_221E5E000, (os_log_t)v3, OS_SIGNPOST_EVENT, v6, "Phase_AudioIO_Pause", (const char *)&unk_222112ABB, (uint8_t *)&v9, 2u);
        }
      }
    }
    [this[44] stopHardware];
    if (*((unsigned char *)this + 104)) {
      *((unsigned char *)this + 104) = 0;
    }
    *((unsigned char *)this + 360) = 2;
    Phase::Controller::SystemAudioIO::AudioIOBase::StartStopInternalCaptures((Phase::Controller::SystemAudioIO::AudioIOBase *)this, 0);
    unsigned int v8 = **(id **)(Phase::Logger::GetInstance(v7) + 528);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 136315394;
      uint64_t v10 = "AudioIOUnit.mm";
      __int16 v11 = 1024;
      int v12 = 485;
      _os_log_impl(&dword_221E5E000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Paused Audio IO.", (uint8_t *)&v9, 0x12u);
    }
  }
}

void sub_221E88598(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void Phase::Controller::SystemAudioIO::AudioIOUnit::Stop(id *this)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (*((unsigned char *)this + 360) == 1)
  {
    uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance((Phase::Logger *)this);
    if (*((unsigned char *)Instance + 536))
    {
      uint64_t v3 = (Phase::Logger *)objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(Instance)
                                                                                              + 528)));
      uint64_t v4 = Phase::Logger::GetInstance(v3);
      os_signpost_id_t v5 = os_signpost_id_generate(**(os_log_t **)(v4 + 528));
      if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        os_signpost_id_t v6 = v5;
        if (os_signpost_enabled((os_log_t)v3))
        {
          LOWORD(v9) = 0;
          _os_signpost_emit_with_name_impl(&dword_221E5E000, (os_log_t)v3, OS_SIGNPOST_EVENT, v6, "Phase_AudioIO_Stop", (const char *)&unk_222112ABB, (uint8_t *)&v9, 2u);
        }
      }
    }
    [this[44] stopHardware];
    if (*((unsigned char *)this + 104)) {
      *((unsigned char *)this + 104) = 0;
    }
    if (*((unsigned char *)this + 120)) {
      *((unsigned char *)this + 120) = 0;
    }
  }
  *((unsigned char *)this + 360) = 0;
  Phase::Controller::SystemAudioIO::AudioIOBase::StartStopInternalCaptures((Phase::Controller::SystemAudioIO::AudioIOBase *)this, 0);
  unsigned int v8 = **(id **)(Phase::Logger::GetInstance(v7) + 528);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 136315394;
    uint64_t v10 = "AudioIOUnit.mm";
    __int16 v11 = 1024;
    int v12 = 504;
    _os_log_impl(&dword_221E5E000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Stopped Audio IO.", (uint8_t *)&v9, 0x12u);
  }
}

void sub_221E88740(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::SystemAudioIO::AudioIOUnit::IsRunning(id *this)
{
  return [this[44] isRunning];
}

uint64_t Phase::Controller::SystemAudioIO::AudioIOUnit::GetInputChannelCount(Phase::Controller::SystemAudioIO::AudioIOUnit *this)
{
  uint64_t v2 = (void *)*((void *)this + 44);
  if (!v2 || ([v2 renderResourcesAllocated] & 1) == 0) {
    std::terminate();
  }
  uint64_t v3 = (*(void (**)(Phase::Controller::SystemAudioIO::AudioIOUnit *, uint64_t))(*(void *)this + 136))(this, 1);
  uint64_t v4 = v3;
  if (v3) {
    uint64_t v5 = [v3 channelCount];
  }
  else {
    uint64_t v5 = 0;
  }

  return v5;
}

void sub_221E887E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::SystemAudioIO::AudioIOUnit::GetOutputChannelCount(Phase::Controller::SystemAudioIO::AudioIOUnit *this)
{
  uint64_t v2 = (void *)*((void *)this + 44);
  if (!v2 || ([v2 renderResourcesAllocated] & 1) == 0) {
    std::terminate();
  }
  uint64_t v3 = (*(void (**)(Phase::Controller::SystemAudioIO::AudioIOUnit *, void))(*(void *)this + 136))(this, 0);
  uint64_t v4 = v3;
  if (v3) {
    uint64_t v5 = [v3 channelCount];
  }
  else {
    uint64_t v5 = 0;
  }

  return v5;
}

void sub_221E88880(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id Phase::Controller::SystemAudioIO::AudioIOUnit::GetOutputChannelLayout(Phase::Controller::SystemAudioIO::AudioIOUnit *this)
{
  uint64_t v2 = (void *)*((void *)this + 44);
  if (!v2 || ([v2 renderResourcesAllocated] & 1) == 0) {
    std::terminate();
  }
  (*(void (**)(Phase::Controller::SystemAudioIO::AudioIOUnit *, void))(*(void *)this + 136))(this, 0);
  uint64_t v3 = (Phase::Controller::SystemAudioIO *)objc_claimAutoreleasedReturnValue();
  uint64_t v5 = Phase::Controller::SystemAudioIO::GetOutputChannelLayout(v3, v4);

  return v5;
}

void sub_221E8891C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void Phase::Controller::SystemAudioIO::AudioIOUnit::GetCurrentOutputRoute(Phase::Controller::SystemAudioIO::AudioIOUnit *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *((void *)this + 46);
  uint64_t v4 = [MEMORY[0x263EF93E0] sharedInstance];
  uint64_t v5 = [v4 currentRoute];
  os_signpost_id_t v6 = [v5 outputs];

  if ([v6 count])
  {
    int v7 = [v6 objectAtIndexedSubscript:0];
    Phase::Controller::SystemAudioIO::AudioIOBase::GetRenderedChannelLayout(*(Phase::Controller::SystemAudioIO::AudioIOBase **)(v3 + 16), &__p);
    Phase::Controller::AudioRouteDescription::AudioRouteDescription(a2, v7, (uint64_t)&__p);
    if (__p.__begin_)
    {
      __p.__end_ = __p.__begin_;
      operator delete(__p.__begin_);
    }
  }
  else
  {
    Phase::Controller::SystemAudioIO::AudioIOBase::GetRenderedChannelLayout(*(Phase::Controller::SystemAudioIO::AudioIOBase **)(v3 + 16), &__p);
    *(void *)(a2 + 16) = 0;
    *(_DWORD *)(a2 + 8) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 32) = 0;
    std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>((void *)(a2 + 16), __p.__begin_, (uint64_t)__p.__end_, __p.__end_ - __p.__begin_);
    if (__p.__begin_)
    {
      __p.__end_ = __p.__begin_;
      operator delete(__p.__begin_);
    }
  }
}

void sub_221E88A2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,unsigned int,objc_object * {__strong}>,(std::__variant_detail::_Trait)1>::~__dtor(v12);
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

double Phase::Controller::SystemAudioIO::AudioIOUnit::GetSampleRate(Phase::Controller::SystemAudioIO::AudioIOUnit *this)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v2 = (Phase::Logger *)*((void *)this + 44);
  if (v2
    && (uint64_t v2 = (Phase::Logger *)[(Phase::Logger *)v2 renderResourcesAllocated],
        (v2 & 1) != 0))
  {
    uint64_t v3 = [*((id *)this + 44) outputBusses];
    uint64_t v4 = [v3 objectAtIndexedSubscript:0];
    uint64_t v5 = [v4 format];
    [v5 sampleRate];
    double v7 = v6;
  }
  else
  {
    unsigned int v8 = **(id **)(Phase::Logger::GetInstance(v2) + 528);
    double v7 = 48000.0;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      int v10 = 136315394;
      __int16 v11 = "AudioIOUnit.mm";
      __int16 v12 = 1024;
      int v13 = 543;
      _os_log_impl(&dword_221E5E000, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d Getting sample rate from uninitialized AudioIOUnit - returning default value of 48000", (uint8_t *)&v10, 0x12u);
    }
  }
  return v7;
}

void sub_221E88BD0(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::SystemAudioIO::AudioIOUnit::GetMaximumFramesToRender(Phase::Controller::SystemAudioIO::AudioIOUnit *this)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 44);
  if (v2)
  {
    uint64_t v2 = [(id)v2 renderResourcesAllocated];
    if (v2) {
      return [*((id *)this + 44) maximumFramesToRender];
    }
  }
  uint64_t v4 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)v2) + 528);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    int v5 = 136315394;
    double v6 = "AudioIOUnit.mm";
    __int16 v7 = 1024;
    int v8 = 554;
    _os_log_impl(&dword_221E5E000, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d Getting maximum frames to rernder from uninitialized AudioIOUnit - returning default value of 4096", (uint8_t *)&v5, 0x12u);
  }
  return 4096;
}

uint64_t Phase::Controller::SystemAudioIO::AudioIOUnit::GetLastFrameCount(Phase::Controller::SystemAudioIO::AudioIOUnit *this)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 44);
  if (v2)
  {
    uint64_t v2 = [(id)v2 renderResourcesAllocated];
    if (v2) {
      return *((void *)this + 48);
    }
  }
  uint64_t v4 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)v2) + 528);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    int v5 = 136315394;
    double v6 = "AudioIOUnit.mm";
    __int16 v7 = 1024;
    int v8 = 565;
    _os_log_impl(&dword_221E5E000, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d Getting maximum frames to rernder from uninitialized AudioIOUnit - returning default value of 4096", (uint8_t *)&v5, 0x12u);
  }
  return 4096;
}

id Phase::Controller::SystemAudioIO::AudioIOUnit::GetHWFormat(Phase::Controller::SystemAudioIO::AudioIOUnit *this, unsigned int a2)
{
  uint64_t v3 = (void *)*((void *)this + 44);
  if (a2 == 1) {
    [v3 inputBusses];
  }
  else {
  uint64_t v4 = [v3 outputBusses];
  }
  if ([v4 count] <= (unint64_t)a2)
  {
    double v6 = 0;
  }
  else
  {
    int v5 = objc_msgSend(v4, "objectAtIndexedSubscript:");
    double v6 = [v5 format];
  }

  return v6;
}

void sub_221E88E60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::SystemAudioIO::AudioIOUnit::UpdateFormats(Phase::Controller::SystemAudioIO::AudioIOUnit *this, uint64_t a2)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  uint64_t v4 = (void *)*((void *)this + 44);
  if (a2) {
    [v4 setInputEnabled:1];
  }
  else {
    [v4 setOutputEnabled:1];
  }
  double v6 = (char *)this + 152;
  uint64_t v5 = *(void *)this;
  *((_DWORD *)this + 22 * a2 + 39) = a2;
  uint64_t v7 = (*(void (**)(Phase::Controller::SystemAudioIO::AudioIOUnit *, uint64_t))(v5 + 136))(this, a2);
  unint64_t v8 = a2;
  uint64_t v9 = (char *)this + 88 * a2 + 152;
  __int16 v11 = (void *)*((void *)v9 + 1);
  int v10 = (id *)(v9 + 8);
  *int v10 = (id)v7;

  if (!*v10) {
    goto LABEL_26;
  }
  __int16 v12 = &v6[88 * a2];
  uint64_t v14 = (void *)*((void *)v12 + 2);
  int v13 = (id *)(v12 + 16);
  id *v13 = 0;

  uint64_t v15 = [*v10 channelLayout];

  if (v15)
  {
    id v16 = objc_alloc(MEMORY[0x263EF9388]);
    double v17 = *((double *)this + 42);
    uint64_t v18 = [*v10 channelLayout];
    uint64_t v19 = [v16 initWithCommonFormat:1 sampleRate:1 interleaved:v18 channelLayout:v17];
    id v20 = *v13;
    id *v13 = (id)v19;
  }
  else
  {
    if ([*v10 channelCount] >= 3) {
      goto LABEL_26;
    }
    uint64_t v21 = objc_msgSend(objc_alloc(MEMORY[0x263EF9388]), "initWithCommonFormat:sampleRate:channels:interleaved:", 1, objc_msgSend(*v10, "channelCount"), 1, *((double *)this + 42));
    uint64_t v18 = *v13;
    id *v13 = (id)v21;
  }

  if (!*v13) {
LABEL_26:
  }
    std::terminate();
  id v23 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v22)
                                                                                      + 528)));
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    int v24 = [*v13 channelCount];
    __int16 v25 = [*v13 channelLayout];
    Phase::ChannelLayout::GetStringFromLayoutTag((Phase::ChannelLayout *)[v25 layoutTag], __p);
    if (v39 >= 0) {
      uint64_t v26 = __p;
    }
    else {
      uint64_t v26 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136315906;
    *(void *)&uint8_t buf[4] = "AudioIOUnit.mm";
    __int16 v41 = 1024;
    int v42 = 720;
    __int16 v43 = 1024;
    int v44 = v24;
    __int16 v45 = 2080;
    size_t v46 = v26;
    _os_log_impl(&dword_221E5E000, v23, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Hardware output: %i channels with layout %s", buf, 0x22u);
    if (v39 < 0) {
      operator delete(__p[0]);
    }
  }
  id v27 = *v13;
  id v28 = (void *)*((void *)this + 44);
  if (a2 == 1) {
    [v28 outputBusses];
  }
  else {
  uint64_t v29 = [v28 inputBusses];
  }
  if ([v29 count] <= v8)
  {

    return 4294956417;
  }
  else
  {
    uint64_t v30 = [v29 objectAtIndexedSubscript:v8];
    *(void *)buf = 0;
    [v30 setFormat:v27 error:buf];
    id v31 = *(id *)buf;

    uint64_t v32 = [v31 code];
    if (!v32)
    {
      uint64_t v33 = [*v13 streamDescription];
      uint64_t v32 = 0;
      uint64_t v34 = &v6[88 * v8];
      long long v35 = *(_OWORD *)v33;
      long long v36 = *(_OWORD *)(v33 + 16);
      *((void *)v34 + 7) = *(void *)(v33 + 32);
      *(_OWORD *)(v34 + 40) = v36;
      *(_OWORD *)(v34 + 24) = v35;
    }
  }
  return v32;
}

void sub_221E89208(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN5Phase10Controller13SystemAudioIO11AudioIOUnit17SetOutputProviderEv_block_invoke(uint64_t a1, _DWORD *a2, long long *a3, unsigned int a4, uint64_t a5, unsigned int *a6)
{
  uint64_t v86 = *MEMORY[0x263EF8340];
  uint64_t v7 = *(void *)(a1 + 56);
  if (!a6)
  {
    uint64_t v8 = 0xFFFFFFFFLL;
    goto LABEL_12;
  }
  uint64_t v8 = *a6;
  if (!v8 || !*((void *)a6 + 2))
  {
LABEL_12:
    strcpy(__s, "(%d): ");
    strcat(__s, "invalid IO buffer: %p / %d / %p");
    uint64_t ShouldFire = Phase::Throttle::ShouldFire((Phase::Throttle *)(v7 + 16), 0);
    if (!ShouldFire) {
      return 4294956433;
    }
    __int16 v25 = (Phase::Logger *)snprintf(__str, 0x100uLL, __s, ShouldFire, a6, v8, 0);
    uint64_t v26 = **(id **)(Phase::Logger::GetInstance(v25) + 528);
    if (!os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
      return 4294956433;
    }
LABEL_14:
    *(_DWORD *)buf = 136315650;
    int v79 = "AudioIOBase.hpp";
    __int16 v80 = 1024;
    int v81 = 133;
    __int16 v82 = 2080;
    int v83 = __str;
    _os_log_impl(&dword_221E5E000, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d %s", buf, 0x1Cu);
    return 4294956433;
  }
  if (v8 != 1)
  {
    strcpy(__s, "(%d): ");
    strcat(__s, "expected interleaved IO buffer, got deinterleaved %d buffers");
    uint64_t v27 = Phase::Throttle::ShouldFire((Phase::Throttle *)(v7 + 16), 0);
    if (!v27) {
      return 4294956433;
    }
    id v28 = (Phase::Logger *)snprintf(__str, 0x100uLL, __s, v27, v8);
    goto LABEL_21;
  }
  if ((*((unsigned char *)a3 + 56) & 3) == 0)
  {
    strcpy(__s, "(%d): ");
    strcat(__s, "did not receive a valid IO sample/host time");
    uint64_t v29 = Phase::Throttle::ShouldFire((Phase::Throttle *)(v7 + 16), 0);
    if (!v29) {
      return 4294956433;
    }
    id v28 = (Phase::Logger *)snprintf(__str, 0x100uLL, __s, v29);
LABEL_21:
    uint64_t v26 = **(id **)(Phase::Logger::GetInstance(v28) + 528);
    if (!os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
      return 4294956433;
    }
    goto LABEL_14;
  }
  unsigned int v10 = a4;
  uint64_t v12 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (!*(unsigned char *)(v12 + 64))
  {
    long long v13 = *a3;
    long long v14 = a3[1];
    long long v15 = a3[3];
    *(_OWORD *)(v12 + 32) = a3[2];
    *(_OWORD *)(v12 + 48) = v15;
    *(_OWORD *)uint64_t v12 = v13;
    *(_OWORD *)(v12 + 16) = v14;
    *(unsigned char *)(v12 + 64) = 1;
  }
  *(void *)(v7 + 384) = a4;
  double v16 = *(double *)a3;
  *(_DWORD *)__s = a6[2];
  if (!atomic_load((unsigned int *)(v7 + 144)))
  {
    uint64_t v30 = *(unsigned int *)__s;
    if (*(_DWORD *)__s >= *(_DWORD *)(a1 + 72))
    {
      if (*(unsigned char *)(v7 + 136))
      {
        uint64_t v76 = mach_absolute_time();
        uint64_t v31 = *(void *)(v7 + 128);
        double v32 = (*(double (**)(uint64_t))(*(void *)v7 + 104))(v7);
        uint64_t v33 = (Phase::Logger *)_os_log_pack_size();
        uint64_t v34 = (uint64_t)v33 + 88;
        uint64_t Instance = Phase::Logger::GetInstance(v33);
        if (caulk::deferred_logger::create_message(*(caulk::deferred_logger **)(Instance + 1168), v34, 0))
        {
          long long v36 = (Phase::Logger *)_os_log_pack_fill();
          *(_DWORD *)long long v36 = 67109120;
          *((_DWORD *)v36 + 1) = ((double)(uint64_t)(v76 - v31) * 0.0000000416666667 * v32);
          Phase::Logger::GetInstance(v36);
          caulk::concurrent::messenger::enqueue();
        }
        if (*(unsigned char *)(v7 + 136)) {
          *(unsigned char *)(v7 + 136) = 0;
        }
      }
      kdebug_trace();
      uint64_t v37 = **(void **)(**(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 24) + 696);
      long long v38 = *a3;
      long long v39 = a3[1];
      long long v40 = a3[3];
      *(_OWORD *)(v37 + 75256) = a3[2];
      *(_OWORD *)(v37 + 75272) = v40;
      *(_OWORD *)(v37 + 75224) = v38;
      *(_OWORD *)(v37 + 75240) = v39;
      *(_DWORD *)(v37 + 104) = v10;
      *(_DWORD *)(v37 + 108) = 0;
      uint64_t v41 = *(void *)(v37 + 75096);
      long long v42 = *a3;
      long long v43 = a3[1];
      long long v44 = a3[3];
      *(_OWORD *)(v41 + 80) = a3[2];
      *(_OWORD *)(v41 + 96) = v44;
      *(_OWORD *)(v41 + 48) = v42;
      *(_OWORD *)(v41 + 64) = v43;
      *(void *)(v41 + 40) = *(void *)(*(void *)(v41 + 16) + 16);
      Phase::Controller::VoiceManager::IOExecuteRealtimeActions(*(Phase::Controller::VoiceManager **)(*(void *)(*(void *)(a1 + 40) + 8) + 24), (const AudioTimeStamp *)a3);
      __int16 v45 = (char *)*((void *)a6 + 2);
      unsigned int v77 = v10;
      uint64_t v74 = v10;
      if (*(void *)(a1 + 64) == -1)
      {
        unsigned int v54 = *(_DWORD *)(**(void **)(**(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 24) + 696) + 192);
        signed int v55 = v30;
        if (v30 > v54)
        {
          bzero(v45, a6[3]);
          signed int v55 = v54;
        }
        switch(v55)
        {
          case 1:
            if (v10)
            {
              int v56 = 0;
              unsigned int v57 = v10;
              do
              {
                uint64_t v58 = *(uint64_t **)(**(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 24) + 696);
                uint64_t v59 = *v58;
                Phase::Controller::DVM_RT::RtUpdate(*(Phase::Controller::DVM_RT **)(*v58 + 75096));
                *(_DWORD *)&v45[4 * v56] = **(_DWORD **)(v59 + 144);
                v56 += v30;
                --v57;
              }
              while (v57);
            }
            break;
          case 2:
            if (v10)
            {
              int v63 = 1;
              do
              {
                uint64_t v64 = **(void **)(**(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 24) + 696);
                Phase::Controller::DVM_RT::RtUpdate(*(Phase::Controller::DVM_RT **)(v64 + 75096));
                uint64_t v65 = *(_DWORD **)(v64 + 144);
                *(_DWORD *)&v45[4 * v63 - 4] = *v65;
                *(_DWORD *)&v45[4 * v63] = v65[1];
                v63 += v30;
                --v10;
              }
              while (v10);
            }
            break;
          case 3:
            if (v10)
            {
              int v66 = 2;
              unsigned int v67 = v10;
              do
              {
                uint64_t v68 = **(void **)(**(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 24) + 696);
                Phase::Controller::DVM_RT::RtUpdate(*(Phase::Controller::DVM_RT **)(v68 + 75096));
                __int16 v69 = *(_DWORD **)(v68 + 144);
                *(_DWORD *)&v45[4 * v66 - 8] = *v69;
                *(_DWORD *)&v45[4 * v66 - 4] = v69[1];
                *(_DWORD *)&v45[4 * v66] = v69[2];
                v66 += v30;
                --v67;
              }
              while (v67);
            }
            break;
          case 4:
            if (v10)
            {
              int v70 = 3;
              unsigned int v71 = v10;
              do
              {
                uint64_t v72 = **(void **)(**(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 24) + 696);
                Phase::Controller::DVM_RT::RtUpdate(*(Phase::Controller::DVM_RT **)(v72 + 75096));
                unsigned int v73 = *(_DWORD **)(v72 + 144);
                *(_DWORD *)&v45[4 * v70 - 12] = *v73;
                *(_DWORD *)&v45[4 * v70 - 8] = v73[1];
                *(_DWORD *)&v45[4 * v70 - 4] = v73[2];
                *(_DWORD *)&v45[4 * v70] = v73[3];
                v70 += v30;
                --v71;
              }
              while (v71);
            }
            break;
          default:
            if (v10)
            {
              int v60 = 0;
              size_t v61 = 4 * v55;
              do
              {
                uint64_t v62 = **(void **)(**(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 24) + 696);
                Phase::Controller::DVM_RT::RtUpdate(*(Phase::Controller::DVM_RT **)(v62 + 75096));
                memcpy(&v45[4 * v60], *(const void **)(v62 + 144), v61);
                v60 += v30;
                --v10;
              }
              while (v10);
            }
            break;
        }
      }
      else if (v10)
      {
        for (int i = 0; i != v10; ++i)
        {
          uint64_t v47 = *(uint64_t **)(**(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 24) + 696);
          uint64_t v48 = *v47;
          Phase::Controller::DVM_RT::RtUpdate(*(Phase::Controller::DVM_RT **)(*v47 + 75096));
          if (v30)
          {
            uint64_t v49 = 0;
            int v50 = 0;
            uint64_t v51 = *(void *)(v48 + 144);
            unint64_t v52 = *(void *)(a1 + 64);
            do
            {
              if ((v52 >> v49)) {
                int v53 = *(_DWORD *)(v51 + 4 * v50++);
              }
              else {
                int v53 = 0;
              }
              *(_DWORD *)&v45[4 * v49++] = v53;
            }
            while (v30 != v49);
          }
          v45 += 4 * v30;
        }
      }
      *(float *)__str = 0.0;
      vDSP_rmsqv(*((const float **)a6 + 2), 1, (float *)__str, v30 * v77);
      if (*(float *)__str < 0.000001)
      {
        *a2 |= 0x10u;
        bzero(*((void **)a6 + 2), a6[3]);
      }
      **(double **)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = (double)((unint64_t)v16 + v74);
      *(void *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 8) = (unint64_t)((double)*((unint64_t *)a3 + 1) + *((double *)a3 + 2) * (double)(uint64_t)((double)v77 / *(double *)(v7 + 336) * 24000000.0));
      *(void *)(v7 + 112) = mach_absolute_time();
      *(unsigned char *)(v7 + 120) = 1;
      if (!*(unsigned char *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 64)) {
        std::__throw_bad_optional_access[abi:ne180100]();
      }
      mach_absolute_time();
      __udivti3();
      kdebug_trace();
      Phase::Controller::SystemAudioIO::AudioIOBase::IOConfiguration::WriteCaptureBufferList(*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24), (const AudioTimeStamp *)a3, v77, (const AudioBufferList *)a6);
      return 0;
    }
    Phase::Controller::SystemAudioIO::AudioIOBase::IOProcError<int const&,unsigned int const&>(v7, (unsigned int *)(a1 + 72), (unsigned int *)__s);
    return 4294956433;
  }
  *a2 |= 0x10u;
  bzero(*((void **)a6 + 2), a6[3]);
  kdebug_trace();
  uint64_t v18 = (Phase::Logger *)_os_log_pack_size();
  uint64_t v19 = (uint64_t)v18 + 88;
  uint64_t v20 = Phase::Logger::GetInstance(v18);
  uint64_t result = caulk::deferred_logger::create_message(*(caulk::deferred_logger **)(v20 + 1168), v19, 0);
  if (result)
  {
    uint64_t v22 = _os_log_pack_fill();
    uint64_t v23 = *((void *)a3 + 1);
    *(_DWORD *)uint64_t v22 = 134218240;
    *(void *)(v22 + 4) = v23;
    *(_WORD *)(v22 + 12) = 1024;
    *(_DWORD *)(v22 + 14) = v10;
    Phase::Logger::GetInstance((Phase::Logger *)v22);
    caulk::concurrent::messenger::enqueue();
    return 0;
  }
  return result;
}

void Phase::Controller::SystemAudioIO::AudioIOBase::IOProcError<int const&,unsigned int const&>(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  strcpy(__s, "(%d): ");
  strcat(__s, "expected at least %i channels, got %i channels");
  uint64_t ShouldFire = Phase::Throttle::ShouldFire((Phase::Throttle *)(a1 + 16), 0);
  if (ShouldFire)
  {
    double v6 = (Phase::Logger *)snprintf(__str, 0x100uLL, __s, ShouldFire, *a2, *a3);
    uint64_t v7 = **(id **)(Phase::Logger::GetInstance(v6) + 528);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      uint64_t v9 = "AudioIOBase.hpp";
      __int16 v10 = 1024;
      int v11 = 133;
      __int16 v12 = 2080;
      long long v13 = __str;
      _os_log_impl(&dword_221E5E000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d %s", buf, 0x1Cu);
    }
  }
}

void ___ZN5Phase10Controller13SystemAudioIO11AudioIOUnit15SetInputHandlerEv_block_invoke(uint64_t a1, AudioUnitRenderActionFlags *a2, AudioTimeStamp *inTimeStamp, uint64_t inNumberFrames, uint64_t inOutputBusNumber)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t v7 = *(void *)(a1 + 48);
  if (atomic_load((unsigned int *)(v7 + 144)))
  {
    kdebug_trace();
    uint64_t v9 = (Phase::Logger *)_os_log_pack_size();
    uint64_t v10 = (uint64_t)v9 + 88;
    uint64_t Instance = Phase::Logger::GetInstance(v9);
    if (caulk::deferred_logger::create_message(*(caulk::deferred_logger **)(Instance + 1168), v10, 0))
    {
      uint64_t v12 = _os_log_pack_fill();
      UInt64 mHostTime = inTimeStamp->mHostTime;
      *(_DWORD *)uint64_t v12 = 134218240;
      *(void *)(v12 + 4) = mHostTime;
      *(_WORD *)(v12 + 12) = 1024;
      *(_DWORD *)(v12 + 14) = inNumberFrames;
      Phase::Logger::GetInstance((Phase::Logger *)v12);
      caulk::concurrent::messenger::enqueue();
    }
  }
  else
  {
    ioData.mBuffers[0].mData = 0;
    UInt32 v16 = *(_DWORD *)(a1 + 56);
    int v17 = *(_DWORD *)(a1 + 60);
    ioData.mNumberBuffers = 1;
    ioData.mBuffers[0].mNumberChannels = v16;
    *(void *)&ioData.mBuffers[0].mDataByteSize = (v17 * inNumberFrames);
    uint64_t v18 = AudioUnitRender(*(AudioUnit *)(v7 + 344), a2, inTimeStamp, inOutputBusNumber, inNumberFrames, &ioData);
    if (v18)
    {
      strcpy(__s, "(%d): ");
      strcat(__s, "error %d on input bus %ld timestamp %0.2f frameCount %u");
      uint64_t ShouldFire = Phase::Throttle::ShouldFire((Phase::Throttle *)(v7 + 16), 0);
      if (ShouldFire)
      {
        uint64_t v20 = (Phase::Logger *)snprintf(__str, 0x100uLL, __s, ShouldFire, v18, inOutputBusNumber, *(void *)&inTimeStamp->mSampleTime, inNumberFrames);
        uint64_t v21 = **(id **)(Phase::Logger::GetInstance(v20) + 528);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          uint64_t v26 = "AudioIOBase.hpp";
          __int16 v27 = 1024;
          int v28 = 133;
          __int16 v29 = 2080;
          uint64_t v30 = __str;
          _os_log_impl(&dword_221E5E000, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d %s", buf, 0x1Cu);
        }
      }
    }
    else
    {
      Phase::Controller::SystemAudioIO::AudioIOBase::IOConfiguration::WriteCaptureBufferList(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), inTimeStamp, inNumberFrames, &ioData);
      *(_DWORD *)__str = 0;
      if (*(void *)(v7 + 304))
      {
        *(void *)__s = v7 + 312;
        int v22 = caulk::pooled_semaphore_mutex::try_lock((caulk::pooled_semaphore_mutex *)(v7 + 312));
        __s[8] = v22;
        if (v22 && (uint64_t v23 = *(float ***)(v7 + 304)) != 0 && *v23)
        {
          Phase::Controller::SpeechDetector::SpeechDetectorImpl::ProcessAndGetLatest(*v23, &ioData, (float *)__str);
          std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)__s);
        }
        else
        {
          std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)__s);
        }
      }
      Phase::Controller::VoiceManager::IOExecuteRealtimeInputActions(*(uint64_t **)(*(void *)(*(void *)(a1 + 40) + 8) + 24), (uint64_t)inTimeStamp);
    }
  }
}

void sub_221E8A0C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
}

BOOL Phase::Controller::SystemAudioIO::AudioIOUnit::OnOutputRouteChanged(Phase::Controller::SystemAudioIO::AudioIOUnit *this)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v2 = **(id **)(Phase::Logger::GetInstance(this) + 528);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    int v4 = 136315394;
    uint64_t v5 = "AudioIOUnit.mm";
    __int16 v6 = 1024;
    int v7 = 1222;
    _os_log_impl(&dword_221E5E000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d Audio route change notification sent to voice manager.", (uint8_t *)&v4, 0x12u);
  }
  BOOL result = Phase::Controller::VoiceManager::Implementation::AudioIOConfigChanged(**((Phase::Controller::VoiceManager::Implementation ***)this
                                                                                  + 1));
  if (result) {
    atomic_fetch_add((atomic_uint *volatile)this + 36, 1u);
  }
  return result;
}

id Phase::Controller::SystemAudioIO::AudioIOUnit::CopyWorkGroup(AudioUnit *this)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  id outData = 0;
  UInt32 ioDataSize = 8;
  Property = (Phase::Logger *)AudioUnitGetProperty(this[43], 0x7DFu, 0, 0, &outData, &ioDataSize);
  int v2 = (int)Property;
  if (Property)
  {
    uint64_t v3 = **(id **)(Phase::Logger::GetInstance(Property) + 528);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      uint64_t v9 = "AudioIOUnit.mm";
      __int16 v10 = 1024;
      int v11 = 1240;
      __int16 v12 = 1024;
      int v13 = v2;
      _os_log_impl(&dword_221E5E000, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to get workgroup from output audio unit: %d", buf, 0x18u);
    }
    id v4 = 0;
  }
  else
  {
    id v4 = outData;
  }

  return v4;
}

void sub_221E8A2DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void ___ZN5Phase10Controller13SystemAudioIO14Implementation10InitializeEv_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (v4)
  {
    uint64_t v5 = (Phase::Logger *)std::__shared_weak_count::lock(v4);
    if (v5)
    {
      __int16 v6 = (std::__shared_weak_count *)v5;
      uint64_t v7 = *(void *)(a1 + 32);
      if (v7)
      {
        uint64_t v8 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v5)
                                                                                           + 528)));
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v9 = [v3 userInfo];
          __int16 v10 = [v9 objectForKeyedSubscript:*MEMORY[0x263EF9268]];
          int v11 = [v10 unsignedIntValue];
          __int16 v12 = [v3 userInfo];
          int v13 = [v12 objectForKeyedSubscript:*MEMORY[0x263EF9260]];
          int v14 = 136315906;
          long long v15 = "AudioIOUnit.mm";
          __int16 v16 = 1024;
          int v17 = 85;
          __int16 v18 = 1024;
          int v19 = v11;
          __int16 v20 = 2112;
          uint64_t v21 = v13;
          _os_log_impl(&dword_221E5E000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Received AVAudioSession route change notification with reason %u and previous route:\n%@", (uint8_t *)&v14, 0x22u);
        }
        if (*(unsigned char *)(v7 + 48)) {
          *(unsigned char *)(v7 + 49) = 1;
        }
        else {
          Phase::Controller::SystemAudioIO::AudioIOUnit::OnOutputRouteChanged(*(Phase::Controller::SystemAudioIO::AudioIOUnit **)(v7 + 16));
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_221E8A4B0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c74_ZTSNSt3__18weak_ptrIN5Phase10Controller13SystemAudioIO14ImplementationEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_ea8_32c74_ZTSNSt3__18weak_ptrIN5Phase10Controller13SystemAudioIO14ImplementationEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN5Phase10Controller13SystemAudioIO14Implementation10InitializeEv_block_invoke_67(uint64_t a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  id v3 = a2;
  id v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (v4)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      __int16 v6 = v5;
      uint64_t v7 = *(void *)(a1 + 32);
      if (!v7)
      {
LABEL_18:
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
        goto LABEL_19;
      }
      uint64_t v8 = [v3 userInfo];
      uint64_t v9 = [v8 valueForKey:*MEMORY[0x263EF90C8]];
      unsigned __int8 v10 = [v9 intValue];

      if (v10)
      {
        if (v10 != 1
          || (*(unsigned char *)(v7 + 48) = 1,
              __int16 v12 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)v11) + 528),
              !(BOOL v11 = os_log_type_enabled(v12, OS_LOG_TYPE_INFO))))
        {
LABEL_15:
          if (*(unsigned char *)(v7 + 49))
          {
            int v14 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)v11) + 528);
            if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
            {
              int v15 = 136315650;
              __int16 v16 = "AudioIOUnit.mm";
              __int16 v17 = 1024;
              int v18 = 136;
              __int16 v19 = 1024;
              int v20 = v10;
              _os_log_impl(&dword_221E5E000, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d Dangling route change flag at interruption (%u) reception.", (uint8_t *)&v15, 0x18u);
            }
          }
          goto LABEL_18;
        }
        int v15 = 136315394;
        __int16 v16 = "AudioIOUnit.mm";
        __int16 v17 = 1024;
        int v18 = 114;
        int v13 = "%25s:%-5d Received AVAudioSessionInterruptionTypeBegan interruption";
      }
      else
      {
        if (*(unsigned char *)(v7 + 48))
        {
          if (*(unsigned char *)(v7 + 49))
          {
            BOOL v11 = Phase::Controller::SystemAudioIO::AudioIOUnit::OnOutputRouteChanged(*(Phase::Controller::SystemAudioIO::AudioIOUnit **)(v7 + 16));
            *(unsigned char *)(v7 + 49) = 0;
          }
          *(unsigned char *)(v7 + 48) = 0;
        }
        __int16 v12 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)v11) + 528);
        BOOL v11 = os_log_type_enabled(v12, OS_LOG_TYPE_INFO);
        if (!v11) {
          goto LABEL_15;
        }
        int v15 = 136315394;
        __int16 v16 = "AudioIOUnit.mm";
        __int16 v17 = 1024;
        int v18 = 130;
        int v13 = "%25s:%-5d Received AVAudioSessionInterruptionTypeEnded interruption";
      }
      _os_log_impl(&dword_221E5E000, v12, OS_LOG_TYPE_INFO, v13, (uint8_t *)&v15, 0x12u);
      goto LABEL_15;
    }
  }
LABEL_19:
}

void sub_221E8A77C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);

  _Unwind_Resume(a1);
}

void std::__throw_bad_weak_ptr[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x263F8C2D8] + 16;
}

Phase::Controller::SystemAudioIO::Implementation *Phase::Controller::SystemAudioIO::Implementation::Implementation(Phase::Controller::SystemAudioIO::Implementation *this, Phase::Controller::SystemAudioIO::AudioIOUnit *a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = a2;
  uint64_t v3 = [MEMORY[0x263EF93E0] sharedInstance];
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = v3;
  *((_WORD *)this + 24) = 0;
  return this;
}

void sub_221E8A858(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

id *std::unique_ptr<Phase::Controller::SystemAudioIO::Implementation>::reset[abi:ne180100](id **a1, id *a2)
{
  BOOL result = *a1;
  *a1 = a2;
  if (result)
  {
    Phase::Controller::SystemAudioIO::Implementation::~Implementation(result);
    JUMPOUT(0x223C938A0);
  }
  return result;
}

void Phase::Controller::SystemAudioIO::Implementation::~Implementation(id *this)
{
  uint64_t v2 = (std::__shared_weak_count *)this[1];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
}

uint64_t *std::shared_ptr<Phase::Controller::SystemAudioIO::Implementation>::shared_ptr[abi:ne180100]<Phase::Controller::SystemAudioIO::Implementation,std::default_delete<Phase::Controller::SystemAudioIO::Implementation>,void>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  id *result = *a2;
  if (v2) {
    operator new();
  }
  result[1] = 0;
  *a2 = 0;
  return result;
}

void std::shared_ptr<Phase::Controller::SystemAudioIO::Implementation>::__enable_weak_this[abi:ne180100]<Phase::Controller::SystemAudioIO::Implementation,Phase::Controller::SystemAudioIO::Implementation,void>(uint64_t a1, void *a2, uint64_t a3)
{
  if (a2)
  {
    id v4 = (std::__shared_weak_count *)a2[1];
    if (!v4 || v4->__shared_owners_ == -1)
    {
      uint64_t v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (v5)
      {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        id v4 = (std::__shared_weak_count *)a2[1];
      }
      *a2 = a3;
      a2[1] = v5;
      if (v4) {
        std::__shared_weak_count::__release_weak(v4);
      }
      if (v5)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      }
    }
  }
}

void std::__shared_ptr_pointer<Phase::Controller::SystemAudioIO::Implementation  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C938A0);
}

id *std::__shared_ptr_pointer<Phase::Controller::SystemAudioIO::Implementation  *>::__on_zero_shared(uint64_t a1)
{
  BOOL result = *(id **)(a1 + 24);
  if (result)
  {
    Phase::Controller::SystemAudioIO::Implementation::~Implementation(result);
    JUMPOUT(0x223C938A0);
  }
  return result;
}

const char *Phase::SpatialModeler::BaseModelerErrorCategory::name(Phase::SpatialModeler::BaseModelerErrorCategory *this)
{
  return "Base Modeler Error";
}

void Phase::SpatialModeler::BaseModelerErrorCategory::message(int __val@<W1>, std::string *a2@<X8>)
{
  std::to_string(&v5, __val);
  id v4 = std::string::insert(&v5, 0, "Base Modeler Error code: ");
  *a2 = *v4;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
}

void sub_221E8AB24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Phase::SpatialModeler::BaseModelerErrorCategory::~BaseModelerErrorCategory(std::error_category *this)
{
  std::error_category::~error_category(this);

  JUMPOUT(0x223C938A0);
}

uint64_t Phase::Controller::BinauralSpatializer::BinauralSpatializer(uint64_t a1, long long *a2, uint64_t a3, char a4)
{
  LOBYTE(__p[0]) = 0;
  std::vector<char>::vector(&v12, 0x20uLL, (const std::vector<char>::value_type *)__p);
  std::vector<char>::pointer begin = v12.__begin_;
  *(void *)v12.__begin_ = 6684674;
  *((_DWORD *)begin + 2) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "Binaural");
  Phase::Controller::Spatializer::Spatializer(a1, a2, (uint64_t)&v12, (long long *)__p);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (v12.__begin_)
  {
    v12.__end_ = v12.__begin_;
    operator delete(v12.__begin_);
  }
  *(void *)a1 = &unk_26D471D70;
  IR::IRDataAttributes::IRDataAttributes(a1 + 96, a3);
  *(unsigned char *)(a1 + 248) = a4;
  return a1;
}

void sub_221E8AC54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void Phase::Controller::BinauralSpatializer::~BinauralSpatializer(void **this)
{
  *this = &unk_26D471D70;
  IR::IRDataAttributes::~IRDataAttributes((IR::IRDataAttributes *)(this + 12));

  Phase::Controller::Spatializer::~Spatializer(this);
}

{
  uint64_t vars8;

  *this = &unk_26D471D70;
  IR::IRDataAttributes::~IRDataAttributes((IR::IRDataAttributes *)(this + 12));
  Phase::Controller::Spatializer::~Spatializer(this);

  JUMPOUT(0x223C938A0);
}

uint64_t Phase::Controller::BinauralSpatializer::Initialize(Phase::Controller::BinauralSpatializer *this)
{
  v26[19] = *MEMORY[0x263EF8340];
  uint64_t v2 = (char *)this + 96;
  int v3 = *((unsigned __int8 *)this + 248);
  BOOL v4 = *((unsigned char *)this + 248) != 0;
  std::string v5 = (char *)operator new(0x180uLL);
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = 0;
  *(void *)std::string v5 = &unk_26D471DA8;
  __int16 v6 = v5 + 24;
  *((_WORD *)v5 + 16) = 1;
  *((void *)v5 + 5) = this;
  *((void *)v5 + 3) = &unk_26D471DE0;
  *((_OWORD *)v5 + 3) = 0u;
  *((_OWORD *)v5 + 4) = 0u;
  *((_OWORD *)v5 + 5) = 0u;
  *((_OWORD *)v5 + 6) = 0u;
  *((_OWORD *)v5 + 7) = 0u;
  *((_OWORD *)v5 + 8) = 0u;
  *((_OWORD *)v5 + 9) = 0u;
  uint64_t v7 = (Phase::Logger *)IR::IRDataAttributes::IRDataAttributes((uint64_t)(v5 + 160), (uint64_t)v2);
  *((void *)v5 + 39) = 0;
  *((void *)v5 + 40) = 0;
  v5[328] = v4;
  *((void *)v5 + 46) = 0;
  *((void *)v5 + 47) = 0;
  *((void *)v5 + 45) = 0;
  *((void *)v5 + 42) = 0;
  *((void *)v5 + 43) = 0;
  *((_WORD *)v5 + 176) = 0;
  if (!*((void *)this + 12))
  {
    int v15 = **(id **)(Phase::Logger::GetInstance(v7) + 576);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "BinauralSpatializer.mm";
      __int16 v21 = 1024;
      *(_DWORD *)uint64_t v22 = 50;
      _os_log_impl(&dword_221E5E000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: inIrDataAttributes.fileURL.is_valid() is false.", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "PRECONDITION: inIrDataAttributes.fileURL.is_valid() is false.");
LABEL_20:
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C380] + 16);
  }
  if (*((float *)this + 26) <= 0.0)
  {
    __int16 v17 = **(id **)(Phase::Logger::GetInstance(v7) + 576);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "BinauralSpatializer.mm";
      __int16 v21 = 1024;
      *(_DWORD *)uint64_t v22 = 51;
      _os_log_impl(&dword_221E5E000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: inIrDataAttributes.sampleRate > 0 is false.", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "PRECONDITION: inIrDataAttributes.sampleRate > 0 is false.");
    goto LABEL_20;
  }
  if (v3)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)buf);
    std::ostream::operator<<();
    std::stringbuf::str();
    uint64_t v8 = std::string::insert(&v18, 0, "PHASE-");
    std::string::size_type v9 = v8->__r_.__value_.__r.__words[0];
    v19[0] = v8->__r_.__value_.__l.__size_;
    *(void *)((char *)v19 + 7) = *(std::string::size_type *)((char *)&v8->__r_.__value_.__r.__words[1] + 7);
    char v10 = HIBYTE(v8->__r_.__value_.__r.__words[2]);
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    if (v5[383] < 0) {
      operator delete(*((void **)v5 + 45));
    }
    uint64_t v11 = v19[0];
    *((void *)v5 + 45) = v9;
    *((void *)v5 + 46) = v11;
    *(void *)(v5 + 375) = *(void *)((char *)v19 + 7);
    v5[383] = v10;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v18.__r_.__value_.__l.__data_);
    }
    *(void *)buf = *MEMORY[0x263F8C2B8];
    uint64_t v12 = *(void *)(MEMORY[0x263F8C2B8] + 72);
    *(void *)&buf[*(void *)(*(void *)buf - 24)] = *(void *)(MEMORY[0x263F8C2B8] + 64);
    *(void *)&v22[2] = v12;
    uint64_t v23 = MEMORY[0x263F8C318] + 16;
    if (v25 < 0) {
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x223C937D0](v26);
  }
  int v13 = (std::__shared_weak_count *)*((void *)this + 7);
  *((void *)this + 6) = v6;
  *((void *)this + 7) = v5;
  if (v13)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    __int16 v6 = (char *)*((void *)this + 6);
  }
  return (*(uint64_t (**)(char *))(*(void *)v6 + 16))(v6);
}

void sub_221E8B1A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  __cxa_free_exception(v36);
  if (*(char *)(v34 + 383) < 0) {
    operator delete(*v37);
  }
  long long v39 = *(std::__shared_weak_count **)(v34 + 344);
  if (v39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  }
  std::unique_ptr<Phase::Controller::HrirAsset>::reset[abi:ne180100]((uint64_t **)(v34 + 320), 0);
  IR::IRDataAttributes::~IRDataAttributes(v35);
  long long v40 = *(std::__shared_weak_count **)(v34 + 152);
  if (v40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v40);
  }
  uint64_t v41 = 0;
  while (1)
  {
    long long v42 = *(std::__shared_weak_count **)(v34 + v41 + 136);
    if (v42) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v42);
    }
    long long v43 = *(std::__shared_weak_count **)(v34 + v41 + 120);
    if (v43) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v43);
    }
    long long v44 = *(std::__shared_weak_count **)(v34 + v41 + 104);
    if (v44) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v44);
    }
    v41 -= 48;
    if (v41 == -96)
    {
      std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v34);
      operator delete(v45);
      _Unwind_Resume(a1);
    }
  }
}

void sub_221E8B384()
{
}

uint64_t IR::IRDataAttributes::IRDataAttributes(uint64_t a1, uint64_t a2)
{
  CFTypeRef v4 = *(CFTypeRef *)a2;
  if (*(void *)a2) {
    CFRetain(*(CFTypeRef *)a2);
  }
  *(void *)a1 = v4;
  long long v5 = *(_OWORD *)(a2 + 8);
  long long v6 = *(_OWORD *)(a2 + 24);
  long long v7 = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v7;
  *(_OWORD *)(a1 + 24) = v6;
  *(_OWORD *)(a1 + 8) = v5;
  uint64_t v8 = *(void *)(a2 + 64);
  if (v8) {
    CFRetain(*(CFTypeRef *)(a2 + 64));
  }
  *(void *)(a1 + 64) = v8;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  uint64_t v9 = *(void *)(a2 + 88);
  if (v9) {
    CFRetain(*(CFTypeRef *)(a2 + 88));
  }
  *(void *)(a1 + 88) = v9;
  long long v10 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 105) = *(_OWORD *)(a2 + 105);
  *(_OWORD *)(a1 + 96) = v10;
  uint64_t v11 = *(void *)(a2 + 128);
  if (v11) {
    CFRetain(*(CFTypeRef *)(a2 + 128));
  }
  *(void *)(a1 + 128) = v11;
  uint64_t v12 = *(void *)(a2 + 136);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(void *)(a1 + 136) = v12;
  return a1;
}

void IR::IRDataAttributes::~IRDataAttributes(IR::IRDataAttributes *this)
{
  uint64_t v2 = (const void *)*((void *)this + 16);
  if (v2) {
    CFRelease(v2);
  }
  int v3 = (const void *)*((void *)this + 11);
  if (v3) {
    CFRelease(v3);
  }
  CFTypeRef v4 = (const void *)*((void *)this + 8);
  if (v4) {
    CFRelease(v4);
  }
  if (*(void *)this) {
    CFRelease(*(CFTypeRef *)this);
  }
}

void std::__shared_ptr_emplace<Phase::Controller::BinauralEncoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D471DA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Phase::Controller::BinauralEncoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D471DA8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C938A0);
}

uint64_t std::__shared_ptr_emplace<Phase::Controller::BinauralEncoder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void Phase::Controller::BinauralEncoder::~BinauralEncoder(Phase::Controller::BinauralEncoder *this)
{
  Phase::Controller::BinauralEncoder::~BinauralEncoder(this);

  JUMPOUT(0x223C938A0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t i;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  std::string __p;

  *(void *)this = &unk_26D471DE0;
  if (*((unsigned char *)this + 304))
  {
    IR::IRDataLoader::instance(this);
    if (*((char *)this + 359) < 0) {
      std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 42), *((void *)this + 43));
    }
    else {
      std::vector<char> __p = *(std::string *)((unsigned char *)this + 14);
    }
    IR::IRDataLoader::removePersonalizedHRTFListenerCallback();
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  if (*((char *)this + 359) < 0) {
    operator delete(*((void **)this + 42));
  }
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 40);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::unique_ptr<Phase::Controller::HrirAsset>::reset[abi:ne180100]((uint64_t **)this + 37, 0);
  IR::IRDataAttributes::~IRDataAttributes((Phase::Controller::BinauralEncoder *)((char *)this + 136));
  int v3 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  for (int i = 0; i != -96; i -= 48)
  {
    long long v5 = *(std::__shared_weak_count **)((char *)this + i + 112);
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
    long long v6 = *(std::__shared_weak_count **)((char *)this + i + 96);
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
    long long v7 = *(std::__shared_weak_count **)((char *)this + i + 80);
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void Phase::Controller::BinauralEncoder::Initialize(Phase::Controller::BinauralEncoder *this)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  *((_DWORD *)this + 46) = 0;
  if (*((unsigned char *)this + 304))
  {
    IR::IRDataLoader::instance(this);
    if (*((char *)this + 359) < 0) {
      std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 42), *((void *)this + 43));
    }
    else {
      std::string __p = *(std::string *)((unsigned char *)this + 14);
    }
    long long v5 = 0;
    uint64_t v2 = operator new(0x20uLL);
    *uint64_t v2 = &unk_26D471E98;
    v2[1] = Phase::Controller::BinauralEncoder::SwapSpatializationFilters;
    v2[2] = 0;
    v2[3] = this;
    long long v5 = v2;
    IR::IRDataLoader::addPersonalizedHRTFListenerCallback();
    std::__function::__value_func<void ()(BOOL,BOOL)>::~__value_func[abi:ne180100](v4);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  if ((Phase::Controller::BinauralEncoder::BuildFilterDatabase((uint64_t)this, 0) & 1) == 0) {
    std::terminate();
  }
  Phase::Controller::BinauralEncoder::SetFilterTypeInUse((unint64_t *)this, 0);
}

void sub_221E8B6C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::BinauralEncoder::GetFiltersAndDelays(Phase::Controller::BinauralEncoder *this, float a2, float a3, float a4, unsigned int a5, float **a6, float *a7)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  uint64_t v8 = (IR::IRData *)*((void *)this + 15);
  if (!v8)
  {
    int v24 = **(id **)(Phase::Logger::GetInstance(0) + 576);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v34 = "BinauralSpatializer.mm";
      __int16 v35 = 1024;
      int v36 = 150;
      _os_log_impl(&dword_221E5E000, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: nullptr != mIRData.get() is false.", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "PRECONDITION: nullptr != mIRData.get() is false.");
  }
  FilterLength = (Phase::Logger *)IR::IRData::getFilterLength(v8);
  if (FilterLength > a5)
  {
    uint64_t v26 = **(id **)(Phase::Logger::GetInstance(FilterLength) + 576);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v34 = "BinauralSpatializer.mm";
      __int16 v35 = 1024;
      int v36 = 152;
      _os_log_impl(&dword_221E5E000, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: inFilterLengthInsamples >= mIRData->getFilterLength() is false.", buf, 0x12u);
    }
    __int16 v27 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v27, "PRECONDITION: inFilterLengthInsamples >= mIRData->getFilterLength() is false.");
  }
  Phase::Controller::SpatializerEncoder::VerifyCoordinateRanges(this, a2, a3, a4);
  IR::IRCoordinates::IRCoordinates((IR::IRCoordinates *)buf);
  NumFiltersPerSpatialPoint = (Phase::Logger *)IR::IRData::getNumFiltersPerSpatialPoint(*((IR::IRData **)this + 15));
  if (NumFiltersPerSpatialPoint != 2)
  {
    int v28 = **(id **)(Phase::Logger::GetInstance(NumFiltersPerSpatialPoint) + 576);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)double v32 = 136315394;
      *(void *)&v32[4] = "BinauralSpatializer.mm";
      *(_WORD *)&v32[12] = 1024;
      *(_DWORD *)&v32[14] = 159;
      _os_log_impl(&dword_221E5E000, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: numOutputChannels == 2 is false.", v32, 0x12u);
    }
    __int16 v29 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](v29, "PRECONDITION: numOutputChannels == 2 is false.");
  }
  IR::IRCoordinates::set();
  IR::IRCoordinates::set();
  unsigned int v17 = IR::IRData::getFilterLength(*((IR::IRData **)this + 15));
  std::vector<float>::vector(&__p, v17);
  std::vector<std::vector<float>>::vector(v32, 2uLL, (uint64_t)&__p);
  if (__p)
  {
    uint64_t v31 = __p;
    operator delete(__p);
  }
  std::vector<float>::vector(&__p, 2uLL);
  IR::IRData::getInterpolatedTimeDomainCoeffs();
  uint64_t v18 = 0;
  for (unint64_t i = 0;
        (uint64_t)i < (*(int (**)(Phase::Controller::BinauralEncoder *))(*(void *)this + 48))(this);
        ++i)
  {
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v32[8] - *(void *)v32) >> 3) <= i) {
      std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]();
    }
    int v20 = *(const void **)(*(void *)v32 + v18);
    __int16 v21 = a6[i];
    unsigned int v22 = IR::IRData::getFilterLength(*((IR::IRData **)this + 15));
    memcpy(v21, v20, 4 * v22);
    a7[i] = *((float *)__p + i);
    v18 += 24;
  }
  if (__p)
  {
    uint64_t v31 = __p;
    operator delete(__p);
  }
  std::string __p = v32;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  return 1;
}

void sub_221E8BB00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  __cxa_free_exception(v13);
  _Unwind_Resume(a1);
}

void Phase::Controller::BinauralEncoder::AcquireFilters(Phase::Controller::BinauralEncoder *this@<X0>, void *a2@<X8>)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  unint64_t v3 = atomic_load((unint64_t *)this + 36);
  if (v3 >= 2) {
    std::__throw_out_of_range[abi:ne180100]("array::at");
  }
  long long v5 = (Phase::Logger *)Phase::Controller::SpatializerFilterHandle::SpatializerFilterHandle(a2, (Phase::Controller::BinauralEncoder *)((char *)this + 48 * v3 + 24));
  if (!*a2)
  {
    uint64_t v6 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v5)
                                                                                       + 576)));
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      Phase::Controller::BinauralEncoder::GetDescription((Phase::Controller::BinauralEncoder *)__p, this, a2);
      if (v9 >= 0) {
        long long v7 = __p;
      }
      else {
        long long v7 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136315906;
      uint64_t v11 = "BinauralSpatializer.mm";
      __int16 v12 = 1024;
      int v13 = 108;
      __int16 v14 = 2080;
      int v15 = v7;
      __int16 v16 = 2048;
      unint64_t v17 = v3;
      _os_log_impl(&dword_221E5E000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d [BinauralSpatializer] %s Acquiring invalid filter handle for filter type %lu", buf, 0x26u);
      if (v9 < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

void sub_221E8BCD8(_Unwind_Exception *a1)
{
  Phase::Controller::SpatializerFilterHandle::~SpatializerFilterHandle(v1);
  _Unwind_Resume(a1);
}

void Phase::Controller::BinauralEncoder::GetDescription(Phase::Controller::BinauralEncoder *this@<X0>, Phase::Controller::BinauralEncoder *a2@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)this + 32))(&v4);
  Phase::Controller::BinauralEncoder::GetDescription(a2, this, &v4);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_221E8BD88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t Phase::Controller::BinauralEncoder::GetOutputChannelCount(Phase::Controller::BinauralEncoder *this)
{
  return 2;
}

uint64_t Phase::Controller::BinauralEncoder::GetFilterLengthInSamples(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(*(void *)a2 + 8);
}

uint64_t Phase::Controller::SpatializerEncoder::GetTotalFilterLengthInSamples(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

unint64_t Phase::Controller::BinauralEncoder::GetNearestFilter(Phase::Controller::BinauralEncoder *this, Phase::Controller::SpatializerFilterDatabase **a2, float a3, float a4, void *a5)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (a5)
  {
    long long v10 = **(id **)(Phase::Logger::GetInstance(this) + 576);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      int v12 = 136315394;
      int v13 = "BinauralSpatializer.mm";
      __int16 v14 = 1024;
      int v15 = 181;
      _os_log_impl(&dword_221E5E000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: nullptr == pInWorkBuffer is false.", (uint8_t *)&v12, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "PRECONDITION: nullptr == pInWorkBuffer is false.");
  }
  Phase::Controller::SpatializerEncoder::VerifyCoordinateRanges(this, a3, a4, 0.0);
  uint64_t v8 = *a2;

  return Phase::Controller::SpatializerFilterDatabase::GetNearestFilter(v8, a3, a4);
}

void sub_221E8BF08(_Unwind_Exception *exception_object)
{
}

void Phase::Controller::BinauralEncoder::Update(Phase::Controller::BinauralEncoder *this, double a2)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  if (*((unsigned char *)this + 304))
  {
    uint64_t v2 = this;
    if (!*((unsigned char *)this + 329))
    {
      *((unsigned char *)this + 329) = 1;
      unint64_t v3 = (IR::IRDataLoader *)IR::IRDataLoader::instance(this);
      this = (Phase::Controller::BinauralEncoder *)IR::IRDataLoader::getPersonalizedHRTFStatus(v3);
      if (((unsigned __int16)this & 0x100) != 0)
      {
        Phase::Controller::BinauralEncoder::SwapSpatializationFilters(v2, 1, 1);
      }
      else if ((this & 1) == 0)
      {
        uint64_t v4 = (IR::IRDataLoader *)IR::IRDataLoader::instance(this);
        this = (Phase::Controller::BinauralEncoder *)IR::IRDataLoader::rebuildPersonalizedHRTFCache(v4);
      }
    }
    uint64_t v6 = *((void *)v2 + 39);
    long long v5 = (std::__shared_weak_count *)*((void *)v2 + 40);
    *((void *)v2 + 39) = 0;
    *((void *)v2 + 40) = 0;
    if (!v6) {
      goto LABEL_31;
    }
    if (*(void *)v6 != 1)
    {
LABEL_20:
      unint64_t v11 = *(void *)v6;
      unint64_t v12 = atomic_load((unint64_t *)v2 + 36);
      if (v11 != v12)
      {
        (*(void (**)(void **__return_ptr, Phase::Controller::BinauralEncoder *))(*(void *)v2 + 40))(v21, v2);
        Phase::Controller::BinauralEncoder::SetFilterTypeInUse((unint64_t *)v2, *(void *)v6);
        __int16 v14 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v13)
                                                                                            + 576)));
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          int v15 = v22;
          uint64_t v16 = (void **)v21[0];
          (*(void (**)(void **__return_ptr, Phase::Controller::BinauralEncoder *))(*(void *)v2 + 40))(__p, v2);
          unint64_t v17 = v21;
          if (v15 < 0) {
            unint64_t v17 = v16;
          }
          if (v20 >= 0) {
            uint64_t v18 = __p;
          }
          else {
            uint64_t v18 = (void **)__p[0];
          }
          *(_DWORD *)buf = 136315906;
          int v24 = "BinauralSpatializer.mm";
          __int16 v25 = 1024;
          int v26 = 372;
          __int16 v27 = 2080;
          int v28 = v17;
          __int16 v29 = 2080;
          uint64_t v30 = v18;
          _os_log_impl(&dword_221E5E000, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Swapped spatialization filters from %s to %s", buf, 0x26u);
          if (v20 < 0) {
            operator delete(__p[0]);
          }
        }

        atomic_store(1u, (unsigned __int8 *)v2 + 328);
        if (v22 < 0) {
          operator delete(v21[0]);
        }
      }
LABEL_31:
      if (v5) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      }
      return;
    }
    *(void *)uint64_t v6 = 0;
    if (*(unsigned char *)(v6 + 8))
    {
      if (!Phase::Controller::BinauralEncoder::BuildFilterDatabase((uint64_t)v2, 1)) {
        goto LABEL_20;
      }
LABEL_14:
      *(void *)uint64_t v6 = 1;
      goto LABEL_20;
    }
    if (*((void *)v2 + 9))
    {
      long long v7 = (IR::IRDataLoader *)IR::IRDataLoader::instance(this);
      uint64_t v8 = (Phase::Logger *)IR::IRDataLoader::checkIfPersonalizedHRTFIsAllowed(v7);
      if (v8) {
        goto LABEL_14;
      }
      char v9 = **(id **)(Phase::Logger::GetInstance(v8) + 576);
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_20;
      }
      *(_DWORD *)buf = 136315394;
      int v24 = "BinauralSpatializer.mm";
      __int16 v25 = 1024;
      int v26 = 352;
      long long v10 = "%25s:%-5d Use Personalized HRIR data not allowed - using Default.";
    }
    else
    {
      char v9 = **(id **)(Phase::Logger::GetInstance(this) + 576);
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_20;
      }
      *(_DWORD *)buf = 136315394;
      int v24 = "BinauralSpatializer.mm";
      __int16 v25 = 1024;
      int v26 = 348;
      long long v10 = "%25s:%-5d No valid Personalized HRIR data database found - using Default.";
    }
    _os_log_impl(&dword_221E5E000, v9, OS_LOG_TYPE_DEFAULT, v10, buf, 0x12u);
    goto LABEL_20;
  }
}

void sub_221E8C250(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Controller::BinauralEncoder::HaveFiltersChanged(Phase::Controller::BinauralEncoder *this)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)this + 328);
  if (v1) {
    atomic_store(0, (unsigned __int8 *)this + 328);
  }
  return v1 & 1;
}

void Phase::Controller::SpatializerFilterHandle::~SpatializerFilterHandle(Phase::Controller::SpatializerFilterHandle *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

uint64_t **std::unique_ptr<Phase::Controller::HrirAsset>::reset[abi:ne180100](uint64_t **result, uint64_t *a2)
{
  uint64_t v2 = *result;
  id *result = a2;
  if (v2)
  {
    uint64_t v3 = *v2;
    *uint64_t v2 = 0;
    if (v3) {
      std::default_delete<Phase::Controller::HrirAsset::Implementation>::operator()[abi:ne180100]((uint64_t)v2, v3);
    }
    JUMPOUT(0x223C938A0);
  }
  return result;
}

void Phase::Controller::BinauralEncoder::SwapSpatializationFilters(Phase::Controller::BinauralEncoder *this, char a2, char a3)
{
  if (a3)
  {
    long long v5 = operator new(0x28uLL);
    v5[1] = 0;
    void v5[2] = 0;
    void *v5 = &unk_26D471E60;
    *((unsigned char *)v5 + 32) = a2;
    uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 40);
    *((void *)this + 40) = v5;
    v5[3] = 1;
  }
  else
  {
    long long v5 = operator new(0x28uLL);
    v5[1] = 0;
    void v5[2] = 0;
    void *v5 = &unk_26D471E60;
    *((unsigned char *)v5 + 32) = 0;
    uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 40);
    *((void *)this + 40) = v5;
    v5[3] = 0;
  }
  *((void *)this + 39) = v5 + 3;
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

std::__shared_weak_count *Phase::Controller::BinauralEncoder::BuildFilterDatabase(uint64_t a1, uint64_t a2)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  *(_DWORD *)(a1 + 184) = 2 * (a2 == 1);
  IR::IRDataLoader::instance((IR::IRDataLoader *)a1);
  CFTypeRef cf = 0;
  memset(__p, 0, 24);
  IR::IRDataLoader::load();
  long long v4 = v37;
  long long v37 = 0uLL;
  long long v5 = *(std::__shared_weak_count **)(a1 + 128);
  *(_OWORD *)(a1 + 120) = v4;
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    if (*((void *)&v37 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v37 + 1));
    }
  }
  if (*(void *)__p)
  {
    *(void *)&__p[8] = *(void *)__p;
    operator delete(*(void **)__p);
  }
  if (cf) {
    CFRelease(cf);
  }
  uint64_t v6 = *(IR::IRData **)(a1 + 120);
  if (a2 != 1) {
    goto LABEL_11;
  }
  IRDataAttributes = (Phase::Logger *)IR::IRData::getIRDataAttributes(v6);
  if (*((_DWORD *)IRDataAttributes + 12))
  {
    uint64_t v6 = *(IR::IRData **)(a1 + 120);
LABEL_11:
    int FilterLength = IR::IRData::getFilterLength(v6);
    IR::IRData::getMaxDelay(*(IR::IRData **)(a1 + 120));
    __int32 v10 = FilterLength + (int)v9;
    v11.i32[0] = v10;
    uint8x8_t v12 = (uint8x8_t)vcnt_s8(v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.i32[0] != 1)
    {
      unsigned __int32 v13 = v10 - 1;
      unsigned int v14 = 1;
      do
      {
        v13 |= v13 >> v14;
        BOOL v15 = v14 >= 0x10;
        v14 *= 2;
      }
      while (!v15);
      __int32 v10 = v13 + 1;
    }
    *(void *)std::string __p = *(void *)(a1 + 16);
    long long v42 = 0;
    int v41 = v10;
    std::allocate_shared[abi:ne180100]<Phase::Controller::SpatializerFilterDatabase,std::allocator<Phase::Controller::SpatializerFilterDatabase>,Phase::Controller::Spatializer const*&,Phase::Controller::SpatializerEncoder const*&,unsigned int &,void>((const Phase::Controller::Spatializer **)__p, &v42, &v41, &v37);
    long long v38 = 0u;
    long long v39 = 0u;
    uint64_t v16 = a1 + 24;
    uint64_t v17 = a1 + 24 + 48 * a2;
    long long v18 = v37;
    if (*((void *)&v37 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v37 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    __int16 v19 = *(std::__shared_weak_count **)(v17 + 8);
    *(_OWORD *)uint64_t v17 = v18;
    if (v19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    }
    long long v20 = v38;
    if (*((void *)&v38 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v38 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    *(void *)(v16 + 48 * a2 + 16) = v20;
    uint64_t v21 = v16 + 48 * a2;
    char v22 = *(std::__shared_weak_count **)(v21 + 24);
    *(void *)(v21 + 24) = *((void *)&v20 + 1);
    if (v22) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    }
    long long v23 = v39;
    if (*((void *)&v39 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v39 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    *(void *)(v16 + 48 * a2 + 32) = v23;
    uint64_t v24 = v16 + 48 * a2;
    __int16 v25 = *(std::__shared_weak_count **)(v24 + 40);
    *(void *)(v24 + 40) = *((void *)&v23 + 1);
    if (v25) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v25);
    }
    int v26 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance((Phase::Logger *)v25)
                                                                                        + 576)));
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      if (a2) {
        __int16 v27 = "Personalized";
      }
      else {
        __int16 v27 = "Default";
      }
      int v28 = IR::IRData::getFilterLength(*(IR::IRData **)(a1 + 120));
      IR::IRData::getMaxDelay(*(IR::IRData **)(a1 + 120));
      int v29 = *(_DWORD *)(v37 + 8);
      *(_DWORD *)std::string __p = 136316418;
      *(void *)&__p[4] = "BinauralSpatializer.mm";
      *(_WORD *)&__p[12] = 1024;
      *(_DWORD *)&__p[14] = 277;
      *(_WORD *)&unsigned char __p[18] = 2080;
      *(void *)&__p[20] = v27;
      __int16 v44 = 1024;
      int v45 = v28;
      __int16 v46 = 2048;
      double v47 = v30;
      __int16 v48 = 1024;
      int v49 = v29;
      _os_log_impl(&dword_221E5E000, v26, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Built %s HRIR filter database. Filter Length: %d, Max Delay: %f, Total Filter Length: %d", __p, 0x32u);
    }

    uint64_t v31 = *(std::__shared_weak_count **)(a1 + 128);
    *(void *)(a1 + 120) = 0;
    *(void *)(a1 + 128) = 0;
    if (v31) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v31);
    }
    if (*((void *)&v39 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v39 + 1));
    }
    if (*((void *)&v38 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v38 + 1));
    }
    if (*((void *)&v37 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v37 + 1));
    }
    return (std::__shared_weak_count *)1;
  }
  uint64_t v33 = **(id **)(Phase::Logger::GetInstance(IRDataAttributes) + 576);
  if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)std::string __p = 136315394;
    *(void *)&__p[4] = "BinauralSpatializer.mm";
    *(_WORD *)&__p[12] = 1024;
    *(_DWORD *)&__p[14] = 254;
    _os_log_impl(&dword_221E5E000, v33, OS_LOG_TYPE_ERROR, "%25s:%-5d IRDataLoader failed to load personalized HRIR. Skipping database initialization.", __p, 0x12u);
  }
  uint64_t v34 = *(std::__shared_weak_count **)(a1 + 80);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  __int16 v35 = *(std::__shared_weak_count **)(a1 + 96);
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  int v36 = *(std::__shared_weak_count **)(a1 + 112);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  BOOL result = *(std::__shared_weak_count **)(a1 + 128);
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  if (result)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](result);
    return 0;
  }
  return result;
}

void sub_221E8C948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void Phase::Controller::BinauralEncoder::SetFilterTypeInUse(unint64_t *a1, unint64_t a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  atomic_store(a2, a1 + 36);
  uint64_t v3 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance((Phase::Logger *)a1)
                                                                                     + 576)));
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v4 = atomic_load(a1 + 36);
    (*(void (**)(void **__return_ptr, unint64_t *))(*a1 + 40))(__p, a1);
    long long v5 = "Personalized";
    if (!v4) {
      long long v5 = "Default";
    }
    __int32 v10 = "BinauralSpatializer.mm";
    *(_DWORD *)buf = 136315906;
    __int16 v11 = 1024;
    if (v8 >= 0) {
      uint64_t v6 = __p;
    }
    else {
      uint64_t v6 = (void **)__p[0];
    }
    int v12 = 384;
    __int16 v13 = 2080;
    unsigned int v14 = v5;
    __int16 v15 = 2080;
    uint64_t v16 = v6;
    _os_log_impl(&dword_221E5E000, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Using %s HRIR filter database - %s.", buf, 0x26u);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_221E8CB00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Phase::Controller::BinauralEncoder::FilterSwapInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D471E60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Phase::Controller::BinauralEncoder::FilterSwapInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D471E60;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C938A0);
}

void std::__function::__func<std::__bind<void (Phase::Controller::BinauralEncoder::*)(BOOL,BOOL),Phase::Controller::BinauralEncoder*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,std::allocator<std::__bind<void (Phase::Controller::BinauralEncoder::*)(BOOL,BOOL),Phase::Controller::BinauralEncoder*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>>,void ()(BOOL,BOOL)>::~__func()
{
}

__n128 std::__function::__func<std::__bind<void (Phase::Controller::BinauralEncoder::*)(BOOL,BOOL),Phase::Controller::BinauralEncoder*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,std::allocator<std::__bind<void (Phase::Controller::BinauralEncoder::*)(BOOL,BOOL),Phase::Controller::BinauralEncoder*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>>,void ()(BOOL,BOOL)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26D471E98;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<std::__bind<void (Phase::Controller::BinauralEncoder::*)(BOOL,BOOL),Phase::Controller::BinauralEncoder*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,std::allocator<std::__bind<void (Phase::Controller::BinauralEncoder::*)(BOOL,BOOL),Phase::Controller::BinauralEncoder*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>>,void ()(BOOL,BOOL)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D471E98;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::__bind<void (Phase::Controller::BinauralEncoder::*)(BOOL,BOOL),Phase::Controller::BinauralEncoder*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,std::allocator<std::__bind<void (Phase::Controller::BinauralEncoder::*)(BOOL,BOOL),Phase::Controller::BinauralEncoder*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>>,void ()(BOOL,BOOL)>::operator()(void *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3 = a1[2];
  unint64_t v4 = (uint64_t (*)(void *, BOOL, BOOL))a1[1];
  long long v5 = (void *)(a1[3] + (v3 >> 1));
  if (v3) {
    unint64_t v4 = *(uint64_t (**)(void *, BOOL, BOOL))(*v5 + v4);
  }
  return v4(v5, *a2 != 0, *a3 != 0);
}

void *std::__function::__value_func<void ()(BOOL,BOOL)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void applesauce::CF::DataRef::~DataRef(const void **this)
{
  unsigned __int8 v1 = *this;
  if (v1) {
    CFRelease(v1);
  }
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
}

void sub_221E8CD98(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  __n128 result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
  return result;
}

void *std::vector<float>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<float>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_221E8CE3C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<std::vector<float>>::vector(void *a1, unint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<float>>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v6 = (void *)a1[1];
    uint64_t v7 = 3 * a2;
    char v8 = &v6[3 * a2];
    uint64_t v9 = 8 * v7;
    do
    {
      void *v6 = 0;
      v6[1] = 0;
      v6[2] = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v6, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
      v6 += 3;
      v9 -= 24;
    }
    while (v9);
    a1[1] = v8;
  }
  return a1;
}

void sub_221E8CEF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

char *std::vector<std::vector<float>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void *std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    __n128 result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_221E8CFC8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::vector<float>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      uint64_t v6 = *(void **)(v4 - 24);
      v4 -= 24;
      long long v5 = v6;
      if (v6)
      {
        *(void *)(v2 - 16) = v5;
        operator delete(v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void std::vector<std::vector<float>>::__throw_out_of_range[abi:ne180100]()
{
}

void *Phase::Controller::BinauralEncoder::GetDescription(Phase::Controller::BinauralEncoder *this, const Phase::Controller::SpatializerFilterHandle *a2, void *a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  atomic_load((unint64_t *)a2 + 36);
  unint64_t v5 = *(void *)a2;
  if (*a3)
  {
    (*(void (**)(const Phase::Controller::SpatializerFilterHandle *, void *))(v5 + 56))(a2, a3);
    (*(void (**)(const Phase::Controller::SpatializerFilterHandle *))(*(void *)a2 + 48))(a2);
    snprintf(__str, 0x100uLL, "<Encoder Type: Binaural, Filter Type: %s, Filter Length: %d, Output Channel Count: %d>");
  }
  else
  {
    (*(void (**)(const Phase::Controller::SpatializerFilterHandle *))(v5 + 48))(a2);
    snprintf(__str, 0x100uLL, "<Encoder Type: Binaural, Filter Type: %s, Filter Length: Unavailable, Output Channel Count: %d>");
  }
  return std::string::basic_string[abi:ne180100]<0>(this, __str);
}

std::logic_error *_ZN5Phase11OutOfMemoryCI1St11logic_errorEPKc(std::logic_error *a1, const char *a2)
{
  __n128 result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)&unk_26D471F10;
  return result;
}

double Phase::BitBlockAllocator<Phase::SystemAllocator>::Destroy(uint64_t a1)
{
  Phase::BitBlockAllocator<Phase::SystemAllocator>::Reset((unsigned __int16 *)a1);
  if (*(void *)(a1 + 32)) {
    operator delete(*(void **)(a1 + 16));
  }
  *(void *)a1 = 0xFFFF00000000;
  *(_DWORD *)(a1 + 8) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void Phase::BitBlockAllocator<Phase::SystemAllocator>::Initialize(uint64_t a1, int a2, __int16 a3, uint64_t a4, uint64_t a5)
{
  *(void *)a1 = 0xFFFF00000000;
  *(_DWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  signed int v5 = (a2 + 63) & 0xFFFFFFC0;
  if (v5 > 0x8000) {
    __assert_rtn("Initialize", "BitBlockAllocator.cpp", 28, "maximumBlockCount <= kBlockMax");
  }
  int v10 = ((0x8000 - v5) & ((0x8000 - v5) >> 31)) + v5;
  size_t v11 = 8 * (((v10 >> 6) + 63) >> 6);
  int v12 = (Phase *)(v11 + 16 * (v10 >> 6));
  if (v12) {
    int v12 = (Phase *)operator new((size_t)v12);
  }
  *(_WORD *)a1 = v10;
  *(_WORD *)(a1 + 6) = a3;
  *(void *)(a1 + 16) = v12;
  *(void *)(a1 + 24) = (char *)v12 + v11;
  int v13 = 1;
  *(void *)(a1 + 32) = a4;
  *(void *)(a1 + 40) = a5;
  do
  {
    __int16 v14 = v13;
    __int16 v15 = v13 & a3;
    v13 *= 2;
  }
  while (!v15);
  *(_WORD *)(a1 + 8) = v14;
  Phase::Memset8(v12, 0, v11);
  uint64_t v16 = *(Phase **)(a1 + 24);

  Phase::Memset8(v16, 0, 16 * (v10 >> 6));
}

void Phase::BitBlockAllocator<Phase::SystemAllocator>::Reset(unsigned __int16 *a1)
{
  *(_DWORD *)(a1 + 1) = -65536;
  a1[5] = 0;
  unint64_t v2 = *a1;
  unint64_t v3 = v2 >> 6;
  Phase::Memset8(*((Phase **)a1 + 2), 0, (((v2 >> 6) + 63) >> 3) & 0xF8);
  if (v2 >= 0x40)
  {
    uint64_t v4 = (void *)*((void *)a1 + 3);
    if (v3 <= 1) {
      int v5 = 1;
    }
    else {
      int v5 = v3;
    }
    do
    {
      uint64_t v6 = (void *)v4[1];
      if (v6)
      {
        operator delete(v6);
      }
      else if (*v4)
      {
        __assert_rtn("Reset", "BitBlockAllocator.cpp", 86, "pBottomEntry->mBits == 0");
      }
      void *v4 = 0;
      v4[1] = 0;
      v4 += 2;
      --v5;
    }
    while (v5);
  }
}

char *Phase::BitBlockAllocator<Phase::SystemAllocator>::Allocate(Phase::Logger *a1)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(unsigned __int16 *)a1;
  if (!*(_WORD *)a1)
  {
LABEL_5:
    uint64_t v6 = **(NSObject ***)(Phase::Logger::GetInstance(a1) + 304);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      int v24 = 136315394;
      __int16 v25 = "BitBlockAllocator.cpp";
      __int16 v26 = 1024;
      int v27 = 144;
      _os_log_impl(&dword_221E5E000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (Phase::OutOfMemory): \"BitBlockAllocator::Allocate(): failed!\"", (uint8_t *)&v24, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _ZN5Phase11OutOfMemoryCI1St11logic_errorEPKc(exception, "BitBlockAllocator::Allocate(): failed!");
  }
  int v3 = 0;
  uint64_t v4 = (void *)*((void *)a1 + 2);
  uint64_t v5 = *((void *)a1 + 3);
  while (*v4 == -1)
  {
    ++v4;
    v5 += 1024;
    v3 += 4096;
    if (((v1 + 4095) & 0x1F000) == v3) {
      goto LABEL_5;
    }
  }
  unint64_t v8 = __clz(~*v4);
  uint64_t v9 = *(void *)(v5 + 16 * v8);
  unsigned int v10 = __clz(~v9);
  int v11 = v10 + (v8 << 6) + v3;
  if (v11 >= v1)
  {
    char v22 = **(NSObject ***)(Phase::Logger::GetInstance(a1) + 304);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      int v24 = 136315394;
      __int16 v25 = "BitBlockAllocator.cpp";
      __int16 v26 = 1024;
      int v27 = 140;
      _os_log_impl(&dword_221E5E000, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (Phase::OutOfMemory): \"BitBlockAllocator::Allocate(): failed!\"", (uint8_t *)&v24, 0x12u);
    }
    long long v23 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _ZN5Phase11OutOfMemoryCI1St11logic_errorEPKc(v23, "BitBlockAllocator::Allocate(): failed!");
  }
  uint64_t v12 = v5 + 16 * v8;
  int v13 = *(char **)(v12 + 8);
  if (!v13)
  {
    uint64_t v14 = *((unsigned __int16 *)a1 + 3);
    if (*((_WORD *)a1 + 3))
    {
      size_t v15 = v14 << 6;
      std::align_val_t v16 = (unint64_t)*((unsigned __int16 *)a1 + 4);
      if (!*((_WORD *)a1 + 4))
      {
        int v13 = (char *)operator new(v14 << 6);
        goto LABEL_18;
      }
      if ((v16 & (v16 - 1)) == 0)
      {
        int v13 = (char *)operator new(v15, v16);
LABEL_18:
        *(void *)(v12 + 8) = v13;
        uint64_t v9 = *(void *)(v5 + 16 * v8);
        goto LABEL_19;
      }
      uint64_t v17 = **(NSObject ***)(Phase::Logger::GetInstance(0) + 176);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        int v24 = 136315650;
        __int16 v25 = "SystemAllocator.hpp";
        __int16 v26 = 1024;
        int v27 = 47;
        __int16 v28 = 2048;
        size_t v29 = v15;
        _os_log_impl(&dword_221E5E000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d Error allocating memory - alignment must be power of two. Alignment requested %zu", (uint8_t *)&v24, 0x1Cu);
      }
    }
    int v13 = 0;
    goto LABEL_18;
  }
LABEL_19:
  unint64_t v18 = 0x8000000000000000 >> v10;
  if (v10 > 0x3F) {
    unint64_t v18 = 0;
  }
  unint64_t v19 = v9 | v18;
  *(void *)(v5 + 16 * v8) = v19;
  if (v19 == -1) {
    *v4 |= 0x8000000000000000 >> v8;
  }
  ++*((_WORD *)a1 + 1);
  ++*((_WORD *)a1 + 5);
  int v20 = *((__int16 *)a1 + 2);
  if (v20 <= v11) {
    LOWORD(v20) = v11;
  }
  *((_WORD *)a1 + 2) = v20;
  return &v13[v10 * (unint64_t)*((unsigned __int16 *)a1 + 3)];
}

void sub_221E8D774(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Phase::BitBlockAllocator<Phase::SystemAllocator>::Free(uint64_t a1, unsigned int a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if ((a2 & 0x80000000) != 0 || (int v4 = *(__int16 *)(a1 + 4), v4 < (int)a2))
  {
    int v11 = **(NSObject ***)(Phase::Logger::GetInstance((Phase::Logger *)a1) + 304);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      int v15 = 136315650;
      std::align_val_t v16 = "BitBlockAllocator.cpp";
      __int16 v17 = 1024;
      int v18 = 151;
      __int16 v19 = 1024;
      unsigned int v20 = a2;
      _os_log_impl(&dword_221E5E000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::out_of_range) [(inIndex < 0) || (inIndex > mHighestInUse) is true]: \"BitBlockAllocator::Free(): Invalid index %d!\"", (uint8_t *)&v15, 0x18u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::out_of_range::out_of_range[abi:ne180100](exception, "BitBlockAllocator::Free(): Invalid index %d!");
  }
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = a2 >> 6;
  uint64_t v7 = (unint64_t *)(v5 + 16 * v6);
  if ((*v7 & (0x8000000000000000 >> a2)) == 0)
  {
    int v13 = **(NSObject ***)(Phase::Logger::GetInstance((Phase::Logger *)a1) + 304);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      int v15 = 136315394;
      std::align_val_t v16 = "BitBlockAllocator.cpp";
      __int16 v17 = 1024;
      int v18 = 158;
      _os_log_impl(&dword_221E5E000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [(pBottomEntry->mBits & maskBottom) == 0 is true]: \"BitBlockAllocator::Free(): Internal failure!\"", (uint8_t *)&v15, 0x12u);
    }
    uint64_t v14 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v14, "BitBlockAllocator::Free(): Internal failure!");
  }
  *(void *)(*(void *)(a1 + 16) + 8 * (a2 >> 12)) &= ~(0x8000000000000000 >> v6);
  unint64_t v8 = *v7 & ~(0x8000000000000000 >> a2);
  unint64_t *v7 = v8;
  if (!v8)
  {
    uint64_t v9 = v5 + 16 * v6;
    operator delete(*(void **)(v9 + 8));
    *(void *)(v9 + 8) = 0;
    LOWORD(v4) = *(_WORD *)(a1 + 4);
  }
  --*(_WORD *)(a1 + 2);
  if (a2 == (__int16)v4)
  {
    int v10 = (__int16)(v4 - 1);
    if (v10 >= -1) {
      LOWORD(v10) = -1;
    }
    while (1)
    {
      LOWORD(v4) = v4 - 1;
      if ((v4 & 0x8000) != 0) {
        break;
      }
      if (((*(void *)(*(void *)(a1 + 24) + 16 * ((unsigned __int16)v4 >> 6)) << v4) & 0x8000000000000000) != 0) {
        goto LABEL_13;
      }
    }
    LOWORD(v4) = v10;
LABEL_13:
    *(_WORD *)(a1 + 4) = v4;
  }
}

void sub_221E8DA0C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Phase::OutOfMemory::~OutOfMemory(std::logic_error *this)
{
  std::logic_error::~logic_error(this);

  JUMPOUT(0x223C938A0);
}

double Phase::Controller::sClamp<double>(Phase::Logger *a1, double a2, double a3, double a4)
{
  double v4 = a2;
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (a2 < a3 || a2 > a4)
  {
    unint64_t v8 = **(id **)(Phase::Logger::GetInstance(a1) + 704);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      int v10 = 136316162;
      int v11 = "CvmParameter.hpp";
      __int16 v12 = 1024;
      int v13 = 33;
      __int16 v14 = 2048;
      double v15 = v4;
      __int16 v16 = 2048;
      double v17 = a3;
      __int16 v18 = 2048;
      double v19 = a4;
      _os_log_impl(&dword_221E5E000, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d Value is out of bounds. Clamping %f to range [%f, %f]", (uint8_t *)&v10, 0x30u);
    }
    return fmin(fmax(v4, a3), a4);
  }
  return v4;
}

Phase::Controller::DVM::ChannelAllocator *Phase::Controller::DVM::ChannelAllocator::ChannelAllocator(Phase::Controller::DVM::ChannelAllocator *this, int a2)
{
  signed int v3 = (a2 + 63) & 0xFFFFFFC0;
  *((_DWORD *)this + 4) = a2;
  *((_DWORD *)this + 5) = v3;
  *((void *)this + 3) = 0;
  *(void *)this = malloc_type_malloc(8 * (v3 >> 6), 0x100004000313F17uLL);
  *((void *)this + 1) = malloc_type_malloc(4 * *((int *)this + 5), 0x100004052888210uLL);
  bzero(*(void **)this, 8 * (*((_DWORD *)this + 5) / 64));
  bzero(*((void **)this + 1), 4 * *((int *)this + 5));
  *((void *)this + 3) = 0;
  return this;
}

void Phase::Controller::DVM::ChannelAllocator::~ChannelAllocator(void **this)
{
}

uint64_t Phase::Controller::DVM::ChannelAllocator::ReserveChannel(Phase::Controller::DVM::ChannelAllocator *this, int a2)
{
  int v2 = *((_DWORD *)this + 5);
  if (v2 < 64) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v3 = 0;
  double v4 = *(uint64_t **)this;
  uint64_t v5 = v2 & 0xFFFFFFC0;
  while (*v4 == -1)
  {
    ++v4;
    v3 -= 64;
    if (!(v5 + v3)) {
      return 0xFFFFFFFFLL;
    }
  }
  uint64_t v6 = *v4;
  unint64_t v7 = __clz(__rbit64(~*v4));
  uint64_t v8 = v7 - v3;
  if ((int)v8 >= *((_DWORD *)this + 4)) {
    return 0xFFFFFFFFLL;
  }
  *(_DWORD *)(*((void *)this + 1) + 4 * v8) = a2;
  uint64_t *v4 = (1 << v7) | v6;
  int v9 = *((_DWORD *)this + 6);
  int v10 = v9 + 1;
  if (v9 + 1 > *((_DWORD *)this + 7)) {
    int v11 = v9 + 1;
  }
  else {
    int v11 = *((_DWORD *)this + 7);
  }
  *((_DWORD *)this + 6) = v10;
  *((_DWORD *)this + 7) = v11;
  return v8;
}

uint64_t Phase::ChannelLayout::GetLayoutTagFromString(uint64_t a1)
{
  uint64_t v1 = (std::string *)MEMORY[0x270FA5388](a1);
  uint64_t v348 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&v64, "Mono");
  int v66 = 6553601;
  std::string::basic_string[abi:ne180100]<0>(v67, "Stereo");
  int v68 = 6619138;
  std::string::basic_string[abi:ne180100]<0>(&v69, "StereoHeadphones");
  int v71 = 6684674;
  std::string::basic_string[abi:ne180100]<0>(&v72, "MatrixStereo");
  int v73 = 6750210;
  std::string::basic_string[abi:ne180100]<0>(v74, "MidSide");
  int v75 = 6815746;
  std::string::basic_string[abi:ne180100]<0>(v76, "XY");
  int v77 = 6881282;
  std::string::basic_string[abi:ne180100]<0>(v78, "Binaural");
  int v79 = 6946818;
  std::string::basic_string[abi:ne180100]<0>(v80, "Ambisonic_B_Format");
  int v81 = 7012356;
  std::string::basic_string[abi:ne180100]<0>(v82, "Quadraphonic");
  int v83 = 7077892;
  std::string::basic_string[abi:ne180100]<0>(v84, "Pentagonal");
  int v85 = 7143429;
  std::string::basic_string[abi:ne180100]<0>(v86, "Hexagonal");
  int v87 = 7208966;
  std::string::basic_string[abi:ne180100]<0>(v88, "Octagonal");
  int v89 = 7274504;
  std::string::basic_string[abi:ne180100]<0>(v90, "Cube");
  int v91 = 7340040;
  std::string::basic_string[abi:ne180100]<0>(v92, "MPEG_1_0");
  int v93 = 6553601;
  std::string::basic_string[abi:ne180100]<0>(v94, "MPEG_2_0");
  int v95 = 6619138;
  std::string::basic_string[abi:ne180100]<0>(v96, "MPEG_3_0_A");
  int v97 = 7405571;
  std::string::basic_string[abi:ne180100]<0>(v98, "MPEG_3_0_B");
  uint64_t v51 = v1;
  int v99 = 7471107;
  std::string::basic_string[abi:ne180100]<0>(v100, "MPEG_4_0_A");
  int v101 = 7536644;
  std::string::basic_string[abi:ne180100]<0>(v102, "MPEG_4_0_B");
  int v103 = 7602180;
  std::string::basic_string[abi:ne180100]<0>(v104, "MPEG_5_0_A");
  int v105 = 7667717;
  std::string::basic_string[abi:ne180100]<0>(v106, "MPEG_5_0_B");
  int v107 = 7733253;
  std::string::basic_string[abi:ne180100]<0>(v108, "MPEG_5_0_C");
  int v109 = 7798789;
  std::string::basic_string[abi:ne180100]<0>(v110, "MPEG_5_0_D");
  int v111 = 7864325;
  std::string::basic_string[abi:ne180100]<0>(v112, "MPEG_5_1_A");
  int v113 = 7929862;
  std::string::basic_string[abi:ne180100]<0>(v114, "MPEG_5_1_B");
  int v115 = 7995398;
  std::string::basic_string[abi:ne180100]<0>(v116, "MPEG_5_1_C");
  int v117 = 8060934;
  std::string::basic_string[abi:ne180100]<0>(v118, "MPEG_5_1_D");
  int v119 = 8126470;
  std::string::basic_string[abi:ne180100]<0>(v120, "MPEG_6_1_A");
  int v121 = 8192007;
  std::string::basic_string[abi:ne180100]<0>(v122, "MPEG_7_1_A");
  int v123 = 8257544;
  std::string::basic_string[abi:ne180100]<0>(v124, "MPEG_7_1_B");
  int v125 = 8323080;
  std::string::basic_string[abi:ne180100]<0>(v126, "MPEG_7_1_C");
  int v127 = 8388616;
  std::string::basic_string[abi:ne180100]<0>(v128, "Emagic_Default_7_1");
  int v129 = 8454152;
  std::string::basic_string[abi:ne180100]<0>(v130, "SMPTE_DTV");
  int v131 = 8519688;
  std::string::basic_string[abi:ne180100]<0>(v132, "ITU_1_0");
  int v133 = 6553601;
  std::string::basic_string[abi:ne180100]<0>(v134, "ITU_2_0");
  int v135 = 6619138;
  std::string::basic_string[abi:ne180100]<0>(v136, "ITU_2_1");
  int v137 = 8585219;
  std::string::basic_string[abi:ne180100]<0>(v138, "ITU_2_2");
  int v139 = 8650756;
  std::string::basic_string[abi:ne180100]<0>(v140, "ITU_3_0");
  int v141 = 7405571;
  std::string::basic_string[abi:ne180100]<0>(v142, "ITU_3_1");
  int v143 = 7536644;
  std::string::basic_string[abi:ne180100]<0>(v144, "ITU_3_2");
  int v145 = 7667717;
  std::string::basic_string[abi:ne180100]<0>(v146, "ITU_3_2_1");
  int v147 = 7929862;
  std::string::basic_string[abi:ne180100]<0>(v148, "ITU_3_4_1");
  int v149 = 8388616;
  std::string::basic_string[abi:ne180100]<0>(v150, "DVD_0");
  int v151 = 6553601;
  std::string::basic_string[abi:ne180100]<0>(v152, "DVD_1");
  int v153 = 6619138;
  std::string::basic_string[abi:ne180100]<0>(v154, "DVD_2");
  int v155 = 8585219;
  std::string::basic_string[abi:ne180100]<0>(v156, "DVD_3");
  int v157 = 8650756;
  std::string::basic_string[abi:ne180100]<0>(v158, "DVD_4");
  int v159 = 8716291;
  std::string::basic_string[abi:ne180100]<0>(v160, "DVD_5");
  int v161 = 8781828;
  std::string::basic_string[abi:ne180100]<0>(v162, "DVD_6");
  int v163 = 8847365;
  std::string::basic_string[abi:ne180100]<0>(v164, "DVD_7");
  int v165 = 7405571;
  std::string::basic_string[abi:ne180100]<0>(v166, "DVD_8");
  int v167 = 7536644;
  std::string::basic_string[abi:ne180100]<0>(v168, "DVD_9");
  int v169 = 7667717;
  std::string::basic_string[abi:ne180100]<0>(v170, "DVD_10");
  int v171 = 8912900;
  std::string::basic_string[abi:ne180100]<0>(v172, "DVD_11");
  int v173 = 8978437;
  std::string::basic_string[abi:ne180100]<0>(v174, "DVD_12");
  int v175 = 7929862;
  std::string::basic_string[abi:ne180100]<0>(v176, "DVD_13");
  int v177 = 7536644;
  std::string::basic_string[abi:ne180100]<0>(v178, "DVD_14");
  int v179 = 7667717;
  std::string::basic_string[abi:ne180100]<0>(v180, "DVD_15");
  int v181 = 8912900;
  std::string::basic_string[abi:ne180100]<0>(v182, "DVD_16");
  int v183 = 8978437;
  std::string::basic_string[abi:ne180100]<0>(v184, "DVD_17");
  int v185 = 7929862;
  std::string::basic_string[abi:ne180100]<0>(v186, "DVD_18");
  int v187 = 9043973;
  std::string::basic_string[abi:ne180100]<0>(v188, "DVD_19");
  int v189 = 7733253;
  std::string::basic_string[abi:ne180100]<0>(v190, "DVD_20");
  int v191 = 7995398;
  std::string::basic_string[abi:ne180100]<0>(v192, "AudioUnit_4");
  int v193 = 7077892;
  std::string::basic_string[abi:ne180100]<0>(v194, "AudioUnit_5");
  int v195 = 7143429;
  std::string::basic_string[abi:ne180100]<0>(v196, "AudioUnit_6");
  int v197 = 7208966;
  std::string::basic_string[abi:ne180100]<0>(v198, "AudioUnit_8");
  int v199 = 7274504;
  std::string::basic_string[abi:ne180100]<0>(v200, "AudioUnit_5_0");
  int v201 = 7733253;
  std::string::basic_string[abi:ne180100]<0>(v202, "AudioUnit_6_0");
  int v203 = 9109510;
  std::string::basic_string[abi:ne180100]<0>(v204, "AudioUnit_7_0");
  int v205 = 9175047;
  std::string::basic_string[abi:ne180100]<0>(v206, "AudioUnit_7_0_Front");
  int v207 = 9699335;
  std::string::basic_string[abi:ne180100]<0>(v208, "AudioUnit_5_1");
  int v209 = 7929862;
  std::string::basic_string[abi:ne180100]<0>(v210, "AudioUnit_6_1");
  int v211 = 8192007;
  std::string::basic_string[abi:ne180100]<0>(v212, "AudioUnit_7_1");
  int v213 = 8388616;
  std::string::basic_string[abi:ne180100]<0>(v214, "AudioUnit_7_1_Front");
  int v215 = 8257544;
  std::string::basic_string[abi:ne180100]<0>(v216, "AAC_3_0");
  int v217 = 7471107;
  std::string::basic_string[abi:ne180100]<0>(v218, "AAC_Quadraphonic");
  int v219 = 7077892;
  std::string::basic_string[abi:ne180100]<0>(v220, "AAC_4_0");
  int v221 = 7602180;
  std::string::basic_string[abi:ne180100]<0>(v222, "AAC_5_0");
  int v223 = 7864325;
  std::string::basic_string[abi:ne180100]<0>(v224, "AAC_5_1");
  int v2 = v1;
  int v225 = 8126470;
  std::string::basic_string[abi:ne180100]<0>(v226, "AAC_6_0");
  int v227 = 9240582;
  std::string::basic_string[abi:ne180100]<0>(v228, "AAC_6_1");
  int v229 = 9306119;
  std::string::basic_string[abi:ne180100]<0>(v230, "AAC_7_0");
  int v231 = 9371655;
  std::string::basic_string[abi:ne180100]<0>(v232, "AAC_7_1");
  int v233 = 8323080;
  std::string::basic_string[abi:ne180100]<0>(v234, "AAC_7_1_B");
  int v235 = 11993096;
  std::string::basic_string[abi:ne180100]<0>(v236, "AAC_7_1_C");
  int v237 = 12058632;
  std::string::basic_string[abi:ne180100]<0>(v238, "AAC_Octagonal");
  int v239 = 9437192;
  std::string::basic_string[abi:ne180100]<0>(v240, "TMH_10_2_std");
  int v241 = 9502736;
  std::string::basic_string[abi:ne180100]<0>(v242, "TMH_10_2_full");
  int v243 = 9568277;
  std::string::basic_string[abi:ne180100]<0>(v244, "AC3_1_0_1");
  int v245 = 9764866;
  std::string::basic_string[abi:ne180100]<0>(v246, "AC3_3_0");
  int v247 = 9830403;
  std::string::basic_string[abi:ne180100]<0>(v248, "AC3_3_1");
  int v249 = 9895940;
  std::string::basic_string[abi:ne180100]<0>(v250, "AC3_3_0_1");
  int v251 = 9961476;
  std::string::basic_string[abi:ne180100]<0>(v252, "AC3_2_1_1");
  int v253 = 10027012;
  std::string::basic_string[abi:ne180100]<0>(v254, "AC3_3_1_1");
  int v255 = 10092549;
  std::string::basic_string[abi:ne180100]<0>(v256, "EAC_6_0_A");
  int v257 = 10158086;
  std::string::basic_string[abi:ne180100]<0>(v258, "EAC_7_0_A");
  int v259 = 10223623;
  std::string::basic_string[abi:ne180100]<0>(v260, "EAC3_6_1_A");
  int v261 = 10289159;
  std::string::basic_string[abi:ne180100]<0>(v262, "EAC3_6_1_B");
  int v263 = 10354695;
  std::string::basic_string[abi:ne180100]<0>(v264, "EAC3_6_1_C");
  int v265 = 10420231;
  std::string::basic_string[abi:ne180100]<0>(v266, "EAC3_7_1_A");
  int v267 = 10485768;
  std::string::basic_string[abi:ne180100]<0>(v268, "EAC3_7_1_B");
  int v269 = 10551304;
  std::string::basic_string[abi:ne180100]<0>(v270, "EAC3_7_1_C");
  int v271 = 10616840;
  std::string::basic_string[abi:ne180100]<0>(v272, "EAC3_7_1_D");
  int v273 = 10682376;
  std::string::basic_string[abi:ne180100]<0>(v274, "EAC3_7_1_E");
  int v275 = 10747912;
  std::string::basic_string[abi:ne180100]<0>(v276, "EAC3_7_1_F");
  int v277 = 10813448;
  std::string::basic_string[abi:ne180100]<0>(v278, "EAC3_7_1_G");
  int v279 = 10878984;
  std::string::basic_string[abi:ne180100]<0>(v280, "EAC3_7_1_H");
  int v281 = 10944520;
  std::string::basic_string[abi:ne180100]<0>(v282, "DTS_3_1");
  int v283 = 11010052;
  std::string::basic_string[abi:ne180100]<0>(v284, "DTS_4_1");
  int v285 = 11075589;
  std::string::basic_string[abi:ne180100]<0>(v286, "DTS_6_0_A");
  int v287 = 11141126;
  std::string::basic_string[abi:ne180100]<0>(v288, "DTS_6_0_B");
  int v289 = 11206662;
  std::string::basic_string[abi:ne180100]<0>(v290, "DTS_6_0_C");
  int v291 = 11272198;
  std::string::basic_string[abi:ne180100]<0>(v292, "DTS_6_1_A");
  int v293 = 11337735;
  std::string::basic_string[abi:ne180100]<0>(v294, "DTS_6_1_B");
  int v295 = 11403271;
  std::string::basic_string[abi:ne180100]<0>(v296, "DTS_6_1_C");
  int v297 = 11468807;
  std::string::basic_string[abi:ne180100]<0>(v298, "DTS_7_0");
  int v299 = 11534343;
  std::string::basic_string[abi:ne180100]<0>(v300, "DTS_7_1");
  int v301 = 11599880;
  std::string::basic_string[abi:ne180100]<0>(v302, "DTS_8_0_A");
  int v303 = 11665416;
  std::string::basic_string[abi:ne180100]<0>(v304, "DTS_8_0_B");
  int v305 = 11730952;
  std::string::basic_string[abi:ne180100]<0>(v306, "DTS_8_1_A");
  int v307 = 11796489;
  std::string::basic_string[abi:ne180100]<0>(v308, "DTS_8_1_B");
  int v309 = 11862025;
  std::string::basic_string[abi:ne180100]<0>(v310, "DTS_6_1_D");
  int v311 = 11927559;
  std::string::basic_string[abi:ne180100]<0>(v312, "WAVE_2_1");
  int v313 = 8716291;
  std::string::basic_string[abi:ne180100]<0>(v314, "WAVE_3_0");
  int v315 = 7405571;
  std::string::basic_string[abi:ne180100]<0>(v316, "WAVE_4_0_A");
  int v317 = 8650756;
  std::string::basic_string[abi:ne180100]<0>(v318, "WAVE_4_0_B");
  int v319 = 12124164;
  std::string::basic_string[abi:ne180100]<0>(v320, "WAVE_5_0_A");
  int v321 = 7667717;
  std::string::basic_string[abi:ne180100]<0>(v322, "WAVE_5_0_B");
  int v323 = 12189701;
  std::string::basic_string[abi:ne180100]<0>(v324, "WAVE_5_1_A");
  int v325 = 7929862;
  std::string::basic_string[abi:ne180100]<0>(v326, "WAVE_5_1_B");
  int v327 = 12255238;
  std::string::basic_string[abi:ne180100]<0>(v328, "WAVE_6_1");
  int v329 = 12320775;
  std::string::basic_string[abi:ne180100]<0>(v330, "WAVE_7_1");
  int v331 = 12386312;
  std::string::basic_string[abi:ne180100]<0>(v332, "Atmos_5_1_2");
  int v333 = 12713992;
  std::string::basic_string[abi:ne180100]<0>(v334, "Atmos_5_1_4");
  int v335 = 12779530;
  std::string::basic_string[abi:ne180100]<0>(v336, "Atmos_7_1_2");
  int v337 = 12845066;
  std::string::basic_string[abi:ne180100]<0>(v338, "Atmos_7_1_4");
  int v339 = 12582924;
  std::string::basic_string[abi:ne180100]<0>(v340, "Atmos_9_1_6");
  int v341 = 12648464;
  std::string::basic_string[abi:ne180100]<0>(v342, "BeginReserved");
  int v343 = -268435456;
  std::string::basic_string[abi:ne180100]<0>(v344, "EndReserved");
  int v345 = -65537;
  std::string::basic_string[abi:ne180100]<0>(v346, "Unknown");
  int v347 = -65536;
  std::map<std::string,unsigned int>::map[abi:ne180100]((uint64_t)v62, &v64, 141);
  for (uint64_t i = 0; i != -564; i -= 4)
  {
    if (SHIBYTE(v346[i + 2]) < 0) {
      operator delete((void *)v346[i]);
    }
  }
  int v61 = -65536;
  double v4 = v63[0];
  if (!v63[0]) {
    goto LABEL_19;
  }
  uint64_t v5 = v63;
  do
  {
    uint64_t v6 = v5;
    unint64_t v7 = v4 + 32;
    BOOL v8 = std::less<std::string>::operator()[abi:ne180100]((void *)v4 + 4, v1);
    if (v8) {
      int v9 = v4 + 8;
    }
    else {
      int v9 = v4;
    }
    if (v8) {
      uint64_t v5 = v6;
    }
    else {
      uint64_t v5 = (char **)v4;
    }
    double v4 = *(char **)v9;
  }
  while (*(void *)v9);
  if (v5 == v63
    || (!v8 ? (int v10 = v7) : (int v10 = (char *)(v6 + 4)), std::less<std::string>::operator()[abi:ne180100](v1, v10)))
  {
LABEL_19:
    std::string::basic_string[abi:ne180100]<0>(&v64, "HOA_ACN_SN3D");
    int v66 = 12451840;
    std::string::basic_string[abi:ne180100]<0>(v67, "HOA_ACN_N3D");
    int v68 = 12517376;
    std::map<std::string,unsigned int>::map[abi:ne180100]((uint64_t)&v59, &v64, 2);
    for (uint64_t j = 0; j != -8; j -= 4)
    {
      if (SHIBYTE(v67[j + 2]) < 0) {
        operator delete((void *)v67[j]);
      }
    }
    __int16 v12 = v59;
    if (v59 == v60)
    {
      int v54 = -65536;
    }
    else
    {
      uint64_t v53 = *MEMORY[0x263F8C2C0];
      uint64_t v52 = *(void *)(MEMORY[0x263F8C2C0] + 24);
      int v54 = -65536;
      do
      {
        if (*((char *)v12 + 55) < 0) {
          std::string::__init_copy_ctor_external(&v57, v12[4], (std::string::size_type)v12[5]);
        }
        else {
          std::string v57 = *(std::string *)(v12 + 4);
        }
        int v13 = *((_DWORD *)v12 + 14);
        int v58 = v13;
        int v14 = SHIBYTE(v2->__r_.__value_.__r.__words[2]);
        char v15 = HIBYTE(v57.__r_.__value_.__r.__words[2]);
        if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          __int16 v16 = &v57;
        }
        else {
          __int16 v16 = (std::string *)v57.__r_.__value_.__r.__words[0];
        }
        if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int64_t size = HIBYTE(v57.__r_.__value_.__r.__words[2]);
        }
        else {
          int64_t size = v57.__r_.__value_.__l.__size_;
        }
        if (v14 >= 0) {
          __int16 v18 = v2;
        }
        else {
          __int16 v18 = (const std::string *)v2->__r_.__value_.__r.__words[0];
        }
        if (v14 >= 0) {
          int64_t v19 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
        }
        else {
          int64_t v19 = v2->__r_.__value_.__l.__size_;
        }
        if (!size) {
          goto LABEL_50;
        }
        if (v19 >= size)
        {
          uint64_t v20 = (char *)v18 + v19;
          int v21 = v16->__r_.__value_.__s.__data_[0];
          int64_t v22 = v19;
          long long v23 = (std::string *)v18;
          while (1)
          {
            int64_t v24 = v22 - size;
            if (v24 == -1 || (__int16 v25 = (const std::string *)memchr(v23, v21, v24 + 1)) == 0)
            {
LABEL_47:
              int v2 = v51;
              goto LABEL_57;
            }
            __int16 v26 = v25;
            if (!memcmp(v25, v16, size)) {
              break;
            }
            long long v23 = (std::string *)((char *)&v26->__r_.__value_.__l.__data_ + 1);
            int64_t v22 = v20 - ((char *)&v26->__r_.__value_.__l.__data_ + 1);
            if (v22 < size) {
              goto LABEL_47;
            }
          }
          int v2 = v51;
          if (v26 != (const std::string *)v20 && v26 == v18)
          {
LABEL_50:
            int v61 = v13;
            std::string::basic_string(&v56, v2, size, v19, (std::allocator<char> *)&v64);
            int v55 = 0;
            std::istringstream::basic_istringstream[abi:ne180100]((uint64_t *)&v64, &v56);
            MEMORY[0x223C934A0](&v64, &v55);
            int v27 = *(_DWORD *)((char *)v67 + *(void *)(v64 - 24));
            *(void *)&long long v64 = v53;
            *(void *)((char *)&v64 + *(void *)(v53 - 24)) = v52;
            uint64_t v65 = MEMORY[0x263F8C318] + 16;
            if (SHIBYTE(v72) < 0) {
              operator delete(v70);
            }
            std::streambuf::~streambuf();
            std::istream::~istream();
            MEMORY[0x223C937D0](&v73);
            int v28 = ((v55 + 1) * (v55 + 1)) | v13;
            if ((v27 & 5) != 0) {
              int v28 = -65536;
            }
            int v54 = v28;
            int v61 = v28;
            if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v56.__r_.__value_.__l.__data_);
            }
            char v15 = HIBYTE(v57.__r_.__value_.__r.__words[2]);
          }
        }
LABEL_57:
        if (v15 < 0) {
          operator delete(v57.__r_.__value_.__l.__data_);
        }
        size_t v29 = v12[1];
        if (v29)
        {
          do
          {
            uint64_t v30 = (char **)v29;
            size_t v29 = *(char **)v29;
          }
          while (v29);
        }
        else
        {
          do
          {
            uint64_t v30 = (char **)v12[2];
            BOOL v31 = *v30 == (char *)v12;
            __int16 v12 = v30;
          }
          while (!v31);
        }
        __int16 v12 = v30;
      }
      while (v30 != v60);
    }
    std::string::basic_string[abi:ne180100]<0>(&v57, "DiscreteInOrder");
    int v58 = 9633792;
    int v32 = SHIBYTE(v2->__r_.__value_.__r.__words[2]);
    if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v33 = &v57;
    }
    else {
      uint64_t v33 = (std::string *)v57.__r_.__value_.__r.__words[0];
    }
    if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int64_t v34 = HIBYTE(v57.__r_.__value_.__r.__words[2]);
    }
    else {
      int64_t v34 = v57.__r_.__value_.__l.__size_;
    }
    if (v32 >= 0) {
      __int16 v35 = v2;
    }
    else {
      __int16 v35 = (const std::string *)v2->__r_.__value_.__r.__words[0];
    }
    if (v32 >= 0) {
      int64_t v36 = HIBYTE(v2->__r_.__value_.__r.__words[2]);
    }
    else {
      int64_t v36 = v2->__r_.__value_.__l.__size_;
    }
    long long v37 = (void *)MEMORY[0x263F8C2C0];
    if (!v34) {
      goto LABEL_91;
    }
    if (v36 >= v34)
    {
      long long v38 = (void *)MEMORY[0x263F8C2C0];
      long long v39 = (char *)v35 + v36;
      int v40 = v33->__r_.__value_.__s.__data_[0];
      int64_t v41 = v36;
      long long v42 = (std::string *)v35;
      while (1)
      {
        int64_t v43 = v41 - v34;
        if (v43 == -1 || (__int16 v44 = (const std::string *)memchr(v42, v40, v43 + 1)) == 0)
        {
LABEL_86:
          long long v37 = v38;
          goto LABEL_95;
        }
        int v45 = v44;
        if (!memcmp(v44, v33, v34)) {
          break;
        }
        long long v42 = (std::string *)((char *)&v45->__r_.__value_.__l.__data_ + 1);
        int64_t v41 = v39 - ((char *)&v45->__r_.__value_.__l.__data_ + 1);
        if (v41 < v34) {
          goto LABEL_86;
        }
      }
      long long v37 = v38;
      if (v45 != (const std::string *)v39 && v45 == v35)
      {
LABEL_91:
        int v61 = 9633792;
        std::string::basic_string(&v56, v2, v34, v36, (std::allocator<char> *)&v64);
        int v55 = 0;
        std::istringstream::basic_istringstream[abi:ne180100]((uint64_t *)&v64, &v56);
        MEMORY[0x223C934A0](&v64, &v55);
        *(void *)&long long v64 = *v37;
        *(void *)((char *)&v64 + *(void *)(v64 - 24)) = v37[3];
        uint64_t v65 = MEMORY[0x263F8C318] + 16;
        if (SHIBYTE(v72) < 0) {
          operator delete(v70);
        }
        std::streambuf::~streambuf();
        std::istream::~istream();
        MEMORY[0x223C937D0](&v73);
        int v54 = v55 | 0x930000;
        int v61 = v55 | 0x930000;
        if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v56.__r_.__value_.__l.__data_);
        }
      }
    }
LABEL_95:
    if (v54 == -65536)
    {
      std::istringstream::basic_istringstream[abi:ne180100]((uint64_t *)&v64, v2);
      MEMORY[0x223C934A0](&v64, &v61);
      int v48 = *(_DWORD *)((unsigned char *)v67 + *(void *)(v64 - 24)) & 5;
      *(void *)&long long v64 = *v37;
      *(void *)((char *)&v64 + *(void *)(v64 - 24)) = v37[3];
      uint64_t v65 = MEMORY[0x263F8C318] + 16;
      if (SHIBYTE(v72) < 0) {
        operator delete(v70);
      }
      std::streambuf::~streambuf();
      std::istream::~istream();
      MEMORY[0x223C937D0](&v73);
      if (v48) {
        int v61 = -65536;
      }
    }
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v57.__r_.__value_.__l.__data_);
    }
    std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::destroy(v60[0]);
    double v47 = &v61;
  }
  else
  {
    uint64_t v46 = *std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__find_equal<std::string>((uint64_t)v62, &v64, v1);
    if (!v46) {
      std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
    }
    double v47 = (int *)(v46 + 56);
  }
  uint64_t v49 = *v47;
  std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::destroy(v63[0]);
  return v49;
}

void sub_221E8F670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char *a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
}

uint64_t *std::istringstream::basic_istringstream[abi:ne180100](uint64_t *a1, const std::string *a2)
{
  uint64_t v4 = MEMORY[0x263F8C338] + 64;
  a1[15] = MEMORY[0x263F8C338] + 64;
  uint64_t v5 = (uint64_t)(a1 + 2);
  uint64_t v6 = *(void *)(MEMORY[0x263F8C2C0] + 16);
  uint64_t v7 = *(void *)(MEMORY[0x263F8C2C0] + 8);
  *a1 = v7;
  *(uint64_t *)((char *)a1 + *(void *)(v7 - 24)) = v6;
  a1[1] = 0;
  BOOL v8 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v8, a1 + 2);
  uint64_t v9 = MEMORY[0x263F8C338] + 24;
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  *a1 = v9;
  a1[15] = v4;
  std::stringbuf::basic_stringbuf[abi:ne180100](v5, a2, 8);
  return a1;
}

void sub_221E8FB28(_Unwind_Exception *a1)
{
  std::istream::~istream();
  MEMORY[0x223C937D0](v1);
  _Unwind_Resume(a1);
}

uint64_t std::istringstream::~istringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C2C0];
  uint64_t v3 = *MEMORY[0x263F8C2C0];
  *(void *)a1 = *MEMORY[0x263F8C2C0];
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 16) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x223C937D0](a1 + 120);
  return a1;
}

void Phase::ChannelLayout::GetStringFromLayoutTag(Phase::ChannelLayout *this@<X0>, void *a2@<X8>)
{
  unsigned __int16 v2 = (unsigned __int16)this;
  unsigned int v4 = this & 0xFFFF0000;
  if ((this & 0xFFFF0000) == 0x930000)
  {
    std::string::basic_string[abi:ne180100]<0>(&v21, "DiscreteInOrder");
    int v11 = std::string::append(&v21, " ");
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v22.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&__p, v2);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
  }
  else if (v4 == 12517376)
  {
    int v13 = llroundf(sqrtf((float)(unsigned __int16)this));
    if (v13) {
      BOOL v14 = v13 * v13 == (unsigned __int16)this;
    }
    else {
      BOOL v14 = 0;
    }
    if (!v14) {
      goto LABEL_25;
    }
    std::string::basic_string[abi:ne180100]<0>(&v21, "HOA_ACN_N3D");
    __int16 v16 = std::string::append(&v21, " ");
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v22.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&__p, v13 - 1);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
  }
  else
  {
    if (v4 != 12451840)
    {
      if ((int)this > 9568276)
      {
        if ((int)this <= 11206661)
        {
          if ((int)this <= 10354694)
          {
            if ((int)this > 9961475)
            {
              if ((int)this > 10158085)
              {
                switch(this)
                {
                  case 0x9B0006:
                    char v15 = "EAC_6_0_A";
                    goto LABEL_26;
                  case 0x9C0007:
                    char v15 = "EAC_7_0_A";
                    goto LABEL_26;
                  case 0x9D0007:
                    char v15 = "EAC3_6_1_A";
                    goto LABEL_26;
                }
              }
              else
              {
                switch(this)
                {
                  case 0x980004:
                    char v15 = "AC3_3_0_1";
                    goto LABEL_26;
                  case 0x990004:
                    char v15 = "AC3_2_1_1";
                    goto LABEL_26;
                  case 0x9A0005:
                    char v15 = "AC3_3_1_1";
                    goto LABEL_26;
                }
              }
            }
            else if ((int)this > 9764865)
            {
              switch(this)
              {
                case 0x950002:
                  char v15 = "AC3_1_0_1";
                  goto LABEL_26;
                case 0x960003:
                  char v15 = "AC3_3_0";
                  goto LABEL_26;
                case 0x970004:
                  char v15 = "AC3_3_1";
                  goto LABEL_26;
              }
            }
            else
            {
              switch(this)
              {
                case 0x920015:
                  char v15 = "TMH_10_2_full";
                  goto LABEL_26;
                case 0x930000:
                  char v15 = "DiscreteInOrder";
                  goto LABEL_26;
                case 0x940007:
                  char v15 = "AudioUnit_7_0_Front";
                  goto LABEL_26;
              }
            }
          }
          else if ((int)this <= 10747911)
          {
            if ((int)this > 10551303)
            {
              switch(this)
              {
                case 0xA10008:
                  char v15 = "EAC3_7_1_B";
                  goto LABEL_26;
                case 0xA20008:
                  char v15 = "EAC3_7_1_C";
                  goto LABEL_26;
                case 0xA30008:
                  char v15 = "EAC3_7_1_D";
                  goto LABEL_26;
              }
            }
            else
            {
              switch(this)
              {
                case 0x9E0007:
                  char v15 = "EAC3_6_1_B";
                  goto LABEL_26;
                case 0x9F0007:
                  char v15 = "EAC3_6_1_C";
                  goto LABEL_26;
                case 0xA00008:
                  char v15 = "EAC3_7_1_A";
                  goto LABEL_26;
              }
            }
          }
          else if ((int)this <= 10944519)
          {
            switch(this)
            {
              case 0xA40008:
                char v15 = "EAC3_7_1_E";
                goto LABEL_26;
              case 0xA50008:
                char v15 = "EAC3_7_1_F";
                goto LABEL_26;
              case 0xA60008:
                char v15 = "EAC3_7_1_G";
                goto LABEL_26;
            }
          }
          else if ((int)this > 11075588)
          {
            if (this == 11075589)
            {
              char v15 = "DTS_4_1";
              goto LABEL_26;
            }
            if (this == 11141126)
            {
              char v15 = "DTS_6_0_A";
              goto LABEL_26;
            }
          }
          else
          {
            if (this == 10944520)
            {
              char v15 = "EAC3_7_1_H";
              goto LABEL_26;
            }
            if (this == 11010052)
            {
              char v15 = "DTS_3_1";
              goto LABEL_26;
            }
          }
        }
        else if ((int)this > 12058631)
        {
          if ((int)this < 12451840)
          {
            if ((int)this > 12255237)
            {
              switch(this)
              {
                case 0xBB0006:
                  char v15 = "WAVE_5_1_B";
                  goto LABEL_26;
                case 0xBC0007:
                  char v15 = "WAVE_6_1";
                  goto LABEL_26;
                case 0xBD0008:
                  char v15 = "WAVE_7_1";
                  goto LABEL_26;
              }
            }
            else
            {
              switch(this)
              {
                case 0xB80008:
                  char v15 = "AAC_7_1_C";
                  goto LABEL_26;
                case 0xB90004:
                  char v15 = "WAVE_4_0_B";
                  goto LABEL_26;
                case 0xBA0005:
                  char v15 = "WAVE_5_0_B";
                  goto LABEL_26;
              }
            }
          }
          else if ((int)this <= 12648463)
          {
            switch(this)
            {
              case 0xBE0000:
                char v15 = "HOA_ACN_SN3D";
                goto LABEL_26;
              case 0xBF0000:
                char v15 = "HOA_ACN_N3D";
                goto LABEL_26;
              case 0xC0000C:
                char v15 = "Atmos_7_1_4";
                goto LABEL_26;
            }
          }
          else if ((int)this > 12779529)
          {
            if (this == 12779530)
            {
              char v15 = "Atmos_5_1_4";
              goto LABEL_26;
            }
            if (this == 12845066)
            {
              char v15 = "Atmos_7_1_2";
              goto LABEL_26;
            }
          }
          else
          {
            if (this == 12648464)
            {
              char v15 = "Atmos_9_1_6";
              goto LABEL_26;
            }
            if (this == 12713992)
            {
              char v15 = "Atmos_5_1_2";
              goto LABEL_26;
            }
          }
        }
        else if ((int)this <= 11599879)
        {
          if ((int)this > 11403270)
          {
            switch(this)
            {
              case 0xAE0007:
                char v15 = "DTS_6_1_B";
                goto LABEL_26;
              case 0xAF0007:
                char v15 = "DTS_6_1_C";
                goto LABEL_26;
              case 0xB00007:
                char v15 = "DTS_7_0";
                goto LABEL_26;
            }
          }
          else
          {
            switch(this)
            {
              case 0xAB0006:
                char v15 = "DTS_6_0_B";
                goto LABEL_26;
              case 0xAC0006:
                char v15 = "DTS_6_0_C";
                goto LABEL_26;
              case 0xAD0007:
                char v15 = "DTS_6_1_A";
                goto LABEL_26;
            }
          }
        }
        else if ((int)this <= 11796488)
        {
          switch(this)
          {
            case 0xB10008:
              char v15 = "DTS_7_1";
              goto LABEL_26;
            case 0xB20008:
              char v15 = "DTS_8_0_A";
              goto LABEL_26;
            case 0xB30008:
              char v15 = "DTS_8_0_B";
              goto LABEL_26;
          }
        }
        else if ((int)this > 11927558)
        {
          if (this == 11927559)
          {
            char v15 = "DTS_6_1_D";
            goto LABEL_26;
          }
          if (this == 11993096)
          {
            char v15 = "AAC_7_1_B";
            goto LABEL_26;
          }
        }
        else
        {
          if (this == 11796489)
          {
            char v15 = "DTS_8_1_A";
            goto LABEL_26;
          }
          if (this == 11862025)
          {
            char v15 = "DTS_8_1_B";
            goto LABEL_26;
          }
        }
      }
      else if ((int)this <= 7864324)
      {
        if ((int)this <= 7012355)
        {
          if ((int)this > 6619137)
          {
            if ((int)this > 6815745)
            {
              switch(this)
              {
                case 0x680002:
                  char v15 = "MidSide";
                  goto LABEL_26;
                case 0x690002:
                  char v15 = "XY";
                  goto LABEL_26;
                case 0x6A0002:
                  char v15 = "Binaural";
                  goto LABEL_26;
              }
            }
            else
            {
              switch(this)
              {
                case 0x650002:
                  char v15 = "Stereo";
                  goto LABEL_26;
                case 0x660002:
                  char v15 = "StereoHeadphones";
                  goto LABEL_26;
                case 0x670002:
                  char v15 = "MatrixStereo";
                  goto LABEL_26;
              }
            }
          }
          else if ((this & 0x80000000) != 0)
          {
            if (this == -268435456)
            {
              char v15 = "BeginReserved";
              goto LABEL_26;
            }
            if (this == -65537)
            {
              char v15 = "EndReserved";
              goto LABEL_26;
            }
          }
          else
          {
            switch(this)
            {
              case 0:
                char v15 = "UseChannelDescriptions";
                goto LABEL_26;
              case 0x10000:
                char v15 = "UseChannelBitmap";
                goto LABEL_26;
              case 0x640001:
                char v15 = "Mono";
                goto LABEL_26;
            }
          }
        }
        else if ((int)this <= 7405570)
        {
          if ((int)this > 7208965)
          {
            switch(this)
            {
              case 0x6E0006:
                char v15 = "Hexagonal";
                goto LABEL_26;
              case 0x6F0008:
                char v15 = "Octagonal";
                goto LABEL_26;
              case 0x700008:
                char v15 = "Cube";
                goto LABEL_26;
            }
          }
          else
          {
            switch(this)
            {
              case 0x6B0004:
                char v15 = "Ambisonic_B_Format";
                goto LABEL_26;
              case 0x6C0004:
                char v15 = "Quadraphonic";
                goto LABEL_26;
              case 0x6D0005:
                char v15 = "Pentagonal";
                goto LABEL_26;
            }
          }
        }
        else if ((int)this <= 7602179)
        {
          switch(this)
          {
            case 0x710003:
              char v15 = "MPEG_3_0_A";
              goto LABEL_26;
            case 0x720003:
              char v15 = "MPEG_3_0_B";
              goto LABEL_26;
            case 0x730004:
              char v15 = "MPEG_4_0_A";
              goto LABEL_26;
          }
        }
        else if ((int)this > 7733252)
        {
          if (this == 7733253)
          {
            char v15 = "MPEG_5_0_B";
            goto LABEL_26;
          }
          if (this == 7798789)
          {
            char v15 = "MPEG_5_0_C";
            goto LABEL_26;
          }
        }
        else
        {
          if (this == 7602180)
          {
            char v15 = "MPEG_4_0_B";
            goto LABEL_26;
          }
          if (this == 7667717)
          {
            char v15 = "MPEG_5_0_A";
            goto LABEL_26;
          }
        }
      }
      else if ((int)this > 8716290)
      {
        if ((int)this <= 9109509)
        {
          if ((int)this > 8912899)
          {
            switch(this)
            {
              case 0x880004:
                char v15 = "DVD_10";
                goto LABEL_26;
              case 0x890005:
                char v15 = "DVD_11";
                goto LABEL_26;
              case 0x8A0005:
                char v15 = "DVD_18";
                goto LABEL_26;
            }
          }
          else
          {
            switch(this)
            {
              case 0x850003:
                char v15 = "DVD_4";
                goto LABEL_26;
              case 0x860004:
                char v15 = "DVD_5";
                goto LABEL_26;
              case 0x870005:
                char v15 = "DVD_6";
                goto LABEL_26;
            }
          }
        }
        else if ((int)this <= 9306118)
        {
          switch(this)
          {
            case 0x8B0006:
              char v15 = "AudioUnit_6_0";
              goto LABEL_26;
            case 0x8C0007:
              char v15 = "AudioUnit_7_0";
              goto LABEL_26;
            case 0x8D0006:
              char v15 = "AAC_6_0";
              goto LABEL_26;
          }
        }
        else if ((int)this > 9437191)
        {
          if (this == 9437192)
          {
            char v15 = "AAC_Octagonal";
            goto LABEL_26;
          }
          if (this == 9502736)
          {
            char v15 = "TMH_10_2_std";
            goto LABEL_26;
          }
        }
        else
        {
          if (this == 9306119)
          {
            char v15 = "AAC_6_1";
            goto LABEL_26;
          }
          if (this == 9371655)
          {
            char v15 = "AAC_7_0";
            goto LABEL_26;
          }
        }
      }
      else if ((int)this <= 8257543)
      {
        if ((int)this > 8060933)
        {
          switch(this)
          {
            case 0x7B0006:
              char v15 = "MPEG_5_1_C";
              goto LABEL_26;
            case 0x7C0006:
              char v15 = "MPEG_5_1_D";
              goto LABEL_26;
            case 0x7D0007:
              char v15 = "MPEG_6_1_A";
              goto LABEL_26;
          }
        }
        else
        {
          switch(this)
          {
            case 0x780005:
              char v15 = "MPEG_5_0_D";
              goto LABEL_26;
            case 0x790006:
              char v15 = "MPEG_5_1_A";
              goto LABEL_26;
            case 0x7A0006:
              char v15 = "MPEG_5_1_B";
              goto LABEL_26;
          }
        }
      }
      else if ((int)this <= 8454151)
      {
        switch(this)
        {
          case 0x7E0008:
            char v15 = "MPEG_7_1_A";
            goto LABEL_26;
          case 0x7F0008:
            char v15 = "MPEG_7_1_B";
            goto LABEL_26;
          case 0x800008:
            char v15 = "MPEG_7_1_C";
            goto LABEL_26;
        }
      }
      else if ((int)this > 8585218)
      {
        if (this == 8585219)
        {
          char v15 = "ITU_2_1";
          goto LABEL_26;
        }
        if (this == 8650756)
        {
          char v15 = "ITU_2_2";
          goto LABEL_26;
        }
      }
      else
      {
        if (this == 8454152)
        {
          char v15 = "Emagic_Default_7_1";
          goto LABEL_26;
        }
        if (this == 8519688)
        {
          char v15 = "SMPTE_DTV";
          goto LABEL_26;
        }
      }
LABEL_25:
      char v15 = "Unknown";
LABEL_26:
      std::string::basic_string[abi:ne180100]<0>(a2, v15);
      return;
    }
    int v5 = llroundf(sqrtf((float)(unsigned __int16)this));
    if (v5) {
      BOOL v6 = v5 * v5 == (unsigned __int16)this;
    }
    else {
      BOOL v6 = 0;
    }
    if (!v6) {
      goto LABEL_25;
    }
    std::string::basic_string[abi:ne180100]<0>(&v21, "HOA_ACN_SN3D");
    uint64_t v7 = std::string::append(&v21, " ");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v22.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&__p, v5 - 1);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
  }
  __int16 v18 = std::string::append(&v22, (const std::string::value_type *)p_p, size);
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  a2[2] = *((void *)&v18->__r_.__value_.__l + 2);
  *(_OWORD *)a2 = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
}

void sub_221E90BAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void Phase::ChannelLayout::GetChannelLayoutChannelDescriptions(void *a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  unsigned int v4 = (_DWORD *)*a1;
  if (*(_DWORD *)*a1) {
    operator new[]();
  }
  unint64_t v5 = v4[2];
  if (v5 > (a1[1] - (void)v4 - 12) / 0x14uLL) {
    __assert_rtn("GetNumberChannelDescriptions", "CoreAudioBaseTypes.hpp", 2237, "GetAudioChannelLayout().mNumberChannelDescriptions <= (mStorage.size() - kHeaderSize) / sizeof(AudioChannelDescription)");
  }
  std::vector<AudioChannelDescription>::resize(a2, v5);
  BOOL v6 = (_DWORD *)*a1;
  unint64_t v7 = *(unsigned int *)(*a1 + 8);
  if (v7 > (a1[1] - *a1 - 12) / 0x14uLL) {
LABEL_20:
  }
    __assert_rtn("GetNumberChannelDescriptions", "CoreAudioBaseTypes.hpp", 2237, "GetAudioChannelLayout().mNumberChannelDescriptions <= (mStorage.size() - kHeaderSize) / sizeof(AudioChannelDescription)");
  uint64_t v8 = 0;
  uint64_t v9 = -1;
  float64x2_t v29 = (float64x2_t)vdupq_n_s64(0x404CA5DC1A63C1F8uLL);
  while (++v9 < v7)
  {
    uint64_t v10 = *a2;
    uint64_t v11 = *a2 + v8 * 4;
    long long v12 = *(_OWORD *)&v6[v8 + 3];
    *(_DWORD *)(v11 + 16) = v6[v8 + 7];
    *(_OWORD *)uint64_t v11 = v12;
    BOOL v6 = (_DWORD *)*a1;
    uint64_t v13 = *a1 + v8 * 4;
    int v14 = *(_DWORD *)(v13 + 16);
    if (v14)
    {
      float v16 = *(float *)(v13 + 20);
      float v17 = *(float *)(v13 + 24);
      float v18 = *(float *)(v13 + 28);
      float v19 = fabsf(v17);
      if (fabsf(v16) < 0.00000011921 && v19 < 0.00000011921)
      {
        uint64_t v23 = v10 + v8 * 4;
        *(float *)(v23 + 16) = fabsf(v18);
        *(_DWORD *)(v23 + 8) = 0;
        if (v18 <= 0.0)
        {
          if (v18 < 0.0) {
            *(_DWORD *)(v23 + 12) = -1028390912;
          }
          else {
            *(_DWORD *)(v23 + 12) = 0;
          }
        }
        else
        {
          *(_DWORD *)(v23 + 12) = 1119092736;
        }
      }
      else
      {
        float v21 = sqrtf((float)((float)(v17 * v17) + (float)(v16 * v16)) + (float)(v18 * v18));
        std::string v22 = (float32x2_t *)(v10 + v8 * 4);
        *(float *)(v10 + v8 * 4 + 16) = v21;
        float v30 = atan2f(v16, v17);
        v22[1] = vcvt_f32_f64(vmulq_f64(vcvtq_f64_f32((float32x2_t)__PAIR64__(COERCE_UNSIGNED_INT(asinf(v18 / v21)), LODWORD(v30))), v29));
      }
    }
    else if ((v14 & 2) != 0)
    {
      char v15 = (_DWORD *)(v10 + v8 * 4);
      void v15[2] = v6[v8 + 5];
      v15[3] = v6[v8 + 6];
      v15[4] = v6[v8 + 7];
    }
    v8 += 5;
    unint64_t v7 = v6[2];
    if (v7 > (a1[1] - (void)v6 - 12) / 0x14uLL) {
      goto LABEL_20;
    }
  }
  uint64_t v24 = *a2;
  uint64_t v25 = a2[1];
  if (*a2 != v25)
  {
    do
    {
      if ((*(unsigned char *)(v24 + 4) & 3) == 0)
      {
        *(_DWORD *)(v24 + 4) = 2;
        *(void *)(v24 + 12) = 0x3F80000000000000;
        int v26 = *(_DWORD *)v24;
        if (*(int *)v24 <= 207)
        {
          switch(v26)
          {
            case 1:
              goto LABEL_35;
            case 2:
              goto LABEL_36;
            case 3:
              *(_DWORD *)(v24 + 8) = 0;
              goto LABEL_24;
            case 5:
            case 10:
              int v27 = -1025769472;
              goto LABEL_59;
            case 6:
            case 11:
              int v27 = 1121714176;
              goto LABEL_59;
            case 7:
              int v27 = -1049624576;
              goto LABEL_59;
            case 8:
              int v27 = 1097859072;
              goto LABEL_59;
            case 9:
            case 44:
              int v27 = 1127481344;
              goto LABEL_59;
            case 12:
              int32x2_t v28 = (int32x2_t)0x42B4000000000000;
              goto LABEL_57;
            case 13:
              int32x2_t v28 = (int32x2_t)0x42340000C2340000;
              goto LABEL_57;
            case 14:
              int32x2_t v28 = (int32x2_t)0x41F0000000000000;
              goto LABEL_57;
            case 15:
              int32x2_t v28 = vdup_n_s32(0x42340000u);
              goto LABEL_57;
            case 16:
              int32x2_t v28 = (int32x2_t)0x41F00000C3160000;
              goto LABEL_57;
            case 17:
              int32x2_t v28 = (int32x2_t)0x41F0000043340000;
              goto LABEL_57;
            case 18:
              int32x2_t v28 = (int32x2_t)0x41F0000043160000;
              goto LABEL_57;
            case 33:
              int v27 = -1021968384;
              goto LABEL_59;
            case 34:
              int v27 = 1125515264;
              goto LABEL_59;
            case 35:
              int v27 = -1032847360;
              goto LABEL_59;
            case 36:
              int v27 = 1114636288;
LABEL_59:
              *(_DWORD *)(v24 + 8) = v27;
              goto LABEL_24;
            case 49:
              int32x2_t v28 = (int32x2_t)0x42340000C2B40000;
              goto LABEL_57;
            case 51:
              int32x2_t v28 = (int32x2_t)0x4234000042B40000;
              goto LABEL_57;
            case 52:
              int32x2_t v28 = (int32x2_t)0x42340000C3070000;
              goto LABEL_57;
            case 53:
              int32x2_t v28 = (int32x2_t)0x4234000043340000;
              goto LABEL_57;
            case 54:
              int32x2_t v28 = (int32x2_t)0x4234000043070000;
LABEL_57:
              *(int32x2_t *)(v24 + 8) = v28;
              break;
            default:
              goto LABEL_60;
          }
          goto LABEL_24;
        }
        if (v26 > 300)
        {
          if (v26 == 302) {
            goto LABEL_36;
          }
          if (v26 != 301)
          {
LABEL_60:
            *(void *)(v24 + 4) = 0;
            *(_DWORD *)(v24 + 16) = 0;
            goto LABEL_24;
          }
        }
        else if (v26 != 208)
        {
          if (v26 != 209) {
            goto LABEL_60;
          }
LABEL_36:
          *(_DWORD *)(v24 + 8) = 1106247680;
          goto LABEL_24;
        }
LABEL_35:
        *(_DWORD *)(v24 + 8) = -1041235968;
      }
LABEL_24:
      v24 += 20;
    }
    while (v24 != v25);
  }
}

void sub_221E91110(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<AudioChannelDescription>::resize(void *a1, unint64_t a2)
{
  uint64_t v3 = (char *)*a1;
  unsigned int v4 = (char *)a1[1];
  unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v4[-*a1] >> 2);
  unint64_t v6 = a2 - v5;
  if (a2 <= v5)
  {
    if (a2 >= v5) {
      return;
    }
    float v21 = &v3[20 * a2];
    goto LABEL_19;
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2];
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - (uint64_t)v4) >> 2) >= v6)
  {
    size_t v22 = 20 * ((20 * v6 - 20) / 0x14) + 20;
    bzero(v4, v22);
    float v21 = &v4[v22];
LABEL_19:
    a1[1] = v21;
    return;
  }
  if (a2 > 0xCCCCCCCCCCCCCCCLL) {
    std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v9 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - (uint64_t)v3) >> 2);
  uint64_t v10 = 2 * v9;
  if (2 * v9 <= a2) {
    uint64_t v10 = a2;
  }
  if (v9 >= 0x666666666666666) {
    unint64_t v11 = 0xCCCCCCCCCCCCCCCLL;
  }
  else {
    unint64_t v11 = v10;
  }
  long long v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioChannelDescription>>(v7, v11);
  uint64_t v13 = &v12[20 * v5];
  char v15 = &v12[20 * v14];
  size_t v16 = 20 * ((20 * v6 - 20) / 0x14) + 20;
  bzero(v13, v16);
  float v17 = &v13[v16];
  float v19 = (char *)*a1;
  float v18 = (char *)a1[1];
  if (v18 != (char *)*a1)
  {
    do
    {
      long long v20 = *(_OWORD *)(v18 - 20);
      *((_DWORD *)v13 - 1) = *((_DWORD *)v18 - 1);
      *(_OWORD *)(v13 - 20) = v20;
      v13 -= 20;
      v18 -= 20;
    }
    while (v18 != v19);
    float v18 = (char *)*a1;
  }
  *a1 = v13;
  a1[1] = v17;
  a1[2] = v15;
  if (v18)
  {
    operator delete(v18);
  }
}

void Phase::ChannelLayout::GetStringDescription(Phase::ChannelLayout *this, const AudioChannelLayout *a2)
{
  unsigned int v3 = *((_DWORD *)this + 2);
  if (v3 <= 1) {
    unsigned int v3 = 1;
  }
  std::vector<char>::vector(&v4, 20 * v3 + 12);
  memcpy(v4.__begin_, this, 20 * *((unsigned int *)this + 2) + 12);
  Phase::ChannelLayout::GetStringDescription((unsigned int **)&v4);
  if (v4.__begin_)
  {
    v4.__end_ = v4.__begin_;
    operator delete(v4.__begin_);
  }
}

void sub_221E91458(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::ChannelLayout::GetStringDescription(unsigned int **a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v43);
  unsigned __int16 v2 = (Phase::ChannelLayout *)**a1;
  UInt32 ioPropertyDataSize = 8;
  CFStringRef outPropertyData = 0;
  unsigned int v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"Channel layout description:", 27);
  std::ios_base::getloc((const std::ios_base *)((char *)v3 + *(void *)(*v3 - 24)));
  std::vector<char> v4 = std::locale::use_facet(&v38, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10);
  std::locale::~locale(&v38);
  std::ostream::put();
  std::ostream::flush();
  unint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"\tTag: ", 6);
  Phase::ChannelLayout::GetStringFromLayoutTag(v2, &v38);
  if ((v40 & 0x80u) == 0) {
    locale = &v38;
  }
  else {
    locale = v38.__locale_;
  }
  if ((v40 & 0x80u) == 0) {
    uint64_t v7 = v40;
  }
  else {
    uint64_t v7 = (uint64_t)v39;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)locale, v7);
  if ((char)v40 < 0) {
    operator delete(v38.__locale_);
  }
  if (!AudioFormatGetProperty(0x6C6F6E6Du, *((_DWORD *)a1 + 2) - *a1, *a1, &ioPropertyDataSize, &outPropertyData))
  {
    CFStringRef v8 = outPropertyData;
    if (outPropertyData && (CFTypeID v9 = CFGetTypeID(outPropertyData), v9 != CFStringGetTypeID()))
    {
      __p[0] = 0;
      CFRelease(v8);
      CFStringRef v8 = 0;
    }
    else
    {
      __p[0] = (void *)v8;
    }
    uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)" / Name: ", 9);
    if (v8) {
      applesauce::CF::convert_to<std::string,0>(v8, (uint64_t)&v38);
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(&v38, "?");
    }
    if ((v40 & 0x80u) == 0) {
      unint64_t v11 = &v38;
    }
    else {
      unint64_t v11 = v38.__locale_;
    }
    if ((v40 & 0x80u) == 0) {
      uint64_t v12 = v40;
    }
    else {
      uint64_t v12 = (uint64_t)v39;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, v12);
    if ((char)v40 < 0)
    {
      operator delete(v38.__locale_);
      if (!v8) {
        goto LABEL_28;
      }
    }
    else if (!v8)
    {
      goto LABEL_28;
    }
    CFRelease(v8);
  }
LABEL_28:
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)" / ", 3);
  uint64_t v13 = (void *)std::ostream::operator<<();
  uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" channels", 9);
  std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(void *)(*v14 - 24)));
  char v15 = std::locale::use_facet(&v38, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
  std::locale::~locale(&v38);
  std::ostream::put();
  std::ostream::flush();
  Phase::ChannelLayout::GetChannelLayoutChannelDescriptions(a1, (uint64_t *)&v38);
  size_t v16 = v38.__locale_;
  if (v39 != v38.__locale_)
  {
    uint64_t v17 = 0;
    unsigned int v18 = 1;
    float v19 = (std::locale::id *)MEMORY[0x263F8C108];
    while (1)
    {
      if (AudioFormatGetProperty(0x636E616Du, 0x14u, (char *)v16 + 20 * v17, &ioPropertyDataSize, &outPropertyData)) {
        goto LABEL_49;
      }
      CFStringRef v20 = outPropertyData;
      if (outPropertyData && (CFTypeID v21 = CFGetTypeID(outPropertyData), v21 != CFStringGetTypeID()))
      {
        CFStringRef v37 = 0;
        CFRelease(v20);
        CFStringRef v20 = 0;
      }
      else
      {
        CFStringRef v37 = v20;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"\t* ", 3);
      size_t v22 = (void *)std::ostream::operator<<();
      uint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)": ", 2);
      if (v20) {
        applesauce::CF::convert_to<std::string,0>(v20, (uint64_t)__p);
      }
      else {
        std::string::basic_string[abi:ne180100]<0>(__p, "?");
      }
      uint64_t v24 = (v36 & 0x80u) == 0 ? __p : (void **)__p[0];
      uint64_t v25 = (v36 & 0x80u) == 0 ? (void *)v36 : __p[1];
      int v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v24, (uint64_t)v25);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"\t*** ", 5);
      if ((char)v36 < 0) {
        break;
      }
      if (v20) {
        goto LABEL_48;
      }
LABEL_49:
      int v27 = *((_DWORD *)v16 + 5 * v17 + 1);
      if (v27)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"x = ", 4);
        int32x2_t v28 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)", ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"y = ", 4);
        float64x2_t v29 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)", ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"z = ", 4);
LABEL_54:
        std::ostream::operator<<();
        goto LABEL_55;
      }
      if ((v27 & 2) != 0)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"azimuth = ", 10);
        float v30 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)", ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"elevation = ", 12);
        BOOL v31 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)", ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"radius = ", 9);
        goto LABEL_54;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"No coordinates specified", 24);
LABEL_55:
      std::ios_base::getloc((const std::ios_base *)((char *)v43 + *(void *)(v43[0] - 24)));
      int v32 = std::locale::use_facet((const std::locale *)__p, v19);
      ((void (*)(const std::locale::facet *, uint64_t))v32->__vftable[2].~facet_0)(v32, 10);
      std::locale::~locale((std::locale *)__p);
      std::ostream::put();
      std::ostream::flush();
      uint64_t v17 = v18;
      size_t v16 = v38.__locale_;
      if (0xCCCCCCCCCCCCCCCDLL * ((v39 - v38.__locale_) >> 2) <= v18++) {
        goto LABEL_56;
      }
    }
    operator delete(__p[0]);
    if (!v20) {
      goto LABEL_49;
    }
LABEL_48:
    CFRelease(v20);
    goto LABEL_49;
  }
LABEL_56:
  std::stringbuf::str();
  if (v38.__locale_)
  {
    long long v39 = v38.__locale_;
    operator delete(v38.__locale_);
  }
  v43[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v43 + *(void *)(v43[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v43[1] = MEMORY[0x263F8C318] + 16;
  if (v44 < 0) {
    operator delete((void *)v43[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x223C937D0](&v45);
}

void sub_221E91B84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  applesauce::CF::StringRef::~StringRef((const void **)&a10.__locale_);
  std::ostringstream::~ostringstream((uint64_t)&a25);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C340] + 64;
  *(void *)(a1 + 112) = MEMORY[0x263F8C340] + 64;
  uint64_t v3 = *(void *)(MEMORY[0x263F8C2C8] + 16);
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2C8] + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + *(void *)(v4 - 24)) = v3;
  unint64_t v5 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v5, (void *)(a1 + 8));
  uint64_t v6 = MEMORY[0x263F8C340] + 24;
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  *(void *)a1 = v6;
  *(void *)(a1 + 112) = v2;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 8) = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_221E91DCC(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x223C937D0](v1);
  _Unwind_Resume(a1);
}

void applesauce::CF::StringRef::~StringRef(const void **this)
{
  uint64_t v1 = *this;
  if (v1) {
    CFRelease(v1);
  }
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)a1 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 8) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223C937D0](a1 + 112);
  return a1;
}

unsigned int *Phase::ChannelLayout::IsLayoutSupported(Phase::ChannelLayout *this, const AudioChannelLayout *a2)
{
  IsLayoutSupported = (unsigned int *)this;
  if (this)
  {
    unsigned int v3 = *((_DWORD *)this + 2);
    if (v3 <= 1) {
      unsigned int v3 = 1;
    }
    std::vector<char>::vector(&v5, 20 * v3 + 12);
    memcpy(v5.__begin_, IsLayoutSupported, 20 * IsLayoutSupported[2] + 12);
    IsLayoutSupported = (unsigned int *)Phase::ChannelLayout::IsLayoutSupported((unsigned int **)&v5);
    if (v5.__begin_)
    {
      v5.__end_ = v5.__begin_;
      operator delete(v5.__begin_);
    }
  }
  return IsLayoutSupported;
}

BOOL Phase::ChannelLayout::IsLayoutSupported(unsigned int **a1)
{
  uint64_t v1 = *a1;
  unsigned int v2 = **a1;
  if (v2 == 0x10000)
  {
    uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)v1[1]);
    v3.i16[0] = vaddlv_u8(v3);
    if (!v3.i32[0]) {
      return 0;
    }
  }
  else if (v2)
  {
    if (!(unsigned __int16)**a1) {
      return 0;
    }
  }
  else if (!v1[2])
  {
    return 0;
  }
  if (v2 != 0x10000)
  {
    unsigned int v4 = v2 ? (unsigned __int16)**a1 : v1[2];
    if (v4 > 0x40) {
      return 0;
    }
  }
  return v2 < 0xFFFF0000 && (v2 & 0xFFFF0000) != 9633792;
}

BOOL Phase::ChannelLayout::IsChannelLFE(Phase::Logger *a1, unsigned __int32 a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  unsigned int v4 = *(int **)a1;
  int v5 = **(_DWORD **)a1;
  if (v5 == 0x10000)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v4[1]);
    v7.i16[0] = vaddlv_u8(v7);
    unsigned __int32 v6 = v7.i32[0];
  }
  else if (v5)
  {
    unsigned __int32 v6 = (unsigned __int16)**(_DWORD **)a1;
  }
  else
  {
    unsigned __int32 v6 = v4[2];
  }
  if (v6 <= a2)
  {
    unint64_t v11 = **(NSObject ***)(Phase::Logger::GetInstance(a1) + 384);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      int v12 = **(_DWORD **)a1;
      *(_DWORD *)std::string __p = 136315906;
      *(void *)&__p[4] = "ChannelLayout.cpp";
      *(_WORD *)&__p[12] = 1024;
      *(_DWORD *)&__p[14] = 797;
      __int16 v15 = 1024;
      unsigned __int32 v16 = a2;
      __int16 v17 = 1024;
      int v18 = v12;
      _os_log_impl(&dword_221E5E000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d ChannelLayout: querying invalid channel (%i) info for layout %i", __p, 0x1Eu);
    }
    return 0;
  }
  else
  {
    Phase::ChannelLayout::GetChannelLayoutChannelDescriptions(a1, (uint64_t *)__p);
    int v8 = *(_DWORD *)(*(void *)__p + 20 * (int)a2);
    BOOL v10 = v8 == 4 || v8 == 37;
    *(void *)&__p[8] = *(void *)__p;
    operator delete(*(void **)__p);
  }
  return v10;
}

uint64_t Phase::ChannelLayout::GetNumNonLFEChannels(Phase::Logger *a1)
{
  unsigned int v2 = *(int **)a1;
  int v3 = **(_DWORD **)a1;
  if (v3 == 0x10000)
  {
    uint8x8_t v5 = (uint8x8_t)vcnt_s8((int8x8_t)v2[1]);
    v5.i16[0] = vaddlv_u8(v5);
    uint64_t v4 = v5.u32[0];
  }
  else if (v3)
  {
    uint64_t v4 = (unsigned __int16)**(_DWORD **)a1;
  }
  else
  {
    uint64_t v4 = v2[2];
  }
  for (unsigned __int32 i = 0; ; ++i)
  {
    if (v3 == 0x10000)
    {
      uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v2[1]);
      v8.i16[0] = vaddlv_u8(v8);
      unsigned int v7 = v8.i32[0];
    }
    else
    {
      unsigned int v7 = v3 ? (unsigned __int16)v3 : v2[2];
    }
    if (i >= v7) {
      break;
    }
    uint64_t v4 = (v4 - Phase::ChannelLayout::IsChannelLFE(a1, i));
    unsigned int v2 = *(int **)a1;
    int v3 = **(_DWORD **)a1;
  }
  return v4;
}

BOOL Phase::ChannelLayout::AreLayoutsEqual(void *a1, uint64_t *a2)
{
  inSpecifier[2] = *MEMORY[0x263EF8340];
  UInt32 ioPropertyDataSize = 4;
  int outPropertyData = 0;
  uint64_t v2 = *a2;
  inSpecifier[0] = *a1;
  inSpecifier[1] = v2;
  Property = (Phase::Logger *)AudioFormatGetProperty(0x63686571u, 0x10u, inSpecifier, &ioPropertyDataSize, &outPropertyData);
  if (!Property) {
    return outPropertyData == 1;
  }
  int v4 = (int)Property;
  uint8x8_t v5 = **(NSObject ***)(Phase::Logger::GetInstance(Property) + 496);
  BOOL result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
  if (result)
  {
    *(_DWORD *)buf = 136315650;
    BOOL v10 = "ChannelLayout.cpp";
    __int16 v11 = 1024;
    int v12 = 832;
    __int16 v13 = 1024;
    int v14 = v4;
    _os_log_impl(&dword_221E5E000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d ChannelLayout: could not compare channel layouts, failed with error %i", buf, 0x18u);
    return 0;
  }
  return result;
}

void Phase::ChannelLayout::ReduceLayout(const void **a1@<X0>, unint64_t a2@<X1>, std::vector<char> *a3@<X8>)
{
  if (a2 == -1)
  {
    a3->__begin_ = 0;
    a3->__end_ = 0;
    a3->__end_cap_.__value_ = 0;
    int v26 = *a1;
    uint64_t v27 = (uint64_t)a1[1];
    size_t v28 = v27 - (void)*a1;
    std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(a3, v26, v27, v28);
  }
  else
  {
    BOOL v31 = 0;
    int v32 = 0;
    uint64_t v33 = 0;
    Phase::ChannelLayout::GetChannelLayoutChannelDescriptions(a1, (uint64_t *)&__p);
    unsigned __int32 v6 = (char *)__p;
    uint8x8_t v5 = v30;
    if (v30 != __p)
    {
      unint64_t v7 = 0;
      do
      {
        if ((a2 >> v7))
        {
          uint8x8_t v8 = &v6[20 * v7];
          CFTypeID v9 = v32;
          if (v32 >= (_DWORD *)v33)
          {
            unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v32 - (unsigned char *)v31) >> 2);
            unint64_t v13 = v12 + 1;
            if (v12 + 1 > 0xCCCCCCCCCCCCCCCLL) {
              std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
            }
            if (0x999999999999999ALL * ((v33 - (unsigned char *)v31) >> 2) > v13) {
              unint64_t v13 = 0x999999999999999ALL * ((v33 - (unsigned char *)v31) >> 2);
            }
            if (0xCCCCCCCCCCCCCCCDLL * ((v33 - (unsigned char *)v31) >> 2) >= 0x666666666666666) {
              unint64_t v14 = 0xCCCCCCCCCCCCCCCLL;
            }
            else {
              unint64_t v14 = v13;
            }
            if (v14) {
              __int16 v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioChannelDescription>>((uint64_t)&v33, v14);
            }
            else {
              __int16 v15 = 0;
            }
            unsigned __int32 v16 = &v15[20 * v12];
            long long v17 = *(_OWORD *)v8;
            *((_DWORD *)v16 + 4) = *((_DWORD *)v8 + 4);
            *(_OWORD *)unsigned __int32 v16 = v17;
            uint64_t v19 = (char *)v31;
            int v18 = (char *)v32;
            CFStringRef v20 = v16;
            if (v32 != v31)
            {
              do
              {
                long long v21 = *(_OWORD *)(v18 - 20);
                *((_DWORD *)v20 - 1) = *((_DWORD *)v18 - 1);
                *(_OWORD *)(v20 - 20) = v21;
                v20 -= 20;
                v18 -= 20;
              }
              while (v18 != v19);
              int v18 = (char *)v31;
            }
            __int16 v11 = v16 + 20;
            BOOL v31 = v20;
            int v32 = v16 + 20;
            uint64_t v33 = &v15[20 * v14];
            if (v18) {
              operator delete(v18);
            }
          }
          else
          {
            long long v10 = *(_OWORD *)v8;
            v32[4] = *((_DWORD *)v8 + 4);
            _OWORD *v9 = v10;
            __int16 v11 = (_DWORD *)v9 + 5;
          }
          int v32 = v11;
          unsigned __int32 v6 = (char *)__p;
          uint8x8_t v5 = v30;
        }
        ++v7;
      }
      while (0xCCCCCCCCCCCCCCCDLL * ((v5 - v6) >> 2) > v7);
    }
    size_t v22 = v31;
    unsigned int v23 = -858993459 * (((char *)v32 - (unsigned char *)v31) >> 2);
    if (v23 <= 1) {
      unsigned int v24 = 1;
    }
    else {
      unsigned int v24 = -858993459 * (((char *)v32 - (unsigned char *)v31) >> 2);
    }
    std::vector<char>::value_type __x = 0;
    std::vector<char>::vector(a3, 20 * v24 + 12, &__x);
    std::vector<char>::pointer begin = a3->__begin_;
    *(void *)std::vector<char>::pointer begin = 0;
    *((_DWORD *)begin + 2) = v23;
    if (v23) {
      memmove(begin + 12, v22, 20 * v23);
    }
    if (__p)
    {
      float v30 = __p;
      operator delete(__p);
    }
    if (v31)
    {
      int v32 = v31;
      operator delete(v31);
    }
  }
}

void sub_221E925DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::ChannelLayout::GetNumActiveChannels(int **a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 != -1)
  {
    uint8x8_t v5 = *a1;
    int v6 = **a1;
    if (v6 == 0x10000)
    {
      LOBYTE(v5) = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)v5[1]));
    }
    else if (v6)
    {
      LOBYTE(v5) = **a1;
    }
    else
    {
      LODWORD(v5) = v5[2];
    }
    uint64_t v7 = a2 & ~(-1 << (char)v5);
    goto LABEL_15;
  }
  uint64_t v2 = *a1;
  int v3 = **a1;
  if (v3 == 0x10000)
  {
    uint64_t v7 = v2[1];
LABEL_15:
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    return v8.u32[0];
  }
  if (v3) {
    return (unsigned __int16)**a1;
  }
  else {
    return v2[2];
  }
}

void Phase::ChannelLayout::GetCrossmixMatrix(int **a1@<X0>, int **a2@<X1>, void *a3@<X8>)
{
  inSpecifier[2] = *MEMORY[0x263EF8340];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  int v4 = *a2;
  inSpecifier[0] = *a1;
  inSpecifier[1] = v4;
  UInt32 outPropertyDataSize = 0;
  PropertyInfo = (Phase::Logger *)AudioFormatGetPropertyInfo(0x6D6D6170u, 0x10u, inSpecifier, &outPropertyDataSize);
  if (!PropertyInfo) {
    operator new[]();
  }
  int v6 = **(NSObject ***)(Phase::Logger::GetInstance(PropertyInfo) + 496);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    int v7 = **a1;
    int v8 = **a2;
    buf[0] = 136315906;
    *(void *)&buf[1] = "ChannelLayout.cpp";
    __int16 v12 = 1024;
    *(_DWORD *)unint64_t v13 = 932;
    *(_WORD *)&v13[4] = 1024;
    *(_DWORD *)&v13[6] = v7;
    __int16 v14 = 1024;
    int v15 = v8;
    _os_log_impl(&dword_221E5E000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d ChannelLayout: could not determine a crossmix matrix for layouts %i to %i", (uint8_t *)buf, 0x1Eu);
  }
}

void sub_221E92CF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::locale a12, uint64_t a13)
{
}

void std::vector<std::vector<float>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<float>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      uint64_t v8 = a1[1];
      do
      {
        long long v10 = *(void **)(v8 - 24);
        v8 -= 24;
        CFTypeID v9 = v10;
        if (v10)
        {
          *(void *)(v3 - 16) = v9;
          operator delete(v9);
        }
        uint64_t v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void *applesauce::CF::convert_to<std::string,0>@<X0>(const __CFString *a1@<X0>, uint64_t a2@<X8>)
{
  if (!a1 || (CFTypeID TypeID = CFStringGetTypeID(), TypeID != CFGetTypeID(a1)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::convert_error(exception);
  }

  return applesauce::CF::details::CFString_get_value<true>(a1, a2);
}

void sub_221E92E84(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *applesauce::CF::convert_error@<X0>(std::runtime_error *a1@<X8>)
{
  return std::runtime_error::runtime_error(a1, "Could not convert");
}

void *applesauce::CF::details::CFString_get_value<true>@<X0>(const __CFString *a1@<X0>, uint64_t a2@<X8>)
{
  CStringPtr = (char *)CFStringGetCStringPtr(a1, 0x8000100u);
  if (CStringPtr)
  {
    return std::string::basic_string[abi:ne180100]<0>((void *)a2, CStringPtr);
  }
  else
  {
    CFIndex Length = CFStringGetLength(a1);
    CFIndex maxBufLen = 0;
    v10.location = 0;
    v10.length = Length;
    CFStringGetBytes(a1, v10, 0x8000100u, 0, 0, 0, 0, &maxBufLen);
    std::string::basic_string[abi:ne180100]((void *)a2, maxBufLen, 0);
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v7 = (UInt8 *)a2;
    }
    else {
      uint64_t v7 = *(UInt8 **)a2;
    }
    v11.location = 0;
    v11.length = Length;
    return (void *)CFStringGetBytes(a1, v11, 0x8000100u, 0, 0, v7, maxBufLen, &maxBufLen);
  }
}

void sub_221E92F9C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::map<std::string,unsigned int>::map[abi:ne180100](uint64_t a1, long long *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  unint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    BOOL v5 = a2;
    unint64_t v6 = 0;
    uint64_t v7 = &a2[2 * a3];
    uint64_t v8 = (uint64_t *)(a1 + 8);
    while (1)
    {
      CFTypeID v9 = v4;
      if (v8 == v4) {
        goto LABEL_9;
      }
      CFRange v10 = v6;
      CFRange v11 = v4;
      if (v6)
      {
        do
        {
          CFTypeID v9 = v10;
          CFRange v10 = (uint64_t *)v10[1];
        }
        while (v10);
      }
      else
      {
        do
        {
          CFTypeID v9 = (uint64_t *)v11[2];
          BOOL v12 = *v9 == (void)v11;
          CFRange v11 = v9;
        }
        while (v12);
      }
      if (std::less<std::string>::operator()[abi:ne180100](v9 + 4, v5))
      {
LABEL_9:
        if (v6)
        {
          CFStringRef v20 = v9;
          unint64_t v13 = (char **)(v9 + 1);
        }
        else
        {
          CFStringRef v20 = v4;
          unint64_t v13 = (char **)v4;
        }
      }
      else
      {
        unint64_t v13 = (char **)std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__find_equal<std::string>(a1, &v20, v5);
      }
      if (!*v13)
      {
        __int16 v14 = (char *)operator new(0x40uLL);
        int v15 = (std::string *)(v14 + 32);
        if (*((char *)v5 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)v5, *((void *)v5 + 1));
        }
        else
        {
          long long v16 = *v5;
          *((void *)v14 + 6) = *((void *)v5 + 2);
          *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
        }
        *((_DWORD *)v14 + 14) = *((_DWORD *)v5 + 6);
        long long v17 = v20;
        *(void *)__int16 v14 = 0;
        *((void *)v14 + 1) = 0;
        *((void *)v14 + 2) = v17;
        void *v13 = v14;
        uint64_t v18 = **(void **)a1;
        if (v18)
        {
          *(void *)a1 = v18;
          __int16 v14 = *v13;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), (uint64_t *)v14);
        ++*(void *)(a1 + 16);
      }
      v5 += 2;
      if (v5 == v7) {
        break;
      }
      uint64_t v8 = *(uint64_t **)a1;
      unint64_t v6 = *(uint64_t **)(a1 + 8);
    }
  }
  return a1;
}

void sub_221E93128(_Unwind_Exception *a1)
{
  operator delete(v1);
  std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::destroy(*v2);
  _Unwind_Resume(a1);
}

void *std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__find_equal<std::string>(uint64_t a1, void *a2, void *a3)
{
  BOOL v5 = (void *)(a1 + 8);
  unint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v7 = v4;
        uint64_t v8 = v4 + 4;
        if (!std::less<std::string>::operator()[abi:ne180100](a3, v4 + 4)) {
          break;
        }
        unint64_t v4 = (void *)*v7;
        BOOL v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (!std::less<std::string>::operator()[abi:ne180100](v8, a3)) {
        break;
      }
      BOOL v5 = v7 + 1;
      unint64_t v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

BOOL std::less<std::string>::operator()[abi:ne180100](void *a1, void *a2)
{
  int v2 = *((char *)a2 + 23);
  int v3 = *((char *)a1 + 23);
  if (v3 >= 0) {
    size_t v4 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v4 = a1[1];
  }
  if (v3 < 0) {
    a1 = (void *)*a1;
  }
  if (v2 >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = a2[1];
  }
  if (v2 < 0) {
    a2 = (void *)*a2;
  }
  if (v5 >= v4) {
    size_t v6 = v4;
  }
  else {
    size_t v6 = v5;
  }
  int v7 = memcmp(a1, a2, v6);
  if (v7) {
    return v7 < 0;
  }
  else {
    return v4 < v5;
  }
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      int v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      int v3 = (uint64_t *)v2[2];
      size_t v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (int v8 = *(unsigned __int8 *)(v7 + 24), v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            CFTypeID v9 = (uint64_t **)a2[2];
          }
          else
          {
            CFTypeID v9 = (uint64_t **)v2[1];
            CFRange v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              void v10[2] = (uint64_t)v2;
              int v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            uint64_t *v9 = v2;
            v2[2] = (uint64_t)v9;
            int v3 = v9[2];
            int v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          uint64_t *v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), size_t v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          *int v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            int v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          int v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        int v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        *int v2 = (uint64_t)v3;
LABEL_27:
        double v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      unsigned char *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::destroy(*((void *)a1 + 1));
    if (a1[55] < 0) {
      operator delete(*((void **)a1 + 4));
    }
    operator delete(a1);
  }
}

void std::vector<std::vector<float>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    int v15 = v12;
    long long v16 = &v12[24 * v8];
    uint64_t v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    long long v17 = &v16[v14];
    std::vector<std::vector<float>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_221E93594(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<float>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  double v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    int v3 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t std::__split_buffer<std::vector<float>>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<std::vector<float>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    uint64_t v5 = *(void **)(v2 - 24);
    *(void *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(void *)(v2 - 16) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

uint64_t Phase::Controller::ClientTapRegistryProxy::ClientTapRegistryProxy(uint64_t a1, void *a2, uint64_t a3)
{
  *(void *)a1 = 850045863;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(void *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 1065353216;
  *(void *)(a1 + 104) = &unk_26D471478;
  *(void *)(a1 + 128) = a1 + 104;
  *(_DWORD *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 850045863;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(void *)(a1 + 240) = 0;
  id inited = objc_initWeak((id *)(a1 + 248), a2);
  *(void *)(a1 + 256) = a3;
  id v7 = inited;
  if (!a2) {
    std::terminate();
  }

  return a1;
}

void Phase::Controller::ClientTapRegistryProxy::~ClientTapRegistryProxy(Phase::Controller::ClientTapRegistryProxy *this)
{
  Phase::Controller::ClientTapRegistryProxy::Reset((std::mutex *)this);
  objc_destroyWeak((id *)this + 31);
  caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::ClientTapReceiverObject *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::~guarded_lookup_hash_table((uint64_t)this + 104);
  std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>>>::~__hash_table((uint64_t)this + 64);

  std::mutex::~mutex((std::mutex *)this);
}

void Phase::Controller::ClientTapRegistryProxy::Reset(std::mutex *this)
{
  std::mutex::lock(this);
  for (unsigned __int32 i = &this[1].__m_.__opaque[8];
        ;
        caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::ClientTapReceiverObject *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::remove((uint64_t)&this[1].__m_.__opaque[32], *((void *)i + 2), *((void *)i + 3)))
  {
    unsigned __int32 i = *(char **)i;
    if (!i) {
      break;
    }
  }
  std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>>>::clear((uint64_t)&this[1]);

  std::mutex::unlock(this);
}

void sub_221E93958(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::ClientTapReceiverObject *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::remove(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v18.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 80);
  v18.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 80));
  uint64_t v6 = atomic_load((unint64_t *)(a1 + 40));
  if (v6
    && (unint64_t SlotForKey = caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl::findSlotForKey(v6, a2, a3), (SlotForKey & 1) != 0))
  {
    uint64_t v9 = v8;
    atomic_store(0xFFFFFFFFFFFFFFFFLL, (unint64_t *)(v6 + 8 * HIDWORD(SlotForKey) + 16));
    if (v8)
    {
      int v11 = atomic_load((unsigned int *)(a1 + 48));
      if (v11 >= 1)
      {
        do
        {
          __ns.__rep_ = 50000;
          std::this_thread::sleep_for (&__ns);
          int v12 = atomic_load((unsigned int *)(a1 + 48));
        }
        while (v12 > 0);
      }
      if ((unsigned __int16)atomic_load((unsigned int *)v9))
      {
        std::unique_lock<std::mutex>::unlock(&v18);
        while ((unsigned __int16)atomic_load((unsigned int *)v9))
        {
          __ns.__rep_ = 500000;
          std::this_thread::sleep_for (&__ns);
        }
        std::unique_lock<std::mutex>::lock(&v18);
        uint64_t v6 = atomic_load((unint64_t *)(a1 + 40));
      }
      caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::element_t::release((unsigned int *)v9);
      int v16 = *(_DWORD *)(a1 + 32) - 1;
      *(_DWORD *)(a1 + 32) = v16;
      if (v6)
      {
        unsigned int v17 = *(_DWORD *)(v6 + 8);
        uint64_t v9 = 1;
        if (v17 >= 9 && 16 * v16 / v17 <= 2) {
          caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::ClientTapReceiverObject *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::rehash((unint64_t *)a1, v17 >> 1);
        }
      }
      else
      {
        uint64_t v9 = 1;
      }
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::ClientTapReceiverObject *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::emptyReleasePool(a1);
  if (v18.__owns_) {
    std::mutex::unlock(v18.__m_);
  }
  return v9;
}

void sub_221E93AE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, char a11)
{
  if (a11) {
    std::mutex::unlock(a10);
  }
  _Unwind_Resume(exception_object);
}

void Phase::Controller::ClientTapRegistryProxy::RegisterTapReceiver(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = a2;
  id aBlock = a3;
  std::mutex::lock((std::mutex *)a1);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 248));
  if (WeakRetained)
  {
    long long StringHashId = (unint64_t)Phase::GetStringHashId(v5, v6);
    if (!std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>((void *)(a1 + 64), &StringHashId))operator new(); {
    [MEMORY[0x263EFF940] raise:@"API Misuse", @"Already registered a receiver for tap id %@", v5 format];
    }
  }

  std::mutex::unlock((std::mutex *)a1);
}

void sub_221E94124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<Phase::Controller::ClientTapReceiverObject>::reset[abi:ne180100](v8, 0);
  operator delete(v7);
  std::unique_ptr<Phase::Controller::ClientTapReceiverObject>::reset[abi:ne180100]((id **)va, 0);

  std::mutex::unlock(v5);
  _Unwind_Resume(a1);
}

void Phase::Controller::ClientTapRegistryProxy::UnregisterTapReceiver(Phase::Controller::ClientTapRegistryProxy *this, NSString *a2)
{
  int v3 = a2;
  std::mutex::lock((std::mutex *)this);
  uint64_t StringHashId = Phase::GetStringHashId((Phase *)v3, v4);
  uint64_t v9 = StringHashId;
  uint64_t v10 = 0;
  id WeakRetained = objc_loadWeakRetained((id *)this + 31);
  id v7 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v8 = objc_msgSend(WeakRetained, "implementation", v9, v10);
    (*(void (**)(void, uint64_t, void))(**(void **)(v8 + 424) + 72))(*(void *)(v8 + 424), StringHashId, 0);
  }
  caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::ClientTapReceiverObject *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::remove((uint64_t)this + 104, StringHashId, 0);
  std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>>>::__erase_unique<Phase::UniqueObjectId>((void *)this + 8, &v9);

  std::mutex::unlock((std::mutex *)this);
}

void sub_221E94264(_Unwind_Exception *a1)
{
  std::mutex::unlock(v2);

  _Unwind_Resume(a1);
}

id Phase::Controller::ClientTapRegistryProxy::GetTapReceiverFormat(std::mutex *this, NSString *a2)
{
  int v3 = a2;
  std::mutex::lock(this);
  v8[0] = Phase::GetStringHashId((Phase *)v3, v4);
  v8[1] = 0;
  uint64_t v5 = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>(&this[1].__m_.__sig, v8);
  uint64_t v6 = v5;
  if (v5)
  {
    if (*(unsigned char *)(v5[4] + 56)) {
      uint64_t v6 = (void *)[objc_alloc(MEMORY[0x263EF9388]) initWithStreamDescription:v5[4] + 16];
    }
    else {
      uint64_t v6 = 0;
    }
  }
  std::mutex::unlock(this);

  return v6;
}

void sub_221E94340(_Unwind_Exception *a1)
{
  std::mutex::unlock(v2);

  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::ClientTapRegistryProxy::IORender(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = (atomic_uint *)(a1 + 152);
  atomic_fetch_add((atomic_uint *volatile)(a1 + 152), 1u);
  uint64_t result = atomic_load((unint64_t *)(a1 + 144));
  if (result)
  {
    uint64_t result = caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl::findSlotForKey(result, a2, a3);
    if (v9)
    {
      uint64_t v10 = (atomic_uint *)v9;
      atomic_fetch_add((atomic_uint *volatile)v9, 1u);
      uint64_t v11 = *(void *)(v9 + 24);
      atomic_fetch_add(v6, 0xFFFFFFFF);
      uint64_t v12 = *(void *)(a6 + 32);
      long long v13 = *(_OWORD *)(a6 + 16);
      *(_OWORD *)(v11 + 16) = *(_OWORD *)a6;
      *(_OWORD *)(v11 + 32) = v13;
      *(void *)(v11 + 48) = v12;
      uint64_t result = (*(uint64_t (**)(void))(*(void *)v11 + 16))();
      uint64_t v6 = v10;
    }
  }
  atomic_fetch_add(v6, 0xFFFFFFFF);
  return result;
}

void sub_221E94430(_Unwind_Exception *a1)
{
  atomic_fetch_add(v1, v2);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>>>::__deallocate_node(a1, *(id ***)(a1 + 16));
  unsigned int v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>>>::__deallocate_node(uint64_t a1, id **a2)
{
  if (a2)
  {
    unsigned int v2 = a2;
    do
    {
      int v3 = *v2;
      std::unique_ptr<Phase::Controller::ClientTapReceiverObject>::reset[abi:ne180100](v2 + 4, 0);
      operator delete(v2);
      unsigned int v2 = (id **)v3;
    }
    while (v3);
  }
}

void *caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::ClientTapReceiverObject *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::~guarded_lookup_hash_table(uint64_t a1)
{
  if (atomic_load((unsigned int *)(a1 + 48)))
  {
    _os_assert_log();
    uint64_t result = (void *)_os_crash();
    __break(1u);
  }
  else
  {
    uint64_t v3 = atomic_load((unint64_t *)(a1 + 40));
    if (v3)
    {
      uint64_t v4 = caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::ClientTapReceiverObject *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl::~table_impl(v3);
      MEMORY[0x223C938A0](v4, 0x1060C402CF69088);
    }
    std::mutex::~mutex((std::mutex *)(a1 + 80));
    uint64_t v5 = *(uint64_t **)(a1 + 56);
    if (v5)
    {
      uint64_t v6 = *(uint64_t **)(a1 + 64);
      id v7 = *(void **)(a1 + 56);
      if (v6 != v5)
      {
        do
          std::unique_ptr<caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::ClientTapReceiverObject *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl,std::default_delete<caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::ClientTapReceiverObject *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl>>::reset[abi:ne180100](--v6);
        while (v6 != v5);
        id v7 = *(void **)(a1 + 56);
      }
      *(void *)(a1 + 64) = v5;
      operator delete(v7);
    }
    return std::__function::__value_func<unsigned int ()(Phase::UniqueObjectId)>::~__value_func[abi:ne180100]((void *)a1);
  }
  return result;
}

uint64_t caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::ClientTapReceiverObject *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl::~table_impl(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (unsigned int **)(a1 + 16);
    do
    {
      if ((unint64_t)*v3 + 1 >= 2) {
        caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::element_t::release(*v3);
      }
      ++v3;
      --v2;
    }
    while (v2);
  }
  return a1;
}

uint64_t std::unique_ptr<caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::ClientTapReceiverObject *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl,std::default_delete<caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::ClientTapReceiverObject *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl>>::reset[abi:ne180100](uint64_t *a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::ClientTapReceiverObject *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl::~table_impl(result);
    JUMPOUT(0x223C938A0);
  }
  return result;
}

_DWORD *caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::ClientTapReceiverObject *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::rehash(unint64_t *a1, unsigned int a2)
{
  uint64_t v4 = a1 + 5;
  unint64_t v5 = atomic_load(a1 + 5);
  uint64_t v6 = operator new(8 * (a2 - 1) + 24);
  *(void *)uint64_t v6 = a1;
  v6[2] = a2;
  bzero(v6 + 4, 8 * a2);
  if (v5)
  {
    uint64_t v7 = *(unsigned int *)(v5 + 8);
    if (v7)
    {
      uint64_t v8 = (unint64_t *)(v5 + 16);
      do
      {
        unint64_t v9 = *v8;
        if (*v8 + 1 >= 2)
        {
          unint64_t SlotForKey = caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl::findSlotForKey((uint64_t)v6, *(void *)(v9 + 8), *(void *)(v9 + 16));
          if ((SlotForKey & 1) == 0)
          {
            atomic_fetch_add((atomic_uint *volatile)v9, 0x10000u);
            atomic_store(v9, (unint64_t *)&v6[2 * HIDWORD(SlotForKey) + 4]);
          }
        }
        ++v8;
        --v7;
      }
      while (v7);
    }
    atomic_store((unint64_t)v6, a1 + 5);
    uint64_t v12 = (uint64_t *)a1[8];
    unint64_t v11 = a1[9];
    if ((unint64_t)v12 >= v11)
    {
      long long v14 = (void *)a1[7];
      uint64_t v15 = v12 - v14;
      unint64_t v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 61) {
        std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v17 = v11 - (void)v14;
      if (v17 >> 2 > v16) {
        unint64_t v16 = v17 >> 2;
      }
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v18 = v16;
      }
      if (v18)
      {
        if (v18 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v19 = (char *)operator new(8 * v18);
      }
      else
      {
        uint64_t v19 = 0;
      }
      CFStringRef v20 = (unint64_t *)&v19[8 * v15];
      long long v21 = &v19[8 * v18];
      *CFStringRef v20 = v5;
      long long v13 = v20 + 1;
      if (v12 == v14)
      {
        a1[7] = (unint64_t)v20;
        a1[8] = (unint64_t)v13;
        a1[9] = (unint64_t)v21;
      }
      else
      {
        do
        {
          unint64_t v22 = *--v12;
          *uint64_t v12 = 0;
          *--CFStringRef v20 = v22;
        }
        while (v12 != v14);
        uint64_t v12 = (uint64_t *)a1[7];
        unsigned int v23 = (uint64_t *)a1[8];
        a1[7] = (unint64_t)v20;
        a1[8] = (unint64_t)v13;
        a1[9] = (unint64_t)v21;
        while (v23 != v12)
          std::unique_ptr<caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::ClientTapReceiverObject *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl,std::default_delete<caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::ClientTapReceiverObject *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl>>::reset[abi:ne180100](--v23);
      }
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      *uint64_t v12 = v5;
      long long v13 = v12 + 1;
    }
    a1[8] = (unint64_t)v13;
  }
  else
  {
    atomic_store((unint64_t)v6, v4);
  }
  return v6;
}

uint64_t caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::ClientTapReceiverObject *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::emptyReleasePool(uint64_t result)
{
  int v1 = atomic_load((unsigned int *)(result + 48));
  if (v1 <= 0)
  {
    uint64_t v2 = result;
    uint64_t v4 = *(uint64_t **)(result + 56);
    for (unsigned __int32 i = *(uint64_t **)(result + 64);
          i != v4;
          uint64_t result = std::unique_ptr<caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::ClientTapReceiverObject *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl,std::default_delete<caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::ClientTapReceiverObject *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::table_impl>>::reset[abi:ne180100](i))
    {
      --i;
    }
    *(void *)(v2 + 64) = v4;
  }
  return result;
}

void std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>>>::__deallocate_node(a1, *(id ***)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

id **std::unique_ptr<Phase::Controller::ClientTapReceiverObject>::reset[abi:ne180100](id **result, id *a2)
{
  uint64_t v2 = *result;
  void *result = a2;
  if (v2)
  {

    JUMPOUT(0x223C938A0);
  }
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>>>::__erase_unique<Phase::UniqueObjectId>(void *a1, void *a2)
{
  uint64_t result = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>>>::erase(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>>>::remove(a1, a2, (uint64_t)&__p);
  uint64_t v3 = (id **)__p;
  std::string __p = 0;
  if (v3)
  {
    if (v6) {
      std::unique_ptr<Phase::Controller::ClientTapReceiverObject>::reset[abi:ne180100](v3 + 4, 0);
    }
    operator delete(v3);
  }
  return v2;
}

void *std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>>>::remove@<X0>(void *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  char v6 = *(void **)(*result + 8 * v4);
  do
  {
    uint64_t v7 = v6;
    char v6 = (void *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2) {
    goto LABEL_18;
  }
  unint64_t v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v3) {
      v8 %= *(void *)&v3;
    }
  }
  else
  {
    v8 &= *(void *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v9 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }
    else
    {
      v9 &= *(void *)&v3 - 1;
    }
    if (v9 != v4) {
LABEL_19:
    }
      *(void *)(*result + 8 * v4) = 0;
  }
  uint64_t v10 = *a2;
  if (*a2)
  {
    unint64_t v11 = *(void *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v3) {
        v11 %= *(void *)&v3;
      }
    }
    else
    {
      v11 &= *(void *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(void *)(*result + 8 * v11) = v7;
      uint64_t v10 = *a2;
    }
  }
  void *v7 = v10;
  *a2 = 0;
  --result[3];
  *(void *)a3 = a2;
  *(void *)(a3 + 8) = result + 2;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

uint64_t Phase::TapSourceRegistry::GetOrCreateTapSourceInfo(uint64_t a1, int64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, void *a7)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  long long v13 = a7;
  long long v14 = v13;
  uint64_t v15 = 0;
  switch(a3)
  {
    case 0:
      unint64_t v16 = std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::find<PHASETapType>((void *)(a1 + 8), a2);
      if (!v16)
      {
        id v17 = [[PHASETapDescription alloc] initSystemTapOfType:a2];
        unint64_t v18 = [PHASEPreSpatialTapSource alloc];
        id WeakRetained = objc_loadWeakRetained((id *)a1);
        [(PHASEPreSpatialTapSource *)v18 initWithEngine:WeakRetained description:v17];

        operator new();
      }
      goto LABEL_58;
    case 1:
      if ((int)a4 > 0)
      {
        CFStringRef v20 = *(uint64_t **)(a1 + 96);
        if (!v20) {
          goto LABEL_19;
        }
        long long v21 = (uint64_t *)(a1 + 96);
        do
        {
          int64_t v22 = v20[4];
          if (v22 >= a2)
          {
            if (v22 <= a2)
            {
              if (*((_DWORD *)v20 + 10) < (int)a4) {
                ++v20;
              }
              else {
                long long v21 = v20;
              }
            }
            else
            {
              long long v21 = v20;
            }
          }
          else
          {
            ++v20;
          }
          CFStringRef v20 = (uint64_t *)*v20;
        }
        while (v20);
        if (v21 == (uint64_t *)(a1 + 96) || (int64_t v23 = v21[4], v23 > a2) || v23 >= a2 && *((_DWORD *)v21 + 10) > (int)a4)
        {
LABEL_19:
          uint64_t v46 = [[PHASETapDescription alloc] initWithProcessIdentifier:a4 tapType:a2];
          unsigned int v24 = [PHASEPreSpatialTapSource alloc];
          id v25 = objc_loadWeakRetained((id *)a1);
          [(PHASEPreSpatialTapSource *)v24 initWithEngine:v25 description:v46];

          operator new();
        }
        goto LABEL_55;
      }
      int v26 = **(id **)(Phase::Logger::GetInstance(v13) + 944);
      if (!os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
        goto LABEL_62;
      }
      buf[0] = 136315650;
      *(void *)&buf[1] = "ClientTapSourceRegistry.mm";
      __int16 v49 = 1024;
      int v50 = 86;
      __int16 v51 = 1024;
      int v52 = a4;
      uint64_t v27 = "%25s:%-5d Error: invalid process tap, client PID %d";
      goto LABEL_61;
    case 2:
      if ((a5 + 1) > 1)
      {
        CFStringRef v37 = *(uint64_t **)(a1 + 120);
        if (!v37) {
          goto LABEL_54;
        }
        long long v21 = (uint64_t *)(a1 + 120);
        do
        {
          int64_t v38 = v37[4];
          if (v38 >= a2)
          {
            if (v38 <= a2)
            {
              if (*((_DWORD *)v37 + 10) < a5) {
                ++v37;
              }
              else {
                long long v21 = v37;
              }
            }
            else
            {
              long long v21 = v37;
            }
          }
          else
          {
            ++v37;
          }
          CFStringRef v37 = (uint64_t *)*v37;
        }
        while (v37);
        if (v21 == (uint64_t *)(a1 + 120)
          || (int64_t v39 = v21[4], v39 > a2)
          || v39 >= a2 && *((_DWORD *)v21 + 10) > a5)
        {
LABEL_54:
          double v47 = [[PHASETapDescription alloc] initWithAudioSessionToken:a5 tapType:a2];
          unsigned __int8 v40 = [PHASEPreSpatialTapSource alloc];
          id v41 = objc_loadWeakRetained((id *)a1);
          [(PHASEPreSpatialTapSource *)v40 initWithEngine:v41 description:v47];

          operator new();
        }
LABEL_55:
        uint64_t v15 = v21[6];
        goto LABEL_63;
      }
      int v26 = **(id **)(Phase::Logger::GetInstance(v13) + 944);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        buf[0] = 136315650;
        *(void *)&buf[1] = "ClientTapSourceRegistry.mm";
        __int16 v49 = 1024;
        int v50 = 113;
        __int16 v51 = 1024;
        int v52 = a5;
        uint64_t v27 = "%25s:%-5d Error: invalid session tap, sessionID 0x%x";
LABEL_61:
        _os_log_impl(&dword_221E5E000, v26, OS_LOG_TYPE_ERROR, v27, (uint8_t *)buf, 0x18u);
      }
      goto LABEL_62;
    case 3:
      goto LABEL_63;
    case 4:
      if (!a6) {
        goto LABEL_62;
      }
      size_t v28 = *(void **)(a1 + 168);
      if (!v28) {
        goto LABEL_36;
      }
      float64x2_t v29 = (void *)(a1 + 168);
      do
      {
        int64_t v30 = v28[4];
        if (v30 >= a2)
        {
          if (v30 <= a2)
          {
            if ((uint64_t)v28[5] < 1) {
              ++v28;
            }
            else {
              float64x2_t v29 = v28;
            }
          }
          else
          {
            float64x2_t v29 = v28;
          }
        }
        else
        {
          ++v28;
        }
        size_t v28 = (void *)*v28;
      }
      while (v28);
      if (v29 == (void *)(a1 + 168) || (int64_t v31 = v29[4], v31 > a2) || v31 >= a2 && (uint64_t)v29[5] >= 2)
      {
LABEL_36:
        int v32 = [[PHASETapDescription alloc] initWithStreamType:1 tapType:a2];
        uint64_t v33 = [PHASEPreSpatialTapSource alloc];
        id v34 = objc_loadWeakRetained((id *)a1);
        [(PHASEPreSpatialTapSource *)v33 initWithEngine:v34 description:v32];

        operator new();
      }
      uint64_t v15 = v29[6];
      goto LABEL_63;
    case 5:
      if (a6)
      {
        __int16 v35 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v13)
                                                                                            + 944)));
        if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
        {
          unsigned __int8 v36 = GetTapTypeString(a2);
          buf[0] = 136316162;
          *(void *)&buf[1] = "ClientTapSourceRegistry.mm";
          __int16 v49 = 1024;
          int v50 = 63;
          __int16 v51 = 1024;
          int v52 = 1;
          __int16 v53 = 1024;
          int v54 = 5;
          __int16 v55 = 2112;
          std::string v56 = v36;
          _os_log_impl(&dword_221E5E000, v35, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Excluding PHASETapStreamType %d from PHASETapBinding %d, with TapType %@", (uint8_t *)buf, 0x28u);
        }
LABEL_62:
        uint64_t v15 = 0;
      }
      else
      {
        unint64_t v16 = std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::find<PHASETapType>((void *)(a1 + 48), a2);
        if (!v16)
        {
          id v42 = [[PHASETapDescription alloc] initScreenSharingTapOfType:a2];
          int64_t v43 = [PHASEPreSpatialTapSource alloc];
          id v44 = objc_loadWeakRetained((id *)a1);
          [(PHASEPreSpatialTapSource *)v43 initWithEngine:v44 description:v42];

          operator new();
        }
LABEL_58:
        uint64_t v15 = v16[3];
      }
LABEL_63:

      return v15;
    default:
      std::terminate();
      return result;
  }
}

void sub_221E9546C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id *a13)
{
  id v17 = a13;
  a13 = 0;
  if (v17) {
    std::default_delete<Phase::TapSourceRegistry::TapSourceInfo>::operator()[abi:ne180100]((uint64_t)&a13, v17);
  }

  _Unwind_Resume(a1);
}

void Phase::TapSourceRegistry::CacheTapInfo(Phase::TapSourceRegistry *this, int a2, AVAudioSession *a3, CachedTapInfo *a4)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  char v6 = a3;
  uint64_t v7 = (Phase::Logger *)[(AVAudioSession *)v6 opaqueSessionID];
  unsigned int v8 = v7;
  if (!v6)
  {
    unint64_t v9 = **(id **)(Phase::Logger::GetInstance(v7) + 944);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      int v14 = 136315394;
      uint64_t v15 = "ClientTapSourceRegistry.mm";
      __int16 v16 = 1024;
      int v17 = 225;
      _os_log_impl(&dword_221E5E000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d unexpected nil audio session", (uint8_t *)&v14, 0x12u);
    }
  }
  uint64_t v10 = (Phase::Logger *)[(AVAudioSession *)v6 iAmTheAssistant];
  BOOL v11 = (char)v10;
  if (v10)
  {
    uint64_t v12 = **(id **)(Phase::Logger::GetInstance(v10) + 944);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      int v14 = 136315906;
      uint64_t v15 = "ClientTapSourceRegistry.mm";
      __int16 v16 = 1024;
      int v17 = 235;
      __int16 v18 = 1024;
      unsigned int v19 = v8;
      __int16 v20 = 1024;
      int v21 = 1;
      _os_log_impl(&dword_221E5E000, v12, OS_LOG_TYPE_DEFAULT, "%25s:%-5d sessionID 0x%x matches PHASETapStreamType %d", (uint8_t *)&v14, 0x1Eu);
    }
  }
  a4->clientPID = a2;
  a4->audioSessionToken = v8;
  a4->isSiruint64_t i = v11;
  sceneIdentifier = a4->sceneIdentifier;
  a4->sceneIdentifier = 0;
}

void sub_221E957A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void Phase::TapSourceRegistry::RegisterTapSource(Phase::Logger *a1, uint64_t a2, void *a3, void **a4)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  if (*a3 != a3[1])
  {
    unsigned int v8 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(a1)
                                                                                       + 944)));
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = (void *)*a3;
      uint64_t v9 = a3[1];
      int v12 = *(_DWORD *)a4;
      unsigned int v11 = *((_DWORD *)a4 + 1);
      long long v13 = GetTapTypeString(a2);
      int v20 = 136316674;
      int v21 = "ClientTapSourceRegistry.mm";
      __int16 v22 = 1024;
      int v23 = 306;
      __int16 v24 = 2048;
      id v25 = a1;
      __int16 v26 = 1024;
      int v27 = (unint64_t)(v9 - (void)v10) >> 4;
      __int16 v28 = 1024;
      int v29 = v12;
      __int16 v30 = 1024;
      unsigned int v31 = v11;
      __int16 v32 = 2112;
      uint64_t v33 = v13;
      _os_log_impl(&dword_221E5E000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d TapSourceRegistry@%p: registering %d submixId(s) for client PID %d, sessionID 0x%x with TapType %@", (uint8_t *)&v20, 0x38u);
    }
    int v14 = &Phase::sGetAllTapBindings(void)::sBindings;
    do
    {
      uint64_t TapSourceInfo = Phase::TapSourceRegistry::GetOrCreateTapSourceInfo((uint64_t)a1, a2, *v14, *(unsigned int *)a4, *((unsigned int *)a4 + 1), *((unsigned __int8 *)a4 + 8), a4[2]);
      if (TapSourceInfo)
      {
        id v16 = *(id *)(TapSourceInfo + 8);
        if (!v16) {
          std::terminate();
        }
        int v17 = v16;
        __int16 v18 = (void *)*a3;
        unsigned int v19 = (void *)a3[1];
        while (v18 != v19)
        {
          if (*v18 || v18[1]) {
            objc_msgSend(v17, "addSubmixId:");
          }
          v18 += 2;
        }
      }
      ++v14;
    }
    while (v14 != (uint64_t *)&unk_2220A5188);
  }
}

void sub_221E959A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void Phase::TapSourceRegistry::UnregisterTapSource(Phase::Logger *a1, uint64_t a2, void *a3, void **a4)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  if (*a3 != a3[1])
  {
    unsigned int v8 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(a1)
                                                                                       + 944)));
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = (void *)*a3;
      uint64_t v9 = a3[1];
      int v12 = *(_DWORD *)a4;
      unsigned int v11 = *((_DWORD *)a4 + 1);
      long long v13 = GetTapTypeString(a2);
      int v20 = 136316674;
      int v21 = "ClientTapSourceRegistry.mm";
      __int16 v22 = 1024;
      int v23 = 343;
      __int16 v24 = 2048;
      id v25 = a1;
      __int16 v26 = 1024;
      int v27 = (unint64_t)(v9 - (void)v10) >> 4;
      __int16 v28 = 1024;
      int v29 = v12;
      __int16 v30 = 1024;
      unsigned int v31 = v11;
      __int16 v32 = 2112;
      uint64_t v33 = v13;
      _os_log_impl(&dword_221E5E000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d TapSourceRegistry@%p: unregistering %d submixId(s) for client PID %d, sessionID 0x%x, with TapType %@", (uint8_t *)&v20, 0x38u);
    }
    int v14 = &Phase::sGetAllTapBindings(void)::sBindings;
    do
    {
      uint64_t TapSourceInfo = Phase::TapSourceRegistry::GetOrCreateTapSourceInfo((uint64_t)a1, a2, *v14, *(unsigned int *)a4, *((unsigned int *)a4 + 1), *((unsigned __int8 *)a4 + 8), a4[2]);
      if (TapSourceInfo)
      {
        id v16 = *(id *)(TapSourceInfo + 8);
        if (!v16) {
          std::terminate();
        }
        int v17 = v16;
        __int16 v18 = (void *)*a3;
        unsigned int v19 = (void *)a3[1];
        while (v18 != v19)
        {
          if (*v18 || v18[1]) {
            objc_msgSend(v17, "removeSubmixId:");
          }
          v18 += 2;
        }
      }
      ++v14;
    }
    while (v14 != (uint64_t *)&unk_2220A5188);
  }
}

void sub_221E95BAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::find<PHASETapType>(void *a1, unint64_t a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a2;
    if (*(void *)&v2 <= a2) {
      unint64_t v4 = a2 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v4 = (*(void *)&v2 - 1) & a2;
  }
  uint8x8_t v5 = *(void **)(*a1 + 8 * v4);
  if (!v5) {
    return 0;
  }
  uint64_t result = (void *)*v5;
  if (*v5)
  {
    do
    {
      unint64_t v7 = result[1];
      if (v7 == a2)
      {
        if (result[2] == a2) {
          return result;
        }
      }
      else
      {
        if (v3.u32[0] > 1uLL)
        {
          if (v7 >= *(void *)&v2) {
            v7 %= *(void *)&v2;
          }
        }
        else
        {
          v7 &= *(void *)&v2 - 1;
        }
        if (v7 != v4) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void std::default_delete<Phase::TapSourceRegistry::TapSourceInfo>::operator()[abi:ne180100](uint64_t a1, id *a2)
{
  if (a2)
  {

    JUMPOUT(0x223C938A0);
  }
}

void *std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::__emplace_unique_key_args<PHASETapType,PHASETapType&,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v7 = a2;
  unint64_t v9 = a1[1];
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = a2;
      if (v9 <= a2) {
        unint64_t v4 = a2 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & a2;
    }
    unsigned int v11 = *(void ***)(*a1 + 8 * v4);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == a2)
        {
          if (i[2] == a2) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4) {
            break;
          }
        }
      }
    }
  }
  int v14 = a1 + 2;
  uint64_t i = operator new(0x20uLL);
  void *i = 0;
  i[1] = v7;
  uint64_t v15 = *a4;
  *a4 = 0;
  i[2] = a3;
  i[3] = v15;
  float v16 = (float)(unint64_t)(a1[3] + 1);
  float v17 = *((float *)a1 + 8);
  if (v9 && (float)(v17 * (float)v9) >= v16)
  {
    unint64_t v7 = v4;
    goto LABEL_64;
  }
  BOOL v18 = 1;
  if (v9 >= 3) {
    BOOL v18 = (v9 & (v9 - 1)) != 0;
  }
  unint64_t v19 = v18 | (2 * v9);
  unint64_t v20 = vcvtps_u32_f32(v16 / v17);
  if (v19 <= v20) {
    int8x8_t prime = (int8x8_t)v20;
  }
  else {
    int8x8_t prime = (int8x8_t)v19;
  }
  if (*(void *)&prime == 1)
  {
    int8x8_t prime = (int8x8_t)2;
  }
  else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
  {
    int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    unint64_t v9 = a1[1];
  }
  if (*(void *)&prime <= v9)
  {
    if (*(void *)&prime >= v9) {
      goto LABEL_60;
    }
    unint64_t v28 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
    if (v9 < 3 || (uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
    {
      unint64_t v28 = std::__next_prime(v28);
    }
    else
    {
      uint64_t v30 = 1 << -(char)__clz(v28 - 1);
      if (v28 >= 2) {
        unint64_t v28 = v30;
      }
    }
    if (*(void *)&prime <= v28) {
      int8x8_t prime = (int8x8_t)v28;
    }
    if (*(void *)&prime >= v9)
    {
      unint64_t v9 = a1[1];
      goto LABEL_60;
    }
    if (!*(void *)&prime)
    {
      CFStringRef v37 = (void *)*a1;
      *a1 = 0;
      if (v37) {
        operator delete(v37);
      }
      unint64_t v9 = 0;
      a1[1] = 0;
      goto LABEL_60;
    }
  }
  if (*(void *)&prime >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  __int16 v22 = operator new(8 * *(void *)&prime);
  int v23 = (void *)*a1;
  *a1 = (uint64_t)v22;
  if (v23) {
    operator delete(v23);
  }
  uint64_t v24 = 0;
  a1[1] = (uint64_t)prime;
  do
    *(void *)(*a1 + 8 * v24++) = 0;
  while (*(void *)&prime != v24);
  id v25 = (void *)*v14;
  if (*v14)
  {
    unint64_t v26 = v25[1];
    uint8x8_t v27 = (uint8x8_t)vcnt_s8(prime);
    v27.i16[0] = vaddlv_u8(v27);
    if (v27.u32[0] > 1uLL)
    {
      if (v26 >= *(void *)&prime) {
        v26 %= *(void *)&prime;
      }
    }
    else
    {
      v26 &= *(void *)&prime - 1;
    }
    *(void *)(*a1 + 8 * v26) = v14;
    unsigned int v31 = (void *)*v25;
    if (*v25)
    {
      do
      {
        unint64_t v32 = v31[1];
        if (v27.u32[0] > 1uLL)
        {
          if (v32 >= *(void *)&prime) {
            v32 %= *(void *)&prime;
          }
        }
        else
        {
          v32 &= *(void *)&prime - 1;
        }
        if (v32 != v26)
        {
          if (!*(void *)(*a1 + 8 * v32))
          {
            *(void *)(*a1 + 8 * v32) = v25;
            goto LABEL_56;
          }
          void *v25 = *v31;
          *unsigned int v31 = **(void **)(*a1 + 8 * v32);
          **(void **)(*a1 + 8 * v32) = v31;
          unsigned int v31 = v25;
        }
        unint64_t v32 = v26;
LABEL_56:
        id v25 = v31;
        unsigned int v31 = (void *)*v31;
        unint64_t v26 = v32;
      }
      while (v31);
    }
  }
  unint64_t v9 = (unint64_t)prime;
LABEL_60:
  if ((v9 & (v9 - 1)) != 0)
  {
    if (v9 <= v7) {
      v7 %= v9;
    }
  }
  else
  {
    v7 &= v9 - 1;
  }
LABEL_64:
  uint64_t v33 = *a1;
  uint64_t v34 = *(void **)(*a1 + 8 * v7);
  if (v34)
  {
    void *i = *v34;
LABEL_72:
    *uint64_t v34 = i;
    goto LABEL_73;
  }
  void *i = *v14;
  *int v14 = i;
  *(void *)(v33 + 8 * v7) = v14;
  if (*i)
  {
    unint64_t v35 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v35 >= v9) {
        v35 %= v9;
      }
    }
    else
    {
      v35 &= v9 - 1;
    }
    uint64_t v34 = (void *)(*a1 + 8 * v35);
    goto LABEL_72;
  }
LABEL_73:
  ++a1[3];
  return i;
}

void sub_221E960C0(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,void *>>>::operator()[abi:ne180100](char a1, char *__p)
{
  if (a1)
  {
    uint8x8_t v3 = __p + 24;
    unint64_t v4 = (id *)*((void *)__p + 3);
    *((void *)__p + 3) = 0;
    if (v4) {
      std::default_delete<Phase::TapSourceRegistry::TapSourceInfo>::operator()[abi:ne180100]((uint64_t)v3, v4);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

uint64_t Phase::Controller::GetSpatialCategoryFromStringId(Phase::Controller *this, const Phase::StringId *a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)this;
  if (*(uint64_t *)this > 0x1FFAFEA98FCB6A46)
  {
    if (v3 == 0x1FFAFEA98FCB6A47) {
      return 1;
    }
    if (v3 == 0x6B49B1D64D1B41D9) {
      return 3;
    }
  }
  else
  {
    if (v3 == 0x94F19D1538263596) {
      return 2;
    }
    if (v3 == 0xAB79C315C5E5658BLL) {
      return 4;
    }
  }
  uint8x8_t v5 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(this)
                                                                                     + 1072)));
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    uint64_t v6 = *((void *)this + 1);
    int v7 = 136315906;
    unsigned int v8 = "ControllerEnumConversions.mm";
    __int16 v9 = 1024;
    int v10 = 89;
    __int16 v11 = 2080;
    uint64_t v12 = v6;
    __int16 v13 = 2048;
    uint64_t v14 = 0;
    _os_log_impl(&dword_221E5E000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d GetSpatialCategoryFromStringId(%s) not handled! Returning '%ld'.", (uint8_t *)&v7, 0x26u);
  }

  return 0;
}

uint64_t Phase::Controller::GetSpatialModelerGraphFromStringId(Phase::Controller *this, const Phase::StringId *a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)this;
  if (*(void *)this == 0x94EB1EFFBBB6498BLL) {
    return 3;
  }
  if (v2 == 0x41431F2BBDC5FD3DLL) {
    return 1;
  }
  if (v2 == 0x303D316DF08A928ALL) {
    return 2;
  }
  uint8x8_t v5 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(this)
                                                                                     + 1072)));
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    uint64_t v6 = *((void *)this + 1);
    int v7 = 136315906;
    unsigned int v8 = "ControllerEnumConversions.mm";
    __int16 v9 = 1024;
    int v10 = 170;
    __int16 v11 = 2080;
    uint64_t v12 = v6;
    __int16 v13 = 2048;
    uint64_t v14 = 0;
    _os_log_impl(&dword_221E5E000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d GetSpatialModelerGraphFromStringId(%s) not handled! Returning '%ld'.", (uint8_t *)&v7, 0x26u);
  }

  return 0;
}

uint64_t Phase::Controller::GetSpatialModelerStageFromStringId(Phase::Controller *this, const Phase::StringId *a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)this;
  if (*(void *)this == 0x7D179DD4BE0C7C0BLL) {
    return 3;
  }
  if (v2 == 0x76F46F9CAE2A8525) {
    return 1;
  }
  if (v2 == 0x9841528F05C205ADLL) {
    return 2;
  }
  uint8x8_t v5 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(this)
                                                                                     + 1072)));
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    uint64_t v6 = *((void *)this + 1);
    int v7 = 136315906;
    unsigned int v8 = "ControllerEnumConversions.mm";
    __int16 v9 = 1024;
    int v10 = 246;
    __int16 v11 = 2080;
    uint64_t v12 = v6;
    __int16 v13 = 2048;
    uint64_t v14 = 0;
    _os_log_impl(&dword_221E5E000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d GetSpatialModelerStageFromStringId(%s) not handled! Returning '%ld'.", (uint8_t *)&v7, 0x26u);
  }

  return 0;
}

uint64_t Phase::Controller::GetSpatialModelerParameterFromStringId(Phase::Controller *this, const Phase::StringId *a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)this;
  if (*(uint64_t *)this <= 0x3B97657A3F7890D7)
  {
    if (v3 == 0xBB61740109BBA304) {
      return 4;
    }
    if (v3 == 0x1DC46F42C8E3BA06) {
      return 1;
    }
  }
  else
  {
    switch(v3)
    {
      case 0x3B97657A3F7890D8:
        return 5;
      case 0x4A994AC0B3A35B97:
        return 3;
      case 0x3E6FF80416884765:
        return 2;
    }
  }
  uint8x8_t v5 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(this)
                                                                                     + 1072)));
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    uint64_t v6 = *((void *)this + 1);
    int v7 = 136315906;
    unsigned int v8 = "ControllerEnumConversions.mm";
    __int16 v9 = 1024;
    int v10 = 334;
    __int16 v11 = 2080;
    uint64_t v12 = v6;
    __int16 v13 = 2048;
    uint64_t v14 = 0;
    _os_log_impl(&dword_221E5E000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d GetSpatialModelerParameterFromStringId(%s) not handled! Returning '%ld'.", (uint8_t *)&v7, 0x26u);
  }

  return 0;
}

uint64_t Phase::Controller::IsSteppedParameter(void *a1)
{
  if (*a1 == 0x3B97657A3F7890D8)
  {
    int v1 = (const char *)a1[1];
    if (v1 != "MaximumClusterCount")
    {
      uint64_t v2 = "MaximumClusterCount";
      return strcmp(v1, v2) == 0;
    }
  }
  else
  {
    if (*a1 != 0x3E6FF80416884765) {
      return 0;
    }
    int v1 = (const char *)a1[1];
    if (v1 != "SubbandCount")
    {
      uint64_t v2 = "SubbandCount";
      return strcmp(v1, v2) == 0;
    }
  }
  return 1;
}

void Phase::DspLayer::ConvolverVoicePool::~ConvolverVoicePool(Phase::DspLayer::ConvolverVoicePool *this)
{
  Phase::DspLayer::VoicePool::~VoicePool(this);

  JUMPOUT(0x223C938A0);
}

void Phase::DspLayer::ConvolverVoicePool::GetNewRegistryEntry(Phase::DspLayer::ConvolverVoicePool *this)
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  malloc_type_malloc(0, 0x1050040B063AAFAuLL);
  operator new();
}

void sub_221E969A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Phase::DspLayer::ConvolverVoicePool::GetStaticInstanceName(Phase::DspLayer::ConvolverVoicePool *this@<X0>, std::string *a2@<X8>)
{
  std::to_string(&v4, (int)this);
  uint64_t v3 = std::string::insert(&v4, 0, "ConvolverVoicePool_1x");
  *a2 = *v3;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
}

void sub_221E96A9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Phase::DspLayer::NUPConvolverSlice::~NUPConvolverSlice(Phase::DspLayer::NUPConvolverSlice *this)
{
  Phase::DspLayer::NUPConvolverSlice::~NUPConvolverSlice(this);

  JUMPOUT(0x223C938A0);
}

{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  uint64_t v1 = (char *)this + 65584;
  *(void *)this = &unk_26D471F58;
  if (*(int *)(*((void *)this + 8225) + 88) >= 1)
  {
    uint64_t v2 = 0;
    do
    {
      uint64_t v3 = *((void *)v1 + 6);
      std::string v4 = *(void *)(v3 + 8 * v2);
      if (v4)
      {
        free(*(void **)(v4 + 16));
        MEMORY[0x223C938A0](v4, 0x10C0C4053CBD40BLL);
        uint64_t v3 = *((void *)v1 + 6);
      }
      *(void *)(v3 + 8 * v2) = 0;
      free(*(void **)(*(void *)v1 + 8 * v2));
      *(void *)(*(void *)v1 + 8 * v2) = 0;
      free(*(void **)(*((void *)v1 + 1) + 8 * v2));
      *(void *)(*((void *)v1 + 1) + 8 * v2++) = 0;
    }
    while (v2 < *(int *)(*((void *)v1 + 27) + 88));
  }
  free(*((void **)v1 + 6));
  *((void *)v1 + 6) = 0;
  free(*(void **)v1);
  *(void *)uint64_t v1 = 0;
  free(*((void **)v1 + 1));
  *((void *)v1 + 1) = 0;
  free(*((void **)v1 + 4));
}

__n128 Phase::DspLayer::NUPConvolverSlice::Reset(uint64_t a1)
{
  uint64_t v2 = a1 + 65616;
  *(_OWORD *)(a1 + 65600) = 0u;
  bzero(*(void **)(a1 + 65616), 16 * *(int *)(a1 + 65624));
  if (*(int *)(*(void *)(v2 + 184) + 88) >= 1)
  {
    uint64_t v3 = 0;
    do
    {
      uint64_t v4 = *(void *)(*(void *)(v2 + 16) + 8 * v3);
      *(void *)uint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
      bzero(*(void **)(v4 + 16), 16 * *(int *)(v4 + 24));
      ++v3;
    }
    while (v3 < *(int *)(*(void *)(v2 + 184) + 88));
  }
  *(_OWORD *)(a1 + 65672) = 0u;
  *(_OWORD *)(a1 + 65688) = 0u;
  *(_OWORD *)(a1 + 65640) = 0u;
  *(_OWORD *)(a1 + 65656) = 0u;
  result.n128_u64[0] = -1;
  result.n128_u64[1] = -1;
  *(__n128 *)(a1 + 65768) = result;
  *(__n128 *)(a1 + 65784) = result;
  return result;
}

void Phase::DspLayer::NUPConvolverSlice::Reset(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7 = a1 + 65616;
  uint64_t v8 = a1 + 4 * a3;
  bzero((void *)(*(void *)(a1 + 65616) + 4 * *(_DWORD *)(a1 + 65624) * a3), 4 * *(int *)(a1 + 65624));
  *(_DWORD *)(v8 + 65600) = 0;
  if (*(int *)(*(void *)(v7 + 184) + 88) >= 1)
  {
    uint64_t v9 = 0;
    do
    {
      uint64_t v10 = *(void *)(*(void *)(v7 + 16) + 8 * v9);
      bzero((void *)(*(void *)(v10 + 16) + 4 * *(_DWORD *)(v10 + 24) * a3), 4 * *(int *)(v10 + 24));
      *(_DWORD *)(v10 + 4 * a3) = 0;
      ++v9;
    }
    while (v9 < *(int *)(*(void *)(v7 + 184) + 88));
  }
  __int16 v11 = (void *)(a1 + 8 * a3);
  v11[8205] = 0;
  v11[8209] = 0;
  v11[8221] = a4;
}

uint64_t Phase::DspLayer::NUPConvolverSlice::GetParameter(Phase::DspLayer::NUPConvolverSlice *this)
{
  return 9;
}

uint64_t Phase::DspLayer::NUPConvolverSlice::SetParameter(Phase::DspLayer::NUPConvolverSlice *this, double a2)
{
  return 9;
}

__n128 Phase::DspLayer::NUPConvolverSlice::UpdateParameters(void *a1)
{
  uint64_t v1 = a1 + 8198;
  memcpy(a1 + 4100, a1 + 2, 0x8010uLL);
  if (*(int *)(v1[27] + 88) >= 1)
  {
    uint64_t v3 = 0;
    do
    {
      uint64_t v4 = *(__n128 **)(*v1 + 8 * v3);
      __n128 result = *v4;
      *(__n128 *)*(void *)(v1[1] + 8 * v3++) = *v4;
    }
    while (v3 < *(int *)(v1[27] + 88));
  }
  return result;
}

{
  void *v1;
  __n128 result;
  uint64_t v3;
  __n128 *v4;

  uint64_t v1 = a1 + 8198;
  memcpy(a1 + 4100, a1 + 2, 0x8010uLL);
  if (*(int *)(v1[27] + 88) >= 1)
  {
    uint64_t v3 = 0;
    do
    {
      uint64_t v4 = *(__n128 **)(*v1 + 8 * v3);
      __n128 result = *v4;
      *(__n128 *)*(void *)(v1[1] + 8 * v3++) = *v4;
    }
    while (v3 < *(int *)(v1[27] + 88));
  }
  return result;
}

void Phase::DspLayer::NUPConvolverSlice::Run(Phase::DspLayer::NUPConvolverSlice *this, Phase::DspLayer::VoiceEngine *a2, Phase::DspLayer::VoicePool *a3, __int32 a4)
{
  int v131 = a3;
  uint64_t v141 = *MEMORY[0x263EF8340];
  uint64_t v7 = (char *)this + 65592;
  int32x4_t v8 = (int32x4_t)vandq_s8(*((int8x16_t *)this + 2050), (int8x16_t)vcgtq_s32(vdupq_n_s32(a4), (int32x4_t)xmmword_2220A5190));
  int64x2_t v9 = (int64x2_t)vcgtzq_s32(v8);
  if (vorrq_s8((int8x16_t)vdupq_laneq_s64(v9, 1), (int8x16_t)v9).u64[0])
  {
    uint64_t v10 = *((void *)a2 + 7);
    __int16 v11 = (float32x4_t *)((char *)this + 32832);
    float32x4_t v12 = 0uLL;
    int32x4_t v13 = 0uLL;
    v14.i64[0] = 0x100000001;
    v14.i64[1] = 0x100000001;
    do
    {
      v15.i32[0] = *(_DWORD *)(v10 + 4 * v11[-1].i32[0]);
      v15.i32[1] = *(_DWORD *)(v10 + 4 * v11[-1].i32[1]);
      v15.i32[2] = *(_DWORD *)(v10 + 4 * v11[-1].i32[2]);
      v15.i32[3] = *(_DWORD *)(v10 + 4 * v11[-1].i32[3]);
      float32x4_t v12 = vmlaq_f32(v12, (float32x4_t)vandq_s8((int8x16_t)v9, v15), *v11);
      int32x4_t v13 = vaddq_s32(v13, v14);
      int64x2_t v9 = (int64x2_t)vcgtq_s32(v8, v13);
      v11 += 2;
    }
    while (vorrq_s8((int8x16_t)vdupq_laneq_s64(v9, 1), (int8x16_t)v9).u64[0]);
  }
  else
  {
    float32x4_t v12 = 0uLL;
  }
  float v16 = (char *)this + 65600;
  int8x16_t v18 = (int8x16_t)Phase::DspLayer::ReblockerIn::AddFrame((int32x4_t *)this + 4100, a4, (int32x4_t)v12);
  if (*(int *)(*((void *)v7 + 26) + 88) >= 1)
  {
    uint64_t v19 = 0;
    HIDWORD(v21) = a4 - 1;
    LODWORD(v21) = a4 - 1;
    int v20 = v21 >> 1;
    do
    {
      __int16 v22 = *(int **)(*(void *)v7 + 8 * v19);
      *(float *)v23.i32 = Phase::DspLayer::ReblockerOut::GetNextFrame(*(int32x4_t **)(*((void *)v7 + 5) + 8 * v19), a4);
      int8x16_t v18 = vandq_s8(v23, vorrq_s8((int8x16_t)vcltzq_f32((float32x4_t)v23), (int8x16_t)vcgezq_f32((float32x4_t)v23)));
      switch(v20)
      {
        case 0:
          goto LABEL_12;
        case 1:
          goto LABEL_11;
        case 3:
          goto LABEL_10;
        case 7:
          *(_DWORD *)(*((void *)a2 + 7) + 4 * v22[3]) = v18.i32[3];
LABEL_10:
          *(_DWORD *)(*((void *)a2 + 7) + 4 * v22[2]) = v18.i32[2];
LABEL_11:
          *(_DWORD *)(*((void *)a2 + 7) + 4 * v22[1]) = v18.i32[1];
LABEL_12:
          *(_DWORD *)(*((void *)a2 + 7) + 4 * *v22) = v18.i32[0];
          break;
        default:
          break;
      }
      ++v19;
    }
    while (v19 < *(int *)(*((void *)v7 + 26) + 88));
  }
  if (a4)
  {
    uint64_t v24 = 0;
    v18.i32[0] = a4;
    *(int8x8_t *)v18.i8 = vcnt_s8(*(int8x8_t *)v18.i8);
    v18.i16[0] = vaddlv_u8(*(uint8x8_t *)v18.i8);
    uint64_t v122 = (char *)this + 65704;
    int v121 = (char *)this + 65720;
    if (v18.i32[0] <= 1u) {
      uint64_t v25 = 1;
    }
    else {
      uint64_t v25 = v18.u32[0];
    }
    uint64_t v124 = (uint64_t *)((char *)this + 65768);
    v18.i64[0] = 136316162;
    int32x4_t v127 = (int32x4_t)v18;
    v18.i64[0] = 136316418;
    int32x4_t v130 = (int32x4_t)v18;
    uint64_t v132 = v16;
    uint64_t v133 = v25;
    while (*(_DWORD *)&v16[4 * (int)v24])
    {
LABEL_110:
      if (++v24 == v25) {
        return;
      }
    }
    vDSP_Length v26 = *((int *)v7 + 8);
    uint8x8_t v27 = (atomic_ullong *)*((void *)this + (int)v24 + 8226);
    unint64_t v28 = (char *)this + (int)v24 + 65840;
    if (!v27)
    {
      if (*v28)
      {
        uint64_t v34 = **(NSObject ***)(Phase::Logger::GetInstance((Phase::Logger *)v17) + 144);
        uint64_t v17 = os_log_type_enabled(v34, OS_LOG_TYPE_ERROR);
        if (v17)
        {
          uint64_t v35 = *((void *)v131 + 6);
          uint64_t v36 = *((void *)this + (int)v24 + 8221);
          *(_DWORD *)buf = v127.i32[0];
          *(void *)&uint8_t buf[4] = "ConvolverVoicePool.cpp";
          *(_WORD *)&uint8_t buf[12] = 1024;
          *(_DWORD *)&buf[14] = 340;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = v35;
          *(_WORD *)&unsigned char buf[28] = 2048;
          *(void *)&buf[30] = v131;
          __int16 v137 = 2048;
          *(void *)__int16 v138 = v36;
          CFStringRef v37 = v34;
          int64_t v38 = "%25s:%-5d %s(%p):%llu buffer exchanger is nullptr. Output will be silent.";
          uint32_t v39 = 48;
          goto LABEL_56;
        }
        goto LABEL_57;
      }
      goto LABEL_58;
    }
    *unint64_t v28 = 1;
    unint64_t v29 = atomic_exchange(v27, 0);
    if (!v29)
    {
LABEL_50:
      unint64_t v28 = (char *)this + (int)v24 + 65848;
      if (!*((void *)this + (int)v24 + 8205))
      {
        if (*v28)
        {
          uint64_t v57 = **(NSObject ***)(Phase::Logger::GetInstance((Phase::Logger *)v17) + 144);
          uint64_t v17 = os_log_type_enabled(v57, OS_LOG_TYPE_ERROR);
          if (v17)
          {
            uint64_t v58 = *((void *)v7 + 26);
            uint64_t v59 = *((void *)this + (int)v24 + 8221);
            *(_DWORD *)buf = v130.i32[0];
            *(void *)&uint8_t buf[4] = "ConvolverVoicePool.cpp";
            *(_WORD *)&uint8_t buf[12] = 1024;
            *(_DWORD *)&buf[14] = 381;
            *(_WORD *)&unsigned char buf[18] = 2048;
            *(void *)&buf[20] = v58;
            *(_WORD *)&unsigned char buf[28] = 2048;
            *(void *)&buf[30] = this;
            __int16 v137 = 1024;
            *(_DWORD *)__int16 v138 = v24;
            *(_WORD *)&v138[4] = 2048;
            *(void *)&v138[6] = v59;
            CFStringRef v37 = v57;
            int64_t v38 = "%25s:%-5d ConvolverVoicePool%p: slice%p (lane %d, vid %llu) mConvolverBufferActive == nullptr. Output "
                  "will be silent. \n";
            uint32_t v39 = 54;
            goto LABEL_56;
          }
          goto LABEL_57;
        }
        goto LABEL_58;
      }
      __int16 v53 = (char *)this + 8 * v24;
      int v54 = v53 + 65672;
      *unint64_t v28 = 1;
      __int16 v55 = (uint64_t *)*((void *)v53 + 8209);
      if (v55) {
        uint64_t v56 = *v55;
      }
      else {
        uint64_t v56 = 0;
      }
      uint64_t v62 = (void **)(v53 + 65640);
      uint64_t v63 = **((void **)v53 + 8205);
      if (*(_DWORD *)(*((void *)v7 + 26) + 88) != 2)
      {
        v128 = (void *)**((void **)v53 + 8205);
        int v129 = v120;
        MEMORY[0x270FA5388](v63);
        int v75 = (char *)v120 - ((v74 + 15) & 0xFFFFFFFF0);
        if (v74 >= 0x200) {
          size_t v76 = 512;
        }
        else {
          size_t v76 = v74;
        }
        bzero((char *)v120 - ((v74 + 15) & 0xFFFFFFFF0), v76);
        if (*(int *)(*((void *)v7 + 26) + 88) >= 1)
        {
          __int16 v78 = (uint64_t *)*((void *)v7 + 5);
          int v79 = v75;
          uint64_t v80 = *(unsigned int *)(*((void *)v7 + 26) + 88);
          do
          {
            uint64_t v81 = *v78++;
            *(void *)int v79 = *(void *)(v81 + 16) + 4 * *(_DWORD *)(v81 + 24) * (int)v24;
            v79 += 8;
            --v80;
          }
          while (v80);
        }
        uint64_t v25 = v133;
        if (v56)
        {
          BOOL v82 = *((_DWORD *)this + v24 + 16438) < 1;
          uint64_t v126 = v62;
          uint64_t v125 = v56;
          if (v82)
          {
            int v123 = v54;
            uint64_t v99 = (*(uint64_t (**)(void *, uint64_t, char *))(*v128 + 24))(v128, *((void *)v7 + 3) + 4 * *((_DWORD *)v7 + 8) * (int)v24, v75);
            if (*(int *)(*((void *)v7 + 26) + 88) >= 1)
            {
              uint64_t v100 = 0;
              int v101 = (char *)this + 4 * v24;
              unint64_t v102 = (float *)(v101 + 65704);
              int v103 = (float *)(v101 + 65720);
              do
              {
                *(float *)buf = 1.0 - *v102;
                *(float *)&int v139 = -*v103;
                vDSP_vrampmul(*(const float **)&v75[8 * v100], 1, (float *)buf, (const float *)&v139, *(float **)&v75[8 * v100], 1, v26);
                ++v100;
              }
              while (v100 < *(int *)(*((void *)v7 + 26) + 88));
            }
            v128 = v120;
            MEMORY[0x270FA5388](v99);
            uint64_t v106 = (char *)v120 - v105;
            if (v104 >= 0x200) {
              size_t v107 = 512;
            }
            else {
              size_t v107 = v104;
            }
            bzero((char *)v120 - v105, v107);
            uint64_t v109 = *((void *)v7 + 26);
            if (*(int *)(v109 + 88) >= 1)
            {
              uint64_t v110 = 0;
              uint64_t v111 = 4 * v26;
              do
              {
                MEMORY[0x270FA5388](v108);
                bzero((char *)v120 - ((v111 + 15) & 0xFFFFFFFFFFFFFFF0), 4 * v26);
                *(void *)&v106[8 * v110++] = (char *)v120 - ((v111 + 15) & 0xFFFFFFFFFFFFFFF0);
              }
              while (v110 < *(int *)(v109 + 88));
            }
            (*(void (**)(uint64_t, uint64_t, char *))(*(void *)v125 + 24))(v125, *((void *)v7 + 3) + 4 * *((_DWORD *)v7 + 8) * (int)v24, v106);
            long long v112 = (_DWORD *)((char *)this + 4 * v24);
            int v113 = v112 + 16426;
            int v114 = v112[16426];
            *(_DWORD *)buf = v114;
            int v115 = v112 + 16430;
            int v116 = v112[16430];
            LODWORD(v139) = v116;
            if (*(int *)(*((void *)v7 + 26) + 88) >= 1)
            {
              uint64_t v117 = 0;
              do
              {
                *(_DWORD *)buf = *v113;
                LODWORD(v139) = *v115;
                vDSP_vrampmuladd(*(const float **)&v106[8 * v117], 1, (float *)buf, (const float *)&v139, *(float **)&v75[8 * v117], 1, v26);
                ++v117;
              }
              while (v117 < *(int *)(*((void *)v7 + 26) + 88));
              int v114 = *(_DWORD *)buf;
              int v116 = (int)v139;
            }
            *int v113 = v114;
            *int v115 = v116;
            int v118 = v112[16434] - v26;
            v112[16434] = v118;
            float v16 = v132;
            uint64_t v62 = v126;
            if (v118 < 1)
            {
              int v119 = v123;
              if (*(void *)v123) {
                atomic_store(0, (unsigned __int8 *)(*(void *)v123 + 12));
              }
              *(void *)int v119 = 0;
              *int v113 = 0;
              *int v115 = 0;
              v112[16434] = 0;
            }
            uint64_t v25 = v133;
          }
          else
          {
            int v123 = (char *)this + 4 * v24 + 65752;
            v120[1] = v120;
            MEMORY[0x270FA5388](v77);
            __int16 v84 = (char *)v120 - ((v83 + 15) & 0xFFFFFFFF0);
            if (v83 >= 0x200) {
              size_t v85 = 512;
            }
            else {
              size_t v85 = v83;
            }
            bzero((char *)v120 - ((v83 + 15) & 0xFFFFFFFF0), v85);
            uint64_t v87 = *((void *)v7 + 26);
            if (*(int *)(v87 + 88) >= 1)
            {
              uint64_t v88 = 0;
              uint64_t v89 = 4 * v26;
              do
              {
                MEMORY[0x270FA5388](v86);
                bzero((char *)v120 - ((v89 + 15) & 0xFFFFFFFFFFFFFFF0), 4 * v26);
                *(void *)&v84[8 * v88++] = (char *)v120 - ((v89 + 15) & 0xFFFFFFFFFFFFFFF0);
              }
              while (v88 < *(int *)(v87 + 88));
            }
            (*(void (**)(void *, uint64_t, char *))(*v128 + 24))(v128, *((void *)v7 + 3) + 4 * *((_DWORD *)v7 + 8) * (int)v24, v84);
            (*(void (**)(uint64_t, uint64_t, char *))(*(void *)v125 + 24))(v125, *((void *)v7 + 3) + 4 * *((_DWORD *)v7 + 8) * (int)v24, v75);
            *(_DWORD *)v123 -= v26;
            float v16 = v132;
            uint64_t v25 = v133;
            uint64_t v62 = v126;
          }
        }
        else
        {
          (*(void (**)(void *, uint64_t, char *))(*v128 + 24))(v128, *((void *)v7 + 3) + 4 * *((_DWORD *)v7 + 8) * (int)v24, v75);
        }
        goto LABEL_109;
      }
      *(void *)buf = 0;
      *(void *)&buf[8] = 0;
      long long v64 = (uint64_t *)*((void *)v7 + 5);
      uint64_t v65 = *v64;
      uint64_t v66 = *(void *)(v64[1] + 16) + 4 * *(_DWORD *)(v64[1] + 24) * (int)v24;
      *(void *)buf = *(void *)(v65 + 16) + 4 * *(_DWORD *)(v65 + 24) * (int)v24;
      *(void *)&buf[8] = v66;
      if (v56)
      {
        uint64_t v67 = v56;
        int v123 = v54;
        int v68 = (char *)this + 4 * v24;
        uint64_t v69 = v68 + 65752;
        if (*((int *)v68 + 16438) < 1)
        {
          (*(void (**)(uint64_t, uint64_t, unsigned char *))(*(void *)v63 + 24))(v63, *((void *)v7 + 3) + 4 * *((_DWORD *)v7 + 8) * (int)v24, buf);
          float v90 = 1.0 - *((float *)v68 + 16426);
          float __Step = -*((float *)v68 + 16430);
          float __Start = v90;
          vDSP_vrampmul2(*(const float **)buf, *(const float **)&buf[8], 1, &__Start, &__Step, *(float **)buf, *(float **)&buf[8], 1, v26);
          MEMORY[0x270FA5388](v91);
          int v93 = (const float *)((char *)v120 - v92);
          bzero((char *)v120 - v92, v94);
          int v139 = v93;
          uint64_t v140 = &v93[v26];
          (*(void (**)(uint64_t, uint64_t, const float **))(*(void *)v67 + 24))(v67, *((void *)v7 + 3) + 4 * *((_DWORD *)v7 + 8) * (int)v24, &v139);
          vDSP_vrampmuladd2(v139, v140, 1, (float *)&v122[4 * v24], (const float *)&v121[4 * v24], *(float **)buf, *(float **)&buf[8], 1, v26);
          int v95 = *((_DWORD *)v68 + 16434);
          BOOL v96 = __OFSUB__(v95, v26);
          int v97 = v95 - v26;
          *((_DWORD *)v68 + 16434) = v97;
          uint64_t v25 = v133;
          if ((v97 < 0) ^ v96 | (v97 == 0))
          {
            unint64_t v98 = v123;
            if (*(void *)v123) {
              atomic_store(0, (unsigned __int8 *)(*(void *)v123 + 12));
            }
            *(void *)unint64_t v98 = 0;
            *((_DWORD *)v68 + 16426) = 0;
            *((_DWORD *)v68 + 16430) = 0;
            *((_DWORD *)v68 + 16434) = 0;
          }
          float v16 = v132;
          goto LABEL_109;
        }
        uint64_t v70 = MEMORY[0x270FA5388](v63);
        uint64_t v72 = (const float *)((char *)v120 - v71);
        bzero((char *)v120 - v71, v73);
        int v139 = v72;
        uint64_t v140 = &v72[v26];
        (*(void (**)(uint64_t, uint64_t, const float **))(*(void *)v70 + 24))(v70, *((void *)v7 + 3) + 4 * *((_DWORD *)v7 + 8) * (int)v24, &v139);
        (*(void (**)(uint64_t, uint64_t, unsigned char *))(*(void *)v67 + 24))(v67, *((void *)v7 + 3) + 4 * *((_DWORD *)v7 + 8) * (int)v24, buf);
        *v69 -= v26;
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t, unsigned char *))(*(void *)v63 + 24))(v63, *((void *)v7 + 3) + 4 * *((_DWORD *)v7 + 8) * (int)v24, buf);
      }
      uint64_t v25 = v133;
LABEL_109:
      uint64_t v17 = (*(uint64_t (**)(void))(*(void *)**v62 + 40))(**v62);
      goto LABEL_110;
    }
    uint64_t v30 = *(void *)v29;
    if (!*(void *)v29) {
      goto LABEL_42;
    }
    unsigned int v31 = (unint64_t *)((char *)this + 8 * (int)v24 + 65640);
    unint64_t v32 = (uint64_t *)*v31;
    if (*v31)
    {
      uint64_t v33 = *v32;
      if (v30 == *v32)
      {
LABEL_49:
        *((unsigned char *)this + (int)v24 + 65844) = 1;
        float v16 = v132;
        goto LABEL_50;
      }
    }
    else
    {
      uint64_t v33 = 0;
    }
    atomic_store(1u, (unsigned __int8 *)(v29 + 12));
    int v40 = *(_DWORD *)(v29 + 8);
    (*(void (**)(uint64_t))(*(void *)v30 + 40))(v30);
    uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v30 + 56))(v30);
    if (v17 != *((_DWORD *)v7 + 8)
      || (uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v30 + 64))(v30),
          v17 != *(_DWORD *)(*((void *)v7 + 26) + 88)))
    {
LABEL_42:
      unint64_t v28 = (char *)this + (int)v24 + 65844;
      float v16 = v132;
      if (*v28)
      {
        __int16 v49 = **(NSObject ***)(Phase::Logger::GetInstance((Phase::Logger *)v17) + 144);
        uint64_t v17 = os_log_type_enabled(v49, OS_LOG_TYPE_ERROR);
        if (v17)
        {
          uint64_t v50 = *((void *)v131 + 6);
          uint64_t v51 = *((void *)this + (int)v24 + 8221);
          *(_DWORD *)buf = v130.i32[0];
          int v52 = "Invalid parameter value";
          if (!v30) {
            int v52 = "Buffer is nullptr";
          }
          *(void *)&uint8_t buf[4] = "ConvolverVoicePool.cpp";
          *(_WORD *)&uint8_t buf[12] = 1024;
          *(_DWORD *)&buf[14] = 362;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = v50;
          *(_WORD *)&unsigned char buf[28] = 2048;
          *(void *)&buf[30] = v131;
          __int16 v137 = 2048;
          *(void *)__int16 v138 = v51;
          *(_WORD *)&v138[8] = 2080;
          *(void *)&v138[10] = v52;
          CFStringRef v37 = v49;
          int64_t v38 = "%25s:%-5d %s(%p):%llu failed to swap buffer with VoicePoolErr \"%s\". Output will be silent.";
          uint32_t v39 = 58;
LABEL_56:
          _os_log_impl(&dword_221E5E000, v37, OS_LOG_TYPE_ERROR, v38, buf, v39);
        }
LABEL_57:
        *unint64_t v28 = 0;
      }
LABEL_58:
      uint64_t v25 = v133;
      if (*(int *)(*((void *)v7 + 26) + 88) >= 1)
      {
        uint64_t v60 = 0;
        do
        {
          uint64_t v61 = *(void *)(*((void *)v7 + 5) + 8 * v60);
          vDSP_vclr((float *)(*(void *)(v61 + 16) + 4 * *(_DWORD *)(v61 + 24) * (int)v24), 1, v26);
          ++v60;
        }
        while (v60 < *(int *)(*((void *)v7 + 26) + 88));
      }
      goto LABEL_110;
    }
    id v41 = (char *)this + 8 * (int)v24 + 65672;
    if (*(void *)v41) {
      atomic_store(0, (unsigned __int8 *)(*(void *)v41 + 12));
    }
    *(void *)id v41 = *v31;
    *unsigned int v31 = v29;
    memset(buf, 0, 32);
    *(void *)&buf[8 * (int)v24] = v30;
    LODWORD(v139) = 1;
    LODWORD(v140) = 3;
    uint64_t v17 = Phase::DspLayer::VoicePool::ExternalCallbackWithMessage(*((void *)v7 + 26), 0, v124, 1 << v24, (unsigned int *)&v139, buf);
    if (v33)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v30 + 104))(v30, v33);
      int v42 = v40 + 127;
      if (v40 >= 0) {
        int v42 = v40;
      }
      unsigned int v43 = (v42 & 0xFFFFFF80) + 128;
      if ((v40 & 0x7F) == 0) {
        unsigned int v43 = v40;
      }
      if ((v43 & 0x7F) != 0) {
        __assert_rtn("SwapBufferInternal", "ConvolverVoicePool.cpp", 314, "(numCrossfadeFrames % ConvolverVoicePool::kUsedBlockSize) == 0");
      }
      id v44 = (char *)this + 4 * (int)v24;
      *((_DWORD *)v44 + 16426) = 1065353216;
      *((float *)v44 + 16430) = -1.0 / (float)(int)(v43 - 1);
      *((_DWORD *)v44 + 16434) = v43;
      int v45 = (*(uint64_t (**)(uint64_t))(*(void *)v30 + 72))(v30);
      int v46 = (*(uint64_t (**)(uint64_t))(*(void *)v30 + 40))(v30);
      if (v46 <= (*(int (**)(uint64_t))(*(void *)v30 + 56))(v30))
      {
        int v48 = 0;
      }
      else
      {
        uint64_t v47 = (*(uint64_t (**)(uint64_t, void))(*(void *)v30 + 80))(v30, (v45 - 1));
        int v48 = (*(uint64_t (**)(uint64_t))(*(void *)v47 + 56))(v47);
      }
      *((_DWORD *)v44 + 16438) = v48;
      uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v33 + 40))(v33);
    }
    goto LABEL_49;
  }
}

uint64_t Phase::DspLayer::NUPConvolverSlice::OnStop(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4 = *(void *)(result + 8 * a4 + 65640);
  if (v4) {
    atomic_store(0, (unsigned __int8 *)(v4 + 12));
  }
  uint64_t v5 = *(void *)(result + 8 * a4 + 65672);
  if (v5) {
    atomic_store(0, (unsigned __int8 *)(v5 + 12));
  }
  return result;
}

float Phase::DspLayer::NUPConvolverSlice::CopyVoiceState(Phase::DspLayer::NUPConvolverSlice *this, Phase::DspLayer::VoicePoolSlice *a2, int a3, int a4)
{
  uint64_t v7 = (uint64_t *)((char *)a2 + 65584);
  int32x4_t v8 = (uint64_t *)((char *)this + 65584);
  uint64_t v9 = a3;
  uint64_t v10 = *((unsigned int *)a2 + a3 + 4);
  uint64_t v11 = a4;
  *((_DWORD *)this + a4 + 4) = v10;
  if ((int)v10 >= 1)
  {
    float32x4_t v12 = (_DWORD *)((char *)this + 4 * a4 + 48);
    int32x4_t v13 = (int *)((char *)a2 + 4 * a3 + 48);
    do
    {
      *(v12 - 4) = *(v13 - 4);
      int v14 = *v13;
      v13 += 8;
      *float32x4_t v12 = v14;
      v12 += 8;
      --v10;
    }
    while (v10);
  }
  int8x16_t v15 = (char *)a2 + 4 * a3;
  uint64_t v16 = *((int *)v15 + 16400);
  memcpy((void *)(*((void *)this + 8202) + 4 * *((_DWORD *)this + 16406) * a4), (const void *)(*((void *)a2 + 8202) + 4 * *((_DWORD *)a2 + 16406) * a3), 4 * v16);
  uint64_t v17 = (char *)this + 4 * v11;
  *((_DWORD *)v17 + 16400) = v16;
  uint64_t v18 = *((unsigned int *)v15 + 8200);
  *((_DWORD *)v17 + 8200) = v18;
  if ((int)v18 >= 1)
  {
    uint64_t v19 = v17 + 32832;
    int v20 = (int *)(v15 + 32832);
    do
    {
      *(v19 - 4) = *(v20 - 4);
      int v21 = *v20;
      v20 += 8;
      _DWORD *v19 = v21;
      v19 += 8;
      --v18;
    }
    while (v18);
  }
  if (*(int *)(v8[27] + 88) >= 1)
  {
    uint64_t v22 = 0;
    do
    {
      uint64_t v23 = *v7;
      uint64_t v24 = *v8;
      *(_DWORD *)(*(void *)(v8[1] + 8 * v22) + 4 * v11) = *(_DWORD *)(*(void *)(v7[1] + 8 * v22) + 4 * v9);
      *(_DWORD *)(*(void *)(v24 + 8 * v22) + 4 * v11) = *(_DWORD *)(*(void *)(v23 + 8 * v22) + 4 * v9);
      uint64_t v25 = *(void *)(v8[6] + 8 * v22);
      uint64_t v26 = *(void *)(v7[6] + 8 * v22);
      memcpy((void *)(*(void *)(v25 + 16) + 4 * *(_DWORD *)(v25 + 24) * a4), (const void *)(*(void *)(v26 + 16) + 4 * *(_DWORD *)(v26 + 24) * a3), 4 * *(int *)(v25 + 24));
      *(_DWORD *)(v25 + 4 * v11) = *(_DWORD *)(v26 + 4 * v9);
      ++v22;
    }
    while (v22 < *(int *)(v8[27] + 88));
  }
  uint8x8_t v27 = (void *)((char *)a2 + 8 * v9);
  unint64_t v28 = (void *)((char *)this + 8 * v11);
  v28[8205] = v27[8205];
  v28[8209] = v27[8209];
  unint64_t v29 = (char *)a2 + 4 * v9;
  uint64_t v30 = (char *)this + 4 * v11;
  *((_DWORD *)v30 + 16426) = *((_DWORD *)v29 + 16426);
  float result = *((float *)v29 + 16430);
  *((float *)v30 + 16430) = result;
  *((_DWORD *)v30 + 16434) = *((_DWORD *)v29 + 16434);
  *((_DWORD *)v30 + 16438) = *((_DWORD *)v29 + 16438);
  v28[8221] = v27[8221];
  v28[8226] = v27[8226];
  unint64_t v32 = (char *)this + v11;
  v32[65844] = *((unsigned char *)a2 + v9 + 65844);
  v32[65848] = *((unsigned char *)a2 + v9 + 65848);
  v32[65840] = *((unsigned char *)a2 + v9 + 65840);
  return result;
}

unint64_t Phase::DspLayer::NUPConvolverSlice::GetInput(Phase::DspLayer::NUPConvolverSlice *this, int a2, int a3)
{
  if (a2) {
    return 0xFFFFFFFF00000008;
  }
  else {
    return (unint64_t)*((unsigned int *)this + a3 + 8204) << 32;
  }
}

uint64_t Phase::DspLayer::NUPConvolverSlice::AddInput(Phase::DspLayer::NUPConvolverSlice *this, int a2, int a3, int a4, float a5)
{
  if (a2) {
    return 8;
  }
  uint64_t v7 = (char *)this + 16;
  uint64_t v8 = *((int *)this + a3 + 4);
  if ((int)v8 > 1023) {
    return 6;
  }
  uint64_t result = 0;
  uint64_t v9 = (char *)this + 32 * v8 + 4 * a3;
  *((_DWORD *)v9 + 8) = a4;
  *((float *)v9 + 12) = a5;
  *(_DWORD *)&v7[4 * a3] = v8 + 1;
  return result;
}

uint64_t Phase::DspLayer::NUPConvolverSlice::RemoveInput(Phase::DspLayer::NUPConvolverSlice *this, int a2, int a3, int a4)
{
  if (a2) {
    return 8;
  }
  uint64_t v5 = (char *)this + 16;
  uint64_t v6 = *((unsigned int *)this + a3 + 4);
  if ((int)v6 < 1) {
    return 7;
  }
  uint64_t v7 = 0;
  for (uint64_t i = (_DWORD *)((char *)this + 4 * a3 + 32); *i != a4; i += 8)
  {
    if (v6 == ++v7) {
      return 7;
    }
  }
  if ((v7 & 0x80000000) != 0) {
    return 7;
  }
  uint64_t v9 = (v6 - 1);
  if ((int)v9 > (int)v7)
  {
    uint64_t v10 = (char *)this + 32 * v9 + 4 * a3;
    _DWORD *i = *((_DWORD *)v10 + 8);
    i[4] = *((_DWORD *)v10 + 12);
  }
  uint64_t result = 0;
  *(_DWORD *)&v5[4 * a3] = v9;
  return result;
}

uint64_t Phase::DspLayer::NUPConvolverSlice::SetInputGain(Phase::DspLayer::NUPConvolverSlice *this, int a2, int a3, int a4, float a5)
{
  if (a2) {
    return 8;
  }
  uint64_t v6 = *((unsigned int *)this + a3 + 4);
  if ((int)v6 < 1) {
    return 7;
  }
  uint64_t v7 = 0;
  for (uint64_t i = (float *)((char *)this + 4 * a3 + 48); *((_DWORD *)i - 4) != a4; i += 8)
  {
    if (v6 == ++v7) {
      return 7;
    }
  }
  if ((v7 & 0x80000000) != 0) {
    return 7;
  }
  uint64_t result = 0;
  float *i = a5;
  return result;
}

uint64_t Phase::DspLayer::NUPConvolverSlice::ClearInputs(Phase::DspLayer::NUPConvolverSlice *this, int a2)
{
  *((_DWORD *)this + a2 + 4) = 0;
  return 0;
}

uint64_t Phase::DspLayer::NUPConvolverSlice::GetMaximumInputConnectionCount(Phase::DspLayer::NUPConvolverSlice *this, int a2)
{
  return (a2 == 0) << 10;
}

unint64_t Phase::DspLayer::NUPConvolverSlice::GetOutput(Phase::DspLayer::NUPConvolverSlice *this, int a2, int a3)
{
  if (*(_DWORD *)(*((void *)this + 8225) + 88) <= a2) {
    return 0xFFFFFFFF00000008;
  }
  else {
    return (unint64_t)*(unsigned int *)(*(void *)(*((void *)this + 8198) + 8 * a2) + 4 * a3) << 32;
  }
}

uint64_t Phase::DspLayer::NUPConvolverSlice::SetOutput(Phase::DspLayer::NUPConvolverSlice *this, int a2, int a3, int a4)
{
  uint64_t v4 = (void *)((char *)this + 65584);
  if (*(_DWORD *)(*((void *)this + 8225) + 88) <= a2) {
    return 8;
  }
  uint64_t result = 0;
  *(_DWORD *)(*(void *)(*v4 + 8 * a2) + 4 * a3) = a4;
  return result;
}

uint64_t Phase::DspLayer::NUPConvolverSlice::SetBuffer(Phase::DspLayer::NUPConvolverSlice *this, int a2, int a3, void *a4)
{
  *((void *)this + a3 + 8226) = a4;
  return 0;
}

void std::__function::__func<Phase::DspLayer::ConvolverVoicePool::GetNewRegistryEntry(int)::$_0,std::allocator<Phase::DspLayer::ConvolverVoicePool::GetNewRegistryEntry(int)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::~__func()
{
}

_DWORD *std::__function::__func<Phase::DspLayer::ConvolverVoicePool::GetNewRegistryEntry(int)::$_0,std::allocator<Phase::DspLayer::ConvolverVoicePool::GetNewRegistryEntry(int)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  *(void *)uint64_t result = &unk_26D472030;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<Phase::DspLayer::ConvolverVoicePool::GetNewRegistryEntry(int)::$_0,std::allocator<Phase::DspLayer::ConvolverVoicePool::GetNewRegistryEntry(int)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_26D472030;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

void std::__function::__func<Phase::DspLayer::ConvolverVoicePool::GetNewRegistryEntry(int)::$_0,std::allocator<Phase::DspLayer::ConvolverVoicePool::GetNewRegistryEntry(int)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::operator()()
{
}

void sub_221E988A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, Phase::DspLayer::VoicePool *a10)
{
  MEMORY[0x223C938A0](v10, 0x10F1C400BE8F744);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::AmbientSubmix::AmbientSubmix(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, Phase::Logger *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v94 = *MEMORY[0x263EF8340];
  uint64_t v10 = Phase::Controller::Submix::Submix((Phase::Logger *)a1, *(void *)(a2 + 8), *(void *)(a2 + 16), *(void *)(a2 + 64), *(void *)(a2 + 72), *(_DWORD *)(a2 + 80), a3, a4, a5, a6, a7, a8);
  *(void *)uint64_t v10 = &unk_26D472078;
  *((void *)v10 + 40) = *(void *)a2;
  uint64_t v11 = (uint64_t *)((char *)v10 + 328);
  *((void *)v10 + 49) = 0;
  *(_OWORD *)((char *)v10 + 360) = 0u;
  *(_OWORD *)((char *)v10 + 376) = 0u;
  *(_OWORD *)((char *)v10 + 328) = 0u;
  *(_OWORD *)((char *)v10 + 344) = 0u;
  float32x4_t v12 = *(const void **)(a2 + 40);
  uint64_t v13 = *(void *)(a2 + 48);
  memset(__p, 0, 24);
  int v14 = std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(__p, v12, v13, v13 - (void)v12);
  unint64_t ChannelMask = Phase::Controller::AmbientSubmix::GetChannelMask((uint64_t)v14, (Phase::Logger *)(a2 + 40));
  uint64_t v16 = (int **)(a1 + 400);
  Phase::ChannelLayout::ReduceLayout((const void **)__p, ChannelMask, (std::vector<char> *)(a1 + 400));
  uint64_t v17 = (Phase::Logger *)__p[0];
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  *(_OWORD *)(a1 + 424) = xmmword_2220A4E00;
  if (!*(void *)(a1 + 320))
  {
    uint64_t v69 = **(id **)(Phase::Logger::GetInstance(v17) + 384);
    if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR))
    {
      LODWORD(__p[0]) = 136315650;
      *(void **)((char *)__p + 4) = "CvmAmbientSubmix.mm";
      WORD2(__p[1]) = 1024;
      *(_DWORD *)((char *)&__p[1] + 6) = 60;
      WORD1(__p[2]) = 2048;
      *(void **)((char *)&__p[2] + 4) = (void *)a1;
      _os_log_impl(&dword_221E5E000, v69, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [Geometry::InvalidEntityHandle == mListenerEntityHandle is true]: \"Ambient Submix@%p: Error: invalid Listener Handle\"", (uint8_t *)__p, 0x1Cu);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Ambient Submix@%p: Error: invalid Listener Handle");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
  }
  uint64_t v18 = *v16;
  int v19 = **v16;
  if (v19 == 0x10000)
  {
    uint8x8_t v21 = (uint8x8_t)vcnt_s8((int8x8_t)v18[1]);
    v21.i16[0] = vaddlv_u8(v21);
    __int32 v20 = v21.i32[0];
  }
  else if (v19)
  {
    __int32 v20 = (unsigned __int16)**v16;
  }
  else
  {
    __int32 v20 = v18[2];
  }
  if (!v20)
  {
    uint64_t v71 = **(id **)(Phase::Logger::GetInstance(v17) + 384);
    if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
    {
      LODWORD(__p[0]) = 136315650;
      *(void **)((char *)__p + 4) = "CvmAmbientSubmix.mm";
      WORD2(__p[1]) = 1024;
      *(_DWORD *)((char *)&__p[1] + 6) = 65;
      WORD1(__p[2]) = 2048;
      *(void **)((char *)&__p[2] + 4) = (void *)a1;
      _os_log_impl(&dword_221E5E000, v71, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [channelCount == 0 is true]: \"Ambient Submix@%p: Error: Input Channel Layout has no channels\"", (uint8_t *)__p, 0x1Cu);
    }
    uint64_t v72 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v72, "Ambient Submix@%p: Error: Input Channel Layout has no channels");
    v72->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
  }
  uint64_t NumNonLFEChannels = Phase::ChannelLayout::GetNumNonLFEChannels((Phase::Logger *)(a1 + 400));
  if ((NumNonLFEChannels & 0x80000000) != 0) {
    std::terminate();
  }
  if (!NumNonLFEChannels)
  {
    size_t v73 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance((Phase::Logger *)NumNonLFEChannels)
                                                     + 384));
    if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
    {
      LODWORD(__p[0]) = 136315650;
      *(void **)((char *)__p + 4) = "CvmAmbientSubmix.mm";
      WORD2(__p[1]) = 1024;
      *(_DWORD *)((char *)&__p[1] + 6) = 71;
      WORD1(__p[2]) = 2048;
      *(void **)((char *)&__p[2] + 4) = (void *)a1;
      _os_log_impl(&dword_221E5E000, v73, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [fullRangeChannelCount == 0 is true]: \"Ambient Submix@%p: Error: Input Channel Layout doesn't contain any fullrange channels\"", (uint8_t *)__p, 0x1Cu);
    }
    unint64_t v74 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v74, "Ambient Submix@%p: Error: Input Channel Layout doesn't contain any fullrange channels");
LABEL_77:
    v74->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
  }
  if (v20 != NumNonLFEChannels)
  {
    int v75 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance((Phase::Logger *)NumNonLFEChannels)
                                                     + 384));
    if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
    {
      LODWORD(__p[0]) = 136315650;
      *(void **)((char *)__p + 4) = "CvmAmbientSubmix.mm";
      WORD2(__p[1]) = 1024;
      *(_DWORD *)((char *)&__p[1] + 6) = 75;
      WORD1(__p[2]) = 2048;
      *(void **)((char *)&__p[2] + 4) = (void *)a1;
      _os_log_impl(&dword_221E5E000, v75, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [channelCount != fullRangeChannelCount is true]: \"Ambient Submix@%p: Error: Input Channel Layout contains LFE channels\"", (uint8_t *)__p, 0x1Cu);
    }
    unint64_t v74 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v74, "Ambient Submix@%p: Error: Input Channel Layout contains LFE channels");
    goto LABEL_77;
  }
  Phase::ChannelLayout::GetChannelLayoutChannelDescriptions((void *)(a1 + 400), (uint64_t *)&v79);
  uint64_t v24 = v79;
  uint64_t v23 = v80;
  unint64_t v25 = 0xCCCCCCCCCCCCCCCDLL * ((v80 - (unsigned char *)v79) >> 2);
  uint64_t v26 = *(void *)(a1 + 352);
  uint64_t v27 = *(void *)(a1 + 360);
  unint64_t v28 = (v27 - v26) >> 3;
  if (v25 <= v28)
  {
    if (v25 >= v28) {
      goto LABEL_30;
    }
    uint64_t v41 = v26 + 0x6666666666666668 * ((v80 - (unsigned char *)v79) >> 2);
    goto LABEL_27;
  }
  unint64_t v29 = v25 - v28;
  uint64_t v30 = *(void *)(a1 + 368);
  if (v25 - v28 <= (v30 - v27) >> 3)
  {
    bzero(*(void **)(a1 + 360), 8 * v29);
    uint64_t v41 = v27 + 8 * v29;
LABEL_27:
    *(void *)(a1 + 360) = v41;
    goto LABEL_30;
  }
  if (v25 >> 61) {
    std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v31 = v30 - v26;
  uint64_t v32 = v31 >> 2;
  if (v31 >> 2 <= v25) {
    uint64_t v32 = 0xCCCCCCCCCCCCCCCDLL * ((v80 - (unsigned char *)v79) >> 2);
  }
  if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v33 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v33 = v32;
  }
  uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(a1 + 368, v33);
  uint64_t v36 = *(char **)(a1 + 352);
  uint64_t v35 = *(char **)(a1 + 360);
  CFStringRef v37 = &v34[8 * v28];
  size_t v76 = &v34[8 * v38];
  bzero(v37, 8 * v29);
  uint32_t v39 = &v37[8 * v29];
  while (v35 != v36)
  {
    uint64_t v40 = *((void *)v35 - 1);
    v35 -= 8;
    *((void *)v37 - 1) = v40;
    v37 -= 8;
  }
  *(void *)(a1 + 352) = v37;
  *(void *)(a1 + 360) = v39;
  *(void *)(a1 + 368) = v76;
  if (v36) {
    operator delete(v36);
  }
LABEL_30:
  uint64_t v42 = *(void *)(a1 + 328);
  uint64_t v43 = *(void *)(a1 + 336);
  unint64_t v44 = 0xAAAAAAAAAAAAAAABLL * ((v43 - v42) >> 2);
  unint64_t v45 = v25 - v44;
  if (v25 <= v44)
  {
    if (v25 >= v44) {
      goto LABEL_46;
    }
    uint64_t v53 = v42 + 12 * v25;
    goto LABEL_45;
  }
  uint64_t v46 = *(void *)(a1 + 344);
  if (0xAAAAAAAAAAAAAAABLL * ((v46 - v43) >> 2) >= v45)
  {
    bzero(*(void **)(a1 + 336), 12 * ((12 * v45 - 12) / 0xC) + 12);
    uint64_t v53 = v43 + 12 * ((12 * v45 - 12) / 0xC) + 12;
LABEL_45:
    *(void *)(a1 + 336) = v53;
    goto LABEL_46;
  }
  if (v25 > 0x1555555555555555) {
    std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v47 = 0xAAAAAAAAAAAAAAABLL * ((v46 - v42) >> 2);
  uint64_t v48 = 2 * v47;
  if (2 * v47 <= v25) {
    uint64_t v48 = v25;
  }
  if (v47 >= 0xAAAAAAAAAAAAAAALL) {
    unint64_t v49 = 0x1555555555555555;
  }
  else {
    unint64_t v49 = v48;
  }
  __p[4] = (void *)(a1 + 344);
  uint64_t v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Vector<float,3ul>>>(a1 + 344, v49);
  uint64_t v51 = &v50[12 * v44];
  __p[0] = v50;
  __p[1] = v51;
  __p[3] = &v50[12 * v52];
  bzero(v51, 12 * ((12 * v45 - 12) / 0xC) + 12);
  __p[2] = &v51[12 * ((12 * v45 - 12) / 0xC) + 12];
  std::vector<Phase::Vector<float,3ul>>::__swap_out_circular_buffer(v11, __p);
  if (__p[2] != __p[1]) {
    __p[2] = (char *)__p[1] + ((char *)__p[2] - (char *)__p[1] - 12) % 0xCuLL;
  }
  if (__p[0]) {
    operator delete(__p[0]);
  }
LABEL_46:
  if (v23 != v24) {
    Phase::Geometry::CreateEntity<Phase::Geometry::Source>();
  }
  int v54 = (Phase::Logger *)Phase::Controller::AmbientSubmix::SetOrientation(a1, (float32x4_t *)(a2 + 24), 1);
  uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance(v54);
  if (*((unsigned char *)Instance + 1556))
  {
    uint64_t v56 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(Instance)
                                                                                        + 384)));
    if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v57 = *(char *)(a1 + 72);
      if (v57 > 7) {
        uint64_t v58 = "<not found>";
      }
      else {
        uint64_t v58 = off_2645F6FB0[v57];
      }
      uint64_t v59 = *(void **)(a1 + 32);
      uint64_t v60 = *(void **)(a1 + 16);
      int v61 = *(unsigned __int8 *)(a1 + 8);
      Phase::ChannelLayout::GetStringDescription((unsigned int **)(a1 + 400));
      uint64_t v62 = "false";
      if (!v61) {
        uint64_t v62 = "true";
      }
      if (v78 >= 0) {
        uint64_t v63 = &v77;
      }
      else {
        uint64_t v63 = v77;
      }
      double v64 = *(float *)(a1 + 424);
      double v65 = *(float *)(a1 + 428);
      double v66 = *(float *)(a1 + 432);
      double v67 = *(float *)(a1 + 436);
      LODWORD(__p[0]) = 136317698;
      *(void **)((char *)__p + 4) = "CvmAmbientSubmix.mm";
      WORD2(__p[1]) = 1024;
      *(_DWORD *)((char *)&__p[1] + 6) = 134;
      WORD1(__p[2]) = 2048;
      *(void **)((char *)&__p[2] + 4) = v59;
      WORD2(__p[3]) = 2048;
      *(void **)((char *)&__p[3] + 6) = v60;
      HIWORD(__p[4]) = 2080;
      __p[5] = (void *)v58;
      __int16 v82 = 2080;
      unint64_t v83 = v62;
      __int16 v84 = 2080;
      size_t v85 = v63;
      __int16 v86 = 2048;
      double v87 = v64;
      __int16 v88 = 2048;
      double v89 = v65;
      __int16 v90 = 2048;
      double v91 = v66;
      __int16 v92 = 2048;
      double v93 = v67;
      _os_log_impl(&dword_221E5E000, v56, OS_LOG_TYPE_DEFAULT, "%25s:%-5d (sound event: %llu, submix: %llu) - created (type: ambient, state: %s, sleep transitions enabled: %s, channel layout: %s, orientation: [%f, %f, %f, %f])", (uint8_t *)__p, 0x6Cu);
      if (v78 < 0) {
        operator delete(v77);
      }
    }
  }
  if (v79)
  {
    uint64_t v80 = v79;
    operator delete(v79);
  }
  return a1;
}

void sub_221E994D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, void **a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25)
{
  if (__p) {
    operator delete(__p);
  }
  if (a20) {
    operator delete(a20);
  }
  unint64_t v28 = *a16;
  if (*a16)
  {
    *((void *)v25 + 51) = v28;
    operator delete(v28);
  }
  unint64_t v29 = (void *)*((void *)v25 + 47);
  if (v29)
  {
    *((void *)v25 + 48) = v29;
    operator delete(v29);
  }
  uint64_t v30 = *a15;
  if (*a15)
  {
    *((void *)v25 + 45) = v30;
    operator delete(v30);
  }
  uint64_t v31 = *v26;
  if (*v26)
  {
    *((void *)v25 + 42) = v31;
    operator delete(v31);
  }
  Phase::Controller::Submix::~Submix(v25);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::AmbientSubmix::GetChannelMask(uint64_t a1, Phase::Logger *a2)
{
  uint64_t v3 = 0;
  for (unsigned __int32 i = 0; ; ++i)
  {
    uint64_t v5 = *(int **)a2;
    int v6 = **(_DWORD **)a2;
    if (v6 == 0x10000)
    {
      uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v5[1]);
      v8.i16[0] = vaddlv_u8(v8);
      unsigned int v7 = v8.i32[0];
    }
    else
    {
      unsigned int v7 = v6 ? (unsigned __int16)**(_DWORD **)a2 : v5[2];
    }
    if (i >= v7) {
      break;
    }
    BOOL IsChannelLFE = Phase::ChannelLayout::IsChannelLFE(a2, i);
    uint64_t v10 = 1 << i;
    if (IsChannelLFE) {
      uint64_t v10 = 0;
    }
    v3 |= v10;
  }
  return v3;
}

uint64_t Phase::Controller::AmbientSubmix::SetOrientation(uint64_t a1, float32x4_t *a2, int a3)
{
  _Q0 = *a2;
  _Q1 = vmulq_f32(_Q0, _Q0);
  float v5 = 1.0 - sqrtf((float)(vaddv_f32(*(float32x2_t *)_Q1.f32) + _Q1.f32[2]) + _Q1.f32[3]);
  if (v5 < 0.0) {
    float v5 = -v5;
  }
  if (v5 > 0.1) {
    std::terminate();
  }
  _S2 = HIDWORD(*(unsigned long long *)a2);
  _S3 = a2->i64[1];
  __asm
  {
    FMLA            S1, S3, V0.S[2]
    FMLA            S1, S2, V0.S[3]
  }
  _Q1.f32[0] = sqrtf(_Q1.f32[0]);
  float32x4_t v25 = vdivq_f32(_Q0, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q1.f32, 0));
  int v14 = (float *)(a1 + 424);
  uint64_t result = Phase::IsNearlyEqual<float>(v25.f32, (float *)(a1 + 424), 0.00000011921);
  if (!result || a3)
  {
    *(float32x4_t *)int v14 = v25;
    uint64_t v16 = *(void *)(a1 + 328);
    if (*(void *)(a1 + 336) != v16)
    {
      uint64_t v17 = 0;
      unint64_t v18 = 0;
      do
      {
        Phase::operator*<float>(v14, (float *)(v16 + v17), (float *)&v23);
        long long v19 = xmmword_2220A4E00;
        uint64_t v20 = v23;
        int v21 = v24;
        int v22 = 1065353216;
        uint64_t result = Phase::Geometry::SystemScheduler::UpdateTransform(*(void *)(a1 + 240) + 2352, *(void *)(*(void *)(a1 + 352) + 8 * v18++), &v19);
        uint64_t v16 = *(void *)(a1 + 328);
        v17 += 12;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 336) - v16) >> 2) > v18);
    }
  }
  return result;
}

void Phase::Controller::AmbientSubmix::~AmbientSubmix(Phase::Controller::AmbientSubmix *this)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (*((void *)this + 30))
  {
    uint64_t v2 = (uint64_t *)*((void *)this + 44);
    uint64_t v3 = (uint64_t *)*((void *)this + 45);
    while (v2 != v3)
    {
      if (*v2)
      {
        Phase::Geometry::SystemScheduler::RemoveChild(*((void *)this + 30) + 2352, *(void *)(*((void *)this + 30) + 1456), *v2);
        Phase::Geometry::SystemScheduler::ReleaseEntity(*((void *)this + 30) + 2352, *v2);
      }
      ++v2;
    }
  }
  else
  {
    uint64_t v4 = **(id **)(Phase::Logger::GetInstance(this) + 384);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315650;
      uint64_t v10 = "CvmAmbientSubmix.mm";
      __int16 v11 = 1024;
      int v12 = 166;
      __int16 v13 = 2048;
      int v14 = this;
      _os_log_impl(&dword_221E5E000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d Ambient Submix@%p: Error: Could not get a pointer to the Geometry System", (uint8_t *)&v9, 0x1Cu);
    }
  }
  Phase::Controller::AmbientSubmix::Destroy(this);
  if (*((unsigned char *)this + 72)) {
    Phase::Controller::DVM::VoiceGraph::RemoveSubmix(*(Phase::Controller::DVM::VoiceGraph **)(**((void **)this + 28) + 72), *((void *)this + 2), *((void *)this + 3));
  }
  float v5 = (void *)*((void *)this + 50);
  if (v5)
  {
    *((void *)this + 51) = v5;
    operator delete(v5);
  }
  int v6 = (void *)*((void *)this + 47);
  if (v6)
  {
    *((void *)this + 48) = v6;
    operator delete(v6);
  }
  unsigned int v7 = (void *)*((void *)this + 44);
  if (v7)
  {
    *((void *)this + 45) = v7;
    operator delete(v7);
  }
  uint8x8_t v8 = (void *)*((void *)this + 41);
  if (v8)
  {
    *((void *)this + 42) = v8;
    operator delete(v8);
  }
  Phase::Controller::Submix::~Submix(this);
}

{
  uint64_t vars8;

  Phase::Controller::AmbientSubmix::~AmbientSubmix(this);

  JUMPOUT(0x223C938A0);
}

void sub_221E999C0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void *Phase::Controller::AmbientSubmix::Destroy(void *this)
{
  uint64_t v1 = (uint64_t)this;
  uint64_t v2 = (uint64_t *)this[47];
  uint64_t v3 = (uint64_t *)this[48];
  while (v2 != v3)
  {
    if (*v2)
    {
      uint64_t v4 = v2[1];
    }
    else
    {
      uint64_t v4 = v2[1];
      if (!v4) {
        goto LABEL_8;
      }
    }
    uint64_t v5 = *(void *)(v1 + 232);
    v6[0] = *v2;
    v6[1] = v4;
    this = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((void *)(v5 + 40), v6);
    if (this) {
      this = Phase::Controller::SubmixSystem::Destroy(*(Phase::Logger **)(v1 + 232), *v2, v2[1]);
    }
LABEL_8:
    v2 += 2;
  }
  *(void *)(v1 + 56) |= 0x28uLL;
  return this;
}

uint64_t Phase::Controller::AmbientSubmix::IsPrepared(Phase::Controller::AmbientSubmix *this)
{
  uint64_t v1 = (uint64_t *)*((void *)this + 47);
  uint64_t v2 = (uint64_t *)*((void *)this + 48);
  if (v1 == v2) {
    return 0;
  }
  for (unsigned __int32 i = v1 + 1; ; i += 2)
  {
    uint64_t v5 = i - 1;
    if (*(i - 1))
    {
      uint64_t v6 = *i;
    }
    else
    {
      uint64_t v6 = *i;
      if (!*i) {
        return 0;
      }
    }
    uint64_t v7 = *((void *)this + 29);
    v10[0] = *(i - 1);
    v10[1] = v6;
    uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((void *)(v7 + 40), v10);
    if (!result) {
      break;
    }
    uint64_t Submix = Phase::Controller::SubmixSystem::GetSubmix(*((Phase::Logger **)this + 29), *v5, *i);
    if (((*(uint64_t (**)(uint64_t))(*(void *)Submix + 104))(Submix) & 1) == 0) {
      return 0;
    }
    if (v5 + 2 == v2) {
      return 1;
    }
  }
  return result;
}

void Phase::Controller::AmbientSubmix::Update(Phase::Controller::AmbientSubmix *this, double a2)
{
  if (*((void *)this + 47) != *((void *)this + 48)) {
    goto LABEL_30;
  }
  uint64_t v4 = *((void *)this + 44);
  uint64_t v5 = *((void *)this + 45);
  if (v4 != v5)
  {
    uint64_t v6 = v4 + 8;
    do
    {
      uint64_t v7 = *(void *)(v6 - 8);
      if (!v7) {
        goto LABEL_30;
      }
      uint64_t v18 = *((void *)this + 30) + 1240;
      UniqueES4_EUlRT_E_EEPNS_18SharedSlotMapStateIS3_S4_E4SlotES4_OSA = (void *)_ZN5Phase7details13SharedSlotMapINS_8Geometry6EntityENS_8Handle64EE13GetSlotToEditIRZNS_13SharedSlotMapIS3_S4_NS2_13EntityFactoryEE9GetUniqueES4_EUlRT_E_EEPNS_18SharedSlotMapStateIS3_S4_E4SlotES4_OSA_(v18, v7, (uint64_t)&v18);
      if (!UniqueES4_EUlRT_E_EEPNS_18SharedSlotMapStateIS3_S4_E4SlotES4_OSA) {
        goto LABEL_30;
      }
      if (*UniqueES4_EUlRT_E_EEPNS_18SharedSlotMapStateIS3_S4_E4SlotES4_OSA) {
        BOOL v9 = v6 == v5;
      }
      else {
        BOOL v9 = 1;
      }
      v6 += 8;
    }
    while (!v9);
    if (!*UniqueES4_EUlRT_E_EEPNS_18SharedSlotMapStateIS3_S4_E4SlotES4_OSA) {
      goto LABEL_30;
    }
  }
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  int v24 = 1065353216;
  uint64_t v25 = 0;
  long long v26 = 0u;
  char v27 = 0;
  long long v28 = xmmword_2220A4DF0;
  uint64_t v29 = 0x3FF0000000000000;
  uint64_t v18 = *((void *)this + 40);
  long long v31 = 0u;
  int v32 = 0;
  long long v30 = *((_OWORD *)this + 1);
  uint64_t v10 = operator new(0x28uLL);
  *uint64_t v10 = 0;
  v10[1] = 4;
  *((_DWORD *)v10 + 4) = 4;
  v10[3] = 0x3FF0000000000000;
  *((unsigned char *)v10 + 32) = 1;
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::__rehash<true>((uint64_t)&v22, 1uLL);
  unint64_t v11 = *((void *)&v22 + 1);
  uint8x8_t v12 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v22 + 8));
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.u32[0] > 1uLL)
  {
    uint64_t v13 = 4;
    if (*((void *)&v22 + 1) <= 4uLL) {
      uint64_t v13 = 4u % BYTE8(v22);
    }
  }
  else
  {
    uint64_t v13 = (BYTE8(v22) - 1) & 4;
  }
  uint64_t v14 = v22;
  uint64_t v15 = *(void **)(v22 + 8 * v13);
  if (v15)
  {
    *uint64_t v10 = *v15;
LABEL_24:
    *uint64_t v15 = v10;
    goto LABEL_25;
  }
  *uint64_t v10 = v23;
  *(void *)&long long v23 = v10;
  *(void *)(v14 + 8 * v13) = &v23;
  if (*v10)
  {
    unint64_t v16 = *(void *)(*v10 + 8);
    if (v12.u32[0] > 1uLL)
    {
      if (v16 >= v11) {
        v16 %= v11;
      }
    }
    else
    {
      v16 &= v11 - 1;
    }
    uint64_t v15 = (void *)(v22 + 8 * v16);
    goto LABEL_24;
  }
LABEL_25:
  ++*((void *)&v23 + 1);
  uint64_t v17 = (void *)*((void *)this + 44);
  if (v17 != *((void **)this + 45))
  {
    MEMORY[0x223C944F0](&v33);
    if (v33 != 0)
    {
      *(void *)&long long v20 = *v17;
      long long v19 = v33;
      int v32 = *((_DWORD *)this + 12);
      Phase::Controller::SubmixSystem::CreateSpatialSubmix(*((Phase::Controller::SubmixSystem **)this + 29), (const Phase::Controller::CreateSpatialSubmixParameters *)&v18);
    }
LABEL_31:
    std::terminate();
  }
  if ((uint64_t)(*((void *)this + 48) - *((void *)this + 47)) >> 4) {
    goto LABEL_31;
  }
  Phase::Controller::AmbientSubmix::InternalPrepare(this);
  *(void *)&long long v33 = &v25;
  std::vector<Phase::VoiceDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)&v22);
LABEL_30:
  Phase::Controller::Submix::Update(this, a2);
}

void sub_221E99ED0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  Phase::Controller::CreateSpatialSubmixParameters::~CreateSpatialSubmixParameters((Phase::Controller::CreateSpatialSubmixParameters *)va);
  _Unwind_Resume(a1);
}

void Phase::Controller::AmbientSubmix::InternalPrepare(Phase::Controller::AmbientSubmix *this)
{
  Phase::Controller::Submix::InternalPrepare(this);
  if (*((unsigned char *)this + 72) != 2) {
    std::terminate();
  }
  uint64_t v2 = *((void *)this + 28);
  unint64_t v3 = *((void *)this + 2);
  unint64_t v4 = *((void *)this + 3);
  Phase::Controller::Submix::GetEffects(this, 0, v5);
  Phase::Controller::DVM::VoiceGraph::ConfigureAmbientSubmix(*(void **)(*(void *)v2 + 72), v3, v4, (uint64_t *)this + 47, v5);
  uint64_t v6 = (void **)v5;
  std::vector<Phase::Controller::DspNode>::__destroy_vector::operator()[abi:ne180100](&v6);
}

void sub_221E99F94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<Phase::Controller::DspNode>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::AmbientSubmix::GetListenerId(Phase::Controller::AmbientSubmix *this)
{
  return *((void *)this + 40);
}

void *Phase::Controller::AmbientSubmix::GetInputChannelLayout@<X0>(Phase::Controller::AmbientSubmix *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(a2, *((const void **)this + 50), *((void *)this + 51), *((void *)this + 51) - *((void *)this + 50));
}

void Phase::Controller::AmbientSubmix::SetPlayState(uint64_t a1, int a2)
{
  if (*(void *)(a1 + 384) != *(void *)(a1 + 376))
  {
    Phase::Controller::Submix::SetPlayState(a1, a2);
    unint64_t v3 = *(uint64_t **)(a1 + 376);
    unint64_t v4 = *(uint64_t **)(a1 + 384);
    while (v3 != v4)
    {
      uint64_t v5 = *v3;
      uint64_t v6 = v3[1];
      v3 += 2;
      uint64_t v7 = *(void *)Phase::Controller::SubmixSystem::GetSubmix(*(Phase::Logger **)(a1 + 232), v5, v6);
      (*(void (**)(void))(v7 + 280))();
    }
  }
}

uint64_t Phase::Controller::AmbientSubmix::Fade(uint64_t this, float a2, float a3)
{
  unint64_t v3 = *(uint64_t **)(this + 376);
  unint64_t v4 = *(uint64_t **)(this + 384);
  if (v3 != v4)
  {
    uint64_t v7 = this;
    do
    {
      uint64_t v8 = *v3;
      uint64_t v9 = v3[1];
      v3 += 2;
      uint64_t Submix = Phase::Controller::SubmixSystem::GetSubmix(*(Phase::Logger **)(v7 + 232), v8, v9);
      this = (*(uint64_t (**)(uint64_t, float, float))(*(void *)Submix + 224))(Submix, a2, a3);
    }
    while (v3 != v4);
  }
  return this;
}

uint64_t Phase::Controller::AmbientSubmix::SetSessionLevel(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = *(uint64_t **)(result + 376);
  unint64_t v4 = *(uint64_t **)(result + 384);
  if (v3 != v4)
  {
    uint64_t v7 = result;
    do
    {
      uint64_t v8 = *v3;
      uint64_t v9 = v3[1];
      v3 += 2;
      uint64_t Submix = Phase::Controller::SubmixSystem::GetSubmix(*(Phase::Logger **)(v7 + 232), v8, v9);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)Submix + 232))(Submix, a2, a3);
    }
    while (v3 != v4);
  }
  return result;
}

uint64_t Phase::Controller::AmbientSubmix::SetParameter(uint64_t this, uint64_t a2, double a3)
{
  unint64_t v3 = *(uint64_t **)(this + 376);
  unint64_t v4 = *(uint64_t **)(this + 384);
  if (v3 != v4)
  {
    uint64_t v7 = this;
    do
    {
      uint64_t v8 = *v3;
      uint64_t v9 = v3[1];
      v3 += 2;
      uint64_t Submix = Phase::Controller::SubmixSystem::GetSubmix(*(Phase::Logger **)(v7 + 232), v8, v9);
      this = (*(uint64_t (**)(uint64_t, uint64_t, double))(*(void *)Submix + 144))(Submix, a2, a3);
    }
    while (v3 != v4);
  }
  return this;
}

void Phase::Controller::AmbientSubmix::SetParameterData(Phase::Controller::AmbientSubmix *this, uint64_t a2, float32x4_t *a3, uint64_t a4)
{
  if (a2 == 0xB11F8D5B5762E28DLL)
  {
    if (*(unsigned char *)(Phase::Logger::GetInstance(this) + 1559))
    {
      if (a4 != 16) {
        std::terminate();
      }
      float32x4_t v7 = *a3;
      Phase::Controller::AmbientSubmix::SetOrientation((uint64_t)this, &v7, 0);
    }
  }
  else
  {
    Phase::Controller::Submix::SetParameterData(this, a2, a3);
  }
}

double Phase::Controller::AmbientSubmix::GetGain(Phase::Geometry::System **this)
{
  Phase::Geometry::System::GetCurrentState(this[30], &v8);
  double v2 = 0.0;
  if (v8)
  {
    unint64_t v3 = this[40];
    if (*(_DWORD *)(v8 + 136) > v3)
    {
      uint64_t v4 = *(void *)(v8 + 120);
      if (*(_DWORD *)(v4 + 24 * v3 + 20) == HIDWORD(v3))
      {
        uint64_t v5 = *(void *)(v4 + 24 * this[40]);
        if (v5)
        {
          if (*(_DWORD *)v5 == 2) {
            double v2 = *(double *)(v5 + 176);
          }
        }
      }
    }
  }
  double Gain = Phase::Controller::Submix::GetGain((Phase::Controller::Submix *)this);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  return v2 * Gain;
}

void sub_221E9A350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Controller::AmbientSubmix::GetType(Phase::Controller::AmbientSubmix *this)
{
  return 2;
}

uint64_t Phase::Controller::AmbientSubmix::GetNumChannels(Phase::Controller::AmbientSubmix *this)
{
  uint64_t v1 = (_DWORD *)*((void *)this + 50);
  if (*v1 == 0x10000)
  {
    uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)v1[1]);
    v3.i16[0] = vaddlv_u8(v3);
    return v3.u32[0];
  }
  else if (*v1)
  {
    return (unsigned __int16)*v1;
  }
  else
  {
    return v1[2];
  }
}

BOOL Phase::IsNearlyEqual<float>(float *a1, float *a2, float a3)
{
  float v3 = *a1 - *a2;
  if (v3 < 0.0) {
    float v3 = -v3;
  }
  if (v3 > a3) {
    return 0;
  }
  float v4 = a1[1] - a2[1];
  if (v4 < 0.0) {
    float v4 = -v4;
  }
  if (v4 > a3) {
    return 0;
  }
  float v5 = a1[2] - a2[2];
  if (v5 < 0.0) {
    float v5 = -v5;
  }
  if (v5 > a3) {
    return 0;
  }
  float v7 = a1[3] - a2[3];
  if (v7 < 0.0) {
    float v7 = -v7;
  }
  return v7 <= a3;
}

void Phase::Controller::Submix::SetSpatialCategoryIsActive(Phase::Logger *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  double v2 = **(id **)(Phase::Logger::GetInstance(a1) + 384);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    uint64_t v3 = *((void *)a1 + 2);
    int v5 = 136315650;
    uint64_t v6 = "CvmSubmix.h";
    __int16 v7 = 1024;
    int v8 = 177;
    __int16 v9 = 2048;
    uint64_t v10 = v3;
    _os_log_impl(&dword_221E5E000, v2, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"SetSpatialCategoryIsActive called on submixId %llu which doesn't implement it.\"", (uint8_t *)&v5, 0x1Cu);
  }
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "SetSpatialCategoryIsActive called on submixId %llu which doesn't implement it.");
}

void sub_221E9A518(_Unwind_Exception *exception_object)
{
}

void Phase::Controller::Submix::SetSpatialCategorySendLevel(Phase::Logger *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  double v2 = **(id **)(Phase::Logger::GetInstance(a1) + 384);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    uint64_t v3 = *((void *)a1 + 2);
    int v5 = 136315650;
    uint64_t v6 = "CvmSubmix.h";
    __int16 v7 = 1024;
    int v8 = 183;
    __int16 v9 = 2048;
    uint64_t v10 = v3;
    _os_log_impl(&dword_221E5E000, v2, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"SetSpatialCategorySendLevel called on submixId %llu which doesn't implement it.\"", (uint8_t *)&v5, 0x1Cu);
  }
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "SetSpatialCategorySendLevel called on submixId %llu which doesn't implement it.");
}

void sub_221E9A614(_Unwind_Exception *exception_object)
{
}

void Phase::Controller::Submix::SetSpatialCategoryParameter(Phase::Logger *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  double v2 = **(id **)(Phase::Logger::GetInstance(a1) + 384);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    uint64_t v3 = *((void *)a1 + 2);
    int v5 = 136315650;
    uint64_t v6 = "CvmSubmix.h";
    __int16 v7 = 1024;
    int v8 = 190;
    __int16 v9 = 2048;
    uint64_t v10 = v3;
    _os_log_impl(&dword_221E5E000, v2, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"SetSpatialCategoryParameter called on submixId %llu which doesn't implement it.\"", (uint8_t *)&v5, 0x1Cu);
  }
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "SetSpatialCategoryParameter called on submixId %llu which doesn't implement it.");
}

void sub_221E9A710(_Unwind_Exception *exception_object)
{
}

void Phase::Controller::Submix::SetSpatialCategoryProperty(Phase::Logger *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  double v2 = **(id **)(Phase::Logger::GetInstance(a1) + 384);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    uint64_t v3 = *((void *)a1 + 2);
    int v5 = 136315650;
    uint64_t v6 = "CvmSubmix.h";
    __int16 v7 = 1024;
    int v8 = 199;
    __int16 v9 = 2048;
    uint64_t v10 = v3;
    _os_log_impl(&dword_221E5E000, v2, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"SetSpatialCategoryParameter called on submixId %llu which doesn't implement it.\"", (uint8_t *)&v5, 0x1Cu);
  }
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "SetSpatialCategoryParameter called on submixId %llu which doesn't implement it.");
}

void sub_221E9A80C(_Unwind_Exception *exception_object)
{
}

uint64_t *std::vector<Phase::Vector<float,3ul>>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    int v5 = *(_DWORD *)(v2 - 12);
    v2 -= 12;
    *(_DWORD *)(v4 - 12) = v5;
    v4 -= 12;
    *(_DWORD *)(v4 + 4) = *(_DWORD *)(v2 + 4);
    *(_DWORD *)(v4 + 8) = *(_DWORD *)(v2 + 8);
  }
  a2[1] = v4;
  uint64_t v6 = *result;
  _DWORD *result = v4;
  a2[1] = v6;
  uint64_t v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Vector<float,3ul>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1555555555555556) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(12 * a2);
}

uint64_t _ZN5Phase7details13SharedSlotMapINS_8Geometry6EntityENS_8Handle64EE13GetSlotToEditIRZNS_13SharedSlotMapIS3_S4_NS2_13EntityFactoryEE9GetUniqueES4_EUlRT_E_EEPNS_18SharedSlotMapStateIS3_S4_E4SlotES4_OSA_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t UniqueSlot = Phase::details::SharedSlotMap<Phase::Geometry::Entity,Phase::Handle64>::GetUniqueSlot(a1, a2);
  uint64_t v5 = UniqueSlot;
  if (UniqueSlot)
  {
    uint64_t v6 = *(void *)(UniqueSlot + 8);
    if (v6)
    {
      if (*(uint64_t *)(v6 + 8) >= 1)
      {
        if (!*(void *)(*(void *)a3 + 200)) {
          std::terminate();
        }
        Phase::Geometry::EntityFactory::Create(*(_DWORD **)UniqueSlot, &v10);
        long long v7 = v10;
        long long v10 = 0uLL;
        uint64_t v8 = *(std::__shared_weak_count **)(v5 + 8);
        *(_OWORD *)uint64_t v5 = v7;
        if (v8)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v8);
          if (*((void *)&v10 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v10 + 1));
          }
        }
      }
    }
  }
  return v5;
}

uint64_t Phase::details::SharedSlotMap<Phase::Geometry::Entity,Phase::Handle64>::GetUniqueSlot(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 16) <= a2) {
    return 0;
  }
  unsigned int v3 = a2;
  uint64_t result = *(void *)a1 + 24 * a2;
  if (*(_DWORD *)(result + 20) != HIDWORD(a2)) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5)
  {
    if (*(uint64_t *)(v5 + 8) >= 1)
    {
      Phase::details::SharedSlotMap<Phase::Geometry::Entity,Phase::Handle64>::Realloc((uint64_t *)a1);
      return *(void *)a1 + 24 * v3;
    }
  }
  return result;
}

void Phase::details::SharedSlotMap<Phase::Geometry::Entity,Phase::Handle64>::Realloc(uint64_t *a1)
{
  unint64_t v1 = *((unsigned int *)a1 + 4);
  if (v1)
  {
    Phase::details::SharedSlotMap<Phase::Geometry::Entity,Phase::Handle64>::AllocSlots(v1, &v15);
    if (*((_DWORD *)a1 + 4))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        uint64_t v5 = *a1;
        uint64_t v6 = (uint64_t *)(*a1 + v3);
        uint64_t v7 = v15;
        uint64_t v9 = *v6;
        uint64_t v8 = v6[1];
        if (v8) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
        }
        long long v10 = (void *)(v7 + v3);
        uint64_t v11 = *(std::__shared_weak_count **)(v7 + v3 + 8);
        *long long v10 = v9;
        v10[1] = v8;
        if (v11) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v11);
        }
        void v10[2] = *(void *)(v5 + v3 + 16);
        ++v4;
        v3 += 24;
      }
      while (v4 < *((unsigned int *)a1 + 4));
    }
    uint64_t v13 = a1 + 4;
    char v14 = 1;
    std::__shared_mutex_base::lock((std::__shared_mutex_base *)(a1 + 4));
    long long v12 = *(_OWORD *)a1;
    *(_OWORD *)a1 = v15;
    long long v15 = v12;
    std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v13);
    if (*((void *)&v15 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v15 + 1));
    }
  }
}

void sub_221E9AAC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void Phase::details::SharedSlotMap<Phase::Geometry::Entity,Phase::Handle64>::AllocSlots(unint64_t a1@<X1>, void *a2@<X8>)
{
  if (a1)
  {
    is_mul_ok(a1, 0x18uLL);
    operator new[]();
  }
  *a2 = 0;
  a2[1] = 0;
}

void std::shared_ptr<Phase::SharedSlotMapState<Phase::Geometry::Entity,Phase::Handle64>::Slot []>::shared_ptr[abi:ne180100]<Phase::SharedSlotMapState<Phase::Geometry::Entity,Phase::Handle64>::Slot,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_221E9ABF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  a10 = 0;
  if (v10) {
    std::default_delete<Phase::SharedSlotMapState<Phase::Geometry::Entity,Phase::Handle64>::Slot>::operator()[abi:ne180100]((uint64_t)&a10, v10);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<Phase::SharedSlotMapState<Phase::Geometry::Entity,Phase::Handle64>::Slot *,std::shared_ptr<Phase::SharedSlotMapState<Phase::Geometry::Entity,Phase::Handle64>::Slot[]>::__shared_ptr_default_delete<Phase::SharedSlotMapState<Phase::Geometry::Entity,Phase::Handle64>::Slot[],Phase::SharedSlotMapState<Phase::Geometry::Entity,Phase::Handle64>::Slot>,std::allocator<Phase::SharedSlotMapState<Phase::Geometry::Entity,Phase::Handle64>::Slot>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C938A0);
}

void std::__shared_ptr_pointer<Phase::SharedSlotMapState<Phase::Geometry::Entity,Phase::Handle64>::Slot *,std::shared_ptr<Phase::SharedSlotMapState<Phase::Geometry::Entity,Phase::Handle64>::Slot[]>::__shared_ptr_default_delete<Phase::SharedSlotMapState<Phase::Geometry::Entity,Phase::Handle64>::Slot[],Phase::SharedSlotMapState<Phase::Geometry::Entity,Phase::Handle64>::Slot>,std::allocator<Phase::SharedSlotMapState<Phase::Geometry::Entity,Phase::Handle64>::Slot>>::__on_zero_shared(uint64_t a1)
{
}

void std::default_delete<Phase::SharedSlotMapState<Phase::Geometry::Entity,Phase::Handle64>::Slot []>::operator()[abi:ne180100]<Phase::SharedSlotMapState<Phase::Geometry::Entity,Phase::Handle64>::Slot>(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = a2 - 16;
    uint64_t v3 = *(void *)(a2 - 8);
    if (v3)
    {
      uint64_t v4 = 24 * v3;
      do
      {
        uint64_t v5 = *(std::__shared_weak_count **)(v2 + v4);
        if (v5) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v5);
        }
        v4 -= 24;
      }
      while (v4);
    }
    JUMPOUT(0x223C93870);
  }
}

void std::default_delete<Phase::SharedSlotMapState<Phase::Geometry::Entity,Phase::Handle64>::Slot>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(a2 + 8);
    if (v2) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v2);
    }
    JUMPOUT(0x223C938A0);
  }
}

uint64_t std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    std::__shared_mutex_base::unlock(*(std::__shared_mutex_base **)a1);
  }
  return a1;
}

void std::vector<Phase::Controller::DspNode>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  unint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = v4 - 32;
        uint64_t v7 = (void **)(v4 - 24);
        std::vector<Phase::Controller::DspNodeVoice>::__destroy_vector::operator()[abi:ne180100](&v7);
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<Phase::Controller::DspNodeVoice>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  unint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 104;
        std::allocator<Phase::Controller::DspNodeVoice>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<Phase::Controller::DspNodeVoice>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 80);
  if (v3)
  {
    *(void *)(a2 + 88) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a2 + 56);
  if (v4)
  {
    *(void *)(a2 + 64) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a2 + 32);
  if (v5)
  {
    *(void *)(a2 + 40) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void **)(a2 + 8);
  std::vector<Phase::Controller::VoiceBufferParameter>::__destroy_vector::operator()[abi:ne180100](&v6);
}

void std::vector<Phase::Controller::VoiceBufferParameter>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<Phase::Controller::VoiceBufferParameter>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<Phase::Controller::VoiceBufferParameter>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 32)
  {
    uint64_t v4 = *(std::__shared_weak_count **)(i - 16);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  a1[1] = v2;
}

void Phase::Controller::ChannelSubmix::ChannelSubmix(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, Phase::Logger *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v11 = Phase::Controller::Submix::Submix((Phase::Logger *)a1, *(void *)a2, *(void *)(a2 + 8), *(void *)(a2 + 40), *(void *)(a2 + 48), *(_DWORD *)(a2 + 56), a3, a4, a5, a6, a7, a8);
  *(void *)uint64_t v11 = &unk_26D472228;
  long long v12 = (unsigned int **)((char *)v11 + 320);
  *((void *)v11 + 41) = 0;
  *((void *)v11 + 42) = 0;
  *((void *)v11 + 40) = 0;
  std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>((void *)v11 + 40, *(const void **)(a2 + 16), *(void *)(a2 + 24), *(void *)(a2 + 24) - *(void *)(a2 + 16));
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  *(unsigned char *)(a1 + 360) = 0;
  BOOL IsLayoutSupported = Phase::ChannelLayout::IsLayoutSupported(v12);
  if (IsLayoutSupported)
  {
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    std::string __p = 0;
    std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(&__p, *(const void **)(a1 + 320), *(void *)(a1 + 328), *(void *)(a1 + 328) - *(void *)(a1 + 320));
    int v20 = 1;
    long long v19 = &unk_26D4723A0;
    memset(v21, 0, sizeof(v21));
    std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(v21, __p, (uint64_t)v17, v17 - (unsigned char *)__p);
    if (__p)
    {
      uint64_t v17 = __p;
      operator delete(__p);
    }
    Phase::Controller::RendererSystem::CreateRenderer(a9, (uint64_t)&v19, (Phase::Logger *)buf);
  }
  char v14 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)IsLayoutSupported) + 384);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = "CvmChannelSubmix.mm";
    *(_WORD *)&uint8_t buf[12] = 1024;
    *(_DWORD *)&buf[14] = 43;
    _os_log_impl(&dword_221E5E000, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: ChannelLayout::IsLayoutSupported(mInputChannelLayout) is false.", buf, 0x12u);
  }
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "PRECONDITION: ChannelLayout::IsLayoutSupported(mInputChannelLayout) is false.");
  exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
}

void sub_221E9B360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  long long v26 = (std::__shared_weak_count *)*((void *)v23 + 44);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  char v27 = *v24;
  if (*v24)
  {
    *((void *)v23 + 41) = v27;
    operator delete(v27);
  }
  Phase::Controller::Submix::~Submix(v23);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::ChannelSubmix::InternalPrepare(Phase::Controller::ChannelSubmix *this)
{
  Phase::Controller::Submix::InternalPrepare(this);
  uint64_t v2 = *(uint64_t (**)(__n128))(**((void **)this + 43) + 32);
  v3.n128_u64[0] = 1.0;

  return v2(v3);
}

void Phase::Controller::MatrixRendererConfig::~MatrixRendererConfig(Phase::Controller::MatrixRendererConfig *this)
{
  *(void *)this = &unk_26D4723A0;
  uint64_t v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    *((void *)this + 3) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_26D4723A0;
  uint64_t v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    *((void *)this + 3) = v2;
    operator delete(v2);
  }

  JUMPOUT(0x223C938A0);
}

void Phase::Controller::ChannelSubmix::~ChannelSubmix(Phase::Controller::ChannelSubmix *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 44);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  __n128 v3 = (void *)*((void *)this + 40);
  if (v3)
  {
    *((void *)this + 41) = v3;
    operator delete(v3);
  }

  Phase::Controller::Submix::~Submix(this);
}

{
  uint64_t vars8;

  Phase::Controller::ChannelSubmix::~ChannelSubmix(this);

  JUMPOUT(0x223C938A0);
}

uint64_t Phase::Controller::ChannelSubmix::IsStopped(Phase::Controller::ChannelSubmix *this)
{
  if (*((unsigned char *)this + 72) || !*((unsigned char *)this + 288)) {
    return 0;
  }
  else {
    return (*(uint64_t (**)(void))(**((void **)this + 43) + 96))();
  }
}

uint64_t Phase::Controller::ChannelSubmix::IsPrepared(Phase::Controller::ChannelSubmix *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 43) + 88))();
}

uint64_t Phase::Controller::ChannelSubmix::InternalSleep(Phase::Controller::ChannelSubmix *this)
{
  Phase::Controller::Submix::InternalSleep(this);
  uint64_t result = (*(uint64_t (**)(void, void, void))(**((void **)this + 43) + 40))(*((void *)this + 43), *((void *)this + 2), *((void *)this + 3));
  *((unsigned char *)this + 360) = 0;
  return result;
}

void Phase::Controller::ChannelSubmix::InternalStop(Phase::Controller::ChannelSubmix *this)
{
  Phase::Controller::Submix::SetPlayState((uint64_t)this, 0);
  (*(void (**)(void, void, void))(**((void **)this + 43) + 112))(*((void *)this + 43), 0, 0);

  Phase::Controller::Submix::InternalStop(this);
}

uint64_t Phase::Controller::ChannelSubmix::SetPlayState(uint64_t a1, int a2)
{
  Phase::Controller::Submix::SetPlayState(a1, a2);
  __n128 v3 = *(uint64_t (**)(void))(**(void **)(a1 + 344) + 112);

  return v3();
}

uint64_t Phase::Controller::ChannelSubmix::GetType(Phase::Controller::ChannelSubmix *this)
{
  return 3;
}

uint64_t Phase::Controller::ChannelSubmix::GetNumChannels(Phase::Controller::ChannelSubmix *this)
{
  unint64_t v1 = (_DWORD *)*((void *)this + 40);
  if (*v1 == 0x10000)
  {
    uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)v1[1]);
    v3.i16[0] = vaddlv_u8(v3);
    return v3.u32[0];
  }
  else if (*v1)
  {
    return (unsigned __int16)*v1;
  }
  else
  {
    return v1[2];
  }
}

void *Phase::Controller::ChannelSubmix::GetInputChannelLayout@<X0>(Phase::Controller::ChannelSubmix *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(a2, *((const void **)this + 40), *((void *)this + 41), *((void *)this + 41) - *((void *)this + 40));
}

void Phase::Controller::ConvolutionRenderer::ConvolutionRenderer(Phase::Logger *a1)
{
}

void sub_221E9BDDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, Phase::Controller::VoiceData *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a2)
  {
    __cxa_free_exception(v24);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v23);
    __cxa_end_catch();
    JUMPOUT(0x221E9BC10);
  }
  _Unwind_Resume(exception_object);
}

void Phase::Controller::Renderer::Renderer(Phase::Logger *a1)
{
  uint64_t v2 = *MEMORY[0x263EF8340];
  Phase::Logger::GetInstance(a1);
  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::Commandable(a1);
}

void sub_221E9C0C4(_Unwind_Exception *a1)
{
  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::~Commandable(v1);
  _Unwind_Resume(a1);
}

void Phase::Controller::ConvolutionRenderer::Setup(uint64_t a1, atomic_ullong *a2, int a3)
{
  uint64_t v73 = *MEMORY[0x263EF8340];
  Phase::DspLayer::ConvolverVoicePool::GetStaticInstanceName((Phase::DspLayer::ConvolverVoicePool *)*(unsigned int *)(a1 + 220), &v62);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v6 = (std::string *)v62.__r_.__value_.__r.__words[0];
    if (!v62.__r_.__value_.__r.__words[0])
    {
LABEL_8:
      uint64_t v9 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v6 = &v62;
  }
  unsigned int v7 = v6->__r_.__value_.__s.__data_[0];
  if (!v6->__r_.__value_.__s.__data_[0]) {
    goto LABEL_8;
  }
  uint64_t v8 = &v6->__r_.__value_.__s.__data_[1];
  uint64_t v9 = 0xCBF29CE484222325;
  do
  {
    uint64_t v9 = 0x100000001B3 * (v9 ^ v7);
    unsigned int v10 = *v8++;
    unsigned int v7 = v10;
  }
  while (v10);
LABEL_9:
  Phase::Controller::Spatializer::AcquireFilters(*(Phase::Controller::Spatializer **)(*(void *)(a1 + 168) + 96), (uint64_t)v57);
  uint64_t v12 = v59;
  if (!v59)
  {
    uint64_t v48 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v11)
                                                                                        + 496)));
    if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 144))(v52, a1);
      unint64_t v49 = (SBYTE7(v53) & 0x80u) == 0 ? v52 : (void **)v52[0];
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "CvmConvolutionRenderer.mm";
      *(_WORD *)&uint8_t buf[12] = 1024;
      *(_DWORD *)&buf[14] = 255;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = v49;
      _os_log_impl(&dword_221E5E000, v48, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [!encoder is true]: \"%s: Couldn't find the encoder!\"", buf, 0x1Cu);
      if (SBYTE7(v53) < 0) {
        operator delete(v52[0]);
      }
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "%s: Couldn't find the encoder!");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
  }
  uint64_t v13 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v11)
                                                                                      + 496)));
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v51 = a2;
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 144))(v52, a1);
    int v14 = SBYTE7(v53);
    long long v15 = (void **)v52[0];
    int v16 = SHIBYTE(v62.__r_.__value_.__r.__words[2]);
    std::string::size_type v17 = v62.__r_.__value_.__r.__words[0];
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v12 + 40))(&__p, v12);
    uint64_t v18 = &v62;
    if (v16 < 0) {
      uint64_t v18 = (std::string *)v17;
    }
    long long v19 = v52;
    if (v14 < 0) {
      long long v19 = v15;
    }
    *(void *)&uint8_t buf[4] = "CvmConvolutionRenderer.mm";
    *(_DWORD *)buf = 136316162;
    *(_WORD *)&uint8_t buf[12] = 1024;
    if (SHIBYTE(v56) >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    *(_DWORD *)&buf[14] = 258;
    *(_WORD *)&unsigned char buf[18] = 2080;
    *(void *)&buf[20] = v19;
    *(_WORD *)&unsigned char buf[28] = 2080;
    *(void *)&buf[30] = v18;
    *(_WORD *)&unsigned char buf[38] = 2080;
    *(void *)&unsigned char buf[40] = p_p;
    _os_log_impl(&dword_221E5E000, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s: Setting up using %s voice pool. Encoder Details: %s\n", buf, 0x30u);
    if (SHIBYTE(v56) < 0) {
      operator delete(__p);
    }
    a2 = v51;
    if (SBYTE7(v53) < 0) {
      operator delete(v52[0]);
    }
  }

  uint64_t v21 = *(void *)(a1 + 176);
  *(void *)buf = v9;
  long long v22 = (Phase::Logger *)std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::find<unsigned long long>((void *)(v21 + 40), (unint64_t *)buf);
  if (!v22 || (uint64_t v23 = (void **)*((void *)v22 + 3)) == 0)
  {
    unint64_t v45 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v22)
                                                                                        + 496)));
    if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 144))(v52, a1);
      uint64_t v46 = (SBYTE7(v53) & 0x80u) == 0 ? v52 : (void **)v52[0];
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "CvmConvolutionRenderer.mm";
      *(_WORD *)&uint8_t buf[12] = 1024;
      *(_DWORD *)&buf[14] = 262;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = v46;
      _os_log_impl(&dword_221E5E000, v45, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [!pConvolverVoicePoolEntry is true]: \"%s: Couldn't find a Voice Pool!\"", buf, 0x1Cu);
      if (SBYTE7(v53) < 0) {
        operator delete(v52[0]);
      }
    }

    unint64_t v47 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v47, "%s: Couldn't find a Voice Pool!");
    v47->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
  }
  Phase::Controller::VoiceData::VoiceData((Phase::Controller::VoiceData *)buf, (const Phase::Controller::VoicePoolEntry *)v23, atomic_fetch_add(a2, 1uLL));
  *(_OWORD *)(a1 + 56) = *(_OWORD *)buf;
  std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear((void *)(a1 + 72));
  uint64_t v24 = *(void *)&buf[16];
  *(void *)&uint8_t buf[16] = 0;
  uint64_t v25 = *(void **)(a1 + 72);
  *(void *)(a1 + 72) = v24;
  if (v25) {
    operator delete(v25);
  }
  unint64_t v26 = *(void *)&buf[24];
  uint64_t v27 = *(void *)&buf[32];
  *(void *)(a1 + 88) = *(void *)&buf[32];
  *(void *)(a1 + 80) = v26;
  *(void *)&uint8_t buf[24] = 0;
  uint64_t v28 = *(void *)&buf[40];
  *(void *)(a1 + 96) = *(void *)&buf[40];
  *(_DWORD *)(a1 + 104) = v68;
  if (v28)
  {
    unint64_t v29 = *(void *)(v27 + 8);
    if ((v26 & (v26 - 1)) != 0)
    {
      if (v29 >= v26) {
        v29 %= v26;
      }
    }
    else
    {
      v29 &= v26 - 1;
    }
    *(void *)(*(void *)(a1 + 72) + 8 * v29) = a1 + 88;
    *(void *)&unsigned char buf[32] = 0;
    *(void *)&unsigned char buf[40] = 0;
  }
  std::vector<Phase::Controller::VoiceBufferParameter>::__vdeallocate((uint64_t *)(a1 + 112));
  *(_OWORD *)(a1 + 112) = v69;
  *(void *)(a1 + 128) = v70;
  uint64_t v70 = 0;
  long long v69 = 0uLL;
  *(_OWORD *)(a1 + 136) = *(_OWORD *)v71;
  v52[0] = &v69;
  std::vector<Phase::Controller::VoiceBufferParameter>::__destroy_vector::operator()[abi:ne180100]((void ***)v52);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)&buf[16]);
  *(_OWORD *)uint64_t v52 = 0u;
  long long v53 = 0u;
  v52[0] = v23[3];
  Phase::Controller::VoiceData::CreateDspNodeVoice((Phase::Controller::VoiceData *)(a1 + 56), (uint64_t)buf);
  long long v30 = (void *)v53;
  if ((unint64_t)v53 >= *((void *)&v53 + 1))
  {
    *(void *)&long long v53 = std::vector<Phase::Controller::DspNodeVoice>::__push_back_slow_path<Phase::Controller::DspNodeVoice>((uint64_t *)&v52[1], (uint64_t)buf);
    if (v71[0])
    {
      v71[1] = v71[0];
      operator delete(v71[0]);
    }
  }
  else
  {
    *(void *)long long v53 = *(void *)buf;
    v30[1] = 0;
    v30[3] = 0;
    v30[4] = 0;
    v30[2] = 0;
    *(_OWORD *)(v30 + 1) = *(_OWORD *)&buf[8];
    v30[3] = *(void *)&buf[24];
    *(void *)&buf[8] = 0;
    *(void *)&uint8_t buf[16] = 0;
    v30[5] = 0;
    v30[6] = 0;
    *((_OWORD *)v30 + 2) = *(_OWORD *)&buf[32];
    v30[6] = v68;
    v30[7] = 0;
    memset(&buf[24], 0, 24);
    uint64_t v68 = 0;
    v30[8] = 0;
    v30[9] = 0;
    *(_OWORD *)(v30 + 7) = v69;
    long long v69 = 0uLL;
    v30[9] = v70;
    v30[10] = 0;
    v30[11] = 0;
    v30[12] = 0;
    *((_OWORD *)v30 + 5) = *(_OWORD *)v71;
    v30[12] = v72;
    uint64_t v70 = 0;
    v71[0] = 0;
    v71[1] = 0;
    uint64_t v72 = 0;
    *(void *)&long long v53 = v30 + 13;
  }
  if ((void)v69)
  {
    *((void *)&v69 + 1) = v69;
    operator delete((void *)v69);
  }
  if (*(void *)&buf[32])
  {
    *(void *)&unsigned char buf[40] = *(void *)&buf[32];
    operator delete(*(void **)&buf[32]);
  }
  std::string __p = &buf[8];
  std::vector<Phase::Controller::VoiceBufferParameter>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  Phase::Controller::DVM::VoiceGraph::AddRenderer(*(Phase::Controller::DVM::VoiceGraph **)(**(void **)(a1 + 160) + 72), *(void *)(a1 + 40), 0xFFFFFFFFFFFFFFFELL);
  if (a3) {
    int v31 = 1;
  }
  else {
    int v31 = 2;
  }
  *(_DWORD *)(a1 + 184) = v31;
  uint64_t v32 = *(void *)(a1 + 160);
  unint64_t v33 = *(void *)(a1 + 40);
  memset(buf, 0, 24);
  int v34 = Phase::Controller::DVM::VoiceGraph::ConfigureRenderer(*(void *)(*(void *)v32 + 72), v33, v31, (uint64_t)v52, (uint64_t *)buf);
  std::string __p = buf;
  std::vector<Phase::Controller::DspNode>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v34)
  {
    uint64_t v36 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v35)
                                                                                        + 496)));
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 144))(&__p, a1);
      CFStringRef v37 = SHIBYTE(v56) >= 0 ? &__p : (void **)__p;
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "CvmConvolutionRenderer.mm";
      *(_WORD *)&uint8_t buf[12] = 1024;
      *(_DWORD *)&buf[14] = 281;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = v37;
      *(_WORD *)&unsigned char buf[28] = 1024;
      *(_DWORD *)&buf[30] = v34;
      _os_log_impl(&dword_221E5E000, v36, OS_LOG_TYPE_ERROR, "%25s:%-5d %s: Failed to configure DVM renderer with error %hu", buf, 0x22u);
      if (SHIBYTE(v56) < 0) {
        operator delete(__p);
      }
    }
  }
  else
  {
    uint64_t v38 = *(std::__shared_weak_count_vtbl **)(a1 + 152);
    uint32_t v39 = (std::__shared_weak_count *)operator new(0x28uLL);
    v39->__shared_weak_owners_ = 0;
    v39->__shared_owners_ = 0;
    v39[1].__vftable = v38;
    v39->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D472558;
    LODWORD(v39[1].__shared_owners_) = 1;
    BYTE4(v39[1].__shared_owners_) = 1;
    atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
    uint64_t v40 = *(void *)(a1 + 160);
    unint64_t v41 = *(void *)(a1 + 56);
    unint64_t v42 = *(void *)(a1 + 64);
    atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
    std::string __p = 0;
    __int16 v55 = 0;
    uint64_t v56 = 0;
    uint64_t v63 = &__p;
    char v64 = 0;
    uint64_t v43 = operator new(0x20uLL);
    std::string __p = v43;
    __int16 v55 = v43;
    unint64_t v44 = v43 + 8;
    uint64_t v56 = v43 + 8;
    double v65 = v43;
    double v66 = v43 + 8;
    *(void *)buf = &v56;
    *(void *)&buf[8] = &v65;
    *(void *)&uint8_t buf[16] = &v66;
    *uint64_t v43 = 0;
    *((void *)v43 + 1) = v39 + 1;
    *((void *)v43 + 2) = v39;
    atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
    *((unsigned char *)v43 + 24) = 0;
    uint8_t buf[24] = 1;
    std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Phase::Controller::VoiceBufferParameter>,Phase::Controller::VoiceBufferParameter*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)buf);
    __int16 v55 = v44;
    Phase::Controller::DVM::VoiceGraph::SetBufferParameters(*(Phase::Controller::DVM::VoiceGraph **)(*(void *)v40 + 72), v41, v42, (uint64_t *)&__p);
    *(void *)buf = &__p;
    std::vector<Phase::Controller::VoiceBufferParameter>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
    if (*(_DWORD *)(a1 + 184) == 1)
    {
      Phase::Controller::ConvolutionRenderer::BufferManager::SetNopFilter(*(void **)(a1 + 152));
      atomic_store(1u, (unsigned __int8 *)(a1 + 190));
    }
    *(unsigned char *)(a1 + 192) = 1;
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  }
  *(void *)buf = &v52[1];
  std::vector<Phase::Controller::DspNodeVoice>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v61) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v61);
  }
  if (v60) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v60);
  }
  if (v58) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v58);
  }
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v62.__r_.__value_.__l.__data_);
  }
}

void sub_221E9CA70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Phase::Controller::ConvolutionRendererConfig::~ConvolutionRendererConfig(Phase::Controller::ConvolutionRendererConfig *this)
{
  *(void *)this = &unk_26D472480;
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_26D472480;
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }

  JUMPOUT(0x223C938A0);
}

void Phase::Controller::VoiceData::~VoiceData(Phase::Controller::VoiceData *this)
{
  uint64_t v2 = (void **)((char *)this + 56);
  std::vector<Phase::Controller::VoiceBufferParameter>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)this + 16);
}

void Phase::Controller::DspNodeVoice::~DspNodeVoice(Phase::Controller::DspNodeVoice *this)
{
  uint64_t v2 = (void *)*((void *)this + 10);
  if (v2)
  {
    *((void *)this + 11) = v2;
    operator delete(v2);
  }
  uint8x8_t v3 = (void *)*((void *)this + 7);
  if (v3)
  {
    *((void *)this + 8) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 4);
  if (v4)
  {
    *((void *)this + 5) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void **)((char *)this + 8);
  std::vector<Phase::Controller::VoiceBufferParameter>::__destroy_vector::operator()[abi:ne180100](&v5);
}

void Phase::Controller::ConvolutionRenderer::~ConvolutionRenderer(Phase::Controller::ConvolutionRenderer *this)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  *(void *)this = &unk_26D4723C0;
  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::ExecuteCommands((uint64_t)this);
  Phase::Controller::DVM::VoiceGraph::RemoveRenderer(*(Phase::Controller::DVM::VoiceGraph **)(**((void **)this + 20) + 72), *((void *)this + 5));
  std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear((void *)this + 9);
  std::vector<Phase::Controller::VoiceBufferParameter>::__clear[abi:ne180100]((uint64_t *)this + 14);
  uint64_t v2 = (void *)*((void *)this + 32);
  if (v2)
  {
    free(v2);
    *((void *)this + 32) = 0;
    *((void *)this + 33) = 0;
  }
  else if (*((void *)this + 33))
  {
    std::terminate();
  }
  uint8x8_t v3 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance((Phase::Logger *)v2)
                                                                                     + 496)));
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    (*(void (**)(void **__return_ptr, Phase::Controller::ConvolutionRenderer *))(*(void *)this + 144))(__p, this);
    uint64_t v4 = v7 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "CvmConvolutionRenderer.mm";
    __int16 v9 = 1024;
    int v10 = 325;
    __int16 v11 = 2080;
    uint64_t v12 = v4;
    _os_log_impl(&dword_221E5E000, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s: destroyed.", buf, 0x1Cu);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
  }

  *((void *)this + 25) = &unk_26D472480;
  uint64_t v5 = (void *)*((void *)this + 28);
  if (v5)
  {
    *((void *)this + 29) = v5;
    operator delete(v5);
  }
  std::unique_ptr<Phase::Controller::ConvolutionRenderer::BufferManager>::reset[abi:ne180100]((uint64_t *)this + 19, 0);
  *(void *)buf = (char *)this + 112;
  std::vector<Phase::Controller::VoiceBufferParameter>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)this + 72);
  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::~Commandable(this);
}

{
  uint64_t vars8;

  Phase::Controller::ConvolutionRenderer::~ConvolutionRenderer(this);

  JUMPOUT(0x223C938A0);
}

void sub_221E9CEB0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void Phase::Controller::ConvolutionRenderer::AddSubmix(Phase::Logger *a1, unint64_t a2, unint64_t a3, double a4)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (!(a2 | a3))
  {
    uint64_t v5 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(a1)
                                                                                       + 496)));
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      (*(void (**)(void **__return_ptr, Phase::Logger *))(*(void *)a1 + 144))(__p, a1);
      uint64_t v6 = v9 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315906;
      __int16 v11 = "CvmConvolutionRenderer.mm";
      __int16 v12 = 1024;
      int v13 = 333;
      __int16 v14 = 2080;
      long long v15 = v6;
      __int16 v16 = 2048;
      uint64_t v17 = 0;
      _os_log_impl(&dword_221E5E000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (InvalidId) [inSubmixId == kInvalidSubmixId is true]: \"%s: Invalid SubmixId %llu!\"", buf, 0x26u);
      if (v9 < 0) {
        operator delete(__p[0]);
      }
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _ZN5Phase10Controller9InvalidIdCI1St11logic_errorEPKc(exception, "%s: Invalid SubmixId %llu!");
  }

  Phase::Controller::ConvolutionRenderer::UpdateSubmixToRendererConnection((uint64_t)a1, a2, a3, a4);
}

void sub_221E9D080(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *_ZN5Phase10Controller9InvalidIdCI1St11logic_errorEPKc(std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)&unk_26D4724A0;
  return result;
}

void Phase::Controller::ConvolutionRenderer::UpdateSubmixToRendererConnection(uint64_t a1, unint64_t a2, unint64_t a3, double a4)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a1 + 184))
  {
    double v4 = a4;
    if (a4 < 0.0 || a4 > 1.0)
    {
      char v9 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)a1) + 496);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        int v10 = *(const char **)(a1 + 40);
        int v16 = 136316418;
        uint64_t v17 = "CvmConvolutionRenderer.mm";
        __int16 v18 = 1024;
        int v19 = 431;
        __int16 v20 = 2048;
        uint64_t v21 = v10;
        __int16 v22 = 2048;
        double v23 = v4;
        __int16 v24 = 2048;
        uint64_t v25 = 0;
        __int16 v26 = 2048;
        uint64_t v27 = 0x3FF0000000000000;
        _os_log_impl(&dword_221E5E000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d (renderer: %llu) send level %f is out of range [%f, %f]. Clamping...", (uint8_t *)&v16, 0x3Au);
      }
      double v4 = fmin(fmax(v4, 0.0), 1.0);
    }
    __int16 v11 = (Phase::Logger *)Phase::Controller::DVM::VoiceGraph::ConnectSubmixToRenderer(*(Phase::Controller::DVM::VoiceGraph **)(**(void **)(a1 + 160) + 72), a2, a3, *(void *)(a1 + 40), v4);
    if (v11)
    {
      __int16 v12 = **(id **)(Phase::Logger::GetInstance(v11) + 496);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        uint64_t v13 = *(int *)(a1 + 248);
        if (v13 > 3) {
          __int16 v14 = "None";
        }
        else {
          __int16 v14 = off_2645F7030[v13];
        }
        uint64_t v15 = *(void *)(a1 + 40);
        int v16 = 136316162;
        uint64_t v17 = "CvmConvolutionRenderer.mm";
        __int16 v18 = 1024;
        int v19 = 438;
        __int16 v20 = 2080;
        uint64_t v21 = v14;
        __int16 v22 = 2048;
        double v23 = *(double *)&a2;
        __int16 v24 = 2048;
        uint64_t v25 = v15;
        _os_log_impl(&dword_221E5E000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d %s Connecting submixId %llu to rendererId %llu failed! \n", (uint8_t *)&v16, 0x30u);
      }
    }
  }
}

void Phase::Controller::ConvolutionRenderer::RemoveSubmix(Phase::Logger *a1, unint64_t a2, unint64_t a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (!(a2 | a3))
  {
    double v4 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(a1)
                                                                                       + 496)));
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      (*(void (**)(void **__return_ptr, Phase::Logger *))(*(void *)a1 + 144))(__p, a1);
      uint64_t v5 = v8 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315906;
      int v10 = "CvmConvolutionRenderer.mm";
      __int16 v11 = 1024;
      int v12 = 341;
      __int16 v13 = 2080;
      __int16 v14 = v5;
      __int16 v15 = 2048;
      uint64_t v16 = 0;
      _os_log_impl(&dword_221E5E000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (InvalidId) [inSubmixId == kInvalidSubmixId is true]: \"%s: Invalid SubmixId %llu!\"", buf, 0x26u);
      if (v8 < 0) {
        operator delete(__p[0]);
      }
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _ZN5Phase10Controller9InvalidIdCI1St11logic_errorEPKc(exception, "%s: Invalid SubmixId %llu!");
  }

  Phase::Controller::ConvolutionRenderer::UpdateSubmixToRendererConnection((uint64_t)a1, a2, a3, 0.0);
}

void sub_221E9D478(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

Phase::Logger *Phase::Controller::ConvolutionRenderer::SetSubmixSendLevel(Phase::Logger *result, unint64_t a2, unint64_t a3, double a4)
{
  double v4 = result;
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (!(a2 | a3))
  {
    char v9 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(result)
                                                                                       + 496)));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      (*(void (**)(UniqueObjectId *__return_ptr, Phase::Logger *))(*(void *)v4 + 144))(&__p, v4);
      int v10 = v13 >= 0 ? &__p : (UniqueObjectId *)__p.mStorage[0];
      *(_DWORD *)buf = 136315906;
      __int16 v15 = "CvmConvolutionRenderer.mm";
      __int16 v16 = 1024;
      int v17 = 353;
      __int16 v18 = 2080;
      int v19 = v10;
      __int16 v20 = 2048;
      double v21 = 0.0;
      _os_log_impl(&dword_221E5E000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (InvalidId) [inSubmixId == kInvalidSubmixId is true]: \"%s: Invalid SubmixId %llu!\"", buf, 0x26u);
      if (v13 < 0) {
        operator delete((void *)__p.mStorage[0]);
      }
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _ZN5Phase10Controller9InvalidIdCI1St11logic_errorEPKc(exception, "%s: Invalid SubmixId %llu!");
  }
  __p.mStorage[0] = a2;
  __p.mStorage[1] = a3;
  if (*((_DWORD *)result + 46))
  {
    double v5 = a4;
    if (a4 < 0.0 || a4 > 1.0)
    {
      char v7 = **(id **)(Phase::Logger::GetInstance(result) + 496);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        char v8 = (UniqueObjectId *)*((void *)v4 + 5);
        *(_DWORD *)buf = 136316418;
        __int16 v15 = "CvmConvolutionRenderer.mm";
        __int16 v16 = 1024;
        int v17 = 451;
        __int16 v18 = 2048;
        int v19 = v8;
        __int16 v20 = 2048;
        double v21 = v5;
        __int16 v22 = 2048;
        uint64_t v23 = 0;
        __int16 v24 = 2048;
        uint64_t v25 = 0x3FF0000000000000;
        _os_log_impl(&dword_221E5E000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d (renderer: %llu) send level %f is out of range [%f, %f]. Clamping...", buf, 0x3Au);
      }
      double v5 = fmin(fmax(v5, 0.0), 1.0);
    }
    return (Phase::Logger *)Phase::Controller::DVM::VoiceGraph::UpdateSubmixToRendererConnectionGain(*(Phase::Controller::DVM::VoiceGraph **)(**((void **)v4 + 20) + 72), &__p, (unint64_t *)v4 + 5, v5);
  }
  return result;
}

void sub_221E9D70C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Phase::Controller::ConvolutionRenderer::SetParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)a2 != 2)
  {
    unint64_t v42 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance((Phase::Logger *)a1)
                                                                                        + 496)));
    if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
    {
      (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a1 + 144))(buf, a1);
      uint64_t v43 = buf[23] >= 0 ? buf : *(unsigned char **)buf;
      *(_DWORD *)uint64_t v48 = 136315650;
      *(void *)unint64_t v49 = "CvmConvolutionRenderer.mm";
      *(_WORD *)&v49[8] = 1024;
      *(_DWORD *)&v49[10] = 363;
      __int16 v50 = 2080;
      uint64_t v51 = v43;
      _os_log_impl(&dword_221E5E000, v42, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [pInRendererParameters->mRendererType != RendererType::NUPConvolution is true]: \"%s: Render parameters mismatch.\"", v48, 0x1Cu);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "%s: Render parameters mismatch.");
  }
  uint64_t v3 = *(void *)(a1 + 168);
  float v4 = *(double *)v3;
  Phase::Controller::IR::Metadata::Metadata((uint64_t)v48, *(void *)(*(void *)(a2 + 8) + 120), *(Phase::Controller::Spatializer **)(v3 + 96), v4);
  WorkBufferSizeInBytes = (Phase::Logger *)Phase::Controller::ConvolutionRenderer::GetWorkBufferSizeInBytes((Phase::Controller::ConvolutionRenderer *)a1, (const Phase::Controller::IR::Metadata *)v48);
  uint64_t v6 = WorkBufferSizeInBytes;
  if (WorkBufferSizeInBytes)
  {
    char v7 = *(Phase::Logger **)(a1 + 256);
    if ((unint64_t)WorkBufferSizeInBytes > *(void *)(a1 + 264))
    {
      if (v7) {
        WorkBufferSizeInBytes = (Phase::Logger *)malloc_type_realloc(*(void **)(a1 + 256), (size_t)WorkBufferSizeInBytes, 0xB7EECBCFuLL);
      }
      else {
        WorkBufferSizeInBytes = (Phase::Logger *)malloc_type_malloc((size_t)WorkBufferSizeInBytes, 0x9E589963uLL);
      }
      char v7 = WorkBufferSizeInBytes;
      *(void *)(a1 + 256) = WorkBufferSizeInBytes;
      *(void *)(a1 + 264) = v6;
    }
    if (!v7) {
      std::terminate();
    }
    uint64_t Instance = Phase::Logger::GetInstance(WorkBufferSizeInBytes);
    spid = (Phase::Logger *)os_signpost_id_generate(**(os_log_t **)(Instance + 496));
    int v12 = (Phase::Logger *)Phase::Logger::GetInstance(spid);
    if (*((unsigned char *)v12 + 504))
    {
      char v13 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v12)
                                                                                          + 496)));
      __int16 v14 = v13;
      if ((unint64_t)spid - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v13))
      {
        (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 144))(v53, a1);
        if (*(void *)&v49[4] && **(_DWORD **)&v49[4] == 3)
        {
          __int16 v15 = *(void **)(*(void *)&v49[4] + 104);
          if (v15) {
            __int16 v15 = (void *)*v15;
          }
        }
        else
        {
          __int16 v15 = 0;
        }
        __int16 v16 = (void **)v53[0];
        if (v54 >= 0) {
          __int16 v16 = v53;
        }
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = v16;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = *(void *)&v49[4];
        *(_WORD *)&buf[22] = 2048;
        *(void *)&uint8_t buf[24] = v15;
        _os_signpost_emit_with_name_impl(&dword_221E5E000, v14, OS_SIGNPOST_INTERVAL_BEGIN, (os_signpost_id_t)spid, "Phase_ConvolutionRenderer_PrepareIR", "%s: IR Build Begin for Metadata %p: %zu reflections", buf, 0x20u);
        if (v54 < 0) {
          operator delete(v53[0]);
        }
      }
    }
    int OutputBufferSizeInSamples = Phase::Controller::IR::IRBuilder::GetOutputBufferSizeInSamples(*(Phase::Controller::IR::IRBuilder **)(a1 + 168), (const Phase::Controller::IR::Metadata *)v48);
    uint64_t v18 = *(int *)(a1 + 220);
    int v19 = Phase::Controller::IR::IRBuilder::GetWorkBufferSizeInBytes(*(void *)(a1 + 168), (uint64_t)v48, 0, *(_DWORD *)(a1 + 212));
    unint64_t v20 = ((unint64_t)v7 + 39) & 0xFFFFFFFFFFFFFFF0;
    unint64_t v21 = (v20 + 4 * OutputBufferSizeInSamples + 15) & 0xFFFFFFFFFFFFFFF0;
    *(void *)char v7 = v20;
    *((void *)v7 + 1) = v21;
    unint64_t v22 = v21 + 8 * v18;
    int v23 = OutputBufferSizeInSamples / (int)v18;
    if ((int)v18 >= 1)
    {
      uint64_t v24 = 0;
      do
      {
        unint64_t v25 = (v22 + 15) & 0xFFFFFFFFFFFFFFF0;
        *(void *)(*((void *)v7 + 1) + v24) = v25;
        unint64_t v22 = v25 + 4 * v23;
        v24 += 8;
      }
      while (8 * v18 != v24);
    }
    unint64_t v26 = (v22 + 15) & 0xFFFFFFFFFFFFFFF0;
    *((void *)v7 + 2) = v26;
    uint64_t v27 = (Phase::Logger *)Phase::Controller::ConvolutionRenderer::GetWorkBufferSizeInBytes((Phase::Controller::ConvolutionRenderer *)a1, (const Phase::Controller::IR::Metadata *)v48);
    if (v27 != (Phase::Logger *)(v26 + v19 - (void)v7))
    {
      unint64_t v45 = **(id **)(Phase::Logger::GetInstance(v27) + 496);
      if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "CvmConvolutionRenderer.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 520;
        _os_log_impl(&dword_221E5E000, v45, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [GetWorkBufferSizeInBytes(inMetadata) != PointerDiff(pMemory, pInWorkBuffer) is true]: \"Memory Allocation Error\"", buf, 0x12u);
      }
      uint64_t v46 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v46, "Memory Allocation Error");
    }
    vDSP_vclr(*(float **)v7, 1, OutputBufferSizeInSamples);
    if (*(void *)&v49[4]
      && **(_DWORD **)&v49[4] == 3
      && (unint64_t v29 = *(void **)(*(void *)&v49[4] + 104)) != 0
      && *v29)
    {
      Phase::Controller::IR::IRBuilder::Build(*(Phase::Logger **)(a1 + 168), (uint64_t)v48, 0, *(_DWORD *)(a1 + 212), *((void *)v7 + 2), *(void *)v7);
    }
    else
    {
      int v31 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v28)
                                                                                          + 496)));
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 144))(v53, a1);
        uint64_t v32 = v54 >= 0 ? v53 : (void **)v53[0];
        *(_DWORD *)buf = 136315906;
        *(void *)&uint8_t buf[4] = "CvmConvolutionRenderer.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 550;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&buf[20] = v32;
        *(_WORD *)&unsigned char buf[28] = 2048;
        *(void *)&buf[30] = v48;
        _os_log_impl(&dword_221E5E000, v31, OS_LOG_TYPE_ERROR, "%25s:%-5d %s: metadata %p is empty", buf, 0x26u);
        if (v54 < 0) {
          operator delete(v53[0]);
        }
      }
    }
    if (*(_DWORD *)(a1 + 208) == 2)
    {
      if (v23 <= 128) {
        operator new();
      }
      memset(buf, 0, 24);
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(buf, *(const void **)(a1 + 224), *(void *)(a1 + 232), (uint64_t)(*(void *)(a1 + 232) - *(void *)(a1 + 224)) >> 2);
      uint64_t v38 = *(void **)buf;
      if (*(void *)buf == *(void *)&buf[8])
      {
        uint64_t v39 = *(void *)&buf[16];
        if (*(void *)&buf[16] - *(void *)buf <= 7uLL)
        {
          if (*(void *)buf)
          {
            *(void *)&buf[8] = *(void *)buf;
            operator delete(*(void **)buf);
            uint64_t v39 = 0;
            memset(buf, 0, 24);
          }
          uint64_t v40 = v39 >> 1;
          if ((unint64_t)(v39 >> 1) <= 2) {
            uint64_t v40 = 2;
          }
          if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v41 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v41 = v40;
          }
          std::vector<int>::__vallocate[abi:ne180100](buf, v41);
          uint64_t v38 = *(void **)&buf[8];
        }
        *uint64_t v38 = 0x40000000080;
        *(void *)&buf[8] = v38 + 1;
      }
      operator new();
    }
    unint64_t v33 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v30)
                                                                                        + 496)));
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 144))(v53, a1);
      int v34 = v54 >= 0 ? v53 : (void **)v53[0];
      int v35 = *(_DWORD *)(a1 + 208);
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "CvmConvolutionRenderer.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 615;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = v34;
      *(_WORD *)&unsigned char buf[28] = 1024;
      *(_DWORD *)&buf[30] = v35;
      _os_log_impl(&dword_221E5E000, v33, OS_LOG_TYPE_ERROR, "%25s:%-5d %s: Convolver type %d not supported!", buf, 0x22u);
      if (v54 < 0) {
        operator delete(v53[0]);
      }
    }

    char v8 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v36)
                                                                                       + 496)));
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 144))(v53, a1);
      CFStringRef v37 = v54 >= 0 ? v53 : (void **)v53[0];
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "CvmConvolutionRenderer.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 622;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = v37;
      _os_log_impl(&dword_221E5E000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d %s: Convolver pointer is null!", buf, 0x1Cu);
      if (v54 < 0) {
        operator delete(v53[0]);
      }
    }
  }
  else
  {
    char v8 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(0)
                                                                                       + 496)));
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 144))(v53, a1);
      char v9 = v54 >= 0 ? v53 : (void **)v53[0];
      uint64_t v10 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "CvmConvolutionRenderer.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 373;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = v9;
      *(_WORD *)&unsigned char buf[28] = 2048;
      *(void *)&buf[30] = v10;
      _os_log_impl(&dword_221E5E000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d %s: Invalid work buffer size in Build IR node for instance %llu", buf, 0x26u);
      if (v54 < 0) {
        operator delete(v53[0]);
      }
    }
  }

  Phase::Controller::IR::Metadata::~Metadata((Phase::Controller::IR::Metadata *)v48);
}

void sub_221E9E96C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_signpost_id_t spid, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,__int16 a27,__int16 a28,uint64_t a29,__int16 a30,uint64_t a31)
{
  (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
  Phase::Controller::IR::Metadata::~Metadata((Phase::Controller::IR::Metadata *)&a15);
  _Unwind_Resume(a1);
}

unint64_t Phase::Controller::ConvolutionRenderer::GetWorkBufferSizeInBytes(Phase::Controller::ConvolutionRenderer *this, const Phase::Controller::IR::Metadata *a2)
{
  int OutputBufferSizeInSamples = Phase::Controller::IR::IRBuilder::GetOutputBufferSizeInSamples(*((Phase::Controller::IR::IRBuilder **)this + 21), a2);
  uint64_t v5 = *((int *)this + 55);
  int WorkBufferSizeInBytes = Phase::Controller::IR::IRBuilder::GetWorkBufferSizeInBytes(*((void *)this + 21), (uint64_t)a2, 0, *((_DWORD *)this + 53));
  unint64_t v7 = ((4 * OutputBufferSizeInSamples + 47) & 0xFFFFFFFFFFFFFFF0) + 8 * v5;
  if ((int)v5 >= 1)
  {
    uint64_t v8 = 4 * (OutputBufferSizeInSamples / (int)v5);
    do
    {
      unint64_t v7 = ((v7 + 15) & 0xFFFFFFFFFFFFFFF0) + v8;
      LODWORD(v5) = v5 - 1;
    }
    while (v5);
  }
  return ((v7 + 15) & 0xFFFFFFFFFFFFFFF0) + WorkBufferSizeInBytes;
}

uint64_t Phase::Controller::ConvolutionRenderer::NeedsMetadata(Phase::Controller::ConvolutionRenderer *this)
{
  return *((unsigned __int8 *)this + 191);
}

uint64_t Phase::Controller::ConvolutionRenderer::SetPlayState(uint64_t result, int a2, int a3)
{
  int v3 = *(_DWORD *)(result + 184);
  if (v3 != a2 && v3 != 0)
  {
    uint64_t v6 = result;
    if (!a2)
    {
      atomic_store(1u, (unsigned __int8 *)(result + 188));
      if (a3)
      {
        Phase::Controller::ConvolutionRenderer::BufferManager::SetNopFilter(*(void **)(result + 152));
        atomic_store(1u, (unsigned __int8 *)(v6 + 190));
      }
    }
    uint64_t result = Phase::Controller::DVM::VoiceGraph::SetRendererPlayState(*(void *)(**(void **)(v6 + 160) + 72), *(void *)(v6 + 40), a2, 0);
    *(_DWORD *)(v6 + 184) = a2;
  }
  return result;
}

uint64_t Phase::Controller::ConvolutionRenderer::GetPlayState(Phase::Controller::ConvolutionRenderer *this)
{
  return *((unsigned int *)this + 46);
}

void *Phase::Controller::ConvolutionRenderer::BufferManager::SetNopFilter(void *this)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  unint64_t v1 = this[8];
  if (!v1)
  {
    float v4 = this;
    uint64_t v5 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)this) + 496);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = v4[6];
      int v8 = 136315650;
      char v9 = "CvmConvolutionRenderer.mm";
      __int16 v10 = 1024;
      int v11 = 161;
      __int16 v12 = 2048;
      uint64_t v13 = v6;
      _os_log_impl(&dword_221E5E000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [nullptr == mpNopBuffer is true]: \"Uninitialized nop filter in ConvolutionRenderer %llu\"", (uint8_t *)&v8, 0x1Cu);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Uninitialized nop filter in ConvolutionRenderer %llu");
  }
  unint64_t v2 = atomic_exchange(this, v1);
  int v3 = (atomic_ullong *)this[7];
  if (v3) {
    atomic_exchange(v3, this[8]);
  }
  if (v2)
  {
    if (this[8] != v2) {
      atomic_store(0, (unsigned __int8 *)(v2 + 12));
    }
  }
  return this;
}

void sub_221E9F000(_Unwind_Exception *exception_object)
{
}

BOOL Phase::Controller::ConvolutionRenderer::IsPrepared(Phase::Controller::ConvolutionRenderer *this)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)this + 190);
  return (v1 & 1) != 0 && *((unsigned char *)this + 192) != 0;
}

BOOL Phase::Controller::ConvolutionRenderer::IsStopped(Phase::Controller::ConvolutionRenderer *this)
{
  return !*((_DWORD *)this + 46) && *((unsigned char *)this + 189) != 0;
}

uint64_t Phase::Controller::ConvolutionRenderer::IsStopping(Phase::Controller::ConvolutionRenderer *this)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)this + 188);
  return v1 & 1;
}

uint64_t Phase::Controller::ConvolutionRenderer::SubmitRendererStoppedResult(uint64_t this, std::error_code a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  std::error_code v10 = a2;
  if (a2.__val_ == 1)
  {
    int v3 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)this) + 496);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      __int16 v12 = "CvmConvolutionRenderer.mm";
      __int16 v13 = 1024;
      int v14 = 724;
      _os_log_impl(&dword_221E5E000, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [inErrorCode.value() == true is true]: inErrorCode.message()", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    std::error_code::message((std::string *)buf, &v10);
    MEMORY[0x223C932C0](exception, buf);
  }
  uint64_t v2 = this;
  if (*(_DWORD *)(this + 184))
  {
    uint64_t v5 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance((Phase::Logger *)this)
                                                                                       + 496)));
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v2 + 144))(__p, v2);
      if (v9 >= 0) {
        uint64_t v6 = __p;
      }
      else {
        uint64_t v6 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136315650;
      __int16 v12 = "CvmConvolutionRenderer.mm";
      __int16 v13 = 1024;
      int v14 = 727;
      __int16 v15 = 2080;
      __int16 v16 = v6;
      _os_log_impl(&dword_221E5E000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [mPlayState != PlayState::kStopped is true]: \"%s: [SubmitRendererStoppedResult] Received stopped result for renderer which is not in stopped state!\"", buf, 0x1Cu);
      if (v9 < 0) {
        operator delete(__p[0]);
      }
    }

    unint64_t v7 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v7, "%s: [SubmitRendererStoppedResult] Received stopped result for renderer which is not in stopped state!");
  }
  *(unsigned char *)(this + 189) = 1;
  return this;
}

void sub_221E9F2B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  __cxa_free_exception(v20);
  _Unwind_Resume(a1);
}

unsigned __int8 *Phase::Controller::ConvolutionRenderer::Rebuild(unsigned __int8 *this, int a2)
{
  uint64_t v2 = this;
  if (a2)
  {
    this = (unsigned __int8 *)Phase::Controller::ConvolutionRenderer::BufferManager::SetNopFilter(*((void **)this + 19));
    atomic_store(1u, v2 + 190);
  }
  v2[191] = 1;
  return this;
}

uint64_t Phase::Controller::ConvolutionRenderer::GetConfig(Phase::Controller::ConvolutionRenderer *this)
{
  return (uint64_t)this + 200;
}

uint64_t Phase::Controller::ConvolutionRenderer::GetDescription(Phase::Controller::ConvolutionRenderer *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Renderer (convolution, ", 23);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"id ", 3);
  uint64_t v2 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)", ", 2);
  uint64_t v3 = *((int *)this + 62);
  if (v3 > 3) {
    float v4 = "None";
  }
  else {
    float v4 = off_2645F7030[v3];
  }
  size_t v5 = strlen(v4);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)", ", 2);
  MethodString = Phase::Controller::IR::IRBuilder::GetMethodString((Phase::Controller::ConvolutionRenderer *)((char *)this + 212), v7);
  size_t v9 = strlen(MethodString);
  std::error_code v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)MethodString, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)", ", 2);
  int v11 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" channels) ", 11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"impl@", 5);
  __int16 v12 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)")", 1);
  std::stringbuf::str();
  v14[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v14 + *(void *)(v14[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v14[1] = MEMORY[0x263F8C318] + 16;
  if (v15 < 0) {
    operator delete((void *)v14[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x223C937D0](&v16);
}

void sub_221E9F578(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear(void *result)
{
  if (result[3])
  {
    unsigned __int8 v1 = result;
    uint64_t result = (void *)result[2];
    if (result)
    {
      do
      {
        uint64_t v2 = (void *)*result;
        operator delete(result);
        uint64_t result = v2;
      }
      while (v2);
    }
    v1[2] = 0;
    uint64_t v3 = v1[1];
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
        *(void *)(*v1 + 8 * i) = 0;
    }
    v1[3] = 0;
  }
  return result;
}

void std::vector<Phase::Controller::VoiceBufferParameter>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<Phase::Controller::VoiceBufferParameter>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void Phase::Controller::InvalidId::~InvalidId(std::logic_error *this)
{
  std::logic_error::~logic_error(this);

  JUMPOUT(0x223C938A0);
}

void Phase::Controller::ConvolutionRenderer::BufferManager::DeleteVoiceBuffer(uint64_t a1, void *a2)
{
  if (*a2) {
    (*(void (**)(void))(*(void *)*a2 + 8))(*a2);
  }

  JUMPOUT(0x223C938A0);
}

uint64_t *std::unique_ptr<Phase::DspLayer::VoiceBuffer,std::function<void ()(Phase::DspLayer::VoiceBuffer*)>>::operator=[abi:ne180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  size_t v5 = a2 + 1;
  std::unique_ptr<Phase::DspLayer::VoiceBuffer,std::function<void ()(Phase::DspLayer::VoiceBuffer*)>>::reset[abi:ne180100](a1, v4);
  unint64_t v7 = (uint64_t **)(a1 + 4);
  uint64_t v6 = (uint64_t *)a1[4];
  int v8 = a1 + 1;
  a1[4] = 0;
  if (v6 == a1 + 1)
  {
    (*(void (**)(uint64_t *))(*v8 + 32))(a1 + 1);
  }
  else if (v6)
  {
    (*(void (**)(uint64_t *))(*v6 + 40))(v6);
  }
  uint64_t v11 = a2[4];
  std::error_code v10 = a2 + 4;
  size_t v9 = (uint64_t *)v11;
  if (v11)
  {
    if (v9 == v5)
    {
      const Method *v7 = v8;
      (*(void (**)(void, uint64_t *))(*(void *)*v10 + 24))(*v10, a1 + 1);
      return a1;
    }
    const Method *v7 = v9;
  }
  else
  {
    std::error_code v10 = a1 + 4;
  }
  *std::error_code v10 = 0;
  return a1;
}

void std::__function::__func<std::__bind<void (*)(unsigned long long,Phase::DspLayer::VoiceBuffer *),unsigned long long &,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (*)(unsigned long long,Phase::DspLayer::VoiceBuffer *),unsigned long long &,std::placeholders::__ph<1> const&>>,void ()(Phase::DspLayer::VoiceBuffer *)>::~__func()
{
}

__n128 std::__function::__func<std::__bind<void (*)(unsigned long long,Phase::DspLayer::VoiceBuffer *),unsigned long long &,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (*)(unsigned long long,Phase::DspLayer::VoiceBuffer *),unsigned long long &,std::placeholders::__ph<1> const&>>,void ()(Phase::DspLayer::VoiceBuffer *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26D4724C8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::__bind<void (*)(unsigned long long,Phase::DspLayer::VoiceBuffer *),unsigned long long &,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (*)(unsigned long long,Phase::DspLayer::VoiceBuffer *),unsigned long long &,std::placeholders::__ph<1> const&>>,void ()(Phase::DspLayer::VoiceBuffer *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D4724C8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::__bind<void (*)(unsigned long long,Phase::DspLayer::VoiceBuffer *),unsigned long long &,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (*)(unsigned long long,Phase::DspLayer::VoiceBuffer *),unsigned long long &,std::placeholders::__ph<1> const&>>,void ()(Phase::DspLayer::VoiceBuffer *)>::operator()(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(a1 + 8))(*(void *)(a1 + 16), *a2);
}

uint64_t std::__function::__value_func<void ()(Phase::DspLayer::VoiceBuffer *)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<void *,std::unique_ptr<Phase::DspLayer::VoiceBuffer,std::function<void ()(Phase::DspLayer::VoiceBuffer*)>>>,std::__unordered_map_hasher<void *,std::__hash_value_type<void *,std::unique_ptr<Phase::DspLayer::VoiceBuffer,std::function<void ()(Phase::DspLayer::VoiceBuffer*)>>>,std::hash<void *>,std::equal_to<void *>,true>,std::__unordered_map_equal<void *,std::__hash_value_type<void *,std::unique_ptr<Phase::DspLayer::VoiceBuffer,std::function<void ()(Phase::DspLayer::VoiceBuffer*)>>>,std::equal_to<void *>,std::hash<void *>,true>,std::allocator<std::__hash_value_type<void *,std::unique_ptr<Phase::DspLayer::VoiceBuffer,std::function<void ()(Phase::DspLayer::VoiceBuffer*)>>>>>::erase(void *a1, uint64_t *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  uint64_t v4 = *a2;
  unint64_t v3 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v2);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v3 >= *(void *)&v2) {
      v3 %= *(void *)&v2;
    }
  }
  else
  {
    v3 &= *(void *)&v2 - 1;
  }
  uint64_t v6 = *(uint64_t **)(*a1 + 8 * v3);
  do
  {
    unint64_t v7 = v6;
    uint64_t v6 = (uint64_t *)*v6;
  }
  while (v6 != a2);
  if (v7 != a1 + 2)
  {
    unint64_t v8 = v7[1];
    if (v5.u32[0] > 1uLL)
    {
      if (v8 >= *(void *)&v2) {
        v8 %= *(void *)&v2;
      }
    }
    else
    {
      v8 &= *(void *)&v2 - 1;
    }
    uint64_t v9 = *a2;
    if (v8 == v3)
    {
LABEL_20:
      if (!v9) {
        goto LABEL_27;
      }
      goto LABEL_21;
    }
  }
  if (!v4) {
    goto LABEL_19;
  }
  unint64_t v10 = *(void *)(v4 + 8);
  if (v5.u32[0] > 1uLL)
  {
    if (v10 >= *(void *)&v2) {
      v10 %= *(void *)&v2;
    }
  }
  else
  {
    v10 &= *(void *)&v2 - 1;
  }
  uint64_t v9 = *a2;
  if (v10 != v3)
  {
LABEL_19:
    *(void *)(*a1 + 8 * v3) = 0;
    uint64_t v9 = *a2;
    goto LABEL_20;
  }
LABEL_21:
  unint64_t v11 = *(void *)(v9 + 8);
  if (v5.u32[0] > 1uLL)
  {
    if (v11 >= *(void *)&v2) {
      v11 %= *(void *)&v2;
    }
  }
  else
  {
    v11 &= *(void *)&v2 - 1;
  }
  if (v11 != v3)
  {
    *(void *)(*a1 + 8 * v11) = v7;
    uint64_t v9 = *a2;
  }
LABEL_27:
  uint64_t *v7 = v9;
  *a2 = 0;
  --a1[3];
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<void *,std::unique_ptr<Phase::DspLayer::VoiceBuffer,std::function<void ()(Phase::DspLayer::VoiceBuffer*)>>>,void *>>>::operator()[abi:ne180100](1, a2);
  return v4;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<void *,std::unique_ptr<Phase::DspLayer::VoiceBuffer,std::function<void ()(Phase::DspLayer::VoiceBuffer*)>>>,void *>>>::operator()[abi:ne180100](char a1, uint64_t *__p)
{
  if (a1)
  {
    std::unique_ptr<Phase::DspLayer::VoiceBuffer,std::function<void ()(Phase::DspLayer::VoiceBuffer*)>>::reset[abi:ne180100](__p + 3, 0);
    std::__function::__value_func<void ()(Phase::DspLayer::VoiceBuffer *)>::~__value_func[abi:ne180100](__p + 4);
  }
  if (__p)
  {
    operator delete(__p);
  }
}

void *std::__hash_table<std::__hash_value_type<void *,std::unique_ptr<Phase::DspLayer::VoiceBuffer,std::function<void ()(Phase::DspLayer::VoiceBuffer*)>>>,std::__unordered_map_hasher<void *,std::__hash_value_type<void *,std::unique_ptr<Phase::DspLayer::VoiceBuffer,std::function<void ()(Phase::DspLayer::VoiceBuffer*)>>>,std::hash<void *>,std::equal_to<void *>,true>,std::__unordered_map_equal<void *,std::__hash_value_type<void *,std::unique_ptr<Phase::DspLayer::VoiceBuffer,std::function<void ()(Phase::DspLayer::VoiceBuffer*)>>>,std::equal_to<void *>,std::hash<void *>,true>,std::allocator<std::__hash_value_type<void *,std::unique_ptr<Phase::DspLayer::VoiceBuffer,std::function<void ()(Phase::DspLayer::VoiceBuffer*)>>>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void *&&>,std::tuple<>>(uint64_t *a1, unint64_t a2, void *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = a1[1];
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
    unint64_t v11 = *(void ***)(*a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == a2) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  int v14 = a1 + 2;
  uint64_t i = operator new(0x40uLL);
  void *i = 0;
  i[1] = v8;
  i[2] = *a3;
  i[3] = 0;
  i[7] = 0;
  float v15 = (float)(unint64_t)(a1[3] + 1);
  float v16 = *((float *)a1 + 8);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      int8x8_t prime = (int8x8_t)v19;
    }
    else {
      int8x8_t prime = (int8x8_t)v18;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v9 = a1[1];
    }
    if (*(void *)&prime > v9) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v27 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v9 < 3 || (uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        unint64_t v27 = std::__next_prime(v27);
      }
      else
      {
        uint64_t v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2) {
          unint64_t v27 = v29;
        }
      }
      if (*(void *)&prime <= v27) {
        int8x8_t prime = (int8x8_t)v27;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          unint64_t v21 = operator new(8 * *(void *)&prime);
          unint64_t v22 = (void *)*a1;
          *a1 = (uint64_t)v21;
          if (v22) {
            operator delete(v22);
          }
          uint64_t v23 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(void *)(*a1 + 8 * v23++) = 0;
          while (*(void *)&prime != v23);
          uint64_t v24 = (void *)*v14;
          if (*v14)
          {
            unint64_t v25 = v24[1];
            uint8x8_t v26 = (uint8x8_t)vcnt_s8(prime);
            v26.i16[0] = vaddlv_u8(v26);
            if (v26.u32[0] > 1uLL)
            {
              if (v25 >= *(void *)&prime) {
                v25 %= *(void *)&prime;
              }
            }
            else
            {
              v25 &= *(void *)&prime - 1;
            }
            *(void *)(*a1 + 8 * v25) = v14;
            long long v30 = (void *)*v24;
            if (*v24)
            {
              do
              {
                unint64_t v31 = v30[1];
                if (v26.u32[0] > 1uLL)
                {
                  if (v31 >= *(void *)&prime) {
                    v31 %= *(void *)&prime;
                  }
                }
                else
                {
                  v31 &= *(void *)&prime - 1;
                }
                if (v31 != v25)
                {
                  if (!*(void *)(*a1 + 8 * v31))
                  {
                    *(void *)(*a1 + 8 * v31) = v24;
                    goto LABEL_55;
                  }
                  *uint64_t v24 = *v30;
                  void *v30 = **(void **)(*a1 + 8 * v31);
                  **(void **)(*a1 + 8 * v31) = v30;
                  long long v30 = v24;
                }
                unint64_t v31 = v25;
LABEL_55:
                uint64_t v24 = v30;
                long long v30 = (void *)*v30;
                unint64_t v25 = v31;
              }
              while (v30);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_59;
        }
        uint64_t v36 = (void *)*a1;
        *a1 = 0;
        if (v36) {
          operator delete(v36);
        }
        unint64_t v9 = 0;
        a1[1] = 0;
      }
    }
LABEL_59:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v32 = *a1;
  unint64_t v33 = *(void **)(*a1 + 8 * v3);
  if (v33)
  {
    void *i = *v33;
LABEL_72:
    *unint64_t v33 = i;
    goto LABEL_73;
  }
  void *i = *v14;
  *int v14 = i;
  *(void *)(v32 + 8 * v3) = v14;
  if (*i)
  {
    unint64_t v34 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v34 >= v9) {
        v34 %= v9;
      }
    }
    else
    {
      v34 &= v9 - 1;
    }
    unint64_t v33 = (void *)(*a1 + 8 * v34);
    goto LABEL_72;
  }
LABEL_73:
  ++a1[3];
  return i;
}

void sub_221E9FF50(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<void *,std::unique_ptr<Phase::DspLayer::VoiceBuffer,std::function<void ()(Phase::DspLayer::VoiceBuffer*)>>>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<Phase::DspLayer::VoiceBuffer,std::function<void ()(Phase::DspLayer::VoiceBuffer*)>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  std::logic_error *result = a2;
  if (v2)
  {
    uint64_t v3 = result[4];
    uint64_t v4 = v2;
    if (!v3) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v3 + 48))(v3, &v4);
  }
  return result;
}

void *std::__function::__value_func<void ()(Phase::DspLayer::VoiceBuffer *)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    __n128 result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_221EA00B4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<int>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

uint64_t *std::unique_ptr<Phase::Controller::ConvolutionRenderer::BufferManager>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  char *result = a2;
  if (v2)
  {
    std::__hash_table<std::__hash_value_type<void *,std::unique_ptr<Phase::DspLayer::VoiceBuffer,std::function<void ()(Phase::DspLayer::VoiceBuffer*)>>>,std::__unordered_map_hasher<void *,std::__hash_value_type<void *,std::unique_ptr<Phase::DspLayer::VoiceBuffer,std::function<void ()(Phase::DspLayer::VoiceBuffer*)>>>,std::hash<void *>,std::equal_to<void *>,true>,std::__unordered_map_equal<void *,std::__hash_value_type<void *,std::unique_ptr<Phase::DspLayer::VoiceBuffer,std::function<void ()(Phase::DspLayer::VoiceBuffer*)>>>,std::equal_to<void *>,std::hash<void *>,true>,std::allocator<std::__hash_value_type<void *,std::unique_ptr<Phase::DspLayer::VoiceBuffer,std::function<void ()(Phase::DspLayer::VoiceBuffer*)>>>>>::~__hash_table(v2 + 8);
    JUMPOUT(0x223C938A0);
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<void *,std::unique_ptr<Phase::DspLayer::VoiceBuffer,std::function<void ()(Phase::DspLayer::VoiceBuffer*)>>>,std::__unordered_map_hasher<void *,std::__hash_value_type<void *,std::unique_ptr<Phase::DspLayer::VoiceBuffer,std::function<void ()(Phase::DspLayer::VoiceBuffer*)>>>,std::hash<void *>,std::equal_to<void *>,true>,std::__unordered_map_equal<void *,std::__hash_value_type<void *,std::unique_ptr<Phase::DspLayer::VoiceBuffer,std::function<void ()(Phase::DspLayer::VoiceBuffer*)>>>,std::equal_to<void *>,std::hash<void *>,true>,std::allocator<std::__hash_value_type<void *,std::unique_ptr<Phase::DspLayer::VoiceBuffer,std::function<void ()(Phase::DspLayer::VoiceBuffer*)>>>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      std::unique_ptr<Phase::DspLayer::VoiceBuffer,std::function<void ()(Phase::DspLayer::VoiceBuffer*)>>::reset[abi:ne180100](v2 + 3, 0);
      std::__function::__value_func<void ()(Phase::DspLayer::VoiceBuffer *)>::~__value_func[abi:ne180100](v2 + 4);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void ___ZN5Phase10Controller19ConvolutionRenderer13BufferManagerC2EyRKNS0_25ConvolutionRendererConfigE_block_invoke()
{
}

void Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  atomic_store(1u, (unsigned __int8 *)(a1 + 32));
  p_p = &__p;
  Phase::GetBacktraceFrame<1ul>(&__p);
  int64_t size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
  {
    int64_t size = __p.__r_.__value_.__l.__size_;
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (size >= 9)
  {
    uint64_t v4 = (char *)p_p + size;
    uint8x8_t v5 = p_p;
    do
    {
      unint64_t v6 = (char *)memchr(v5, 67, size - 8);
      if (!v6) {
        break;
      }
      if (*(void *)v6 == 0x6E7973416C6C6143 && v6[8] == 99)
      {
        if (v6 != v4 && v6 - (char *)p_p != -1)
        {
          Phase::GetBacktraceFrame<2ul>((std::string *)buf);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          std::string __p = *(std::string *)buf;
        }
        break;
      }
      uint8x8_t v5 = (std::string *)(v6 + 1);
      int64_t size = v4 - (char *)v5;
    }
    while (v4 - (char *)v5 >= 9);
  }
  size_t v8 = **(id **)(a1 + 24);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    unint64_t v9 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      unint64_t v9 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "Commandable.hpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 356;
    *(_WORD *)&unsigned char buf[18] = 2080;
    *(void *)&buf[20] = v9;
    _os_log_impl(&dword_221E5E000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to push command into the queue from:\n%s", buf, 0x1Cu);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_221EA03D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Phase::LambdaFunction<BOOL Phase::Commandable<128,Phase::LockFreeQueueMPSC>::CallAsync<Phase::Controller::ConvolutionRenderer,void,Phase::SerialNumberAllocator<long long> *,BOOL>(int,void (Phase::Controller::ConvolutionRenderer::*)(Phase::SerialNumberAllocator<long long> *,BOOL),Phase::SerialNumberAllocator<long long> *,BOOL)::{lambda(void)#1},void>::~LambdaFunction()
{
}

uint64_t Phase::LambdaFunction<BOOL Phase::Commandable<128,Phase::LockFreeQueueMPSC>::CallAsync<Phase::Controller::ConvolutionRenderer,void,Phase::SerialNumberAllocator<long long> *,BOOL>(int,void (Phase::Controller::ConvolutionRenderer::*)(Phase::SerialNumberAllocator<long long> *,BOOL),Phase::SerialNumberAllocator<long long> *,BOOL)::{lambda(void)#1},void>::operator()(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void *, void, void))(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = (void *)(*(void *)(a1 + 8) + (v2 >> 1));
  if (v2) {
    uint64_t v1 = *(uint64_t (**)(void *, void, void))(*v3 + v1);
  }
  return v1(v3, *(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void Phase::GetBacktraceFrame<2ul>(std::string *a1@<X8>)
{
  std::vector<void *>::vector(&v19, 4uLL);
  int v2 = backtrace(v19, (unint64_t)((char *)v20 - (char *)v19) >> 3);
  std::vector<void *>::resize((uint64_t)&v19, v2);
  applesauce::backtrace::detail::symbolicate_snapshot((uint64_t)&v19, 4, &__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](v16, &__p, 24);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  memset(&__p, 0, sizeof(__p));
  uint64_t v12 = 0;
  unint64_t v13 = 0;
  unint64_t v14 = 0;
  uint64_t v3 = (std::locale::id *)MEMORY[0x263F8C108];
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(void *)(v16[0] - 24)));
    uint64_t v4 = std::locale::use_facet(&v21, v3);
    unsigned __int8 v5 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10);
    std::locale::~locale(&v21);
    unint64_t v6 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v16, (uint64_t)&__p, v5);
    if ((*((unsigned char *)v6 + *(void *)(*v6 - 24) + 32) & 5) != 0) {
      break;
    }
    uint64_t v7 = v13;
    if ((unint64_t)v13 >= v14)
    {
      unint64_t v9 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v12, (long long *)&__p);
    }
    else
    {
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v13, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else
      {
        long long v8 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v13->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
      }
      unint64_t v9 = v7 + 1;
    }
    unint64_t v13 = v9;
  }
  if (*(char *)(v12 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(a1, *(const std::string::value_type **)(v12 + 72), *(void *)(v12 + 80));
  }
  else
  {
    long long v10 = *(_OWORD *)(v12 + 72);
    a1->__r_.__value_.__r.__words[2] = *(void *)(v12 + 88);
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v10;
  }
  unint64_t v22 = (void **)&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v22);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v16[0] = *MEMORY[0x263F8C2B8];
  uint64_t v11 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(uint64_t *)((char *)v16 + *(void *)(v16[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v16[2] = v11;
  v16[3] = MEMORY[0x263F8C318] + 16;
  if (v17 < 0) {
    operator delete((void *)v16[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x223C937D0](&v18);
  if (v19)
  {
    unint64_t v20 = v19;
    operator delete(v19);
  }
}

void sub_221EA0760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  *(void *)(v18 - 56) = &a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v18 - 56));
  if (a17 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a18);
  unint64_t v20 = *(void **)(v18 - 88);
  if (v20)
  {
    *(void *)(v18 - 80) = v20;
    operator delete(v20);
  }
  _Unwind_Resume(a1);
}

uint64_t std::vector<Phase::Controller::DspNodeVoice>::__push_back_slow_path<Phase::Controller::DspNodeVoice>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = 0x4EC4EC4EC4EC4EC5 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x276276276276276) {
    std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
  }
  if (0x9D89D89D89D89D8ALL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x9D89D89D89D89D8ALL * ((a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((a1[2] - *a1) >> 3)) >= 0x13B13B13B13B13BLL) {
    unint64_t v6 = 0x276276276276276;
  }
  else {
    unint64_t v6 = v4;
  }
  unint64_t v14 = a1 + 2;
  if (v6) {
    uint64_t v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Controller::DspNodeVoice>>((uint64_t)(a1 + 2), v6);
  }
  else {
    uint64_t v7 = 0;
  }
  long long v10 = v7;
  uint64_t v11 = &v7[104 * v3];
  unint64_t v13 = &v7[104 * v6];
  std::allocator<Phase::Controller::DspNodeVoice>::construct[abi:ne180100]<Phase::Controller::DspNodeVoice,Phase::Controller::DspNodeVoice>((uint64_t)(a1 + 2), v11, a2);
  uint64_t v12 = v11 + 104;
  std::vector<Phase::Controller::DspNodeVoice>::__swap_out_circular_buffer(a1, &v10);
  uint64_t v8 = a1[1];
  std::__split_buffer<Phase::Controller::DspNodeVoice>::~__split_buffer(&v10);
  return v8;
}

void sub_221EA08F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<Phase::Controller::DspNodeVoice>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

__n128 std::allocator<Phase::Controller::DspNodeVoice>::construct[abi:ne180100]<Phase::Controller::DspNodeVoice,Phase::Controller::DspNodeVoice>(uint64_t a1, void *a2, uint64_t a3)
{
  *a2 = *(void *)a3;
  a2[1] = 0;
  a2[2] = 0;
  a2[3] = 0;
  *(_OWORD *)(a2 + 1) = *(_OWORD *)(a3 + 8);
  a2[3] = *(void *)(a3 + 24);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  a2[4] = 0;
  a2[5] = 0;
  a2[6] = 0;
  *((_OWORD *)a2 + 2) = *(_OWORD *)(a3 + 32);
  a2[6] = *(void *)(a3 + 48);
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 48) = 0;
  a2[7] = 0;
  a2[8] = 0;
  a2[9] = 0;
  *(_OWORD *)(a2 + 7) = *(_OWORD *)(a3 + 56);
  a2[9] = *(void *)(a3 + 72);
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 64) = 0;
  *(void *)(a3 + 72) = 0;
  a2[10] = 0;
  a2[11] = 0;
  a2[12] = 0;
  __n128 result = *(__n128 *)(a3 + 80);
  *((__n128 *)a2 + 5) = result;
  a2[12] = *(void *)(a3 + 96);
  *(void *)(a3 + 80) = 0;
  *(void *)(a3 + 88) = 0;
  *(void *)(a3 + 96) = 0;
  return result;
}

uint64_t std::vector<Phase::Controller::DspNodeVoice>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<Phase::Controller::DspNodeVoice>,std::reverse_iterator<Phase::Controller::DspNodeVoice*>,std::reverse_iterator<Phase::Controller::DspNodeVoice*>,std::reverse_iterator<Phase::Controller::DspNodeVoice*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Controller::DspNodeVoice>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x276276276276277) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(104 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<Phase::Controller::DspNodeVoice>,std::reverse_iterator<Phase::Controller::DspNodeVoice*>,std::reverse_iterator<Phase::Controller::DspNodeVoice*>,std::reverse_iterator<Phase::Controller::DspNodeVoice*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  void v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 104;
      std::allocator<Phase::Controller::DspNodeVoice>::construct[abi:ne180100]<Phase::Controller::DspNodeVoice,Phase::Controller::DspNodeVoice>(a1, (void *)(v7 - 104), v9);
      uint64_t v7 = *((void *)&v16 + 1) - 104;
      *((void *)&v16 + 1) -= 104;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Phase::Controller::DspNodeVoice>,std::reverse_iterator<Phase::Controller::DspNodeVoice*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Phase::Controller::DspNodeVoice>,std::reverse_iterator<Phase::Controller::DspNodeVoice*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<Phase::Controller::DspNodeVoice>,std::reverse_iterator<Phase::Controller::DspNodeVoice*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<Phase::Controller::DspNodeVoice>,std::reverse_iterator<Phase::Controller::DspNodeVoice*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<Phase::Controller::DspNodeVoice>::destroy[abi:ne180100](v3, v1);
      v1 += 104;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<Phase::Controller::DspNodeVoice>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<Phase::Controller::DspNodeVoice>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 104;
    std::allocator<Phase::Controller::DspNodeVoice>::destroy[abi:ne180100](v4, i - 104);
  }
}

void std::__shared_ptr_emplace<Phase::DspLayer::VoiceBuffer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D472558;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Phase::DspLayer::VoiceBuffer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D472558;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C938A0);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Phase::Controller::VoiceBufferParameter>,Phase::Controller::VoiceBufferParameter*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<Phase::Controller::VoiceBufferParameter>,Phase::Controller::VoiceBufferParameter*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<Phase::Controller::VoiceBufferParameter>,Phase::Controller::VoiceBufferParameter*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 - 16);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    v1 -= 32;
  }
}

void Phase::Controller::ExternalOutputPullStreamSampler::ResumeStream(Phase::Controller::ExternalOutputPullStreamSampler *this)
{
  *((unsigned char *)this + 592) = 0;
  int v2 = *((_DWORD *)this + 94);
  if (v2 == 2)
  {
    if (*((unsigned char *)this + 593)) {
      goto LABEL_11;
    }
    if (*((unsigned char *)this + 512))
    {
      int v4 = *((_DWORD *)this + 95);
      if (v4 == 1)
      {
        Phase::Controller::DVM::VoiceGraph::SetGeneratorPlayState(*(Phase::Controller::DVM::VoiceGraph **)(**((void **)this + 4) + 72), *((void *)this + 29), *((void *)this + 30), 3);
      }
      else if (!v4)
      {
        Phase::Controller::ExternalOutputPullStreamSampler::StartVoices(this, *((double *)this + 46));
      }
    }
    if (*((unsigned char *)this + 593)) {
LABEL_11:
    }
      char v3 = 1;
    else {
      char v3 = *((unsigned char *)this + 592) != 0;
    }
  }
  else
  {
    if (v2 != 1) {
      return;
    }
    char v3 = *((unsigned char *)this + 593);
  }
  *((unsigned char *)this + 512) = v3;
}

void Phase::Controller::ExternalOutputPullStreamSampler::StartVoices(Phase::Controller::ExternalOutputPullStreamSampler *this, double a2)
{
  Phase::Controller::Generator::StartVoices(this, a2);
  char v3 = (void *)*((void *)this + 75);
  id v4 = (id)[objc_alloc(MEMORY[0x263F08C38]) initWithUUIDBytes:(char *)this + 608];
  objc_msgSend(v3, "updateController:pauseState:");
}

void sub_221EA0E24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::ExternalOutputPullStreamSampler::PauseStream(uint64_t this)
{
  *(unsigned char *)(this + 592) = 1;
  if ((*(_DWORD *)(this + 376) - 1) <= 1)
  {
    uint64_t v1 = this;
    if (!*(unsigned char *)(this + 512) && *(_DWORD *)(this + 380) == 1) {
      this = Phase::Controller::DVM::VoiceGraph::SetGeneratorPlayState(*(Phase::Controller::DVM::VoiceGraph **)(**(void **)(this + 32) + 72), *(void *)(this + 232), *(void *)(this + 240), 2);
    }
    *(unsigned char *)(v1 + 512) = 1;
  }
  return this;
}

void Phase::Controller::ExternalOutputPullStreamSampler::StopVoices(Phase::Controller::ExternalOutputPullStreamSampler *this)
{
  Phase::Controller::Generator::StopVoices(this);
  int v2 = (void *)*((void *)this + 75);
  id v3 = (id)[objc_alloc(MEMORY[0x263F08C38]) initWithUUIDBytes:(char *)this + 608];
  objc_msgSend(v2, "updateController:pauseState:");
}

void sub_221EA0F18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void Phase::Controller::ExternalOutputPullStreamSampler::Play(Phase::Controller::ExternalOutputPullStreamSampler *this)
{
  int v2 = *((_DWORD *)this + 94);
  if (v2 == 2)
  {
    *((unsigned char *)this + 593) = 0;
    if (*((unsigned char *)this + 592))
    {
      char v3 = 1;
    }
    else
    {
      char v3 = *((unsigned char *)this + 512);
      if (v3)
      {
        Phase::Controller::ExternalOutputPullStreamSampler::StartVoices(this, *((double *)this + 46));
        char v3 = 0;
      }
    }
  }
  else
  {
    if (v2 != 1) {
      return;
    }
    *((unsigned char *)this + 593) = 0;
    char v3 = *((unsigned char *)this + 592);
  }
  *((unsigned char *)this + 512) = v3;
}

void Phase::Controller::ExternalOutputPullStreamSampler::Pause(Phase::Controller::ExternalOutputPullStreamSampler *this)
{
  if ((*((_DWORD *)this + 94) - 1) <= 1)
  {
    *((unsigned char *)this + 593) = 1;
    if (!*((unsigned char *)this + 512) && *((_DWORD *)this + 95) == 1)
    {
      Phase::Controller::DVM::VoiceGraph::SetGeneratorPlayState(*(Phase::Controller::DVM::VoiceGraph **)(**((void **)this + 4) + 72), *((void *)this + 29), *((void *)this + 30), 2);
      int v2 = (void *)*((void *)this + 75);
      char v3 = (void *)[objc_alloc(MEMORY[0x263F08C38]) initWithUUIDBytes:(char *)this + 608];
      [v2 updateController:v3 pauseState:1];
    }
    *((unsigned char *)this + 512) = 1;
  }
}

void sub_221EA1044(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void Phase::Controller::ExternalOutputPullStreamSampler::Resume(Phase::Controller::ExternalOutputPullStreamSampler *this)
{
  if ((*((_DWORD *)this + 94) - 1) <= 1)
  {
    *((unsigned char *)this + 593) = 0;
    char v2 = *((unsigned char *)this + 592);
    if (!v2 && *((unsigned char *)this + 512) && *((_DWORD *)this + 95) == 1)
    {
      Phase::Controller::DVM::VoiceGraph::SetGeneratorPlayState(*(Phase::Controller::DVM::VoiceGraph **)(**((void **)this + 4) + 72), *((void *)this + 29), *((void *)this + 30), 3);
      char v3 = (void *)*((void *)this + 75);
      id v4 = (void *)[objc_alloc(MEMORY[0x263F08C38]) initWithUUIDBytes:(char *)this + 608];
      [v3 updateController:v4 pauseState:0];
    }
    *((unsigned char *)this + 512) = v2;
  }
}

void sub_221EA1104(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void Phase::Controller::ExternalOutputPullStreamSampler::~ExternalOutputPullStreamSampler(id *this)
{
  Phase::Controller::StreamSamplerBase::~StreamSamplerBase((Phase::Controller::StreamSamplerBase *)this);
}

{
  uint64_t vars8;

  Phase::Controller::StreamSamplerBase::~StreamSamplerBase((Phase::Controller::StreamSamplerBase *)this);

  JUMPOUT(0x223C938A0);
}

void Phase::Controller::FileSampler::FileSampler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  Phase::Controller::SamplerBase::SamplerBase(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
}

void sub_221EA15B8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  Phase::Controller::SamplerBase::~SamplerBase(v1);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::TaskManager::GetService<Phase::Controller::VoicePoolRegistry>(Phase::Logger *a1, int a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v3 = *((void *)a1 + 6);
  if (a2 >= (unint64_t)((*((void *)a1 + 7) - v3) >> 5))
  {
    uint64_t v7 = **(id **)(Phase::Logger::GetInstance(a1) + 448);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      char v14 = "TaskManager.hpp";
      __int16 v15 = 1024;
      int v16 = 112;
      _os_log_impl(&dword_221E5E000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: pId < mServiceRegistry.size() is false.", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](exception, "PRECONDITION: pId < mServiceRegistry.size() is false.");
  }
  id v4 = (Phase::Logger *)(v3 + 32 * a2);
  if (!*(void *)v4)
  {
    uint64_t v9 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v4)
                                                                                       + 448)));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      Phase::GetBacktraceFrame<1ul>(&__p);
      long long v10 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315906;
      char v14 = "TaskManager.hpp";
      __int16 v15 = 1024;
      int v16 = 121;
      __int16 v17 = 1024;
      int v18 = a2;
      __int16 v19 = 2080;
      unint64_t v20 = v10;
      _os_log_impl(&dword_221E5E000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::domain_error) [not lService.has_value() is true]: \"No service registered for Id %i, in call \\n%s\"", buf, 0x22u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }

    uint64_t v11 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](v11, "No service registered for Id %i, in call \n%s");
  }
  uint64_t v5 = std::any_cast[abi:ne180100]<Phase::Controller::VoicePoolRegistry * const>((uint64_t (**)(uint64_t, void, void, void, void *))v4);
  if (!v5) {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  return (uint64_t)*v5;
}

void sub_221EA1828(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_221EA1938(_Unwind_Exception *a1)
{
}

void sub_221EA1958(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void Phase::Controller::FileSampler::~FileSampler(Phase::Controller::FileSampler *this)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  char v2 = **(id **)(Phase::Logger::GetInstance(this) + 384);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *((void *)this + 29);
    uint64_t v4 = *((void *)this + 50);
    uint64_t v5 = *((void *)this + 70);
    int v6 = 136316418;
    uint64_t v7 = "CvmFileSampler.mm";
    __int16 v8 = 1024;
    int v9 = 71;
    __int16 v10 = 2048;
    uint64_t v11 = this;
    __int16 v12 = 2048;
    uint64_t v13 = v3;
    __int16 v14 = 2048;
    uint64_t v15 = v4;
    __int16 v16 = 2048;
    uint64_t v17 = v5;
    _os_log_impl(&dword_221E5E000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d impl@%p: destroyed file sampler with generatorId %llu on submixId %llu with audio file assetId: (%llu)", (uint8_t *)&v6, 0x3Au);
  }
  Phase::Controller::SamplerBase::~SamplerBase((void **)this);
}

{
  uint64_t vars8;

  Phase::Controller::FileSampler::~FileSampler(this);

  JUMPOUT(0x223C938A0);
}

void sub_221EA1A70(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t Phase::Controller::FileSampler::InternalPrepare(Phase::Controller::FileSampler *this, double a2)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  uint64_t v3 = (Phase::Logger *)(*(void *(**)(double *__return_ptr, double))(**((void **)this + 5) + 40))(&v23, a2);
  if (v27) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = (v25 & 0x20) == 0;
  }
  if (v4 && v23 > 0.0)
  {
    uint64_t v5 = *(unsigned int *)v28;
    if (v5 != (unint64_t)(v29 - (unsigned char *)v28 - 8) >> 4) {
      __assert_rtn("GetNumberBuffers", "CoreAudioBaseTypes.hpp", 1096, "GetAudioBufferList().mNumberBuffers == (mStorage.size() - kHeaderSize) / sizeof(AudioBuffer)");
    }
    if (v5 && v30)
    {
      uint64_t v6 = 0;
      uint64_t v7 = 16 * v5;
      while (*(void *)((char *)v28 + v6 + 16) && *(_DWORD *)((char *)v28 + v6 + 12) >= (v26 * v30))
      {
        v6 += 16;
        if (v7 == v6)
        {
          BOOL v9 = (v25 & 1) == 0 || v24 != 1819304813;
          if ((v25 & 0x20) != 0 || v9)
          {
            if (v9) {
              break;
            }
          }
          else if (v27 != 1)
          {
            break;
          }
          Phase::Controller::SamplerBase::AssignVoiceBuffers(this, (const AudioBufferList *)v28, v30);
          unsigned int v19 = v30;
          *((void *)this + 71) = v30;
          double v20 = v23;
          *((double *)this + 72) = v23;
          *((double *)this + 73) = (double)v19 / v20;
          uint64_t v17 = 1;
          goto LABEL_30;
        }
      }
    }
  }
  __int16 v10 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v3)
                                                                                      + 384)));
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    uint64_t v12 = *((void *)this + 52);
    uint64_t v13 = *((void *)this + 50);
    uint64_t v14 = *((void *)this + 29);
    uint64_t v15 = *((void *)this + 70);
    CA::StreamDescription::AsString((CA::StreamDescription *)&v23, (uint64_t)__p, v11);
    __int16 v16 = v22 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136316674;
    uint64_t v32 = "CvmFileSampler.mm";
    __int16 v33 = 1024;
    int v34 = 93;
    __int16 v35 = 2048;
    uint64_t v36 = v12;
    __int16 v37 = 2048;
    uint64_t v38 = v13;
    __int16 v39 = 2048;
    uint64_t v40 = v14;
    __int16 v41 = 2048;
    uint64_t v42 = v15;
    __int16 v43 = 2080;
    unint64_t v44 = v16;
    _os_log_impl(&dword_221E5E000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d (sound event: %llu, submix: %llu, generator: %llu) - prepare failed (info for asset: %llx was either not found, or has an invalid format: %s", buf, 0x44u);
    if (v22 < 0) {
      operator delete(__p[0]);
    }
  }

  uint64_t v17 = 0;
LABEL_30:
  if (v28)
  {
    uint64_t v29 = v28;
    operator delete(v28);
  }
  return v17;
}

void sub_221EA1D50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Phase::Controller::FileSampler::InternalConfigureDspGenerator(Phase::Controller::FileSampler *this)
{
  uint64_t v1 = *((void *)this + 4);
  unint64_t v2 = *((void *)this + 29);
  unint64_t v3 = *((void *)this + 30);
  BOOL v4 = (char *)*((void *)this + 23);
  memset(v5, 0, sizeof(v5));
  Phase::Controller::DVM::VoiceGraph::ConfigureGeneratorWithRenderCallback(*(void *)(*(void *)v1 + 72), v2, v3, 1, v4, v5, 0);
  uint64_t v6 = (void **)v5;
  std::vector<Phase::Controller::DspNode>::__destroy_vector::operator()[abi:ne180100](&v6);
}

void sub_221EA1DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<Phase::Controller::DspNode>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

double Phase::Controller::FileSampler::GetAnchorTimeForWakeFromSleepInSeconds(Phase::Controller::FileSampler *this, PHASECullOption a2, double a3)
{
  if (a2 != PHASECullOptionSleepWakeAtRandomOffset) {
    return 0.0;
  }
  double v3 = *((double *)this + 73);
  uint64_t v4 = *((void *)this + 74);
  unint64_t v5 = *((void *)this + 75);
  *((void *)this + 74) = v5;
  unint64_t v6 = (v5 >> 26) ^ ((v4 ^ (unint64_t)(v4 << 23)) >> 17) ^ v5 ^ v4 ^ (v4 << 23);
  *((void *)this + 75) = v6;
  return v3 * ((double)(v6 + v5) * 5.42101086e-20) + 0.0;
}

void Phase::Controller::FileSampler::SeekTime(Phase::Controller::FileSampler *this, double a2)
{
  if (*((void *)this + 69) || *((double *)this + 73) > a2)
  {
    unsigned int v4 = *((_DWORD *)this + 94);
    if (v4 >= 2)
    {
      if (v4 - 3 < 2)
      {
        unint64_t v5 = *(void (**)(void))(**((void **)this + 5) + 32);
        v5();
        return;
      }
      if (v4 != 2) {
        return;
      }
      int v6 = *((_DWORD *)this + 127);
      if ((v6 - 1) >= 2)
      {
        if (v6)
        {
LABEL_13:
          *((double *)this + 46) = a2;
          return;
        }
        Phase::Controller::Generator::SetParameter(this, 0x5FB837590D112C13uLL, a2 - *((double *)this + 73) * floor(a2 / *((double *)this + 73)), 1);
      }
    }
    (*(void (**)(void, void, void, void))(**((void **)this + 5) + 32))(*((void *)this + 5), *((void *)this + 29), *((void *)this + 30), 0);
    goto LABEL_13;
  }
  (*(void (**)(void, void, void, void))(**((void **)this + 5) + 32))(*((void *)this + 5), *((void *)this + 29), *((void *)this + 30), 0);

  Phase::Controller::Generator::Stop(this);
}

void Phase::Controller::FileSampler::InternalSeekDVM(Phase::Controller::FileSampler *this, double a2)
{
}

uint64_t Phase::Controller::Generator::AsExternalOutputPullStreamSampler(Phase::Controller::Generator *this)
{
  return 0;
}

uint64_t (**std::any_cast[abi:ne180100]<Phase::Controller::VoicePoolRegistry * const>(uint64_t (**result)(uint64_t, void, void, void, void *)))(uint64_t, void, void, void, void *)
{
  if (result)
  {
    if (*result) {
      return (uint64_t (**)(uint64_t, void, void, void, void *))(*result)(3, result, 0, 0, &std::__any_imp::__unique_typeinfo<Phase::Controller::VoicePoolRegistry *>::__id);
    }
    else {
      return 0;
    }
  }
  return result;
}

void Phase::Controller::FileStreamSampler::SeekTime(Phase::Controller::FileStreamSampler *this, double a2)
{
  uint64_t v4 = (*(uint64_t (**)(void, void, void, void))(**((void **)this + 5) + 48))(*((void *)this + 5), *((void *)this + 29), *((void *)this + 30), *((void *)this + 69));
  if (v4)
  {
    (*(void (**)(void, void, void, uint64_t))(**((void **)this + 5) + 32))(*((void *)this + 5), *((void *)this + 29), *((void *)this + 30), v4);
    Phase::Controller::Generator::Stop(this);
  }
  else if ((*((_DWORD *)this + 94) - 3) > 1)
  {
    (*(void (**)(void, void, void, void))(**((void **)this + 5) + 32))(*((void *)this + 5), *((void *)this + 29), *((void *)this + 30), 0);
    *((double *)this + 46) = a2;
  }
  else
  {
    unint64_t v5 = *(void (**)(void))(**((void **)this + 5) + 32);
    v5();
  }
}

void Phase::Controller::FileStreamSampler::~FileStreamSampler(Phase::Controller::FileStreamSampler *this)
{
  Phase::Controller::StreamSamplerBase::~StreamSamplerBase(this);

  JUMPOUT(0x223C938A0);
}

uint64_t Phase::Controller::Generator::Generator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v85 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26D472740;
  *(void *)(a1 + 8) = a9;
  *(void *)(a1 + 16) = a11;
  *(void *)(a1 + 24) = a12;
  *(void *)(a1 + 32) = a13;
  *(void *)(a1 + 40) = a14;
  int v22 = *(_DWORD *)(a8 + 48);
  std::vector<char>::value_type __x = 0;
  std::vector<char>::vector((std::vector<char> *)v70, 0x20uLL, &__x);
  double v23 = *(_DWORD **)v70;
  *(_DWORD *)(*(void *)v70 + 4) = 0;
  v23[2] = 0;
  _DWORD *v23 = v22;
  Phase::ChannelLayout::ReduceLayout((const void **)v70, *(void *)(a8 + 56), (std::vector<char> *)(a1 + 48));
  int v24 = *(Phase::Logger **)v70;
  if (*(void *)v70)
  {
    *(void *)&v70[8] = *(void *)v70;
    operator delete(*(void **)v70);
  }
  uint64_t v25 = *(void *)(a8 + 56);
  *(_OWORD *)(a1 + 248) = 0u;
  *(void *)(a1 + 72) = v25;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 1065353216;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_DWORD *)(a1 + 152) = 1065353216;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(void *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 200) = xmmword_2220A5200;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = a10;
  *(void *)(a1 + 232) = a2;
  *(void *)(a1 + 240) = a3;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_DWORD *)(a1 + 280) = 1065353216;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0x3FF0000000000000;
  __asm { FMOV            V1.2D, #1.0 }
  *(_OWORD *)(a1 + 304) = _Q1;
  *(unsigned char *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0x3FF0000000000000;
  long long v67 = _Q1;
  *(_OWORD *)(a1 + 336) = _Q1;
  *(void *)(a1 + 352) = 0x3FF0000000000000;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  *(unsigned char *)(a1 + 384) = 1;
  *(_DWORD *)(a1 + 388) = 0;
  *(unsigned char *)(a1 + 392) = 0;
  *(void *)(a1 + 400) = a4;
  *(void *)(a1 + 408) = a5;
  *(void *)(a1 + 416) = a6;
  *(void *)(a1 + 424) = a7;
  *(void *)(a1 + 432) = 0xFFFF00000000;
  *(_DWORD *)(a1 + 440) = 0;
  *(unsigned char *)(a1 + 504) = 0;
  *(_DWORD *)(a1 + 508) = 0;
  *(_WORD *)(a1 + 512) = 0;
  *(void *)(a1 + 520) = 0;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_DWORD *)(a1 + 496) = 0;
  unint64_t v31 = *(_DWORD **)(a1 + 48);
  if (*v31 == 0x10000)
  {
    uint8x8_t v33 = (uint8x8_t)vcnt_s8((int8x8_t)v31[1]);
    v33.i16[0] = vaddlv_u8(v33);
    __int32 v32 = v33.i32[0];
  }
  else if (*v31)
  {
    __int32 v32 = (unsigned __int16)*v31;
  }
  else
  {
    __int32 v32 = v31[2];
  }
  if (!v32)
  {
    uint64_t v60 = **(id **)(Phase::Logger::GetInstance(v24) + 384);
    if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v70 = 136315394;
      *(void *)&v70[4] = "CvmGenerator.mm";
      *(_WORD *)&v70[12] = 1024;
      *(_DWORD *)&v70[14] = 180;
      _os_log_impl(&dword_221E5E000, v60, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: mChannelLayout.GetNumberChannels() > 0 is false.", v70, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "PRECONDITION: mChannelLayout.GetNumberChannels() > 0 is false.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
  }
  Phase::BitBlockAllocator<Phase::SystemAllocator>::Initialize(a1 + 432, 16, 56, *(void *)(a1 + 8), (uint64_t)"Effect Allocator");
  *(_OWORD *)uint64_t v70 = xmmword_2220A5210;
  *(_OWORD *)&v70[16] = v67;
  v70[32] = 0;
  int v34 = std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&,Phase::Controller::Parameter<double>>(a1 + 248, qword_2645F7060, qword_2645F7060, (uint64_t)v70);
  if (!v35)
  {
    std::string v62 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)v34) + 384);
    if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v70 = 136315650;
      *(void *)&v70[4] = "CvmGenerator.mm";
      *(_WORD *)&v70[12] = 1024;
      *(_DWORD *)&v70[14] = 188;
      *(_WORD *)&v70[18] = 2048;
      *(void *)&v70[20] = 0x981F232BD33EC927;
      _os_log_impl(&dword_221E5E000, v62, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [!pair.second is true]: \"Failed to insert %llu parameter\"", v70, 0x1Cu);
    }
LABEL_45:
    double v66 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v66, "Failed to insert %llu parameter");
  }
  *(void *)uint64_t v70 = 0;
  *(_OWORD *)&v70[8] = v67;
  *(void *)&v70[24] = 0x3FF0000000000000;
  v70[32] = 0;
  uint64_t v36 = std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&,Phase::Controller::Parameter<double>>(a1 + 248, qword_2645F7090, qword_2645F7090, (uint64_t)v70);
  if (!v37)
  {
    uint64_t v63 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)v36) + 384);
    if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v70 = 136315650;
      *(void *)&v70[4] = "CvmGenerator.mm";
      *(_WORD *)&v70[12] = 1024;
      *(_DWORD *)&v70[14] = 191;
      *(_WORD *)&v70[18] = 2048;
      *(void *)&v70[20] = 0xB5767F7E05AD941ELL;
      _os_log_impl(&dword_221E5E000, v63, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [!pair.second is true]: \"Failed to insert %llu parameter\"", v70, 0x1Cu);
    }
    goto LABEL_45;
  }
  *(void *)uint64_t v70 = 0;
  *(_OWORD *)&v70[8] = v67;
  *(void *)&v70[24] = 0x3FF0000000000000;
  v70[32] = 0;
  uint64_t v38 = std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&,Phase::Controller::Parameter<double>>(a1 + 248, qword_2645F70C0, qword_2645F70C0, (uint64_t)v70);
  if (!v39)
  {
    char v64 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)v38) + 384);
    if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v70 = 136315650;
      *(void *)&v70[4] = "CvmGenerator.mm";
      *(_WORD *)&v70[12] = 1024;
      *(_DWORD *)&v70[14] = 195;
      *(_WORD *)&v70[18] = 2048;
      *(void *)&v70[20] = 0x81FBB92FC0173ECLL;
      _os_log_impl(&dword_221E5E000, v64, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [!pair.second is true]: \"Failed to insert %llu parameter\"", v70, 0x1Cu);
    }
    goto LABEL_45;
  }
  *(void *)uint64_t v70 = 0;
  *(_OWORD *)&v70[8] = v67;
  *(void *)&v70[24] = 0x3FF0000000000000;
  v70[32] = 0;
  uint64_t v40 = std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&,Phase::Controller::Parameter<double>>(a1 + 248, qword_2645F70F0, qword_2645F70F0, (uint64_t)v70);
  if (!v41)
  {
    double v65 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)v40) + 384);
    if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v70 = 136315650;
      *(void *)&v70[4] = "CvmGenerator.mm";
      *(_WORD *)&v70[12] = 1024;
      *(_DWORD *)&v70[14] = 199;
      *(_WORD *)&v70[18] = 2048;
      *(void *)&v70[20] = 0x8119B92FBF50030;
      _os_log_impl(&dword_221E5E000, v65, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [!pair.second is true]: \"Failed to insert %llu parameter\"", v70, 0x1Cu);
    }
    goto LABEL_45;
  }
  *(void *)(a1 + 192) = *(void *)(a8 + 16);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a8 + 24);
  *(void *)(a1 + 216) = *(void *)(a8 + 40);
  uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance((Phase::Logger *)v40);
  if (*((unsigned char *)Instance + 1556))
  {
    __int16 v43 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(Instance)
                                                                                        + 384)));
    if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v44 = *(int *)(a1 + 376);
      if (v44 > 4) {
        uint64_t v45 = "<not found>";
      }
      else {
        uint64_t v45 = off_2645F7140[v44];
      }
      uint64_t v68 = v45;
      uint64_t v46 = *(int *)(a1 + 380);
      if (v46 > 2) {
        unint64_t v47 = "<not found>";
      }
      else {
        unint64_t v47 = off_2645F7180[v46];
      }
      uint64_t v48 = *(int *)(a1 + 508);
      unint64_t v49 = "<not found>";
      __int16 v50 = "<not found>";
      if (v48 <= 2) {
        __int16 v50 = off_2645F7168[v48];
      }
      uint64_t v51 = *(void *)(a1 + 416);
      uint64_t v52 = *(void *)(a1 + 400);
      uint64_t v53 = *(void *)(a1 + 232);
      int v54 = *(_DWORD *)(a1 + 388);
      if (v54 == 1) {
        unint64_t v49 = "interrupted";
      }
      if (v54) {
        uint64_t v55 = v49;
      }
      else {
        uint64_t v55 = "active";
      }
      GetCalibrationModeString(*(PHASECalibrationMode *)(a1 + 192));
      id v56 = objc_claimAutoreleasedReturnValue();
      uint64_t v57 = [v56 UTF8String];
      uint64_t v58 = *(void *)(a1 + 200);
      *(_DWORD *)uint64_t v70 = 136317698;
      *(void *)&v70[4] = "CvmGenerator.mm";
      *(_WORD *)&v70[12] = 1024;
      *(_DWORD *)&v70[14] = 214;
      *(_WORD *)&v70[18] = 2048;
      *(void *)&v70[20] = v51;
      *(_WORD *)&v70[28] = 2048;
      *(void *)&v70[30] = v52;
      __int16 v71 = 2048;
      uint64_t v72 = v53;
      __int16 v73 = 2080;
      unint64_t v74 = v68;
      __int16 v75 = 2080;
      size_t v76 = v47;
      __int16 v77 = 2080;
      char v78 = v50;
      __int16 v79 = 2080;
      uint64_t v80 = v55;
      __int16 v81 = 2080;
      uint64_t v82 = v57;
      __int16 v83 = 2048;
      uint64_t v84 = v58;
      _os_log_impl(&dword_221E5E000, v43, OS_LOG_TYPE_DEFAULT, "%25s:%-5d (sound event: %llu, submix: %llu, generator: %llu) - created (state: %s, voice state: %s, sleep state: %s, session state: %s, calibration mode: %s, level: %f", v70, 0x6Cu);
    }
  }
  return a1;
}

void sub_221EA2A3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  __cxa_free_exception(v21);
  Phase::BitBlockAllocator<Phase::SystemAllocator>::Destroy(a14);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(v22);
  uint64_t v24 = *(void *)(v20 + 184);
  *(void *)(v20 + 184) = 0;
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
  }
  a19 = a10;
  std::vector<Phase::Controller::VoiceData>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(a11);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(a12);
  uint64_t v25 = *a13;
  if (*a13)
  {
    *(void *)(v20 + 56) = v25;
    operator delete(v25);
  }
  _Unwind_Resume(a1);
}

void Phase::Controller::Generator::~Generator(Phase::Controller::Generator *this)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  *(void *)this = &unk_26D472740;
  if (*((_DWORD *)this + 94) != 4)
  {
    unint64_t v2 = **(id **)(Phase::Logger::GetInstance(this) + 384);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int16 v10 = 136315394;
      *(void *)&v10[4] = "CvmGenerator.mm";
      __int16 v11 = 1024;
      int v12 = 223;
      _os_log_impl(&dword_221E5E000, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d Generator was destroyed prematurely, cleaning up", v10, 0x12u);
    }
    Phase::Controller::Generator::Finish(this);
  }
  uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance(this);
  if (*((unsigned char *)Instance + 1556))
  {
    uint64_t v4 = **(id **)(Phase::Logger::GetInstance(Instance) + 384);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *((void *)this + 52);
      uint64_t v6 = *((void *)this + 50);
      uint64_t v7 = *((void *)this + 29);
      *(_DWORD *)__int16 v10 = 136316162;
      *(void *)&v10[4] = "CvmGenerator.mm";
      __int16 v11 = 1024;
      int v12 = 230;
      __int16 v13 = 2048;
      uint64_t v14 = v5;
      __int16 v15 = 2048;
      uint64_t v16 = v6;
      __int16 v17 = 2048;
      uint64_t v18 = v7;
      _os_log_impl(&dword_221E5E000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d (sound event: %llu, submix: %llu, generator: %llu) - destroyed", v10, 0x30u);
    }
  }
  Phase::BitBlockAllocator<Phase::SystemAllocator>::Destroy((uint64_t)this + 432);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)this + 248);
  uint64_t v8 = *((void *)this + 23);
  *((void *)this + 23) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  *(void *)__int16 v10 = (char *)this + 160;
  std::vector<Phase::Controller::VoiceData>::__destroy_vector::operator()[abi:ne180100]((void ***)v10);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)this + 120);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)this + 80);
  BOOL v9 = (void *)*((void *)this + 6);
  if (v9)
  {
    *((void *)this + 7) = v9;
    operator delete(v9);
  }
}

void sub_221EA2D54(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void Phase::Controller::Generator::Finish(Phase::Controller::Generator *this)
{
  if (*((_DWORD *)this + 94) != 4)
  {
    Phase::Controller::DVM::VoiceGraph::RemoveGenerator(*(Phase::Controller::DVM::VoiceGraph **)(**((void **)this + 4) + 72), *((void *)this + 29), *((void *)this + 30));
    uint64_t v2 = *((void *)this + 20);
    uint64_t v3 = *((void *)this + 21);
    while (v2 != v3)
    {
      std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear((void *)(v2 + 16));
      std::vector<Phase::Controller::VoiceBufferParameter>::__clear[abi:ne180100]((uint64_t *)(v2 + 56));
      v2 += 96;
    }
    (*(void (**)(void, void, void, char *))(**((void **)this + 5) + 24))(*((void *)this + 5), *((void *)this + 29), *((void *)this + 30), (char *)this + 520);
    Phase::Controller::Generator::SetState((uint64_t)this, 4u);
  }
}

void Phase::Controller::Generator::Prepare(Phase::Controller::Generator *this, double a2)
{
  if ((*(unsigned int (**)(Phase::Controller::Generator *, double))(*(void *)this + 80))(this, a2))
  {
    *((void *)this + 46) = 0;
    *((unsigned char *)this + 512) = 1;
    Phase::Controller::Generator::SetState((uint64_t)this, 1u);
    for (uint64_t i = *((void *)this + 20); i != *((void *)this + 21); i += 96)
    {
      if (*(void *)(i + 64) != *(void *)(i + 56))
      {
        uint64_t v4 = *((void *)this + 23);
        uint64_t v5 = *(void *)(v4 + 16);
        uint64_t v6 = *(void *)(v4 + 24);
        while (v5 != v6)
        {
          uint64_t v7 = *(void *)(v5 + 8);
          if (v7 == *(void *)(v5 + 16) || (uint64_t v8 = *(void **)(v7 + 8)) == 0 || !*v8) {
            std::terminate();
          }
          v5 += 104;
        }
      }
    }
  }
  else
  {
    Phase::Controller::Generator::Finish(this);
  }
}

void Phase::Controller::Generator::SetState(uint64_t a1, unsigned int a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance((Phase::Logger *)a1);
  if (*((unsigned char *)Instance + 1556))
  {
    uint64_t v5 = **(id **)(Phase::Logger::GetInstance(Instance) + 384);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(int *)(a1 + 376);
      if (v6 > 4) {
        uint64_t v7 = "<not found>";
      }
      else {
        uint64_t v7 = off_2645F7140[v6];
      }
      uint64_t v8 = *(void *)(a1 + 416);
      uint64_t v9 = *(void *)(a1 + 400);
      uint64_t v10 = *(void *)(a1 + 232);
      if (a2 > 4) {
        __int16 v11 = "<not found>";
      }
      else {
        __int16 v11 = off_2645F7140[a2];
      }
      int v12 = 136316674;
      __int16 v13 = "CvmGenerator.mm";
      __int16 v14 = 1024;
      int v15 = 1159;
      __int16 v16 = 2048;
      uint64_t v17 = v8;
      __int16 v18 = 2048;
      uint64_t v19 = v9;
      __int16 v20 = 2048;
      uint64_t v21 = v10;
      __int16 v22 = 2080;
      double v23 = v7;
      __int16 v24 = 2080;
      uint64_t v25 = v11;
      _os_log_impl(&dword_221E5E000, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d (sound event: %llu, submix: %llu, generator: %llu) - state changed from '%s' to '%s'", (uint8_t *)&v12, 0x44u);
    }
  }
  *(_DWORD *)(a1 + 376) = a2;
}

uint64_t Phase::Controller::Generator::Play(uint64_t this)
{
  int v1 = *(_DWORD *)(this + 376);
  if (v1 == 2)
  {
    *(unsigned char *)(this + 512) = 0;
    *(unsigned char *)(this + 384) = 1;
    return (*(uint64_t (**)(double))(*(void *)this + 104))(*(double *)(this + 368));
  }
  else if (v1 == 1)
  {
    *(unsigned char *)(this + 512) = 0;
    *(unsigned char *)(this + 384) = 1;
  }
  return this;
}

uint64_t Phase::Controller::Generator::Pause(uint64_t this)
{
  if ((*(_DWORD *)(this + 376) - 1) <= 1)
  {
    *(unsigned char *)(this + 512) = 1;
    if (*(_DWORD *)(this + 380) == 1 && !*(unsigned char *)(this + 513)) {
      return Phase::Controller::DVM::VoiceGraph::SetGeneratorPlayState(*(Phase::Controller::DVM::VoiceGraph **)(**(void **)(this + 32) + 72), *(void *)(this + 232), *(void *)(this + 240), 2);
    }
  }
  return this;
}

void Phase::Controller::Generator::Resume(Phase::Controller::Generator *this)
{
  if ((*((_DWORD *)this + 94) - 1) <= 1)
  {
    if (*((_DWORD *)this + 95) == 1 && !*((unsigned char *)this + 513))
    {
      Phase::Controller::DVM::VoiceGraph::SetGeneratorPlayState(*(Phase::Controller::DVM::VoiceGraph **)(**((void **)this + 4) + 72), *((void *)this + 29), *((void *)this + 30), 3);
      Phase::Controller::Generator::SetSessionState((uint64_t)this, 0);
    }
    *((unsigned char *)this + 512) = 0;
    *((unsigned char *)this + 384) = 1;
  }
}

void Phase::Controller::Generator::SetSessionState(uint64_t a1, int a2)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a1 + 388) != a2)
  {
    uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance((Phase::Logger *)a1);
    if (*((unsigned char *)Instance + 1556))
    {
      uint64_t v5 = **(id **)(Phase::Logger::GetInstance(Instance) + 384);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v6 = *(void *)(a1 + 416);
        uint64_t v7 = *(void *)(a1 + 400);
        uint64_t v8 = *(void *)(a1 + 232);
        int v9 = *(_DWORD *)(a1 + 388);
        uint64_t v10 = "<not found>";
        if (v9 == 1) {
          __int16 v11 = "interrupted";
        }
        else {
          __int16 v11 = "<not found>";
        }
        if (v9) {
          int v12 = v11;
        }
        else {
          int v12 = "active";
        }
        int v13 = 136316674;
        __int16 v14 = "CvmGenerator.mm";
        __int16 v15 = 1024;
        if (a2 == 1) {
          uint64_t v10 = "interrupted";
        }
        int v16 = 1204;
        __int16 v17 = 2048;
        if (!a2) {
          uint64_t v10 = "active";
        }
        uint64_t v18 = v6;
        __int16 v19 = 2048;
        uint64_t v20 = v7;
        __int16 v21 = 2048;
        uint64_t v22 = v8;
        __int16 v23 = 2080;
        __int16 v24 = v12;
        __int16 v25 = 2080;
        uint64_t v26 = v10;
        _os_log_impl(&dword_221E5E000, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d (sound event: %llu, submix: %llu, generator: %llu) - session state changed from '%s' to '%s'", (uint8_t *)&v13, 0x44u);
      }
    }
    *(_DWORD *)(a1 + 388) = a2;
  }
}

void Phase::Controller::Generator::SessionPause(Phase::Controller::Generator *this)
{
  if (!*((unsigned char *)this + 512))
  {
    (*(void (**)(Phase::Controller::Generator *))(*(void *)this + 24))(this);
    Phase::Controller::Generator::SetSessionState((uint64_t)this, 1);
  }
}

uint64_t Phase::Controller::Generator::ClientEnginePause(uint64_t this)
{
  if ((*(_DWORD *)(this + 376) - 1) <= 1)
  {
    *(unsigned char *)(this + 513) = 1;
    if (*(_DWORD *)(this + 380) == 1 && !*(unsigned char *)(this + 512)) {
      return Phase::Controller::DVM::VoiceGraph::SetGeneratorPlayState(*(Phase::Controller::DVM::VoiceGraph **)(**(void **)(this + 32) + 72), *(void *)(this + 232), *(void *)(this + 240), 2);
    }
  }
  return this;
}

uint64_t Phase::Controller::Generator::ClientEngineStart(uint64_t this)
{
  if ((*(_DWORD *)(this + 376) - 1) <= 1)
  {
    uint64_t v1 = this;
    if (*(_DWORD *)(this + 380) == 1 && !*(unsigned char *)(this + 512)) {
      this = Phase::Controller::DVM::VoiceGraph::SetGeneratorPlayState(*(Phase::Controller::DVM::VoiceGraph **)(**(void **)(this + 32) + 72), *(void *)(this + 232), *(void *)(this + 240), 3);
    }
    *(unsigned char *)(v1 + 513) = 0;
  }
  return this;
}

void Phase::Controller::Generator::Stop(Phase::Controller::Generator *this)
{
  int v2 = *((_DWORD *)this + 94);
  if (v2 == 2)
  {
    (*(void (**)(Phase::Controller::Generator *, void))(*(void *)this + 112))(this, 0);
  }
  else
  {
    if (v2 != 1)
    {
      if (!v2)
      {
        Phase::Controller::Generator::Finish(this);
      }
      return;
    }
    (*(void (**)(Phase::Controller::Generator *, void))(*(void *)this + 112))(this, 0);
    (*(void (**)(void, void, void))(**((void **)this + 5) + 16))(*((void *)this + 5), *((void *)this + 29), *((void *)this + 30));
  }

  Phase::Controller::Generator::SetState((uint64_t)this, 3u);
}

void Phase::Controller::Generator::SetSleepState(uint64_t a1, unsigned int a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance((Phase::Logger *)a1);
  if (*((unsigned char *)Instance + 1556))
  {
    uint64_t v5 = **(id **)(Phase::Logger::GetInstance(Instance) + 384);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(int *)(a1 + 508);
      if (v6 > 2) {
        uint64_t v7 = "<not found>";
      }
      else {
        uint64_t v7 = off_2645F7168[v6];
      }
      uint64_t v8 = *(void *)(a1 + 416);
      uint64_t v9 = *(void *)(a1 + 400);
      uint64_t v10 = *(void *)(a1 + 232);
      if (a2 > 2) {
        __int16 v11 = "<not found>";
      }
      else {
        __int16 v11 = off_2645F7168[a2];
      }
      int v12 = 136316674;
      int v13 = "CvmGenerator.mm";
      __int16 v14 = 1024;
      int v15 = 1185;
      __int16 v16 = 2048;
      uint64_t v17 = v8;
      __int16 v18 = 2048;
      uint64_t v19 = v9;
      __int16 v20 = 2048;
      uint64_t v21 = v10;
      __int16 v22 = 2080;
      __int16 v23 = v7;
      __int16 v24 = 2080;
      __int16 v25 = v11;
      _os_log_impl(&dword_221E5E000, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d (sound event: %llu, submix: %llu, generator: %llu) - sleep state changed from '%s' to '%s'", (uint8_t *)&v12, 0x44u);
    }
  }
  *(_DWORD *)(a1 + 508) = a2;
}

void Phase::Controller::Generator::SetParameter(Phase::Controller::Generator *this, unint64_t a2, double a3, int a4)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  unint64_t v18 = a2;
  uint64_t v7 = (double *)std::__hash_table<std::__hash_value_type<unsigned long long,int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,int>>>::find<unsigned long long>((void *)this + 31, &v18);
  if (v7)
  {
    uint64_t v8 = v7;
    double v9 = Phase::Controller::sClamp<double>((Phase::Logger *)v7, a3, v7[3], v7[4]);
    if (v9 != v8[6])
    {
      v8[6] = v9;
      *((unsigned char *)v8 + 56) = 1;
    }
    if (a4) {
      *((unsigned char *)v8 + 56) = 1;
    }
    return;
  }
  uint64_t v10 = std::__hash_table<std::__hash_value_type<unsigned long long,int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,int>>>::find<unsigned long long>((void *)this + 10, &v18);
  if (!v10)
  {
    int v13 = **(id **)(Phase::Logger::GetInstance(0) + 384);
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG)) {
      return;
    }
    *(_DWORD *)buf = 136315650;
    __int16 v20 = "CvmGenerator.mm";
    __int16 v21 = 1024;
    int v22 = 545;
    __int16 v23 = 2048;
    unint64_t v24 = v18;
    __int16 v14 = "%25s:%-5d Generator:SetParameter: was called with an invalid inParameterId %lld!";
    goto LABEL_12;
  }
  __int16 v11 = v10;
  int v12 = (Phase::Logger *)std::__hash_table<std::__hash_value_type<unsigned long long,int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,int>>>::find<unsigned long long>((void *)this + 15, &v18);
  if (v12)
  {
    int v13 = **(id **)(Phase::Logger::GetInstance(v12) + 384);
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG)) {
      return;
    }
    *(_DWORD *)buf = 136315650;
    __int16 v20 = "CvmGenerator.mm";
    __int16 v21 = 1024;
    int v22 = 539;
    __int16 v23 = 2048;
    unint64_t v24 = v18;
    __int16 v14 = "%25s:%-5d Generator:SetParameter: was called with an illegal temporal inParameterId %lld!";
LABEL_12:
    _os_log_impl(&dword_221E5E000, v13, OS_LOG_TYPE_DEBUG, v14, buf, 0x1Cu);
    return;
  }
  int v15 = (Phase::Controller::VoiceData *)*((void *)this + 20);
  __int16 v16 = (Phase::Controller::VoiceData *)*((void *)this + 21);
  if (v15 != v16)
  {
    int v17 = *((_DWORD *)v11 + 6);
    do
    {
      Phase::Controller::VoiceData::SetParameter(v15, v17, a3, a4);
      int v15 = (Phase::Controller::VoiceData *)((char *)v15 + 96);
    }
    while (v15 != v16);
  }
}

double Phase::Controller::Generator::GetGain(Phase::Controller::Generator *this)
{
  Correctiondouble Gain = Phase::Controller::Generator::GetCorrectionGain(this);
  uint64_t v3 = (double *)std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::find<unsigned long long>((void *)this + 31, qword_2645F7090);
  if (!v3) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return CorrectionGain * v3[6] * *((double *)this + 39);
}

double Phase::Controller::Generator::GetCorrectionGain(Phase::Controller::Generator *this)
{
  uint64_t v1 = *((void *)this + 24);
  if (!v1) {
    return *((double *)this + 25);
  }
  uint64_t v2 = *((void *)this + 2);
  if (v1 == 2)
  {
    double v4 = *((double *)this + 25);
    return exp((v4 - (*(double *)(v2 + 24) + *((double *)this + 26))) * 10.0 / 10.0 * 0.115129255);
  }
  double result = 1.0;
  if (v1 == 1)
  {
    double v4 = *(double *)(v2 + 64) + *((double *)this + 25);
    return exp((v4 - (*(double *)(v2 + 24) + *((double *)this + 26))) * 10.0 / 10.0 * 0.115129255);
  }
  return result;
}

void Phase::Controller::Generator::Update(Phase::Controller::Generator *this, double a2, int a3)
{
  int v6 = *((unsigned __int8 *)this + 392);
  *((unsigned char *)this + 392) = 0;
  if (v6) {
    Phase::Controller::Generator::SetVoiceState((uint64_t)this, 0);
  }
  switch(*((_DWORD *)this + 94))
  {
    case 0:
    case 3:
      if (v6 || !*((_DWORD *)this + 95)) {
        goto LABEL_5;
      }
      return;
    case 1:
      if (!a3) {
        return;
      }
      (*(void (**)(void, void, void))(**((void **)this + 5) + 16))(*((void *)this + 5), *((void *)this + 29), *((void *)this + 30));
      if (v6) {
        goto LABEL_5;
      }
      Phase::Controller::Generator::DistanceCull(this);
      unsigned int v8 = *((_DWORD *)this + 127);
      if (v8)
      {
        if (v8 <= 2 && !*((unsigned char *)this + 512))
        {
          uint64_t v9 = *((void *)this + 45);
          switch(v9)
          {
            case 1:
              *((void *)this + 46) = 0;
              v7.n128_u64[0] = 0;
              break;
            case 3:
              v7.n128_u64[0] = *((void *)this + 46);
              break;
            case 2:
              v7.n128_f64[0] = (*(double (**)(Phase::Controller::Generator *, uint64_t, double))(*(void *)this + 96))(this, 2, *((double *)this + 46));
              *((void *)this + 46) = v7.n128_u64[0];
              break;
            default:
LABEL_37:
              Phase::Controller::Generator::SetSleepState((uint64_t)this, 0);
              goto LABEL_38;
          }
          (*(void (**)(Phase::Controller::Generator *, __n128))(*(void *)this + 104))(this, v7);
          goto LABEL_37;
        }
      }
      else if (!*((unsigned char *)this + 512))
      {
        (*(void (**)(Phase::Controller::Generator *, double))(*(void *)this + 104))(this, *((double *)this + 46));
      }
LABEL_38:
      Phase::Controller::Generator::SetState((uint64_t)this, 2u);
      return;
    case 2:
      if (!v6) {
        goto LABEL_24;
      }
      int v10 = *((_DWORD *)this + 127);
      if (v10 == 2)
      {
        Phase::Controller::Generator::SetSleepState((uint64_t)this, 0);
      }
      else if (!v10)
      {
LABEL_5:
        Phase::Controller::Generator::Finish(this);
        return;
      }
LABEL_24:
      if (!*((unsigned char *)this + 512))
      {
        Phase::Controller::Generator::DistanceCull(this);
        if (!*((_DWORD *)this + 127))
        {
          int v11 = *((_DWORD *)this + 95);
          if (v11 == 1)
          {
            Phase::Controller::Generator::UpdateParameters(this, a2, *((unsigned __int8 *)this + 384));
            *((unsigned char *)this + 384) = 0;
          }
          else if (!v11)
          {
            Phase::Controller::Generator::SetState((uint64_t)this, 1u);
          }
        }
        *((double *)this + 46) = *((double *)this + 46) + a2;
      }
      return;
    default:
      return;
  }
}

void Phase::Controller::Generator::SetVoiceState(uint64_t a1, unsigned int a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance((Phase::Logger *)a1);
  if (*((unsigned char *)Instance + 1556))
  {
    uint64_t v5 = **(id **)(Phase::Logger::GetInstance(Instance) + 384);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(int *)(a1 + 380);
      if (v6 > 2) {
        __n128 v7 = "<not found>";
      }
      else {
        __n128 v7 = off_2645F7180[v6];
      }
      uint64_t v8 = *(void *)(a1 + 416);
      uint64_t v9 = *(void *)(a1 + 400);
      uint64_t v10 = *(void *)(a1 + 232);
      if (a2 > 2) {
        int v11 = "<not found>";
      }
      else {
        int v11 = off_2645F7180[a2];
      }
      int v12 = 136316674;
      int v13 = "CvmGenerator.mm";
      __int16 v14 = 1024;
      int v15 = 1172;
      __int16 v16 = 2048;
      uint64_t v17 = v8;
      __int16 v18 = 2048;
      uint64_t v19 = v9;
      __int16 v20 = 2048;
      uint64_t v21 = v10;
      __int16 v22 = 2080;
      __int16 v23 = v7;
      __int16 v24 = 2080;
      uint64_t v25 = v11;
      _os_log_impl(&dword_221E5E000, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d (sound event: %llu, submix: %llu, generator: %llu) - voice state changed from '%s' to '%s'", (uint8_t *)&v12, 0x44u);
    }
  }
  *(_DWORD *)(a1 + 380) = a2;
}

void Phase::Controller::Generator::DistanceCull(Phase::Controller::Generator *this)
{
  if (*((_DWORD *)this + 94) == 2)
  {
    double v1 = *((double *)this + 39);
    if (*((_DWORD *)this + 127))
    {
      if (v1 > 0.0 && !*((unsigned char *)this + 504)) {
        Phase::Controller::Generator::Wake_Internal(this);
      }
    }
    else if (v1 <= 0.0)
    {
      Phase::Controller::Generator::Sleep_Internal(this);
    }
  }
}

void Phase::Controller::Generator::UpdateParameters(Phase::Controller::Generator *this, double a2, int a3)
{
  Phase::Controller::Generator::UpdateCombinatorialParameters(this);
  uint64_t v6 = *((void *)this + 20);
  uint64_t v7 = *((void *)this + 21);
  if (0xAAAAAAAAAAAAAAABLL * ((v7 - v6) >> 5) != 0x4EC4EC4EC4EC4EC5
                                                * ((uint64_t)(*(void *)(*((void *)this + 23) + 24)
                                                           - *(void *)(*((void *)this + 23) + 16)) >> 3))
    std::terminate();
  if (v7 != v6)
  {
    unint64_t v8 = 0;
    double v9 = 0.016666;
    if (a2 <= 0.016666) {
      double v9 = a2;
    }
    if (a3) {
      double v10 = 0.0;
    }
    else {
      double v10 = v9;
    }
    do
    {
      int v11 = (Phase::Controller::VoiceData *)(v6 + 96 * v8);
      if (std::__hash_table<std::__hash_value_type<unsigned long long,int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,int>>>::find<unsigned long long>((void *)this + 10, qword_2645F7120))
      {
        int v12 = std::__hash_table<std::__hash_value_type<unsigned long long,int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,int>>>::find<unsigned long long>((void *)this + 10, qword_2645F7120);
        if (!v12) {
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
        Phase::Controller::VoiceData::SetParameter(v11, *((_DWORD *)v12 + 6), v10, 0);
      }
      uint64_t v13 = *((void *)this + 4);
      unint64_t v14 = *(void *)v11;
      unint64_t v15 = *(void *)(*(void *)(*((void *)this + 23) + 16) + 104 * v8);
      Phase::Controller::VoiceData::PackDirtyDspParameters(v11, __p);
      Phase::Controller::DVM::VoiceGraph::SetParameters(*(Phase::Controller::DVM::VoiceGraph **)(*(void *)v13 + 72), v14, v15, __p);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      for (uint64_t i = (uint64_t *)*((void *)v11 + 4); i; uint64_t i = (uint64_t *)*i)
        *((unsigned char *)i + 56) = 0;
      ++v8;
      uint64_t v6 = *((void *)this + 20);
    }
    while (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 21) - v6) >> 5) > v8);
  }
}

void sub_221EA3EF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Controller::Generator::SubmitGeneratorStoppedResult(uint64_t result, uint64_t a2, const std::error_category *a3, void *a4)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  *(void *)&v6.__val_ = a2;
  v6.__cat_ = a3;
  if (a2 == 1)
  {
    double v4 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)result) + 384);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"CvmGenerator.mm";
      WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = 727;
      _os_log_impl(&dword_221E5E000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [inErrorCode.value() == true is true]: inErrorCode.message()", (uint8_t *)&buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    std::error_code::message(&buf, &v6);
    MEMORY[0x223C932C0](exception, &buf);
  }
  *(unsigned char *)(result + 392) = 1;
  *(void *)(result + 520) = *a4;
  return result;
}

void sub_221EA4040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

void Phase::Controller::Generator::Sleep_Internal(Phase::Controller::Generator *this)
{
  if ((*((_DWORD *)this + 94) - 3) >= 2)
  {
    int v2 = *((_DWORD *)this + 127);
    if (v2 == 2)
    {
      Phase::Controller::Generator::SetSleepState((uint64_t)this, 1u);
    }
    else if (!v2)
    {
      uint64_t v3 = *((void *)this + 45);
      if ((unint64_t)(v3 - 1) >= 3)
      {
        if (!v3)
        {
          Phase::Controller::Generator::Stop(this);
        }
      }
      else
      {
        Phase::Controller::Generator::SetSleepState((uint64_t)this, 1u);
        double v4 = *(void (**)(Phase::Controller::Generator *, void))(*(void *)this + 112);
        v4(this, 0);
      }
    }
  }
}

void Phase::Controller::Generator::Wake_Internal(Phase::Controller::Generator *this)
{
  if ((*((_DWORD *)this + 94) - 3) >= 2 && !*((unsigned char *)this + 504) && *((_DWORD *)this + 127) == 1)
  {
    unsigned int v2 = *((_DWORD *)this + 95);
    if (v2 != 2)
    {
      if (v2)
      {
        unsigned int v2 = 0;
      }
      else
      {
        Phase::Controller::Generator::SetState((uint64_t)this, 1u);
        unsigned int v2 = 2;
      }
    }
    Phase::Controller::Generator::SetSleepState((uint64_t)this, v2);
  }
}

uint64_t Phase::Controller::Generator::ConfigureDspGenerator(atomic_ullong *volatile *this, double a2)
{
  Phase::Controller::Generator::UpdateCombinatorialParameters((Phase::Controller::Generator *)this);
  uint64_t v3 = *((void *)this + 23);
  uint64_t v5 = *(void *)(v3 + 16);
  for (uint64_t i = *(void *)(v3 + 24);
        i != v5;
        std::allocator<Phase::Controller::DspNodeVoice>::destroy[abi:ne180100](v3 + 32, i))
  {
    i -= 104;
  }
  *(void *)(v3 + 24) = v5;
  (*((void (**)(atomic_ullong *volatile *, double))*this + 15))(this, *((double *)this + 46));
  std::error_code v6 = (Phase::Controller::VoiceData *)*((void *)this + 20);
  for (uint64_t j = (Phase::Controller::VoiceData *)*((void *)this + 21);
        v6 != j;
        std::error_code v6 = (Phase::Controller::VoiceData *)((char *)v6 + 96))
  {
    *((void *)v6 + 1) = atomic_fetch_add(this[28], 1uLL);
    for (k = (uint64_t *)*((void *)v6 + 4); k; k = (uint64_t *)*k)
      *((unsigned char *)k + 56) = 1;
    double v9 = (uint64_t *)*((void *)this + 23);
    Phase::Controller::VoiceData::CreateDspNodeVoice(v6, (uint64_t)&v15);
    double v10 = (void *)v9[3];
    if ((unint64_t)v10 >= v9[4])
    {
      uint64_t v11 = std::vector<Phase::Controller::DspNodeVoice>::__push_back_slow_path<Phase::Controller::DspNodeVoice>(v9 + 2, (uint64_t)&v15);
      int v12 = __p[0];
      v9[3] = v11;
      if (v12)
      {
        __p[1] = v12;
        operator delete(v12);
      }
    }
    else
    {
      *double v10 = v15;
      v10[1] = 0;
      v10[3] = 0;
      v10[4] = 0;
      void v10[2] = 0;
      *(_OWORD *)(v10 + 1) = v16;
      v10[3] = v17;
      long long v16 = 0uLL;
      uint64_t v17 = 0;
      v10[5] = 0;
      v10[6] = 0;
      *((_OWORD *)v10 + 2) = *(_OWORD *)v18;
      v10[6] = v19;
      v10[7] = 0;
      v18[0] = 0;
      v18[1] = 0;
      uint64_t v19 = 0;
      v10[8] = 0;
      v10[9] = 0;
      *(_OWORD *)(v10 + 7) = *(_OWORD *)v20;
      v20[0] = 0;
      v20[1] = 0;
      v10[9] = v21;
      v10[10] = 0;
      uint64_t v21 = 0;
      v10[11] = 0;
      unsigned char v10[12] = 0;
      *((_OWORD *)v10 + 5) = *(_OWORD *)__p;
      unsigned char v10[12] = v23;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v23 = 0;
      v9[3] = (uint64_t)(v10 + 13);
    }
    if (v20[0])
    {
      v20[1] = v20[0];
      operator delete(v20[0]);
    }
    if (v18[0])
    {
      v18[1] = v18[0];
      operator delete(v18[0]);
    }
    __int16 v24 = (void **)&v16;
    std::vector<Phase::Controller::VoiceBufferParameter>::__destroy_vector::operator()[abi:ne180100](&v24);
    for (uint64_t m = (uint64_t *)*((void *)v6 + 4); m; uint64_t m = (uint64_t *)*m)
      *((unsigned char *)m + 56) = 0;
  }
  return (*((uint64_t (**)(atomic_ullong *volatile *))*this + 11))(this);
}

void sub_221EA4414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void Phase::Controller::Generator::UpdateCombinatorialParameters(Phase::Controller::Generator *this)
{
  double v1 = (void *)*((void *)this + 33);
  if (v1)
  {
    uint64_t v3 = (void *)((char *)this + 80);
    double v4 = (void *)((char *)this + 248);
    do
    {
      uint64_t v5 = v1[2];
      if (v5 > 0x8119B92FBF5002FLL)
      {
        if (v5 == 0x8119B92FBF50030)
        {
          uint64_t v23 = (double *)std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::find<unsigned long long>(v4, qword_2645F70F0);
          if (!v23) {
            goto LABEL_37;
          }
          double v24 = v23[6];
          if (v24 != *((double *)this + 43))
          {
            uint64_t v25 = std::__hash_table<std::__hash_value_type<unsigned long long,int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,int>>>::find<unsigned long long>(v3, v1 + 2);
            if (!v25) {
LABEL_37:
            }
              std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
            uint64_t v27 = (Phase::Controller::VoiceData *)*((void *)this + 20);
            uint64_t v26 = (Phase::Controller::VoiceData *)*((void *)this + 21);
            if (v27 != v26)
            {
              int v28 = *((_DWORD *)v25 + 6);
              do
              {
                Phase::Controller::VoiceData::SetParameter(v27, v28, v24, 0);
                uint64_t v27 = (Phase::Controller::VoiceData *)((char *)v27 + 96);
              }
              while (v27 != v26);
            }
            *((double *)this + 43) = v24;
          }
        }
        else if (v5 == 0x81FBB92FC0173ECLL)
        {
          uint64_t v11 = (double *)std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::find<unsigned long long>(v4, qword_2645F70C0);
          if (!v11) {
            goto LABEL_37;
          }
          double v12 = v11[6];
          if (v12 != *((double *)this + 42))
          {
            uint64_t v13 = std::__hash_table<std::__hash_value_type<unsigned long long,int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,int>>>::find<unsigned long long>(v3, v1 + 2);
            if (!v13) {
              goto LABEL_37;
            }
            uint64_t v15 = (Phase::Controller::VoiceData *)*((void *)this + 20);
            unint64_t v14 = (Phase::Controller::VoiceData *)*((void *)this + 21);
            if (v15 != v14)
            {
              int v16 = *((_DWORD *)v13 + 6);
              do
              {
                Phase::Controller::VoiceData::SetParameter(v15, v16, v12, 0);
                uint64_t v15 = (Phase::Controller::VoiceData *)((char *)v15 + 96);
              }
              while (v15 != v14);
            }
            *((double *)this + 42) = v12;
          }
        }
      }
      else if (v5 == 0x981F232BD33EC927)
      {
        uint64_t v17 = (double *)std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::find<unsigned long long>(v4, qword_2645F7060);
        if (!v17) {
          goto LABEL_37;
        }
        double v18 = v17[6];
        if (v18 != *((double *)this + 44))
        {
          uint64_t v19 = std::__hash_table<std::__hash_value_type<unsigned long long,int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,int>>>::find<unsigned long long>(v3, v1 + 2);
          if (!v19) {
            goto LABEL_37;
          }
          uint64_t v21 = (Phase::Controller::VoiceData *)*((void *)this + 20);
          __int16 v20 = (Phase::Controller::VoiceData *)*((void *)this + 21);
          if (v21 != v20)
          {
            int v22 = *((_DWORD *)v19 + 6);
            do
            {
              Phase::Controller::VoiceData::SetParameter(v21, v22, v18, 0);
              uint64_t v21 = (Phase::Controller::VoiceData *)((char *)v21 + 96);
            }
            while (v21 != v20);
          }
          *((double *)this + 44) = v18;
        }
      }
      else if (v5 == 0xB5767F7E05AD941ELL)
      {
        double Gain = Phase::Controller::Generator::GetGain(this);
        if (Gain != *((double *)this + 41))
        {
          uint64_t v7 = std::__hash_table<std::__hash_value_type<unsigned long long,int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,int>>>::find<unsigned long long>(v3, v1 + 2);
          if (!v7) {
            goto LABEL_37;
          }
          double v9 = (Phase::Controller::VoiceData *)*((void *)this + 20);
          uint64_t v8 = (Phase::Controller::VoiceData *)*((void *)this + 21);
          if (v9 != v8)
          {
            int v10 = *((_DWORD *)v7 + 6);
            do
            {
              Phase::Controller::VoiceData::SetParameter(v9, v10, Gain, 0);
              double v9 = (Phase::Controller::VoiceData *)((char *)v9 + 96);
            }
            while (v9 != v8);
          }
          *((double *)this + 41) = Gain;
        }
      }
      double v1 = (void *)*v1;
    }
    while (v1);
  }
}

void Phase::Controller::Generator::StartVoices(Phase::Controller::Generator *this, double a2)
{
  Phase::Controller::DVM::VoiceGraph::AddGenerator(*(void *)(**((void **)this + 4) + 72), *(char *)(*((void *)this + 23) + 40), *((void *)this + 29), *((void *)this + 30), *((void *)this + 50), *((void *)this + 51));
  Phase::Controller::Generator::ConfigureDspGenerator((atomic_ullong *volatile *)this, v3);
  Phase::Controller::Generator::SetVoiceState((uint64_t)this, 1u);
  int v4 = *((unsigned __int8 *)this + 384);

  Phase::Controller::Generator::UpdateParameters(this, 0.0, v4);
}

void Phase::Controller::Generator::StopVoices(Phase::Controller::Generator *this)
{
  if (*((_DWORD *)this + 95) == 1)
  {
    Phase::Controller::DVM::VoiceGraph::RemoveGenerator(*(Phase::Controller::DVM::VoiceGraph **)(**((void **)this + 4) + 72), *((void *)this + 29), *((void *)this + 30));
    Phase::Controller::Generator::SetVoiceState((uint64_t)this, 2u);
  }
}

void std::vector<Phase::Controller::VoiceData>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  unsigned int v2 = (uint64_t *)*a1;
  if (*v2)
  {
    std::vector<Phase::Controller::VoiceData>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    double v3 = **a1;
    operator delete(v3);
  }
}

uint64_t std::vector<Phase::Controller::VoiceData>::__base_destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  for (uint64_t i = *(void *)(result + 8); i != a2; i -= 96)
  {
    uint64_t v5 = (void **)(i - 40);
    std::vector<Phase::Controller::VoiceBufferParameter>::__destroy_vector::operator()[abi:ne180100](&v5);
    double result = std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(i - 80);
  }
  *(void *)(v3 + 8) = a2;
  return result;
}

char *std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&,Phase::Controller::Parameter<double>>(uint64_t a1, unint64_t *a2, void *a3, uint64_t a4)
{
  unint64_t v8 = *a2;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
    uint64_t v11 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      double v12 = (char *)*v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = *((void *)v12 + 1);
          if (v13 == v8)
          {
            if (*((void *)v12 + 2) == v8) {
              return v12;
            }
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9) {
                v13 %= v9;
              }
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4) {
              break;
            }
          }
          double v12 = *(char **)v12;
        }
        while (v12);
      }
    }
  }
  double v12 = (char *)operator new(0x40uLL);
  *(void *)double v12 = 0;
  *((void *)v12 + 1) = v8;
  *((void *)v12 + 2) = *a3;
  long long v14 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(v12 + 24) = *(_OWORD *)a4;
  *(_OWORD *)(v12 + 40) = v14;
  *((void *)v12 + 7) = *(void *)(a4 + 32);
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::__rehash<true>(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  uint64_t v21 = *(void *)a1;
  int v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *(void *)double v12 = *v22;
LABEL_38:
    *int v22 = v12;
    goto LABEL_39;
  }
  *(void *)double v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v21 + 8 * v4) = a1 + 16;
  if (*(void *)v12)
  {
    unint64_t v23 = *(void *)(*(void *)v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9) {
        v23 %= v9;
      }
    }
    else
    {
      v23 &= v9 - 1;
    }
    int v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v12;
}

void sub_221EA4A78(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::find<unsigned long long>(void *a1, unint64_t *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (v3 >= *(void *)&v2) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  std::error_code v6 = *(void **)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  double result = (void *)*v6;
  if (*v6)
  {
    do
    {
      unint64_t v8 = result[1];
      if (v3 == v8)
      {
        if (result[2] == v3) {
          return result;
        }
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(void *)&v2) {
            v8 %= *(void *)&v2;
          }
        }
        else
        {
          v8 &= *(void *)&v2 - 1;
        }
        if (v8 != v5) {
          return 0;
        }
      }
      double result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void Phase::Controller::MatrixRenderer::MatrixRenderer(Phase::Logger *a1)
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  Phase::Controller::Renderer::Renderer(a1);
}

void sub_221EA4DA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  __cxa_free_exception(v12);
  void *v13 = v10;
  float v15 = *v11;
  if (*v11)
  {
    v9[18] = v15;
    operator delete(v15);
  }
  std::vector<Phase::Controller::VoiceData>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::~Commandable(v9);
  _Unwind_Resume(a1);
}

BOOL Phase::Controller::MatrixRenderer::ConfigureMatrixMixerVoiceNode(Phase::Controller::MatrixRenderer *this, int a2)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  switch(a2)
  {
    case 1:
    case 2:
      double v12 = **(id **)(Phase::Logger::GetInstance(this) + 496);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v13 = *((void *)this + 5);
        *(_DWORD *)std::string buf = 136315906;
        *(void *)&uint8_t buf[4] = "CvmMatrixRenderer.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 236;
        *(_WORD *)&unsigned char buf[18] = 2048;
        *(void *)&buf[20] = v13;
        *(_WORD *)&unsigned char buf[28] = 1024;
        *(_DWORD *)&buf[30] = a2;
        _os_log_impl(&dword_221E5E000, v12, OS_LOG_TYPE_DEFAULT, "%25s:%-5d MatrixRenderer: rendererId %llu is now using MatrixMixer1x2 for %d output channels! \n", buf, 0x22u);
      }
      uint64_t v6 = 0xD0B8A19AAC0ALL;
      goto LABEL_14;
    case 3:
    case 4:
    case 5:
    case 6:
      uint8x8_t v4 = **(id **)(Phase::Logger::GetInstance(this) + 496);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v5 = *((void *)this + 5);
        *(_DWORD *)std::string buf = 136315906;
        *(void *)&uint8_t buf[4] = "CvmMatrixRenderer.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 247;
        *(_WORD *)&unsigned char buf[18] = 2048;
        *(void *)&buf[20] = v5;
        *(_WORD *)&unsigned char buf[28] = 1024;
        *(_DWORD *)&buf[30] = a2;
        _os_log_impl(&dword_221E5E000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d MatrixRenderer: rendererId %llu is now using MatrixMixer1x6 for %d output channels! \n", buf, 0x22u);
      }
      uint64_t v6 = 0xCCB8A19AA53ELL;
      goto LABEL_14;
    case 7:
    case 8:
      uint64_t v10 = **(id **)(Phase::Logger::GetInstance(this) + 496);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *((void *)this + 5);
        *(_DWORD *)std::string buf = 136315906;
        *(void *)&uint8_t buf[4] = "CvmMatrixRenderer.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 256;
        *(_WORD *)&unsigned char buf[18] = 2048;
        *(void *)&buf[20] = v11;
        *(_WORD *)&unsigned char buf[28] = 1024;
        *(_DWORD *)&buf[30] = a2;
        _os_log_impl(&dword_221E5E000, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d MatrixRenderer: rendererId %llu is now using MatrixMixer1x8 for %d output channels! \n", buf, 0x22u);
      }
      uint64_t v6 = 0xC6B8A19A9B0CLL;
LABEL_14:
      unint64_t v9 = v6 & 0xFFFFFFFFFFFFLL | 0xC1F9000000000000;
      goto LABEL_15;
    case 9:
    case 10:
    case 11:
    case 12:
      uint64_t v7 = **(id **)(Phase::Logger::GetInstance(this) + 496);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v8 = *((void *)this + 5);
        *(_DWORD *)std::string buf = 136315906;
        *(void *)&uint8_t buf[4] = "CvmMatrixRenderer.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 267;
        *(_WORD *)&unsigned char buf[18] = 2048;
        *(void *)&buf[20] = v8;
        *(_WORD *)&unsigned char buf[28] = 1024;
        *(_DWORD *)&buf[30] = a2;
        _os_log_impl(&dword_221E5E000, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d MatrixRenderer: rendererId %llu is now using MatrixMixer1x12 for %d output channels! \n", buf, 0x22u);
      }
      unint64_t v9 = 0x36265BBA99CF899FLL;
LABEL_15:
      uint64_t v14 = *((void *)this + 8);
      *(void *)std::string buf = v9;
      float v15 = (Phase::Logger *)std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::find<unsigned long long>((void *)(v14 + 40), (unint64_t *)buf);
      if (v15 && (float v16 = (const Phase::Controller::VoicePoolEntry *)*((void *)v15 + 3)) != 0)
      {
        BOOL v17 = (void *)((char *)this + 88);
        std::vector<Phase::Controller::VoiceData>::__base_destruct_at_end[abi:ne180100]((uint64_t)this + 88, *((void *)this + 11));
        for (unsigned int i = 0; ; ++i)
        {
          unint64_t v19 = (_DWORD *)*((void *)this + 17);
          if (*v19 == 0x10000)
          {
            uint8x8_t v21 = (uint8x8_t)vcnt_s8((int8x8_t)v19[1]);
            v21.i16[0] = vaddlv_u8(v21);
            unsigned int v20 = v21.i32[0];
          }
          else
          {
            unsigned int v20 = *v19 ? (unsigned __int16)*v19 : v19[2];
          }
          if (i >= v20) {
            break;
          }
          uint64_t add = atomic_fetch_add(*((atomic_ullong *volatile *)this + 21), 1uLL);
          unint64_t v24 = *((void *)this + 12);
          unint64_t v23 = *((void *)this + 13);
          if (v24 >= v23)
          {
            unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - *v17) >> 5);
            unint64_t v27 = v26 + 1;
            if (v26 + 1 > 0x2AAAAAAAAAAAAAALL) {
              std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - *v17) >> 5);
            if (2 * v28 > v27) {
              unint64_t v27 = 2 * v28;
            }
            if (v28 >= 0x155555555555555) {
              unint64_t v29 = 0x2AAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v29 = v27;
            }
            *(void *)&unsigned char buf[32] = (char *)this + 104;
            if (v29) {
              unint64_t v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Controller::VoiceData>>((uint64_t)this + 104, v29);
            }
            else {
              unint64_t v30 = 0;
            }
            *(void *)std::string buf = v30;
            *(void *)&buf[8] = &v30[96 * v26];
            *(void *)&uint8_t buf[16] = *(void *)&buf[8];
            *(void *)&uint8_t buf[24] = &v30[96 * v29];
            Phase::Controller::VoiceData::VoiceData(*(Phase::Controller::VoiceData **)&buf[8], v16, add);
            *(void *)&buf[16] += 96;
            std::vector<Phase::Controller::VoiceData>::__swap_out_circular_buffer((uint64_t *)this + 11, buf);
            unint64_t v25 = *((void *)this + 12);
            std::__split_buffer<Phase::Controller::VoiceData>::~__split_buffer((uint64_t)buf);
          }
          else
          {
            Phase::Controller::VoiceData::VoiceData(*((Phase::Controller::VoiceData **)this + 12), v16, add);
            unint64_t v25 = v24 + 96;
            *((void *)this + 12) = v24 + 96;
          }
          *((void *)this + 12) = v25;
        }
        uint64_t v55 = 0;
        unint64_t v56 = 0;
        uint64_t v53 = *((void *)v16 + 3);
        uint64_t v54 = 0;
        char v37 = (Phase::Controller::VoiceData *)*((void *)this + 11);
        for (uint64_t j = (Phase::Controller::VoiceData *)*((void *)this + 12);
              v37 != j;
              char v37 = (Phase::Controller::VoiceData *)((char *)v37 + 96))
        {
          Phase::Controller::VoiceData::CreateDspNodeVoice(v37, (uint64_t)buf);
          char v39 = v55;
          if ((unint64_t)v55 >= v56)
          {
            uint64_t v55 = (void *)std::vector<Phase::Controller::DspNodeVoice>::__push_back_slow_path<Phase::Controller::DspNodeVoice>(&v54, (uint64_t)buf);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
          }
          else
          {
            *uint64_t v55 = *(void *)buf;
            v39[1] = 0;
            v39[3] = 0;
            v39[4] = 0;
            v39[2] = 0;
            *(_OWORD *)(v39 + 1) = *(_OWORD *)&buf[8];
            v39[3] = *(void *)&buf[24];
            memset(&buf[8], 0, 24);
            v39[5] = 0;
            v39[6] = 0;
            *((_OWORD *)v39 + 2) = *(_OWORD *)&buf[32];
            v39[6] = v59;
            v39[7] = 0;
            *(_OWORD *)&unsigned char buf[32] = 0uLL;
            uint64_t v59 = 0;
            v39[8] = 0;
            v39[9] = 0;
            *(_OWORD *)(v39 + 7) = *(_OWORD *)v60;
            v60[0] = 0;
            v60[1] = 0;
            v39[9] = v61;
            v39[10] = 0;
            uint64_t v61 = 0;
            v39[11] = 0;
            v39[12] = 0;
            *((_OWORD *)v39 + 5) = *(_OWORD *)__p;
            v39[12] = v63;
            __p[0] = 0;
            __p[1] = 0;
            uint64_t v63 = 0;
            uint64_t v55 = v39 + 13;
          }
          if (v60[0])
          {
            v60[1] = v60[0];
            operator delete(v60[0]);
          }
          if (*(void *)&buf[32])
          {
            *(void *)&unsigned char buf[40] = *(void *)&buf[32];
            operator delete(*(void **)&buf[32]);
          }
          uint64_t v57 = (void **)&buf[8];
          std::vector<Phase::Controller::VoiceBufferParameter>::__destroy_vector::operator()[abi:ne180100](&v57);
        }
        uint64_t v40 = *((void *)this + 7);
        unint64_t v41 = *((void *)this + 5);
        int v42 = *((_DWORD *)this + 40);
        memset(buf, 0, 24);
        int v43 = Phase::Controller::DVM::VoiceGraph::ConfigureRenderer(*(void *)(*(void *)v40 + 72), v41, v42, (uint64_t)&v53, (uint64_t *)buf);
        uint64_t v57 = (void **)buf;
        std::vector<Phase::Controller::DspNode>::__destroy_vector::operator()[abi:ne180100](&v57);
        BOOL v36 = v43 == 0;
        if (v43)
        {
          uint64_t v45 = **(id **)(Phase::Logger::GetInstance(v44) + 496);
          if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
          {
            uint64_t v46 = *((void *)this + 5);
            *(_DWORD *)std::string buf = 136315906;
            *(void *)&uint8_t buf[4] = "CvmMatrixRenderer.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 310;
            *(_WORD *)&unsigned char buf[18] = 2048;
            *(void *)&buf[20] = v46;
            *(_WORD *)&unsigned char buf[28] = 1024;
            *(_DWORD *)&buf[30] = v43;
            _os_log_impl(&dword_221E5E000, v45, OS_LOG_TYPE_ERROR, "%25s:%-5d MatrixMixerRenderer: Failed to configure rendererId %llu, with error %hhd! \n", buf, 0x22u);
          }
        }
        else
        {
          unint64_t v47 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v44)
                                                                                              + 496)));
          if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
          {
            if (*((char *)v16 + 23) >= 0) {
              uint64_t v48 = v16;
            }
            else {
              uint64_t v48 = *(const Phase::Controller::VoicePoolEntry **)v16;
            }
            uint64_t v49 = *((void *)this + 5);
            *(_DWORD *)std::string buf = 136315906;
            *(void *)&uint8_t buf[4] = "CvmMatrixRenderer.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 315;
            *(_WORD *)&unsigned char buf[18] = 2080;
            *(void *)&buf[20] = v48;
            *(_WORD *)&unsigned char buf[28] = 2048;
            *(void *)&buf[30] = v49;
            _os_log_impl(&dword_221E5E000, v47, OS_LOG_TYPE_DEFAULT, "%25s:%-5d MatrixMixerRenderer: creating a %s voice pool for rendererId %llu! \n", buf, 0x26u);
          }
        }
        *(void *)std::string buf = &v54;
        std::vector<Phase::Controller::DspNodeVoice>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      }
      else
      {
        unint64_t v31 = **(id **)(Phase::Logger::GetInstance(v15) + 496);
        if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
        {
          uint64_t v32 = *((void *)this + 5);
          *(_DWORD *)std::string buf = 136315650;
          *(void *)&uint8_t buf[4] = "CvmMatrixRenderer.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 285;
          *(_WORD *)&unsigned char buf[18] = 2048;
          *(void *)&buf[20] = v32;
          uint8x8_t v33 = "%25s:%-5d MatrixMixerRenderer: Failed to get voice pool registry entry for rendererId %llu! \n";
          int v34 = v31;
          uint32_t v35 = 28;
LABEL_39:
          _os_log_impl(&dword_221E5E000, v34, OS_LOG_TYPE_ERROR, v33, buf, v35);
        }
        return 0;
      }
      return v36;
    default:
      uint64_t v51 = **(id **)(Phase::Logger::GetInstance(this) + 496);
      if (!os_log_type_enabled(v51, OS_LOG_TYPE_ERROR)) {
        return 0;
      }
      uint64_t v52 = *((void *)this + 5);
      *(_DWORD *)std::string buf = 136315906;
      *(void *)&uint8_t buf[4] = "CvmMatrixRenderer.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 275;
      *(_WORD *)&unsigned char buf[18] = 2048;
      *(void *)&buf[20] = v52;
      *(_WORD *)&unsigned char buf[28] = 1024;
      *(_DWORD *)&buf[30] = a2;
      uint8x8_t v33 = "%25s:%-5d MatrixRenderer: rendererId %llu doesn't support %d output channels! \n";
      int v34 = v51;
      uint32_t v35 = 34;
      goto LABEL_39;
  }
}

void sub_221EA562C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::vector<Phase::Controller::DspNodeVoice>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void Phase::Controller::MatrixRenderer::~MatrixRenderer(Phase::Controller::MatrixRenderer *this)
{
  *(void *)this = &unk_26D4727D0;
  Phase::Controller::DVM::VoiceGraph::RemoveRenderer(*(Phase::Controller::DVM::VoiceGraph **)(**((void **)this + 7) + 72), *((void *)this + 5));
  uint64_t v2 = *((void *)this + 11);
  uint64_t v3 = *((void *)this + 12);
  while (v2 != v3)
  {
    std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear((void *)(v2 + 16));
    std::vector<Phase::Controller::VoiceBufferParameter>::__clear[abi:ne180100]((uint64_t *)(v2 + 56));
    v2 += 96;
  }
  *((void *)this + 15) = &unk_26D4723A0;
  uint8x8_t v4 = (void *)*((void *)this + 17);
  if (v4)
  {
    *((void *)this + 18) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void **)((char *)this + 88);
  std::vector<Phase::Controller::VoiceData>::__destroy_vector::operator()[abi:ne180100](&v5);
  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::~Commandable(this);
}

{
  uint64_t vars8;

  Phase::Controller::MatrixRenderer::~MatrixRenderer(this);

  JUMPOUT(0x223C938A0);
}

void Phase::Controller::MatrixRenderer::AddSubmix(Phase::Logger *a1, unint64_t a2, unint64_t a3, double a4)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (!(a2 | a3))
  {
    uint8x8_t v4 = **(id **)(Phase::Logger::GetInstance(a1) + 496);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v6 = 136315394;
      uint64_t v7 = "CvmMatrixRenderer.mm";
      __int16 v8 = 1024;
      int v9 = 59;
      _os_log_impl(&dword_221E5E000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (InvalidId) [inSubmixId == kInvalidSubmixId is true]: \"Invalid SubmixId!\"", (uint8_t *)&v6, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _ZN5Phase10Controller9InvalidIdCI1St11logic_errorEPKc(exception, "Invalid SubmixId!");
  }

  Phase::Controller::MatrixRenderer::UpdateSubmixToRendererConnection((uint64_t)a1, a2, a3, a4);
}

void sub_221EA58E0(_Unwind_Exception *exception_object)
{
}

void Phase::Controller::MatrixRenderer::UpdateSubmixToRendererConnection(uint64_t a1, unint64_t a2, unint64_t a3, double a4)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (!*(_DWORD *)(a1 + 160))
  {
    double v12 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)a1) + 496);
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      return;
    }
    double v15 = *(double *)(a1 + 40);
    int v16 = 136315906;
    BOOL v17 = "CvmMatrixRenderer.mm";
    __int16 v18 = 1024;
    int v19 = 188;
    __int16 v20 = 2048;
    unint64_t v21 = a2;
    __int16 v22 = 2048;
    double v23 = v15;
    uint64_t v14 = "%25s:%-5d MatrixMixerRenderer: Trying to connect submixId %llu to a stopped rendererId %llu! \n";
    goto LABEL_14;
  }
  double v6 = a4;
  if (a4 < 0.0 || a4 > 1.0)
  {
    int v9 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)a1) + 496);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      unint64_t v10 = *(void *)(a1 + 40);
      int v16 = 136316418;
      BOOL v17 = "CvmMatrixRenderer.mm";
      __int16 v18 = 1024;
      int v19 = 171;
      __int16 v20 = 2048;
      unint64_t v21 = v10;
      __int16 v22 = 2048;
      double v23 = v6;
      __int16 v24 = 2048;
      uint64_t v25 = 0;
      __int16 v26 = 2048;
      uint64_t v27 = 0x3FF0000000000000;
      _os_log_impl(&dword_221E5E000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d (renderer: %llu) send level %f is out of range [%f, %f]. Clamping...", (uint8_t *)&v16, 0x3Au);
    }
    double v6 = fmin(fmax(v6, 0.0), 1.0);
  }
  uint64_t v11 = (Phase::Logger *)Phase::Controller::DVM::VoiceGraph::ConnectSubmixToRenderer(*(Phase::Controller::DVM::VoiceGraph **)(**(void **)(a1 + 56) + 72), a2, a3, *(void *)(a1 + 40), v6);
  if (v11)
  {
    double v12 = **(id **)(Phase::Logger::GetInstance(v11) + 496);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      double v13 = *(double *)(a1 + 40);
      int v16 = 136315906;
      BOOL v17 = "CvmMatrixRenderer.mm";
      __int16 v18 = 1024;
      int v19 = 180;
      __int16 v20 = 2048;
      unint64_t v21 = a2;
      __int16 v22 = 2048;
      double v23 = v13;
      uint64_t v14 = "%25s:%-5d MatrixMixerRenderer: Connecting submixId %llu to rendererId %llu failed! \n";
LABEL_14:
      _os_log_impl(&dword_221E5E000, v12, OS_LOG_TYPE_ERROR, v14, (uint8_t *)&v16, 0x26u);
    }
  }
}

void Phase::Controller::MatrixRenderer::RemoveSubmix(uint64_t a1, unint64_t a2, unint64_t a3)
{
}

void Phase::Controller::MatrixRenderer::SetSubmixSendLevel(Phase::Logger *a1, unint64_t a2, unint64_t a3, double a4)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (!(a2 | a3))
  {
    uint64_t v5 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(a1)
                                                                                       + 496)));
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      (*(void (**)(void **__return_ptr, Phase::Logger *))(*(void *)a1 + 144))(__p, a1);
      double v6 = v9 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 136315906;
      uint64_t v11 = "CvmMatrixRenderer.mm";
      __int16 v12 = 1024;
      int v13 = 72;
      __int16 v14 = 2080;
      double v15 = v6;
      __int16 v16 = 2048;
      uint64_t v17 = 0;
      _os_log_impl(&dword_221E5E000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (InvalidId) [inSubmixId == kInvalidSubmixId is true]: \"%s: Invalid SubmixId %llu!\"", buf, 0x26u);
      if (v9 < 0) {
        operator delete(__p[0]);
      }
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _ZN5Phase10Controller9InvalidIdCI1St11logic_errorEPKc(exception, "%s: Invalid SubmixId %llu!");
  }

  Phase::Controller::MatrixRenderer::UpdateSubmixToRendererConnection((uint64_t)a1, a2, a3, a4);
}

void sub_221EA5CDC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

Phase::Logger *Phase::Controller::MatrixRenderer::SetParameters(Phase::Logger *result, _DWORD *a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*a2 != 1)
  {
    uint64_t v2 = **(id **)(Phase::Logger::GetInstance(result) + 496);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      int v4 = 136315394;
      uint64_t v5 = "CvmMatrixRenderer.mm";
      __int16 v6 = 1024;
      int v7 = 82;
      _os_log_impl(&dword_221E5E000, v2, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [pInRendererParameters->mRendererType != RendererType::Matrix is true]: \"Renderer parameters mismatch.\"", (uint8_t *)&v4, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Renderer parameters mismatch.");
  }
  return result;
}

void sub_221EA5E08(_Unwind_Exception *exception_object)
{
}

uint64_t Phase::Controller::MatrixRenderer::NeedsMetadata(Phase::Controller::MatrixRenderer *this)
{
  return 0;
}

uint64_t Phase::Controller::MatrixRenderer::SetPlayState(uint64_t a1, int a2)
{
  uint64_t result = Phase::Controller::DVM::VoiceGraph::SetRendererPlayState(*(void *)(**(void **)(a1 + 56) + 72), *(void *)(a1 + 40), a2, 0);
  if (!result)
  {
    *(_DWORD *)(a1 + 160) = a2;
    *(unsigned char *)(a1 + 113) = (a2 & 0xFFFFFFFD) == 1;
  }
  return result;
}

uint64_t Phase::Controller::MatrixRenderer::GetPlayState(Phase::Controller::MatrixRenderer *this)
{
  return *((unsigned int *)this + 40);
}

Phase::Logger *Phase::Controller::MatrixRenderer::SubmitRendererStoppedResult(Phase::Logger *this, std::error_code a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  std::error_code v4 = a2;
  if (a2.__val_ == 1)
  {
    uint64_t v2 = **(id **)(Phase::Logger::GetInstance(this) + 496);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"CvmMatrixRenderer.mm";
      WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = 107;
      _os_log_impl(&dword_221E5E000, v2, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [inErrorCode.value() == true is true]: inErrorCode.message()", (uint8_t *)&buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    std::error_code::message(&buf, &v4);
    MEMORY[0x223C932C0](exception, &buf);
  }
  if (*((unsigned char *)this + 113)) {
    std::terminate();
  }
  *((unsigned char *)this + 114) = 1;
  return this;
}

void sub_221EA5FC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

void Phase::Controller::MatrixRenderer::Update(Phase::Controller::MatrixRenderer *this)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  int v1 = 1;
  atomic_compare_exchange_strong((atomic_uchar *volatile)this + 72, (unsigned __int8 *)&v1, 0);
  if (v1 != 1) {
    return;
  }
  uint64_t ActiveSpatializer = Phase::Controller::SpatializerManager::GetActiveSpatializer(*((Phase::Controller::SpatializerManager **)this
                                                                                  + 10));
  unint64_t v21 = 0;
  uint64_t v22 = 0;
  __int16 v20 = 0;
  std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(&v20, *(const void **)(ActiveSpatializer + 24), *(void *)(ActiveSpatializer + 32), *(void *)(ActiveSpatializer + 32) - *(void *)(ActiveSpatializer + 24));
  if (*(_DWORD *)v20 == 0x10000)
  {
    uint8x8_t v5 = (uint8x8_t)vcnt_s8((int8x8_t)*((unsigned int *)v20 + 1));
    v5.i16[0] = vaddlv_u8(v5);
    int v4 = v5.i32[0];
  }
  else if (*(_DWORD *)v20)
  {
    int v4 = (unsigned __int16)*(_DWORD *)v20;
  }
  else
  {
    int v4 = *((_DWORD *)v20 + 2);
  }
  if (*((_DWORD *)this + 44) != v4)
  {
    if (!Phase::Controller::MatrixRenderer::ConfigureMatrixMixerVoiceNode(this, v4))
    {
      (*(void (**)(Phase::Controller::MatrixRenderer *, void, void))(*(void *)this + 112))(this, 0, 0);
      *((unsigned char *)this + 112) = 0;
      goto LABEL_31;
    }
    *((_DWORD *)this + 44) = v4;
  }
  uint64_t v6 = (int **)((char *)this + 136);
  Phase::ChannelLayout::GetCrossmixMatrix((int **)this + 17, (int **)&v20, v24);
  for (unint64_t i = 0; ; ++i)
  {
    uint64_t v8 = *v6;
    int v9 = **v6;
    if (v9 == 0x10000)
    {
      uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v8[1]);
      v11.i16[0] = vaddlv_u8(v11);
      unsigned int v10 = v11.i32[0];
    }
    else
    {
      unsigned int v10 = v9 ? (unsigned __int16)**v6 : v8[2];
    }
    if (i >= v10) {
      break;
    }
    __int16 v12 = (unint64_t *)(*((void *)this + 11) + 96 * i);
    if (*((_DWORD *)this + 44))
    {
      unint64_t v13 = 0;
      do
      {
        Phase::Controller::VoiceData::SetParameter((Phase::Controller::VoiceData *)v12, v13, *(float *)(*(void *)(v24[0] + 24 * i) + 4 * v13), 0);
        ++v13;
      }
      while (v13 < *((unsigned int *)this + 44));
    }
    for (unint64_t j = v12[4]; j; unint64_t j = *(void *)j)
      *(unsigned char *)(j + 56) = 1;
    Phase::Controller::VoiceData::PackDirtyDspParameters((Phase::Controller::VoiceData *)v12, __p);
    double v15 = (Phase::Logger *)Phase::Controller::DVM::VoiceGraph::SetParameters(*(Phase::Controller::DVM::VoiceGraph **)(**((void **)this + 7) + 72), *v12, v12[1], __p);
    int v16 = (int)v15;
    if (v15)
    {
      int v17 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v15)
                                                                                          + 496)));
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        unint64_t v18 = v12[1];
        uint64_t v19 = *((void *)this + 5);
        *(_DWORD *)std::string buf = 136316162;
        *(void *)&uint8_t buf[4] = "CvmMatrixRenderer.mm";
        __int16 v26 = 1024;
        int v27 = 347;
        __int16 v28 = 2048;
        uint64_t v29 = v19;
        __int16 v30 = 2048;
        unint64_t v31 = v18;
        __int16 v32 = 1024;
        int v33 = v16;
        _os_log_impl(&dword_221E5E000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d MatrixMixerRenderer: Failed to set parameters on rendererId %llu, vid %lld, with error %hhd! \n", buf, 0x2Cu);
      }
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  *(void *)std::string buf = v24;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *((unsigned char *)this + 112) = 1;
LABEL_31:
  if (v20)
  {
    unint64_t v21 = v20;
    operator delete(v20);
  }
}

void sub_221EA6300(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Controller::MatrixRenderer::IsPrepared(Phase::Controller::MatrixRenderer *this)
{
  return *((unsigned __int8 *)this + 112);
}

BOOL Phase::Controller::MatrixRenderer::IsStopped(Phase::Controller::MatrixRenderer *this)
{
  return !*((unsigned char *)this + 113) && *((unsigned char *)this + 114) != 0;
}

BOOL Phase::Controller::MatrixRenderer::IsStopping(Phase::Controller::MatrixRenderer *this)
{
  return *((unsigned char *)this + 113) == 0;
}

uint64_t Phase::Controller::MatrixRenderer::Rebuild(uint64_t this)
{
  return this;
}

uint64_t Phase::Controller::MatrixRenderer::GetConfig(Phase::Controller::MatrixRenderer *this)
{
  return (uint64_t)this + 120;
}

uint64_t Phase::Controller::MatrixRenderer::GetDescription(Phase::Controller::MatrixRenderer *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Renderer (matrix, ", 18);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"id ", 3);
  int v1 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"impl@", 5);
  uint64_t v2 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)")", 1);
  std::stringbuf::str();
  v4[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v4 + *(void *)(v4[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v4[1] = MEMORY[0x263F8C318] + 16;
  if (v5 < 0) {
    operator delete((void *)v4[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x223C937D0](&v6);
}

void sub_221EA6540(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<Phase::Controller::VoiceData>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<Phase::Controller::VoiceData>,std::reverse_iterator<Phase::Controller::VoiceData*>,std::reverse_iterator<Phase::Controller::VoiceData*>,std::reverse_iterator<Phase::Controller::VoiceData*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Controller::VoiceData>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2AAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(96 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<Phase::Controller::VoiceData>,std::reverse_iterator<Phase::Controller::VoiceData*>,std::reverse_iterator<Phase::Controller::VoiceData*>,std::reverse_iterator<Phase::Controller::VoiceData*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  char v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      *(_OWORD *)(v7 - 96) = *(_OWORD *)(v9 - 96);
      std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::__hash_table(v7 - 80, (uint64_t *)(v9 - 80));
      *(void *)(v7 - 40) = 0;
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 40) = *(_OWORD *)(v9 - 40);
      *(void *)(v7 - 24) = *(void *)(v9 - 24);
      *(void *)(v9 - 40) = 0;
      *(void *)(v9 - 32) = 0;
      *(void *)(v9 - 24) = 0;
      *(_OWORD *)(v7 - 16) = *(_OWORD *)(v9 - 16);
      uint64_t v7 = *((void *)&v15 + 1) - 96;
      *((void *)&v15 + 1) -= 96;
      v9 -= 96;
    }
    while (v9 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Phase::Controller::VoiceData>,std::reverse_iterator<Phase::Controller::VoiceData*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::__hash_table(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  *(void *)uint64_t result = v2;
  *(void *)(result + 8) = a2[1];
  a2[1] = 0;
  uint64_t v5 = a2[2];
  uint64_t v3 = a2 + 2;
  uint64_t v4 = v5;
  *(void *)(result + 16) = v5;
  uint64_t v6 = v3[1];
  *(void *)(result + 24) = v6;
  *(_DWORD *)(result + 32) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    unint64_t v7 = *(void *)(v4 + 8);
    unint64_t v8 = *(void *)(result + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        v7 %= v8;
      }
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(void *)(v2 + 8 * v7) = result + 16;
    void *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Phase::Controller::VoiceData>,std::reverse_iterator<Phase::Controller::VoiceData*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<Phase::Controller::VoiceData>,std::reverse_iterator<Phase::Controller::VoiceData*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

uint64_t std::_AllocatorDestroyRangeReverse<std::allocator<Phase::Controller::VoiceData>,std::reverse_iterator<Phase::Controller::VoiceData*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  int v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v15 = v3;
  uint64_t v16 = v2;
  uint64_t v17 = v3;
  uint64_t v18 = v2;
  uint64_t v4 = *a1;
  uint64_t v5 = (uint64_t *)a1[1];
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  uint64_t v10 = v7;
  uint64_t v11 = v6;
  uint64_t v12 = v7;
  uint64_t v13 = v6;
  return std::__allocator_destroy[abi:ne180100]<std::allocator<Phase::Controller::VoiceData>,std::reverse_iterator<std::reverse_iterator<Phase::Controller::VoiceData*>>,std::reverse_iterator<std::reverse_iterator<Phase::Controller::VoiceData*>>>(v4, (uint64_t)v14, (uint64_t)v9);
}

uint64_t std::__allocator_destroy[abi:ne180100]<std::allocator<Phase::Controller::VoiceData>,std::reverse_iterator<std::reverse_iterator<Phase::Controller::VoiceData*>>,std::reverse_iterator<std::reverse_iterator<Phase::Controller::VoiceData*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  for (uint64_t i = *(void *)(a2 + 32); i != *(void *)(a3 + 32); *(void *)(a2 + 32) = i)
  {
    uint64_t v7 = (void **)(i + 56);
    std::vector<Phase::Controller::VoiceBufferParameter>::__destroy_vector::operator()[abi:ne180100](&v7);
    uint64_t result = std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(i + 16);
    uint64_t i = *(void *)(a2 + 32) + 96;
  }
  return result;
}

uint64_t std::__split_buffer<Phase::Controller::VoiceData>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__split_buffer<Phase::Controller::VoiceData>::__destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2 != a2)
  {
    uint64_t v4 = result;
    do
    {
      *(void *)(v4 + 16) = v2 - 96;
      uint64_t v5 = (void **)(v2 - 40);
      std::vector<Phase::Controller::VoiceBufferParameter>::__destroy_vector::operator()[abi:ne180100](&v5);
      uint64_t result = std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(v2 - 80);
      uint64_t v2 = *(void *)(v4 + 16);
    }
    while (v2 != a2);
  }
  return result;
}

void Phase::Controller::ProcedureBase::ProcedureBase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v15 = Phase::Controller::Generator::Generator(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
  *(void *)uint64_t v15 = &unk_26D472878;
  *(_OWORD *)(v15 + 528) = 0u;
  uint64_t v16 = (Phase::Logger *)(*(uint64_t (**)(uint64_t))(*(void *)a8 + 24))(a8);
  if (v16)
  {
    if (*((unsigned char *)v16 + 64)) {
      operator new();
    }
    uint64_t v19 = **(id **)(Phase::Logger::GetInstance(v16) + 384);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315394;
      uint64_t v22 = "CvmProcedureBase.mm";
      __int16 v23 = 1024;
      int v24 = 40;
      _os_log_impl(&dword_221E5E000, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [pProcedurePrepareParameters->mProcedureType == ProcedureType::None is true]: \"Invalid procedure type\"", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Invalid procedure type");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
  }
  uint64_t v17 = **(id **)(Phase::Logger::GetInstance(0) + 384);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)std::string buf = 136315394;
    uint64_t v22 = "CvmProcedureBase.mm";
    __int16 v23 = 1024;
    int v24 = 38;
    _os_log_impl(&dword_221E5E000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [nullptr == pProcedurePrepareParameters is true]: \"Invalid GeneratorPrepareParameters for GeneratorType::Procedure!\"", buf, 0x12u);
  }
  uint64_t v18 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(v18, "Invalid GeneratorPrepareParameters for GeneratorType::Procedure!");
}

void sub_221EA6C14(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  Phase::Controller::Generator::~Generator(v1);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::ProcedureBase::InternalPrepare(Phase::Controller::ProcedureBase *this, double a2)
{
  *((double *)this + 66) = a2;
  return 1;
}

void Phase::Controller::ProcedureBase::InternalConfigureDspGenerator(Phase::Controller::ProcedureBase *this)
{
  uint64_t v1 = *((void *)this + 4);
  unint64_t v2 = *((void *)this + 29);
  unint64_t v3 = *((void *)this + 30);
  uint64_t v4 = (char *)*((void *)this + 23);
  memset(v5, 0, sizeof(v5));
  Phase::Controller::DVM::VoiceGraph::ConfigureGeneratorWithRenderCallback(*(void *)(*(void *)v1 + 72), v2, v3, 1, v4, v5, 0);
  uint64_t v6 = (void **)v5;
  std::vector<Phase::Controller::DspNode>::__destroy_vector::operator()[abi:ne180100](&v6);
}

void sub_221EA6CBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<Phase::Controller::DspNode>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void Phase::Controller::DspProcedureNode::~DspProcedureNode(Phase::Controller::DspProcedureNode *this)
{
  uint64_t v1 = (void **)((char *)this + 16);
  std::vector<Phase::Controller::DspNodeVoice>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v2;

  unint64_t v2 = (void **)((char *)this + 16);
  std::vector<Phase::Controller::DspNodeVoice>::__destroy_vector::operator()[abi:ne180100](&v2);
  MEMORY[0x223C938A0](this, 0x10A1C4004939F89);
}

uint64_t Phase::Controller::DspGeneratorNode::AsDspSamplerNode(Phase::Controller::DspGeneratorNode *this)
{
  return 0;
}

uint64_t Phase::Controller::PullStreamSampler::StartVoices(Phase::Controller::PullStreamSampler *this, double a2)
{
  Phase::Controller::Generator::StartVoices(this, a2);
  unint64_t v3 = *(uint64_t (**)(void))(**((void **)this + 5) + 56);

  return v3();
}

uint64_t Phase::Controller::PullStreamSampler::StopVoices(Phase::Controller::PullStreamSampler *this)
{
  Phase::Controller::Generator::StopVoices(this);
  unint64_t v2 = *(uint64_t (**)(void))(**((void **)this + 5) + 56);

  return v2();
}

uint64_t Phase::Controller::PullStreamSampler::Pause(Phase::Controller::PullStreamSampler *this)
{
  int v2 = *((unsigned __int8 *)this + 512);
  uint64_t result = Phase::Controller::Generator::Pause((uint64_t)this);
  int v4 = *((unsigned __int8 *)this + 512);
  BOOL v5 = v4 == v2 || v4 == 0;
  if (!v5 && !*((unsigned char *)this + 513))
  {
    uint64_t v6 = *(uint64_t (**)(void))(**((void **)this + 5) + 56);
    return v6();
  }
  return result;
}

void Phase::Controller::PullStreamSampler::Resume(Phase::Controller::PullStreamSampler *this)
{
  int v2 = *((unsigned __int8 *)this + 512);
  Phase::Controller::Generator::Resume(this);
  if (v2) {
    BOOL v3 = *((unsigned char *)this + 512) == 0;
  }
  else {
    BOOL v3 = 0;
  }
  if (v3 && !*((unsigned char *)this + 513))
  {
    int v4 = *(void (**)(void))(**((void **)this + 5) + 56);
    v4();
  }
}

uint64_t Phase::Controller::PullStreamSampler::ClientEnginePause(Phase::Controller::PullStreamSampler *this)
{
  int v2 = *((unsigned __int8 *)this + 513);
  uint64_t result = Phase::Controller::Generator::ClientEnginePause((uint64_t)this);
  int v4 = *((unsigned __int8 *)this + 513);
  BOOL v5 = v4 == v2 || v4 == 0;
  if (!v5 && !*((unsigned char *)this + 512))
  {
    uint64_t v6 = *(uint64_t (**)(void))(**((void **)this + 5) + 56);
    return v6();
  }
  return result;
}

uint64_t Phase::Controller::PullStreamSampler::ClientEngineStart(Phase::Controller::PullStreamSampler *this)
{
  int v2 = *((unsigned __int8 *)this + 513);
  uint64_t result = Phase::Controller::Generator::ClientEngineStart((uint64_t)this);
  if (v2) {
    BOOL v4 = *((unsigned char *)this + 513) == 0;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4 && !*((unsigned char *)this + 512))
  {
    BOOL v5 = *(uint64_t (**)(void))(**((void **)this + 5) + 56);
    return v5();
  }
  return result;
}

void Phase::Controller::PullStreamSampler::~PullStreamSampler(Phase::Controller::PullStreamSampler *this)
{
  Phase::Controller::StreamSamplerBase::~StreamSamplerBase(this);

  JUMPOUT(0x223C938A0);
}

void *Phase::Controller::Renderer::GetDescription@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "");
}

void Phase::Controller::RendererSystem::RendererSystem(Phase::Logger *a1)
{
  uint64_t v2 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26D472AD0;
  uint64_t v1 = (void *)((char *)a1 + 8);
  Phase::Logger::GetInstance(a1);
  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::Commandable(v1);
}

void sub_221EA72F8(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,std::function<void ()(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>)>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::function<void ()(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>)>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::function<void ()(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>)>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::function<void ()(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>)>>>>::~__hash_table(v4);
  uint64_t v7 = *(std::__shared_weak_count **)(v1 + 176);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(v3);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(v3 - 40);
  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::~Commandable(v2);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::TaskManager::GetService<Phase::Controller::SpatializerManager>(Phase::Logger *a1, int a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v3 = *((void *)a1 + 6);
  if (a2 >= (unint64_t)((*((void *)a1 + 7) - v3) >> 5))
  {
    uint64_t v7 = **(id **)(Phase::Logger::GetInstance(a1) + 448);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315394;
      long long v14 = "TaskManager.hpp";
      __int16 v15 = 1024;
      int v16 = 112;
      _os_log_impl(&dword_221E5E000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: pId < mServiceRegistry.size() is false.", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](exception, "PRECONDITION: pId < mServiceRegistry.size() is false.");
  }
  uint64_t v4 = (Phase::Logger *)(v3 + 32 * a2);
  if (!*(void *)v4)
  {
    uint64_t v9 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v4)
                                                                                       + 448)));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      Phase::GetBacktraceFrame<1ul>(&__p);
      uint64_t v10 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)std::string buf = 136315906;
      long long v14 = "TaskManager.hpp";
      __int16 v15 = 1024;
      int v16 = 121;
      __int16 v17 = 1024;
      int v18 = a2;
      __int16 v19 = 2080;
      __int16 v20 = v10;
      _os_log_impl(&dword_221E5E000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::domain_error) [not lService.has_value() is true]: \"No service registered for Id %i, in call \\n%s\"", buf, 0x22u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }

    uint64_t v11 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](v11, "No service registered for Id %i, in call \n%s");
  }
  BOOL v5 = std::any_cast[abi:ne180100]<Phase::Controller::SpatializerManager * const>((uint64_t (**)(uint64_t, void, void, void, void *))v4);
  if (!v5) {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  return (uint64_t)*v5;
}

void sub_221EA758C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_221EA769C(_Unwind_Exception *a1)
{
}

void sub_221EA76BC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::TaskManager::GetService<Phase::Controller::IR::IRBuilder>(Phase::Logger *a1, Phase::Logger *a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (a2 == a1)
  {
    uint64_t v4 = **(id **)(Phase::Logger::GetInstance(a1) + 448);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315394;
      uint64_t v11 = "TaskManager.hpp";
      __int16 v12 = 1024;
      int v13 = 112;
      _os_log_impl(&dword_221E5E000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: pId < mServiceRegistry.size() is false.", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](exception, "PRECONDITION: pId < mServiceRegistry.size() is false.");
  }
  if (!*(void *)a1)
  {
    uint64_t v6 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(a1)
                                                                                       + 448)));
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      Phase::GetBacktraceFrame<1ul>(&__p);
      uint64_t v7 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? &__p
         : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)std::string buf = 136315906;
      uint64_t v11 = "TaskManager.hpp";
      __int16 v12 = 1024;
      int v13 = 121;
      __int16 v14 = 1024;
      int v15 = 0;
      __int16 v16 = 2080;
      __int16 v17 = v7;
      _os_log_impl(&dword_221E5E000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::domain_error) [not lService.has_value() is true]: \"No service registered for Id %i, in call \\n%s\"", buf, 0x22u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }

    unint64_t v8 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](v8, "No service registered for Id %i, in call \n%s");
  }
  uint64_t v2 = (*(uint64_t (**)(uint64_t, Phase::Logger *, void, void, void *))a1)(3, a1, 0, 0, &std::__any_imp::__unique_typeinfo<Phase::Controller::IR::IRBuilder *>::__id);
  if (!v2) {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  return *(void *)v2;
}

void sub_221EA7904(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_221EA7A14(_Unwind_Exception *a1)
{
}

void sub_221EA7A34(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void Phase::Controller::RendererSystem::~RendererSystem(Phase::Controller::RendererSystem *this)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  *(void *)this = &unk_26D472A70;
  uint64_t v2 = (void *)((char *)this + 8);
  *((void *)this + 1) = &unk_26D472AA0;
  uint64_t v3 = (Phase::Logger *)Phase::Controller::RendererSystem::Reset(this);
  if (*((void *)this + 14))
  {
    uint64_t v4 = **(id **)(Phase::Logger::GetInstance(v3) + 496);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *((void *)this + 14);
      int v7 = 136315650;
      unint64_t v8 = "CvmRendererSystem.mm";
      __int16 v9 = 1024;
      int v10 = 81;
      __int16 v11 = 2048;
      uint64_t v12 = v5;
      _os_log_impl(&dword_221E5E000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d %lu dangling RendererPtrs while destroying RendererSystem.", (uint8_t *)&v7, 0x1Cu);
    }
  }
  std::__hash_table<std::__hash_value_type<unsigned long long,std::function<void ()(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>)>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::function<void ()(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>)>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::function<void ()(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>)>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::function<void ()(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>)>>>>::~__hash_table((uint64_t)this + 184);
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 22);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)this + 128);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)this + 88);
  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::~Commandable(v2);
}

{
  uint64_t vars8;

  Phase::Controller::RendererSystem::~RendererSystem(this);

  JUMPOUT(0x223C938A0);
}

void sub_221EA7BA8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t Phase::Controller::RendererSystem::Reset(Phase::Controller::RendererSystem *this)
{
  uint64_t result = Phase::Commandable<128,Phase::LockFreeQueueMPSC>::ExecuteCommands((uint64_t)this + 8, 1u);
  if (*((int *)this + 6) >= 1)
  {
    uint64_t v3 = 0;
    do
      uint64_t result = Phase::CommandQueue<Phase::LockFreeQueueMPSC>::Reset(*(void *)(*((void *)this + 2) + 8 * v3++));
    while (v3 < *((int *)this + 6));
  }
  for (uint64_t i = (uint64_t **)*((void *)this + 13); i; uint64_t i = (uint64_t **)*i)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t *))(*i[3] + 96))(i[3]);
    if ((result & 1) == 0) {
      uint64_t result = (*(uint64_t (**)(uint64_t *, void, void))(*i[3] + 112))(i[3], 0, 0);
    }
  }
  uint64_t v5 = (uint64_t *)*((void *)this + 18);
  if (v5)
  {
    uint64_t v6 = (void *)((char *)this + 128);
    do
    {
      uint64_t v7 = v5[2];
      if (v7) {
        (*(void (**)(uint64_t))(*(void *)v7 + 24))(v7);
      }
      uint64_t result = std::__hash_table<Phase::Controller::Renderer *,std::hash<Phase::Controller::Renderer *>,std::equal_to<Phase::Controller::Renderer *>,std::allocator<Phase::Controller::Renderer *>>::erase(v6, v5);
      uint64_t v5 = (uint64_t *)result;
    }
    while (result);
  }
  return result;
}

void non-virtual thunk to'Phase::Controller::RendererSystem::~RendererSystem(Phase::Controller::RendererSystem *this)
{
}

{
  uint64_t vars8;

  Phase::Controller::RendererSystem::~RendererSystem((Phase::Controller::RendererSystem *)((char *)this - 8));

  JUMPOUT(0x223C938A0);
}

void Phase::Controller::RendererSystem::CreateRenderer(uint64_t a1@<X0>, uint64_t a2@<X1>, Phase::Logger *a3@<X8>)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  Phase::Controller::RendererSystem::CreateRendererInternal(a3, a1, atomic_fetch_add((atomic_ullong *volatile)(a1 + 80), 1uLL), a2);
}

void sub_221EA7F8C(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_free_exception(v4);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v3 + 8);
    __cxa_end_catch();
    if (v2) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v2);
    }
    JUMPOUT(0x221EA7EA0);
  }
  _Unwind_Resume(exception_object);
}

void Phase::Controller::RendererSystem::CreateRendererInternal(Phase::Logger *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  int v6 = *(_DWORD *)(a4 + 8);
  if (v6 != 2)
  {
    if (v6 == 1)
    {
      Phase::Controller::TaskManager::GetService<Phase::Controller::VoicePoolRegistry>(*(Phase::Logger **)(a2 + 48), 3);
      Phase::Controller::TaskManager::GetService<Phase::Controller::SpatializerManager>(*(Phase::Logger **)(a2 + 48), 9);
      operator new();
    }
    int v10 = **(id **)(Phase::Logger::GetInstance(a1) + 496);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v12 = 136315394;
      *(void *)&v12[4] = "CvmRendererSystem.mm";
      LOWORD(v13) = 1024;
      *(_DWORD *)((char *)&v13 + 2) = 245;
      _os_log_impl(&dword_221E5E000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument): \"Unsupported renderer type\"", v12, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Unsupported renderer type");
  }
  unint64_t v8 = *(Phase::Logger **)(a2 + 168);
  uint64_t v7 = *(void *)(a2 + 176);
  if (v7)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    int v9 = *(_DWORD *)(a4 + 8);
  }
  else
  {
    int v9 = 2;
  }
  *(_DWORD *)&v12[8] = v9;
  *(void *)uint64_t v12 = &unk_26D472480;
  uint64_t v13 = *(void *)(a4 + 12);
  int NumNonLFEChannels = *(_DWORD *)(a4 + 20);
  memset(__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, *(const void **)(a4 + 24), *(void *)(a4 + 32), (uint64_t)(*(void *)(a4 + 32) - *(void *)(a4 + 24)) >> 2);
  int v16 = *(_DWORD *)(a4 + 48);
  int NumNonLFEChannels = Phase::ChannelLayout::GetNumNonLFEChannels(v8);
  Phase::Controller::TaskManager::GetService<Phase::Controller::IR::IRBuilder>(*(Phase::Logger **)(*(void *)(a2 + 48) + 48), *(Phase::Logger **)(*(void *)(a2 + 48) + 56));
  Phase::Controller::TaskManager::GetService<Phase::Controller::VoicePoolRegistry>(*(Phase::Logger **)(a2 + 48), 3);
  operator new();
}

void sub_221EA82E8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void sub_221EA8378()
{
}

void sub_221EA8384(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x221EA83B8);
}

uint64_t Phase::Controller::RendererSystem::DestroyRenderer(uint64_t this, Phase::Controller::Renderer *a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (a2)
  {
    uint64_t v3 = this;
    uint64_t v4 = *(void *)(*(void *)(this + 16) + 8);
    unint64_t v11 = 0;
    BOOL v10 = 1;
    uint64_t v5 = (void *)Phase::LockFreeQueueMPSC::GetWriteBuffer((atomic_uchar *)v4, 24, &v11, &v10);
    if (!v5)
    {
      uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance(0);
      Phase::Logger::DumpTailspinWithThrottleAsync(Instance, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
      unint64_t v8 = **(id **)(v4 + 48);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 136315394;
        uint64_t v13 = "CommandQueue.hpp";
        __int16 v14 = 1024;
        int v15 = 100;
        _os_log_impl(&dword_221E5E000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [true is true]: \"CommandQueue unable to retrieve write buffer; buffe"
          "r is full, unable to grow.\"",
          buf,
          0x12u);
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
    }
    if (v10)
    {
      int v6 = **(id **)(v4 + 48);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)std::string buf = 136315906;
        uint64_t v13 = "CommandQueue.hpp";
        __int16 v14 = 1024;
        int v15 = 89;
        __int16 v16 = 2048;
        unint64_t v17 = v11;
        __int16 v18 = 2048;
        uint64_t v19 = 24;
        _os_log_impl(&dword_221E5E000, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: CommandQueue grew buffer to %zu bytes to accommodate extra %zu bytes - this usually means the system is under load or the command queue is too small.", buf, 0x26u);
      }
    }
    void *v5 = &unk_26D472B60;
    v5[1] = v3;
    void v5[2] = a2;
    this = Phase::LockFreeQueueSPSC::CommitBytes((atomic_uchar *)v4, 24);
    atomic_store(0, (unsigned __int8 *)(v4 + 40));
  }
  return this;
}

void sub_221EA85D0(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2 + 8);
    __cxa_end_catch();
    JUMPOUT(0x221EA84E8);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *Phase::Controller::RendererSystem::Update(Phase::Controller::RendererSystem *this)
{
  uint64_t result = (uint64_t *)Phase::Commandable<128,Phase::LockFreeQueueMPSC>::ExecuteCommands((uint64_t)this + 8);
  for (uint64_t i = (uint64_t **)*((void *)this + 13); i; uint64_t i = (uint64_t **)*i)
    uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*i[3] + 80))(i[3]);
  uint64_t v4 = (uint64_t *)*((void *)this + 18);
  if (v4)
  {
    uint64_t v5 = (void *)((char *)this + 128);
    do
    {
      while (1)
      {
        uint64_t v6 = v4[2];
        uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 96))(v6);
        if (!result) {
          break;
        }
        (*(void (**)(uint64_t))(*(void *)v6 + 24))(v6);
        uint64_t result = (uint64_t *)std::__hash_table<Phase::Controller::Renderer *,std::hash<Phase::Controller::Renderer *>,std::equal_to<Phase::Controller::Renderer *>,std::allocator<Phase::Controller::Renderer *>>::erase(v5, v4);
        uint64_t v4 = result;
        if (!result) {
          return result;
        }
      }
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  return result;
}

uint64_t Phase::Commandable<128,Phase::LockFreeQueueMPSC>::ExecuteCommands(uint64_t a1, unsigned int a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if ((a2 & 0x80000000) != 0 || *(_DWORD *)(a1 + 16) <= (signed int)a2)
  {
    uint64_t v7 = **(id **)(a1 + 24);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315394;
      BOOL v10 = "Commandable.hpp";
      __int16 v11 = 1024;
      int v12 = 296;
      _os_log_impl(&dword_221E5E000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: pQueueId >= 0 && pQueueId < mQueueCount is false.", (uint8_t *)&v9, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](exception, "PRECONDITION: pQueueId >= 0 && pQueueId < mQueueCount is false.");
  }
  uint64_t v3 = Phase::CommandQueue<Phase::LockFreeQueueMPSC>::ExecuteCommands(*(void *)(*(void *)(a1 + 8) + 8 * a2));
  int v4 = 1;
  atomic_compare_exchange_strong((atomic_uchar *volatile)(a1 + 32), (unsigned __int8 *)&v4, 0);
  if (v4 == 1)
  {
    uint64_t v5 = **(id **)(a1 + 24);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      int v9 = 136315394;
      BOOL v10 = "Commandable.hpp";
      __int16 v11 = 1024;
      int v12 = 303;
      _os_log_impl(&dword_221E5E000, v5, OS_LOG_TYPE_INFO, "%25s:%-5d Commandable: Executing pending commands in overflow queue.", (uint8_t *)&v9, 0x12u);
    }
  }
  return v3;
}

void sub_221EA88B8(_Unwind_Exception *exception_object)
{
}

void Phase::Controller::RendererSystem::ReconfigureRenderers(atomic_ullong *this, uint64_t a2, int a3)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v6 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)this) + 384);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = "CvmRendererSystem.mm";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 255;
    _os_log_impl(&dword_221E5E000, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d RendererSystem: Reconfiguring all renderers", buf, 0x12u);
  }
  memset(buf, 0, sizeof(buf));
  uint64_t v7 = (std::__shared_weak_count *)this[22];
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v8 = (void *)this[13];
  if (v8)
  {
    do
    {
      int v9 = (_DWORD *)v8[3];
      if (a3)
      {
        if (v9[12] == 2)
        {
          uint64_t add = atomic_fetch_add(this + 10, 1uLL);
          uint64_t v11 = (*(uint64_t (**)(_DWORD *))(*(void *)v9 + 136))(v9);
          Phase::Controller::RendererSystem::CreateRendererInternal((Phase::Logger *)&v17, (uint64_t)this, add, v11);
        }
      }
      else
      {
        (*(void (**)(_DWORD *, uint64_t))(*(void *)v9 + 128))(v9, a2);
      }
      unint64_t v8 = (void *)*v8;
    }
    while (v8);
    int v12 = *(uint64_t **)buf;
  }
  else
  {
    int v12 = 0;
  }
  uint64_t v13 = *(uint64_t **)&buf[8];
  if (v12 != *(uint64_t **)&buf[8])
  {
    __int16 v14 = (float *)(this + 11);
    do
    {
      uint64_t v15 = *v12;
      __int16 v16 = (std::__shared_weak_count *)v12[1];
      if (v16) {
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Renderer *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Renderer *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Renderer *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Renderer *>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v14, *(void *)(v15 + 40), (void *)(v15 + 40))[3] = v15;
      if (v16) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      }
      v12 += 2;
    }
    while (v12 != v13);
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  *(void *)&long long v17 = buf;
  std::vector<std::shared_ptr<Phase::Controller::Renderer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v17);
}

void sub_221EA8CB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  a15 = (void **)&a19;
  std::vector<std::shared_ptr<Phase::Controller::Renderer>>::__destroy_vector::operator()[abi:ne180100](&a15);
  _Unwind_Resume(a1);
}

void Phase::Controller::RendererSystem::SpatializerParametersChanged(Phase::Controller::RendererSystem *this)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(Phase::Controller::TaskManager::GetService<Phase::Controller::IR::IRBuilder>(*(Phase::Logger **)(*((void *)this + 6) + 48), *(Phase::Logger **)(*((void *)this + 6) + 56))+ 96);
  BOOL IsLayoutSupported = Phase::ChannelLayout::IsLayoutSupported((unsigned int **)(v2 + 24));
  if (IsLayoutSupported)
  {
    BOOL v4 = Phase::ChannelLayout::AreLayoutsEqual((void *)(v2 + 24), *((uint64_t **)this + 21));
    if (v4)
    {
      BOOL v5 = 0;
    }
    else
    {
      int NumNonLFEChannels = Phase::ChannelLayout::GetNumNonLFEChannels((Phase::Logger *)(v2 + 24));
      BOOL v5 = NumNonLFEChannels != Phase::ChannelLayout::GetNumNonLFEChannels(*((Phase::Logger **)this + 21));
      std::allocate_shared[abi:ne180100]<CA::ChannelLayout,std::allocator<CA::ChannelLayout>,CA::ChannelLayout const&,void>(buf, *(const void **)(v2 + 24), *(void *)(v2 + 32));
      int v9 = (std::__shared_weak_count *)*((void *)this + 22);
      *(_OWORD *)((char *)this + 168) = *(_OWORD *)buf;
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
    }
    if (*((int *)this + 6) <= 0)
    {
      uint64_t v13 = **((id **)this + 4);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 136315394;
        *(void *)&uint8_t buf[4] = "Commandable.hpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 132;
        _os_log_impl(&dword_221E5E000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: pQueueId >= 0 && pQueueId < mQueueCount is false.", buf, 0x12u);
      }
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::domain_error::domain_error[abi:ne180100](exception, "PRECONDITION: pQueueId >= 0 && pQueueId < mQueueCount is false.");
    }
    uint64_t v10 = **((void **)this + 2);
    __p[0] = 0;
    BOOL v20 = 1;
    uint64_t v11 = Phase::LockFreeQueueMPSC::GetWriteBuffer((atomic_uchar *)v10, 40, (unint64_t *)__p, &v20);
    if (!v11)
    {
      uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance(0);
      Phase::Logger::DumpTailspinWithThrottleAsync(Instance, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
      __int16 v16 = **(id **)(v10 + 48);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 136315394;
        *(void *)&uint8_t buf[4] = "CommandQueue.hpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 100;
        _os_log_impl(&dword_221E5E000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [true is true]: \"CommandQueue unable to retrieve write buffer; buffe"
          "r is full, unable to grow.\"",
          buf,
          0x12u);
      }
      long long v17 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v17, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
    }
    if (v20)
    {
      int v12 = **(id **)(v10 + 48);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)std::string buf = 136315906;
        *(void *)&uint8_t buf[4] = "CommandQueue.hpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 89;
        __int16 v22 = 2048;
        __int16 v23 = (void **)__p[0];
        __int16 v24 = 2048;
        uint64_t v25 = 40;
        _os_log_impl(&dword_221E5E000, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: CommandQueue grew buffer to %zu bytes to accommodate extra %zu bytes - this usually means the system is under load or the command queue is too small.", buf, 0x26u);
      }
    }
    *(void *)uint64_t v11 = &unk_26D472BC0;
    *(void *)(v11 + 8) = this;
    *(void *)(v11 + 16) = Phase::Controller::RendererSystem::ReconfigureRenderers;
    *(void *)(v11 + 24) = 0;
    *(unsigned char *)(v11 + 32) = !v4;
    *(unsigned char *)(v11 + 33) = v5;
    Phase::LockFreeQueueSPSC::CommitBytes((atomic_uchar *)v10, 40);
    atomic_store(0, (unsigned __int8 *)(v10 + 40));
  }
  else
  {
    uint64_t v6 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance((Phase::Logger *)IsLayoutSupported)
                                                                                       + 496)));
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      Phase::ChannelLayout::GetStringDescription((unsigned int **)(v2 + 24));
      uint64_t v7 = v19 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 136315650;
      *(void *)&uint8_t buf[4] = "CvmRendererSystem.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 321;
      __int16 v22 = 2080;
      __int16 v23 = v7;
      _os_log_impl(&dword_221E5E000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d RendererSystem: setting invalid output channel layout \n%s", buf, 0x1Cu);
      if (v19 < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

void sub_221EA9130(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2 + 8);
    __cxa_end_catch();
    JUMPOUT(0x221EA8FA4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Controller::RendererSystem::ActiveSpatializerChanged(Phase::Controller::RendererSystem *this, const Phase::Controller::Spatializer *a2)
{
  BOOL v4 = (Phase::Controller::IR::IRBuilder *)Phase::Controller::TaskManager::GetService<Phase::Controller::IR::IRBuilder>(*(Phase::Logger **)(*((void *)this + 6) + 48), *(Phase::Logger **)(*((void *)this + 6) + 56));
  Phase::Controller::IR::IRBuilder::SetSpatializer(v4, a2);
  BOOL v5 = *(uint64_t (**)(Phase::Controller::RendererSystem *))(*(void *)this + 16);

  return v5(this);
}

uint64_t Phase::Controller::RendererSystem::SubmitRendererStoppedResult(Phase::Controller::RendererSystem *this, uint64_t a2, std::error_code a3)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (a2 == -1) {
    __assert_rtn("SubmitRendererStoppedResult", "CvmRendererSystem.mm", 348, "inRendererId != kInvalidRendererId");
  }
  cat = a3.__cat_;
  uint64_t v4 = *(void *)&a3.__val_;
  uint64_t v7 = **((void **)this + 2);
  unint64_t v15 = 0;
  BOOL v14 = 1;
  unint64_t v8 = (void *)Phase::LockFreeQueueMPSC::GetWriteBuffer((atomic_uchar *)v7, 40, &v15, &v14);
  if (!v8)
  {
    uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance(0);
    Phase::Logger::DumpTailspinWithThrottleAsync(Instance, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
    int v12 = **(id **)(v7 + 48);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315394;
      long long v17 = "CommandQueue.hpp";
      __int16 v18 = 1024;
      int v19 = 100;
      _os_log_impl(&dword_221E5E000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [true is true]: \"CommandQueue unable to retrieve write buffer; buffer "
        "is full, unable to grow.\"",
        buf,
        0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
  }
  if (v14)
  {
    int v9 = **(id **)(v7 + 48);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 136315906;
      long long v17 = "CommandQueue.hpp";
      __int16 v18 = 1024;
      int v19 = 89;
      __int16 v20 = 2048;
      unint64_t v21 = v15;
      __int16 v22 = 2048;
      uint64_t v23 = 40;
      _os_log_impl(&dword_221E5E000, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: CommandQueue grew buffer to %zu bytes to accommodate extra %zu bytes - this usually means the system is under load or the command queue is too small.", buf, 0x26u);
    }
  }
  *unint64_t v8 = &unk_26D472BE8;
  v8[1] = this;
  void v8[2] = a2;
  void v8[3] = v4;
  void v8[4] = cat;
  uint64_t result = Phase::LockFreeQueueSPSC::CommitBytes((atomic_uchar *)v7, 40);
  atomic_store(0, (unsigned __int8 *)(v7 + 40));
  return result;
}

void sub_221EA9460(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2 + 8);
    __cxa_end_catch();
    JUMPOUT(0x221EA9354);
  }
  _Unwind_Resume(exception_object);
}

void *std::function<void ()(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>)>::operator=(void *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<void ()(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<void ()(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<void ()(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>)>::~__value_func[abi:ne180100](v4);
  return a1;
}

uint64_t Phase::Controller::RendererSystem::GetStats@<X0>(Phase::Controller::RendererSystem *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = 0;
  uint64_t v5 = a2 + 16;
  do
  {
    uint64_t v6 = __const__ZNK5Phase10Controller14RendererSystem8GetStatsEv_rendererPlayStates[v4];
    *(_DWORD *)(a2 + 4 * v6) = Phase::Controller::RendererSystem::GetRendererCount((uint64_t)this, 2, __const__ZNK5Phase10Controller14RendererSystem8GetStatsEv_rendererPlayStates[v4]);
    uint64_t result = Phase::Controller::RendererSystem::GetRendererCount((uint64_t)this, 1, v6);
    *(_DWORD *)(v5 + 4 * v6) = result;
    ++v4;
  }
  while (v4 != 4);
  return result;
}

uint64_t Phase::Controller::RendererSystem::GetRendererCount(uint64_t a1, int a2, int a3)
{
  uint64_t v3 = *(void **)(a1 + 104);
  if (!v3) {
    return 0;
  }
  uint64_t v6 = 0;
  do
  {
    uint64_t v7 = (_DWORD *)v3[3];
    if (v7[12] == a2)
    {
      if ((*(unsigned int (**)(_DWORD *))(*(void *)v7 + 120))(v7) == a3) {
        uint64_t v6 = (v6 + 1);
      }
      else {
        uint64_t v6 = v6;
      }
    }
    uint64_t v3 = (void *)*v3;
  }
  while (v3);
  return v6;
}

uint64_t (**std::any_cast[abi:ne180100]<Phase::Controller::SpatializerManager * const>(uint64_t (**result)(uint64_t, void, void, void, void *)))(uint64_t, void, void, void, void *)
{
  if (result)
  {
    if (*result) {
      return (uint64_t (**)(uint64_t, void, void, void, void *))(*result)(3, result, 0, 0, &std::__any_imp::__unique_typeinfo<Phase::Controller::SpatializerManager *>::__id);
    }
    else {
      return 0;
    }
  }
  return result;
}

void *std::allocate_shared[abi:ne180100]<CA::ChannelLayout,std::allocator<CA::ChannelLayout>,CA::ChannelLayout const&,void>(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = operator new(0x30uLL);
  v6[1] = 0;
  void v6[2] = 0;
  v6[3] = 0;
  void *v6 = &unk_26D472B00;
  void v6[4] = 0;
  v6[5] = 0;
  uint64_t result = std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(v6 + 3, a2, a3, a3 - (void)a2);
  *a1 = v6 + 3;
  a1[1] = v6;
  return result;
}

void sub_221EA970C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<CA::ChannelLayout>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D472B00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<CA::ChannelLayout>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D472B00;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C938A0);
}

void std::__shared_ptr_emplace<CA::ChannelLayout>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,std::function<void ()(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>)>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::function<void ()(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>)>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::function<void ()(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>)>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::function<void ()(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>)>>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__function::__value_func<void ()(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>)>::~__value_func[abi:ne180100](v2 + 3);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void *std::__function::__value_func<void ()(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Renderer *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Renderer *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Renderer *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Renderer *>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(float *a1, unint64_t a2, void *a3)
{
  unint64_t v5 = a2;
  unint64_t v7 = *((void *)a1 + 1);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    int v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  void *i = 0;
  i[1] = v5;
  i[2] = *a3;
  i[3] = 0;
  float v12 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v13 = a1[8];
  if (v7 && (float)(v13 * (float)v7) >= v12)
  {
    unint64_t v5 = v3;
    goto LABEL_64;
  }
  BOOL v14 = 1;
  if (v7 >= 3) {
    BOOL v14 = (v7 & (v7 - 1)) != 0;
  }
  unint64_t v15 = v14 | (2 * v7);
  unint64_t v16 = vcvtps_u32_f32(v12 / v13);
  if (v15 <= v16) {
    int8x8_t prime = (int8x8_t)v16;
  }
  else {
    int8x8_t prime = (int8x8_t)v15;
  }
  if (*(void *)&prime == 1)
  {
    int8x8_t prime = (int8x8_t)2;
  }
  else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
  {
    int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    unint64_t v7 = *((void *)a1 + 1);
  }
  if (*(void *)&prime <= v7)
  {
    if (*(void *)&prime >= v7) {
      goto LABEL_60;
    }
    unint64_t v24 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
    if (v7 < 3 || (uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
    {
      unint64_t v24 = std::__next_prime(v24);
    }
    else
    {
      uint64_t v26 = 1 << -(char)__clz(v24 - 1);
      if (v24 >= 2) {
        unint64_t v24 = v26;
      }
    }
    if (*(void *)&prime <= v24) {
      int8x8_t prime = (int8x8_t)v24;
    }
    if (*(void *)&prime >= v7)
    {
      unint64_t v7 = *((void *)a1 + 1);
      goto LABEL_60;
    }
    if (!*(void *)&prime)
    {
      int v33 = *(void **)a1;
      *(void *)a1 = 0;
      if (v33) {
        operator delete(v33);
      }
      unint64_t v7 = 0;
      *((void *)a1 + 1) = 0;
      goto LABEL_60;
    }
  }
  if (*(void *)&prime >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  __int16 v18 = operator new(8 * *(void *)&prime);
  int v19 = *(void **)a1;
  *(void *)a1 = v18;
  if (v19) {
    operator delete(v19);
  }
  uint64_t v20 = 0;
  *((int8x8_t *)a1 + 1) = prime;
  do
    *(void *)(*(void *)a1 + 8 * v20++) = 0;
  while (*(void *)&prime != v20);
  unint64_t v21 = (void *)*((void *)a1 + 2);
  if (v21)
  {
    unint64_t v22 = v21[1];
    uint8x8_t v23 = (uint8x8_t)vcnt_s8(prime);
    v23.i16[0] = vaddlv_u8(v23);
    if (v23.u32[0] > 1uLL)
    {
      if (v22 >= *(void *)&prime) {
        v22 %= *(void *)&prime;
      }
    }
    else
    {
      v22 &= *(void *)&prime - 1;
    }
    *(void *)(*(void *)a1 + 8 * v22) = a1 + 4;
    int v27 = (void *)*v21;
    if (*v21)
    {
      do
      {
        unint64_t v28 = v27[1];
        if (v23.u32[0] > 1uLL)
        {
          if (v28 >= *(void *)&prime) {
            v28 %= *(void *)&prime;
          }
        }
        else
        {
          v28 &= *(void *)&prime - 1;
        }
        if (v28 != v22)
        {
          if (!*(void *)(*(void *)a1 + 8 * v28))
          {
            *(void *)(*(void *)a1 + 8 * v28) = v21;
            goto LABEL_56;
          }
          *unint64_t v21 = *v27;
          void *v27 = **(void **)(*(void *)a1 + 8 * v28);
          **(void **)(*(void *)a1 + 8 * v28) = v27;
          int v27 = v21;
        }
        unint64_t v28 = v22;
LABEL_56:
        unint64_t v21 = v27;
        int v27 = (void *)*v27;
        unint64_t v22 = v28;
      }
      while (v27);
    }
  }
  unint64_t v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v5) {
      v5 %= v7;
    }
  }
  else
  {
    v5 &= v7 - 1;
  }
LABEL_64:
  uint64_t v29 = *(void **)a1;
  __int16 v30 = *(void **)(*(void *)a1 + 8 * v5);
  if (v30)
  {
    void *i = *v30;
LABEL_72:
    void *v30 = i;
    goto LABEL_73;
  }
  void *i = *((void *)a1 + 2);
  *((void *)a1 + 2) = i;
  v29[v5] = a1 + 4;
  if (*i)
  {
    unint64_t v31 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v31 >= v7) {
        v31 %= v7;
      }
    }
    else
    {
      v31 &= v7 - 1;
    }
    __int16 v30 = (void *)(*(void *)a1 + 8 * v31);
    goto LABEL_72;
  }
LABEL_73:
  ++*((void *)a1 + 3);
  return i;
}

void sub_221EA9C70(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *Phase::LambdaFunction<Phase::Controller::RendererSystem::CreateRenderer(Phase::Controller::RendererConfig const*)::$_0,void>::~LambdaFunction(void *a1)
{
  *a1 = &unk_26D472B38;
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void Phase::LambdaFunction<Phase::Controller::RendererSystem::CreateRenderer(Phase::Controller::RendererConfig const*)::$_0,void>::~LambdaFunction(void *a1)
{
  *a1 = &unk_26D472B38;
  uint64_t v1 = (std::__shared_weak_count *)a1[4];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x223C938A0);
}

void *Phase::LambdaFunction<Phase::Controller::RendererSystem::CreateRenderer(Phase::Controller::RendererConfig const*)::$_0,void>::operator()(Phase::Logger *a1)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  unint64_t v1 = *((void *)a1 + 2);
  uint64_t v2 = *((void *)a1 + 1);
  unint64_t v3 = (float *)(v2 + 88);
  int8x8_t v4 = *(int8x8_t *)(v2 + 96);
  if (v4)
  {
    uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
    v5.i16[0] = vaddlv_u8(v5);
    if (v5.u32[0] > 1uLL)
    {
      unint64_t v6 = *((void *)a1 + 2);
      if (*(void *)&v4 <= v1) {
        unint64_t v6 = v1 % *(void *)&v4;
      }
    }
    else
    {
      unint64_t v6 = (*(void *)&v4 - 1) & v1;
    }
    unint64_t v7 = *(void **)(*(void *)v3 + 8 * v6);
    if (v7)
    {
      for (uint64_t i = (void *)*v7; i; uint64_t i = (void *)*i)
      {
        unint64_t v9 = i[1];
        if (v9 == v1)
        {
          if (i[2] == v1)
          {
            float v12 = **(id **)(Phase::Logger::GetInstance(a1) + 496);
            if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
            {
              int v15 = 136315394;
              unint64_t v16 = "CvmRendererSystem.mm";
              __int16 v17 = 1024;
              int v18 = 96;
              _os_log_impl(&dword_221E5E000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [mRenderers.count(rendererId) > 0 is true]: \"Renderer already registered for this Id!\"", (uint8_t *)&v15, 0x12u);
            }
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Renderer already registered for this Id!");
          }
        }
        else
        {
          if (v5.u32[0] > 1uLL)
          {
            if (v9 >= *(void *)&v4) {
              v9 %= *(void *)&v4;
            }
          }
          else
          {
            v9 &= *(void *)&v4 - 1;
          }
          if (v9 != v6) {
            break;
          }
        }
      }
    }
  }
  uint64_t v10 = *((void *)a1 + 3);
  uint64_t result = std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Renderer *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Renderer *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Renderer *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Renderer *>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v3, v1, (void *)a1 + 2);
  result[3] = v10;
  return result;
}

void sub_221EA9EF8(_Unwind_Exception *exception_object)
{
}

void Phase::LambdaFunction<Phase::Controller::RendererSystem::DestroyRenderer(Phase::Controller::Renderer *)::$_0,void>::~LambdaFunction()
{
}

void Phase::LambdaFunction<Phase::Controller::RendererSystem::DestroyRenderer(Phase::Controller::Renderer *)::$_0,void>::operator()(uint64_t a1)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v2 = *(void *)(a1 + 16);
  int8x8_t v4 = (void *)(v3 + 88);
  uint8x8_t v5 = std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::find<PHASETapType>((void *)(v3 + 88), *(void *)(v2 + 40));
  if (!v5)
  {
    __int16 v50 = **(id **)(Phase::Logger::GetInstance(0) + 496);
    if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
    {
      int v52 = 136315394;
      uint64_t v53 = "CvmRendererSystem.mm";
      __int16 v54 = 1024;
      int v55 = 123;
      _os_log_impl(&dword_221E5E000, v50, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [rendererIter == mRenderers.end() is true]: \"Renderer not found to destroy!\"", (uint8_t *)&v52, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Renderer not found to destroy!");
  }
  unint64_t v6 = v5;
  char v7 = (*(uint64_t (**)(unint64_t))(*(void *)v2 + 96))(v2);
  uint64_t v8 = *(void *)(a1 + 16);
  if ((v7 & 1) == 0)
  {
    (*(void (**)(uint64_t, void, void))(*(void *)v8 + 112))(v8, 0, 0);
    unint64_t v9 = *(void *)(a1 + 16);
    unint64_t v10 = 0x9DDFEA08EB382D69 * (((8 * v9) + 8) ^ HIDWORD(v9));
    unint64_t v11 = 0x9DDFEA08EB382D69 * (HIDWORD(v9) ^ (v10 >> 47) ^ v10);
    unint64_t v12 = 0x9DDFEA08EB382D69 * (v11 ^ (v11 >> 47));
    unint64_t v13 = *(void *)(v3 + 136);
    if (v13)
    {
      uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
      v14.i16[0] = vaddlv_u8(v14);
      if (v14.u32[0] > 1uLL)
      {
        unint64_t v2 = 0x9DDFEA08EB382D69 * (v11 ^ (v11 >> 47));
        if (v12 >= v13) {
          unint64_t v2 = v12 % v13;
        }
      }
      else
      {
        unint64_t v2 = v12 & (v13 - 1);
      }
      int v15 = *(void **)(*(void *)(v3 + 128) + 8 * v2);
      if (v15)
      {
        for (uint64_t i = (void *)*v15; i; uint64_t i = (void *)*i)
        {
          unint64_t v17 = i[1];
          if (v17 == v12)
          {
            if (i[2] == v9) {
              goto LABEL_78;
            }
          }
          else
          {
            if (v14.u32[0] > 1uLL)
            {
              if (v17 >= v13) {
                v17 %= v13;
              }
            }
            else
            {
              v17 &= v13 - 1;
            }
            if (v17 != v2) {
              break;
            }
          }
        }
      }
    }
    int v18 = operator new(0x18uLL);
    void *v18 = 0;
    v18[1] = v12;
    v18[2] = v9;
    float v19 = (float)(unint64_t)(*(void *)(v3 + 152) + 1);
    float v20 = *(float *)(v3 + 160);
    if (v13 && (float)(v20 * (float)v13) >= v19)
    {
LABEL_68:
      uint64_t v37 = *(void *)(v3 + 128);
      uint64_t v38 = *(void **)(v37 + 8 * v2);
      if (v38)
      {
        void *v18 = *v38;
      }
      else
      {
        void *v18 = *(void *)(v3 + 144);
        *(void *)(v3 + 144) = v18;
        *(void *)(v37 + 8 * v2) = v3 + 144;
        if (!*v18)
        {
LABEL_77:
          ++*(void *)(v3 + 152);
          goto LABEL_78;
        }
        unint64_t v39 = *(void *)(*v18 + 8);
        if ((v13 & (v13 - 1)) != 0)
        {
          if (v39 >= v13) {
            v39 %= v13;
          }
        }
        else
        {
          v39 &= v13 - 1;
        }
        uint64_t v38 = (void *)(*(void *)(v3 + 128) + 8 * v39);
      }
      *uint64_t v38 = v18;
      goto LABEL_77;
    }
    BOOL v21 = 1;
    if (v13 >= 3) {
      BOOL v21 = (v13 & (v13 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v13);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      int8x8_t prime = (int8x8_t)v23;
    }
    else {
      int8x8_t prime = (int8x8_t)v22;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v13 = *(void *)(v3 + 136);
    }
    if (*(void *)&prime > v13) {
      goto LABEL_34;
    }
    if (*(void *)&prime < v13)
    {
      unint64_t v31 = vcvtps_u32_f32((float)*(unint64_t *)(v3 + 152) / *(float *)(v3 + 160));
      if (v13 < 3 || (uint8x8_t v32 = (uint8x8_t)vcnt_s8((int8x8_t)v13), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        unint64_t v31 = std::__next_prime(v31);
      }
      else
      {
        uint64_t v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2) {
          unint64_t v31 = v33;
        }
      }
      if (*(void *)&prime <= v31) {
        int8x8_t prime = (int8x8_t)v31;
      }
      if (*(void *)&prime >= v13)
      {
        unint64_t v13 = *(void *)(v3 + 136);
      }
      else
      {
        if (prime)
        {
LABEL_34:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint8x8_t v25 = operator new(8 * *(void *)&prime);
          uint64_t v26 = *(void **)(v3 + 128);
          *(void *)(v3 + 128) = v25;
          if (v26) {
            operator delete(v26);
          }
          uint64_t v27 = 0;
          *(int8x8_t *)(v3 + 136) = prime;
          do
            *(void *)(*(void *)(v3 + 128) + 8 * v27++) = 0;
          while (*(void *)&prime != v27);
          unint64_t v28 = *(void **)(v3 + 144);
          if (v28)
          {
            unint64_t v29 = v28[1];
            uint8x8_t v30 = (uint8x8_t)vcnt_s8(prime);
            v30.i16[0] = vaddlv_u8(v30);
            if (v30.u32[0] > 1uLL)
            {
              if (v29 >= *(void *)&prime) {
                v29 %= *(void *)&prime;
              }
            }
            else
            {
              v29 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)(v3 + 128) + 8 * v29) = v3 + 144;
            uint64_t v34 = (void *)*v28;
            if (*v28)
            {
              do
              {
                unint64_t v35 = v34[1];
                if (v30.u32[0] > 1uLL)
                {
                  if (v35 >= *(void *)&prime) {
                    v35 %= *(void *)&prime;
                  }
                }
                else
                {
                  v35 &= *(void *)&prime - 1;
                }
                if (v35 != v29)
                {
                  uint64_t v36 = *(void *)(v3 + 128);
                  if (!*(void *)(v36 + 8 * v35))
                  {
                    *(void *)(v36 + 8 * v35) = v28;
                    goto LABEL_59;
                  }
                  *unint64_t v28 = *v34;
                  *uint64_t v34 = **(void **)(*(void *)(v3 + 128) + 8 * v35);
                  **(void **)(*(void *)(v3 + 128) + 8 * v35) = v34;
                  uint64_t v34 = v28;
                }
                unint64_t v35 = v29;
LABEL_59:
                unint64_t v28 = v34;
                uint64_t v34 = (void *)*v34;
                unint64_t v29 = v35;
              }
              while (v34);
            }
          }
          unint64_t v13 = (unint64_t)prime;
          goto LABEL_63;
        }
        uint64_t v49 = *(void **)(v3 + 128);
        *(void *)(v3 + 128) = 0;
        if (v49) {
          operator delete(v49);
        }
        unint64_t v13 = 0;
        *(void *)(v3 + 136) = 0;
      }
    }
LABEL_63:
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v12 >= v13) {
        unint64_t v2 = v12 % v13;
      }
      else {
        unint64_t v2 = v12;
      }
    }
    else
    {
      unint64_t v2 = (v13 - 1) & v12;
    }
    goto LABEL_68;
  }
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 24))(v8);
  }
LABEL_78:
  int8x8_t v40 = *(int8x8_t *)(v3 + 96);
  uint64_t v41 = *v6;
  unint64_t v42 = v6[1];
  uint8x8_t v43 = (uint8x8_t)vcnt_s8(v40);
  v43.i16[0] = vaddlv_u8(v43);
  if (v43.u32[0] > 1uLL)
  {
    if (v42 >= *(void *)&v40) {
      v42 %= *(void *)&v40;
    }
  }
  else
  {
    v42 &= *(void *)&v40 - 1;
  }
  uint64_t v44 = *(uint64_t **)(*v4 + 8 * v42);
  do
  {
    uint64_t v45 = v44;
    uint64_t v44 = (uint64_t *)*v44;
  }
  while (v44 != v6);
  if (v45 == (uint64_t *)(v3 + 104)) {
    goto LABEL_95;
  }
  unint64_t v46 = v45[1];
  if (v43.u32[0] > 1uLL)
  {
    if (v46 >= *(void *)&v40) {
      v46 %= *(void *)&v40;
    }
  }
  else
  {
    v46 &= *(void *)&v40 - 1;
  }
  if (v46 != v42)
  {
LABEL_95:
    if (v41)
    {
      unint64_t v47 = *(void *)(v41 + 8);
      if (v43.u32[0] > 1uLL)
      {
        unint64_t v48 = *(void *)(v41 + 8);
        if (v47 >= *(void *)&v40) {
          unint64_t v48 = v47 % *(void *)&v40;
        }
      }
      else
      {
        unint64_t v48 = v47 & (*(void *)&v40 - 1);
      }
      if (v48 == v42) {
        goto LABEL_99;
      }
    }
    *(void *)(*v4 + 8 * v42) = 0;
    uint64_t v41 = *v6;
  }
  if (!v41) {
    goto LABEL_105;
  }
  unint64_t v47 = *(void *)(v41 + 8);
LABEL_99:
  if (v43.u32[0] > 1uLL)
  {
    if (v47 >= *(void *)&v40) {
      v47 %= *(void *)&v40;
    }
  }
  else
  {
    v47 &= *(void *)&v40 - 1;
  }
  if (v47 != v42)
  {
    *(void *)(*v4 + 8 * v47) = v45;
    uint64_t v41 = *v6;
  }
LABEL_105:
  *uint64_t v45 = v41;
  uint64_t *v6 = 0;
  --*(void *)(v3 + 112);

  operator delete(v6);
}

void sub_221EAA5F4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<Phase::Controller::Renderer *,std::hash<Phase::Controller::Renderer *>,std::equal_to<Phase::Controller::Renderer *>,std::allocator<Phase::Controller::Renderer *>>::erase(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>>>::remove(a1, a2, (uint64_t)&__p);
  uint64_t v3 = __p;
  std::string __p = 0;
  if (v3) {
    operator delete(v3);
  }
  return v2;
}

void std::__shared_ptr_pointer<Phase::Controller::Renderer *,Phase::Controller::RendererSystem::CreateRendererInternal(unsigned long long,Phase::Controller::RendererConfig const*)::$_0,std::allocator<Phase::Controller::Renderer>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C938A0);
}

uint64_t std::__shared_ptr_pointer<Phase::Controller::Renderer *,Phase::Controller::RendererSystem::CreateRendererInternal(unsigned long long,Phase::Controller::RendererConfig const*)::$_0,std::allocator<Phase::Controller::Renderer>>::__on_zero_shared(uint64_t a1)
{
  return Phase::Controller::RendererSystem::DestroyRenderer(*(void *)(a1 + 32), *(Phase::Controller::Renderer **)(a1 + 24));
}

void std::vector<std::shared_ptr<Phase::Controller::Renderer>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  unint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    int8x8_t v4 = (char *)v1[1];
    uint8x8_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        unint64_t v6 = (std::__shared_weak_count *)*((void *)v4 - 1);
        if (v6) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v6);
        }
        v4 -= 16;
      }
      while (v4 != v2);
      uint8x8_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void Phase::LambdaFunction<BOOL Phase::Commandable<128,Phase::LockFreeQueueMPSC>::CallAsync<Phase::Controller::RendererSystem,void,BOOL,BOOL>(int,void (Phase::Controller::RendererSystem::*)(BOOL,BOOL),BOOL,BOOL)::{lambda(void)#1},void>::~LambdaFunction()
{
}

uint64_t Phase::LambdaFunction<BOOL Phase::Commandable<128,Phase::LockFreeQueueMPSC>::CallAsync<Phase::Controller::RendererSystem,void,BOOL,BOOL>(int,void (Phase::Controller::RendererSystem::*)(BOOL,BOOL),BOOL,BOOL)::{lambda(void)#1},void>::operator()(uint64_t a1)
{
  unint64_t v1 = *(uint64_t (**)(void *, void, void))(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = (void *)(*(void *)(a1 + 8) + (v2 >> 1));
  if (v2) {
    unint64_t v1 = *(uint64_t (**)(void *, void, void))(*v3 + v1);
  }
  return v1(v3, *(unsigned __int8 *)(a1 + 32), *(unsigned __int8 *)(a1 + 33));
}

void Phase::LambdaFunction<Phase::Controller::RendererSystem::SubmitRendererStoppedResult(unsigned long long,std::error_code)::$_0,void>::~LambdaFunction()
{
}

uint64_t Phase::LambdaFunction<Phase::Controller::RendererSystem::SubmitRendererStoppedResult(unsigned long long,std::error_code)::$_0,void>::operator()(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v2 = *(void *)(a1 + 16);
  int8x8_t v4 = (Phase::Logger *)std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::find<PHASETapType>((void *)(v3 + 88), v2);
  if (v4)
  {
    int8x8_t v4 = (Phase::Logger *)*((void *)v4 + 3);
    if (!v4)
    {
      unint64_t v11 = **(id **)(Phase::Logger::GetInstance(0) + 496);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        int v13 = 136315394;
        uint8x8_t v14 = "CvmRendererSystem.mm";
        __int16 v15 = 1024;
        int v16 = 367;
        _os_log_impl(&dword_221E5E000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d POSTCONDITION: nullptr != pRenderer is false.", (uint8_t *)&v13, 0x12u);
      }
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::invalid_argument::invalid_argument[abi:ne180100](exception, "POSTCONDITION: nullptr != pRenderer is false.");
    }
  }
  else
  {
    char v7 = *(void **)(v3 + 144);
    if (!v7)
    {
LABEL_9:
      uint64_t v8 = **(id **)(Phase::Logger::GetInstance(v4) + 496);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v9 = *(void *)(a1 + 16);
        int v13 = 136315650;
        uint8x8_t v14 = "CvmRendererSystem.mm";
        __int16 v15 = 1024;
        int v16 = 358;
        __int16 v17 = 2048;
        uint64_t v18 = v9;
        _os_log_impl(&dword_221E5E000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (InvalidId) [mRenderersToBeDeleted.end() == deletedRendererIt is true]: \"Received renderer stop callback for invalid renderer Id %llu\"", (uint8_t *)&v13, 0x1Cu);
      }
      unint64_t v10 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      _ZN5Phase10Controller9InvalidIdCI1St11logic_errorEPKc(v10, "Received renderer stop callback for invalid renderer Id %llu");
    }
    while (1)
    {
      int8x8_t v4 = (Phase::Logger *)v7[2];
      if (v2 == *((void *)v4 + 5)) {
        break;
      }
      char v7 = (void *)*v7;
      if (!v7) {
        goto LABEL_9;
      }
    }
  }
  uint8x8_t v5 = *(uint64_t (**)(void))(*(void *)v4 + 72);

  return v5();
}

void sub_221EAA9FC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,std::function<void ()(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>)>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::function<void ()(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>)>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::function<void ()(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>)>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::function<void ()(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>)>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    unint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  int v13 = (void *)(a1 + 16);
  uint8x8_t v14 = operator new(0x38uLL);
  v36[0] = v14;
  v36[1] = a1 + 16;
  *uint8x8_t v14 = 0;
  v14[1] = v7;
  v14[2] = **a4;
  void v14[6] = 0;
  char v37 = 1;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      int8x8_t prime = (int8x8_t)v19;
    }
    else {
      int8x8_t prime = (int8x8_t)v18;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v8 = *(void *)(a1 + 8);
    }
    if (*(void *)&prime > v8) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v8)
    {
      unint64_t v27 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        unint64_t v27 = std::__next_prime(v27);
      }
      else
      {
        uint64_t v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2) {
          unint64_t v27 = v29;
        }
      }
      if (*(void *)&prime <= v27) {
        int8x8_t prime = (int8x8_t)v27;
      }
      if (*(void *)&prime >= v8)
      {
        unint64_t v8 = *(void *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          BOOL v21 = operator new(8 * *(void *)&prime);
          unint64_t v22 = *(void **)a1;
          *(void *)a1 = v21;
          if (v22) {
            operator delete(v22);
          }
          uint64_t v23 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v23++) = 0;
          while (*(void *)&prime != v23);
          unint64_t v24 = (void *)*v13;
          if (*v13)
          {
            unint64_t v25 = v24[1];
            uint8x8_t v26 = (uint8x8_t)vcnt_s8(prime);
            v26.i16[0] = vaddlv_u8(v26);
            if (v26.u32[0] > 1uLL)
            {
              if (v25 >= *(void *)&prime) {
                v25 %= *(void *)&prime;
              }
            }
            else
            {
              v25 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v25) = v13;
            uint8x8_t v30 = (void *)*v24;
            if (*v24)
            {
              do
              {
                unint64_t v31 = v30[1];
                if (v26.u32[0] > 1uLL)
                {
                  if (v31 >= *(void *)&prime) {
                    v31 %= *(void *)&prime;
                  }
                }
                else
                {
                  v31 &= *(void *)&prime - 1;
                }
                if (v31 != v25)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v31))
                  {
                    *(void *)(*(void *)a1 + 8 * v31) = v24;
                    goto LABEL_55;
                  }
                  *unint64_t v24 = *v30;
                  void *v30 = **(void **)(*(void *)a1 + 8 * v31);
                  **(void **)(*(void *)a1 + 8 * v31) = v30;
                  uint8x8_t v30 = v24;
                }
                unint64_t v31 = v25;
LABEL_55:
                unint64_t v24 = v30;
                uint8x8_t v30 = (void *)*v30;
                unint64_t v25 = v31;
              }
              while (v30);
            }
          }
          unint64_t v8 = (unint64_t)prime;
          goto LABEL_59;
        }
        unint64_t v35 = *(void **)a1;
        *(void *)a1 = 0;
        if (v35) {
          operator delete(v35);
        }
        unint64_t v8 = 0;
        *(void *)(a1 + 8) = 0;
      }
    }
LABEL_59:
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint8x8_t v32 = *(void **)(*(void *)a1 + 8 * v4);
  uint64_t i = (void *)v36[0];
  if (v32)
  {
    *(void *)v36[0] = *v32;
LABEL_72:
    *uint8x8_t v32 = i;
    goto LABEL_73;
  }
  *(void *)v36[0] = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(*(void *)a1 + 8 * v4) = v13;
  if (*i)
  {
    unint64_t v33 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v33 >= v8) {
        v33 %= v8;
      }
    }
    else
    {
      v33 &= v8 - 1;
    }
    uint8x8_t v32 = (void *)(*(void *)a1 + 8 * v33);
    goto LABEL_72;
  }
LABEL_73:
  v36[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,std::function<void ()(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::function<void ()(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>)>>,void *>>>>::reset[abi:ne180100]((uint64_t)v36);
  return i;
}

void sub_221EAAE30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,std::function<void ()(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::function<void ()(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>)>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,std::function<void ()(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::function<void ()(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>)>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  unint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__function::__value_func<void ()(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>)>::~__value_func[abi:ne180100](v1 + 3);
    }
    operator delete(v1);
  }
}

uint64_t std::__function::__value_func<void ()(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<void ()(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    unint64_t v4 = (void *)result[3];
    uint8x8_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_221EAB194(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void Phase::Controller::SamplerBase::SamplerBase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  uint64_t v17 = Phase::Controller::Generator::Generator(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
  *(void *)uint64_t v17 = &unk_26D472C10;
  *(_OWORD *)(v17 + 528) = 0u;
  *(_OWORD *)(v17 + 544) = 0u;
  if ((*(uint64_t (**)(uint64_t))(*(void *)a8 + 16))(a8))
  {
    uint64_t v18 = Phase::Controller::TaskManager::GetService<Phase::Controller::VoicePoolRegistry>(*(Phase::Logger **)(a1 + 24), 3);
    *(void *)std::string buf = a15;
    unint64_t v19 = (Phase::Logger *)std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::find<unsigned long long>((void *)(v18 + 40), (unint64_t *)buf);
    if (v19)
    {
      uint64_t v20 = *((void *)v19 + 3);
      uint64_t v45 = (Phase::Controller::VoicePoolEntry *)v20;
      if (v20)
      {
        if (*(int *)(v20 + 144) >= 1)
        {
          uint64_t v21 = 0;
          uint64_t v22 = *(void *)(v20 + 136);
          do
          {
            uint64_t v23 = (uint64_t *)(v22 + 56 * v21);
            uint64_t v44 = 0;
            uint64_t v24 = *v23;
            if (*v23)
            {
              unsigned int v25 = *(unsigned __int8 *)v24;
              if (*(unsigned char *)v24)
              {
                uint8x8_t v26 = (unsigned __int8 *)(v24 + 1);
                uint64_t v24 = 0xCBF29CE484222325;
                do
                {
                  uint64_t v24 = 0x100000001B3 * (v24 ^ v25);
                  unsigned int v27 = *v26++;
                  unsigned int v25 = v27;
                }
                while (v27);
              }
              else
              {
                uint64_t v24 = 0;
              }
            }
            uint64_t v44 = v24;
            int v43 = *(_DWORD *)(v22 + 56 * v21 + 8);
            uint8x8_t v28 = (Phase::Logger *)std::__hash_table<std::__hash_value_type<unsigned long long,int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,int>>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&,int const&>(a1 + 80, (unint64_t *)&v44, &v44, &v43);
            if ((v29 & 1) == 0)
            {
              uint64_t v36 = **(id **)(Phase::Logger::GetInstance(v28) + 384);
              if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
              {
                uint64_t v37 = *v23;
                *(_DWORD *)std::string buf = 136315650;
                *(void *)&uint8_t buf[4] = "CvmSamplerBase.mm";
                __int16 v47 = 1024;
                int v48 = 61;
                __int16 v49 = 2080;
                uint64_t v50 = v37;
                _os_log_impl(&dword_221E5E000, v36, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [!pair.second is true]: \"Failed to insert %s parameter ids\"", buf, 0x1Cu);
              }
              exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(exception, "Failed to insert %s parameter ids");
            }
            ++v21;
          }
          while (v21 < *(int *)(v20 + 144));
        }
        for (unsigned int i = 0; ; ++i)
        {
          unint64_t v31 = *(_DWORD **)(a1 + 48);
          if (*v31 == 0x10000)
          {
            uint8x8_t v33 = (uint8x8_t)vcnt_s8((int8x8_t)v31[1]);
            v33.i16[0] = vaddlv_u8(v33);
            unsigned int v32 = v33.i32[0];
          }
          else
          {
            unsigned int v32 = *v31 ? (unsigned __int16)*v31 : v31[2];
          }
          if (i >= v32) {
            break;
          }
          unint64_t v34 = *(void *)(a1 + 168);
          if (v34 >= *(void *)(a1 + 176))
          {
            uint64_t v35 = std::vector<Phase::Controller::VoiceData>::__emplace_back_slow_path<Phase::Controller::VoicePoolEntry const*&>((uint64_t *)(a1 + 160), &v45);
          }
          else
          {
            Phase::Controller::VoiceData::VoiceData(*(Phase::Controller::VoiceData **)(a1 + 168), v45, 0x7FFFFFFFFFFFFFFFLL);
            uint64_t v35 = v34 + 96;
            *(void *)(a1 + 168) = v34 + 96;
          }
          *(void *)(a1 + 168) = v35;
        }
        operator new();
      }
    }
    else
    {
      uint64_t v45 = 0;
    }
    uint64_t v41 = **(id **)(Phase::Logger::GetInstance(v19) + 384);
    if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = "CvmSamplerBase.mm";
      __int16 v47 = 1024;
      int v48 = 50;
      _os_log_impl(&dword_221E5E000, v41, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [!pVoicePoolEntry is true]: \"Couldn't find a Voice Pool!\"", buf, 0x12u);
    }
    unint64_t v42 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v42, "Couldn't find a Voice Pool!");
    v42->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
  }
  unint64_t v39 = **(id **)(Phase::Logger::GetInstance(0) + 384);
  if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = "CvmSamplerBase.mm";
    __int16 v47 = 1024;
    int v48 = 46;
    _os_log_impl(&dword_221E5E000, v39, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [nullptr == pSamplerPrepareParameters is true]: \"Invalid GeneratorPrepareParameters for GeneratorType::Sampler!\"", buf, 0x12u);
  }
  int8x8_t v40 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(v40, "Invalid GeneratorPrepareParameters for GeneratorType::Sampler!");
}

void sub_221EAB6A8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  if (*(char *)(v1 + 551) < 0) {
    operator delete(*(void **)(v1 + 528));
  }
  Phase::Controller::Generator::~Generator((Phase::Controller::Generator *)v1);
  _Unwind_Resume(a1);
}

void Phase::Controller::SamplerBase::~SamplerBase(void **this)
{
  *this = &unk_26D472C10;
  if (*((char *)this + 551) < 0) {
    operator delete(this[66]);
  }

  Phase::Controller::Generator::~Generator((Phase::Controller::Generator *)this);
}

void Phase::Controller::SamplerBase::AssignVoiceBuffers(Phase::Controller::SamplerBase *this, const AudioBufferList *a2, int a3)
{
  uint64_t v3 = *((void *)this + 20);
  uint64_t v4 = *((void *)this + 21);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v3) >> 5) > a2->mNumberBuffers) {
    goto LABEL_13;
  }
  if (v4 != v3)
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    UInt32 v10 = 0;
    while (1)
    {
      UInt32 v11 = (*((void *)this + 9) & (1 << v10)) != 0 ? v10 : v10 + 1;
      if (v11 >= a2->mNumberBuffers) {
        break;
      }
      unint64_t v12 = (Phase::Logger *)(v3 + v8);
      if (*(void *)(v3 + v8 + 64) - *(void *)(v3 + v8 + 56) != 32) {
        break;
      }
      mData = (std::__shared_weak_count_vtbl *)a2->mBuffers[v11].mData;
      uint8x8_t v14 = (std::__shared_weak_count *)operator new(0x28uLL);
      v14->__shared_owners_ = 0;
      v14->__shared_weak_owners_ = 0;
      v14->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D472558;
      LODWORD(v14[1].__shared_owners_) = a3;
      BYTE4(v14[1].__shared_owners_) = 1;
      float v16 = v14;
      v14[1].__vftable = mData;
      float v15 = v14 + 1;
      Phase::Controller::VoiceData::SetBuffer(v12, 0, (uint64_t *)&v15);
      if (v16) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      }
      ++v9;
      UInt32 v10 = v11 + 1;
      uint64_t v3 = *((void *)this + 20);
      v8 += 96;
      if (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 21) - v3) >> 5) <= v9) {
        return;
      }
    }
LABEL_13:
    std::terminate();
  }
}

void sub_221EAB8D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void Phase::Controller::SamplerBase::InternalSeekDVM(Phase::Controller::SamplerBase *this, double a2)
{
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,int>>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&,int const&>(uint64_t a1, unint64_t *a2, void *a3, _DWORD *a4)
{
  unint64_t v8 = *a2;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
    UInt32 v11 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      unint64_t v12 = *v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == v8) {
              return v12;
            }
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9) {
                v13 %= v9;
              }
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4) {
              break;
            }
          }
          unint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
  unint64_t v12 = operator new(0x20uLL);
  *unint64_t v12 = 0;
  v12[1] = v8;
  v12[2] = *a3;
  *((_DWORD *)v12 + 6) = *a4;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::__rehash<true>(a1, v19);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  uint64_t v20 = *(void *)a1;
  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *unint64_t v12 = *v21;
LABEL_38:
    *uint64_t v21 = v12;
    goto LABEL_39;
  }
  *unint64_t v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v20 + 8 * v4) = a1 + 16;
  if (*v12)
  {
    unint64_t v22 = *(void *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9) {
        v22 %= v9;
      }
    }
    else
    {
      v22 &= v9 - 1;
    }
    uint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v12;
}

void sub_221EABB1C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<Phase::Controller::VoiceData>::__emplace_back_slow_path<Phase::Controller::VoicePoolEntry const*&>(uint64_t *a1, const Phase::Controller::VoicePoolEntry **a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x2AAAAAAAAAAAAAALL) {
    std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x155555555555555) {
    unint64_t v9 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  unint64_t v17 = a1 + 2;
  if (v9) {
    uint8x8_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Controller::VoiceData>>(v7, v9);
  }
  else {
    uint8x8_t v10 = 0;
  }
  unint64_t v13 = v10;
  float v14 = (Phase::Controller::VoiceData *)&v10[96 * v4];
  float v15 = v14;
  BOOL v16 = &v10[96 * v9];
  Phase::Controller::VoiceData::VoiceData(v14, *a2, 0x7FFFFFFFFFFFFFFFLL);
  float v15 = (Phase::Controller::VoiceData *)((char *)v14 + 96);
  std::vector<Phase::Controller::VoiceData>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<Phase::Controller::VoiceData>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_221EABC28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<Phase::Controller::VoiceData>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void Phase::Controller::DspSamplerNode::~DspSamplerNode(Phase::Controller::DspSamplerNode *this)
{
  uint64_t v1 = (void **)((char *)this + 16);
  std::vector<Phase::Controller::DspNodeVoice>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v2;

  unint64_t v2 = (void **)((char *)this + 16);
  std::vector<Phase::Controller::DspNodeVoice>::__destroy_vector::operator()[abi:ne180100](&v2);
  MEMORY[0x223C938A0](this, 0x10A1C4098D1E1D4);
}

uint64_t Phase::Controller::DspGeneratorNode::AsDspProcedureNode(Phase::Controller::DspGeneratorNode *this)
{
  return 0;
}

void Phase::Controller::SpatialModelerCategory::SpatialModelerCategory(Phase::Controller::SpatialModelerCategory *this)
{
}

void Phase::Controller::SpatialModelerCategory::~SpatialModelerCategory(Phase::Controller::SpatialModelerCategory *this)
{
  *(void *)this = &unk_26D472CD0;
  unint64_t v2 = (void *)*((void *)this + 13);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v4 = (void *)*((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v4) {
    operator delete(v4);
  }
  unint64_t v5 = (Phase::Controller::SpatialModelerInstance **)*((void *)this + 7);
  if (v5)
  {
    do
    {
      unint64_t v6 = *v5;
      std::unique_ptr<Phase::Controller::SpatialModelerInstance>::reset[abi:ne180100](v5 + 3);
      operator delete(v5);
      unint64_t v5 = (Phase::Controller::SpatialModelerInstance **)v6;
    }
    while (v6);
  }
  uint64_t v7 = (void *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v7) {
    operator delete(v7);
  }

  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::~Commandable(this);
}

{
  uint64_t vars8;

  Phase::Controller::SpatialModelerCategory::~SpatialModelerCategory(this);

  JUMPOUT(0x223C938A0);
}

void Phase::Controller::SpatialModelerCategory::Initialize(uint64_t a1, int a2, unint64_t a3, uint64_t a4, Phase::Logger *a5)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (a2 == 5 || !a2)
  {
    uint8x8_t v10 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)a1) + 240);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "CvmSpatialModelerCategory.mm";
      __int16 v17 = 1024;
      int v18 = 38;
      _os_log_impl(&dword_221E5E000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [inSpatialCategory == SpatialCategory::Invalid || inSpatialCategory == SpatialCategory::Count is true]: \"Invalid Spatial Category!\"", (uint8_t *)buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Invalid Spatial Category!");
  }
  uint64_t v8 = Phase::Controller::TaskManager::GetService<Phase::Controller::SpatialModelerRegistry>(a5, 5);
  Phase::Controller::SpatialModelerRegistry::GetSpatialModelerIds(v8, a2, (char **)&__p);
  if (__p != v15) {
    operator new();
  }
  *(_DWORD *)(a1 + 36) = a2;
  unint64_t v9 = std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::find<PHASETapType>((void *)(a1 + 40), a3);
  if (!v9)
  {
    unint64_t v12 = **(id **)(Phase::Logger::GetInstance(0) + 240);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      buf[0] = 136315650;
      *(void *)&buf[1] = "CvmSpatialModelerCategory.mm";
      __int16 v17 = 1024;
      int v18 = 71;
      __int16 v19 = 2048;
      unint64_t v20 = a3;
      _os_log_impl(&dword_221E5E000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument): \"A spatial modeler instance matching %llu cannot be found.\"", (uint8_t *)buf, 0x1Cu);
    }
    unint64_t v13 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v13, "A spatial modeler instance matching %llu cannot be found.");
    v13->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
  }
  *(void *)(a1 + 80) = v9[3];
  if (__p)
  {
    float v15 = __p;
    operator delete(__p);
  }
}

void sub_221EAC5A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Controller::TaskManager::GetService<Phase::Controller::SpatialModelerRegistry>(Phase::Logger *a1, int a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v3 = *((void *)a1 + 6);
  if (a2 >= (unint64_t)((*((void *)a1 + 7) - v3) >> 5))
  {
    uint64_t v7 = **(id **)(Phase::Logger::GetInstance(a1) + 448);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315394;
      float v14 = "TaskManager.hpp";
      __int16 v15 = 1024;
      int v16 = 112;
      _os_log_impl(&dword_221E5E000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: pId < mServiceRegistry.size() is false.", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](exception, "PRECONDITION: pId < mServiceRegistry.size() is false.");
  }
  unint64_t v4 = (Phase::Logger *)(v3 + 32 * a2);
  if (!*(void *)v4)
  {
    unint64_t v9 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v4)
                                                                                       + 448)));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      Phase::GetBacktraceFrame<1ul>(&__p);
      uint8x8_t v10 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)std::string buf = 136315906;
      float v14 = "TaskManager.hpp";
      __int16 v15 = 1024;
      int v16 = 121;
      __int16 v17 = 1024;
      int v18 = a2;
      __int16 v19 = 2080;
      unint64_t v20 = v10;
      _os_log_impl(&dword_221E5E000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::domain_error) [not lService.has_value() is true]: \"No service registered for Id %i, in call \\n%s\"", buf, 0x22u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }

    uint64_t v11 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](v11, "No service registered for Id %i, in call \n%s");
  }
  unint64_t v5 = std::any_cast[abi:ne180100]<Phase::Controller::SpatialModelerRegistry * const>((uint64_t (**)(uint64_t, void, void, void, void *))v4);
  if (!v5) {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  return (uint64_t)*v5;
}

void sub_221EAC880(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_221EAC990(_Unwind_Exception *a1)
{
}

void sub_221EAC9B0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void Phase::Controller::SpatialModelerCategory::SetActiveSpatialModeler(Phase::Controller::SpatialModelerCategory *this, unint64_t a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v4 = std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::find<PHASETapType>((void *)this + 5, a2);
  if (!v4)
  {
    uint64_t v7 = **(id **)(Phase::Logger::GetInstance(0) + 384);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315650;
      uint8x8_t v10 = "CvmSpatialModelerCategory.mm";
      __int16 v11 = 1024;
      int v12 = 111;
      __int16 v13 = 2048;
      unint64_t v14 = a2;
      _os_log_impl(&dword_221E5E000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (InvalidId) [iterator == mSpatialModelerInstances.end() is true]: \"Invalid SpatialModelerId %llu!\"", (uint8_t *)&v9, 0x1Cu);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _ZN5Phase10Controller9InvalidIdCI1St11logic_errorEPKc(exception, "Invalid SpatialModelerId %llu!");
  }
  uint64_t v5 = v4[3];
  if (v5 != *((void *)this + 10))
  {
    unsigned __int8 v6 = atomic_load((unsigned __int8 *)(v5 + 5641));
    if (v6) {
      std::terminate();
    }
    Phase::Controller::SpatialModelerInstance::StopUpdate(*((Phase::Controller::SpatialModelerInstance **)this + 10));
    Phase::Controller::SpatialModelerInstance::Reset((Phase::Controller::SpatialSubmixRouter **)v5);
    Phase::Controller::SpatialModelerInstance::CopyRuntimeSettingsFrom((Phase::Controller::SpatialModelerInstance *)v5, *((__n128 **)this + 10));
    Phase::Controller::SpatialModelerInstance::UnregisterAllSubmixes(*((Phase::Controller::SpatialModelerInstance **)this
                                                                     + 10));
    Phase::Controller::SpatialModelerInstance::Reset(*((Phase::Controller::SpatialSubmixRouter ***)this + 10));
    *((void *)this + 10) = v5;
    Phase::Controller::SpatialModelerCategory::Update((Phase::Controller::SpatialModelerInstance **)this, 0.0);
  }
}

void sub_221EACB78(_Unwind_Exception *exception_object)
{
}

void Phase::Controller::SpatialModelerCategory::Update(Phase::Controller::SpatialModelerInstance **this, double a2)
{
  uint64_t Instance = Phase::Logger::GetInstance((Phase::Logger *)this);
  uint64_t v5 = (Phase::Logger *)os_signpost_id_generate(**(os_log_t **)(Instance + 896));
  unsigned __int8 v6 = (Phase::Logger *)Phase::Logger::GetInstance(v5);
  if (*((unsigned char *)v6 + 904))
  {
    uint64_t v7 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v6)
                                                                                       + 896)));
    uint64_t v8 = v7;
    if ((unint64_t)v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v7))
    {
      *(_WORD *)std::string buf = 0;
      _os_signpost_emit_with_name_impl(&dword_221E5E000, v8, OS_SIGNPOST_INTERVAL_BEGIN, (os_signpost_id_t)v5, "Phase_SpatialModelerSystem_Update", "Spatial Modeler Category Update", buf, 2u);
    }
  }
  uint64_t v9 = *((void *)this[10] + 809);
  Phase::Controller::RenderGroupMgr::LoadFreshData(*(atomic_ullong **)(v9 + 368));
  Phase::Controller::RouterCommandList::ExecuteCommands((atomic_ullong *)v9, (void *)v9);
  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::ExecuteCommands((uint64_t)this);
  Phase::Controller::SpatialModelerInstance::Update(this[10], a2);
  __int16 v11 = (Phase::Logger *)Phase::Logger::GetInstance(v10);
  if (*((unsigned char *)v11 + 904))
  {
    int v12 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v11)
                                                                                        + 896)));
    __int16 v13 = v12;
    if ((unint64_t)v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v12))
    {
      *(_WORD *)unint64_t v14 = 0;
      _os_signpost_emit_with_name_impl(&dword_221E5E000, v13, OS_SIGNPOST_INTERVAL_END, (os_signpost_id_t)v5, "Phase_SpatialModelerSystem_Update", (const char *)&unk_222112ABB, v14, 2u);
    }
  }
}

void Phase::Controller::SpatialModelerCategory::RegisterSubmix(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, long long **a6)
{
  uint64_t v71 = *MEMORY[0x263EF8340];
  *(void *)&long long v56 = a2;
  *((void *)&v56 + 1) = a3;
  if (!(a2 | a3))
  {
    uint64_t v51 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)a1) + 240);
    if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v59 = 136315394;
      *(void *)&v59[4] = "CvmSpatialModelerCategory.mm";
      *(_WORD *)&v59[12] = 1024;
      *(_DWORD *)&v59[14] = 156;
      _os_log_impl(&dword_221E5E000, v51, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (InvalidId) [inSubmixId == kInvalidSubmixId is true]: \"Invalid SubmixId!\"", v59, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _ZN5Phase10Controller9InvalidIdCI1St11logic_errorEPKc(exception, "Invalid SubmixId!");
  }
  uint64_t v12 = 0;
  unint64_t v13 = 0xCBF29CE484222325;
  do
    unint64_t v13 = 0x100000001B3 * (v13 ^ *((char *)&v56 + v12++));
  while (v12 != 16);
  unint64_t v14 = *(void *)(a1 + 96);
  if (v14)
  {
    uint8x8_t v15 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
    v15.i16[0] = vaddlv_u8(v15);
    if (v15.u32[0] > 1uLL)
    {
      unint64_t v6 = v13;
      if (v13 >= v14) {
        unint64_t v6 = v13 % v14;
      }
    }
    else
    {
      unint64_t v6 = (v14 - 1) & v13;
    }
    int v16 = *(void **)(*(void *)(a1 + 88) + 8 * v6);
    if (v16)
    {
      for (unsigned int i = (void *)*v16; i; unsigned int i = (void *)*i)
      {
        unint64_t v18 = i[1];
        if (v18 == v13)
        {
          if (i[2] == a2 && i[3] == a3)
          {
            int v48 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)a1) + 240);
            if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)uint64_t v59 = 136315650;
              *(void *)&v59[4] = "CvmSpatialModelerCategory.mm";
              *(_WORD *)&v59[12] = 1024;
              *(_DWORD *)&v59[14] = 163;
              *(_WORD *)&v59[18] = 2048;
              *(void *)&v59[20] = a2;
              _os_log_impl(&dword_221E5E000, v48, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (IdAlreadyExists) [!mRegisteredSubmixes.insert(inSubmixId).second is true]: \"SubmixId %llu is already registered!\"", v59, 0x1Cu);
            }
            uint64_t v50 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            _ZN5Phase10Controller15IdAlreadyExistsCI1St11logic_errorEPKc(v50, "SubmixId %llu is already registered!");
          }
        }
        else
        {
          if (v15.u32[0] > 1uLL)
          {
            if (v18 >= v14) {
              v18 %= v14;
            }
          }
          else
          {
            v18 &= v14 - 1;
          }
          if (v18 != v6) {
            break;
          }
        }
      }
    }
  }
  unint64_t v20 = operator new(0x20uLL);
  *unint64_t v20 = 0;
  v20[1] = v13;
  *((_OWORD *)v20 + 1) = v56;
  float v21 = (float)(unint64_t)(*(void *)(a1 + 112) + 1);
  float v22 = *(float *)(a1 + 120);
  if (!v14 || (float)(v22 * (float)v14) < v21)
  {
    BOOL v23 = 1;
    if (v14 >= 3) {
      BOOL v23 = (v14 & (v14 - 1)) != 0;
    }
    unint64_t v24 = v23 | (2 * v14);
    unint64_t v25 = vcvtps_u32_f32(v21 / v22);
    if (v24 <= v25) {
      int8x8_t prime = (int8x8_t)v25;
    }
    else {
      int8x8_t prime = (int8x8_t)v24;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v14 = *(void *)(a1 + 96);
    }
    if (*(void *)&prime > v14) {
      goto LABEL_37;
    }
    if (*(void *)&prime < v14)
    {
      unint64_t v33 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 112) / *(float *)(a1 + 120));
      if (v14 < 3 || (uint8x8_t v34 = (uint8x8_t)vcnt_s8((int8x8_t)v14), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
      {
        unint64_t v33 = std::__next_prime(v33);
      }
      else
      {
        uint64_t v35 = 1 << -(char)__clz(v33 - 1);
        if (v33 >= 2) {
          unint64_t v33 = v35;
        }
      }
      if (*(void *)&prime <= v33) {
        int8x8_t prime = (int8x8_t)v33;
      }
      if (*(void *)&prime >= v14)
      {
        unint64_t v14 = *(void *)(a1 + 96);
      }
      else
      {
        if (prime)
        {
LABEL_37:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          unsigned int v27 = operator new(8 * *(void *)&prime);
          uint8x8_t v28 = *(void **)(a1 + 88);
          *(void *)(a1 + 88) = v27;
          if (v28) {
            operator delete(v28);
          }
          uint64_t v29 = 0;
          *(int8x8_t *)(a1 + 96) = prime;
          do
            *(void *)(*(void *)(a1 + 88) + 8 * v29++) = 0;
          while (*(void *)&prime != v29);
          uint8x8_t v30 = *(void **)(a1 + 104);
          if (v30)
          {
            unint64_t v31 = v30[1];
            uint8x8_t v32 = (uint8x8_t)vcnt_s8(prime);
            v32.i16[0] = vaddlv_u8(v32);
            if (v32.u32[0] > 1uLL)
            {
              if (v31 >= *(void *)&prime) {
                v31 %= *(void *)&prime;
              }
            }
            else
            {
              v31 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)(a1 + 88) + 8 * v31) = a1 + 104;
            uint64_t v36 = (void *)*v30;
            if (*v30)
            {
              do
              {
                unint64_t v37 = v36[1];
                if (v32.u32[0] > 1uLL)
                {
                  if (v37 >= *(void *)&prime) {
                    v37 %= *(void *)&prime;
                  }
                }
                else
                {
                  v37 &= *(void *)&prime - 1;
                }
                if (v37 != v31)
                {
                  uint64_t v38 = *(void *)(a1 + 88);
                  if (!*(void *)(v38 + 8 * v37))
                  {
                    *(void *)(v38 + 8 * v37) = v30;
                    goto LABEL_62;
                  }
                  void *v30 = *v36;
                  *uint64_t v36 = **(void **)(*(void *)(a1 + 88) + 8 * v37);
                  **(void **)(*(void *)(a1 + 88) + 8 * v37) = v36;
                  uint64_t v36 = v30;
                }
                unint64_t v37 = v31;
LABEL_62:
                uint8x8_t v30 = v36;
                uint64_t v36 = (void *)*v36;
                unint64_t v31 = v37;
              }
              while (v36);
            }
          }
          unint64_t v14 = (unint64_t)prime;
          goto LABEL_66;
        }
        __int16 v47 = *(void **)(a1 + 88);
        *(void *)(a1 + 88) = 0;
        if (v47) {
          operator delete(v47);
        }
        unint64_t v14 = 0;
        *(void *)(a1 + 96) = 0;
      }
    }
LABEL_66:
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v13 >= v14) {
        unint64_t v6 = v13 % v14;
      }
      else {
        unint64_t v6 = v13;
      }
    }
    else
    {
      unint64_t v6 = (v14 - 1) & v13;
    }
  }
  uint64_t v39 = *(void *)(a1 + 88);
  int8x8_t v40 = *(void **)(v39 + 8 * v6);
  if (v40)
  {
    *unint64_t v20 = *v40;
  }
  else
  {
    *unint64_t v20 = *(void *)(a1 + 104);
    *(void *)(a1 + 104) = v20;
    *(void *)(v39 + 8 * v6) = a1 + 104;
    if (!*v20) {
      goto LABEL_80;
    }
    unint64_t v41 = *(void *)(*v20 + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v41 >= v14) {
        v41 %= v14;
      }
    }
    else
    {
      v41 &= v14 - 1;
    }
    int8x8_t v40 = (void *)(*(void *)(a1 + 88) + 8 * v41);
  }
  *int8x8_t v40 = v20;
LABEL_80:
  ++*(void *)(a1 + 112);
  *(void *)uint64_t v59 = a1;
  *(_OWORD *)&v59[8] = v56;
  *(void *)&v59[24] = a4;
  uint64_t v60 = a5;
  std::string v62 = 0;
  uint64_t v63 = 0;
  uint64_t v61 = 0;
  std::vector<Phase::SpatialModeler::OptionalPropertyDescription>::__init_with_size[abi:ne180100]<Phase::SpatialModeler::OptionalPropertyDescription*,Phase::SpatialModeler::OptionalPropertyDescription*>((uint64_t)&v61, *a6, a6[1], 0x6DB6DB6DB6DB6DB7 * (((char *)a6[1] - (char *)*a6) >> 3));
  uint64_t v42 = **(void **)(a1 + 8);
  unint64_t v58 = 0;
  BOOL v57 = 1;
  uint64_t v43 = Phase::LockFreeQueueMPSC::GetWriteBuffer((atomic_uchar *)v42, 72, &v58, &v57);
  if (!v43)
  {
    uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance(0);
    Phase::Logger::DumpTailspinWithThrottleAsync(Instance, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
    __int16 v54 = **(id **)(v42 + 48);
    if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = "CommandQueue.hpp";
      __int16 v65 = 1024;
      int v66 = 100;
      _os_log_impl(&dword_221E5E000, v54, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [true is true]: \"CommandQueue unable to retrieve write buffer; buffer "
        "is full, unable to grow.\"",
        buf,
        0x12u);
    }
    int v55 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v55, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
  }
  if (v57)
  {
    uint64_t v44 = **(id **)(v42 + 48);
    if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 136315906;
      *(void *)&uint8_t buf[4] = "CommandQueue.hpp";
      __int16 v65 = 1024;
      int v66 = 89;
      __int16 v67 = 2048;
      unint64_t v68 = v58;
      __int16 v69 = 2048;
      uint64_t v70 = 72;
      _os_log_impl(&dword_221E5E000, v44, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: CommandQueue grew buffer to %zu bytes to accommodate extra %zu bytes - this usually means the system is under load or the command queue is too small.", buf, 0x26u);
    }
  }
  *(void *)uint64_t v43 = &unk_26D472D00;
  long long v45 = *(_OWORD *)v59;
  long long v46 = *(_OWORD *)&v59[16];
  *(void *)(v43 + 40) = v60;
  *(_OWORD *)(v43 + 24) = v46;
  *(_OWORD *)(v43 + 8) = v45;
  *(void *)(v43 + 56) = 0;
  *(void *)(v43 + 64) = 0;
  *(void *)(v43 + 48) = 0;
  std::vector<Phase::SpatialModeler::OptionalPropertyDescription>::__init_with_size[abi:ne180100]<Phase::SpatialModeler::OptionalPropertyDescription*,Phase::SpatialModeler::OptionalPropertyDescription*>(v43 + 48, v61, v62, 0x6DB6DB6DB6DB6DB7 * (((char *)v62 - (char *)v61) >> 3));
  Phase::LockFreeQueueSPSC::CommitBytes((atomic_uchar *)v42, 72);
  atomic_store(0, (unsigned __int8 *)(v42 + 40));
  *(void *)std::string buf = &v61;
  std::vector<Phase::SpatialModeler::OptionalPropertyDescription>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void sub_221EAD4F8(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x221EAD260);
  }
  _Unwind_Resume(exception_object);
}

void sub_221EAD55C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  std::vector<Phase::SpatialModeler::OptionalPropertyDescription>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  JUMPOUT(0x221EAD534);
}

void sub_221EAD57C(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x221EAD534);
}

std::logic_error *_ZN5Phase10Controller15IdAlreadyExistsCI1St11logic_errorEPKc(std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)&unk_26D472FA0;
  return result;
}

void *Phase::Controller::SpatialModelerCategory::UnregisterSubmix(void *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result;
  uint64_t v4 = 0;
  uint64_t v37 = *MEMORY[0x263EF8340];
  *(void *)&long long v26 = a2;
  *((void *)&v26 + 1) = a3;
  unint64_t v5 = 0xCBF29CE484222325;
  do
    unint64_t v5 = 0x100000001B3 * (v5 ^ *((char *)&v26 + v4++));
  while (v4 != 16);
  int8x8_t v6 = (int8x8_t)result[12];
  if (!*(void *)&v6) {
    return result;
  }
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v6);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v8 = v5;
    if (v5 >= *(void *)&v6) {
      unint64_t v8 = v5 % *(void *)&v6;
    }
  }
  else
  {
    unint64_t v8 = (*(void *)&v6 - 1) & v5;
  }
  uint64_t v9 = result[11];
  uint8x8_t v10 = *(void ***)(v9 + 8 * v8);
  if (!v10) {
    return result;
  }
  uint64_t result = *v10;
  if (!*v10) {
    return result;
  }
  uint64_t v11 = *(void *)&v6 - 1;
  while (1)
  {
    unint64_t v12 = result[1];
    if (v12 == v5) {
      break;
    }
    if (v7.u32[0] > 1uLL)
    {
      if (v12 >= *(void *)&v6) {
        v12 %= *(void *)&v6;
      }
    }
    else
    {
      v12 &= v11;
    }
    if (v12 != v8) {
      return result;
    }
LABEL_23:
    uint64_t result = (void *)*result;
    if (!result) {
      return result;
    }
  }
  if (result[2] != a2 || result[3] != a3) {
    goto LABEL_23;
  }
  unint64_t v14 = (void *)*result;
  if (v7.u32[0] > 1uLL)
  {
    if (v5 >= *(void *)&v6) {
      v5 %= *(void *)&v6;
    }
  }
  else
  {
    v5 &= v11;
  }
  uint8x8_t v15 = *(void **)(v9 + 8 * v5);
  do
  {
    int v16 = v15;
    uint8x8_t v15 = (void *)*v15;
  }
  while (v15 != result);
  if (v16 == v3 + 13) {
    goto LABEL_42;
  }
  unint64_t v17 = v16[1];
  if (v7.u32[0] > 1uLL)
  {
    if (v17 >= *(void *)&v6) {
      v17 %= *(void *)&v6;
    }
  }
  else
  {
    v17 &= v11;
  }
  if (v17 == v5)
  {
LABEL_44:
    if (v14)
    {
      unint64_t v18 = v14[1];
      goto LABEL_46;
    }
  }
  else
  {
LABEL_42:
    if (!v14) {
      goto LABEL_43;
    }
    unint64_t v18 = v14[1];
    if (v7.u32[0] > 1uLL)
    {
      unint64_t v19 = v14[1];
      if (v18 >= *(void *)&v6) {
        unint64_t v19 = v18 % *(void *)&v6;
      }
    }
    else
    {
      unint64_t v19 = v18 & v11;
    }
    if (v19 != v5)
    {
LABEL_43:
      *(void *)(v9 + 8 * v5) = 0;
      unint64_t v14 = (void *)*result;
      goto LABEL_44;
    }
LABEL_46:
    if (v7.u32[0] > 1uLL)
    {
      if (v18 >= *(void *)&v6) {
        v18 %= *(void *)&v6;
      }
    }
    else
    {
      v18 &= v11;
    }
    if (v18 != v5)
    {
      *(void *)(v3[11] + 8 * v18) = v16;
      unint64_t v14 = (void *)*result;
    }
  }
  *int v16 = v14;
  std::logic_error *result = 0;
  --v3[14];
  operator delete(result);
  uint64_t v20 = *(void *)v3[1];
  unint64_t v28 = 0;
  BOOL v27 = 1;
  uint64_t v21 = Phase::LockFreeQueueMPSC::GetWriteBuffer((atomic_uchar *)v20, 32, &v28, &v27);
  if (!v21)
  {
    uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance(0);
    Phase::Logger::DumpTailspinWithThrottleAsync(Instance, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
    unint64_t v24 = **(id **)(v20 + 48);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315394;
      uint8x8_t v30 = "CommandQueue.hpp";
      __int16 v31 = 1024;
      int v32 = 100;
      _os_log_impl(&dword_221E5E000, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [true is true]: \"CommandQueue unable to retrieve write buffer; buffer "
        "is full, unable to grow.\"",
        buf,
        0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
  }
  if (v27)
  {
    float v22 = **(id **)(v20 + 48);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 136315906;
      uint8x8_t v30 = "CommandQueue.hpp";
      __int16 v31 = 1024;
      int v32 = 89;
      __int16 v33 = 2048;
      unint64_t v34 = v28;
      __int16 v35 = 2048;
      uint64_t v36 = 32;
      _os_log_impl(&dword_221E5E000, v22, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: CommandQueue grew buffer to %zu bytes to accommodate extra %zu bytes - this usually means the system is under load or the command queue is too small.", buf, 0x26u);
    }
  }
  *(void *)uint64_t v21 = &unk_26D472D28;
  *(void *)(v21 + 8) = v3;
  *(_OWORD *)(v21 + 16) = v26;
  uint64_t result = (void *)Phase::LockFreeQueueSPSC::CommitBytes((atomic_uchar *)v20, 32);
  atomic_store(0, (unsigned __int8 *)(v20 + 40));
  return result;
}

void sub_221EAD9B0(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x221EAD8CCLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Controller::SpatialModelerCategory::AddInput(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v8 = **(void **)(a1 + 8);
  unint64_t v16 = 0;
  BOOL v15 = 1;
  uint64_t v9 = Phase::LockFreeQueueMPSC::GetWriteBuffer((atomic_uchar *)v8, 40, &v16, &v15);
  if (!v9)
  {
    uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance(0);
    Phase::Logger::DumpTailspinWithThrottleAsync(Instance, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
    unint64_t v13 = **(id **)(v8 + 48);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315394;
      unint64_t v18 = "CommandQueue.hpp";
      __int16 v19 = 1024;
      int v20 = 100;
      _os_log_impl(&dword_221E5E000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [true is true]: \"CommandQueue unable to retrieve write buffer; buffer "
        "is full, unable to grow.\"",
        buf,
        0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
  }
  if (v15)
  {
    uint8x8_t v10 = **(id **)(v8 + 48);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 136315906;
      unint64_t v18 = "CommandQueue.hpp";
      __int16 v19 = 1024;
      int v20 = 89;
      __int16 v21 = 2048;
      unint64_t v22 = v16;
      __int16 v23 = 2048;
      uint64_t v24 = 40;
      _os_log_impl(&dword_221E5E000, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: CommandQueue grew buffer to %zu bytes to accommodate extra %zu bytes - this usually means the system is under load or the command queue is too small.", buf, 0x26u);
    }
  }
  *(void *)uint64_t v9 = &unk_26D472D50;
  *(void *)(v9 + 8) = a1;
  *(void *)(v9 + 16) = a2;
  *(void *)(v9 + 24) = a3;
  *(double *)(v9 + 32) = a4;
  uint64_t result = Phase::LockFreeQueueSPSC::CommitBytes((atomic_uchar *)v8, 40);
  atomic_store(0, (unsigned __int8 *)(v8 + 40));
  return result;
}

void sub_221EADC30(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x221EADB44);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Controller::SpatialModelerCategory::SetInputSendLevel(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v8 = **(void **)(a1 + 8);
  unint64_t v16 = 0;
  BOOL v15 = 1;
  uint64_t v9 = Phase::LockFreeQueueMPSC::GetWriteBuffer((atomic_uchar *)v8, 40, &v16, &v15);
  if (!v9)
  {
    uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance(0);
    Phase::Logger::DumpTailspinWithThrottleAsync(Instance, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
    unint64_t v13 = **(id **)(v8 + 48);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315394;
      unint64_t v18 = "CommandQueue.hpp";
      __int16 v19 = 1024;
      int v20 = 100;
      _os_log_impl(&dword_221E5E000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [true is true]: \"CommandQueue unable to retrieve write buffer; buffer "
        "is full, unable to grow.\"",
        buf,
        0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
  }
  if (v15)
  {
    uint8x8_t v10 = **(id **)(v8 + 48);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 136315906;
      unint64_t v18 = "CommandQueue.hpp";
      __int16 v19 = 1024;
      int v20 = 89;
      __int16 v21 = 2048;
      unint64_t v22 = v16;
      __int16 v23 = 2048;
      uint64_t v24 = 40;
      _os_log_impl(&dword_221E5E000, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: CommandQueue grew buffer to %zu bytes to accommodate extra %zu bytes - this usually means the system is under load or the command queue is too small.", buf, 0x26u);
    }
  }
  *(void *)uint64_t v9 = &unk_26D472D78;
  *(void *)(v9 + 8) = a1;
  *(void *)(v9 + 16) = a2;
  *(void *)(v9 + 24) = a3;
  *(double *)(v9 + 32) = a4;
  uint64_t result = Phase::LockFreeQueueSPSC::CommitBytes((atomic_uchar *)v8, 40);
  atomic_store(0, (unsigned __int8 *)(v8 + 40));
  return result;
}

void sub_221EADEB0(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x221EADDC4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Controller::SpatialModelerCategory::RemoveInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v6 = **(void **)(a1 + 8);
  unint64_t v14 = 0;
  BOOL v13 = 1;
  uint8x8_t v7 = (void *)Phase::LockFreeQueueMPSC::GetWriteBuffer((atomic_uchar *)v6, 32, &v14, &v13);
  if (!v7)
  {
    uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance(0);
    Phase::Logger::DumpTailspinWithThrottleAsync(Instance, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
    uint64_t v11 = **(id **)(v6 + 48);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315394;
      unint64_t v16 = "CommandQueue.hpp";
      __int16 v17 = 1024;
      int v18 = 100;
      _os_log_impl(&dword_221E5E000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [true is true]: \"CommandQueue unable to retrieve write buffer; buffer "
        "is full, unable to grow.\"",
        buf,
        0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
  }
  if (v13)
  {
    uint64_t v8 = **(id **)(v6 + 48);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 136315906;
      unint64_t v16 = "CommandQueue.hpp";
      __int16 v17 = 1024;
      int v18 = 89;
      __int16 v19 = 2048;
      unint64_t v20 = v14;
      __int16 v21 = 2048;
      uint64_t v22 = 32;
      _os_log_impl(&dword_221E5E000, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: CommandQueue grew buffer to %zu bytes to accommodate extra %zu bytes - this usually means the system is under load or the command queue is too small.", buf, 0x26u);
    }
  }
  void *v7 = &unk_26D472DA0;
  v7[1] = a1;
  double v7[2] = a2;
  v7[3] = a3;
  uint64_t result = Phase::LockFreeQueueSPSC::CommitBytes((atomic_uchar *)v6, 32);
  atomic_store(0, (unsigned __int8 *)(v6 + 40));
  return result;
}

void sub_221EAE120(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x221EAE038);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Controller::SpatialModelerCategory::SetPlayState(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v8 = **(void **)(a1 + 8);
  unint64_t v16 = 0;
  BOOL v15 = 1;
  uint64_t v9 = Phase::LockFreeQueueMPSC::GetWriteBuffer((atomic_uchar *)v8, 40, &v16, &v15);
  if (!v9)
  {
    uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance(0);
    Phase::Logger::DumpTailspinWithThrottleAsync(Instance, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
    BOOL v13 = **(id **)(v8 + 48);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315394;
      int v18 = "CommandQueue.hpp";
      __int16 v19 = 1024;
      int v20 = 100;
      _os_log_impl(&dword_221E5E000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [true is true]: \"CommandQueue unable to retrieve write buffer; buffer "
        "is full, unable to grow.\"",
        buf,
        0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
  }
  if (v15)
  {
    uint8x8_t v10 = **(id **)(v8 + 48);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 136315906;
      int v18 = "CommandQueue.hpp";
      __int16 v19 = 1024;
      int v20 = 89;
      __int16 v21 = 2048;
      unint64_t v22 = v16;
      __int16 v23 = 2048;
      uint64_t v24 = 40;
      _os_log_impl(&dword_221E5E000, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: CommandQueue grew buffer to %zu bytes to accommodate extra %zu bytes - this usually means the system is under load or the command queue is too small.", buf, 0x26u);
    }
  }
  *(void *)uint64_t v9 = &unk_26D472DC8;
  *(void *)(v9 + 8) = a1;
  *(void *)(v9 + 16) = a2;
  *(void *)(v9 + 24) = a3;
  *(_DWORD *)(v9 + 32) = a4;
  uint64_t result = Phase::LockFreeQueueSPSC::CommitBytes((atomic_uchar *)v8, 40);
  atomic_store(0, (unsigned __int8 *)(v8 + 40));
  return result;
}

void sub_221EAE3A0(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x221EAE2B4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Controller::SpatialModelerCategory::SetMinimumSimulationGainInDecibels(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v8 = **(void **)(a1 + 8);
  unint64_t v16 = 0;
  BOOL v15 = 1;
  uint64_t v9 = Phase::LockFreeQueueMPSC::GetWriteBuffer((atomic_uchar *)v8, 40, &v16, &v15);
  if (!v9)
  {
    uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance(0);
    Phase::Logger::DumpTailspinWithThrottleAsync(Instance, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
    BOOL v13 = **(id **)(v8 + 48);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315394;
      int v18 = "CommandQueue.hpp";
      __int16 v19 = 1024;
      int v20 = 100;
      _os_log_impl(&dword_221E5E000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [true is true]: \"CommandQueue unable to retrieve write buffer; buffer "
        "is full, unable to grow.\"",
        buf,
        0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
  }
  if (v15)
  {
    uint8x8_t v10 = **(id **)(v8 + 48);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 136315906;
      int v18 = "CommandQueue.hpp";
      __int16 v19 = 1024;
      int v20 = 89;
      __int16 v21 = 2048;
      unint64_t v22 = v16;
      __int16 v23 = 2048;
      uint64_t v24 = 40;
      _os_log_impl(&dword_221E5E000, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: CommandQueue grew buffer to %zu bytes to accommodate extra %zu bytes - this usually means the system is under load or the command queue is too small.", buf, 0x26u);
    }
  }
  *(void *)uint64_t v9 = &unk_26D472DF0;
  *(void *)(v9 + 8) = a1;
  *(void *)(v9 + 16) = a2;
  *(void *)(v9 + 24) = a3;
  *(double *)(v9 + 32) = a4;
  uint64_t result = Phase::LockFreeQueueSPSC::CommitBytes((atomic_uchar *)v8, 40);
  atomic_store(0, (unsigned __int8 *)(v8 + 40));
  return result;
}

void sub_221EAE620(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x221EAE534);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Controller::SpatialModelerCategory::SetSimulationGainInDecibels(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v8 = **(void **)(a1 + 8);
  unint64_t v16 = 0;
  BOOL v15 = 1;
  uint64_t v9 = Phase::LockFreeQueueMPSC::GetWriteBuffer((atomic_uchar *)v8, 40, &v16, &v15);
  if (!v9)
  {
    uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance(0);
    Phase::Logger::DumpTailspinWithThrottleAsync(Instance, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
    BOOL v13 = **(id **)(v8 + 48);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315394;
      int v18 = "CommandQueue.hpp";
      __int16 v19 = 1024;
      int v20 = 100;
      _os_log_impl(&dword_221E5E000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [true is true]: \"CommandQueue unable to retrieve write buffer; buffer "
        "is full, unable to grow.\"",
        buf,
        0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
  }
  if (v15)
  {
    uint8x8_t v10 = **(id **)(v8 + 48);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 136315906;
      int v18 = "CommandQueue.hpp";
      __int16 v19 = 1024;
      int v20 = 89;
      __int16 v21 = 2048;
      unint64_t v22 = v16;
      __int16 v23 = 2048;
      uint64_t v24 = 40;
      _os_log_impl(&dword_221E5E000, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: CommandQueue grew buffer to %zu bytes to accommodate extra %zu bytes - this usually means the system is under load or the command queue is too small.", buf, 0x26u);
    }
  }
  *(void *)uint64_t v9 = &unk_26D472E18;
  *(void *)(v9 + 8) = a1;
  *(void *)(v9 + 16) = a2;
  *(void *)(v9 + 24) = a3;
  *(double *)(v9 + 32) = a4;
  uint64_t result = Phase::LockFreeQueueSPSC::CommitBytes((atomic_uchar *)v8, 40);
  atomic_store(0, (unsigned __int8 *)(v8 + 40));
  return result;
}

void sub_221EAE8A0(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x221EAE7B4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Controller::SpatialModelerCategory::SetProperty(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char a5, _OWORD *a6)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  long long v11 = a6[1];
  *(_OWORD *)&v22[3] = *a6;
  *(_OWORD *)&v22[19] = v11;
  *(_OWORD *)&v22[35] = a6[2];
  uint64_t v12 = **(void **)(a1 + 8);
  unint64_t v21 = 0;
  BOOL v20 = 1;
  uint64_t v13 = Phase::LockFreeQueueMPSC::GetWriteBuffer((atomic_uchar *)v12, 88, &v21, &v20);
  if (!v13)
  {
    uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance(0);
    Phase::Logger::DumpTailspinWithThrottleAsync(Instance, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
    int v18 = **(id **)(v12 + 48);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315394;
      uint64_t v24 = "CommandQueue.hpp";
      __int16 v25 = 1024;
      int v26 = 100;
      _os_log_impl(&dword_221E5E000, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [true is true]: \"CommandQueue unable to retrieve write buffer; buffer "
        "is full, unable to grow.\"",
        buf,
        0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
  }
  if (v20)
  {
    unint64_t v14 = **(id **)(v12 + 48);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 136315906;
      uint64_t v24 = "CommandQueue.hpp";
      __int16 v25 = 1024;
      int v26 = 89;
      __int16 v27 = 2048;
      unint64_t v28 = v21;
      __int16 v29 = 2048;
      uint64_t v30 = 88;
      _os_log_impl(&dword_221E5E000, v14, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: CommandQueue grew buffer to %zu bytes to accommodate extra %zu bytes - this usually means the system is under load or the command queue is too small.", buf, 0x26u);
    }
  }
  long long v15 = *(_OWORD *)&v22[16];
  *(_OWORD *)(v13 + 37) = *(_OWORD *)v22;
  *(void *)uint64_t v13 = &unk_26D472E40;
  *(void *)(v13 + 8) = a1;
  *(void *)(v13 + 16) = a2;
  *(void *)(v13 + 24) = a3;
  *(_DWORD *)(v13 + 32) = a4;
  *(unsigned char *)(v13 + 36) = a5;
  *(_OWORD *)(v13 + 53) = v15;
  *(_OWORD *)(v13 + 69) = *(_OWORD *)&v22[32];
  *(_DWORD *)(v13 + 84) = *(_DWORD *)&v22[47];
  uint64_t result = Phase::LockFreeQueueSPSC::CommitBytes((atomic_uchar *)v12, 88);
  atomic_store(0, (unsigned __int8 *)(v12 + 40));
  return result;
}

void sub_221EAEB5C(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x221EAEA70);
  }
  _Unwind_Resume(exception_object);
}

void Phase::Controller::SpatialModelerCategory::SetComputeTime(Phase::Controller::SpatialModelerCategory *this, double a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (a2 <= 0.0)
  {
    uint64_t v2 = **(id **)(Phase::Logger::GetInstance(this) + 224);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      int v4 = 136315394;
      unint64_t v5 = "CvmSpatialModelerCategory.mm";
      __int16 v6 = 1024;
      int v7 = 265;
      _os_log_impl(&dword_221E5E000, v2, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: inComputeTime > 0 is false.", (uint8_t *)&v4, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "PRECONDITION: inComputeTime > 0 is false.");
  }
  *((double *)this + 16) = a2;
  atomic_store(*(unint64_t *)&a2, (unint64_t *)(*((void *)this + 10) + 312));
}

void sub_221EAECD0(_Unwind_Exception *exception_object)
{
}

void Phase::Controller::SpatialModelerCategory::GetEntityShapeTemplates(Phase::Controller::SpatialModelerCategory *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  for (unsigned int i = (void *)*((void *)this + 7); i; unsigned int i = (void *)*i)
  {
    uint64_t v4 = *(void *)(i[3] + 5864);
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v5 = 0;
    std::vector<Phase::SpatialModeler::EntityShapeTemplate>::__init_with_size[abi:ne180100]<Phase::SpatialModeler::EntityShapeTemplate*,Phase::SpatialModeler::EntityShapeTemplate*>(&v5, *(void *)(v4 + 248), *(void *)(v4 + 256), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(v4 + 256) - *(void *)(v4 + 248)) >> 3));
    std::vector<Phase::SpatialModeler::EntityShapeTemplate>::__insert_with_size[abi:ne180100]<std::__wrap_iter<Phase::SpatialModeler::EntityShapeTemplate const*>,std::__wrap_iter<Phase::SpatialModeler::EntityShapeTemplate const*>>((char **)a2, *(void *)(a2 + 8), v5, v6, 0x6DB6DB6DB6DB6DB7 * ((v6 - v5) >> 3));
    uint64_t v8 = (void **)&v5;
    std::vector<Phase::SpatialModeler::EntityShapeTemplate>::__destroy_vector::operator()[abi:ne180100](&v8);
  }
}

void sub_221EAED98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, void ***a12)
{
  a12 = &a9;
  std::vector<Phase::SpatialModeler::EntityShapeTemplate>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  std::vector<Phase::SpatialModeler::EntityShapeTemplate>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::SpatialModelerCategory::Reset(Phase::Controller::SpatialModelerCategory *this)
{
  uint64_t result = Phase::Commandable<128,Phase::LockFreeQueueMPSC>::ExecuteCommands((uint64_t)this);
  for (unsigned int i = (uint64_t **)*((void *)this + 7); i; unsigned int i = (uint64_t **)*i)
    uint64_t result = (uint64_t)Phase::Controller::SpatialModelerInstance::Reset((Phase::Controller::SpatialSubmixRouter **)i[3]);
  return result;
}

void Phase::Controller::IdAlreadyExists::~IdAlreadyExists(std::logic_error *this)
{
  std::logic_error::~logic_error(this);

  JUMPOUT(0x223C938A0);
}

void std::vector<Phase::SpatialModeler::OptionalPropertyDescription>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<Phase::SpatialModeler::OptionalPropertyDescription>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<Phase::SpatialModeler::OptionalPropertyDescription>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 56)
  {
    if (*(char *)(i - 33) < 0) {
      operator delete(*(void **)(i - 56));
    }
  }
  a1[1] = v2;
}

uint64_t (**std::any_cast[abi:ne180100]<Phase::Controller::SpatialModelerRegistry * const>(uint64_t (**result)(uint64_t, void, void, void, void *)))(uint64_t, void, void, void, void *)
{
  if (result)
  {
    if (*result) {
      return (uint64_t (**)(uint64_t, void, void, void, void *))(*result)(3, result, 0, 0, &std::__any_imp::__unique_typeinfo<Phase::Controller::SpatialModelerRegistry *>::__id);
    }
    else {
      return 0;
    }
  }
  return result;
}

Phase::Controller::SpatialModelerInstance *std::unique_ptr<Phase::Controller::SpatialModelerInstance>::reset[abi:ne180100](Phase::Controller::SpatialModelerInstance **a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    Phase::Controller::SpatialModelerInstance::~SpatialModelerInstance(result);
    JUMPOUT(0x223C938A0);
  }
  return result;
}

uint64_t std::vector<Phase::SpatialModeler::OptionalPropertyDescription>::__init_with_size[abi:ne180100]<Phase::SpatialModeler::OptionalPropertyDescription*,Phase::SpatialModeler::OptionalPropertyDescription*>(uint64_t result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >= 0x492492492492493) {
      std::vector<Phase::SpatialModeler::OptionalPropertyDescription>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v7 = (void *)result;
    uint64_t v8 = (char *)operator new(56 * a4);
    void *v7 = v8;
    v7[1] = v8;
    double v7[2] = &v8[56 * a4];
    long long v15 = v8;
    unint64_t v16 = v8;
    v13[0] = v7 + 2;
    v13[1] = &v15;
    void v13[2] = &v16;
    char v14 = 0;
    if (a2 == a3)
    {
      uint64_t v9 = v8;
    }
    else
    {
      uint64_t v9 = v8;
      do
      {
        if (*((char *)a2 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v9, *(const std::string::value_type **)a2, *((void *)a2 + 1));
          long long v11 = v16;
        }
        else
        {
          long long v10 = *a2;
          *((void *)v9 + 2) = *((void *)a2 + 2);
          *(_OWORD *)uint64_t v9 = v10;
          long long v11 = v9;
        }
        long long v12 = *(long long *)((char *)a2 + 24);
        *(_OWORD *)(v9 + 40) = *(long long *)((char *)a2 + 40);
        *(_OWORD *)(v9 + 24) = v12;
        a2 = (long long *)((char *)a2 + 56);
        uint64_t v9 = v11 + 56;
        unint64_t v16 = v11 + 56;
      }
      while (a2 != a3);
    }
    char v14 = 1;
    uint64_t result = std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Phase::SpatialModeler::OptionalPropertyDescription>,Phase::SpatialModeler::OptionalPropertyDescription*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
    v7[1] = v9;
  }
  return result;
}

void sub_221EAF0A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void std::vector<Phase::SpatialModeler::OptionalPropertyDescription>::__throw_length_error[abi:ne180100]()
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Phase::SpatialModeler::OptionalPropertyDescription>,Phase::SpatialModeler::OptionalPropertyDescription*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<Phase::SpatialModeler::OptionalPropertyDescription>,Phase::SpatialModeler::OptionalPropertyDescription*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<Phase::SpatialModeler::OptionalPropertyDescription>,Phase::SpatialModeler::OptionalPropertyDescription*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 33) < 0) {
      operator delete(*(void **)(v1 - 56));
    }
    v1 -= 56;
  }
}

uint64_t Phase::LambdaFunction<Phase::Controller::SpatialModelerCategory::RegisterSubmix(Phase::UniqueObjectId,Phase::Handle64,Phase::Handle64,std::vector<Phase::SpatialModeler::OptionalPropertyDescription> const&)::$_0,void>::~LambdaFunction(uint64_t a1)
{
  *(void *)a1 = &unk_26D472D00;
  uint64_t v3 = (void **)(a1 + 48);
  std::vector<Phase::SpatialModeler::OptionalPropertyDescription>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  *(void *)a1 = &unk_26D472D00;
  uint64_t v3 = (void **)(a1 + 48);
  std::vector<Phase::SpatialModeler::OptionalPropertyDescription>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x223C938A0](a1, 0x10A1C4006195FD6);
}

void Phase::LambdaFunction<Phase::Controller::SpatialModelerCategory::RegisterSubmix(Phase::UniqueObjectId,Phase::Handle64,Phase::Handle64,std::vector<Phase::SpatialModeler::OptionalPropertyDescription> const&)::$_0,void>::operator()(void *a1)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1[1] + 80);
  *(_OWORD *)long long v11 = *((_OWORD *)a1 + 1);
  uint64_t v3 = (Phase::Logger *)std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((void *)(v2 + 8), v11);
  if (!v3)
  {
    unint64_t v4 = a1[2];
    unint64_t v5 = a1[3];
    uint64_t v6 = a1[4];
    uint64_t v7 = a1[5];
    Phase::Controller::SpatialModelerInstance::RegisterSubmix(v2, v4, v5, v6, v7, a1 + 6);
  }
  uint64_t v8 = **(id **)(Phase::Logger::GetInstance(v3) + 240);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    uint64_t v9 = a1[2];
    *(_DWORD *)long long v11 = 136315650;
    *(void *)&v11[4] = "CvmSpatialModelerCategory.mm";
    *(_WORD *)&v11[12] = 1024;
    *(_DWORD *)&v11[14] = 172;
    __int16 v12 = 2048;
    uint64_t v13 = v9;
    _os_log_impl(&dword_221E5E000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (IdAlreadyExists) [activeModeler->IsRegistered(inSubmixId) is true]: \"SubmixId %llu is already registered!\"", v11, 0x1Cu);
  }
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  _ZN5Phase10Controller15IdAlreadyExistsCI1St11logic_errorEPKc(exception, "SubmixId %llu is already registered!");
}

void sub_221EAF370(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Phase::LambdaFunction<Phase::Controller::SpatialModelerCategory::UnregisterSubmix(Phase::UniqueObjectId)::$_0,void>::~LambdaFunction()
{
}

void Phase::LambdaFunction<Phase::Controller::SpatialModelerCategory::UnregisterSubmix(Phase::UniqueObjectId)::$_0,void>::operator()(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 80);
  *(_OWORD *)uint64_t v7 = *(_OWORD *)(a1 + 16);
  if (std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((void *)(v2 + 8), v7))
  {
    uint64_t v3 = *(void **)(a1 + 16);
    unint64_t v4 = *(void **)(a1 + 24);
    Phase::Controller::SpatialModelerInstance::UnregisterSubmix(v2, v3, v4);
  }
  else
  {
    unint64_t v5 = **(id **)(Phase::Logger::GetInstance(0) + 224);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *(void *)(a1 + 16);
      *(_DWORD *)uint64_t v7 = 136315650;
      *(void *)&v7[4] = "CvmSpatialModelerCategory.mm";
      *(_WORD *)&v7[12] = 1024;
      *(_DWORD *)&v7[14] = 195;
      __int16 v8 = 2048;
      uint64_t v9 = v6;
      _os_log_impl(&dword_221E5E000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d SubmixId %llu is not registered!", v7, 0x1Cu);
    }
  }
}

void Phase::LambdaFunction<Phase::Controller::SpatialModelerCategory::AddInput(Phase::UniqueObjectId,double)::$_0,void>::~LambdaFunction()
{
}

void *Phase::LambdaFunction<Phase::Controller::SpatialModelerCategory::AddInput(Phase::UniqueObjectId,double)::$_0,void>::operator()(uint64_t a1)
{
  return Phase::Controller::SpatialModelerInstance::AddInput(*(void *)(*(void *)(a1 + 8) + 80), *(void *)(a1 + 16), *(void *)(a1 + 24), *(double *)(a1 + 32));
}

void Phase::LambdaFunction<Phase::Controller::SpatialModelerCategory::SetInputSendLevel(Phase::UniqueObjectId,double)::$_0,void>::~LambdaFunction()
{
}

Phase::Logger *Phase::LambdaFunction<Phase::Controller::SpatialModelerCategory::SetInputSendLevel(Phase::UniqueObjectId,double)::$_0,void>::operator()(uint64_t a1)
{
  return Phase::Controller::SpatialModelerInstance::SetInputSendLevel(*(void *)(*(void *)(a1 + 8) + 80), *(void *)(a1 + 16), *(void *)(a1 + 24), *(double *)(a1 + 32));
}

void Phase::LambdaFunction<Phase::Controller::SpatialModelerCategory::RemoveInput(Phase::UniqueObjectId)::$_0,void>::~LambdaFunction()
{
}

void *Phase::LambdaFunction<Phase::Controller::SpatialModelerCategory::RemoveInput(Phase::UniqueObjectId)::$_0,void>::operator()(uint64_t a1)
{
  return Phase::Controller::SpatialModelerInstance::RemoveInput(*(void *)(*(void *)(a1 + 8) + 80), *(void **)(a1 + 16), *(void **)(a1 + 24));
}

void Phase::LambdaFunction<Phase::Controller::SpatialModelerCategory::SetPlayState(Phase::UniqueObjectId,Phase::Controller::PlayState)::$_0,void>::~LambdaFunction()
{
}

void *Phase::LambdaFunction<Phase::Controller::SpatialModelerCategory::SetPlayState(Phase::UniqueObjectId,Phase::Controller::PlayState)::$_0,void>::operator()(uint64_t a1)
{
  return Phase::Controller::SpatialModelerInstance::SetPlayState(*(void *)(*(void *)(a1 + 8) + 80), *(void *)(a1 + 16), *(void *)(a1 + 24), *(_DWORD *)(a1 + 32));
}

void Phase::LambdaFunction<Phase::Controller::SpatialModelerCategory::SetMinimumSimulationGainInDecibels(Phase::UniqueObjectId,double)::$_0,void>::~LambdaFunction()
{
}

uint64_t *Phase::LambdaFunction<Phase::Controller::SpatialModelerCategory::SetMinimumSimulationGainInDecibels(Phase::UniqueObjectId,double)::$_0,void>::operator()(void *a1)
{
  uint64_t v1 = a1[4];
  uint64_t result = Phase::Controller::SubmixSlotMap<Phase::Controller::SpatialModelerInstance::SubmixInfo>::MutableAt((void *)(*(void *)(a1[1] + 80) + 8), a1[2], a1[3]);
  result[7] = v1;
  return result;
}

void Phase::LambdaFunction<Phase::Controller::SpatialModelerCategory::SetSimulationGainInDecibels(Phase::UniqueObjectId,double)::$_0,void>::~LambdaFunction()
{
}

uint64_t *Phase::LambdaFunction<Phase::Controller::SpatialModelerCategory::SetSimulationGainInDecibels(Phase::UniqueObjectId,double)::$_0,void>::operator()(void *a1)
{
  uint64_t v1 = a1[4];
  uint64_t result = Phase::Controller::SubmixSlotMap<Phase::Controller::SpatialModelerInstance::SubmixInfo>::MutableAt((void *)(*(void *)(a1[1] + 80) + 8), a1[2], a1[3]);
  result[8] = v1;
  return result;
}

void Phase::LambdaFunction<Phase::Controller::SpatialModelerCategory::SetProperty(Phase::UniqueObjectId,unsigned int,Phase::Controller::PropertyType,std::variant<Phase::Controller::Parameter<double>,Phase::Handle64> const&)::$_0,void>::~LambdaFunction()
{
}

uint64_t Phase::LambdaFunction<Phase::Controller::SpatialModelerCategory::SetProperty(Phase::UniqueObjectId,unsigned int,Phase::Controller::PropertyType,std::variant<Phase::Controller::Parameter<double>,Phase::Handle64> const&)::$_0,void>::operator()(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 32);
  uint64_t v2 = *(unsigned __int8 *)(a1 + 36);
  uint64_t v3 = (long long *)(a1 + 40);
  unint64_t v4 = Phase::Controller::SubmixSlotMap<Phase::Controller::SpatialModelerInstance::SubmixInfo>::MutableAt((void *)(*(void *)(*(void *)(a1 + 8) + 80) + 8), *(void *)(a1 + 16), *(void *)(a1 + 24))+ 9;

  return Phase::Controller::OptionalProperties::SetValue(v4, v1, v2, v3);
}

void std::vector<Phase::SpatialModeler::EntityShapeTemplate>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  unsigned int v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    unint64_t v4 = (char *)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = v4 - 56;
        std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::~__hash_table((uint64_t)(v4 - 48));
        unint64_t v4 = v6;
      }
      while (v6 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey const,Phase::OptionsValue>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey const,Phase::OptionsValue>,0>(uint64_t a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>,(std::__variant_detail::_Trait)1>::~__dtor(a1 + 40);
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26D472E58[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJbijfdN5Phase6VectorIfLm2EEENS9_IfLm3EEENS9_IfLm4EEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIjNSG_IjEEEENSJ_IyNSG_IyEEEENS8_18UnorderedStringMapINS8_12OptionsValueEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSS_1EJbijfdSA_SB_SC_SI_SL_SN_SQ_EEEEEEDcSU_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJbijfdN5Phase6VectorIfLm2EEENS9_IfLm3EEENS9_IfLm4EEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIjNSG_IjEEEENSJ_IyNSG_IyEEEENS8_18UnorderedStringMapINS8_12OptionsValueEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSS_1EJbijfdSA_SB_SC_SI_SL_SN_SQ_EEEEEEDcSU_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm10EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJbijfdN5Phase6VectorIfLm2EEENS9_IfLm3EEENS9_IfLm4EEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIjNSG_IjEEEENSJ_IyNSG_IyEEEENS8_18UnorderedStringMapINS8_12OptionsValueEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSS_1EJbijfdSA_SB_SC_SI_SL_SN_SQ_EEEEEEDcSU_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v2;
    operator delete(v2);
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm11EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJbijfdN5Phase6VectorIfLm2EEENS9_IfLm3EEENS9_IfLm4EEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIjNSG_IjEEEENSJ_IyNSG_IyEEEENS8_18UnorderedStringMapINS8_12OptionsValueEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSS_1EJbijfdSA_SB_SC_SI_SL_SN_SQ_EEEEEEDcSU_DpT0_(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::~__hash_table(a2);
}

uint64_t std::vector<Phase::SpatialModeler::EntityShapeTemplate>::__insert_with_size[abi:ne180100]<std::__wrap_iter<Phase::SpatialModeler::EntityShapeTemplate const*>,std::__wrap_iter<Phase::SpatialModeler::EntityShapeTemplate const*>>(char **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5 = *a1;
  uint64_t v6 = (a2 - (uint64_t)*a1) / 56;
  uint64_t v7 = (uint64_t)&(*a1)[56 * v6];
  if (a5 < 1) {
    return v7;
  }
  uint64_t v13 = a1[2];
  uint64_t v11 = (uint64_t)(a1 + 2);
  __int16 v12 = v13;
  unint64_t v14 = *(void *)(v11 - 8);
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)&v13[-v14] >> 3) >= a5)
  {
    uint64_t v19 = v14 - v7;
    uint64_t v62 = v6;
    if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v14 - v7) >> 3) >= a5)
    {
      uint64_t v21 = a3 + 56 * a5;
      uint64_t v24 = *(char **)(v11 - 8);
LABEL_31:
      uint64_t v39 = v7 + 56 * a5;
      int8x8_t v40 = &v24[-56 * a5];
      unint64_t v41 = v24;
      if ((unint64_t)v40 < v14)
      {
        uint64_t v42 = (uint64_t *)&v5[56 * v62 + 8 + 8 * ((uint64_t)&v24[-v39] >> 3)];
        uint64_t v43 = v40;
        unint64_t v41 = v24;
        do
        {
          *(_DWORD *)unint64_t v41 = *((_DWORD *)v42 - 2);
          std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::__hash_table((uint64_t)(v41 + 8), v42);
          *((_DWORD *)v41 + 12) = *((_DWORD *)v43 + 12);
          v43 += 56;
          v41 += 56;
          v42 += 7;
        }
        while ((unint64_t)v43 < v14);
      }
      a1[1] = v41;
      if (v24 != (char *)v39)
      {
        uint64_t v44 = v40;
        long long v45 = v24;
        do
        {
          int v46 = *((_DWORD *)v44 - 14);
          v44 -= 56;
          *((_DWORD *)v45 - 14) = v46;
          v45 -= 56;
          __int16 v47 = (void **)(v45 + 8);
          if (*((void *)v45 + 4))
          {
            std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::__deallocate_node((uint64_t)(v45 + 8), *((void **)v24 - 4));
            *((void *)v24 - 4) = 0;
            uint64_t v48 = *((void *)v24 - 5);
            if (v48)
            {
              for (uint64_t i = 0; i != v48; ++i)
                *((void *)*v47 + i) = 0;
            }
            *((void *)v24 - 3) = 0;
          }
          uint64_t v50 = (void *)*((void *)v40 - 6);
          *((void *)v40 - 6) = 0;
          uint64_t v51 = *v47;
          *__int16 v47 = v50;
          if (v51) {
            operator delete(v51);
          }
          uint64_t v52 = *((void *)v40 - 4);
          uint64_t v53 = *((void *)v40 - 5);
          *((void *)v24 - 4) = v52;
          __int16 v54 = v24 - 32;
          *((void *)v24 - 5) = v53;
          *((void *)v40 - 5) = 0;
          uint64_t v55 = *((void *)v40 - 3);
          *((void *)v54 + 1) = v55;
          *((_DWORD *)v54 + 4) = *((_DWORD *)v40 - 4);
          if (v55)
          {
            unint64_t v56 = *(void *)(v52 + 8);
            unint64_t v57 = *((void *)v24 - 5);
            if ((v57 & (v57 - 1)) != 0)
            {
              if (v56 >= v57) {
                v56 %= v57;
              }
            }
            else
            {
              v56 &= v57 - 1;
            }
            *((void *)*v47 + v56) = v54;
            *((void *)v40 - 4) = 0;
            *((void *)v40 - 3) = 0;
          }
          *((_DWORD *)v24 - 2) = *((_DWORD *)v40 - 2);
          uint64_t v24 = v45;
          int8x8_t v40 = v44;
        }
        while (v44 != (char *)v7);
      }
      if (v21 != a3)
      {
        uint64_t v58 = a3 + 24;
        uint64_t v59 = v7;
        do
        {
          uint64_t v60 = v58 - 24;
          *(_DWORD *)uint64_t v59 = *(_DWORD *)(v58 - 24);
          if (v59 != v58 - 24)
          {
            *(_DWORD *)(v59 + 40) = *(_DWORD *)(v58 + 16);
            std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,void *> *>>((void *)(v59 + 8), *(uint64_t **)v58, 0);
          }
          *(_DWORD *)(v59 + 48) = *(_DWORD *)(v58 + 24);
          v58 += 56;
          v59 += 56;
        }
        while (v60 + 56 != v21);
      }
      return v7;
    }
    uint64_t v21 = a3 + 8 * ((uint64_t)(v14 - v7) >> 3);
    if (v21 == a4)
    {
      uint64_t v24 = *(char **)(v11 - 8);
    }
    else
    {
      uint64_t v22 = 0;
      do
      {
        uint64_t v23 = v21 + v22;
        *(_DWORD *)(v14 + v22) = *(_DWORD *)(v21 + v22);
        std::unordered_map<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,std::allocator<std::pair<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey const,Phase::OptionsValue>>>::unordered_map(v14 + v22 + 8, v21 + v22 + 8);
        *(_DWORD *)(v14 + v22 + 48) = *(_DWORD *)(v21 + v22 + 48);
        v22 += 56;
      }
      while (v23 + 56 != a4);
      uint64_t v24 = (char *)(v14 + v22);
      uint64_t v19 = v14 - v7;
    }
    a1[1] = v24;
    if (v19 >= 1) {
      goto LABEL_31;
    }
    return v7;
  }
  unint64_t v15 = a5 + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v14 - (void)v5) >> 3);
  if (v15 > 0x492492492492492) {
    std::vector<Phase::SpatialModeler::OptionalPropertyDescription>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v16 = 0x6DB6DB6DB6DB6DB7 * ((v12 - v5) >> 3);
  if (2 * v16 > v15) {
    unint64_t v15 = 2 * v16;
  }
  if (v16 >= 0x249249249249249) {
    unint64_t v17 = 0x492492492492492;
  }
  else {
    unint64_t v17 = v15;
  }
  uint64_t v68 = v11;
  if (v17) {
    int v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::SpatialModeler::EntityShapeTemplate>>(v11, v17);
  }
  else {
    int v18 = 0;
  }
  __int16 v25 = &v18[56 * v6];
  uint64_t v64 = v18;
  __int16 v65 = v25;
  int v66 = v25;
  __int16 v67 = &v18[56 * v17];
  uint64_t v26 = 56 * a5;
  __int16 v27 = &v25[v26];
  uint64_t v28 = a3 + 8;
  do
  {
    *(_DWORD *)__int16 v25 = *(_DWORD *)(v28 - 8);
    std::unordered_map<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,std::allocator<std::pair<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey const,Phase::OptionsValue>>>::unordered_map((uint64_t)(v25 + 8), v28);
    *((_DWORD *)v25 + 12) = *(_DWORD *)(v28 + 40);
    v25 += 56;
    v28 += 56;
    v26 -= 56;
  }
  while (v26);
  uint64_t v29 = v6;
  uint64_t v30 = v65;
  uint64_t v31 = *a1;
  int v32 = v65;
  if (*a1 != (char *)v7)
  {
    uint64_t v33 = 0;
    do
    {
      *(_DWORD *)&v30[v33 - 56] = *(_DWORD *)(v7 + v33 - 56);
      std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::__hash_table((uint64_t)&v30[v33 - 48], (uint64_t *)(v7 + v33 - 48));
      *(_DWORD *)&v30[v33 - 8] = *(_DWORD *)(v7 + v33 - 8);
      v33 -= 56;
    }
    while ((char *)(v7 + v33) != v31);
    int v32 = &v30[v33];
  }
  unint64_t v34 = a1[1];
  if (v34 != (char *)v7)
  {
    uint64_t v35 = (uint64_t)&v5[56 * v29 + 8];
    do
    {
      *(_DWORD *)__int16 v27 = *(_DWORD *)(v35 - 8);
      std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::__hash_table((uint64_t)(v27 + 8), (uint64_t *)v35);
      *((_DWORD *)v27 + 12) = *(_DWORD *)(v35 + 40);
      v27 += 56;
      uint64_t v36 = v35 + 48;
      v35 += 56;
    }
    while ((char *)v36 != v34);
    uint64_t v7 = (uint64_t)a1[1];
  }
  uint64_t v37 = *a1;
  *a1 = v32;
  a1[1] = v27;
  uint64_t v38 = a1[2];
  a1[2] = v67;
  int v66 = (_DWORD *)v7;
  __int16 v67 = v38;
  uint64_t v64 = v37;
  __int16 v65 = v37;
  std::__split_buffer<Phase::SpatialModeler::EntityShapeTemplate>::~__split_buffer((uint64_t)&v64);
  return (uint64_t)v30;
}

uint64_t std::unordered_map<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,std::allocator<std::pair<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey const,Phase::OptionsValue>>>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(long long **)(a2 + 16); i; uint64_t i = *(long long **)i)
    std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::__emplace_unique_key_args<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::pair<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey const,Phase::OptionsValue> const&>(a1, (uint64_t)(i + 1), i + 1);
  return a1;
}

void sub_221EAFE1C(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t **std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::__emplace_unique_key_args<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::pair<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey const,Phase::OptionsValue> const&>(uint64_t a1, uint64_t a2, long long *a3)
{
  unint64_t v7 = std::__string_view_hash<char>::operator()[abi:ne180100]((uint64_t)v27, *(uint64_t **)(a2 + 24), *(void *)(a2 + 32));
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    __int16 v12 = *(uint64_t ****)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      uint64_t v13 = *v12;
      if (*v12)
      {
        uint64_t v16 = a2 + 24;
        unint64_t v14 = *(const void **)(a2 + 24);
        size_t v15 = *(void *)(v16 + 8);
        do
        {
          unint64_t v17 = (unint64_t)v13[1];
          if (v17 == v8)
          {
            if (v13[6] == (uint64_t *)v15 && !memcmp(v13[5], v14, v15)) {
              return v13;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v17 >= v9) {
                v17 %= v9;
              }
            }
            else
            {
              v17 &= v9 - 1;
            }
            if (v17 != v3) {
              break;
            }
          }
          uint64_t v13 = (uint64_t **)*v13;
        }
        while (v13);
      }
    }
  }
  std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::__construct_node_hash<std::pair<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey const,Phase::OptionsValue> const&>(a1, v8, a3, (uint64_t)v27);
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v9 || (float)(v19 * (float)v9) < v18)
  {
    BOOL v20 = 1;
    if (v9 >= 3) {
      BOOL v20 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v9);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::__rehash<true>(a1, v23);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v24 = *(void **)(*(void *)a1 + 8 * v3);
  if (v24)
  {
    *(void *)v27[0] = *v24;
    *uint64_t v24 = v27[0];
  }
  else
  {
    *(void *)v27[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v27[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v27[0])
    {
      unint64_t v25 = *(void *)(*(void *)v27[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v25 >= v9) {
          v25 %= v9;
        }
      }
      else
      {
        v25 &= v9 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v25) = v27[0];
    }
  }
  uint64_t v13 = (uint64_t **)v27[0];
  v27[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,void *>>>>::reset[abi:ne180100]((uint64_t)v27, 0);
  return v13;
}

void sub_221EB00A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::__construct_node_hash<std::pair<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey const,Phase::OptionsValue> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x68uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  uint64_t result = std::pair<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey const,Phase::OptionsValue>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_221EB0120(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__string_view_hash<char>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v4, a2, a3);
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      uint64_t v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      uint64_t v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      uint64_t v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      uint64_t v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      uint64_t v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      uint64_t v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      unint64_t v11 = v7 + v9;
      unint64_t v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      unint64_t v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      unint64_t v14 = v4 + v7 + v8 + a3;
      uint64_t v15 = v14 + v5;
      unint64_t v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v8 + a3 + v5 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      uint64_t v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      uint64_t v18 = v6 + v9 + v17;
      uint64_t v19 = __ROR8__(v18, 44);
      uint64_t v20 = v18 + v10;
      uint64_t v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      uint64_t v23 = *a2;
      unint64_t v22 = a2 + 4;
      unint64_t v24 = v23 - 0x4B6D499041670D8DLL * v5;
      uint64_t v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        uint64_t v26 = *(v22 - 3);
        uint64_t v27 = v24 + v15 + v11 + v26;
        uint64_t v28 = v22[2];
        uint64_t v29 = v22[3];
        uint64_t v30 = v22[1];
        unint64_t v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        uint64_t v31 = v13 + v20;
        uint64_t v32 = *(v22 - 2);
        uint64_t v33 = *(v22 - 1);
        uint64_t v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        uint64_t v35 = v34 + v20 + v33;
        uint64_t v36 = v34 + v26 + v32;
        uint64_t v15 = v36 + v33;
        uint64_t v37 = __ROR8__(v36, 44) + v34;
        unint64_t v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        unint64_t v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        unint64_t v16 = v37 + __ROR8__(v35 + v38, 21);
        unint64_t v39 = v24 + v21 + *v22;
        uint64_t v20 = v30 + v28 + v39 + v29;
        uint64_t v21 = __ROR8__(v30 + v28 + v39, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        unint64_t v13 = v38;
        v25 += 64;
      }
      while (v25);
      unint64_t v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      unint64_t v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](a2, a3);
  }
  else
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](a2, a3);
  }
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](_DWORD *a1, unint64_t a2)
{
  if (a2 < 9)
  {
    if (a2 < 4)
    {
      unint64_t result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        unint64_t v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      uint64_t v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      unint64_t v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    uint64_t v3 = *(void *)((char *)a1 + a2 - 8);
    uint64_t v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](void *a1, uint64_t a2)
{
  uint64_t v2 = a1[1];
  unint64_t v3 = 0xB492B66FBE98F273 * *a1;
  uint64_t v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  unint64_t v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8);
  unint64_t v6 = 0x9DDFEA08EB382D69 * ((v4 - 0x3C5A37A36834CED9 * *(void *)((char *)a1 + a2 - 16)) ^ v5);
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)((char *)a1 + a2 - 16);
  uint64_t v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  uint64_t v5 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v6 = __ROR8__(v3 + v4, 52);
  uint64_t v7 = v3 + a1[1];
  uint64_t v8 = __ROR8__(v7, 7);
  uint64_t v9 = v7 + v5;
  uint64_t v10 = *(void *)((char *)a1 + a2 - 32) + v5;
  uint64_t v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  uint64_t v12 = *(void *)((char *)a1 + a2 - 24) + v10 + v2;
  unint64_t v13 = 0xC3A5C85C97CB3127 * (v12 + *(void *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(void *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(void *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

std::string *std::pair<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey const,Phase::OptionsValue>::pair[abi:ne180100](std::string *a1, long long *a2)
{
  uint64_t v4 = Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey::InternalKey(a1, a2);
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)&v4[1].__r_.__value_.__r.__words[2], (uint64_t)a2 + 40);
  return a1;
}

void sub_221EB0604(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey::InternalKey(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  uint64_t v5 = *((unsigned __int8 *)a2 + 23);
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *((void *)a2 + 1);
  }
  if (v5)
  {
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    {
      uint64_t v7 = (std::string *)this->__r_.__value_.__r.__words[0];
      std::string::size_type size = this->__r_.__value_.__l.__size_;
    }
    else
    {
      std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      uint64_t v7 = this;
    }
    this[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
    this[1].__r_.__value_.__l.__size_ = size;
  }
  else
  {
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = *(long long *)((char *)a2 + 24);
  }
  return this;
}

{
  long long v3;
  std::string::size_type size;
  std::string *v5;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    uint64_t v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v5 = (std::string *)this->__r_.__value_.__r.__words[0];
    std::string::size_type size = this->__r_.__value_.__l.__size_;
  }
  else
  {
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    uint64_t v5 = this;
  }
  this[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v5;
  this[1].__r_.__value_.__l.__size_ = size;
  return this;
}

uint64_t std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>,(std::__variant_detail::_Trait)1>::__copy_constructor(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 40) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__generic_construct[abi:ne180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>,(std::__variant_detail::_Trait)1> const&>(a1, a2);
  return a1;
}

void sub_221EB06EC(_Unwind_Exception *a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>,(std::__variant_detail::_Trait)1>::~__dtor(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__generic_construct[abi:ne180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>,(std::__variant_detail::_Trait)1> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 40);
  if (v4 != -1) {
    unint64_t result = ((uint64_t (*)(char *, uint64_t))off_26D472E58[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 40) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 40);
  if (v5 != -1)
  {
    unint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_26D472EB8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 40) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJbijfdN5Phase6VectorIfLm2EEENS9_IfLm3EEENS9_IfLm4EEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIjNSG_IjEEEENSJ_IyNSG_IyEEEENS8_18UnorderedStringMapINS8_12OptionsValueEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISR_LNS0_6_TraitE1EEEEEvRSS_OT_EUlRS10_OT0_E_JRNS0_6__baseILSV_1EJbijfdSA_SB_SC_SI_SL_SN_SQ_EEERKS18_EEEDcS10_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJbijfdN5Phase6VectorIfLm2EEENS9_IfLm3EEENS9_IfLm4EEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIjNSG_IjEEEENSJ_IyNSG_IyEEEENS8_18UnorderedStringMapINS8_12OptionsValueEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISR_LNS0_6_TraitE1EEEEEvRSS_OT_EUlRS10_OT0_E_JRNS0_6__baseILSV_1EJbijfdSA_SB_SC_SI_SL_SN_SQ_EEERKS18_EEEDcS10_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJbijfdN5Phase6VectorIfLm2EEENS9_IfLm3EEENS9_IfLm4EEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIjNSG_IjEEEENSJ_IyNSG_IyEEEENS8_18UnorderedStringMapINS8_12OptionsValueEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISR_LNS0_6_TraitE1EEEEEvRSS_OT_EUlRS10_OT0_E_JRNS0_6__baseILSV_1EJbijfdSA_SB_SC_SI_SL_SN_SQ_EEERKS18_EEEDcS10_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJbijfdN5Phase6VectorIfLm2EEENS9_IfLm3EEENS9_IfLm4EEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIjNSG_IjEEEENSJ_IyNSG_IyEEEENS8_18UnorderedStringMapINS8_12OptionsValueEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISR_LNS0_6_TraitE1EEEEEvRSS_OT_EUlRS10_OT0_E_JRNS0_6__baseILSV_1EJbijfdSA_SB_SC_SI_SL_SN_SQ_EEERKS18_EEEDcS10_DpT0_(uint64_t a1, _DWORD *a2, float *a3)
{
  float result = *a3;
  *a2 = *(_DWORD *)a3;
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJbijfdN5Phase6VectorIfLm2EEENS9_IfLm3EEENS9_IfLm4EEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIjNSG_IjEEEENSJ_IyNSG_IyEEEENS8_18UnorderedStringMapINS8_12OptionsValueEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISR_LNS0_6_TraitE1EEEEEvRSS_OT_EUlRS10_OT0_E_JRNS0_6__baseILSV_1EJbijfdSA_SB_SC_SI_SL_SN_SQ_EEERKS18_EEEDcS10_DpT0_(uint64_t a1, void *a2, double *a3)
{
  double result = *a3;
  *a2 = *(void *)a3;
  return result;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJbijfdN5Phase6VectorIfLm2EEENS9_IfLm3EEENS9_IfLm4EEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIjNSG_IjEEEENSJ_IyNSG_IyEEEENS8_18UnorderedStringMapINS8_12OptionsValueEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISR_LNS0_6_TraitE1EEEEEvRSS_OT_EUlRS10_OT0_E_JRNS0_6__baseILSV_1EJbijfdSA_SB_SC_SI_SL_SN_SQ_EEERKS18_EEEDcS10_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a2 = *(_DWORD *)a3;
  float result = *(float *)(a3 + 4);
  *(float *)(a2 + 4) = result;
  return result;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJbijfdN5Phase6VectorIfLm2EEENS9_IfLm3EEENS9_IfLm4EEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIjNSG_IjEEEENSJ_IyNSG_IyEEEENS8_18UnorderedStringMapINS8_12OptionsValueEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISR_LNS0_6_TraitE1EEEEEvRSS_OT_EUlRS10_OT0_E_JRNS0_6__baseILSV_1EJbijfdSA_SB_SC_SI_SL_SN_SQ_EEERKS18_EEEDcS10_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a2 = *(_DWORD *)a3;
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(a3 + 4);
  float result = *(float *)(a3 + 8);
  *(float *)(a2 + 8) = result;
  return result;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7ELm7EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJbijfdN5Phase6VectorIfLm2EEENS9_IfLm3EEENS9_IfLm4EEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIjNSG_IjEEEENSJ_IyNSG_IyEEEENS8_18UnorderedStringMapINS8_12OptionsValueEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISR_LNS0_6_TraitE1EEEEEvRSS_OT_EUlRS10_OT0_E_JRNS0_6__baseILSV_1EJbijfdSA_SB_SC_SI_SL_SN_SQ_EEERKS18_EEEDcS10_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a2 = *(_DWORD *)a3;
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(a3 + 4);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
  float result = *(float *)(a3 + 12);
  *(float *)(a2 + 12) = result;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8ELm8EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJbijfdN5Phase6VectorIfLm2EEENS9_IfLm3EEENS9_IfLm4EEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIjNSG_IjEEEENSJ_IyNSG_IyEEEENS8_18UnorderedStringMapINS8_12OptionsValueEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISR_LNS0_6_TraitE1EEEEEvRSS_OT_EUlRS10_OT0_E_JRNS0_6__baseILSV_1EJbijfdSA_SB_SC_SI_SL_SN_SQ_EEERKS18_EEEDcS10_DpT0_(int a1, std::string *this, long long *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v3 = *a3;
    this->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
}

void *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9ELm9EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJbijfdN5Phase6VectorIfLm2EEENS9_IfLm3EEENS9_IfLm4EEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIjNSG_IjEEEENSJ_IyNSG_IyEEEENS8_18UnorderedStringMapINS8_12OptionsValueEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISR_LNS0_6_TraitE1EEEEEvRSS_OT_EUlRS10_OT0_E_JRNS0_6__baseILSV_1EJbijfdSA_SB_SC_SI_SL_SN_SQ_EEERKS18_EEEDcS10_DpT0_(uint64_t a1, void *a2, uint64_t a3)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a2, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
}

void *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm10ELm10EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJbijfdN5Phase6VectorIfLm2EEENS9_IfLm3EEENS9_IfLm4EEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIjNSG_IjEEEENSJ_IyNSG_IyEEEENS8_18UnorderedStringMapINS8_12OptionsValueEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISR_LNS0_6_TraitE1EEEEEvRSS_OT_EUlRS10_OT0_E_JRNS0_6__baseILSV_1EJbijfdSA_SB_SC_SI_SL_SN_SQ_EEERKS18_EEEDcS10_DpT0_(uint64_t a1, void *a2, uint64_t a3)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(a2, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm11ELm11EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJbijfdN5Phase6VectorIfLm2EEENS9_IfLm3EEENS9_IfLm4EEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIjNSG_IjEEEENSJ_IyNSG_IyEEEENS8_18UnorderedStringMapINS8_12OptionsValueEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISR_LNS0_6_TraitE1EEEEEvRSS_OT_EUlRS10_OT0_E_JRNS0_6__baseILSV_1EJbijfdSA_SB_SC_SI_SL_SN_SQ_EEERKS18_EEEDcS10_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return std::unordered_map<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,std::allocator<std::pair<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey const,Phase::OptionsValue>>>::unordered_map(a2, a3);
}

void *std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    char v6 = result;
    float result = std::vector<unsigned long long>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      float result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_221EB08F0(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned long long>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::vector<Phase::SpatialModeler::OptionalPropertyDescription>::__throw_length_error[abi:ne180100]();
  }
  float result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey const,Phase::OptionsValue>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,void *> *>>(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = (long long *)a2;
  uint64_t v6 = a1[1];
  if (v6)
  {
    for (uint64_t i = 0; i != v6; ++i)
      *(void *)(*a1 + 8 * i) = 0;
    size_t v8 = (void *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8) {
      BOOL v9 = a2 == a3;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9)
    {
      uint64_t v10 = v8;
    }
    else
    {
      do
      {
        Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey::operator=(v8 + 2, (uint64_t)(v4 + 1));
        std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__generic_assign[abi:ne180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)(v8 + 7), (uint64_t)v4 + 56);
        uint64_t v10 = (void *)*v8;
        std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::__node_insert_multi(a1, (uint64_t)v8);
        uint64_t v4 = *(long long **)v4;
        if (!v10) {
          break;
        }
        size_t v8 = v10;
      }
      while (v4 != (long long *)a3);
    }
    std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::__deallocate_node((uint64_t)a1, v10);
  }
  while (v4 != (long long *)a3)
  {
    std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::__emplace_multi<std::pair<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey const,Phase::OptionsValue> const&>(a1, v4 + 1);
    uint64_t v4 = *(long long **)v4;
  }
}

void sub_221EB0A80(void *a1)
{
  __cxa_begin_catch(a1);
  std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::__deallocate_node(v1, v2);
  __cxa_rethrow();
}

void sub_221EB0A9C(_Unwind_Exception *a1)
{
}

uint64_t std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::__node_insert_multi(void *a1, uint64_t a2)
{
  uint64_t v4 = a2 + 16;
  unint64_t v5 = std::__string_view_hash<char>::operator()[abi:ne180100]((uint64_t)&v8, *(uint64_t **)(a2 + 40), *(void *)(a2 + 48));
  *(void *)(a2 + 8) = v5;
  inserted = std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::__node_insert_multi_prepare((uint64_t)a1, v5, v4);
  std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::__node_insert_multi_perform(a1, (void *)a2, inserted);
  return a2;
}

uint64_t *Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey::operator=(uint64_t *a1, uint64_t a2)
{
  std::string::operator=((std::string *)a1, (const std::string *)a2);
  uint64_t v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a2 + 8);
  }
  if (v4)
  {
    if (*((char *)a1 + 23) < 0)
    {
      uint64_t v6 = (uint64_t *)*a1;
      uint64_t v5 = a1[1];
    }
    else
    {
      uint64_t v5 = *((unsigned __int8 *)a1 + 23);
      uint64_t v6 = a1;
    }
    a1[3] = (uint64_t)v6;
    a1[4] = v5;
  }
  else
  {
    *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  }
  return a1;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__generic_assign[abi:ne180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>,(std::__variant_detail::_Trait)1> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(result + 40);
  uint64_t v4 = *(unsigned int *)(a2 + 40);
  if (v3 == -1)
  {
    if (v4 == -1) {
      return result;
    }
  }
  else if (v4 == -1)
  {
    float result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_26D472E58[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 40) = -1;
    return result;
  }
  uint64_t v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_26D472F18[v4])(&v5, result, a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJbijfdN5Phase6VectorIfLm2EEENS9_IfLm3EEENS9_IfLm4EEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIjNSG_IjEEEENSJ_IyNSG_IyEEEENS8_18UnorderedStringMapINS8_12OptionsValueEEEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISR_LNS0_6_TraitE1EEEEEvOT_EUlRSZ_OT0_E_JRNS0_6__baseILSV_1EJbijfdSA_SB_SC_SI_SL_SN_SQ_EEERKS17_EEEDcSZ_DpT0_(uint64_t *a1, unsigned char *a2, unsigned char *a3)
{
  uint64_t result = *a1;
  if (*(_DWORD *)(result + 40)) {
    return std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__emplace[abi:ne180100]<0ul,BOOL const&>(result, a3);
  }
  *a2 = *a3;
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJbijfdN5Phase6VectorIfLm2EEENS9_IfLm3EEENS9_IfLm4EEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIjNSG_IjEEEENSJ_IyNSG_IyEEEENS8_18UnorderedStringMapINS8_12OptionsValueEEEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISR_LNS0_6_TraitE1EEEEEvOT_EUlRSZ_OT0_E_JRNS0_6__baseILSV_1EJbijfdSA_SB_SC_SI_SL_SN_SQ_EEERKS17_EEEDcSZ_DpT0_(_DWORD **a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t result = *a1;
  if (result[10] != 1) {
    return std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__emplace[abi:ne180100]<1ul,int const&>(result, a3);
  }
  *a2 = *a3;
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJbijfdN5Phase6VectorIfLm2EEENS9_IfLm3EEENS9_IfLm4EEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIjNSG_IjEEEENSJ_IyNSG_IyEEEENS8_18UnorderedStringMapINS8_12OptionsValueEEEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISR_LNS0_6_TraitE1EEEEEvOT_EUlRSZ_OT0_E_JRNS0_6__baseILSV_1EJbijfdSA_SB_SC_SI_SL_SN_SQ_EEERKS17_EEEDcSZ_DpT0_(_DWORD **a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t result = *a1;
  if (result[10] != 2) {
    return std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__emplace[abi:ne180100]<2ul,unsigned int const&>(result, a3);
  }
  *a2 = *a3;
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJbijfdN5Phase6VectorIfLm2EEENS9_IfLm3EEENS9_IfLm4EEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIjNSG_IjEEEENSJ_IyNSG_IyEEEENS8_18UnorderedStringMapINS8_12OptionsValueEEEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISR_LNS0_6_TraitE1EEEEEvOT_EUlRSZ_OT0_E_JRNS0_6__baseILSV_1EJbijfdSA_SB_SC_SI_SL_SN_SQ_EEERKS17_EEEDcSZ_DpT0_(_DWORD **a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t result = *a1;
  if (result[10] != 3) {
    return std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__emplace[abi:ne180100]<3ul,float const&>(result, a3);
  }
  *a2 = *a3;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJbijfdN5Phase6VectorIfLm2EEENS9_IfLm3EEENS9_IfLm4EEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIjNSG_IjEEEENSJ_IyNSG_IyEEEENS8_18UnorderedStringMapINS8_12OptionsValueEEEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISR_LNS0_6_TraitE1EEEEEvOT_EUlRSZ_OT0_E_JRNS0_6__baseILSV_1EJbijfdSA_SB_SC_SI_SL_SN_SQ_EEERKS17_EEEDcSZ_DpT0_(uint64_t *a1, void *a2, void *a3)
{
  uint64_t result = *a1;
  if (*(_DWORD *)(result + 40) != 4) {
    return std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__emplace[abi:ne180100]<4ul,double const&>(result, a3);
  }
  *a2 = *a3;
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJbijfdN5Phase6VectorIfLm2EEENS9_IfLm3EEENS9_IfLm4EEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIjNSG_IjEEEENSJ_IyNSG_IyEEEENS8_18UnorderedStringMapINS8_12OptionsValueEEEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISR_LNS0_6_TraitE1EEEEEvOT_EUlRSZ_OT0_E_JRNS0_6__baseILSV_1EJbijfdSA_SB_SC_SI_SL_SN_SQ_EEERKS17_EEEDcSZ_DpT0_(_DWORD **a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t result = *a1;
  if (result[10] != 5) {
    return std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__emplace[abi:ne180100]<5ul,Phase::Vector<float,2ul> const&>(result, a3);
  }
  *a2 = *a3;
  a2[1] = a3[1];
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJbijfdN5Phase6VectorIfLm2EEENS9_IfLm3EEENS9_IfLm4EEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIjNSG_IjEEEENSJ_IyNSG_IyEEEENS8_18UnorderedStringMapINS8_12OptionsValueEEEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISR_LNS0_6_TraitE1EEEEEvOT_EUlRSZ_OT0_E_JRNS0_6__baseILSV_1EJbijfdSA_SB_SC_SI_SL_SN_SQ_EEERKS17_EEEDcSZ_DpT0_(_DWORD **a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t result = *a1;
  if (result[10] != 6) {
    return std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__emplace[abi:ne180100]<6ul,Phase::Vector<float,3ul> const&>(result, a3);
  }
  *a2 = *a3;
  a2[1] = a3[1];
  a2[2] = a3[2];
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7ELm7EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJbijfdN5Phase6VectorIfLm2EEENS9_IfLm3EEENS9_IfLm4EEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIjNSG_IjEEEENSJ_IyNSG_IyEEEENS8_18UnorderedStringMapINS8_12OptionsValueEEEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISR_LNS0_6_TraitE1EEEEEvOT_EUlRSZ_OT0_E_JRNS0_6__baseILSV_1EJbijfdSA_SB_SC_SI_SL_SN_SQ_EEERKS17_EEEDcSZ_DpT0_(_DWORD **a1, _DWORD *a2, _DWORD *a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__assign_alt[abi:ne180100]<7ul,Phase::Vector<float,4ul>,Phase::Vector<float,4ul> const&>(*a1, a2, a3);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8ELm8EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJbijfdN5Phase6VectorIfLm2EEENS9_IfLm3EEENS9_IfLm4EEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIjNSG_IjEEEENSJ_IyNSG_IyEEEENS8_18UnorderedStringMapINS8_12OptionsValueEEEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISR_LNS0_6_TraitE1EEEEEvOT_EUlRSZ_OT0_E_JRNS0_6__baseILSV_1EJbijfdSA_SB_SC_SI_SL_SN_SQ_EEERKS17_EEEDcSZ_DpT0_(uint64_t *a1, std::string *a2, std::string *a3)
{
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9ELm9EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJbijfdN5Phase6VectorIfLm2EEENS9_IfLm3EEENS9_IfLm4EEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIjNSG_IjEEEENSJ_IyNSG_IyEEEENS8_18UnorderedStringMapINS8_12OptionsValueEEEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISR_LNS0_6_TraitE1EEEEEvOT_EUlRSZ_OT0_E_JRNS0_6__baseILSV_1EJbijfdSA_SB_SC_SI_SL_SN_SQ_EEERKS17_EEEDcSZ_DpT0_(uint64_t *a1, char *a2, uint64_t a3)
{
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm10ELm10EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJbijfdN5Phase6VectorIfLm2EEENS9_IfLm3EEENS9_IfLm4EEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIjNSG_IjEEEENSJ_IyNSG_IyEEEENS8_18UnorderedStringMapINS8_12OptionsValueEEEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISR_LNS0_6_TraitE1EEEEEvOT_EUlRSZ_OT0_E_JRNS0_6__baseILSV_1EJbijfdSA_SB_SC_SI_SL_SN_SQ_EEERKS17_EEEDcSZ_DpT0_(uint64_t *a1, char *a2, uint64_t a3)
{
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm11ELm11EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJbijfdN5Phase6VectorIfLm2EEENS9_IfLm3EEENS9_IfLm4EEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIjNSG_IjEEEENSJ_IyNSG_IyEEEENS8_18UnorderedStringMapINS8_12OptionsValueEEEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISR_LNS0_6_TraitE1EEEEEvOT_EUlRSZ_OT0_E_JRNS0_6__baseILSV_1EJbijfdSA_SB_SC_SI_SL_SN_SQ_EEERKS17_EEEDcSZ_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__emplace[abi:ne180100]<0ul,BOOL const&>(uint64_t a1, unsigned char *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 40);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_26D472E58[v4])(&v6, a1);
  }
  *(unsigned char *)a1 = *a2;
  *(_DWORD *)(a1 + 40) = 0;
  return a1;
}

_DWORD *std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__emplace[abi:ne180100]<1ul,int const&>(_DWORD *a1, _DWORD *a2)
{
  uint64_t v4 = a1[10];
  if (v4 != -1) {
    ((void (*)(char *, _DWORD *))off_26D472E58[v4])(&v6, a1);
  }
  a1[10] = -1;
  *a1 = *a2;
  a1[10] = 1;
  return a1;
}

_DWORD *std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__emplace[abi:ne180100]<2ul,unsigned int const&>(_DWORD *a1, _DWORD *a2)
{
  uint64_t v4 = a1[10];
  if (v4 != -1) {
    ((void (*)(char *, _DWORD *))off_26D472E58[v4])(&v6, a1);
  }
  a1[10] = -1;
  *a1 = *a2;
  a1[10] = 2;
  return a1;
}

_DWORD *std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__emplace[abi:ne180100]<3ul,float const&>(_DWORD *a1, _DWORD *a2)
{
  uint64_t v4 = a1[10];
  if (v4 != -1) {
    ((void (*)(char *, _DWORD *))off_26D472E58[v4])(&v6, a1);
  }
  *a1 = *a2;
  a1[10] = 3;
  return a1;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__emplace[abi:ne180100]<4ul,double const&>(uint64_t a1, void *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 40);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_26D472E58[v4])(&v6, a1);
  }
  *(void *)a1 = *a2;
  *(_DWORD *)(a1 + 40) = 4;
  return a1;
}

_DWORD *std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__emplace[abi:ne180100]<5ul,Phase::Vector<float,2ul> const&>(_DWORD *a1, _DWORD *a2)
{
  uint64_t v4 = a1[10];
  if (v4 != -1) {
    ((void (*)(char *, _DWORD *))off_26D472E58[v4])(&v6, a1);
  }
  *a1 = *a2;
  a1[1] = a2[1];
  a1[10] = 5;
  return a1;
}

_DWORD *std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__emplace[abi:ne180100]<6ul,Phase::Vector<float,3ul> const&>(_DWORD *a1, _DWORD *a2)
{
  uint64_t v4 = a1[10];
  if (v4 != -1) {
    ((void (*)(char *, _DWORD *))off_26D472E58[v4])(&v6, a1);
  }
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[10] = 6;
  return a1;
}

_DWORD *std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__assign_alt[abi:ne180100]<7ul,Phase::Vector<float,4ul>,Phase::Vector<float,4ul> const&>(_DWORD *result, _DWORD *a2, _DWORD *a3)
{
  if (result[10] != 7) {
    return std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__emplace[abi:ne180100]<7ul,Phase::Vector<float,4ul> const&>(result, a3);
  }
  *a2 = *a3;
  a2[1] = a3[1];
  a2[2] = a3[2];
  a2[3] = a3[3];
  return result;
}

_DWORD *std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__emplace[abi:ne180100]<7ul,Phase::Vector<float,4ul> const&>(_DWORD *a1, _DWORD *a2)
{
  uint64_t v4 = a1[10];
  if (v4 != -1) {
    ((void (*)(char *, _DWORD *))off_26D472E58[v4])(&v6, a1);
  }
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[10] = 7;
  return a1;
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__assign_alt[abi:ne180100]<8ul,std::string,std::string const&>(uint64_t a1, std::string *this, std::string *__str)
{
  if (*(_DWORD *)(a1 + 40) == 8)
  {
    std::string::operator=(this, __str);
  }
  else
  {
    v3[0] = a1;
    v3[1] = (uint64_t)__str;
    std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__assign_alt[abi:ne180100]<8ul,std::string,std::string const&>(std::__variant_detail::__alt<8ul,std::string> &,std::string const&)::{unnamed type#1}::operator()[abi:ne180100](v3);
  }
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__assign_alt[abi:ne180100]<8ul,std::string,std::string const&>(std::__variant_detail::__alt<8ul,std::string> &,std::string const&)::{unnamed type#1}::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  if (*(char *)(v1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v1, *(void *)(v1 + 8));
  }
  else
  {
    long long v3 = *(_OWORD *)v1;
    __p.__r_.__value_.__r.__words[2] = *(void *)(v1 + 16);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v3;
  }
  std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__emplace[abi:ne180100]<8ul,std::string>(v2, (long long *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_221EB11CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__emplace[abi:ne180100]<8ul,std::string>(uint64_t a1, long long *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 40);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_26D472E58[v4])(&v7, a1);
  }
  *(_DWORD *)(a1 + 40) = -1;
  long long v5 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v5;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a1 + 40) = 8;
  return a1;
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__assign_alt[abi:ne180100]<9ul,std::vector<unsigned int>,std::vector<unsigned int> const&>(uint64_t a1, char *a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 40) == 9)
  {
    if (a2 != (char *)a3)
    {
      uint64_t v4 = *(char **)a3;
      uint64_t v3 = *(void *)(a3 + 8);
      std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a2, v4, v3, (v3 - (uint64_t)v4) >> 2);
    }
  }
  else
  {
    v5[0] = a1;
    v5[1] = a3;
    std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__assign_alt[abi:ne180100]<9ul,std::vector<unsigned int>,std::vector<unsigned int> const&>(std::__variant_detail::__alt<9ul,std::vector<unsigned int>> &,std::vector<unsigned int> const&)::{unnamed type#1}::operator()[abi:ne180100](v5);
  }
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__assign_alt[abi:ne180100]<9ul,std::vector<unsigned int>,std::vector<unsigned int> const&>(std::__variant_detail::__alt<9ul,std::vector<unsigned int>> &,std::vector<unsigned int> const&)::{unnamed type#1}::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  std::string __p = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)v1, *(void *)(v1 + 8), (uint64_t)(*(void *)(v1 + 8) - *(void *)v1) >> 2);
  std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__emplace[abi:ne180100]<9ul,std::vector<unsigned int>>(v2, (uint64_t)&__p);
  if (__p)
  {
    uint64_t v4 = __p;
    operator delete(__p);
  }
}

void sub_221EB1334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  char v7 = result;
  uint64_t v8 = *((void *)result + 2);
  BOOL v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 2)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      double v7[2] = 0;
    }
    if (a4 >> 62) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = std::vector<unsigned int>::__vallocate[abi:ne180100](v7, v11);
    unint64_t v13 = (char *)v7[1];
    uint64_t v12 = (void **)(v7 + 1);
    BOOL v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v12 = (void **)(result + 8);
  unint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 2;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  unint64_t v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    BOOL v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *uint64_t v12 = &v9[v17];
  return result;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__emplace[abi:ne180100]<9ul,std::vector<unsigned int>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 40);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_26D472E58[v4])(&v6, a1);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(_DWORD *)(a1 + 40) = 9;
  return a1;
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__assign_alt[abi:ne180100]<10ul,std::vector<unsigned long long>,std::vector<unsigned long long> const&>(uint64_t a1, char *a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 40) == 10)
  {
    if (a2 != (char *)a3)
    {
      uint64_t v4 = *(char **)a3;
      uint64_t v3 = *(void *)(a3 + 8);
      std::vector<unsigned long long>::__assign_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(a2, v4, v3, (v3 - (uint64_t)v4) >> 3);
    }
  }
  else
  {
    v5[0] = a1;
    v5[1] = a3;
    std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__assign_alt[abi:ne180100]<10ul,std::vector<unsigned long long>,std::vector<unsigned long long> const&>(std::__variant_detail::__alt<10ul,std::vector<unsigned long long>> &,std::vector<unsigned long long> const&)::{unnamed type#1}::operator()[abi:ne180100](v5);
  }
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__assign_alt[abi:ne180100]<10ul,std::vector<unsigned long long>,std::vector<unsigned long long> const&>(std::__variant_detail::__alt<10ul,std::vector<unsigned long long>> &,std::vector<unsigned long long> const&)::{unnamed type#1}::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  std::string __p = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)v1, *(void *)(v1 + 8), (uint64_t)(*(void *)(v1 + 8) - *(void *)v1) >> 3);
  std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__emplace[abi:ne180100]<10ul,std::vector<unsigned long long>>(v2, (uint64_t)&__p);
  if (__p)
  {
    uint64_t v4 = __p;
    operator delete(__p);
  }
}

void sub_221EB15A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned long long>::__assign_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  char v7 = result;
  uint64_t v8 = *((void *)result + 2);
  BOOL v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 3)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      double v7[2] = 0;
    }
    if (a4 >> 61) {
      std::vector<Phase::SpatialModeler::OptionalPropertyDescription>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = std::vector<unsigned long long>::__vallocate[abi:ne180100](v7, v11);
    unint64_t v13 = (char *)v7[1];
    uint64_t v12 = (void **)(v7 + 1);
    BOOL v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v12 = (void **)(result + 8);
  unint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 3;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  unint64_t v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    BOOL v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *uint64_t v12 = &v9[v17];
  return result;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__emplace[abi:ne180100]<10ul,std::vector<unsigned long long>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 40);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_26D472E58[v4])(&v6, a1);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(_DWORD *)(a1 + 40) = 10;
  return a1;
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__assign_alt[abi:ne180100]<11ul,Phase::UnorderedStringMap<Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 40) == 11)
  {
    if (a2 != a3)
    {
      *(_DWORD *)(a2 + 32) = *(_DWORD *)(a3 + 32);
      uint64_t v4 = *(uint64_t **)(a3 + 16);
      std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,void *> *>>((void *)a2, v4, 0);
    }
  }
  else
  {
    v5[0] = a1;
    v5[1] = a3;
    std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__assign_alt[abi:ne180100]<11ul,Phase::UnorderedStringMap<Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue> const&>(std::__variant_detail::__alt<11ul,Phase::UnorderedStringMap<Phase::OptionsValue>> &,Phase::UnorderedStringMap<Phase::OptionsValue> const&)::{unnamed type#1}::operator()[abi:ne180100](v5);
  }
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__assign_alt[abi:ne180100]<11ul,Phase::UnorderedStringMap<Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue> const&>(std::__variant_detail::__alt<11ul,Phase::UnorderedStringMap<Phase::OptionsValue>> &,Phase::UnorderedStringMap<Phase::OptionsValue> const&)::{unnamed type#1}::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *a1;
  std::unordered_map<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,std::allocator<std::pair<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey const,Phase::OptionsValue>>>::unordered_map((uint64_t)v3, a1[1]);
  std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__emplace[abi:ne180100]<11ul,Phase::UnorderedStringMap<Phase::OptionsValue>>(v1, v3);
  return std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::~__hash_table((uint64_t)v3);
}

void sub_221EB1804(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__emplace[abi:ne180100]<11ul,Phase::UnorderedStringMap<Phase::OptionsValue>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 40);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_26D472E58[v4])(&v6, a1);
  }
  *(_DWORD *)(a1 + 40) = -1;
  uint64_t result = std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::__hash_table(a1, a2);
  *(_DWORD *)(a1 + 40) = 11;
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  float v7 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    BOOL v9 = 1;
    if (v6 >= 3) {
      BOOL v9 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v10 = v9 | (2 * v6);
    unint64_t v11 = vcvtps_u32_f32(v7 / v8);
    if (v10 <= v11) {
      size_t v12 = v11;
    }
    else {
      size_t v12 = v10;
    }
    std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::__rehash<false>(a1, v12);
    unint64_t v6 = *(void *)(a1 + 8);
  }
  uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v13.i16[0] = vaddlv_u8(v13);
  unint64_t v14 = v13.u32[0];
  if (v13.u32[0] > 1uLL)
  {
    unint64_t v15 = a2;
    if (v6 <= a2) {
      unint64_t v15 = a2 % v6;
    }
  }
  else
  {
    unint64_t v15 = (v6 - 1) & a2;
  }
  unint64_t v16 = *(uint64_t **)(*(void *)a1 + 8 * v15);
  if (!v16) {
    return 0;
  }
  int v17 = 0;
  uint64_t v19 = *(const void **)(a3 + 24);
  size_t v18 = *(void *)(a3 + 32);
  do
  {
    uint64_t v20 = v16;
    unint64_t v16 = (uint64_t *)*v16;
    if (!v16) {
      break;
    }
    unint64_t v21 = v16[1];
    if (v14 > 1)
    {
      unint64_t v22 = v16[1];
      if (v21 >= v6) {
        unint64_t v22 = v21 % v6;
      }
    }
    else
    {
      unint64_t v22 = v21 & (v6 - 1);
    }
    if (v22 != v15) {
      break;
    }
    BOOL v23 = v21 == a2 && v16[6] == v18 && memcmp((const void *)v16[5], v19, v18) == 0;
    int v24 = v17 & !v23;
    v17 |= v23;
  }
  while (v24 != 1);
  return v20;
}

void *std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::__node_insert_multi_perform(void *result, void *a2, void *a3)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  if (!a3)
  {
    *a2 = result[2];
    result[2] = a2;
    *(void *)(*result + 8 * v4) = result + 2;
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v3) {
        v6 %= *(void *)&v3;
      }
    }
    else
    {
      v6 &= *(void *)&v3 - 1;
    }
LABEL_18:
    *(void *)(*result + 8 * v6) = a2;
    goto LABEL_19;
  }
  *a2 = *a3;
  *a3 = a2;
  if (*a2)
  {
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v3) {
        v6 %= *(void *)&v3;
      }
    }
    else
    {
      v6 &= *(void *)&v3 - 1;
    }
    if (v6 != v4) {
      goto LABEL_18;
    }
  }
LABEL_19:
  ++result[3];
  return result;
}

void std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::__rehash<false>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::__do_rehash<false>(a1, prime);
    }
  }
}

void std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::__do_rehash<false>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(uint64_t ***)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = (unint64_t)v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      unint64_t v10 = v9.u32[0];
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      for (uint64_t i = *v7; *v7; uint64_t i = *v7)
      {
        unint64_t v13 = i[1];
        if (v10 > 1)
        {
          if (v13 >= a2) {
            v13 %= a2;
          }
        }
        else
        {
          v13 &= a2 - 1;
        }
        if (v13 == v8)
        {
          uint64_t v7 = (uint64_t **)i;
        }
        else
        {
          unint64_t v14 = i;
          if (*(void *)(*(void *)a1 + 8 * v13))
          {
            do
            {
              unint64_t v15 = v14;
              unint64_t v14 = (uint64_t *)*v14;
              if (!v14) {
                break;
              }
              size_t v16 = i[6];
              if (v16 != v14[6]) {
                break;
              }
            }
            while (!memcmp((const void *)i[5], (const void *)v14[5], v16));
            void *v7 = v14;
            *unint64_t v15 = **(void **)(*(void *)a1 + 8 * v13);
            **(void **)(*(void *)a1 + 8 * v13) = i;
          }
          else
          {
            *(void *)(*(void *)a1 + 8 * v13) = v7;
            uint64_t v7 = (uint64_t **)i;
            unint64_t v8 = v13;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v11 = *(void **)a1;
    *(void *)a1 = 0;
    if (v11) {
      operator delete(v11);
    }
    *(void *)(a1 + 8) = 0;
  }
}

uint64_t std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::__emplace_multi<std::pair<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey const,Phase::OptionsValue> const&>(void *a1, long long *a2)
{
  std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::__construct_node<std::pair<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey const,Phase::OptionsValue> const&>((uint64_t)a1, a2, (uint64_t)v5);
  uint64_t inserted = std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::__node_insert_multi(a1, v5[0]);
  v5[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,void *>>>>::reset[abi:ne180100]((uint64_t)v5, 0);
  return inserted;
}

void sub_221EB1DE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::__construct_node<std::pair<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey const,Phase::OptionsValue> const&>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 16;
  uint64_t v6 = (char *)operator new(0x68uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  *(void *)uint64_t v6 = 0;
  *((void *)v6 + 1) = 0;
  std::pair<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey const,Phase::OptionsValue>::pair[abi:ne180100]((std::string *)(v6 + 16), a2);
  *(unsigned char *)(a3 + 16) = 1;
  unint64_t result = std::__string_view_hash<char>::operator()[abi:ne180100]((uint64_t)&v8, *((uint64_t **)v6 + 5), *((void *)v6 + 6));
  *((void *)v6 + 1) = result;
  return result;
}

void sub_221EB1E70(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::SpatialModeler::EntityShapeTemplate>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(56 * a2);
}

uint64_t std::__split_buffer<Phase::SpatialModeler::EntityShapeTemplate>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 56;
    std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::~__hash_table(i - 48);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void Phase::Controller::SpatialModelerInstance::SpatialModelerInstance(Phase::Controller::SpatialModelerInstance *this)
{
  *((void *)this + 4) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 10) = 1065353216;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((_DWORD *)this + 16) = 0;
  *(void *)((char *)this + 68) = 0xFFFFFFFFLL;
  std::__shared_mutex_base::__shared_mutex_base((std::__shared_mutex_base *)((char *)this + 80));
  *(_OWORD *)((char *)this + 248) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_DWORD *)this + 70) = 0;
  *(_OWORD *)((char *)this + 264) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((void *)this + 40) = 10;
  *((void *)this + 41) = 0x3FC999999999999ALL;
  *((void *)this + 42) = 0;
  *((void *)this + 43) = 0;
  *((void *)this + 44) = 0;
  *((void *)this + 45) = -1;
  *((void *)this + 46) = 0;
  *((_DWORD *)this + 94) = 0;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((void *)this + 54) = 0;
  *((void *)this + 55) = -1;
  *((void *)this + 56) = 0;
  *((_DWORD *)this + 114) = 0;
  *((_OWORD *)this + 29) = 0u;
  *((_OWORD *)this + 30) = 0u;
  *((_OWORD *)this + 31) = 0u;
  *((void *)this + 64) = 0;
  *((void *)this + 65) = -1;
  *((void *)this + 66) = 0;
  *((_DWORD *)this + 134) = 0;
  *((_OWORD *)this + 34) = 0u;
  *((_OWORD *)this + 35) = 0u;
  *((_OWORD *)this + 36) = 0u;
  *((_OWORD *)this + 37) = 0u;
  *((_DWORD *)this + 152) = 1065353216;
  *((_DWORD *)this + 154) = 0;
  *((_DWORD *)this + 166) = 0;
  *((void *)this + 81) = 0;
  *((void *)this + 82) = 0;
  *((void *)this + 84) = std::system_category();
  *((void *)this + 85) = 0;
  *((void *)this + 86) = 0;
  *((void *)this + 87) = -1;
  *((void *)this + 88) = 0;
  *((void *)this + 89) = 0;
  *((_DWORD *)this + 180) = 0;
  *(_OWORD *)((char *)this + 728) = 0u;
  *(_OWORD *)((char *)this + 744) = 0u;
  *(_OWORD *)((char *)this + 760) = 0u;
  *(_OWORD *)((char *)this + 772) = 0u;
  *((_DWORD *)this + 288) = 2;
  uint64_t v2 = (char *)this + 1904;
  uint64_t v3 = 1160;
  long long v4 = xmmword_26D472FB8;
  long long v5 = *(_OWORD *)&off_26D472FC8;
  uint64_t v6 = off_26D472FD8;
  do
  {
    uint64_t v7 = (char *)this + v3;
    *(_OWORD *)uint64_t v7 = v4;
    *((_OWORD *)v7 + 1) = v5;
    *((void *)v7 + 4) = v6;
    *(_OWORD *)(v7 + 40) = 0uLL;
    *(_OWORD *)(v7 + 56) = 0uLL;
    *((_DWORD *)v7 + 18) = 1065353216;
    *((void *)v7 + 14) = 0;
    *((void *)v7 + 18) = 0;
    *((void *)v7 + 22) = 0;
    *((void *)v7 + 26) = 0;
    *((void *)v7 + 27) = 0;
    v3 += 248;
    *((void *)v7 + 28) = v7;
    *((void *)v7 + 29) = v7;
    *((void *)v7 + 30) = 0;
  }
  while (v7 + 248 != v2);
  *((void *)this + 244) = 0;
  *((_OWORD *)this + 120) = 0u;
  *((_OWORD *)this + 121) = 0u;
  *(_OWORD *)uint64_t v2 = 0u;
  *((_DWORD *)this + 490) = 1065353216;
  *((_OWORD *)this + 123) = 0u;
  *((_OWORD *)this + 124) = 0u;
  *((_OWORD *)this + 125) = 0u;
  *((_OWORD *)this + 126) = 0u;
  *((_OWORD *)this + 127) = 0u;
  *((_OWORD *)this + 128) = 0u;
  *((_OWORD *)this + 129) = 0u;
  *((_OWORD *)this + 130) = 0u;
  *((_OWORD *)this + 131) = 0u;
  long long v13 = v5;
  long long v14 = v4;
  *((void *)this + 253) = std::system_category();
  *((void *)this + 255) = 0;
  *((void *)this + 254) = 0;
  *((void *)this + 256) = -1;
  *((void *)this + 258) = 0;
  *((void *)this + 257) = 0;
  *((_DWORD *)this + 518) = 0;
  *((_OWORD *)this + 130) = 0u;
  *((_OWORD *)this + 131) = 0u;
  *((_OWORD *)this + 132) = 0u;
  *((_OWORD *)this + 133) = 0u;
  *((_OWORD *)this + 134) = 0u;
  *((void *)this + 270) = 0;
  *((_DWORD *)this + 542) = 1065353216;
  Phase::Controller::RenderGroupMgr::RenderGroupMgr((Phase::Controller::SpatialModelerInstance *)((char *)this + 2176));
  Phase::Controller::RenderGroupMgr::RenderGroupMgr((Phase::Controller::SpatialModelerInstance *)((char *)this + 2752));
  *((_DWORD *)this + 832) = 1;
  char v8 = (char *)this + 4080;
  uint64_t v9 = 3336;
  do
  {
    unint64_t v10 = (char *)this + v9;
    *(_OWORD *)unint64_t v10 = v14;
    *((_OWORD *)v10 + 1) = v13;
    *((void *)v10 + 4) = v6;
    *(_OWORD *)(v10 + 40) = 0uLL;
    *(_OWORD *)(v10 + 56) = 0uLL;
    *((_DWORD *)v10 + 18) = 1065353216;
    *((void *)v10 + 14) = 0;
    *((void *)v10 + 18) = 0;
    *((void *)v10 + 22) = 0;
    *((void *)v10 + 26) = 0;
    *((void *)v10 + 27) = 0;
    v9 += 248;
    *((void *)v10 + 28) = v10;
    *((void *)v10 + 29) = v10;
    *((void *)v10 + 30) = 0;
  }
  while (v10 + 248 != v8);
  *((void *)this + 516) = 0;
  *((_OWORD *)this + 256) = 0u;
  *((_OWORD *)this + 257) = 0u;
  *(_OWORD *)char v8 = 0u;
  *((_DWORD *)this + 1034) = 1065353216;
  *((_OWORD *)this + 259) = 0u;
  *((_OWORD *)this + 260) = 0u;
  *((_OWORD *)this + 261) = 0u;
  *((_OWORD *)this + 262) = 0u;
  *((_OWORD *)this + 263) = 0u;
  *((_OWORD *)this + 264) = 0u;
  *((_OWORD *)this + 265) = 0u;
  *((_OWORD *)this + 266) = 0u;
  *((_OWORD *)this + 267) = 0u;
  *((void *)this + 525) = std::system_category();
  *((void *)this + 527) = 0;
  *((void *)this + 526) = 0;
  *((void *)this + 528) = -1;
  *((void *)this + 530) = 0;
  *((void *)this + 529) = 0;
  *((_DWORD *)this + 1062) = 0;
  *((_OWORD *)this + 266) = 0u;
  *((_OWORD *)this + 267) = 0u;
  *((_OWORD *)this + 268) = 0u;
  *((_OWORD *)this + 269) = 0u;
  *((_OWORD *)this + 270) = 0u;
  *((void *)this + 542) = 0;
  *((_DWORD *)this + 1086) = 1065353216;
  Phase::Controller::RenderGroupMgr::RenderGroupMgr((Phase::Controller::SpatialModelerInstance *)((char *)this + 4352));
  Phase::Controller::RenderGroupMgr::RenderGroupMgr((Phase::Controller::SpatialModelerInstance *)((char *)this + 4928));
  uint64_t v11 = -96;
  do
  {
    size_t v12 = (char *)this + v11;
    *((_WORD *)v12 + 2812) = 0;
    *((void *)v12 + 702) = 0;
    *((_OWORD *)v12 + 350) = 0uLL;
    v11 += 32;
  }
  while (v11);
  *((_DWORD *)this + 1400) = 0;
  *((void *)this + 701) = 0;
  *((_OWORD *)this + 351) = 0u;
  *((_WORD *)this + 2816) = 0;
  *((_DWORD *)this + 1410) = 0;
  *((void *)this + 706) = 850045863;
  *(_OWORD *)((char *)this + 5720) = 0u;
  *(_OWORD *)((char *)this + 5736) = 0u;
  *(_OWORD *)((char *)this + 5752) = 0u;
  *(_OWORD *)((char *)this + 5656) = 0u;
  *(_OWORD *)((char *)this + 5672) = 0u;
  *(_OWORD *)((char *)this + 5688) = 0u;
  *(_OWORD *)((char *)this + 5697) = 0u;
  *((void *)this + 721) = 10;
  *(_OWORD *)((char *)this + 5784) = 0u;
  *(_OWORD *)((char *)this + 5800) = 0u;
  *((_DWORD *)this + 1454) = 1065353216;
  *((_OWORD *)this + 364) = 0u;
  *((void *)this + 730) = 0;
  *((_OWORD *)this + 366) = 0u;
  operator new();
}

void sub_221EB23B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, Phase::Controller::SpatialModelerInstance::GraphData *a9, uint64_t a10, Phase::SpatialModeler::QueryDesc *a11, Phase::Controller::SpatialModelerInstance::GraphData *a12, Phase::SpatialModeler::QueryDesc *a13, uint64_t a14, std::error_category **a15, uint64_t a16, Phase::SpatialModeler::QueryDesc *a17, uint64_t a18, uint64_t a19, void *a20)
{
  std::unique_ptr<Phase::Controller::SpatialSubmixRouter>::reset[abi:ne180100](v26, 0);
  Phase::Controller::RenderGroupMgr::~RenderGroupMgr(v25);
  std::unique_ptr<Phase::SpatialModeler::Scheduler>::reset[abi:ne180100](a15);
  uint64_t v29 = (std::__shared_weak_count *)v20[729];
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>>>::~__hash_table(v24);
  std::deque<double>::~deque[abi:ne180100](v21);
  std::mutex::~mutex(v27);
  a20 = v20 + 701;
  std::vector<Phase::SpatialModeler::Graph>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  for (uint64_t i = 0; i != -12; i -= 4)
  {
    a20 = &v20[i + 696];
    std::vector<Phase::SpatialModeler::Graph>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  }
  Phase::Controller::SpatialModelerInstance::GraphData::~GraphData(a9);
  Phase::Controller::SpatialModelerInstance::GraphData::~GraphData(a12);
  a20 = v20 + 95;
  std::vector<std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  Phase::Controller::SpatialQueryInstance::~SpatialQueryInstance(v23);
  std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>>>::~__hash_table(a10);
  Phase::SpatialModeler::QueryDesc::~QueryDesc(a17);
  Phase::SpatialModeler::QueryDesc::~QueryDesc(a11);
  Phase::SpatialModeler::QueryDesc::~QueryDesc(a13);
  uint64_t v31 = *v22;
  if (*v22)
  {
    v20[37] = v31;
    operator delete(v31);
  }
  uint64_t v32 = (std::__shared_weak_count *)v20[34];
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  uint64_t v33 = (std::__shared_weak_count *)v20[32];
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  Phase::Controller::SubmixSlotMap<Phase::Controller::SpatialModelerInstance::SubmixInfo>::~SubmixSlotMap(a14);
  Phase::SortedCommandQueue<Phase::SpatialModeler::PriorityQueue,Phase::SpatialModeler::PriorityQueueCommandType,std::variant<std::monostate,Phase::SpatialModeler::PriorityQueueEntry,Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueClusterIndexUpdate,Phase::SpatialModeler::PriorityQueueGlobals>>::CommandBatch::Clear(v20);
  _Unwind_Resume(a1);
}

void Phase::Controller::SpatialModelerInstance::GraphData::~GraphData(Phase::Controller::SpatialModelerInstance::GraphData *this)
{
  Phase::Controller::RenderGroupMgr::~RenderGroupMgr((atomic_ullong *)this + 200);
  Phase::Controller::RenderGroupMgr::~RenderGroupMgr((atomic_ullong *)this + 128);
  std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>>>::~__hash_table((uint64_t)this + 984);
  uint64_t v2 = (void *)*((void *)this + 120);
  if (v2)
  {
    *((void *)this + 121) = v2;
    operator delete(v2);
  }
  Phase::Controller::SpatialQueryInstance::~SpatialQueryInstance((std::__shared_weak_count **)this + 102);
  std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>>>::~__hash_table((uint64_t)this + 776);
  for (uint64_t i = 504; i != -240; i -= 248)
    Phase::SpatialModeler::PriorityQueue::~PriorityQueue((atomic_ullong *)((char *)this + i));
}

uint64_t Phase::Controller::SubmixSlotMap<Phase::Controller::SpatialModelerInstance::SubmixInfo>::~SubmixSlotMap(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 72);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 184));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 136));
  std::mutex::~mutex(v2);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }

  return std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(a1);
}

void Phase::Controller::SpatialModelerInstance::~SpatialModelerInstance(Phase::Controller::SpatialModelerInstance *this)
{
  Phase::Controller::SpatialModelerInstance::Destroy(this);
  std::unique_ptr<Phase::Controller::SpatialSubmixRouter>::reset[abi:ne180100]((Phase::Controller::SpatialSubmixRouter **)this + 809, 0);
  Phase::Controller::RenderGroupMgr::~RenderGroupMgr((atomic_ullong *)this + 737);
  std::unique_ptr<Phase::SpatialModeler::Scheduler>::reset[abi:ne180100]((std::error_category **)this + 734);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 729);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>>>::~__hash_table((uint64_t)this + 5784);
  std::deque<double>::~deque[abi:ne180100]((uint64_t)this + 5720);
  std::mutex::~mutex((std::mutex *)((char *)this + 5648));
  unint64_t v15 = (void **)((char *)this + 5608);
  std::vector<Phase::SpatialModeler::Graph>::__destroy_vector::operator()[abi:ne180100](&v15);
  for (uint64_t i = 0; i != -96; i -= 32)
  {
    unint64_t v15 = (void **)((char *)this + i + 5568);
    std::vector<Phase::SpatialModeler::Graph>::__destroy_vector::operator()[abi:ne180100](&v15);
  }
  Phase::Controller::RenderGroupMgr::~RenderGroupMgr((atomic_ullong *)this + 616);
  Phase::Controller::RenderGroupMgr::~RenderGroupMgr((atomic_ullong *)this + 544);
  std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>>>::~__hash_table((uint64_t)this + 4312);
  long long v4 = (void *)*((void *)this + 536);
  if (v4)
  {
    *((void *)this + 537) = v4;
    operator delete(v4);
  }
  Phase::Controller::SpatialQueryInstance::~SpatialQueryInstance((std::__shared_weak_count **)this + 518);
  std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>>>::~__hash_table((uint64_t)this + 4104);
  for (uint64_t j = 3832; j != 3088; j -= 248)
    Phase::SpatialModeler::PriorityQueue::~PriorityQueue((atomic_ullong *)((char *)this + j));
  Phase::Controller::RenderGroupMgr::~RenderGroupMgr((atomic_ullong *)this + 344);
  Phase::Controller::RenderGroupMgr::~RenderGroupMgr((atomic_ullong *)this + 272);
  std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>>>::~__hash_table((uint64_t)this + 2136);
  uint64_t v6 = (void *)*((void *)this + 264);
  if (v6)
  {
    *((void *)this + 265) = v6;
    operator delete(v6);
  }
  Phase::Controller::SpatialQueryInstance::~SpatialQueryInstance((std::__shared_weak_count **)this + 246);
  std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>>>::~__hash_table((uint64_t)this + 1928);
  for (uint64_t k = 1656; k != 912; k -= 248)
    Phase::SpatialModeler::PriorityQueue::~PriorityQueue((atomic_ullong *)((char *)this + k));
  unint64_t v15 = (void **)((char *)this + 760);
  std::vector<std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>::__destroy_vector::operator()[abi:ne180100](&v15);
  Phase::Controller::SpatialQueryInstance::~SpatialQueryInstance((std::__shared_weak_count **)this + 77);
  std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>>>::~__hash_table((uint64_t)this + 576);
  char v8 = (void *)*((void *)this + 68);
  if (v8)
  {
    *((void *)this + 69) = v8;
    operator delete(v8);
  }
  if (*((char *)this + 519) < 0) {
    operator delete(*((void **)this + 62));
  }
  uint64_t v9 = (void *)*((void *)this + 58);
  if (v9)
  {
    *((void *)this + 59) = v9;
    operator delete(v9);
  }
  if (*((char *)this + 439) < 0) {
    operator delete(*((void **)this + 52));
  }
  unint64_t v10 = (void *)*((void *)this + 48);
  if (v10)
  {
    *((void *)this + 49) = v10;
    operator delete(v10);
  }
  if (*((char *)this + 359) < 0) {
    operator delete(*((void **)this + 42));
  }
  uint64_t v11 = (void *)*((void *)this + 36);
  if (v11)
  {
    *((void *)this + 37) = v11;
    operator delete(v11);
  }
  size_t v12 = (std::__shared_weak_count *)*((void *)this + 34);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  long long v13 = (std::__shared_weak_count *)*((void *)this + 32);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  std::condition_variable::~condition_variable((std::condition_variable *)this + 4);
  std::condition_variable::~condition_variable((std::condition_variable *)this + 3);
  std::mutex::~mutex((std::mutex *)((char *)this + 80));
  long long v14 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)this + 8);
  Phase::SortedCommandQueue<Phase::SpatialModeler::PriorityQueue,Phase::SpatialModeler::PriorityQueueCommandType,std::variant<std::monostate,Phase::SpatialModeler::PriorityQueueEntry,Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueClusterIndexUpdate,Phase::SpatialModeler::PriorityQueueGlobals>>::CommandBatch::Clear(this);
}

Phase::Controller::SpatialModelerInstance *Phase::Controller::SpatialModelerInstance::Destroy(Phase::Controller::SpatialModelerInstance *this)
{
  if (*((void *)this + 732))
  {
    uint64_t v1 = (uint64_t)this;
    Phase::Controller::SpatialModelerInstance::StopUpdate(this);
    uint64_t v2 = Phase::Controller::SpatialModelerInstance::Reset((Phase::Controller::SpatialSubmixRouter **)v1);
    Phase::Controller::SpatialModelerInstance::DestroyAllTempGraphData((uint64_t)v2, v1 + 1152);
    Phase::Controller::SpatialModelerInstance::DestroyAllTempGraphData(v3, v1 + 3328);
    long long v4 = *(std::__shared_weak_count **)(v1 + 272);
    *(void *)(v1 + 264) = 0;
    *(void *)(v1 + 272) = 0;
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    *(_DWORD *)(v1 + 280) = 0;
    Phase::Controller::SpatialModelerInstance::ClearRegisteredSubmixState((Phase::Controller::SpatialModelerInstance *)v1);
    Phase::Controller::SubmixSlotMap<Phase::Controller::SpatialModelerInstance::SubmixInfo>::Clear(v1 + 8);
    *(void *)(v1 + 296) = *(void *)(v1 + 288);
    uint64_t v5 = **(void **)(v1 + 5872);
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
    }
    std::unique_ptr<Phase::SpatialModeler::Scheduler>::reset[abi:ne180100]((std::error_category **)(v1 + 5872));
    this = *(Phase::Controller::SpatialModelerInstance **)(v1 + 5856);
    if (this) {
      this = (Phase::Controller::SpatialModelerInstance *)(*(uint64_t (**)(Phase::Controller::SpatialModelerInstance *))(*(void *)this + 24))(this);
    }
    *(void *)(v1 + 5856) = 0;
  }
  return this;
}

void Phase::Controller::SpatialModelerInstance::Initialize(Phase::Controller::SpatialModelerInstance *this, unint64_t a2, uint64_t a3, Phase::Logger *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  if (*((void *)this + 732)) {
    Phase::Controller::SpatialModelerInstance::Destroy(this);
  }
  *((void *)this + 735) = a4;
  *((void *)this + 736) = a6;
  *((void *)this + 143) = 0;
  *(_OWORD *)((char *)this + 792) = 0u;
  *(_OWORD *)((char *)this + 808) = 0u;
  *(_OWORD *)((char *)this + 824) = 0u;
  *(_OWORD *)((char *)this + 840) = 0u;
  *(_OWORD *)((char *)this + 856) = 0u;
  *(_OWORD *)((char *)this + 872) = 0u;
  *(_OWORD *)((char *)this + 888) = 0u;
  *(_OWORD *)((char *)this + 904) = 0u;
  *(_OWORD *)((char *)this + 920) = 0u;
  *(_OWORD *)((char *)this + 936) = 0u;
  *(_OWORD *)((char *)this + 952) = 0u;
  *(_OWORD *)((char *)this + 968) = 0u;
  *(_OWORD *)((char *)this + 984) = 0u;
  *(_OWORD *)((char *)this + 1000) = 0u;
  *(_OWORD *)((char *)this + 1016) = 0u;
  *(_OWORD *)((char *)this + 1032) = 0u;
  *(_OWORD *)((char *)this + 1048) = 0u;
  *(_OWORD *)((char *)this + 1064) = 0u;
  *(_OWORD *)((char *)this + 1080) = 0u;
  *(_OWORD *)((char *)this + 1096) = 0u;
  *(_OWORD *)((char *)this + 1112) = 0u;
  *(_OWORD *)((char *)this + 1128) = 0u;
  uint64_t v11 = (Phase::Controller::SpatialModelerRegistry *)Phase::Controller::TaskManager::GetService<Phase::Controller::SpatialModelerRegistry>(a4, 5);
  uint64_t v12 = Phase::Controller::TaskManager::GetService<Phase::Geometry::System>(a4, 2);
  *(void *)std::string buf = a2;
  long long v13 = (std::string *)std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::find<unsigned long long>(v11, (unint64_t *)buf);
  int v46 = v11;
  unint64_t v47 = a2;
  long long v14 = v13 + 1;
  if (!v13) {
    long long v14 = 0;
  }
  __int16 v49 = this;
  *((void *)this + 733) = v14;
  if (!v13)
  {
    unint64_t v40 = **(id **)(Phase::Logger::GetInstance(0) + 224);
    if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = "CvmSpatialModelerInstance.mm";
      __int16 v53 = 1024;
      int v54 = 436;
      _os_log_impl(&dword_221E5E000, v40, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [!mpSpatialModelerInfo is true]: \"Couldn't find Spatial Modeler Info!\"", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Couldn't find Spatial Modeler Info!");
  }
  uint64_t v45 = v12;
  std::string::pointer data = v13[4].__r_.__value_.__l.__data_;
  if ((std::string::pointer)v13[4].__r_.__value_.__l.__size_ == data)
  {
LABEL_40:
    SpatialModeleruint64_t Instance = Phase::Controller::SpatialModelerRegistry::CreateSpatialModelerInstance(v46, v47);
    *((void *)v49 + 732) = SpatialModelerInstance;
    if (SpatialModelerInstance)
    {
      SpatialModelerInstance[3] = Phase::Controller::SpatialModelerSystem::GetSceneQueryFilterForSpatialCategory((Phase::Logger *)*(unsigned int *)(*((void *)v49 + 733) + 40));
      Phase::SpatialModeler::Scheduler::Init(*((Phase::Logger **)v49 + 734), v45, *((Phase::Logger **)v49 + 732), a3);
      operator new();
    }
    uint64_t v42 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(0)
                                                                                        + 224)));
    if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
    {
      Phase::Controller::SpatialModelerInfo::GetDescription((uint64_t *)v50, *((Phase::Controller::SpatialModelerInfo **)v49 + 733));
      uint64_t v43 = v51 >= 0 ? v50 : (void **)v50[0];
      *(_DWORD *)std::string buf = 136315650;
      *(void *)&uint8_t buf[4] = "CvmSpatialModelerInstance.mm";
      __int16 v53 = 1024;
      int v54 = 464;
      __int16 v55 = 2080;
      unint64_t v56 = v43;
      _os_log_impl(&dword_221E5E000, v42, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [!mpSpatialModeler is true]: \"Couldn't find a Spatial Modeler: %s!\"", buf, 0x1Cu);
      if (v51 < 0) {
        operator delete(v50[0]);
      }
    }

    uint64_t v44 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](v44, "Couldn't find a Spatial Modeler: %s!");
  }
  uint64_t v16 = 0;
  unint64_t v17 = 0;
  size_t v18 = (std::string *)((char *)v49 + 496);
  uint64_t v48 = (std::string *)((char *)v49 + 416);
  uint64_t v19 = (std::string *)((char *)v49 + 336);
  while (1)
  {
    uint64_t v20 = &data[v16];
    if (data[v16 + 23] < 0)
    {
      uint64_t v30 = *((void *)v20 + 1);
      if (v30 == 4)
      {
        int v34 = **(_DWORD **)v20;
        goto LABEL_35;
      }
      if (v30 != 7) {
        goto LABEL_42;
      }
      BOOL v23 = *(char **)v20;
      if (**(_DWORD **)v20 != 1398099011 || *(_DWORD *)(*(void *)v20 + 3) != 1380275283)
      {
LABEL_15:
        int v24 = *(_DWORD *)v23;
        int v25 = *(_DWORD *)(v23 + 3);
        if (v24 != 1413566547 || v25 != 1279347028)
        {
LABEL_42:
          unint64_t v38 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)v13) + 224);
          if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string buf = 136315394;
            *(void *)&uint8_t buf[4] = "CvmSpatialModelerInstance.mm";
            __int16 v53 = 1024;
            int v54 = 456;
            _os_log_impl(&dword_221E5E000, v38, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Unknown Name\"", buf, 0x12u);
          }
          unint64_t v39 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v39, "Unknown Name");
        }
        long long v13 = std::string::operator=(v18, (const std::string *)&data[v16]);
        uint64_t v27 = &data[v16];
        int v28 = *((_DWORD *)v27 + 10);
        *(_OWORD *)((char *)v49 + 520) = *(_OWORD *)(v27 + 24);
        *((_DWORD *)v49 + 134) = v28;
        if (v20 != (char *)v18) {
          long long v13 = (std::string *)std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)v49 + 544, *((char **)v27 + 6), *((void *)v27 + 7), (uint64_t)(*((void *)v27 + 7) - *((void *)v27 + 6)) >> 2);
        }
        uint64_t v29 = v49;
        *((void *)v49 + 71) = *((void *)v27 + 9);
        if (*((_DWORD *)v49 + 132) != 2) {
          std::terminate();
        }
        goto LABEL_39;
      }
    }
    else
    {
      int v21 = data[v16 + 23];
      if (v21 == 4)
      {
        int v34 = *(_DWORD *)v20;
LABEL_35:
        if (v34 != 1280070979) {
          goto LABEL_42;
        }
        long long v13 = std::string::operator=(v19, (const std::string *)&data[v16]);
        int v35 = *(_DWORD *)&data[v16 + 40];
        *(_OWORD *)((char *)v49 + 360) = *(_OWORD *)&data[v16 + 24];
        *((_DWORD *)v49 + 94) = v35;
        uint64_t v33 = (void *)((char *)v49 + 408);
        if (v20 != (char *)v19)
        {
          long long v13 = (std::string *)std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)v49 + 384, *(char **)&data[v16 + 48], *(void *)&data[v16 + 56], (uint64_t)(*(void *)&data[v16 + 56] - *(void *)&data[v16 + 48]) >> 2);
          uint64_t v33 = (void *)((char *)v49 + 408);
        }
        goto LABEL_38;
      }
      if (v21 != 7) {
        goto LABEL_42;
      }
      BOOL v22 = *(_DWORD *)v20 == 1398099011 && *(_DWORD *)(v20 + 3) == 1380275283;
      BOOL v23 = &data[v16];
      if (!v22) {
        goto LABEL_15;
      }
    }
    long long v13 = std::string::operator=(v48, (const std::string *)&data[v16]);
    int v32 = *(_DWORD *)&data[v16 + 40];
    *(_OWORD *)((char *)v49 + 440) = *(_OWORD *)&data[v16 + 24];
    *((_DWORD *)v49 + 114) = v32;
    uint64_t v33 = (void *)((char *)v49 + 488);
    if (v20 != (char *)v48)
    {
      long long v13 = (std::string *)std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)v49 + 464, *(char **)&data[v16 + 48], *(void *)&data[v16 + 56], (uint64_t)(*(void *)&data[v16 + 56] - *(void *)&data[v16 + 48]) >> 2);
      uint64_t v33 = (void *)((char *)v49 + 488);
    }
LABEL_38:
    *uint64_t v33 = *(void *)&data[v16 + 72];
    uint64_t v29 = v49;
LABEL_39:
    ++v17;
    uint64_t v36 = *((void *)v29 + 733);
    std::string::pointer data = *(std::string::pointer *)(v36 + 72);
    v16 += 80;
    if (v17 >= 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v36 + 80) - (void)data) >> 4)) {
      goto LABEL_40;
    }
  }
}

void sub_221EB3B2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  __cxa_free_exception(v31);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::SpatialModelerInstance::StopUpdate(Phase::Controller::SpatialModelerInstance *this)
{
  v42[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = (char *)this + 5640;
  if (*((void *)this + 728))
  {
    unsigned __int8 v3 = atomic_load((unsigned __int8 *)this + 5642);
    if (v3)
    {
      uint64_t v4 = *((void *)this + 736);
      uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 729);
      uint64_t v26 = *((void *)this + 728);
      uint64_t v27 = v5;
      if (v5) {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, uint64_t *, void))(*(void *)v4 + 64))(v4, &v26, 0);
      if (v27) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v27);
      }
      atomic_store(0, (unsigned __int8 *)v2 + 2);
    }
    unsigned __int8 v6 = atomic_load((unsigned __int8 *)v2);
    if (v6)
    {
      uint64_t v7 = *((void *)this + 736);
      char v8 = (std::__shared_weak_count *)*((void *)this + 729);
      uint64_t v24 = *((void *)this + 728);
      int v25 = v8;
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, uint64_t *, double))(*(void *)v7 + 96))(v7, &v24, 0.0);
      if (v25) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v25);
      }
    }
  }
  v2[72] = 0;
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 729);
  *((_OWORD *)this + 364) = 0u;
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  std::mutex::lock((std::mutex *)((char *)this + 5648));
  uint64_t v10 = *((void *)this + 726);
  if (v10)
  {
    uint64_t v11 = 0;
    atomic_store(1u, (unsigned __int8 *)v2 + 3);
    uint64_t v31 = (uint64_t *)&v31;
    int v32 = (uint64_t *)&v31;
    uint64_t v33 = 0;
    uint64_t v12 = (uint64_t *)&v31;
    do
    {
      long long v13 = (uint64_t *)operator new(0x20uLL);
      void v13[2] = 0;
      void v13[3] = 0;
      uint64_t *v13 = (uint64_t)v12;
      v13[1] = (uint64_t)&v31;
      v12[1] = (uint64_t)v13;
      ++v11;
      uint64_t v12 = v13;
      uint64_t v31 = v13;
      uint64_t v33 = v11;
    }
    while (v10 != v11);
    long long v14 = (void *)*((void *)this + 725);
    if (v14)
    {
      unint64_t v15 = v32;
      do
      {
        uint64_t v16 = v14[3];
        unint64_t v17 = (std::__shared_weak_count *)v14[4];
        if (v17)
        {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        size_t v18 = (std::__shared_weak_count *)v15[3];
        void v15[2] = v16;
        v15[3] = (uint64_t)v17;
        if (v18) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v18);
        }
        if (v17) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v17);
        }
        long long v14 = (void *)*v14;
        unint64_t v15 = (uint64_t *)v15[1];
      }
      while (v14);
    }
    uint64_t v19 = *((void *)this + 736);
    std::list<std::shared_ptr<Phase::Job>>::list(v30, (uint64_t)&v31);
    v42[0] = &unk_26D473788;
    v42[1] = this;
    v42[2] = v33;
    v42[3] = v42;
    (*(void (**)(uint64_t, uint64_t *, void *, uint64_t))(*(void *)v19 + 88))(v19, v30, v42, 1);
    std::__function::__value_func<void ()(BOOL,std::list<std::shared_ptr<Phase::Job>>)>::~__value_func[abi:ne180100](v42);
    std::__list_imp<std::shared_ptr<Phase::Job>>::clear(v30);
    int v21 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v20)
                                                                                        + 224)));
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      Phase::Controller::SpatialModelerInstance::GetDescription((Phase::Controller::SpatialModelerInstance *)__p, (uint64_t)this);
      if (v29 >= 0) {
        BOOL v22 = __p;
      }
      else {
        BOOL v22 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136315906;
      int v35 = "CvmSpatialModelerInstance.mm";
      __int16 v36 = 1024;
      int v37 = 3116;
      __int16 v38 = 2080;
      unint64_t v39 = v22;
      __int16 v40 = 2048;
      uint64_t v41 = v33;
      _os_log_impl(&dword_221E5E000, v21, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s: stopping all (%lu) sustain graphs", buf, 0x26u);
      if (v29 < 0) {
        operator delete(__p[0]);
      }
    }

    std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>>>::clear((uint64_t)this + 5784);
    std::__list_imp<std::shared_ptr<Phase::Job>>::clear((uint64_t *)&v31);
  }
  else
  {
    std::mutex::unlock((std::mutex *)((char *)this + 5648));
  }
  std::mutex::lock((std::mutex *)((char *)this + 5648));
  std::mutex::unlock((std::mutex *)((char *)this + 5648));
  Phase::Controller::SpatialModelerInstance::CancelAllQueries(this);
  return atomic_exchange(v2 + 1, 0) & 1;
}

void sub_221EB3FA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);

  std::__list_imp<std::shared_ptr<Phase::Job>>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

Phase::Controller::SpatialSubmixRouter *Phase::Controller::SpatialModelerInstance::Reset(Phase::Controller::SpatialSubmixRouter **this)
{
  Phase::Controller::SpatialModelerInstance::CancelAllQueries((Phase::Controller::SpatialModelerInstance *)this);
  Phase::Controller::SpatialModelerInstance::ResetAllGraphData((atomic_ullong *)this, (Phase::Controller::SpatialModelerInstance::GraphData *)(this + 144));
  Phase::Controller::SpatialModelerInstance::ResetAllGraphData((atomic_ullong *)this, (Phase::Controller::SpatialModelerInstance::GraphData *)(this + 416));
  Phase::SortedCommandQueue<Phase::SpatialModeler::PriorityQueue,Phase::SpatialModeler::PriorityQueueCommandType,std::variant<std::monostate,Phase::SpatialModeler::PriorityQueueEntry,Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueClusterIndexUpdate,Phase::SpatialModeler::PriorityQueueGlobals>>::CommandBatch::Clear(this);
  unint64_t result = this[809];
  if (result)
  {
    return (Phase::Controller::SpatialSubmixRouter *)Phase::Controller::SpatialSubmixRouter::Reset(result);
  }
  return result;
}

void Phase::Controller::SpatialModelerInstance::ClearRegisteredSubmixState(Phase::Controller::SpatialModelerInstance *this)
{
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  std::atomic_store[abi:ne180100]<Phase::Controller::SubmixSlotMapState<Phase::Controller::SpatialModelerInstance::SubmixInfo>>((uint64_t *)this + 31, &v1);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void sub_221EB40B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void Phase::Controller::SubmixSlotMap<Phase::Controller::SpatialModelerInstance::SubmixInfo>::Clear(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear((void *)a1);
  atomic_store(0, (unsigned int *)(a1 + 64));
  atomic_store(0xFFFFFFFF, (unsigned int *)(a1 + 60));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  *(_DWORD *)(a1 + 56) = 0;
}

std::error_category **std::unique_ptr<Phase::SpatialModeler::Scheduler>::reset[abi:ne180100](std::error_category **result)
{
  uint64_t v1 = *result;
  Phase::Controller::SpatialSubmixRouter *result = 0;
  if (v1)
  {
    std::error_category::~error_category(v1 + 3);
    JUMPOUT(0x223C938A0);
  }
  return result;
}

uint64_t Phase::Controller::SpatialModelerInstance::GetDescription(Phase::Controller::SpatialModelerInstance *this, uint64_t a2)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"SpatialModelerInstance impl@", 28);
  std::ostream::operator<<();
  unsigned __int8 v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" (", 2);
  Phase::Controller::SpatialModelerInfo::GetDescription((uint64_t *)__p, *(Phase::Controller::SpatialModelerInfo **)(a2 + 5864));
  if ((v9 & 0x80u) == 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if ((v9 & 0x80u) == 0) {
    uint64_t v5 = v9;
  }
  else {
    uint64_t v5 = (uint64_t)__p[1];
  }
  unsigned __int8 v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)")", 1);
  if ((char)v9 < 0) {
    operator delete(__p[0]);
  }
  std::stringbuf::str();
  v10[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v10 + *(void *)(v10[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v10[1] = MEMORY[0x263F8C318] + 16;
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x223C937D0](&v12);
}

void sub_221EB4324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void *Phase::Controller::SpatialModelerInstance::SetupGraphData(void *a1, void *a2, uint64_t a3)
{
  v22[4] = *MEMORY[0x263EF8340];
  a2[31] = a1[45];
  unsigned __int8 v6 = operator new(0x20uLL);
  void *v6 = &unk_26D473250;
  v6[1] = a1;
  void v6[2] = a2;
  v6[3] = a3;
  v22[3] = v6;
  std::function<void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::operator=(a2 + 12, v22);
  std::__function::__value_func<void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::~__value_func[abi:ne180100](v22);
  v21[0] = &unk_26D473298;
  v21[1] = a1;
  v21[2] = a2;
  v21[3] = v21;
  std::function<void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::operator=(a2 + 16, v21);
  std::__function::__value_func<void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::~__value_func[abi:ne180100](v21);
  v20[0] = &unk_26D4732E0;
  v20[1] = a1;
  v20[2] = a2;
  v20[3] = v20;
  std::function<void ()(Phase::SpatialModeler::PriorityQueueEntry &)>::operator=(a2 + 20, v20);
  std::__function::__value_func<void ()(Phase::SpatialModeler::PriorityQueueEntry &)>::~__value_func[abi:ne180100](v20);
  v19[0] = &unk_26D473328;
  v19[3] = v19;
  std::function<BOOL ()(Phase::SpatialModeler::PriorityQueueEntry const&,Phase::SpatialModeler::PriorityQueueEntry const&)>::operator=(a2 + 24, (uint64_t)v19);
  std::__function::__value_func<BOOL ()(Phase::SpatialModeler::PriorityQueueEntry const&,Phase::SpatialModeler::PriorityQueueEntry const&)>::~__value_func[abi:ne180100](v19);
  a2[62] = a1[55];
  uint64_t v7 = operator new(0x20uLL);
  void *v7 = &unk_26D473370;
  v7[1] = a1;
  double v7[2] = a2;
  v7[3] = a3;
  v18[3] = v7;
  std::function<void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::operator=(a2 + 43, v18);
  std::__function::__value_func<void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::~__value_func[abi:ne180100](v18);
  v17[0] = &unk_26D4733B8;
  v17[1] = a1;
  v17[2] = a2;
  v17[3] = v17;
  std::function<void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::operator=(a2 + 47, v17);
  std::__function::__value_func<void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::~__value_func[abi:ne180100](v17);
  v16[0] = &unk_26D473400;
  v16[1] = a1;
  v16[2] = a2;
  v16[3] = v16;
  std::function<void ()(Phase::SpatialModeler::PriorityQueueEntry &)>::operator=(a2 + 51, v16);
  std::__function::__value_func<void ()(Phase::SpatialModeler::PriorityQueueEntry &)>::~__value_func[abi:ne180100](v16);
  v15[3] = 0;
  std::function<BOOL ()(Phase::SpatialModeler::PriorityQueueEntry const&,Phase::SpatialModeler::PriorityQueueEntry const&)>::operator=(a2 + 55, (uint64_t)v15);
  std::__function::__value_func<BOOL ()(Phase::SpatialModeler::PriorityQueueEntry const&,Phase::SpatialModeler::PriorityQueueEntry const&)>::~__value_func[abi:ne180100](v15);
  a2[93] = a1[65];
  char v8 = operator new(0x20uLL);
  *char v8 = &unk_26D473448;
  v8[1] = a1;
  void v8[2] = a2;
  void v8[3] = a3;
  v14[3] = v8;
  std::function<void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::operator=(a2 + 74, v14);
  std::__function::__value_func<void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::~__value_func[abi:ne180100](v14);
  v13[0] = &unk_26D473490;
  v13[1] = a1;
  void v13[2] = a2;
  void v13[3] = v13;
  std::function<void ()(Phase::SpatialModeler::PriorityQueueEntry &)>::operator=(a2 + 82, v13);
  std::__function::__value_func<void ()(Phase::SpatialModeler::PriorityQueueEntry &)>::~__value_func[abi:ne180100](v13);
  v12[0] = &unk_26D4734D8;
  v12[1] = a2;
  void v12[3] = v12;
  std::function<void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::operator=(a2 + 78, v12);
  std::__function::__value_func<void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::~__value_func[abi:ne180100](v12);
  v11[0] = &unk_26D473520;
  void v11[3] = v11;
  std::function<BOOL ()(Phase::SpatialModeler::PriorityQueueEntry const&,Phase::SpatialModeler::PriorityQueueEntry const&)>::operator=(a2 + 86, (uint64_t)v11);
  std::__function::__value_func<BOOL ()(Phase::SpatialModeler::PriorityQueueEntry const&,Phase::SpatialModeler::PriorityQueueEntry const&)>::~__value_func[abi:ne180100](v11);
  v10[0] = &unk_26D473568;
  v10[1] = a1;
  void v10[2] = a2;
  v10[3] = v10;
  Phase::Controller::SpatialQueryInstance::Initialize((uint64_t)(a2 + 102), (uint64_t)(a1 + 52), (Phase::SystemAllocator *)(a1 + 731), (uint64_t)v10, 0);
  return std::__function::__value_func<void ()(Phase::SpatialModeler::Query &)>::~__value_func[abi:ne180100](v10);
}

void sub_221EB46BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(Phase::SpatialModeler::Query &)>::~__value_func[abi:ne180100](va);
  _Unwind_Resume(a1);
}

void std::vector<std::tuple<Phase::SpatialModeler::GraphDescription &,unsigned long,Phase::SpatialModeler::PriorityQueue &>>::reserve(void **a1, unint64_t a2)
{
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) < a2)
  {
    uint64_t v3 = ((unsigned char *)a1[1] - (unsigned char *)*a1) / 24;
    uint64_t v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<Phase::SpatialModeler::GraphDescription &,unsigned long,Phase::SpatialModeler::PriorityQueue &>>>(a2);
    uint64_t v5 = &v4[24 * v3];
    uint64_t v7 = &v4[24 * v6];
    unsigned __int8 v9 = (char *)*a1;
    char v8 = (char *)a1[1];
    uint64_t v10 = v5;
    if (v8 != *a1)
    {
      do
      {
        long long v11 = *(_OWORD *)(v8 - 24);
        *((void *)v10 - 1) = *((void *)v8 - 1);
        *(_OWORD *)(v10 - 24) = v11;
        v10 -= 24;
        v8 -= 24;
      }
      while (v8 != v9);
      char v8 = (char *)*a1;
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void Phase::Controller::SpatialModelerInstance::CancelAllQueries(Phase::Controller::SpatialModelerInstance *this)
{
  Phase::SpatialModeler::Scheduler::CancelAllQueries(*((void **)this + 734), (unsigned __int8 *)this + 5608);
  for (uint64_t i = 0; i != 96; i += 32)
    Phase::SpatialModeler::Scheduler::CancelAllQueries(*((void **)this + 734), (unsigned __int8 *)this + i + 5504);
}

void Phase::Controller::SpatialModelerInstance::Update(Phase::Controller::SpatialModelerInstance *this, double a2)
{
  Phase::Controller::SpatialModelerInstance::SaveRegisteredSubmixState(this);
  Phase::Controller::SpatialSubmixRouter::Update(*((Phase::Controller::SpatialSubmixRouter **)this + 809), a2);
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)this + 5641);
  if (v4)
  {
    Phase::Controller::SpatialModelerInstance::CommitFrameUpdateBatch(this);
  }
}

void Phase::Controller::SpatialModelerInstance::SaveRegisteredSubmixState(Phase::Controller::SpatialModelerInstance *this)
{
  uint64_t v3 = (std::__shared_weak_count_vtbl *)*((void *)this + 6);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v4 = *((_DWORD *)this + 16);
  uint64_t v5 = (std::__shared_weak_count *)operator new(0x30uLL);
  uint64_t v6 = v5;
  v5->__shared_owners_ = 0;
  v5->__shared_weak_owners_ = 0;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D473140;
  v5[1].__vftable = 0;
  uint64_t v7 = (uint64_t)&v5[1];
  v5[1].__shared_owners_ = 0;
  LODWORD(v5[1].__shared_weak_owners_) = 0;
  if (v2)
  {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    v5[1].__vftable = v3;
    v5[1].__shared_owners_ = (uint64_t)v2;
    LODWORD(v5[1].__shared_weak_owners_) = v4;
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  else
  {
    v5[1].__vftable = v3;
    v5[1].__shared_owners_ = 0;
    LODWORD(v5[1].__shared_weak_owners_) = v4;
  }
  uint64_t v8 = v7;
  unsigned __int8 v9 = v6;
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  std::atomic_store[abi:ne180100]<Phase::Controller::SubmixSlotMapState<Phase::Controller::SpatialModelerInstance::SubmixInfo>>((uint64_t *)this + 31, &v8);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
}

void sub_221EB4A00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

void Phase::Controller::SpatialModelerInstance::CommitFrameUpdateBatch(Phase::Controller::SpatialModelerInstance *this)
{
  uint64_t v191 = *MEMORY[0x263EF8340];
  uint64_t v2 = (unsigned __int8 *)this + 5640;
  if (!*((unsigned char *)this + 6480)) {
    goto LABEL_24;
  }
  uint64_t v3 = *((void *)this + 40);
  if (v3 < 1 || (double v4 = *((double *)this + 41), v4 <= 0.0))
  {
    *((unsigned char *)this + 5712) = 0;
    goto LABEL_11;
  }
  uint64_t v5 = *(void *)this;
  if (*((void *)this + 721) != v3)
  {
    uint64_t v6 = (void **)*((void *)this + 716);
    uint64_t v7 = *((void *)this + 717);
    *((void *)this + 720) = 0;
    unint64_t v8 = v7 - (void)v6;
    if (v8 >= 0x11)
    {
      do
      {
        operator delete(*v6);
        uint64_t v6 = (void **)(*((void *)this + 716) + 8);
        *((void *)this + 716) = v6;
        unint64_t v8 = *((void *)this + 717) - (void)v6;
      }
      while (v8 > 0x10);
    }
    if (v8 >> 3 == 1)
    {
      uint64_t v9 = 256;
    }
    else
    {
      if (v8 >> 3 != 2)
      {
LABEL_62:
        *((void *)this + 721) = v3;
        double v4 = *((double *)this + 41);
        goto LABEL_63;
      }
      uint64_t v9 = 512;
    }
    *((void *)this + 719) = v9;
    goto LABEL_62;
  }
LABEL_63:
  if (v5)
  {
    v28.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    char v29 = (char *)*((void *)this + 717);
    uint64_t v30 = (void **)*((void *)this + 716);
    uint64_t v31 = v29 - (char *)v30;
    double v32 = (double)v28.__d_.__rep_ / 1000000000.0;
    if (v29 == (char *)v30) {
      uint64_t v33 = 0;
    }
    else {
      uint64_t v33 = ((v29 - (char *)v30) << 6) - 1;
    }
    if (v32 - *((double *)this + 722) <= 2.0) {
      double v34 = v32 - *((double *)this + 722);
    }
    else {
      double v34 = 2.0;
    }
    unint64_t v35 = *((void *)this + 719);
    uint64_t v36 = *((void *)this + 720);
    unint64_t v37 = v36 + v35;
    if (v33 != v36 + v35)
    {
LABEL_153:
      (*(double **)((char *)v30 + ((v37 >> 6) & 0x3FFFFFFFFFFFFF8)))[v37 & 0x1FF] = v34;
      *((void *)this + 720) = v36 + 1;
      if ((unint64_t)(v36 + 1) > *((void *)this + 721))
      {
        *((void *)this + 720) = v36;
        *((void *)this + 719) = ++v35;
        if (v35 >= 0x400)
        {
          operator delete(*v30);
          uint64_t v30 = (void **)(*((void *)this + 716) + 8);
          *((void *)this + 716) = v30;
          unint64_t v35 = *((void *)this + 719) - 512;
          *((void *)this + 719) = v35;
        }
      }
      *((double *)this + 722) = v32;
      if (!v2[72])
      {
        unint64_t v112 = *((void *)this + 720);
        if (v112 >= 2)
        {
          int v113 = &v30[v35 >> 9];
          int v114 = (void **)*((void *)this + 717);
          if (v114 == v30) {
            int v115 = 0;
          }
          else {
            int v115 = (double *)((char *)*v113 + 8 * (v35 & 0x1FF));
          }
          __int16 v116 = v112 + v35;
          unint64_t v117 = (v112 + v35) >> 9;
          uint64_t v118 = v116 & 0x1FF;
          double v119 = 0.0;
LABEL_162:
          int v120 = v115 - 512;
          while (1)
          {
            uint64_t v121 = v114 == v30 ? 0 : (uint64_t)v30[v117] + 8 * v118;
            if (v115 == (double *)v121) {
              break;
            }
            double v122 = *v115++;
            double v119 = v119 + v122;
            if (*v113 == ++v120)
            {
              int v123 = (double *)v113[1];
              ++v113;
              int v115 = v123;
              goto LABEL_162;
            }
          }
          if (v119 / (double)v112 < v4) {
            v2[72] = 1;
          }
        }
      }
      goto LABEL_11;
    }
    BOOL v38 = v35 >= 0x200;
    unint64_t v39 = v35 - 512;
    if (v38)
    {
      *((void *)this + 719) = v39;
      uint64_t v42 = *v30;
      __int16 v40 = (char *)(v30 + 1);
      uint64_t v41 = v42;
      *((void *)this + 716) = v40;
      if (v29 == *((char **)this + 718))
      {
        unint64_t v43 = *((void *)this + 715);
        uint64_t v44 = (uint64_t)&v40[-v43];
        if ((unint64_t)v40 <= v43)
        {
          uint64_t v100 = (uint64_t)&v29[-v43];
          BOOL v99 = v100 == 0;
          uint64_t v101 = v100 >> 2;
          if (v99) {
            unint64_t v102 = 1;
          }
          else {
            unint64_t v102 = v101;
          }
          int v103 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int *>>(v102);
          uint64_t v105 = &v103[8 * (v102 >> 2)];
          uint64_t v106 = (uint64_t *)*((void *)this + 716);
          char v29 = v105;
          uint64_t v107 = *((void *)this + 717) - (void)v106;
          if (v107)
          {
            char v29 = &v105[v107 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v108 = 8 * (v107 >> 3);
            uint64_t v109 = &v103[8 * (v102 >> 2)];
            do
            {
              uint64_t v110 = *v106++;
              *(void *)uint64_t v109 = v110;
              v109 += 8;
              v108 -= 8;
            }
            while (v108);
          }
          uint64_t v111 = (void *)*((void *)this + 715);
          *((void *)this + 715) = v103;
          *((void *)this + 716) = v105;
          *((void *)this + 717) = v29;
          *((void *)this + 718) = &v103[8 * v104];
          if (v111)
          {
            operator delete(v111);
            char v29 = (char *)*((void *)this + 717);
          }
        }
        else
        {
          uint64_t v45 = v2;
          uint64_t v46 = v44 >> 3;
          BOOL v47 = v44 >> 3 < -1;
          uint64_t v48 = (v44 >> 3) + 2;
          if (v47) {
            uint64_t v49 = v48;
          }
          else {
            uint64_t v49 = v46 + 1;
          }
          uint64_t v50 = -(v49 >> 1);
          uint64_t v51 = v49 >> 1;
          uint64_t v52 = &v40[-8 * v51];
          int64_t v53 = v29 - v40;
          if (v29 != v40)
          {
            memmove(&v40[-8 * v51], v40, v29 - v40);
            char v29 = (char *)*((void *)this + 716);
          }
          int v54 = &v29[8 * v50];
          char v29 = &v52[v53];
          *((void *)this + 717) = &v52[v53];
          *((void *)this + 716) = v54;
          uint64_t v2 = v45;
        }
      }
      *(void *)char v29 = v41;
    }
    else
    {
      uint64_t v61 = v31 >> 3;
      uint64_t v62 = (char *)*((void *)this + 718);
      uint64_t v63 = (void **)*((void *)this + 715);
      if (v31 >> 3 >= (unint64_t)((v62 - (char *)v63) >> 3))
      {
        int v180 = v2;
        if (v62 == (char *)v63) {
          unint64_t v89 = 1;
        }
        else {
          unint64_t v89 = (v62 - (char *)v63) >> 2;
        }
        __int16 v90 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int *>>(v89);
        uint64_t v92 = v91;
        double v93 = operator new(0x1000uLL);
        uint64_t v94 = &v90[8 * v61];
        int v95 = &v90[8 * v92];
        if (v61 == v92)
        {
          uint64_t v96 = 8 * v61;
          if (v31 < 1)
          {
            uint64_t v147 = v96 >> 2;
            if (v29 == (char *)v30) {
              unint64_t v148 = 1;
            }
            else {
              unint64_t v148 = v147;
            }
            int v149 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int *>>(v148);
            uint64_t v94 = &v149[8 * (v148 >> 2)];
            int v95 = &v149[8 * v150];
            if (v90) {
              operator delete(v90);
            }
            __int16 v90 = v149;
          }
          else
          {
            uint64_t v97 = v96 >> 3;
            if (v97 >= -1) {
              unint64_t v98 = v97 + 1;
            }
            else {
              unint64_t v98 = v97 + 2;
            }
            v94 -= 8 * (v98 >> 1);
          }
        }
        *(void *)uint64_t v94 = v93;
        int v151 = v94 + 8;
        for (uint64_t i = *((void *)this + 717); i != *((void *)this + 716); i -= 8)
        {
          if (v94 == v90)
          {
            if (v151 >= v95)
            {
              if (v95 == v90) {
                unint64_t v157 = 1;
              }
              else {
                unint64_t v157 = (v95 - v90) >> 2;
              }
              int v158 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int *>>(v157);
              double v160 = v158;
              uint64_t v94 = &v158[(2 * v157 + 6) & 0xFFFFFFFFFFFFFFF8];
              uint64_t v161 = v151 - v90;
              BOOL v99 = v151 == v90;
              int v151 = v94;
              if (!v99)
              {
                int v151 = &v94[v161 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v162 = 8 * (v161 >> 3);
                int v163 = v94;
                unint64_t v164 = (uint64_t *)v90;
                do
                {
                  uint64_t v165 = *v164++;
                  *(void *)int v163 = v165;
                  v163 += 8;
                  v162 -= 8;
                }
                while (v162);
              }
              int v95 = &v158[8 * v159];
              if (v90) {
                operator delete(v90);
              }
              __int16 v90 = v160;
            }
            else
            {
              uint64_t v153 = (v95 - v151) >> 3;
              if (v153 >= -1) {
                uint64_t v154 = v153 + 1;
              }
              else {
                uint64_t v154 = v153 + 2;
              }
              uint64_t v155 = v154 >> 1;
              uint64_t v94 = &v90[8 * (v154 >> 1)];
              unint64_t v156 = v90;
              if (v151 != v90)
              {
                memmove(v94, v90, v151 - v90);
                unint64_t v156 = v151;
              }
              int v151 = &v156[8 * v155];
            }
          }
          uint64_t v166 = *(void *)(i - 8);
          *((void *)v94 - 1) = v166;
          v94 -= 8;
        }
        int v167 = (void *)*((void *)this + 715);
        *((void *)this + 715) = v90;
        *((void *)this + 716) = v94;
        *((void *)this + 717) = v151;
        *((void *)this + 718) = v95;
        uint64_t v2 = v180;
        if (v167) {
          operator delete(v167);
        }
        goto LABEL_152;
      }
      uint64_t v64 = operator new(0x1000uLL);
      __int16 v65 = v64;
      if (v62 == v29)
      {
        if (v30 == v63)
        {
          if (v29 == (char *)v30) {
            unint64_t v124 = 1;
          }
          else {
            unint64_t v124 = (v62 - (char *)v30) >> 2;
          }
          uint64_t v125 = 2 * v124;
          uint64_t v126 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int *>>(v124);
          uint64_t v30 = (void **)&v126[(v125 + 6) & 0xFFFFFFFFFFFFFFF8];
          v128 = (void **)*((void *)this + 716);
          int v129 = v30;
          uint64_t v130 = *((void *)this + 717) - (void)v128;
          if (v130)
          {
            int v129 = (void **)((char *)v30 + (v130 & 0xFFFFFFFFFFFFFFF8));
            uint64_t v131 = 8 * (v130 >> 3);
            uint64_t v132 = v30;
            do
            {
              uint64_t v133 = *v128++;
              *v132++ = v133;
              v131 -= 8;
            }
            while (v131);
          }
          uint64_t v134 = (void *)*((void *)this + 715);
          *((void *)this + 715) = v126;
          *((void *)this + 716) = v30;
          *((void *)this + 717) = v129;
          *((void *)this + 718) = &v126[8 * v127];
          if (v134)
          {
            operator delete(v134);
            uint64_t v30 = (void **)*((void *)this + 716);
          }
        }
        *(v30 - 1) = v65;
        int v135 = (char *)*((void *)this + 716);
        *((void *)this + 716) = v135 - 8;
        uint64_t v136 = *((void *)v135 - 1);
        *((void *)this + 716) = v135;
        __int16 v137 = (char *)*((void *)this + 717);
        if (v137 == *((char **)this + 718))
        {
          unint64_t v138 = *((void *)this + 715);
          uint64_t v139 = (uint64_t)&v135[-v138];
          if ((unint64_t)v135 <= v138)
          {
            uint64_t v168 = (uint64_t)&v137[-v138];
            BOOL v99 = v168 == 0;
            uint64_t v169 = v168 >> 2;
            if (v99) {
              unint64_t v170 = 1;
            }
            else {
              unint64_t v170 = v169;
            }
            int v171 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int *>>(v170);
            int v173 = &v171[8 * (v170 >> 2)];
            unint64_t v174 = (uint64_t *)*((void *)this + 716);
            __int16 v137 = v173;
            uint64_t v175 = *((void *)this + 717) - (void)v174;
            if (v175)
            {
              __int16 v137 = &v173[v175 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v176 = 8 * (v175 >> 3);
              int v177 = &v171[8 * (v170 >> 2)];
              do
              {
                uint64_t v178 = *v174++;
                *(void *)int v177 = v178;
                v177 += 8;
                v176 -= 8;
              }
              while (v176);
            }
            int v179 = (void *)*((void *)this + 715);
            *((void *)this + 715) = v171;
            *((void *)this + 716) = v173;
            *((void *)this + 717) = v137;
            *((void *)this + 718) = &v171[8 * v172];
            if (v179)
            {
              operator delete(v179);
              __int16 v137 = (char *)*((void *)this + 717);
            }
          }
          else
          {
            uint64_t v140 = v139 >> 3;
            BOOL v47 = v139 >> 3 < -1;
            uint64_t v141 = (v139 >> 3) + 2;
            if (v47) {
              uint64_t v142 = v141;
            }
            else {
              uint64_t v142 = v140 + 1;
            }
            uint64_t v143 = -(v142 >> 1);
            uint64_t v144 = v142 >> 1;
            int v145 = &v135[-8 * v144];
            int64_t v146 = v137 - v135;
            if (v137 != v135)
            {
              memmove(&v135[-8 * v144], v135, v137 - v135);
              int v135 = (char *)*((void *)this + 716);
            }
            __int16 v137 = &v145[v146];
            *((void *)this + 717) = &v145[v146];
            *((void *)this + 716) = &v135[8 * v143];
          }
        }
        *(void *)__int16 v137 = v136;
      }
      else
      {
        *(void *)char v29 = v64;
      }
    }
    *((void *)this + 717) += 8;
LABEL_152:
    uint64_t v36 = *((void *)this + 720);
    uint64_t v30 = (void **)*((void *)this + 716);
    unint64_t v35 = *((void *)this + 719);
    unint64_t v37 = v35 + v36;
    goto LABEL_153;
  }
  if (!v2[72]) {
    goto LABEL_11;
  }
  v55.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  unint64_t v56 = (void **)*((void *)this + 716);
  unint64_t v57 = *((void *)this + 719);
  uint64_t v58 = &v56[v57 >> 9];
  uint64_t v59 = (void **)*((void *)this + 717);
  uint64_t v60 = v59 == v56 ? 0 : (double *)((char *)*v58 + 8 * (*((void *)this + 719) & 0x1FFLL));
  double v78 = (double)v55.__d_.__rep_ / 1000000000.0 - *((double *)this + 722);
  uint64_t v79 = *((void *)this + 720);
  __int16 v80 = v79 + v57;
  unint64_t v81 = (v79 + v57) >> 9;
  uint64_t v82 = v80 & 0x1FF;
LABEL_118:
  __int16 v83 = v60 - 512;
  while (1)
  {
    unint64_t v84 = (char *)v59 - (char *)v56;
    uint64_t v85 = v59 == v56 ? 0 : (uint64_t)v56[v81] + 8 * v82;
    if (v60 == (double *)v85) {
      break;
    }
    double v86 = *v60++;
    double v78 = v78 + v86;
    if (*v58 == ++v83)
    {
      double v87 = (double *)v58[1];
      ++v58;
      uint64_t v60 = v87;
      goto LABEL_118;
    }
  }
  if (v78 / (double)(unint64_t)(v79 + 1) <= v4) {
    goto LABEL_11;
  }
  v2[72] = 0;
  *((void *)this + 720) = 0;
  if (v84 >= 0x11)
  {
    do
    {
      operator delete(*v56);
      unint64_t v56 = (void **)(*((void *)this + 716) + 8);
      *((void *)this + 716) = v56;
      unint64_t v84 = *((void *)this + 717) - (void)v56;
    }
    while (v84 > 0x10);
  }
  if (v84 >> 3 == 1)
  {
    uint64_t v88 = 256;
    goto LABEL_141;
  }
  if (v84 >> 3 == 2)
  {
    uint64_t v88 = 512;
LABEL_141:
    *((void *)this + 719) = v88;
  }
LABEL_11:
  unsigned __int8 v10 = atomic_load(v2 + 2);
  if ((v10 & 1) != 0 && !v2[72])
  {
    uint64_t v11 = *((void *)this + 736);
    uint64_t v12 = (std::__shared_weak_count *)*((void *)this + 729);
    uint64_t v181 = *((void *)this + 728);
    v182 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t *, void))(*(void *)v11 + 64))(v11, &v181, 0);
    long long v13 = (Phase::Logger *)v182;
    if (v182) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v182);
    }
    atomic_store(0, v2 + 2);
    long long v14 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v13)
                                                                                        + 224)));
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      Phase::Controller::SpatialModelerInstance::GetDescription((Phase::Controller::SpatialModelerInstance *)&__p, (uint64_t)this);
      unint64_t v15 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)std::string buf = 136315650;
      *(void *)&uint8_t buf[4] = "CvmSpatialModelerInstance.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 797;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = v15;
      _os_log_impl(&dword_221E5E000, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s: stopped overflow graph", buf, 0x1Cu);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
LABEL_24:
  if (*(void *)this)
  {
    if (!*((void *)this + 726)) {
      Phase::Controller::SpatialModelerInstance::StartSustainGraph(this);
    }
    if (!v2[840]) {
      Phase::SortedCommandQueue<Phase::SpatialModeler::PriorityQueue,Phase::SpatialModeler::PriorityQueueCommandType,std::variant<std::monostate,Phase::SpatialModeler::PriorityQueueEntry,Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueClusterIndexUpdate,Phase::SpatialModeler::PriorityQueueGlobals>>::Commit();
    }
    unsigned __int8 v16 = atomic_load(v2);
    if ((v16 & 1) == 0)
    {
      if (!*((void *)this + 728))
      {
        uint64_t v17 = *((void *)this + 701);
        uint64_t v18 = *((void *)this + 702);
        if (v17 == v18)
        {
          uint64_t v26 = 0;
          std::string::size_type v19 = 0;
        }
        else
        {
          std::string::size_type v19 = 0;
          uint64_t v20 = 0;
          do
          {
            uint64_t v22 = *(void *)(v17 + 168);
            uint64_t v21 = *(void *)(v17 + 176);
            if (v22 == v21)
            {
              uint64_t v26 = v20;
            }
            else
            {
              uint64_t v23 = *(void *)(v17 + 168);
              do
              {
                (*(void (**)(uint8_t *__return_ptr))(**((void **)this + 736) + 16))(buf);
                uint64_t v24 = *(void *)buf;
                if (v19)
                {
                  *(void *)(*(void *)buf + 256) = &unk_26D4736A0;
                  *(void *)(v24 + 264) = v23;
                  *(unsigned char *)(v24 + 383) = 1;
                  atomic_store(1u, (unsigned __int8 *)(v24 + 40));
                  uint64_t v25 = *((void *)this + 736);
                  uint64_t v188 = v24;
                  int v189 = *(std::__shared_weak_count **)&buf[8];
                  if (*(void *)&buf[8]) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 1uLL, memory_order_relaxed);
                  }
                  std::string::size_type v186 = v19;
                  int v187 = v20;
                  if (v20) {
                    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  (*(void (**)(uint64_t, uint64_t *, std::string::size_type *))(*(void *)v25 + 24))(v25, &v188, &v186);
                  if (v187) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v187);
                  }
                  if (v189) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v189);
                  }
                }
                else
                {
                  *(void *)(*(void *)buf + 256) = &unk_26D4736C8;
                  *(void *)(v24 + 264) = v22;
                  *(void *)(v24 + 272) = this;
                  *(unsigned char *)(v24 + 383) = 1;
                  atomic_store(1u, (unsigned __int8 *)(v24 + 40));
                }
                std::string::size_type v19 = *(void *)buf;
                uint64_t v26 = *(std::__shared_weak_count **)&buf[8];
                if (*(void *)&buf[8]) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 1uLL, memory_order_relaxed);
                }
                if (v20) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
                }
                if (*(void *)&buf[8]) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
                }
                v23 += 96;
                v22 += 96;
                uint64_t v20 = v26;
              }
              while (v23 != v21);
            }
            v17 += 192;
            uint64_t v20 = v26;
          }
          while (v17 != v18);
        }
        uint64_t v66 = *((void *)this + 736);
        uint64_t v67 = *((void *)this + 733);
        std::string::basic_string[abi:ne180100]<0>(&__p, "-Attack-Graph");
        int v68 = *(char *)(v67 + 23);
        if (v68 >= 0) {
          __int16 v69 = (const std::string::value_type *)v67;
        }
        else {
          __int16 v69 = *(const std::string::value_type **)v67;
        }
        if (v68 >= 0) {
          std::string::size_type v70 = *(unsigned __int8 *)(v67 + 23);
        }
        else {
          std::string::size_type v70 = *(void *)(v67 + 8);
        }
        uint64_t v71 = std::string::insert(&__p, 0, v69, v70);
        long long v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
        *(void *)&uint8_t buf[16] = *((void *)&v71->__r_.__value_.__l + 2);
        *(_OWORD *)std::string buf = v72;
        v71->__r_.__value_.__l.__size_ = 0;
        v71->__r_.__value_.__r.__words[2] = 0;
        v71->__r_.__value_.__r.__words[0] = 0;
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint8_t *))(*(void *)v66 + 16))(&v184, v66, buf);
        if ((char)buf[23] < 0) {
          operator delete(*(void **)buf);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        uint64_t v73 = v184;
        *(void *)(v184 + 256) = &unk_26D4736F0;
        *(void *)(v73 + 264) = this;
        *(unsigned char *)(v73 + 383) = 1;
        atomic_store(1u, (unsigned __int8 *)(v73 + 40));
        uint64_t v74 = *((void *)this + 736);
        *(void *)std::string buf = v73;
        *(void *)&buf[8] = v185;
        if (v185) {
          atomic_fetch_add_explicit(&v185->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        __p.__r_.__value_.__r.__words[0] = v19;
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)v26;
        if (v26) {
          atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, uint8_t *, std::string *))(*(void *)v74 + 24))(v74, buf, &__p);
        if (__p.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
        }
        if (*(void *)&buf[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
        }
        uint64_t v75 = v184;
        size_t v76 = v185;
        if (v185) {
          atomic_fetch_add_explicit(&v185->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        *((void *)this + 728) = v75;
        __int16 v77 = (std::__shared_weak_count *)*((void *)this + 729);
        *((void *)this + 729) = v76;
        if (v77)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v77);
          uint64_t v75 = *((void *)this + 728);
        }
        *(void *)(v75 + 512) = 0;
        *(_DWORD *)(v75 + 520) = -1;
        *(void *)(v75 + 384) = &unk_26D473718;
        *(void *)(v75 + 392) = this;
        *(unsigned char *)(v75 + 511) = 1;
        atomic_store(1u, (unsigned __int8 *)(v75 + 40));
        if (v185) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v185);
        }
        if (v26) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v26);
        }
      }
      Phase::SortedCommandQueue<Phase::SpatialModeler::PriorityQueue,Phase::SpatialModeler::PriorityQueueCommandType,std::variant<std::monostate,Phase::SpatialModeler::PriorityQueueEntry,Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueClusterIndexUpdate,Phase::SpatialModeler::PriorityQueueGlobals>>::Commit();
    }
  }
  else
  {
    unsigned __int8 v27 = atomic_load(v2 + 3);
    if ((v27 & 1) == 0 && *((void *)this + 153) && !*((void *)this + 726)) {
      Phase::Controller::SpatialModelerInstance::StartSustainGraph(this);
    }
  }
}

void sub_221EB58F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  operator delete(v38);
  if (v37) {
    operator delete(v37);
  }
  _Unwind_Resume(a1);
}

void *Phase::Controller::SpatialModelerInstance::ResetAllGraphData(atomic_ullong *this, Phase::Controller::SpatialModelerInstance::GraphData *a2)
{
  Phase::Controller::SpatialModelerInstance::DestroyAllTempGraphData((uint64_t)this, (uint64_t)a2);
  uint64_t v4 = -744;
  do
  {
    Phase::SortedCommandQueue<Phase::SpatialModeler::PriorityQueue,Phase::SpatialModeler::PriorityQueueCommandType,std::variant<std::monostate,Phase::SpatialModeler::PriorityQueueEntry,Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueClusterIndexUpdate,Phase::SpatialModeler::PriorityQueueGlobals>>::ClearCommands((atomic_ullong *)((char *)a2 + v4 + 968));
    std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear((Phase::Controller::SpatialModelerInstance::GraphData *)((char *)a2 + v4 + 792));
    v4 += 248;
  }
  while (v4);
  for (uint64_t i = 0; i != 24; i += 8)
    atomic_store(0, (unint64_t *)((char *)a2 + i + 752));
  Phase::Controller::RenderGroupMgr::Reset(this + 737);
  Phase::Controller::RenderGroupMgr::Reset(this + 544);
  Phase::Controller::RenderGroupMgr::Reset(this + 272);
  Phase::Controller::RenderGroupMgr::Reset(this + 616);

  return Phase::Controller::RenderGroupMgr::Reset(this + 344);
}

void *Phase::SortedCommandQueue<Phase::SpatialModeler::PriorityQueue,Phase::SpatialModeler::PriorityQueueCommandType,std::variant<std::monostate,Phase::SpatialModeler::PriorityQueueEntry,Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueClusterIndexUpdate,Phase::SpatialModeler::PriorityQueueGlobals>>::CommandBatch::Clear(void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = *result;
  if (*result)
  {
    do
    {
      uint64_t v3 = *(void *)(v2 + 88);
      Phase::SortedCommandQueue<Phase::SpatialModeler::PriorityQueue,Phase::SpatialModeler::PriorityQueueCommandType,std::variant<std::monostate,Phase::SpatialModeler::PriorityQueueEntry,Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueClusterIndexUpdate,Phase::SpatialModeler::PriorityQueueGlobals>>::CommandBatch::Clear(v2 + 80);
      unint64_t result = (void *)MEMORY[0x223C938A0](v2, 0x1020C40994B1BD2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  *uint64_t v1 = 0;
  return result;
}

void Phase::Controller::SpatialModelerInstance::GetLatestSubmixState(Phase::Controller::SpatialModelerInstance *this, uint64_t a2)
{
  sp_mut = std::__get_sp_mut((const void *)(a2 + 248));
  std::__sp_mut::lock(sp_mut);
  uint64_t v6 = *(uint64_t **)(a2 + 248);
  uint64_t v5 = *(std::__shared_weak_count **)(a2 + 256);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::__sp_mut::unlock(sp_mut);
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  if (v6)
  {
    uint64_t v8 = *v6;
    uint64_t v7 = v6[1];
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    *(void *)this = v8;
    *((void *)this + 1) = v7;
    *((_DWORD *)this + 4) = *((_DWORD *)v6 + 4);
  }
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void Phase::Controller::SpatialModelerInstance::StartSustainGraph(Phase::Controller::SpatialModelerInstance *this)
{
  v138[19] = *MEMORY[0x263EF8340];
  std::mutex::lock((std::mutex *)((char *)this + 5648));
  if (*((void *)this + 726))
  {
    uint64_t v111 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v2)
                                                                                         + 224)));
    if (os_log_type_enabled(v111, OS_LOG_TYPE_ERROR))
    {
      Phase::Controller::SpatialModelerInstance::GetDescription((Phase::Controller::SpatialModelerInstance *)v134, (uint64_t)this);
      unint64_t v112 = v134[23] >= 0 ? v134 : *(unsigned char **)v134;
      *(_DWORD *)std::string __p = 136315650;
      *(void *)&__p[4] = "CvmSpatialModelerInstance.mm";
      *(_WORD *)&__p[12] = 1024;
      *(_DWORD *)&__p[14] = 3025;
      *(_WORD *)&unsigned char __p[18] = 2080;
      *(void *)&__p[20] = v112;
      _os_log_impl(&dword_221E5E000, v111, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [false == mSustainJobs.empty() is true]: \"%s: Attempting to start a running Spatial Modeler!\"", __p, 0x1Cu);
      if ((v134[23] & 0x80000000) != 0) {
        operator delete(*(void **)v134);
      }
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "%s: Attempting to start a running Spatial Modeler!");
  }
  uint64_t v3 = *((void *)this + 733);
  int v4 = *(_DWORD *)(v3 + 120);
  if (v4)
  {
    if (v4 == 1 && *((_DWORD *)this + 1400) == 3)
    {
      unint64_t v5 = 0;
      int v114 = (void *)((char *)this + 5800);
      while (1)
      {
        std::string::size_type v6 = *((void *)this + 733);
        std::string::basic_string[abi:ne180100]<0>(&v129, "-Sustain-");
        int v7 = *(char *)(v6 + 23);
        if (v7 >= 0) {
          uint64_t v8 = (const std::string::value_type *)v6;
        }
        else {
          uint64_t v8 = *(const std::string::value_type **)v6;
        }
        if (v7 >= 0) {
          std::string::size_type v9 = *(unsigned __int8 *)(v6 + 23);
        }
        else {
          std::string::size_type v9 = *(void *)(v6 + 8);
        }
        unsigned __int8 v10 = std::string::insert(&v129, 0, v8, v9);
        long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
        v130.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v130.__r_.__value_.__l.__data_ = v11;
        v10->__r_.__value_.__l.__size_ = 0;
        v10->__r_.__value_.__r.__words[2] = 0;
        v10->__r_.__value_.__r.__words[0] = 0;
        if (v5 >= 3)
        {
          uint64_t v109 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)v10) + 224);
          if (os_log_type_enabled(v109, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string __p = 136315650;
            *(void *)&__p[4] = "CvmSpatialModelerInstance.mm";
            *(_WORD *)&__p[12] = 1024;
            *(_DWORD *)&__p[14] = 2820;
            *(_WORD *)&unsigned char __p[18] = 2048;
            *(void *)&__p[20] = v5;
            _os_log_impl(&dword_221E5E000, v109, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument): \"Invalid stage index %lu\"", __p, 0x1Cu);
          }
          uint64_t v110 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v110, "Invalid stage index %lu");
          v110->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
        }
        std::string::basic_string[abi:ne180100]<0>(v127, off_2645F7198[v5]);
        if ((v128 & 0x80u) == 0) {
          uint64_t v12 = v127;
        }
        else {
          uint64_t v12 = (void **)v127[0];
        }
        if ((v128 & 0x80u) == 0) {
          std::string::size_type v13 = v128;
        }
        else {
          std::string::size_type v13 = (std::string::size_type)v127[1];
        }
        long long v14 = std::string::append(&v130, (const std::string::value_type *)v12, v13);
        long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
        v131.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v131.__r_.__value_.__l.__data_ = v15;
        v14->__r_.__value_.__l.__size_ = 0;
        v14->__r_.__value_.__r.__words[2] = 0;
        v14->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(__p, "-");
        if (__p[23] >= 0) {
          unsigned __int8 v16 = __p;
        }
        else {
          unsigned __int8 v16 = *(const std::string::value_type **)__p;
        }
        if (__p[23] >= 0) {
          std::string::size_type v17 = __p[23];
        }
        else {
          std::string::size_type v17 = *(void *)&__p[8];
        }
        uint64_t v18 = std::string::append(&v131, v16, v17);
        long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
        *(void *)&v134[16] = *((void *)&v18->__r_.__value_.__l + 2);
        *(_OWORD *)uint64_t v134 = v19;
        v18->__r_.__value_.__l.__size_ = 0;
        v18->__r_.__value_.__r.__words[2] = 0;
        v18->__r_.__value_.__r.__words[0] = 0;
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v131.__r_.__value_.__l.__data_);
        }
        if ((char)v128 < 0) {
          operator delete(v127[0]);
        }
        if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v130.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v129.__r_.__value_.__l.__data_);
        }
        std::string::size_type v115 = v5;
        uint64_t v20 = *((void *)this + 4 * v5 + 688);
        uint64_t v21 = *((void *)this + 4 * v5 + 689);
        if (v20 == v21)
        {
          std::string::size_type v22 = 0;
          char v29 = 0;
        }
        else
        {
          std::string::size_type v22 = 0;
          uint64_t v23 = 0;
          do
          {
            uint64_t v24 = *(void *)(v20 + 168);
            std::string::size_type v6 = *(void *)(v20 + 176);
            if (v24 == v6)
            {
              char v29 = v23;
            }
            else
            {
              uint64_t v25 = *(void *)(v20 + 168);
              do
              {
                uint64_t v26 = *((void *)this + 736);
                std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)v134, (const void **)(v25 + 24), (uint64_t)__p);
                (*(void (**)(std::string *__return_ptr, uint64_t, unsigned char *))(*(void *)v26 + 16))(&v131, v26, __p);
                if ((__p[23] & 0x80000000) != 0) {
                  operator delete(*(void **)__p);
                }
                std::string::size_type v27 = v131.__r_.__value_.__r.__words[0];
                if (v22)
                {
                  *(void *)(v131.__r_.__value_.__r.__words[0] + 256) = &unk_26D4735B0;
                  *(void *)(v27 + 264) = v25;
                  *(unsigned char *)(v27 + 383) = 1;
                  atomic_store(1u, (unsigned __int8 *)(v27 + 40));
                  uint64_t v28 = *((void *)this + 736);
                  std::string::size_type v125 = v27;
                  std::string::size_type size = (std::__shared_weak_count *)v131.__r_.__value_.__l.__size_;
                  if (v131.__r_.__value_.__l.__size_) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(v131.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
                  }
                  std::string::size_type v123 = v22;
                  unint64_t v124 = v23;
                  if (v23) {
                    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  (*(void (**)(uint64_t, std::string::size_type *, std::string::size_type *))(*(void *)v28 + 24))(v28, &v125, &v123);
                  if (v124) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v124);
                  }
                  if (size) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](size);
                  }
                }
                else
                {
                  *(void *)(v131.__r_.__value_.__r.__words[0] + 256) = &unk_26D4735D8;
                  *(void *)(v27 + 264) = v24;
                  *(void *)(v27 + 272) = this;
                  *(unsigned char *)(v27 + 383) = 1;
                  atomic_store(1u, (unsigned __int8 *)(v27 + 40));
                }
                char v29 = (std::__shared_weak_count *)v131.__r_.__value_.__l.__size_;
                std::string::size_type v22 = v131.__r_.__value_.__r.__words[0];
                if (v131.__r_.__value_.__l.__size_) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v131.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
                }
                if (v23) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v23);
                }
                if (v131.__r_.__value_.__l.__size_) {
                  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v131.__r_.__value_.__l.__size_);
                }
                v25 += 96;
                v24 += 96;
                uint64_t v23 = v29;
              }
              while (v25 != v6);
            }
            v20 += 192;
            uint64_t v23 = v29;
          }
          while (v20 != v21);
        }
        if (v115 == 2)
        {
          uint64_t v30 = *((void *)this + 736);
          if (v134[23] >= 0) {
            size_t v31 = v134[23];
          }
          else {
            size_t v31 = *(void *)&v134[8];
          }
          std::string::basic_string[abi:ne180100]((uint64_t)__p, v31 + 39);
          if (__p[23] >= 0) {
            double v32 = __p;
          }
          else {
            double v32 = *(unsigned char **)__p;
          }
          if (v31)
          {
            if (v134[23] >= 0) {
              uint64_t v33 = v134;
            }
            else {
              uint64_t v33 = *(unsigned char **)v134;
            }
            memmove(v32, v33, v31);
          }
          strcpy(&v32[v31], "spatial+build-IRs+prepare-filter-frames");
          (*(void (**)(std::string *__return_ptr, uint64_t, unsigned char *))(*(void *)v30 + 16))(&v131, v30, __p);
          double v34 = (uint64_t *)((char *)this + 5784);
          if ((__p[23] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
          std::string::size_type v35 = v131.__r_.__value_.__r.__words[0];
          *(void *)(v131.__r_.__value_.__r.__words[0] + 256) = &unk_26D473600;
          *(void *)(v35 + 264) = this;
          *(unsigned char *)(v35 + 383) = 1;
          atomic_store(1u, (unsigned __int8 *)(v35 + 40));
          uint64_t v36 = *((void *)this + 736);
          unsigned long long v122 = __PAIR128__(v131.__r_.__value_.__l.__size_, v35);
          if (v131.__r_.__value_.__l.__size_) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v131.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
          }
          std::string::size_type v120 = v22;
          uint64_t v121 = v29;
          if (v29) {
            atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          (*(void (**)(uint64_t, unsigned long long *, std::string::size_type *))(*(void *)v36 + 24))(v36, &v122, &v120);
          if (v121) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v121);
          }
          if (*((void *)&v122 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v122 + 1));
          }
          std::string::size_type v6 = v131.__r_.__value_.__l.__size_;
          std::string::size_type v22 = v131.__r_.__value_.__r.__words[0];
          if (v131.__r_.__value_.__l.__size_) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v131.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
          }
          if (v29) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v29);
          }
          if (v131.__r_.__value_.__l.__size_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v131.__r_.__value_.__l.__size_);
          }
          char v29 = (std::__shared_weak_count *)v6;
        }
        else
        {
          double v34 = (uint64_t *)((char *)this + 5784);
        }
        unint64_t v37 = *((void *)this + 724);
        if (v37)
        {
          uint8x8_t v38 = (uint8x8_t)vcnt_s8((int8x8_t)v37);
          v38.i16[0] = vaddlv_u8(v38);
          if (v38.u32[0] > 1uLL)
          {
            std::string::size_type v6 = v115;
            if (v37 <= v115) {
              std::string::size_type v6 = v115 % v37;
            }
          }
          else
          {
            std::string::size_type v6 = (v37 + 0x7FFFFFFFFFFFFFFFLL) & v115;
          }
          unint64_t v39 = *(void **)(*v34 + 8 * v6);
          if (v39)
          {
            for (uint64_t i = (void *)*v39; i; uint64_t i = (void *)*i)
            {
              unint64_t v41 = i[1];
              if (v41 == v115)
              {
                if (i[2] == v115) {
                  goto LABEL_133;
                }
              }
              else
              {
                if (v38.u32[0] > 1uLL)
                {
                  if (v41 >= v37) {
                    v41 %= v37;
                  }
                }
                else
                {
                  v41 &= v37 - 1;
                }
                if (v41 != v6) {
                  break;
                }
              }
            }
          }
        }
        uint64_t v42 = operator new(0x28uLL);
        *uint64_t v42 = 0;
        v42[1] = v115;
        v42[2] = v115;
        v42[3] = v22;
        v42[4] = v29;
        if (v29) {
          atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        float v43 = (float)(unint64_t)(*((void *)this + 726) + 1);
        float v44 = *((float *)this + 1454);
        if (!v37 || (float)(v44 * (float)v37) < v43)
        {
          BOOL v45 = (v37 & (v37 - 1)) != 0;
          if (v37 < 3) {
            BOOL v45 = 1;
          }
          unint64_t v46 = v45 | (2 * v37);
          unint64_t v47 = vcvtps_u32_f32(v43 / v44);
          if (v46 <= v47) {
            size_t v48 = v47;
          }
          else {
            size_t v48 = v46;
          }
          std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>((uint64_t)v34, v48);
          unint64_t v37 = *((void *)this + 724);
          if ((v37 & (v37 - 1)) != 0)
          {
            if (v37 <= v115) {
              std::string::size_type v6 = v115 % v37;
            }
            else {
              std::string::size_type v6 = v115;
            }
          }
          else
          {
            std::string::size_type v6 = (v37 + 0x7FFFFFFFFFFFFFFFLL) & v115;
          }
        }
        uint64_t v49 = *v34;
        uint64_t v50 = *(void **)(*v34 + 8 * v6);
        if (v50) {
          break;
        }
        *uint64_t v42 = *v114;
        void *v114 = v42;
        *(void *)(v49 + 8 * v6) = v114;
        if (*v42)
        {
          unint64_t v51 = *(void *)(*v42 + 8);
          if ((v37 & (v37 - 1)) != 0)
          {
            if (v51 >= v37) {
              v51 %= v37;
            }
          }
          else
          {
            v51 &= v37 - 1;
          }
          uint64_t v50 = (void *)(*v34 + 8 * v51);
          goto LABEL_131;
        }
LABEL_132:
        ++*((void *)this + 726);
LABEL_133:
        if ((v134[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)v134);
          if (!v29) {
            goto LABEL_136;
          }
LABEL_135:
          std::__shared_weak_count::__release_shared[abi:ne180100](v29);
          goto LABEL_136;
        }
        if (v29) {
          goto LABEL_135;
        }
LABEL_136:
        unint64_t v5 = v115 + 1;
        if (v115 == 2) {
          goto LABEL_226;
        }
      }
      *uint64_t v42 = *v50;
LABEL_131:
      void *v50 = v42;
      goto LABEL_132;
    }
LABEL_244:
    std::terminate();
  }
  if (*((_DWORD *)this + 1400) != 1) {
    goto LABEL_244;
  }
  uint64_t v52 = *((void *)this + 688);
  uint64_t v53 = *((void *)this + 689);
  if (v52 == v53)
  {
    std::string::size_type v55 = 0;
    uint64_t v62 = 0;
  }
  else
  {
    int v54 = 0;
    std::string::size_type v55 = 0;
    do
    {
      uint64_t v56 = *(void *)(v52 + 168);
      uint64_t v57 = *(void *)(v52 + 176);
      if (v56 != v57)
      {
        uint64_t v58 = *(void *)(v52 + 168);
        uint64_t v59 = v54;
        do
        {
          (*(void (**)(unsigned char *__return_ptr))(**((void **)this + 736) + 16))(__p);
          std::string::size_type v60 = *(void *)__p;
          if (v55)
          {
            *(void *)(*(void *)__p + 256) = &unk_26D473628;
            *(void *)(v60 + 264) = v58;
            *(unsigned char *)(v60 + 383) = 1;
            atomic_store(1u, (unsigned __int8 *)(v60 + 40));
            uint64_t v61 = *((void *)this + 736);
            v131.__r_.__value_.__r.__words[0] = v60;
            v131.__r_.__value_.__l.__size_ = *(void *)&__p[8];
            if (*(void *)&__p[8]) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&__p[8] + 8), 1uLL, memory_order_relaxed);
            }
            v130.__r_.__value_.__r.__words[0] = v55;
            v130.__r_.__value_.__l.__size_ = (std::string::size_type)v59;
            if (v59) {
              atomic_fetch_add_explicit(&v59->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            (*(void (**)(uint64_t, std::string *, std::string *))(*(void *)v61 + 24))(v61, &v131, &v130);
            if (v130.__r_.__value_.__l.__size_) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v130.__r_.__value_.__l.__size_);
            }
            if (v131.__r_.__value_.__l.__size_) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v131.__r_.__value_.__l.__size_);
            }
          }
          else
          {
            *(void *)(*(void *)__p + 256) = &unk_26D473650;
            *(void *)(v60 + 264) = v56;
            *(void *)(v60 + 272) = this;
            *(unsigned char *)(v60 + 383) = 1;
            atomic_store(1u, (unsigned __int8 *)(v60 + 40));
          }
          std::string::size_type v55 = *(void *)__p;
          int v54 = *(std::__shared_weak_count **)&__p[8];
          if (*(void *)&__p[8]) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&__p[8] + 8), 1uLL, memory_order_relaxed);
          }
          if (v59) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v59);
          }
          if (*(void *)&__p[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__p[8]);
          }
          v58 += 96;
          v56 += 96;
          uint64_t v59 = v54;
        }
        while (v58 != v57);
      }
      v52 += 192;
    }
    while (v52 != v53);
    uint64_t v3 = *((void *)this + 733);
    uint64_t v62 = v54;
  }
  uint64_t v63 = *((void *)this + 736);
  std::string::basic_string[abi:ne180100]<0>(v134, "-Sustain-Graph-Combined");
  int v64 = *(char *)(v3 + 23);
  if (v64 >= 0) {
    __int16 v65 = (const std::string::value_type *)v3;
  }
  else {
    __int16 v65 = *(const std::string::value_type **)v3;
  }
  if (v64 >= 0) {
    std::string::size_type v66 = *(unsigned __int8 *)(v3 + 23);
  }
  else {
    std::string::size_type v66 = *(void *)(v3 + 8);
  }
  uint64_t v67 = std::string::insert((std::string *)v134, 0, v65, v66);
  long long v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
  *(void *)&__p[16] = *((void *)&v67->__r_.__value_.__l + 2);
  *(_OWORD *)std::string __p = v68;
  v67->__r_.__value_.__l.__size_ = 0;
  v67->__r_.__value_.__r.__words[2] = 0;
  v67->__r_.__value_.__r.__words[0] = 0;
  (*(void (**)(std::string *__return_ptr, uint64_t, unsigned char *))(*(void *)v63 + 16))(&v129, v63, __p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  if ((v134[23] & 0x80000000) != 0) {
    operator delete(*(void **)v134);
  }
  std::string::size_type v69 = v129.__r_.__value_.__r.__words[0];
  *(void *)(v129.__r_.__value_.__r.__words[0] + 256) = &unk_26D473678;
  *(void *)(v69 + 264) = this;
  *(unsigned char *)(v69 + 383) = 1;
  atomic_store(1u, (unsigned __int8 *)(v69 + 40));
  uint64_t v70 = *((void *)this + 736);
  *(_OWORD *)std::string __p = __PAIR128__(v129.__r_.__value_.__l.__size_, v69);
  if (v129.__r_.__value_.__l.__size_) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v129.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)uint64_t v134 = v55;
  *(void *)&v134[8] = v62;
  if (v62) {
    atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, unsigned char *, unsigned char *))(*(void *)v70 + 24))(v70, __p, v134);
  if (*(void *)&v134[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v134[8]);
  }
  if (*(void *)&__p[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__p[8]);
  }
  long long v71 = *(_OWORD *)&v129.__r_.__value_.__l.__data_;
  long long v72 = (char *)operator new(0x28uLL);
  uint64_t v73 = v72;
  uint64_t v74 = (void **)((char *)this + 5784);
  *(void *)long long v72 = 0;
  *((void *)v72 + 1) = 0;
  *((void *)v72 + 2) = 0;
  *(_OWORD *)(v72 + 24) = v71;
  if (*((void *)&v71 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v71 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)v72 + 1) = 0;
  unint64_t v75 = *((void *)this + 724);
  if (v75)
  {
    size_t v76 = (void *)**v74;
    if (v76)
    {
      __int16 v77 = (void *)*v76;
      if (v77)
      {
        uint8x8_t v78 = (uint8x8_t)vcnt_s8((int8x8_t)v75);
        v78.i16[0] = vaddlv_u8(v78);
        do
        {
          unint64_t v79 = v77[1];
          if (v79)
          {
            if (v78.u32[0] > 1uLL)
            {
              if (v79 < v75 || v79 % v75) {
                break;
              }
            }
            else if ((v79 & (v75 - 1)) != 0)
            {
              break;
            }
          }
          else if (!v77[2])
          {
            uint64_t v108 = (std::__shared_weak_count *)*((void *)v72 + 4);
            if (v108) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v108);
            }
            operator delete(v73);
            goto LABEL_222;
          }
          __int16 v77 = (void *)*v77;
        }
        while (v77);
      }
    }
  }
  float v80 = (float)(unint64_t)(*((void *)this + 726) + 1);
  float v81 = *((float *)this + 1454);
  if (v75 && (float)(v81 * (float)v75) >= v80)
  {
    unint64_t v82 = 0;
  }
  else
  {
    uint64_t v83 = 2 * v75;
    BOOL v84 = v75 < 3 || (v75 & (v75 - 1)) != 0;
    size_t v85 = v84 | v83;
    unint64_t v86 = vcvtps_u32_f32(v80 / v81);
    if (v85 <= v86) {
      size_t v87 = v86;
    }
    else {
      size_t v87 = v85;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>((uint64_t)this + 5784, v87);
    unint64_t v75 = *((void *)this + 724);
    unint64_t v82 = v73[1];
  }
  uint8x8_t v88 = (uint8x8_t)vcnt_s8((int8x8_t)v75);
  v88.i16[0] = vaddlv_u8(v88);
  if (v88.u32[0] > 1uLL)
  {
    if (v82 >= v75) {
      v82 %= v75;
    }
  }
  else
  {
    v82 &= v75 - 1;
  }
  unint64_t v89 = (void **)*v74;
  __int16 v90 = (void *)(*v74)[v82];
  if (v90)
  {
    void *v73 = *v90;
LABEL_220:
    void *v90 = v73;
    goto LABEL_221;
  }
  void *v73 = *((void *)this + 725);
  *((void *)this + 725) = v73;
  v89[v82] = (void *)((char *)this + 5800);
  if (*v73)
  {
    unint64_t v91 = *(void *)(*v73 + 8);
    if (v88.u32[0] > 1uLL)
    {
      if (v91 >= v75) {
        v91 %= v75;
      }
    }
    else
    {
      v91 &= v75 - 1;
    }
    __int16 v90 = &(*v74)[v91];
    goto LABEL_220;
  }
LABEL_221:
  ++*((void *)this + 726);
LABEL_222:
  if (v129.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v129.__r_.__value_.__l.__size_);
  }
  if (v62) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v62);
  }
LABEL_226:
  if (!*((void *)this + 726)) {
    goto LABEL_244;
  }
  v131.__r_.__value_.__r.__words[0] = (std::string::size_type)&v131;
  *(_OWORD *)&v131.__r_.__value_.__r.__words[1] = (unint64_t)&v131;
  v130.__r_.__value_.__r.__words[0] = (std::string::size_type)&v130;
  *(_OWORD *)&v130.__r_.__value_.__r.__words[1] = (unint64_t)&v130;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
  uint64_t v92 = (void *)((char *)this + 5800);
  double v93 = (std::locale::id *)MEMORY[0x263F8C108];
  while (1)
  {
    uint64_t v92 = (void *)*v92;
    if (!v92) {
      break;
    }
    Params = (double *)Phase::Controller::SpatialModelerInstance::GetParams(this, 2, v92[2]);
    double v95 = Params[2];
    if (v95 == 0.0)
    {
      uint64_t v96 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance((Phase::Logger *)Params)
                                                                                          + 224)));
      if (os_log_type_enabled(v96, OS_LOG_TYPE_DEFAULT))
      {
        Phase::Controller::SpatialModelerInstance::GetDescription((Phase::Controller::SpatialModelerInstance *)&v129, (uint64_t)this);
        uint64_t v97 = &v129;
        if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v97 = (std::string *)v129.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)uint64_t v134 = 136315650;
        *(void *)&v134[4] = "CvmSpatialModelerInstance.mm";
        *(_WORD *)&v134[12] = 1024;
        *(_DWORD *)&v134[14] = 3047;
        *(_WORD *)&v134[18] = 2080;
        *(void *)&v134[20] = v97;
        _os_log_impl(&dword_221E5E000, v96, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s: Load Balancer parameters were not set.  Using default update rate 25Hz", v134, 0x1Cu);
        if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v129.__r_.__value_.__l.__data_);
        }
      }

      double v98 = 0.04;
    }
    else
    {
      double v98 = 1.0 / v95;
    }
    std::list<std::shared_ptr<Phase::Job>>::push_back((uint64_t *)&v131, v92 + 3);
    BOOL v99 = (double *)operator new(0x18uLL);
    v99[2] = v98;
    std::string::size_type v100 = v130.__r_.__value_.__r.__words[0];
    *BOOL v99 = *(double *)&v130.__r_.__value_.__l.__data_;
    *((void *)v99 + 1) = &v130;
    *(void *)(v100 + 8) = v99;
    v130.__r_.__value_.__r.__words[0] = (std::string::size_type)v99;
    ++v130.__r_.__value_.__r.__words[2];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[16], (uint64_t)"<", 1);
    uint64_t v101 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v101, (uint64_t)", ", 2);
    unint64_t v102 = (void *)std::ostream::operator<<();
    int v103 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v102, (uint64_t)" Hz>", 4);
    std::ios_base::getloc((const std::ios_base *)((char *)v103 + *(void *)(*v103 - 24)));
    uint64_t v104 = std::locale::use_facet((const std::locale *)v134, v93);
    ((void (*)(const std::locale::facet *, uint64_t))v104->__vftable[2].~facet_0)(v104, 10);
    std::locale::~locale((std::locale *)v134);
    std::ostream::put();
    std::ostream::flush();
  }
  uint64_t v105 = *((void *)this + 736);
  std::list<std::shared_ptr<Phase::Job>>::list(v119, (uint64_t)&v131);
  std::list<double>::list(v118, (uint64_t)&v130);
  std::stringbuf::str();
  uint64_t v133 = 0;
  uint64_t v106 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v106 = &unk_26D473740;
  *(_OWORD *)(v106 + 8) = *(_OWORD *)v116;
  *((void *)v106 + 3) = v117;
  *((void *)v106 + 4) = this;
  uint64_t v133 = v106;
  (*(void (**)(uint64_t, uint64_t *, void *, void *))(*(void *)v105 + 56))(v105, v119, v118, v132);
  std::__function::__value_func<void ()(BOOL,std::list<std::shared_ptr<Phase::Job>>)>::~__value_func[abi:ne180100](v132);
  std::__list_imp<Phase::Controller::AssetUnloader::ObjectUnloadRequest>::clear(v118);
  std::__list_imp<std::shared_ptr<Phase::Job>>::clear(v119);
  *(void *)std::string __p = *MEMORY[0x263F8C2B8];
  uint64_t v107 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)&__p[*(void *)(*(void *)__p - 24)] = *(void *)(MEMORY[0x263F8C2B8] + 64);
  *(void *)&__p[16] = v107;
  *(void *)&__p[24] = MEMORY[0x263F8C318] + 16;
  if (v137 < 0) {
    operator delete(v136);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x223C937D0](v138);
  std::__list_imp<Phase::Controller::AssetUnloader::ObjectUnloadRequest>::clear(&v130);
  std::__list_imp<std::shared_ptr<Phase::Job>>::clear((uint64_t *)&v131);
}

void sub_221EB6E1C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Phase::Controller::SpatialModelerInstance::RegisterSubmix(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v108 = *MEMORY[0x263EF8340];
  if (!(a2 | a3))
  {
    uint8x8_t v78 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance((Phase::Logger *)a1)
                                                                                        + 224)));
    if (os_log_type_enabled(v78, OS_LOG_TYPE_ERROR))
    {
      Phase::Controller::SpatialModelerInstance::GetDescription((Phase::Controller::SpatialModelerInstance *)__p, a1);
      unint64_t v79 = v104 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 136315650;
      *(void *)&uint8_t buf[4] = "CvmSpatialModelerInstance.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 905;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = v79;
      _os_log_impl(&dword_221E5E000, v78, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (InvalidId) [inSubmixId == kInvalidSubmixId is true]: \"%s: Invalid SubmixId!\"", buf, 0x1Cu);
      if (v104 < 0) {
        operator delete(__p[0]);
      }
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _ZN5Phase10Controller9InvalidIdCI1St11logic_errorEPKc(exception, "%s: Invalid SubmixId!");
  }
  unsigned __int8 v10 = (void *)(a1 + 8);
  *(void *)std::string buf = a2;
  *(void *)&buf[8] = a3;
  long long v11 = (Phase::Logger *)std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((void *)(a1 + 8), buf);
  if (v11)
  {
    float v81 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v11)
                                                                                        + 224)));
    if (os_log_type_enabled(v81, OS_LOG_TYPE_ERROR))
    {
      Phase::Controller::SpatialModelerInstance::GetDescription((Phase::Controller::SpatialModelerInstance *)__p, a1);
      unint64_t v82 = v104 >= 0 ? __p : (void **)__p[0];
      uint64_t v83 = *(void *)(*(void *)(a1 + 5864) + 24);
      *(_DWORD *)std::string buf = 136316162;
      *(void *)&uint8_t buf[4] = "CvmSpatialModelerInstance.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 912;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = v82;
      *(_WORD *)&unsigned char buf[28] = 2048;
      *(void *)&buf[30] = a2;
      *(_WORD *)&unsigned char buf[38] = 2048;
      *(void *)&uint8_t buf[40] = v83;
      _os_log_impl(&dword_221E5E000, v81, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (IdAlreadyExists) [IsRegistered(inSubmixId) is true]: \"%s: SubmixId %llu is already registered for spatial modeler %llu !\"", buf, 0x30u);
      if (v104 < 0) {
        operator delete(__p[0]);
      }
    }

    BOOL v84 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _ZN5Phase10Controller15IdAlreadyExistsCI1St11logic_errorEPKc(v84, "%s: SubmixId %llu is already registered for spatial modeler %llu !");
  }
  uint64_t v12 = (void *)(*(void *)(a1 + 6472) + 120);
  *(void *)std::string buf = a2;
  *(void *)&buf[8] = a3;
  std::string::size_type v13 = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>(v12, buf);
  if (v13) {
    uint64_t v14 = v13[4];
  }
  else {
    uint64_t v14 = 0;
  }
  *(void *)&long long v96 = a2;
  *((void *)&v96 + 1) = a3;
  *(void *)&long long v97 = 0;
  BYTE8(v97) = 0;
  *(void *)&long long v98 = v14;
  *((void *)&v98 + 1) = a4;
  *(void *)BOOL v99 = a5;
  __p[0] = (void *)a2;
  *(_OWORD *)&v99[8] = 0u;
  long long v100 = 0u;
  long long v101 = 0u;
  uint64_t v102 = 1065353216;
  __p[1] = (void *)a3;
  *(void *)std::string buf = a2;
  *(void *)&buf[8] = a3;
  long long v15 = (Phase::Logger *)std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>(v10, buf);
  if (v15)
  {
    size_t v85 = **(id **)(Phase::Logger::GetInstance(v15) + 224);
    if (os_log_type_enabled(v85, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315650;
      *(void *)&uint8_t buf[4] = "CvmSubmixSlotMapImpl.hpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 63;
      *(_WORD *)&unsigned char buf[18] = 2048;
      *(void *)&buf[20] = a2;
      _os_log_impl(&dword_221E5E000, v85, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [true == Contains(inSubmixId) is true]: \"SubmixId %llu already exists in SubmixSlotMap::Insert\"", buf, 0x1Cu);
    }
    unint64_t v86 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v86, "SubmixId %llu already exists in SubmixSlotMap::Insert");
    size_t v87 = (void (__cdecl *)(std::logic_error *__hidden))MEMORY[0x263F8C080];
    unint64_t v89 = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
  }
  else
  {
    unsigned int v16 = atomic_load((unsigned int *)(a1 + 68));
    if (v16 == -1) {
      goto LABEL_12;
    }
    *(void *)std::string buf = a1 + 80;
    buf[8] = 1;
    std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(a1 + 80));
    for (i = v16; i != -1; unsigned int v16 = i)
    {
      uint64_t v18 = *(void *)(a1 + 48);
      atomic_compare_exchange_strong((atomic_uint *volatile)(a1 + 68), &i, *(_DWORD *)(v18 + 24 * v16 + 16));
      if (i == v16)
      {
        Phase::Handle64::Set((Phase::Logger *)&v106, v16, *(unsigned int *)(v18 + 24 * v16 + 20));
        long long v19 = (Phase::Logger *)std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)buf);
        uint64_t v105 = v106;
        if (v106) {
          goto LABEL_14;
        }
        unint64_t v91 = **(id **)(Phase::Logger::GetInstance(v19) + 224);
        if (os_log_type_enabled(v91, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 136315650;
          *(void *)&uint8_t buf[4] = "CvmSubmixSlotMapImpl.hpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 68;
          *(_WORD *)&unsigned char buf[18] = 2048;
          *(void *)&buf[20] = a2;
          _os_log_impl(&dword_221E5E000, v91, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (InvalidId) [SubmixHandle::kInvalidHandle == submixHandle is true]: \"SubmixSlotMap::Insert unable to allocate new handle SubmixId %llu\"", buf, 0x1Cu);
        }
        unint64_t v86 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v86, "SubmixSlotMap::Insert unable to allocate new handle SubmixId %llu");
        goto LABEL_111;
      }
    }
    std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)buf);
LABEL_12:
    uint64_t v105 = atomic_fetch_add((atomic_uint *volatile)(a1 + 72), 1u) | 0x100000000;
LABEL_14:
    unsigned int v20 = atomic_load((unsigned int *)(a1 + 72));
    if (*(_DWORD *)(a1 + 64) < v20)
    {
      if (v20 >= 0x40) {
        unsigned int v21 = v20 + (v20 >> 1);
      }
      else {
        unsigned int v21 = 64;
      }
      Phase::details::SharedSlotMap<Phase::Controller::SpatialModelerInstance::SubmixInfo,Phase::Handle64>::Resize((uint64_t *)(a1 + 48), v21);
    }
    uint64_t v22 = v105;
    uint64_t UniqueSlot = Phase::details::SharedSlotMap<Phase::Controller::SpatialModelerInstance::SubmixInfo,Phase::Handle64>::GetUniqueSlot(a1 + 48, v105);
    uint64_t v24 = (uint64_t *)UniqueSlot;
    if (UniqueSlot)
    {
      uint64_t UniqueSlot = (uint64_t)operator new(0x88uLL);
      *(void *)(UniqueSlot + 8) = 0;
      *(void *)(UniqueSlot + 16) = 0;
      *(_OWORD *)(UniqueSlot + 24) = 0u;
      uint64_t v25 = UniqueSlot + 24;
      *(void *)uint64_t UniqueSlot = &unk_26D473108;
      *(_OWORD *)(UniqueSlot + 120) = 0u;
      *(_OWORD *)(UniqueSlot + 104) = 0u;
      *(_OWORD *)(UniqueSlot + 88) = 0u;
      *(_OWORD *)(UniqueSlot + 72) = 0u;
      *(_OWORD *)(UniqueSlot + 56) = 0u;
      *(_OWORD *)(UniqueSlot + 40) = 0u;
      *(_DWORD *)(UniqueSlot + 128) = 1065353216;
      uint64_t v26 = (std::__shared_weak_count *)v24[1];
      *uint64_t v24 = UniqueSlot + 24;
      v24[1] = UniqueSlot;
      if (v26)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v26);
        uint64_t v25 = *v24;
      }
    }
    else
    {
      uint64_t v25 = 0;
    }
    if (v22)
    {
      *(_OWORD *)uint64_t v25 = v96;
      long long v27 = v97;
      long long v28 = v98;
      long long v29 = *(_OWORD *)v99;
      *(void *)(v25 + 64) = *(void *)&v99[16];
      *(_OWORD *)(v25 + 32) = v28;
      *(_OWORD *)(v25 + 48) = v29;
      *(_OWORD *)(v25 + 16) = v27;
      if ((long long *)v25 != &v96)
      {
        *(_DWORD *)(v25 + 104) = v102;
        uint64_t v30 = (uint64_t *)v101;
        uint64_t v31 = *(void *)(v25 + 80);
        if (!v31) {
          goto LABEL_33;
        }
        for (uint64_t j = 0; j != v31; *(void *)(*(void *)(v25 + 72) + 8 * j++) = 0)
          ;
        uint64_t v33 = *(uint64_t **)(v25 + 88);
        *(void *)(v25 + 88) = 0;
        *(void *)(v25 + 96) = 0;
        if (v33)
        {
          while (v30)
          {
            unint64_t v34 = *((unsigned int *)v30 + 4);
            *((_DWORD *)v33 + 4) = v34;
            long long v35 = *(_OWORD *)(v30 + 3);
            long long v36 = *(_OWORD *)(v30 + 5);
            long long v37 = *(_OWORD *)(v30 + 7);
            v33[9] = v30[9];
            *(_OWORD *)(v33 + 7) = v37;
            *(_OWORD *)(v33 + 5) = v36;
            *(_OWORD *)(v33 + 3) = v35;
            uint8x8_t v38 = (uint64_t *)*v33;
            v33[1] = v34;
            uint64_t inserted = std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__node_insert_multi_prepare(v25 + 72, v34, (_DWORD *)v33 + 4);
            std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::__node_insert_multi_perform((void *)(v25 + 72), v33, inserted);
            uint64_t v30 = (uint64_t *)*v30;
            uint64_t v33 = v38;
            if (!v38) {
              goto LABEL_33;
            }
          }
          do
          {
            __int16 v77 = (uint64_t *)*v33;
            operator delete(v33);
            uint64_t v33 = v77;
          }
          while (v77);
        }
        else
        {
LABEL_33:
          while (v30)
          {
            __int16 v40 = operator new(0x50uLL);
            *(void *)__int16 v40 = 0;
            long long v41 = *((_OWORD *)v30 + 4);
            long long v43 = *((_OWORD *)v30 + 1);
            long long v42 = *((_OWORD *)v30 + 2);
            v40[3] = *((_OWORD *)v30 + 3);
            v40[4] = v41;
            v40[1] = v43;
            v40[2] = v42;
            unint64_t v44 = *((unsigned int *)v40 + 4);
            *((void *)v40 + 1) = v44;
            BOOL v45 = std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__node_insert_multi_prepare(v25 + 72, v44, (_DWORD *)v40 + 4);
            std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::__node_insert_multi_perform((void *)(v25 + 72), v40, v45);
            uint64_t v30 = (uint64_t *)*v30;
          }
        }
      }
      std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>>>::__emplace_unique_key_args<Phase::UniqueObjectId,Phase::UniqueObjectId&,Phase::Handle64&>((uint64_t)v10, __p, __p, &v105);
      uint64_t v46 = v105;
      uint64_t v47 = std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)&v100);
      *(void *)(v25 + 16) = v46;
      uint64_t v48 = *a6;
      uint64_t v95 = a6[1];
      if (*a6 == v95) {
LABEL_86:
      }
        operator new();
      uint64_t v49 = (uint64_t *)(v25 + 72);
      uint64_t v50 = (uint64_t *)(v25 + 88);
      while (2)
      {
        unint64_t v51 = *(unsigned int *)(v48 + 24);
        memset(&buf[4], 0, 56);
        unint64_t v52 = *(void *)(v25 + 80);
        if (v52)
        {
          uint8x8_t v53 = (uint8x8_t)vcnt_s8((int8x8_t)v52);
          v53.i16[0] = vaddlv_u8(v53);
          if (v53.u32[0] > 1uLL)
          {
            unint64_t v6 = v51;
            if (v52 <= v51) {
              unint64_t v6 = v51 % v52;
            }
          }
          else
          {
            unint64_t v6 = (v52 - 1) & v51;
          }
          int v54 = *(uint64_t ***)(*v49 + 8 * v6);
          if (v54)
          {
            for (uint64_t k = *v54; k; uint64_t k = (uint64_t *)*k)
            {
              unint64_t v56 = k[1];
              if (v56 == v51)
              {
                if (*((_DWORD *)k + 4) == v51)
                {
                  unint64_t v75 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance((Phase::Logger *)v47)
                                                                   + 224));
                  uint64_t v47 = os_log_type_enabled(v75, OS_LOG_TYPE_ERROR);
                  if (v47)
                  {
                    int v76 = *(_DWORD *)(v48 + 24);
                    *(_DWORD *)std::string buf = 136315650;
                    *(void *)&uint8_t buf[4] = "CvmSpatialModelerOptionalProperties.hpp";
                    *(_WORD *)&unsigned char buf[12] = 1024;
                    *(_DWORD *)&buf[14] = 65;
                    *(_WORD *)&unsigned char buf[18] = 1024;
                    *(_DWORD *)&buf[20] = v76;
                    _os_log_impl(&dword_221E5E000, v75, OS_LOG_TYPE_ERROR, "%25s:%-5d Unexpected duplicate OptionalPropertyDescription entry for UID %d", buf, 0x18u);
                  }
                  goto LABEL_80;
                }
              }
              else
              {
                if (v53.u32[0] > 1uLL)
                {
                  if (v56 >= v52) {
                    v56 %= v52;
                  }
                }
                else
                {
                  v56 &= v52 - 1;
                }
                if (v56 != v6) {
                  break;
                }
              }
            }
          }
        }
        uint64_t v47 = (uint64_t)operator new(0x50uLL);
        uint64_t v57 = v47;
        *(void *)uint64_t v47 = 0;
        *(void *)(v47 + 8) = v51;
        *(_DWORD *)(v47 + 16) = v51;
        long long v58 = *(_OWORD *)&buf[16];
        *(_OWORD *)(v47 + 20) = *(_OWORD *)buf;
        *(_OWORD *)(v47 + 36) = v58;
        *(_OWORD *)(v47 + 52) = *(_OWORD *)&buf[32];
        *(_OWORD *)(v47 + 64) = *(_OWORD *)&buf[44];
        float v59 = (float)(unint64_t)(*(void *)(v25 + 96) + 1);
        float v60 = *(float *)(v25 + 104);
        if ((((float)(v60 * (float)v52) >= v59) & ~(v52 == 0)) == 0)
        {
          BOOL v61 = (v52 & (v52 - 1)) != 0;
          if (v52 < 3) {
            BOOL v61 = 1;
          }
          unint64_t v62 = v61 | (2 * v52);
          unint64_t v63 = vcvtps_u32_f32(v59 / v60);
          if (v62 <= v63) {
            size_t v64 = v63;
          }
          else {
            size_t v64 = v62;
          }
          std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>(v25 + 72, v64);
          unint64_t v52 = *(void *)(v25 + 80);
          if ((v52 & (v52 - 1)) != 0)
          {
            if (v52 <= v51) {
              unint64_t v6 = v51 % v52;
            }
            else {
              unint64_t v6 = v51;
            }
          }
          else
          {
            unint64_t v6 = (v52 - 1) & v51;
          }
        }
        uint64_t v65 = *v49;
        std::string::size_type v66 = *(uint64_t **)(*v49 + 8 * v6);
        if (v66)
        {
          *(void *)uint64_t v57 = *v66;
          goto LABEL_71;
        }
        *(void *)uint64_t v57 = *v50;
        uint64_t *v50 = v57;
        *(void *)(v65 + 8 * v6) = v50;
        if (*(void *)v57)
        {
          unint64_t v67 = *(void *)(*(void *)v57 + 8);
          if ((v52 & (v52 - 1)) != 0)
          {
            if (v67 >= v52) {
              v67 %= v52;
            }
          }
          else
          {
            v67 &= v52 - 1;
          }
          std::string::size_type v66 = (uint64_t *)(*v49 + 8 * v67);
LABEL_71:
          *std::string::size_type v66 = v57;
        }
        ++*(void *)(v25 + 96);
        *(_DWORD *)(v57 + 24) = *(_DWORD *)(v48 + 24);
        int v68 = *(unsigned __int8 *)(v48 + 28);
        *(unsigned char *)(v57 + 28) = v68;
        if (v68 == 1)
        {
          uint64_t v74 = *(void *)(v48 + 32);
          if (*(_DWORD *)(v57 + 72) != 1) {
            *(_DWORD *)(v57 + 72) = 1;
          }
          *(void *)(v57 + 32) = v74;
        }
        else
        {
          if (v68) {
            std::terminate();
          }
          double v69 = *(double *)(v48 + 40);
          double v70 = *(double *)(v48 + 48);
          double v71 = *(double *)(v48 + 32);
          memset(buf, 0, 33);
          uint64_t v47 = Phase::Controller::Parameter<double>::Initialize((uint64_t)buf, v69, v70, v71);
          long long v72 = (_OWORD *)(v57 + 32);
          long long v73 = *(_OWORD *)&buf[16];
          if (*(_DWORD *)(v57 + 72))
          {
            _OWORD *v72 = *(_OWORD *)buf;
            *(_OWORD *)(v57 + 48) = v73;
            *(void *)(v57 + 64) = *(void *)&buf[32];
            *(_DWORD *)(v57 + 72) = 0;
          }
          else
          {
            _OWORD *v72 = *(_OWORD *)buf;
            *(_OWORD *)(v57 + 48) = v73;
            *(unsigned char *)(v57 + 64) = buf[32];
          }
        }
LABEL_80:
        v48 += 56;
        if (v48 == v95) {
          goto LABEL_86;
        }
        continue;
      }
    }
    __int16 v90 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)UniqueSlot) + 224);
    if (os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315906;
      *(void *)&uint8_t buf[4] = "CvmSubmixSlotMapImpl.hpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 76;
      *(_WORD *)&unsigned char buf[18] = 2048;
      *(void *)&buf[20] = 0;
      *(_WORD *)&unsigned char buf[28] = 2048;
      *(void **)&buf[30] = __p[0];
      _os_log_impl(&dword_221E5E000, v90, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (InvalidId) [SubmixHandle::kInvalidHandle == submixHandle is true]: \"SubmixSlotMap::Insert couldn't find SubmixHandle %llu for SubmixId %llu\"", buf, 0x26u);
    }
    unint64_t v86 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v86, "SubmixSlotMap::Insert couldn't find SubmixHandle %llu for SubmixId %llu");
LABEL_111:
    size_t v87 = Phase::Controller::InvalidId::~InvalidId;
    unint64_t v89 = (std::logic_error_vtbl *)&unk_26D4724A0;
  }
  v86->__vftable = v89;
  __cxa_throw(v86, v88, (void (*)(void *))v87);
}

void sub_221EB7D8C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(v2);
  _Unwind_Resume(a1);
}

void sub_221EB7DC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221EB7DD0()
{
  std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100](v1 - 176);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(v0);
  JUMPOUT(0x221EB7E6CLL);
}

void sub_221EB7DE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221EB7DEC(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_221EB7E18()
{
  __cxa_end_catch();
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(v0);
  JUMPOUT(0x221EB7E6CLL);
}

void sub_221EB7E24(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_221EB7E34(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void sub_221EB7E50()
{
  operator delete(v0);
  JUMPOUT(0x221EB7E5CLL);
}

uint64_t Phase::Controller::SpatialModelerInstance::UnregisterSubmix(uint64_t a1, void *a2, void *a3)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  unint64_t v6 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance((Phase::Logger *)a1)
                                                                                     + 224)));
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    Phase::Controller::SpatialModelerInstance::GetDescription((Phase::Controller::SpatialModelerInstance *)__p, a1);
    int v7 = v22 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136315906;
    uint64_t v24 = "CvmSpatialModelerInstance.mm";
    __int16 v25 = 1024;
    int v26 = 940;
    __int16 v27 = 2080;
    long long v28 = v7;
    __int16 v29 = 2048;
    uint64_t v30 = a2;
    _os_log_impl(&dword_221E5E000, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s: unregister submixId %llu", buf, 0x26u);
    if (v22 < 0) {
      operator delete(__p[0]);
    }
  }

  Phase::Controller::SpatialModelerInstance::RemoveInput(a1, a2, a3);
  __p[0] = a2;
  __p[1] = a3;
  uint64_t v8 = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>((void *)(a1 + 8), __p);
  std::string::size_type v9 = v8;
  if (!v8)
  {
    long long v19 = **(id **)(Phase::Logger::GetInstance(0) + 224);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315650;
      uint64_t v24 = "CvmSubmixSlotMapImpl.hpp";
      __int16 v25 = 1024;
      int v26 = 91;
      __int16 v27 = 2048;
      long long v28 = (void **)__p[0];
      _os_log_impl(&dword_221E5E000, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (InvalidId) [iter == mSubmixHandleMap.end() is true]: \"SubmixSlotMap::Erase couldn't find SubmixId %llu\"", buf, 0x1Cu);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _ZN5Phase10Controller9InvalidIdCI1St11logic_errorEPKc(exception, "SubmixSlotMap::Erase couldn't find SubmixId %llu");
  }
  uint64_t v10 = v8[4];
  uint64_t UniqueSlot = Phase::details::SharedSlotMap<Phase::Controller::SpatialModelerInstance::SubmixInfo,Phase::Handle64>::GetUniqueSlot(a1 + 48, v10);
  uint64_t v12 = UniqueSlot;
  if (UniqueSlot)
  {
    ++*(_DWORD *)(UniqueSlot + 20);
    std::string::size_type v13 = *(std::__shared_weak_count **)(UniqueSlot + 8);
    *(void *)uint64_t v12 = 0;
    *(void *)(v12 + 8) = 0;
    if (v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
    unsigned int v14 = atomic_load((unsigned int *)(a1 + 68));
    *(_DWORD *)(v12 + 16) = v14;
    unsigned int v15 = v14;
    atomic_compare_exchange_strong((atomic_uint *volatile)(a1 + 68), &v15, v10);
    if (v15 != v14)
    {
      unsigned int v16 = v15;
      do
      {
        *(_DWORD *)(v12 + 16) = v15;
        atomic_compare_exchange_strong((atomic_uint *volatile)(a1 + 68), &v16, v10);
        BOOL v17 = v16 == v15;
        unsigned int v15 = v16;
      }
      while (!v17);
    }
  }
  return std::__hash_table<Phase::Controller::Renderer *,std::hash<Phase::Controller::Renderer *>,std::equal_to<Phase::Controller::Renderer *>,std::allocator<Phase::Controller::Renderer *>>::erase((void *)(a1 + 8), v9);
}

void sub_221EB80FC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *Phase::Controller::SpatialModelerInstance::RemoveInput(uint64_t a1, void *a2, void *a3)
{
  unint64_t v6 = (void *)(*(void *)(a1 + 6472) + 120);
  v8[0] = a2;
  v8[1] = a3;
  unint64_t result = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>(v6, v8);
  if (result)
  {
    Phase::Controller::SpatialSubmixRouter::RemoveInput(*(void *)(a1 + 6472), a2, a3);
    unint64_t result = Phase::Controller::SubmixSlotMap<Phase::Controller::SpatialModelerInstance::SubmixInfo>::GetMutable((void *)(a1 + 8), (uint64_t)a2, (uint64_t)a3);
    if (result) {
      result[4] = 0;
    }
  }
  return result;
}

void Phase::Controller::SpatialModelerInstance::UnregisterAllSubmixes(Phase::Controller::SpatialModelerInstance *this)
{
  uint64_t v2 = (void ***)*((void *)this + 6);
  unsigned int v3 = *((_DWORD *)this + 16);
  int v4 = &v2[3 * v3];
  if (v3)
  {
    unint64_t v5 = *v2;
    if (!*v2)
    {
      unint64_t v6 = v2 + 3;
      while (1)
      {
        uint64_t v2 = v6;
        if (v6 >= v4) {
          break;
        }
        v6 += 3;
        unint64_t v5 = *v2;
        if (*v2) {
          goto LABEL_9;
        }
      }
      unint64_t v5 = 0;
    }
LABEL_9:
    unint64_t v7 = (unint64_t)v4;
  }
  else
  {
    unint64_t v5 = 0;
    unint64_t v7 = *((void *)this + 6);
  }
LABEL_16:
  while (v2 != v4)
  {
    Phase::Controller::SpatialModelerInstance::RemoveInput((uint64_t)this, *v5, v5[1]);
    if ((unint64_t)v2 < v7)
    {
      uint64_t v8 = v2 + 3;
      while (1)
      {
        uint64_t v2 = v8;
        if ((unint64_t)v8 >= v7) {
          break;
        }
        v8 += 3;
        unint64_t v5 = *v2;
        if (*v2) {
          goto LABEL_16;
        }
      }
      unint64_t v5 = 0;
    }
  }

  Phase::Controller::SubmixSlotMap<Phase::Controller::SpatialModelerInstance::SubmixInfo>::Clear((uint64_t)this + 8);
}

void *Phase::Controller::SpatialModelerInstance::AddInput(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v8 = (void *)(*(void *)(a1 + 6472) + 120);
  v11[0] = a2;
  v11[1] = a3;
  unint64_t result = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>(v8, v11);
  if (!result)
  {
    uint64_t v10 = Phase::Controller::SpatialSubmixRouter::AddInput(*(void *)(a1 + 6472), a2, a3, a4);
    unint64_t result = Phase::Controller::SubmixSlotMap<Phase::Controller::SpatialModelerInstance::SubmixInfo>::GetMutable((void *)(a1 + 8), a2, a3);
    if (result) {
      result[4] = v10;
    }
  }
  return result;
}

uint64_t *Phase::Controller::SubmixSlotMap<Phase::Controller::SpatialModelerInstance::SubmixInfo>::GetMutable(void *a1, uint64_t a2, uint64_t a3)
{
  v7[0] = a2;
  v7[1] = a3;
  int v4 = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>(a1, v7);
  if (v4) {
    uint64_t v5 = v4[4];
  }
  else {
    uint64_t v5 = 0;
  }
  unint64_t result = _ZN5Phase7details13SharedSlotMapINS_10Controller22SpatialModelerInstance10SubmixInfoENS_8Handle64EE13GetSlotToEditIRZNS_13SharedSlotMapIS4_S5_DnE9GetUniqueES5_EUlRT_E_EEPNS_18SharedSlotMapStateIS4_S5_E4SlotES5_OSA_((uint64_t)(a1 + 5), v5);
  if (result) {
    return (uint64_t *)*result;
  }
  return result;
}

Phase::Logger *Phase::Controller::SpatialModelerInstance::SetInputSendLevel(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v8 = (void *)(*(void *)(a1 + 6472) + 120);
  v11[0] = a2;
  v11[1] = a3;
  unint64_t result = (Phase::Logger *)std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>(v8, v11);
  if (result)
  {
    uint64_t v10 = *(void *)(a1 + 6472);
    return Phase::Controller::SpatialSubmixRouter::SetInputSendLevel(v10, a2, a3, a4);
  }
  return result;
}

void *Phase::Controller::SpatialModelerInstance::IsPrepared(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = (void *)(*(void *)(a1 + 6472) + 120);
  v9[0] = a2;
  v9[1] = a3;
  unint64_t result = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>(v6, v9);
  if (result)
  {
    uint64_t v8 = *(void *)(a1 + 6472);
    return (void *)Phase::Controller::SpatialSubmixRouter::IsPrepared(v8, a2, a3);
  }
  return result;
}

void *Phase::Controller::SpatialModelerInstance::IsStopped(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = (void *)(*(void *)(a1 + 6472) + 120);
  v9[0] = a2;
  v9[1] = a3;
  unint64_t result = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>(v6, v9);
  if (result)
  {
    uint64_t v8 = *(void *)(a1 + 6472);
    return (void *)Phase::Controller::SpatialSubmixRouter::IsStopped(v8, a2, a3);
  }
  return result;
}

void *Phase::Controller::SpatialModelerInstance::SetPlayState(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8 = (void *)(*(void *)(a1 + 6472) + 120);
  v10[0] = a2;
  v10[1] = a3;
  unint64_t result = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>(v8, v10);
  if (result)
  {
    Phase::Controller::SpatialSubmixRouter::SetPlayState(*(void *)(a1 + 6472), a2, a3, a4);
    unint64_t result = Phase::Controller::SubmixSlotMap<Phase::Controller::SpatialModelerInstance::SubmixInfo>::MutableAt((void *)(a1 + 8), a2, a3);
    *((unsigned char *)result + 24) = (a4 & 0xFFFFFFFD) == 1;
  }
  return result;
}

uint64_t *Phase::Controller::SubmixSlotMap<Phase::Controller::SpatialModelerInstance::SubmixInfo>::MutableAt(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  *(void *)uint64_t v10 = a2;
  *(void *)&v10[8] = a3;
  uint64_t v5 = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>(a1, v10);
  if (v5) {
    uint64_t v6 = v5[4];
  }
  else {
    uint64_t v6 = 0;
  }
  unint64_t result = _ZN5Phase7details13SharedSlotMapINS_10Controller22SpatialModelerInstance10SubmixInfoENS_8Handle64EE13GetSlotToEditIRZNS_13SharedSlotMapIS4_S5_DnE9GetUniqueES5_EUlRT_E_EEPNS_18SharedSlotMapStateIS4_S5_E4SlotES5_OSA_((uint64_t)(a1 + 5), v6);
  if (!result || (unint64_t result = (uint64_t *)*result) == 0)
  {
    uint64_t v8 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)result) + 224);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v10 = 136315906;
      *(void *)&void v10[4] = "CvmSubmixSlotMapImpl.hpp";
      *(_WORD *)&unsigned char v10[12] = 1024;
      *(_DWORD *)&v10[14] = 171;
      __int16 v11 = 2048;
      uint64_t v12 = v6;
      __int16 v13 = 2048;
      uint64_t v14 = a2;
      _os_log_impl(&dword_221E5E000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (InvalidId) [nullptr == pObject is true]: \"SubmixSlotMap::MutableAt couldn't find SubmixHandle %llu for SubmixId %llu\"", v10, 0x26u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _ZN5Phase10Controller9InvalidIdCI1St11logic_errorEPKc(exception, "SubmixSlotMap::MutableAt couldn't find SubmixHandle %llu for SubmixId %llu");
  }
  return result;
}

void sub_221EB86C8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::OptionalProperties::SetValue(void *a1, unsigned int a2, uint64_t a3, long long *a4)
{
  unint64_t v4 = a1[1];
  if (!v4) {
    goto LABEL_17;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = a2;
    if (v4 <= a2) {
      unint64_t v6 = a2 % v4;
    }
  }
  else
  {
    unint64_t v6 = (v4 - 1) & a2;
  }
  unint64_t v7 = *(uint64_t ***)(*a1 + 8 * v6);
  if (!v7 || (uint64_t v8 = *v7) == 0) {
LABEL_17:
  }
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  while (1)
  {
    unint64_t v9 = v8[1];
    if (v9 == a2) {
      break;
    }
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= v4) {
        v9 %= v4;
      }
    }
    else
    {
      v9 &= v4 - 1;
    }
    if (v9 != v6) {
      goto LABEL_17;
    }
LABEL_16:
    uint64_t v8 = (uint64_t *)*v8;
    if (!v8) {
      goto LABEL_17;
    }
  }
  if (*((_DWORD *)v8 + 4) != a2) {
    goto LABEL_16;
  }
  long long v10 = *a4;
  long long v11 = a4[2];
  *((_OWORD *)v8 + 3) = a4[1];
  *((_OWORD *)v8 + 4) = v11;
  *((_OWORD *)v8 + 2) = v10;
  return 1;
}

void std::atomic_store[abi:ne180100]<Phase::Controller::SubmixSlotMapState<Phase::Controller::SpatialModelerInstance::SubmixInfo>>(uint64_t *a1, uint64_t *a2)
{
  sp_mut = std::__get_sp_mut(a1);
  std::__sp_mut::lock(sp_mut);
  uint64_t v5 = *a1;
  *a1 = *a2;
  *a2 = v5;
  uint64_t v6 = a1[1];
  a1[1] = a2[1];
  a2[1] = v6;

  std::__sp_mut::unlock(sp_mut);
}

void Phase::Controller::SpatialModelerInstance::SubmixInfo::MakeSubmix(Phase::Controller::SpatialModelerInstance::SubmixInfo *this, uint64_t a2, uint64_t a3)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  double v4 = *(double *)(a2 + 56);
  if (v4 < *(double *)(a2 + 64)) {
    double v4 = *(double *)(a2 + 64);
  }
  *(_OWORD *)this = *(_OWORD *)a2;
  *((_OWORD *)this + 1) = 0u;
  uint64_t v5 = (float *)((char *)this + 16);
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *(_OWORD *)((char *)this + 124) = 0u;
  *((_DWORD *)this + 35) = a3;
  if (a3)
  {
    float v6 = v4;
    do
    {
      *v5++ = v6;
      --a3;
    }
    while (a3);
  }
  uint64_t v7 = 0;
  *((void *)this + 18) = *(void *)(a2 + 48);
  *((unsigned char *)this + 152) = *(unsigned char *)(a2 + 24);
  uint64_t v8 = (char *)this + 160;
  do
  {
    unint64_t v9 = (char *)this + v7;
    *((_DWORD *)v9 + 40) = 0;
    *((void *)v9 + 21) = 0;
    v7 += 16;
  }
  while (v7 != 128);
  for (unint64_t i = 1; i != 8; ++i)
  {
    int8x8_t v11 = *(int8x8_t *)(a2 + 80);
    if (!*(void *)&v11) {
      goto LABEL_25;
    }
    uint8x8_t v12 = (uint8x8_t)vcnt_s8(v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v13 = i;
      if (*(void *)&v11 <= i) {
        unint64_t v13 = i % *(void *)&v11;
      }
    }
    else
    {
      unint64_t v13 = (*(void *)&v11 + 0x7FFFFFFFLL) & i;
    }
    uint64_t v14 = *(uint64_t ***)(*(void *)(a2 + 72) + 8 * v13);
    if (!v14 || (uint64_t v15 = *v14) == 0) {
LABEL_25:
    }
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    while (1)
    {
      unint64_t v16 = v15[1];
      if (v16 == i) {
        break;
      }
      if (v12.u32[0] > 1uLL)
      {
        if (v16 >= *(void *)&v11) {
          v16 %= *(void *)&v11;
        }
      }
      else
      {
        v16 &= *(void *)&v11 - 1;
      }
      if (v16 != v13) {
        goto LABEL_25;
      }
LABEL_24:
      uint64_t v15 = (uint64_t *)*v15;
      if (!v15) {
        goto LABEL_25;
      }
    }
    if (i != *((_DWORD *)v15 + 4)) {
      goto LABEL_24;
    }
    if (*((unsigned char *)v15 + 28))
    {
      if (*((unsigned char *)v15 + 28) == 1)
      {
        if (*((_DWORD *)v15 + 18) == 1)
        {
          uint64_t v17 = v15[4];
          uint64_t v18 = &v8[16 * i];
          *(_DWORD *)uint64_t v18 = i;
          void v18[4] = 1;
          *((void *)v18 + 1) = v17;
        }
      }
      else
      {
        unsigned int v21 = **(id **)(Phase::Logger::GetInstance(this) + 224);
        this = (Phase::Controller::SpatialModelerInstance::SubmixInfo *)os_log_type_enabled(v21, OS_LOG_TYPE_ERROR);
        if (this)
        {
          int v22 = *((unsigned __int8 *)v15 + 28);
          *(_DWORD *)std::string buf = 136315650;
          uint64_t v24 = "CvmSpatialModelerOptionalProperties.hpp";
          __int16 v25 = 1024;
          int v26 = 138;
          __int16 v27 = 1024;
          int v28 = v22;
          _os_log_impl(&dword_221E5E000, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d Unhandled OptionalPropertyDescription type %hhd", buf, 0x18u);
        }
      }
    }
    else if (!*((_DWORD *)v15 + 18))
    {
      uint64_t v19 = v15[7];
      unsigned int v20 = &v8[16 * i];
      *(_DWORD *)unsigned int v20 = i;
      void v20[4] = 0;
      *((void *)v20 + 1) = v19;
    }
  }
}

void sub_221EB8C48(_Unwind_Exception *a1)
{
}

void sub_221EB8C54(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x221EB8C5CLL);
  }
  __clang_call_terminate(a1);
}

unsigned __int8 *Phase::Controller::SpatialModelerInstance::SetParameter(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  switch(*(_DWORD *)(a2 + 4))
  {
    case 0:
      uint64_t v8 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)result) + 224);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        int v14 = 136315394;
        uint64_t v15 = "CvmSpatialModelerInstance.mm";
        __int16 v16 = 1024;
        int v17 = 1114;
        _os_log_impl(&dword_221E5E000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (InvalidId): \"Invalid SpatialModeler Graph type\"", (uint8_t *)&v14, 0x12u);
      }
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      _ZN5Phase10Controller9InvalidIdCI1St11logic_errorEPKc(exception, "Invalid SpatialModeler Graph type");
    case 1:
      unsigned int v3 = result + 792;
      break;
    case 2:
      unsigned int v3 = result + 912;
      break;
    case 3:
      unsigned int v3 = result + 1032;
      break;
    default:
      unsigned int v3 = 0;
      break;
  }
  switch(*(_DWORD *)(a2 + 8))
  {
    case 0:
      long long v10 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)result) + 224);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        int v14 = 136315394;
        uint64_t v15 = "CvmSpatialModelerInstance.mm";
        __int16 v16 = 1024;
        int v17 = 1132;
        _os_log_impl(&dword_221E5E000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (InvalidId): \"Invalid SpatialModeler Stage type\"", (uint8_t *)&v14, 0x12u);
      }
      int8x8_t v11 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      _ZN5Phase10Controller9InvalidIdCI1St11logic_errorEPKc(v11, "Invalid SpatialModeler Stage type");
    case 1:
      break;
    case 2:
      v3 += 40;
      break;
    case 3:
      v3 += 80;
      break;
    default:
      unsigned int v3 = 0;
      break;
  }
  switch(*(_DWORD *)(a2 + 12))
  {
    case 0:
      uint8x8_t v12 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)result) + 224);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        int v14 = 136315394;
        uint64_t v15 = "CvmSpatialModelerInstance.mm";
        __int16 v16 = 1024;
        int v17 = 1186;
        _os_log_impl(&dword_221E5E000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (InvalidId): \"Invalid SpatialModelerParameter type\"", (uint8_t *)&v14, 0x12u);
      }
      unint64_t v13 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      _ZN5Phase10Controller9InvalidIdCI1St11logic_errorEPKc(v13, "Invalid SpatialModelerParameter type");
    case 1:
      double v4 = result + 5641;
      unsigned __int8 v5 = atomic_load(result + 5641);
      double v6 = *(double *)(a2 + 16);
      if ((v5 & 1) == 0 || v6 == *((double *)v3 + 2))
      {
        *((double *)v3 + 2) = v6;
      }
      else
      {
        unint64_t result = (unsigned __int8 *)Phase::Controller::SpatialModelerInstance::StopUpdate((Phase::Controller::SpatialModelerInstance *)result);
        *((void *)v3 + 2) = *(void *)(a2 + 16);
        atomic_store(1u, v4);
      }
      break;
    case 2:
      *(void *)unsigned int v3 = (unint64_t)*(double *)(a2 + 16);
      break;
    case 3:
      float v7 = *(double *)(a2 + 16);
      *((float *)v3 + 2) = v7;
      break;
    case 4:
      *((void *)v3 + 3) = *(void *)(a2 + 16);
      break;
    case 5:
      *((void *)v3 + 4) = *(void *)(a2 + 16);
      break;
    default:
      return result;
  }
  return result;
}

void sub_221EB8FE8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

Phase::Logger *Phase::Controller::SpatialModelerInstance::GetAvailableComputeForGraph(uint64_t a1, int *a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  int v3 = *a2;
  if (*a2 == 3) {
    goto LABEL_4;
  }
  if (v3 == 2)
  {
    atomic_load((unint64_t *)(a1 + 312));
    Phase::Controller::SpatialModelerInstance::GetParams((Phase::Logger *)a1, *(_DWORD *)(a1 + 3328), 0);
    Phase::Controller::SpatialModelerInstance::GetParams((Phase::Logger *)a1, *(_DWORD *)(a1 + 3328), 1);
    if (*(_DWORD *)(a1 + 528) == 2) {
      return Phase::Controller::SpatialModelerInstance::GetParams((Phase::Logger *)a1, *(_DWORD *)(a1 + 3328), 2);
    }
LABEL_15:
    std::terminate();
  }
  if (v3 != 1)
  {
    uint64_t v8 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance((Phase::Logger *)a1)
                                                                                       + 208)));
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      Phase::Controller::SpatialModelerInstance::GetDescription((Phase::Controller::SpatialModelerInstance *)__p, a1);
      unint64_t v9 = (void **)__p[0];
      if (v13 >= 0) {
        unint64_t v9 = __p;
      }
      int v10 = *a2;
      *(_DWORD *)std::string buf = 136315906;
      uint64_t v15 = "CvmSpatialModelerInstance.mm";
      __int16 v16 = 1024;
      int v17 = 1246;
      __int16 v18 = 2080;
      uint64_t v19 = v9;
      __int16 v20 = 1024;
      int v21 = v10;
      _os_log_impl(&dword_221E5E000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d %s: Invalid graph type %i", buf, 0x22u);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
    }

    goto LABEL_15;
  }
LABEL_4:
  uint64_t v4 = 0;
  double v5 = 0.0;
  do
  {
    unint64_t result = Phase::Controller::SpatialModelerInstance::GetParams((Phase::Logger *)a1, *(_DWORD *)(a1 + 1152), v4);
    double v7 = COERCE_DOUBLE(atomic_load((unint64_t *)(a1 + 8 * v4 + 1904)));
    double v5 = v5 + v7 * *((double *)result + 2);
    ++v4;
  }
  while (v4 != 3);
  atomic_load((unint64_t *)(a1 + 312));
  return result;
}

void sub_221EB9264(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

Phase::Logger *Phase::Controller::SpatialModelerInstance::GetParams(Phase::Logger *a1, int a2, uint64_t a3)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  switch(a2)
  {
    case 0:
      double v7 = **(id **)(Phase::Logger::GetInstance(a1) + 224);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 136315394;
        __int16 v20 = "CvmSpatialModelerInstance.mm";
        __int16 v21 = 1024;
        int v22 = 2777;
        _os_log_impl(&dword_221E5E000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (InvalidId): \"Invalid SpatialModeler Graph type\"", buf, 0x12u);
      }
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      _ZN5Phase10Controller9InvalidIdCI1St11logic_errorEPKc(exception, "Invalid SpatialModeler Graph type");
    case 1:
      unint64_t result = (Phase::Logger *)((char *)a1 + 792);
      break;
    case 2:
      unint64_t result = (Phase::Logger *)((char *)a1 + 912);
      break;
    case 3:
      unint64_t result = (Phase::Logger *)((char *)a1 + 1032);
      break;
    default:
      uint8x8_t v12 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(a1)
                                                                                          + 224)));
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        Phase::Controller::SpatialModelerInstance::GetDescription((Phase::Controller::SpatialModelerInstance *)__p, (uint64_t)a1);
        char v13 = v18 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)std::string buf = 136315906;
        __int16 v20 = "CvmSpatialModelerInstance.mm";
        __int16 v21 = 1024;
        int v22 = 2782;
        __int16 v23 = 2080;
        uint64_t v24 = v13;
        __int16 v25 = 1024;
        LODWORD(v26) = a2;
        _os_log_impl(&dword_221E5E000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [nullptr == pStage is true]: \"%s: SpatialModeler Graph stage not found for graph %i\"", buf, 0x22u);
        if (v18 < 0) {
          operator delete(__p[0]);
        }
      }

      int v14 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v14, "%s: SpatialModeler Graph stage not found for graph %i");
  }
  switch(a3)
  {
    case -1:
    case 3:
      double v5 = **(id **)(Phase::Logger::GetInstance(result) + 224);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 136315394;
        __int16 v20 = "CvmSpatialModelerInstance.mm";
        __int16 v21 = 1024;
        int v22 = 2799;
        _os_log_impl(&dword_221E5E000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (InvalidId): \"Invalid SpatialModeler Stage type\"", buf, 0x12u);
      }
      double v6 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      _ZN5Phase10Controller9InvalidIdCI1St11logic_errorEPKc(v6, "Invalid SpatialModeler Stage type");
    case 0:
      return result;
    case 1:
      unint64_t result = (Phase::Logger *)((char *)result + 40);
      break;
    case 2:
      unint64_t result = (Phase::Logger *)((char *)result + 80);
      break;
    default:
      unint64_t v9 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(result)
                                                                                         + 224)));
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        Phase::Controller::SpatialModelerInstance::GetDescription((Phase::Controller::SpatialModelerInstance *)__p, (uint64_t)a1);
        int v10 = v18 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)std::string buf = 136315906;
        __int16 v20 = "CvmSpatialModelerInstance.mm";
        __int16 v21 = 1024;
        int v22 = 2804;
        __int16 v23 = 2080;
        uint64_t v24 = v10;
        __int16 v25 = 2048;
        uint64_t v26 = a3;
        _os_log_impl(&dword_221E5E000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [nullptr == pParams is true]: \"%s: SpatialModeler parameters not found for stage %zu\"", buf, 0x26u);
        if (v18 < 0) {
          operator delete(__p[0]);
        }
      }

      int8x8_t v11 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v11, "%s: SpatialModeler parameters not found for stage %zu");
  }
  return result;
}

void sub_221EB96A4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

Phase::Logger *Phase::Controller::SpatialQueryInstance::GetOutputAs<Phase::SpatialModeler::CullabilityOutput<float>>(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t result = *(Phase::Logger **)(a1 + 120);
  if (!result || *(_DWORD *)result != 1)
  {
    uint64_t v3 = a1;
    uint64_t v4 = **(id **)(Phase::Logger::GetInstance(result) + 384);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v5 = **(_DWORD **)(v3 + 120);
      int v7 = 136315906;
      uint64_t v8 = "CvmSpatialQueryInstance.hpp";
      __int16 v9 = 1024;
      int v10 = 121;
      __int16 v11 = 1024;
      int v12 = 1;
      __int16 v13 = 1024;
      int v14 = v5;
      _os_log_impl(&dword_221E5E000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [nullptr == pOutput is true]: \"Bad spatial query output cast: expected type: %i, actual type: %i\"", (uint8_t *)&v7, 0x1Eu);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Bad spatial query output cast: expected type: %i, actual type: %i");
  }
  return result;
}

void sub_221EB9838(_Unwind_Exception *exception_object)
{
}

Phase::Logger *Phase::Controller::SpatialQueryInstance::GetInputAs<Phase::SpatialModeler::SubmixListenerInput<float>>(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t result = *(Phase::Logger **)(a1 + 112);
  if (!result || *(_DWORD *)result != 1)
  {
    uint64_t v3 = a1;
    uint64_t v4 = **(id **)(Phase::Logger::GetInstance(result) + 384);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v5 = **(_DWORD **)(v3 + 112);
      int v7 = 136315906;
      uint64_t v8 = "CvmSpatialQueryInstance.hpp";
      __int16 v9 = 1024;
      int v10 = 98;
      __int16 v11 = 1024;
      int v12 = 1;
      __int16 v13 = 1024;
      int v14 = v5;
      _os_log_impl(&dword_221E5E000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [nullptr == pInput is true]: \"Bad spatial query input cast: expected type: %i, actual type: %i\"", (uint8_t *)&v7, 0x1Eu);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Bad spatial query input cast: expected type: %i, actual type: %i");
  }
  return result;
}

void sub_221EB9984(_Unwind_Exception *exception_object)
{
}

void sGenerateSpatialModelerInfoString(uint64_t a1, uint64_t a2)
{
  GetSpatialCategoryString(*(_DWORD *)(a2 + 40));
  id v3 = objc_claimAutoreleasedReturnValue();
  std::string::basic_string[abi:ne180100](__dst, (void *)[v3 UTF8String], objc_msgSend(v3, "lengthOfBytesUsingEncoding:", 4));
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v12);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"spatial category: ", 18);
  if ((v17 & 0x80u) == 0) {
    int v5 = __dst;
  }
  else {
    int v5 = (void **)__dst[0];
  }
  if ((v17 & 0x80u) == 0) {
    uint64_t v6 = v17;
  }
  else {
    uint64_t v6 = (uint64_t)__dst[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v5, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", ", 2);
  int v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"spatial modeler: ", 17);
  int v8 = *(char *)(a2 + 23);
  if (v8 >= 0) {
    uint64_t v9 = a2;
  }
  else {
    uint64_t v9 = *(void *)a2;
  }
  if (v8 >= 0) {
    uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v10 = *(void *)(a2 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
  std::stringbuf::str();
  v12[0] = *MEMORY[0x263F8C2B8];
  uint64_t v11 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v12 + *(void *)(v12[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v13[0] = v11;
  v13[1] = MEMORY[0x263F8C318] + 16;
  if (v14 < 0) {
    operator delete((void *)v13[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x223C937D0](&v15);
  if ((char)v17 < 0) {
    operator delete(__dst[0]);
  }
}

void sub_221EB9BCC(_Unwind_Exception *a1)
{
  if (*(char *)(v2 - 49) < 0) {
    operator delete(*(void **)(v2 - 72));
  }

  _Unwind_Resume(a1);
}

uint64_t sGenerateSubmixListenerInputString()
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"type: SubmixListenerInput", 25);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"submix: ", 8);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", ", 2);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"listener: ", 10);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"0x", 2);
  *(_DWORD *)((char *)v1 + *(void *)(*v1 - 24) + 8) |= 0x4000u;
  uint64_t v2 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v1, 48);
  uint64_t v3 = *v2;
  *(uint64_t *)((char *)v2 + *(void *)(*v2 - 24) + 24) = 8;
  *(_DWORD *)((char *)v2 + *(void *)(v3 - 24) + 8) = *(_DWORD *)((unsigned char *)v2 + *(void *)(v3 - 24) + 8) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", ", 2);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"source: ", 8);
  int v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"0x", 2);
  *(_DWORD *)((char *)v5 + *(void *)(*v5 - 24) + 8) |= 0x4000u;
  uint64_t v6 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, 48);
  uint64_t v7 = *v6;
  *(uint64_t *)((char *)v6 + *(void *)(*v6 - 24) + 24) = 8;
  *(_DWORD *)((char *)v6 + *(void *)(v7 - 24) + 8) = *(_DWORD *)((unsigned char *)v6 + *(void *)(v7 - 24) + 8) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<();
  std::stringbuf::str();
  v10[0] = *MEMORY[0x263F8C2B8];
  uint64_t v8 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v10 + *(void *)(v10[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v11[0] = v8;
  v11[1] = MEMORY[0x263F8C318] + 16;
  if (v12 < 0) {
    operator delete((void *)v11[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x223C937D0](&v13);
}

void sub_221EB9F58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sGenerateCullabilityOutputString()
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"type: CullabilityOutput", 23);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"cullability: ", 13);
  std::ostream::operator<<();
  std::stringbuf::str();
  v2[0] = *MEMORY[0x263F8C2B8];
  uint64_t v0 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v2 + *(void *)(v2[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v3[0] = v0;
  v3[1] = MEMORY[0x263F8C318] + 16;
  if (v4 < 0) {
    operator delete((void *)v3[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x223C937D0](&v5);
}

void sub_221EBA128(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sGenerateErrorCodeString(const std::error_code *a1, const std::error_code *a2)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"error code: ", 12);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)", ", 2);
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"error message: ", 15);
  std::error_code::message(&__p, a2);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::stringbuf::str();
  v9[0] = *MEMORY[0x263F8C2B8];
  uint64_t v6 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v9 + *(void *)(v9[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v10[0] = v6;
  v10[1] = MEMORY[0x263F8C318] + 16;
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x223C937D0](&v12);
}

void sub_221EBA32C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

Phase::Logger *Phase::Controller::SpatialQueryInstance::GetInputAs<Phase::SpatialModeler::ClusterSetInput<float>>(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t result = *(Phase::Logger **)(a1 + 112);
  if (!result || *(_DWORD *)result != 3)
  {
    uint64_t v3 = a1;
    char v4 = **(id **)(Phase::Logger::GetInstance(result) + 384);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v5 = **(_DWORD **)(v3 + 112);
      int v7 = 136315906;
      uint64_t v8 = "CvmSpatialQueryInstance.hpp";
      __int16 v9 = 1024;
      int v10 = 98;
      __int16 v11 = 1024;
      int v12 = 3;
      __int16 v13 = 1024;
      int v14 = v5;
      _os_log_impl(&dword_221E5E000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [nullptr == pInput is true]: \"Bad spatial query input cast: expected type: %i, actual type: %i\"", (uint8_t *)&v7, 0x1Eu);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Bad spatial query input cast: expected type: %i, actual type: %i");
  }
  return result;
}

void sub_221EBA48C(_Unwind_Exception *exception_object)
{
}

void std::vector<Phase::UniqueObjectId>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 16 * a2;
    }
  }
  else
  {
    std::vector<Phase::UniqueObjectId>::__append((void **)a1, a2 - v2);
  }
}

uint64_t sGenerateClusterSetInputStrings(uint64_t a1, uint64_t a2)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v71);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"type: ClusterSetInput", 21);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)", ", 2);
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"listener: ", 10);
  char v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"0x", 2);
  *(_DWORD *)((char *)v4 + *(void *)(*v4 - 24) + 8) |= 0x4000u;
  int v5 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, 48);
  uint64_t v6 = *v5;
  *(uint64_t *)((char *)v5 + *(void *)(*v5 - 24) + 24) = 8;
  *(_DWORD *)((char *)v5 + *(void *)(v6 - 24) + 8) = *(_DWORD *)((unsigned char *)v5 + *(void *)(v6 - 24) + 8) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<();
  unint64_t v7 = 0;
  memset(&v70, 0, sizeof(v70));
  unint64_t v8 = *(void *)(a2 + 144);
  unint64_t v59 = v8 / 0xA;
  uint64_t v9 = MEMORY[0x263F8C2B8];
  unint64_t v55 = v8;
  if (v8 >= 0xA)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v57 = *(void **)(MEMORY[0x263F8C2B8] + 64);
    long long v58 = (void *)*MEMORY[0x263F8C2B8];
    uint64_t v56 = *(void *)(MEMORY[0x263F8C2B8] + 72);
    do
    {
      uint64_t v60 = v11;
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v64);
      uint64_t v13 = 0;
      uint64_t v61 = v10;
      unint64_t v14 = v12 + 9;
      uint64_t v15 = v64[0];
      do
      {
        int v16 = *(_DWORD *)((char *)&v64[1] + *(v15 - 3));
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v65, (uint64_t)"{", 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v65, (uint64_t)"index: ", 7);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v65, (uint64_t)", ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v65, (uint64_t)"submix: ", 8);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v65, (uint64_t)", ", 2);
        unsigned __int8 v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v65, (uint64_t)"source: ", 8);
        char v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"0x", 2);
        *(_DWORD *)((char *)v18 + *(void *)(*v18 - 24) + 8) |= 0x4000u;
        uint64_t v19 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v18, 48);
        uint64_t v20 = *v19;
        *(uint64_t *)((char *)v19 + *(void *)(*v19 - 24) + 24) = 8;
        *(_DWORD *)((char *)v19 + *(void *)(v20 - 24) + 8) = *(_DWORD *)((unsigned char *)v19 + *(void *)(v20 - 24) + 8) & 0xFFFFFFB5 | 8;
        std::ostream::operator<<();
        if (v12 + v13 >= v14) {
          __int16 v21 = "}";
        }
        else {
          __int16 v21 = "}, ";
        }
        if (v12 + v13 >= v14) {
          uint64_t v22 = 1;
        }
        else {
          uint64_t v22 = 3;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v65, (uint64_t)v21, v22);
        uint64_t v15 = v64[0];
        *(_DWORD *)((char *)&v64[1] + *((void *)v64[0] - 3)) = v16;
        ++v13;
        v10 += 304;
      }
      while (v13 != 10);
      std::stringbuf::str();
      std::vector<std::string>::pointer end = v70.__end_;
      uint64_t v9 = MEMORY[0x263F8C2B8];
      unint64_t v7 = v12 + 10;
      if (v70.__end_ >= v70.__end_cap_.__value_)
      {
        unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * (((char *)v70.__end_ - (char *)v70.__begin_) >> 3);
        unint64_t v27 = v26 + 1;
        if (v26 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<char>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * (((char *)v70.__end_cap_.__value_ - (char *)v70.__begin_) >> 3) > v27) {
          unint64_t v27 = 0x5555555555555556 * (((char *)v70.__end_cap_.__value_ - (char *)v70.__begin_) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v70.__end_cap_.__value_ - (char *)v70.__begin_) >> 3) >= 0x555555555555555) {
          unint64_t v28 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v28 = v27;
        }
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v70.__end_cap_;
        uint64_t v25 = v61;
        if (v28) {
          uint64_t v29 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v70.__end_cap_, v28);
        }
        else {
          uint64_t v29 = 0;
        }
        uint64_t v30 = v29 + v26;
        __v.__first_ = v29;
        __v.__begin_ = v30;
        __v.__end_cap_.__value_ = &v29[v28];
        v30->__r_.__value_.__r.__words[2] = v63;
        *(_OWORD *)&v30->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
        std::string::size_type v63 = 0;
        *(_OWORD *)std::string __p = 0uLL;
        __v.__end_ = v30 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(&v70, &__v);
        uint64_t v31 = v70.__end_;
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        v70.__end_ = v31;
        uint64_t v24 = v60;
      }
      else
      {
        v70.__end_->__r_.__value_.__r.__words[2] = v63;
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
        v70.__end_ = end + 1;
        uint64_t v24 = v60;
        uint64_t v25 = v61;
      }
      v64[0] = v58;
      *(void **)((char *)v64 + *((void *)v58 - 3)) = v57;
      uint64_t v65 = v56;
      uint64_t v66 = MEMORY[0x263F8C318] + 16;
      if (v68 < 0) {
        operator delete(v67);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x223C937D0](v69);
      uint64_t v11 = v24 + 1;
      uint64_t v10 = v25 + 3040;
      v12 += 10;
    }
    while (v11 != v59);
  }
  unint64_t v32 = v55 - 10 * v59;
  if (v32)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v64);
    if (v7 < v7 + v32)
    {
      unint64_t v33 = v7;
      unint64_t v34 = v7 + v32 - 1;
      long long v35 = v64[0];
      uint64_t v36 = 304 * v7;
      do
      {
        int v37 = *(_DWORD *)((char *)&v64[1] + *(v35 - 3));
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v65, (uint64_t)"{", 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v65, (uint64_t)"index: ", 7);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v65, (uint64_t)", ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v65, (uint64_t)"submix: ", 8);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v65, (uint64_t)", ", 2);
        uint8x8_t v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v65, (uint64_t)"source: ", 8);
        unint64_t v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"0x", 2);
        *(_DWORD *)((char *)v39 + *(void *)(*v39 - 24) + 8) |= 0x4000u;
        __int16 v40 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v39, 48);
        uint64_t v41 = *v40;
        *(uint64_t *)((char *)v40 + *(void *)(*v40 - 24) + 24) = 8;
        *(_DWORD *)((char *)v40 + *(void *)(v41 - 24) + 8) = *(_DWORD *)((unsigned char *)v40 + *(void *)(v41 - 24) + 8) & 0xFFFFFFB5 | 8;
        std::ostream::operator<<();
        if (v33 >= v34) {
          long long v42 = "}";
        }
        else {
          long long v42 = "}, ";
        }
        if (v33 >= v34) {
          uint64_t v43 = 1;
        }
        else {
          uint64_t v43 = 3;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v65, (uint64_t)v42, v43);
        long long v35 = v64[0];
        *(_DWORD *)((char *)&v64[1] + *((void *)v64[0] - 3)) = v37;
        ++v33;
        v36 += 304;
        --v32;
      }
      while (v32);
    }
    std::stringbuf::str();
    std::vector<std::string>::pointer v44 = v70.__end_;
    uint64_t v9 = MEMORY[0x263F8C2B8];
    if (v70.__end_ >= v70.__end_cap_.__value_)
    {
      unint64_t v45 = 0xAAAAAAAAAAAAAAABLL * (((char *)v70.__end_ - (char *)v70.__begin_) >> 3);
      unint64_t v46 = v45 + 1;
      if (v45 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<char>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * (((char *)v70.__end_cap_.__value_ - (char *)v70.__begin_) >> 3) > v46) {
        unint64_t v46 = 0x5555555555555556 * (((char *)v70.__end_cap_.__value_ - (char *)v70.__begin_) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v70.__end_cap_.__value_ - (char *)v70.__begin_) >> 3) >= 0x555555555555555) {
        unint64_t v47 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v47 = v46;
      }
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v70.__end_cap_;
      if (v47) {
        uint64_t v48 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v70.__end_cap_, v47);
      }
      else {
        uint64_t v48 = 0;
      }
      uint64_t v49 = v48 + v45;
      __v.__first_ = v48;
      __v.__begin_ = v49;
      __v.__end_cap_.__value_ = &v48[v47];
      v49->__r_.__value_.__r.__words[2] = v63;
      *(_OWORD *)&v49->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      __v.__end_ = v49 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v70, &__v);
      uint64_t v50 = v70.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      v70.__end_ = v50;
    }
    else
    {
      v70.__end_->__r_.__value_.__r.__words[2] = v63;
      *(_OWORD *)&v44->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      v70.__end_ = v44 + 1;
    }
    v64[0] = *(void **)v9;
    uint64_t v51 = *(void *)(v9 + 72);
    *(void **)((char *)v64 + *((void *)v64[0] - 3)) = *(void **)(v9 + 64);
    uint64_t v65 = v51;
    uint64_t v66 = MEMORY[0x263F8C318] + 16;
    if (v68 < 0) {
      operator delete(v67);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x223C937D0](v69);
  }
  std::stringbuf::str();
  std::pair<std::string,std::vector<std::string>>::pair[abi:ne180100]<std::string,std::vector<std::string>&,0>(a1, (long long *)v64, (long long **)&v70);
  if (SHIBYTE(v65) < 0) {
    operator delete(v64[0]);
  }
  v64[0] = &v70;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v64);
  v71[0] = *(void *)v9;
  uint64_t v52 = *(void *)(v9 + 72);
  *(void *)((char *)v71 + *(void *)(v71[0] - 24)) = *(void *)(v9 + 64);
  v72[0] = v52;
  v72[1] = MEMORY[0x263F8C318] + 16;
  if (v73 < 0) {
    operator delete((void *)v72[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x223C937D0](&v74);
}

void sub_221EBB014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)(v67 - 128));
  if (a28 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a29);
  a29 = &a64;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a67);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string,std::vector<std::string>>::~pair(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void Phase::Controller::SpatialModelerInstance::FinishClusterQuery(Phase::Controller::SpatialModelerInstance *this, Phase::Controller::SpatialQueryInstance *a2, Phase::SpatialModeler::PriorityQueue *a3, Phase::Controller::SpatialModelerInstance::GraphData *a4)
{
  uint64_t v188 = *MEMORY[0x263EF8340];
  char v4 = (char *)a3 + 816;
  uint64_t v161 = (Phase::SpatialModeler::PriorityQueue *)((char *)a3 + 1024);
  unsigned int v5 = atomic_load((unsigned int *)a3 + 204);
  if (v5 == 5)
  {
    uint64_t v74 = Phase::Controller::SpatialQueryInstance::GetInputAs<Phase::SpatialModeler::ClusterSetInput<float>>((uint64_t)a3 + 816);
    unint64_t v75 = Phase::Controller::SpatialQueryInstance::GetOutputAs<Phase::SpatialModeler::ClusterSetOutput<float>>((uint64_t)v4);
    sGenerateClusterSetInputStrings((uint64_t)v173, (uint64_t)v74);
    ClusterSetOutputStrings = (Phase::Logger *)sGenerateClusterSetOutputStrings((uint64_t)v169, v75);
    __int16 v77 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(ClusterSetOutputStrings)
                                                                                        + 224)));
    if (os_log_type_enabled(v77, OS_LOG_TYPE_ERROR))
    {
      sGenerateSpatialModelerInfoString((uint64_t)__p, *((void *)this + 733));
      int v78 = v168;
      unint64_t v79 = (void **)__p[0];
      int v80 = v174;
      float v81 = (void **)v173[0];
      unint64_t v160 = *((void *)v74 + 18);
      int v82 = v170;
      uint64_t v83 = (void **)v169[0];
      uint64_t v84 = *((void *)v75 + 18);
      std::error_code v164 = (std::error_code)*((_OWORD *)a3 + 54);
      sGenerateErrorCodeString(&v165, &v164);
      *(void *)&uint8_t buf[4] = "CvmSpatialModelerInstance.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      size_t v85 = v169;
      if (v82 < 0) {
        size_t v85 = v83;
      }
      *(_DWORD *)&buf[14] = 2059;
      unint64_t v86 = v173;
      if (v80 < 0) {
        unint64_t v86 = v81;
      }
      size_t v87 = __p;
      *(_DWORD *)std::string buf = 136316930;
      if (v78 < 0) {
        size_t v87 = v79;
      }
      *(_WORD *)&unsigned char buf[18] = 2080;
      if (v166 >= 0) {
        uint8x8_t v88 = &v165;
      }
      else {
        uint8x8_t v88 = *(std::error_code **)&v165.__val_;
      }
      *(void *)&buf[20] = v87;
      *(_WORD *)&unsigned char buf[28] = 2080;
      *(void *)&buf[30] = v86;
      __int16 v178 = 2048;
      unint64_t v179 = v160;
      __int16 v180 = 2080;
      uint64_t v181 = v85;
      __int16 v182 = 2048;
      uint64_t v183 = v84;
      __int16 v184 = 2080;
      int v185 = v88;
      _os_log_impl(&dword_221E5E000, v77, OS_LOG_TYPE_ERROR, "%25s:%-5d (%s) - cluster query cancelled (%s, submix count: %zu, ...) (%s, submix count: %zu, ...) (%s)", buf, 0x4Eu);
      if (v166 < 0) {
        operator delete(*(void **)&v165.__val_);
      }
      if (v168 < 0) {
        operator delete(__p[0]);
      }
    }

    if (v176 != v175)
    {
      unint64_t v90 = 0;
      do
      {
        unint64_t v91 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v89)
                                                                                            + 224)));
        if (os_log_type_enabled(v91, OS_LOG_TYPE_ERROR))
        {
          sGenerateSpatialModelerInfoString((uint64_t)__p, *((void *)this + 733));
          uint64_t v92 = (void **)__p[0];
          if (v168 >= 0) {
            uint64_t v92 = __p;
          }
          double v93 = (void **)(v175 + 24 * v90);
          if (*((char *)v93 + 23) < 0) {
            double v93 = (void **)*v93;
          }
          ++v90;
          *(_DWORD *)std::string buf = 136316418;
          *(void *)&uint8_t buf[4] = "CvmSpatialModelerInstance.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2064;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = v92;
          *(_WORD *)&unsigned char buf[28] = 2048;
          *(void *)&buf[30] = v90;
          __int16 v178 = 2048;
          unint64_t v179 = 0xAAAAAAAAAAAAAAABLL * ((v176 - v175) >> 3);
          __int16 v180 = 2080;
          uint64_t v181 = v93;
          _os_log_impl(&dword_221E5E000, v91, OS_LOG_TYPE_ERROR, "%25s:%-5d %s - followup ClusterSetInput log %zu of %zu (%s)", buf, 0x3Au);
          if (v168 < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          ++v90;
        }
      }
      while (v90 < 0xAAAAAAAAAAAAAAABLL * ((v176 - v175) >> 3));
    }
    if (v172 != v171)
    {
      unint64_t v94 = 0;
      do
      {
        uint64_t v95 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v89)
                                                                                            + 224)));
        if (os_log_type_enabled(v95, OS_LOG_TYPE_ERROR))
        {
          sGenerateSpatialModelerInfoString((uint64_t)__p, *((void *)this + 733));
          long long v96 = (void **)__p[0];
          if (v168 >= 0) {
            long long v96 = __p;
          }
          long long v97 = (void **)(v171 + 24 * v94);
          if (*((char *)v97 + 23) < 0) {
            long long v97 = (void **)*v97;
          }
          ++v94;
          *(_DWORD *)std::string buf = 136316418;
          *(void *)&uint8_t buf[4] = "CvmSpatialModelerInstance.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2070;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = v96;
          *(_WORD *)&unsigned char buf[28] = 2048;
          *(void *)&buf[30] = v94;
          __int16 v178 = 2048;
          unint64_t v179 = 0xAAAAAAAAAAAAAAABLL * ((v172 - v171) >> 3);
          __int16 v180 = 2080;
          uint64_t v181 = v97;
          _os_log_impl(&dword_221E5E000, v95, OS_LOG_TYPE_ERROR, "%25s:%-5d %s - followup ClusterSetOutput log %zu of %zu (%s)", buf, 0x3Au);
          if (v168 < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          ++v94;
        }
      }
      while (v94 < 0xAAAAAAAAAAAAAAABLL * ((v172 - v171) >> 3));
    }
    goto LABEL_153;
  }
  if (v5 == 4)
  {
    uint64_t v50 = Phase::Controller::SpatialQueryInstance::GetInputAs<Phase::SpatialModeler::ClusterSetInput<float>>((uint64_t)a3 + 816);
    uint64_t v51 = Phase::Controller::SpatialQueryInstance::GetOutputAs<Phase::SpatialModeler::ClusterSetOutput<float>>((uint64_t)v4);
    sGenerateClusterSetInputStrings((uint64_t)v173, (uint64_t)v50);
    uint64_t v52 = (Phase::Logger *)sGenerateClusterSetOutputStrings((uint64_t)v169, v51);
    uint8x8_t v53 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v52)
                                                                                        + 224)));
    if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
    {
      sGenerateSpatialModelerInfoString((uint64_t)__p, *((void *)this + 733));
      int v54 = v168;
      unint64_t v55 = (void **)__p[0];
      int v56 = v174;
      uint64_t v57 = (void **)v173[0];
      unint64_t v159 = *((void *)v50 + 18);
      int v58 = v170;
      unint64_t v59 = (void **)v169[0];
      uint64_t v60 = *((void *)v51 + 18);
      std::error_code v164 = (std::error_code)*((_OWORD *)a3 + 54);
      sGenerateErrorCodeString(&v165, &v164);
      *(void *)&uint8_t buf[4] = "CvmSpatialModelerInstance.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      uint64_t v61 = v169;
      if (v58 < 0) {
        uint64_t v61 = v59;
      }
      *(_DWORD *)&buf[14] = 2029;
      unint64_t v62 = v173;
      if (v56 < 0) {
        unint64_t v62 = v57;
      }
      std::string::size_type v63 = __p;
      *(_DWORD *)std::string buf = 136316930;
      if (v54 < 0) {
        std::string::size_type v63 = v55;
      }
      *(_WORD *)&unsigned char buf[18] = 2080;
      if (v166 >= 0) {
        size_t v64 = &v165;
      }
      else {
        size_t v64 = *(std::error_code **)&v165.__val_;
      }
      *(void *)&buf[20] = v63;
      *(_WORD *)&unsigned char buf[28] = 2080;
      *(void *)&buf[30] = v62;
      __int16 v178 = 2048;
      unint64_t v179 = v159;
      __int16 v180 = 2080;
      uint64_t v181 = v61;
      __int16 v182 = 2048;
      uint64_t v183 = v60;
      __int16 v184 = 2080;
      int v185 = v64;
      _os_log_impl(&dword_221E5E000, v53, OS_LOG_TYPE_ERROR, "%25s:%-5d (%s) - cluster query failed (%s, submix count: %zu, ...) (%s, submix count: %zu, ...) (%s)", buf, 0x4Eu);
      if (v166 < 0) {
        operator delete(*(void **)&v165.__val_);
      }
      if (v168 < 0) {
        operator delete(__p[0]);
      }
    }

    if (v176 != v175)
    {
      unint64_t v66 = 0;
      do
      {
        uint64_t v67 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v65)
                                                                                            + 224)));
        if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
        {
          sGenerateSpatialModelerInfoString((uint64_t)__p, *((void *)this + 733));
          char v68 = (void **)__p[0];
          if (v168 >= 0) {
            char v68 = __p;
          }
          double v69 = (void **)(v175 + 24 * v66);
          if (*((char *)v69 + 23) < 0) {
            double v69 = (void **)*v69;
          }
          ++v66;
          *(_DWORD *)std::string buf = 136316418;
          *(void *)&uint8_t buf[4] = "CvmSpatialModelerInstance.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2034;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = v68;
          *(_WORD *)&unsigned char buf[28] = 2048;
          *(void *)&buf[30] = v66;
          __int16 v178 = 2048;
          unint64_t v179 = 0xAAAAAAAAAAAAAAABLL * ((v176 - v175) >> 3);
          __int16 v180 = 2080;
          uint64_t v181 = v69;
          _os_log_impl(&dword_221E5E000, v67, OS_LOG_TYPE_ERROR, "%25s:%-5d %s - followup ClusterSetInput log %zu of %zu (%s)", buf, 0x3Au);
          if (v168 < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          ++v66;
        }
      }
      while (v66 < 0xAAAAAAAAAAAAAAABLL * ((v176 - v175) >> 3));
    }
    if (v172 != v171)
    {
      unint64_t v70 = 0;
      do
      {
        double v71 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v65)
                                                                                            + 224)));
        if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
        {
          sGenerateSpatialModelerInfoString((uint64_t)__p, *((void *)this + 733));
          long long v72 = (void **)__p[0];
          if (v168 >= 0) {
            long long v72 = __p;
          }
          char v73 = (void **)(v171 + 24 * v70);
          if (*((char *)v73 + 23) < 0) {
            char v73 = (void **)*v73;
          }
          ++v70;
          *(_DWORD *)std::string buf = 136316418;
          *(void *)&uint8_t buf[4] = "CvmSpatialModelerInstance.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2040;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = v72;
          *(_WORD *)&unsigned char buf[28] = 2048;
          *(void *)&buf[30] = v70;
          __int16 v178 = 2048;
          unint64_t v179 = 0xAAAAAAAAAAAAAAABLL * ((v172 - v171) >> 3);
          __int16 v180 = 2080;
          uint64_t v181 = v73;
          _os_log_impl(&dword_221E5E000, v71, OS_LOG_TYPE_ERROR, "%25s:%-5d %s - followup ClusterSetOutput log %zu of %zu (%s)", buf, 0x3Au);
          if (v168 < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          ++v70;
        }
      }
      while (v70 < 0xAAAAAAAAAAAAAAABLL * ((v172 - v171) >> 3));
    }
LABEL_153:
    *(void *)std::string buf = &v171;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    if (v170 < 0) {
      operator delete(v169[0]);
    }
    *(void *)std::string buf = &v175;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    if (v174 < 0) {
      operator delete(v173[0]);
    }
    goto LABEL_268;
  }
  unsigned int v6 = v5 - 3;
  if (!v6)
  {
    *(void *)&v165.__val_ = 0;
    unint64_t v8 = Phase::Controller::SpatialQueryInstance::GetOutputAs<Phase::SpatialModeler::ClusterSetOutput<float>>((uint64_t)a3 + 816);
    uint64_t v9 = Phase::Controller::SpatialQueryInstance::GetInputAs<Phase::SpatialModeler::ClusterSetInput<float>>((uint64_t)v4);
    uint64_t v10 = v9;
    uint64_t v11 = *((void *)a3 + 121);
    uint64_t v12 = *((void *)a3 + 120);
    if (*((void *)v8 + 18) == (v11 - v12) >> 4)
    {
      if (*((void *)v8 + 1) && (unint64_t v13 = *((void *)v8 + 6)) != 0)
      {
        if (*((void *)v8 + 7) && *((void *)v8 + 12))
        {
          unint64_t v158 = (unint64_t)*((double *)v9 + 5);
          if (v13 > v158)
          {
            sGenerateClusterSetInputStrings((uint64_t)v173, (uint64_t)v9);
            unint64_t v14 = (Phase::Logger *)sGenerateClusterSetOutputStrings((uint64_t)v169, v8);
            uint64_t v15 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v14)
                                                                                                + 224)));
            if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
            {
              sGenerateSpatialModelerInfoString((uint64_t)__p, *((void *)this + 733));
              if (v168 >= 0) {
                int v16 = __p;
              }
              else {
                int v16 = (void **)__p[0];
              }
              unsigned __int8 v17 = v173;
              if (v174 < 0) {
                unsigned __int8 v17 = (void **)v173[0];
              }
              unint64_t v18 = *((void *)v10 + 18);
              uint64_t v19 = v169;
              if (v170 < 0) {
                uint64_t v19 = (void **)v169[0];
              }
              uint64_t v20 = *((void *)v8 + 18);
              *(_DWORD *)std::string buf = 136317186;
              *(void *)&uint8_t buf[4] = "CvmSpatialModelerInstance.mm";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1873;
              *(_WORD *)&unsigned char buf[18] = 2080;
              *(void *)&buf[20] = v16;
              *(_WORD *)&unsigned char buf[28] = 2080;
              *(void *)&buf[30] = v17;
              __int16 v178 = 2048;
              unint64_t v179 = v18;
              __int16 v180 = 2080;
              uint64_t v181 = v19;
              __int16 v182 = 2048;
              uint64_t v183 = v20;
              __int16 v184 = 2048;
              int v185 = (std::error_code *)v13;
              __int16 v186 = 2048;
              unint64_t v187 = v158;
              _os_log_impl(&dword_221E5E000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d (%s) - cluster query returned more render groups than the input maximum cluster count. pruning excess clusters. this may sound incorrect. (%s, submix count: %zu, ...) (%s, submix count: %zu, ...) (render group count: %zu, maximum cluster count: %zu)", buf, 0x58u);
              if (v168 < 0) {
                operator delete(__p[0]);
              }
            }

            if (v176 != v175)
            {
              unint64_t v22 = 0;
              do
              {
                __int16 v23 = **(id **)(Phase::Logger::GetInstance(v21) + 224);
                if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
                {
                  sGenerateSpatialModelerInfoString((uint64_t)__p, *((void *)this + 733));
                  uint64_t v24 = (void **)__p[0];
                  if (v168 >= 0) {
                    uint64_t v24 = __p;
                  }
                  uint64_t v25 = (void **)(v175 + 24 * v22);
                  if (*((char *)v25 + 23) < 0) {
                    uint64_t v25 = (void **)*v25;
                  }
                  ++v22;
                  *(_DWORD *)std::string buf = 136316418;
                  *(void *)&uint8_t buf[4] = "CvmSpatialModelerInstance.mm";
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 1878;
                  *(_WORD *)&unsigned char buf[18] = 2080;
                  *(void *)&buf[20] = v24;
                  *(_WORD *)&unsigned char buf[28] = 2048;
                  *(void *)&buf[30] = v22;
                  __int16 v178 = 2048;
                  unint64_t v179 = 0xAAAAAAAAAAAAAAABLL * ((v176 - v175) >> 3);
                  __int16 v180 = 2080;
                  uint64_t v181 = v25;
                  _os_log_impl(&dword_221E5E000, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d %s - followup ClusterSetInput log %zu of %zu (%s)", buf, 0x3Au);
                  if (v168 < 0) {
                    operator delete(__p[0]);
                  }
                }
                else
                {
                  ++v22;
                }
              }
              while (v22 < 0xAAAAAAAAAAAAAAABLL * ((v176 - v175) >> 3));
            }
            if (v172 != v171)
            {
              unint64_t v26 = 0;
              do
              {
                unint64_t v27 = **(id **)(Phase::Logger::GetInstance(v21) + 224);
                if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
                {
                  sGenerateSpatialModelerInfoString((uint64_t)__p, *((void *)this + 733));
                  unint64_t v28 = (void **)__p[0];
                  if (v168 >= 0) {
                    unint64_t v28 = __p;
                  }
                  uint64_t v29 = (void **)(v171 + 24 * v26);
                  if (*((char *)v29 + 23) < 0) {
                    uint64_t v29 = (void **)*v29;
                  }
                  ++v26;
                  *(_DWORD *)std::string buf = 136316418;
                  *(void *)&uint8_t buf[4] = "CvmSpatialModelerInstance.mm";
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 1884;
                  *(_WORD *)&unsigned char buf[18] = 2080;
                  *(void *)&buf[20] = v28;
                  *(_WORD *)&unsigned char buf[28] = 2048;
                  *(void *)&buf[30] = v26;
                  __int16 v178 = 2048;
                  unint64_t v179 = 0xAAAAAAAAAAAAAAABLL * ((v172 - v171) >> 3);
                  __int16 v180 = 2080;
                  uint64_t v181 = v29;
                  _os_log_impl(&dword_221E5E000, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d %s - followup ClusterSetOutput log %zu of %zu (%s)", buf, 0x3Au);
                  if (v168 < 0) {
                    operator delete(__p[0]);
                  }
                }
                else
                {
                  ++v26;
                }
              }
              while (v26 < 0xAAAAAAAAAAAAAAABLL * ((v172 - v171) >> 3));
            }
            std::pair<std::string,std::vector<std::string>>::~pair((uint64_t)v169);
            std::pair<std::string,std::vector<std::string>>::~pair((uint64_t)v173);
            uint64_t v11 = *((void *)a3 + 121);
            uint64_t v12 = *((void *)a3 + 120);
          }
          if (v11 != v12)
          {
            uint64_t v30 = 0;
            unint64_t v31 = 0;
            unint64_t v32 = (void *)((char *)a2 + 40);
            do
            {
              *(_OWORD *)uint64_t v169 = *(_OWORD *)(v12 + v30);
              unint64_t v33 = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>(v32, v169);
              unint64_t v34 = v33;
              if (v33)
              {
                if (*((void *)v8 + 18) <= v31) {
                  goto LABEL_287;
                }
                long long v35 = v33 + 4;
                unint64_t v36 = *(void *)(*((void *)v8 + 13) + v30);
                if (v36 == -1 || v36 >= *((void *)v8 + 6))
                {
                  __int16 v40 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)v33) + 224);
                  if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
                  {
                    sGenerateSpatialModelerInfoString((uint64_t)v173, *((void *)this + 733));
                    uint64_t v41 = v173;
                    if (v174 < 0) {
                      uint64_t v41 = (void **)v173[0];
                    }
                    uint64_t v42 = *v35;
                    *(_DWORD *)std::string buf = 136315906;
                    *(void *)&uint8_t buf[4] = "CvmSpatialModelerInstance.mm";
                    *(_WORD *)&unsigned char buf[12] = 1024;
                    *(_DWORD *)&buf[14] = 1912;
                    *(_WORD *)&unsigned char buf[18] = 2080;
                    *(void *)&buf[20] = v41;
                    *(_WORD *)&unsigned char buf[28] = 2048;
                    *(void *)&buf[30] = v42;
                    _os_log_impl(&dword_221E5E000, v40, OS_LOG_TYPE_ERROR, "%25s:%-5d (%s) - submix routing emitted without a valid render group. submix will not be updated. (submix: %llu)", buf, 0x26u);
                    if (v174 < 0) {
                      operator delete(v173[0]);
                    }
                  }
                }
                else
                {
                  if (v36 >= v158) {
                    unint64_t v36 = 0;
                  }
                  int v37 = (Phase::SpatialModeler::RenderGroup *)(*((void *)v8 + 1) + 336 * v36);
                  if (*(void *)v37 || *((void *)v37 + 1))
                  {
                    *(_OWORD *)(v33 + 7) = *(_OWORD *)v37;
                    *((long double *)v33 + 9) = exp(*(double *)(*((void *)v8 + 13) + v30 + 8)* 10.0/ 10.0* 0.115129255);
                    RenderGroup = Phase::Controller::RenderGroupMgr::GetRenderGroup(v161, *(UniqueObjectId *)(v34 + 7));
                    if (RenderGroup)
                    {
                      uint64_t v39 = *RenderGroup;
                      Phase::Controller::RenderGroupMgr::SetSubmixSendLevel((uint64_t)v161, v34[4], v34[5], *((double *)v34 + 9));
                      Phase::Controller::RenderGroupMgr::SetSubmixRendererId((uint64_t)v161, v34[4], v34[5], v39);
                      if (*((unsigned char *)v34 + 80))
                      {
                        *(_OWORD *)std::string buf = *(_OWORD *)v35;
                        *(_OWORD *)&uint8_t buf[16] = *(_OWORD *)(v34 + 7);
                        operator new();
                      }
                      operator new();
                    }
                    uint64_t v43 = **(id **)(Phase::Logger::GetInstance(0) + 224);
                    if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
                    {
                      sGenerateSpatialModelerInfoString((uint64_t)v173, *((void *)this + 733));
                      std::vector<std::string>::pointer v44 = v173;
                      if (v174 < 0) {
                        std::vector<std::string>::pointer v44 = (void **)v173[0];
                      }
                      unsigned int v45 = *(_DWORD *)a3 - 1;
                      unint64_t v46 = "<invalid>";
                      if (v45 <= 2) {
                        unint64_t v46 = off_2645F71B0[v45];
                      }
                      unint64_t v47 = *(void *)v37;
                      *(_DWORD *)std::string buf = 136316162;
                      *(void *)&uint8_t buf[4] = "CvmSpatialModelerInstance.mm";
                      *(_WORD *)&unsigned char buf[12] = 1024;
                      *(_DWORD *)&buf[14] = 1953;
                      *(_WORD *)&unsigned char buf[18] = 2080;
                      *(void *)&buf[20] = v44;
                      *(_WORD *)&unsigned char buf[28] = 2080;
                      *(void *)&buf[30] = v46;
                      __int16 v178 = 2048;
                      unint64_t v179 = v47;
                      _os_log_impl(&dword_221E5E000, v43, OS_LOG_TYPE_DEFAULT, "%25s:%-5d (%s) - added render group to render group manager (graph: %s, cluster: %llu)", buf, 0x30u);
                      if (v174 < 0) {
                        operator delete(v173[0]);
                      }
                    }

                    Phase::Controller::RenderGroupMgr::NewRenderGroup(v161, v37);
                  }
                  __int16 v40 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)v33) + 224);
                  if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
                  {
                    sGenerateSpatialModelerInfoString((uint64_t)v173, *((void *)this + 733));
                    uint64_t v48 = v173;
                    if (v174 < 0) {
                      uint64_t v48 = (void **)v173[0];
                    }
                    uint64_t v49 = *v35;
                    *(_DWORD *)std::string buf = 136315906;
                    *(void *)&uint8_t buf[4] = "CvmSpatialModelerInstance.mm";
                    *(_WORD *)&unsigned char buf[12] = 1024;
                    *(_DWORD *)&buf[14] = 1932;
                    *(_WORD *)&unsigned char buf[18] = 2080;
                    *(void *)&buf[20] = v48;
                    *(_WORD *)&unsigned char buf[28] = 2048;
                    *(void *)&buf[30] = v49;
                    _os_log_impl(&dword_221E5E000, v40, OS_LOG_TYPE_ERROR, "%25s:%-5d (%s) - submix assigned to a render group without a valid id. submix will not be updated. (submix: %llu)", buf, 0x26u);
                    if (v174 < 0) {
                      operator delete(v173[0]);
                    }
                  }
                }
              }
              ++v31;
              uint64_t v12 = *((void *)a3 + 120);
              v30 += 16;
            }
            while (v31 < (*((void *)a3 + 121) - v12) >> 4);
          }
          if (*((void *)v8 + 6))
          {
            uint64_t v151 = 0;
            unint64_t v152 = 0;
            do
            {
              uint64_t v153 = *((void *)v8 + 1);
              uint64_t v154 = (void *)(v153 + v151);
              uint64_t v155 = (float *)Phase::Controller::RenderGroupMgr::GetRenderGroup(v161, *(UniqueObjectId *)(v153 + v151));
              unint64_t v156 = v155;
              if (v155)
              {
                int v157 = *(unsigned __int8 *)(*((void *)v8 + 7) + v152);
                if (*((unsigned __int8 *)v155 + 352) != v157
                  || *(void *)(v153 + v151 + 16) != *((void *)v155 + 4)
                  || *v154 != *((void *)v155 + 2)
                  || v154[1] != *((void *)v155 + 3)
                  || Phase::operator!=<float>((float *)(v153 + v151 + 24), v155 + 10)
                  || *(void *)(v153 + v151 + 184) != *((void *)v156 + 25)
                  || *(float *)(v153 + v151 + 192) != v156[52]
                  || *(float *)(v153 + v151 + 196) != v156[53]
                  || *(float *)(v153 + v151 + 200) != v156[54]
                  || *(unsigned __int8 *)(v153 + v151 + 320) != *((unsigned __int8 *)v156 + 336))
                {
                  Phase::Controller::RenderGroupMgr::UpdateRenderGroup(v161, (Phase::SpatialModeler::RenderGroup *)(v153 + v151), v157 != 0);
                }
              }
              ++v152;
              v151 += 336;
            }
            while (*((void *)v8 + 6) > v152);
          }
          goto LABEL_267;
        }
        sGenerateClusterSetInputStrings((uint64_t)v173, (uint64_t)v9);
        uint64_t v132 = (Phase::Logger *)sGenerateClusterSetOutputStrings((uint64_t)v169, v8);
        uint64_t v133 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v132)
                                                                                             + 224)));
        if (os_log_type_enabled(v133, OS_LOG_TYPE_ERROR))
        {
          sGenerateSpatialModelerInfoString((uint64_t)__p, *((void *)this + 733));
          if (v168 >= 0) {
            uint64_t v134 = __p;
          }
          else {
            uint64_t v134 = (void **)__p[0];
          }
          int v135 = v173;
          if (v174 < 0) {
            int v135 = (void **)v173[0];
          }
          unint64_t v136 = *((void *)v10 + 18);
          char v137 = v169;
          if (v170 < 0) {
            char v137 = (void **)v169[0];
          }
          uint64_t v138 = *((void *)v8 + 18);
          *(_DWORD *)std::string buf = 136316674;
          *(void *)&uint8_t buf[4] = "CvmSpatialModelerInstance.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1843;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = v134;
          *(_WORD *)&unsigned char buf[28] = 2080;
          *(void *)&buf[30] = v135;
          __int16 v178 = 2048;
          unint64_t v179 = v136;
          __int16 v180 = 2080;
          uint64_t v181 = v137;
          __int16 v182 = 2048;
          uint64_t v183 = v138;
          _os_log_impl(&dword_221E5E000, v133, OS_LOG_TYPE_ERROR, "%25s:%-5d (%s) - cluster query output render group spatial update flag array is null or empty. cluster query aborted. (%s, submix count: %zu, ...) (%s, submix count: %zu, ...)", buf, 0x44u);
          if (v168 < 0) {
            operator delete(__p[0]);
          }
        }

        if (v176 != v175)
        {
          unint64_t v140 = 0;
          do
          {
            uint64_t v141 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v139)
                                                                                                 + 224)));
            if (os_log_type_enabled(v141, OS_LOG_TYPE_ERROR))
            {
              sGenerateSpatialModelerInfoString((uint64_t)__p, *((void *)this + 733));
              uint64_t v142 = (void **)__p[0];
              if (v168 >= 0) {
                uint64_t v142 = __p;
              }
              uint64_t v143 = (void **)(v175 + 24 * v140);
              if (*((char *)v143 + 23) < 0) {
                uint64_t v143 = (void **)*v143;
              }
              ++v140;
              *(_DWORD *)std::string buf = 136316418;
              *(void *)&uint8_t buf[4] = "CvmSpatialModelerInstance.mm";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1848;
              *(_WORD *)&unsigned char buf[18] = 2080;
              *(void *)&buf[20] = v142;
              *(_WORD *)&unsigned char buf[28] = 2048;
              *(void *)&buf[30] = v140;
              __int16 v178 = 2048;
              unint64_t v179 = 0xAAAAAAAAAAAAAAABLL * ((v176 - v175) >> 3);
              __int16 v180 = 2080;
              uint64_t v181 = v143;
              _os_log_impl(&dword_221E5E000, v141, OS_LOG_TYPE_ERROR, "%25s:%-5d %s - followup ClusterSetInput log %zu of %zu (%s)", buf, 0x3Au);
              if (v168 < 0) {
                operator delete(__p[0]);
              }
            }
            else
            {
              ++v140;
            }
          }
          while (v140 < 0xAAAAAAAAAAAAAAABLL * ((v176 - v175) >> 3));
        }
        if (v172 != v171)
        {
          unint64_t v144 = 0;
          do
          {
            int v145 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v139)
                                                                                                 + 224)));
            if (os_log_type_enabled(v145, OS_LOG_TYPE_ERROR))
            {
              sGenerateSpatialModelerInfoString((uint64_t)__p, *((void *)this + 733));
              int64_t v146 = (void **)__p[0];
              if (v168 >= 0) {
                int64_t v146 = __p;
              }
              uint64_t v147 = (void **)(v171 + 24 * v144);
              if (*((char *)v147 + 23) < 0) {
                uint64_t v147 = (void **)*v147;
              }
              ++v144;
              *(_DWORD *)std::string buf = 136316418;
              *(void *)&uint8_t buf[4] = "CvmSpatialModelerInstance.mm";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1854;
              *(_WORD *)&unsigned char buf[18] = 2080;
              *(void *)&buf[20] = v146;
              *(_WORD *)&unsigned char buf[28] = 2048;
              *(void *)&buf[30] = v144;
              __int16 v178 = 2048;
              unint64_t v179 = 0xAAAAAAAAAAAAAAABLL * ((v172 - v171) >> 3);
              __int16 v180 = 2080;
              uint64_t v181 = v147;
              _os_log_impl(&dword_221E5E000, v145, OS_LOG_TYPE_ERROR, "%25s:%-5d %s - followup ClusterSetOutput log %zu of %zu (%s)", buf, 0x3Au);
              if (v168 < 0) {
                operator delete(__p[0]);
              }
            }
            else
            {
              ++v144;
            }
          }
          while (v144 < 0xAAAAAAAAAAAAAAABLL * ((v172 - v171) >> 3));
        }
      }
      else
      {
        sGenerateClusterSetInputStrings((uint64_t)v173, (uint64_t)v9);
        __int16 v116 = (Phase::Logger *)sGenerateClusterSetOutputStrings((uint64_t)v169, v8);
        uint64_t v117 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v116)
                                                                                             + 224)));
        if (os_log_type_enabled(v117, OS_LOG_TYPE_ERROR))
        {
          sGenerateSpatialModelerInfoString((uint64_t)__p, *((void *)this + 733));
          if (v168 >= 0) {
            uint64_t v118 = __p;
          }
          else {
            uint64_t v118 = (void **)__p[0];
          }
          double v119 = v173;
          if (v174 < 0) {
            double v119 = (void **)v173[0];
          }
          unint64_t v120 = *((void *)v10 + 18);
          uint64_t v121 = v169;
          if (v170 < 0) {
            uint64_t v121 = (void **)v169[0];
          }
          uint64_t v122 = *((void *)v8 + 18);
          *(_DWORD *)std::string buf = 136316674;
          *(void *)&uint8_t buf[4] = "CvmSpatialModelerInstance.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1815;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = v118;
          *(_WORD *)&unsigned char buf[28] = 2080;
          *(void *)&buf[30] = v119;
          __int16 v178 = 2048;
          unint64_t v179 = v120;
          __int16 v180 = 2080;
          uint64_t v181 = v121;
          __int16 v182 = 2048;
          uint64_t v183 = v122;
          _os_log_impl(&dword_221E5E000, v117, OS_LOG_TYPE_ERROR, "%25s:%-5d (%s) - cluster query output render groups array is null or empty. cluster query aborted. (%s, submix count: %zu, ...) (%s, submix count: %zu, ...)", buf, 0x44u);
          if (v168 < 0) {
            operator delete(__p[0]);
          }
        }

        if (v176 != v175)
        {
          unint64_t v124 = 0;
          do
          {
            std::string::size_type v125 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v123)
                                                                                                 + 224)));
            if (os_log_type_enabled(v125, OS_LOG_TYPE_ERROR))
            {
              sGenerateSpatialModelerInfoString((uint64_t)__p, *((void *)this + 733));
              uint64_t v126 = (void **)__p[0];
              if (v168 >= 0) {
                uint64_t v126 = __p;
              }
              uint64_t v127 = (void **)(v175 + 24 * v124);
              if (*((char *)v127 + 23) < 0) {
                uint64_t v127 = (void **)*v127;
              }
              ++v124;
              *(_DWORD *)std::string buf = 136316418;
              *(void *)&uint8_t buf[4] = "CvmSpatialModelerInstance.mm";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1820;
              *(_WORD *)&unsigned char buf[18] = 2080;
              *(void *)&buf[20] = v126;
              *(_WORD *)&unsigned char buf[28] = 2048;
              *(void *)&buf[30] = v124;
              __int16 v178 = 2048;
              unint64_t v179 = 0xAAAAAAAAAAAAAAABLL * ((v176 - v175) >> 3);
              __int16 v180 = 2080;
              uint64_t v181 = v127;
              _os_log_impl(&dword_221E5E000, v125, OS_LOG_TYPE_ERROR, "%25s:%-5d %s - followup ClusterSetInput log %zu of %zu (%s)", buf, 0x3Au);
              if (v168 < 0) {
                operator delete(__p[0]);
              }
            }
            else
            {
              ++v124;
            }
          }
          while (v124 < 0xAAAAAAAAAAAAAAABLL * ((v176 - v175) >> 3));
        }
        if (v172 != v171)
        {
          unint64_t v128 = 0;
          do
          {
            std::string v129 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v123)
                                                                                                 + 224)));
            if (os_log_type_enabled(v129, OS_LOG_TYPE_ERROR))
            {
              sGenerateSpatialModelerInfoString((uint64_t)__p, *((void *)this + 733));
              std::string v130 = (void **)__p[0];
              if (v168 >= 0) {
                std::string v130 = __p;
              }
              std::string v131 = (void **)(v171 + 24 * v128);
              if (*((char *)v131 + 23) < 0) {
                std::string v131 = (void **)*v131;
              }
              ++v128;
              *(_DWORD *)std::string buf = 136316418;
              *(void *)&uint8_t buf[4] = "CvmSpatialModelerInstance.mm";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1826;
              *(_WORD *)&unsigned char buf[18] = 2080;
              *(void *)&buf[20] = v130;
              *(_WORD *)&unsigned char buf[28] = 2048;
              *(void *)&buf[30] = v128;
              __int16 v178 = 2048;
              unint64_t v179 = 0xAAAAAAAAAAAAAAABLL * ((v172 - v171) >> 3);
              __int16 v180 = 2080;
              uint64_t v181 = v131;
              _os_log_impl(&dword_221E5E000, v129, OS_LOG_TYPE_ERROR, "%25s:%-5d %s - followup ClusterSetOutput log %zu of %zu (%s)", buf, 0x3Au);
              if (v168 < 0) {
                operator delete(__p[0]);
              }
            }
            else
            {
              ++v128;
            }
          }
          while (v128 < 0xAAAAAAAAAAAAAAABLL * ((v172 - v171) >> 3));
        }
      }
    }
    else
    {
      sGenerateClusterSetInputStrings((uint64_t)v173, (uint64_t)v9);
      long long v100 = (Phase::Logger *)sGenerateClusterSetOutputStrings((uint64_t)v169, v8);
      long long v101 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v100)
                                                                                           + 224)));
      if (os_log_type_enabled(v101, OS_LOG_TYPE_ERROR))
      {
        sGenerateSpatialModelerInfoString((uint64_t)__p, *((void *)this + 733));
        if (v168 >= 0) {
          uint64_t v102 = __p;
        }
        else {
          uint64_t v102 = (void **)__p[0];
        }
        int v103 = v173;
        if (v174 < 0) {
          int v103 = (void **)v173[0];
        }
        unint64_t v104 = *((void *)v10 + 18);
        uint64_t v105 = v169;
        if (v170 < 0) {
          uint64_t v105 = (void **)v169[0];
        }
        uint64_t v106 = *((void *)v8 + 18);
        *(_DWORD *)std::string buf = 136316674;
        *(void *)&uint8_t buf[4] = "CvmSpatialModelerInstance.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1788;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&buf[20] = v102;
        *(_WORD *)&unsigned char buf[28] = 2080;
        *(void *)&buf[30] = v103;
        __int16 v178 = 2048;
        unint64_t v179 = v104;
        __int16 v180 = 2080;
        uint64_t v181 = v105;
        __int16 v182 = 2048;
        uint64_t v183 = v106;
        _os_log_impl(&dword_221E5E000, v101, OS_LOG_TYPE_ERROR, "%25s:%-5d (%s) - failed to submit cluster query (%s, submix count: %zu, ...) (%s, submix count: %zu, ...)", buf, 0x44u);
        if (v168 < 0) {
          operator delete(__p[0]);
        }
      }

      if (v176 != v175)
      {
        unint64_t v108 = 0;
        do
        {
          uint64_t v109 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v107)
                                                                                               + 224)));
          if (os_log_type_enabled(v109, OS_LOG_TYPE_ERROR))
          {
            sGenerateSpatialModelerInfoString((uint64_t)__p, *((void *)this + 733));
            uint64_t v110 = (void **)__p[0];
            if (v168 >= 0) {
              uint64_t v110 = __p;
            }
            uint64_t v111 = (void **)(v175 + 24 * v108);
            if (*((char *)v111 + 23) < 0) {
              uint64_t v111 = (void **)*v111;
            }
            ++v108;
            *(_DWORD *)std::string buf = 136316418;
            *(void *)&uint8_t buf[4] = "CvmSpatialModelerInstance.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1793;
            *(_WORD *)&unsigned char buf[18] = 2080;
            *(void *)&buf[20] = v110;
            *(_WORD *)&unsigned char buf[28] = 2048;
            *(void *)&buf[30] = v108;
            __int16 v178 = 2048;
            unint64_t v179 = 0xAAAAAAAAAAAAAAABLL * ((v176 - v175) >> 3);
            __int16 v180 = 2080;
            uint64_t v181 = v111;
            _os_log_impl(&dword_221E5E000, v109, OS_LOG_TYPE_ERROR, "%25s:%-5d %s - followup ClusterSetInput log %zu of %zu (%s)", buf, 0x3Au);
            if (v168 < 0) {
              operator delete(__p[0]);
            }
          }
          else
          {
            ++v108;
          }
        }
        while (v108 < 0xAAAAAAAAAAAAAAABLL * ((v176 - v175) >> 3));
      }
      if (v172 != v171)
      {
        unint64_t v112 = 0;
        do
        {
          int v113 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v107)
                                                                                               + 224)));
          if (os_log_type_enabled(v113, OS_LOG_TYPE_ERROR))
          {
            sGenerateSpatialModelerInfoString((uint64_t)__p, *((void *)this + 733));
            int v114 = (void **)__p[0];
            if (v168 >= 0) {
              int v114 = __p;
            }
            std::string::size_type v115 = (void **)(v171 + 24 * v112);
            if (*((char *)v115 + 23) < 0) {
              std::string::size_type v115 = (void **)*v115;
            }
            ++v112;
            *(_DWORD *)std::string buf = 136316418;
            *(void *)&uint8_t buf[4] = "CvmSpatialModelerInstance.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1799;
            *(_WORD *)&unsigned char buf[18] = 2080;
            *(void *)&buf[20] = v114;
            *(_WORD *)&unsigned char buf[28] = 2048;
            *(void *)&buf[30] = v112;
            __int16 v178 = 2048;
            unint64_t v179 = 0xAAAAAAAAAAAAAAABLL * ((v172 - v171) >> 3);
            __int16 v180 = 2080;
            uint64_t v181 = v115;
            _os_log_impl(&dword_221E5E000, v113, OS_LOG_TYPE_ERROR, "%25s:%-5d %s - followup ClusterSetOutput log %zu of %zu (%s)", buf, 0x3Au);
            if (v168 < 0) {
              operator delete(__p[0]);
            }
          }
          else
          {
            ++v112;
          }
        }
        while (v112 < 0xAAAAAAAAAAAAAAABLL * ((v172 - v171) >> 3));
      }
    }
    *(void *)std::string buf = &v171;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    if (v170 < 0) {
      operator delete(v169[0]);
    }
    *(void *)std::string buf = &v175;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    if (v174 < 0) {
      operator delete(v173[0]);
    }
LABEL_267:
    Phase::SortedCommandQueue<Phase::SpatialModeler::PriorityQueue,Phase::SpatialModeler::PriorityQueueCommandType,std::variant<std::monostate,Phase::SpatialModeler::PriorityQueueEntry,Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueClusterIndexUpdate,Phase::SpatialModeler::PriorityQueueGlobals>>::CommandBatch::Clear(&v165);
    goto LABEL_268;
  }
  if (v6 <= 0xFFFFFFFD) {
LABEL_287:
  }
    std::terminate();
  long long v98 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(this)
                                                                                      + 224)));
  if (os_log_type_enabled(v98, OS_LOG_TYPE_ERROR))
  {
    sGenerateSpatialModelerInfoString((uint64_t)v173, *((void *)this + 733));
    BOOL v99 = v174 >= 0 ? v173 : (void **)v173[0];
    *(_DWORD *)std::string buf = 136315650;
    *(void *)&uint8_t buf[4] = "CvmSpatialModelerInstance.mm";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 2083;
    *(_WORD *)&unsigned char buf[18] = 2080;
    *(void *)&buf[20] = v99;
    _os_log_impl(&dword_221E5E000, v98, OS_LOG_TYPE_ERROR, "%25s:%-5d (%s) - unexpected cluster query status. query not finished in the update callback", buf, 0x1Cu);
    if (v174 < 0) {
      operator delete(v173[0]);
    }
  }

LABEL_268:
  unint64_t v148 = a3;
  atomic_store(0, (unsigned int *)a3 + 204);
  int v149 = (std::__shared_weak_count *)*((void *)v148 + 111);
  *((void *)v148 + 110) = 0;
  *((void *)v148 + 111) = 0;
  if (v149) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v149);
  }
  uint64_t v150 = v161;
  atomic_store(0, (unsigned int *)a3 + 230);
  Phase::Controller::RenderGroupMgr::SendChanges(v150);
}

void sub_221EBD0C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  Phase::SortedCommandQueue<Phase::SpatialModeler::PriorityQueue,Phase::SpatialModeler::PriorityQueueCommandType,std::variant<std::monostate,Phase::SpatialModeler::PriorityQueueEntry,Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueClusterIndexUpdate,Phase::SpatialModeler::PriorityQueueGlobals>>::CommandBatch::Clear(&a21);
  _Unwind_Resume(a1);
}

Phase::Logger *Phase::Controller::SpatialQueryInstance::GetOutputAs<Phase::SpatialModeler::ClusterSetOutput<float>>(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t result = *(Phase::Logger **)(a1 + 120);
  if (!result || *(_DWORD *)result != 2)
  {
    uint64_t v3 = a1;
    char v4 = **(id **)(Phase::Logger::GetInstance(result) + 384);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v5 = **(_DWORD **)(v3 + 120);
      int v7 = 136315906;
      unint64_t v8 = "CvmSpatialQueryInstance.hpp";
      __int16 v9 = 1024;
      int v10 = 121;
      __int16 v11 = 1024;
      int v12 = 2;
      __int16 v13 = 1024;
      int v14 = v5;
      _os_log_impl(&dword_221E5E000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [nullptr == pOutput is true]: \"Bad spatial query output cast: expected type: %i, actual type: %i\"", (uint8_t *)&v7, 0x1Eu);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Bad spatial query output cast: expected type: %i, actual type: %i");
  }
  return result;
}

void sub_221EBD418(_Unwind_Exception *exception_object)
{
}

uint64_t sGenerateClusterSetOutputStrings(uint64_t a1, void *a2)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v74);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)"type: ClusterSetOutput", 22);
  unint64_t v3 = 0;
  memset(&v73, 0, sizeof(v73));
  unint64_t v4 = a2[18];
  unint64_t v60 = v4 / 0xA;
  unint64_t v56 = v4;
  if (v4 >= 0xA)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v63 = 0;
    int v58 = *(void **)(MEMORY[0x263F8C2B8] + 64);
    unint64_t v59 = (void *)*MEMORY[0x263F8C2B8];
    uint64_t v57 = *(void *)(MEMORY[0x263F8C2B8] + 72);
    do
    {
      uint64_t v62 = v6;
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v67);
      uint64_t v7 = 0;
      unint64_t v8 = v63 + 9;
      __int16 v9 = v67[0];
      uint64_t v61 = v5;
      do
      {
        int v10 = *(_DWORD *)((char *)&v67[1] + *(v9 - 3));
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v68, (uint64_t)"{", 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v68, (uint64_t)"index: ", 7);
        unint64_t v11 = v63 + v7;
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v68, (uint64_t)", ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v68, (uint64_t)"send: ", 6);
        int v12 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" dB", 3);
        unint64_t v13 = *(void *)(a2[13] + v5);
        if (v13 == -1 || v13 >= a2[6])
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v68, (uint64_t)", ", 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v68, (uint64_t)"<invalid render group index>", 28);
        }
        else
        {
          uint64_t v14 = *(void *)(a2[1] + 336 * v13 + 16);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v68, (uint64_t)", ", 2);
          if (v14)
          {
            uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v68, (uint64_t)"source: ", 8);
            int v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"0x", 2);
            *(_DWORD *)((char *)v16 + *(void *)(*v16 - 24) + 8) |= 0x4000u;
            unsigned __int8 v17 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v16, 48);
            uint64_t v18 = *v17;
            *(uint64_t *)((char *)v17 + *(void *)(*v17 - 24) + 24) = 8;
            *(_DWORD *)((char *)v17 + *(void *)(v18 - 24) + 8) = *(_DWORD *)((unsigned char *)v17 + *(void *)(v18 - 24) + 8) & 0xFFFFFFB5 | 8;
          }
          else
          {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v68, (uint64_t)"cluster: ", 9);
          }
          std::ostream::operator<<();
        }
        if (v11 >= v8) {
          uint64_t v19 = "}";
        }
        else {
          uint64_t v19 = "}, ";
        }
        if (v11 >= v8) {
          uint64_t v20 = 1;
        }
        else {
          uint64_t v20 = 3;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v68, (uint64_t)v19, v20);
        __int16 v9 = v67[0];
        *(_DWORD *)((char *)&v67[1] + *((void *)v67[0] - 3)) = v10;
        ++v7;
        v5 += 16;
      }
      while (v7 != 10);
      std::stringbuf::str();
      std::vector<std::string>::pointer end = v73.__end_;
      unint64_t v3 = v63 + 10;
      if (v73.__end_ >= v73.__end_cap_.__value_)
      {
        unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * (((char *)v73.__end_ - (char *)v73.__begin_) >> 3);
        unint64_t v25 = v24 + 1;
        if (v24 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<char>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * (((char *)v73.__end_cap_.__value_ - (char *)v73.__begin_) >> 3) > v25) {
          unint64_t v25 = 0x5555555555555556 * (((char *)v73.__end_cap_.__value_ - (char *)v73.__begin_) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v73.__end_cap_.__value_ - (char *)v73.__begin_) >> 3) >= 0x555555555555555) {
          unint64_t v26 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v26 = v25;
        }
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v73.__end_cap_;
        uint64_t v23 = v61;
        if (v26) {
          unint64_t v27 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v73.__end_cap_, v26);
        }
        else {
          unint64_t v27 = 0;
        }
        unint64_t v28 = v27 + v24;
        __v.__first_ = v27;
        __v.__begin_ = v28;
        __v.__end_cap_.__value_ = &v27[v26];
        v28->__r_.__value_.__r.__words[2] = v66;
        *(_OWORD *)&v28->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
        std::string::size_type v66 = 0;
        *(_OWORD *)std::string __p = 0uLL;
        __v.__end_ = v28 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(&v73, &__v);
        uint64_t v29 = v73.__end_;
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        v73.__end_ = v29;
        uint64_t v22 = v62;
      }
      else
      {
        v73.__end_->__r_.__value_.__r.__words[2] = v66;
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
        v73.__end_ = end + 1;
        uint64_t v23 = v61;
        uint64_t v22 = v62;
      }
      v67[0] = v59;
      *(void **)((char *)v67 + *((void *)v59 - 3)) = v58;
      uint64_t v68 = v57;
      uint64_t v69 = MEMORY[0x263F8C318] + 16;
      if (v71 < 0) {
        operator delete(v70);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x223C937D0](v72);
      uint64_t v6 = v22 + 1;
      uint64_t v5 = v23 + 160;
      v63 += 10;
    }
    while (v6 != v60);
  }
  unint64_t v30 = v56 - 10 * v60;
  uint64_t v31 = MEMORY[0x263F8C2B8];
  if (v30)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v67);
    if (v3 < v3 + v30)
    {
      unint64_t v64 = v3 + 9;
      unint64_t v32 = v67[0];
      uint64_t v33 = 16 * v3;
      do
      {
        int v34 = *(_DWORD *)((char *)&v67[1] + *(v32 - 3));
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v68, (uint64_t)"{", 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v68, (uint64_t)"index: ", 7);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v68, (uint64_t)", ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v68, (uint64_t)"send: ", 6);
        long long v35 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)" dB", 3);
        unint64_t v36 = v3;
        unint64_t v37 = *(void *)(a2[13] + v33);
        if (v37 == -1 || v37 >= a2[6])
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v68, (uint64_t)", ", 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v68, (uint64_t)"<invalid render group index>", 28);
        }
        else
        {
          uint64_t v38 = *(void *)(a2[1] + 336 * v37 + 16);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v68, (uint64_t)", ", 2);
          if (v38)
          {
            uint64_t v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v68, (uint64_t)"source: ", 8);
            __int16 v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"0x", 2);
            *(_DWORD *)((char *)v40 + *(void *)(*v40 - 24) + 8) |= 0x4000u;
            uint64_t v41 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v40, 48);
            uint64_t v42 = *v41;
            *(uint64_t *)((char *)v41 + *(void *)(*v41 - 24) + 24) = 8;
            *(_DWORD *)((char *)v41 + *(void *)(v42 - 24) + 8) = *(_DWORD *)((unsigned char *)v41 + *(void *)(v42 - 24) + 8) & 0xFFFFFFB5 | 8;
          }
          else
          {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v68, (uint64_t)"cluster: ", 9);
          }
          std::ostream::operator<<();
        }
        if (v36 >= v64) {
          uint64_t v43 = "}";
        }
        else {
          uint64_t v43 = "}, ";
        }
        if (v36 >= v64) {
          uint64_t v44 = 1;
        }
        else {
          uint64_t v44 = 3;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v68, (uint64_t)v43, v44);
        unint64_t v32 = v67[0];
        *(_DWORD *)((char *)&v67[1] + *((void *)v67[0] - 3)) = v34;
        unint64_t v3 = v36 + 1;
        v33 += 16;
        --v30;
      }
      while (v30);
    }
    std::stringbuf::str();
    std::vector<std::string>::pointer v45 = v73.__end_;
    uint64_t v31 = MEMORY[0x263F8C2B8];
    if (v73.__end_ >= v73.__end_cap_.__value_)
    {
      unint64_t v46 = 0xAAAAAAAAAAAAAAABLL * (((char *)v73.__end_ - (char *)v73.__begin_) >> 3);
      unint64_t v47 = v46 + 1;
      if (v46 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<char>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * (((char *)v73.__end_cap_.__value_ - (char *)v73.__begin_) >> 3) > v47) {
        unint64_t v47 = 0x5555555555555556 * (((char *)v73.__end_cap_.__value_ - (char *)v73.__begin_) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v73.__end_cap_.__value_ - (char *)v73.__begin_) >> 3) >= 0x555555555555555) {
        unint64_t v48 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v48 = v47;
      }
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v73.__end_cap_;
      if (v48) {
        uint64_t v49 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v73.__end_cap_, v48);
      }
      else {
        uint64_t v49 = 0;
      }
      uint64_t v50 = v49 + v46;
      __v.__first_ = v49;
      __v.__begin_ = v50;
      __v.__end_cap_.__value_ = &v49[v48];
      v50->__r_.__value_.__r.__words[2] = v66;
      *(_OWORD *)&v50->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      __v.__end_ = v50 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v73, &__v);
      uint64_t v51 = v73.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      v73.__end_ = v51;
    }
    else
    {
      v73.__end_->__r_.__value_.__r.__words[2] = v66;
      *(_OWORD *)&v45->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      v73.__end_ = v45 + 1;
    }
    v67[0] = *(void **)v31;
    uint64_t v52 = *(void *)(v31 + 72);
    *(void **)((char *)v67 + *((void *)v67[0] - 3)) = *(void **)(v31 + 64);
    uint64_t v68 = v52;
    uint64_t v69 = MEMORY[0x263F8C318] + 16;
    if (v71 < 0) {
      operator delete(v70);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x223C937D0](v72);
  }
  std::stringbuf::str();
  std::pair<std::string,std::vector<std::string>>::pair[abi:ne180100]<std::string,std::vector<std::string>&,0>(a1, (long long *)v67, (long long **)&v73);
  if (SHIBYTE(v68) < 0) {
    operator delete(v67[0]);
  }
  v67[0] = &v73;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v67);
  v74[0] = *(void *)v31;
  uint64_t v53 = *(void *)(v31 + 72);
  *(void *)((char *)v74 + *(void *)(v74[0] - 24)) = *(void *)(v31 + 64);
  v75[0] = v53;
  v75[1] = MEMORY[0x263F8C318] + 16;
  if (v76 < 0) {
    operator delete((void *)v75[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x223C937D0](&v77);
}

void sub_221EBE000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)(v67 - 128));
  if (a28 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a29);
  a29 = &a64;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a67);
  _Unwind_Resume(a1);
}

BOOL Phase::operator!=<float>(float *a1, float *a2)
{
  return *a1 != *a2
      || a1[1] != a2[1]
      || a1[2] != a2[2]
      || a1[3] != a2[3]
      || a1[4] != a2[4]
      || a1[5] != a2[5]
      || a1[6] != a2[6]
      || a1[7] != a2[7];
}

void *Phase::UniqueObjectId::str@<X0>(Phase::UniqueObjectId *this@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  memset(v4, 0, sizeof(v4));
  uuid_unparse((const unsigned __int8 *)this, v4);
  return std::string::basic_string[abi:ne180100]<0>(a2, v4);
}

Phase::Logger *Phase::Controller::SpatialQueryInstance::GetInputAs<Phase::SpatialModeler::RenderGroupInput<float>>(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t result = *(Phase::Logger **)(a1 + 112);
  if (!result || *(_DWORD *)result != 2)
  {
    uint64_t v3 = a1;
    unint64_t v4 = **(id **)(Phase::Logger::GetInstance(result) + 384);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v5 = **(_DWORD **)(v3 + 112);
      int v7 = 136315906;
      unint64_t v8 = "CvmSpatialQueryInstance.hpp";
      __int16 v9 = 1024;
      int v10 = 98;
      __int16 v11 = 1024;
      int v12 = 2;
      __int16 v13 = 1024;
      int v14 = v5;
      _os_log_impl(&dword_221E5E000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [nullptr == pInput is true]: \"Bad spatial query input cast: expected type: %i, actual type: %i\"", (uint8_t *)&v7, 0x1Eu);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Bad spatial query input cast: expected type: %i, actual type: %i");
  }
  return result;
}

void sub_221EBE2EC(_Unwind_Exception *exception_object)
{
}

void Phase::Controller::SpatialModelerInstance::DestroyTempSpatialGraphData(uint64_t a1, uint64_t a2)
{
  for (unint64_t i = *(void **)(a2 + 1000); i; unint64_t i = (void *)*i)
  {
    UniqueObjectId v7 = (UniqueObjectId)*((_OWORD *)Phase::Controller::SpatialQueryInstance::GetInputAs<Phase::SpatialModeler::RenderGroupInput<float>>(i[4])
                         + 12);
    Phase::Controller::RenderGroupMgr::GetRendererForRenderGroup((Phase::Controller::RenderGroupMgr *)(a2 + 1600), v7, &v4);
    if (v4) {
      atomic_store(0, (unsigned __int8 *)(v4 + 52));
    }
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }

  std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>>>::clear(a2 + 984);
}

uint64_t sGenerateRenderGroupInputString(uint64_t a1, uint64_t a2)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"type: RenderGroupInput", 22);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)", ", 2);
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"listener: ", 10);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"0x", 2);
  *(_DWORD *)((char *)v4 + *(void *)(*v4 - 24) + 8) |= 0x4000u;
  int v5 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, 48);
  uint64_t v6 = *v5;
  *(uint64_t *)((char *)v5 + *(void *)(*v5 - 24) + 24) = 8;
  *(_DWORD *)((char *)v5 + *(void *)(v6 - 24) + 8) = *(_DWORD *)((unsigned char *)v5 + *(void *)(v6 - 24) + 8) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<();
  uint64_t v7 = *(void *)(a2 + 208);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)", ", 2);
  if (v7)
  {
    unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"source: ", 8);
    __int16 v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"0x", 2);
    *(_DWORD *)((char *)v9 + *(void *)(*v9 - 24) + 8) |= 0x4000u;
    int v10 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, 48);
    uint64_t v11 = *v10;
    *(uint64_t *)((char *)v10 + *(void *)(*v10 - 24) + 24) = 8;
    *(_DWORD *)((char *)v10 + *(void *)(v11 - 24) + 8) = *(_DWORD *)((unsigned char *)v10 + *(void *)(v11 - 24) + 8) & 0xFFFFFFB5 | 8;
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"cluster: ", 9);
  }
  std::ostream::operator<<();
  std::stringbuf::str();
  v14[0] = *MEMORY[0x263F8C2B8];
  uint64_t v12 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v14 + *(void *)(v14[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v15[0] = v12;
  v15[1] = MEMORY[0x263F8C318] + 16;
  if (v16 < 0) {
    operator delete((void *)v15[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x223C937D0](&v17);
}

void sub_221EBE6E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

Phase::Logger *Phase::Controller::SpatialQueryInstance::GetOutputAs<Phase::SpatialModeler::DirectionalMetadataOutput<float>>(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t result = *(Phase::Logger **)(a1 + 120);
  if (!result || *(_DWORD *)result != 3)
  {
    uint64_t v3 = a1;
    uint64_t v4 = **(id **)(Phase::Logger::GetInstance(result) + 384);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v5 = **(_DWORD **)(v3 + 120);
      int v7 = 136315906;
      unint64_t v8 = "CvmSpatialQueryInstance.hpp";
      __int16 v9 = 1024;
      int v10 = 121;
      __int16 v11 = 1024;
      int v12 = 3;
      __int16 v13 = 1024;
      int v14 = v5;
      _os_log_impl(&dword_221E5E000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [nullptr == pOutput is true]: \"Bad spatial query output cast: expected type: %i, actual type: %i\"", (uint8_t *)&v7, 0x1Eu);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Bad spatial query output cast: expected type: %i, actual type: %i");
  }
  return result;
}

void sub_221EBE838(_Unwind_Exception *exception_object)
{
}

uint64_t sGenerateDirectionalMetadataOutputString()
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"type: DirectionalMetadataOutput", 31);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"direction count: ", 17);
  std::ostream::operator<<();
  std::stringbuf::str();
  v2[0] = *MEMORY[0x263F8C2B8];
  uint64_t v0 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v2 + *(void *)(v2[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v3[0] = v0;
  v3[1] = MEMORY[0x263F8C318] + 16;
  if (v4 < 0) {
    operator delete((void *)v3[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x223C937D0](&v5);
}

void sub_221EBEA00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void Phase::Controller::SpatialModelerInstance::DestroyAllTempGraphData(uint64_t a1, uint64_t a2)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>>>::clear(a2 + 776);
  char v4 = Phase::Controller::SpatialModelerInstance::DestroyTempClusterGraphData(v3, a2);

  Phase::Controller::SpatialModelerInstance::DestroyTempSpatialGraphData((uint64_t)v4, a2);
}

uint64_t *Phase::Controller::SpatialModelerInstance::DestroyTempClusterGraphData(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 816;
  char v4 = (uint64_t *)Phase::Controller::SpatialQueryInstance::GetInputAs<Phase::SpatialModeler::ClusterSetInput<float>>(a2 + 816);
  std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>>::reset[abi:ne180100](v4 + 13);
  v4[18] = 0;
  std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>>::reset[abi:ne180100](v4 + 7);
  v4[12] = 0;
  uint64_t v5 = (uint64_t *)Phase::Controller::SpatialQueryInstance::GetOutputAs<Phase::SpatialModeler::ClusterSetOutput<float>>(v3);
  std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>>::reset[abi:ne180100](v5 + 1);
  v5[6] = 0;
  std::unique_ptr<BOOL [],std::function<void ()(void *)>>::reset[abi:ne180100](v5 + 7);
  v5[12] = 0;
  unint64_t result = std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>>::reset[abi:ne180100](v5 + 13);
  v5[18] = 0;
  *(void *)(a2 + 968) = *(void *)(a2 + 960);
  return result;
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<X0>(const void **a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  if (*((char *)a1 + 23) >= 0) {
    size_t v5 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v5 = (size_t)a1[1];
  }
  if (*((char *)a2 + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  uint64_t result = std::string::basic_string[abi:ne180100](a3, v6 + v5);
  if (*(char *)(result + 23) >= 0) {
    unint64_t v8 = (char *)result;
  }
  else {
    unint64_t v8 = *(char **)result;
  }
  if (v5)
  {
    if (*((char *)a1 + 23) >= 0) {
      __int16 v9 = a1;
    }
    else {
      __int16 v9 = *a1;
    }
    uint64_t result = (uint64_t)memmove(v8, v9, v5);
  }
  int v10 = &v8[v5];
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0) {
      __int16 v11 = a2;
    }
    else {
      __int16 v11 = *a2;
    }
    uint64_t result = (uint64_t)memmove(v10, v11, v6);
  }
  v10[v6] = 0;
  return result;
}

void *std::list<std::shared_ptr<Phase::Job>>::push_back(uint64_t *a1, void *a2)
{
  uint64_t result = operator new(0x20uLL);
  uint64_t v5 = a2[1];
  result[2] = *a2;
  result[3] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *a1;
  void *result = *a1;
  result[1] = a1;
  *(void *)(v6 + 8) = result;
  *a1 = (uint64_t)result;
  ++a1[2];
  return result;
}

void Phase::Controller::SpatialModelerInstance::BuildIRs(uint64_t a1, uint64_t a2)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 1008))
  {
    Phase::Controller::SpatialModelerInstance::GetLatestSubmixState((Phase::Controller::SpatialModelerInstance *)&v26, a1);
    if (v28)
    {
      char v4 = v26;
      while (!*v4)
      {
        v4 += 3;
        if (v4 >= &v26[3 * v28]) {
          goto LABEL_30;
        }
      }
      v5.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      uint64_t v6 = *(UniqueObjectId **)(a2 + 1000);
      if (v6)
      {
        int v7 = (Phase::Controller::RenderGroupMgr *)(a2 + 1600);
        double v8 = (double)v5.__d_.__rep_ / 1000000000.0;
        __int16 v9 = (void *)(a2 + 544);
        do
        {
          unint64_t v10 = v6[2].mStorage[0];
          unsigned int v11 = atomic_load((unsigned int *)v10);
          if (v11)
          {
            if (v11 == 3)
            {
              Phase::Controller::RenderGroupMgr::GetRendererForRenderGroup(v7, v6[1], &__p);
              int v12 = (unsigned __int8 *)__p;
              if (!__p)
              {
                if (v24) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v24);
                }
                break;
              }
              int v14 = (_OWORD *)v6[2].mStorage[1];
              __int16 v13 = (_OWORD *)v6[3].mStorage[0];
              while (v14 != v13)
              {
                long long v15 = v14[1];
                *(_OWORD *)std::string buf = *v14;
                *(_OWORD *)&uint8_t buf[16] = v15;
                char v16 = (double *)std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>(v9, buf);
                if (!v16) {
                  std::terminate();
                }
                v16[11] = v8;
                v14 += 2;
              }
              int v20 = *(unsigned __int8 *)(*(void *)(v10 + 120) + 4);
              int v21 = (*(uint64_t (**)(unsigned __int8 *))(*(void *)v12 + 64))(v12);
              if (v20) {
                int v22 = 1;
              }
              else {
                int v22 = v21;
              }
              if (v22 == 1)
              {
                *(_DWORD *)std::string buf = 2;
                *(void *)&buf[8] = v10;
                (*(void (**)(unsigned __int8 *, unsigned char *))(*(void *)v12 + 56))(v12, buf);
              }
              atomic_store(0, v12 + 52);
              v5.__d_.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep)v24;
              if (v24) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v24);
              }
            }
            else
            {
              uint64_t v17 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance((Phase::Logger *)v5.__d_.__rep_)
                                                                                                  + 224)));
              if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
              {
                Phase::Controller::SpatialModelerInstance::GetDescription((Phase::Controller::SpatialModelerInstance *)&__p, a1);
                p_p = &__p;
                if (v25 < 0) {
                  p_p = __p;
                }
                uint64_t v19 = *(void *)(*(void *)(a1 + 5864) + 24);
                *(_DWORD *)std::string buf = 136315906;
                *(void *)&uint8_t buf[4] = "CvmSpatialModelerInstance.mm";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 3384;
                *(_WORD *)&unsigned char buf[18] = 2080;
                *(void *)&buf[20] = p_p;
                *(_WORD *)&unsigned char buf[28] = 2048;
                *(void *)&buf[30] = v19;
                _os_log_impl(&dword_221E5E000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d %s: Invalid Spatial Query status in Build IR node for instance %llu", buf, 0x26u);
                if (v25 < 0) {
                  operator delete(__p);
                }
              }
            }
          }
          uint64_t v6 = (UniqueObjectId *)v6->mStorage[0];
        }
        while (v6);
      }
    }
LABEL_30:
    if (v27) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v27);
    }
  }
}

void sub_221EBEEF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  _Unwind_Resume(exception_object);
}

__n128 Phase::Controller::SpatialModelerInstance::CopyRuntimeSettingsFrom(Phase::Controller::SpatialModelerInstance *this, __n128 *a2)
{
  Phase::Controller::SpatialModelerInstance::ClearRegisteredSubmixState(this);
  Phase::Controller::SubmixSlotMap<Phase::Controller::SpatialModelerInstance::SubmixInfo>::DeepCopyFrom((uint64_t)this + 8, (uint64_t)&a2->n128_i64[1]);
  char v4 = (uint64_t **)*((void *)this + 6);
  unsigned int v5 = *((_DWORD *)this + 16);
  uint64_t v6 = &v4[3 * v5];
  if (v5)
  {
    int v7 = *v4;
    if (!*v4)
    {
      double v8 = v4 + 3;
      while (1)
      {
        char v4 = v8;
        if (v8 >= v6) {
          break;
        }
        v8 += 3;
        int v7 = *v4;
        if (*v4) {
          goto LABEL_9;
        }
      }
      int v7 = 0;
    }
  }
  else
  {
    int v7 = 0;
  }
LABEL_9:
  if (v4 != v6)
  {
    uint64_t v9 = *v7;
    uint64_t v10 = v7[1];
    unsigned int v11 = (void *)(a2[404].n128_u64[1] + 120);
    v16[0] = *v7;
    v16[1] = v10;
    if (std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>(v11, v16))
    {
      double InputSendLevel = Phase::Controller::SpatialSubmixRouter::GetInputSendLevel(a2[404].n128_i64[1], v9, v10);
      Phase::Controller::SpatialModelerInstance::AddInput((uint64_t)this, v9, v10, InputSendLevel);
      v17.mStorage[0] = v9;
      v17.mStorage[1] = v10;
      int PlayState = Phase::Controller::SpatialSubmixRouter::GetPlayState((Phase::Controller::SpatialSubmixRouter *)a2[404].n128_u64[1], v17);
      Phase::Controller::SpatialModelerInstance::SetPlayState((uint64_t)this, v9, v10, PlayState);
    }
    operator new();
  }
  Phase::Controller::SpatialSubmixRouter::CopyRuntimeSettingsFrom(*((Phase::Logger **)this + 809), (const Phase::Controller::SpatialSubmixRouter *)a2[404].n128_u64[1]);
  unint64_t v14 = atomic_load(&a2[19].n128_u64[1]);
  atomic_store(v14, (unint64_t *)this + 39);
  __n128 result = a2[20];
  *((__n128 *)this + 20) = result;
  return result;
}

void Phase::Controller::SubmixSlotMap<Phase::Controller::SpatialModelerInstance::SubmixInfo>::DeepCopyFrom(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>,void *> *>>((void *)a1, *(uint64_t **)(a2 + 16), 0);
  }
  _ZN5Phase7details13SharedSlotMapINS_10Controller22SpatialModelerInstance10SubmixInfoENS_8Handle64EE12DeepCopyFromIZNS_13SharedSlotMapIS4_S5_DnE12DeepCopyFromERKS9_EUlRT_E_EEvRKS6_OSC_((uint64_t *)(a1 + 40), (unsigned int *)(a2 + 40));
}

double Phase::Controller::RenderGroupMgr::RenderGroupMgr(Phase::Controller::RenderGroupMgr *this)
{
  long long v1 = *(_OWORD *)&off_26D473010;
  *((_OWORD *)this + 2) = xmmword_26D473000;
  *((_OWORD *)this + 3) = v1;
  *((_OWORD *)this + 4) = xmmword_26D473020;
  long long v2 = *(_OWORD *)&off_26D472FF0;
  *(_OWORD *)this = xmmword_26D472FE0;
  *((_OWORD *)this + 1) = v2;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = this;
  *((void *)this + 12) = this;
  *((void *)this + 13) = 0;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 42) = 1065353216;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_DWORD *)this + 52) = 1065353216;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *((_DWORD *)this + 62) = 1065353216;
  uint64_t v3 = 264;
  *((void *)this + 32) = 0;
  do
  {
    char v4 = (char *)this + v3;
    *(_OWORD *)char v4 = 0uLL;
    *((_OWORD *)v4 + 1) = 0uLL;
    *((_DWORD *)v4 + 8) = 1065353216;
    *(_OWORD *)(v4 + 40) = 0uLL;
    *(_OWORD *)(v4 + 56) = 0uLL;
    *((_DWORD *)v4 + 18) = 1065353216;
    *((_OWORD *)v4 + 5) = 0uLL;
    *((_OWORD *)v4 + 6) = 0uLL;
    v3 += 120;
    *((_DWORD *)v4 + 28) = 1065353216;
  }
  while (v4 + 120 != (char *)this + 504);
  *((void *)this + 63) = (char *)this + 264;
  *((void *)this + 64) = (char *)this + 384;
  *((unsigned char *)this + 568) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 520) = 0u;
  *(_OWORD *)((char *)this + 536) = 0u;
  *(_OWORD *)((char *)this + 552) = 0u;
  return result;
}

void Phase::Controller::RenderGroupMgr::~RenderGroupMgr(atomic_ullong *this)
{
  Phase::Controller::RenderGroupMgr::Reset(this);
  long long v2 = (void *)this[68];
  if (v2)
  {
    this[69] = (atomic_ullong)v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)this[65];
  if (v3)
  {
    this[66] = (atomic_ullong)v3;
    operator delete(v3);
  }
  uint64_t v4 = 30;
  do
  {
    std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)&this[v4 + 28]);
    std::__hash_table<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>>>::~__hash_table((uint64_t)&this[v4 + 23]);
    std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)&this[v4 + 18]);
    v4 -= 15;
  }
  while (v4 * 8);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)(this + 27));
  std::__hash_table<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>>>::~__hash_table((uint64_t)(this + 22));
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)(this + 17));
  Phase::SortedCommandQueue<Phase::Controller::RenderGroupMgr,Phase::Controller::RenderGroupMgr::CommandType,std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::CommandBatch::Clear(this + 13);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  long long v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>>>::__deallocate_node(int a1, void *__p)
{
  if (__p)
  {
    long long v2 = __p;
    do
    {
      uint64_t v3 = (void *)*v2;
      uint64_t v4 = (std::__shared_weak_count *)v2[4];
      if (v4) {
        std::__shared_weak_count::__release_weak(v4);
      }
      operator delete(v2);
      long long v2 = v3;
    }
    while (v3);
  }
}

void *Phase::SortedCommandQueue<Phase::Controller::RenderGroupMgr,Phase::Controller::RenderGroupMgr::CommandType,std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::CommandBatch::Clear(void *result)
{
  long long v1 = result;
  uint64_t v2 = *result;
  if (*result)
  {
    do
    {
      uint64_t v3 = *(void *)(v2 + 392);
      Phase::SortedCommandQueue<Phase::Controller::RenderGroupMgr,Phase::Controller::RenderGroupMgr::CommandType,std::variant<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>>::CommandBatch::Clear(v2 + 384);
      std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>,(std::__variant_detail::_Trait)1>::~__dtor(v2 + 16);
      double result = (void *)MEMORY[0x223C938A0](v2, 0x1022C40083BFC85);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  *long long v1 = 0;
  return result;
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,unsigned long long,Phase::UniqueObjectId,std::pair<Phase::SpatialModeler::RenderGroup,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::SpatialModeler::RenderGroup,BOOL>,std::pair<Phase::UniqueObjectId,double>,std::pair<Phase::UniqueObjectId,unsigned long long>,std::pair<unsigned long long,std::weak_ptr<Phase::Controller::Renderer>>,std::pair<Phase::UniqueObjectId,Phase::SpatialModeler::PointSourceHistory>>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 352);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8ne180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEyN5Phase14UniqueObjectIdENS_4pairINS7_14SpatialModeler11RenderGroupENS_8weak_ptrINS7_10Controller8RendererEEEEENS9_ISB_bEENS9_IS8_dEENS9_IS8_yEENS9_IySF_EENS9_IS8_NSA_18PointSourceHistoryEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRSP_EEEDcOSQ_DpOT0____fmatrix[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 352) = -1;
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEyN5Phase14UniqueObjectIdENS_4pairINS9_14SpatialModeler11RenderGroupENS_8weak_ptrINS9_10Controller8RendererEEEEENSB_ISD_bEENSB_ISA_dEENSB_ISA_yEENSB_IySH_EENSB_ISA_NSC_18PointSourceHistoryEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJS8_ySA_SI_SJ_SK_SL_SM_SO_EEEEEEDcSS_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a2 + 344);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEyN5Phase14UniqueObjectIdENS_4pairINS9_14SpatialModeler11RenderGroupENS_8weak_ptrINS9_10Controller8RendererEEEEENSB_ISD_bEENSB_ISA_dEENSB_ISA_yEENSB_IySH_EENSB_ISA_NSC_18PointSourceHistoryEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJS8_ySA_SI_SJ_SK_SL_SM_SO_EEEEEEDcSS_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a2 + 16);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
}

uint64_t std::deque<double>::~deque[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 256;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 512;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      int v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<Phase::SpatialModeler::Graph>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  long long v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 192;
        std::allocator<Phase::SpatialModeler::Graph>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<Phase::SpatialModeler::Graph>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v5 = (void **)(a2 + 168);
  std::vector<Phase::SpatialModeler::GraphNode>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v3 = *(std::__shared_weak_count **)(a2 + 160);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a2 + 144);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  std::__function::__value_func<void ()(Phase::SpatialModeler::Graph &)>::~__value_func[abi:ne180100]((void *)(a2 + 104));
  std::__function::__value_func<void ()(Phase::SpatialModeler::Graph &)>::~__value_func[abi:ne180100]((void *)(a2 + 72));
  unint64_t v5 = (void **)(a2 + 32);
  std::vector<Phase::SpatialModeler::GraphDescriptionNode>::__destroy_vector::operator()[abi:ne180100](&v5);
  if (*(char *)(a2 + 31) < 0) {
    operator delete(*(void **)(a2 + 8));
  }
}

void std::vector<Phase::SpatialModeler::GraphNode>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  long long v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 96;
        std::allocator<Phase::SpatialModeler::GraphNode>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<Phase::SpatialModeler::GraphNode>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  std::__function::__value_func<void ()(Phase::SpatialModeler::GraphNode &)>::~__value_func[abi:ne180100]((void *)(a2 + 64));
  std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100]((uint64_t **)(a2 + 56), 0);
  if (*(char *)(a2 + 47) < 0)
  {
    uint64_t v3 = *(void **)(a2 + 24);
    operator delete(v3);
  }
}

void *std::__function::__value_func<void ()(Phase::SpatialModeler::GraphNode &)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t **std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](uint64_t **result, uint64_t *a2)
{
  uint64_t v2 = *result;
  void *result = a2;
  if (v2)
  {
    std::unique_ptr<Phase::SpatialModeler::ActiveQuery>::reset[abi:ne180100](v2 + 10, 0);
    uint64_t v3 = (void *)v2[6];
    if (v3)
    {
      v2[7] = (uint64_t)v3;
      operator delete(v3);
    }
    std::unique_ptr<Phase::SpatialModeler::QueryState,std::function<void ()(void *)>>::reset[abi:ne180100](v2 + 1, 0);
    std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v2 + 2);
    JUMPOUT(0x223C938A0);
  }
  return result;
}

uint64_t *std::unique_ptr<Phase::SpatialModeler::QueryState,std::function<void ()(void *)>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v3 = *result;
  void *result = a2;
  if (v3) {
    return (uint64_t *)std::function<void ()(void *)>::operator()((uint64_t)(result + 1), v3);
  }
  return result;
}

void *std::__function::__value_func<void ()(Phase::SpatialModeler::Graph &)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(void *)&v4)
  {
    if (prime >= *(void *)&v4) {
      return;
    }
    unint64_t v11 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v12 = (uint8x8_t)vcnt_s8(v4), v12.i16[0] = vaddlv_u8(v12), v12.u32[0] > 1uLL))
    {
      unint64_t v11 = std::__next_prime(v11);
    }
    else
    {
      uint64_t v13 = 1 << -(char)__clz(v11 - 1);
      if (v11 >= 2) {
        unint64_t v11 = v13;
      }
    }
    if (prime <= v11) {
      size_t prime = v11;
    }
    if (prime >= *(void *)&v4) {
      return;
    }
    if (!prime)
    {
      char v16 = *(void **)a1;
      *(void *)a1 = 0;
      if (v16) {
        operator delete(v16);
      }
      *(void *)(a1 + 8) = 0;
      return;
    }
  }
  if (prime >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  unint64_t v5 = operator new(8 * prime);
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = v5;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = 0;
  *(void *)(a1 + 8) = prime;
  do
    *(void *)(*(void *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  uint64_t v8 = *(void **)(a1 + 16);
  if (v8)
  {
    size_t v9 = v8[1];
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= prime) {
        v9 %= prime;
      }
    }
    else
    {
      v9 &= prime - 1;
    }
    *(void *)(*(void *)a1 + 8 * v9) = a1 + 16;
    unint64_t v14 = (void *)*v8;
    if (*v8)
    {
      do
      {
        size_t v15 = v14[1];
        if (v10.u32[0] > 1uLL)
        {
          if (v15 >= prime) {
            v15 %= prime;
          }
        }
        else
        {
          v15 &= prime - 1;
        }
        if (v15 != v9)
        {
          if (!*(void *)(*(void *)a1 + 8 * v15))
          {
            *(void *)(*(void *)a1 + 8 * v15) = v8;
            goto LABEL_31;
          }
          *uint64_t v8 = *v14;
          *unint64_t v14 = **(void **)(*(void *)a1 + 8 * v15);
          **(void **)(*(void *)a1 + 8 * v15) = v14;
          unint64_t v14 = v8;
        }
        size_t v15 = v9;
LABEL_31:
        uint64_t v8 = v14;
        unint64_t v14 = (void *)*v14;
        size_t v9 = v15;
      }
      while (v14);
    }
  }
}

uint64_t Phase::Controller::Parameter<double>::Initialize(uint64_t result, double a2, double a3, double a4)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (a2 > a3)
  {
    unint64_t v5 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)result) + 704);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      int v10 = 136315394;
      unint64_t v11 = "CvmParameter.hpp";
      __int16 v12 = 1024;
      int v13 = 72;
      _os_log_impl(&dword_221E5E000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [inMinimumValue > inMaximumValue is true]: \"inMinimumValue > inMaximumValue\"", (uint8_t *)&v10, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "inMinimumValue > inMaximumValue");
  }
  if (a4 < a2 || a4 > a3)
  {
    uint64_t v7 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)result) + 704);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      int v10 = 136315394;
      unint64_t v11 = "CvmParameter.hpp";
      __int16 v12 = 1024;
      int v13 = 74;
      _os_log_impl(&dword_221E5E000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [inDefaultValue < inMinimumValue || inDefaultValue > inMaximumValue is true]: \"inDefaultValue is out-of-range\"", (uint8_t *)&v10, 0x12u);
    }
    size_t v9 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](v9, "inDefaultValue is out-of-range");
  }
  *(double *)double result = a2;
  *(double *)(result + 8) = a3;
  *(double *)(result + 16) = a4;
  *(double *)(result + 24) = a4;
  *(unsigned char *)(result + 32) = 0;
  return result;
}

void sub_221EBFC78(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *std::operator<<[abi:ne180100]<std::char_traits<char>>(void *a1, char a2)
{
  int8x8_t v4 = (char *)a1 + *(void *)(*a1 - 24);
  if (*((_DWORD *)v4 + 36) == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
    unint64_t v5 = std::locale::use_facet(&v8, MEMORY[0x263F8C108]);
    int v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 32);
    std::locale::~locale(&v8);
    *((_DWORD *)v4 + 36) = v6;
  }
  *((_DWORD *)v4 + 36) = a2;
  return a1;
}

void sub_221EBFD50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t *std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1 = *result;
  void *result = 0;
  if (v1) {
    return (uint64_t *)std::function<void ()(void *)>::operator()((uint64_t)(result + 1), v1);
  }
  return result;
}

uint64_t std::pair<std::string,std::vector<std::string>>::pair[abi:ne180100]<std::string,std::vector<std::string>&,0>(uint64_t a1, long long *a2, long long **a3)
{
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  unint64_t v5 = *a3;
  int v6 = a3[1];
  if (v6 != *a3)
  {
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((char *)v6 - (char *)v5) >> 3);
    if (v7 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<char>::__throw_length_error[abi:ne180100]();
    }
    std::locale v8 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a1 + 40, v7);
    *(void *)(a1 + 24) = v8;
    *(void *)(a1 + 32) = v8;
    *(void *)(a1 + 40) = &v8[v9];
    size_t v15 = v8;
    char v16 = v8;
    v13[0] = a1 + 40;
    v13[1] = &v15;
    void v13[2] = &v16;
    char v14 = 0;
    int v10 = v8;
    do
    {
      if (*((char *)v5 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)v5, *((void *)v5 + 1));
        int v10 = v16;
      }
      else
      {
        long long v11 = *v5;
        v10->__r_.__value_.__r.__words[2] = *((void *)v5 + 2);
        *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
      }
      unint64_t v5 = (long long *)((char *)v5 + 24);
      char v16 = ++v10;
    }
    while (v5 != v6);
    char v14 = 1;
    std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
    *(void *)(a1 + 32) = v10;
  }
  return a1;
}

void sub_221EBFEBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  if (*(char *)(v9 + 23) < 0) {
    operator delete(*(void **)v9);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 8);
    for (uint64_t i = **(void **)(a1 + 16); i != v3; i -= 24)
    {
      if (*(char *)(i - 1) < 0) {
        operator delete(*(void **)(i - 24));
      }
    }
  }
  return a1;
}

void *std::function<void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::operator=(void *a1, void *a2)
{
  v9[3] = *MEMORY[0x263EF8340];
  uint64_t v3 = (void *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      std::locale v8 = v7;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v7);
    }
    else
    {
      std::locale v8 = (void *)(*(uint64_t (**)(void *))(*v3 + 16))(v3);
    }
  }
  else
  {
    std::locale v8 = 0;
  }
  if (v7 != a1)
  {
    long long v4 = v8;
    unint64_t v5 = (void *)a1[3];
    if (v8 == v7)
    {
      if (v5 == a1)
      {
        (*(void (**)(void *, void *))(v7[0] + 24))(v7, v9);
        (*(void (**)(void *))(*v8 + 32))(v8);
        std::locale v8 = 0;
        (*(void (**)(void, void *))(*(void *)a1[3] + 24))(a1[3], v7);
        (*(void (**)(void))(*(void *)a1[3] + 32))(a1[3]);
        a1[3] = 0;
        std::locale v8 = v7;
        (*(void (**)(void *, void *))(v9[0] + 24))(v9, a1);
        (*(void (**)(void *))(v9[0] + 32))(v9);
      }
      else
      {
        (*(void (**)(void *, void *))(v7[0] + 24))(v7, a1);
        (*(void (**)(void *))(*v8 + 32))(v8);
        std::locale v8 = (void *)a1[3];
      }
      a1[3] = a1;
    }
    else if (v5 == a1)
    {
      (*(void (**)(void *, void *))(*a1 + 24))(a1, v7);
      (*(void (**)(void))(*(void *)a1[3] + 32))(a1[3]);
      a1[3] = v8;
      std::locale v8 = v7;
    }
    else
    {
      std::locale v8 = (void *)a1[3];
      a1[3] = v4;
    }
  }
  std::__function::__value_func<void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::~__value_func[abi:ne180100](v7);
  return a1;
}

void sub_221EC0250(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::function<void ()(Phase::SpatialModeler::PriorityQueueEntry &)>::operator=(void *a1, void *a2)
{
  v9[3] = *MEMORY[0x263EF8340];
  uint64_t v3 = (void *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      std::locale v8 = v7;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v7);
    }
    else
    {
      std::locale v8 = (void *)(*(uint64_t (**)(void *))(*v3 + 16))(v3);
    }
  }
  else
  {
    std::locale v8 = 0;
  }
  if (v7 != a1)
  {
    long long v4 = v8;
    unint64_t v5 = (void *)a1[3];
    if (v8 == v7)
    {
      if (v5 == a1)
      {
        (*(void (**)(void *, void *))(v7[0] + 24))(v7, v9);
        (*(void (**)(void *))(*v8 + 32))(v8);
        std::locale v8 = 0;
        (*(void (**)(void, void *))(*(void *)a1[3] + 24))(a1[3], v7);
        (*(void (**)(void))(*(void *)a1[3] + 32))(a1[3]);
        a1[3] = 0;
        std::locale v8 = v7;
        (*(void (**)(void *, void *))(v9[0] + 24))(v9, a1);
        (*(void (**)(void *))(v9[0] + 32))(v9);
      }
      else
      {
        (*(void (**)(void *, void *))(v7[0] + 24))(v7, a1);
        (*(void (**)(void *))(*v8 + 32))(v8);
        std::locale v8 = (void *)a1[3];
      }
      a1[3] = a1;
    }
    else if (v5 == a1)
    {
      (*(void (**)(void *, void *))(*a1 + 24))(a1, v7);
      (*(void (**)(void))(*(void *)a1[3] + 32))(a1[3]);
      a1[3] = v8;
      std::locale v8 = v7;
    }
    else
    {
      std::locale v8 = (void *)a1[3];
      a1[3] = v4;
    }
  }
  std::__function::__value_func<void ()(Phase::SpatialModeler::PriorityQueueEntry &)>::~__value_func[abi:ne180100](v7);
  return a1;
}

void sub_221EC0558(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::function<BOOL ()(Phase::SpatialModeler::PriorityQueueEntry const&,Phase::SpatialModeler::PriorityQueueEntry const&)>::operator=(void *a1, uint64_t a2)
{
  void v8[3] = *MEMORY[0x263EF8340];
  std::__function::__value_func<BOOL ()(Phase::SpatialModeler::PriorityQueueEntry const&,Phase::SpatialModeler::PriorityQueueEntry const&)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
  if (v6 != a1)
  {
    uint64_t v3 = v7;
    long long v4 = (void *)a1[3];
    if (v7 == v6)
    {
      if (v4 == a1)
      {
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, v8);
        (*(void (**)(void *))(*v7 + 32))(v7);
        unint64_t v7 = 0;
        (*(void (**)(void, void *))(*(void *)a1[3] + 24))(a1[3], v6);
        (*(void (**)(void))(*(void *)a1[3] + 32))(a1[3]);
        a1[3] = 0;
        unint64_t v7 = v6;
        (*(void (**)(void *, void *))(v8[0] + 24))(v8, a1);
        (*(void (**)(void *))(v8[0] + 32))(v8);
      }
      else
      {
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a1);
        (*(void (**)(void *))(*v7 + 32))(v7);
        unint64_t v7 = (void *)a1[3];
      }
      a1[3] = a1;
    }
    else if (v4 == a1)
    {
      (*(void (**)(void *, void *))(*a1 + 24))(a1, v6);
      (*(void (**)(void))(*(void *)a1[3] + 32))(a1[3]);
      a1[3] = v7;
      unint64_t v7 = v6;
    }
    else
    {
      unint64_t v7 = (void *)a1[3];
      a1[3] = v3;
    }
  }
  std::__function::__value_func<BOOL ()(Phase::SpatialModeler::PriorityQueueEntry const&,Phase::SpatialModeler::PriorityQueueEntry const&)>::~__value_func[abi:ne180100](v6);
  return a1;
}

void sub_221EC07EC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<BOOL ()(Phase::SpatialModeler::PriorityQueueEntry const&,Phase::SpatialModeler::PriorityQueueEntry const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void std::__list_imp<std::shared_ptr<Phase::Job>>::clear(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        unint64_t v5 = (uint64_t *)v3[1];
        int v6 = (std::__shared_weak_count *)v3[3];
        if (v6) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v6);
        }
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void *std::__function::__value_func<void ()(Phase::SpatialModeler::Query &)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(Phase::SpatialModeler::PriorityQueueEntry &)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<BOOL ()(Phase::SpatialModeler::PriorityQueueEntry const&,Phase::SpatialModeler::PriorityQueueEntry const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>>>::__deallocate_node(a1, *(std::__shared_weak_count ****)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>>>::__deallocate_node(uint64_t a1, std::__shared_weak_count ***a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = *v2;
      std::unique_ptr<Phase::Controller::SpatialQueryInstance>::reset[abi:ne180100](v2 + 3, 0);
      operator delete(v2);
      uint64_t v2 = (std::__shared_weak_count ***)v3;
    }
    while (v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>>>::__deallocate_node(*(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>>>::__deallocate_node(void *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    do
    {
      uint64_t v2 = (void *)*v1;
      std::__destroy_at[abi:ne180100]<std::pair<Phase::UniqueObjectId const,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,0>((uint64_t)(v1 + 2));
      operator delete(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
}

std::__shared_weak_count **std::__destroy_at[abi:ne180100]<std::pair<Phase::UniqueObjectId const,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,0>(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }

  return std::unique_ptr<Phase::Controller::SpatialQueryInstance>::reset[abi:ne180100]((std::__shared_weak_count ***)(a1 + 16), 0);
}

void std::vector<std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (std::__shared_weak_count ***)**a1;
  if (v2)
  {
    uint64_t v4 = (std::__shared_weak_count ***)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        int v6 = *(v4 - 3);
        if (v6)
        {
          *(v4 - 2) = v6;
          operator delete(v6);
        }
        v4 -= 4;
        std::unique_ptr<Phase::Controller::SpatialQueryInstance>::reset[abi:ne180100](v4, 0);
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>>>::__deallocate_node(*(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>>>::__deallocate_node(void *__p)
{
  if (__p)
  {
    uint64_t v1 = __p;
    do
    {
      uint64_t v2 = (void *)*v1;
      uint64_t v3 = (std::__shared_weak_count *)v1[4];
      if (v3) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v3);
      }
      operator delete(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
}

Phase::Controller::SpatialSubmixRouter *std::unique_ptr<Phase::Controller::SpatialSubmixRouter>::reset[abi:ne180100](Phase::Controller::SpatialSubmixRouter **a1, Phase::Controller::SpatialSubmixRouter *a2)
{
  double result = *a1;
  *a1 = a2;
  if (result)
  {
    Phase::Controller::SpatialSubmixRouter::~SpatialSubmixRouter(result);
    JUMPOUT(0x223C938A0);
  }
  return result;
}

void Phase::details::SharedSlotMap<Phase::Controller::SpatialModelerInstance::SubmixInfo,Phase::Handle64>::Resize(uint64_t *a1, unsigned int a2)
{
  uint64_t v2 = *((unsigned int *)a1 + 4);
  if (v2 < a2)
  {
    Phase::details::SharedSlotMap<Phase::Controller::SpatialModelerInstance::SubmixInfo,Phase::Handle64>::AllocSlots(v20, a2);
    uint64_t v5 = v20[0];
    if (v2)
    {
      uint64_t v6 = 0;
      do
      {
        uint64_t v7 = *a1;
        std::locale v8 = (uint64_t *)(*a1 + v6);
        uint64_t v10 = *v8;
        uint64_t v9 = v8[1];
        if (v9) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
        }
        long long v11 = (void *)(v5 + v6);
        __int16 v12 = *(std::__shared_weak_count **)(v5 + v6 + 8);
        *long long v11 = v10;
        v11[1] = v9;
        if (v12) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v12);
        }
        void v11[2] = *(void *)(v7 + v6 + 16);
        v6 += 24;
      }
      while (24 * v2 != v6);
      unsigned int v13 = v2;
    }
    else
    {
      unsigned int v13 = 0;
    }
    char v14 = (void *)(v5 + 24 * v13 + 16);
    do
    {
      size_t v15 = (std::__shared_weak_count *)*(v14 - 1);
      *(v14 - 2) = 0;
      *(v14 - 1) = 0;
      if (v15) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
      *char v14 = 0x1FFFFFFFFLL;
      v14 += 3;
      LODWORD(v2) = v2 + 1;
    }
    while (a2 != v2);
    uint64_t v18 = a1 + 4;
    char v19 = 1;
    std::__shared_mutex_base::lock((std::__shared_mutex_base *)(a1 + 4));
    char v16 = (std::__shared_weak_count *)a1[1];
    uint64_t v17 = v20[1];
    *a1 = v5;
    a1[1] = v17;
    std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v18);
    *((_DWORD *)a1 + 4) = a2;
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
  }
}

void sub_221EC0F10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void *Phase::details::SharedSlotMap<Phase::Controller::SpatialModelerInstance::SubmixInfo,Phase::Handle64>::AllocSlots(void *result, uint64_t a2)
{
  if (a2) {
    operator new[]();
  }
  Phase::Controller::SpatialSubmixRouter *result = 0;
  result[1] = 0;
  return result;
}

void sub_221EC0FE0(_Unwind_Exception *a1)
{
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 24);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  MEMORY[0x223C938A0](v1, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<Phase::SharedSlotMapState<Phase::Controller::SpatialModelerInstance::SubmixInfo,Phase::Handle64>::Slot *,std::shared_ptr<Phase::SharedSlotMapState<Phase::Controller::SpatialModelerInstance::SubmixInfo,Phase::Handle64>::Slot[]>::__shared_ptr_default_delete<Phase::SharedSlotMapState<Phase::Controller::SpatialModelerInstance::SubmixInfo,Phase::Handle64>::Slot[],Phase::SharedSlotMapState<Phase::Controller::SpatialModelerInstance::SubmixInfo,Phase::Handle64>::Slot>,std::allocator<Phase::SharedSlotMapState<Phase::Controller::SpatialModelerInstance::SubmixInfo,Phase::Handle64>::Slot>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C938A0);
}

uint64_t std::__shared_ptr_pointer<Phase::SharedSlotMapState<Phase::Controller::SpatialModelerInstance::SubmixInfo,Phase::Handle64>::Slot *,std::shared_ptr<Phase::SharedSlotMapState<Phase::Controller::SpatialModelerInstance::SubmixInfo,Phase::Handle64>::Slot[]>::__shared_ptr_default_delete<Phase::SharedSlotMapState<Phase::Controller::SpatialModelerInstance::SubmixInfo,Phase::Handle64>::Slot[],Phase::SharedSlotMapState<Phase::Controller::SpatialModelerInstance::SubmixInfo,Phase::Handle64>::Slot>,std::allocator<Phase::SharedSlotMapState<Phase::Controller::SpatialModelerInstance::SubmixInfo,Phase::Handle64>::Slot>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    uint64_t v2 = v1 - 16;
    uint64_t v3 = *(void *)(v1 - 8);
    if (v3)
    {
      uint64_t v4 = 24 * v3;
      do
      {
        uint64_t v5 = *(std::__shared_weak_count **)(v2 + v4);
        if (v5) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v5);
        }
        v4 -= 24;
      }
      while (v4);
    }
    JUMPOUT(0x223C93870);
  }
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<Phase::SpatialModeler::GraphDescription &,unsigned long,Phase::SpatialModeler::PriorityQueue &>>>(unint64_t a1)
{
  if (a1 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(24 * a1);
}

void std::__function::__func<Phase::Controller::SpatialModelerInstance::CommitFrameUpdateBatch(void)::$_0,std::allocator<Phase::Controller::SpatialModelerInstance::CommitFrameUpdateBatch(void)::$_0>,void ()(BOOL,std::list<std::shared_ptr<Phase::Job>>)>::~__func()
{
}

void *std::__function::__func<Phase::Controller::SpatialModelerInstance::CommitFrameUpdateBatch(void)::$_0,std::allocator<Phase::Controller::SpatialModelerInstance::CommitFrameUpdateBatch(void)::$_0>,void ()(BOOL,std::list<std::shared_ptr<Phase::Job>>)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26D4730C0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Phase::Controller::SpatialModelerInstance::CommitFrameUpdateBatch(void)::$_0,std::allocator<Phase::Controller::SpatialModelerInstance::CommitFrameUpdateBatch(void)::$_0>,void ()(BOOL,std::list<std::shared_ptr<Phase::Job>>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D4730C0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<Phase::Controller::SpatialModelerInstance::CommitFrameUpdateBatch(void)::$_0,std::allocator<Phase::Controller::SpatialModelerInstance::CommitFrameUpdateBatch(void)::$_0>,void ()(BOOL,std::list<std::shared_ptr<Phase::Job>>)>::operator()(Phase::Logger *a1, unsigned __int8 *a2, uint64_t *a3)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  int v3 = *a2;
  v18[0] = (uint64_t)v18;
  v18[1] = (uint64_t)v18;
  uint64_t v19 = 0;
  uint64_t v4 = a3[2];
  if (v4)
  {
    uint64_t v6 = *a3;
    uint64_t v5 = (uint64_t *)a3[1];
    uint64_t v7 = *v5;
    *(void *)(v7 + 8) = *(void *)(*a3 + 8);
    **(void **)(v6 + 8) = v7;
    uint64_t v8 = v18[0];
    *(void *)(v18[0] + 8) = v5;
    uint64_t *v5 = v8;
    *(void *)(v6 + 8) = v18;
    v18[0] = v6;
    uint64_t v19 = v4;
    a3[2] = 0;
  }
  uint64_t v9 = *((void *)a1 + 1);
  BOOL v10 = v3 == 0;
  long long v11 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(a1)
                                                                                      + 224)));
  __int16 v12 = v11;
  if (v10)
  {
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      goto LABEL_16;
    }
    Phase::Controller::SpatialModelerInstance::GetDescription((Phase::Controller::SpatialModelerInstance *)__p, v9);
    if (v21 >= 0) {
      uint64_t v17 = __p;
    }
    else {
      uint64_t v17 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136315650;
    uint64_t v23 = "CvmSpatialModelerInstance.mm";
    __int16 v24 = 1024;
    int v25 = 841;
    __int16 v26 = 2080;
    unint64_t v27 = v17;
    char v14 = "%25s:%-5d %s: failed to start overflow graph";
    size_t v15 = v12;
    os_log_type_t v16 = OS_LOG_TYPE_ERROR;
  }
  else
  {
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_16;
    }
    Phase::Controller::SpatialModelerInstance::GetDescription((Phase::Controller::SpatialModelerInstance *)__p, v9);
    if (v21 >= 0) {
      unsigned int v13 = __p;
    }
    else {
      unsigned int v13 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136315650;
    uint64_t v23 = "CvmSpatialModelerInstance.mm";
    __int16 v24 = 1024;
    int v25 = 836;
    __int16 v26 = 2080;
    unint64_t v27 = v13;
    char v14 = "%25s:%-5d %s: started overflow graph";
    size_t v15 = v12;
    os_log_type_t v16 = OS_LOG_TYPE_DEFAULT;
  }
  _os_log_impl(&dword_221E5E000, v15, v16, v14, buf, 0x1Cu);
  if (v21 < 0) {
    operator delete(__p[0]);
  }
LABEL_16:

  std::__list_imp<std::shared_ptr<Phase::Job>>::clear(v18);
}

void sub_221EC1390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__list_imp<std::shared_ptr<Phase::Job>>::clear(&a9);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<void ()(BOOL,std::list<std::shared_ptr<Phase::Job>>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

Phase::Logger *Phase::Handle64::Set(Phase::Logger *this, unsigned int a2, uint64_t a3)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (!a3)
  {
    int v3 = **(id **)(Phase::Logger::GetInstance(this) + 48);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      int v5 = 136315394;
      uint64_t v6 = "Handle.hpp";
      __int16 v7 = 1024;
      int v8 = 166;
      _os_log_impl(&dword_221E5E000, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: inGeneration > 0 is false.", (uint8_t *)&v5, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](exception, "PRECONDITION: inGeneration > 0 is false.");
  }
  *(void *)this = a2 | (unint64_t)(a3 << 32);
  return this;
}

void sub_221EC1548(_Unwind_Exception *exception_object)
{
}

uint64_t std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    std::__shared_mutex_base::unlock_shared(*(std::__shared_mutex_base **)a1);
  }
  return a1;
}

uint64_t Phase::details::SharedSlotMap<Phase::Controller::SpatialModelerInstance::SubmixInfo,Phase::Handle64>::GetUniqueSlot(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 16) <= a2) {
    return 0;
  }
  unsigned int v3 = a2;
  uint64_t result = *(void *)a1 + 24 * a2;
  if (*(_DWORD *)(result + 20) != HIDWORD(a2)) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5)
  {
    if (*(uint64_t *)(v5 + 8) >= 1)
    {
      Phase::details::SharedSlotMap<Phase::Controller::SpatialModelerInstance::SubmixInfo,Phase::Handle64>::Realloc((uint64_t *)a1);
      return *(void *)a1 + 24 * v3;
    }
  }
  return result;
}

void Phase::details::SharedSlotMap<Phase::Controller::SpatialModelerInstance::SubmixInfo,Phase::Handle64>::Realloc(uint64_t *a1)
{
  uint64_t v1 = *((unsigned int *)a1 + 4);
  if (v1)
  {
    Phase::details::SharedSlotMap<Phase::Controller::SpatialModelerInstance::SubmixInfo,Phase::Handle64>::AllocSlots(&v15, v1);
    if (*((_DWORD *)a1 + 4))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      uint64_t v5 = v15;
      do
      {
        uint64_t v6 = *a1;
        __int16 v7 = (uint64_t *)(*a1 + v3);
        uint64_t v9 = *v7;
        uint64_t v8 = v7[1];
        if (v8) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
        }
        BOOL v10 = (void *)(v5 + v3);
        long long v11 = *(std::__shared_weak_count **)(v5 + v3 + 8);
        *BOOL v10 = v9;
        v10[1] = v8;
        if (v11) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v11);
        }
        void v10[2] = *(void *)(v6 + v3 + 16);
        ++v4;
        v3 += 24;
      }
      while (v4 < *((unsigned int *)a1 + 4));
    }
    unsigned int v13 = a1 + 4;
    char v14 = 1;
    std::__shared_mutex_base::lock((std::__shared_mutex_base *)(a1 + 4));
    __int16 v12 = (std::__shared_weak_count *)a1[1];
    *(_OWORD *)a1 = v15;
    std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v13);
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
  }
}

void sub_221EC1700(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<Phase::Controller::SpatialModelerInstance::SubmixInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D473108;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Phase::Controller::SpatialModelerInstance::SubmixInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D473108;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C938A0);
}

uint64_t std::__shared_ptr_emplace<Phase::Controller::SpatialModelerInstance::SubmixInfo>::__on_zero_shared(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(a1 + 96);
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  float v7 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    BOOL v9 = 1;
    if (v6 >= 3) {
      BOOL v9 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v10 = v9 | (2 * v6);
    unint64_t v11 = vcvtps_u32_f32(v7 / v8);
    if (v10 <= v11) {
      int8x8_t prime = (int8x8_t)v11;
    }
    else {
      int8x8_t prime = (int8x8_t)v10;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v6 = *(void *)(a1 + 8);
    }
    if (*(void *)&prime > v6) {
      goto LABEL_74;
    }
    if (*(void *)&prime >= v6) {
      goto LABEL_43;
    }
    unint64_t v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v6 < 3 || (uint8x8_t v20 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
    {
      unint64_t v19 = std::__next_prime(v19);
    }
    else
    {
      uint64_t v21 = 1 << -(char)__clz(v19 - 1);
      if (v19 >= 2) {
        unint64_t v19 = v21;
      }
    }
    if (*(void *)&prime <= v19) {
      int8x8_t prime = (int8x8_t)v19;
    }
    if (*(void *)&prime >= v6)
    {
      unint64_t v6 = *(void *)(a1 + 8);
      goto LABEL_43;
    }
    if (prime)
    {
LABEL_74:
      if (*(void *)&prime >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unsigned int v13 = operator new(8 * *(void *)&prime);
      char v14 = *(void **)a1;
      *(void *)a1 = v13;
      if (v14) {
        operator delete(v14);
      }
      uint64_t v15 = 0;
      *(int8x8_t *)(a1 + 8) = prime;
      do
        *(void *)(*(void *)a1 + 8 * v15++) = 0;
      while (*(void *)&prime != v15);
      os_log_type_t v16 = *(uint64_t ***)(a1 + 16);
      if (v16)
      {
        unint64_t v17 = (unint64_t)v16[1];
        uint8x8_t v18 = (uint8x8_t)vcnt_s8(prime);
        v18.i16[0] = vaddlv_u8(v18);
        if (v18.u32[0] > 1uLL)
        {
          if (v17 >= *(void *)&prime) {
            v17 %= *(void *)&prime;
          }
        }
        else
        {
          v17 &= *(void *)&prime - 1;
        }
        *(void *)(*(void *)a1 + 8 * v17) = a1 + 16;
        for (uint64_t i = *v16; *v16; uint64_t i = *v16)
        {
          unint64_t v23 = i[1];
          if (v18.u32[0] > 1uLL)
          {
            if (v23 >= *(void *)&prime) {
              v23 %= *(void *)&prime;
            }
          }
          else
          {
            v23 &= *(void *)&prime - 1;
          }
          if (v23 == v17)
          {
            os_log_type_t v16 = (uint64_t **)i;
          }
          else
          {
            __int16 v24 = i;
            if (*(void *)(*(void *)a1 + 8 * v23))
            {
              do
              {
                int v25 = v24;
                __int16 v24 = (uint64_t *)*v24;
              }
              while (v24 && *((_DWORD *)i + 4) == *((_DWORD *)v24 + 4));
              *os_log_type_t v16 = v24;
              void *v25 = **(void **)(*(void *)a1 + 8 * v23);
              **(void **)(*(void *)a1 + 8 * v23) = i;
            }
            else
            {
              *(void *)(*(void *)a1 + 8 * v23) = v16;
              os_log_type_t v16 = (uint64_t **)i;
              unint64_t v17 = v23;
            }
          }
        }
      }
      unint64_t v6 = (unint64_t)prime;
    }
    else
    {
      long long v35 = *(void **)a1;
      *(void *)a1 = 0;
      if (v35) {
        operator delete(v35);
      }
      unint64_t v6 = 0;
      *(void *)(a1 + 8) = 0;
    }
  }
LABEL_43:
  uint8x8_t v26 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v26.i16[0] = vaddlv_u8(v26);
  if (v26.u32[0] > 1uLL)
  {
    unint64_t v27 = a2;
    if (v6 <= a2) {
      unint64_t v27 = a2 % v6;
    }
  }
  else
  {
    unint64_t v27 = (v6 - 1) & a2;
  }
  uint64_t v28 = *(uint64_t **)(*(void *)a1 + 8 * v27);
  if (!v28) {
    return 0;
  }
  int v29 = 0;
  do
  {
    uint64_t result = v28;
    uint64_t v28 = (uint64_t *)*v28;
    if (!v28) {
      break;
    }
    unint64_t v31 = v28[1];
    if (v26.u32[0] > 1uLL)
    {
      unint64_t v32 = v28[1];
      if (v31 >= v6) {
        unint64_t v32 = v31 % v6;
      }
    }
    else
    {
      unint64_t v32 = v31 & (v6 - 1);
    }
    if (v32 != v27) {
      break;
    }
    BOOL v33 = v31 == a2 && *((_DWORD *)v28 + 4) == *a3;
    int v34 = v29 & !v33;
    v29 |= v33;
  }
  while (v34 != 1);
  return result;
}

void *std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>>>::__emplace_unique_key_args<Phase::UniqueObjectId,Phase::UniqueObjectId&,Phase::Handle64&>(uint64_t a1, void *a2, _OWORD *a3, void *a4)
{
  uint64_t v8 = 0;
  unint64_t v9 = 0xCBF29CE484222325;
  do
    unint64_t v9 = 0x100000001B3 * (v9 ^ *((char *)a2 + v8++));
  while (v8 != 16);
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
    __int16 v12 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = (void *)*i)
      {
        unint64_t v14 = i[1];
        if (v14 == v9)
        {
          if (i[2] == *a2 && i[3] == a2[1]) {
            return i;
          }
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
          }
          else
          {
            v14 &= v10 - 1;
          }
          if (v14 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x28uLL);
  void *i = 0;
  i[1] = v9;
  *((_OWORD *)i + 1) = *a3;
  i[4] = *a4;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  uint64_t v22 = *(void *)a1;
  unint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    void *i = *v23;
LABEL_44:
    void *v23 = i;
    goto LABEL_45;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v22 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v24 = *(void *)(*i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v24 >= v10) {
        v24 %= v10;
      }
    }
    else
    {
      v24 &= v10 - 1;
    }
    unint64_t v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_44;
  }
LABEL_45:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_221EC1D3C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *_ZN5Phase7details13SharedSlotMapINS_10Controller22SpatialModelerInstance10SubmixInfoENS_8Handle64EE13GetSlotToEditIRZNS_13SharedSlotMapIS4_S5_DnE9GetUniqueES5_EUlRT_E_EEPNS_18SharedSlotMapStateIS4_S5_E4SlotES5_OSA_(uint64_t a1, uint64_t a2)
{
  uint64_t UniqueSlot = (uint64_t *)Phase::details::SharedSlotMap<Phase::Controller::SpatialModelerInstance::SubmixInfo,Phase::Handle64>::GetUniqueSlot(a1, a2);
  uint64_t v3 = UniqueSlot;
  if (UniqueSlot)
  {
    uint64_t v4 = UniqueSlot[1];
    if (v4)
    {
      if (*(uint64_t *)(v4 + 8) >= 1)
      {
        std::allocate_shared[abi:ne180100]<Phase::Controller::SpatialModelerInstance::SubmixInfo,std::allocator<Phase::Controller::SpatialModelerInstance::SubmixInfo>,Phase::Controller::SpatialModelerInstance::SubmixInfo&,void>(*UniqueSlot, &v8);
        long long v5 = v8;
        long long v8 = 0uLL;
        unint64_t v6 = (std::__shared_weak_count *)v3[1];
        *(_OWORD *)uint64_t v3 = v5;
        if (v6)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v6);
          if (*((void *)&v8 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v8 + 1));
          }
        }
      }
    }
  }
  return v3;
}

uint64_t std::allocate_shared[abi:ne180100]<Phase::Controller::SpatialModelerInstance::SubmixInfo,std::allocator<Phase::Controller::SpatialModelerInstance::SubmixInfo>,Phase::Controller::SpatialModelerInstance::SubmixInfo&,void>@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = (char *)operator new(0x88uLL);
  uint64_t result = std::__shared_ptr_emplace<Phase::Controller::SpatialModelerInstance::SubmixInfo>::__shared_ptr_emplace[abi:ne180100]<Phase::Controller::SpatialModelerInstance::SubmixInfo&,std::allocator<Phase::Controller::SpatialModelerInstance::SubmixInfo>,0>((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_221EC1E14(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Phase::Controller::SpatialModelerInstance::SubmixInfo>::__shared_ptr_emplace[abi:ne180100]<Phase::Controller::SpatialModelerInstance::SubmixInfo&,std::allocator<Phase::Controller::SpatialModelerInstance::SubmixInfo>,0>(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_26D473108;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  long long v5 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 88) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = v5;
  *(_OWORD *)(a1 + 56) = v4;
  *(_OWORD *)(a1 + 40) = v3;
  std::unordered_map<unsigned int,Phase::Controller::OptionalProperties::Property>::unordered_map(a1 + 96, a2 + 72);
  return a1;
}

void sub_221EC1E9C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<unsigned int,Phase::Controller::OptionalProperties::Property>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  long long v5 = *(uint64_t **)(a2 + 16);
  if (v5)
  {
    unint64_t v6 = (void *)(a1 + 16);
    unint64_t v7 = *(void *)(a1 + 8);
    do
    {
      unint64_t v8 = *((unsigned int *)v5 + 4);
      if (v7)
      {
        uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
        v9.i16[0] = vaddlv_u8(v9);
        if (v9.u32[0] > 1uLL)
        {
          unint64_t v2 = *((unsigned int *)v5 + 4);
          if (v7 <= v8) {
            unint64_t v2 = v8 % v7;
          }
        }
        else
        {
          unint64_t v2 = (v7 - 1) & v8;
        }
        unint64_t v10 = *(uint64_t ***)(*(void *)a1 + 8 * v2);
        if (v10)
        {
          for (uint64_t i = *v10; i; uint64_t i = (uint64_t *)*i)
          {
            unint64_t v12 = i[1];
            if (v12 == v8)
            {
              if (*((_DWORD *)i + 4) == v8) {
                goto LABEL_41;
              }
            }
            else
            {
              if (v9.u32[0] > 1uLL)
              {
                if (v12 >= v7) {
                  v12 %= v7;
                }
              }
              else
              {
                v12 &= v7 - 1;
              }
              if (v12 != v2) {
                break;
              }
            }
          }
        }
      }
      unsigned int v13 = operator new(0x50uLL);
      void *v13 = 0;
      v13[1] = v8;
      long long v14 = *((_OWORD *)v5 + 1);
      long long v15 = *((_OWORD *)v5 + 2);
      long long v16 = *((_OWORD *)v5 + 4);
      *((_OWORD *)v13 + 3) = *((_OWORD *)v5 + 3);
      *((_OWORD *)v13 + 4) = v16;
      *((_OWORD *)v13 + 1) = v14;
      *((_OWORD *)v13 + 2) = v15;
      float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
      float v18 = *(float *)(a1 + 32);
      if (!v7 || (float)(v18 * (float)v7) < v17)
      {
        BOOL v19 = (v7 & (v7 - 1)) != 0;
        if (v7 < 3) {
          BOOL v19 = 1;
        }
        unint64_t v20 = v19 | (2 * v7);
        unint64_t v21 = vcvtps_u32_f32(v17 / v18);
        if (v20 <= v21) {
          size_t v22 = v21;
        }
        else {
          size_t v22 = v20;
        }
        std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>(a1, v22);
        unint64_t v7 = *(void *)(a1 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v7 <= v8) {
            unint64_t v2 = v8 % v7;
          }
          else {
            unint64_t v2 = v8;
          }
        }
        else
        {
          unint64_t v2 = (v7 - 1) & v8;
        }
      }
      uint64_t v23 = *(void *)a1;
      unint64_t v24 = *(void **)(*(void *)a1 + 8 * v2);
      if (v24)
      {
        void *v13 = *v24;
      }
      else
      {
        void *v13 = *v6;
        void *v6 = v13;
        *(void *)(v23 + 8 * v2) = v6;
        if (!*v13) {
          goto LABEL_40;
        }
        unint64_t v25 = *(void *)(*v13 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v25 >= v7) {
            v25 %= v7;
          }
        }
        else
        {
          v25 &= v7 - 1;
        }
        unint64_t v24 = (void *)(*(void *)a1 + 8 * v25);
      }
      *unint64_t v24 = v13;
LABEL_40:
      ++*(void *)(a1 + 24);
LABEL_41:
      long long v5 = (uint64_t *)*v5;
    }
    while (v5);
  }
  return a1;
}

void sub_221EC20F0(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Phase::Controller::SubmixSlotMapState<Phase::Controller::SpatialModelerInstance::SubmixInfo>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D473140;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Phase::Controller::SubmixSlotMapState<Phase::Controller::SpatialModelerInstance::SubmixInfo>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D473140;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C938A0);
}

void std::__shared_ptr_emplace<Phase::Controller::SubmixSlotMapState<Phase::Controller::SpatialModelerInstance::SubmixInfo>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t Phase::SpatialModeler::SubmixListenerInput<float>::SubmixListenerInput(uint64_t a1, int a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = 2;
  *(unsigned char *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  uint64_t v6 = 0;
  int v7 = 0;
  Phase::Subbands<float>::Subbands(a1 + 208, &v6, 3);
  uint64_t v3 = 0;
  *(void *)(a1 + 336) = 0;
  *(unsigned char *)(a1 + 344) = 0;
  do
  {
    uint64_t v4 = a1 + v3;
    *(_DWORD *)(v4 + 352) = 0;
    *(void *)(v4 + 360) = 0;
    v3 += 16;
  }
  while (v3 != 128);
  *(void *)(a1 + 480) = 0;
  return a1;
}

void *std::vector<Phase::SpatialModeler::EntityShapeTemplate>::__init_with_size[abi:ne180100]<Phase::SpatialModeler::EntityShapeTemplate*,Phase::SpatialModeler::EntityShapeTemplate*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<Phase::SpatialModeler::EntityShapeTemplate>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Phase::SpatialModeler::EntityShapeTemplate>,Phase::SpatialModeler::EntityShapeTemplate*,Phase::SpatialModeler::EntityShapeTemplate*,Phase::SpatialModeler::EntityShapeTemplate*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_221EC22C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<Phase::SpatialModeler::EntityShapeTemplate>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<Phase::SpatialModeler::EntityShapeTemplate>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493) {
    std::vector<Phase::SpatialModeler::OptionalPropertyDescription>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::SpatialModeler::EntityShapeTemplate>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[56 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Phase::SpatialModeler::EntityShapeTemplate>,Phase::SpatialModeler::EntityShapeTemplate*,Phase::SpatialModeler::EntityShapeTemplate*,Phase::SpatialModeler::EntityShapeTemplate*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a2 + v7;
      *(_DWORD *)(a4 + v7) = *(_DWORD *)(a2 + v7);
      std::unordered_map<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,std::allocator<std::pair<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey const,Phase::OptionsValue>>>::unordered_map(a4 + v7 + 8, a2 + v7 + 8);
      *(_DWORD *)(a4 + v7 + 48) = *(_DWORD *)(a2 + v7 + 48);
      v7 += 56;
    }
    while (v8 + 56 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_221EC23BC(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 48;
    do
    {
      std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::~__hash_table(v4 + v2);
      v2 -= 56;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

std::__shared_weak_count **std::unique_ptr<Phase::Controller::SpatialQueryInstance>::reset[abi:ne180100](std::__shared_weak_count ***a1, std::__shared_weak_count **a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    Phase::Controller::SpatialQueryInstance::~SpatialQueryInstance(result);
    JUMPOUT(0x223C938A0);
  }
  return result;
}

void std::vector<std::reference_wrapper<Phase::SpatialModeler::PriorityQueueEntry>>::reserve(void **a1, unint64_t a2)
{
  if (a2 > ((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    int64_t v3 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int *>>(a2);
    long long v5 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    uint64_t v7 = &v4[8 * v6];
    uint64_t v9 = (char *)*a1;
    uint64_t v8 = (char *)a1[1];
    uint64_t v10 = v5;
    if (v8 != *a1)
    {
      do
      {
        uint64_t v11 = *((void *)v8 - 1);
        v8 -= 8;
        *((void *)v10 - 1) = v11;
        v10 -= 8;
      }
      while (v8 != v9);
      uint64_t v8 = (char *)*a1;
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void *std::get_temporary_buffer[abi:ne180100]<std::reference_wrapper<Phase::SpatialModeler::PriorityQueueEntry>>(uint64_t a1)
{
  if (a1 < 1) {
    return 0;
  }
  if (a1 >= 0xFFFFFFFFFFFFFFFLL) {
    unint64_t v1 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v1 = a1;
  }
  uint64_t v2 = (const std::nothrow_t *)MEMORY[0x263F8C180];
  while (1)
  {
    uint64_t result = operator new(8 * v1, v2);
    if (result) {
      break;
    }
    BOOL v4 = v1 > 1;
    v1 >>= 1;
    if (!v4) {
      return 0;
    }
  }
  return result;
}

uint64_t std::__stable_sort<std::_ClassicAlgPolicy,std::function<BOOL ()(Phase::SpatialModeler::PriorityQueueEntry const&,Phase::SpatialModeler::PriorityQueueEntry const&)> &,std::__wrap_iter<std::reference_wrapper<Phase::SpatialModeler::PriorityQueueEntry> *>>(uint64_t result, uint64_t *a2, uint64_t a3, unint64_t a4, uint64_t *a5, uint64_t a6)
{
  if (a4 >= 2)
  {
    uint64_t v8 = (uint64_t *)result;
    if (a4 == 2)
    {
      uint64_t v9 = *(void *)(a3 + 24);
      if (v9)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v9 + 48))(v9, *(a2 - 1), *v8);
        if (result)
        {
          uint64_t v10 = *v8;
          *uint64_t v8 = *(a2 - 1);
          *(a2 - 1) = v10;
        }
        return result;
      }
LABEL_40:
      std::__throw_bad_function_call[abi:ne180100]();
    }
    if ((uint64_t)a4 > 128)
    {
      size_t v22 = (char *)a5;
      unint64_t v23 = a4 >> 1;
      unint64_t v24 = (uint64_t *)(result + 8 * (a4 >> 1));
      unint64_t v25 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,std::function<BOOL ()(Phase::SpatialModeler::PriorityQueueEntry const&,Phase::SpatialModeler::PriorityQueueEntry const&)> &,std::__wrap_iter<std::reference_wrapper<Phase::SpatialModeler::PriorityQueueEntry> *>>((uint64_t *)result, v24, a3, v25, a5);
        uint8x8_t v26 = (uint64_t *)&v22[8 * v23];
        uint64_t result = (uint64_t)std::__stable_sort_move<std::_ClassicAlgPolicy,std::function<BOOL ()(Phase::SpatialModeler::PriorityQueueEntry const&,Phase::SpatialModeler::PriorityQueueEntry const&)> &,std::__wrap_iter<std::reference_wrapper<Phase::SpatialModeler::PriorityQueueEntry> *>>(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v26);
        unint64_t v27 = &v22[8 * a4];
        uint64_t v28 = v26;
        while (v28 != (uint64_t *)v27)
        {
          uint64_t v29 = *(void *)(a3 + 24);
          if (!v29) {
            goto LABEL_40;
          }
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v29 + 48))(v29, *v28, *(void *)v22);
          if (result) {
            uint64_t v30 = (char *)v28;
          }
          else {
            uint64_t v30 = v22;
          }
          v22 += 8 * (result ^ 1);
          v28 += result;
          *v8++ = *(void *)v30;
          if (v22 == (char *)v26)
          {
            if (v28 != (uint64_t *)v27)
            {
              uint64_t v31 = 0;
              do
              {
                v8[v31] = v28[v31];
                ++v31;
              }
              while (&v28[v31] != (uint64_t *)v27);
            }
            return result;
          }
        }
        if (v22 != (char *)v26)
        {
          uint64_t v32 = 0;
          do
          {
            v8[v32] = *(void *)&v22[v32 * 8];
            ++v32;
          }
          while (&v22[v32 * 8] != (char *)v26);
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,std::function<BOOL ()(Phase::SpatialModeler::PriorityQueueEntry const&,Phase::SpatialModeler::PriorityQueueEntry const&)> &,std::__wrap_iter<std::reference_wrapper<Phase::SpatialModeler::PriorityQueueEntry> *>>(result, v24, a3, v25, a5, a6);
        std::__stable_sort<std::_ClassicAlgPolicy,std::function<BOOL ()(Phase::SpatialModeler::PriorityQueueEntry const&,Phase::SpatialModeler::PriorityQueueEntry const&)> &,std::__wrap_iter<std::reference_wrapper<Phase::SpatialModeler::PriorityQueueEntry> *>>(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v22, a6);
        return std::__inplace_merge<std::_ClassicAlgPolicy,std::function<BOOL ()(Phase::SpatialModeler::PriorityQueueEntry const&,Phase::SpatialModeler::PriorityQueueEntry const&)> &,std::__wrap_iter<std::reference_wrapper<Phase::SpatialModeler::PriorityQueueEntry> *>>((uint64_t)v8, (char *)&v8[a4 >> 1], (char *)a2, a3, a4 >> 1, a4 - (a4 >> 1), v22, a6);
      }
    }
    else if ((uint64_t *)result != a2)
    {
      unint64_t v12 = (void *)(result + 8);
      if ((uint64_t *)(result + 8) != a2)
      {
        uint64_t v13 = 0;
        long long v14 = (void *)result;
        while (1)
        {
          uint64_t v15 = *(void *)(a3 + 24);
          if (!v15) {
            goto LABEL_40;
          }
          long long v16 = v12;
          uint64_t result = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v15 + 48))(v15, *v12, *v14);
          if (result)
          {
            uint64_t v17 = *v16;
            uint64_t v18 = v13;
            while (1)
            {
              *(uint64_t *)((char *)v8 + v18 + 8) = *(uint64_t *)((char *)v8 + v18);
              if (!v18) {
                break;
              }
              uint64_t v19 = *(void *)(a3 + 24);
              if (!v19) {
                goto LABEL_40;
              }
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v19 + 48))(v19, v17, *(uint64_t *)((char *)v8 + v18 - 8));
              v18 -= 8;
              if ((result & 1) == 0)
              {
                unint64_t v20 = (uint64_t *)((char *)v8 + v18 + 8);
                goto LABEL_18;
              }
            }
            unint64_t v20 = v8;
LABEL_18:
            *unint64_t v20 = v17;
          }
          unint64_t v12 = v16 + 1;
          v13 += 8;
          long long v14 = v16;
          if (v16 + 1 == a2) {
            return result;
          }
        }
      }
    }
  }
  return result;
}

uint64_t *std::__stable_sort_move<std::_ClassicAlgPolicy,std::function<BOOL ()(Phase::SpatialModeler::PriorityQueueEntry const&,Phase::SpatialModeler::PriorityQueueEntry const&)> &,std::__wrap_iter<std::reference_wrapper<Phase::SpatialModeler::PriorityQueueEntry> *>>(uint64_t *result, uint64_t *a2, uint64_t a3, unint64_t a4, uint64_t *a5)
{
  if (a4)
  {
    long long v5 = a5;
    uint64_t v7 = result;
    if (a4 == 1)
    {
LABEL_10:
      uint64_t *v5 = *v7;
      return result;
    }
    if (a4 == 2)
    {
      uint64_t v10 = *(void *)(a3 + 24);
      if (v10)
      {
        uint64_t v11 = a2 - 1;
        uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v10 + 48))(v10, *(a2 - 1), *v7);
        if (result) {
          unint64_t v12 = v11;
        }
        else {
          unint64_t v12 = v7;
        }
        *v5++ = *v12;
        if (!result) {
          uint64_t v7 = v11;
        }
        goto LABEL_10;
      }
LABEL_42:
      std::__throw_bad_function_call[abi:ne180100]();
    }
    if ((uint64_t)a4 > 8)
    {
      size_t v22 = &result[a4 >> 1];
      std::__stable_sort<std::_ClassicAlgPolicy,std::function<BOOL ()(Phase::SpatialModeler::PriorityQueueEntry const&,Phase::SpatialModeler::PriorityQueueEntry const&)> &,std::__wrap_iter<std::reference_wrapper<Phase::SpatialModeler::PriorityQueueEntry> *>>(result, v22, a3, a4 >> 1, a5, a4 >> 1);
      uint64_t result = (uint64_t *)std::__stable_sort<std::_ClassicAlgPolicy,std::function<BOOL ()(Phase::SpatialModeler::PriorityQueueEntry const&,Phase::SpatialModeler::PriorityQueueEntry const&)> &,std::__wrap_iter<std::reference_wrapper<Phase::SpatialModeler::PriorityQueueEntry> *>>(&v7[a4 >> 1], a2, a3, a4 - (a4 >> 1), &v5[a4 >> 1], a4 - (a4 >> 1));
      unint64_t v23 = &v7[a4 >> 1];
      while (v23 != a2)
      {
        uint64_t v24 = *(void *)(a3 + 24);
        if (!v24) {
          goto LABEL_42;
        }
        uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v24 + 48))(v24, *v23, *v7);
        if (result) {
          unint64_t v25 = v23;
        }
        else {
          unint64_t v25 = v7;
        }
        v23 += result;
        v7 += result ^ 1;
        *v5++ = *v25;
        if (v7 == v22)
        {
          if (v23 != a2)
          {
            uint64_t v26 = 0;
            do
            {
              v5[v26] = v23[v26];
              ++v26;
            }
            while (&v23[v26] != a2);
          }
          return result;
        }
      }
      if (v7 != v22)
      {
        uint64_t v27 = 0;
        do
        {
          v5[v27] = v7[v27];
          ++v27;
        }
        while (&v7[v27] != v22);
      }
    }
    else if (result != a2)
    {
      uint64_t v13 = result + 1;
      *a5 = *result;
      if (result + 1 != a2)
      {
        uint64_t v14 = 0;
        uint64_t v15 = a5;
        while (1)
        {
          uint64_t v16 = *(void *)(a3 + 24);
          if (!v16) {
            goto LABEL_42;
          }
          uint64_t v17 = v15++;
          uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v16 + 48))(v16, *v13, *v17);
          uint64_t v18 = v15;
          if (result)
          {
            v17[1] = *v17;
            uint64_t v18 = v5;
            if (v17 != v5)
            {
              uint64_t v19 = v14;
              while (1)
              {
                uint64_t v20 = *(void *)(a3 + 24);
                if (!v20) {
                  goto LABEL_42;
                }
                uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v20 + 48))(v20, *v13, *(uint64_t *)((char *)v5 + v19 - 8));
                if (!result) {
                  break;
                }
                *(uint64_t *)((char *)v5 + v19) = *(uint64_t *)((char *)v5 + v19 - 8);
                v19 -= 8;
                if (!v19)
                {
                  uint64_t v18 = v5;
                  goto LABEL_25;
                }
              }
              uint64_t v18 = (uint64_t *)((char *)v5 + v19);
            }
          }
LABEL_25:
          uint64_t v21 = *v13++;
          uint64_t *v18 = v21;
          v14 += 8;
          if (v13 == a2) {
            return result;
          }
        }
      }
    }
  }
  return result;
}

uint64_t std::__inplace_merge<std::_ClassicAlgPolicy,std::function<BOOL ()(Phase::SpatialModeler::PriorityQueueEntry const&,Phase::SpatialModeler::PriorityQueueEntry const&)> &,std::__wrap_iter<std::reference_wrapper<Phase::SpatialModeler::PriorityQueueEntry> *>>(uint64_t result, char *a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  uint64_t v70 = *MEMORY[0x263EF8340];
  uint64_t v67 = a6;
  if (a6)
  {
    uint64_t v11 = (char *)result;
    while (a5 > a8 && v67 > a8)
    {
      if (!a5) {
        return result;
      }
      uint64_t v12 = 0;
      uint64_t v13 = -a5;
      while (1)
      {
        uint64_t v14 = *(void *)(a4 + 24);
        if (!v14) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        uint64_t result = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v14 + 48))(v14, *(void *)a2, *(void *)&v11[v12]);
        if (result) {
          break;
        }
        v12 += 8;
        if (__CFADD__(v13++, 1)) {
          return result;
        }
      }
      if (-v13 >= v67)
      {
        if (v13 == -1)
        {
          uint64_t v60 = *(void *)&v11[v12];
          *(void *)&v11[v12] = *(void *)a2;
          *(void *)a2 = v60;
          return result;
        }
        if (v13 <= 0) {
          uint64_t v23 = -v13;
        }
        else {
          uint64_t v23 = 1 - v13;
        }
        std::__function::__value_func<BOOL ()(Phase::SpatialModeler::PriorityQueueEntry const&,Phase::SpatialModeler::PriorityQueueEntry const&)>::__value_func[abi:ne180100]((uint64_t)v68, a4);
        uint64_t v22 = v23 >> 1;
        uint64_t v18 = &v11[8 * v22 + v12];
        uint64_t v17 = a2;
        if (a2 != a3)
        {
          uint64_t v63 = v22;
          unint64_t v24 = (a3 - a2) >> 3;
          uint64_t v17 = a2;
          do
          {
            if (!v69) {
              std::__throw_bad_function_call[abi:ne180100]();
            }
            unint64_t v25 = &v17[8 * (v24 >> 1)];
            int v26 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v69 + 48))(v69, *(void *)v25, *(void *)v18);
            if (v26) {
              v24 += ~(v24 >> 1);
            }
            else {
              v24 >>= 1;
            }
            if (v26) {
              uint64_t v17 = v25 + 8;
            }
          }
          while (v24);
          uint64_t v22 = v63;
        }
        std::__function::__value_func<BOOL ()(Phase::SpatialModeler::PriorityQueueEntry const&,Phase::SpatialModeler::PriorityQueueEntry const&)>::~__value_func[abi:ne180100](v68);
        uint64_t v62 = (v17 - a2) >> 3;
      }
      else
      {
        if (v67 >= 0) {
          uint64_t v16 = v67;
        }
        else {
          uint64_t v16 = v67 + 1;
        }
        uint64_t v62 = v16 >> 1;
        uint64_t v17 = &a2[8 * (v16 >> 1)];
        uint64_t v18 = a2;
        if (a2 - v11 != v12)
        {
          unint64_t v19 = (a2 - v11 - v12) >> 3;
          uint64_t v18 = &v11[v12];
          do
          {
            uint64_t v20 = *(void *)(a4 + 24);
            if (!v20) {
              std::__throw_bad_function_call[abi:ne180100]();
            }
            uint64_t v21 = &v18[8 * (v19 >> 1)];
            if ((*(unsigned int (**)(uint64_t, void, void))(*(void *)v20 + 48))(v20, *(void *)v17, *(void *)v21))
            {
              v19 >>= 1;
            }
            else
            {
              uint64_t v18 = v21 + 8;
              v19 += ~(v19 >> 1);
            }
          }
          while (v19);
        }
        uint64_t v22 = (v18 - v11 - v12) >> 3;
      }
      if (v18 == a2)
      {
        a2 = v17;
      }
      else
      {
        uint64_t v27 = v17 - a2;
        if (v17 == a2)
        {
          a2 = v18;
        }
        else
        {
          uint64_t v28 = v18 + 8;
          if (v18 + 8 == a2)
          {
            uint64_t v33 = v22;
            uint64_t v34 = *(void *)v18;
            memmove(v18, a2, v17 - a2);
            a2 = &v18[v27];
            *(void *)&v18[v27] = v34;
            uint64_t v22 = v33;
          }
          else
          {
            uint64_t v29 = a2 + 8;
            if (a2 + 8 == v17)
            {
              uint64_t v35 = v22;
              uint64_t v36 = *((void *)v17 - 1);
              a2 = v18 + 8;
              if (v17 - 8 != v18) {
                memmove(v18 + 8, v18, v17 - 8 - v18);
              }
              *(void *)uint64_t v18 = v36;
              uint64_t v22 = v35;
            }
            else
            {
              uint64_t v30 = (a2 - v18) >> 3;
              if (v30 == v27 >> 3)
              {
                do
                {
                  uint64_t v31 = *((void *)v28 - 1);
                  *((void *)v28 - 1) = *((void *)v29 - 1);
                  *((void *)v29 - 1) = v31;
                  if (v28 == a2) {
                    break;
                  }
                  v28 += 8;
                  BOOL v32 = v29 == v17;
                  v29 += 8;
                }
                while (!v32);
              }
              else
              {
                uint64_t v37 = v27 >> 3;
                uint64_t v38 = (a2 - v18) >> 3;
                do
                {
                  uint64_t v39 = v38;
                  uint64_t v38 = v37;
                  uint64_t v37 = v39 % v37;
                }
                while (v37);
                if (v38)
                {
                  __int16 v40 = &v18[8 * v38];
                  do
                  {
                    uint64_t v42 = *((void *)v40 - 1);
                    v40 -= 8;
                    uint64_t v41 = v42;
                    uint64_t v43 = &v40[8 * v30];
                    uint64_t v44 = v40;
                    do
                    {
                      std::vector<std::string>::pointer v45 = v43;
                      *(void *)uint64_t v44 = *(void *)v43;
                      unint64_t v46 = &v43[8 * v30];
                      BOOL v47 = __OFSUB__(v30, (v17 - v43) >> 3);
                      uint64_t v49 = v30 - ((v17 - v43) >> 3);
                      char v48 = (v49 < 0) ^ v47;
                      uint64_t v43 = &v18[8 * v49];
                      if (v48) {
                        uint64_t v43 = v46;
                      }
                      uint64_t v44 = v45;
                    }
                    while (v43 != v40);
                    *(void *)std::vector<std::string>::pointer v45 = v41;
                  }
                  while (v40 != v18);
                }
                a2 = &v18[8 * (v27 >> 3)];
              }
            }
          }
        }
      }
      a5 = -(v22 + v13);
      uint64_t v50 = v67 - v62;
      if (v22 + v62 >= v67 - (v22 + v62) - v13)
      {
        uint64_t result = std::__inplace_merge<std::_ClassicAlgPolicy,std::function<BOOL ()(Phase::SpatialModeler::PriorityQueueEntry const&,Phase::SpatialModeler::PriorityQueueEntry const&)> &,std::__wrap_iter<std::reference_wrapper<Phase::SpatialModeler::PriorityQueueEntry> *>>(a2, v17, a3, a4, -(v22 + v13), v67 - v62, a7, a8);
        a3 = a2;
        a2 = v18;
        v11 += v12;
        uint64_t v50 = v62;
        a5 = v22;
      }
      else
      {
        uint64_t result = std::__inplace_merge<std::_ClassicAlgPolicy,std::function<BOOL ()(Phase::SpatialModeler::PriorityQueueEntry const&,Phase::SpatialModeler::PriorityQueueEntry const&)> &,std::__wrap_iter<std::reference_wrapper<Phase::SpatialModeler::PriorityQueueEntry> *>>(&v11[v12], v18, a2, a4, v22, v62, a7, a8);
        uint64_t v11 = a2;
        a2 = v17;
      }
      uint64_t v67 = v50;
      if (!v50) {
        return result;
      }
    }
    if (a5 <= v67)
    {
      if (v11 != a2)
      {
        unint64_t v56 = 0;
        do
        {
          *(void *)&a7[v56] = *(void *)&v11[v56];
          v56 += 8;
        }
        while (&v11[v56] != a2);
        if (v56)
        {
          uint64_t v57 = a7;
          while (a2 != a3)
          {
            uint64_t v58 = *(void *)(a4 + 24);
            if (!v58) {
              std::__throw_bad_function_call[abi:ne180100]();
            }
            uint64_t result = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v58 + 48))(v58, *(void *)a2, *(void *)v57);
            if (result) {
              unint64_t v59 = a2;
            }
            else {
              unint64_t v59 = v57;
            }
            a2 += 8 * result;
            v57 += 8 * (result ^ 1);
            *(void *)uint64_t v11 = *(void *)v59;
            v11 += 8;
            if (&a7[v56] == v57) {
              return result;
            }
          }
          return (uint64_t)memmove(v11, v57, a7 - v57 + v56);
        }
      }
    }
    else if (a3 != a2)
    {
      uint64_t v51 = 0;
      do
      {
        *(void *)&a7[v51] = *(void *)&a2[v51];
        v51 += 8;
      }
      while (&a2[v51] != a3);
      if (v51)
      {
        uint64_t v52 = &a7[v51];
        uint64_t v53 = a3 - 8;
        while (a2 != v11)
        {
          uint64_t v54 = *(void *)(a4 + 24);
          if (!v54) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          uint64_t result = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v54 + 48))(v54, *((void *)v52 - 1), *((void *)a2 - 1));
          if (result) {
            unint64_t v55 = a2;
          }
          else {
            unint64_t v55 = v52;
          }
          if (result) {
            a2 -= 8;
          }
          else {
            v52 -= 8;
          }
          *(void *)uint64_t v53 = *((void *)v55 - 1);
          v53 -= 8;
          if (v52 == a7) {
            return result;
          }
        }
        uint64_t v61 = 0;
        do
        {
          *(void *)&v53[v61] = *(void *)&v52[v61 - 8];
          v61 -= 8;
        }
        while (&v52[v61] != a7);
      }
    }
  }
  return result;
}

void sub_221EC30D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  std::__function::__value_func<BOOL ()(Phase::SpatialModeler::PriorityQueueEntry const&,Phase::SpatialModeler::PriorityQueueEntry const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<Phase::Controller::SpatialModelerInstance::SubmitCullQueries(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &,Phase::SpatialModeler::Scheduler &,Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::ProfileParams &)::$_0::operator() const(Phase::SpatialModeler::PriorityQueueEntry &,Phase::Controller::SpatialModelerInstance::SubmixInfo const*)::{lambda(Phase::SpatialModeler::Query &)#1},std::allocator<Phase::Controller::SpatialModelerInstance::SubmitCullQueries(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &,Phase::SpatialModeler::Scheduler &,Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::ProfileParams &)::$_0::operator() const(Phase::SpatialModeler::PriorityQueueEntry &,Phase::Controller::SpatialModelerInstance::SubmixInfo const*)::{lambda(Phase::SpatialModeler::Query &)#1}>,void ()(Phase::SpatialModeler::Query &)>::~__func()
{
}

__n128 std::__function::__func<Phase::Controller::SpatialModelerInstance::SubmitCullQueries(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &,Phase::SpatialModeler::Scheduler &,Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::ProfileParams &)::$_0::operator() const(Phase::SpatialModeler::PriorityQueueEntry &,Phase::Controller::SpatialModelerInstance::SubmixInfo const*)::{lambda(Phase::SpatialModeler::Query &)#1},std::allocator<Phase::Controller::SpatialModelerInstance::SubmitCullQueries(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &,Phase::SpatialModeler::Scheduler &,Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::ProfileParams &)::$_0::operator() const(Phase::SpatialModeler::PriorityQueueEntry &,Phase::Controller::SpatialModelerInstance::SubmixInfo const*)::{lambda(Phase::SpatialModeler::Query &)#1}>,void ()(Phase::SpatialModeler::Query &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_26D473178;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<Phase::Controller::SpatialModelerInstance::SubmitCullQueries(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &,Phase::SpatialModeler::Scheduler &,Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::ProfileParams &)::$_0::operator() const(Phase::SpatialModeler::PriorityQueueEntry &,Phase::Controller::SpatialModelerInstance::SubmixInfo const*)::{lambda(Phase::SpatialModeler::Query &)#1},std::allocator<Phase::Controller::SpatialModelerInstance::SubmitCullQueries(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &,Phase::SpatialModeler::Scheduler &,Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::ProfileParams &)::$_0::operator() const(Phase::SpatialModeler::PriorityQueueEntry &,Phase::Controller::SpatialModelerInstance::SubmixInfo const*)::{lambda(Phase::SpatialModeler::Query &)#1}>,void ()(Phase::SpatialModeler::Query &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D473178;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<Phase::Controller::SpatialModelerInstance::SubmitCullQueries(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &,Phase::SpatialModeler::Scheduler &,Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::ProfileParams &)::$_0::operator() const(Phase::SpatialModeler::PriorityQueueEntry &,Phase::Controller::SpatialModelerInstance::SubmixInfo const*)::{lambda(Phase::SpatialModeler::Query &)#1},std::allocator<Phase::Controller::SpatialModelerInstance::SubmitCullQueries(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &,Phase::SpatialModeler::Scheduler &,Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::ProfileParams &)::$_0::operator() const(Phase::SpatialModeler::PriorityQueueEntry &,Phase::Controller::SpatialModelerInstance::SubmixInfo const*)::{lambda(Phase::SpatialModeler::Query &)#1}>,void ()(Phase::SpatialModeler::Query &)>::operator()(void *a1)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  uint64_t v1 = a1[2];
  uint64_t v3 = a1[3];
  unsigned int v4 = atomic_load((unsigned int *)v1);
  if (v4 == 5)
  {
    *(_OWORD *)std::string buf = *(_OWORD *)v3;
    Phase::SortedCommandQueue<Phase::SpatialModeler::PriorityQueue,Phase::SpatialModeler::PriorityQueueCommandType,std::variant<std::monostate,Phase::SpatialModeler::PriorityQueueEntry,Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueClusterIndexUpdate,Phase::SpatialModeler::PriorityQueueGlobals>>::AddCommand<Phase::UniqueObjectId>();
  }
  if (v4 == 4)
  {
    *(_OWORD *)std::string buf = *(_OWORD *)v3;
    Phase::SortedCommandQueue<Phase::SpatialModeler::PriorityQueue,Phase::SpatialModeler::PriorityQueueCommandType,std::variant<std::monostate,Phase::SpatialModeler::PriorityQueueEntry,Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueClusterIndexUpdate,Phase::SpatialModeler::PriorityQueueGlobals>>::AddCommand<Phase::UniqueObjectId>();
  }
  uint64_t v5 = a1[2];
  if (v4 != 3)
  {
    Phase::Controller::SpatialQueryInstance::GetInputAs<Phase::SpatialModeler::SubmixListenerInput<float>>(v5);
    uint64_t v7 = Phase::Controller::SpatialQueryInstance::GetOutputAs<Phase::SpatialModeler::CullabilityOutput<float>>(v1);
    uint64_t v8 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v7)
                                                                                       + 224)));
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = v22;
      sGenerateSpatialModelerInfoString((uint64_t)v22, *(void *)(v2 + 5864));
      if (v23 < 0) {
        uint64_t v9 = (void **)v22[0];
      }
      sGenerateSubmixListenerInputString();
      if (v21 >= 0) {
        uint64_t v10 = &v20;
      }
      else {
        uint64_t v10 = v20;
      }
      sGenerateCullabilityOutputString();
      int v11 = v19;
      uint64_t v12 = (void **)v18;
      std::error_code v15 = *(std::error_code *)(v1 + 48);
      sGenerateErrorCodeString(&__p, &v15);
      uint64_t v13 = &v18;
      if (v11 < 0) {
        uint64_t v13 = v12;
      }
      if (v17 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = *(std::error_code **)&__p.__val_;
      }
      *(_DWORD *)std::string buf = 136316418;
      *(void *)&uint8_t buf[4] = "CvmSpatialModelerInstance.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1543;
      __int16 v25 = 2080;
      int v26 = v9;
      __int16 v27 = 2080;
      uint64_t v28 = v10;
      __int16 v29 = 2080;
      uint64_t v30 = v13;
      __int16 v31 = 2080;
      BOOL v32 = p_p;
      _os_log_impl(&dword_221E5E000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d (%s) - unexpected cull query status. we are about to force a crash. (%s) (%s (%s)", buf, 0x3Au);
      if (v17 < 0) {
        operator delete(*(void **)&__p.__val_);
      }
      if (v19 < 0) {
        operator delete(v18);
      }
      if (v21 < 0) {
        operator delete(v20);
      }
      if (v23 < 0) {
        operator delete(v22[0]);
      }
    }

    std::terminate();
  }
  if (*((float *)Phase::Controller::SpatialQueryInstance::GetOutputAs<Phase::SpatialModeler::CullabilityOutput<float>>(v5)
       + 2) >= 1.0)
  {
    if (*(unsigned char *)(v3 + 48))
    {
      *(_OWORD *)std::string buf = *(_OWORD *)v3;
      Phase::SortedCommandQueue<Phase::SpatialModeler::PriorityQueue,Phase::SpatialModeler::PriorityQueueCommandType,std::variant<std::monostate,Phase::SpatialModeler::PriorityQueueEntry,Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueClusterIndexUpdate,Phase::SpatialModeler::PriorityQueueGlobals>>::AddCommand<Phase::UniqueObjectId>();
    }
    if (!*(unsigned char *)(v3 + 49)) {
      Phase::Controller::RouterCommand::NotifyCulled();
    }
  }
  else
  {
    if (*(unsigned char *)(v3 + 49)) {
      Phase::Controller::RouterCommand::NotifyCulled();
    }
    *(unsigned char *)(v3 + 49) = 0;
    if (!*(unsigned char *)(v3 + 48)) {
      Phase::SortedCommandQueue<Phase::SpatialModeler::PriorityQueue,Phase::SpatialModeler::PriorityQueueCommandType,std::variant<std::monostate,Phase::SpatialModeler::PriorityQueueEntry,Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueClusterIndexUpdate,Phase::SpatialModeler::PriorityQueueGlobals>>::AddCommand<Phase::SpatialModeler::PriorityQueueEntry>();
    }
  }
  *(double *)(v3 + 56) = (double)std::chrono::steady_clock::now().__d_.__rep_ / 1000000000.0;
  atomic_store(0, (unsigned int *)v1);
  uint64_t v6 = *(std::__shared_weak_count **)(v1 + 72);
  *(void *)(v1 + 64) = 0;
  *(void *)(v1 + 72) = 0;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  atomic_store(0, (unsigned int *)(v1 + 104));
}

void sub_221EC37A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a31 < 0) {
    operator delete(a26);
  }

  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueEntry>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueEntry>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueEntry>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueEntry>>>::__erase_unique<Phase::UniqueObjectId>(void *a1, void *a2)
{
  __n128 result = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>(a1, a2);
  if (result)
  {
    return (uint64_t *)std::__hash_table<Phase::Controller::Renderer *,std::hash<Phase::Controller::Renderer *>,std::equal_to<Phase::Controller::Renderer *>,std::allocator<Phase::Controller::Renderer *>>::erase(a1, result);
  }
  return result;
}

void *Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingInput*)#1} const&>(Phase::Logger *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (!a2)
  {
    uint64_t v14 = **(id **)(Phase::Logger::GetInstance(a1) + 112);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v16 = 136315394;
      *(void *)&void v16[4] = "ManagedPtr.hpp";
      *(_WORD *)&v16[12] = 1024;
      *(_DWORD *)&v16[14] = 229;
      _os_log_impl(&dword_221E5E000, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [inCount == 0 is true]: \"Attempting to allocate an array of 0 elements\"", v16, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Attempting to allocate an array of 0 elements");
  }
  uint64_t v7 = (char *)Phase::SystemAllocator::Alloc(*(Phase::SystemAllocator **)a3, (Phase::Logger *)(304 * **(void **)(a3 + 8)), **(std::align_val_t **)(a3 + 16));
  uint64_t v8 = &v7[304 * a2];
  uint64_t v9 = v7;
  do
  {
    *(void *)uint64_t v9 = 0;
    *((void *)v9 + 1) = 0;
    *(void *)uint64_t v16 = 0;
    *(_DWORD *)&v16[8] = 0;
    Phase::Subbands<float>::Subbands((uint64_t)(v9 + 16), v16, 3);
    uint64_t v10 = 0;
    *((void *)v9 + 18) = 0;
    v9[152] = 0;
    do
    {
      int v11 = &v9[v10];
      *((_DWORD *)v11 + 40) = 0;
      *((void *)v11 + 21) = 0;
      v10 += 16;
    }
    while (v10 != 128);
    *((void *)v9 + 36) = -1;
    *((void *)v9 + 37) = 0;
    v9 += 304;
  }
  while (v9 != v8);
  uint64_t v12 = *a4;
  *(void *)uint64_t v16 = &unk_26D4731C0;
  *(void *)&v16[8] = v12;
  char v17 = v16;
  *(void *)a1 = v7;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)a1 + 8, (uint64_t)v16);
  return std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v16);
}

void sub_221EC3A34(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *Phase::SystemAllocator::Alloc(Phase::SystemAllocator *this, Phase::Logger *a2, std::align_val_t a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (!a2) {
    return 0;
  }
  if (a3)
  {
    if ((a3 & (a3 - 1)) == 0)
    {
      return operator new((size_t)a2, a3);
    }
    uint64_t v5 = **(id **)(Phase::Logger::GetInstance(this) + 176);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      int v6 = 136315650;
      uint64_t v7 = "SystemAllocator.hpp";
      __int16 v8 = 1024;
      int v9 = 47;
      __int16 v10 = 2048;
      int v11 = a2;
      _os_log_impl(&dword_221E5E000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d Error allocating memory - alignment must be power of two. Alignment requested %zu", (uint8_t *)&v6, 0x1Cu);
    }
    return 0;
  }

  return operator new((size_t)a2);
}

void std::__function::__func<std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingInput*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingInput*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingInput*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingInput*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::~__func()
{
}

void *std::__function::__func<std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingInput*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingInput*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingInput*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingInput*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26D4731C0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingInput*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingInput*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingInput*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingInput*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D4731C0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingInput*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingInput*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingInput*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingInput*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::operator()(uint64_t a1, void **a2)
{
}

uint64_t *std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>>::operator=[abi:ne180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = *a1;
  *a1 = v4;
  if (v5) {
    std::function<void ()(void *)>::operator()((uint64_t)(a1 + 1), v5);
  }
  std::__function::__value_func<void ()(void *)>::operator=[abi:ne180100](a1 + 1, (uint64_t)(a2 + 1));
  return a1;
}

void std::vector<Phase::UniqueObjectId>::__append(void **a1, unint64_t a2)
{
  int v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 4);
    if (v9 >> 60) {
      std::vector<Phase::MetaParamValue>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::UniqueObjectId>>(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[16 * v10];
    std::error_code v15 = &v13[16 * v12];
    bzero(v14, 16 * a2);
    uint64_t v16 = &v14[16 * a2];
    uint64_t v18 = (char *)*a1;
    char v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v17 - 1);
        v14 -= 16;
        v17 -= 16;
      }
      while (v17 != v18);
      char v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

uint64_t std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>>>::remove(uint64_t result, void *a2, void *a3)
{
  int8x8_t v3 = (int8x8_t)a2[1];
  unint64_t v4 = a3[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  int v6 = *(void **)(*a2 + 8 * v4);
  do
  {
    uint64_t v7 = v6;
    int v6 = (void *)*v6;
  }
  while (v6 != a3);
  if (v7 == a2 + 2) {
    goto LABEL_18;
  }
  unint64_t v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v3) {
      v8 %= *(void *)&v3;
    }
  }
  else
  {
    v8 &= *(void *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a3) {
      goto LABEL_19;
    }
    unint64_t v9 = *(void *)(*a3 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }
    else
    {
      v9 &= *(void *)&v3 - 1;
    }
    if (v9 != v4) {
LABEL_19:
    }
      *(void *)(*a2 + 8 * v4) = 0;
  }
  uint64_t v10 = *a3;
  if (*a3)
  {
    unint64_t v11 = *(void *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v3) {
        v11 %= *(void *)&v3;
      }
    }
    else
    {
      v11 &= *(void *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(void *)(*a2 + 8 * v11) = v7;
      uint64_t v10 = *a3;
    }
  }
  void *v7 = v10;
  *a3 = 0;
  --a2[3];
  *(void *)__n128 result = a3;
  *(void *)(result + 8) = a2 + 2;
  *(unsigned char *)(result + 16) = 1;
  return result;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<Phase::UniqueObjectId const,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>>>::__deallocate_node(*(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void *std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>>>::find<Phase::UniqueObjectId>(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v3 = 0;
  unint64_t v4 = 0xCBF29CE484222325;
  do
    unint64_t v4 = 0x100000001B3 * (v4 ^ *((char *)a3 + v3++));
  while (v3 != 16);
  if (!a2) {
    return 0;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = v4;
    if (v4 >= a2) {
      unint64_t v6 = v4 % a2;
    }
  }
  else
  {
    unint64_t v6 = v4 & (a2 - 1);
  }
  uint64_t v7 = *(void **)(a1 + 8 * v6);
  if (!v7) {
    return 0;
  }
  __n128 result = (void *)*v7;
  if (*v7)
  {
    do
    {
      unint64_t v9 = result[1];
      if (v9 == v4)
      {
        if (result[2] == *a3 && result[3] == a3[1]) {
          return result;
        }
      }
      else
      {
        if (v5.u32[0] > 1uLL)
        {
          if (v9 >= a2) {
            v9 %= a2;
          }
        }
        else
        {
          v9 &= a2 - 1;
        }
        if (v9 != v6) {
          return 0;
        }
      }
      __n128 result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void std::__function::__func<Phase::Controller::SpatialModelerInstance::SubmitSpatialQueries(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &,Phase::SpatialModeler::Scheduler &,Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::ProfileParams &)::$_0,std::allocator<Phase::Controller::SpatialModelerInstance::SubmitSpatialQueries(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &,Phase::SpatialModeler::Scheduler &,Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::ProfileParams &)::$_0>,void ()(Phase::SpatialModeler::Query &)>::~__func()
{
}

__n128 std::__function::__func<Phase::Controller::SpatialModelerInstance::SubmitSpatialQueries(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &,Phase::SpatialModeler::Scheduler &,Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::ProfileParams &)::$_0,std::allocator<Phase::Controller::SpatialModelerInstance::SubmitSpatialQueries(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &,Phase::SpatialModeler::Scheduler &,Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::ProfileParams &)::$_0>,void ()(Phase::SpatialModeler::Query &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_26D473208;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<Phase::Controller::SpatialModelerInstance::SubmitSpatialQueries(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &,Phase::SpatialModeler::Scheduler &,Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::ProfileParams &)::$_0,std::allocator<Phase::Controller::SpatialModelerInstance::SubmitSpatialQueries(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &,Phase::SpatialModeler::Scheduler &,Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::ProfileParams &)::$_0>,void ()(Phase::SpatialModeler::Query &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D473208;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<Phase::Controller::SpatialModelerInstance::SubmitSpatialQueries(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &,Phase::SpatialModeler::Scheduler &,Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::ProfileParams &)::$_0,std::allocator<Phase::Controller::SpatialModelerInstance::SubmitSpatialQueries(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &,Phase::SpatialModeler::Scheduler &,Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::ProfileParams &)::$_0>,void ()(Phase::SpatialModeler::Query &)>::operator()(uint64_t a1)
{
  uint64_t v82 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 32);
  long long v67 = *(_OWORD *)(a1 + 16);
  uint64_t v3 = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>>>::find<Phase::UniqueObjectId>(*(void *)(v2 + 984), *(void *)(v2 + 992), &v67);
  if (!v3)
  {
    __int16 v27 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(0)
                                                                                        + 224)));
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      sGenerateSpatialModelerInfoString((uint64_t)&v79, *(void *)(v1 + 5864));
      __int16 v29 = v81 >= 0 ? (void **)&v79 : v79;
      *(_DWORD *)std::string buf = 136315650;
      *(void *)&uint8_t buf[4] = "CvmSpatialModelerInstance.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2416;
      *(_WORD *)&unsigned char buf[18] = 2080;
      long long v72 = v29;
      _os_log_impl(&dword_221E5E000, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d (%s) - invalid spatial query in finish callback", buf, 0x1Cu);
      if (v81 < 0) {
        operator delete(v79);
      }
    }
    goto LABEL_40;
  }
  unint64_t v4 = v3;
  unsigned int v5 = atomic_load((unsigned int *)v3[4]);
  if (v5 == 5)
  {
    uint64_t v30 = Phase::Controller::SpatialQueryInstance::GetInputAs<Phase::SpatialModeler::RenderGroupInput<float>>(v3[4]);
    __int16 v31 = Phase::Controller::SpatialQueryInstance::GetOutputAs<Phase::SpatialModeler::DirectionalMetadataOutput<float>>(v4[4]);
    BOOL v32 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v31)
                                                                                        + 224)));
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      uint64_t v33 = *(void *)(v1 + 5864);
      uint64_t v34 = &v79;
      sGenerateSpatialModelerInfoString((uint64_t)&v79, v33);
      if (v81 < 0) {
        uint64_t v34 = (void ***)v79;
      }
      sGenerateRenderGroupInputString((uint64_t)&v68, (uint64_t)v30);
      if (v70 >= 0) {
        uint64_t v35 = &v68;
      }
      else {
        uint64_t v35 = v68;
      }
      sGenerateDirectionalMetadataOutputString();
      int v36 = v66;
      uint64_t v37 = (void **)v64;
      std::error_code v61 = *(std::error_code *)(v4[4] + 48);
      sGenerateErrorCodeString(&__p, &v61);
      uint64_t v38 = &v64;
      if (v36 < 0) {
        uint64_t v38 = v37;
      }
      if (v63 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = *(std::error_code **)&__p.__val_;
      }
      *(_DWORD *)std::string buf = 136316418;
      *(void *)&uint8_t buf[4] = "CvmSpatialModelerInstance.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2504;
      *(_WORD *)&unsigned char buf[18] = 2080;
      long long v72 = v34;
      __int16 v73 = 2080;
      uint64_t v74 = v35;
      __int16 v75 = 2080;
      char v76 = v38;
      __int16 v77 = 2080;
      int v78 = p_p;
      _os_log_impl(&dword_221E5E000, v32, OS_LOG_TYPE_ERROR, "%25s:%-5d (%s) - spatial query failed (%s) (%s) (%s)", buf, 0x3Au);
      if (v63 < 0) {
        operator delete(*(void **)&__p.__val_);
      }
      if (v66 < 0) {
        operator delete(v64);
      }
      if (v70 < 0) {
        operator delete(v68);
      }
      if (v81 < 0) {
        operator delete(v79);
      }
    }
    goto LABEL_87;
  }
  if (v5 == 4)
  {
    __int16 v40 = Phase::Controller::SpatialQueryInstance::GetInputAs<Phase::SpatialModeler::RenderGroupInput<float>>(v3[4]);
    uint64_t v41 = Phase::Controller::SpatialQueryInstance::GetOutputAs<Phase::SpatialModeler::DirectionalMetadataOutput<float>>(v4[4]);
    BOOL v32 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v41)
                                                                                        + 224)));
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      uint64_t v42 = *(void *)(v1 + 5864);
      uint64_t v43 = &v79;
      sGenerateSpatialModelerInfoString((uint64_t)&v79, v42);
      if (v81 < 0) {
        uint64_t v43 = (void ***)v79;
      }
      sGenerateRenderGroupInputString((uint64_t)&v68, (uint64_t)v40);
      if (v70 >= 0) {
        uint64_t v44 = &v68;
      }
      else {
        uint64_t v44 = v68;
      }
      sGenerateDirectionalMetadataOutputString();
      int v45 = v66;
      unint64_t v46 = (void **)v64;
      std::error_code v61 = *(std::error_code *)(v4[4] + 48);
      sGenerateErrorCodeString(&__p, &v61);
      BOOL v47 = &v64;
      if (v45 < 0) {
        BOOL v47 = v46;
      }
      if (v63 >= 0) {
        char v48 = &__p;
      }
      else {
        char v48 = *(std::error_code **)&__p.__val_;
      }
      *(_DWORD *)std::string buf = 136316418;
      *(void *)&uint8_t buf[4] = "CvmSpatialModelerInstance.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2486;
      *(_WORD *)&unsigned char buf[18] = 2080;
      long long v72 = v43;
      __int16 v73 = 2080;
      uint64_t v74 = v44;
      __int16 v75 = 2080;
      char v76 = v47;
      __int16 v77 = 2080;
      int v78 = v48;
      _os_log_impl(&dword_221E5E000, v32, OS_LOG_TYPE_ERROR, "%25s:%-5d (%s) - spatial query failed (%s) (%s) (%s)", buf, 0x3Au);
      if (v63 < 0) {
        operator delete(*(void **)&__p.__val_);
      }
      if (v66 < 0) {
        operator delete(v64);
      }
      if (v70 < 0) {
        operator delete(v68);
      }
      if (v81 < 0) {
        operator delete(v79);
      }
    }
LABEL_87:

    uint64_t v49 = v4[4];
    atomic_store(0, (unsigned int *)v49);
    uint64_t v50 = *(std::__shared_weak_count **)(v49 + 72);
    *(void *)(v49 + 64) = 0;
    *(void *)(v49 + 72) = 0;
    if (v50) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v50);
    }
    atomic_store(0, (unsigned int *)(v49 + 104));
    v4[6] = v4[5];
    return;
  }
  if (v5 != 3)
  {
    uint64_t v51 = Phase::Controller::SpatialQueryInstance::GetInputAs<Phase::SpatialModeler::RenderGroupInput<float>>(v3[4]);
    uint64_t v52 = Phase::Controller::SpatialQueryInstance::GetOutputAs<Phase::SpatialModeler::DirectionalMetadataOutput<float>>(v4[4]);
    uint64_t v53 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v52)
                                                                                        + 224)));
    if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
    {
      uint64_t v54 = *(void *)(v1 + 5864);
      unint64_t v55 = &v79;
      sGenerateSpatialModelerInfoString((uint64_t)&v79, v54);
      if (v81 < 0) {
        unint64_t v55 = (void ***)v79;
      }
      sGenerateRenderGroupInputString((uint64_t)&v68, (uint64_t)v51);
      if (v70 >= 0) {
        unint64_t v56 = &v68;
      }
      else {
        unint64_t v56 = v68;
      }
      sGenerateDirectionalMetadataOutputString();
      int v57 = v66;
      uint64_t v58 = (void **)v64;
      std::error_code v61 = *(std::error_code *)(v4[4] + 48);
      sGenerateErrorCodeString(&__p, &v61);
      unint64_t v59 = &v64;
      if (v57 < 0) {
        unint64_t v59 = v58;
      }
      if (v63 >= 0) {
        uint64_t v60 = &__p;
      }
      else {
        uint64_t v60 = *(std::error_code **)&__p.__val_;
      }
      *(_DWORD *)std::string buf = 136316418;
      *(void *)&uint8_t buf[4] = "CvmSpatialModelerInstance.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2522;
      *(_WORD *)&unsigned char buf[18] = 2080;
      long long v72 = v55;
      __int16 v73 = 2080;
      uint64_t v74 = v56;
      __int16 v75 = 2080;
      char v76 = v59;
      __int16 v77 = 2080;
      int v78 = v60;
      _os_log_impl(&dword_221E5E000, v53, OS_LOG_TYPE_ERROR, "%25s:%-5d (%s) - unexpected spatial query status. we are about to force a crash. (%s) (%s) (%s)", buf, 0x3Au);
      if (v63 < 0) {
        operator delete(*(void **)&__p.__val_);
      }
      if (v66 < 0) {
        operator delete(v64);
      }
      if (v70 < 0) {
        operator delete(v68);
      }
      if (v81 < 0) {
        operator delete(v79);
      }
    }

    std::terminate();
  }
  unint64_t v6 = Phase::Controller::SpatialQueryInstance::GetInputAs<Phase::SpatialModeler::RenderGroupInput<float>>(v3[4]);
  updated = (float **)Phase::Controller::SpatialQueryInstance::GetOutputAs<Phase::SpatialModeler::DirectionalMetadataOutput<float>>(v4[4]);
  if (*((unsigned char *)updated + 200))
  {
    unint64_t v8 = updated;
    uint64_t v9 = v2 + 1600;
    uint64_t v10 = updated[13];
    float v11 = v10[4];
    float v12 = v10[5];
    float v13 = v10[6];
    if (v11 <= 0.0) {
      float v11 = COERCE_FLOAT(1);
    }
    float v14 = (float)((float)(logf(v11) * 8.6859) / 10.0) * 10.0;
    *(float *)&unint64_t v79 = v14;
    if (v12 <= 0.0) {
      float v15 = COERCE_FLOAT(1);
    }
    else {
      float v15 = v12;
    }
    float v16 = (float)((float)(logf(v15) * 8.6859) / 10.0) * 10.0;
    *((float *)&v79 + 1) = v16;
    if (v13 <= 0.0) {
      float v17 = COERCE_FLOAT(1);
    }
    else {
      float v17 = v13;
    }
    float v18 = logf(v17);
    uint64_t v19 = 0;
    unint64_t v20 = 0;
    unint64_t v21 = 0;
    float v22 = (float)((float)(v18 * 8.6859) / 10.0) * 10.0;
    float v80 = v22;
    *(void *)std::string buf = 0;
    *(_DWORD *)&buf[8] = 0;
    do
    {
      if (v21 <= 2)
      {
        unint64_t v20 = v21 + 1;
        *(_DWORD *)&buf[4 * v21++] = *(_DWORD *)((char *)&v79 + v19);
      }
      v19 += 4;
    }
    while (v19 != 12);
    if (v20 <= 2) {
      bzero(&buf[4 * v20], 12 - 4 * v20);
    }
    unint64_t v64 = *(void **)buf;
    int v65 = *(_DWORD *)&buf[8];
    BOOL v23 = *((void *)v6 + 67) == *(void *)buf && *((_DWORD *)v6 + 136) == (unint64_t)*(unsigned int *)&buf[8];
    if (!v23 || *((float *)v6 + 137) != *v8[7])
    {
      uint64_t v24 = 0;
      unint64_t v25 = 0;
      unint64_t v26 = 0;
      *(void *)std::string buf = v8[24];
      uint64_t v68 = (void *)__PAIR64__(LODWORD(v16), LODWORD(v14));
      float v69 = v22;
      unint64_t v79 = 0;
      float v80 = 0.0;
      do
      {
        if (v26 <= 2)
        {
          unint64_t v25 = v26 + 1;
          *((_DWORD *)&v79 + v26++) = *(_DWORD *)((char *)&v68 + v24);
        }
        v24 += 4;
      }
      while (v24 != 12);
      if (v25 <= 2) {
        bzero((char *)&v79 + 4 * v25, 12 - 4 * v25);
      }
      *(void *)&buf[8] = v79;
      *(float *)&uint8_t buf[16] = v80;
      *(float *)&long long v72 = *v8[7];
      updated = (float **)Phase::Controller::RenderGroupMgr::UpdatePointSourceHistory(v9, *((void *)v6 + 24), *((void *)v6 + 25), (long long *)buf);
    }
  }
  if (v4[5] == v4[6])
  {
    __int16 v27 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance((Phase::Logger *)updated)
                                                                                        + 224)));
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      sGenerateSpatialModelerInfoString((uint64_t)&v79, *(void *)(v1 + 5864));
      if (v81 >= 0) {
        uint64_t v28 = &v79;
      }
      else {
        uint64_t v28 = (void ***)v79;
      }
      *(_DWORD *)std::string buf = 136315650;
      *(void *)&uint8_t buf[4] = "CvmSpatialModelerInstance.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2470;
      *(_WORD *)&unsigned char buf[18] = 2080;
      long long v72 = v28;
      _os_log_impl(&dword_221E5E000, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d (%s) - empty spatial query in finish callback", buf, 0x1Cu);
      if (v81 < 0) {
        operator delete(v79);
      }
    }
LABEL_40:
  }
}

void sub_221EC49F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (*(char *)(v29 - 137) < 0) {
    operator delete(*(void **)(v29 - 160));
  }

  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>(unint64_t a1)
{
  if (a1 >> 59) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(32 * a1);
}

void std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::Controller::SpatialQueryInstance>>>>::__deallocate_node(a1, *(std::__shared_weak_count ****)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_0,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_0>,void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::~__func()
{
}

__n128 std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_0,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_0>,void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26D473250;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_0,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_0>,void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D473250;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_0,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_0>,void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::operator()(uint64_t a1, Phase::SpatialModeler::PriorityQueue *a2)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  if (*((void *)a2 + 8))
  {
    uint64_t v3 = *(void *)(a1 + 16);
    uint64_t v26 = *(void *)(a1 + 8);
    Phase::Controller::SpatialModelerInstance::GetLatestSubmixState((Phase::Controller::SpatialModelerInstance *)&v27, v26);
    if (v29)
    {
      unint64_t v4 = v27;
      while (!*v4)
      {
        v4 += 3;
        if (v4 >= &v27[3 * v29]) {
          goto LABEL_6;
        }
      }
      Phase::Controller::SpatialModelerInstance::GetAvailableComputeForGraph(v26, (int *)v3);
      uint64_t v30 = 0;
      __int16 v31 = 0;
      unint64_t v32 = 0;
      std::vector<std::reference_wrapper<Phase::SpatialModeler::PriorityQueueEntry>>::reserve(&v30, *((void *)a2 + 8));
      unsigned int v5 = (void *)*((void *)a2 + 7);
      if (v5)
      {
        unint64_t v6 = v31;
        do
        {
          uint64_t v7 = v5 + 4;
          if ((unint64_t)v6 >= v32)
          {
            uint64_t v9 = (char *)v30;
            uint64_t v10 = (v6 - (unsigned char *)v30) >> 3;
            unint64_t v11 = v10 + 1;
            if ((unint64_t)(v10 + 1) >> 61) {
              std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v12 = v32 - (void)v30;
            if ((uint64_t)(v32 - (void)v30) >> 2 > v11) {
              unint64_t v11 = v12 >> 2;
            }
            if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v13 = v11;
            }
            if (v13) {
              unint64_t v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int *>>(v13);
            }
            else {
              uint64_t v14 = 0;
            }
            float v15 = (char *)(v13 + 8 * v10);
            *(void *)float v15 = v7;
            unint64_t v8 = v15 + 8;
            if (v6 != v9)
            {
              do
              {
                uint64_t v16 = *((void *)v6 - 1);
                v6 -= 8;
                *((void *)v15 - 1) = v16;
                v15 -= 8;
              }
              while (v6 != v9);
              unint64_t v6 = (char *)v30;
            }
            uint64_t v30 = v15;
            unint64_t v32 = v13 + 8 * v14;
            if (v6) {
              operator delete(v6);
            }
          }
          else
          {
            *(void *)unint64_t v6 = v7;
            unint64_t v8 = v6 + 8;
          }
          __int16 v31 = v8;
          unsigned int v5 = (void *)*v5;
          unint64_t v6 = v8;
        }
        while (v5);
      }
      float v17 = (uint64_t *)v30;
      if (*((void *)a2 + 26))
      {
        float v18 = (uint64_t *)v31;
        std::__function::__value_func<BOOL ()(Phase::SpatialModeler::PriorityQueueEntry const&,Phase::SpatialModeler::PriorityQueueEntry const&)>::__value_func[abi:ne180100]((uint64_t)v33, (uint64_t)a2 + 184);
        if ((char *)v18 - (char *)v17 < 1025)
        {
          uint64_t v19 = 0;
          uint64_t v21 = 0;
        }
        else
        {
          uint64_t v19 = (uint64_t *)std::get_temporary_buffer[abi:ne180100]<std::reference_wrapper<Phase::SpatialModeler::PriorityQueueEntry>>(v18 - v17);
          uint64_t v21 = v20;
        }
        std::__stable_sort<std::_ClassicAlgPolicy,std::function<BOOL ()(Phase::SpatialModeler::PriorityQueueEntry const&,Phase::SpatialModeler::PriorityQueueEntry const&)> &,std::__wrap_iter<std::reference_wrapper<Phase::SpatialModeler::PriorityQueueEntry> *>>((uint64_t)v17, v18, (uint64_t)v33, v18 - v17, v19, v21);
        if (v19) {
          operator delete(v19);
        }
        std::__function::__value_func<BOOL ()(Phase::SpatialModeler::PriorityQueueEntry const&,Phase::SpatialModeler::PriorityQueueEntry const&)>::~__value_func[abi:ne180100](v33);
      }
      else
      {
        float v18 = (uint64_t *)v31;
      }
      if (v17 != v18)
      {
        unsigned int v22 = v29;
        do
        {
          BOOL v23 = (void *)*v17;
          uint64_t v24 = *(void *)(*v17 + 16);
          if (v22 > v24
            && HIDWORD(v27[3 * v24 + 2]) == HIDWORD(v24)
            && v27[3 * *(void *)(*v17 + 16)])
          {
            operator new();
          }
          uint64_t v25 = *((void *)a2 + 22);
          if (v25) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v25 + 48))(v25, *v17);
          }
          std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueEntry>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueEntry>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueEntry>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueEntry>>>::__erase_unique<Phase::UniqueObjectId>((void *)a2 + 5, v23);
          ++v17;
        }
        while (v17 != v18);
        float v17 = (uint64_t *)v30;
      }
      if (v17) {
        operator delete(v17);
      }
      atomic_store(0, (unint64_t *)(v3 + 752));
    }
    else
    {
LABEL_6:
      Phase::SpatialModeler::PriorityQueue::ClearEntries(a2, 1);
    }
    if (v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v28);
    }
  }
}

void sub_221EC560C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::__shared_weak_count *a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a40 < 0) {
    operator delete(__p);
  }
  if (a46 < 0) {
    operator delete(a41);
  }

  if (a29) {
    operator delete(a29);
  }
  if (a27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a27);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_1,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_1>,void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::~__func()
{
}

__n128 std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_1,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_1>,void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26D473298;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_1,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_1>,void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D473298;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_1,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_1>,void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::operator()(uint64_t a1)
{
}

void std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_2,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_2>,void ()(Phase::SpatialModeler::PriorityQueueEntry &)>::~__func()
{
}

__n128 std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_2,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_2>,void ()(Phase::SpatialModeler::PriorityQueueEntry &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26D4732E0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_2,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_2>,void ()(Phase::SpatialModeler::PriorityQueueEntry &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D4732E0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

const std::error_category *std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_2,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_2>,void ()(Phase::SpatialModeler::PriorityQueueEntry &)>::operator()(const std::error_category *result, uint64_t a2)
{
  uint64_t v2 = (int8x8_t *)result[2].__vftable;
  int8x8_t v3 = v2[98];
  if (v3)
  {
    unint64_t v4 = *(void *)(a2 + 16);
    uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
    v5.i16[0] = vaddlv_u8(v5);
    if (v5.u32[0] > 1uLL)
    {
      unint64_t v6 = *(void *)(a2 + 16);
      if (*(void *)&v3 <= v4) {
        unint64_t v6 = v4 % *(void *)&v3;
      }
    }
    else
    {
      unint64_t v6 = (*(void *)&v3 - 1) & v4;
    }
    uint64_t v7 = *(void **)(*(void *)&v2[97] + 8 * v6);
    if (v7)
    {
      for (uint64_t i = (void *)*v7; i; uint64_t i = (void *)*i)
      {
        unint64_t v9 = i[1];
        if (v9 == v4)
        {
          if (i[2] == v4)
          {
            uint64_t v10 = (unsigned int *)i[3];
            if (v10)
            {
              if (atomic_load(v10 + 26))
              {
                unsigned int v12 = atomic_load(v10);
                if (v12 - 1 <= 1)
                {
                  unsigned int v13 = v12;
                  atomic_compare_exchange_strong((atomic_uint *volatile)v10, &v13, 6u);
                  if (v13 == v12) {
                    return std::system_category();
                  }
                }
              }
            }
            return result;
          }
        }
        else
        {
          if (v5.u32[0] > 1uLL)
          {
            if (v9 >= *(void *)&v3) {
              v9 %= *(void *)&v3;
            }
          }
          else
          {
            v9 &= *(void *)&v3 - 1;
          }
          if (v9 != v6) {
            return result;
          }
        }
      }
    }
  }
  return result;
}

void std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_3,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_3>,BOOL ()(Phase::SpatialModeler::PriorityQueueEntry const&,Phase::SpatialModeler::PriorityQueueEntry const&)>::~__func()
{
}

void *std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_3,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_3>,BOOL ()(Phase::SpatialModeler::PriorityQueueEntry const&,Phase::SpatialModeler::PriorityQueueEntry const&)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_26D473328;
  return result;
}

void std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_3,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_3>,BOOL ()(Phase::SpatialModeler::PriorityQueueEntry const&,Phase::SpatialModeler::PriorityQueueEntry const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D473328;
}

BOOL std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_3,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_3>,BOOL ()(Phase::SpatialModeler::PriorityQueueEntry const&,Phase::SpatialModeler::PriorityQueueEntry const&)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(double *)(a2 + 56) < *(double *)(a3 + 56);
}

void std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_4,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_4>,void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::~__func()
{
}

__n128 std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_4,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_4>,void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26D473370;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_4,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_4>,void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D473370;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_4,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_4>,void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::operator()(void *a1, void *a2, void *a3)
{
  __src[37] = *(void ***)MEMORY[0x263EF8340];
  if (a2[8])
  {
    uint64_t v5 = a1[1];
    uint64_t v118 = *(unsigned __int8 **)(v5 + 5872);
    uint64_t v6 = a1[3];
    uint64_t v126 = a1[2];
    Phase::Controller::RenderGroupMgr::LoadFreshData((atomic_ullong *)(v126 + 1024));
    uint64_t v128 = v5;
    Phase::Controller::SpatialModelerInstance::GetLatestSubmixState((Phase::Controller::SpatialModelerInstance *)&v134, v5);
    if (v136)
    {
      uint64_t v121 = a2 + 5;
      uint64_t v122 = (void *)(v126 + 960);
      std::string::size_type v123 = (uint64_t *)(v6 + 40);
      uint64_t v7 = v134;
      while (!*v7)
      {
        v7 += 3;
        if (v7 >= &v134[3 * v136]) {
          goto LABEL_6;
        }
      }
      unint64_t v8 = (void *)a2[8];
      if (v8)
      {
        unint64_t v9 = Phase::Controller::SpatialQueryInstance::GetInputAs<Phase::SpatialModeler::ClusterSetInput<float>>(v126 + 816);
        long long v10 = *(_OWORD *)v123;
        long long v11 = *(_OWORD *)(v6 + 56);
        *((void *)v9 + 5) = *(void *)(v6 + 72);
        *(_OWORD *)((char *)v9 + 24) = v11;
        *(_OWORD *)((char *)v9 + 8) = v10;
        uint64_t v125 = (uint64_t)v9;
        double v12 = *((double *)v9 + 5);
        Phase::Controller::SpatialModelerInstance::GetAvailableComputeForGraph(v5, (int *)v126);
        double v14 = v13;
        Phase::Controller::SpatialModelerInstance::GetParams((Phase::Logger *)v5, *(_DWORD *)v126, 0);
        double v15 = *((double *)Phase::Controller::SpatialModelerInstance::GetParams((Phase::Logger *)v5, *(_DWORD *)v126, 0)+ 2);
        unint64_t v16 = *(void *)(v126 + 72);
        Phase::Controller::SpatialModelerInstance::GetParams((Phase::Logger *)v5, *(_DWORD *)v126, 1);
        Params = Phase::Controller::SpatialModelerInstance::GetParams((Phase::Logger *)v5, *(_DWORD *)v126, 1);
        if (*(_DWORD *)(v5 + 528) != 2) {
          std::terminate();
        }
        double v18 = *((double *)Params + 2);
        Phase::Controller::SpatialModelerInstance::GetParams((Phase::Logger *)v5, *(_DWORD *)v126, 2);
        double v19 = *((double *)Phase::Controller::SpatialModelerInstance::GetParams((Phase::Logger *)v5, *(_DWORD *)v126, 2)+ 2)* 0.0;
        if (v19 <= 0.0)
        {
          int v20 = 0x7FFFFFFF;
        }
        else
        {
          int v20 = llround((v14 + v15 * -0.0 * (double)v16 + v18 * -0.0) / v19);
          if (v20 <= 1) {
            int v20 = 1;
          }
        }
        uint64_t v115 = v6;
        unint64_t v120 = a2;
        if (v20 >= (int)v12) {
          int v20 = (int)v12;
        }
        *(double *)(v125 + 40) = (double)v20;
        std::error_code __p = v8;
        v129[0] = (void *)16;
        *(void *)&long long v131 = v5 + 5848;
        *((void *)&v131 + 1) = &__p;
        *(void *)&long long v132 = v129;
        int v114 = (void *)(v5 + 5848);
        uint64_t v141 = v5 + 5848;
        Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingInput*)#1} const&>((Phase::Logger *)&v142, (uint64_t)v8, (uint64_t)&v131, &v141);
        uint64_t v21 = (void **)v142;
        uint64_t v142 = 0;
        __src[0] = v21;
        std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&__src[1], (uint64_t)&v143);
        __src[5] = (void **)v8;
        std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)&v142);
        std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](&v143);
        uint64_t v117 = (uint64_t *)(v125 + 104);
        std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(v125 + 104), (uint64_t *)__src);
        *(void ***)(v125 + 144) = __src[5];
        std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)__src);
        std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](&__src[1]);
        long long v131 = 0u;
        long long v132 = 0u;
        float v133 = 1.0;
        std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>((uint64_t)&v131, (unint64_t)(float)*(unint64_t *)(v126 + 1184));
        unsigned int v22 = *(Phase::Logger **)(v126 + 1184);
        unint64_t v116 = (unint64_t)v8;
        if (v22)
        {
          v129[0] = *(void **)(v126 + 1184);
          uint64_t v141 = 16;
          std::error_code __p = (void *)(v5 + 5848);
          uint64_t v139 = v129;
          unint64_t v140 = &v141;
          char v137 = (void *)(v5 + 5848);
          Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::RenderGroup*)#1} const&>(v22, (uint64_t)&__p, (uint64_t *)&v137, (size_t *)&v142);
          BOOL v23 = (void **)v142;
          uint64_t v142 = 0;
          __src[0] = v23;
          std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&__src[1], (uint64_t)&v143);
          __src[5] = (void **)v22;
          std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)&v142);
          std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](&v143);
          std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(v125 + 56), (uint64_t *)__src);
          *(void ***)(v125 + 96) = __src[5];
          std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)__src);
          std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](&__src[1]);
          uint64_t v24 = *(uint64_t **)(v126 + 1176);
          if (v24)
          {
            uint64_t v25 = 0;
            do
            {
              uint64_t v26 = v24 + 6;
              uint64_t v27 = 48;
              unint64_t v28 = 0xCBF29CE484222325;
              do
                unint64_t v28 = 0x100000001B3 * (v28 ^ *((char *)v24 + v27++));
              while (v27 != 64);
              unint64_t v29 = *((void *)&v131 + 1);
              if (*((void *)&v131 + 1))
              {
                uint8x8_t v30 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v131 + 8));
                v30.i16[0] = vaddlv_u8(v30);
                if (v30.u32[0] > 1uLL)
                {
                  unint64_t v3 = v28;
                  if (v28 >= *((void *)&v131 + 1)) {
                    unint64_t v3 = v28 % *((void *)&v131 + 1);
                  }
                }
                else
                {
                  unint64_t v3 = (*((void *)&v131 + 1) - 1) & v28;
                }
                __int16 v31 = *(void ***)(v131 + 8 * v3);
                if (v31)
                {
                  unint64_t v32 = *v31;
                  if (*v31)
                  {
                    do
                    {
                      unint64_t v33 = v32[1];
                      if (v33 == v28)
                      {
                        if (v32[2] == v24[6] && v32[3] == v24[7]) {
                          goto LABEL_62;
                        }
                      }
                      else
                      {
                        if (v30.u32[0] > 1uLL)
                        {
                          if (v33 >= *((void *)&v131 + 1)) {
                            v33 %= *((void *)&v131 + 1);
                          }
                        }
                        else
                        {
                          v33 &= *((void *)&v131 + 1) - 1;
                        }
                        if (v33 != v3) {
                          break;
                        }
                      }
                      unint64_t v32 = (void *)*v32;
                    }
                    while (v32);
                  }
                }
              }
              unint64_t v32 = operator new(0x28uLL);
              *unint64_t v32 = 0;
              v32[1] = v28;
              *((_OWORD *)v32 + 1) = *v26;
              *((_DWORD *)v32 + 8) = 0;
              float v35 = (float)(unint64_t)(*((void *)&v132 + 1) + 1);
              if (!v29 || (float)(v133 * (float)v29) < v35)
              {
                BOOL v36 = (v29 & (v29 - 1)) != 0;
                if (v29 < 3) {
                  BOOL v36 = 1;
                }
                unint64_t v37 = v36 | (2 * v29);
                unint64_t v38 = vcvtps_u32_f32(v35 / v133);
                if (v37 <= v38) {
                  size_t v39 = v38;
                }
                else {
                  size_t v39 = v37;
                }
                std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>((uint64_t)&v131, v39);
                unint64_t v29 = *((void *)&v131 + 1);
                if ((*((void *)&v131 + 1) & (*((void *)&v131 + 1) - 1)) != 0)
                {
                  if (v28 >= *((void *)&v131 + 1)) {
                    unint64_t v3 = v28 % *((void *)&v131 + 1);
                  }
                  else {
                    unint64_t v3 = v28;
                  }
                }
                else
                {
                  unint64_t v3 = (*((void *)&v131 + 1) - 1) & v28;
                }
              }
              uint64_t v40 = v131;
              uint64_t v41 = *(void **)(v131 + 8 * v3);
              if (v41)
              {
                *unint64_t v32 = *v41;
              }
              else
              {
                *unint64_t v32 = v132;
                *(void *)&long long v132 = v32;
                *(void *)(v40 + 8 * v3) = &v132;
                if (!*v32) {
                  goto LABEL_61;
                }
                unint64_t v42 = *(void *)(*v32 + 8);
                if ((v29 & (v29 - 1)) != 0)
                {
                  if (v42 >= v29) {
                    v42 %= v29;
                  }
                }
                else
                {
                  v42 &= v29 - 1;
                }
                uint64_t v41 = (void *)(v131 + 8 * v42);
              }
              *uint64_t v41 = v32;
LABEL_61:
              ++*((void *)&v132 + 1);
LABEL_62:
              *((_DWORD *)v32 + 8) = v25;
              uint64_t v43 = *(void *)(v125 + 56) + 336 * v25;
              long long v44 = *v26;
              *(void *)(v43 + 16) = v24[8];
              *(_OWORD *)uint64_t v43 = v44;
              *(_DWORD *)(v43 + 24) = *((_DWORD *)v24 + 18);
              *(_DWORD *)(v43 + 28) = *((_DWORD *)v24 + 19);
              *(_DWORD *)(v43 + 32) = *((_DWORD *)v24 + 20);
              *(_DWORD *)(v43 + 36) = *((_DWORD *)v24 + 21);
              *(_DWORD *)(v43 + 40) = *((_DWORD *)v24 + 22);
              *(_DWORD *)(v43 + 44) = *((_DWORD *)v24 + 23);
              *(_DWORD *)(v43 + 48) = *((_DWORD *)v24 + 24);
              *(_DWORD *)(v43 + 52) = *((_DWORD *)v24 + 25);
              memcpy((void *)(v43 + 56), v24 + 13, 0x109uLL);
              ++v25;
              uint64_t v24 = (uint64_t *)*v24;
            }
            while (v24);
          }
        }
        else
        {
          std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)(v125 + 56));
          *(void *)(v125 + 96) = 0;
        }
        *(void *)(v126 + 968) = *(void *)(v126 + 960);
        std::vector<Phase::UniqueObjectId>::resize((uint64_t)v122, v116);
        long long v45 = *(_OWORD *)v123;
        long long v46 = *(_OWORD *)(v6 + 56);
        *(void *)(v125 + 40) = *(void *)(v6 + 72);
        *(_OWORD *)(v125 + 8) = v45;
        *(_OWORD *)(v125 + 24) = v46;
        *(unsigned char *)(v125 + 48) = ((*(_DWORD *)v126 - 1) & 0xFFFFFFFD) == 0;
        std::error_code __p = 0;
        uint64_t v139 = 0;
        unint64_t v140 = 0;
        std::vector<std::reference_wrapper<Phase::SpatialModeler::PriorityQueueEntry>>::reserve(&__p, v120[8]);
        BOOL v47 = (void *)v120[7];
        if (v47)
        {
          char v48 = (uint64_t *)v139;
          do
          {
            uint64_t v49 = v47 + 4;
            if (v48 >= v140)
            {
              uint64_t v51 = (uint64_t *)__p;
              uint64_t v52 = ((char *)v48 - (unsigned char *)__p) >> 3;
              unint64_t v53 = v52 + 1;
              if ((unint64_t)(v52 + 1) >> 61) {
                std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v54 = (char *)v140 - (unsigned char *)__p;
              if (((char *)v140 - (unsigned char *)__p) >> 2 > v53) {
                unint64_t v53 = v54 >> 2;
              }
              if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v55 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v55 = v53;
              }
              if (v55) {
                unint64_t v55 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int *>>(v55);
              }
              else {
                uint64_t v56 = 0;
              }
              int v57 = (void **)(v55 + 8 * v52);
              char *v57 = v49;
              uint64_t v50 = v57 + 1;
              if (v48 != v51)
              {
                do
                {
                  uint64_t v58 = (void *)*--v48;
                  *--int v57 = v58;
                }
                while (v48 != v51);
                char v48 = (uint64_t *)__p;
              }
              std::error_code __p = v57;
              uint64_t v139 = v50;
              unint64_t v140 = (uint64_t *)(v55 + 8 * v56);
              if (v48) {
                operator delete(v48);
              }
            }
            else
            {
              uint64_t *v48 = (uint64_t)v49;
              uint64_t v50 = (void **)(v48 + 1);
            }
            uint64_t v139 = v50;
            BOOL v47 = (void *)*v47;
            char v48 = (uint64_t *)v50;
          }
          while (v47);
        }
        unint64_t v59 = v120;
        uint64_t v60 = (uint64_t *)__p;
        if (v120[26])
        {
          std::error_code v61 = (uint64_t *)v139;
          std::__function::__value_func<BOOL ()(Phase::SpatialModeler::PriorityQueueEntry const&,Phase::SpatialModeler::PriorityQueueEntry const&)>::__value_func[abi:ne180100]((uint64_t)&v142, (uint64_t)(v120 + 23));
          if ((char *)v61 - (char *)v60 < 1025)
          {
            uint64_t v62 = 0;
            uint64_t v64 = 0;
          }
          else
          {
            uint64_t v62 = (uint64_t *)std::get_temporary_buffer[abi:ne180100]<std::reference_wrapper<Phase::SpatialModeler::PriorityQueueEntry>>(v61 - v60);
            uint64_t v64 = v63;
          }
          std::__stable_sort<std::_ClassicAlgPolicy,std::function<BOOL ()(Phase::SpatialModeler::PriorityQueueEntry const&,Phase::SpatialModeler::PriorityQueueEntry const&)> &,std::__wrap_iter<std::reference_wrapper<Phase::SpatialModeler::PriorityQueueEntry> *>>((uint64_t)v60, v61, (uint64_t)&v142, v61 - v60, v62, v64);
          if (v62) {
            operator delete(v62);
          }
          std::__function::__value_func<BOOL ()(Phase::SpatialModeler::PriorityQueueEntry const&,Phase::SpatialModeler::PriorityQueueEntry const&)>::~__value_func[abi:ne180100](&v142);
          unint64_t v59 = v120;
        }
        else
        {
          std::error_code v61 = (uint64_t *)v139;
        }
        int v65 = v121;
        if (v60 == v61)
        {
          int v66 = 0;
        }
        else
        {
          int v66 = 0;
          unsigned int v67 = v136;
          uint64_t v127 = v134;
          uint64_t v68 = v60;
          do
          {
            uint64_t v69 = *v68;
            uint64_t v70 = *(void *)(*v68 + 16);
            if (v67 > v70
              && HIDWORD(v127[3 * v70 + 2]) == HIDWORD(v70)
              && (uint64_t v71 = v127[3 * *(void *)(*v68 + 16)]) != 0)
            {
              if (*(void *)(v125 + 144) <= (unint64_t)v66) {
                __assert_rtn("operator()", "CvmSpatialModelerInstance.mm", 1647, "clusterSourceIdx < pClusterSetInput->mSubmixRoutings.Size()");
              }
              uint64_t v72 = *v117;
              Phase::Controller::SpatialModelerInstance::SubmixInfo::MakeSubmix((Phase::Controller::SpatialModelerInstance::SubmixInfo *)__src, v71, *v123);
              int v119 = v66;
              uint64_t v73 = v66;
              uint64_t v74 = (_OWORD *)(v72 + 304 * v66);
              memcpy(v74, __src, 0x120uLL);
              uint64_t v75 = 24;
              unint64_t v76 = 0xCBF29CE484222325;
              do
                unint64_t v76 = 0x100000001B3 * (v76 ^ *(char *)(v69 + v75++));
              while (v75 != 40);
              if (*((void *)&v131 + 1))
              {
                uint8x8_t v77 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v131 + 8));
                v77.i16[0] = vaddlv_u8(v77);
                if (v77.u32[0] > 1uLL)
                {
                  unint64_t v78 = v76;
                  if (v76 >= *((void *)&v131 + 1)) {
                    unint64_t v78 = v76 % *((void *)&v131 + 1);
                  }
                }
                else
                {
                  unint64_t v78 = v76 & (*((void *)&v131 + 1) - 1);
                }
                float v80 = *(uint64_t ****)(v131 + 8 * v78);
                if (v80)
                {
                  for (uint64_t i = *v80; i; uint64_t i = (uint64_t **)*i)
                  {
                    unint64_t v82 = (unint64_t)i[1];
                    if (v82 == v76)
                    {
                      if (i[2] == *(uint64_t **)(v69 + 24) && i[3] == *(uint64_t **)(v69 + 32))
                      {
                        uint64_t v87 = *((unsigned int *)i + 8);
                        goto LABEL_126;
                      }
                    }
                    else
                    {
                      if (v77.u32[0] > 1uLL)
                      {
                        if (v82 >= *((void *)&v131 + 1)) {
                          v82 %= *((void *)&v131 + 1);
                        }
                      }
                      else
                      {
                        v82 &= *((void *)&v131 + 1) - 1;
                      }
                      if (v82 != v78) {
                        break;
                      }
                    }
                  }
                }
              }
              uint64_t v87 = -1;
LABEL_126:
              uint64_t v84 = v72 + 304 * (int)v73;
              *(void *)(v84 + 288) = v87;
              double v85 = *(double *)(v69 + 40);
              if (v85 <= 0.0) {
                double v85 = COERCE_DOUBLE(1);
              }
              *(long double *)(v84 + 296) = log(v85) * 8.68588964 / 10.0 * 10.0;
              *uint64_t v74 = *(_OWORD *)v69;
              *(void *)(v125 + 152) = *(void *)(v71 + 40);
              *(_OWORD *)(*v122 + 16 * v73) = *(_OWORD *)v69;
              uint64_t v86 = *(void *)(v128 + 5864);
              if (v86)
              {
                *((double *)v74 + 35) = *(float *)(*(void *)(v86 + 240) + 16);
                *((void *)v74 + 33) = *(void *)(v115 + 56);
              }
              unint64_t v59 = v120;
              int v66 = v119 + 1;
              int v65 = v121;
            }
            else
            {
              uint64_t v79 = v59[22];
              if (v79) {
                (*(void (**)(uint64_t, uint64_t))(*(void *)v79 + 48))(v79, *v68);
              }
              std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueEntry>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueEntry>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueEntry>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueEntry>>>::__erase_unique<Phase::UniqueObjectId>(v65, (void *)v69);
            }
            ++v68;
          }
          while (v68 != v61);
        }
        if (v60) {
          operator delete(v60);
        }
        atomic_store(0, (unint64_t *)(v126 + 760));
        if (v116 != v66)
        {
          std::vector<Phase::UniqueObjectId>::resize((uint64_t)v122, v66);
          if (v66 >= 1)
          {
            v129[0] = (void *)v66;
            uint64_t v141 = 16;
            std::error_code __p = v114;
            uint64_t v139 = v129;
            unint64_t v140 = &v141;
            char v137 = v114;
            Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingInput,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingInput*)#1} const&>((Phase::Logger *)__src, v66, (uint64_t)&__p, (uint64_t *)&v137);
            uint8x8_t v88 = __src[0];
            __src[0] = 0;
            uint64_t v142 = v88;
            std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&v143, (uint64_t)&__src[1]);
            uint64_t v147 = (void **)v66;
            std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)__src);
            std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](&__src[1]);
            uint64_t v89 = 0;
            unint64_t v90 = (void **)v142;
            do
            {
              memcpy(&v90[v89], (const void *)(*v117 + v89 * 8), 0x130uLL);
              v89 += 38;
            }
            while (38 * v66 != v89);
            uint64_t v142 = 0;
            __src[0] = v90;
            std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&__src[1], (uint64_t)&v143);
            __src[5] = v147;
            std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)&v142, v117);
            uint64_t v147 = *(void ***)(v125 + 144);
            std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>>::operator=[abi:ne180100](v117, (uint64_t *)__src);
            *(void ***)(v125 + 144) = __src[5];
            std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)__src);
            std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](&__src[1]);
            std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)&v142);
            uint64_t v147 = 0;
            std::unique_ptr<Phase::SpatialModeler::SubmixRoutingInput [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)&v142);
            std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](&v143);
          }
        }
        if (*(double *)(v125 + 40) == 0.0)
        {
          ClusterSetInputStrings = (Phase::Logger *)sGenerateClusterSetInputStrings((uint64_t)&v142, v125);
          uint64_t v92 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(ClusterSetInputStrings)
                                                                                              + 224)));
          if (os_log_type_enabled(v92, OS_LOG_TYPE_ERROR))
          {
            sGenerateSpatialModelerInfoString((uint64_t)&__p, *(void *)(v128 + 5864));
            if (SHIBYTE(v140) >= 0) {
              p_p = &__p;
            }
            else {
              p_p = (void **)__p;
            }
            unint64_t v94 = &v142;
            if (v144 < 0) {
              unint64_t v94 = (void **)v142;
            }
            uint64_t v95 = *(void ***)(v125 + 144);
            LODWORD(__src[0]) = 136316162;
            *(void ***)((char *)__src + 4) = (void **)"CvmSpatialModelerInstance.mm";
            WORD2(__src[1]) = 1024;
            *(_DWORD *)((char *)&__src[1] + 6) = 1709;
            WORD1(__src[2]) = 2080;
            *(void ***)((char *)&__src[2] + 4) = p_p;
            WORD2(__src[3]) = 2080;
            *(void ***)((char *)&__src[3] + 6) = v94;
            HIWORD(__src[4]) = 2048;
            __src[5] = v95;
            _os_log_impl(&dword_221E5E000, v92, OS_LOG_TYPE_ERROR, "%25s:%-5d (%s) - cluster query input has a maximum cluster count set to 0. forcing maximum cluster count to 1. this may sound incorrect. (%s, submix count: %zu, ...)", (uint8_t *)__src, 0x30u);
            if (SHIBYTE(v140) < 0) {
              operator delete(__p);
            }
          }

          if (v146 != v145)
          {
            long long v97 = 0;
            do
            {
              long long v98 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v96)
                                                                                                  + 224)));
              if (os_log_type_enabled(v98, OS_LOG_TYPE_ERROR))
              {
                sGenerateSpatialModelerInfoString((uint64_t)&__p, *(void *)(v128 + 5864));
                BOOL v99 = (void **)__p;
                if (SHIBYTE(v140) >= 0) {
                  BOOL v99 = &__p;
                }
                long long v100 = (void **)(v145 + 24 * (void)v97);
                if (*((char *)v100 + 23) < 0) {
                  long long v100 = (void **)*v100;
                }
                long long v97 = (void **)((char *)v97 + 1);
                LODWORD(__src[0]) = 136316418;
                *(void ***)((char *)__src + 4) = (void **)"CvmSpatialModelerInstance.mm";
                WORD2(__src[1]) = 1024;
                *(_DWORD *)((char *)&__src[1] + 6) = 1714;
                WORD1(__src[2]) = 2080;
                *(void ***)((char *)&__src[2] + 4) = v99;
                WORD2(__src[3]) = 2048;
                *(void ***)((char *)&__src[3] + 6) = v97;
                HIWORD(__src[4]) = 2048;
                __src[5] = (void **)(0xAAAAAAAAAAAAAAABLL * ((v146 - v145) >> 3));
                LOWORD(__src[6]) = 2080;
                *(void ***)((char *)&__src[6] + 2) = v100;
                _os_log_impl(&dword_221E5E000, v98, OS_LOG_TYPE_ERROR, "%25s:%-5d (%s) - followup ClusterSetInput log %zu of %zu (%s)", (uint8_t *)__src, 0x3Au);
                if (SHIBYTE(v140) < 0) {
                  operator delete(__p);
                }
              }
              else
              {
                long long v97 = (void **)((char *)v97 + 1);
              }
            }
            while ((unint64_t)v97 < 0xAAAAAAAAAAAAAAABLL * ((v146 - v145) >> 3));
          }
          *(void *)(v125 + 40) = 0x3FF0000000000000;
          __src[0] = (void **)&v145;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](__src);
          if (v144 < 0) {
            operator delete(v142);
          }
        }
        long long v101 = Phase::SpatialModeler::Scheduler::SubmitQuery(v118, v126 + 816, a3, (uint64_t)&__p);
        if (!(_BYTE)__p)
        {
          uint64_t v102 = (Phase::Logger *)sGenerateClusterSetInputStrings((uint64_t)&v142, v125);
          int v103 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v102)
                                                                                               + 224)));
          if (os_log_type_enabled(v103, OS_LOG_TYPE_ERROR))
          {
            sGenerateSpatialModelerInfoString((uint64_t)v129, *(void *)(v128 + 5864));
            if (v130 >= 0) {
              unint64_t v104 = v129;
            }
            else {
              unint64_t v104 = (void **)v129[0];
            }
            uint64_t v105 = &v142;
            if (v144 < 0) {
              uint64_t v105 = (void **)v142;
            }
            uint64_t v106 = *(void ***)(v125 + 144);
            LODWORD(__src[0]) = 136316162;
            *(void ***)((char *)__src + 4) = (void **)"CvmSpatialModelerInstance.mm";
            WORD2(__src[1]) = 1024;
            *(_DWORD *)((char *)&__src[1] + 6) = 1728;
            WORD1(__src[2]) = 2080;
            *(void ***)((char *)&__src[2] + 4) = v104;
            WORD2(__src[3]) = 2080;
            *(void ***)((char *)&__src[3] + 6) = v105;
            HIWORD(__src[4]) = 2048;
            __src[5] = v106;
            _os_log_impl(&dword_221E5E000, v103, OS_LOG_TYPE_ERROR, "%25s:%-5d (%s) - failed to submit cluster query (%s, submix count: %zu, ...)", (uint8_t *)__src, 0x30u);
            if (v130 < 0) {
              operator delete(v129[0]);
            }
          }

          if (v146 != v145)
          {
            unint64_t v108 = 0;
            do
            {
              uint64_t v109 = **(id **)(Phase::Logger::GetInstance(v107) + 224);
              if (os_log_type_enabled(v109, OS_LOG_TYPE_ERROR))
              {
                sGenerateSpatialModelerInfoString((uint64_t)v129, *(void *)(v128 + 5864));
                uint64_t v110 = (void **)v129[0];
                if (v130 >= 0) {
                  uint64_t v110 = v129;
                }
                uint64_t v111 = (void **)(v145 + 24 * (void)v108);
                if (*((char *)v111 + 23) < 0) {
                  uint64_t v111 = (void **)*v111;
                }
                unint64_t v108 = (void **)((char *)v108 + 1);
                LODWORD(__src[0]) = 136316418;
                *(void ***)((char *)__src + 4) = (void **)"CvmSpatialModelerInstance.mm";
                WORD2(__src[1]) = 1024;
                *(_DWORD *)((char *)&__src[1] + 6) = 1733;
                WORD1(__src[2]) = 2080;
                *(void ***)((char *)&__src[2] + 4) = v110;
                WORD2(__src[3]) = 2048;
                *(void ***)((char *)&__src[3] + 6) = v108;
                HIWORD(__src[4]) = 2048;
                __src[5] = (void **)(0xAAAAAAAAAAAAAAABLL * ((v146 - v145) >> 3));
                LOWORD(__src[6]) = 2080;
                *(void ***)((char *)&__src[6] + 2) = v111;
                _os_log_impl(&dword_221E5E000, v109, OS_LOG_TYPE_ERROR, "%25s:%-5d %s - followup ClusterSetInput log %zu of %zu (%s)", (uint8_t *)__src, 0x3Au);
                if (v130 < 0) {
                  operator delete(v129[0]);
                }
              }
              else
              {
                unint64_t v108 = (void **)((char *)v108 + 1);
              }
            }
            while ((unint64_t)v108 < 0xAAAAAAAAAAAAAAABLL * ((v146 - v145) >> 3));
          }
          uint64_t v112 = v126;
          atomic_store(0, (unsigned int *)(v126 + 816));
          int v113 = *(std::__shared_weak_count **)(v112 + 888);
          *(void *)(v112 + 880) = 0;
          *(void *)(v112 + 888) = 0;
          if (v113) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v113);
          }
          atomic_store(0, (unsigned int *)(v126 + 920));
          __src[0] = (void **)&v145;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](__src);
          if (v144 < 0) {
            operator delete(v142);
          }
        }
        if ((*(unsigned char *)(*(void *)(Phase::Logger::GetInstance((Phase::Logger *)v101) + 224) + 8) & 4) != 0)
        {
          sGenerateClusterSetInputStrings((uint64_t)__src, v125);
          uint64_t v142 = &__src[3];
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v142);
          if (SHIBYTE(__src[2]) < 0) {
            operator delete(__src[0]);
          }
        }
        std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)&v131);
      }
    }
    else
    {
LABEL_6:
      Phase::SpatialModeler::PriorityQueue::ClearEntries((Phase::SpatialModeler::PriorityQueue *)a2, 1);
    }
    if (v135) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v135);
    }
  }
}

void sub_221EC6C34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,std::__shared_weak_count *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t *a52)
{
  a52 = &a49;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a52);
  if (a48 < 0) {
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)&a29);
  if (a36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a36);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_5,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_5>,void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::~__func()
{
}

__n128 std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_5,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_5>,void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26D4733B8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_5,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_5>,void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D4733B8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t *std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_5,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_5>,void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::operator()(uint64_t a1)
{
  return Phase::Controller::SpatialModelerInstance::DestroyTempClusterGraphData(a1, *(void *)(a1 + 16));
}

void std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_6,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_6>,void ()(Phase::SpatialModeler::PriorityQueueEntry &)>::~__func()
{
}

__n128 std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_6,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_6>,void ()(Phase::SpatialModeler::PriorityQueueEntry &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26D473400;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_6,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_6>,void ()(Phase::SpatialModeler::PriorityQueueEntry &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D473400;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

const std::error_category *std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_6,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_6>,void ()(Phase::SpatialModeler::PriorityQueueEntry &)>::operator()(const std::error_category *result)
{
  uint64_t v1 = result[2].__vftable;
  unsigned int v2 = atomic_load((unsigned int *)&v1[14].equivalent);
  if (v2 - 1 <= 1
    && result[2].__vftable[5].equivalent_0 == (BOOL (__cdecl *)(const std::error_category *__hidden, const std::error_code *, int))1)
  {
    if (atomic_load((unsigned int *)&v1[16].default_error_condition))
    {
      p_equivalent = (atomic_uint *)&v1[14].equivalent;
      unsigned int v5 = atomic_load((unsigned int *)&v1[14].equivalent);
      if (v5 - 1 <= 1)
      {
        unsigned int v6 = v5;
        atomic_compare_exchange_strong(p_equivalent, &v6, 6u);
        if (v6 == v5) {
          return std::system_category();
        }
      }
    }
  }
  return result;
}

void std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_7,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_7>,void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::~__func()
{
}

__n128 std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_7,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_7>,void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::__clone(uint64_t a1)
{
  unsigned int v2 = (char *)operator new(0x20uLL);
  *(void *)unsigned int v2 = &unk_26D473448;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_7,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_7>,void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D473448;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_7,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_7>,void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::operator()(void *a1, Phase::SpatialModeler::PriorityQueue *a2, void *a3)
{
  uint64_t v131 = *MEMORY[0x263EF8340];
  if (*((void *)a2 + 8))
  {
    uint64_t v4 = a1[2];
    uint64_t v5 = a1[3];
    uint64_t v107 = a1[1];
    Phase::Controller::SpatialModelerInstance::GetLatestSubmixState((Phase::Controller::SpatialModelerInstance *)&v108, v107);
    if (v110)
    {
      unsigned int v6 = (uint64_t *)(v5 + 80);
      uint64_t v7 = v108;
      while (!*v7)
      {
        v7 += 3;
        if (v7 >= &v108[3 * v110]) {
          goto LABEL_6;
        }
      }
      unint64_t v8 = (Phase::Controller::RenderGroupMgr *)(v4 + 1600);
      Phase::Controller::RenderGroupMgr::LoadFreshData((atomic_ullong *)(v4 + 1600));
      uint64_t v105 = v6;
      if (*(_DWORD *)v4 == 2)
      {
        unint64_t v9 = *(uint64_t **)(v4 + 1000);
        if (v9)
        {
          while (1)
          {
            long long v10 = (Phase::Logger *)std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((void *)(v4 + 1736), v9 + 2);
            long long v11 = v10;
            if (!v10) {
              goto LABEL_30;
            }
            unsigned int v12 = atomic_load((unsigned int *)v9[4]);
            if (v12 && v12 != 3) {
              break;
            }
            unint64_t v9 = (uint64_t *)*v9;
LABEL_31:
            if (!v9) {
              goto LABEL_34;
            }
          }
          double v14 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v10)
                                                                                              + 224)));
          if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
          {
            sGenerateSpatialModelerInfoString((uint64_t)&v121, *(void *)(v107 + 5864));
            if (v123 >= 0) {
              unint64_t v16 = &v121;
            }
            else {
              unint64_t v16 = v121;
            }
            memset(out, 0, sizeof(out));
            uuid_unparse((const unsigned __int8 *)v11 + 16, out);
            std::string::basic_string[abi:ne180100]<0>(__p, out);
            float v17 = __p;
            if (v120 < 0) {
              float v17 = (void **)__p[0];
            }
            *(_DWORD *)std::string buf = 136316162;
            *(void *)&uint8_t buf[4] = "CvmSpatialModelerInstance.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2154;
            *(_WORD *)&unsigned char buf[18] = 2080;
            *(void *)&unsigned char buf[20] = v16;
            *(_WORD *)&unsigned char buf[28] = 1024;
            *(_DWORD *)&buf[30] = v12;
            *(_WORD *)&buf[34] = 2080;
            *(void *)&buf[36] = v17;
            _os_log_impl(&dword_221E5E000, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d (%s) - removing spatial query with unexpected status %i for render group %s", buf, 0x2Cu);
            if (v120 < 0) {
              operator delete(__p[0]);
            }
            unint64_t v8 = (Phase::Controller::RenderGroupMgr *)(v4 + 1600);
            if (v123 < 0) {
              operator delete(v121);
            }
          }

LABEL_30:
          double v18 = (uint64_t *)*v9;
          std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>>>::remove((uint64_t)buf, (void *)(v4 + 984), v9);
          std::unique_ptr<std::__hash_node<std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,void *>>>>::reset[abi:ne180100]((uint64_t)buf);
          unint64_t v9 = v18;
          goto LABEL_31;
        }
      }
      else
      {
        std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>>>::clear(v4 + 984);
        std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>(v4 + 984, vcvtps_u32_f32((float)*(unint64_t *)(v4 + 1760) / *(float *)(v4 + 1016)));
      }
LABEL_34:
      Phase::Controller::SpatialModelerInstance::GetAvailableComputeForGraph(v107, (int *)v4);
      double v19 = *(uint64_t **)(v4 + 1752);
      if (v19)
      {
        while (1)
        {
          int v20 = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>>>::find<Phase::UniqueObjectId>(*(void *)(v4 + 984), *(void *)(v4 + 992), v19 + 2);
          if (*((unsigned char *)v19 + 384)) {
            break;
          }
          if (*(_DWORD *)v4 == 2 && v20 == 0) {
            break;
          }
LABEL_50:
          double v19 = (uint64_t *)*v19;
          if (!v19) {
            goto LABEL_51;
          }
        }
        Phase::Controller::RenderGroupMgr::GetRenderer(v8, v19[4], &v121);
        BOOL v23 = (atomic_uchar *)v121;
        if (!v121) {
          goto LABEL_47;
        }
        int v24 = *(_DWORD *)v4;
        if (*(_DWORD *)v4 != 1)
        {
          if (v24 == 2) {
            goto LABEL_46;
          }
          if (v24 != 3)
          {
            uint64_t v87 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v22)
                                                                                                + 224)));
            if (os_log_type_enabled(v87, OS_LOG_TYPE_ERROR))
            {
              sGenerateSpatialModelerInfoString((uint64_t)out, *(void *)(v107 + 5864));
              uint8x8_t v88 = out[23] >= 0 ? out : *(char **)out;
              unsigned int v89 = *(_DWORD *)v4 - 1;
              unint64_t v90 = v89 > 2 ? "<invalid>" : off_2645F71B0[v89];
              *(_DWORD *)std::string buf = 136315906;
              *(void *)&uint8_t buf[4] = "CvmSpatialModelerInstance.mm";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 2238;
              *(_WORD *)&unsigned char buf[18] = 2080;
              *(void *)&unsigned char buf[20] = v88;
              *(_WORD *)&unsigned char buf[28] = 2080;
              *(void *)&buf[30] = v90;
              _os_log_impl(&dword_221E5E000, v87, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"(%s) - invalid spatial modeler graph type (graph: %s)\"", buf, 0x26u);
              if (out[23] < 0) {
                operator delete(*(void **)out);
              }
            }

            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "(%s) - invalid spatial modeler graph type (graph: %s)");
          }
        }
        if ((*(uint64_t (**)(void *))(*(void *)v121 + 88))(v121))
        {
LABEL_48:
          if (v122) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v122);
          }
          goto LABEL_50;
        }
LABEL_46:
        char v25 = 0;
        atomic_compare_exchange_strong(v23 + 52, (unsigned __int8 *)&v25, 1u);
        if (!v25) {
LABEL_47:
        }
          operator new();
        goto LABEL_48;
      }
LABEL_51:
      uint64_t v111 = 0;
      uint64_t v112 = 0;
      unint64_t v113 = 0;
      std::vector<std::reference_wrapper<Phase::SpatialModeler::PriorityQueueEntry>>::reserve(&v111, *((void *)a2 + 8));
      uint64_t v26 = (void *)*((void *)a2 + 7);
      if (v26)
      {
        uint64_t v27 = v112;
        do
        {
          unint64_t v28 = v26 + 4;
          if ((unint64_t)v27 >= v113)
          {
            uint8x8_t v30 = (char *)v111;
            uint64_t v31 = (v27 - (unsigned char *)v111) >> 3;
            unint64_t v32 = v31 + 1;
            if ((unint64_t)(v31 + 1) >> 61) {
              std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v33 = v113 - (void)v111;
            if ((uint64_t)(v113 - (void)v111) >> 2 > v32) {
              unint64_t v32 = v33 >> 2;
            }
            if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v34 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v34 = v32;
            }
            if (v34) {
              unint64_t v34 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int *>>(v34);
            }
            else {
              uint64_t v35 = 0;
            }
            BOOL v36 = (char *)(v34 + 8 * v31);
            *(void *)BOOL v36 = v28;
            unint64_t v29 = v36 + 8;
            if (v27 != v30)
            {
              do
              {
                uint64_t v37 = *((void *)v27 - 1);
                v27 -= 8;
                *((void *)v36 - 1) = v37;
                v36 -= 8;
              }
              while (v27 != v30);
              uint64_t v27 = (char *)v111;
            }
            uint64_t v111 = v36;
            uint64_t v112 = v29;
            unint64_t v113 = v34 + 8 * v35;
            if (v27) {
              operator delete(v27);
            }
          }
          else
          {
            *(void *)uint64_t v27 = v28;
            unint64_t v29 = v27 + 8;
          }
          uint64_t v112 = v29;
          uint64_t v26 = (void *)*v26;
          uint64_t v27 = v29;
        }
        while (v26);
      }
      unint64_t v38 = (uint64_t *)v111;
      if (*((void *)a2 + 26))
      {
        size_t v39 = (uint64_t *)v112;
        std::__function::__value_func<BOOL ()(Phase::SpatialModeler::PriorityQueueEntry const&,Phase::SpatialModeler::PriorityQueueEntry const&)>::__value_func[abi:ne180100]((uint64_t)&v121, (uint64_t)a2 + 184);
        if ((char *)v39 - (char *)v38 < 1025)
        {
          uint64_t v40 = 0;
          uint64_t v42 = 0;
        }
        else
        {
          uint64_t v40 = (uint64_t *)std::get_temporary_buffer[abi:ne180100]<std::reference_wrapper<Phase::SpatialModeler::PriorityQueueEntry>>(v39 - v38);
          uint64_t v42 = v41;
        }
        std::__stable_sort<std::_ClassicAlgPolicy,std::function<BOOL ()(Phase::SpatialModeler::PriorityQueueEntry const&,Phase::SpatialModeler::PriorityQueueEntry const&)> &,std::__wrap_iter<std::reference_wrapper<Phase::SpatialModeler::PriorityQueueEntry> *>>((uint64_t)v38, v39, (uint64_t)&v121, v39 - v38, v40, v42);
        if (v40) {
          operator delete(v40);
        }
        std::__function::__value_func<BOOL ()(Phase::SpatialModeler::PriorityQueueEntry const&,Phase::SpatialModeler::PriorityQueueEntry const&)>::~__value_func[abi:ne180100](&v121);
      }
      else
      {
        size_t v39 = (uint64_t *)v112;
      }
      if (v38 != v39)
      {
        do
        {
          uint64_t v43 = *v38;
          uint64_t v44 = *(void *)(*v38 + 16);
          if (v110 > v44
            && HIDWORD(v108[3 * v44 + 2]) == HIDWORD(v44)
            && (uint64_t v45 = v108[3 * *(void *)(*v38 + 16)]) != 0)
          {
            long long v129 = *(_OWORD *)v43;
            uint64_t v46 = *(void *)(v45 + 32);
            *(_OWORD *)uu = *(_OWORD *)(v43 + 24);
            BOOL v47 = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::pair<std::unique_ptr<Phase::Controller::SpatialQueryInstance>,std::vector<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>>>>::find<Phase::UniqueObjectId>(*(void *)(v4 + 984), *(void *)(v4 + 992), uu);
            if (v47)
            {
              char v48 = v47;
              if (!atomic_load((unsigned int *)v47[4]))
              {
                unint64_t v50 = v47[6];
                unint64_t v51 = v47[7];
                if (v50 >= v51)
                {
                  uint64_t v54 = v47[5];
                  uint64_t v55 = (uint64_t)(v50 - v54) >> 5;
                  unint64_t v56 = v55 + 1;
                  if ((unint64_t)(v55 + 1) >> 59) {
                    std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v57 = v51 - v54;
                  if (v57 >> 4 > v56) {
                    unint64_t v56 = v57 >> 4;
                  }
                  if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFE0) {
                    unint64_t v58 = 0x7FFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v58 = v56;
                  }
                  if (v58) {
                    unint64_t v58 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Controller::SpatialModelerInstance::SubmixHandleInfo>>(v58);
                  }
                  else {
                    uint64_t v59 = 0;
                  }
                  unint64_t v60 = v58 + 32 * v55;
                  *(_OWORD *)unint64_t v60 = v129;
                  *(void *)(v60 + 16) = v44;
                  *(void *)(v60 + 24) = v46;
                  uint64_t v62 = (char *)v48[5];
                  std::error_code v61 = (char *)v48[6];
                  uint64_t v63 = v60;
                  if (v61 != v62)
                  {
                    do
                    {
                      long long v64 = *((_OWORD *)v61 - 1);
                      *(_OWORD *)(v63 - 32) = *((_OWORD *)v61 - 2);
                      *(_OWORD *)(v63 - 16) = v64;
                      v63 -= 32;
                      v61 -= 32;
                    }
                    while (v61 != v62);
                    std::error_code v61 = (char *)v48[5];
                  }
                  uint64_t v52 = v60 + 32;
                  v48[5] = v63;
                  v48[6] = v60 + 32;
                  v48[7] = v58 + 32 * v59;
                  if (v61) {
                    operator delete(v61);
                  }
                }
                else
                {
                  *(_OWORD *)unint64_t v50 = v129;
                  *(void *)(v50 + 16) = v44;
                  *(void *)(v50 + 24) = v46;
                  uint64_t v52 = v50 + 32;
                }
                v48[6] = v52;
                int v65 = Phase::Controller::SpatialQueryInstance::GetInputAs<Phase::SpatialModeler::RenderGroupInput<float>>(v48[4]);
                uint64_t v66 = (uint64_t)v65;
                float v67 = *(double *)(v45 + 56);
                if (*((float *)v65 + 16) > v67)
                {
                  uint64_t v68 = *v105;
                  memset(buf, 0, sizeof(buf));
                  long long v125 = 0u;
                  long long v126 = 0u;
                  long long v127 = 0u;
                  memset(v128, 0, 28);
                  *(_DWORD *)&v128[28] = v68;
                  if (v68)
                  {
                    uint64_t v69 = buf;
                    do
                    {
                      *(float *)uint64_t v69 = v67;
                      v69 += 4;
                      --v68;
                    }
                    while (v68);
                  }
                  long long v70 = v127;
                  *((_OWORD *)v65 + 8) = v126;
                  *((_OWORD *)v65 + 9) = v70;
                  long long v71 = *(_OWORD *)&v128[16];
                  *((_OWORD *)v65 + 10) = *(_OWORD *)v128;
                  *((_OWORD *)v65 + 11) = v71;
                  long long v72 = *(_OWORD *)&buf[16];
                  *((_OWORD *)v65 + 4) = *(_OWORD *)buf;
                  *((_OWORD *)v65 + 5) = v72;
                  long long v73 = v125;
                  *((_OWORD *)v65 + 6) = *(_OWORD *)&buf[32];
                  *((_OWORD *)v65 + 7) = v73;
                }
                uint64_t v74 = *((void *)v65 + 69);
                uint64_t v75 = *(void *)(v45 + 40);
                if (v74)
                {
                  if (v74 != v75)
                  {
                    long long v98 = **(id **)(Phase::Logger::GetInstance(v65) + 224);
                    if (os_log_type_enabled(v98, OS_LOG_TYPE_ERROR))
                    {
                      sGenerateSpatialModelerInfoString((uint64_t)out, *(void *)(v107 + 5864));
                      int v100 = out[23];
                      long long v101 = *(char **)out;
                      sGenerateRenderGroupInputString((uint64_t)v116, v66);
                      uint64_t v102 = out;
                      if (v100 < 0) {
                        uint64_t v102 = v101;
                      }
                      if (v117 >= 0) {
                        int v103 = v116;
                      }
                      else {
                        int v103 = (void **)v116[0];
                      }
                      *(_DWORD *)std::string buf = 136315906;
                      *(void *)&uint8_t buf[4] = "CvmSpatialModelerInstance.mm";
                      *(_WORD *)&unsigned char buf[12] = 1024;
                      *(_DWORD *)&buf[14] = 2355;
                      *(_WORD *)&unsigned char buf[18] = 2080;
                      *(void *)&unsigned char buf[20] = v102;
                      *(_WORD *)&unsigned char buf[28] = 2080;
                      *(void *)&buf[30] = v103;
                      _os_log_impl(&dword_221E5E000, v98, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [pQueryInput->mListenerEntity != inpSubmixInfo->mListenerHandle is true]: \"(%s) - render group is defined for multiple listeners (%s)\"", buf, 0x26u);
                      if (v117 < 0) {
                        operator delete(v116[0]);
                      }
                      if (out[23] < 0) {
                        operator delete(*(void **)out);
                      }
                    }

                    long long v97 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                    std::logic_error::logic_error(v97, "(%s) - render group is defined for multiple listeners (%s)");
                    goto LABEL_171;
                  }
                }
                else
                {
                  *((void *)v65 + 69) = v75;
                }
              }
            }
            else if (*(_DWORD *)v4 == 2)
            {
              unint64_t v91 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(0)
                                                                                                  + 224)));
              if (os_log_type_enabled(v91, OS_LOG_TYPE_ERROR))
              {
                sGenerateSpatialModelerInfoString((uint64_t)v116, *(void *)(v107 + 5864));
                int v93 = v117;
                unint64_t v94 = (void **)v116[0];
                memset(out, 0, sizeof(out));
                uuid_unparse(uu, out);
                std::string::basic_string[abi:ne180100]<0>(&v114, out);
                uint64_t v95 = v116;
                if (v93 < 0) {
                  uint64_t v95 = v94;
                }
                if (v115 >= 0) {
                  long long v96 = &v114;
                }
                else {
                  long long v96 = *(std::error_code **)&v114.__val_;
                }
                *(_DWORD *)std::string buf = 136315906;
                *(void *)&uint8_t buf[4] = "CvmSpatialModelerInstance.mm";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 2320;
                *(_WORD *)&unsigned char buf[18] = 2080;
                *(void *)&unsigned char buf[20] = v95;
                *(_WORD *)&unsigned char buf[28] = 2080;
                *(void *)&buf[30] = v96;
                _os_log_impl(&dword_221E5E000, v91, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [SpatialModelerGraph::Sustain == inGraphData.mGraphType is true]: \"(%s) - spatial query not found in lookup map for render group %s in sustain graph\"", buf, 0x26u);
                if (v115 < 0) {
                  operator delete(*(void **)&v114.__val_);
                }
                if (v117 < 0) {
                  operator delete(v116[0]);
                }
              }

              long long v97 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::logic_error::logic_error(v97, "(%s) - spatial query not found in lookup map for render group %s in sustain graph");
LABEL_171:
            }
            size_t v39 = (uint64_t *)v112;
          }
          else
          {
            uint64_t v53 = *((void *)a2 + 22);
            if (v53) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)v53 + 48))(v53, *v38);
            }
            std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueEntry>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueEntry>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueEntry>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueEntry>>>::__erase_unique<Phase::UniqueObjectId>((void *)a2 + 5, (void *)v43);
          }
          ++v38;
        }
        while (v38 != v39);
        unint64_t v38 = (uint64_t *)v111;
      }
      if (v38) {
        operator delete(v38);
      }
      atomic_store(0, (unint64_t *)(v4 + 768));
      for (uint64_t i = *(void **)(v4 + 1000); i; uint64_t i = (void *)*i)
      {
        if (i[5] != i[6] && !atomic_load((unsigned int *)i[4]))
        {
          Phase::SpatialModeler::Scheduler::SubmitQuery(*(unsigned __int8 **)(v107 + 5872), i[4], a3, (uint64_t)out);
          if (!out[0])
          {
            unint64_t v78 = Phase::Controller::SpatialQueryInstance::GetInputAs<Phase::SpatialModeler::RenderGroupInput<float>>(i[4]);
            uint64_t v79 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v78)
                                                                                                + 224)));
            if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
            {
              sGenerateSpatialModelerInfoString((uint64_t)&v121, *(void *)(v107 + 5864));
              if (v123 >= 0) {
                float v80 = &v121;
              }
              else {
                float v80 = v121;
              }
              sGenerateRenderGroupInputString((uint64_t)v116, (uint64_t)v78);
              int v81 = v117;
              unint64_t v82 = (void **)v116[0];
              sGenerateErrorCodeString(&v114, (const std::error_code *)&out[8]);
              uint64_t v83 = v116;
              if (v81 < 0) {
                uint64_t v83 = v82;
              }
              uint64_t v84 = &v114;
              if (v115 < 0) {
                uint64_t v84 = *(std::error_code **)&v114.__val_;
              }
              *(_DWORD *)std::string buf = 136316162;
              *(void *)&uint8_t buf[4] = "CvmSpatialModelerInstance.mm";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 2392;
              *(_WORD *)&unsigned char buf[18] = 2080;
              *(void *)&unsigned char buf[20] = v80;
              *(_WORD *)&unsigned char buf[28] = 2080;
              *(void *)&buf[30] = v83;
              *(_WORD *)&unsigned char buf[38] = 2080;
              *(void *)&uint8_t buf[40] = v84;
              _os_log_impl(&dword_221E5E000, v79, OS_LOG_TYPE_ERROR, "%25s:%-5d (%s) - failed to submit spatial query (%s) (%s)", buf, 0x30u);
              if (v115 < 0) {
                operator delete(*(void **)&v114.__val_);
              }
              if (v117 < 0) {
                operator delete(v116[0]);
              }
              if (v123 < 0) {
                operator delete(v121);
              }
            }

            uint64_t v85 = i[4];
            atomic_store(0, (unsigned int *)v85);
            uint64_t v86 = *(std::__shared_weak_count **)(v85 + 72);
            *(void *)(v85 + 64) = 0;
            *(void *)(v85 + 72) = 0;
            if (v86) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v86);
            }
            atomic_store(0, (unsigned int *)(v85 + 104));
          }
        }
      }
    }
    else
    {
LABEL_6:
      Phase::SpatialModeler::PriorityQueue::ClearEntries(a2, 1);
    }
    if (v109) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v109);
    }
  }
}

void sub_221EC8074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void **a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,long long buf,long long a52)
{
  if (*(char *)(v54 - 137) < 0) {
    operator delete(*(void **)(v54 - 160));
  }

  if (__p) {
    operator delete(__p);
  }
  if (a2 == 1)
  {
    uint64_t v57 = (Phase::Logger *)__cxa_begin_catch(a1);
    unint64_t v58 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v57)
                                                                                        + 224)));
    if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
    {
      uint64_t v59 = (void **)&a30;
      sGenerateSpatialModelerInfoString((uint64_t)&a30, *(void *)(a20 + 5864));
      if (a35 < 0) {
        uint64_t v59 = a30;
      }
      uint64_t v60 = (*(uint64_t (**)(Phase::Logger *))(*(void *)v57 + 16))(v57);
      LODWORD(buf) = 136315906;
      *(void *)((char *)&buf + 4) = "CvmSpatialModelerInstance.mm";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 2366;
      WORD1(a52) = 2080;
      *(void *)((char *)&a52 + 4) = v59;
      WORD6(a52) = 2080;
      *(void *)((char *)&a52 + 14) = v60;
      _os_log_impl(&dword_221E5E000, v58, OS_LOG_TYPE_ERROR, "%25s:%-5d (%s) - exception thrown and caught (exception: %s)", (uint8_t *)&buf, 0x26u);
      if (a35 < 0) {
        operator delete(a30);
      }
    }

    Phase::Controller::SpatialModelerInstance::DestroyTempSpatialGraphData(v61, v52);
    __cxa_end_catch();
    JUMPOUT(0x221EC701CLL);
  }
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_8,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_8>,void ()(Phase::SpatialModeler::PriorityQueueEntry &)>::~__func()
{
}

__n128 std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_8,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_8>,void ()(Phase::SpatialModeler::PriorityQueueEntry &)>::__clone(uint64_t a1)
{
  unsigned int v2 = (char *)operator new(0x18uLL);
  *(void *)unsigned int v2 = &unk_26D473490;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_8,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_8>,void ()(Phase::SpatialModeler::PriorityQueueEntry &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D473490;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_8,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_8>,void ()(Phase::SpatialModeler::PriorityQueueEntry &)>::operator()(uint64_t a1, void *a2)
{
  unsigned int v2 = *(void **)(*(void *)(a1 + 16) + 1000);
  if (v2)
  {
    while (1)
    {
      uint64_t v4 = v2[5];
      uint64_t v3 = v2[6];
      uint64_t v5 = v3 - v4;
      if (v3 != v4) {
        break;
      }
LABEL_10:
      unsigned int v2 = (void *)*v2;
      if (!v2) {
        return result;
      }
    }
    uint64_t v6 = 0;
    if ((unint64_t)(v5 >> 5) <= 1) {
      uint64_t v7 = 1;
    }
    else {
      uint64_t v7 = v5 >> 5;
    }
    uint64_t v8 = v2[5];
    while (*a2 != *(void *)v8 || a2[1] != *(void *)(v8 + 8))
    {
      ++v6;
      v8 += 32;
      if (v7 == v6) {
        goto LABEL_10;
      }
    }
    if (v5 == 32)
    {
      v2[6] = v4;
      unint64_t v9 = (unsigned int *)v2[4];
      if (v9)
      {
        if (atomic_load(v9 + 26))
        {
          unsigned int v11 = atomic_load(v9);
          if (v11 - 1 <= 1)
          {
            unsigned int v12 = v11;
            atomic_compare_exchange_strong((atomic_uint *volatile)v9, &v12, 6u);
            if (v12 == v11) {
              std::system_category();
            }
          }
        }
      }
    }
    else if (v5 >> 5 > (unint64_t)(v6 + 1))
    {
      __n128 result = *(__n128 *)(v3 - 32);
      long long v14 = *(_OWORD *)(v3 - 16);
      *(__n128 *)uint64_t v8 = result;
      *(_OWORD *)(v8 + 16) = v14;
      v2[6] -= 32;
    }
  }
  return result;
}

void std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_9,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_9>,void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::~__func()
{
}

void *std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_9,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_9>,void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26D4734D8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_9,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_9>,void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D4734D8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_9,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_9>,void ()(Phase::SpatialModeler::PriorityQueue &,Phase::SpatialModeler::Graph &)>::operator()(uint64_t a1)
{
}

void std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_10,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_10>,BOOL ()(Phase::SpatialModeler::PriorityQueueEntry const&,Phase::SpatialModeler::PriorityQueueEntry const&)>::~__func()
{
}

void *std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_10,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_10>,BOOL ()(Phase::SpatialModeler::PriorityQueueEntry const&,Phase::SpatialModeler::PriorityQueueEntry const&)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_26D473520;
  return result;
}

void std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_10,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_10>,BOOL ()(Phase::SpatialModeler::PriorityQueueEntry const&,Phase::SpatialModeler::PriorityQueueEntry const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D473520;
}

BOOL std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_10,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_10>,BOOL ()(Phase::SpatialModeler::PriorityQueueEntry const&,Phase::SpatialModeler::PriorityQueueEntry const&)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(double *)(a2 + 56) < *(double *)(a3 + 56);
}

void std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_11,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_11>,void ()(Phase::SpatialModeler::Query &)>::~__func()
{
}

__n128 std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_11,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_11>,void ()(Phase::SpatialModeler::Query &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26D473568;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_11,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_11>,void ()(Phase::SpatialModeler::Query &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D473568;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_11,std::allocator<Phase::Controller::SpatialModelerInstance::SetupGraphData(Phase::Controller::SpatialModelerInstance::GraphData &,Phase::SpatialModeler::GraphStage &)::$_11>,void ()(Phase::SpatialModeler::Query &)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, Phase::Controller::SpatialModelerInstance::GraphData *a4)
{
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a2 > 0x16)
  {
    uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v4 = a2 | 7;
    }
    uint64_t v5 = v4 + 1;
    uint64_t v6 = operator new(v4 + 1);
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 16) = v5 | 0x8000000000000000;
    *(void *)a1 = v6;
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 23) = a2;
  }
  return a1;
}

void Phase::Command<128>::Invoker<Phase::Controller::SpatialModelerInstance::CreateSustainJob(void)::$_0,void>::~Invoker()
{
}

uint64_t Phase::Command<128>::Invoker<Phase::Controller::SpatialModelerInstance::CreateSustainJob(void)::$_0,void>::Call(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 8) + 88);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

void Phase::Command<128>::Invoker<Phase::Controller::SpatialModelerInstance::CreateSustainJob(void)::$_1,void>::~Invoker()
{
}

uint64_t Phase::Command<128>::Invoker<Phase::Controller::SpatialModelerInstance::CreateSustainJob(void)::$_1,void>::Call(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 8) + 88);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

void Phase::Command<128>::Invoker<Phase::Controller::SpatialModelerInstance::CreateSustainJob(void)::$_2,void>::~Invoker()
{
}

void Phase::Command<128>::Invoker<Phase::Controller::SpatialModelerInstance::CreateSustainJob(void)::$_2,void>::Call(uint64_t a1)
{
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>,void *>>>::operator()[abi:ne180100](char a1, void *__p)
{
  if (a1)
  {
    uint64_t v3 = (std::__shared_weak_count *)__p[4];
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void Phase::Command<128>::Invoker<Phase::Controller::SpatialModelerInstance::CreateSustainJob(void)::$_3,void>::~Invoker()
{
}

uint64_t Phase::Command<128>::Invoker<Phase::Controller::SpatialModelerInstance::CreateSustainJob(void)::$_3,void>::Call(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 8) + 88);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

void Phase::Command<128>::Invoker<Phase::Controller::SpatialModelerInstance::CreateSustainJob(void)::$_4,void>::~Invoker()
{
}

uint64_t Phase::Command<128>::Invoker<Phase::Controller::SpatialModelerInstance::CreateSustainJob(void)::$_4,void>::Call(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 8) + 88);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

void Phase::Command<128>::Invoker<Phase::Controller::SpatialModelerInstance::CreateSustainJob(void)::$_5,void>::~Invoker()
{
}

void Phase::Command<128>::Invoker<Phase::Controller::SpatialModelerInstance::CreateSustainJob(void)::$_5,void>::Call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = v1 + 1152;
  Phase::Controller::SpatialModelerInstance::BuildIRs(v1, v1 + 1152);

  Phase::Controller::SpatialModelerInstance::DestroyTempSpatialGraphData(v3, v2);
}

void Phase::Command<128>::Invoker<Phase::Controller::SpatialModelerInstance::CreateAttackJob(void)::$_0,void>::~Invoker()
{
}

uint64_t Phase::Command<128>::Invoker<Phase::Controller::SpatialModelerInstance::CreateAttackJob(void)::$_0,void>::Call(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 8) + 88);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

void Phase::Command<128>::Invoker<Phase::Controller::SpatialModelerInstance::CreateAttackJob(void)::$_1,void>::~Invoker()
{
}

uint64_t Phase::Command<128>::Invoker<Phase::Controller::SpatialModelerInstance::CreateAttackJob(void)::$_1,void>::Call(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 8) + 88);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

void Phase::Command<128>::Invoker<Phase::Controller::SpatialModelerInstance::CreateAttackJob(void)::$_2,void>::~Invoker()
{
}

void Phase::Command<128>::Invoker<Phase::Controller::SpatialModelerInstance::CreateAttackJob(void)::$_2,void>::Call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  Phase::Controller::SpatialModelerInstance::BuildIRs(v1, v1 + 3328);
  Phase::Controller::SpatialModelerInstance::DestroyTempSpatialGraphData(v2, v1 + 3328);
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  if (*(void *)(v1 + 3392)) {
    operator new();
  }
  uint64_t v3 = *(void *)(v1 + 3640);
  if (v3)
  {
    *(unsigned char *)(v3 + 80) = 0;
    operator new();
  }
  Phase::SortedCommandQueue<Phase::SpatialModeler::PriorityQueue,Phase::SpatialModeler::PriorityQueueCommandType,std::variant<std::monostate,Phase::SpatialModeler::PriorityQueueEntry,Phase::UniqueObjectId,Phase::SpatialModeler::PriorityQueueClusterIndexUpdate,Phase::SpatialModeler::PriorityQueueGlobals>>::Commit();
}

void sub_221EC8C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void Phase::Command<128>::Invoker<Phase::Controller::SpatialModelerInstance::CreateAttackJob(void)::$_3,void>::~Invoker()
{
}

uint64_t Phase::Command<128>::Invoker<Phase::Controller::SpatialModelerInstance::CreateAttackJob(void)::$_3,void>::Call(uint64_t result)
{
  return result;
}

void std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>>>::__deallocate_node(*(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

uint64_t *std::list<std::shared_ptr<Phase::Job>>::list(uint64_t *a1, uint64_t a2)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  for (uint64_t i = a2; ; std::list<std::shared_ptr<Phase::Job>>::push_back(a1, (void *)(i + 16)))
  {
    uint64_t i = *(void *)(i + 8);
    if (i == a2) {
      break;
    }
  }
  return a1;
}

void sub_221EC8D10(_Unwind_Exception *a1)
{
  std::__list_imp<std::shared_ptr<Phase::Job>>::clear(v1);
  _Unwind_Resume(a1);
}

void *std::list<double>::list(void *a1, uint64_t a2)
{
  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 != a2)
  {
    uint64_t v5 = 1;
    uint64_t v6 = a1;
    do
    {
      uint64_t v7 = operator new(0x18uLL);
      void v7[2] = *(void *)(v3 + 16);
      void *v7 = v6;
      v7[1] = a1;
      v6[1] = v7;
      *a1 = v7;
      a1[2] = v5;
      uint64_t v3 = *(void *)(v3 + 8);
      ++v5;
      uint64_t v6 = v7;
    }
    while (v3 != a2);
  }
  return a1;
}

void sub_221EC8DAC(_Unwind_Exception *a1)
{
  std::__list_imp<Phase::Controller::AssetUnloader::ObjectUnloadRequest>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<Phase::Controller::SpatialModelerInstance::StartSustainGraph(void)::$_0,std::allocator<Phase::Controller::SpatialModelerInstance::StartSustainGraph(void)::$_0>,void ()(BOOL,std::list<std::shared_ptr<Phase::Job>>)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_26D473740;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void std::__function::__func<Phase::Controller::SpatialModelerInstance::StartSustainGraph(void)::$_0,std::allocator<Phase::Controller::SpatialModelerInstance::StartSustainGraph(void)::$_0>,void ()(BOOL,std::list<std::shared_ptr<Phase::Job>>)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_26D473740;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  JUMPOUT(0x223C938A0);
}

void *std::__function::__func<Phase::Controller::SpatialModelerInstance::StartSustainGraph(void)::$_0,std::allocator<Phase::Controller::SpatialModelerInstance::StartSustainGraph(void)::$_0>,void ()(BOOL,std::list<std::shared_ptr<Phase::Job>>)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x28uLL);
  *uint64_t v2 = &unk_26D473740;
  uint64_t v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  v2[4] = *(void *)(a1 + 32);
  return v2;
}

void sub_221EC8EFC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<Phase::Controller::SpatialModelerInstance::StartSustainGraph(void)::$_0,std::allocator<Phase::Controller::SpatialModelerInstance::StartSustainGraph(void)::$_0>,void ()(BOOL,std::list<std::shared_ptr<Phase::Job>>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D473740;
  uint64_t v4 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v5 = *(_OWORD *)(a1 + 8);
    a2[3] = *(void *)(a1 + 24);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  a2[4] = *(void *)(a1 + 32);
}

void std::__function::__func<Phase::Controller::SpatialModelerInstance::StartSustainGraph(void)::$_0,std::allocator<Phase::Controller::SpatialModelerInstance::StartSustainGraph(void)::$_0>,void ()(BOOL,std::list<std::shared_ptr<Phase::Job>>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<Phase::Controller::SpatialModelerInstance::StartSustainGraph(void)::$_0,std::allocator<Phase::Controller::SpatialModelerInstance::StartSustainGraph(void)::$_0>,void ()(BOOL,std::list<std::shared_ptr<Phase::Job>>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }

  operator delete(__p);
}

void std::__function::__func<Phase::Controller::SpatialModelerInstance::StartSustainGraph(void)::$_0,std::allocator<Phase::Controller::SpatialModelerInstance::StartSustainGraph(void)::$_0>,void ()(BOOL,std::list<std::shared_ptr<Phase::Job>>)>::operator()(uint64_t a1, unsigned __int8 *a2, uint64_t *a3)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  int v4 = *a2;
  v18[0] = (uint64_t)v18;
  v18[1] = (uint64_t)v18;
  uint64_t v19 = 0;
  uint64_t v5 = a3[2];
  if (v5)
  {
    uint64_t v7 = *a3;
    uint64_t v6 = (uint64_t *)a3[1];
    uint64_t v8 = *v6;
    *(void *)(v8 + 8) = *(void *)(*a3 + 8);
    **(void **)(v7 + 8) = v8;
    uint64_t v9 = v18[0];
    *(void *)(v18[0] + 8) = v6;
    uint64_t *v6 = v9;
    *(void *)(v7 + 8) = v18;
    v18[0] = v7;
    uint64_t v19 = v5;
    a3[2] = 0;
  }
  uint64_t v10 = *(void *)(a1 + 32);
  BOOL v11 = v4 == 0;
  unsigned int v12 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance((Phase::Logger *)a1)
                                                                                      + 224)));
  double v13 = v12;
  if (v11)
  {
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      Phase::Controller::SpatialModelerInstance::GetDescription((Phase::Controller::SpatialModelerInstance *)__p, v10);
      unint64_t v16 = v21 >= 0 ? __p : (void **)__p[0];
      uint64_t v17 = *(char *)(a1 + 31) >= 0 ? a1 + 8 : *(void *)(a1 + 8);
      *(_DWORD *)std::string buf = 136315906;
      BOOL v23 = "CvmSpatialModelerInstance.mm";
      __int16 v24 = 1024;
      int v25 = 3073;
      __int16 v26 = 2080;
      uint64_t v27 = v16;
      __int16 v28 = 2080;
      uint64_t v29 = v17;
      _os_log_impl(&dword_221E5E000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d %s: failed to start sustain graphs (stage, rate):\n%s", buf, 0x26u);
      if (v21 < 0) {
        operator delete(__p[0]);
      }
    }

    std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>>>::clear(v10 + 5784);
  }
  else
  {
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      Phase::Controller::SpatialModelerInstance::GetDescription((Phase::Controller::SpatialModelerInstance *)__p, v10);
      if (v21 >= 0) {
        long long v14 = __p;
      }
      else {
        long long v14 = (void **)__p[0];
      }
      if (*(char *)(a1 + 31) >= 0) {
        uint64_t v15 = a1 + 8;
      }
      else {
        uint64_t v15 = *(void *)(a1 + 8);
      }
      *(_DWORD *)std::string buf = 136315906;
      BOOL v23 = "CvmSpatialModelerInstance.mm";
      __int16 v24 = 1024;
      int v25 = 3068;
      __int16 v26 = 2080;
      uint64_t v27 = v14;
      __int16 v28 = 2080;
      uint64_t v29 = v15;
      _os_log_impl(&dword_221E5E000, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s: started sustain graphs (stage, rate):\n%s", buf, 0x26u);
      if (v21 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  std::mutex::unlock((std::mutex *)(v10 + 5648));
  std::__list_imp<std::shared_ptr<Phase::Job>>::clear(v18);
}

void sub_221EC9240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__list_imp<std::shared_ptr<Phase::Job>>::clear(&a9);
  _Unwind_Resume(a1);
}

void std::__function::__func<Phase::Controller::SpatialModelerInstance::StopSustainGraph(BOOL)::$_1,std::allocator<Phase::Controller::SpatialModelerInstance::StopSustainGraph(BOOL)::$_1>,void ()(BOOL,std::list<std::shared_ptr<Phase::Job>>)>::~__func()
{
}

__n128 std::__function::__func<Phase::Controller::SpatialModelerInstance::StopSustainGraph(BOOL)::$_1,std::allocator<Phase::Controller::SpatialModelerInstance::StopSustainGraph(BOOL)::$_1>,void ()(BOOL,std::list<std::shared_ptr<Phase::Job>>)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26D473788;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<Phase::Controller::SpatialModelerInstance::StopSustainGraph(BOOL)::$_1,std::allocator<Phase::Controller::SpatialModelerInstance::StopSustainGraph(BOOL)::$_1>,void ()(BOOL,std::list<std::shared_ptr<Phase::Job>>)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D473788;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<Phase::Controller::SpatialModelerInstance::StopSustainGraph(BOOL)::$_1,std::allocator<Phase::Controller::SpatialModelerInstance::StopSustainGraph(BOOL)::$_1>,void ()(BOOL,std::list<std::shared_ptr<Phase::Job>>)>::operator()(Phase::Logger *a1, unsigned __int8 *a2, uint64_t *a3)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  int v4 = *a2;
  v21[0] = (uint64_t)v21;
  v21[1] = (uint64_t)v21;
  uint64_t v22 = 0;
  uint64_t v5 = a3[2];
  if (v5)
  {
    uint64_t v7 = *a3;
    uint64_t v6 = (uint64_t *)a3[1];
    uint64_t v8 = *v6;
    *(void *)(v8 + 8) = *(void *)(*a3 + 8);
    **(void **)(v7 + 8) = v8;
    uint64_t v9 = v21[0];
    *(void *)(v21[0] + 8) = v6;
    uint64_t *v6 = v9;
    *(void *)(v7 + 8) = v21;
    v21[0] = v7;
    uint64_t v22 = v5;
    a3[2] = 0;
  }
  uint64_t v10 = *((void *)a1 + 1);
  BOOL v11 = v4 == 0;
  unsigned int v12 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(a1)
                                                                                      + 224)));
  double v13 = v12;
  if (v11)
  {
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      goto LABEL_16;
    }
    Phase::Controller::SpatialModelerInstance::GetDescription((Phase::Controller::SpatialModelerInstance *)__p, v10);
    if (v24 >= 0) {
      uint64_t v19 = __p;
    }
    else {
      uint64_t v19 = (void **)__p[0];
    }
    uint64_t v20 = *((void *)a1 + 2);
    *(_DWORD *)std::string buf = 136315906;
    __int16 v26 = "CvmSpatialModelerInstance.mm";
    __int16 v27 = 1024;
    int v28 = 3108;
    __int16 v29 = 2080;
    uint64_t v30 = v19;
    __int16 v31 = 2048;
    uint64_t v32 = v20;
    unint64_t v16 = "%25s:%-5d %s: failed to stop (%lu) sustain graphs";
    uint64_t v17 = v13;
    os_log_type_t v18 = OS_LOG_TYPE_ERROR;
  }
  else
  {
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_16;
    }
    Phase::Controller::SpatialModelerInstance::GetDescription((Phase::Controller::SpatialModelerInstance *)__p, v10);
    if (v24 >= 0) {
      long long v14 = __p;
    }
    else {
      long long v14 = (void **)__p[0];
    }
    uint64_t v15 = *((void *)a1 + 2);
    *(_DWORD *)std::string buf = 136315906;
    __int16 v26 = "CvmSpatialModelerInstance.mm";
    __int16 v27 = 1024;
    int v28 = 3103;
    __int16 v29 = 2080;
    uint64_t v30 = v14;
    __int16 v31 = 2048;
    uint64_t v32 = v15;
    unint64_t v16 = "%25s:%-5d %s: succesfully stopped all (%lu) sustain graphs";
    uint64_t v17 = v13;
    os_log_type_t v18 = OS_LOG_TYPE_DEFAULT;
  }
  _os_log_impl(&dword_221E5E000, v17, v18, v16, buf, 0x26u);
  if (v24 < 0) {
    operator delete(__p[0]);
  }
LABEL_16:

  atomic_store(0, (unsigned __int8 *)(v10 + 5643));
  std::mutex::unlock((std::mutex *)(v10 + 5648));
  std::__list_imp<std::shared_ptr<Phase::Job>>::clear(v21);
}

void sub_221EC952C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__list_imp<std::shared_ptr<Phase::Job>>::clear(&a9);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>,void *> *>>(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a1[1];
  if (!v6) {
    goto LABEL_7;
  }
  for (uint64_t i = 0; i != v6; ++i)
    *(void *)(*a1 + 8 * i) = 0;
  uint64_t v8 = (uint64_t *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      *((_OWORD *)v8 + 1) = *((_OWORD *)a2 + 1);
      void v8[4] = a2[4];
      uint64_t v9 = (uint64_t *)*v8;
      std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>>>::__node_insert_multi((uint64_t)a1, v8);
      a2 = (uint64_t *)*a2;
      uint64_t v8 = v9;
      if (!v9) {
        goto LABEL_7;
      }
    }
    do
    {
      long long v14 = (uint64_t *)*v8;
      operator delete(v8);
      uint64_t v8 = v14;
    }
    while (v14);
  }
  else
  {
LABEL_7:
    while (a2 != a3)
    {
      uint64_t v10 = operator new(0x28uLL);
      *(void *)uint64_t v10 = 0;
      uint64_t v11 = a2[4];
      v10[1] = *((_OWORD *)a2 + 1);
      *((void *)v10 + 4) = v11;
      uint64_t v12 = 0xCBF29CE484222325;
      for (uint64_t j = 16; j != 32; ++j)
        uint64_t v12 = 0x100000001B3 * (v12 ^ *((char *)v10 + j));
      *((void *)v10 + 1) = v12;
      std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>>>::__node_insert_multi((uint64_t)a1, v10);
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_221EC9680(void *a1)
{
  __cxa_begin_catch(a1);
  do
  {
    uint64_t v2 = (void *)*v1;
    operator delete(v1);
    uint64_t v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_221EC96A0(_Unwind_Exception *a1)
{
}

void std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>>>::__node_insert_multi(uint64_t a1, void *a2)
{
  unint64_t v4 = 0xCBF29CE484222325;
  for (uint64_t i = 16; i != 32; ++i)
    unint64_t v4 = 0x100000001B3 * (v4 ^ *((char *)a2 + i));
  a2[1] = v4;
  unint64_t v6 = *(void *)(a1 + 8);
  float v7 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    BOOL v9 = 1;
    if (v6 >= 3) {
      BOOL v9 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v10 = v9 | (2 * v6);
    unint64_t v11 = vcvtps_u32_f32(v7 / v8);
    if (v10 <= v11) {
      int8x8_t prime = (int8x8_t)v11;
    }
    else {
      int8x8_t prime = (int8x8_t)v10;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v6 = *(void *)(a1 + 8);
    }
    if (*(void *)&prime > v6) {
      goto LABEL_102;
    }
    if (*(void *)&prime >= v6) {
      goto LABEL_48;
    }
    unint64_t v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v6 < 3 || (uint8x8_t v20 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
    {
      unint64_t v19 = std::__next_prime(v19);
    }
    else
    {
      uint64_t v21 = 1 << -(char)__clz(v19 - 1);
      if (v19 >= 2) {
        unint64_t v19 = v21;
      }
    }
    if (*(void *)&prime <= v19) {
      int8x8_t prime = (int8x8_t)v19;
    }
    if (*(void *)&prime >= v6)
    {
      unint64_t v6 = *(void *)(a1 + 8);
      goto LABEL_48;
    }
    if (prime)
    {
LABEL_102:
      if (*(void *)&prime >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      double v13 = operator new(8 * *(void *)&prime);
      long long v14 = *(void **)a1;
      *(void *)a1 = v13;
      if (v14) {
        operator delete(v14);
      }
      uint64_t v15 = 0;
      *(int8x8_t *)(a1 + 8) = prime;
      do
        *(void *)(*(void *)a1 + 8 * v15++) = 0;
      while (*(void *)&prime != v15);
      unint64_t v16 = *(void **)(a1 + 16);
      if (v16)
      {
        unint64_t v17 = v16[1];
        uint8x8_t v18 = (uint8x8_t)vcnt_s8(prime);
        v18.i16[0] = vaddlv_u8(v18);
        if (v18.u32[0] > 1uLL)
        {
          if (v17 >= *(void *)&prime) {
            v17 %= *(void *)&prime;
          }
        }
        else
        {
          v17 &= *(void *)&prime - 1;
        }
        *(void *)(*(void *)a1 + 8 * v17) = a1 + 16;
        for (uint64_t j = (void *)*v16; *v16; uint64_t j = (void *)*v16)
        {
          unint64_t v23 = j[1];
          if (v18.u32[0] > 1uLL)
          {
            if (v23 >= *(void *)&prime) {
              v23 %= *(void *)&prime;
            }
          }
          else
          {
            v23 &= *(void *)&prime - 1;
          }
          if (v23 == v17)
          {
            unint64_t v16 = j;
          }
          else
          {
            char v24 = j;
            if (*(void *)(*(void *)a1 + 8 * v23))
            {
              do
              {
                int v25 = v24;
                char v24 = (void *)*v24;
                if (!v24) {
                  break;
                }
              }
              while (j[2] == v24[2] && j[3] == v24[3]);
              *unint64_t v16 = v24;
              void *v25 = **(void **)(*(void *)a1 + 8 * v23);
              **(void **)(*(void *)a1 + 8 * v23) = j;
            }
            else
            {
              *(void *)(*(void *)a1 + 8 * v23) = v16;
              unint64_t v16 = j;
              unint64_t v17 = v23;
            }
          }
        }
      }
      unint64_t v6 = (unint64_t)prime;
    }
    else
    {
      size_t v39 = *(void **)a1;
      *(void *)a1 = 0;
      if (v39) {
        operator delete(v39);
      }
      unint64_t v6 = 0;
      *(void *)(a1 + 8) = 0;
    }
  }
LABEL_48:
  uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v27.i16[0] = vaddlv_u8(v27);
  if (v27.u32[0] > 1uLL)
  {
    unint64_t v28 = v4;
    if (v6 <= v4) {
      unint64_t v28 = v4 % v6;
    }
  }
  else
  {
    unint64_t v28 = (v6 - 1) & v4;
  }
  __int16 v29 = *(void **)(*(void *)a1 + 8 * v28);
  if (v29)
  {
    int v30 = 0;
    do
    {
      __int16 v31 = v29;
      __int16 v29 = (void *)*v29;
      if (!v29) {
        break;
      }
      unint64_t v32 = v29[1];
      if (v27.u32[0] > 1uLL)
      {
        unint64_t v33 = v29[1];
        if (v32 >= v6) {
          unint64_t v33 = v32 % v6;
        }
      }
      else
      {
        unint64_t v33 = v32 & (v6 - 1);
      }
      if (v33 != v28) {
        break;
      }
      if (v32 == v4)
      {
        BOOL v34 = v29[2] == a2[2] && v29[3] == a2[3];
        BOOL v35 = v34;
      }
      else
      {
        BOOL v35 = 0;
      }
      int v36 = v30 & !v35;
      v30 |= v35;
    }
    while (v36 != 1);
  }
  else
  {
    __int16 v31 = 0;
  }
  unint64_t v37 = a2[1];
  if (v27.u32[0] > 1uLL)
  {
    if (v37 >= v6) {
      v37 %= v6;
    }
  }
  else
  {
    v37 &= v6 - 1;
  }
  if (!v31)
  {
    *a2 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = a2;
    *(void *)(*(void *)a1 + 8 * v37) = a1 + 16;
    if (!*a2) {
      goto LABEL_89;
    }
    unint64_t v38 = *(void *)(*a2 + 8);
    if (v27.u32[0] > 1uLL)
    {
      if (v38 >= v6) {
        v38 %= v6;
      }
    }
    else
    {
      v38 &= v6 - 1;
    }
LABEL_88:
    *(void *)(*(void *)a1 + 8 * v38) = a2;
    goto LABEL_89;
  }
  *a2 = *v31;
  *__int16 v31 = a2;
  if (*a2)
  {
    unint64_t v38 = *(void *)(*a2 + 8);
    if (v27.u32[0] > 1uLL)
    {
      if (v38 >= v6) {
        v38 %= v6;
      }
    }
    else
    {
      v38 &= v6 - 1;
    }
    if (v38 != v37) {
      goto LABEL_88;
    }
  }
LABEL_89:
  ++*(void *)(a1 + 24);
}

void _ZN5Phase7details13SharedSlotMapINS_10Controller22SpatialModelerInstance10SubmixInfoENS_8Handle64EE12DeepCopyFromIZNS_13SharedSlotMapIS4_S5_DnE12DeepCopyFromERKS9_EUlRT_E_EEvRKS6_OSC_(uint64_t *a1, unsigned int *a2)
{
  uint64_t v4 = a2[4];
  *((_DWORD *)a1 + 4) = v4;
  Phase::details::SharedSlotMap<Phase::Controller::SpatialModelerInstance::SubmixInfo,Phase::Handle64>::AllocSlots(&v16, v4);
  uint64_t v5 = (std::__shared_weak_count *)a1[1];
  *(_OWORD *)a1 = v16;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  unint64_t v6 = *((unsigned int *)a1 + 4);
  if (v6)
  {
    uint64_t v7 = 0;
    for (unint64_t i = 0; i < v6; ++i)
    {
      uint64_t v9 = *a1;
      uint64_t v10 = *(void *)a2;
      uint64_t v11 = *(void *)(*(void *)a2 + v7);
      if (v11)
      {
        std::allocate_shared[abi:ne180100]<Phase::Controller::SpatialModelerInstance::SubmixInfo,std::allocator<Phase::Controller::SpatialModelerInstance::SubmixInfo>,Phase::Controller::SpatialModelerInstance::SubmixInfo&,void>(v11, &v16);
        long long v12 = v16;
        long long v16 = 0uLL;
        double v13 = *(std::__shared_weak_count **)(v9 + v7 + 8);
        *(_OWORD *)(v9 + v7) = v12;
        if (v13) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v13);
        }
        if (*((void *)&v16 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v16 + 1));
        }
        unint64_t v6 = *((unsigned int *)a1 + 4);
      }
      *(void *)(v9 + v7 + 16) = *(void *)(v10 + v7 + 16);
      v7 += 24;
    }
  }
  unsigned int v14 = atomic_load(a2 + 5);
  atomic_store(v14, (unsigned int *)a1 + 5);
  unsigned int v15 = atomic_load(a2 + 6);
  atomic_store(v15, (unsigned int *)a1 + 6);
}

void Phase::Controller::SpatialModelerSystem::~SpatialModelerSystem(Phase::Controller::SpatialModelerSystem *this)
{
  Phase::Controller::SpatialModelerSystem::Destroy(this);
  *((void *)this + 12) = 0;
  uint64_t v2 = (void **)((char *)this + 64);
  std::vector<Phase::Controller::GeometryPermutation>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = (void **)((char *)this + 40);
  std::vector<Phase::SpatialModeler::OptionalPropertyDescription>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,std::unique_ptr<Phase::Controller::SpatialModelerCategory>>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,std::unique_ptr<Phase::Controller::SpatialModelerCategory>>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,std::unique_ptr<Phase::Controller::SpatialModelerCategory>>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,std::unique_ptr<Phase::Controller::SpatialModelerCategory>>>>::~__hash_table((uint64_t)this);
}

void Phase::Controller::SpatialModelerSystem::Destroy(Phase::Controller::SpatialModelerSystem *this)
{
  for (unint64_t i = (void *)*((void *)this + 2); i; unint64_t i = (void *)*i)
  {
    uint64_t v3 = *(Phase::Controller::SpatialSubmixRouter ***)(i[3] + 80);
    if (Phase::Controller::SpatialModelerInstance::StopUpdate((Phase::Controller::SpatialModelerInstance *)v3)) {
      Phase::Controller::SpatialModelerInstance::Reset(v3);
    }
  }

  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,std::unique_ptr<Phase::Controller::SpatialModelerCategory>>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,std::unique_ptr<Phase::Controller::SpatialModelerCategory>>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,std::unique_ptr<Phase::Controller::SpatialModelerCategory>>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,std::unique_ptr<Phase::Controller::SpatialModelerCategory>>>>::clear((uint64_t)this);
}

uint64_t Phase::Controller::SpatialModelerSystem::Initialize(Phase::Controller::SpatialModelerSystem *this, const Phase::Controller::SpatialModelerSystem::InitializeParameters *a2, Phase::Controller::TaskManager *a3, Phase::Controller::RendererSystem *a4)
{
  unint64_t v6 = this;
  uint64_t v99 = *MEMORY[0x263EF8340];
  *((void *)this + 11) = a3;
  *((void *)this + 12) = *((void *)a3 + 5);
  uint64_t v7 = **(id **)(Phase::Logger::GetInstance(this) + 224);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = "CvmSpatialModelerSystem.mm";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 73;
    _os_log_impl(&dword_221E5E000, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Initializing spatial modeler system with engine (dispatch) JobManager.", buf, 0x12u);
  }
  float v8 = (Phase::Controller::SpatialModelerRegistry *)Phase::Controller::TaskManager::GetService<Phase::Controller::SpatialModelerRegistry>(a3, 5);
  Phase::Controller::SpatialModelerRegistry::GetSpatialCategories(v8, v86);
  memset(v84, 0, sizeof(v84));
  int v85 = 1065353216;
  if (v87)
  {
    uint64_t v11 = (int *)(v87 + 16);
    unint64_t v10 = *(int *)(v87 + 16);
    int8x8_t v12 = *(int8x8_t *)((char *)a2 + 48);
    if (v12)
    {
      uint8x8_t v13 = (uint8x8_t)vcnt_s8(v12);
      v13.i16[0] = vaddlv_u8(v13);
      if (v13.u32[0] > 1uLL)
      {
        unint64_t v14 = *(int *)(v87 + 16);
        if (*(void *)&v12 <= v10) {
          unint64_t v14 = v10 % *(void *)&v12;
        }
      }
      else
      {
        unint64_t v14 = (*(void *)&v12 - 1) & v10;
      }
      unsigned int v15 = *(uint64_t ***)(*((void *)a2 + 5) + 8 * v14);
      if (v15)
      {
        for (unint64_t i = *v15; i; unint64_t i = (uint64_t *)*i)
        {
          unint64_t v17 = i[1];
          if (v17 == v10)
          {
            if (*((_DWORD *)i + 4) == v10) {
              operator new();
            }
          }
          else
          {
            if (v13.u32[0] > 1uLL)
            {
              if (v17 >= *(void *)&v12) {
                v17 %= *(void *)&v12;
              }
            }
            else
            {
              v17 &= *(void *)&v12 - 1;
            }
            if (v17 != v14) {
              break;
            }
          }
        }
      }
    }
    uint64_t v75 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v9)
                                                                                        + 224)));
    if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
    {
      int v76 = *v11;
      if (*v11 == 4)
      {
        uint8x8_t v77 = "ambient";
      }
      else
      {
        GetSpatialCategoryString(*v11);
        id v4 = objc_claimAutoreleasedReturnValue();
        uint8x8_t v77 = (const char *)[v4 UTF8String];
      }
      *(_DWORD *)std::string buf = 136315650;
      *(void *)&uint8_t buf[4] = "CvmSpatialModelerSystem.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 108;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&unsigned char buf[20] = v77;
      _os_log_impl(&dword_221E5E000, v75, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument): \"Initial spatial category to modeler map does not contain spatial category: %s.\"", buf, 0x1Cu);
      if (v76 != 4) {
    }
      }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Initial spatial category to modeler map does not contain spatial category: %s.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
  }
  Phase::SpatialModeler::GetOptionalPropertyDescriptions(buf);
  uint8x8_t v18 = (void **)((char *)v6 + 40);
  if (*((void *)v6 + 5))
  {
    std::vector<Phase::SpatialModeler::OptionalPropertyDescription>::__clear[abi:ne180100]((uint64_t *)v6 + 5);
    operator delete(*v18);
    uint64_t *v18 = 0;
    *((void *)v6 + 6) = 0;
    *((void *)v6 + 7) = 0;
  }
  *(_OWORD *)((char *)v6 + 40) = *(_OWORD *)buf;
  *((void *)v6 + 7) = *(void *)&buf[16];
  memset(buf, 0, 24);
  unint64_t v94 = (void **)buf;
  std::vector<Phase::SpatialModeler::OptionalPropertyDescription>::__destroy_vector::operator()[abi:ne180100](&v94);
  Phase::Controller::SpatialModelerSystem::SetParameters((unsigned __int8 *)v6, (uint64_t *)a2 + 10);
  Phase::Controller::SpatialModelerSystem::SetComputeTimes(v6, (uint64_t)v84);
  int v81 = (int64x2_t *)((char *)v6 + 64);
  if (*((void *)v6 + 8) != *((void *)v6 + 9)) {
    std::terminate();
  }
  unint64_t v19 = (uint64_t *)*((void *)v6 + 2);
  if (v19)
  {
    uint64_t v80 = (uint64_t)v6 + 80;
    uint64_t v79 = v6;
    do
    {
      Phase::Controller::SpatialModelerCategory::GetEntityShapeTemplates((Phase::Controller::SpatialModelerCategory *)v19[3], (uint64_t)&v88);
      uint64_t v21 = v88;
      uint64_t v20 = v89;
      uint64_t v82 = v89;
      while (v21 != v20)
      {
        uint64_t v23 = *((void *)v6 + 8);
        uint64_t v22 = *((void *)v6 + 9);
        if (v23 == v22) {
          goto LABEL_50;
        }
        while (1)
        {
          if (*(_DWORD *)v23 == *(_DWORD *)v21)
          {
            if (*(_DWORD *)v23 != 1) {
              break;
            }
            char v24 = Phase::UnorderedStringMap<Phase::OptionsValue>::Find((void *)(v23 + 8), (long long *)&Phase::Geometry::MeshOptions::SortPrimitives);
            if (v24)
            {
              int v25 = (int *)(v24 + 7);
              if (*((_DWORD *)v24 + 24) != 1) {
                int v25 = &dword_2645F71D8;
              }
            }
            else
            {
              int v25 = &dword_2645F71D8;
            }
            int v26 = *v25;
            uint8x8_t v27 = Phase::UnorderedStringMap<Phase::OptionsValue>::Find((void *)(v21 + 8), (long long *)&Phase::Geometry::MeshOptions::SortPrimitives);
            if (v27)
            {
              unint64_t v28 = (int *)(v27 + 7);
              if (*((_DWORD *)v27 + 24) != 1) {
                unint64_t v28 = &dword_2645F71D8;
              }
            }
            else
            {
              unint64_t v28 = &dword_2645F71D8;
            }
            if (v26 == *v28) {
              break;
            }
          }
          v23 += 80;
          if (v23 == v22)
          {
            uint64_t v23 = v22;
            break;
          }
        }
        if (v23 == *((void *)v6 + 9))
        {
LABEL_50:
          memset(&buf[8], 0, 32);
          *(_DWORD *)std::string buf = 0;
          int v91 = 1065353216;
          long long __p = 0u;
          long long v93 = 0u;
          *(_DWORD *)std::string buf = *(_DWORD *)v21;
          if (*(_DWORD *)v21 == 1)
          {
            unint64_t v32 = Phase::UnorderedStringMap<Phase::OptionsValue>::Find((void *)(v21 + 8), (long long *)&Phase::Geometry::MeshOptions::SortPrimitives);
            if (v32)
            {
              unint64_t v33 = (int *)(v32 + 7);
              if (*((_DWORD *)v32 + 24) != 1) {
                unint64_t v33 = &dword_2645F71D8;
              }
            }
            else
            {
              unint64_t v33 = &dword_2645F71D8;
            }
            int v36 = *v33;
            if (v36)
            {
              LODWORD(v94) = v36;
              int v98 = 1;
              Phase::UnorderedStringMap<Phase::OptionsValue>::Set((uint64_t)&buf[8], (uint64_t)&Phase::Geometry::MeshOptions::SortPrimitives, (uint64_t)&v94);
              std::__variant_detail::__dtor<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v94);
            }
          }
          unint64_t v37 = (char *)*((void *)&__p + 1);
          if (*((void *)&__p + 1) >= (unint64_t)v93)
          {
            size_t v39 = (char *)__p;
            uint64_t v40 = (uint64_t)(*((void *)&__p + 1) - __p) >> 2;
            unint64_t v41 = v40 + 1;
            if ((unint64_t)(v40 + 1) >> 62) {
              std::vector<Phase::Controller::GeometryPermutation>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v42 = v93 - __p;
            if ((uint64_t)(v93 - __p) >> 1 > v41) {
              unint64_t v41 = v42 >> 1;
            }
            if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v43 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v43 = v41;
            }
            if (v43)
            {
              uint64_t v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v93, v43);
              unint64_t v37 = (char *)*((void *)&__p + 1);
              size_t v39 = (char *)__p;
            }
            else
            {
              uint64_t v44 = 0;
            }
            uint64_t v45 = &v44[4 * v40];
            *(_DWORD *)uint64_t v45 = *(_DWORD *)(v21 + 48);
            unint64_t v38 = v45 + 4;
            while (v37 != v39)
            {
              int v46 = *((_DWORD *)v37 - 1);
              v37 -= 4;
              *((_DWORD *)v45 - 1) = v46;
              v45 -= 4;
            }
            *(void *)&long long __p = v45;
            *((void *)&__p + 1) = v38;
            *(void *)&long long v93 = &v44[4 * v43];
            if (v39) {
              operator delete(v39);
            }
          }
          else
          {
            **((_DWORD **)&__p + 1) = *(_DWORD *)(v21 + 48);
            unint64_t v38 = v37 + 4;
          }
          *((void *)&__p + 1) = v38;
          int v47 = *((_DWORD *)v19 + 4) - 1;
          if (v47 < 3) {
            *((void *)&v93 + 1) = qword_2220A52C0[v47];
          }
          unint64_t v49 = *((void *)v6 + 9);
          unint64_t v48 = *((void *)v6 + 10);
          if (v49 >= v48)
          {
            unint64_t v51 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v49 - v81->i64[0]) >> 4);
            unint64_t v52 = v51 + 1;
            if (v51 + 1 > 0x333333333333333) {
              std::vector<Phase::Controller::GeometryPermutation>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v53 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v48 - v81->i64[0]) >> 4);
            if (2 * v53 > v52) {
              unint64_t v52 = 2 * v53;
            }
            if (v53 >= 0x199999999999999) {
              unint64_t v54 = 0x333333333333333;
            }
            else {
              unint64_t v54 = v52;
            }
            uint64_t v97 = v80;
            if (v54) {
              uint64_t v55 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Controller::GeometryPermutation>>(v80, v54);
            }
            else {
              uint64_t v55 = 0;
            }
            unint64_t v94 = v55;
            v95.i64[0] = (uint64_t)&v55[10 * v51];
            v95.i64[1] = v95.i64[0];
            long long v96 = &v55[10 * v54];
            std::allocator<Phase::Controller::GeometryPermutation>::construct[abi:ne180100]<Phase::Controller::GeometryPermutation,Phase::Controller::GeometryPermutation const&>(v95.i64[0], (uint64_t)buf);
            uint64_t v56 = v95.i64[0];
            uint64_t v50 = v95.i64[1] + 80;
            v95.i64[1] += 80;
            uint64_t v57 = *((void *)v6 + 8);
            unint64_t v58 = *((void *)v6 + 9);
            if (v58 == v57)
            {
              int64x2_t v63 = vdupq_n_s64(v58);
            }
            else
            {
              uint64_t v59 = v19;
              uint64_t v60 = 0;
              do
              {
                uint64_t v61 = v56 + v60;
                uint64_t v62 = v58 + v60;
                *(_DWORD *)(v56 + v60 - 80) = *(_DWORD *)(v58 + v60 - 80);
                std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::__hash_table(v56 + v60 - 72, (uint64_t *)(v58 + v60 - 72));
                *(void *)(v61 - 32) = 0;
                *(void *)(v61 - 24) = 0;
                *(void *)(v61 - 16) = 0;
                *(_OWORD *)(v61 - 32) = *(_OWORD *)(v58 + v60 - 32);
                *(void *)(v61 - 16) = *(void *)(v58 + v60 - 16);
                *(void *)(v62 - 32) = 0;
                *(void *)(v62 - 24) = 0;
                *(void *)(v62 - 16) = 0;
                *(void *)(v61 - 8) = *(void *)(v58 + v60 - 8);
                v60 -= 80;
              }
              while (v58 + v60 != v57);
              int64x2_t v63 = *v81;
              uint64_t v50 = v95.i64[1];
              v56 += v60;
              unint64_t v19 = v59;
              unint64_t v6 = v79;
            }
            *((void *)v6 + 8) = v56;
            *((void *)v6 + 9) = v50;
            int64x2_t v95 = v63;
            long long v64 = (void **)*((void *)v6 + 10);
            *((void *)v6 + 10) = v96;
            long long v96 = v64;
            unint64_t v94 = (void **)v63.i64[0];
            std::__split_buffer<Phase::Controller::GeometryPermutation>::~__split_buffer((uint64_t)&v94);
          }
          else
          {
            std::allocator<Phase::Controller::GeometryPermutation>::construct[abi:ne180100]<Phase::Controller::GeometryPermutation,Phase::Controller::GeometryPermutation const&>(*((void *)v6 + 9), (uint64_t)buf);
            uint64_t v50 = v49 + 80;
            *((void *)v6 + 9) = v49 + 80;
          }
          *((void *)v6 + 9) = v50;
          if ((void)__p)
          {
            *((void *)&__p + 1) = __p;
            operator delete((void *)__p);
          }
          std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::~__hash_table((uint64_t)&buf[8]);
        }
        else
        {
          __int16 v29 = *(char **)(v23 + 48);
          int v30 = *(char **)(v23 + 56);
          if (v29 == v30)
          {
            __int16 v31 = *(char **)(v23 + 48);
          }
          else
          {
            __int16 v31 = *(char **)(v23 + 48);
            while (*(_DWORD *)v31 != *(_DWORD *)(v21 + 48))
            {
              v31 += 4;
              if (v31 == v30)
              {
                __int16 v31 = *(char **)(v23 + 56);
                break;
              }
            }
          }
          if (v31 == v30)
          {
            unint64_t v34 = *(void *)(v23 + 64);
            if ((unint64_t)v30 >= v34)
            {
              uint64_t v65 = (v30 - v29) >> 2;
              if ((unint64_t)(v65 + 1) >> 62) {
                std::vector<Phase::Controller::GeometryPermutation>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v66 = v34 - (void)v29;
              unint64_t v67 = (uint64_t)(v34 - (void)v29) >> 1;
              if (v67 <= v65 + 1) {
                unint64_t v67 = v65 + 1;
              }
              if (v66 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v68 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v68 = v67;
              }
              if (v68)
              {
                uint64_t v69 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v23 + 64, v68);
                __int16 v29 = *(char **)(v23 + 48);
                int v30 = *(char **)(v23 + 56);
              }
              else
              {
                uint64_t v69 = 0;
              }
              long long v70 = &v69[4 * v65];
              *(_DWORD *)long long v70 = *(_DWORD *)(v21 + 48);
              BOOL v35 = v70 + 4;
              while (v30 != v29)
              {
                int v71 = *((_DWORD *)v30 - 1);
                v30 -= 4;
                *((_DWORD *)v70 - 1) = v71;
                v70 -= 4;
              }
              *(void *)(v23 + 48) = v70;
              *(void *)(v23 + 56) = v35;
              *(void *)(v23 + 64) = &v69[4 * v68];
              if (v29) {
                operator delete(v29);
              }
            }
            else
            {
              *(_DWORD *)int v30 = *(_DWORD *)(v21 + 48);
              BOOL v35 = v30 + 4;
            }
            *(void *)(v23 + 56) = v35;
          }
          int v72 = *((_DWORD *)v19 + 4);
          switch(v72)
          {
            case 3:
              uint64_t v73 = *(void *)(v23 + 72) | 4;
              break;
            case 2:
              uint64_t v73 = *(void *)(v23 + 72) | 2;
              break;
            case 1:
              uint64_t v73 = *(void *)(v23 + 72) | 1;
              break;
            default:
              goto LABEL_122;
          }
          *(void *)(v23 + 72) = v73;
        }
LABEL_122:
        v21 += 56;
        uint64_t v20 = v82;
      }
      *(void *)std::string buf = &v88;
      std::vector<Phase::SpatialModeler::EntityShapeTemplate>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      unint64_t v19 = (uint64_t *)*v19;
    }
    while (v19);
  }
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)v84);
  return std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)v86);
}

void sub_221ECAB28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);

  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)va);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)va1);
  _Unwind_Resume(a1);
}

unsigned __int8 *Phase::Controller::SpatialModelerSystem::SetParameters(unsigned __int8 *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = (int *)a2[1];
  if ((int *)*a2 != v3)
  {
    id v4 = (Phase::Logger *)result;
    uint64_t v5 = (int *)*a2;
    do
    {
      int v6 = *v5;
      v5 += 6;
      uint64_t SpatialModelerCategory = Phase::Controller::SpatialModelerSystem::GetSpatialModelerCategory(v4, v6);
      __n128 result = Phase::Controller::SpatialModelerInstance::SetParameter(*(unsigned __int8 **)(SpatialModelerCategory + 80), v2);
      uint64_t v2 = (uint64_t)v5;
    }
    while (v5 != v3);
  }
  return result;
}

void Phase::Controller::SpatialModelerSystem::SetComputeTimes(Phase::Logger *a1, uint64_t a2)
{
  for (unint64_t i = *(uint64_t **)(a2 + 16); i; unint64_t i = (uint64_t *)*i)
  {
    uint64_t SpatialModelerCategory = (Phase::Controller::SpatialModelerCategory *)Phase::Controller::SpatialModelerSystem::GetSpatialModelerCategory(a1, *((_DWORD *)i + 4));
    Phase::Controller::SpatialModelerCategory::SetComputeTime(SpatialModelerCategory, *((double *)i + 3));
  }
}

Phase::Controller::SpatialSubmixRouter *Phase::Controller::SpatialModelerSystem::Stop(Phase::Controller::SpatialSubmixRouter *this)
{
  for (unint64_t i = (void *)*((void *)this + 2); i; unint64_t i = (void *)*i)
  {
    uint64_t v2 = *(Phase::Controller::SpatialModelerInstance **)(i[3] + 80);
    this = (Phase::Controller::SpatialSubmixRouter *)Phase::Controller::SpatialModelerInstance::StopUpdate(v2);
    if (this) {
      this = Phase::Controller::SpatialModelerInstance::Reset((Phase::Controller::SpatialSubmixRouter **)v2);
    }
  }
  return this;
}

void Phase::Controller::SpatialModelerSystem::SetModelers(Phase::Logger *a1, uint64_t a2, uint64_t *a3)
{
  v18[0] = 0;
  v18[1] = 0;
  uint64_t v17 = (uint64_t *)v18;
  memset(v15, 0, sizeof(v15));
  int v16 = 1065353216;
  for (unint64_t i = (uint64_t *)(a2 + 16);
        ;
        Phase::Controller::SpatialModelerCategory::SetActiveSpatialModeler(SpatialModelerCategory, i[3]))
  {
    unint64_t i = (uint64_t *)*i;
    if (!i) {
      break;
    }
    uint64_t SpatialModelerCategory = (Phase::Controller::SpatialModelerCategory *)Phase::Controller::SpatialModelerSystem::GetSpatialModelerCategory(a1, *((_DWORD *)i + 4));
    uint64_t v7 = *((void *)SpatialModelerCategory + 10);
    if (v7)
    {
      unsigned __int8 v8 = atomic_load((unsigned __int8 *)(v7 + 5641));
      if (v8) {
        std::__tree<Phase::SpatialCategory>::__emplace_unique_key_args<Phase::SpatialCategory,Phase::SpatialCategory const&>(&v17, (int *)i + 4, (_DWORD *)i + 4);
      }
    }
  }
  Phase::Controller::SpatialModelerSystem::SetParameters((unsigned __int8 *)a1, a3);
  uint64_t v9 = v17;
  if (v17 != (uint64_t *)v18)
  {
    do
    {
      unint64_t v10 = (unsigned __int8 *)(*(void *)(Phase::Controller::SpatialModelerSystem::GetSpatialModelerCategory(a1, *((_DWORD *)v9 + 7))+ 80)+ 5641);
      unsigned __int8 v11 = atomic_load(v10);
      if ((v11 & 1) == 0) {
        atomic_store(1u, v10);
      }
      uint64_t v12 = (uint64_t *)v9[1];
      if (v12)
      {
        do
        {
          uint8x8_t v13 = v12;
          uint64_t v12 = (uint64_t *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          uint8x8_t v13 = (uint64_t *)v9[2];
          BOOL v14 = *v13 == (void)v9;
          uint64_t v9 = v13;
        }
        while (!v14);
      }
      uint64_t v9 = v13;
    }
    while (v13 != (uint64_t *)v18);
  }
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)v15);
  std::__tree<Phase::SpatialCategory>::destroy((uint64_t)&v17, v18[0]);
}

void sub_221ECAEB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, void *a15)
{
}

uint64_t Phase::Controller::SpatialModelerSystem::GetSpatialModelerCategory(Phase::Logger *a1, int a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  unint64_t v2 = *((void *)a1 + 1);
  if (!v2) {
    goto LABEL_17;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a2;
    if (v2 <= a2) {
      unint64_t v4 = a2 % v2;
    }
  }
  else
  {
    unint64_t v4 = (v2 - 1) & a2;
  }
  uint64_t v5 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
  if (!v5 || (int v6 = *v5) == 0)
  {
LABEL_17:
    uint64_t v9 = **(id **)(Phase::Logger::GetInstance(a1) + 224);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      int v12 = 136315650;
      uint8x8_t v13 = "CvmSpatialModelerSystem.mm";
      __int16 v14 = 1024;
      int v15 = 382;
      __int16 v16 = 1024;
      int v17 = a2;
      _os_log_impl(&dword_221E5E000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (InvalidId) [iterator == mSpatialModelerCategories.end() is true]: \"Invalid SpatialCategory %d!\"", (uint8_t *)&v12, 0x18u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _ZN5Phase10Controller9InvalidIdCI1St11logic_errorEPKc(exception, "Invalid SpatialCategory %d!");
  }
  while (1)
  {
    unint64_t v7 = v6[1];
    if (v7 == a2) {
      break;
    }
    if (v3.u32[0] > 1uLL)
    {
      if (v7 >= v2) {
        v7 %= v2;
      }
    }
    else
    {
      v7 &= v2 - 1;
    }
    if (v7 != v4) {
      goto LABEL_17;
    }
LABEL_16:
    int v6 = (uint64_t *)*v6;
    if (!v6) {
      goto LABEL_17;
    }
  }
  if (*((_DWORD *)v6 + 4) != a2) {
    goto LABEL_16;
  }
  return v6[3];
}

void sub_221ECB08C(_Unwind_Exception *exception_object)
{
}

uint64_t Phase::Controller::SpatialModelerSystem::GetSceneQueryFilterForSpatialCategory(Phase::Logger *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if ((a1 - 1) >= 4)
  {
    int v2 = (int)a1;
    uint8x8_t v3 = **(id **)(Phase::Logger::GetInstance(a1) + 224);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      int v5 = 136315650;
      int v6 = "CvmSpatialModelerSystem.mm";
      __int16 v7 = 1024;
      int v8 = 280;
      __int16 v9 = 1024;
      int v10 = v2;
      _os_log_impl(&dword_221E5E000, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument): \"Could not build SceneQueryFilter. Unknown SpatialCategory : %d.\"", (uint8_t *)&v5, 0x18u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Could not build SceneQueryFilter. Unknown SpatialCategory : %d.");
  }
  return qword_2220A52D8[(int)a1 - 1];
}

void sub_221ECB1C4(_Unwind_Exception *exception_object)
{
}

uint64_t Phase::Controller::SpatialModelerSystem::RemoveAllInputs(uint64_t result, uint64_t a2, uint64_t a3)
{
  for (unint64_t i = *(void **)(result + 16); i; unint64_t i = (void *)*i)
  {
    uint64_t v6 = i[3];
    v7[0] = a2;
    v7[1] = a3;
    __n128 result = (uint64_t)std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((void *)(v6 + 88), v7);
    if (result) {
      __n128 result = Phase::Controller::SpatialModelerCategory::RemoveInput(i[3], a2, a3);
    }
  }
  return result;
}

BOOL Phase::Controller::SpatialModelerSystem::IsPrepared(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint8x8_t v3 = *(void **)(a1 + 16);
  if (v3)
  {
    int v6 = 0;
    int v7 = 0;
    do
    {
      uint64_t v8 = v3[3];
      v11[0] = a2;
      v11[1] = a3;
      if (std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((void *)(v8 + 88), v11))
      {
        ++v7;
        v6 += Phase::Controller::SpatialModelerInstance::IsPrepared(*(void *)(v3[3] + 80), a2, a3);
      }
      uint8x8_t v3 = (void *)*v3;
    }
    while (v3);
  }
  else
  {
    int v7 = 0;
    int v6 = 0;
  }
  return v7 > 0 && v7 == v6;
}

uint64_t Phase::Controller::SpatialModelerSystem::IsStopped(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint8x8_t v3 = *(void **)(a1 + 16);
  if (!v3) {
    return 1;
  }
  while (1)
  {
    uint64_t v6 = v3[3];
    v8[0] = a2;
    v8[1] = a3;
    if (std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((void *)(v6 + 88), v8))
    {
      uint64_t result = (uint64_t)Phase::Controller::SpatialModelerInstance::IsStopped(*(void *)(v3[3] + 80), a2, a3);
      if (!result) {
        break;
      }
    }
    uint8x8_t v3 = (void *)*v3;
    if (!v3) {
      return 1;
    }
  }
  return result;
}

void Phase::Controller::GeometryPermutation::~GeometryPermutation(Phase::Controller::GeometryPermutation *this)
{
  int v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::~__hash_table((uint64_t)this + 8);
}

uint64_t **Phase::UnorderedStringMap<Phase::OptionsValue>::Find(void *a1, long long *a2)
{
  long long v6 = *a2;
  __p[1] = 0;
  uint64_t v5 = 0;
  __p[0] = 0;
  int v2 = std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::find<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey>(a1, (uint64_t)__p);
  if (SHIBYTE(v5) < 0) {
    operator delete(__p[0]);
  }
  return v2;
}

void sub_221ECB3F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::find<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey>(void *a1, uint64_t a2)
{
  unint64_t v4 = std::__string_view_hash<char>::operator()[abi:ne180100]((uint64_t)&v17, *(uint64_t **)(a2 + 24), *(void *)(a2 + 32));
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  int v10 = *(uint64_t ****)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  uint64_t v11 = *v10;
  if (*v10)
  {
    uint64_t v14 = a2 + 24;
    int v12 = *(const void **)(a2 + 24);
    size_t v13 = *(void *)(v14 + 8);
    do
    {
      unint64_t v15 = (unint64_t)v11[1];
      if (v6 == v15)
      {
        if (v11[6] == (uint64_t *)v13 && !memcmp(v11[5], v12, v13)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v15 >= *(void *)&v5) {
            v15 %= *(void *)&v5;
          }
        }
        else
        {
          v15 &= *(void *)&v5 - 1;
        }
        if (v15 != v9) {
          return 0;
        }
      }
      uint64_t v11 = (uint64_t **)*v11;
    }
    while (v11);
  }
  return v11;
}

uint64_t std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,std::unique_ptr<Phase::Controller::SpatialModelerCategory>>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,std::unique_ptr<Phase::Controller::SpatialModelerCategory>>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,std::unique_ptr<Phase::Controller::SpatialModelerCategory>>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,std::unique_ptr<Phase::Controller::SpatialModelerCategory>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,std::unique_ptr<Phase::Controller::SpatialModelerCategory>>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,std::unique_ptr<Phase::Controller::SpatialModelerCategory>>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,std::unique_ptr<Phase::Controller::SpatialModelerCategory>>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,std::unique_ptr<Phase::Controller::SpatialModelerCategory>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  int v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,std::unique_ptr<Phase::Controller::SpatialModelerCategory>>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,std::unique_ptr<Phase::Controller::SpatialModelerCategory>>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,std::unique_ptr<Phase::Controller::SpatialModelerCategory>>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,std::unique_ptr<Phase::Controller::SpatialModelerCategory>>>>::__deallocate_node(int a1, void *__p)
{
  if (__p)
  {
    int v2 = __p;
    do
    {
      uint8x8_t v3 = (void *)*v2;
      uint64_t v4 = v2[3];
      v2[3] = 0;
      if (v4) {
        (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
      }
      operator delete(v2);
      int v2 = v3;
    }
    while (v3);
  }
}

void std::vector<Phase::Controller::GeometryPermutation>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  int v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    int8x8_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 80;
        std::allocator<Phase::Controller::GeometryPermutation>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      int8x8_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::allocator<Phase::Controller::GeometryPermutation>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint8x8_t v3 = *(void **)(a2 + 48);
  if (v3)
  {
    *(void *)(a2 + 56) = v3;
    operator delete(v3);
  }

  return std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::~__hash_table(a2 + 8);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Phase::SpatialCategory,std::unique_ptr<Phase::Controller::SpatialModelerCategory>>,void *>>>::operator()[abi:ne180100](char a1, void *__p)
{
  if (a1)
  {
    uint64_t v3 = __p[3];
    __p[3] = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void *std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,double>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,double>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,double>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,double>>>::__emplace_unique_key_args<Phase::SpatialCategory,std::piecewise_construct_t const&,std::tuple<Phase::SpatialCategory const&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    int v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v11 = operator new(0x20uLL);
  *uint64_t v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  void v11[3] = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::__rehash<true>(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  uint64_t v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *uint64_t v11 = *v20;
LABEL_38:
    *uint64_t v20 = v11;
    goto LABEL_39;
  }
  *uint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    uint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_221ECB944(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,std::unique_ptr<Phase::Controller::SpatialModelerCategory>>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,std::unique_ptr<Phase::Controller::SpatialModelerCategory>>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,std::unique_ptr<Phase::Controller::SpatialModelerCategory>>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,std::unique_ptr<Phase::Controller::SpatialModelerCategory>>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,std::unique_ptr<Phase::Controller::SpatialModelerCategory>>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,std::unique_ptr<Phase::Controller::SpatialModelerCategory>>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,std::unique_ptr<Phase::Controller::SpatialModelerCategory>>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,std::unique_ptr<Phase::Controller::SpatialModelerCategory>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void std::__tree<Phase::SpatialCategory>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<Phase::SpatialCategory>::destroy(a1, *a2);
    std::__tree<Phase::SpatialCategory>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

uint64_t **std::__tree<Phase::SpatialCategory>::__emplace_unique_key_args<Phase::SpatialCategory,Phase::SpatialCategory const&>(uint64_t **a1, int *a2, _DWORD *a3)
{
  unint64_t v6 = a1 + 1;
  int8x8_t v5 = a1[1];
  if (v5)
  {
    int v7 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v8 = (uint64_t **)v5;
        int v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9) {
          break;
        }
        int8x8_t v5 = *v8;
        unint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      int8x8_t v5 = v8[1];
      if (!v5)
      {
        unint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unint64_t v8 = a1 + 1;
LABEL_10:
    int v10 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v10 + 7) = *a3;
    std::__tree<Phase::SpatialCategory>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t *std::__tree<Phase::SpatialCategory>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  int8x8_t v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

void *std::vector<Phase::Controller::GeometryPermutation>::__init_with_size[abi:ne180100]<Phase::Controller::GeometryPermutation*,Phase::Controller::GeometryPermutation*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    std::vector<Phase::Controller::GeometryPermutation>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Phase::Controller::GeometryPermutation>,Phase::Controller::GeometryPermutation*,Phase::Controller::GeometryPermutation*,Phase::Controller::GeometryPermutation*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_221ECBB80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<Phase::Controller::GeometryPermutation>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<Phase::Controller::GeometryPermutation>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x333333333333334) {
    std::vector<Phase::Controller::GeometryPermutation>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Controller::GeometryPermutation>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[80 * v4];
  return result;
}

void std::vector<Phase::Controller::GeometryPermutation>::__throw_length_error[abi:ne180100]()
{
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Controller::GeometryPermutation>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x333333333333334) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(80 * a2);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Phase::Controller::GeometryPermutation>,Phase::Controller::GeometryPermutation*,Phase::Controller::GeometryPermutation*,Phase::Controller::GeometryPermutation*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  void v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::allocator<Phase::Controller::GeometryPermutation>::construct[abi:ne180100]<Phase::Controller::GeometryPermutation,Phase::Controller::GeometryPermutation&>(a1, v4, v6);
      v6 += 80;
      uint64_t v4 = v12 + 80;
      v12 += 80;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Phase::Controller::GeometryPermutation>,Phase::Controller::GeometryPermutation*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_221ECBCEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::allocator<Phase::Controller::GeometryPermutation>::construct[abi:ne180100]<Phase::Controller::GeometryPermutation,Phase::Controller::GeometryPermutation&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a2 = *(_DWORD *)a3;
  std::unordered_map<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,std::allocator<std::pair<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey const,Phase::OptionsValue>>>::unordered_map(a2 + 8, a3 + 8);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  uint64_t result = std::vector<Phase::Geometry::EntityType>::__init_with_size[abi:ne180100]<Phase::Geometry::EntityType*,Phase::Geometry::EntityType*>((void *)(a2 + 48), *(const void **)(a3 + 48), *(void *)(a3 + 56), (uint64_t)(*(void *)(a3 + 56) - *(void *)(a3 + 48)) >> 2);
  *(void *)(a2 + 72) = *(void *)(a3 + 72);
  return result;
}

void sub_221ECBD68(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::vector<Phase::Geometry::EntityType>::__init_with_size[abi:ne180100]<Phase::Geometry::EntityType*,Phase::Geometry::EntityType*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<Phase::Geometry::EntityType>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_221ECBDDC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<Phase::Geometry::EntityType>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::vector<Phase::Controller::GeometryPermutation>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Phase::Controller::GeometryPermutation>,Phase::Controller::GeometryPermutation*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<Phase::Controller::GeometryPermutation>,Phase::Controller::GeometryPermutation*>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

uint64_t *std::_AllocatorDestroyRangeReverse<std::allocator<Phase::Controller::GeometryPermutation>,Phase::Controller::GeometryPermutation*>::operator()[abi:ne180100](uint64_t *result)
{
  uint64_t v2 = (uint64_t *)result[1];
  uint64_t v1 = (uint64_t *)result[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *result;
    do
    {
      v3 -= 80;
      uint64_t result = (uint64_t *)std::allocator<Phase::Controller::GeometryPermutation>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
  return result;
}

void Phase::UnorderedStringMap<Phase::OptionsValue>::Set(uint64_t a1, uint64_t a2, uint64_t a3)
{
  size_t v3 = *(void *)(a2 + 8);
  if (v3 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = *(const void **)a2;
  if (v3 >= 0x17)
  {
    uint64_t v8 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v8 = v3 | 7;
    }
    uint64_t v9 = v8 + 1;
    uint64_t v7 = operator new(v8 + 1);
    *((void *)&v10 + 1) = v3;
    unint64_t v11 = v9 | 0x8000000000000000;
    *(void *)&long long v10 = v7;
    goto LABEL_8;
  }
  HIBYTE(v11) = *(void *)(a2 + 8);
  uint64_t v7 = &v10;
  if (v3) {
LABEL_8:
  }
    memmove(v7, v6, v3);
  *((unsigned char *)v7 + v3) = 0;
  Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey::InternalKey(&__p, &v10);
  std::unordered_map<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,std::allocator<std::pair<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey const,Phase::OptionsValue>>>::insert_or_assign[abi:ne180100]<Phase::OptionsValue const&>(a1, (long long *)&__p, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11) < 0) {
    operator delete((void *)v10);
  }
}

void sub_221ECBFB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **std::unordered_map<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,std::allocator<std::pair<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey const,Phase::OptionsValue>>>::insert_or_assign[abi:ne180100]<Phase::OptionsValue const&>(uint64_t a1, long long *a2, uint64_t a3)
{
  uint64_t v4 = std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::__emplace_unique_key_args<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue const&>(a1, (uint64_t)a2, a2, a3);
  uint64_t v5 = v4;
  if (!v6) {
    std::__variant_detail::__assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>>::__generic_assign[abi:ne180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)(v4 + 7), a3);
  }
  return v5;
}

uint64_t **std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::__emplace_unique_key_args<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue const&>(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4)
{
  unint64_t v9 = std::__string_view_hash<char>::operator()[abi:ne180100]((uint64_t)v29, *(uint64_t **)(a2 + 24), *(void *)(a2 + 32));
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    float v14 = *(uint64_t ****)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      BOOL v15 = *v14;
      if (*v14)
      {
        uint64_t v18 = a2 + 24;
        unint64_t v16 = *(const void **)(a2 + 24);
        size_t v17 = *(void *)(v18 + 8);
        do
        {
          unint64_t v19 = (unint64_t)v15[1];
          if (v19 == v10)
          {
            if (v15[6] == (uint64_t *)v17 && !memcmp(v15[5], v16, v17)) {
              return v15;
            }
          }
          else
          {
            if (v13 > 1)
            {
              if (v19 >= v11) {
                v19 %= v11;
              }
            }
            else
            {
              v19 &= v11 - 1;
            }
            if (v19 != v4) {
              break;
            }
          }
          BOOL v15 = (uint64_t **)*v15;
        }
        while (v15);
      }
    }
  }
  std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::__construct_node_hash<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue const&>(a1, v10, a3, a4, (uint64_t)v29);
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    BOOL v22 = 1;
    if (v11 >= 3) {
      BOOL v22 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v11);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::__rehash<true>(a1, v25);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  int v26 = *(void **)(*(void *)a1 + 8 * v4);
  if (v26)
  {
    *(void *)v29[0] = *v26;
    void *v26 = v29[0];
  }
  else
  {
    *(void *)v29[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v29[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v29[0])
    {
      unint64_t v27 = *(void *)(*(void *)v29[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v27 >= v11) {
          v27 %= v11;
        }
      }
      else
      {
        v27 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v27) = v29[0];
    }
  }
  BOOL v15 = (uint64_t **)v29[0];
  v29[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,void *>>>>::reset[abi:ne180100]((uint64_t)v29, 0);
  return v15;
}

void sub_221ECC2C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::__construct_node_hash<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  unint64_t v10 = (char *)operator new(0x68uLL);
  *(void *)a5 = v10;
  *(void *)(a5 + 8) = v9;
  *(unsigned char *)(a5 + 16) = 0;
  *(void *)unint64_t v10 = 0;
  *((void *)v10 + 1) = a2;
  uint64_t result = std::pair<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey const,Phase::OptionsValue>::pair[abi:ne180100]<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue const&,0>((std::string *)(v10 + 16), a3, a4);
  *(unsigned char *)(a5 + 16) = 1;
  return result;
}

void sub_221ECC34C(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey const,Phase::OptionsValue>::pair[abi:ne180100]<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue const&,0>(std::string *a1, long long *a2, uint64_t a3)
{
  uint64_t v5 = Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey::InternalKey(a1, a2);
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)&v5[1].__r_.__value_.__r.__words[2], a3);
  return a1;
}

void sub_221ECC39C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocator<Phase::Controller::GeometryPermutation>::construct[abi:ne180100]<Phase::Controller::GeometryPermutation,Phase::Controller::GeometryPermutation const&>(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  std::unordered_map<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,std::allocator<std::pair<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey const,Phase::OptionsValue>>>::unordered_map(a1 + 8, a2 + 8);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  uint64_t result = std::vector<Phase::Geometry::EntityType>::__init_with_size[abi:ne180100]<Phase::Geometry::EntityType*,Phase::Geometry::EntityType*>((void *)(a1 + 48), *(const void **)(a2 + 48), *(void *)(a2 + 56), (uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 2);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  return result;
}

void sub_221ECC488(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<Phase::Controller::GeometryPermutation>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    *(void *)(a1 + 16) = i - 80;
    std::allocator<Phase::Controller::GeometryPermutation>::destroy[abi:ne180100](v4, i - 80);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void Phase::Controller::SpatialQueryInstance::~SpatialQueryInstance(std::__shared_weak_count **this)
{
  Phase::Controller::SpatialQueryInstance::Destroy((Phase::Controller::SpatialQueryInstance *)this);
  uint64_t v2 = this[9];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__function::__value_func<void ()(Phase::SpatialModeler::Query &)>::~__value_func[abi:ne180100](this + 1);
}

void Phase::Controller::SpatialQueryInstance::Destroy(Phase::Controller::SpatialQueryInstance *this)
{
  Phase::SpatialModeler::Query::Clear(this);
  uint64_t v2 = (unsigned int *)*((void *)this + 15);
  if (v2)
  {
    uint64_t v3 = *v2;
    if ((v3 - 4) >= 0xFFFFFFFD)
    {
      __const__ZN5Phase14SpatialModeler14DestroyInPlaceEPvNS0_15QueryOutputTypeE_fTable[v3]();
      uint64_t v2 = (unsigned int *)*((void *)this + 15);
    }
    operator delete(v2);
    *((void *)this + 15) = 0;
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 14);
  if (v4)
  {
    uint64_t v5 = *v4;
    if ((v5 - 1) <= 3)
    {
      __const__ZN5Phase14SpatialModeler14DestroyInPlaceEPvNS0_14QueryInputTypeE_fTable[v5]();
      uint64_t v4 = (unsigned int *)*((void *)this + 14);
    }
    operator delete(v4);
    *((void *)this + 14) = 0;
  }
}

void *Phase::Controller::SpatialQueryInstance::Initialize(uint64_t a1, uint64_t a2, Phase::SystemAllocator *this, uint64_t a4, uint64_t a5)
{
  v37[3] = *MEMORY[0x263EF8340];
  *(void *)(a1 + 128) = a2;
  *(void *)(a1 + 136) = this;
  uint64_t v10 = *(unsigned int *)(a2 + 32);
  if (v10 > 4)
  {
    uint8x8_t v12 = 0;
    std::align_val_t v13 = 0;
  }
  else
  {
    unint64_t v11 = (char *)&__const__ZN5Phase14SpatialModeler14SizeAndAlignOfENS0_14QueryInputTypeE_table + 16 * v10;
    uint8x8_t v12 = *(Phase::Logger **)v11;
    std::align_val_t v13 = *((void *)v11 + 1);
  }
  float v14 = (Phase::Logger *)Phase::SystemAllocator::Alloc(this, v12, v13);
  *(void *)(a1 + 112) = v14;
  uint64_t v15 = *(unsigned int *)(a2 + 32);
  if ((v15 - 1) > 3
    || (float v14 = (Phase::Logger *)__const__ZN5Phase14SpatialModeler11InitInPlaceEPvNS0_14QueryInputTypeE_fTable[v15](),
        (v14 & 1) == 0))
  {
    unint64_t v28 = **(id **)(Phase::Logger::GetInstance(v14) + 384);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = "CvmSpatialQueryInstance.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 34;
      _os_log_impl(&dword_221E5E000, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [!queryInputInited is true]: \"Failed to initialize query input!\"", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Failed to initialize query input!");
  }
  unint64_t v16 = 0;
  std::align_val_t v17 = 0;
  *(_OWORD *)&uint8_t buf[16] = xmmword_2220A5300;
  long long v35 = xmmword_2220A5310;
  uint64_t v18 = *(unsigned int *)(a2 + 36);
  *(void *)std::string buf = 0;
  *(void *)&buf[8] = 0;
  long long v36 = xmmword_2220A5320;
  if (v18 <= 3)
  {
    unint64_t v19 = &buf[16 * v18];
    unint64_t v16 = *(Phase::Logger **)v19;
    std::align_val_t v17 = *((void *)v19 + 1);
  }
  float v20 = (Phase::Logger *)Phase::SystemAllocator::Alloc(this, v16, v17);
  *(void *)(a1 + 120) = v20;
  uint64_t v21 = *(unsigned int *)(a2 + 36);
  if ((v21 - 4) < 0xFFFFFFFD
    || (float v20 = (Phase::Logger *)__const__ZN5Phase14SpatialModeler11InitInPlaceEPvNS0_15QueryOutputTypeE_fTable[v21](),
        (v20 & 1) == 0))
  {
    int v30 = **(id **)(Phase::Logger::GetInstance(v20) + 384);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = "CvmSpatialQueryInstance.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 41;
      _os_log_impl(&dword_221E5E000, v30, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [!queryOutputInited is true]: \"Failed to initialize query output!\"", buf, 0x12u);
    }
    __int16 v31 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](v31, "Failed to initialize query output!");
  }
  uint64_t v22 = *(void *)(a2 + 24);
  long long v32 = *(_OWORD *)(a1 + 112);
  std::__function::__value_func<void ()(Phase::SpatialModeler::Query &)>::__value_func[abi:ne180100]((uint64_t)v33, a4);
  atomic_store(0, (unsigned int *)a1);
  std::__function::__value_func<void ()(Phase::SpatialModeler::Query &)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)v33);
  uint64_t v23 = a1 + 8;
  if (buf != (unsigned char *)(a1 + 8))
  {
    uint64_t v24 = *(void *)&buf[24];
    uint64_t v25 = *(void *)(a1 + 32);
    if (*(unsigned char **)&buf[24] == buf)
    {
      if (v25 == v23)
      {
        (*(void (**)(unsigned char *, void *))(*(void *)buf + 24))(buf, v37);
        (*(void (**)(void))(**(void **)&buf[24] + 32))(*(void *)&buf[24]);
        *(void *)&uint8_t buf[24] = 0;
        (*(void (**)(void, unsigned char *))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32), buf);
        (*(void (**)(void))(**(void **)(a1 + 32) + 32))(*(void *)(a1 + 32));
        *(void *)(a1 + 32) = 0;
        *(void *)&uint8_t buf[24] = buf;
        (*(void (**)(void *, uint64_t))(v37[0] + 24))(v37, a1 + 8);
        (*(void (**)(void *))(v37[0] + 32))(v37);
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t))(*(void *)buf + 24))(buf, a1 + 8);
        (*(void (**)(void))(**(void **)&buf[24] + 32))(*(void *)&buf[24]);
        *(void *)&uint8_t buf[24] = *(void *)(a1 + 32);
      }
      *(void *)(a1 + 32) = v23;
    }
    else if (v25 == v23)
    {
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v23 + 24))(a1 + 8, buf);
      (*(void (**)(void))(**(void **)(a1 + 32) + 32))(*(void *)(a1 + 32));
      *(void *)(a1 + 32) = *(void *)&buf[24];
      *(void *)&uint8_t buf[24] = buf;
    }
    else
    {
      *(void *)&uint8_t buf[24] = *(void *)(a1 + 32);
      *(void *)(a1 + 32) = v24;
    }
  }
  std::__function::__value_func<void ()(Phase::SpatialModeler::Query &)>::~__value_func[abi:ne180100](buf);
  *(void *)(a1 + 40) = a5;
  int v26 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  *(void *)(a1 + 80) = v22;
  atomic_store(0, (unsigned int *)(a1 + 104));
  *(_OWORD *)(a1 + 88) = v32;
  return std::__function::__value_func<void ()(Phase::SpatialModeler::Query &)>::~__value_func[abi:ne180100](v33);
}

void sub_221ECCAD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void Phase::SpatialModeler::Query::Clear(Phase::SpatialModeler::Query *this)
{
  atomic_store(0, (unsigned int *)this);
  std::__function::__value_func<void ()(Phase::SpatialModeler::Query &)>::operator=[abi:ne180100]((void *)this + 1);
  *((void *)this + 5) = 0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 9);
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  *((void *)this + 10) = -1;
  *((void *)this + 11) = 0;
  atomic_store(0, (unsigned int *)this + 26);
  *((void *)this + 12) = 0;
}

void *std::__function::__value_func<void ()(Phase::SpatialModeler::Query &)>::operator=[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(Phase::SpatialModeler::Query &)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t Phase::Controller::SpatialSubmix::SpatialSubmix(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, Phase::Logger *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  v68[4] = *MEMORY[0x263EF8340];
  uint8x8_t v12 = Phase::Controller::Submix::Submix((Phase::Logger *)a1, *(void *)(a2 + 8), *(void *)(a2 + 16), *(void *)(a2 + 568), *(void *)(a2 + 576), *(_DWORD *)(a2 + 584), a3, a4, a5, a6, a7, a9);
  *(void *)uint8x8_t v12 = &unk_26D4737D0;
  std::align_val_t v13 = (void *)((char *)v12 + 336);
  *((_OWORD *)v12 + 20) = 0u;
  *((_OWORD *)v12 + 21) = 0u;
  *((_OWORD *)v12 + 22) = 0u;
  *((_DWORD *)v12 + 92) = 1065353216;
  *(_OWORD *)((char *)v12 + 376) = 0u;
  *(_OWORD *)((char *)v12 + 392) = 0u;
  *((_DWORD *)v12 + 102) = 1065353216;
  *((unsigned char *)v12 + 416) = 0;
  *((void *)v12 + 54) = 0;
  *((void *)v12 + 55) = 0x7FEFFFFFFFFFFFFFLL;
  float v14 = (void **)((char *)v12 + 448);
  *((void *)v12 + 53) = 0;
  uint64_t v15 = Phase::Envelope<double>::Envelope((Phase::Logger *)((char *)v12 + 448));
  *(unsigned char *)(a1 + 568) = 0;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 513) = 0u;
  *(void *)(a1 + 576) = a8;
  *(_WORD *)(a1 + 584) = 0;
  *(_OWORD *)(a1 + 592) = *(_OWORD *)(a2 + 552);
  if (!*(void *)(a2 + 80))
  {
    unint64_t v49 = **(id **)(Phase::Logger::GetInstance(v15) + 384);
    if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = "CvmSpatialSubmix.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 65;
      _os_log_impl(&dword_221E5E000, v49, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: !inCreateSpatialSubmixParameters.mSpatialCategoryParameters.empty() is false.", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "PRECONDITION: !inCreateSpatialSubmixParameters.mSpatialCategoryParameters.empty() is false.");
LABEL_42:
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
  }
  if (!*(void *)a2)
  {
    unint64_t v51 = **(id **)(Phase::Logger::GetInstance(v15) + 384);
    if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = "CvmSpatialSubmix.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 67;
      _os_log_impl(&dword_221E5E000, v51, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: inCreateSpatialSubmixParameters.mListenerHandle != Geometry::InvalidEntityHandle is false.", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "PRECONDITION: inCreateSpatialSubmixParameters.mListenerHandle != Geometry::InvalidEntityHandle is false.");
    goto LABEL_42;
  }
  if (!*(void *)(a2 + 24))
  {
    unint64_t v52 = **(id **)(Phase::Logger::GetInstance(v15) + 384);
    if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = "CvmSpatialSubmix.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 69;
      _os_log_impl(&dword_221E5E000, v52, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: inCreateSpatialSubmixParameters.mSourceHandle != Geometry::InvalidEntityHandle is false.", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "PRECONDITION: inCreateSpatialSubmixParameters.mSourceHandle != Geometry::InvalidEntityHandle is false.");
    goto LABEL_42;
  }
  *(void *)(a1 + 320) = *(void *)a2;
  *(void *)(a1 + 328) = *(void *)(a2 + 24);
  if (v13 != (void *)(a2 + 56))
  {
    *(_DWORD *)(a1 + 368) = *(_DWORD *)(a2 + 88);
    unint64_t v16 = *(uint64_t **)(a2 + 72);
    uint64_t v17 = *(void *)(a1 + 344);
    if (!v17) {
      goto LABEL_13;
    }
    for (uint64_t i = 0; i != v17; *(void *)(*v13 + 8 * i++) = 0)
      ;
    unint64_t v19 = *(uint64_t **)(a1 + 352);
    *(void *)(a1 + 352) = 0;
    *(void *)(a1 + 360) = 0;
    if (v19)
    {
      while (v16)
      {
        unint64_t v20 = *((int *)v16 + 4);
        *((_DWORD *)v19 + 4) = v20;
        uint64_t v21 = v16[3];
        *((unsigned char *)v19 + 32) = *((unsigned char *)v16 + 32);
        v19[3] = v21;
        uint64_t v22 = (uint64_t *)*v19;
        v19[1] = v20;
        uint64_t inserted = std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__node_insert_multi_prepare((uint64_t)v13, v20, (_DWORD *)v19 + 4);
        std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::__node_insert_multi_perform(v13, v19, inserted);
        unint64_t v16 = (uint64_t *)*v16;
        unint64_t v19 = v22;
        if (!v22) {
          goto LABEL_13;
        }
      }
      do
      {
        unint64_t v43 = (uint64_t *)*v19;
        operator delete(v19);
        unint64_t v19 = v43;
      }
      while (v43);
    }
    else
    {
LABEL_13:
      while (v16)
      {
        uint64_t v24 = operator new(0x28uLL);
        *(void *)uint64_t v24 = 0;
        uint64_t v25 = v16[4];
        v24[1] = *((_OWORD *)v16 + 1);
        *((void *)v24 + 4) = v25;
        unint64_t v26 = *((int *)v24 + 4);
        *((void *)v24 + 1) = v26;
        unint64_t v27 = std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__node_insert_multi_prepare((uint64_t)v13, v26, (_DWORD *)v24 + 4);
        std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::__node_insert_multi_perform(v13, v24, v27);
        unint64_t v16 = (uint64_t *)*v16;
      }
    }
  }
  Phase::Controller::SpatialSubmix::CheckSpatialCategoriesActiveState((Phase::Logger *)a1);
  uint64_t v28 = *(void *)(a2 + 96);
  if (v28 != *(void *)(a2 + 104))
  {
    uint64_t v29 = 0;
    unint64_t v30 = 0;
    do
    {
      Phase::Controller::Submix::AddEffect((Phase::Controller::Submix *)a1, (uint64_t *)(v28 + v29), v30++);
      uint64_t v28 = *(void *)(a2 + 96);
      v29 += 32;
    }
    while (v30 < (*(void *)(a2 + 104) - v28) >> 5);
    *(void *)(a1 + 64) |= 2uLL;
  }
  *(void *)(a1 + 424) = 0x3FA47AE147AE147BLL;
  double v31 = *(double *)(a9 + 328);
  if (v31 <= 0.0) {
    std::terminate();
  }
  double v32 = v31 * *(double *)(a2 + 528);
  v68[0] = &unk_26D4715B0;
  v68[1] = Phase::CurveFunction::Linear<double>;
  void v68[3] = v68;
  v53[0] = v32 + -1.0;
  v53[1] = 1.0;
  *(double *)std::string buf = v32;
  *(void *)&buf[8] = 0;
  std::__function::__value_func<double ()(double)>::__value_func[abi:ne180100]((uint64_t)&buf[16], (uint64_t)v68);
  Phase::Envelope<double>::Envelope((Phase::Logger *)&v54, v53, (double *)buf);
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__vdeallocate(v14);
  *(_OWORD *)(a1 + 448) = v54;
  *(void *)(a1 + 464) = v55;
  uint64_t v55 = 0;
  long long v54 = 0uLL;
  uint64_t v56 = (void **)&v54;
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100](&v56);
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&buf[16]);
  *(void *)(a1 + 472) = *(void *)(a2 + 48);
  *(void *)(a1 + 480) = *(void *)(a2 + 32);
  *(void *)(a1 + 488) = *(void *)(a2 + 40);
  __asm { FMOV            V1.2D, #1.0 }
  *(_OWORD *)(a1 + 496) = xmmword_2220A5330;
  *(_OWORD *)(a1 + 512) = _Q1;
  *(unsigned char *)(a1 + 528) = 0;
  *(void *)(a1 + 536) = 0;
  *(_OWORD *)(a1 + 544) = xmmword_2220A4DF0;
  *(void *)(a1 + 560) = 0x3FF0000000000000;
  *(unsigned char *)(a1 + 568) = 0;
  Phase::Controller::SpatialSubmix::InternalPrepare((Phase::Controller::SpatialSubmix *)a1);
  uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance(v38);
  if (*((unsigned char *)Instance + 1556))
  {
    uint64_t v40 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(Instance)
                                                                                        + 384)));
    if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v41 = *(char *)(a1 + 72);
      if (v41 > 7) {
        uint64_t v42 = "<not found>";
      }
      else {
        uint64_t v42 = off_2645F71E0[v41];
      }
      uint64_t v44 = *(void *)(a1 + 16);
      uint64_t v45 = *(void *)(a1 + 32);
      if (*(unsigned char *)(a1 + 8)) {
        int v46 = "false";
      }
      else {
        int v46 = "true";
      }
      uint64_t v47 = *(void *)(a1 + 592);
      *(_DWORD *)std::string buf = 136316674;
      *(void *)&uint8_t buf[4] = "CvmSpatialSubmix.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 126;
      __int16 v58 = 2048;
      uint64_t v59 = v45;
      __int16 v60 = 2048;
      uint64_t v61 = v44;
      __int16 v62 = 2080;
      int64x2_t v63 = v42;
      __int16 v64 = 2080;
      uint64_t v65 = v46;
      __int16 v66 = 2048;
      uint64_t v67 = v47;
      _os_log_impl(&dword_221E5E000, v40, OS_LOG_TYPE_DEFAULT, "%25s:%-5d (sound event: %llu, submix: %llu) - created (type: spatial, state: %s, sleep transitions enabled: %s, parent submix id: %llu)", buf, 0x44u);
    }
  }
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](v68);
  return a1;
}

void sub_221ECD348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  __cxa_free_exception(v22);
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(v21);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(v20);
  Phase::Controller::Submix::~Submix(v19);
  _Unwind_Resume(a1);
}

void sub_221ECD36C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100]((void *)(v14 - 120));
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(v13);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(v12);
  Phase::Controller::Submix::~Submix(v11);
  _Unwind_Resume(a1);
}

void sub_221ECD3C4(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
    __cxa_rethrow();
  }
  JUMPOUT(0x221ECD448);
}

void sub_221ECD3F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  __cxa_end_catch();
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(v13);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(v12);
  Phase::Controller::Submix::~Submix(v11);
  _Unwind_Resume(a1);
}

void sub_221ECD3FC(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x221ECD448);
}

void sub_221ECD410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  operator delete(v14);
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(v13);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(v12);
  Phase::Controller::Submix::~Submix(v11);
  _Unwind_Resume(a1);
}

Phase::Logger *Phase::Controller::SpatialSubmix::CheckSpatialCategoriesActiveState(Phase::Logger *this)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v1 = (char *)this + 352;
  do
  {
    uint64_t v1 = *(char **)v1;
    if (!v1)
    {
      uint64_t v2 = this;
      uint64_t v3 = **(id **)(Phase::Logger::GetInstance(this) + 384);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      {
        uint64_t v4 = *((void *)v2 + 2);
        int v6 = 136315650;
        uint64_t v7 = "CvmSpatialSubmix.mm";
        __int16 v8 = 1024;
        int v9 = 679;
        __int16 v10 = 2048;
        uint64_t v11 = v4;
        _os_log_impl(&dword_221E5E000, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [not hasActiveSpatialCategory is true]: \"submixId %llu: must have at least one active spatial category!\"", (uint8_t *)&v6, 0x1Cu);
      }
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "submixId %llu: must have at least one active spatial category!");
    }
  }
  while (!v1[32]);
  return this;
}

void sub_221ECD570(_Unwind_Exception *exception_object)
{
}

void Phase::Controller::SpatialSubmix::InternalPrepare(Phase::Controller::SpatialSubmix *this)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  Phase::Controller::SpatialSubmix::UpdateDistance(this);
  Phase::Controller::Submix::InternalPrepare(this);
  for (uint64_t i = (uint64_t *)*((void *)this + 44); i; uint64_t i = (uint64_t *)*i)
  {
    if (*((unsigned char *)i + 32))
    {
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((void *)this + 3);
      double v5 = *((double *)i + 3);
      uint64_t SpatialModelerCategory = Phase::Controller::SpatialModelerSystem::GetSpatialModelerCategory(*((Phase::Logger **)this + 72), *((_DWORD *)i + 4));
      Phase::Controller::SpatialModelerCategory::AddInput(SpatialModelerCategory, v3, v4, v5);
    }
    uint64_t v7 = *((void *)this + 2);
    __int16 v8 = (long long **)*((void *)this + 72);
    uint64_t v9 = *((void *)this + 3);
    uint64_t v10 = *((void *)this + 40);
    uint64_t v11 = *((void *)this + 41);
    uint64_t v12 = Phase::Controller::SpatialModelerSystem::GetSpatialModelerCategory((Phase::Logger *)v8, *((_DWORD *)i + 4));
    Phase::Controller::SpatialModelerCategory::RegisterSubmix(v12, v7, v9, v10, v11, v8 + 5);
    int v13 = *((_DWORD *)i + 4);
    *(void *)&long long v35 = *((void *)this + 59);
    int v38 = 1;
    uint64_t v14 = *((void *)this + 2);
    uint64_t v15 = *((void *)this + 3);
    uint64_t v16 = Phase::Controller::SpatialModelerSystem::GetSpatialModelerCategory(*((Phase::Logger **)this + 72), v13);
    Phase::Controller::SpatialModelerCategory::SetProperty(v16, v14, v15, 1, 1, &v35);
    int v17 = *((_DWORD *)i + 4);
    *(void *)&long long v35 = *((void *)this + 60);
    int v38 = 1;
    uint64_t v18 = *((void *)this + 2);
    uint64_t v19 = *((void *)this + 3);
    uint64_t v20 = Phase::Controller::SpatialModelerSystem::GetSpatialModelerCategory(*((Phase::Logger **)this + 72), v17);
    Phase::Controller::SpatialModelerCategory::SetProperty(v20, v18, v19, 2, 1, &v35);
    int v21 = *((_DWORD *)i + 4);
    *(void *)&long long v35 = *((void *)this + 61);
    int v38 = 1;
    uint64_t v22 = *((void *)this + 2);
    uint64_t v23 = *((void *)this + 3);
    uint64_t v24 = Phase::Controller::SpatialModelerSystem::GetSpatialModelerCategory(*((Phase::Logger **)this + 72), v21);
    Phase::Controller::SpatialModelerCategory::SetProperty(v24, v22, v23, 3, 1, &v35);
    int v25 = *((_DWORD *)i + 4);
    long long v26 = *((_OWORD *)this + 32);
    long long v35 = *((_OWORD *)this + 31);
    long long v36 = v26;
    uint64_t v37 = *((void *)this + 66);
    int v38 = 0;
    uint64_t v27 = *((void *)this + 2);
    uint64_t v28 = *((void *)this + 3);
    uint64_t v29 = Phase::Controller::SpatialModelerSystem::GetSpatialModelerCategory(*((Phase::Logger **)this + 72), v25);
    Phase::Controller::SpatialModelerCategory::SetProperty(v29, v27, v28, 4, 0, &v35);
    int v30 = *((_DWORD *)i + 4);
    long long v31 = *(_OWORD *)((char *)this + 552);
    long long v35 = *(_OWORD *)((char *)this + 536);
    long long v36 = v31;
    uint64_t v37 = *((void *)this + 71);
    int v38 = 0;
    uint64_t v32 = *((void *)this + 2);
    uint64_t v33 = *((void *)this + 3);
    uint64_t v34 = Phase::Controller::SpatialModelerSystem::GetSpatialModelerCategory(*((Phase::Logger **)this + 72), v30);
    Phase::Controller::SpatialModelerCategory::SetProperty(v34, v32, v33, 5, 0, &v35);
  }
  if (*((unsigned char *)this + 72) != 2) {
    std::terminate();
  }
}

double Phase::Controller::SpatialSubmix::Destroy(Phase::Controller::SpatialSubmix *this)
{
  *((void *)this + 7) |= 0x28uLL;
  double result = 0.0;
  *((_OWORD *)this + 37) = 0u;
  return result;
}

void Phase::Controller::SpatialSubmix::~SpatialSubmix(Phase::Controller::SpatialSubmix *this)
{
  *((void *)this + 7) |= 0x28uLL;
  *((_OWORD *)this + 37) = 0u;
  if (*((unsigned char *)this + 72))
  {
    for (uint64_t i = (uint64_t *)*((void *)this + 44); i; uint64_t i = (uint64_t *)*i)
    {
      uint64_t v3 = *((void *)this + 2);
      uint64_t v4 = *((void *)this + 3);
      uint64_t SpatialModelerCategory = (void *)Phase::Controller::SpatialModelerSystem::GetSpatialModelerCategory(*((Phase::Logger **)this + 72), *((_DWORD *)i + 4));
      Phase::Controller::SpatialModelerCategory::UnregisterSubmix(SpatialModelerCategory, v3, v4);
    }
    Phase::Controller::DVM::VoiceGraph::RemoveSubmix(*(Phase::Controller::DVM::VoiceGraph **)(**((void **)this + 28) + 72), *((void *)this + 2), *((void *)this + 3));
  }
  if (*((void *)this + 45))
  {
    int v6 = (void *)*((void *)this + 44);
    if (v6)
    {
      do
      {
        uint64_t v7 = (void *)*v6;
        operator delete(v6);
        int v6 = v7;
      }
      while (v7);
    }
    *((void *)this + 44) = 0;
    uint64_t v8 = *((void *)this + 43);
    if (v8)
    {
      for (uint64_t j = 0; j != v8; ++j)
        *(void *)(*((void *)this + 42) + 8 * j) = 0;
    }
    *((void *)this + 45) = 0;
  }
  Phase::Geometry::SystemScheduler::ReleaseDirectivity(*((void *)this + 30) + 2352, *((void *)this + 61));
  Phase::Geometry::SystemScheduler::ReleaseDirectivity(*((void *)this + 30) + 2352, *((void *)this + 60));
  Phase::Geometry::SystemScheduler::ReleaseDistanceModel(*((void *)this + 30) + 2352, *((void *)this + 59));
  uint64_t v10 = (void **)((char *)this + 448);
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100](&v10);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)this + 376);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)this + 336);
  Phase::Controller::Submix::~Submix(this);
}

{
  uint64_t vars8;

  Phase::Controller::SpatialSubmix::~SpatialSubmix(this);

  JUMPOUT(0x223C938A0);
}

void Phase::Controller::SpatialSubmix::Update(Phase::Controller::SpatialSubmix *this, double a2)
{
  uint64_t v3 = this;
  uint64_t v51 = *MEMORY[0x263EF8340];
  double v4 = *((double *)this + 53);
  double v5 = *((double *)this + 54) + a2;
  *((double *)this + 54) = v5;
  if (v5 >= v4 || !*((unsigned char *)this + 416))
  {
    *((unsigned char *)this + 416) = 1;
    unsigned int v6 = (v5 / v4);
    if (v6 >= 2) {
      *((double *)this + 54) = v5 - v4 * (double)(v6 - 1);
    }
    if (Phase::Controller::SpatialSubmix::HasInputs(this)) {
      Phase::Controller::SpatialSubmix::UpdateDistance(v3);
    }
    *((double *)v3 + 54) = *((double *)v3 + 54) - *((double *)v3 + 53);
  }
  Phase::Controller::Submix::Update(v3, a2);
  if (*((unsigned __int8 *)v3 + 72) - 2 <= 2)
  {
    uint64_t v7 = (void *)*((void *)v3 + 33);
    if (*((void *)v3 + 34)) {
      double v8 = 0.0;
    }
    else {
      double v8 = 1.0;
    }
    if (v7)
    {
      do
      {
        uint64_t v9 = (Phase::Controller::Generator *)v7[4];
        if (!v9)
        {
          uint64_t v39 = **(id **)(Phase::Logger::GetInstance(0) + 384);
          if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string buf = 136315394;
            *(void *)&uint8_t buf[4] = "CvmSpatialSubmix.mm";
            __int16 v43 = 1024;
            int v44 = 220;
            _os_log_impl(&dword_221E5E000, v39, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: pGenerator != nullptr is false.", buf, 0x12u);
          }
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "PRECONDITION: pGenerator != nullptr is false.");
        }
        double v8 = fmax(v8, Phase::Controller::Generator::GetGain(v9));
        uint64_t v7 = (void *)*v7;
      }
      while (v7);
      if (v8 < 0.0)
      {
        uint64_t v11 = **(id **)(Phase::Logger::GetInstance(v10) + 384);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 136315650;
          *(void *)&uint8_t buf[4] = "CvmSpatialSubmix.mm";
          __int16 v43 = 1024;
          int v44 = 227;
          __int16 v45 = 2048;
          double v46 = v8;
          _os_log_impl(&dword_221E5E000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d maxGeneratorGain %f is out-of-range [0, FLT_MAX]. Clamping...\n", buf, 0x1Cu);
        }
        double v8 = fmax(v8, 0.0);
      }
    }
    double Gain = Phase::Controller::SpatialSubmix::GetGain((Phase::Geometry::System **)v3);
    if (Gain < 0.0 || Gain > 1.0)
    {
      uint64_t v14 = **(id **)(Phase::Logger::GetInstance(v12) + 384);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        double v15 = *((double *)v3 + 4);
        uint64_t v16 = *((void *)v3 + 2);
        *(_DWORD *)std::string buf = 136316162;
        *(void *)&uint8_t buf[4] = "CvmSpatialSubmix.mm";
        __int16 v43 = 1024;
        int v44 = 237;
        __int16 v45 = 2048;
        double v46 = v15;
        __int16 v47 = 2048;
        uint64_t v48 = v16;
        __int16 v49 = 2048;
        double v50 = Gain;
        _os_log_impl(&dword_221E5E000, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d (sound event: %llu, submix: %llu) submix gain %f is out of range [0, 1]. Clamping...", buf, 0x30u);
      }
      double Gain = fmin(fmax(Gain, 0.0), 1.0);
    }
    int v17 = (uint64_t *)*((void *)v3 + 44);
    if (v17)
    {
      double v18 = v8 * Gain;
      uint64_t v19 = (uint64_t)v3 + 376;
      uint64_t v20 = &std::piecewise_construct;
      uint64_t v41 = (uint64_t)v3 + 376;
      do
      {
        int v21 = (int *)(v17 + 2);
        double v22 = *((double *)v17 + 3);
        *(void *)std::string buf = v17 + 2;
        double v23 = v18 * v22;
        if (*((double *)std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,double>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,double>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,double>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,double>>>::__emplace_unique_key_args<Phase::SpatialCategory,std::piecewise_construct_t const&,std::tuple<Phase::SpatialCategory const&>,std::tuple<>>(v19, (int *)v17 + 4, (uint64_t)v20, (_DWORD **)buf)+ 3) != v18 * v22)
        {
          uint64_t v24 = (char *)v3 + 16;
          uint64_t v25 = *((void *)v3 + 2);
          long long v26 = v20;
          uint64_t v27 = v3;
          uint64_t v28 = (Phase::Logger *)*((void *)v3 + 72);
          int v29 = *v21;
          uint64_t v30 = *((void *)v24 + 1);
          *(void *)&double v31 = 1;
          if (v23 > 0.0) {
            double v31 = v18 * v22;
          }
          double v32 = log(v31);
          uint64_t v33 = v28;
          uint64_t v3 = v27;
          uint64_t v20 = v26;
          uint64_t v19 = v41;
          uint64_t SpatialModelerCategory = Phase::Controller::SpatialModelerSystem::GetSpatialModelerCategory(v33, v29);
          Phase::Controller::SpatialModelerCategory::SetSimulationGainInDecibels(SpatialModelerCategory, v25, v30, v32 * 8.68588964 / 10.0 * 10.0);
          *(void *)std::string buf = v17 + 2;
          *((double *)std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,double>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,double>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,double>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,double>>>::__emplace_unique_key_args<Phase::SpatialCategory,std::piecewise_construct_t const&,std::tuple<Phase::SpatialCategory const&>,std::tuple<>>(v41, (int *)v17 + 4, (uint64_t)v20, (_DWORD **)buf)+ 3) = v23;
          int v35 = *v21;
          uint64_t v36 = *(void *)v24;
          uint64_t v37 = *((void *)v24 + 1);
          uint64_t v38 = Phase::Controller::SpatialModelerSystem::GetSpatialModelerCategory(*((Phase::Logger **)v24 + 70), v35);
          Phase::Controller::SpatialModelerCategory::SetMinimumSimulationGainInDecibels(v38, v36, v37, -106.0);
        }
        int v17 = (uint64_t *)*v17;
      }
      while (v17);
    }
  }
}

void sub_221ECDE3C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL Phase::Controller::SpatialSubmix::HasInputs(Phase::Controller::SpatialSubmix *this)
{
  if (*((_OWORD *)this + 37) == 0) {
    return *((void *)this + 34) != 0;
  }
  uint64_t Submix = Phase::Controller::SubmixSystem::GetSubmix(*((Phase::Logger **)this + 29), *((void *)this + 74), *((void *)this + 75));
  return ((*(uint64_t (**)(uint64_t))(*(void *)Submix + 120))(Submix) & 1) != 0
      || *((void *)this + 34) != 0;
}

void Phase::Controller::SpatialSubmix::UpdateDistance(Phase::Controller::SpatialSubmix *this)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  Phase::Geometry::System::GetCurrentState(*((Phase::Geometry::System **)this + 30), &v10);
  double v3 = Phase::DistanceBetweenListenerAndSource<double>(v10, *((void *)this + 40), *((void *)this + 41));
  if (v3 >= 0.0 && v3 != *((double *)this + 55))
  {
    *((double *)this + 55) = v3;
    double v4 = 1.0;
    if (v3 >= **((double **)this + 56))
    {
      double v4 = 0.0;
      if (v3 <= *(double *)(*((void *)this + 57) - 48)) {
        double v4 = Phase::Envelope<double>::operator()((double **)this + 56, v3);
      }
    }
    for (uint64_t i = (void *)*((void *)this + 33); i; uint64_t i = (void *)*i)
    {
      uint64_t v6 = i[4];
      if (!v6)
      {
        double v8 = **(id **)(Phase::Logger::GetInstance(v2) + 384);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 136315394;
          int v13 = "CvmSpatialSubmix.mm";
          __int16 v14 = 1024;
          int v15 = 747;
          _os_log_impl(&dword_221E5E000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: pGenerator != nullptr is false.", buf, 0x12u);
        }
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "PRECONDITION: pGenerator != nullptr is false.");
      }
      double v7 = Phase::Controller::sClamp<double>(v2, v4, *(double *)(v6 + 288), *(double *)(v6 + 296));
      if (v7 != *(double *)(v6 + 312))
      {
        *(double *)(v6 + 312) = v7;
        *(unsigned char *)(v6 + 320) = 1;
      }
    }
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
}

void sub_221ECE084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

double Phase::Controller::SpatialSubmix::GetGain(Phase::Geometry::System **this)
{
  Phase::Geometry::System::GetCurrentState(this[30], &v13);
  uint64_t v2 = this[40];
  unsigned int v3 = *(_DWORD *)(v13 + 136);
  double v4 = 0.0;
  double v5 = 0.0;
  if (v3 > v2)
  {
    uint64_t v6 = *(void *)(v13 + 120);
    if (*(_DWORD *)(v6 + 24 * v2 + 20) == HIDWORD(v2))
    {
      uint64_t v7 = *(void *)(v6 + 24 * this[40]);
      if (v7)
      {
        if (*(_DWORD *)v7 == 2) {
          double v5 = *(double *)(v7 + 176);
        }
      }
    }
  }
  double v8 = this[41];
  if (v3 > v8)
  {
    uint64_t v9 = *(void *)(v13 + 120);
    if (*(_DWORD *)(v9 + 24 * v8 + 20) == HIDWORD(v8))
    {
      uint64_t v10 = *(void *)(v9 + 24 * this[41]);
      if (v10)
      {
        if (*(_DWORD *)v10 == 3) {
          double v4 = *(double *)(v10 + 168);
        }
      }
    }
  }
  double Gain = Phase::Controller::Submix::GetGain((Phase::Controller::Submix *)this);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  return v5 * v4 * Gain;
}

void sub_221ECE1D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Controller::SpatialSubmix::HasActiveInputs(Phase::Controller::SpatialSubmix *this)
{
  if (*((_OWORD *)this + 37) != 0)
  {
    uint64_t Submix = Phase::Controller::SubmixSystem::GetSubmix(*((Phase::Logger **)this + 29), *((void *)this + 74), *((void *)this + 75));
    if ((*(uint64_t (**)(uint64_t))(*(void *)Submix + 128))(Submix)) {
      return 1;
    }
  }
  double v4 = (void *)*((void *)this + 33);
  if (v4)
  {
    while (1)
    {
      uint64_t v5 = v4[4];
      if (*(_DWORD *)(v5 + 508) != 1 && *(_DWORD *)(v5 + 376) != 4) {
        break;
      }
      double v4 = (void *)*v4;
      if (!v4) {
        return 0;
      }
    }
    return 1;
  }
  return 0;
}

uint64_t Phase::Controller::SpatialSubmix::AllInputsPaused(Phase::Controller::SpatialSubmix *this)
{
  if (*((_OWORD *)this + 37) == 0
    || (Submix = Phase::Controller::SubmixSystem::GetSubmix(*((Phase::Logger **)this + 29), *((void *)this + 74), *((void *)this + 75)), uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)Submix + 136))(Submix), result))
  {
    double v4 = (void *)((char *)this + 264);
    do
    {
      double v4 = (void *)*v4;
      uint64_t result = v4 == 0;
    }
    while (v4 && *(unsigned char *)(v4[4] + 512));
  }
  return result;
}

Phase::Logger *Phase::Controller::SpatialSubmix::SetSpatialCategoryIsActive(uint64_t a1, int a2, int a3)
{
  SpatialCategoryParameters = Phase::Controller::SpatialSubmix::GetSpatialCategoryParameters((Phase::Logger *)a1, a2);
  if (*((unsigned __int8 *)SpatialCategoryParameters + 8) != a3)
  {
    *((unsigned char *)SpatialCategoryParameters + 8) = a3;
    uint64_t v7 = *(void *)(a1 + 16);
    uint64_t v8 = *(void *)(a1 + 24);
    if (a3)
    {
      double v9 = *(double *)SpatialCategoryParameters;
      uint64_t SpatialModelerCategory = Phase::Controller::SpatialModelerSystem::GetSpatialModelerCategory(*(Phase::Logger **)(a1 + 576), a2);
      Phase::Controller::SpatialModelerCategory::AddInput(SpatialModelerCategory, v7, v8, v9);
    }
    else
    {
      uint64_t v11 = Phase::Controller::SpatialModelerSystem::GetSpatialModelerCategory(*(Phase::Logger **)(a1 + 576), a2);
      Phase::Controller::SpatialModelerCategory::RemoveInput(v11, v7, v8);
    }
  }

  return Phase::Controller::SpatialSubmix::CheckSpatialCategoriesActiveState((Phase::Logger *)a1);
}

uint64_t *Phase::Controller::SpatialSubmix::GetSpatialCategoryParameters(Phase::Logger *a1, int a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  unint64_t v3 = *((void *)a1 + 43);
  if (!v3) {
    goto LABEL_17;
  }
  uint8x8_t v4 = (uint8x8_t)vcnt_s8((int8x8_t)v3);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = a2;
    if (v3 <= a2) {
      unint64_t v5 = a2 % v3;
    }
  }
  else
  {
    unint64_t v5 = (v3 - 1) & a2;
  }
  uint64_t v6 = *(uint64_t ***)(*((void *)a1 + 42) + 8 * v5);
  if (!v6 || (uint64_t v7 = *v6) == 0)
  {
LABEL_17:
    double v9 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(a1)
                                                                                       + 384)));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      GetSpatialCategoryString(a2);
      id v10 = objc_claimAutoreleasedReturnValue();
      int v13 = 136315650;
      __int16 v14 = "CvmSpatialSubmix.mm";
      __int16 v15 = 1024;
      int v16 = 654;
      __int16 v17 = 2080;
      uint64_t v18 = [v10 UTF8String];
      _os_log_impl(&dword_221E5E000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (InvalidId) [it == mSpatialCategoryParameters.end() is true]: \"Invalid SpatialCategory %s\"", (uint8_t *)&v13, 0x1Cu);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _ZN5Phase10Controller9InvalidIdCI1St11logic_errorEPKc(exception, "Invalid SpatialCategory %s");
  }
  while (1)
  {
    unint64_t v8 = v7[1];
    if (v8 == a2) {
      break;
    }
    if (v4.u32[0] > 1uLL)
    {
      if (v8 >= v3) {
        v8 %= v3;
      }
    }
    else
    {
      v8 &= v3 - 1;
    }
    if (v8 != v5) {
      goto LABEL_17;
    }
LABEL_16:
    uint64_t v7 = (uint64_t *)*v7;
    if (!v7) {
      goto LABEL_17;
    }
  }
  if (*((_DWORD *)v7 + 4) != a2) {
    goto LABEL_16;
  }
  return v7 + 3;
}

void sub_221ECE594(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void Phase::Controller::SpatialSubmix::SetSpatialCategorySendLevel(Phase::Logger *a1, int a2, double a3)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  SpatialCategoryParameters = Phase::Controller::SpatialSubmix::GetSpatialCategoryParameters(a1, a2);
  if (*((unsigned char *)SpatialCategoryParameters + 8))
  {
    uint64_t v7 = (double *)SpatialCategoryParameters;
    if (a3 < 0.0 || a3 > 1.0)
    {
      double v9 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance((Phase::Logger *)SpatialCategoryParameters)
                                                                                         + 384)));
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        uint64_t v10 = *((void *)a1 + 4);
        uint64_t v11 = *((void *)a1 + 2);
        GetSpatialCategoryString(a2);
        id v12 = objc_claimAutoreleasedReturnValue();
        int v17 = 136316930;
        uint64_t v18 = "CvmSpatialSubmix.mm";
        __int16 v19 = 1024;
        int v20 = 338;
        __int16 v21 = 2048;
        uint64_t v22 = v10;
        __int16 v23 = 2048;
        uint64_t v24 = v11;
        __int16 v25 = 2080;
        uint64_t v26 = [v12 UTF8String];
        __int16 v27 = 2048;
        double v28 = a3;
        __int16 v29 = 2048;
        uint64_t v30 = 0;
        __int16 v31 = 2048;
        uint64_t v32 = 0x3FF0000000000000;
        _os_log_impl(&dword_221E5E000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d (sound event: %llu, submix: %llu) '%s' send level %f is out of range [%f, %f]. Clamping...", (uint8_t *)&v17, 0x4Eu);
      }
      a3 = fmin(fmax(a3, 0.0), 1.0);
    }
    if (*v7 != a3)
    {
      double *v7 = a3;
      int v13 = (Phase::Logger *)*((void *)a1 + 72);
      uint64_t v15 = *((void *)a1 + 2);
      uint64_t v14 = *((void *)a1 + 3);
      uint64_t SpatialModelerCategory = Phase::Controller::SpatialModelerSystem::GetSpatialModelerCategory(v13, a2);
      Phase::Controller::SpatialModelerCategory::SetInputSendLevel(SpatialModelerCategory, v15, v14, a3);
    }
  }
}

void sub_221ECE778(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::SpatialSubmix::SetSpatialCategoryProperty(uint64_t a1, int a2, int a3, char a4, _OWORD *a5)
{
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t SpatialModelerCategory = Phase::Controller::SpatialModelerSystem::GetSpatialModelerCategory(*(Phase::Logger **)(a1 + 576), a2);

  return Phase::Controller::SpatialModelerCategory::SetProperty(SpatialModelerCategory, v8, v9, a3, a4, a5);
}

double Phase::Controller::SpatialSubmix::GetInputChannelLayout@<D0>(std::vector<char> *a1@<X8>)
{
  std::vector<char>::value_type __x = 0;
  std::vector<char>::pointer begin = std::vector<char>::vector(a1, 0x20uLL, &__x)->__begin_;
  *(void *)&double result = 6553601;
  *(void *)std::vector<char>::pointer begin = 6553601;
  *((_DWORD *)begin + 2) = 0;
  return result;
}

void Phase::Controller::SpatialSubmix::InternalSleep(Phase::Controller::SpatialSubmix *this)
{
  if (*((unsigned char *)this + 72) != 7)
  {
    int HasActiveInputs = Phase::Controller::SpatialSubmix::HasActiveInputs(this);
    if (*((unsigned char *)this + 72) != 6 && HasActiveInputs != 0) {
      goto LABEL_26;
    }
    Phase::Controller::Submix::SetState((uint64_t)this, 6u);
    if (!*((unsigned char *)this + 584)) {
      *((unsigned char *)this + 584) = 3;
    }
    if (*((unsigned char *)this + 72) != 7)
    {
      while (*((unsigned __int8 *)this + 584) - 3 < 0xFFFFFFFE)
      {
        switch(*((unsigned char *)this + 584))
        {
          case 0:
            *((unsigned char *)this + 584) = 3;
            break;
          case 3:
            for (uint64_t i = (uint64_t *)*((void *)this + 44); i; uint64_t i = (uint64_t *)*i)
            {
              uint64_t v5 = *((void *)this + 2);
              uint64_t v6 = *((void *)this + 3);
              uint64_t SpatialModelerCategory = (void *)Phase::Controller::SpatialModelerSystem::GetSpatialModelerCategory(*((Phase::Logger **)this + 72), *((_DWORD *)i + 4));
              Phase::Controller::SpatialModelerCategory::UnregisterSubmix(SpatialModelerCategory, v5, v6);
            }
            uint64_t v8 = *(void **)(*((void *)this + 72) + 16);
            if (v8)
            {
              uint64_t v9 = *((void *)this + 2);
              uint64_t v10 = *((void *)this + 3);
              do
              {
                Phase::Controller::SpatialModelerCategory::SetPlayState(v8[3], v9, v10, 0);
                uint64_t v8 = (void *)*v8;
              }
              while (v8);
            }
            *((unsigned char *)this + 584) = 4;
            break;
          case 4:
            if (!Phase::Controller::SpatialModelerSystem::IsStopped(*((void *)this + 72), *((void *)this + 2), *((void *)this + 3)))return; {
            Phase::Controller::SpatialModelerSystem::RemoveAllInputs(*((void *)this + 72), *((void *)this + 2), *((void *)this + 3));
            }
            Phase::Controller::DVM::VoiceGraph::RemoveSubmix(*(Phase::Controller::DVM::VoiceGraph **)(**((void **)this + 28) + 72), *((void *)this + 2), *((void *)this + 3));
            *((unsigned char *)this + 584) = 5;
            break;
          case 5:
            if (!*((unsigned char *)this + 288)) {
              return;
            }
            *((unsigned char *)this + 584) = 6;
            break;
          default:
            *((unsigned char *)this + 584) = 0;
            Phase::Controller::Submix::SetState((uint64_t)this, 7u);
            Phase::Controller::Submix::SetSessionPlayState((uint64_t)this, 0, 0, 0);
            break;
        }
        if (*((unsigned char *)this + 72) == 7) {
          return;
        }
      }
LABEL_26:
      std::terminate();
    }
  }
}

void Phase::Controller::SpatialSubmix::InternalStop(Phase::Controller::SpatialSubmix *this)
{
  *((void *)this + 7) &= 0xFFFFFFFFFFFFFFF9;
  if (*((unsigned char *)this + 72))
  {
    Phase::Controller::Submix::SetState((uint64_t)this, 1u);
    if (!*((unsigned char *)this + 585)) {
      *((unsigned char *)this + 585) = 1;
    }
    for (char i = *((unsigned char *)this + 72); i; char i = *((unsigned char *)this + 72))
    {
      switch(*((unsigned char *)this + 585))
      {
        case 0:
          *((unsigned char *)this + 585) = 1;
          continue;
        case 1:
          Phase::Controller::Submix::StopInputs(this);
          *((unsigned char *)this + 585) = 2;
          continue;
        case 2:
          if (Phase::Controller::SpatialSubmix::HasActiveInputs(this)) {
            return;
          }
          *((unsigned char *)this + 585) = 3;
          break;
        case 3:
        case 4:
        case 5:
          Phase::Controller::SpatialSubmix::InternalSleep(this);
          int v3 = *((unsigned __int8 *)this + 72);
          Phase::Controller::Submix::SetState((uint64_t)this, i);
          if ((v3 & 0xFE) != 6) {
            std::terminate();
          }
          if (v3 != 7) {
            return;
          }
          *((unsigned char *)this + 585) = 6;
          break;
        default:
          *((unsigned char *)this + 585) = 0;
          Phase::Controller::Submix::SetState((uint64_t)this, 0);
          Phase::Controller::Submix::SetSessionPlayState((uint64_t)this, 0, 0, 0);
          *((void *)this + 7) &= ~8uLL;
          continue;
      }
    }
  }
}

BOOL Phase::Controller::SpatialSubmix::IsPrepared(Phase::Controller::SpatialSubmix *this)
{
  return Phase::Controller::SpatialModelerSystem::IsPrepared(*((void *)this + 72), *((void *)this + 2), *((void *)this + 3));
}

void Phase::Controller::SpatialSubmix::SetPlayState(void *a1, int a2)
{
  Phase::Controller::Submix::SetPlayState((uint64_t)a1, a2);
  uint8x8_t v4 = *(void **)(a1[72] + 16);
  if (v4)
  {
    uint64_t v5 = a1[2];
    uint64_t v6 = a1[3];
    do
    {
      Phase::Controller::SpatialModelerCategory::SetPlayState(v4[3], v5, v6, a2);
      uint8x8_t v4 = (void *)*v4;
    }
    while (v4);
  }
}

uint64_t Phase::Controller::SpatialSubmix::GetType(Phase::Controller::SpatialSubmix *this)
{
  return 1;
}

uint64_t Phase::Controller::SpatialSubmix::GetNumChannels(Phase::Controller::SpatialSubmix *this)
{
  return 1;
}

uint64_t Phase::Controller::SpatialSubmix::GetChannelMask(uint64_t a1, Phase::Logger *a2)
{
  uint64_t v3 = 0;
  for (unsigned __int32 i = 0; ; ++i)
  {
    uint64_t v5 = *(int **)a2;
    int v6 = **(_DWORD **)a2;
    if (v6 == 0x10000)
    {
      uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v5[1]);
      v8.i16[0] = vaddlv_u8(v8);
      unsigned int v7 = v8.i32[0];
    }
    else
    {
      unsigned int v7 = v6 ? (unsigned __int16)**(_DWORD **)a2 : v5[2];
    }
    if (i >= v7) {
      break;
    }
    BOOL IsChannelLFE = Phase::ChannelLayout::IsChannelLFE(a2, i);
    uint64_t v10 = 1 << i;
    if (IsChannelLFE) {
      uint64_t v10 = 0;
    }
    v3 |= v10;
  }
  return v3;
}

uint64_t Phase::Controller::SpatialSubmix::GetSourceId(Phase::Controller::SpatialSubmix *this)
{
  return *((void *)this + 41);
}

uint64_t Phase::Controller::SpatialSubmix::GetListenerId(Phase::Controller::SpatialSubmix *this)
{
  return *((void *)this + 40);
}

unint64_t Phase::Controller::CreateDistanceModelHandle(double *a1, uint64_t a2)
{
  uint64_t v75 = *MEMORY[0x263EF8340];
  unint64_t v2 = *(unsigned __int8 *)a1;
  if (!*(unsigned char *)a1) {
    return v2;
  }
  if (v2 == 2)
  {
    if (!a2) {
      goto LABEL_110;
    }
    uint8x8_t v8 = (Phase::Logger *)Phase::Geometry::DistanceModelFactory::Create(a2 + 456, 2u, 0, &v69);
    if (!v69)
    {
      int v13 = **(id **)(Phase::Logger::GetInstance(v8) + 384);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 136315394;
        *(void *)&uint8_t buf[4] = "CvmSpatialSubmixHelpers.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 145;
        _os_log_impl(&dword_221E5E000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to create a geometric spreading distance model.", buf, 0x12u);
      }
      unint64_t v2 = 0;
      goto LABEL_108;
    }
    double v9 = a1[1];
    if (v9 >= -3.40282347e38)
    {
      float v16 = v9;
      int v10 = 2139095039;
      if (v16 <= 3.4028e38)
      {
LABEL_22:
        uint64_t v17 = **(void **)(v69 + 40);
        LODWORD(v68) = 0;
        *((float *)&v68 + 1) = v16;
        uint64_t v18 = *((unsigned int *)a1 + 4);
        __int16 v66 = 0;
        uint64_t v67 = 0;
        uint64_t v65 = 0;
        *(void *)std::string buf = &v65;
        buf[8] = 0;
        if (v18)
        {
          __int16 v19 = (Phase::Logger *)operator new(40 * v18);
          int v20 = (float *)v19;
          uint64_t v63 = v17;
          uint64_t v21 = 0;
          uint64_t v65 = (float *)v19;
          uint64_t v67 = (char *)v19 + 40 * v18;
          do
          {
            uint64_t v22 = (char *)v19 + v21;
            *(_OWORD *)uint64_t v22 = 0uLL;
            *((void *)v22 + 1) = &unk_26D473948;
            uint64_t v23 = (uint64_t)v19 + v21 + 8;
            *(_OWORD *)(v23 + 8) = 0uLL;
            *(void *)(v23 + 24) = v23;
            v21 += 40;
          }
          while ((Phase::Logger *)(v23 + 32) != (Phase::Logger *)((char *)v19 + 40 * v18));
          uint64_t v24 = 0;
          unint64_t v25 = 0;
          __int16 v66 = (float *)((char *)v19 + 40 * v18);
          uint64_t v26 = a1 + 5;
          while (1)
          {
            double v27 = *(v26 - 2);
            if (v27 >= -3.40282347e38)
            {
              float v29 = v27;
              if (v29 <= 3.4028e38) {
                goto LABEL_31;
              }
              int v28 = 2139095039;
            }
            else
            {
              int v28 = -8388609;
            }
            float v29 = *(float *)&v28;
LABEL_31:
            double v30 = *(v26 - 1);
            if (v30 >= -3.40282347e38)
            {
              float v32 = v30;
              if (v32 <= 3.4028e38) {
                goto LABEL_36;
              }
              int v31 = 2139095039;
            }
            else
            {
              int v31 = -8388609;
            }
            float v32 = *(float *)&v31;
LABEL_36:
            uint64_t v33 = &v20[v24];
            *uint64_t v33 = v29;
            v33[1] = v32;
            uint64_t v34 = *(void *)v26;
            int v35 = Phase::CurveFunction::Linear<float>;
            if (*(uint64_t *)v26 <= 1668434002)
            {
              switch(v34)
              {
                case 0:
                  goto LABEL_64;
                case 1:
                  goto LABEL_48;
                case 2:
                  goto LABEL_55;
                case 3:
                  goto LABEL_60;
                case 4:
                  goto LABEL_51;
                case 5:
                  goto LABEL_43;
                case 6:
                  goto LABEL_57;
                case 7:
                  goto LABEL_56;
                case 8:
                  goto LABEL_58;
                default:
                  if (v34 != 1668432757) {
                    goto LABEL_66;
                  }
LABEL_60:
                  uint64_t v36 = (uint64_t (*)())Phase::CurveFunction::Cubed<float>;
                  break;
              }
              goto LABEL_63;
            }
            if (v34 <= 1668434500)
            {
              if (v34 <= 1668434246)
              {
                if (v34 == 1668434003)
                {
                  uint64_t v36 = (uint64_t (*)())Phase::CurveFunction::HoldStartValue<float>;
                }
                else
                {
                  if (v34 != 1668434243) {
                    goto LABEL_66;
                  }
LABEL_51:
                  uint64_t v36 = (uint64_t (*)())Phase::CurveFunction::InverseCubed<float>;
                }
              }
              else
              {
                switch(v34)
                {
                  case 1668434247:
LABEL_58:
                    uint64_t v36 = (uint64_t (*)())Phase::CurveFunction::InverseSigmoid<float>;
                    break;
                  case 1668434257:
LABEL_55:
                    uint64_t v36 = (uint64_t (*)())Phase::CurveFunction::InverseSquared<float>;
                    break;
                  case 1668434259:
LABEL_43:
                    uint64_t v36 = (uint64_t (*)())Phase::CurveFunction::InverseSine<float>;
                    break;
                  default:
                    goto LABEL_66;
                }
              }
              goto LABEL_63;
            }
            if (v34 > 1668436838)
            {
              switch(v34)
              {
                case 1668436839:
LABEL_56:
                  uint64_t v36 = (uint64_t (*)())Phase::CurveFunction::Sigmoid<float>;
                  break;
                case 1668436846:
LABEL_57:
                  uint64_t v36 = (uint64_t (*)())Phase::CurveFunction::Sine<float>;
                  break;
                case 1668436849:
LABEL_48:
                  uint64_t v36 = (uint64_t (*)())Phase::CurveFunction::Squared<float>;
                  break;
                default:
                  goto LABEL_66;
              }
              goto LABEL_63;
            }
            if (v34 == 1668434501)
            {
              uint64_t v36 = (uint64_t (*)())Phase::CurveFunction::JumpToEndValue<float>;
LABEL_63:
              int v35 = v36;
              goto LABEL_64;
            }
            if (v34 != 1668435054)
            {
LABEL_66:
              uint64_t v39 = **(id **)(Phase::Logger::GetInstance(v19) + 640);
              if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)uint64_t v74 = 136315650;
                *(void *)&v74[4] = "CurveUtility.hpp";
                *(_WORD *)&v74[12] = 1024;
                *(_DWORD *)&v74[14] = 90;
                *(_WORD *)&v74[18] = 1024;
                *(_DWORD *)&v74[20] = v34;
                _os_log_impl(&dword_221E5E000, v39, OS_LOG_TYPE_ERROR, "%25s:%-5d Unsupported PHASECurveType %d. Setting the curve to linear.", v74, 0x18u);
              }
              int v35 = Phase::CurveFunction::Linear<float>;
            }
LABEL_64:
            *(void *)std::string buf = &unk_26D473990;
            *(void *)&buf[8] = v35;
            *(void *)&v73[4] = buf;
            std::__function::__value_func<float ()(float)>::operator=[abi:ne180100](&v20[v24 + 2], (uint64_t)buf);
            __int16 v19 = (Phase::Logger *)std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](buf);
            ++v25;
            int v20 = v65;
            uint64_t v37 = v66;
            uint64_t v38 = (char *)v66 - (char *)v65;
            v24 += 10;
            v26 += 3;
            if (0xCCCCCCCCCCCCCCCDLL * (((char *)v66 - (char *)v65) >> 3) <= v25)
            {
              uint64_t v17 = v63;
              goto LABEL_80;
            }
          }
        }
        uint64_t v38 = 0;
        uint64_t v37 = 0;
        int v20 = 0;
LABEL_80:
        memset(v74, 0, 24);
        unint64_t v43 = 0xCCCCCCCCCCCCCCCDLL * (v38 >> 3);
        if (v43 == 1)
        {
          Phase::Envelope<float>::InitializeFromSingleSegment((Phase::Logger *)v74, (float *)&v68, v20);
        }
        else if (v43)
        {
          if (v37 == v20)
          {
            uint64_t v44 = 0;
            unint64_t v45 = 0;
          }
          else
          {
            std::vector<Phase::Envelope<float>::SegmentInternal,std::allocator<Phase::Envelope<float>::SegmentInternal>>::__vdeallocate((void **)v74);
            if (v43 > 0x555555555555555) {
              std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v46 = 0x5555555555555556 * ((uint64_t)(*(void *)&v74[16] - *(void *)v74) >> 4);
            if (v46 <= v43) {
              unint64_t v46 = v43;
            }
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v74[16] - *(void *)v74) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
              unint64_t v47 = 0x555555555555555;
            }
            else {
              unint64_t v47 = v46;
            }
            std::vector<Phase::Envelope<float>::SegmentInternal,std::allocator<Phase::Envelope<float>::SegmentInternal>>::__vallocate[abi:ne180100](v74, v47);
            unint64_t v45 = *(void *)&v74[8];
            if (v20 != v37)
            {
              uint64_t v48 = 0;
              uint64_t v49 = (uint64_t)(v20 + 2);
              do
              {
                uint64_t v50 = v45 + v48;
                *(void *)uint64_t v50 = 0;
                uint64_t v51 = v49 - 8;
                *(_DWORD *)(v50 + 8) = *(_DWORD *)(v49 - 8);
                *(_DWORD *)(v50 + 12) = *(_DWORD *)(v49 - 4);
                std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100](v45 + v48 + 16, v49);
                v48 += 48;
                v49 += 40;
              }
              while ((float *)(v51 + 40) != v37);
              v45 += v48;
            }
            *(void *)&v74[8] = v45;
            uint64_t v44 = *(void *)v74;
          }
          unint64_t v52 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v45 - v44) >> 4));
          if (v45 == v44) {
            uint64_t v53 = 0;
          }
          else {
            uint64_t v53 = v52;
          }
          long long v54 = (Phase::Logger *)std::__introsort<std::_ClassicAlgPolicy,Phase::Envelope<float>::Envelope<std::__wrap_iter<Phase::Envelope<float>::Segment *>>(Phase::Vector<float,2ul> const&,std::__wrap_iter<Phase::Envelope<float>::Segment *>,std::__wrap_iter<Phase::Envelope<float>::Segment *>)::{lambda(Phase::Envelope<float>::SegmentInternal const&,Phase::Envelope<float>::SegmentInternal const&)#1} &,Phase::Envelope<float>::SegmentInternal*,false>(v44, v45, v53, 1);
          uint64_t v55 = *(void *)v74;
          if (*(float *)&v68 > *(float *)(*(void *)v74 + 8))
          {
            __int16 v60 = **(id **)(Phase::Logger::GetInstance(v54) + 640);
            if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
            {
              double v61 = *(float *)(*(void *)v74 + 8);
              *(_DWORD *)std::string buf = 136315906;
              *(void *)&uint8_t buf[4] = "Envelope.hpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 117;
              __int16 v72 = 2048;
              *(double *)uint64_t v73 = *(float *)&v68;
              *(_WORD *)&v73[8] = 2048;
              *(double *)&v73[10] = v61;
              _os_log_impl(&dword_221E5E000, v60, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (EnvelopeException::InvalidStartPoint) [!(inStartPoint.x <= mSegments[0].mEndPoint.x) is true]: \"Invalid start point x value: %f. Must be <= first end point x value: %f\"", buf, 0x26u);
            }
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(exception, "Invalid start point x value: %f. Must be <= first end point x value: %f");
            exception->__vftable = (std::logic_error_vtbl *)&unk_26D471588;
          }
          **(_DWORD **)uint64_t v74 = v68;
          *(_DWORD *)(v55 + 4) = HIDWORD(v68);
          unint64_t v56 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)&v74[8] - v55) >> 4);
          unint64_t v57 = v56 - 1;
          if (v56 != 1)
          {
            __int16 v58 = (void *)(v55 + 16 * ((*(void *)&v74[8] - v55) >> 4) - 88);
            do
            {
              v58[5] = *v58;
              v58 -= 6;
              --v57;
            }
            while (v57);
          }
        }
        else
        {
          *(void *)&buf[8] = &unk_26D473948;
          *(void *)&v73[12] = &buf[8];
          *(void *)std::string buf = v68;
          Phase::Envelope<float>::InitializeFromSingleSegment((Phase::Logger *)v74, (float *)&v68, (float *)buf);
          std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](&buf[8]);
        }
        std::vector<Phase::Envelope<float>::SegmentInternal,std::allocator<Phase::Envelope<float>::SegmentInternal>>::__vdeallocate((void **)(v17 + 16));
        *(_OWORD *)(v17 + 16) = *(_OWORD *)v74;
        *(void *)(v17 + 32) = *(void *)&v74[16];
        memset(v74, 0, 24);
        *(void *)std::string buf = v74;
        std::vector<Phase::Envelope<float>::SegmentInternal,std::allocator<Phase::Envelope<float>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        unint64_t v2 = Phase::Geometry::SystemScheduler::AddToDatabase(a2 + 2352, &v69);
        if (!v2)
        {
          uint64_t v59 = **(id **)(Phase::Logger::GetInstance(0) + 384);
          if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string buf = 136315394;
            *(void *)&uint8_t buf[4] = "CvmSpatialSubmixHelpers.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 140;
            _os_log_impl(&dword_221E5E000, v59, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to add distance model to geometry layer database.", buf, 0x12u);
          }
        }
        *(void *)std::string buf = &v65;
        std::vector<Phase::Envelope<float>::Segment,std::allocator<Phase::Envelope<float>::Segment>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
LABEL_108:
        uint64_t v41 = v70;
        if (!v70) {
          return v2;
        }
        goto LABEL_77;
      }
    }
    else
    {
      int v10 = -8388609;
    }
    float v16 = *(float *)&v10;
    goto LABEL_22;
  }
  if (v2 != 1)
  {
    uint64_t v11 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)a1) + 384);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      int v12 = *(unsigned __int8 *)a1;
      *(_DWORD *)std::string buf = 136315650;
      *(void *)&uint8_t buf[4] = "CvmSpatialSubmixHelpers.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 154;
      __int16 v72 = 1024;
      *(_DWORD *)uint64_t v73 = v12;
      _os_log_impl(&dword_221E5E000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d unhandled distance model type: %hhu", buf, 0x18u);
    }
    return 0;
  }
  if (!a2) {
LABEL_110:
  }
    std::terminate();
  uint64_t v5 = (Phase::Logger *)Phase::Geometry::DistanceModelFactory::Create(a2 + 456, 1u, 0, v74);
  if (*(void *)v74)
  {
    double v6 = a1[1];
    if (v6 >= -3.40282347e38)
    {
      float v40 = v6;
      int v7 = 2139095039;
      if (v40 <= 3.4028e38) {
        goto LABEL_71;
      }
    }
    else
    {
      int v7 = -8388609;
    }
    float v40 = *(float *)&v7;
LABEL_71:
    *(float *)(**(void **)(*(void *)v74 + 40) + 16) = v40;
    unint64_t v2 = Phase::Geometry::SystemScheduler::AddToDatabase(a2 + 2352, (uint64_t *)v74);
    if (v2) {
      goto LABEL_76;
    }
    uint64_t v14 = **(id **)(Phase::Logger::GetInstance(0) + 384);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = "CvmSpatialSubmixHelpers.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 95;
      uint64_t v15 = "%25s:%-5d Failed to add distance model to geometry layer database.";
      goto LABEL_74;
    }
    goto LABEL_75;
  }
  uint64_t v14 = **(id **)(Phase::Logger::GetInstance(v5) + 384);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = "CvmSpatialSubmixHelpers.mm";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 100;
    uint64_t v15 = "%25s:%-5d Failed to create a geometric spreading distance model.";
LABEL_74:
    _os_log_impl(&dword_221E5E000, v14, OS_LOG_TYPE_ERROR, v15, buf, 0x12u);
  }
LABEL_75:
  unint64_t v2 = 0;
LABEL_76:
  uint64_t v41 = *(std::__shared_weak_count **)&v74[8];
  if (*(void *)&v74[8]) {
LABEL_77:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v41);
  return v2;
}

void sub_221ECF77C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, char *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26)
{
  __cxa_free_exception(v26);
  a19 = &a25;
  std::vector<Phase::Envelope<float>::SegmentInternal,std::allocator<Phase::Envelope<float>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  a19 = &a13;
  std::vector<Phase::Envelope<float>::Segment,std::allocator<Phase::Envelope<float>::Segment>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  _Unwind_Resume(a1);
}

Phase::Logger *Phase::Controller::CreateDirectivityModelHandle(unsigned __int8 *a1, uint64_t a2, int a3)
{
  uint64_t v138 = *MEMORY[0x263EF8340];
  if (!a2) {
    std::terminate();
  }
  memset(v119, 0, sizeof(v119));
  int v120 = 1065353216;
  long long v132 = (float *)"DirectivityDataMapSize";
  uint64_t v133 = 22;
  *(_DWORD *)std::string buf = 4;
  int v137 = 1;
  Phase::UnorderedStringMap<Phase::OptionsValue>::Set((uint64_t)v119, (uint64_t)&v132, (uint64_t)buf);
  double v6 = (Phase::Logger *)std::__variant_detail::__dtor<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)buf);
  int v7 = (Phase::Logger *)*a1;
  switch(*a1)
  {
    case 0u:
      goto LABEL_144;
    case 1u:
      uint8x8_t v8 = (Phase::Logger *)Phase::Geometry::DirectivityFactory::Create(a2 + 208, 1u, (uint64_t)v119, &v122);
      if (v122)
      {
        uint64_t v115 = a2;
        uint64_t v9 = **((void **)v122 + 5);
        uint64_t v10 = *((unsigned int *)a1 + 2);
        *(_OWORD *)(v9 + 144) = 0u;
        uint64_t v11 = v9 + 144;
        *(_OWORD *)(v11 - 20) = 0u;
        *(_OWORD *)(v11 - 48) = 0u;
        *(_OWORD *)(v11 - 32) = 0u;
        *(_OWORD *)(v11 - 80) = 0u;
        *(_OWORD *)(v11 - 64) = 0u;
        *(_OWORD *)(v11 - 112) = 0u;
        *(_OWORD *)(v11 - 96) = 0u;
        *(_OWORD *)(v11 - 128) = 0u;
        *(_DWORD *)(v11 - 4) = v10;
        *(_OWORD *)(v11 + 16) = 0u;
        *(_OWORD *)(v11 + 32) = 0u;
        *(_OWORD *)(v11 + 48) = 0u;
        *(_OWORD *)(v11 + 64) = 0u;
        *(_OWORD *)(v11 + 80) = 0u;
        *(_OWORD *)(v11 + 96) = 0u;
        *(_OWORD *)(v11 + 108) = 0u;
        *(_DWORD *)(v11 + 124) = v10;
        *(_OWORD *)(v11 + 236) = 0u;
        *(_OWORD *)(v11 + 208) = 0u;
        *(_OWORD *)(v11 + 224) = 0u;
        *(_OWORD *)(v11 + 176) = 0u;
        *(_OWORD *)(v11 + 192) = 0u;
        *(_OWORD *)(v11 + 144) = 0u;
        *(_OWORD *)(v11 + 160) = 0u;
        *(_OWORD *)(v11 + 128) = 0u;
        *(_DWORD *)(v11 + 252) = v10;
        if (v10)
        {
          int v12 = (double *)(a1 + 32);
          while (1)
          {
            double v13 = *(v12 - 2);
            float v14 = v13;
            if (v14 > 3.4028e38) {
              float v14 = 3.4028e38;
            }
            if (v13 >= -3.40282347e38) {
              float v15 = v14;
            }
            else {
              float v15 = -3.4028e38;
            }
            *(float *)(v11 - 128) = v15;
            double v16 = *(v12 - 1);
            float v17 = v16;
            if (v17 > 3.4028e38) {
              float v17 = 3.4028e38;
            }
            float v18 = v16 >= -3.40282347e38 ? v17 : -3.4028e38;
            *(float *)uint64_t v11 = v18;
            if (*v12 < -3.40282347e38) {
              break;
            }
            float v20 = *v12;
            if (v20 > 3.4028e38)
            {
              int v19 = 2139095039;
              goto LABEL_20;
            }
LABEL_21:
            *(float *)(v11 + 128) = v20;
            v11 += 4;
            v12 += 3;
            if (!--v10) {
              goto LABEL_22;
            }
          }
          int v19 = -8388609;
LABEL_20:
          float v20 = *(float *)&v19;
          goto LABEL_21;
        }
LABEL_22:
        uint64_t v21 = 1;
        while (1)
        {
          uint64_t v22 = *(void *)(*((void *)v122 + 5) + 40 * v21);
          unint64_t v23 = qword_2220A53A8[v21 - 1];
          sGetFrequencies((uint64_t)&v132, v23);
          unint64_t v24 = *((unsigned int *)a1 + 2);
          std::vector<float>::vector(buf, v24);
          std::vector<float>::vector(&v130, v24);
          std::vector<float>::vector(&v128, v24);
          if (v24)
          {
            unint64_t v25 = *(float **)buf;
            uint64_t v26 = (float *)v130;
            double v27 = (double *)(a1 + 32);
            int v28 = (float *)v128;
            while (1)
            {
              double v29 = *(v27 - 2);
              float v30 = v29;
              if (v30 > 3.4028e38) {
                float v30 = 3.4028e38;
              }
              if (v29 >= -3.40282347e38) {
                float v31 = v30;
              }
              else {
                float v31 = -3.4028e38;
              }
              float *v25 = v31;
              double v32 = *(v27 - 1);
              float v33 = v32;
              if (v33 > 3.4028e38) {
                float v33 = 3.4028e38;
              }
              float v34 = v32 >= -3.40282347e38 ? v33 : -3.4028e38;
              float *v26 = v34;
              if (*v27 < -3.40282347e38) {
                break;
              }
              float v36 = *v27;
              if (v36 > 3.4028e38)
              {
                int v35 = 2139095039;
                goto LABEL_39;
              }
LABEL_40:
              *v28++ = v36;
              v27 += 3;
              ++v26;
              ++v25;
              if (!--v24) {
                goto LABEL_41;
              }
            }
            int v35 = -8388609;
LABEL_39:
            float v36 = *(float *)&v35;
            goto LABEL_40;
          }
LABEL_41:
          std::vector<float>::vector(&v126, v23);
          std::vector<float>::vector(&__p, v23);
          Phase::GetValuesFromFrequencyResponse<std::__wrap_iter<float *>,std::__wrap_iter<float *>,std::__wrap_iter<float const*>,std::__wrap_iter<float *>,&float Phase::Identity<float>,&float Phase::Identity<float>>(*(float **)buf, *(float **)&buf[8], (uint64_t)v130, (uint64_t)v131, v132, (float *)v133, (uint64_t)v126);
          Phase::GetValuesFromFrequencyResponse<std::__wrap_iter<float *>,std::__wrap_iter<float *>,std::__wrap_iter<float const*>,std::__wrap_iter<float *>,&float Phase::Identity<float>,&float Phase::Identity<float>>(*(float **)buf, *(float **)&buf[8], (uint64_t)v128, (uint64_t)v129, v132, (float *)v133, (uint64_t)__p);
          *(_OWORD *)(v22 + 144) = 0u;
          uint64_t v37 = v22 + 144;
          *(_OWORD *)(v37 - 20) = 0u;
          *(_OWORD *)(v37 - 48) = 0u;
          *(_OWORD *)(v37 - 32) = 0u;
          *(_OWORD *)(v37 - 80) = 0u;
          *(_OWORD *)(v37 - 64) = 0u;
          *(_OWORD *)(v37 - 112) = 0u;
          *(_OWORD *)(v37 - 96) = 0u;
          *(_OWORD *)(v37 - 128) = 0u;
          *(_DWORD *)(v37 - 4) = v23;
          *(_OWORD *)(v37 + 16) = 0u;
          *(_OWORD *)(v37 + 32) = 0u;
          *(_OWORD *)(v37 + 48) = 0u;
          *(_OWORD *)(v37 + 64) = 0u;
          *(_OWORD *)(v37 + 80) = 0u;
          *(_OWORD *)(v37 + 96) = 0u;
          *(_OWORD *)(v37 + 108) = 0u;
          *(_DWORD *)(v37 + 124) = v23;
          *(_OWORD *)(v37 + 236) = 0u;
          *(_OWORD *)(v37 + 208) = 0u;
          *(_OWORD *)(v37 + 224) = 0u;
          *(_OWORD *)(v37 + 176) = 0u;
          *(_OWORD *)(v37 + 192) = 0u;
          *(_OWORD *)(v37 + 144) = 0u;
          *(_OWORD *)(v37 + 160) = 0u;
          *(_OWORD *)(v37 + 128) = 0u;
          *(_DWORD *)(v37 + 252) = v23;
          uint64_t v38 = __p;
          if (v23) {
            break;
          }
          if (__p) {
            goto LABEL_46;
          }
LABEL_47:
          if (v126)
          {
            long long v127 = v126;
            operator delete(v126);
          }
          if (v128)
          {
            long long v129 = v128;
            operator delete(v128);
          }
          if (v130)
          {
            uint64_t v131 = v130;
            operator delete(v130);
          }
          if (*(void *)buf)
          {
            *(void *)&buf[8] = *(void *)buf;
            operator delete(*(void **)buf);
          }
          if (v132)
          {
            uint64_t v133 = (uint64_t)v132;
            operator delete(v132);
          }
          if (++v21 == 4)
          {
            unint64_t v45 = (Phase::Logger *)Phase::Geometry::SystemScheduler::AddToDatabase(v115 + 2352, (uint64_t *)&v122);
            int v7 = v45;
            if (v45)
            {
              unint64_t v46 = **(id **)(Phase::Logger::GetInstance(v45) + 384);
              if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)std::string buf = 136315650;
                *(void *)&uint8_t buf[4] = "CvmSpatialSubmixHelpers.mm";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 337;
                __int16 v135 = 2048;
                unsigned int v136 = (const char *)v7;
                _os_log_impl(&dword_221E5E000, v46, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Creating geometry Directivity: 0x%llx", buf, 0x1Cu);
              }
              goto LABEL_161;
            }
            unint64_t v113 = **(id **)(Phase::Logger::GetInstance(0) + 384);
            if (os_log_type_enabled(v113, OS_LOG_TYPE_ERROR))
            {
              std::error_code v114 = "source";
              *(void *)&uint8_t buf[4] = "CvmSpatialSubmixHelpers.mm";
              *(_DWORD *)std::string buf = 136315650;
              if (a3) {
                std::error_code v114 = "listener";
              }
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 343;
              __int16 v135 = 2080;
              unsigned int v136 = v114;
              unint64_t v108 = "%25s:%-5d Failed to add %s directivity model to geometry layer database.";
              uint64_t v109 = v113;
              uint32_t v110 = 28;
LABEL_159:
              _os_log_impl(&dword_221E5E000, v109, OS_LOG_TYPE_ERROR, v108, buf, v110);
            }
            goto LABEL_160;
          }
        }
        uint64_t v39 = v132;
        float v40 = (int *)v126;
        uint64_t v41 = (int *)__p;
        do
        {
          int v42 = *(_DWORD *)v39++;
          *(_DWORD *)(v37 - 128) = v42;
          int v43 = *v40++;
          *(_DWORD *)uint64_t v37 = v43;
          int v44 = *v41++;
          *(_DWORD *)(v37 + 128) = v44;
          v37 += 4;
          --v23;
        }
        while (v23);
LABEL_46:
        long long v125 = v38;
        operator delete(v38);
        goto LABEL_47;
      }
      uint64_t v107 = **(id **)(Phase::Logger::GetInstance(v8) + 384);
      if (os_log_type_enabled(v107, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 136315394;
        *(void *)&uint8_t buf[4] = "CvmSpatialSubmixHelpers.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 348;
        unint64_t v108 = "%25s:%-5d Failed to create a cardioid directivity model.";
        uint64_t v109 = v107;
        uint32_t v110 = 18;
        goto LABEL_159;
      }
LABEL_160:
      int v7 = 0;
LABEL_161:
      uint64_t v105 = v123;
      if (v123) {
        goto LABEL_143;
      }
LABEL_144:
      std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::~__hash_table((uint64_t)v119);
      return v7;
    case 2u:
      unint64_t v47 = (Phase::Logger *)Phase::Geometry::DirectivityFactory::Create(a2 + 208, 2u, (uint64_t)v119, &v117);
      if (!v117)
      {
        int v100 = **(id **)(Phase::Logger::GetInstance(v47) + 384);
        if (os_log_type_enabled(v100, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 136315394;
          *(void *)&uint8_t buf[4] = "CvmSpatialSubmixHelpers.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 396;
          long long v101 = "%25s:%-5d Failed to create a cardioid directivity model.";
          uint64_t v102 = v100;
          uint32_t v103 = 18;
          goto LABEL_151;
        }
LABEL_152:
        int v7 = 0;
        goto LABEL_153;
      }
      uint64_t v116 = a2;
      uint64_t v48 = **(void **)(v117 + 40);
      uint64_t v49 = *((unsigned int *)a1 + 2);
      *(_OWORD *)(v48 + 124) = 0u;
      *(_OWORD *)(v48 + 96) = 0u;
      *(_OWORD *)(v48 + 112) = 0u;
      *(_OWORD *)(v48 + 64) = 0u;
      *(_OWORD *)(v48 + 80) = 0u;
      *(_OWORD *)(v48 + 32) = 0u;
      *(_OWORD *)(v48 + 48) = 0u;
      *(_OWORD *)(v48 + 16) = 0u;
      *(_DWORD *)(v48 + 140) = v49;
      *(_OWORD *)(v48 + 144) = 0u;
      *(_OWORD *)(v48 + 160) = 0u;
      *(_OWORD *)(v48 + 176) = 0u;
      *(_OWORD *)(v48 + 192) = 0u;
      *(_OWORD *)(v48 + 208) = 0u;
      *(_OWORD *)(v48 + 224) = 0u;
      *(_OWORD *)(v48 + 240) = 0u;
      *(_OWORD *)(v48 + 252) = 0u;
      *(_DWORD *)(v48 + 268) = v49;
      uint64_t v50 = (float *)(v48 + 272);
      *(_OWORD *)(v48 + 380) = 0u;
      *(_OWORD *)(v48 + 352) = 0u;
      *(_OWORD *)(v48 + 368) = 0u;
      *(_OWORD *)(v48 + 320) = 0u;
      *(_OWORD *)(v48 + 336) = 0u;
      *(_OWORD *)(v48 + 288) = 0u;
      *(_OWORD *)(v48 + 304) = 0u;
      *(_OWORD *)(v48 + 272) = 0u;
      *(_DWORD *)(v48 + 396) = v49;
      *(_OWORD *)(v48 + 508) = 0u;
      *(_OWORD *)(v48 + 480) = 0u;
      *(_OWORD *)(v48 + 496) = 0u;
      *(_OWORD *)(v48 + 448) = 0u;
      *(_OWORD *)(v48 + 464) = 0u;
      *(_OWORD *)(v48 + 416) = 0u;
      *(_OWORD *)(v48 + 432) = 0u;
      *(_OWORD *)(v48 + 400) = 0u;
      *(_DWORD *)(v48 + 524) = v49;
      if (!v49) {
        goto LABEL_85;
      }
      uint64_t v51 = (double *)(a1 + 40);
      break;
    case 3u:
      long long v96 = (Phase::Logger *)Phase::Geometry::DirectivityFactory::Create(a2 + 208, 3u, 0, &v132);
      if (v132)
      {
        uint64_t v97 = (Phase::Geometry::SphericalCapDirectivity *)**((void **)v132 + 5);
        *((_OWORD *)v97 + 1) = *(_OWORD *)(a1 + 8);
        Phase::Geometry::SphericalCapDirectivity::InitializeSubbandGainsDatabase(v97);
      }
      unint64_t v104 = **(id **)(Phase::Logger::GetInstance(v96) + 384);
      if (os_log_type_enabled(v104, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 136315394;
        *(void *)&uint8_t buf[4] = "CvmSpatialSubmixHelpers.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 439;
        _os_log_impl(&dword_221E5E000, v104, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to create a spherical cap directivity model.", buf, 0x12u);
      }
      int v7 = 0;
      uint64_t v105 = (std::__shared_weak_count *)v133;
      if (v133) {
LABEL_143:
      }
        std::__shared_weak_count::__release_shared[abi:ne180100](v105);
      goto LABEL_144;
    default:
      int v98 = **(id **)(Phase::Logger::GetInstance(v6) + 384);
      if (os_log_type_enabled(v98, OS_LOG_TYPE_ERROR))
      {
        int v99 = *a1;
        *(_DWORD *)std::string buf = 136315650;
        *(void *)&uint8_t buf[4] = "CvmSpatialSubmixHelpers.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 448;
        __int16 v135 = 1024;
        LODWORD(v136) = v99;
        _os_log_impl(&dword_221E5E000, v98, OS_LOG_TYPE_ERROR, "%25s:%-5d unhandled distance model type: %hhu", buf, 0x18u);
      }
      int v7 = 0;
      goto LABEL_144;
  }
  while (1)
  {
    double v52 = *(v51 - 3);
    float v53 = v52;
    if (v53 > 3.4028e38) {
      float v53 = 3.4028e38;
    }
    if (v52 >= -3.40282347e38) {
      float v54 = v53;
    }
    else {
      float v54 = -3.4028e38;
    }
    *(v50 - 64) = v54;
    double v55 = *(v51 - 2) * 0.0174532925;
    if (v55 >= -3.40282347e38)
    {
      float v57 = v55;
      if (v57 <= 3.4028e38) {
        goto LABEL_74;
      }
      int v56 = 2139095039;
    }
    else
    {
      int v56 = -8388609;
    }
    float v57 = *(float *)&v56;
LABEL_74:
    *(v50 - 32) = v57;
    double v58 = *(v51 - 1) * 0.0174532925;
    if (v58 >= -3.40282347e38)
    {
      float v60 = v58;
      if (v60 <= 3.4028e38) {
        goto LABEL_79;
      }
      int v59 = 2139095039;
    }
    else
    {
      int v59 = -8388609;
    }
    float v60 = *(float *)&v59;
LABEL_79:
    float *v50 = v60;
    if (*v51 < -3.40282347e38)
    {
      int v61 = -8388609;
LABEL_83:
      float v62 = *(float *)&v61;
      goto LABEL_84;
    }
    float v62 = *v51;
    if (v62 > 3.4028e38)
    {
      int v61 = 2139095039;
      goto LABEL_83;
    }
LABEL_84:
    v50[32] = v62;
    ++v50;
    v51 += 4;
    if (!--v49)
    {
LABEL_85:
      uint64_t v63 = 1;
      while (1)
      {
        uint64_t v64 = *(void *)(*(void *)(v117 + 40) + 40 * v63);
        unint64_t v65 = qword_2220A53A8[v63 - 1];
        sGetFrequencies((uint64_t)&v132, v65);
        unint64_t v66 = *((unsigned int *)a1 + 2);
        std::vector<float>::vector(buf, v66);
        std::vector<float>::vector(&v130, v66);
        std::vector<float>::vector(&v128, v66);
        std::vector<float>::vector(&v126, v66);
        if (v66)
        {
          uint64_t v67 = *(float **)buf;
          uint64_t v68 = (float *)v130;
          uint64_t v69 = (float *)v128;
          long long v70 = (double *)(a1 + 24);
          int v71 = (float *)v126;
          do
          {
            double v72 = *(v70 - 1);
            float v73 = v72;
            if (v73 > 3.4028e38) {
              float v73 = 3.4028e38;
            }
            if (v72 >= -3.40282347e38) {
              float v74 = v73;
            }
            else {
              float v74 = -3.4028e38;
            }
            *uint64_t v67 = v74;
            double v75 = *v70 * 0.0174532925;
            if (v75 >= -3.40282347e38)
            {
              float v77 = v75;
              if (v77 <= 3.4028e38) {
                goto LABEL_98;
              }
              int v76 = 2139095039;
            }
            else
            {
              int v76 = -8388609;
            }
            float v77 = *(float *)&v76;
LABEL_98:
            *uint64_t v68 = v77;
            double v78 = v70[1] * 0.0174532925;
            if (v78 >= -3.40282347e38)
            {
              float v80 = v78;
              if (v80 <= 3.4028e38) {
                goto LABEL_103;
              }
              int v79 = 2139095039;
            }
            else
            {
              int v79 = -8388609;
            }
            float v80 = *(float *)&v79;
LABEL_103:
            *uint64_t v69 = v80;
            double v81 = v70[2];
            if (v81 < -3.40282347e38)
            {
              int v82 = -8388609;
LABEL_107:
              float v83 = *(float *)&v82;
              goto LABEL_108;
            }
            float v83 = v81;
            if (v83 > 3.4028e38)
            {
              int v82 = 2139095039;
              goto LABEL_107;
            }
LABEL_108:
            *v71++ = v83;
            ++v67;
            ++v69;
            v70 += 4;
            ++v68;
            --v66;
          }
          while (v66);
        }
        std::vector<float>::vector(&__p, v65);
        std::vector<float>::vector(&v122, v65);
        std::vector<float>::vector(v121, v65);
        Phase::GetValuesFromFrequencyResponse<std::__wrap_iter<float *>,std::__wrap_iter<float *>,std::__wrap_iter<float const*>,std::__wrap_iter<float *>,&float Phase::Identity<float>,&float Phase::Identity<float>>(*(float **)buf, *(float **)&buf[8], (uint64_t)v130, (uint64_t)v131, v132, (float *)v133, (uint64_t)__p);
        Phase::GetValuesFromFrequencyResponse<std::__wrap_iter<float *>,std::__wrap_iter<float *>,std::__wrap_iter<float const*>,std::__wrap_iter<float *>,&float Phase::Identity<float>,&float Phase::Identity<float>>(*(float **)buf, *(float **)&buf[8], (uint64_t)v128, (uint64_t)v129, v132, (float *)v133, (uint64_t)v122);
        Phase::GetValuesFromFrequencyResponse<std::__wrap_iter<float *>,std::__wrap_iter<float *>,std::__wrap_iter<float const*>,std::__wrap_iter<float *>,&float Phase::Square<float>,&float Phase::SquareRoot<float>>(*(float **)buf, *(float **)&buf[8], (uint64_t)v126, (uint64_t)v127, v132, (float *)v133, (uint64_t)v121[0]);
        *(_OWORD *)(v64 + 124) = 0u;
        *(_OWORD *)(v64 + 96) = 0u;
        *(_OWORD *)(v64 + 112) = 0u;
        *(_OWORD *)(v64 + 64) = 0u;
        *(_OWORD *)(v64 + 80) = 0u;
        *(_OWORD *)(v64 + 32) = 0u;
        *(_OWORD *)(v64 + 48) = 0u;
        *(_OWORD *)(v64 + 16) = 0u;
        *(_DWORD *)(v64 + 140) = v65;
        *(_OWORD *)(v64 + 144) = 0u;
        *(_OWORD *)(v64 + 160) = 0u;
        *(_OWORD *)(v64 + 176) = 0u;
        *(_OWORD *)(v64 + 192) = 0u;
        *(_OWORD *)(v64 + 208) = 0u;
        *(_OWORD *)(v64 + 224) = 0u;
        *(_OWORD *)(v64 + 240) = 0u;
        *(_OWORD *)(v64 + 252) = 0u;
        *(_DWORD *)(v64 + 268) = v65;
        uint64_t v84 = (_DWORD *)(v64 + 272);
        *(_OWORD *)(v64 + 380) = 0u;
        *(_OWORD *)(v64 + 352) = 0u;
        *(_OWORD *)(v64 + 368) = 0u;
        *(_OWORD *)(v64 + 320) = 0u;
        *(_OWORD *)(v64 + 336) = 0u;
        *(_OWORD *)(v64 + 288) = 0u;
        *(_OWORD *)(v64 + 304) = 0u;
        *(_OWORD *)(v64 + 272) = 0u;
        *(_DWORD *)(v64 + 396) = v65;
        *(_OWORD *)(v64 + 508) = 0u;
        *(_OWORD *)(v64 + 480) = 0u;
        *(_OWORD *)(v64 + 496) = 0u;
        *(_OWORD *)(v64 + 448) = 0u;
        *(_OWORD *)(v64 + 464) = 0u;
        *(_OWORD *)(v64 + 416) = 0u;
        *(_OWORD *)(v64 + 432) = 0u;
        *(_OWORD *)(v64 + 400) = 0u;
        *(_DWORD *)(v64 + 524) = v65;
        int v85 = v121[0];
        if (v65) {
          break;
        }
        if (v121[0]) {
          goto LABEL_114;
        }
LABEL_115:
        if (v122)
        {
          char v123 = (std::__shared_weak_count *)v122;
          operator delete(v122);
        }
        if (__p)
        {
          long long v125 = __p;
          operator delete(__p);
        }
        if (v126)
        {
          long long v127 = v126;
          operator delete(v126);
        }
        if (v128)
        {
          long long v129 = v128;
          operator delete(v128);
        }
        if (v130)
        {
          uint64_t v131 = v130;
          operator delete(v130);
        }
        if (*(void *)buf)
        {
          *(void *)&buf[8] = *(void *)buf;
          operator delete(*(void **)buf);
        }
        if (v132)
        {
          uint64_t v133 = (uint64_t)v132;
          operator delete(v132);
        }
        if (++v63 == 4)
        {
          unint64_t v94 = (Phase::Logger *)Phase::Geometry::SystemScheduler::AddToDatabase(v116 + 2352, &v117);
          int v7 = v94;
          if (v94)
          {
            int64x2_t v95 = **(id **)(Phase::Logger::GetInstance(v94) + 384);
            if (os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)std::string buf = 136315650;
              *(void *)&uint8_t buf[4] = "CvmSpatialSubmixHelpers.mm";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 385;
              __int16 v135 = 2048;
              unsigned int v136 = (const char *)v7;
              _os_log_impl(&dword_221E5E000, v95, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Creating geometry Directivity: 0x%llx", buf, 0x1Cu);
            }
LABEL_153:
            uint64_t v105 = v118;
            if (v118) {
              goto LABEL_143;
            }
            goto LABEL_144;
          }
          uint64_t v111 = **(id **)(Phase::Logger::GetInstance(0) + 384);
          if (os_log_type_enabled(v111, OS_LOG_TYPE_ERROR))
          {
            uint64_t v112 = "source";
            *(void *)&uint8_t buf[4] = "CvmSpatialSubmixHelpers.mm";
            *(_DWORD *)std::string buf = 136315650;
            if (a3) {
              uint64_t v112 = "listener";
            }
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 391;
            __int16 v135 = 2080;
            unsigned int v136 = v112;
            long long v101 = "%25s:%-5d Failed to add %s directivity model to geometry layer database.";
            uint64_t v102 = v111;
            uint32_t v103 = 28;
LABEL_151:
            _os_log_impl(&dword_221E5E000, v102, OS_LOG_TYPE_ERROR, v101, buf, v103);
          }
          goto LABEL_152;
        }
      }
      uint64_t v86 = v132;
      uint64_t v87 = (int *)__p;
      uint64_t v88 = (int *)v121[0];
      uint64_t v89 = (int *)v122;
      do
      {
        int v90 = *(_DWORD *)v86++;
        *(v84 - 64) = v90;
        int v91 = *v87++;
        *(v84 - 32) = v91;
        int v92 = *v89++;
        *uint64_t v84 = v92;
        int v93 = *v88++;
        v84[32] = v93;
        ++v84;
        --v65;
      }
      while (v65);
LABEL_114:
      v121[1] = v85;
      operator delete(v85);
      goto LABEL_115;
    }
  }
}

void sub_221ED0680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  int v7 = *(std::__shared_weak_count **)(v5 - 192);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_221ED0720(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x221ED01ACLL);
  }
  JUMPOUT(0x221ED0718);
}

void Phase::Geometry::SphericalCapDirectivity::InitializeSubbandGainsDatabase(Phase::Geometry::SphericalCapDirectivity *this)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  double v2 = *((double *)this + 3);
  long long v7 = xmmword_2220A5370;
  uint64_t v8 = 12;
  uint64_t v6 = 0x3F99999A43AB8000;
  Phase::Zeppelin::HorizontalSliceDatabaseContext::HorizontalSliceDatabaseContext((Phase::Zeppelin::HorizontalSliceDatabaseContext *)&v3);
  Phase::Zeppelin::ScsRadiationContext::ScsRadiationContext((uint64_t)v9, 0xCu, 1, *((double *)this + 2), v2 * 0.0174532925 * 0.5);
  long long v7 = *(_OWORD *)v9;
  uint64_t v8 = *(void *)&v9[16];
  Phase::Zeppelin::PropagationMediumContext::PropagationMediumContext((float *)v9, 343.0, 1.2);
  uint64_t v6 = *(void *)v9;
  Phase::Zeppelin::HorizontalSliceDatabaseContext::HorizontalSliceDatabaseContext((Phase::Zeppelin::HorizontalSliceDatabaseContext *)v9, 61, Phase::sThirdOctaveBandFrequencies, 0x1FuLL);
  int v3 = *(_DWORD *)v9;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  *(_OWORD *)std::string __p = *(_OWORD *)&v9[8];
  uint64_t v5 = v10;
  operator new();
}

void std::vector<Phase::Envelope<float>::SegmentInternal,std::allocator<Phase::Envelope<float>::SegmentInternal>>::__vdeallocate(void **a1)
{
  uint64_t v1 = (char *)*a1;
  if (*a1)
  {
    int v3 = (char *)a1[1];
    uint8x8_t v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        uint64_t v5 = v3 - 48;
        std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100]((void *)v3 - 4);
        int v3 = v5;
      }
      while (v5 != v1);
      uint8x8_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::vector<Phase::Envelope<float>::SegmentInternal,std::allocator<Phase::Envelope<float>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  double v2 = (char *)**a1;
  if (v2)
  {
    uint8x8_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = v4 - 48;
        std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100]((void *)v4 - 4);
        uint8x8_t v4 = v6;
      }
      while (v6 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

double sGetFrequencies(uint64_t a1, unint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  switch(a2)
  {
    case 0x1FuLL:
      uint8x8_t v4 = (char *)Phase::sThirdOctaveBandFrequencies;
      uint64_t v5 = &qword_2220A5470;
      goto LABEL_7;
    case 0xAuLL:
      uint8x8_t v4 = (char *)&Phase::sOctaveBandFrequencies;
      uint64_t v5 = (uint64_t *)Phase::sThirdOctaveBandFrequencies;
      goto LABEL_7;
    case 3uLL:
      uint8x8_t v4 = (char *)&Phase::sThreeBandFrequencies;
      uint64_t v5 = (uint64_t *)&Phase::sOctaveBandFrequencies;
LABEL_7:
      std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)a1, v4, (uint64_t)v5, a2);
      long long v7 = *(float **)a1;
      double v8 = *(double *)(a1 + 8);
      goto LABEL_9;
  }
  Phase::GenerateLogarithmicSeries<float>(a2, &v9, 20.0, 20000.0);
  long long v7 = v9;
  *(void *)a1 = v9;
  double result = *(double *)&v10;
  *(_OWORD *)(a1 + 8) = v10;
  double v8 = result;
LABEL_9:
  if (v7 == *(float **)&v8) {
    std::terminate();
  }
  return result;
}

{
  char *v4;
  void *v5;
  double result;
  float *v7;
  double v8;
  float *v9;
  long long v10;

  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  switch(a2)
  {
    case 0x1FuLL:
      uint8x8_t v4 = (char *)&Phase::sThirdOctaveBandFrequencies;
      uint64_t v5 = &std::__any_imp::__unique_typeinfo<Phase::Controller::ListenerManager *>::__id;
      goto LABEL_7;
    case 0xAuLL:
      uint8x8_t v4 = (char *)&Phase::sOctaveBandFrequencies;
      uint64_t v5 = &Phase::sThirdOctaveBandFrequencies;
      goto LABEL_7;
    case 3uLL:
      uint8x8_t v4 = (char *)&Phase::sThreeBandFrequencies;
      uint64_t v5 = &Phase::sOctaveBandFrequencies;
LABEL_7:
      std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)a1, v4, (uint64_t)v5, a2);
      long long v7 = *(float **)a1;
      double v8 = *(double *)(a1 + 8);
      goto LABEL_9;
  }
  Phase::GenerateLogarithmicSeries<float>(a2, &v9, 20.0, 20000.0);
  long long v7 = v9;
  *(void *)a1 = v9;
  double result = *(double *)&v10;
  *(_OWORD *)(a1 + 8) = v10;
  double v8 = result;
LABEL_9:
  if (v7 == *(float **)&v8) {
    std::terminate();
  }
  return result;
}

{
  char *v4;
  uint64_t *v5;
  double result;
  float *v7;
  double v8;
  float *v9;
  long long v10;

  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  switch(a2)
  {
    case 0x1FuLL:
      uint8x8_t v4 = (char *)&Phase::sThirdOctaveBandFrequencies;
      uint64_t v5 = &qword_2220E7900;
      goto LABEL_7;
    case 0xAuLL:
      uint8x8_t v4 = (char *)&Phase::sOctaveBandFrequencies;
      uint64_t v5 = (uint64_t *)&Phase::sThirdOctaveBandFrequencies;
      goto LABEL_7;
    case 3uLL:
      uint8x8_t v4 = (char *)&Phase::sThreeBandFrequencies;
      uint64_t v5 = (uint64_t *)&Phase::sOctaveBandFrequencies;
LABEL_7:
      std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)a1, v4, (uint64_t)v5, a2);
      long long v7 = *(float **)a1;
      double v8 = *(double *)(a1 + 8);
      goto LABEL_9;
  }
  Phase::GenerateLogarithmicSeries<float>(a2, &v9, 20.0, 20000.0);
  long long v7 = v9;
  *(void *)a1 = v9;
  double result = *(double *)&v10;
  *(_OWORD *)(a1 + 8) = v10;
  double v8 = result;
LABEL_9:
  if (v7 == *(float **)&v8) {
    std::terminate();
  }
  return result;
}

void sub_221ED1034(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void Phase::GetValuesFromFrequencyResponse<std::__wrap_iter<float *>,std::__wrap_iter<float *>,std::__wrap_iter<float const*>,std::__wrap_iter<float *>,&float Phase::Identity<float>,&float Phase::Identity<float>>(float *a1, float *a2, uint64_t a3, uint64_t a4, float *a5, float *a6, uint64_t a7)
{
  uint64_t v10 = (char *)a2 - (char *)a1;
  if (a2 != a1)
  {
    for (unsigned __int32 i = a1 + 1; i != a2; ++i)
    {
      float v13 = *(i - 1);
      float v12 = *i;
      if (v12 < v13) {
        __assert_rtn("GetValuesFromFrequencyResponse", "FrequencyResponse.hpp", 262, "std::is_sorted(inFrequenciesFirst, inFrequenciesLast)");
      }
    }
  }
  if (a5 != a6)
  {
    for (uint64_t j = a5 + 1; j != a6; ++j)
    {
      float v16 = *(j - 1);
      float v15 = *j;
      if (v15 < v16) {
        __assert_rtn("GetValuesFromFrequencyResponse", "FrequencyResponse.hpp", 263, "std::is_sorted(inOutputFrequenciesFirst, inOutputFrequenciesLast)");
      }
    }
  }
  Phase::GetBandsFromCenterFrequencies<std::__wrap_iter<float *>,float>(a1, a2, (float **)v88, 22000.0);
  Phase::GetBandsFromCenterFrequencies<std::__wrap_iter<float const*>,float>(a5, a6, (float **)v87, 22000.0);
  std::string __p = 0;
  int v85 = 0;
  uint64_t v86 = 0;
  double v81 = 0;
  int v82 = 0;
  float v83 = 0;
  double v78 = 0;
  float v80 = 0;
  if ((char *)a6 - (char *)a5 > 0)
  {
    float v17 = 0;
    float v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    uint64_t v21 = a6 - a5;
    uint64_t v22 = v10 >> 2;
    uint64_t v23 = (v10 >> 2) - 1;
    if (v21 <= 1) {
      uint64_t v21 = 1;
    }
    uint64_t v76 = v21;
    do
    {
      unint64_t v24 = (float *)((char *)v87[0] + 8 * v20);
      float v25 = *v24;
      float v26 = v24[1];
      int v85 = (float *)__p;
      int v82 = v18;
      int v79 = v17;
      if (v19 < v22)
      {
        double v27 = (float *)((char *)v88[0] + 8 * v19);
        float v28 = *v27;
        float v29 = v27[1];
        if (v26 < v29) {
          float v29 = v26;
        }
        if (v28 >= v25) {
          float v30 = *v27;
        }
        else {
          float v30 = v25;
        }
        float v31 = fmaxf(v29 - v30, 0.0);
        float v32 = v26;
        uint64_t v33 = v19;
        if (v31 == 0.0)
        {
LABEL_62:
          v19 -= v28 != v32;
        }
        else
        {
          while (1)
          {
            float v34 = v85;
            if (v85 >= v86)
            {
              float v36 = (float *)__p;
              uint64_t v37 = ((char *)v85 - (unsigned char *)__p) >> 2;
              unint64_t v38 = v37 + 1;
              if ((unint64_t)(v37 + 1) >> 62) {
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v39 = (char *)v86 - (unsigned char *)__p;
              if (((char *)v86 - (unsigned char *)__p) >> 1 > v38) {
                unint64_t v38 = v39 >> 1;
              }
              if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v40 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v40 = v38;
              }
              if (v40)
              {
                uint64_t v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v86, v40);
                float v36 = (float *)__p;
                float v34 = v85;
              }
              else
              {
                uint64_t v41 = 0;
              }
              int v42 = (float *)&v41[4 * v37];
              *int v42 = v31;
              int v35 = v42 + 1;
              while (v34 != v36)
              {
                int v43 = *((_DWORD *)v34-- - 1);
                *((_DWORD *)v42-- - 1) = v43;
              }
              std::string __p = v42;
              int v85 = v35;
              uint64_t v86 = (float *)&v41[4 * v40];
              if (v36) {
                operator delete(v36);
              }
            }
            else
            {
              float *v85 = v31;
              int v35 = v34 + 1;
            }
            int v85 = v35;
            int v44 = v82;
            if (v82 >= v83)
            {
              unint64_t v45 = (char *)v81;
              uint64_t v46 = (v82 - (unsigned char *)v81) >> 3;
              unint64_t v47 = v46 + 1;
              if ((unint64_t)(v46 + 1) >> 61) {
                std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v48 = v83 - (unsigned char *)v81;
              if ((v83 - (unsigned char *)v81) >> 2 > v47) {
                unint64_t v47 = v48 >> 2;
              }
              if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v49 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v49 = v47;
              }
              if (v49)
              {
                uint64_t v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)&v83, v49);
                unint64_t v45 = (char *)v81;
                int v44 = v82;
              }
              else
              {
                uint64_t v50 = 0;
              }
              uint64_t v51 = (uint64_t *)&v50[8 * v46];
              *uint64_t v51 = v19;
              float v18 = (char *)(v51 + 1);
              while (v44 != v45)
              {
                uint64_t v52 = *((void *)v44 - 1);
                v44 -= 8;
                *--uint64_t v51 = v52;
              }
              double v81 = v51;
              int v82 = v18;
              float v83 = &v50[8 * v49];
              if (v45) {
                operator delete(v45);
              }
            }
            else
            {
              *(void *)int v82 = v19;
              float v18 = v44 + 8;
            }
            int v82 = v18;
            if (v19 == v23) {
              uint64_t v33 = v19;
            }
            if (++v19 == v22) {
              break;
            }
            float v53 = (float *)((char *)v88[0] + 8 * v19);
            float v28 = *v53;
            float v54 = v53[1];
            double v55 = (float *)((char *)v87[0] + 8 * v20);
            float v56 = *v55;
            float v32 = v55[1];
            if (v32 < v54) {
              float v54 = v55[1];
            }
            if (v28 >= v56) {
              float v56 = v28;
            }
            float v31 = fmaxf(v54 - v56, 0.0);
            if (v31 == 0.0) {
              goto LABEL_62;
            }
          }
          uint64_t v19 = v33;
        }
      }
      float v57 = v79;
      if (v18 == v81)
      {
        float v60 = 0.0;
      }
      else
      {
        unint64_t v58 = 0;
        float v59 = v26 - v25;
        float v60 = 0.0;
        int v61 = v79;
        float v18 = (char *)v81;
        do
        {
          float v62 = *((float *)__p + v58) / v59;
          float v63 = v62 * *(float *)(a3 + 4 * *(void *)&v18[8 * v58]);
          if (v61 >= v80)
          {
            uint64_t v64 = v78;
            uint64_t v65 = v61 - v78;
            unint64_t v66 = v65 + 1;
            if ((unint64_t)(v65 + 1) >> 62) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v67 = (char *)v80 - (char *)v78;
            if (((char *)v80 - (char *)v78) >> 1 > v66) {
              unint64_t v66 = v67 >> 1;
            }
            if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v68 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v68 = v66;
            }
            if (v68)
            {
              uint64_t v69 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v80, v68);
              uint64_t v64 = v78;
              int v61 = v79;
            }
            else
            {
              uint64_t v69 = 0;
            }
            long long v70 = (float *)&v69[4 * v65];
            float *v70 = v63;
            float v57 = v70 + 1;
            while (v61 != v64)
            {
              int v71 = *((_DWORD *)v61-- - 1);
              *((_DWORD *)v70-- - 1) = v71;
            }
            double v78 = v70;
            float v80 = (float *)&v69[4 * v68];
            if (v64) {
              operator delete(v64);
            }
          }
          else
          {
            *int v61 = v63;
            float v57 = v61 + 1;
          }
          float v60 = v60 + v62;
          int v79 = v57;
          ++v58;
          float v18 = (char *)v81;
          int v61 = v57;
        }
        while (v58 < (v82 - (unsigned char *)v81) >> 3);
      }
      float v17 = v78;
      double v72 = 0.0;
      if (v78 != v57)
      {
        float v73 = v78;
        do
        {
          float v74 = *v73++;
          double v72 = v72 + v74;
        }
        while (v73 != v57);
      }
      float v75 = v72;
      uint64_t v23 = (v10 >> 2) - 1;
      *(float *)(a7 + 4 * v20++) = v75 / v60;
    }
    while (v20 != v76);
    if (v78)
    {
      operator delete(v78);
      float v18 = (char *)v81;
    }
    if (v18)
    {
      int v82 = v18;
      operator delete(v18);
    }
  }
  if (__p)
  {
    int v85 = (float *)__p;
    operator delete(__p);
  }
  if (v87[0])
  {
    v87[1] = v87[0];
    operator delete(v87[0]);
  }
  if (v88[0])
  {
    v88[1] = v88[0];
    operator delete(v88[0]);
  }
}

void sub_221ED1594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *Phase::GenerateLogarithmicSeries<float>@<X0>(unint64_t a1@<X0>, float **a2@<X8>, float a3@<S0>, float a4@<S1>)
{
  unint64_t v4 = a1;
  float v5 = a3;
  float v7 = 1.0 / (float)((float)a1 + -1.0);
  float v8 = log10f(a4 / a3);
  float v9 = expf((float)(v8 * v7) * 2.3026);
  double result = std::vector<float>::vector(a2, v4);
  if (v4)
  {
    uint64_t v11 = *a2;
    do
    {
      *v11++ = v5;
      float v5 = v9 * v5;
      --v4;
    }
    while (v4);
  }
  return result;
}

char *std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  float v7 = result;
  uint64_t v8 = *((void *)result + 2);
  float v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 2)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      void v7[2] = 0;
    }
    if (a4 >> 62) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    double result = std::vector<float>::__vallocate[abi:ne180100](v7, v11);
    float v13 = (char *)v7[1];
    float v12 = (void **)(v7 + 1);
    float v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      float v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  float v12 = (void **)(result + 8);
  float v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 2;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  float v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    double result = (char *)memmove(*(void **)result, __src, v14 - v9);
    float v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    float v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    double result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *float v12 = &v9[v17];
  return result;
}

Phase::Logger *Phase::GetBandsFromCenterFrequencies<std::__wrap_iter<float *>,float>@<X0>(float *a1@<X0>, float *a2@<X1>, float **a3@<X8>, float a4@<S0>)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  uint64_t v8 = (char *)a2 - (char *)a1;
  int64_t v9 = a2 - a1;
  *(void *)uint64_t v41 = 0;
  double result = (Phase::Logger *)std::vector<Phase::FrequencyBand<float>>::vector(a3, v9, v41);
  unint64_t v11 = *a3;
  **a3 = 10.0;
  if (v9 == 31)
  {
    if (a1 == a2)
    {
      BOOL v15 = 0;
      BOOL v17 = 1;
      goto LABEL_21;
    }
    float v18 = a1 + 1;
    uint64_t v19 = (float *)&Phase::sThirdOctaveBandFrequencies;
    do
    {
      float v20 = *v19++;
      BOOL v17 = *(v18 - 1) == v20;
      BOOL v21 = *(v18 - 1) != v20 || v18 == a2;
      ++v18;
    }
    while (!v21);
LABEL_20:
    BOOL v15 = 0;
    goto LABEL_21;
  }
  if (v9 != 10)
  {
    BOOL v17 = 0;
    goto LABEL_20;
  }
  if (a1 == a2)
  {
    BOOL v17 = 0;
    BOOL v15 = 1;
  }
  else
  {
    float v12 = a1 + 1;
    float v13 = (float *)&Phase::sOctaveBandFrequencies;
    do
    {
      float v14 = *v13++;
      BOOL v15 = *(v12 - 1) == v14;
      BOOL v16 = *(v12 - 1) != v14 || v12 == a2;
      ++v12;
    }
    while (!v16);
    BOOL v17 = 0;
  }
LABEL_21:
  if (v8 >= 1)
  {
    int64_t v22 = 0;
    int64_t v23 = v9 - 1;
    if (v9 <= 1) {
      uint64_t v24 = 1;
    }
    else {
      uint64_t v24 = v9;
    }
    float v25 = v11 + 2;
    float v26 = a1;
    do
    {
      float v27 = *v26;
      if (v15)
      {
        float v28 = v27 + (float)((float)(v27 / 1.4142) * 0.5);
        if (v28 >= a4) {
          float v28 = a4;
        }
        float v29 = 20.363;
      }
      else if (v17)
      {
        float v28 = v27 + (float)((float)(v27 / 4.2426) * 0.5);
        if (v28 >= a4) {
          float v28 = a4;
        }
        float v29 = 17.643;
      }
      else
      {
        if ((LODWORD(v27) & 0x7FFFFFFFu) >= 0x7F800000)
        {
          float v31 = **(id **)(Phase::Logger::GetInstance(result) + 1136);
          if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
          {
            double v32 = *v26;
            *(_DWORD *)uint64_t v41 = 136315650;
            *(void *)&v41[4] = "FrequencyResponse.hpp";
            __int16 v42 = 1024;
            int v43 = 99;
            __int16 v44 = 2048;
            double v45 = v32;
            _os_log_impl(&dword_221E5E000, v31, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [!std::isfinite(inFrequenciesFirst[i]) is true]: \"GetBandsFromCenterFrequencies: bad center frequency: %fHz\"", v41, 0x1Cu);
          }
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "GetBandsFromCenterFrequencies: bad center frequency: %fHz");
LABEL_60:
          exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
        }
        if (v27 < 10.0)
        {
          float v36 = **(id **)(Phase::Logger::GetInstance(result) + 1136);
          if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
          {
            double v37 = *v26;
            *(_DWORD *)uint64_t v41 = 136315906;
            *(void *)&v41[4] = "FrequencyResponse.hpp";
            __int16 v42 = 1024;
            int v43 = 103;
            __int16 v44 = 2048;
            double v45 = v37;
            __int16 v46 = 2048;
            double v47 = 10.0;
            _os_log_impl(&dword_221E5E000, v36, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [inFrequenciesFirst[i] < lowestSupportedFreqInHz is true]: \"GetBandsFromCenterFrequencies: center frequency: %fHz cannot be below lowest supported frequency: %fHz\"", v41, 0x26u);
          }
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "GetBandsFromCenterFrequencies: center frequency: %fHz cannot be below lowest supported frequency: %fHz");
          goto LABEL_60;
        }
        if (v27 > a4)
        {
          float v34 = **(id **)(Phase::Logger::GetInstance(result) + 1136);
          if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
          {
            double v35 = *v26;
            *(_DWORD *)uint64_t v41 = 136315906;
            *(void *)&v41[4] = "FrequencyResponse.hpp";
            __int16 v42 = 1024;
            int v43 = 107;
            __int16 v44 = 2048;
            double v45 = v35;
            __int16 v46 = 2048;
            double v47 = a4;
            _os_log_impl(&dword_221E5E000, v34, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [inFrequenciesFirst[i] > highestSupportedFreqInHz is true]: \"GetBandsFromCenterFrequencies: center frequency: %fHz cannot be above highest supported frequency: %fHz\"", v41, 0x26u);
          }
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "GetBandsFromCenterFrequencies: center frequency: %fHz cannot be above highest supported frequency: %fHz");
          goto LABEL_60;
        }
        if (v22)
        {
          uint64_t v30 = (v22 - 1);
          if (a1[v30] >= v27)
          {
            unint64_t v38 = **(id **)(Phase::Logger::GetInstance(result) + 1136);
            if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
            {
              double v39 = a1[v30];
              double v40 = *v26;
              *(_DWORD *)uint64_t v41 = 136315906;
              *(void *)&v41[4] = "FrequencyResponse.hpp";
              __int16 v42 = 1024;
              int v43 = 111;
              __int16 v44 = 2048;
              double v45 = v39;
              __int16 v46 = 2048;
              double v47 = v40;
              _os_log_impl(&dword_221E5E000, v38, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [i > 0 && inFrequenciesFirst[i - 1] >= inFrequenciesFirst[i] is true]: \"GetBandsFromCenterFrequencies: center frequencies are not in ascending order. %fHz is before %fHz\"", v41, 0x26u);
            }
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(exception, "GetBandsFromCenterFrequencies: center frequencies are not in ascending order. %fHz is before %fHz");
            goto LABEL_60;
          }
        }
        float v29 = 10.0;
        if (v23 <= v22) {
          float v28 = a4;
        }
        else {
          float v28 = v27 * sqrtf(v26[1] / v27);
        }
      }
      *(v25 - 1) = v28;
      *unint64_t v11 = v29;
      if (v23 > v22) {
        float *v25 = v28;
      }
      ++v22;
      ++v26;
      v25 += 2;
    }
    while (v24 != v22);
  }
  return result;
}

void sub_221ED1CB4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  unint64_t v4 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

Phase::Logger *Phase::GetBandsFromCenterFrequencies<std::__wrap_iter<float const*>,float>@<X0>(float *a1@<X0>, float *a2@<X1>, float **a3@<X8>, float a4@<S0>)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  uint64_t v8 = (char *)a2 - (char *)a1;
  int64_t v9 = a2 - a1;
  *(void *)uint64_t v41 = 0;
  double result = (Phase::Logger *)std::vector<Phase::FrequencyBand<float>>::vector(a3, v9, v41);
  unint64_t v11 = *a3;
  **a3 = 10.0;
  if (v9 == 31)
  {
    if (a1 == a2)
    {
      BOOL v15 = 0;
      BOOL v17 = 1;
      goto LABEL_21;
    }
    float v18 = a1 + 1;
    uint64_t v19 = (float *)&Phase::sThirdOctaveBandFrequencies;
    do
    {
      float v20 = *v19++;
      BOOL v17 = *(v18 - 1) == v20;
      BOOL v21 = *(v18 - 1) != v20 || v18 == a2;
      ++v18;
    }
    while (!v21);
LABEL_20:
    BOOL v15 = 0;
    goto LABEL_21;
  }
  if (v9 != 10)
  {
    BOOL v17 = 0;
    goto LABEL_20;
  }
  if (a1 == a2)
  {
    BOOL v17 = 0;
    BOOL v15 = 1;
  }
  else
  {
    float v12 = a1 + 1;
    float v13 = (float *)&Phase::sOctaveBandFrequencies;
    do
    {
      float v14 = *v13++;
      BOOL v15 = *(v12 - 1) == v14;
      BOOL v16 = *(v12 - 1) != v14 || v12 == a2;
      ++v12;
    }
    while (!v16);
    BOOL v17 = 0;
  }
LABEL_21:
  if (v8 >= 1)
  {
    int64_t v22 = 0;
    int64_t v23 = v9 - 1;
    if (v9 <= 1) {
      uint64_t v24 = 1;
    }
    else {
      uint64_t v24 = v9;
    }
    float v25 = v11 + 2;
    float v26 = a1;
    do
    {
      float v27 = *v26;
      if (v15)
      {
        float v28 = v27 + (float)((float)(v27 / 1.4142) * 0.5);
        if (v28 >= a4) {
          float v28 = a4;
        }
        float v29 = 20.363;
      }
      else if (v17)
      {
        float v28 = v27 + (float)((float)(v27 / 4.2426) * 0.5);
        if (v28 >= a4) {
          float v28 = a4;
        }
        float v29 = 17.643;
      }
      else
      {
        if ((LODWORD(v27) & 0x7FFFFFFFu) >= 0x7F800000)
        {
          float v31 = **(id **)(Phase::Logger::GetInstance(result) + 1136);
          if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
          {
            double v32 = *v26;
            *(_DWORD *)uint64_t v41 = 136315650;
            *(void *)&v41[4] = "FrequencyResponse.hpp";
            __int16 v42 = 1024;
            int v43 = 99;
            __int16 v44 = 2048;
            double v45 = v32;
            _os_log_impl(&dword_221E5E000, v31, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [!std::isfinite(inFrequenciesFirst[i]) is true]: \"GetBandsFromCenterFrequencies: bad center frequency: %fHz\"", v41, 0x1Cu);
          }
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "GetBandsFromCenterFrequencies: bad center frequency: %fHz");
LABEL_60:
          exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
        }
        if (v27 < 10.0)
        {
          float v36 = **(id **)(Phase::Logger::GetInstance(result) + 1136);
          if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
          {
            double v37 = *v26;
            *(_DWORD *)uint64_t v41 = 136315906;
            *(void *)&v41[4] = "FrequencyResponse.hpp";
            __int16 v42 = 1024;
            int v43 = 103;
            __int16 v44 = 2048;
            double v45 = v37;
            __int16 v46 = 2048;
            double v47 = 10.0;
            _os_log_impl(&dword_221E5E000, v36, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [inFrequenciesFirst[i] < lowestSupportedFreqInHz is true]: \"GetBandsFromCenterFrequencies: center frequency: %fHz cannot be below lowest supported frequency: %fHz\"", v41, 0x26u);
          }
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "GetBandsFromCenterFrequencies: center frequency: %fHz cannot be below lowest supported frequency: %fHz");
          goto LABEL_60;
        }
        if (v27 > a4)
        {
          float v34 = **(id **)(Phase::Logger::GetInstance(result) + 1136);
          if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
          {
            double v35 = *v26;
            *(_DWORD *)uint64_t v41 = 136315906;
            *(void *)&v41[4] = "FrequencyResponse.hpp";
            __int16 v42 = 1024;
            int v43 = 107;
            __int16 v44 = 2048;
            double v45 = v35;
            __int16 v46 = 2048;
            double v47 = a4;
            _os_log_impl(&dword_221E5E000, v34, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [inFrequenciesFirst[i] > highestSupportedFreqInHz is true]: \"GetBandsFromCenterFrequencies: center frequency: %fHz cannot be above highest supported frequency: %fHz\"", v41, 0x26u);
          }
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "GetBandsFromCenterFrequencies: center frequency: %fHz cannot be above highest supported frequency: %fHz");
          goto LABEL_60;
        }
        if (v22)
        {
          uint64_t v30 = (v22 - 1);
          if (a1[v30] >= v27)
          {
            unint64_t v38 = **(id **)(Phase::Logger::GetInstance(result) + 1136);
            if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
            {
              double v39 = a1[v30];
              double v40 = *v26;
              *(_DWORD *)uint64_t v41 = 136315906;
              *(void *)&v41[4] = "FrequencyResponse.hpp";
              __int16 v42 = 1024;
              int v43 = 111;
              __int16 v44 = 2048;
              double v45 = v39;
              __int16 v46 = 2048;
              double v47 = v40;
              _os_log_impl(&dword_221E5E000, v38, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [i > 0 && inFrequenciesFirst[i - 1] >= inFrequenciesFirst[i] is true]: \"GetBandsFromCenterFrequencies: center frequencies are not in ascending order. %fHz is before %fHz\"", v41, 0x26u);
            }
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(exception, "GetBandsFromCenterFrequencies: center frequencies are not in ascending order. %fHz is before %fHz");
            goto LABEL_60;
          }
        }
        float v29 = 10.0;
        if (v23 <= v22) {
          float v28 = a4;
        }
        else {
          float v28 = v27 * sqrtf(v26[1] / v27);
        }
      }
      *(v25 - 1) = v28;
      *unint64_t v11 = v29;
      if (v23 > v22) {
        float *v25 = v28;
      }
      ++v22;
      ++v26;
      v25 += 2;
    }
    while (v24 != v22);
  }
  return result;
}

void sub_221ED2220(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  unint64_t v4 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

void *std::vector<Phase::FrequencyBand<float>>::vector(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<Phase::FrequencyBand<float>>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v6 = (void *)a1[1];
    float v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_221ED22D8(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<Phase::FrequencyBand<float>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
  }
  double result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void Phase::GetValuesFromFrequencyResponse<std::__wrap_iter<float *>,std::__wrap_iter<float *>,std::__wrap_iter<float const*>,std::__wrap_iter<float *>,&float Phase::Square<float>,&float Phase::SquareRoot<float>>(float *a1, float *a2, uint64_t a3, uint64_t a4, float *a5, float *a6, uint64_t a7)
{
  uint64_t v10 = (char *)a2 - (char *)a1;
  if (a2 != a1)
  {
    for (unsigned __int32 i = a1 + 1; i != a2; ++i)
    {
      float v13 = *(i - 1);
      float v12 = *i;
      if (v12 < v13) {
        __assert_rtn("GetValuesFromFrequencyResponse", "FrequencyResponse.hpp", 262, "std::is_sorted(inFrequenciesFirst, inFrequenciesLast)");
      }
    }
  }
  if (a5 != a6)
  {
    for (uint64_t j = a5 + 1; j != a6; ++j)
    {
      float v16 = *(j - 1);
      float v15 = *j;
      if (v15 < v16) {
        __assert_rtn("GetValuesFromFrequencyResponse", "FrequencyResponse.hpp", 263, "std::is_sorted(inOutputFrequenciesFirst, inOutputFrequenciesLast)");
      }
    }
  }
  Phase::GetBandsFromCenterFrequencies<std::__wrap_iter<float *>,float>(a1, a2, (float **)v89, 22000.0);
  Phase::GetBandsFromCenterFrequencies<std::__wrap_iter<float const*>,float>(a5, a6, (float **)v88, 22000.0);
  std::string __p = 0;
  uint64_t v86 = 0;
  uint64_t v87 = 0;
  int v82 = 0;
  float v83 = 0;
  uint64_t v84 = 0;
  int v79 = 0;
  double v81 = 0;
  if ((char *)a6 - (char *)a5 > 0)
  {
    BOOL v17 = 0;
    float v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    uint64_t v21 = a6 - a5;
    uint64_t v22 = v10 >> 2;
    uint64_t v23 = (v10 >> 2) - 1;
    if (v21 <= 1) {
      uint64_t v21 = 1;
    }
    uint64_t v77 = v21;
    do
    {
      uint64_t v24 = (float *)((char *)v88[0] + 8 * v20);
      float v25 = *v24;
      float v26 = v24[1];
      uint64_t v86 = (float *)__p;
      float v83 = v18;
      float v80 = v17;
      if (v19 < v22)
      {
        float v27 = (float *)((char *)v89[0] + 8 * v19);
        float v28 = *v27;
        float v29 = v27[1];
        if (v26 < v29) {
          float v29 = v26;
        }
        if (v28 >= v25) {
          float v30 = *v27;
        }
        else {
          float v30 = v25;
        }
        float v31 = fmaxf(v29 - v30, 0.0);
        float v32 = v26;
        uint64_t v33 = v19;
        if (v31 == 0.0)
        {
LABEL_62:
          v19 -= v28 != v32;
        }
        else
        {
          while (1)
          {
            float v34 = v86;
            if (v86 >= v87)
            {
              float v36 = (float *)__p;
              uint64_t v37 = ((char *)v86 - (unsigned char *)__p) >> 2;
              unint64_t v38 = v37 + 1;
              if ((unint64_t)(v37 + 1) >> 62) {
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v39 = (char *)v87 - (unsigned char *)__p;
              if (((char *)v87 - (unsigned char *)__p) >> 1 > v38) {
                unint64_t v38 = v39 >> 1;
              }
              if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v40 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v40 = v38;
              }
              if (v40)
              {
                uint64_t v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v87, v40);
                float v36 = (float *)__p;
                float v34 = v86;
              }
              else
              {
                uint64_t v41 = 0;
              }
              __int16 v42 = (float *)&v41[4 * v37];
              *__int16 v42 = v31;
              double v35 = v42 + 1;
              while (v34 != v36)
              {
                int v43 = *((_DWORD *)v34-- - 1);
                *((_DWORD *)v42-- - 1) = v43;
              }
              std::string __p = v42;
              uint64_t v86 = v35;
              uint64_t v87 = (float *)&v41[4 * v40];
              if (v36) {
                operator delete(v36);
              }
            }
            else
            {
              *uint64_t v86 = v31;
              double v35 = v34 + 1;
            }
            uint64_t v86 = v35;
            __int16 v44 = v83;
            if (v83 >= v84)
            {
              double v45 = (char *)v82;
              uint64_t v46 = (v83 - (unsigned char *)v82) >> 3;
              unint64_t v47 = v46 + 1;
              if ((unint64_t)(v46 + 1) >> 61) {
                std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v48 = v84 - (unsigned char *)v82;
              if ((v84 - (unsigned char *)v82) >> 2 > v47) {
                unint64_t v47 = v48 >> 2;
              }
              if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v49 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v49 = v47;
              }
              if (v49)
              {
                uint64_t v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)&v84, v49);
                double v45 = (char *)v82;
                __int16 v44 = v83;
              }
              else
              {
                uint64_t v50 = 0;
              }
              uint64_t v51 = (uint64_t *)&v50[8 * v46];
              *uint64_t v51 = v19;
              float v18 = (char *)(v51 + 1);
              while (v44 != v45)
              {
                uint64_t v52 = *((void *)v44 - 1);
                v44 -= 8;
                *--uint64_t v51 = v52;
              }
              int v82 = v51;
              float v83 = v18;
              uint64_t v84 = &v50[8 * v49];
              if (v45) {
                operator delete(v45);
              }
            }
            else
            {
              *(void *)float v83 = v19;
              float v18 = v44 + 8;
            }
            float v83 = v18;
            if (v19 == v23) {
              uint64_t v33 = v19;
            }
            if (++v19 == v22) {
              break;
            }
            float v53 = (float *)((char *)v89[0] + 8 * v19);
            float v28 = *v53;
            float v54 = v53[1];
            double v55 = (float *)((char *)v88[0] + 8 * v20);
            float v56 = *v55;
            float v32 = v55[1];
            if (v32 < v54) {
              float v54 = v55[1];
            }
            if (v28 >= v56) {
              float v56 = v28;
            }
            float v31 = fmaxf(v54 - v56, 0.0);
            if (v31 == 0.0) {
              goto LABEL_62;
            }
          }
          uint64_t v19 = v33;
        }
      }
      float v57 = v80;
      if (v18 == v82)
      {
        float v60 = 0.0;
      }
      else
      {
        unint64_t v58 = 0;
        float v59 = v26 - v25;
        float v60 = 0.0;
        int v61 = v80;
        float v18 = (char *)v82;
        do
        {
          float v62 = *((float *)__p + v58) / v59;
          float v63 = *(float *)(a3 + 4 * *(void *)&v18[8 * v58]);
          float v64 = v62 * (float)(v63 * v63);
          if (v61 >= v81)
          {
            uint64_t v65 = v79;
            uint64_t v66 = v61 - v79;
            unint64_t v67 = v66 + 1;
            if ((unint64_t)(v66 + 1) >> 62) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v68 = (char *)v81 - (char *)v79;
            if (((char *)v81 - (char *)v79) >> 1 > v67) {
              unint64_t v67 = v68 >> 1;
            }
            if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v69 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v69 = v67;
            }
            if (v69)
            {
              long long v70 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v81, v69);
              uint64_t v65 = v79;
              int v61 = v80;
            }
            else
            {
              long long v70 = 0;
            }
            int v71 = (float *)&v70[4 * v66];
            *int v71 = v64;
            float v57 = v71 + 1;
            while (v61 != v65)
            {
              int v72 = *((_DWORD *)v61-- - 1);
              *((_DWORD *)v71-- - 1) = v72;
            }
            int v79 = v71;
            double v81 = (float *)&v70[4 * v69];
            if (v65) {
              operator delete(v65);
            }
          }
          else
          {
            *int v61 = v64;
            float v57 = v61 + 1;
          }
          float v60 = v60 + v62;
          float v80 = v57;
          ++v58;
          float v18 = (char *)v82;
          int v61 = v57;
        }
        while (v58 < (v83 - (unsigned char *)v82) >> 3);
      }
      BOOL v17 = v79;
      double v73 = 0.0;
      if (v79 != v57)
      {
        float v74 = v79;
        do
        {
          float v75 = *v74++;
          double v73 = v73 + v75;
        }
        while (v74 != v57);
      }
      float v76 = v73;
      uint64_t v23 = (v10 >> 2) - 1;
      *(float *)(a7 + 4 * v20++) = sqrtf(v76 / v60);
    }
    while (v20 != v77);
    if (v79)
    {
      operator delete(v79);
      float v18 = (char *)v82;
    }
    if (v18)
    {
      float v83 = v18;
      operator delete(v18);
    }
  }
  if (__p)
  {
    uint64_t v86 = (float *)__p;
    operator delete(__p);
  }
  if (v88[0])
  {
    v88[1] = v88[0];
    operator delete(v88[0]);
  }
  if (v89[0])
  {
    v89[1] = v89[0];
    operator delete(v89[0]);
  }
}

void sub_221ED2884(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **std::unique_ptr<Phase::Zeppelin::HorizontalSliceDatabase>::reset[abi:ne180100](uint64_t **result, uint64_t *a2)
{
  double v2 = *result;
  char *result = a2;
  if (v2)
  {
    std::unique_ptr<Phase::Zeppelin::SphereSampling::NDimEquiangularHalfCircleData<float,double>>::reset[abi:ne180100](v2, 0);
    JUMPOUT(0x223C938A0);
  }
  return result;
}

uint64_t std::unique_ptr<Phase::Zeppelin::SphereSampling::NDimEquiangularHalfCircleData<float,double>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    Phase::Zeppelin::SphereSampling::NDimEquiangularHalfCircleData<float,double>::~NDimEquiangularHalfCircleData(result);
    JUMPOUT(0x223C938A0);
  }
  return result;
}

uint64_t Phase::Zeppelin::SphereSampling::NDimEquiangularHalfCircleData<float,double>::~NDimEquiangularHalfCircleData(uint64_t a1)
{
  unint64_t v2 = *(unsigned int *)(a1 + 24);
  if (v2)
  {
    for (unint64_t i = 0; i < v2; ++i)
    {
      uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8 * i);
      if (v4)
      {
        MEMORY[0x223C93870](v4, 0x1000C8000313F17);
        unint64_t v2 = *(unsigned int *)(a1 + 24);
      }
    }
  }
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5) {
    MEMORY[0x223C93870](v5, 0x80C80B8603338);
  }
  uint64_t v6 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v6;
    operator delete(v6);
  }
  return a1;
}

void *std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<Phase::Envelope<float>::Segment::{lambda(float)#1},std::allocator<Phase::Envelope<float>::Segment::{lambda(float)#1}>,float ()(float)>::~__func()
{
}

void *std::__function::__func<Phase::Envelope<float>::Segment::{lambda(float)#1},std::allocator<Phase::Envelope<float>::Segment::{lambda(float)#1}>,float ()(float)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26D473948;
  return result;
}

void std::__function::__func<Phase::Envelope<float>::Segment::{lambda(float)#1},std::allocator<Phase::Envelope<float>::Segment::{lambda(float)#1}>,float ()(float)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D473948;
}

float std::__function::__func<Phase::Envelope<float>::Segment::{lambda(float)#1},std::allocator<Phase::Envelope<float>::Segment::{lambda(float)#1}>,float ()(float)>::operator()(uint64_t a1, uint64_t a2)
{
  return *(float *)a2;
}

void std::vector<Phase::Envelope<float>::Segment,std::allocator<Phase::Envelope<float>::Segment>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = v4 - 40;
        std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100]((void *)v4 - 4);
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

float Phase::CurveFunction::Squared<float>(float a1)
{
  return a1 * a1;
}

float Phase::CurveFunction::InverseSquared<float>(float a1)
{
  return 1.0 - (float)((float)(1.0 - a1) * (float)(1.0 - a1));
}

float Phase::CurveFunction::Cubed<float>(float a1)
{
  return (float)(a1 * a1) * a1;
}

float Phase::CurveFunction::InverseCubed<float>(float a1)
{
  return 1.0 - (float)((float)(1.0 - a1) * (float)((float)(1.0 - a1) * (float)(1.0 - a1)));
}

float Phase::CurveFunction::Sine<float>(float a1)
{
  return (float)(sinf((float)((float)((float)(a1 + -1.0) + 1.0) * 3.1416) * 0.5) + -1.0) + 1.0;
}

float Phase::CurveFunction::InverseSine<float>(float a1)
{
  return sinf((float)((float)(1.0 - a1) * -3.1416) * 0.5) + 1.0;
}

void Phase::CurveFunction::Sigmoid<float>(float a1)
{
  if (a1 >= 0.5) {
    sinf((float)((float)(1.0 - (float)((float)((float)(a1 + -0.5) * -2.0) + 1.0)) * 3.1416) * 0.5);
  }
  else {
    sinf((float)((float)(1.0 - (float)(a1 + a1)) * -3.1416) * 0.5);
  }
}

void Phase::CurveFunction::InverseSigmoid<float>(float a1)
{
  if (a1 >= 0.5) {
    sinf((float)((float)(1.0 - (float)((float)(a1 + -0.5) + (float)(a1 + -0.5))) * -3.1416) * 0.5);
  }
  else {
    sinf((float)((float)(1.0 - (float)((float)(a1 * -2.0) + 1.0)) * 3.1416) * 0.5);
  }
}

double Phase::CurveFunction::HoldStartValue<float>()
{
  return 0.0;
}

float Phase::CurveFunction::JumpToEndValue<float>()
{
  return 1.0;
}

void std::__function::__func<float (*)(float),std::allocator<float (*)(float)>,float ()(float)>::~__func()
{
}

void *std::__function::__func<float (*)(float),std::allocator<float (*)(float)>,float ()(float)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26D473990;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<float (*)(float),std::allocator<float (*)(float)>,float ()(float)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D473990;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<float (*)(float),std::allocator<float (*)(float)>,float ()(float)>::operator()(uint64_t a1, float *a2)
{
  return (*(uint64_t (**)(float))(a1 + 8))(*a2);
}

void *std::__function::__value_func<float ()(float)>::operator=[abi:ne180100](void *a1, uint64_t a2)
{
  uint64_t v4 = (void *)a1[3];
  a1[3] = 0;
  if (v4 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  uint64_t v5 = *(void *)(a2 + 24);
  if (v5)
  {
    if (v5 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v5;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

float Phase::Envelope<float>::InitializeFromSingleSegment(Phase::Logger *a1, float *a2, float *a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  float v4 = *a3;
  if (*a2 > *a3)
  {
    uint64_t v10 = **(id **)(Phase::Logger::GetInstance(a1) + 96);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      double v11 = *a2;
      double v12 = *a3;
      *(_DWORD *)float v14 = 136315906;
      *(void *)&void v14[4] = "Envelope.hpp";
      *(_WORD *)float v15 = 1024;
      *(_DWORD *)&_OWORD v15[2] = 243;
      __int16 v16 = 2048;
      double v17 = v11;
      __int16 v18 = 2048;
      double v19 = v12;
      _os_log_impl(&dword_221E5E000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (EnvelopeException::InvalidStartPoint) [!(inStartPoint.x <= inSegment.mEndPoint.x) is true]: \"Invalid start point x value: %f. Must be <= end point x value: %f\"", v14, 0x26u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _ZN5Phase17EnvelopeException17InvalidStartPointCI1St11logic_errorEPKc(exception, "Invalid start point x value: %f. Must be <= end point x value: %f");
  }
  *(void *)float v14 = 0;
  int v6 = *((_DWORD *)a3 + 1);
  *(float *)&unsigned char v14[8] = v4;
  *(_DWORD *)float v15 = v6;
  std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)&v15[4], (uint64_t)(a3 + 2));
  std::vector<Phase::Envelope<float>::SegmentInternal,std::allocator<Phase::Envelope<float>::SegmentInternal>>::assign((uint64_t)a1, 1uLL, v14);
  std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](&v15[4]);
  float v7 = *(float **)a1;
  float *v7 = *a2;
  float result = a2[1];
  v7[1] = result;
  return result;
}

void sub_221ED30CC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<Phase::Envelope<float>::SegmentInternal,std::allocator<Phase::Envelope<float>::SegmentInternal>>::assign(uint64_t result, unint64_t a2, _DWORD *a3)
{
  uint64_t v5 = (void *)result;
  int v6 = *(_DWORD **)result;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(result + 16) - *(void *)result) >> 4) >= a2)
  {
    unint64_t v12 = (*(void *)(result + 8) - (void)v6) / 48;
    if (v12 >= a2) {
      uint64_t v13 = a2;
    }
    else {
      uint64_t v13 = (*(void *)(result + 8) - (void)v6) / 48;
    }
    for (; v13; --v13)
    {
      _DWORD *v6 = *a3;
      v6[1] = a3[1];
      void v6[2] = a3[2];
      void v6[3] = a3[3];
      float result = (uint64_t)std::function<float ()(float)>::operator=((void *)v6 + 2, (uint64_t)(a3 + 4));
      v6 += 12;
    }
    if (a2 <= v12)
    {
      uint64_t v17 = v5[1];
      uint64_t v18 = *v5 + 48 * a2;
      if (v17 != v18)
      {
        do
        {
          uint64_t v19 = v17 - 48;
          float result = (uint64_t)std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100]((void *)(v17 - 32));
          uint64_t v17 = v19;
        }
        while (v19 != v18);
      }
      v5[1] = v18;
    }
    else
    {
      float v14 = (_DWORD *)v5[1];
      float v15 = &v14[12 * (a2 - v12)];
      uint64_t v16 = -48 * v12 + 48 * a2;
      do
      {
        *float v14 = *a3;
        v14[1] = a3[1];
        void v14[2] = a3[2];
        v14[3] = a3[3];
        float result = std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)(v14 + 4), (uint64_t)(a3 + 4));
        v14 += 12;
        v16 -= 48;
      }
      while (v16);
      v5[1] = v15;
    }
  }
  else
  {
    std::vector<Phase::Envelope<float>::SegmentInternal,std::allocator<Phase::Envelope<float>::SegmentInternal>>::__vdeallocate((void **)result);
    if (a2 > 0x555555555555555) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v7 = 0x5555555555555556 * ((uint64_t)(v5[2] - *v5) >> 4);
    if (v7 <= a2) {
      unint64_t v7 = a2;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5[2] - *v5) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v8 = 0x555555555555555;
    }
    else {
      unint64_t v8 = v7;
    }
    std::vector<Phase::Envelope<float>::SegmentInternal,std::allocator<Phase::Envelope<float>::SegmentInternal>>::__vallocate[abi:ne180100](v5, v8);
    int64_t v9 = (_DWORD *)v5[1];
    uint64_t v10 = &v9[12 * a2];
    uint64_t v11 = 48 * a2;
    do
    {
      _DWORD *v9 = *a3;
      v9[1] = a3[1];
      void v9[2] = a3[2];
      void v9[3] = a3[3];
      float result = std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)(v9 + 4), (uint64_t)(a3 + 4));
      v9 += 12;
      v11 -= 48;
    }
    while (v11);
    v5[1] = v10;
  }
  return result;
}

void sub_221ED330C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_221ED3314(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *std::vector<Phase::Envelope<float>::SegmentInternal,std::allocator<Phase::Envelope<float>::SegmentInternal>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
  }
  float result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Envelope<double>::Segment>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[48 * v4];
  return result;
}

void *std::function<float ()(float)>::operator=(void *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<float ()(float)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v4);
  return a1;
}

uint64_t std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

{
  void *v3;
  uint64_t v4;

  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void *std::__function::__value_func<float ()(float)>::swap[abi:ne180100](void *result, void *a2)
{
  void v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        float result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        float result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      float result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_221ED36DC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,Phase::Envelope<float>::Envelope<std::__wrap_iter<Phase::Envelope<float>::Segment *>>(Phase::Vector<float,2ul> const&,std::__wrap_iter<Phase::Envelope<float>::Segment *>,std::__wrap_iter<Phase::Envelope<float>::Segment *>)::{lambda(Phase::Envelope<float>::SegmentInternal const&,Phase::Envelope<float>::SegmentInternal const&)#1} &,Phase::Envelope<float>::SegmentInternal*,false>(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8 = result;
  v90[5] = *MEMORY[0x263EF8340];
LABEL_2:
  uint64_t v9 = v8;
  int v82 = (long long *)(v8 + 96);
  float v83 = (long long *)(v8 + 48);
  uint64_t v86 = (void *)(v8 + 16);
  while (1)
  {
    uint64_t v10 = a2 - v9;
    uint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v9) >> 4);
    if (v5 || !v4)
    {
      switch(v11)
      {
        case 0:
        case 1:
          return result;
        case 2:
          if (*(float *)(a2 - 40) < *(float *)(v9 + 8)) {
            float result = (uint64_t)std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<Phase::Envelope<float>::SegmentInternal *&,Phase::Envelope<float>::SegmentInternal *&>((long long *)v9, a2 - 48);
          }
          break;
        case 3:
          float result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<float>::Envelope<std::__wrap_iter<Phase::Envelope<float>::Segment *>>(Phase::Vector<float,2ul> const&,std::__wrap_iter<Phase::Envelope<float>::Segment *>,std::__wrap_iter<Phase::Envelope<float>::Segment *>)::{lambda(Phase::Envelope<float>::SegmentInternal const&,Phase::Envelope<float>::SegmentInternal const&)#1} &,Phase::Envelope<float>::SegmentInternal*>((long long *)v9, v9 + 48, a2 - 48);
          break;
        case 4:
          float result = (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<float>::Envelope<std::__wrap_iter<Phase::Envelope<float>::Segment *>>(Phase::Vector<float,2ul> const&,std::__wrap_iter<Phase::Envelope<float>::Segment *>,std::__wrap_iter<Phase::Envelope<float>::Segment *>)::{lambda(Phase::Envelope<float>::SegmentInternal const&,Phase::Envelope<float>::SegmentInternal const&)#1} &,Phase::Envelope<float>::SegmentInternal*>(v9, v9 + 48, v9 + 96, a2 - 48);
          break;
        case 5:
          float result = (uint64_t)std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<float>::Envelope<std::__wrap_iter<Phase::Envelope<float>::Segment *>>(Phase::Vector<float,2ul> const&,std::__wrap_iter<Phase::Envelope<float>::Segment *>,std::__wrap_iter<Phase::Envelope<float>::Segment *>)::{lambda(Phase::Envelope<float>::SegmentInternal const&,Phase::Envelope<float>::SegmentInternal const&)#1} &,Phase::Envelope<float>::SegmentInternal*>(v9, v9 + 48, v9 + 96, v9 + 144, a2 - 48);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v10 <= 1151) {
      break;
    }
    if (!a3)
    {
      if (v9 != a2)
      {
        unint64_t v84 = a2;
        int64_t v49 = (unint64_t)(v11 - 2) >> 1;
        int64_t v50 = v49;
        do
        {
          int64_t v51 = v50;
          if (v49 >= v50)
          {
            uint64_t v52 = (2 * v50) | 1;
            uint64_t v53 = v9 + 48 * v52;
            if (2 * v50 + 2 < v11 && *(float *)(v9 + 48 * v52 + 8) < *(float *)(v53 + 56))
            {
              v53 += 48;
              uint64_t v52 = 2 * v50 + 2;
            }
            float v54 = *(float *)(v9 + 48 * v50 + 8);
            if (*(float *)(v53 + 8) >= v54)
            {
              double v55 = (long long *)(v9 + 48 * v50);
              *(void *)&long long v89 = *(void *)v55;
              *((float *)&v89 + 2) = v54;
              HIDWORD(v89) = *((_DWORD *)v55 + 3);
              std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v90, (uint64_t)(v55 + 1));
              do
              {
                float v56 = (long long *)v53;
                *(_DWORD *)double v55 = *(_DWORD *)v53;
                *((_DWORD *)v55 + 1) = *(_DWORD *)(v53 + 4);
                *((_DWORD *)v55 + 2) = *(_DWORD *)(v53 + 8);
                *((_DWORD *)v55 + 3) = *(_DWORD *)(v53 + 12);
                float v57 = (void *)(v53 + 16);
                std::__function::__value_func<float ()(float)>::operator=[abi:ne180100]((void *)v55 + 2, v53 + 16);
                if (v49 < v52) {
                  break;
                }
                uint64_t v58 = (2 * v52) | 1;
                uint64_t v53 = v9 + 48 * v58;
                if (2 * v52 + 2 < v11 && *(float *)(v9 + 48 * v58 + 8) < *(float *)(v53 + 56))
                {
                  v53 += 48;
                  uint64_t v58 = 2 * v52 + 2;
                }
                double v55 = v56;
                uint64_t v52 = v58;
              }
              while (*(float *)(v53 + 8) >= *((float *)&v89 + 2));
              *float v56 = v89;
              std::__function::__value_func<float ()(float)>::operator=[abi:ne180100](v57, (uint64_t)v90);
              float result = (uint64_t)std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v90);
            }
          }
          int64_t v50 = v51 - 1;
        }
        while (v51);
        int64_t v59 = v10 / 0x30uLL;
        unint64_t v60 = v84;
        do
        {
          if (v59 >= 2)
          {
            long long v87 = *(_OWORD *)v9;
            std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v88, v9 + 16);
            uint64_t v61 = 0;
            uint64_t v62 = v9;
            do
            {
              uint64_t v63 = v61 + 1;
              unint64_t v64 = v62 + 48 * (v61 + 1);
              uint64_t v65 = 2 * v61;
              uint64_t v61 = (2 * v61) | 1;
              int64_t v66 = v65 + 2;
              if (v66 < v59 && *(float *)(v62 + 48 * v63 + 8) < *(float *)(v64 + 56))
              {
                v64 += 48;
                uint64_t v61 = v66;
              }
              *(_DWORD *)uint64_t v62 = *(_DWORD *)v64;
              *(_DWORD *)(v62 + 4) = *(_DWORD *)(v64 + 4);
              *(_DWORD *)(v62 + 8) = *(_DWORD *)(v64 + 8);
              *(_DWORD *)(v62 + 12) = *(_DWORD *)(v64 + 12);
              std::__function::__value_func<float ()(float)>::operator=[abi:ne180100]((void *)(v62 + 16), v64 + 16);
              uint64_t v62 = v64;
            }
            while (v61 <= (uint64_t)((unint64_t)(v59 - 2) >> 1));
            if (v64 == v60 - 48)
            {
              *(_OWORD *)unint64_t v64 = v87;
              std::__function::__value_func<float ()(float)>::operator=[abi:ne180100]((void *)(v64 + 16), (uint64_t)v88);
            }
            else
            {
              *(_DWORD *)unint64_t v64 = *(_DWORD *)(v60 - 48);
              *(_DWORD *)(v64 + 4) = *(_DWORD *)(v60 - 44);
              *(_DWORD *)(v64 + 8) = *(_DWORD *)(v60 - 40);
              *(_DWORD *)(v64 + 12) = *(_DWORD *)(v60 - 36);
              std::__function::__value_func<float ()(float)>::operator=[abi:ne180100]((void *)(v64 + 16), v60 - 32);
              *(_OWORD *)(v60 - 48) = v87;
              std::__function::__value_func<float ()(float)>::operator=[abi:ne180100]((void *)(v60 - 32), (uint64_t)v88);
              uint64_t v67 = v64 - v9 + 48;
              if (v67 >= 49)
              {
                unint64_t v68 = (v67 / 0x30uLL - 2) >> 1;
                float v69 = *(float *)(v64 + 8);
                if (*(float *)(v9 + 48 * v68 + 8) < v69)
                {
                  *(void *)&long long v89 = *(void *)v64;
                  *((float *)&v89 + 2) = v69;
                  HIDWORD(v89) = *(_DWORD *)(v64 + 12);
                  std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v90, v64 + 16);
                  do
                  {
                    unint64_t v70 = v64;
                    unint64_t v64 = v9 + 48 * v68;
                    *(_DWORD *)unint64_t v70 = *(_DWORD *)v64;
                    *(_DWORD *)(v70 + 4) = *(_DWORD *)(v64 + 4);
                    *(_DWORD *)(v70 + 8) = *(_DWORD *)(v64 + 8);
                    *(_DWORD *)(v70 + 12) = *(_DWORD *)(v64 + 12);
                    std::__function::__value_func<float ()(float)>::operator=[abi:ne180100]((void *)(v70 + 16), v64 + 16);
                    int v71 = DWORD2(v89);
                    if (!v68) {
                      break;
                    }
                    unint64_t v68 = (v68 - 1) >> 1;
                  }
                  while (*(float *)(v9 + 48 * v68 + 8) < *((float *)&v89 + 2));
                  *(void *)unint64_t v64 = v89;
                  *(_DWORD *)(v64 + 8) = v71;
                  *(_DWORD *)(v64 + 12) = HIDWORD(v89);
                  std::__function::__value_func<float ()(float)>::operator=[abi:ne180100]((void *)(v64 + 16), (uint64_t)v90);
                  std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v90);
                }
              }
            }
            float result = (uint64_t)std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v88);
          }
          v60 -= 48;
        }
        while ((unint64_t)v59-- > 2);
      }
      return result;
    }
    unint64_t v12 = (unint64_t)v11 >> 1;
    uint64_t v13 = (long long *)(v9 + 48 * ((unint64_t)v11 >> 1));
    uint64_t v14 = a2 - 48;
    if ((unint64_t)v10 < 0x1801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<float>::Envelope<std::__wrap_iter<Phase::Envelope<float>::Segment *>>(Phase::Vector<float,2ul> const&,std::__wrap_iter<Phase::Envelope<float>::Segment *>,std::__wrap_iter<Phase::Envelope<float>::Segment *>)::{lambda(Phase::Envelope<float>::SegmentInternal const&,Phase::Envelope<float>::SegmentInternal const&)#1} &,Phase::Envelope<float>::SegmentInternal*>(v13, v9, v14);
    }
    else
    {
      uint64_t v15 = a3;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<float>::Envelope<std::__wrap_iter<Phase::Envelope<float>::Segment *>>(Phase::Vector<float,2ul> const&,std::__wrap_iter<Phase::Envelope<float>::Segment *>,std::__wrap_iter<Phase::Envelope<float>::Segment *>)::{lambda(Phase::Envelope<float>::SegmentInternal const&,Phase::Envelope<float>::SegmentInternal const&)#1} &,Phase::Envelope<float>::SegmentInternal*>((long long *)v9, (uint64_t)v13, v14);
      uint64_t v16 = v9 + 48 * v12;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<float>::Envelope<std::__wrap_iter<Phase::Envelope<float>::Segment *>>(Phase::Vector<float,2ul> const&,std::__wrap_iter<Phase::Envelope<float>::Segment *>,std::__wrap_iter<Phase::Envelope<float>::Segment *>)::{lambda(Phase::Envelope<float>::SegmentInternal const&,Phase::Envelope<float>::SegmentInternal const&)#1} &,Phase::Envelope<float>::SegmentInternal*>(v83, v16 - 48, a2 - 96);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<float>::Envelope<std::__wrap_iter<Phase::Envelope<float>::Segment *>>(Phase::Vector<float,2ul> const&,std::__wrap_iter<Phase::Envelope<float>::Segment *>,std::__wrap_iter<Phase::Envelope<float>::Segment *>)::{lambda(Phase::Envelope<float>::SegmentInternal const&,Phase::Envelope<float>::SegmentInternal const&)#1} &,Phase::Envelope<float>::SegmentInternal*>(v82, v16 + 48, a2 - 144);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<float>::Envelope<std::__wrap_iter<Phase::Envelope<float>::Segment *>>(Phase::Vector<float,2ul> const&,std::__wrap_iter<Phase::Envelope<float>::Segment *>,std::__wrap_iter<Phase::Envelope<float>::Segment *>)::{lambda(Phase::Envelope<float>::SegmentInternal const&,Phase::Envelope<float>::SegmentInternal const&)#1} &,Phase::Envelope<float>::SegmentInternal*>((long long *)(v16 - 48), (uint64_t)v13, v16 + 48);
      long long v89 = *(_OWORD *)v9;
      std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v90, (uint64_t)v86);
      *(_OWORD *)uint64_t v9 = *v13;
      std::__function::__value_func<float ()(float)>::operator=[abi:ne180100](v86, v16 + 16);
      *(void *)uint64_t v13 = v89;
      *(void *)(v16 + 8) = *((void *)&v89 + 1);
      std::__function::__value_func<float ()(float)>::operator=[abi:ne180100]((void *)(v16 + 16), (uint64_t)v90);
      a3 = v15;
      std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v90);
    }
    --a3;
    if (a4)
    {
      float v17 = *(float *)(v9 + 8);
    }
    else
    {
      float v17 = *(float *)(v9 + 8);
      if (*(float *)(v9 - 40) >= v17)
      {
        *(void *)&long long v89 = *(void *)v9;
        *((void *)&v89 + 1) = __PAIR64__(*(_DWORD *)(v9 + 12), LODWORD(v17));
        std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v90, v9 + 16);
        if (*((float *)&v89 + 2) >= *(float *)(a2 - 40))
        {
          unint64_t v33 = v9 + 48;
          do
          {
            unint64_t v8 = v33;
            if (v33 >= a2) {
              break;
            }
            float v34 = *(float *)(v33 + 8);
            v33 += 48;
          }
          while (*((float *)&v89 + 2) >= v34);
        }
        else
        {
          uint64_t v31 = v9;
          do
          {
            unint64_t v8 = v31 + 48;
            float v32 = *(float *)(v31 + 56);
            v31 += 48;
          }
          while (*((float *)&v89 + 2) >= v32);
        }
        unint64_t v35 = a2;
        if (v8 < a2)
        {
          unint64_t v36 = a2;
          do
          {
            unint64_t v35 = v36 - 48;
            float v37 = *(float *)(v36 - 40);
            v36 -= 48;
          }
          while (*((float *)&v89 + 2) < v37);
        }
        while (v8 < v35)
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<Phase::Envelope<float>::SegmentInternal *&,Phase::Envelope<float>::SegmentInternal *&>((long long *)v8, v35);
          do
          {
            float v38 = *(float *)(v8 + 56);
            v8 += 48;
          }
          while (*((float *)&v89 + 2) >= v38);
          do
          {
            float v39 = *(float *)(v35 - 40);
            v35 -= 48;
          }
          while (*((float *)&v89 + 2) < v39);
        }
        if (v8 - 48 != v9)
        {
          *(_DWORD *)uint64_t v9 = *(_DWORD *)(v8 - 48);
          *(_DWORD *)(v9 + 4) = *(_DWORD *)(v8 - 44);
          *(_DWORD *)(v9 + 8) = *(_DWORD *)(v8 - 40);
          *(_DWORD *)(v9 + 12) = *(_DWORD *)(v8 - 36);
          std::__function::__value_func<float ()(float)>::operator=[abi:ne180100]((void *)(v9 + 16), v8 - 32);
        }
        *(_OWORD *)(v8 - 48) = v89;
        std::__function::__value_func<float ()(float)>::operator=[abi:ne180100]((void *)(v8 - 32), (uint64_t)v90);
        float result = (uint64_t)std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v90);
        a4 = 0;
        goto LABEL_2;
      }
    }
    *(void *)&long long v89 = *(void *)v9;
    *((void *)&v89 + 1) = __PAIR64__(*(_DWORD *)(v9 + 12), LODWORD(v17));
    std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v90, (uint64_t)v86);
    uint64_t v18 = 0;
    do
    {
      float v19 = *(float *)(v9 + v18 + 56);
      v18 += 48;
    }
    while (v19 < *((float *)&v89 + 2));
    unint64_t v20 = v9 + v18;
    uint64_t v21 = a2;
    unint64_t v22 = a2;
    if (v18 == 48)
    {
      unint64_t v25 = a2;
      while (v20 < v25)
      {
        unint64_t v23 = v25 - 48;
        float v26 = *(float *)(v25 - 40);
        v25 -= 48;
        if (v26 < *((float *)&v89 + 2)) {
          goto LABEL_23;
        }
      }
      unint64_t v23 = v25;
    }
    else
    {
      do
      {
        unint64_t v23 = v22 - 48;
        float v24 = *(float *)(v22 - 40);
        v22 -= 48;
      }
      while (v24 >= *((float *)&v89 + 2));
    }
LABEL_23:
    unint64_t v8 = v20;
    if (v20 < v23)
    {
      unint64_t v27 = v23;
      do
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<Phase::Envelope<float>::SegmentInternal *&,Phase::Envelope<float>::SegmentInternal *&>((long long *)v8, v27);
        do
        {
          float v28 = *(float *)(v8 + 56);
          v8 += 48;
        }
        while (v28 < *((float *)&v89 + 2));
        do
        {
          float v29 = *(float *)(v27 - 40);
          v27 -= 48;
        }
        while (v29 >= *((float *)&v89 + 2));
      }
      while (v8 < v27);
    }
    if (v8 - 48 != v9)
    {
      *(_DWORD *)uint64_t v9 = *(_DWORD *)(v8 - 48);
      *(_DWORD *)(v9 + 4) = *(_DWORD *)(v8 - 44);
      *(_DWORD *)(v9 + 8) = *(_DWORD *)(v8 - 40);
      *(_DWORD *)(v9 + 12) = *(_DWORD *)(v8 - 36);
      std::__function::__value_func<float ()(float)>::operator=[abi:ne180100](v86, v8 - 32);
    }
    *(_OWORD *)(v8 - 48) = v89;
    std::__function::__value_func<float ()(float)>::operator=[abi:ne180100]((void *)(v8 - 32), (uint64_t)v90);
    std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v90);
    BOOL v4 = v20 >= v23;
    a2 = v21;
    if (!v4) {
      goto LABEL_37;
    }
    char v30 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<float>::Envelope<std::__wrap_iter<Phase::Envelope<float>::Segment *>>(Phase::Vector<float,2ul> const&,std::__wrap_iter<Phase::Envelope<float>::Segment *>,std::__wrap_iter<Phase::Envelope<float>::Segment *>)::{lambda(Phase::Envelope<float>::SegmentInternal const&,Phase::Envelope<float>::SegmentInternal const&)#1} &,Phase::Envelope<float>::SegmentInternal*>(v9, v8 - 48);
    float result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<float>::Envelope<std::__wrap_iter<Phase::Envelope<float>::Segment *>>(Phase::Vector<float,2ul> const&,std::__wrap_iter<Phase::Envelope<float>::Segment *>,std::__wrap_iter<Phase::Envelope<float>::Segment *>)::{lambda(Phase::Envelope<float>::SegmentInternal const&,Phase::Envelope<float>::SegmentInternal const&)#1} &,Phase::Envelope<float>::SegmentInternal*>(v8, v21);
    if (!result)
    {
      if (v30) {
        goto LABEL_2;
      }
LABEL_37:
      float result = std::__introsort<std::_ClassicAlgPolicy,Phase::Envelope<float>::Envelope<std::__wrap_iter<Phase::Envelope<float>::Segment *>>(Phase::Vector<float,2ul> const&,std::__wrap_iter<Phase::Envelope<float>::Segment *>,std::__wrap_iter<Phase::Envelope<float>::Segment *>)::{lambda(Phase::Envelope<float>::SegmentInternal const&,Phase::Envelope<float>::SegmentInternal const&)#1} &,Phase::Envelope<float>::SegmentInternal*,false>(v9, v8 - 48, a3, a4 & 1);
      a4 = 0;
      goto LABEL_2;
    }
    a2 = v8 - 48;
    if (v30) {
      return result;
    }
  }
  if (a4)
  {
    if (v9 != a2)
    {
      unint64_t v40 = (void *)(v9 + 48);
      if (v9 + 48 != a2)
      {
        uint64_t v41 = 0;
        uint64_t v42 = v9;
        do
        {
          int v43 = v40;
          float v44 = *(float *)(v42 + 56);
          if (v44 < *(float *)(v42 + 8))
          {
            *(void *)&long long v89 = *v40;
            *((void *)&v89 + 1) = __PAIR64__(*(_DWORD *)(v42 + 60), LODWORD(v44));
            std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v90, v42 + 64);
            uint64_t v45 = v41;
            while (1)
            {
              uint64_t v46 = v45;
              uint64_t v47 = v9 + v45;
              *(_DWORD *)(v47 + 48) = *(_DWORD *)v47;
              *(void *)(v47 + 52) = *(void *)(v47 + 4);
              *(_DWORD *)(v47 + 60) = *(_DWORD *)(v47 + 12);
              std::__function::__value_func<float ()(float)>::operator=[abi:ne180100]((void *)(v47 + 64), v47 + 16);
              if (!v46) {
                break;
              }
              uint64_t v45 = v46 - 48;
              if (*((float *)&v89 + 2) >= *(float *)(v9 + v46 - 40))
              {
                uint64_t v48 = (_OWORD *)(v9 + v46);
                goto LABEL_72;
              }
            }
            uint64_t v48 = (_OWORD *)v9;
LABEL_72:
            _OWORD *v48 = v89;
            std::__function::__value_func<float ()(float)>::operator=[abi:ne180100]((void *)(v9 + v46 + 16), (uint64_t)v90);
            float result = (uint64_t)std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v90);
          }
          unint64_t v40 = v43 + 6;
          v41 += 48;
          uint64_t v42 = (uint64_t)v43;
        }
        while (v43 + 6 != (void *)a2);
      }
    }
  }
  else if (v9 != a2)
  {
    double v73 = (void *)(v9 + 48);
    if (v9 + 48 != a2)
    {
      float v74 = (void *)(v9 + 64);
      do
      {
        float v75 = v73;
        float v76 = *(float *)(v9 + 56);
        if (v76 < *(float *)(v9 + 8))
        {
          *(void *)&long long v89 = *v73;
          *((void *)&v89 + 1) = __PAIR64__(*(_DWORD *)(v9 + 60), LODWORD(v76));
          std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v90, v9 + 64);
          uint64_t v77 = v74;
          do
          {
            *((_DWORD *)v77 - 4) = *((_DWORD *)v77 - 16);
            *(void *)((char *)v77 - 12) = *(void *)((char *)v77 - 60);
            *((_DWORD *)v77 - 1) = *((_DWORD *)v77 - 13);
            double v78 = v77 - 6;
            int v79 = (float *)std::__function::__value_func<float ()(float)>::operator=[abi:ne180100](v77, (uint64_t)(v77 - 6));
            int v80 = DWORD2(v89);
            float v81 = *(v79 - 26);
            uint64_t v77 = v78;
          }
          while (*((float *)&v89 + 2) < v81);
          *(v78 - 2) = v89;
          *((_DWORD *)v78 - 2) = v80;
          *((_DWORD *)v78 - 1) = HIDWORD(v89);
          std::__function::__value_func<float ()(float)>::operator=[abi:ne180100](v78, (uint64_t)v90);
          float result = (uint64_t)std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v90);
        }
        double v73 = v75 + 6;
        v74 += 6;
        uint64_t v9 = (uint64_t)v75;
      }
      while (v75 + 6 != (void *)a2);
    }
  }
  return result;
}

void sub_221ED4220(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void *std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<Phase::Envelope<float>::SegmentInternal *&,Phase::Envelope<float>::SegmentInternal *&>(long long *a1, uint64_t a2)
{
  v7[5] = *MEMORY[0x263EF8340];
  long long v6 = *a1;
  BOOL v4 = a1 + 1;
  std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v7, (uint64_t)(a1 + 1));
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *((_DWORD *)a1 + 1) = *(_DWORD *)(a2 + 4);
  *((_DWORD *)a1 + 2) = *(_DWORD *)(a2 + 8);
  *((_DWORD *)a1 + 3) = *(_DWORD *)(a2 + 12);
  std::__function::__value_func<float ()(float)>::operator=[abi:ne180100](v4, a2 + 16);
  *(_OWORD *)a2 = v6;
  std::__function::__value_func<float ()(float)>::operator=[abi:ne180100]((void *)(a2 + 16), (uint64_t)v7);
  return std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v7);
}

void sub_221ED4394(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

long long *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<float>::Envelope<std::__wrap_iter<Phase::Envelope<float>::Segment *>>(Phase::Vector<float,2ul> const&,std::__wrap_iter<Phase::Envelope<float>::Segment *>,std::__wrap_iter<Phase::Envelope<float>::Segment *>)::{lambda(Phase::Envelope<float>::SegmentInternal const&,Phase::Envelope<float>::SegmentInternal const&)#1} &,Phase::Envelope<float>::SegmentInternal*>(long long *result, uint64_t a2, uint64_t a3)
{
  char v5 = result;
  float v6 = *(float *)(a2 + 8);
  float v7 = *(float *)(a3 + 8);
  if (v6 >= *((float *)result + 2))
  {
    if (v7 >= v6) {
      return result;
    }
    float result = (long long *)std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<Phase::Envelope<float>::SegmentInternal *&,Phase::Envelope<float>::SegmentInternal *&>((long long *)a2, a3);
    if (*(float *)(a2 + 8) >= *((float *)v5 + 2)) {
      return result;
    }
    float result = v5;
    uint64_t v8 = a2;
  }
  else
  {
    if (v7 >= v6)
    {
      float result = (long long *)std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<Phase::Envelope<float>::SegmentInternal *&,Phase::Envelope<float>::SegmentInternal *&>(result, a2);
      if (*(float *)(a3 + 8) >= *(float *)(a2 + 8)) {
        return result;
      }
      float result = (long long *)a2;
    }
    uint64_t v8 = a3;
  }

  return (long long *)std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<Phase::Envelope<float>::SegmentInternal *&,Phase::Envelope<float>::SegmentInternal *&>(result, v8);
}

uint64_t std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<float>::Envelope<std::__wrap_iter<Phase::Envelope<float>::Segment *>>(Phase::Vector<float,2ul> const&,std::__wrap_iter<Phase::Envelope<float>::Segment *>,std::__wrap_iter<Phase::Envelope<float>::Segment *>)::{lambda(Phase::Envelope<float>::SegmentInternal const&,Phase::Envelope<float>::SegmentInternal const&)#1} &,Phase::Envelope<float>::SegmentInternal*>(uint64_t a1, uint64_t a2)
{
  void v16[4] = *MEMORY[0x263EF8340];
  BOOL v4 = 1;
  switch(0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 4))
  {
    case 0uLL:
    case 1uLL:
      return v4;
    case 2uLL:
      if (*(float *)(a2 - 40) < *(float *)(a1 + 8)) {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<Phase::Envelope<float>::SegmentInternal *&,Phase::Envelope<float>::SegmentInternal *&>((long long *)a1, a2 - 48);
      }
      return v4;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<float>::Envelope<std::__wrap_iter<Phase::Envelope<float>::Segment *>>(Phase::Vector<float,2ul> const&,std::__wrap_iter<Phase::Envelope<float>::Segment *>,std::__wrap_iter<Phase::Envelope<float>::Segment *>)::{lambda(Phase::Envelope<float>::SegmentInternal const&,Phase::Envelope<float>::SegmentInternal const&)#1} &,Phase::Envelope<float>::SegmentInternal*>((long long *)a1, a1 + 48, a2 - 48);
      return v4;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<float>::Envelope<std::__wrap_iter<Phase::Envelope<float>::Segment *>>(Phase::Vector<float,2ul> const&,std::__wrap_iter<Phase::Envelope<float>::Segment *>,std::__wrap_iter<Phase::Envelope<float>::Segment *>)::{lambda(Phase::Envelope<float>::SegmentInternal const&,Phase::Envelope<float>::SegmentInternal const&)#1} &,Phase::Envelope<float>::SegmentInternal*>(a1, a1 + 48, a1 + 96, a2 - 48);
      return v4;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<float>::Envelope<std::__wrap_iter<Phase::Envelope<float>::Segment *>>(Phase::Vector<float,2ul> const&,std::__wrap_iter<Phase::Envelope<float>::Segment *>,std::__wrap_iter<Phase::Envelope<float>::Segment *>)::{lambda(Phase::Envelope<float>::SegmentInternal const&,Phase::Envelope<float>::SegmentInternal const&)#1} &,Phase::Envelope<float>::SegmentInternal*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48);
      return v4;
    default:
      uint64_t v5 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<float>::Envelope<std::__wrap_iter<Phase::Envelope<float>::Segment *>>(Phase::Vector<float,2ul> const&,std::__wrap_iter<Phase::Envelope<float>::Segment *>,std::__wrap_iter<Phase::Envelope<float>::Segment *>)::{lambda(Phase::Envelope<float>::SegmentInternal const&,Phase::Envelope<float>::SegmentInternal const&)#1} &,Phase::Envelope<float>::SegmentInternal*>((long long *)a1, a1 + 48, a1 + 96);
      uint64_t v6 = a1 + 144;
      if (a1 + 144 == a2) {
        return 1;
      }
      uint64_t v7 = 0;
      int v8 = 0;
      break;
  }
  while (*(float *)(v6 + 8) >= *(float *)(v5 + 8))
  {
LABEL_14:
    uint64_t v5 = v6;
    v7 += 48;
    v6 += 48;
    if (v6 == a2) {
      return 1;
    }
  }
  *(void *)uint64_t v14 = *(void *)v6;
  *(_DWORD *)&unsigned char v14[8] = *(_DWORD *)(v6 + 8);
  int v15 = *(_DWORD *)(v6 + 12);
  std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v16, v6 + 16);
  uint64_t v9 = v7;
  while (1)
  {
    uint64_t v10 = v9;
    uint64_t v11 = a1 + v9;
    *(_DWORD *)(v11 + 144) = *(_DWORD *)(v11 + 96);
    *(void *)(v11 + 148) = *(void *)(v11 + 100);
    *(_DWORD *)(v11 + 156) = *(_DWORD *)(v11 + 108);
    std::__function::__value_func<float ()(float)>::operator=[abi:ne180100]((void *)(v11 + 160), v11 + 112);
    if (v10 == -96) {
      break;
    }
    uint64_t v9 = v10 - 48;
    if (*(float *)&v14[8] >= *(float *)(a1 + v10 + 56))
    {
      uint64_t v12 = a1 + v9 + 144;
      goto LABEL_12;
    }
  }
  uint64_t v12 = a1;
LABEL_12:
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v14;
  *(void *)(v12 + 4) = *(void *)&v14[4];
  *(_DWORD *)(v12 + 12) = v15;
  std::__function::__value_func<float ()(float)>::operator=[abi:ne180100]((void *)(a1 + v10 + 112), (uint64_t)v16);
  if (++v8 != 8)
  {
    std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v16);
    goto LABEL_14;
  }
  BOOL v4 = v6 + 48 == a2;
  std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v16);
  return v4;
}

void sub_221ED46AC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<float>::Envelope<std::__wrap_iter<Phase::Envelope<float>::Segment *>>(Phase::Vector<float,2ul> const&,std::__wrap_iter<Phase::Envelope<float>::Segment *>,std::__wrap_iter<Phase::Envelope<float>::Segment *>)::{lambda(Phase::Envelope<float>::SegmentInternal const&,Phase::Envelope<float>::SegmentInternal const&)#1} &,Phase::Envelope<float>::SegmentInternal*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  float result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<float>::Envelope<std::__wrap_iter<Phase::Envelope<float>::Segment *>>(Phase::Vector<float,2ul> const&,std::__wrap_iter<Phase::Envelope<float>::Segment *>,std::__wrap_iter<Phase::Envelope<float>::Segment *>)::{lambda(Phase::Envelope<float>::SegmentInternal const&,Phase::Envelope<float>::SegmentInternal const&)#1} &,Phase::Envelope<float>::SegmentInternal*>((long long *)a1, a2, a3);
  if (*(float *)(a4 + 8) < *(float *)(a3 + 8))
  {
    float result = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<Phase::Envelope<float>::SegmentInternal *&,Phase::Envelope<float>::SegmentInternal *&>((long long *)a3, a4);
    if (*(float *)(a3 + 8) < *(float *)(a2 + 8))
    {
      float result = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<Phase::Envelope<float>::SegmentInternal *&,Phase::Envelope<float>::SegmentInternal *&>((long long *)a2, a3);
      if (*(float *)(a2 + 8) < *(float *)(a1 + 8))
      {
        return std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<Phase::Envelope<float>::SegmentInternal *&,Phase::Envelope<float>::SegmentInternal *&>((long long *)a1, a2);
      }
    }
  }
  return result;
}

void *std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<float>::Envelope<std::__wrap_iter<Phase::Envelope<float>::Segment *>>(Phase::Vector<float,2ul> const&,std::__wrap_iter<Phase::Envelope<float>::Segment *>,std::__wrap_iter<Phase::Envelope<float>::Segment *>)::{lambda(Phase::Envelope<float>::SegmentInternal const&,Phase::Envelope<float>::SegmentInternal const&)#1} &,Phase::Envelope<float>::SegmentInternal*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  float result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Phase::Envelope<float>::Envelope<std::__wrap_iter<Phase::Envelope<float>::Segment *>>(Phase::Vector<float,2ul> const&,std::__wrap_iter<Phase::Envelope<float>::Segment *>,std::__wrap_iter<Phase::Envelope<float>::Segment *>)::{lambda(Phase::Envelope<float>::SegmentInternal const&,Phase::Envelope<float>::SegmentInternal const&)#1} &,Phase::Envelope<float>::SegmentInternal*>(a1, a2, a3, a4);
  if (*(float *)(a5 + 8) < *(float *)(a4 + 8))
  {
    float result = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<Phase::Envelope<float>::SegmentInternal *&,Phase::Envelope<float>::SegmentInternal *&>((long long *)a4, a5);
    if (*(float *)(a4 + 8) < *(float *)(a3 + 8))
    {
      float result = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<Phase::Envelope<float>::SegmentInternal *&,Phase::Envelope<float>::SegmentInternal *&>((long long *)a3, a4);
      if (*(float *)(a3 + 8) < *(float *)(a2 + 8))
      {
        float result = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<Phase::Envelope<float>::SegmentInternal *&,Phase::Envelope<float>::SegmentInternal *&>((long long *)a2, a3);
        if (*(float *)(a2 + 8) < *(float *)(a1 + 8))
        {
          return std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<Phase::Envelope<float>::SegmentInternal *&,Phase::Envelope<float>::SegmentInternal *&>((long long *)a1, a2);
        }
      }
    }
  }
  return result;
}

void *Phase::Controller::RouterCommandBatch::Clear(void *this)
{
  uint64_t v1 = this;
  uint64_t v2 = *this;
  if (*this)
  {
    do
    {
      uint64_t v3 = *(void *)(v2 + 40);
      std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::Controller::RouterCommandBatch,std::pair<Phase::Handle64,unsigned long long>,std::shared_ptr<Phase::Controller::Renderer>,unsigned long long,std::pair<Phase::UniqueObjectId,BOOL>>,(std::__variant_detail::_Trait)1>::~__dtor(v2 + 8);
      this = (void *)MEMORY[0x223C938A0](v2, 0x1022C4068034D05);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  *uint64_t v1 = 0;
  return this;
}

void Phase::Controller::RouterCommand::~RouterCommand(Phase::Controller::RouterCommand *this)
{
}

void Phase::Controller::RouterCommand::AddRenderer()
{
}

void Phase::Controller::RouterCommand::NotifyCulled()
{
}

uint64_t std::variant<std::monostate,Phase::Controller::RouterCommandBatch,std::pair<Phase::Handle64,unsigned long long>,std::shared_ptr<Phase::Controller::Renderer>,unsigned long long,std::pair<Phase::UniqueObjectId,BOOL>>::operator=[abi:ne180100]<std::pair<Phase::UniqueObjectId,BOOL>,0,std::pair<Phase::UniqueObjectId,BOOL>,5ul,0>(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 24) == 5)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  }
  else
  {
    std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,Phase::Controller::RouterCommandBatch,std::pair<Phase::Handle64,unsigned long long>,std::shared_ptr<Phase::Controller::Renderer>,unsigned long long,std::pair<Phase::UniqueObjectId,BOOL>>>::__emplace[abi:ne180100]<5ul,std::pair<Phase::UniqueObjectId,BOOL>>(a1, (long long *)a2);
  }
  return a1;
}

Phase::Controller::RouterCommandList *Phase::Controller::RouterCommandList::ExecuteCommands(atomic_ullong *this, void *a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  memset(v7, 0, sizeof(v7));
  float result = Phase::Controller::RouterCommandList::SortCommandList((Phase::Controller::RouterCommandList *)this, (Phase::Controller::RouterCommand *)atomic_exchange(this + 4, 0), (Phase::Controller::RouterCommand **)v7);
  if (*(void *)&v7[0]) {
LABEL_8:
  }
    std::terminate();
  for (uint64_t i = 1; i != 4; ++i)
  {
    uint64_t v6 = (uint64_t (*)(void *))this[i];
    if (!v6) {
      goto LABEL_8;
    }
    if (*(void *)((char *)v7 + i * 8)) {
      float result = (Phase::Controller::RouterCommandList *)v6(a2);
    }
  }
  return result;
}

Phase::Controller::RouterCommandList *Phase::Controller::RouterCommandList::SortCommandList(Phase::Controller::RouterCommandList *this, Phase::Controller::RouterCommand *a2, Phase::Controller::RouterCommand **a3)
{
  if (a2)
  {
    BOOL v4 = a2;
    uint64_t v5 = this;
    do
    {
      uint64_t v6 = (Phase::Controller::RouterCommand *)*((void *)v4 + 5);
      uint64_t v7 = *(unsigned int *)v4;
      if (v7)
      {
        if (v7 > 3)
        {
          Phase::Controller::RouterCommand::~RouterCommand(v4);
          MEMORY[0x223C938A0]();
          std::terminate();
        }
        *((void *)v4 + 5) = a3[v7];
        a3[v7] = v4;
      }
      else
      {
        if (*((_DWORD *)v4 + 8) != 1) {
          std::__throw_bad_variant_access[abi:ne180100]();
        }
        Phase::Controller::RouterCommandList::SortCommandList(v5, *((Phase::Controller::RouterCommand **)v4 + 1), a3);
        *((void *)v4 + 1) = 0;
        std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::Controller::RouterCommandBatch,std::pair<Phase::Handle64,unsigned long long>,std::shared_ptr<Phase::Controller::Renderer>,unsigned long long,std::pair<Phase::UniqueObjectId,BOOL>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v4 + 8);
        this = (Phase::Controller::RouterCommandList *)MEMORY[0x223C938A0](v4, 0x1022C4068034D05);
      }
      BOOL v4 = v6;
    }
    while (v6);
  }
  return this;
}

void sub_221ED4C10(void *a1)
{
}

uint64_t Phase::Controller::RouterCommandList::Clear(uint64_t this)
{
  unint64_t v1 = atomic_exchange((atomic_ullong *volatile)(this + 32), 0);
  if (v1)
  {
    do
    {
      unint64_t v2 = *(void *)(v1 + 40);
      std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::Controller::RouterCommandBatch,std::pair<Phase::Handle64,unsigned long long>,std::shared_ptr<Phase::Controller::Renderer>,unsigned long long,std::pair<Phase::UniqueObjectId,BOOL>>,(std::__variant_detail::_Trait)1>::~__dtor(v1 + 8);
      this = MEMORY[0x223C938A0](v1, 0x1022C4068034D05);
      unint64_t v1 = v2;
    }
    while (v2);
  }
  return this;
}

Phase::Controller::SpatialSubmixRouter *Phase::Controller::SpatialSubmixRouter::SpatialSubmixRouter(Phase::Controller::SpatialSubmixRouter *this, const Phase::Controller::SpatialModelerInfo *a2, Phase::Controller::RendererSystem *a3, Phase::Controller::RenderGroupMgr *a4)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  long long v7 = *(_OWORD *)off_26D4739D8;
  *(_OWORD *)this = xmmword_26D4739C8;
  *((_OWORD *)this + 1) = v7;
  *((_OWORD *)this + 2) = 0u;
  *((void *)this + 6) = a2;
  *((void *)this + 7) = (char *)this + 56;
  *((void *)this + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::Controller::RouterCommandBatch,std::pair<Phase::Handle64,unsigned long long>,std::shared_ptr<Phase::Controller::Renderer>,unsigned long long,std::pair<Phase::UniqueObjectId,BOOL>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = (char *)this + 56;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 8std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::Controller::RouterCommandBatch,std::pair<Phase::Handle64,unsigned long long>,std::shared_ptr<Phase::Controller::Renderer>,unsigned long long,std::pair<Phase::UniqueObjectId,BOOL>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0u;
  *((void *)this + 13) = 0;
  *((_DWORD *)this + 2std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::Controller::RouterCommandBatch,std::pair<Phase::Handle64,unsigned long long>,std::shared_ptr<Phase::Controller::Renderer>,unsigned long long,std::pair<Phase::UniqueObjectId,BOOL>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 1065353216;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((_DWORD *)this + 3std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::Controller::RouterCommandBatch,std::pair<Phase::Handle64,unsigned long long>,std::shared_ptr<Phase::Controller::Renderer>,unsigned long long,std::pair<Phase::UniqueObjectId,BOOL>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 1065353216;
  *((_OWORD *)this + 10) = 0u;
  *((_DWORD *)this + 44) = 0;
  *(void *)((char *)this + 180) = 0xFFFFFFFFLL;
  uint64_t v8 = (Phase::Logger *)std::__shared_mutex_base::__shared_mutex_base((std::__shared_mutex_base *)((char *)this + 192));
  *((void *)this + 45) = a3;
  *((void *)this + 46) = a4;
  *((void *)this + 55) = 0;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 40std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::Controller::RouterCommandBatch,std::pair<Phase::Handle64,unsigned long long>,std::shared_ptr<Phase::Controller::Renderer>,unsigned long long,std::pair<Phase::UniqueObjectId,BOOL>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  uint64_t v9 = *(void *)(*((void *)this + 6) + 240);
  if (!v9)
  {
    unint64_t v22 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v8)
                                                                                        + 224)));
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      Phase::Controller::SpatialModelerInfo::GetDescription((uint64_t *)__p, *((Phase::Controller::SpatialModelerInfo **)this + 6));
      unint64_t v23 = v28 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 136315650;
      *(void *)&uint8_t buf[4] = "CvmSpatialSubmixRouter.mm";
      __int16 v31 = 1024;
      int v32 = 283;
      __int16 v33 = 2080;
      float v34 = v23;
      _os_log_impl(&dword_221E5E000, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [mpSpatialModelerInfo->mpRendererConfig == nullptr is true]: \"%s [SpatialSubmixRouter]: Couldn't find a valid RendererConfig!\"", buf, 0x1Cu);
      if (v28 < 0) {
        operator delete(__p[0]);
      }
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "%s [SpatialSubmixRouter]: Couldn't find a valid RendererConfig!");
LABEL_24:
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
  }
  if (!*(_DWORD *)(v9 + 8))
  {
    unint64_t v25 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v8)
                                                                                        + 224)));
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      Phase::Controller::SpatialModelerInfo::GetDescription((uint64_t *)__p, *((Phase::Controller::SpatialModelerInfo **)this + 6));
      float v26 = v28 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 136315650;
      *(void *)&uint8_t buf[4] = "CvmSpatialSubmixRouter.mm";
      __int16 v31 = 1024;
      int v32 = 288;
      __int16 v33 = 2080;
      float v34 = v26;
      _os_log_impl(&dword_221E5E000, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [mpSpatialModelerInfo->mpRendererConfig->mRendererType == RendererType::None is true]: \"%s [SpatialSubmixRouter]: Couldn't find a valid RendererType!\"", buf, 0x1Cu);
      if (v28 < 0) {
        operator delete(__p[0]);
      }
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "%s [SpatialSubmixRouter]: Couldn't find a valid RendererType!");
    goto LABEL_24;
  }
  uint64_t v10 = (char *)operator new(0xC00uLL);
  *((void *)this + 47) = v10;
  *((void *)this + 4std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::Controller::RouterCommandBatch,std::pair<Phase::Handle64,unsigned long long>,std::shared_ptr<Phase::Controller::Renderer>,unsigned long long,std::pair<Phase::UniqueObjectId,BOOL>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v10;
  *((void *)this + 49) = v10 + 3072;
  std::vector<Phase::UniqueObjectId>::reserve((void **)this + 50, 0x80uLL);
  uint64_t v11 = (unsigned char *)*((void *)this + 53);
  if (*((void *)this + 55) - (void)v11 <= 0x3FFuLL)
  {
    uint64_t v12 = (unsigned char *)*((void *)this + 54);
    uint64_t v13 = (char *)operator new(0x400uLL);
    uint64_t v14 = &v13[(v12 - v11) & 0xFFFFFFFFFFFFFFF8];
    int v15 = v14;
    if (v12 != v11)
    {
      int v15 = &v13[(v12 - v11) & 0xFFFFFFFFFFFFFFF8];
      do
      {
        uint64_t v16 = *((void *)v12 - 1);
        v12 -= 8;
        *((void *)v15 - 1) = v16;
        v15 -= 8;
      }
      while (v12 != v11);
    }
    *((void *)this + 53) = v15;
    *((void *)this + 54) = v14;
    *((void *)this + 55) = v13 + 1024;
    if (v11) {
      operator delete(v11);
    }
  }
  uint64_t v17 = *((void *)this + 45);
  uint64_t v18 = *((void *)this + 6);
  float v19 = operator new(0x20uLL);
  void *v19 = &unk_26D473A28;
  v19[1] = Phase::Controller::SpatialSubmixRouter::OnRendererChanged;
  void v19[2] = 0;
  v19[3] = this;
  void v29[3] = v19;
  *(void *)std::string buf = v18 + 24;
  unint64_t v20 = std::__hash_table<std::__hash_value_type<unsigned long long,std::function<void ()(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>)>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::function<void ()(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>)>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::function<void ()(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>)>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::function<void ()(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>)>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v17 + 184, (unint64_t *)(v18 + 24), (uint64_t)&std::piecewise_construct, (void **)buf);
  std::function<void ()(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>)>::operator=(v20 + 3, (uint64_t)v29);
  std::__function::__value_func<void ()(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>)>::~__value_func[abi:ne180100](v29);
  return this;
}

void sub_221ED504C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  __cxa_free_exception(v18);
  unint64_t v20 = (void *)v13[53];
  if (v20)
  {
    v13[54] = v20;
    operator delete(v20);
  }
  uint64_t v21 = *v16;
  if (*v16)
  {
    v13[51] = v21;
    operator delete(v21);
  }
  unint64_t v22 = *v17;
  if (*v17)
  {
    v13[48] = v22;
    operator delete(v22);
  }
  Phase::Controller::SubmixSlotMap<Phase::Controller::SpatialModelerInstance::SubmixInfo>::~SubmixSlotMap(v15);
  std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>>>::~__hash_table((uint64_t)(v13 + 10));
  std::__list_imp<Phase::Controller::SpatialSubmixRouter::StoppingRenderer>::clear(v14);
  Phase::Controller::RouterCommandBatch::Clear(v13 + 5);
  Phase::Controller::RouterCommandList::Clear((uint64_t)v13);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::SpatialSubmixRouter::ExecuteAddRenderer(uint64_t this, void *a2, Phase::Controller::RouterCommand *a3)
{
  if (a2)
  {
    BOOL v4 = a2;
    uint64_t v5 = this;
    uint64_t v6 = (uint64_t *)(this + 80);
    float v26 = (void *)(this + 96);
    do
    {
      long long v7 = v4;
      BOOL v4 = (void *)v4[5];
      if (*((_DWORD *)v7 + 8) != 3) {
        std::__throw_bad_variant_access[abi:ne180100]();
      }
      uint64_t v9 = v7[1];
      uint64_t v8 = (std::__shared_weak_count *)v7[2];
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v10 = *(void *)(v9 + 40);
      unint64_t v11 = *(void *)(v5 + 88);
      if (v11)
      {
        uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
        v12.i16[0] = vaddlv_u8(v12);
        if (v12.u32[0] > 1uLL)
        {
          unint64_t v3 = *(void *)(v9 + 40);
          if (v11 <= v10) {
            unint64_t v3 = v10 % v11;
          }
        }
        else
        {
          unint64_t v3 = (v11 - 1) & v10;
        }
        uint64_t v13 = *(void ***)(*v6 + 8 * v3);
        if (v13)
        {
          for (uint64_t i = *v13; i; uint64_t i = (void *)*i)
          {
            unint64_t v15 = i[1];
            if (v15 == v10)
            {
              if (i[2] == v10) {
                goto LABEL_44;
              }
            }
            else
            {
              if (v12.u32[0] > 1uLL)
              {
                if (v15 >= v11) {
                  v15 %= v11;
                }
              }
              else
              {
                v15 &= v11 - 1;
              }
              if (v15 != v3) {
                break;
              }
            }
          }
        }
      }
      uint64_t i = operator new(0x28uLL);
      void *i = 0;
      i[1] = v10;
      i[2] = *(void *)(v9 + 40);
      i[3] = 0;
      i[4] = 0;
      float v16 = (float)(unint64_t)(*(void *)(v5 + 104) + 1);
      float v17 = *(float *)(v5 + 112);
      if (!v11 || (float)(v17 * (float)v11) < v16)
      {
        BOOL v18 = (v11 & (v11 - 1)) != 0;
        if (v11 < 3) {
          BOOL v18 = 1;
        }
        unint64_t v19 = v18 | (2 * v11);
        unint64_t v20 = vcvtps_u32_f32(v16 / v17);
        if (v19 <= v20) {
          size_t v21 = v20;
        }
        else {
          size_t v21 = v19;
        }
        std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>((uint64_t)v6, v21);
        unint64_t v11 = *(void *)(v5 + 88);
        if ((v11 & (v11 - 1)) != 0)
        {
          if (v11 <= v10) {
            unint64_t v3 = v10 % v11;
          }
          else {
            unint64_t v3 = v10;
          }
        }
        else
        {
          unint64_t v3 = (v11 - 1) & v10;
        }
      }
      uint64_t v22 = *v6;
      unint64_t v23 = *(void **)(*v6 + 8 * v3);
      if (v23)
      {
        void *i = *v23;
      }
      else
      {
        void *i = *v26;
        void *v26 = i;
        *(void *)(v22 + 8 * v3) = v26;
        if (!*i) {
          goto LABEL_43;
        }
        unint64_t v24 = *(void *)(*i + 8);
        if ((v11 & (v11 - 1)) != 0)
        {
          if (v24 >= v11) {
            v24 %= v11;
          }
        }
        else
        {
          v24 &= v11 - 1;
        }
        unint64_t v23 = (void *)(*v6 + 8 * v24);
      }
      void *v23 = i;
LABEL_43:
      ++*(void *)(v5 + 104);
LABEL_44:
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v25 = (std::__shared_weak_count *)i[4];
      i[3] = v9;
      i[4] = v8;
      if (v25) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v25);
      }
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
      std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::Controller::RouterCommandBatch,std::pair<Phase::Handle64,unsigned long long>,std::shared_ptr<Phase::Controller::Renderer>,unsigned long long,std::pair<Phase::UniqueObjectId,BOOL>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)(v7 + 1));
      this = MEMORY[0x223C938A0](v7, 0x1022C4068034D05);
    }
    while (v4);
  }
  return this;
}

uint64_t Phase::Controller::SpatialSubmixRouter::ExecuteRemoveRenderer(uint64_t this, void *a2, Phase::Controller::RouterCommand *a3)
{
  if (a2)
  {
    unint64_t v3 = a2;
    BOOL v4 = (void *)(this + 80);
    do
    {
      uint64_t v5 = (void *)v3[5];
      if (*((_DWORD *)v3 + 8) != 4) {
        std::__throw_bad_variant_access[abi:ne180100]();
      }
      std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>>>::__erase_unique<unsigned long long>(v4, v3[1]);
      std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::Controller::RouterCommandBatch,std::pair<Phase::Handle64,unsigned long long>,std::shared_ptr<Phase::Controller::Renderer>,unsigned long long,std::pair<Phase::UniqueObjectId,BOOL>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)(v3 + 1));
      this = MEMORY[0x223C938A0](v3, 0x1022C4068034D05);
      unint64_t v3 = v5;
    }
    while (v5);
  }
  return this;
}

uint64_t Phase::Controller::SpatialSubmixRouter::ExecuteNotifyCulled(uint64_t this, void *a2, Phase::Controller::RouterCommand *a3)
{
  if (a2)
  {
    unint64_t v3 = a2;
    BOOL v4 = (void *)(this + 120);
    do
    {
      uint64_t v5 = (void *)v3[5];
      if (*((_DWORD *)v3 + 8) != 5) {
        std::__throw_bad_variant_access[abi:ne180100]();
      }
      char v6 = *((unsigned char *)v3 + 24);
      *((unsigned char *)Phase::Controller::SubmixSlotMap<Phase::Controller::SpatialSubmixRouter::SubmixParams>::MutableAt(v4, v3[1], v3[2])+ 112) = v6 & 1;
      std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::Controller::RouterCommandBatch,std::pair<Phase::Handle64,unsigned long long>,std::shared_ptr<Phase::Controller::Renderer>,unsigned long long,std::pair<Phase::UniqueObjectId,BOOL>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)(v3 + 1));
      this = MEMORY[0x223C938A0](v3, 0x1022C4068034D05);
      unint64_t v3 = v5;
    }
    while (v5);
  }
  return this;
}

void std::vector<Phase::UniqueObjectId>::reserve(void **a1, unint64_t a2)
{
  BOOL v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 4)
  {
    if (a2 >> 60) {
      std::vector<Phase::MetaParamValue>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    char v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::UniqueObjectId>>(v3, a2);
    long long v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    uint64_t v9 = &v6[16 * v8];
    unint64_t v11 = (char *)*a1;
    unint64_t v10 = (char *)a1[1];
    uint8x8_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *((_OWORD *)v12 - 1) = *((_OWORD *)v10 - 1);
        v12 -= 16;
        v10 -= 16;
      }
      while (v10 != v11);
      unint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void *Phase::Controller::SpatialSubmixRouter::OnRendererChanged(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  long long v7 = (uint64_t *)(a1 + 80);
  float result = std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::find<PHASETapType>((void *)(a1 + 80), a2);
  if (result)
  {
    uint64_t v10 = *a3;
    uint64_t v9 = a3[1];
    unint64_t v11 = *(void *)(*a3 + 40);
    unint64_t v12 = *(void *)(a1 + 88);
    if (v12)
    {
      uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
      v13.i16[0] = vaddlv_u8(v13);
      if (v13.u32[0] > 1uLL)
      {
        unint64_t v3 = *(void *)(*a3 + 40);
        if (v12 <= v11) {
          unint64_t v3 = v11 % v12;
        }
      }
      else
      {
        unint64_t v3 = (v12 - 1) & v11;
      }
      uint64_t v14 = *(void **)(*v7 + 8 * v3);
      if (v14)
      {
        for (uint64_t i = (void *)*v14; i; uint64_t i = (void *)*i)
        {
          unint64_t v16 = i[1];
          if (v16 == v11)
          {
            if (i[2] == v11)
            {
              if (v9) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
              }
              char v30 = (std::__shared_weak_count *)i[4];
              i[3] = v10;
              i[4] = v9;
              if (v30) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v30);
              }
              __int16 v31 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance((Phase::Logger *)v30)
                                                                                                  + 224)));
              if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
              {
                Phase::Controller::SpatialModelerInfo::GetDescription((uint64_t *)__p, *(Phase::Controller::SpatialModelerInfo **)(a1 + 48));
                int v32 = v35 >= 0 ? __p : (void **)__p[0];
                *(_DWORD *)std::string buf = 136315906;
                float v37 = "CvmSpatialSubmixRouter.mm";
                __int16 v38 = 1024;
                int v39 = 910;
                __int16 v40 = 2080;
                uint64_t v41 = v32;
                __int16 v42 = 2048;
                unint64_t v43 = a2;
                _os_log_impl(&dword_221E5E000, v31, OS_LOG_TYPE_ERROR, "%25s:%-5d %s [SpatialSubmixRouter]: New rendererId %llu was already present in working renderer map", buf, 0x26u);
                if (v35 < 0) {
                  operator delete(__p[0]);
                }
              }

LABEL_43:
              uint64_t v27 = *(void *)(a1 + 368);
              uint64_t v28 = *a3;
              float v29 = (std::__shared_weak_count *)a3[1];
              v33[0] = v28;
              v33[1] = (uint64_t)v29;
              if (v29) {
                atomic_fetch_add_explicit(&v29->__shared_weak_owners_, 1uLL, memory_order_relaxed);
              }
              Phase::Controller::RenderGroupMgr::UpdateRenderer(v27, a2, v33);
              if (v29) {
                std::__shared_weak_count::__release_weak(v29);
              }
              operator new();
            }
          }
          else
          {
            if (v13.u32[0] > 1uLL)
            {
              if (v16 >= v12) {
                v16 %= v12;
              }
            }
            else
            {
              v16 &= v12 - 1;
            }
            if (v16 != v3) {
              break;
            }
          }
        }
      }
    }
    float v17 = operator new(0x28uLL);
    void *v17 = 0;
    v17[1] = v11;
    v17[2] = v11;
    v17[3] = v10;
    void v17[4] = v9;
    if (v9) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    }
    float v18 = (float)(unint64_t)(*(void *)(a1 + 104) + 1);
    float v19 = *(float *)(a1 + 112);
    if (!v12 || (float)(v19 * (float)v12) < v18)
    {
      BOOL v20 = 1;
      if (v12 >= 3) {
        BOOL v20 = (v12 & (v12 - 1)) != 0;
      }
      unint64_t v21 = v20 | (2 * v12);
      unint64_t v22 = vcvtps_u32_f32(v18 / v19);
      if (v21 <= v22) {
        size_t v23 = v22;
      }
      else {
        size_t v23 = v21;
      }
      std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>((uint64_t)v7, v23);
      unint64_t v12 = *(void *)(a1 + 88);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v12 <= v11) {
          unint64_t v3 = v11 % v12;
        }
        else {
          unint64_t v3 = v11;
        }
      }
      else
      {
        unint64_t v3 = (v12 - 1) & v11;
      }
    }
    uint64_t v24 = *v7;
    unint64_t v25 = *(void **)(*v7 + 8 * v3);
    if (v25)
    {
      void *v17 = *v25;
    }
    else
    {
      void *v17 = *(void *)(a1 + 96);
      *(void *)(a1 + 96) = v17;
      *(void *)(v24 + 8 * v3) = a1 + 96;
      if (!*v17)
      {
LABEL_42:
        ++*(void *)(a1 + 104);
        goto LABEL_43;
      }
      unint64_t v26 = *(void *)(*v17 + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v26 >= v12) {
          v26 %= v12;
        }
      }
      else
      {
        v26 &= v12 - 1;
      }
      unint64_t v25 = (void *)(*v7 + 8 * v26);
    }
    void *v25 = v17;
    goto LABEL_42;
  }
  return result;
}

void sub_221ED59C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void Phase::Controller::SpatialSubmixRouter::~SpatialSubmixRouter(Phase::Controller::SpatialSubmixRouter *this)
{
  Phase::Controller::SpatialSubmixRouter::Reset(this);
  unint64_t v2 = (void *)*((void *)this + 53);
  if (v2)
  {
    *((void *)this + 54) = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 50);
  if (v3)
  {
    *((void *)this + 51) = v3;
    operator delete(v3);
  }
  BOOL v4 = (void *)*((void *)this + 47);
  if (v4)
  {
    *((void *)this + 4std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::Controller::RouterCommandBatch,std::pair<Phase::Handle64,unsigned long long>,std::shared_ptr<Phase::Controller::Renderer>,unsigned long long,std::pair<Phase::UniqueObjectId,BOOL>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v4;
    operator delete(v4);
  }
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 304));
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 256));
  std::mutex::~mutex((std::mutex *)this + 3);
  int64_t v5 = (std::__shared_weak_count *)*((void *)this + 21);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)this + 120);
  std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>>>::~__hash_table((uint64_t)this + 80);
  std::__list_imp<Phase::Controller::SpatialSubmixRouter::StoppingRenderer>::clear((uint64_t *)this + 7);
  Phase::Controller::RouterCommandBatch::Clear((void *)this + 5);
  Phase::Controller::RouterCommandList::Clear((uint64_t)this);
}

void *Phase::Controller::SpatialSubmixRouter::Reset(Phase::Controller::SpatialSubmixRouter *this)
{
  Phase::Controller::SubmixSlotMap<Phase::Controller::SpatialModelerInstance::SubmixInfo>::Clear((uint64_t)this + 120);
  std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>>>::clear((uint64_t)this + 80);
  std::__list_imp<Phase::Controller::SpatialSubmixRouter::StoppingRenderer>::clear((uint64_t *)this + 7);
  Phase::Controller::RouterCommandList::Clear((uint64_t)this);

  return Phase::Controller::RouterCommandBatch::Clear((void *)this + 5);
}

Phase::Logger *Phase::Controller::SpatialSubmixRouter::CopyRuntimeSettingsFrom(Phase::Logger *this, const Phase::Controller::SpatialSubmixRouter *a2)
{
  unint64_t v2 = (uint64_t **)*((void *)this + 20);
  unsigned int v3 = *((_DWORD *)this + 44);
  BOOL v4 = &v2[3 * v3];
  if (v3)
  {
    int64_t v5 = *v2;
    if (!*v2)
    {
      char v6 = v2 + 3;
      while (1)
      {
        unint64_t v2 = v6;
        if (v6 >= v4) {
          break;
        }
        v6 += 3;
        int64_t v5 = *v2;
        if (*v2) {
          goto LABEL_9;
        }
      }
      int64_t v5 = 0;
    }
LABEL_9:
    unint64_t v7 = (unint64_t)v4;
  }
  else
  {
    int64_t v5 = 0;
    unint64_t v7 = *((void *)this + 20);
  }
  if (v2 != v4)
  {
    uint64_t v8 = (char *)a2 + 120;
    do
    {
      this = Phase::Controller::SubmixSlotMap<Phase::Controller::SpatialSubmixRouter::SubmixParams>::At((uint64_t)v8, *v5, v5[1]);
      v5[6] = *((void *)this + 6);
      if ((unint64_t)v2 < v7)
      {
        uint64_t v9 = v2 + 3;
        while (1)
        {
          unint64_t v2 = v9;
          if ((unint64_t)v9 >= v7) {
            break;
          }
          v9 += 3;
          int64_t v5 = *v2;
          if (*v2) {
            goto LABEL_18;
          }
        }
        int64_t v5 = 0;
      }
LABEL_18:
      ;
    }
    while (v2 != v4);
  }
  return this;
}

Phase::Logger *Phase::Controller::SubmixSlotMap<Phase::Controller::SpatialSubmixRouter::SubmixParams>::At(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  *(void *)uint64_t v10 = a2;
  *(void *)&v10[8] = a3;
  float result = (Phase::Logger *)std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((void *)a1, v10);
  if (result) {
    uint64_t v6 = *((void *)result + 4);
  }
  else {
    uint64_t v6 = 0;
  }
  if (*(_DWORD *)(a1 + 56) <= v6
    || (uint64_t v7 = *(void *)(a1 + 40), *(_DWORD *)(v7 + 24 * v6 + 20) != HIDWORD(v6))
    || (float result = *(Phase::Logger **)(v7 + 24 * v6)) == 0)
  {
    uint64_t v8 = **(id **)(Phase::Logger::GetInstance(result) + 224);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v10 = 136315906;
      *(void *)&void v10[4] = "CvmSubmixSlotMapImpl.hpp";
      *(_WORD *)&unsigned char v10[12] = 1024;
      *(_DWORD *)&v10[14] = 134;
      __int16 v11 = 2048;
      uint64_t v12 = v6;
      __int16 v13 = 2048;
      uint64_t v14 = a2;
      _os_log_impl(&dword_221E5E000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (InvalidId) [nullptr == pObject is true]: \"SubmixSlotMap::At couldn't find SubmixHandle %llu for SubmixId %llu\"", v10, 0x26u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _ZN5Phase10Controller9InvalidIdCI1St11logic_errorEPKc(exception, "SubmixSlotMap::At couldn't find SubmixHandle %llu for SubmixId %llu");
  }
  return result;
}

void sub_221ED5D54(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::SpatialSubmixRouter::AddInput(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v6 = a2;
  uint64_t v81 = *MEMORY[0x263EF8340];
  uint64_t v8 = (void *)(a1 + 120);
  *(void *)std::string buf = a2;
  *(void *)&buf[8] = a3;
  uint64_t v9 = (Phase::Logger *)std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((void *)(a1 + 120), buf);
  if (v9)
  {
    uint64_t v48 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v9)
                                                                                        + 224)));
    if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
    {
      Phase::Controller::SpatialModelerInfo::GetDescription((uint64_t *)&__p, *(Phase::Controller::SpatialModelerInfo **)(a1 + 48));
      int64_t v49 = v73 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)std::string buf = 136315906;
      *(void *)&uint8_t buf[4] = "CvmSpatialSubmixRouter.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 335;
      __int16 v77 = 2080;
      *(void *)double v78 = v49;
      *(_WORD *)&v78[8] = 2048;
      *(void *)&v78[10] = v6;
      _os_log_impl(&dword_221E5E000, v48, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (IdAlreadyExists) [HasSubmix(inSubmixId) is true]: \"%s [SpatialSubmixRouter]: inSubmixId %llu already exists!\"", buf, 0x26u);
      if (v73 < 0) {
        operator delete(__p);
      }
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _ZN5Phase10Controller15IdAlreadyExistsCI1St11logic_errorEPKc(exception, "%s [SpatialSubmixRouter]: inSubmixId %llu already exists!");
  }
  *(void *)&long long v61 = v6;
  *((void *)&v61 + 1) = a3;
  *(void *)&long long v62 = 0;
  DWORD2(v62) = 2;
  *(double *)&long long v63 = a4;
  *((void *)&v63 + 1) = 0x7FEFFFFFFFFFFFFFLL;
  uint64_t v64 = -1;
  uint64_t v10 = Phase::Fader<double>::Fader((Phase::Logger *)&v66, 0.0);
  char v70 = 0;
  *(void *)&long long v75 = v6;
  *((void *)&v75 + 1) = a3;
  if (!(v6 | a3))
  {
    int64_t v51 = **(id **)(Phase::Logger::GetInstance(v10) + 224);
    if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = "CvmSubmixSlotMapImpl.hpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 60;
      _os_log_impl(&dword_221E5E000, v51, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [kInvalidSubmixId == inSubmixId is true]: \"Invalid SubmixId pass to SubmixSlotMap::Insert\"", buf, 0x12u);
    }
    uint64_t v52 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v52, "Invalid SubmixId pass to SubmixSlotMap::Insert");
    goto LABEL_66;
  }
  *(void *)std::string buf = v6;
  *(void *)&buf[8] = a3;
  uint64_t v60 = a3;
  __int16 v11 = (Phase::Logger *)std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>(v8, buf);
  if (v11)
  {
    uint64_t v53 = **(id **)(Phase::Logger::GetInstance(v11) + 224);
    if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315650;
      *(void *)&uint8_t buf[4] = "CvmSubmixSlotMapImpl.hpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 63;
      __int16 v77 = 2048;
      *(void *)double v78 = v6;
      _os_log_impl(&dword_221E5E000, v53, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [true == Contains(inSubmixId) is true]: \"SubmixId %llu already exists in SubmixSlotMap::Insert\"", buf, 0x1Cu);
    }
    uint64_t v52 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v52, "SubmixId %llu already exists in SubmixSlotMap::Insert");
LABEL_66:
    float v54 = (void (__cdecl *)(std::logic_error *__hidden))MEMORY[0x263F8C080];
    float v56 = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    goto LABEL_74;
  }
  unsigned int v12 = atomic_load((unsigned int *)(a1 + 180));
  if (v12 == -1) {
    goto LABEL_9;
  }
  *(void *)std::string buf = a1 + 192;
  buf[8] = 1;
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(a1 + 192));
  for (i = v12; i != -1; unsigned int v12 = i)
  {
    uint64_t v14 = *(void *)(a1 + 160);
    atomic_compare_exchange_strong((atomic_uint *volatile)(a1 + 180), &i, *(_DWORD *)(v14 + 24 * v12 + 16));
    if (i == v12)
    {
      Phase::Handle64::Set((Phase::Logger *)&__p, v12, *(unsigned int *)(v14 + 24 * v12 + 20));
      uint64_t v15 = (Phase::Logger *)std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)buf);
      uint64_t v74 = (uint64_t)__p;
      if (__p) {
        goto LABEL_11;
      }
      uint64_t v58 = **(id **)(Phase::Logger::GetInstance(v15) + 224);
      if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 136315650;
        *(void *)&uint8_t buf[4] = "CvmSubmixSlotMapImpl.hpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 68;
        __int16 v77 = 2048;
        *(void *)double v78 = v6;
        _os_log_impl(&dword_221E5E000, v58, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (InvalidId) [SubmixHandle::kInvalidHandle == submixHandle is true]: \"SubmixSlotMap::Insert unable to allocate new handle SubmixId %llu\"", buf, 0x1Cu);
      }
      uint64_t v52 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v52, "SubmixSlotMap::Insert unable to allocate new handle SubmixId %llu");
      goto LABEL_73;
    }
  }
  std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)buf);
LABEL_9:
  uint64_t v74 = atomic_fetch_add((atomic_uint *volatile)(a1 + 184), 1u) | 0x100000000;
LABEL_11:
  unint64_t v16 = (uint64_t *)(a1 + 160);
  unsigned int v17 = atomic_load((unsigned int *)(a1 + 184));
  uint64_t v18 = *(unsigned int *)(a1 + 176);
  if (v18 < v17)
  {
    uint64_t v19 = v17 >= 0x40 ? v17 + (v17 >> 1) : 64;
    if (v18 < v19)
    {
      Phase::details::SharedSlotMap<Phase::Controller::SpatialSubmixRouter::SubmixParams,Phase::Handle64>::AllocSlots(buf, v19);
      uint64_t v20 = *(void *)buf;
      if (v18)
      {
        uint64_t v59 = v6;
        uint64_t v21 = 0;
        do
        {
          uint64_t v22 = *v16;
          size_t v23 = (uint64_t *)(*v16 + v21);
          uint64_t v25 = *v23;
          uint64_t v24 = v23[1];
          if (v24) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
          }
          unint64_t v26 = (void *)(v20 + v21);
          uint64_t v27 = *(std::__shared_weak_count **)(v20 + v21 + 8);
          void *v26 = v25;
          v26[1] = v24;
          if (v27) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v27);
          }
          v26[2] = *(void *)(v22 + v21 + 16);
          v21 += 24;
        }
        while (24 * v18 != v21);
        unsigned int v28 = v18;
        uint64_t v6 = v59;
      }
      else
      {
        unsigned int v28 = 0;
      }
      float v29 = (void *)(v20 + 24 * v28 + 16);
      do
      {
        char v30 = (std::__shared_weak_count *)*(v29 - 1);
        *(v29 - 2) = 0;
        *(v29 - 1) = 0;
        if (v30) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v30);
        }
        *float v29 = 0x1FFFFFFFFLL;
        v29 += 3;
        LODWORD(v1std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::Controller::RouterCommandBatch,std::pair<Phase::Handle64,unsigned long long>,std::shared_ptr<Phase::Controller::Renderer>,unsigned long long,std::pair<Phase::UniqueObjectId,BOOL>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v18 + 1;
      }
      while (v19 != v18);
      std::string __p = (void *)(a1 + 192);
      char v72 = 1;
      std::__shared_mutex_base::lock((std::__shared_mutex_base *)(a1 + 192));
      __int16 v31 = *(std::__shared_weak_count **)(a1 + 168);
      uint64_t v32 = *(void *)&buf[8];
      *(void *)(a1 + 160) = v20;
      *(void *)(a1 + 16std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::Controller::RouterCommandBatch,std::pair<Phase::Handle64,unsigned long long>,std::shared_ptr<Phase::Controller::Renderer>,unsigned long long,std::pair<Phase::UniqueObjectId,BOOL>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v32;
      std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&__p);
      *(_DWORD *)(a1 + 176) = v19;
      if (v31) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v31);
      }
    }
  }
  uint64_t v33 = v74;
  uint64_t UniqueSlot = (std::__shared_weak_count *)Phase::details::SharedSlotMap<Phase::Controller::SpatialSubmixRouter::SubmixParams,Phase::Handle64>::GetUniqueSlot((uint64_t *)(a1 + 160), v74);
  char v35 = (char **)UniqueSlot;
  if (UniqueSlot)
  {
    unint64_t v36 = (char *)operator new(0x90uLL);
    *((void *)v36 + 1) = 0;
    *((void *)v36 + 2) = 0;
    *(void *)unint64_t v36 = &unk_26D473AA8;
    *(_OWORD *)(v36 + 24) = 0u;
    float v37 = v36 + 24;
    *(_OWORD *)(v36 + 72) = 0u;
    *(_OWORD *)(v36 + 40) = 0u;
    *(_OWORD *)(v36 + 104) = 0u;
    *(_OWORD *)(v36 + 120) = 0u;
    *((void *)v36 + 17) = 0;
    *(_OWORD *)(v36 + 8std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::Controller::RouterCommandBatch,std::pair<Phase::Handle64,unsigned long long>,std::shared_ptr<Phase::Controller::Renderer>,unsigned long long,std::pair<Phase::UniqueObjectId,BOOL>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0u;
    *(int64x2_t *)(v36 + 56) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    *((void *)v36 + 9) = -1;
    Phase::Fader<double>::Fader((Phase::Logger *)(v36 + 88), 0.0);
    v36[136] = 0;
    uint64_t UniqueSlot = (std::__shared_weak_count *)v35[1];
    *char v35 = v36 + 24;
    v35[1] = v36;
    if (UniqueSlot)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](UniqueSlot);
      float v37 = *v35;
    }
  }
  else
  {
    float v37 = 0;
  }
  if (!v33)
  {
    float v57 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)UniqueSlot) + 224);
    if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315906;
      *(void *)&uint8_t buf[4] = "CvmSubmixSlotMapImpl.hpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 76;
      __int16 v77 = 2048;
      *(void *)double v78 = 0;
      *(_WORD *)&v78[8] = 2048;
      *(void *)&v78[10] = v75;
      _os_log_impl(&dword_221E5E000, v57, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (InvalidId) [SubmixHandle::kInvalidHandle == submixHandle is true]: \"SubmixSlotMap::Insert couldn't find SubmixHandle %llu for SubmixId %llu\"", buf, 0x26u);
    }
    uint64_t v52 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v52, "SubmixSlotMap::Insert couldn't find SubmixHandle %llu for SubmixId %llu");
LABEL_73:
    float v54 = Phase::Controller::InvalidId::~InvalidId;
    float v56 = (std::logic_error_vtbl *)&unk_26D4724A0;
LABEL_74:
    v52->__vftable = v56;
    __cxa_throw(v52, v55, (void (*)(void *))v54);
  }
  long long v38 = v61;
  long long v39 = v62;
  long long v40 = v63;
  *((void *)v37 + 6) = v64;
  *((_OWORD *)v37 + 1) = v39;
  *((_OWORD *)v37 + 2) = v40;
  *(_OWORD *)float v37 = v38;
  *((void *)v37 + 7) = v65;
  if (v37 != (char *)&v61) {
    std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__assign_with_size[abi:ne180100]<Phase::Envelope<double>::SegmentInternal*,Phase::Envelope<double>::SegmentInternal*>((uint64_t)(v37 + 64), v66, v67, (v67 - v66) >> 6);
  }
  long long v41 = v68;
  *((void *)v37 + 13) = v69;
  *(_OWORD *)(v37 + 8std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::Controller::RouterCommandBatch,std::pair<Phase::Handle64,unsigned long long>,std::shared_ptr<Phase::Controller::Renderer>,unsigned long long,std::pair<Phase::UniqueObjectId,BOOL>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v41;
  v37[112] = v70;
  std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::Handle64>>>::__emplace_unique_key_args<Phase::UniqueObjectId,Phase::UniqueObjectId&,Phase::Handle64&>((uint64_t)v8, &v75, &v75, &v74);
  uint64_t v42 = v74;
  *(void *)std::string buf = &v66;
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *((void *)v37 + 2) = v42;
  *((void *)v37 + 7) = 0x3FF0000000000000;
  *(void *)std::string buf = &unk_26D4715B0;
  *(void *)&buf[8] = Phase::CurveFunction::Linear<double>;
  *(void *)&v78[4] = buf;
  Phase::Fader<double>::SetInternal((uint64_t)(v37 + 64), (uint64_t)buf, 1.0, 0.0);
  unint64_t v43 = (Phase::Logger *)std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](buf);
  if (*(_DWORD *)(a1 + 176) <= v42
    || *(_DWORD *)(*v16 + 24 * v42 + 20) != HIDWORD(v42)
    || (uint64_t v44 = *(void *)(*v16 + 24 * v42)) == 0
    || v6 != *(void *)v44
    || v60 != *(void *)(v44 + 8)
    || *(_DWORD *)(v44 + 24) != 2
    || *(double *)(v44 + 32) != a4)
  {
    std::terminate();
  }
  uint64_t v45 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v43)
                                                                                      + 224)));
  if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
  {
    Phase::Controller::SpatialModelerInfo::GetDescription((uint64_t *)&__p, *(Phase::Controller::SpatialModelerInfo **)(a1 + 48));
    if (v73 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    *(_DWORD *)std::string buf = 136316162;
    *(void *)&uint8_t buf[4] = "CvmSpatialSubmixRouter.mm";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 352;
    __int16 v77 = 2080;
    *(void *)double v78 = p_p;
    *(_WORD *)&v78[8] = 2048;
    *(void *)&v78[10] = v6;
    __int16 v79 = 2048;
    double v80 = a4;
    _os_log_impl(&dword_221E5E000, v45, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s [SpatialSubmixRouter]: Added submixId %llu, send level %f", buf, 0x30u);
    if (v73 < 0) {
      operator delete(__p);
    }
  }

  return v42;
}

void sub_221ED66C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  __cxa_free_exception(v31);
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  _Unwind_Resume(a1);
}

void Phase::Controller::SpatialSubmixRouter::RemoveInput(uint64_t a1, void *a2, void *a3)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  uint64_t v6 = (void *)(a1 + 120);
  *(void *)std::string buf = a2;
  *(void *)&buf[8] = a3;
  if (!std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((void *)(a1 + 120), buf))
  {
    uint64_t v20 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(0)
                                                                                        + 224)));
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      Phase::Controller::SpatialModelerInfo::GetDescription((uint64_t *)__p, *(Phase::Controller::SpatialModelerInfo **)(a1 + 48));
      uint64_t v21 = v26 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 136315906;
      *(void *)&uint8_t buf[4] = "CvmSpatialSubmixRouter.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 379;
      __int16 v28 = 2080;
      float v29 = v21;
      __int16 v30 = 2048;
      __int16 v31 = a2;
      _os_log_impl(&dword_221E5E000, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (InvalidId) [not HasSubmix(inSubmixId) is true]: \"%s [SpatialSubmixRouter]: Non-existent submixId %llu\"", buf, 0x26u);
      if (v26 < 0) {
        operator delete(__p[0]);
      }
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _ZN5Phase10Controller9InvalidIdCI1St11logic_errorEPKc(exception, "%s [SpatialSubmixRouter]: Non-existent submixId %llu");
  }
  Phase::Controller::SpatialSubmixRouter::SetPlayState(a1, (uint64_t)a2, (uint64_t)a3, 0);
  __p[0] = a2;
  __p[1] = a3;
  uint64_t v7 = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>(v6, __p);
  uint64_t v8 = v7;
  if (!v7)
  {
    size_t v23 = **(id **)(Phase::Logger::GetInstance(0) + 224);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315650;
      *(void *)&uint8_t buf[4] = "CvmSubmixSlotMapImpl.hpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 91;
      __int16 v28 = 2048;
      float v29 = (void **)__p[0];
      _os_log_impl(&dword_221E5E000, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (InvalidId) [iter == mSubmixHandleMap.end() is true]: \"SubmixSlotMap::Erase couldn't find SubmixId %llu\"", buf, 0x1Cu);
    }
    uint64_t v24 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _ZN5Phase10Controller9InvalidIdCI1St11logic_errorEPKc(v24, "SubmixSlotMap::Erase couldn't find SubmixId %llu");
  }
  uint64_t v9 = v7[4];
  uint64_t UniqueSlot = Phase::details::SharedSlotMap<Phase::Controller::SpatialSubmixRouter::SubmixParams,Phase::Handle64>::GetUniqueSlot((uint64_t *)(a1 + 160), v9);
  uint64_t v11 = UniqueSlot;
  if (UniqueSlot)
  {
    ++*(_DWORD *)(UniqueSlot + 20);
    unsigned int v12 = *(std::__shared_weak_count **)(UniqueSlot + 8);
    *(void *)uint64_t v11 = 0;
    *(void *)(v11 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::Controller::RouterCommandBatch,std::pair<Phase::Handle64,unsigned long long>,std::shared_ptr<Phase::Controller::Renderer>,unsigned long long,std::pair<Phase::UniqueObjectId,BOOL>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
    unsigned int v13 = atomic_load((unsigned int *)(a1 + 180));
    *(_DWORD *)(v11 + 16) = v13;
    unsigned int v14 = v13;
    atomic_compare_exchange_strong((atomic_uint *volatile)(a1 + 180), &v14, v9);
    if (v14 != v13)
    {
      unsigned int v15 = v14;
      do
      {
        *(_DWORD *)(v11 + 16) = v14;
        atomic_compare_exchange_strong((atomic_uint *volatile)(a1 + 180), &v15, v9);
        BOOL v16 = v15 == v14;
        unsigned int v14 = v15;
      }
      while (!v16);
    }
  }
  unsigned int v17 = (Phase::Logger *)std::__hash_table<Phase::Controller::Renderer *,std::hash<Phase::Controller::Renderer *>,std::equal_to<Phase::Controller::Renderer *>,std::allocator<Phase::Controller::Renderer *>>::erase(v6, v8);
  uint64_t v18 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v17)
                                                                                      + 224)));
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    Phase::Controller::SpatialModelerInfo::GetDescription((uint64_t *)__p, *(Phase::Controller::SpatialModelerInfo **)(a1 + 48));
    if (v26 >= 0) {
      uint64_t v19 = __p;
    }
    else {
      uint64_t v19 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136315906;
    *(void *)&uint8_t buf[4] = "CvmSpatialSubmixRouter.mm";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 388;
    __int16 v28 = 2080;
    float v29 = v19;
    __int16 v30 = 2048;
    __int16 v31 = a2;
    _os_log_impl(&dword_221E5E000, v18, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s [SpatialSubmixRouter]: Removed submixId %llu", buf, 0x26u);
    if (v26 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_221ED6B0C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Phase::Controller::SpatialSubmixRouter::SetPlayState(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  *(void *)std::string buf = a2;
  *(void *)&buf[8] = a3;
  uint64_t v7 = (Phase::Logger *)std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((void *)(a1 + 120), buf);
  if (!v7 || (uint64_t v8 = *((void *)v7 + 4)) == 0)
  {
    uint64_t v22 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v7)
                                                                                        + 224)));
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      Phase::Controller::SpatialModelerInfo::GetDescription((uint64_t *)__p, *(Phase::Controller::SpatialModelerInfo **)(a1 + 48));
      size_t v23 = v28 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 136315906;
      *(void *)&uint8_t buf[4] = "CvmSpatialSubmixRouter.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 532;
      __int16 v32 = 2080;
      uint64_t v33 = (uint64_t)v23;
      __int16 v34 = 2048;
      uint64_t v35 = a2;
      _os_log_impl(&dword_221E5E000, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (InvalidId) [SubmixHandle::kInvalidHandle == submixHandle is true]: \"%s [SpatialSubmixRouter]: Non-existent submixId %llu!\"", buf, 0x26u);
      if (v28 < 0) {
        operator delete(__p[0]);
      }
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _ZN5Phase10Controller9InvalidIdCI1St11logic_errorEPKc(exception, "%s [SpatialSubmixRouter]: Non-existent submixId %llu!");
  }
  if (a4 || !Phase::Controller::SpatialSubmixRouter::IsStopped(a1, v8))
  {
    uint64_t v9 = Phase::Controller::RouterCommandList::ExecuteCommands((atomic_ullong *)a1, (void *)a1);
    if (*(_DWORD *)(a1 + 176) <= v8
      || (uint64_t v9 = (Phase::Logger *)(a1 + 160),
          uint64_t v10 = *(void *)(a1 + 160),
          *(_DWORD *)(v10 + 24 * v8 + 20) != HIDWORD(v8))
      || (uint64_t v11 = *(uint64_t **)(v10 + 24 * v8)) == 0)
    {
      uint64_t v20 = **(id **)(Phase::Logger::GetInstance(v9) + 224);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 136315650;
        *(void *)&uint8_t buf[4] = "CvmSubmixSlotMapImpl.hpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 145;
        __int16 v32 = 2048;
        uint64_t v33 = v8;
        _os_log_impl(&dword_221E5E000, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (InvalidId) [nullptr == pObject is true]: \"SubmixSlotMap::At couldn't find SubmixHandle %llu\"", buf, 0x1Cu);
      }
      uint64_t v21 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      _ZN5Phase10Controller9InvalidIdCI1St11logic_errorEPKc(v21, "SubmixSlotMap::At couldn't find SubmixHandle %llu");
    }
    if (*((_DWORD *)v11 + 6) != a4)
    {
      UniqueES5_EUlRT_E_EEPNS_18SharedSlotMapStateIS4_S5_E4SlotES5_OSA = (Phase::Logger *)_ZN5Phase7details13SharedSlotMapINS_10Controller19SpatialSubmixRouter12SubmixParamsENS_8Handle64EE13GetSlotToEditIRZNS_13SharedSlotMapIS4_S5_DnE9GetUniqueES5_EUlRT_E_EEPNS_18SharedSlotMapStateIS4_S5_E4SlotES5_OSA_((uint64_t *)v9, v8);
      if (!UniqueES5_EUlRT_E_EEPNS_18SharedSlotMapStateIS4_S5_E4SlotES5_OSA
        || (uint64_t v13 = *(void *)UniqueES5_EUlRT_E_EEPNS_18SharedSlotMapStateIS4_S5_E4SlotES5_OSA) == 0)
      {
        uint64_t v25 = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(UniqueES5_EUlRT_E_EEPNS_18SharedSlotMapStateIS4_S5_E4SlotES5_OSA)
                                                         + 224));
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 136315650;
          *(void *)&uint8_t buf[4] = "CvmSubmixSlotMapImpl.hpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 182;
          __int16 v32 = 2048;
          uint64_t v33 = v8;
          _os_log_impl(&dword_221E5E000, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (InvalidId) [nullptr == pObject is true]: \"SubmixSlotMap::MutableAt couldn't find SubmixHandle %llu\"", buf, 0x1Cu);
        }
        char v26 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        _ZN5Phase10Controller9InvalidIdCI1St11logic_errorEPKc(v26, "SubmixSlotMap::MutableAt couldn't find SubmixHandle %llu");
      }
      if (!a4)
      {
        uint64_t v14 = *(void *)(a1 + 368);
        *(_OWORD *)std::string buf = *(_OWORD *)v11;
        unsigned int v15 = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((void *)(v14 + 216), buf);
        if (v15)
        {
          unint64_t v16 = v15[4];
          if (v16 != -1)
          {
            Phase::Controller::RenderGroupMgr::GetRenderer(*(Phase::Controller::RenderGroupMgr **)(a1 + 368), v16, &v29);
            if (v29)
            {
              (*(void (**)(Phase::Logger *, void, uint64_t))(*(void *)v29 + 40))(v29, *v11, v11[1]);
            }
            else
            {
              unsigned int v17 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(0)
                                                                                                  + 224)));
              if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
              {
                Phase::Controller::SpatialModelerInfo::GetDescription((uint64_t *)__p, *(Phase::Controller::SpatialModelerInfo **)(a1 + 48));
                if (v28 >= 0) {
                  uint64_t v18 = __p;
                }
                else {
                  uint64_t v18 = (void **)__p[0];
                }
                uint64_t v19 = *v11;
                *(_DWORD *)std::string buf = 136315906;
                *(void *)&uint8_t buf[4] = "CvmSpatialSubmixRouter.mm";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 571;
                __int16 v32 = 2080;
                uint64_t v33 = (uint64_t)v18;
                __int16 v34 = 2048;
                uint64_t v35 = v19;
                _os_log_impl(&dword_221E5E000, v17, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s [SpatialSubmixRouter]: submixId %llu: renderer was not available when requested for SetPlayState.", buf, 0x26u);
                if (v28 < 0) {
                  operator delete(__p[0]);
                }
              }
            }
            if (v30) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v30);
            }
          }
        }
      }
      *(_DWORD *)(v13 + 24) = a4;
    }
  }
}

void sub_221ED6FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(a1);
}

Phase::Logger *Phase::Controller::SpatialSubmixRouter::SetInputSendLevel(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  float result = Phase::Controller::SubmixSlotMap<Phase::Controller::SpatialSubmixRouter::SubmixParams>::MutableAt((void *)(a1 + 120), a2, a3);
  BOOL v6 = a4 > 1.0 || a4 < 0.0;
  double v7 = fmin(fmax(a4, 0.0), 1.0);
  if (!v6) {
    double v7 = a4;
  }
  *((double *)result + 4) = v7;
  return result;
}

Phase::Logger *Phase::Controller::SubmixSlotMap<Phase::Controller::SpatialSubmixRouter::SubmixParams>::MutableAt(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  *(void *)uint64_t v10 = a2;
  *(void *)&v10[8] = a3;
  int64_t v5 = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>(a1, v10);
  if (v5) {
    uint64_t v6 = v5[4];
  }
  else {
    uint64_t v6 = 0;
  }
  float result = (Phase::Logger *)_ZN5Phase7details13SharedSlotMapINS_10Controller19SpatialSubmixRouter12SubmixParamsENS_8Handle64EE13GetSlotToEditIRZNS_13SharedSlotMapIS4_S5_DnE9GetUniqueES5_EUlRT_E_EEPNS_18SharedSlotMapStateIS4_S5_E4SlotES5_OSA_(a1 + 5, v6);
  if (!result || (float result = *(Phase::Logger **)result) == 0)
  {
    uint64_t v8 = **(id **)(Phase::Logger::GetInstance(result) + 224);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v10 = 136315906;
      *(void *)&void v10[4] = "CvmSubmixSlotMapImpl.hpp";
      *(_WORD *)&unsigned char v10[12] = 1024;
      *(_DWORD *)&v10[14] = 171;
      __int16 v11 = 2048;
      uint64_t v12 = v6;
      __int16 v13 = 2048;
      uint64_t v14 = a2;
      _os_log_impl(&dword_221E5E000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (InvalidId) [nullptr == pObject is true]: \"SubmixSlotMap::MutableAt couldn't find SubmixHandle %llu for SubmixId %llu\"", v10, 0x26u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _ZN5Phase10Controller9InvalidIdCI1St11logic_errorEPKc(exception, "SubmixSlotMap::MutableAt couldn't find SubmixHandle %llu for SubmixId %llu");
  }
  return result;
}

void sub_221ED725C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double Phase::Controller::SpatialSubmixRouter::GetInputSendLevel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *((double *)Phase::Controller::SubmixSlotMap<Phase::Controller::SpatialSubmixRouter::SubmixParams>::At(a1 + 120, a2, a3)+ 4);
}

uint64_t Phase::Controller::SpatialSubmixRouter::IsPrepared(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  Phase::Controller::RenderGroupMgr::LoadFreshData(*(atomic_ullong **)(a1 + 368));
  Phase::Controller::RouterCommandList::ExecuteCommands((atomic_ullong *)a1, (void *)a1);
  uint64_t v6 = Phase::Controller::SubmixSlotMap<Phase::Controller::SpatialSubmixRouter::SubmixParams>::At(a1 + 120, a2, a3);
  long long v7 = *(_OWORD *)v6;
  long long v8 = *((_OWORD *)v6 + 1);
  long long v9 = *((_OWORD *)v6 + 2);
  uint64_t v25 = *((void *)v6 + 6);
  long long v23 = v8;
  long long v24 = v9;
  long long v22 = v7;
  uint64_t v26 = *((void *)v6 + 7);
  memset(v27, 0, sizeof(v27));
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__init_with_size[abi:ne180100]<Phase::Envelope<double>::SegmentInternal*,Phase::Envelope<double>::SegmentInternal*>(v27, *((void *)v6 + 8), *((void *)v6 + 9), (uint64_t)(*((void *)v6 + 9) - *((void *)v6 + 8)) >> 6);
  long long v10 = *(_OWORD *)((char *)v6 + 88);
  uint64_t v29 = *((void *)v6 + 13);
  long long v28 = v10;
  if (*((unsigned char *)v6 + 112))
  {
    uint64_t v11 = 1;
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 368);
    *(void *)std::string buf = a2;
    *(void *)&buf[8] = a3;
    __int16 v13 = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((void *)(v12 + 216), buf);
    if (!v13 || (unint64_t v14 = v13[4], v14 == -1))
    {
      uint64_t v11 = 0;
    }
    else
    {
      Phase::Controller::RenderGroupMgr::GetRenderer(*(Phase::Controller::RenderGroupMgr **)(a1 + 368), v14, &v20);
      if (v20)
      {
        uint64_t v11 = (*(uint64_t (**)(Phase::Logger *))(*(void *)v20 + 88))(v20);
      }
      else
      {
        uint64_t v15 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(0)
                                                                                            + 224)));
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          Phase::Controller::SpatialModelerInfo::GetDescription((uint64_t *)__p, *(Phase::Controller::SpatialModelerInfo **)(a1 + 48));
          unint64_t v16 = v19 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)std::string buf = 136315906;
          *(void *)&uint8_t buf[4] = "CvmSpatialSubmixRouter.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 474;
          __int16 v32 = 2080;
          uint64_t v33 = v16;
          __int16 v34 = 2048;
          uint64_t v35 = a2;
          _os_log_impl(&dword_221E5E000, v15, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s [SpatialSubmixRouter]: submixId %llu: renderer was not available when requested for isPrepared", buf, 0x26u);
          if (v19 < 0) {
            operator delete(__p[0]);
          }
        }

        uint64_t v11 = 0;
      }
      if (v21) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v21);
      }
    }
  }
  *(void *)std::string buf = v27;
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  return v11;
}

void sub_221ED7564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

BOOL Phase::Controller::SpatialSubmixRouter::IsStopped(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v7[0] = a2;
  v7[1] = a3;
  BOOL v4 = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((void *)(a1 + 120), v7);
  if (v4) {
    uint64_t v5 = v4[4];
  }
  else {
    uint64_t v5 = 0;
  }
  return Phase::Controller::SpatialSubmixRouter::IsStopped(a1, v5);
}

BOOL Phase::Controller::SpatialSubmixRouter::IsStopped(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a1 + 176) <= a2) {
    return 1;
  }
  uint64_t v3 = *(void *)(a1 + 160);
  if (*(_DWORD *)(v3 + 24 * a2 + 20) != HIDWORD(a2)) {
    return 1;
  }
  BOOL v4 = *(uint64_t **)(v3 + 24 * a2);
  if (!v4) {
    return 1;
  }
  Phase::Controller::RouterCommandList::ExecuteCommands((atomic_ullong *)a1, (void *)a1);
  uint64_t v5 = *(void *)(a1 + 368);
  *(_OWORD *)std::string buf = *(_OWORD *)v4;
  uint64_t v6 = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((void *)(v5 + 216), buf);
  if (!v6) {
    return *((_DWORD *)v4 + 6) == 0;
  }
  unint64_t v7 = v6[4];
  if (v7 == -1) {
    return *((_DWORD *)v4 + 6) == 0;
  }
  Phase::Controller::RenderGroupMgr::GetRenderer(*(Phase::Controller::RenderGroupMgr **)(a1 + 368), v7, &v15);
  if (v15)
  {
    uint64_t v8 = (*(uint64_t (**)(Phase::Logger *))(*(void *)v15 + 96))(v15);
  }
  else
  {
    long long v10 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(0)
                                                                                        + 224)));
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      Phase::Controller::SpatialModelerInfo::GetDescription((uint64_t *)__p, *(Phase::Controller::SpatialModelerInfo **)(a1 + 48));
      uint64_t v11 = v14 >= 0 ? __p : (void **)__p[0];
      uint64_t v12 = *v4;
      *(_DWORD *)std::string buf = 136315906;
      *(void *)&uint8_t buf[4] = "CvmSpatialSubmixRouter.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 516;
      __int16 v18 = 2080;
      char v19 = v11;
      __int16 v20 = 2048;
      uint64_t v21 = v12;
      _os_log_impl(&dword_221E5E000, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s [SpatialSubmixRouter]: submixId %llu: renderer was not available when requested for IsStopped", buf, 0x26u);
      if (v14 < 0) {
        operator delete(__p[0]);
      }
    }

    uint64_t v8 = 0;
  }
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  return v8;
}

void sub_221ED77F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::SpatialSubmixRouter::GetPlayState(Phase::Controller::SpatialSubmixRouter *this, UniqueObjectId a2)
{
  UniqueObjectId v8 = a2;
  uint64_t v3 = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((void *)this + 15, &v8);
  if (v3) {
    uint64_t v4 = v3[4];
  }
  else {
    uint64_t v4 = 0;
  }
  if (*((_DWORD *)this + 44) > v4
    && (uint64_t v5 = *((void *)this + 20), *(_DWORD *)(v5 + 24 * v4 + 20) == HIDWORD(v4))
    && (uint64_t v6 = *(void *)(v5 + 24 * v4)) != 0)
  {
    return *(unsigned int *)(v6 + 24);
  }
  else
  {
    return 0;
  }
}

void Phase::Controller::SpatialSubmixRouter::Update(Phase::Controller::SpatialSubmixRouter *this, double a2)
{
  uint64_t v143 = *MEMORY[0x263EF8340];
  Phase::Controller::RenderGroupMgr::LoadFreshData(*((atomic_ullong **)this + 46));
  Phase::Controller::RouterCommandList::ExecuteCommands((atomic_ullong *)this, this);
  uint64_t v4 = *(uint64_t **)(*((void *)this + 46) + 152);
  if (v4)
  {
    char v127 = 0;
    char v131 = 0;
    char v130 = (char **)((char *)this + 400);
    uint64_t v128 = (char *)this + 416;
    while (1)
    {
      Phase::Controller::RenderGroupMgr::GetRenderer(*((Phase::Controller::RenderGroupMgr **)this + 46), v4[4], &v136);
      uint64_t v5 = v136;
      if (!v136)
      {
        uint64_t v52 = v4 + 6;
        unint64_t v54 = *((void *)this + 48);
        unint64_t v53 = *((void *)this + 49);
        if (v54 >= v53)
        {
          uint64_t v56 = *((void *)this + 47);
          unint64_t v57 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v54 - v56) >> 3);
          unint64_t v58 = v57 + 1;
          if (v57 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v59 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v53 - v56) >> 3);
          if (2 * v59 > v58) {
            unint64_t v58 = 2 * v59;
          }
          if (v59 >= 0x555555555555555) {
            unint64_t v60 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v60 = v58;
          }
          long long v61 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<Phase::SpatialModeler::GraphDescription &,unsigned long,Phase::SpatialModeler::PriorityQueue &>>>(v60);
          long long v63 = &v61[24 * v57];
          *(_OWORD *)long long v63 = *v52;
          *((void *)v63 + 2) = v4[4];
          uint64_t v65 = (char *)*((void *)this + 47);
          uint64_t v64 = (char *)*((void *)this + 48);
          int64_t v66 = v63;
          if (v64 != v65)
          {
            do
            {
              long long v67 = *(_OWORD *)(v64 - 24);
              *((void *)v66 - 1) = *((void *)v64 - 1);
              *(_OWORD *)(v66 - 24) = v67;
              v66 -= 24;
              v64 -= 24;
            }
            while (v64 != v65);
            uint64_t v64 = (char *)*((void *)this + 47);
          }
          double v55 = v63 + 24;
          *((void *)this + 47) = v66;
          *((void *)this + 4std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::Controller::RouterCommandBatch,std::pair<Phase::Handle64,unsigned long long>,std::shared_ptr<Phase::Controller::Renderer>,unsigned long long,std::pair<Phase::UniqueObjectId,BOOL>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v63 + 24;
          *((void *)this + 49) = &v61[24 * v62];
          if (v64) {
            operator delete(v64);
          }
        }
        else
        {
          *(_OWORD *)unint64_t v54 = *v52;
          *(void *)(v54 + 16) = v4[4];
          double v55 = (char *)(v54 + 24);
        }
        *((void *)this + 4std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::Controller::RouterCommandBatch,std::pair<Phase::Handle64,unsigned long long>,std::shared_ptr<Phase::Controller::Renderer>,unsigned long long,std::pair<Phase::UniqueObjectId,BOOL>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v55;
        char v127 = 1;
        goto LABEL_165;
      }
      if (((*(uint64_t (**)(void *))(*v136 + 104))(v136) & 1) == 0
        && (*(unsigned int (**)(void *))(*v5 + 88))(v5))
      {
        break;
      }
LABEL_165:
      if (v137) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v137);
      }
      uint64_t v4 = (uint64_t *)*v4;
      if (!v4) {
        goto LABEL_170;
      }
    }
    for (unsigned int i = *(uint64_t **)(*((void *)this + 46) + 232); i; unsigned int i = (uint64_t *)*i)
    {
      unint64_t v7 = i + 2;
      *(_OWORD *)std::string buf = *((_OWORD *)i + 1);
      UniqueObjectId v8 = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((void *)this + 15, buf);
      if (v8) {
        uint64_t v9 = v8[4];
      }
      else {
        uint64_t v9 = 0;
      }
      if (*((_DWORD *)this + 44) > v9
        && (uint64_t v10 = *((void *)this + 20), *(_DWORD *)(v10 + 24 * v9 + 20) == HIDWORD(v9))
        && (uint64_t v11 = *(void *)(v10 + 24 * v9)) != 0)
      {
        if (!*(unsigned char *)(v11 + 112))
        {
          uint64_t v27 = v4[4];
          if (v27 == i[4] || v27 == *(void *)(v11 + 48))
          {
            uint64_t v29 = (void *)*((void *)this + 54);
            unint64_t v28 = *((void *)this + 55);
            if ((unint64_t)v29 >= v28)
            {
              uint64_t v36 = (void *)*((void *)this + 53);
              uint64_t v37 = v29 - v36;
              unint64_t v38 = v37 + 1;
              if ((unint64_t)(v37 + 1) >> 61) {
                std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v39 = v28 - (void)v36;
              if (v39 >> 2 > v38) {
                unint64_t v38 = v39 >> 2;
              }
              if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v40 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v40 = v38;
              }
              if (v40)
              {
                if (v40 >> 61) {
                  std::__throw_bad_array_new_length[abi:ne180100]();
                }
                long long v41 = (char *)operator new(8 * v40);
              }
              else
              {
                long long v41 = 0;
              }
              int64_t v50 = &v41[8 * v37];
              *(void *)int64_t v50 = v11;
              __int16 v30 = v50 + 8;
              if (v29 != v36)
              {
                do
                {
                  uint64_t v51 = *--v29;
                  *((void *)v50 - 1) = v51;
                  v50 -= 8;
                }
                while (v29 != v36);
                uint64_t v29 = (void *)*((void *)this + 53);
              }
              *((void *)this + 53) = v50;
              *((void *)this + 54) = v30;
              *((void *)this + 55) = &v41[8 * v40];
              if (v29) {
                operator delete(v29);
              }
            }
            else
            {
              *uint64_t v29 = v11;
              __int16 v30 = v29 + 1;
            }
            *((void *)this + 54) = v30;
          }
          continue;
        }
        __int16 v13 = (_OWORD *)*((void *)this + 51);
        unint64_t v12 = *((void *)this + 52);
        if ((unint64_t)v13 >= v12)
        {
          uint64_t v31 = ((char *)v13 - *v130) >> 4;
          unint64_t v32 = v31 + 1;
          if ((unint64_t)(v31 + 1) >> 60) {
            std::vector<Phase::MetaParamValue>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v33 = v12 - (void)*v130;
          if (v33 >> 3 > v32) {
            unint64_t v32 = v33 >> 3;
          }
          if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v34 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v34 = v32;
          }
          if (v34) {
            uint64_t v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::UniqueObjectId>>((uint64_t)v128, v34);
          }
          else {
            uint64_t v35 = 0;
          }
          uint64_t v42 = &v35[16 * v31];
          *(_OWORD *)uint64_t v42 = *v7;
          uint64_t v44 = (char *)*((void *)this + 50);
          unint64_t v43 = (char *)*((void *)this + 51);
          uint64_t v45 = v42;
          if (v43 != v44)
          {
            do
            {
              *((_OWORD *)v45 - 1) = *((_OWORD *)v43 - 1);
              v45 -= 16;
              v43 -= 16;
            }
            while (v43 != v44);
            unint64_t v43 = *v130;
          }
          char v14 = v42 + 16;
          *((void *)this + 50) = v45;
          *((void *)this + 51) = v42 + 16;
          *((void *)this + 52) = &v35[16 * v34];
          if (v43) {
            operator delete(v43);
          }
        }
        else
        {
          _OWORD *v13 = *v7;
          char v14 = v13 + 1;
        }
        *((void *)this + 51) = v14;
        unint64_t v46 = *(void *)(v11 + 48);
        if (v46 != -1)
        {
          Phase::Controller::RenderGroupMgr::GetRenderer(*((Phase::Controller::RenderGroupMgr **)this + 46), v46, &v134);
          if (v134)
          {
            (*(void (**)(Phase::Logger *, void, void))(*(void *)v134 + 40))(v134, *(void *)v11, *(void *)(v11 + 8));
          }
          else
          {
            uint64_t v47 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(0)
                                                                                                + 224)));
            if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
            {
              Phase::Controller::SpatialModelerInfo::GetDescription((uint64_t *)__p, *((Phase::Controller::SpatialModelerInfo **)this + 6));
              uint64_t v48 = __p;
              if (v133 < 0) {
                uint64_t v48 = (void **)__p[0];
              }
              uint64_t v49 = *(void *)(v11 + 48);
              *(_DWORD *)std::string buf = 136315906;
              *(void *)&uint8_t buf[4] = "CvmSpatialSubmixRouter.mm";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 676;
              __int16 v139 = 2080;
              *(void *)unint64_t v140 = v48;
              *(_WORD *)&v140[8] = 2048;
              *(void *)&v140[10] = v49;
              _os_log_impl(&dword_221E5E000, v47, OS_LOG_TYPE_ERROR, "%25s:%-5d %s [SpatialSubmixRouter]: Connected rendererId %llu not found!", buf, 0x26u);
              if (v133 < 0) {
                operator delete(__p[0]);
              }
            }
          }
          if (v135) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v135);
          }
        }
      }
      else
      {
        unint64_t v16 = (_OWORD *)*((void *)this + 51);
        unint64_t v15 = *((void *)this + 52);
        if ((unint64_t)v16 >= v15)
        {
          uint64_t v18 = ((char *)v16 - *v130) >> 4;
          unint64_t v19 = v18 + 1;
          if ((unint64_t)(v18 + 1) >> 60) {
            std::vector<Phase::MetaParamValue>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v20 = v15 - (void)*v130;
          if (v20 >> 3 > v19) {
            unint64_t v19 = v20 >> 3;
          }
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v21 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v21 = v19;
          }
          if (v21) {
            uint64_t v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::UniqueObjectId>>((uint64_t)v128, v21);
          }
          else {
            uint64_t v22 = 0;
          }
          long long v23 = &v22[16 * v18];
          *(_OWORD *)long long v23 = *v7;
          uint64_t v25 = (char *)*((void *)this + 50);
          long long v24 = (char *)*((void *)this + 51);
          uint64_t v26 = v23;
          if (v24 != v25)
          {
            do
            {
              *((_OWORD *)v26 - 1) = *((_OWORD *)v24 - 1);
              v26 -= 16;
              v24 -= 16;
            }
            while (v24 != v25);
            long long v24 = *v130;
          }
          unsigned int v17 = v23 + 16;
          *((void *)this + 50) = v26;
          *((void *)this + 51) = v23 + 16;
          *((void *)this + 52) = &v22[16 * v21];
          if (v24) {
            operator delete(v24);
          }
        }
        else
        {
          *unint64_t v16 = *v7;
          unsigned int v17 = v16 + 1;
        }
        *((void *)this + 51) = v17;
      }
      char v131 = 1;
    }
    uint64_t v69 = (char *)*((void *)this + 53);
    long long v68 = (char *)*((void *)this + 54);
    long long v125 = v69;
    uint64_t v126 = v68 - v69;
    if (v68 != v69)
    {
      int v70 = 0;
      int v129 = 0;
      int v71 = 0;
      while (1)
      {
        char v72 = *(_OWORD **)v69;
        uint64_t v73 = *((void *)this + 46);
        *(_OWORD *)std::string buf = *(_OWORD *)*(void *)v69;
        uint64_t v74 = (double *)std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((void *)(v73 + 216), buf);
        if (v74) {
          double v75 = v74[5];
        }
        else {
          double v75 = 1.0;
        }
        uint64_t v76 = *((void *)this + 46);
        *(_OWORD *)std::string buf = *v72;
        __int16 v77 = (Phase::Logger *)std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((void *)(v76 + 216), buf);
        if (v77) {
          uint64_t v78 = *((void *)v77 + 4);
        }
        else {
          uint64_t v78 = -1;
        }
        switch(*((_DWORD *)v72 + 6))
        {
          case 0:
            ++v71;
            break;
          case 1:
          case 3:
            ++v70;
            break;
          case 2:
            ++v129;
            break;
          default:
            break;
        }
        unint64_t v79 = *((void *)v72 + 6);
        if (v79 != -1)
        {
          double v80 = v136;
          if (v79 == v136[5])
          {
            if (*((double *)v72 + 7) != v75)
            {
              *((double *)v72 + 7) = v75;
              *(void *)std::string buf = &unk_26D4715B0;
              *(void *)&buf[8] = Phase::CurveFunction::Linear<double>;
              *(void *)&v140[4] = buf;
              Phase::Fader<double>::SetInternal((uint64_t)(v72 + 4), (uint64_t)buf, v75, 0.2);
              std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](buf);
            }
            Phase::Fader<double>::Update((uint64_t)(v72 + 4), a2);
            double v81 = *((double *)v72 + 13);
            double v82 = *((double *)v72 + 4);
            double v83 = v82 * v81;
            if (v82 * v81 != *((double *)v72 + 5) && v78 != -1)
            {
              (*(void (**)(void *, void, void, double))(*v80 + 48))(v80, *(void *)v72, *((void *)v72 + 1), v82 * v81);
              *((double *)v72 + 5) = v83;
            }
            goto LABEL_137;
          }
        }
        int v85 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v77)
                                                                                            + 224)));
        if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
        {
          Phase::Controller::SpatialModelerInfo::GetDescription((uint64_t *)__p, *((Phase::Controller::SpatialModelerInfo **)this + 6));
          uint64_t v86 = __p;
          if (v133 < 0) {
            uint64_t v86 = (void **)__p[0];
          }
          uint64_t v87 = *(void *)v72;
          uint64_t v88 = v136;
          unint64_t v89 = v136[5];
          *(_DWORD *)std::string buf = 136316162;
          *(void *)&uint8_t buf[4] = "CvmSpatialSubmixRouter.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 741;
          __int16 v139 = 2080;
          *(void *)unint64_t v140 = v86;
          *(_WORD *)&v140[8] = 2048;
          *(void *)&v140[10] = v87;
          __int16 v141 = 2048;
          unint64_t v142 = v89;
          _os_log_impl(&dword_221E5E000, v85, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s [SpatialSubmixRouter]: connected submixId %llu to rendererId %llu", buf, 0x30u);
          if (v133 < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          uint64_t v88 = v136;
        }

        double v90 = v75 * *((double *)v72 + 4);
        (*(void (**)(void *, void, void, double))(*v88 + 32))(v88, *(void *)v72, *((void *)v72 + 1), v90);
        if (v79 != -1) {
          break;
        }
LABEL_136:
        *((void *)v72 + 6) = v88[5];
        *((double *)v72 + 5) = v90;
        *((double *)v72 + 7) = v75;
        *(void *)std::string buf = &unk_26D4715B0;
        *(void *)&buf[8] = Phase::CurveFunction::Linear<double>;
        *(void *)&v140[4] = buf;
        Phase::Fader<double>::SetInternal((uint64_t)(v72 + 4), (uint64_t)buf, v75, 0.0);
        std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](buf);
LABEL_137:
        v69 += 8;
        if (v69 == v68) {
          goto LABEL_140;
        }
      }
      Phase::Controller::RenderGroupMgr::GetRenderer(*((Phase::Controller::RenderGroupMgr **)this + 46), v79, &v134);
      if (v134)
      {
        int v91 = (Phase::Logger *)(*(uint64_t (**)(Phase::Logger *, void, void))(*(void *)v134 + 40))(v134, *(void *)v72, *((void *)v72 + 1));
        int v92 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v91)
                                                                                            + 224)));
        if (os_log_type_enabled(v92, OS_LOG_TYPE_DEFAULT))
        {
          Phase::Controller::SpatialModelerInfo::GetDescription((uint64_t *)__p, *((Phase::Controller::SpatialModelerInfo **)this + 6));
          int v93 = __p;
          if (v133 < 0) {
            int v93 = (void **)__p[0];
          }
          uint64_t v94 = *(void *)v72;
          *(_DWORD *)std::string buf = 136316162;
          *(void *)&uint8_t buf[4] = "CvmSpatialSubmixRouter.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 759;
          __int16 v139 = 2080;
          *(void *)unint64_t v140 = v93;
          *(_WORD *)&v140[8] = 2048;
          *(void *)&v140[10] = v94;
          __int16 v141 = 2048;
          unint64_t v142 = v79;
          int64x2_t v95 = v92;
          os_log_type_t v96 = OS_LOG_TYPE_DEFAULT;
          uint64_t v97 = "%25s:%-5d %s [SpatialSubmixRouter]: disconnected submixId %llu from rendererId %llu";
          uint32_t v98 = 48;
          goto LABEL_132;
        }
      }
      else
      {
        int v92 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(0)
                                                                                            + 224)));
        if (os_log_type_enabled(v92, OS_LOG_TYPE_ERROR))
        {
          Phase::Controller::SpatialModelerInfo::GetDescription((uint64_t *)__p, *((Phase::Controller::SpatialModelerInfo **)this + 6));
          int v99 = __p;
          if (v133 < 0) {
            int v99 = (void **)__p[0];
          }
          *(_DWORD *)std::string buf = 136315906;
          *(void *)&uint8_t buf[4] = "CvmSpatialSubmixRouter.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 765;
          __int16 v139 = 2080;
          *(void *)unint64_t v140 = v99;
          *(_WORD *)&v140[8] = 2048;
          *(void *)&v140[10] = v79;
          int64x2_t v95 = v92;
          os_log_type_t v96 = OS_LOG_TYPE_ERROR;
          uint64_t v97 = "%25s:%-5d %s [SpatialSubmixRouter]: Connected rendererId %llu not found!";
          uint32_t v98 = 38;
LABEL_132:
          _os_log_impl(&dword_221E5E000, v95, v96, v97, buf, v98);
          if (v133 < 0) {
            operator delete(__p[0]);
          }
        }
      }

      if (v135) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v135);
      }
      goto LABEL_136;
    }
    int v71 = 0;
    int v129 = 0;
    int v70 = 0;
LABEL_140:
    uint64_t v100 = v126 >> 3;
    if (!*((unsigned char *)v4 + 368) && v100 == v71)
    {
      (*(void (**)(void *, void, void))(*v136 + 112))(v136, 0, 0);
      long long v101 = v4 + 6;
      unint64_t v103 = *((void *)this + 48);
      unint64_t v102 = *((void *)this + 49);
      if (v103 >= v102)
      {
        uint64_t v107 = *((void *)this + 47);
        unint64_t v108 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v103 - v107) >> 3);
        unint64_t v109 = v108 + 1;
        if (v108 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v110 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v102 - v107) >> 3);
        if (2 * v110 > v109) {
          unint64_t v109 = 2 * v110;
        }
        if (v110 >= 0x555555555555555) {
          unint64_t v111 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v111 = v109;
        }
        uint64_t v112 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<Phase::SpatialModeler::GraphDescription &,unsigned long,Phase::SpatialModeler::PriorityQueue &>>>(v111);
        std::error_code v114 = &v112[24 * v108];
        *(_OWORD *)std::error_code v114 = *v101;
        *((void *)v114 + 2) = v4[4];
        uint64_t v116 = (char *)*((void *)this + 47);
        uint64_t v115 = (char *)*((void *)this + 48);
        uint64_t v117 = v114;
        if (v115 != v116)
        {
          do
          {
            long long v118 = *(_OWORD *)(v115 - 24);
            *((void *)v117 - 1) = *((void *)v115 - 1);
            *(_OWORD *)(v117 - 24) = v118;
            v117 -= 24;
            v115 -= 24;
          }
          while (v115 != v116);
          uint64_t v115 = (char *)*((void *)this + 47);
        }
        unint64_t v104 = v114 + 24;
        *((void *)this + 47) = v117;
        *((void *)this + 4std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::Controller::RouterCommandBatch,std::pair<Phase::Handle64,unsigned long long>,std::shared_ptr<Phase::Controller::Renderer>,unsigned long long,std::pair<Phase::UniqueObjectId,BOOL>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v114 + 24;
        *((void *)this + 49) = &v112[24 * v113];
        if (v115) {
          operator delete(v115);
        }
      }
      else
      {
        *(_OWORD *)unint64_t v103 = *v101;
        *(void *)(v103 + 16) = v4[4];
        unint64_t v104 = (char *)(v103 + 24);
      }
      *((void *)this + 4std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::Controller::RouterCommandBatch,std::pair<Phase::Handle64,unsigned long long>,std::shared_ptr<Phase::Controller::Renderer>,unsigned long long,std::pair<Phase::UniqueObjectId,BOOL>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v104;
      char v127 = 1;
      goto LABEL_164;
    }
    if (*((unsigned char *)v4 + 368)) {
      BOOL v105 = v125 == v68;
    }
    else {
      BOOL v105 = 0;
    }
    uint64_t v106 = 2;
    if (!v105 && v100 != v129)
    {
      if (v70 <= 0)
      {
LABEL_164:
        *((void *)this + 54) = *((void *)this + 53);
        goto LABEL_165;
      }
      uint64_t v106 = 3;
    }
    (*(void (**)(void *, uint64_t, void))(*v136 + 112))(v136, v106, 0);
    goto LABEL_164;
  }
  char v131 = 0;
  char v127 = 0;
LABEL_170:
  uint64_t v119 = *((void *)this + 47);
  if (*((void *)this + 48) != v119)
  {
    uint64_t v120 = 0;
    unint64_t v121 = 0;
    do
    {
      std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>>>::__erase_unique<unsigned long long>((void *)this + 10, *(void *)(v119 + v120 + 16));
      Phase::Controller::RenderGroupMgr::RemoveRenderGroup(*((void *)this + 46), *(void *)(*((void *)this + 47) + v120), *(void *)(*((void *)this + 47) + v120 + 8));
      ++v121;
      uint64_t v119 = *((void *)this + 47);
      v120 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 48) - v119) >> 3) > v121);
  }
  uint64_t v122 = *((void *)this + 51);
  if (v122 != *((void *)this + 50))
  {
    uint64_t v123 = 0;
    unint64_t v124 = 0;
    uint64_t v122 = *((void *)this + 50);
    do
    {
      Phase::Controller::RenderGroupMgr::RemoveSubmix(*((void *)this + 46), *(void *)(v122 + v123), *(void *)(v122 + v123 + 8));
      ++v124;
      uint64_t v122 = *((void *)this + 50);
      v123 += 16;
    }
    while (v124 < (*((void *)this + 51) - v122) >> 4);
  }
  if (v127) {
    *((void *)this + 4std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::Controller::RouterCommandBatch,std::pair<Phase::Handle64,unsigned long long>,std::shared_ptr<Phase::Controller::Renderer>,unsigned long long,std::pair<Phase::UniqueObjectId,BOOL>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = *((void *)this + 47);
  }
  if (v131) {
    *((void *)this + 51) = v122;
  }
  Phase::Controller::RenderGroupMgr::SendChanges(*((Phase::Controller::RenderGroupMgr **)this + 46));
}

void sub_221ED86D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26,uint64_t a27,std::__shared_weak_count *a28)
{
  if (a26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a26);
  }
  if (a28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a28);
  }
  _Unwind_Resume(a1);
}

void Phase::Fader<double>::Update(uint64_t a1, double a2)
{
  if (a2 > 0.0)
  {
    double v2 = *(double *)(a1 + 24) + a2;
    *(double *)(a1 + 24) = v2;
    double v3 = *(double *)(*(void *)(a1 + 8) - 48);
    if (v2 > v3)
    {
      *(double *)(a1 + 24) = v3;
      double v2 = v3;
    }
    *(double *)(a1 + 40) = Phase::Envelope<double>::operator()((double **)a1, v2);
  }
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::Controller::RouterCommandBatch,std::pair<Phase::Handle64,unsigned long long>,std::shared_ptr<Phase::Controller::Renderer>,unsigned long long,std::pair<Phase::UniqueObjectId,BOOL>>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8ne180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN5Phase10Controller18RouterCommandBatchENS_4pairINS7_8Handle64EyEENS_10shared_ptrINS8_8RendererEEEyNSA_INS7_14UniqueObjectIdEbEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix
  }
                                           + v2))(&v4, a1);
  *(_DWORD *)(a1 + 24) = -1;
  return a1;
}

void *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN5Phase10Controller18RouterCommandBatchENS_4pairINS9_8Handle64EyEENS_10shared_ptrINSA_8RendererEEEyNSC_INS9_14UniqueObjectIdEbEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSL_1EJS8_SB_SE_SH_ySJ_EEEEEEDcSN_DpT0_(int a1, Phase::Controller::RouterCommandBatch *this)
{
  return Phase::Controller::RouterCommandBatch::Clear(this);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN5Phase10Controller18RouterCommandBatchENS_4pairINS9_8Handle64EyEENS_10shared_ptrINSA_8RendererEEEyNSC_INS9_14UniqueObjectIdEbEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSL_1EJS8_SB_SE_SH_ySJ_EEEEEEDcSN_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a2 + 8);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void std::__throw_bad_variant_access[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x263F8C3A8] + 16;
}

void std::__list_imp<Phase::Controller::SpatialSubmixRouter::StoppingRenderer>::clear(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    double v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::Controller::RouterCommandBatch,std::pair<Phase::Handle64,unsigned long long>,std::shared_ptr<Phase::Controller::Renderer>,unsigned long long,std::pair<Phase::UniqueObjectId,BOOL>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::Controller::RouterCommandBatch,std::pair<Phase::Handle64,unsigned long long>,std::shared_ptr<Phase::Controller::Renderer>,unsigned long long,std::pair<Phase::UniqueObjectId,BOOL>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        std::__destroy_at[abi:ne180100]<Phase::Controller::SpatialSubmixRouter::StoppingRenderer,0>(v3 + 2);
        operator delete(v3);
        double v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void std::__destroy_at[abi:ne180100]<Phase::Controller::SpatialSubmixRouter::StoppingRenderer,0>(void *a1)
{
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  double v3 = (std::__shared_weak_count *)a1[1];
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void *std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__init_with_size[abi:ne180100]<Phase::Envelope<double>::SegmentInternal*,Phase::Envelope<double>::SegmentInternal*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__vallocate[abi:ne180100](result, a4);
    float result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Phase::Envelope<double>::SegmentInternal>,Phase::Envelope<double>::SegmentInternal*,Phase::Envelope<double>::SegmentInternal*,Phase::Envelope<double>::SegmentInternal*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_221ED8A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::Controller::RouterCommandBatch,std::pair<Phase::Handle64,unsigned long long>,std::shared_ptr<Phase::Controller::Renderer>,unsigned long long,std::pair<Phase::UniqueObjectId,BOOL>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v10;
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,Phase::Controller::RouterCommandBatch,std::pair<Phase::Handle64,unsigned long long>,std::shared_ptr<Phase::Controller::Renderer>,unsigned long long,std::pair<Phase::UniqueObjectId,BOOL>>>::__assign_alt[abi:ne180100]<3ul,std::shared_ptr<Phase::Controller::Renderer>,std::shared_ptr<Phase::Controller::Renderer>&>(uint64_t a1, void *a2, uint64_t *a3)
{
  if (*(_DWORD *)(a1 + 24) == 3)
  {
    uint64_t v4 = *a3;
    uint64_t v3 = a3[1];
    if (v3) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v5 = (std::__shared_weak_count *)a2[1];
    *a2 = v4;
    a2[1] = v3;
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
  else
  {
    std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,Phase::Controller::RouterCommandBatch,std::pair<Phase::Handle64,unsigned long long>,std::shared_ptr<Phase::Controller::Renderer>,unsigned long long,std::pair<Phase::UniqueObjectId,BOOL>>>::__emplace[abi:ne180100]<3ul,std::shared_ptr<Phase::Controller::Renderer>&>(a1, a3);
  }
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,Phase::Controller::RouterCommandBatch,std::pair<Phase::Handle64,unsigned long long>,std::shared_ptr<Phase::Controller::Renderer>,unsigned long long,std::pair<Phase::UniqueObjectId,BOOL>>>::__emplace[abi:ne180100]<3ul,std::shared_ptr<Phase::Controller::Renderer>&>(uint64_t a1, void *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 24);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8ne180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN5Phase10Controller18RouterCommandBatchENS_4pairINS7_8Handle64EyEENS_10shared_ptrINS8_8RendererEEEyNSA_INS7_14UniqueObjectIdEbEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix
  }
                                           + v4))(&v7, a1);
  *(_DWORD *)(a1 + 24) = -1;
  uint64_t v5 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::Controller::RouterCommandBatch,std::pair<Phase::Handle64,unsigned long long>,std::shared_ptr<Phase::Controller::Renderer>,unsigned long long,std::pair<Phase::UniqueObjectId,BOOL>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 24) = 3;
  return a1;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,Phase::Controller::RouterCommandBatch,std::pair<Phase::Handle64,unsigned long long>,std::shared_ptr<Phase::Controller::Renderer>,unsigned long long,std::pair<Phase::UniqueObjectId,BOOL>>>::__emplace[abi:ne180100]<5ul,std::pair<Phase::UniqueObjectId,BOOL>>(uint64_t a1, long long *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 24);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8ne180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN5Phase10Controller18RouterCommandBatchENS_4pairINS7_8Handle64EyEENS_10shared_ptrINS8_8RendererEEEyNSA_INS7_14UniqueObjectIdEbEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix
  }
                                           + v4))(&v7, a1);
  *(_DWORD *)(a1 + 24) = -1;
  long long v5 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v5;
  *(_DWORD *)(a1 + 24) = 5;
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>>>::__deallocate_node(int a1, void *__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      uint64_t v3 = (void *)*v2;
      uint64_t v4 = (std::__shared_weak_count *)v2[4];
      if (v4) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__function::__func<std::__bind<void (Phase::Controller::SpatialSubmixRouter::*)(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>),Phase::Controller::SpatialSubmixRouter*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,std::allocator<std::__bind<void (Phase::Controller::SpatialSubmixRouter::*)(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>),Phase::Controller::SpatialSubmixRouter*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>>,void ()(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>)>::~__func()
{
}

__n128 std::__function::__func<std::__bind<void (Phase::Controller::SpatialSubmixRouter::*)(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>),Phase::Controller::SpatialSubmixRouter*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,std::allocator<std::__bind<void (Phase::Controller::SpatialSubmixRouter::*)(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>),Phase::Controller::SpatialSubmixRouter*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>>,void ()(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26D473A28;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::Controller::RouterCommandBatch,std::pair<Phase::Handle64,unsigned long long>,std::shared_ptr<Phase::Controller::Renderer>,unsigned long long,std::pair<Phase::UniqueObjectId,BOOL>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<std::__bind<void (Phase::Controller::SpatialSubmixRouter::*)(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>),Phase::Controller::SpatialSubmixRouter*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,std::allocator<std::__bind<void (Phase::Controller::SpatialSubmixRouter::*)(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>),Phase::Controller::SpatialSubmixRouter*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>>,void ()(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D473A28;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::Controller::RouterCommandBatch,std::pair<Phase::Handle64,unsigned long long>,std::shared_ptr<Phase::Controller::Renderer>,unsigned long long,std::pair<Phase::UniqueObjectId,BOOL>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = result;
  return result;
}

void std::__function::__func<std::__bind<void (Phase::Controller::SpatialSubmixRouter::*)(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>),Phase::Controller::SpatialSubmixRouter*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>,std::allocator<std::__bind<void (Phase::Controller::SpatialSubmixRouter::*)(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>),Phase::Controller::SpatialSubmixRouter*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&>>,void ()(unsigned long long,std::shared_ptr<Phase::Controller::Renderer>)>::operator()(void *a1, uint64_t *a2, long long *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a1[2];
  long long v5 = (void (*)(void *, uint64_t, long long *))a1[1];
  uint64_t v6 = (void *)(a1[3] + (v4 >> 1));
  if (v4) {
    long long v5 = *(void (**)(void *, uint64_t, long long *))(*v6 + v5);
  }
  long long v7 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  v5(v6, v3, &v7);
  if (*((void *)&v7 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v7 + 1));
  }
}

void sub_221ED8CF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void *Phase::details::SharedSlotMap<Phase::Controller::SpatialSubmixRouter::SubmixParams,Phase::Handle64>::AllocSlots(void *result, uint64_t a2)
{
  if (a2) {
    operator new[]();
  }
  Phase::Logger *result = 0;
  result[1] = 0;
  return result;
}

void sub_221ED8E1C(_Unwind_Exception *a1)
{
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 24);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  MEMORY[0x223C938A0](v1, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<Phase::SharedSlotMapState<Phase::Controller::SpatialSubmixRouter::SubmixParams,Phase::Handle64>::Slot *,std::shared_ptr<Phase::SharedSlotMapState<Phase::Controller::SpatialSubmixRouter::SubmixParams,Phase::Handle64>::Slot[]>::__shared_ptr_default_delete<Phase::SharedSlotMapState<Phase::Controller::SpatialSubmixRouter::SubmixParams,Phase::Handle64>::Slot[],Phase::SharedSlotMapState<Phase::Controller::SpatialSubmixRouter::SubmixParams,Phase::Handle64>::Slot>,std::allocator<Phase::SharedSlotMapState<Phase::Controller::SpatialSubmixRouter::SubmixParams,Phase::Handle64>::Slot>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C938A0);
}

uint64_t std::__shared_ptr_pointer<Phase::SharedSlotMapState<Phase::Controller::SpatialSubmixRouter::SubmixParams,Phase::Handle64>::Slot *,std::shared_ptr<Phase::SharedSlotMapState<Phase::Controller::SpatialSubmixRouter::SubmixParams,Phase::Handle64>::Slot[]>::__shared_ptr_default_delete<Phase::SharedSlotMapState<Phase::Controller::SpatialSubmixRouter::SubmixParams,Phase::Handle64>::Slot[],Phase::SharedSlotMapState<Phase::Controller::SpatialSubmixRouter::SubmixParams,Phase::Handle64>::Slot>,std::allocator<Phase::SharedSlotMapState<Phase::Controller::SpatialSubmixRouter::SubmixParams,Phase::Handle64>::Slot>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    uint64_t v2 = v1 - 16;
    uint64_t v3 = *(void *)(v1 - 8);
    if (v3)
    {
      uint64_t v4 = 24 * v3;
      do
      {
        long long v5 = *(std::__shared_weak_count **)(v2 + v4);
        if (v5) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v5);
        }
        v4 -= 24;
      }
      while (v4);
    }
    JUMPOUT(0x223C93870);
  }
  return result;
}

uint64_t Phase::details::SharedSlotMap<Phase::Controller::SpatialSubmixRouter::SubmixParams,Phase::Handle64>::GetUniqueSlot(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *((unsigned int *)a1 + 4);
  if (v3 <= a2) {
    return 0;
  }
  unsigned int v5 = a2;
  uint64_t result = *a1 + 24 * a2;
  if (*(_DWORD *)(result + 20) != HIDWORD(a2)) {
    return 0;
  }
  uint64_t v7 = a1[1];
  if (v7 && *(uint64_t *)(v7 + 8) >= 1)
  {
    Phase::details::SharedSlotMap<Phase::Controller::SpatialSubmixRouter::SubmixParams,Phase::Handle64>::AllocSlots(&v20, v3);
    if (*((_DWORD *)a1 + 4))
    {
      uint64_t v8 = 0;
      unint64_t v9 = 0;
      uint64_t v10 = v20;
      do
      {
        uint64_t v11 = *a1;
        unint64_t v12 = (uint64_t *)(*a1 + v8);
        uint64_t v14 = *v12;
        uint64_t v13 = v12[1];
        if (v13) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
        }
        unint64_t v15 = (void *)(v10 + v8);
        unint64_t v16 = *(std::__shared_weak_count **)(v10 + v8 + 8);
        *unint64_t v15 = v14;
        v15[1] = v13;
        if (v16) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v16);
        }
        _OWORD v15[2] = *(void *)(v11 + v8 + 16);
        ++v9;
        v8 += 24;
      }
      while (v9 < *((unsigned int *)a1 + 4));
    }
    uint64_t v18 = a1 + 4;
    char v19 = 1;
    std::__shared_mutex_base::lock((std::__shared_mutex_base *)(a1 + 4));
    unsigned int v17 = (std::__shared_weak_count *)a1[1];
    *(_OWORD *)a1 = v20;
    std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v18);
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
    return *a1 + 24 * v5;
  }
  return result;
}

void sub_221ED9040(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<Phase::Controller::SpatialSubmixRouter::SubmixParams>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D473AA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Phase::Controller::SpatialSubmixRouter::SubmixParams>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D473AA8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C938A0);
}

void std::__shared_ptr_emplace<Phase::Controller::SpatialSubmixRouter::SubmixParams>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 88);
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void *_ZN5Phase7details13SharedSlotMapINS_10Controller19SpatialSubmixRouter12SubmixParamsENS_8Handle64EE13GetSlotToEditIRZNS_13SharedSlotMapIS4_S5_DnE9GetUniqueES5_EUlRT_E_EEPNS_18SharedSlotMapStateIS4_S5_E4SlotES5_OSA_(uint64_t *a1, uint64_t a2)
{
  uint64_t UniqueSlot = (void *)Phase::details::SharedSlotMap<Phase::Controller::SpatialSubmixRouter::SubmixParams,Phase::Handle64>::GetUniqueSlot(a1, a2);
  uint64_t v3 = UniqueSlot;
  if (UniqueSlot)
  {
    uint64_t v4 = UniqueSlot[1];
    if (v4)
    {
      if (*(uint64_t *)(v4 + 8) >= 1)
      {
        unsigned int v5 = (long long *)*UniqueSlot;
        uint64_t v6 = (char *)operator new(0x90uLL);
        *((void *)v6 + 1) = 0;
        *((void *)v6 + 2) = 0;
        *(void *)uint64_t v6 = &unk_26D473AA8;
        long long v7 = *v5;
        long long v8 = v5[1];
        uint64_t v9 = *((void *)v5 + 6);
        *(_OWORD *)(v6 + 56) = v5[2];
        *((void *)v6 + 9) = v9;
        *(_OWORD *)(v6 + 40) = v8;
        *(_OWORD *)(v6 + 24) = v7;
        *((void *)v6 + 10) = *((void *)v5 + 7);
        *((void *)v6 + 12) = 0;
        *((void *)v6 + 13) = 0;
        *((void *)v6 + 11) = 0;
        std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__init_with_size[abi:ne180100]<Phase::Envelope<double>::SegmentInternal*,Phase::Envelope<double>::SegmentInternal*>((void *)v6 + 11, *((void *)v5 + 8), *((void *)v5 + 9), (uint64_t)(*((void *)v5 + 9) - *((void *)v5 + 8)) >> 6);
        long long v10 = *(long long *)((char *)v5 + 88);
        *((void *)v6 + 16) = *((void *)v5 + 13);
        *((_OWORD *)v6 + 7) = v10;
        v6[136] = *((unsigned char *)v5 + 112);
        uint64_t v11 = (std::__shared_weak_count *)v3[1];
        void *v3 = v6 + 24;
        v3[1] = v6;
        if (v11) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v11);
        }
      }
    }
  }
  return v3;
}

void sub_221ED91DC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<Phase::Controller::Renderer>>>>::__erase_unique<unsigned long long>(void *a1, unint64_t a2)
{
  uint64_t v3 = std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::find<PHASETapType>(a1, a2);
  if (!v3) {
    return;
  }
  uint64_t v4 = v3;
  int8x8_t v5 = (int8x8_t)a1[1];
  uint64_t v6 = *v3;
  unint64_t v7 = v3[1];
  uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] > 1uLL)
  {
    if (v7 >= *(void *)&v5) {
      v7 %= *(void *)&v5;
    }
  }
  else
  {
    v7 &= *(void *)&v5 - 1;
  }
  uint64_t v9 = *(uint64_t **)(*a1 + 8 * v7);
  do
  {
    long long v10 = v9;
    uint64_t v9 = (uint64_t *)*v9;
  }
  while (v9 != v3);
  if (v10 == a1 + 2) {
    goto LABEL_20;
  }
  unint64_t v11 = v10[1];
  if (v8.u32[0] > 1uLL)
  {
    if (v11 >= *(void *)&v5) {
      v11 %= *(void *)&v5;
    }
  }
  else
  {
    v11 &= *(void *)&v5 - 1;
  }
  if (v11 != v7)
  {
LABEL_20:
    if (v6)
    {
      unint64_t v12 = *(void *)(v6 + 8);
      if (v8.u32[0] > 1uLL)
      {
        unint64_t v13 = *(void *)(v6 + 8);
        if (v12 >= *(void *)&v5) {
          unint64_t v13 = v12 % *(void *)&v5;
        }
      }
      else
      {
        unint64_t v13 = v12 & (*(void *)&v5 - 1);
      }
      if (v13 == v7) {
        goto LABEL_24;
      }
    }
    *(void *)(*a1 + 8 * v7) = 0;
    uint64_t v6 = *v3;
  }
  if (v6)
  {
    unint64_t v12 = *(void *)(v6 + 8);
LABEL_24:
    if (v8.u32[0] > 1uLL)
    {
      if (v12 >= *(void *)&v5) {
        v12 %= *(void *)&v5;
      }
    }
    else
    {
      v12 &= *(void *)&v5 - 1;
    }
    if (v12 != v7)
    {
      *(void *)(*a1 + 8 * v12) = v10;
      uint64_t v6 = *v3;
    }
  }
  *long long v10 = v6;
  uint64_t *v3 = 0;
  --a1[3];
  uint64_t v14 = (std::__shared_weak_count *)v3[4];
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }

  operator delete(v4);
}

void Phase::Controller::StreamSamplerBase::StreamSamplerBase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
}

void sub_221ED9788(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  std::unique_ptr<Phase::Controller::SamplerCallBackDoubleBuffer>::reset[abi:ne180100]((void ***)(v1 + 584), 0);
  std::unique_ptr<std::unordered_map<long long,std::pair<void *,BOOL>>>::reset[abi:ne180100]((uint64_t *)(v1 + 576), 0);

  Phase::Controller::SamplerBase::~SamplerBase((void **)v1);
  _Unwind_Resume(a1);
}

void Phase::Controller::StreamSamplerBase::~StreamSamplerBase(Phase::Controller::StreamSamplerBase *this)
{
  *(void *)this = &unk_26D473AF8;
  std::unique_ptr<Phase::Controller::SamplerCallBackDoubleBuffer>::reset[abi:ne180100]((void ***)this + 73, 0);
  std::unique_ptr<std::unordered_map<long long,std::pair<void *,BOOL>>>::reset[abi:ne180100]((uint64_t *)this + 72, 0);

  Phase::Controller::SamplerBase::~SamplerBase((void **)this);
}

void Phase::Controller::StreamSamplerBase::InternalPrepare(Phase::Controller::StreamSamplerBase *this, double a2)
{
  uint64_t v3 = Phase::Controller::TaskManager::GetService<Phase::Controller::VoiceManager>(*((Phase::Logger **)this + 3), 8);
  (*(void (**)(void))(**(void **)(*(void *)v3 + 688) + 112))(*(void *)(*(void *)v3 + 688));
  [*((id *)this + 70) channelCount];
  operator new();
}

void sub_221ED99DC(_Unwind_Exception *a1)
{
  MEMORY[0x223C938A0](v1, 0x10A0C40C91BB0AALL);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::TaskManager::GetService<Phase::Controller::VoiceManager>(Phase::Logger *a1, int a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v3 = *((void *)a1 + 6);
  if (a2 >= (unint64_t)((*((void *)a1 + 7) - v3) >> 5))
  {
    unint64_t v7 = **(id **)(Phase::Logger::GetInstance(a1) + 448);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315394;
      uint64_t v14 = "TaskManager.hpp";
      __int16 v15 = 1024;
      int v16 = 112;
      _os_log_impl(&dword_221E5E000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: pId < mServiceRegistry.size() is false.", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](exception, "PRECONDITION: pId < mServiceRegistry.size() is false.");
  }
  uint64_t v4 = (Phase::Logger *)(v3 + 32 * a2);
  if (!*(void *)v4)
  {
    uint64_t v9 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v4)
                                                                                       + 448)));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      Phase::GetBacktraceFrame<1ul>(&__p);
      long long v10 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)std::string buf = 136315906;
      uint64_t v14 = "TaskManager.hpp";
      __int16 v15 = 1024;
      int v16 = 121;
      __int16 v17 = 1024;
      int v18 = a2;
      __int16 v19 = 2080;
      long long v20 = v10;
      _os_log_impl(&dword_221E5E000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::domain_error) [not lService.has_value() is true]: \"No service registered for Id %i, in call \\n%s\"", buf, 0x22u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }

    unint64_t v11 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](v11, "No service registered for Id %i, in call \n%s");
  }
  int8x8_t v5 = std::any_cast[abi:ne180100]<Phase::Controller::VoiceManager * const>((uint64_t (**)(uint64_t, void, void, void, void *))v4);
  if (!v5) {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  return (uint64_t)*v5;
}

void sub_221ED9C2C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_221ED9D3C(_Unwind_Exception *a1)
{
}

void sub_221ED9D5C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void Phase::Controller::StreamSamplerBase::InternalConfigureDspGenerator(Phase::Controller::StreamSamplerBase *this)
{
}

void sub_221EDA25C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  std::vector<Phase::Controller::DspNode>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::StreamSamplerBase::IORenderOutput(Phase::Controller::StreamSamplerBase *this, uint64_t *a2, const AudioTimeStamp *a3, unsigned int *a4, AudioBufferList *a5)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  if (!this || !a4) {
LABEL_19:
  }
    std::terminate();
  if (*a4 != 1)
  {
    if (!*a4) {
      goto LABEL_19;
    }
    uint64_t v8 = *((void *)a4 + 2);
    uint64_t v9 = (Phase::Logger *)(*(uint64_t (**)(void, void, void, uint64_t *, const AudioTimeStamp *, unsigned int *))(**((void **)this + 5) + 64))(*((void *)this + 5), *((void *)this + 29), *((void *)this + 30), a2, a3, a4);
    if (v9)
    {
      if (*((void *)a4 + 2) != v8)
      {
        long long v10 = **(id **)(Phase::Logger::GetInstance(v9) + 384);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          uint64_t v11 = *a2;
          uint64_t v12 = *((void *)a4 + 2);
          *(_DWORD *)long long v24 = 136316418;
          *(void *)&void v24[4] = "CvmStreamSamplerBase.mm";
          __int16 v25 = 1024;
          int v26 = 172;
          __int16 v27 = 2048;
          unint64_t v28 = this;
          __int16 v29 = 2048;
          uint64_t v30 = v11;
          __int16 v31 = 2048;
          uint64_t v32 = v8;
          __int16 v33 = 2048;
          uint64_t v34 = v12;
          _os_log_impl(&dword_221E5E000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d impl@%p: [IO] st@%f: internal buffer pointer changed [from %p to %p]!", v24, 0x3Au);
          std::terminate();
        }
        goto LABEL_19;
      }
      goto LABEL_10;
    }
    return 0;
  }
  if (!(*(unsigned int (**)(void, void, void, uint64_t *, const AudioTimeStamp *, unsigned int *))(**((void **)this + 5) + 64))(*((void *)this + 5), *((void *)this + 29), *((void *)this + 30), a2, a3, a4))return 0; {
LABEL_10:
  }
  unint64_t v13 = *a4;
  uint64_t v14 = 1;
  if (v13)
  {
    unint64_t v15 = 0;
    int v16 = 0;
    uint64_t v17 = 4;
    do
    {
      if ((*((void *)this + 9) & (1 << v15)) != 0)
      {
        int v18 = (void *)*((void *)this + 72);
        *(void *)long long v24 = *(void *)(*((void *)this + 20) + 96 * v16 + 8);
        __int16 v19 = std::__hash_table<std::__hash_value_type<unsigned long long,int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,int>>>::find<unsigned long long>(v18, (unint64_t *)v24);
        v19[3] = *(void *)&a4[v17];
        *((unsigned char *)v19 + 32) = 1;
        ++v16;
        unint64_t v13 = *a4;
      }
      ++v15;
      v17 += 4;
    }
    while (v15 < v13);
    if (v13 > 1)
    {
      uint64_t v20 = *((void *)this + 73);
      if (*(_DWORD *)(v20 + 40) != 1)
      {
        uint64_t v22 = *(void *)(v20 + 16);
        uint64_t v21 = *(void *)(v20 + 24);
        if (v22 == v21)
        {
          uint64_t v21 = *(void *)(v20 + 32);
        }
        else if (v22 != *(void *)(v20 + 32))
        {
          goto LABEL_19;
        }
        *(void *)(v20 + 16) = v21;
        Phase::Controller::SamplerCallBackDoubleBuffer::PrepareRenderingBuffer(v20);
      }
    }
    return 1;
  }
  return v14;
}

double Phase::Controller::StreamSamplerBase::GetAnchorTimeForWakeFromSleepInSeconds(Phase::Controller::StreamSamplerBase *this, PHASECullOption a2, double a3)
{
  return 0.0;
}

uint64_t Phase::Controller::SamplerCallBackDoubleBuffer::PrepareRenderingBuffer(uint64_t this)
{
  uint64_t v1 = *(unsigned int *)(this + 40);
  if ((int)v1 >= 1)
  {
    uint64_t v2 = *(void *)(this + 16);
    uint64_t v3 = *(void *)(this + 48);
    int v4 = 4 * v3;
    int8x8_t v5 = (void *)(*(void *)this + 16);
    uint64_t v6 = 4 * v3;
    do
    {
      void *v5 = v2;
      *((_DWORD *)v5 - 2) = 1;
      *((_DWORD *)v5 - 1) = v4;
      v5 += 2;
      v2 += v6;
      --v1;
    }
    while (v1);
  }
  return this;
}

uint64_t std::unique_ptr<std::unordered_map<long long,std::pair<void *,BOOL>>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(result);
    JUMPOUT(0x223C938A0);
  }
  return result;
}

void **std::unique_ptr<Phase::Controller::SamplerCallBackDoubleBuffer>::reset[abi:ne180100](void ***a1, void **a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    Phase::Controller::SamplerCallBackDoubleBuffer::~SamplerCallBackDoubleBuffer(result);
    JUMPOUT(0x223C938A0);
  }
  return result;
}

void Phase::Controller::SamplerCallBackDoubleBuffer::~SamplerCallBackDoubleBuffer(void **this)
{
}

uint64_t (**std::any_cast[abi:ne180100]<Phase::Controller::VoiceManager * const>(uint64_t (**result)(uint64_t, void, void, void, void *)))(uint64_t, void, void, void, void *)
{
  if (result)
  {
    if (*result) {
      return (uint64_t (**)(uint64_t, void, void, void, void *))(*result)(3, result, 0, 0, &std::__any_imp::__unique_typeinfo<Phase::Controller::VoiceManager *>::__id);
    }
    else {
      return 0;
    }
  }
  return result;
}

Phase::Logger *Phase::Controller::Submix::Submix(Phase::Logger *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, Phase::Logger *a10, uint64_t a11, uint64_t a12)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26D473B88;
  *((unsigned char *)a1 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::Controller::RouterCommandBatch,std::pair<Phase::Handle64,unsigned long long>,std::shared_ptr<Phase::Controller::Renderer>,unsigned long long,std::pair<Phase::UniqueObjectId,BOOL>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
  *((_OWORD *)a1 + 5) = 0u;
  uint64_t v12 = (uint64_t)a1 + 80;
  *((_OWORD *)a1 + 6) = 0u;
  *((void *)a1 + 7) = 0;
  *((void *)a1 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::Controller::RouterCommandBatch,std::pair<Phase::Handle64,unsigned long long>,std::shared_ptr<Phase::Controller::Renderer>,unsigned long long,std::pair<Phase::UniqueObjectId,BOOL>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
  *((_WORD *)a1 + 36) = 0;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *((_DWORD *)a1 + 12) = 0;
  *((_DWORD *)a1 + 2std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::Controller::RouterCommandBatch,std::pair<Phase::Handle64,unsigned long long>,std::shared_ptr<Phase::Controller::Renderer>,unsigned long long,std::pair<Phase::UniqueObjectId,BOOL>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 1065353216;
  *((void *)a1 + 15) = 0xFFFF00000000;
  uint64_t v13 = (uint64_t)a1 + 120;
  *((_DWORD *)a1 + 32) = 0;
  uint64_t v14 = (uint64_t)a1 + 248;
  *(_OWORD *)((char *)a1 + 136) = 0u;
  *(_OWORD *)((char *)a1 + 152) = 0u;
  *(_OWORD *)((char *)a1 + 16std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::Controller::RouterCommandBatch,std::pair<Phase::Handle64,unsigned long long>,std::shared_ptr<Phase::Controller::Renderer>,unsigned long long,std::pair<Phase::UniqueObjectId,BOOL>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0u;
  *((_DWORD *)a1 + 46) = 0;
  *((void *)a1 + 34) = 0;
  *((_OWORD *)a1 + 15) = 0u;
  *((_OWORD *)a1 + 16) = 0u;
  *((_OWORD *)a1 + 13) = 0u;
  *((_OWORD *)a1 + 14) = 0u;
  *((_OWORD *)a1 + 12) = 0u;
  *((_DWORD *)a1 + 70) = 1065353216;
  *((_WORD *)a1 + 144) = 257;
  *((void *)a1 + 37) = 0x3FF0000000000000;
  *((void *)a1 + 39) = 0;
  if (!(a2 | a3))
  {
    uint64_t v35 = **(id **)(Phase::Logger::GetInstance(a1) + 384);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = "CvmSubmix.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 47;
      _os_log_impl(&dword_221E5E000, v35, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: inSubmixId != kInvalidSubmixId is false.", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "PRECONDITION: inSubmixId != kInvalidSubmixId is false.");
LABEL_20:
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
  }
  if (!a7 || !a8 || (unint64_t v15 = a1, (a1 = a10) == 0) || !a11 || !a12)
  {
    uint64_t v37 = **(id **)(Phase::Logger::GetInstance(a1) + 384);
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = "CvmSubmix.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 50;
      _os_log_impl(&dword_221E5E000, v37, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: pInBackingHeap != nullptr && pInVoiceIdAllocator != nullptr && pInTaskManager != nullptr && pInDSPVoiceManager != nullptr && pInSubmixSystem != nullptr is false.", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "PRECONDITION: pInBackingHeap != nullptr && pInVoiceIdAllocator != nullptr && pInTaskManager != nullptr && pInDSPVoiceManager != nullptr && pInSubmixSystem != nullptr is false.");
    goto LABEL_20;
  }
  *((void *)v15 + 24) = a7;
  *((void *)v15 + 25) = a8;
  *((void *)v15 + 26) = a9;
  *((void *)v15 + 27) = a10;
  *((void *)v15 + 2std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::Controller::RouterCommandBatch,std::pair<Phase::Handle64,unsigned long long>,std::shared_ptr<Phase::Controller::Renderer>,unsigned long long,std::pair<Phase::UniqueObjectId,BOOL>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = a11;
  *((void *)v15 + 29) = a12;
  uint64_t v21 = Phase::Controller::TaskManager::GetService<Phase::Controller::SessionManager>(a10, 20);
  *((void *)v15 + 39) = v21;
  if (!v21
    || (atomic_store(0x3F800000uLL, (unint64_t *)v15 + 38),
        uint64_t v22 = Phase::Controller::TaskManager::GetService<Phase::Geometry::System>(*((Phase::Logger **)v15 + 27), 2),
        (*((void *)v15 + 30) = v22) == 0))
  {
    std::terminate();
  }
  *((void *)v15 + 2) = a2;
  *((void *)v15 + 3) = a3;
  *((void *)v15 + 4) = a4;
  *((void *)v15 + 5) = a5;
  *((_DWORD *)v15 + 12) = a6;
  Phase::BitBlockAllocator<Phase::SystemAllocator>::Initialize(v13, 16, 56, *((void *)v15 + 24), (uint64_t)"Effect Allocator");
  std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>(v14, vcvtps_u32_f32(1.0 / *((float *)v15 + 70)));
  *(void *)std::string buf = 0;
  __asm { FMOV            V0.2D, #1.0 }
  long long v42 = _Q0;
  *(_OWORD *)&buf[8] = _Q0;
  *(void *)&uint8_t buf[24] = 0x3FF0000000000000;
  char v44 = 0;
  unint64_t v28 = std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&,Phase::Controller::Parameter<double>>(v12, qword_2645F7230, qword_2645F7230, (uint64_t)buf);
  if (!v29)
  {
    unint64_t v38 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)v28) + 384);
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315650;
      *(void *)&uint8_t buf[4] = "CvmSubmix.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 77;
      *(_WORD *)&unsigned char buf[18] = 2048;
      *(void *)&unsigned char buf[20] = 0xB5767F7E05AD941ELL;
      _os_log_impl(&dword_221E5E000, v38, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [!pair.second is true]: \"Failed to insert %llu parameter\"", buf, 0x1Cu);
    }
LABEL_29:
    long long v41 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v41, "Failed to insert %llu parameter");
  }
  *(void *)std::string buf = 0;
  *(_OWORD *)&buf[8] = v42;
  *(void *)&uint8_t buf[24] = 0x3FF0000000000000;
  char v44 = 0;
  uint64_t v30 = std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&,Phase::Controller::Parameter<double>>(v12, qword_2645F7260, qword_2645F7260, (uint64_t)buf);
  if (!v31)
  {
    uint64_t v39 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)v30) + 384);
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315650;
      *(void *)&uint8_t buf[4] = "CvmSubmix.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 80;
      *(_WORD *)&unsigned char buf[18] = 2048;
      *(void *)&unsigned char buf[20] = 0x81FBB92FC0173ECLL;
      _os_log_impl(&dword_221E5E000, v39, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [!pair.second is true]: \"Failed to insert %llu parameter\"", buf, 0x1Cu);
    }
    goto LABEL_29;
  }
  *(void *)std::string buf = 0;
  *(_OWORD *)&buf[8] = v42;
  *(void *)&uint8_t buf[24] = 0x3FF0000000000000;
  char v44 = 0;
  uint64_t v32 = std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&,Phase::Controller::Parameter<double>>(v12, qword_2645F7290, qword_2645F7290, (uint64_t)buf);
  if (!v33)
  {
    unint64_t v40 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)v32) + 384);
    if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315650;
      *(void *)&uint8_t buf[4] = "CvmSubmix.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 83;
      *(_WORD *)&unsigned char buf[18] = 2048;
      *(void *)&unsigned char buf[20] = 0x8119B92FBF50030;
      _os_log_impl(&dword_221E5E000, v40, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [!pair.second is true]: \"Failed to insert %llu parameter\"", buf, 0x1Cu);
    }
    goto LABEL_29;
  }
  return v15;
}

void sub_221EDAC34(_Unwind_Exception *a1)
{
  __cxa_free_exception(v4);
  std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Generator>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Generator>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Generator>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Generator>>>>::~__hash_table(v3);
  Phase::BitBlockAllocator<Phase::SystemAllocator>::Destroy(v2);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::TaskManager::GetService<Phase::Controller::SessionManager>(Phase::Logger *a1, int a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v3 = *((void *)a1 + 6);
  if (a2 >= (unint64_t)((*((void *)a1 + 7) - v3) >> 5))
  {
    unint64_t v7 = **(id **)(Phase::Logger::GetInstance(a1) + 448);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315394;
      uint64_t v14 = "TaskManager.hpp";
      __int16 v15 = 1024;
      int v16 = 112;
      _os_log_impl(&dword_221E5E000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: pId < mServiceRegistry.size() is false.", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](exception, "PRECONDITION: pId < mServiceRegistry.size() is false.");
  }
  int v4 = (Phase::Logger *)(v3 + 32 * a2);
  if (!*(void *)v4)
  {
    uint64_t v9 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v4)
                                                                                       + 448)));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      Phase::GetBacktraceFrame<1ul>(&__p);
      long long v10 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)std::string buf = 136315906;
      uint64_t v14 = "TaskManager.hpp";
      __int16 v15 = 1024;
      int v16 = 121;
      __int16 v17 = 1024;
      int v18 = a2;
      __int16 v19 = 2080;
      uint64_t v20 = v10;
      _os_log_impl(&dword_221E5E000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::domain_error) [not lService.has_value() is true]: \"No service registered for Id %i, in call \\n%s\"", buf, 0x22u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }

    uint64_t v11 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](v11, "No service registered for Id %i, in call \n%s");
  }
  int8x8_t v5 = std::any_cast[abi:ne180100]<Phase::Controller::SessionManager * const>((uint64_t (**)(uint64_t, void, void, void, void *))v4);
  if (!v5) {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  return (uint64_t)*v5;
}

void sub_221EDAEDC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_221EDAFEC(_Unwind_Exception *a1)
{
}

void sub_221EDB00C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void Phase::Controller::Submix::~Submix(Phase::Controller::Submix *this)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  *(void *)this = &unk_26D473B88;
  Phase::Controller::Submix::DestroyInputs(this);
  uint64_t v2 = (void *)((char *)this + 168);
  while (*v2 || *((void *)this + 22))
    Phase::Controller::Submix::RemoveEffect(this, 0);
  *uint64_t v2 = 0;
  *((void *)this + 22) = 0;
  *((_DWORD *)this + 46) = 0;
  Phase::BitBlockAllocator<Phase::SystemAllocator>::Destroy((uint64_t)this + 120);
  uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance(v3);
  if (*((unsigned char *)Instance + 1556))
  {
    int8x8_t v5 = **(id **)(Phase::Logger::GetInstance(Instance) + 384);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *((void *)this + 4);
      uint64_t v7 = *((void *)this + 2);
      int v8 = 136315906;
      uint64_t v9 = "CvmSubmix.mm";
      __int16 v10 = 1024;
      int v11 = 101;
      __int16 v12 = 2048;
      uint64_t v13 = v6;
      __int16 v14 = 2048;
      uint64_t v15 = v7;
      _os_log_impl(&dword_221E5E000, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d (sound event: %llu, submix: %llu) - destroyed", (uint8_t *)&v8, 0x26u);
    }
  }
  std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Generator>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Generator>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Generator>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Generator>>>>::~__hash_table((uint64_t)this + 248);
  Phase::BitBlockAllocator<Phase::SystemAllocator>::Destroy((uint64_t)this + 120);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)this + 80);
}

void sub_221EDB18C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void Phase::Controller::Submix::RemoveEffect(Phase::Controller::Submix *this, unsigned int a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if ((a2 & 0x80000000) != 0 || *((_DWORD *)this + 46) <= a2)
  {
    int v8 = **(id **)(Phase::Logger::GetInstance(this) + 384);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      int v10 = 136315394;
      int v11 = "CvmSubmix.mm";
      __int16 v12 = 1024;
      int v13 = 582;
      _os_log_impl(&dword_221E5E000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: inIndex >= 0 && inIndex < mEffectChain.Count() is false.", (uint8_t *)&v10, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::out_of_range::out_of_range[abi:ne180100](exception, "PRECONDITION: inIndex >= 0 && inIndex < mEffectChain.Count() is false.");
  }
  uint64_t v3 = (Phase::Controller::Submix *)((char *)this + 168);
  for (uint64_t i = *((void *)this + 21); a2; --a2)
    uint64_t i = *(void *)(i + 16);
  Phase::LinkedList::RemoveNode(v3, i);
  uint64_t v5 = *(void *)(i + 24);
  uint64_t v6 = *(void *)(i + 32);
  while (v5 != v6)
  {
    std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear((void *)(v5 + 16));
    std::vector<Phase::Controller::VoiceBufferParameter>::__clear[abi:ne180100]((uint64_t *)(v5 + 56));
    v5 += 96;
  }
  unsigned int v7 = *(_DWORD *)(i + 48);
  (**(void (***)(uint64_t))i)(i);
  Phase::BitBlockAllocator<Phase::SystemAllocator>::Free((uint64_t)this + 120, v7);
  *((void *)this + 8) |= 2uLL;
}

void sub_221EDB340(_Unwind_Exception *exception_object)
{
}

uint64_t Phase::Controller::Submix::Pause(uint64_t this)
{
  *(void *)(this + 56) |= 2uLL;
  return this;
}

uint64_t Phase::Controller::Submix::Resume(uint64_t this)
{
  *(void *)(this + 56) |= 4uLL;
  return this;
}

void Phase::Controller::Submix::SessionPause(Phase::Controller::Submix *this)
{
  for (uint64_t i = (uint64_t **)*((void *)this + 33); i; uint64_t i = (uint64_t **)*i)
    Phase::Controller::Generator::SessionPause((Phase::Controller::Generator *)i[4]);
}

uint64_t Phase::Controller::Submix::SessionResume(uint64_t this)
{
  for (uint64_t i = *(void **)(this + 264); i; uint64_t i = (void *)*i)
  {
    this = i[4];
    if (*(_DWORD *)(this + 388) == 1) {
      this = (*(uint64_t (**)(uint64_t))(*(void *)this + 32))(this);
    }
  }
  return this;
}

uint64_t Phase::Controller::Submix::ClientEnginePause(uint64_t this)
{
  for (uint64_t i = *(uint64_t ***)(this + 264); i; uint64_t i = (uint64_t **)*i)
    this = (*(uint64_t (**)(uint64_t *))(*i[4] + 40))(i[4]);
  return this;
}

uint64_t Phase::Controller::Submix::ClientEngineStart(uint64_t this)
{
  for (uint64_t i = *(uint64_t ***)(this + 264); i; uint64_t i = (uint64_t **)*i)
    this = (*(uint64_t (**)(uint64_t *))(*i[4] + 48))(i[4]);
  return this;
}

uint64_t Phase::Controller::Submix::Reset(uint64_t this)
{
  *(void *)(this + 56) = *(void *)(this + 56) & 0xFFFFFFFFFFFFFFE6 | 0x18;
  return this;
}

uint64_t Phase::Controller::Submix::Destroy(uint64_t this)
{
  *(void *)(this + 56) |= 0x28uLL;
  return this;
}

BOOL Phase::Controller::Submix::IsStopped(Phase::Controller::Submix *this)
{
  return !*((unsigned char *)this + 72) && *((unsigned char *)this + 288) != 0;
}

uint64_t Phase::Controller::Submix::IsDestroyed(Phase::Controller::Submix *this)
{
  if ((*((unsigned char *)this + 56) & 0x20) != 0) {
    return (*(uint64_t (**)(void))(*(void *)this + 80))();
  }
  else {
    return 0;
  }
}

BOOL Phase::Controller::Submix::IsPreparing(Phase::Controller::Submix *this)
{
  return *((unsigned char *)this + 72) == 2;
}

BOOL Phase::Controller::Submix::IsReady(Phase::Controller::Submix *this)
{
  return *((unsigned __int8 *)this + 72) - 3 < 2;
}

BOOL Phase::Controller::Submix::HasInputs(Phase::Controller::Submix *this)
{
  return *((void *)this + 34) != 0;
}

uint64_t Phase::Controller::Submix::HasActiveInputs(Phase::Controller::Submix *this)
{
  uint64_t v1 = (void *)*((void *)this + 33);
  if (!v1) {
    return 0;
  }
  while (1)
  {
    uint64_t v2 = v1[4];
    if (*(_DWORD *)(v2 + 508) != 1 && *(_DWORD *)(v2 + 376) != 4) {
      break;
    }
    uint64_t v1 = (void *)*v1;
    if (!v1) {
      return 0;
    }
  }
  return 1;
}

BOOL Phase::Controller::Submix::AllInputsPaused(Phase::Controller::Submix *this)
{
  uint64_t v1 = (void *)((char *)this + 264);
  do
    uint64_t v1 = (void *)*v1;
  while (v1 && *(unsigned char *)(v1[4] + 512));
  return v1 == 0;
}

void Phase::Controller::Submix::SetParameter(Phase::Controller::Submix *this, unint64_t a2, double a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v8 = a2;
  int v4 = (double *)std::__hash_table<std::__hash_value_type<unsigned long long,int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,int>>>::find<unsigned long long>((void *)this + 10, &v8);
  if (v4)
  {
    uint64_t v5 = v4;
    double v6 = Phase::Controller::sClamp<double>((Phase::Logger *)v4, a3, v4[3], v4[4]);
    if (v6 != v5[6])
    {
      v5[6] = v6;
      *((unsigned char *)v5 + 56) = 1;
    }
  }
  else
  {
    unsigned int v7 = **(id **)(Phase::Logger::GetInstance(0) + 384);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 136315650;
      int v10 = "CvmSubmix.mm";
      __int16 v11 = 1024;
      int v12 = 233;
      __int16 v13 = 2048;
      unint64_t v14 = v8;
      _os_log_impl(&dword_221E5E000, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d Submix:SetParameter: was called with an invalid inParameterId %lld!", buf, 0x1Cu);
    }
  }
}

void Phase::Controller::Submix::SetParameterData(Phase::Controller::Submix *this, uint64_t a2, const void *a3)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  int v4 = **(id **)(Phase::Logger::GetInstance(this) + 384);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    int v5 = 136315650;
    double v6 = "CvmSubmix.mm";
    __int16 v7 = 1024;
    int v8 = 240;
    __int16 v9 = 2048;
    uint64_t v10 = a2;
    _os_log_impl(&dword_221E5E000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d Submix:SetParameterData: was called with an invalid inParameterId %lld!", (uint8_t *)&v5, 0x1Cu);
  }
}

void Phase::Controller::Submix::StopInputs(Phase::Controller::Submix *this)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  for (uint64_t i = (void *)*((void *)this + 33); i; uint64_t i = (void *)*i)
  {
    uint64_t v2 = (Phase::Controller::Generator *)i[4];
    if (!v2)
    {
      uint64_t v3 = **(id **)(Phase::Logger::GetInstance(0) + 384);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      {
        int v5 = 136315394;
        double v6 = "CvmSubmix.mm";
        __int16 v7 = 1024;
        int v8 = 248;
        _os_log_impl(&dword_221E5E000, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: pGenerator != nullptr is false.", (uint8_t *)&v5, 0x12u);
      }
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "PRECONDITION: pGenerator != nullptr is false.");
    }
    Phase::Controller::Generator::Stop(v2);
  }
}

void sub_221EDB8C8(_Unwind_Exception *exception_object)
{
}

void Phase::Controller::Submix::DestroyInputs(Phase::Controller::Submix *this)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  for (uint64_t i = (uint64_t **)*((void *)this + 33); i; uint64_t i = (uint64_t **)*i)
  {
    uint64_t v2 = (Phase::Controller::Generator *)i[4];
    if (!v2)
    {
      uint64_t v3 = **(id **)(Phase::Logger::GetInstance(0) + 384);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      {
        int v5 = 136315394;
        double v6 = "CvmSubmix.mm";
        __int16 v7 = 1024;
        int v8 = 260;
        _os_log_impl(&dword_221E5E000, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: pGenerator != nullptr is false.", (uint8_t *)&v5, 0x12u);
      }
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "PRECONDITION: pGenerator != nullptr is false.");
    }
    Phase::Controller::Generator::Stop(v2);
    Phase::Controller::Generator::Finish((Phase::Controller::Generator *)i[4]);
  }
}

void sub_221EDBA00(_Unwind_Exception *exception_object)
{
}

void Phase::Controller::Submix::Update(Phase::Controller::Submix *this, double a2)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  if ((*(uint64_t (**)(Phase::Controller::Submix *))(*(void *)this + 88))(this)) {
    return;
  }
  int v4 = (Phase::Logger *)(*(uint64_t (**)(Phase::Controller::Submix *))(*(void *)this + 112))(this);
  int v5 = (int)v4;
  for (uint64_t i = (void *)*((void *)this + 33); i; uint64_t i = (void *)*i)
  {
    __int16 v7 = (Phase::Controller::Generator *)i[4];
    if (!v7)
    {
      uint64_t v32 = **(id **)(Phase::Logger::GetInstance(v4) + 384);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string __p = 136315394;
        *(void *)&__p[4] = "CvmSubmix.mm";
        *(_WORD *)&__p[12] = 1024;
        *(_DWORD *)&__p[14] = 283;
        _os_log_impl(&dword_221E5E000, v32, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: pGenerator != nullptr is false.", __p, 0x12u);
      }
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "PRECONDITION: pGenerator != nullptr is false.");
    }
    if ((*((unsigned char *)this + 56) & 0x10) != 0)
    {
      *((void *)v7 + 46) = 0;
      *((unsigned char *)v7 + 512) = 0;
      *((unsigned char *)v7 + 384) = 1;
      Phase::Controller::Generator::SetSleepState((uint64_t)v7, 0);
      (*(void (**)(Phase::Controller::Generator *, void))(*(void *)v7 + 112))(v7, 0);
      __int16 v7 = (Phase::Controller::Generator *)i[4];
    }
    Phase::Controller::Generator::Update(v7, a2, v5);
  }
  uint64_t v8 = *((void *)this + 7);
  *((void *)this + 7) = v8 & 0xFFFFFFFFFFFFFFEFLL;
  if ((v8 & 8) != 0)
  {
    (*(void (**)(Phase::Controller::Submix *))(*(void *)this + 320))(this);
    if (*((unsigned __int8 *)this + 72) >= 2u) {
      goto LABEL_69;
    }
    goto LABEL_64;
  }
  uint64_t v9 = *(void *)this;
  if ((v8 & 2) != 0)
  {
    (*(void (**)(Phase::Controller::Submix *))(v9 + 296))(this);
    if (*((unsigned char *)this + 72) != 5) {
      goto LABEL_69;
    }
    goto LABEL_15;
  }
  char v10 = (*(uint64_t (**)(Phase::Controller::Submix *))(v9 + 184))(this);
  int v11 = *((unsigned __int8 *)this + 72);
  if (v10)
  {
    if (!*((unsigned char *)this + 72)) {
      goto LABEL_64;
    }
  }
  else if (v11 != 6)
  {
    goto LABEL_21;
  }
  (*(void (**)(Phase::Controller::Submix *))(*(void *)this + 312))(this);
  int v11 = *((unsigned __int8 *)this + 72);
  if ((v11 & 0xFE) != 6) {
    goto LABEL_69;
  }
  if (v10) {
    goto LABEL_25;
  }
LABEL_21:
  if (v11 == 5)
  {
LABEL_15:
    uint64_t v12 = *((void *)this + 7);
    if ((v12 & 8) != 0) {
      goto LABEL_69;
    }
    if ((v12 & 4) == 0) {
      goto LABEL_64;
    }
    (*(void (**)(Phase::Controller::Submix *))(*(void *)this + 304))(this);
    int v11 = *((unsigned __int8 *)this + 72);
    goto LABEL_25;
  }
  if (v11 == 7)
  {
    (*(void (**)(Phase::Controller::Submix *))(*(void *)this + 288))(this);
    if (*((unsigned char *)this + 72) != 2) {
      goto LABEL_69;
    }
LABEL_27:
    if (!(*(unsigned int (**)(Phase::Controller::Submix *))(*(void *)this + 104))(this)) {
      return;
    }
    (*(void (**)(Phase::Controller::Submix *))(*(void *)this + 304))(this);
    if (*((unsigned char *)this + 72) != 3) {
      goto LABEL_69;
    }
    goto LABEL_29;
  }
LABEL_25:
  if (v11 != 3)
  {
    if (v11 != 2) {
      goto LABEL_31;
    }
    goto LABEL_27;
  }
LABEL_29:
  if (!(*(unsigned int (**)(Phase::Controller::Submix *))(*(void *)this + 128))(this)) {
    return;
  }
  Phase::Controller::Submix::SetState((uint64_t)this, 4u);
  int v11 = *((unsigned __int8 *)this + 72);
LABEL_31:
  if (v11 == 4)
  {
    if ((*((unsigned char *)this + 64) & 1) == 0)
    {
      uint64_t v13 = *((void *)this + 7);
      if ((v13 & 8) == 0 && (v13 & 2) == 0)
      {
        for (uint64_t j = (uint64_t *)*((void *)this + 12); j; uint64_t j = (uint64_t *)*j)
        {
          if (*((unsigned char *)j + 56)) {
            *((unsigned char *)j + 56) = 0;
          }
        }
        if ((*(uint64_t (**)(Phase::Controller::Submix *))(*(void *)this + 336))(this) != 2)
        {
          double v15 = 0.016666;
          if (a2 <= 0.016666) {
            double v15 = a2;
          }
          if (*((unsigned char *)this + 289)) {
            double v15 = 0.0;
          }
          Phase::Controller::Submix::UpdateGainEffectsWithDuration(this, v15);
          *((unsigned char *)this + 289) = (*(uint64_t (**)(Phase::Controller::Submix *))(*(void *)this + 136))(this);
        }
        uint64_t v16 = *((void *)this + 8);
        *((void *)this + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::Controller::RouterCommandBatch,std::pair<Phase::Handle64,unsigned long long>,std::shared_ptr<Phase::Controller::Renderer>,unsigned long long,std::pair<Phase::UniqueObjectId,BOOL>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v16 & 0xFFFFFFFFFFFFFFFDLL;
        if ((v16 & 2) != 0)
        {
          Phase::Controller::Submix::GetEffects(this, 0, __p);
          __int16 v27 = (Phase::Logger *)Phase::Controller::DVM::VoiceGraph::ConfigureSubmix(*(void **)(**((void **)this + 28) + 72), *((void *)this + 2), *((void *)this + 3), 1, __p);
          int v28 = (int)v27;
          if (v27)
          {
            char v29 = **(id **)(Phase::Logger::GetInstance(v27) + 384);
            if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)std::string buf = 136315650;
              *(void *)&uint8_t buf[4] = "CvmSubmix.mm";
              __int16 v37 = 1024;
              int v38 = 419;
              __int16 v39 = 1024;
              int v40 = v28;
              _os_log_impl(&dword_221E5E000, v29, OS_LOG_TYPE_DEFAULT, "%25s:%-5d mpDspVoiceManager->ConfigureSubmix() failed with error code: %hhd", buf, 0x18u);
            }
          }
          *(void *)std::string buf = __p;
          std::vector<Phase::Controller::DspNode>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        }
        else
        {
          int v17 = *((_DWORD *)this + 46);
          if (v17 >= 1)
          {
            int v18 = 0;
            __int16 v19 = (char *)this + 168;
            do
            {
              uint64_t v20 = *(void *)v19;
              uint64_t v22 = *(unint64_t **)(*(void *)v19 + 24);
              uint64_t v21 = *(unint64_t **)(*(void *)v19 + 32);
              if (v22 != v21)
              {
                do
                {
                  Phase::Controller::VoiceData::PackDirtyDspParameters((Phase::Controller::VoiceData *)v22, __p);
                  long long v23 = (Phase::Logger *)Phase::Controller::DVM::VoiceGraph::SetParameters(*(Phase::Controller::DVM::VoiceGraph **)(**((void **)this + 28) + 72), *v22, v22[1], __p);
                  int v24 = (int)v23;
                  if (v23)
                  {
                    __int16 v25 = **(id **)(Phase::Logger::GetInstance(v23) + 384);
                    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)std::string buf = 136315650;
                      *(void *)&uint8_t buf[4] = "CvmSubmix.mm";
                      __int16 v37 = 1024;
                      int v38 = 440;
                      __int16 v39 = 1024;
                      int v40 = v24;
                      _os_log_impl(&dword_221E5E000, v25, OS_LOG_TYPE_DEFAULT, "%25s:%-5d mpDspVoiceManager->SetParameters() failed with error code: %hhd", buf, 0x18u);
                    }
                  }
                  for (unint64_t k = v22[4]; k; unint64_t k = *(void *)k)
                    *(unsigned char *)(k + 56) = 0;
                  if (*(void *)__p)
                  {
                    *(void *)&__p[8] = *(void *)__p;
                    operator delete(*(void **)__p);
                  }
                  v22 += 12;
                }
                while (v22 != v21);
                int v17 = *((_DWORD *)this + 46);
              }
              __int16 v19 = (char *)(v20 + 16);
              ++v18;
            }
            while (v18 < v17);
          }
        }
        goto LABEL_64;
      }
    }
LABEL_69:
    std::terminate();
  }
LABEL_64:
  if (((*(unsigned int (**)(Phase::Controller::Submix *))(*(void *)this + 112))(this) & ~v5) == 1)
  {
    for (uint64_t m = (void *)*((void *)this + 33); m; uint64_t m = (void *)*m)
    {
      char v31 = (Phase::Controller::Generator *)m[4];
      if (!v31)
      {
        uint64_t v34 = **(id **)(Phase::Logger::GetInstance(0) + 384);
        if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string __p = 136315394;
          *(void *)&__p[4] = "CvmSubmix.mm";
          *(_WORD *)&__p[12] = 1024;
          *(_DWORD *)&__p[14] = 458;
          _os_log_impl(&dword_221E5E000, v34, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: pGenerator != nullptr is false.", __p, 0x12u);
        }
        uint64_t v35 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v35, "PRECONDITION: pGenerator != nullptr is false.");
      }
      Phase::Controller::Generator::Update(v31, 0.0, 1);
    }
  }
}

void sub_221EDC218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **p_p, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  p_p = &__p;
  std::vector<Phase::Controller::DspNode>::__destroy_vector::operator()[abi:ne180100](&p_p);
  _Unwind_Resume(a1);
}

void Phase::Controller::Submix::SetState(uint64_t a1, unsigned int a2)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  if (*(unsigned __int8 *)(a1 + 72) != a2)
  {
    uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance((Phase::Logger *)a1);
    if (*((unsigned char *)Instance + 1556))
    {
      int v5 = **(id **)(Phase::Logger::GetInstance(Instance) + 384);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v6 = *(char *)(a1 + 72);
        if (v6 > 7) {
          __int16 v7 = "<not found>";
        }
        else {
          __int16 v7 = off_2645F72B0[v6];
        }
        uint64_t v8 = *(void *)(a1 + 32);
        uint64_t v9 = *(void *)(a1 + 16);
        if (a2 > 7) {
          char v10 = "<not found>";
        }
        else {
          char v10 = off_2645F72B0[a2];
        }
        int v11 = 136316418;
        uint64_t v12 = "CvmSubmix.mm";
        __int16 v13 = 1024;
        int v14 = 1089;
        __int16 v15 = 2048;
        uint64_t v16 = v8;
        __int16 v17 = 2048;
        uint64_t v18 = v9;
        __int16 v19 = 2080;
        uint64_t v20 = v7;
        __int16 v21 = 2080;
        uint64_t v22 = v10;
        _os_log_impl(&dword_221E5E000, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d (sound event: %llu, submix: %llu) - state changed from '%s' to '%s'", (uint8_t *)&v11, 0x3Au);
      }
    }
    *(unsigned char *)(a1 + 72) = a2;
  }
}

void Phase::Controller::Submix::UpdateGainEffectsWithDuration(Phase::Controller::Submix *this, double a2)
{
  double v4 = (*(double (**)(Phase::Controller::Submix *))(*(void *)this + 328))(this);
  unint64_t v5 = atomic_load((unint64_t *)this + 38);
  if ((v5 & 0x100000000) != 0) {
    double v6 = 0.0;
  }
  else {
    double v6 = 1.0;
  }
  LODWORD(v7) = atomic_load((unint64_t *)this + 38);
  double v8 = v7;
  Phase::Controller::Submix::SetEffectParameter(this, 0, 0, a2, 0);
  Phase::Controller::Submix::SetEffectParameter(this, 0, 2, v4, 0);
  Phase::Controller::Submix::SetEffectParameter(this, 0, 3, v6, 0);

  Phase::Controller::Submix::SetEffectParameter(this, 0, 6, v8, 0);
}

void Phase::Controller::Submix::GetEffects(Phase::Controller::Submix *this@<X0>, int a2@<W1>, void *a3@<X8>)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  uint64_t v5 = Phase::Controller::TaskManager::GetService<Phase::Controller::VoicePoolRegistry>(*((Phase::Logger **)this + 27), 3);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  char v44 = a3;
  if (*((int *)this + 46) >= 1)
  {
    int v6 = 0;
    float v7 = (void *)*((void *)this + 21);
    long long v41 = a3 + 2;
    uint64_t v42 = (void *)(v5 + 40);
    do
    {
      uint64_t v9 = v7[3];
      uint64_t v8 = v7[4];
      if (0xAAAAAAAAAAAAAAABLL * ((v8 - v9) >> 5) != (*(int (**)(Phase::Controller::Submix *))(*(void *)this + 344))(this)) {
        std::terminate();
      }
      *(void *)std::string buf = *(void *)v7[3];
      char v10 = (Phase::Logger *)std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::find<unsigned long long>(v42, (unint64_t *)buf);
      if (!v10 || (uint64_t v11 = *((void *)v10 + 3)) == 0)
      {
        int v38 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v10)
                                                                                            + 384)));
        if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
        {
          uint64_t v39 = *(void *)v7[3];
          *(_DWORD *)std::string buf = 136315650;
          *(void *)&uint8_t buf[4] = "CvmSubmix.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1436;
          *(_WORD *)&unsigned char buf[18] = 2048;
          *(void *)&unsigned char buf[20] = v39;
          _os_log_impl(&dword_221E5E000, v38, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [!pVoicePoolEntry is true]: \"Couldn't find a Voice Pool with StringHashId 0x%llx!\"", buf, 0x1Cu);
        }

        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Couldn't find a Voice Pool with StringHashId 0x%llx!");
      }
      uint64_t v12 = (Phase::Controller::VoiceData *)v7[4];
      if (a2)
      {
        __int16 v13 = (Phase::Controller::VoiceData *)v7[3];
        if (v13 != v12)
        {
          do
          {
            *((void *)v13 + 1) = atomic_fetch_add(*((atomic_ullong *volatile *)this + 25), 1uLL);
            __int16 v13 = (Phase::Controller::VoiceData *)((char *)v13 + 96);
          }
          while (v13 != v12);
          uint64_t v12 = (Phase::Controller::VoiceData *)v7[4];
        }
      }
      long long v45 = 0u;
      long long v46 = 0u;
      *(void *)&long long v45 = *(void *)(v11 + 24);
      for (uint64_t i = (Phase::Controller::VoiceData *)v7[3]; i != v12; uint64_t i = (Phase::Controller::VoiceData *)((char *)i + 96))
      {
        Phase::Controller::VoiceData::CreateDspNodeVoice(i, (uint64_t)buf);
        uint64_t v15 = v46;
        if ((unint64_t)v46 >= *((void *)&v46 + 1))
        {
          *(void *)&long long v46 = std::vector<Phase::Controller::DspNodeVoice>::__push_back_slow_path<Phase::Controller::DspNodeVoice>((uint64_t *)&v45 + 1, (uint64_t)buf);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
        }
        else
        {
          *(_OWORD *)long long v46 = *(unint64_t *)buf;
          *(void *)(v15 + 24) = 0;
          *(void *)(v15 + 32) = 0;
          *(void *)(v15 + 16) = 0;
          *(_OWORD *)(v15 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::Controller::RouterCommandBatch,std::pair<Phase::Handle64,unsigned long long>,std::shared_ptr<Phase::Controller::Renderer>,unsigned long long,std::pair<Phase::UniqueObjectId,BOOL>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = *(_OWORD *)&buf[8];
          *(void *)(v15 + 24) = *(void *)&buf[24];
          memset(&buf[8], 0, 24);
          *(void *)(v15 + 40) = 0;
          *(void *)(v15 + 4std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::Controller::RouterCommandBatch,std::pair<Phase::Handle64,unsigned long long>,std::shared_ptr<Phase::Controller::Renderer>,unsigned long long,std::pair<Phase::UniqueObjectId,BOOL>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
          *(_OWORD *)(v15 + 32) = *(_OWORD *)v49;
          *(void *)(v15 + 4std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::Controller::RouterCommandBatch,std::pair<Phase::Handle64,unsigned long long>,std::shared_ptr<Phase::Controller::Renderer>,unsigned long long,std::pair<Phase::UniqueObjectId,BOOL>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v50;
          *(void *)(v15 + 56) = 0;
          v49[0] = 0;
          v49[1] = 0;
          uint64_t v50 = 0;
          *(void *)(v15 + 64) = 0;
          *(void *)(v15 + 72) = 0;
          *(_OWORD *)(v15 + 56) = *(_OWORD *)v51;
          v51[0] = 0;
          v51[1] = 0;
          *(void *)(v15 + 72) = v52;
          *(void *)(v15 + 80) = 0;
          uint64_t v52 = 0;
          *(void *)(v15 + 8std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::Controller::RouterCommandBatch,std::pair<Phase::Handle64,unsigned long long>,std::shared_ptr<Phase::Controller::Renderer>,unsigned long long,std::pair<Phase::UniqueObjectId,BOOL>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
          *(void *)(v15 + 96) = 0;
          *(_OWORD *)(v15 + 80) = *(_OWORD *)__p;
          *(void *)(v15 + 96) = v54;
          __p[0] = 0;
          __p[1] = 0;
          uint64_t v54 = 0;
          *(void *)&long long v46 = v15 + 104;
        }
        if (v51[0])
        {
          v51[1] = v51[0];
          operator delete(v51[0]);
        }
        if (v49[0])
        {
          v49[1] = v49[0];
          operator delete(v49[0]);
        }
        uint64_t v47 = (void **)&buf[8];
        std::vector<Phase::Controller::VoiceBufferParameter>::__destroy_vector::operator()[abi:ne180100](&v47);
      }
      __int16 v17 = (void *)v44[1];
      unint64_t v16 = v44[2];
      if ((unint64_t)v17 >= v16)
      {
        uint64_t v20 = ((uint64_t)v17 - *v44) >> 5;
        if ((unint64_t)(v20 + 1) >> 59) {
          std::vector<Phase::Controller::VoiceBufferParameter>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v21 = v16 - *v44;
        uint64_t v22 = v21 >> 4;
        if (v21 >> 4 <= (unint64_t)(v20 + 1)) {
          uint64_t v22 = v20 + 1;
        }
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v23 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v23 = v22;
        }
        v49[0] = v41;
        if (v23)
        {
          if (v23 >> 59) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          int v24 = (char *)operator new(32 * v23);
        }
        else
        {
          int v24 = 0;
        }
        __int16 v25 = &v24[32 * v20];
        *(void *)std::string buf = v24;
        *(void *)&buf[8] = v25;
        *(void *)&uint8_t buf[16] = v25;
        *(void *)&uint8_t buf[24] = &v24[32 * v23];
        uint64_t v26 = *((void *)&v45 + 1);
        *(void *)__int16 v25 = v45;
        *((void *)v25 + 2) = 0;
        *((void *)v25 + 3) = 0;
        *((void *)v25 + 1) = 0;
        std::vector<Phase::Controller::DspNodeVoice>::__init_with_size[abi:ne180100]<Phase::Controller::DspNodeVoice*,Phase::Controller::DspNodeVoice*>((void *)v25 + 1, v26, v46, 0x4EC4EC4EC4EC4EC5 * (((uint64_t)v46 - v26) >> 3));
        uint64_t v27 = *(void *)&buf[8];
        uint64_t v18 = *(void *)&buf[16] + 32;
        *(void *)&buf[16] += 32;
        uint64_t v29 = *v44;
        unint64_t v28 = v44[1];
        if (v28 == *v44)
        {
          int64x2_t v33 = vdupq_n_s64(v28);
          __int16 v19 = v44;
        }
        else
        {
          uint64_t v30 = 0;
          do
          {
            uint64_t v31 = v27 + v30;
            uint64_t v32 = v28 + v30;
            *(void *)(v31 - 32) = *(void *)(v28 + v30 - 32);
            *(void *)(v31 - 24) = 0;
            *(void *)(v31 - 16) = 0;
            *(void *)(v31 - std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::Controller::RouterCommandBatch,std::pair<Phase::Handle64,unsigned long long>,std::shared_ptr<Phase::Controller::Renderer>,unsigned long long,std::pair<Phase::UniqueObjectId,BOOL>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
            *(_OWORD *)(v31 - 24) = *(_OWORD *)(v28 + v30 - 24);
            *(void *)(v31 - std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::Controller::RouterCommandBatch,std::pair<Phase::Handle64,unsigned long long>,std::shared_ptr<Phase::Controller::Renderer>,unsigned long long,std::pair<Phase::UniqueObjectId,BOOL>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = *(void *)(v28 + v30 - 8);
            *(void *)(v32 - 24) = 0;
            *(void *)(v32 - 16) = 0;
            *(void *)(v32 - std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::Controller::RouterCommandBatch,std::pair<Phase::Handle64,unsigned long long>,std::shared_ptr<Phase::Controller::Renderer>,unsigned long long,std::pair<Phase::UniqueObjectId,BOOL>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
            v30 -= 32;
          }
          while (v28 + v30 != v29);
          __int16 v19 = v44;
          int64x2_t v33 = *(int64x2_t *)v44;
          uint64_t v18 = *(void *)&buf[16];
          v27 += v30;
        }
        void *v19 = v27;
        v19[1] = v18;
        *(int64x2_t *)&buf[8] = v33;
        uint64_t v34 = v19[2];
        void v19[2] = *(void *)&buf[24];
        *(void *)&uint8_t buf[24] = v34;
        *(void *)std::string buf = v33.i64[0];
        std::__split_buffer<Phase::Controller::DspNode>::~__split_buffer((uint64_t)buf);
      }
      else
      {
        void *v17 = v45;
        v17[1] = 0;
        v17[2] = 0;
        v17[3] = 0;
        std::vector<Phase::Controller::DspNodeVoice>::__init_with_size[abi:ne180100]<Phase::Controller::DspNodeVoice*,Phase::Controller::DspNodeVoice*>(v17 + 1, *((uint64_t *)&v45 + 1), v46, 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v46 - *((void *)&v45 + 1)) >> 3));
        uint64_t v18 = (uint64_t)(v17 + 4);
        __int16 v19 = v44;
        v44[1] = v18;
      }
      v19[1] = v18;
      uint64_t v35 = v7[3];
      uint64_t v36 = v7[4];
      while (v35 != v36)
      {
        for (uint64_t j = *(uint64_t **)(v35 + 32); j; uint64_t j = (uint64_t *)*j)
          *((unsigned char *)j + 56) = 0;
        v35 += 96;
      }
      float v7 = (void *)v7[2];
      *(void *)std::string buf = (char *)&v45 + 8;
      std::vector<Phase::Controller::DspNodeVoice>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      ++v6;
    }
    while (v6 < *((_DWORD *)this + 46));
  }
}

void sub_221EDCA0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, void **a13)
{
  a13 = a12;
  std::vector<Phase::Controller::DspNode>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::Submix::ShouldSleep(Phase::Controller::Submix *this)
{
  if (*((unsigned char *)this + 8)) {
    return 0;
  }
  if ((*(unsigned int (**)(Phase::Controller::Submix *))(*(void *)this + 120))(this)
    && ((*(uint64_t (**)(Phase::Controller::Submix *))(*(void *)this + 128))(this) & 1) == 0)
  {
    unint64_t v3 = *((void *)this + 8) | 1;
    uint64_t result = 1;
  }
  else
  {
    uint64_t result = 0;
    unint64_t v3 = *((void *)this + 8) & 0xFFFFFFFFFFFFFFFELL;
  }
  *((void *)this + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::Controller::RouterCommandBatch,std::pair<Phase::Handle64,unsigned long long>,std::shared_ptr<Phase::Controller::Renderer>,unsigned long long,std::pair<Phase::UniqueObjectId,BOOL>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v3;
  return result;
}

uint64_t Phase::Controller::Submix::SubmitGeneratorStoppedResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = *(uint64_t (**)(void))(*(void *)Phase::Controller::Submix::GetGenerator(a1, a2, a3) + 64);

  return v3();
}

uint64_t Phase::Controller::Submix::GetGenerator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  v10[0] = a2;
  v10[1] = a3;
  double v4 = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>((void *)(a1 + 248), v10);
  if (!v4)
  {
    int v6 = **(id **)(Phase::Logger::GetInstance(0) + 384);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315650;
      uint64_t v12 = "CvmSubmix.mm";
      __int16 v13 = 1024;
      int v14 = 1372;
      __int16 v15 = 2048;
      uint64_t v16 = a2;
      _os_log_impl(&dword_221E5E000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (IdAlreadyExists) [it == mGenerators.end() is true]: \"GeneratorId %llu does not exist!\"", buf, 0x1Cu);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _ZN5Phase10Controller15IdAlreadyExistsCI1St11logic_errorEPKc(exception, "GeneratorId %llu does not exist!");
  }
  uint64_t result = v4[4];
  if (!result)
  {
    uint64_t v8 = **(id **)(Phase::Logger::GetInstance(0) + 384);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315394;
      uint64_t v12 = "CvmSubmix.mm";
      __int16 v13 = 1024;
      int v14 = 1375;
      _os_log_impl(&dword_221E5E000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: pGenerator != nullptr is false.", buf, 0x12u);
    }
    uint64_t v9 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v9, "PRECONDITION: pGenerator != nullptr is false.");
  }
  return result;
}

void sub_221EDCD78(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

Phase::Logger *Phase::Controller::Submix::SubmitSubmixStoppedResult(Phase::Logger *this, std::error_code a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  std::error_code v4 = a2;
  if (a2.__val_ == 1)
  {
    uint64_t v2 = **(id **)(Phase::Logger::GetInstance(this) + 384);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"CvmSubmix.mm";
      WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = 494;
      _os_log_impl(&dword_221E5E000, v2, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [inErrorCode.value() == true is true]: inErrorCode.message()", (uint8_t *)&buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    std::error_code::message(&buf, &v4);
    MEMORY[0x223C932C0](exception, &buf);
  }
  *((unsigned char *)this + 28std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::Controller::RouterCommandBatch,std::pair<Phase::Handle64,unsigned long long>,std::shared_ptr<Phase::Controller::Renderer>,unsigned long long,std::pair<Phase::UniqueObjectId,BOOL>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 1;
  return this;
}

void sub_221EDCEC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

uint64_t Phase::Controller::Submix::AddEffect(Phase::Controller::Submix *this, uint64_t a2, uint64_t a3)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v6 = Phase::BitBlockAllocator<Phase::SystemAllocator>::Allocate((Phase::Controller::Submix *)((char *)this + 120));
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::Controller::RouterCommandBatch,std::pair<Phase::Handle64,unsigned long long>,std::shared_ptr<Phase::Controller::Renderer>,unsigned long long,std::pair<Phase::UniqueObjectId,BOOL>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0u;
  *(_OWORD *)(v6 + 24) = 0u;
  *(void *)uint64_t v6 = &unk_26D473D00;
  *((void *)v6 + 3) = 0;
  *((void *)v6 + 4) = 0;
  *((void *)v6 + 5) = 0;
  *((_DWORD *)v6 + 12) = v7;
  uint64_t v8 = Phase::Controller::TaskManager::GetService<Phase::Controller::VoicePoolRegistry>(*((Phase::Logger **)this + 27), 3);
  *(void *)std::string buf = a2;
  uint64_t v9 = (Phase::Controller::VoicePoolEntry **)std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::find<unsigned long long>((void *)(v8 + 40), (unint64_t *)buf);
  if (!v9 || (unint64_t v23 = v9[3]) == 0)
  {
    uint64_t v21 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)v9) + 384);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = "CvmSubmix.mm";
      __int16 v25 = 1024;
      int v26 = 513;
      _os_log_impl(&dword_221E5E000, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [!pVoicePoolEntry is true]: \"Couldn't find a Voice Pool!\"", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Couldn't find a Voice Pool!");
  }
  if ((*(int (**)(Phase::Controller::Submix *))(*(void *)this + 344))(this) >= 1)
  {
    int v10 = 0;
    do
    {
      unint64_t v11 = *((void *)v6 + 4);
      if (v11 >= *((void *)v6 + 5))
      {
        uint64_t v12 = std::vector<Phase::Controller::VoiceData>::__emplace_back_slow_path<Phase::Controller::VoicePoolEntry const*&>((uint64_t *)v6 + 3, &v23);
      }
      else
      {
        Phase::Controller::VoiceData::VoiceData(*((Phase::Controller::VoiceData **)v6 + 4), v23, 0x7FFFFFFFFFFFFFFFLL);
        uint64_t v12 = v11 + 96;
        *((void *)v6 + 4) = v11 + 96;
      }
      *((void *)v6 + 4) = v12;
      ++v10;
    }
    while (v10 < (*(int (**)(Phase::Controller::Submix *))(*(void *)this + 344))(this));
  }
  if (a2 == 0x235B3F2D33EB877ALL || a3)
  {
    if ((a3 & 0x80000000) != 0)
    {
LABEL_16:
      Phase::LinkedList::InsertNodeAfter((uint64_t)this + 168, (uint64_t)v6, *((void *)this + 22));
      unsigned int v17 = *((_DWORD *)this + 46);
      a3 = v17 - 1;
      goto LABEL_24;
    }
  }
  else
  {
    __int16 v13 = (char *)this + 168;
    uint64_t v14 = *((void *)this + 21);
    if (!v14)
    {
      if ((*((_DWORD *)this + 46) & 0x80000000) != 0) {
        goto LABEL_16;
      }
      a3 = 0;
      uint64_t v18 = 0;
      goto LABEL_23;
    }
    uint64_t v16 = v14 + 24;
    __int16 v15 = *(void **)(v14 + 24);
    if (*(void *)(v16 + 8) - (void)v15 != *((void *)v6 + 4) - *((void *)v6 + 3)) {
      goto LABEL_26;
    }
    a3 = *v15 == 0x235B3F2D33EB877ALL;
  }
  if ((int)a3 > *((_DWORD *)this + 46)) {
    goto LABEL_16;
  }
  __int16 v13 = (char *)this + 168;
  uint64_t v18 = *((void *)this + 21);
  if (a3)
  {
    int v19 = a3;
    do
    {
      uint64_t v18 = *(void *)(v18 + 16);
      --v19;
    }
    while (v19);
  }
LABEL_23:
  Phase::LinkedList::InsertNodeBefore((uint64_t)v13, (uint64_t)v6, v18);
  unsigned int v17 = *((_DWORD *)this + 46);
LABEL_24:
  if (v17 <= a3) {
LABEL_26:
  }
    std::terminate();
  *((void *)this + 8) |= 2uLL;
  return a3;
}

void sub_221EDD20C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::Submix::AddEffect(Phase::Controller::Submix *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = Phase::Controller::Submix::AddEffect(a1, *a2, a3);
  uint64_t v6 = v5;
  uint64_t v8 = a2[1];
  uint64_t v7 = a2[2];
  if (v8 != v7)
  {
    uint64_t v9 = (void *)*((void *)a1 + 21);
    if ((int)v5 >= 1)
    {
      int v10 = v5;
      do
      {
        uint64_t v9 = (void *)v9[2];
        --v10;
      }
      while (v10);
    }
    do
    {
      unint64_t v11 = (Phase::Controller::VoiceData *)v9[3];
      uint64_t v12 = (Phase::Controller::VoiceData *)v9[4];
      while (v11 != v12)
      {
        Phase::Controller::VoiceData::SetParameter(v11, *(_DWORD *)v8, *(double *)(v8 + 8), 0);
        unint64_t v11 = (Phase::Controller::VoiceData *)((char *)v11 + 96);
      }
      v8 += 16;
    }
    while (v8 != v7);
  }
  return v6;
}

void Phase::Controller::Submix::SetEffectParameter(Phase::Controller::Submix *this, unsigned int a2, int a3, double a4, int a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if ((a2 & 0x80000000) != 0 || *((_DWORD *)this + 46) <= a2)
  {
    unint64_t v11 = **(id **)(Phase::Logger::GetInstance(this) + 384);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      int v13 = 136315394;
      uint64_t v14 = "CvmSubmix.mm";
      __int16 v15 = 1024;
      int v16 = 606;
      _os_log_impl(&dword_221E5E000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: inIndex >= 0 && inIndex < mEffectChain.Count() is false.", (uint8_t *)&v13, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::out_of_range::out_of_range[abi:ne180100](exception, "PRECONDITION: inIndex >= 0 && inIndex < mEffectChain.Count() is false.");
  }
  for (uint64_t i = (void *)*((void *)this + 21); a2; --a2)
    uint64_t i = (void *)i[2];
  uint64_t v9 = (Phase::Controller::VoiceData *)i[3];
  int v10 = (Phase::Controller::VoiceData *)i[4];
  while (v9 != v10)
  {
    Phase::Controller::VoiceData::SetParameter(v9, a3, a4, a5);
    uint64_t v9 = (Phase::Controller::VoiceData *)((char *)v9 + 96);
  }
}

void sub_221EDD434(_Unwind_Exception *exception_object)
{
}

void Phase::Controller::Submix::Fade(Phase::Controller::Submix *this, float a2, float a3)
{
  double v3 = a2;
  if (*((double *)this + 37) != a2)
  {
    Phase::Controller::Submix::SetEffectParameter(this, 0, 1, a3, 1);
    Phase::Controller::Submix::SetEffectParameter(this, 0, 4, *((double *)this + 37), 1);
    Phase::Controller::Submix::SetEffectParameter(this, 0, 5, v3, 1);
    *((double *)this + 37) = v3;
  }
}

void Phase::Controller::Submix::SetSessionLevel(unint64_t *a1, uint64_t a2, char a3)
{
  atomic_store(COERCE_UNSIGNED_INT(fminf(fmaxf(*(float *)a2, 0.0), 1.0)) | ((unint64_t)*(unsigned __int8 *)(a2 + 4) << 32), a1 + 38);
  if ((a3 & 1) == 0 && (*(uint64_t (**)(unint64_t *))(*a1 + 336))(a1) != 2)
  {
    Phase::Controller::Submix::UpdateGainEffectsWithDuration((Phase::Controller::Submix *)a1, 0.0);
  }
}

void Phase::Controller::Submix::PrepareGenerator(Phase::Logger *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  uint64_t v47 = a2;
  uint64_t v48 = a3;
  if (a2 | a3)
  {
    *(void *)uint64_t v49 = a2;
    *(void *)&v49[8] = a3;
    uint64_t v7 = (Phase::Logger *)std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((void *)a1 + 31, v49);
    if (!v7)
    {
      int v8 = *(_DWORD *)(a4 + 48);
      __x[0] = 0;
      std::vector<char>::vector((std::vector<char> *)v49, 0x20uLL, __x);
      uint64_t v9 = *(_DWORD **)v49;
      *(_DWORD *)(*(void *)v49 + 4) = 0;
      void v9[2] = 0;
      _DWORD *v9 = v8;
      *(void *)(a4 + 56) = (*(uint64_t (**)(Phase::Logger *, unsigned char *))(*(void *)a1 + 352))(a1, v49);
      int v10 = *(Phase::Logger **)v49;
      if (*(void *)v49)
      {
        *(void *)&v49[8] = *(void *)v49;
        operator delete(*(void **)v49);
      }
      if (*(unsigned char *)(a4 + 8))
      {
        if (*(unsigned char *)(a4 + 8) == 1)
        {
          unint64_t v11 = (Phase::Logger *)(*(uint64_t (**)(uint64_t))(*(void *)a4 + 24))(a4);
          uint64_t v12 = v11;
          if (v11)
          {
            if (*((unsigned char *)v11 + 64) == 1) {
              operator new();
            }
            if (!*((unsigned char *)v11 + 64))
            {
              uint64_t v27 = **(id **)(Phase::Logger::GetInstance(v11) + 384);
              if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)uint64_t v49 = 136315394;
                *(void *)&v49[4] = "CvmSubmix.mm";
                *(_WORD *)&v49[12] = 1024;
                *(_DWORD *)&unsigned char v49[14] = 842;
                _os_log_impl(&dword_221E5E000, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument): \"Invalid Procedure Type: None\"", v49, 0x12u);
              }
              exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::invalid_argument::invalid_argument[abi:ne180100](exception, "Invalid Procedure Type: None");
            }
            uint64_t v36 = **(id **)(Phase::Logger::GetInstance(v11) + 384);
            if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
            {
              int v37 = *((char *)v12 + 64);
              *(_DWORD *)uint64_t v49 = 136315650;
              *(void *)&v49[4] = "CvmSubmix.mm";
              *(_WORD *)&v49[12] = 1024;
              *(_DWORD *)&unsigned char v49[14] = 867;
              __int16 v50 = 1024;
              *(_DWORD *)uint64_t v51 = v37;
              _os_log_impl(&dword_221E5E000, v36, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument): \"Unhandled Procedure Type: %hhd\"", v49, 0x18u);
            }
            int v38 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::invalid_argument::invalid_argument[abi:ne180100](v38, "Unhandled Procedure Type: %hhd");
          }
          uint64_t v32 = **(id **)(Phase::Logger::GetInstance(0) + 384);
          if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)uint64_t v49 = 136315394;
            *(void *)&v49[4] = "CvmSubmix.mm";
            *(_WORD *)&v49[12] = 1024;
            *(_DWORD *)&unsigned char v49[14] = 836;
            _os_log_impl(&dword_221E5E000, v32, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [nullptr == pProcedurePrepareParameters is true]: \"Invalid GeneratorPrepareParameters for GeneratorType::Procedure!\"", v49, 0x12u);
          }
          int64x2_t v33 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v33, "Invalid GeneratorPrepareParameters for GeneratorType::Procedure!");
        }
        uint64_t v29 = **(id **)(Phase::Logger::GetInstance(v10) + 384);
        if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
        {
          int v30 = *(char *)(a4 + 8);
          *(_DWORD *)uint64_t v49 = 136315650;
          *(void *)&v49[4] = "CvmSubmix.mm";
          *(_WORD *)&v49[12] = 1024;
          *(_DWORD *)&unsigned char v49[14] = 878;
          __int16 v50 = 1024;
          *(_DWORD *)uint64_t v51 = v30;
          _os_log_impl(&dword_221E5E000, v29, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument): \"Unhandled Generator Type: %hhd\"", v49, 0x18u);
        }
        uint64_t v31 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::invalid_argument::invalid_argument[abi:ne180100](v31, "Unhandled Generator Type: %hhd");
      }
      int v13 = (Phase::Logger *)(*(uint64_t (**)(uint64_t))(*(void *)a4 + 16))(a4);
      uint64_t v14 = v13;
      if (v13)
      {
        switch(*((unsigned char *)v13 + 64))
        {
          case 0:
            operator new();
          case 1:
            operator new();
          case 2:
            operator new();
          case 3:
            char v44 = Phase::Controller::TaskManager::GetObjCService<ExternalStreamManager>(*((Phase::Logger **)a1 + 27), 15);
            uint64_t v15 = [objc_alloc(MEMORY[0x263F08C38]) initWithUUIDBytes:(char *)v14 + 136];
            id v45 = 0;
            int v16 = [v44 sessionIdForStream:v15 error:&v45];
            uint64_t v17 = (Phase::Logger *)v45;
            uint64_t v18 = v17;
            if (!v17)
            {
              int v19 = (Phase::Logger *)(*(uint64_t (**)(Phase::Logger *))(*(void *)a1 + 120))(a1);
              if (v19)
              {
                if (*((_DWORD *)a1 + 12) != v16)
                {
                  uint64_t v20 = **(id **)(Phase::Logger::GetInstance(v19) + 384);
                  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
                  {
                    int v21 = *((_DWORD *)a1 + 12);
                    *(_DWORD *)uint64_t v49 = 136315906;
                    *(void *)&v49[4] = "CvmSubmix.mm";
                    *(_WORD *)&v49[12] = 1024;
                    *(_DWORD *)&unsigned char v49[14] = 761;
                    __int16 v50 = 1024;
                    *(_DWORD *)uint64_t v51 = v21;
                    *(_WORD *)&v51[4] = 1024;
                    *(_DWORD *)&v51[6] = v16;
                    _os_log_impl(&dword_221E5E000, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument): \"Audio Session Id mismatch. Existing submix belongs to \" \"session 0x%x and new ouput stream generator belongs to session 0x%x\"", v49, 0x1Eu);
                  }
                  uint64_t v22 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                  std::logic_error::logic_error(v22, "Audio Session Id mismatch. Existing submix belongs to session 0x%x and new ouput stream generator belongs to session 0x%x");
                  v22->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
                }
              }
              else
              {
                *((_DWORD *)a1 + 12) = v16;
              }
              operator new();
            }
            uint64_t v39 = **(id **)(Phase::Logger::GetInstance(v17) + 384);
            if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)uint64_t v49 = 136315906;
              *(void *)&v49[4] = "CvmSubmix.mm";
              *(_WORD *)&v49[12] = 1024;
              *(_DWORD *)&unsigned char v49[14] = 745;
              __int16 v50 = 2112;
              *(void *)uint64_t v51 = v15;
              *(_WORD *)&v51[8] = 2112;
              uint64_t v52 = v18;
              _os_log_impl(&dword_221E5E000, v39, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument): \"Could not get Audio Session Id for stream uuid %@ (%@)\"", v49, 0x26u);
            }
            int v40 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v40, "Could not get Audio Session Id for stream uuid %@ (%@)");
            v40->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
          case 4:
            operator new();
          default:
            long long v41 = **(id **)(Phase::Logger::GetInstance(v13) + 384);
            if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
            {
              int v42 = *((char *)v14 + 64);
              *(_DWORD *)uint64_t v49 = 136315650;
              *(void *)&v49[4] = "CvmSubmix.mm";
              *(_WORD *)&v49[12] = 1024;
              *(_DWORD *)&unsigned char v49[14] = 824;
              __int16 v50 = 1024;
              *(_DWORD *)uint64_t v51 = v42;
              _os_log_impl(&dword_221E5E000, v41, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument): \"Unhandled Sampler Type: %hhd\"", v49, 0x18u);
            }
            unint64_t v43 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::invalid_argument::invalid_argument[abi:ne180100](v43, "Unhandled Sampler Type: %hhd");
        }
      }
      uint64_t v34 = **(id **)(Phase::Logger::GetInstance(0) + 384);
      if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t v49 = 136315394;
        *(void *)&v49[4] = "CvmSubmix.mm";
        *(_WORD *)&v49[12] = 1024;
        *(_DWORD *)&unsigned char v49[14] = 669;
        _os_log_impl(&dword_221E5E000, v34, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [nullptr == pSamplerPrepareParameters is true]: \"Invalid GeneratorPrepareParameters for GeneratorType::Sampler!\"", v49, 0x12u);
      }
      uint64_t v35 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v35, "Invalid GeneratorPrepareParameters for GeneratorType::Sampler!");
    }
    __int16 v25 = **(id **)(Phase::Logger::GetInstance(v7) + 384);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v49 = 136315650;
      *(void *)&v49[4] = "CvmSubmix.mm";
      *(_WORD *)&v49[12] = 1024;
      *(_DWORD *)&unsigned char v49[14] = 650;
      __int16 v50 = 2048;
      *(void *)uint64_t v51 = a2;
      _os_log_impl(&dword_221E5E000, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (IdAlreadyExists) [GeneratorIsValid(inGeneratorId) is true]: \"GeneratorId %llu already exists!\"", v49, 0x1Cu);
    }
    int v26 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _ZN5Phase10Controller15IdAlreadyExistsCI1St11logic_errorEPKc(v26, "GeneratorId %llu already exists!");
  }
  unint64_t v23 = **(id **)(Phase::Logger::GetInstance(a1) + 384);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t v49 = 136315394;
    *(void *)&v49[4] = "CvmSubmix.mm";
    *(_WORD *)&v49[12] = 1024;
    *(_DWORD *)&unsigned char v49[14] = 648;
    _os_log_impl(&dword_221E5E000, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [inGeneratorId == kInvalidGeneratorId is true]: \"Invalid GeneratorId!\"", v49, 0x12u);
  }
  int v24 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::invalid_argument::invalid_argument[abi:ne180100](v24, "Invalid GeneratorId!");
}

void sub_221EDF750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, char a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  __cxa_free_exception(v31);

  Phase::Controller::StreamSamplerBase::~StreamSamplerBase((Phase::Controller::StreamSamplerBase *)v33);
  MEMORY[0x223C938A0](v33, 0x10F3C40B3264B8BLL);

  _Unwind_Resume(a1);
}

void Phase::Controller::Submix::SetSessionPlayState(uint64_t a1, uint64_t a2, uint64_t a3, int32x2_t *a4)
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  if ((a2 - 2) < 2 || a2 == 0)
  {
    int v8 = *(void ***)(a1 + 312);
    uint64_t v9 = *(unsigned int *)(a1 + 48);
    Phase::Controller::SessionManager::SetSessionPlayState(v8, v9, a1, 2u, a2, a3, 0);
  }
  else
  {
    if (a2 != 1)
    {
      int v32 = a2;
      int64x2_t v33 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)a1) + 384);
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      {
        uint64_t v34 = *(void *)(a1 + 32);
        uint64_t v35 = *(void *)(a1 + 16);
        int v36 = *(_DWORD *)(a1 + 48);
        *(_DWORD *)std::string buf = 136316418;
        long long v46 = "CvmSubmix.mm";
        __int16 v47 = 1024;
        int v48 = 1643;
        __int16 v49 = 2048;
        uint64_t v50 = v34;
        __int16 v51 = 2048;
        uint64_t v52 = v35;
        __int16 v53 = 1024;
        *(_DWORD *)uint64_t v54 = v32;
        *(_WORD *)&v54[4] = 1024;
        *(_DWORD *)&v54[6] = v36;
        _os_log_impl(&dword_221E5E000, v33, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"(sound event: %llu, submix: %llu:) Invalid session playstate %d on session 0x%x\"", buf, 0x32u);
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "(sound event: %llu, submix: %llu:) Invalid session playstate %d on session 0x%x");
    }
    unint64_t AudioSessionVolume = Phase::Controller::SessionManager::GetAudioSessionVolume(*(Phase::Controller::SessionManager **)(a1 + 312), *(unsigned int *)(a1 + 48), a3);
    unint64_t v43 = AudioSessionVolume;
    int v44 = v12;
    uint64_t v13 = v12;
    uint64_t Instance = Phase::Logger::GetInstance((Phase::Logger *)AudioSessionVolume);
    if (v13)
    {
      if (*(unsigned char *)(Instance + 1556))
      {
        uint64_t v15 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)Instance) + 384);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v16 = *(void *)(a1 + 16);
          uint64_t v17 = *(void *)(a1 + 32);
          int v18 = *(_DWORD *)(a1 + 48);
          int v19 = "YES";
          *(_DWORD *)std::string buf = 136316674;
          if ((AudioSessionVolume & 0xFF00000000) == 0) {
            int v19 = "NO";
          }
          long long v46 = "CvmSubmix.mm";
          __int16 v47 = 1024;
          int v48 = 1567;
          __int16 v49 = 2048;
          uint64_t v50 = v17;
          __int16 v51 = 2048;
          uint64_t v52 = v16;
          __int16 v53 = 2048;
          *(double *)uint64_t v54 = *(float *)&AudioSessionVolume;
          *(_WORD *)&v54[8] = 1024;
          int v55 = v18;
          __int16 v56 = 2080;
          unint64_t v57 = v19;
          _os_log_impl(&dword_221E5E000, v15, OS_LOG_TYPE_DEFAULT, "%25s:%-5d (sound event: %llu, submix: %llu:) - applying start volume %.3f on session 0x%x - muted: %s", buf, 0x40u);
        }
      }
      (*(void (**)(uint64_t, unint64_t *, uint64_t))(*(void *)a1 + 232))(a1, &v43, a3);
    }
    else
    {
      uint64_t v20 = **(id **)(Instance + 384);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        uint64_t v21 = *(void *)(a1 + 32);
        uint64_t v22 = *(void *)(a1 + 16);
        int v23 = *(_DWORD *)(a1 + 48);
        *(_DWORD *)std::string buf = 136316162;
        long long v46 = "CvmSubmix.mm";
        __int16 v47 = 1024;
        int v48 = 1576;
        __int16 v49 = 2048;
        uint64_t v50 = v21;
        __int16 v51 = 2048;
        uint64_t v52 = v22;
        __int16 v53 = 1024;
        *(_DWORD *)uint64_t v54 = v23;
        _os_log_impl(&dword_221E5E000, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d (sound event: %llu, submix: %llu:) - did not get/apply start volume on session 0x%x", buf, 0x2Cu);
      }
    }
    int32x2_t v42 = (int32x2_t)1065353216;
    BOOL v24 = Phase::Controller::SessionManager::SetSessionPlayState(*(void ***)(a1 + 312), *(unsigned int *)(a1 + 48), a1, 2u, 1, a3, &v42);
    if (v24)
    {
      if (a3)
      {
        if (a4) {
          *a4 = v42;
        }
      }
      else
      {
        for (uint64_t i = *(void **)(a1 + 264); i; uint64_t i = (void *)*i)
        {
          uint64_t v31 = (_DWORD *)i[4];
          if (v31[97] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v31 + 32))(v31);
          }
        }
        (*(void (**)(uint64_t, float, float))(*(void *)a1 + 224))(a1, *(float *)v42.i32, *(float *)&v42.i32[1]);
      }
    }
    else
    {
      __int16 v25 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)v24) + 384);
      BOOL v26 = os_log_type_enabled(v25, OS_LOG_TYPE_ERROR);
      if ((a3 & 1) == 0)
      {
        if (v26)
        {
          uint64_t v38 = *(void *)(a1 + 32);
          uint64_t v39 = *(void *)(a1 + 16);
          int v40 = *(_DWORD *)(a1 + 48);
          *(_DWORD *)std::string buf = 136316418;
          long long v46 = "CvmSubmix.mm";
          __int16 v47 = 1024;
          int v48 = 1611;
          __int16 v49 = 2048;
          uint64_t v50 = v38;
          __int16 v51 = 2048;
          uint64_t v52 = v39;
          __int16 v53 = 1024;
          *(_DWORD *)uint64_t v54 = 1;
          *(_WORD *)&v54[4] = 1024;
          *(_DWORD *)&v54[6] = v40;
          _os_log_impl(&dword_221E5E000, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"(sound event: %llu, submix: %llu:) - unable to set session playstate %d on session 0x%x\"", buf, 0x32u);
        }
        long long v41 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v41, "(sound event: %llu, submix: %llu:) - unable to set session playstate %d on session 0x%x");
      }
      if (v26)
      {
        uint64_t v27 = *(void *)(a1 + 32);
        uint64_t v28 = *(void *)(a1 + 16);
        int v29 = *(_DWORD *)(a1 + 48);
        *(_DWORD *)std::string buf = 136316418;
        long long v46 = "CvmSubmix.mm";
        __int16 v47 = 1024;
        int v48 = 1617;
        __int16 v49 = 2048;
        uint64_t v50 = v27;
        __int16 v51 = 2048;
        uint64_t v52 = v28;
        __int16 v53 = 1024;
        *(_DWORD *)uint64_t v54 = 1;
        *(_WORD *)&v54[4] = 1024;
        *(_DWORD *)&v54[6] = v29;
        _os_log_impl(&dword_221E5E000, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d (sound event: %llu, submix: %llu:) - unable to set session playstate %d on session 0x%x", buf, 0x32u);
      }
    }
  }
}

void sub_221EDFF94(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::Submix::PlayGenerator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 128))(a1)
    || (*(unsigned int (**)(uint64_t))(*(void *)a1 + 136))(a1))
  {
    Phase::Controller::Submix::SetSessionPlayState(a1, 1, 0, 0);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 280))(a1, 3);
  }
  uint64_t v6 = *(uint64_t (**)(void))(*(void *)Phase::Controller::Submix::GetGenerator(a1, a2, a3) + 16);

  return v6();
}

uint64_t Phase::Controller::Submix::PauseGenerator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Generator = Phase::Controller::Submix::GetGenerator(a1, a2, a3);
  (*(void (**)(uint64_t))(*(void *)Generator + 24))(Generator);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 136))(a1);
  if (result)
  {
    Phase::Controller::SessionManager::SetSessionPlayState(*(void ***)(a1 + 312), *(unsigned int *)(a1 + 48), a1, 2u, 2, 0, 0);
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 280);
    return v6(a1, 2);
  }
  return result;
}

uint64_t Phase::Controller::Submix::ResumeGenerator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 128))(a1)
    || (*(unsigned int (**)(uint64_t))(*(void *)a1 + 136))(a1))
  {
    Phase::Controller::Submix::SetSessionPlayState(a1, 1, 0, 0);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 280))(a1, 3);
  }
  uint64_t v6 = *(uint64_t (**)(void))(*(void *)Phase::Controller::Submix::GetGenerator(a1, a2, a3) + 32);

  return v6();
}

uint64_t Phase::Controller::Submix::PauseExternalStream(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  v18[0] = a2;
  v18[1] = a3;
  std::error_code v4 = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>((void *)(a1 + 248), v18);
  if (!v4)
  {
    int v10 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(0)
                                                                                        + 384)));
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      unint64_t v11 = Phase::UniqueObjectId::CreateNSUUID((Phase::UniqueObjectId *)v18);
      *(_DWORD *)std::string buf = 136315650;
      uint64_t v20 = "CvmSubmix.mm";
      __int16 v21 = 1024;
      int v22 = 950;
      __int16 v23 = 2112;
      BOOL v24 = v11;
      _os_log_impl(&dword_221E5E000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (InvalidId) [it == mGenerators.end() is true]: \"External stream %@ does not exist!\"", buf, 0x1Cu);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _ZN5Phase10Controller9InvalidIdCI1St11logic_errorEPKc(exception, "External stream %@ does not exist!");
  }
  uint64_t v5 = v4[4];
  if (!v5)
  {
    uint64_t v13 = **(id **)(Phase::Logger::GetInstance(0) + 384);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315394;
      uint64_t v20 = "CvmSubmix.mm";
      __int16 v21 = 1024;
      int v22 = 953;
      _os_log_impl(&dword_221E5E000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: pGenerator != nullptr is false.", buf, 0x12u);
    }
    uint64_t v14 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v14, "PRECONDITION: pGenerator != nullptr is false.");
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 72))(v5);
  if (!v6)
  {
    uint64_t v15 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(0)
                                                                                        + 384)));
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = Phase::UniqueObjectId::CreateNSUUID((Phase::UniqueObjectId *)v18);
      *(_DWORD *)std::string buf = 136315650;
      uint64_t v20 = "CvmSubmix.mm";
      __int16 v21 = 1024;
      int v22 = 957;
      __int16 v23 = 2112;
      BOOL v24 = v16;
      _os_log_impl(&dword_221E5E000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (InvalidId) [pExternalStreamNode == nullptr is true]: \"External stream %@ node is wrong type!\"", buf, 0x1Cu);
    }
    uint64_t v17 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _ZN5Phase10Controller9InvalidIdCI1St11logic_errorEPKc(v17, "External stream %@ node is wrong type!");
  }
  Phase::Controller::ExternalOutputPullStreamSampler::PauseStream(v6);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 136))(a1);
  if (result)
  {
    int v8 = *(void ***)(a1 + 312);
    uint64_t v9 = *(unsigned int *)(a1 + 48);
    return Phase::Controller::SessionManager::SetSessionPlayState(v8, v9, a1, 2u, 2, 0, 0);
  }
  return result;
}

void sub_221EE0624(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Phase::Controller::Submix::ResumeExternalStream(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  v16[0] = a2;
  v16[1] = a3;
  std::error_code v4 = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>(a1 + 31, v16);
  if (!v4)
  {
    int v8 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(0)
                                                                                       + 384)));
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = Phase::UniqueObjectId::CreateNSUUID((Phase::UniqueObjectId *)v16);
      *(_DWORD *)std::string buf = 136315650;
      int v18 = "CvmSubmix.mm";
      __int16 v19 = 1024;
      int v20 = 972;
      __int16 v21 = 2112;
      int v22 = v9;
      _os_log_impl(&dword_221E5E000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (InvalidId) [it == mGenerators.end() is true]: \"External stream %@ does not exist!\"", buf, 0x1Cu);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _ZN5Phase10Controller9InvalidIdCI1St11logic_errorEPKc(exception, "External stream %@ does not exist!");
  }
  uint64_t v5 = v4[4];
  if (!v5)
  {
    unint64_t v11 = **(id **)(Phase::Logger::GetInstance(0) + 384);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315394;
      int v18 = "CvmSubmix.mm";
      __int16 v19 = 1024;
      int v20 = 975;
      _os_log_impl(&dword_221E5E000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: pGenerator != nullptr is false.", buf, 0x12u);
    }
    int v12 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v12, "PRECONDITION: pGenerator != nullptr is false.");
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 72))(v5);
  if (!v6)
  {
    uint64_t v13 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(0)
                                                                                        + 384)));
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = Phase::UniqueObjectId::CreateNSUUID((Phase::UniqueObjectId *)v16);
      *(_DWORD *)std::string buf = 136315650;
      int v18 = "CvmSubmix.mm";
      __int16 v19 = 1024;
      int v20 = 979;
      __int16 v21 = 2112;
      int v22 = v14;
      _os_log_impl(&dword_221E5E000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (InvalidId) [pExternalStreamNode == nullptr is true]: \"External stream %@ node is wrong type!\"", buf, 0x1Cu);
    }
    uint64_t v15 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _ZN5Phase10Controller9InvalidIdCI1St11logic_errorEPKc(v15, "External stream %@ node is wrong type!");
  }
  uint64_t v7 = (Phase::Controller::ExternalOutputPullStreamSampler *)v6;
  if (!(*(unsigned int (**)(void *))(*a1 + 128))(a1)
    || (*(unsigned int (**)(void *))(*a1 + 136))(a1))
  {
    Phase::Controller::Submix::SetSessionPlayState((uint64_t)a1, 1, 0, 0);
    (*(void (**)(void *, uint64_t))(*a1 + 280))(a1, 3);
  }

  Phase::Controller::ExternalOutputPullStreamSampler::ResumeStream(v7);
}

void sub_221EE0A00(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Phase::Controller::Submix::SleepGenerator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Generator = Phase::Controller::Submix::GetGenerator(a1, a2, a3);
  if ((*(_DWORD *)(Generator + 376) - 3) >= 2)
  {
    *(unsigned char *)(Generator + 504) = 1;
    Phase::Controller::Generator::Sleep_Internal((Phase::Controller::Generator *)Generator);
  }
}

void Phase::Controller::Submix::WakeGenerator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 128))(a1)
    || (*(unsigned int (**)(uint64_t))(*(void *)a1 + 136))(a1))
  {
    Phase::Controller::Submix::SetSessionPlayState(a1, 1, 0, 0);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 280))(a1, 3);
  }
  uint64_t Generator = Phase::Controller::Submix::GetGenerator(a1, a2, a3);
  if ((*(_DWORD *)(Generator + 376) - 3) >= 2)
  {
    *(unsigned char *)(Generator + 504) = 0;
    Phase::Controller::Generator::Wake_Internal((Phase::Controller::Generator *)Generator);
  }
}

void Phase::Controller::Submix::SetPlayState(uint64_t a1, int a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 72)) {
    BOOL v2 = *(unsigned char *)(a1 + 72) == 7;
  }
  else {
    BOOL v2 = 1;
  }
  if (!v2)
  {
    double v3 = (Phase::Logger *)Phase::Controller::DVM::VoiceGraph::SetSubmixPlayState(*(Phase::Controller::DVM::VoiceGraph **)(**(void **)(a1 + 224) + 72), *(void *)(a1 + 16), *(void *)(a1 + 24), a2);
    if (v3)
    {
      int v4 = (int)v3;
      uint64_t v5 = **(id **)(Phase::Logger::GetInstance(v3) + 384);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        int v6 = 136315650;
        uint64_t v7 = "CvmSubmix.mm";
        __int16 v8 = 1024;
        int v9 = 1108;
        __int16 v10 = 1024;
        int v11 = v4;
        _os_log_impl(&dword_221E5E000, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d mpDspVoiceManager->SetSubmixPlayState() failed with error code: %hhd", (uint8_t *)&v6, 0x18u);
      }
    }
  }
}

void Phase::Controller::Submix::InternalPrepare(Phase::Controller::Submix *this)
{
  *(void *)&v36[5] = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 28);
  uint64_t v3 = *((void *)this + 2);
  uint64_t v4 = *((void *)this + 3);
  uint64_t v5 = (*(uint64_t (**)(Phase::Controller::Submix *))(*(void *)this + 336))(this);
  int v6 = (*(uint64_t (**)(Phase::Controller::Submix *))(*(void *)this + 344))(this);
  uint64_t v7 = (Phase::Logger *)Phase::Controller::DVM::VoiceGraph::AddSubmix(*(void *)(*(void *)v2 + 72), v3, v4, v5, v6);
  if (v7)
  {
    int v18 = (int)v7;
    __int16 v19 = **(id **)(Phase::Logger::GetInstance(v7) + 384);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315650;
      int v32 = "CvmSubmix.mm";
      __int16 v33 = 1024;
      int v34 = 1177;
      __int16 v35 = 1024;
      v36[0] = v18;
      _os_log_impl(&dword_221E5E000, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (IdAlreadyExists) [not addSubmixResult.IsOkay() is true]: \"mpDspVoiceManager->AddSubmix() failed with error code: %hhd\"", buf, 0x18u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _ZN5Phase10Controller15IdAlreadyExistsCI1St11logic_errorEPKc(exception, "mpDspVoiceManager->AddSubmix() failed with error code: %hhd");
  }
  for (uint64_t i = (uint64_t *)*((void *)this + 12); i; uint64_t i = (uint64_t *)*i)
    *((unsigned char *)i + 56) = 0;
  int v9 = (Phase::Logger *)(*(uint64_t (**)(Phase::Controller::Submix *))(*(void *)this + 336))(this);
  if (v9 != (Phase::Logger *)2)
  {
    uint64_t v10 = *((void *)this + 21);
    if (v10)
    {
      uint64_t v11 = **(void **)(v10 + 24);
      uint64_t v12 = **(id **)(Phase::Logger::GetInstance(v9) + 384);
      uint64_t v13 = v12;
      if (v11 != 0x235B3F2D33EB877ALL)
      {
        BOOL v21 = os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
        if (v21)
        {
          uint64_t v22 = *((void *)this + 2);
          *(_DWORD *)std::string buf = 136315906;
          int v32 = "CvmSubmix.mm";
          __int16 v33 = 1024;
          int v34 = 1129;
          __int16 v35 = 1024;
          v36[0] = 0;
          LOWORD(v36[1]) = 2048;
          *(void *)((char *)&v36[1] + 2) = v22;
          _os_log_impl(&dword_221E5E000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d Submix at effect index: %d is not a SubmixGain voice pool for submixId %llu.", buf, 0x22u);
        }
        uint64_t v23 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)v21) + 384);
        if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        {
          uint64_t v24 = *((void *)this + 2);
          *(_DWORD *)std::string buf = 136315650;
          int v32 = "CvmSubmix.mm";
          __int16 v33 = 1024;
          int v34 = 1192;
          __int16 v35 = 2048;
          *(void *)int v36 = v24;
          _os_log_impl(&dword_221E5E000, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (IdAlreadyExists) [not AddAndUpdateGainEffects() is true]: \"SubmixId %llu failed adding and updating gain effects!\"", buf, 0x1Cu);
        }
        uint64_t v25 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        _ZN5Phase10Controller15IdAlreadyExistsCI1St11logic_errorEPKc(v25, "SubmixId %llu failed adding and updating gain effects!");
      }
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v14 = *((void *)this + 2);
        *(_DWORD *)std::string buf = 136315906;
        int v32 = "CvmSubmix.mm";
        __int16 v33 = 1024;
        int v34 = 1123;
        __int16 v35 = 1024;
        v36[0] = 0;
        LOWORD(v36[1]) = 2048;
        *(void *)((char *)&v36[1] + 2) = v14;
        _os_log_impl(&dword_221E5E000, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d SubmixGain voice at effect index: %d already added for submixId %llu.", buf, 0x22u);
      }
    }
    else if (Phase::Controller::Submix::AddEffect(this, 0x235B3F2D33EB877ALL, 0))
    {
      std::terminate();
    }
    Phase::Controller::Submix::UpdateGainEffectsWithDuration(this, 0.0);
  }
  Phase::Controller::Submix::GetEffects(this, 1, buf);
  uint64_t v15 = (Phase::Logger *)Phase::Controller::DVM::VoiceGraph::ConfigureSubmix(*(void **)(**((void **)this + 28) + 72), *((void *)this + 2), *((void *)this + 3), 2, buf);
  int v16 = (int)v15;
  if (v15)
  {
    uint64_t v17 = **(id **)(Phase::Logger::GetInstance(v15) + 384);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)BOOL v26 = 136315650;
      *(void *)&void v26[4] = "CvmSubmix.mm";
      __int16 v27 = 1024;
      int v28 = 1201;
      __int16 v29 = 1024;
      int v30 = v16;
      _os_log_impl(&dword_221E5E000, v17, OS_LOG_TYPE_DEFAULT, "%25s:%-5d mpDspVoiceManager->ConfigureSubmix() failed with error code: %hhd", v26, 0x18u);
    }
  }
  *((unsigned char *)this + 28std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::Controller::RouterCommandBatch,std::pair<Phase::Handle64,unsigned long long>,std::shared_ptr<Phase::Controller::Renderer>,unsigned long long,std::pair<Phase::UniqueObjectId,BOOL>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
  *((void *)this + 8) &= ~2uLL;
  Phase::Controller::Submix::SetState((uint64_t)this, 2u);
  *(void *)BOOL v26 = buf;
  std::vector<Phase::Controller::DspNode>::__destroy_vector::operator()[abi:ne180100]((void ***)v26);
}

void sub_221EE1160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  __cxa_free_exception(v13);
  _Unwind_Resume(a1);
}

void Phase::Controller::Submix::InternalPause(Phase::Controller::Submix *this)
{
  if (*((unsigned __int8 *)this + 72) - 3 <= 1)
  {
    (*(void (**)(Phase::Controller::Submix *, uint64_t))(*(void *)this + 280))(this, 2);
    *((unsigned char *)this + 28std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::Controller::RouterCommandBatch,std::pair<Phase::Handle64,unsigned long long>,std::shared_ptr<Phase::Controller::Renderer>,unsigned long long,std::pair<Phase::UniqueObjectId,BOOL>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
  }
  Phase::Controller::SessionManager::SetSessionPlayState(*((void ***)this + 39), *((unsigned int *)this + 12), (uint64_t)this, 2u, 2, 0, 0);
  *((unsigned char *)this + 73) = *((unsigned char *)this + 72);
  Phase::Controller::Submix::SetState((uint64_t)this, 5u);
  *((void *)this + 7) &= ~2uLL;
}

void Phase::Controller::Submix::InternalResume(Phase::Controller::Submix *this)
{
  int v2 = *((unsigned __int8 *)this + 72);
  if (v2 == 2)
  {
LABEL_4:
    if ((*(unsigned int (**)(Phase::Controller::Submix *))(*(void *)this + 128))(this)
      && ((*(uint64_t (**)(Phase::Controller::Submix *))(*(void *)this + 136))(this) & 1) == 0)
    {
      Phase::Controller::Submix::SetSessionPlayState((uint64_t)this, 1, 0, 0);
      (*(void (**)(Phase::Controller::Submix *, uint64_t))(*(void *)this + 280))(this, 3);
    }
    *((unsigned char *)this + 28std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::Controller::RouterCommandBatch,std::pair<Phase::Handle64,unsigned long long>,std::shared_ptr<Phase::Controller::Renderer>,unsigned long long,std::pair<Phase::UniqueObjectId,BOOL>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
    LOBYTE(v2) = *((unsigned char *)this + 72);
    goto LABEL_8;
  }
  if (v2 == 5)
  {
    char v3 = *((unsigned char *)this + 73);
    if ((v3 - 3) >= 2u)
    {
      *((unsigned char *)this + 73) = 5;
      goto LABEL_11;
    }
    goto LABEL_4;
  }
LABEL_8:
  char v4 = *((unsigned char *)this + 73);
  *((unsigned char *)this + 73) = v2;
  if (v2 == 2) {
    char v3 = 3;
  }
  else {
    char v3 = v4;
  }
LABEL_11:
  Phase::Controller::Submix::SetState((uint64_t)this, v3);
  *((void *)this + 7) &= ~4uLL;
}

void Phase::Controller::Submix::InternalSleep(Phase::Controller::Submix *this)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (*((unsigned char *)this + 72) != 7)
  {
    int v2 = (*(uint64_t (**)(Phase::Controller::Submix *))(*(void *)this + 128))(this);
    if (*((unsigned char *)this + 72) != 6 && v2 != 0) {
      std::terminate();
    }
    char v4 = (Phase::Logger *)Phase::Controller::DVM::VoiceGraph::RemoveSubmix(*(Phase::Controller::DVM::VoiceGraph **)(**((void **)this + 28) + 72), *((void *)this + 2), *((void *)this + 3));
    if (v4)
    {
      int v5 = (int)v4;
      int v6 = **(id **)(Phase::Logger::GetInstance(v4) + 384);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        int v7 = 136315650;
        __int16 v8 = "CvmSubmix.mm";
        __int16 v9 = 1024;
        int v10 = 1276;
        __int16 v11 = 1024;
        int v12 = v5;
        _os_log_impl(&dword_221E5E000, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d mpDspVoiceManager->RemoveSubmix() failed with error code: %hhd", (uint8_t *)&v7, 0x18u);
      }
    }
    Phase::Controller::SessionManager::SetSessionPlayState(*((void ***)this + 39), *((unsigned int *)this + 12), (uint64_t)this, 2u, 0, 0, 0);
    Phase::Controller::Submix::SetState((uint64_t)this, 7u);
  }
}

void Phase::Controller::Submix::InternalStop(Phase::Controller::Submix *this)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  *((void *)this + 7) &= 0xFFFFFFFFFFFFFFF9;
  (*(void (**)(Phase::Controller::Submix *))(*(void *)this + 160))(this);
  Phase::Controller::Submix::SetState((uint64_t)this, 0);
  *((void *)this + 7) &= ~8uLL;
  Phase::Controller::SessionManager::SetSessionPlayState(*((void ***)this + 39), *((unsigned int *)this + 12), (uint64_t)this, 2u, 0, 0, 0);
  int v2 = (Phase::Logger *)Phase::Controller::DVM::VoiceGraph::RemoveSubmix(*(Phase::Controller::DVM::VoiceGraph **)(**((void **)this + 28) + 72), *((void *)this + 2), *((void *)this + 3));
  if (v2)
  {
    int v3 = (int)v2;
    char v4 = **(id **)(Phase::Logger::GetInstance(v2) + 384);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315650;
      int v6 = "CvmSubmix.mm";
      __int16 v7 = 1024;
      int v8 = 1302;
      __int16 v9 = 1024;
      int v10 = v3;
      _os_log_impl(&dword_221E5E000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d mpDspVoiceManager->RemoveSubmix() failed with error code: %hhd", (uint8_t *)&v5, 0x18u);
    }
  }
}

uint64_t Phase::Controller::Submix::GetExternalStreamId(Phase::Controller::Submix *this)
{
  uint64_t v1 = (char *)this + 264;
  while (1)
  {
    uint64_t v1 = *(char **)v1;
    if (!v1) {
      break;
    }
    uint64_t v2 = (*(uint64_t (**)(void))(**((void **)v1 + 4) + 72))(*((void *)v1 + 4));
    if (v2) {
      return *(void *)(v2 + 608);
    }
  }
  return 0;
}

double Phase::Controller::Submix::GetGain(Phase::Controller::Submix *this)
{
  uint64_t v1 = (double *)std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Parameter<double>>>>::find<unsigned long long>((void *)this + 10, qword_2645F7230);
  if (!v1) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return v1[6];
}

uint64_t Phase::Controller::Submix::GetChannelMask()
{
  return -1;
}

uint64_t Phase::Controller::Submix::IsPrepared(Phase::Controller::Submix *this)
{
  return 0;
}

uint64_t Phase::Controller::Submix::ExcludeFromTapBinding(uint64_t a1, uint64_t a2)
{
  if (a2 != 5) {
    return 0;
  }
  uint64_t v2 = *(uint64_t ***)(a1 + 264);
  if (!v2) {
    return 0;
  }
  while (1)
  {
    uint64_t v3 = (*(uint64_t (**)(uint64_t *))(*v2[4] + 72))(v2[4]);
    if (v3)
    {
      if (*(void *)(v3 + 624) == 1) {
        break;
      }
    }
    uint64_t v2 = (uint64_t **)*v2;
    if (!v2) {
      return 0;
    }
  }
  return 1;
}

uint64_t Phase::Controller::Submix::GetSourceId(Phase::Controller::Submix *this)
{
  return 0;
}

uint64_t Phase::Controller::Submix::GetListenerId(Phase::Controller::Submix *this)
{
  return 0;
}

void Phase::Controller::Effect::~Effect(Phase::Controller::Effect *this)
{
  *(void *)this = &unk_26D473D00;
  uint64_t v1 = (void **)((char *)this + 24);
  std::vector<Phase::Controller::VoiceData>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v2;

  *(void *)this = &unk_26D473D00;
  uint64_t v2 = (void **)((char *)this + 24);
  std::vector<Phase::Controller::VoiceData>::__destroy_vector::operator()[abi:ne180100](&v2);
  MEMORY[0x223C938A0](this, 0x10A1C4098D41D02);
}

uint64_t std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Generator>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Generator>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Generator>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Generator>>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      uint64_t v4 = v2[4];
      v2[4] = 0;
      if (v4) {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  int v5 = *(void **)a1;
  *(void *)a1 = 0;
  if (v5) {
    operator delete(v5);
  }
  return a1;
}

uint64_t (**std::any_cast[abi:ne180100]<Phase::Controller::SessionManager * const>(uint64_t (**result)(uint64_t, void, void, void, void *)))(uint64_t, void, void, void, void *)
{
  if (result)
  {
    if (*result) {
      return (uint64_t (**)(uint64_t, void, void, void, void *))(*result)(3, result, 0, 0, &std::__any_imp::__unique_typeinfo<Phase::Controller::SessionManager *>::__id);
    }
    else {
      return 0;
    }
  }
  return result;
}

Phase::Controller::FileSampler *std::unique_ptr<Phase::Controller::FileSampler>::reset[abi:ne180100](Phase::Controller::FileSampler **a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    Phase::Controller::FileSampler::~FileSampler(result);
    JUMPOUT(0x223C938A0);
  }
  return result;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Generator>>,void *>>>::operator()[abi:ne180100](char a1, void *__p)
{
  if (a1)
  {
    uint64_t v3 = __p[4];
    __p[4] = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void Phase::Controller::PushStreamSampler::~PushStreamSampler(Phase::Controller::PushStreamSampler *this)
{
  Phase::Controller::StreamSamplerBase::~StreamSamplerBase(this);

  JUMPOUT(0x223C938A0);
}

Phase::Controller::StreamSamplerBase *std::unique_ptr<Phase::Controller::PushStreamSampler>::reset[abi:ne180100](Phase::Controller::StreamSamplerBase **a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    Phase::Controller::StreamSamplerBase::~StreamSamplerBase(result);
    JUMPOUT(0x223C938A0);
  }
  return result;
}

void std::default_delete<Phase::Controller::ExternalOutputPullStreamSampler>::operator()[abi:ne180100](id *a1)
{
  Phase::Controller::StreamSamplerBase::~StreamSamplerBase((Phase::Controller::StreamSamplerBase *)a1);

  JUMPOUT(0x223C938A0);
}

Phase::Controller::Generator *std::unique_ptr<Phase::Controller::WaterProcedure>::reset[abi:ne180100](Phase::Controller::Generator **a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    Phase::Controller::Generator::~Generator(result);
    JUMPOUT(0x223C938A0);
  }
  return result;
}

void *std::vector<Phase::Controller::DspNodeVoice>::__init_with_size[abi:ne180100]<Phase::Controller::DspNodeVoice*,Phase::Controller::DspNodeVoice*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >= 0x276276276276277) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    int v6 = result;
    uint64_t result = std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Controller::DspNodeVoice>>((uint64_t)(result + 2), a4);
    void *v6 = result;
    v6[1] = result;
    void v6[2] = &result[13 * v7];
    uint64_t v15 = result;
    if (a2 == a3)
    {
      int v8 = result;
    }
    else
    {
      int v8 = result;
      do
      {
        *int v8 = *(void *)a2;
        v8[1] = 0;
        void v8[2] = 0;
        void v8[3] = 0;
        uint64_t v9 = *(void *)(a2 + 8);
        uint64_t v10 = *(void *)(a2 + 16);
        if (v10 != v9)
        {
          std::vector<Phase::Controller::VoiceBufferParameter>::__vallocate[abi:ne180100](v8 + 1, (v10 - v9) >> 5);
          void v8[2] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Phase::Controller::VoiceBufferParameter>,Phase::Controller::VoiceBufferParameter*,Phase::Controller::VoiceBufferParameter*,Phase::Controller::VoiceBufferParameter*>((uint64_t)(v8 + 3), v9, v10, v8[2]);
        }
        void v8[4] = 0;
        v8[5] = 0;
        v8[6] = 0;
        std::vector<Phase::Controller::DspChannelIdBusValuePair>::__init_with_size[abi:ne180100]<Phase::Controller::DspChannelIdBusValuePair*,Phase::Controller::DspChannelIdBusValuePair*>(v8 + 4, *(const void **)(a2 + 32), *(void *)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 4);
        v8[7] = 0;
        v8[8] = 0;
        v8[9] = 0;
        uint64_t result = std::vector<Phase::Controller::DspChannelIdBusValuePair>::__init_with_size[abi:ne180100]<Phase::Controller::DspChannelIdBusValuePair*,Phase::Controller::DspChannelIdBusValuePair*>(v8 + 7, *(const void **)(a2 + 56), *(void *)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 4);
        v8[10] = 0;
        v8[11] = 0;
        v8[12] = 0;
        int v12 = *(unsigned char **)(a2 + 80);
        uint64_t v11 = *(unsigned char **)(a2 + 88);
        int64_t v13 = v11 - v12;
        if (v11 != v12)
        {
          std::vector<Phase::Controller::DspParameterPair>::__vallocate[abi:ne180100](v8 + 10, v13 >> 4);
          uint64_t v14 = (char *)v8[11];
          uint64_t result = memmove(v14, v12, v13);
          v8[11] = &v14[16 * (v13 >> 4)];
        }
        int v8 = v15 + 13;
        v15 += 13;
        a2 += 104;
      }
      while (a2 != a3);
    }
    v6[1] = v8;
  }
  return result;
}

void sub_221EE1CC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::vector<Phase::Controller::DspNodeVoice>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

char *std::vector<Phase::Controller::VoiceBufferParameter>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::vector<Phase::Controller::VoiceBufferParameter>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::SpatialModeler::GraphDescriptionNode>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

void std::vector<Phase::Controller::VoiceBufferParameter>::__throw_length_error[abi:ne180100]()
{
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Phase::Controller::VoiceBufferParameter>,Phase::Controller::VoiceBufferParameter*,Phase::Controller::VoiceBufferParameter*,Phase::Controller::VoiceBufferParameter*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  void v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *(_DWORD *)uint64_t v4 = *(_DWORD *)a2;
      *(void *)(v4 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::Controller::RouterCommandBatch,std::pair<Phase::Handle64,unsigned long long>,std::shared_ptr<Phase::Controller::Renderer>,unsigned long long,std::pair<Phase::UniqueObjectId,BOOL>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = *(void *)(a2 + 8);
      uint64_t v5 = *(void *)(a2 + 16);
      *(void *)(v4 + 16) = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      *(unsigned char *)(v4 + 24) = *(unsigned char *)(a2 + 24);
      v4 += 32;
      a2 += 32;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Phase::Controller::VoiceBufferParameter>,Phase::Controller::VoiceBufferParameter*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

void *std::vector<Phase::Controller::DspChannelIdBusValuePair>::__init_with_size[abi:ne180100]<Phase::Controller::DspChannelIdBusValuePair*,Phase::Controller::DspChannelIdBusValuePair*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v4 = result;
    if (a4 >> 60) {
      std::vector<Phase::Controller::VoiceBufferParameter>::__throw_length_error[abi:ne180100]();
    }
    uint64_t result = std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::UniqueObjectId>>((uint64_t)(result + 2), a4);
    uint64_t v7 = result;
    void *v4 = result;
    v4[1] = result;
    double v4[2] = &result[2 * v8];
    size_t v9 = a3 - (void)a2;
    if (v9) {
      uint64_t result = memmove(result, a2, v9);
    }
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_221EE1ECC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::Controller::RouterCommandBatch,std::pair<Phase::Handle64,unsigned long long>,std::shared_ptr<Phase::Controller::Renderer>,unsigned long long,std::pair<Phase::UniqueObjectId,BOOL>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<Phase::Controller::DspParameterPair>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::vector<Phase::Controller::VoiceBufferParameter>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::UniqueObjectId>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Phase::Controller::DspNodeVoice>,Phase::Controller::DspNodeVoice*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *(uint64_t **)(a1 + 8);
    uint64_t v2 = *(uint64_t **)(a1 + 16);
    uint64_t v4 = *v2;
    uint64_t v5 = *v3;
    if (*v2 != *v3)
    {
      uint64_t v6 = *(void *)a1;
      do
      {
        v4 -= 104;
        std::allocator<Phase::Controller::DspNodeVoice>::destroy[abi:ne180100](v6, v4);
      }
      while (v4 != v5);
    }
  }
  return a1;
}

uint64_t std::__split_buffer<Phase::Controller::DspNode>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 32;
    uint64_t v5 = (void **)(i - 24);
    std::vector<Phase::Controller::DspNodeVoice>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void Phase::Controller::SubmixSystem::~SubmixSystem(Phase::Controller::SubmixSystem *this)
{
  *(void *)this = &unk_26D473DB0;
  Phase::Controller::SubmixSystem::Destroy(this);
  uint64_t v2 = *((void *)this + 34);
  *((void *)this + 34) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)this + 184);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)this + 144);
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)((char *)this + 80));
  std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Submix>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Submix>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Submix>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Submix>>>>::~__hash_table((uint64_t)this + 40);

  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::~Commandable(this);
}

{
  uint64_t vars8;

  Phase::Controller::SubmixSystem::~SubmixSystem(this);

  JUMPOUT(0x223C938A0);
}

void Phase::Controller::SubmixSystem::Destroy(Phase::Controller::SubmixSystem *this)
{
  uint64_t v2 = (std::recursive_mutex *)((char *)this + 80);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 80));
  while (*((void *)this + 8))
    std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Submix>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Submix>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Submix>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Submix>>>>::erase((void *)this + 5, *((uint64_t **)this + 7));
  uint64_t v3 = *((void *)this + 34);
  *((void *)this + 34) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear((void *)this + 18);
  std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear((void *)this + 23);

  std::recursive_mutex::unlock(v2);
}

void Phase::Controller::SubmixSystem::Initialize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(a1 + 224) = a2;
  *(void *)(a1 + 232) = a3;
  *(void *)(a1 + 240) = a4;
  *(void *)(a1 + 24std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::Controller::RouterCommandBatch,std::pair<Phase::Handle64,unsigned long long>,std::shared_ptr<Phase::Controller::Renderer>,unsigned long long,std::pair<Phase::UniqueObjectId,BOOL>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = a5;
  *(void *)(a1 + 256) = a6;
  *(void *)(a1 + 264) = a7;
  operator new();
}

void sub_221EE2298(_Unwind_Exception *a1)
{
  MEMORY[0x223C938A0](v1, 0x10E1C407AAC3C22);
  _Unwind_Resume(a1);
}

void Phase::Controller::SubmixSystem::Stop(Phase::Controller::SubmixSystem *this)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  Phase::Controller::SubmixSystem::Reset(this);
  int v2 = 0;
  uint64_t v3 = (char *)this + 56;
LABEL_2:
  uint64_t v4 = v3;
  while (1)
  {
    uint64_t v4 = *(char **)v4;
    if (!v4) {
      break;
    }
    uint64_t v5 = (Phase::Logger *)(*(uint64_t (**)(void))(**((void **)v4 + 4) + 80))(*((void *)v4 + 4));
    if ((v5 & 1) == 0)
    {
      if (v2 != 99)
      {
        ++v2;
        usleep(0x4E20u);
        goto LABEL_2;
      }
      uint64_t v6 = *((void *)v4 + 2);
      uint64_t v7 = **(id **)(Phase::Logger::GetInstance(v5) + 384);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        int v8 = 136316162;
        size_t v9 = "CvmSubmixSystem.mm";
        __int16 v10 = 1024;
        int v11 = 94;
        __int16 v12 = 2048;
        uint64_t v13 = v6;
        __int16 v14 = 1024;
        int v15 = 100;
        __int16 v16 = 2048;
        uint64_t v17 = 0x4000000000000000;
        _os_log_impl(&dword_221E5E000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d Error: could not wait for all the submixes to stop (e.g. submixId %llu) in %d tries over %.3fs!", (uint8_t *)&v8, 0x2Cu);
      }
      return;
    }
  }
}

void Phase::Controller::SubmixSystem::Reset(Phase::Controller::SubmixSystem *this)
{
  int v2 = (std::recursive_mutex *)((char *)this + 80);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 80));
  for (uint64_t i = (char *)this + 56; ; (*(void (**)(void))(**((void **)i + 4) + 64))(*((void *)i + 4)))
  {
    uint64_t i = *(char **)i;
    if (!i) {
      break;
    }
  }
  while (*((void *)this + 8))
    std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Submix>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Submix>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Submix>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Submix>>>>::erase((void *)this + 5, *((uint64_t **)this + 7));
  Phase::Controller::RendererSystem::Reset(*((Phase::Controller::RendererSystem **)this + 34));
  std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear((void *)this + 18);
  std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::clear((void *)this + 23);

  std::recursive_mutex::unlock(v2);
}

void sub_221EE24B8(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void Phase::Controller::SubmixSystem::CreateSpatialSubmix(Phase::Controller::SubmixSystem *this, const Phase::Controller::CreateSpatialSubmixParameters *a2)
{
}

void sub_221EE28C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::recursive_mutex *a11, Phase::Controller::SpatialSubmix *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  a17 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Submix>>,void *>>>::operator()[abi:ne180100](v18, v19);
  std::unique_ptr<Phase::Controller::SpatialSubmix>::reset[abi:ne180100](v17);
  std::unique_ptr<Phase::Controller::SpatialSubmix>::reset[abi:ne180100](&a12);
  std::recursive_mutex::unlock(a11);
  _Unwind_Resume(a1);
}

void Phase::Controller::SubmixSystem::CreateChannelSubmix(uint64_t a1)
{
}

void sub_221EE2D38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::recursive_mutex *a11, Phase::Controller::ChannelSubmix *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  a17 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Submix>>,void *>>>::operator()[abi:ne180100](v18, v19);
  std::unique_ptr<Phase::Controller::ChannelSubmix>::reset[abi:ne180100](v17);
  std::unique_ptr<Phase::Controller::ChannelSubmix>::reset[abi:ne180100](&a12);
  std::recursive_mutex::unlock(a11);
  _Unwind_Resume(a1);
}

void Phase::Controller::SubmixSystem::CreateAmbientSubmix(uint64_t a1)
{
}

void sub_221EE31A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::recursive_mutex *a11, Phase::Controller::AmbientSubmix *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  a17 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Submix>>,void *>>>::operator()[abi:ne180100](v18, v19);
  std::unique_ptr<Phase::Controller::AmbientSubmix>::reset[abi:ne180100](v17);
  std::unique_ptr<Phase::Controller::AmbientSubmix>::reset[abi:ne180100](&a12);
  std::recursive_mutex::unlock(a11);
  _Unwind_Resume(a1);
}

void *Phase::Controller::SubmixSystem::Destroy(Phase::Logger *a1, uint64_t a2, uint64_t a3)
{
  v8[0] = a2;
  v8[1] = a3;
  uint64_t result = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((void *)a1 + 5, v8);
  if (result)
  {
    uint64_t Submix = Phase::Controller::SubmixSystem::GetSubmix(a1, a2, a3);
    return (void *)(*(uint64_t (**)(uint64_t))(*(void *)Submix + 72))(Submix);
  }
  return result;
}

uint64_t Phase::Controller::SubmixSystem::GetSubmix(Phase::Logger *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v23 = *MEMORY[0x263EF8340];
  v16[0] = a2;
  v16[1] = a3;
  unint64_t v4 = 0xCBF29CE484222325;
  do
    unint64_t v4 = 0x100000001B3 * (v4 ^ *((char *)v16 + v3++));
  while (v3 != 16);
  int8x8_t v5 = *(int8x8_t *)((char *)a1 + 48);
  if (!*(void *)&v5) {
    goto LABEL_23;
  }
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v7 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v7 = (*(void *)&v5 - 1) & v4;
  }
  int v8 = *(void **)(*((void *)a1 + 5) + 8 * v7);
  if (!v8 || (size_t v9 = (void *)*v8) == 0)
  {
LABEL_23:
    uint64_t v13 = **(id **)(Phase::Logger::GetInstance(a1) + 384);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315650;
      uint64_t v18 = "CvmSubmixSystem.mm";
      __int16 v19 = 1024;
      int v20 = 486;
      __int16 v21 = 2048;
      uint64_t v22 = a2;
      _os_log_impl(&dword_221E5E000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (InvalidId) [it == mSubmixes.end() is true]: \"Invalid SubmixId %llu\"", buf, 0x1Cu);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _ZN5Phase10Controller9InvalidIdCI1St11logic_errorEPKc(exception, "Invalid SubmixId %llu");
  }
  while (1)
  {
    unint64_t v10 = v9[1];
    if (v10 == v4) {
      break;
    }
    if (v6.u32[0] > 1uLL)
    {
      if (v10 >= *(void *)&v5) {
        v10 %= *(void *)&v5;
      }
    }
    else
    {
      v10 &= *(void *)&v5 - 1;
    }
    if (v10 != v7) {
      goto LABEL_23;
    }
LABEL_22:
    size_t v9 = (void *)*v9;
    if (!v9) {
      goto LABEL_23;
    }
  }
  if (v9[2] != a2 || v9[3] != a3) {
    goto LABEL_22;
  }
  return v9[4];
}

void sub_221EE3494(_Unwind_Exception *exception_object)
{
}

double Phase::Controller::SubmixSystem::SetUnitsPerMeter(Phase::Controller::SubmixSystem *this, double a2)
{
  double v3 = Phase::Controller::sClamp<double>(this, a2, *((double *)this + 36), *((double *)this + 37));
  double v4 = *((double *)this + 39);
  if (v3 != v4)
  {
    *((double *)this + 39) = v3;
    *((unsigned char *)this + 320) = 1;
    double v4 = v3;
  }
  double result = 1.0 / v4;
  *((double *)this + 41) = 1.0 / v4;
  return result;
}

void Phase::Controller::SubmixSystem::PrepareGenerator(Phase::Logger *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t Submix = (Phase::Logger *)Phase::Controller::SubmixSystem::GetSubmix(a1, a4, a5);
  Phase::Controller::Submix::PrepareGenerator(Submix, a2, a3, a6);
}

uint64_t Phase::Controller::SubmixSystem::PlayGenerator(Phase::Logger *a1, uint64_t a2, uint64_t a3)
{
  SubmixIdForuint64_t Generator = Phase::Controller::SubmixSystem::GetSubmixIdForGenerator((uint64_t)a1, a2, a3);
  uint64_t Submix = Phase::Controller::SubmixSystem::GetSubmix(a1, SubmixIdForGenerator, v7);

  return Phase::Controller::Submix::PlayGenerator(Submix, a2, a3);
}

uint64_t Phase::Controller::SubmixSystem::GetSubmixIdForGenerator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  v7[0] = a2;
  v7[1] = a3;
  double v3 = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::ActionTreeIOManager::BufferInfo>>>>::find<Phase::UniqueObjectId>((void *)(a1 + 144), v7);
  if (!v3)
  {
    int8x8_t v5 = **(id **)(Phase::Logger::GetInstance(0) + 384);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315650;
      size_t v9 = "CvmSubmixSystem.mm";
      __int16 v10 = 1024;
      int v11 = 477;
      __int16 v12 = 2048;
      uint64_t v13 = v7[0];
      _os_log_impl(&dword_221E5E000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (InvalidId) [it == mGeneratorToSubmixIdMap.end() is true]: \"Invalid GeneratorId %llu\"", buf, 0x1Cu);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _ZN5Phase10Controller9InvalidIdCI1St11logic_errorEPKc(exception, "Invalid GeneratorId %llu");
  }
  return v3[4];
}

void sub_221EE3794(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::SubmixSystem::PauseGenerator(Phase::Logger *a1, uint64_t a2, uint64_t a3)
{
  SubmixIdForuint64_t Generator = Phase::Controller::SubmixSystem::GetSubmixIdForGenerator((uint64_t)a1, a2, a3);
  uint64_t Submix = Phase::Controller::SubmixSystem::GetSubmix(a1, SubmixIdForGenerator, v7);

  return Phase::Controller::Submix::PauseGenerator(Submix, a2, a3);
}

uint64_t Phase::Controller::SubmixSystem::ResumeGenerator(Phase::Logger *a1, uint64_t a2, uint64_t a3)
{
  SubmixIdForuint64_t Generator = Phase::Controller::SubmixSystem::GetSubmixIdForGenerator((uint64_t)a1, a2, a3);
  uint64_t Submix = Phase::Controller::SubmixSystem::GetSubmix(a1, SubmixIdForGenerator, v7);

  return Phase::Controller::Submix::ResumeGenerator(Submix, a2, a3);
}

void Phase::Controller::SubmixSystem::StopGenerator(Phase::Logger *a1, uint64_t a2, uint64_t a3)
{
  SubmixIdForuint64_t Generator = Phase::Controller::SubmixSystem::GetSubmixIdForGenerator((uint64_t)a1, a2, a3);
  uint64_t Submix = Phase::Controller::SubmixSystem::GetSubmix(a1, SubmixIdForGenerator, v7);
  uint64_t Generator = (Phase::Controller::Generator *)Phase::Controller::Submix::GetGenerator(Submix, a2, a3);

  Phase::Controller::Generator::Stop(Generator);
}

void Phase::Controller::SubmixSystem::SleepGenerator(Phase::Logger *a1, uint64_t a2, uint64_t a3)
{
  SubmixIdForuint64_t Generator = Phase::Controller::SubmixSystem::GetSubmixIdForGenerator((uint64_t)a1, a2, a3);
  uint64_t Submix = Phase::Controller::SubmixSystem::GetSubmix(a1, SubmixIdForGenerator, v7);

  Phase::Controller::Submix::SleepGenerator(Submix, a2, a3);
}

void Phase::Controller::SubmixSystem::WakeGenerator(Phase::Logger *a1, uint64_t a2, uint64_t a3)
{
  SubmixIdForuint64_t Generator = Phase::Controller::SubmixSystem::GetSubmixIdForGenerator((uint64_t)a1, a2, a3);
  uint64_t Submix = Phase::Controller::SubmixSystem::GetSubmix(a1, SubmixIdForGenerator, v7);

  Phase::Controller::Submix::WakeGenerator(Submix, a2, a3);
}

void Phase::Controller::SubmixSystem::SetGeneratorParameter(Phase::Logger *a1, uint64_t a2, uint64_t a3, unint64_t a4, double a5)
{
  SubmixIdForuint64_t Generator = Phase::Controller::SubmixSystem::GetSubmixIdForGenerator((uint64_t)a1, a2, a3);
  uint64_t Submix = Phase::Controller::SubmixSystem::GetSubmix(a1, SubmixIdForGenerator, v11);
  uint64_t Generator = (Phase::Controller::Generator *)Phase::Controller::Submix::GetGenerator(Submix, a2, a3);

  Phase::Controller::Generator::SetParameter(Generator, a4, a5, 0);
}

uint64_t Phase::Controller::SubmixSystem::PauseExternalStream(Phase::Logger *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  v15[0] = a2;
  v15[1] = a3;
  double v4 = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>((void *)a1 + 23, v15);
  if (!v4)
  {
    __int16 v10 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(0)
                                                                                        + 384)));
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      Phase::UniqueObjectId::str((Phase::UniqueObjectId *)v15, __p);
      if (v14 >= 0) {
        uint64_t v11 = __p;
      }
      else {
        uint64_t v11 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136315650;
      uint64_t v17 = "CvmSubmixSystem.mm";
      __int16 v18 = 1024;
      int v19 = 341;
      __int16 v20 = 2080;
      __int16 v21 = v11;
      _os_log_impl(&dword_221E5E000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (InvalidId) [it == mExternalStreamIdToGeneratorIdMap.end() is true]: \"Invalid ExternalStreamId %s\"", buf, 0x1Cu);
      if (v14 < 0) {
        operator delete(__p[0]);
      }
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _ZN5Phase10Controller9InvalidIdCI1St11logic_errorEPKc(exception, "Invalid ExternalStreamId %s");
  }
  int8x8_t v5 = v4 + 5;
  SubmixIdForuint64_t Generator = Phase::Controller::SubmixSystem::GetSubmixIdForGenerator((uint64_t)a1, v4[4], v4[5]);
  uint64_t Submix = Phase::Controller::SubmixSystem::GetSubmix(a1, SubmixIdForGenerator, v7);
  return Phase::Controller::Submix::PauseExternalStream(Submix, *(v5 - 1), *v5);
}

void sub_221EE3BC8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Phase::Controller::SubmixSystem::ResumeExternalStream(Phase::Logger *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  v14[0] = a2;
  v14[1] = a3;
  double v4 = std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::find<Phase::UniqueObjectId>((void *)a1 + 23, v14);
  if (!v4)
  {
    size_t v9 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(0)
                                                                                       + 384)));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      Phase::UniqueObjectId::str((Phase::UniqueObjectId *)v14, __p);
      if (v13 >= 0) {
        __int16 v10 = __p;
      }
      else {
        __int16 v10 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136315650;
      __int16 v16 = "CvmSubmixSystem.mm";
      __int16 v17 = 1024;
      int v18 = 351;
      __int16 v19 = 2080;
      __int16 v20 = v10;
      _os_log_impl(&dword_221E5E000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (InvalidId) [it == mExternalStreamIdToGeneratorIdMap.end() is true]: \"Invalid ExternalStreamId %s\"", buf, 0x1Cu);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _ZN5Phase10Controller9InvalidIdCI1St11logic_errorEPKc(exception, "Invalid ExternalStreamId %s");
  }
  int8x8_t v5 = v4 + 5;
  SubmixIdForuint64_t Generator = Phase::Controller::SubmixSystem::GetSubmixIdForGenerator((uint64_t)a1, v4[4], v4[5]);
  uint64_t Submix = (void *)Phase::Controller::SubmixSystem::GetSubmix(a1, SubmixIdForGenerator, v7);
  Phase::Controller::Submix::ResumeExternalStream(Submix, *(v5 - 1), *v5);
}

void sub_221EE3D8C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Phase::Controller::SubmixSystem::Update(Phase::Controller::SubmixSystem *this, double a2)
{
  uint64_t Instance = Phase::Logger::GetInstance(this);
  int8x8_t v5 = (Phase::Logger *)os_signpost_id_generate(**(os_log_t **)(Instance + 896));
  uint8x8_t v6 = (Phase::Logger *)Phase::Logger::GetInstance(v5);
  if (*((unsigned char *)v6 + 904))
  {
    uint64_t v7 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v6)
                                                                                       + 896)));
    int v8 = v7;
    if ((unint64_t)v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v7))
    {
      LOWORD(ExternalStreamId) = 0;
      _os_signpost_emit_with_name_impl(&dword_221E5E000, v8, OS_SIGNPOST_INTERVAL_BEGIN, (os_signpost_id_t)v5, "Phase_SubmixSystem_Update", "Submix System Update", (uint8_t *)&ExternalStreamId, 2u);
    }
  }
  Phase::Controller::RendererSystem::Update(*((Phase::Controller::RendererSystem **)this + 34));
  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::ExecuteCommands((uint64_t)this);
  for (uint64_t i = (uint64_t **)*((void *)this + 7); i; uint64_t i = (uint64_t **)*i)
    (*(void (**)(uint64_t *, double))(*i[4] + 176))(i[4], a2);
  __int16 v10 = (std::recursive_mutex *)((char *)this + 80);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 80));
  __int16 v12 = (uint64_t *)*((void *)this + 7);
  if (v12)
  {
    do
    {
      while (1)
      {
        uint64_t v13 = v12[2];
        uint64_t v14 = v12[3];
        int v15 = (Phase::Controller::Submix *)v12[4];
        uint64_t v11 = (Phase::Logger *)(*(uint64_t (**)(Phase::Controller::Submix *))(*(void *)v15 + 88))(v15);
        if (v11) {
          break;
        }
        __int16 v12 = (uint64_t *)*v12;
        if (!v12) {
          goto LABEL_21;
        }
      }
      __int16 v16 = (uint64_t *)*((void *)this + 20);
      while (v16)
      {
        if (v16[4] == v13 && v16[5] == v14) {
          __int16 v16 = (uint64_t *)std::__hash_table<Phase::Controller::Renderer *,std::hash<Phase::Controller::Renderer *>,std::equal_to<Phase::Controller::Renderer *>,std::allocator<Phase::Controller::Renderer *>>::erase((void *)this + 18, v16);
        }
        else {
          __int16 v16 = (uint64_t *)*v16;
        }
      }
      uint64_t ExternalStreamId = 0;
      uint64_t v22 = 0;
      uint64_t ExternalStreamId = Phase::Controller::Submix::GetExternalStreamId(v15);
      uint64_t v22 = v17;
      if (ExternalStreamId | v17) {
        std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,Phase::UniqueObjectId>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,Phase::UniqueObjectId>>>::__erase_unique<Phase::UniqueObjectId>((void *)this + 23, &ExternalStreamId);
      }
      uint64_t v11 = (Phase::Logger *)std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Submix>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Submix>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Submix>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::Submix>>>>::erase((void *)this + 5, v12);
      __int16 v12 = (uint64_t *)v11;
    }
    while (v11);
  }
LABEL_21:
  int v18 = (Phase::Logger *)Phase::Logger::GetInstance(v11);
  if (*((unsigned char *)v18 + 904))
  {
    __int16 v19 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v18)
                                                                                        + 896)));
    __int16 v20 = v19;
    if ((unint64_t)v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v19))
    {
      LOWORD(ExternalStreamId) = 0;
      _os_signpost_emit_with_name_impl(&dword_221E5E000, v20, OS_SIGNPOST_INTERVAL_END, (os_signpost_id_t)v5, "Phase_SubmixSystem_Update", (const char *)&unk_222112ABB, (uint8_t *)&ExternalStreamId, 2u);
    }
  }
  std::recursive_mutex::unlock(v10);
}

void sub_221EE4030(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::SubmixSystem::SubmitGeneratorStoppedResult(Phase::Logger *a1, uint64_t a2, uint64_t a3)
{
  SubmixIdForuint64_t Generator = Phase::Controller::SubmixSystem::GetSubmixIdForGenerator((uint64_t)a1, a2, a3);
  uint8x8_t v6 = *(uint64_t (**)(void))(*(void *)Phase::Controller::SubmixSystem::GetSubmix(a1, SubmixIdForGenerator, v5) + 208);

  return v6();
}

uint64_t Phase::Controller::SubmixSystem::SeekGeneratorTime(Phase::Logger *a1, uint64_t a2, uint64_t a3, double a4)
{
  SubmixIdForuint64_t Generator = Phase::Controller::SubmixSystem::GetSubmixIdForGenerator((uint64_t)a1, a2, a3);
  uint64_t Submix = Phase::Controller::SubmixSystem::GetSubmix(a1, SubmixIdForGenerator, v9);
  uint64_t v11 = *(uint64_t (**)(__n128))(*(void *)Phase::Controller::Submix::GetGenerator(Submix, a2, a3) + 56);
  v12.n128_f64[0] = a4;

  return v11(v12);
}

void Phase::Controller::SubmixSystem::ActivateAudioSession(Phase::Controller::SubmixSystem *this, int a2, int a3, int a4)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  int v8 = **(id **)(Phase::Logger::GetInstance(this) + 384);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = "Deactivating";
    *(_DWORD *)std::string buf = 136316418;
    BOOL v26 = "CvmSubmixSystem.mm";
    __int16 v27 = 1024;
    int v28 = 515;
    if (a3) {
      uint64_t v9 = "Activating";
    }
    __int16 v10 = "";
    __int16 v29 = 2048;
    int v30 = this;
    uint64_t v32 = (uint64_t)v9;
    __int16 v31 = 2080;
    if (a4) {
      __int16 v10 = ", from platform callback";
    }
    __int16 v33 = 1024;
    int v34 = a2;
    __int16 v35 = 2080;
    int v36 = v10;
    _os_log_impl(&dword_221E5E000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d impl@%p: %s session 0x%x%s", buf, 0x36u);
  }
  if ((a4 & 1) == 0) {
    std::terminate();
  }
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 80));
  for (uint64_t i = (uint64_t *)*((void *)this + 7); i; uint64_t i = (uint64_t *)*i)
  {
    uint64_t v12 = i[4];
    if (!v12)
    {
      __int16 v20 = **(id **)(Phase::Logger::GetInstance(0) + 384);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 136315394;
        BOOL v26 = "CvmSubmixSystem.mm";
        __int16 v27 = 1024;
        int v28 = 521;
        _os_log_impl(&dword_221E5E000, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: pSubmix != nullptr is false.", buf, 0x12u);
      }
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "PRECONDITION: pSubmix != nullptr is false.");
    }
    if (*(_DWORD *)(v12 + 48) == a2)
    {
      int32x2_t v22 = (int32x2_t)1065353216;
      if (a3) {
        Phase::Controller::Submix::SetSessionPlayState(v12, 1, 1, &v22);
      }
      else {
        Phase::Controller::Submix::SetSessionPlayState(v12, 0, 1, 0);
      }
      int32x2_t v13 = v22;
      long long v37 = *((_OWORD *)i + 1);
      uint64_t v14 = **((void **)this + 1);
      unint64_t v24 = 0;
      BOOL v23 = 1;
      uint64_t v15 = Phase::LockFreeQueueMPSC::GetWriteBuffer((atomic_uchar *)v14, 48, &v24, &v23);
      if (!v15)
      {
        uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance(0);
        Phase::Logger::DumpTailspinWithThrottleAsync(Instance, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
        int v18 = **(id **)(v14 + 48);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 136315394;
          BOOL v26 = "CommandQueue.hpp";
          __int16 v27 = 1024;
          int v28 = 100;
          _os_log_impl(&dword_221E5E000, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [true is true]: \"CommandQueue unable to retrieve write buffer; buf"
            "fer is full, unable to grow.\"",
            buf,
            0x12u);
        }
        __int16 v19 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v19, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
      }
      if (v23)
      {
        __int16 v16 = **(id **)(v14 + 48);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)std::string buf = 136315906;
          BOOL v26 = "CommandQueue.hpp";
          __int16 v27 = 1024;
          int v28 = 89;
          __int16 v29 = 2048;
          int v30 = (Phase::Controller::SubmixSystem *)v24;
          __int16 v31 = 2048;
          uint64_t v32 = 48;
          _os_log_impl(&dword_221E5E000, v16, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: CommandQueue grew buffer to %zu bytes to accommodate extra %zu bytes - this usually means the system is under load or the command queue is too small.", buf, 0x26u);
        }
      }
      *(void *)uint64_t v15 = &unk_26D473DE0;
      *(void *)(v15 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::Controller::RouterCommandBatch,std::pair<Phase::Handle64,unsigned long long>,std::shared_ptr<Phase::Controller::Renderer>,unsigned long long,std::pair<Phase::UniqueObjectId,BOOL>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = this;
      *(int32x2_t *)(v15 + 16) = v13;
      *(_OWORD *)(v15 + 24) = v37;
      *(unsigned char *)(v15 + 40) = a3;
      Phase::LockFreeQueueSPSC::CommitBytes((atomic_uchar *)v14, 48);
      atomic_store(0, (unsigned __int8 *)(v14 + 40));
    }
  }
  std::recursive_mutex::unlock((std::recursive_mutex *)((char *)this + 80));
}

void sub_221EE45FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::recursive_mutex *a12)
{
}

uint64_t Phase::Controller::SubmixSystem::FadeAudioSession(Phase::Controller::SubmixSystem *this, int a2, float a3, float a4, char a5)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  if ((a5 & 1) == 0) {
    std::terminate();
  }
  uint64_t v9 = (std::recursive_mutex *)((char *)this + 80);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 80));
  uint64_t v11 = (uint64_t *)*((void *)this + 7);
  if (v11)
  {
    uint64_t v12 = 0;
    do
    {
      uint64_t v13 = v11[4];
      if (!v13)
      {
        int32x2_t v22 = **(id **)(Phase::Logger::GetInstance(v10) + 384);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 136315394;
          __int16 v27 = "CvmSubmixSystem.mm";
          __int16 v28 = 1024;
          int v29 = 572;
          _os_log_impl(&dword_221E5E000, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: pSubmix != nullptr is false.", buf, 0x12u);
        }
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "PRECONDITION: pSubmix != nullptr is false.");
      }
      if (*(_DWORD *)(v13 + 48) == a2)
      {
        long long v40 = *((_OWORD *)v11 + 1);
        uint64_t v14 = **((void **)this + 1);
        unint64_t v25 = 0;
        BOOL v24 = 1;
        uint64_t v15 = Phase::LockFreeQueueMPSC::GetWriteBuffer((atomic_uchar *)v14, 40, &v25, &v24);
        if (!v15)
        {
          uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance(0);
          Phase::Logger::DumpTailspinWithThrottleAsync(Instance, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
          int v18 = **(id **)(v14 + 48);
          if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string buf = 136315394;
            __int16 v27 = "CommandQueue.hpp";
            __int16 v28 = 1024;
            int v29 = 100;
            _os_log_impl(&dword_221E5E000, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [true is true]: \"CommandQueue unable to retrieve write buffer; b"
              "uffer is full, unable to grow.\"",
              buf,
              0x12u);
          }
          __int16 v19 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v19, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
        }
        if (v24)
        {
          __int16 v16 = **(id **)(v14 + 48);
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)std::string buf = 136315906;
            __int16 v27 = "CommandQueue.hpp";
            __int16 v28 = 1024;
            int v29 = 89;
            __int16 v30 = 2048;
            __int16 v31 = (Phase::Controller::SubmixSystem *)v25;
            __int16 v32 = 2048;
            uint64_t v33 = 40;
            _os_log_impl(&dword_221E5E000, v16, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: CommandQueue grew buffer to %zu bytes to accommodate extra %zu bytes - this usually means the system is under load or the command queue is too small.", buf, 0x26u);
          }
        }
        *(void *)uint64_t v15 = &unk_26D473E08;
        *(void *)(v15 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::Controller::RouterCommandBatch,std::pair<Phase::Handle64,unsigned long long>,std::shared_ptr<Phase::Controller::Renderer>,unsigned long long,std::pair<Phase::UniqueObjectId,BOOL>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = this;
        *(_OWORD *)(v15 + 16) = v40;
        *(float *)(v15 + 32) = a3;
        *(float *)(v15 + 36) = a4;
        __int16 v10 = (Phase::Logger *)Phase::LockFreeQueueSPSC::CommitBytes((atomic_uchar *)v14, 40);
        atomic_store(0, (unsigned __int8 *)(v14 + 40));
        ++v12;
      }
      uint64_t v11 = (uint64_t *)*v11;
    }
    while (v11);
    if (v12)
    {
      __int16 v20 = **(id **)(Phase::Logger::GetInstance(v10) + 384);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 136316674;
        __int16 v27 = "CvmSubmixSystem.mm";
        __int16 v28 = 1024;
        int v29 = 592;
        __int16 v30 = 2048;
        __int16 v31 = this;
        __int16 v32 = 2048;
        uint64_t v33 = v12;
        __int16 v34 = 1024;
        int v35 = a2;
        __int16 v36 = 2048;
        double v37 = a3;
        __int16 v38 = 2048;
        double v39 = a4;
        _os_log_impl(&dword_221E5E000, v20, OS_LOG_TYPE_DEFAULT, "%25s:%-5d impl@%p: Faded %zu submixes belonging to session 0x%x to %f over %f seconds", buf, 0x40u);
      }
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  std::recursive_mutex::unlock(v9);
  return v12;
}