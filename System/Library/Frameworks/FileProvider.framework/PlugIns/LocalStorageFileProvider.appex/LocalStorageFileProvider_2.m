uint64_t sub_100157758(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned char *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned char *v7;
  unsigned char *v8;

  if (!a2)
  {
    swift_release();
    return 0;
  }
  if (a2 > 14)
  {
    if ((unint64_t)a2 < 0x7FFFFFFF) {
      return a2 << 32;
    }
    sub_10096AEC0();
    v3 = swift_allocObject();
    *(void *)(v3 + 16) = 0;
    *(void *)(v3 + 24) = a2;
    return v3;
  }
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    v4 = (unsigned char *)sub_10096A880();
    if (!v4)
    {
LABEL_10:
      v5 = sub_10096A890();
      if (v5 >= a2) {
        v6 = a2;
      }
      else {
        v6 = v5;
      }
      v7 = &v4[v6];
      if (v4) {
        v8 = v7;
      }
      else {
        v8 = 0;
      }
      v3 = sub_100078C44(v4, v8);
      swift_release();
      return v3;
    }
    result = sub_10096A8A0();
    if (!__OFSUB__(0, result))
    {
      v4 -= result;
      goto LABEL_10;
    }
  }
  __break(1u);
  return result;
}

uint64_t _sSo28NSFileProviderTypeAndCreatorV9libfssyncE12typeAsStringSSSgyF_0(unsigned int a1)
{
  uint64_t v2 = sub_10096BCB0();
  __chkstk_darwin(v2 - 8);
  uint64_t v3 = sub_10096AE90();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13[1] = bswap32(a1);
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for Data.Deallocator.none(_:), v3);
  sub_10096AE80();
  sub_10096A8C0();
  swift_allocObject();
  swift_retain();
  uint64_t v7 = sub_10096A860();
  uint64_t v8 = sub_100157758(v7, 4);
  unint64_t v10 = v9;
  swift_release();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_10096BC80();
  uint64_t v11 = sub_10096BC50();
  sub_10001E9C0(v8, v10);
  return v11;
}

uint64_t sub_100157A4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002B7CC((uint64_t *)&unk_100ACB5E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100157AB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002B7CC(&qword_100ACA8C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100157B1C()
{
  unint64_t result = qword_100ACDBE0;
  if (!qword_100ACDBE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100ACDBE0);
  }
  return result;
}

unint64_t sub_100157B70()
{
  unint64_t result = qword_100ACDBE8;
  if (!qword_100ACDBE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100ACDBE8);
  }
  return result;
}

unint64_t sub_100157BC4()
{
  unint64_t result = qword_100ACDBF0;
  if (!qword_100ACDBF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100ACDBF0);
  }
  return result;
}

unint64_t sub_100157C18()
{
  unint64_t result = qword_100ACDBF8;
  if (!qword_100ACDBF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100ACDBF8);
  }
  return result;
}

unint64_t sub_100157C6C()
{
  unint64_t result = qword_100ACDC00;
  if (!qword_100ACDC00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100ACDC00);
  }
  return result;
}

unint64_t sub_100157CC0()
{
  unint64_t result = qword_100ACDC08;
  if (!qword_100ACDC08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100ACDC08);
  }
  return result;
}

unint64_t sub_100157D14()
{
  unint64_t result = qword_100ACDC30;
  if (!qword_100ACDC30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100ACDC30);
  }
  return result;
}

unint64_t sub_100157D68()
{
  unint64_t result = qword_100ACDC38;
  if (!qword_100ACDC38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100ACDC38);
  }
  return result;
}

unint64_t sub_100157DBC()
{
  unint64_t result = qword_100ACDC40;
  if (!qword_100ACDC40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100ACDC40);
  }
  return result;
}

unint64_t sub_100157E10()
{
  unint64_t result = qword_100ACDC48;
  if (!qword_100ACDC48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100ACDC48);
  }
  return result;
}

unint64_t sub_100157E64()
{
  unint64_t result = qword_100ACDC50;
  if (!qword_100ACDC50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100ACDC50);
  }
  return result;
}

uint64_t sub_100157EB8(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100033BE8(&qword_100ACDC10);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100157F34()
{
  unint64_t result = qword_100ACDC60;
  if (!qword_100ACDC60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100ACDC60);
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for ItemMetadata(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v31 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v31 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    *(_DWORD *)(a1 + 4) = *((_DWORD *)a2 + 1);
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    *(_WORD *)(a1 + 10) = *((_WORD *)a2 + 5);
    uint64_t v7 = a3[7];
    uint64_t v8 = a1 + v7;
    uint64_t v9 = (uint64_t)a2 + v7;
    uint64_t v10 = sub_10096B0E0();
    uint64_t v11 = *(void *)(v10 - 8);
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
    v12(v8, v9, v10);
    v54 = (void (*)(char *, char *, uint64_t))v12;
    v12((uint64_t)v4 + a3[8], (uint64_t)a2 + a3[8], v10);
    uint64_t v13 = a3[10];
    *((unsigned char *)v4 + a3[9]) = *((unsigned char *)a2 + a3[9]);
    *((unsigned char *)v4 + v13) = *((unsigned char *)a2 + v13);
    uint64_t v14 = a3[12];
    *((unsigned char *)v4 + a3[11]) = *((unsigned char *)a2 + a3[11]);
    *((unsigned char *)v4 + v14) = *((unsigned char *)a2 + v14);
    uint64_t v15 = a3[14];
    *((unsigned char *)v4 + a3[13]) = *((unsigned char *)a2 + a3[13]);
    v16 = (void *)((char *)v4 + v15);
    v17 = (uint64_t *)((char *)a2 + v15);
    uint64_t v18 = v17[1];
    void *v16 = *v17;
    v16[1] = v18;
    uint64_t v19 = a3[16];
    *((unsigned char *)v4 + a3[15]) = *((unsigned char *)a2 + a3[15]);
    *((unsigned char *)v4 + v19) = *((unsigned char *)a2 + v19);
    uint64_t v20 = a3[18];
    *((unsigned char *)v4 + a3[17]) = *((unsigned char *)a2 + a3[17]);
    *((unsigned char *)v4 + v20) = *((unsigned char *)a2 + v20);
    uint64_t v21 = a3[20];
    *(void *)((char *)v4 + a3[19]) = *(uint64_t *)((char *)a2 + a3[19]);
    *((unsigned char *)v4 + v21) = *((unsigned char *)a2 + v21);
    uint64_t v22 = a3[22];
    *((unsigned char *)v4 + a3[21]) = *((unsigned char *)a2 + a3[21]);
    *((unsigned char *)v4 + v22) = *((unsigned char *)a2 + v22);
    uint64_t v23 = a3[24];
    *((unsigned char *)v4 + a3[23]) = *((unsigned char *)a2 + a3[23]);
    *((unsigned char *)v4 + v23) = *((unsigned char *)a2 + v23);
    uint64_t v24 = a3[26];
    *(void *)((char *)v4 + a3[25]) = *(uint64_t *)((char *)a2 + a3[25]);
    *(void *)((char *)v4 + v24) = *(uint64_t *)((char *)a2 + v24);
    uint64_t v25 = a3[28];
    *((unsigned char *)v4 + a3[27]) = *((unsigned char *)a2 + a3[27]);
    uint64_t v26 = a3[29];
    v27 = (char *)v4 + v26;
    *((unsigned char *)v4 + v25) = *((unsigned char *)a2 + v25);
    v28 = (char *)a2 + v26;
    v29 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
    swift_bridgeObjectRetain();
    if (v29(v28, 1, v10))
    {
      uint64_t v30 = sub_10002B7CC((uint64_t *)&unk_100ACB5E0);
      memcpy(v27, v28, *(void *)(*(void *)(v30 - 8) + 64));
    }
    else
    {
      v54(v27, v28, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v27, 0, 1, v10);
    }
    uint64_t v32 = a3[31];
    *(void *)((char *)v4 + a3[30]) = *(uint64_t *)((char *)a2 + a3[30]);
    v33 = (char *)v4 + v32;
    uint64_t v34 = (uint64_t)a2 + v32;
    *(void *)v33 = *(void *)v34;
    uint64_t v35 = a3[32];
    uint64_t v36 = a3[33];
    uint64_t v37 = *(uint64_t *)((char *)a2 + v35);
    v33[8] = *(unsigned char *)(v34 + 8);
    *(void *)((char *)v4 + v35) = v37;
    v38 = (char *)v4 + v36;
    v39 = (uint64_t *)((char *)a2 + v36);
    unint64_t v40 = *(uint64_t *)((char *)a2 + v36 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v40 >> 60 == 15)
    {
      *(_OWORD *)v38 = *(_OWORD *)v39;
    }
    else
    {
      uint64_t v41 = *v39;
      sub_10001EBB0(*v39, v40);
      *(void *)v38 = v41;
      *((void *)v38 + 1) = v40;
    }
    uint64_t v42 = a3[34];
    uint64_t v43 = a3[35];
    v44 = (char *)v4 + v42;
    uint64_t v45 = (uint64_t)a2 + v42;
    *(void *)v44 = *(void *)v45;
    v44[8] = *(unsigned char *)(v45 + 8);
    *((unsigned char *)v4 + v43) = *((unsigned char *)a2 + v43);
    uint64_t v46 = a3[36];
    uint64_t v47 = a3[37];
    v48 = (char *)v4 + v46;
    uint64_t v49 = (uint64_t)a2 + v46;
    *(_DWORD *)v48 = *(_DWORD *)v49;
    v48[4] = *(unsigned char *)(v49 + 4);
    v50 = (void *)((char *)v4 + v47);
    v51 = (uint64_t *)((char *)a2 + v47);
    uint64_t v52 = v51[1];
    void *v50 = *v51;
    v50[1] = v52;
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t assignWithCopy for ItemMetadata(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  int v6 = *(_DWORD *)(a2 + 4);
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_DWORD *)(a1 + 4) = v6;
  *(_WORD *)(a1 + 10) = *(_WORD *)(a2 + 10);
  uint64_t v7 = a3[7];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = sub_10096B0E0();
  uint64_t v11 = *(void *)(v10 - 8);
  v12 = *(void (**)(void *, const void *, uint64_t))(v11 + 24);
  v12(v8, v9, v10);
  uint64_t v45 = v12;
  v12((void *)(a1 + a3[8]), (const void *)(a2 + a3[8]), v10);
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  *(unsigned char *)(a1 + a3[12]) = *(unsigned char *)(a2 + a3[12]);
  *(unsigned char *)(a1 + a3[13]) = *(unsigned char *)(a2 + a3[13]);
  uint64_t v13 = a3[14];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (void *)(a2 + v13);
  *uint64_t v14 = *v15;
  v14[1] = v15[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + a3[15]) = *(unsigned char *)(a2 + a3[15]);
  *(unsigned char *)(a1 + a3[16]) = *(unsigned char *)(a2 + a3[16]);
  *(unsigned char *)(a1 + a3[17]) = *(unsigned char *)(a2 + a3[17]);
  *(unsigned char *)(a1 + a3[18]) = *(unsigned char *)(a2 + a3[18]);
  *(void *)(a1 + a3[19]) = *(void *)(a2 + a3[19]);
  *(unsigned char *)(a1 + a3[20]) = *(unsigned char *)(a2 + a3[20]);
  *(unsigned char *)(a1 + a3[21]) = *(unsigned char *)(a2 + a3[21]);
  *(unsigned char *)(a1 + a3[22]) = *(unsigned char *)(a2 + a3[22]);
  *(unsigned char *)(a1 + a3[23]) = *(unsigned char *)(a2 + a3[23]);
  *(unsigned char *)(a1 + a3[24]) = *(unsigned char *)(a2 + a3[24]);
  *(void *)(a1 + a3[25]) = *(void *)(a2 + a3[25]);
  *(void *)(a1 + a3[26]) = *(void *)(a2 + a3[26]);
  *(unsigned char *)(a1 + a3[27]) = *(unsigned char *)(a2 + a3[27]);
  *(unsigned char *)(a1 + a3[28]) = *(unsigned char *)(a2 + a3[28]);
  uint64_t v16 = a3[29];
  v17 = (void *)(a1 + v16);
  uint64_t v18 = (const void *)(a2 + v16);
  uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  LODWORD(v12) = v19(a1 + v16, 1, v10);
  int v20 = v19((uint64_t)v18, 1, v10);
  if (v12)
  {
    if (!v20)
    {
      (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v17, v18, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v17, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v20)
  {
    (*(void (**)(void *, uint64_t))(v11 + 8))(v17, v10);
LABEL_6:
    uint64_t v21 = sub_10002B7CC((uint64_t *)&unk_100ACB5E0);
    memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
    goto LABEL_7;
  }
  v45(v17, v18, v10);
LABEL_7:
  *(void *)(a1 + a3[30]) = *(void *)(a2 + a3[30]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v22 = a3[31];
  uint64_t v23 = a1 + v22;
  uint64_t v24 = (uint64_t *)(a2 + v22);
  uint64_t v25 = *v24;
  *(unsigned char *)(v23 + 8) = *((unsigned char *)v24 + 8);
  *(void *)uint64_t v23 = v25;
  *(void *)(a1 + a3[32]) = *(void *)(a2 + a3[32]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v26 = a3[33];
  v27 = (uint64_t *)(a1 + v26);
  v28 = (uint64_t *)(a2 + v26);
  unint64_t v29 = *(void *)(a2 + v26 + 8);
  if (*(void *)(a1 + v26 + 8) >> 60 != 15)
  {
    if (v29 >> 60 != 15)
    {
      uint64_t v31 = *v28;
      sub_10001EBB0(v31, v29);
      uint64_t v32 = *v27;
      unint64_t v33 = v27[1];
      uint64_t *v27 = v31;
      v27[1] = v29;
      sub_10001E9C0(v32, v33);
      goto LABEL_14;
    }
    sub_10011A770((uint64_t)v27);
    goto LABEL_12;
  }
  if (v29 >> 60 == 15)
  {
LABEL_12:
    *(_OWORD *)v27 = *(_OWORD *)v28;
    goto LABEL_14;
  }
  uint64_t v30 = *v28;
  sub_10001EBB0(v30, v29);
  uint64_t *v27 = v30;
  v27[1] = v29;
LABEL_14:
  uint64_t v34 = a3[34];
  uint64_t v35 = a1 + v34;
  uint64_t v36 = (uint64_t *)(a2 + v34);
  uint64_t v37 = *v36;
  *(unsigned char *)(v35 + 8) = *((unsigned char *)v36 + 8);
  *(void *)uint64_t v35 = v37;
  *(unsigned char *)(a1 + a3[35]) = *(unsigned char *)(a2 + a3[35]);
  uint64_t v38 = a3[36];
  uint64_t v39 = a1 + v38;
  uint64_t v40 = a2 + v38;
  LODWORD(v37) = *(_DWORD *)v40;
  *(unsigned char *)(v39 + 4) = *(unsigned char *)(v40 + 4);
  *(_DWORD *)uint64_t v39 = v37;
  uint64_t v41 = a3[37];
  uint64_t v42 = (void *)(a1 + v41);
  uint64_t v43 = (void *)(a2 + v41);
  *uint64_t v42 = *v43;
  v42[1] = v43[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for ItemMetadata(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_WORD *)(a1 + 10) = *(_WORD *)(a2 + 10);
  uint64_t v6 = a3[7];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = sub_10096B0E0();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void (**)(void *, const void *, uint64_t))(v10 + 32);
  v11(v7, v8, v9);
  v11((void *)(a1 + a3[8]), (const void *)(a2 + a3[8]), v9);
  uint64_t v12 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(unsigned char *)(a1 + v12) = *(unsigned char *)(a2 + v12);
  uint64_t v13 = a3[12];
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  *(unsigned char *)(a1 + v13) = *(unsigned char *)(a2 + v13);
  uint64_t v14 = a3[14];
  *(unsigned char *)(a1 + a3[13]) = *(unsigned char *)(a2 + a3[13]);
  *(_OWORD *)(a1 + v14) = *(_OWORD *)(a2 + v14);
  uint64_t v15 = a3[16];
  *(unsigned char *)(a1 + a3[15]) = *(unsigned char *)(a2 + a3[15]);
  *(unsigned char *)(a1 + v15) = *(unsigned char *)(a2 + v15);
  uint64_t v16 = a3[18];
  *(unsigned char *)(a1 + a3[17]) = *(unsigned char *)(a2 + a3[17]);
  *(unsigned char *)(a1 + v16) = *(unsigned char *)(a2 + v16);
  uint64_t v17 = a3[20];
  *(void *)(a1 + a3[19]) = *(void *)(a2 + a3[19]);
  *(unsigned char *)(a1 + v17) = *(unsigned char *)(a2 + v17);
  uint64_t v18 = a3[22];
  *(unsigned char *)(a1 + a3[21]) = *(unsigned char *)(a2 + a3[21]);
  *(unsigned char *)(a1 + v18) = *(unsigned char *)(a2 + v18);
  uint64_t v19 = a3[24];
  *(unsigned char *)(a1 + a3[23]) = *(unsigned char *)(a2 + a3[23]);
  *(unsigned char *)(a1 + v19) = *(unsigned char *)(a2 + v19);
  uint64_t v20 = a3[26];
  *(void *)(a1 + a3[25]) = *(void *)(a2 + a3[25]);
  *(void *)(a1 + v20) = *(void *)(a2 + v20);
  uint64_t v21 = a3[28];
  *(unsigned char *)(a1 + a3[27]) = *(unsigned char *)(a2 + a3[27]);
  uint64_t v22 = a3[29];
  uint64_t v23 = (void *)(a1 + v22);
  *(unsigned char *)(a1 + v21) = *(unsigned char *)(a2 + v21);
  uint64_t v24 = (const void *)(a2 + v22);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a2 + v22, 1, v9))
  {
    uint64_t v25 = sub_10002B7CC((uint64_t *)&unk_100ACB5E0);
    memcpy(v23, v24, *(void *)(*(void *)(v25 - 8) + 64));
  }
  else
  {
    v11(v23, v24, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v23, 0, 1, v9);
  }
  uint64_t v26 = a3[31];
  *(void *)(a1 + a3[30]) = *(void *)(a2 + a3[30]);
  uint64_t v27 = a1 + v26;
  uint64_t v28 = a2 + v26;
  *(void *)uint64_t v27 = *(void *)v28;
  *(unsigned char *)(v27 + 8) = *(unsigned char *)(v28 + 8);
  uint64_t v29 = a3[33];
  *(void *)(a1 + a3[32]) = *(void *)(a2 + a3[32]);
  *(_OWORD *)(a1 + v29) = *(_OWORD *)(a2 + v29);
  uint64_t v30 = a3[34];
  uint64_t v31 = a3[35];
  uint64_t v32 = a1 + v30;
  uint64_t v33 = a2 + v30;
  *(void *)uint64_t v32 = *(void *)v33;
  *(unsigned char *)(v32 + 8) = *(unsigned char *)(v33 + 8);
  *(unsigned char *)(a1 + v31) = *(unsigned char *)(a2 + v31);
  uint64_t v34 = a3[36];
  uint64_t v35 = a3[37];
  uint64_t v36 = a1 + v34;
  uint64_t v37 = a2 + v34;
  *(_DWORD *)uint64_t v36 = *(_DWORD *)v37;
  *(unsigned char *)(v36 + 4) = *(unsigned char *)(v37 + 4);
  *(_OWORD *)(a1 + v35) = *(_OWORD *)(a2 + v35);
  return a1;
}

uint64_t assignWithTake for ItemMetadata(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_WORD *)(a1 + 10) = *(_WORD *)(a2 + 10);
  uint64_t v6 = a3[7];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = sub_10096B0E0();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void (**)(void *, const void *, uint64_t))(v10 + 40);
  v11(v7, v8, v9);
  v56 = v11;
  v11((void *)(a1 + a3[8]), (const void *)(a2 + a3[8]), v9);
  uint64_t v12 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(unsigned char *)(a1 + v12) = *(unsigned char *)(a2 + v12);
  uint64_t v13 = a3[12];
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  *(unsigned char *)(a1 + v13) = *(unsigned char *)(a2 + v13);
  uint64_t v14 = a3[14];
  *(unsigned char *)(a1 + a3[13]) = *(unsigned char *)(a2 + a3[13]);
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (uint64_t *)(a2 + v14);
  uint64_t v18 = *v16;
  uint64_t v17 = v16[1];
  *uint64_t v15 = v18;
  v15[1] = v17;
  swift_bridgeObjectRelease();
  uint64_t v19 = a3[16];
  *(unsigned char *)(a1 + a3[15]) = *(unsigned char *)(a2 + a3[15]);
  *(unsigned char *)(a1 + v19) = *(unsigned char *)(a2 + v19);
  uint64_t v20 = a3[18];
  *(unsigned char *)(a1 + a3[17]) = *(unsigned char *)(a2 + a3[17]);
  *(unsigned char *)(a1 + v20) = *(unsigned char *)(a2 + v20);
  uint64_t v21 = a3[20];
  *(void *)(a1 + a3[19]) = *(void *)(a2 + a3[19]);
  *(unsigned char *)(a1 + v21) = *(unsigned char *)(a2 + v21);
  uint64_t v22 = a3[22];
  *(unsigned char *)(a1 + a3[21]) = *(unsigned char *)(a2 + a3[21]);
  *(unsigned char *)(a1 + v22) = *(unsigned char *)(a2 + v22);
  uint64_t v23 = a3[24];
  *(unsigned char *)(a1 + a3[23]) = *(unsigned char *)(a2 + a3[23]);
  *(unsigned char *)(a1 + v23) = *(unsigned char *)(a2 + v23);
  uint64_t v24 = a3[26];
  *(void *)(a1 + a3[25]) = *(void *)(a2 + a3[25]);
  *(void *)(a1 + v24) = *(void *)(a2 + v24);
  uint64_t v25 = a3[28];
  *(unsigned char *)(a1 + a3[27]) = *(unsigned char *)(a2 + a3[27]);
  uint64_t v26 = a3[29];
  uint64_t v27 = (void *)(a1 + v26);
  *(unsigned char *)(a1 + v25) = *(unsigned char *)(a2 + v25);
  uint64_t v28 = (const void *)(a2 + v26);
  uint64_t v29 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  LODWORD(v11) = v29(a1 + v26, 1, v9);
  int v30 = v29((uint64_t)v28, 1, v9);
  if (v11)
  {
    if (!v30)
    {
      (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v27, v28, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v27, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v30)
  {
    (*(void (**)(void *, uint64_t))(v10 + 8))(v27, v9);
LABEL_6:
    uint64_t v31 = sub_10002B7CC((uint64_t *)&unk_100ACB5E0);
    memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64));
    goto LABEL_7;
  }
  v56(v27, v28, v9);
LABEL_7:
  *(void *)(a1 + a3[30]) = *(void *)(a2 + a3[30]);
  swift_bridgeObjectRelease();
  uint64_t v32 = a3[31];
  uint64_t v33 = a3[32];
  uint64_t v34 = a1 + v32;
  uint64_t v35 = a2 + v32;
  *(void *)uint64_t v34 = *(void *)v35;
  *(unsigned char *)(v34 + 8) = *(unsigned char *)(v35 + 8);
  *(void *)(a1 + v33) = *(void *)(a2 + v33);
  swift_bridgeObjectRelease();
  uint64_t v36 = a3[33];
  uint64_t v37 = (uint64_t *)(a1 + v36);
  uint64_t v38 = (uint64_t *)(a2 + v36);
  unint64_t v39 = *(void *)(a1 + v36 + 8);
  if (v39 >> 60 != 15)
  {
    unint64_t v40 = v38[1];
    if (v40 >> 60 != 15)
    {
      uint64_t v41 = *v37;
      *uint64_t v37 = *v38;
      v37[1] = v40;
      sub_10001E9C0(v41, v39);
      goto LABEL_12;
    }
    sub_10011A770((uint64_t)v37);
  }
  *(_OWORD *)uint64_t v37 = *(_OWORD *)v38;
LABEL_12:
  uint64_t v42 = a3[34];
  uint64_t v43 = a3[35];
  uint64_t v44 = a1 + v42;
  uint64_t v45 = a2 + v42;
  *(void *)uint64_t v44 = *(void *)v45;
  char v46 = *(unsigned char *)(a2 + v43);
  *(unsigned char *)(v44 + 8) = *(unsigned char *)(v45 + 8);
  *(unsigned char *)(a1 + v43) = v46;
  uint64_t v47 = a3[36];
  uint64_t v48 = a3[37];
  uint64_t v49 = a1 + v47;
  uint64_t v50 = a2 + v47;
  *(_DWORD *)uint64_t v49 = *(_DWORD *)v50;
  *(unsigned char *)(v49 + 4) = *(unsigned char *)(v50 + 4);
  v51 = (void *)(a1 + v48);
  uint64_t v52 = (uint64_t *)(a2 + v48);
  uint64_t v54 = *v52;
  uint64_t v53 = v52[1];
  void *v51 = v54;
  v51[1] = v53;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100158DE0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_10096B0E0();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + a3[7];
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else if (a2 == 2147483646)
  {
    unint64_t v12 = *(void *)(a1 + a3[14] + 8);
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    int v13 = v12 - 1;
    if (v13 < 0) {
      int v13 = -1;
    }
    return (v13 + 1);
  }
  else
  {
    uint64_t v14 = sub_10002B7CC((uint64_t *)&unk_100ACB5E0);
    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
    uint64_t v16 = v14;
    uint64_t v17 = a1 + a3[29];
    return v15(v17, a2, v16);
  }
}

uint64_t sub_100158F24(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result = sub_10096B0E0();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + a4[7];
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else if (a3 == 2147483646)
  {
    *(void *)(a1 + a4[14] + 8) = a2;
  }
  else
  {
    uint64_t v13 = sub_10002B7CC((uint64_t *)&unk_100ACB5E0);
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
    uint64_t v15 = v13;
    uint64_t v16 = a1 + a4[29];
    return v14(v16, a2, a2, v15);
  }
  return result;
}

void sub_10015905C()
{
  sub_10096B0E0();
  if (v0 <= 0x3F)
  {
    sub_1001591DC();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void sub_1001591DC()
{
  if (!qword_100ACB8F0)
  {
    sub_10096B0E0();
    unint64_t v0 = sub_10096C890();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100ACB8F0);
    }
  }
}

uint64_t getEnumTagSinglePayload for ItemMetadata.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xDF) {
    goto LABEL_17;
  }
  if (a2 + 33 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 33) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 33;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 33;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 33;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x22;
  int v8 = v6 - 34;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ItemMetadata.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 33 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 33) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xDF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xDE)
  {
    unsigned int v6 = ((a2 - 223) >> 8) + 1;
    *uint64_t result = a2 + 33;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100159390);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 33;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ItemMetadata.CodingKeys()
{
  return &type metadata for ItemMetadata.CodingKeys;
}

unint64_t sub_1001593CC()
{
  unint64_t result = qword_100ACDD80;
  if (!qword_100ACDD80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100ACDD80);
  }
  return result;
}

unint64_t sub_100159424()
{
  unint64_t result = qword_100ACDD88;
  if (!qword_100ACDD88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100ACDD88);
  }
  return result;
}

unint64_t sub_10015947C()
{
  unint64_t result = qword_100ACDD90;
  if (!qword_100ACDD90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100ACDD90);
  }
  return result;
}

uint64_t sub_1001594D0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1684957547 && a2 == 0xE400000000000000;
  if (v2 || (sub_10096D2D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x657449646C696863 && a2 == 0xEE00746E756F436DLL || (sub_10096D2D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000100996CB0 || (sub_10096D2D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6E6F697461657263 && a2 == 0xEC00000065746144 || (sub_10096D2D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x8000000100993D70 || (sub_10096D2D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x64656B636F4C7369 && a2 == 0xE800000000000000 || (sub_10096D2D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6E65646469487369 && a2 == 0xE800000000000000 || (sub_10096D2D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x64656E6E69507369 && a2 == 0xE800000000000000 || (sub_10096D2D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000100996CD0 || (sub_10096D2D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x8000000100996CF0 || (sub_10096D2D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x8000000100996D10 || (sub_10096D2D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x6F52636E79537369 && a2 == 0xEA0000000000746FLL || (sub_10096D2D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x65726F6E67497369 && a2 == 0xEC000000746F6F52 || (sub_10096D2D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0x6F6E67496E497369 && a2 == 0xEE00746F6F526572 || (sub_10096D2D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0x6863617465447369 && a2 == 0xEE00746F6F526465 || (sub_10096D2D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0x53747365736F6C63 && a2 == 0xEF746F6F52636E79 || (sub_10096D2D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else if (a1 == 0x656C617461447369 && a2 == 0xEA00000000007373 || (sub_10096D2D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 16;
  }
  else if (a1 == 0x6E6F697463697665 && a2 == 0xEF79636E65677255 || (sub_10096D2D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 17;
  }
  else if (a1 == 0x6E6F697463697665 && a2 == 0xEE006E6F73616552 || (sub_10096D2D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 18;
  }
  else if (a1 == 0x6150636E79537369 && a2 == 0xEC00000064657375 || (sub_10096D2D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 19;
  }
  else if (a1 == 0xD000000000000022 && a2 == 0x8000000100996D30 || (sub_10096D2D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 20;
  }
  else if (a1 == 1702521203 && a2 == 0xE400000000000000 || (sub_10096D2D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 21;
  }
  else if (a1 == 0x6C61636973796870 && a2 == 0xEC000000657A6953 || (sub_10096D2D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 22;
  }
  else if (a1 == 0x67616B6361507369 && a2 == 0xE900000000000065 || (sub_10096D2D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 23;
  }
  else if (a1 == 0x6C646E7542736168 && a2 == 0xEC00000074694265 || (sub_10096D2D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 24;
  }
  else if (a1 == 0x646573557473616CLL && a2 == 0xEC00000065746144 || (sub_10096D2D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 25;
  }
  else if (a1 == 1936154996 && a2 == 0xE400000000000000 || (sub_10096D2D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 26;
  }
  else if (a1 == 0x657469726F766166 && a2 == 0xEC0000006B6E6152 || (sub_10096D2D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 27;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000100993EB0 || (sub_10096D2D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 28;
  }
  else if (a1 == 0x69746E6172617571 && a2 == 0xEE00626F6C42656ELL || (sub_10096D2D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 29;
  }
  else if (a1 == 0x65707954736FLL && a2 == 0xE600000000000000 || (sub_10096D2D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 30;
  }
  else if (a1 == 0x7272757365527369 && a2 == 0xED00006465746365 || (sub_10096D2D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 31;
  }
  else if (a1 == 0x6E756F436B6E696CLL && a2 == 0xE900000000000074 || (sub_10096D2D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 32;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x8000000100996D60)
  {
    swift_bridgeObjectRelease();
    return 33;
  }
  else
  {
    char v6 = sub_10096D2D0();
    swift_bridgeObjectRelease();
    if (v6) {
      return 33;
    }
    else {
      return 34;
    }
  }
}

unint64_t sub_10015A350()
{
  unint64_t result = qword_100ACDDA0;
  if (!qword_100ACDDA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100ACDDA0);
  }
  return result;
}

unint64_t sub_10015A3A4()
{
  unint64_t result = qword_100ACDDA8;
  if (!qword_100ACDDA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100ACDDA8);
  }
  return result;
}

unint64_t sub_10015A3F8()
{
  unint64_t result = qword_100ACDDB0;
  if (!qword_100ACDDB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100ACDDB0);
  }
  return result;
}

unint64_t sub_10015A44C()
{
  unint64_t result = qword_100ACDDB8;
  if (!qword_100ACDDB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100ACDDB8);
  }
  return result;
}

uint64_t sub_10015A4A0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

NSString sub_10015A4E8()
{
  _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
  NSString v0 = sub_10096BC00();
  swift_bridgeObjectRelease();
  id v1 = [v0 pathComponents];
  uint64_t v2 = sub_10096C0A0();

  unint64_t v3 = *(void *)(v2 + 16);
  swift_bridgeObjectRelease();
  if (v3 < 2)
  {
    _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
    NSString v7 = sub_10096BC00();

    swift_bridgeObjectRelease();
  }
  else
  {
    id v4 = [v0 stringByDeletingLastPathComponent];
    if (v4)
    {
      id v5 = v4;

      return v5;
    }
    _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
    NSString v7 = sub_10096BC00();
    swift_bridgeObjectRelease();
  }
  return v7;
}

NSString sub_10015A5DC()
{
  _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
  NSString v0 = sub_10096BC00();
  swift_bridgeObjectRelease();
  id v1 = [v0 pathComponents];
  uint64_t v2 = sub_10096C0A0();

  unint64_t v3 = *(void *)(v2 + 16);
  swift_bridgeObjectRelease();
  if (v3 < 2)
  {
    NSString v4 = NSFileProviderDomainDefaultIdentifier;
  }
  else
  {
    NSString v4 = [v0 lastPathComponent];
    if (!v4)
    {
      _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
      NSString v4 = sub_10096BC00();
      swift_bridgeObjectRelease();
    }
  }

  return v4;
}

id InternalPathsManager.__allocating_init(providerDomainID:personaIdentifier:extensionManager:volume:rtcReporter:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v13 = objc_allocWithZone(v6);
  return InternalPathsManager.init(providerDomainID:personaIdentifier:extensionManager:volume:rtcReporter:)(a1, a2, a3, a4, a5, a6);
}

id InternalPathsManager.init(providerDomainID:personaIdentifier:extensionManager:volume:rtcReporter:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v12 = &v6[OBJC_IVAR____TtC9libfssync20InternalPathsManager_appSupportURL];
  uint64_t v13 = sub_10096AE50();
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
  v14(v12, 1, 1, v13);
  v14(&v6[OBJC_IVAR____TtC9libfssync20InternalPathsManager_wharfDirectoryURL], 1, 1, v13);
  v14(&v6[OBJC_IVAR____TtC9libfssync20InternalPathsManager_dbDirectoryURL], 1, 1, v13);
  v14(&v6[OBJC_IVAR____TtC9libfssync20InternalPathsManager_dbURL], 1, 1, v13);
  v14(&v6[OBJC_IVAR____TtC9libfssync20InternalPathsManager_temporaryDirectoryURL], 1, 1, v13);
  v14(&v6[OBJC_IVAR____TtC9libfssync20InternalPathsManager_stateDirectoryURL], 1, 1, v13);
  *(void *)&v6[OBJC_IVAR____TtC9libfssync20InternalPathsManager_providerDomainID] = a1;
  uint64_t v15 = &v6[OBJC_IVAR____TtC9libfssync20InternalPathsManager_personaIdentifier];
  *(void *)uint64_t v15 = a2;
  *((void *)v15 + 1) = a3;
  *(void *)&v6[OBJC_IVAR____TtC9libfssync20InternalPathsManager_extensionManager] = a4;
  *(void *)&v6[OBJC_IVAR____TtC9libfssync20InternalPathsManager_volume] = a5;
  *(void *)&v6[OBJC_IVAR____TtC9libfssync20InternalPathsManager_rtcReporter] = a6;
  v18.receiver = v6;
  v18.super_class = (Class)type metadata accessor for InternalPathsManager();
  return objc_msgSendSuper2(&v18, "init");
}

uint64_t type metadata accessor for InternalPathsManager()
{
  uint64_t result = qword_100ACDE20;
  if (!qword_100ACDE20) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10015A974@<X0>(uint64_t a1@<X8>)
{
  return sub_10015A9E4((SEL *)&selRef_systemDirectory, 95, (uint64_t (*)(const char *, uint64_t, uint64_t, uint64_t))sub_1007150B8, a1);
}

uint64_t sub_10015A9AC@<X0>(uint64_t a1@<X8>)
{
  return sub_10015A9E4((SEL *)&selRef_syncRootsDirectory, 103, (uint64_t (*)(const char *, uint64_t, uint64_t, uint64_t))sub_1007150B8, a1);
}

uint64_t sub_10015A9E4@<X0>(SEL *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(const char *, uint64_t, uint64_t, uint64_t)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v20 = a3;
  uint64_t v8 = sub_10096AE50();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10002B7CC(&qword_100ACA8C0);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void **)(v4 + OBJC_IVAR____TtC9libfssync20InternalPathsManager_volume);
  if (v15)
  {
    id v16 = [v15 *a1];
    sub_10096ADD0();

    uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v17(v14, v11, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v14, 0, 1, v8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v14, 1, v8) != 1) {
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v17)(a4, v14, v8);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v14, 1, 1, v8);
  }
  sub_10002B770((uint64_t)v14, &qword_100ACA8C0);
  uint64_t result = v20("/Library/Caches/com.apple.xbs/Sources/FileProviderExtensions/fssync/fpfs/InternalPathsManager.swift", 99, 2, a2);
  __break(1u);
  return result;
}

void sub_10015AC00()
{
  uint64_t v1 = sub_10096AE50();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  id v5 = (char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  NSString v7 = (char *)v13 - v6;
  id v8 = [self defaultManager];
  sub_10015A974((uint64_t)v7);
  if (v0)
  {
  }
  else
  {
    sub_10096AE10();
    uint64_t v9 = v7;
    uint64_t v10 = *(void (**)(char *, uint64_t))(v2 + 8);
    v10(v9, v1);
    NSString v11 = sub_10096BC00();
    swift_bridgeObjectRelease();
    objc_msgSend(v8, "fp_createPathIfNeeded:", v11);

    sub_10015A9AC((uint64_t)v5);
    sub_10096AE10();
    v10(v5, v1);
    NSString v12 = sub_10096BC00();
    swift_bridgeObjectRelease();
    objc_msgSend(v8, "fp_createPathIfNeeded:", v12);
  }
}

uint64_t InternalPathsManager.forEachProviderDomainID(in:_:)(uint64_t a1, void (*a2)(char *, id), uint64_t a3)
{
  uint64_t v53 = a2;
  uint64_t v54 = a3;
  uint64_t v6 = sub_10096A630();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = sub_10096AE50();
  uint64_t v10 = *(void *)(v55 - 8);
  uint64_t v11 = __chkstk_darwin(v55);
  uint64_t v13 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v56 = (char *)&v50 - v14;
  uint64_t v15 = *(void **)(v3 + OBJC_IVAR____TtC9libfssync20InternalPathsManager_volume);
  if (!v15) {
    __break(1u);
  }
  id v58 = 0;
  id v16 = [v15 rootURLForLocation:a1 error:&v58];
  id v17 = v58;
  if (!v16)
  {
    id v40 = v58;
    sub_10096ABF0();

    return swift_willThrow();
  }
  objc_super v18 = v16;
  uint64_t v51 = v7;
  uint64_t v52 = v10;
  sub_10096ADD0();
  id v19 = v17;

  id v20 = [self defaultManager];
  sub_10096AE10();
  NSString v21 = sub_10096BC00();
  swift_bridgeObjectRelease();
  id v58 = 0;
  id v22 = [v20 contentsOfDirectoryAtPath:v21 error:&v58];

  id v23 = v58;
  if (v22)
  {
    uint64_t v24 = sub_10096C0A0();
    id v25 = v23;

    uint64_t v26 = v24;
    uint64_t v27 = *(void *)(v24 + 16);
    uint64_t v28 = v52;
    if (v27)
    {
      uint64_t v50 = v4;
      uint64_t v29 = self;
      int v30 = (void (**)(char *, uint64_t))(v28 + 8);
      uint64_t v31 = v26 + 40;
      uint64_t v51 = v26;
      uint64_t v52 = (unint64_t)v30 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      do
      {
        swift_bridgeObjectRetain();
        sub_10096AD50();
        swift_bridgeObjectRelease();
        sub_10096AD20(v33);
        uint64_t v35 = v34;
        id v57 = 0;
        id v58 = 0;
        unsigned int v36 = [v29 getProviderDomainID:v34 location:a1 foundDomainID:&v58 error:&v57];

        id v37 = v58;
        id v38 = v57;
        if (!v36)
        {
          uint64_t v45 = v38;
          id v46 = v37;
          sub_10096ABF0();

          swift_willThrow();
          uint64_t v47 = *v30;
          uint64_t v48 = v55;
          (*v30)(v13, v55);
          swift_bridgeObjectRelease();
          return ((uint64_t (*)(char *, uint64_t))v47)(v56, v48);
        }
        if (v37)
        {
          id v39 = v37;
          v53(v13, v39);
        }
        v31 += 16;
        uint64_t v32 = *v30;
        (*v30)(v13, v55);
        --v27;
      }
      while (v27);
      swift_bridgeObjectRelease();
      return ((uint64_t (*)(char *, uint64_t))v32)(v56, v55);
    }
    else
    {
      swift_bridgeObjectRelease();
      return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v56, v55);
    }
  }
  else
  {
    id v42 = v58;
    sub_10096ABF0();

    swift_willThrow();
    swift_errorRetain();
    sub_10096A4F0();
    sub_10016B7B8((unint64_t *)&qword_100ACF7F0, (void (*)(uint64_t))&type metadata accessor for CocoaError.Code);
    LOBYTE(v42) = sub_10096AA60();
    swift_errorRelease();
    uint64_t v43 = *(void (**)(char *, uint64_t))(v51 + 8);
    v43(v9, v6);
    uint64_t v44 = v52;
    if (v42)
    {
      (*(void (**)(char *, uint64_t))(v52 + 8))(v56, v55);
    }
    else
    {
      swift_errorRetain();
      sub_10096A510();
      char v49 = sub_10096AA60();
      swift_errorRelease();
      v43(v9, v6);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v56, v55);
      if ((v49 & 1) == 0) {
        return result;
      }
    }
    return swift_errorRelease();
  }
}

void sub_10015B350(uint64_t a1)
{
  uint64_t v4 = sub_10096AE50();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v43 = (char *)v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  char v49 = (char *)v39 - v8;
  uint64_t v9 = sub_10002B7CC(&qword_100ACA8C0);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v48 = (uint64_t)v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v39 - v12;
  id v14 = [self defaultManager];
  uint64_t v15 = v1 + OBJC_IVAR____TtC9libfssync20InternalPathsManager_dbDirectoryURL;
  swift_beginAccess();
  uint64_t v47 = v15;
  sub_10016A248(v15, (uint64_t)v13);
  uint64_t v45 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  uint64_t v46 = v5 + 48;
  if (v45(v13, 1, v4) == 1) {
LABEL_15:
  }
    __break(1u);
  sub_10096AE10();
  NSString v16 = sub_10096BC00();
  swift_bridgeObjectRelease();
  id v17 = *(void (**)(char *, uint64_t))(v5 + 8);
  uint64_t v44 = v5 + 8;
  v17(v13, v4);
  objc_msgSend(v14, "fp_createPathIfNeeded:", v16);

  sub_10096AE10();
  NSString v18 = sub_10096BC00();
  swift_bridgeObjectRelease();
  id v51 = 0;
  id v19 = [v14 contentsOfDirectoryAtPath:v18 error:&v51];

  id v20 = v51;
  id v21 = v14;
  if (v19)
  {
    uint64_t v42 = a1;
    v39[1] = v2;
    uint64_t v22 = sub_10096C0A0();
    id v23 = v20;

    uint64_t v40 = v22;
    uint64_t v24 = *(void *)(v22 + 16);
    if (v24)
    {
      uint64_t v25 = v40 + 40;
      id v41 = v14;
      do
      {
        swift_bridgeObjectRetain();
        v52._countAndFlagsBits = 25188;
        v52._object = (void *)0xE200000000000000;
        if (sub_10096BE70(v52))
        {
          uint64_t v26 = v49;
          sub_10096AD50();
          sub_10096AD20(v27);
          uint64_t v50 = v28;
          uint64_t v29 = v4;
          v17(v26, v4);
          uint64_t v30 = v48;
          sub_10016A248(v47, v48);
          if (v45((char *)v30, 1, v4) == 1)
          {
            __break(1u);
            goto LABEL_15;
          }
          uint64_t v31 = v43;
          sub_10096AD50();
          swift_bridgeObjectRelease();
          v17((char *)v30, v4);
          sub_10096AD20(v32);
          uint64_t v34 = v33;
          v17(v31, v4);
          id v51 = 0;
          id v21 = v41;
          uint64_t v35 = v50;
          unsigned __int8 v36 = [v41 moveItemAtURL:v50 toURL:v34 error:&v51];

          id v37 = v51;
          uint64_t v4 = v29;
          if ((v36 & 1) == 0)
          {
            id v38 = v37;
            swift_bridgeObjectRelease();
            goto LABEL_13;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        v25 += 16;
        --v24;
      }
      while (v24);
    }

    swift_bridgeObjectRelease();
  }
  else
  {
    id v38 = v51;
LABEL_13:
    sub_10096ABF0();

    swift_willThrow();
  }
}

uint64_t sub_10015B7E0(void *a1)
{
  id v3 = [a1 nsDomain];
  id v4 = [v3 personaIdentifier];

  if (v4)
  {
    uint64_t v6 = _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
    uint64_t v8 = v7;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v8 = 0;
  }
  __chkstk_darwin(v5);
  v10[2] = v1;
  v10[3] = a1;
  sub_10026D280(v6, v8, (uint64_t)sub_10016A1C4, (uint64_t)v10);
  return swift_bridgeObjectRelease();
}

void sub_10015B8C8(void *a1, void *a2)
{
  id v5 = [self defaultManager];
  sub_10015AC00();
  if (!v2)
  {
    id v6 = a1;
    id v7 = a2;
    id v5 = v5;
    sub_100843890(v6, v6, v7, v5);
  }
}

id sub_10015B968(uint64_t a1, uint64_t a2, void *a3)
{
  id v122 = a3;
  uint64_t v6 = sub_10096AE50();
  id v7 = *(void **)(v6 - 8);
  __chkstk_darwin(v6);
  v105 = (char *)&v102 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10002B7CC(&qword_100ACA8C0);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v104 = (uint64_t)&v102 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v106 = (uint64_t)&v102 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v108 = (uint64_t)&v102 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v109 = (uint64_t)&v102 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v110 = (uint64_t)&v102 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v114 = (uint64_t)&v102 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v116 = (uint64_t)&v102 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  v113 = (char *)&v102 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v117 = (uint64_t)&v102 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  v115 = (char *)&v102 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  v120 = (char *)&v102 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v34 = (char *)&v102 - v33;
  uint64_t v35 = __chkstk_darwin(v32);
  v121 = (uint64_t (*)(char *, uint64_t, uint64_t))((char *)&v102 - v36);
  uint64_t v37 = __chkstk_darwin(v35);
  v118 = (char *)&v102 - v38;
  uint64_t v39 = __chkstk_darwin(v37);
  id v41 = (char *)&v102 - v40;
  uint64_t v42 = __chkstk_darwin(v39);
  uint64_t v44 = (char *)&v102 - v43;
  __chkstk_darwin(v42);
  uint64_t v46 = (char *)&v102 - v45;
  uint64_t v47 = *(void **)(a1 + OBJC_IVAR____TtC9libfssync20InternalPathsManager_volume);
  uint64_t v123 = a1;
  id v107 = v47;
  if (v47)
  {
    v125[0] = 0;
    id v48 = [v47 supportPathForDomain:a2 failIfNotExisting:0 error:v125];
    id v49 = v125[0];
    if (!v48)
    {
      id v101 = v125[0];
      sub_10096ABF0();

      return (id)swift_willThrow();
    }
    uint64_t v50 = v48;
    uint64_t v111 = v3;
    v112 = v34;
    sub_10096ADD0();
    id v51 = v49;

    Swift::String v52 = (void *)v7[7];
    ((void (*)(char *, void, uint64_t, uint64_t))v52)(v46, 0, 1, v6);
    a1 = v123;
  }
  else
  {
    uint64_t v111 = v3;
    v112 = v34;
    Swift::String v52 = (void *)v7[7];
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v52)((char *)&v102 - v45, 1, 1, v6);
  }
  uint64_t v53 = a1 + OBJC_IVAR____TtC9libfssync20InternalPathsManager_appSupportURL;
  swift_beginAccess();
  sub_10016A1E0((uint64_t)v46, v53);
  swift_endAccess();
  sub_10016A248(v53, (uint64_t)v41);
  uint64_t v54 = (char *)(v7 + 6);
  uint64_t v55 = (uint64_t (*)(char *, uint64_t, uint64_t))v7[6];
  id result = (id)v55(v41, 1, v6);
  if (result == 1)
  {
    __break(1u);
    goto LABEL_24;
  }
  sub_10096AD50();
  v59 = (uint64_t (*)(uint64_t, uint64_t))v7[1];
  id v58 = (char *)(v7 + 1);
  id v57 = v59;
  v59((uint64_t)v41, v6);
  v124 = v58 + 48;
  ((void (*)(char *, void, uint64_t, uint64_t))v52)(v44, 0, 1, v6);
  uint64_t v60 = v123 + OBJC_IVAR____TtC9libfssync20InternalPathsManager_wharfDirectoryURL;
  swift_beginAccess();
  uint64_t v103 = v60;
  sub_10016A1E0((uint64_t)v44, v60);
  swift_endAccess();
  v61 = (char *)v121;
  sub_10016A248(v53, (uint64_t)v121);
  id result = (id)v55(v61, 1, v6);
  if (result == 1)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v119 = v53;
  uint64_t v62 = (uint64_t)v118;
  sub_10096AD50();
  v57((uint64_t)v61, v6);
  ((void (*)(uint64_t, void, uint64_t, uint64_t))v52)(v62, 0, 1, v6);
  uint64_t v63 = v123;
  uint64_t v64 = v123 + OBJC_IVAR____TtC9libfssync20InternalPathsManager_dbDirectoryURL;
  swift_beginAccess();
  sub_10016A1E0(v62, v64);
  swift_endAccess();
  uint64_t v65 = v64;
  v66 = v120;
  sub_10016A248(v65, (uint64_t)v120);
  id result = (id)v55(v66, 1, v6);
  if (result == 1)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v67 = v63;
  uint64_t v68 = (uint64_t)v112;
  sub_10096AD50();
  v57((uint64_t)v66, v6);
  ((void (*)(uint64_t, void, uint64_t, uint64_t))v52)(v68, 0, 1, v6);
  uint64_t v69 = v67 + OBJC_IVAR____TtC9libfssync20InternalPathsManager_dbURL;
  swift_beginAccess();
  sub_10016A1E0(v68, v69);
  swift_endAccess();
  uint64_t v70 = v119;
  uint64_t v71 = v117;
  sub_10016A248(v119, v117);
  id result = (id)v55((char *)v71, 1, v6);
  v120 = (char *)v52;
  v121 = v55;
  if (result == 1)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v72 = v54;
  _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
  uint64_t v73 = (uint64_t)v115;
  sub_10096AD50();
  swift_bridgeObjectRelease();
  v57(v71, v6);
  ((void (*)(uint64_t, void, uint64_t, uint64_t))v120)(v73, 0, 1, v6);
  uint64_t v74 = v67 + OBJC_IVAR____TtC9libfssync20InternalPathsManager_temporaryDirectoryURL;
  swift_beginAccess();
  uint64_t v117 = v74;
  sub_10016A1E0(v73, v74);
  swift_endAccess();
  uint64_t v75 = v116;
  sub_10016A248(v70, v116);
  id result = (id)v121((char *)v75, 1, v6);
  if (result == 1)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
  uint64_t v76 = (uint64_t)v113;
  sub_10096AD50();
  swift_bridgeObjectRelease();
  v77 = v57;
  v118 = v58;
  v57(v75, v6);
  ((void (*)(uint64_t, void, uint64_t, uint64_t))v120)(v76, 0, 1, v6);
  v78 = (char *)(v67 + OBJC_IVAR____TtC9libfssync20InternalPathsManager_stateDirectoryURL);
  swift_beginAccess();
  sub_10016A1E0(v76, (uint64_t)v78);
  swift_endAccess();
  uint64_t v79 = v114;
  sub_10016A248(v70, v114);
  v124 = v72;
  v80 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v121;
  id result = (id)v121((char *)v79, 1, v6);
  if (result == 1)
  {
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v81 = v111;
  sub_10015B350(v79);
  if (v81) {
    return (id)v77(v79, v6);
  }
  v120 = v78;
  v77(v79, v6);
  uint64_t v82 = v110;
  sub_10016A248(v117, v110);
  id result = (id)v80(v82, 1, v6);
  if (result == 1) {
    goto LABEL_29;
  }
  sub_10096AD20(v83);
  v85 = v84;
  v77(v82, v6);
  v125[0] = 0;
  unsigned int v86 = [v122 removeItemAtURL:v85 error:v125];

  id v87 = v125[0];
  if (!v86)
  {
    v88 = v87;
    sub_10096ABF0();

    swift_willThrow();
    swift_errorRelease();
  }
  uint64_t v89 = v109;
  sub_10016A248(v117, v109);
  id result = (id)v80(v89, 1, v6);
  if (result == 1) {
    goto LABEL_30;
  }
  sub_10096AE10();
  NSString v90 = sub_10096BC00();
  swift_bridgeObjectRelease();
  uint64_t v91 = v89;
  v92 = (void (*)(uint64_t, uint64_t))v77;
  v77(v91, v6);
  objc_msgSend(v122, "fp_createPathIfNeeded:", v90);

  uint64_t v93 = v108;
  sub_10016A248(v103, v108);
  id result = (id)v80(v93, 1, v6);
  if (result == 1)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  sub_10096AE10();
  NSString v94 = sub_10096BC00();
  swift_bridgeObjectRelease();
  v77(v93, v6);
  objc_msgSend(v122, "fp_createPathIfNeeded:", v94);

  id result = v107;
  if (!v107)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  id v95 = [v107 purgatoryDirectory];
  v96 = v105;
  sub_10096ADD0();

  sub_10096AE10();
  v77((uint64_t)v96, v6);
  NSString v97 = sub_10096BC00();
  swift_bridgeObjectRelease();
  objc_msgSend(v122, "fp_createPathIfNeeded:", v97);

  uint64_t v98 = v106;
  sub_10016A248((uint64_t)v120, v106);
  id result = (id)v80(v98, 1, v6);
  if (result != 1)
  {
    sub_10096AE10();
    NSString v99 = sub_10096BC00();
    swift_bridgeObjectRelease();
    v92(v98, v6);
    objc_msgSend(v122, "fp_createPathIfNeeded:", v99);

    uint64_t v100 = v104;
    sub_10016A248(v119, v104);
    id result = (id)v80(v100, 1, v6);
    if (result != 1)
    {
      sub_100169794();
      return (id)((uint64_t (*)(uint64_t, uint64_t))v92)(v100, v6);
    }
    goto LABEL_34;
  }
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
  return result;
}

uint64_t sub_10015C5C8(uint64_t a1)
{
  uint64_t v3 = sub_10096AE50();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = [self prettyNameForDomain:a1];
  uint64_t v8 = _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
  unint64_t v10 = v9;

  sub_100169E14(v8, v10);
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void **)(v1 + OBJC_IVAR____TtC9libfssync20InternalPathsManager_volume);
  if (!v11) {
    __break(1u);
  }
  id v18 = 0;
  id v12 = [v11 rootURLForLocation:1 error:&v18];
  id v13 = v18;
  if (v12)
  {
    uint64_t v14 = v12;
    sub_10096ADD0();
    id v15 = v13;

    sub_10096AD50();
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  else
  {
    id v17 = v18;
    swift_bridgeObjectRelease();
    sub_10096ABF0();

    return swift_willThrow();
  }
}

void sub_10015C7C8(void *a1@<X0>, char *a2@<X8>)
{
  uint64_t v5 = sub_10002B7CC(&qword_100ACA8C0);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v8 = (char *)&v80 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  unint64_t v10 = (char *)&v80 - v9;
  uint64_t v11 = sub_10096AE50();
  uint64_t v12 = *(void *)(v11 - 8);
  v83 = (char *)v11;
  uint64_t v84 = v12;
  uint64_t v13 = __chkstk_darwin(v11);
  id v15 = (char *)&v80 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v13);
  id v18 = (char *)&v80 - v17;
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v80 - v19;
  id v21 = [a1 provider];
  if (!v21) {
    goto LABEL_47;
  }
  uint64_t v22 = v21;
  uint64_t v80 = v2;
  uint64_t v81 = v18;
  uint64_t v82 = a2;
  id v85 = [a1 identifier];
  if (!v85)
  {
    id v86 = 0;
    unint64_t v87 = 0xE000000000000000;
    sub_10096CBD0(27);
    swift_bridgeObjectRelease();
    id v86 = (id)0xD000000000000019;
    unint64_t v87 = 0x8000000100997020;
    id v75 = [a1 description];
    uint64_t v76 = _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
    v78 = v77;

    v90._countAndFlagsBits = v76;
    v90._object = v78;
    sub_10096BDC0(v90);
    swift_bridgeObjectRelease();
    goto LABEL_49;
  }
  id v23 = [v22 identifier];
  uint64_t v24 = _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
  uint64_t v26 = v25;

  if (v24 == 0xD00000000000002BLL && v26 == 0x8000000100997040 || (sub_10096D2D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v27 = _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
    uint64_t v29 = v28;
    uint64_t v30 = _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
    id v15 = v83;
    if (v27 == v30 && v29 == v31)
    {
      swift_bridgeObjectRelease_n();
LABEL_10:
      (*(void (**)(char *, uint64_t, uint64_t, char *))(v84 + 56))(v82, 1, 1, v15);
LABEL_28:

      id v46 = v85;

      return;
    }
    char v32 = sub_10096D2D0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v32) {
      goto LABEL_10;
    }
    id v33 = objc_msgSend(self, "fp_personaSharedDirectory");
    if (!v33) {
      goto LABEL_50;
    }
    uint64_t v34 = v33;
    uint64_t v35 = v81;
    sub_10096ADD0();

    uint64_t v36 = *(void (**)(char *, char *, char *))(v84 + 32);
    v36(v10, v35, v15);
    uint64_t v37 = *(void (**)(char *, void, uint64_t, char *))(v84 + 56);
    v37(v10, 0, 1, v15);
    if ((*(unsigned int (**)(char *, uint64_t, char *))(v84 + 48))(v10, 1, v15) == 1)
    {
      while (1)
      {
        sub_10002B770((uint64_t)v10, &qword_100ACA8C0);
LABEL_49:
        sub_10096CE20();
        __break(1u);
LABEL_50:
        (*(void (**)(char *, uint64_t, uint64_t, char *))(v84 + 56))(v10, 1, 1, v15);
      }
    }
    v36(v20, v10, v15);
    uint64_t v38 = v82;
    sub_10096AD50();

    (*(void (**)(char *, char *))(v84 + 8))(v20, v15);
    uint64_t v39 = v38;
    uint64_t v40 = v15;
LABEL_17:
    v37(v39, 0, 1, v40);
    return;
  }
  if (v24 == 0xD000000000000032 && v26 == 0x8000000100997070 || (sub_10096D2D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    if (!fpfs_supports_sokoban())
    {
      uint64_t v41 = _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
      uint64_t v43 = v42;
      if (v41 == _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0() && v43 == v44)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v45 = sub_10096D2D0();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v45 & 1) == 0)
        {
          id v53 = objc_msgSend(self, "fp_personaSharedDirectory");
          uint64_t v54 = v83;
          if (v53)
          {
            uint64_t v55 = v53;
            v56 = v81;
            sub_10096ADD0();

            id v57 = *(void (**)(char *, char *, char *))(v84 + 32);
            v57(v8, v56, v54);
            uint64_t v37 = *(void (**)(char *, void, uint64_t, char *))(v84 + 56);
            v37(v8, 0, 1, v54);
            if ((*(unsigned int (**)(char *, uint64_t, char *))(v84 + 48))(v8, 1, v54) != 1)
            {
              v57(v15, v8, v54);
              id v58 = v82;
              sub_10096AD50();

              (*(void (**)(char *, char *))(v84 + 8))(v15, v54);
              uint64_t v39 = v58;
              uint64_t v40 = v54;
              goto LABEL_17;
            }
          }
          else
          {
            (*(void (**)(char *, uint64_t, uint64_t, char *))(v84 + 56))(v8, 1, 1, v83);
          }
          sub_10002B770((uint64_t)v8, &qword_100ACA8C0);
          goto LABEL_49;
        }
      }
    }
    (*(void (**)(char *, uint64_t, uint64_t, char *))(v84 + 56))(v82, 1, 1, v83);
    goto LABEL_28;
  }
  if (v24 == 0xD00000000000001ELL && v26 == 0x80000001009970B0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v47 = sub_10096D2D0();
    swift_bridgeObjectRelease();
    if ((v47 & 1) == 0) {
      goto LABEL_43;
    }
  }
  if (os_variant_has_internal_content())
  {
    id v48 = [a1 nsDomain];
    id v49 = [v48 identifier];

    uint64_t v50 = _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
    uint64_t v52 = v51;

    if (v50 == 0xD00000000000002ALL && v52 == 0x80000001009970D0)
    {
      swift_bridgeObjectRelease();
LABEL_40:
      uint64_t v60 = *(void **)(v80 + OBJC_IVAR____TtC9libfssync20InternalPathsManager_volume);
      if (v60)
      {
        id v86 = 0;
        id v61 = [v60 rootURLForLocation:1 error:&v86];
        id v62 = v86;
        uint64_t v63 = v83;
        if (v61)
        {
          uint64_t v64 = v61;
          uint64_t v65 = v81;
          sub_10096ADD0();
          id v66 = v62;

          uint64_t v67 = v82;
          sub_10096AD50();

          (*(void (**)(char *, char *))(v84 + 8))(v65, v63);
          (*(void (**)(char *, void, uint64_t, char *))(v84 + 56))(v67, 0, 1, v63);
        }
        else
        {
          id v79 = v86;
          sub_10096ABF0();

          swift_willThrow();
          swift_unexpectedError();
          __break(1u);
        }
        return;
      }
      __break(1u);
LABEL_47:
      id v86 = 0;
      unint64_t v87 = 0xE000000000000000;
      sub_10096CBD0(25);
      swift_bridgeObjectRelease();
      id v86 = (id)0xD000000000000017;
      unint64_t v87 = 0x8000000100997000;
      id v71 = [a1 description];
      uint64_t v72 = _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
      uint64_t v74 = v73;

      v89._countAndFlagsBits = v72;
      v89._object = v74;
      sub_10096BDC0(v89);
      swift_bridgeObjectRelease();
      goto LABEL_49;
    }
    char v59 = sub_10096D2D0();
    swift_bridgeObjectRelease();
    if (v59) {
      goto LABEL_40;
    }
  }
LABEL_43:

  uint64_t v68 = *(void (**)(uint64_t, uint64_t, uint64_t, char *))(v84 + 56);
  uint64_t v69 = v82;
  uint64_t v70 = v83;

  v68((uint64_t)v69, 1, 1, v70);
}

void sub_10015D2F0(void *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_10002B7CC(&qword_100ACA8C0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10015C7C8(a1, v6);
  uint64_t v7 = sub_10096AE50();
  uint64_t v8 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_10002B770((uint64_t)v6, &qword_100ACA8C0);
    id v9 = [a1 volume];
    id v14 = 0;
    id v10 = [v9 findProviderDomainDirectory:a1 location:1 error:&v14];

    id v11 = v14;
    if (v10)
    {
      sub_10096ADD0();
      id v12 = v11;
    }
    else
    {
      id v13 = v14;
      sub_10096ABF0();

      swift_willThrow();
    }
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(a2, v6, v7);
  }
}

void sub_10015D4D0(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_10002B7CC(&qword_100ACA8C0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10015C7C8(a1, v6);
  uint64_t v7 = sub_10096AE50();
  uint64_t v8 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_10002B770((uint64_t)v6, &qword_100ACA8C0);
    id v9 = [a1 volume];
    id v14 = 0;
    id v10 = [v9 findProviderDomainDirectory:a1 location:1 error:&v14];

    id v11 = v14;
    if (v10)
    {
      sub_10096ADD0();
      id v12 = v11;
    }
    else
    {
      id v13 = v14;
      sub_10096ABF0();

      swift_willThrow();
    }
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(a2, v6, v7);
  }
}

uint64_t sub_10015D6AC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_10002B7CC(&qword_100ACA8C0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10096AE50();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  id v11 = (char *)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10015C7C8(a1, v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_10015D4D0(a1, (uint64_t)v11);
    uint64_t result = sub_10002B770((uint64_t)v7, &qword_100ACA8C0);
    if (v2) {
      return result;
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
  }
  id v13 = [self defaultManager];
  sub_10096AE10();
  NSString v14 = sub_10096BC00();
  swift_bridgeObjectRelease();
  unsigned __int8 v15 = [v13 fileExistsAtPath:v14];

  if ((v15 & 1) == 0) {
    goto LABEL_11;
  }
  char v16 = sub_10016A0CC((uint64_t)v11, a1);
  if (v2) {
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  if (v16)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a2, v11, v8);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(a2, 0, 1, v8);
  }
  else
  {
LABEL_11:
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a2, 1, 1, v8);
  }
}

uint64_t sub_10015D980@<X0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  return sub_10015D6AC(a1, a2);
}

void sub_10015D9A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void **)(v4 + OBJC_IVAR____TtC9libfssync20InternalPathsManager_rtcReporter);
  if (v6)
  {
    sub_10002B7CC(&qword_100AD0BB0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100973BB0;
    id v10 = v6;
    sub_10096CB30();
    *(void *)(inited + 96) = &type metadata for String;
    *(void *)(inited + 72) = a1;
    *(void *)(inited + 80) = a2;
    swift_bridgeObjectRetain();
    sub_1000936F0(inited);
    Class isa = sub_10096B9A0().super.isa;
    swift_bridgeObjectRelease();
    id v12 = (void *)sub_10096ABE0();
    [v10 postReportWithCategory:1 type:1 payload:isa error:v12];
  }
  if (a4)
  {
    NSString v13 = sub_10096BC00();
    NSString v14 = sub_10096BC00();
    unsigned __int8 v15 = (void *)sub_10096ABE0();
    FPCaptureLogsForOperationForSwift();
  }
}

void sub_10015DB60(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v103 = a1;
  uint64_t v100 = sub_10096B480();
  uint64_t v102 = *(void *)(v100 - 8);
  uint64_t v3 = __chkstk_darwin(v100);
  NSString v99 = (char *)&v90 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v104 = (char *)&v90 - v5;
  uint64_t v105 = sub_10096AE50();
  uint64_t v107 = *(void *)(v105 - 8);
  uint64_t v6 = __chkstk_darwin(v105);
  uint64_t v98 = (char *)&v90 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  NSString v97 = (char *)&v90 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  id v12 = (char *)&v90 - v11;
  uint64_t v13 = __chkstk_darwin(v10);
  unsigned __int8 v15 = (char *)&v90 - v14;
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v90 - v16;
  uint64_t v18 = sub_10096A7B0();
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  id v21 = (char *)&v90 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  LODWORD(v110) = 17;
  sub_100042898((uint64_t)_swiftEmptyArrayStorage);
  sub_10016B7B8((unint64_t *)&qword_100ACB660, (void (*)(uint64_t))&type metadata accessor for POSIXError);
  sub_10096ABD0();
  uint64_t v22 = (void *)sub_10096A790();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  sub_10015D9A8(0xD000000000000022, 0x8000000100996F40, 0xD000000000000018, 0x8000000100996F70);

  id v23 = v106;
  sub_10015AC00();
  if (!v23)
  {
    uint64_t v106 = 0;
    id v101 = v17;
    uint64_t v24 = *(void **)(v1 + OBJC_IVAR____TtC9libfssync20InternalPathsManager_volume);
    if (v24)
    {
      id v25 = [v24 removedURL];
      uint64_t v26 = v101;
      sub_10096ADD0();

      id v27 = (id)fpfs_current_or_default_log();
      sub_10096B490();
      uint64_t v28 = v107 + 16;
      uint64_t v29 = *(void (**)(char *, void *, uint64_t))(v107 + 16);
      uint64_t v30 = v103;
      uint64_t v31 = v105;
      v29(v15, v103, v105);
      v96 = v12;
      uint64_t v94 = v28;
      uint64_t v93 = v29;
      v29(v12, v26, v31);
      char v32 = sub_10096B470();
      os_log_type_t v33 = sub_10096C590();
      int v34 = v33;
      BOOL v35 = os_log_type_enabled(v32, v33);
      uint64_t v95 = v2;
      if (v35)
      {
        uint64_t v36 = swift_slowAlloc();
        v92 = (void *)swift_slowAlloc();
        id v110 = v92;
        *(_DWORD *)uint64_t v36 = 136315394;
        sub_10096AD20((NSURL *)&unk_100975000);
        int v91 = v34;
        uint64_t v38 = v37;
        id v39 = objc_msgSend(v37, "fp_shortDescription");

        uint64_t v40 = _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
        unint64_t v42 = v41;

        uint64_t v109 = sub_100719D44(v40, v42, (uint64_t *)&v110);
        sub_10096C8C0();
        swift_bridgeObjectRelease();
        uint64_t v43 = *(void (**)(char *, uint64_t))(v107 + 8);
        v43(v15, v105);
        *(_WORD *)(v36 + 12) = 2080;
        uint64_t v90 = v36 + 14;
        uint64_t v44 = v96;
        sub_10096AD20((NSURL *)(v36 + 14));
        id v46 = v45;
        id v47 = objc_msgSend(v45, "fp_shortDescription");

        uint64_t v48 = _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
        unint64_t v50 = v49;

        uint64_t v51 = v43;
        uint64_t v109 = sub_100719D44(v48, v50, (uint64_t *)&v110);
        sub_10096C8C0();
        uint64_t v31 = v105;
        swift_bridgeObjectRelease();
        v43(v44, v31);
        _os_log_impl((void *)&_mh_execute_header, v32, (os_log_type_t)v91, "trying to move un-owned directory %s to the purgatory %s", (uint8_t *)v36, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v30 = v103;
        swift_slowDealloc();
      }
      else
      {
        uint64_t v51 = *(void (**)(char *, uint64_t))(v107 + 8);
        v51(v15, v31);
        v51(v96, v31);
      }

      uint64_t v52 = v104;
      uint64_t v53 = v100;
      uint64_t v104 = *(char **)(v102 + 8);
      ((void (*)(char *, uint64_t))v104)(v52, v100);
      id v54 = [self defaultManager];
      sub_10096AD20(v55);
      id v57 = v56;
      sub_10096AD20(v58);
      uint64_t v60 = v59;
      id v110 = 0;
      id v61 = v30;
      unsigned int v62 = [v54 moveItemAtURL:v57 toURL:v59 error:&v110];

      if (v62)
      {
        uint64_t v63 = qword_100ACC078;
        id v64 = v110;
        if (v63 != -1) {
          swift_once();
        }
        id v65 = (id)qword_100AD4490;
        id v66 = v97;
        uint64_t v67 = v101;
        sub_10096AD80();
        sub_10096AD20(v68);
        uint64_t v70 = v69;
        v51(v66, v31);
        [v65 purgeAsyncAtUrl:v70];

        v51(v67, v31);
      }
      else
      {
        uint64_t v106 = v51;
        id v71 = v110;
        sub_10096ABF0();

        swift_willThrow();
        id v72 = (id)fpfs_current_or_default_log();
        uint64_t v73 = v99;
        sub_10096B490();
        uint64_t v74 = v98;
        v93(v98, v61, v31);
        swift_errorRetain();
        swift_errorRetain();
        uint64_t v75 = v31;
        uint64_t v76 = sub_10096B470();
        os_log_type_t v77 = sub_10096C5B0();
        if (os_log_type_enabled(v76, v77))
        {
          uint64_t v78 = swift_slowAlloc();
          NSString v97 = (char *)swift_slowAlloc();
          uint64_t v103 = (void *)swift_slowAlloc();
          id v110 = v103;
          *(_DWORD *)uint64_t v78 = 136446466;
          sub_10096AD20((NSURL *)&unk_100975000);
          uint64_t v80 = v79;
          id v81 = objc_msgSend(v79, "fp_shortDescription");

          uint64_t v82 = _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
          unint64_t v84 = v83;

          uint64_t v109 = sub_100719D44(v82, v84, (uint64_t *)&v110);
          sub_10096C8C0();
          swift_bridgeObjectRelease();
          id v85 = v106;
          v106(v74, v105);
          *(_WORD *)(v78 + 12) = 2112;
          swift_getErrorValue();
          id v86 = Error.prettyDescription.getter(v108);
          uint64_t v109 = (uint64_t)v86;
          sub_10096C8C0();
          *(void *)NSString v97 = v86;
          swift_errorRelease();
          swift_errorRelease();
          unint64_t v87 = v85;
          _os_log_impl((void *)&_mh_execute_header, v76, v77, "move of un-owned directory %{public}s to purgatory, ended with error %@", (uint8_t *)v78, 0x16u);
          sub_10002B7CC((uint64_t *)&unk_100ACCBC0);
          swift_arrayDestroy();
          v88 = v101;
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          uint64_t v75 = v105;
          swift_slowDealloc();

          ((void (*)(char *, uint64_t))v104)(v99, v100);
        }
        else
        {
          Swift::String v89 = v74;
          unint64_t v87 = v106;
          v106(v89, v75);
          swift_errorRelease();
          swift_errorRelease();

          ((void (*)(char *, uint64_t))v104)(v73, v53);
          v88 = v101;
        }
        sub_10015D9A8(0xD000000000000018, 0x8000000100996F90, 0xD00000000000001DLL, 0x8000000100996FB0);
        swift_willThrow();
        v87(v88, v75);
      }
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t sub_10015E668@<X0>(int a1@<W0>, BOOL *a2@<X8>)
{
  memset(&v8, 0, 28);
  memset(&v8.st_atimespec, 0, 112);
  uint64_t result = fstat(a1, &v8);
  BOOL v5 = 0;
  if (!result)
  {
    int st_mode = v8.st_mode;
    int v7 = sub_10096B520() & st_mode;
    uint64_t result = sub_10096B520();
    if (v7 == (unsigned __int16)result)
    {
      uint64_t result = fgetxattr(a1, "com.apple.fileprovider.detached-link#P", 0, 0, 0, 0);
      BOOL v5 = result >= 0;
    }
    else
    {
      BOOL v5 = 0;
    }
  }
  *a2 = v5;
  return result;
}

uint64_t sub_10015E758(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v74 = a3;
  uint64_t v76 = sub_10096AE50();
  uint64_t v79 = *(void *)(v76 - 8);
  uint64_t v7 = __chkstk_darwin(v76);
  uint64_t v9 = (char *)&v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v64 - v10;
  uint64_t v12 = sub_10096B480();
  uint64_t v77 = *(void *)(v12 - 8);
  uint64_t v78 = v12;
  uint64_t v13 = __chkstk_darwin(v12);
  unsigned __int8 v15 = (char *)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v64 - v16;
  uint64_t v18 = sub_10096AE10();
  uint64_t v20 = v19;
  uint64_t v75 = v4;
  uint64_t v81 = v4;
  uint64_t v82 = a1;
  uint64_t v21 = a1;
  uint64_t v83 = a2;
  *(_OWORD *)id v85 = xmmword_100974EA0;
  swift_bridgeObjectRetain();
  uint64_t result = sub_10084B790(4294967294, v18, v20, 0x200000, 0, 0, (uint64_t)v85, (uint64_t)sub_10016A2B0, (uint64_t)v80);
  id v71 = v9;
  uint64_t v72 = a2;
  uint64_t v23 = v79;
  uint64_t v24 = v76;
  uint64_t v73 = v21;
  uint64_t v70 = v15;
  unint64_t v25 = v85[1];
  if (v85[1] == 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v26 = v85[0];
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v28 = v72;
    uint64_t v27 = v73;
    if (v25)
    {
      uint64_t v69 = v26;
      id v29 = (id)fpfs_current_or_default_log();
      sub_10096B490();
      uint64_t v30 = v17;
      uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t))(v23 + 16);
      char v32 = v11;
      uint64_t v33 = v24;
      v31(v11, v28, v24);
      int v34 = v71;
      v31(v71, v27, v33);
      swift_bridgeObjectRetain();
      uint64_t v68 = v30;
      BOOL v35 = sub_10096B470();
      os_log_type_t v36 = sub_10096C5D0();
      int v37 = v36;
      if (os_log_type_enabled(v35, v36))
      {
        uint64_t v38 = swift_slowAlloc();
        int v66 = v37;
        uint64_t v39 = v38;
        uint64_t v67 = swift_slowAlloc();
        v85[0] = v67;
        *(_DWORD *)uint64_t v39 = 136315650;
        os_log_t v65 = v35;
        sub_10096AD20(&v86);
        unint64_t v41 = v40;
        id v42 = objc_msgSend(v40, "fp_shortDescription");

        uint64_t v43 = _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
        unint64_t v45 = v44;

        uint64_t v84 = sub_100719D44(v43, v45, v85);
        sub_10096C8C0();
        swift_bridgeObjectRelease();
        id v46 = *(void (**)(char *, uint64_t))(v79 + 8);
        v46(v32, v33);
        *(_WORD *)(v39 + 12) = 2080;
        uint64_t v79 = v39 + 14;
        sub_10096AD20((NSURL *)(v39 + 14));
        uint64_t v48 = v47;
        id v49 = objc_msgSend(v47, "fp_shortDescription");

        uint64_t v50 = _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
        unint64_t v52 = v51;

        uint64_t v84 = sub_100719D44(v50, v52, v85);
        sub_10096C8C0();
        uint64_t v28 = v72;
        swift_bridgeObjectRelease();
        v46(v71, v33);
        uint64_t v27 = v73;
        *(_WORD *)(v39 + 22) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v53 = v69;
        uint64_t v84 = sub_100719D44(v69, v25, v85);
        sub_10096C8C0();
        sub_10016A2D0(v53, v25);
        sub_10016A2D0(v53, v25);
        swift_bridgeObjectRelease();
        BOOL v35 = v65;
        _os_log_impl((void *)&_mh_execute_header, v65, (os_log_type_t)v66, "refreshing relocation symlink from %s to %s: %s", (uint8_t *)v39, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        id v54 = *(void (**)(char *, uint64_t))(v79 + 8);
        v54(v11, v33);
        v54(v34, v33);
        uint64_t v55 = v69;
        sub_10016A2D0(v69, v25);
        sub_10016A2D0(v55, v25);
      }

      v56 = *(void (**)(char *, uint64_t))(v77 + 8);
      v56(v68, v78);
      sub_10096AE10();
      uint64_t v57 = sub_10096BCF0();
      swift_bridgeObjectRelease();
      int v58 = unlink((const char *)(v57 + 32));
      swift_release();
      if (v58)
      {
        id v59 = (id)fpfs_current_or_default_log();
        uint64_t v60 = v70;
        sub_10096B490();
        id v61 = sub_10096B470();
        os_log_type_t v62 = sub_10096C5B0();
        if (os_log_type_enabled(v61, v62))
        {
          uint64_t v63 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)uint64_t v63 = 67109120;
          LODWORD(v85[0]) = sub_10096B4D0();
          sub_10096C8C0();
          _os_log_impl((void *)&_mh_execute_header, v61, v62, "couldn't remove existing symlink: %{darwin.errno}d", v63, 8u);
          swift_slowDealloc();
        }

        return ((uint64_t (*)(char *, uint64_t))v56)(v60, v78);
      }
      else
      {
        return sub_10015EFD0(v27, v28, v74);
      }
    }
  }
  return result;
}

uint64_t sub_10015EE18@<X0>(int a1@<W0>, void *a2@<X8>)
{
  uint64_t result = sub_10016A304(a1);
  if (result)
  {
    memset(&v12, 0, 28);
    memset(&v12.st_atimespec, 0, 112);
    sub_10096AE10();
    uint64_t v4 = sub_10096BCF0();
    swift_bridgeObjectRelease();
    int v5 = lstat((const char *)(v4 + 32), &v12);
    uint64_t result = swift_release();
    if (!v5)
    {
      int st_mode = v12.st_mode;
      int v7 = sub_10096B510() & st_mode;
      uint64_t result = sub_10096B510();
      if (v7 == (unsigned __int16)result)
      {
        memset(&v11, 0, 28);
        memset(&v11.st_atimespec, 0, 112);
        sub_10096AE10();
        uint64_t v8 = sub_10096BCF0();
        swift_bridgeObjectRelease();
        int v9 = stat((const char *)(v8 + 32), &v11);
        uint64_t result = swift_release();
        if (v9)
        {
          uint64_t v10 = "target of symlink doesn't exists";
LABEL_11:
          *a2 = 0xD000000000000020;
          a2[1] = (unint64_t)(v10 - 32) | 0x8000000000000000;
          return result;
        }
        if (v11.st_dev != v12.st_dev || v11.st_ino != v12.st_ino)
        {
          uint64_t v10 = "symlink points to the wrong item";
          goto LABEL_11;
        }
      }
    }
  }
  *a2 = 0;
  a2[1] = 0;
  return result;
}

uint64_t sub_10015EFD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v95 = a3;
  uint64_t v5 = sub_10096AE50();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v94 = (char *)v85 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v93 = (char *)v85 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)v85 - v12;
  __chkstk_darwin(v11);
  unsigned __int8 v15 = (char *)v85 - v14;
  uint64_t v16 = sub_10096B480();
  uint64_t v97 = *(void *)(v16 - 8);
  uint64_t v98 = v16;
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v19 = (char *)v85 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)v85 - v20;
  id v22 = (id)fpfs_current_or_default_log();
  sub_10096B490();
  uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  uint64_t v99 = a2;
  v23(v15, a2, v5);
  uint64_t v100 = a1;
  uint64_t v90 = v23;
  uint64_t v91 = v6 + 16;
  v23(v13, a1, v5);
  uint64_t v24 = sub_10096B470();
  os_log_type_t v25 = sub_10096C5D0();
  int v26 = v25;
  BOOL v27 = os_log_type_enabled(v24, v25);
  uint64_t v92 = v6;
  if (v27)
  {
    uint64_t v28 = swift_slowAlloc();
    os_log_t v87 = v24;
    uint64_t v29 = v28;
    v88 = (void (*)(void, void))swift_slowAlloc();
    id v101 = v88;
    *(_DWORD *)uint64_t v29 = 136446466;
    Swift::String v89 = v19;
    int v86 = v26;
    sub_10096AD20((NSURL *)&unk_100975000);
    uint64_t v31 = v30;
    id v32 = objc_msgSend(v30, "fp_shortDescription");

    uint64_t v33 = _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
    unint64_t v35 = v34;

    uint64_t v103 = sub_100719D44(v33, v35, (uint64_t *)&v101);
    v85[1] = &v104;
    sub_10096C8C0();
    swift_bridgeObjectRelease();
    os_log_type_t v36 = *(void (**)(char *, uint64_t))(v6 + 8);
    v36(v15, v5);
    *(_WORD *)(v29 + 12) = 2082;
    sub_10096AD20((NSURL *)0x822);
    uint64_t v38 = v37;
    id v39 = objc_msgSend(v37, "fp_shortDescription");

    uint64_t v40 = _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
    unint64_t v42 = v41;

    uint64_t v103 = sub_100719D44(v40, v42, (uint64_t *)&v101);
    sub_10096C8C0();
    uint64_t v19 = v89;
    swift_bridgeObjectRelease();
    uint64_t v43 = v13;
    uint64_t v44 = v5;
    unint64_t v45 = v36;
    v36(v43, v5);
    os_log_t v46 = v87;
    _os_log_impl((void *)&_mh_execute_header, v87, (os_log_type_t)v86, "create relocation symlink from %{public}s to %{public}s", (uint8_t *)v29, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    unint64_t v45 = *(void (**)(char *, uint64_t))(v6 + 8);
    v45(v15, v5);
    id v47 = v13;
    uint64_t v44 = v5;
    v45(v47, v5);
  }
  uint64_t v48 = *(void (**)(char *, uint64_t))(v97 + 8);
  v48(v21, v98);
  sub_10096AE10();
  sub_10096AE10();
  uint64_t v49 = sub_10096BCF0();
  swift_bridgeObjectRelease();
  uint64_t v50 = sub_10096BCF0();
  swift_bridgeObjectRelease();
  int v51 = symlink((const char *)(v49 + 32), (const char *)(v50 + 32));
  swift_release();
  swift_release();
  if (v51 && sub_10096B4D0() != 17)
  {
    id v58 = (id)fpfs_current_or_default_log();
    sub_10096B490();
    id v59 = v90;
    v90(v93, v99, v44);
    v59(v94, v100, v44);
    uint64_t v60 = sub_10096B470();
    os_log_type_t v61 = sub_10096C5B0();
    int v62 = v61;
    if (os_log_type_enabled(v60, v61))
    {
      uint64_t v63 = swift_slowAlloc();
      uint64_t v95 = v44;
      uint64_t v64 = v63;
      uint64_t v100 = swift_slowAlloc();
      id v101 = (void (*)(void, void))v100;
      *(_DWORD *)uint64_t v64 = 136315650;
      os_log_t v96 = v60;
      os_log_t v65 = v93;
      sub_10096AD20((NSURL *)&qword_100979FC0[8]);
      LODWORD(v99) = v62;
      uint64_t v67 = v66;
      Swift::String v89 = v19;
      id v68 = objc_msgSend(v66, "fp_shortDescription");
      uint64_t v69 = v94;
      uint64_t v70 = v45;
      v88 = (void (*)(void, void))v45;
      id v71 = v68;

      uint64_t v72 = _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
      unint64_t v74 = v73;

      uint64_t v103 = sub_100719D44(v72, v74, (uint64_t *)&v101);
      sub_10096C8C0();
      swift_bridgeObjectRelease();
      uint64_t v75 = v95;
      v70(v65, v95);
      *(_WORD *)(v64 + 12) = 2080;
      sub_10096AD20((NSURL *)0x820);
      uint64_t v77 = v76;
      id v78 = objc_msgSend(v76, "fp_shortDescription");

      uint64_t v79 = _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
      unint64_t v81 = v80;

      uint64_t v103 = sub_100719D44(v79, v81, (uint64_t *)&v101);
      sub_10096C8C0();
      swift_bridgeObjectRelease();
      v88(v69, v75);
      *(_WORD *)(v64 + 22) = 1024;
      LODWORD(v103) = sub_10096B4D0();
      sub_10096C8C0();
      os_log_t v82 = v96;
      _os_log_impl((void *)&_mh_execute_header, v96, (os_log_type_t)v99, "cannot create symlink from %s to %s: %{darwin.errno}d", (uint8_t *)v64, 0x1Cu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v83 = v89;
    }
    else
    {
      v45(v93, v44);
      v45(v94, v44);

      uint64_t v83 = v19;
    }
    return ((uint64_t (*)(char *, uint64_t))v48)(v83, v98);
  }
  else
  {
    uint64_t v52 = v99;
    uint64_t v53 = sub_10096AE10();
    uint64_t v55 = v54;
    __chkstk_darwin(v53);
    uint64_t v56 = v100;
    v85[-4] = v52;
    v85[-3] = v56;
    os_log_t v84 = v96;
    id v101 = 0;
    __int16 v102 = 256;
    swift_bridgeObjectRetain();
    uint64_t result = sub_10084B440(4294967294, v53, v55, 0x200000, 0, 0, (uint64_t)&v101, (uint64_t)sub_10016A2E4, (uint64_t)&v85[-6]);
    if ((v102 & 0x100) != 0) {
      __break(1u);
    }
    else {
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_10015F85C@<X0>(int a1@<W0>, char *a2@<X1>, uint64_t a3@<X2>, NSObject *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v104 = a5;
  os_log_t v97 = a4;
  uint64_t v99 = a3;
  int v98 = a1;
  uint64_t v6 = sub_10096AE50();
  uint64_t v105 = *(void *)(v6 - 8);
  uint64_t v106 = v6;
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v100 = (char *)v95 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (stat *)((char *)v95 - v10);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)v95 - v13;
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)v95 - v15;
  uint64_t v17 = sub_10096B480();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v102 = v17;
  uint64_t v103 = v18;
  uint64_t v19 = __chkstk_darwin(v17);
  id v101 = (char *)v95 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v23 = (char *)v95 - v22;
  __chkstk_darwin(v21);
  os_log_type_t v25 = (char *)v95 - v24;
  memset(&v108, 0, 28);
  memset(&v108.st_atimespec, 0, 112);
  int v26 = a2;
  sub_10096AE10();
  uint64_t v27 = sub_10096BCF0();
  swift_bridgeObjectRelease();
  LODWORD(a2) = stat((const char *)(v27 + 32), &v108);
  swift_release();
  if (a2)
  {
    id v28 = (id)fpfs_current_or_default_log();
    uint64_t v29 = v101;
    sub_10096B490();
    uint64_t v30 = v105;
    uint64_t v31 = v100;
    id v32 = v26;
    uint64_t v33 = v106;
    (*(void (**)(char *, char *, uint64_t))(v105 + 16))(v100, v32, v106);
    unint64_t v34 = sub_10096B470();
    os_log_type_t v35 = sub_10096C5B0();
    int v36 = v35;
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v37 = swift_slowAlloc();
      uint64_t v99 = swift_slowAlloc();
      *(void *)&v109.st_dev = v99;
      *(_DWORD *)uint64_t v37 = 136315394;
      os_log_t v97 = (os_log_t)(v37 + 4);
      int v98 = v36;
      sub_10096AD20((NSURL *)(v37 + 4));
      id v39 = v38;
      id v40 = objc_msgSend(v38, "fp_shortDescription");

      uint64_t v41 = _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
      unint64_t v43 = v42;

      id v110 = (char *)sub_100719D44(v41, v43, (uint64_t *)&v109.st_dev);
      sub_10096C8C0();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v30 + 8))(v31, v106);
      *(_WORD *)(v37 + 12) = 1024;
      LODWORD(v110) = sub_10096B4D0();
      sub_10096C8C0();
      _os_log_impl((void *)&_mh_execute_header, v34, (os_log_type_t)v98, "cannot stat target of symlink at %s: %{darwin.errno}d", (uint8_t *)v37, 0x12u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v30 + 8))(v31, v33);
    }

    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v103 + 8))(v29, v102);
    uint64_t v64 = v104;
    goto LABEL_19;
  }
  uint64_t v100 = v26;
  id v101 = v14;
  os_log_t v96 = v11;
  uint64_t v44 = v25;
  uint64_t v46 = v105;
  uint64_t v45 = v106;
  memset(&v109, 0, 28);
  memset(&v109.st_atimespec, 0, 112);
  uint64_t v47 = v99;
  sub_10096AE10();
  uint64_t v48 = sub_10096BCF0();
  swift_bridgeObjectRelease();
  int v49 = lstat((const char *)(v48 + 32), &v109);
  swift_release();
  if (!v49)
  {
    if (v108.st_dev != v109.st_dev || v108.st_ino != v109.st_ino)
    {
      id v70 = (id)fpfs_current_or_default_log();
      sub_10096B490();
      id v71 = *(void (**)(char *, char *, uint64_t))(v46 + 16);
      v71(v16, v100, v45);
      uint64_t v72 = v47;
      unint64_t v73 = v101;
      v71(v101, (char *)v72, v45);
      unint64_t v74 = sub_10096B470();
      os_log_type_t v75 = sub_10096C5B0();
      int v76 = v75;
      if (os_log_type_enabled(v74, v75))
      {
        uint64_t v77 = swift_slowAlloc();
        uint64_t v100 = (char *)swift_slowAlloc();
        id v110 = v100;
        *(_DWORD *)uint64_t v77 = 136315394;
        v95[1] = v77 + 4;
        int v98 = v76;
        sub_10096AD20((NSURL *)(v77 + 4));
        uint64_t v79 = v78;
        id v80 = objc_msgSend(v78, "fp_shortDescription");

        uint64_t v81 = _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
        os_log_t v97 = v74;
        uint64_t v99 = (uint64_t)v44;
        unint64_t v83 = v82;

        uint64_t v107 = sub_100719D44(v81, v83, (uint64_t *)&v110);
        os_log_t v96 = &v108;
        sub_10096C8C0();
        swift_bridgeObjectRelease();
        os_log_t v84 = *(void (**)(char *, uint64_t))(v46 + 8);
        uint64_t v85 = v106;
        v84(v16, v106);
        *(_WORD *)(v77 + 12) = 2080;
        uint64_t v105 = v77 + 14;
        sub_10096AD20((NSURL *)(v77 + 14));
        os_log_t v87 = v86;
        id v88 = objc_msgSend(v86, "fp_shortDescription");

        uint64_t v89 = _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
        unint64_t v91 = v90;

        uint64_t v107 = sub_100719D44(v89, v91, (uint64_t *)&v110);
        sub_10096C8C0();
        swift_bridgeObjectRelease();
        v84(v73, v85);
        os_log_t v92 = v97;
        _os_log_impl((void *)&_mh_execute_header, v97, (os_log_type_t)v98, "symlink at %s doesn't target %s", (uint8_t *)v77, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v103 + 8))(v99, v102);
      }
      else
      {
        uint64_t v93 = *(void (**)(char *, uint64_t))(v46 + 8);
        v93(v16, v45);
        v93(v73, v45);

        uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v103 + 8))(v44, v102);
      }
      goto LABEL_18;
    }
    _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
    sub_10096BCF0();
    swift_bridgeObjectRelease();
    fpfs_set_is_ignore_root();
    swift_release();
    NSString v65 = sub_10015A4E8();
    uint64_t v66 = _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
    uint64_t v68 = v67;

    if (v66 == 0xD00000000000002BLL && v68 == 0x8000000100997040)
    {
      swift_bridgeObjectRelease();
      uint64_t v69 = v104;
    }
    else
    {
      char v94 = sub_10096D2D0();
      swift_bridgeObjectRelease();
      uint64_t v69 = v104;
      if ((v94 & 1) == 0)
      {
LABEL_23:
        fpfs_fsetxattr();
        fpfs_fset_acl();
        uint64_t result = fpfs_fset_acl();
        *(void *)uint64_t v69 = 0;
        *(unsigned char *)(v69 + 8) = 0;
        return result;
      }
    }
    fpfs_fchflags();
    goto LABEL_23;
  }
  id v50 = (id)fpfs_current_or_default_log();
  int v51 = v23;
  sub_10096B490();
  uint64_t v52 = v96;
  (*(void (**)(stat *, uint64_t, uint64_t))(v46 + 16))(v96, v47, v45);
  uint64_t v53 = sub_10096B470();
  os_log_type_t v54 = sub_10096C5B0();
  if (os_log_type_enabled(v53, v54))
  {
    uint64_t v55 = swift_slowAlloc();
    id v101 = v51;
    uint64_t v56 = v55;
    uint64_t v100 = (char *)swift_slowAlloc();
    id v110 = v100;
    *(_DWORD *)uint64_t v56 = 136315394;
    uint64_t v99 = v56 + 4;
    sub_10096AD20((NSURL *)(v56 + 4));
    id v58 = v57;
    id v59 = objc_msgSend(v57, "fp_shortDescription");

    uint64_t v60 = _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
    unint64_t v62 = v61;

    uint64_t v107 = sub_100719D44(v60, v62, (uint64_t *)&v110);
    sub_10096C8C0();
    swift_bridgeObjectRelease();
    (*(void (**)(stat *, uint64_t))(v46 + 8))(v96, v45);
    *(_WORD *)(v56 + 12) = 1024;
    LODWORD(v107) = sub_10096B4D0();
    sub_10096C8C0();
    _os_log_impl((void *)&_mh_execute_header, v53, v54, "cannot stat relocated folder at %s: %{darwin.errno}d", (uint8_t *)v56, 0x12u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v103 + 8))(v101, v102);
  }
  else
  {
    (*(void (**)(stat *, uint64_t))(v46 + 8))(v52, v45);

    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v103 + 8))(v51, v102);
  }
LABEL_18:
  uint64_t v64 = v104;
LABEL_19:
  *(void *)uint64_t v64 = -1;
  *(unsigned char *)(v64 + 8) = 0;
  return result;
}

uint64_t sub_100160318(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v52 = a5;
  uint64_t v6 = v5;
  id v51 = a4;
  uint64_t v10 = sub_10096AE50();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10096B480();
  uint64_t v49 = *(void *)(v14 - 8);
  uint64_t v50 = v14;
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v17 = (id)fpfs_current_or_default_log();
  sub_10096B490();
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  uint64_t v47 = v10;
  v18(v13, a3, v10);
  uint64_t v48 = v16;
  uint64_t v19 = sub_10096B470();
  os_log_type_t v20 = sub_10096C5D0();
  int v21 = v20;
  BOOL v22 = os_log_type_enabled(v19, v20);
  uint64_t v53 = a1;
  uint64_t v54 = a2;
  if (v22)
  {
    os_log_t v45 = v19;
    uint64_t v23 = swift_slowAlloc();
    uint64_t v44 = swift_slowAlloc();
    uint64_t v56 = v44;
    *(_DWORD *)uint64_t v23 = 136446210;
    v42[1] = v23 + 4;
    int v43 = v21;
    uint64_t v24 = (uint8_t *)v23;
    sub_10096AD20((NSURL *)(v23 + 4));
    int v26 = v25;
    id v27 = objc_msgSend(v25, "fp_shortDescription");

    uint64_t v28 = _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
    uint64_t v46 = a3;
    unint64_t v30 = v29;

    uint64_t v55 = sub_100719D44(v28, v30, &v56);
    sub_10096C8C0();
    a3 = v46;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v47);
    os_log_t v31 = v45;
    _os_log_impl((void *)&_mh_execute_header, v45, (os_log_type_t)v43, "creating root at %{public}s", v24, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v47);
  }
  (*(void (**)(char *, uint64_t))(v49 + 8))(v48, v50);
  id v32 = v51;
  id v33 = [v51 nsDomain];
  id v34 = [v33 personaIdentifier];

  if (v34)
  {
    uint64_t v36 = _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
    uint64_t v38 = v37;
  }
  else
  {
    uint64_t v36 = 0;
    uint64_t v38 = 0;
  }
  __chkstk_darwin(v35);
  v42[-6] = v6;
  v42[-5] = v32;
  uint64_t v39 = v54;
  v42[-4] = v53;
  v42[-3] = v39;
  uint64_t v40 = v52;
  v42[-2] = a3;
  v42[-1] = v40;
  sub_10026D280(v36, v38, (uint64_t)sub_10016A3E0, (uint64_t)&v42[-8]);
  return swift_bridgeObjectRelease();
}

void sub_100160710(uint64_t a1, NSObject *a2, uint8_t *a3, uint8_t *a4, __darwin_ino64_t a5, unsigned char *a6)
{
  v731 = a6;
  __darwin_ino64_t v752 = a5;
  uint64_t v759 = (uint64_t)a4;
  v757 = a3;
  uint64_t v761 = a1;
  uint64_t v7 = sub_10002B7CC((uint64_t *)&unk_100ACB5E0);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  v730 = (uint8_t *)&v696 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  v729 = (char *)&v696 - v11;
  __chkstk_darwin(v10);
  v728 = (char *)&v696 - v12;
  uint64_t v13 = type metadata accessor for ItemMetadata();
  __chkstk_darwin(v13 - 8);
  uint64_t v742 = (uint64_t)&v696 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v723 = sub_10096A7B0();
  os_log_t v724 = *(os_log_t *)(v723 - 8);
  __chkstk_darwin(v723);
  v722 = (char *)&v696 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v746 = sub_10096B480();
  uint64_t v737 = *(void *)(v746 - 8);
  uint64_t v16 = __chkstk_darwin(v746);
  v711 = (uint8_t *)&v696 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v16);
  v758 = (uint8_t *)&v696 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  v713 = (char *)&v696 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  v725 = (char *)&v696 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  v712 = (char *)&v696 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  v740 = (char *)&v696 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  v738 = (char *)&v696 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  v744 = (char *)&v696 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  v735 = (char *)&v696 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  v719 = (char *)&v696 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  v715 = (char *)&v696 - v37;
  uint64_t v38 = __chkstk_darwin(v36);
  v714 = (char *)&v696 - v39;
  uint64_t v40 = __chkstk_darwin(v38);
  v721 = ((char *)&v696 - v41);
  uint64_t v42 = __chkstk_darwin(v40);
  v718 = (char *)&v696 - v43;
  __chkstk_darwin(v42);
  v720 = (char *)&v696 - v44;
  v762 = sub_10096AE50();
  os_log_t isa = (os_log_t)v762[-1].isa;
  Class v45 = isa[8].isa;
  uint64_t v46 = __chkstk_darwin(v762);
  v716 = (char *)&v696 - (((unint64_t)v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = __chkstk_darwin(v46);
  v734 = (char *)&v696 - v48;
  uint64_t v49 = __chkstk_darwin(v47);
  uint64_t v743 = (uint64_t)&v696 - v50;
  uint64_t v51 = __chkstk_darwin(v49);
  v739 = (char *)&v696 - v52;
  uint64_t v53 = __chkstk_darwin(v51);
  v717 = (char *)&v696 - v54;
  uint64_t v55 = __chkstk_darwin(v53);
  v736 = (char *)&v696 - v56;
  uint64_t v57 = __chkstk_darwin(v55);
  v726 = (char *)&v696 - v58;
  uint64_t v59 = __chkstk_darwin(v57);
  v755 = ((char *)&v696 - v60);
  uint64_t v61 = __chkstk_darwin(v59);
  v741 = (uint8_t *)&v696 - v62;
  uint64_t v63 = __chkstk_darwin(v61);
  v745 = (char *)&v696 - v64;
  __chkstk_darwin(v63);
  v748 = (uint8_t *)&v696 - v65;
  uint64_t v66 = sub_10096A630();
  __chkstk_darwin(v66 - 8);
  v750 = (char *)&v696 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0);
  v751 = sub_10096A650();
  v749 = (uint8_t *)v751[-1].isa;
  __chkstk_darwin(v751);
  v754 = (uint8_t *)&v696 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = sub_10002B7CC(&qword_100ACA8C0);
  uint64_t v70 = __chkstk_darwin(v69 - 8);
  v727 = ((char *)&v696 - ((v71 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v72 = __chkstk_darwin(v70);
  uint64_t v733 = (uint64_t)&v696 - v73;
  uint64_t v74 = __chkstk_darwin(v72);
  uint64_t v732 = (uint64_t)&v696 - v75;
  uint64_t v76 = __chkstk_darwin(v74);
  id v78 = (char *)&v696 - v77;
  uint64_t v79 = __chkstk_darwin(v76);
  uint64_t v81 = (uint8_t *)&v696 - v80;
  uint64_t v82 = __chkstk_darwin(v79);
  os_log_t v84 = ((char *)&v696 - v83);
  uint64_t v85 = __chkstk_darwin(v82);
  v753 = (uint8_t *)&v696 - v86;
  __chkstk_darwin(v85);
  id v88 = (char *)&v696 - v87;
  uint64_t v89 = self;
  id v90 = [v89 defaultManager];
  unint64_t v91 = v760;
  sub_10015D6AC(a2, (uint64_t)v88);
  v760 = v91;
  if (v91)
  {

    return;
  }
  os_log_t v709 = v84;
  v706 = v81;
  v704 = v78;
  id v707 = v89;
  v747 = a2;
  Class v703 = v45;
  id v710 = v90;
  os_log_t v92 = isa;
  os_log_t v94 = isa + 6;
  Class v93 = isa[6].isa;
  uint64_t v95 = v762;
  int v96 = ((uint64_t (*)(char *, uint64_t, NSObject *))v93)(v88, 1, v762);
  os_log_t v97 = v757;
  int v98 = v753;
  sub_10016A248((uint64_t)v757, (uint64_t)v753);
  if (v96 != 1 && ((unsigned int (*)(uint8_t *, uint64_t, NSObject *))v93)(v98, 1, v95) != 1)
  {
    sub_10002B770((uint64_t)v98, &qword_100ACA8C0);
    sub_10096A5E0();
    sub_10025BE48();
    sub_10016B7B8((unint64_t *)&qword_100ACB680, (void (*)(uint64_t))&type metadata accessor for CocoaError);
    id v110 = v754;
    uint64_t v111 = v751;
    sub_10096ABD0();
    sub_10096A4D0();
    (*((void (**)(uint8_t *, NSObject *))v749 + 1))(v110, v111);
    swift_willThrow();

    sub_10002B770((uint64_t)v88, &qword_100ACA8C0);
    return;
  }
  sub_10002B770((uint64_t)v98, &qword_100ACA8C0);
  uint64_t v99 = v754;
  if ((unint64_t)v759 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v100 = sub_10096CE70();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v100 = *(void *)((v759 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v101 = (uint64_t)v709;
  sub_10016A248((uint64_t)v97, (uint64_t)v709);
  if (v100 >= 1 && ((unsigned int (*)(uint64_t, uint64_t, NSObject *))v93)(v101, 1, v95) == 1)
  {
    sub_10002B770(v101, &qword_100ACA8C0);
    sub_10096A580();
    sub_10025BE48();
    sub_10016B7B8((unint64_t *)&qword_100ACB680, (void (*)(uint64_t))&type metadata accessor for CocoaError);
    uint64_t v102 = v751;
    sub_10096ABD0();
    sub_10096A4D0();
    (*((void (**)(uint8_t *, NSObject *))v749 + 1))(v99, v102);
    swift_willThrow();

    sub_10002B770((uint64_t)v88, &qword_100ACA8C0);
    return;
  }
  v708 = (uint64_t (*)(uint8_t *, uint64_t, NSObject *))v93;
  v705 = v88;
  sub_10002B770(v101, &qword_100ACA8C0);
  id v103 = [v747 provider];
  if (v103)
  {
    uint64_t v104 = v103;
    id v105 = [v103 identifier];

    uint64_t v106 = j___sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0_0();
    uint64_t v108 = v107;

    if (v106 == 0xD00000000000002BLL && v108 == 0x8000000100997040)
    {
      swift_bridgeObjectRelease();
      int v109 = 1;
    }
    else
    {
      int v109 = sub_10096D2D0();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    int v109 = 0;
  }
  v112 = v706;
  sub_10016A248((uint64_t)v97, (uint64_t)v706);
  int v113 = v708(v112, 1, v95);
  os_log_t v709 = v94;
  uint64_t v114 = v748;
  if (v113 == 1)
  {
    sub_10002B770((uint64_t)v112, &qword_100ACA8C0);
    LODWORD(v748) = 0;
    uint64_t v115 = v752;
  }
  else
  {
    ((void (*)(uint8_t *, uint8_t *, NSObject *))v92[4].isa)(v748, v112, v95);
    sub_10096AD20(v116);
    v118 = v117;
    uint64_t v115 = v752;
    sub_10096AD20(&v767);
    v120 = v119;
    id v121 = objc_msgSend(v118, "fp_relationshipToItemAtURL:", v119);

    LODWORD(v118) = sub_10025BE54((uint64_t)v121, 1);
    ((void (*)(uint8_t *, NSObject *))v92[1].isa)(v114, v95);
    LODWORD(v748) = v118 & v109;
  }
  id v122 = [v707 defaultManager];
  sub_10096AE10();
  NSString v123 = sub_10096BC00();
  swift_bridgeObjectRelease();
  unsigned int v124 = [v122 fileExistsAtPath:v123];

  if (!v124)
  {
    LODWORD(v722) = 0;
    v125 = (uint8_t *)v759;
    goto LABEL_28;
  }
  v125 = (uint8_t *)v759;
  if (v748)
  {
    LODWORD(v722) = 0;
LABEL_28:
    v129 = v758;
    v130 = v757;
    goto LABEL_29;
  }
  if (v708(v757, 1, v95) != 1)
  {
    sub_10096A5E0();
    sub_10025BE48();
    sub_10016B7B8((unint64_t *)&qword_100ACB680, (void (*)(uint64_t))&type metadata accessor for CocoaError);
    v137 = v751;
    sub_10096ABD0();
    sub_10096A4D0();
    (*((void (**)(uint8_t *, NSObject *))v749 + 1))(v99, v137);
    swift_willThrow();
    goto LABEL_105;
  }
  v126 = v760;
  v127 = (uint8_t *)sub_100169D04(v115, 1);
  v760 = v126;
  if (v126)
  {

    uint64_t v128 = (uint64_t)v705;
LABEL_25:
    sub_10002B770(v128, &qword_100ACA8C0);
    return;
  }
  if (!v127)
  {
    if (v109)
    {
      v341 = v718;
      sub_1006A75AC();
      v342 = v745;
      ((void (*)(char *, uint64_t, NSObject *))v92[2].isa)(v745, v115, v95);
      unint64_t v343 = (LOBYTE(v92[10].isa) + 16) & ~(unint64_t)LOBYTE(v92[10].isa);
      uint64_t v344 = swift_allocObject();
      unint64_t v345 = v344 + v343;
      v346 = v341;
      ((void (*)(unint64_t, char *, NSObject *))v92[4].isa)(v345, v342, v95);
      v347 = sub_10096B470();
      int v348 = sub_10096C5B0();
      __darwin_ino64_t v349 = swift_allocObject();
      *(unsigned char *)(v349 + 16) = 34;
      __darwin_ino64_t v350 = swift_allocObject();
      *(unsigned char *)(v350 + 16) = 8;
      uint64_t v351 = swift_allocObject();
      *(void *)(v351 + 16) = sub_10016A408;
      *(void *)(v351 + 24) = v344;
      __darwin_ino64_t v352 = swift_allocObject();
      *(void *)(v352 + 16) = sub_100121318;
      *(void *)(v352 + 24) = v351;
      sub_10002B7CC(&qword_100ACD798);
      uint64_t v353 = swift_allocObject();
      sub_10038FCB0(v353, 3);
      void *v354 = sub_10012133C;
      v354[1] = v349;
      v354[2] = sub_10012133C;
      v354[3] = v350;
      v354[4] = sub_100121338;
      v354[5] = v352;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v347, (os_log_type_t)v348))
      {
        LODWORD(v753) = v348;
        uint64_t v355 = sub_100719B90();
        v356 = (void *)swift_slowAlloc();
        v767.super.os_log_t isa = 0;
        v767._clients = v356;
        *(_WORD *)uint64_t v355 = 258;
        uint64_t v763 = v355 + 2;
        *(void *)&v766.st_dev = sub_10012133C;
        v766.st_ino = v349;
        v357 = v760;
        sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v766, (uint64_t)&v763, (uint64_t)&v767, (uint64_t)&v767._clients);
        if (v357) {
          goto LABEL_218;
        }
        v358 = v347;
        swift_release();
        *(void *)&v766.st_dev = sub_10012133C;
        v766.st_ino = v350;
        sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v766, (uint64_t)&v763, (uint64_t)&v767, (uint64_t)&v767._clients);
        swift_release();
        *(void *)&v766.st_dev = sub_100121338;
        v766.st_ino = v352;
        sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v766, (uint64_t)&v763, (uint64_t)&v767, (uint64_t)&v767._clients);
        v760 = 0;
        os_log_t v92 = isa;
        uint64_t v359 = v723;
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v358, (os_log_type_t)v753, "taking over domain root at %{public}s, the path already exists and is not owned by anyone", (uint8_t *)v355, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        sub_100719B98();

        (*(void (**)(char *, uint64_t))(v737 + 8))(v718, v746);
        v125 = (uint8_t *)v759;
        v129 = v758;
      }
      else
      {

        swift_release();
        swift_release();
        swift_release();
        (*(void (**)(char *, uint64_t))(v737 + 8))(v346, v746);
        os_log_t v92 = isa;
        v125 = (uint8_t *)v759;
        v129 = v758;
        uint64_t v359 = v723;
      }
      v766.st_dev = 17;
      sub_10025BE48();
      sub_10016B7B8((unint64_t *)&qword_100ACB660, (void (*)(uint64_t))&type metadata accessor for POSIXError);
      v499 = v722;
      sub_10096ABD0();
      v166 = (uint8_t *)sub_10096A790();
      ((void (*)(char *, uint64_t))v724[1].isa)(v499, v359);
      sub_10015D9A8(0xD000000000000020, 0x8000000100997280, 0xD00000000000001CLL, 0x80000001009972B0);
      LODWORD(v722) = 1;
      uint64_t v95 = v762;
      goto LABEL_137;
    }
    v753 = 0;
    sub_1006A75AC();
    v422 = v745;
    ((void (*)(char *, uint64_t, NSObject *))v92[2].isa)(v745, v115, v95);
    unint64_t v423 = (LOBYTE(v92[10].isa) + 16) & ~(unint64_t)LOBYTE(v92[10].isa);
    uint64_t v424 = swift_allocObject();
    ((void (*)(unint64_t, char *, NSObject *))v92[4].isa)(v424 + v423, v422, v95);
    v425 = sub_10096B470();
    os_log_type_t v426 = sub_10096C5C0();
    __darwin_ino64_t v427 = swift_allocObject();
    *(unsigned char *)(v427 + 16) = 34;
    __darwin_ino64_t v428 = swift_allocObject();
    *(unsigned char *)(v428 + 16) = 8;
    uint64_t v429 = swift_allocObject();
    *(void *)(v429 + 16) = sub_10016A408;
    *(void *)(v429 + 24) = v424;
    __darwin_ino64_t v430 = swift_allocObject();
    *(void *)(v430 + 16) = sub_100121318;
    *(void *)(v430 + 24) = v429;
    sub_10002B7CC(&qword_100ACD798);
    uint64_t v431 = swift_allocObject();
    sub_10038FCB0(v431, 3);
    void *v432 = sub_10012133C;
    v432[1] = v427;
    v432[2] = sub_10012133C;
    v432[3] = v428;
    v432[4] = sub_100121338;
    v432[5] = v430;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v425, v426))
    {
      os_log_t v724 = v425;
      uint64_t v433 = sub_100719B90();
      v434 = (void *)swift_slowAlloc();
      v767.super.os_log_t isa = 0;
      v767._clients = v434;
      *(_WORD *)uint64_t v433 = 258;
      uint64_t v763 = v433 + 2;
      *(void *)&v766.st_dev = sub_10012133C;
      v766.st_ino = v427;
      v435 = v760;
      sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v766, (uint64_t)&v763, (uint64_t)&v767, (uint64_t)&v767._clients);
      if (v435) {
        goto LABEL_218;
      }
      swift_release();
      *(void *)&v766.st_dev = sub_10012133C;
      v766.st_ino = v428;
      sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v766, (uint64_t)&v763, (uint64_t)&v767, (uint64_t)&v767._clients);
      swift_release();
      *(void *)&v766.st_dev = sub_100121338;
      v766.st_ino = v430;
      sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v766, (uint64_t)&v763, (uint64_t)&v767, (uint64_t)&v767._clients);
      v760 = 0;
      v129 = v758;
      swift_release();
      os_log_t v436 = v724;
      _os_log_impl((void *)&_mh_execute_header, v724, v426, "attempting create a domain at %{public}s, but that path already exists and is not owned by anyone", (uint8_t *)v433, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      sub_100719B98();

      (*(void (**)(char *, uint64_t))(v737 + 8))(v720, v746);
      uint64_t v437 = (uint64_t)v705;
      v438 = (void *)v752;
      uint64_t v95 = v762;
    }
    else
    {

      swift_release();
      swift_release();
      swift_release();
      (*(void (**)(char *, uint64_t))(v737 + 8))(v720, v746);
      uint64_t v437 = (uint64_t)v705;
      v438 = (void *)v752;
      uint64_t v95 = v762;
      v129 = v758;
    }
LABEL_179:
    v610 = v760;
    sub_10015DB60(v438);
    v760 = v610;
    v130 = v757;
    if (v610)
    {

      uint64_t v128 = v437;
      goto LABEL_25;
    }
    LODWORD(v722) = 0;
    v166 = v753;
    v125 = (uint8_t *)v759;
    goto LABEL_138;
  }
  v753 = v127;
  v166 = v127;
  v167 = v747;
  id v168 = [v747 providerDomainID];
  char v169 = sub_10025BE60(v166, v168);

  v129 = v758;
  if ((v169 & 1) == 0)
  {
    NSString v373 = sub_10015A4E8();
    id v374 = [v167 provider];
    if (v374)
    {
      v375 = v374;
      id v376 = [v374 identifier];

      id v377 = v373;
      LOBYTE(v375) = sub_10025BE60(v377, v376);

      if (v375)
      {
        id v378 = [v747 provider];
        if (v378)
        {
          v379 = v378;
          NSString v380 = sub_10015A5DC();
          id v381 = [v379 domainForIdentifier:v380 reason:0];

          if (v381)
          {
            sub_1006A75AC();
            v382 = v745;
            ((void (*)(char *, uint64_t, NSObject *))v92[2].isa)(v745, v115, v95);
            unint64_t v383 = (LOBYTE(v92[10].isa) + 16) & ~(unint64_t)LOBYTE(v92[10].isa);
            uint64_t v384 = swift_allocObject();
            ((void (*)(unint64_t, char *, NSObject *))v92[4].isa)(v384 + v383, v382, v95);
            uint64_t v385 = swift_allocObject();
            *(void *)(v385 + 16) = v166;
            v757 = (uint8_t *)swift_allocObject();
            v386 = v747;
            *((void *)v757 + 2) = v747;
            v758 = v166;
            v387 = v386;
            v762 = sub_10096B470();
            LODWORD(v759) = sub_10096C5C0();
            __darwin_ino64_t v388 = swift_allocObject();
            *(unsigned char *)(v388 + 16) = 34;
            os_log_t isa = (os_log_t)swift_allocObject();
            LOBYTE(isa[2].isa) = 8;
            uint64_t v389 = swift_allocObject();
            *(void *)(v389 + 16) = sub_10016A408;
            *(void *)(v389 + 24) = v384;
            __darwin_ino64_t v390 = swift_allocObject();
            *(void *)(v390 + 16) = sub_100121318;
            *(void *)(v390 + 24) = v389;
            __darwin_ino64_t v391 = swift_allocObject();
            *(unsigned char *)(v391 + 16) = 34;
            __darwin_ino64_t v392 = swift_allocObject();
            *(unsigned char *)(v392 + 16) = 8;
            uint64_t v393 = swift_allocObject();
            *(void *)(v393 + 16) = sub_10016B9E8;
            *(void *)(v393 + 24) = v385;
            v394 = swift_allocObject();
            v394[2].os_log_t isa = (Class)sub_100121318;
            v394[3].os_log_t isa = (Class)v393;
            v395 = (uint8_t *)swift_allocObject();
            v395[16] = 34;
            v396 = (uint8_t *)swift_allocObject();
            v396[16] = 8;
            uint64_t v397 = swift_allocObject();
            v398 = v757;
            *(void *)(v397 + 16) = sub_10016B9EC;
            *(void *)(v397 + 24) = v398;
            __darwin_ino64_t v399 = swift_allocObject();
            *(void *)(v399 + 16) = sub_100121318;
            *(void *)(v399 + 24) = v397;
            os_log_t v400 = isa;
            sub_10002B7CC(&qword_100ACD798);
            uint64_t v401 = swift_allocObject();
            sub_10038FCB0(v401, 9);
            void *v402 = sub_10012133C;
            v402[1] = v388;
            v402[2] = sub_10012133C;
            v402[3] = v400;
            v402[4] = sub_100121338;
            v402[5] = v390;
            v402[6] = sub_10012133C;
            v402[7] = v391;
            v402[8] = sub_10012133C;
            v402[9] = v392;
            v402[10] = sub_100121338;
            v402[11] = v394;
            v402[12] = sub_10012133C;
            v402[13] = v395;
            v402[14] = sub_10012133C;
            v402[15] = v396;
            v402[16] = sub_100121338;
            v402[17] = v399;
            swift_retain();
            swift_retain();
            swift_retain();
            swift_retain();
            swift_retain();
            swift_retain();
            swift_retain();
            swift_retain();
            swift_retain();
            swift_bridgeObjectRelease();
            if (os_log_type_enabled(v762, (os_log_type_t)v759))
            {
              v755 = v394;
              v757 = v395;
              uint64_t v403 = sub_100719B90();
              v404 = (void *)swift_slowAlloc();
              v767.super.os_log_t isa = 0;
              __darwin_ino64_t v752 = (__darwin_ino64_t)v404;
              v767._clients = v404;
              v753 = (uint8_t *)v403;
              *(_WORD *)uint64_t v403 = 770;
              uint64_t v763 = v403 + 2;
              *(void *)&v766.st_dev = sub_10012133C;
              v766.st_ino = v388;
              v405 = v760;
              sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v766, (uint64_t)&v763, (uint64_t)&v767, (uint64_t)&v767._clients);
              if (v405)
              {
LABEL_221:
                swift_errorRelease();
                __break(1u);
                return;
              }
              v760 = v396;
              swift_release();
              *(void *)&v766.st_dev = sub_10012133C;
              v766.st_ino = (__darwin_ino64_t)v400;
              sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v766, (uint64_t)&v763, (uint64_t)&v767, (uint64_t)&v767._clients);
              swift_release();
              *(void *)&v766.st_dev = sub_100121338;
              v766.st_ino = v390;
              sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v766, (uint64_t)&v763, (uint64_t)&v767, (uint64_t)&v767._clients);
              v406 = v754;
              v407 = v722;
              swift_release();
              *(void *)&v766.st_dev = sub_10012133C;
              v766.st_ino = v391;
              sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v766, (uint64_t)&v763, (uint64_t)&v767, (uint64_t)&v767._clients);
              id v408 = v710;
              v409 = v749;
              swift_release();
              *(void *)&v766.st_dev = sub_10012133C;
              v766.st_ino = v392;
              sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v766, (uint64_t)&v763, (uint64_t)&v767, (uint64_t)&v767._clients);
              swift_release();
              *(void *)&v766.st_dev = sub_100121338;
              v766.st_ino = (__darwin_ino64_t)v755;
              sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v766, (uint64_t)&v763, (uint64_t)&v767, (uint64_t)&v767._clients);
              id v410 = v408;
              swift_release();
              *(void *)&v766.st_dev = sub_10012133C;
              v766.st_ino = (__darwin_ino64_t)v757;
              sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v766, (uint64_t)&v763, (uint64_t)&v767, (uint64_t)&v767._clients);
              swift_release();
              *(void *)&v766.st_dev = sub_10012133C;
              v766.st_ino = (__darwin_ino64_t)v760;
              sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v766, (uint64_t)&v763, (uint64_t)&v767, (uint64_t)&v767._clients);
              v411 = v714;
              swift_release();
              *(void *)&v766.st_dev = sub_100121338;
              v766.st_ino = v399;
              sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v766, (uint64_t)&v763, (uint64_t)&v767, (uint64_t)&v767._clients);
              swift_release();
              v412 = v762;
              _os_log_impl((void *)&_mh_execute_header, v762, (os_log_type_t)v759, "attempting create a domain root at %{public}s, but that path already exists and is owned by existing domain %{public}s, expected %{public}s", v753, 0x20u);
              swift_arrayDestroy();
              swift_slowDealloc();
              sub_100719B98();

              (*(void (**)(char *, uint64_t))(v737 + 8))(v411, v746);
            }
            else
            {

              swift_release();
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              (*(void (**)(char *, uint64_t))(v737 + 8))(v714, v746);
              id v410 = v710;
              v409 = v749;
              v406 = v754;
              v407 = v722;
            }
            v766.st_dev = 17;
            sub_10025BE48();
            sub_10016B7B8((unint64_t *)&qword_100ACB660, (void (*)(uint64_t))&type metadata accessor for POSIXError);
            uint64_t v611 = v723;
            sub_10096ABD0();
            v612 = (void *)sub_10096A790();
            ((void (*)(char *, uint64_t))v724[1].isa)(v407, v611);
            sub_10015D9A8(0xD00000000000001DLL, 0x8000000100997360, 0xD00000000000001BLL, 0x8000000100997380);

            sub_10096A5E0();
            sub_10025BE48();
            sub_10016B7B8((unint64_t *)&qword_100ACB680, (void (*)(uint64_t))&type metadata accessor for CocoaError);
            v613 = v751;
            sub_10096ABD0();
            sub_10096A4D0();
            (*((void (**)(uint8_t *, NSObject *))v409 + 1))(v406, v613);
            swift_willThrow();
            v614 = v758;

            goto LABEL_106;
          }
        }
        sub_1006A75AC();
        v572 = v745;
        ((void (*)(char *, uint64_t, NSObject *))v92[2].isa)(v745, v115, v95);
        unint64_t v573 = (LOBYTE(v92[10].isa) + 16) & ~(unint64_t)LOBYTE(v92[10].isa);
        uint64_t v574 = swift_allocObject();
        ((void (*)(unint64_t, char *, NSObject *))v92[4].isa)(v574 + v573, v572, v95);
        uint64_t v575 = swift_allocObject();
        *(void *)(v575 + 16) = v166;
        uint64_t v576 = swift_allocObject();
        v577 = v747;
        *(void *)(v576 + 16) = v747;
        v706 = v166;
        v578 = v577;
        v721 = sub_10096B470();
        LODWORD(v720) = sub_10096C5C0();
        uint64_t v579 = swift_allocObject();
        *(unsigned char *)(v579 + 16) = 34;
        uint64_t v701 = swift_allocObject();
        *(unsigned char *)(v701 + 16) = 8;
        uint64_t v580 = swift_allocObject();
        *(void *)(v580 + 16) = sub_10016A408;
        *(void *)(v580 + 24) = v574;
        uint64_t v581 = swift_allocObject();
        *(void *)(v581 + 16) = sub_100121318;
        *(void *)(v581 + 24) = v580;
        v718 = (char *)swift_allocObject();
        v718[16] = 34;
        uint64_t v582 = swift_allocObject();
        *(unsigned char *)(v582 + 16) = 8;
        uint64_t v583 = swift_allocObject();
        *(void *)(v583 + 16) = sub_10016B62C;
        *(void *)(v583 + 24) = v575;
        uint64_t v584 = swift_allocObject();
        *(void *)(v584 + 16) = sub_100121318;
        *(void *)(v584 + 24) = v583;
        uint64_t v585 = swift_allocObject();
        *(unsigned char *)(v585 + 16) = 34;
        uint64_t v586 = swift_allocObject();
        *(unsigned char *)(v586 + 16) = 8;
        uint64_t v587 = swift_allocObject();
        *(void *)(v587 + 16) = sub_10016B648;
        *(void *)(v587 + 24) = v576;
        uint64_t v588 = swift_allocObject();
        *(void *)(v588 + 16) = sub_100121318;
        *(void *)(v588 + 24) = v587;
        __darwin_ino64_t v589 = v585;
        sub_10002B7CC(&qword_100ACD798);
        uint64_t v590 = swift_allocObject();
        sub_10038FCB0(v590, 9);
        void *v591 = sub_10012133C;
        v591[1] = v579;
        __darwin_ino64_t v592 = v701;
        v591[2] = sub_10012133C;
        v591[3] = v592;
        v591[4] = sub_100121338;
        v591[5] = v581;
        v593 = v718;
        v591[6] = sub_10012133C;
        v591[7] = v593;
        v591[8] = sub_10012133C;
        v591[9] = v582;
        v591[10] = sub_100121338;
        v591[11] = v584;
        v591[12] = sub_10012133C;
        v591[13] = v589;
        v591[14] = sub_10012133C;
        v591[15] = v586;
        v591[16] = sub_100121338;
        v591[17] = v588;
        v714 = (char *)v579;
        __darwin_ino64_t v594 = v592;
        swift_retain();
        swift_retain();
        __darwin_ino64_t v702 = v581;
        swift_retain();
        swift_retain();
        __darwin_ino64_t v595 = v582;
        v596 = (uint8_t *)v586;
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_bridgeObjectRelease();
        if (os_log_type_enabled(v721, (os_log_type_t)v720))
        {
          __darwin_ino64_t v697 = v584;
          __darwin_ino64_t v700 = v588;
          __darwin_ino64_t v597 = v589;
          uint64_t v598 = sub_100719B90();
          v599 = (void *)swift_slowAlloc();
          v767.super.os_log_t isa = 0;
          v698 = v599;
          v767._clients = v599;
          v699 = (uint8_t *)v598;
          *(_WORD *)uint64_t v598 = 770;
          uint64_t v763 = v598 + 2;
          *(void *)&v766.st_dev = sub_10012133C;
          v766.st_ino = (__darwin_ino64_t)v714;
          v600 = v760;
          sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v766, (uint64_t)&v763, (uint64_t)&v767, (uint64_t)&v767._clients);
          v129 = v758;
          if (v600) {
            goto LABEL_218;
          }
          v760 = v596;
          swift_release();
          *(void *)&v766.st_dev = sub_10012133C;
          v766.st_ino = v594;
          sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v766, (uint64_t)&v763, (uint64_t)&v767, (uint64_t)&v767._clients);
          swift_release();
          *(void *)&v766.st_dev = sub_100121338;
          v766.st_ino = v702;
          sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v766, (uint64_t)&v763, (uint64_t)&v767, (uint64_t)&v767._clients);
          swift_release();
          *(void *)&v766.st_dev = sub_10012133C;
          v766.st_ino = (__darwin_ino64_t)v718;
          sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v766, (uint64_t)&v763, (uint64_t)&v767, (uint64_t)&v767._clients);
          swift_release();
          *(void *)&v766.st_dev = sub_10012133C;
          v766.st_ino = v595;
          sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v766, (uint64_t)&v763, (uint64_t)&v767, (uint64_t)&v767._clients);
          v438 = (void *)v752;
          uint64_t v95 = v762;
          swift_release();
          *(void *)&v766.st_dev = sub_100121338;
          v766.st_ino = v697;
          sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v766, (uint64_t)&v763, (uint64_t)&v767, (uint64_t)&v767._clients);
          os_log_t v601 = v724;
          swift_release();
          *(void *)&v766.st_dev = sub_10012133C;
          v766.st_ino = v597;
          sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v766, (uint64_t)&v763, (uint64_t)&v767, (uint64_t)&v767._clients);
          swift_release();
          *(void *)&v766.st_dev = sub_10012133C;
          v766.st_ino = (__darwin_ino64_t)v760;
          sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v766, (uint64_t)&v763, (uint64_t)&v767, (uint64_t)&v767._clients);
          v602 = v715;
          swift_release();
          *(void *)&v766.st_dev = sub_100121338;
          v766.st_ino = v700;
          sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v766, (uint64_t)&v763, (uint64_t)&v767, (uint64_t)&v767._clients);
          v760 = 0;
          swift_release();
          v603 = v721;
          _os_log_impl((void *)&_mh_execute_header, v721, (os_log_type_t)v720, "attempting create a domain root at %{public}s, but that path already exists and is owned by missing domain %{public}s, expected %{public}s", v699, 0x20u);
          swift_arrayDestroy();
          swift_slowDealloc();
          sub_100719B98();

          (*(void (**)(char *, uint64_t))(v737 + 8))(v602, v746);
        }
        else
        {

          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          (*(void (**)(char *, uint64_t))(v737 + 8))(v715, v746);
          v438 = (void *)v752;
          uint64_t v95 = v762;
          v129 = v758;
          os_log_t v601 = v724;
        }
        v766.st_dev = 17;
        sub_10025BE48();
        sub_10016B7B8((unint64_t *)&qword_100ACB660, (void (*)(uint64_t))&type metadata accessor for POSIXError);
        v607 = v722;
        uint64_t v608 = v723;
        sub_10096ABD0();
        v609 = (void *)sub_10096A790();
        ((void (*)(char *, uint64_t))v601[1].isa)(v607, v608);
        sub_10015D9A8(0xD00000000000001CLL, 0x8000000100997320, 0xD00000000000001ALL, 0x8000000100997340);

        uint64_t v437 = (uint64_t)v705;
        os_log_t v92 = isa;
        goto LABEL_179;
      }
    }
    else
    {
    }
    sub_1006A75AC();
    v467 = v745;
    ((void (*)(char *, uint64_t, NSObject *))v92[2].isa)(v745, v115, v95);
    unint64_t v468 = (LOBYTE(v92[10].isa) + 16) & ~(unint64_t)LOBYTE(v92[10].isa);
    uint64_t v469 = swift_allocObject();
    ((void (*)(unint64_t, char *, NSObject *))v92[4].isa)(v469 + v468, v467, v95);
    uint64_t v470 = swift_allocObject();
    *(void *)(v470 + 16) = v166;
    uint64_t v471 = swift_allocObject();
    v472 = v747;
    *(void *)(v471 + 16) = v747;
    v757 = v166;
    v473 = v472;
    os_log_t isa = (os_log_t)sub_10096B470();
    LODWORD(v759) = sub_10096C5C0();
    v762 = swift_allocObject();
    LOBYTE(v762[2].isa) = 34;
    __darwin_ino64_t v474 = swift_allocObject();
    *(unsigned char *)(v474 + 16) = 8;
    uint64_t v475 = swift_allocObject();
    *(void *)(v475 + 16) = sub_10016A408;
    *(void *)(v475 + 24) = v469;
    __darwin_ino64_t v476 = swift_allocObject();
    *(void *)(v476 + 16) = sub_100121318;
    *(void *)(v476 + 24) = v475;
    __darwin_ino64_t v477 = swift_allocObject();
    *(unsigned char *)(v477 + 16) = 34;
    __darwin_ino64_t v478 = swift_allocObject();
    *(unsigned char *)(v478 + 16) = 8;
    uint64_t v479 = swift_allocObject();
    *(void *)(v479 + 16) = sub_10016B9E8;
    *(void *)(v479 + 24) = v470;
    uint64_t v480 = swift_allocObject();
    *(void *)(v480 + 16) = sub_100121318;
    *(void *)(v480 + 24) = v479;
    v481 = (uint8_t *)swift_allocObject();
    v481[16] = 34;
    __darwin_ino64_t v482 = swift_allocObject();
    *(unsigned char *)(v482 + 16) = 8;
    uint64_t v483 = swift_allocObject();
    *(void *)(v483 + 16) = sub_10016B9EC;
    *(void *)(v483 + 24) = v471;
    v484 = swift_allocObject();
    v484[2].os_log_t isa = (Class)sub_100121318;
    v484[3].os_log_t isa = (Class)v483;
    sub_10002B7CC(&qword_100ACD798);
    uint64_t v485 = swift_allocObject();
    sub_10038FCB0(v485, 9);
    v486 = v762;
    void *v487 = sub_10012133C;
    v487[1] = v486;
    v487[2] = sub_10012133C;
    v487[3] = v474;
    v487[4] = sub_100121338;
    v487[5] = v476;
    v487[6] = sub_10012133C;
    v487[7] = v477;
    v487[8] = sub_10012133C;
    v487[9] = v478;
    v487[10] = sub_100121338;
    v487[11] = v480;
    v487[12] = sub_10012133C;
    v487[13] = v481;
    v487[14] = sub_10012133C;
    v487[15] = v482;
    v487[16] = sub_100121338;
    v487[17] = v484;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v758 = v481;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    v488 = isa;
    if (os_log_type_enabled(isa, (os_log_type_t)v759))
    {
      v748 = (uint8_t *)v480;
      v755 = v484;
      uint64_t v489 = sub_100719B90();
      v490 = (void *)swift_slowAlloc();
      v767.super.os_log_t isa = 0;
      __darwin_ino64_t v752 = (__darwin_ino64_t)v490;
      v767._clients = v490;
      v753 = (uint8_t *)v489;
      *(_WORD *)uint64_t v489 = 770;
      uint64_t v763 = v489 + 2;
      *(void *)&v766.st_dev = sub_10012133C;
      v766.st_ino = (__darwin_ino64_t)v762;
      v491 = v760;
      sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v766, (uint64_t)&v763, (uint64_t)&v767, (uint64_t)&v767._clients);
      if (v491)
      {
LABEL_219:
        swift_errorRelease();
        __break(1u);
        swift_errorRelease();
        __break(1u);
        goto LABEL_220;
      }
      swift_release();
      *(void *)&v766.st_dev = sub_10012133C;
      v766.st_ino = v474;
      sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v766, (uint64_t)&v763, (uint64_t)&v767, (uint64_t)&v767._clients);
      swift_release();
      *(void *)&v766.st_dev = sub_100121338;
      v766.st_ino = v476;
      sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v766, (uint64_t)&v763, (uint64_t)&v767, (uint64_t)&v767._clients);
      swift_release();
      *(void *)&v766.st_dev = sub_10012133C;
      v766.st_ino = v477;
      sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v766, (uint64_t)&v763, (uint64_t)&v767, (uint64_t)&v767._clients);
      swift_release();
      *(void *)&v766.st_dev = sub_10012133C;
      v766.st_ino = v478;
      sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v766, (uint64_t)&v763, (uint64_t)&v767, (uint64_t)&v767._clients);
      swift_release();
      *(void *)&v766.st_dev = sub_100121338;
      v766.st_ino = (__darwin_ino64_t)v748;
      sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v766, (uint64_t)&v763, (uint64_t)&v767, (uint64_t)&v767._clients);
      swift_release();
      *(void *)&v766.st_dev = sub_10012133C;
      v766.st_ino = (__darwin_ino64_t)v758;
      sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v766, (uint64_t)&v763, (uint64_t)&v767, (uint64_t)&v767._clients);
      swift_release();
      *(void *)&v766.st_dev = sub_10012133C;
      v766.st_ino = v482;
      sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v766, (uint64_t)&v763, (uint64_t)&v767, (uint64_t)&v767._clients);
      v492 = v754;
      v493 = v722;
      v494 = v721;
      swift_release();
      *(void *)&v766.st_dev = sub_100121338;
      v766.st_ino = (__darwin_ino64_t)v755;
      sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v766, (uint64_t)&v763, (uint64_t)&v767, (uint64_t)&v767._clients);
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v488, (os_log_type_t)v759, "attempting create a domain root at %{public}s, but that path already exists and is owned by a different provider %{public}s, expected %{public}s", v753, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      sub_100719B98();

      (*(void (**)(NSObject *, uint64_t))(v737 + 8))(v494, v746);
      uint64_t v132 = (uint64_t)v705;
    }
    else
    {

      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      (*(void (**)(NSObject *, uint64_t))(v737 + 8))(v721, v746);
      uint64_t v132 = (uint64_t)v705;
      v492 = v754;
      v493 = v722;
    }
    v766.st_dev = 17;
    sub_10025BE48();
    sub_10016B7B8((unint64_t *)&qword_100ACB660, (void (*)(uint64_t))&type metadata accessor for POSIXError);
    uint64_t v495 = v723;
    sub_10096ABD0();
    v496 = (void *)sub_10096A790();
    ((void (*)(char *, uint64_t))v724[1].isa)(v493, v495);
    sub_10015D9A8(0xD000000000000020, 0x80000001009972D0, 0xD00000000000001ELL, 0x8000000100997300);

    sub_10096A5E0();
    sub_10025BE48();
    sub_10016B7B8((unint64_t *)&qword_100ACB680, (void (*)(uint64_t))&type metadata accessor for CocoaError);
    v497 = v751;
    sub_10096ABD0();
    sub_10096A4D0();
    (*((void (**)(uint8_t *, NSObject *))v749 + 1))(v492, v497);
    swift_willThrow();
    v498 = v757;

LABEL_38:
    sub_10002B770(v132, &qword_100ACA8C0);
    return;
  }

  LODWORD(v722) = 0;
  v125 = (uint8_t *)v759;
LABEL_137:
  v130 = v757;
LABEL_138:

LABEL_29:
  id v131 = [v747 provider];
  uint64_t v132 = (uint64_t)v705;
  if (v131)
  {
    v133 = v131;
    id v134 = [v131 descriptor];

    id v135 = [v134 localizedName];
    uint64_t v723 = _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
    os_log_t v724 = v136;
  }
  else
  {
    uint64_t v723 = 0;
    os_log_t v724 = (os_log_t)0xE000000000000000;
  }
  uint64_t v138 = (uint64_t)v704;
  sub_10016A248((uint64_t)v130, (uint64_t)v704);
  if (v708((uint8_t *)v138, 1, v95) == 1)
  {
    sub_10002B770(v138, &qword_100ACA8C0);
    v139 = v760;
    goto LABEL_42;
  }
  v140 = v741;
  v753 = (uint8_t *)v92[4].isa;
  ((void (*)(uint8_t *, uint64_t, NSObject *))v753)(v741, v138, v95);
  id v141 = [v707 defaultManager];
  sub_10096AE10();
  NSString v142 = sub_10096BC00();
  swift_bridgeObjectRelease();
  unsigned int v143 = [v141 fileExistsAtPath:v142];

  if (v143)
  {
    v144 = v760;
    v145 = (uint8_t *)sub_100169D04((uint64_t)v140, 1);
    v139 = v144;
    v125 = (uint8_t *)v759;
    if (v144)
    {
      ((void (*)(uint8_t *, NSObject *))v92[1].isa)(v140, v95);
      swift_bridgeObjectRelease();
      goto LABEL_38;
    }
    v198 = v145;
    if (!v145)
    {
      ((void (*)(uint8_t *, NSObject *))v92[1].isa)(v741, v95);
      goto LABEL_41;
    }
    id v199 = [v747 providerDomainID];
    char v200 = sub_10025BE60(v198, v199);

    v201 = v741;
    if ((v200 & 1) == 0)
    {
      v760 = 0;
      swift_bridgeObjectRelease();
      uint64_t v759 = (uint64_t)v198;
      j___sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
      NSString v439 = sub_10096BC00();
      swift_bridgeObjectRelease();
      id v440 = objc_msgSend(v439, "fp_obfuscatedProviderDomainID");

      uint64_t v441 = _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
      uint64_t v443 = v442;

      sub_1006A75AC();
      v444 = v745;
      v757 = (uint8_t *)v92[2].isa;
      ((void (*)(char *, uint8_t *, NSObject *))v757)(v745, v201, v95);
      v758 = (uint8_t *)&v92[2];
      unint64_t v445 = (LOBYTE(v92[10].isa) + 16) & ~(unint64_t)LOBYTE(v92[10].isa);
      uint64_t v446 = swift_allocObject();
      ((void (*)(unint64_t, char *, NSObject *))v753)(v446 + v445, v444, v95);
      uint64_t v447 = swift_allocObject();
      *(void *)(v447 + 16) = v441;
      *(void *)(v447 + 24) = v443;
      v755 = sub_10096B470();
      LODWORD(v761) = sub_10096C5C0();
      __darwin_ino64_t v448 = swift_allocObject();
      *(unsigned char *)(v448 + 16) = 34;
      __darwin_ino64_t v449 = swift_allocObject();
      *(unsigned char *)(v449 + 16) = 8;
      uint64_t v450 = swift_allocObject();
      *(void *)(v450 + 16) = sub_10016A408;
      *(void *)(v450 + 24) = v446;
      __darwin_ino64_t v451 = swift_allocObject();
      *(void *)(v451 + 16) = sub_100121318;
      *(void *)(v451 + 24) = v450;
      uint64_t v452 = swift_allocObject();
      *(unsigned char *)(v452 + 16) = 34;
      __darwin_ino64_t v453 = swift_allocObject();
      *(unsigned char *)(v453 + 16) = 8;
      v454 = v755;
      uint64_t v455 = swift_allocObject();
      *(void *)(v455 + 16) = DocumentWharf.label.getter;
      *(void *)(v455 + 24) = v447;
      uint64_t v456 = swift_allocObject();
      *(void *)(v456 + 16) = sub_100121318;
      *(void *)(v456 + 24) = v455;
      sub_10002B7CC(&qword_100ACD798);
      uint64_t v457 = swift_allocObject();
      sub_10038FCB0(v457, 6);
      void *v458 = sub_10012133C;
      v458[1] = v448;
      v458[2] = sub_10012133C;
      v458[3] = v449;
      v458[4] = sub_100121338;
      v458[5] = v451;
      v458[6] = sub_10012133C;
      v458[7] = v452;
      v458[8] = sub_10012133C;
      v458[9] = v453;
      v458[10] = sub_100121338;
      v458[11] = v456;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v454, (os_log_type_t)v761))
      {
        v753 = (uint8_t *)v456;
        __darwin_ino64_t v752 = v452;
        uint64_t v459 = sub_100719B90();
        v460 = (void *)swift_slowAlloc();
        v767.super.os_log_t isa = 0;
        v767._clients = v460;
        *(_WORD *)uint64_t v459 = 514;
        uint64_t v763 = v459 + 2;
        *(void *)&v766.st_dev = sub_10012133C;
        v766.st_ino = v448;
        v461 = v760;
        sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v766, (uint64_t)&v763, (uint64_t)&v767, (uint64_t)&v767._clients);
        if (v461) {
          goto LABEL_218;
        }
        v760 = (uint8_t *)v459;
        swift_release();
        *(void *)&v766.st_dev = sub_10012133C;
        v766.st_ino = v449;
        sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v766, (uint64_t)&v763, (uint64_t)&v767, (uint64_t)&v767._clients);
        swift_release();
        *(void *)&v766.st_dev = sub_100121338;
        v766.st_ino = v451;
        sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v766, (uint64_t)&v763, (uint64_t)&v767, (uint64_t)&v767._clients);
        v462 = v754;
        swift_release();
        *(void *)&v766.st_dev = sub_10012133C;
        v766.st_ino = v752;
        sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v766, (uint64_t)&v763, (uint64_t)&v767, (uint64_t)&v767._clients);
        swift_release();
        *(void *)&v766.st_dev = sub_10012133C;
        v766.st_ino = v453;
        sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v766, (uint64_t)&v763, (uint64_t)&v767, (uint64_t)&v767._clients);
        v463 = v719;
        swift_release();
        *(void *)&v766.st_dev = sub_100121338;
        v766.st_ino = (__darwin_ino64_t)v753;
        sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v766, (uint64_t)&v763, (uint64_t)&v767, (uint64_t)&v767._clients);
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v454, (os_log_type_t)v761, "Attempting to import existing domain at %{public}s into new domain %{public}s", v760, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        sub_100719B98();

        (*(void (**)(char *, uint64_t))(v737 + 8))(v463, v746);
        id v464 = v710;
      }
      else
      {

        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        (*(void (**)(char *, uint64_t))(v737 + 8))(v719, v746);
        id v464 = v710;
        v462 = v754;
      }
      sub_10096A5F0();
      sub_10002B7CC(&qword_100ACE1E0);
      uint64_t v504 = swift_allocObject();
      uint64_t v505 = sub_10038FCB0(v504, 1);
      v507 = v506;
      v508 = v506 + 2;
      uint64_t *v506 = _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
      v507[1] = v509;
      v510 = v762;
      v507[5] = (uint64_t)v762;
      v511 = sub_10009C958(v508);
      v512 = v741;
      ((void (*)(uint64_t *, uint8_t *, NSObject *))v757)(v511, v741, v510);
      v513._uint64_t countAndFlagsBits = v505;
      uint64_t countAndFlagsBits = Filename.init(rawValue:)(v513).rawValue._countAndFlagsBits;
      sub_10004621C(countAndFlagsBits);
      sub_10016B7B8((unint64_t *)&qword_100ACB680, (void (*)(uint64_t))&type metadata accessor for CocoaError);
      v515 = v751;
      sub_10096ABD0();
      sub_10096A4D0();
      (*((void (**)(uint8_t *, NSObject *))v749 + 1))(v462, v515);
      swift_willThrow();

      ((void (*)(uint8_t *, NSObject *))v92[1].isa)(v512, v510);
      goto LABEL_106;
    }
    ((void (*)(uint8_t *, NSObject *))v92[1].isa)(v741, v95);
  }
  else
  {
    ((void (*)(uint8_t *, NSObject *))v92[1].isa)(v140, v95);
    v139 = v760;
  }
  v125 = (uint8_t *)v759;
LABEL_41:
  v129 = v758;
LABEL_42:
  unint64_t v146 = swift_bridgeObjectRetain();
  v753 = (uint8_t *)sub_100169B80(v146);
  if (!v753)
  {
LABEL_53:
    swift_bridgeObjectRelease();
    sub_10015B7E0(v747);
    if (v139)
    {

      goto LABEL_56;
    }
    uint64_t v162 = v732;
    sub_10016A248((uint64_t)v705, v732);
    v163 = v762;
    if (v708((uint8_t *)v162, 1, v762) == 1)
    {
      sub_10002B770(v162, &qword_100ACA8C0);
      os_log_t v164 = isa;
    }
    else
    {
      os_log_t v164 = isa;
      v202 = v726;
      ((void (*)(char *, uint64_t, NSObject *))isa[4].isa)(v726, v162, v163);
      sub_10096AD20(v203);
      v205 = v204;
      __darwin_ino64_t v165 = v752;
      sub_10096AD20(&v767);
      v207 = v206;
      id v208 = objc_msgSend(v205, "fp_relationshipToItemAtURL:", v206);

      if (sub_10025BE54((uint64_t)v208, 1))
      {
        ((void (*)(char *, NSObject *))v164[1].isa)(v202, v163);
LABEL_70:
        uint64_t v210 = v733;
        sub_10016A248((uint64_t)v757, v733);
        if (v708((uint8_t *)v210, 1, v163) == 1)
        {
          sub_10002B770(v210, &qword_100ACA8C0);
          unsigned char *v731 = 0;
          v211 = *(void **)(v761 + OBJC_IVAR____TtC9libfssync20InternalPathsManager_volume);
          if (v211)
          {
            *(void *)&v766.st_dev = 0;
            id v212 = [v211 rootURLForLocation:1 error:&v766];
            v213 = *(void **)&v766.st_dev;
            uint64_t v214 = (uint64_t)v727;
            if (!v212)
            {
              id v466 = *(id *)&v766.st_dev;
              sub_10096ABF0();

              swift_willThrow();
LABEL_189:
              swift_errorRetain();
              v766.st_dev = sub_10096A6D0();
              sub_100045CB4();
              char v621 = sub_10096AA60();
              swift_errorRelease();
              v622 = v745;
              Class v623 = v703;
              if ((v621 & 1) == 0)
              {

                swift_bridgeObjectRelease();
                sub_10002B770((uint64_t)v705, &qword_100ACA8C0);
                return;
              }
              v760 = 0;
              swift_errorRelease();
              if ((v722 & 1) == 0)
              {
                swift_bridgeObjectRelease();
                v644 = v713;
                sub_1006A75AC();
                v645 = v762;
                ((void (*)(char *, __darwin_ino64_t, NSObject *))v164[2].isa)(v622, v165, v762);
                unint64_t v646 = (LOBYTE(v164[10].isa) + 16) & ~(unint64_t)LOBYTE(v164[10].isa);
                uint64_t v647 = swift_allocObject();
                ((void (*)(unint64_t, char *, NSObject *))v164[4].isa)(v647 + v646, v622, v645);
                v648 = sub_10096B470();
                os_log_type_t v649 = sub_10096C5B0();
                __darwin_ino64_t v650 = swift_allocObject();
                *(unsigned char *)(v650 + 16) = 34;
                __darwin_ino64_t v651 = swift_allocObject();
                *(unsigned char *)(v651 + 16) = 8;
                uint64_t v652 = swift_allocObject();
                *(void *)(v652 + 16) = sub_10016A408;
                *(void *)(v652 + 24) = v647;
                __darwin_ino64_t v653 = swift_allocObject();
                *(void *)(v653 + 16) = sub_10010DB94;
                *(void *)(v653 + 24) = v652;
                sub_10002B7CC(&qword_100ACD798);
                uint64_t v654 = swift_allocObject();
                sub_10038FCB0(v654, 3);
                void *v655 = sub_10010DB7C;
                v655[1] = v650;
                v655[2] = sub_10012133C;
                v655[3] = v651;
                v655[4] = sub_10010DB9C;
                v655[5] = v653;
                swift_retain();
                swift_retain();
                swift_retain();
                swift_bridgeObjectRelease();
                if (os_log_type_enabled(v648, v649))
                {
                  uint64_t v656 = sub_100719B90();
                  v657 = (void *)swift_slowAlloc();
                  v767.super.os_log_t isa = 0;
                  v767._clients = v657;
                  *(_WORD *)uint64_t v656 = 258;
                  uint64_t v763 = v656 + 2;
                  *(void *)&v766.st_dev = sub_10010DB7C;
                  v766.st_ino = v650;
                  v658 = v760;
                  sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v766, (uint64_t)&v763, (uint64_t)&v767, (uint64_t)&v767._clients);
                  v659 = v754;
                  if (v658)
                  {
LABEL_220:
                    swift_errorRelease();
                    __break(1u);
                    swift_errorRelease();
                    __break(1u);
                    swift_errorRelease();
                    __break(1u);
                    goto LABEL_221;
                  }
                  swift_release();
                  *(void *)&v766.st_dev = sub_10012133C;
                  v766.st_ino = v651;
                  sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v766, (uint64_t)&v763, (uint64_t)&v767, (uint64_t)&v767._clients);
                  swift_release();
                  *(void *)&v766.st_dev = sub_10010DB9C;
                  v766.st_ino = v653;
                  sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v766, (uint64_t)&v763, (uint64_t)&v767, (uint64_t)&v767._clients);
                  v660 = v713;
                  swift_release();
                  _os_log_impl((void *)&_mh_execute_header, v648, v649, "can't create dataless root at %{public}s: file already exists", (uint8_t *)v656, 0xCu);
                  swift_arrayDestroy();
                  swift_slowDealloc();
                  sub_100719B98();

                  (*(void (**)(char *, uint64_t))(v737 + 8))(v660, v746);
                  id v661 = v710;
                  v662 = v749;
                  v663 = v751;
                }
                else
                {

                  swift_release();
                  swift_release();
                  swift_release();
                  (*(void (**)(char *, uint64_t))(v737 + 8))(v644, v746);
                  id v661 = v710;
                  v662 = v749;
                  v663 = v751;
                  v659 = v754;
                }
                sub_10096A5E0();
                sub_10025BE48();
                sub_10016B7B8((unint64_t *)&qword_100ACB680, (void (*)(uint64_t))&type metadata accessor for CocoaError);
                sub_10096ABD0();
                sub_10096A4D0();
                (*((void (**)(uint8_t *, NSObject *))v662 + 1))(v659, v663);
                swift_willThrow();

                goto LABEL_106;
              }
              sub_1006A75AC();
              v624 = v164[2].isa;
              v625 = v762;
              v757 = (uint8_t *)&v164[2];
              v755 = v624;
              ((void (*)(char *, __darwin_ino64_t, NSObject *))v624)(v622, v165, v762);
              uint64_t isa_low = LOBYTE(v164[10].isa);
              uint64_t v627 = (isa_low + 16) & ~isa_low;
              v753 = (uint8_t *)v623 + v627;
              v751 = (isa_low | 7);
              uint64_t v628 = swift_allocObject();
              v754 = (uint8_t *)v627;
              v629 = (char *)v164[4].isa;
              os_log_t isa = v164 + 4;
              v750 = v629;
              ((void (*)(uint64_t, char *, NSObject *))v629)(v628 + v627, v622, v625);
              v630 = sub_10096B470();
              os_log_type_t v631 = sub_10096C590();
              v632 = v129;
              __darwin_ino64_t v633 = swift_allocObject();
              *(unsigned char *)(v633 + 16) = 34;
              __darwin_ino64_t v634 = swift_allocObject();
              *(unsigned char *)(v634 + 16) = 8;
              uint64_t v635 = swift_allocObject();
              *(void *)(v635 + 16) = sub_10016A408;
              *(void *)(v635 + 24) = v628;
              __darwin_ino64_t v636 = swift_allocObject();
              *(void *)(v636 + 16) = sub_100121318;
              *(void *)(v636 + 24) = v635;
              uint64_t v759 = sub_10002B7CC(&qword_100ACD798);
              uint64_t v637 = swift_allocObject();
              sub_10038FCB0(v637, 3);
              void *v638 = sub_10012133C;
              v638[1] = v633;
              v638[2] = sub_10012133C;
              v638[3] = v634;
              v638[4] = sub_100121338;
              v638[5] = v636;
              swift_retain();
              swift_retain();
              swift_retain();
              swift_bridgeObjectRelease();
              if (!os_log_type_enabled(v630, v631))
              {

                swift_release();
                swift_release();
                swift_release();
                v643 = *(void (**)(uint8_t *, uint64_t))(v737 + 8);
                v643(v632, v746);
LABEL_200:
                memset(&v766, 0, 28);
                memset(&v766.st_atimespec, 0, 112);
                sub_10096AE10();
                uint64_t v666 = sub_10096BCF0();
                swift_bridgeObjectRelease();
                int v667 = lstat((const char *)(v666 + 32), &v766);
                swift_release();
                if (v667 < 0
                  || (v766.st_flags & 0x40000000) == 0
                  || (int v765 = 0,
                      sub_10096AE10(),
                      sub_10096BCF0(),
                      swift_bridgeObjectRelease(),
                      int v668 = fpfs_num_entries(),
                      swift_release(),
                      v668 < 0)
                  || !v765)
                {
                  swift_bridgeObjectRelease();
                  goto LABEL_207;
                }
                uint64_t v669 = swift_allocObject();
                *(void *)(v669 + 16) = 0;
                sub_10096AD20(v670);
                v672 = v671;
                NSString v673 = sub_10096BC00();
                swift_bridgeObjectRelease();
                uint64_t v763 = *(void *)(v669 + 16);
                v674 = (void *)v763;
                char v675 = FPWriteImportCookieForDomainURL();

                v676 = (void *)v763;
                *(void *)(v669 + 16) = v763;
                id v677 = v676;

                if (v675)
                {
                  swift_release();
LABEL_207:
                  unsigned char *v731 = 1;
                  id v421 = v710;
                  v139 = v760;
                  goto LABEL_170;
                }
                sub_1006A75AC();
                v678 = v745;
                v679 = v762;
                ((void (*)(char *, __darwin_ino64_t, NSObject *))v755)(v745, v165, v762);
                uint64_t v680 = swift_allocObject();
                ((void (*)(uint8_t *, char *, NSObject *))v750)(&v754[v680], v678, v679);
                swift_retain();
                v762 = sub_10096B470();
                LODWORD(v758) = sub_10096C5B0();
                uint64_t v681 = swift_allocObject();
                *(unsigned char *)(v681 + 16) = 34;
                uint64_t v682 = swift_allocObject();
                *(unsigned char *)(v682 + 16) = 8;
                uint64_t v683 = swift_allocObject();
                *(void *)(v683 + 16) = sub_10016A408;
                *(void *)(v683 + 24) = v680;
                uint64_t v684 = swift_allocObject();
                *(void *)(v684 + 16) = sub_100121318;
                *(void *)(v684 + 24) = v683;
                uint64_t v685 = swift_allocObject();
                *(unsigned char *)(v685 + 16) = 32;
                uint64_t v686 = swift_allocObject();
                *(unsigned char *)(v686 + 16) = 8;
                uint64_t v687 = swift_allocObject();
                *(void *)(v687 + 16) = sub_10016A4A8;
                *(void *)(v687 + 24) = v669;
                uint64_t v688 = swift_allocObject();
                *(void *)(v688 + 16) = sub_100121318;
                *(void *)(v688 + 24) = v687;
                uint64_t v689 = swift_allocObject();
                sub_10038FCB0(v689, 6);
                void *v690 = sub_10012133C;
                v690[1] = v681;
                v690[2] = sub_10012133C;
                v690[3] = v682;
                v690[4] = sub_100121338;
                v690[5] = v684;
                v690[6] = sub_10012133C;
                v690[7] = v685;
                v690[8] = sub_10012133C;
                v690[9] = v686;
                v690[10] = sub_100121338;
                v690[11] = v688;
                swift_retain();
                swift_retain();
                swift_retain();
                swift_retain();
                unint64_t v691 = v686;
                swift_retain();
                swift_retain();
                swift_bridgeObjectRelease();
                if (!os_log_type_enabled(v762, (os_log_type_t)v758))
                {

                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  goto LABEL_215;
                }
                v692 = (uint8_t *)sub_100719B90();
                v693 = (NSURL *)swift_slowAlloc();
                v767._baseURL = v693;
                v767._clients = 0;
                uint64_t v759 = (uint64_t)v692;
                *(_WORD *)v692 = 514;
                v757 = (uint8_t *)v693;
                v767.super.os_log_t isa = (Class)(v692 + 2);
                uint64_t v763 = (uint64_t)sub_10012133C;
                unint64_t v764 = v681;
                v694 = v760;
                sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v763, (uint64_t)&v767, (uint64_t)&v767._clients, (uint64_t)&v767._baseURL);
                if (!v694)
                {
                  swift_release();
                  uint64_t v763 = (uint64_t)sub_10012133C;
                  unint64_t v764 = v682;
                  sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v763, (uint64_t)&v767, (uint64_t)&v767._clients, (uint64_t)&v767._baseURL);
                  swift_release();
                  uint64_t v763 = (uint64_t)sub_100121338;
                  unint64_t v764 = v684;
                  sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v763, (uint64_t)&v767, (uint64_t)&v767._clients, (uint64_t)&v767._baseURL);
                  swift_release();
                  uint64_t v763 = (uint64_t)sub_10012133C;
                  unint64_t v764 = v685;
                  sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v763, (uint64_t)&v767, (uint64_t)&v767._clients, (uint64_t)&v767._baseURL);
                  swift_release();
                  uint64_t v763 = (uint64_t)sub_10012133C;
                  unint64_t v764 = v691;
                  sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v763, (uint64_t)&v767, (uint64_t)&v767._clients, (uint64_t)&v767._baseURL);
                  swift_release();
                  uint64_t v763 = (uint64_t)sub_100121338;
                  unint64_t v764 = v688;
                  sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v763, (uint64_t)&v767, (uint64_t)&v767._clients, (uint64_t)&v767._baseURL);
                  v760 = 0;
                  swift_release();
                  v695 = v762;
                  _os_log_impl((void *)&_mh_execute_header, v762, (os_log_type_t)v758, "failed to write import cookie for domain %{public}s: %s", (uint8_t *)v759, 0x16u);
                  swift_arrayDestroy();
                  swift_slowDealloc();
                  sub_100719B98();

LABEL_215:
                  v643(v711, v746);
                  swift_release();
                  goto LABEL_207;
                }
                goto LABEL_218;
              }
              uint64_t v639 = sub_100719B90();
              v640 = (void *)swift_slowAlloc();
              v767.super.os_log_t isa = 0;
              v767._clients = v640;
              *(_WORD *)uint64_t v639 = 258;
              uint64_t v763 = v639 + 2;
              *(void *)&v766.st_dev = sub_10012133C;
              v766.st_ino = v633;
              v641 = v760;
              sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v766, (uint64_t)&v763, (uint64_t)&v767, (uint64_t)&v767._clients);
              if (!v641)
              {
                swift_release();
                *(void *)&v766.st_dev = sub_10012133C;
                v766.st_ino = v634;
                sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v766, (uint64_t)&v763, (uint64_t)&v767, (uint64_t)&v767._clients);
                swift_release();
                *(void *)&v766.st_dev = sub_100121338;
                v766.st_ino = v636;
                sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v766, (uint64_t)&v763, (uint64_t)&v767, (uint64_t)&v767._clients);
                v760 = 0;
                v642 = v758;
                swift_release();
                _os_log_impl((void *)&_mh_execute_header, v630, v631, "taking over %{public}s", (uint8_t *)v639, 0xCu);
                swift_arrayDestroy();
                swift_slowDealloc();
                sub_100719B98();

                v643 = *(void (**)(uint8_t *, uint64_t))(v737 + 8);
                v643(v642, v746);
                __darwin_ino64_t v165 = v752;
                goto LABEL_200;
              }
              goto LABEL_217;
            }
            v215 = v212;
            v216 = v745;
            sub_10096ADD0();
            id v217 = v213;

            v218 = (uint8_t *)v164[4].isa;
            v219 = v762;
            ((void (*)(uint64_t, char *, NSObject *))v218)(v214, v216, v762);
            ((void (*)(uint64_t, void, uint64_t, NSObject *))v164[7].isa)(v214, 0, 1, v219);
            if (v708((uint8_t *)v214, 1, v219) != 1)
            {
              ((void (*)(char *, uint64_t, NSObject *))v218)(v717, v214, v219);
              uint64_t v220 = (uint64_t)v716;
              uint64_t v759 = (uint64_t)v164[2].isa;
              ((void (*)(char *, __darwin_ino64_t, NSObject *))v759)(v716, v165, v219);
              sub_10096AD20(v221);
              v223 = v222;
              sub_10096AD20(v224);
              v226 = v225;
              id v227 = objc_msgSend(v223, "fp_relationshipToItemAtURL:", v225);

              BOOL v228 = sub_10025BE54((uint64_t)v227, 0);
              id v229 = [v747 provider];
              if (v229)
              {
                v230 = v229;
                v757 = v218;
                v760 = 0;
                id v231 = [v229 identifier];

                uint64_t v232 = j___sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0_0();
                uint64_t v234 = v233;

                NSString v235 = sub_10096BC00();
                unsigned int v236 = objc_msgSend(v235, "fp_isiCloudDriveOrCloudDocsIdentifier");

                if (v236)
                {
                  id v237 = [v707 defaultManager];
                  __darwin_ino64_t v238 = v752;
                  sub_10096AE10();
                  NSString v239 = sub_10096BC00();
                  swift_bridgeObjectRelease();
                  objc_msgSend(v237, "fp_createPathIfNeeded:", v239);

                  sub_1006A75AC();
                  v240 = v745;
                  __darwin_ino64_t v241 = v238;
                  v242 = v762;
                  ((void (*)(char *, __darwin_ino64_t, NSObject *))v759)(v745, v241, v762);
                  unint64_t v243 = (LOBYTE(isa[10].isa) + 16) & ~(unint64_t)LOBYTE(isa[10].isa);
                  uint64_t v244 = swift_allocObject();
                  ((void (*)(unint64_t, char *, NSObject *))v757)(v244 + v243, v240, v242);
                  uint64_t v245 = swift_allocObject();
                  *(void *)(v245 + 16) = v232;
                  *(void *)(v245 + 24) = v234;
                  v755 = sub_10096B470();
                  LODWORD(v759) = sub_10096C590();
                  __darwin_ino64_t v246 = swift_allocObject();
                  *(unsigned char *)(v246 + 16) = 34;
                  __darwin_ino64_t v247 = swift_allocObject();
                  *(unsigned char *)(v247 + 16) = 8;
                  uint64_t v248 = swift_allocObject();
                  *(void *)(v248 + 16) = sub_10016A408;
                  *(void *)(v248 + 24) = v244;
                  __darwin_ino64_t v249 = swift_allocObject();
                  *(void *)(v249 + 16) = sub_100121318;
                  *(void *)(v249 + 24) = v248;
                  v250 = (uint8_t *)swift_allocObject();
                  v250[16] = 34;
                  __darwin_ino64_t v251 = swift_allocObject();
                  *(unsigned char *)(v251 + 16) = 8;
                  uint64_t v252 = swift_allocObject();
                  *(void *)(v252 + 16) = j___s9libfssync13DocumentWharfC5labelSSvg;
                  *(void *)(v252 + 24) = v245;
                  __darwin_ino64_t v253 = swift_allocObject();
                  *(void *)(v253 + 16) = sub_100121318;
                  *(void *)(v253 + 24) = v252;
                  v152 = v755;
                  sub_10002B7CC(&qword_100ACD798);
                  uint64_t v254 = swift_allocObject();
                  sub_10038FCB0(v254, 6);
                  void *v255 = sub_10012133C;
                  v255[1] = v246;
                  v255[2] = sub_10012133C;
                  v255[3] = v247;
                  v255[4] = sub_100121338;
                  v255[5] = v249;
                  v255[6] = sub_10012133C;
                  v255[7] = v250;
                  v255[8] = sub_10012133C;
                  v255[9] = v251;
                  v255[10] = sub_100121338;
                  v255[11] = v253;
                  swift_retain();
                  swift_retain();
                  swift_retain();
                  swift_retain();
                  swift_retain();
                  swift_retain();
                  swift_bridgeObjectRelease();
                  if (os_log_type_enabled(v152, (os_log_type_t)v759))
                  {
                    v753 = v250;
                    uint64_t v256 = sub_100719B90();
                    v257 = (void *)swift_slowAlloc();
                    v767.super.os_log_t isa = 0;
                    v767._clients = v257;
                    v748 = (uint8_t *)v256;
                    *(_WORD *)uint64_t v256 = 514;
                    uint64_t v763 = v256 + 2;
                    *(void *)&v766.st_dev = sub_10012133C;
                    v766.st_ino = v246;
                    v258 = v760;
                    sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v766, (uint64_t)&v763, (uint64_t)&v767, (uint64_t)&v767._clients);
                    uint64_t v220 = (uint64_t)v716;
                    if (v258)
                    {
LABEL_217:
                      swift_errorRelease();
                      __break(1u);
                      goto LABEL_218;
                    }
                    swift_release();
                    *(void *)&v766.st_dev = sub_10012133C;
                    v766.st_ino = v247;
                    sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v766, (uint64_t)&v763, (uint64_t)&v767, (uint64_t)&v767._clients);
                    __darwin_ino64_t v165 = v752;
                    v129 = v758;
                    swift_release();
                    *(void *)&v766.st_dev = sub_100121338;
                    v766.st_ino = v249;
                    sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v766, (uint64_t)&v763, (uint64_t)&v767, (uint64_t)&v767._clients);
                    swift_release();
                    *(void *)&v766.st_dev = sub_10012133C;
                    v766.st_ino = (__darwin_ino64_t)v753;
                    sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v766, (uint64_t)&v763, (uint64_t)&v767, (uint64_t)&v767._clients);
                    swift_release();
                    *(void *)&v766.st_dev = sub_10012133C;
                    v766.st_ino = v251;
                    sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v766, (uint64_t)&v763, (uint64_t)&v767, (uint64_t)&v767._clients);
                    swift_release();
                    *(void *)&v766.st_dev = sub_100121338;
                    v766.st_ino = v253;
                    sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v766, (uint64_t)&v763, (uint64_t)&v767, (uint64_t)&v767._clients);
                    v139 = 0;
                    swift_release();
                    v259 = v755;
                    _os_log_impl((void *)&_mh_execute_header, v755, (os_log_type_t)v759, "creating %{public}s on disk for %{public}s", v748, 0x16u);
                    swift_arrayDestroy();
                    swift_slowDealloc();
                    sub_100719B98();

                    (*(void (**)(char *, uint64_t))(v737 + 8))(v712, v746);
                  }
                  else
                  {
LABEL_185:

                    swift_release();
                    swift_release();
                    swift_release();
                    swift_release();
                    swift_release();
                    swift_release();
                    (*(void (**)(char *, uint64_t))(v737 + 8))(v712, v746);
                    v139 = v760;
                    __darwin_ino64_t v165 = v752;
                    v129 = v758;
                    uint64_t v220 = (uint64_t)v716;
                  }
                  v615 = v757;
                  v616 = v745;
                  sub_10096AD50();
                  v617 = v762;
                  ((void (*)(uint64_t, NSObject *))isa[1].isa)(v220, v762);
                  ((void (*)(uint64_t, char *, NSObject *))v615)(v220, v616, v617);
                  BOOL v228 = 0;
                  goto LABEL_187;
                }
                swift_bridgeObjectRelease();
                v139 = v760;
                __darwin_ino64_t v165 = v752;
              }
              v129 = v758;
LABEL_187:
              sub_10016A504(v220, v228);
              os_log_t v164 = isa;
              os_log_t v618 = isa + 1;
              if (v139)
              {
                v619 = (void (*)(char *, NSObject *))v618->isa;
                v620 = v762;
                ((void (*)(uint64_t, NSObject *))v618->isa)(v220, v762);
                v619(v717, v620);
                goto LABEL_189;
              }
              swift_bridgeObjectRelease();
              v664 = (void (*)(char *, NSObject *))v618->isa;
              v665 = v762;
              ((void (*)(uint64_t, NSObject *))v618->isa)(v220, v762);
              v664(v717, v665);
              unsigned char *v731 = 1;
              goto LABEL_119;
            }
          }
          else
          {
            uint64_t v214 = (uint64_t)v727;
            ((void (*)(NSObject *, uint64_t, uint64_t, NSObject *))v164[7].isa)(v727, 1, 1, v762);
          }
          swift_bridgeObjectRelease();
          sub_10002B770(v214, &qword_100ACA8C0);
LABEL_119:
          id v421 = v710;
LABEL_170:
          sub_10096AE10();
          sub_100169DFC(0x100000);
          sub_10096BCF0();
          uint64_t v604 = fpfs_lp_openat();
          swift_release();
          if ((v604 & 0x80000000) == 0)
          {
            swift_bridgeObjectRelease();
            sub_10059603C(0x10u);
            uint64_t v605 = (uint64_t)v705;
            if (v139)
            {

              sub_10002B770(v605, &qword_100ACA8C0);
              sub_100595FB8(v604);
            }
            else
            {
              j___sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
              sub_10092A8B4(v604);
              swift_bridgeObjectRelease();
              sub_10059603C(0x400u);
              sub_100595FB8(v604);

              sub_10002B770(v605, &qword_100ACA8C0);
            }
            return;
          }
          int v606 = sub_10096B4D0();
          sub_1005970E0(v606, 1, 0, 0xAu);
          swift_willThrow();

LABEL_56:
          swift_bridgeObjectRelease();
          goto LABEL_106;
        }
        v260 = (char *)v164[4].isa;
        v727 = v164 + 4;
        v726 = v260;
        ((void (*)(char *, uint64_t, NSObject *))v260)(v736, v210, v163);
        uint64_t v261 = sub_10096B0E0();
        v262 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v261 - 8) + 56);
        uint64_t v263 = (uint64_t)v728;
        v262(v728, 1, 1, v261);
        uint64_t v264 = (uint64_t)v729;
        v262(v729, 1, 1, v261);
        uint64_t v265 = (uint64_t)v730;
        v262((char *)v730, 1, 1, v261);
        LODWORD(v261) = sub_10026D278();
        LOBYTE(v262) = FPDDomainFPFSBackend.isDeadEnd()();
        Swift::Bool v266 = FPDDomainFPFSBackend.isDeadEnd()();
        LOBYTE(v766.st_dev) = 1;
        sub_100151430(0x100000000uLL, v261, v263, v264, v262 & 1, 0, 0, v265, v742, 0, 0, 1, 0, 0, 0xF000000000000000, 0, 0, 0, 0,
          0,
          0,
          0,
          v266);
        sub_10002B770(v265, (uint64_t *)&unk_100ACB5E0);
        sub_10002B770(v264, (uint64_t *)&unk_100ACB5E0);
        sub_10002B770(v263, (uint64_t *)&unk_100ACB5E0);
        ItemMetadata.isDataless.setter(1);
        if (v753)
        {
          uint64_t v733 = OBJC_IVAR____TtC9libfssync20InternalPathsManager_providerDomainID;
          uint64_t v267 = v759;
          LODWORD(v735) = sub_1006B1654(v759);
          v750 = (char *)(v737 + 8);
          swift_bridgeObjectRetain();
          uint64_t v268 = 4;
          v729 = (char *)&type metadata for Any + 8;
          v751 = v164 + 1;
          do
          {
            uint64_t v270 = v268 - 4;
            v755 = v268;
            if (v735) {
              id v271 = *(id *)(v267 + 8 * v268);
            }
            else {
              id v271 = (id)sub_10096CC30();
            }
            v272 = v271;
            v760 = v139;
            v754 = (uint8_t *)(v270 + 1);
            if (__OFADD__(v270, 1)) {
              __break(1u);
            }
            sub_1006A75AC();
            uint64_t v273 = swift_allocObject();
            *(void *)(v273 + 16) = v272;
            uint64_t v274 = swift_allocObject();
            *(void *)(v274 + 16) = v272;
            v757 = v272;
            v275 = sub_10096B470();
            LODWORD(v758) = sub_10096C590();
            __darwin_ino64_t v276 = swift_allocObject();
            *(unsigned char *)(v276 + 16) = 34;
            __darwin_ino64_t v277 = swift_allocObject();
            *(unsigned char *)(v277 + 16) = 8;
            uint64_t v278 = swift_allocObject();
            *(void *)(v278 + 16) = sub_10016B9E4;
            *(void *)(v278 + 24) = v273;
            __darwin_ino64_t v279 = swift_allocObject();
            *(void *)(v279 + 16) = sub_100121318;
            *(void *)(v279 + 24) = v278;
            __darwin_ino64_t v280 = swift_allocObject();
            *(unsigned char *)(v280 + 16) = 34;
            __darwin_ino64_t v281 = swift_allocObject();
            *(unsigned char *)(v281 + 16) = 8;
            uint64_t v282 = swift_allocObject();
            *(void *)(v282 + 16) = sub_10016B32C;
            *(void *)(v282 + 24) = v274;
            __darwin_ino64_t v283 = swift_allocObject();
            *(void *)(v283 + 16) = sub_100121318;
            *(void *)(v283 + 24) = v282;
            v284 = (uint8_t *)sub_10002B7CC(&qword_100ACD798);
            uint64_t v285 = swift_allocObject();
            sub_10038FCB0(v285, 6);
            void *v286 = sub_10012133C;
            v286[1] = v276;
            v286[2] = sub_10012133C;
            v286[3] = v277;
            v286[4] = sub_100121338;
            v286[5] = v279;
            v286[6] = sub_10012133C;
            v286[7] = v280;
            v286[8] = sub_10012133C;
            v286[9] = v281;
            v286[10] = sub_100121338;
            v286[11] = v283;
            swift_retain();
            swift_retain();
            swift_retain();
            swift_retain();
            swift_retain();
            swift_retain();
            swift_bridgeObjectRelease();
            BOOL v287 = os_log_type_enabled(v275, (os_log_type_t)v758);
            v749 = v284;
            if (v287)
            {
              v747 = v275;
              uint64_t v288 = sub_100719B90();
              v289 = (void *)swift_slowAlloc();
              v767.super.os_log_t isa = 0;
              v767._clients = v289;
              v741 = (uint8_t *)v288;
              *(_WORD *)uint64_t v288 = 514;
              uint64_t v763 = v288 + 2;
              *(void *)&v766.st_dev = sub_10012133C;
              v766.st_ino = v276;
              v290 = v760;
              sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v766, (uint64_t)&v763, (uint64_t)&v767, (uint64_t)&v767._clients);
              if (v290) {
                goto LABEL_217;
              }
              swift_release();
              *(void *)&v766.st_dev = sub_10012133C;
              v766.st_ino = v277;
              sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v766, (uint64_t)&v763, (uint64_t)&v767, (uint64_t)&v767._clients);
              swift_release();
              *(void *)&v766.st_dev = sub_100121338;
              v766.st_ino = v279;
              sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v766, (uint64_t)&v763, (uint64_t)&v767, (uint64_t)&v767._clients);
              swift_release();
              *(void *)&v766.st_dev = sub_10012133C;
              v766.st_ino = v280;
              sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v766, (uint64_t)&v763, (uint64_t)&v767, (uint64_t)&v767._clients);
              v291 = v744;
              swift_release();
              *(void *)&v766.st_dev = sub_10012133C;
              v766.st_ino = v281;
              sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v766, (uint64_t)&v763, (uint64_t)&v767, (uint64_t)&v767._clients);
              swift_release();
              *(void *)&v766.st_dev = sub_100121338;
              v766.st_ino = v283;
              sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v766, (uint64_t)&v763, (uint64_t)&v767, (uint64_t)&v767._clients);
              v292 = 0;
              v293 = v739;
              swift_release();
              v294 = v747;
              _os_log_impl((void *)&_mh_execute_header, v747, (os_log_type_t)v758, "marking folder %{public}s as detached from %{public}s", v741, 0x16u);
              swift_arrayDestroy();
              swift_slowDealloc();
              sub_100719B98();

              v295 = *(uint8_t **)v750;
              (*(void (**)(char *, uint64_t))v750)(v291, v746);
            }
            else
            {

              swift_release();
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              v295 = *(uint8_t **)v750;
              (*(void (**)(char *, uint64_t))v750)(v744, v746);
              v292 = v760;
              v293 = v739;
            }
            v296 = v757;
            id v297 = [(uint8_t *)v757 knownFolder];
            sub_10096ADD0();

            sub_10096AE10();
            sub_100169DFC(1048832);
            sub_10096BCF0();
            uint64_t v298 = fpfs_lp_openat();
            swift_release();
            if ((v298 & 0x80000000) != 0)
            {
              int v500 = sub_10096B4D0();
              sub_1005970E0(v500, 1, 0, 0xAu);
              swift_willThrow();
              swift_bridgeObjectRelease();

              swift_bridgeObjectRelease();
              v501 = (uint8_t *)v751->isa;
              v502 = v762;
              ((void (*)(char *, NSObject *))v751->isa)(v293, v762);
              swift_bridgeObjectRelease();
              ((void (*)(char *, NSObject *))v501)(v736, v502);
              uint64_t v503 = (uint64_t)v705;
              goto LABEL_164;
            }
            swift_bridgeObjectRelease();
            v299 = (uint8_t *)v751->isa;
            uint64_t v300 = ((uint64_t (*)(char *, NSObject *))v751->isa)(v293, v762);
            __chkstk_darwin(v300);
            uint64_t v301 = v742;
            sub_1006FEF78((void *(*)(void *__return_ptr, uint64_t))sub_10016B390);
            v139 = v292;
            if (v292)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              ((void (*)(char *, NSObject *))v299)(v736, v762);
              sub_10002B770((uint64_t)v705, &qword_100ACA8C0);
              sub_100595FB8(v298);
              sub_10010DAFC(v301);
              return;
            }
            v758 = v295;
            LODWORD(v760) = v298;
            id v302 = [(uint8_t *)v296 logicalLocation];
            v303 = v745;
            sub_10096ADD0();

            sub_10096AD80();
            v304 = v762;
            ((void (*)(char *, NSObject *))v299)(v303, v762);
            id v305 = [(uint8_t *)v296 logicalLocation];
            sub_10096ADD0();

            uint64_t v306 = sub_10096ACF0();
            __darwin_ino64_t v308 = v307;
            ((void (*)(char *, NSObject *))v299)(v303, v304);
            *(void *)&v766.st_dev = v306;
            v766.st_ino = v308;
            uint64_t v763 = 58;
            unint64_t v764 = 0xE100000000000000;
            v767.super.os_log_t isa = (Class)47;
            v767._urlString = (NSString *)0xE100000000000000;
            sub_10001F9C0();
            uint64_t v309 = sub_10096C910();
            uint64_t v311 = v310;
            swift_bridgeObjectRelease();
            uint64_t v312 = *(void *)(v761 + v733);
            uint64_t v313 = j___sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
            uint64_t v314 = v743;
            sub_10092B068((Swift::Int32)v760, v743, v309, v311, v752, v313, v315);
            v757 = v299;
            ((void (*)(uint64_t, NSObject *))v299)(v314, v762);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_100595FB8(v760);
            if (sub_1006A7344(1, (uint64_t)[(uint8_t *)v296 detachOptions]))
            {
              uint64_t v732 = v312;
              v760 = 0;
              sub_1006A75AC();
              uint64_t v316 = swift_allocObject();
              *(void *)(v316 + 16) = v296;
              uint64_t v317 = swift_allocObject();
              *(void *)(v317 + 16) = v296;
              v730 = v296;
              v747 = sub_10096B470();
              LODWORD(v741) = sub_10096C590();
              __darwin_ino64_t v318 = swift_allocObject();
              *(unsigned char *)(v318 + 16) = 34;
              __darwin_ino64_t v319 = swift_allocObject();
              *(unsigned char *)(v319 + 16) = 8;
              uint64_t v320 = swift_allocObject();
              *(void *)(v320 + 16) = sub_10016B9E0;
              *(void *)(v320 + 24) = v316;
              __darwin_ino64_t v321 = swift_allocObject();
              *(void *)(v321 + 16) = sub_100121318;
              *(void *)(v321 + 24) = v320;
              __darwin_ino64_t v322 = swift_allocObject();
              *(unsigned char *)(v322 + 16) = 34;
              __darwin_ino64_t v323 = swift_allocObject();
              *(unsigned char *)(v323 + 16) = 8;
              uint64_t v324 = swift_allocObject();
              *(void *)(v324 + 16) = sub_10016B9E4;
              *(void *)(v324 + 24) = v317;
              __darwin_ino64_t v325 = swift_allocObject();
              *(void *)(v325 + 16) = sub_100121318;
              *(void *)(v325 + 24) = v324;
              v326 = v747;
              uint64_t v327 = swift_allocObject();
              sub_10038FCB0(v327, 6);
              void *v328 = sub_10012133C;
              v328[1] = v318;
              v328[2] = sub_10012133C;
              v328[3] = v319;
              v328[4] = sub_100121338;
              v328[5] = v321;
              v328[6] = sub_10012133C;
              v328[7] = v322;
              v328[8] = sub_10012133C;
              v328[9] = v323;
              v328[10] = sub_100121338;
              v328[11] = v325;
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_bridgeObjectRelease();
              if (os_log_type_enabled(v326, (os_log_type_t)v741))
              {
                uint64_t v329 = sub_100719B90();
                v330 = (void *)swift_slowAlloc();
                v767.super.os_log_t isa = 0;
                v767._clients = v330;
                v749 = (uint8_t *)v329;
                *(_WORD *)uint64_t v329 = 514;
                uint64_t v763 = v329 + 2;
                *(void *)&v766.st_dev = sub_10012133C;
                v766.st_ino = v318;
                v331 = v760;
                sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v766, (uint64_t)&v763, (uint64_t)&v767, (uint64_t)&v767._clients);
                if (v331) {
                  goto LABEL_220;
                }
                swift_release();
                *(void *)&v766.st_dev = sub_10012133C;
                v766.st_ino = v319;
                sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v766, (uint64_t)&v763, (uint64_t)&v767, (uint64_t)&v767._clients);
                swift_release();
                *(void *)&v766.st_dev = sub_100121338;
                v766.st_ino = v321;
                sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v766, (uint64_t)&v763, (uint64_t)&v767, (uint64_t)&v767._clients);
                v332 = v738;
                swift_release();
                *(void *)&v766.st_dev = sub_10012133C;
                v766.st_ino = v322;
                sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v766, (uint64_t)&v763, (uint64_t)&v767, (uint64_t)&v767._clients);
                swift_release();
                *(void *)&v766.st_dev = sub_10012133C;
                v766.st_ino = v323;
                sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v766, (uint64_t)&v763, (uint64_t)&v767, (uint64_t)&v767._clients);
                os_log_t v164 = isa;
                swift_release();
                *(void *)&v766.st_dev = sub_100121338;
                v766.st_ino = v325;
                sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v766, (uint64_t)&v763, (uint64_t)&v767, (uint64_t)&v767._clients);
                v139 = 0;
                __darwin_ino64_t v269 = v752;
                swift_release();
                v333 = v747;
                _os_log_impl((void *)&_mh_execute_header, v747, (os_log_type_t)v741, "creating symlink from  %{public}s to detached root %{public}s", v749, 0x16u);
                swift_arrayDestroy();
                swift_slowDealloc();
                sub_100719B98();

                ((void (*)(char *, uint64_t))v758)(v332, v746);
              }
              else
              {

                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                ((void (*)(char *, uint64_t))v758)(v738, v746);
                v139 = v760;
                os_log_t v164 = isa;
                __darwin_ino64_t v269 = v752;
              }
              type metadata accessor for InternalPathsManager();
              v334 = v730;
              id v335 = [(uint8_t *)v730 knownFolder];
              uint64_t v336 = (uint64_t)v745;
              sub_10096ADD0();

              id v337 = [(uint8_t *)v334 logicalLocation];
              uint64_t v338 = (uint64_t)v734;
              sub_10096ADD0();

              sub_10015EFD0(v336, v338, v732);
              v339 = v762;
              v340 = v757;
              ((void (*)(uint64_t, NSObject *))v757)(v338, v762);
              ((void (*)(uint64_t, NSObject *))v340)(v336, v339);
            }
            else
            {

              os_log_t v164 = isa;
              __darwin_ino64_t v269 = v752;
            }
            uint64_t v267 = v759;
            uint64_t v268 = (uint64_t)&v755->isa + 1;
          }
          while (v754 != v753);
          swift_bridgeObjectRelease();
        }
        else
        {
          __darwin_ino64_t v269 = v752;
        }
        sub_10096AE10();
        sub_100169DFC(0x100000);
        sub_10096BCF0();
        uint64_t v516 = fpfs_lp_openat();
        swift_release();
        if ((v516 & 0x80000000) != 0)
        {
          int v518 = sub_10096B4D0();
          uint64_t v517 = sub_1005970E0(v518, 1, 0, 0xAu);
          swift_willThrow();
          swift_bridgeObjectRelease();
          v760 = 0;
        }
        else
        {
          swift_bridgeObjectRelease();
          sub_100595FC4(v742, v516);
          if (!v139)
          {
            v760 = 0;
            sub_100595FB8(v516);
            v530 = v736;
LABEL_155:
            if ((v748 & 1) == 0)
            {
              sub_10096AD20((NSURL *)v748);
              v532 = v531;
              sub_10096AD20(v533);
              v535 = v534;
              *(void *)&v766.st_dev = 0;
              id v536 = v710;
              unsigned int v537 = [v710 moveItemAtURL:v532 toURL:v534 error:&v766];

              v538 = v530;
              uint64_t v539 = (uint64_t)v705;
              if (!v537)
              {
                id v571 = *(id *)&v766.st_dev;
                swift_bridgeObjectRelease();
                sub_10096ABF0();

                swift_willThrow();
                ((void (*)(char *, NSObject *))v164[1].isa)(v538, v762);
                uint64_t v503 = v539;
LABEL_164:
                sub_10002B770(v503, &qword_100ACA8C0);
                sub_10010DAFC(v742);
                return;
              }
              id v540 = *(id *)&v766.st_dev;
            }
            unsigned char *v731 = 1;
            uint64_t v541 = swift_allocObject();
            *(void *)(v541 + 16) = 0;
            sub_10096AD20(v542);
            v544 = v543;
            NSString v545 = sub_10096BC00();
            swift_bridgeObjectRelease();
            *(void *)&v766.st_dev = *(void *)(v541 + 16);
            v546 = *(void **)&v766.st_dev;
            char v547 = FPWriteImportCookieForDomainURL();

            v548 = *(void **)&v766.st_dev;
            *(void *)(v541 + 16) = *(void *)&v766.st_dev;
            id v549 = v548;

            if (v547)
            {
              ((void (*)(char *, NSObject *))v164[1].isa)(v736, v762);
              swift_release();
              id v421 = v710;
              v139 = v760;
LABEL_169:
              sub_10010DAFC(v742);
              goto LABEL_170;
            }
            sub_1006A75AC();
            v550 = v745;
            v551 = v762;
            ((void (*)(char *, __darwin_ino64_t, NSObject *))v164[2].isa)(v745, v269, v762);
            unint64_t v552 = (LOBYTE(v164[10].isa) + 16) & ~(unint64_t)LOBYTE(v164[10].isa);
            uint64_t v553 = swift_allocObject();
            ((void (*)(unint64_t, char *, NSObject *))v726)(v553 + v552, v550, v551);
            swift_retain();
            uint64_t v759 = sub_10096B470();
            LODWORD(v758) = sub_10096C5B0();
            __darwin_ino64_t v554 = swift_allocObject();
            *(unsigned char *)(v554 + 16) = 34;
            __darwin_ino64_t v555 = swift_allocObject();
            *(unsigned char *)(v555 + 16) = 8;
            uint64_t v556 = swift_allocObject();
            *(void *)(v556 + 16) = sub_10016A408;
            *(void *)(v556 + 24) = v553;
            os_log_t v557 = v164;
            __darwin_ino64_t v558 = swift_allocObject();
            *(void *)(v558 + 16) = sub_100121318;
            *(void *)(v558 + 24) = v556;
            __darwin_ino64_t v559 = swift_allocObject();
            *(unsigned char *)(v559 + 16) = 32;
            __darwin_ino64_t v560 = swift_allocObject();
            *(unsigned char *)(v560 + 16) = 8;
            uint64_t v561 = swift_allocObject();
            *(void *)(v561 + 16) = sub_10016A4A8;
            *(void *)(v561 + 24) = v541;
            __darwin_ino64_t v562 = swift_allocObject();
            *(void *)(v562 + 16) = sub_100121318;
            *(void *)(v562 + 24) = v561;
            v563 = v759;
            sub_10002B7CC(&qword_100ACD798);
            uint64_t v564 = swift_allocObject();
            sub_10038FCB0(v564, 6);
            void *v565 = sub_10012133C;
            v565[1] = v554;
            v565[2] = sub_10012133C;
            v565[3] = v555;
            v565[4] = sub_100121338;
            v565[5] = v558;
            v565[6] = sub_10012133C;
            v565[7] = v559;
            v565[8] = sub_10012133C;
            v565[9] = v560;
            v565[10] = sub_100121338;
            v565[11] = v562;
            swift_retain();
            swift_retain();
            swift_retain();
            swift_retain();
            swift_retain();
            swift_retain();
            swift_bridgeObjectRelease();
            if (!os_log_type_enabled(v563, (os_log_type_t)v758))
            {
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              swift_release();

              (*(void (**)(char *, uint64_t))(v737 + 8))(v740, v746);
              ((void (*)(char *, NSObject *))v557[1].isa)(v736, v762);
              swift_release();
              id v421 = v710;
              v139 = v760;
              goto LABEL_169;
            }
            uint64_t v566 = sub_100719B90();
            v567 = (void *)swift_slowAlloc();
            v767.super.os_log_t isa = 0;
            v767._clients = v567;
            v757 = (uint8_t *)v566;
            *(_WORD *)uint64_t v566 = 514;
            uint64_t v763 = v566 + 2;
            *(void *)&v766.st_dev = sub_10012133C;
            v766.st_ino = v554;
            v568 = v760;
            sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v766, (uint64_t)&v763, (uint64_t)&v767, (uint64_t)&v767._clients);
            if (!v568)
            {
              swift_release();
              *(void *)&v766.st_dev = sub_10012133C;
              v766.st_ino = v555;
              sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v766, (uint64_t)&v763, (uint64_t)&v767, (uint64_t)&v767._clients);
              swift_release();
              *(void *)&v766.st_dev = sub_100121338;
              v766.st_ino = v558;
              sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v766, (uint64_t)&v763, (uint64_t)&v767, (uint64_t)&v767._clients);
              swift_release();
              *(void *)&v766.st_dev = sub_10012133C;
              v766.st_ino = v559;
              sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v766, (uint64_t)&v763, (uint64_t)&v767, (uint64_t)&v767._clients);
              swift_release();
              *(void *)&v766.st_dev = sub_10012133C;
              v766.st_ino = v560;
              sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v766, (uint64_t)&v763, (uint64_t)&v767, (uint64_t)&v767._clients);
              os_log_t v569 = isa;
              swift_release();
              *(void *)&v766.st_dev = sub_100121338;
              v766.st_ino = v562;
              sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v766, (uint64_t)&v763, (uint64_t)&v767, (uint64_t)&v767._clients);
              v139 = 0;
              swift_release();
              v570 = (uint8_t *)v759;
              _os_log_impl((void *)&_mh_execute_header, (os_log_t)v759, (os_log_type_t)v758, "failed to write import cookie for domain %{public}s: %s", v757, 0x16u);
              swift_arrayDestroy();
              swift_slowDealloc();
              sub_100719B98();

              (*(void (**)(char *, uint64_t))(v737 + 8))(v740, v746);
              ((void (*)(char *, NSObject *))v569[1].isa)(v736, v762);
              swift_release();
              id v421 = v710;
              goto LABEL_169;
            }
LABEL_218:
            swift_errorRelease();
            __break(1u);
            swift_errorRelease();
            __break(1u);
            swift_errorRelease();
            __break(1u);
            goto LABEL_219;
          }
          sub_100595FB8(v516);
          uint64_t v517 = (uint64_t)v139;
          v760 = 0;
        }
        sub_1006A75AC();
        uint64_t v519 = swift_allocObject();
        *(void *)(v519 + 16) = v517;
        swift_errorRetain();
        v520 = sub_10096B470();
        int v521 = sub_10096C5B0();
        __darwin_ino64_t v522 = swift_allocObject();
        *(unsigned char *)(v522 + 16) = 64;
        __darwin_ino64_t v523 = swift_allocObject();
        *(unsigned char *)(v523 + 16) = 8;
        uint64_t v524 = swift_allocObject();
        *(void *)(v524 + 16) = sub_10016B3E8;
        *(void *)(v524 + 24) = v519;
        __darwin_ino64_t v525 = swift_allocObject();
        *(void *)(v525 + 16) = sub_10016B410;
        *(void *)(v525 + 24) = v524;
        sub_10002B7CC(&qword_100ACD798);
        uint64_t v526 = swift_allocObject();
        sub_10038FCB0(v526, 3);
        void *v527 = sub_10012133C;
        v527[1] = v522;
        v527[2] = sub_10012133C;
        v527[3] = v523;
        v527[4] = sub_10016B418;
        v527[5] = v525;
        swift_retain();
        swift_retain();
        swift_retain();
        swift_bridgeObjectRelease();
        LODWORD(v759) = v521;
        if (os_log_type_enabled(v520, (os_log_type_t)v521))
        {
          uint64_t v528 = sub_100719B90();
          v767.super.os_log_t isa = (Class)swift_slowAlloc();
          v767._clients = 0;
          *(_WORD *)uint64_t v528 = 258;
          uint64_t v763 = v528 + 2;
          *(void *)&v766.st_dev = sub_10012133C;
          v766.st_ino = v522;
          v529 = v760;
          sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v766, (uint64_t)&v763, (uint64_t)&v767, (uint64_t)&v767._clients);
          if (v529) {
            goto LABEL_218;
          }
          swift_release();
          *(void *)&v766.st_dev = sub_10012133C;
          v766.st_ino = v523;
          sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v766, (uint64_t)&v763, (uint64_t)&v767, (uint64_t)&v767._clients);
          swift_release();
          *(void *)&v766.st_dev = sub_10016B418;
          v766.st_ino = v525;
          sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v766, (uint64_t)&v763, (uint64_t)&v767, (uint64_t)&v767._clients);
          v760 = 0;
          os_log_t v164 = isa;
          swift_release();
          _os_log_impl((void *)&_mh_execute_header, v520, (os_log_type_t)v759, "can't mark the root dataless: %@", (uint8_t *)v528, 0xCu);
          sub_10002B7CC((uint64_t *)&unk_100ACCBC0);
          swift_arrayDestroy();
          swift_slowDealloc();
          sub_100719B98();

          swift_errorRelease();
          (*(void (**)(char *, uint64_t))(v737 + 8))(v725, v746);
          __darwin_ino64_t v269 = v752;
        }
        else
        {
          swift_errorRelease();

          swift_release();
          swift_release();
          swift_release();
          (*(void (**)(char *, uint64_t))(v737 + 8))(v725, v746);
          os_log_t v164 = isa;
        }
        v530 = v736;
        goto LABEL_155;
      }
      sub_10096AD20(v209);
      v414 = v413;
      sub_10096AD20(v415);
      v417 = v416;
      *(void *)&v766.st_dev = 0;
      unsigned int v418 = [v710 moveItemAtURL:v414 toURL:v416 error:&v766];

      if (v418)
      {
        v419 = (void (*)(char *, NSObject *))v164[1].isa;
        id v420 = *(id *)&v766.st_dev;
        v163 = v762;
        v419(v202, v762);
      }
      else
      {
        id v465 = *(id *)&v766.st_dev;
        sub_10096ABF0();

        swift_willThrow();
        swift_errorRelease();
        v163 = v762;
        ((void (*)(char *, NSObject *))v164[1].isa)(v202, v762);
        v139 = 0;
      }
    }
    __darwin_ino64_t v165 = v752;
    goto LABEL_70;
  }
  BOOL v147 = sub_1006B1654((uint64_t)v125);
  v148 = (void (**)(os_log_t, NSObject *))&v92[1];
  uint64_t v149 = 4;
  os_log_t v150 = v755;
  while (1)
  {
    v152 = (v149 - 4);
    if (v147) {
      id v153 = *(id *)&v125[8 * v149];
    }
    else {
      id v153 = (id)sub_10096CC30();
    }
    v154 = v153;
    v155 = (uint8_t *)(v149 - 3);
    if (__OFADD__(v152, 1))
    {
      __break(1u);
      goto LABEL_185;
    }
    id v156 = [v153 knownFolder];
    sub_10096ADD0();

    v157 = v139;
    v158 = sub_100169D04((uint64_t)v150, 2);
    if (v139)
    {
      swift_bridgeObjectRelease();

      (*v148)(v150, v762);
      goto LABEL_56;
    }
    v159 = v158;
    (*v148)(v150, v762);
    if (v159) {
      break;
    }
LABEL_44:

    ++v149;
    BOOL v151 = v155 == v753;
    v129 = v758;
    if (v151) {
      goto LABEL_53;
    }
  }
  id v160 = [v747 providerDomainID];
  char v161 = sub_10025BE60(v159, v160);

  if (v161)
  {

    v139 = v157;
    v125 = (uint8_t *)v759;
    os_log_t v150 = v755;
    goto LABEL_44;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  j___sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
  NSString v170 = sub_10096BC00();
  swift_bridgeObjectRelease();
  id v171 = objc_msgSend(v170, "fp_obfuscatedProviderDomainID");

  uint64_t v172 = _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
  uint64_t v174 = v173;

  sub_1006A75AC();
  uint64_t v175 = swift_allocObject();
  *(void *)(v175 + 16) = v154;
  uint64_t v176 = swift_allocObject();
  *(void *)(v176 + 16) = v172;
  *(void *)(v176 + 24) = v174;
  v760 = v154;
  uint64_t v177 = sub_10096B470();
  LODWORD(v761) = sub_10096C5C0();
  uint64_t v178 = swift_allocObject();
  *(unsigned char *)(v178 + 16) = 34;
  uint64_t v759 = swift_allocObject();
  *(unsigned char *)(v759 + 16) = 8;
  uint64_t v179 = swift_allocObject();
  *(void *)(v179 + 16) = sub_10016B4A4;
  *(void *)(v179 + 24) = v175;
  __darwin_ino64_t v180 = swift_allocObject();
  *(void *)(v180 + 16) = sub_100121318;
  *(void *)(v180 + 24) = v179;
  v181 = (uint8_t *)swift_allocObject();
  v181[16] = 34;
  v182 = (uint8_t *)v177;
  uint64_t v183 = swift_allocObject();
  *(unsigned char *)(v183 + 16) = 8;
  uint64_t v184 = swift_allocObject();
  *(void *)(v184 + 16) = j___s9libfssync13DocumentWharfC5labelSSvg;
  *(void *)(v184 + 24) = v176;
  __darwin_ino64_t v185 = v178;
  __darwin_ino64_t v186 = swift_allocObject();
  *(void *)(v186 + 16) = sub_100121318;
  *(void *)(v186 + 24) = v184;
  v187 = (uint8_t *)v759;
  sub_10002B7CC(&qword_100ACD798);
  uint64_t v188 = swift_allocObject();
  sub_10038FCB0(v188, 6);
  void *v189 = sub_10012133C;
  v189[1] = v185;
  v189[2] = sub_10012133C;
  v189[3] = v187;
  v189[4] = sub_100121338;
  v189[5] = v180;
  v189[6] = sub_10012133C;
  v189[7] = v181;
  v189[8] = sub_10012133C;
  v189[9] = v183;
  v189[10] = sub_100121338;
  v189[11] = v186;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled((os_log_t)v182, (os_log_type_t)v761))
  {
    v755 = v183;
    v758 = v181;
    uint64_t v190 = sub_100719B90();
    v191 = (uint8_t *)swift_slowAlloc();
    v767.super.os_log_t isa = 0;
    v753 = v191;
    v767._clients = v191;
    *(_WORD *)uint64_t v190 = 514;
    uint64_t v763 = v190 + 2;
    *(void *)&v766.st_dev = sub_10012133C;
    v766.st_ino = v185;
    sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v766, (uint64_t)&v763, (uint64_t)&v767, (uint64_t)&v767._clients);
    swift_release();
    *(void *)&v766.st_dev = sub_10012133C;
    v766.st_ino = (__darwin_ino64_t)v187;
    sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v766, (uint64_t)&v763, (uint64_t)&v767, (uint64_t)&v767._clients);
    v757 = (uint8_t *)v190;
    os_log_t v192 = v755;
    swift_release();
    *(void *)&v766.st_dev = sub_100121338;
    v766.st_ino = v180;
    sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v766, (uint64_t)&v763, (uint64_t)&v767, (uint64_t)&v767._clients);
    uint64_t v193 = v737;
    uint64_t v759 = (uint64_t)v182;
    swift_release();
    *(void *)&v766.st_dev = sub_10012133C;
    v766.st_ino = (__darwin_ino64_t)v758;
    sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v766, (uint64_t)&v763, (uint64_t)&v767, (uint64_t)&v767._clients);
    v194 = v745;
    swift_release();
    *(void *)&v766.st_dev = sub_10012133C;
    v766.st_ino = (__darwin_ino64_t)v192;
    sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v766, (uint64_t)&v763, (uint64_t)&v767, (uint64_t)&v767._clients);
    v195 = v754;
    v196 = v735;
    swift_release();
    *(void *)&v766.st_dev = sub_100121338;
    v766.st_ino = v186;
    sub_100719BB4((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v766, (uint64_t)&v763, (uint64_t)&v767, (uint64_t)&v767._clients);
    swift_release();
    v197 = (uint8_t *)v759;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v759, (os_log_type_t)v761, "Attempting to import detached folder at %{public}s into new domain %{public}s", v757, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    sub_100719B98();

    (*(void (**)(char *, uint64_t))(v193 + 8))(v196, v746);
  }
  else
  {

    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v737 + 8))(v735, v746);
    v194 = v745;
    v195 = v754;
  }
  sub_10096A5F0();
  sub_10002B7CC(&qword_100ACE1E0);
  uint64_t v360 = swift_allocObject();
  uint64_t v361 = sub_10038FCB0(v360, 1);
  v363 = v362;
  v364 = v362 + 2;
  uint64_t *v362 = _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
  v363[1] = v365;
  v366 = v760;
  id v367 = [(uint8_t *)v760 knownFolder];
  sub_10096ADD0();

  v368 = v762;
  v363[5] = (uint64_t)v762;
  v369 = sub_10009C958(v364);
  ((void (*)(uint64_t *, char *, NSObject *))isa[4].isa)(v369, v194, v368);
  v370._uint64_t countAndFlagsBits = v361;
  uint64_t v371 = Filename.init(rawValue:)(v370).rawValue._countAndFlagsBits;
  sub_10004621C(v371);
  sub_10016B7B8((unint64_t *)&qword_100ACB680, (void (*)(uint64_t))&type metadata accessor for CocoaError);
  v372 = v751;
  sub_10096ABD0();
  sub_10096A4D0();
  (*((void (**)(uint8_t *, NSObject *))v749 + 1))(v195, v372);
  swift_willThrow();

LABEL_105:
LABEL_106:
  sub_10002B770((uint64_t)v705, &qword_100ACA8C0);
}

uint64_t sub_100169250()
{
  _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
  NSString v0 = sub_10096BC00();
  swift_bridgeObjectRelease();
  id v1 = objc_msgSend(v0, "fp_obfuscatedProviderDomainID");

  uint64_t v2 = _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
  return v2;
}

uint64_t sub_1001692C8(void *a1)
{
  id v1 = [a1 providerDomainID];
  _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();

  NSString v2 = sub_10096BC00();
  swift_bridgeObjectRelease();
  id v3 = objc_msgSend(v2, "fp_obfuscatedProviderDomainID");

  uint64_t v4 = _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
  return v4;
}

uint64_t sub_100169368@<X0>(uint64_t a1@<X0>, int a2@<W1>, _DWORD *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for ItemMetadata();
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10010DA98(a1, (uint64_t)v8);
  sub_10002C548((uint64_t)v12);
  sub_10016B800((uint64_t)v12, (uint64_t)v11);
  void v10[4] = a2;
  *a3 = sub_100944770((uint64_t)v11, (unint64_t)sub_10016B868, (unint64_t)v10);
  return sub_10010DAFC((uint64_t)v8);
}

uint64_t sub_10016945C(void *a1, SEL *a2)
{
  uint64_t v4 = sub_10096AE50();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = [a1 *a2];
  sub_10096ADD0();

  sub_10096AD20(v9);
  uint64_t v11 = v10;
  id v12 = objc_msgSend(v10, "fp_shortDescription");

  uint64_t v13 = _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v13;
}

id sub_100169588()
{
  swift_getErrorValue();
  return Error.prettyDescription.getter(v1);
}

uint64_t sub_1001695C4@<X0>(NSURL *a1@<X8>)
{
  sub_10096AD20(a1);
  NSString v2 = v1;
  id v3 = objc_msgSend(v1, "fp_shortDescription");

  uint64_t v4 = _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
  return v4;
}

uint64_t sub_10016962C(uint64_t a1)
{
  swift_beginAccess();
  NSString v2 = *(void **)(a1 + 16);
  if (!v2) {
    return 0x3E6C696E3CLL;
  }
  uint64_t v10 = v2;
  sub_100033BA8();
  sub_10016B7B8(&qword_100ACDE30, (void (*)(uint64_t))sub_100033BA8);
  id v3 = v2;
  if (sub_10096D240())
  {
  }
  else
  {
    swift_allocError();
    *uint64_t v5 = v10;
  }
  uint64_t v6 = (void *)sub_10096ABE0();
  swift_errorRelease();
  id v7 = objc_msgSend(v6, "fp_prettyDescription");

  id v8 = [v7 description];
  uint64_t v4 = _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();

  return v4;
}

uint64_t sub_100169794()
{
  sub_10096AE10();
  sub_100169DFC(0);
  sub_10096BCF0();
  uint64_t v0 = fpfs_lp_openat();
  swift_release();
  if ((v0 & 0x80000000) != 0)
  {
    int v2 = sub_10096B4D0();
    sub_1005970E0(v2, 1, 0, 0xAu);
    swift_willThrow();
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
    sub_10092A8B4(v0);
    swift_bridgeObjectRelease();
    return sub_100595FB8(v0);
  }
}

uint64_t sub_100169890@<X0>(_DWORD *a1@<X8>)
{
  sub_10096AE10();
  v5[4] = sub_10002BFF4;
  v5[5] = 0;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 1107296256;
  v5[2] = sub_10005D5F4;
  v5[3] = &unk_100A72530;
  int v2 = _Block_copy(v5);
  swift_release();
  sub_10096BCF0();
  swift_bridgeObjectRelease();
  int dataless_fault_at = fpfs_create_dataless_fault_at();
  swift_release();
  _Block_release(v2);
  *a1 = dataless_fault_at;
  uint64_t result = swift_isEscapingClosureAtFileLocation();
  if (result) {
    __break(1u);
  }
  return result;
}

id InternalPathsManager.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return [v1 init];
}

void InternalPathsManager.init()()
{
}

id InternalPathsManager.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for InternalPathsManager();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_100169B80(unint64_t a1)
{
  if (!(a1 >> 62)) {
    return *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRetain();
  uint64_t v2 = sub_10096CE70();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_100169BE0()
{
  return type metadata accessor for InternalPathsManager();
}

void sub_100169BE8()
{
  sub_100169CA4();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_100169CA4()
{
  if (!qword_100ACB900)
  {
    sub_10096AE50();
    unint64_t v0 = sub_10096C890();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100ACB900);
    }
  }
}

uint64_t sub_100169CFC(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void *sub_100169D04(uint64_t a1, uint64_t a2)
{
  id v3 = self;
  sub_10096AD20(v4);
  uint64_t v6 = v5;
  id v13 = 0;
  uint64_t v14 = 0;
  LODWORD(v3) = [v3 getProviderDomainID:v5 location:a2 foundDomainID:&v14 error:&v13];

  id v7 = v14;
  if (v3)
  {
    id v8 = v13;
    id v9 = v7;
  }
  else
  {
    id v10 = v13;
    id v11 = v7;
    sub_10096ABF0();

    swift_willThrow();
  }
  return v7;
}

uint64_t sub_100169DFC(int a1)
{
  if (a1) {
    return a1 | 0x104u;
  }
  else {
    return 33028;
  }
}

uint64_t sub_100169E14(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = sub_10096B0E0();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = [objc_allocWithZone((Class)NSDateFormatter) init];
  [v8 setDateStyle:1];
  [v8 setTimeStyle:1];
  sub_10096B0D0();
  Class isa = sub_10096B030().super.isa;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  id v10 = [v8 stringFromDate:isa];

  uint64_t v11 = _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
  unint64_t v13 = v12;

  uint64_t v26 = v11;
  unint64_t v27 = v13;
  uint64_t v24 = 47;
  unint64_t v25 = 0xE100000000000000;
  uint64_t v22 = 45;
  unint64_t v23 = 0xE100000000000000;
  sub_10001F9C0();
  uint64_t v14 = sub_10096C910();
  unint64_t v16 = v15;
  swift_bridgeObjectRelease();
  uint64_t v26 = v14;
  unint64_t v27 = v16;
  uint64_t v24 = 44;
  unint64_t v25 = 0xE100000000000000;
  uint64_t v22 = 0;
  unint64_t v23 = 0xE000000000000000;
  uint64_t v17 = sub_10096C910();
  uint64_t v19 = v18;
  swift_bridgeObjectRelease();
  uint64_t v26 = 10272;
  unint64_t v27 = 0xE200000000000000;
  v28._uint64_t countAndFlagsBits = v17;
  v28._object = v19;
  sub_10096BDC0(v28);
  swift_bridgeObjectRelease();
  v29._uint64_t countAndFlagsBits = 41;
  v29._object = (void *)0xE100000000000000;
  sub_10096BDC0(v29);
  uint64_t v24 = a1;
  unint64_t v25 = a2;
  swift_bridgeObjectRetain();
  uint64_t v24 = sub_10096BED0();
  unint64_t v25 = v20;
  sub_10096BDB0();
  swift_bridgeObjectRelease();

  return v24;
}

uint64_t sub_10016A0CC(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_100169D04(a1, 1);
  if (!v2)
  {
    uint64_t v6 = v4;
    id v7 = [a2 providerDomainID];
    id v8 = v7;
    if (v6)
    {
      uint64_t v9 = _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
      uint64_t v11 = v10;
      if (v9 == _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0() && v11 == v12)
      {

        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v14 = sub_10096D2D0();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        char v5 = 0;
        if ((v14 & 1) == 0) {
          return v5 & 1;
        }
      }
      char v5 = 1;
    }
    else
    {

      char v5 = 0;
    }
  }
  return v5 & 1;
}

void sub_10016A1C4()
{
  sub_10015B8C8(*(void **)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_10016A1E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002B7CC(&qword_100ACA8C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10016A248(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002B7CC(&qword_100ACA8C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10016A2B0@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_10015EE18(a1, a2);
}

uint64_t sub_10016A2D0(uint64_t a1, uint64_t a2)
{
  if (a2 != 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10016A2E4@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  return sub_10015F85C(a1, *(char **)(v2 + 16), *(void *)(v2 + 24), *(NSObject **)(v2 + 32), a2);
}

BOOL sub_10016A304(int a1)
{
  memset(&v6, 0, 28);
  memset(&v6.st_atimespec, 0, 112);
  int v2 = fstat(a1, &v6);
  BOOL result = 0;
  if (!v2)
  {
    int st_mode = v6.st_mode;
    int v5 = sub_10096B520() & st_mode;
    return v5 == (unsigned __int16)sub_10096B520()
        && fgetxattr(a1, "com.apple.fileprovider.detached-link#P", 0, 0, 0, 0) >= 0;
  }
  return result;
}

void sub_10016A3E0()
{
  sub_100160710(*(void *)(v0 + 16), *(NSObject **)(v0 + 24), *(uint8_t **)(v0 + 32), *(uint8_t **)(v0 + 40), *(void *)(v0 + 48), *(unsigned char **)(v0 + 56));
}

uint64_t sub_10016A40C()
{
  return swift_deallocObject();
}

uint64_t sub_10016A41C()
{
  return swift_deallocObject();
}

uint64_t sub_10016A430()
{
  uint64_t v0 = *(void *)(sub_10096AE50() - 8);
  return sub_1001695C4((NSURL *)((*(unsigned __int8 *)(v0 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v0 + 80)));
}

uint64_t sub_10016A484()
{
  return swift_deallocObject();
}

uint64_t sub_10016A494()
{
  return swift_deallocObject();
}

uint64_t sub_10016A4A8()
{
  return sub_10016962C(v0);
}

uint64_t sub_10016A4C4()
{
  return swift_deallocObject();
}

uint64_t sub_10016A4D4()
{
  return swift_deallocObject();
}

uint64_t sub_10016A4E4()
{
  return swift_deallocObject();
}

uint64_t sub_10016A4F4()
{
  return swift_deallocObject();
}

uint64_t sub_10016A504(uint64_t a1, int a2)
{
  uint64_t v4 = sub_10096B480();
  uint64_t v114 = *(void *)(v4 - 8);
  uint64_t v115 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  v112 = (uint8_t *)&v99 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v108 = ((char *)&v99 - v8);
  __chkstk_darwin(v7);
  uint64_t v10 = ((char *)&v99 - v9);
  uint64_t v11 = sub_10096B0E0();
  __chkstk_darwin(v11 - 8);
  unint64_t v13 = (char *)&v99 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10096AE50();
  uint64_t v117 = *(void *)(v14 - 8);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v99 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v106 = (char *)&v99 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v22 = (void (*)(char *, uint64_t))((char *)&v99 - v21);
  __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v99 - v23;
  uint64_t v116 = a1;
  sub_10096AD80();
  int v107 = a2;
  uint64_t v111 = v17;
  if ((a2 & 1) == 0) {
    goto LABEL_5;
  }
  int v113 = v22;
  os_log_t v109 = v10;
  id v25 = [self defaultManager];
  sub_10096AE10();
  NSString v26 = sub_10096BC00();
  swift_bridgeObjectRelease();
  objc_msgSend(v25, "fp_createPathIfNeeded:", v26);

  sub_10096AE10();
  sub_100169DFC(0x100000);
  sub_10096BCF0();
  uint64_t v27 = fpfs_lp_openat();
  swift_release();
  if ((v27 & 0x80000000) != 0)
  {
    int v78 = sub_10096B4D0();
    uint64_t v56 = sub_1005970E0(v78, 1, 0, 0xAu);
    swift_willThrow();
    swift_bridgeObjectRelease();
    uint64_t v29 = v117;
    uint64_t v36 = v14;
    int v113 = *(void (**)(char *, uint64_t))(v117 + 8);
    v113(v24, v14);
LABEL_19:
    uint64_t v57 = v111;
    uint64_t v46 = v112;
    goto LABEL_20;
  }
  swift_bridgeObjectRelease();
  int v28 = fpfs_fset_acl();
  uint64_t v29 = v117;
  if (v28 < 0)
  {
    int v79 = sub_10096B4D0();
    uint64_t v56 = sub_1005970E0(v79, 16, 0, 2u);
    swift_willThrow();
    uint64_t v36 = v14;
    int v113 = *(void (**)(char *, uint64_t))(v29 + 8);
    v113(v24, v14);
    sub_100595FB8(v27);
    goto LABEL_19;
  }
  close(v27);
  uint64_t v10 = v109;
  uint64_t v22 = v113;
LABEL_5:
  id v110 = v24;
  BYTE6(v122) = 0;
  WORD2(v122) = 0;
  long long v124 = 0u;
  long long v125 = 0u;
  long long v126 = 0u;
  long long v127 = 0u;
  long long v128 = 0u;
  char v129 = 0;
  int v130 = 0;
  long long v131 = 0u;
  long long v132 = 0u;
  long long v133 = 0u;
  memset(v134, 0, sizeof(v134));
  uint64_t v136 = 0;
  uint64_t v137 = 0;
  uint64_t v135 = 0;
  int v138 = 0;
  LODWORD(v122) = 2;
  __int16 v123 = 448;
  sub_10016B8A0((uint64_t)&v122);
  sub_10096B0D0();
  *((void *)&v124 + 1) = sub_1003E0058((uint64_t)v13);
  *(void *)&long long v125 = v30;
  sub_10096B0D0();
  *((void *)&v125 + 1) = sub_1003E0058((uint64_t)v13);
  *(void *)&long long v126 = v31;
  id v32 = (id)fpfs_current_or_default_log();
  sub_10096B490();
  uint64_t v33 = v117;
  uint64_t v104 = *(void (**)(char *, uint64_t, uint64_t))(v117 + 16);
  uint64_t v105 = v117 + 16;
  v104((char *)v22, v116, v14);
  uint64_t v34 = sub_10096B470();
  os_log_type_t v35 = sub_10096C590();
  uint64_t v36 = v14;
  if (os_log_type_enabled(v34, v35))
  {
    os_log_t v102 = v34;
    uint64_t v37 = swift_slowAlloc();
    uint64_t v101 = swift_slowAlloc();
    uint64_t v121 = v101;
    uint64_t v100 = (uint8_t *)v37;
    *(_DWORD *)uint64_t v37 = 136315138;
    int v113 = (void (*)(char *, uint64_t))(v37 + 4);
    sub_10096AD20((NSURL *)(v37 + 4));
    uint64_t v39 = v38;
    id v40 = objc_msgSend(v38, "fp_shortDescription");
    os_log_t v109 = v10;
    uint64_t v41 = (char *)v22;
    id v42 = v40;

    uint64_t v43 = _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
    uint64_t v103 = v36;
    unint64_t v45 = v44;

    uint64_t v46 = v112;
    os_log_type_t v47 = v35;
    uint64_t v48 = v110;
    uint64_t v49 = v116;
    uint64_t v119 = sub_100719D44(v43, v45, &v121);
    uint64_t v29 = v117;
    sub_10096C8C0();
    uint64_t v36 = v103;
    swift_bridgeObjectRelease();
    uint64_t v50 = v41;
    uint64_t v51 = v48;
    int v113 = *(void (**)(char *, uint64_t))(v29 + 8);
    v113(v50, v36);
    os_log_t v52 = v102;
    _os_log_impl((void *)&_mh_execute_header, v102, v47, "Marking root dataless %s", v100, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v53 = *(uint64_t (**)(os_log_t, uint64_t))(v114 + 8);
    uint64_t v54 = v53(v109, v115);
  }
  else
  {
    int v113 = *(void (**)(char *, uint64_t))(v33 + 8);
    v113((char *)v22, v14);

    uint64_t v53 = *(uint64_t (**)(os_log_t, uint64_t))(v114 + 8);
    uint64_t v54 = v53(v10, v115);
    uint64_t v29 = v33;
    uint64_t v46 = v112;
    uint64_t v51 = v110;
    uint64_t v49 = v116;
  }
  __chkstk_darwin(v54);
  *(&v99 - 2) = v49;
  *(&v99 - 1) = (uint64_t)&v122;
  uint64_t v55 = v118;
  sub_10084B138((void *(*)(void *__return_ptr, uint64_t))sub_10016B8B0);
  uint64_t v118 = v55;
  if (v55)
  {
    v113(v51, v36);
    uint64_t v56 = v118;
LABEL_10:
    uint64_t v57 = v111;
LABEL_21:
    id v80 = (id)fpfs_current_or_default_log();
    sub_10096B490();
    (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v57, v49, v36);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v81 = sub_10096B470();
    os_log_type_t v82 = sub_10096C5B0();
    if (os_log_type_enabled(v81, v82))
    {
      uint64_t v83 = swift_slowAlloc();
      uint64_t v118 = v56;
      uint64_t v84 = v83;
      id v110 = (char *)swift_slowAlloc();
      uint64_t v116 = swift_slowAlloc();
      uint64_t v122 = v116;
      *(_DWORD *)uint64_t v84 = 136315394;
      uint64_t v108 = (v84 + 4);
      os_log_t v109 = v81;
      sub_10096AD20((NSURL *)(v84 + 4));
      uint64_t v86 = v85;
      uint64_t v87 = v57;
      id v88 = objc_msgSend(v85, "fp_shortDescription");

      uint64_t v89 = _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
      unint64_t v91 = v90;

      uint64_t v121 = sub_100719D44(v89, v91, &v122);
      sub_10096C8C0();
      swift_bridgeObjectRelease();
      v113(v87, v36);
      *(_WORD *)(v84 + 12) = 2112;
      swift_getErrorValue();
      id v92 = Error.prettyDescription.getter(v120);
      uint64_t v121 = (uint64_t)v92;
      sub_10096C8C0();
      *(void *)id v110 = v92;
      swift_errorRelease();
      swift_errorRelease();
      os_log_t v93 = v109;
      _os_log_impl((void *)&_mh_execute_header, v109, v82, "Error while creating root %s: %@", (uint8_t *)v84, 0x16u);
      sub_10002B7CC((uint64_t *)&unk_100ACCBC0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint8_t *, uint64_t))(v114 + 8))(v112, v115);
    }
    else
    {
      v113(v57, v36);
      swift_errorRelease();
      swift_errorRelease();

      (*(void (**)(uint8_t *, uint64_t))(v114 + 8))(v46, v115);
    }
    return swift_willThrow();
  }
  if (v107)
  {
    sub_10096AE10();
    sub_100169DFC(0x100000);
    sub_10096BCF0();
    uint64_t v58 = fpfs_lp_openat();
    swift_release();
    if ((v58 & 0x80000000) != 0)
    {
      int v97 = sub_10096B4D0();
      uint64_t v56 = sub_1005970E0(v97, 1, 0, 0xAu);
      swift_willThrow();
      swift_bridgeObjectRelease();
      uint64_t v29 = v117;
      v113(v51, v36);
      uint64_t v46 = v112;
      uint64_t v49 = v116;
      goto LABEL_10;
    }
    swift_bridgeObjectRelease();
    int v59 = fpfs_fset_acl();
    uint64_t v29 = v117;
    uint64_t v57 = v111;
    if ((v59 & 0x80000000) == 0)
    {
      close(v58);
      uint64_t v49 = v116;
      goto LABEL_15;
    }
    int v98 = sub_10096B4D0();
    uint64_t v56 = sub_1005970E0(v98, 1024, 0, 2u);
    swift_willThrow();
    v113(v51, v36);
    sub_100595FB8(v58);
    uint64_t v46 = v112;
LABEL_20:
    uint64_t v49 = v116;
    goto LABEL_21;
  }
LABEL_15:
  id v60 = (id)fpfs_current_or_default_log();
  uint64_t v61 = v108;
  sub_10096B490();
  uint64_t v62 = v106;
  v104(v106, v49, v36);
  uint64_t v63 = v36;
  uint64_t v64 = sub_10096B470();
  os_log_type_t v65 = sub_10096C590();
  int v66 = v65;
  if (os_log_type_enabled(v64, v65))
  {
    uint64_t v67 = swift_slowAlloc();
    uint64_t v116 = swift_slowAlloc();
    uint64_t v121 = v116;
    LODWORD(v111) = v66;
    v112 = (uint8_t *)v67;
    *(_DWORD *)uint64_t v67 = 136315138;
    os_log_t v109 = (os_log_t)(v67 + 4);
    sub_10096AD20((NSURL *)(v67 + 4));
    uint64_t v69 = v68;
    id v70 = objc_msgSend(v68, "fp_shortDescription");

    uint64_t v71 = _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
    uint64_t v72 = v63;
    unint64_t v74 = v73;

    uint64_t v119 = sub_100719D44(v71, v74, &v121);
    sub_10096C8C0();
    swift_bridgeObjectRelease();
    uint64_t v75 = v113;
    v113(v62, v72);
    _os_log_impl((void *)&_mh_execute_header, v64, (os_log_type_t)v111, "Created dataless root %s", v112, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v53(v108, v115);
    uint64_t v76 = v110;
    uint64_t v77 = v72;
  }
  else
  {

    uint64_t v95 = v63;
    uint64_t v96 = v63;
    uint64_t v75 = v113;
    v113(v62, v95);
    v53(v61, v115);
    uint64_t v76 = v51;
    uint64_t v77 = v96;
  }
  return ((uint64_t (*)(char *, uint64_t))v75)(v76, v77);
}

uint64_t sub_10016B244()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_10016B27C()
{
  return swift_deallocObject();
}

uint64_t sub_10016B28C()
{
  return swift_deallocObject();
}

uint64_t sub_10016B29C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10016B2D4()
{
  return swift_deallocObject();
}

uint64_t sub_10016B2E4()
{
  return swift_deallocObject();
}

uint64_t sub_10016B2F4()
{
  return swift_deallocObject();
}

uint64_t sub_10016B32C()
{
  return sub_10016945C(*(void **)(v0 + 16), (SEL *)&selRef_logicalLocation);
}

uint64_t sub_10016B350()
{
  return swift_deallocObject();
}

uint64_t sub_10016B360()
{
  return swift_deallocObject();
}

uint64_t sub_10016B370()
{
  return swift_deallocObject();
}

uint64_t sub_10016B380()
{
  return swift_deallocObject();
}

uint64_t sub_10016B390@<X0>(_DWORD *a1@<X8>)
{
  return sub_100169368(*(void *)(v1 + 16), *(_DWORD *)(v1 + 24), a1);
}

uint64_t sub_10016B3B0()
{
  swift_errorRelease();

  return swift_deallocObject();
}

id sub_10016B3E8()
{
  return sub_100169588();
}

uint64_t sub_10016B3F0()
{
  return swift_deallocObject();
}

uint64_t sub_10016B400()
{
  return swift_deallocObject();
}

uint64_t sub_10016B410()
{
  return sub_100445E7C(*(uint64_t (**)(void))(v0 + 16));
}

void sub_10016B418(uint64_t *a1, void **a2, uint64_t a3)
{
  sub_100445DC4(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_10016B424()
{
  return swift_deallocObject();
}

uint64_t sub_10016B434()
{
  return swift_deallocObject();
}

uint64_t sub_10016B444()
{
  return swift_deallocObject();
}

uint64_t sub_10016B454()
{
  return swift_deallocObject();
}

uint64_t sub_10016B464()
{
  return swift_deallocObject();
}

uint64_t sub_10016B474()
{
  return swift_deallocObject();
}

uint64_t sub_10016B484()
{
  return swift_deallocObject();
}

uint64_t sub_10016B494()
{
  return swift_deallocObject();
}

uint64_t sub_10016B4A4()
{
  return sub_10016945C(*(void **)(v0 + 16), (SEL *)&selRef_knownFolder);
}

uint64_t sub_10016B4C8()
{
  return swift_deallocObject();
}

uint64_t sub_10016B4D8()
{
  return swift_deallocObject();
}

uint64_t sub_10016B4E8()
{
  return swift_deallocObject();
}

uint64_t sub_10016B4F8()
{
  return swift_deallocObject();
}

uint64_t DocumentWharf.label.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_10016B53C()
{
  return swift_deallocObject();
}

uint64_t sub_10016B54C()
{
  return swift_deallocObject();
}

uint64_t sub_10016B55C()
{
  return swift_deallocObject();
}

uint64_t sub_10016B56C()
{
  return swift_deallocObject();
}

uint64_t sub_10016B580()
{
  return swift_deallocObject();
}

uint64_t sub_10016B590()
{
  return swift_deallocObject();
}

uint64_t sub_10016B5A4()
{
  return swift_deallocObject();
}

uint64_t sub_10016B5B4()
{
  return swift_deallocObject();
}

uint64_t sub_10016B5C8()
{
  return swift_deallocObject();
}

uint64_t sub_10016B5D8()
{
  return swift_deallocObject();
}

uint64_t sub_10016B5E8()
{
  return swift_deallocObject();
}

uint64_t sub_10016B5F8()
{
  return swift_deallocObject();
}

uint64_t sub_10016B608()
{
  return swift_deallocObject();
}

uint64_t sub_10016B618()
{
  return swift_deallocObject();
}

uint64_t sub_10016B62C()
{
  return sub_100169250();
}

uint64_t sub_10016B648()
{
  return sub_1001692C8(*(void **)(v0 + 16));
}

uint64_t sub_10016B664()
{
  return swift_deallocObject();
}

uint64_t sub_10016B674()
{
  return swift_deallocObject();
}

uint64_t sub_10016B684()
{
  return swift_deallocObject();
}

uint64_t sub_10016B694()
{
  return swift_deallocObject();
}

uint64_t sub_10016B6A4()
{
  return swift_deallocObject();
}

uint64_t sub_10016B6B4()
{
  return swift_deallocObject();
}

uint64_t sub_10016B6C8()
{
  uint64_t v1 = sub_10096AE50();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80)), v1);

  return swift_deallocObject();
}

uint64_t sub_10016B758()
{
  return swift_deallocObject();
}

uint64_t sub_10016B768()
{
  return swift_deallocObject();
}

uint64_t sub_10016B778()
{
  return swift_deallocObject();
}

uint64_t sub_10016B788()
{
  return swift_deallocObject();
}

uint64_t sub_10016B798()
{
  return swift_deallocObject();
}

uint64_t sub_10016B7A8()
{
  return swift_deallocObject();
}

uint64_t sub_10016B7B8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10016B800(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002B7CC(&qword_100AD0EA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10016B868@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = fpfs_set_dataless_cmpfs_attrs();
  *a1 = result;
  return result;
}

uint64_t sub_10016B8A0(uint64_t result)
{
  *(_DWORD *)(result + 4) |= 1u;
  return result;
}

uint64_t sub_10016B8B0@<X0>(_DWORD *a1@<X8>)
{
  return sub_100169890(a1);
}

unint64_t sub_10016B9F4()
{
  unint64_t result = 0x7461447472617473;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0xD000000000000015;
      break;
    case 2:
      unint64_t result = 0x426E656553736168;
      break;
    case 3:
      unint64_t result = 0x66666F6B636162;
      break;
    case 4:
      unint64_t result = 0x656C6174537369;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10016BAB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10016CD60(a1, a2);
  *a3 = result;
  return result;
}

void sub_10016BAD8(unsigned char *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_10016BAE4(uint64_t a1)
{
  unint64_t v2 = sub_10016D240();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10016BB20(uint64_t a1)
{
  unint64_t v2 = sub_10016D240();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10016BB5C(void *a1)
{
  uint64_t v2 = swift_allocObject();
  sub_10016BBAC(a1);
  return v2;
}

uint64_t sub_10016BBAC(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10002B7CC((uint64_t *)&unk_100ACB5E0);
  __chkstk_darwin(v4 - 8);
  uint64_t v30 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10096B0E0();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v33 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = sub_10002B7CC(&qword_100ACDFB0);
  uint64_t v31 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  uint64_t v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = v7;
  uint64_t v11 = *(void (**)(void))(v7 + 56);
  uint64_t v36 = v2 + OBJC_IVAR____TtC9libfssync25VFSLookupItemContinuation_deletionDetectionDate;
  v11();
  uint64_t v12 = OBJC_IVAR____TtC9libfssync25VFSLookupItemContinuation_isStale;
  *(unsigned char *)(v2 + OBJC_IVAR____TtC9libfssync25VFSLookupItemContinuation_isStale) = 2;
  uint64_t v13 = OBJC_IVAR____TtC9libfssync25VFSLookupItemContinuation_backoff;
  *(void *)(v2 + OBJC_IVAR____TtC9libfssync25VFSLookupItemContinuation_backoff) = 100000000;
  uint64_t v14 = a1[3];
  os_log_type_t v35 = a1;
  sub_10002689C(a1, v14);
  sub_10016D240();
  swift_retain();
  uint64_t v15 = v38;
  sub_10096D570();
  if (v15)
  {
    swift_release();
    uint64_t v18 = v36;
    sub_1000268E0((uint64_t)v35);
    sub_10016D178(v18);
    type metadata accessor for VFSLookupItemContinuation();
    swift_deallocPartialClassInstance();
  }
  else
  {
    uint64_t v38 = v13;
    uint64_t v29 = v12;
    uint64_t v16 = v32;
    v37[0] = 0;
    sub_10016D354(&qword_100ACB9F0);
    uint64_t v17 = v33;
    sub_10096D040();
    (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(v2 + OBJC_IVAR____TtC9libfssync25VFSLookupItemContinuation_startDate, v17, v6);
    v37[0] = 1;
    uint64_t v20 = v30;
    sub_10096CFB0();
    uint64_t v21 = (uint64_t)v20;
    uint64_t v22 = v36;
    swift_beginAccess();
    sub_100157A4C(v21, v22);
    swift_endAccess();
    v37[0] = 2;
    char v23 = sub_10096D010();
    uint64_t v24 = v31;
    *(unsigned char *)(v2 + OBJC_IVAR____TtC9libfssync25VFSLookupItemContinuation_hasSeenBusy) = v23 & 1;
    v37[0] = 3;
    uint64_t v25 = sub_10096CF90();
    uint64_t v27 = 100000000;
    if ((v26 & 1) == 0) {
      uint64_t v27 = v25;
    }
    *(void *)(v2 + v38) = v27;
    v37[0] = 4;
    *(unsigned char *)(v2 + v29) = sub_10096CF80();
    swift_release();
    sub_10096CF60();
    sub_1000268E0((uint64_t)v37);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v10, v34);
    sub_1000268E0((uint64_t)v35);
  }
  return v2;
}

uint64_t sub_10016C0D0(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10002B7CC(&qword_100ACDF88);
  uint64_t v18 = *(void *)(v4 - 8);
  uint64_t v19 = v4;
  __chkstk_darwin(v4);
  uint64_t v17 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10002B7CC((uint64_t *)&unk_100ACB5E0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10002B7CC(&qword_100ACDF90);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002689C(a1, a1[3]);
  sub_10016D240();
  sub_10096D590();
  LOBYTE(v21[0]) = 0;
  sub_10096B0E0();
  sub_10016D354(&qword_100ACB9B8);
  uint64_t v13 = v20;
  sub_10096D1A0();
  if (!v13)
  {
    uint64_t v20 = v10;
    uint64_t v15 = v2 + OBJC_IVAR____TtC9libfssync25VFSLookupItemContinuation_deletionDetectionDate;
    swift_beginAccess();
    sub_10016D1D8(v15, (uint64_t)v8);
    LOBYTE(v21[0]) = 1;
    sub_10096D100();
    sub_10016D178((uint64_t)v8);
    LOBYTE(v21[0]) = 2;
    sub_10096D160();
    LOBYTE(v21[0]) = 3;
    sub_10096D180();
    LOBYTE(v21[0]) = *(unsigned char *)(v2 + OBJC_IVAR____TtC9libfssync25VFSLookupItemContinuation_isStale);
    char v22 = 4;
    sub_10002B7CC((uint64_t *)&unk_100AD7510);
    sub_10016D294();
    sub_10096D1A0();
    uint64_t v10 = v20;
    sub_10096D0D0();
    sub_10002689C(v21, v21[3]);
    sub_10016D300();
    uint64_t v16 = v17;
    sub_10096D590();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v16, v19);
    sub_1000268E0((uint64_t)v21);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_10016C4D4()
{
  uint64_t v1 = sub_10002B7CC((uint64_t *)&unk_100ACB5E0);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = v0 + OBJC_IVAR____TtC9libfssync25VFSLookupItemContinuation_deletionDetectionDate;
  swift_beginAccess();
  sub_10016D1D8(v4, (uint64_t)v3);
  uint64_t v5 = sub_10096B0E0();
  LODWORD(v4) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v3, 1, v5);
  sub_10016D178((uint64_t)v3);
  if v4 != 1 && (*(unsigned char *)(v0 + OBJC_IVAR____TtC9libfssync25VFSLookupItemContinuation_hasSeenBusy)) {
    return 2200000000;
  }
  if (*(uint64_t *)(v0 + OBJC_IVAR____TtC9libfssync25VFSLookupItemContinuation_backoff) >= 10000000000) {
    return 10000000000;
  }
  return *(void *)(v0 + OBJC_IVAR____TtC9libfssync25VFSLookupItemContinuation_backoff);
}

uint64_t sub_10016C608()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10002B7CC((uint64_t *)&unk_100ACB5E0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10096B0E0();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v26 - v10;
  uint64_t v31 = 0x3A7472617473;
  unint64_t v32 = 0xE600000000000000;
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v12((char *)&v26 - v10, v0 + OBJC_IVAR____TtC9libfssync25VFSLookupItemContinuation_startDate, v5);
  sub_10096B080();
  double v14 = v13;
  uint64_t v28 = *(uint64_t (**)(char *, uint64_t))(v6 + 8);
  uint64_t result = v28(v11, v5);
  double v16 = v14 * 1000000000.0;
  if ((~COERCE__INT64(v14 * 1000000000.0) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_20;
  }
  if (v16 <= -9.22337204e18)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (v16 >= 9.22337204e18)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  char v26 = (void (*)(char *, char *, uint64_t))v12;
  uint64_t v27 = v9;
  uint64_t v33 = (uint64_t)v16 / 1000000000;
  sub_10014D284();
  v35._uint64_t countAndFlagsBits = sub_10096C9C0();
  sub_10096BDC0(v35);
  swift_bridgeObjectRelease();
  uint64_t v33 = v31;
  unint64_t v34 = v32;
  uint64_t v17 = v0 + OBJC_IVAR____TtC9libfssync25VFSLookupItemContinuation_deletionDetectionDate;
  swift_beginAccess();
  sub_10016D1D8(v17, (uint64_t)v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) != 1)
  {
    uint64_t v18 = v27;
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v27, v4, v5);
    v30._uint64_t countAndFlagsBits = 0x3A746E656F6E6520;
    v30._object = (void *)0xE800000000000000;
    v26(v11, v18, v5);
    sub_10096B080();
    double v20 = v19;
    uint64_t v21 = (void (*)(char *, uint64_t))v28;
    uint64_t result = v28(v11, v5);
    double v22 = v20 * 1000000000.0;
    if ((~COERCE__INT64(v20 * 1000000000.0) & 0x7FF0000000000000) != 0)
    {
      if (v22 > -9.22337204e18)
      {
        if (v22 < 9.22337204e18)
        {
          v29._uint64_t countAndFlagsBits = (uint64_t)v22 / 1000000000;
          v36._uint64_t countAndFlagsBits = sub_10096C9C0();
          sub_10096BDC0(v36);
          swift_bridgeObjectRelease();
          sub_10096BDC0(v30);
          swift_bridgeObjectRelease();
          v21(v18, v5);
          goto LABEL_10;
        }
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  sub_10016D178((uint64_t)v4);
LABEL_10:
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC9libfssync25VFSLookupItemContinuation_hasSeenBusy) == 1)
  {
    v37._uint64_t countAndFlagsBits = 0x7973756220;
    v37._object = (void *)0xE500000000000000;
    sub_10096BDC0(v37);
  }
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC9libfssync25VFSLookupItemContinuation_isStale))
  {
    v38._uint64_t countAndFlagsBits = 0x656C61747320;
    v38._object = (void *)0xE600000000000000;
    sub_10096BDC0(v38);
  }
  v30._uint64_t countAndFlagsBits = 0x66666F6B63616220;
  v30._object = (void *)0xE90000000000003ALL;
  uint64_t result = *(void *)(v1 + OBJC_IVAR____TtC9libfssync25VFSLookupItemContinuation_backoff);
  if ((result & 0x8000000000000000) == 0)
  {
    uint64_t v23 = 0;
    uint64_t v24 = (void *)0xE000000000000000;
LABEL_18:
    v39._uint64_t countAndFlagsBits = sub_10063AA90(result);
    v29._uint64_t countAndFlagsBits = v23;
    v29._object = v24;
    sub_10096BDC0(v39);
    swift_bridgeObjectRelease();
    sub_10096BDC0(v29);
    swift_bridgeObjectRelease();
    sub_10096BDC0(v30);
    swift_bridgeObjectRelease();
    return v33;
  }
  BOOL v25 = __OFSUB__(0, result);
  uint64_t result = -result;
  if (!v25)
  {
    uint64_t v24 = (void *)0xE100000000000000;
    uint64_t v23 = 45;
    goto LABEL_18;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_10016CAD0()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC9libfssync25VFSLookupItemContinuation_startDate;
  uint64_t v2 = sub_10096B0E0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC9libfssync25VFSLookupItemContinuation_deletionDetectionDate;

  return sub_10016D178(v3);
}

uint64_t sub_10016CB4C()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC9libfssync25VFSLookupItemContinuation_startDate;
  uint64_t v2 = sub_10096B0E0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  sub_10016D178(v0 + OBJC_IVAR____TtC9libfssync25VFSLookupItemContinuation_deletionDetectionDate);

  return swift_deallocClassInstance();
}

uint64_t sub_10016CBFC()
{
  return type metadata accessor for VFSLookupItemContinuation();
}

uint64_t type metadata accessor for VFSLookupItemContinuation()
{
  uint64_t result = qword_100ACDE60;
  if (!qword_100ACDE60) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10016CC50()
{
  sub_10096B0E0();
  if (v0 <= 0x3F)
  {
    sub_1001591DC();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t sub_10016CD3C()
{
  return sub_10016C608();
}

uint64_t sub_10016CD60(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7461447472617473 && a2 == 0xE900000000000065;
  if (v2 || (sub_10096D2D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001009973E0 || (sub_10096D2D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x426E656553736168 && a2 == 0xEB00000000797375 || (sub_10096D2D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x66666F6B636162 && a2 == 0xE700000000000000 || (sub_10096D2D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x656C6174537369 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = sub_10096D2D0();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t sub_10016CF9C(uint64_t a1)
{
  uint64_t v2 = sub_10002B7CC((uint64_t *)&unk_100ACB5E0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10096B0E0();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a1 + OBJC_IVAR____TtC9libfssync25VFSLookupItemContinuation_deletionDetectionDate;
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v10(a1 + OBJC_IVAR____TtC9libfssync25VFSLookupItemContinuation_deletionDetectionDate, 1, 1, v5);
  *(unsigned char *)(a1 + OBJC_IVAR____TtC9libfssync25VFSLookupItemContinuation_isStale) = 2;
  *(void *)(a1 + OBJC_IVAR____TtC9libfssync25VFSLookupItemContinuation_backoff) = 100000000;
  swift_retain();
  sub_10096B0D0();
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(a1 + OBJC_IVAR____TtC9libfssync25VFSLookupItemContinuation_startDate, v8, v5);
  v10((uint64_t)v4, 1, 1, v5);
  swift_beginAccess();
  sub_100157A4C((uint64_t)v4, v9);
  swift_endAccess();
  *(unsigned char *)(a1 + OBJC_IVAR____TtC9libfssync25VFSLookupItemContinuation_hasSeenBusy) = 0;
  return a1;
}

uint64_t sub_10016D178(uint64_t a1)
{
  uint64_t v2 = sub_10002B7CC((uint64_t *)&unk_100ACB5E0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10016D1D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002B7CC((uint64_t *)&unk_100ACB5E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_10016D240()
{
  unint64_t result = qword_100ACDF98;
  if (!qword_100ACDF98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100ACDF98);
  }
  return result;
}

unint64_t sub_10016D294()
{
  unint64_t result = qword_100ACDFA0;
  if (!qword_100ACDFA0)
  {
    sub_100033BE8((uint64_t *)&unk_100AD7510);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100ACDFA0);
  }
  return result;
}

unint64_t sub_10016D300()
{
  unint64_t result = qword_100ACDFA8;
  if (!qword_100ACDFA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100ACDFA8);
  }
  return result;
}

uint64_t sub_10016D354(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10096B0E0();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ContentStatus(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for VFSLookupItemContinuation.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10016D4F4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VFSLookupItemContinuation.CodingKeys()
{
  return &type metadata for VFSLookupItemContinuation.CodingKeys;
}

unint64_t sub_10016D530()
{
  unint64_t result = qword_100ACDFB8;
  if (!qword_100ACDFB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100ACDFB8);
  }
  return result;
}

unint64_t sub_10016D588()
{
  unint64_t result = qword_100ACDFC0;
  if (!qword_100ACDFC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100ACDFC0);
  }
  return result;
}

unint64_t sub_10016D5E0()
{
  unint64_t result = qword_100ACDFC8;
  if (!qword_100ACDFC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100ACDFC8);
  }
  return result;
}

uint64_t sub_10016D634()
{
  return swift_initClassMetadata2();
}

uint64_t sub_10016D6CC()
{
  return sub_10096BCE0();
}

uint64_t sub_10016D704()
{
  unsigned int v1 = *(unsigned __int8 *)(v0 + 16);
  if (v1 <= 0xFB) {
    return 0;
  }
  else {
    return 4 - (v1 + 4);
  }
}

unint64_t sub_10016D720()
{
  uint64_t v1 = *(void *)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  char v3 = *(unsigned char *)(v0 + 16);
  sub_10002B7CC(&qword_100ACE1E0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100973BB0;
  *(void *)(inited + 32) = _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
  *(void *)(inited + 40) = v5;
  sub_10017DD58(v1, v2, v3);
  uint64_t v6 = sub_10096BCC0();
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 48) = v6;
  *(void *)(inited + 56) = v7;
  return sub_10004621C(inited);
}

uint64_t sub_10016D7D4(uint64_t a1)
{
  unint64_t v2 = sub_10017EB44();

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_10016D810(uint64_t a1)
{
  unint64_t v2 = sub_10017EB44();

  return Error<>._code.getter(a1, v2);
}

BOOL sub_10016D850(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 - 8);
  __chkstk_darwin(a1);
  unsigned int v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v5, a1);
  if (sub_10096D240())
  {
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, a1);
  }
  else
  {
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v2 + 32))(v6, v4, a1);
  }
  sub_10017DB74();
  swift_allocError();
  *(void *)uint64_t v7 = 0;
  *(void *)(v7 + 8) = 0;
  *(unsigned char *)(v7 + 16) = 3;
  swift_errorRetain();
  int v8 = (void *)sub_10096ABE0();
  swift_errorRelease();
  uint64_t v9 = (void *)sub_10096ABE0();
  id v10 = [v8 domain];
  uint64_t v11 = _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
  uint64_t v13 = v12;

  id v14 = [v9 domain];
  uint64_t v15 = _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
  uint64_t v17 = v16;

  if (v11 == v15 && v13 == v17)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_11;
  }
  char v19 = sub_10096D2D0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v19)
  {
LABEL_11:
    id v21 = [v8 code];
    id v22 = [v9 code];
    swift_errorRelease();

    BOOL v20 = v21 == v22;
    goto LABEL_12;
  }
  swift_errorRelease();

  BOOL v20 = 0;
LABEL_12:

  swift_errorRelease();
  return v20;
}

void sub_10016DAD4()
{
  sub_10016DAF4();
  qword_100B0B0C8 = v0;
}

void sub_10016DAF4()
{
  xpc_object_t v0 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_int64(v0, XPC_ACTIVITY_DELAY, 0);
  xpc_dictionary_set_int64(v0, XPC_ACTIVITY_GRACE_PERIOD, XPC_ACTIVITY_INTERVAL_5_MIN);
  xpc_dictionary_set_BOOL(v0, XPC_ACTIVITY_REPEATING, 0);
  xpc_dictionary_set_BOOL(v0, XPC_ACTIVITY_ALLOW_BATTERY, 0);
  if (XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY)
  {
    xpc_dictionary_set_BOOL(v0, XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY, 1);
    xpc_dictionary_set_string(v0, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_UTILITY);
    id v1 = objc_allocWithZone((Class)FPDSharedScheduler);
    NSString v2 = sub_10096BC00();
    [v1 initWithLabel:v2 criteria:v0];

    swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

void sub_10016DC2C()
{
  sub_10016DC4C();
  qword_100B0B0D0 = v0;
}

void sub_10016DC4C()
{
  xpc_object_t v0 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_int64(v0, XPC_ACTIVITY_DELAY, 7200);
  xpc_dictionary_set_int64(v0, XPC_ACTIVITY_GRACE_PERIOD, XPC_ACTIVITY_INTERVAL_1_HOUR);
  xpc_dictionary_set_BOOL(v0, XPC_ACTIVITY_REPEATING, 1);
  xpc_dictionary_set_BOOL(v0, XPC_ACTIVITY_ALLOW_BATTERY, 1);
  if (XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY)
  {
    xpc_dictionary_set_BOOL(v0, XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY, 1);
    xpc_dictionary_set_string(v0, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_UTILITY);
    id v1 = objc_allocWithZone((Class)FPDSharedScheduler);
    NSString v2 = sub_10096BC00();
    [v1 initWithLabel:v2 criteria:v0];

    swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

void sub_10016DD84()
{
  sub_10016DDA4();
  qword_100B0B0D8 = v0;
}

void sub_10016DDA4()
{
  xpc_object_t v0 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_int64(v0, XPC_ACTIVITY_DELAY, 0);
  xpc_dictionary_set_int64(v0, XPC_ACTIVITY_GRACE_PERIOD, 0);
  if (XPC_ACTIVITY_REQUIRES_CLASS_A)
  {
    xpc_dictionary_set_BOOL(v0, XPC_ACTIVITY_REQUIRES_CLASS_A, 1);
    xpc_dictionary_set_string(v0, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_UTILITY);
    id v1 = objc_allocWithZone((Class)FPDSharedScheduler);
    NSString v2 = sub_10096BC00();
    [v1 initWithLabel:v2 criteria:v0];

    swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10016DEA4(uint64_t a1, void *a2)
{
  v6._uint64_t countAndFlagsBits = a1;
  v3._rawValue = &off_100A6B060;
  v6._object = a2;
  unint64_t v4 = sub_10096CF30(v3, v6);
  swift_bridgeObjectRelease();
  if (v4 >= 3) {
    return 3;
  }
  else {
    return v4;
  }
}

uint64_t sub_10016DEF0()
{
  _s9SQLFieldsOMa();
  sub_10096D230();
  swift_allocObject();
  uint64_t v0 = sub_10096C0D0();
  *(_WORD *)uint64_t v1 = 256;
  *(unsigned char *)(v1 + 2) = 2;
  return sub_1003FC080(v0);
}

uint64_t sub_10016DF64(char a1)
{
  if (!a1) {
    return 1684957547;
  }
  if (a1 == 1) {
    return 0x64695F6D657469;
  }
  return 0x657079745F626F6ALL;
}

uint64_t sub_10016DFB4()
{
  swift_getWitnessTable();

  return sub_10096D340();
}

uint64_t sub_10016E028(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return RawRepresentable<>.hashValue.getter(a1, a2, WitnessTable, &protocol witness table for String);
}

uint64_t sub_10016E094(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return RawRepresentable<>.hash(into:)(a1, a2, a3, WitnessTable, &protocol witness table for String);
}

uint64_t sub_10016E104(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return RawRepresentable<>._rawHashValue(seed:)(a1, a2, a3, WitnessTable, &protocol witness table for String);
}

uint64_t sub_10016E174@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_10016DEA4(*(void *)a1, *(void **)(a1 + 8));
  *a2 = result;
  return result;
}

uint64_t sub_10016E1A4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10016DF64(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10016E1D0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10016DEF0();
  *a1 = result;
  return result;
}

uint64_t sub_10016E204()
{
  swift_getWitnessTable();
  swift_getWitnessTable();

  return sub_1006FC80C();
}

uint64_t sub_10016E284(char a1, void *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = sub_10096C890();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  id v10 = (char *)v19 - v9;
  if (!a1)
  {
    sub_10070BDAC(a3);
    char v20 = 0;
    uint64_t v12 = *(void *)(a3 + 40);
    *(void *)&v19[0] = v6;
    *(_OWORD *)((char *)v19 + 8) = *(_OWORD *)(a3 + 24);
    *((void *)&v19[1] + 1) = v12;
    uint64_t v13 = type metadata accessor for ThrottlingKey.Kind();
    swift_getWitnessTable();
    return sub_1003AA00C((uint64_t)&v20, v13);
  }
  if (a1 == 1)
  {
    sub_10070BEA0(a3, (uint64_t)v10);
    uint64_t v11 = Optional<A>.encode(_:)(a2, v7, *(void *)(*(void *)(a3 + 32) + 40));
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    return v11;
  }
  char v14 = sub_10070C05C(a3);
  if (v14 == 70)
  {
    memset(v19, 0, sizeof(v19));
  }
  else
  {
    uint64_t v15 = qword_10097B590[v14];
    *((void *)&v19[1] + 1) = &type metadata for Int;
    *(void *)&v19[0] = v15;
  }
  uint64_t v11 = sub_1003AC444((uint64_t)v19);
  uint64_t v17 = v16;
  sub_10017D1A4((uint64_t)v19);
  if (v17) {
    return v11;
  }
  uint64_t result = sub_10096CE20();
  __break(1u);
  return result;
}

uint64_t sub_10016E4D8@<X0>(char a1@<W0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X8>)
{
  Swift::String v35 = a8;
  uint64_t v15 = sub_10096C890();
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v34 - v17;
  if (a1)
  {
    if (a1 == 1)
    {
      uint64_t v19 = v16;
      uint64_t v20 = *(void *)(a6 + 40);
      id v21 = a2;
      uint64_t v22 = v40;
      uint64_t result = Optional<A>.init(rs:at:)(v21, a3, a4, v20, (uint64_t)v18);
      if (!v22)
      {
        uint64_t v24 = *(void *)(a4 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v18, 1, a4) == 1)
        {
          uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v18, v15);
          BOOL v25 = v35;
          *(_OWORD *)Swift::String v35 = 0u;
          *((_OWORD *)v25 + 1) = 0u;
        }
        else
        {
          unint64_t v32 = v35;
          v35[3] = a4;
          uint64_t v33 = sub_10009C958(v32);
          return (*(uint64_t (**)(uint64_t *, char *, uint64_t))(v24 + 32))(v33, v18, a4);
        }
      }
    }
    else
    {
      uint64_t result = (uint64_t)[a2 isNullAtIndex:a3];
      if (result)
      {
        Swift::String v29 = v35;
        *(_OWORD *)Swift::String v35 = 0u;
        *((_OWORD *)v29 + 1) = 0u;
      }
      else
      {
        uint64_t result = sub_1007B6CB8((uint64_t)[a2 longAtIndex:a3]);
        Swift::String v30 = v35;
        if (result == 70)
        {
          sub_10017D094();
          swift_allocError();
          *uint64_t v31 = 0;
          return swift_willThrow();
        }
        else
        {
          v35[3] = (uint64_t)&type metadata for JobCode;
          *(unsigned char *)Swift::String v30 = result;
        }
      }
    }
  }
  else
  {
    uint64_t v36 = a4;
    uint64_t v37 = a5;
    uint64_t v38 = a6;
    uint64_t v39 = a7;
    uint64_t v26 = type metadata accessor for ThrottlingKey.Kind();
    uint64_t v27 = (uint64_t)v35;
    v35[3] = v26;
    swift_getWitnessTable();
    uint64_t v28 = v40;
    uint64_t result = sub_1003AA234(a3, v26, v27);
    if (v28) {
      return sub_10017D150(v27);
    }
  }
  return result;
}

uint64_t sub_10016E7B8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v35 = a5;
  uint64_t v36 = a7;
  uint64_t v42 = a1;
  uint64_t v43 = a2;
  uint64_t v33 = a2;
  uint64_t v34 = a4;
  uint64_t v44 = a4;
  uint64_t v45 = a5;
  type metadata accessor for ThrottlingKey.Kind();
  uint64_t v11 = sub_10096C890();
  uint64_t v12 = sub_10096C890();
  uint64_t v13 = sub_100033BE8((uint64_t *)&unk_100ACE0E0);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  uint64_t v38 = *(void *)(TupleTypeMetadata3 - 8);
  uint64_t v39 = TupleTypeMetadata3;
  uint64_t v15 = __chkstk_darwin(TupleTypeMetadata3);
  uint64_t v40 = (char *)&v32 - v16;
  uint64_t v41 = *(void *)(v12 - 8);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v37 = (char *)&v32 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  LOBYTE(v42) = 0;
  uint64_t result = sub_1006FCBE4((uint64_t)&v42, v11, a3, v11, a6);
  if (!v7)
  {
    char v20 = v47;
    LOBYTE(v42) = 1;
    sub_1006FCBE4((uint64_t)&v42, v12, a3, v12, a6);
    LOBYTE(v42) = 2;
    sub_1006FCBE4((uint64_t)&v42, v13, a3, v13, a6);
    int v21 = v46;
    uint64_t v23 = v39;
    uint64_t v22 = v40;
    uint64_t v24 = &v40[*(int *)(v39 + 48)];
    uint64_t v25 = *(int *)(v39 + 64);
    *uint64_t v40 = v20;
    uint64_t v26 = *(void (**)(void))(v41 + 32);
    unint64_t v32 = v24;
    v26();
    v22[v25] = v21;
    if ((v20 & 1) == 0)
    {
      uint64_t v27 = *(void *)(a1 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v27 + 48))(v32, 1, a1) != 1)
      {
        uint64_t v28 = v41;
        Swift::String v29 = v37;
        (*(void (**)(char *, unsigned char *, uint64_t))(v41 + 16))(v37, v32, v12);
        if (v21 != 70)
        {
          uint64_t v42 = a1;
          uint64_t v43 = v33;
          uint64_t v44 = v34;
          uint64_t v45 = v35;
          type metadata accessor for ReconciliationID();
          uint64_t v40 = (unsigned char *)*(int *)(swift_getTupleTypeMetadata2() + 48);
          uint64_t v31 = v36;
          (*(void (**)(uint64_t, char *, uint64_t))(v27 + 32))(v36, v29, a1);
          swift_storeEnumTagMultiPayload();
          v40[v31] = v21;
          return (*(uint64_t (**)(unsigned char *, uint64_t))(v28 + 8))(v32, v12);
        }
        (*(void (**)(char *, uint64_t))(v27 + 8))(v29, a1);
      }
    }
    sub_10017D094();
    swift_allocError();
    *Swift::String v30 = 0;
    swift_willThrow();
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v38 + 8))(v40, v23);
  }
  return result;
}

uint64_t sub_10016EBF4(char *a1, void *a2, uint64_t a3)
{
  return sub_10016E284(*a1, a2, a3);
}

uint64_t sub_10016EC10@<X0>(char *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X8>)
{
  return sub_10016E4D8(*a1, a2, a3, a4[2], a4[3], a4[4], a4[5], a5);
}

uint64_t sub_10016EC38@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X8>)
{
  return sub_10016E7B8(a3[2], a3[3], a1, a3[4], a3[5], a2, a4);
}

id sub_10016EC64()
{
  swift_bridgeObjectRetain();
  NSString v0 = sub_10096BC00();
  swift_bridgeObjectRelease();

  return v0;
}

uint64_t sub_10016ECB8(uint64_t a1)
{
  *(void *)(a1 + 88) = _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
  *(void *)(a1 + 96) = v2;
  swift_retain();
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10016ED08()
{
  if ((*(unsigned char *)(v0 + 120) & 1) == 0) {
    dispatch_group_leave(*(dispatch_group_t *)(v0 + 160));
  }
  if (*(void *)(v0 + 16))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_10096C750();
    swift_unknownObjectRelease();
    if (*(void *)(v0 + 16))
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      sub_10096C720();
      swift_unknownObjectRelease();
    }
  }
  *(void *)(v0 + 16) = 0;
  uint64_t result = swift_unknownObjectRelease();
  *(void *)(v0 + 112) = 0;
  *(unsigned char *)(v0 + 120) = 1;
  return result;
}

id sub_10016EDB8(void *a1)
{
  uint64_t v2 = v1;
  id v4 = [a1 label];
  uint64_t v5 = _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
  uint64_t v7 = v6;

  if (qword_100ACC008 != -1) {
    swift_once();
  }
  id v8 = [(id)qword_100B0B0D0 label];
  uint64_t v9 = _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
  uint64_t v11 = v10;

  if (v9 == v5 && v11 == v7)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v13 = sub_10096D2D0();
    swift_bridgeObjectRelease();
    if ((v13 & 1) == 0)
    {
      if (v5 == 0xD000000000000025 && v7 == 0x8000000100997AA0)
      {
        id result = (id)swift_bridgeObjectRelease();
      }
      else
      {
        char v16 = sub_10096D2D0();
        id result = (id)swift_bridgeObjectRelease();
        if ((v16 & 1) == 0) {
          sub_10071538C((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderExtensions/fssync/libfssync/implementations/file-system/persistence/SQLThrottler.swift", 136, 2, 246, a1);
        }
      }
      uint64_t v17 = *(uint64_t (**)(uint64_t))(v2 + 144);
      if (v17)
      {
        uint64_t v18 = swift_retain();
        uint64_t v19 = v17(v18);
        id result = (id)sub_1000705CC((uint64_t)v17);
        if (v19)
        {
          char v20 = *(void (**)(const char *, uint64_t, uint64_t, void, Swift::Bool (__swiftcall *)(), void, libfssync::Filename (__swiftcall *)(Swift::String), void, uint64_t (*)(), uint64_t))(*(void *)v19 + 408);
          swift_retain();
          v20("sharedSchedulerCanRun(_:)", 25, 2, 0, FPDDomainFPFSBackend.isDeadEnd(), 0, Filename.init(rawValue:), 0, sub_10017E740, v2);
          swift_release();
          return (id)swift_release();
        }
      }
      return result;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v15 = (void *)qword_100B0B0D0;
  return [v15 markWatcherDone:v2];
}

uint64_t sub_10016F07C(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = sub_10096C890();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v8 - v5;
  *(unsigned char *)(a1 + 170) = 0;
  if (qword_100ACC010 != -1) {
    swift_once();
  }
  [(id)qword_100B0B0D8 removeWatcher:a1];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v6, 1, 1, AssociatedTypeWitness);
  sub_10016F230(9, 0, 0, (uint64_t)v6);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_10016F230(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *v4;
  sub_10002B7CC((uint64_t *)&unk_100ACE100);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_100973BB0;
  *(unsigned char *)(v10 + 32) = a1;
  uint64_t v19 = v10;
  if (a1 == 11)
  {
    uint64_t v10 = (uint64_t)sub_1006A2538((void *)1, 2, 1, (void *)v10);
    *(void *)(v10 + 16) = 2;
    char v11 = 12;
    goto LABEL_5;
  }
  if (a1 == 5)
  {
    uint64_t v10 = (uint64_t)sub_1006A2538((void *)1, 2, 1, (void *)v10);
    *(void *)(v10 + 16) = 2;
    char v11 = 10;
LABEL_5:
    *(unsigned char *)(v10 + 33) = v11;
    uint64_t v19 = v10;
  }
  __chkstk_darwin(v10);
  long long v12 = *(_OWORD *)(v9 + 96);
  v14[1] = *(_OWORD *)(v9 + 80);
  v14[2] = v12;
  uint64_t v15 = &v19;
  uint64_t v16 = a2;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  sub_100171288((uint64_t)sub_10017D944, (unint64_t)v14);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10016F390(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  swift_retain();
  sub_10016EDB8(v3);

  return swift_release();
}

void sub_10016F3E4()
{
  if (*(unsigned char *)(v0 + 169) == 1 && *(unsigned char *)(v0 + 120) == 1)
  {
    *(unsigned char *)(v0 + 169) = 0;
    if (qword_100ACC008 != -1) {
      swift_once();
    }
    uint64_t v1 = (void *)qword_100B0B0D0;
    [v1 removeWatcher:v0];
  }
}

void sub_10016F470()
{
  uint64_t v2 = v0;
  uint64_t v101 = *v0;
  uint64_t v3 = sub_10096B7D0();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  os_log_t v102 = (char *)&v93 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10096C6E0();
  uint64_t v104 = *(void *)(v6 - 8);
  uint64_t v105 = v6;
  __chkstk_darwin(v6);
  uint64_t v103 = (char *)&v93 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10096B0E0();
  uint64_t v106 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  ObjectType = ((char *)&v93 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = sub_10096B480();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v108 = v11;
  uint64_t v109 = v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v93 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v19 = __chkstk_darwin(v18);
  int v21 = (char *)&v93 - v20;
  __chkstk_darwin(v19);
  uint64_t v26 = (char *)&v93 - v25;
  if (*((unsigned char *)v2 + 105) == 1)
  {
    id v27 = (id)fpfs_current_or_default_log();
    sub_10096B490();
    swift_retain();
    uint64_t v28 = sub_10096B470();
    os_log_type_t v29 = sub_10096C5A0();
    if (os_log_type_enabled(v28, v29))
    {
      Swift::String v30 = (uint8_t *)swift_slowAlloc();
      aBlock = (void *)swift_slowAlloc();
      *(_DWORD *)Swift::String v30 = 136446210;
      if (*((unsigned char *)v2 + 32)) {
        uint64_t v31 = 20550;
      }
      else {
        uint64_t v31 = 21318;
      }
      uint64_t v111 = sub_100719D44(v31, 0xE200000000000000, (uint64_t *)&aBlock);
      sub_10096C8C0();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "⏳  %{public}s: retries are disabled", v30, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release();
    }
    (*(void (**)(char *, uint64_t))(v109 + 8))(v26, v108);
    return;
  }
  uint64_t v95 = v24;
  uint64_t v96 = v23;
  uint64_t v97 = v4;
  uint64_t v98 = v3;
  uint64_t v99 = v22;
  uint64_t v100 = v1;
  unint64_t v32 = (void *)v2[3];
  uint64_t v33 = swift_allocObject();
  *(void *)(v33 + 16) = sub_10017DD84;
  *(void *)(v33 + 24) = v2;
  uint64_t v118 = sub_10017EC40;
  uint64_t v119 = v33;
  aBlock = _NSConcreteStackBlock;
  unint64_t v115 = 1107296256;
  uint64_t v116 = sub_10017090C;
  uint64_t v117 = &unk_100A72E90;
  uint64_t v34 = _Block_copy(&aBlock);
  uint64_t v107 = (uint64_t)v2;
  swift_retain();
  swift_retain();
  swift_release();
  aBlock = 0;
  uint64_t v35 = [v32 fetchSwift:v34 error:&aBlock];
  _Block_release(v34);
  uint64_t v36 = aBlock;
  uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
    goto LABEL_82;
  }
  if (!v35)
  {
    sub_10096ABF0();

    swift_willThrow();
LABEL_19:
    swift_release();
    return;
  }
  unsigned int v38 = [v35 next];
  uint64_t isEscapingClosureAtFileLocation = v107;
  if (v38 && ([v35 isNullAtIndex:0] & 1) == 0)
  {
    os_log_t v94 = v35;
    id v110 = [v35 longAtIndex:0];
    if (v110 == (id)0x7FFFFFFFFFFFFFFFLL)
    {
      id v45 = (id)fpfs_current_or_default_log();
      sub_10096B490();
      swift_retain();
      unsigned __int8 v46 = sub_10096B470();
      os_log_type_t v47 = sub_10096C5A0();
      if (os_log_type_enabled(v46, v47))
      {
        uint64_t v48 = (uint8_t *)swift_slowAlloc();
        aBlock = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v48 = 136446210;
        if (*(unsigned char *)(v107 + 32)) {
          uint64_t v49 = 20550;
        }
        else {
          uint64_t v49 = 21318;
        }
        uint64_t v111 = sub_100719D44(v49, 0xE200000000000000, (uint64_t *)&aBlock);
        sub_10096C8C0();
        swift_release();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v46, v47, "⏳  %{public}s: only infinite throttles", v48, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_release();
      }
      (*(void (**)(char *, uint64_t))(v109 + 8))(v21, v108);
      sub_10016ED08();
      goto LABEL_75;
    }
    sub_10096B0D0();
    sub_10096B080();
    double v51 = v50;
    (*(void (**)(NSObject *, uint64_t))(v106 + 8))(ObjectType, v8);
    double v52 = v51 * 1000000000.0;
    if ((~COERCE__INT64(v51 * 1000000000.0) & 0x7FF0000000000000) != 0)
    {
      if (v52 > -9.22337204e18)
      {
        if (v52 < 9.22337204e18)
        {
          uint64_t v53 = (uint64_t)v52;
          id v54 = v110;
          if ((*(unsigned char *)(isEscapingClosureAtFileLocation + 120) & 1) == 0
            && v110 == *(id *)(isEscapingClosureAtFileLocation + 112))
          {
            id v55 = (id)fpfs_current_or_default_log();
            uint64_t v56 = v96;
            sub_10096B490();
            swift_retain();
            uint64_t v57 = sub_10096B470();
            os_log_type_t v58 = sub_10096C5A0();
            if (!os_log_type_enabled(v57, v58))
            {

              swift_release();
              (*(void (**)(uint64_t, uint64_t))(v109 + 8))(v56, v108);
              swift_release();
              return;
            }
            uint64_t v59 = swift_slowAlloc();
            uint64_t v113 = swift_slowAlloc();
            *(_DWORD *)uint64_t v59 = 136446466;
            if (*(unsigned char *)(isEscapingClosureAtFileLocation + 32)) {
              uint64_t v60 = 20550;
            }
            else {
              uint64_t v60 = 21318;
            }
            aBlock = (void *)sub_100719D44(v60, 0xE200000000000000, &v113);
            sub_10096C8C0();
            swift_release();
            swift_bridgeObjectRelease();
            *(_WORD *)(v59 + 12) = 2082;
            swift_beginAccess();
            uint64_t v61 = (uint64_t)v110 - v53;
            if (!__OFSUB__(v110, v53))
            {
              if ((v61 & 0x8000000000000000) == 0)
              {
                uint64_t v62 = 0;
                unint64_t v63 = 0xE000000000000000;
LABEL_80:
                v121._uint64_t countAndFlagsBits = sub_10063AA90(v61);
                uint64_t v111 = v62;
                unint64_t v112 = v63;
                sub_10096BDC0(v121);
                swift_bridgeObjectRelease();
                uint64_t v111 = sub_100719D44(v111, v112, &v113);
                sub_10096C8C0();
                swift_bridgeObjectRelease();
                _os_log_impl((void *)&_mh_execute_header, v57, v58, "⏳  %{public}s: schedule throttling unchanged in %{public}s", (uint8_t *)v59, 0x16u);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();

                (*(void (**)(uint64_t, uint64_t))(v109 + 8))(v96, v108);
                goto LABEL_19;
              }
              BOOL v90 = __OFSUB__(0, v61);
              uint64_t v61 = v53 - (void)v110;
              if (!v90)
              {
                unint64_t v63 = 0xE100000000000000;
                uint64_t v62 = 45;
                goto LABEL_80;
              }
              __break(1u);
LABEL_92:
              __break(1u);
              return;
            }
LABEL_90:
            __break(1u);
          }
          if ((*(unsigned char *)(isEscapingClosureAtFileLocation + 136) & 1) == 0
            && *(void *)(isEscapingClosureAtFileLocation + 128) >= (uint64_t)v110)
          {
            id v64 = (id)fpfs_current_or_default_log();
            uint64_t v65 = v95;
            sub_10096B490();
            swift_retain();
            int v66 = sub_10096B470();
            os_log_type_t v67 = sub_10096C5A0();
            if (os_log_type_enabled(v66, v67))
            {
              uint64_t v68 = (uint8_t *)swift_slowAlloc();
              aBlock = (void *)swift_slowAlloc();
              *(_DWORD *)uint64_t v68 = 136446210;
              if (*(unsigned char *)(v107 + 32)) {
                uint64_t v69 = 20550;
              }
              else {
                uint64_t v69 = 21318;
              }
              uint64_t v111 = sub_100719D44(v69, 0xE200000000000000, (uint64_t *)&aBlock);
              uint64_t isEscapingClosureAtFileLocation = v107;
              sub_10096C8C0();
              swift_release();
              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v66, v67, "⏳  %{public}s: asking to reschedule throttling at the same time as before, adding 1s of leeway", v68, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {

              swift_release();
            }
            (*(void (**)(uint64_t, uint64_t))(v109 + 8))(v65, v108);
            id v54 = (id)(v53 + 1000000000);
            if (__OFADD__(v53, 1000000000))
            {
              __break(1u);
              goto LABEL_89;
            }
            id v110 = (id)(v53 + 1000000000);
          }
          dispatch_group_enter(*(dispatch_group_t *)(isEscapingClosureAtFileLocation + 160));
          sub_10016ED08();
          *(void *)(isEscapingClosureAtFileLocation + 112) = v54;
          *(unsigned char *)(isEscapingClosureAtFileLocation + 120) = 0;
          id v70 = *(uint64_t (**)(uint64_t))(isEscapingClosureAtFileLocation + 144);
          if (!v70) {
            goto LABEL_92;
          }
          uint64_t v71 = swift_retain();
          uint64_t v72 = v70(v71);
          uint64_t v73 = sub_1000705CC((uint64_t)v70);
          if (v72)
          {
            unint64_t v74 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v72 + 168))(v73);
            swift_release();
          }
          else
          {
            unint64_t v74 = 0;
          }
          sub_1000258DC();
          aBlock = _swiftEmptyArrayStorage;
          sub_10017DD9C();
          sub_10002B7CC((uint64_t *)&unk_100ACB020);
          sub_100025500((unint64_t *)&qword_100ACF620, (uint64_t *)&unk_100ACB020);
          uint64_t v75 = v103;
          uint64_t v76 = v105;
          sub_10096CA60();
          uint64_t v77 = sub_10096C6F0();

          (*(void (**)(char *, uint64_t))(v104 + 8))(v75, v76);
          uint64_t isEscapingClosureAtFileLocation = v107;
          *(void *)(v107 + 16) = v77;
          swift_unknownObjectRelease();
          if (*(void *)(isEscapingClosureAtFileLocation + 16))
          {
            swift_getObjectType();
            uint64_t v78 = swift_allocObject();
            swift_weakInit();
            uint64_t v79 = swift_allocObject();
            uint64_t v80 = v101;
            *(void *)(v79 + 16) = *(void *)(v101 + 80);
            *(_OWORD *)(v79 + 24) = *(_OWORD *)(v80 + 88);
            *(void *)(v79 + 40) = *(void *)(v80 + 104);
            *(void *)(v79 + 48) = v78;
            swift_unknownObjectRetain();
            swift_retain();
            uint64_t v81 = (uint64_t)v102;
            sub_1004B1508();
            uint64_t isEscapingClosureAtFileLocation = v107;
            sub_1006B7CE4(0, v81, (uint64_t)sub_10017DE64, v79);
            swift_unknownObjectRelease();
            swift_release();
            (*(void (**)(uint64_t, uint64_t))(v97 + 8))(v81, v98);
            swift_release();
          }
          id v82 = (id)fpfs_current_or_default_log();
          uint64_t v83 = v99;
          sub_10096B490();
          swift_retain();
          ObjectType = sub_10096B470();
          os_log_type_t v84 = sub_10096C590();
          if (!os_log_type_enabled(ObjectType, v84))
          {

            swift_release();
            (*(void (**)(uint64_t, uint64_t))(v109 + 8))(v83, v108);
LABEL_70:
            if (!*(void *)(isEscapingClosureAtFileLocation + 16)) {
              goto LABEL_74;
            }
            ObjectType = swift_getObjectType();
            swift_unknownObjectRetain();
            dispatch_time_t v91 = dispatch_time(0x8000000000000000, 0);
            swift_beginAccess();
            if (!__OFSUB__(v110, v53))
            {
              dispatch_time_t v92 = dispatch_time(v91, (int64_t)v110 - v53);
              sub_1006B7EAC(v92);
              swift_unknownObjectRelease();
              if (*(void *)(isEscapingClosureAtFileLocation + 16))
              {
                swift_getObjectType();
                swift_unknownObjectRetain();
                sub_10096C730();
                swift_unknownObjectRelease();
              }
LABEL_74:
              if (*(unsigned char *)(isEscapingClosureAtFileLocation + 169))
              {
LABEL_75:
                swift_release();

                return;
              }
              *(unsigned char *)(isEscapingClosureAtFileLocation + 169) = 1;
              ObjectType = v94;
              if (qword_100ACC008 == -1)
              {
LABEL_77:
                [(id)qword_100B0B0D0 addWatcher:isEscapingClosureAtFileLocation];
                swift_release();

                return;
              }
LABEL_87:
              swift_once();
              goto LABEL_77;
            }
            goto LABEL_85;
          }
          uint64_t v85 = swift_slowAlloc();
          uint64_t v113 = swift_slowAlloc();
          *(_DWORD *)uint64_t v85 = 136446466;
          if (*(unsigned char *)(isEscapingClosureAtFileLocation + 32)) {
            uint64_t v86 = 20550;
          }
          else {
            uint64_t v86 = 21318;
          }
          aBlock = (void *)sub_100719D44(v86, 0xE200000000000000, &v113);
          sub_10096C8C0();
          swift_release();
          swift_bridgeObjectRelease();
          *(_WORD *)(v85 + 12) = 2082;
          swift_beginAccess();
          uint64_t v87 = (uint64_t)v110 - v53;
          if (__OFSUB__(v110, v53)) {
            goto LABEL_86;
          }
          if ((v87 & 0x8000000000000000) == 0)
          {
            uint64_t v88 = 0;
            unint64_t v89 = 0xE000000000000000;
LABEL_69:
            v120._uint64_t countAndFlagsBits = sub_10063AA90(v87);
            aBlock = (void *)v88;
            unint64_t v115 = v89;
            sub_10096BDC0(v120);
            swift_bridgeObjectRelease();
            aBlock = (void *)sub_100719D44((uint64_t)aBlock, v115, &v113);
            sub_10096C8C0();
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, ObjectType, v84, "⏳ %{public}s: schedule throttling handling in %{public}s", (uint8_t *)v85, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            (*(void (**)(uint64_t, uint64_t))(v109 + 8))(v99, v108);
            uint64_t isEscapingClosureAtFileLocation = v107;
            goto LABEL_70;
          }
          BOOL v90 = __OFSUB__(0, v87);
          uint64_t v87 = v53 - (void)v110;
          if (!v90)
          {
            unint64_t v89 = 0xE100000000000000;
            uint64_t v88 = 45;
            goto LABEL_69;
          }
LABEL_89:
          __break(1u);
          goto LABEL_90;
        }
LABEL_84:
        __break(1u);
LABEL_85:
        __break(1u);
LABEL_86:
        __break(1u);
        goto LABEL_87;
      }
LABEL_83:
      __break(1u);
      goto LABEL_84;
    }
LABEL_82:
    __break(1u);
    goto LABEL_83;
  }
  uint64_t v39 = v35;
  id v40 = (id)fpfs_current_or_default_log();
  sub_10096B490();
  swift_retain();
  uint64_t v41 = sub_10096B470();
  os_log_type_t v42 = sub_10096C5A0();
  if (os_log_type_enabled(v41, v42))
  {
    uint64_t v43 = (uint8_t *)swift_slowAlloc();
    aBlock = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v43 = 136446210;
    if (*(unsigned char *)(v107 + 32)) {
      uint64_t v44 = 20550;
    }
    else {
      uint64_t v44 = 21318;
    }
    uint64_t v111 = sub_100719D44(v44, 0xE200000000000000, (uint64_t *)&aBlock);
    sub_10096C8C0();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v41, v42, "⏳  %{public}s: no pending throttles", v43, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
  (*(void (**)(char *, uint64_t))(v109 + 8))(v15, v108);
  sub_10016ED08();
  swift_release();
}

void sub_100170778()
{
  if ((*(unsigned char *)(v0 + 170) & 1) == 0)
  {
    *(unsigned char *)(v0 + 170) = 1;
    if (qword_100ACC010 != -1) {
      swift_once();
    }
    uint64_t v1 = (void *)qword_100B0B0D8;
    [v1 addWatcher:v0];
  }
}

uint64_t sub_1001707F8(uint64_t a1, uint64_t a2)
{
  sub_10096CBD0(55);
  v6._uint64_t countAndFlagsBits = 0xD000000000000023;
  v6._object = (void *)0x8000000100997B90;
  sub_10096BDC0(v6);
  uint64_t v4 = *(void *)(a2 + 40);
  uint64_t v3 = *(void **)(a2 + 48);
  swift_bridgeObjectRetain();
  v7._uint64_t countAndFlagsBits = v4;
  v7._object = v3;
  sub_10096BDC0(v7);
  swift_bridgeObjectRelease();
  v8._object = (void *)0x8000000100997A50;
  v8._uint64_t countAndFlagsBits = 0xD000000000000010;
  sub_10096BDC0(v8);
  v9._uint64_t countAndFlagsBits = sub_10096D220();
  sub_10096BDC0(v9);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1001708E4(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

id sub_10017090C(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void (**)(void))(a1 + 32);
  id v3 = a2;
  v2();

  NSString v4 = sub_10096BC00();
  swift_bridgeObjectRelease();

  return v4;
}

uint64_t sub_10017097C()
{
  uint64_t v0 = sub_10096B0E0();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  id v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10096B0D0();
  sub_10096B080();
  double v5 = v4;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  double v7 = v5 * 1000000000.0;
  if ((~COERCE__INT64(v5 * 1000000000.0) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  if (v7 <= -9.22337204e18)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v7 >= 9.22337204e18)
  {
LABEL_17:
    __break(1u);
    return result;
  }
  uint64_t v8 = (uint64_t)v7;
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v10 = *(void *)(Strong + 112);
    char v11 = *(unsigned char *)(Strong + 120);
    swift_release();
    uint64_t v12 = v10 <= v8 ? v8 : v10;
    if ((v11 & 1) == 0) {
      uint64_t v8 = v12;
    }
  }
  swift_beginAccess();
  uint64_t v13 = swift_weakLoadStrong();
  if (v13)
  {
    *(void *)(v13 + 128) = v8;
    *(unsigned char *)(v13 + 136) = 0;
    swift_release();
  }
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_100170B48(v8);
    return swift_release();
  }
  return result;
}

uint64_t sub_100170B48(uint64_t a1)
{
  uint64_t v3 = sub_10096B480();
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t result = __chkstk_darwin(v4);
  Swift::String v6 = *(uint64_t (**)(uint64_t))(v1 + 144);
  if (v6)
  {
    uint64_t v7 = swift_retain();
    uint64_t v8 = v6(v7);
    uint64_t result = sub_1000705CC((uint64_t)v6);
    if (v8)
    {
      __chkstk_darwin(result);
      *(&v10 - 2) = v1;
      *(&v10 - 1) = a1;
      uint64_t v9 = (*(uint64_t (**)(const char *, uint64_t, uint64_t, uint64_t (*)()))(*(void *)v8 + 416))("trigger(now:)", 13, 2, sub_10017DE74);
      sub_10016F470(v9);
      return swift_release();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

BOOL sub_100171278()
{
  return (*(unsigned char *)(v0 + 120) & 1) == 0;
}

uint64_t sub_100171288(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  unint64_t v150 = a2;
  uint64_t v152 = a1;
  uint64_t v5 = *(void *)(*(void *)v2 + 88);
  Swift::String v6 = *(id (**)(uint64_t, void *))(*(void *)v2 + 96);
  uint64_t v7 = *(void **)(*(void *)v2 + 104);
  id aBlock = *(id *)(*(void *)v2 + 80);
  id v4 = aBlock;
  uint64_t v157 = v5;
  v158 = v6;
  v159 = v7;
  uint64_t v140 = type metadata accessor for PersistenceTrigger();
  uint64_t v132 = *(void *)(v140 - 8);
  __chkstk_darwin(v140);
  v139 = (char *)v115 - v8;
  uint64_t AssociatedTypeWitness = (void *)swift_getAssociatedTypeWitness();
  uint64_t v10 = swift_getAssociatedTypeWitness();
  unint64_t v146 = v6;
  id v148 = v4;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v147 = v5;
  uint64_t v12 = swift_getAssociatedConformanceWitness();
  id aBlock = AssociatedTypeWitness;
  uint64_t v157 = v10;
  v158 = (id (*)(uint64_t, void *))AssociatedConformanceWitness;
  v159 = (void *)v12;
  uint64_t v13 = type metadata accessor for ThrottlingKey();
  long long v133 = *(void (***)(char *, void *))(v13 - 8);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v122 = (char *)v115 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v135 = (char *)v115 - v17;
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)v115 - v18;
  v145 = v20;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v141 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v116 = *(void *)(v141 + 64);
  __chkstk_darwin(TupleTypeMetadata2);
  BOOL v151 = (char *)v115 - v22;
  uint64_t v137 = sub_10096B480();
  uint64_t v134 = *(void *)(v137 - 8);
  uint64_t v23 = __chkstk_darwin(v137);
  unsigned int v143 = (char *)v115 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  uint64_t v136 = (char *)v115 - v25;
  uint64_t v26 = *(uint64_t (**)(uint64_t))(v3 + 144);
  if (!v26) {
    goto LABEL_49;
  }
  uint64_t v27 = v152;
  uint64_t v28 = swift_retain();
  uint64_t v29 = v26(v28);
  sub_1000705CC((uint64_t)v26);
  if (!v29) {
    goto LABEL_50;
  }
  uint64_t v30 = v3;
  uint64_t v142 = TupleTypeMetadata2;
  v154[0] = sub_10096C110();
  if (qword_100ACC000 != -1) {
    swift_once();
  }
  uint64_t v31 = sub_10070C2F0((uint64_t)sub_10009F3F4, 0);
  char v32 = v31 & 1;
  uint64_t v33 = __chkstk_darwin(v31);
  unint64_t v34 = v150;
  v115[-4] = v27;
  v115[-3] = v34;
  LOBYTE(v115[-2]) = v32;
  __chkstk_darwin(v33);
  uint64_t v35 = v147;
  v115[-6] = v148;
  v115[-5] = v35;
  v115[-4] = v146;
  v115[-3] = v7;
  v115[-2] = v154;
  uint64_t v36 = v30;
  uint64_t v37 = v149;
  sub_100172FC0((uint64_t)sub_10017DB0C, v38, (void (*)(void, _OWORD *))sub_10017DB18, (uint64_t)&v115[-8]);
  if (v37)
  {
LABEL_6:
    swift_release();
    return swift_bridgeObjectRelease();
  }
  uint64_t v138 = v29;
  id v40 = *(void **)(v30 + 24);
  uint64_t v41 = swift_allocObject();
  *(void *)(v41 + 16) = v30;
  *(void *)(v41 + 24) = v27;
  *(void *)(v41 + 32) = v34;
  *(unsigned char *)(v41 + 40) = v32;
  uint64_t v42 = swift_allocObject();
  *(void *)(v42 + 16) = sub_10017DB54;
  *(void *)(v42 + 24) = v41;
  v115[1] = v41;
  id v160 = sub_10017EC40;
  uint64_t v161 = v42;
  id aBlock = _NSConcreteStackBlock;
  uint64_t v157 = 1107296256;
  v158 = sub_10017090C;
  v159 = &unk_100A72DC8;
  uint64_t v43 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  id aBlock = 0;
  unsigned int v44 = [v40 executeSwift:v43 error:&aBlock];
  _Block_release(v43);
  id v45 = aBlock;
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
  }
  if (!v44)
  {
    sub_10096ABF0();

    swift_willThrow();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  uint64_t v47 = v30;
  uint64_t v120 = 0;
  id v48 = (id)fpfs_current_or_default_log();
  uint64_t v49 = v136;
  sub_10096B490();
  swift_retain();
  double v50 = sub_10096B470();
  os_log_type_t v51 = sub_10096C590();
  BOOL v52 = os_log_type_enabled(v50, v51);
  uint64_t v149 = v36;
  v144 = v19;
  if (v52)
  {
    uint64_t v53 = swift_slowAlloc();
    id aBlock = (id)swift_slowAlloc();
    *(_DWORD *)uint64_t v53 = 136446466;
    if (*(unsigned char *)(v47 + 32)) {
      uint64_t v54 = 20550;
    }
    else {
      uint64_t v54 = 21318;
    }
    v154[1] = sub_100719D44(v54, 0xE200000000000000, (uint64_t *)&aBlock);
    sub_10096C8C0();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v53 + 12) = 2048;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    uint64_t v55 = v142;
    uint64_t v56 = sub_10096C160();
    uint64_t v19 = v144;
    swift_bridgeObjectRelease();
    uint64_t v155 = v56;
    sub_10096C8C0();
    _os_log_impl((void *)&_mh_execute_header, v50, v51, "⌛️  %{public}s: %ld throttles expired", (uint8_t *)v53, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v57 = v134;
    long long v127 = *(void (**)(char *, uint64_t))(v134 + 8);
    v127(v49, v137);
    uint64_t v58 = v138;
  }
  else
  {

    swift_release();
    uint64_t v57 = v134;
    long long v127 = *(void (**)(char *, uint64_t))(v134 + 8);
    v127(v49, v137);
    uint64_t v58 = v138;
    uint64_t v55 = v142;
  }
  swift_beginAccess();
  uint64_t v59 = v154[0];
  swift_bridgeObjectRetain();
  if (!sub_10096C1A0())
  {
    uint64_t v114 = swift_bridgeObjectRelease();
LABEL_46:
    (*(void (**)(uint64_t))(*(void *)v58 + 304))(v114);
    swift_release();
    goto LABEL_6;
  }
  uint64_t v61 = 0;
  long long v131 = &v151[*(int *)(v55 + 48)];
  uint64_t v134 = v141 + 16;
  int v130 = (void (**)(char *, char *, void *))(v133 + 4);
  char v129 = (void (**)(void, void))(v133 + 2);
  uint64_t v126 = v57 + 8;
  uint64_t v119 = v154;
  long long v128 = (void (**)(char *, uint64_t))(v132 + 8);
  *(void *)&long long v60 = 136446722;
  long long v118 = v60;
  uint64_t v117 = (char *)&type metadata for Any + 8;
  long long v121 = xmmword_10097B210;
  uint64_t v62 = v145;
  uint64_t v132 = v59;
  ++v133;
  while (1)
  {
    BOOL v68 = sub_10096C130();
    sub_10096C0E0();
    if (v68)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v141 + 16))(v151, v59+ ((*(unsigned __int8 *)(v141 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v141 + 80))+ *(void *)(v141 + 72) * v61, v55);
      uint64_t v69 = (id (*)(uint64_t, void *))(v61 + 1);
      if (__OFADD__(v61, 1)) {
        goto LABEL_43;
      }
      goto LABEL_22;
    }
    uint64_t result = sub_10096CC20();
    if (v116 != 8) {
      break;
    }
    uint64_t v155 = result;
    (*(void (**)(char *, uint64_t *, uint64_t))v134)(v151, &v155, v55);
    swift_unknownObjectRelease();
    uint64_t v69 = (id (*)(uint64_t, void *))(v61 + 1);
    if (__OFADD__(v61, 1))
    {
LABEL_43:
      __break(1u);
LABEL_44:
      uint64_t v58 = v138;
      uint64_t v114 = swift_bridgeObjectRelease();
      goto LABEL_46;
    }
LABEL_22:
    unint64_t v146 = v69;
    uint64_t v147 = v61;
    uint64_t v70 = *((void *)v131 + 1);
    unint64_t v150 = *((void *)v131 + 2);
    uint64_t v72 = *((void *)v131 + 3);
    uint64_t v71 = *((void *)v131 + 4);
    uint64_t v73 = *((void *)v131 + 5);
    id v148 = (id)*((void *)v131 + 8);
    (*v130)(v19, v151, v62);
    swift_errorRetain();
    unsigned __int8 v74 = sub_10070F6E4(v73);
    if (v74 <= 0xBu && ((1 << v74) & 0x860) != 0) {
      uint64_t v72 = 0x7FFFFFFFFFFFFFFFLL;
    }
    unint64_t v77 = (unint64_t)v129;
    char v162 = 2;
    uint64_t v163 = v70;
    unint64_t v164 = v150;
    uint64_t v165 = v72;
    uint64_t v166 = v71;
    uint64_t v167 = v73;
    unsigned __int8 v168 = v74;
    uint64_t v169 = v75;
    uint64_t v170 = v76;
    uint64_t v152 = v76;
    if (!v73) {
      goto LABEL_35;
    }
    sub_10017DB74();
    swift_allocError();
    *(_OWORD *)uint64_t v78 = v121;
    *(unsigned char *)(v78 + 16) = 3;
    swift_errorRetain();
    uint64_t v79 = (void *)sub_10096ABE0();
    swift_errorRelease();
    uint64_t v80 = (void *)sub_10096ABE0();
    id v81 = [v79 domain];
    uint64_t v82 = _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
    uint64_t v84 = v83;

    id v85 = [v80 domain];
    uint64_t v86 = _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
    uint64_t v88 = v87;

    if (v82 == v86 && v84 == v88)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v89 = sub_10096D2D0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v89 & 1) == 0)
      {
        swift_errorRelease();

        uint64_t v62 = v145;
        uint64_t v19 = v144;
LABEL_35:
        id v93 = (id)fpfs_current_or_default_log();
        os_log_t v94 = v143;
        sub_10096B490();
        uint64_t v95 = *(void (**)(char *, char *, void *))v77;
        unint64_t v150 = v77 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
        uint64_t v96 = v135;
        uint64_t v97 = v19;
        uint64_t v98 = v95;
        v95(v135, v97, v62);
        swift_retain();
        swift_errorRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_errorRetain();
        swift_bridgeObjectRetain();
        uint64_t v99 = sub_10096B470();
        os_log_type_t v100 = sub_10096C5A0();
        LODWORD(v136) = v100;
        if (os_log_type_enabled(v99, v100))
        {
          uint64_t v101 = swift_slowAlloc();
          uint64_t v125 = swift_slowAlloc();
          uint64_t v155 = v125;
          *(_DWORD *)uint64_t v101 = v118;
          os_log_t v124 = v99;
          int v102 = *(unsigned __int8 *)(v149 + 32);
          swift_release();
          if (v102) {
            uint64_t v103 = 20550;
          }
          else {
            uint64_t v103 = 21318;
          }
          uint64_t v153 = sub_100719D44(v103, 0xE200000000000000, &v155);
          sub_10096C8C0();
          swift_release();
          swift_bridgeObjectRelease();
          *(_WORD *)(v101 + 12) = 2080;
          uint64_t v104 = v122;
          __int16 v123 = v98;
          v98(v122, v96, v62);
          uint64_t v105 = v96;
          unint64_t v63 = v133;
          uint64_t v106 = *v133;
          (*v133)(v105, v62);
          uint64_t v107 = sub_10070E770(v62);
          unint64_t v109 = v108;
          v106(v104, v145);
          uint64_t v153 = sub_100719D44(v107, v109, &v155);
          sub_10096C8C0();
          swift_bridgeObjectRelease();
          *(_WORD *)(v101 + 22) = 2080;
          swift_errorRetain();
          swift_bridgeObjectRetain();
          uint64_t v110 = sub_10070DE54();
          unint64_t v112 = v111;
          swift_errorRelease();
          swift_bridgeObjectRelease();
          uint64_t v153 = sub_100719D44(v110, v112, &v155);
          sub_10096C8C0();
          uint64_t v62 = v145;
          swift_bridgeObjectRelease();
          swift_errorRelease();
          swift_bridgeObjectRelease();
          swift_errorRelease();
          swift_bridgeObjectRelease();
          os_log_t v113 = v124;
          _os_log_impl((void *)&_mh_execute_header, v124, (os_log_type_t)v136, "✍️  %{public}s: throttle %s: %s", (uint8_t *)v101, 0x20u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          v127(v143, v137);
          uint64_t v19 = v144;
          id v64 = v123;
        }
        else
        {
          unint64_t v63 = v133;
          (*v133)(v96, v62);
          swift_release_n();
          swift_errorRelease();
          swift_bridgeObjectRelease();
          swift_errorRelease();

          swift_bridgeObjectRelease();
          v127(v94, v137);
          id v64 = v98;
          uint64_t v19 = v144;
        }
        goto LABEL_19;
      }
    }
    id v90 = [v79 code];
    id v91 = [v80 code];
    swift_errorRelease();

    uint64_t v62 = v145;
    uint64_t v19 = v144;
    if (v90 != v91 || v150) {
      goto LABEL_35;
    }
    uint64_t v92 = v120;
    sub_1001733DC((uint64_t)v144);
    uint64_t v120 = v92;
    if (v92)
    {
      swift_release();
      swift_errorRelease();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_bridgeObjectRelease();
      (*v133)(v19, v62);
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    id v64 = *(void (**)(char *, char *, void *))v77;
    unint64_t v63 = v133;
LABEL_19:
    uint64_t v65 = v139;
    v64(v139, v19, v62);
    uint64_t v66 = v140;
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *))(*(void *)v138 + 312))(v65);
    swift_errorRelease();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_bridgeObjectRelease();
    (*v128)(v65, v66);
    (*v63)(v19, v62);
    uint64_t v59 = v132;
    uint64_t v55 = v142;
    uint64_t v67 = sub_10096C1A0();
    uint64_t v61 = v147 + 1;
    if (v146 == (id (*)(uint64_t, void *))v67) {
      goto LABEL_44;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100172680(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  sub_10096CBD0(17);
  swift_bridgeObjectRelease();
  v8._uint64_t countAndFlagsBits = sub_10096D220();
  sub_10096BDC0(v8);
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = 0x20444E4120;
  v9._object = (void *)0xE500000000000000;
  sub_10096BDC0(v9);
  v10._uint64_t countAndFlagsBits = a2(a1, a4);
  sub_10096BDC0(v10);
  swift_bridgeObjectRelease();
  return 0x203D206574617473;
}

void sub_100172770(uint64_t a1, uint64_t a2, uint64_t a3, void **a4)
{
  Swift::String v8 = *(void **)(a3 + 24);
  Swift::String v9 = (void *)swift_allocObject();
  v9[2] = a3;
  v9[3] = a1;
  v9[4] = a2;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = sub_10017E75C;
  *(void *)(v10 + 24) = v9;
  uint64_t v42 = sub_10017EC40;
  uint64_t v43 = v10;
  id aBlock = _NSConcreteStackBlock;
  uint64_t v39 = 1107296256;
  id v40 = sub_10017090C;
  uint64_t v41 = &unk_100A731D8;
  char v11 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  id aBlock = 0;
  id v12 = [v8 fetchSwift:v11 error:&aBlock];
  _Block_release(v11);
  uint64_t v13 = aBlock;
  LOBYTE(v8) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v8) {
LABEL_18:
  }
    __break(1u);
  if (v12)
  {
    if ([v12 next])
    {
      id v29 = v12;
      while (1)
      {
        uint64_t v15 = sub_1003FE5A4();
        uint64_t v16 = sub_10054FC40(v15, v12, 0);
        if (v4) {
          break;
        }
        uint64_t v18 = v16;
        uint64_t v19 = v17;
        swift_bridgeObjectRelease();
        unint64_t v20 = (unint64_t)sub_1003FE5A4()[2];
        swift_bridgeObjectRelease();
        if (v20 >> 31)
        {
          __break(1u);
          goto LABEL_18;
        }
        int v21 = sub_1003FDC1C();
        sub_10054A0D4(v12, (uint64_t)v21, v20, (uint64_t)&aBlock);
        swift_bridgeObjectRelease();
        char v37 = (char)aBlock;
        uint64_t v35 = v40;
        uint64_t v36 = v39;
        uint64_t v22 = v43;
        uint64_t v33 = v42;
        unint64_t v34 = v41;
        char v32 = v44;
        uint64_t v23 = v46;
        uint64_t v31 = v45;
        uint64_t v24 = *a4;
        sub_10014E450(v18, v19, BYTE1(v19) & 1);
        swift_errorRetain();
        swift_bridgeObjectRetain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *a4 = v24;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t v24 = sub_1006A38E4(0, v24[2] + 1, 1, v24);
          *a4 = v24;
        }
        unint64_t v27 = v24[2];
        unint64_t v26 = v24[3];
        if (v27 >= v26 >> 1)
        {
          uint64_t v24 = sub_1006A38E4((void *)(v26 > 1), v27 + 1, 1, v24);
          *a4 = v24;
        }
        v24[2] = v27 + 1;
        uint64_t v28 = &v24[11 * v27];
        v28[4] = v18;
        *((unsigned char *)v28 + 40) = v19;
        *((unsigned char *)v28 + 41) = BYTE1(v19) & 1;
        *((unsigned char *)v28 + 42) = BYTE2(v19);
        *((unsigned char *)v28 + 48) = v37;
        v28[7] = v36;
        v28[8] = v35;
        v28[9] = v34;
        v28[10] = v33;
        v28[11] = v22;
        *((unsigned char *)v28 + 96) = v32;
        v28[13] = v31;
        v28[14] = v23;
        swift_errorRelease();
        swift_bridgeObjectRelease();
        sub_10017E788(v18, v19, BYTE1(v19) & 1);
        id v12 = v29;
        if (([v29 next] & 1) == 0) {
          goto LABEL_16;
        }
      }
      swift_bridgeObjectRelease();
    }
LABEL_16:
    swift_release();
  }
  else
  {
    sub_10096ABF0();

    swift_willThrow();
    swift_release();
  }
}

void sub_100172B98(uint64_t a1, uint64_t a2, uint64_t a3, void **a4)
{
  Swift::String v8 = *(void **)(a3 + 24);
  Swift::String v9 = (void *)swift_allocObject();
  v9[2] = a3;
  v9[3] = a1;
  v9[4] = a2;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = sub_10017E75C;
  *(void *)(v10 + 24) = v9;
  uint64_t v42 = sub_10017EC40;
  uint64_t v43 = v10;
  id aBlock = _NSConcreteStackBlock;
  uint64_t v39 = 1107296256;
  id v40 = sub_10017090C;
  uint64_t v41 = &unk_100A73160;
  char v11 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  id aBlock = 0;
  id v12 = [v8 fetchSwift:v11 error:&aBlock];
  _Block_release(v11);
  uint64_t v13 = aBlock;
  LOBYTE(v8) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v8) {
LABEL_18:
  }
    __break(1u);
  if (v12)
  {
    if ([v12 next])
    {
      id v29 = v12;
      while (1)
      {
        uint64_t v15 = sub_1003FE79C();
        uint64_t v16 = sub_100550054((uint64_t)v15, v12, 0);
        if (v4) {
          break;
        }
        uint64_t v18 = (void *)v16;
        uint64_t v19 = v17;
        swift_bridgeObjectRelease();
        unint64_t v20 = (unint64_t)sub_1003FE79C()[2];
        swift_bridgeObjectRelease();
        if (v20 >> 31)
        {
          __break(1u);
          goto LABEL_18;
        }
        int v21 = sub_1003FDC1C();
        sub_10054A0D4(v12, (uint64_t)v21, v20, (uint64_t)&aBlock);
        swift_bridgeObjectRelease();
        char v37 = (char)aBlock;
        uint64_t v35 = v40;
        uint64_t v36 = v39;
        uint64_t v22 = v43;
        uint64_t v33 = v42;
        unint64_t v34 = v41;
        char v32 = v44;
        uint64_t v23 = v46;
        uint64_t v31 = v45;
        uint64_t v24 = *a4;
        sub_10009C394(v18, v19, BYTE1(v19) & 1);
        swift_errorRetain();
        swift_bridgeObjectRetain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *a4 = v24;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t v24 = sub_1006A38F8(0, v24[2] + 1, 1, v24);
          *a4 = v24;
        }
        unint64_t v27 = v24[2];
        unint64_t v26 = v24[3];
        if (v27 >= v26 >> 1)
        {
          uint64_t v24 = sub_1006A38F8((void *)(v26 > 1), v27 + 1, 1, v24);
          *a4 = v24;
        }
        v24[2] = v27 + 1;
        uint64_t v28 = &v24[11 * v27];
        v28[4] = v18;
        *((unsigned char *)v28 + 40) = v19;
        *((unsigned char *)v28 + 41) = BYTE1(v19) & 1;
        *((unsigned char *)v28 + 42) = BYTE2(v19);
        *((unsigned char *)v28 + 48) = v37;
        v28[7] = v36;
        v28[8] = v35;
        v28[9] = v34;
        v28[10] = v33;
        v28[11] = v22;
        *((unsigned char *)v28 + 96) = v32;
        v28[13] = v31;
        v28[14] = v23;
        swift_errorRelease();
        swift_bridgeObjectRelease();
        sub_1000D30C4(v18, v19, BYTE1(v19) & 1);
        id v12 = v29;
        if (([v29 next] & 1) == 0) {
          goto LABEL_16;
        }
      }
      swift_bridgeObjectRelease();
    }
LABEL_16:
    swift_release();
  }
  else
  {
    sub_10096ABF0();

    swift_willThrow();
    swift_release();
  }
}

void sub_100172FC0(uint64_t a1, uint64_t a2, void (*a3)(void, _OWORD *), uint64_t a4)
{
  uint64_t v6 = v4;
  char v11 = *(void **)(v4 + 24);
  id v12 = (void *)swift_allocObject();
  v12[2] = v6;
  v12[3] = a1;
  v12[4] = a2;
  uint64_t v13 = (void *)swift_allocObject();
  void v13[2] = sub_10017DC00;
  v13[3] = v12;
  aBlock[4] = sub_10017EC40;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_10017090C;
  aBlock[3] = &unk_100A72E40;
  uint64_t v14 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  id v15 = [v11 fetchSwift:v14 error:aBlock];
  _Block_release(v14);
  id v17 = aBlock[0];
  LOBYTE(v6) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v6) {
    __break(1u);
  }
  if (v15)
  {
    if (objc_msgSend(v15, "next", v17))
    {
      while (1)
      {
        sub_100179594(v15, a3, a4);
        if (v5) {
          break;
        }
        if (([v15 next] & 1) == 0) {
          goto LABEL_9;
        }
      }
    }
LABEL_9:
    swift_release();
  }
  else
  {
    sub_10096ABF0();

    swift_willThrow();
    swift_release();
  }
}

uint64_t sub_100173244(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t), uint64_t a4, uint64_t a5)
{
  sub_10096CBD0(52);
  v12._uint64_t countAndFlagsBits = 0x20455441445055;
  v12._object = (void *)0xE700000000000000;
  sub_10096BDC0(v12);
  uint64_t v10 = *(void *)(a2 + 40);
  Swift::String v9 = *(void **)(a2 + 48);
  swift_bridgeObjectRetain();
  v13._uint64_t countAndFlagsBits = v10;
  v13._object = v9;
  sub_10096BDC0(v13);
  swift_bridgeObjectRelease();
  v14._object = (void *)0x8000000100997A30;
  v14._uint64_t countAndFlagsBits = 0xD000000000000010;
  sub_10096BDC0(v14);
  v15._uint64_t countAndFlagsBits = sub_10096D220();
  sub_10096BDC0(v15);
  swift_bridgeObjectRelease();
  v16._object = (void *)0x8000000100997A50;
  v16._uint64_t countAndFlagsBits = 0xD000000000000010;
  sub_10096BDC0(v16);
  v17._uint64_t countAndFlagsBits = sub_10096D220();
  sub_10096BDC0(v17);
  swift_bridgeObjectRelease();
  v18._uint64_t countAndFlagsBits = 0x20444E4120;
  v18._object = (void *)0xE500000000000000;
  sub_10096BDC0(v18);
  v19._uint64_t countAndFlagsBits = a3(a1, a5);
  sub_10096BDC0(v19);
  swift_bridgeObjectRelease();
  return 0;
}

BOOL sub_1001733DC(uint64_t a1)
{
  uint64_t v92 = a1;
  uint64_t v2 = *v1;
  uint64_t v3 = *(char **)(*v1 + 96);
  uint64_t v4 = *(char **)(*v1 + 80);
  uint64_t AssociatedTypeWitness = (void **)swift_getAssociatedTypeWitness();
  uint64_t v81 = sub_10096C890();
  uint64_t v84 = *(void *)(v81 - 8);
  __chkstk_darwin(v81);
  uint64_t v82 = (char *)v69 - v6;
  uint64_t v83 = sub_10096B480();
  uint64_t v88 = *(void *)(v83 - 8);
  __chkstk_darwin(v83);
  uint64_t v87 = (char *)v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(v2 + 104);
  uint64_t v9 = *(void *)(v2 + 88);
  uint64_t v10 = swift_getAssociatedTypeWitness();
  uint64_t v86 = v3;
  id v85 = v4;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v12 = swift_getAssociatedConformanceWitness();
  id aBlock = AssociatedTypeWitness;
  uint64_t v95 = v10;
  uint64_t v96 = (id (*)(uint64_t, void *))AssociatedConformanceWitness;
  uint64_t v97 = (void *)v12;
  os_log_t v89 = (os_log_t)type metadata accessor for ThrottlingKey();
  Class isa = v89[-1].isa;
  uint64_t v14 = *((void *)isa + 8);
  uint64_t v15 = __chkstk_darwin(v89);
  __chkstk_darwin(v15);
  Swift::String v17 = (char *)v69 - v16;
  id v18 = v91;
  uint64_t v19 = v92;
  id v90 = v1;
  int v20 = sub_100175688(v92);
  if (!v18)
  {
    unsigned __int8 v74 = (char *)v69 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
    int v78 = v20;
    uint64_t v80 = AssociatedTypeWitness;
    uint64_t v79 = 0;
    int v22 = *((unsigned __int8 *)v90 + 104);
    id v91 = (id)v90[3];
    Class v75 = isa;
    uint64_t v23 = (char *)isa + 16;
    uint64_t v76 = (void (*)(char *, uint64_t, os_log_t))*((void *)isa + 2);
    v76(v17, v19, v89);
    unint64_t v24 = (*((unsigned __int8 *)isa + 80) + 56) & ~(unint64_t)*((unsigned __int8 *)isa + 80);
    uint64_t v25 = (void (**)(char *, char *, os_log_t))((char *)isa + 32);
    uint64_t v73 = v17;
    unint64_t v77 = v23;
    if (v22 == 1)
    {
      unint64_t v26 = (char *)swift_allocObject();
      *((void *)v26 + 2) = v85;
      *((void *)v26 + 3) = v9;
      *((void *)v26 + 4) = v86;
      *((void *)v26 + 5) = v8;
      unint64_t v27 = v90;
      *((void *)v26 + 6) = v90;
      uint64_t v28 = v17;
      os_log_t v29 = v89;
      (*v25)(&v26[v24], v28, v89);
      uint64_t v30 = swift_allocObject();
      *(void *)(v30 + 16) = sub_10017D3DC;
      *(void *)(v30 + 24) = v26;
      id v85 = v26;
      uint64_t v98 = sub_10017EC40;
      uint64_t v99 = v30;
      id aBlock = _NSConcreteStackBlock;
      uint64_t v95 = 1107296256;
      uint64_t v96 = sub_10017090C;
      uint64_t v97 = &unk_100A72C88;
      uint64_t v31 = _Block_copy(&aBlock);
      swift_retain();
      swift_retain();
      swift_release();
      id aBlock = 0;
      unsigned int v32 = [v91 executeSwift:v31 error:&aBlock];
      _Block_release(v31);
      uint64_t v33 = aBlock;
      LOBYTE(v31) = swift_isEscapingClosureAtFileLocation();
      swift_release();
      uint64_t v34 = v88;
      if ((v31 & 1) == 0)
      {
        uint64_t v35 = v27;
        uint64_t v36 = v87;
        uint64_t v37 = v92;
        if (v32)
        {
          uint64_t v72 = 0;
          uint64_t v86 = 0;
          uint64_t v38 = sub_10017D3DC;
          uint64_t v39 = (char *)&v101 + 8;
          goto LABEL_9;
        }
LABEL_16:
        sub_10096ABF0();

        swift_willThrow();
        swift_release();
        return v21;
      }
      __break(1u);
    }
    else
    {
      id v40 = (char *)swift_allocObject();
      *((void *)v40 + 2) = v85;
      *((void *)v40 + 3) = v9;
      *((void *)v40 + 4) = v86;
      *((void *)v40 + 5) = v8;
      uint64_t v41 = v90;
      *((void *)v40 + 6) = v90;
      uint64_t v42 = v17;
      os_log_t v29 = v89;
      (*v25)(&v40[v24], v42, v89);
      uint64_t v43 = swift_allocObject();
      *(void *)(v43 + 16) = sub_10017D340;
      *(void *)(v43 + 24) = v40;
      uint64_t v86 = v40;
      uint64_t v98 = sub_10017EC40;
      uint64_t v99 = v43;
      id aBlock = _NSConcreteStackBlock;
      uint64_t v95 = 1107296256;
      uint64_t v96 = sub_10017090C;
      uint64_t v97 = &unk_100A72C10;
      char v44 = _Block_copy(&aBlock);
      swift_retain();
      swift_retain();
      swift_release();
      id aBlock = 0;
      unsigned int v45 = [v91 executeSwift:v44 error:&aBlock];
      _Block_release(v44);
      uint64_t v33 = aBlock;
      LOBYTE(v44) = swift_isEscapingClosureAtFileLocation();
      swift_release();
      uint64_t v34 = v88;
      if ((v44 & 1) == 0)
      {
        uint64_t v35 = v41;
        uint64_t v36 = v87;
        uint64_t v37 = v92;
        if (v45)
        {
          uint64_t v71 = 0;
          id v85 = 0;
          uint64_t v38 = sub_10017D340;
          uint64_t v39 = (char *)v102;
LABEL_9:
          *((void *)v39 - 32) = v38;
          id v46 = [v91 changes];
          uint64_t v47 = v84;
          id v48 = v80;
          uint64_t v49 = v83;
          if (!v46) {
            goto LABEL_18;
          }
          id v50 = (id)fpfs_current_or_default_log();
          sub_10096B490();
          os_log_type_t v51 = v74;
          v76(v74, v37, v29);
          swift_retain();
          BOOL v52 = sub_10096B470();
          LODWORD(v92) = sub_10096C5A0();
          if (!os_log_type_enabled(v52, (os_log_type_t)v92))
          {
            (*((void (**)(char *, os_log_t))v75 + 1))(v51, v29);

            swift_release();
            (*(void (**)(char *, uint64_t))(v34 + 8))(v36, v49);
LABEL_18:
            if (v78 == 1)
            {
              unint64_t v63 = v82;
              (*((void (**)(char *, uint64_t, uint64_t, void **))*(v48 - 1) + 7))(v82, 1, 1, v48);
              uint64_t v64 = v79;
              sub_10016F230(1, 0, 0, v63);
              if (v64)
              {
                (*(void (**)(char *, uint64_t))(v47 + 8))(v63, v81);
                sub_1000705CC(v71);
                sub_1000705CC(v72);
                return v21;
              }
              (*(void (**)(char *, uint64_t))(v47 + 8))(v63, v81);
            }
            uint64_t v65 = v72;
            uint64_t v66 = v71;
            id v67 = [v91 changes];
            sub_1000705CC(v66);
            sub_1000705CC(v65);
            return v67 != 0;
          }
          os_log_t v89 = v52;
          uint64_t v33 = (void **)swift_slowAlloc();
          uint64_t v70 = (void **)swift_slowAlloc();
          id aBlock = v70;
          *(_DWORD *)uint64_t v33 = 136446722;
          if (*((unsigned char *)v35 + 32)) {
            uint64_t v53 = 20550;
          }
          else {
            uint64_t v53 = 21318;
          }
          uint64_t v93 = sub_100719D44(v53, 0xE200000000000000, (uint64_t *)&aBlock);
          sub_10096C8C0();
          swift_release();
          swift_bridgeObjectRelease();
          *((_WORD *)v33 + 6) = 2080;
          v69[1] = (char *)v33 + 14;
          uint64_t v54 = v73;
          v76(v73, (uint64_t)v51, v29);
          uint64_t v55 = (void (*)(char *, os_log_t))*((void *)v75 + 1);
          v55(v51, v29);
          uint64_t v56 = sub_10070E770(v29);
          unint64_t v58 = v57;
          v55(v54, v29);
          uint64_t v93 = sub_100719D44(v56, v58, (uint64_t *)&aBlock);
          sub_10096C8C0();
          swift_bridgeObjectRelease();
          *((_WORD *)v33 + 11) = 2080;
          if (qword_100ACC160 == -1)
          {
LABEL_15:
            v102[0] = xmmword_100B0B4B0;
            v102[1] = *(_OWORD *)&byte_100B0B4C0;
            uint64_t v103 = qword_100B0B4D0;
            long long v100 = xmmword_100B0B490;
            long long v101 = unk_100B0B4A0;
            sub_10017D368((uint64_t)&v100);
            uint64_t v59 = sub_10070DE54();
            unint64_t v61 = v60;
            sub_10017D3A0((uint64_t)&v100);
            uint64_t v93 = sub_100719D44(v59, v61, (uint64_t *)&aBlock);
            sub_10096C8C0();
            swift_bridgeObjectRelease();
            os_log_t v62 = v89;
            _os_log_impl((void *)&_mh_execute_header, v89, (os_log_type_t)v92, "✍️  %{public}s: throttle %s: %s", (uint8_t *)v33, 0x20u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            (*(void (**)(char *, uint64_t))(v88 + 8))(v87, v83);
            uint64_t v47 = v84;
            id v48 = v80;
            goto LABEL_18;
          }
LABEL_27:
          swift_once();
          goto LABEL_15;
        }
        goto LABEL_16;
      }
    }
    __break(1u);
    goto LABEL_27;
  }
  return v21;
}

unint64_t sub_100174020(void *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v34 = a8;
  uint64_t v35 = a6;
  uint64_t v33 = a10;
  uint64_t v36 = 0;
  uint64_t v37 = (unsigned __int8 *(*)@<X0>(unsigned __int8 *@<X0>, void *@<X8>))0xE000000000000000;
  sub_10096CBD0(29);
  swift_bridgeObjectRelease();
  unint64_t v42 = 0xD000000000000015;
  unint64_t v43 = 0x8000000100997990;
  uint64_t v14 = *a3;
  v41._uint64_t countAndFlagsBits = 40;
  v41._object = (void *)0xE100000000000000;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = a1;
  uint64_t v36 = v14;
  uint64_t v37 = sub_10017D118;
  uint64_t v38 = 0;
  uint64_t v39 = sub_10017D9B0;
  uint64_t v40 = v15;
  swift_bridgeObjectRetain_n();
  id v16 = a1;
  sub_10002B7CC((uint64_t *)&unk_100AD7340);
  sub_100025500((unint64_t *)&unk_100ACE110, (uint64_t *)&unk_100AD7340);
  sub_10001F9C0();
  uint64_t v17 = sub_10096BF90();
  uint64_t v19 = v18;
  swift_release();
  swift_bridgeObjectRelease();
  v44._uint64_t countAndFlagsBits = v17;
  v44._object = v19;
  sub_10096BDC0(v44);
  swift_bridgeObjectRelease();
  v45._uint64_t countAndFlagsBits = 41;
  v45._object = (void *)0xE100000000000000;
  sub_10096BDC0(v45);
  swift_bridgeObjectRelease();
  sub_10096BDC0(v41);
  swift_bridgeObjectRelease();
  v46._uint64_t countAndFlagsBits = 10;
  v46._object = (void *)0xE100000000000000;
  sub_10096BDC0(v46);
  if (a5)
  {
    swift_bridgeObjectRetain();
    sub_10096CBD0(35);
    swift_bridgeObjectRelease();
    uint64_t v36 = 0xD000000000000021;
    uint64_t v37 = (unsigned __int8 *(*)@<X0>(unsigned __int8 *@<X0>, void *@<X8>))0x80000001009979B0;
    NSString v20 = sub_10096BC00();
    id v21 = [v16 bindStringParameter:v20];

    uint64_t v22 = _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
    unint64_t v24 = v23;

    v47._uint64_t countAndFlagsBits = v22;
    v47._object = v24;
    sub_10096BDC0(v47);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v25._uint64_t countAndFlagsBits = 0xD000000000000021;
    unint64_t v26 = (void *)0x80000001009979B0;
  }
  else
  {
    v25._uint64_t countAndFlagsBits = 0;
    unint64_t v26 = (void *)0xE000000000000000;
  }
  v25._object = v26;
  sub_10096BDC0(v25);
  swift_bridgeObjectRelease();
  v48._uint64_t countAndFlagsBits = 10;
  v48._object = (void *)0xE100000000000000;
  sub_10096BDC0(v48);
  __chkstk_darwin(v27);
  v32[2] = a7;
  v32[3] = v34;
  v32[4] = a9;
  v32[5] = v33;
  v32[6] = v16;
  swift_getAssociatedTypeWitness();
  sub_10096C890();
  sub_100827804((void (*)(char *, char *))sub_10017D9B8, (uint64_t)v32, (uint64_t)&type metadata for Never, (uint64_t)&type metadata for String, v28, (uint64_t)&v36);
  if (v37) {
    v29._uint64_t countAndFlagsBits = v36;
  }
  else {
    v29._uint64_t countAndFlagsBits = 0;
  }
  if (v37) {
    uint64_t v30 = v37;
  }
  else {
    uint64_t v30 = (void *)0xE000000000000000;
  }
  v29._object = v30;
  sub_10096BDC0(v29);
  swift_bridgeObjectRelease();
  return v42;
}

uint64_t sub_1001743A4@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  sub_10096CBD0(16);
  swift_bridgeObjectRelease();
  strcpy((char *)v9, "AND item_id = ");
  HIBYTE(v9[1]) = -18;
  swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(swift_getAssociatedConformanceWitness() + 40);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
  uint64_t v6 = swift_checkMetadataState();
  v10._uint64_t countAndFlagsBits = v5(a1, v6, v4);
  sub_10096BDC0(v10);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v8 = v9[1];
  *a2 = v9[0];
  a2[1] = v8;
  return result;
}

uint64_t sub_1001744D8(uint64_t a1)
{
  uint64_t v23 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v20 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v22 = swift_getAssociatedConformanceWitness();
  uint64_t v3 = type metadata accessor for ThrottlingKey();
  sub_10096C1C0();
  swift_getWitnessTable();
  uint64_t result = sub_10096C460();
  if ((result & 1) == 0)
  {
    uint64_t result = sub_10096C160();
    if (result >= 1)
    {
      uint64_t v5 = result;
      uint64_t v6 = a1;
      uint64_t result = 0;
      while (1)
      {
        uint64_t v7 = result + 100;
        if (__OFADD__(result, 100)) {
          break;
        }
        if (v5 >= v7) {
          uint64_t v8 = result + 100;
        }
        else {
          uint64_t v8 = v5;
        }
        if (v8 < result) {
          goto LABEL_15;
        }
        uint64_t v9 = v6;
        uint64_t v10 = v3;
        uint64_t v11 = sub_10096C200();
        uint64_t v12 = __chkstk_darwin(v11);
        void v17[2] = v1;
        v17[3] = v12;
        v17[4] = v13;
        v17[5] = v14;
        v17[6] = v15;
        uint64_t v16 = v18;
        sub_100171288((uint64_t)sub_10017DC34, (unint64_t)v17);
        uint64_t v18 = v16;
        if (v16) {
          return swift_unknownObjectRelease();
        }
        swift_unknownObjectRelease();
        uint64_t result = v8;
        uint64_t v6 = v9;
        uint64_t v3 = v10;
        if (v5 <= v7) {
          return result;
        }
      }
      __break(1u);
LABEL_15:
      __break(1u);
    }
  }
  return result;
}

unint64_t sub_100174740(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  sub_10096CBD0(35);
  swift_bridgeObjectRelease();
  unint64_t v32 = 0xD000000000000015;
  unint64_t v33 = 0x8000000100997AD0;
  v34._uint64_t countAndFlagsBits = sub_10096D220();
  sub_10096BDC0(v34);
  swift_bridgeObjectRelease();
  v35._uint64_t countAndFlagsBits = 10;
  v35._object = (void *)0xE100000000000000;
  sub_10096BDC0(v35);
  v36._uint64_t countAndFlagsBits = sub_10017D404(a2);
  sub_10096BDC0(v36);
  swift_bridgeObjectRelease();
  v37._uint64_t countAndFlagsBits = 0x2820444E410ALL;
  v37._object = (void *)0xE600000000000000;
  sub_10096BDC0(v37);
  uint64_t v28 = a4;
  uint64_t v29 = a5;
  uint64_t v30 = a6;
  uint64_t v31 = a7;
  uint64_t v22 = a3;
  uint64_t v23 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v25 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v27 = swift_getAssociatedConformanceWitness();
  type metadata accessor for ThrottlingKey();
  uint64_t v12 = sub_10096CA20();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v28 = sub_1003FC0AC((void (*)(char *, char *))sub_10017DC44, (uint64_t)v21, v12, (uint64_t)&type metadata for String, (uint64_t)&type metadata for Never, WitnessTable, (uint64_t)&protocol witness table for Never, v14);
  sub_10002B7CC((uint64_t *)&unk_100AD5CC0);
  sub_100025500(qword_100ACE150, (uint64_t *)&unk_100AD5CC0);
  uint64_t v15 = sub_10096BB50();
  uint64_t v17 = v16;
  swift_bridgeObjectRelease();
  v38._uint64_t countAndFlagsBits = v15;
  v38._object = v17;
  sub_10096BDC0(v38);
  swift_bridgeObjectRelease();
  v39._uint64_t countAndFlagsBits = 41;
  v39._object = (void *)0xE100000000000000;
  sub_10096BDC0(v39);
  return v32;
}

void sub_100174A54(uint64_t a1@<X0>, uint64_t a2@<X2>, void *a3@<X8>)
{
  v4._uint64_t countAndFlagsBits = sub_10017D4A8(a1, a2);
  sub_10096BDC0(v4);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = 41;
  v5._object = (void *)0xE100000000000000;
  sub_10096BDC0(v5);
  *a3 = 40;
  a3[1] = 0xE100000000000000;
}

uint64_t sub_100174B24()
{
  uint64_t v0 = sub_10096B0E0();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100ACC000 != -1) {
    swift_once();
  }
  uint64_t result = sub_10070C2F0((uint64_t)sub_10009F3F4, 0);
  if (result)
  {
    sub_10096B0D0();
    sub_10096B080();
    double v6 = v5;
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    double v7 = v6 * 1000000000.0;
    if ((~COERCE__INT64(v6 * 1000000000.0) & 0x7FF0000000000000) != 0)
    {
      if (v7 > -9.22337204e18)
      {
        if (v7 < 9.22337204e18)
        {
          __chkstk_darwin(result);
          v9[-2] = v8;
          return sub_100171288((uint64_t)sub_10017E540, (unint64_t)&v9[-4]);
        }
LABEL_11:
        __break(1u);
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_11;
  }
  return result;
}

uint64_t sub_100174D08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v8[1] = 0xE000000000000000;
  sub_10096CBD0(48);
  swift_bridgeObjectRelease();
  unint64_t v9 = 0xD000000000000013;
  unint64_t v10 = 0x8000000100997B70;
  v8[3] = &type metadata for Int;
  v8[0] = a3;
  uint64_t v4 = sub_1003AC444((uint64_t)v8);
  double v6 = v5;
  sub_10017D1A4((uint64_t)v8);
  if (v6)
  {
    v11._uint64_t countAndFlagsBits = v4;
    v11._object = v6;
    sub_10096BDC0(v11);
    swift_bridgeObjectRelease();
    v12._uint64_t countAndFlagsBits = 0xD000000000000019;
    v12._object = (void *)0x8000000100997CF0;
    sub_10096BDC0(v12);
    v8[0] = 7;
    v13._uint64_t countAndFlagsBits = sub_10096D220();
    sub_10096BDC0(v13);
    swift_bridgeObjectRelease();
    return v9;
  }
  else
  {
    uint64_t result = sub_10096CE20();
    __break(1u);
  }
  return result;
}

uint64_t sub_100174E60(uint64_t a1, uint64_t a2)
{
  v8[2] = a2;
  v8[3] = a1;
  uint64_t result = sub_100171288((uint64_t)sub_10017DE90, (unint64_t)v8);
  if (!v2)
  {
    uint64_t result = sub_1001750A8();
    if (result)
    {
      double v5 = *(uint64_t (**)(uint64_t))(a1 + 144);
      if (v5)
      {
        uint64_t v6 = swift_retain();
        uint64_t v7 = v5(v6);
        uint64_t result = sub_1000705CC((uint64_t)v5);
        if (v7)
        {
          (*(void (**)(uint64_t))(*(void *)v7 + 344))(result);
          return swift_release();
        }
      }
    }
  }
  return result;
}

uint64_t sub_100174F38(uint64_t a1, char a2, uint64_t a3)
{
  v9[1] = 0xE000000000000000;
  sub_10096CBD0(24);
  swift_bridgeObjectRelease();
  unint64_t v10 = 0xD000000000000013;
  unint64_t v11 = 0x8000000100997B70;
  v9[3] = &type metadata for Int;
  v9[0] = a3;
  uint64_t v5 = sub_1003AC444((uint64_t)v9);
  uint64_t v7 = v6;
  sub_10017D1A4((uint64_t)v9);
  if (v7)
  {
    v12._uint64_t countAndFlagsBits = v5;
    v12._object = v7;
    sub_10096BDC0(v12);
    swift_bridgeObjectRelease();
    v13._uint64_t countAndFlagsBits = 10;
    v13._object = (void *)0xE100000000000000;
    sub_10096BDC0(v13);
    v14._uint64_t countAndFlagsBits = sub_10017D404(a2 & 1);
    sub_10096BDC0(v14);
    swift_bridgeObjectRelease();
    return v10;
  }
  else
  {
    uint64_t result = sub_10096CE20();
    __break(1u);
  }
  return result;
}

uint64_t sub_1001750A8()
{
  uint64_t v1 = *(void **)(v0 + 24);
  uint64_t v2 = (void *)swift_allocObject();
  unsigned __int8 v3 = v2;
  v2[2] = sub_10017DE98;
  v2[3] = v0;
  aBlock[4] = sub_10017EC40;
  aBlock[5] = v2;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_10017090C;
  aBlock[3] = &unk_100A72F30;
  uint64_t v4 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  id v5 = [v1 fetchSwift:v4 error:aBlock];
  _Block_release(v4);
  id v6 = aBlock[0];
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  if (v5)
  {
    unsigned __int8 v3 = [v5 next];
    swift_release();
  }
  else
  {
    sub_10096ABF0();

    swift_willThrow();
    swift_release();
  }
  return v3 & 1;
}

void sub_100175274()
{
  sub_10016F470();
  if (!v1)
  {
    uint64_t v2 = *(void **)(v0 + 24);
    unsigned __int8 v3 = (void *)swift_allocObject();
    v3[2] = sub_10017E4FC;
    v3[3] = v0;
    aBlock[4] = sub_10017EC40;
    aBlock[5] = v3;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = (id)1107296256;
    aBlock[2] = sub_10017090C;
    aBlock[3] = &unk_100A73070;
    uint64_t v4 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    aBlock[0] = 0;
    id v5 = [v2 fetchSwift:v4 error:aBlock];
    _Block_release(v4);
    id v6 = aBlock[0];
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if (isEscapingClosureAtFileLocation) {
      __break(1u);
    }
    if (v5)
    {
      if ([v5 next]) {
        sub_100170778();
      }
      swift_release();
    }
    else
    {
      sub_10096ABF0();

      swift_willThrow();
      swift_release();
    }
  }
}

uint64_t sub_100175448(uint64_t a1, uint64_t a2)
{
  sub_10096CBD0(81);
  v6._uint64_t countAndFlagsBits = 0xD000000000000016;
  v6._object = (void *)0x8000000100997BE0;
  sub_10096BDC0(v6);
  uint64_t v4 = *(void *)(a2 + 40);
  unsigned __int8 v3 = *(void **)(a2 + 48);
  swift_bridgeObjectRetain();
  v7._uint64_t countAndFlagsBits = v4;
  v7._object = v3;
  sub_10096BDC0(v7);
  swift_bridgeObjectRelease();
  v8._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
  v8._object = (void *)0x8000000100997C00;
  sub_10096BDC0(v8);
  v9._uint64_t countAndFlagsBits = sub_10096D220();
  sub_10096BDC0(v9);
  swift_bridgeObjectRelease();
  v10._object = (void *)0x8000000100997C20;
  v10._uint64_t countAndFlagsBits = 0xD000000000000010;
  sub_10096BDC0(v10);
  v11._uint64_t countAndFlagsBits = sub_10096D220();
  sub_10096BDC0(v11);
  swift_bridgeObjectRelease();
  v12._uint64_t countAndFlagsBits = 0x2054494D494C200ALL;
  v12._object = (void *)0xE900000000000031;
  sub_10096BDC0(v12);
  return 0;
}

void sub_1001755A4()
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 144);
  if (!v1)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v2 = v0;
  uint64_t v3 = swift_retain();
  uint64_t v4 = v1(v3);
  uint64_t v5 = sub_1000705CC((uint64_t)v1);
  if (!v4)
  {
LABEL_7:
    __break(1u);
    return;
  }
  Swift::String v6 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 168))(v5);
  sub_100270A48(0, 0, (uint64_t)"invalidate()", 12, 2, (uint64_t)sub_10017DC64, v2);

  swift_release();
}

uint64_t sub_100175688(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v23 = a1;
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 80);
  uint64_t v22 = *(void *)(*v1 + 96);
  uint64_t AssociatedTypeWitness = (void **)swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(v3 + 104);
  uint64_t v7 = *(void *)(v3 + 88);
  id aBlock = AssociatedTypeWitness;
  uint64_t v26 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v28 = (void *)swift_getAssociatedConformanceWitness();
  uint64_t v8 = type metadata accessor for ThrottlingKey();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  Swift::String v11 = (char *)&v21 - v10;
  id v24 = (id)v2[3];
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v21 - v10, v23, v8);
  unint64_t v12 = (*(unsigned __int8 *)(v9 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  Swift::String v13 = (char *)swift_allocObject();
  *((void *)v13 + 2) = v4;
  *((void *)v13 + 3) = v7;
  *((void *)v13 + 4) = v22;
  *((void *)v13 + 5) = v6;
  *((void *)v13 + 6) = v2;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v13[v12], v11, v8);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = sub_10017DAE4;
  *(void *)(v14 + 24) = v13;
  uint64_t v29 = sub_10017EC40;
  uint64_t v30 = v14;
  id aBlock = _NSConcreteStackBlock;
  uint64_t v26 = 1107296256;
  uint64_t AssociatedConformanceWitness = (uint64_t)sub_10017090C;
  uint64_t v28 = &unk_100A72D50;
  uint64_t v15 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  id aBlock = 0;
  id v16 = [v24 fetchSwift:v15 error:&aBlock];
  _Block_release(v15);
  uint64_t v17 = aBlock;
  LOBYTE(v15) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v15) {
    __break(1u);
  }
  if (v16)
  {
    if ([v16 next])
    {
      id v18 = [v16 longAtIndex:0];

      unsigned int v19 = sub_10070EEC0((unint64_t)v18);
      swift_release();
      if (v19 == 13) {
        return 0;
      }
      else {
        return v19;
      }
    }
    else
    {
      swift_release();

      return 0;
    }
  }
  else
  {
    sub_10096ABF0();

    swift_willThrow();
    return swift_release();
  }
}

unint64_t sub_100175A84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10096CBD0(44);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  uint64_t v7 = *(void **)(a2 + 48);
  swift_bridgeObjectRetain();
  v9._uint64_t countAndFlagsBits = v6;
  v9._object = v7;
  sub_10096BDC0(v9);
  swift_bridgeObjectRelease();
  v10._uint64_t countAndFlagsBits = 0x204552454857200ALL;
  v10._object = (void *)0xE800000000000000;
  sub_10096BDC0(v10);
  v11._uint64_t countAndFlagsBits = sub_10017D4A8(a3, a1);
  sub_10096BDC0(v11);
  swift_bridgeObjectRelease();
  return 0xD000000000000020;
}

uint64_t sub_100175BBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10096CBD0(29);
  swift_bridgeObjectRelease();
  strcpy((char *)v9, "DELETE FROM ");
  BYTE5(v9[1]) = 0;
  HIWORD(v9[1]) = -5120;
  uint64_t v6 = *(void *)(a2 + 40);
  uint64_t v7 = *(void **)(a2 + 48);
  swift_bridgeObjectRetain();
  v10._uint64_t countAndFlagsBits = v6;
  v10._object = v7;
  sub_10096BDC0(v10);
  swift_bridgeObjectRelease();
  v11._uint64_t countAndFlagsBits = 0x572020202020200ALL;
  v11._object = (void *)0xED00002045524548;
  sub_10096BDC0(v11);
  v12._uint64_t countAndFlagsBits = sub_10017D4A8(a3, a1);
  sub_10096BDC0(v12);
  swift_bridgeObjectRelease();
  return v9[0];
}

uint64_t sub_100175D00(void *a1, uint64_t a2, uint64_t a3)
{
  *(void *)&v17[0] = 0;
  *((void *)&v17[0] + 1) = 0xE000000000000000;
  sub_10096CBD0(48);
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 40);
  uint64_t v6 = *(void **)(a2 + 48);
  swift_bridgeObjectRetain();
  v19._uint64_t countAndFlagsBits = v7;
  v19._object = v6;
  sub_10096BDC0(v19);
  swift_bridgeObjectRelease();
  v20._uint64_t countAndFlagsBits = 0x205445532020200ALL;
  v20._object = (void *)0xE800000000000000;
  sub_10096BDC0(v20);
  if (qword_100ACC160 != -1) {
    swift_once();
  }
  void v17[2] = xmmword_100B0B4B0;
  v17[3] = *(_OWORD *)&byte_100B0B4C0;
  uint64_t v18 = qword_100B0B4D0;
  v17[0] = xmmword_100B0B490;
  v17[1] = unk_100B0B4A0;
  sub_10017D368((uint64_t)v17);
  uint64_t v8 = sub_1003FDC1C();
  Swift::String v9 = (char *)v8[2];
  if (v9)
  {
    for (i = 0; i != v9; ++i)
    {
      char v11 = i[(void)v8 + 32];
      sub_10017D368((uint64_t)v17);
      sub_1006FBB68(v11, a1);
      swift_bridgeObjectRelease();
      sub_10017D3A0((uint64_t)v17);
    }
  }
  swift_bridgeObjectRelease();
  sub_1003FDC1C();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = 0;
  *(void *)(v12 + 24) = 0xE000000000000000;
  sub_10002B7CC(&qword_100ACE120);
  sub_10017DA48();
  uint64_t v13 = sub_10096BB50();
  uint64_t v15 = v14;
  swift_release();
  swift_bridgeObjectRelease();
  sub_10017D3A0((uint64_t)v17);
  v21._uint64_t countAndFlagsBits = v13;
  v21._object = v15;
  sub_10096BDC0(v21);
  swift_bridgeObjectRelease();
  v22._uint64_t countAndFlagsBits = 0x204552454857200ALL;
  v22._object = (void *)0xE800000000000000;
  sub_10096BDC0(v22);
  v23._uint64_t countAndFlagsBits = sub_10017D4A8(a3, (uint64_t)a1);
  sub_10096BDC0(v23);
  swift_bridgeObjectRelease();
  v24._object = (void *)0x80000001009979E0;
  v24._uint64_t countAndFlagsBits = 0xD000000000000011;
  sub_10096BDC0(v24);
  v25._uint64_t countAndFlagsBits = sub_10096D220();
  sub_10096BDC0(v25);
  swift_bridgeObjectRelease();
  return 0x20455441445055;
}

uint64_t sub_100176020(uint64_t a1, uint64_t a2, void (*a3)(long long *__return_ptr, char *), void **a4)
{
  void (*v81)(long long *__return_ptr, char *);
  uint64_t v82;
  uint64_t (*v83)(uint64_t);
  uint64_t v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  void (*v90)(char *);
  uint64_t v91;
  int v92;
  os_log_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  long long v97;
  uint64_t v98;
  void *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  long long v104;
  void **v105;
  void (*v106)(long long *__return_ptr, char *);
  char *v107;
  id v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  void (*v121)(void, void, void);
  void *v122;
  uint64_t v123;
  void **v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  void **aBlock;
  long long v129;
  long long v130;
  uint64_t v131;
  char v132;
  uint64_t v133;
  uint64_t v134;
  long long v135;
  long long v136;
  long long v137;
  long long v138;
  uint64_t v139;
  char v140[8];
  long long v141;
  long long v142;
  uint64_t v143;
  char v144;
  uint64_t v145;
  uint64_t v146;

  uint64_t v5 = v4;
  uint64_t v105 = a4;
  uint64_t v106 = a3;
  uint64_t v103 = a2;
  uint64_t v126 = a1;
  uint64_t v7 = *(void *)(*v4 + 88);
  uint64_t v8 = *(void *)(*v4 + 96);
  uint64_t v9 = *(void *)(*v4 + 104);
  id aBlock = *(void ***)(*v4 + 80);
  uint64_t v6 = aBlock;
  *(void *)&char v129 = v7;
  uint64_t v10 = v7;
  *((void *)&v129 + 1) = v8;
  *(void *)&int v130 = v9;
  int v102 = type metadata accessor for PersistenceTrigger();
  long long v101 = *(void *)(v102 - 8);
  __chkstk_darwin(v102);
  long long v100 = (char *)&v91 - v11;
  uint64_t v117 = sub_10096B480();
  uint64_t v116 = *(void *)(v117 - 8);
  __chkstk_darwin(v117);
  long long v118 = (char *)&v91 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_log_t v124 = v6;
  uint64_t AssociatedTypeWitness = (void **)swift_getAssociatedTypeWitness();
  __int16 v123 = v10;
  uint64_t v14 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v16 = swift_getAssociatedConformanceWitness();
  id aBlock = AssociatedTypeWitness;
  *(void *)&char v129 = v14;
  *((void *)&v129 + 1) = AssociatedConformanceWitness;
  *(void *)&int v130 = v16;
  uint64_t v17 = (void *)type metadata accessor for ThrottlingKey();
  uint64_t v18 = *(v17 - 1);
  uint64_t v19 = *(void *)(v18 + 64);
  uint64_t v20 = __chkstk_darwin(v17);
  uint64_t v107 = (char *)&v91 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  Swift::String v22 = (char *)&v91 - v21;
  Swift::String v23 = (void *)v5[3];
  Swift::String v24 = *(void (**)(void, void, void))(v18 + 16);
  uint64_t v119 = v18 + 16;
  long long v121 = v24;
  v24((char *)&v91 - v21, v126, v17);
  uint64_t v25 = *(unsigned __int8 *)(v18 + 80);
  uint64_t v26 = (v25 + 56) & ~v25;
  unint64_t v109 = v26 + v19;
  uint64_t v110 = v25 | 7;
  uint64_t v27 = (void *)swift_allocObject();
  uint64_t v28 = v123;
  v27[2] = v124;
  v27[3] = v28;
  os_log_t v113 = v8;
  v27[4] = v8;
  v27[5] = v9;
  unint64_t v112 = v9;
  uint64_t v29 = v27;
  v27[6] = v5;
  unint64_t v111 = v26;
  uint64_t v30 = (char *)v27 + v26;
  uint64_t v114 = v18;
  unint64_t v33 = *(char **)(v18 + 32);
  uint64_t v31 = v18 + 32;
  unint64_t v32 = v33;
  unint64_t v115 = v22;
  uint64_t v125 = v17;
  ((void (*)(char *, char *, void *))v33)(v30, v22, v17);
  uint64_t v34 = swift_allocObject();
  *(void *)(v34 + 16) = sub_10017E058;
  *(void *)(v34 + 24) = v29;
  *((void *)&v130 + 1) = sub_10017EC40;
  long long v131 = v34;
  id aBlock = _NSConcreteStackBlock;
  *(void *)&char v129 = 1107296256;
  *((void *)&v129 + 1) = sub_10017090C;
  *(void *)&int v130 = &unk_100A72FA8;
  Swift::String v35 = _Block_copy(&aBlock);
  uint64_t v122 = v5;
  swift_retain();
  swift_retain();
  swift_release();
  id aBlock = 0;
  unint64_t v108 = v23;
  id v36 = [v23 fetchSwift:v35 error:&aBlock];
  _Block_release(v35);
  Swift::String v37 = aBlock;
  uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
    goto LABEL_38;
  }
  if (v36)
  {
    uint64_t isEscapingClosureAtFileLocation = (uint64_t)v36;
    if (![v36 next])
    {
      uint64_t v99 = v29;
      uint64_t v98 = v31;
      uint64_t v5 = v125;
      id v36 = v121;
      if (qword_100ACC160 != -1) {
        goto LABEL_39;
      }
      goto LABEL_8;
    }
    Swift::String v39 = sub_1003FDC1C();
    uint64_t v40 = v120;
    sub_10054A0D4(v36, (uint64_t)v39, 0, (uint64_t)&aBlock);
    uint64_t v120 = v40;
    uint64_t v5 = v125;
    id v36 = v121;
    if (v40)
    {
      swift_release();

      return swift_bridgeObjectRelease();
    }
    uint64_t v99 = v29;
    uint64_t v98 = v31;
    swift_bridgeObjectRelease();
    int v42 = aBlock;
    long long v47 = v129;
    long long v48 = v130;
    uint64_t v43 = v131;
    char v44 = v132;
    uint64_t v45 = v133;
    uint64_t v46 = v134;
    while (1)
    {
      *(void *)&uint64_t v97 = v32;
      os_log_t v94 = v42;
      v140[0] = v42;
      uint64_t v141 = v47;
      uint64_t v104 = v48;
      uint64_t v142 = v48;
      unsigned int v143 = v43;
      v144 = v44;
      v145 = v45;
      unint64_t v146 = v46;
      uint64_t v96 = v46;
      v106(&v135, v140);
      id v49 = (id)fpfs_current_or_default_log();
      id v50 = v118;
      sub_10096B490();
      os_log_type_t v51 = v107;
      ((void (*)(char *, uint64_t, void *))v36)(v107, v126, v5);
      swift_retain();
      sub_10017D368((uint64_t)&v135);
      swift_retain();
      sub_10017D368((uint64_t)&v135);
      BOOL v52 = sub_10096B470();
      os_log_type_t v53 = sub_10096C5A0();
      int v54 = v53;
      BOOL v55 = os_log_type_enabled(v52, v53);
      uint64_t v106 = (void (*)(long long *__return_ptr, char *))isEscapingClosureAtFileLocation;
      uint64_t v95 = v43;
      if (v55)
      {
        uint64_t v56 = swift_slowAlloc();
        uint64_t v105 = (void **)swift_slowAlloc();
        id aBlock = v105;
        *(_DWORD *)uint64_t v56 = 136446722;
        uint64_t v93 = v52;
        int v57 = *((unsigned __int8 *)v122 + 32);
        swift_release();
        uint64_t v58 = v57 ? 20550 : 21318;
        long long v127 = sub_100719D44(v58, 0xE200000000000000, (uint64_t *)&aBlock);
        sub_10096C8C0();
        swift_release();
        swift_bridgeObjectRelease();
        *(_WORD *)(v56 + 12) = 2080;
        id v91 = v56 + 14;
        uint64_t v92 = v54;
        unint64_t v32 = v115;
        v121(v115, v51, v5);
        uint64_t v59 = *(void (**)(char *, void *))(v114 + 8);
        v59(v51, v125);
        uint64_t v60 = sub_10070E770(v125);
        unint64_t v62 = v61;
        v59(v32, v125);
        uint64_t v5 = v125;
        long long v127 = sub_100719D44(v60, v62, (uint64_t *)&aBlock);
        sub_10096C8C0();
        swift_bridgeObjectRelease();
        *(_WORD *)(v56 + 22) = 2080;
        sub_10017D368((uint64_t)&v135);
        uint64_t v63 = sub_10070DE54();
        unint64_t v65 = v64;
        sub_10017D3A0((uint64_t)&v135);
        long long v127 = sub_100719D44(v63, v65, (uint64_t *)&aBlock);
        id v36 = v121;
        sub_10096C8C0();
        swift_bridgeObjectRelease();
        sub_10017D3A0((uint64_t)&v135);
        sub_10017D3A0((uint64_t)&v135);
        os_log_t v66 = v93;
        _os_log_impl((void *)&_mh_execute_header, v93, (os_log_type_t)v92, "✍️  %{public}s: throttle %s: %s", (uint8_t *)v56, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v116 + 8))(v118, v117);
      }
      else
      {
        (*(void (**)(char *, void *))(v114 + 8))(v51, v5);
        swift_release_n();
        sub_10017D3A0((uint64_t)&v135);
        sub_10017D3A0((uint64_t)&v135);

        (*(void (**)(char *, uint64_t))(v116 + 8))(v50, v117);
        unint64_t v32 = v115;
      }
      ((void (*)(char *, uint64_t, void *))v36)(v32, v126, v5);
      unint64_t v67 = (v109 + 7) & 0xFFFFFFFFFFFFFFF8;
      BOOL v68 = (void *)swift_allocObject();
      uint64_t v69 = v123;
      v68[2] = v124;
      v68[3] = v69;
      uint64_t v70 = v112;
      v68[4] = v113;
      v68[5] = v70;
      uint64_t v71 = (char *)v68 + v111;
      v68[6] = v122;
      ((void (*)(char *, char *, void *))v97)(v71, v32, v5);
      uint64_t v72 = (char *)v68 + v67;
      long long v73 = v138;
      *((_OWORD *)v72 + 2) = v137;
      *((_OWORD *)v72 + 3) = v73;
      *((void *)v72 + 8) = v139;
      long long v74 = v136;
      *(_OWORD *)uint64_t v72 = v135;
      *((_OWORD *)v72 + 1) = v74;
      uint64_t v75 = swift_allocObject();
      *(void *)(v75 + 16) = sub_10017E38C;
      *(void *)(v75 + 24) = v68;
      *((void *)&v130 + 1) = sub_10017EC40;
      long long v131 = v75;
      id aBlock = _NSConcreteStackBlock;
      *(void *)&char v129 = 1107296256;
      *((void *)&v129 + 1) = sub_10017090C;
      *(void *)&int v130 = &unk_100A73020;
      uint64_t v76 = _Block_copy(&aBlock);
      swift_retain();
      sub_10017D368((uint64_t)&v135);
      swift_retain();
      swift_release();
      id aBlock = 0;
      unsigned int v77 = [v108 executeSwift:v76 error:&aBlock];
      _Block_release(v76);
      uint64_t isEscapingClosureAtFileLocation = (uint64_t)aBlock;
      int v78 = aBlock;
      char v79 = swift_isEscapingClosureAtFileLocation();
      swift_release();
      if ((v79 & 1) == 0) {
        break;
      }
LABEL_38:
      __break(1u);
LABEL_39:
      swift_once();
LABEL_8:
      int v42 = xmmword_100B0B490;
      uint64_t v97 = *(long long *)((char *)&xmmword_100B0B490 + 8);
      uint64_t v104 = *(_OWORD *)&qword_100B0B4A8;
      uint64_t v43 = *((void *)&xmmword_100B0B4B0 + 1);
      char v44 = byte_100B0B4C0;
      uint64_t v45 = qword_100B0B4C8;
      uint64_t v46 = qword_100B0B4D0;
      swift_errorRetain();
      swift_bridgeObjectRetain();
      long long v47 = v97;
      long long v48 = v104;
    }
    if (v77)
    {
      if (v135 == 1)
      {
        uint64_t v80 = v103;
        if (*((uint64_t *)&v136 + 1) > v103 && v138 == 9) {
          sub_100170778();
        }
        uint64_t v81 = v106;
        if ((v94 != 1 || (uint64_t)v104 <= v80) && *((uint64_t *)&v136 + 1) > v80)
        {
          uint64_t v82 = *((void *)&v137 + 1);
          if (*((void *)&v137 + 1))
          {
            uint64_t v83 = (uint64_t (*)(uint64_t))v122[18];
            if (v83)
            {
              swift_errorRetain();
              uint64_t v84 = sub_100031400((uint64_t)v83);
              id v85 = v83(v84);
              sub_1000705CC((uint64_t)v83);
              if (v85)
              {
                sub_100033BE8((uint64_t *)&unk_100ACB6B0);
                uint64_t v86 = v125;
                uint64_t v87 = *(int *)(swift_getTupleTypeMetadata2() + 48);
                uint64_t v88 = v100;
                v121(v100, v126, v86);
                *(void *)&v88[v87] = v82;
                os_log_t v89 = v102;
                swift_storeEnumTagMultiPayload();
                id v90 = *(void (**)(char *))(*(void *)v85 + 312);
                swift_errorRetain();
                v90(v88);
                swift_release();
                (*(void (**)(char *, uint64_t))(v101 + 8))(v88, v89);
              }
              swift_errorRelease();
            }
            else
            {
              swift_errorRetain();
              swift_errorRelease();
            }
            swift_bridgeObjectRelease();
            swift_errorRelease();
            goto LABEL_33;
          }
        }
      }
      else
      {
        uint64_t v81 = v106;
      }
      swift_errorRelease();

      swift_bridgeObjectRelease();
LABEL_33:
      sub_10017D3A0((uint64_t)&v135);
      swift_release();
      return swift_release();
    }
    sub_10096ABF0();

    swift_willThrow();
    swift_errorRelease();

    swift_bridgeObjectRelease();
    sub_10017D3A0((uint64_t)&v135);
    swift_release();
  }
  else
  {
    sub_10096ABF0();

    swift_willThrow();
  }
  return swift_release();
}

uint64_t sub_10017704C(uint64_t a1, void *a2, uint64_t a3)
{
  sub_10096CBD0(29);
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[7];
  uint64_t v7 = (void *)a2[8];
  swift_bridgeObjectRetain();
  v11._uint64_t countAndFlagsBits = v6;
  v11._object = v7;
  sub_10096BDC0(v11);
  swift_bridgeObjectRelease();
  v12._uint64_t countAndFlagsBits = 0x204D4F524620200ALL;
  v12._object = (void *)0xE800000000000000;
  sub_10096BDC0(v12);
  uint64_t v8 = a2[5];
  uint64_t v9 = (void *)a2[6];
  swift_bridgeObjectRetain();
  v13._uint64_t countAndFlagsBits = v8;
  v13._object = v9;
  sub_10096BDC0(v13);
  swift_bridgeObjectRelease();
  v14._uint64_t countAndFlagsBits = 0x204552454857200ALL;
  v14._object = (void *)0xE800000000000000;
  sub_10096BDC0(v14);
  v15._uint64_t countAndFlagsBits = sub_10017D4A8(a3, a1);
  sub_10096BDC0(v15);
  swift_bridgeObjectRelease();
  return 0x205443454C4553;
}

uint64_t sub_1001771C0(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v36 = a3;
  Swift::String v37 = a1;
  v40[0] = swift_getAssociatedTypeWitness();
  v40[1] = swift_getAssociatedTypeWitness();
  v40[2] = swift_getAssociatedConformanceWitness();
  v40[3] = swift_getAssociatedConformanceWitness();
  uint64_t v6 = type metadata accessor for ThrottlingKey();
  uint64_t v7 = sub_10096C890();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v35 - v9;
  v40[0] = 0;
  v40[1] = 0xE000000000000000;
  sub_10096CBD0(46);
  swift_bridgeObjectRelease();
  strcpy((char *)v40, "REPLACE INTO ");
  HIWORD(v40[1]) = -4864;
  uint64_t v11 = a2[5];
  Swift::String v12 = (void *)a2[6];
  swift_bridgeObjectRetain();
  v41._uint64_t countAndFlagsBits = v11;
  v41._object = v12;
  sub_10096BDC0(v41);
  swift_bridgeObjectRelease();
  v42._uint64_t countAndFlagsBits = 10272;
  v42._object = (void *)0xE200000000000000;
  sub_10096BDC0(v42);
  uint64_t v13 = a2[9];
  Swift::String v14 = (void *)a2[10];
  swift_bridgeObjectRetain();
  v43._uint64_t countAndFlagsBits = v13;
  v43._object = v14;
  sub_10096BDC0(v43);
  swift_bridgeObjectRelease();
  v44._uint64_t countAndFlagsBits = 8236;
  v44._object = (void *)0xE200000000000000;
  sub_10096BDC0(v44);
  uint64_t v15 = a2[7];
  uint64_t v16 = (void *)a2[8];
  swift_bridgeObjectRetain();
  v45._uint64_t countAndFlagsBits = v15;
  v45._object = v16;
  sub_10096BDC0(v45);
  swift_bridgeObjectRelease();
  v46._object = (void *)0x8000000100997BC0;
  v46._uint64_t countAndFlagsBits = 0xD000000000000010;
  sub_10096BDC0(v46);
  uint64_t v17 = *(void *)(v6 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v10, v36, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v10, 0, 1, v6);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v19 = v6;
  uint64_t v20 = v37;
  uint64_t v21 = sub_1003AA6C4((uint64_t)v10, v19, WitnessTable);
  Swift::String v23 = v22;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v47._uint64_t countAndFlagsBits = v21;
  v47._object = v23;
  sub_10096BDC0(v47);
  swift_bridgeObjectRelease();
  v48._uint64_t countAndFlagsBits = 8236;
  v48._object = (void *)0xE200000000000000;
  sub_10096BDC0(v48);
  sub_10017D368(a4);
  Swift::String v24 = sub_1003FDC1C();
  uint64_t v25 = (char *)v24[2];
  if (v25)
  {
    swift_bridgeObjectRetain();
    for (i = 0; i != v25; ++i)
    {
      char v27 = i[(void)v24 + 32];
      sub_10017D368(a4);
      sub_1006FBB68(v27, v20);
      swift_bridgeObjectRelease();
      sub_10017D3A0(a4);
    }
    swift_bridgeObjectRelease();
    Swift::Int v28 = (Swift::Int)v24[2];
  }
  else
  {
    Swift::Int v28 = 0;
  }
  v49._uint64_t countAndFlagsBits = 2108479;
  v49._object = (void *)0xE300000000000000;
  uint64_t v29 = sub_10096BEA0(v49, v28);
  uint64_t v38 = v29;
  Swift::String v39 = (void *)v30;
  uint64_t v31 = HIBYTE(v30) & 0xF;
  if ((v30 & 0x2000000000000000) == 0) {
    uint64_t v31 = v29 & 0xFFFFFFFFFFFFLL;
  }
  if (v31)
  {
    sub_1004D810C(2);
    swift_bridgeObjectRelease();
    sub_10017D3A0(a4);
    uint64_t v32 = v38;
    unint64_t v33 = v39;
  }
  else
  {
    uint64_t v32 = v29;
    unint64_t v33 = (void *)v30;
    swift_bridgeObjectRelease();
    sub_10017D3A0(a4);
  }
  v50._uint64_t countAndFlagsBits = v32;
  v50._object = v33;
  sub_10096BDC0(v50);
  swift_bridgeObjectRelease();
  v51._uint64_t countAndFlagsBits = 41;
  v51._object = (void *)0xE100000000000000;
  sub_10096BDC0(v51);
  return v40[0];
}

double sub_1001776A8@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v23 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v7 = swift_getAssociatedConformanceWitness();
  *(void *)&long long v28 = AssociatedTypeWitness;
  *((void *)&v28 + 1) = v5;
  *(void *)&long long v29 = AssociatedConformanceWitness;
  *((void *)&v29 + 1) = v7;
  uint64_t v8 = type metadata accessor for ThrottlingKey();
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v22 - v9;
  (*(void (**)(char *, uint64_t))(v11 + 16))((char *)&v22 - v9, v23);
  long long v12 = v2[16];
  long long v32 = v2[15];
  long long v33 = v12;
  long long v13 = v2[18];
  long long v34 = v2[17];
  long long v35 = v13;
  long long v14 = v2[12];
  long long v28 = v2[11];
  long long v29 = v14;
  long long v15 = v2[14];
  long long v30 = v2[13];
  long long v31 = v15;
  sub_10017DCC8((uint64_t)&v28);
  uint64_t v24 = AssociatedTypeWitness;
  uint64_t v25 = v5;
  uint64_t v26 = AssociatedConformanceWitness;
  uint64_t v27 = v7;
  uint64_t v16 = type metadata accessor for ReconciliationID();
  (*(void (**)(char *, uint64_t))(*(void *)(v16 - 8) + 8))(v10, v16);
  long long v17 = v33;
  a2[4] = v32;
  a2[5] = v17;
  long long v18 = v35;
  a2[6] = v34;
  a2[7] = v18;
  long long v19 = v29;
  *a2 = v28;
  a2[1] = v19;
  double result = *(double *)&v30;
  long long v21 = v31;
  a2[2] = v30;
  a2[3] = v21;
  return result;
}

uint64_t sub_1001778FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v45 = a2;
  uint64_t v46 = a3;
  uint64_t v40 = a1;
  uint64_t v4 = *v3;
  uint64_t v5 = *(void (***)(char *, void *, uint64_t))(*v3 + 96);
  uint64_t v6 = *(void (***)(char *, uint64_t))(*v3 + 80);
  uint64_t AssociatedTypeWitness = (uint64_t (**)(char *, char *, uint64_t))swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v4 + 104);
  uint64_t v9 = *(void *)(v4 + 88);
  Swift::String v41 = AssociatedTypeWitness;
  Swift::String v47 = (uint64_t (**)(void, void, void))AssociatedTypeWitness;
  uint64_t v48 = swift_getAssociatedTypeWitness();
  uint64_t v39 = v48;
  uint64_t v10 = v8;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v50 = swift_getAssociatedConformanceWitness();
  uint64_t v11 = v40;
  uint64_t v12 = type metadata accessor for ThrottlingKey();
  uint64_t v44 = *(void *)(v12 - 8);
  uint64_t v13 = __chkstk_darwin(v12);
  long long v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = v14;
  __chkstk_darwin(v13);
  long long v17 = (char *)&v35 - v16;
  Swift::String v42 = v6;
  uint64_t v18 = v46;
  uint64_t v38 = v9;
  Swift::String v43 = v5;
  uint64_t v19 = v45;
  uint64_t v37 = v10;
  uint64_t result = sub_10061515C(v11);
  if (__OFADD__(v18, v19))
  {
    __break(1u);
LABEL_17:
    __break(1u);
  }
  else
  {
    uint64_t v21 = result;
    sub_10017DB74();
    uint64_t v22 = swift_allocError();
    *(void *)uint64_t v23 = v19;
    *(void *)(v23 + 8) = 0;
    *(unsigned char *)(v23 + 16) = 0;
    sub_10070F878(1, v21, 0, v18 + v19, v18, v22, v18, 0, (uint64_t)v51, 0, 0, 1);
    uint64_t v24 = sub_10070CA1C(v11, (uint64_t)v41, v39);
    if (sub_10096C1A0())
    {
      uint64_t v25 = 0;
      Swift::String v41 = (uint64_t (**)(char *, char *, uint64_t))(v44 + 32);
      Swift::String v42 = (void (**)(char *, uint64_t))(v44 + 8);
      Swift::String v43 = (void (**)(char *, void *, uint64_t))(v44 + 16);
      while (1)
      {
        BOOL v26 = sub_10096C130();
        sub_10096C0E0();
        if (v26)
        {
          (*(void (**)(char *, unint64_t, uint64_t))(v44 + 16))(v17, v24+ ((*(unsigned __int8 *)(v44 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80))+ *(void *)(v44 + 72) * v25, v12);
          uint64_t v27 = v25 + 1;
          if (__OFADD__(v25, 1)) {
            goto LABEL_12;
          }
        }
        else
        {
          uint64_t result = sub_10096CC20();
          if (v36 != 8) {
            goto LABEL_17;
          }
          Swift::String v47 = (uint64_t (**)(void, void, void))result;
          (*v43)(v17, &v47, v12);
          swift_unknownObjectRelease();
          uint64_t v27 = v25 + 1;
          if (__OFADD__(v25, 1))
          {
LABEL_12:
            __break(1u);
            goto LABEL_13;
          }
        }
        uint64_t v28 = (*v41)(v15, v17, v12);
        __chkstk_darwin(v28);
        *(&v35 - 8) = (uint64_t)v15;
        *(&v35 - 7) = (uint64_t)v3;
        *(&v35 - 6) = (uint64_t)v51;
        uint64_t v29 = v46;
        *(&v35 - 5) = v45;
        uint64_t v31 = 0;
        LOBYTE(v32) = 0;
        uint64_t v33 = v11;
        uint64_t v34 = v29;
        uint64_t v30 = v52;
        sub_100176020((uint64_t)v15, v29, (void (*)(long long *__return_ptr, char *))sub_10017DD20, (void **)&v35 - 10);
        uint64_t v52 = v30;
        if (v30) {
          break;
        }
        (*v42)(v15, v12);
        ++v25;
        if (v27 == sub_10096C1A0()) {
          goto LABEL_13;
        }
      }
      swift_bridgeObjectRelease();
      sub_10017D3A0((uint64_t)v51);
      return ((uint64_t (*)(char *, uint64_t))*v42)(v15, v12);
    }
    else
    {
LABEL_13:
      swift_bridgeObjectRelease();
      sub_10016F470();
      return sub_10017D3A0((uint64_t)v51);
    }
  }
  return result;
}

uint64_t sub_100177DC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X7>, char *a9@<X8>, uint64_t a10)
{
  *(void *)&long long v62 = a8;
  int v59 = a7;
  uint64_t v57 = a5;
  uint64_t v58 = a6;
  uint64_t v63 = a4;
  unint64_t v64 = a9;
  *(void *)&long long v65 = a2;
  uint64_t v12 = *(void *)(*(void *)a3 + 96);
  uint64_t v13 = *(void *)(*(void *)a3 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v15 = swift_getAssociatedTypeWitness();
  uint64_t v60 = v13;
  *(void *)&long long v61 = v12;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v17 = swift_getAssociatedConformanceWitness();
  uint64_t v66 = AssociatedTypeWitness;
  *(void *)&long long v67 = v15;
  *((void *)&v67 + 1) = AssociatedConformanceWitness;
  *(void *)&long long v68 = v17;
  uint64_t v18 = type metadata accessor for ThrottlingKey();
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v57 - v19;
  (*(void (**)(char *, void))(v21 + 16))((char *)&v57 - v19, v65);
  uint64_t v66 = AssociatedTypeWitness;
  *(void *)&long long v67 = v15;
  *((void *)&v67 + 1) = AssociatedConformanceWitness;
  *(void *)&long long v68 = v17;
  uint64_t v22 = type metadata accessor for ReconciliationID();
  LODWORD(v13) = v20[*(int *)(swift_getTupleTypeMetadata2() + 48)];
  (*(void (**)(char *, uint64_t))(*(void *)(v22 - 8) + 8))(v20, v22);
  if (v13 == 2) {
    a3[168] = 1;
  }
  uint64_t v23 = a1;
  if (*(unsigned char *)a1 == 1)
  {
    uint64_t v25 = *(void *)(a1 + 40);
    if (v25)
    {
      sub_10017DB74();
      swift_allocError();
      uint64_t v33 = v57;
      uint64_t v32 = v58;
      *(void *)uint64_t v34 = v57;
      *(void *)(v34 + 8) = v32;
      char v35 = v59;
      *(unsigned char *)(v34 + 16) = v59;
      swift_errorRetain();
      sub_10017DD58(v33, v32, v35);
      uint64_t v36 = (void *)sub_10096ABE0();
      swift_errorRelease();
      uint64_t v37 = (void *)sub_10096ABE0();
      *(void *)&long long v65 = v36;
      id v38 = [v36 domain];
      uint64_t v39 = _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
      uint64_t v41 = v40;

      id v42 = [v37 domain];
      uint64_t v43 = _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
      uint64_t v45 = v44;

      if (v39 == v43 && v41 == v45)
      {
        swift_bridgeObjectRelease_n();
        uint64_t v46 = (void *)v65;
      }
      else
      {
        char v47 = sub_10096D2D0();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v46 = (void *)v65;
        if ((v47 & 1) == 0)
        {
          swift_errorRelease();

          goto LABEL_14;
        }
      }
      id v48 = objc_msgSend(v46, "code", v57, v58);
      id v49 = [v37 code];
      swift_errorRelease();

      if (v48 == v49)
      {
        long long v65 = *(_OWORD *)(v23 + 56);
        char v24 = *(unsigned char *)(v23 + 48);
        long long v50 = *(_OWORD *)(v23 + 24);
        long long v61 = *(_OWORD *)(v23 + 8);
        long long v62 = v50;
        uint64_t result = sub_10017D368(v23);
        long long v30 = v61;
        long long v29 = v62;
        long long v31 = v65;
        char v27 = 1;
        goto LABEL_15;
      }
    }
LABEL_14:
    uint64_t v51 = sub_10061515C(v62);
    uint64_t v52 = *(void *)(v23 + 16);
    uint64_t v53 = *(void *)(v63 + 24);
    uint64_t v54 = *(void *)(v63 + 32);
    uint64_t v55 = *(void *)(v63 + 40);
    swift_errorRetain();
    uint64_t result = sub_10070F878(1, v51, v52, v53, v54, v55, a10, 0, (uint64_t)&v66, 0, 0, 1);
    long long v31 = v71;
    char v24 = v70;
    uint64_t v25 = v69;
    long long v29 = v68;
    long long v30 = v67;
    char v27 = v66;
    goto LABEL_15;
  }
  if (*(unsigned char *)a1) {
    goto LABEL_14;
  }
  long long v65 = *(_OWORD *)(v63 + 56);
  char v24 = *(unsigned char *)(v63 + 48);
  uint64_t v25 = *(void *)(v63 + 40);
  long long v26 = *(_OWORD *)(v63 + 24);
  long long v61 = *(_OWORD *)(v63 + 8);
  long long v62 = v26;
  char v27 = *(unsigned char *)v63;
  uint64_t result = sub_10017D368(v63);
  long long v30 = v61;
  long long v29 = v62;
  long long v31 = v65;
LABEL_15:
  uint64_t v56 = v64;
  *unint64_t v64 = v27;
  *(_OWORD *)(v56 + 8) = v30;
  *(_OWORD *)(v56 + 24) = v29;
  *((void *)v56 + 5) = v25;
  v56[48] = v24;
  *(_OWORD *)(v56 + 56) = v31;
  return result;
}

uint64_t sub_100178298(uint64_t a1, void (**a2)(char *, uint64_t))
{
  uint64_t v119 = a2;
  uint64_t v130 = a1;
  uint64_t v3 = *(void *)v2;
  uint64_t v4 = *(void *)(*(void *)v2 + 88);
  uint64_t v5 = *(void *)(*(void *)v2 + 104);
  uint64_t v117 = type metadata accessor for FileTreeError();
  uint64_t v104 = *(void *)(v117 - 8);
  uint64_t v6 = __chkstk_darwin(v117);
  uint64_t v106 = (char *)&v97 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v115 = (uint64_t)&v97 - v8;
  uint64_t v9 = *(void *)(v3 + 80);
  __int16 v123 = v2;
  uint64_t v10 = *(void *)(v3 + 96);
  uint64_t v116 = (void (**)(void, void, void))type metadata accessor for FileTreeError();
  uint64_t v105 = (uint64_t)*(v116 - 1);
  uint64_t v11 = __chkstk_darwin(v116);
  uint64_t v107 = (char *)&v97 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v110 = (char *)&v97 - v13;
  uint64_t v125 = v9;
  uint64_t v126 = v4;
  uint64_t v127 = v10;
  uint64_t v128 = v5;
  uint64_t v103 = type metadata accessor for PersistenceTrigger();
  uint64_t v102 = *(void *)(v103 - 8);
  __chkstk_darwin(v103);
  long long v101 = (char *)&v97 - v14;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v16 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v18 = swift_getAssociatedConformanceWitness();
  uint64_t v109 = AssociatedTypeWitness;
  uint64_t v125 = AssociatedTypeWitness;
  uint64_t v126 = v16;
  uint64_t v108 = v16;
  uint64_t v100 = AssociatedConformanceWitness;
  uint64_t v127 = AssociatedConformanceWitness;
  uint64_t v128 = v18;
  uint64_t v99 = v18;
  uint64_t v19 = type metadata accessor for ThrottlingKey();
  uint64_t v122 = *(void *)(v19 - 8);
  uint64_t v20 = __chkstk_darwin(v19);
  long long v118 = (void (**)(char *, char *, uint64_t))((char *)&v97 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v22 = __chkstk_darwin(v20);
  long long v121 = (void (**)(char *, uint64_t *, uint64_t))((char *)&v97 - v23);
  uint64_t v24 = __chkstk_darwin(v22);
  long long v26 = (char *)&v97 - v25;
  uint64_t v98 = v27;
  __chkstk_darwin(v24);
  long long v29 = (char *)&v97 - v28;
  uint64_t v111 = v9;
  uint64_t v113 = v4;
  uint64_t v112 = v10;
  uint64_t v114 = v5;
  uint64_t result = sub_100615748(v130);
  uint64_t v33 = result;
  uint64_t v34 = v31;
  char v35 = v32;
  uint64_t v36 = v120;
  switch(v32)
  {
    case 0:
      uint64_t v37 = v31;
      if (!v31) {
        return result;
      }
      goto LABEL_5;
    case 1:
      uint64_t v37 = result;
      if (result)
      {
LABEL_5:
        uint64_t v38 = v31;
        uint64_t v39 = *(uint64_t (**)(uint64_t))(*(void *)v37 + 88);
        uint64_t v40 = sub_10009C5FC(result, v31, v32);
        uint64_t v41 = (uint64_t (*)(_OWORD *))v39(v40);
        uint64_t v43 = v42;
        uint64_t result = sub_1000D31F8(v33, v38, v35);
        switch(v44)
        {
          case 1:
          case 3:
            return result;
          case 2:
            long long v59 = v123[16];
            v129[4] = v123[15];
            v129[5] = v59;
            long long v60 = v123[18];
            v129[6] = v123[17];
            v129[7] = v60;
            long long v61 = v123[12];
            v129[0] = v123[11];
            v129[1] = v61;
            long long v62 = v123[14];
            v129[2] = v123[13];
            v129[3] = v62;
            sub_10017DCC8((uint64_t)v129);
            uint64_t v63 = v41(v129);
            sub_10017DCF4((uint64_t)v129);
            sub_1001778FC(v130, v63, (uint64_t)v119);
            uint64_t result = sub_10017DCB0((uint64_t)v41, v43, 2);
            break;
          default:
            uint64_t result = sub_1001778FC(v130, (uint64_t)v41, (uint64_t)v119);
            break;
        }
      }
      return result;
    case 3:
      uint64_t v124 = result;
      sub_10009C5FC(result, v31, 3);
      swift_errorRetain();
      sub_10002B7CC((uint64_t *)&unk_100ACB6B0);
      if (swift_dynamicCast())
      {
        uint64_t v45 = v117;
        uint64_t v46 = v116;
        uint64_t v47 = v115;
        if (!(_BYTE)v127)
        {
          sub_1001778FC(v130, v125, (uint64_t)v119);
          sub_1000D31F8(v33, v34, 3);
          return swift_errorRelease();
        }
        sub_10017DC9C(v125, v126, v127);
      }
      else
      {
        uint64_t v45 = v117;
        uint64_t v46 = v116;
        uint64_t v47 = v115;
      }
      swift_errorRelease();
      uint64_t v125 = v33;
      swift_errorRetain();
      uint64_t v58 = v110;
      if (swift_dynamicCast())
      {
        if (swift_getEnumCaseMultiPayload() == 8) {
          goto LABEL_31;
        }
        (*(void (**)(char *, void (**)(void, void, void)))(v105 + 8))(v58, v46);
      }
      swift_errorRelease();
      uint64_t v125 = v33;
      swift_errorRetain();
      if (swift_dynamicCast())
      {
        if (swift_getEnumCaseMultiPayload() == 8)
        {
LABEL_31:
          sub_1000D31F8(v33, v34, 3);
          swift_errorRelease();
          return swift_errorRelease();
        }
        (*(void (**)(uint64_t, uint64_t))(v104 + 8))(v47, v45);
      }
      swift_errorRelease();
      uint64_t v125 = v33;
      swift_errorRetain();
      unint64_t v64 = v107;
      if (swift_dynamicCast())
      {
        if (swift_getEnumCaseMultiPayload() == 17)
        {
LABEL_39:
          sub_1000D31F8(v33, v34, 3);
          return swift_errorRelease();
        }
        (*(void (**)(char *, void (**)(void, void, void)))(v105 + 8))(v64, v46);
      }
      swift_errorRelease();
      uint64_t v125 = v33;
      swift_errorRetain();
      long long v65 = v106;
      int v66 = swift_dynamicCast();
      uint64_t v67 = v130;
      if (v66)
      {
        if (swift_getEnumCaseMultiPayload() == 17) {
          goto LABEL_39;
        }
        (*(void (**)(char *, uint64_t))(v104 + 8))(v65, v45);
      }
      uint64_t v115 = v34;
      swift_errorRelease();
      uint64_t v117 = v33;
      swift_errorRetain();
      uint64_t v69 = sub_10070CA1C(v67, v109, v108);
      if (sub_10096C1A0())
      {
        uint64_t v70 = 0;
        uint64_t v116 = (void (**)(void, void, void))(v122 + 16);
        long long v71 = (uint64_t (**)(uint64_t, char *, uint64_t))(v122 + 32);
        uint64_t v72 = (void (**)(uint64_t, uint64_t))(v122 + 8);
        uint64_t v73 = (uint64_t)v118;
        while (1)
        {
          BOOL v74 = sub_10096C130();
          sub_10096C0E0();
          if (v74)
          {
            (*(void (**)(char *, unint64_t, uint64_t))(v122 + 16))((char *)v121, v69+ ((*(unsigned __int8 *)(v122 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v122 + 80))+ *(void *)(v122 + 72) * v70, v19);
            uint64_t v75 = v70 + 1;
            if (__OFADD__(v70, 1)) {
              goto LABEL_55;
            }
          }
          else
          {
            uint64_t v80 = sub_10096CC20();
            if (v98 != 8) {
              goto LABEL_72;
            }
            uint64_t v125 = v80;
            (*v116)(v121, &v125, v19);
            swift_unknownObjectRelease();
            uint64_t v75 = v70 + 1;
            if (__OFADD__(v70, 1))
            {
LABEL_55:
              __break(1u);
              goto LABEL_56;
            }
          }
          uint64_t v76 = (*v71)(v73, (char *)v121, v19);
          __chkstk_darwin(v76);
          uint64_t v77 = v130;
          *(&v97 - 6) = v117;
          *(&v97 - 5) = v77;
          int v78 = v119;
          char v79 = v123;
          *(&v97 - 4) = (uint64_t)v119;
          *(&v97 - 3) = (uint64_t)v79;
          *(&v97 - 2) = v73;
          sub_100176020(v73, (uint64_t)v78, (void (*)(long long *__return_ptr, char *))sub_10017DC8C, (void **)&v97 - 8);
          if (v36) {
            break;
          }
          (*v72)(v73, v19);
          ++v70;
          uint64_t v36 = 0;
          if (v75 == sub_10096C1A0()) {
            goto LABEL_56;
          }
        }
        uint64_t v86 = v117;
        uint64_t v87 = v115;
        sub_1000D31F8(v117, v115, 3);
        swift_bridgeObjectRelease();
        sub_1000D31F8(v86, v87, 3);
        return ((uint64_t (*)(uint64_t, uint64_t))*v72)(v73, v19);
      }
      else
      {
LABEL_56:
        swift_bridgeObjectRelease();
        sub_10016F470();
        uint64_t v81 = v117;
        uint64_t v82 = v115;
        sub_1000D31F8(v117, v115, 3);
        uint64_t v83 = v81;
        uint64_t v84 = v82;
        char v85 = 3;
        return sub_1000D31F8(v83, v84, v85);
      }
    case 4:
      if (result != 1 || v31) {
        return result;
      }
      sub_10009C5FC(1, 0, 4);
      uint64_t v48 = v130;
      uint64_t v49 = sub_10070CDE0(v130, v109, v108, v111, v113, v112, v114);
      if (sub_10096C1A0())
      {
        uint64_t v50 = v36;
        uint64_t v51 = 0;
        char v52 = 0;
        long long v121 = (void (**)(char *, uint64_t *, uint64_t))(v122 + 16);
        long long v118 = (void (**)(char *, char *, uint64_t))(v122 + 32);
        uint64_t v119 = (void (**)(char *, uint64_t))(v122 + 8);
        do
        {
          BOOL v53 = sub_10096C130();
          sub_10096C0E0();
          if (v53)
          {
            uint64_t result = (*(uint64_t (**)(char *, unint64_t, uint64_t))(v122 + 16))(v29, v49+ ((*(unsigned __int8 *)(v122 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v122 + 80))+ *(void *)(v122 + 72) * v51, v19);
            uint64_t v54 = v51 + 1;
            if (__OFADD__(v51, 1)) {
              goto LABEL_22;
            }
          }
          else
          {
            uint64_t v57 = sub_10096CC20();
            if (v98 != 8)
            {
              __break(1u);
LABEL_72:
              __break(1u);
              JUMPOUT(0x10017930CLL);
            }
            uint64_t v125 = v57;
            (*v121)(v29, &v125, v19);
            uint64_t result = swift_unknownObjectRelease();
            uint64_t v54 = v51 + 1;
            if (__OFADD__(v51, 1))
            {
LABEL_22:
              __break(1u);
              return result;
            }
          }
          (*v118)(v26, v29, v19);
          BOOL v55 = sub_1001733DC((uint64_t)v26);
          if (v50)
          {
            sub_1000D31F8(1, 0, 4);
            (*v119)(v26, v19);
            return swift_bridgeObjectRelease();
          }
          BOOL v56 = v55;
          (*v119)(v26, v19);
          v52 |= v56;
          ++v51;
        }
        while (v54 != sub_10096C1A0());
        swift_bridgeObjectRelease();
        if (v52)
        {
          long long v68 = v123;
          sub_10016F470();
          uint64_t v48 = v130;
          goto LABEL_61;
        }
        uint64_t v48 = v130;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      long long v68 = v123;
LABEL_61:
      if (v48 < 0) {
        goto LABEL_68;
      }
      uint64_t v125 = v111;
      uint64_t v126 = v113;
      uint64_t v127 = v112;
      uint64_t v128 = v114;
      type metadata accessor for Ingestion.FetchItemMetadata();
      uint64_t v88 = swift_dynamicCastClass();
      if (!v88) {
        goto LABEL_68;
      }
      uint64_t v89 = v88;
      if ((*(_WORD *)(v88 + 136) & 0x2140) == 0) {
        goto LABEL_68;
      }
      id v90 = (uint64_t (*)(uint64_t))*((void *)v68 + 18);
      if (!v90) {
        goto LABEL_68;
      }
      sub_100031400(*((void *)v68 + 18));
      uint64_t v91 = swift_retain();
      uint64_t v92 = v90(v91);
      sub_1000705CC((uint64_t)v90);
      if (v92)
      {
        uint64_t v93 = v109;
        uint64_t v125 = v109;
        uint64_t v126 = v108;
        uint64_t v127 = v100;
        uint64_t v128 = v99;
        type metadata accessor for ReconciliationID();
        uint64_t v94 = *(int *)(swift_getTupleTypeMetadata2() + 48);
        uint64_t v95 = v101;
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v93 - 8) + 16))(v101, v89 + *(void *)(*(void *)v89 + 576), v93);
        swift_storeEnumTagMultiPayload();
        v95[v94] = 3;
        uint64_t v96 = v103;
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *))(*(void *)v92 + 312))(v95);
        swift_release();
        sub_1000D31F8(1, 0, 4);
        swift_release();
        return (*(uint64_t (**)(char *, uint64_t))(v102 + 8))(v95, v96);
      }
      swift_release();
LABEL_68:
      uint64_t v83 = 1;
      uint64_t v84 = 0;
      char v85 = 4;
      return sub_1000D31F8(v83, v84, v85);
    default:
      return result;
  }
}

__n128 sub_100179330@<Q0>(unint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v9 = sub_10061515C(a2);
  sub_1001776A8(a4, v12);
  sub_10070CDE4(a1, v9, a3, (uint64_t)v12, (uint64_t)v13);
  sub_10017DCF4((uint64_t)v12);
  long long v10 = v13[3];
  *(_OWORD *)(a5 + 32) = v13[2];
  *(_OWORD *)(a5 + 48) = v10;
  *(void *)(a5 + 64) = v14;
  __n128 result = (__n128)v13[1];
  *(_OWORD *)a5 = v13[0];
  *(__n128 *)(a5 + 16) = result;
  return result;
}

uint64_t sub_100179438(uint64_t a1, void *a2, uint64_t (*a3)(uint64_t))
{
  sub_10096CBD0(33);
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[9];
  uint64_t v7 = (void *)a2[10];
  swift_bridgeObjectRetain();
  v13._uint64_t countAndFlagsBits = v6;
  v13._object = v7;
  sub_10096BDC0(v13);
  swift_bridgeObjectRelease();
  v14._uint64_t countAndFlagsBits = 8236;
  v14._object = (void *)0xE200000000000000;
  sub_10096BDC0(v14);
  uint64_t v8 = a2[7];
  uint64_t v9 = (void *)a2[8];
  swift_bridgeObjectRetain();
  v15._uint64_t countAndFlagsBits = v8;
  v15._object = v9;
  sub_10096BDC0(v15);
  swift_bridgeObjectRelease();
  v16._uint64_t countAndFlagsBits = 0x204D4F524620200ALL;
  v16._object = (void *)0xE800000000000000;
  sub_10096BDC0(v16);
  uint64_t v11 = a2[5];
  long long v10 = (void *)a2[6];
  swift_bridgeObjectRetain();
  v17._uint64_t countAndFlagsBits = v11;
  v17._object = v10;
  sub_10096BDC0(v17);
  swift_bridgeObjectRelease();
  v18._uint64_t countAndFlagsBits = 0x204552454857200ALL;
  v18._object = (void *)0xE800000000000000;
  sub_10096BDC0(v18);
  v19._uint64_t countAndFlagsBits = a3(a1);
  sub_10096BDC0(v19);
  swift_bridgeObjectRelease();
  return 0x205443454C4553;
}

uint64_t sub_100179594(void *a1, void (*a2)(void, _OWORD *), uint64_t a3)
{
  v19[1] = a3;
  uint64_t v20 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v7 = swift_getAssociatedConformanceWitness();
  uint64_t v22 = AssociatedTypeWitness;
  *(void *)&long long v27 = AssociatedTypeWitness;
  *((void *)&v27 + 1) = v5;
  uint64_t v21 = AssociatedConformanceWitness;
  *(void *)&long long v28 = AssociatedConformanceWitness;
  *((void *)&v28 + 1) = v7;
  uint64_t v8 = type metadata accessor for ThrottlingKey();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v19 - v10;
  uint64_t WitnessTable = swift_getWitnessTable();
  id v13 = v34;
  uint64_t result = sub_1006FCC9C(a1, 0, v8, WitnessTable, (uint64_t)v11);
  if (!v13)
  {
    v19[0] = v11;
    id v34 = a1;
    uint64_t v15 = swift_getWitnessTable();
    sub_1006FCD24(v8, v15);
    uint64_t v23 = v22;
    uint64_t v24 = v5;
    uint64_t v25 = v21;
    uint64_t v26 = v7;
    _s9SQLFieldsOMa();
    uint64_t v16 = sub_10096C160();
    uint64_t result = swift_bridgeObjectRelease();
    if (v16 < (uint64_t)0xFFFFFFFF80000000)
    {
      __break(1u);
    }
    else if (v16 <= 0x7FFFFFFF)
    {
      Swift::String v17 = sub_1003FDC1C();
      sub_10054A0D4(v34, (uint64_t)v17, v16, (uint64_t)&v27);
      swift_bridgeObjectRelease();
      v32[2] = v29;
      v32[3] = v30;
      uint64_t v33 = v31;
      v32[0] = v27;
      v32[1] = v28;
      uint64_t v18 = v19[0];
      v20(v19[0], v32);
      sub_10017D3A0((uint64_t)v32);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v18, v8);
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1001798C0(uint64_t a1, char a2)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 96);
  uint64_t v5 = *(void *)(*v2 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(v3 + 104);
  uint64_t v8 = *(void *)(v3 + 88);
  uint64_t v27 = AssociatedTypeWitness;
  uint64_t v28 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v30 = swift_getAssociatedConformanceWitness();
  type metadata accessor for ThrottlingKey();
  swift_getTupleTypeMetadata2();
  uint64_t v31 = sub_10096C110();
  uint64_t v21 = v5;
  uint64_t v22 = v8;
  uint64_t v23 = v4;
  uint64_t v24 = v7;
  char v25 = a2;
  uint64_t v26 = a1;
  uint64_t v15 = v5;
  uint64_t v16 = v8;
  uint64_t v17 = v4;
  uint64_t v18 = v7;
  Swift::String v19 = &v31;
  sub_100172FC0((uint64_t)sub_10017E558, (uint64_t)v20, (void (*)(void, _OWORD *))sub_10017DB18, (uint64_t)v14);
  uint64_t v9 = v31;
  if (v13) {
    swift_bridgeObjectRelease();
  }
  return v9;
}

uint64_t sub_100179A9C(uint64_t a1, char a2)
{
  if (a2 == 70)
  {
    sub_10096CBD0(26);
    swift_bridgeObjectRelease();
    uint64_t v15 = 0x203D20646E696BLL;
    unint64_t v16 = 0xE700000000000000;
    uint64_t v18 = 0;
    v20._uint64_t countAndFlagsBits = sub_10096D220();
    sub_10096BDC0(v20);
    swift_bridgeObjectRelease();
    v21._uint64_t countAndFlagsBits = 0x65746920444E4120;
    v21._object = (void *)0xEF203D2064695F6DLL;
    sub_10096BDC0(v21);
    swift_getAssociatedTypeWitness();
    uint64_t v3 = *(void *)(swift_getAssociatedConformanceWitness() + 40);
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32);
    uint64_t v5 = swift_checkMetadataState();
    v22._uint64_t countAndFlagsBits = v4(a1, v5, v3);
    sub_10096BDC0(v22);
    swift_bridgeObjectRelease();
    return 0x203D20646E696BLL;
  }
  else
  {
    unint64_t v16 = 0xE000000000000000;
    sub_10096CBD0(44);
    swift_bridgeObjectRelease();
    uint64_t v18 = 0x203D20646E696BLL;
    unint64_t v19 = 0xE700000000000000;
    uint64_t v15 = 0;
    v23._uint64_t countAndFlagsBits = sub_10096D220();
    sub_10096BDC0(v23);
    swift_bridgeObjectRelease();
    v24._uint64_t countAndFlagsBits = 0x65746920444E4120;
    v24._object = (void *)0xEF203D2064695F6DLL;
    sub_10096BDC0(v24);
    swift_getAssociatedTypeWitness();
    uint64_t v8 = *(void *)(swift_getAssociatedConformanceWitness() + 40);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 32);
    uint64_t v10 = swift_checkMetadataState();
    v25._uint64_t countAndFlagsBits = v9(a1, v10, v8);
    sub_10096BDC0(v25);
    swift_bridgeObjectRelease();
    v26._object = (void *)0x8000000100997970;
    v26._uint64_t countAndFlagsBits = 0xD000000000000010;
    sub_10096BDC0(v26);
    uint64_t v11 = qword_10097B590[a2];
    uint64_t v17 = &type metadata for Int;
    uint64_t v15 = v11;
    uint64_t v12 = sub_1003AC444((uint64_t)&v15);
    Swift::String v14 = v13;
    sub_10017D1A4((uint64_t)&v15);
    if (v14)
    {
      v27._uint64_t countAndFlagsBits = v12;
      v27._object = v14;
      sub_10096BDC0(v27);
      swift_bridgeObjectRelease();
      return v18;
    }
    else
    {
      uint64_t result = sub_10096CE20();
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_100179DF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v13[1] = a3;
  void v13[2] = swift_getAssociatedTypeWitness();
  v13[3] = swift_getAssociatedTypeWitness();
  _OWORD v13[4] = swift_getAssociatedConformanceWitness();
  v13[5] = swift_getAssociatedConformanceWitness();
  uint64_t v5 = type metadata accessor for ThrottlingKey();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v7 = __chkstk_darwin(TupleTypeMetadata2);
  uint64_t v9 = (char *)v13 + *(int *)(v7 + 48) - v8;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))((char *)v13 - v8, a1, v5);
  long long v10 = *(_OWORD *)(a2 + 48);
  *((_OWORD *)v9 + 2) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v9 + 3) = v10;
  *((void *)v9 + 8) = *(void *)(a2 + 64);
  long long v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v11;
  sub_10017D368(a2);
  sub_10096C1C0();
  return sub_10096C180();
}

uint64_t sub_100179FC0(int a1, uint64_t a2, unint64_t a3, int a4)
{
  unint64_t v27 = a3;
  uint64_t v5 = v4;
  int v29 = a1;
  int v30 = a4;
  uint64_t v7 = *(void **)v4;
  uint64_t v28 = *(void *)(*(void *)v4 + 96);
  uint64_t v8 = v7[10];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v13 = (char *)&v27 - v12;
  id v31 = *(id *)(v5 + 24);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v27 - v12, a2, AssociatedTypeWitness);
  unint64_t v14 = (*(unsigned __int8 *)(v10 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v15 = (char *)swift_allocObject();
  *((void *)v15 + 2) = v8;
  *((void *)v15 + 3) = v7[11];
  *((void *)v15 + 4) = v28;
  *((void *)v15 + 5) = v7[13];
  *((void *)v15 + 6) = v5;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v15[v14], v13, AssociatedTypeWitness);
  unint64_t v16 = &v15[v14 + v11];
  char *v16 = v29;
  v16[1] = v30;
  uint64_t v17 = (void *)swift_allocObject();
  void v17[2] = sub_10017E678;
  v17[3] = v15;
  aBlock[4] = sub_10017EC40;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_10017090C;
  aBlock[3] = &unk_100A730E8;
  uint64_t v18 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  id v19 = [v31 fetchSwift:v18 error:aBlock];
  _Block_release(v18);
  id v20 = aBlock[0];
  LOBYTE(v18) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v18) {
    __break(1u);
  }
  if (v19)
  {
    if ([v19 next])
    {
      unint64_t v21 = (unint64_t)[v19 unsignedLongAtIndex:0];

      unint64_t v22 = v27;
      unsigned int v23 = sub_100437904(v27);
      swift_release();
      if (v23 <= 1) {
        BOOL v24 = v21 >= v22;
      }
      else {
        BOOL v24 = (v21 & 0x1FFFFFFFFFFFFFFFLL) >= (v22 & 0x1FFFFFFFFFFFFFFFLL);
      }
      char v25 = v24;
    }
    else
    {
      swift_release();

      char v25 = 0;
    }
  }
  else
  {
    sub_10096ABF0();

    swift_willThrow();
    swift_release();
  }
  return v25 & 1;
}

uint64_t sub_10017A37C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5)
{
  uint64_t v21 = 0;
  unint64_t v22 = 0xE000000000000000;
  sub_10096CBD0(107);
  uint64_t v24 = 0;
  unint64_t v25 = 0xE000000000000000;
  v26._uint64_t countAndFlagsBits = 0xD000000000000017;
  v26._object = (void *)0x8000000100997D10;
  sub_10096BDC0(v26);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void **)(a2 + 48);
  swift_bridgeObjectRetain();
  v27._uint64_t countAndFlagsBits = v8;
  v27._object = v9;
  sub_10096BDC0(v27);
  swift_bridgeObjectRelease();
  v28._uint64_t countAndFlagsBits = 0x204552454857200ALL;
  v28._object = (void *)0xEF203D20646E696BLL;
  sub_10096BDC0(v28);
  uint64_t v21 = 0;
  v29._uint64_t countAndFlagsBits = sub_10096D220();
  sub_10096BDC0(v29);
  swift_bridgeObjectRelease();
  v30._object = (void *)0x8000000100997D30;
  v30._uint64_t countAndFlagsBits = 0xD000000000000012;
  sub_10096BDC0(v30);
  swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(swift_getAssociatedConformanceWitness() + 40);
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 32);
  uint64_t v12 = swift_checkMetadataState();
  v31._uint64_t countAndFlagsBits = v11(a1, v12, v10);
  sub_10096BDC0(v31);
  swift_bridgeObjectRelease();
  v32._uint64_t countAndFlagsBits = 0xD000000000000013;
  v32._object = (void *)0x8000000100997D50;
  sub_10096BDC0(v32);
  uint64_t v13 = qword_10097B590[a4];
  unsigned int v23 = &type metadata for Int;
  uint64_t v21 = v13;
  uint64_t v14 = sub_1003AC444((uint64_t)&v21);
  unint64_t v16 = v15;
  sub_10017D1A4((uint64_t)&v21);
  if (v16)
  {
    v33._uint64_t countAndFlagsBits = v14;
    v33._object = v16;
    sub_10096BDC0(v33);
    swift_bridgeObjectRelease();
    v34._uint64_t countAndFlagsBits = 0xD000000000000010;
    v34._object = (void *)0x8000000100997C20;
    sub_10096BDC0(v34);
    uint64_t v21 = 1;
    v35._uint64_t countAndFlagsBits = sub_10096D220();
    sub_10096BDC0(v35);
    swift_bridgeObjectRelease();
    v36._uint64_t countAndFlagsBits = 538976266;
    v36._object = (void *)0xE400000000000000;
    sub_10096BDC0(v36);
    uint64_t v17 = (void *)0xE000000000000000;
    if (a5)
    {
      uint64_t v21 = 0;
      unint64_t v22 = 0xE000000000000000;
      sub_10096CBD0(25);
      swift_bridgeObjectRelease();
      uint64_t v21 = 0xD000000000000017;
      unint64_t v22 = 0x8000000100997D70;
      v37._uint64_t countAndFlagsBits = sub_10096D220();
      sub_10096BDC0(v37);
      swift_bridgeObjectRelease();
      v18._uint64_t countAndFlagsBits = v21;
      uint64_t v17 = (void *)v22;
    }
    else
    {
      v18._uint64_t countAndFlagsBits = 0;
    }
    v18._object = v17;
    sub_10096BDC0(v18);
    swift_bridgeObjectRelease();
    return v24;
  }
  else
  {
    uint64_t result = sub_10096CE20();
    __break(1u);
  }
  return result;
}

uint64_t sub_10017A720(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_10096B0E0();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = 0;
  unint64_t v17 = 0xE000000000000000;
  sub_10096CBD0(104);
  uint64_t v19 = v16;
  unint64_t v20 = v17;
  v21._object = (void *)0x8000000100997B10;
  v21._uint64_t countAndFlagsBits = 0xD000000000000010;
  sub_10096BDC0(v21);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v7 = *(void **)(a2 + 48);
  swift_bridgeObjectRetain();
  v22._uint64_t countAndFlagsBits = v8;
  v22._object = v7;
  sub_10096BDC0(v22);
  swift_bridgeObjectRelease();
  v23._object = (void *)0x8000000100997A50;
  v23._uint64_t countAndFlagsBits = 0xD000000000000010;
  sub_10096BDC0(v23);
  uint64_t v16 = 1;
  v24._uint64_t countAndFlagsBits = sub_10096D220();
  sub_10096BDC0(v24);
  swift_bridgeObjectRelease();
  v25._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
  v25._object = (void *)0x8000000100997B30;
  sub_10096BDC0(v25);
  uint64_t v16 = 7;
  v26._uint64_t countAndFlagsBits = sub_10096D220();
  sub_10096BDC0(v26);
  swift_bridgeObjectRelease();
  v27._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  v27._object = (void *)0x8000000100997B50;
  sub_10096BDC0(v27);
  sub_10096B0D0();
  sub_10096B080();
  double v10 = v9;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  double v11 = v10 * 1000000000.0;
  if ((~COERCE__INT64(v10 * 1000000000.0) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (v11 <= -9.22337204e18)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (v11 >= 9.22337204e18)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  Swift::String v18 = &type metadata for Int;
  uint64_t v16 = (uint64_t)v11;
  uint64_t v12 = sub_1003AC444((uint64_t)&v16);
  uint64_t v14 = v13;
  sub_10017D1A4((uint64_t)&v16);
  if (v14)
  {
    v28._uint64_t countAndFlagsBits = v12;
    v28._object = v14;
    sub_10096BDC0(v28);
    swift_bridgeObjectRelease();
    v29._uint64_t countAndFlagsBits = 0x2054494D494C200ALL;
    v29._object = (void *)0xE900000000000031;
    sub_10096BDC0(v29);
    return v19;
  }
LABEL_9:
  uint64_t result = sub_10096CE20();
  __break(1u);
  return result;
}

uint64_t sub_10017AA38(uint64_t a1)
{
  v2[3] = a1;
  return sub_100171288((uint64_t)sub_10017E548, (unint64_t)v2);
}

unint64_t sub_10017AA74(uint64_t a1, char a2)
{
  sub_10096CBD0(43);
  swift_bridgeObjectRelease();
  v8._uint64_t countAndFlagsBits = sub_10096D220();
  sub_10096BDC0(v8);
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = 10;
  v9._object = (void *)0xE100000000000000;
  sub_10096BDC0(v9);
  v10._uint64_t countAndFlagsBits = sub_10017D404(a2);
  sub_10096BDC0(v10);
  swift_bridgeObjectRelease();
  v11._uint64_t countAndFlagsBits = 0x65746920444E410ALL;
  v11._object = (void *)0xEF203D2064695F6DLL;
  sub_10096BDC0(v11);
  swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(swift_getAssociatedConformanceWitness() + 40);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
  uint64_t v6 = swift_checkMetadataState();
  v12._uint64_t countAndFlagsBits = v5(a1, v6, v4);
  sub_10096BDC0(v12);
  swift_bridgeObjectRelease();
  return 0xD000000000000015;
}

uint64_t sub_10017AC6C(uint64_t a1)
{
  v2[3] = a1;
  return sub_100171288((uint64_t)sub_10017E550, (unint64_t)v2);
}

unint64_t sub_10017ACA8(uint64_t a1, char a2)
{
  sub_10096CBD0(43);
  swift_bridgeObjectRelease();
  v8._uint64_t countAndFlagsBits = sub_10096D220();
  sub_10096BDC0(v8);
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = 10;
  v9._object = (void *)0xE100000000000000;
  sub_10096BDC0(v9);
  v10._uint64_t countAndFlagsBits = sub_10017D404(a2);
  sub_10096BDC0(v10);
  swift_bridgeObjectRelease();
  v11._uint64_t countAndFlagsBits = 0x65746920444E410ALL;
  v11._object = (void *)0xEF203D2064695F6DLL;
  sub_10096BDC0(v11);
  swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(swift_getAssociatedConformanceWitness() + 40);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
  uint64_t v6 = swift_checkMetadataState();
  v12._uint64_t countAndFlagsBits = v5(a1, v6, v4);
  sub_10096BDC0(v12);
  swift_bridgeObjectRelease();
  return 0xD000000000000015;
}

uint64_t sub_10017AEA0(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10096B0E0();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(v2 + 120))
  {
    uint64_t v8 = a1[3];
    uint64_t v9 = a1[4];
    sub_10002689C(a1, v8);
    sub_10059A0E8(0xD000000000000025, (void *)0x8000000100997C40, v8, v9);
LABEL_12:
    uint64_t v21 = a1[3];
    uint64_t v22 = a1[4];
    sub_10002689C(a1, v21);
    return sub_10059A1B8(8224, 0xE200000000000000, sub_10017E514, v2, v21, (uint64_t)&type metadata for () + 8, v22);
  }
  uint64_t v10 = *(void *)(v2 + 112);
  sub_10096B0D0();
  sub_10096B080();
  double v12 = v11;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  double v14 = v12 * 1000000000.0;
  if ((~COERCE__INT64(v12 * 1000000000.0) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  if (v14 <= -9.22337204e18)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v14 >= 9.22337204e18)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v15 = (uint64_t)v14;
  uint64_t v16 = a1[3];
  uint64_t v17 = a1[4];
  sub_10002689C(a1, v16);
  uint64_t v25 = 0;
  Swift::String v26 = (void *)0xE000000000000000;
  sub_10096CBD0(35);
  swift_bridgeObjectRelease();
  uint64_t v25 = 0xD000000000000021;
  Swift::String v26 = (void *)0x8000000100997C70;
  uint64_t result = v10 - v15;
  if (__OFSUB__(v10, v15))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if ((result & 0x8000000000000000) == 0)
  {
    uint64_t v18 = 0;
    uint64_t v19 = (void *)0xE000000000000000;
LABEL_11:
    v27._uint64_t countAndFlagsBits = sub_10063AA90(result);
    v24._uint64_t countAndFlagsBits = v18;
    v24._object = v19;
    sub_10096BDC0(v27);
    swift_bridgeObjectRelease();
    sub_10096BDC0(v24);
    swift_bridgeObjectRelease();
    sub_10059A0E8(v25, v26, v16, v17);
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  BOOL v20 = __OFSUB__(0, result);
  uint64_t result = v15 - v10;
  if (!v20)
  {
    uint64_t v19 = (void *)0xE100000000000000;
    uint64_t v18 = 45;
    goto LABEL_11;
  }
LABEL_17:
  __break(1u);
  return result;
}

void sub_10017B154(void *a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = a1;
  uint64_t v6 = *a2;
  if (*((unsigned char *)a2 + 170) == 1)
  {
    uint64_t v7 = a1[3];
    uint64_t v19 = a1[4];
    sub_10002689C(a1, v7);
    if (qword_100ACC010 != -1) {
      swift_once();
    }
    id v8 = [(id)qword_100B0B0D8 description];
    uint64_t v9 = _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
    double v11 = v10;

    sub_10059A0E8(v9, v11, v7, v19);
    a1 = (void *)swift_bridgeObjectRelease();
  }
  __chkstk_darwin(a1);
  long long v12 = *(_OWORD *)(v6 + 96);
  v17[1] = *(_OWORD *)(v6 + 80);
  void v17[2] = v12;
  uint64_t v18 = v5;
  sub_100172FC0((uint64_t)sub_10017B3BC, 0, (void (*)(void, _OWORD *))sub_10017E530, (uint64_t)v17);
  if (v2)
  {
    uint64_t v13 = v5[3];
    uint64_t v14 = v5[4];
    sub_10002689C(v5, v13);
    uint64_t v20 = 0;
    uint64_t v21 = (void *)0xE000000000000000;
    sub_10096CBD0(22);
    v23._object = (void *)0x8000000100997CA0;
    v23._uint64_t countAndFlagsBits = 0xD000000000000010;
    sub_10096BDC0(v23);
    uint64_t v16 = a2[5];
    uint64_t v15 = (void *)a2[6];
    swift_bridgeObjectRetain();
    v24._uint64_t countAndFlagsBits = v16;
    v24._object = v15;
    sub_10096BDC0(v24);
    swift_bridgeObjectRelease();
    v25._uint64_t countAndFlagsBits = 8250;
    v25._object = (void *)0xE200000000000000;
    sub_10096BDC0(v25);
    uint64_t v22 = v3;
    sub_10002B7CC((uint64_t *)&unk_100ACB6B0);
    sub_10096CDF0();
    sub_10059A0E8(v20, v21, v13, v14);
    swift_bridgeObjectRelease();
    swift_errorRelease();
  }
}

unint64_t sub_10017B3BC()
{
  return 0xD000000000000022;
}

uint64_t sub_10017B3D8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[3];
  uint64_t v5 = a3[4];
  sub_10002689C(a3, v3);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for ThrottlingKey();
  swift_getWitnessTable();
  sub_10096D270();
  v6._uint64_t countAndFlagsBits = 8250;
  v6._object = (void *)0xE200000000000000;
  sub_10096BDC0(v6);
  v7._uint64_t countAndFlagsBits = sub_10070DE54();
  sub_10096BDC0(v7);
  swift_bridgeObjectRelease();
  sub_10059A0E8(0, (void *)0xE000000000000000, v3, v5);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10017B568()
{
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000705CC(*(void *)(v0 + 144));

  long long v1 = *(_OWORD *)(v0 + 256);
  v6[4] = *(_OWORD *)(v0 + 240);
  v6[5] = v1;
  long long v2 = *(_OWORD *)(v0 + 288);
  v6[6] = *(_OWORD *)(v0 + 272);
  v6[7] = v2;
  long long v3 = *(_OWORD *)(v0 + 192);
  v6[0] = *(_OWORD *)(v0 + 176);
  v6[1] = v3;
  long long v4 = *(_OWORD *)(v0 + 224);
  v6[2] = *(_OWORD *)(v0 + 208);
  v6[3] = v4;
  sub_10017DCF4((uint64_t)v6);
  return v0;
}

uint64_t sub_10017B5F0()
{
  sub_10017B568();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SQLThrottler()
{
  return swift_getGenericMetadata();
}

uint64_t sub_10017B63C()
{
  long long v1 = *(void **)(v0 + 24);
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = sub_10017D274;
  *(void *)(v2 + 24) = v0;
  Swift::String v31 = sub_10017EC40;
  uint64_t v32 = v2;
  id aBlock = _NSConcreteStackBlock;
  uint64_t v28 = 1107296256;
  Swift::String v29 = sub_10017090C;
  Swift::String v30 = &unk_100A729E0;
  long long v3 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  id aBlock = 0;
  unsigned int v4 = [v1 executeSwift:v3 error:&aBlock];
  _Block_release(v3);
  uint64_t v5 = aBlock;
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
    goto LABEL_20;
  }
  if (!v4)
  {
    sub_10096ABF0();

    swift_willThrow();
    return swift_release();
  }
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = sub_10017D28C;
  *(void *)(v7 + 24) = v0;
  Swift::String v31 = sub_10017EC40;
  uint64_t v32 = v7;
  id aBlock = _NSConcreteStackBlock;
  uint64_t v28 = 1107296256;
  Swift::String v29 = sub_10017090C;
  Swift::String v30 = &unk_100A72A30;
  id v8 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  id aBlock = 0;
  unsigned int v9 = [v1 executeSwift:v8 error:&aBlock];
  _Block_release(v8);
  uint64_t v10 = aBlock;
  char v11 = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v11)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (v9)
  {
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16) = sub_10017D2A4;
    *(void *)(v12 + 24) = v0;
    Swift::String v31 = sub_10017EC40;
    uint64_t v32 = v12;
    id aBlock = _NSConcreteStackBlock;
    uint64_t v28 = 1107296256;
    Swift::String v29 = sub_10017090C;
    Swift::String v30 = &unk_100A72A80;
    uint64_t v13 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    id aBlock = 0;
    unsigned int v14 = [v1 executeSwift:v13 error:&aBlock];
    _Block_release(v13);
    uint64_t v15 = aBlock;
    char v16 = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v16 & 1) == 0)
    {
      if (!v14) {
        goto LABEL_14;
      }
      uint64_t v17 = swift_allocObject();
      *(void *)(v17 + 16) = sub_10017D2BC;
      *(void *)(v17 + 24) = v0;
      Swift::String v31 = sub_10017EC40;
      uint64_t v32 = v17;
      id aBlock = _NSConcreteStackBlock;
      uint64_t v28 = 1107296256;
      Swift::String v29 = sub_10017090C;
      Swift::String v30 = &unk_100A72AD0;
      uint64_t v18 = _Block_copy(&aBlock);
      swift_retain();
      swift_retain();
      swift_release();
      id aBlock = 0;
      unsigned int v19 = [v1 executeSwift:v18 error:&aBlock];
      _Block_release(v18);
      uint64_t v15 = aBlock;
      char v20 = swift_isEscapingClosureAtFileLocation();
      swift_release();
      if ((v20 & 1) == 0)
      {
        if (v19)
        {
          uint64_t v21 = swift_allocObject();
          *(void *)(v21 + 16) = sub_10017D2D4;
          *(void *)(v21 + 24) = v0;
          Swift::String v31 = sub_10017EC40;
          uint64_t v32 = v21;
          id aBlock = _NSConcreteStackBlock;
          uint64_t v28 = 1107296256;
          Swift::String v29 = sub_10017090C;
          Swift::String v30 = &unk_100A72B20;
          uint64_t v22 = _Block_copy(&aBlock);
          swift_retain();
          swift_retain();
          swift_release();
          id aBlock = 0;
          unsigned __int8 v23 = [v1 executeSwift:v22 error:&aBlock];
          _Block_release(v22);
          Swift::String v24 = aBlock;
          char v25 = swift_isEscapingClosureAtFileLocation();
          swift_release();
          if ((v25 & 1) == 0)
          {
            if (v23) {
              return swift_release_n();
            }
            sub_10096ABF0();

            swift_willThrow();
            goto LABEL_17;
          }
LABEL_23:
          __break(1u);
        }
LABEL_14:
        sub_10096ABF0();

        swift_willThrow();
LABEL_17:
        swift_release_n();
        return swift_release();
      }
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  sub_10096ABF0();

  swift_willThrow();
  swift_release();
  return swift_release();
}

uint64_t sub_10017BCC4(uint64_t a1, uint64_t a2)
{
  sub_10096CBD0(311);
  v8._uint64_t countAndFlagsBits = 0x5420455441455243;
  v8._object = (void *)0xED000020454C4241;
  sub_10096BDC0(v8);
  uint64_t v3 = *(void *)(a2 + 40);
  unsigned int v4 = *(void **)(a2 + 48);
  swift_bridgeObjectRetain();
  v9._uint64_t countAndFlagsBits = v3;
  v9._object = v4;
  sub_10096BDC0(v9);
  swift_bridgeObjectRelease();
  v10._object = (void *)0x80000001009977C0;
  v10._uint64_t countAndFlagsBits = 0xD000000000000026;
  sub_10096BDC0(v10);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v11._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t))(*(void *)(AssociatedConformanceWitness + 40) + 8))(AssociatedTypeWitness);
  sub_10096BDC0(v11);
  swift_bridgeObjectRelease();
  v12._uint64_t countAndFlagsBits = 0xD000000000000100;
  v12._object = (void *)0x80000001009977F0;
  sub_10096BDC0(v12);
  return 0;
}

uint64_t sub_10017BE50(uint64_t a1, uint64_t a2)
{
  sub_10096CBD0(65);
  v6._uint64_t countAndFlagsBits = 0xD000000000000014;
  v6._object = (void *)0x8000000100997760;
  sub_10096BDC0(v6);
  uint64_t v4 = *(void *)(a2 + 40);
  uint64_t v3 = *(void **)(a2 + 48);
  swift_bridgeObjectRetain();
  v7._uint64_t countAndFlagsBits = v4;
  v7._object = v3;
  sub_10096BDC0(v7);
  swift_bridgeObjectRelease();
  v8._object = (void *)0x8000000100997780;
  v8._uint64_t countAndFlagsBits = 0xD000000000000010;
  sub_10096BDC0(v8);
  swift_bridgeObjectRetain();
  v9._uint64_t countAndFlagsBits = v4;
  v9._object = v3;
  sub_10096BDC0(v9);
  swift_bridgeObjectRelease();
  v10._uint64_t countAndFlagsBits = 0xD000000000000019;
  v10._object = (void *)0x80000001009977A0;
  sub_10096BDC0(v10);
  return 0;
}

uint64_t sub_10017BF48(uint64_t a1, uint64_t a2)
{
  sub_10096CBD0(34);
  swift_bridgeObjectRelease();
  strcpy((char *)v6, "CREATE INDEX ");
  HIWORD(v6[1]) = -4864;
  uint64_t v4 = *(void *)(a2 + 40);
  uint64_t v3 = *(void **)(a2 + 48);
  swift_bridgeObjectRetain();
  v7._uint64_t countAndFlagsBits = v4;
  v7._object = v3;
  sub_10096BDC0(v7);
  swift_bridgeObjectRelease();
  v8._uint64_t countAndFlagsBits = 0x4F2065746174735FLL;
  v8._object = (void *)0xEA0000000000204ELL;
  sub_10096BDC0(v8);
  swift_bridgeObjectRetain();
  v9._uint64_t countAndFlagsBits = v4;
  v9._object = v3;
  sub_10096BDC0(v9);
  swift_bridgeObjectRelease();
  v10._uint64_t countAndFlagsBits = 0x29657461747328;
  v10._object = (void *)0xE700000000000000;
  sub_10096BDC0(v10);
  return v6[0];
}

uint64_t sub_10017C03C(uint64_t a1, uint64_t a2)
{
  sub_10096CBD0(62);
  v6._uint64_t countAndFlagsBits = 0x4920455441455243;
  v6._object = (void *)0xED0000205845444ELL;
  sub_10096BDC0(v6);
  uint64_t v4 = *(void *)(a2 + 40);
  uint64_t v3 = *(void **)(a2 + 48);
  swift_bridgeObjectRetain();
  v7._uint64_t countAndFlagsBits = v4;
  v7._object = v3;
  sub_10096BDC0(v7);
  swift_bridgeObjectRelease();
  v8._object = (void *)0x8000000100997720;
  v8._uint64_t countAndFlagsBits = 0xD000000000000015;
  sub_10096BDC0(v8);
  swift_bridgeObjectRetain();
  v9._uint64_t countAndFlagsBits = v4;
  v9._object = v3;
  sub_10096BDC0(v9);
  swift_bridgeObjectRelease();
  v10._uint64_t countAndFlagsBits = 0xD000000000000018;
  v10._object = (void *)0x8000000100997740;
  sub_10096BDC0(v10);
  return 0;
}

uint64_t sub_10017C13C(uint64_t a1, uint64_t a2)
{
  sub_10096CBD0(79);
  v6._uint64_t countAndFlagsBits = 0x4920455441455243;
  v6._object = (void *)0xED0000205845444ELL;
  sub_10096BDC0(v6);
  uint64_t v4 = *(void *)(a2 + 40);
  uint64_t v3 = *(void **)(a2 + 48);
  swift_bridgeObjectRetain();
  v7._uint64_t countAndFlagsBits = v4;
  v7._object = v3;
  sub_10096BDC0(v7);
  swift_bridgeObjectRelease();
  v8._uint64_t countAndFlagsBits = 0xD000000000000025;
  v8._object = (void *)0x80000001009976D0;
  sub_10096BDC0(v8);
  swift_bridgeObjectRetain();
  v9._uint64_t countAndFlagsBits = v4;
  v9._object = v3;
  sub_10096BDC0(v9);
  swift_bridgeObjectRelease();
  v10._object = (void *)0x8000000100997700;
  v10._uint64_t countAndFlagsBits = 0xD000000000000019;
  sub_10096BDC0(v10);
  return 0;
}

uint64_t sub_10017C23C()
{
  long long v1 = *(void **)(v0 + 24);
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = sub_10017D204;
  *(void *)(v2 + 24) = v0;
  uint64_t v22 = sub_10017D21C;
  uint64_t v23 = v2;
  id aBlock = _NSConcreteStackBlock;
  uint64_t v19 = 1107296256;
  char v20 = sub_10017090C;
  uint64_t v21 = &unk_100A728F0;
  uint64_t v3 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  id aBlock = 0;
  unsigned int v4 = [v1 executeSwift:v3 error:&aBlock];
  _Block_release(v3);
  uint64_t v5 = aBlock;
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!v4)
  {
    sub_10096ABF0();

    swift_willThrow();
    return swift_release();
  }
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = sub_10017D244;
  *(void *)(v7 + 24) = v0;
  uint64_t v22 = sub_10017EC40;
  uint64_t v23 = v7;
  id aBlock = _NSConcreteStackBlock;
  uint64_t v19 = 1107296256;
  char v20 = sub_10017090C;
  uint64_t v21 = &unk_100A72940;
  Swift::String v8 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  id aBlock = 0;
  unsigned int v9 = [v1 executeSwift:v8 error:&aBlock];
  _Block_release(v8);
  Swift::String v10 = aBlock;
  char v11 = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v11) {
    goto LABEL_13;
  }
  if (!v9)
  {
    sub_10096ABF0();

    swift_willThrow();
    swift_release();
    return swift_release();
  }
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = sub_10017D25C;
  *(void *)(v12 + 24) = v0;
  uint64_t v22 = sub_10017EC40;
  uint64_t v23 = v12;
  id aBlock = _NSConcreteStackBlock;
  uint64_t v19 = 1107296256;
  char v20 = sub_10017090C;
  uint64_t v21 = &unk_100A72990;
  uint64_t v13 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  id aBlock = 0;
  unsigned __int8 v14 = [v1 executeSwift:v13 error:&aBlock];
  _Block_release(v13);
  uint64_t v15 = aBlock;
  char v16 = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v16) {
LABEL_14:
  }
    __break(1u);
  if (v14) {
    return swift_release_n();
  }
  sub_10096ABF0();

  swift_willThrow();
  swift_release_n();
  return swift_release();
}

uint64_t sub_10017C664(uint64_t a1, uint64_t a2)
{
  sub_10096CBD0(62);
  v6._uint64_t countAndFlagsBits = 0x4154205245544C41;
  v6._object = (void *)0xEC00000020454C42;
  sub_10096BDC0(v6);
  uint64_t v4 = *(void *)(a2 + 40);
  uint64_t v3 = *(void **)(a2 + 48);
  swift_bridgeObjectRetain();
  v7._uint64_t countAndFlagsBits = v4;
  v7._object = v3;
  sub_10096BDC0(v7);
  swift_bridgeObjectRelease();
  v8._object = (void *)0x8000000100997690;
  v8._uint64_t countAndFlagsBits = 0xD000000000000030;
  sub_10096BDC0(v8);
  return 0;
}

unint64_t sub_10017C71C(uint64_t a1, uint64_t a2)
{
  sub_10096CBD0(47);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 40);
  uint64_t v3 = *(void **)(a2 + 48);
  swift_bridgeObjectRetain();
  v6._uint64_t countAndFlagsBits = v4;
  v6._object = v3;
  sub_10096BDC0(v6);
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = 0xD000000000000018;
  v7._object = (void *)0x8000000100997670;
  sub_10096BDC0(v7);
  return 0xD000000000000015;
}

uint64_t sub_10017C7C8(uint64_t a1, uint64_t a2)
{
  sub_10096CBD0(99);
  v6._uint64_t countAndFlagsBits = 0x4920455441455243;
  v6._object = (void *)0xED0000205845444ELL;
  sub_10096BDC0(v6);
  uint64_t v4 = *(void *)(a2 + 40);
  uint64_t v3 = *(void **)(a2 + 48);
  swift_bridgeObjectRetain();
  v7._uint64_t countAndFlagsBits = v4;
  v7._object = v3;
  sub_10096BDC0(v7);
  swift_bridgeObjectRelease();
  v8._object = (void *)0x80000001009975F0;
  v8._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
  sub_10096BDC0(v8);
  swift_bridgeObjectRetain();
  v9._uint64_t countAndFlagsBits = v4;
  v9._object = v3;
  sub_10096BDC0(v9);
  swift_bridgeObjectRelease();
  v10._uint64_t countAndFlagsBits = 0xD000000000000036;
  v10._object = (void *)0x8000000100997610;
  sub_10096BDC0(v10);
  return 0;
}

uint64_t sub_10017C8C8()
{
  uint64_t v2 = v0;
  uint64_t v3 = sub_10096B480();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  Swift::String v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10096B0E0();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  Swift::String v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10096B0D0();
  sub_10096B080();
  double v12 = v11;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  double v13 = v12 * 1000000000.0;
  if ((~COERCE__INT64(v12 * 1000000000.0) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (v13 <= -9.22337204e18)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v13 >= 9.22337204e18)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v14 = v2[24];
  uint64_t v15 = (uint64_t)v13 - v14;
  if (__OFSUB__((uint64_t)v13, v14))
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
  }
  uint64_t v31 = v4;
  uint64_t v32 = v3;
  uint64_t v33 = v1;
  char v16 = (void *)v2[3];
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = v2;
  *(void *)(v17 + 24) = v15;
  uint64_t v18 = (void *)swift_allocObject();
  v18[2] = sub_10017D324;
  v18[3] = v17;
  aBlock[4] = sub_10017EC40;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_10017090C;
  aBlock[3] = &unk_100A72B98;
  uint64_t v19 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  unsigned int v20 = [v16 executeSwift:v19 error:aBlock];
  _Block_release(v19);
  id v21 = aBlock[0];
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation) {
    goto LABEL_18;
  }
  if (v20)
  {
    if ((uint64_t)[v16 changes] >= 1)
    {
      id v23 = (id)fpfs_current_or_default_log();
      sub_10096B490();
      swift_retain();
      Swift::String v24 = sub_10096B470();
      os_log_type_t v25 = sub_10096C590();
      if (os_log_type_enabled(v24, v25))
      {
        uint64_t v26 = swift_slowAlloc();
        Swift::String v30 = (void *)swift_slowAlloc();
        aBlock[0] = v30;
        *(_DWORD *)uint64_t v26 = 134218242;
        id v34 = objc_msgSend(v16, "changes", v30);
        sub_10096C8C0();
        *(_WORD *)(v26 + 12) = 2080;
        uint64_t v27 = v2[5];
        unint64_t v28 = v2[6];
        swift_bridgeObjectRetain();
        id v34 = (id)sub_100719D44(v27, v28, (uint64_t *)aBlock);
        sub_10096C8C0();
        swift_release();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v24, v25, "🧹  purged %lld outdated entries from %s", (uint8_t *)v26, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_release();
      }
      (*(void (**)(char *, uint64_t))(v31 + 8))(v6, v32);
    }
    return swift_release();
  }
  else
  {
    sub_10096ABF0();

    swift_willThrow();
    return swift_release();
  }
}

uint64_t sub_10017CDCC(uint64_t a1, uint64_t a2)
{
  sub_10096CBD0(70);
  v6._uint64_t countAndFlagsBits = 0x46204554454C4544;
  v6._object = (void *)0xEC000000204D4F52;
  sub_10096BDC0(v6);
  uint64_t v4 = *(void *)(a2 + 40);
  uint64_t v3 = *(void **)(a2 + 48);
  swift_bridgeObjectRetain();
  v7._uint64_t countAndFlagsBits = v4;
  v7._object = v3;
  sub_10096BDC0(v7);
  swift_bridgeObjectRelease();
  v8._object = (void *)0x8000000100997900;
  v8._uint64_t countAndFlagsBits = 0xD000000000000015;
  sub_10096BDC0(v8);
  v9._uint64_t countAndFlagsBits = sub_10096D220();
  sub_10096BDC0(v9);
  swift_bridgeObjectRelease();
  v10._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
  v10._object = (void *)0x8000000100997920;
  sub_10096BDC0(v10);
  sub_10014D284();
  v11._uint64_t countAndFlagsBits = sub_10096C9C0();
  sub_10096BDC0(v11);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_10017CF38()
{
  return sub_10017C8C8();
}

uint64_t sub_10017CF5C()
{
  return sub_10017B63C();
}

uint64_t sub_10017CF80()
{
  return sub_10017C23C();
}

uint64_t sub_10017CFA4()
{
  return swift_getWitnessTable();
}

uint64_t sub_10017CFC0()
{
  return swift_getWitnessTable();
}

uint64_t sub_10017CFDC(uint64_t a1)
{
  *(void *)(a1 + 8) = swift_getWitnessTable();
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_10017D03C()
{
  return swift_getWitnessTable();
}

uint64_t sub_10017D058(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10017D094()
{
  unint64_t result = qword_100AD0F20;
  if (!qword_100AD0F20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100AD0F20);
  }
  return result;
}

uint64_t sub_10017D0E8@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

unsigned __int8 *sub_10017D118@<X0>(unsigned __int8 *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_10017D124@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = sub_1004D81BC(*a1, a2);
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t sub_10017D150(uint64_t result)
{
  if ((*(_DWORD *)(*(void *)(*(void *)(result + 24) - 8) + 80) & 0x20000) != 0) {
    return swift_slowDealloc();
  }
  return result;
}

uint64_t sub_10017D1A4(uint64_t a1)
{
  uint64_t v2 = sub_10002B7CC((uint64_t *)&unk_100ACE0F0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10017D204(uint64_t a1)
{
  return sub_10017C664(a1, v1);
}

uint64_t sub_10017D20C()
{
  return swift_deallocObject();
}

uint64_t sub_10017D21C()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

unint64_t sub_10017D244(uint64_t a1)
{
  return sub_10017C71C(a1, v1);
}

uint64_t sub_10017D24C()
{
  return swift_deallocObject();
}

uint64_t sub_10017D25C(uint64_t a1)
{
  return sub_10017C7C8(a1, v1);
}

uint64_t sub_10017D264()
{
  return swift_deallocObject();
}

uint64_t sub_10017D274(uint64_t a1)
{
  return sub_10017BCC4(a1, v1);
}

uint64_t sub_10017D27C()
{
  return swift_deallocObject();
}

uint64_t sub_10017D28C(uint64_t a1)
{
  return sub_10017BE50(a1, v1);
}

uint64_t sub_10017D294()
{
  return swift_deallocObject();
}

uint64_t sub_10017D2A4(uint64_t a1)
{
  return sub_10017BF48(a1, v1);
}

uint64_t sub_10017D2AC()
{
  return swift_deallocObject();
}

uint64_t sub_10017D2BC(uint64_t a1)
{
  return sub_10017C03C(a1, v1);
}

uint64_t sub_10017D2C4()
{
  return swift_deallocObject();
}

uint64_t sub_10017D2D4(uint64_t a1)
{
  return sub_10017C13C(a1, v1);
}

uint64_t sub_10017D2DC()
{
  return swift_deallocObject();
}

uint64_t sub_10017D2EC()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10017D324(uint64_t a1)
{
  return sub_10017CDCC(a1, *(void *)(v1 + 16));
}

uint64_t sub_10017D32C()
{
  return swift_deallocObject();
}

uint64_t sub_10017D340(uint64_t a1)
{
  return sub_10017E070(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100175D00);
}

uint64_t sub_10017D358()
{
  return swift_deallocObject();
}

uint64_t sub_10017D368(uint64_t a1)
{
  return a1;
}

uint64_t sub_10017D3A0(uint64_t a1)
{
  return a1;
}

uint64_t sub_10017D3DC(uint64_t a1)
{
  return sub_10017E070(a1, sub_100175BBC);
}

uint64_t sub_10017D3F4()
{
  return swift_deallocObject();
}

unint64_t sub_10017D404(char a1)
{
  if (a1) {
    return 0;
  }
  sub_10096CBD0(29);
  swift_bridgeObjectRelease();
  v2._uint64_t countAndFlagsBits = sub_10096D220();
  sub_10096BDC0(v2);
  swift_bridgeObjectRelease();
  return 0xD00000000000001BLL;
}

uint64_t sub_10017D4A8(uint64_t a1, uint64_t a2)
{
  uint64_t v29 = a1;
  uint64_t v30 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = sub_10096C890();
  uint64_t v26 = *(void *)(v3 - 8);
  uint64_t v27 = v3;
  uint64_t v4 = __chkstk_darwin(v3);
  Swift::String v6 = (char *)&v25 - v5;
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(v4);
  unint64_t v28 = (char *)&v25 - v8;
  uint64_t v35 = 0x203D20646E696BLL;
  unint64_t v36 = 0xE700000000000000;
  Swift::String v9 = (void *)swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v11 = v30;
  uint64_t v12 = swift_getAssociatedConformanceWitness();
  v32._uint64_t countAndFlagsBits = AssociatedTypeWitness;
  v32._object = v9;
  uint64_t v33 = AssociatedConformanceWitness;
  id v34 = (void *)v12;
  uint64_t v13 = type metadata accessor for ThrottlingKey();
  sub_10070BDAC(v13);
  LOBYTE(v31._countAndFlagsBits) = 0;
  v32._uint64_t countAndFlagsBits = AssociatedTypeWitness;
  v32._object = v9;
  uint64_t v14 = v7;
  uint64_t v33 = AssociatedConformanceWitness;
  id v34 = (void *)v12;
  uint64_t v15 = type metadata accessor for ThrottlingKey.Kind();
  swift_getWitnessTable();
  v37._uint64_t countAndFlagsBits = sub_1003AA00C((uint64_t)&v31, v15);
  sub_10096BDC0(v37);
  swift_bridgeObjectRelease();
  sub_10070BEA0(v13, (uint64_t)v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v6, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v26 + 8))(v6, v27);
  }
  else
  {
    char v16 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
    uint64_t v17 = v28;
    v16(v28, v6, AssociatedTypeWitness);
    v32._uint64_t countAndFlagsBits = 0;
    v32._object = (void *)0xE000000000000000;
    sub_10096CBD0(17);
    swift_bridgeObjectRelease();
    v32._uint64_t countAndFlagsBits = 0x65746920444E4120;
    v32._object = (void *)0xEF203D2064695F6DLL;
    v38._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedConformanceWitness + 40)
                                                                         + 32))(v11, AssociatedTypeWitness);
    sub_10096BDC0(v38);
    swift_bridgeObjectRelease();
    sub_10096BDC0(v32);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v17, AssociatedTypeWitness);
  }
  char v18 = sub_10070C05C(v13);
  if (v18 == 70) {
    return v35;
  }
  char v19 = v18;
  v32._uint64_t countAndFlagsBits = 0;
  v32._object = (void *)0xE000000000000000;
  sub_10096CBD0(18);
  swift_bridgeObjectRelease();
  v31._uint64_t countAndFlagsBits = 0xD000000000000010;
  v31._object = (void *)0x8000000100997970;
  uint64_t v20 = qword_10097B590[v19];
  id v34 = &type metadata for Int;
  v32._uint64_t countAndFlagsBits = v20;
  uint64_t v21 = sub_1003AC444((uint64_t)&v32);
  id v23 = v22;
  sub_10017D1A4((uint64_t)&v32);
  if (v23)
  {
    v39._uint64_t countAndFlagsBits = v21;
    v39._object = v23;
    sub_10096BDC0(v39);
    swift_bridgeObjectRelease();
    sub_10096BDC0(v31);
    swift_bridgeObjectRelease();
    return v35;
  }
  uint64_t result = sub_10096CE20();
  __break(1u);
  return result;
}

unint64_t sub_10017D944(void *a1, uint64_t a2)
{
  return sub_100174020(a1, a2, *(uint64_t **)(v2 + 48), *(void *)(v2 + 56), *(void *)(v2 + 64), *(void *)(v2 + 72), *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40));
}

uint64_t sub_10017D978()
{
  return swift_deallocObject();
}

void sub_10017D9B0(void *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1003AD174(*(id *)(v2 + 16), a1, a2);
}

uint64_t sub_10017D9B8@<X0>(void *a1@<X8>)
{
  return sub_1001743A4(*(void *)(v1 + 48), a1);
}

uint64_t sub_10017D9E0()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_10017DA18@<X0>(char *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1004D81BC(*a1, *(void *)(v2 + 16));
  *a2 = result;
  a2[1] = v5;
  return result;
}

unint64_t sub_10017DA48()
{
  unint64_t result = qword_100ACE128;
  if (!qword_100ACE128)
  {
    sub_100033BE8(&qword_100ACE120);
    sub_100025500(&qword_100ACE130, &qword_100ACE138);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100ACE128);
  }
  return result;
}

uint64_t sub_10017DAE4(uint64_t a1)
{
  return sub_10017E070(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100175A84);
}

uint64_t sub_10017DAFC()
{
  return swift_deallocObject();
}

uint64_t sub_10017DB0C(uint64_t a1)
{
  return sub_100172680(a1, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 16), *(void *)(v1 + 24), *(unsigned __int8 *)(v1 + 32));
}

uint64_t sub_10017DB1C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10017DB54(uint64_t a1)
{
  return sub_100173244(a1, *(void *)(v1 + 16), *(uint64_t (**)(uint64_t, uint64_t))(v1 + 24), *(void *)(v1 + 32), *(unsigned __int8 *)(v1 + 40));
}

uint64_t sub_10017DB64()
{
  return swift_deallocObject();
}

unint64_t sub_10017DB74()
{
  unint64_t result = qword_100ACE140;
  if (!qword_100ACE140)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100ACE140);
  }
  return result;
}

uint64_t sub_10017DBC8()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10017DC00(uint64_t a1)
{
  return sub_100179438(a1, *(void **)(v1 + 16), *(uint64_t (**)(uint64_t))(v1 + 24));
}

uint64_t sub_10017DC0C()
{
  return swift_deallocObject();
}

uint64_t _s9SQLFieldsOMa()
{
  return swift_getGenericMetadata();
}

unint64_t sub_10017DC34(uint64_t a1, char a2)
{
  return sub_100174740(a1, a2, v2[2], v2[3], v2[4], v2[5], v2[6]);
}

void sub_10017DC44(uint64_t a1@<X0>, void *a2@<X8>)
{
  sub_100174A54(a1, *(void *)(v2 + 24), a2);
}

uint64_t sub_10017DC64()
{
  return sub_10016ED08();
}

double sub_10017DC8C@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = sub_100179330(*(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 48), a1).n128_u64[0];
  return result;
}

uint64_t sub_10017DC9C(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 <= 0xFBu) {
    return sub_10017DCB0(a1, a2, a3);
  }
  return a1;
}

uint64_t sub_10017DCB0(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 2) {
    return swift_release();
  }
  return result;
}

uint64_t sub_10017DCC8(uint64_t a1)
{
  return a1;
}

uint64_t sub_10017DCF4(uint64_t a1)
{
  return a1;
}

uint64_t sub_10017DD20@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  return sub_100177DC0(a1, *(void *)(v2 + 16), *(unsigned char **)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48), *(unsigned __int8 *)(v2 + 56), *(void *)(v2 + 64), a2, *(void *)(v2 + 72));
}

uint64_t sub_10017DD58(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 <= 0xFBu) {
    return sub_10017DD6C(a1, a2, a3);
  }
  return a1;
}

uint64_t sub_10017DD6C(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 2) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_10017DD84(uint64_t a1)
{
  return sub_1001707F8(a1, v1);
}

uint64_t sub_10017DD8C()
{
  return swift_deallocObject();
}

unint64_t sub_10017DD9C()
{
  unint64_t result = qword_100ACF610;
  if (!qword_100ACF610)
  {
    sub_10096C6E0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100ACF610);
  }
  return result;
}

uint64_t sub_10017DDF4()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t sub_10017DE2C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10017DE64()
{
  return sub_10017097C();
}

uint64_t sub_10017DE74()
{
  return sub_100174E60(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10017DE90(uint64_t a1, char a2)
{
  return sub_100174F38(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_10017DE98(uint64_t a1)
{
  return sub_10017A720(a1, v1);
}

uint64_t sub_10017DEA0()
{
  return swift_deallocObject();
}

uint64_t sub_10017DEB4()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v3 = *(void *)(type metadata accessor for ThrottlingKey() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  swift_release();
  type metadata accessor for ReconciliationID();
  if (swift_getEnumCaseMultiPayload() == 1) {
    uint64_t v5 = v2;
  }
  else {
    uint64_t v5 = AssociatedTypeWitness;
  }
  (*(void (**)(unint64_t))(*(void *)(v5 - 8) + 8))(v0 + v4);
  return swift_deallocObject();
}

uint64_t sub_10017E058(uint64_t a1)
{
  return sub_10017E070(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10017704C);
}

uint64_t sub_10017E070(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t))
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v4 = *(void *)(type metadata accessor for ThrottlingKey() - 8);
  uint64_t v5 = *(void *)(v2 + 48);
  uint64_t v6 = v2 + ((*(unsigned __int8 *)(v4 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  return a2(a1, v5, v6);
}

uint64_t sub_10017E1B0()
{
  return swift_deallocObject();
}

uint64_t sub_10017E1C0()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v3 = *(void *)(type metadata accessor for ThrottlingKey() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  swift_release();
  type metadata accessor for ReconciliationID();
  if (swift_getEnumCaseMultiPayload() == 1) {
    uint64_t v5 = v2;
  }
  else {
    uint64_t v5 = AssociatedTypeWitness;
  }
  (*(void (**)(unint64_t))(*(void *)(v5 - 8) + 8))(v0 + v4);
  swift_errorRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_10017E38C(void *a1)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v3 = *(void *)(type metadata accessor for ThrottlingKey() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void **)(v1 + 48);
  uint64_t v6 = v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8);

  return sub_1001771C0(a1, v5, v1 + v4, v6);
}

uint64_t sub_10017E4EC()
{
  return swift_deallocObject();
}

uint64_t sub_10017E4FC(uint64_t a1)
{
  return sub_100175448(a1, v1);
}

uint64_t sub_10017E504()
{
  return swift_deallocObject();
}

void sub_10017E514(void *a1)
{
  sub_10017B154(a1, v1);
}

uint64_t sub_10017E530(uint64_t a1, uint64_t a2)
{
  return sub_10017B3D8(a1, a2, *(void **)(v2 + 48));
}

uint64_t sub_10017E540(uint64_t a1, uint64_t a2)
{
  return sub_100174D08(a1, a2, *(void *)(v2 + 16));
}

unint64_t sub_10017E548(uint64_t a1, char a2)
{
  return sub_10017AA74(a1, a2);
}

unint64_t sub_10017E550(uint64_t a1, char a2)
{
  return sub_10017ACA8(a1, a2);
}

uint64_t sub_10017E558(uint64_t a1)
{
  return sub_100179A9C(a1, *(unsigned char *)(v1 + 48));
}

uint64_t sub_10017E56C(uint64_t a1, uint64_t a2)
{
  return sub_100179DF0(a1, a2, *(void *)(v2 + 48));
}

uint64_t sub_10017E590()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, AssociatedTypeWitness);

  return swift_deallocObject();
}

uint64_t sub_10017E678(uint64_t a1)
{
  uint64_t v3 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v1 + 48);
  uint64_t v6 = v1 + v4;
  uint64_t v7 = (char *)(v1 + *(void *)(v3 + 64) + v4);
  char v8 = v7[1];
  char v9 = *v7;

  return sub_10017A37C(a1, v5, v6, v9, v8);
}

uint64_t sub_10017E730()
{
  return swift_deallocObject();
}

uint64_t sub_10017E740()
{
  return sub_10016F07C(v0);
}

uint64_t sub_10017E75C(uint64_t a1)
{
  return sub_1004B5F20(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_10017E768()
{
  return swift_deallocObject();
}

uint64_t sub_10017E778()
{
  return swift_deallocObject();
}

void sub_10017E788(id a1, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0) {
}
  }

uint64_t destroy for ThrottlingError(uint64_t result)
{
  unsigned int v1 = *(unsigned __int8 *)(result + 16);
  if (v1 <= 3) {
    return sub_10017DCB0(*(void *)result, *(void *)(result + 8), v1);
  }
  return result;
}

uint64_t _s9libfssync15ThrottlingErrorOwCP_0(uint64_t a1, uint64_t *a2)
{
  unsigned int v3 = *((unsigned __int8 *)a2 + 16);
  if (v3 > 3)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
  }
  else
  {
    uint64_t v4 = *a2;
    uint64_t v5 = a2[1];
    sub_10017DD6C(*a2, v5, v3);
    *(void *)a1 = v4;
    *(void *)(a1 + 8) = v5;
    *(unsigned char *)(a1 + 16) = v3;
  }
  return a1;
}

uint64_t assignWithCopy for ThrottlingError(uint64_t a1, long long *a2)
{
  unsigned int v4 = *(unsigned __int8 *)(a1 + 16);
  unsigned int v5 = *((unsigned __int8 *)a2 + 16);
  if (v4 > 3)
  {
    if (v5 <= 3)
    {
      uint64_t v12 = *(void *)a2;
      uint64_t v11 = *((void *)a2 + 1);
      sub_10017DD6C(*(void *)a2, v11, v5);
      *(void *)a1 = v12;
      *(void *)(a1 + 8) = v11;
      *(unsigned char *)(a1 + 16) = v5;
      return a1;
    }
LABEL_7:
    long long v13 = *a2;
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    *(_OWORD *)a1 = v13;
    return a1;
  }
  if (v5 > 3)
  {
    sub_10017DCB0(*(void *)a1, *(void *)(a1 + 8), v4);
    goto LABEL_7;
  }
  uint64_t v7 = *(void *)a2;
  uint64_t v6 = *((void *)a2 + 1);
  sub_10017DD6C(*(void *)a2, v6, v5);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v6;
  char v10 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  sub_10017DCB0(v8, v9, v10);
  return a1;
}

__n128 initializeWithTake for JobSchedulingState(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for ThrottlingError(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(unsigned __int8 *)(a1 + 16);
  if (v4 > 3) {
    goto LABEL_5;
  }
  unsigned int v5 = *(unsigned __int8 *)(a2 + 16);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  if (v5 > 3)
  {
    sub_10017DCB0(v6, v7, v4);
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
    return a1;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v5;
  sub_10017DCB0(v6, v7, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for ThrottlingError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF9 && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 249);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 > 3) {
    unsigned int v4 = (v3 ^ 0xFF) + 1;
  }
  else {
    unsigned int v4 = 0;
  }
  if (v4 >= 5) {
    return v4 - 4;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ThrottlingError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF8)
  {
    *(void *)__n128 result = 0;
    *(void *)(result + 8) = 0;
    *(unsigned char *)(result + 16) = 0;
    *(_DWORD *)__n128 result = a2 - 249;
    if (a3 >= 0xF9) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xF9) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -4 - a2;
    }
  }
  return result;
}

uint64_t sub_10017E9E4(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 16);
  if (v1 > 3) {
    return (v1 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

uint64_t sub_10017E9F8(uint64_t result, unsigned int a2)
{
  if (a2 > 0xFC)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 253;
    *(void *)(result + 8) = 0;
  }
  else if (a2)
  {
    *(unsigned char *)(result + 16) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ThrottlingError()
{
  return &type metadata for ThrottlingError;
}

unsigned char *sub_10017EA30(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10017EAFCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t sub_10017EB28()
{
  return swift_getWitnessTable();
}

unint64_t sub_10017EB44()
{
  unint64_t result = qword_100ACE1D8;
  if (!qword_100ACE1D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100ACE1D8);
  }
  return result;
}

uint64_t sub_10017EC44(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  uint64_t v3 = a1[2];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (v5 <= 0x3F)
  {
    unsigned int v6 = (void *)a1[5];
    uint64_t v7 = a1[3];
    uint64_t v8 = swift_getAssociatedTypeWitness();
    uint64_t v9 = v8;
    if (v10 > 0x3F)
    {
      return v8;
    }
    else
    {
      swift_getTupleTypeLayout2();
      char v52 = &v51;
      uint64_t v31 = v3;
      Swift::String v32 = v2;
      uint64_t v47 = AssociatedTypeWitness;
      uint64_t v48 = v9;
      uint64_t AssociatedConformanceWitness = (void *)swift_getAssociatedConformanceWitness();
      uint64_t v50 = (void *)swift_getAssociatedConformanceWitness();
      uint64_t v11 = type metadata accessor for ReconciliationID();
      uint64_t AssociatedTypeWitness = v11;
      if (v12 <= 0x3F)
      {
        uint64_t v13 = *(void *)(v11 - 8) + 64;
        uint64_t v53 = v13;
        uint64_t v54 = v13;
        uint64_t v55 = v13;
        swift_getTupleTypeLayout2();
        BOOL v56 = &v46;
        uint64_t v14 = type metadata accessor for SnapshotItem();
        unint64_t v16 = v15;
        uint64_t v17 = sub_10096C890();
        if (v18 > 0x3F) {
          return v17;
        }
        swift_getTupleTypeLayout3();
        uint64_t v57 = &v45;
        uint64_t v19 = type metadata accessor for SnapshotItem();
        unint64_t v21 = v20;
        uint64_t v17 = sub_10096C890();
        if (v22 > 0x3F)
        {
          return v17;
        }
        else
        {
          swift_getTupleTypeLayout3();
          uint64_t v58 = &v44;
          if (v16 > 0x3F)
          {
            return v14;
          }
          else
          {
            uint64_t v59 = *(void *)(v14 - 8) + 64;
            if (v21 > 0x3F)
            {
              return v19;
            }
            else
            {
              uint64_t v60 = *(void *)(v19 - 8) + 64;
              uint64_t v61 = v13;
              uint64_t v47 = v13;
              uint64_t v23 = sub_10096C890();
              uint64_t AssociatedTypeWitness = v23;
              if (v24 <= 0x3F)
              {
                uint64_t v48 = *(void *)(v23 - 8) + 64;
                uint64_t v25 = v48;
                uint64_t AssociatedConformanceWitness = &unk_10097B7F8;
                uint64_t v50 = &unk_10097B7F8;
                swift_getTupleTypeLayout();
                long long v62 = &v43;
                uint64_t v47 = v13;
                uint64_t v48 = v25;
                uint64_t AssociatedConformanceWitness = &unk_10097B810;
                uint64_t v50 = &unk_10097B810;
                swift_getTupleTypeLayout();
                uint64_t v63 = &v42;
                swift_getTupleTypeLayout2();
                swift_getTupleTypeLayout2();
                unint64_t v64 = &v41;
                swift_getTupleTypeLayout2();
                long long v65 = &v40;
                swift_getTupleTypeLayout2();
                int v66 = &v39;
                swift_getTupleTypeLayout2();
                uint64_t v67 = &v38;
                long long v68 = &unk_10097B858;
                uint64_t v69 = v13;
                swift_getTupleTypeLayout2();
                uint64_t v70 = &v37;
                swift_getTupleTypeLayout2();
                long long v71 = &v36;
                uint64_t v72 = &unk_10097B870;
                uint64_t v73 = &unk_10097B870;
                BOOL v74 = &unk_10097B888;
                uint64_t v75 = &unk_10097B888;
                uint64_t v76 = v13;
                uint64_t v77 = v13;
                uint64_t v78 = v13;
                uint64_t v47 = v31;
                uint64_t v48 = v7;
                uint64_t AssociatedConformanceWitness = v32;
                uint64_t v50 = v6;
                uint64_t v26 = type metadata accessor for TestingOperation();
                uint64_t AssociatedTypeWitness = v26;
                if (v27 <= 0x3F)
                {
                  uint64_t v79 = *(void *)(v26 - 8) + 64;
                  swift_getTupleTypeLayout2();
                  uint64_t v80 = &v35;
                  uint64_t v81 = v13;
                  uint64_t v82 = v13;
                  swift_getTupleTypeLayout2();
                  uint64_t v83 = &v34;
                  uint64_t v84 = v13;
                  uint64_t v85 = v13;
                  uint64_t v86 = v13;
                  uint64_t v87 = v13;
                  uint64_t v47 = v31;
                  uint64_t v48 = v7;
                  uint64_t AssociatedConformanceWitness = v32;
                  uint64_t v50 = v6;
                  uint64_t v28 = type metadata accessor for ItemReconciliation();
                  uint64_t AssociatedTypeWitness = v28;
                  if (v29 <= 0x3F)
                  {
                    uint64_t v88 = *(void *)(v28 - 8) + 64;
                    swift_getTupleTypeLayout2();
                    uint64_t v89 = &v33;
                    uint64_t v90 = v13;
                    uint64_t v91 = v13;
                    uint64_t v92 = v13;
                    swift_initEnumMetadataMultiPayload();
                    return 0;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return AssociatedTypeWitness;
}

unsigned char *sub_10017F298(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  uint64_t v2004 = *(void *)(a3 + 24);
  uint64_t v1961 = swift_getAssociatedTypeWitness();
  uint64_t v2021 = *(void *)(v1961 - 8);
  int v1986 = *(_DWORD *)(v2021 + 80);
  unint64_t v2070 = v6;
  unint64_t v1926 = v6 + v1986;
  uint64_t v2039 = v1986;
  unint64_t v2006 = v1926 & ~(unint64_t)v1986;
  unint64_t v7 = *(void *)(v2021 + 64);
  unint64_t v2013 = v7;
  unint64_t v8 = v2006 + v7;
  unint64_t v2010 = v2006 + v7;
  if (v7 <= v6) {
    unint64_t v7 = v6;
  }
  unint64_t v2002 = v7;
  unint64_t v9 = v7 + 1;
  size_t v2020 = v7 + 1;
  if (v7 + 1 > v8) {
    unint64_t v8 = v7 + 1;
  }
  unsigned int v10 = *(_DWORD *)(v5 + 84);
  uint64_t v1960 = v5;
  int v1984 = *(_DWORD *)(v5 + 80);
  unint64_t v11 = v1984 | (unint64_t)*(_DWORD *)(v2021 + 80);
  unint64_t v2003 = v11;
  unint64_t v1955 = v11 + v9;
  unint64_t v2011 = ((v11 + v9) & ~v11) + v9;
  if (v2011 > v8) {
    unint64_t v8 = ((v11 + v9) & ~v11) + v9;
  }
  unint64_t v2009 = v8;
  uint64_t v2005 = v4;
  uint64_t v1940 = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(v1940 - 8);
  unsigned int v13 = *(_DWORD *)(v12 + 84);
  uint64_t v1937 = swift_getAssociatedTypeWitness();
  uint64_t v14 = *(void *)(v1937 - 8);
  unsigned int v15 = *(_DWORD *)(v14 + 84);
  unsigned int v1904 = v15;
  unsigned int v1919 = v13;
  if (v13 > v15) {
    unsigned int v15 = v13;
  }
  unsigned int v1909 = v15;
  if (v15 <= 0x7FFFFFFE) {
    unsigned int v15 = 2147483646;
  }
  unsigned int v2012 = v10;
  unsigned int v1930 = v15;
  if (v15 > v10) {
    unsigned int v10 = v15;
  }
  uint64_t v1957 = sub_10096B0E0();
  uint64_t v16 = *(void *)(v1957 - 8);
  unsigned int v17 = *(_DWORD *)(v16 + 84);
  if (v17 <= 0x7FFFFFFE) {
    unsigned int v18 = 2147483646;
  }
  else {
    unsigned int v18 = *(_DWORD *)(v16 + 84);
  }
  unsigned int v1988 = v18;
  if (v10 > v18) {
    unsigned int v18 = v10;
  }
  unsigned int v1906 = v18;
  if (v18 <= 0x7FFFFFFF) {
    unsigned int v18 = 0x7FFFFFFF;
  }
  unsigned int v1928 = v18;
  unsigned int v1935 = *(_DWORD *)(v16 + 84);
  unint64_t v1950 = v6 + v1984;
  uint64_t v2046 = v1984;
  uint64_t v1941 = v12;
  int v1977 = *(_DWORD *)(v12 + 80);
  uint64_t v1938 = v14;
  int v1975 = *(_DWORD *)(v14 + 80);
  uint64_t v19 = v1977 & 0xF8 | v1975 | 7u;
  uint64_t v1917 = v6 + v19;
  uint64_t v2008 = v19;
  uint64_t v1948 = *(void *)(v12 + 64) + 7;
  uint64_t v1936 = v1975 + 8;
  uint64_t v1963 = v1975;
  uint64_t v1932 = *(void *)(v14 + 64) + 7;
  size_t v2016 = ((((v1932 + ((v1936 + (v1948 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)v1975)) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 16;
  uint64_t v1954 = *(void *)(v1957 - 8);
  int v1971 = *(_DWORD *)(v16 + 80);
  uint64_t v2024 = v1971 | 7;
  uint64_t v2018 = v2024 + 16;
  uint64_t v1956 = v1971 + 12;
  size_t v20 = *(void *)(v16 + 64);
  size_t v1953 = v20 + v1971;
  size_t v1903 = v20 + 12;
  uint64_t v1951 = v1971 + 10;
  size_t v1958 = v20;
  if (v17) {
    size_t v21 = *(void *)(v16 + 64);
  }
  else {
    size_t v21 = v20 + 1;
  }
  size_t __n = v21;
  unint64_t v1934 = (v1971
         + 10
         + ((((((v20
               + 12
               + ((v20
                 + v1971
                 + ((v1971 + 12) & ~(unint64_t)v1971)) & ~(unint64_t)v1971)) & 0xFFFFFFFFFFFFFFF8)
             + 47) & 0xFFFFFFFFFFFFFFF8)
           + 15) & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)v1971;
  size_t v1952 = v21 + 7;
  unint64_t v22 = ((((((((((v21 + 7 + v1934) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
          + 19) & 0xFFFFFFFFFFFFFFF8)
        + 25) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  unint64_t v1929 = (v2024
         + 16
         + ((v6 + v19 + ((v6 + v1984) & ~(unint64_t)v1984)) & ~v19)
         + v2016) & ~v2024;
  unint64_t v23 = (((v1929 + v22 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  size_t v2015 = v23 + 16;
  uint64_t v2000 = v19 | v1984;
  uint64_t v2058 = v2000 | v1971;
  unint64_t v1925 = v23 + 23;
  unint64_t v1998 = ((v23 + 23 + ((v23 + 16 + v2058) & ~v2058)) & 0xFFFFFFFFFFFFFFF8) + 8;
  unsigned int v24 = *(_DWORD *)(v2021 + 84);
  uint64_t v1942 = swift_getAssociatedTypeWitness();
  uint64_t v25 = *(void *)(v1942 - 8);
  unsigned int v26 = *(_DWORD *)(v25 + 84);
  uint64_t v27 = swift_getAssociatedTypeWitness();
  uint64_t v28 = *(void *)(v27 - 8);
  int v29 = *(_DWORD *)(v28 + 80);
  uint64_t v1944 = v27;
  uint64_t v1945 = v28;
  unsigned int v1920 = v26;
  if (v26 <= *(_DWORD *)(v28 + 84)) {
    unsigned int v26 = *(_DWORD *)(v28 + 84);
  }
  if (v26 <= 0x7FFFFFFE) {
    unsigned int v30 = 2147483646;
  }
  else {
    unsigned int v30 = v26;
  }
  unsigned int v1931 = v30;
  if (v30 <= v24) {
    unsigned int v30 = v24;
  }
  if (v30 <= v1988) {
    unsigned int v30 = v1988;
  }
  unsigned int v1905 = v30;
  if (v30 <= 0x7FFFFFFF) {
    unsigned int v30 = 0x7FFFFFFF;
  }
  unsigned int v1927 = v30;
  unint64_t v1949 = v2013 + v1986;
  uint64_t v1943 = v25;
  int v31 = *(_DWORD *)(v25 + 80);
  uint64_t v32 = *(_DWORD *)(v28 + 80);
  uint64_t v33 = v31 & 0xF8 | *(_DWORD *)(v28 + 80) | 7u;
  uint64_t v1916 = v2013 + v33;
  uint64_t v1947 = *(void *)(v25 + 64) + 7;
  uint64_t v1939 = v32 + 8;
  uint64_t v1933 = *(void *)(*(void *)(v27 - 8) + 64) + 7;
  unint64_t v34 = ((((v1933 + ((v32 + 8 + (v1947 & 0xFFFFFFFFFFFFFFF8)) & ~v32)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  unint64_t v1989 = v22;
  unint64_t v1914 = (v2018 + ((v2013 + v33 + (v1949 & ~(unint64_t)v1986)) & ~v33) + v34) & ~v2024;
  unint64_t v35 = (((v1914 + v22 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  size_t v36 = v35 + 16;
  uint64_t v37 = v33 | v1986;
  uint64_t v38 = v37 | v1971;
  unint64_t v39 = v35 + ((v35 + 16 + v38) & ~v38);
  unsigned int v1921 = v24;
  if (v24) {
    size_t v40 = v2013;
  }
  else {
    size_t v40 = v2013 + 1;
  }
  uint64_t v41 = *(void *)(v4 - 8);
  int v42 = *(_DWORD *)(v41 + 80);
  uint64_t v1899 = v41;
  unint64_t v1902 = v2058 + v6;
  size_t v43 = v2015 + ((v2058 + v6) & ~v2058);
  unint64_t v44 = (v43 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v45 = v40 + v33;
  unint64_t v46 = ((((((v40 + v33 + ((v43 + v1986) & ~(unint64_t)v1986)) & ~v33)
          + v34
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  if (*(_DWORD *)(v41 + 84)) {
    uint64_t v47 = *(void *)(*(void *)(v4 - 8) + 64);
  }
  else {
    uint64_t v47 = *(void *)(*(void *)(v4 - 8) + 64) + 1;
  }
  if (v6 <= ((v44 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) {
    unint64_t v48 = ((v44 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  else {
    unint64_t v48 = v6;
  }
  if (v46 <= v34 + ((v40 + v33 + v2006) & ~v33) + 16) {
    unint64_t v49 = v34 + ((v40 + v33 + v2006) & ~v33) + 16;
  }
  else {
    unint64_t v49 = v46;
  }
  unint64_t v50 = ((v44 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  uint64_t v51 = v42;
  unint64_t v1898 = v6 + v42;
  size_t v1894 = v47;
  if (v50 <= (v1898 & ~(unint64_t)v42) + v47) {
    unint64_t v50 = (v1898 & ~(unint64_t)v42) + v47;
  }
  if (v48 <= v49) {
    unint64_t v48 = v49;
  }
  if (v48 <= v50) {
    unint64_t v52 = v50;
  }
  else {
    unint64_t v52 = v48;
  }
  if (v2012) {
    size_t v53 = v6;
  }
  else {
    size_t v53 = v6 + 1;
  }
  uint64_t v54 = *(void *)(v2004 - 8);
  int v55 = *(_DWORD *)(v54 + 80);
  uint64_t v1895 = v54;
  BOOL v56 = *(_DWORD *)(v54 + 84) == 0;
  uint64_t v2007 = v33 | v1986 | v1971;
  unint64_t v1901 = v38 + v2013;
  size_t v57 = v36 + ((v38 + v2013) & ~v38);
  unint64_t v58 = (v57 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v59 = ((v58 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  unint64_t v60 = ((((((v53 + v2008 + ((v57 + v1984) & ~(unint64_t)v1984)) & ~v2008)
          + v2016
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  unint64_t v1897 = v2013 + v1984;
  size_t v1900 = v53 + v2008;
  if (v56) {
    uint64_t v61 = *(void *)(*(void *)(v2004 - 8) + 64) + 1;
  }
  else {
    uint64_t v61 = *(void *)(*(void *)(v2004 - 8) + 64);
  }
  if (v2013 > v59) {
    unint64_t v59 = v2013;
  }
  if (v60 <= v2016
            + ((v53 + v2008 + ((v2013 + v1984) & ~(unint64_t)v1984)) & ~v2008)
            + 16)
    unint64_t v60 = v2016
        + ((v53 + v2008 + ((v2013 + v1984) & ~(unint64_t)v1984)) & ~v2008)
        + 16;
  unint64_t v62 = ((v58 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  uint64_t v63 = v55;
  unint64_t v1896 = v2013 + v55;
  size_t v1893 = v61;
  if (v62 <= (v1896 & ~(unint64_t)v55) + v61) {
    unint64_t v62 = (v1896 & ~(unint64_t)v55) + v61;
  }
  if (v59 > v60) {
    unint64_t v60 = v59;
  }
  if (v60 > v62) {
    unint64_t v62 = v60;
  }
  unint64_t v1908 = v62;
  unint64_t v64 = v62 + 1;
  unint64_t v1915 = v52;
  if (v64 <= v52 + 1) {
    unint64_t v65 = v52 + 1;
  }
  else {
    unint64_t v65 = v64;
  }
  unint64_t v66 = v2002 + 2;
  unint64_t v1946 = v2002 + 2;
  if (v2020 > v2002 + 2) {
    unint64_t v66 = v2002 + 1;
  }
  if (v66 <= v1998) {
    unint64_t v66 = v1998;
  }
  size_t v1913 = v53;
  unint64_t v67 = ((((((((v2008 + ((((v53 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 9) & ~v2008) + v2016 + 34) & 0xFFFFFFFFFFFFFFF8)
          + 63) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + v37
      + 8;
  size_t v1907 = v40;
  size_t v1912 = v40 + 7;
  unint64_t v1910 = v67;
  unint64_t v1911 = ((((((((v33 + 9 + ((((v40 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v33) + v34 + 34) & 0xFFFFFFFFFFFFFFF8)
            + 63) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 8;
  unint64_t v68 = ((((v1911 + (v67 & ~v37) + 23) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 8;
  unint64_t v1923 = ((v39 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v66 <= v1923) {
    unint64_t v69 = ((v39 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  else {
    unint64_t v69 = v66;
  }
  if (v69 <= v2015) {
    unint64_t v69 = v2015;
  }
  if (v69 <= v36) {
    unint64_t v69 = v36;
  }
  unint64_t v1922 = v2011 + 2;
  if (v69 <= v2011 + 2) {
    unint64_t v69 = v2011 + 2;
  }
  unint64_t v1924 = ((v2002 + 9) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v69 <= v1924) {
    unint64_t v69 = ((v2002 + 9) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  unint64_t v1999 = (v2002 & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v69 <= v1999) {
    unint64_t v69 = (v2002 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  if (v69 <= v2010) {
    unint64_t v69 = v2010;
  }
  if (v69 <= ((v2003 + 1) & ~v2003) + v2020) {
    unint64_t v69 = ((v2003 + 1) & ~v2003) + v2020;
  }
  unint64_t v70 = v65 + 1;
  unint64_t v1918 = v65;
  if (v69 <= v65 + 1) {
    unint64_t v69 = v65 + 1;
  }
  if (v69 <= v2011) {
    unint64_t v69 = v2011;
  }
  if (v69 <= v68) {
    unint64_t v69 = ((((v1911 + (v67 & ~v37) + 23) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  if (v69 <= v2009) {
    unint64_t v69 = v2009;
  }
  if (v69 <= 0x38) {
    uint64_t v71 = 56;
  }
  else {
    uint64_t v71 = v69;
  }
  if (v71 > 3) {
    goto LABEL_109;
  }
  unsigned int v72 = ((1 << (8 * v71)) + 5) >> (8 * v71);
  uint64_t v73 = 2;
  if (v72 > 0xFFD6) {
    uint64_t v73 = 4;
  }
  if (v72 <= 0xD6)
  {
LABEL_109:
    uint64_t v74 = v33 + 9;
    uint64_t v73 = 1;
  }
  else
  {
    uint64_t v74 = v33 + 9;
  }
  unint64_t v75 = v2000 | v2007 | v42 | (unint64_t)v55;
  if (v75 != 7
    || ((v1984 | v1986 | v1977 | v1975 | v1971 | v31 | v29 | v42 | v55) & 0x100000) != 0
    || (unint64_t)(v73 + v71) > 0x18)
  {
    uint64_t v77 = *(void *)a2;
    *a1 = *(void *)a2;
    uint64_t v78 = (unsigned char *)(v77 + ((v75 + 16) & ~v75));
    swift_retain();
    return v78;
  }
  if (v71 > 3) {
    goto LABEL_114;
  }
  unsigned int v80 = ((1 << (8 * v71)) + 5) >> (8 * v71);
  if (v80 > 0xFFD6)
  {
    unsigned int v76 = *(_DWORD *)&a2[v71];
  }
  else
  {
    if (v80 <= 0xD6)
    {
LABEL_114:
      unsigned int v76 = a2[v71];
      goto LABEL_121;
    }
    unsigned int v76 = *(unsigned __int16 *)&a2[v71];
  }
LABEL_121:
  unsigned int v81 = v76 - 41;
  if (v76 >= 0x29)
  {
    if (v71 <= 3) {
      uint64_t v82 = v71;
    }
    else {
      uint64_t v82 = 4;
    }
    switch(v82)
    {
      case 1:
        int v83 = *a2;
        if (v71 < 4) {
          goto LABEL_133;
        }
        goto LABEL_134;
      case 2:
        int v83 = *(unsigned __int16 *)a2;
        if (v71 >= 4) {
          goto LABEL_134;
        }
        goto LABEL_133;
      case 3:
        int v83 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        if (v71 >= 4) {
          goto LABEL_134;
        }
        goto LABEL_133;
      case 4:
        int v83 = *(_DWORD *)a2;
        if (v71 < 4) {
LABEL_133:
        }
          v83 |= v81 << (8 * v71);
LABEL_134:
        unsigned int v76 = v83 + 41;
        break;
      default:
        break;
    }
  }
  uint64_t v1892 = v71;
  uint64_t v1985 = v45;
  unsigned int v1987 = v26;
  unint64_t v2001 = v70;
  unint64_t v84 = ~v2039;
  unint64_t v85 = ~v2003;
  uint64_t v86 = v2058;
  uint64_t v87 = ~v2046;
  uint64_t v88 = ~v2008;
  unint64_t v89 = ~(unint64_t)v1975;
  unint64_t v90 = ~(unint64_t)v1971;
  uint64_t v91 = ~v33;
  uint64_t v92 = ~v32;
  switch(v76)
  {
    case 0u:
      uint64_t v78 = a1;
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v1960 + 16))(a1, a2, AssociatedTypeWitness);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v2021 + 16))(((unint64_t)a1 + v1926) & ~v2039, (unint64_t)&a2[v1926] & ~v2039, v1961);
      if (v1892 > 3) {
        goto LABEL_137;
      }
      unsigned int v407 = ((1 << (8 * v1892)) + 5) >> (8 * v1892);
      if (v407 > 0xFFD6)
      {
        *(_DWORD *)((char *)a1 + v1892) = 0;
      }
      else if (v407 <= 0xD6)
      {
LABEL_137:
        *((unsigned char *)a1 + v1892) = 0;
      }
      else
      {
        *(_WORD *)((char *)a1 + v1892) = 0;
      }
      return v78;
    case 1u:
      unsigned int v95 = a2[v2002];
      unsigned int v96 = v95 - 2;
      if (v95 < 2)
      {
        uint64_t v78 = a1;
        uint64_t v99 = v2021;
        uint64_t v100 = v1960;
        uint64_t v98 = v1892;
      }
      else
      {
        if (v2002 <= 3) {
          uint64_t v97 = v2002;
        }
        else {
          uint64_t v97 = 4;
        }
        uint64_t v78 = a1;
        uint64_t v98 = v1892;
        uint64_t v99 = v2021;
        uint64_t v100 = v1960;
        switch(v97)
        {
          case 1:
            int v101 = *a2;
            goto LABEL_505;
          case 2:
            int v101 = *(unsigned __int16 *)a2;
            goto LABEL_505;
          case 3:
            int v101 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_505;
          case 4:
            int v101 = *(_DWORD *)a2;
LABEL_505:
            if (v2002 < 4) {
              unsigned int v95 = (v101 | (v96 << (8 * v2002))) + 2;
            }
            else {
              unsigned int v95 = v101 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v636 = v95 == 1;
      if (v95 == 1) {
        uint64_t v637 = v99;
      }
      else {
        uint64_t v637 = v100;
      }
      (*(void (**)(unsigned char *))(v637 + 16))(v78);
      v78[v2002] = v636;
      if (v98 > 3) {
        goto LABEL_512;
      }
      unsigned int v638 = ((1 << (8 * v98)) + 5) >> (8 * v98);
      if (v638 > 0xFFD6)
      {
        *(_DWORD *)&v78[v98] = 1;
      }
      else if (v638 <= 0xD6)
      {
LABEL_512:
        v78[v98] = 1;
      }
      else
      {
        *(_WORD *)&v78[v98] = 1;
      }
      return v78;
    case 2u:
      unsigned int v102 = a2[v2002];
      unsigned int v103 = v102 - 2;
      if (v102 < 2)
      {
        uint64_t v78 = a1;
        uint64_t v106 = v2021;
        uint64_t v107 = v1960;
        uint64_t v105 = v1892;
      }
      else
      {
        if (v2002 <= 3) {
          uint64_t v104 = v2002;
        }
        else {
          uint64_t v104 = 4;
        }
        uint64_t v78 = a1;
        uint64_t v105 = v1892;
        uint64_t v106 = v2021;
        uint64_t v107 = v1960;
        switch(v104)
        {
          case 1:
            int v108 = *a2;
            goto LABEL_520;
          case 2:
            int v108 = *(unsigned __int16 *)a2;
            goto LABEL_520;
          case 3:
            int v108 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_520;
          case 4:
            int v108 = *(_DWORD *)a2;
LABEL_520:
            if (v2002 < 4) {
              unsigned int v102 = (v108 | (v103 << (8 * v2002))) + 2;
            }
            else {
              unsigned int v102 = v108 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v639 = v102 == 1;
      if (v102 == 1) {
        uint64_t v640 = v106;
      }
      else {
        uint64_t v640 = v107;
      }
      (*(void (**)(unsigned char *))(v640 + 16))(v78);
      v78[v2002] = v639;
      if (v105 > 3) {
        goto LABEL_527;
      }
      unsigned int v641 = ((1 << (8 * v105)) + 5) >> (8 * v105);
      if (v641 > 0xFFD6)
      {
        *(_DWORD *)&v78[v105] = 2;
      }
      else if (v641 <= 0xD6)
      {
LABEL_527:
        v78[v105] = 2;
      }
      else
      {
        *(_WORD *)&v78[v105] = 2;
      }
      return v78;
    case 3u:
      unsigned int v109 = a2[v2002];
      unsigned int v110 = v109 - 2;
      if (v109 < 2)
      {
        uint64_t v78 = a1;
        uint64_t v113 = v2021;
        uint64_t v114 = v1960;
        uint64_t v112 = v1892;
      }
      else
      {
        if (v2002 <= 3) {
          uint64_t v111 = v2002;
        }
        else {
          uint64_t v111 = 4;
        }
        uint64_t v78 = a1;
        uint64_t v112 = v1892;
        uint64_t v113 = v2021;
        uint64_t v114 = v1960;
        switch(v111)
        {
          case 1:
            int v115 = *a2;
            goto LABEL_535;
          case 2:
            int v115 = *(unsigned __int16 *)a2;
            goto LABEL_535;
          case 3:
            int v115 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_535;
          case 4:
            int v115 = *(_DWORD *)a2;
LABEL_535:
            if (v2002 < 4) {
              unsigned int v109 = (v115 | (v110 << (8 * v2002))) + 2;
            }
            else {
              unsigned int v109 = v115 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v642 = v109 == 1;
      if (v109 == 1) {
        uint64_t v643 = v113;
      }
      else {
        uint64_t v643 = v114;
      }
      (*(void (**)(unsigned char *))(v643 + 16))(v78);
      v78[v2002] = v642;
      if (v112 > 3) {
        goto LABEL_542;
      }
      unsigned int v644 = ((1 << (8 * v112)) + 5) >> (8 * v112);
      if (v644 > 0xFFD6)
      {
        *(_DWORD *)&v78[v112] = 3;
      }
      else if (v644 <= 0xD6)
      {
LABEL_542:
        v78[v112] = 3;
      }
      else
      {
        *(_WORD *)&v78[v112] = 3;
      }
      return v78;
    case 4u:
      unsigned int v116 = a2[v2002];
      unsigned int v117 = v116 - 2;
      if (v116 < 2)
      {
        unint64_t v120 = ~v2003;
        uint64_t v118 = v1892;
        uint64_t v78 = a1;
        uint64_t v121 = v1961;
        uint64_t v122 = AssociatedTypeWitness;
        uint64_t v123 = v2021;
        uint64_t v124 = v1960;
      }
      else
      {
        uint64_t v118 = v1892;
        if (v2002 <= 3) {
          uint64_t v119 = v2002;
        }
        else {
          uint64_t v119 = 4;
        }
        uint64_t v78 = a1;
        unint64_t v120 = ~v2003;
        uint64_t v121 = v1961;
        uint64_t v122 = AssociatedTypeWitness;
        uint64_t v123 = v2021;
        uint64_t v124 = v1960;
        switch(v119)
        {
          case 1:
            int v125 = *a2;
            goto LABEL_550;
          case 2:
            int v125 = *(unsigned __int16 *)a2;
            goto LABEL_550;
          case 3:
            int v125 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_550;
          case 4:
            int v125 = *(_DWORD *)a2;
LABEL_550:
            if (v2002 < 4) {
              unsigned int v116 = (v125 | (v117 << (8 * v2002))) + 2;
            }
            else {
              unsigned int v116 = v125 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v645 = v116 == 1;
      if (v116 == 1) {
        uint64_t v646 = v123;
      }
      else {
        uint64_t v646 = v124;
      }
      if (v116 == 1) {
        uint64_t v647 = v121;
      }
      else {
        uint64_t v647 = v122;
      }
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v646 + 16))(v78, a2, v647);
      v78[v2002] = v645;
      unint64_t v648 = v120;
      unint64_t v649 = (unint64_t)&v78[v1955] & v120;
      __darwin_ino64_t v650 = (unsigned __int8 *)((unint64_t)&a2[v1955] & v648);
      unsigned int v651 = v650[v2002];
      unsigned int v652 = v651 - 2;
      if (v651 >= 2)
      {
        if (v2002 <= 3) {
          uint64_t v653 = v2002;
        }
        else {
          uint64_t v653 = 4;
        }
        switch(v653)
        {
          case 1:
            int v654 = *v650;
            goto LABEL_986;
          case 2:
            int v654 = *(unsigned __int16 *)v650;
            goto LABEL_986;
          case 3:
            int v654 = *(unsigned __int16 *)((unint64_t)&a2[v1955] & v648) | (*(unsigned __int8 *)(((unint64_t)&a2[v1955] & v648) + 2) << 16);
            goto LABEL_986;
          case 4:
            int v654 = *(_DWORD *)v650;
LABEL_986:
            if (v2002 < 4) {
              unsigned int v651 = (v654 | (v652 << (8 * v2002))) + 2;
            }
            else {
              unsigned int v651 = v654 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v766 = v651 == 1;
      if (v651 == 1) {
        uint64_t v767 = v123;
      }
      else {
        uint64_t v767 = v124;
      }
      (*(void (**)(unint64_t))(v767 + 16))(v649);
      *(unsigned char *)(v649 + v2002) = v766;
      if (v118 > 3) {
        goto LABEL_993;
      }
      unsigned int v768 = ((1 << (8 * v118)) + 5) >> (8 * v118);
      if (v768 > 0xFFD6)
      {
        *(_DWORD *)&v78[v118] = 4;
      }
      else if (v768 <= 0xD6)
      {
LABEL_993:
        v78[v118] = 4;
      }
      else
      {
        *(_WORD *)&v78[v118] = 4;
      }
      return v78;
    case 5u:
      unint64_t v2040 = v36;
      unint64_t v1972 = ~(unint64_t)v1971;
      uint64_t v2025 = ~v2024;
      unint64_t v1890 = v68;
      uint64_t v1976 = ~v2058;
      uint64_t v1964 = ~v1963;
      uint64_t v1886 = ~v2046;
      if (v2012 == v1928)
      {
        int v126 = (*(uint64_t (**)(unsigned __int8 *))(v1960 + 48))(a2);
        uint64_t v87 = ~v2046;
        size_t v127 = v2016;
        uint64_t v78 = a1;
        size_t v128 = __n;
LABEL_1019:
        if (v126)
        {
LABEL_1020:
          size_t v775 = v2015;
          memcpy(v78, a2, v2015);
          unsigned int v776 = v1935;
LABEL_1021:
          size_t v777 = v128;
          goto LABEL_1056;
        }
        unint64_t v408 = (unint64_t)&a2[v1950] & v87;
        unint64_t v409 = (v408 + v2070 + v2008) & v88;
LABEL_1023:
        size_t v778 = v127;
        v779 = *(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v1960 + 16);
        uint64_t v780 = v87;
        v779(v78, a2, AssociatedTypeWitness);
        v779((unsigned char *)((unint64_t)&v78[v1950] & v780), (unsigned __int8 *)v408, AssociatedTypeWitness);
        unint64_t v781 = (((unint64_t)&v78[v1950] & v780) + v2070 + v2008) & v88;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v1941 + 16))(v781, v409, v1940);
        v782 = (void *)((v1948 + v781) & 0xFFFFFFFFFFFFFFF8);
        v783 = (void *)((v1948 + v409) & 0xFFFFFFFFFFFFFFF8);
        void *v782 = *v783;
        unint64_t v784 = ((unint64_t)v782 + v1936) & v1964;
        unint64_t v785 = ((unint64_t)v783 + v1936) & v1964;
        v786 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1938 + 16);
        swift_bridgeObjectRetain();
        v786(v784, v785, v1937);
        v787 = (void *)((v1932 + v785) & 0xFFFFFFFFFFFFFFF8);
        v788 = (void *)((v1932 + v784) & 0xFFFFFFFFFFFFFFF8);
        void *v788 = *v787;
        v789 = (void *)(((unint64_t)v788 + 15) & 0xFFFFFFFFFFFFFFF8);
        v790 = (void *)(((unint64_t)v787 + 15) & 0xFFFFFFFFFFFFFFF8);
        void *v789 = *v790;
        v789[1] = v790[1];
        v791 = (void *)(v778 + v781);
        void *v791 = *(void *)(v778 + v409);
        v791[1] = *(void *)(v778 + v409 + 8);
        unint64_t v792 = (v2018 + v778 + v781) & v2025;
        uint64_t v793 = (v2018 + v778 + v409) & v2025;
        *(unsigned char *)unint64_t v792 = *(unsigned char *)v793;
        uint64_t v794 = v792 | 4;
        int v795 = *(_DWORD *)(v793 | 4);
        *(unsigned char *)(v794 + 4) = *(unsigned char *)((v793 | 4) + 4);
        *(_DWORD *)uint64_t v794 = v795;
        *(_WORD *)(v792 + 10) = *(_WORD *)(v793 + 0xA);
        unint64_t v2078 = v792;
        unint64_t v796 = (v1956 + v792) & v1972;
        uint64_t v2047 = v793;
        unint64_t v797 = (v1956 + v793) & v1972;
        v798 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1954 + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v798(v796, v797, v1957);
        unint64_t v799 = (v1953 + v796) & v1972;
        unint64_t v800 = (v1953 + v797) & v1972;
        v798(v799, v800, v1957);
        v801 = (unsigned char *)(v799 + v1958);
        unsigned char *v801 = *(unsigned char *)(v800 + v1958);
        v801[1] = *(unsigned char *)(v800 + v1958 + 1);
        v801[2] = *(unsigned char *)(v800 + v1958 + 2);
        v801[3] = *(unsigned char *)(v800 + v1958 + 3);
        v801[4] = *(unsigned char *)(v800 + v1958 + 4);
        unint64_t v802 = (v799 + v1958 + 12) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v803 = (v800 + v1958 + 12) & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v802 = *(void *)v803;
        *(void *)(v802 + 8) = *(void *)(v803 + 8);
        *(unsigned char *)(v802 + 16) = *(unsigned char *)(v803 + 16);
        *(unsigned char *)(v802 + 17) = *(unsigned char *)(v803 + 17);
        *(unsigned char *)(v802 + 18) = *(unsigned char *)(v803 + 18);
        *(unsigned char *)(v802 + 19) = *(unsigned char *)(v803 + 19);
        unint64_t v804 = (v802 + 27) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v805 = (v803 + 27) & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v804 = *(void *)v805;
        *(unsigned char *)(v804 + 8) = *(unsigned char *)(v805 + 8);
        *(unsigned char *)(v804 + 9) = *(unsigned char *)(v805 + 9);
        *(unsigned char *)(v804 + 10) = *(unsigned char *)(v805 + 10);
        *(unsigned char *)(v804 + 11) = *(unsigned char *)(v805 + 11);
        *(unsigned char *)(v804 + 12) = *(unsigned char *)(v805 + 12);
        v806 = (void *)((v803 + 47) & 0xFFFFFFFFFFFFFFF8);
        v807 = (void *)((v802 + 47) & 0xFFFFFFFFFFFFFFF8);
        void *v807 = *v806;
        unint64_t v808 = ((unint64_t)v807 + 15) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v809 = ((unint64_t)v806 + 15) & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v808 = *(void *)v809;
        *(unsigned char *)(v808 + 8) = *(unsigned char *)(v809 + 8);
        *(unsigned char *)(v808 + 9) = *(unsigned char *)(v809 + 9);
        v810 = (void *)((v1951 + v808) & v1972);
        v811 = (const void *)((v1951 + v809) & v1972);
        v812 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v1954 + 48);
        swift_bridgeObjectRetain();
        if (v812(v811, 1, v1957))
        {
          memcpy(v810, v811, __n);
        }
        else
        {
          v798((unint64_t)v810, (unint64_t)v811, v1957);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v1954 + 56))(v810, 0, 1, v1957);
        }
        v813 = (void *)(((unint64_t)v810 + v1952) & 0xFFFFFFFFFFFFFFF8);
        v814 = (void *)(((unint64_t)v811 + v1952) & 0xFFFFFFFFFFFFFFF8);
        void *v813 = *v814;
        unint64_t v815 = ((unint64_t)v813 + 15) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v816 = ((unint64_t)v814 + 15) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v817 = *(void *)v816;
        *(unsigned char *)(v815 + 8) = *(unsigned char *)(v816 + 8);
        *(void *)unint64_t v815 = v817;
        v818 = (void *)(((unint64_t)v813 + 31) & 0xFFFFFFFFFFFFFFF8);
        v819 = (void *)(((unint64_t)v814 + 31) & 0xFFFFFFFFFFFFFFF8);
        void *v818 = *v819;
        unint64_t v820 = ((unint64_t)v818 + 15) & 0xFFFFFFFFFFFFFFF8;
        v821 = (uint64_t *)(((unint64_t)v819 + 15) & 0xFFFFFFFFFFFFFFF8);
        unint64_t v822 = v821[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if ((v822 & 0x3000000000000000) != 0)
        {
          *(_OWORD *)unint64_t v820 = *(_OWORD *)v821;
        }
        else
        {
          uint64_t v823 = *v821;
          sub_10001EBB0(*v821, v822);
          *(void *)unint64_t v820 = v823;
          *(void *)(v820 + 8) = v822;
        }
        size_t v128 = __n;
        unint64_t v824 = (v820 + 19) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v825 = ((unint64_t)v821 + 19) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v826 = *(void *)v825;
        *(unsigned char *)(v824 + 8) = *(unsigned char *)(v825 + 8);
        *(void *)unint64_t v824 = v826;
        *(unsigned char *)(v824 + 9) = *(unsigned char *)(v825 + 9);
        unint64_t v827 = (v824 + 13) & 0xFFFFFFFFFFFFFFFCLL;
        unint64_t v828 = (v825 + 13) & 0xFFFFFFFFFFFFFFFCLL;
        int v829 = *(_DWORD *)v828;
        *(unsigned char *)(v827 + 4) = *(unsigned char *)(v828 + 4);
        *(_DWORD *)unint64_t v827 = v829;
        v830 = (void *)((v824 + 25) & 0xFFFFFFFFFFFFFFF8);
        v831 = (void *)((v825 + 25) & 0xFFFFFFFFFFFFFFF8);
        void *v830 = *v831;
        v830[1] = v831[1];
        unint64_t v832 = v1989 + v2078;
        v833 = (long long *)(v1989 + v2047);
        unint64_t v834 = *(void *)(v1989 + v2047 + 16);
        if (v834 >= 0xFFFFFFFF) {
          LODWORD(v834) = -1;
        }
        int v835 = v834 - 1;
        swift_bridgeObjectRetain();
        if (v835 < 0)
        {
          *(void *)unint64_t v832 = *(void *)v833;
          *(unsigned char *)(v832 + 8) = *((unsigned char *)v833 + 8);
          *(unsigned char *)(v832 + 9) = *((unsigned char *)v833 + 9);
          uint64_t v848 = *((void *)v833 + 2);
          swift_errorRetain();
          *(void *)(v832 + 16) = v848;
          uint64_t v849 = *((void *)v833 + 3);
          swift_errorRetain();
          *(void *)(v832 + 24) = v849;
          *(unsigned char *)(v832 + 32) = *((unsigned char *)v833 + 32);
          *(unsigned char *)(v832 + 33) = *((unsigned char *)v833 + 33);
          *(unsigned char *)(v832 + 34) = *((unsigned char *)v833 + 34);
          *(void *)(v832 + 40) = *((void *)v833 + 5);
          *(void *)(v832 + 48) = *((void *)v833 + 6);
          *(void *)(v832 + 56) = *((void *)v833 + 7);
          *(void *)(v832 + 64) = *((void *)v833 + 8);
          *(unsigned char *)(v832 + 72) = *((unsigned char *)v833 + 72);
          *(void *)(v832 + 80) = *((void *)v833 + 10);
          *(void *)(v832 + 88) = *((void *)v833 + 11);
          v2079 = (void *)*((void *)v833 + 12);
          *(void *)(v832 + 96) = v2079;
          *(unsigned char *)(v832 + 104) = *((unsigned char *)v833 + 104);
          *(unsigned char *)(v832 + 105) = *((unsigned char *)v833 + 105);
          *(void *)(v832 + 112) = *((void *)v833 + 14);
          *(void *)(v832 + 120) = *((void *)v833 + 15);
          *(void *)(v832 + 128) = *((void *)v833 + 16);
          *(void *)(v832 + 136) = *((void *)v833 + 17);
          *(void *)(v832 + 144) = *((void *)v833 + 18);
          *(void *)(v832 + 152) = *((void *)v833 + 19);
          *(void *)(v832 + 160) = *((void *)v833 + 20);
          *(void *)(v832 + 168) = *((void *)v833 + 21);
          *(unsigned char *)(v832 + 176) = *((unsigned char *)v833 + 176);
          *(void *)(v832 + 184) = *((void *)v833 + 23);
          uint64_t v850 = *((void *)v833 + 24);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v851 = v2079;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v850)
          {
            *(void *)(v832 + 192) = v850;
            *(void *)(v832 + 200) = *((void *)v833 + 25);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            *(_OWORD *)(v832 + 192) = v833[12];
          }
          uint64_t v78 = a1;
          size_t v128 = __n;
          uint64_t v86 = v2058;
          uint64_t v88 = ~v2008;
          *(void *)(v832 + 208) = *((void *)v833 + 26);
          *(void *)(v832 + 216) = *((void *)v833 + 27);
          *(void *)(v832 + 224) = *((void *)v833 + 28);
          *(void *)(v832 + 232) = *((void *)v833 + 29);
          *(void *)(v832 + 240) = *((void *)v833 + 30);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v836 = *v833;
          long long v837 = v833[1];
          long long v838 = v833[3];
          *(_OWORD *)(v832 + 32) = v833[2];
          *(_OWORD *)(v832 + 48) = v838;
          *(_OWORD *)unint64_t v832 = v836;
          *(_OWORD *)(v832 + 16) = v837;
          long long v839 = v833[4];
          long long v840 = v833[5];
          long long v841 = v833[7];
          *(_OWORD *)(v832 + 96) = v833[6];
          *(_OWORD *)(v832 + 112) = v841;
          *(_OWORD *)(v832 + 64) = v839;
          *(_OWORD *)(v832 + 80) = v840;
          long long v842 = v833[8];
          long long v843 = v833[9];
          long long v844 = v833[11];
          *(_OWORD *)(v832 + 160) = v833[10];
          *(_OWORD *)(v832 + 176) = v844;
          *(_OWORD *)(v832 + 128) = v842;
          *(_OWORD *)(v832 + 144) = v843;
          long long v845 = v833[12];
          long long v846 = v833[13];
          long long v847 = v833[14];
          *(void *)(v832 + 240) = *((void *)v833 + 30);
          *(_OWORD *)(v832 + 208) = v846;
          *(_OWORD *)(v832 + 224) = v847;
          *(_OWORD *)(v832 + 192) = v845;
          uint64_t v86 = v2058;
          uint64_t v88 = ~v2008;
        }
        v929 = (_OWORD *)((v832 + 255) & 0xFFFFFFFFFFFFFFF8);
        v930 = (long long *)(((unint64_t)v833 + 255) & 0xFFFFFFFFFFFFFFF8);
        long long v931 = *v930;
        *(_OWORD *)((char *)v929 + 9) = *(long long *)((char *)v930 + 9);
        _OWORD *v929 = v931;
        unint64_t v932 = (v832 + 287) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v933 = ((unint64_t)v833 + 287) & 0xFFFFFFFFFFFFFFF8;
        long long v934 = *(_OWORD *)v933;
        *(unsigned char *)(v932 + 16) = *(unsigned char *)(v933 + 16);
        *(_OWORD *)unint64_t v932 = v934;
        v935 = (void *)((v832 + 311) & 0xFFFFFFFFFFFFFFF8);
        unint64_t v936 = ((unint64_t)v833 + 311) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v937 = *(void *)v936;
        v936 += 15;
        void *v935 = v937;
        v938 = (void *)(((unint64_t)v935 + 15) & 0xFFFFFFFFFFFFFFF8);
        uint64_t v939 = *(void *)(v936 & 0xFFFFFFFFFFFFFFF8);
        unint64_t v940 = *(void *)((v936 & 0xFFFFFFFFFFFFFFF8) + 8);
        sub_10018B584(v939, v940);
        void *v938 = v939;
        v938[1] = v940;
        size_t v777 = v1958;
        unsigned int v776 = v1935;
        size_t v775 = v2015;
        size_t v127 = v2016;
        if (!v1935) {
          goto LABEL_1021;
        }
LABEL_1056:
        uint64_t v941 = v88;
        unint64_t v942 = v1934 + 7;
        unint64_t v943 = ((((v1929
                 + 327
                 + ((((((((((v1934 + 7 + v777) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                     + 19) & 0xFFFFFFFFFFFFFFF8)
                   + 25) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFF8)
               + 15) & 0xFFFFFFFFFFFFFFF8)
             + 16;
        v2080 = (void *)((unint64_t)&v78[v86 + v943] & v1976);
        v944 = (const void *)((unint64_t)&a2[v86 + v943] & v1976);
        unint64_t v2050 = v1929 + 327;
        if (v2012 == v1928)
        {
          int v945 = (*(uint64_t (**)(const void *, void, uint64_t))(v1960 + 48))(v944, v2012, AssociatedTypeWitness);
          uint64_t v946 = v1886;
LABEL_1071:
          if (v945)
          {
LABEL_1072:
            v955 = v2080;
            memcpy(v2080, v944, v775);
            unint64_t v956 = v2002 + 2;
            unint64_t v957 = ((v2003 + 1) & ~v2003) + v2020;
LABEL_1073:
            size_t v958 = v128;
LABEL_1124:
            unint64_t v1153 = ((((v2050
                      + ((((((((((v942 + v958) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                          + 19) & 0xFFFFFFFFFFFFFFF8)
                        + 25) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFF8)
                    + 15) & 0xFFFFFFFFFFFFFFF8)
                  + 16;
            *(void *)(((unint64_t)v955 + v1153) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v944
                                                                                              + v1153) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1154 = ((v1925
                    + ((v86
                      + ((((v2050
                          + ((((((((((v942 + v128) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                              + 19) & 0xFFFFFFFFFFFFFFF8)
                            + 25) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFF8)
                        + 15) & 0xFFFFFFFFFFFFFFF8)
                      + 16) & v1976)) & 0xFFFFFFFFFFFFFFF8)
                  + 8;
            if (v1154 <= v2009) {
              unint64_t v1154 = v2009;
            }
            if (v1923 > v1154) {
              unint64_t v1154 = v1923;
            }
            if (v775 > v1154) {
              unint64_t v1154 = v775;
            }
            if (v2040 > v1154) {
              unint64_t v1154 = v2040;
            }
            if (v2020 > v1154) {
              unint64_t v1154 = v2020;
            }
            if (v1922 > v1154) {
              unint64_t v1154 = v2011 + 2;
            }
            if (v1924 > v1154) {
              unint64_t v1154 = ((v2002 + 9) & 0xFFFFFFFFFFFFFFF8) + 8;
            }
            if (v956 > v1154) {
              unint64_t v1154 = v956;
            }
            if (v1999 > v1154) {
              unint64_t v1154 = (v2002 & 0xFFFFFFFFFFFFFFF8) + 16;
            }
            if (v1154 <= v2020) {
              unint64_t v1154 = v2020;
            }
            if (v1154 <= v2010) {
              unint64_t v1154 = v2010;
            }
            if (v1154 <= v957) {
              unint64_t v1154 = v957;
            }
            if (v1154 <= v2020) {
              unint64_t v1154 = v2020;
            }
            if (v1154 <= v2001) {
              unint64_t v1154 = v2001;
            }
            if (v1154 <= v956) {
              unint64_t v1154 = v956;
            }
            if (v1154 <= v2020) {
              unint64_t v1154 = v2020;
            }
            if (v1154 <= v2011) {
              unint64_t v1154 = v2011;
            }
            if (v1154 <= v2020) {
              unint64_t v1154 = v2020;
            }
            if (v1154 <= v1890) {
              unint64_t v1154 = v1890;
            }
            if (v1154 <= v956) {
              unint64_t v1154 = v956;
            }
            if (v1154 <= v2020) {
              unint64_t v1154 = v2020;
            }
            if (v1154 <= 0x38) {
              unint64_t v1154 = 56;
            }
            if (v1154 > 3) {
              goto LABEL_1169;
            }
            unsigned int v1155 = ((1 << (8 * v1154)) + 5) >> (8 * v1154);
            if (v1155 > 0xFFD6)
            {
              *(_DWORD *)&v78[v1154] = 5;
              return v78;
            }
            if (v1155 <= 0xD6) {
LABEL_1169:
            }
              v78[v1154] = 5;
            else {
              *(_WORD *)&v78[v1154] = 5;
            }
            return v78;
          }
          unint64_t v947 = ((unint64_t)v944 + v1950) & v946;
          unint64_t v948 = (v1917 + v947) & v941;
LABEL_1075:
          v959 = *(void (**)(void *))(v1960 + 16);
          v2022 = v944;
          uint64_t v960 = v946;
          v959(v2080);
          unint64_t v961 = ((unint64_t)v2080 + v1950) & v960;
          ((void (*)(unint64_t, unint64_t, uint64_t))v959)(v961, v947, AssociatedTypeWitness);
          unint64_t v962 = (v1917 + v961) & v941;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v1941 + 16))(v962, v948, v1940);
          v963 = (void *)((v1948 + v962) & 0xFFFFFFFFFFFFFFF8);
          v964 = (void *)((v1948 + v948) & 0xFFFFFFFFFFFFFFF8);
          void *v963 = *v964;
          unint64_t v965 = ((unint64_t)v963 + v1936) & v1964;
          unint64_t v966 = ((unint64_t)v964 + v1936) & v1964;
          v967 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1938 + 16);
          swift_bridgeObjectRetain();
          v967(v965, v966, v1937);
          v968 = (void *)((v1932 + v966) & 0xFFFFFFFFFFFFFFF8);
          v969 = (void *)((v1932 + v965) & 0xFFFFFFFFFFFFFFF8);
          void *v969 = *v968;
          v970 = (void *)(((unint64_t)v969 + 15) & 0xFFFFFFFFFFFFFFF8);
          v971 = (void *)(((unint64_t)v968 + 15) & 0xFFFFFFFFFFFFFFF8);
          void *v970 = *v971;
          v970[1] = v971[1];
          v972 = (void *)(v962 + v127);
          void *v972 = *(void *)(v948 + v127);
          v972[1] = *(void *)(v948 + v127 + 8);
          size_t v973 = (v2018 + v962 + v127) & v2025;
          size_t v974 = (v2018 + v948 + v127) & v2025;
          *(unsigned char *)size_t v973 = *(unsigned char *)v974;
          uint64_t v975 = v973 | 4;
          int v976 = *(_DWORD *)(v974 | 4);
          *(unsigned char *)(v975 + 4) = *(unsigned char *)((v974 | 4) + 4);
          *(_DWORD *)uint64_t v975 = v976;
          *(_WORD *)(v973 + 10) = *(_WORD *)(v974 + 0xA);
          size_t v2029 = v973;
          unint64_t v977 = (v1956 + v973) & v1972;
          size_t v2019 = v974;
          unint64_t v978 = (v1956 + v974) & v1972;
          v979 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1954 + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v979(v977, v978, v1957);
          unint64_t v980 = (v1953 + v977) & v1972;
          unint64_t v981 = (v1953 + v978) & v1972;
          v979(v980, v981, v1957);
          v982 = (unsigned char *)(v980 + v1958);
          unsigned char *v982 = *(unsigned char *)(v981 + v1958);
          v982[1] = *(unsigned char *)(v981 + v1958 + 1);
          v982[2] = *(unsigned char *)(v981 + v1958 + 2);
          v982[3] = *(unsigned char *)(v981 + v1958 + 3);
          v982[4] = *(unsigned char *)(v981 + v1958 + 4);
          unint64_t v983 = (v980 + v1958 + 12) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v984 = (v981 + v1958 + 12) & 0xFFFFFFFFFFFFFFF8;
          *(void *)unint64_t v983 = *(void *)v984;
          *(void *)(v983 + 8) = *(void *)(v984 + 8);
          *(unsigned char *)(v983 + 16) = *(unsigned char *)(v984 + 16);
          *(unsigned char *)(v983 + 17) = *(unsigned char *)(v984 + 17);
          *(unsigned char *)(v983 + 18) = *(unsigned char *)(v984 + 18);
          *(unsigned char *)(v983 + 19) = *(unsigned char *)(v984 + 19);
          unint64_t v985 = (v983 + 27) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v986 = (v984 + 27) & 0xFFFFFFFFFFFFFFF8;
          *(void *)unint64_t v985 = *(void *)v986;
          *(unsigned char *)(v985 + 8) = *(unsigned char *)(v986 + 8);
          *(unsigned char *)(v985 + 9) = *(unsigned char *)(v986 + 9);
          *(unsigned char *)(v985 + 10) = *(unsigned char *)(v986 + 10);
          *(unsigned char *)(v985 + 11) = *(unsigned char *)(v986 + 11);
          *(unsigned char *)(v985 + 12) = *(unsigned char *)(v986 + 12);
          v987 = (void *)((v984 + 47) & 0xFFFFFFFFFFFFFFF8);
          v988 = (void *)((v983 + 47) & 0xFFFFFFFFFFFFFFF8);
          void *v988 = *v987;
          unint64_t v989 = ((unint64_t)v988 + 15) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v990 = ((unint64_t)v987 + 15) & 0xFFFFFFFFFFFFFFF8;
          *(void *)unint64_t v989 = *(void *)v990;
          *(unsigned char *)(v989 + 8) = *(unsigned char *)(v990 + 8);
          *(unsigned char *)(v989 + 9) = *(unsigned char *)(v990 + 9);
          v991 = (void *)((v1951 + v989) & v1972);
          v992 = (const void *)((v1951 + v990) & v1972);
          v993 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v1954 + 48);
          swift_bridgeObjectRetain();
          if (v993(v992, 1, v1957))
          {
            memcpy(v991, v992, __n);
          }
          else
          {
            v979((unint64_t)v991, (unint64_t)v992, v1957);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v1954 + 56))(v991, 0, 1, v1957);
          }
          v994 = (void *)(((unint64_t)v991 + v1952) & 0xFFFFFFFFFFFFFFF8);
          v995 = (void *)(((unint64_t)v992 + v1952) & 0xFFFFFFFFFFFFFFF8);
          void *v994 = *v995;
          unint64_t v996 = ((unint64_t)v994 + 15) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v997 = ((unint64_t)v995 + 15) & 0xFFFFFFFFFFFFFFF8;
          uint64_t v998 = *(void *)v997;
          *(unsigned char *)(v996 + 8) = *(unsigned char *)(v997 + 8);
          *(void *)unint64_t v996 = v998;
          v999 = (void *)(((unint64_t)v994 + 31) & 0xFFFFFFFFFFFFFFF8);
          v1000 = (void *)(((unint64_t)v995 + 31) & 0xFFFFFFFFFFFFFFF8);
          void *v999 = *v1000;
          unint64_t v1001 = ((unint64_t)v999 + 15) & 0xFFFFFFFFFFFFFFF8;
          v1002 = (uint64_t *)(((unint64_t)v1000 + 15) & 0xFFFFFFFFFFFFFFF8);
          unint64_t v1003 = v1002[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if ((v1003 & 0x3000000000000000) != 0)
          {
            *(_OWORD *)unint64_t v1001 = *(_OWORD *)v1002;
          }
          else
          {
            uint64_t v1004 = *v1002;
            sub_10001EBB0(*v1002, v1003);
            *(void *)unint64_t v1001 = v1004;
            *(void *)(v1001 + 8) = v1003;
          }
          unint64_t v1005 = (v1001 + 19) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v1006 = ((unint64_t)v1002 + 19) & 0xFFFFFFFFFFFFFFF8;
          uint64_t v1007 = *(void *)v1006;
          *(unsigned char *)(v1005 + 8) = *(unsigned char *)(v1006 + 8);
          *(void *)unint64_t v1005 = v1007;
          *(unsigned char *)(v1005 + 9) = *(unsigned char *)(v1006 + 9);
          unint64_t v1008 = (v1005 + 13) & 0xFFFFFFFFFFFFFFFCLL;
          unint64_t v1009 = (v1006 + 13) & 0xFFFFFFFFFFFFFFFCLL;
          int v1010 = *(_DWORD *)v1009;
          *(unsigned char *)(v1008 + 4) = *(unsigned char *)(v1009 + 4);
          *(_DWORD *)unint64_t v1008 = v1010;
          v1011 = (void *)((v1005 + 25) & 0xFFFFFFFFFFFFFFF8);
          v1012 = (void *)((v1006 + 25) & 0xFFFFFFFFFFFFFFF8);
          void *v1011 = *v1012;
          v1011[1] = v1012[1];
          size_t v1013 = v2029 + v1989;
          v1014 = (long long *)(v2019 + v1989);
          unint64_t v1015 = *(void *)(v2019 + v1989 + 16);
          if (v1015 >= 0xFFFFFFFF) {
            LODWORD(v1015) = -1;
          }
          int v1016 = v1015 - 1;
          swift_bridgeObjectRetain();
          uint64_t v86 = v2058;
          if (v1016 < 0)
          {
            *(void *)size_t v1013 = *(void *)v1014;
            *(unsigned char *)(v1013 + 8) = *((unsigned char *)v1014 + 8);
            *(unsigned char *)(v1013 + 9) = *((unsigned char *)v1014 + 9);
            uint64_t v1029 = *((void *)v1014 + 2);
            swift_errorRetain();
            *(void *)(v1013 + 16) = v1029;
            uint64_t v1030 = *((void *)v1014 + 3);
            swift_errorRetain();
            *(void *)(v1013 + 24) = v1030;
            *(unsigned char *)(v1013 + 32) = *((unsigned char *)v1014 + 32);
            *(unsigned char *)(v1013 + 33) = *((unsigned char *)v1014 + 33);
            *(unsigned char *)(v1013 + 34) = *((unsigned char *)v1014 + 34);
            *(void *)(v1013 + 40) = *((void *)v1014 + 5);
            *(void *)(v1013 + 48) = *((void *)v1014 + 6);
            *(void *)(v1013 + 56) = *((void *)v1014 + 7);
            *(void *)(v1013 + 64) = *((void *)v1014 + 8);
            *(unsigned char *)(v1013 + 72) = *((unsigned char *)v1014 + 72);
            *(void *)(v1013 + 80) = *((void *)v1014 + 10);
            *(void *)(v1013 + 88) = *((void *)v1014 + 11);
            v2030 = (void *)*((void *)v1014 + 12);
            *(void *)(v1013 + 96) = v2030;
            *(unsigned char *)(v1013 + 104) = *((unsigned char *)v1014 + 104);
            *(unsigned char *)(v1013 + 105) = *((unsigned char *)v1014 + 105);
            *(void *)(v1013 + 112) = *((void *)v1014 + 14);
            *(void *)(v1013 + 120) = *((void *)v1014 + 15);
            *(void *)(v1013 + 128) = *((void *)v1014 + 16);
            *(void *)(v1013 + 136) = *((void *)v1014 + 17);
            *(void *)(v1013 + 144) = *((void *)v1014 + 18);
            *(void *)(v1013 + 152) = *((void *)v1014 + 19);
            *(void *)(v1013 + 160) = *((void *)v1014 + 20);
            *(void *)(v1013 + 168) = *((void *)v1014 + 21);
            *(unsigned char *)(v1013 + 176) = *((unsigned char *)v1014 + 176);
            *(void *)(v1013 + 184) = *((void *)v1014 + 23);
            uint64_t v1031 = *((void *)v1014 + 24);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            id v1032 = v2030;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (v1031)
            {
              *(void *)(v1013 + 192) = v1031;
              *(void *)(v1013 + 200) = *((void *)v1014 + 25);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }
            else
            {
              *(_OWORD *)(v1013 + 192) = v1014[12];
            }
            uint64_t v78 = a1;
            uint64_t v86 = v2058;
            unint64_t v942 = v1934 + 7;
            unint64_t v956 = v2002 + 2;
            unint64_t v957 = ((v2003 + 1) & ~v2003) + v2020;
            *(void *)(v1013 + 208) = *((void *)v1014 + 26);
            *(void *)(v1013 + 216) = *((void *)v1014 + 27);
            *(void *)(v1013 + 224) = *((void *)v1014 + 28);
            *(void *)(v1013 + 232) = *((void *)v1014 + 29);
            *(void *)(v1013 + 240) = *((void *)v1014 + 30);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v1017 = *v1014;
            long long v1018 = v1014[1];
            long long v1019 = v1014[3];
            *(_OWORD *)(v1013 + 32) = v1014[2];
            *(_OWORD *)(v1013 + 48) = v1019;
            *(_OWORD *)size_t v1013 = v1017;
            *(_OWORD *)(v1013 + 16) = v1018;
            long long v1020 = v1014[4];
            long long v1021 = v1014[5];
            long long v1022 = v1014[7];
            *(_OWORD *)(v1013 + 96) = v1014[6];
            *(_OWORD *)(v1013 + 112) = v1022;
            *(_OWORD *)(v1013 + 64) = v1020;
            *(_OWORD *)(v1013 + 80) = v1021;
            long long v1023 = v1014[8];
            long long v1024 = v1014[9];
            long long v1025 = v1014[11];
            *(_OWORD *)(v1013 + 160) = v1014[10];
            *(_OWORD *)(v1013 + 176) = v1025;
            *(_OWORD *)(v1013 + 128) = v1023;
            *(_OWORD *)(v1013 + 144) = v1024;
            long long v1026 = v1014[12];
            long long v1027 = v1014[13];
            long long v1028 = v1014[14];
            *(void *)(v1013 + 240) = *((void *)v1014 + 30);
            *(_OWORD *)(v1013 + 208) = v1027;
            *(_OWORD *)(v1013 + 224) = v1028;
            *(_OWORD *)(v1013 + 192) = v1026;
            unint64_t v956 = v2002 + 2;
            unint64_t v957 = ((v2003 + 1) & ~v2003) + v2020;
          }
          v1141 = (_OWORD *)((v1013 + 255) & 0xFFFFFFFFFFFFFFF8);
          v1142 = (long long *)(((unint64_t)v1014 + 255) & 0xFFFFFFFFFFFFFFF8);
          long long v1143 = *v1142;
          *(_OWORD *)((char *)v1141 + 9) = *(long long *)((char *)v1142 + 9);
          _OWORD *v1141 = v1143;
          unint64_t v1144 = (v1013 + 287) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v1145 = ((unint64_t)v1014 + 287) & 0xFFFFFFFFFFFFFFF8;
          long long v1146 = *(_OWORD *)v1145;
          *(unsigned char *)(v1144 + 16) = *(unsigned char *)(v1145 + 16);
          *(_OWORD *)unint64_t v1144 = v1146;
          v1147 = (void *)((v1013 + 311) & 0xFFFFFFFFFFFFFFF8);
          unint64_t v1148 = ((unint64_t)v1014 + 311) & 0xFFFFFFFFFFFFFFF8;
          uint64_t v1149 = *(void *)v1148;
          v1148 += 15;
          void *v1147 = v1149;
          v1150 = (void *)(((unint64_t)v1147 + 15) & 0xFFFFFFFFFFFFFFF8);
          uint64_t v1151 = *(void *)(v1148 & 0xFFFFFFFFFFFFFFF8);
          unint64_t v1152 = *(void *)((v1148 & 0xFFFFFFFFFFFFFFF8) + 8);
          sub_10018B584(v1151, v1152);
          void *v1150 = v1151;
          v1150[1] = v1152;
          size_t v958 = v1958;
          size_t v775 = v2015;
          size_t v128 = __n;
          v955 = v2080;
          v944 = v2022;
          if (v1935) {
            goto LABEL_1124;
          }
          goto LABEL_1073;
        }
        uint64_t v946 = v1886;
        unint64_t v947 = ((unint64_t)v944 + v1950) & v1886;
        unint64_t v948 = (v1917 + v947) & v941;
        if (v1930 == v1928)
        {
          if (v1919 == v1930)
          {
            v949 = *(uint64_t (**)(unint64_t))(v1941 + 48);
            unint64_t v950 = (v1917 + v947) & v941;
LABEL_1070:
            int v945 = v949(v950);
            uint64_t v946 = v1886;
            goto LABEL_1071;
          }
          v953 = (unint64_t *)((v1948 + v948) & 0xFFFFFFFFFFFFFFF8);
          if (v1909 > 0x7FFFFFFE)
          {
            unint64_t v950 = ((unint64_t)v953 + v1936) & v1964;
            v949 = *(uint64_t (**)(unint64_t))(v1938 + 48);
            goto LABEL_1070;
          }
          unint64_t v954 = *v953;
        }
        else
        {
          unint64_t v951 = v948 + v127;
          if ((v1906 & 0x80000000) == 0)
          {
            unint64_t v952 = *(void *)(v951 + 8);
            if (v952 >= 0xFFFFFFFF) {
              LODWORD(v952) = -1;
            }
            int v945 = v952 + 1;
            goto LABEL_1071;
          }
          unint64_t v950 = (v1956 + ((v2018 + v951) & v2025)) & v1972;
          if (v776 > 0x7FFFFFFD)
          {
            v949 = *(uint64_t (**)(unint64_t))(v1954 + 48);
            goto LABEL_1070;
          }
          unint64_t v954 = *(void *)(((v1903 + ((v1953 + v950) & v1972)) & 0xFFFFFFFFFFFFFFF8) + 8);
        }
        if (v954 >= 0xFFFFFFFF) {
          LODWORD(v954) = -1;
        }
        if ((v954 + 1) >= 2) {
          goto LABEL_1072;
        }
        goto LABEL_1075;
      }
      unint64_t v408 = (unint64_t)&a2[v1950] & v87;
      unint64_t v409 = (v408 + v2070 + v2008) & v88;
      size_t v127 = v2016;
      if (v1930 == v1928)
      {
        uint64_t v78 = a1;
        if (v1919 == v1930)
        {
          int v126 = (*(uint64_t (**)(unint64_t))(v1941 + 48))((v408 + v2070 + v2008) & v88);
          uint64_t v87 = ~v2046;
          size_t v128 = __n;
          goto LABEL_1019;
        }
        v632 = (unint64_t *)((v1948 + v409) & 0xFFFFFFFFFFFFFFF8);
        size_t v128 = __n;
        if (v1909 <= 0x7FFFFFFE)
        {
          unint64_t v633 = *v632;
          goto LABEL_1269;
        }
        unint64_t v772 = ((unint64_t)v632 + v1936) & v89;
        v773 = *(uint64_t (**)(unint64_t))(v1938 + 48);
      }
      else
      {
        size_t v510 = v2016 + v409;
        uint64_t v78 = a1;
        if ((v1906 & 0x80000000) == 0)
        {
          unint64_t v511 = *(void *)(v510 + 8);
          if (v511 >= 0xFFFFFFFF) {
            LODWORD(v511) = -1;
          }
          int v126 = v511 + 1;
          size_t v128 = __n;
          goto LABEL_1019;
        }
        unint64_t v772 = (v1956 + ((v2018 + v510) & v2025)) & v1972;
        size_t v128 = __n;
        if (v1935 <= 0x7FFFFFFD)
        {
          unint64_t v633 = *(void *)(((v1903 + ((v1953 + v772) & v1972)) & 0xFFFFFFFFFFFFFFF8) + 8);
LABEL_1269:
          if (v633 >= 0xFFFFFFFF) {
            LODWORD(v633) = -1;
          }
          if ((v633 + 1) >= 2) {
            goto LABEL_1020;
          }
          goto LABEL_1023;
        }
        v773 = *(uint64_t (**)(unint64_t))(v1954 + 48);
      }
      int v126 = v773(v772);
      uint64_t v87 = ~v2046;
      goto LABEL_1019;
    case 6u:
      uint64_t v2026 = ~v2024;
      size_t v2041 = v36;
      unint64_t v2071 = ((((v1933 + ((v32 + 8 + (v1947 & 0xFFFFFFFFFFFFFFF8)) & ~v32)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
            + 16;
      uint64_t v129 = v1921;
      unint64_t v1973 = ~(unint64_t)v1971;
      uint64_t v1990 = ~v32;
      unint64_t v1888 = v84;
      unint64_t v1891 = v68;
      uint64_t v1978 = ~v33;
      uint64_t v1885 = ~v2007;
      if (v1921 == v1927)
      {
        uint64_t v130 = v2021;
        unint64_t v131 = v84;
        uint64_t v132 = v1961;
        int v133 = (*(uint64_t (**)(unsigned __int8 *, void, uint64_t))(v2021 + 48))(a2, v1921, v1961);
        unint64_t v84 = v131;
LABEL_1037:
        if (v133)
        {
LABEL_1038:
          uint64_t v78 = a1;
          memcpy(a1, a2, v2041);
LABEL_1039:
          size_t v852 = __n;
          goto LABEL_1090;
        }
        unint64_t v410 = (unint64_t)&a2[v1949] & v84;
        unint64_t v411 = (v410 + v2013 + v33) & v1978;
LABEL_1041:
        uint64_t v853 = v130;
        uint64_t v854 = v132;
        v855 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v853 + 16);
        unint64_t v856 = v84;
        v855(a1, a2, v854);
        unint64_t v857 = ((unint64_t)a1 + v1949) & v856;
        v855((void *)v857, (unsigned __int8 *)v410, v854);
        unint64_t v858 = (v857 + v2013 + v33) & v1978;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v1943 + 16))(v858, v411, v1942);
        v859 = (void *)((v1947 + v858) & 0xFFFFFFFFFFFFFFF8);
        v860 = (void *)((v1947 + v411) & 0xFFFFFFFFFFFFFFF8);
        void *v859 = *v860;
        unint64_t v861 = ((unint64_t)v859 + v1939) & v1990;
        unint64_t v862 = ((unint64_t)v860 + v1939) & v1990;
        v863 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1945 + 16);
        swift_bridgeObjectRetain();
        v863(v861, v862, v1944);
        v864 = (void *)((v1933 + v862) & 0xFFFFFFFFFFFFFFF8);
        v865 = (void *)((v1933 + v861) & 0xFFFFFFFFFFFFFFF8);
        void *v865 = *v864;
        v866 = (void *)(((unint64_t)v865 + 15) & 0xFFFFFFFFFFFFFFF8);
        v867 = (void *)(((unint64_t)v864 + 15) & 0xFFFFFFFFFFFFFFF8);
        void *v866 = *v867;
        v866[1] = v867[1];
        v868 = (void *)(v2071 + v858);
        void *v868 = *(void *)(v2071 + v411);
        v868[1] = *(void *)(v2071 + v411 + 8);
        unint64_t v869 = (v2018 + v2071 + v858) & v2026;
        unint64_t v870 = (v2018 + v2071 + v411) & v2026;
        *(unsigned char *)unint64_t v869 = *(unsigned char *)v870;
        uint64_t v871 = v869 | 4;
        int v872 = *(_DWORD *)(v870 | 4);
        *(unsigned char *)(v871 + 4) = *(unsigned char *)((v870 | 4) + 4);
        *(_DWORD *)uint64_t v871 = v872;
        *(_WORD *)(v869 + 10) = *(_WORD *)(v870 + 0xA);
        unint64_t v873 = (v1956 + v869) & v90;
        unint64_t v2048 = v870;
        unint64_t v874 = (v1956 + v870) & v90;
        v875 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1954 + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v875(v873, v874, v1957);
        unint64_t v876 = (v1953 + v873) & v90;
        unint64_t v877 = (v1953 + v874) & v90;
        v875(v876, v877, v1957);
        v878 = (unsigned char *)(v876 + v1958);
        unsigned char *v878 = *(unsigned char *)(v877 + v1958);
        v878[1] = *(unsigned char *)(v877 + v1958 + 1);
        v878[2] = *(unsigned char *)(v877 + v1958 + 2);
        v878[3] = *(unsigned char *)(v877 + v1958 + 3);
        v878[4] = *(unsigned char *)(v877 + v1958 + 4);
        unint64_t v879 = (v876 + v1958 + 12) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v880 = (v877 + v1958 + 12) & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v879 = *(void *)v880;
        *(void *)(v879 + 8) = *(void *)(v880 + 8);
        *(unsigned char *)(v879 + 16) = *(unsigned char *)(v880 + 16);
        *(unsigned char *)(v879 + 17) = *(unsigned char *)(v880 + 17);
        *(unsigned char *)(v879 + 18) = *(unsigned char *)(v880 + 18);
        *(unsigned char *)(v879 + 19) = *(unsigned char *)(v880 + 19);
        unint64_t v881 = (v879 + 27) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v882 = (v880 + 27) & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v881 = *(void *)v882;
        *(unsigned char *)(v881 + 8) = *(unsigned char *)(v882 + 8);
        *(unsigned char *)(v881 + 9) = *(unsigned char *)(v882 + 9);
        *(unsigned char *)(v881 + 10) = *(unsigned char *)(v882 + 10);
        *(unsigned char *)(v881 + 11) = *(unsigned char *)(v882 + 11);
        *(unsigned char *)(v881 + 12) = *(unsigned char *)(v882 + 12);
        v883 = (void *)((v880 + 47) & 0xFFFFFFFFFFFFFFF8);
        v884 = (void *)((v879 + 47) & 0xFFFFFFFFFFFFFFF8);
        void *v884 = *v883;
        unint64_t v885 = ((unint64_t)v884 + 15) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v886 = ((unint64_t)v883 + 15) & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v885 = *(void *)v886;
        *(unsigned char *)(v885 + 8) = *(unsigned char *)(v886 + 8);
        *(unsigned char *)(v885 + 9) = *(unsigned char *)(v886 + 9);
        v887 = (void *)((v1951 + v885) & v90);
        v888 = (const void *)((v1951 + v886) & v90);
        v889 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v1954 + 48);
        swift_bridgeObjectRetain();
        if (v889(v888, 1, v1957))
        {
          memcpy(v887, v888, __n);
        }
        else
        {
          v875((unint64_t)v887, (unint64_t)v888, v1957);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v1954 + 56))(v887, 0, 1, v1957);
        }
        v890 = (void *)(((unint64_t)v887 + v1952) & 0xFFFFFFFFFFFFFFF8);
        v891 = (void *)(((unint64_t)v888 + v1952) & 0xFFFFFFFFFFFFFFF8);
        void *v890 = *v891;
        unint64_t v892 = ((unint64_t)v890 + 15) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v893 = ((unint64_t)v891 + 15) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v894 = *(void *)v893;
        *(unsigned char *)(v892 + 8) = *(unsigned char *)(v893 + 8);
        *(void *)unint64_t v892 = v894;
        v895 = (void *)(((unint64_t)v890 + 31) & 0xFFFFFFFFFFFFFFF8);
        v896 = (void *)(((unint64_t)v891 + 31) & 0xFFFFFFFFFFFFFFF8);
        void *v895 = *v896;
        unint64_t v897 = ((unint64_t)v895 + 15) & 0xFFFFFFFFFFFFFFF8;
        v898 = (uint64_t *)(((unint64_t)v896 + 15) & 0xFFFFFFFFFFFFFFF8);
        unint64_t v899 = v898[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v78 = a1;
        uint64_t v130 = v2021;
        if ((v899 & 0x3000000000000000) != 0)
        {
          *(_OWORD *)unint64_t v897 = *(_OWORD *)v898;
        }
        else
        {
          uint64_t v900 = *v898;
          sub_10001EBB0(*v898, v899);
          *(void *)unint64_t v897 = v900;
          *(void *)(v897 + 8) = v899;
        }
        unint64_t v901 = (v897 + 19) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v902 = ((unint64_t)v898 + 19) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v903 = *(void *)v902;
        *(unsigned char *)(v901 + 8) = *(unsigned char *)(v902 + 8);
        *(void *)unint64_t v901 = v903;
        *(unsigned char *)(v901 + 9) = *(unsigned char *)(v902 + 9);
        unint64_t v904 = (v901 + 13) & 0xFFFFFFFFFFFFFFFCLL;
        unint64_t v905 = (v902 + 13) & 0xFFFFFFFFFFFFFFFCLL;
        int v906 = *(_DWORD *)v905;
        *(unsigned char *)(v904 + 4) = *(unsigned char *)(v905 + 4);
        *(_DWORD *)unint64_t v904 = v906;
        v907 = (void *)((v901 + 25) & 0xFFFFFFFFFFFFFFF8);
        v908 = (void *)((v902 + 25) & 0xFFFFFFFFFFFFFFF8);
        void *v907 = *v908;
        v907[1] = v908[1];
        unint64_t v909 = v869 + v1989;
        v910 = (long long *)(v2048 + v1989);
        unint64_t v911 = *(void *)(v2048 + v1989 + 16);
        if (v911 >= 0xFFFFFFFF) {
          LODWORD(v911) = -1;
        }
        int v912 = v911 - 1;
        swift_bridgeObjectRetain();
        if (v912 < 0)
        {
          *(void *)unint64_t v909 = *(void *)v910;
          *(unsigned char *)(v909 + 8) = *((unsigned char *)v910 + 8);
          *(unsigned char *)(v909 + 9) = *((unsigned char *)v910 + 9);
          uint64_t v925 = *((void *)v910 + 2);
          swift_errorRetain();
          *(void *)(v909 + 16) = v925;
          uint64_t v926 = *((void *)v910 + 3);
          swift_errorRetain();
          *(void *)(v909 + 24) = v926;
          *(unsigned char *)(v909 + 32) = *((unsigned char *)v910 + 32);
          *(unsigned char *)(v909 + 33) = *((unsigned char *)v910 + 33);
          *(unsigned char *)(v909 + 34) = *((unsigned char *)v910 + 34);
          *(void *)(v909 + 40) = *((void *)v910 + 5);
          *(void *)(v909 + 48) = *((void *)v910 + 6);
          *(void *)(v909 + 56) = *((void *)v910 + 7);
          *(void *)(v909 + 64) = *((void *)v910 + 8);
          *(unsigned char *)(v909 + 72) = *((unsigned char *)v910 + 72);
          *(void *)(v909 + 80) = *((void *)v910 + 10);
          *(void *)(v909 + 88) = *((void *)v910 + 11);
          v2049 = (void *)*((void *)v910 + 12);
          *(void *)(v909 + 96) = v2049;
          *(unsigned char *)(v909 + 104) = *((unsigned char *)v910 + 104);
          *(unsigned char *)(v909 + 105) = *((unsigned char *)v910 + 105);
          *(void *)(v909 + 112) = *((void *)v910 + 14);
          *(void *)(v909 + 120) = *((void *)v910 + 15);
          *(void *)(v909 + 128) = *((void *)v910 + 16);
          *(void *)(v909 + 136) = *((void *)v910 + 17);
          *(void *)(v909 + 144) = *((void *)v910 + 18);
          *(void *)(v909 + 152) = *((void *)v910 + 19);
          *(void *)(v909 + 160) = *((void *)v910 + 20);
          *(void *)(v909 + 168) = *((void *)v910 + 21);
          *(unsigned char *)(v909 + 176) = *((unsigned char *)v910 + 176);
          *(void *)(v909 + 184) = *((void *)v910 + 23);
          uint64_t v927 = *((void *)v910 + 24);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v928 = v2049;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v927)
          {
            *(void *)(v909 + 192) = v927;
            *(void *)(v909 + 200) = *((void *)v910 + 25);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            *(_OWORD *)(v909 + 192) = v910[12];
          }
          uint64_t v78 = a1;
          uint64_t v132 = v1961;
          uint64_t v130 = v2021;
          uint64_t v129 = v1921;
          *(void *)(v909 + 208) = *((void *)v910 + 26);
          *(void *)(v909 + 216) = *((void *)v910 + 27);
          *(void *)(v909 + 224) = *((void *)v910 + 28);
          *(void *)(v909 + 232) = *((void *)v910 + 29);
          *(void *)(v909 + 240) = *((void *)v910 + 30);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v913 = *v910;
          long long v914 = v910[1];
          long long v915 = v910[3];
          *(_OWORD *)(v909 + 32) = v910[2];
          *(_OWORD *)(v909 + 48) = v915;
          *(_OWORD *)unint64_t v909 = v913;
          *(_OWORD *)(v909 + 16) = v914;
          long long v916 = v910[4];
          long long v917 = v910[5];
          long long v918 = v910[7];
          *(_OWORD *)(v909 + 96) = v910[6];
          *(_OWORD *)(v909 + 112) = v918;
          *(_OWORD *)(v909 + 64) = v916;
          *(_OWORD *)(v909 + 80) = v917;
          long long v919 = v910[8];
          long long v920 = v910[9];
          long long v921 = v910[11];
          *(_OWORD *)(v909 + 160) = v910[10];
          *(_OWORD *)(v909 + 176) = v921;
          *(_OWORD *)(v909 + 128) = v919;
          *(_OWORD *)(v909 + 144) = v920;
          long long v922 = v910[12];
          long long v923 = v910[13];
          long long v924 = v910[14];
          *(void *)(v909 + 240) = *((void *)v910 + 30);
          *(_OWORD *)(v909 + 208) = v923;
          *(_OWORD *)(v909 + 224) = v924;
          *(_OWORD *)(v909 + 192) = v922;
          uint64_t v132 = v1961;
          uint64_t v129 = v1921;
        }
        v1033 = (_OWORD *)((v909 + 255) & 0xFFFFFFFFFFFFFFF8);
        v1034 = (long long *)(((unint64_t)v910 + 255) & 0xFFFFFFFFFFFFFFF8);
        long long v1035 = *v1034;
        *(_OWORD *)((char *)v1033 + 9) = *(long long *)((char *)v1034 + 9);
        _OWORD *v1033 = v1035;
        unint64_t v1036 = (v909 + 287) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v1037 = ((unint64_t)v910 + 287) & 0xFFFFFFFFFFFFFFF8;
        long long v1038 = *(_OWORD *)v1037;
        *(unsigned char *)(v1036 + 16) = *(unsigned char *)(v1037 + 16);
        *(_OWORD *)unint64_t v1036 = v1038;
        v1039 = (void *)((v909 + 311) & 0xFFFFFFFFFFFFFFF8);
        unint64_t v1040 = ((unint64_t)v910 + 311) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v1041 = *(void *)v1040;
        v1040 += 15;
        void *v1039 = v1041;
        v1042 = (void *)(((unint64_t)v1039 + 15) & 0xFFFFFFFFFFFFFFF8);
        uint64_t v1043 = *(void *)(v1040 & 0xFFFFFFFFFFFFFFF8);
        unint64_t v1044 = *(void *)((v1040 & 0xFFFFFFFFFFFFFFF8) + 8);
        sub_10018B584(v1043, v1044);
        void *v1042 = v1043;
        v1042[1] = v1044;
        size_t v852 = v1958;
        if (!v1935) {
          goto LABEL_1039;
        }
LABEL_1090:
        unint64_t v1045 = v1934 + 7;
        unint64_t v1046 = ((((v1914
                  + 327
                  + ((((((((((v1934 + 7 + v852) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                      + 19) & 0xFFFFFFFFFFFFFFF8)
                    + 25) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFF8)
                + 15) & 0xFFFFFFFFFFFFFFF8)
              + 16;
        v2051 = (void *)((unint64_t)&v78[v2007 + v1046] & v1885);
        v1047 = (const void *)((unint64_t)&a2[v2007 + v1046] & v1885);
        if (v129 == v1927)
        {
          int v1048 = (*(uint64_t (**)(const void *, uint64_t, uint64_t))(v130 + 48))(v1047, v129, v132);
          uint64_t v1049 = v1957;
          unint64_t v1050 = v1888;
          unint64_t v1051 = v2002 + 2;
LABEL_1105:
          if (v1048)
          {
LABEL_1106:
            size_t v1061 = v2041;
            v1062 = v2051;
            memcpy(v2051, v1047, v2041);
            uint64_t v1063 = v2058;
            size_t v1064 = __n;
LABEL_1107:
            size_t v1065 = v1064;
LABEL_1177:
            unint64_t v1168 = ((((v1914
                      + 327
                      + ((((((((((v1045 + v1065) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                          + 19) & 0xFFFFFFFFFFFFFFF8)
                        + 25) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFF8)
                    + 15) & 0xFFFFFFFFFFFFFFF8)
                  + 16;
            *(void *)(((unint64_t)v1062 + v1168) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v1047
                                                                                               + v1168) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1169 = ((v1925
                    + ((v1063
                      + ((((v1929
                          + ((((((((((v1045 + v1064) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                              + 19) & 0xFFFFFFFFFFFFFFF8)
                            + 25) & 0xFFFFFFFFFFFFFFF8)
                          + 327) & 0xFFFFFFFFFFFFFFF8)
                        + 15) & 0xFFFFFFFFFFFFFFF8)
                      + 16) & ~v2058)) & 0xFFFFFFFFFFFFFFF8)
                  + 8;
            if (v1169 <= v2009) {
              unint64_t v1169 = v2009;
            }
            if (v1923 > v1169) {
              unint64_t v1169 = v1923;
            }
            if (v2015 > v1169) {
              unint64_t v1169 = v2015;
            }
            if (v1061 > v1169) {
              unint64_t v1169 = v1061;
            }
            if (v2020 > v1169) {
              unint64_t v1169 = v2020;
            }
            if (v1922 > v1169) {
              unint64_t v1169 = v2011 + 2;
            }
            if (v1924 > v1169) {
              unint64_t v1169 = ((v2002 + 9) & 0xFFFFFFFFFFFFFFF8) + 8;
            }
            if (v1051 > v1169) {
              unint64_t v1169 = v1051;
            }
            if (v1999 > v1169) {
              unint64_t v1169 = (v2002 & 0xFFFFFFFFFFFFFFF8) + 16;
            }
            if (v1169 <= v2020) {
              unint64_t v1169 = v2020;
            }
            if (v1169 <= v2010) {
              unint64_t v1169 = v2010;
            }
            if (v1169 <= ((v2003 + 1) & ~v2003) + v2020) {
              unint64_t v1169 = ((v2003 + 1) & ~v2003) + v2020;
            }
            if (v1169 <= v2020) {
              unint64_t v1169 = v2020;
            }
            if (v1169 <= v2001) {
              unint64_t v1169 = v2001;
            }
            if (v1169 <= v1051) {
              unint64_t v1169 = v1051;
            }
            if (v1169 <= v2020) {
              unint64_t v1169 = v2020;
            }
            if (v1169 <= v2011) {
              unint64_t v1169 = v2011;
            }
            if (v1169 <= v2020) {
              unint64_t v1169 = v2020;
            }
            if (v1169 <= v1891) {
              unint64_t v1169 = v1891;
            }
            if (v1169 <= v1051) {
              unint64_t v1169 = v1051;
            }
            if (v1169 <= v2020) {
              unint64_t v1169 = v2020;
            }
            if (v1169 <= 0x38) {
              unint64_t v1169 = 56;
            }
            if (v1169 > 3) {
              goto LABEL_1222;
            }
            unsigned int v1170 = ((1 << (8 * v1169)) + 5) >> (8 * v1169);
            if (v1170 > 0xFFD6)
            {
              *(_DWORD *)&v78[v1169] = 6;
              return v78;
            }
            if (v1170 <= 0xD6) {
LABEL_1222:
            }
              v78[v1169] = 6;
            else {
              *(_WORD *)&v78[v1169] = 6;
            }
            return v78;
          }
          unint64_t v1052 = ((unint64_t)v1047 + v1949) & v1050;
          unint64_t v1053 = (v1916 + v1052) & v1978;
LABEL_1109:
          v1066 = v1047;
          v1067 = *(void (**)(void *))(v2021 + 16);
          unint64_t v1068 = v1050;
          v2023 = v1066;
          v1067(v2051);
          unint64_t v1069 = ((unint64_t)v2051 + v1949) & v1068;
          ((void (*)(unint64_t, unint64_t, uint64_t))v1067)(v1069, v1052, v132);
          unint64_t v1070 = (v1916 + v1069) & v1978;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v1943 + 16))(v1070, v1053, v1942);
          v1071 = (void *)((v1947 + v1070) & 0xFFFFFFFFFFFFFFF8);
          v1072 = (void *)((v1947 + v1053) & 0xFFFFFFFFFFFFFFF8);
          void *v1071 = *v1072;
          unint64_t v1073 = ((unint64_t)v1071 + v1939) & v1990;
          unint64_t v1074 = ((unint64_t)v1072 + v1939) & v1990;
          v1075 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1945 + 16);
          swift_bridgeObjectRetain();
          v1075(v1073, v1074, v1944);
          v1076 = (void *)((v1933 + v1074) & 0xFFFFFFFFFFFFFFF8);
          v1077 = (void *)((v1933 + v1073) & 0xFFFFFFFFFFFFFFF8);
          void *v1077 = *v1076;
          v1078 = (void *)(((unint64_t)v1077 + 15) & 0xFFFFFFFFFFFFFFF8);
          v1079 = (void *)(((unint64_t)v1076 + 15) & 0xFFFFFFFFFFFFFFF8);
          void *v1078 = *v1079;
          v1078[1] = v1079[1];
          v1080 = (void *)(v1070 + v2071);
          void *v1080 = *(void *)(v1053 + v2071);
          v1080[1] = *(void *)(v1053 + v2071 + 8);
          unint64_t v1081 = (v2018 + v1070 + v2071) & v2026;
          unint64_t v1082 = (v2018 + v1053 + v2071) & v2026;
          *(unsigned char *)unint64_t v1081 = *(unsigned char *)v1082;
          uint64_t v1083 = v1081 | 4;
          int v1084 = *(_DWORD *)(v1082 | 4);
          *(unsigned char *)(v1083 + 4) = *(unsigned char *)((v1082 | 4) + 4);
          *(_DWORD *)uint64_t v1083 = v1084;
          *(_WORD *)(v1081 + 10) = *(_WORD *)(v1082 + 0xA);
          unint64_t v2081 = v1081;
          unint64_t v1085 = (v1956 + v1081) & v1973;
          unint64_t v2031 = v1082;
          unint64_t v1086 = (v1956 + v1082) & v1973;
          v1087 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1954 + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v1087(v1085, v1086, v1049);
          unint64_t v1088 = (v1953 + v1085) & v1973;
          unint64_t v1089 = (v1953 + v1086) & v1973;
          v1087(v1088, v1089, v1049);
          v1090 = (unsigned char *)(v1088 + v1958);
          unsigned char *v1090 = *(unsigned char *)(v1089 + v1958);
          v1090[1] = *(unsigned char *)(v1089 + v1958 + 1);
          v1090[2] = *(unsigned char *)(v1089 + v1958 + 2);
          v1090[3] = *(unsigned char *)(v1089 + v1958 + 3);
          v1090[4] = *(unsigned char *)(v1089 + v1958 + 4);
          unint64_t v1091 = (v1088 + v1958 + 12) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v1092 = (v1089 + v1958 + 12) & 0xFFFFFFFFFFFFFFF8;
          *(void *)unint64_t v1091 = *(void *)v1092;
          *(void *)(v1091 + 8) = *(void *)(v1092 + 8);
          *(unsigned char *)(v1091 + 16) = *(unsigned char *)(v1092 + 16);
          *(unsigned char *)(v1091 + 17) = *(unsigned char *)(v1092 + 17);
          *(unsigned char *)(v1091 + 18) = *(unsigned char *)(v1092 + 18);
          *(unsigned char *)(v1091 + 19) = *(unsigned char *)(v1092 + 19);
          unint64_t v1093 = (v1091 + 27) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v1094 = (v1092 + 27) & 0xFFFFFFFFFFFFFFF8;
          *(void *)unint64_t v1093 = *(void *)v1094;
          *(unsigned char *)(v1093 + 8) = *(unsigned char *)(v1094 + 8);
          *(unsigned char *)(v1093 + 9) = *(unsigned char *)(v1094 + 9);
          *(unsigned char *)(v1093 + 10) = *(unsigned char *)(v1094 + 10);
          *(unsigned char *)(v1093 + 11) = *(unsigned char *)(v1094 + 11);
          *(unsigned char *)(v1093 + 12) = *(unsigned char *)(v1094 + 12);
          v1095 = (void *)((v1092 + 47) & 0xFFFFFFFFFFFFFFF8);
          v1096 = (void *)((v1091 + 47) & 0xFFFFFFFFFFFFFFF8);
          void *v1096 = *v1095;
          unint64_t v1097 = ((unint64_t)v1096 + 15) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v1098 = ((unint64_t)v1095 + 15) & 0xFFFFFFFFFFFFFFF8;
          *(void *)unint64_t v1097 = *(void *)v1098;
          *(unsigned char *)(v1097 + 8) = *(unsigned char *)(v1098 + 8);
          *(unsigned char *)(v1097 + 9) = *(unsigned char *)(v1098 + 9);
          v1099 = (void *)((v1951 + v1097) & v1973);
          v1100 = (const void *)((v1951 + v1098) & v1973);
          v1101 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v1954 + 48);
          swift_bridgeObjectRetain();
          if (v1101(v1100, 1, v1049))
          {
            size_t v1064 = __n;
            memcpy(v1099, v1100, __n);
          }
          else
          {
            v1087((unint64_t)v1099, (unint64_t)v1100, v1049);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v1954 + 56))(v1099, 0, 1, v1049);
            size_t v1064 = __n;
          }
          v1102 = (void *)(((unint64_t)v1099 + v1952) & 0xFFFFFFFFFFFFFFF8);
          v1103 = (void *)(((unint64_t)v1100 + v1952) & 0xFFFFFFFFFFFFFFF8);
          void *v1102 = *v1103;
          unint64_t v1104 = ((unint64_t)v1102 + 15) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v1105 = ((unint64_t)v1103 + 15) & 0xFFFFFFFFFFFFFFF8;
          uint64_t v1106 = *(void *)v1105;
          *(unsigned char *)(v1104 + 8) = *(unsigned char *)(v1105 + 8);
          *(void *)unint64_t v1104 = v1106;
          v1107 = (void *)(((unint64_t)v1102 + 31) & 0xFFFFFFFFFFFFFFF8);
          v1108 = (void *)(((unint64_t)v1103 + 31) & 0xFFFFFFFFFFFFFFF8);
          void *v1107 = *v1108;
          unint64_t v1109 = ((unint64_t)v1107 + 15) & 0xFFFFFFFFFFFFFFF8;
          v1110 = (uint64_t *)(((unint64_t)v1108 + 15) & 0xFFFFFFFFFFFFFFF8);
          unint64_t v1111 = v1110[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if ((v1111 & 0x3000000000000000) != 0)
          {
            *(_OWORD *)unint64_t v1109 = *(_OWORD *)v1110;
          }
          else
          {
            uint64_t v1112 = *v1110;
            sub_10001EBB0(*v1110, v1111);
            *(void *)unint64_t v1109 = v1112;
            *(void *)(v1109 + 8) = v1111;
          }
          unint64_t v1113 = (v1109 + 19) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v1114 = ((unint64_t)v1110 + 19) & 0xFFFFFFFFFFFFFFF8;
          uint64_t v1115 = *(void *)v1114;
          *(unsigned char *)(v1113 + 8) = *(unsigned char *)(v1114 + 8);
          *(void *)unint64_t v1113 = v1115;
          *(unsigned char *)(v1113 + 9) = *(unsigned char *)(v1114 + 9);
          unint64_t v1116 = (v1113 + 13) & 0xFFFFFFFFFFFFFFFCLL;
          unint64_t v1117 = (v1114 + 13) & 0xFFFFFFFFFFFFFFFCLL;
          int v1118 = *(_DWORD *)v1117;
          *(unsigned char *)(v1116 + 4) = *(unsigned char *)(v1117 + 4);
          *(_DWORD *)unint64_t v1116 = v1118;
          v1119 = (void *)((v1113 + 25) & 0xFFFFFFFFFFFFFFF8);
          v1120 = (void *)((v1114 + 25) & 0xFFFFFFFFFFFFFFF8);
          void *v1119 = *v1120;
          v1119[1] = v1120[1];
          unint64_t v1121 = v2081 + v1989;
          v1122 = (long long *)(v2031 + v1989);
          unint64_t v1123 = *(void *)(v2031 + v1989 + 16);
          if (v1123 >= 0xFFFFFFFF) {
            LODWORD(v1123) = -1;
          }
          int v1124 = v1123 - 1;
          swift_bridgeObjectRetain();
          uint64_t v1063 = v2058;
          if (v1124 < 0)
          {
            *(void *)unint64_t v1121 = *(void *)v1122;
            *(unsigned char *)(v1121 + 8) = *((unsigned char *)v1122 + 8);
            *(unsigned char *)(v1121 + 9) = *((unsigned char *)v1122 + 9);
            uint64_t v1137 = *((void *)v1122 + 2);
            swift_errorRetain();
            *(void *)(v1121 + 16) = v1137;
            uint64_t v1138 = *((void *)v1122 + 3);
            swift_errorRetain();
            *(void *)(v1121 + 24) = v1138;
            *(unsigned char *)(v1121 + 32) = *((unsigned char *)v1122 + 32);
            *(unsigned char *)(v1121 + 33) = *((unsigned char *)v1122 + 33);
            *(unsigned char *)(v1121 + 34) = *((unsigned char *)v1122 + 34);
            *(void *)(v1121 + 40) = *((void *)v1122 + 5);
            *(void *)(v1121 + 48) = *((void *)v1122 + 6);
            *(void *)(v1121 + 56) = *((void *)v1122 + 7);
            *(void *)(v1121 + 64) = *((void *)v1122 + 8);
            *(unsigned char *)(v1121 + 72) = *((unsigned char *)v1122 + 72);
            *(void *)(v1121 + 80) = *((void *)v1122 + 10);
            *(void *)(v1121 + 88) = *((void *)v1122 + 11);
            v2082 = (void *)*((void *)v1122 + 12);
            *(void *)(v1121 + 96) = v2082;
            *(unsigned char *)(v1121 + 104) = *((unsigned char *)v1122 + 104);
            *(unsigned char *)(v1121 + 105) = *((unsigned char *)v1122 + 105);
            *(void *)(v1121 + 112) = *((void *)v1122 + 14);
            *(void *)(v1121 + 120) = *((void *)v1122 + 15);
            *(void *)(v1121 + 128) = *((void *)v1122 + 16);
            *(void *)(v1121 + 136) = *((void *)v1122 + 17);
            *(void *)(v1121 + 144) = *((void *)v1122 + 18);
            *(void *)(v1121 + 152) = *((void *)v1122 + 19);
            *(void *)(v1121 + 160) = *((void *)v1122 + 20);
            *(void *)(v1121 + 168) = *((void *)v1122 + 21);
            *(unsigned char *)(v1121 + 176) = *((unsigned char *)v1122 + 176);
            *(void *)(v1121 + 184) = *((void *)v1122 + 23);
            uint64_t v1139 = *((void *)v1122 + 24);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            id v1140 = v2082;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (v1139)
            {
              *(void *)(v1121 + 192) = v1139;
              *(void *)(v1121 + 200) = *((void *)v1122 + 25);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }
            else
            {
              *(_OWORD *)(v1121 + 192) = v1122[12];
            }
            uint64_t v78 = a1;
            size_t v1064 = __n;
            uint64_t v1063 = v2058;
            unint64_t v1045 = v1934 + 7;
            unint64_t v1051 = v2002 + 2;
            *(void *)(v1121 + 208) = *((void *)v1122 + 26);
            *(void *)(v1121 + 216) = *((void *)v1122 + 27);
            *(void *)(v1121 + 224) = *((void *)v1122 + 28);
            *(void *)(v1121 + 232) = *((void *)v1122 + 29);
            *(void *)(v1121 + 240) = *((void *)v1122 + 30);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v1125 = *v1122;
            long long v1126 = v1122[1];
            long long v1127 = v1122[3];
            *(_OWORD *)(v1121 + 32) = v1122[2];
            *(_OWORD *)(v1121 + 48) = v1127;
            *(_OWORD *)unint64_t v1121 = v1125;
            *(_OWORD *)(v1121 + 16) = v1126;
            long long v1128 = v1122[4];
            long long v1129 = v1122[5];
            long long v1130 = v1122[7];
            *(_OWORD *)(v1121 + 96) = v1122[6];
            *(_OWORD *)(v1121 + 112) = v1130;
            *(_OWORD *)(v1121 + 64) = v1128;
            *(_OWORD *)(v1121 + 80) = v1129;
            long long v1131 = v1122[8];
            long long v1132 = v1122[9];
            long long v1133 = v1122[11];
            *(_OWORD *)(v1121 + 160) = v1122[10];
            *(_OWORD *)(v1121 + 176) = v1133;
            *(_OWORD *)(v1121 + 128) = v1131;
            *(_OWORD *)(v1121 + 144) = v1132;
            long long v1134 = v1122[12];
            long long v1135 = v1122[13];
            long long v1136 = v1122[14];
            *(void *)(v1121 + 240) = *((void *)v1122 + 30);
            *(_OWORD *)(v1121 + 208) = v1135;
            *(_OWORD *)(v1121 + 224) = v1136;
            *(_OWORD *)(v1121 + 192) = v1134;
            unint64_t v1051 = v2002 + 2;
          }
          v1156 = (_OWORD *)((v1121 + 255) & 0xFFFFFFFFFFFFFFF8);
          v1157 = (long long *)(((unint64_t)v1122 + 255) & 0xFFFFFFFFFFFFFFF8);
          long long v1158 = *v1157;
          *(_OWORD *)((char *)v1156 + 9) = *(long long *)((char *)v1157 + 9);
          _OWORD *v1156 = v1158;
          unint64_t v1159 = (v1121 + 287) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v1160 = ((unint64_t)v1122 + 287) & 0xFFFFFFFFFFFFFFF8;
          long long v1161 = *(_OWORD *)v1160;
          *(unsigned char *)(v1159 + 16) = *(unsigned char *)(v1160 + 16);
          *(_OWORD *)unint64_t v1159 = v1161;
          v1162 = (void *)((v1121 + 311) & 0xFFFFFFFFFFFFFFF8);
          unint64_t v1163 = ((unint64_t)v1122 + 311) & 0xFFFFFFFFFFFFFFF8;
          uint64_t v1164 = *(void *)v1163;
          v1163 += 15;
          void *v1162 = v1164;
          v1165 = (void *)(((unint64_t)v1162 + 15) & 0xFFFFFFFFFFFFFFF8);
          uint64_t v1166 = *(void *)(v1163 & 0xFFFFFFFFFFFFFFF8);
          unint64_t v1167 = *(void *)((v1163 & 0xFFFFFFFFFFFFFFF8) + 8);
          sub_10018B584(v1166, v1167);
          void *v1165 = v1166;
          v1165[1] = v1167;
          size_t v1065 = v1958;
          size_t v1061 = v2041;
          v1062 = v2051;
          v1047 = v2023;
          if (v1935) {
            goto LABEL_1177;
          }
          goto LABEL_1107;
        }
        unint64_t v1050 = v1888;
        unint64_t v1052 = ((unint64_t)v1047 + v1949) & v1888;
        unint64_t v1053 = (v1916 + v1052) & v1978;
        if (v1931 == v1927)
        {
          v1054 = (const void *)((unint64_t)&a2[v2007 + v1046] & v1885);
          unint64_t v1055 = v1888;
          uint64_t v1049 = v1957;
          unint64_t v1051 = v2002 + 2;
          if (v1920 == v1931)
          {
            int v1048 = (*(uint64_t (**)(unint64_t))(v1943 + 48))((v1916 + v1052) & v1978);
LABEL_1104:
            unint64_t v1050 = v1055;
            v1047 = v1054;
            goto LABEL_1105;
          }
          v1058 = (unint64_t *)((v1947 + v1053) & 0xFFFFFFFFFFFFFFF8);
          if (v1987 > 0x7FFFFFFE)
          {
            int v1048 = (*(uint64_t (**)(unint64_t))(v1945 + 48))(((unint64_t)v1058 + v1939) & v1990);
            goto LABEL_1104;
          }
          unint64_t v1059 = *v1058;
        }
        else
        {
          unint64_t v1056 = v1053 + v2071;
          uint64_t v1049 = v1957;
          unint64_t v1051 = v2002 + 2;
          if ((v1905 & 0x80000000) == 0)
          {
            unint64_t v1057 = *(void *)(v1056 + 8);
            if (v1057 >= 0xFFFFFFFF) {
              LODWORD(v1057) = -1;
            }
            int v1048 = v1057 + 1;
            goto LABEL_1105;
          }
          v1054 = v1047;
          unint64_t v1055 = v1888;
          unint64_t v1060 = (v1956 + ((v2018 + v1056) & v2026)) & v1973;
          if (v1935 > 0x7FFFFFFD)
          {
            int v1048 = (*(uint64_t (**)(unint64_t))(v1954 + 48))(v1060);
            goto LABEL_1104;
          }
          unint64_t v1059 = *(void *)(((v1903 + ((v1953 + v1060) & v1973)) & 0xFFFFFFFFFFFFFFF8) + 8);
        }
        if (v1059 >= 0xFFFFFFFF) {
          LODWORD(v1059) = -1;
        }
        unint64_t v1050 = v1055;
        v1047 = v1054;
        if ((v1059 + 1) >= 2) {
          goto LABEL_1106;
        }
        goto LABEL_1109;
      }
      unint64_t v410 = (unint64_t)&a2[v1949] & v84;
      unint64_t v411 = (v410 + v2013 + v33) & v91;
      uint64_t v132 = v1961;
      uint64_t v130 = v2021;
      if (v1931 == v1927)
      {
        unint64_t v412 = v84;
        if (v1920 == v1931)
        {
          int v133 = (*(uint64_t (**)(unint64_t))(v1943 + 48))((v410 + v2013 + v33) & v91);
LABEL_1036:
          unint64_t v84 = v412;
          uint64_t v129 = v1921;
          goto LABEL_1037;
        }
        __darwin_ino64_t v634 = (unint64_t *)((v1947 + v411) & 0xFFFFFFFFFFFFFFF8);
        if (v1987 > 0x7FFFFFFE)
        {
          int v133 = (*(uint64_t (**)(unint64_t))(v1945 + 48))(((unint64_t)v634 + v1939) & v92);
          goto LABEL_1036;
        }
        unint64_t v635 = *v634;
      }
      else
      {
        unint64_t v512 = v34 + v411;
        if ((v1905 & 0x80000000) == 0)
        {
          unint64_t v513 = *(void *)(v512 + 8);
          if (v513 >= 0xFFFFFFFF) {
            LODWORD(v513) = -1;
          }
          int v133 = v513 + 1;
          goto LABEL_1037;
        }
        unint64_t v412 = v84;
        unint64_t v774 = (v1956 + ((v2018 + v512) & v2026)) & v90;
        if (v1935 > 0x7FFFFFFD)
        {
          int v133 = (*(uint64_t (**)(unint64_t))(v1954 + 48))(v774);
          goto LABEL_1036;
        }
        unint64_t v635 = *(void *)(((v1903 + ((v1953 + v774) & v90)) & 0xFFFFFFFFFFFFFFF8) + 8);
      }
      if (v635 >= 0xFFFFFFFF) {
        LODWORD(v635) = -1;
      }
      unint64_t v84 = v412;
      uint64_t v129 = v1921;
      if ((v635 + 1) >= 2) {
        goto LABEL_1038;
      }
      goto LABEL_1041;
    case 7u:
      uint64_t v134 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v1960 + 16);
      uint64_t v2027 = ~v2024;
      v134(a1, a2, AssociatedTypeWitness);
      unint64_t v135 = ((unint64_t)a1 + v1950) & ~v2046;
      unint64_t v136 = (unint64_t)&a2[v1950] & ~v2046;
      v134((void *)v135, (unsigned __int8 *)v136, AssociatedTypeWitness);
      unint64_t v137 = (v135 + v2070 + v2008) & ~v2008;
      unint64_t v138 = (v136 + v2070 + v2008) & ~v2008;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v1941 + 16))(v137, v138, v1940);
      v139 = (void *)((v1948 + v137) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v140 = (void *)((v1948 + v138) & 0xFFFFFFFFFFFFFFF8);
      void *v139 = *v140;
      unint64_t v141 = ((unint64_t)v139 + v1936) & ~(unint64_t)v1975;
      unint64_t v142 = ((unint64_t)v140 + v1936) & ~(unint64_t)v1975;
      unsigned int v143 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1938 + 16);
      swift_bridgeObjectRetain();
      v143(v141, v142, v1937);
      v144 = (void *)((v1932 + v142) & 0xFFFFFFFFFFFFFFF8);
      v145 = (void *)((v1932 + v141) & 0xFFFFFFFFFFFFFFF8);
      void *v145 = *v144;
      unint64_t v146 = (void *)(((unint64_t)v145 + 15) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v147 = (void *)(((unint64_t)v144 + 15) & 0xFFFFFFFFFFFFFFF8);
      *unint64_t v146 = *v147;
      v146[1] = v147[1];
      id v148 = (void *)(v2016 + v137);
      *id v148 = *(void *)(v2016 + v138);
      v148[1] = *(void *)(v2016 + v138 + 8);
      size_t v149 = (v2018 + v2016 + v137) & v2027;
      size_t v150 = (v2018 + v2016 + v138) & v2027;
      *(unsigned char *)size_t v149 = *(unsigned char *)v150;
      uint64_t v151 = v149 | 4;
      int v152 = *(_DWORD *)(v150 | 4);
      *(unsigned char *)(v151 + 4) = *(unsigned char *)((v150 | 4) + 4);
      *(_DWORD *)uint64_t v151 = v152;
      *(_WORD *)(v149 + 10) = *(_WORD *)(v150 + 0xA);
      size_t v2072 = v149;
      unint64_t v153 = (v1956 + v149) & v90;
      unint64_t v154 = (v1956 + v150) & v90;
      uint64_t v155 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1954 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v155(v153, v154, v1957);
      unint64_t v156 = (v1953 + v153) & v90;
      unint64_t v157 = (v1953 + v154) & v90;
      v155(v156, v157, v1957);
      v158 = (unsigned char *)(v156 + v1958);
      unsigned char *v158 = *(unsigned char *)(v157 + v1958);
      v158[1] = *(unsigned char *)(v157 + v1958 + 1);
      v158[2] = *(unsigned char *)(v157 + v1958 + 2);
      v158[3] = *(unsigned char *)(v157 + v1958 + 3);
      v158[4] = *(unsigned char *)(v157 + v1958 + 4);
      unint64_t v159 = (v156 + v1958 + 12) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v160 = (v157 + v1958 + 12) & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v159 = *(void *)v160;
      *(void *)(v159 + 8) = *(void *)(v160 + 8);
      *(unsigned char *)(v159 + 16) = *(unsigned char *)(v160 + 16);
      *(unsigned char *)(v159 + 17) = *(unsigned char *)(v160 + 17);
      *(unsigned char *)(v159 + 18) = *(unsigned char *)(v160 + 18);
      *(unsigned char *)(v159 + 19) = *(unsigned char *)(v160 + 19);
      unint64_t v161 = (v159 + 27) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v162 = (v160 + 27) & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v161 = *(void *)v162;
      *(unsigned char *)(v161 + 8) = *(unsigned char *)(v162 + 8);
      *(unsigned char *)(v161 + 9) = *(unsigned char *)(v162 + 9);
      *(unsigned char *)(v161 + 10) = *(unsigned char *)(v162 + 10);
      *(unsigned char *)(v161 + 11) = *(unsigned char *)(v162 + 11);
      *(unsigned char *)(v161 + 12) = *(unsigned char *)(v162 + 12);
      uint64_t v163 = (void *)((v160 + 47) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v164 = (void *)((v159 + 47) & 0xFFFFFFFFFFFFFFF8);
      *unint64_t v164 = *v163;
      unint64_t v165 = ((unint64_t)v164 + 15) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v166 = ((unint64_t)v163 + 15) & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v165 = *(void *)v166;
      *(unsigned char *)(v165 + 8) = *(unsigned char *)(v166 + 8);
      *(unsigned char *)(v165 + 9) = *(unsigned char *)(v166 + 9);
      uint64_t v167 = (void *)((v1951 + v165) & v90);
      unsigned __int8 v168 = (const void *)((v1951 + v166) & v90);
      uint64_t v169 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v1954 + 48);
      swift_bridgeObjectRetain();
      if (v169(v168, 1, v1957))
      {
        memcpy(v167, v168, __n);
      }
      else
      {
        v155((unint64_t)v167, (unint64_t)v168, v1957);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v1954 + 56))(v167, 0, 1, v1957);
      }
      __darwin_ino64_t v430 = (void *)(((unint64_t)v167 + v1952) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v431 = (void *)(((unint64_t)v168 + v1952) & 0xFFFFFFFFFFFFFFF8);
      *__darwin_ino64_t v430 = *v431;
      unint64_t v432 = ((unint64_t)v430 + 15) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v433 = ((unint64_t)v431 + 15) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v434 = *(void *)v433;
      *(unsigned char *)(v432 + 8) = *(unsigned char *)(v433 + 8);
      *(void *)unint64_t v432 = v434;
      v435 = (void *)(((unint64_t)v430 + 31) & 0xFFFFFFFFFFFFFFF8);
      os_log_t v436 = (void *)(((unint64_t)v431 + 31) & 0xFFFFFFFFFFFFFFF8);
      void *v435 = *v436;
      unint64_t v437 = ((unint64_t)v435 + 15) & 0xFFFFFFFFFFFFFFF8;
      v438 = (uint64_t *)(((unint64_t)v436 + 15) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v439 = v438[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if ((v439 & 0x3000000000000000) != 0)
      {
        *(_OWORD *)unint64_t v437 = *(_OWORD *)v438;
      }
      else
      {
        uint64_t v450 = *v438;
        sub_10001EBB0(*v438, v439);
        *(void *)unint64_t v437 = v450;
        *(void *)(v437 + 8) = v439;
      }
      unint64_t v451 = (v437 + 19) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v452 = ((unint64_t)v438 + 19) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v453 = *(void *)v452;
      *(unsigned char *)(v451 + 8) = *(unsigned char *)(v452 + 8);
      *(void *)unint64_t v451 = v453;
      *(unsigned char *)(v451 + 9) = *(unsigned char *)(v452 + 9);
      unint64_t v454 = (v451 + 13) & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v455 = (v452 + 13) & 0xFFFFFFFFFFFFFFFCLL;
      int v456 = *(_DWORD *)v455;
      *(unsigned char *)(v454 + 4) = *(unsigned char *)(v455 + 4);
      *(_DWORD *)unint64_t v454 = v456;
      uint64_t v457 = (void *)((v451 + 25) & 0xFFFFFFFFFFFFFFF8);
      v458 = (void *)((v452 + 25) & 0xFFFFFFFFFFFFFFF8);
      *uint64_t v457 = *v458;
      v457[1] = v458[1];
      unint64_t v459 = v1989 + v2072;
      unint64_t v460 = v1989 + v150;
      unint64_t v461 = *(void *)(v1989 + v150 + 16);
      if (v461 >= 0xFFFFFFFF) {
        LODWORD(v461) = -1;
      }
      int v462 = v461 - 1;
      swift_bridgeObjectRetain();
      uint64_t v463 = v1892;
      if (v462 < 0)
      {
        *(void *)unint64_t v459 = *(void *)v460;
        *(unsigned char *)(v459 + 8) = *(unsigned char *)(v460 + 8);
        *(unsigned char *)(v459 + 9) = *(unsigned char *)(v460 + 9);
        uint64_t v502 = *(void *)(v460 + 16);
        swift_errorRetain();
        *(void *)(v459 + 16) = v502;
        uint64_t v503 = *(void *)(v460 + 24);
        swift_errorRetain();
        *(void *)(v459 + 24) = v503;
        *(unsigned char *)(v459 + 32) = *(unsigned char *)(v460 + 32);
        *(unsigned char *)(v459 + 33) = *(unsigned char *)(v460 + 33);
        *(unsigned char *)(v459 + 34) = *(unsigned char *)(v460 + 34);
        *(void *)(v459 + 40) = *(void *)(v460 + 40);
        *(void *)(v459 + 48) = *(void *)(v460 + 48);
        *(void *)(v459 + 56) = *(void *)(v460 + 56);
        *(void *)(v459 + 64) = *(void *)(v460 + 64);
        *(unsigned char *)(v459 + 72) = *(unsigned char *)(v460 + 72);
        *(void *)(v459 + 80) = *(void *)(v460 + 80);
        *(void *)(v459 + 88) = *(void *)(v460 + 88);
        v2076 = *(void **)(v460 + 96);
        *(void *)(v459 + 96) = v2076;
        *(unsigned char *)(v459 + 104) = *(unsigned char *)(v460 + 104);
        *(unsigned char *)(v459 + 105) = *(unsigned char *)(v460 + 105);
        *(void *)(v459 + 112) = *(void *)(v460 + 112);
        *(void *)(v459 + 120) = *(void *)(v460 + 120);
        *(void *)(v459 + 128) = *(void *)(v460 + 128);
        *(void *)(v459 + 136) = *(void *)(v460 + 136);
        *(void *)(v459 + 144) = *(void *)(v460 + 144);
        *(void *)(v459 + 152) = *(void *)(v460 + 152);
        *(void *)(v459 + 160) = *(void *)(v460 + 160);
        *(void *)(v459 + 168) = *(void *)(v460 + 168);
        *(unsigned char *)(v459 + 176) = *(unsigned char *)(v460 + 176);
        *(void *)(v459 + 184) = *(void *)(v460 + 184);
        uint64_t v504 = *(void *)(v460 + 192);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v505 = v2076;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v504)
        {
          *(void *)(v459 + 192) = v504;
          *(void *)(v459 + 200) = *(void *)(v460 + 200);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          *(_OWORD *)(v459 + 192) = *(_OWORD *)(v460 + 192);
        }
        uint64_t v463 = v1892;
        *(void *)(v459 + 208) = *(void *)(v460 + 208);
        *(void *)(v459 + 216) = *(void *)(v460 + 216);
        *(void *)(v459 + 224) = *(void *)(v460 + 224);
        *(void *)(v459 + 232) = *(void *)(v460 + 232);
        *(void *)(v459 + 240) = *(void *)(v460 + 240);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v464 = *(_OWORD *)v460;
        long long v465 = *(_OWORD *)(v460 + 16);
        long long v466 = *(_OWORD *)(v460 + 48);
        *(_OWORD *)(v459 + 32) = *(_OWORD *)(v460 + 32);
        *(_OWORD *)(v459 + 48) = v466;
        *(_OWORD *)unint64_t v459 = v464;
        *(_OWORD *)(v459 + 16) = v465;
        long long v467 = *(_OWORD *)(v460 + 64);
        long long v468 = *(_OWORD *)(v460 + 80);
        long long v469 = *(_OWORD *)(v460 + 112);
        *(_OWORD *)(v459 + 96) = *(_OWORD *)(v460 + 96);
        *(_OWORD *)(v459 + 112) = v469;
        *(_OWORD *)(v459 + 64) = v467;
        *(_OWORD *)(v459 + 80) = v468;
        long long v470 = *(_OWORD *)(v460 + 128);
        long long v471 = *(_OWORD *)(v460 + 144);
        long long v472 = *(_OWORD *)(v460 + 176);
        *(_OWORD *)(v459 + 160) = *(_OWORD *)(v460 + 160);
        *(_OWORD *)(v459 + 176) = v472;
        *(_OWORD *)(v459 + 128) = v470;
        *(_OWORD *)(v459 + 144) = v471;
        long long v473 = *(_OWORD *)(v460 + 192);
        long long v474 = *(_OWORD *)(v460 + 208);
        long long v475 = *(_OWORD *)(v460 + 224);
        *(void *)(v459 + 240) = *(void *)(v460 + 240);
        *(_OWORD *)(v459 + 208) = v474;
        *(_OWORD *)(v459 + 224) = v475;
        *(_OWORD *)(v459 + 192) = v473;
      }
      int v606 = (_OWORD *)((v459 + 255) & 0xFFFFFFFFFFFFFFF8);
      v607 = (long long *)((v460 + 255) & 0xFFFFFFFFFFFFFFF8);
      long long v608 = *v607;
      *(_OWORD *)((char *)v606 + 9) = *(long long *)((char *)v607 + 9);
      *int v606 = v608;
      unint64_t v609 = (v459 + 287) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v610 = (v460 + 287) & 0xFFFFFFFFFFFFFFF8;
      long long v611 = *(_OWORD *)v610;
      *(unsigned char *)(v609 + 16) = *(unsigned char *)(v610 + 16);
      *(_OWORD *)unint64_t v609 = v611;
      v612 = (void *)((v459 + 311) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v613 = (v460 + 311) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v614 = *(void *)v613;
      v613 += 15;
      void *v612 = v614;
      v615 = (void *)(((unint64_t)v612 + 15) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v616 = *(void *)(v613 & 0xFFFFFFFFFFFFFFF8);
      unint64_t v617 = *(void *)((v613 & 0xFFFFFFFFFFFFFFF8) + 8);
      sub_10018B584(v616, v617);
      void *v615 = v616;
      v615[1] = v617;
      uint64_t v78 = a1;
      if (v463 > 3) {
        goto LABEL_485;
      }
      unsigned int v618 = ((1 << (8 * v463)) + 5) >> (8 * v463);
      if (v618 > 0xFFD6)
      {
        *(_DWORD *)((char *)a1 + v463) = 7;
      }
      else if (v618 <= 0xD6)
      {
LABEL_485:
        *((unsigned char *)a1 + v463) = 7;
      }
      else
      {
        *(_WORD *)((char *)a1 + v463) = 7;
      }
      return v78;
    case 8u:
      uint64_t v170 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v2021 + 16);
      unint64_t v2073 = ((((v1933 + ((v32 + 8 + (v1947 & 0xFFFFFFFFFFFFFFF8)) & ~v32)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
            + 16;
      uint64_t v2028 = ~v2024;
      uint64_t v1991 = ~v32;
      v170(a1, a2, v1961);
      unint64_t v171 = ((unint64_t)a1 + v1949) & ~v2039;
      unint64_t v172 = (unint64_t)&a2[v1949] & ~v2039;
      v170((void *)v171, (unsigned __int8 *)v172, v1961);
      unint64_t v173 = (v171 + v2013 + v33) & ~v33;
      unint64_t v174 = (v172 + v2013 + v33) & ~v33;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v1943 + 16))(v173, v174, v1942);
      uint64_t v175 = (void *)((v1947 + v173) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v176 = (void *)((v1947 + v174) & 0xFFFFFFFFFFFFFFF8);
      *uint64_t v175 = *v176;
      unint64_t v177 = ((unint64_t)v175 + v1939) & v1991;
      unint64_t v178 = ((unint64_t)v176 + v1939) & v1991;
      uint64_t v179 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1945 + 16);
      swift_bridgeObjectRetain();
      v179(v177, v178, v1944);
      __darwin_ino64_t v180 = (void *)((v1933 + v178) & 0xFFFFFFFFFFFFFFF8);
      v181 = (void *)((v1933 + v177) & 0xFFFFFFFFFFFFFFF8);
      void *v181 = *v180;
      v182 = (void *)(((unint64_t)v181 + 15) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v183 = (void *)(((unint64_t)v180 + 15) & 0xFFFFFFFFFFFFFFF8);
      void *v182 = *v183;
      v182[1] = v183[1];
      uint64_t v184 = (void *)(v2073 + v173);
      *uint64_t v184 = *(void *)(v2073 + v174);
      v184[1] = *(void *)(v2073 + v174 + 8);
      unint64_t v185 = (v2018 + v2073 + v173) & v2028;
      unint64_t v186 = (v2018 + v2073 + v174) & v2028;
      *(unsigned char *)unint64_t v185 = *(unsigned char *)v186;
      uint64_t v187 = v185 | 4;
      int v188 = *(_DWORD *)(v186 | 4);
      *(unsigned char *)(v187 + 4) = *(unsigned char *)((v186 | 4) + 4);
      *(_DWORD *)uint64_t v187 = v188;
      *(_WORD *)(v185 + 10) = *(_WORD *)(v186 + 0xA);
      unint64_t v2074 = v185;
      unint64_t v189 = (v1956 + v185) & v90;
      unint64_t v190 = (v1956 + v186) & v90;
      v191 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1954 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v191(v189, v190, v1957);
      unint64_t v192 = (v1953 + v189) & v90;
      unint64_t v193 = (v1953 + v190) & v90;
      v191(v192, v193, v1957);
      v194 = (unsigned char *)(v192 + v1958);
      unsigned char *v194 = *(unsigned char *)(v193 + v1958);
      v194[1] = *(unsigned char *)(v193 + v1958 + 1);
      v194[2] = *(unsigned char *)(v193 + v1958 + 2);
      v194[3] = *(unsigned char *)(v193 + v1958 + 3);
      v194[4] = *(unsigned char *)(v193 + v1958 + 4);
      unint64_t v195 = (v192 + v1958 + 12) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v196 = (v193 + v1958 + 12) & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v195 = *(void *)v196;
      *(void *)(v195 + 8) = *(void *)(v196 + 8);
      *(unsigned char *)(v195 + 16) = *(unsigned char *)(v196 + 16);
      *(unsigned char *)(v195 + 17) = *(unsigned char *)(v196 + 17);
      *(unsigned char *)(v195 + 18) = *(unsigned char *)(v196 + 18);
      *(unsigned char *)(v195 + 19) = *(unsigned char *)(v196 + 19);
      unint64_t v197 = (v195 + 27) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v198 = (v196 + 27) & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v197 = *(void *)v198;
      *(unsigned char *)(v197 + 8) = *(unsigned char *)(v198 + 8);
      *(unsigned char *)(v197 + 9) = *(unsigned char *)(v198 + 9);
      *(unsigned char *)(v197 + 10) = *(unsigned char *)(v198 + 10);
      *(unsigned char *)(v197 + 11) = *(unsigned char *)(v198 + 11);
      *(unsigned char *)(v197 + 12) = *(unsigned char *)(v198 + 12);
      id v199 = (void *)((v196 + 47) & 0xFFFFFFFFFFFFFFF8);
      char v200 = (void *)((v195 + 47) & 0xFFFFFFFFFFFFFFF8);
      *char v200 = *v199;
      unint64_t v201 = ((unint64_t)v200 + 15) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v202 = ((unint64_t)v199 + 15) & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v201 = *(void *)v202;
      *(unsigned char *)(v201 + 8) = *(unsigned char *)(v202 + 8);
      *(unsigned char *)(v201 + 9) = *(unsigned char *)(v202 + 9);
      v203 = (void *)((v1951 + v201) & v90);
      v204 = (const void *)((v1951 + v202) & v90);
      v205 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v1954 + 48);
      swift_bridgeObjectRetain();
      if (v205(v204, 1, v1957))
      {
        memcpy(v203, v204, __n);
      }
      else
      {
        v191((unint64_t)v203, (unint64_t)v204, v1957);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v1954 + 56))(v203, 0, 1, v1957);
      }
      id v440 = (void *)(((unint64_t)v203 + v1952) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v441 = (void *)(((unint64_t)v204 + v1952) & 0xFFFFFFFFFFFFFFF8);
      *id v440 = *v441;
      unint64_t v442 = ((unint64_t)v440 + 15) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v443 = ((unint64_t)v441 + 15) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v444 = *(void *)v443;
      *(unsigned char *)(v442 + 8) = *(unsigned char *)(v443 + 8);
      *(void *)unint64_t v442 = v444;
      unint64_t v445 = (void *)(((unint64_t)v440 + 31) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v446 = (void *)(((unint64_t)v441 + 31) & 0xFFFFFFFFFFFFFFF8);
      *unint64_t v445 = *v446;
      unint64_t v447 = ((unint64_t)v445 + 15) & 0xFFFFFFFFFFFFFFF8;
      __darwin_ino64_t v448 = (uint64_t *)(((unint64_t)v446 + 15) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v449 = v448[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if ((v449 & 0x3000000000000000) != 0)
      {
        *(_OWORD *)unint64_t v447 = *(_OWORD *)v448;
      }
      else
      {
        uint64_t v476 = *v448;
        sub_10001EBB0(*v448, v449);
        *(void *)unint64_t v447 = v476;
        *(void *)(v447 + 8) = v449;
      }
      unint64_t v477 = (v447 + 19) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v478 = ((unint64_t)v448 + 19) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v479 = *(void *)v478;
      *(unsigned char *)(v477 + 8) = *(unsigned char *)(v478 + 8);
      *(void *)unint64_t v477 = v479;
      *(unsigned char *)(v477 + 9) = *(unsigned char *)(v478 + 9);
      unint64_t v480 = (v477 + 13) & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v481 = (v478 + 13) & 0xFFFFFFFFFFFFFFFCLL;
      int v482 = *(_DWORD *)v481;
      *(unsigned char *)(v480 + 4) = *(unsigned char *)(v481 + 4);
      *(_DWORD *)unint64_t v480 = v482;
      uint64_t v483 = (void *)((v477 + 25) & 0xFFFFFFFFFFFFFFF8);
      v484 = (void *)((v478 + 25) & 0xFFFFFFFFFFFFFFF8);
      *uint64_t v483 = *v484;
      v483[1] = v484[1];
      unint64_t v485 = v2074 + v1989;
      unint64_t v486 = v186 + v1989;
      unint64_t v487 = *(void *)(v186 + v1989 + 16);
      if (v487 >= 0xFFFFFFFF) {
        LODWORD(v487) = -1;
      }
      int v488 = v487 - 1;
      swift_bridgeObjectRetain();
      uint64_t v489 = v1892;
      if (v488 < 0)
      {
        *(void *)unint64_t v485 = *(void *)v486;
        *(unsigned char *)(v485 + 8) = *(unsigned char *)(v486 + 8);
        *(unsigned char *)(v485 + 9) = *(unsigned char *)(v486 + 9);
        uint64_t v506 = *(void *)(v486 + 16);
        swift_errorRetain();
        *(void *)(v485 + 16) = v506;
        uint64_t v507 = *(void *)(v486 + 24);
        swift_errorRetain();
        *(void *)(v485 + 24) = v507;
        *(unsigned char *)(v485 + 32) = *(unsigned char *)(v486 + 32);
        *(unsigned char *)(v485 + 33) = *(unsigned char *)(v486 + 33);
        *(unsigned char *)(v485 + 34) = *(unsigned char *)(v486 + 34);
        *(void *)(v485 + 40) = *(void *)(v486 + 40);
        *(void *)(v485 + 48) = *(void *)(v486 + 48);
        *(void *)(v485 + 56) = *(void *)(v486 + 56);
        *(void *)(v485 + 64) = *(void *)(v486 + 64);
        *(unsigned char *)(v485 + 72) = *(unsigned char *)(v486 + 72);
        *(void *)(v485 + 80) = *(void *)(v486 + 80);
        *(void *)(v485 + 88) = *(void *)(v486 + 88);
        v2077 = *(void **)(v486 + 96);
        *(void *)(v485 + 96) = v2077;
        *(unsigned char *)(v485 + 104) = *(unsigned char *)(v486 + 104);
        *(unsigned char *)(v485 + 105) = *(unsigned char *)(v486 + 105);
        *(void *)(v485 + 112) = *(void *)(v486 + 112);
        *(void *)(v485 + 120) = *(void *)(v486 + 120);
        *(void *)(v485 + 128) = *(void *)(v486 + 128);
        *(void *)(v485 + 136) = *(void *)(v486 + 136);
        *(void *)(v485 + 144) = *(void *)(v486 + 144);
        *(void *)(v485 + 152) = *(void *)(v486 + 152);
        *(void *)(v485 + 160) = *(void *)(v486 + 160);
        *(void *)(v485 + 168) = *(void *)(v486 + 168);
        *(unsigned char *)(v485 + 176) = *(unsigned char *)(v486 + 176);
        *(void *)(v485 + 184) = *(void *)(v486 + 184);
        uint64_t v508 = *(void *)(v486 + 192);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v509 = v2077;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v508)
        {
          *(void *)(v485 + 192) = v508;
          *(void *)(v485 + 200) = *(void *)(v486 + 200);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          *(_OWORD *)(v485 + 192) = *(_OWORD *)(v486 + 192);
        }
        uint64_t v489 = v1892;
        *(void *)(v485 + 208) = *(void *)(v486 + 208);
        *(void *)(v485 + 216) = *(void *)(v486 + 216);
        *(void *)(v485 + 224) = *(void *)(v486 + 224);
        *(void *)(v485 + 232) = *(void *)(v486 + 232);
        *(void *)(v485 + 240) = *(void *)(v486 + 240);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v490 = *(_OWORD *)v486;
        long long v491 = *(_OWORD *)(v486 + 16);
        long long v492 = *(_OWORD *)(v486 + 48);
        *(_OWORD *)(v485 + 32) = *(_OWORD *)(v486 + 32);
        *(_OWORD *)(v485 + 48) = v492;
        *(_OWORD *)unint64_t v485 = v490;
        *(_OWORD *)(v485 + 16) = v491;
        long long v493 = *(_OWORD *)(v486 + 64);
        long long v494 = *(_OWORD *)(v486 + 80);
        long long v495 = *(_OWORD *)(v486 + 112);
        *(_OWORD *)(v485 + 96) = *(_OWORD *)(v486 + 96);
        *(_OWORD *)(v485 + 112) = v495;
        *(_OWORD *)(v485 + 64) = v493;
        *(_OWORD *)(v485 + 80) = v494;
        long long v496 = *(_OWORD *)(v486 + 128);
        long long v497 = *(_OWORD *)(v486 + 144);
        long long v498 = *(_OWORD *)(v486 + 176);
        *(_OWORD *)(v485 + 160) = *(_OWORD *)(v486 + 160);
        *(_OWORD *)(v485 + 176) = v498;
        *(_OWORD *)(v485 + 128) = v496;
        *(_OWORD *)(v485 + 144) = v497;
        long long v499 = *(_OWORD *)(v486 + 192);
        long long v500 = *(_OWORD *)(v486 + 208);
        long long v501 = *(_OWORD *)(v486 + 224);
        *(void *)(v485 + 240) = *(void *)(v486 + 240);
        *(_OWORD *)(v485 + 208) = v500;
        *(_OWORD *)(v485 + 224) = v501;
        *(_OWORD *)(v485 + 192) = v499;
      }
      v619 = (_OWORD *)((v485 + 255) & 0xFFFFFFFFFFFFFFF8);
      v620 = (long long *)((v486 + 255) & 0xFFFFFFFFFFFFFFF8);
      long long v621 = *v620;
      *(_OWORD *)((char *)v619 + 9) = *(long long *)((char *)v620 + 9);
      _OWORD *v619 = v621;
      unint64_t v622 = (v485 + 287) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v623 = (v486 + 287) & 0xFFFFFFFFFFFFFFF8;
      long long v624 = *(_OWORD *)v623;
      *(unsigned char *)(v622 + 16) = *(unsigned char *)(v623 + 16);
      *(_OWORD *)unint64_t v622 = v624;
      v625 = (void *)((v485 + 311) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v626 = (v486 + 311) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v627 = *(void *)v626;
      v626 += 15;
      void *v625 = v627;
      uint64_t v628 = (void *)(((unint64_t)v625 + 15) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v629 = *(void *)(v626 & 0xFFFFFFFFFFFFFFF8);
      unint64_t v630 = *(void *)((v626 & 0xFFFFFFFFFFFFFFF8) + 8);
      sub_10018B584(v629, v630);
      *uint64_t v628 = v629;
      v628[1] = v630;
      uint64_t v78 = a1;
      if (v489 > 3) {
        goto LABEL_493;
      }
      unsigned int v631 = ((1 << (8 * v489)) + 5) >> (8 * v489);
      if (v631 > 0xFFD6)
      {
        *(_DWORD *)((char *)a1 + v489) = 8;
      }
      else if (v631 <= 0xD6)
      {
LABEL_493:
        *((unsigned char *)a1 + v489) = 8;
      }
      else
      {
        *(_WORD *)((char *)a1 + v489) = 8;
      }
      return v78;
    case 9u:
      unsigned int v206 = a2[v2002];
      unsigned int v207 = v206 - 2;
      if (v206 < 2)
      {
        uint64_t v78 = a1;
        uint64_t v210 = v2021;
        uint64_t v211 = v1960;
        uint64_t v209 = v1892;
      }
      else
      {
        if (v2002 <= 3) {
          uint64_t v208 = v2002;
        }
        else {
          uint64_t v208 = 4;
        }
        uint64_t v78 = a1;
        uint64_t v209 = v1892;
        uint64_t v210 = v2021;
        uint64_t v211 = v1960;
        switch(v208)
        {
          case 1:
            int v212 = *a2;
            goto LABEL_568;
          case 2:
            int v212 = *(unsigned __int16 *)a2;
            goto LABEL_568;
          case 3:
            int v212 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_568;
          case 4:
            int v212 = *(_DWORD *)a2;
LABEL_568:
            if (v2002 < 4) {
              unsigned int v206 = (v212 | (v207 << (8 * v2002))) + 2;
            }
            else {
              unsigned int v206 = v212 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v655 = v206 == 1;
      if (v206 == 1) {
        uint64_t v656 = v210;
      }
      else {
        uint64_t v656 = v211;
      }
      (*(void (**)(unsigned char *))(v656 + 16))(v78);
      v78[v2002] = v655;
      if (v209 > 3) {
        goto LABEL_575;
      }
      unsigned int v657 = ((1 << (8 * v209)) + 5) >> (8 * v209);
      if (v657 > 0xFFD6)
      {
        *(_DWORD *)&v78[v209] = 9;
      }
      else if (v657 <= 0xD6)
      {
LABEL_575:
        v78[v209] = 9;
      }
      else
      {
        *(_WORD *)&v78[v209] = 9;
      }
      return v78;
    case 0xAu:
      unsigned int v213 = a2[v2002];
      unsigned int v214 = v213 - 2;
      if (v213 < 2)
      {
        unint64_t v217 = ~v2003;
        uint64_t v215 = v1892;
        uint64_t v78 = a1;
        uint64_t v218 = v1961;
        uint64_t v219 = AssociatedTypeWitness;
        uint64_t v220 = v2021;
        uint64_t v221 = v1960;
      }
      else
      {
        uint64_t v215 = v1892;
        if (v2002 <= 3) {
          uint64_t v216 = v2002;
        }
        else {
          uint64_t v216 = 4;
        }
        uint64_t v78 = a1;
        unint64_t v217 = ~v2003;
        uint64_t v218 = v1961;
        uint64_t v219 = AssociatedTypeWitness;
        uint64_t v220 = v2021;
        uint64_t v221 = v1960;
        switch(v216)
        {
          case 1:
            int v222 = *a2;
            goto LABEL_583;
          case 2:
            int v222 = *(unsigned __int16 *)a2;
            goto LABEL_583;
          case 3:
            int v222 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_583;
          case 4:
            int v222 = *(_DWORD *)a2;
LABEL_583:
            if (v2002 < 4) {
              unsigned int v213 = (v222 | (v214 << (8 * v2002))) + 2;
            }
            else {
              unsigned int v213 = v222 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v658 = v213 == 1;
      if (v213 == 1) {
        uint64_t v659 = v220;
      }
      else {
        uint64_t v659 = v221;
      }
      if (v213 == 1) {
        uint64_t v660 = v218;
      }
      else {
        uint64_t v660 = v219;
      }
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v659 + 16))(v78, a2, v660);
      v78[v2002] = v658;
      unint64_t v661 = v217;
      v662 = (char *)((unint64_t)&v78[v1955] & v217);
      v663 = (unsigned __int8 *)((unint64_t)&a2[v1955] & v661);
      unsigned int v664 = v663[v2002];
      if (v664 > 1)
      {
        size_t v665 = v2020;
        memcpy(v662, v663, v2020);
      }
      else
      {
        if (v664 == 1)
        {
          (*(void (**)(char *, unsigned __int8 *, uint64_t))(v220 + 16))(v662, v663, v218);
          v662[v2002] = 1;
        }
        else
        {
          (*(void (**)(char *, unsigned __int8 *, uint64_t))(v221 + 16))(v662, v663, v219);
          v662[v2002] = 0;
        }
        size_t v665 = v2020;
      }
      uint64_t v666 = &v662[v665];
      *uint64_t v666 = v663[v665];
      v666[1] = v663[v665 + 1];
      if (v215 > 3) {
        goto LABEL_599;
      }
      unsigned int v667 = ((1 << (8 * v215)) + 5) >> (8 * v215);
      if (v667 > 0xFFD6)
      {
        *(_DWORD *)&v78[v215] = 10;
      }
      else if (v667 <= 0xD6)
      {
LABEL_599:
        v78[v215] = 10;
      }
      else
      {
        *(_WORD *)&v78[v215] = 10;
      }
      return v78;
    case 0xBu:
      unsigned int v223 = a2[v2002];
      unsigned int v224 = v223 - 2;
      if (v223 < 2)
      {
        unint64_t v227 = ~v2003;
        uint64_t v225 = v1892;
        uint64_t v78 = a1;
        uint64_t v228 = v1961;
        uint64_t v229 = AssociatedTypeWitness;
        uint64_t v230 = v2021;
        uint64_t v231 = v1960;
      }
      else
      {
        uint64_t v225 = v1892;
        if (v2002 <= 3) {
          uint64_t v226 = v2002;
        }
        else {
          uint64_t v226 = 4;
        }
        uint64_t v78 = a1;
        unint64_t v227 = ~v2003;
        uint64_t v228 = v1961;
        uint64_t v229 = AssociatedTypeWitness;
        uint64_t v230 = v2021;
        uint64_t v231 = v1960;
        switch(v226)
        {
          case 1:
            int v232 = *a2;
            goto LABEL_607;
          case 2:
            int v232 = *(unsigned __int16 *)a2;
            goto LABEL_607;
          case 3:
            int v232 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_607;
          case 4:
            int v232 = *(_DWORD *)a2;
LABEL_607:
            if (v2002 < 4) {
              unsigned int v223 = (v232 | (v224 << (8 * v2002))) + 2;
            }
            else {
              unsigned int v223 = v232 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v668 = v223 == 1;
      if (v223 == 1) {
        uint64_t v669 = v230;
      }
      else {
        uint64_t v669 = v231;
      }
      if (v223 == 1) {
        uint64_t v670 = v228;
      }
      else {
        uint64_t v670 = v229;
      }
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v669 + 16))(v78, a2, v670);
      v78[v2002] = v668;
      unint64_t v671 = v227;
      v672 = (char *)((unint64_t)&v78[v1955] & v227);
      NSString v673 = (unsigned __int8 *)((unint64_t)&a2[v1955] & v671);
      unsigned int v674 = v673[v2002];
      if (v674 > 1)
      {
        size_t v675 = v2020;
        memcpy(v672, v673, v2020);
      }
      else
      {
        if (v674 == 1)
        {
          (*(void (**)(char *, unsigned __int8 *, uint64_t))(v230 + 16))(v672, v673, v228);
          v672[v2002] = 1;
        }
        else
        {
          (*(void (**)(char *, unsigned __int8 *, uint64_t))(v231 + 16))(v672, v673, v229);
          v672[v2002] = 0;
        }
        size_t v675 = v2020;
      }
      v676 = &v672[v675];
      char *v676 = v673[v675];
      v676[1] = v673[v675 + 1];
      if (v225 > 3) {
        goto LABEL_623;
      }
      unsigned int v677 = ((1 << (8 * v225)) + 5) >> (8 * v225);
      if (v677 > 0xFFD6)
      {
        *(_DWORD *)&v78[v225] = 11;
      }
      else if (v677 <= 0xD6)
      {
LABEL_623:
        v78[v225] = 11;
      }
      else
      {
        *(_WORD *)&v78[v225] = 11;
      }
      return v78;
    case 0xCu:
      unsigned int v233 = a2[v2002];
      unsigned int v234 = v233 - 2;
      if (v233 < 2)
      {
        uint64_t v78 = a1;
        uint64_t v238 = v1961;
        uint64_t v239 = AssociatedTypeWitness;
        size_t v237 = v2020;
        uint64_t v236 = v2021;
        uint64_t v240 = v1960;
      }
      else
      {
        if (v2002 <= 3) {
          uint64_t v235 = v2002;
        }
        else {
          uint64_t v235 = 4;
        }
        uint64_t v78 = a1;
        size_t v237 = v2020;
        uint64_t v236 = v2021;
        uint64_t v238 = v1961;
        uint64_t v239 = AssociatedTypeWitness;
        uint64_t v240 = v1960;
        switch(v235)
        {
          case 1:
            int v241 = *a2;
            goto LABEL_631;
          case 2:
            int v241 = *(unsigned __int16 *)a2;
            goto LABEL_631;
          case 3:
            int v241 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_631;
          case 4:
            int v241 = *(_DWORD *)a2;
LABEL_631:
            if (v2002 < 4) {
              unsigned int v233 = (v241 | (v234 << (8 * v2002))) + 2;
            }
            else {
              unsigned int v233 = v241 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v678 = v233 == 1;
      if (v233 == 1) {
        uint64_t v679 = v236;
      }
      else {
        uint64_t v679 = v240;
      }
      if (v233 == 1) {
        uint64_t v680 = v238;
      }
      else {
        uint64_t v680 = v239;
      }
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v679 + 16))(v78, a2, v680);
      v78[v2002] = v678;
      v78[v237] = a2[v237];
      uint64_t v681 = *(void *)((unint64_t)&a2[v1946 + 7] & 0xFFFFFFFFFFFFFFF8);
      swift_errorRetain();
      *(void *)((unint64_t)&v78[v1946 + 7] & 0xFFFFFFFFFFFFFFF8) = v681;
      if (v1892 > 3) {
        goto LABEL_641;
      }
      unsigned int v682 = ((1 << (8 * v1892)) + 5) >> (8 * v1892);
      if (v682 > 0xFFD6)
      {
        *(_DWORD *)&v78[v1892] = 12;
      }
      else if (v682 <= 0xD6)
      {
LABEL_641:
        v78[v1892] = 12;
      }
      else
      {
        *(_WORD *)&v78[v1892] = 12;
      }
      return v78;
    case 0xDu:
      unsigned int v242 = a2[v2002];
      unsigned int v243 = v242 - 2;
      if (v242 < 2)
      {
        uint64_t v78 = a1;
        uint64_t v247 = v1961;
        uint64_t v248 = AssociatedTypeWitness;
        size_t v246 = v2020;
        uint64_t v245 = v2021;
        uint64_t v249 = v1960;
      }
      else
      {
        if (v2002 <= 3) {
          uint64_t v244 = v2002;
        }
        else {
          uint64_t v244 = 4;
        }
        uint64_t v78 = a1;
        size_t v246 = v2020;
        uint64_t v245 = v2021;
        uint64_t v247 = v1961;
        uint64_t v248 = AssociatedTypeWitness;
        uint64_t v249 = v1960;
        switch(v244)
        {
          case 1:
            int v250 = *a2;
            goto LABEL_649;
          case 2:
            int v250 = *(unsigned __int16 *)a2;
            goto LABEL_649;
          case 3:
            int v250 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_649;
          case 4:
            int v250 = *(_DWORD *)a2;
LABEL_649:
            if (v2002 < 4) {
              unsigned int v242 = (v250 | (v243 << (8 * v2002))) + 2;
            }
            else {
              unsigned int v242 = v250 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v683 = v242 == 1;
      if (v242 == 1) {
        uint64_t v684 = v245;
      }
      else {
        uint64_t v684 = v249;
      }
      if (v242 == 1) {
        uint64_t v685 = v247;
      }
      else {
        uint64_t v685 = v248;
      }
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v684 + 16))(v78, a2, v685);
      v78[v2002] = v683;
      v78[v246] = a2[v246];
      if (v1892 > 3) {
        goto LABEL_659;
      }
      unsigned int v686 = ((1 << (8 * v1892)) + 5) >> (8 * v1892);
      if (v686 > 0xFFD6)
      {
        *(_DWORD *)&v78[v1892] = 13;
      }
      else if (v686 <= 0xD6)
      {
LABEL_659:
        v78[v1892] = 13;
      }
      else
      {
        *(_WORD *)&v78[v1892] = 13;
      }
      return v78;
    case 0xEu:
      unsigned int v251 = a2[v2002];
      unsigned int v252 = v251 - 2;
      if (v251 < 2)
      {
        uint64_t v78 = a1;
        uint64_t v256 = v1961;
        uint64_t v257 = AssociatedTypeWitness;
        size_t v255 = v2020;
        uint64_t v254 = v2021;
        uint64_t v258 = v1960;
      }
      else
      {
        if (v2002 <= 3) {
          uint64_t v253 = v2002;
        }
        else {
          uint64_t v253 = 4;
        }
        uint64_t v78 = a1;
        size_t v255 = v2020;
        uint64_t v254 = v2021;
        uint64_t v256 = v1961;
        uint64_t v257 = AssociatedTypeWitness;
        uint64_t v258 = v1960;
        switch(v253)
        {
          case 1:
            int v259 = *a2;
            goto LABEL_667;
          case 2:
            int v259 = *(unsigned __int16 *)a2;
            goto LABEL_667;
          case 3:
            int v259 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_667;
          case 4:
            int v259 = *(_DWORD *)a2;
LABEL_667:
            if (v2002 < 4) {
              unsigned int v251 = (v259 | (v252 << (8 * v2002))) + 2;
            }
            else {
              unsigned int v251 = v259 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v687 = v251 == 1;
      if (v251 == 1) {
        uint64_t v688 = v254;
      }
      else {
        uint64_t v688 = v258;
      }
      if (v251 == 1) {
        uint64_t v689 = v256;
      }
      else {
        uint64_t v689 = v257;
      }
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v688 + 16))(v78, a2, v689);
      v78[v2002] = v687;
      uint64_t v690 = *(void *)((unint64_t)&a2[v255 + 7] & 0xFFFFFFFFFFFFFFF8);
      swift_errorRetain();
      *(void *)((unint64_t)&v78[v255 + 7] & 0xFFFFFFFFFFFFFFF8) = v690;
      if (v1892 > 3) {
        goto LABEL_677;
      }
      unsigned int v691 = ((1 << (8 * v1892)) + 5) >> (8 * v1892);
      if (v691 > 0xFFD6)
      {
        *(_DWORD *)&v78[v1892] = 14;
      }
      else if (v691 <= 0xD6)
      {
LABEL_677:
        v78[v1892] = 14;
      }
      else
      {
        *(_WORD *)&v78[v1892] = 14;
      }
      return v78;
    case 0xFu:
      unsigned int v260 = a2[v2002];
      unsigned int v261 = v260 - 2;
      if (v260 < 2)
      {
        uint64_t v78 = a1;
        uint64_t v265 = v1961;
        uint64_t v266 = AssociatedTypeWitness;
        size_t v264 = v2020;
        uint64_t v263 = v2021;
        uint64_t v267 = v1960;
      }
      else
      {
        if (v2002 <= 3) {
          uint64_t v262 = v2002;
        }
        else {
          uint64_t v262 = 4;
        }
        uint64_t v78 = a1;
        size_t v264 = v2020;
        uint64_t v263 = v2021;
        uint64_t v265 = v1961;
        uint64_t v266 = AssociatedTypeWitness;
        uint64_t v267 = v1960;
        switch(v262)
        {
          case 1:
            int v268 = *a2;
            goto LABEL_685;
          case 2:
            int v268 = *(unsigned __int16 *)a2;
            goto LABEL_685;
          case 3:
            int v268 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_685;
          case 4:
            int v268 = *(_DWORD *)a2;
LABEL_685:
            if (v2002 < 4) {
              unsigned int v260 = (v268 | (v261 << (8 * v2002))) + 2;
            }
            else {
              unsigned int v260 = v268 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v692 = v260 == 1;
      if (v260 == 1) {
        uint64_t v693 = v263;
      }
      else {
        uint64_t v693 = v267;
      }
      if (v260 == 1) {
        uint64_t v694 = v265;
      }
      else {
        uint64_t v694 = v266;
      }
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v693 + 16))(v78, a2, v694);
      v78[v2002] = v692;
      uint64_t v695 = *(void *)((unint64_t)&a2[v264 + 7] & 0xFFFFFFFFFFFFFFF8);
      swift_errorRetain();
      *(void *)((unint64_t)&v78[v264 + 7] & 0xFFFFFFFFFFFFFFF8) = v695;
      if (v1892 > 3) {
        goto LABEL_695;
      }
      unsigned int v696 = ((1 << (8 * v1892)) + 5) >> (8 * v1892);
      if (v696 > 0xFFD6)
      {
        *(_DWORD *)&v78[v1892] = 15;
      }
      else if (v696 <= 0xD6)
      {
LABEL_695:
        v78[v1892] = 15;
      }
      else
      {
        *(_WORD *)&v78[v1892] = 15;
      }
      return v78;
    case 0x10u:
      uint64_t v78 = a1;
      *a1 = *(void *)a2;
      __darwin_ino64_t v269 = (uint64_t *)(a2 + 8);
      unint64_t v270 = *((void *)a2 + 2);
      if (v270 >> 60 == 15)
      {
        *(_OWORD *)(a1 + 1) = *(_OWORD *)v269;
      }
      else
      {
        uint64_t v413 = *v269;
        sub_10001EBB0(*v269, *((void *)a2 + 2));
        a1[1] = v413;
        a1[2] = v270;
      }
      *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
      *((unsigned char *)a1 + 40) = a2[40];
      a1[6] = *((void *)a2 + 6);
      if (v1892 > 3) {
        goto LABEL_362;
      }
      unsigned int v419 = ((1 << (8 * v1892)) + 5) >> (8 * v1892);
      if (v419 > 0xFFD6)
      {
        *(_DWORD *)((char *)a1 + v1892) = 16;
      }
      else if (v419 <= 0xD6)
      {
LABEL_362:
        *((unsigned char *)a1 + v1892) = 16;
      }
      else
      {
        *(_WORD *)((char *)a1 + v1892) = 16;
      }
      return v78;
    case 0x11u:
      unsigned int v271 = a2[v2002];
      unsigned int v272 = v271 - 2;
      if (v271 < 2)
      {
        uint64_t v78 = a1;
        uint64_t v275 = v2021;
        uint64_t v276 = v1960;
        uint64_t v274 = v1892;
      }
      else
      {
        if (v2002 <= 3) {
          uint64_t v273 = v2002;
        }
        else {
          uint64_t v273 = 4;
        }
        uint64_t v78 = a1;
        uint64_t v274 = v1892;
        uint64_t v275 = v2021;
        uint64_t v276 = v1960;
        switch(v273)
        {
          case 1:
            int v277 = *a2;
            goto LABEL_703;
          case 2:
            int v277 = *(unsigned __int16 *)a2;
            goto LABEL_703;
          case 3:
            int v277 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_703;
          case 4:
            int v277 = *(_DWORD *)a2;
LABEL_703:
            if (v2002 < 4) {
              unsigned int v271 = (v277 | (v272 << (8 * v2002))) + 2;
            }
            else {
              unsigned int v271 = v277 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v697 = v271 == 1;
      if (v271 == 1) {
        uint64_t v698 = v275;
      }
      else {
        uint64_t v698 = v276;
      }
      (*(void (**)(unsigned char *))(v698 + 16))(v78);
      v78[v2002] = v697;
      if (v274 > 3) {
        goto LABEL_710;
      }
      unsigned int v699 = ((1 << (8 * v274)) + 5) >> (8 * v274);
      if (v699 > 0xFFD6)
      {
        *(_DWORD *)&v78[v274] = 17;
      }
      else if (v699 <= 0xD6)
      {
LABEL_710:
        v78[v274] = 17;
      }
      else
      {
        *(_WORD *)&v78[v274] = 17;
      }
      return v78;
    case 0x12u:
      uint64_t v78 = a1;
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v1960 + 16))(a1, a2, AssociatedTypeWitness);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v2021 + 16))(((unint64_t)a1 + v1926) & ~v2039, (unint64_t)&a2[v1926] & ~v2039, v1961);
      if (v1892 > 3) {
        goto LABEL_227;
      }
      unsigned int v414 = ((1 << (8 * v1892)) + 5) >> (8 * v1892);
      if (v414 > 0xFFD6)
      {
        *(_DWORD *)((char *)a1 + v1892) = 18;
      }
      else if (v414 <= 0xD6)
      {
LABEL_227:
        *((unsigned char *)a1 + v1892) = 18;
      }
      else
      {
        *(_WORD *)((char *)a1 + v1892) = 18;
      }
      return v78;
    case 0x13u:
      uint64_t v78 = a1;
      *(unsigned char *)a1 = *a2;
      uint64_t v278 = ((unint64_t)a1 + v2003 + 1) & v85;
      __darwin_ino64_t v279 = (unsigned __int8 *)((unint64_t)&a2[v2003 + 1] & v85);
      unsigned int v280 = v279[v2002];
      unsigned int v281 = v280 - 2;
      if (v280 < 2)
      {
        uint64_t v284 = v2021;
        uint64_t v285 = v1960;
        uint64_t v283 = v1892;
      }
      else
      {
        if (v2002 <= 3) {
          uint64_t v282 = v2002;
        }
        else {
          uint64_t v282 = 4;
        }
        uint64_t v283 = v1892;
        uint64_t v284 = v2021;
        uint64_t v285 = v1960;
        switch(v282)
        {
          case 1:
            int v286 = *v279;
            goto LABEL_718;
          case 2:
            int v286 = *(unsigned __int16 *)v279;
            goto LABEL_718;
          case 3:
            int v286 = *(unsigned __int16 *)v279 | (v279[2] << 16);
            goto LABEL_718;
          case 4:
            int v286 = *(_DWORD *)v279;
LABEL_718:
            if (v2002 < 4) {
              unsigned int v280 = (v286 | (v281 << (8 * v2002))) + 2;
            }
            else {
              unsigned int v280 = v286 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v700 = v280 == 1;
      if (v280 == 1) {
        uint64_t v701 = v284;
      }
      else {
        uint64_t v701 = v285;
      }
      (*(void (**)(uint64_t))(v701 + 16))(v278);
      *(unsigned char *)(v278 + v2002) = v700;
      if (v283 > 3) {
        goto LABEL_725;
      }
      unsigned int v702 = ((1 << (8 * v283)) + 5) >> (8 * v283);
      if (v702 > 0xFFD6)
      {
        *(_DWORD *)((char *)a1 + v283) = 19;
      }
      else if (v702 <= 0xD6)
      {
LABEL_725:
        *((unsigned char *)a1 + v283) = 19;
      }
      else
      {
        *(_WORD *)((char *)a1 + v283) = 19;
      }
      return v78;
    case 0x14u:
      uint64_t v78 = a1;
      *a1 = *(void *)a2;
      swift_retain();
      if (v1892 > 3) {
        goto LABEL_235;
      }
      unsigned int v415 = ((1 << (8 * v1892)) + 5) >> (8 * v1892);
      if (v415 > 0xFFD6)
      {
        *(_DWORD *)((char *)a1 + v1892) = 20;
      }
      else if (v415 <= 0xD6)
      {
LABEL_235:
        *((unsigned char *)a1 + v1892) = 20;
      }
      else
      {
        *(_WORD *)((char *)a1 + v1892) = 20;
      }
      return v78;
    case 0x15u:
      uint64_t v78 = a1;
      *a1 = *(void *)a2;
      swift_retain();
      if (v1892 > 3) {
        goto LABEL_237;
      }
      unsigned int v416 = ((1 << (8 * v1892)) + 5) >> (8 * v1892);
      if (v416 > 0xFFD6)
      {
        *(_DWORD *)((char *)a1 + v1892) = 21;
      }
      else if (v416 <= 0xD6)
      {
LABEL_237:
        *((unsigned char *)a1 + v1892) = 21;
      }
      else
      {
        *(_WORD *)((char *)a1 + v1892) = 21;
      }
      return v78;
    case 0x16u:
      uint64_t v78 = a1;
      *(unsigned char *)a1 = *a2;
      if (v1892 > 3) {
        goto LABEL_239;
      }
      unsigned int v417 = ((1 << (8 * v1892)) + 5) >> (8 * v1892);
      if (v417 > 0xFFD6)
      {
        *(_DWORD *)((char *)a1 + v1892) = 22;
      }
      else if (v417 <= 0xD6)
      {
LABEL_239:
        *((unsigned char *)a1 + v1892) = 22;
      }
      else
      {
        *(_WORD *)((char *)a1 + v1892) = 22;
      }
      return v78;
    case 0x17u:
      uint64_t v78 = a1;
      *(unsigned char *)a1 = *a2;
      if (v1892 > 3) {
        goto LABEL_241;
      }
      unsigned int v418 = ((1 << (8 * v1892)) + 5) >> (8 * v1892);
      if (v418 > 0xFFD6)
      {
        *(_DWORD *)((char *)a1 + v1892) = 23;
      }
      else if (v418 <= 0xD6)
      {
LABEL_241:
        *((unsigned char *)a1 + v1892) = 23;
      }
      else
      {
        *(_WORD *)((char *)a1 + v1892) = 23;
      }
      return v78;
    case 0x18u:
      unsigned int v287 = a2[v2002];
      unsigned int v288 = v287 - 2;
      if (v287 < 2)
      {
        uint64_t v78 = a1;
        uint64_t v291 = v2021;
        uint64_t v292 = v1960;
        uint64_t v290 = v1892;
      }
      else
      {
        if (v2002 <= 3) {
          uint64_t v289 = v2002;
        }
        else {
          uint64_t v289 = 4;
        }
        uint64_t v78 = a1;
        uint64_t v290 = v1892;
        uint64_t v291 = v2021;
        uint64_t v292 = v1960;
        switch(v289)
        {
          case 1:
            int v293 = *a2;
            goto LABEL_733;
          case 2:
            int v293 = *(unsigned __int16 *)a2;
            goto LABEL_733;
          case 3:
            int v293 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_733;
          case 4:
            int v293 = *(_DWORD *)a2;
LABEL_733:
            if (v2002 < 4) {
              unsigned int v287 = (v293 | (v288 << (8 * v2002))) + 2;
            }
            else {
              unsigned int v287 = v293 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v703 = v287 == 1;
      if (v287 == 1) {
        uint64_t v704 = v291;
      }
      else {
        uint64_t v704 = v292;
      }
      (*(void (**)(unsigned char *))(v704 + 16))(v78);
      v78[v2002] = v703;
      if (v290 > 3) {
        goto LABEL_740;
      }
      unsigned int v705 = ((1 << (8 * v290)) + 5) >> (8 * v290);
      if (v705 > 0xFFD6)
      {
        *(_DWORD *)&v78[v290] = 24;
      }
      else if (v705 <= 0xD6)
      {
LABEL_740:
        v78[v290] = 24;
      }
      else
      {
        *(_WORD *)&v78[v290] = 24;
      }
      return v78;
    case 0x19u:
      unsigned int v294 = a2[v2002];
      unsigned int v295 = v294 - 2;
      if (v294 < 2)
      {
        uint64_t v78 = a1;
        uint64_t v298 = v2021;
        uint64_t v299 = v1960;
        uint64_t v297 = v1892;
      }
      else
      {
        if (v2002 <= 3) {
          uint64_t v296 = v2002;
        }
        else {
          uint64_t v296 = 4;
        }
        uint64_t v78 = a1;
        uint64_t v297 = v1892;
        uint64_t v298 = v2021;
        uint64_t v299 = v1960;
        switch(v296)
        {
          case 1:
            int v300 = *a2;
            goto LABEL_748;
          case 2:
            int v300 = *(unsigned __int16 *)a2;
            goto LABEL_748;
          case 3:
            int v300 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_748;
          case 4:
            int v300 = *(_DWORD *)a2;
LABEL_748:
            if (v2002 < 4) {
              unsigned int v294 = (v300 | (v295 << (8 * v2002))) + 2;
            }
            else {
              unsigned int v294 = v300 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v706 = v294 == 1;
      if (v294 == 1) {
        uint64_t v707 = v298;
      }
      else {
        uint64_t v707 = v299;
      }
      (*(void (**)(unsigned char *))(v707 + 16))(v78);
      v78[v2002] = v706;
      if (v297 > 3) {
        goto LABEL_755;
      }
      unsigned int v708 = ((1 << (8 * v297)) + 5) >> (8 * v297);
      if (v708 > 0xFFD6)
      {
        *(_DWORD *)&v78[v297] = 25;
      }
      else if (v708 <= 0xD6)
      {
LABEL_755:
        v78[v297] = 25;
      }
      else
      {
        *(_WORD *)&v78[v297] = 25;
      }
      return v78;
    case 0x1Au:
      unsigned int v301 = a2[v2002];
      unsigned int v302 = v301 - 2;
      if (v301 < 2)
      {
        uint64_t v78 = a1;
        uint64_t v305 = v2021;
        uint64_t v306 = v1960;
        uint64_t v304 = v1892;
      }
      else
      {
        if (v2002 <= 3) {
          uint64_t v303 = v2002;
        }
        else {
          uint64_t v303 = 4;
        }
        uint64_t v78 = a1;
        uint64_t v304 = v1892;
        uint64_t v305 = v2021;
        uint64_t v306 = v1960;
        switch(v303)
        {
          case 1:
            int v307 = *a2;
            goto LABEL_763;
          case 2:
            int v307 = *(unsigned __int16 *)a2;
            goto LABEL_763;
          case 3:
            int v307 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_763;
          case 4:
            int v307 = *(_DWORD *)a2;
LABEL_763:
            if (v2002 < 4) {
              unsigned int v301 = (v307 | (v302 << (8 * v2002))) + 2;
            }
            else {
              unsigned int v301 = v307 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v709 = v301 == 1;
      if (v301 == 1) {
        uint64_t v710 = v305;
      }
      else {
        uint64_t v710 = v306;
      }
      (*(void (**)(unsigned char *))(v710 + 16))(v78);
      v78[v2002] = v709;
      if (v304 > 3) {
        goto LABEL_770;
      }
      unsigned int v711 = ((1 << (8 * v304)) + 5) >> (8 * v304);
      if (v711 > 0xFFD6)
      {
        *(_DWORD *)&v78[v304] = 26;
      }
      else if (v711 <= 0xD6)
      {
LABEL_770:
        v78[v304] = 26;
      }
      else
      {
        *(_WORD *)&v78[v304] = 26;
      }
      return v78;
    case 0x1Bu:
      uint64_t v308 = ~v2007;
      unint64_t v1974 = ~(unint64_t)v1971;
      unint64_t v309 = v1918;
      unsigned int v310 = a2[v1918];
      unsigned int v311 = v310 - 2;
      if (v310 < 2)
      {
        uint64_t v78 = a1;
        unint64_t v313 = v52;
      }
      else
      {
        if (v1918 <= 3) {
          uint64_t v312 = v1918;
        }
        else {
          uint64_t v312 = 4;
        }
        uint64_t v78 = a1;
        unint64_t v313 = v52;
        uint64_t v87 = ~v2046;
        switch(v312)
        {
          case 1:
            int v314 = *a2;
            goto LABEL_778;
          case 2:
            int v314 = *(unsigned __int16 *)a2;
            goto LABEL_778;
          case 3:
            int v314 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            uint64_t v87 = ~v2046;
            goto LABEL_778;
          case 4:
            int v314 = *(_DWORD *)a2;
LABEL_778:
            if (v1918 < 4)
            {
              uint64_t v87 = ~v2046;
              unsigned int v310 = (v314 | (v311 << (8 * v1918))) + 2;
            }
            else
            {
              unsigned int v310 = v314 + 2;
            }
            break;
          default:
            break;
        }
      }
      if (v310 == 1)
      {
        unsigned int v712 = a2[v1908];
        unsigned int v713 = v712 - 8;
        if (v712 >= 8)
        {
          if (v1908 <= 3) {
            uint64_t v714 = v1908;
          }
          else {
            uint64_t v714 = 4;
          }
          switch(v714)
          {
            case 1:
              int v715 = *a2;
              goto LABEL_1230;
            case 2:
              int v715 = *(unsigned __int16 *)a2;
              goto LABEL_1230;
            case 3:
              int v715 = *(unsigned __int16 *)a2 | (a2[2] << 16);
              goto LABEL_1230;
            case 4:
              int v715 = *(_DWORD *)a2;
LABEL_1230:
              if (v1908 < 4) {
                unsigned int v712 = (v715 | (v713 << (8 * v1908))) + 8;
              }
              else {
                unsigned int v712 = v715 + 8;
              }
              break;
            default:
              break;
          }
        }
        uint64_t v1171 = ~v63;
        switch(v712)
        {
          case 1u:
            uint64_t v1887 = v87;
            uint64_t v1177 = ~v2039;
            uint64_t v1981 = ~v33;
            unint64_t v1966 = ~(unint64_t)v1975;
            uint64_t v1994 = v92;
            uint64_t v2033 = ~v2024;
            size_t v2043 = v36;
            unint64_t v2084 = v34;
            v1178 = *(void (**)(void))(v2021 + 16);
            ((void (*)(unsigned char *, unsigned __int8 *, uint64_t))v1178)(v78, a2, v1961);
            v1179 = (void *)((unint64_t)&v78[v1901] & v308);
            v1180 = (const void *)((unint64_t)&a2[v1901] & v308);
            v2059 = v1179;
            if (v1921 == v1927)
            {
              int v1181 = (*(uint64_t (**)(const void *))(v2021 + 48))(v1180);
LABEL_1406:
              uint64_t v1246 = v1892;
              uint64_t v1247 = ~v2008;
              uint64_t v1244 = v1177;
LABEL_1407:
              if (v1181)
              {
LABEL_1408:
                memcpy(v1179, v1180, v2043);
                unint64_t v1379 = v1908;
                uint64_t v1380 = v2046;
LABEL_1409:
                size_t v1381 = __n;
                goto LABEL_1502;
              }
              unint64_t v1219 = ((unint64_t)v1180 + v1949) & v1244;
              unint64_t v1220 = (v1916 + v1219) & v1981;
LABEL_1411:
              v1382 = v1180;
              uint64_t v1383 = v1244;
              v2068 = v1382;
              v1178(v1179);
              ((void (*)(unint64_t, unint64_t, uint64_t))v1178)(((unint64_t)v1179 + v1949) & v1383, v1219, v1961);
              unint64_t v1384 = (v1916 + (((unint64_t)v1179 + v1949) & v1383)) & v1981;
              (*(void (**)(unint64_t, unint64_t, uint64_t))(v1943 + 16))(v1384, v1220, v1942);
              v1385 = (void *)((v1947 + v1384) & 0xFFFFFFFFFFFFFFF8);
              v1386 = (void *)((v1947 + v1220) & 0xFFFFFFFFFFFFFFF8);
              void *v1385 = *v1386;
              unint64_t v1387 = ((unint64_t)v1385 + v1939) & v1994;
              unint64_t v1388 = ((unint64_t)v1386 + v1939) & v1994;
              v1389 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1945 + 16);
              swift_bridgeObjectRetain();
              v1389(v1387, v1388, v1944);
              v1390 = (void *)((v1933 + v1388) & 0xFFFFFFFFFFFFFFF8);
              v1391 = (void *)((v1933 + v1387) & 0xFFFFFFFFFFFFFFF8);
              void *v1391 = *v1390;
              v1392 = (void *)(((unint64_t)v1391 + 15) & 0xFFFFFFFFFFFFFFF8);
              v1393 = (void *)(((unint64_t)v1390 + 15) & 0xFFFFFFFFFFFFFFF8);
              void *v1392 = *v1393;
              v1392[1] = v1393[1];
              v1394 = (void *)(v1384 + v2084);
              void *v1394 = *(void *)(v1220 + v2084);
              v1394[1] = *(void *)(v1220 + v2084 + 8);
              unint64_t v1395 = (v2018 + v1384 + v2084) & v2033;
              unint64_t v1396 = (v2018 + v1220 + v2084) & v2033;
              *(unsigned char *)unint64_t v1395 = *(unsigned char *)v1396;
              uint64_t v1397 = v1395 | 4;
              int v1398 = *(_DWORD *)(v1396 | 4);
              *(unsigned char *)(v1397 + 4) = *(unsigned char *)((v1396 | 4) + 4);
              *(_DWORD *)uint64_t v1397 = v1398;
              *(_WORD *)(v1395 + 10) = *(_WORD *)(v1396 + 0xA);
              unint64_t v2092 = v1395;
              unint64_t v1399 = (v1956 + v1395) & v1974;
              unint64_t v2045 = v1396;
              unint64_t v1400 = (v1956 + v1396) & v1974;
              v1401 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1954 + 16);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v1401(v1399, v1400, v1957);
              unint64_t v1402 = (v1953 + v1399) & v1974;
              unint64_t v1403 = (v1953 + v1400) & v1974;
              v1401(v1402, v1403, v1957);
              v1404 = (unsigned char *)(v1402 + v1958);
              unsigned char *v1404 = *(unsigned char *)(v1403 + v1958);
              v1404[1] = *(unsigned char *)(v1403 + v1958 + 1);
              v1404[2] = *(unsigned char *)(v1403 + v1958 + 2);
              v1404[3] = *(unsigned char *)(v1403 + v1958 + 3);
              v1404[4] = *(unsigned char *)(v1403 + v1958 + 4);
              unint64_t v1405 = (v1402 + v1958 + 12) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v1406 = (v1403 + v1958 + 12) & 0xFFFFFFFFFFFFFFF8;
              *(void *)unint64_t v1405 = *(void *)v1406;
              *(void *)(v1405 + 8) = *(void *)(v1406 + 8);
              *(unsigned char *)(v1405 + 16) = *(unsigned char *)(v1406 + 16);
              *(unsigned char *)(v1405 + 17) = *(unsigned char *)(v1406 + 17);
              *(unsigned char *)(v1405 + 18) = *(unsigned char *)(v1406 + 18);
              *(unsigned char *)(v1405 + 19) = *(unsigned char *)(v1406 + 19);
              unint64_t v1407 = (v1405 + 27) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v1408 = (v1406 + 27) & 0xFFFFFFFFFFFFFFF8;
              *(void *)unint64_t v1407 = *(void *)v1408;
              *(unsigned char *)(v1407 + 8) = *(unsigned char *)(v1408 + 8);
              *(unsigned char *)(v1407 + 9) = *(unsigned char *)(v1408 + 9);
              *(unsigned char *)(v1407 + 10) = *(unsigned char *)(v1408 + 10);
              *(unsigned char *)(v1407 + 11) = *(unsigned char *)(v1408 + 11);
              *(unsigned char *)(v1407 + 12) = *(unsigned char *)(v1408 + 12);
              v1409 = (void *)((v1406 + 47) & 0xFFFFFFFFFFFFFFF8);
              v1410 = (void *)((v1405 + 47) & 0xFFFFFFFFFFFFFFF8);
              void *v1410 = *v1409;
              unint64_t v1411 = ((unint64_t)v1410 + 15) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v1412 = ((unint64_t)v1409 + 15) & 0xFFFFFFFFFFFFFFF8;
              *(void *)unint64_t v1411 = *(void *)v1412;
              *(unsigned char *)(v1411 + 8) = *(unsigned char *)(v1412 + 8);
              *(unsigned char *)(v1411 + 9) = *(unsigned char *)(v1412 + 9);
              v1413 = (void *)((v1951 + v1411) & v1974);
              v1414 = (const void *)((v1951 + v1412) & v1974);
              v1415 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v1954 + 48);
              swift_bridgeObjectRetain();
              if (v1415(v1414, 1, v1957))
              {
                memcpy(v1413, v1414, __n);
              }
              else
              {
                v1401((unint64_t)v1413, (unint64_t)v1414, v1957);
                (*(void (**)(void *, void, uint64_t, uint64_t))(v1954 + 56))(v1413, 0, 1, v1957);
              }
              unint64_t v1379 = v1908;
              v1416 = (void *)(((unint64_t)v1413 + v1952) & 0xFFFFFFFFFFFFFFF8);
              v1417 = (void *)(((unint64_t)v1414 + v1952) & 0xFFFFFFFFFFFFFFF8);
              void *v1416 = *v1417;
              unint64_t v1418 = ((unint64_t)v1416 + 15) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v1419 = ((unint64_t)v1417 + 15) & 0xFFFFFFFFFFFFFFF8;
              uint64_t v1420 = *(void *)v1419;
              *(unsigned char *)(v1418 + 8) = *(unsigned char *)(v1419 + 8);
              *(void *)unint64_t v1418 = v1420;
              v1421 = (void *)(((unint64_t)v1416 + 31) & 0xFFFFFFFFFFFFFFF8);
              v1422 = (void *)(((unint64_t)v1417 + 31) & 0xFFFFFFFFFFFFFFF8);
              void *v1421 = *v1422;
              unint64_t v1423 = ((unint64_t)v1421 + 15) & 0xFFFFFFFFFFFFFFF8;
              v1424 = (uint64_t *)(((unint64_t)v1422 + 15) & 0xFFFFFFFFFFFFFFF8);
              unint64_t v1425 = v1424[1];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if ((v1425 & 0x3000000000000000) != 0)
              {
                *(_OWORD *)unint64_t v1423 = *(_OWORD *)v1424;
              }
              else
              {
                uint64_t v1426 = *v1424;
                sub_10001EBB0(*v1424, v1425);
                *(void *)unint64_t v1423 = v1426;
                *(void *)(v1423 + 8) = v1425;
              }
              uint64_t v1380 = v2046;
              unint64_t v1427 = (v1423 + 19) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v1428 = ((unint64_t)v1424 + 19) & 0xFFFFFFFFFFFFFFF8;
              uint64_t v1429 = *(void *)v1428;
              *(unsigned char *)(v1427 + 8) = *(unsigned char *)(v1428 + 8);
              *(void *)unint64_t v1427 = v1429;
              *(unsigned char *)(v1427 + 9) = *(unsigned char *)(v1428 + 9);
              unint64_t v1430 = (v1427 + 13) & 0xFFFFFFFFFFFFFFFCLL;
              unint64_t v1431 = (v1428 + 13) & 0xFFFFFFFFFFFFFFFCLL;
              int v1432 = *(_DWORD *)v1431;
              *(unsigned char *)(v1430 + 4) = *(unsigned char *)(v1431 + 4);
              *(_DWORD *)unint64_t v1430 = v1432;
              v1433 = (void *)((v1427 + 25) & 0xFFFFFFFFFFFFFFF8);
              v1434 = (void *)((v1428 + 25) & 0xFFFFFFFFFFFFFFF8);
              void *v1433 = *v1434;
              v1433[1] = v1434[1];
              unint64_t v1435 = v2092 + v1989;
              v1436 = (long long *)(v2045 + v1989);
              unint64_t v1437 = *(void *)(v2045 + v1989 + 16);
              if (v1437 >= 0xFFFFFFFF) {
                LODWORD(v1437) = -1;
              }
              int v1438 = v1437 - 1;
              swift_bridgeObjectRetain();
              if (v1438 < 0)
              {
                *(void *)unint64_t v1435 = *(void *)v1436;
                *(unsigned char *)(v1435 + 8) = *((unsigned char *)v1436 + 8);
                *(unsigned char *)(v1435 + 9) = *((unsigned char *)v1436 + 9);
                uint64_t v1451 = *((void *)v1436 + 2);
                swift_errorRetain();
                *(void *)(v1435 + 16) = v1451;
                uint64_t v1452 = *((void *)v1436 + 3);
                swift_errorRetain();
                *(void *)(v1435 + 24) = v1452;
                *(unsigned char *)(v1435 + 32) = *((unsigned char *)v1436 + 32);
                *(unsigned char *)(v1435 + 33) = *((unsigned char *)v1436 + 33);
                *(unsigned char *)(v1435 + 34) = *((unsigned char *)v1436 + 34);
                *(void *)(v1435 + 40) = *((void *)v1436 + 5);
                *(void *)(v1435 + 48) = *((void *)v1436 + 6);
                *(void *)(v1435 + 56) = *((void *)v1436 + 7);
                *(void *)(v1435 + 64) = *((void *)v1436 + 8);
                *(unsigned char *)(v1435 + 72) = *((unsigned char *)v1436 + 72);
                *(void *)(v1435 + 80) = *((void *)v1436 + 10);
                *(void *)(v1435 + 88) = *((void *)v1436 + 11);
                v2093 = (void *)*((void *)v1436 + 12);
                *(void *)(v1435 + 96) = v2093;
                *(unsigned char *)(v1435 + 104) = *((unsigned char *)v1436 + 104);
                *(unsigned char *)(v1435 + 105) = *((unsigned char *)v1436 + 105);
                *(void *)(v1435 + 112) = *((void *)v1436 + 14);
                *(void *)(v1435 + 120) = *((void *)v1436 + 15);
                *(void *)(v1435 + 128) = *((void *)v1436 + 16);
                *(void *)(v1435 + 136) = *((void *)v1436 + 17);
                *(void *)(v1435 + 144) = *((void *)v1436 + 18);
                *(void *)(v1435 + 152) = *((void *)v1436 + 19);
                *(void *)(v1435 + 160) = *((void *)v1436 + 20);
                *(void *)(v1435 + 168) = *((void *)v1436 + 21);
                *(unsigned char *)(v1435 + 176) = *((unsigned char *)v1436 + 176);
                *(void *)(v1435 + 184) = *((void *)v1436 + 23);
                uint64_t v1453 = *((void *)v1436 + 24);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                id v1454 = v2093;
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                if (v1453)
                {
                  *(void *)(v1435 + 192) = v1453;
                  *(void *)(v1435 + 200) = *((void *)v1436 + 25);
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                }
                else
                {
                  *(_OWORD *)(v1435 + 192) = v1436[12];
                }
                *(void *)(v1435 + 208) = *((void *)v1436 + 26);
                *(void *)(v1435 + 216) = *((void *)v1436 + 27);
                *(void *)(v1435 + 224) = *((void *)v1436 + 28);
                *(void *)(v1435 + 232) = *((void *)v1436 + 29);
                *(void *)(v1435 + 240) = *((void *)v1436 + 30);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                uint64_t v78 = a1;
                uint64_t v1246 = v1892;
                unint64_t v1379 = v1908;
                uint64_t v1380 = v2046;
              }
              else
              {
                long long v1439 = *v1436;
                long long v1440 = v1436[1];
                long long v1441 = v1436[3];
                *(_OWORD *)(v1435 + 32) = v1436[2];
                *(_OWORD *)(v1435 + 48) = v1441;
                *(_OWORD *)unint64_t v1435 = v1439;
                *(_OWORD *)(v1435 + 16) = v1440;
                long long v1442 = v1436[4];
                long long v1443 = v1436[5];
                long long v1444 = v1436[7];
                *(_OWORD *)(v1435 + 96) = v1436[6];
                *(_OWORD *)(v1435 + 112) = v1444;
                *(_OWORD *)(v1435 + 64) = v1442;
                *(_OWORD *)(v1435 + 80) = v1443;
                long long v1445 = v1436[8];
                long long v1446 = v1436[9];
                long long v1447 = v1436[11];
                *(_OWORD *)(v1435 + 160) = v1436[10];
                *(_OWORD *)(v1435 + 176) = v1447;
                *(_OWORD *)(v1435 + 128) = v1445;
                *(_OWORD *)(v1435 + 144) = v1446;
                long long v1448 = v1436[12];
                long long v1449 = v1436[13];
                long long v1450 = v1436[14];
                *(void *)(v1435 + 240) = *((void *)v1436 + 30);
                *(_OWORD *)(v1435 + 208) = v1449;
                *(_OWORD *)(v1435 + 224) = v1450;
                *(_OWORD *)(v1435 + 192) = v1448;
                uint64_t v1246 = v1892;
              }
              v1772 = (_OWORD *)((v1435 + 255) & 0xFFFFFFFFFFFFFFF8);
              v1773 = (long long *)(((unint64_t)v1436 + 255) & 0xFFFFFFFFFFFFFFF8);
              long long v1774 = *v1773;
              *(_OWORD *)((char *)v1772 + 9) = *(long long *)((char *)v1773 + 9);
              _OWORD *v1772 = v1774;
              unint64_t v1775 = (v1435 + 287) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v1776 = ((unint64_t)v1436 + 287) & 0xFFFFFFFFFFFFFFF8;
              long long v1777 = *(_OWORD *)v1776;
              *(unsigned char *)(v1775 + 16) = *(unsigned char *)(v1776 + 16);
              *(_OWORD *)unint64_t v1775 = v1777;
              v1778 = (void *)((v1435 + 311) & 0xFFFFFFFFFFFFFFF8);
              unint64_t v1779 = ((unint64_t)v1436 + 311) & 0xFFFFFFFFFFFFFFF8;
              uint64_t v1780 = *(void *)v1779;
              v1779 += 15;
              void *v1778 = v1780;
              v1781 = (void *)(((unint64_t)v1778 + 15) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v1783 = *(void *)(v1779 & 0xFFFFFFFFFFFFFFF8);
              unint64_t v1782 = *(void *)((v1779 & 0xFFFFFFFFFFFFFFF8) + 8);
              sub_10018B584(v1783, v1782);
              void *v1781 = v1783;
              v1781[1] = v1782;
              size_t v1381 = v1958;
              uint64_t v1247 = ~v2008;
              v1180 = v2068;
              if (!v1935) {
                goto LABEL_1409;
              }
LABEL_1502:
              unint64_t v1784 = ((((v1914
                        + ((((((((((v1934 + v1381 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                            + 19) & 0xFFFFFFFFFFFFFFF8)
                          + 25) & 0xFFFFFFFFFFFFFFF8)
                        + 327) & 0xFFFFFFFFFFFFFFF8)
                      + 15) & 0xFFFFFFFFFFFFFFF8)
                    + 16;
              v1785 = (void *)(((unint64_t)v2059 + v1380 + v1784) & v1887);
              v1786 = (const void *)(((unint64_t)v1180 + v1380 + v1784) & v1887);
              if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1960 + 48))(v1786, 1, AssociatedTypeWitness))
              {
                memcpy(v1785, v1786, v1913);
              }
              else
              {
                (*(void (**)(void *, const void *, uint64_t))(v1960 + 16))(v1785, v1786, AssociatedTypeWitness);
                (*(void (**)(void *, void, uint64_t, uint64_t))(v1960 + 56))(v1785, 0, 1, AssociatedTypeWitness);
              }
              v1787 = (char *)(((unint64_t)v1785 + v1900) & v1247);
              v1788 = (char *)(((unint64_t)v1786 + v1900) & v1247);
              if (v1919 == v1930)
              {
                int v1789 = (*(uint64_t (**)(unint64_t))(v1941 + 48))(((unint64_t)v1786 + v1900) & v1247);
              }
              else
              {
                v1790 = (uint64_t *)((unint64_t)&v1788[v1948] & 0xFFFFFFFFFFFFFFF8);
                if (v1909 <= 0x7FFFFFFE)
                {
                  uint64_t v1791 = *v1790;
                  if ((unint64_t)*v1790 >= 0xFFFFFFFF) {
                    LODWORD(v1791) = -1;
                  }
                  if ((v1791 + 1) >= 2) {
                    goto LABEL_1514;
                  }
                  goto LABEL_1516;
                }
                int v1789 = (*(uint64_t (**)(unint64_t))(v1938 + 48))(((unint64_t)v1790 + v1936) & v1966);
              }
              if (v1789)
              {
LABEL_1514:
                unint64_t v1792 = ((((v1932
                          + ((v1975 + 8 + (v1948 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)v1975)) & 0xFFFFFFFFFFFFFFF8)
                        + 15) & 0xFFFFFFFFFFFFFFF8)
                      + 16;
                memcpy(v1787, v1788, v2016);
                uint64_t v1239 = v1246;
LABEL_1517:
                *(void *)&v1787[v1792] = *(void *)&v1788[v1792];
                v1801 = (void *)((unint64_t)&v1787[v1792 + 15] & 0xFFFFFFFFFFFFFFF8);
                v1802 = (void *)((unint64_t)&v1788[v1792 + 15] & 0xFFFFFFFFFFFFFFF8);
                void *v1801 = *v1802;
                v1803 = *(void **)(((unint64_t)v1802 + 15) & 0xFFFFFFFFFFFFFFF8);
                *(void *)(((unint64_t)v1801 + 15) & 0xFFFFFFFFFFFFFFF8) = v1803;
                char v1193 = 1;
                v78[v1379] = 1;
                id v1804 = v1803;
                unint64_t v309 = v1918;
                goto LABEL_1551;
              }
              v1790 = (uint64_t *)((unint64_t)&v1788[v1948] & 0xFFFFFFFFFFFFFFF8);
LABEL_1516:
              (*(void (**)(char *, char *, uint64_t))(v1941 + 16))(v1787, v1788, v1940);
              v1793 = (void *)((unint64_t)&v1787[v1948] & 0xFFFFFFFFFFFFFFF8);
              void *v1793 = *v1790;
              unint64_t v1794 = ((unint64_t)v1793 + v1936) & v1966;
              unint64_t v1795 = ((unint64_t)v1790 + v1936) & v1966;
              v1796 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1938 + 16);
              swift_bridgeObjectRetain();
              v1796(v1794, v1795, v1937);
              v1797 = (void *)((v1932 + v1794) & 0xFFFFFFFFFFFFFFF8);
              v1798 = (void *)((v1932 + v1795) & 0xFFFFFFFFFFFFFFF8);
              void *v1797 = *v1798;
              v1799 = (void *)(((unint64_t)v1797 + 15) & 0xFFFFFFFFFFFFFFF8);
              v1800 = (void *)(((unint64_t)v1798 + 15) & 0xFFFFFFFFFFFFFFF8);
              void *v1799 = *v1800;
              v1799[1] = v1800[1];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              uint64_t v1239 = v1246;
              unint64_t v1792 = ((((v1932
                        + ((v1975 + 8 + (v1948 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)v1975)) & 0xFFFFFFFFFFFFFFF8)
                      + 15) & 0xFFFFFFFFFFFFFFF8)
                    + 16;
              goto LABEL_1517;
            }
            unint64_t v1219 = ((unint64_t)v1180 + v1949) & v1177;
            unint64_t v1220 = (v1916 + v1219) & v1981;
            if (v1931 == v1927)
            {
              if (v1920 == v1931)
              {
                int v1181 = (*(uint64_t (**)(unint64_t))(v1943 + 48))((v1916 + v1219) & v1981);
                goto LABEL_1406;
              }
              v1286 = (unint64_t *)((v1947 + v1220) & 0xFFFFFFFFFFFFFFF8);
              if (v1987 > 0x7FFFFFFE)
              {
                int v1181 = (*(uint64_t (**)(unint64_t))(v1945 + 48))(((unint64_t)v1286 + v1939) & v1994);
                goto LABEL_1406;
              }
              unint64_t v1287 = *v1286;
            }
            else
            {
              unint64_t v1243 = v1220 + v2084;
              if ((v1905 & 0x80000000) == 0)
              {
                uint64_t v1244 = v1177;
                unint64_t v1245 = *(void *)(v1243 + 8);
                if (v1245 >= 0xFFFFFFFF) {
                  LODWORD(v1245) = -1;
                }
                int v1181 = v1245 + 1;
                uint64_t v1246 = v1892;
                uint64_t v1247 = ~v2008;
                goto LABEL_1407;
              }
              unint64_t v1297 = (v1956 + ((v2018 + v1243) & v2033)) & v1974;
              if (v1935 > 0x7FFFFFFD)
              {
                int v1181 = (*(uint64_t (**)(unint64_t))(v1954 + 48))(v1297);
                goto LABEL_1406;
              }
              unint64_t v1287 = *(void *)(((v1903 + ((v1953 + v1297) & v1974)) & 0xFFFFFFFFFFFFFFF8) + 8);
            }
            if (v1287 >= 0xFFFFFFFF) {
              LODWORD(v1287) = -1;
            }
            uint64_t v1246 = v1892;
            uint64_t v1247 = ~v2008;
            uint64_t v1244 = v1177;
            if ((v1287 + 1) >= 2) {
              goto LABEL_1408;
            }
            goto LABEL_1411;
          case 2u:
            unint64_t v1967 = ~(unint64_t)v1975;
            uint64_t v1182 = v87;
            (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v2021 + 16))(v78, a2, v1961);
            v1183 = (void *)((unint64_t)&v78[v1897] & v1182);
            v1184 = (const void *)((unint64_t)&a2[v1897] & v1182);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1960 + 48))(v1184, 1, AssociatedTypeWitness))
            {
              memcpy(v1183, v1184, v53);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v1960 + 16))(v1183, v1184, AssociatedTypeWitness);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v1960 + 56))(v1183, 0, 1, AssociatedTypeWitness);
            }
            v1229 = (char *)(((unint64_t)v1183 + v1900) & v88);
            v1230 = (char *)(((unint64_t)v1184 + v1900) & v88);
            if (v1919 == v1930)
            {
              int v1231 = (*(uint64_t (**)(char *))(v1941 + 48))(v1230);
            }
            else
            {
              v1232 = (uint64_t *)((unint64_t)&v1230[v1948] & 0xFFFFFFFFFFFFFFF8);
              if (v1909 <= 0x7FFFFFFE)
              {
                uint64_t v1233 = *v1232;
                if ((unint64_t)*v1232 >= 0xFFFFFFFF) {
                  LODWORD(v1233) = -1;
                }
                if ((v1233 + 1) >= 2) {
                  goto LABEL_1353;
                }
                goto LABEL_1355;
              }
              int v1231 = (*(uint64_t (**)(unint64_t))(v1938 + 48))(((unint64_t)v1232 + v1936) & v1967);
            }
            if (v1231)
            {
LABEL_1353:
              unint64_t v1260 = ((((v1932
                        + ((v1975 + 8 + (v1948 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)v1975)) & 0xFFFFFFFFFFFFFFF8)
                      + 15) & 0xFFFFFFFFFFFFFFF8)
                    + 16;
              memcpy(v1229, v1230, v2016);
              uint64_t v1239 = v1892;
              goto LABEL_1356;
            }
            v1232 = (uint64_t *)((unint64_t)&v1230[v1948] & 0xFFFFFFFFFFFFFFF8);
LABEL_1355:
            (*(void (**)(char *, char *, uint64_t))(v1941 + 16))(v1229, v1230, v1940);
            v1261 = (void *)((unint64_t)&v1229[v1948] & 0xFFFFFFFFFFFFFFF8);
            void *v1261 = *v1232;
            unint64_t v1262 = ((unint64_t)v1261 + v1936) & v1967;
            unint64_t v1263 = ((unint64_t)v1232 + v1936) & v1967;
            v1264 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1938 + 16);
            swift_bridgeObjectRetain();
            v1264(v1262, v1263, v1937);
            unint64_t v309 = v1918;
            v1265 = (void *)((v1932 + v1262) & 0xFFFFFFFFFFFFFFF8);
            v1266 = (void *)((v1932 + v1263) & 0xFFFFFFFFFFFFFFF8);
            void *v1265 = *v1266;
            v1267 = (void *)(((unint64_t)v1265 + 15) & 0xFFFFFFFFFFFFFFF8);
            v1268 = (void *)(((unint64_t)v1266 + 15) & 0xFFFFFFFFFFFFFFF8);
            void *v1267 = *v1268;
            v1267[1] = v1268[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            uint64_t v1239 = v1892;
            unint64_t v1260 = ((((v1932
                      + ((v1975 + 8 + (v1948 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)v1975)) & 0xFFFFFFFFFFFFFFF8)
                    + 15) & 0xFFFFFFFFFFFFFFF8)
                  + 16;
LABEL_1356:
            v1269 = &v1229[v1260];
            char *v1269 = v1230[v1260];
            v1270 = *(void **)&v1230[v1260 + 8];
            *((void *)v1269 + 1) = v1270;
            v78[v1908] = 2;
            id v1271 = v1270;
            char v1193 = 1;
            goto LABEL_1551;
          case 3u:
            uint64_t v1185 = ~v2039;
            uint64_t v1982 = ~v33;
            uint64_t v1995 = v92;
            uint64_t v2034 = ~v2024;
            size_t v2044 = v36;
            unint64_t v2085 = v34;
            v1186 = *(void (**)(void))(v2021 + 16);
            ((void (*)(unsigned char *, unsigned __int8 *, uint64_t))v1186)(v78, a2, v1961);
            v1187 = (void *)((unint64_t)&v78[v1901] & v308);
            v1188 = (const void *)((unint64_t)&a2[v1901] & v308);
            if (v1921 == v1927)
            {
              int v1189 = (*(uint64_t (**)(const void *))(v2021 + 48))(v1188);
LABEL_1424:
              uint64_t v1239 = v1892;
              uint64_t v1249 = v1185;
LABEL_1425:
              uint64_t v1455 = v1916;
              if (v1189)
              {
LABEL_1426:
                memcpy(v1187, v1188, v2044);
                unint64_t v1456 = v1908;
                goto LABEL_1427;
              }
              unint64_t v1221 = ((unint64_t)v1188 + v1949) & v1249;
              unint64_t v1222 = (v1916 + v1221) & v1982;
LABEL_1429:
              v1458 = v1188;
              uint64_t v1459 = v1249;
              v2060 = v1458;
              v1186(v1187);
              unint64_t v1460 = ((unint64_t)v1187 + v1949) & v1459;
              ((void (*)(unint64_t, unint64_t, uint64_t))v1186)(v1460, v1221, v1961);
              unint64_t v1461 = (v1455 + v1460) & v1982;
              (*(void (**)(unint64_t, unint64_t, uint64_t))(v1943 + 16))(v1461, v1222, v1942);
              v1462 = (void *)((v1947 + v1461) & 0xFFFFFFFFFFFFFFF8);
              v1463 = (void *)((v1947 + v1222) & 0xFFFFFFFFFFFFFFF8);
              void *v1462 = *v1463;
              unint64_t v1464 = ((unint64_t)v1462 + v1939) & v1995;
              unint64_t v1465 = ((unint64_t)v1463 + v1939) & v1995;
              v1466 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1945 + 16);
              swift_bridgeObjectRetain();
              v1466(v1464, v1465, v1944);
              v1467 = (void *)((v1933 + v1465) & 0xFFFFFFFFFFFFFFF8);
              v1468 = (void *)((v1933 + v1464) & 0xFFFFFFFFFFFFFFF8);
              void *v1468 = *v1467;
              v1469 = (void *)(((unint64_t)v1468 + 15) & 0xFFFFFFFFFFFFFFF8);
              v1470 = (void *)(((unint64_t)v1467 + 15) & 0xFFFFFFFFFFFFFFF8);
              void *v1469 = *v1470;
              v1469[1] = v1470[1];
              v1471 = (void *)(v1461 + v2085);
              void *v1471 = *(void *)(v1222 + v2085);
              v1471[1] = *(void *)(v1222 + v2085 + 8);
              unint64_t v1472 = (v2018 + v1461 + v2085) & v2034;
              unint64_t v1473 = (v2018 + v1222 + v2085) & v2034;
              *(unsigned char *)unint64_t v1472 = *(unsigned char *)v1473;
              uint64_t v1474 = v1472 | 4;
              int v1475 = *(_DWORD *)(v1473 | 4);
              *(unsigned char *)(v1474 + 4) = *(unsigned char *)((v1473 | 4) + 4);
              *(_DWORD *)uint64_t v1474 = v1475;
              *(_WORD *)(v1472 + 10) = *(_WORD *)(v1473 + 0xA);
              unint64_t v2094 = v1472;
              unint64_t v1476 = (v1956 + v1472) & v1974;
              unint64_t v2053 = v1473;
              unint64_t v1477 = (v1956 + v1473) & v1974;
              v1478 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1954 + 16);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v1478(v1476, v1477, v1957);
              unint64_t v1479 = (v1953 + v1476) & v1974;
              unint64_t v1480 = (v1953 + v1477) & v1974;
              v1478(v1479, v1480, v1957);
              v1481 = (unsigned char *)(v1479 + v1958);
              unsigned char *v1481 = *(unsigned char *)(v1480 + v1958);
              v1481[1] = *(unsigned char *)(v1480 + v1958 + 1);
              v1481[2] = *(unsigned char *)(v1480 + v1958 + 2);
              v1481[3] = *(unsigned char *)(v1480 + v1958 + 3);
              v1481[4] = *(unsigned char *)(v1480 + v1958 + 4);
              unint64_t v1482 = (v1479 + v1958 + 12) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v1483 = (v1480 + v1958 + 12) & 0xFFFFFFFFFFFFFFF8;
              *(void *)unint64_t v1482 = *(void *)v1483;
              *(void *)(v1482 + 8) = *(void *)(v1483 + 8);
              *(unsigned char *)(v1482 + 16) = *(unsigned char *)(v1483 + 16);
              *(unsigned char *)(v1482 + 17) = *(unsigned char *)(v1483 + 17);
              *(unsigned char *)(v1482 + 18) = *(unsigned char *)(v1483 + 18);
              *(unsigned char *)(v1482 + 19) = *(unsigned char *)(v1483 + 19);
              unint64_t v1484 = (v1482 + 27) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v1485 = (v1483 + 27) & 0xFFFFFFFFFFFFFFF8;
              *(void *)unint64_t v1484 = *(void *)v1485;
              *(unsigned char *)(v1484 + 8) = *(unsigned char *)(v1485 + 8);
              *(unsigned char *)(v1484 + 9) = *(unsigned char *)(v1485 + 9);
              *(unsigned char *)(v1484 + 10) = *(unsigned char *)(v1485 + 10);
              *(unsigned char *)(v1484 + 11) = *(unsigned char *)(v1485 + 11);
              *(unsigned char *)(v1484 + 12) = *(unsigned char *)(v1485 + 12);
              v1486 = (void *)((v1483 + 47) & 0xFFFFFFFFFFFFFFF8);
              v1487 = (void *)((v1482 + 47) & 0xFFFFFFFFFFFFFFF8);
              void *v1487 = *v1486;
              unint64_t v1488 = ((unint64_t)v1487 + 15) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v1489 = ((unint64_t)v1486 + 15) & 0xFFFFFFFFFFFFFFF8;
              *(void *)unint64_t v1488 = *(void *)v1489;
              *(unsigned char *)(v1488 + 8) = *(unsigned char *)(v1489 + 8);
              *(unsigned char *)(v1488 + 9) = *(unsigned char *)(v1489 + 9);
              v1490 = (void *)((v1951 + v1488) & v1974);
              v1491 = (const void *)((v1951 + v1489) & v1974);
              v1492 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v1954 + 48);
              swift_bridgeObjectRetain();
              if (v1492(v1491, 1, v1957))
              {
                memcpy(v1490, v1491, __n);
              }
              else
              {
                v1478((unint64_t)v1490, (unint64_t)v1491, v1957);
                (*(void (**)(void *, void, uint64_t, uint64_t))(v1954 + 56))(v1490, 0, 1, v1957);
              }
              unint64_t v1456 = v1908;
              v1493 = (void *)(((unint64_t)v1490 + v1952) & 0xFFFFFFFFFFFFFFF8);
              v1494 = (void *)(((unint64_t)v1491 + v1952) & 0xFFFFFFFFFFFFFFF8);
              void *v1493 = *v1494;
              unint64_t v1495 = ((unint64_t)v1493 + 15) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v1496 = ((unint64_t)v1494 + 15) & 0xFFFFFFFFFFFFFFF8;
              uint64_t v1497 = *(void *)v1496;
              *(unsigned char *)(v1495 + 8) = *(unsigned char *)(v1496 + 8);
              *(void *)unint64_t v1495 = v1497;
              v1498 = (void *)(((unint64_t)v1493 + 31) & 0xFFFFFFFFFFFFFFF8);
              v1499 = (void *)(((unint64_t)v1494 + 31) & 0xFFFFFFFFFFFFFFF8);
              void *v1498 = *v1499;
              unint64_t v1500 = ((unint64_t)v1498 + 15) & 0xFFFFFFFFFFFFFFF8;
              v1501 = (uint64_t *)(((unint64_t)v1499 + 15) & 0xFFFFFFFFFFFFFFF8);
              unint64_t v1502 = v1501[1];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if ((v1502 & 0x3000000000000000) != 0)
              {
                *(_OWORD *)unint64_t v1500 = *(_OWORD *)v1501;
              }
              else
              {
                uint64_t v1503 = *v1501;
                sub_10001EBB0(*v1501, v1502);
                *(void *)unint64_t v1500 = v1503;
                *(void *)(v1500 + 8) = v1502;
              }
              unint64_t v1504 = (v1500 + 19) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v1505 = ((unint64_t)v1501 + 19) & 0xFFFFFFFFFFFFFFF8;
              uint64_t v1506 = *(void *)v1505;
              *(unsigned char *)(v1504 + 8) = *(unsigned char *)(v1505 + 8);
              *(void *)unint64_t v1504 = v1506;
              *(unsigned char *)(v1504 + 9) = *(unsigned char *)(v1505 + 9);
              unint64_t v1507 = (v1504 + 13) & 0xFFFFFFFFFFFFFFFCLL;
              unint64_t v1508 = (v1505 + 13) & 0xFFFFFFFFFFFFFFFCLL;
              int v1509 = *(_DWORD *)v1508;
              *(unsigned char *)(v1507 + 4) = *(unsigned char *)(v1508 + 4);
              *(_DWORD *)unint64_t v1507 = v1509;
              v1510 = (void *)((v1504 + 25) & 0xFFFFFFFFFFFFFFF8);
              v1511 = (void *)((v1505 + 25) & 0xFFFFFFFFFFFFFFF8);
              void *v1510 = *v1511;
              v1510[1] = v1511[1];
              unint64_t v1512 = v2094 + v1989;
              v1513 = (long long *)(v2053 + v1989);
              unint64_t v1514 = *(void *)(v2053 + v1989 + 16);
              if (v1514 >= 0xFFFFFFFF) {
                LODWORD(v1514) = -1;
              }
              int v1515 = v1514 - 1;
              swift_bridgeObjectRetain();
              if (v1515 < 0)
              {
                *(void *)unint64_t v1512 = *(void *)v1513;
                *(unsigned char *)(v1512 + 8) = *((unsigned char *)v1513 + 8);
                *(unsigned char *)(v1512 + 9) = *((unsigned char *)v1513 + 9);
                uint64_t v1528 = *((void *)v1513 + 2);
                swift_errorRetain();
                *(void *)(v1512 + 16) = v1528;
                uint64_t v1529 = *((void *)v1513 + 3);
                swift_errorRetain();
                *(void *)(v1512 + 24) = v1529;
                *(unsigned char *)(v1512 + 32) = *((unsigned char *)v1513 + 32);
                *(unsigned char *)(v1512 + 33) = *((unsigned char *)v1513 + 33);
                *(unsigned char *)(v1512 + 34) = *((unsigned char *)v1513 + 34);
                *(void *)(v1512 + 40) = *((void *)v1513 + 5);
                *(void *)(v1512 + 48) = *((void *)v1513 + 6);
                *(void *)(v1512 + 56) = *((void *)v1513 + 7);
                *(void *)(v1512 + 64) = *((void *)v1513 + 8);
                *(unsigned char *)(v1512 + 72) = *((unsigned char *)v1513 + 72);
                *(void *)(v1512 + 80) = *((void *)v1513 + 10);
                *(void *)(v1512 + 88) = *((void *)v1513 + 11);
                v2095 = (void *)*((void *)v1513 + 12);
                *(void *)(v1512 + 96) = v2095;
                *(unsigned char *)(v1512 + 104) = *((unsigned char *)v1513 + 104);
                *(unsigned char *)(v1512 + 105) = *((unsigned char *)v1513 + 105);
                *(void *)(v1512 + 112) = *((void *)v1513 + 14);
                *(void *)(v1512 + 120) = *((void *)v1513 + 15);
                *(void *)(v1512 + 128) = *((void *)v1513 + 16);
                *(void *)(v1512 + 136) = *((void *)v1513 + 17);
                *(void *)(v1512 + 144) = *((void *)v1513 + 18);
                *(void *)(v1512 + 152) = *((void *)v1513 + 19);
                *(void *)(v1512 + 160) = *((void *)v1513 + 20);
                *(void *)(v1512 + 168) = *((void *)v1513 + 21);
                *(unsigned char *)(v1512 + 176) = *((unsigned char *)v1513 + 176);
                *(void *)(v1512 + 184) = *((void *)v1513 + 23);
                uint64_t v1530 = *((void *)v1513 + 24);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                id v1531 = v2095;
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                if (v1530)
                {
                  *(void *)(v1512 + 192) = v1530;
                  *(void *)(v1512 + 200) = *((void *)v1513 + 25);
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                }
                else
                {
                  *(_OWORD *)(v1512 + 192) = v1513[12];
                }
                *(void *)(v1512 + 208) = *((void *)v1513 + 26);
                *(void *)(v1512 + 216) = *((void *)v1513 + 27);
                *(void *)(v1512 + 224) = *((void *)v1513 + 28);
                *(void *)(v1512 + 232) = *((void *)v1513 + 29);
                *(void *)(v1512 + 240) = *((void *)v1513 + 30);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                uint64_t v78 = a1;
                unint64_t v1456 = v1908;
              }
              else
              {
                long long v1516 = *v1513;
                long long v1517 = v1513[1];
                long long v1518 = v1513[3];
                *(_OWORD *)(v1512 + 32) = v1513[2];
                *(_OWORD *)(v1512 + 48) = v1518;
                *(_OWORD *)unint64_t v1512 = v1516;
                *(_OWORD *)(v1512 + 16) = v1517;
                long long v1519 = v1513[4];
                long long v1520 = v1513[5];
                long long v1521 = v1513[7];
                *(_OWORD *)(v1512 + 96) = v1513[6];
                *(_OWORD *)(v1512 + 112) = v1521;
                *(_OWORD *)(v1512 + 64) = v1519;
                *(_OWORD *)(v1512 + 80) = v1520;
                long long v1522 = v1513[8];
                long long v1523 = v1513[9];
                long long v1524 = v1513[11];
                *(_OWORD *)(v1512 + 160) = v1513[10];
                *(_OWORD *)(v1512 + 176) = v1524;
                *(_OWORD *)(v1512 + 128) = v1522;
                *(_OWORD *)(v1512 + 144) = v1523;
                long long v1525 = v1513[12];
                long long v1526 = v1513[13];
                long long v1527 = v1513[14];
                *(void *)(v1512 + 240) = *((void *)v1513 + 30);
                *(_OWORD *)(v1512 + 208) = v1526;
                *(_OWORD *)(v1512 + 224) = v1527;
                *(_OWORD *)(v1512 + 192) = v1525;
              }
              v1188 = v2060;
              v1805 = (_OWORD *)((v1512 + 255) & 0xFFFFFFFFFFFFFFF8);
              v1806 = (long long *)(((unint64_t)v1513 + 255) & 0xFFFFFFFFFFFFFFF8);
              long long v1807 = *v1806;
              *(_OWORD *)((char *)v1805 + 9) = *(long long *)((char *)v1806 + 9);
              _OWORD *v1805 = v1807;
              unint64_t v1808 = (v1512 + 287) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v1809 = ((unint64_t)v1513 + 287) & 0xFFFFFFFFFFFFFFF8;
              long long v1810 = *(_OWORD *)v1809;
              *(unsigned char *)(v1808 + 16) = *(unsigned char *)(v1809 + 16);
              *(_OWORD *)unint64_t v1808 = v1810;
              v1811 = (void *)((v1512 + 311) & 0xFFFFFFFFFFFFFFF8);
              v1812 = (void *)(((unint64_t)v1513 + 311) & 0xFFFFFFFFFFFFFFF8);
              void *v1811 = *v1812;
              v1813 = (void *)(((unint64_t)v1811 + 15) & 0xFFFFFFFFFFFFFFF8);
              v1814 = (uint64_t *)(((unint64_t)v1812 + 15) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v1815 = *v1814;
              unint64_t v1816 = v1814[1];
              sub_10018B584(*v1814, v1816);
              void *v1813 = v1815;
              v1813[1] = v1816;
              uint64_t v1239 = v1892;
              size_t v1457 = v1958;
              if (v1935)
              {
LABEL_1521:
                unint64_t v1817 = ((((v1914
                          + ((((((((((v1934 + v1457 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                              + 19) & 0xFFFFFFFFFFFFFFF8)
                            + 25) & 0xFFFFFFFFFFFFFFF8)
                          + 327) & 0xFFFFFFFFFFFFFFF8)
                        + 15) & 0xFFFFFFFFFFFFFFF8)
                      + 16;
                v1818 = (void *)(((unint64_t)v1187 + v1817) & 0xFFFFFFFFFFFFFFF8);
                v1819 = (void *)(((unint64_t)v1188 + v1817) & 0xFFFFFFFFFFFFFFF8);
                void *v1818 = *v1819;
                v1818[1] = v1819[1];
                *(void *)(((unint64_t)v1818 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v1819
                                                                                                + 23) & 0xFFFFFFFFFFFFFFF8);
                v78[v1456] = 3;
                swift_bridgeObjectRetain();
                char v1193 = 1;
                unint64_t v309 = v1918;
                goto LABEL_1551;
              }
LABEL_1427:
              size_t v1457 = __n;
              goto LABEL_1521;
            }
            unint64_t v1221 = ((unint64_t)v1188 + v1949) & v1185;
            unint64_t v1222 = (v1916 + v1221) & v1982;
            if (v1931 == v1927)
            {
              if (v1920 == v1931)
              {
                int v1189 = (*(uint64_t (**)(unint64_t))(v1943 + 48))((v1916 + v1221) & v1982);
                goto LABEL_1424;
              }
              v1288 = (unint64_t *)((v1947 + v1222) & 0xFFFFFFFFFFFFFFF8);
              if (v1987 > 0x7FFFFFFE)
              {
                int v1189 = (*(uint64_t (**)(unint64_t))(v1945 + 48))(((unint64_t)v1288 + v1939) & v1995);
                goto LABEL_1424;
              }
              unint64_t v1289 = *v1288;
            }
            else
            {
              unint64_t v1248 = v1222 + v2085;
              if ((v1905 & 0x80000000) == 0)
              {
                uint64_t v1249 = v1185;
                unint64_t v1250 = *(void *)(v1248 + 8);
                if (v1250 >= 0xFFFFFFFF) {
                  LODWORD(v1250) = -1;
                }
                int v1189 = v1250 + 1;
                uint64_t v1239 = v1892;
                goto LABEL_1425;
              }
              unint64_t v1298 = (v1956 + ((v2018 + v1248) & v2034)) & v1974;
              if (v1935 > 0x7FFFFFFD)
              {
                int v1189 = (*(uint64_t (**)(unint64_t))(v1954 + 48))(v1298);
                goto LABEL_1424;
              }
              unint64_t v1289 = *(void *)(((v1903 + ((v1953 + v1298) & v1974)) & 0xFFFFFFFFFFFFFFF8) + 8);
            }
            if (v1289 >= 0xFFFFFFFF) {
              LODWORD(v1289) = -1;
            }
            uint64_t v1239 = v1892;
            uint64_t v1249 = v1185;
            uint64_t v1455 = v1916;
            if ((v1289 + 1) >= 2) {
              goto LABEL_1426;
            }
            goto LABEL_1429;
          case 4u:
            (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v2021 + 16))(v78, a2, v1961);
            char v1190 = 4;
            goto LABEL_1247;
          case 5u:
            (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v2021 + 16))(v78, a2, v1961);
            char v1190 = 5;
            goto LABEL_1247;
          case 6u:
            (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v2021 + 16))(v78, a2, v1961);
            v1191 = (void *)((unint64_t)&v78[v1896] & v1171);
            v1192 = (const void *)((unint64_t)&a2[v1896] & v1171);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1895 + 48))(v1192, 1, v2004))
            {
              memcpy(v1191, v1192, v1893);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v1895 + 16))(v1191, v1192, v2004);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v1895 + 56))(v1191, 0, 1, v2004);
            }
            uint64_t v1239 = v1892;
            v78[v1908] = 6;
            char v1193 = 1;
            goto LABEL_1551;
          case 7u:
            (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v2021 + 16))(v78, a2, v1961);
            char v1190 = 7;
LABEL_1247:
            v78[v1908] = v1190;
            char v1193 = 1;
            goto LABEL_1326;
          default:
            uint64_t v1172 = ~v2039;
            uint64_t v1980 = ~v33;
            uint64_t v1993 = v92;
            uint64_t v2032 = ~v2024;
            size_t v2042 = v36;
            unint64_t v2083 = v34;
            v1173 = *(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v2021 + 16);
            v1173(v78, a2, v1961);
            v1174 = (unsigned char *)((unint64_t)&v78[v1901] & v308);
            v1175 = (void *)((unint64_t)&a2[v1901] & v308);
            v2067 = v1175;
            if (v1921 == v1927)
            {
              int v1176 = (*(uint64_t (**)(void *))(v2021 + 48))(v1175);
LABEL_1388:
              uint64_t v1239 = v1892;
              uint64_t v1241 = v1172;
LABEL_1389:
              uint64_t v1302 = v1916;
              if (v1176)
              {
LABEL_1390:
                memcpy(v1174, v1175, v2042);
                unint64_t v1303 = v1908;
                unint64_t v309 = v1918;
                goto LABEL_1391;
              }
              unint64_t v1217 = ((unint64_t)v1175 + v1949) & v1241;
              unint64_t v1218 = (v1916 + v1217) & v1980;
LABEL_1393:
              v1305 = (unsigned __int8 *)v1175;
              uint64_t v1306 = v1241;
              v1173(v1174, v1305, v1961);
              unint64_t v1307 = (unint64_t)&v1174[v1949] & v1306;
              v1173((unsigned char *)v1307, (unsigned __int8 *)v1217, v1961);
              unint64_t v1308 = (v1302 + v1307) & v1980;
              (*(void (**)(unint64_t, unint64_t, uint64_t))(v1943 + 16))(v1308, v1218, v1942);
              v1309 = (void *)((v1947 + v1308) & 0xFFFFFFFFFFFFFFF8);
              v1310 = (void *)((v1947 + v1218) & 0xFFFFFFFFFFFFFFF8);
              void *v1309 = *v1310;
              unint64_t v1311 = ((unint64_t)v1309 + v1939) & v1993;
              unint64_t v1312 = ((unint64_t)v1310 + v1939) & v1993;
              v1313 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1945 + 16);
              swift_bridgeObjectRetain();
              v1313(v1311, v1312, v1944);
              v1314 = (void *)((v1933 + v1312) & 0xFFFFFFFFFFFFFFF8);
              v1315 = (void *)((v1933 + v1311) & 0xFFFFFFFFFFFFFFF8);
              void *v1315 = *v1314;
              v1316 = (void *)(((unint64_t)v1315 + 15) & 0xFFFFFFFFFFFFFFF8);
              v1317 = (void *)(((unint64_t)v1314 + 15) & 0xFFFFFFFFFFFFFFF8);
              void *v1316 = *v1317;
              v1316[1] = v1317[1];
              v1318 = (void *)(v1308 + v2083);
              void *v1318 = *(void *)(v1218 + v2083);
              v1318[1] = *(void *)(v1218 + v2083 + 8);
              unint64_t v1319 = (v2018 + v1308 + v2083) & v2032;
              unint64_t v1320 = (v2018 + v1218 + v2083) & v2032;
              *(unsigned char *)unint64_t v1319 = *(unsigned char *)v1320;
              uint64_t v1321 = v1319 | 4;
              int v1322 = *(_DWORD *)(v1320 | 4);
              *(unsigned char *)(v1321 + 4) = *(unsigned char *)((v1320 | 4) + 4);
              *(_DWORD *)uint64_t v1321 = v1322;
              *(_WORD *)(v1319 + 10) = *(_WORD *)(v1320 + 0xA);
              unint64_t v2090 = v1319;
              unint64_t v1323 = (v1956 + v1319) & v1974;
              unint64_t v2052 = v1320;
              unint64_t v1324 = (v1956 + v1320) & v1974;
              v1325 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1954 + 16);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v1325(v1323, v1324, v1957);
              unint64_t v1326 = (v1953 + v1323) & v1974;
              unint64_t v1327 = (v1953 + v1324) & v1974;
              v1325(v1326, v1327, v1957);
              v1328 = (unsigned char *)(v1326 + v1958);
              unsigned char *v1328 = *(unsigned char *)(v1327 + v1958);
              v1328[1] = *(unsigned char *)(v1327 + v1958 + 1);
              v1328[2] = *(unsigned char *)(v1327 + v1958 + 2);
              v1328[3] = *(unsigned char *)(v1327 + v1958 + 3);
              v1328[4] = *(unsigned char *)(v1327 + v1958 + 4);
              unint64_t v1329 = (v1326 + v1958 + 12) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v1330 = (v1327 + v1958 + 12) & 0xFFFFFFFFFFFFFFF8;
              *(void *)unint64_t v1329 = *(void *)v1330;
              *(void *)(v1329 + 8) = *(void *)(v1330 + 8);
              *(unsigned char *)(v1329 + 16) = *(unsigned char *)(v1330 + 16);
              *(unsigned char *)(v1329 + 17) = *(unsigned char *)(v1330 + 17);
              *(unsigned char *)(v1329 + 18) = *(unsigned char *)(v1330 + 18);
              *(unsigned char *)(v1329 + 19) = *(unsigned char *)(v1330 + 19);
              unint64_t v1331 = (v1329 + 27) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v1332 = (v1330 + 27) & 0xFFFFFFFFFFFFFFF8;
              *(void *)unint64_t v1331 = *(void *)v1332;
              *(unsigned char *)(v1331 + 8) = *(unsigned char *)(v1332 + 8);
              *(unsigned char *)(v1331 + 9) = *(unsigned char *)(v1332 + 9);
              *(unsigned char *)(v1331 + 10) = *(unsigned char *)(v1332 + 10);
              *(unsigned char *)(v1331 + 11) = *(unsigned char *)(v1332 + 11);
              *(unsigned char *)(v1331 + 12) = *(unsigned char *)(v1332 + 12);
              v1333 = (void *)((v1330 + 47) & 0xFFFFFFFFFFFFFFF8);
              v1334 = (void *)((v1329 + 47) & 0xFFFFFFFFFFFFFFF8);
              void *v1334 = *v1333;
              unint64_t v1335 = ((unint64_t)v1334 + 15) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v1336 = ((unint64_t)v1333 + 15) & 0xFFFFFFFFFFFFFFF8;
              *(void *)unint64_t v1335 = *(void *)v1336;
              *(unsigned char *)(v1335 + 8) = *(unsigned char *)(v1336 + 8);
              *(unsigned char *)(v1335 + 9) = *(unsigned char *)(v1336 + 9);
              v1337 = (void *)((v1951 + v1335) & v1974);
              v1338 = (const void *)((v1951 + v1336) & v1974);
              v1339 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v1954 + 48);
              swift_bridgeObjectRetain();
              if (v1339(v1338, 1, v1957))
              {
                memcpy(v1337, v1338, __n);
              }
              else
              {
                v1325((unint64_t)v1337, (unint64_t)v1338, v1957);
                (*(void (**)(void *, void, uint64_t, uint64_t))(v1954 + 56))(v1337, 0, 1, v1957);
              }
              v1340 = (void *)(((unint64_t)v1337 + v1952) & 0xFFFFFFFFFFFFFFF8);
              v1341 = (void *)(((unint64_t)v1338 + v1952) & 0xFFFFFFFFFFFFFFF8);
              void *v1340 = *v1341;
              unint64_t v1342 = ((unint64_t)v1340 + 15) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v1343 = ((unint64_t)v1341 + 15) & 0xFFFFFFFFFFFFFFF8;
              uint64_t v1344 = *(void *)v1343;
              *(unsigned char *)(v1342 + 8) = *(unsigned char *)(v1343 + 8);
              *(void *)unint64_t v1342 = v1344;
              v1345 = (void *)(((unint64_t)v1340 + 31) & 0xFFFFFFFFFFFFFFF8);
              v1346 = (void *)(((unint64_t)v1341 + 31) & 0xFFFFFFFFFFFFFFF8);
              void *v1345 = *v1346;
              unint64_t v1347 = ((unint64_t)v1345 + 15) & 0xFFFFFFFFFFFFFFF8;
              v1348 = (uint64_t *)(((unint64_t)v1346 + 15) & 0xFFFFFFFFFFFFFFF8);
              unint64_t v1349 = v1348[1];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if ((v1349 & 0x3000000000000000) != 0)
              {
                *(_OWORD *)unint64_t v1347 = *(_OWORD *)v1348;
              }
              else
              {
                uint64_t v1350 = *v1348;
                sub_10001EBB0(*v1348, v1349);
                *(void *)unint64_t v1347 = v1350;
                *(void *)(v1347 + 8) = v1349;
              }
              unint64_t v1351 = (v1347 + 19) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v1352 = ((unint64_t)v1348 + 19) & 0xFFFFFFFFFFFFFFF8;
              uint64_t v1353 = *(void *)v1352;
              *(unsigned char *)(v1351 + 8) = *(unsigned char *)(v1352 + 8);
              *(void *)unint64_t v1351 = v1353;
              *(unsigned char *)(v1351 + 9) = *(unsigned char *)(v1352 + 9);
              unint64_t v1354 = (v1351 + 13) & 0xFFFFFFFFFFFFFFFCLL;
              unint64_t v1355 = (v1352 + 13) & 0xFFFFFFFFFFFFFFFCLL;
              int v1356 = *(_DWORD *)v1355;
              *(unsigned char *)(v1354 + 4) = *(unsigned char *)(v1355 + 4);
              *(_DWORD *)unint64_t v1354 = v1356;
              v1357 = (void *)((v1351 + 25) & 0xFFFFFFFFFFFFFFF8);
              v1358 = (void *)((v1352 + 25) & 0xFFFFFFFFFFFFFFF8);
              void *v1357 = *v1358;
              v1357[1] = v1358[1];
              unint64_t v1359 = v2090 + v1989;
              v1360 = (long long *)(v2052 + v1989);
              unint64_t v1361 = *(void *)(v2052 + v1989 + 16);
              if (v1361 >= 0xFFFFFFFF) {
                LODWORD(v1361) = -1;
              }
              int v1362 = v1361 - 1;
              swift_bridgeObjectRetain();
              if (v1362 < 0)
              {
                *(void *)unint64_t v1359 = *(void *)v1360;
                *(unsigned char *)(v1359 + 8) = *((unsigned char *)v1360 + 8);
                *(unsigned char *)(v1359 + 9) = *((unsigned char *)v1360 + 9);
                uint64_t v1375 = *((void *)v1360 + 2);
                swift_errorRetain();
                *(void *)(v1359 + 16) = v1375;
                uint64_t v1376 = *((void *)v1360 + 3);
                swift_errorRetain();
                *(void *)(v1359 + 24) = v1376;
                *(unsigned char *)(v1359 + 32) = *((unsigned char *)v1360 + 32);
                *(unsigned char *)(v1359 + 33) = *((unsigned char *)v1360 + 33);
                *(unsigned char *)(v1359 + 34) = *((unsigned char *)v1360 + 34);
                *(void *)(v1359 + 40) = *((void *)v1360 + 5);
                *(void *)(v1359 + 48) = *((void *)v1360 + 6);
                *(void *)(v1359 + 56) = *((void *)v1360 + 7);
                *(void *)(v1359 + 64) = *((void *)v1360 + 8);
                *(unsigned char *)(v1359 + 72) = *((unsigned char *)v1360 + 72);
                *(void *)(v1359 + 80) = *((void *)v1360 + 10);
                *(void *)(v1359 + 88) = *((void *)v1360 + 11);
                v2091 = (void *)*((void *)v1360 + 12);
                *(void *)(v1359 + 96) = v2091;
                *(unsigned char *)(v1359 + 104) = *((unsigned char *)v1360 + 104);
                *(unsigned char *)(v1359 + 105) = *((unsigned char *)v1360 + 105);
                *(void *)(v1359 + 112) = *((void *)v1360 + 14);
                *(void *)(v1359 + 120) = *((void *)v1360 + 15);
                *(void *)(v1359 + 128) = *((void *)v1360 + 16);
                *(void *)(v1359 + 136) = *((void *)v1360 + 17);
                *(void *)(v1359 + 144) = *((void *)v1360 + 18);
                *(void *)(v1359 + 152) = *((void *)v1360 + 19);
                *(void *)(v1359 + 160) = *((void *)v1360 + 20);
                *(void *)(v1359 + 168) = *((void *)v1360 + 21);
                *(unsigned char *)(v1359 + 176) = *((unsigned char *)v1360 + 176);
                *(void *)(v1359 + 184) = *((void *)v1360 + 23);
                uint64_t v1377 = *((void *)v1360 + 24);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                id v1378 = v2091;
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                if (v1377)
                {
                  *(void *)(v1359 + 192) = v1377;
                  *(void *)(v1359 + 200) = *((void *)v1360 + 25);
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                }
                else
                {
                  *(_OWORD *)(v1359 + 192) = v1360[12];
                }
                *(void *)(v1359 + 208) = *((void *)v1360 + 26);
                *(void *)(v1359 + 216) = *((void *)v1360 + 27);
                *(void *)(v1359 + 224) = *((void *)v1360 + 28);
                *(void *)(v1359 + 232) = *((void *)v1360 + 29);
                *(void *)(v1359 + 240) = *((void *)v1360 + 30);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                uint64_t v78 = a1;
                unint64_t v1303 = v1908;
              }
              else
              {
                long long v1363 = *v1360;
                long long v1364 = v1360[1];
                long long v1365 = v1360[3];
                *(_OWORD *)(v1359 + 32) = v1360[2];
                *(_OWORD *)(v1359 + 48) = v1365;
                *(_OWORD *)unint64_t v1359 = v1363;
                *(_OWORD *)(v1359 + 16) = v1364;
                long long v1366 = v1360[4];
                long long v1367 = v1360[5];
                long long v1368 = v1360[7];
                *(_OWORD *)(v1359 + 96) = v1360[6];
                *(_OWORD *)(v1359 + 112) = v1368;
                *(_OWORD *)(v1359 + 64) = v1366;
                *(_OWORD *)(v1359 + 80) = v1367;
                long long v1369 = v1360[8];
                long long v1370 = v1360[9];
                long long v1371 = v1360[11];
                *(_OWORD *)(v1359 + 160) = v1360[10];
                *(_OWORD *)(v1359 + 176) = v1371;
                *(_OWORD *)(v1359 + 128) = v1369;
                *(_OWORD *)(v1359 + 144) = v1370;
                long long v1372 = v1360[12];
                long long v1373 = v1360[13];
                long long v1374 = v1360[14];
                *(void *)(v1359 + 240) = *((void *)v1360 + 30);
                *(_OWORD *)(v1359 + 208) = v1373;
                *(_OWORD *)(v1359 + 224) = v1374;
                *(_OWORD *)(v1359 + 192) = v1372;
                unint64_t v1303 = v1908;
              }
              v1755 = (_OWORD *)((v1359 + 255) & 0xFFFFFFFFFFFFFFF8);
              v1756 = (long long *)(((unint64_t)v1360 + 255) & 0xFFFFFFFFFFFFFFF8);
              long long v1757 = *v1756;
              *(_OWORD *)((char *)v1755 + 9) = *(long long *)((char *)v1756 + 9);
              _OWORD *v1755 = v1757;
              unint64_t v1758 = (v1359 + 287) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v1759 = ((unint64_t)v1360 + 287) & 0xFFFFFFFFFFFFFFF8;
              long long v1760 = *(_OWORD *)v1759;
              *(unsigned char *)(v1758 + 16) = *(unsigned char *)(v1759 + 16);
              *(_OWORD *)unint64_t v1758 = v1760;
              v1761 = (void *)((v1359 + 311) & 0xFFFFFFFFFFFFFFF8);
              unint64_t v1762 = ((unint64_t)v1360 + 311) & 0xFFFFFFFFFFFFFFF8;
              uint64_t v1763 = *(void *)v1762;
              v1762 += 15;
              void *v1761 = v1763;
              v1764 = (void *)(((unint64_t)v1761 + 15) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v1765 = *(void *)(v1762 & 0xFFFFFFFFFFFFFFF8);
              unint64_t v1766 = *(void *)((v1762 & 0xFFFFFFFFFFFFFFF8) + 8);
              sub_10018B584(v1765, v1766);
              void *v1764 = v1765;
              v1764[1] = v1766;
              uint64_t v1239 = v1892;
              size_t v1304 = v1958;
              unint64_t v309 = v1918;
              if (v1935)
              {
LABEL_1498:
                unint64_t v1767 = ((((v1914
                          + ((((((((((v1934 + v1304 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                              + 19) & 0xFFFFFFFFFFFFFFF8)
                            + 25) & 0xFFFFFFFFFFFFFFF8)
                          + 327) & 0xFFFFFFFFFFFFFFF8)
                        + 15) & 0xFFFFFFFFFFFFFFF8)
                      + 16;
                v1768 = (void *)((unint64_t)&v1174[v1767] & 0xFFFFFFFFFFFFFFF8);
                v1769 = (void *)(((unint64_t)v2067 + v1767) & 0xFFFFFFFFFFFFFFF8);
                void *v1768 = *v1769;
                v1770 = *(void **)(((unint64_t)v1769 + 15) & 0xFFFFFFFFFFFFFFF8);
                *(void *)(((unint64_t)v1768 + 15) & 0xFFFFFFFFFFFFFFF8) = v1770;
                v78[v1303] = 0;
                id v1771 = v1770;
                char v1193 = 1;
LABEL_1551:
                v78[v309] = v1193;
                if (v1239 > 3) {
                  goto LABEL_1552;
                }
                unsigned int v1884 = ((1 << (8 * v1239)) + 5) >> (8 * v1239);
                if (v1884 > 0xFFD6)
                {
                  *(_DWORD *)&v78[v1239] = 27;
                  return v78;
                }
                if (v1884 <= 0xD6) {
LABEL_1552:
                }
                  v78[v1239] = 27;
                else {
                  *(_WORD *)&v78[v1239] = 27;
                }
                return v78;
              }
LABEL_1391:
              size_t v1304 = __n;
              goto LABEL_1498;
            }
            unint64_t v1217 = ((unint64_t)v1175 + v1949) & v1172;
            unint64_t v1218 = (v1916 + v1217) & v1980;
            if (v1931 == v1927)
            {
              if (v1920 == v1931)
              {
                int v1176 = (*(uint64_t (**)(unint64_t))(v1943 + 48))((v1916 + v1217) & v1980);
                goto LABEL_1388;
              }
              v1284 = (unint64_t *)((v1947 + v1218) & 0xFFFFFFFFFFFFFFF8);
              if (v1987 > 0x7FFFFFFE)
              {
                int v1176 = (*(uint64_t (**)(unint64_t))(v1945 + 48))(((unint64_t)v1284 + v1939) & v1993);
                goto LABEL_1388;
              }
              unint64_t v1285 = *v1284;
            }
            else
            {
              unint64_t v1240 = v1218 + v2083;
              if ((v1905 & 0x80000000) == 0)
              {
                uint64_t v1241 = v1172;
                unint64_t v1242 = *(void *)(v1240 + 8);
                if (v1242 >= 0xFFFFFFFF) {
                  LODWORD(v1242) = -1;
                }
                int v1176 = v1242 + 1;
                uint64_t v1239 = v1892;
                goto LABEL_1389;
              }
              unint64_t v1296 = (v1956 + ((v2018 + v1240) & v2032)) & v1974;
              if (v1935 > 0x7FFFFFFD)
              {
                int v1176 = (*(uint64_t (**)(unint64_t))(v1954 + 48))(v1296);
                goto LABEL_1388;
              }
              unint64_t v1285 = *(void *)(((v1903 + ((v1953 + v1296) & v1974)) & 0xFFFFFFFFFFFFFFF8) + 8);
            }
            if (v1285 >= 0xFFFFFFFF) {
              LODWORD(v1285) = -1;
            }
            uint64_t v1239 = v1892;
            uint64_t v1241 = v1172;
            uint64_t v1302 = v1916;
            if ((v1285 + 1) >= 2) {
              goto LABEL_1390;
            }
            goto LABEL_1393;
        }
      }
      uint64_t v2014 = ~v2008;
      unsigned int v716 = a2[v313];
      unsigned int v717 = v716 - 8;
      uint64_t v718 = v1961;
      if (v716 >= 8)
      {
        if (v313 <= 3) {
          uint64_t v719 = v313;
        }
        else {
          uint64_t v719 = 4;
        }
        switch(v719)
        {
          case 1:
            int v720 = *a2;
            goto LABEL_1251;
          case 2:
            int v720 = *(unsigned __int16 *)a2;
            goto LABEL_1251;
          case 3:
            int v720 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_1251;
          case 4:
            int v720 = *(_DWORD *)a2;
LABEL_1251:
            if (v313 < 4) {
              unsigned int v716 = (v720 | (v717 << (8 * v313))) + 8;
            }
            else {
              unsigned int v716 = v720 + 8;
            }
            break;
          default:
            break;
        }
      }
      uint64_t v1194 = ~v51;
      switch(v716)
      {
        case 1u:
          uint64_t v2036 = ~v2024;
          uint64_t v1199 = v87;
          uint64_t v1889 = ~v2039;
          uint64_t v1983 = v91;
          unint64_t v1969 = ~(unint64_t)v1975;
          uint64_t v1996 = v92;
          size_t v2087 = v34;
          v1200 = *(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v1960 + 16);
          v1200(v78, a2, AssociatedTypeWitness);
          v1201 = (unsigned char *)((unint64_t)&v78[v1902] & ~v2058);
          v1202 = (void *)((unint64_t)&a2[v1902] & ~v2058);
          if (v2012 == v1928)
          {
            int v1203 = (*(uint64_t (**)(void *))(v1960 + 48))(v1202);
LABEL_1460:
            uint64_t v1255 = v1199;
LABEL_1461:
            if (v1203)
            {
LABEL_1462:
              memcpy(v1201, v1202, v2015);
              uint64_t v1606 = v1892;
              uint64_t v1607 = v2039;
              goto LABEL_1463;
            }
            unint64_t v1225 = ((unint64_t)v1202 + v1950) & v1255;
            unint64_t v1226 = (v1917 + v1225) & v2014;
LABEL_1465:
            v2069 = (void *)((unint64_t)&a2[v1902] & ~v2058);
            uint64_t v1609 = v1255;
            v1200(v1201, (unsigned __int8 *)v1202, AssociatedTypeWitness);
            v2063 = (unsigned char *)((unint64_t)&v78[v1902] & ~v2058);
            v1200((unsigned char *)((unint64_t)&v1201[v1950] & v1609), (unsigned __int8 *)v1225, AssociatedTypeWitness);
            unint64_t v1610 = (v1917 + ((unint64_t)&v1201[v1950] & v1609)) & v2014;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v1941 + 16))(v1610, v1226, v1940);
            v1611 = (void *)((v1948 + v1610) & 0xFFFFFFFFFFFFFFF8);
            v1612 = (void *)((v1948 + v1226) & 0xFFFFFFFFFFFFFFF8);
            void *v1611 = *v1612;
            unint64_t v1613 = ((unint64_t)v1611 + v1936) & v1969;
            unint64_t v1614 = ((unint64_t)v1612 + v1936) & v1969;
            v1615 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1938 + 16);
            swift_bridgeObjectRetain();
            v1615(v1613, v1614, v1937);
            v1616 = (void *)((v1932 + v1614) & 0xFFFFFFFFFFFFFFF8);
            v1617 = (void *)((v1932 + v1613) & 0xFFFFFFFFFFFFFFF8);
            void *v1617 = *v1616;
            v1618 = (void *)(((unint64_t)v1617 + 15) & 0xFFFFFFFFFFFFFFF8);
            v1619 = (void *)(((unint64_t)v1616 + 15) & 0xFFFFFFFFFFFFFFF8);
            void *v1618 = *v1619;
            v1618[1] = v1619[1];
            v1620 = (void *)(v1610 + v2016);
            void *v1620 = *(void *)(v1226 + v2016);
            v1620[1] = *(void *)(v1226 + v2016 + 8);
            size_t v1621 = (v2018 + v1610 + v2016) & v2036;
            size_t v1622 = (v2018 + v1226 + v2016) & v2036;
            *(unsigned char *)size_t v1621 = *(unsigned char *)v1622;
            uint64_t v1623 = v1621 | 4;
            int v1624 = *(_DWORD *)(v1622 | 4);
            *(unsigned char *)(v1623 + 4) = *(unsigned char *)((v1622 | 4) + 4);
            *(_DWORD *)uint64_t v1623 = v1624;
            *(_WORD *)(v1621 + 10) = *(_WORD *)(v1622 + 0xA);
            size_t v2055 = v1621;
            unint64_t v1625 = (v1956 + v1621) & v1974;
            size_t v2038 = v1622;
            unint64_t v1626 = (v1956 + v1622) & v1974;
            v1627 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1954 + 16);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v1627(v1625, v1626, v1957);
            unint64_t v1628 = (v1953 + v1625) & v1974;
            unint64_t v1629 = (v1953 + v1626) & v1974;
            v1627(v1628, v1629, v1957);
            v1630 = (unsigned char *)(v1628 + v1958);
            unsigned char *v1630 = *(unsigned char *)(v1629 + v1958);
            v1630[1] = *(unsigned char *)(v1629 + v1958 + 1);
            v1630[2] = *(unsigned char *)(v1629 + v1958 + 2);
            v1630[3] = *(unsigned char *)(v1629 + v1958 + 3);
            v1630[4] = *(unsigned char *)(v1629 + v1958 + 4);
            unint64_t v1631 = (v1628 + v1958 + 12) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1632 = (v1629 + v1958 + 12) & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v1631 = *(void *)v1632;
            *(void *)(v1631 + 8) = *(void *)(v1632 + 8);
            *(unsigned char *)(v1631 + 16) = *(unsigned char *)(v1632 + 16);
            *(unsigned char *)(v1631 + 17) = *(unsigned char *)(v1632 + 17);
            *(unsigned char *)(v1631 + 18) = *(unsigned char *)(v1632 + 18);
            *(unsigned char *)(v1631 + 19) = *(unsigned char *)(v1632 + 19);
            unint64_t v1633 = (v1631 + 27) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1634 = (v1632 + 27) & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v1633 = *(void *)v1634;
            *(unsigned char *)(v1633 + 8) = *(unsigned char *)(v1634 + 8);
            *(unsigned char *)(v1633 + 9) = *(unsigned char *)(v1634 + 9);
            *(unsigned char *)(v1633 + 10) = *(unsigned char *)(v1634 + 10);
            *(unsigned char *)(v1633 + 11) = *(unsigned char *)(v1634 + 11);
            *(unsigned char *)(v1633 + 12) = *(unsigned char *)(v1634 + 12);
            v1635 = (void *)((v1632 + 47) & 0xFFFFFFFFFFFFFFF8);
            v1636 = (void *)((v1631 + 47) & 0xFFFFFFFFFFFFFFF8);
            void *v1636 = *v1635;
            unint64_t v1637 = ((unint64_t)v1636 + 15) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1638 = ((unint64_t)v1635 + 15) & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v1637 = *(void *)v1638;
            *(unsigned char *)(v1637 + 8) = *(unsigned char *)(v1638 + 8);
            *(unsigned char *)(v1637 + 9) = *(unsigned char *)(v1638 + 9);
            v1639 = (void *)((v1951 + v1637) & v1974);
            v1640 = (const void *)((v1951 + v1638) & v1974);
            v1641 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v1954 + 48);
            swift_bridgeObjectRetain();
            if (v1641(v1640, 1, v1957))
            {
              memcpy(v1639, v1640, __n);
            }
            else
            {
              v1627((unint64_t)v1639, (unint64_t)v1640, v1957);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v1954 + 56))(v1639, 0, 1, v1957);
            }
            v1642 = (void *)(((unint64_t)v1639 + v1952) & 0xFFFFFFFFFFFFFFF8);
            v1643 = (void *)(((unint64_t)v1640 + v1952) & 0xFFFFFFFFFFFFFFF8);
            void *v1642 = *v1643;
            unint64_t v1644 = ((unint64_t)v1642 + 15) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1645 = ((unint64_t)v1643 + 15) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v1646 = *(void *)v1645;
            *(unsigned char *)(v1644 + 8) = *(unsigned char *)(v1645 + 8);
            *(void *)unint64_t v1644 = v1646;
            v1647 = (void *)(((unint64_t)v1642 + 31) & 0xFFFFFFFFFFFFFFF8);
            v1648 = (void *)(((unint64_t)v1643 + 31) & 0xFFFFFFFFFFFFFFF8);
            void *v1647 = *v1648;
            unint64_t v1649 = ((unint64_t)v1647 + 15) & 0xFFFFFFFFFFFFFFF8;
            v1650 = (uint64_t *)(((unint64_t)v1648 + 15) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1651 = v1650[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if ((v1651 & 0x3000000000000000) != 0)
            {
              *(_OWORD *)unint64_t v1649 = *(_OWORD *)v1650;
            }
            else
            {
              uint64_t v1652 = *v1650;
              sub_10001EBB0(*v1650, v1651);
              *(void *)unint64_t v1649 = v1652;
              *(void *)(v1649 + 8) = v1651;
            }
            unint64_t v1653 = (v1649 + 19) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1654 = ((unint64_t)v1650 + 19) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v1655 = *(void *)v1654;
            *(unsigned char *)(v1653 + 8) = *(unsigned char *)(v1654 + 8);
            *(void *)unint64_t v1653 = v1655;
            *(unsigned char *)(v1653 + 9) = *(unsigned char *)(v1654 + 9);
            unint64_t v1656 = (v1653 + 13) & 0xFFFFFFFFFFFFFFFCLL;
            unint64_t v1657 = (v1654 + 13) & 0xFFFFFFFFFFFFFFFCLL;
            int v1658 = *(_DWORD *)v1657;
            *(unsigned char *)(v1656 + 4) = *(unsigned char *)(v1657 + 4);
            *(_DWORD *)unint64_t v1656 = v1658;
            v1659 = (void *)((v1653 + 25) & 0xFFFFFFFFFFFFFFF8);
            v1660 = (void *)((v1654 + 25) & 0xFFFFFFFFFFFFFFF8);
            void *v1659 = *v1660;
            v1659[1] = v1660[1];
            unint64_t v1661 = v1989 + v2055;
            v1662 = (long long *)(v1989 + v2038);
            unint64_t v1663 = *(void *)(v1989 + v2038 + 16);
            if (v1663 >= 0xFFFFFFFF) {
              LODWORD(v1663) = -1;
            }
            int v1664 = v1663 - 1;
            swift_bridgeObjectRetain();
            if (v1664 < 0)
            {
              *(void *)unint64_t v1661 = *(void *)v1662;
              *(unsigned char *)(v1661 + 8) = *((unsigned char *)v1662 + 8);
              *(unsigned char *)(v1661 + 9) = *((unsigned char *)v1662 + 9);
              uint64_t v1677 = *((void *)v1662 + 2);
              swift_errorRetain();
              *(void *)(v1661 + 16) = v1677;
              uint64_t v1678 = *((void *)v1662 + 3);
              swift_errorRetain();
              *(void *)(v1661 + 24) = v1678;
              *(unsigned char *)(v1661 + 32) = *((unsigned char *)v1662 + 32);
              *(unsigned char *)(v1661 + 33) = *((unsigned char *)v1662 + 33);
              *(unsigned char *)(v1661 + 34) = *((unsigned char *)v1662 + 34);
              *(void *)(v1661 + 40) = *((void *)v1662 + 5);
              *(void *)(v1661 + 48) = *((void *)v1662 + 6);
              *(void *)(v1661 + 56) = *((void *)v1662 + 7);
              *(void *)(v1661 + 64) = *((void *)v1662 + 8);
              *(unsigned char *)(v1661 + 72) = *((unsigned char *)v1662 + 72);
              *(void *)(v1661 + 80) = *((void *)v1662 + 10);
              *(void *)(v1661 + 88) = *((void *)v1662 + 11);
              v2056 = (void *)*((void *)v1662 + 12);
              *(void *)(v1661 + 96) = v2056;
              *(unsigned char *)(v1661 + 104) = *((unsigned char *)v1662 + 104);
              *(unsigned char *)(v1661 + 105) = *((unsigned char *)v1662 + 105);
              *(void *)(v1661 + 112) = *((void *)v1662 + 14);
              *(void *)(v1661 + 120) = *((void *)v1662 + 15);
              *(void *)(v1661 + 128) = *((void *)v1662 + 16);
              *(void *)(v1661 + 136) = *((void *)v1662 + 17);
              *(void *)(v1661 + 144) = *((void *)v1662 + 18);
              *(void *)(v1661 + 152) = *((void *)v1662 + 19);
              *(void *)(v1661 + 160) = *((void *)v1662 + 20);
              *(void *)(v1661 + 168) = *((void *)v1662 + 21);
              *(unsigned char *)(v1661 + 176) = *((unsigned char *)v1662 + 176);
              *(void *)(v1661 + 184) = *((void *)v1662 + 23);
              uint64_t v1679 = *((void *)v1662 + 24);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              id v1680 = v2056;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (v1679)
              {
                *(void *)(v1661 + 192) = v1679;
                *(void *)(v1661 + 200) = *((void *)v1662 + 25);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
              }
              else
              {
                *(_OWORD *)(v1661 + 192) = v1662[12];
              }
              *(void *)(v1661 + 208) = *((void *)v1662 + 26);
              *(void *)(v1661 + 216) = *((void *)v1662 + 27);
              *(void *)(v1661 + 224) = *((void *)v1662 + 28);
              *(void *)(v1661 + 232) = *((void *)v1662 + 29);
              *(void *)(v1661 + 240) = *((void *)v1662 + 30);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              uint64_t v78 = a1;
            }
            else
            {
              long long v1665 = *v1662;
              long long v1666 = v1662[1];
              long long v1667 = v1662[3];
              *(_OWORD *)(v1661 + 32) = v1662[2];
              *(_OWORD *)(v1661 + 48) = v1667;
              *(_OWORD *)unint64_t v1661 = v1665;
              *(_OWORD *)(v1661 + 16) = v1666;
              long long v1668 = v1662[4];
              long long v1669 = v1662[5];
              long long v1670 = v1662[7];
              *(_OWORD *)(v1661 + 96) = v1662[6];
              *(_OWORD *)(v1661 + 112) = v1670;
              *(_OWORD *)(v1661 + 64) = v1668;
              *(_OWORD *)(v1661 + 80) = v1669;
              long long v1671 = v1662[8];
              long long v1672 = v1662[9];
              long long v1673 = v1662[11];
              *(_OWORD *)(v1661 + 160) = v1662[10];
              *(_OWORD *)(v1661 + 176) = v1673;
              *(_OWORD *)(v1661 + 128) = v1671;
              *(_OWORD *)(v1661 + 144) = v1672;
              long long v1674 = v1662[12];
              long long v1675 = v1662[13];
              long long v1676 = v1662[14];
              *(void *)(v1661 + 240) = *((void *)v1662 + 30);
              *(_OWORD *)(v1661 + 208) = v1675;
              *(_OWORD *)(v1661 + 224) = v1676;
              *(_OWORD *)(v1661 + 192) = v1674;
            }
            v1837 = (_OWORD *)((v1661 + 255) & 0xFFFFFFFFFFFFFFF8);
            v1838 = (long long *)(((unint64_t)v1662 + 255) & 0xFFFFFFFFFFFFFFF8);
            long long v1839 = *v1838;
            *(_OWORD *)((char *)v1837 + 9) = *(long long *)((char *)v1838 + 9);
            _OWORD *v1837 = v1839;
            unint64_t v1840 = (v1661 + 287) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1841 = ((unint64_t)v1662 + 287) & 0xFFFFFFFFFFFFFFF8;
            long long v1842 = *(_OWORD *)v1841;
            *(unsigned char *)(v1840 + 16) = *(unsigned char *)(v1841 + 16);
            *(_OWORD *)unint64_t v1840 = v1842;
            v1843 = (void *)((v1661 + 311) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1844 = ((unint64_t)v1662 + 311) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v1845 = *(void *)v1844;
            v1844 += 15;
            void *v1843 = v1845;
            v1846 = (void *)(((unint64_t)v1843 + 15) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v1847 = *(void *)(v1844 & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1848 = *(void *)((v1844 & 0xFFFFFFFFFFFFFFF8) + 8);
            sub_10018B584(v1847, v1848);
            void *v1846 = v1847;
            v1846[1] = v1848;
            uint64_t v1606 = v1892;
            size_t v1608 = v1958;
            uint64_t v718 = v1961;
            uint64_t v1607 = v2039;
            v1201 = v2063;
            v1202 = v2069;
            if (v1935)
            {
LABEL_1529:
              unint64_t v1849 = ((((v1929
                        + ((((((((((v1934 + v1608 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                            + 19) & 0xFFFFFFFFFFFFFFF8)
                          + 25) & 0xFFFFFFFFFFFFFFF8)
                        + 327) & 0xFFFFFFFFFFFFFFF8)
                      + 15) & 0xFFFFFFFFFFFFFFF8)
                    + 16;
              v1850 = (void *)((unint64_t)&v1201[v1607 + v1849] & v1889);
              v1851 = (const void *)(((unint64_t)v1202 + v1607 + v1849) & v1889);
              if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v2021 + 48))(v1851, 1, v718))
              {
                memcpy(v1850, v1851, v1907);
              }
              else
              {
                (*(void (**)(void *, const void *, uint64_t))(v2021 + 16))(v1850, v1851, v718);
                (*(void (**)(void *, void, uint64_t, uint64_t))(v2021 + 56))(v1850, 0, 1, v718);
              }
              v1852 = (char *)(((unint64_t)v1850 + v1985) & v1983);
              v1853 = (char *)(((unint64_t)v1851 + v1985) & v1983);
              if (v1920 == v1931)
              {
                int v1854 = (*(uint64_t (**)(char *))(v1943 + 48))(v1853);
              }
              else
              {
                v1855 = (uint64_t *)((unint64_t)&v1853[v1947] & 0xFFFFFFFFFFFFFFF8);
                if (v1987 <= 0x7FFFFFFE)
                {
                  uint64_t v1856 = *v1855;
                  if ((unint64_t)*v1855 >= 0xFFFFFFFF) {
                    LODWORD(v1856) = -1;
                  }
                  if ((v1856 + 1) >= 2) {
                    goto LABEL_1541;
                  }
                  goto LABEL_1543;
                }
                int v1854 = (*(uint64_t (**)(unint64_t))(v1945 + 48))(((unint64_t)v1855 + v1939) & v1996);
              }
              if (v1854)
              {
LABEL_1541:
                size_t v1857 = v2087;
                memcpy(v1852, v1853, v2087);
                uint64_t v1239 = v1606;
LABEL_1544:
                *(void *)&v1852[v1857] = *(void *)&v1853[v1857];
                v1866 = (void *)((unint64_t)&v1852[v1857 + 15] & 0xFFFFFFFFFFFFFFF8);
                v1867 = (void *)((unint64_t)&v1853[v1857 + 15] & 0xFFFFFFFFFFFFFFF8);
                void *v1866 = *v1867;
                v1282 = *(void **)(((unint64_t)v1867 + 15) & 0xFFFFFFFFFFFFFFF8);
                *(void *)(((unint64_t)v1866 + 15) & 0xFFFFFFFFFFFFFFF8) = v1282;
                char v1283 = 1;
                goto LABEL_1545;
              }
              v1855 = (uint64_t *)((unint64_t)&v1853[v1947] & 0xFFFFFFFFFFFFFFF8);
LABEL_1543:
              (*(void (**)(char *, char *, uint64_t))(v1943 + 16))(v1852, v1853, v1942);
              v1858 = (void *)((unint64_t)&v1852[v1947] & 0xFFFFFFFFFFFFFFF8);
              void *v1858 = *v1855;
              unint64_t v1859 = ((unint64_t)v1858 + v1939) & v1996;
              unint64_t v1860 = ((unint64_t)v1855 + v1939) & v1996;
              v1861 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1945 + 16);
              swift_bridgeObjectRetain();
              v1861(v1859, v1860, v1944);
              v1862 = (void *)((v1933 + v1859) & 0xFFFFFFFFFFFFFFF8);
              v1863 = (void *)((v1933 + v1860) & 0xFFFFFFFFFFFFFFF8);
              void *v1862 = *v1863;
              v1864 = (void *)(((unint64_t)v1862 + 15) & 0xFFFFFFFFFFFFFFF8);
              v1865 = (void *)(((unint64_t)v1863 + 15) & 0xFFFFFFFFFFFFFFF8);
              void *v1864 = *v1865;
              v1864[1] = v1865[1];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              uint64_t v1239 = v1606;
              size_t v1857 = v2087;
              goto LABEL_1544;
            }
LABEL_1463:
            size_t v1608 = __n;
            goto LABEL_1529;
          }
          unint64_t v1225 = ((unint64_t)v1202 + v1950) & v1199;
          unint64_t v1226 = (v1917 + v1225) & v2014;
          if (v1930 == v1928)
          {
            if (v1919 == v1930)
            {
              int v1203 = (*(uint64_t (**)(unint64_t))(v1941 + 48))((v1917 + v1225) & v2014);
              goto LABEL_1460;
            }
            v1292 = (unint64_t *)((v1948 + v1226) & 0xFFFFFFFFFFFFFFF8);
            if (v1909 > 0x7FFFFFFE)
            {
              int v1203 = (*(uint64_t (**)(unint64_t))(v1938 + 48))(((unint64_t)v1292 + v1936) & v1969);
              goto LABEL_1460;
            }
            unint64_t v1293 = *v1292;
          }
          else
          {
            size_t v1254 = v1226 + v2016;
            if ((v1906 & 0x80000000) == 0)
            {
              uint64_t v1255 = v1199;
              unint64_t v1256 = *(void *)(v1254 + 8);
              if (v1256 >= 0xFFFFFFFF) {
                LODWORD(v1256) = -1;
              }
              int v1203 = v1256 + 1;
              goto LABEL_1461;
            }
            unint64_t v1300 = (v1956 + ((v2018 + v1254) & v2036)) & v1974;
            if (v1935 > 0x7FFFFFFD)
            {
              int v1203 = (*(uint64_t (**)(unint64_t))(v1954 + 48))(v1300);
              goto LABEL_1460;
            }
            unint64_t v1293 = *(void *)(((v1903 + ((v1953 + v1300) & v1974)) & 0xFFFFFFFFFFFFFFF8) + 8);
          }
          if (v1293 >= 0xFFFFFFFF) {
            LODWORD(v1293) = -1;
          }
          uint64_t v1255 = v1199;
          if ((v1293 + 1) >= 2) {
            goto LABEL_1462;
          }
          goto LABEL_1465;
        case 2u:
          uint64_t v1204 = v91;
          uint64_t v1997 = v92;
          size_t v2088 = v34;
          (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v1960 + 16))(v78, a2, AssociatedTypeWitness);
          v1205 = (void *)((unint64_t)&v78[v1926] & ~v2039);
          v1206 = (const void *)((unint64_t)&a2[v1926] & ~v2039);
          if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v2021 + 48))(v1206, 1, v1961))
          {
            memcpy(v1205, v1206, v1907);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v2021 + 16))(v1205, v1206, v1961);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v2021 + 56))(v1205, 0, 1, v1961);
          }
          v1234 = (char *)(((unint64_t)v1205 + v1985) & v1204);
          v1235 = (char *)(((unint64_t)v1206 + v1985) & v1204);
          if (v1920 == v1931)
          {
            int v1236 = (*(uint64_t (**)(char *))(v1943 + 48))(v1235);
          }
          else
          {
            v1237 = (uint64_t *)((unint64_t)&v1235[v1947] & 0xFFFFFFFFFFFFFFF8);
            if (v1987 <= 0x7FFFFFFE)
            {
              uint64_t v1238 = *v1237;
              if ((unint64_t)*v1237 >= 0xFFFFFFFF) {
                LODWORD(v1238) = -1;
              }
              if ((v1238 + 1) >= 2) {
                goto LABEL_1359;
              }
              goto LABEL_1361;
            }
            int v1236 = (*(uint64_t (**)(unint64_t))(v1945 + 48))(((unint64_t)v1237 + v1939) & v1997);
          }
          if (v1236)
          {
LABEL_1359:
            size_t v1272 = v2088;
            memcpy(v1234, v1235, v2088);
            uint64_t v1239 = v1892;
            goto LABEL_1362;
          }
          v1237 = (uint64_t *)((unint64_t)&v1235[v1947] & 0xFFFFFFFFFFFFFFF8);
LABEL_1361:
          (*(void (**)(char *, char *, uint64_t))(v1943 + 16))(v1234, v1235, v1942);
          v1273 = (void *)((unint64_t)&v1234[v1947] & 0xFFFFFFFFFFFFFFF8);
          void *v1273 = *v1237;
          unint64_t v1274 = ((unint64_t)v1273 + v1939) & v1997;
          unint64_t v1275 = ((unint64_t)v1237 + v1939) & v1997;
          v1276 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1945 + 16);
          swift_bridgeObjectRetain();
          v1276(v1274, v1275, v1944);
          v1277 = (void *)((v1933 + v1274) & 0xFFFFFFFFFFFFFFF8);
          v1278 = (void *)((v1933 + v1275) & 0xFFFFFFFFFFFFFFF8);
          void *v1277 = *v1278;
          v1279 = (void *)(((unint64_t)v1277 + 15) & 0xFFFFFFFFFFFFFFF8);
          v1280 = (void *)(((unint64_t)v1278 + 15) & 0xFFFFFFFFFFFFFFF8);
          void *v1279 = *v1280;
          v1279[1] = v1280[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v1239 = v1892;
          size_t v1272 = v2088;
LABEL_1362:
          v1281 = &v1234[v1272];
          char *v1281 = v1235[v1272];
          v1282 = *(void **)&v1235[v1272 + 8];
          *((void *)v1281 + 1) = v1282;
          char v1283 = 2;
LABEL_1545:
          v78[v1915] = v1283;
          id v1868 = v1282;
          char v1193 = 0;
          unint64_t v309 = v1918;
          goto LABEL_1551;
        case 3u:
          uint64_t v2037 = ~v2024;
          uint64_t v1207 = v87;
          unint64_t v1970 = ~(unint64_t)v1975;
          v1208 = *(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v1960 + 16);
          v1208(v78, a2, AssociatedTypeWitness);
          v1209 = (unsigned char *)((unint64_t)&v78[v1902] & ~v2058);
          v2089 = (void *)((unint64_t)&a2[v1902] & ~v2058);
          if (v2012 == v1928)
          {
            int v1210 = (*(uint64_t (**)(void))(v1960 + 48))();
LABEL_1478:
            uint64_t v1239 = v1892;
            uint64_t v1258 = v1207;
LABEL_1479:
            unint64_t v309 = v1918;
            if (v1210)
            {
LABEL_1480:
              unint64_t v1681 = (unint64_t)&a2[v1902] & ~v2058;
              memcpy(v1209, v2089, v2015);
LABEL_1481:
              size_t v1682 = __n;
              goto LABEL_1549;
            }
            unint64_t v1227 = ((unint64_t)v2089 + v1950) & v1258;
            unint64_t v1228 = (v1917 + v1227) & v2014;
            goto LABEL_1483;
          }
          unint64_t v1227 = (v1950 + ((unint64_t)&a2[v1902] & ~v2058)) & v1207;
          unint64_t v1228 = (v1917 + v1227) & v2014;
          if (v1930 == v1928)
          {
            if (v1919 == v1930)
            {
              int v1210 = (*(uint64_t (**)(unint64_t))(v1941 + 48))((v1917 + v1227) & v2014);
              goto LABEL_1478;
            }
            v1294 = (unint64_t *)((v1948 + v1228) & 0xFFFFFFFFFFFFFFF8);
            if (v1909 > 0x7FFFFFFE)
            {
              int v1210 = (*(uint64_t (**)(unint64_t))(v1938 + 48))(((unint64_t)v1294 + v1936) & v1970);
              goto LABEL_1478;
            }
            unint64_t v1295 = *v1294;
          }
          else
          {
            size_t v1257 = v1228 + v2016;
            if ((v1906 & 0x80000000) == 0)
            {
              uint64_t v1258 = v1207;
              unint64_t v1259 = *(void *)(v1257 + 8);
              if (v1259 >= 0xFFFFFFFF) {
                LODWORD(v1259) = -1;
              }
              int v1210 = v1259 + 1;
              uint64_t v1239 = v1892;
              goto LABEL_1479;
            }
            unint64_t v1301 = (v1956 + ((v2018 + v1257) & v2037)) & v1974;
            if (v1935 > 0x7FFFFFFD)
            {
              int v1210 = (*(uint64_t (**)(unint64_t))(v1954 + 48))(v1301);
              goto LABEL_1478;
            }
            unint64_t v1295 = *(void *)(((v1903 + ((v1953 + v1301) & v1974)) & 0xFFFFFFFFFFFFFFF8) + 8);
          }
          if (v1295 >= 0xFFFFFFFF) {
            LODWORD(v1295) = -1;
          }
          uint64_t v1239 = v1892;
          unint64_t v309 = v1918;
          uint64_t v1258 = v1207;
          if ((v1295 + 1) >= 2) {
            goto LABEL_1480;
          }
LABEL_1483:
          uint64_t v1683 = v1258;
          v1208(v1209, (unsigned __int8 *)v2089, AssociatedTypeWitness);
          v1208((unsigned char *)((unint64_t)&v1209[v1950] & v1683), (unsigned __int8 *)v1227, AssociatedTypeWitness);
          unint64_t v1684 = (v1917 + ((unint64_t)&v1209[v1950] & v1683)) & v2014;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v1941 + 16))(v1684, v1228, v1940);
          v1685 = (void *)((v1948 + v1684) & 0xFFFFFFFFFFFFFFF8);
          v1686 = (void *)((v1948 + v1228) & 0xFFFFFFFFFFFFFFF8);
          void *v1685 = *v1686;
          unint64_t v1687 = ((unint64_t)v1685 + v1936) & v1970;
          unint64_t v1688 = ((unint64_t)v1686 + v1936) & v1970;
          v1689 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1938 + 16);
          swift_bridgeObjectRetain();
          v1689(v1687, v1688, v1937);
          v1690 = (void *)((v1932 + v1688) & 0xFFFFFFFFFFFFFFF8);
          v1691 = (void *)((v1932 + v1687) & 0xFFFFFFFFFFFFFFF8);
          void *v1691 = *v1690;
          v1692 = (void *)(((unint64_t)v1691 + 15) & 0xFFFFFFFFFFFFFFF8);
          v1693 = (void *)(((unint64_t)v1690 + 15) & 0xFFFFFFFFFFFFFFF8);
          void *v1692 = *v1693;
          v1692[1] = v1693[1];
          v1694 = (void *)(v1684 + v2016);
          void *v1694 = *(void *)(v1228 + v2016);
          v1694[1] = *(void *)(v1228 + v2016 + 8);
          size_t v1695 = (v2018 + v1684 + v2016) & v2037;
          size_t v1696 = (v2018 + v1228 + v2016) & v2037;
          *(unsigned char *)size_t v1695 = *(unsigned char *)v1696;
          uint64_t v1697 = v1695 | 4;
          int v1698 = *(_DWORD *)(v1696 | 4);
          *(unsigned char *)(v1697 + 4) = *(unsigned char *)((v1696 | 4) + 4);
          *(_DWORD *)uint64_t v1697 = v1698;
          *(_WORD *)(v1695 + 10) = *(_WORD *)(v1696 + 0xA);
          size_t v2064 = v1695;
          unint64_t v1699 = (v1956 + v1695) & v1974;
          size_t v2057 = v1696;
          unint64_t v1700 = (v1956 + v1696) & v1974;
          v1701 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1954 + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v1701(v1699, v1700, v1957);
          unint64_t v1702 = (v1953 + v1699) & v1974;
          unint64_t v1703 = (v1953 + v1700) & v1974;
          v1701(v1702, v1703, v1957);
          v1704 = (unsigned char *)(v1702 + v1958);
          unsigned char *v1704 = *(unsigned char *)(v1703 + v1958);
          v1704[1] = *(unsigned char *)(v1703 + v1958 + 1);
          v1704[2] = *(unsigned char *)(v1703 + v1958 + 2);
          v1704[3] = *(unsigned char *)(v1703 + v1958 + 3);
          v1704[4] = *(unsigned char *)(v1703 + v1958 + 4);
          unint64_t v1705 = (v1702 + v1958 + 12) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v1706 = (v1703 + v1958 + 12) & 0xFFFFFFFFFFFFFFF8;
          *(void *)unint64_t v1705 = *(void *)v1706;
          *(void *)(v1705 + 8) = *(void *)(v1706 + 8);
          *(unsigned char *)(v1705 + 16) = *(unsigned char *)(v1706 + 16);
          *(unsigned char *)(v1705 + 17) = *(unsigned char *)(v1706 + 17);
          *(unsigned char *)(v1705 + 18) = *(unsigned char *)(v1706 + 18);
          *(unsigned char *)(v1705 + 19) = *(unsigned char *)(v1706 + 19);
          unint64_t v1707 = (v1705 + 27) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v1708 = (v1706 + 27) & 0xFFFFFFFFFFFFFFF8;
          *(void *)unint64_t v1707 = *(void *)v1708;
          *(unsigned char *)(v1707 + 8) = *(unsigned char *)(v1708 + 8);
          *(unsigned char *)(v1707 + 9) = *(unsigned char *)(v1708 + 9);
          *(unsigned char *)(v1707 + 10) = *(unsigned char *)(v1708 + 10);
          *(unsigned char *)(v1707 + 11) = *(unsigned char *)(v1708 + 11);
          *(unsigned char *)(v1707 + 12) = *(unsigned char *)(v1708 + 12);
          v1709 = (void *)((v1706 + 47) & 0xFFFFFFFFFFFFFFF8);
          v1710 = (void *)((v1705 + 47) & 0xFFFFFFFFFFFFFFF8);
          void *v1710 = *v1709;
          unint64_t v1711 = ((unint64_t)v1710 + 15) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v1712 = ((unint64_t)v1709 + 15) & 0xFFFFFFFFFFFFFFF8;
          *(void *)unint64_t v1711 = *(void *)v1712;
          *(unsigned char *)(v1711 + 8) = *(unsigned char *)(v1712 + 8);
          *(unsigned char *)(v1711 + 9) = *(unsigned char *)(v1712 + 9);
          v1713 = (void *)((v1951 + v1711) & v1974);
          v1714 = (const void *)((v1951 + v1712) & v1974);
          v1715 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v1954 + 48);
          swift_bridgeObjectRetain();
          if (v1715(v1714, 1, v1957))
          {
            memcpy(v1713, v1714, __n);
          }
          else
          {
            v1701((unint64_t)v1713, (unint64_t)v1714, v1957);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v1954 + 56))(v1713, 0, 1, v1957);
          }
          v1716 = (void *)(((unint64_t)v1713 + v1952) & 0xFFFFFFFFFFFFFFF8);
          v1717 = (void *)(((unint64_t)v1714 + v1952) & 0xFFFFFFFFFFFFFFF8);
          void *v1716 = *v1717;
          unint64_t v1718 = ((unint64_t)v1716 + 15) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v1719 = ((unint64_t)v1717 + 15) & 0xFFFFFFFFFFFFFFF8;
          uint64_t v1720 = *(void *)v1719;
          *(unsigned char *)(v1718 + 8) = *(unsigned char *)(v1719 + 8);
          *(void *)unint64_t v1718 = v1720;
          v1721 = (void *)(((unint64_t)v1716 + 31) & 0xFFFFFFFFFFFFFFF8);
          v1722 = (void *)(((unint64_t)v1717 + 31) & 0xFFFFFFFFFFFFFFF8);
          void *v1721 = *v1722;
          unint64_t v1723 = ((unint64_t)v1721 + 15) & 0xFFFFFFFFFFFFFFF8;
          v1724 = (uint64_t *)(((unint64_t)v1722 + 15) & 0xFFFFFFFFFFFFFFF8);
          unint64_t v1725 = v1724[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if ((v1725 & 0x3000000000000000) != 0)
          {
            *(_OWORD *)unint64_t v1723 = *(_OWORD *)v1724;
          }
          else
          {
            uint64_t v1726 = *v1724;
            sub_10001EBB0(*v1724, v1725);
            *(void *)unint64_t v1723 = v1726;
            *(void *)(v1723 + 8) = v1725;
          }
          unint64_t v1727 = (v1723 + 19) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v1728 = ((unint64_t)v1724 + 19) & 0xFFFFFFFFFFFFFFF8;
          uint64_t v1729 = *(void *)v1728;
          *(unsigned char *)(v1727 + 8) = *(unsigned char *)(v1728 + 8);
          *(void *)unint64_t v1727 = v1729;
          *(unsigned char *)(v1727 + 9) = *(unsigned char *)(v1728 + 9);
          unint64_t v1730 = (v1727 + 13) & 0xFFFFFFFFFFFFFFFCLL;
          unint64_t v1731 = (v1728 + 13) & 0xFFFFFFFFFFFFFFFCLL;
          int v1732 = *(_DWORD *)v1731;
          *(unsigned char *)(v1730 + 4) = *(unsigned char *)(v1731 + 4);
          *(_DWORD *)unint64_t v1730 = v1732;
          v1733 = (void *)((v1727 + 25) & 0xFFFFFFFFFFFFFFF8);
          v1734 = (void *)((v1728 + 25) & 0xFFFFFFFFFFFFFFF8);
          void *v1733 = *v1734;
          v1733[1] = v1734[1];
          unint64_t v1735 = v1989 + v2064;
          v1736 = (long long *)(v1989 + v2057);
          unint64_t v1737 = *(void *)(v1989 + v2057 + 16);
          if (v1737 >= 0xFFFFFFFF) {
            LODWORD(v1737) = -1;
          }
          int v1738 = v1737 - 1;
          swift_bridgeObjectRetain();
          if (v1738 < 0)
          {
            *(void *)unint64_t v1735 = *(void *)v1736;
            *(unsigned char *)(v1735 + 8) = *((unsigned char *)v1736 + 8);
            *(unsigned char *)(v1735 + 9) = *((unsigned char *)v1736 + 9);
            uint64_t v1751 = *((void *)v1736 + 2);
            swift_errorRetain();
            *(void *)(v1735 + 16) = v1751;
            uint64_t v1752 = *((void *)v1736 + 3);
            swift_errorRetain();
            *(void *)(v1735 + 24) = v1752;
            *(unsigned char *)(v1735 + 32) = *((unsigned char *)v1736 + 32);
            *(unsigned char *)(v1735 + 33) = *((unsigned char *)v1736 + 33);
            *(unsigned char *)(v1735 + 34) = *((unsigned char *)v1736 + 34);
            *(void *)(v1735 + 40) = *((void *)v1736 + 5);
            *(void *)(v1735 + 48) = *((void *)v1736 + 6);
            *(void *)(v1735 + 56) = *((void *)v1736 + 7);
            *(void *)(v1735 + 64) = *((void *)v1736 + 8);
            *(unsigned char *)(v1735 + 72) = *((unsigned char *)v1736 + 72);
            *(void *)(v1735 + 80) = *((void *)v1736 + 10);
            *(void *)(v1735 + 88) = *((void *)v1736 + 11);
            v2065 = (void *)*((void *)v1736 + 12);
            *(void *)(v1735 + 96) = v2065;
            *(unsigned char *)(v1735 + 104) = *((unsigned char *)v1736 + 104);
            *(unsigned char *)(v1735 + 105) = *((unsigned char *)v1736 + 105);
            *(void *)(v1735 + 112) = *((void *)v1736 + 14);
            *(void *)(v1735 + 120) = *((void *)v1736 + 15);
            *(void *)(v1735 + 128) = *((void *)v1736 + 16);
            *(void *)(v1735 + 136) = *((void *)v1736 + 17);
            *(void *)(v1735 + 144) = *((void *)v1736 + 18);
            *(void *)(v1735 + 152) = *((void *)v1736 + 19);
            *(void *)(v1735 + 160) = *((void *)v1736 + 20);
            *(void *)(v1735 + 168) = *((void *)v1736 + 21);
            *(unsigned char *)(v1735 + 176) = *((unsigned char *)v1736 + 176);
            *(void *)(v1735 + 184) = *((void *)v1736 + 23);
            uint64_t v1753 = *((void *)v1736 + 24);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            id v1754 = v2065;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (v1753)
            {
              *(void *)(v1735 + 192) = v1753;
              *(void *)(v1735 + 200) = *((void *)v1736 + 25);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }
            else
            {
              *(_OWORD *)(v1735 + 192) = v1736[12];
            }
            *(void *)(v1735 + 208) = *((void *)v1736 + 26);
            *(void *)(v1735 + 216) = *((void *)v1736 + 27);
            *(void *)(v1735 + 224) = *((void *)v1736 + 28);
            *(void *)(v1735 + 232) = *((void *)v1736 + 29);
            *(void *)(v1735 + 240) = *((void *)v1736 + 30);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            uint64_t v78 = a1;
          }
          else
          {
            long long v1739 = *v1736;
            long long v1740 = v1736[1];
            long long v1741 = v1736[3];
            *(_OWORD *)(v1735 + 32) = v1736[2];
            *(_OWORD *)(v1735 + 48) = v1741;
            *(_OWORD *)unint64_t v1735 = v1739;
            *(_OWORD *)(v1735 + 16) = v1740;
            long long v1742 = v1736[4];
            long long v1743 = v1736[5];
            long long v1744 = v1736[7];
            *(_OWORD *)(v1735 + 96) = v1736[6];
            *(_OWORD *)(v1735 + 112) = v1744;
            *(_OWORD *)(v1735 + 64) = v1742;
            *(_OWORD *)(v1735 + 80) = v1743;
            long long v1745 = v1736[8];
            long long v1746 = v1736[9];
            long long v1747 = v1736[11];
            *(_OWORD *)(v1735 + 160) = v1736[10];
            *(_OWORD *)(v1735 + 176) = v1747;
            *(_OWORD *)(v1735 + 128) = v1745;
            *(_OWORD *)(v1735 + 144) = v1746;
            long long v1748 = v1736[12];
            long long v1749 = v1736[13];
            long long v1750 = v1736[14];
            *(void *)(v1735 + 240) = *((void *)v1736 + 30);
            *(_OWORD *)(v1735 + 208) = v1749;
            *(_OWORD *)(v1735 + 224) = v1750;
            *(_OWORD *)(v1735 + 192) = v1748;
          }
          unint64_t v1681 = (unint64_t)v2089;
          v1869 = (_OWORD *)((v1735 + 255) & 0xFFFFFFFFFFFFFFF8);
          v1870 = (long long *)(((unint64_t)v1736 + 255) & 0xFFFFFFFFFFFFFFF8);
          long long v1871 = *v1870;
          *(_OWORD *)((char *)v1869 + 9) = *(long long *)((char *)v1870 + 9);
          _OWORD *v1869 = v1871;
          unint64_t v1872 = (v1735 + 287) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v1873 = ((unint64_t)v1736 + 287) & 0xFFFFFFFFFFFFFFF8;
          long long v1874 = *(_OWORD *)v1873;
          *(unsigned char *)(v1872 + 16) = *(unsigned char *)(v1873 + 16);
          *(_OWORD *)unint64_t v1872 = v1874;
          v1875 = (void *)((v1735 + 311) & 0xFFFFFFFFFFFFFFF8);
          v1876 = (void *)(((unint64_t)v1736 + 311) & 0xFFFFFFFFFFFFFFF8);
          void *v1875 = *v1876;
          v1877 = (void *)(((unint64_t)v1875 + 15) & 0xFFFFFFFFFFFFFFF8);
          v1878 = (uint64_t *)(((unint64_t)v1876 + 15) & 0xFFFFFFFFFFFFFFF8);
          uint64_t v1879 = *v1878;
          unint64_t v1880 = v1878[1];
          sub_10018B584(*v1878, v1880);
          void *v1877 = v1879;
          v1877[1] = v1880;
          uint64_t v1239 = v1892;
          size_t v1682 = v1958;
          unint64_t v309 = v1918;
          if (!v1935) {
            goto LABEL_1481;
          }
LABEL_1549:
          unint64_t v1881 = ((((v1929
                    + ((((((((((v1934 + v1682 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                        + 19) & 0xFFFFFFFFFFFFFFF8)
                      + 25) & 0xFFFFFFFFFFFFFFF8)
                    + 327) & 0xFFFFFFFFFFFFFFF8)
                  + 15) & 0xFFFFFFFFFFFFFFF8)
                + 16;
          v1882 = (void *)((unint64_t)&v1209[v1881] & 0xFFFFFFFFFFFFFFF8);
          v1883 = (void *)((v1681 + v1881) & 0xFFFFFFFFFFFFFFF8);
          void *v1882 = *v1883;
          v1882[1] = v1883[1];
          *(void *)(((unint64_t)v1882 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v1883 + 23) & 0xFFFFFFFFFFFFFFF8);
          v78[v1915] = 3;
          swift_bridgeObjectRetain();
LABEL_1550:
          char v1193 = 0;
          goto LABEL_1551;
        case 4u:
          unint64_t v1211 = v313;
          (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v1960 + 16))(v78, a2, AssociatedTypeWitness);
          char v1193 = 0;
          v78[v1211] = 4;
          goto LABEL_1326;
        case 5u:
          unint64_t v1212 = v313;
          (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v1960 + 16))(v78, a2, AssociatedTypeWitness);
          char v1193 = 0;
          v78[v1212] = 5;
          goto LABEL_1326;
        case 6u:
          unint64_t v1213 = v313;
          (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v1960 + 16))(v78, a2, AssociatedTypeWitness);
          v1214 = (void *)((unint64_t)&v78[v1898] & v1194);
          v1215 = (const void *)((unint64_t)&a2[v1898] & v1194);
          if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1899 + 48))(v1215, 1, v2005))
          {
            memcpy(v1214, v1215, v1894);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v1899 + 16))(v1214, v1215, v2005);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v1899 + 56))(v1214, 0, 1, v2005);
          }
          char v1193 = 0;
          v78[v1213] = 6;
          goto LABEL_1326;
        case 7u:
          unint64_t v1216 = v313;
          (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v1960 + 16))(v78, a2, AssociatedTypeWitness);
          char v1193 = 0;
          v78[v1216] = 7;
LABEL_1326:
          uint64_t v1239 = v1892;
          goto LABEL_1551;
        default:
          uint64_t v2035 = ~v2024;
          uint64_t v1195 = v87;
          unint64_t v1968 = ~(unint64_t)v1975;
          v1196 = *(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v1960 + 16);
          v1196(v78, a2, AssociatedTypeWitness);
          v1197 = (unsigned char *)((unint64_t)&v78[v1902] & ~v2058);
          v2086 = (void *)((unint64_t)&a2[v1902] & ~v2058);
          if (v2012 == v1928)
          {
            int v1198 = (*(uint64_t (**)(void))(v1960 + 48))();
LABEL_1442:
            uint64_t v1239 = v1892;
            uint64_t v1252 = v1195;
LABEL_1443:
            unint64_t v309 = v1918;
            if (v1198)
            {
LABEL_1444:
              unint64_t v1532 = (unint64_t)&a2[v1902] & ~v2058;
              memcpy(v1197, v2086, v2015);
              goto LABEL_1445;
            }
            unint64_t v1223 = ((unint64_t)v2086 + v1950) & v1252;
            unint64_t v1224 = (v1917 + v1223) & v2014;
LABEL_1447:
            uint64_t v1534 = v1252;
            v1196(v1197, (unsigned __int8 *)v2086, AssociatedTypeWitness);
            v1196((unsigned char *)((unint64_t)&v1197[v1950] & v1534), (unsigned __int8 *)v1223, AssociatedTypeWitness);
            unint64_t v1535 = (v1917 + ((unint64_t)&v1197[v1950] & v1534)) & v2014;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v1941 + 16))(v1535, v1224, v1940);
            v1536 = (void *)((v1948 + v1535) & 0xFFFFFFFFFFFFFFF8);
            v1537 = (void *)((v1948 + v1224) & 0xFFFFFFFFFFFFFFF8);
            void *v1536 = *v1537;
            unint64_t v1538 = ((unint64_t)v1536 + v1936) & v1968;
            unint64_t v1539 = ((unint64_t)v1537 + v1936) & v1968;
            v1540 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1938 + 16);
            swift_bridgeObjectRetain();
            v1540(v1538, v1539, v1937);
            v1541 = (void *)((v1932 + v1539) & 0xFFFFFFFFFFFFFFF8);
            v1542 = (void *)((v1932 + v1538) & 0xFFFFFFFFFFFFFFF8);
            void *v1542 = *v1541;
            v1543 = (void *)(((unint64_t)v1542 + 15) & 0xFFFFFFFFFFFFFFF8);
            v1544 = (void *)(((unint64_t)v1541 + 15) & 0xFFFFFFFFFFFFFFF8);
            void *v1543 = *v1544;
            v1543[1] = v1544[1];
            v1545 = (void *)(v1535 + v2016);
            void *v1545 = *(void *)(v1224 + v2016);
            v1545[1] = *(void *)(v1224 + v2016 + 8);
            size_t v1546 = (v2018 + v1535 + v2016) & v2035;
            size_t v1547 = (v2018 + v1224 + v2016) & v2035;
            *(unsigned char *)size_t v1546 = *(unsigned char *)v1547;
            uint64_t v1548 = v1546 | 4;
            int v1549 = *(_DWORD *)(v1547 | 4);
            *(unsigned char *)(v1548 + 4) = *(unsigned char *)((v1547 | 4) + 4);
            *(_DWORD *)uint64_t v1548 = v1549;
            *(_WORD *)(v1546 + 10) = *(_WORD *)(v1547 + 0xA);
            size_t v2061 = v1546;
            unint64_t v1550 = (v1956 + v1546) & v1974;
            size_t v2054 = v1547;
            unint64_t v1551 = (v1956 + v1547) & v1974;
            v1552 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1954 + 16);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v1552(v1550, v1551, v1957);
            unint64_t v1553 = (v1953 + v1550) & v1974;
            unint64_t v1554 = (v1953 + v1551) & v1974;
            v1552(v1553, v1554, v1957);
            v1555 = (unsigned char *)(v1553 + v1958);
            unsigned char *v1555 = *(unsigned char *)(v1554 + v1958);
            v1555[1] = *(unsigned char *)(v1554 + v1958 + 1);
            v1555[2] = *(unsigned char *)(v1554 + v1958 + 2);
            v1555[3] = *(unsigned char *)(v1554 + v1958 + 3);
            v1555[4] = *(unsigned char *)(v1554 + v1958 + 4);
            unint64_t v1556 = (v1553 + v1958 + 12) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1557 = (v1554 + v1958 + 12) & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v1556 = *(void *)v1557;
            *(void *)(v1556 + 8) = *(void *)(v1557 + 8);
            *(unsigned char *)(v1556 + 16) = *(unsigned char *)(v1557 + 16);
            *(unsigned char *)(v1556 + 17) = *(unsigned char *)(v1557 + 17);
            *(unsigned char *)(v1556 + 18) = *(unsigned char *)(v1557 + 18);
            *(unsigned char *)(v1556 + 19) = *(unsigned char *)(v1557 + 19);
            unint64_t v1558 = (v1556 + 27) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1559 = (v1557 + 27) & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v1558 = *(void *)v1559;
            *(unsigned char *)(v1558 + 8) = *(unsigned char *)(v1559 + 8);
            *(unsigned char *)(v1558 + 9) = *(unsigned char *)(v1559 + 9);
            *(unsigned char *)(v1558 + 10) = *(unsigned char *)(v1559 + 10);
            *(unsigned char *)(v1558 + 11) = *(unsigned char *)(v1559 + 11);
            *(unsigned char *)(v1558 + 12) = *(unsigned char *)(v1559 + 12);
            v1560 = (void *)((v1557 + 47) & 0xFFFFFFFFFFFFFFF8);
            v1561 = (void *)((v1556 + 47) & 0xFFFFFFFFFFFFFFF8);
            void *v1561 = *v1560;
            unint64_t v1562 = ((unint64_t)v1561 + 15) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1563 = ((unint64_t)v1560 + 15) & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v1562 = *(void *)v1563;
            *(unsigned char *)(v1562 + 8) = *(unsigned char *)(v1563 + 8);
            *(unsigned char *)(v1562 + 9) = *(unsigned char *)(v1563 + 9);
            v1564 = (void *)((v1951 + v1562) & v1974);
            v1565 = (const void *)((v1951 + v1563) & v1974);
            v1566 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v1954 + 48);
            swift_bridgeObjectRetain();
            if (v1566(v1565, 1, v1957))
            {
              memcpy(v1564, v1565, __n);
            }
            else
            {
              v1552((unint64_t)v1564, (unint64_t)v1565, v1957);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v1954 + 56))(v1564, 0, 1, v1957);
            }
            v1567 = (void *)(((unint64_t)v1564 + v1952) & 0xFFFFFFFFFFFFFFF8);
            v1568 = (void *)(((unint64_t)v1565 + v1952) & 0xFFFFFFFFFFFFFFF8);
            void *v1567 = *v1568;
            unint64_t v1569 = ((unint64_t)v1567 + 15) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1570 = ((unint64_t)v1568 + 15) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v1571 = *(void *)v1570;
            *(unsigned char *)(v1569 + 8) = *(unsigned char *)(v1570 + 8);
            *(void *)unint64_t v1569 = v1571;
            v1572 = (void *)(((unint64_t)v1567 + 31) & 0xFFFFFFFFFFFFFFF8);
            v1573 = (void *)(((unint64_t)v1568 + 31) & 0xFFFFFFFFFFFFFFF8);
            void *v1572 = *v1573;
            unint64_t v1574 = ((unint64_t)v1572 + 15) & 0xFFFFFFFFFFFFFFF8;
            v1575 = (uint64_t *)(((unint64_t)v1573 + 15) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1576 = v1575[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if ((v1576 & 0x3000000000000000) != 0)
            {
              *(_OWORD *)unint64_t v1574 = *(_OWORD *)v1575;
            }
            else
            {
              uint64_t v1577 = *v1575;
              sub_10001EBB0(*v1575, v1576);
              *(void *)unint64_t v1574 = v1577;
              *(void *)(v1574 + 8) = v1576;
            }
            unint64_t v1578 = (v1574 + 19) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1579 = ((unint64_t)v1575 + 19) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v1580 = *(void *)v1579;
            *(unsigned char *)(v1578 + 8) = *(unsigned char *)(v1579 + 8);
            *(void *)unint64_t v1578 = v1580;
            *(unsigned char *)(v1578 + 9) = *(unsigned char *)(v1579 + 9);
            unint64_t v1581 = (v1578 + 13) & 0xFFFFFFFFFFFFFFFCLL;
            unint64_t v1582 = (v1579 + 13) & 0xFFFFFFFFFFFFFFFCLL;
            int v1583 = *(_DWORD *)v1582;
            *(unsigned char *)(v1581 + 4) = *(unsigned char *)(v1582 + 4);
            *(_DWORD *)unint64_t v1581 = v1583;
            v1584 = (void *)((v1578 + 25) & 0xFFFFFFFFFFFFFFF8);
            v1585 = (void *)((v1579 + 25) & 0xFFFFFFFFFFFFFFF8);
            void *v1584 = *v1585;
            v1584[1] = v1585[1];
            unint64_t v1586 = v1989 + v2061;
            v1587 = (long long *)(v1989 + v2054);
            unint64_t v1588 = *(void *)(v1989 + v2054 + 16);
            if (v1588 >= 0xFFFFFFFF) {
              LODWORD(v1588) = -1;
            }
            int v1589 = v1588 - 1;
            swift_bridgeObjectRetain();
            if (v1589 < 0)
            {
              *(void *)unint64_t v1586 = *(void *)v1587;
              *(unsigned char *)(v1586 + 8) = *((unsigned char *)v1587 + 8);
              *(unsigned char *)(v1586 + 9) = *((unsigned char *)v1587 + 9);
              uint64_t v1602 = *((void *)v1587 + 2);
              swift_errorRetain();
              *(void *)(v1586 + 16) = v1602;
              uint64_t v1603 = *((void *)v1587 + 3);
              swift_errorRetain();
              *(void *)(v1586 + 24) = v1603;
              *(unsigned char *)(v1586 + 32) = *((unsigned char *)v1587 + 32);
              *(unsigned char *)(v1586 + 33) = *((unsigned char *)v1587 + 33);
              *(unsigned char *)(v1586 + 34) = *((unsigned char *)v1587 + 34);
              *(void *)(v1586 + 40) = *((void *)v1587 + 5);
              *(void *)(v1586 + 48) = *((void *)v1587 + 6);
              *(void *)(v1586 + 56) = *((void *)v1587 + 7);
              *(void *)(v1586 + 64) = *((void *)v1587 + 8);
              *(unsigned char *)(v1586 + 72) = *((unsigned char *)v1587 + 72);
              *(void *)(v1586 + 80) = *((void *)v1587 + 10);
              *(void *)(v1586 + 88) = *((void *)v1587 + 11);
              v2062 = (void *)*((void *)v1587 + 12);
              *(void *)(v1586 + 96) = v2062;
              *(unsigned char *)(v1586 + 104) = *((unsigned char *)v1587 + 104);
              *(unsigned char *)(v1586 + 105) = *((unsigned char *)v1587 + 105);
              *(void *)(v1586 + 112) = *((void *)v1587 + 14);
              *(void *)(v1586 + 120) = *((void *)v1587 + 15);
              *(void *)(v1586 + 128) = *((void *)v1587 + 16);
              *(void *)(v1586 + 136) = *((void *)v1587 + 17);
              *(void *)(v1586 + 144) = *((void *)v1587 + 18);
              *(void *)(v1586 + 152) = *((void *)v1587 + 19);
              *(void *)(v1586 + 160) = *((void *)v1587 + 20);
              *(void *)(v1586 + 168) = *((void *)v1587 + 21);
              *(unsigned char *)(v1586 + 176) = *((unsigned char *)v1587 + 176);
              *(void *)(v1586 + 184) = *((void *)v1587 + 23);
              uint64_t v1604 = *((void *)v1587 + 24);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              id v1605 = v2062;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (v1604)
              {
                *(void *)(v1586 + 192) = v1604;
                *(void *)(v1586 + 200) = *((void *)v1587 + 25);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
              }
              else
              {
                *(_OWORD *)(v1586 + 192) = v1587[12];
              }
              *(void *)(v1586 + 208) = *((void *)v1587 + 26);
              *(void *)(v1586 + 216) = *((void *)v1587 + 27);
              *(void *)(v1586 + 224) = *((void *)v1587 + 28);
              *(void *)(v1586 + 232) = *((void *)v1587 + 29);
              *(void *)(v1586 + 240) = *((void *)v1587 + 30);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              uint64_t v78 = a1;
            }
            else
            {
              long long v1590 = *v1587;
              long long v1591 = v1587[1];
              long long v1592 = v1587[3];
              *(_OWORD *)(v1586 + 32) = v1587[2];
              *(_OWORD *)(v1586 + 48) = v1592;
              *(_OWORD *)unint64_t v1586 = v1590;
              *(_OWORD *)(v1586 + 16) = v1591;
              long long v1593 = v1587[4];
              long long v1594 = v1587[5];
              long long v1595 = v1587[7];
              *(_OWORD *)(v1586 + 96) = v1587[6];
              *(_OWORD *)(v1586 + 112) = v1595;
              *(_OWORD *)(v1586 + 64) = v1593;
              *(_OWORD *)(v1586 + 80) = v1594;
              long long v1596 = v1587[8];
              long long v1597 = v1587[9];
              long long v1598 = v1587[11];
              *(_OWORD *)(v1586 + 160) = v1587[10];
              *(_OWORD *)(v1586 + 176) = v1598;
              *(_OWORD *)(v1586 + 128) = v1596;
              *(_OWORD *)(v1586 + 144) = v1597;
              long long v1599 = v1587[12];
              long long v1600 = v1587[13];
              long long v1601 = v1587[14];
              *(void *)(v1586 + 240) = *((void *)v1587 + 30);
              *(_OWORD *)(v1586 + 208) = v1600;
              *(_OWORD *)(v1586 + 224) = v1601;
              *(_OWORD *)(v1586 + 192) = v1599;
            }
            unint64_t v1532 = (unint64_t)v2086;
            v1820 = (_OWORD *)((v1586 + 255) & 0xFFFFFFFFFFFFFFF8);
            v1821 = (long long *)(((unint64_t)v1587 + 255) & 0xFFFFFFFFFFFFFFF8);
            long long v1822 = *v1821;
            *(_OWORD *)((char *)v1820 + 9) = *(long long *)((char *)v1821 + 9);
            _OWORD *v1820 = v1822;
            unint64_t v1823 = (v1586 + 287) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1824 = ((unint64_t)v1587 + 287) & 0xFFFFFFFFFFFFFFF8;
            long long v1825 = *(_OWORD *)v1824;
            *(unsigned char *)(v1823 + 16) = *(unsigned char *)(v1824 + 16);
            *(_OWORD *)unint64_t v1823 = v1825;
            v1826 = (void *)((v1586 + 311) & 0xFFFFFFFFFFFFFFF8);
            v1827 = (void *)(((unint64_t)v1587 + 311) & 0xFFFFFFFFFFFFFFF8);
            void *v1826 = *v1827;
            v1828 = (void *)(((unint64_t)v1826 + 15) & 0xFFFFFFFFFFFFFFF8);
            v1829 = (uint64_t *)(((unint64_t)v1827 + 15) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v1830 = *v1829;
            unint64_t v1831 = v1829[1];
            sub_10018B584(*v1829, v1831);
            void *v1828 = v1830;
            v1828[1] = v1831;
            uint64_t v1239 = v1892;
            size_t v1533 = v1958;
            unint64_t v309 = v1918;
            if (v1935)
            {
LABEL_1525:
              unint64_t v1832 = ((((v1929
                        + ((((((((((v1934 + v1533 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                            + 19) & 0xFFFFFFFFFFFFFFF8)
                          + 25) & 0xFFFFFFFFFFFFFFF8)
                        + 327) & 0xFFFFFFFFFFFFFFF8)
                      + 15) & 0xFFFFFFFFFFFFFFF8)
                    + 16;
              v1833 = (void *)((unint64_t)&v1197[v1832] & 0xFFFFFFFFFFFFFFF8);
              v1834 = (void *)((v1532 + v1832) & 0xFFFFFFFFFFFFFFF8);
              void *v1833 = *v1834;
              v1835 = *(void **)(((unint64_t)v1834 + 15) & 0xFFFFFFFFFFFFFFF8);
              *(void *)(((unint64_t)v1833 + 15) & 0xFFFFFFFFFFFFFFF8) = v1835;
              v78[v1915] = 0;
              id v1836 = v1835;
              goto LABEL_1550;
            }
LABEL_1445:
            size_t v1533 = __n;
            goto LABEL_1525;
          }
          unint64_t v1223 = (v1950 + ((unint64_t)&a2[v1902] & ~v2058)) & v1195;
          unint64_t v1224 = (v1917 + v1223) & v2014;
          if (v1930 == v1928)
          {
            if (v1919 == v1930)
            {
              int v1198 = (*(uint64_t (**)(unint64_t))(v1941 + 48))((v1917 + v1223) & v2014);
              goto LABEL_1442;
            }
            v1290 = (unint64_t *)((v1948 + v1224) & 0xFFFFFFFFFFFFFFF8);
            if (v1909 > 0x7FFFFFFE)
            {
              int v1198 = (*(uint64_t (**)(unint64_t))(v1938 + 48))(((unint64_t)v1290 + v1936) & v1968);
              goto LABEL_1442;
            }
            unint64_t v1291 = *v1290;
          }
          else
          {
            size_t v1251 = v1224 + v2016;
            if ((v1906 & 0x80000000) == 0)
            {
              uint64_t v1252 = v1195;
              unint64_t v1253 = *(void *)(v1251 + 8);
              if (v1253 >= 0xFFFFFFFF) {
                LODWORD(v1253) = -1;
              }
              int v1198 = v1253 + 1;
              uint64_t v1239 = v1892;
              goto LABEL_1443;
            }
            unint64_t v1299 = (v1956 + ((v2018 + v1251) & v2035)) & v1974;
            if (v1935 > 0x7FFFFFFD)
            {
              int v1198 = (*(uint64_t (**)(unint64_t))(v1954 + 48))(v1299);
              goto LABEL_1442;
            }
            unint64_t v1291 = *(void *)(((v1903 + ((v1953 + v1299) & v1974)) & 0xFFFFFFFFFFFFFFF8) + 8);
          }
          if (v1291 >= 0xFFFFFFFF) {
            LODWORD(v1291) = -1;
          }
          uint64_t v1239 = v1892;
          unint64_t v309 = v1918;
          uint64_t v1252 = v1195;
          if ((v1291 + 1) >= 2) {
            goto LABEL_1444;
          }
          goto LABEL_1447;
      }
    case 0x1Cu:
      unsigned int v315 = a2[v2002];
      unsigned int v316 = v315 - 2;
      if (v315 < 2)
      {
        uint64_t v78 = a1;
        uint64_t v320 = v1961;
        uint64_t v321 = AssociatedTypeWitness;
        size_t v319 = v2020;
        uint64_t v318 = v2021;
        uint64_t v322 = v1960;
      }
      else
      {
        if (v2002 <= 3) {
          uint64_t v317 = v2002;
        }
        else {
          uint64_t v317 = 4;
        }
        uint64_t v78 = a1;
        size_t v319 = v2020;
        uint64_t v318 = v2021;
        uint64_t v320 = v1961;
        uint64_t v321 = AssociatedTypeWitness;
        uint64_t v322 = v1960;
        switch(v317)
        {
          case 1:
            int v323 = *a2;
            goto LABEL_797;
          case 2:
            int v323 = *(unsigned __int16 *)a2;
            goto LABEL_797;
          case 3:
            int v323 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_797;
          case 4:
            int v323 = *(_DWORD *)a2;
LABEL_797:
            if (v2002 < 4) {
              unsigned int v315 = (v323 | (v316 << (8 * v2002))) + 2;
            }
            else {
              unsigned int v315 = v323 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v721 = v315 == 1;
      if (v315 == 1) {
        uint64_t v722 = v318;
      }
      else {
        uint64_t v722 = v322;
      }
      if (v315 == 1) {
        uint64_t v723 = v320;
      }
      else {
        uint64_t v723 = v321;
      }
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v722 + 16))(v78, a2, v723);
      v78[v2002] = v721;
      v78[v319] = a2[v319];
      if (v1892 > 3) {
        goto LABEL_807;
      }
      unsigned int v724 = ((1 << (8 * v1892)) + 5) >> (8 * v1892);
      if (v724 > 0xFFD6)
      {
        *(_DWORD *)&v78[v1892] = 28;
      }
      else if (v724 <= 0xD6)
      {
LABEL_807:
        v78[v1892] = 28;
      }
      else
      {
        *(_WORD *)&v78[v1892] = 28;
      }
      return v78;
    case 0x1Du:
      unsigned int v324 = a2[v2002];
      unsigned int v325 = v324 - 2;
      if (v324 < 2)
      {
        uint64_t v78 = a1;
        uint64_t v328 = v2021;
        uint64_t v329 = v1960;
        uint64_t v327 = v1892;
      }
      else
      {
        if (v2002 <= 3) {
          uint64_t v326 = v2002;
        }
        else {
          uint64_t v326 = 4;
        }
        uint64_t v78 = a1;
        uint64_t v327 = v1892;
        uint64_t v328 = v2021;
        uint64_t v329 = v1960;
        switch(v326)
        {
          case 1:
            int v330 = *a2;
            goto LABEL_815;
          case 2:
            int v330 = *(unsigned __int16 *)a2;
            goto LABEL_815;
          case 3:
            int v330 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_815;
          case 4:
            int v330 = *(_DWORD *)a2;
LABEL_815:
            if (v2002 < 4) {
              unsigned int v324 = (v330 | (v325 << (8 * v2002))) + 2;
            }
            else {
              unsigned int v324 = v330 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v725 = v324 == 1;
      if (v324 == 1) {
        uint64_t v726 = v328;
      }
      else {
        uint64_t v726 = v329;
      }
      (*(void (**)(unsigned char *))(v726 + 16))(v78);
      v78[v2002] = v725;
      if (v327 > 3) {
        goto LABEL_822;
      }
      unsigned int v727 = ((1 << (8 * v327)) + 5) >> (8 * v327);
      if (v727 > 0xFFD6)
      {
        *(_DWORD *)&v78[v327] = 29;
      }
      else if (v727 <= 0xD6)
      {
LABEL_822:
        v78[v327] = 29;
      }
      else
      {
        *(_WORD *)&v78[v327] = 29;
      }
      return v78;
    case 0x1Eu:
      unsigned int v331 = a2[v2002];
      unsigned int v332 = v331 - 2;
      if (v331 < 2)
      {
        uint64_t v78 = a1;
        uint64_t v335 = v2021;
        uint64_t v336 = v1960;
        uint64_t v334 = v1892;
      }
      else
      {
        if (v2002 <= 3) {
          uint64_t v333 = v2002;
        }
        else {
          uint64_t v333 = 4;
        }
        uint64_t v78 = a1;
        uint64_t v334 = v1892;
        uint64_t v335 = v2021;
        uint64_t v336 = v1960;
        switch(v333)
        {
          case 1:
            int v337 = *a2;
            goto LABEL_830;
          case 2:
            int v337 = *(unsigned __int16 *)a2;
            goto LABEL_830;
          case 3:
            int v337 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_830;
          case 4:
            int v337 = *(_DWORD *)a2;
LABEL_830:
            if (v2002 < 4) {
              unsigned int v331 = (v337 | (v332 << (8 * v2002))) + 2;
            }
            else {
              unsigned int v331 = v337 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v728 = v331 == 1;
      if (v331 == 1) {
        uint64_t v729 = v335;
      }
      else {
        uint64_t v729 = v336;
      }
      (*(void (**)(unsigned char *))(v729 + 16))(v78);
      v78[v2002] = v728;
      if (v334 > 3) {
        goto LABEL_837;
      }
      unsigned int v730 = ((1 << (8 * v334)) + 5) >> (8 * v334);
      if (v730 > 0xFFD6)
      {
        *(_DWORD *)&v78[v334] = 30;
      }
      else if (v730 <= 0xD6)
      {
LABEL_837:
        v78[v334] = 30;
      }
      else
      {
        *(_WORD *)&v78[v334] = 30;
      }
      return v78;
    case 0x1Fu:
      unsigned int v338 = a2[v2002];
      unsigned int v339 = v338 - 2;
      if (v338 < 2)
      {
        unint64_t v342 = ~v2003;
        uint64_t v340 = v1892;
        uint64_t v78 = a1;
        uint64_t v343 = v1961;
        uint64_t v344 = AssociatedTypeWitness;
        uint64_t v345 = v2021;
        uint64_t v346 = v1960;
      }
      else
      {
        uint64_t v340 = v1892;
        if (v2002 <= 3) {
          uint64_t v341 = v2002;
        }
        else {
          uint64_t v341 = 4;
        }
        uint64_t v78 = a1;
        unint64_t v342 = ~v2003;
        uint64_t v343 = v1961;
        uint64_t v344 = AssociatedTypeWitness;
        uint64_t v345 = v2021;
        uint64_t v346 = v1960;
        switch(v341)
        {
          case 1:
            int v347 = *a2;
            goto LABEL_845;
          case 2:
            int v347 = *(unsigned __int16 *)a2;
            goto LABEL_845;
          case 3:
            int v347 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_845;
          case 4:
            int v347 = *(_DWORD *)a2;
LABEL_845:
            if (v2002 < 4) {
              unsigned int v338 = (v347 | (v339 << (8 * v2002))) + 2;
            }
            else {
              unsigned int v338 = v347 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v731 = v338 == 1;
      if (v338 == 1) {
        uint64_t v732 = v345;
      }
      else {
        uint64_t v732 = v346;
      }
      if (v338 == 1) {
        uint64_t v733 = v343;
      }
      else {
        uint64_t v733 = v344;
      }
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v732 + 16))(v78, a2, v733);
      v78[v2002] = v731;
      unint64_t v734 = v342;
      unint64_t v735 = (unint64_t)&v78[v1955] & v342;
      v736 = (unsigned __int8 *)((unint64_t)&a2[v1955] & v734);
      unsigned int v737 = v736[v2002];
      unsigned int v738 = v737 - 2;
      if (v737 >= 2)
      {
        if (v2002 <= 3) {
          uint64_t v739 = v2002;
        }
        else {
          uint64_t v739 = 4;
        }
        switch(v739)
        {
          case 1:
            int v740 = *v736;
            goto LABEL_1001;
          case 2:
            int v740 = *(unsigned __int16 *)v736;
            goto LABEL_1001;
          case 3:
            int v740 = *(unsigned __int16 *)((unint64_t)&a2[v1955] & v734) | (*(unsigned __int8 *)(((unint64_t)&a2[v1955] & v734) + 2) << 16);
            goto LABEL_1001;
          case 4:
            int v740 = *(_DWORD *)v736;
LABEL_1001:
            if (v2002 < 4) {
              unsigned int v737 = (v740 | (v738 << (8 * v2002))) + 2;
            }
            else {
              unsigned int v737 = v740 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v769 = v737 == 1;
      if (v737 == 1) {
        uint64_t v770 = v345;
      }
      else {
        uint64_t v770 = v346;
      }
      (*(void (**)(unint64_t))(v770 + 16))(v735);
      *(unsigned char *)(v735 + v2002) = v769;
      if (v340 > 3) {
        goto LABEL_1008;
      }
      unsigned int v771 = ((1 << (8 * v340)) + 5) >> (8 * v340);
      if (v771 > 0xFFD6)
      {
        *(_DWORD *)&v78[v340] = 31;
      }
      else if (v771 <= 0xD6)
      {
LABEL_1008:
        v78[v340] = 31;
      }
      else
      {
        *(_WORD *)&v78[v340] = 31;
      }
      return v78;
    case 0x20u:
      unsigned int v348 = a2[v2002];
      unsigned int v349 = v348 - 2;
      if (v348 < 2)
      {
        uint64_t v78 = a1;
        uint64_t v352 = v2021;
        uint64_t v353 = v1960;
        uint64_t v351 = v1892;
      }
      else
      {
        if (v2002 <= 3) {
          uint64_t v350 = v2002;
        }
        else {
          uint64_t v350 = 4;
        }
        uint64_t v78 = a1;
        uint64_t v351 = v1892;
        uint64_t v352 = v2021;
        uint64_t v353 = v1960;
        switch(v350)
        {
          case 1:
            int v354 = *a2;
            goto LABEL_863;
          case 2:
            int v354 = *(unsigned __int16 *)a2;
            goto LABEL_863;
          case 3:
            int v354 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_863;
          case 4:
            int v354 = *(_DWORD *)a2;
LABEL_863:
            if (v2002 < 4) {
              unsigned int v348 = (v354 | (v349 << (8 * v2002))) + 2;
            }
            else {
              unsigned int v348 = v354 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v741 = v348 == 1;
      if (v348 == 1) {
        uint64_t v742 = v352;
      }
      else {
        uint64_t v742 = v353;
      }
      (*(void (**)(unsigned char *))(v742 + 16))(v78);
      v78[v2002] = v741;
      if (v351 > 3) {
        goto LABEL_870;
      }
      unsigned int v743 = ((1 << (8 * v351)) + 5) >> (8 * v351);
      if (v743 > 0xFFD6)
      {
        *(_DWORD *)&v78[v351] = 32;
      }
      else if (v743 <= 0xD6)
      {
LABEL_870:
        v78[v351] = 32;
      }
      else
      {
        *(_WORD *)&v78[v351] = 32;
      }
      return v78;
    case 0x21u:
      unsigned int v355 = a2[v2002];
      unsigned int v356 = v355 - 2;
      if (v355 < 2)
      {
        uint64_t v78 = a1;
        uint64_t v359 = v2021;
        uint64_t v360 = v1960;
        uint64_t v358 = v1892;
      }
      else
      {
        if (v2002 <= 3) {
          uint64_t v357 = v2002;
        }
        else {
          uint64_t v357 = 4;
        }
        uint64_t v78 = a1;
        uint64_t v358 = v1892;
        uint64_t v359 = v2021;
        uint64_t v360 = v1960;
        switch(v357)
        {
          case 1:
            int v361 = *a2;
            goto LABEL_878;
          case 2:
            int v361 = *(unsigned __int16 *)a2;
            goto LABEL_878;
          case 3:
            int v361 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_878;
          case 4:
            int v361 = *(_DWORD *)a2;
LABEL_878:
            if (v2002 < 4) {
              unsigned int v355 = (v361 | (v356 << (8 * v2002))) + 2;
            }
            else {
              unsigned int v355 = v361 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v744 = v355 == 1;
      if (v355 == 1) {
        uint64_t v745 = v359;
      }
      else {
        uint64_t v745 = v360;
      }
      (*(void (**)(unsigned char *))(v745 + 16))(v78);
      v78[v2002] = v744;
      if (v358 > 3) {
        goto LABEL_885;
      }
      unsigned int v746 = ((1 << (8 * v358)) + 5) >> (8 * v358);
      if (v746 > 0xFFD6)
      {
        *(_DWORD *)&v78[v358] = 33;
      }
      else if (v746 <= 0xD6)
      {
LABEL_885:
        v78[v358] = 33;
      }
      else
      {
        *(_WORD *)&v78[v358] = 33;
      }
      return v78;
    case 0x22u:
      unsigned int v362 = a2[v2002];
      unsigned int v363 = v362 - 2;
      if (v362 < 2)
      {
        uint64_t v78 = a1;
        uint64_t v366 = v2021;
        uint64_t v367 = v1960;
        uint64_t v365 = v1892;
      }
      else
      {
        if (v2002 <= 3) {
          uint64_t v364 = v2002;
        }
        else {
          uint64_t v364 = 4;
        }
        uint64_t v78 = a1;
        uint64_t v365 = v1892;
        uint64_t v366 = v2021;
        uint64_t v367 = v1960;
        switch(v364)
        {
          case 1:
            int v368 = *a2;
            goto LABEL_893;
          case 2:
            int v368 = *(unsigned __int16 *)a2;
            goto LABEL_893;
          case 3:
            int v368 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_893;
          case 4:
            int v368 = *(_DWORD *)a2;
LABEL_893:
            if (v2002 < 4) {
              unsigned int v362 = (v368 | (v363 << (8 * v2002))) + 2;
            }
            else {
              unsigned int v362 = v368 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v747 = v362 == 1;
      if (v362 == 1) {
        uint64_t v748 = v366;
      }
      else {
        uint64_t v748 = v367;
      }
      (*(void (**)(unsigned char *))(v748 + 16))(v78);
      v78[v2002] = v747;
      if (v365 > 3) {
        goto LABEL_900;
      }
      unsigned int v749 = ((1 << (8 * v365)) + 5) >> (8 * v365);
      if (v749 > 0xFFD6)
      {
        *(_DWORD *)&v78[v365] = 34;
      }
      else if (v749 <= 0xD6)
      {
LABEL_900:
        v78[v365] = 34;
      }
      else
      {
        *(_WORD *)&v78[v365] = 34;
      }
      return v78;
    case 0x23u:
      unsigned int v369 = a2[v2002];
      unsigned int v370 = v369 - 2;
      if (v369 < 2)
      {
        uint64_t v78 = a1;
        uint64_t v373 = v2021;
        uint64_t v374 = v1960;
        uint64_t v372 = v1892;
      }
      else
      {
        if (v2002 <= 3) {
          uint64_t v371 = v2002;
        }
        else {
          uint64_t v371 = 4;
        }
        uint64_t v78 = a1;
        uint64_t v372 = v1892;
        uint64_t v373 = v2021;
        uint64_t v374 = v1960;
        switch(v371)
        {
          case 1:
            int v375 = *a2;
            goto LABEL_908;
          case 2:
            int v375 = *(unsigned __int16 *)a2;
            goto LABEL_908;
          case 3:
            int v375 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_908;
          case 4:
            int v375 = *(_DWORD *)a2;
LABEL_908:
            if (v2002 < 4) {
              unsigned int v369 = (v375 | (v370 << (8 * v2002))) + 2;
            }
            else {
              unsigned int v369 = v375 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v750 = v369 == 1;
      if (v369 == 1) {
        uint64_t v751 = v373;
      }
      else {
        uint64_t v751 = v374;
      }
      (*(void (**)(unsigned char *))(v751 + 16))(v78);
      v78[v2002] = v750;
      if (v372 > 3) {
        goto LABEL_915;
      }
      unsigned int v752 = ((1 << (8 * v372)) + 5) >> (8 * v372);
      if (v752 > 0xFFD6)
      {
        *(_DWORD *)&v78[v372] = 35;
      }
      else if (v752 <= 0xD6)
      {
LABEL_915:
        v78[v372] = 35;
      }
      else
      {
        *(_WORD *)&v78[v372] = 35;
      }
      return v78;
    case 0x24u:
      uint64_t v376 = ~v2008;
      uint64_t v1979 = ~v33;
      unint64_t v1965 = ~(unint64_t)v1975;
      uint64_t v1992 = ~v32;
      size_t v2075 = ((((v1933 + ((v32 + 8 + (v1947 & 0xFFFFFFFFFFFFFFF8)) & ~v32)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
            + 16;
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v1960 + 48))(a2, 1, AssociatedTypeWitness))
      {
        memcpy(a1, a2, v53);
      }
      else
      {
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v1960 + 16))(a1, a2, AssociatedTypeWitness);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v1960 + 56))(a1, 0, 1, AssociatedTypeWitness);
      }
      id v420 = (void *)(((unint64_t)a1 + v53 + 7) & 0xFFFFFFFFFFFFFFF8);
      id v421 = (void *)((unint64_t)&a2[v53 + 7] & 0xFFFFFFFFFFFFFFF8);
      *id v420 = *v421;
      unint64_t v422 = ((unint64_t)v420 + 15) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v423 = ((unint64_t)v421 + 15) & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v422 = *(void *)v423;
      *(unsigned char *)(v422 + 8) = *(unsigned char *)(v423 + 8);
      uint64_t v424 = (void *)((v422 + v2008 + 9) & v376);
      v425 = (const void *)((v423 + v2008 + 9) & v376);
      if (v1919 == v1930)
      {
        int v426 = (*(uint64_t (**)(const void *))(v1941 + 48))(v425);
        uint64_t v427 = v2021;
      }
      else
      {
        __darwin_ino64_t v428 = (uint64_t *)(((unint64_t)v425 + v1948) & 0xFFFFFFFFFFFFFFF8);
        uint64_t v427 = v2021;
        if (v1909 <= 0x7FFFFFFE)
        {
          uint64_t v429 = *v428;
          if ((unint64_t)*v428 >= 0xFFFFFFFF) {
            LODWORD(v429) = -1;
          }
          if ((v429 + 1) >= 2) {
            goto LABEL_444;
          }
          goto LABEL_446;
        }
        int v426 = (*(uint64_t (**)(unint64_t, void, uint64_t))(v1938 + 48))(((unint64_t)v428 + v1936) & v1965, v1904, v1937);
      }
      if (v426)
      {
LABEL_444:
        unint64_t v514 = ((((v1932
                 + ((v1975 + 8 + (v1948 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)v1975)) & 0xFFFFFFFFFFFFFFF8)
               + 15) & 0xFFFFFFFFFFFFFFF8)
             + 16;
        memcpy(v424, v425, v2016);
        goto LABEL_447;
      }
      __darwin_ino64_t v428 = (uint64_t *)(((unint64_t)v425 + v1948) & 0xFFFFFFFFFFFFFFF8);
LABEL_446:
      (*(void (**)(void *, const void *, uint64_t))(v1941 + 16))(v424, v425, v1940);
      v515 = (void *)(((unint64_t)v424 + v1948) & 0xFFFFFFFFFFFFFFF8);
      void *v515 = *v428;
      unint64_t v516 = ((unint64_t)v515 + v1936) & v1965;
      unint64_t v517 = ((unint64_t)v428 + v1936) & v1965;
      int v518 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1938 + 16);
      swift_bridgeObjectRetain();
      v518(v516, v517, v1937);
      uint64_t v519 = (void *)((v1932 + v516) & 0xFFFFFFFFFFFFFFF8);
      v520 = (void *)((v1932 + v517) & 0xFFFFFFFFFFFFFFF8);
      *uint64_t v519 = *v520;
      int v521 = (void *)(((unint64_t)v519 + 15) & 0xFFFFFFFFFFFFFFF8);
      __darwin_ino64_t v522 = (void *)(((unint64_t)v520 + 15) & 0xFFFFFFFFFFFFFFF8);
      *int v521 = *v522;
      v521[1] = v522[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v514 = ((((v1932
               + ((v1975 + 8 + (v1948 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)v1975)) & 0xFFFFFFFFFFFFFFF8)
             + 15) & 0xFFFFFFFFFFFFFFF8)
           + 16;
LABEL_447:
      __darwin_ino64_t v523 = (unsigned char *)(((unint64_t)v425 + v514) | 2);
      uint64_t v524 = (uint64_t)v425 + v514 + 10;
      uint64_t v525 = (uint64_t)v425 + v514 + 34;
      uint64_t v526 = (unsigned char *)(((unint64_t)v424 + v514) | 2);
      uint64_t v527 = (uint64_t)v424 + v514 + 10;
      *((unsigned char *)v424 + v514) = *((unsigned char *)v425 + v514);
      uint64_t v528 = (uint64_t)v424 + v514 + 34;
      *(unsigned char *)(((unint64_t)v424 + v514) | 1) = *(unsigned char *)(((unint64_t)v425 + v514) | 1);
      uint64_t v529 = ~v37;
      *uint64_t v526 = *v523;
      unint64_t v530 = v527 & 0xFFFFFFFFFFFFFFF8;
      uint64_t v531 = *(void *)(v524 & 0xFFFFFFFFFFFFFFF8);
      uint64_t v532 = *(void *)((v524 & 0xFFFFFFFFFFFFFFF8) + 8);
      char v533 = *(unsigned char *)((v524 & 0xFFFFFFFFFFFFFFF8) + 16);
      sub_10009C5FC(v531, v532, v533);
      *(void *)unint64_t v530 = v531;
      *(void *)(v530 + 8) = v532;
      *(unsigned char *)(v530 + 16) = v533;
      unint64_t v534 = v528 & 0xFFFFFFFFFFFFFFF8;
      unint64_t v535 = v525 & 0xFFFFFFFFFFFFFFF8;
      uint64_t v536 = *(void *)((v525 & 0xFFFFFFFFFFFFFFF8) + 16) >> 60;
      if (!(4 * (v536 & 3)) || ((v536 >> 2) & 0xFFFFFFF3 | (4 * (v536 & 3))) == 0xF)
      {
        uint64_t v541 = (uint64_t *)(v535 + 8);
        *(void *)unint64_t v534 = *(void *)v535;
        unint64_t v542 = *(void *)(v535 + 16);
        uint64_t v540 = v1961;
        uint64_t v78 = a1;
        if (v542 >> 60 == 15)
        {
          *(_OWORD *)(v534 + 8) = *(_OWORD *)v541;
        }
        else
        {
          uint64_t v543 = *v541;
          sub_10001EBB0(*v541, *(void *)(v535 + 16));
          *(void *)(v534 + 8) = v543;
          *(void *)(v534 + 16) = v542;
        }
        long long v544 = *(_OWORD *)(v535 + 24);
        *(unsigned char *)(v534 + 40) = *(unsigned char *)(v535 + 40);
        *(_OWORD *)(v534 + 24) = v544;
        *(void *)(v534 + 48) = *(void *)(v535 + 48);
      }
      else
      {
        long long v537 = *(_OWORD *)v535;
        long long v538 = *(_OWORD *)(v535 + 16);
        long long v539 = *(_OWORD *)(v535 + 32);
        *(void *)(v534 + 48) = *(void *)(v535 + 48);
        *(_OWORD *)(v534 + 16) = v538;
        *(_OWORD *)(v534 + 32) = v539;
        *(_OWORD *)unint64_t v534 = v537;
        uint64_t v540 = v1961;
        uint64_t v78 = a1;
      }
      NSString v545 = (void *)((v534 + 63) & 0xFFFFFFFFFFFFFFF8);
      v546 = (void **)((v535 + 63) & 0xFFFFFFFFFFFFFFF8);
      char v547 = *v546;
      *NSString v545 = *v546;
      *(void *)(((unint64_t)v545 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v546 + 15) & 0xFFFFFFFFFFFFFFF8);
      v548 = (void *)((unint64_t)&v78[v1910] & v529);
      id v549 = (const void *)((unint64_t)&a2[v1910] & v529);
      v550 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v427 + 48);
      id v551 = v547;
      if (v550(v549, 1, v540))
      {
        memcpy(v548, v549, v1907);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v427 + 16))(v548, v549, v540);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v427 + 56))(v548, 0, 1, v540);
      }
      unint64_t v552 = (void *)(((unint64_t)v548 + v1912) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v553 = (void *)(((unint64_t)v549 + v1912) & 0xFFFFFFFFFFFFFFF8);
      *unint64_t v552 = *v553;
      unint64_t v554 = ((unint64_t)v552 + 15) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v555 = ((unint64_t)v553 + 15) & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v554 = *(void *)v555;
      *(unsigned char *)(v554 + 8) = *(unsigned char *)(v555 + 8);
      uint64_t v556 = (char *)((v74 + v554) & v1979);
      os_log_t v557 = (const void *)((v74 + v555) & v1979);
      if (v1920 == v1931)
      {
        int v558 = (*(uint64_t (**)(const void *))(v1943 + 48))(v557);
      }
      else
      {
        __darwin_ino64_t v559 = (uint64_t *)(((unint64_t)v557 + v1947) & 0xFFFFFFFFFFFFFFF8);
        if (v1987 <= 0x7FFFFFFE)
        {
          uint64_t v560 = *v559;
          if ((unint64_t)*v559 >= 0xFFFFFFFF) {
            LODWORD(v560) = -1;
          }
          if ((v560 + 1) >= 2) {
            goto LABEL_466;
          }
          goto LABEL_468;
        }
        int v558 = (*(uint64_t (**)(unint64_t))(v1945 + 48))(((unint64_t)v559 + v1939) & v1992);
      }
      if (v558)
      {
LABEL_466:
        size_t v561 = v2075;
        memcpy(v556, v557, v2075);
        goto LABEL_469;
      }
      __darwin_ino64_t v559 = (uint64_t *)(((unint64_t)v557 + v1947) & 0xFFFFFFFFFFFFFFF8);
LABEL_468:
      (*(void (**)(char *, const void *, uint64_t))(v1943 + 16))(v556, v557, v1942);
      __darwin_ino64_t v562 = (void *)((unint64_t)&v556[v1947] & 0xFFFFFFFFFFFFFFF8);
      *__darwin_ino64_t v562 = *v559;
      unint64_t v563 = ((unint64_t)v562 + v1939) & v1992;
      unint64_t v564 = ((unint64_t)v559 + v1939) & v1992;
      v565 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1945 + 16);
      swift_bridgeObjectRetain();
      v565(v563, v564, v1944);
      uint64_t v566 = (void *)((v1933 + v563) & 0xFFFFFFFFFFFFFFF8);
      v567 = (void *)((v1933 + v564) & 0xFFFFFFFFFFFFFFF8);
      *uint64_t v566 = *v567;
      v568 = (void *)(((unint64_t)v566 + 15) & 0xFFFFFFFFFFFFFFF8);
      os_log_t v569 = (void *)(((unint64_t)v567 + 15) & 0xFFFFFFFFFFFFFFF8);
      void *v568 = *v569;
      v568[1] = v569[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      size_t v561 = v2075;
LABEL_469:
      v570 = (unsigned char *)(((unint64_t)v557 + v561) | 1);
      id v571 = (unsigned char *)(((unint64_t)v557 + v561) | 2);
      uint64_t v572 = (uint64_t)v557 + v561 + 10;
      uint64_t v574 = (uint64_t)v557 + v561 + 34;
      char v573 = *((unsigned char *)v557 + v561);
      uint64_t v575 = (unsigned char *)((unint64_t)&v556[v561] | 1);
      uint64_t v576 = (unsigned char *)((unint64_t)&v556[v561] | 2);
      uint64_t v577 = (uint64_t)&v556[v561 + 10];
      v578 = &v556[v561];
      char *v578 = v573;
      *uint64_t v575 = *v570;
      *uint64_t v576 = *v571;
      unint64_t v579 = v577 & 0xFFFFFFFFFFFFFFF8;
      uint64_t v580 = *(void *)(v572 & 0xFFFFFFFFFFFFFFF8);
      uint64_t v581 = *(void *)((v572 & 0xFFFFFFFFFFFFFFF8) + 8);
      char v582 = *(unsigned char *)((v572 & 0xFFFFFFFFFFFFFFF8) + 16);
      sub_10009C5FC(v580, v581, v582);
      *(void *)unint64_t v579 = v580;
      *(void *)(v579 + 8) = v581;
      *(unsigned char *)(v579 + 16) = v582;
      unint64_t v583 = (unint64_t)(v578 + 34) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v584 = v574 & 0xFFFFFFFFFFFFFFF8;
      uint64_t v585 = *(void *)((v574 & 0xFFFFFFFFFFFFFFF8) + 16) >> 60;
      if (!(4 * (v585 & 3)) || ((v585 >> 2) & 0xFFFFFFF3 | (4 * (v585 & 3))) == 0xF)
      {
        v591 = (uint64_t *)(v584 + 8);
        *(void *)unint64_t v583 = *(void *)v584;
        unint64_t v592 = *(void *)(v584 + 16);
        uint64_t v589 = v1892;
        if (v592 >> 60 == 15)
        {
          *(_OWORD *)(v583 + 8) = *(_OWORD *)v591;
        }
        else
        {
          uint64_t v593 = *v591;
          sub_10001EBB0(*v591, *(void *)(v584 + 16));
          *(void *)(v583 + 8) = v593;
          *(void *)(v583 + 16) = v592;
        }
        unint64_t v590 = v1911;
        long long v594 = *(_OWORD *)(v584 + 24);
        *(unsigned char *)(v583 + 40) = *(unsigned char *)(v584 + 40);
        *(_OWORD *)(v583 + 24) = v594;
        *(void *)(v583 + 48) = *(void *)(v584 + 48);
      }
      else
      {
        long long v586 = *(_OWORD *)v584;
        long long v587 = *(_OWORD *)(v584 + 16);
        long long v588 = *(_OWORD *)(v584 + 32);
        *(void *)(v583 + 48) = *(void *)(v584 + 48);
        *(_OWORD *)(v583 + 16) = v587;
        *(_OWORD *)(v583 + 32) = v588;
        *(_OWORD *)unint64_t v583 = v586;
        uint64_t v589 = v1892;
        unint64_t v590 = v1911;
      }
      __darwin_ino64_t v595 = (void *)((v583 + 63) & 0xFFFFFFFFFFFFFFF8);
      v596 = (void **)((v584 + 63) & 0xFFFFFFFFFFFFFFF8);
      __darwin_ino64_t v597 = *v596;
      *__darwin_ino64_t v595 = *v596;
      *(void *)(((unint64_t)v595 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v596 + 15) & 0xFFFFFFFFFFFFFFF8);
      *((unsigned char *)v548 + v590) = *((unsigned char *)v549 + v590);
      unint64_t v598 = ((unint64_t)v548 + v590) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v599 = ((unint64_t)v549 + v590) & 0xFFFFFFFFFFFFFFF8;
      *(void *)(v598 + 8) = *(void *)(v599 + 8);
      v600 = (_OWORD *)((v598 + 23) & 0xFFFFFFFFFFFFFFF8);
      os_log_t v601 = (_OWORD *)((v599 + 23) & 0xFFFFFFFFFFFFFFF8);
      _OWORD *v600 = *v601;
      unint64_t v602 = ((unint64_t)v600 + 23) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v603 = ((unint64_t)v601 + 23) & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v602 = *(void *)v603;
      *(unsigned char *)(v602 + 8) = *(unsigned char *)(v603 + 8);
      *(void *)(((unint64_t)v600 + 39) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v601 + 39) & 0xFFFFFFFFFFFFFFF8);
      id v604 = v597;
      swift_bridgeObjectRetain();
      if (v589 > 3) {
        goto LABEL_477;
      }
      unsigned int v605 = ((1 << (8 * v589)) + 5) >> (8 * v589);
      if (v605 > 0xFFD6)
      {
        *(_DWORD *)&v78[v589] = 36;
        return v78;
      }
      if (v605 <= 0xD6) {
LABEL_477:
      }
        v78[v589] = 36;
      else {
        *(_WORD *)&v78[v589] = 36;
      }
      return v78;
    case 0x25u:
      unsigned int v377 = a2[v2002];
      unsigned int v378 = v377 - 2;
      if (v377 < 2)
      {
        uint64_t v78 = a1;
        uint64_t v382 = v1961;
        uint64_t v383 = AssociatedTypeWitness;
        size_t v381 = v2020;
        uint64_t v380 = v2021;
        uint64_t v384 = v1960;
      }
      else
      {
        if (v2002 <= 3) {
          uint64_t v379 = v2002;
        }
        else {
          uint64_t v379 = 4;
        }
        uint64_t v78 = a1;
        size_t v381 = v2020;
        uint64_t v380 = v2021;
        uint64_t v382 = v1961;
        uint64_t v383 = AssociatedTypeWitness;
        uint64_t v384 = v1960;
        switch(v379)
        {
          case 1:
            int v385 = *a2;
            goto LABEL_923;
          case 2:
            int v385 = *(unsigned __int16 *)a2;
            goto LABEL_923;
          case 3:
            int v385 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_923;
          case 4:
            int v385 = *(_DWORD *)a2;
LABEL_923:
            if (v2002 < 4) {
              unsigned int v377 = (v385 | (v378 << (8 * v2002))) + 2;
            }
            else {
              unsigned int v377 = v385 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v753 = v377 == 1;
      if (v377 == 1) {
        uint64_t v754 = v380;
      }
      else {
        uint64_t v754 = v384;
      }
      if (v377 == 1) {
        uint64_t v755 = v382;
      }
      else {
        uint64_t v755 = v383;
      }
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v754 + 16))(v78, a2, v755);
      v78[v2002] = v753;
      v78[v381] = a2[v381];
      if (v1892 > 3) {
        goto LABEL_933;
      }
      unsigned int v756 = ((1 << (8 * v1892)) + 5) >> (8 * v1892);
      if (v756 > 0xFFD6)
      {
        *(_DWORD *)&v78[v1892] = 37;
      }
      else if (v756 <= 0xD6)
      {
LABEL_933:
        v78[v1892] = 37;
      }
      else
      {
        *(_WORD *)&v78[v1892] = 37;
      }
      return v78;
    case 0x26u:
      unsigned int v386 = a2[v2002];
      unsigned int v387 = v386 - 2;
      if (v386 < 2)
      {
        uint64_t v78 = a1;
        uint64_t v390 = v2021;
        uint64_t v391 = v1960;
        uint64_t v389 = v1892;
      }
      else
      {
        if (v2002 <= 3) {
          uint64_t v388 = v2002;
        }
        else {
          uint64_t v388 = 4;
        }
        uint64_t v78 = a1;
        uint64_t v389 = v1892;
        uint64_t v390 = v2021;
        uint64_t v391 = v1960;
        switch(v388)
        {
          case 1:
            int v392 = *a2;
            goto LABEL_941;
          case 2:
            int v392 = *(unsigned __int16 *)a2;
            goto LABEL_941;
          case 3:
            int v392 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_941;
          case 4:
            int v392 = *(_DWORD *)a2;
LABEL_941:
            if (v2002 < 4) {
              unsigned int v386 = (v392 | (v387 << (8 * v2002))) + 2;
            }
            else {
              unsigned int v386 = v392 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v757 = v386 == 1;
      if (v386 == 1) {
        uint64_t v758 = v390;
      }
      else {
        uint64_t v758 = v391;
      }
      (*(void (**)(unsigned char *))(v758 + 16))(v78);
      v78[v2002] = v757;
      if (v389 > 3) {
        goto LABEL_948;
      }
      unsigned int v759 = ((1 << (8 * v389)) + 5) >> (8 * v389);
      if (v759 > 0xFFD6)
      {
        *(_DWORD *)&v78[v389] = 38;
      }
      else if (v759 <= 0xD6)
      {
LABEL_948:
        v78[v389] = 38;
      }
      else
      {
        *(_WORD *)&v78[v389] = 38;
      }
      return v78;
    case 0x27u:
      unsigned int v393 = a2[v2002];
      unsigned int v394 = v393 - 2;
      if (v393 < 2)
      {
        uint64_t v78 = a1;
        uint64_t v397 = v2021;
        uint64_t v398 = v1960;
        uint64_t v396 = v1892;
      }
      else
      {
        if (v2002 <= 3) {
          uint64_t v395 = v2002;
        }
        else {
          uint64_t v395 = 4;
        }
        uint64_t v78 = a1;
        uint64_t v396 = v1892;
        uint64_t v397 = v2021;
        uint64_t v398 = v1960;
        switch(v395)
        {
          case 1:
            int v399 = *a2;
            goto LABEL_956;
          case 2:
            int v399 = *(unsigned __int16 *)a2;
            goto LABEL_956;
          case 3:
            int v399 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_956;
          case 4:
            int v399 = *(_DWORD *)a2;
LABEL_956:
            if (v2002 < 4) {
              unsigned int v393 = (v399 | (v394 << (8 * v2002))) + 2;
            }
            else {
              unsigned int v393 = v399 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v760 = v393 == 1;
      if (v393 == 1) {
        uint64_t v761 = v397;
      }
      else {
        uint64_t v761 = v398;
      }
      (*(void (**)(unsigned char *))(v761 + 16))(v78);
      v78[v2002] = v760;
      if (v396 > 3) {
        goto LABEL_963;
      }
      unsigned int v762 = ((1 << (8 * v396)) + 5) >> (8 * v396);
      if (v762 > 0xFFD6)
      {
        *(_DWORD *)&v78[v396] = 39;
      }
      else if (v762 <= 0xD6)
      {
LABEL_963:
        v78[v396] = 39;
      }
      else
      {
        *(_WORD *)&v78[v396] = 39;
      }
      return v78;
    case 0x28u:
      unsigned int v400 = a2[v2002];
      unsigned int v401 = v400 - 2;
      if (v400 < 2)
      {
        uint64_t v78 = a1;
        uint64_t v404 = v2021;
        uint64_t v405 = v1960;
        uint64_t v403 = v1892;
      }
      else
      {
        if (v2002 <= 3) {
          uint64_t v402 = v2002;
        }
        else {
          uint64_t v402 = 4;
        }
        uint64_t v78 = a1;
        uint64_t v403 = v1892;
        uint64_t v404 = v2021;
        uint64_t v405 = v1960;
        switch(v402)
        {
          case 1:
            int v406 = *a2;
            goto LABEL_971;
          case 2:
            int v406 = *(unsigned __int16 *)a2;
            goto LABEL_971;
          case 3:
            int v406 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_971;
          case 4:
            int v406 = *(_DWORD *)a2;
LABEL_971:
            if (v2002 < 4) {
              unsigned int v400 = (v406 | (v401 << (8 * v2002))) + 2;
            }
            else {
              unsigned int v400 = v406 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v763 = v400 == 1;
      if (v400 == 1) {
        uint64_t v764 = v404;
      }
      else {
        uint64_t v764 = v405;
      }
      (*(void (**)(unsigned char *))(v764 + 16))(v78);
      v78[v2002] = v763;
      if (v403 > 3) {
        goto LABEL_978;
      }
      unsigned int v765 = ((1 << (8 * v403)) + 5) >> (8 * v403);
      if (v765 > 0xFFD6)
      {
        *(_DWORD *)&v78[v403] = 40;
      }
      else if (v765 <= 0xD6)
      {
LABEL_978:
        v78[v403] = 40;
      }
      else
      {
        *(_WORD *)&v78[v403] = 40;
      }
      return v78;
    default:
      if (v88 > 3) {
        goto LABEL_142;
      }
      unsigned int v93 = ((1 << (8 * v88)) + 5) >> (8 * v88);
      uint64_t v94 = 2;
      if (v93 > 0xFFD6) {
        uint64_t v94 = 4;
      }
      if (v93 <= 0xD6) {
LABEL_142:
      }
        uint64_t v94 = 1;
      uint64_t v78 = a1;
      memcpy(a1, (const void *)v84, v94 + v88);
      return v78;
  }
}

uint64_t sub_10018B584(uint64_t a1, unint64_t a2)
{
  if ((a2 >> 62) <= 1) {
    return swift_retain();
  }
  return result;
}

void sub_10018B5A4(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v607 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v4 = *(void *)(v607 + 64);
  uint64_t v593 = *(void *)(a2 + 24);
  uint64_t v572 = swift_getAssociatedTypeWitness();
  uint64_t v606 = *(void *)(v572 - 8);
  uint64_t v5 = *(unsigned __int8 *)(v606 + 80);
  uint64_t v548 = v4 + v5;
  uint64_t v610 = v5;
  unint64_t v587 = (v4 + v5) & ~v5;
  unint64_t v597 = *(void *)(v606 + 64);
  unint64_t v591 = v587 + v597;
  if (v597 <= v4) {
    unint64_t v6 = v4;
  }
  else {
    unint64_t v6 = *(void *)(*(void *)(v572 - 8) + 64);
  }
  unint64_t v613 = v6;
  unint64_t v600 = v6 + 1;
  uint64_t v7 = *(unsigned __int8 *)(v607 + 80);
  uint64_t v592 = v7 | v5;
  uint64_t v568 = (v7 | v5) + v6 + 1;
  unint64_t v589 = (v568 & ~(v7 | v5)) + v6 + 1;
  unsigned int v612 = *(_DWORD *)(v607 + 84);
  uint64_t v594 = v3;
  uint64_t v557 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v557 - 8);
  unsigned int v9 = *(_DWORD *)(v8 + 84);
  uint64_t v553 = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(v553 - 8);
  uint64_t v11 = v10;
  unsigned int v12 = *(_DWORD *)(v10 + 84);
  unsigned int v546 = v9;
  if (v9 > v12) {
    unsigned int v12 = v9;
  }
  unsigned int v537 = v12;
  if (v12 <= 0x7FFFFFFE) {
    unsigned int v12 = 2147483646;
  }
  unsigned int v550 = v12;
  if (v12 <= v612) {
    unsigned int v13 = v612;
  }
  else {
    unsigned int v13 = v12;
  }
  uint64_t v570 = sub_10096B0E0();
  uint64_t v14 = *(void *)(v570 - 8);
  unsigned int v15 = *(_DWORD *)(v14 + 84);
  if (v15 <= 0x7FFFFFFE) {
    unsigned int v16 = 2147483646;
  }
  else {
    unsigned int v16 = *(_DWORD *)(v14 + 84);
  }
  unsigned int v580 = v16;
  if (v13 > v16) {
    unsigned int v16 = v13;
  }
  unsigned int v536 = v16;
  if (v16 <= 0x7FFFFFFF) {
    unsigned int v16 = 0x7FFFFFFF;
  }
  unsigned int v545 = v16;
  unsigned int v533 = *(_DWORD *)(v14 + 84);
  unint64_t v598 = v4;
  uint64_t v555 = v4 + v7;
  uint64_t v608 = v7;
  uint64_t v558 = v8;
  uint64_t v554 = v10;
  uint64_t v17 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v18 = *(_DWORD *)(v8 + 80) & 0xF8 | v17 | 7;
  uint64_t v543 = v4 + v18;
  uint64_t v584 = v18;
  uint64_t v556 = *(void *)(v8 + 64) + 7;
  uint64_t v552 = v17 + 8;
  uint64_t v574 = v17;
  unint64_t v604 = ((((*(void *)(v10 + 64) + 7 + ((v17 + 8 + (v556 & 0xFFFFFFFFFFFFFFF8)) & ~v17)) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + 16;
  uint64_t v567 = *(void *)(v570 - 8);
  uint64_t v19 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v605 = (v19 | 7) + 16;
  uint64_t v569 = v19 + 12;
  uint64_t v20 = *(void *)(v567 + 64);
  uint64_t v565 = v20 + v19;
  uint64_t v566 = v20 + 12;
  unint64_t v21 = (v19
       + 10
       + ((((((v20 + 12 + ((v20 + v19 + ((v19 + 12) & ~v19)) & ~v19)) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v19;
  if (!v15) {
    ++v20;
  }
  uint64_t v563 = v20 + 7;
  uint64_t v564 = v19 + 10;
  unint64_t v573 = (((((((((v20 + 7 + v21) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8)
        + 25) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = (((v573 + 327 + ((v605 + v604 + ((v4 + v18 + ((v4 + v7) & ~v7)) & ~v18)) & ~(v19 | 7))) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v595 = v22 + 16;
  uint64_t v23 = *(_DWORD *)(v8 + 80) & 0xF8 | v17 | 7 | v7 | v19;
  unint64_t v539 = v22 + 16 + v23;
  unint64_t v585 = ((v22 + (v539 & ~v23) + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  unsigned int v24 = *(_DWORD *)(v606 + 84);
  uint64_t v559 = swift_getAssociatedTypeWitness();
  uint64_t v25 = *(void *)(v559 - 8);
  uint64_t v26 = v25;
  unsigned int v27 = *(_DWORD *)(v25 + 84);
  uint64_t v562 = swift_getAssociatedTypeWitness();
  uint64_t v28 = *(void *)(v562 - 8);
  uint64_t v29 = v25;
  unsigned int v30 = *(_DWORD *)(v28 + 84);
  unsigned int v534 = v30;
  unsigned int v547 = v27;
  if (v27 > v30) {
    unsigned int v30 = v27;
  }
  uint64_t v31 = v19 | 7;
  uint64_t v32 = v19;
  unsigned int v538 = v30;
  if (v30 <= 0x7FFFFFFE) {
    unsigned int v30 = 2147483646;
  }
  unsigned int v551 = v30;
  if (v30 <= v24) {
    unsigned int v30 = v24;
  }
  if (v30 <= v580) {
    unsigned int v30 = v580;
  }
  unsigned int v535 = v30;
  if (v30 <= 0x7FFFFFFF) {
    unsigned int v30 = 0x7FFFFFFF;
  }
  unsigned int v549 = v30;
  uint64_t v560 = v25;
  uint64_t v33 = *(unsigned __int8 *)(v28 + 80);
  uint64_t v34 = *(_DWORD *)(v25 + 80) & 0xF8 | v33 | 7;
  uint64_t v561 = *(void *)(v29 + 64) + 7;
  uint64_t v581 = v33 + 8;
  unint64_t v35 = ((((*(void *)(*(void *)(v562 - 8) + 64) + 7 + ((v33 + 8 + (v561 & 0xFFFFFFFFFFFFFFF8)) & ~v33)) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  unint64_t v36 = v4;
  unint64_t v531 = v23 + v4;
  uint64_t v37 = v23;
  unint64_t v38 = v595 + ((v23 + v4) & ~v23);
  unint64_t v39 = (v38 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v40 = ((v39 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  unint64_t v41 = (v38 + v610) & ~v610;
  unsigned int v544 = v24;
  if (v24) {
    unint64_t v42 = v597;
  }
  else {
    unint64_t v42 = v597 + 1;
  }
  unint64_t v43 = ((((((v42 + v34 + v41) & ~v34) + v35 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  uint64_t v529 = v42 + v34;
  unint64_t v44 = ((v39 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  uint64_t v45 = *(void *)(v594 - 8);
  uint64_t v46 = *(unsigned __int8 *)(v45 + 80);
  uint64_t v525 = v4 + v46;
  uint64_t v527 = v45;
  uint64_t v47 = *(void *)(v45 + 64);
  if (!*(_DWORD *)(v45 + 84)) {
    ++v47;
  }
  unint64_t v48 = v47 + ((v4 + v46) & ~v46);
  if (v4 > v40) {
    unint64_t v40 = v4;
  }
  if (v43 <= v35 + ((v42 + v34 + v587) & ~v34) + 16) {
    unint64_t v43 = v35 + ((v42 + v34 + v587) & ~v34) + 16;
  }
  if (v44 > v48) {
    unint64_t v48 = v44;
  }
  if (v40 <= v43) {
    unint64_t v40 = v43;
  }
  if (v40 <= v48) {
    unint64_t v40 = v48;
  }
  if (!v612) {
    unint64_t v36 = v4 + 1;
  }
  uint64_t v49 = *(void *)(v593 - 8);
  uint64_t v50 = *(unsigned __int8 *)(v49 + 80);
  uint64_t v526 = v49;
  int v51 = *(_DWORD *)(v49 + 84);
  uint64_t v52 = *(void *)(v49 + 64);
  uint64_t v588 = v597 + v610;
  uint64_t v542 = v597 + v34;
  unint64_t v53 = (((v573 + 327 + ((v605 + v35 + ((v597 + v34 + ((v597 + v610) & ~v610)) & ~v34)) & ~(v19 | 7))) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v54 = v53 + 16;
  uint64_t v55 = v34 | v610;
  uint64_t v56 = v34 | v610 | v32;
  unint64_t v583 = v53 + 16 + v56;
  unint64_t v57 = v53 + (v583 & ~v56);
  if (!v51) {
    ++v52;
  }
  uint64_t v524 = v597 + v50;
  unint64_t v58 = v52 + ((v597 + v50) & ~v50);
  unint64_t v530 = v56 + v597;
  unint64_t v59 = v54 + ((v56 + v597) & ~v56);
  unint64_t v60 = (v59 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v61 = ((v60 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  uint64_t v62 = v608;
  uint64_t v63 = v584;
  unint64_t v64 = ((((((v36 + v63 + ((v59 + v62) & ~v62)) & ~v63) + v604 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  uint64_t v528 = v36 + v584;
  unint64_t v65 = v604 + ((v36 + v63 + ((v597 + v62) & ~v62)) & ~v63) + 16;
  if (v597 > v61) {
    unint64_t v61 = v597;
  }
  if (v64 <= v65) {
    unint64_t v64 = v65;
  }
  unint64_t v66 = ((v60 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v66 > v58) {
    unint64_t v58 = v66;
  }
  if (v61 > v64) {
    unint64_t v64 = v61;
  }
  if (v64 > v58) {
    unint64_t v58 = v64;
  }
  if (v58 + 1 <= v40 + 1) {
    unint64_t v67 = v40 + 1;
  }
  else {
    unint64_t v67 = v58 + 1;
  }
  if (v600 > v613 + 2) {
    unint64_t v68 = v613 + 1;
  }
  else {
    unint64_t v68 = v613 + 2;
  }
  if (v68 <= v591) {
    unint64_t v68 = v591;
  }
  if (v68 <= v589) {
    unint64_t v68 = v589;
  }
  if (v68 <= v585) {
    unint64_t v68 = v585;
  }
  unint64_t v69 = ((v57 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v68 > v69) {
    unint64_t v69 = v68;
  }
  if (v69 <= v595) {
    unint64_t v69 = v595;
  }
  unint64_t v532 = v54;
  if (v69 <= v54) {
    unint64_t v69 = v54;
  }
  if (v69 <= v589 + 2) {
    unint64_t v69 = v589 + 2;
  }
  if (v69 <= ((v613 + 9) & 0xFFFFFFFFFFFFFFF8) + 8) {
    unint64_t v69 = ((v613 + 9) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  if (v69 <= (v613 & 0xFFFFFFFFFFFFFFF8) + 16) {
    unint64_t v69 = (v613 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  uint64_t v70 = v592;
  if (v69 <= ((v592 + 1) & ~v592) + v600) {
    unint64_t v69 = ((v592 + 1) & ~v592) + v600;
  }
  unint64_t v540 = v36;
  unint64_t v586 = v42 + 7;
  unint64_t v582 = ((((*(void *)(*(void *)(v562 - 8) + 64) + 7 + ((v33 + 8 + (v561 & 0xFFFFFFFFFFFFFFF8)) & ~v33)) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + 16;
  uint64_t v71 = a1;
  unint64_t v541 = ((((((((v584 + ((((v36 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 9) & ~v584) + v604 + 34) & 0xFFFFFFFFFFFFFFF8)
           + 63) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + v55
       + 8;
  unint64_t v72 = ((((((((((((v34 + 9 + ((((v42 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v34) + v35 + 34) & 0xFFFFFFFFFFFFFFF8)
              + 63) & 0xFFFFFFFFFFFFFFF8)
            + 15) & 0xFFFFFFFFFFFFFFF8)
          + 8
          + (v541 & ~v55)
          + 23) & 0xFFFFFFFFFFFFFFF8)
        + 39) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  if (v69 <= v67 + 1) {
    unint64_t v69 = v67 + 1;
  }
  if (v69 > v72) {
    unint64_t v72 = v69;
  }
  if (v72 <= 0x38) {
    uint64_t v73 = 56;
  }
  else {
    uint64_t v73 = v72;
  }
  uint64_t v590 = v34 + 9;
  if (v73 > 3) {
    goto LABEL_95;
  }
  unsigned int v74 = ((1 << (8 * v73)) + 5) >> (8 * v73);
  if (v74 > 0xFFD6)
  {
    unsigned int v75 = *(_DWORD *)&a1[v73];
    unsigned int v76 = v75 - 41;
    if (v75 < 0x29) {
      goto LABEL_113;
    }
    goto LABEL_100;
  }
  if (v74 <= 0xD6)
  {
LABEL_95:
    unsigned int v75 = a1[v73];
    unsigned int v76 = v75 - 41;
    if (v75 < 0x29) {
      goto LABEL_113;
    }
LABEL_100:
    if (v73 <= 3) {
      uint64_t v77 = v73;
    }
    else {
      uint64_t v77 = 4;
    }
    switch(v77)
    {
      case 1:
        int v78 = *a1;
        if (v73 < 4) {
          goto LABEL_111;
        }
        goto LABEL_112;
      case 2:
        int v78 = *(unsigned __int16 *)a1;
        if (v73 >= 4) {
          goto LABEL_112;
        }
        goto LABEL_111;
      case 3:
        int v78 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        if (v73 >= 4) {
          goto LABEL_112;
        }
        goto LABEL_111;
      case 4:
        int v78 = *(_DWORD *)a1;
        if (v73 < 4) {
LABEL_111:
        }
          v78 |= v76 << (8 * v73);
LABEL_112:
        unsigned int v75 = v78 + 41;
        break;
      default:
        goto LABEL_113;
    }
    goto LABEL_113;
  }
  unsigned int v75 = *(unsigned __int16 *)&a1[v73];
  unsigned int v76 = v75 - 41;
  if (v75 >= 0x29) {
    goto LABEL_100;
  }
LABEL_113:
  uint64_t v79 = ~v610;
  uint64_t v80 = ~v608;
  uint64_t v81 = ~v584;
  uint64_t v82 = ~v574;
  uint64_t v83 = ~v31;
  uint64_t v84 = ~v32;
  uint64_t v85 = ~v37;
  uint64_t v86 = ~v34;
  uint64_t v87 = ~v33;
  uint64_t v88 = ~v56;
  switch(v75)
  {
    case 0u:
    case 0x12u:
      (*(void (**)(unsigned __int8 *, uint64_t))(v607 + 8))(a1, AssociatedTypeWitness);
      unint64_t v89 = (unsigned __int8 *)((unint64_t)&a1[v548] & v79);
      goto LABEL_467;
    case 1u:
      unsigned int v90 = a1[v613];
      unsigned int v91 = v90 - 2;
      if (v90 >= 2)
      {
        if (v613 <= 3) {
          uint64_t v92 = v613;
        }
        else {
          uint64_t v92 = 4;
        }
        switch(v92)
        {
          case 1:
            goto LABEL_287;
          case 2:
            goto LABEL_288;
          case 3:
            goto LABEL_289;
          case 4:
            goto LABEL_290;
          default:
            goto LABEL_293;
        }
      }
      goto LABEL_293;
    case 2u:
      unsigned int v90 = a1[v613];
      unsigned int v91 = v90 - 2;
      if (v90 >= 2)
      {
        if (v613 <= 3) {
          uint64_t v93 = v613;
        }
        else {
          uint64_t v93 = 4;
        }
        switch(v93)
        {
          case 1:
            goto LABEL_287;
          case 2:
            goto LABEL_288;
          case 3:
            goto LABEL_289;
          case 4:
            goto LABEL_290;
          default:
            goto LABEL_293;
        }
      }
      goto LABEL_293;
    case 3u:
      unsigned int v90 = a1[v613];
      unsigned int v91 = v90 - 2;
      if (v90 >= 2)
      {
        if (v613 <= 3) {
          uint64_t v94 = v613;
        }
        else {
          uint64_t v94 = 4;
        }
        switch(v94)
        {
          case 1:
            goto LABEL_287;
          case 2:
            goto LABEL_288;
          case 3:
            goto LABEL_289;
          case 4:
            goto LABEL_290;
          default:
            goto LABEL_293;
        }
      }
      goto LABEL_293;
    case 4u:
      unsigned int v95 = a1[v613];
      unsigned int v96 = v95 - 2;
      if (v95 < 2)
      {
        uint64_t v99 = AssociatedTypeWitness;
        uint64_t v98 = v572;
        uint64_t v100 = ~v592;
      }
      else
      {
        if (v613 <= 3) {
          uint64_t v97 = v613;
        }
        else {
          uint64_t v97 = 4;
        }
        uint64_t v99 = AssociatedTypeWitness;
        uint64_t v98 = v572;
        uint64_t v100 = ~v592;
        switch(v97)
        {
          case 1:
            int v101 = *a1;
            goto LABEL_394;
          case 2:
            int v101 = *(unsigned __int16 *)a1;
            goto LABEL_394;
          case 3:
            int v101 = *(unsigned __int16 *)a1 | (a1[2] << 16);
            goto LABEL_394;
          case 4:
            int v101 = *(_DWORD *)a1;
LABEL_394:
            if (v613 < 4) {
              unsigned int v95 = (v101 | (v96 << (8 * v613))) + 2;
            }
            else {
              unsigned int v95 = v101 + 2;
            }
            break;
          default:
            break;
        }
      }
      if (v95 == 1) {
        uint64_t v239 = v606;
      }
      else {
        uint64_t v239 = v607;
      }
      if (v95 == 1) {
        uint64_t v240 = v98;
      }
      else {
        uint64_t v240 = v99;
      }
      (*(void (**)(unsigned __int8 *, uint64_t, uint64_t, uint64_t))(v239 + 8))(a1, v240, v592, v82);
      unint64_t v89 = (unsigned __int8 *)((unint64_t)&a1[v568] & v100);
      unsigned int v162 = v89[v613];
      unsigned int v163 = v162 - 2;
      if (v162 >= 2)
      {
        if (v613 <= 3) {
          uint64_t v241 = v613;
        }
        else {
          uint64_t v241 = 4;
        }
        switch(v241)
        {
          case 1:
            goto LABEL_459;
          case 2:
            goto LABEL_460;
          case 3:
            goto LABEL_461;
          case 4:
            goto LABEL_462;
          default:
            goto LABEL_466;
        }
      }
      goto LABEL_466;
    case 5u:
      uint64_t v609 = ~v37;
      uint64_t v611 = v80;
      uint64_t v614 = ~v584;
      uint64_t v102 = v612;
      unsigned int v103 = v545;
      uint64_t v513 = ~v574;
      uint64_t v515 = v84;
      unint64_t v575 = v573 + 16;
      if (v612 != v545)
      {
        unint64_t v202 = (unint64_t)&a1[v555] & v80;
        unint64_t v203 = (v202 + v598 + v584) & v614;
        if (v550 == v545)
        {
          uint64_t v106 = v570;
          if (v546 == v550)
          {
            int v104 = (*(uint64_t (**)(unint64_t))(v558 + 48))((v202 + v598 + v584) & v614);
LABEL_477:
            uint64_t v105 = v83;
            goto LABEL_478;
          }
          unsigned int v234 = (unint64_t *)((v556 + v203) & 0xFFFFFFFFFFFFFFF8);
          if (v537 > 0x7FFFFFFE)
          {
            int v104 = (*(uint64_t (**)(unint64_t))(v554 + 48))(((unint64_t)v234 + v552) & v82);
            goto LABEL_477;
          }
          unint64_t v235 = *v234;
          if (v235 >= 0xFFFFFFFF) {
            LODWORD(v235) = -1;
          }
          uint64_t v236 = v607;
          unint64_t v214 = v539;
          uint64_t v105 = v83;
          if ((v235 + 1) < 2) {
            goto LABEL_481;
          }
        }
        else
        {
          unint64_t v212 = v604 + v203;
          uint64_t v106 = v570;
          if ((v536 & 0x80000000) == 0)
          {
            unint64_t v213 = *(void *)(v212 + 8);
            if (v213 >= 0xFFFFFFFF) {
              LODWORD(v213) = -1;
            }
            int v104 = v213 + 1;
            unint64_t v214 = v539;
            uint64_t v105 = v83;
            goto LABEL_479;
          }
          uint64_t v105 = v83;
          uint64_t v254 = (v569 + ((v605 + v212) & v83)) & v84;
          if (v533 > 0x7FFFFFFD)
          {
            int v104 = (*(uint64_t (**)(uint64_t))(v567 + 48))(v254);
            uint64_t v105 = v83;
            goto LABEL_478;
          }
          unint64_t v365 = *(void *)(((v566 + ((v565 + v254) & v84)) & 0xFFFFFFFFFFFFFFF8) + 8);
          if (v365 >= 0xFFFFFFFF) {
            LODWORD(v365) = -1;
          }
          uint64_t v236 = v607;
          unint64_t v214 = v539;
          if ((v365 + 1) < 2) {
            goto LABEL_481;
          }
        }
        unint64_t v266 = (unint64_t)&a1[v214] & v609;
        goto LABEL_580;
      }
      int v104 = (*(uint64_t (**)(unsigned __int8 *, void, uint64_t, uint64_t))(v607 + 48))(a1, v612, AssociatedTypeWitness, v82);
      uint64_t v105 = v83;
      uint64_t v106 = v570;
LABEL_478:
      unint64_t v214 = v539;
LABEL_479:
      uint64_t v236 = v607;
      uint64_t v255 = v609;
      if (v104) {
        goto LABEL_492;
      }
      unint64_t v202 = (unint64_t)&a1[v555] & v611;
      unint64_t v203 = (v202 + v598 + v584) & v614;
LABEL_481:
      uint64_t v256 = *(void (**)(unsigned __int8 *, uint64_t, uint64_t, uint64_t))(v236 + 8);
      uint64_t v257 = v105;
      v256(a1, AssociatedTypeWitness, v70, v82);
      ((void (*)(unint64_t, uint64_t))v256)(v202, AssociatedTypeWitness);
      (*(void (**)(unint64_t, uint64_t))(v558 + 8))(v203, v557);
      swift_bridgeObjectRelease();
      (*(void (**)(unint64_t, uint64_t))(v554 + 8))((v552 + ((v556 + v203) & 0xFFFFFFFFFFFFFFF8)) & v513, v553);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v599 = v257;
      unint64_t v258 = (v605 + v604 + v203) & v257;
      int v259 = *(void (**)(unint64_t, uint64_t))(v567 + 8);
      v259((v569 + v258) & v515, v106);
      unint64_t v260 = (v565 + ((v569 + v258) & v515)) & v515;
      v259(v260, v106);
      swift_bridgeObjectRelease();
      unint64_t v261 = (v564
            + ((((((v566 + v260) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v515;
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v567 + 48))(v261, 1, v106)) {
        v259(v261, v106);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v262 = (uint64_t *)((((((v563 + v261) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v263 = v262[1];
      if ((v263 & 0x3000000000000000) == 0) {
        sub_10001E9C0(*v262, v263);
      }
      swift_bridgeObjectRelease();
      unint64_t v264 = v575 + v258;
      LODWORD(v265) = -1;
      if (*(void *)(v575 + v258 + 16) < 0xFFFFFFFFuLL) {
        uint64_t v265 = *(void *)(v575 + v258 + 16);
      }
      uint64_t v71 = a1;
      uint64_t v102 = v612;
      unsigned int v103 = v545;
      if ((int)v265 - 1 < 0)
      {
        swift_errorRelease();
        swift_errorRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (*(void *)(v264 + 192))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      sub_1000CF144(*(void *)((((v264 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *(void *)(((((v264 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
      uint64_t v236 = v607;
      uint64_t v255 = v609;
      uint64_t v105 = v599;
LABEL_492:
      unint64_t v266 = (unint64_t)&v71[v214] & v255;
      if (v102 == v103)
      {
        uint64_t v267 = v105;
        int v268 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v236 + 48))(v266, v102, AssociatedTypeWitness, v82);
        uint64_t v269 = v513;
        uint64_t v270 = v515;
        unint64_t v271 = v573 + 16;
LABEL_595:
        if (v268) {
          return;
        }
        uint64_t v375 = v267;
        unint64_t v366 = (v555 + v266) & v611;
        unint64_t v367 = (v543 + v366) & v614;
        goto LABEL_598;
      }
LABEL_580:
      unint64_t v271 = v573 + 16;
      unint64_t v366 = (v555 + v266) & v611;
      unint64_t v367 = (v543 + v366) & v614;
      BOOL v368 = v550 == v103;
      uint64_t v269 = v513;
      uint64_t v270 = v515;
      if (!v368)
      {
        unint64_t v371 = v367 + v604;
        if ((v536 & 0x80000000) == 0)
        {
          uint64_t v267 = v105;
          unint64_t v372 = *(void *)(v371 + 8);
          if (v372 >= 0xFFFFFFFF) {
            LODWORD(v372) = -1;
          }
          int v268 = v372 + 1;
          goto LABEL_595;
        }
        unint64_t v370 = (v569 + ((v605 + v371) & v105)) & v515;
        if (v533 > 0x7FFFFFFD)
        {
          unsigned int v369 = *(uint64_t (**)(unint64_t))(v567 + 48);
          uint64_t v267 = v105;
LABEL_594:
          int v268 = v369(v370);
          uint64_t v269 = v513;
          goto LABEL_595;
        }
        unint64_t v374 = *(void *)(((v566 + ((v565 + v370) & v515)) & 0xFFFFFFFFFFFFFFF8) + 8);
        goto LABEL_613;
      }
      if (v546 == v550)
      {
        unsigned int v369 = *(uint64_t (**)(unint64_t))(v558 + 48);
        unint64_t v370 = (v543 + v366) & v614;
LABEL_593:
        uint64_t v267 = v105;
        goto LABEL_594;
      }
      uint64_t v373 = (unint64_t *)((v556 + v367) & 0xFFFFFFFFFFFFFFF8);
      if (v537 > 0x7FFFFFFE)
      {
        unint64_t v370 = ((unint64_t)v373 + v552) & v513;
        unsigned int v369 = *(uint64_t (**)(unint64_t))(v554 + 48);
        goto LABEL_593;
      }
      unint64_t v374 = *v373;
LABEL_613:
      if (v374 >= 0xFFFFFFFF) {
        LODWORD(v374) = -1;
      }
      uint64_t v375 = v105;
      if ((v374 + 1) < 2)
      {
LABEL_598:
        uint64_t v376 = *(void (**)(unint64_t, uint64_t))(v607 + 8);
        uint64_t v377 = v269;
        v376(v266, AssociatedTypeWitness);
        v376(v366, AssociatedTypeWitness);
        (*(void (**)(unint64_t, uint64_t))(v558 + 8))(v367, v557);
        swift_bridgeObjectRelease();
        (*(void (**)(unint64_t, uint64_t))(v554 + 8))((v552 + ((v556 + v367) & 0xFFFFFFFFFFFFFFF8)) & v377, v553);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v378 = (v605 + v367 + v604) & v375;
        uint64_t v379 = *(void (**)(unint64_t, uint64_t))(v567 + 8);
        v379((v569 + v378) & v270, v570);
        unint64_t v380 = (v565 + ((v569 + v378) & v270)) & v270;
        v379(v380, v570);
        swift_bridgeObjectRelease();
        unint64_t v381 = (v564
              + ((((((v566 + v380) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v270;
        if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v567 + 48))(v381, 1, v570)) {
          v379(v381, v570);
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v382 = (uint64_t *)((((((v563 + v381) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
        unint64_t v383 = v382[1];
        if ((v383 & 0x3000000000000000) == 0) {
          sub_10001E9C0(*v382, v383);
        }
        swift_bridgeObjectRelease();
        unint64_t v125 = v378 + v271;
        goto LABEL_603;
      }
      return;
    case 6u:
      uint64_t v107 = v83;
      uint64_t v615 = ~v610;
      unint64_t v576 = v573 + 16;
      uint64_t v518 = *(void *)(v562 - 8);
      if (v544 == v549)
      {
        int v108 = a1;
        uint64_t v109 = v84;
        uint64_t v110 = v107;
        uint64_t v111 = ~v56;
        int v112 = (*(uint64_t (**)(unsigned __int8 *, void, uint64_t, uint64_t))(v606 + 48))(a1, v544, v572, v82);
        uint64_t v88 = v111;
        uint64_t v86 = ~v34;
        uint64_t v107 = v110;
        uint64_t v84 = v109;
        uint64_t v113 = v570;
LABEL_496:
        uint64_t v273 = ~v610;
        if (v112)
        {
LABEL_509:
          unint64_t v286 = (unint64_t)&v108[v583] & v88;
          unsigned int v287 = v549;
          if (v544 == v549)
          {
            uint64_t v288 = v86;
            uint64_t v289 = v84;
            uint64_t v290 = v107;
            int v291 = (*(uint64_t (**)(unint64_t, void, uint64_t))(v606 + 48))((unint64_t)&v108[v583] & v88, v544, v572);
            uint64_t v107 = v290;
            uint64_t v273 = ~v610;
            uint64_t v84 = v289;
            uint64_t v292 = v518;
            uint64_t v293 = v562;
            uint64_t v294 = v581;
LABEL_525:
            if (v291) {
              return;
            }
            unint64_t v296 = (v588 + v286) & v273;
            unint64_t v297 = (v542 + v296) & v288;
            goto LABEL_527;
          }
          uint64_t v294 = v581;
          unint64_t v295 = v582;
          uint64_t v292 = v518;
          uint64_t v293 = v562;
LABEL_512:
          unint64_t v296 = (v588 + v286) & v273;
          uint64_t v288 = v86;
          unint64_t v297 = (v542 + v296) & v86;
          uint64_t v298 = v547;
          if (v551 == v287)
          {
            if (v547 == v551)
            {
              uint64_t v299 = v559;
              int v300 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v560 + 48);
              unint64_t v301 = v297;
              uint64_t v516 = v84;
              uint64_t v302 = v107;
LABEL_524:
              uint64_t v307 = v294;
              int v291 = v300(v301, v298, v299);
              uint64_t v294 = v307;
              uint64_t v107 = v302;
              uint64_t v273 = ~v610;
              uint64_t v84 = v516;
              goto LABEL_525;
            }
            uint64_t v305 = (unint64_t *)((v561 + v297) & 0xFFFFFFFFFFFFFFF8);
            if (v538 > 0x7FFFFFFE)
            {
              unint64_t v301 = ((unint64_t)v305 + v294) & v87;
              int v300 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v292 + 48);
              uint64_t v516 = v84;
              uint64_t v298 = v534;
              uint64_t v302 = v107;
              uint64_t v299 = v293;
              goto LABEL_524;
            }
            unint64_t v306 = *v305;
          }
          else
          {
            unint64_t v303 = v297 + v295;
            if ((v535 & 0x80000000) == 0)
            {
              unint64_t v304 = *(void *)(v303 + 8);
              if (v304 >= 0xFFFFFFFF) {
                LODWORD(v304) = -1;
              }
              int v291 = v304 + 1;
              goto LABEL_525;
            }
            unint64_t v301 = (v569 + ((v605 + v303) & v107)) & v84;
            uint64_t v298 = v533;
            if (v533 > 0x7FFFFFFD)
            {
              int v300 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v567 + 48);
              uint64_t v516 = v84;
              uint64_t v302 = v107;
              uint64_t v299 = v570;
              goto LABEL_524;
            }
            unint64_t v306 = *(void *)(((v566 + ((v565 + v301) & v84)) & 0xFFFFFFFFFFFFFFF8) + 8);
          }
          if (v306 >= 0xFFFFFFFF) {
            LODWORD(v306) = -1;
          }
          if ((v306 + 1) >= 2) {
            return;
          }
LABEL_527:
          uint64_t v308 = *(void (**)(unint64_t, uint64_t))(v606 + 8);
          uint64_t v309 = v84;
          uint64_t v310 = v107;
          uint64_t v311 = v294;
          v308(v286, v572);
          v308(v296, v572);
          (*(void (**)(unint64_t, uint64_t))(v560 + 8))(v297, v559);
          swift_bridgeObjectRelease();
          (*(void (**)(unint64_t, uint64_t))(v292 + 8))((v311 + ((v561 + v297) & 0xFFFFFFFFFFFFFFF8)) & v87, v293);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v119 = (v605 + v297 + v582) & v310;
          uint64_t v131 = v570;
          uint64_t v132 = v567;
          int v133 = *(void (**)(unint64_t, uint64_t))(v567 + 8);
          v133((v569 + v119) & v309, v570);
          unint64_t v312 = (v565 + ((v569 + v119) & v309)) & v309;
          v133(v312, v570);
          swift_bridgeObjectRelease();
          unint64_t v135 = (v564
                + ((((((v566 + v312) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v309;
LABEL_528:
          if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v132 + 48))(v135, 1, v131)) {
            v133(v135, v131);
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v313 = (uint64_t *)((((((v563 + v135) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
          unint64_t v314 = v313[1];
          if ((v314 & 0x3000000000000000) == 0) {
            sub_10001E9C0(*v313, v314);
          }
LABEL_147:
          swift_bridgeObjectRelease();
          unint64_t v125 = v576 + v119;
LABEL_603:
          LODWORD(v384) = -1;
          if (*(void *)(v125 + 16) < 0xFFFFFFFFuLL) {
            uint64_t v384 = *(void *)(v125 + 16);
          }
          if ((int)v384 - 1 < 0)
          {
            swift_errorRelease();
            swift_errorRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (*(void *)(v125 + 192))
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          int v385 = (uint64_t *)((((v125 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
          uint64_t v386 = *v385;
          unint64_t v387 = v385[1];
          sub_1000CF144(v386, v387);
          return;
        }
        uint64_t v274 = v108;
        unint64_t v204 = (unint64_t)&v108[v588] & v615;
        uint64_t v601 = v86;
        unint64_t v205 = (v204 + v597 + v34) & v86;
LABEL_498:
        uint64_t v512 = v88;
        uint64_t v275 = *(void (**)(unsigned __int8 *, uint64_t))(v606 + 8);
        uint64_t v276 = v84;
        uint64_t v277 = v107;
        v275(v274, v572);
        v275((unsigned __int8 *)v204, v572);
        (*(void (**)(unint64_t, uint64_t))(v560 + 8))(v205, v559);
        swift_bridgeObjectRelease();
        (*(void (**)(unint64_t, uint64_t))(v518 + 8))((v581 + ((v561 + v205) & 0xFFFFFFFFFFFFFFF8)) & v87, v562);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v278 = (v605 + v582 + v205) & v277;
        __darwin_ino64_t v279 = *(void (**)(unint64_t, uint64_t))(v567 + 8);
        v279((v569 + v278) & v276, v113);
        unint64_t v280 = (v565 + ((v569 + v278) & v276)) & v276;
        v279(v280, v113);
        swift_bridgeObjectRelease();
        unint64_t v281 = (v564
              + ((((((v566 + v280) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v276;
        if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v567 + 48))(v281, 1, v113)) {
          v279(v281, v113);
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v282 = (uint64_t *)((((((v563 + v281) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
        unint64_t v283 = v282[1];
        if ((v283 & 0x3000000000000000) == 0) {
          sub_10001E9C0(*v282, v283);
        }
        swift_bridgeObjectRelease();
        unint64_t v284 = v278 + v576;
        LODWORD(v285) = -1;
        if (*(void *)(v278 + v576 + 16) < 0xFFFFFFFFuLL) {
          uint64_t v285 = *(void *)(v278 + v576 + 16);
        }
        int v108 = a1;
        uint64_t v273 = ~v610;
        if ((int)v285 - 1 < 0)
        {
          swift_errorRelease();
          swift_errorRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (*(void *)(v284 + 192))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        sub_1000CF144(*(void *)((((v284 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *(void *)(((((v284 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
        uint64_t v84 = v276;
        uint64_t v107 = v277;
        uint64_t v86 = v601;
        uint64_t v88 = v512;
        goto LABEL_509;
      }
      unint64_t v204 = (unint64_t)&a1[v588] & v615;
      unint64_t v205 = (v204 + v597 + v34) & v86;
      if (v551 == v549)
      {
        uint64_t v601 = ~v34;
        uint64_t v113 = v570;
        if (v547 == v551)
        {
          unsigned int v206 = *(uint64_t (**)(unint64_t))(v26 + 48);
          unint64_t v207 = (v204 + v597 + v34) & v86;
          uint64_t v208 = v84;
          uint64_t v209 = v107;
LABEL_495:
          uint64_t v272 = ~v56;
          int v112 = v206(v207);
          uint64_t v88 = v272;
          uint64_t v107 = v209;
          uint64_t v84 = v208;
          int v108 = a1;
          uint64_t v86 = v601;
          goto LABEL_496;
        }
        size_t v237 = (unint64_t *)((v561 + v205) & 0xFFFFFFFFFFFFFFF8);
        if (v538 > 0x7FFFFFFE)
        {
          unint64_t v207 = ((unint64_t)v237 + v581) & v87;
          unsigned int v206 = *(uint64_t (**)(unint64_t))(v28 + 48);
          uint64_t v208 = v84;
          uint64_t v209 = v107;
          goto LABEL_495;
        }
        unint64_t v238 = *v237;
      }
      else
      {
        unint64_t v215 = v582 + v205;
        uint64_t v113 = v570;
        if ((v535 & 0x80000000) == 0)
        {
          unint64_t v216 = *(void *)(v215 + 8);
          if (v216 >= 0xFFFFFFFF) {
            LODWORD(v216) = -1;
          }
          int v112 = v216 + 1;
          int v108 = a1;
          goto LABEL_496;
        }
        uint64_t v601 = ~v34;
        unint64_t v207 = (v569 + ((v605 + v215) & v107)) & v84;
        if (v533 > 0x7FFFFFFD)
        {
          unsigned int v206 = *(uint64_t (**)(unint64_t))(v567 + 48);
          uint64_t v208 = v84;
          uint64_t v209 = v107;
          goto LABEL_495;
        }
        unint64_t v238 = *(void *)(((v566 + ((v565 + v207) & v84)) & 0xFFFFFFFFFFFFFFF8) + 8);
      }
      if (v238 >= 0xFFFFFFFF) {
        LODWORD(v238) = -1;
      }
      uint64_t v274 = a1;
      if ((v238 + 1) >= 2)
      {
        unint64_t v295 = v582;
        unint64_t v286 = (unint64_t)&a1[v583] & v88;
        uint64_t v292 = *(void *)(v562 - 8);
        uint64_t v293 = v562;
        uint64_t v294 = v581;
        uint64_t v86 = v601;
        uint64_t v273 = ~v610;
        unsigned int v287 = v549;
        goto LABEL_512;
      }
      goto LABEL_498;
    case 7u:
      unint64_t v576 = v573 + 16;
      uint64_t v114 = *(void (**)(unsigned __int8 *, uint64_t))(v607 + 8);
      uint64_t v115 = v84;
      uint64_t v116 = v82;
      v114(a1, AssociatedTypeWitness);
      unint64_t v117 = (unint64_t)&a1[v555] & v80;
      v114((unsigned __int8 *)v117, AssociatedTypeWitness);
      unint64_t v118 = (v117 + v598 + v584) & v81;
      (*(void (**)(unint64_t, uint64_t))(v558 + 8))(v118, v557);
      swift_bridgeObjectRelease();
      (*(void (**)(unint64_t, uint64_t))(v554 + 8))((v552 + ((v556 + v118) & 0xFFFFFFFFFFFFFFF8)) & v116, v553);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v119 = (v605 + v604 + v118) & v83;
      unint64_t v120 = *(void (**)(unint64_t, uint64_t))(v567 + 8);
      v120((v569 + v119) & v115, v570);
      unint64_t v121 = (v565 + ((v569 + v119) & v115)) & v115;
      v120(v121, v570);
      swift_bridgeObjectRelease();
      unint64_t v122 = (v564
            + ((((((v566 + v121) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v115;
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v567 + 48))(v122, 1, v570)) {
        v120(v122, v570);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v123 = (uint64_t *)((((((v563 + v122) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v124 = v123[1];
      if ((v124 & 0x3000000000000000) == 0) {
        sub_10001E9C0(*v123, v124);
      }
      goto LABEL_147;
    case 8u:
      unint64_t v576 = v573 + 16;
      int v126 = *(void (**)(unsigned __int8 *, uint64_t))(v606 + 8);
      uint64_t v127 = v84;
      uint64_t v128 = *(void *)(v562 - 8);
      v126(a1, v572);
      unint64_t v129 = (unint64_t)&a1[v588] & v79;
      v126((unsigned __int8 *)v129, v572);
      unint64_t v130 = (v129 + v597 + v34) & ~v34;
      (*(void (**)(unint64_t, uint64_t))(v560 + 8))(v130, v559);
      swift_bridgeObjectRelease();
      (*(void (**)(unint64_t, uint64_t))(v128 + 8))((v581 + ((v561 + v130) & 0xFFFFFFFFFFFFFFF8)) & v87, v562);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v119 = (v605 + v582 + v130) & v83;
      uint64_t v131 = v570;
      uint64_t v132 = v567;
      int v133 = *(void (**)(unint64_t, uint64_t))(v567 + 8);
      v133((v569 + v119) & v127, v570);
      unint64_t v134 = (v565 + ((v569 + v119) & v127)) & v127;
      v133(v134, v570);
      swift_bridgeObjectRelease();
      unint64_t v135 = (v564
            + ((((((v566 + v134) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v127;
      goto LABEL_528;
    case 9u:
      unsigned int v90 = a1[v613];
      unsigned int v91 = v90 - 2;
      if (v90 >= 2)
      {
        if (v613 <= 3) {
          uint64_t v136 = v613;
        }
        else {
          uint64_t v136 = 4;
        }
        switch(v136)
        {
          case 1:
            goto LABEL_287;
          case 2:
            goto LABEL_288;
          case 3:
            goto LABEL_289;
          case 4:
            goto LABEL_290;
          default:
            goto LABEL_293;
        }
      }
      goto LABEL_293;
    case 0xAu:
      unsigned int v137 = a1[v613];
      unsigned int v138 = v137 - 2;
      if (v137 < 2) {
        goto LABEL_300;
      }
      if (v613 <= 3) {
        uint64_t v139 = v613;
      }
      else {
        uint64_t v139 = 4;
      }
      uint64_t v141 = AssociatedTypeWitness;
      uint64_t v140 = v572;
      uint64_t v142 = ~v592;
      switch(v139)
      {
        case 1:
          goto LABEL_164;
        case 2:
          goto LABEL_357;
        case 3:
          goto LABEL_358;
        case 4:
          goto LABEL_359;
        default:
          goto LABEL_363;
      }
      goto LABEL_363;
    case 0xBu:
      unsigned int v137 = a1[v613];
      unsigned int v138 = v137 - 2;
      if (v137 < 2)
      {
LABEL_300:
        uint64_t v141 = AssociatedTypeWitness;
        uint64_t v140 = v572;
        uint64_t v142 = ~v592;
      }
      else
      {
        if (v613 <= 3) {
          uint64_t v143 = v613;
        }
        else {
          uint64_t v143 = 4;
        }
        uint64_t v141 = AssociatedTypeWitness;
        uint64_t v140 = v572;
        uint64_t v142 = ~v592;
        switch(v143)
        {
          case 1:
LABEL_164:
            int v144 = *a1;
            goto LABEL_360;
          case 2:
LABEL_357:
            int v144 = *(unsigned __int16 *)a1;
            goto LABEL_360;
          case 3:
LABEL_358:
            int v144 = *(unsigned __int16 *)a1 | (a1[2] << 16);
            goto LABEL_360;
          case 4:
LABEL_359:
            int v144 = *(_DWORD *)a1;
LABEL_360:
            if (v613 < 4) {
              unsigned int v137 = (v144 | (v138 << (8 * v613))) + 2;
            }
            else {
              unsigned int v137 = v144 + 2;
            }
            break;
          default:
            break;
        }
      }
LABEL_363:
      if (v137 == 1) {
        uint64_t v229 = v606;
      }
      else {
        uint64_t v229 = v607;
      }
      if (v137 == 1) {
        uint64_t v230 = v140;
      }
      else {
        uint64_t v230 = v141;
      }
      (*(void (**)(unsigned __int8 *, uint64_t, uint64_t, uint64_t))(v229 + 8))(a1, v230, v592, v82);
      unint64_t v89 = (unsigned __int8 *)((unint64_t)&a1[v568] & v142);
      unsigned int v231 = v89[v613];
      if (v231 > 1) {
        return;
      }
      if (v231 != 1) {
        goto LABEL_371;
      }
      goto LABEL_467;
    case 0xCu:
      unsigned int v145 = a1[v613];
      unsigned int v146 = v145 - 2;
      if (v145 < 2)
      {
        uint64_t v149 = AssociatedTypeWitness;
        uint64_t v148 = v572;
      }
      else
      {
        if (v613 <= 3) {
          uint64_t v147 = v613;
        }
        else {
          uint64_t v147 = 4;
        }
        uint64_t v149 = AssociatedTypeWitness;
        uint64_t v148 = v572;
        switch(v147)
        {
          case 1:
            int v150 = *a1;
            goto LABEL_411;
          case 2:
            int v150 = *(unsigned __int16 *)a1;
            goto LABEL_411;
          case 3:
            int v150 = *(unsigned __int16 *)a1 | (a1[2] << 16);
            goto LABEL_411;
          case 4:
            int v150 = *(_DWORD *)a1;
LABEL_411:
            if (v613 < 4) {
              unsigned int v145 = (v150 | (v146 << (8 * v613))) + 2;
            }
            else {
              unsigned int v145 = v150 + 2;
            }
            break;
          default:
            break;
        }
      }
      if (v145 == 1) {
        uint64_t v232 = v606;
      }
      else {
        uint64_t v232 = v607;
      }
      if (v145 == 1) {
        uint64_t v233 = v148;
      }
      else {
        uint64_t v233 = v149;
      }
      goto LABEL_420;
    case 0xDu:
      unsigned int v90 = a1[v613];
      unsigned int v91 = v90 - 2;
      if (v90 >= 2)
      {
        if (v613 <= 3) {
          uint64_t v151 = v613;
        }
        else {
          uint64_t v151 = 4;
        }
        switch(v151)
        {
          case 1:
            goto LABEL_287;
          case 2:
            goto LABEL_288;
          case 3:
            goto LABEL_289;
          case 4:
            goto LABEL_290;
          default:
            goto LABEL_293;
        }
      }
      goto LABEL_293;
    case 0xEu:
      unsigned int v152 = a1[v613];
      unsigned int v153 = v152 - 2;
      if (v152 < 2) {
        goto LABEL_301;
      }
      if (v613 <= 3) {
        uint64_t v154 = v613;
      }
      else {
        uint64_t v154 = 4;
      }
      uint64_t v156 = AssociatedTypeWitness;
      uint64_t v155 = v572;
      switch(v154)
      {
        case 1:
          goto LABEL_186;
        case 2:
          goto LABEL_372;
        case 3:
          goto LABEL_373;
        case 4:
          goto LABEL_374;
        default:
          goto LABEL_378;
      }
      goto LABEL_378;
    case 0xFu:
      unsigned int v152 = a1[v613];
      unsigned int v153 = v152 - 2;
      if (v152 < 2)
      {
LABEL_301:
        uint64_t v156 = AssociatedTypeWitness;
        uint64_t v155 = v572;
      }
      else
      {
        if (v613 <= 3) {
          uint64_t v157 = v613;
        }
        else {
          uint64_t v157 = 4;
        }
        uint64_t v156 = AssociatedTypeWitness;
        uint64_t v155 = v572;
        switch(v157)
        {
          case 1:
LABEL_186:
            int v158 = *a1;
            goto LABEL_375;
          case 2:
LABEL_372:
            int v158 = *(unsigned __int16 *)a1;
            goto LABEL_375;
          case 3:
LABEL_373:
            int v158 = *(unsigned __int16 *)a1 | (a1[2] << 16);
            goto LABEL_375;
          case 4:
LABEL_374:
            int v158 = *(_DWORD *)a1;
LABEL_375:
            if (v613 < 4) {
              unsigned int v152 = (v158 | (v153 << (8 * v613))) + 2;
            }
            else {
              unsigned int v152 = v158 + 2;
            }
            break;
          default:
            break;
        }
      }
LABEL_378:
      if (v152 == 1) {
        uint64_t v232 = v606;
      }
      else {
        uint64_t v232 = v607;
      }
      if (v152 == 1) {
        uint64_t v233 = v155;
      }
      else {
        uint64_t v233 = v156;
      }
LABEL_420:
      (*(void (**)(unsigned __int8 *, uint64_t, uint64_t, uint64_t))(v232 + 8))(a1, v233, v592, v82);
      swift_errorRelease();
      return;
    case 0x10u:
      unint64_t v159 = *((void *)a1 + 2);
      if (v159 >> 60 != 15)
      {
        uint64_t v160 = *((void *)a1 + 1);
        sub_10001E9C0(v160, v159);
      }
      return;
    case 0x11u:
      unsigned int v90 = a1[v613];
      unsigned int v91 = v90 - 2;
      if (v90 >= 2)
      {
        if (v613 <= 3) {
          uint64_t v161 = v613;
        }
        else {
          uint64_t v161 = 4;
        }
        switch(v161)
        {
          case 1:
            goto LABEL_287;
          case 2:
            goto LABEL_288;
          case 3:
            goto LABEL_289;
          case 4:
            goto LABEL_290;
          default:
            goto LABEL_293;
        }
      }
      goto LABEL_293;
    case 0x13u:
      unint64_t v89 = (unsigned __int8 *)((unint64_t)&a1[v592 + 1] & ~v592);
      unsigned int v162 = v89[v613];
      unsigned int v163 = v162 - 2;
      if (v162 >= 2)
      {
        if (v613 <= 3) {
          uint64_t v164 = v613;
        }
        else {
          uint64_t v164 = 4;
        }
        switch(v164)
        {
          case 1:
            goto LABEL_459;
          case 2:
            goto LABEL_460;
          case 3:
            goto LABEL_461;
          case 4:
            goto LABEL_462;
          default:
            goto LABEL_466;
        }
      }
      goto LABEL_466;
    case 0x14u:
    case 0x15u:
      swift_release();
      return;
    case 0x18u:
      unsigned int v90 = a1[v613];
      unsigned int v91 = v90 - 2;
      if (v90 >= 2)
      {
        if (v613 <= 3) {
          uint64_t v165 = v613;
        }
        else {
          uint64_t v165 = 4;
        }
        switch(v165)
        {
          case 1:
            goto LABEL_287;
          case 2:
            goto LABEL_288;
          case 3:
            goto LABEL_289;
          case 4:
            goto LABEL_290;
          default:
            goto LABEL_293;
        }
      }
      goto LABEL_293;
    case 0x19u:
      unsigned int v90 = a1[v613];
      unsigned int v91 = v90 - 2;
      if (v90 >= 2)
      {
        if (v613 <= 3) {
          uint64_t v166 = v613;
        }
        else {
          uint64_t v166 = 4;
        }
        switch(v166)
        {
          case 1:
            goto LABEL_287;
          case 2:
            goto LABEL_288;
          case 3:
            goto LABEL_289;
          case 4:
            goto LABEL_290;
          default:
            goto LABEL_293;
        }
      }
      goto LABEL_293;
    case 0x1Au:
      unsigned int v90 = a1[v613];
      unsigned int v91 = v90 - 2;
      if (v90 >= 2)
      {
        if (v613 <= 3) {
          uint64_t v167 = v613;
        }
        else {
          uint64_t v167 = 4;
        }
        switch(v167)
        {
          case 1:
            goto LABEL_287;
          case 2:
            goto LABEL_288;
          case 3:
            goto LABEL_289;
          case 4:
            goto LABEL_290;
          default:
            goto LABEL_293;
        }
      }
      goto LABEL_293;
    case 0x1Bu:
      uint64_t v168 = ~v610;
      uint64_t v169 = ~v56;
      uint64_t v170 = ~v608;
      unsigned int v171 = a1[v67];
      unsigned int v172 = v171 - 2;
      if (v171 >= 2)
      {
        if (v67 <= 3) {
          uint64_t v173 = v67;
        }
        else {
          uint64_t v173 = 4;
        }
        switch(v173)
        {
          case 1:
            int v174 = *a1;
            goto LABEL_426;
          case 2:
            int v174 = *(unsigned __int16 *)a1;
            goto LABEL_426;
          case 3:
            int v174 = *(unsigned __int16 *)a1 | (a1[2] << 16);
            goto LABEL_426;
          case 4:
            int v174 = *(_DWORD *)a1;
LABEL_426:
            if (v67 < 4) {
              unsigned int v171 = (v174 | (v172 << (8 * v67))) + 2;
            }
            else {
              unsigned int v171 = v174 + 2;
            }
            break;
          default:
            break;
        }
      }
      uint64_t v514 = ~v574;
      if (v171 == 1)
      {
        unsigned int v242 = a1[v58];
        unsigned int v243 = v242 - 8;
        if (v242 >= 8)
        {
          if (v58 <= 3) {
            uint64_t v244 = v58;
          }
          else {
            uint64_t v244 = 4;
          }
          switch(v244)
          {
            case 1:
              int v245 = *a1;
              goto LABEL_536;
            case 2:
              int v245 = *(unsigned __int16 *)a1;
              goto LABEL_536;
            case 3:
              int v245 = *(unsigned __int16 *)a1 | (a1[2] << 16);
              goto LABEL_536;
            case 4:
              int v245 = *(_DWORD *)a1;
LABEL_536:
              if (v58 < 4) {
                unsigned int v242 = (v245 | (v243 << (8 * v58))) + 8;
              }
              else {
                unsigned int v242 = v245 + 8;
              }
              break;
            default:
              break;
          }
        }
        uint64_t v315 = ~v50;
        uint64_t v198 = v606;
        switch(v242)
        {
          case 1u:
            uint64_t v617 = ~v610;
            uint64_t v602 = ~v34;
            uint64_t v517 = v84;
            uint64_t v521 = *(void *)(v562 - 8);
            uint64_t v324 = v83;
            unsigned int v325 = *(void (**)(unsigned __int8 *, uint64_t))(v606 + 8);
            v325(a1, v572);
            unint64_t v326 = (unint64_t)&a1[v530] & v169;
            if (v544 == v549)
            {
              int v327 = (*(uint64_t (**)(unint64_t))(v606 + 48))(v326);
LABEL_727:
              uint64_t v392 = v324;
LABEL_728:
              uint64_t v450 = v607;
              if (v327) {
                goto LABEL_741;
              }
              unint64_t v390 = (v588 + v326) & v617;
              unint64_t v391 = (v542 + v390) & v602;
              goto LABEL_730;
            }
            unint64_t v390 = (v588 + v326) & v617;
            unint64_t v391 = (v542 + v390) & v602;
            uint64_t v392 = v324;
            if (v551 == v549)
            {
              if (v547 == v551)
              {
                int v327 = (*(uint64_t (**)(unint64_t))(v560 + 48))((v542 + v390) & v602);
                goto LABEL_727;
              }
              unint64_t v423 = (unint64_t *)((v561 + v391) & 0xFFFFFFFFFFFFFFF8);
              if (v538 > 0x7FFFFFFE)
              {
                int v327 = (*(uint64_t (**)(unint64_t))(v521 + 48))(((unint64_t)v423 + v581) & v87);
                goto LABEL_727;
              }
              unint64_t v424 = *v423;
            }
            else
            {
              unint64_t v408 = v391 + v582;
              if ((v535 & 0x80000000) == 0)
              {
                unint64_t v409 = *(void *)(v408 + 8);
                if (v409 >= 0xFFFFFFFF) {
                  LODWORD(v409) = -1;
                }
                int v327 = v409 + 1;
                goto LABEL_728;
              }
              uint64_t v434 = (v569 + ((v605 + v408) & v324)) & v517;
              if (v533 > 0x7FFFFFFD)
              {
                int v327 = (*(uint64_t (**)(uint64_t))(v567 + 48))(v434);
                goto LABEL_727;
              }
              unint64_t v424 = *(void *)(((v566 + ((v565 + v434) & v517)) & 0xFFFFFFFFFFFFFFF8) + 8);
            }
            if (v424 >= 0xFFFFFFFF) {
              LODWORD(v424) = -1;
            }
            uint64_t v450 = v607;
            if ((v424 + 1) < 2)
            {
LABEL_730:
              uint64_t v451 = v392;
              v325((unsigned __int8 *)v326, v572);
              v325((unsigned __int8 *)v390, v572);
              (*(void (**)(unint64_t, uint64_t))(v560 + 8))(v391, v559);
              swift_bridgeObjectRelease();
              (*(void (**)(unint64_t, uint64_t))(v521 + 8))((v581 + ((v561 + v391) & 0xFFFFFFFFFFFFFFF8)) & v87, v562);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              unint64_t v452 = (v605 + v391 + v582) & v451;
              uint64_t v453 = *(void (**)(unint64_t, uint64_t))(v567 + 8);
              v453((v569 + v452) & v517, v570);
              unint64_t v454 = (v565 + ((v569 + v452) & v517)) & v517;
              v453(v454, v570);
              swift_bridgeObjectRelease();
              unint64_t v455 = (v564
                    + ((((((v566 + v454) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v517;
              if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v567 + 48))(v455, 1, v570)) {
                v453(v455, v570);
              }
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              int v456 = (uint64_t *)((((((v563 + v455) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
              unint64_t v457 = v456[1];
              if ((v457 & 0x3000000000000000) == 0) {
                sub_10001E9C0(*v456, v457);
              }
              swift_bridgeObjectRelease();
              unint64_t v458 = v452 + v573 + 16;
              LODWORD(v459) = -1;
              if (*(void *)(v458 + 16) < 0xFFFFFFFFuLL) {
                uint64_t v459 = *(void *)(v458 + 16);
              }
              if ((int)v459 - 1 < 0)
              {
                swift_errorRelease();
                swift_errorRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();

                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if (*(void *)(v458 + 192))
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                }
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
              }
              sub_1000CF144(*(void *)((((v458 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *(void *)(((((v458 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
              uint64_t v450 = v607;
            }
LABEL_741:
            unint64_t v460 = (v326 + v608 + v532) & v170;
            if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v450 + 48))(v460, 1, AssociatedTypeWitness))(*(void (**)(unint64_t, uint64_t))(v607 + 8))(v460, AssociatedTypeWitness); {
            unint64_t v461 = (v528 + v460) & v81;
            }
            if (v546 == v550)
            {
              int v462 = (*(uint64_t (**)(unint64_t))(v558 + 48))(v461);
            }
            else
            {
              uint64_t v463 = (uint64_t *)((v556 + v461) & 0xFFFFFFFFFFFFFFF8);
              if (v537 <= 0x7FFFFFFE)
              {
                uint64_t v464 = *v463;
                if ((unint64_t)*v463 >= 0xFFFFFFFF) {
                  LODWORD(v464) = -1;
                }
                if ((v464 + 1) >= 2) {
                  goto LABEL_754;
                }
                goto LABEL_753;
              }
              int v462 = (*(uint64_t (**)(unint64_t))(v554 + 48))(((unint64_t)v463 + v552) & v514);
            }
            if (v462)
            {
LABEL_754:
              unint64_t v465 = v461 + v604;
LABEL_818:
              unint64_t v486 = v465 + 15;
              goto LABEL_819;
            }
            uint64_t v463 = (uint64_t *)((v556 + v461) & 0xFFFFFFFFFFFFFFF8);
LABEL_753:
            (*(void (**)(unint64_t, uint64_t))(v558 + 8))(v461, v557);
            swift_bridgeObjectRelease();
            (*(void (**)(unint64_t, uint64_t))(v554 + 8))(((unint64_t)v463 + v552) & v514, v553);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_754;
          case 2u:
            (*(void (**)(unsigned __int8 *, uint64_t, uint64_t))(v606 + 8))(a1, v572, v168);
            unint64_t v328 = (unint64_t)&a1[v597 + v608] & v80;
            if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v607 + 48))(v328, 1, AssociatedTypeWitness))(*(void (**)(unint64_t, uint64_t))(v607 + 8))(v328, AssociatedTypeWitness); {
            unint64_t v329 = (v528 + v328) & v81;
            }
            if (v546 == v550)
            {
              int v330 = (*(uint64_t (**)(unint64_t))(v558 + 48))(v329);
LABEL_659:
              if (v330) {
                goto LABEL_662;
              }
              unsigned int v393 = (uint64_t *)((v556 + v329) & 0xFFFFFFFFFFFFFFF8);
              goto LABEL_661;
            }
            unsigned int v393 = (uint64_t *)((v556 + v329) & 0xFFFFFFFFFFFFFFF8);
            if (v537 > 0x7FFFFFFE)
            {
              int v330 = (*(uint64_t (**)(unint64_t))(v554 + 48))(((unint64_t)v393 + v552) & v514);
              goto LABEL_659;
            }
            uint64_t v394 = *v393;
            if ((unint64_t)*v393 >= 0xFFFFFFFF) {
              LODWORD(v394) = -1;
            }
            if ((v394 + 1) < 2)
            {
LABEL_661:
              (*(void (**)(unint64_t, uint64_t))(v558 + 8))(v329, v557);
              swift_bridgeObjectRelease();
              (*(void (**)(unint64_t, uint64_t))(v554 + 8))(((unint64_t)v393 + v552) & v514, v553);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
LABEL_662:
            unint64_t v410 = v604;
            goto LABEL_680;
          case 3u:
            uint64_t v618 = ~v610;
            uint64_t v331 = ~v34;
            uint64_t v522 = *(void *)(v562 - 8);
            uint64_t v332 = v83;
            uint64_t v333 = v84;
            uint64_t v334 = *(void (**)(unsigned __int8 *, uint64_t))(v606 + 8);
            v334(a1, v572);
            unint64_t v335 = (unint64_t)&a1[v530] & v169;
            if (v544 == v549)
            {
              int v336 = (*(uint64_t (**)(unint64_t))(v606 + 48))(v335);
              uint64_t v337 = v333;
              uint64_t v338 = v83;
LABEL_757:
              uint64_t v412 = v331;
LABEL_758:
              if (v336) {
                goto LABEL_354;
              }
              unint64_t v395 = (v588 + v335) & v618;
              unint64_t v396 = (v542 + v395) & v412;
              goto LABEL_760;
            }
            unint64_t v395 = (v588 + v335) & v618;
            unint64_t v396 = (v542 + v395) & v331;
            uint64_t v337 = v333;
            uint64_t v338 = v332;
            if (v551 == v549)
            {
              if (v547 == v551)
              {
                int v336 = (*(uint64_t (**)(unint64_t))(v560 + 48))((v542 + v395) & v331);
LABEL_756:
                uint64_t v338 = v332;
                uint64_t v337 = v333;
                goto LABEL_757;
              }
              v425 = (unint64_t *)((v561 + v396) & 0xFFFFFFFFFFFFFFF8);
              if (v538 > 0x7FFFFFFE)
              {
                int v336 = (*(uint64_t (**)(unint64_t))(v522 + 48))(((unint64_t)v425 + v581) & v87);
                goto LABEL_756;
              }
              unint64_t v426 = *v425;
            }
            else
            {
              unint64_t v411 = v396 + v582;
              if ((v535 & 0x80000000) == 0)
              {
                uint64_t v412 = v331;
                unint64_t v413 = *(void *)(v411 + 8);
                if (v413 >= 0xFFFFFFFF) {
                  LODWORD(v413) = -1;
                }
                int v336 = v413 + 1;
                goto LABEL_758;
              }
              uint64_t v435 = (v569 + ((v605 + v411) & v332)) & v333;
              if (v533 > 0x7FFFFFFD)
              {
                int v336 = (*(uint64_t (**)(uint64_t))(v567 + 48))(v435);
                goto LABEL_756;
              }
              unint64_t v426 = *(void *)(((v566 + ((v565 + v435) & v333)) & 0xFFFFFFFFFFFFFFF8) + 8);
            }
            if (v426 >= 0xFFFFFFFF) {
              LODWORD(v426) = -1;
            }
            if ((v426 + 1) < 2)
            {
LABEL_760:
              uint64_t v466 = v337;
              uint64_t v467 = v338;
              v334((unsigned __int8 *)v335, v572);
              v334((unsigned __int8 *)v395, v572);
              (*(void (**)(unint64_t, uint64_t))(v560 + 8))(v396, v559);
              swift_bridgeObjectRelease();
              (*(void (**)(unint64_t, uint64_t))(v522 + 8))((v581 + ((v561 + v396) & 0xFFFFFFFFFFFFFFF8)) & v87, v562);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              unint64_t v468 = (v605 + v396 + v582) & v467;
              long long v469 = *(void (**)(unint64_t, uint64_t))(v567 + 8);
              v469((v569 + v468) & v466, v570);
              unint64_t v470 = (v565 + ((v569 + v468) & v466)) & v466;
              v469(v470, v570);
              swift_bridgeObjectRelease();
              unint64_t v471 = (v564
                    + ((((((v566 + v470) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v466;
              if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v567 + 48))(v471, 1, v570)) {
                v469(v471, v570);
              }
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              long long v472 = (uint64_t *)((((((v563 + v471) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
              unint64_t v473 = v472[1];
              if ((v473 & 0x3000000000000000) == 0) {
                sub_10001E9C0(*v472, v473);
              }
              swift_bridgeObjectRelease();
              unint64_t v474 = v468 + v573 + 16;
              LODWORD(v475) = -1;
              if (*(void *)(v474 + 16) < 0xFFFFFFFFuLL) {
                uint64_t v475 = *(void *)(v474 + 16);
              }
              if ((int)v475 - 1 < 0)
              {
                swift_errorRelease();
                swift_errorRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();

                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if (*(void *)(v474 + 192))
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                }
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
              }
              sub_1000CF144(*(void *)((((v474 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *(void *)(((((v474 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
              goto LABEL_354;
            }
            goto LABEL_354;
          case 4u:
          case 5u:
          case 7u:
            goto LABEL_295;
          case 6u:
            (*(void (**)(unsigned __int8 *, uint64_t, uint64_t))(v606 + 8))(a1, v572, v168);
            unsigned int v339 = (unsigned __int8 *)((unint64_t)&a1[v524] & v315);
            if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v526 + 48))(v339, 1, v593)) {
              return;
            }
            id v199 = *(void (**)(unsigned __int8 *, uint64_t))(v526 + 8);
            unint64_t v89 = v339;
            uint64_t v201 = v593;
            goto LABEL_469;
          default:
            uint64_t v616 = ~v610;
            uint64_t v316 = ~v34;
            uint64_t v520 = *(void *)(v562 - 8);
            uint64_t v317 = v83;
            uint64_t v318 = v84;
            size_t v319 = *(void (**)(unsigned __int8 *, uint64_t))(v606 + 8);
            v319(a1, v572);
            unint64_t v320 = (unint64_t)&a1[v530] & v169;
            if (v544 == v549)
            {
              int v321 = (*(uint64_t (**)(unint64_t))(v606 + 48))(v320);
              uint64_t v322 = v318;
              uint64_t v323 = v83;
LABEL_711:
              uint64_t v406 = v316;
LABEL_712:
              if (v321) {
                goto LABEL_725;
              }
              unint64_t v388 = (v588 + v320) & v616;
              unint64_t v389 = (v542 + v388) & v406;
              goto LABEL_714;
            }
            unint64_t v388 = (v588 + v320) & v616;
            unint64_t v389 = (v542 + v388) & v316;
            uint64_t v322 = v318;
            uint64_t v323 = v317;
            if (v551 == v549)
            {
              if (v547 == v551)
              {
                int v321 = (*(uint64_t (**)(unint64_t))(v560 + 48))((v542 + v388) & v316);
LABEL_710:
                uint64_t v323 = v317;
                uint64_t v322 = v318;
                goto LABEL_711;
              }
              id v421 = (unint64_t *)((v561 + v389) & 0xFFFFFFFFFFFFFFF8);
              if (v538 > 0x7FFFFFFE)
              {
                int v321 = (*(uint64_t (**)(unint64_t))(v520 + 48))(((unint64_t)v421 + v581) & v87);
                goto LABEL_710;
              }
              unint64_t v422 = *v421;
            }
            else
            {
              unint64_t v405 = v389 + v582;
              if ((v535 & 0x80000000) == 0)
              {
                uint64_t v406 = v316;
                unint64_t v407 = *(void *)(v405 + 8);
                if (v407 >= 0xFFFFFFFF) {
                  LODWORD(v407) = -1;
                }
                int v321 = v407 + 1;
                goto LABEL_712;
              }
              uint64_t v433 = (v569 + ((v605 + v405) & v317)) & v318;
              if (v533 > 0x7FFFFFFD)
              {
                int v321 = (*(uint64_t (**)(uint64_t))(v567 + 48))(v433);
                goto LABEL_710;
              }
              unint64_t v422 = *(void *)(((v566 + ((v565 + v433) & v318)) & 0xFFFFFFFFFFFFFFF8) + 8);
            }
            if (v422 >= 0xFFFFFFFF) {
              LODWORD(v422) = -1;
            }
            if ((v422 + 1) < 2)
            {
LABEL_714:
              uint64_t v439 = v322;
              uint64_t v440 = v323;
              v319((unsigned __int8 *)v320, v572);
              v319((unsigned __int8 *)v388, v572);
              (*(void (**)(unint64_t, uint64_t))(v560 + 8))(v389, v559);
              swift_bridgeObjectRelease();
              (*(void (**)(unint64_t, uint64_t))(v520 + 8))((v581 + ((v561 + v389) & 0xFFFFFFFFFFFFFFF8)) & v87, v562);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              unint64_t v441 = (v605 + v389 + v582) & v440;
              unint64_t v442 = *(void (**)(unint64_t, uint64_t))(v567 + 8);
              v442((v569 + v441) & v439, v570);
              unint64_t v443 = (v565 + ((v569 + v441) & v439)) & v439;
              v442(v443, v570);
              swift_bridgeObjectRelease();
              unint64_t v444 = (v564
                    + ((((((v566 + v443) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v439;
              if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v567 + 48))(v444, 1, v570)) {
                v442(v444, v570);
              }
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              unint64_t v445 = (uint64_t *)((((((v563 + v444) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
              unint64_t v446 = v445[1];
              if ((v446 & 0x3000000000000000) == 0) {
                sub_10001E9C0(*v445, v446);
              }
              swift_bridgeObjectRelease();
              unint64_t v447 = v441 + v573 + 16;
              LODWORD(v448) = -1;
              if (*(void *)(v447 + 16) < 0xFFFFFFFFuLL) {
                uint64_t v448 = *(void *)(v447 + 16);
              }
              if ((int)v448 - 1 < 0)
              {
                swift_errorRelease();
                swift_errorRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();

                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if (*(void *)(v447 + 192))
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                }
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
              }
              sub_1000CF144(*(void *)((((v447 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *(void *)(((((v447 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
            }
LABEL_725:
            unint64_t v449 = v532;
            break;
        }
LABEL_788:
        unint64_t v486 = v320 + v449;
LABEL_819:
        unsigned int v418 = *(void **)(((v486 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
        goto LABEL_820;
      }
      unsigned int v246 = a1[v40];
      unsigned int v247 = v246 - 8;
      if (v246 >= 8)
      {
        if (v40 <= 3) {
          uint64_t v248 = v40;
        }
        else {
          uint64_t v248 = 4;
        }
        switch(v248)
        {
          case 1:
            int v249 = *a1;
            goto LABEL_555;
          case 2:
            int v249 = *(unsigned __int16 *)a1;
            goto LABEL_555;
          case 3:
            int v249 = *(unsigned __int16 *)a1 | (a1[2] << 16);
            goto LABEL_555;
          case 4:
            int v249 = *(_DWORD *)a1;
LABEL_555:
            if (v40 < 4) {
              unsigned int v246 = (v249 | (v247 << (8 * v40))) + 8;
            }
            else {
              unsigned int v246 = v249 + 8;
            }
            break;
          default:
            break;
        }
      }
      uint64_t v340 = ~v46;
      uint64_t v200 = v607;
      switch(v246)
      {
        case 1u:
          uint64_t v603 = ~v34;
          unint64_t v578 = v573 + 16;
          uint64_t v523 = *(void *)(v562 - 8);
          uint64_t v347 = v83;
          uint64_t v348 = v84;
          unsigned int v349 = *(void (**)(unsigned __int8 *, uint64_t))(v607 + 8);
          v349(a1, AssociatedTypeWitness);
          unint64_t v350 = (unint64_t)&a1[v531] & v85;
          if (v612 == v545)
          {
            int v351 = (*(uint64_t (**)(unint64_t))(v607 + 48))(v350);
            uint64_t v352 = v348;
            uint64_t v353 = v347;
LABEL_791:
            if (v351) {
              goto LABEL_804;
            }
            unint64_t v399 = (v555 + v350) & v170;
            unint64_t v400 = (v543 + v399) & v81;
            goto LABEL_793;
          }
          unint64_t v399 = (v555 + v350) & v170;
          unint64_t v400 = (v543 + v399) & v81;
          uint64_t v352 = v348;
          uint64_t v353 = v347;
          if (v550 == v545)
          {
            if (v546 == v550)
            {
              int v351 = (*(uint64_t (**)(unint64_t))(v558 + 48))((v543 + v399) & v81);
LABEL_790:
              uint64_t v353 = v347;
              uint64_t v352 = v348;
              goto LABEL_791;
            }
            uint64_t v429 = (unint64_t *)((v556 + v400) & 0xFFFFFFFFFFFFFFF8);
            if (v537 > 0x7FFFFFFE)
            {
              int v351 = (*(uint64_t (**)(unint64_t))(v554 + 48))(((unint64_t)v429 + v552) & v514);
              goto LABEL_790;
            }
            unint64_t v430 = *v429;
          }
          else
          {
            unint64_t v416 = v400 + v604;
            if ((v536 & 0x80000000) == 0)
            {
              unint64_t v417 = *(void *)(v416 + 8);
              if (v417 >= 0xFFFFFFFF) {
                LODWORD(v417) = -1;
              }
              int v351 = v417 + 1;
              goto LABEL_791;
            }
            uint64_t v437 = (v569 + ((v605 + v416) & v347)) & v348;
            if (v533 > 0x7FFFFFFD)
            {
              int v351 = (*(uint64_t (**)(uint64_t))(v567 + 48))(v437);
              goto LABEL_790;
            }
            unint64_t v430 = *(void *)(((v566 + ((v565 + v437) & v348)) & 0xFFFFFFFFFFFFFFF8) + 8);
          }
          if (v430 >= 0xFFFFFFFF) {
            LODWORD(v430) = -1;
          }
          if ((v430 + 1) < 2)
          {
LABEL_793:
            uint64_t v487 = v352;
            uint64_t v488 = v353;
            v349((unsigned __int8 *)v350, AssociatedTypeWitness);
            v349((unsigned __int8 *)v399, AssociatedTypeWitness);
            (*(void (**)(unint64_t, uint64_t))(v558 + 8))(v400, v557);
            swift_bridgeObjectRelease();
            (*(void (**)(unint64_t, uint64_t))(v554 + 8))((v552 + ((v556 + v400) & 0xFFFFFFFFFFFFFFF8)) & v514, v553);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            unint64_t v489 = (v605 + v400 + v604) & v488;
            long long v490 = *(void (**)(unint64_t, uint64_t))(v567 + 8);
            v490((v569 + v489) & v487, v570);
            unint64_t v491 = (v565 + ((v569 + v489) & v487)) & v487;
            v490(v491, v570);
            swift_bridgeObjectRelease();
            unint64_t v492 = (v564
                  + ((((((v566 + v491) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v487;
            if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v567 + 48))(v492, 1, v570)) {
              v490(v492, v570);
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            long long v493 = (uint64_t *)((((((v563 + v492) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v494 = v493[1];
            if ((v494 & 0x3000000000000000) == 0) {
              sub_10001E9C0(*v493, v494);
            }
            swift_bridgeObjectRelease();
            unint64_t v495 = v578 + v489;
            LODWORD(v496) = -1;
            if (*(void *)(v578 + v489 + 16) < 0xFFFFFFFFuLL) {
              uint64_t v496 = *(void *)(v578 + v489 + 16);
            }
            if ((int)v496 - 1 < 0)
            {
              swift_errorRelease();
              swift_errorRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if (*(void *)(v495 + 192))
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
              }
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            sub_1000CF144(*(void *)((((v495 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *(void *)(((((v495 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
          }
LABEL_804:
          unint64_t v497 = (v350 + v610 + v595) & ~v610;
          if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v606 + 48))(v497, 1, v572)) {
            (*(void (**)(unint64_t, uint64_t))(v606 + 8))(v497, v572);
          }
          unint64_t v498 = (v529 + v497) & v603;
          if (v547 == v551)
          {
            int v499 = (*(uint64_t (**)(unint64_t))(v560 + 48))(v498);
          }
          else
          {
            long long v500 = (uint64_t *)((v561 + v498) & 0xFFFFFFFFFFFFFFF8);
            if (v538 <= 0x7FFFFFFE)
            {
              uint64_t v501 = *v500;
              if ((unint64_t)*v500 >= 0xFFFFFFFF) {
                LODWORD(v501) = -1;
              }
              if ((v501 + 1) >= 2) {
                goto LABEL_817;
              }
              goto LABEL_816;
            }
            int v499 = (*(uint64_t (**)(unint64_t))(v523 + 48))(((unint64_t)v500 + v581) & v87);
          }
          if (v499)
          {
LABEL_817:
            unint64_t v465 = v498 + v582;
            goto LABEL_818;
          }
          long long v500 = (uint64_t *)((v561 + v498) & 0xFFFFFFFFFFFFFFF8);
LABEL_816:
          (*(void (**)(unint64_t, uint64_t))(v560 + 8))(v498, v559);
          swift_bridgeObjectRelease();
          (*(void (**)(unint64_t, uint64_t))(v523 + 8))(((unint64_t)v500 + v581) & v87, v562);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_817;
        case 2u:
          uint64_t v354 = *(void *)(v562 - 8);
          (*(void (**)(unsigned __int8 *, uint64_t))(v607 + 8))(a1, AssociatedTypeWitness);
          unint64_t v355 = (unint64_t)&a1[v548] & ~v610;
          if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v606 + 48))(v355, 1, v572)) {
            (*(void (**)(unint64_t, uint64_t))(v606 + 8))(v355, v572);
          }
          unint64_t v329 = (v529 + v355) & ~v34;
          if (v547 == v551)
          {
            int v356 = (*(uint64_t (**)(unint64_t))(v560 + 48))(v329);
          }
          else
          {
            unsigned int v401 = (uint64_t *)((v561 + v329) & 0xFFFFFFFFFFFFFFF8);
            if (v538 <= 0x7FFFFFFE)
            {
              uint64_t v402 = *v401;
              if ((unint64_t)*v401 >= 0xFFFFFFFF) {
                LODWORD(v402) = -1;
              }
              if ((v402 + 1) >= 2)
              {
LABEL_679:
                unint64_t v410 = v582;
LABEL_680:
                unsigned int v418 = *(void **)(v410 + v329 + 8);
LABEL_820:

                return;
              }
LABEL_678:
              (*(void (**)(unint64_t, uint64_t))(v560 + 8))(v329, v559);
              swift_bridgeObjectRelease();
              (*(void (**)(unint64_t, uint64_t))(v354 + 8))(((unint64_t)v401 + v581) & v87, v562);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              goto LABEL_679;
            }
            int v356 = (*(uint64_t (**)(unint64_t))(v354 + 48))(((unint64_t)v401 + v581) & v87);
          }
          if (v356) {
            goto LABEL_679;
          }
          unsigned int v401 = (uint64_t *)((v561 + v329) & 0xFFFFFFFFFFFFFFF8);
          goto LABEL_678;
        case 3u:
          unint64_t v579 = v573 + 16;
          uint64_t v357 = v83;
          uint64_t v358 = v84;
          uint64_t v359 = *(void (**)(unsigned __int8 *, uint64_t, uint64_t))(v607 + 8);
          v359(a1, AssociatedTypeWitness, v168);
          unint64_t v360 = (unint64_t)&a1[v531] & v85;
          if (v612 == v545)
          {
            int v361 = (*(uint64_t (**)(unint64_t))(v607 + 48))((unint64_t)&a1[v531] & v85);
            uint64_t v362 = v358;
            uint64_t v363 = v357;
LABEL_825:
            if (v361) {
              goto LABEL_354;
            }
            unint64_t v403 = (v555 + v360) & v170;
            unint64_t v404 = (v543 + v403) & v81;
            goto LABEL_827;
          }
          unint64_t v403 = (v555 + v360) & v170;
          unint64_t v404 = (v543 + v403) & v81;
          uint64_t v362 = v358;
          uint64_t v363 = v357;
          if (v550 == v545)
          {
            if (v546 == v550)
            {
              int v361 = (*(uint64_t (**)(unint64_t))(v558 + 48))((v543 + v403) & v81);
LABEL_824:
              uint64_t v363 = v357;
              uint64_t v362 = v358;
              goto LABEL_825;
            }
            uint64_t v431 = (unint64_t *)((v556 + v404) & 0xFFFFFFFFFFFFFFF8);
            if (v537 > 0x7FFFFFFE)
            {
              int v361 = (*(uint64_t (**)(unint64_t))(v554 + 48))(((unint64_t)v431 + v552) & v514);
              goto LABEL_824;
            }
            unint64_t v432 = *v431;
          }
          else
          {
            unint64_t v419 = v404 + v604;
            if ((v536 & 0x80000000) == 0)
            {
              unint64_t v420 = *(void *)(v419 + 8);
              if (v420 >= 0xFFFFFFFF) {
                LODWORD(v420) = -1;
              }
              int v361 = v420 + 1;
              goto LABEL_825;
            }
            uint64_t v438 = (v569 + ((v605 + v419) & v357)) & v358;
            if (v533 > 0x7FFFFFFD)
            {
              int v361 = (*(uint64_t (**)(uint64_t))(v567 + 48))(v438);
              goto LABEL_824;
            }
            unint64_t v432 = *(void *)(((v566 + ((v565 + v438) & v358)) & 0xFFFFFFFFFFFFFFF8) + 8);
          }
          if (v432 >= 0xFFFFFFFF) {
            LODWORD(v432) = -1;
          }
          if ((v432 + 1) < 2)
          {
LABEL_827:
            uint64_t v502 = v362;
            uint64_t v503 = v363;
            ((void (*)(unint64_t, uint64_t))v359)(v360, AssociatedTypeWitness);
            ((void (*)(unint64_t, uint64_t))v359)(v403, AssociatedTypeWitness);
            (*(void (**)(unint64_t, uint64_t))(v558 + 8))(v404, v557);
            swift_bridgeObjectRelease();
            (*(void (**)(unint64_t, uint64_t))(v554 + 8))((v552 + ((v556 + v404) & 0xFFFFFFFFFFFFFFF8)) & v514, v553);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            unint64_t v504 = (v605 + v404 + v604) & v503;
            id v505 = *(void (**)(unint64_t, uint64_t))(v567 + 8);
            v505((v569 + v504) & v502, v570);
            unint64_t v506 = (v565 + ((v569 + v504) & v502)) & v502;
            v505(v506, v570);
            swift_bridgeObjectRelease();
            unint64_t v507 = (v564
                  + ((((((v566 + v506) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v502;
            if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v567 + 48))(v507, 1, v570)) {
              v505(v507, v570);
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v508 = (uint64_t *)((((((v563 + v507) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v509 = v508[1];
            if ((v509 & 0x3000000000000000) == 0) {
              sub_10001E9C0(*v508, v509);
            }
            swift_bridgeObjectRelease();
            unint64_t v510 = v579 + v504;
            LODWORD(v511) = -1;
            if (*(void *)(v579 + v504 + 16) < 0xFFFFFFFFuLL) {
              uint64_t v511 = *(void *)(v579 + v504 + 16);
            }
            if ((int)v511 - 1 < 0)
            {
              swift_errorRelease();
              swift_errorRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if (*(void *)(v510 + 192))
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
              }
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            sub_1000CF144(*(void *)((((v510 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *(void *)(((((v510 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
            goto LABEL_354;
          }
          goto LABEL_354;
        case 4u:
        case 5u:
        case 7u:
          goto LABEL_298;
        case 6u:
          (*(void (**)(unsigned __int8 *, uint64_t, uint64_t))(v607 + 8))(a1, AssociatedTypeWitness, v168);
          uint64_t v364 = (unsigned __int8 *)((unint64_t)&a1[v525] & v340);
          if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v527 + 48))(v364, 1, v594)) {
            return;
          }
          id v199 = *(void (**)(unsigned __int8 *, uint64_t))(v527 + 8);
          unint64_t v89 = v364;
          uint64_t v201 = v594;
          goto LABEL_469;
        default:
          unint64_t v577 = v573 + 16;
          uint64_t v341 = v83;
          uint64_t v342 = v84;
          uint64_t v343 = *(void (**)(unsigned __int8 *, uint64_t, uint64_t))(v607 + 8);
          v343(a1, AssociatedTypeWitness, v168);
          unint64_t v320 = (unint64_t)&a1[v531] & v85;
          if (v612 == v545)
          {
            int v344 = (*(uint64_t (**)(unint64_t))(v607 + 48))((unint64_t)&a1[v531] & v85);
            uint64_t v345 = v342;
            uint64_t v346 = v341;
LABEL_774:
            if (v344) {
              goto LABEL_787;
            }
            unint64_t v397 = (v555 + v320) & v170;
            unint64_t v398 = (v543 + v397) & v81;
            goto LABEL_776;
          }
          unint64_t v397 = (v555 + v320) & v170;
          unint64_t v398 = (v543 + v397) & v81;
          uint64_t v345 = v342;
          uint64_t v346 = v341;
          if (v550 == v545)
          {
            if (v546 == v550)
            {
              int v344 = (*(uint64_t (**)(unint64_t))(v558 + 48))((v543 + v397) & v81);
LABEL_773:
              uint64_t v346 = v341;
              uint64_t v345 = v342;
              goto LABEL_774;
            }
            uint64_t v427 = (unint64_t *)((v556 + v398) & 0xFFFFFFFFFFFFFFF8);
            if (v537 > 0x7FFFFFFE)
            {
              int v344 = (*(uint64_t (**)(unint64_t))(v554 + 48))(((unint64_t)v427 + v552) & v514);
              goto LABEL_773;
            }
            unint64_t v428 = *v427;
          }
          else
          {
            unint64_t v414 = v398 + v604;
            if ((v536 & 0x80000000) == 0)
            {
              unint64_t v415 = *(void *)(v414 + 8);
              if (v415 >= 0xFFFFFFFF) {
                LODWORD(v415) = -1;
              }
              int v344 = v415 + 1;
              goto LABEL_774;
            }
            uint64_t v436 = (v569 + ((v605 + v414) & v341)) & v342;
            if (v533 > 0x7FFFFFFD)
            {
              int v344 = (*(uint64_t (**)(uint64_t))(v567 + 48))(v436);
              goto LABEL_773;
            }
            unint64_t v428 = *(void *)(((v566 + ((v565 + v436) & v342)) & 0xFFFFFFFFFFFFFFF8) + 8);
          }
          if (v428 >= 0xFFFFFFFF) {
            LODWORD(v428) = -1;
          }
          if ((v428 + 1) >= 2)
          {
LABEL_787:
            unint64_t v449 = v595;
            goto LABEL_788;
          }
LABEL_776:
          uint64_t v476 = v345;
          uint64_t v477 = v346;
          ((void (*)(unint64_t, uint64_t))v343)(v320, AssociatedTypeWitness);
          ((void (*)(unint64_t, uint64_t))v343)(v397, AssociatedTypeWitness);
          (*(void (**)(unint64_t, uint64_t))(v558 + 8))(v398, v557);
          swift_bridgeObjectRelease();
          (*(void (**)(unint64_t, uint64_t))(v554 + 8))((v552 + ((v556 + v398) & 0xFFFFFFFFFFFFFFF8)) & v514, v553);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v478 = (v605 + v398 + v604) & v477;
          uint64_t v479 = *(void (**)(unint64_t, uint64_t))(v567 + 8);
          v479((v569 + v478) & v476, v570);
          unint64_t v480 = (v565 + ((v569 + v478) & v476)) & v476;
          v479(v480, v570);
          swift_bridgeObjectRelease();
          unint64_t v481 = (v564
                + ((((((v566 + v480) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v476;
          if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v567 + 48))(v481, 1, v570)) {
            v479(v481, v570);
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          int v482 = (uint64_t *)((((((v563 + v481) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
          unint64_t v483 = v482[1];
          if ((v483 & 0x3000000000000000) == 0) {
            sub_10001E9C0(*v482, v483);
          }
          swift_bridgeObjectRelease();
          unint64_t v484 = v577 + v478;
          LODWORD(v485) = -1;
          if (*(void *)(v577 + v478 + 16) < 0xFFFFFFFFuLL) {
            uint64_t v485 = *(void *)(v577 + v478 + 16);
          }
          if ((int)v485 - 1 < 0)
          {
            swift_errorRelease();
            swift_errorRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (*(void *)(v484 + 192))
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          sub_1000CF144(*(void *)((((v484 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *(void *)(((((v484 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
          goto LABEL_787;
      }
    case 0x1Cu:
      unsigned int v90 = a1[v613];
      unsigned int v91 = v90 - 2;
      if (v90 >= 2)
      {
        if (v613 <= 3) {
          uint64_t v175 = v613;
        }
        else {
          uint64_t v175 = 4;
        }
        switch(v175)
        {
          case 1:
            goto LABEL_287;
          case 2:
            goto LABEL_288;
          case 3:
            goto LABEL_289;
          case 4:
            goto LABEL_290;
          default:
            goto LABEL_293;
        }
      }
      goto LABEL_293;
    case 0x1Du:
      unsigned int v90 = a1[v613];
      unsigned int v91 = v90 - 2;
      if (v90 >= 2)
      {
        if (v613 <= 3) {
          uint64_t v176 = v613;
        }
        else {
          uint64_t v176 = 4;
        }
        switch(v176)
        {
          case 1:
            goto LABEL_287;
          case 2:
            goto LABEL_288;
          case 3:
            goto LABEL_289;
          case 4:
            goto LABEL_290;
          default:
            goto LABEL_293;
        }
      }
      goto LABEL_293;
    case 0x1Eu:
      unsigned int v90 = a1[v613];
      unsigned int v91 = v90 - 2;
      if (v90 >= 2)
      {
        if (v613 <= 3) {
          uint64_t v177 = v613;
        }
        else {
          uint64_t v177 = 4;
        }
        switch(v177)
        {
          case 1:
            goto LABEL_287;
          case 2:
            goto LABEL_288;
          case 3:
            goto LABEL_289;
          case 4:
            goto LABEL_290;
          default:
            goto LABEL_293;
        }
      }
      goto LABEL_293;
    case 0x1Fu:
      unsigned int v178 = a1[v613];
      unsigned int v179 = v178 - 2;
      if (v178 < 2)
      {
        uint64_t v182 = AssociatedTypeWitness;
        uint64_t v181 = v572;
        uint64_t v183 = ~v592;
      }
      else
      {
        if (v613 <= 3) {
          uint64_t v180 = v613;
        }
        else {
          uint64_t v180 = 4;
        }
        uint64_t v182 = AssociatedTypeWitness;
        uint64_t v181 = v572;
        uint64_t v183 = ~v592;
        switch(v180)
        {
          case 1:
            int v184 = *a1;
            goto LABEL_445;
          case 2:
            int v184 = *(unsigned __int16 *)a1;
            goto LABEL_445;
          case 3:
            int v184 = *(unsigned __int16 *)a1 | (a1[2] << 16);
            goto LABEL_445;
          case 4:
            int v184 = *(_DWORD *)a1;
LABEL_445:
            if (v613 < 4) {
              unsigned int v178 = (v184 | (v179 << (8 * v613))) + 2;
            }
            else {
              unsigned int v178 = v184 + 2;
            }
            break;
          default:
            break;
        }
      }
      if (v178 == 1) {
        uint64_t v250 = v606;
      }
      else {
        uint64_t v250 = v607;
      }
      if (v178 == 1) {
        uint64_t v251 = v181;
      }
      else {
        uint64_t v251 = v182;
      }
      (*(void (**)(unsigned __int8 *, uint64_t, uint64_t, uint64_t))(v250 + 8))(a1, v251, v592, v82);
      unint64_t v89 = (unsigned __int8 *)((unint64_t)&a1[v568] & v183);
      unsigned int v162 = v89[v613];
      unsigned int v163 = v162 - 2;
      if (v162 >= 2)
      {
        if (v613 <= 3) {
          uint64_t v252 = v613;
        }
        else {
          uint64_t v252 = 4;
        }
        switch(v252)
        {
          case 1:
LABEL_459:
            int v253 = *v89;
            goto LABEL_463;
          case 2:
LABEL_460:
            int v253 = *(unsigned __int16 *)v89;
            goto LABEL_463;
          case 3:
LABEL_461:
            int v253 = *(unsigned __int16 *)v89 | (v89[2] << 16);
            goto LABEL_463;
          case 4:
LABEL_462:
            int v253 = *(_DWORD *)v89;
LABEL_463:
            if (v613 < 4) {
              unsigned int v162 = (v253 | (v163 << (8 * v613))) + 2;
            }
            else {
              unsigned int v162 = v253 + 2;
            }
            break;
          default:
            break;
        }
      }
LABEL_466:
      if (v162 != 1)
      {
LABEL_371:
        id v199 = *(void (**)(unsigned __int8 *, uint64_t))(v607 + 8);
        goto LABEL_299;
      }
LABEL_467:
      id v199 = *(void (**)(unsigned __int8 *, uint64_t))(v606 + 8);
      goto LABEL_468;
    case 0x20u:
      unsigned int v90 = a1[v613];
      unsigned int v91 = v90 - 2;
      if (v90 >= 2)
      {
        if (v613 <= 3) {
          uint64_t v185 = v613;
        }
        else {
          uint64_t v185 = 4;
        }
        switch(v185)
        {
          case 1:
            goto LABEL_287;
          case 2:
            goto LABEL_288;
          case 3:
            goto LABEL_289;
          case 4:
            goto LABEL_290;
          default:
            goto LABEL_293;
        }
      }
      goto LABEL_293;
    case 0x21u:
      unsigned int v90 = a1[v613];
      unsigned int v91 = v90 - 2;
      if (v90 >= 2)
      {
        if (v613 <= 3) {
          uint64_t v186 = v613;
        }
        else {
          uint64_t v186 = 4;
        }
        switch(v186)
        {
          case 1:
            goto LABEL_287;
          case 2:
            goto LABEL_288;
          case 3:
            goto LABEL_289;
          case 4:
            goto LABEL_290;
          default:
            goto LABEL_293;
        }
      }
      goto LABEL_293;
    case 0x22u:
      unsigned int v90 = a1[v613];
      unsigned int v91 = v90 - 2;
      if (v90 >= 2)
      {
        if (v613 <= 3) {
          uint64_t v187 = v613;
        }
        else {
          uint64_t v187 = 4;
        }
        switch(v187)
        {
          case 1:
            goto LABEL_287;
          case 2:
            goto LABEL_288;
          case 3:
            goto LABEL_289;
          case 4:
            goto LABEL_290;
          default:
            goto LABEL_293;
        }
      }
      goto LABEL_293;
    case 0x23u:
      unsigned int v90 = a1[v613];
      unsigned int v91 = v90 - 2;
      if (v90 >= 2)
      {
        if (v613 <= 3) {
          uint64_t v188 = v613;
        }
        else {
          uint64_t v188 = 4;
        }
        switch(v188)
        {
          case 1:
            goto LABEL_287;
          case 2:
            goto LABEL_288;
          case 3:
            goto LABEL_289;
          case 4:
            goto LABEL_290;
          default:
            goto LABEL_293;
        }
      }
      goto LABEL_293;
    case 0x24u:
      uint64_t v189 = ~v34;
      uint64_t v190 = ~v574;
      uint64_t v519 = *(void *)(v562 - 8);
      if (!(*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v607 + 48))(a1, 1, AssociatedTypeWitness))(*(void (**)(unsigned __int8 *, uint64_t))(v607 + 8))(a1, AssociatedTypeWitness); {
      unint64_t v191 = (((((unint64_t)&a1[v540 + 7] & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + v584 + 9) & v81;
      }
      if (v546 == v550)
      {
        int v192 = (*(uint64_t (**)(unint64_t))(v558 + 48))((((((unint64_t)&a1[v540 + 7] & 0xFFFFFFFFFFFFFFF8)
                                                                          + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                        + v584
                                                                        + 9) & v81);
LABEL_325:
        if (v192) {
          goto LABEL_328;
        }
        uint64_t v210 = (uint64_t *)((v556 + v191) & 0xFFFFFFFFFFFFFFF8);
        goto LABEL_327;
      }
      uint64_t v210 = (uint64_t *)((v556 + v191) & 0xFFFFFFFFFFFFFFF8);
      if (v537 > 0x7FFFFFFE)
      {
        int v192 = (*(uint64_t (**)(unint64_t))(v11 + 48))(((unint64_t)v210 + v552) & v190);
        goto LABEL_325;
      }
      uint64_t v211 = *v210;
      if ((unint64_t)*v210 >= 0xFFFFFFFF) {
        LODWORD(v211) = -1;
      }
      if ((v211 + 1) < 2)
      {
LABEL_327:
        (*(void (**)(unint64_t, uint64_t))(v558 + 8))(v191, v557);
        swift_bridgeObjectRelease();
        (*(void (**)(unint64_t, uint64_t))(v11 + 8))(((unint64_t)v210 + v552) & v190, v553);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
LABEL_328:
      unint64_t v217 = v604 + v191;
      sub_1000D31F8(*(void *)((v217 + 10) & 0xFFFFFFFFFFFFFFF8), *(void *)(((v217 + 10) & 0xFFFFFFFFFFFFFFF8) + 8), *(unsigned char *)(((v217 + 10) & 0xFFFFFFFFFFFFFFF8) + 16));
      unint64_t v218 = (v217 + 34) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v219 = *(void *)(v218 + 16);
      BOOL v220 = ((4 * (v219 >> 60)) & 0xC | ((v219 >> 60) >> 2)) != 0xF && ((4 * (v219 >> 60)) & 0xC) != 0;
      if (v219 >> 60 != 15 && !v220) {
        sub_10001E9C0(*(void *)(v218 + 8), v219);
      }

      unint64_t v221 = (unint64_t)&a1[v541] & ~v55;
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v606 + 48))(v221, 1, v572)) {
        (*(void (**)(unint64_t, uint64_t))(v606 + 8))(v221, v572);
      }
      unint64_t v222 = (v590 + ((((v586 + v221) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v189;
      if (v547 == v551)
      {
        int v223 = (*(uint64_t (**)(unint64_t))(v26 + 48))((v590
                                                                       + ((((v586 + v221) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v189);
      }
      else
      {
        unsigned int v224 = (uint64_t *)((v561 + v222) & 0xFFFFFFFFFFFFFFF8);
        if (v538 <= 0x7FFFFFFE)
        {
          uint64_t v225 = *v224;
          if ((unint64_t)*v224 >= 0xFFFFFFFF) {
            LODWORD(v225) = -1;
          }
          if ((v225 + 1) >= 2) {
            goto LABEL_347;
          }
          goto LABEL_346;
        }
        int v223 = (*(uint64_t (**)(unint64_t))(v519 + 48))(((unint64_t)v224 + v581) & v87);
      }
      if (v223)
      {
LABEL_347:
        sub_1000D31F8(*(void *)((v222 + v582 + 10) & 0xFFFFFFFFFFFFFFF8), *(void *)(((v222 + v582 + 10) & 0xFFFFFFFFFFFFFFF8) + 8), *(unsigned char *)(((v222 + v582 + 10) & 0xFFFFFFFFFFFFFFF8) + 16));
        unint64_t v226 = (v222 + v582 + 34) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v227 = *(void *)(v226 + 16);
        BOOL v228 = ((4 * (v227 >> 60)) & 0xC | ((v227 >> 60) >> 2)) != 0xF && ((4 * (v227 >> 60)) & 0xC) != 0;
        if (v227 >> 60 != 15 && !v228) {
          sub_10001E9C0(*(void *)(v226 + 8), v227);
        }

LABEL_354:
        swift_bridgeObjectRelease();
        return;
      }
      unsigned int v224 = (uint64_t *)((v561 + v222) & 0xFFFFFFFFFFFFFFF8);
LABEL_346:
      (*(void (**)(unint64_t, uint64_t))(v26 + 8))(v222, v559);
      swift_bridgeObjectRelease();
      (*(void (**)(unint64_t, uint64_t))(v519 + 8))(((unint64_t)v224 + v581) & v87, v562);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_347;
    case 0x25u:
      unsigned int v90 = a1[v613];
      unsigned int v91 = v90 - 2;
      if (v90 >= 2)
      {
        if (v613 <= 3) {
          uint64_t v193 = v613;
        }
        else {
          uint64_t v193 = 4;
        }
        switch(v193)
        {
          case 1:
            goto LABEL_287;
          case 2:
            goto LABEL_288;
          case 3:
            goto LABEL_289;
          case 4:
            goto LABEL_290;
          default:
            goto LABEL_293;
        }
      }
      goto LABEL_293;
    case 0x26u:
      unsigned int v90 = a1[v613];
      unsigned int v91 = v90 - 2;
      if (v90 >= 2)
      {
        if (v613 <= 3) {
          uint64_t v194 = v613;
        }
        else {
          uint64_t v194 = 4;
        }
        switch(v194)
        {
          case 1:
            goto LABEL_287;
          case 2:
            goto LABEL_288;
          case 3:
            goto LABEL_289;
          case 4:
            goto LABEL_290;
          default:
            goto LABEL_293;
        }
      }
      goto LABEL_293;
    case 0x27u:
      unsigned int v90 = a1[v613];
      unsigned int v91 = v90 - 2;
      if (v90 >= 2)
      {
        if (v613 <= 3) {
          uint64_t v195 = v613;
        }
        else {
          uint64_t v195 = 4;
        }
        switch(v195)
        {
          case 1:
            goto LABEL_287;
          case 2:
            goto LABEL_288;
          case 3:
            goto LABEL_289;
          case 4:
            goto LABEL_290;
          default:
            goto LABEL_293;
        }
      }
      goto LABEL_293;
    case 0x28u:
      unsigned int v90 = a1[v613];
      unsigned int v91 = v90 - 2;
      if (v90 < 2) {
        goto LABEL_293;
      }
      if (v613 <= 3) {
        uint64_t v196 = v613;
      }
      else {
        uint64_t v196 = 4;
      }
      switch(v196)
      {
        case 1:
LABEL_287:
          int v197 = *a1;
          break;
        case 2:
LABEL_288:
          int v197 = *(unsigned __int16 *)a1;
          break;
        case 3:
LABEL_289:
          int v197 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          break;
        case 4:
LABEL_290:
          int v197 = *(_DWORD *)a1;
          break;
        default:
          goto LABEL_293;
      }
      if (v613 < 4)
      {
        if ((v197 | (v91 << (8 * v613))) == 0xFFFFFFFF)
        {
LABEL_294:
          uint64_t v198 = v606;
LABEL_295:
          id v199 = *(void (**)(unsigned __int8 *, uint64_t))(v198 + 8);
          unint64_t v89 = a1;
LABEL_468:
          uint64_t v201 = v572;
LABEL_469:
          v199(v89, v201);
          return;
        }
      }
      else
      {
        unsigned int v90 = v197 + 2;
LABEL_293:
        if (v90 == 1) {
          goto LABEL_294;
        }
      }
      uint64_t v200 = v607;
LABEL_298:
      id v199 = *(void (**)(unsigned __int8 *, uint64_t))(v200 + 8);
      unint64_t v89 = a1;
LABEL_299:
      uint64_t v201 = AssociatedTypeWitness;
      goto LABEL_469;
    default:
      return;
  }
}

void *sub_100190CE4(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  uint64_t v1988 = *(void *)(a3 + 24);
  uint64_t v1969 = swift_getAssociatedTypeWitness();
  uint64_t v2027 = *(void *)(v1969 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v2027 + 80);
  uint64_t v1936 = v6 + v7;
  uint64_t v1990 = v7;
  unint64_t v2035 = (v6 + v7) & ~v7;
  unint64_t v8 = *(void *)(v2027 + 64);
  unint64_t v1998 = v8;
  unint64_t v9 = v2035 + v8;
  unint64_t v1993 = v2035 + v8;
  if (v8 <= v6) {
    unint64_t v8 = v6;
  }
  unint64_t v10 = v6;
  unint64_t v1982 = v8;
  unint64_t v11 = v8 + 1;
  size_t v2020 = v8 + 1;
  if (v8 + 1 > v9) {
    unint64_t v9 = v8 + 1;
  }
  uint64_t v12 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v13 = v12 | *(unsigned __int8 *)(v2027 + 80);
  uint64_t v1983 = v13;
  unint64_t v1964 = v13 + v11;
  unint64_t v1995 = ((v13 + v11) & ~v13) + v11;
  if (v1995 > v9) {
    unint64_t v9 = ((v13 + v11) & ~v13) + v11;
  }
  unint64_t v1992 = v9;
  uint64_t v1970 = v5;
  unsigned int v14 = *(_DWORD *)(v5 + 84);
  uint64_t v1989 = v4;
  uint64_t v1949 = swift_getAssociatedTypeWitness();
  uint64_t v15 = *(void *)(v1949 - 8);
  unsigned int v16 = *(_DWORD *)(v15 + 84);
  uint64_t v1946 = swift_getAssociatedTypeWitness();
  uint64_t v17 = *(void *)(v1946 - 8);
  unsigned int v18 = *(_DWORD *)(v17 + 84);
  unsigned int v1913 = v18;
  unsigned int v1931 = v16;
  if (v16 > v18) {
    unsigned int v18 = v16;
  }
  unsigned int v1917 = v18;
  if (v18 <= 0x7FFFFFFE) {
    unsigned int v18 = 2147483646;
  }
  unsigned int v1991 = v14;
  unsigned int v1939 = v18;
  if (v18 > v14) {
    unsigned int v14 = v18;
  }
  uint64_t v1962 = sub_10096B0E0();
  uint64_t v19 = *(void *)(v1962 - 8);
  unsigned int v20 = *(_DWORD *)(v19 + 84);
  if (v20 <= 0x7FFFFFFE) {
    unsigned int v21 = 2147483646;
  }
  else {
    unsigned int v21 = *(_DWORD *)(v19 + 84);
  }
  unsigned int v1975 = v21;
  if (v14 > v21) {
    unsigned int v21 = v14;
  }
  unsigned int v1915 = v21;
  if (v21 <= 0x7FFFFFFF) {
    unsigned int v21 = 0x7FFFFFFF;
  }
  unsigned int v1938 = v21;
  unsigned int v1944 = *(_DWORD *)(v19 + 84);
  unint64_t v2001 = v10;
  uint64_t v1957 = v10 + v12;
  uint64_t v2050 = v12;
  uint64_t v1950 = v15;
  uint64_t v1947 = v17;
  uint64_t v22 = *(unsigned __int8 *)(v17 + 80);
  uint64_t v23 = *(_DWORD *)(v15 + 80) & 0xF8 | v22 | 7;
  uint64_t v1927 = v10 + v23;
  uint64_t v2060 = v23;
  uint64_t v1955 = *(void *)(v15 + 64) + 7;
  uint64_t v1945 = v22 + 8;
  uint64_t v1971 = v22;
  uint64_t v1941 = *(void *)(v17 + 64) + 7;
  size_t v2013 = ((((v1941 + ((v22 + 8 + (v1955 & 0xFFFFFFFFFFFFFFF8)) & ~v22)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
        + 16;
  uint64_t v1963 = *(void *)(v1962 - 8);
  uint64_t v24 = *(unsigned __int8 *)(v19 + 80);
  uint64_t v2039 = v24 | 7;
  uint64_t v2018 = (v24 | 7) + 16;
  uint64_t v1965 = v24 + 12;
  size_t v25 = *(void *)(v19 + 64);
  uint64_t v1961 = v25 + v24;
  size_t v1912 = v25 + 12;
  uint64_t v1958 = v24 + 10;
  size_t v1966 = v25;
  if (v20) {
    size_t v26 = *(void *)(v19 + 64);
  }
  else {
    size_t v26 = v25 + 1;
  }
  size_t __n = v26;
  unint64_t v1943 = (v24
         + 10
         + ((((((v25 + 12 + ((v25 + v24 + ((v24 + 12) & ~v24)) & ~v24)) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)
           + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v24;
  size_t v1959 = v26 + 7;
  unint64_t v2017 = ((((((((((v26 + 7 + v1943) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
            + 19) & 0xFFFFFFFFFFFFFFF8)
          + 25) & 0xFFFFFFFFFFFFFFF8)
        + 16;
  uint64_t v1937 = (v2018 + v2013 + ((v10 + v23 + ((v10 + v12) & ~v12)) & ~v23)) & ~(v24 | 7);
  unint64_t v27 = (((v1937 + v2017 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  size_t v2010 = v27 + 16;
  uint64_t v28 = *(_DWORD *)(v15 + 80) & 0xF8 | v22 | 7 | v12 | v24;
  unint64_t v1935 = v27 + 23;
  unint64_t v1980 = ((v27 + 23 + ((v27 + 16 + v28) & ~v28)) & 0xFFFFFFFFFFFFFFF8) + 8;
  unsigned int v29 = *(_DWORD *)(v2027 + 84);
  uint64_t v1951 = swift_getAssociatedTypeWitness();
  uint64_t v30 = *(void *)(v1951 - 8);
  unsigned int v31 = *(_DWORD *)(v30 + 84);
  uint64_t v32 = swift_getAssociatedTypeWitness();
  uint64_t v33 = v28;
  uint64_t v1948 = v32;
  uint64_t v34 = *(void *)(v32 - 8);
  unsigned int v35 = *(_DWORD *)(v34 + 84);
  unsigned int v1932 = v31;
  if (v31 > v35) {
    unsigned int v35 = v31;
  }
  unsigned int v1924 = v35;
  if (v35 <= 0x7FFFFFFE) {
    unsigned int v35 = 2147483646;
  }
  unsigned int v1940 = v35;
  if (v35 <= v29) {
    unsigned int v35 = v29;
  }
  if (v35 <= v1975) {
    unsigned int v35 = v1975;
  }
  unsigned int v1914 = v35;
  if (v35 <= 0x7FFFFFFF) {
    unsigned int v35 = 0x7FFFFFFF;
  }
  unsigned int v1929 = v35;
  uint64_t v1956 = v1998 + v1990;
  uint64_t v1952 = v30;
  size_t v1953 = *(void **)(v32 - 8);
  uint64_t v36 = *(unsigned __int8 *)(v34 + 80);
  uint64_t v37 = *(_DWORD *)(v30 + 80) & 0xF8 | v36 | 7;
  uint64_t v1928 = v1998 + v37;
  uint64_t v1960 = *(void *)(v30 + 64) + 7;
  uint64_t v1954 = v36 + 8;
  uint64_t v1942 = v1953[8] + 7;
  unint64_t v38 = ((((v1942 + ((v36 + 8 + (v1960 & 0xFFFFFFFFFFFFFFF8)) & ~v36)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  unint64_t v1926 = (v2018 + v38 + ((v1998 + v37 + ((v1998 + v1990) & ~v1990)) & ~v37)) & ~v2039;
  unint64_t v39 = (((v1926 + v2017 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  size_t v40 = v39 + 16;
  uint64_t v41 = v37 | v1990;
  uint64_t v1976 = v24;
  uint64_t v42 = v37 | v1990 | v24;
  unint64_t v43 = v39 + ((v39 + 16 + v42) & ~v42);
  unint64_t v1911 = v28 + v10;
  size_t v44 = v2010 + ((v28 + v10) & ~v28);
  unint64_t v45 = (v44 + 7) & 0xFFFFFFFFFFFFFFF8;
  unsigned int v1930 = v29;
  if (v29) {
    size_t v46 = v1998;
  }
  else {
    size_t v46 = v1998 + 1;
  }
  uint64_t v47 = *(void *)(v1989 - 8);
  uint64_t v48 = *(unsigned __int8 *)(v47 + 80);
  uint64_t v1907 = v47;
  unint64_t v49 = ((v45 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  unint64_t v50 = ((((((v46 + v37 + ((v44 + v1990) & ~v1990)) & ~v37) + v38 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  unint64_t v51 = ((v45 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (*(_DWORD *)(v47 + 84)) {
    uint64_t v52 = *(void *)(*(void *)(v1989 - 8) + 64);
  }
  else {
    uint64_t v52 = *(void *)(*(void *)(v1989 - 8) + 64) + 1;
  }
  if (v10 <= v49) {
    unint64_t v53 = v49;
  }
  else {
    unint64_t v53 = v10;
  }
  if (v50 <= v38 + ((v46 + v37 + v2035) & ~v37) + 16) {
    unint64_t v50 = v38 + ((v46 + v37 + v2035) & ~v37) + 16;
  }
  uint64_t v1906 = v10 + v48;
  size_t v1902 = v52;
  if (v51 <= ((v10 + v48) & ~v48) + v52) {
    unint64_t v51 = ((v10 + v48) & ~v48) + v52;
  }
  if (v53 <= v50) {
    unint64_t v53 = v50;
  }
  if (v53 <= v51) {
    unint64_t v54 = v51;
  }
  else {
    unint64_t v54 = v53;
  }
  if (v1991) {
    size_t v55 = v10;
  }
  else {
    size_t v55 = v10 + 1;
  }
  uint64_t v56 = *(void *)(v1988 - 8);
  uint64_t v57 = *(unsigned __int8 *)(v56 + 80);
  uint64_t v1905 = v56;
  uint64_t v1987 = v37 | v1990 | v24;
  unint64_t v1910 = v42 + v1998;
  size_t v58 = v40 + ((v42 + v1998) & ~v42);
  unint64_t v59 = (v58 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v60 = ((((((v55 + v2060 + ((v58 + v2050) & ~v2050)) & ~v2060) + v2013 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  uint64_t v1904 = v1998 + v2050;
  size_t v1908 = v55 + v2060;
  if (*(_DWORD *)(v56 + 84)) {
    uint64_t v61 = *(void *)(*(void *)(v1988 - 8) + 64);
  }
  else {
    uint64_t v61 = *(void *)(*(void *)(v1988 - 8) + 64) + 1;
  }
  if (v1998 <= ((v59 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) {
    unint64_t v62 = ((v59 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  else {
    unint64_t v62 = v1998;
  }
  if (v60 <= v2013 + ((v55 + v2060 + ((v1998 + v2050) & ~v2050)) & ~v2060) + 16) {
    unint64_t v60 = v2013 + ((v55 + v2060 + ((v1998 + v2050) & ~v2050)) & ~v2060) + 16;
  }
  unint64_t v63 = ((v59 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  uint64_t v1903 = v1998 + v57;
  size_t v1901 = v61;
  if (v63 <= ((v1998 + v57) & ~v57) + v61) {
    unint64_t v63 = ((v1998 + v57) & ~v57) + v61;
  }
  if (v62 <= v60) {
    unint64_t v62 = v60;
  }
  if (v62 <= v63) {
    unint64_t v64 = v63;
  }
  else {
    unint64_t v64 = v62;
  }
  unint64_t v1916 = v64;
  unint64_t v65 = v64 + 1;
  unint64_t v1918 = v54;
  if (v65 <= v54 + 1) {
    unint64_t v66 = v54 + 1;
  }
  else {
    unint64_t v66 = v65;
  }
  if (v2020 > v1982 + 2) {
    unint64_t v67 = v1982 + 1;
  }
  else {
    unint64_t v67 = v1982 + 2;
  }
  if (v67 <= v1980) {
    unint64_t v67 = v1980;
  }
  unint64_t v68 = ((v43 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  size_t v1925 = v55;
  unint64_t v1919 = ((((((((v2060 + ((((v55 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 9) & ~v2060) + v2013 + 34) & 0xFFFFFFFFFFFFFFF8)
            + 63) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + v41
        + 8;
  if (v67 <= v68) {
    unint64_t v67 = ((v43 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  if (v67 <= v2010) {
    unint64_t v67 = v2010;
  }
  if (v67 <= v40) {
    unint64_t v67 = v40;
  }
  if (v67 <= v1995 + 2) {
    unint64_t v67 = v1995 + 2;
  }
  if (v67 <= ((v1982 + 9) & 0xFFFFFFFFFFFFFFF8) + 8) {
    unint64_t v67 = ((v1982 + 9) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  if (v67 <= (v1982 & 0xFFFFFFFFFFFFFFF8) + 16) {
    unint64_t v67 = (v1982 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  if (v67 <= v1993) {
    unint64_t v67 = v1993;
  }
  if (v67 <= ((v1983 + 1) & ~v1983) + v2020) {
    unint64_t v67 = ((v1983 + 1) & ~v1983) + v2020;
  }
  unint64_t v69 = v66;
  if (v67 <= v66 + 1) {
    unint64_t v67 = v66 + 1;
  }
  if (v67 <= v1995) {
    unint64_t v67 = v1995;
  }
  if (v67 <= ((((((((((((v37 + 9 + ((((v46 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v37)
                      + v38
                      + 34) & 0xFFFFFFFFFFFFFFF8)
                    + 63) & 0xFFFFFFFFFFFFFFF8)
                  + 15) & 0xFFFFFFFFFFFFFFF8)
                + 8
                + (v1919 & ~v41)
                + 23) & 0xFFFFFFFFFFFFFFF8)
              + 39) & 0xFFFFFFFFFFFFFFF8)
            + 8)
    unint64_t v67 = ((((((((((((v37 + 9 + ((((v46 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v37) + v38 + 34) & 0xFFFFFFFFFFFFFFF8)
                + 63) & 0xFFFFFFFFFFFFFFF8)
              + 15) & 0xFFFFFFFFFFFFFFF8)
            + 8
            + (v1919 & ~v41)
            + 23) & 0xFFFFFFFFFFFFFFF8)
          + 39) & 0xFFFFFFFFFFFFFFF8)
        + 8;
  if (v67 <= v1992) {
    unint64_t v67 = v1992;
  }
  if (v67 <= 0x38) {
    uint64_t v70 = 56;
  }
  else {
    uint64_t v70 = v67;
  }
  uint64_t v2036 = v70;
  size_t v1923 = v46 + 7;
  if (v70 > 3) {
    goto LABEL_105;
  }
  unsigned int v73 = ((1 << (8 * v70)) + 5) >> (8 * v70);
  if (v73 > 0xFFD6)
  {
    unint64_t v72 = a2;
    unsigned int v71 = *(_DWORD *)&a2[v70];
  }
  else
  {
    if (v73 <= 0xD6)
    {
LABEL_105:
      unsigned int v71 = a2[v70];
      unint64_t v72 = a2;
      goto LABEL_110;
    }
    unsigned int v71 = *(unsigned __int16 *)&a2[v70];
    unint64_t v72 = a2;
  }
LABEL_110:
  unsigned int v74 = v71 - 41;
  unint64_t v1981 = ((v1982 + 9) & 0xFFFFFFFFFFFFFFF8) + 8;
  unint64_t v1933 = v68;
  unint64_t v1934 = v66 + 1;
  if (v71 >= 0x29)
  {
    if (v70 <= 3) {
      uint64_t v75 = v70;
    }
    else {
      uint64_t v75 = 4;
    }
    switch(v75)
    {
      case 1:
        int v76 = *v72;
        goto LABEL_119;
      case 2:
        int v76 = *(unsigned __int16 *)v72;
        goto LABEL_119;
      case 3:
        int v76 = *(unsigned __int16 *)v72 | (v72[2] << 16);
        goto LABEL_119;
      case 4:
        int v76 = *(_DWORD *)v72;
LABEL_119:
        if (v70 < 4) {
          v76 |= v74 << (8 * v70);
        }
        unsigned int v71 = v76 + 41;
        break;
      default:
        break;
    }
  }
  uint64_t v1899 = v37 + 9;
  unint64_t v1900 = ((((((((v37 + 9 + ((((v46 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v37) + v38 + 34) & 0xFFFFFFFFFFFFFFF8)
            + 63) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 8;
  uint64_t v1898 = v46 + v37;
  size_t v1909 = v46;
  unint64_t v1920 = (v1982 & 0xFFFFFFFFFFFFFFF8) + 16;
  unint64_t v1921 = ((v1983 + 1) & ~v1983) + v2020;
  unint64_t v1922 = ((((v1900 + (v1919 & ~v41) + 23) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 8;
  uint64_t v77 = ~v1990;
  uint64_t v78 = ~v1983;
  uint64_t v79 = ~v2050;
  uint64_t v80 = ~v2060;
  uint64_t v81 = ~v1971;
  uint64_t v82 = ~v2039;
  uint64_t v83 = ~v1976;
  uint64_t v84 = ~v33;
  uint64_t v85 = ~v37;
  uint64_t v86 = ~v36;
  switch(v71)
  {
    case 0u:
      uint64_t v87 = v72;
      (*(void (**)(void *))(v1970 + 16))(a1);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v2027 + 16))(((unint64_t)a1 + v1936) & v77, (unint64_t)&v87[v1936] & v77, v1969);
      if (v2036 > 3) {
        goto LABEL_124;
      }
      unsigned int v388 = ((1 << (8 * v2036)) + 5) >> (8 * v2036);
      if (v388 > 0xFFD6)
      {
        *(_DWORD *)((char *)a1 + v2036) = 0;
      }
      else if (v388 <= 0xD6)
      {
LABEL_124:
        *((unsigned char *)a1 + v2036) = 0;
      }
      else
      {
        *(_WORD *)((char *)a1 + v2036) = 0;
      }
      return a1;
    case 1u:
      unsigned int v90 = v72[v1982];
      unsigned int v91 = v90 - 2;
      if (v90 < 2)
      {
        uint64_t v93 = v2027;
        uint64_t v94 = v1970;
      }
      else
      {
        if (v1982 <= 3) {
          uint64_t v92 = v1982;
        }
        else {
          uint64_t v92 = 4;
        }
        uint64_t v93 = v2027;
        uint64_t v94 = v1970;
        switch(v92)
        {
          case 1:
            int v95 = *v72;
            goto LABEL_495;
          case 2:
            int v95 = *(unsigned __int16 *)v72;
            goto LABEL_495;
          case 3:
            int v95 = *(unsigned __int16 *)v72 | (v72[2] << 16);
            goto LABEL_495;
          case 4:
            int v95 = *(_DWORD *)v72;
LABEL_495:
            if (v1982 < 4) {
              unsigned int v90 = (v95 | (v91 << (8 * v1982))) + 2;
            }
            else {
              unsigned int v90 = v95 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v621 = v90 == 1;
      if (v90 == 1) {
        uint64_t v622 = v93;
      }
      else {
        uint64_t v622 = v94;
      }
      (*(void (**)(void *))(v622 + 16))(a1);
      *((unsigned char *)a1 + v1982) = v621;
      if (v2036 > 3) {
        goto LABEL_502;
      }
      unsigned int v623 = ((1 << (8 * v2036)) + 5) >> (8 * v2036);
      if (v623 > 0xFFD6)
      {
        *(_DWORD *)((char *)a1 + v2036) = 1;
      }
      else if (v623 <= 0xD6)
      {
LABEL_502:
        *((unsigned char *)a1 + v2036) = 1;
      }
      else
      {
        *(_WORD *)((char *)a1 + v2036) = 1;
      }
      return a1;
    case 2u:
      unsigned int v96 = v72[v1982];
      unsigned int v97 = v96 - 2;
      if (v96 < 2)
      {
        uint64_t v99 = v2027;
        uint64_t v100 = v1970;
      }
      else
      {
        if (v1982 <= 3) {
          uint64_t v98 = v1982;
        }
        else {
          uint64_t v98 = 4;
        }
        uint64_t v99 = v2027;
        uint64_t v100 = v1970;
        switch(v98)
        {
          case 1:
            int v101 = *v72;
            goto LABEL_510;
          case 2:
            int v101 = *(unsigned __int16 *)v72;
            goto LABEL_510;
          case 3:
            int v101 = *(unsigned __int16 *)v72 | (v72[2] << 16);
            goto LABEL_510;
          case 4:
            int v101 = *(_DWORD *)v72;
LABEL_510:
            if (v1982 < 4) {
              unsigned int v96 = (v101 | (v97 << (8 * v1982))) + 2;
            }
            else {
              unsigned int v96 = v101 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v624 = v96 == 1;
      if (v96 == 1) {
        uint64_t v625 = v99;
      }
      else {
        uint64_t v625 = v100;
      }
      (*(void (**)(void *))(v625 + 16))(a1);
      *((unsigned char *)a1 + v1982) = v624;
      uint64_t v273 = v2036;
      if (v2036 > 3) {
        goto LABEL_517;
      }
      unsigned int v626 = ((1 << (8 * v2036)) + 5) >> (8 * v2036);
      if (v626 > 0xFFD6)
      {
        int v498 = 2;
        goto LABEL_975;
      }
      if (v626 <= 0xD6)
      {
LABEL_517:
        char v274 = 2;
        goto LABEL_969;
      }
      __int16 v399 = 2;
      goto LABEL_973;
    case 3u:
      unsigned int v102 = v72[v1982];
      unsigned int v103 = v102 - 2;
      if (v102 < 2)
      {
        uint64_t v105 = v2027;
        uint64_t v106 = v1970;
      }
      else
      {
        if (v1982 <= 3) {
          uint64_t v104 = v1982;
        }
        else {
          uint64_t v104 = 4;
        }
        uint64_t v105 = v2027;
        uint64_t v106 = v1970;
        switch(v104)
        {
          case 1:
            int v107 = *v72;
            goto LABEL_525;
          case 2:
            int v107 = *(unsigned __int16 *)v72;
            goto LABEL_525;
          case 3:
            int v107 = *(unsigned __int16 *)v72 | (v72[2] << 16);
            goto LABEL_525;
          case 4:
            int v107 = *(_DWORD *)v72;
LABEL_525:
            if (v1982 < 4) {
              unsigned int v102 = (v107 | (v103 << (8 * v1982))) + 2;
            }
            else {
              unsigned int v102 = v107 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v627 = v102 == 1;
      if (v102 == 1) {
        uint64_t v628 = v105;
      }
      else {
        uint64_t v628 = v106;
      }
      (*(void (**)(void *))(v628 + 16))(a1);
      *((unsigned char *)a1 + v1982) = v627;
      uint64_t v273 = v2036;
      if (v2036 > 3) {
        goto LABEL_532;
      }
      unsigned int v629 = ((1 << (8 * v2036)) + 5) >> (8 * v2036);
      if (v629 > 0xFFD6)
      {
        int v498 = 3;
        goto LABEL_975;
      }
      if (v629 <= 0xD6)
      {
LABEL_532:
        char v274 = 3;
        goto LABEL_969;
      }
      __int16 v399 = 3;
      goto LABEL_973;
    case 4u:
      unsigned int v108 = v72[v1982];
      unsigned int v109 = v108 - 2;
      if (v108 < 2)
      {
        uint64_t v111 = ~v1983;
        uint64_t v112 = v2027;
        uint64_t v113 = v1970;
      }
      else
      {
        if (v1982 <= 3) {
          uint64_t v110 = v1982;
        }
        else {
          uint64_t v110 = 4;
        }
        uint64_t v111 = ~v1983;
        uint64_t v112 = v2027;
        uint64_t v113 = v1970;
        switch(v110)
        {
          case 1:
            int v114 = *v72;
            goto LABEL_540;
          case 2:
            int v114 = *(unsigned __int16 *)v72;
            goto LABEL_540;
          case 3:
            int v114 = *(unsigned __int16 *)v72 | (v72[2] << 16);
            goto LABEL_540;
          case 4:
            int v114 = *(_DWORD *)v72;
LABEL_540:
            if (v1982 < 4) {
              unsigned int v108 = (v114 | (v109 << (8 * v1982))) + 2;
            }
            else {
              unsigned int v108 = v114 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v630 = v108 == 1;
      if (v108 == 1) {
        uint64_t v631 = v112;
      }
      else {
        uint64_t v631 = v113;
      }
      v632 = v72;
      (*(void (**)(void *))(v631 + 16))(a1);
      *((unsigned char *)a1 + v1982) = v630;
      unint64_t v633 = (unsigned __int8 *)((unint64_t)&v632[v1964] & v111);
      unsigned int v634 = v633[v1982];
      unsigned int v635 = v634 - 2;
      if (v634 >= 2)
      {
        if (v1982 <= 3) {
          uint64_t v636 = v1982;
        }
        else {
          uint64_t v636 = 4;
        }
        switch(v636)
        {
          case 1:
            int v637 = *v633;
            goto LABEL_946;
          case 2:
            int v637 = *(unsigned __int16 *)v633;
            goto LABEL_946;
          case 3:
            int v637 = *(unsigned __int16 *)v633 | (*(unsigned __int8 *)(((unint64_t)&v632[v1964] & v111) + 2) << 16);
            goto LABEL_946;
          case 4:
            int v637 = *(_DWORD *)v633;
LABEL_946:
            if (v1982 < 4) {
              unsigned int v634 = (v637 | (v635 << (8 * v1982))) + 2;
            }
            else {
              unsigned int v634 = v637 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v746 = v634 == 1;
      if (v634 == 1) {
        uint64_t v747 = v112;
      }
      else {
        uint64_t v747 = v113;
      }
      (*(void (**)(unint64_t))(v747 + 16))(((unint64_t)a1 + v1964) & v111);
      *(unsigned char *)((((unint64_t)a1 + v1964) & v111) + v1982) = v746;
      uint64_t v273 = v2036;
      if (v2036 > 3) {
        goto LABEL_953;
      }
      unsigned int v748 = ((1 << (8 * v2036)) + 5) >> (8 * v2036);
      if (v748 > 0xFFD6)
      {
        int v498 = 4;
        goto LABEL_975;
      }
      if (v748 <= 0xD6)
      {
LABEL_953:
        char v274 = 4;
        goto LABEL_969;
      }
      __int16 v399 = 4;
      goto LABEL_973;
    case 5u:
      uint64_t v115 = ~v2060;
      uint64_t v2051 = ~v2050;
      uint64_t v1984 = ~v2039;
      uint64_t v116 = v1991;
      uint64_t v2040 = ~v1976;
      size_t v1893 = v40;
      uint64_t v1896 = v33;
      uint64_t v1889 = ~v1971;
      unint64_t v1891 = v1982 + 2;
      uint64_t v1972 = ~v33;
      if (v1991 == v1938)
      {
        uint64_t v117 = v1970;
        uint64_t v118 = AssociatedTypeWitness;
        unint64_t v119 = v72;
        int v120 = (*(uint64_t (**)(void))(v1970 + 48))();
        unint64_t v121 = v119;
        size_t v122 = __n;
        uint64_t v123 = v2060;
LABEL_983:
        if (v120)
        {
LABEL_984:
          size_t v754 = v2010;
          memcpy(a1, v121, v2010);
          uint64_t v755 = v1944;
LABEL_985:
          size_t v756 = v122;
          goto LABEL_1020;
        }
        unint64_t v389 = (unint64_t)&v121[v1957] & v2051;
        unint64_t v390 = (v389 + v2001 + v123) & v115;
LABEL_987:
        BOOL v757 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v117 + 16);
        uint64_t v758 = v123;
        v757(a1, v121, v118);
        unint64_t v759 = ((unint64_t)a1 + v1957) & v2051;
        v757((void *)v759, (unsigned __int8 *)v389, v118);
        uint64_t v2000 = ~v2060;
        unint64_t v760 = (v759 + v2001 + v758) & v115;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v1950 + 16))(v760, v390, v1949);
        uint64_t v761 = (void *)((v1955 + v760) & 0xFFFFFFFFFFFFFFF8);
        unsigned int v762 = (void *)((v1955 + v390) & 0xFFFFFFFFFFFFFFF8);
        *uint64_t v761 = *v762;
        unint64_t v763 = ((unint64_t)v761 + v1945) & v1889;
        unint64_t v764 = ((unint64_t)v762 + v1945) & v1889;
        unsigned int v765 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1947 + 16);
        swift_bridgeObjectRetain();
        v765(v763, v764, v1946);
        BOOL v766 = (void *)((v1941 + v764) & 0xFFFFFFFFFFFFFFF8);
        uint64_t v767 = (void *)((v1941 + v763) & 0xFFFFFFFFFFFFFFF8);
        *uint64_t v767 = *v766;
        unsigned int v768 = (void *)(((unint64_t)v767 + 15) & 0xFFFFFFFFFFFFFFF8);
        BOOL v769 = (void *)(((unint64_t)v766 + 15) & 0xFFFFFFFFFFFFFFF8);
        *unsigned int v768 = *v769;
        v768[1] = v769[1];
        uint64_t v770 = (void *)(v2013 + v760);
        *uint64_t v770 = *(void *)(v2013 + v390);
        v770[1] = *(void *)(v2013 + v390 + 8);
        size_t v771 = (v2018 + v2013 + v760) & v1984;
        size_t v772 = (v2018 + v2013 + v390) & v1984;
        *(unsigned char *)size_t v771 = *(unsigned char *)v772;
        uint64_t v773 = v771 | 4;
        int v774 = *(_DWORD *)(v772 | 4);
        *(unsigned char *)(v773 + 4) = *(unsigned char *)((v772 | 4) + 4);
        *(_DWORD *)uint64_t v773 = v774;
        *(_WORD *)(v771 + 10) = *(_WORD *)(v772 + 0xA);
        size_t v2067 = v771;
        size_t v775 = (v1965 + v771) & ~v1976;
        size_t v2037 = v772;
        size_t v776 = (v1965 + v772) & ~v1976;
        size_t v777 = *(void (**)(size_t, size_t, uint64_t))(v1963 + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v777(v775, v776, v1962);
        size_t v778 = (v1961 + v775) & ~v1976;
        size_t v779 = (v1961 + v776) & ~v1976;
        v777(v778, v779, v1962);
        uint64_t v780 = (unsigned char *)(v778 + v1966);
        *uint64_t v780 = *(unsigned char *)(v779 + v1966);
        v780[1] = *(unsigned char *)(v779 + v1966 + 1);
        v780[2] = *(unsigned char *)(v779 + v1966 + 2);
        v780[3] = *(unsigned char *)(v779 + v1966 + 3);
        v780[4] = *(unsigned char *)(v779 + v1966 + 4);
        unint64_t v781 = (v778 + v1966 + 12) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v782 = (v779 + v1966 + 12) & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v781 = *(void *)v782;
        *(void *)(v781 + 8) = *(void *)(v782 + 8);
        *(unsigned char *)(v781 + 16) = *(unsigned char *)(v782 + 16);
        *(unsigned char *)(v781 + 17) = *(unsigned char *)(v782 + 17);
        *(unsigned char *)(v781 + 18) = *(unsigned char *)(v782 + 18);
        *(unsigned char *)(v781 + 19) = *(unsigned char *)(v782 + 19);
        unint64_t v783 = (v781 + 27) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v784 = (v782 + 27) & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v783 = *(void *)v784;
        *(unsigned char *)(v783 + 8) = *(unsigned char *)(v784 + 8);
        *(unsigned char *)(v783 + 9) = *(unsigned char *)(v784 + 9);
        *(unsigned char *)(v783 + 10) = *(unsigned char *)(v784 + 10);
        *(unsigned char *)(v783 + 11) = *(unsigned char *)(v784 + 11);
        *(unsigned char *)(v783 + 12) = *(unsigned char *)(v784 + 12);
        unint64_t v785 = (void *)((v782 + 47) & 0xFFFFFFFFFFFFFFF8);
        v786 = (void *)((v781 + 47) & 0xFFFFFFFFFFFFFFF8);
        void *v786 = *v785;
        unint64_t v787 = ((unint64_t)v786 + 15) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v788 = ((unint64_t)v785 + 15) & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v787 = *(void *)v788;
        *(unsigned char *)(v787 + 8) = *(unsigned char *)(v788 + 8);
        *(unsigned char *)(v787 + 9) = *(unsigned char *)(v788 + 9);
        v789 = (void *)((v1958 + v787) & ~v1976);
        v790 = (const void *)((v1958 + v788) & ~v1976);
        v791 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v1963 + 48);
        swift_bridgeObjectRetain();
        if (v791(v790, 1, v1962))
        {
          memcpy(v789, v790, __n);
        }
        else
        {
          v777((size_t)v789, (size_t)v790, v1962);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v1963 + 56))(v789, 0, 1, v1962);
        }
        unint64_t v792 = (void *)(((unint64_t)v789 + v1959) & 0xFFFFFFFFFFFFFFF8);
        uint64_t v793 = (void *)(((unint64_t)v790 + v1959) & 0xFFFFFFFFFFFFFFF8);
        *unint64_t v792 = *v793;
        unint64_t v794 = ((unint64_t)v792 + 15) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v795 = ((unint64_t)v793 + 15) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v796 = *(void *)v795;
        *(unsigned char *)(v794 + 8) = *(unsigned char *)(v795 + 8);
        *(void *)unint64_t v794 = v796;
        unint64_t v797 = (void *)(((unint64_t)v792 + 31) & 0xFFFFFFFFFFFFFFF8);
        v798 = (void *)(((unint64_t)v793 + 31) & 0xFFFFFFFFFFFFFFF8);
        *unint64_t v797 = *v798;
        unint64_t v799 = ((unint64_t)v797 + 15) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v800 = (uint64_t *)(((unint64_t)v798 + 15) & 0xFFFFFFFFFFFFFFF8);
        unint64_t v801 = v800[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v115 = v2000;
        if ((v801 & 0x3000000000000000) != 0)
        {
          *(_OWORD *)unint64_t v799 = *(_OWORD *)v800;
        }
        else
        {
          uint64_t v802 = *v800;
          sub_10001EBB0(*v800, v801);
          *(void *)unint64_t v799 = v802;
          *(void *)(v799 + 8) = v801;
        }
        unint64_t v803 = (v799 + 19) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v804 = ((unint64_t)v800 + 19) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v805 = *(void *)v804;
        *(unsigned char *)(v803 + 8) = *(unsigned char *)(v804 + 8);
        *(void *)unint64_t v803 = v805;
        *(unsigned char *)(v803 + 9) = *(unsigned char *)(v804 + 9);
        unint64_t v806 = (v803 + 13) & 0xFFFFFFFFFFFFFFFCLL;
        unint64_t v807 = (v804 + 13) & 0xFFFFFFFFFFFFFFFCLL;
        int v808 = *(_DWORD *)v807;
        *(unsigned char *)(v806 + 4) = *(unsigned char *)(v807 + 4);
        *(_DWORD *)unint64_t v806 = v808;
        unint64_t v809 = (void *)((v803 + 25) & 0xFFFFFFFFFFFFFFF8);
        v810 = (void *)((v804 + 25) & 0xFFFFFFFFFFFFFFF8);
        *unint64_t v809 = *v810;
        v809[1] = v810[1];
        unint64_t v811 = v2017 + v2067;
        v812 = (long long *)(v2017 + v2037);
        unint64_t v813 = *(void *)(v2017 + v2037 + 16);
        if (v813 >= 0xFFFFFFFF) {
          LODWORD(v813) = -1;
        }
        int v814 = v813 - 1;
        swift_bridgeObjectRetain();
        if (v814 < 0)
        {
          *(void *)unint64_t v811 = *(void *)v812;
          *(unsigned char *)(v811 + 8) = *((unsigned char *)v812 + 8);
          *(unsigned char *)(v811 + 9) = *((unsigned char *)v812 + 9);
          uint64_t v827 = *((void *)v812 + 2);
          swift_errorRetain();
          *(void *)(v811 + 16) = v827;
          uint64_t v828 = *((void *)v812 + 3);
          swift_errorRetain();
          *(void *)(v811 + 24) = v828;
          *(unsigned char *)(v811 + 32) = *((unsigned char *)v812 + 32);
          *(unsigned char *)(v811 + 33) = *((unsigned char *)v812 + 33);
          *(unsigned char *)(v811 + 34) = *((unsigned char *)v812 + 34);
          *(void *)(v811 + 40) = *((void *)v812 + 5);
          *(void *)(v811 + 48) = *((void *)v812 + 6);
          *(void *)(v811 + 56) = *((void *)v812 + 7);
          *(void *)(v811 + 64) = *((void *)v812 + 8);
          *(unsigned char *)(v811 + 72) = *((unsigned char *)v812 + 72);
          *(void *)(v811 + 80) = *((void *)v812 + 10);
          *(void *)(v811 + 88) = *((void *)v812 + 11);
          v2068 = (void *)*((void *)v812 + 12);
          *(void *)(v811 + 96) = v2068;
          *(unsigned char *)(v811 + 104) = *((unsigned char *)v812 + 104);
          *(unsigned char *)(v811 + 105) = *((unsigned char *)v812 + 105);
          *(void *)(v811 + 112) = *((void *)v812 + 14);
          *(void *)(v811 + 120) = *((void *)v812 + 15);
          *(void *)(v811 + 128) = *((void *)v812 + 16);
          *(void *)(v811 + 136) = *((void *)v812 + 17);
          *(void *)(v811 + 144) = *((void *)v812 + 18);
          *(void *)(v811 + 152) = *((void *)v812 + 19);
          *(void *)(v811 + 160) = *((void *)v812 + 20);
          *(void *)(v811 + 168) = *((void *)v812 + 21);
          *(unsigned char *)(v811 + 176) = *((unsigned char *)v812 + 176);
          *(void *)(v811 + 184) = *((void *)v812 + 23);
          uint64_t v829 = *((void *)v812 + 24);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v830 = v2068;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v829)
          {
            *(void *)(v811 + 192) = v829;
            *(void *)(v811 + 200) = *((void *)v812 + 25);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            *(_OWORD *)(v811 + 192) = v812[12];
          }
          size_t v122 = __n;
          uint64_t v84 = v1972;
          uint64_t v115 = v2000;
          *(void *)(v811 + 208) = *((void *)v812 + 26);
          *(void *)(v811 + 216) = *((void *)v812 + 27);
          *(void *)(v811 + 224) = *((void *)v812 + 28);
          *(void *)(v811 + 232) = *((void *)v812 + 29);
          *(void *)(v811 + 240) = *((void *)v812 + 30);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v815 = *v812;
          long long v816 = v812[1];
          long long v817 = v812[3];
          *(_OWORD *)(v811 + 32) = v812[2];
          *(_OWORD *)(v811 + 48) = v817;
          *(_OWORD *)unint64_t v811 = v815;
          *(_OWORD *)(v811 + 16) = v816;
          long long v818 = v812[4];
          long long v819 = v812[5];
          long long v820 = v812[7];
          *(_OWORD *)(v811 + 96) = v812[6];
          *(_OWORD *)(v811 + 112) = v820;
          *(_OWORD *)(v811 + 64) = v818;
          *(_OWORD *)(v811 + 80) = v819;
          long long v821 = v812[8];
          long long v822 = v812[9];
          long long v823 = v812[11];
          *(_OWORD *)(v811 + 160) = v812[10];
          *(_OWORD *)(v811 + 176) = v823;
          *(_OWORD *)(v811 + 128) = v821;
          *(_OWORD *)(v811 + 144) = v822;
          long long v824 = v812[12];
          long long v825 = v812[13];
          long long v826 = v812[14];
          *(void *)(v811 + 240) = *((void *)v812 + 30);
          *(_OWORD *)(v811 + 208) = v825;
          *(_OWORD *)(v811 + 224) = v826;
          *(_OWORD *)(v811 + 192) = v824;
          uint64_t v84 = v1972;
          size_t v122 = __n;
        }
        v910 = (_OWORD *)((v811 + 255) & 0xFFFFFFFFFFFFFFF8);
        unint64_t v911 = (long long *)(((unint64_t)v812 + 255) & 0xFFFFFFFFFFFFFFF8);
        long long v912 = *v911;
        *(_OWORD *)((char *)v910 + 9) = *(long long *)((char *)v911 + 9);
        _OWORD *v910 = v912;
        unint64_t v913 = (v811 + 287) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v914 = ((unint64_t)v812 + 287) & 0xFFFFFFFFFFFFFFF8;
        long long v915 = *(_OWORD *)v914;
        *(unsigned char *)(v913 + 16) = *(unsigned char *)(v914 + 16);
        *(_OWORD *)unint64_t v913 = v915;
        long long v916 = (void *)((v811 + 311) & 0xFFFFFFFFFFFFFFF8);
        unint64_t v917 = ((unint64_t)v812 + 311) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v918 = *(void *)v917;
        v917 += 15;
        *long long v916 = v918;
        long long v919 = (void *)(((unint64_t)v916 + 15) & 0xFFFFFFFFFFFFFFF8);
        uint64_t v920 = *(void *)(v917 & 0xFFFFFFFFFFFFFFF8);
        unint64_t v921 = *(void *)((v917 & 0xFFFFFFFFFFFFFFF8) + 8);
        sub_10018B584(v920, v921);
        *long long v919 = v920;
        v919[1] = v921;
        size_t v756 = v1966;
        uint64_t v755 = v1944;
        uint64_t v118 = AssociatedTypeWitness;
        size_t v754 = v2010;
        uint64_t v116 = v1991;
        if (!v1944) {
          goto LABEL_985;
        }
LABEL_1020:
        unint64_t v922 = ((((v1937
                 + 327
                 + ((((((((((v1943 + 7 + v756) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                     + 19) & 0xFFFFFFFFFFFFFFF8)
                   + 25) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFF8)
               + 15) & 0xFFFFFFFFFFFFFFF8)
             + 16;
        long long v923 = (void *)(((unint64_t)a1 + v1896 + v922) & v84);
        long long v924 = (const void *)((unint64_t)&a2[v1896 + v922] & v84);
        unint64_t v2069 = v1943 + 7;
        uint64_t v2028 = v923;
        uint64_t v2038 = v1937 + 327;
        if (v116 == v1938)
        {
          int v925 = (*(uint64_t (**)(const void *, uint64_t, uint64_t))(v1970 + 48))(v924, v116, v118);
          goto LABEL_1022;
        }
        unint64_t v931 = ((unint64_t)v924 + v1957) & v2051;
        unint64_t v932 = (v1927 + v931) & v115;
        if (v1939 == v1938)
        {
          if (v1931 == v1939)
          {
            int v925 = (*(uint64_t (**)(unint64_t, void, uint64_t))(v1950 + 48))((v1927 + v931) & v115, v1931, v1949);
            goto LABEL_1022;
          }
          uint64_t v1007 = (unint64_t *)((v1955 + v932) & 0xFFFFFFFFFFFFFFF8);
          if (v1917 <= 0x7FFFFFFE)
          {
            unint64_t v1008 = *v1007;
            goto LABEL_1246;
          }
          int v925 = (*(uint64_t (**)(unint64_t, void, uint64_t))(v1947 + 48))(((unint64_t)v1007 + v1945) & v1889, v1913, v1946);
        }
        else
        {
          size_t v933 = v932 + v2013;
          if ((v1915 & 0x80000000) == 0)
          {
            unint64_t v934 = *(void *)(v933 + 8);
            if (v934 >= 0xFFFFFFFF) {
              LODWORD(v934) = -1;
            }
            if (v934 != -1) {
              goto LABEL_1023;
            }
LABEL_1032:
            unint64_t v931 = ((unint64_t)v924 + v1957) & v2051;
            unint64_t v932 = (v1927 + v931) & v115;
            goto LABEL_1033;
          }
          uint64_t v1009 = (v1965 + ((v2018 + v933) & v1984)) & v2040;
          if (v755 <= 0x7FFFFFFD)
          {
            unint64_t v1008 = *(void *)(((v1912 + ((v1961 + v1009) & v2040)) & 0xFFFFFFFFFFFFFFF8) + 8);
LABEL_1246:
            if (v1008 >= 0xFFFFFFFF) {
              LODWORD(v1008) = -1;
            }
            if ((v1008 + 1) >= 2) {
              goto LABEL_1023;
            }
LABEL_1033:
            v935 = *(void (**)(void *, const void *, uint64_t))(v1970 + 16);
            uint64_t v2004 = v924;
            v935(v923, v924, v118);
            v935((void *)(((unint64_t)v923 + v1957) & v2051), (const void *)v931, v118);
            unint64_t v936 = (v1927 + (((unint64_t)v923 + v1957) & v2051)) & v115;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v1950 + 16))(v936, v932, v1949);
            uint64_t v937 = (void *)((v1955 + v936) & 0xFFFFFFFFFFFFFFF8);
            v938 = (void *)((v1955 + v932) & 0xFFFFFFFFFFFFFFF8);
            *uint64_t v937 = *v938;
            unint64_t v939 = ((unint64_t)v937 + v1945) & v1889;
            unint64_t v940 = ((unint64_t)v938 + v1945) & v1889;
            uint64_t v941 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1947 + 16);
            swift_bridgeObjectRetain();
            v941(v939, v940, v1946);
            unint64_t v942 = (void *)((v1941 + v940) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v943 = (void *)((v1941 + v939) & 0xFFFFFFFFFFFFFFF8);
            *unint64_t v943 = *v942;
            v944 = (void *)(((unint64_t)v943 + 15) & 0xFFFFFFFFFFFFFFF8);
            int v945 = (void *)(((unint64_t)v942 + 15) & 0xFFFFFFFFFFFFFFF8);
            void *v944 = *v945;
            v944[1] = v945[1];
            uint64_t v946 = (void *)(v936 + v2013);
            *uint64_t v946 = *(void *)(v932 + v2013);
            v946[1] = *(void *)(v932 + v2013 + 8);
            size_t v947 = (v2018 + v936 + v2013) & v1984;
            size_t v948 = (v2018 + v932 + v2013) & v1984;
            *(unsigned char *)size_t v947 = *(unsigned char *)v948;
            uint64_t v949 = v947 | 4;
            int v950 = *(_DWORD *)(v948 | 4);
            *(unsigned char *)(v949 + 4) = *(unsigned char *)((v948 | 4) + 4);
            *(_DWORD *)uint64_t v949 = v950;
            *(_WORD *)(v947 + 10) = *(_WORD *)(v948 + 0xA);
            size_t v951 = (v1965 + v947) & v2040;
            size_t v2054 = v948;
            size_t v952 = (v1965 + v948) & v2040;
            v953 = *(void (**)(size_t, size_t, uint64_t))(v1963 + 16);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v953(v951, v952, v1962);
            size_t v954 = (v1961 + v951) & v2040;
            size_t v955 = (v1961 + v952) & v2040;
            v953(v954, v955, v1962);
            unint64_t v956 = (unsigned char *)(v954 + v1966);
            *unint64_t v956 = *(unsigned char *)(v955 + v1966);
            v956[1] = *(unsigned char *)(v955 + v1966 + 1);
            v956[2] = *(unsigned char *)(v955 + v1966 + 2);
            v956[3] = *(unsigned char *)(v955 + v1966 + 3);
            v956[4] = *(unsigned char *)(v955 + v1966 + 4);
            unint64_t v957 = (v954 + v1966 + 12) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v958 = (v955 + v1966 + 12) & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v957 = *(void *)v958;
            *(void *)(v957 + 8) = *(void *)(v958 + 8);
            *(unsigned char *)(v957 + 16) = *(unsigned char *)(v958 + 16);
            *(unsigned char *)(v957 + 17) = *(unsigned char *)(v958 + 17);
            *(unsigned char *)(v957 + 18) = *(unsigned char *)(v958 + 18);
            *(unsigned char *)(v957 + 19) = *(unsigned char *)(v958 + 19);
            unint64_t v959 = (v957 + 27) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v960 = (v958 + 27) & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v959 = *(void *)v960;
            *(unsigned char *)(v959 + 8) = *(unsigned char *)(v960 + 8);
            *(unsigned char *)(v959 + 9) = *(unsigned char *)(v960 + 9);
            *(unsigned char *)(v959 + 10) = *(unsigned char *)(v960 + 10);
            *(unsigned char *)(v959 + 11) = *(unsigned char *)(v960 + 11);
            *(unsigned char *)(v959 + 12) = *(unsigned char *)(v960 + 12);
            unint64_t v961 = (void *)((v958 + 47) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v962 = (void *)((v957 + 47) & 0xFFFFFFFFFFFFFFF8);
            *unint64_t v962 = *v961;
            unint64_t v963 = ((unint64_t)v962 + 15) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v964 = ((unint64_t)v961 + 15) & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v963 = *(void *)v964;
            *(unsigned char *)(v963 + 8) = *(unsigned char *)(v964 + 8);
            *(unsigned char *)(v963 + 9) = *(unsigned char *)(v964 + 9);
            unint64_t v965 = (void *)((v1958 + v963) & v2040);
            unint64_t v966 = (const void *)((v1958 + v964) & v2040);
            v967 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v1963 + 48);
            swift_bridgeObjectRetain();
            if (v967(v966, 1, v1962))
            {
              size_t v929 = __n;
              memcpy(v965, v966, __n);
            }
            else
            {
              v953((size_t)v965, (size_t)v966, v1962);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v1963 + 56))(v965, 0, 1, v1962);
              size_t v929 = __n;
            }
            v968 = (void *)(((unint64_t)v965 + v1959) & 0xFFFFFFFFFFFFFFF8);
            v969 = (void *)(((unint64_t)v966 + v1959) & 0xFFFFFFFFFFFFFFF8);
            void *v968 = *v969;
            unint64_t v970 = ((unint64_t)v968 + 15) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v971 = ((unint64_t)v969 + 15) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v972 = *(void *)v971;
            *(unsigned char *)(v970 + 8) = *(unsigned char *)(v971 + 8);
            *(void *)unint64_t v970 = v972;
            size_t v973 = (void *)(((unint64_t)v968 + 31) & 0xFFFFFFFFFFFFFFF8);
            size_t v974 = (void *)(((unint64_t)v969 + 31) & 0xFFFFFFFFFFFFFFF8);
            *size_t v973 = *v974;
            unint64_t v975 = ((unint64_t)v973 + 15) & 0xFFFFFFFFFFFFFFF8;
            int v976 = (uint64_t *)(((unint64_t)v974 + 15) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v977 = v976[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            size_t v926 = v2020;
            if ((v977 & 0x3000000000000000) != 0)
            {
              *(_OWORD *)unint64_t v975 = *(_OWORD *)v976;
            }
            else
            {
              uint64_t v978 = *v976;
              sub_10001EBB0(*v976, v977);
              *(void *)unint64_t v975 = v978;
              *(void *)(v975 + 8) = v977;
            }
            unint64_t v979 = (v975 + 19) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v980 = ((unint64_t)v976 + 19) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v981 = *(void *)v980;
            *(unsigned char *)(v979 + 8) = *(unsigned char *)(v980 + 8);
            *(void *)unint64_t v979 = v981;
            *(unsigned char *)(v979 + 9) = *(unsigned char *)(v980 + 9);
            unint64_t v982 = (v979 + 13) & 0xFFFFFFFFFFFFFFFCLL;
            unint64_t v983 = (v980 + 13) & 0xFFFFFFFFFFFFFFFCLL;
            int v984 = *(_DWORD *)v983;
            *(unsigned char *)(v982 + 4) = *(unsigned char *)(v983 + 4);
            *(_DWORD *)unint64_t v982 = v984;
            unint64_t v985 = (void *)((v979 + 25) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v986 = (void *)((v980 + 25) & 0xFFFFFFFFFFFFFFF8);
            *unint64_t v985 = *v986;
            v985[1] = v986[1];
            size_t v987 = v947 + v2017;
            v988 = (long long *)(v2054 + v2017);
            unint64_t v989 = *(void *)(v2054 + v2017 + 16);
            if (v989 >= 0xFFFFFFFF) {
              LODWORD(v989) = -1;
            }
            int v990 = v989 - 1;
            swift_bridgeObjectRetain();
            if (v990 < 0)
            {
              *(void *)size_t v987 = *(void *)v988;
              *(unsigned char *)(v987 + 8) = *((unsigned char *)v988 + 8);
              *(unsigned char *)(v987 + 9) = *((unsigned char *)v988 + 9);
              uint64_t v1003 = *((void *)v988 + 2);
              swift_errorRetain();
              *(void *)(v987 + 16) = v1003;
              uint64_t v1004 = *((void *)v988 + 3);
              swift_errorRetain();
              *(void *)(v987 + 24) = v1004;
              *(unsigned char *)(v987 + 32) = *((unsigned char *)v988 + 32);
              *(unsigned char *)(v987 + 33) = *((unsigned char *)v988 + 33);
              *(unsigned char *)(v987 + 34) = *((unsigned char *)v988 + 34);
              *(void *)(v987 + 40) = *((void *)v988 + 5);
              *(void *)(v987 + 48) = *((void *)v988 + 6);
              *(void *)(v987 + 56) = *((void *)v988 + 7);
              *(void *)(v987 + 64) = *((void *)v988 + 8);
              *(unsigned char *)(v987 + 72) = *((unsigned char *)v988 + 72);
              *(void *)(v987 + 80) = *((void *)v988 + 10);
              *(void *)(v987 + 88) = *((void *)v988 + 11);
              size_t v2055 = (void *)*((void *)v988 + 12);
              *(void *)(v987 + 96) = v2055;
              *(unsigned char *)(v987 + 104) = *((unsigned char *)v988 + 104);
              *(unsigned char *)(v987 + 105) = *((unsigned char *)v988 + 105);
              *(void *)(v987 + 112) = *((void *)v988 + 14);
              *(void *)(v987 + 120) = *((void *)v988 + 15);
              *(void *)(v987 + 128) = *((void *)v988 + 16);
              *(void *)(v987 + 136) = *((void *)v988 + 17);
              *(void *)(v987 + 144) = *((void *)v988 + 18);
              *(void *)(v987 + 152) = *((void *)v988 + 19);
              *(void *)(v987 + 160) = *((void *)v988 + 20);
              *(void *)(v987 + 168) = *((void *)v988 + 21);
              *(unsigned char *)(v987 + 176) = *((unsigned char *)v988 + 176);
              *(void *)(v987 + 184) = *((void *)v988 + 23);
              uint64_t v1005 = *((void *)v988 + 24);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              id v1006 = v2055;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (v1005)
              {
                *(void *)(v987 + 192) = v1005;
                *(void *)(v987 + 200) = *((void *)v988 + 25);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
              }
              else
              {
                *(_OWORD *)(v987 + 192) = v988[12];
              }
              size_t v929 = __n;
              size_t v926 = v2020;
              uint64_t v927 = v1972;
              unint64_t v928 = v1995 + 2;
              *(void *)(v987 + 208) = *((void *)v988 + 26);
              *(void *)(v987 + 216) = *((void *)v988 + 27);
              *(void *)(v987 + 224) = *((void *)v988 + 28);
              *(void *)(v987 + 232) = *((void *)v988 + 29);
              *(void *)(v987 + 240) = *((void *)v988 + 30);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }
            else
            {
              long long v991 = *v988;
              long long v992 = v988[1];
              long long v993 = v988[3];
              *(_OWORD *)(v987 + 32) = v988[2];
              *(_OWORD *)(v987 + 48) = v993;
              *(_OWORD *)size_t v987 = v991;
              *(_OWORD *)(v987 + 16) = v992;
              long long v994 = v988[4];
              long long v995 = v988[5];
              long long v996 = v988[7];
              *(_OWORD *)(v987 + 96) = v988[6];
              *(_OWORD *)(v987 + 112) = v996;
              *(_OWORD *)(v987 + 64) = v994;
              *(_OWORD *)(v987 + 80) = v995;
              long long v997 = v988[8];
              long long v998 = v988[9];
              long long v999 = v988[11];
              *(_OWORD *)(v987 + 160) = v988[10];
              *(_OWORD *)(v987 + 176) = v999;
              *(_OWORD *)(v987 + 128) = v997;
              *(_OWORD *)(v987 + 144) = v998;
              long long v1000 = v988[12];
              long long v1001 = v988[13];
              long long v1002 = v988[14];
              *(void *)(v987 + 240) = *((void *)v988 + 30);
              *(_OWORD *)(v987 + 208) = v1001;
              *(_OWORD *)(v987 + 224) = v1002;
              *(_OWORD *)(v987 + 192) = v1000;
              uint64_t v927 = v1972;
              unint64_t v928 = v1995 + 2;
            }
            unint64_t v1114 = (_OWORD *)((v987 + 255) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v1115 = (long long *)(((unint64_t)v988 + 255) & 0xFFFFFFFFFFFFFFF8);
            long long v1116 = *v1115;
            *(_OWORD *)((char *)v1114 + 9) = *(long long *)((char *)v1115 + 9);
            *unint64_t v1114 = v1116;
            unint64_t v1117 = (v987 + 287) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1118 = ((unint64_t)v988 + 287) & 0xFFFFFFFFFFFFFFF8;
            long long v1119 = *(_OWORD *)v1118;
            *(unsigned char *)(v1117 + 16) = *(unsigned char *)(v1118 + 16);
            *(_OWORD *)unint64_t v1117 = v1119;
            v1120 = (void *)((v987 + 311) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1121 = ((unint64_t)v988 + 311) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v1122 = *(void *)v1121;
            v1121 += 15;
            void *v1120 = v1122;
            unint64_t v1123 = (void *)(((unint64_t)v1120 + 15) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v1124 = *(void *)(v1121 & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1125 = *(void *)((v1121 & 0xFFFFFFFFFFFFFFF8) + 8);
            sub_10018B584(v1124, v1125);
            *unint64_t v1123 = v1124;
            v1123[1] = v1125;
            size_t v930 = v1966;
            long long v924 = v2004;
            size_t v754 = v2010;
            if (v1944) {
              goto LABEL_1087;
            }
            goto LABEL_1024;
          }
          int v925 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1963 + 48))(v1009, v755, v1962);
        }
LABEL_1022:
        if (v925)
        {
LABEL_1023:
          memcpy(v923, v924, v754);
          size_t v926 = v2020;
          uint64_t v927 = v1972;
          unint64_t v928 = v1995 + 2;
          size_t v929 = __n;
LABEL_1024:
          size_t v930 = v929;
LABEL_1087:
          unint64_t v1126 = ((((v2038
                    + ((((((((((v2069 + v930) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                        + 19) & 0xFFFFFFFFFFFFFFF8)
                      + 25) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFF8)
                  + 15) & 0xFFFFFFFFFFFFFFF8)
                + 16;
          *(void *)(((unint64_t)v2028 + v1126) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v924
                                                                                             + v1126) & 0xFFFFFFFFFFFFFFF8);
          unint64_t v1127 = ((v1935
                  + ((v1896
                    + ((((v2038
                        + ((((((((((v2069 + v929) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                            + 19) & 0xFFFFFFFFFFFFFFF8)
                          + 25) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFF8)
                      + 15) & 0xFFFFFFFFFFFFFFF8)
                    + 16) & v927)) & 0xFFFFFFFFFFFFFFF8)
                + 8;
          if (v1127 <= v1992) {
            unint64_t v1127 = v1992;
          }
          if (v1933 > v1127) {
            unint64_t v1127 = v1933;
          }
          if (v754 > v1127) {
            unint64_t v1127 = v754;
          }
          if (v1893 > v1127) {
            unint64_t v1127 = v1893;
          }
          if (v926 > v1127) {
            unint64_t v1127 = v926;
          }
          if (v928 > v1127) {
            unint64_t v1127 = v928;
          }
          if (v1981 > v1127) {
            unint64_t v1127 = ((v1982 + 9) & 0xFFFFFFFFFFFFFFF8) + 8;
          }
          if (v1891 > v1127) {
            unint64_t v1127 = v1982 + 2;
          }
          if (v1920 > v1127) {
            unint64_t v1127 = (v1982 & 0xFFFFFFFFFFFFFFF8) + 16;
          }
          if (v1127 <= v926) {
            unint64_t v1127 = v926;
          }
          if (v1127 <= v1993) {
            unint64_t v1127 = v1993;
          }
          if (v1127 <= v1921) {
            unint64_t v1127 = v1921;
          }
          if (v1127 <= v926) {
            unint64_t v1127 = v926;
          }
          if (v1127 <= v1934) {
            unint64_t v1127 = v1934;
          }
          if (v1127 <= v1891) {
            unint64_t v1127 = v1982 + 2;
          }
          if (v1127 <= v926) {
            unint64_t v1127 = v926;
          }
          if (v1127 <= v1995) {
            unint64_t v1127 = v1995;
          }
          if (v1127 <= v926) {
            unint64_t v1127 = v926;
          }
          if (v1127 <= v1922) {
            unint64_t v1127 = v1922;
          }
          if (v1127 <= v1891) {
            unint64_t v1127 = v1982 + 2;
          }
          if (v1127 <= v926) {
            unint64_t v1127 = v926;
          }
          if (v1127 <= 0x38) {
            unint64_t v1127 = 56;
          }
          if (v1127 > 3) {
            goto LABEL_1132;
          }
          unsigned int v1129 = ((1 << (8 * v1127)) + 5) >> (8 * v1127);
          if (v1129 <= 0xFFD6)
          {
            if (v1129 <= 0xD6)
            {
LABEL_1132:
              char v1128 = 5;
LABEL_1186:
              *((unsigned char *)a1 + v1127) = v1128;
              return a1;
            }
            __int16 v1130 = 5;
LABEL_1190:
            *(_WORD *)((char *)a1 + v1127) = v1130;
            return a1;
          }
          int v1131 = 5;
LABEL_1192:
          *(_DWORD *)((char *)a1 + v1127) = v1131;
          return a1;
        }
        goto LABEL_1032;
      }
      unint64_t v121 = v72;
      uint64_t v123 = v2060;
      unint64_t v389 = (unint64_t)&v72[v1957] & v2051;
      unint64_t v390 = (v389 + v2001 + v2060) & v80;
      uint64_t v118 = AssociatedTypeWitness;
      uint64_t v117 = v1970;
      if (v1939 == v1938)
      {
        size_t v122 = __n;
        if (v1931 == v1939)
        {
          unint64_t v391 = *(uint64_t (**)(unint64_t))(v1950 + 48);
          unint64_t v392 = (v389 + v2001 + v2060) & v115;
LABEL_982:
          BOOL v753 = v72;
          int v120 = v391(v392);
          uint64_t v123 = v2060;
          unint64_t v121 = v753;
          goto LABEL_983;
        }
        uint64_t v617 = (unint64_t *)((v1955 + v390) & 0xFFFFFFFFFFFFFFF8);
        if (v1917 > 0x7FFFFFFE)
        {
          unint64_t v392 = ((unint64_t)v617 + v1945) & v81;
          unint64_t v391 = *(uint64_t (**)(unint64_t))(v1947 + 48);
          goto LABEL_982;
        }
        unint64_t v618 = *v617;
      }
      else
      {
        size_t v494 = v2013 + v390;
        size_t v122 = __n;
        if ((v1915 & 0x80000000) == 0)
        {
          unint64_t v495 = *(void *)(v494 + 8);
          if (v495 >= 0xFFFFFFFF) {
            LODWORD(v495) = -1;
          }
          int v120 = v495 + 1;
          goto LABEL_983;
        }
        unint64_t v392 = (v1965 + ((v2018 + v494) & v1984)) & v83;
        if (v1944 > 0x7FFFFFFD)
        {
          unint64_t v391 = *(uint64_t (**)(unint64_t))(v1963 + 48);
          goto LABEL_982;
        }
        unint64_t v618 = *(void *)(((v1912 + ((v1961 + v392) & v83)) & 0xFFFFFFFFFFFFFFF8) + 8);
      }
      if (v618 >= 0xFFFFFFFF) {
        LODWORD(v618) = -1;
      }
      if ((v618 + 1) >= 2) {
        goto LABEL_984;
      }
      goto LABEL_987;
    case 6u:
      uint64_t v124 = ~v1976;
      uint64_t v125 = ~v33;
      uint64_t v2061 = ~v1990;
      uint64_t v1985 = ~v2039;
      unint64_t v2002 = ((((v1942 + ((v36 + 8 + (v1960 & 0xFFFFFFFFFFFFFFF8)) & ~v36)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
            + 16;
      size_t v1894 = v40;
      uint64_t v1897 = v33;
      unsigned int v126 = v1930;
      unsigned int v127 = v1929;
      unint64_t v1892 = v1982 + 2;
      uint64_t v1977 = ~v36;
      uint64_t v1886 = ~v1987;
      uint64_t v1887 = ~v37;
      if (v1930 == v1929)
      {
        uint64_t v128 = v2027;
        unint64_t v129 = v72;
        int v130 = (*(uint64_t (**)(void))(v2027 + 48))();
        uint64_t v85 = ~v37;
        uint64_t v131 = v129;
        uint64_t v132 = v125;
        uint64_t v133 = v124;
LABEL_1001:
        if (v130)
        {
LABEL_1002:
          memcpy(a1, v131, v1894);
          size_t v832 = __n;
LABEL_1003:
          size_t v833 = v832;
          goto LABEL_1053;
        }
        unint64_t v393 = (unint64_t)&v131[v1956] & v2061;
        unint64_t v394 = (v393 + v1998 + v37) & v85;
LABEL_1005:
        uint64_t v1973 = v132;
        unint64_t v834 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v128 + 16);
        uint64_t v835 = v85;
        v834(a1, v131, v1969);
        unint64_t v836 = ((unint64_t)a1 + v1956) & v2061;
        v834((void *)v836, (unsigned __int8 *)v393, v1969);
        unint64_t v837 = (v836 + v1998 + v37) & v835;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v1952 + 16))(v837, v394, v1951);
        long long v838 = (void *)((v1960 + v837) & 0xFFFFFFFFFFFFFFF8);
        long long v839 = (void *)((v1960 + v394) & 0xFFFFFFFFFFFFFFF8);
        *long long v838 = *v839;
        unint64_t v840 = ((unint64_t)v838 + v1954) & v1977;
        unint64_t v841 = ((unint64_t)v839 + v1954) & v1977;
        long long v842 = (void (*)(unint64_t, unint64_t, uint64_t))v1953[2];
        swift_bridgeObjectRetain();
        v842(v840, v841, v1948);
        long long v843 = (void *)((v1942 + v841) & 0xFFFFFFFFFFFFFFF8);
        long long v844 = (void *)((v1942 + v840) & 0xFFFFFFFFFFFFFFF8);
        *long long v844 = *v843;
        long long v845 = (void *)(((unint64_t)v844 + 15) & 0xFFFFFFFFFFFFFFF8);
        long long v846 = (void *)(((unint64_t)v843 + 15) & 0xFFFFFFFFFFFFFFF8);
        *long long v845 = *v846;
        v845[1] = v846[1];
        long long v847 = (void *)(v2002 + v837);
        *long long v847 = *(void *)(v2002 + v394);
        v847[1] = *(void *)(v2002 + v394 + 8);
        unint64_t v848 = (v2018 + v2002 + v837) & v1985;
        unint64_t v849 = (v2018 + v2002 + v394) & v1985;
        *(unsigned char *)unint64_t v848 = *(unsigned char *)v849;
        uint64_t v850 = v848 | 4;
        int v851 = *(_DWORD *)(v849 | 4);
        *(unsigned char *)(v850 + 4) = *(unsigned char *)((v849 | 4) + 4);
        *(_DWORD *)uint64_t v850 = v851;
        *(_WORD *)(v848 + 10) = *(_WORD *)(v849 + 0xA);
        unint64_t v852 = (v1965 + v848) & v133;
        unint64_t v2052 = v849;
        unint64_t v853 = (v1965 + v849) & v133;
        uint64_t v854 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1963 + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v854(v852, v853, v1962);
        unint64_t v855 = (v1961 + v852) & v133;
        unint64_t v856 = (v1961 + v853) & v133;
        v854(v855, v856, v1962);
        unint64_t v857 = (unsigned char *)(v855 + v1966);
        *unint64_t v857 = *(unsigned char *)(v856 + v1966);
        v857[1] = *(unsigned char *)(v856 + v1966 + 1);
        v857[2] = *(unsigned char *)(v856 + v1966 + 2);
        v857[3] = *(unsigned char *)(v856 + v1966 + 3);
        v857[4] = *(unsigned char *)(v856 + v1966 + 4);
        unint64_t v858 = (v855 + v1966 + 12) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v859 = (v856 + v1966 + 12) & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v858 = *(void *)v859;
        *(void *)(v858 + 8) = *(void *)(v859 + 8);
        *(unsigned char *)(v858 + 16) = *(unsigned char *)(v859 + 16);
        *(unsigned char *)(v858 + 17) = *(unsigned char *)(v859 + 17);
        *(unsigned char *)(v858 + 18) = *(unsigned char *)(v859 + 18);
        *(unsigned char *)(v858 + 19) = *(unsigned char *)(v859 + 19);
        unint64_t v860 = (v858 + 27) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v861 = (v859 + 27) & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v860 = *(void *)v861;
        *(unsigned char *)(v860 + 8) = *(unsigned char *)(v861 + 8);
        *(unsigned char *)(v860 + 9) = *(unsigned char *)(v861 + 9);
        *(unsigned char *)(v860 + 10) = *(unsigned char *)(v861 + 10);
        *(unsigned char *)(v860 + 11) = *(unsigned char *)(v861 + 11);
        *(unsigned char *)(v860 + 12) = *(unsigned char *)(v861 + 12);
        unint64_t v862 = (void *)((v859 + 47) & 0xFFFFFFFFFFFFFFF8);
        v863 = (void *)((v858 + 47) & 0xFFFFFFFFFFFFFFF8);
        void *v863 = *v862;
        unint64_t v864 = ((unint64_t)v863 + 15) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v865 = ((unint64_t)v862 + 15) & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v864 = *(void *)v865;
        *(unsigned char *)(v864 + 8) = *(unsigned char *)(v865 + 8);
        *(unsigned char *)(v864 + 9) = *(unsigned char *)(v865 + 9);
        v866 = (void *)((v1958 + v864) & v133);
        uint64_t v2043 = v133;
        v867 = (const void *)((v1958 + v865) & v133);
        v868 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v1963 + 48);
        swift_bridgeObjectRetain();
        unint64_t v869 = v848;
        if (v868(v867, 1, v1962))
        {
          size_t v832 = __n;
          memcpy(v866, v867, __n);
        }
        else
        {
          v854((unint64_t)v866, (unint64_t)v867, v1962);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v1963 + 56))(v866, 0, 1, v1962);
          size_t v832 = __n;
        }
        unint64_t v870 = (void *)(((unint64_t)v866 + v1959) & 0xFFFFFFFFFFFFFFF8);
        uint64_t v871 = (void *)(((unint64_t)v867 + v1959) & 0xFFFFFFFFFFFFFFF8);
        *unint64_t v870 = *v871;
        unint64_t v872 = ((unint64_t)v870 + 15) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v873 = ((unint64_t)v871 + 15) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v874 = *(void *)v873;
        *(unsigned char *)(v872 + 8) = *(unsigned char *)(v873 + 8);
        *(void *)unint64_t v872 = v874;
        v875 = (void *)(((unint64_t)v870 + 31) & 0xFFFFFFFFFFFFFFF8);
        unint64_t v876 = (void *)(((unint64_t)v871 + 31) & 0xFFFFFFFFFFFFFFF8);
        void *v875 = *v876;
        unint64_t v877 = ((unint64_t)v875 + 15) & 0xFFFFFFFFFFFFFFF8;
        v878 = (uint64_t *)(((unint64_t)v876 + 15) & 0xFFFFFFFFFFFFFFF8);
        unint64_t v879 = v878[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v880 = v133;
        if ((v879 & 0x3000000000000000) != 0)
        {
          *(_OWORD *)unint64_t v877 = *(_OWORD *)v878;
        }
        else
        {
          uint64_t v881 = *v878;
          sub_10001EBB0(*v878, v879);
          *(void *)unint64_t v877 = v881;
          *(void *)(v877 + 8) = v879;
        }
        unint64_t v882 = (v877 + 19) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v883 = ((unint64_t)v878 + 19) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v884 = *(void *)v883;
        *(unsigned char *)(v882 + 8) = *(unsigned char *)(v883 + 8);
        *(void *)unint64_t v882 = v884;
        *(unsigned char *)(v882 + 9) = *(unsigned char *)(v883 + 9);
        unint64_t v885 = (v882 + 13) & 0xFFFFFFFFFFFFFFFCLL;
        unint64_t v886 = (v883 + 13) & 0xFFFFFFFFFFFFFFFCLL;
        int v887 = *(_DWORD *)v886;
        *(unsigned char *)(v885 + 4) = *(unsigned char *)(v886 + 4);
        *(_DWORD *)unint64_t v885 = v887;
        v888 = (void *)((v882 + 25) & 0xFFFFFFFFFFFFFFF8);
        v889 = (void *)((v883 + 25) & 0xFFFFFFFFFFFFFFF8);
        void *v888 = *v889;
        v888[1] = v889[1];
        unint64_t v890 = v869 + v2017;
        v891 = (long long *)(v2052 + v2017);
        unint64_t v892 = *(void *)(v2052 + v2017 + 16);
        if (v892 >= 0xFFFFFFFF) {
          LODWORD(v892) = -1;
        }
        int v893 = v892 - 1;
        swift_bridgeObjectRetain();
        if (v893 < 0)
        {
          *(void *)unint64_t v890 = *(void *)v891;
          *(unsigned char *)(v890 + 8) = *((unsigned char *)v891 + 8);
          *(unsigned char *)(v890 + 9) = *((unsigned char *)v891 + 9);
          uint64_t v906 = *((void *)v891 + 2);
          swift_errorRetain();
          *(void *)(v890 + 16) = v906;
          uint64_t v907 = *((void *)v891 + 3);
          swift_errorRetain();
          *(void *)(v890 + 24) = v907;
          *(unsigned char *)(v890 + 32) = *((unsigned char *)v891 + 32);
          *(unsigned char *)(v890 + 33) = *((unsigned char *)v891 + 33);
          *(unsigned char *)(v890 + 34) = *((unsigned char *)v891 + 34);
          *(void *)(v890 + 40) = *((void *)v891 + 5);
          *(void *)(v890 + 48) = *((void *)v891 + 6);
          *(void *)(v890 + 56) = *((void *)v891 + 7);
          *(void *)(v890 + 64) = *((void *)v891 + 8);
          *(unsigned char *)(v890 + 72) = *((unsigned char *)v891 + 72);
          *(void *)(v890 + 80) = *((void *)v891 + 10);
          *(void *)(v890 + 88) = *((void *)v891 + 11);
          unint64_t v2053 = (void *)*((void *)v891 + 12);
          *(void *)(v890 + 96) = v2053;
          *(unsigned char *)(v890 + 104) = *((unsigned char *)v891 + 104);
          *(unsigned char *)(v890 + 105) = *((unsigned char *)v891 + 105);
          *(void *)(v890 + 112) = *((void *)v891 + 14);
          *(void *)(v890 + 120) = *((void *)v891 + 15);
          *(void *)(v890 + 128) = *((void *)v891 + 16);
          *(void *)(v890 + 136) = *((void *)v891 + 17);
          *(void *)(v890 + 144) = *((void *)v891 + 18);
          *(void *)(v890 + 152) = *((void *)v891 + 19);
          *(void *)(v890 + 160) = *((void *)v891 + 20);
          *(void *)(v890 + 168) = *((void *)v891 + 21);
          *(unsigned char *)(v890 + 176) = *((unsigned char *)v891 + 176);
          *(void *)(v890 + 184) = *((void *)v891 + 23);
          uint64_t v908 = *((void *)v891 + 24);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v909 = v2053;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v908)
          {
            *(void *)(v890 + 192) = v908;
            *(void *)(v890 + 200) = *((void *)v891 + 25);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            *(_OWORD *)(v890 + 192) = v891[12];
          }
          size_t v832 = __n;
          uint64_t v880 = v2043;
          *(void *)(v890 + 208) = *((void *)v891 + 26);
          *(void *)(v890 + 216) = *((void *)v891 + 27);
          *(void *)(v890 + 224) = *((void *)v891 + 28);
          *(void *)(v890 + 232) = *((void *)v891 + 29);
          *(void *)(v890 + 240) = *((void *)v891 + 30);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v894 = *v891;
          long long v895 = v891[1];
          long long v896 = v891[3];
          *(_OWORD *)(v890 + 32) = v891[2];
          *(_OWORD *)(v890 + 48) = v896;
          *(_OWORD *)unint64_t v890 = v894;
          *(_OWORD *)(v890 + 16) = v895;
          long long v897 = v891[4];
          long long v898 = v891[5];
          long long v899 = v891[7];
          *(_OWORD *)(v890 + 96) = v891[6];
          *(_OWORD *)(v890 + 112) = v899;
          *(_OWORD *)(v890 + 64) = v897;
          *(_OWORD *)(v890 + 80) = v898;
          long long v900 = v891[8];
          long long v901 = v891[9];
          long long v902 = v891[11];
          *(_OWORD *)(v890 + 160) = v891[10];
          *(_OWORD *)(v890 + 176) = v902;
          *(_OWORD *)(v890 + 128) = v900;
          *(_OWORD *)(v890 + 144) = v901;
          long long v903 = v891[12];
          long long v904 = v891[13];
          long long v905 = v891[14];
          *(void *)(v890 + 240) = *((void *)v891 + 30);
          *(_OWORD *)(v890 + 208) = v904;
          *(_OWORD *)(v890 + 224) = v905;
          *(_OWORD *)(v890 + 192) = v903;
        }
        int v1010 = (_OWORD *)((v890 + 255) & 0xFFFFFFFFFFFFFFF8);
        v1011 = (long long *)(((unint64_t)v891 + 255) & 0xFFFFFFFFFFFFFFF8);
        long long v1012 = *v1011;
        *(_OWORD *)((char *)v1010 + 9) = *(long long *)((char *)v1011 + 9);
        *int v1010 = v1012;
        unint64_t v1013 = (v890 + 287) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v1014 = ((unint64_t)v891 + 287) & 0xFFFFFFFFFFFFFFF8;
        long long v1015 = *(_OWORD *)v1014;
        *(unsigned char *)(v1013 + 16) = *(unsigned char *)(v1014 + 16);
        *(_OWORD *)unint64_t v1013 = v1015;
        int v1016 = (void *)((v890 + 311) & 0xFFFFFFFFFFFFFFF8);
        unint64_t v1017 = ((unint64_t)v891 + 311) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v1018 = *(void *)v1017;
        v1017 += 15;
        *int v1016 = v1018;
        long long v1019 = (void *)(((unint64_t)v1016 + 15) & 0xFFFFFFFFFFFFFFF8);
        uint64_t v1020 = *(void *)(v1017 & 0xFFFFFFFFFFFFFFF8);
        unint64_t v1021 = *(void *)((v1017 & 0xFFFFFFFFFFFFFFF8) + 8);
        sub_10018B584(v1020, v1021);
        *long long v1019 = v1020;
        v1019[1] = v1021;
        size_t v833 = v1966;
        uint64_t v128 = v2027;
        uint64_t v133 = v880;
        uint64_t v132 = v1973;
        unsigned int v126 = v1930;
        unsigned int v127 = v1929;
        if (!v1944) {
          goto LABEL_1003;
        }
LABEL_1053:
        unint64_t v1022 = v1943 + 7;
        unint64_t v1023 = ((((v1926
                  + 327
                  + ((((((((((v1943 + 7 + v833) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                      + 19) & 0xFFFFFFFFFFFFFFF8)
                    + 25) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFF8)
                + 15) & 0xFFFFFFFFFFFFFFF8)
              + 16;
        long long v1024 = (void *)(((unint64_t)a1 + v1987 + v1023) & v1886);
        uint64_t v2014 = v1024;
        v2056 = (const void *)((unint64_t)&a2[v1987 + v1023] & v1886);
        if (v126 == v127)
        {
          int v1025 = (*(uint64_t (**)(void))(v128 + 48))();
          uint64_t v1026 = v1887;
LABEL_1068:
          if (v1025)
          {
LABEL_1069:
            long long v1035 = v2056;
            size_t v1036 = v1894;
            memcpy(v1024, v2056, v1894);
            uint64_t v1037 = v1937;
            size_t v1038 = v2020;
            goto LABEL_1070;
          }
          unint64_t v1027 = ((unint64_t)v2056 + v1956) & v2061;
          unint64_t v1028 = (v1928 + v1027) & v1026;
LABEL_1072:
          uint64_t v1974 = v132;
          unint64_t v1040 = *(void (**)(void *, const void *, uint64_t))(v128 + 16);
          uint64_t v1041 = v1026;
          v1040(v1024, v2056, v1969);
          uint64_t v1042 = v133;
          v1040((void *)(((unint64_t)v1024 + v1956) & v2061), (const void *)v1027, v1969);
          unint64_t v1043 = (v1928 + (((unint64_t)v1024 + v1956) & v2061)) & v1041;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v1952 + 16))(v1043, v1028, v1951);
          unint64_t v1044 = (void *)((v1960 + v1043) & 0xFFFFFFFFFFFFFFF8);
          unint64_t v1045 = (void *)((v1960 + v1028) & 0xFFFFFFFFFFFFFFF8);
          *unint64_t v1044 = *v1045;
          unint64_t v1046 = ((unint64_t)v1044 + v1954) & v1977;
          unint64_t v1047 = ((unint64_t)v1045 + v1954) & v1977;
          int v1048 = (void (*)(unint64_t, unint64_t, uint64_t))v1953[2];
          swift_bridgeObjectRetain();
          v1048(v1046, v1047, v1948);
          uint64_t v1049 = (void *)((v1942 + v1047) & 0xFFFFFFFFFFFFFFF8);
          unint64_t v1050 = (void *)((v1942 + v1046) & 0xFFFFFFFFFFFFFFF8);
          *unint64_t v1050 = *v1049;
          unint64_t v1051 = (void *)(((unint64_t)v1050 + 15) & 0xFFFFFFFFFFFFFFF8);
          unint64_t v1052 = (void *)(((unint64_t)v1049 + 15) & 0xFFFFFFFFFFFFFFF8);
          *unint64_t v1051 = *v1052;
          v1051[1] = v1052[1];
          unint64_t v1053 = (void *)(v1043 + v2002);
          *unint64_t v1053 = *(void *)(v1028 + v2002);
          v1053[1] = *(void *)(v1028 + v2002 + 8);
          unint64_t v1054 = (v2018 + v1043 + v2002) & v1985;
          unint64_t v1055 = (v2018 + v1028 + v2002) & v1985;
          *(unsigned char *)unint64_t v1054 = *(unsigned char *)v1055;
          uint64_t v1056 = v1054 | 4;
          int v1057 = *(_DWORD *)(v1055 | 4);
          *(unsigned char *)(v1056 + 4) = *(unsigned char *)((v1055 | 4) + 4);
          *(_DWORD *)uint64_t v1056 = v1057;
          *(_WORD *)(v1054 + 10) = *(_WORD *)(v1055 + 0xA);
          unint64_t v1058 = (v1965 + v1054) & v1042;
          unint64_t v2070 = v1055;
          unint64_t v1059 = (v1965 + v1055) & v1042;
          unint64_t v1060 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1963 + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v1060(v1058, v1059, v1962);
          unint64_t v1061 = (v1961 + v1058) & v1042;
          unint64_t v1062 = (v1961 + v1059) & v1042;
          v1060(v1061, v1062, v1962);
          uint64_t v1063 = (unsigned char *)(v1061 + v1966);
          *uint64_t v1063 = *(unsigned char *)(v1062 + v1966);
          v1063[1] = *(unsigned char *)(v1062 + v1966 + 1);
          v1063[2] = *(unsigned char *)(v1062 + v1966 + 2);
          v1063[3] = *(unsigned char *)(v1062 + v1966 + 3);
          v1063[4] = *(unsigned char *)(v1062 + v1966 + 4);
          unint64_t v1064 = (v1061 + v1966 + 12) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v1065 = (v1062 + v1966 + 12) & 0xFFFFFFFFFFFFFFF8;
          *(void *)unint64_t v1064 = *(void *)v1065;
          *(void *)(v1064 + 8) = *(void *)(v1065 + 8);
          *(unsigned char *)(v1064 + 16) = *(unsigned char *)(v1065 + 16);
          *(unsigned char *)(v1064 + 17) = *(unsigned char *)(v1065 + 17);
          *(unsigned char *)(v1064 + 18) = *(unsigned char *)(v1065 + 18);
          *(unsigned char *)(v1064 + 19) = *(unsigned char *)(v1065 + 19);
          unint64_t v1066 = (v1064 + 27) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v1067 = (v1065 + 27) & 0xFFFFFFFFFFFFFFF8;
          *(void *)unint64_t v1066 = *(void *)v1067;
          *(unsigned char *)(v1066 + 8) = *(unsigned char *)(v1067 + 8);
          *(unsigned char *)(v1066 + 9) = *(unsigned char *)(v1067 + 9);
          *(unsigned char *)(v1066 + 10) = *(unsigned char *)(v1067 + 10);
          *(unsigned char *)(v1066 + 11) = *(unsigned char *)(v1067 + 11);
          *(unsigned char *)(v1066 + 12) = *(unsigned char *)(v1067 + 12);
          unint64_t v1068 = (void *)((v1065 + 47) & 0xFFFFFFFFFFFFFFF8);
          unint64_t v1069 = (void *)((v1064 + 47) & 0xFFFFFFFFFFFFFFF8);
          *unint64_t v1069 = *v1068;
          unint64_t v1070 = ((unint64_t)v1069 + 15) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v1071 = ((unint64_t)v1068 + 15) & 0xFFFFFFFFFFFFFFF8;
          *(void *)unint64_t v1070 = *(void *)v1071;
          *(unsigned char *)(v1070 + 8) = *(unsigned char *)(v1071 + 8);
          *(unsigned char *)(v1070 + 9) = *(unsigned char *)(v1071 + 9);
          v1072 = (void *)((v1958 + v1070) & v1042);
          unint64_t v1073 = (const void *)((v1958 + v1071) & v1042);
          unint64_t v1074 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v1963 + 48);
          swift_bridgeObjectRetain();
          if (v1074(v1073, 1, v1962))
          {
            size_t v832 = __n;
            memcpy(v1072, v1073, __n);
          }
          else
          {
            v1060((unint64_t)v1072, (unint64_t)v1073, v1962);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v1963 + 56))(v1072, 0, 1, v1962);
            size_t v832 = __n;
          }
          v1075 = (void *)(((unint64_t)v1072 + v1959) & 0xFFFFFFFFFFFFFFF8);
          v1076 = (void *)(((unint64_t)v1073 + v1959) & 0xFFFFFFFFFFFFFFF8);
          void *v1075 = *v1076;
          unint64_t v1077 = ((unint64_t)v1075 + 15) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v1078 = ((unint64_t)v1076 + 15) & 0xFFFFFFFFFFFFFFF8;
          uint64_t v1079 = *(void *)v1078;
          *(unsigned char *)(v1077 + 8) = *(unsigned char *)(v1078 + 8);
          *(void *)unint64_t v1077 = v1079;
          v1080 = (void *)(((unint64_t)v1075 + 31) & 0xFFFFFFFFFFFFFFF8);
          unint64_t v1081 = (void *)(((unint64_t)v1076 + 31) & 0xFFFFFFFFFFFFFFF8);
          void *v1080 = *v1081;
          unint64_t v1082 = ((unint64_t)v1080 + 15) & 0xFFFFFFFFFFFFFFF8;
          uint64_t v1083 = (uint64_t *)(((unint64_t)v1081 + 15) & 0xFFFFFFFFFFFFFFF8);
          unint64_t v1084 = v1083[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          size_t v1038 = v2020;
          if ((v1084 & 0x3000000000000000) != 0)
          {
            *(_OWORD *)unint64_t v1082 = *(_OWORD *)v1083;
          }
          else
          {
            uint64_t v1085 = *v1083;
            sub_10001EBB0(*v1083, v1084);
            *(void *)unint64_t v1082 = v1085;
            *(void *)(v1082 + 8) = v1084;
          }
          unint64_t v1086 = (v1082 + 19) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v1087 = ((unint64_t)v1083 + 19) & 0xFFFFFFFFFFFFFFF8;
          uint64_t v1088 = *(void *)v1087;
          *(unsigned char *)(v1086 + 8) = *(unsigned char *)(v1087 + 8);
          *(void *)unint64_t v1086 = v1088;
          *(unsigned char *)(v1086 + 9) = *(unsigned char *)(v1087 + 9);
          unint64_t v1089 = (v1086 + 13) & 0xFFFFFFFFFFFFFFFCLL;
          unint64_t v1090 = (v1087 + 13) & 0xFFFFFFFFFFFFFFFCLL;
          int v1091 = *(_DWORD *)v1090;
          *(unsigned char *)(v1089 + 4) = *(unsigned char *)(v1090 + 4);
          *(_DWORD *)unint64_t v1089 = v1091;
          unint64_t v1092 = (void *)((v1086 + 25) & 0xFFFFFFFFFFFFFFF8);
          unint64_t v1093 = (void *)((v1087 + 25) & 0xFFFFFFFFFFFFFFF8);
          *unint64_t v1092 = *v1093;
          v1092[1] = v1093[1];
          unint64_t v1094 = v1054 + v2017;
          v1095 = (long long *)(v2070 + v2017);
          unint64_t v1096 = *(void *)(v2070 + v2017 + 16);
          if (v1096 >= 0xFFFFFFFF) {
            LODWORD(v1096) = -1;
          }
          int v1097 = v1096 - 1;
          swift_bridgeObjectRetain();
          if (v1097 < 0)
          {
            *(void *)unint64_t v1094 = *(void *)v1095;
            *(unsigned char *)(v1094 + 8) = *((unsigned char *)v1095 + 8);
            *(unsigned char *)(v1094 + 9) = *((unsigned char *)v1095 + 9);
            uint64_t v1110 = *((void *)v1095 + 2);
            swift_errorRetain();
            *(void *)(v1094 + 16) = v1110;
            uint64_t v1111 = *((void *)v1095 + 3);
            swift_errorRetain();
            *(void *)(v1094 + 24) = v1111;
            *(unsigned char *)(v1094 + 32) = *((unsigned char *)v1095 + 32);
            *(unsigned char *)(v1094 + 33) = *((unsigned char *)v1095 + 33);
            *(unsigned char *)(v1094 + 34) = *((unsigned char *)v1095 + 34);
            *(void *)(v1094 + 40) = *((void *)v1095 + 5);
            *(void *)(v1094 + 48) = *((void *)v1095 + 6);
            *(void *)(v1094 + 56) = *((void *)v1095 + 7);
            *(void *)(v1094 + 64) = *((void *)v1095 + 8);
            *(unsigned char *)(v1094 + 72) = *((unsigned char *)v1095 + 72);
            *(void *)(v1094 + 80) = *((void *)v1095 + 10);
            *(void *)(v1094 + 88) = *((void *)v1095 + 11);
            unint64_t v2071 = (void *)*((void *)v1095 + 12);
            *(void *)(v1094 + 96) = v2071;
            *(unsigned char *)(v1094 + 104) = *((unsigned char *)v1095 + 104);
            *(unsigned char *)(v1094 + 105) = *((unsigned char *)v1095 + 105);
            *(void *)(v1094 + 112) = *((void *)v1095 + 14);
            *(void *)(v1094 + 120) = *((void *)v1095 + 15);
            *(void *)(v1094 + 128) = *((void *)v1095 + 16);
            *(void *)(v1094 + 136) = *((void *)v1095 + 17);
            *(void *)(v1094 + 144) = *((void *)v1095 + 18);
            *(void *)(v1094 + 152) = *((void *)v1095 + 19);
            *(void *)(v1094 + 160) = *((void *)v1095 + 20);
            *(void *)(v1094 + 168) = *((void *)v1095 + 21);
            *(unsigned char *)(v1094 + 176) = *((unsigned char *)v1095 + 176);
            *(void *)(v1094 + 184) = *((void *)v1095 + 23);
            uint64_t v1112 = *((void *)v1095 + 24);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            id v1113 = v2071;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (v1112)
            {
              *(void *)(v1094 + 192) = v1112;
              *(void *)(v1094 + 200) = *((void *)v1095 + 25);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }
            else
            {
              *(_OWORD *)(v1094 + 192) = v1095[12];
            }
            size_t v832 = __n;
            uint64_t v1037 = v1937;
            size_t v1038 = v2020;
            uint64_t v132 = v1974;
            *(void *)(v1094 + 208) = *((void *)v1095 + 26);
            *(void *)(v1094 + 216) = *((void *)v1095 + 27);
            *(void *)(v1094 + 224) = *((void *)v1095 + 28);
            *(void *)(v1094 + 232) = *((void *)v1095 + 29);
            *(void *)(v1094 + 240) = *((void *)v1095 + 30);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v1098 = *v1095;
            long long v1099 = v1095[1];
            long long v1100 = v1095[3];
            *(_OWORD *)(v1094 + 32) = v1095[2];
            *(_OWORD *)(v1094 + 48) = v1100;
            *(_OWORD *)unint64_t v1094 = v1098;
            *(_OWORD *)(v1094 + 16) = v1099;
            long long v1101 = v1095[4];
            long long v1102 = v1095[5];
            long long v1103 = v1095[7];
            *(_OWORD *)(v1094 + 96) = v1095[6];
            *(_OWORD *)(v1094 + 112) = v1103;
            *(_OWORD *)(v1094 + 64) = v1101;
            *(_OWORD *)(v1094 + 80) = v1102;
            long long v1104 = v1095[8];
            long long v1105 = v1095[9];
            long long v1106 = v1095[11];
            *(_OWORD *)(v1094 + 160) = v1095[10];
            *(_OWORD *)(v1094 + 176) = v1106;
            *(_OWORD *)(v1094 + 128) = v1104;
            *(_OWORD *)(v1094 + 144) = v1105;
            long long v1107 = v1095[12];
            long long v1108 = v1095[13];
            long long v1109 = v1095[14];
            *(void *)(v1094 + 240) = *((void *)v1095 + 30);
            *(_OWORD *)(v1094 + 208) = v1108;
            *(_OWORD *)(v1094 + 224) = v1109;
            *(_OWORD *)(v1094 + 192) = v1107;
            uint64_t v1037 = v1937;
            uint64_t v132 = v1974;
          }
          long long v1132 = (_OWORD *)((v1094 + 255) & 0xFFFFFFFFFFFFFFF8);
          long long v1133 = (long long *)(((unint64_t)v1095 + 255) & 0xFFFFFFFFFFFFFFF8);
          long long v1134 = *v1133;
          *(_OWORD *)((char *)v1132 + 9) = *(long long *)((char *)v1133 + 9);
          *long long v1132 = v1134;
          unint64_t v1135 = (v1094 + 287) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v1136 = ((unint64_t)v1095 + 287) & 0xFFFFFFFFFFFFFFF8;
          long long v1137 = *(_OWORD *)v1136;
          *(unsigned char *)(v1135 + 16) = *(unsigned char *)(v1136 + 16);
          *(_OWORD *)unint64_t v1135 = v1137;
          uint64_t v1138 = (void *)((v1094 + 311) & 0xFFFFFFFFFFFFFFF8);
          unint64_t v1139 = ((unint64_t)v1095 + 311) & 0xFFFFFFFFFFFFFFF8;
          uint64_t v1140 = *(void *)v1139;
          v1139 += 15;
          *uint64_t v1138 = v1140;
          v1141 = (void *)(((unint64_t)v1138 + 15) & 0xFFFFFFFFFFFFFFF8);
          uint64_t v1142 = *(void *)(v1139 & 0xFFFFFFFFFFFFFFF8);
          unint64_t v1143 = *(void *)((v1139 & 0xFFFFFFFFFFFFFFF8) + 8);
          sub_10018B584(v1142, v1143);
          void *v1141 = v1142;
          v1141[1] = v1143;
          size_t v1039 = v1966;
          size_t v1036 = v1894;
          unint64_t v1022 = v1943 + 7;
          long long v1035 = v2056;
          if (v1944)
          {
LABEL_1140:
            unint64_t v1144 = ((((v1926
                      + 327
                      + ((((((((((v1022 + v1039) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                          + 19) & 0xFFFFFFFFFFFFFFF8)
                        + 25) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFF8)
                    + 15) & 0xFFFFFFFFFFFFFFF8)
                  + 16;
            *(void *)(((unint64_t)v2014 + v1144) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v1035
                                                                                               + v1144) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1127 = ((v1935
                    + ((v1897
                      + ((((v1037
                          + ((((((((((v1022 + v832) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                              + 19) & 0xFFFFFFFFFFFFFFF8)
                            + 25) & 0xFFFFFFFFFFFFFFF8)
                          + 327) & 0xFFFFFFFFFFFFFFF8)
                        + 15) & 0xFFFFFFFFFFFFFFF8)
                      + 16) & v132)) & 0xFFFFFFFFFFFFFFF8)
                  + 8;
            if (v1127 <= v1992) {
              unint64_t v1127 = v1992;
            }
            if (v1933 > v1127) {
              unint64_t v1127 = v1933;
            }
            if (v2010 > v1127) {
              unint64_t v1127 = v2010;
            }
            if (v1036 > v1127) {
              unint64_t v1127 = v1036;
            }
            if (v1038 > v1127) {
              unint64_t v1127 = v1038;
            }
            if (v1995 + 2 > v1127) {
              unint64_t v1127 = v1995 + 2;
            }
            if (v1981 > v1127) {
              unint64_t v1127 = ((v1982 + 9) & 0xFFFFFFFFFFFFFFF8) + 8;
            }
            if (v1892 > v1127) {
              unint64_t v1127 = v1982 + 2;
            }
            if (v1920 > v1127) {
              unint64_t v1127 = (v1982 & 0xFFFFFFFFFFFFFFF8) + 16;
            }
            if (v1127 <= v1038) {
              unint64_t v1127 = v1038;
            }
            if (v1127 <= v1993) {
              unint64_t v1127 = v1993;
            }
            if (v1127 <= v1921) {
              unint64_t v1127 = v1921;
            }
            if (v1127 <= v1038) {
              unint64_t v1127 = v1038;
            }
            if (v1127 <= v1934) {
              unint64_t v1127 = v1934;
            }
            if (v1127 <= v1892) {
              unint64_t v1127 = v1982 + 2;
            }
            if (v1127 <= v1038) {
              unint64_t v1127 = v1038;
            }
            if (v1127 <= v1995) {
              unint64_t v1127 = v1995;
            }
            if (v1127 <= v1038) {
              unint64_t v1127 = v1038;
            }
            if (v1127 <= v1922) {
              unint64_t v1127 = v1922;
            }
            if (v1127 <= v1892) {
              unint64_t v1127 = v1982 + 2;
            }
            if (v1127 <= v1038) {
              unint64_t v1127 = v1038;
            }
            if (v1127 <= 0x38) {
              unint64_t v1127 = 56;
            }
            if (v1127 <= 3)
            {
              unsigned int v1145 = ((1 << (8 * v1127)) + 5) >> (8 * v1127);
              if (v1145 > 0xFFD6)
              {
                int v1131 = 6;
                goto LABEL_1192;
              }
              if (v1145 > 0xD6)
              {
                __int16 v1130 = 6;
                goto LABEL_1190;
              }
            }
            char v1128 = 6;
            goto LABEL_1186;
          }
LABEL_1070:
          size_t v1039 = v832;
          goto LABEL_1140;
        }
        unint64_t v1027 = (v1956 + ((unint64_t)&a2[v1987 + v1023] & v1886)) & v2061;
        uint64_t v1026 = v1887;
        unint64_t v1028 = (v1928 + v1027) & v1887;
        if (v1940 == v127)
        {
          if (v1932 == v1940)
          {
            uint64_t v1029 = *(uint64_t (**)(unint64_t))(v1952 + 48);
            unint64_t v1030 = (v1928 + v1027) & v1887;
LABEL_1067:
            int v1025 = v1029(v1030);
            uint64_t v1026 = v1887;
            goto LABEL_1068;
          }
          v1033 = (unint64_t *)((v1960 + v1028) & 0xFFFFFFFFFFFFFFF8);
          if (v1924 > 0x7FFFFFFE)
          {
            unint64_t v1030 = ((unint64_t)v1033 + v1954) & v1977;
            uint64_t v1029 = (uint64_t (*)(unint64_t))v1953[6];
            goto LABEL_1067;
          }
          unint64_t v1034 = *v1033;
        }
        else
        {
          unint64_t v1031 = v1028 + v2002;
          if ((v1914 & 0x80000000) == 0)
          {
            unint64_t v1032 = *(void *)(v1031 + 8);
            if (v1032 >= 0xFFFFFFFF) {
              LODWORD(v1032) = -1;
            }
            int v1025 = v1032 + 1;
            goto LABEL_1068;
          }
          unint64_t v1030 = (v1965 + ((v2018 + v1031) & v1985)) & v133;
          if (v1944 > 0x7FFFFFFD)
          {
            uint64_t v1029 = *(uint64_t (**)(unint64_t))(v1963 + 48);
            goto LABEL_1067;
          }
          unint64_t v1034 = *(void *)(((v1912 + ((v1961 + v1030) & v133)) & 0xFFFFFFFFFFFFFFF8) + 8);
        }
        if (v1034 >= 0xFFFFFFFF) {
          LODWORD(v1034) = -1;
        }
        if ((v1034 + 1) >= 2) {
          goto LABEL_1069;
        }
        goto LABEL_1072;
      }
      uint64_t v131 = v72;
      unint64_t v393 = (unint64_t)&v72[v1956] & v2061;
      unint64_t v394 = (v393 + v1998 + v37) & v85;
      uint64_t v128 = v2027;
      uint64_t v132 = ~v33;
      uint64_t v133 = v83;
      if (v1940 == v1929)
      {
        if (v1932 == v1940)
        {
          unint64_t v395 = *(uint64_t (**)(unint64_t))(v1952 + 48);
          unint64_t v396 = (v393 + v1998 + v37) & v85;
LABEL_1000:
          v831 = v72;
          int v130 = v395(v396);
          uint64_t v85 = ~v37;
          uint64_t v131 = v831;
          goto LABEL_1001;
        }
        v619 = (unint64_t *)((v1960 + v394) & 0xFFFFFFFFFFFFFFF8);
        if (v1924 > 0x7FFFFFFE)
        {
          unint64_t v396 = ((unint64_t)v619 + v1954) & v86;
          unint64_t v395 = (uint64_t (*)(unint64_t))v1953[6];
          goto LABEL_1000;
        }
        unint64_t v620 = *v619;
      }
      else
      {
        unint64_t v496 = v2002 + v394;
        if ((v1914 & 0x80000000) == 0)
        {
          unint64_t v497 = *(void *)(v496 + 8);
          if (v497 >= 0xFFFFFFFF) {
            LODWORD(v497) = -1;
          }
          int v130 = v497 + 1;
          goto LABEL_1001;
        }
        unint64_t v396 = (v1965 + ((v2018 + v496) & v1985)) & v124;
        if (v1944 > 0x7FFFFFFD)
        {
          unint64_t v395 = *(uint64_t (**)(unint64_t))(v1963 + 48);
          goto LABEL_1000;
        }
        unint64_t v620 = *(void *)(((v1912 + ((v1961 + v396) & v124)) & 0xFFFFFFFFFFFFFFF8) + 8);
      }
      if (v620 >= 0xFFFFFFFF) {
        LODWORD(v620) = -1;
      }
      if ((v620 + 1) >= 2) {
        goto LABEL_1002;
      }
      goto LABEL_1005;
    case 7u:
      unint64_t v134 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1970 + 16);
      unint64_t v135 = v72;
      ((void (*)(void *))v134)(a1);
      unint64_t v136 = ((unint64_t)a1 + v1957) & v79;
      unint64_t v137 = (unint64_t)&v135[v1957] & v79;
      v134(v136, v137, AssociatedTypeWitness);
      unint64_t v138 = (v136 + v2001 + v2060) & v80;
      unint64_t v139 = (v137 + v2001 + v2060) & v80;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v1950 + 16))(v138, v139, v1949);
      uint64_t v140 = (void *)((v1955 + v138) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v141 = (void *)((v1955 + v139) & 0xFFFFFFFFFFFFFFF8);
      void *v140 = *v141;
      unint64_t v142 = ((unint64_t)v140 + v1945) & ~v1971;
      unint64_t v143 = ((unint64_t)v141 + v1945) & ~v1971;
      int v144 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1947 + 16);
      swift_bridgeObjectRetain();
      v144(v142, v143, v1946);
      unsigned int v145 = (void *)((v1941 + v143) & 0xFFFFFFFFFFFFFFF8);
      unsigned int v146 = (void *)((v1941 + v142) & 0xFFFFFFFFFFFFFFF8);
      *unsigned int v146 = *v145;
      uint64_t v147 = (void *)(((unint64_t)v146 + 15) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v148 = (void *)(((unint64_t)v145 + 15) & 0xFFFFFFFFFFFFFFF8);
      *uint64_t v147 = *v148;
      v147[1] = v148[1];
      uint64_t v149 = (void *)(v2013 + v138);
      *uint64_t v149 = *(void *)(v2013 + v139);
      v149[1] = *(void *)(v2013 + v139 + 8);
      size_t v150 = (v2018 + v2013 + v138) & v82;
      size_t v151 = (v2018 + v2013 + v139) & v82;
      *(unsigned char *)size_t v150 = *(unsigned char *)v151;
      uint64_t v152 = v150 | 4;
      int v153 = *(_DWORD *)(v151 | 4);
      *(unsigned char *)(v152 + 4) = *(unsigned char *)((v151 | 4) + 4);
      *(_DWORD *)uint64_t v152 = v153;
      *(_WORD *)(v150 + 10) = *(_WORD *)(v151 + 0xA);
      size_t v2062 = v150;
      size_t v154 = (v1965 + v150) & ~v1976;
      size_t v155 = (v1965 + v151) & ~v1976;
      uint64_t v156 = *(void (**)(size_t, size_t, uint64_t))(v1963 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v156(v154, v155, v1962);
      size_t v157 = (v1961 + v154) & ~v1976;
      size_t v158 = (v1961 + v155) & ~v1976;
      v156(v157, v158, v1962);
      unint64_t v159 = (unsigned char *)(v157 + v1966);
      unsigned char *v159 = *(unsigned char *)(v158 + v1966);
      v159[1] = *(unsigned char *)(v158 + v1966 + 1);
      v159[2] = *(unsigned char *)(v158 + v1966 + 2);
      v159[3] = *(unsigned char *)(v158 + v1966 + 3);
      v159[4] = *(unsigned char *)(v158 + v1966 + 4);
      unint64_t v160 = (v157 + v1966 + 12) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v161 = (v158 + v1966 + 12) & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v160 = *(void *)v161;
      *(void *)(v160 + 8) = *(void *)(v161 + 8);
      *(unsigned char *)(v160 + 16) = *(unsigned char *)(v161 + 16);
      *(unsigned char *)(v160 + 17) = *(unsigned char *)(v161 + 17);
      *(unsigned char *)(v160 + 18) = *(unsigned char *)(v161 + 18);
      *(unsigned char *)(v160 + 19) = *(unsigned char *)(v161 + 19);
      unint64_t v162 = (v160 + 27) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v163 = (v161 + 27) & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v162 = *(void *)v163;
      *(unsigned char *)(v162 + 8) = *(unsigned char *)(v163 + 8);
      *(unsigned char *)(v162 + 9) = *(unsigned char *)(v163 + 9);
      *(unsigned char *)(v162 + 10) = *(unsigned char *)(v163 + 10);
      *(unsigned char *)(v162 + 11) = *(unsigned char *)(v163 + 11);
      *(unsigned char *)(v162 + 12) = *(unsigned char *)(v163 + 12);
      uint64_t v164 = (void *)((v161 + 47) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v165 = (void *)((v160 + 47) & 0xFFFFFFFFFFFFFFF8);
      *uint64_t v165 = *v164;
      unint64_t v166 = ((unint64_t)v165 + 15) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v167 = ((unint64_t)v164 + 15) & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v166 = *(void *)v167;
      *(unsigned char *)(v166 + 8) = *(unsigned char *)(v167 + 8);
      *(unsigned char *)(v166 + 9) = *(unsigned char *)(v167 + 9);
      uint64_t v168 = (void *)((v1958 + v166) & ~v1976);
      uint64_t v169 = (const void *)((v1958 + v167) & ~v1976);
      uint64_t v170 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v1963 + 48);
      swift_bridgeObjectRetain();
      if (v170(v169, 1, v1962))
      {
        memcpy(v168, v169, __n);
      }
      else
      {
        v156((size_t)v168, (size_t)v169, v1962);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v1963 + 56))(v168, 0, 1, v1962);
      }
      unint64_t v415 = (void *)(((unint64_t)v168 + v1959) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v416 = (void *)(((unint64_t)v169 + v1959) & 0xFFFFFFFFFFFFFFF8);
      void *v415 = *v416;
      unint64_t v417 = ((unint64_t)v415 + 15) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v418 = ((unint64_t)v416 + 15) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v419 = *(void *)v418;
      *(unsigned char *)(v417 + 8) = *(unsigned char *)(v418 + 8);
      *(void *)unint64_t v417 = v419;
      unint64_t v420 = (void *)(((unint64_t)v415 + 31) & 0xFFFFFFFFFFFFFFF8);
      id v421 = (void *)(((unint64_t)v416 + 31) & 0xFFFFFFFFFFFFFFF8);
      *unint64_t v420 = *v421;
      unint64_t v422 = ((unint64_t)v420 + 15) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v423 = (uint64_t *)(((unint64_t)v421 + 15) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v424 = v423[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if ((v424 & 0x3000000000000000) != 0)
      {
        *(_OWORD *)unint64_t v422 = *(_OWORD *)v423;
      }
      else
      {
        uint64_t v435 = *v423;
        sub_10001EBB0(*v423, v424);
        *(void *)unint64_t v422 = v435;
        *(void *)(v422 + 8) = v424;
      }
      unint64_t v436 = (v422 + 19) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v437 = ((unint64_t)v423 + 19) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v438 = *(void *)v437;
      *(unsigned char *)(v436 + 8) = *(unsigned char *)(v437 + 8);
      *(void *)unint64_t v436 = v438;
      *(unsigned char *)(v436 + 9) = *(unsigned char *)(v437 + 9);
      unint64_t v439 = (v436 + 13) & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v440 = (v437 + 13) & 0xFFFFFFFFFFFFFFFCLL;
      int v441 = *(_DWORD *)v440;
      *(unsigned char *)(v439 + 4) = *(unsigned char *)(v440 + 4);
      *(_DWORD *)unint64_t v439 = v441;
      unint64_t v442 = (void *)((v436 + 25) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v443 = (void *)((v437 + 25) & 0xFFFFFFFFFFFFFFF8);
      *unint64_t v442 = *v443;
      v442[1] = v443[1];
      unint64_t v444 = v2017 + v2062;
      unint64_t v445 = v2017 + v151;
      unint64_t v446 = *(void *)(v2017 + v151 + 16);
      if (v446 >= 0xFFFFFFFF) {
        LODWORD(v446) = -1;
      }
      int v447 = v446 - 1;
      swift_bridgeObjectRetain();
      if (v447 < 0)
      {
        *(void *)unint64_t v444 = *(void *)v445;
        *(unsigned char *)(v444 + 8) = *(unsigned char *)(v445 + 8);
        *(unsigned char *)(v444 + 9) = *(unsigned char *)(v445 + 9);
        uint64_t v486 = *(void *)(v445 + 16);
        swift_errorRetain();
        *(void *)(v444 + 16) = v486;
        uint64_t v487 = *(void *)(v445 + 24);
        swift_errorRetain();
        *(void *)(v444 + 24) = v487;
        *(unsigned char *)(v444 + 32) = *(unsigned char *)(v445 + 32);
        *(unsigned char *)(v444 + 33) = *(unsigned char *)(v445 + 33);
        *(unsigned char *)(v444 + 34) = *(unsigned char *)(v445 + 34);
        *(void *)(v444 + 40) = *(void *)(v445 + 40);
        *(void *)(v444 + 48) = *(void *)(v445 + 48);
        *(void *)(v444 + 56) = *(void *)(v445 + 56);
        *(void *)(v444 + 64) = *(void *)(v445 + 64);
        *(unsigned char *)(v444 + 72) = *(unsigned char *)(v445 + 72);
        *(void *)(v444 + 80) = *(void *)(v445 + 80);
        *(void *)(v444 + 88) = *(void *)(v445 + 88);
        v2065 = *(void **)(v445 + 96);
        *(void *)(v444 + 96) = v2065;
        *(unsigned char *)(v444 + 104) = *(unsigned char *)(v445 + 104);
        *(unsigned char *)(v444 + 105) = *(unsigned char *)(v445 + 105);
        *(void *)(v444 + 112) = *(void *)(v445 + 112);
        *(void *)(v444 + 120) = *(void *)(v445 + 120);
        *(void *)(v444 + 128) = *(void *)(v445 + 128);
        *(void *)(v444 + 136) = *(void *)(v445 + 136);
        *(void *)(v444 + 144) = *(void *)(v445 + 144);
        *(void *)(v444 + 152) = *(void *)(v445 + 152);
        *(void *)(v444 + 160) = *(void *)(v445 + 160);
        *(void *)(v444 + 168) = *(void *)(v445 + 168);
        *(unsigned char *)(v444 + 176) = *(unsigned char *)(v445 + 176);
        *(void *)(v444 + 184) = *(void *)(v445 + 184);
        uint64_t v488 = *(void *)(v445 + 192);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v489 = v2065;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v488)
        {
          *(void *)(v444 + 192) = v488;
          *(void *)(v444 + 200) = *(void *)(v445 + 200);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          *(_OWORD *)(v444 + 192) = *(_OWORD *)(v445 + 192);
        }
        uint64_t v460 = v2036;
        *(void *)(v444 + 208) = *(void *)(v445 + 208);
        *(void *)(v444 + 216) = *(void *)(v445 + 216);
        *(void *)(v444 + 224) = *(void *)(v445 + 224);
        *(void *)(v444 + 232) = *(void *)(v445 + 232);
        *(void *)(v444 + 240) = *(void *)(v445 + 240);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v448 = *(_OWORD *)v445;
        long long v449 = *(_OWORD *)(v445 + 16);
        long long v450 = *(_OWORD *)(v445 + 48);
        *(_OWORD *)(v444 + 32) = *(_OWORD *)(v445 + 32);
        *(_OWORD *)(v444 + 48) = v450;
        *(_OWORD *)unint64_t v444 = v448;
        *(_OWORD *)(v444 + 16) = v449;
        long long v451 = *(_OWORD *)(v445 + 64);
        long long v452 = *(_OWORD *)(v445 + 80);
        long long v453 = *(_OWORD *)(v445 + 112);
        *(_OWORD *)(v444 + 96) = *(_OWORD *)(v445 + 96);
        *(_OWORD *)(v444 + 112) = v453;
        *(_OWORD *)(v444 + 64) = v451;
        *(_OWORD *)(v444 + 80) = v452;
        long long v454 = *(_OWORD *)(v445 + 128);
        long long v455 = *(_OWORD *)(v445 + 144);
        long long v456 = *(_OWORD *)(v445 + 176);
        *(_OWORD *)(v444 + 160) = *(_OWORD *)(v445 + 160);
        *(_OWORD *)(v444 + 176) = v456;
        *(_OWORD *)(v444 + 128) = v454;
        *(_OWORD *)(v444 + 144) = v455;
        long long v457 = *(_OWORD *)(v445 + 192);
        long long v458 = *(_OWORD *)(v445 + 208);
        long long v459 = *(_OWORD *)(v445 + 224);
        *(void *)(v444 + 240) = *(void *)(v445 + 240);
        *(_OWORD *)(v444 + 208) = v458;
        *(_OWORD *)(v444 + 224) = v459;
        *(_OWORD *)(v444 + 192) = v457;
        uint64_t v460 = v2036;
      }
      uint64_t v588 = (_OWORD *)((v444 + 255) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v589 = (long long *)((v445 + 255) & 0xFFFFFFFFFFFFFFF8);
      long long v590 = *v589;
      *(_OWORD *)((char *)v588 + 9) = *(long long *)((char *)v589 + 9);
      *uint64_t v588 = v590;
      unint64_t v591 = (v444 + 287) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v592 = (v445 + 287) & 0xFFFFFFFFFFFFFFF8;
      long long v593 = *(_OWORD *)v592;
      *(unsigned char *)(v591 + 16) = *(unsigned char *)(v592 + 16);
      *(_OWORD *)unint64_t v591 = v593;
      uint64_t v594 = (void *)((v444 + 311) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v595 = (v445 + 311) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v596 = *(void *)v595;
      v595 += 15;
      *uint64_t v594 = v596;
      unint64_t v597 = (void *)(((unint64_t)v594 + 15) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v598 = *(void *)(v595 & 0xFFFFFFFFFFFFFFF8);
      unint64_t v599 = *(void *)((v595 & 0xFFFFFFFFFFFFFFF8) + 8);
      sub_10018B584(v598, v599);
      *unint64_t v597 = v598;
      v597[1] = v599;
      if (v460 > 3) {
        goto LABEL_472;
      }
      unsigned int v601 = ((1 << (8 * v460)) + 5) >> (8 * v460);
      if (v601 > 0xFFD6)
      {
        int v603 = 7;
        goto LABEL_487;
      }
      if (v601 <= 0xD6)
      {
LABEL_472:
        char v600 = 7;
        goto LABEL_481;
      }
      __int16 v602 = 7;
      goto LABEL_485;
    case 8u:
      unsigned int v171 = *(void (**)(void))(v2027 + 16);
      uint64_t v2041 = ~v1976;
      unsigned int v172 = v72;
      uint64_t v1978 = ~v36;
      v171();
      uint64_t v173 = v82;
      unint64_t v174 = v38;
      unint64_t v175 = ((unint64_t)a1 + v1956) & v77;
      unint64_t v176 = (unint64_t)&v172[v1956] & v77;
      ((void (*)(unint64_t, unint64_t, uint64_t))v171)(v175, v176, v1969);
      unint64_t v177 = (v175 + v1998 + v37) & ~v37;
      unint64_t v178 = (v176 + v1998 + v37) & ~v37;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v30 + 16))(v177, v178, v1951);
      unsigned int v179 = (void *)((v1960 + v177) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v180 = (void *)((v1960 + v178) & 0xFFFFFFFFFFFFFFF8);
      *unsigned int v179 = *v180;
      unint64_t v181 = ((unint64_t)v179 + v1954) & v1978;
      unint64_t v182 = ((unint64_t)v180 + v1954) & v1978;
      uint64_t v183 = (void (*)(unint64_t, unint64_t, uint64_t))v1953[2];
      swift_bridgeObjectRetain();
      v183(v181, v182, v1948);
      int v184 = (void *)((v1942 + v182) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v185 = (void *)((v1942 + v181) & 0xFFFFFFFFFFFFFFF8);
      *uint64_t v185 = *v184;
      uint64_t v186 = (void *)(((unint64_t)v185 + 15) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v187 = (void *)(((unint64_t)v184 + 15) & 0xFFFFFFFFFFFFFFF8);
      *uint64_t v186 = *v187;
      v186[1] = v187[1];
      uint64_t v188 = (void *)(v174 + v177);
      *uint64_t v188 = *(void *)(v174 + v178);
      v188[1] = *(void *)(v174 + v178 + 8);
      uint64_t v189 = (v2018 + v174 + v177) & v173;
      uint64_t v190 = (v2018 + v174 + v178) & v173;
      *(unsigned char *)uint64_t v189 = *(unsigned char *)v190;
      uint64_t v191 = v189 | 4;
      int v192 = *(_DWORD *)(v190 | 4);
      *(unsigned char *)(v191 + 4) = *(unsigned char *)((v190 | 4) + 4);
      *(_DWORD *)uint64_t v191 = v192;
      *(_WORD *)(v189 + 10) = *(_WORD *)(v190 + 0xA);
      uint64_t v2063 = v189;
      uint64_t v193 = (v1965 + v189) & v2041;
      uint64_t v194 = (v1965 + v190) & v2041;
      uint64_t v195 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1963 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v195(v193, v194, v1962);
      uint64_t v196 = (v1961 + v193) & v2041;
      uint64_t v197 = (v1961 + v194) & v2041;
      v195(v196, v197, v1962);
      uint64_t v198 = (unsigned char *)(v196 + v1966);
      unsigned char *v198 = *(unsigned char *)(v197 + v1966);
      v198[1] = *(unsigned char *)(v197 + v1966 + 1);
      v198[2] = *(unsigned char *)(v197 + v1966 + 2);
      v198[3] = *(unsigned char *)(v197 + v1966 + 3);
      v198[4] = *(unsigned char *)(v197 + v1966 + 4);
      unint64_t v199 = (v196 + v1966 + 12) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v200 = (v197 + v1966 + 12) & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v199 = *(void *)v200;
      *(void *)(v199 + 8) = *(void *)(v200 + 8);
      *(unsigned char *)(v199 + 16) = *(unsigned char *)(v200 + 16);
      *(unsigned char *)(v199 + 17) = *(unsigned char *)(v200 + 17);
      *(unsigned char *)(v199 + 18) = *(unsigned char *)(v200 + 18);
      *(unsigned char *)(v199 + 19) = *(unsigned char *)(v200 + 19);
      unint64_t v201 = (v199 + 27) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v202 = (v200 + 27) & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v201 = *(void *)v202;
      *(unsigned char *)(v201 + 8) = *(unsigned char *)(v202 + 8);
      *(unsigned char *)(v201 + 9) = *(unsigned char *)(v202 + 9);
      *(unsigned char *)(v201 + 10) = *(unsigned char *)(v202 + 10);
      *(unsigned char *)(v201 + 11) = *(unsigned char *)(v202 + 11);
      *(unsigned char *)(v201 + 12) = *(unsigned char *)(v202 + 12);
      unint64_t v203 = (void *)((v200 + 47) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v204 = (void *)((v199 + 47) & 0xFFFFFFFFFFFFFFF8);
      void *v204 = *v203;
      unint64_t v205 = ((unint64_t)v204 + 15) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v206 = ((unint64_t)v203 + 15) & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v205 = *(void *)v206;
      *(unsigned char *)(v205 + 8) = *(unsigned char *)(v206 + 8);
      *(unsigned char *)(v205 + 9) = *(unsigned char *)(v206 + 9);
      unint64_t v207 = (void *)((v1958 + v205) & v2041);
      uint64_t v208 = (const void *)((v1958 + v206) & v2041);
      uint64_t v209 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v1963 + 48);
      swift_bridgeObjectRetain();
      if (v209(v208, 1, v1962))
      {
        memcpy(v207, v208, __n);
      }
      else
      {
        v195((uint64_t)v207, (uint64_t)v208, v1962);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v1963 + 56))(v207, 0, 1, v1962);
      }
      v425 = (void *)(((unint64_t)v207 + v1959) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v426 = (void *)(((unint64_t)v208 + v1959) & 0xFFFFFFFFFFFFFFF8);
      void *v425 = *v426;
      unint64_t v427 = ((unint64_t)v425 + 15) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v428 = ((unint64_t)v426 + 15) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v429 = *(void *)v428;
      *(unsigned char *)(v427 + 8) = *(unsigned char *)(v428 + 8);
      *(void *)unint64_t v427 = v429;
      unint64_t v430 = (void *)(((unint64_t)v425 + 31) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v431 = (void *)(((unint64_t)v426 + 31) & 0xFFFFFFFFFFFFFFF8);
      *unint64_t v430 = *v431;
      unint64_t v432 = ((unint64_t)v430 + 15) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v433 = (uint64_t *)(((unint64_t)v431 + 15) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v434 = v433[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if ((v434 & 0x3000000000000000) != 0)
      {
        *(_OWORD *)unint64_t v432 = *(_OWORD *)v433;
      }
      else
      {
        uint64_t v461 = *v433;
        sub_10001EBB0(*v433, v434);
        *(void *)unint64_t v432 = v461;
        *(void *)(v432 + 8) = v434;
      }
      unint64_t v462 = (v432 + 19) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v463 = ((unint64_t)v433 + 19) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v464 = *(void *)v463;
      *(unsigned char *)(v462 + 8) = *(unsigned char *)(v463 + 8);
      *(void *)unint64_t v462 = v464;
      *(unsigned char *)(v462 + 9) = *(unsigned char *)(v463 + 9);
      unint64_t v465 = (v462 + 13) & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v466 = (v463 + 13) & 0xFFFFFFFFFFFFFFFCLL;
      int v467 = *(_DWORD *)v466;
      *(unsigned char *)(v465 + 4) = *(unsigned char *)(v466 + 4);
      *(_DWORD *)unint64_t v465 = v467;
      unint64_t v468 = (void *)((v462 + 25) & 0xFFFFFFFFFFFFFFF8);
      long long v469 = (void *)((v463 + 25) & 0xFFFFFFFFFFFFFFF8);
      *unint64_t v468 = *v469;
      v468[1] = v469[1];
      unint64_t v470 = v2063 + v2017;
      unint64_t v471 = v190 + v2017;
      unint64_t v472 = *(void *)(v190 + v2017 + 16);
      if (v472 >= 0xFFFFFFFF) {
        LODWORD(v472) = -1;
      }
      int v473 = v472 - 1;
      swift_bridgeObjectRetain();
      if (v473 < 0)
      {
        *(void *)unint64_t v470 = *(void *)v471;
        *(unsigned char *)(v470 + 8) = *(unsigned char *)(v471 + 8);
        *(unsigned char *)(v470 + 9) = *(unsigned char *)(v471 + 9);
        uint64_t v490 = *(void *)(v471 + 16);
        swift_errorRetain();
        *(void *)(v470 + 16) = v490;
        uint64_t v491 = *(void *)(v471 + 24);
        swift_errorRetain();
        *(void *)(v470 + 24) = v491;
        *(unsigned char *)(v470 + 32) = *(unsigned char *)(v471 + 32);
        *(unsigned char *)(v470 + 33) = *(unsigned char *)(v471 + 33);
        *(unsigned char *)(v470 + 34) = *(unsigned char *)(v471 + 34);
        *(void *)(v470 + 40) = *(void *)(v471 + 40);
        *(void *)(v470 + 48) = *(void *)(v471 + 48);
        *(void *)(v470 + 56) = *(void *)(v471 + 56);
        *(void *)(v470 + 64) = *(void *)(v471 + 64);
        *(unsigned char *)(v470 + 72) = *(unsigned char *)(v471 + 72);
        *(void *)(v470 + 80) = *(void *)(v471 + 80);
        *(void *)(v470 + 88) = *(void *)(v471 + 88);
        v2066 = *(void **)(v471 + 96);
        *(void *)(v470 + 96) = v2066;
        *(unsigned char *)(v470 + 104) = *(unsigned char *)(v471 + 104);
        *(unsigned char *)(v470 + 105) = *(unsigned char *)(v471 + 105);
        *(void *)(v470 + 112) = *(void *)(v471 + 112);
        *(void *)(v470 + 120) = *(void *)(v471 + 120);
        *(void *)(v470 + 128) = *(void *)(v471 + 128);
        *(void *)(v470 + 136) = *(void *)(v471 + 136);
        *(void *)(v470 + 144) = *(void *)(v471 + 144);
        *(void *)(v470 + 152) = *(void *)(v471 + 152);
        *(void *)(v470 + 160) = *(void *)(v471 + 160);
        *(void *)(v470 + 168) = *(void *)(v471 + 168);
        *(unsigned char *)(v470 + 176) = *(unsigned char *)(v471 + 176);
        *(void *)(v470 + 184) = *(void *)(v471 + 184);
        uint64_t v492 = *(void *)(v471 + 192);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v493 = v2066;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v492)
        {
          *(void *)(v470 + 192) = v492;
          *(void *)(v470 + 200) = *(void *)(v471 + 200);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          *(_OWORD *)(v470 + 192) = *(_OWORD *)(v471 + 192);
        }
        uint64_t v460 = v2036;
        *(void *)(v470 + 208) = *(void *)(v471 + 208);
        *(void *)(v470 + 216) = *(void *)(v471 + 216);
        *(void *)(v470 + 224) = *(void *)(v471 + 224);
        *(void *)(v470 + 232) = *(void *)(v471 + 232);
        *(void *)(v470 + 240) = *(void *)(v471 + 240);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v474 = *(_OWORD *)v471;
        long long v475 = *(_OWORD *)(v471 + 16);
        long long v476 = *(_OWORD *)(v471 + 48);
        *(_OWORD *)(v470 + 32) = *(_OWORD *)(v471 + 32);
        *(_OWORD *)(v470 + 48) = v476;
        *(_OWORD *)unint64_t v470 = v474;
        *(_OWORD *)(v470 + 16) = v475;
        long long v477 = *(_OWORD *)(v471 + 64);
        long long v478 = *(_OWORD *)(v471 + 80);
        long long v479 = *(_OWORD *)(v471 + 112);
        *(_OWORD *)(v470 + 96) = *(_OWORD *)(v471 + 96);
        *(_OWORD *)(v470 + 112) = v479;
        *(_OWORD *)(v470 + 64) = v477;
        *(_OWORD *)(v470 + 80) = v478;
        long long v480 = *(_OWORD *)(v471 + 128);
        long long v481 = *(_OWORD *)(v471 + 144);
        long long v482 = *(_OWORD *)(v471 + 176);
        *(_OWORD *)(v470 + 160) = *(_OWORD *)(v471 + 160);
        *(_OWORD *)(v470 + 176) = v482;
        *(_OWORD *)(v470 + 128) = v480;
        *(_OWORD *)(v470 + 144) = v481;
        long long v483 = *(_OWORD *)(v471 + 192);
        long long v484 = *(_OWORD *)(v471 + 208);
        long long v485 = *(_OWORD *)(v471 + 224);
        *(void *)(v470 + 240) = *(void *)(v471 + 240);
        *(_OWORD *)(v470 + 208) = v484;
        *(_OWORD *)(v470 + 224) = v485;
        *(_OWORD *)(v470 + 192) = v483;
        uint64_t v460 = v2036;
      }
      unint64_t v604 = (_OWORD *)((v470 + 255) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v605 = (long long *)((v471 + 255) & 0xFFFFFFFFFFFFFFF8);
      long long v606 = *v605;
      *(_OWORD *)((char *)v604 + 9) = *(long long *)((char *)v605 + 9);
      *unint64_t v604 = v606;
      unint64_t v607 = (v470 + 287) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v608 = (v471 + 287) & 0xFFFFFFFFFFFFFFF8;
      long long v609 = *(_OWORD *)v608;
      *(unsigned char *)(v607 + 16) = *(unsigned char *)(v608 + 16);
      *(_OWORD *)unint64_t v607 = v609;
      uint64_t v610 = (void *)((v470 + 311) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v611 = (v471 + 311) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v612 = *(void *)v611;
      v611 += 15;
      void *v610 = v612;
      unint64_t v613 = (void *)(((unint64_t)v610 + 15) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v614 = *(void *)(v611 & 0xFFFFFFFFFFFFFFF8);
      unint64_t v615 = *(void *)((v611 & 0xFFFFFFFFFFFFFFF8) + 8);
      sub_10018B584(v614, v615);
      void *v613 = v614;
      v613[1] = v615;
      if (v460 > 3) {
        goto LABEL_480;
      }
      unsigned int v616 = ((1 << (8 * v460)) + 5) >> (8 * v460);
      if (v616 > 0xFFD6)
      {
        int v603 = 8;
LABEL_487:
        *(_DWORD *)((char *)a1 + v460) = v603;
      }
      else if (v616 <= 0xD6)
      {
LABEL_480:
        char v600 = 8;
LABEL_481:
        *((unsigned char *)a1 + v460) = v600;
      }
      else
      {
        __int16 v602 = 8;
LABEL_485:
        *(_WORD *)((char *)a1 + v460) = v602;
      }
      return a1;
    case 9u:
      unsigned int v210 = v72[v1982];
      unsigned int v211 = v210 - 2;
      if (v210 < 2)
      {
        uint64_t v213 = v2027;
        uint64_t v214 = v1970;
      }
      else
      {
        if (v1982 <= 3) {
          uint64_t v212 = v1982;
        }
        else {
          uint64_t v212 = 4;
        }
        uint64_t v213 = v2027;
        uint64_t v214 = v1970;
        switch(v212)
        {
          case 1:
            int v215 = *v72;
            goto LABEL_555;
          case 2:
            int v215 = *(unsigned __int16 *)v72;
            goto LABEL_555;
          case 3:
            int v215 = *(unsigned __int16 *)v72 | (v72[2] << 16);
            goto LABEL_555;
          case 4:
            int v215 = *(_DWORD *)v72;
LABEL_555:
            if (v1982 < 4) {
              unsigned int v210 = (v215 | (v211 << (8 * v1982))) + 2;
            }
            else {
              unsigned int v210 = v215 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v638 = v210 == 1;
      if (v210 == 1) {
        uint64_t v639 = v213;
      }
      else {
        uint64_t v639 = v214;
      }
      (*(void (**)(void *))(v639 + 16))(a1);
      *((unsigned char *)a1 + v1982) = v638;
      uint64_t v273 = v2036;
      if (v2036 > 3) {
        goto LABEL_562;
      }
      unsigned int v640 = ((1 << (8 * v2036)) + 5) >> (8 * v2036);
      if (v640 > 0xFFD6)
      {
        int v498 = 9;
        goto LABEL_975;
      }
      if (v640 <= 0xD6)
      {
LABEL_562:
        char v274 = 9;
        goto LABEL_969;
      }
      __int16 v399 = 9;
      goto LABEL_973;
    case 0xAu:
      unsigned int v216 = v72[v1982];
      unsigned int v217 = v216 - 2;
      if (v216 < 2)
      {
        uint64_t v219 = ~v1983;
        uint64_t v220 = v1969;
        uint64_t v221 = AssociatedTypeWitness;
        uint64_t v222 = v2027;
        uint64_t v223 = v1970;
      }
      else
      {
        if (v1982 <= 3) {
          uint64_t v218 = v1982;
        }
        else {
          uint64_t v218 = 4;
        }
        uint64_t v219 = ~v1983;
        uint64_t v220 = v1969;
        uint64_t v221 = AssociatedTypeWitness;
        uint64_t v222 = v2027;
        uint64_t v223 = v1970;
        switch(v218)
        {
          case 1:
            int v224 = *v72;
            goto LABEL_570;
          case 2:
            int v224 = *(unsigned __int16 *)v72;
            goto LABEL_570;
          case 3:
            int v224 = *(unsigned __int16 *)v72 | (v72[2] << 16);
            goto LABEL_570;
          case 4:
            int v224 = *(_DWORD *)v72;
LABEL_570:
            if (v1982 < 4) {
              unsigned int v216 = (v224 | (v217 << (8 * v1982))) + 2;
            }
            else {
              unsigned int v216 = v224 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v641 = v216 == 1;
      if (v216 == 1) {
        uint64_t v642 = v222;
      }
      else {
        uint64_t v642 = v223;
      }
      uint64_t v643 = v72;
      (*(void (**)(void *))(v642 + 16))(a1);
      *((unsigned char *)a1 + v1982) = v641;
      unint64_t v644 = ((unint64_t)a1 + v1964) & v219;
      BOOL v645 = (unsigned __int8 *)((unint64_t)&v643[v1964] & v219);
      unsigned int v646 = v645[v1982];
      if (v646 > 1)
      {
        size_t v647 = v2020;
        memcpy((void *)(((unint64_t)a1 + v1964) & v219), v645, v2020);
      }
      else
      {
        if (v646 == 1)
        {
          (*(void (**)(unint64_t, unsigned __int8 *, uint64_t))(v222 + 16))(((unint64_t)a1 + v1964) & v219, v645, v220);
          *(unsigned char *)(v644 + v1982) = 1;
        }
        else
        {
          (*(void (**)(unint64_t, unsigned __int8 *, uint64_t))(v223 + 16))(((unint64_t)a1 + v1964) & v219, v645, v221);
          *(unsigned char *)(v644 + v1982) = 0;
        }
        size_t v647 = v2020;
      }
      unint64_t v648 = (unsigned char *)(v644 + v647);
      unsigned char *v648 = v645[v647];
      v648[1] = v645[v647 + 1];
      uint64_t v273 = v2036;
      if (v2036 > 3) {
        goto LABEL_583;
      }
      unsigned int v649 = ((1 << (8 * v2036)) + 5) >> (8 * v2036);
      if (v649 > 0xFFD6)
      {
        int v498 = 10;
        goto LABEL_975;
      }
      if (v649 <= 0xD6)
      {
LABEL_583:
        char v274 = 10;
        goto LABEL_969;
      }
      __int16 v399 = 10;
      goto LABEL_973;
    case 0xBu:
      unsigned int v225 = v72[v1982];
      unsigned int v226 = v225 - 2;
      if (v225 < 2)
      {
        uint64_t v228 = ~v1983;
        uint64_t v229 = v1969;
        uint64_t v230 = AssociatedTypeWitness;
        uint64_t v231 = v2027;
        uint64_t v232 = v1970;
      }
      else
      {
        if (v1982 <= 3) {
          uint64_t v227 = v1982;
        }
        else {
          uint64_t v227 = 4;
        }
        uint64_t v228 = ~v1983;
        uint64_t v229 = v1969;
        uint64_t v230 = AssociatedTypeWitness;
        uint64_t v231 = v2027;
        uint64_t v232 = v1970;
        switch(v227)
        {
          case 1:
            int v233 = *v72;
            goto LABEL_591;
          case 2:
            int v233 = *(unsigned __int16 *)v72;
            goto LABEL_591;
          case 3:
            int v233 = *(unsigned __int16 *)v72 | (v72[2] << 16);
            goto LABEL_591;
          case 4:
            int v233 = *(_DWORD *)v72;
LABEL_591:
            if (v1982 < 4) {
              unsigned int v225 = (v233 | (v226 << (8 * v1982))) + 2;
            }
            else {
              unsigned int v225 = v233 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v650 = v225 == 1;
      if (v225 == 1) {
        uint64_t v651 = v231;
      }
      else {
        uint64_t v651 = v232;
      }
      unsigned int v652 = v72;
      (*(void (**)(void *))(v651 + 16))(a1);
      *((unsigned char *)a1 + v1982) = v650;
      unint64_t v653 = ((unint64_t)a1 + v1964) & v228;
      int v654 = (unsigned __int8 *)((unint64_t)&v652[v1964] & v228);
      unsigned int v655 = v654[v1982];
      if (v655 > 1)
      {
        size_t v656 = v2020;
        memcpy((void *)(((unint64_t)a1 + v1964) & v228), v654, v2020);
      }
      else
      {
        if (v655 == 1)
        {
          (*(void (**)(unint64_t, unsigned __int8 *, uint64_t))(v231 + 16))(((unint64_t)a1 + v1964) & v228, v654, v229);
          *(unsigned char *)(v653 + v1982) = 1;
        }
        else
        {
          (*(void (**)(unint64_t, unsigned __int8 *, uint64_t))(v232 + 16))(((unint64_t)a1 + v1964) & v228, v654, v230);
          *(unsigned char *)(v653 + v1982) = 0;
        }
        size_t v656 = v2020;
      }
      unsigned int v657 = (unsigned char *)(v653 + v656);
      unsigned char *v657 = v654[v656];
      v657[1] = v654[v656 + 1];
      uint64_t v273 = v2036;
      if (v2036 > 3) {
        goto LABEL_604;
      }
      unsigned int v658 = ((1 << (8 * v2036)) + 5) >> (8 * v2036);
      if (v658 > 0xFFD6)
      {
        int v498 = 11;
        goto LABEL_975;
      }
      if (v658 <= 0xD6)
      {
LABEL_604:
        char v274 = 11;
        goto LABEL_969;
      }
      __int16 v399 = 11;
      goto LABEL_973;
    case 0xCu:
      unsigned int v234 = v72[v1982];
      unsigned int v235 = v234 - 2;
      if (v234 < 2)
      {
        unint64_t v239 = v1982 + 2;
        size_t v238 = v2020;
        uint64_t v237 = v2027;
        uint64_t v240 = v1970;
      }
      else
      {
        if (v1982 <= 3) {
          uint64_t v236 = v1982;
        }
        else {
          uint64_t v236 = 4;
        }
        size_t v238 = v2020;
        uint64_t v237 = v2027;
        unint64_t v239 = v1982 + 2;
        uint64_t v240 = v1970;
        switch(v236)
        {
          case 1:
            int v241 = *v72;
            goto LABEL_612;
          case 2:
            int v241 = *(unsigned __int16 *)v72;
            goto LABEL_612;
          case 3:
            int v241 = *(unsigned __int16 *)v72 | (v72[2] << 16);
            goto LABEL_612;
          case 4:
            int v241 = *(_DWORD *)v72;
LABEL_612:
            if (v1982 < 4) {
              unsigned int v234 = (v241 | (v235 << (8 * v1982))) + 2;
            }
            else {
              unsigned int v234 = v241 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v659 = v234 == 1;
      if (v234 == 1) {
        uint64_t v660 = v237;
      }
      else {
        uint64_t v660 = v240;
      }
      unint64_t v661 = v72;
      (*(void (**)(void *))(v660 + 16))(a1);
      *((unsigned char *)a1 + v1982) = v659;
      *((unsigned char *)a1 + v238) = v661[v238];
      uint64_t v662 = *(void *)((unint64_t)&v661[v239 + 7] & 0xFFFFFFFFFFFFFFF8);
      swift_errorRetain();
      *(void *)(((unint64_t)a1 + v239 + 7) & 0xFFFFFFFFFFFFFFF8) = v662;
      uint64_t v273 = v2036;
      if (v2036 > 3) {
        goto LABEL_619;
      }
      unsigned int v663 = ((1 << (8 * v2036)) + 5) >> (8 * v2036);
      if (v663 > 0xFFD6)
      {
        int v498 = 12;
        goto LABEL_975;
      }
      if (v663 <= 0xD6)
      {
LABEL_619:
        char v274 = 12;
        goto LABEL_969;
      }
      __int16 v399 = 12;
      goto LABEL_973;
    case 0xDu:
      unsigned int v242 = v72[v1982];
      unsigned int v243 = v242 - 2;
      if (v242 < 2)
      {
        size_t v246 = v2020;
        uint64_t v245 = v2027;
        uint64_t v247 = v1970;
      }
      else
      {
        if (v1982 <= 3) {
          uint64_t v244 = v1982;
        }
        else {
          uint64_t v244 = 4;
        }
        size_t v246 = v2020;
        uint64_t v245 = v2027;
        uint64_t v247 = v1970;
        switch(v244)
        {
          case 1:
            int v248 = *v72;
            goto LABEL_627;
          case 2:
            int v248 = *(unsigned __int16 *)v72;
            goto LABEL_627;
          case 3:
            int v248 = *(unsigned __int16 *)v72 | (v72[2] << 16);
            goto LABEL_627;
          case 4:
            int v248 = *(_DWORD *)v72;
LABEL_627:
            if (v1982 < 4) {
              unsigned int v242 = (v248 | (v243 << (8 * v1982))) + 2;
            }
            else {
              unsigned int v242 = v248 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v664 = v242 == 1;
      if (v242 == 1) {
        uint64_t v665 = v245;
      }
      else {
        uint64_t v665 = v247;
      }
      uint64_t v666 = v72;
      (*(void (**)(void *))(v665 + 16))(a1);
      *((unsigned char *)a1 + v1982) = v664;
      *((unsigned char *)a1 + v246) = v666[v246];
      uint64_t v273 = v2036;
      if (v2036 > 3) {
        goto LABEL_634;
      }
      unsigned int v667 = ((1 << (8 * v2036)) + 5) >> (8 * v2036);
      if (v667 > 0xFFD6)
      {
        int v498 = 13;
        goto LABEL_975;
      }
      if (v667 <= 0xD6)
      {
LABEL_634:
        char v274 = 13;
        goto LABEL_969;
      }
      __int16 v399 = 13;
      goto LABEL_973;
    case 0xEu:
      unsigned int v249 = v72[v1982];
      unsigned int v250 = v249 - 2;
      if (v249 < 2)
      {
        size_t v253 = v2020;
        uint64_t v252 = v2027;
        uint64_t v254 = v1970;
      }
      else
      {
        if (v1982 <= 3) {
          uint64_t v251 = v1982;
        }
        else {
          uint64_t v251 = 4;
        }
        size_t v253 = v2020;
        uint64_t v252 = v2027;
        uint64_t v254 = v1970;
        switch(v251)
        {
          case 1:
            int v255 = *v72;
            goto LABEL_642;
          case 2:
            int v255 = *(unsigned __int16 *)v72;
            goto LABEL_642;
          case 3:
            int v255 = *(unsigned __int16 *)v72 | (v72[2] << 16);
            goto LABEL_642;
          case 4:
            int v255 = *(_DWORD *)v72;
LABEL_642:
            if (v1982 < 4) {
              unsigned int v249 = (v255 | (v250 << (8 * v1982))) + 2;
            }
            else {
              unsigned int v249 = v255 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v668 = v249 == 1;
      if (v249 == 1) {
        uint64_t v669 = v252;
      }
      else {
        uint64_t v669 = v254;
      }
      uint64_t v670 = v72;
      (*(void (**)(void *))(v669 + 16))(a1);
      *((unsigned char *)a1 + v1982) = v668;
      uint64_t v671 = *(void *)((unint64_t)&v670[v253 + 7] & 0xFFFFFFFFFFFFFFF8);
      swift_errorRetain();
      *(void *)(((unint64_t)a1 + v253 + 7) & 0xFFFFFFFFFFFFFFF8) = v671;
      uint64_t v273 = v2036;
      if (v2036 > 3) {
        goto LABEL_649;
      }
      unsigned int v672 = ((1 << (8 * v2036)) + 5) >> (8 * v2036);
      if (v672 > 0xFFD6)
      {
        int v498 = 14;
        goto LABEL_975;
      }
      if (v672 <= 0xD6)
      {
LABEL_649:
        char v274 = 14;
        goto LABEL_969;
      }
      __int16 v399 = 14;
      goto LABEL_973;
    case 0xFu:
      unsigned int v256 = v72[v1982];
      unsigned int v257 = v256 - 2;
      if (v256 < 2)
      {
        size_t v260 = v2020;
        uint64_t v259 = v2027;
        uint64_t v261 = v1970;
      }
      else
      {
        if (v1982 <= 3) {
          uint64_t v258 = v1982;
        }
        else {
          uint64_t v258 = 4;
        }
        size_t v260 = v2020;
        uint64_t v259 = v2027;
        uint64_t v261 = v1970;
        switch(v258)
        {
          case 1:
            int v262 = *v72;
            goto LABEL_657;
          case 2:
            int v262 = *(unsigned __int16 *)v72;
            goto LABEL_657;
          case 3:
            int v262 = *(unsigned __int16 *)v72 | (v72[2] << 16);
            goto LABEL_657;
          case 4:
            int v262 = *(_DWORD *)v72;
LABEL_657:
            if (v1982 < 4) {
              unsigned int v256 = (v262 | (v257 << (8 * v1982))) + 2;
            }
            else {
              unsigned int v256 = v262 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v673 = v256 == 1;
      if (v256 == 1) {
        uint64_t v674 = v259;
      }
      else {
        uint64_t v674 = v261;
      }
      size_t v675 = v72;
      (*(void (**)(void *))(v674 + 16))(a1);
      *((unsigned char *)a1 + v1982) = v673;
      uint64_t v676 = *(void *)((unint64_t)&v675[v260 + 7] & 0xFFFFFFFFFFFFFFF8);
      swift_errorRetain();
      *(void *)(((unint64_t)a1 + v260 + 7) & 0xFFFFFFFFFFFFFFF8) = v676;
      uint64_t v273 = v2036;
      if (v2036 > 3) {
        goto LABEL_664;
      }
      unsigned int v677 = ((1 << (8 * v2036)) + 5) >> (8 * v2036);
      if (v677 > 0xFFD6)
      {
        int v498 = 15;
        goto LABEL_975;
      }
      if (v677 <= 0xD6)
      {
LABEL_664:
        char v274 = 15;
        goto LABEL_969;
      }
      __int16 v399 = 15;
      goto LABEL_973;
    case 0x10u:
      unint64_t v263 = v72;
      *a1 = *(void *)v72;
      unint64_t v264 = (uint64_t *)(v72 + 8);
      unint64_t v265 = *((void *)v72 + 2);
      if (v265 >> 60 == 15)
      {
        *(_OWORD *)(a1 + 1) = *(_OWORD *)v264;
      }
      else
      {
        uint64_t v397 = *v264;
        sub_10001EBB0(*v264, *((void *)v72 + 2));
        a1[1] = v397;
        a1[2] = v265;
      }
      uint64_t v273 = v2036;
      *(_OWORD *)(a1 + 3) = *(_OWORD *)(v263 + 24);
      *((unsigned char *)a1 + 40) = v263[40];
      a1[6] = *((void *)v263 + 6);
      if (v2036 > 3) {
        goto LABEL_349;
      }
      unsigned int v404 = ((1 << (8 * v2036)) + 5) >> (8 * v2036);
      if (v404 > 0xFFD6)
      {
        int v498 = 16;
        goto LABEL_975;
      }
      if (v404 <= 0xD6)
      {
LABEL_349:
        char v274 = 16;
        goto LABEL_969;
      }
      __int16 v399 = 16;
      goto LABEL_973;
    case 0x11u:
      unsigned int v266 = v72[v1982];
      unsigned int v267 = v266 - 2;
      if (v266 < 2)
      {
        uint64_t v269 = v2027;
        uint64_t v270 = v1970;
      }
      else
      {
        if (v1982 <= 3) {
          uint64_t v268 = v1982;
        }
        else {
          uint64_t v268 = 4;
        }
        uint64_t v269 = v2027;
        uint64_t v270 = v1970;
        switch(v268)
        {
          case 1:
            int v271 = *v72;
            goto LABEL_672;
          case 2:
            int v271 = *(unsigned __int16 *)v72;
            goto LABEL_672;
          case 3:
            int v271 = *(unsigned __int16 *)v72 | (v72[2] << 16);
            goto LABEL_672;
          case 4:
            int v271 = *(_DWORD *)v72;
LABEL_672:
            if (v1982 < 4) {
              unsigned int v266 = (v271 | (v267 << (8 * v1982))) + 2;
            }
            else {
              unsigned int v266 = v271 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v678 = v266 == 1;
      if (v266 == 1) {
        uint64_t v679 = v269;
      }
      else {
        uint64_t v679 = v270;
      }
      (*(void (**)(void *))(v679 + 16))(a1);
      *((unsigned char *)a1 + v1982) = v678;
      uint64_t v273 = v2036;
      if (v2036 > 3) {
        goto LABEL_679;
      }
      unsigned int v680 = ((1 << (8 * v2036)) + 5) >> (8 * v2036);
      if (v680 > 0xFFD6)
      {
        int v498 = 17;
        goto LABEL_975;
      }
      if (v680 <= 0xD6)
      {
LABEL_679:
        char v274 = 17;
        goto LABEL_969;
      }
      __int16 v399 = 17;
      goto LABEL_973;
    case 0x12u:
      uint64_t v272 = v72;
      (*(void (**)(void *))(v1970 + 16))(a1);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v2027 + 16))(((unint64_t)a1 + v1936) & v77, (unint64_t)&v272[v1936] & v77, v1969);
      uint64_t v273 = v2036;
      if (v2036 > 3) {
        goto LABEL_214;
      }
      unsigned int v398 = ((1 << (8 * v2036)) + 5) >> (8 * v2036);
      if (v398 > 0xFFD6)
      {
        int v498 = 18;
        goto LABEL_975;
      }
      if (v398 <= 0xD6)
      {
LABEL_214:
        char v274 = 18;
        goto LABEL_969;
      }
      __int16 v399 = 18;
      goto LABEL_973;
    case 0x13u:
      *(unsigned char *)a1 = *v72;
      uint64_t v275 = ((unint64_t)a1 + v1983 + 1) & v78;
      uint64_t v276 = (unsigned __int8 *)((unint64_t)&v72[v1983 + 1] & v78);
      unsigned int v277 = v276[v1982];
      unsigned int v278 = v277 - 2;
      if (v277 < 2)
      {
        uint64_t v280 = v2027;
        uint64_t v281 = v1970;
      }
      else
      {
        if (v1982 <= 3) {
          uint64_t v279 = v1982;
        }
        else {
          uint64_t v279 = 4;
        }
        uint64_t v280 = v2027;
        uint64_t v281 = v1970;
        switch(v279)
        {
          case 1:
            int v282 = *v276;
            goto LABEL_687;
          case 2:
            int v282 = *(unsigned __int16 *)v276;
            goto LABEL_687;
          case 3:
            int v282 = *(unsigned __int16 *)v276 | (v276[2] << 16);
            goto LABEL_687;
          case 4:
            int v282 = *(_DWORD *)v276;
LABEL_687:
            if (v1982 < 4) {
              unsigned int v277 = (v282 | (v278 << (8 * v1982))) + 2;
            }
            else {
              unsigned int v277 = v282 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v681 = v277 == 1;
      if (v277 == 1) {
        uint64_t v682 = v280;
      }
      else {
        uint64_t v682 = v281;
      }
      (*(void (**)(uint64_t))(v682 + 16))(v275);
      *(unsigned char *)(v275 + v1982) = v681;
      uint64_t v273 = v2036;
      if (v2036 > 3) {
        goto LABEL_694;
      }
      unsigned int v683 = ((1 << (8 * v2036)) + 5) >> (8 * v2036);
      if (v683 > 0xFFD6)
      {
        int v498 = 19;
        goto LABEL_975;
      }
      if (v683 <= 0xD6)
      {
LABEL_694:
        char v274 = 19;
        goto LABEL_969;
      }
      __int16 v399 = 19;
      goto LABEL_973;
    case 0x14u:
      *a1 = *(void *)v72;
      swift_retain();
      uint64_t v273 = v2036;
      if (v2036 > 3) {
        goto LABEL_222;
      }
      unsigned int v400 = ((1 << (8 * v2036)) + 5) >> (8 * v2036);
      if (v400 > 0xFFD6)
      {
        int v498 = 20;
        goto LABEL_975;
      }
      if (v400 <= 0xD6)
      {
LABEL_222:
        char v274 = 20;
        goto LABEL_969;
      }
      __int16 v399 = 20;
      goto LABEL_973;
    case 0x15u:
      *a1 = *(void *)v72;
      swift_retain();
      uint64_t v273 = v2036;
      if (v2036 > 3) {
        goto LABEL_224;
      }
      unsigned int v401 = ((1 << (8 * v2036)) + 5) >> (8 * v2036);
      if (v401 > 0xFFD6)
      {
        int v498 = 21;
        goto LABEL_975;
      }
      if (v401 <= 0xD6)
      {
LABEL_224:
        char v274 = 21;
        goto LABEL_969;
      }
      __int16 v399 = 21;
      goto LABEL_973;
    case 0x16u:
      *(unsigned char *)a1 = *v72;
      uint64_t v273 = v2036;
      if (v2036 > 3) {
        goto LABEL_226;
      }
      unsigned int v402 = ((1 << (8 * v2036)) + 5) >> (8 * v2036);
      if (v402 > 0xFFD6)
      {
        int v498 = 22;
        goto LABEL_975;
      }
      if (v402 <= 0xD6)
      {
LABEL_226:
        char v274 = 22;
        goto LABEL_969;
      }
      __int16 v399 = 22;
      goto LABEL_973;
    case 0x17u:
      *(unsigned char *)a1 = *v72;
      uint64_t v273 = v2036;
      if (v2036 > 3) {
        goto LABEL_228;
      }
      unsigned int v403 = ((1 << (8 * v2036)) + 5) >> (8 * v2036);
      if (v403 > 0xFFD6)
      {
        int v498 = 23;
        goto LABEL_975;
      }
      if (v403 <= 0xD6)
      {
LABEL_228:
        char v274 = 23;
        goto LABEL_969;
      }
      __int16 v399 = 23;
      goto LABEL_973;
    case 0x18u:
      unsigned int v283 = v72[v1982];
      unsigned int v284 = v283 - 2;
      if (v283 < 2)
      {
        uint64_t v286 = v2027;
        uint64_t v287 = v1970;
      }
      else
      {
        if (v1982 <= 3) {
          uint64_t v285 = v1982;
        }
        else {
          uint64_t v285 = 4;
        }
        uint64_t v286 = v2027;
        uint64_t v287 = v1970;
        switch(v285)
        {
          case 1:
            int v288 = *v72;
            goto LABEL_702;
          case 2:
            int v288 = *(unsigned __int16 *)v72;
            goto LABEL_702;
          case 3:
            int v288 = *(unsigned __int16 *)v72 | (v72[2] << 16);
            goto LABEL_702;
          case 4:
            int v288 = *(_DWORD *)v72;
LABEL_702:
            if (v1982 < 4) {
              unsigned int v283 = (v288 | (v284 << (8 * v1982))) + 2;
            }
            else {
              unsigned int v283 = v288 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v684 = v283 == 1;
      if (v283 == 1) {
        uint64_t v685 = v286;
      }
      else {
        uint64_t v685 = v287;
      }
      (*(void (**)(void *))(v685 + 16))(a1);
      *((unsigned char *)a1 + v1982) = v684;
      uint64_t v273 = v2036;
      if (v2036 > 3) {
        goto LABEL_709;
      }
      unsigned int v686 = ((1 << (8 * v2036)) + 5) >> (8 * v2036);
      if (v686 > 0xFFD6)
      {
        int v498 = 24;
        goto LABEL_975;
      }
      if (v686 <= 0xD6)
      {
LABEL_709:
        char v274 = 24;
        goto LABEL_969;
      }
      __int16 v399 = 24;
      goto LABEL_973;
    case 0x19u:
      unsigned int v289 = v72[v1982];
      unsigned int v290 = v289 - 2;
      if (v289 < 2)
      {
        uint64_t v292 = v2027;
        uint64_t v293 = v1970;
      }
      else
      {
        if (v1982 <= 3) {
          uint64_t v291 = v1982;
        }
        else {
          uint64_t v291 = 4;
        }
        uint64_t v292 = v2027;
        uint64_t v293 = v1970;
        switch(v291)
        {
          case 1:
            int v294 = *v72;
            goto LABEL_717;
          case 2:
            int v294 = *(unsigned __int16 *)v72;
            goto LABEL_717;
          case 3:
            int v294 = *(unsigned __int16 *)v72 | (v72[2] << 16);
            goto LABEL_717;
          case 4:
            int v294 = *(_DWORD *)v72;
LABEL_717:
            if (v1982 < 4) {
              unsigned int v289 = (v294 | (v290 << (8 * v1982))) + 2;
            }
            else {
              unsigned int v289 = v294 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v687 = v289 == 1;
      if (v289 == 1) {
        uint64_t v688 = v292;
      }
      else {
        uint64_t v688 = v293;
      }
      (*(void (**)(void *))(v688 + 16))(a1);
      *((unsigned char *)a1 + v1982) = v687;
      uint64_t v273 = v2036;
      if (v2036 > 3) {
        goto LABEL_724;
      }
      unsigned int v689 = ((1 << (8 * v2036)) + 5) >> (8 * v2036);
      if (v689 > 0xFFD6)
      {
        int v498 = 25;
        goto LABEL_975;
      }
      if (v689 <= 0xD6)
      {
LABEL_724:
        char v274 = 25;
        goto LABEL_969;
      }
      __int16 v399 = 25;
      goto LABEL_973;
    case 0x1Au:
      unsigned int v295 = v72[v1982];
      unsigned int v296 = v295 - 2;
      if (v295 < 2)
      {
        uint64_t v298 = v2027;
        uint64_t v299 = v1970;
      }
      else
      {
        if (v1982 <= 3) {
          uint64_t v297 = v1982;
        }
        else {
          uint64_t v297 = 4;
        }
        uint64_t v298 = v2027;
        uint64_t v299 = v1970;
        switch(v297)
        {
          case 1:
            int v300 = *v72;
            goto LABEL_732;
          case 2:
            int v300 = *(unsigned __int16 *)v72;
            goto LABEL_732;
          case 3:
            int v300 = *(unsigned __int16 *)v72 | (v72[2] << 16);
            goto LABEL_732;
          case 4:
            int v300 = *(_DWORD *)v72;
LABEL_732:
            if (v1982 < 4) {
              unsigned int v295 = (v300 | (v296 << (8 * v1982))) + 2;
            }
            else {
              unsigned int v295 = v300 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v690 = v295 == 1;
      if (v295 == 1) {
        uint64_t v691 = v298;
      }
      else {
        uint64_t v691 = v299;
      }
      (*(void (**)(void *))(v691 + 16))(a1);
      *((unsigned char *)a1 + v1982) = v690;
      uint64_t v273 = v2036;
      if (v2036 > 3) {
        goto LABEL_739;
      }
      unsigned int v692 = ((1 << (8 * v2036)) + 5) >> (8 * v2036);
      if (v692 > 0xFFD6)
      {
        int v498 = 26;
        goto LABEL_975;
      }
      if (v692 <= 0xD6)
      {
LABEL_739:
        char v274 = 26;
        goto LABEL_969;
      }
      __int16 v399 = 26;
      goto LABEL_973;
    case 0x1Bu:
      uint64_t v301 = ~v1987;
      uint64_t v1999 = ~v2060;
      uint64_t v2064 = ~v1990;
      uint64_t v1888 = ~v37;
      uint64_t v1890 = ~v1971;
      unint64_t v302 = v69;
      unsigned int v303 = v72[v69];
      unsigned int v304 = v303 - 2;
      if (v303 < 2)
      {
        uint64_t v306 = ~v2050;
      }
      else
      {
        if (v69 <= 3) {
          uint64_t v305 = v69;
        }
        else {
          uint64_t v305 = 4;
        }
        uint64_t v306 = ~v2050;
        switch(v305)
        {
          case 1:
            int v307 = *v72;
            goto LABEL_747;
          case 2:
            int v307 = *(unsigned __int16 *)v72;
            goto LABEL_747;
          case 3:
            int v307 = *(unsigned __int16 *)v72 | (v72[2] << 16);
            goto LABEL_747;
          case 4:
            int v307 = *(_DWORD *)v72;
LABEL_747:
            if (v69 < 4) {
              unsigned int v303 = (v307 | (v304 << (8 * v69))) + 2;
            }
            else {
              unsigned int v303 = v307 + 2;
            }
            break;
          default:
            break;
        }
      }
      uint64_t v1986 = ~v2039;
      if (v303 == 1)
      {
        uint64_t v2042 = ~v1976;
        unsigned int v693 = v72[v1916];
        unsigned int v694 = v693 - 8;
        uint64_t v695 = v1970;
        if (v693 >= 8)
        {
          if (v1916 <= 3) {
            uint64_t v696 = v1916;
          }
          else {
            uint64_t v696 = 4;
          }
          switch(v696)
          {
            case 1:
              int v697 = *v72;
              goto LABEL_1196;
            case 2:
              int v697 = *(unsigned __int16 *)v72;
              goto LABEL_1196;
            case 3:
              int v697 = *(unsigned __int16 *)v72 | (v72[2] << 16);
              goto LABEL_1196;
            case 4:
              int v697 = *(_DWORD *)v72;
LABEL_1196:
              if (v1916 < 4) {
                unsigned int v693 = (v697 | (v694 << (8 * v1916))) + 8;
              }
              else {
                unsigned int v693 = v697 + 8;
              }
              break;
            default:
              break;
          }
        }
        uint64_t v1146 = ~v57;
        switch(v693)
        {
          case 1u:
            unint64_t v1154 = v69;
            unint64_t v2006 = v38;
            size_t v1895 = v40;
            unsigned int v1155 = v72;
            uint64_t v1994 = *(void (**)(void *, const void *, uint64_t))(v2027 + 16);
            ((void (*)(void *))v1994)(a1);
            uint64_t v1996 = (void *)(((unint64_t)a1 + v1910) & v301);
            v1156 = (const void *)((unint64_t)&v1155[v1910] & v301);
            unint64_t v2011 = v1156;
            if (v1930 == v1929)
            {
              int v1157 = (*(uint64_t (**)(unint64_t))(v2027 + 48))((unint64_t)&v1155[v1910] & v301);
              v1156 = (const void *)((unint64_t)&v1155[v1910] & v301);
              unint64_t v1158 = v1916;
              uint64_t v1159 = v1888;
              unint64_t v1160 = v1154;
              uint64_t v1161 = v2050;
              v1162 = (void *)(((unint64_t)a1 + v1910) & v301);
              goto LABEL_1384;
            }
            uint64_t v1161 = v2050;
            unint64_t v1216 = ((unint64_t)v1156 + v1956) & v2064;
            uint64_t v1159 = v1888;
            unint64_t v1217 = (v1928 + v1216) & v1888;
            if (v1940 == v1929)
            {
              unint64_t v1158 = v1916;
              v1162 = v1996;
              if (v1932 == v1940)
              {
                int v1157 = (*(uint64_t (**)(unint64_t))(v1952 + 48))((v1928 + v1216) & v1888);
              }
              else
              {
                v1280 = (unint64_t *)((v1960 + v1217) & 0xFFFFFFFFFFFFFFF8);
                if (v1924 <= 0x7FFFFFFE)
                {
                  unint64_t v1281 = *v1280;
                  if (v1281 >= 0xFFFFFFFF) {
                    LODWORD(v1281) = -1;
                  }
                  unint64_t v1160 = v1154;
                  if ((v1281 + 1) >= 2) {
                    goto LABEL_1385;
                  }
                  goto LABEL_1388;
                }
                int v1157 = ((uint64_t (*)(unint64_t))v1953[6])(((unint64_t)v1280 + v1954) & v86);
              }
              v1156 = v2011;
              uint64_t v1159 = v1888;
              goto LABEL_1383;
            }
            unint64_t v1244 = v1217 + v38;
            unint64_t v1158 = v1916;
            v1162 = v1996;
            if ((v1914 & 0x80000000) == 0)
            {
              unint64_t v1245 = *(void *)(v1244 + 8);
              if (v1245 >= 0xFFFFFFFF) {
                LODWORD(v1245) = -1;
              }
              int v1157 = v1245 + 1;
LABEL_1383:
              unint64_t v1160 = v1154;
              goto LABEL_1384;
            }
            uint64_t v1291 = (v1965 + ((v2018 + v1244) & v1986)) & v2042;
            unint64_t v1160 = v1154;
            if (v1944 <= 0x7FFFFFFD)
            {
              unint64_t v1884 = *(void *)(((v1912 + ((v1961 + v1291) & v2042)) & 0xFFFFFFFFFFFFFFF8) + 8);
              if (v1884 >= 0xFFFFFFFF) {
                LODWORD(v1884) = -1;
              }
              if ((v1884 + 1) >= 2) {
                goto LABEL_1385;
              }
              goto LABEL_1388;
            }
            int v1157 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v1963 + 48))(v1291, v1944, v1962);
            v1156 = v2011;
            uint64_t v1159 = v1888;
LABEL_1384:
            if (v1157)
            {
LABEL_1385:
              memcpy(v1162, v1156, v1895);
              size_t v1374 = v2013;
LABEL_1386:
              size_t v1375 = __n;
              goto LABEL_1477;
            }
            unint64_t v1216 = ((unint64_t)v1156 + v1956) & v2064;
            unint64_t v1217 = (v1928 + v1216) & v1159;
LABEL_1388:
            unint64_t v2022 = v1160;
            uint64_t v1376 = v1159;
            v1994(v1162, v1156, v1969);
            v1994((void *)(((unint64_t)v1162 + v1956) & v2064), (const void *)v1216, v1969);
            unint64_t v1377 = (v1928 + (((unint64_t)v1162 + v1956) & v2064)) & v1376;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v1952 + 16))(v1377, v1217, v1951);
            id v1378 = (void *)((v1960 + v1377) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1379 = (void *)((v1960 + v1217) & 0xFFFFFFFFFFFFFFF8);
            *id v1378 = *v1379;
            unint64_t v1380 = ((unint64_t)v1378 + v1954) & v86;
            unint64_t v1381 = ((unint64_t)v1379 + v1954) & v86;
            v1382 = (void (*)(unint64_t, unint64_t, uint64_t))v1953[2];
            swift_bridgeObjectRetain();
            v1382(v1380, v1381, v1948);
            uint64_t v1383 = (void *)((v1942 + v1381) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1384 = (void *)((v1942 + v1380) & 0xFFFFFFFFFFFFFFF8);
            *unint64_t v1384 = *v1383;
            v1385 = (void *)(((unint64_t)v1384 + 15) & 0xFFFFFFFFFFFFFFF8);
            v1386 = (void *)(((unint64_t)v1383 + 15) & 0xFFFFFFFFFFFFFFF8);
            void *v1385 = *v1386;
            v1385[1] = v1386[1];
            unint64_t v1387 = (void *)(v1377 + v2006);
            *unint64_t v1387 = *(void *)(v1217 + v2006);
            v1387[1] = *(void *)(v1217 + v2006 + 8);
            uint64_t v1388 = (v2018 + v1377 + v2006) & v1986;
            uint64_t v1389 = (v2018 + v1217 + v2006) & v1986;
            *(unsigned char *)uint64_t v1388 = *(unsigned char *)v1389;
            uint64_t v1390 = v1388 | 4;
            int v1391 = *(_DWORD *)(v1389 | 4);
            *(unsigned char *)(v1390 + 4) = *(unsigned char *)((v1389 | 4) + 4);
            *(_DWORD *)uint64_t v1390 = v1391;
            *(_WORD *)(v1388 + 10) = *(_WORD *)(v1389 + 0xA);
            uint64_t v2074 = v1388;
            uint64_t v1392 = (v1965 + v1388) & v2042;
            uint64_t v2030 = v1389;
            uint64_t v1393 = (v1965 + v1389) & v2042;
            v1394 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1963 + 16);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v1394(v1392, v1393, v1962);
            uint64_t v1395 = (v1961 + v1392) & v2042;
            uint64_t v1396 = (v1961 + v1393) & v2042;
            v1394(v1395, v1396, v1962);
            uint64_t v1397 = (unsigned char *)(v1395 + v1966);
            *uint64_t v1397 = *(unsigned char *)(v1396 + v1966);
            v1397[1] = *(unsigned char *)(v1396 + v1966 + 1);
            v1397[2] = *(unsigned char *)(v1396 + v1966 + 2);
            v1397[3] = *(unsigned char *)(v1396 + v1966 + 3);
            v1397[4] = *(unsigned char *)(v1396 + v1966 + 4);
            unint64_t v1398 = (v1395 + v1966 + 12) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1399 = (v1396 + v1966 + 12) & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v1398 = *(void *)v1399;
            *(void *)(v1398 + 8) = *(void *)(v1399 + 8);
            *(unsigned char *)(v1398 + 16) = *(unsigned char *)(v1399 + 16);
            *(unsigned char *)(v1398 + 17) = *(unsigned char *)(v1399 + 17);
            *(unsigned char *)(v1398 + 18) = *(unsigned char *)(v1399 + 18);
            *(unsigned char *)(v1398 + 19) = *(unsigned char *)(v1399 + 19);
            unint64_t v1400 = (v1398 + 27) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1401 = (v1399 + 27) & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v1400 = *(void *)v1401;
            *(unsigned char *)(v1400 + 8) = *(unsigned char *)(v1401 + 8);
            *(unsigned char *)(v1400 + 9) = *(unsigned char *)(v1401 + 9);
            *(unsigned char *)(v1400 + 10) = *(unsigned char *)(v1401 + 10);
            *(unsigned char *)(v1400 + 11) = *(unsigned char *)(v1401 + 11);
            *(unsigned char *)(v1400 + 12) = *(unsigned char *)(v1401 + 12);
            unint64_t v1402 = (void *)((v1399 + 47) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1403 = (void *)((v1398 + 47) & 0xFFFFFFFFFFFFFFF8);
            *unint64_t v1403 = *v1402;
            unint64_t v1404 = ((unint64_t)v1403 + 15) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1405 = ((unint64_t)v1402 + 15) & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v1404 = *(void *)v1405;
            *(unsigned char *)(v1404 + 8) = *(unsigned char *)(v1405 + 8);
            *(unsigned char *)(v1404 + 9) = *(unsigned char *)(v1405 + 9);
            unint64_t v1406 = (void *)((v1958 + v1404) & v2042);
            unint64_t v1407 = (const void *)((v1958 + v1405) & v2042);
            unint64_t v1408 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v1963 + 48);
            swift_bridgeObjectRetain();
            if (v1408(v1407, 1, v1962))
            {
              memcpy(v1406, v1407, __n);
            }
            else
            {
              v1394((uint64_t)v1406, (uint64_t)v1407, v1962);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v1963 + 56))(v1406, 0, 1, v1962);
            }
            v1409 = (void *)(((unint64_t)v1406 + v1959) & 0xFFFFFFFFFFFFFFF8);
            v1410 = (void *)(((unint64_t)v1407 + v1959) & 0xFFFFFFFFFFFFFFF8);
            void *v1409 = *v1410;
            unint64_t v1411 = ((unint64_t)v1409 + 15) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1412 = ((unint64_t)v1410 + 15) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v1413 = *(void *)v1412;
            *(unsigned char *)(v1411 + 8) = *(unsigned char *)(v1412 + 8);
            *(void *)unint64_t v1411 = v1413;
            v1414 = (void *)(((unint64_t)v1409 + 31) & 0xFFFFFFFFFFFFFFF8);
            v1415 = (void *)(((unint64_t)v1410 + 31) & 0xFFFFFFFFFFFFFFF8);
            void *v1414 = *v1415;
            unint64_t v1416 = ((unint64_t)v1414 + 15) & 0xFFFFFFFFFFFFFFF8;
            v1417 = (uint64_t *)(((unint64_t)v1415 + 15) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1418 = v1417[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            uint64_t v695 = v1970;
            size_t v1374 = v2013;
            unint64_t v1158 = v1916;
            if ((v1418 & 0x3000000000000000) != 0)
            {
              *(_OWORD *)unint64_t v1416 = *(_OWORD *)v1417;
            }
            else
            {
              uint64_t v1419 = *v1417;
              sub_10001EBB0(*v1417, v1418);
              *(void *)unint64_t v1416 = v1419;
              *(void *)(v1416 + 8) = v1418;
            }
            unint64_t v1420 = (v1416 + 19) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1421 = ((unint64_t)v1417 + 19) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v1422 = *(void *)v1421;
            *(unsigned char *)(v1420 + 8) = *(unsigned char *)(v1421 + 8);
            *(void *)unint64_t v1420 = v1422;
            *(unsigned char *)(v1420 + 9) = *(unsigned char *)(v1421 + 9);
            unint64_t v1423 = (v1420 + 13) & 0xFFFFFFFFFFFFFFFCLL;
            unint64_t v1424 = (v1421 + 13) & 0xFFFFFFFFFFFFFFFCLL;
            int v1425 = *(_DWORD *)v1424;
            *(unsigned char *)(v1423 + 4) = *(unsigned char *)(v1424 + 4);
            *(_DWORD *)unint64_t v1423 = v1425;
            uint64_t v1426 = (void *)((v1420 + 25) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1427 = (void *)((v1421 + 25) & 0xFFFFFFFFFFFFFFF8);
            *uint64_t v1426 = *v1427;
            v1426[1] = v1427[1];
            unint64_t v1428 = v2074 + v2017;
            uint64_t v1429 = (long long *)(v2030 + v2017);
            unint64_t v1430 = *(void *)(v2030 + v2017 + 16);
            if (v1430 >= 0xFFFFFFFF) {
              LODWORD(v1430) = -1;
            }
            int v1431 = v1430 - 1;
            swift_bridgeObjectRetain();
            unint64_t v1432 = v2022;
            if (v1431 < 0)
            {
              *(void *)unint64_t v1428 = *(void *)v1429;
              *(unsigned char *)(v1428 + 8) = *((unsigned char *)v1429 + 8);
              *(unsigned char *)(v1428 + 9) = *((unsigned char *)v1429 + 9);
              uint64_t v1445 = *((void *)v1429 + 2);
              swift_errorRetain();
              *(void *)(v1428 + 16) = v1445;
              uint64_t v1446 = *((void *)v1429 + 3);
              swift_errorRetain();
              *(void *)(v1428 + 24) = v1446;
              *(unsigned char *)(v1428 + 32) = *((unsigned char *)v1429 + 32);
              *(unsigned char *)(v1428 + 33) = *((unsigned char *)v1429 + 33);
              *(unsigned char *)(v1428 + 34) = *((unsigned char *)v1429 + 34);
              *(void *)(v1428 + 40) = *((void *)v1429 + 5);
              *(void *)(v1428 + 48) = *((void *)v1429 + 6);
              *(void *)(v1428 + 56) = *((void *)v1429 + 7);
              *(void *)(v1428 + 64) = *((void *)v1429 + 8);
              *(unsigned char *)(v1428 + 72) = *((unsigned char *)v1429 + 72);
              *(void *)(v1428 + 80) = *((void *)v1429 + 10);
              *(void *)(v1428 + 88) = *((void *)v1429 + 11);
              size_t v2075 = (void *)*((void *)v1429 + 12);
              *(void *)(v1428 + 96) = v2075;
              *(unsigned char *)(v1428 + 104) = *((unsigned char *)v1429 + 104);
              *(unsigned char *)(v1428 + 105) = *((unsigned char *)v1429 + 105);
              *(void *)(v1428 + 112) = *((void *)v1429 + 14);
              *(void *)(v1428 + 120) = *((void *)v1429 + 15);
              *(void *)(v1428 + 128) = *((void *)v1429 + 16);
              *(void *)(v1428 + 136) = *((void *)v1429 + 17);
              *(void *)(v1428 + 144) = *((void *)v1429 + 18);
              *(void *)(v1428 + 152) = *((void *)v1429 + 19);
              *(void *)(v1428 + 160) = *((void *)v1429 + 20);
              *(void *)(v1428 + 168) = *((void *)v1429 + 21);
              *(unsigned char *)(v1428 + 176) = *((unsigned char *)v1429 + 176);
              *(void *)(v1428 + 184) = *((void *)v1429 + 23);
              uint64_t v2031 = *((void *)v1429 + 24);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              id v1447 = v2075;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (v2031)
              {
                *(void *)(v1428 + 192) = v2031;
                *(void *)(v1428 + 200) = *((void *)v1429 + 25);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
              }
              else
              {
                *(_OWORD *)(v1428 + 192) = v1429[12];
              }
              unint64_t v1432 = v2022;
              uint64_t v695 = v1970;
              size_t v1374 = v2013;
              unint64_t v1158 = v1916;
              uint64_t v1161 = v2050;
              *(void *)(v1428 + 208) = *((void *)v1429 + 26);
              *(void *)(v1428 + 216) = *((void *)v1429 + 27);
              *(void *)(v1428 + 224) = *((void *)v1429 + 28);
              *(void *)(v1428 + 232) = *((void *)v1429 + 29);
              *(void *)(v1428 + 240) = *((void *)v1429 + 30);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }
            else
            {
              long long v1433 = *v1429;
              long long v1434 = v1429[1];
              long long v1435 = v1429[3];
              *(_OWORD *)(v1428 + 32) = v1429[2];
              *(_OWORD *)(v1428 + 48) = v1435;
              *(_OWORD *)unint64_t v1428 = v1433;
              *(_OWORD *)(v1428 + 16) = v1434;
              long long v1436 = v1429[4];
              long long v1437 = v1429[5];
              long long v1438 = v1429[7];
              *(_OWORD *)(v1428 + 96) = v1429[6];
              *(_OWORD *)(v1428 + 112) = v1438;
              *(_OWORD *)(v1428 + 64) = v1436;
              *(_OWORD *)(v1428 + 80) = v1437;
              long long v1439 = v1429[8];
              long long v1440 = v1429[9];
              long long v1441 = v1429[11];
              *(_OWORD *)(v1428 + 160) = v1429[10];
              *(_OWORD *)(v1428 + 176) = v1441;
              *(_OWORD *)(v1428 + 128) = v1439;
              *(_OWORD *)(v1428 + 144) = v1440;
              long long v1442 = v1429[12];
              long long v1443 = v1429[13];
              long long v1444 = v1429[14];
              *(void *)(v1428 + 240) = *((void *)v1429 + 30);
              *(_OWORD *)(v1428 + 208) = v1443;
              *(_OWORD *)(v1428 + 224) = v1444;
              *(_OWORD *)(v1428 + 192) = v1442;
              uint64_t v1161 = v2050;
            }
            unint64_t v1767 = (_OWORD *)((v1428 + 255) & 0xFFFFFFFFFFFFFFF8);
            v1768 = (long long *)(((unint64_t)v1429 + 255) & 0xFFFFFFFFFFFFFFF8);
            long long v1769 = *v1768;
            *(_OWORD *)((char *)v1767 + 9) = *(long long *)((char *)v1768 + 9);
            *unint64_t v1767 = v1769;
            unint64_t v1770 = (v1428 + 287) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1771 = ((unint64_t)v1429 + 287) & 0xFFFFFFFFFFFFFFF8;
            long long v1772 = *(_OWORD *)v1771;
            *(unsigned char *)(v1770 + 16) = *(unsigned char *)(v1771 + 16);
            *(_OWORD *)unint64_t v1770 = v1772;
            v1773 = (void *)((v1428 + 311) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1774 = ((unint64_t)v1429 + 311) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v1775 = *(void *)v1774;
            v1774 += 15;
            void *v1773 = v1775;
            unint64_t v1776 = (void *)(((unint64_t)v1773 + 15) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v1777 = *(void *)(v1774 & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1778 = *(void *)((v1774 & 0xFFFFFFFFFFFFFFF8) + 8);
            sub_10018B584(v1777, v1778);
            *unint64_t v1776 = v1777;
            v1776[1] = v1778;
            size_t v1375 = v1966;
            unint64_t v1160 = v1432;
            v1162 = v1996;
            if (!v1944) {
              goto LABEL_1386;
            }
LABEL_1477:
            unint64_t v1779 = ((((v1926
                      + ((((((((((v1943 + v1375 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                          + 19) & 0xFFFFFFFFFFFFFFF8)
                        + 25) & 0xFFFFFFFFFFFFFFF8)
                      + 327) & 0xFFFFFFFFFFFFFFF8)
                    + 15) & 0xFFFFFFFFFFFFFFF8)
                  + 16;
            uint64_t v1780 = (void *)(((unint64_t)v1162 + v1161 + v1779) & v79);
            v1781 = (const void *)(((unint64_t)v2011 + v1161 + v1779) & v79);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v695 + 48))(v1781, 1, AssociatedTypeWitness))
            {
              memcpy(v1780, v1781, v1925);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v695 + 16))(v1780, v1781, AssociatedTypeWitness);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v695 + 56))(v1780, 0, 1, AssociatedTypeWitness);
            }
            unint64_t v1782 = v1160;
            uint64_t v1229 = v2036;
            uint64_t v1783 = (char *)(((unint64_t)v1780 + v1908) & v1999);
            unint64_t v1784 = (char *)(((unint64_t)v1781 + v1908) & v1999);
            if (v1931 == v1939)
            {
              int v1785 = (*(uint64_t (**)(unint64_t))(v1950 + 48))(((unint64_t)v1781 + v1908) & v1999);
            }
            else
            {
              v1786 = (uint64_t *)((unint64_t)&v1784[v1955] & 0xFFFFFFFFFFFFFFF8);
              if (v1917 <= 0x7FFFFFFE)
              {
                uint64_t v1787 = *v1786;
                if ((unint64_t)*v1786 >= 0xFFFFFFFF) {
                  LODWORD(v1787) = -1;
                }
                if ((v1787 + 1) >= 2) {
                  goto LABEL_1489;
                }
                goto LABEL_1491;
              }
              int v1785 = (*(uint64_t (**)(unint64_t))(v1947 + 48))(((unint64_t)v1786 + v1945) & v1890);
            }
            if (v1785)
            {
LABEL_1489:
              memcpy(v1783, v1784, v1374);
              goto LABEL_1492;
            }
            v1786 = (uint64_t *)((unint64_t)&v1784[v1955] & 0xFFFFFFFFFFFFFFF8);
LABEL_1491:
            (*(void (**)(char *, char *, uint64_t))(v1950 + 16))(v1783, v1784, v1949);
            v1788 = (void *)((unint64_t)&v1783[v1955] & 0xFFFFFFFFFFFFFFF8);
            void *v1788 = *v1786;
            unint64_t v1789 = ((unint64_t)v1788 + v1945) & v1890;
            unint64_t v1790 = ((unint64_t)v1786 + v1945) & v1890;
            uint64_t v1791 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1947 + 16);
            swift_bridgeObjectRetain();
            v1791(v1789, v1790, v1946);
            unint64_t v1792 = (void *)((v1941 + v1789) & 0xFFFFFFFFFFFFFFF8);
            v1793 = (void *)((v1941 + v1790) & 0xFFFFFFFFFFFFFFF8);
            *unint64_t v1792 = *v1793;
            unint64_t v1794 = (void *)(((unint64_t)v1792 + 15) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1795 = (void *)(((unint64_t)v1793 + 15) & 0xFFFFFFFFFFFFFFF8);
            *unint64_t v1794 = *v1795;
            v1794[1] = v1795[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
LABEL_1492:
            unint64_t v302 = v1782;
            *(void *)&v1783[v1374] = *(void *)&v1784[v1374];
            v1796 = (void *)((unint64_t)&v1783[v1374 + 15] & 0xFFFFFFFFFFFFFFF8);
            v1797 = (void *)((unint64_t)&v1784[v1374 + 15] & 0xFFFFFFFFFFFFFFF8);
            void *v1796 = *v1797;
            v1798 = *(void **)(((unint64_t)v1797 + 15) & 0xFFFFFFFFFFFFFFF8);
            *(void *)(((unint64_t)v1796 + 15) & 0xFFFFFFFFFFFFFFF8) = v1798;
            char v1208 = 1;
            *((unsigned char *)a1 + v1158) = 1;
            id v1799 = v1798;
            goto LABEL_1499;
          case 2u:
            unint64_t v1163 = v72;
            (*(void (**)(void *))(v2027 + 16))(a1);
            uint64_t v1164 = (void *)(((unint64_t)a1 + v1904) & v306);
            v1165 = (const void *)((unint64_t)&v1163[v1904] & v306);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1970 + 48))(v1165, 1, AssociatedTypeWitness))
            {
              memcpy(v1164, v1165, v1925);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v1970 + 16))(v1164, v1165, AssociatedTypeWitness);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v1970 + 56))(v1164, 0, 1, AssociatedTypeWitness);
            }
            size_t v1227 = v2013;
            unint64_t v1228 = v302;
            uint64_t v1229 = v2036;
            v1230 = (char *)(((unint64_t)v1164 + v1908) & v1999);
            int v1231 = (char *)(((unint64_t)v1165 + v1908) & v1999);
            if (v1931 == v1939)
            {
              int v1232 = (*(uint64_t (**)(char *))(v1950 + 48))(v1231);
            }
            else
            {
              uint64_t v1233 = (uint64_t *)((unint64_t)&v1231[v1955] & 0xFFFFFFFFFFFFFFF8);
              if (v1917 <= 0x7FFFFFFE)
              {
                uint64_t v1234 = *v1233;
                if ((unint64_t)*v1233 >= 0xFFFFFFFF) {
                  LODWORD(v1234) = -1;
                }
                if ((v1234 + 1) >= 2) {
                  goto LABEL_1319;
                }
                goto LABEL_1321;
              }
              int v1232 = (*(uint64_t (**)(unint64_t))(v1947 + 48))(((unint64_t)v1233 + v1945) & v1890);
            }
            if (v1232)
            {
LABEL_1319:
              memcpy(v1230, v1231, v2013);
              goto LABEL_1322;
            }
            uint64_t v1233 = (uint64_t *)((unint64_t)&v1231[v1955] & 0xFFFFFFFFFFFFFFF8);
LABEL_1321:
            (*(void (**)(char *, char *, uint64_t))(v1950 + 16))(v1230, v1231, v1949);
            size_t v1254 = (void *)((unint64_t)&v1230[v1955] & 0xFFFFFFFFFFFFFFF8);
            *size_t v1254 = *v1233;
            unint64_t v1255 = ((unint64_t)v1254 + v1945) & v1890;
            unint64_t v1256 = ((unint64_t)v1233 + v1945) & v1890;
            size_t v1257 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1947 + 16);
            swift_bridgeObjectRetain();
            v1257(v1255, v1256, v1946);
            size_t v1227 = v2013;
            uint64_t v1258 = (void *)((v1941 + v1255) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1259 = (void *)((v1941 + v1256) & 0xFFFFFFFFFFFFFFF8);
            *uint64_t v1258 = *v1259;
            unint64_t v1260 = (void *)(((unint64_t)v1258 + 15) & 0xFFFFFFFFFFFFFFF8);
            v1261 = (void *)(((unint64_t)v1259 + 15) & 0xFFFFFFFFFFFFFFF8);
            *unint64_t v1260 = *v1261;
            v1260[1] = v1261[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
LABEL_1322:
            unint64_t v302 = v1228;
            unint64_t v1262 = &v1230[v1227];
            *unint64_t v1262 = v1231[v1227];
            unint64_t v1263 = *(void **)&v1231[v1227 + 8];
            *((void *)v1262 + 1) = v1263;
            *((unsigned char *)a1 + v1916) = 2;
            id v1264 = v1263;
            char v1208 = 1;
            goto LABEL_1499;
          case 3u:
            unint64_t v1166 = v69;
            unint64_t v2007 = v38;
            size_t v1167 = v40;
            unint64_t v1168 = *(void (**)(void *, const void *, uint64_t))(v2027 + 16);
            unint64_t v1169 = v72;
            ((void (*)(void *))v1168)(a1);
            size_t v2016 = (void *)(((unint64_t)a1 + v1910) & v301);
            uint64_t v2058 = (const void *)((unint64_t)&v1169[v1910] & v301);
            if (v1930 == v1929)
            {
              int v1170 = (*(uint64_t (**)(void))(v2027 + 48))();
              uint64_t v1171 = ~v1976;
              unint64_t v1172 = v1916;
            }
            else
            {
              unint64_t v1218 = (v1956 + ((unint64_t)&v1169[v1910] & v301)) & v2064;
              uint64_t v1219 = v1888;
              unint64_t v1220 = (v1928 + v1218) & v1888;
              uint64_t v1171 = ~v1976;
              if (v1940 != v1929)
              {
                unint64_t v1246 = v1220 + v38;
                unint64_t v1172 = v1916;
                if ((v1914 & 0x80000000) != 0)
                {
                  uint64_t v1292 = (v1965 + ((v2018 + v1246) & v1986)) & v2042;
                  unint64_t v302 = v1166;
                  if (v1944 <= 0x7FFFFFFD)
                  {
                    unint64_t v1885 = *(void *)(((v1912 + ((v1961 + v1292) & v2042)) & 0xFFFFFFFFFFFFFFF8) + 8);
                    if (v1885 >= 0xFFFFFFFF) {
                      LODWORD(v1885) = -1;
                    }
                    if ((v1885 + 1) >= 2) {
                      goto LABEL_1404;
                    }
                    goto LABEL_1407;
                  }
                  int v1170 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v1963 + 48))(v1292, v1944, v1962);
                  uint64_t v1219 = v1888;
                  goto LABEL_1403;
                }
                unint64_t v1247 = *(void *)(v1246 + 8);
                if (v1247 >= 0xFFFFFFFF) {
                  LODWORD(v1247) = -1;
                }
                int v1170 = v1247 + 1;
LABEL_1402:
                unint64_t v302 = v1166;
LABEL_1403:
                if (v1170)
                {
LABEL_1404:
                  long long v1448 = v2016;
                  long long v1449 = v2058;
                  memcpy(v2016, v2058, v1167);
LABEL_1405:
                  size_t v1450 = __n;
LABEL_1496:
                  unint64_t v1812 = ((((v1926
                            + ((((((((((v1943 + v1450 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                                + 19) & 0xFFFFFFFFFFFFFFF8)
                              + 25) & 0xFFFFFFFFFFFFFFF8)
                            + 327) & 0xFFFFFFFFFFFFFFF8)
                          + 15) & 0xFFFFFFFFFFFFFFF8)
                        + 16;
                  v1813 = (void *)(((unint64_t)v1448 + v1812) & 0xFFFFFFFFFFFFFFF8);
                  v1814 = (void *)(((unint64_t)v1449 + v1812) & 0xFFFFFFFFFFFFFFF8);
                  void *v1813 = *v1814;
                  v1813[1] = v1814[1];
                  *(void *)(((unint64_t)v1813 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v1814
                                                                                                  + 23) & 0xFFFFFFFFFFFFFFF8);
                  *((unsigned char *)a1 + v1172) = 3;
                  swift_bridgeObjectRetain();
                  goto LABEL_1497;
                }
                unint64_t v1218 = ((unint64_t)v2058 + v1956) & v2064;
                unint64_t v1220 = (v1928 + v1218) & v1219;
LABEL_1407:
                unint64_t v2023 = v302;
                uint64_t v1451 = v1219;
                v1168(v2016, v2058, v1969);
                uint64_t v1452 = v1171;
                unint64_t v1453 = ((unint64_t)v2016 + v1956) & v2064;
                v1168((void *)v1453, (const void *)v1218, v1969);
                unint64_t v1454 = (v1928 + v1453) & v1451;
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v1952 + 16))(v1454, v1220, v1951);
                uint64_t v1455 = (void *)((v1960 + v1454) & 0xFFFFFFFFFFFFFFF8);
                unint64_t v1456 = (void *)((v1960 + v1220) & 0xFFFFFFFFFFFFFFF8);
                *uint64_t v1455 = *v1456;
                unint64_t v1457 = ((unint64_t)v1455 + v1954) & v86;
                unint64_t v1458 = ((unint64_t)v1456 + v1954) & v86;
                uint64_t v1459 = (void (*)(unint64_t, unint64_t, uint64_t))v1953[2];
                swift_bridgeObjectRetain();
                v1459(v1457, v1458, v1948);
                unint64_t v1460 = (void *)((v1942 + v1458) & 0xFFFFFFFFFFFFFFF8);
                unint64_t v1461 = (void *)((v1942 + v1457) & 0xFFFFFFFFFFFFFFF8);
                *unint64_t v1461 = *v1460;
                v1462 = (void *)(((unint64_t)v1461 + 15) & 0xFFFFFFFFFFFFFFF8);
                v1463 = (void *)(((unint64_t)v1460 + 15) & 0xFFFFFFFFFFFFFFF8);
                void *v1462 = *v1463;
                v1462[1] = v1463[1];
                unint64_t v1464 = (void *)(v1454 + v2007);
                *unint64_t v1464 = *(void *)(v1220 + v2007);
                v1464[1] = *(void *)(v1220 + v2007 + 8);
                uint64_t v1465 = (v2018 + v1454 + v2007) & v1986;
                uint64_t v1466 = (v2018 + v1220 + v2007) & v1986;
                *(unsigned char *)uint64_t v1465 = *(unsigned char *)v1466;
                uint64_t v1467 = v1465 | 4;
                int v1468 = *(_DWORD *)(v1466 | 4);
                *(unsigned char *)(v1467 + 4) = *(unsigned char *)((v1466 | 4) + 4);
                *(_DWORD *)uint64_t v1467 = v1468;
                *(_WORD *)(v1465 + 10) = *(_WORD *)(v1466 + 0xA);
                uint64_t v2076 = v1465;
                uint64_t v1469 = (v1965 + v1465) & v1452;
                uint64_t v2032 = v1466;
                uint64_t v1470 = (v1965 + v1466) & v1452;
                v1471 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1963 + 16);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                v1471(v1469, v1470, v1962);
                uint64_t v1472 = (v1961 + v1469) & v1452;
                uint64_t v1473 = (v1961 + v1470) & v1452;
                v1471(v1472, v1473, v1962);
                uint64_t v1474 = (unsigned char *)(v1472 + v1966);
                *uint64_t v1474 = *(unsigned char *)(v1473 + v1966);
                v1474[1] = *(unsigned char *)(v1473 + v1966 + 1);
                v1474[2] = *(unsigned char *)(v1473 + v1966 + 2);
                v1474[3] = *(unsigned char *)(v1473 + v1966 + 3);
                v1474[4] = *(unsigned char *)(v1473 + v1966 + 4);
                unint64_t v1475 = (v1472 + v1966 + 12) & 0xFFFFFFFFFFFFFFF8;
                unint64_t v1476 = (v1473 + v1966 + 12) & 0xFFFFFFFFFFFFFFF8;
                *(void *)unint64_t v1475 = *(void *)v1476;
                *(void *)(v1475 + 8) = *(void *)(v1476 + 8);
                *(unsigned char *)(v1475 + 16) = *(unsigned char *)(v1476 + 16);
                *(unsigned char *)(v1475 + 17) = *(unsigned char *)(v1476 + 17);
                *(unsigned char *)(v1475 + 18) = *(unsigned char *)(v1476 + 18);
                *(unsigned char *)(v1475 + 19) = *(unsigned char *)(v1476 + 19);
                unint64_t v1477 = (v1475 + 27) & 0xFFFFFFFFFFFFFFF8;
                unint64_t v1478 = (v1476 + 27) & 0xFFFFFFFFFFFFFFF8;
                *(void *)unint64_t v1477 = *(void *)v1478;
                *(unsigned char *)(v1477 + 8) = *(unsigned char *)(v1478 + 8);
                *(unsigned char *)(v1477 + 9) = *(unsigned char *)(v1478 + 9);
                *(unsigned char *)(v1477 + 10) = *(unsigned char *)(v1478 + 10);
                *(unsigned char *)(v1477 + 11) = *(unsigned char *)(v1478 + 11);
                *(unsigned char *)(v1477 + 12) = *(unsigned char *)(v1478 + 12);
                unint64_t v1479 = (void *)((v1476 + 47) & 0xFFFFFFFFFFFFFFF8);
                unint64_t v1480 = (void *)((v1475 + 47) & 0xFFFFFFFFFFFFFFF8);
                *unint64_t v1480 = *v1479;
                unint64_t v1481 = ((unint64_t)v1480 + 15) & 0xFFFFFFFFFFFFFFF8;
                unint64_t v1482 = ((unint64_t)v1479 + 15) & 0xFFFFFFFFFFFFFFF8;
                *(void *)unint64_t v1481 = *(void *)v1482;
                *(unsigned char *)(v1481 + 8) = *(unsigned char *)(v1482 + 8);
                *(unsigned char *)(v1481 + 9) = *(unsigned char *)(v1482 + 9);
                unint64_t v1483 = (void *)((v1958 + v1481) & v1452);
                unint64_t v1484 = (const void *)((v1958 + v1482) & v1452);
                unint64_t v1485 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v1963 + 48);
                swift_bridgeObjectRetain();
                if (v1485(v1484, 1, v1962))
                {
                  memcpy(v1483, v1484, __n);
                }
                else
                {
                  v1471((uint64_t)v1483, (uint64_t)v1484, v1962);
                  (*(void (**)(void *, void, uint64_t, uint64_t))(v1963 + 56))(v1483, 0, 1, v1962);
                }
                v1486 = (void *)(((unint64_t)v1483 + v1959) & 0xFFFFFFFFFFFFFFF8);
                v1487 = (void *)(((unint64_t)v1484 + v1959) & 0xFFFFFFFFFFFFFFF8);
                void *v1486 = *v1487;
                unint64_t v1488 = ((unint64_t)v1486 + 15) & 0xFFFFFFFFFFFFFFF8;
                unint64_t v1489 = ((unint64_t)v1487 + 15) & 0xFFFFFFFFFFFFFFF8;
                uint64_t v1490 = *(void *)v1489;
                *(unsigned char *)(v1488 + 8) = *(unsigned char *)(v1489 + 8);
                *(void *)unint64_t v1488 = v1490;
                v1491 = (void *)(((unint64_t)v1486 + 31) & 0xFFFFFFFFFFFFFFF8);
                v1492 = (void *)(((unint64_t)v1487 + 31) & 0xFFFFFFFFFFFFFFF8);
                void *v1491 = *v1492;
                unint64_t v1493 = ((unint64_t)v1491 + 15) & 0xFFFFFFFFFFFFFFF8;
                v1494 = (uint64_t *)(((unint64_t)v1492 + 15) & 0xFFFFFFFFFFFFFFF8);
                unint64_t v1495 = v1494[1];
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                if ((v1495 & 0x3000000000000000) != 0)
                {
                  *(_OWORD *)unint64_t v1493 = *(_OWORD *)v1494;
                }
                else
                {
                  uint64_t v1496 = *v1494;
                  sub_10001EBB0(*v1494, v1495);
                  *(void *)unint64_t v1493 = v1496;
                  *(void *)(v1493 + 8) = v1495;
                }
                unint64_t v1497 = (v1493 + 19) & 0xFFFFFFFFFFFFFFF8;
                unint64_t v1498 = ((unint64_t)v1494 + 19) & 0xFFFFFFFFFFFFFFF8;
                uint64_t v1499 = *(void *)v1498;
                *(unsigned char *)(v1497 + 8) = *(unsigned char *)(v1498 + 8);
                *(void *)unint64_t v1497 = v1499;
                *(unsigned char *)(v1497 + 9) = *(unsigned char *)(v1498 + 9);
                unint64_t v1500 = (v1497 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                unint64_t v1501 = (v1498 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                int v1502 = *(_DWORD *)v1501;
                *(unsigned char *)(v1500 + 4) = *(unsigned char *)(v1501 + 4);
                *(_DWORD *)unint64_t v1500 = v1502;
                uint64_t v1503 = (void *)((v1497 + 25) & 0xFFFFFFFFFFFFFFF8);
                unint64_t v1504 = (void *)((v1498 + 25) & 0xFFFFFFFFFFFFFFF8);
                *uint64_t v1503 = *v1504;
                v1503[1] = v1504[1];
                unint64_t v1505 = v2076 + v2017;
                uint64_t v1506 = (long long *)(v2032 + v2017);
                unint64_t v1507 = *(void *)(v2032 + v2017 + 16);
                if (v1507 >= 0xFFFFFFFF) {
                  LODWORD(v1507) = -1;
                }
                int v1508 = v1507 - 1;
                swift_bridgeObjectRetain();
                if (v1508 < 0)
                {
                  *(void *)unint64_t v1505 = *(void *)v1506;
                  *(unsigned char *)(v1505 + 8) = *((unsigned char *)v1506 + 8);
                  *(unsigned char *)(v1505 + 9) = *((unsigned char *)v1506 + 9);
                  uint64_t v1522 = *((void *)v1506 + 2);
                  swift_errorRetain();
                  *(void *)(v1505 + 16) = v1522;
                  uint64_t v1523 = *((void *)v1506 + 3);
                  swift_errorRetain();
                  *(void *)(v1505 + 24) = v1523;
                  *(unsigned char *)(v1505 + 32) = *((unsigned char *)v1506 + 32);
                  *(unsigned char *)(v1505 + 33) = *((unsigned char *)v1506 + 33);
                  *(unsigned char *)(v1505 + 34) = *((unsigned char *)v1506 + 34);
                  *(void *)(v1505 + 40) = *((void *)v1506 + 5);
                  *(void *)(v1505 + 48) = *((void *)v1506 + 6);
                  *(void *)(v1505 + 56) = *((void *)v1506 + 7);
                  *(void *)(v1505 + 64) = *((void *)v1506 + 8);
                  *(unsigned char *)(v1505 + 72) = *((unsigned char *)v1506 + 72);
                  *(void *)(v1505 + 80) = *((void *)v1506 + 10);
                  *(void *)(v1505 + 88) = *((void *)v1506 + 11);
                  v2077 = (void *)*((void *)v1506 + 12);
                  *(void *)(v1505 + 96) = v2077;
                  *(unsigned char *)(v1505 + 104) = *((unsigned char *)v1506 + 104);
                  *(unsigned char *)(v1505 + 105) = *((unsigned char *)v1506 + 105);
                  *(void *)(v1505 + 112) = *((void *)v1506 + 14);
                  *(void *)(v1505 + 120) = *((void *)v1506 + 15);
                  *(void *)(v1505 + 128) = *((void *)v1506 + 16);
                  *(void *)(v1505 + 136) = *((void *)v1506 + 17);
                  *(void *)(v1505 + 144) = *((void *)v1506 + 18);
                  *(void *)(v1505 + 152) = *((void *)v1506 + 19);
                  *(void *)(v1505 + 160) = *((void *)v1506 + 20);
                  *(void *)(v1505 + 168) = *((void *)v1506 + 21);
                  *(unsigned char *)(v1505 + 176) = *((unsigned char *)v1506 + 176);
                  *(void *)(v1505 + 184) = *((void *)v1506 + 23);
                  uint64_t v1524 = *((void *)v1506 + 24);
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  id v1525 = v2077;
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  if (v1524)
                  {
                    *(void *)(v1505 + 192) = v1524;
                    *(void *)(v1505 + 200) = *((void *)v1506 + 25);
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                  }
                  else
                  {
                    *(_OWORD *)(v1505 + 192) = v1506[12];
                  }
                  unint64_t v1521 = v2023;
                  unint64_t v1172 = v1916;
                  *(void *)(v1505 + 208) = *((void *)v1506 + 26);
                  *(void *)(v1505 + 216) = *((void *)v1506 + 27);
                  *(void *)(v1505 + 224) = *((void *)v1506 + 28);
                  *(void *)(v1505 + 232) = *((void *)v1506 + 29);
                  *(void *)(v1505 + 240) = *((void *)v1506 + 30);
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                }
                else
                {
                  long long v1509 = *v1506;
                  long long v1510 = v1506[1];
                  long long v1511 = v1506[3];
                  *(_OWORD *)(v1505 + 32) = v1506[2];
                  *(_OWORD *)(v1505 + 48) = v1511;
                  *(_OWORD *)unint64_t v1505 = v1509;
                  *(_OWORD *)(v1505 + 16) = v1510;
                  long long v1512 = v1506[4];
                  long long v1513 = v1506[5];
                  long long v1514 = v1506[7];
                  *(_OWORD *)(v1505 + 96) = v1506[6];
                  *(_OWORD *)(v1505 + 112) = v1514;
                  *(_OWORD *)(v1505 + 64) = v1512;
                  *(_OWORD *)(v1505 + 80) = v1513;
                  long long v1515 = v1506[8];
                  long long v1516 = v1506[9];
                  long long v1517 = v1506[11];
                  *(_OWORD *)(v1505 + 160) = v1506[10];
                  *(_OWORD *)(v1505 + 176) = v1517;
                  *(_OWORD *)(v1505 + 128) = v1515;
                  *(_OWORD *)(v1505 + 144) = v1516;
                  long long v1518 = v1506[12];
                  long long v1519 = v1506[13];
                  long long v1520 = v1506[14];
                  *(void *)(v1505 + 240) = *((void *)v1506 + 30);
                  *(_OWORD *)(v1505 + 208) = v1519;
                  *(_OWORD *)(v1505 + 224) = v1520;
                  *(_OWORD *)(v1505 + 192) = v1518;
                  unint64_t v1521 = v2023;
                }
                v1800 = (_OWORD *)((v1505 + 255) & 0xFFFFFFFFFFFFFFF8);
                v1801 = (long long *)(((unint64_t)v1506 + 255) & 0xFFFFFFFFFFFFFFF8);
                long long v1802 = *v1801;
                *(_OWORD *)((char *)v1800 + 9) = *(long long *)((char *)v1801 + 9);
                _OWORD *v1800 = v1802;
                unint64_t v1803 = (v1505 + 287) & 0xFFFFFFFFFFFFFFF8;
                unint64_t v1804 = ((unint64_t)v1506 + 287) & 0xFFFFFFFFFFFFFFF8;
                long long v1805 = *(_OWORD *)v1804;
                *(unsigned char *)(v1803 + 16) = *(unsigned char *)(v1804 + 16);
                *(_OWORD *)unint64_t v1803 = v1805;
                v1806 = (void *)((v1505 + 311) & 0xFFFFFFFFFFFFFFF8);
                unint64_t v1807 = ((unint64_t)v1506 + 311) & 0xFFFFFFFFFFFFFFF8;
                uint64_t v1808 = *(void *)v1807;
                v1807 += 15;
                void *v1806 = v1808;
                unint64_t v1809 = (void *)(((unint64_t)v1806 + 15) & 0xFFFFFFFFFFFFFFF8);
                uint64_t v1810 = *(void *)(v1807 & 0xFFFFFFFFFFFFFFF8);
                unint64_t v1811 = *(void *)((v1807 & 0xFFFFFFFFFFFFFFF8) + 8);
                sub_10018B584(v1810, v1811);
                *unint64_t v1809 = v1810;
                v1809[1] = v1811;
                size_t v1450 = v1966;
                unint64_t v302 = v1521;
                long long v1448 = v2016;
                long long v1449 = v2058;
                if (v1944) {
                  goto LABEL_1496;
                }
                goto LABEL_1405;
              }
              unint64_t v1172 = v1916;
              if (v1932 == v1940)
              {
                int v1170 = (*(uint64_t (**)(unint64_t))(v1952 + 48))((v1928 + v1218) & v1888);
              }
              else
              {
                v1282 = (unint64_t *)((v1960 + v1220) & 0xFFFFFFFFFFFFFFF8);
                if (v1924 <= 0x7FFFFFFE)
                {
                  unint64_t v1283 = *v1282;
                  if (v1283 >= 0xFFFFFFFF) {
                    LODWORD(v1283) = -1;
                  }
                  unint64_t v302 = v1166;
                  if ((v1283 + 1) >= 2) {
                    goto LABEL_1404;
                  }
                  goto LABEL_1407;
                }
                int v1170 = ((uint64_t (*)(unint64_t))v1953[6])(((unint64_t)v1282 + v1954) & v86);
              }
            }
            uint64_t v1219 = v1888;
            goto LABEL_1402;
          case 4u:
            v1173 = a1;
            (*(void (**)(void *))(v2027 + 16))(a1);
            char v1174 = 4;
            goto LABEL_1213;
          case 5u:
            v1173 = a1;
            (*(void (**)(void *))(v2027 + 16))(a1);
            char v1174 = 5;
            goto LABEL_1213;
          case 6u:
            v1175 = v72;
            (*(void (**)(void *))(v2027 + 16))(a1);
            int v1176 = (void *)(((unint64_t)a1 + v1903) & v1146);
            uint64_t v1177 = (const void *)((unint64_t)&v1175[v1903] & v1146);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1905 + 48))(v1177, 1, v1988))
            {
              memcpy(v1176, v1177, v1901);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v1905 + 16))(v1176, v1177, v1988);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v1905 + 56))(v1176, 0, 1, v1988);
            }
            *((unsigned char *)a1 + v1916) = 6;
            goto LABEL_1497;
          case 7u:
            v1173 = a1;
            (*(void (**)(void *))(v2027 + 16))(a1);
            char v1174 = 7;
LABEL_1213:
            *((unsigned char *)v1173 + v1916) = v1174;
            goto LABEL_1497;
          default:
            unint64_t v1147 = v69;
            unint64_t v2005 = v38;
            size_t v1148 = v40;
            uint64_t v1149 = *(void (**)(void *, const void *, uint64_t))(v2027 + 16);
            v1150 = v72;
            ((void (*)(void *))v1149)(a1);
            size_t v2015 = (void *)(((unint64_t)a1 + v1910) & v301);
            size_t v2057 = (const void *)((unint64_t)&v1150[v1910] & v301);
            if (v1930 == v1929)
            {
              int v1151 = (*(uint64_t (**)(void))(v2027 + 48))();
              uint64_t v1152 = ~v1976;
              unint64_t v1153 = v1916;
LABEL_1363:
              uint64_t v1214 = v1888;
LABEL_1364:
              unint64_t v302 = v1147;
              goto LABEL_1365;
            }
            unint64_t v1213 = (v1956 + ((unint64_t)&v1150[v1910] & v301)) & v2064;
            uint64_t v1214 = v1888;
            unint64_t v1215 = (v1928 + v1213) & v1888;
            uint64_t v1152 = ~v1976;
            if (v1940 == v1929)
            {
              unint64_t v1153 = v1916;
              if (v1932 == v1940)
              {
                int v1151 = (*(uint64_t (**)(unint64_t))(v1952 + 48))((v1928 + v1213) & v1888);
              }
              else
              {
                v1278 = (unint64_t *)((v1960 + v1215) & 0xFFFFFFFFFFFFFFF8);
                if (v1924 <= 0x7FFFFFFE)
                {
                  unint64_t v1279 = *v1278;
                  if (v1279 >= 0xFFFFFFFF) {
                    LODWORD(v1279) = -1;
                  }
                  unint64_t v302 = v1147;
                  if ((v1279 + 1) >= 2) {
                    goto LABEL_1366;
                  }
                  goto LABEL_1369;
                }
                int v1151 = ((uint64_t (*)(unint64_t))v1953[6])(((unint64_t)v1278 + v1954) & v86);
              }
              goto LABEL_1363;
            }
            unint64_t v1242 = v1215 + v38;
            unint64_t v1153 = v1916;
            if ((v1914 & 0x80000000) == 0)
            {
              unint64_t v1243 = *(void *)(v1242 + 8);
              if (v1243 >= 0xFFFFFFFF) {
                LODWORD(v1243) = -1;
              }
              int v1151 = v1243 + 1;
              goto LABEL_1364;
            }
            uint64_t v1290 = (v1965 + ((v2018 + v1242) & v1986)) & v2042;
            unint64_t v302 = v1147;
            if (v1944 <= 0x7FFFFFFD)
            {
              unint64_t v1883 = *(void *)(((v1912 + ((v1961 + v1290) & v2042)) & 0xFFFFFFFFFFFFFFF8) + 8);
              if (v1883 >= 0xFFFFFFFF) {
                LODWORD(v1883) = -1;
              }
              if ((v1883 + 1) >= 2) {
                goto LABEL_1366;
              }
              goto LABEL_1369;
            }
            int v1151 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v1963 + 48))(v1290, v1944, v1962);
            uint64_t v1214 = v1888;
LABEL_1365:
            if (v1151)
            {
LABEL_1366:
              unint64_t v1296 = v2015;
              unint64_t v1297 = v2057;
              memcpy(v2015, v2057, v1148);
LABEL_1367:
              size_t v1298 = __n;
              goto LABEL_1473;
            }
            unint64_t v1213 = ((unint64_t)v2057 + v1956) & v2064;
            unint64_t v1215 = (v1928 + v1213) & v1214;
LABEL_1369:
            unint64_t v2021 = v302;
            uint64_t v1299 = v1214;
            v1149(v2015, v2057, v1969);
            uint64_t v1300 = v1152;
            unint64_t v1301 = ((unint64_t)v2015 + v1956) & v2064;
            v1149((void *)v1301, (const void *)v1213, v1969);
            unint64_t v1302 = (v1928 + v1301) & v1299;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v1952 + 16))(v1302, v1215, v1951);
            unint64_t v1303 = (void *)((v1960 + v1302) & 0xFFFFFFFFFFFFFFF8);
            size_t v1304 = (void *)((v1960 + v1215) & 0xFFFFFFFFFFFFFFF8);
            *unint64_t v1303 = *v1304;
            unint64_t v1305 = ((unint64_t)v1303 + v1954) & v86;
            unint64_t v1306 = ((unint64_t)v1304 + v1954) & v86;
            unint64_t v1307 = (void (*)(unint64_t, unint64_t, uint64_t))v1953[2];
            swift_bridgeObjectRetain();
            v1307(v1305, v1306, v1948);
            unint64_t v1308 = (void *)((v1942 + v1306) & 0xFFFFFFFFFFFFFFF8);
            v1309 = (void *)((v1942 + v1305) & 0xFFFFFFFFFFFFFFF8);
            void *v1309 = *v1308;
            v1310 = (void *)(((unint64_t)v1309 + 15) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1311 = (void *)(((unint64_t)v1308 + 15) & 0xFFFFFFFFFFFFFFF8);
            void *v1310 = *v1311;
            v1310[1] = v1311[1];
            unint64_t v1312 = (void *)(v1302 + v2005);
            *unint64_t v1312 = *(void *)(v1215 + v2005);
            v1312[1] = *(void *)(v1215 + v2005 + 8);
            uint64_t v1313 = (v2018 + v1302 + v2005) & v1986;
            uint64_t v1314 = (v2018 + v1215 + v2005) & v1986;
            *(unsigned char *)uint64_t v1313 = *(unsigned char *)v1314;
            uint64_t v1315 = v1313 | 4;
            int v1316 = *(_DWORD *)(v1314 | 4);
            *(unsigned char *)(v1315 + 4) = *(unsigned char *)((v1314 | 4) + 4);
            *(_DWORD *)uint64_t v1315 = v1316;
            *(_WORD *)(v1313 + 10) = *(_WORD *)(v1314 + 0xA);
            uint64_t v2072 = v1313;
            uint64_t v1317 = (v1965 + v1313) & v1300;
            uint64_t v2029 = v1314;
            uint64_t v1318 = (v1965 + v1314) & v1300;
            unint64_t v1319 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1963 + 16);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v1319(v1317, v1318, v1962);
            uint64_t v1320 = (v1961 + v1317) & v1300;
            uint64_t v1321 = (v1961 + v1318) & v1300;
            v1319(v1320, v1321, v1962);
            int v1322 = (unsigned char *)(v1320 + v1966);
            *int v1322 = *(unsigned char *)(v1321 + v1966);
            v1322[1] = *(unsigned char *)(v1321 + v1966 + 1);
            v1322[2] = *(unsigned char *)(v1321 + v1966 + 2);
            v1322[3] = *(unsigned char *)(v1321 + v1966 + 3);
            v1322[4] = *(unsigned char *)(v1321 + v1966 + 4);
            unint64_t v1323 = (v1320 + v1966 + 12) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1324 = (v1321 + v1966 + 12) & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v1323 = *(void *)v1324;
            *(void *)(v1323 + 8) = *(void *)(v1324 + 8);
            *(unsigned char *)(v1323 + 16) = *(unsigned char *)(v1324 + 16);
            *(unsigned char *)(v1323 + 17) = *(unsigned char *)(v1324 + 17);
            *(unsigned char *)(v1323 + 18) = *(unsigned char *)(v1324 + 18);
            *(unsigned char *)(v1323 + 19) = *(unsigned char *)(v1324 + 19);
            unint64_t v1325 = (v1323 + 27) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1326 = (v1324 + 27) & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v1325 = *(void *)v1326;
            *(unsigned char *)(v1325 + 8) = *(unsigned char *)(v1326 + 8);
            *(unsigned char *)(v1325 + 9) = *(unsigned char *)(v1326 + 9);
            *(unsigned char *)(v1325 + 10) = *(unsigned char *)(v1326 + 10);
            *(unsigned char *)(v1325 + 11) = *(unsigned char *)(v1326 + 11);
            *(unsigned char *)(v1325 + 12) = *(unsigned char *)(v1326 + 12);
            unint64_t v1327 = (void *)((v1324 + 47) & 0xFFFFFFFFFFFFFFF8);
            v1328 = (void *)((v1323 + 47) & 0xFFFFFFFFFFFFFFF8);
            void *v1328 = *v1327;
            unint64_t v1329 = ((unint64_t)v1328 + 15) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1330 = ((unint64_t)v1327 + 15) & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v1329 = *(void *)v1330;
            *(unsigned char *)(v1329 + 8) = *(unsigned char *)(v1330 + 8);
            *(unsigned char *)(v1329 + 9) = *(unsigned char *)(v1330 + 9);
            unint64_t v1331 = (void *)((v1958 + v1329) & v1300);
            unint64_t v1332 = (const void *)((v1958 + v1330) & v1300);
            v1333 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v1963 + 48);
            swift_bridgeObjectRetain();
            if (v1333(v1332, 1, v1962))
            {
              memcpy(v1331, v1332, __n);
            }
            else
            {
              v1319((uint64_t)v1331, (uint64_t)v1332, v1962);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v1963 + 56))(v1331, 0, 1, v1962);
            }
            v1334 = (void *)(((unint64_t)v1331 + v1959) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1335 = (void *)(((unint64_t)v1332 + v1959) & 0xFFFFFFFFFFFFFFF8);
            void *v1334 = *v1335;
            unint64_t v1336 = ((unint64_t)v1334 + 15) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1337 = ((unint64_t)v1335 + 15) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v1338 = *(void *)v1337;
            *(unsigned char *)(v1336 + 8) = *(unsigned char *)(v1337 + 8);
            *(void *)unint64_t v1336 = v1338;
            v1339 = (void *)(((unint64_t)v1334 + 31) & 0xFFFFFFFFFFFFFFF8);
            v1340 = (void *)(((unint64_t)v1335 + 31) & 0xFFFFFFFFFFFFFFF8);
            void *v1339 = *v1340;
            unint64_t v1341 = ((unint64_t)v1339 + 15) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1342 = (uint64_t *)(((unint64_t)v1340 + 15) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1343 = v1342[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if ((v1343 & 0x3000000000000000) != 0)
            {
              *(_OWORD *)unint64_t v1341 = *(_OWORD *)v1342;
            }
            else
            {
              uint64_t v1344 = *v1342;
              sub_10001EBB0(*v1342, v1343);
              *(void *)unint64_t v1341 = v1344;
              *(void *)(v1341 + 8) = v1343;
            }
            unint64_t v1345 = (v1341 + 19) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1346 = ((unint64_t)v1342 + 19) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v1347 = *(void *)v1346;
            *(unsigned char *)(v1345 + 8) = *(unsigned char *)(v1346 + 8);
            *(void *)unint64_t v1345 = v1347;
            *(unsigned char *)(v1345 + 9) = *(unsigned char *)(v1346 + 9);
            unint64_t v1348 = (v1345 + 13) & 0xFFFFFFFFFFFFFFFCLL;
            unint64_t v1349 = (v1346 + 13) & 0xFFFFFFFFFFFFFFFCLL;
            int v1350 = *(_DWORD *)v1349;
            *(unsigned char *)(v1348 + 4) = *(unsigned char *)(v1349 + 4);
            *(_DWORD *)unint64_t v1348 = v1350;
            unint64_t v1351 = (void *)((v1345 + 25) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1352 = (void *)((v1346 + 25) & 0xFFFFFFFFFFFFFFF8);
            *unint64_t v1351 = *v1352;
            v1351[1] = v1352[1];
            unint64_t v1353 = v2072 + v2017;
            unint64_t v1354 = (long long *)(v2029 + v2017);
            unint64_t v1355 = *(void *)(v2029 + v2017 + 16);
            if (v1355 >= 0xFFFFFFFF) {
              LODWORD(v1355) = -1;
            }
            int v1356 = v1355 - 1;
            swift_bridgeObjectRetain();
            if (v1356 < 0)
            {
              *(void *)unint64_t v1353 = *(void *)v1354;
              *(unsigned char *)(v1353 + 8) = *((unsigned char *)v1354 + 8);
              *(unsigned char *)(v1353 + 9) = *((unsigned char *)v1354 + 9);
              uint64_t v1370 = *((void *)v1354 + 2);
              swift_errorRetain();
              *(void *)(v1353 + 16) = v1370;
              uint64_t v1371 = *((void *)v1354 + 3);
              swift_errorRetain();
              *(void *)(v1353 + 24) = v1371;
              *(unsigned char *)(v1353 + 32) = *((unsigned char *)v1354 + 32);
              *(unsigned char *)(v1353 + 33) = *((unsigned char *)v1354 + 33);
              *(unsigned char *)(v1353 + 34) = *((unsigned char *)v1354 + 34);
              *(void *)(v1353 + 40) = *((void *)v1354 + 5);
              *(void *)(v1353 + 48) = *((void *)v1354 + 6);
              *(void *)(v1353 + 56) = *((void *)v1354 + 7);
              *(void *)(v1353 + 64) = *((void *)v1354 + 8);
              *(unsigned char *)(v1353 + 72) = *((unsigned char *)v1354 + 72);
              *(void *)(v1353 + 80) = *((void *)v1354 + 10);
              *(void *)(v1353 + 88) = *((void *)v1354 + 11);
              unint64_t v2073 = (void *)*((void *)v1354 + 12);
              *(void *)(v1353 + 96) = v2073;
              *(unsigned char *)(v1353 + 104) = *((unsigned char *)v1354 + 104);
              *(unsigned char *)(v1353 + 105) = *((unsigned char *)v1354 + 105);
              *(void *)(v1353 + 112) = *((void *)v1354 + 14);
              *(void *)(v1353 + 120) = *((void *)v1354 + 15);
              *(void *)(v1353 + 128) = *((void *)v1354 + 16);
              *(void *)(v1353 + 136) = *((void *)v1354 + 17);
              *(void *)(v1353 + 144) = *((void *)v1354 + 18);
              *(void *)(v1353 + 152) = *((void *)v1354 + 19);
              *(void *)(v1353 + 160) = *((void *)v1354 + 20);
              *(void *)(v1353 + 168) = *((void *)v1354 + 21);
              *(unsigned char *)(v1353 + 176) = *((unsigned char *)v1354 + 176);
              *(void *)(v1353 + 184) = *((void *)v1354 + 23);
              uint64_t v1372 = *((void *)v1354 + 24);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              id v1373 = v2073;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (v1372)
              {
                *(void *)(v1353 + 192) = v1372;
                *(void *)(v1353 + 200) = *((void *)v1354 + 25);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
              }
              else
              {
                *(_OWORD *)(v1353 + 192) = v1354[12];
              }
              unint64_t v1369 = v2021;
              unint64_t v1153 = v1916;
              *(void *)(v1353 + 208) = *((void *)v1354 + 26);
              *(void *)(v1353 + 216) = *((void *)v1354 + 27);
              *(void *)(v1353 + 224) = *((void *)v1354 + 28);
              *(void *)(v1353 + 232) = *((void *)v1354 + 29);
              *(void *)(v1353 + 240) = *((void *)v1354 + 30);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }
            else
            {
              long long v1357 = *v1354;
              long long v1358 = v1354[1];
              long long v1359 = v1354[3];
              *(_OWORD *)(v1353 + 32) = v1354[2];
              *(_OWORD *)(v1353 + 48) = v1359;
              *(_OWORD *)unint64_t v1353 = v1357;
              *(_OWORD *)(v1353 + 16) = v1358;
              long long v1360 = v1354[4];
              long long v1361 = v1354[5];
              long long v1362 = v1354[7];
              *(_OWORD *)(v1353 + 96) = v1354[6];
              *(_OWORD *)(v1353 + 112) = v1362;
              *(_OWORD *)(v1353 + 64) = v1360;
              *(_OWORD *)(v1353 + 80) = v1361;
              long long v1363 = v1354[8];
              long long v1364 = v1354[9];
              long long v1365 = v1354[11];
              *(_OWORD *)(v1353 + 160) = v1354[10];
              *(_OWORD *)(v1353 + 176) = v1365;
              *(_OWORD *)(v1353 + 128) = v1363;
              *(_OWORD *)(v1353 + 144) = v1364;
              long long v1366 = v1354[12];
              long long v1367 = v1354[13];
              long long v1368 = v1354[14];
              *(void *)(v1353 + 240) = *((void *)v1354 + 30);
              *(_OWORD *)(v1353 + 208) = v1367;
              *(_OWORD *)(v1353 + 224) = v1368;
              *(_OWORD *)(v1353 + 192) = v1366;
              unint64_t v1369 = v2021;
            }
            long long v1750 = (_OWORD *)((v1353 + 255) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v1751 = (long long *)(((unint64_t)v1354 + 255) & 0xFFFFFFFFFFFFFFF8);
            long long v1752 = *v1751;
            *(_OWORD *)((char *)v1750 + 9) = *(long long *)((char *)v1751 + 9);
            *long long v1750 = v1752;
            unint64_t v1753 = (v1353 + 287) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1754 = ((unint64_t)v1354 + 287) & 0xFFFFFFFFFFFFFFF8;
            long long v1755 = *(_OWORD *)v1754;
            *(unsigned char *)(v1753 + 16) = *(unsigned char *)(v1754 + 16);
            *(_OWORD *)unint64_t v1753 = v1755;
            v1756 = (void *)((v1353 + 311) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1757 = ((unint64_t)v1354 + 311) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v1758 = *(void *)v1757;
            v1757 += 15;
            void *v1756 = v1758;
            unint64_t v1759 = (void *)(((unint64_t)v1756 + 15) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v1760 = *(void *)(v1757 & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1761 = *(void *)((v1757 & 0xFFFFFFFFFFFFFFF8) + 8);
            sub_10018B584(v1760, v1761);
            *unint64_t v1759 = v1760;
            v1759[1] = v1761;
            size_t v1298 = v1966;
            unint64_t v302 = v1369;
            unint64_t v1296 = v2015;
            unint64_t v1297 = v2057;
            if (!v1944) {
              goto LABEL_1367;
            }
LABEL_1473:
            unint64_t v1762 = ((((v1926
                      + ((((((((((v1943 + v1298 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                          + 19) & 0xFFFFFFFFFFFFFFF8)
                        + 25) & 0xFFFFFFFFFFFFFFF8)
                      + 327) & 0xFFFFFFFFFFFFFFF8)
                    + 15) & 0xFFFFFFFFFFFFFFF8)
                  + 16;
            uint64_t v1763 = (void *)(((unint64_t)v1296 + v1762) & 0xFFFFFFFFFFFFFFF8);
            v1764 = (void *)(((unint64_t)v1297 + v1762) & 0xFFFFFFFFFFFFFFF8);
            *uint64_t v1763 = *v1764;
            uint64_t v1765 = *(void **)(((unint64_t)v1764 + 15) & 0xFFFFFFFFFFFFFFF8);
            *(void *)(((unint64_t)v1763 + 15) & 0xFFFFFFFFFFFFFFF8) = v1765;
            *((unsigned char *)a1 + v1153) = 0;
            id v1766 = v1765;
LABEL_1497:
            char v1208 = 1;
            break;
        }
        goto LABEL_1498;
      }
      unsigned int v698 = v72[v1918];
      unsigned int v699 = v698 - 8;
      uint64_t v700 = v2027;
      if (v698 >= 8)
      {
        if (v1918 <= 3) {
          uint64_t v701 = v1918;
        }
        else {
          uint64_t v701 = 4;
        }
        switch(v701)
        {
          case 1:
            int v702 = *v72;
            goto LABEL_1217;
          case 2:
            int v702 = *(unsigned __int16 *)v72;
            goto LABEL_1217;
          case 3:
            int v702 = *(unsigned __int16 *)v72 | (v72[2] << 16);
            goto LABEL_1217;
          case 4:
            int v702 = *(_DWORD *)v72;
LABEL_1217:
            if (v1918 < 4) {
              unsigned int v698 = (v702 | (v699 << (8 * v1918))) + 8;
            }
            else {
              unsigned int v698 = v702 + 8;
            }
            break;
          default:
            break;
        }
      }
      uint64_t v1178 = ~v48;
      switch(v698)
      {
        case 1u:
          unint64_t v1187 = v69;
          uint64_t v2045 = ~v1976;
          size_t v2008 = v38;
          v1188 = *(void (**)(void *, const void *, uint64_t))(v1970 + 16);
          uint64_t v1189 = ~v33;
          char v1190 = v72;
          ((void (*)(void *))v1188)(a1);
          v2059 = (void *)(((unint64_t)a1 + v1911) & v1189);
          v1191 = (const void *)((unint64_t)&v1190[v1911] & v1189);
          if (v1991 == v1938)
          {
            int v1192 = (*(uint64_t (**)(const void *))(v1970 + 48))(v1191);
            uint64_t v1193 = v1986;
            unint64_t v1194 = v1187;
            size_t v1195 = v1909;
LABEL_1437:
            if (v1192)
            {
LABEL_1438:
              long long v1601 = v2059;
              memcpy(v2059, v1191, v2010);
              uint64_t v1602 = v1898;
LABEL_1439:
              size_t v1603 = __n;
              goto LABEL_1512;
            }
            unint64_t v1223 = ((unint64_t)v1191 + v1957) & v306;
            unint64_t v1224 = (v1927 + v1223) & v1999;
LABEL_1441:
            unint64_t v2025 = v1194;
            unsigned int v2012 = v1191;
            v1188(v2059, v1191, AssociatedTypeWitness);
            v1188((void *)(((unint64_t)v2059 + v1957) & v306), (const void *)v1223, AssociatedTypeWitness);
            unint64_t v1604 = (v1927 + (((unint64_t)v2059 + v1957) & v306)) & v1999;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v1950 + 16))(v1604, v1224, v1949);
            id v1605 = (void *)((v1955 + v1604) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v1606 = (void *)((v1955 + v1224) & 0xFFFFFFFFFFFFFFF8);
            *id v1605 = *v1606;
            unint64_t v1607 = ((unint64_t)v1605 + v1945) & v1890;
            unint64_t v1608 = ((unint64_t)v1606 + v1945) & v1890;
            uint64_t v1609 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1947 + 16);
            swift_bridgeObjectRetain();
            v1609(v1607, v1608, v1946);
            unint64_t v1610 = (void *)((v1941 + v1608) & 0xFFFFFFFFFFFFFFF8);
            v1611 = (void *)((v1941 + v1607) & 0xFFFFFFFFFFFFFFF8);
            void *v1611 = *v1610;
            v1612 = (void *)(((unint64_t)v1611 + 15) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1613 = (void *)(((unint64_t)v1610 + 15) & 0xFFFFFFFFFFFFFFF8);
            void *v1612 = *v1613;
            v1612[1] = v1613[1];
            unint64_t v1614 = (void *)(v1604 + v2013);
            *unint64_t v1614 = *(void *)(v1224 + v2013);
            v1614[1] = *(void *)(v1224 + v2013 + 8);
            size_t v1615 = (v2018 + v1604 + v2013) & v1193;
            size_t v1616 = (v2018 + v1224 + v2013) & v1193;
            *(unsigned char *)size_t v1615 = *(unsigned char *)v1616;
            uint64_t v1617 = v1615 | 4;
            int v1618 = *(_DWORD *)(v1616 | 4);
            *(unsigned char *)(v1617 + 4) = *(unsigned char *)((v1616 | 4) + 4);
            *(_DWORD *)uint64_t v1617 = v1618;
            *(_WORD *)(v1615 + 10) = *(_WORD *)(v1616 + 0xA);
            size_t v1619 = (v1965 + v1615) & v2045;
            size_t v2019 = v1616;
            size_t v1620 = (v1965 + v1616) & v2045;
            size_t v1621 = *(void (**)(size_t, size_t, uint64_t))(v1963 + 16);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v1621(v1619, v1620, v1962);
            size_t v1622 = (v1961 + v1619) & v2045;
            size_t v1623 = (v1961 + v1620) & v2045;
            v1621(v1622, v1623, v1962);
            int v1624 = (unsigned char *)(v1622 + v1966);
            *int v1624 = *(unsigned char *)(v1623 + v1966);
            v1624[1] = *(unsigned char *)(v1623 + v1966 + 1);
            v1624[2] = *(unsigned char *)(v1623 + v1966 + 2);
            v1624[3] = *(unsigned char *)(v1623 + v1966 + 3);
            v1624[4] = *(unsigned char *)(v1623 + v1966 + 4);
            unint64_t v1625 = (v1622 + v1966 + 12) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1626 = (v1623 + v1966 + 12) & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v1625 = *(void *)v1626;
            *(void *)(v1625 + 8) = *(void *)(v1626 + 8);
            *(unsigned char *)(v1625 + 16) = *(unsigned char *)(v1626 + 16);
            *(unsigned char *)(v1625 + 17) = *(unsigned char *)(v1626 + 17);
            *(unsigned char *)(v1625 + 18) = *(unsigned char *)(v1626 + 18);
            *(unsigned char *)(v1625 + 19) = *(unsigned char *)(v1626 + 19);
            unint64_t v1627 = (v1625 + 27) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1628 = (v1626 + 27) & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v1627 = *(void *)v1628;
            *(unsigned char *)(v1627 + 8) = *(unsigned char *)(v1628 + 8);
            *(unsigned char *)(v1627 + 9) = *(unsigned char *)(v1628 + 9);
            *(unsigned char *)(v1627 + 10) = *(unsigned char *)(v1628 + 10);
            *(unsigned char *)(v1627 + 11) = *(unsigned char *)(v1628 + 11);
            *(unsigned char *)(v1627 + 12) = *(unsigned char *)(v1628 + 12);
            unint64_t v1629 = (void *)((v1626 + 47) & 0xFFFFFFFFFFFFFFF8);
            v1630 = (void *)((v1625 + 47) & 0xFFFFFFFFFFFFFFF8);
            void *v1630 = *v1629;
            unint64_t v1631 = ((unint64_t)v1630 + 15) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1632 = ((unint64_t)v1629 + 15) & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v1631 = *(void *)v1632;
            *(unsigned char *)(v1631 + 8) = *(unsigned char *)(v1632 + 8);
            *(unsigned char *)(v1631 + 9) = *(unsigned char *)(v1632 + 9);
            unint64_t v1633 = (void *)((v1958 + v1631) & v2045);
            unint64_t v1634 = (const void *)((v1958 + v1632) & v2045);
            v1635 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v1963 + 48);
            swift_bridgeObjectRetain();
            if (v1635(v1634, 1, v1962))
            {
              memcpy(v1633, v1634, __n);
            }
            else
            {
              v1621((size_t)v1633, (size_t)v1634, v1962);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v1963 + 56))(v1633, 0, 1, v1962);
            }
            v1636 = (void *)(((unint64_t)v1633 + v1959) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1637 = (void *)(((unint64_t)v1634 + v1959) & 0xFFFFFFFFFFFFFFF8);
            void *v1636 = *v1637;
            unint64_t v1638 = ((unint64_t)v1636 + 15) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1639 = ((unint64_t)v1637 + 15) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v1640 = *(void *)v1639;
            *(unsigned char *)(v1638 + 8) = *(unsigned char *)(v1639 + 8);
            *(void *)unint64_t v1638 = v1640;
            v1641 = (void *)(((unint64_t)v1636 + 31) & 0xFFFFFFFFFFFFFFF8);
            v1642 = (void *)(((unint64_t)v1637 + 31) & 0xFFFFFFFFFFFFFFF8);
            void *v1641 = *v1642;
            unint64_t v1643 = ((unint64_t)v1641 + 15) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1644 = (uint64_t *)(((unint64_t)v1642 + 15) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1645 = v1644[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            size_t v1195 = v1909;
            if ((v1645 & 0x3000000000000000) != 0)
            {
              *(_OWORD *)unint64_t v1643 = *(_OWORD *)v1644;
            }
            else
            {
              uint64_t v1646 = *v1644;
              sub_10001EBB0(*v1644, v1645);
              *(void *)unint64_t v1643 = v1646;
              *(void *)(v1643 + 8) = v1645;
            }
            unint64_t v1647 = (v1643 + 19) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1648 = ((unint64_t)v1644 + 19) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v1649 = *(void *)v1648;
            *(unsigned char *)(v1647 + 8) = *(unsigned char *)(v1648 + 8);
            *(void *)unint64_t v1647 = v1649;
            *(unsigned char *)(v1647 + 9) = *(unsigned char *)(v1648 + 9);
            unint64_t v1650 = (v1647 + 13) & 0xFFFFFFFFFFFFFFFCLL;
            unint64_t v1651 = (v1648 + 13) & 0xFFFFFFFFFFFFFFFCLL;
            int v1652 = *(_DWORD *)v1651;
            *(unsigned char *)(v1650 + 4) = *(unsigned char *)(v1651 + 4);
            *(_DWORD *)unint64_t v1650 = v1652;
            unint64_t v1653 = (void *)((v1647 + 25) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1654 = (void *)((v1648 + 25) & 0xFFFFFFFFFFFFFFF8);
            *unint64_t v1653 = *v1654;
            v1653[1] = v1654[1];
            unint64_t v1655 = v2017 + v1615;
            unint64_t v1656 = (long long *)(v2017 + v2019);
            unint64_t v1657 = *(void *)(v2017 + v2019 + 16);
            if (v1657 >= 0xFFFFFFFF) {
              LODWORD(v1657) = -1;
            }
            int v1658 = v1657 - 1;
            swift_bridgeObjectRetain();
            if (v1658 < 0)
            {
              *(void *)unint64_t v1655 = *(void *)v1656;
              *(unsigned char *)(v1655 + 8) = *((unsigned char *)v1656 + 8);
              *(unsigned char *)(v1655 + 9) = *((unsigned char *)v1656 + 9);
              uint64_t v1671 = *((void *)v1656 + 2);
              swift_errorRetain();
              *(void *)(v1655 + 16) = v1671;
              uint64_t v1672 = *((void *)v1656 + 3);
              swift_errorRetain();
              *(void *)(v1655 + 24) = v1672;
              *(unsigned char *)(v1655 + 32) = *((unsigned char *)v1656 + 32);
              *(unsigned char *)(v1655 + 33) = *((unsigned char *)v1656 + 33);
              *(unsigned char *)(v1655 + 34) = *((unsigned char *)v1656 + 34);
              *(void *)(v1655 + 40) = *((void *)v1656 + 5);
              *(void *)(v1655 + 48) = *((void *)v1656 + 6);
              *(void *)(v1655 + 56) = *((void *)v1656 + 7);
              *(void *)(v1655 + 64) = *((void *)v1656 + 8);
              *(unsigned char *)(v1655 + 72) = *((unsigned char *)v1656 + 72);
              *(void *)(v1655 + 80) = *((void *)v1656 + 10);
              *(void *)(v1655 + 88) = *((void *)v1656 + 11);
              unint64_t v2048 = (void *)*((void *)v1656 + 12);
              *(void *)(v1655 + 96) = v2048;
              *(unsigned char *)(v1655 + 104) = *((unsigned char *)v1656 + 104);
              *(unsigned char *)(v1655 + 105) = *((unsigned char *)v1656 + 105);
              *(void *)(v1655 + 112) = *((void *)v1656 + 14);
              *(void *)(v1655 + 120) = *((void *)v1656 + 15);
              *(void *)(v1655 + 128) = *((void *)v1656 + 16);
              *(void *)(v1655 + 136) = *((void *)v1656 + 17);
              *(void *)(v1655 + 144) = *((void *)v1656 + 18);
              *(void *)(v1655 + 152) = *((void *)v1656 + 19);
              *(void *)(v1655 + 160) = *((void *)v1656 + 20);
              *(void *)(v1655 + 168) = *((void *)v1656 + 21);
              *(unsigned char *)(v1655 + 176) = *((unsigned char *)v1656 + 176);
              *(void *)(v1655 + 184) = *((void *)v1656 + 23);
              uint64_t v1673 = *((void *)v1656 + 24);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              id v1674 = v2048;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (v1673)
              {
                *(void *)(v1655 + 192) = v1673;
                *(void *)(v1655 + 200) = *((void *)v1656 + 25);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
              }
              else
              {
                *(_OWORD *)(v1655 + 192) = v1656[12];
              }
              size_t v1195 = v1909;
              uint64_t v1602 = v1898;
              *(void *)(v1655 + 208) = *((void *)v1656 + 26);
              *(void *)(v1655 + 216) = *((void *)v1656 + 27);
              *(void *)(v1655 + 224) = *((void *)v1656 + 28);
              *(void *)(v1655 + 232) = *((void *)v1656 + 29);
              *(void *)(v1655 + 240) = *((void *)v1656 + 30);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }
            else
            {
              long long v1659 = *v1656;
              long long v1660 = v1656[1];
              long long v1661 = v1656[3];
              *(_OWORD *)(v1655 + 32) = v1656[2];
              *(_OWORD *)(v1655 + 48) = v1661;
              *(_OWORD *)unint64_t v1655 = v1659;
              *(_OWORD *)(v1655 + 16) = v1660;
              long long v1662 = v1656[4];
              long long v1663 = v1656[5];
              long long v1664 = v1656[7];
              *(_OWORD *)(v1655 + 96) = v1656[6];
              *(_OWORD *)(v1655 + 112) = v1664;
              *(_OWORD *)(v1655 + 64) = v1662;
              *(_OWORD *)(v1655 + 80) = v1663;
              long long v1665 = v1656[8];
              long long v1666 = v1656[9];
              long long v1667 = v1656[11];
              *(_OWORD *)(v1655 + 160) = v1656[10];
              *(_OWORD *)(v1655 + 176) = v1667;
              *(_OWORD *)(v1655 + 128) = v1665;
              *(_OWORD *)(v1655 + 144) = v1666;
              long long v1668 = v1656[12];
              long long v1669 = v1656[13];
              long long v1670 = v1656[14];
              *(void *)(v1655 + 240) = *((void *)v1656 + 30);
              *(_OWORD *)(v1655 + 208) = v1669;
              *(_OWORD *)(v1655 + 224) = v1670;
              *(_OWORD *)(v1655 + 192) = v1668;
              uint64_t v1602 = v1898;
            }
            v1833 = (_OWORD *)((v1655 + 255) & 0xFFFFFFFFFFFFFFF8);
            v1834 = (long long *)(((unint64_t)v1656 + 255) & 0xFFFFFFFFFFFFFFF8);
            long long v1835 = *v1834;
            *(_OWORD *)((char *)v1833 + 9) = *(long long *)((char *)v1834 + 9);
            _OWORD *v1833 = v1835;
            unint64_t v1836 = (v1655 + 287) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1837 = ((unint64_t)v1656 + 287) & 0xFFFFFFFFFFFFFFF8;
            long long v1838 = *(_OWORD *)v1837;
            *(unsigned char *)(v1836 + 16) = *(unsigned char *)(v1837 + 16);
            *(_OWORD *)unint64_t v1836 = v1838;
            long long v1839 = (void *)((v1655 + 311) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1840 = ((unint64_t)v1656 + 311) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v1841 = *(void *)v1840;
            v1840 += 15;
            *long long v1839 = v1841;
            long long v1842 = (void *)(((unint64_t)v1839 + 15) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v1843 = *(void *)(v1840 & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1844 = *(void *)((v1840 & 0xFFFFFFFFFFFFFFF8) + 8);
            sub_10018B584(v1843, v1844);
            *long long v1842 = v1843;
            v1842[1] = v1844;
            size_t v1603 = v1966;
            unint64_t v1194 = v2025;
            uint64_t v700 = v2027;
            v1191 = v2012;
            long long v1601 = v2059;
            if (!v1944) {
              goto LABEL_1439;
            }
LABEL_1512:
            unint64_t v1845 = ((((v1937
                      + ((((((((((v1943 + v1603 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                          + 19) & 0xFFFFFFFFFFFFFFF8)
                        + 25) & 0xFFFFFFFFFFFFFFF8)
                      + 327) & 0xFFFFFFFFFFFFFFF8)
                    + 15) & 0xFFFFFFFFFFFFFFF8)
                  + 16;
            v1846 = (void *)(((unint64_t)v1601 + v1990 + v1845) & v2064);
            uint64_t v1847 = (const void *)(((unint64_t)v1191 + v1990 + v1845) & v2064);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v700 + 48))(v1847, 1, v1969))
            {
              memcpy(v1846, v1847, v1195);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v700 + 16))(v1846, v1847, v1969);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v700 + 56))(v1846, 0, 1, v1969);
            }
            unint64_t v1848 = v1194;
            unint64_t v1849 = (char *)(((unint64_t)v1846 + v1602) & v1888);
            v1850 = (char *)(((unint64_t)v1847 + v1602) & v1888);
            if (v1932 == v1940)
            {
              int v1851 = (*(uint64_t (**)(unint64_t))(v1952 + 48))(((unint64_t)v1847 + v1602) & v1888);
            }
            else
            {
              uint64_t v1852 = v1960;
              v1853 = (uint64_t *)((unint64_t)&v1850[v1960] & 0xFFFFFFFFFFFFFFF8);
              if (v1924 <= 0x7FFFFFFE)
              {
                uint64_t v1854 = *v1853;
                if ((unint64_t)*v1853 >= 0xFFFFFFFF) {
                  LODWORD(v1854) = -1;
                }
                if ((v1854 + 1) >= 2) {
                  goto LABEL_1524;
                }
                goto LABEL_1526;
              }
              int v1851 = ((uint64_t (*)(unint64_t))v1953[6])(((unint64_t)v1853 + v1954) & v86);
            }
            uint64_t v1852 = v1960;
            if (v1851)
            {
LABEL_1524:
              size_t v1855 = v2008;
              memcpy(v1849, v1850, v2008);
              uint64_t v1229 = v2036;
LABEL_1527:
              unint64_t v302 = v1848;
              *(void *)&v1849[v1855] = *(void *)&v1850[v1855];
              v1865 = (void *)((unint64_t)&v1849[v1855 + 15] & 0xFFFFFFFFFFFFFFF8);
              v1866 = (void *)((unint64_t)&v1850[v1855 + 15] & 0xFFFFFFFFFFFFFFF8);
              void *v1865 = *v1866;
              v1276 = *(void **)(((unint64_t)v1866 + 15) & 0xFFFFFFFFFFFFFFF8);
              *(void *)(((unint64_t)v1865 + 15) & 0xFFFFFFFFFFFFFFF8) = v1276;
              char v1277 = 1;
LABEL_1528:
              *((unsigned char *)a1 + v1918) = v1277;
              id v1867 = v1276;
              char v1208 = 0;
              goto LABEL_1499;
            }
            v1853 = (uint64_t *)((unint64_t)&v1850[v1960] & 0xFFFFFFFFFFFFFFF8);
LABEL_1526:
            uint64_t v1856 = v1852;
            (*(void (**)(char *, char *, uint64_t))(v1952 + 16))(v1849, v1850, v1951);
            size_t v1857 = (void *)((unint64_t)&v1849[v1856] & 0xFFFFFFFFFFFFFFF8);
            *size_t v1857 = *v1853;
            unint64_t v1858 = ((unint64_t)v1857 + v1954) & v86;
            unint64_t v1859 = ((unint64_t)v1853 + v1954) & v86;
            unint64_t v1860 = (void (*)(unint64_t, unint64_t, uint64_t))v1953[2];
            swift_bridgeObjectRetain();
            v1860(v1858, v1859, v1948);
            v1861 = (void *)((v1942 + v1858) & 0xFFFFFFFFFFFFFFF8);
            v1862 = (void *)((v1942 + v1859) & 0xFFFFFFFFFFFFFFF8);
            void *v1861 = *v1862;
            v1863 = (void *)(((unint64_t)v1861 + 15) & 0xFFFFFFFFFFFFFFF8);
            v1864 = (void *)(((unint64_t)v1862 + 15) & 0xFFFFFFFFFFFFFFF8);
            void *v1863 = *v1864;
            v1863[1] = v1864[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            uint64_t v1229 = v2036;
            size_t v1855 = v2008;
            goto LABEL_1527;
          }
          unint64_t v1223 = ((unint64_t)v1191 + v1957) & v306;
          unint64_t v1224 = (v1927 + v1223) & v1999;
          uint64_t v1193 = v1986;
          if (v1939 == v1938)
          {
            unint64_t v1194 = v1187;
            if (v1931 == v1939)
            {
              int v1192 = (*(uint64_t (**)(unint64_t))(v1950 + 48))((v1927 + v1223) & v1999);
              size_t v1195 = v1909;
              goto LABEL_1437;
            }
            v1286 = (unint64_t *)((v1955 + v1224) & 0xFFFFFFFFFFFFFFF8);
            size_t v1195 = v1909;
            if (v1917 > 0x7FFFFFFE)
            {
              int v1192 = (*(uint64_t (**)(unint64_t, void, uint64_t))(v1947 + 48))(((unint64_t)v1286 + v1945) & v1890, v1913, v1946);
              goto LABEL_1437;
            }
            unint64_t v1287 = *v1286;
          }
          else
          {
            size_t v1250 = v1224 + v2013;
            unint64_t v1194 = v1187;
            if ((v1915 & 0x80000000) == 0)
            {
              unint64_t v1251 = *(void *)(v1250 + 8);
              if (v1251 >= 0xFFFFFFFF) {
                LODWORD(v1251) = -1;
              }
              int v1192 = v1251 + 1;
              size_t v1195 = v1909;
              goto LABEL_1437;
            }
            uint64_t v1294 = (v1965 + ((v2018 + v1250) & v1986)) & v2045;
            size_t v1195 = v1909;
            if (v1944 > 0x7FFFFFFD)
            {
              int v1192 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v1963 + 48))(v1294, v1944, v1962);
              goto LABEL_1437;
            }
            unint64_t v1287 = *(void *)(((v1912 + ((v1961 + v1294) & v2045)) & 0xFFFFFFFFFFFFFFF8) + 8);
          }
          if (v1287 >= 0xFFFFFFFF) {
            LODWORD(v1287) = -1;
          }
          if ((v1287 + 1) >= 2) {
            goto LABEL_1438;
          }
          goto LABEL_1441;
        case 2u:
          size_t v2009 = v38;
          v1196 = v72;
          (*(void (**)(void *))(v1970 + 16))(a1);
          v1197 = (void *)(((unint64_t)a1 + v1936) & v2064);
          int v1198 = (const void *)((unint64_t)&v1196[v1936] & v2064);
          if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v2027 + 48))(v1198, 1, v1969))
          {
            memcpy(v1197, v1198, v1909);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v2027 + 16))(v1197, v1198, v1969);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v2027 + 56))(v1197, 0, 1, v1969);
          }
          unint64_t v1235 = v302;
          uint64_t v1229 = v2036;
          int v1236 = (char *)(((unint64_t)v1197 + v1898) & v1888);
          v1237 = (char *)(((unint64_t)v1198 + v1898) & v1888);
          if (v1932 == v1940)
          {
            int v1238 = (*(uint64_t (**)(char *))(v1952 + 48))(v1237);
          }
          else
          {
            uint64_t v1239 = (uint64_t *)((unint64_t)&v1237[v1960] & 0xFFFFFFFFFFFFFFF8);
            if (v1924 <= 0x7FFFFFFE)
            {
              uint64_t v1240 = v1960;
              uint64_t v1241 = *v1239;
              if ((unint64_t)*v1239 >= 0xFFFFFFFF) {
                LODWORD(v1241) = -1;
              }
              if ((v1241 + 1) >= 2) {
                goto LABEL_1325;
              }
              goto LABEL_1327;
            }
            int v1238 = ((uint64_t (*)(unint64_t))v1953[6])(((unint64_t)v1239 + v1954) & v86);
          }
          if (v1238)
          {
LABEL_1325:
            size_t v1265 = v2009;
            memcpy(v1236, v1237, v2009);
            goto LABEL_1328;
          }
          uint64_t v1240 = v1960;
          uint64_t v1239 = (uint64_t *)((unint64_t)&v1237[v1960] & 0xFFFFFFFFFFFFFFF8);
LABEL_1327:
          uint64_t v1266 = v1240;
          (*(void (**)(char *, char *, uint64_t))(v1952 + 16))(v1236, v1237, v1951);
          v1267 = (void *)((unint64_t)&v1236[v1266] & 0xFFFFFFFFFFFFFFF8);
          void *v1267 = *v1239;
          unint64_t v1268 = ((unint64_t)v1267 + v1954) & v86;
          unint64_t v1269 = ((unint64_t)v1239 + v1954) & v86;
          v1270 = (void (*)(unint64_t, unint64_t, uint64_t))v1953[2];
          swift_bridgeObjectRetain();
          v1270(v1268, v1269, v1948);
          id v1271 = (void *)((v1942 + v1268) & 0xFFFFFFFFFFFFFFF8);
          size_t v1272 = (void *)((v1942 + v1269) & 0xFFFFFFFFFFFFFFF8);
          *id v1271 = *v1272;
          v1273 = (void *)(((unint64_t)v1271 + 15) & 0xFFFFFFFFFFFFFFF8);
          unint64_t v1274 = (void *)(((unint64_t)v1272 + 15) & 0xFFFFFFFFFFFFFFF8);
          void *v1273 = *v1274;
          v1273[1] = v1274[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          size_t v1265 = v2009;
LABEL_1328:
          unint64_t v302 = v1235;
          unint64_t v1275 = &v1236[v1265];
          *unint64_t v1275 = v1237[v1265];
          v1276 = *(void **)&v1237[v1265 + 8];
          *((void *)v1275 + 1) = v1276;
          char v1277 = 2;
          goto LABEL_1528;
        case 3u:
          uint64_t v2046 = ~v1976;
          uint64_t v1199 = *(void (**)(void *, const void *, uint64_t))(v1970 + 16);
          uint64_t v1200 = ~v33;
          v1201 = v72;
          ((void (*)(void *))v1199)(a1);
          v1202 = (void *)(((unint64_t)a1 + v1911) & v1200);
          int v1203 = (const void *)((unint64_t)&v1201[v1911] & v1200);
          if (v1991 == v1938)
          {
            int v1204 = (*(uint64_t (**)(unint64_t))(v1970 + 48))((unint64_t)&v1201[v1911] & v1200);
            uint64_t v1205 = v1986;
            uint64_t v1206 = v1927;
LABEL_1454:
            if (v1204)
            {
LABEL_1455:
              memcpy(v1202, v1203, v2010);
LABEL_1456:
              size_t v1675 = __n;
              goto LABEL_1532;
            }
            unint64_t v1225 = ((unint64_t)v1203 + v1957) & v306;
            unint64_t v1226 = (v1206 + v1225) & v1999;
            goto LABEL_1458;
          }
          unint64_t v1225 = ((unint64_t)v1203 + v1957) & v306;
          uint64_t v1206 = v1927;
          unint64_t v1226 = (v1927 + v1225) & v1999;
          uint64_t v1205 = v1986;
          if (v1939 == v1938)
          {
            if (v1931 == v1939)
            {
              int v1204 = (*(uint64_t (**)(unint64_t))(v1950 + 48))((v1927 + v1225) & v1999);
              goto LABEL_1454;
            }
            v1288 = (unint64_t *)((v1955 + v1226) & 0xFFFFFFFFFFFFFFF8);
            if (v1917 > 0x7FFFFFFE)
            {
              int v1204 = (*(uint64_t (**)(unint64_t))(v1947 + 48))(((unint64_t)v1288 + v1945) & v1890);
              goto LABEL_1454;
            }
            unint64_t v1289 = *v1288;
          }
          else
          {
            size_t v1252 = v1226 + v2013;
            if ((v1915 & 0x80000000) == 0)
            {
              unint64_t v1253 = *(void *)(v1252 + 8);
              if (v1253 >= 0xFFFFFFFF) {
                LODWORD(v1253) = -1;
              }
              int v1204 = v1253 + 1;
              goto LABEL_1454;
            }
            uint64_t v1295 = (v1965 + ((v2018 + v1252) & v1986)) & v2046;
            if (v1944 > 0x7FFFFFFD)
            {
              int v1204 = (*(uint64_t (**)(uint64_t))(v1963 + 48))(v1295);
              goto LABEL_1454;
            }
            unint64_t v1289 = *(void *)(((v1912 + ((v1961 + v1295) & v2046)) & 0xFFFFFFFFFFFFFFF8) + 8);
          }
          if (v1289 >= 0xFFFFFFFF) {
            LODWORD(v1289) = -1;
          }
          if ((v1289 + 1) >= 2) {
            goto LABEL_1455;
          }
LABEL_1458:
          unint64_t v2026 = v302;
          v1199(v1202, v1203, AssociatedTypeWitness);
          v2079 = v1202;
          unint64_t v1676 = ((unint64_t)v1202 + v1957) & v306;
          v1199((void *)v1676, (const void *)v1225, AssociatedTypeWitness);
          unint64_t v1677 = (v1206 + v1676) & v1999;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v1950 + 16))(v1677, v1226, v1949);
          uint64_t v1678 = (void *)((v1955 + v1677) & 0xFFFFFFFFFFFFFFF8);
          uint64_t v1679 = (void *)((v1955 + v1226) & 0xFFFFFFFFFFFFFFF8);
          *uint64_t v1678 = *v1679;
          unint64_t v1680 = ((unint64_t)v1678 + v1945) & v1890;
          uint64_t v1681 = v1205;
          unint64_t v1682 = ((unint64_t)v1679 + v1945) & v1890;
          uint64_t v1683 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1947 + 16);
          swift_bridgeObjectRetain();
          v1683(v1680, v1682, v1946);
          unint64_t v1684 = (void *)((v1941 + v1682) & 0xFFFFFFFFFFFFFFF8);
          v1685 = (void *)((v1941 + v1680) & 0xFFFFFFFFFFFFFFF8);
          void *v1685 = *v1684;
          v1686 = (void *)(((unint64_t)v1685 + 15) & 0xFFFFFFFFFFFFFFF8);
          unint64_t v1687 = (void *)(((unint64_t)v1684 + 15) & 0xFFFFFFFFFFFFFFF8);
          void *v1686 = *v1687;
          v1686[1] = v1687[1];
          unint64_t v1688 = (void *)(v1677 + v2013);
          *unint64_t v1688 = *(void *)(v1226 + v2013);
          v1688[1] = *(void *)(v1226 + v2013 + 8);
          size_t v1689 = (v2018 + v1677 + v2013) & v1681;
          size_t v1690 = (v2018 + v1226 + v2013) & v1681;
          *(unsigned char *)size_t v1689 = *(unsigned char *)v1690;
          uint64_t v1691 = v1689 | 4;
          int v1692 = *(_DWORD *)(v1690 | 4);
          *(unsigned char *)(v1691 + 4) = *(unsigned char *)((v1690 | 4) + 4);
          *(_DWORD *)uint64_t v1691 = v1692;
          *(_WORD *)(v1689 + 10) = *(_WORD *)(v1690 + 0xA);
          size_t v1693 = (v1965 + v1689) & v2046;
          size_t v2034 = v1690;
          size_t v1694 = (v1965 + v1690) & v2046;
          size_t v1695 = *(void (**)(size_t, size_t, uint64_t))(v1963 + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v1695(v1693, v1694, v1962);
          size_t v1696 = (v1961 + v1693) & v2046;
          size_t v1697 = (v1961 + v1694) & v2046;
          v1695(v1696, v1697, v1962);
          int v1698 = (unsigned char *)(v1696 + v1966);
          *int v1698 = *(unsigned char *)(v1697 + v1966);
          v1698[1] = *(unsigned char *)(v1697 + v1966 + 1);
          v1698[2] = *(unsigned char *)(v1697 + v1966 + 2);
          v1698[3] = *(unsigned char *)(v1697 + v1966 + 3);
          v1698[4] = *(unsigned char *)(v1697 + v1966 + 4);
          unint64_t v1699 = (v1696 + v1966 + 12) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v1700 = (v1697 + v1966 + 12) & 0xFFFFFFFFFFFFFFF8;
          *(void *)unint64_t v1699 = *(void *)v1700;
          *(void *)(v1699 + 8) = *(void *)(v1700 + 8);
          *(unsigned char *)(v1699 + 16) = *(unsigned char *)(v1700 + 16);
          *(unsigned char *)(v1699 + 17) = *(unsigned char *)(v1700 + 17);
          *(unsigned char *)(v1699 + 18) = *(unsigned char *)(v1700 + 18);
          *(unsigned char *)(v1699 + 19) = *(unsigned char *)(v1700 + 19);
          unint64_t v1701 = (v1699 + 27) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v1702 = (v1700 + 27) & 0xFFFFFFFFFFFFFFF8;
          *(void *)unint64_t v1701 = *(void *)v1702;
          *(unsigned char *)(v1701 + 8) = *(unsigned char *)(v1702 + 8);
          *(unsigned char *)(v1701 + 9) = *(unsigned char *)(v1702 + 9);
          *(unsigned char *)(v1701 + 10) = *(unsigned char *)(v1702 + 10);
          *(unsigned char *)(v1701 + 11) = *(unsigned char *)(v1702 + 11);
          *(unsigned char *)(v1701 + 12) = *(unsigned char *)(v1702 + 12);
          unint64_t v1703 = (void *)((v1700 + 47) & 0xFFFFFFFFFFFFFFF8);
          v1704 = (void *)((v1699 + 47) & 0xFFFFFFFFFFFFFFF8);
          void *v1704 = *v1703;
          unint64_t v1705 = ((unint64_t)v1704 + 15) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v1706 = ((unint64_t)v1703 + 15) & 0xFFFFFFFFFFFFFFF8;
          *(void *)unint64_t v1705 = *(void *)v1706;
          *(unsigned char *)(v1705 + 8) = *(unsigned char *)(v1706 + 8);
          *(unsigned char *)(v1705 + 9) = *(unsigned char *)(v1706 + 9);
          unint64_t v1707 = (void *)((v1958 + v1705) & v2046);
          unint64_t v1708 = (const void *)((v1958 + v1706) & v2046);
          v1709 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v1963 + 48);
          swift_bridgeObjectRetain();
          if (v1709(v1708, 1, v1962))
          {
            memcpy(v1707, v1708, __n);
          }
          else
          {
            v1695((size_t)v1707, (size_t)v1708, v1962);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v1963 + 56))(v1707, 0, 1, v1962);
          }
          v1710 = (void *)(((unint64_t)v1707 + v1959) & 0xFFFFFFFFFFFFFFF8);
          unint64_t v1711 = (void *)(((unint64_t)v1708 + v1959) & 0xFFFFFFFFFFFFFFF8);
          void *v1710 = *v1711;
          unint64_t v1712 = ((unint64_t)v1710 + 15) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v1713 = ((unint64_t)v1711 + 15) & 0xFFFFFFFFFFFFFFF8;
          uint64_t v1714 = *(void *)v1713;
          *(unsigned char *)(v1712 + 8) = *(unsigned char *)(v1713 + 8);
          *(void *)unint64_t v1712 = v1714;
          v1715 = (void *)(((unint64_t)v1710 + 31) & 0xFFFFFFFFFFFFFFF8);
          v1716 = (void *)(((unint64_t)v1711 + 31) & 0xFFFFFFFFFFFFFFF8);
          void *v1715 = *v1716;
          unint64_t v1717 = ((unint64_t)v1715 + 15) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v1718 = (uint64_t *)(((unint64_t)v1716 + 15) & 0xFFFFFFFFFFFFFFF8);
          unint64_t v1719 = v1718[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v1202 = v2079;
          if ((v1719 & 0x3000000000000000) != 0)
          {
            *(_OWORD *)unint64_t v1717 = *(_OWORD *)v1718;
          }
          else
          {
            uint64_t v1720 = *v1718;
            sub_10001EBB0(*v1718, v1719);
            *(void *)unint64_t v1717 = v1720;
            *(void *)(v1717 + 8) = v1719;
          }
          unint64_t v1721 = (v1717 + 19) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v1722 = ((unint64_t)v1718 + 19) & 0xFFFFFFFFFFFFFFF8;
          uint64_t v1723 = *(void *)v1722;
          *(unsigned char *)(v1721 + 8) = *(unsigned char *)(v1722 + 8);
          *(void *)unint64_t v1721 = v1723;
          *(unsigned char *)(v1721 + 9) = *(unsigned char *)(v1722 + 9);
          unint64_t v1724 = (v1721 + 13) & 0xFFFFFFFFFFFFFFFCLL;
          unint64_t v1725 = (v1722 + 13) & 0xFFFFFFFFFFFFFFFCLL;
          int v1726 = *(_DWORD *)v1725;
          *(unsigned char *)(v1724 + 4) = *(unsigned char *)(v1725 + 4);
          *(_DWORD *)unint64_t v1724 = v1726;
          unint64_t v1727 = (void *)((v1721 + 25) & 0xFFFFFFFFFFFFFFF8);
          unint64_t v1728 = (void *)((v1722 + 25) & 0xFFFFFFFFFFFFFFF8);
          *unint64_t v1727 = *v1728;
          v1727[1] = v1728[1];
          unint64_t v1729 = v2017 + v1689;
          unint64_t v1730 = (long long *)(v2017 + v2034);
          unint64_t v1731 = *(void *)(v2017 + v2034 + 16);
          if (v1731 >= 0xFFFFFFFF) {
            LODWORD(v1731) = -1;
          }
          int v1732 = v1731 - 1;
          swift_bridgeObjectRetain();
          if (v1732 < 0)
          {
            *(void *)unint64_t v1729 = *(void *)v1730;
            *(unsigned char *)(v1729 + 8) = *((unsigned char *)v1730 + 8);
            *(unsigned char *)(v1729 + 9) = *((unsigned char *)v1730 + 9);
            uint64_t v1746 = *((void *)v1730 + 2);
            swift_errorRetain();
            *(void *)(v1729 + 16) = v1746;
            uint64_t v1747 = *((void *)v1730 + 3);
            swift_errorRetain();
            *(void *)(v1729 + 24) = v1747;
            *(unsigned char *)(v1729 + 32) = *((unsigned char *)v1730 + 32);
            *(unsigned char *)(v1729 + 33) = *((unsigned char *)v1730 + 33);
            *(unsigned char *)(v1729 + 34) = *((unsigned char *)v1730 + 34);
            *(void *)(v1729 + 40) = *((void *)v1730 + 5);
            *(void *)(v1729 + 48) = *((void *)v1730 + 6);
            *(void *)(v1729 + 56) = *((void *)v1730 + 7);
            *(void *)(v1729 + 64) = *((void *)v1730 + 8);
            *(unsigned char *)(v1729 + 72) = *((unsigned char *)v1730 + 72);
            *(void *)(v1729 + 80) = *((void *)v1730 + 10);
            *(void *)(v1729 + 88) = *((void *)v1730 + 11);
            v2049 = (void *)*((void *)v1730 + 12);
            *(void *)(v1729 + 96) = v2049;
            *(unsigned char *)(v1729 + 104) = *((unsigned char *)v1730 + 104);
            *(unsigned char *)(v1729 + 105) = *((unsigned char *)v1730 + 105);
            *(void *)(v1729 + 112) = *((void *)v1730 + 14);
            *(void *)(v1729 + 120) = *((void *)v1730 + 15);
            *(void *)(v1729 + 128) = *((void *)v1730 + 16);
            *(void *)(v1729 + 136) = *((void *)v1730 + 17);
            *(void *)(v1729 + 144) = *((void *)v1730 + 18);
            *(void *)(v1729 + 152) = *((void *)v1730 + 19);
            *(void *)(v1729 + 160) = *((void *)v1730 + 20);
            *(void *)(v1729 + 168) = *((void *)v1730 + 21);
            *(unsigned char *)(v1729 + 176) = *((unsigned char *)v1730 + 176);
            *(void *)(v1729 + 184) = *((void *)v1730 + 23);
            uint64_t v1748 = *((void *)v1730 + 24);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            id v1749 = v2049;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (v1748)
            {
              *(void *)(v1729 + 192) = v1748;
              *(void *)(v1729 + 200) = *((void *)v1730 + 25);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }
            else
            {
              *(_OWORD *)(v1729 + 192) = v1730[12];
            }
            unint64_t v1745 = v2026;
            v1202 = v2079;
            *(void *)(v1729 + 208) = *((void *)v1730 + 26);
            *(void *)(v1729 + 216) = *((void *)v1730 + 27);
            *(void *)(v1729 + 224) = *((void *)v1730 + 28);
            *(void *)(v1729 + 232) = *((void *)v1730 + 29);
            *(void *)(v1729 + 240) = *((void *)v1730 + 30);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v1733 = *v1730;
            long long v1734 = v1730[1];
            long long v1735 = v1730[3];
            *(_OWORD *)(v1729 + 32) = v1730[2];
            *(_OWORD *)(v1729 + 48) = v1735;
            *(_OWORD *)unint64_t v1729 = v1733;
            *(_OWORD *)(v1729 + 16) = v1734;
            long long v1736 = v1730[4];
            long long v1737 = v1730[5];
            long long v1738 = v1730[7];
            *(_OWORD *)(v1729 + 96) = v1730[6];
            *(_OWORD *)(v1729 + 112) = v1738;
            *(_OWORD *)(v1729 + 64) = v1736;
            *(_OWORD *)(v1729 + 80) = v1737;
            long long v1739 = v1730[8];
            long long v1740 = v1730[9];
            long long v1741 = v1730[11];
            *(_OWORD *)(v1729 + 160) = v1730[10];
            *(_OWORD *)(v1729 + 176) = v1741;
            *(_OWORD *)(v1729 + 128) = v1739;
            *(_OWORD *)(v1729 + 144) = v1740;
            long long v1742 = v1730[12];
            long long v1743 = v1730[13];
            long long v1744 = v1730[14];
            *(void *)(v1729 + 240) = *((void *)v1730 + 30);
            *(_OWORD *)(v1729 + 208) = v1743;
            *(_OWORD *)(v1729 + 224) = v1744;
            *(_OWORD *)(v1729 + 192) = v1742;
            unint64_t v1745 = v2026;
          }
          id v1868 = (_OWORD *)((v1729 + 255) & 0xFFFFFFFFFFFFFFF8);
          v1869 = (long long *)(((unint64_t)v1730 + 255) & 0xFFFFFFFFFFFFFFF8);
          long long v1870 = *v1869;
          *(_OWORD *)((char *)v1868 + 9) = *(long long *)((char *)v1869 + 9);
          *id v1868 = v1870;
          unint64_t v1871 = (v1729 + 287) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v1872 = ((unint64_t)v1730 + 287) & 0xFFFFFFFFFFFFFFF8;
          long long v1873 = *(_OWORD *)v1872;
          *(unsigned char *)(v1871 + 16) = *(unsigned char *)(v1872 + 16);
          *(_OWORD *)unint64_t v1871 = v1873;
          long long v1874 = (void *)((v1729 + 311) & 0xFFFFFFFFFFFFFFF8);
          unint64_t v1875 = ((unint64_t)v1730 + 311) & 0xFFFFFFFFFFFFFFF8;
          uint64_t v1876 = *(void *)v1875;
          v1875 += 15;
          *long long v1874 = v1876;
          v1877 = (void *)(((unint64_t)v1874 + 15) & 0xFFFFFFFFFFFFFFF8);
          uint64_t v1878 = *(void *)(v1875 & 0xFFFFFFFFFFFFFFF8);
          unint64_t v1879 = *(void *)((v1875 & 0xFFFFFFFFFFFFFFF8) + 8);
          sub_10018B584(v1878, v1879);
          void *v1877 = v1878;
          v1877[1] = v1879;
          size_t v1675 = v1966;
          unint64_t v302 = v1745;
          if (!v1944) {
            goto LABEL_1456;
          }
LABEL_1532:
          unint64_t v1880 = ((((v1937
                    + ((((((((((v1943 + v1675 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                        + 19) & 0xFFFFFFFFFFFFFFF8)
                      + 25) & 0xFFFFFFFFFFFFFFF8)
                    + 327) & 0xFFFFFFFFFFFFFFF8)
                  + 15) & 0xFFFFFFFFFFFFFFF8)
                + 16;
          unint64_t v1881 = (void *)(((unint64_t)v1202 + v1880) & 0xFFFFFFFFFFFFFFF8);
          v1882 = (void *)(((unint64_t)v1203 + v1880) & 0xFFFFFFFFFFFFFFF8);
          *unint64_t v1881 = *v1882;
          v1881[1] = v1882[1];
          *(void *)(((unint64_t)v1881 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v1882 + 23) & 0xFFFFFFFFFFFFFFF8);
          *((unsigned char *)a1 + v1918) = 3;
          swift_bridgeObjectRetain();
          char v1208 = 0;
LABEL_1498:
          uint64_t v1229 = v2036;
LABEL_1499:
          *((unsigned char *)a1 + v302) = v1208;
          if (v1229 > 3) {
            goto LABEL_1500;
          }
          unsigned int v1815 = ((1 << (8 * v1229)) + 5) >> (8 * v1229);
          if (v1815 > 0xFFD6)
          {
            *(_DWORD *)((char *)a1 + v1229) = 27;
            return a1;
          }
          if (v1815 <= 0xD6) {
LABEL_1500:
          }
            *((unsigned char *)a1 + v1229) = 27;
          else {
            *(_WORD *)((char *)a1 + v1229) = 27;
          }
          return a1;
        case 4u:
          uint64_t v1207 = a1;
          (*(void (**)(void *))(v1970 + 16))(a1);
          char v1208 = 0;
          char v1209 = 4;
          goto LABEL_1234;
        case 5u:
          uint64_t v1207 = a1;
          (*(void (**)(void *))(v1970 + 16))(a1);
          char v1208 = 0;
          char v1209 = 5;
          goto LABEL_1234;
        case 6u:
          int v1210 = v72;
          (*(void (**)(void *))(v1970 + 16))(a1);
          unint64_t v1211 = (void *)(((unint64_t)a1 + v1906) & v1178);
          unint64_t v1212 = (const void *)((unint64_t)&v1210[v1906] & v1178);
          if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1907 + 48))(v1212, 1, v1989))
          {
            memcpy(v1211, v1212, v1902);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v1907 + 16))(v1211, v1212, v1989);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v1907 + 56))(v1211, 0, 1, v1989);
          }
          char v1208 = 0;
          *((unsigned char *)a1 + v1918) = 6;
          goto LABEL_1498;
        case 7u:
          uint64_t v1207 = a1;
          (*(void (**)(void *))(v1970 + 16))(a1);
          char v1208 = 0;
          char v1209 = 7;
LABEL_1234:
          *((unsigned char *)v1207 + v1918) = v1209;
          goto LABEL_1498;
        default:
          uint64_t v2044 = ~v1976;
          v1179 = *(void (**)(void *, const void *, uint64_t))(v1970 + 16);
          uint64_t v1180 = ~v33;
          int v1181 = v72;
          ((void (*)(void *))v1179)(a1);
          uint64_t v1182 = (void *)(((unint64_t)a1 + v1911) & v1180);
          v1183 = (const void *)((unint64_t)&v1181[v1911] & v1180);
          if (v1991 == v1938)
          {
            int v1184 = (*(uint64_t (**)(unint64_t))(v1970 + 48))((unint64_t)&v1181[v1911] & v1180);
            uint64_t v1185 = v1986;
            uint64_t v1186 = v1927;
LABEL_1420:
            if (v1184)
            {
LABEL_1421:
              memcpy(v1182, v1183, v2010);
              goto LABEL_1422;
            }
            unint64_t v1221 = ((unint64_t)v1183 + v1957) & v306;
            unint64_t v1222 = (v1186 + v1221) & v1999;
LABEL_1424:
            unint64_t v2024 = v302;
            v1179(v1182, v1183, AssociatedTypeWitness);
            unint64_t v2078 = v1182;
            unint64_t v1527 = ((unint64_t)v1182 + v1957) & v306;
            v1179((void *)v1527, (const void *)v1221, AssociatedTypeWitness);
            unint64_t v1528 = (v1186 + v1527) & v1999;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v1950 + 16))(v1528, v1222, v1949);
            uint64_t v1529 = (void *)((v1955 + v1528) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v1530 = (void *)((v1955 + v1222) & 0xFFFFFFFFFFFFFFF8);
            *uint64_t v1529 = *v1530;
            unint64_t v1531 = ((unint64_t)v1529 + v1945) & v1890;
            uint64_t v1532 = v1185;
            unint64_t v1533 = ((unint64_t)v1530 + v1945) & v1890;
            uint64_t v1534 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1947 + 16);
            swift_bridgeObjectRetain();
            v1534(v1531, v1533, v1946);
            unint64_t v1535 = (void *)((v1941 + v1533) & 0xFFFFFFFFFFFFFFF8);
            v1536 = (void *)((v1941 + v1531) & 0xFFFFFFFFFFFFFFF8);
            void *v1536 = *v1535;
            v1537 = (void *)(((unint64_t)v1536 + 15) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1538 = (void *)(((unint64_t)v1535 + 15) & 0xFFFFFFFFFFFFFFF8);
            void *v1537 = *v1538;
            v1537[1] = v1538[1];
            unint64_t v1539 = (void *)(v1528 + v2013);
            *unint64_t v1539 = *(void *)(v1222 + v2013);
            v1539[1] = *(void *)(v1222 + v2013 + 8);
            size_t v1540 = (v2018 + v1528 + v2013) & v1532;
            size_t v1541 = (v2018 + v1222 + v2013) & v1532;
            *(unsigned char *)size_t v1540 = *(unsigned char *)v1541;
            uint64_t v1542 = v1540 | 4;
            int v1543 = *(_DWORD *)(v1541 | 4);
            *(unsigned char *)(v1542 + 4) = *(unsigned char *)((v1541 | 4) + 4);
            *(_DWORD *)uint64_t v1542 = v1543;
            *(_WORD *)(v1540 + 10) = *(_WORD *)(v1541 + 0xA);
            size_t v1544 = (v1965 + v1540) & v2044;
            size_t v2033 = v1541;
            size_t v1545 = (v1965 + v1541) & v2044;
            size_t v1546 = *(void (**)(size_t, size_t, uint64_t))(v1963 + 16);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v1546(v1544, v1545, v1962);
            size_t v1547 = (v1961 + v1544) & v2044;
            size_t v1548 = (v1961 + v1545) & v2044;
            v1546(v1547, v1548, v1962);
            int v1549 = (unsigned char *)(v1547 + v1966);
            *int v1549 = *(unsigned char *)(v1548 + v1966);
            v1549[1] = *(unsigned char *)(v1548 + v1966 + 1);
            v1549[2] = *(unsigned char *)(v1548 + v1966 + 2);
            v1549[3] = *(unsigned char *)(v1548 + v1966 + 3);
            v1549[4] = *(unsigned char *)(v1548 + v1966 + 4);
            unint64_t v1550 = (v1547 + v1966 + 12) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1551 = (v1548 + v1966 + 12) & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v1550 = *(void *)v1551;
            *(void *)(v1550 + 8) = *(void *)(v1551 + 8);
            *(unsigned char *)(v1550 + 16) = *(unsigned char *)(v1551 + 16);
            *(unsigned char *)(v1550 + 17) = *(unsigned char *)(v1551 + 17);
            *(unsigned char *)(v1550 + 18) = *(unsigned char *)(v1551 + 18);
            *(unsigned char *)(v1550 + 19) = *(unsigned char *)(v1551 + 19);
            unint64_t v1552 = (v1550 + 27) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1553 = (v1551 + 27) & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v1552 = *(void *)v1553;
            *(unsigned char *)(v1552 + 8) = *(unsigned char *)(v1553 + 8);
            *(unsigned char *)(v1552 + 9) = *(unsigned char *)(v1553 + 9);
            *(unsigned char *)(v1552 + 10) = *(unsigned char *)(v1553 + 10);
            *(unsigned char *)(v1552 + 11) = *(unsigned char *)(v1553 + 11);
            *(unsigned char *)(v1552 + 12) = *(unsigned char *)(v1553 + 12);
            unint64_t v1554 = (void *)((v1551 + 47) & 0xFFFFFFFFFFFFFFF8);
            v1555 = (void *)((v1550 + 47) & 0xFFFFFFFFFFFFFFF8);
            void *v1555 = *v1554;
            unint64_t v1556 = ((unint64_t)v1555 + 15) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1557 = ((unint64_t)v1554 + 15) & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v1556 = *(void *)v1557;
            *(unsigned char *)(v1556 + 8) = *(unsigned char *)(v1557 + 8);
            *(unsigned char *)(v1556 + 9) = *(unsigned char *)(v1557 + 9);
            unint64_t v1558 = (void *)((v1958 + v1556) & v2044);
            unint64_t v1559 = (const void *)((v1958 + v1557) & v2044);
            v1560 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v1963 + 48);
            swift_bridgeObjectRetain();
            if (v1560(v1559, 1, v1962))
            {
              memcpy(v1558, v1559, __n);
            }
            else
            {
              v1546((size_t)v1558, (size_t)v1559, v1962);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v1963 + 56))(v1558, 0, 1, v1962);
            }
            v1561 = (void *)(((unint64_t)v1558 + v1959) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1562 = (void *)(((unint64_t)v1559 + v1959) & 0xFFFFFFFFFFFFFFF8);
            void *v1561 = *v1562;
            unint64_t v1563 = ((unint64_t)v1561 + 15) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1564 = ((unint64_t)v1562 + 15) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v1565 = *(void *)v1564;
            *(unsigned char *)(v1563 + 8) = *(unsigned char *)(v1564 + 8);
            *(void *)unint64_t v1563 = v1565;
            v1566 = (void *)(((unint64_t)v1561 + 31) & 0xFFFFFFFFFFFFFFF8);
            v1567 = (void *)(((unint64_t)v1562 + 31) & 0xFFFFFFFFFFFFFFF8);
            void *v1566 = *v1567;
            unint64_t v1568 = ((unint64_t)v1566 + 15) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1569 = (uint64_t *)(((unint64_t)v1567 + 15) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1570 = v1569[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            uint64_t v1182 = v2078;
            if ((v1570 & 0x3000000000000000) != 0)
            {
              *(_OWORD *)unint64_t v1568 = *(_OWORD *)v1569;
            }
            else
            {
              uint64_t v1571 = *v1569;
              sub_10001EBB0(*v1569, v1570);
              *(void *)unint64_t v1568 = v1571;
              *(void *)(v1568 + 8) = v1570;
            }
            unint64_t v1572 = (v1568 + 19) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1573 = ((unint64_t)v1569 + 19) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v1574 = *(void *)v1573;
            *(unsigned char *)(v1572 + 8) = *(unsigned char *)(v1573 + 8);
            *(void *)unint64_t v1572 = v1574;
            *(unsigned char *)(v1572 + 9) = *(unsigned char *)(v1573 + 9);
            unint64_t v1575 = (v1572 + 13) & 0xFFFFFFFFFFFFFFFCLL;
            unint64_t v1576 = (v1573 + 13) & 0xFFFFFFFFFFFFFFFCLL;
            int v1577 = *(_DWORD *)v1576;
            *(unsigned char *)(v1575 + 4) = *(unsigned char *)(v1576 + 4);
            *(_DWORD *)unint64_t v1575 = v1577;
            unint64_t v1578 = (void *)((v1572 + 25) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1579 = (void *)((v1573 + 25) & 0xFFFFFFFFFFFFFFF8);
            *unint64_t v1578 = *v1579;
            v1578[1] = v1579[1];
            unint64_t v1580 = v2017 + v1540;
            unint64_t v1581 = (long long *)(v2017 + v2033);
            unint64_t v1582 = *(void *)(v2017 + v2033 + 16);
            if (v1582 >= 0xFFFFFFFF) {
              LODWORD(v1582) = -1;
            }
            int v1583 = v1582 - 1;
            swift_bridgeObjectRetain();
            if (v1583 < 0)
            {
              *(void *)unint64_t v1580 = *(void *)v1581;
              *(unsigned char *)(v1580 + 8) = *((unsigned char *)v1581 + 8);
              *(unsigned char *)(v1580 + 9) = *((unsigned char *)v1581 + 9);
              uint64_t v1597 = *((void *)v1581 + 2);
              swift_errorRetain();
              *(void *)(v1580 + 16) = v1597;
              uint64_t v1598 = *((void *)v1581 + 3);
              swift_errorRetain();
              *(void *)(v1580 + 24) = v1598;
              *(unsigned char *)(v1580 + 32) = *((unsigned char *)v1581 + 32);
              *(unsigned char *)(v1580 + 33) = *((unsigned char *)v1581 + 33);
              *(unsigned char *)(v1580 + 34) = *((unsigned char *)v1581 + 34);
              *(void *)(v1580 + 40) = *((void *)v1581 + 5);
              *(void *)(v1580 + 48) = *((void *)v1581 + 6);
              *(void *)(v1580 + 56) = *((void *)v1581 + 7);
              *(void *)(v1580 + 64) = *((void *)v1581 + 8);
              *(unsigned char *)(v1580 + 72) = *((unsigned char *)v1581 + 72);
              *(void *)(v1580 + 80) = *((void *)v1581 + 10);
              *(void *)(v1580 + 88) = *((void *)v1581 + 11);
              uint64_t v2047 = (void *)*((void *)v1581 + 12);
              *(void *)(v1580 + 96) = v2047;
              *(unsigned char *)(v1580 + 104) = *((unsigned char *)v1581 + 104);
              *(unsigned char *)(v1580 + 105) = *((unsigned char *)v1581 + 105);
              *(void *)(v1580 + 112) = *((void *)v1581 + 14);
              *(void *)(v1580 + 120) = *((void *)v1581 + 15);
              *(void *)(v1580 + 128) = *((void *)v1581 + 16);
              *(void *)(v1580 + 136) = *((void *)v1581 + 17);
              *(void *)(v1580 + 144) = *((void *)v1581 + 18);
              *(void *)(v1580 + 152) = *((void *)v1581 + 19);
              *(void *)(v1580 + 160) = *((void *)v1581 + 20);
              *(void *)(v1580 + 168) = *((void *)v1581 + 21);
              *(unsigned char *)(v1580 + 176) = *((unsigned char *)v1581 + 176);
              *(void *)(v1580 + 184) = *((void *)v1581 + 23);
              uint64_t v1599 = *((void *)v1581 + 24);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              id v1600 = v2047;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (v1599)
              {
                *(void *)(v1580 + 192) = v1599;
                *(void *)(v1580 + 200) = *((void *)v1581 + 25);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
              }
              else
              {
                *(_OWORD *)(v1580 + 192) = v1581[12];
              }
              unint64_t v1596 = v2024;
              uint64_t v1182 = v2078;
              *(void *)(v1580 + 208) = *((void *)v1581 + 26);
              *(void *)(v1580 + 216) = *((void *)v1581 + 27);
              *(void *)(v1580 + 224) = *((void *)v1581 + 28);
              *(void *)(v1580 + 232) = *((void *)v1581 + 29);
              *(void *)(v1580 + 240) = *((void *)v1581 + 30);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }
            else
            {
              long long v1584 = *v1581;
              long long v1585 = v1581[1];
              long long v1586 = v1581[3];
              *(_OWORD *)(v1580 + 32) = v1581[2];
              *(_OWORD *)(v1580 + 48) = v1586;
              *(_OWORD *)unint64_t v1580 = v1584;
              *(_OWORD *)(v1580 + 16) = v1585;
              long long v1587 = v1581[4];
              long long v1588 = v1581[5];
              long long v1589 = v1581[7];
              *(_OWORD *)(v1580 + 96) = v1581[6];
              *(_OWORD *)(v1580 + 112) = v1589;
              *(_OWORD *)(v1580 + 64) = v1587;
              *(_OWORD *)(v1580 + 80) = v1588;
              long long v1590 = v1581[8];
              long long v1591 = v1581[9];
              long long v1592 = v1581[11];
              *(_OWORD *)(v1580 + 160) = v1581[10];
              *(_OWORD *)(v1580 + 176) = v1592;
              *(_OWORD *)(v1580 + 128) = v1590;
              *(_OWORD *)(v1580 + 144) = v1591;
              long long v1593 = v1581[12];
              long long v1594 = v1581[13];
              long long v1595 = v1581[14];
              *(void *)(v1580 + 240) = *((void *)v1581 + 30);
              *(_OWORD *)(v1580 + 208) = v1594;
              *(_OWORD *)(v1580 + 224) = v1595;
              *(_OWORD *)(v1580 + 192) = v1593;
              unint64_t v1596 = v2024;
            }
            unint64_t v1816 = (_OWORD *)((v1580 + 255) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1817 = (long long *)(((unint64_t)v1581 + 255) & 0xFFFFFFFFFFFFFFF8);
            long long v1818 = *v1817;
            *(_OWORD *)((char *)v1816 + 9) = *(long long *)((char *)v1817 + 9);
            *unint64_t v1816 = v1818;
            unint64_t v1819 = (v1580 + 287) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1820 = ((unint64_t)v1581 + 287) & 0xFFFFFFFFFFFFFFF8;
            long long v1821 = *(_OWORD *)v1820;
            *(unsigned char *)(v1819 + 16) = *(unsigned char *)(v1820 + 16);
            *(_OWORD *)unint64_t v1819 = v1821;
            long long v1822 = (void *)((v1580 + 311) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1823 = ((unint64_t)v1581 + 311) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v1824 = *(void *)v1823;
            v1823 += 15;
            *long long v1822 = v1824;
            long long v1825 = (void *)(((unint64_t)v1822 + 15) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v1826 = *(void *)(v1823 & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1827 = *(void *)((v1823 & 0xFFFFFFFFFFFFFFF8) + 8);
            sub_10018B584(v1826, v1827);
            *long long v1825 = v1826;
            v1825[1] = v1827;
            size_t v1526 = v1966;
            unint64_t v302 = v1596;
            if (v1944)
            {
LABEL_1508:
              unint64_t v1828 = ((((v1937
                        + ((((((((((v1943 + v1526 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                            + 19) & 0xFFFFFFFFFFFFFFF8)
                          + 25) & 0xFFFFFFFFFFFFFFF8)
                        + 327) & 0xFFFFFFFFFFFFFFF8)
                      + 15) & 0xFFFFFFFFFFFFFFF8)
                    + 16;
              v1829 = (void *)(((unint64_t)v1182 + v1828) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v1830 = (void *)(((unint64_t)v1183 + v1828) & 0xFFFFFFFFFFFFFFF8);
              void *v1829 = *v1830;
              unint64_t v1831 = *(void **)(((unint64_t)v1830 + 15) & 0xFFFFFFFFFFFFFFF8);
              *(void *)(((unint64_t)v1829 + 15) & 0xFFFFFFFFFFFFFFF8) = v1831;
              *((unsigned char *)a1 + v1918) = 0;
              id v1832 = v1831;
              char v1208 = 0;
              goto LABEL_1498;
            }
LABEL_1422:
            size_t v1526 = __n;
            goto LABEL_1508;
          }
          unint64_t v1221 = ((unint64_t)v1183 + v1957) & v306;
          uint64_t v1186 = v1927;
          unint64_t v1222 = (v1927 + v1221) & v1999;
          uint64_t v1185 = v1986;
          if (v1939 == v1938)
          {
            if (v1931 == v1939)
            {
              int v1184 = (*(uint64_t (**)(unint64_t))(v1950 + 48))((v1927 + v1221) & v1999);
              goto LABEL_1420;
            }
            v1284 = (unint64_t *)((v1955 + v1222) & 0xFFFFFFFFFFFFFFF8);
            if (v1917 > 0x7FFFFFFE)
            {
              int v1184 = (*(uint64_t (**)(unint64_t))(v1947 + 48))(((unint64_t)v1284 + v1945) & v1890);
              goto LABEL_1420;
            }
            unint64_t v1285 = *v1284;
          }
          else
          {
            size_t v1248 = v1222 + v2013;
            if ((v1915 & 0x80000000) == 0)
            {
              unint64_t v1249 = *(void *)(v1248 + 8);
              if (v1249 >= 0xFFFFFFFF) {
                LODWORD(v1249) = -1;
              }
              int v1184 = v1249 + 1;
              goto LABEL_1420;
            }
            uint64_t v1293 = (v1965 + ((v2018 + v1248) & v1986)) & v2044;
            if (v1944 > 0x7FFFFFFD)
            {
              int v1184 = (*(uint64_t (**)(uint64_t))(v1963 + 48))(v1293);
              goto LABEL_1420;
            }
            unint64_t v1285 = *(void *)(((v1912 + ((v1961 + v1293) & v2044)) & 0xFFFFFFFFFFFFFFF8) + 8);
          }
          if (v1285 >= 0xFFFFFFFF) {
            LODWORD(v1285) = -1;
          }
          if ((v1285 + 1) >= 2) {
            goto LABEL_1421;
          }
          goto LABEL_1424;
      }
    case 0x1Cu:
      unsigned int v308 = v72[v1982];
      unsigned int v309 = v308 - 2;
      if (v308 < 2)
      {
        size_t v312 = v2020;
        uint64_t v311 = v2027;
        uint64_t v313 = v1970;
      }
      else
      {
        if (v1982 <= 3) {
          uint64_t v310 = v1982;
        }
        else {
          uint64_t v310 = 4;
        }
        size_t v312 = v2020;
        uint64_t v311 = v2027;
        uint64_t v313 = v1970;
        switch(v310)
        {
          case 1:
            int v314 = *v72;
            goto LABEL_766;
          case 2:
            int v314 = *(unsigned __int16 *)v72;
            goto LABEL_766;
          case 3:
            int v314 = *(unsigned __int16 *)v72 | (v72[2] << 16);
            goto LABEL_766;
          case 4:
            int v314 = *(_DWORD *)v72;
LABEL_766:
            if (v1982 < 4) {
              unsigned int v308 = (v314 | (v309 << (8 * v1982))) + 2;
            }
            else {
              unsigned int v308 = v314 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v703 = v308 == 1;
      if (v308 == 1) {
        uint64_t v704 = v311;
      }
      else {
        uint64_t v704 = v313;
      }
      unsigned int v705 = v72;
      (*(void (**)(void *))(v704 + 16))(a1);
      *((unsigned char *)a1 + v1982) = v703;
      *((unsigned char *)a1 + v312) = v705[v312];
      uint64_t v273 = v2036;
      if (v2036 > 3) {
        goto LABEL_773;
      }
      unsigned int v706 = ((1 << (8 * v2036)) + 5) >> (8 * v2036);
      if (v706 > 0xFFD6)
      {
        int v498 = 28;
        goto LABEL_975;
      }
      if (v706 <= 0xD6)
      {
LABEL_773:
        char v274 = 28;
        goto LABEL_969;
      }
      __int16 v399 = 28;
      goto LABEL_973;
    case 0x1Du:
      unsigned int v315 = v72[v1982];
      unsigned int v316 = v315 - 2;
      if (v315 < 2)
      {
        uint64_t v318 = v2027;
        uint64_t v319 = v1970;
      }
      else
      {
        if (v1982 <= 3) {
          uint64_t v317 = v1982;
        }
        else {
          uint64_t v317 = 4;
        }
        uint64_t v318 = v2027;
        uint64_t v319 = v1970;
        switch(v317)
        {
          case 1:
            int v320 = *v72;
            goto LABEL_781;
          case 2:
            int v320 = *(unsigned __int16 *)v72;
            goto LABEL_781;
          case 3:
            int v320 = *(unsigned __int16 *)v72 | (v72[2] << 16);
            goto LABEL_781;
          case 4:
            int v320 = *(_DWORD *)v72;
LABEL_781:
            if (v1982 < 4) {
              unsigned int v315 = (v320 | (v316 << (8 * v1982))) + 2;
            }
            else {
              unsigned int v315 = v320 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v707 = v315 == 1;
      if (v315 == 1) {
        uint64_t v708 = v318;
      }
      else {
        uint64_t v708 = v319;
      }
      (*(void (**)(void *))(v708 + 16))(a1);
      *((unsigned char *)a1 + v1982) = v707;
      uint64_t v273 = v2036;
      if (v2036 > 3) {
        goto LABEL_788;
      }
      unsigned int v709 = ((1 << (8 * v2036)) + 5) >> (8 * v2036);
      if (v709 > 0xFFD6)
      {
        int v498 = 29;
        goto LABEL_975;
      }
      if (v709 <= 0xD6)
      {
LABEL_788:
        char v274 = 29;
        goto LABEL_969;
      }
      __int16 v399 = 29;
      goto LABEL_973;
    case 0x1Eu:
      unsigned int v321 = v72[v1982];
      unsigned int v322 = v321 - 2;
      if (v321 < 2)
      {
        uint64_t v324 = v2027;
        uint64_t v325 = v1970;
      }
      else
      {
        if (v1982 <= 3) {
          uint64_t v323 = v1982;
        }
        else {
          uint64_t v323 = 4;
        }
        uint64_t v324 = v2027;
        uint64_t v325 = v1970;
        switch(v323)
        {
          case 1:
            int v326 = *v72;
            goto LABEL_796;
          case 2:
            int v326 = *(unsigned __int16 *)v72;
            goto LABEL_796;
          case 3:
            int v326 = *(unsigned __int16 *)v72 | (v72[2] << 16);
            goto LABEL_796;
          case 4:
            int v326 = *(_DWORD *)v72;
LABEL_796:
            if (v1982 < 4) {
              unsigned int v321 = (v326 | (v322 << (8 * v1982))) + 2;
            }
            else {
              unsigned int v321 = v326 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v710 = v321 == 1;
      if (v321 == 1) {
        uint64_t v711 = v324;
      }
      else {
        uint64_t v711 = v325;
      }
      (*(void (**)(void *))(v711 + 16))(a1);
      *((unsigned char *)a1 + v1982) = v710;
      uint64_t v273 = v2036;
      if (v2036 > 3) {
        goto LABEL_803;
      }
      unsigned int v712 = ((1 << (8 * v2036)) + 5) >> (8 * v2036);
      if (v712 > 0xFFD6)
      {
        int v498 = 30;
        goto LABEL_975;
      }
      if (v712 <= 0xD6)
      {
LABEL_803:
        char v274 = 30;
        goto LABEL_969;
      }
      __int16 v399 = 30;
      goto LABEL_973;
    case 0x1Fu:
      unsigned int v327 = v72[v1982];
      unsigned int v328 = v327 - 2;
      if (v327 < 2)
      {
        uint64_t v330 = ~v1983;
        uint64_t v331 = v2027;
        uint64_t v332 = v1970;
      }
      else
      {
        if (v1982 <= 3) {
          uint64_t v329 = v1982;
        }
        else {
          uint64_t v329 = 4;
        }
        uint64_t v330 = ~v1983;
        uint64_t v331 = v2027;
        uint64_t v332 = v1970;
        switch(v329)
        {
          case 1:
            int v333 = *v72;
            goto LABEL_811;
          case 2:
            int v333 = *(unsigned __int16 *)v72;
            goto LABEL_811;
          case 3:
            int v333 = *(unsigned __int16 *)v72 | (v72[2] << 16);
            goto LABEL_811;
          case 4:
            int v333 = *(_DWORD *)v72;
LABEL_811:
            if (v1982 < 4) {
              unsigned int v327 = (v333 | (v328 << (8 * v1982))) + 2;
            }
            else {
              unsigned int v327 = v333 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v713 = v327 == 1;
      if (v327 == 1) {
        uint64_t v714 = v331;
      }
      else {
        uint64_t v714 = v332;
      }
      int v715 = v72;
      (*(void (**)(void *))(v714 + 16))(a1);
      *((unsigned char *)a1 + v1982) = v713;
      unsigned int v716 = (unsigned __int8 *)((unint64_t)&v715[v1964] & v330);
      unsigned int v717 = v716[v1982];
      unsigned int v718 = v717 - 2;
      if (v717 >= 2)
      {
        if (v1982 <= 3) {
          uint64_t v719 = v1982;
        }
        else {
          uint64_t v719 = 4;
        }
        switch(v719)
        {
          case 1:
            int v720 = *v716;
            goto LABEL_961;
          case 2:
            int v720 = *(unsigned __int16 *)v716;
            goto LABEL_961;
          case 3:
            int v720 = *(unsigned __int16 *)v716 | (*(unsigned __int8 *)(((unint64_t)&v715[v1964] & v330) + 2) << 16);
            goto LABEL_961;
          case 4:
            int v720 = *(_DWORD *)v716;
LABEL_961:
            if (v1982 < 4) {
              unsigned int v717 = (v720 | (v718 << (8 * v1982))) + 2;
            }
            else {
              unsigned int v717 = v720 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v749 = v717 == 1;
      if (v717 == 1) {
        uint64_t v750 = v331;
      }
      else {
        uint64_t v750 = v332;
      }
      (*(void (**)(unint64_t))(v750 + 16))(((unint64_t)a1 + v1964) & v330);
      *(unsigned char *)((((unint64_t)a1 + v1964) & v330) + v1982) = v749;
      uint64_t v273 = v2036;
      if (v2036 > 3) {
        goto LABEL_968;
      }
      unsigned int v751 = ((1 << (8 * v2036)) + 5) >> (8 * v2036);
      if (v751 > 0xFFD6)
      {
        int v498 = 31;
        goto LABEL_975;
      }
      if (v751 <= 0xD6)
      {
LABEL_968:
        char v274 = 31;
        goto LABEL_969;
      }
      __int16 v399 = 31;
      goto LABEL_973;
    case 0x20u:
      unsigned int v334 = v72[v1982];
      unsigned int v335 = v334 - 2;
      if (v334 < 2)
      {
        uint64_t v337 = v2027;
        uint64_t v338 = v1970;
      }
      else
      {
        if (v1982 <= 3) {
          uint64_t v336 = v1982;
        }
        else {
          uint64_t v336 = 4;
        }
        uint64_t v337 = v2027;
        uint64_t v338 = v1970;
        switch(v336)
        {
          case 1:
            int v339 = *v72;
            goto LABEL_826;
          case 2:
            int v339 = *(unsigned __int16 *)v72;
            goto LABEL_826;
          case 3:
            int v339 = *(unsigned __int16 *)v72 | (v72[2] << 16);
            goto LABEL_826;
          case 4:
            int v339 = *(_DWORD *)v72;
LABEL_826:
            if (v1982 < 4) {
              unsigned int v334 = (v339 | (v335 << (8 * v1982))) + 2;
            }
            else {
              unsigned int v334 = v339 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v721 = v334 == 1;
      if (v334 == 1) {
        uint64_t v722 = v337;
      }
      else {
        uint64_t v722 = v338;
      }
      (*(void (**)(void *))(v722 + 16))(a1);
      *((unsigned char *)a1 + v1982) = v721;
      uint64_t v273 = v2036;
      if (v2036 > 3) {
        goto LABEL_833;
      }
      unsigned int v723 = ((1 << (8 * v2036)) + 5) >> (8 * v2036);
      if (v723 > 0xFFD6)
      {
        int v498 = 32;
        goto LABEL_975;
      }
      if (v723 <= 0xD6)
      {
LABEL_833:
        char v274 = 32;
        goto LABEL_969;
      }
      __int16 v399 = 32;
      goto LABEL_973;
    case 0x21u:
      unsigned int v340 = v72[v1982];
      unsigned int v341 = v340 - 2;
      if (v340 < 2)
      {
        uint64_t v343 = v2027;
        uint64_t v344 = v1970;
      }
      else
      {
        if (v1982 <= 3) {
          uint64_t v342 = v1982;
        }
        else {
          uint64_t v342 = 4;
        }
        uint64_t v343 = v2027;
        uint64_t v344 = v1970;
        switch(v342)
        {
          case 1:
            int v345 = *v72;
            goto LABEL_841;
          case 2:
            int v345 = *(unsigned __int16 *)v72;
            goto LABEL_841;
          case 3:
            int v345 = *(unsigned __int16 *)v72 | (v72[2] << 16);
            goto LABEL_841;
          case 4:
            int v345 = *(_DWORD *)v72;
LABEL_841:
            if (v1982 < 4) {
              unsigned int v340 = (v345 | (v341 << (8 * v1982))) + 2;
            }
            else {
              unsigned int v340 = v345 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v724 = v340 == 1;
      if (v340 == 1) {
        uint64_t v725 = v343;
      }
      else {
        uint64_t v725 = v344;
      }
      (*(void (**)(void *))(v725 + 16))(a1);
      *((unsigned char *)a1 + v1982) = v724;
      uint64_t v273 = v2036;
      if (v2036 > 3) {
        goto LABEL_848;
      }
      unsigned int v726 = ((1 << (8 * v2036)) + 5) >> (8 * v2036);
      if (v726 > 0xFFD6)
      {
        int v498 = 33;
        goto LABEL_975;
      }
      if (v726 <= 0xD6)
      {
LABEL_848:
        char v274 = 33;
        goto LABEL_969;
      }
      __int16 v399 = 33;
      goto LABEL_973;
    case 0x22u:
      unsigned int v346 = v72[v1982];
      unsigned int v347 = v346 - 2;
      if (v346 < 2)
      {
        uint64_t v349 = v2027;
        uint64_t v350 = v1970;
      }
      else
      {
        if (v1982 <= 3) {
          uint64_t v348 = v1982;
        }
        else {
          uint64_t v348 = 4;
        }
        uint64_t v349 = v2027;
        uint64_t v350 = v1970;
        switch(v348)
        {
          case 1:
            int v351 = *v72;
            goto LABEL_856;
          case 2:
            int v351 = *(unsigned __int16 *)v72;
            goto LABEL_856;
          case 3:
            int v351 = *(unsigned __int16 *)v72 | (v72[2] << 16);
            goto LABEL_856;
          case 4:
            int v351 = *(_DWORD *)v72;
LABEL_856:
            if (v1982 < 4) {
              unsigned int v346 = (v351 | (v347 << (8 * v1982))) + 2;
            }
            else {
              unsigned int v346 = v351 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v727 = v346 == 1;
      if (v346 == 1) {
        uint64_t v728 = v349;
      }
      else {
        uint64_t v728 = v350;
      }
      (*(void (**)(void *))(v728 + 16))(a1);
      *((unsigned char *)a1 + v1982) = v727;
      uint64_t v273 = v2036;
      if (v2036 > 3) {
        goto LABEL_863;
      }
      unsigned int v729 = ((1 << (8 * v2036)) + 5) >> (8 * v2036);
      if (v729 > 0xFFD6)
      {
        int v498 = 34;
        goto LABEL_975;
      }
      if (v729 <= 0xD6)
      {
LABEL_863:
        char v274 = 34;
        goto LABEL_969;
      }
      __int16 v399 = 34;
      goto LABEL_973;
    case 0x23u:
      unsigned int v352 = v72[v1982];
      unsigned int v353 = v352 - 2;
      if (v352 < 2)
      {
        uint64_t v355 = v2027;
        uint64_t v356 = v1970;
      }
      else
      {
        if (v1982 <= 3) {
          uint64_t v354 = v1982;
        }
        else {
          uint64_t v354 = 4;
        }
        uint64_t v355 = v2027;
        uint64_t v356 = v1970;
        switch(v354)
        {
          case 1:
            int v357 = *v72;
            goto LABEL_871;
          case 2:
            int v357 = *(unsigned __int16 *)v72;
            goto LABEL_871;
          case 3:
            int v357 = *(unsigned __int16 *)v72 | (v72[2] << 16);
            goto LABEL_871;
          case 4:
            int v357 = *(_DWORD *)v72;
LABEL_871:
            if (v1982 < 4) {
              unsigned int v352 = (v357 | (v353 << (8 * v1982))) + 2;
            }
            else {
              unsigned int v352 = v357 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v730 = v352 == 1;
      if (v352 == 1) {
        uint64_t v731 = v355;
      }
      else {
        uint64_t v731 = v356;
      }
      (*(void (**)(void *))(v731 + 16))(a1);
      *((unsigned char *)a1 + v1982) = v730;
      uint64_t v273 = v2036;
      if (v2036 > 3) {
        goto LABEL_878;
      }
      unsigned int v732 = ((1 << (8 * v2036)) + 5) >> (8 * v2036);
      if (v732 > 0xFFD6)
      {
        int v498 = 35;
        goto LABEL_975;
      }
      if (v732 <= 0xD6)
      {
LABEL_878:
        char v274 = 35;
        goto LABEL_969;
      }
      __int16 v399 = 35;
      goto LABEL_973;
    case 0x24u:
      uint64_t v358 = ~v2060;
      uint64_t v359 = ~v37;
      uint64_t v360 = ~v1971;
      uint64_t v1979 = ~v36;
      size_t v2003 = ((((v1942 + ((v36 + 8 + (v1960 & 0xFFFFFFFFFFFFFFF8)) & ~v36)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
            + 16;
      int v361 = v72;
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t, unint64_t, unint64_t, uint64_t, uint64_t))(v1970 + 48))(v72, 1, AssociatedTypeWitness, v1982, v69, v1983, v78))
      {
        size_t v362 = v1925;
        memcpy(a1, v361, v1925);
      }
      else
      {
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v1970 + 16))(a1, v361, AssociatedTypeWitness);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v1970 + 56))(a1, 0, 1, AssociatedTypeWitness);
        size_t v362 = v1925;
      }
      unint64_t v405 = (void *)(((unint64_t)a1 + v362 + 7) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v406 = (void *)((unint64_t)&v361[v362 + 7] & 0xFFFFFFFFFFFFFFF8);
      void *v405 = *v406;
      unint64_t v407 = ((unint64_t)v405 + 15) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v408 = ((unint64_t)v406 + 15) & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v407 = *(void *)v408;
      *(unsigned char *)(v407 + 8) = *(unsigned char *)(v408 + 8);
      unint64_t v409 = (void *)((v407 + v2060 + 9) & v358);
      unint64_t v410 = (const void *)((v408 + v2060 + 9) & v358);
      unint64_t v411 = v361;
      if (v1931 == v1939)
      {
        int v412 = (*(uint64_t (**)(const void *))(v1950 + 48))(v410);
      }
      else
      {
        unint64_t v413 = (uint64_t *)(((unint64_t)v410 + v1955) & 0xFFFFFFFFFFFFFFF8);
        if (v1917 <= 0x7FFFFFFE)
        {
          uint64_t v414 = *v413;
          if ((unint64_t)*v413 >= 0xFFFFFFFF) {
            LODWORD(v414) = -1;
          }
          if ((v414 + 1) >= 2) {
            goto LABEL_431;
          }
          goto LABEL_433;
        }
        int v412 = (*(uint64_t (**)(unint64_t))(v1947 + 48))(((unint64_t)v413 + v1945) & v360);
      }
      if (v412)
      {
LABEL_431:
        size_t v499 = v2013;
        memcpy(v409, v410, v2013);
        goto LABEL_434;
      }
      unint64_t v413 = (uint64_t *)(((unint64_t)v410 + v1955) & 0xFFFFFFFFFFFFFFF8);
LABEL_433:
      (*(void (**)(void *, const void *, uint64_t))(v1950 + 16))(v409, v410, v1949);
      long long v500 = (void *)(((unint64_t)v409 + v1955) & 0xFFFFFFFFFFFFFFF8);
      *long long v500 = *v413;
      unint64_t v501 = ((unint64_t)v500 + v1945) & v360;
      unint64_t v502 = ((unint64_t)v413 + v1945) & v360;
      uint64_t v503 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1947 + 16);
      swift_bridgeObjectRetain();
      v503(v501, v502, v1946);
      unint64_t v504 = (void *)((v1941 + v501) & 0xFFFFFFFFFFFFFFF8);
      id v505 = (void *)((v1941 + v502) & 0xFFFFFFFFFFFFFFF8);
      *unint64_t v504 = *v505;
      unint64_t v506 = (void *)(((unint64_t)v504 + 15) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v507 = (void *)(((unint64_t)v505 + 15) & 0xFFFFFFFFFFFFFFF8);
      void *v506 = *v507;
      v506[1] = v507[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      size_t v499 = v2013;
LABEL_434:
      uint64_t v508 = (uint64_t)v410 + v499 + 10;
      uint64_t v509 = (uint64_t)v410 + v499 + 34;
      *((unsigned char *)v409 + v499) = *((unsigned char *)v410 + v499);
      uint64_t v510 = (uint64_t)v409 + v499 + 34;
      *(unsigned char *)(((unint64_t)v409 + v499) | 1) = *(unsigned char *)(((unint64_t)v410 + v499) | 1);
      uint64_t v511 = ~v41;
      *(unsigned char *)(((unint64_t)v409 + v499) | 2) = *(unsigned char *)(((unint64_t)v410 + v499) | 2);
      unint64_t v512 = ((unint64_t)v409 + v499 + 10) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v513 = *(void *)(v508 & 0xFFFFFFFFFFFFFFF8);
      uint64_t v514 = *(void *)((v508 & 0xFFFFFFFFFFFFFFF8) + 8);
      char v515 = *(unsigned char *)((v508 & 0xFFFFFFFFFFFFFFF8) + 16);
      sub_10009C5FC(v513, v514, v515);
      *(void *)unint64_t v512 = v513;
      *(void *)(v512 + 8) = v514;
      *(unsigned char *)(v512 + 16) = v515;
      unint64_t v516 = v510 & 0xFFFFFFFFFFFFFFF8;
      unint64_t v517 = v509 & 0xFFFFFFFFFFFFFFF8;
      uint64_t v518 = *(void *)(v517 + 16) >> 60;
      if (!(4 * (v518 & 3)) || ((v518 >> 2) & 0xFFFFFFF3 | (4 * (v518 & 3))) == 0xF)
      {
        uint64_t v524 = (uint64_t *)(v517 + 8);
        *(void *)unint64_t v516 = *(void *)v517;
        unint64_t v525 = *(void *)(v517 + 16);
        uint64_t v522 = v1969;
        if (v525 >> 60 == 15)
        {
          *(_OWORD *)(v516 + 8) = *(_OWORD *)v524;
        }
        else
        {
          uint64_t v526 = *v524;
          sub_10001EBB0(*v524, *(void *)(v517 + 16));
          *(void *)(v516 + 8) = v526;
          *(void *)(v516 + 16) = v525;
        }
        unint64_t v523 = v1919;
        long long v527 = *(_OWORD *)(v517 + 24);
        *(unsigned char *)(v516 + 40) = *(unsigned char *)(v517 + 40);
        *(_OWORD *)(v516 + 24) = v527;
        *(void *)(v516 + 48) = *(void *)(v517 + 48);
      }
      else
      {
        long long v519 = *(_OWORD *)v517;
        long long v520 = *(_OWORD *)(v517 + 16);
        long long v521 = *(_OWORD *)(v517 + 32);
        *(void *)(v516 + 48) = *(void *)(v517 + 48);
        *(_OWORD *)(v516 + 16) = v520;
        *(_OWORD *)(v516 + 32) = v521;
        *(_OWORD *)unint64_t v516 = v519;
        uint64_t v522 = v1969;
        unint64_t v523 = v1919;
      }
      uint64_t v528 = (void *)((v516 + 63) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v529 = (void **)((v517 + 63) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v530 = *v529;
      *uint64_t v528 = *v529;
      *(void *)(((unint64_t)v528 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v529 + 15) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v531 = (void *)(((unint64_t)a1 + v523) & v511);
      unint64_t v532 = (const void *)((unint64_t)&v411[v523] & v511);
      unsigned int v533 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v2027 + 48);
      id v534 = v530;
      if (v533(v532, 1, v522))
      {
        memcpy(v531, v532, v1909);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v2027 + 16))(v531, v532, v522);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v2027 + 56))(v531, 0, 1, v522);
      }
      unsigned int v535 = (void *)(((unint64_t)v531 + v1923) & 0xFFFFFFFFFFFFFFF8);
      unsigned int v536 = (void *)(((unint64_t)v532 + v1923) & 0xFFFFFFFFFFFFFFF8);
      void *v535 = *v536;
      unint64_t v537 = ((unint64_t)v535 + 15) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v538 = ((unint64_t)v536 + 15) & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v537 = *(void *)v538;
      *(unsigned char *)(v537 + 8) = *(unsigned char *)(v538 + 8);
      unint64_t v539 = (char *)((v1899 + v537) & v359);
      unint64_t v540 = (char *)((v1899 + v538) & v359);
      if (v1932 == v1940)
      {
        int v541 = (*(uint64_t (**)(char *))(v1952 + 48))(v540);
      }
      else
      {
        uint64_t v542 = v1960;
        uint64_t v543 = (uint64_t *)((unint64_t)&v540[v1960] & 0xFFFFFFFFFFFFFFF8);
        if (v1924 <= 0x7FFFFFFE)
        {
          uint64_t v544 = *v543;
          if ((unint64_t)*v543 >= 0xFFFFFFFF) {
            LODWORD(v544) = -1;
          }
          if ((v544 + 1) >= 2) {
            goto LABEL_453;
          }
          goto LABEL_455;
        }
        int v541 = ((uint64_t (*)(unint64_t))v1953[6])(((unint64_t)v543 + v1954) & v1979);
      }
      uint64_t v542 = v1960;
      if (v541)
      {
LABEL_453:
        size_t v545 = v2003;
        memcpy(v539, v540, v2003);
        goto LABEL_456;
      }
      uint64_t v543 = (uint64_t *)((unint64_t)&v540[v1960] & 0xFFFFFFFFFFFFFFF8);
LABEL_455:
      uint64_t v546 = v542;
      (*(void (**)(char *, char *, uint64_t))(v1952 + 16))(v539, v540, v1951);
      unsigned int v547 = (void *)((unint64_t)&v539[v546] & 0xFFFFFFFFFFFFFFF8);
      *unsigned int v547 = *v543;
      unint64_t v548 = ((unint64_t)v547 + v1954) & v1979;
      unint64_t v549 = ((unint64_t)v543 + v1954) & v1979;
      unsigned int v550 = (void (*)(unint64_t, unint64_t, uint64_t))v1953[2];
      swift_bridgeObjectRetain();
      v550(v548, v549, v1948);
      unsigned int v551 = (void *)((v1942 + v548) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v552 = (void *)((v1942 + v549) & 0xFFFFFFFFFFFFFFF8);
      void *v551 = *v552;
      uint64_t v553 = (void *)(((unint64_t)v551 + 15) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v554 = (void *)(((unint64_t)v552 + 15) & 0xFFFFFFFFFFFFFFF8);
      *uint64_t v553 = *v554;
      v553[1] = v554[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      size_t v545 = v2003;
LABEL_456:
      uint64_t v555 = (unsigned char *)((unint64_t)&v540[v545] | 1);
      uint64_t v556 = (unsigned char *)((unint64_t)&v540[v545] | 2);
      uint64_t v557 = (uint64_t)&v540[v545 + 10];
      uint64_t v558 = &v540[v545];
      uint64_t v559 = (unsigned char *)((unint64_t)&v539[v545] | 1);
      uint64_t v560 = (unsigned char *)((unint64_t)&v539[v545] | 2);
      uint64_t v561 = (uint64_t)&v539[v545 + 10];
      uint64_t v562 = &v539[v545];
      *uint64_t v562 = *v558;
      *uint64_t v559 = *v555;
      *uint64_t v560 = *v556;
      unint64_t v563 = v561 & 0xFFFFFFFFFFFFFFF8;
      uint64_t v564 = *(void *)(v557 & 0xFFFFFFFFFFFFFFF8);
      uint64_t v565 = *(void *)((v557 & 0xFFFFFFFFFFFFFFF8) + 8);
      char v566 = *(unsigned char *)((v557 & 0xFFFFFFFFFFFFFFF8) + 16);
      sub_10009C5FC(v564, v565, v566);
      *(void *)unint64_t v563 = v564;
      *(void *)(v563 + 8) = v565;
      *(unsigned char *)(v563 + 16) = v566;
      unint64_t v567 = (unint64_t)(v562 + 34) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v568 = (unint64_t)(v558 + 34) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v569 = *(void *)(v568 + 16) >> 60;
      if (!(4 * (v569 & 3)) || ((v569 >> 2) & 0xFFFFFFF3 | (4 * (v569 & 3))) == 0xF)
      {
        unint64_t v573 = (uint64_t *)(v568 + 8);
        *(void *)unint64_t v567 = *(void *)v568;
        unint64_t v574 = *(void *)(v568 + 16);
        if (v574 >> 60 == 15)
        {
          *(_OWORD *)(v567 + 8) = *(_OWORD *)v573;
        }
        else
        {
          uint64_t v575 = *v573;
          sub_10001EBB0(*v573, *(void *)(v568 + 16));
          *(void *)(v567 + 8) = v575;
          *(void *)(v567 + 16) = v574;
        }
        long long v576 = *(_OWORD *)(v568 + 24);
        *(unsigned char *)(v567 + 40) = *(unsigned char *)(v568 + 40);
        *(_OWORD *)(v567 + 24) = v576;
        *(void *)(v567 + 48) = *(void *)(v568 + 48);
      }
      else
      {
        long long v570 = *(_OWORD *)v568;
        long long v571 = *(_OWORD *)(v568 + 16);
        long long v572 = *(_OWORD *)(v568 + 32);
        *(void *)(v567 + 48) = *(void *)(v568 + 48);
        *(_OWORD *)(v567 + 16) = v571;
        *(_OWORD *)(v567 + 32) = v572;
        *(_OWORD *)unint64_t v567 = v570;
      }
      unint64_t v577 = (void *)((v567 + 63) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v578 = (void **)((v568 + 63) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v579 = *v578;
      void *v577 = *v578;
      *(void *)(((unint64_t)v577 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v578 + 15) & 0xFFFFFFFFFFFFFFF8);
      *((unsigned char *)v531 + v1900) = *((unsigned char *)v532 + v1900);
      unint64_t v580 = ((unint64_t)v531 + v1900) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v581 = ((unint64_t)v532 + v1900) & 0xFFFFFFFFFFFFFFF8;
      *(void *)(v580 + 8) = *(void *)(v581 + 8);
      unint64_t v582 = (_OWORD *)((v580 + 23) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v583 = (_OWORD *)((v581 + 23) & 0xFFFFFFFFFFFFFFF8);
      *unint64_t v582 = *v583;
      unint64_t v584 = ((unint64_t)v582 + 23) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v585 = ((unint64_t)v583 + 23) & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v584 = *(void *)v585;
      *(unsigned char *)(v584 + 8) = *(unsigned char *)(v585 + 8);
      *(void *)(((unint64_t)v582 + 39) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v583 + 39) & 0xFFFFFFFFFFFFFFF8);
      id v586 = v579;
      swift_bridgeObjectRetain();
      if (v2036 > 3) {
        goto LABEL_464;
      }
      unsigned int v587 = ((1 << (8 * v2036)) + 5) >> (8 * v2036);
      if (v587 > 0xFFD6)
      {
        *(_DWORD *)((char *)a1 + v2036) = 36;
        return a1;
      }
      if (v587 <= 0xD6) {
LABEL_464:
      }
        *((unsigned char *)a1 + v2036) = 36;
      else {
        *(_WORD *)((char *)a1 + v2036) = 36;
      }
      return a1;
    case 0x25u:
      unsigned int v363 = v72[v1982];
      unsigned int v364 = v363 - 2;
      if (v363 < 2)
      {
        size_t v367 = v2020;
        uint64_t v366 = v2027;
        uint64_t v368 = v1970;
      }
      else
      {
        if (v1982 <= 3) {
          uint64_t v365 = v1982;
        }
        else {
          uint64_t v365 = 4;
        }
        size_t v367 = v2020;
        uint64_t v366 = v2027;
        uint64_t v368 = v1970;
        switch(v365)
        {
          case 1:
            int v369 = *v72;
            goto LABEL_886;
          case 2:
            int v369 = *(unsigned __int16 *)v72;
            goto LABEL_886;
          case 3:
            int v369 = *(unsigned __int16 *)v72 | (v72[2] << 16);
            goto LABEL_886;
          case 4:
            int v369 = *(_DWORD *)v72;
LABEL_886:
            if (v1982 < 4) {
              unsigned int v363 = (v369 | (v364 << (8 * v1982))) + 2;
            }
            else {
              unsigned int v363 = v369 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v733 = v363 == 1;
      if (v363 == 1) {
        uint64_t v734 = v366;
      }
      else {
        uint64_t v734 = v368;
      }
      unint64_t v735 = v72;
      (*(void (**)(void *))(v734 + 16))(a1);
      *((unsigned char *)a1 + v1982) = v733;
      *((unsigned char *)a1 + v367) = v735[v367];
      uint64_t v273 = v2036;
      if (v2036 > 3) {
        goto LABEL_893;
      }
      unsigned int v736 = ((1 << (8 * v2036)) + 5) >> (8 * v2036);
      if (v736 > 0xFFD6)
      {
        int v498 = 37;
        goto LABEL_975;
      }
      if (v736 <= 0xD6)
      {
LABEL_893:
        char v274 = 37;
        goto LABEL_969;
      }
      __int16 v399 = 37;
      goto LABEL_973;
    case 0x26u:
      unsigned int v370 = v72[v1982];
      unsigned int v371 = v370 - 2;
      if (v370 < 2)
      {
        uint64_t v373 = v2027;
        uint64_t v374 = v1970;
      }
      else
      {
        if (v1982 <= 3) {
          uint64_t v372 = v1982;
        }
        else {
          uint64_t v372 = 4;
        }
        uint64_t v373 = v2027;
        uint64_t v374 = v1970;
        switch(v372)
        {
          case 1:
            int v375 = *v72;
            goto LABEL_901;
          case 2:
            int v375 = *(unsigned __int16 *)v72;
            goto LABEL_901;
          case 3:
            int v375 = *(unsigned __int16 *)v72 | (v72[2] << 16);
            goto LABEL_901;
          case 4:
            int v375 = *(_DWORD *)v72;
LABEL_901:
            if (v1982 < 4) {
              unsigned int v370 = (v375 | (v371 << (8 * v1982))) + 2;
            }
            else {
              unsigned int v370 = v375 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v737 = v370 == 1;
      if (v370 == 1) {
        uint64_t v738 = v373;
      }
      else {
        uint64_t v738 = v374;
      }
      (*(void (**)(void *))(v738 + 16))(a1);
      *((unsigned char *)a1 + v1982) = v737;
      uint64_t v273 = v2036;
      if (v2036 > 3) {
        goto LABEL_908;
      }
      unsigned int v739 = ((1 << (8 * v2036)) + 5) >> (8 * v2036);
      if (v739 > 0xFFD6)
      {
        int v498 = 38;
        goto LABEL_975;
      }
      if (v739 <= 0xD6)
      {
LABEL_908:
        char v274 = 38;
        goto LABEL_969;
      }
      __int16 v399 = 38;
      goto LABEL_973;
    case 0x27u:
      unsigned int v376 = v72[v1982];
      unsigned int v377 = v376 - 2;
      if (v376 < 2)
      {
        uint64_t v379 = v2027;
        uint64_t v380 = v1970;
      }
      else
      {
        if (v1982 <= 3) {
          uint64_t v378 = v1982;
        }
        else {
          uint64_t v378 = 4;
        }
        uint64_t v379 = v2027;
        uint64_t v380 = v1970;
        switch(v378)
        {
          case 1:
            int v381 = *v72;
            goto LABEL_916;
          case 2:
            int v381 = *(unsigned __int16 *)v72;
            goto LABEL_916;
          case 3:
            int v381 = *(unsigned __int16 *)v72 | (v72[2] << 16);
            goto LABEL_916;
          case 4:
            int v381 = *(_DWORD *)v72;
LABEL_916:
            if (v1982 < 4) {
              unsigned int v376 = (v381 | (v377 << (8 * v1982))) + 2;
            }
            else {
              unsigned int v376 = v381 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v740 = v376 == 1;
      if (v376 == 1) {
        uint64_t v741 = v379;
      }
      else {
        uint64_t v741 = v380;
      }
      (*(void (**)(void *))(v741 + 16))(a1);
      *((unsigned char *)a1 + v1982) = v740;
      uint64_t v273 = v2036;
      if (v2036 > 3) {
        goto LABEL_923;
      }
      unsigned int v742 = ((1 << (8 * v2036)) + 5) >> (8 * v2036);
      if (v742 > 0xFFD6)
      {
        int v498 = 39;
        goto LABEL_975;
      }
      if (v742 <= 0xD6)
      {
LABEL_923:
        char v274 = 39;
        goto LABEL_969;
      }
      __int16 v399 = 39;
      goto LABEL_973;
    case 0x28u:
      unsigned int v382 = v72[v1982];
      unsigned int v383 = v382 - 2;
      if (v382 < 2)
      {
        uint64_t v385 = v2027;
        uint64_t v386 = v1970;
      }
      else
      {
        if (v1982 <= 3) {
          uint64_t v384 = v1982;
        }
        else {
          uint64_t v384 = 4;
        }
        uint64_t v385 = v2027;
        uint64_t v386 = v1970;
        switch(v384)
        {
          case 1:
            int v387 = *v72;
            goto LABEL_931;
          case 2:
            int v387 = *(unsigned __int16 *)v72;
            goto LABEL_931;
          case 3:
            int v387 = *(unsigned __int16 *)v72 | (v72[2] << 16);
            goto LABEL_931;
          case 4:
            int v387 = *(_DWORD *)v72;
LABEL_931:
            if (v1982 < 4) {
              unsigned int v382 = (v387 | (v383 << (8 * v1982))) + 2;
            }
            else {
              unsigned int v382 = v387 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v743 = v382 == 1;
      if (v382 == 1) {
        uint64_t v744 = v385;
      }
      else {
        uint64_t v744 = v386;
      }
      (*(void (**)(void *))(v744 + 16))(a1);
      *((unsigned char *)a1 + v1982) = v743;
      uint64_t v273 = v2036;
      if (v2036 > 3) {
        goto LABEL_938;
      }
      unsigned int v745 = ((1 << (8 * v2036)) + 5) >> (8 * v2036);
      if (v745 > 0xFFD6)
      {
        int v498 = 40;
LABEL_975:
        *(_DWORD *)((char *)a1 + v273) = v498;
      }
      else if (v745 <= 0xD6)
      {
LABEL_938:
        char v274 = 40;
LABEL_969:
        *((unsigned char *)a1 + v273) = v274;
      }
      else
      {
        __int16 v399 = 40;
LABEL_973:
        *(_WORD *)((char *)a1 + v273) = v399;
      }
      return a1;
    default:
      if (v2036 > 3) {
        goto LABEL_129;
      }
      unsigned int v88 = ((1 << (8 * v2036)) + 5) >> (8 * v2036);
      uint64_t v89 = 2;
      if (v88 > 0xFFD6) {
        uint64_t v89 = 4;
      }
      if (v88 <= 0xD6) {
LABEL_129:
      }
        uint64_t v89 = 1;
      memcpy(a1, v72, v89 + v2036);
      return a1;
  }
}

#error "10019CACC: too big function (funcsize=0)"

unsigned char *sub_1001AD3BC(_OWORD *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  uint64_t v1673 = *(void *)(a3 + 24);
  uint64_t v1660 = swift_getAssociatedTypeWitness();
  uint64_t v1705 = *(void *)(v1660 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v1705 + 80);
  uint64_t v1627 = v6 + v7;
  uint64_t v1712 = v7;
  unint64_t v1671 = (v6 + v7) & ~v7;
  unint64_t v8 = *(void *)(v1705 + 64);
  unint64_t v1687 = v8;
  unint64_t v9 = v1671 + v8;
  unint64_t v1683 = v1671 + v8;
  if (v8 <= v6) {
    unint64_t v8 = v6;
  }
  unint64_t v10 = v6;
  unint64_t v1669 = v8;
  unint64_t v11 = v8 + 1;
  size_t v1700 = v8 + 1;
  if (v8 + 1 > v9) {
    unint64_t v9 = v8 + 1;
  }
  uint64_t v12 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v13 = v12 | v7;
  uint64_t v1670 = v13;
  unint64_t v1654 = v13 + v11;
  unint64_t v1684 = ((v13 + v11) & ~v13) + v11;
  if (v1684 > v9) {
    unint64_t v9 = ((v13 + v11) & ~v13) + v11;
  }
  unint64_t v1682 = v9;
  uint64_t v1658 = v5;
  unsigned int v14 = *(_DWORD *)(v5 + 84);
  uint64_t v1674 = v4;
  uint64_t v1640 = swift_getAssociatedTypeWitness();
  uint64_t v15 = *(void *)(v1640 - 8);
  unsigned int v16 = *(_DWORD *)(v15 + 84);
  uint64_t v1636 = swift_getAssociatedTypeWitness();
  uint64_t v17 = *(void *)(v1636 - 8);
  unsigned int v18 = *(_DWORD *)(v17 + 84);
  unsigned int v1604 = v18;
  unsigned int v1623 = v16;
  if (v16 > v18) {
    unsigned int v18 = v16;
  }
  unsigned int v1608 = v18;
  if (v18 <= 0x7FFFFFFE) {
    unsigned int v18 = 2147483646;
  }
  unsigned int v1680 = v14;
  unsigned int v1630 = v18;
  if (v18 > v14) {
    unsigned int v14 = v18;
  }
  uint64_t v1652 = sub_10096B0E0();
  uint64_t v19 = *(void *)(v1652 - 8);
  unsigned int v20 = *(_DWORD *)(v19 + 84);
  if (v20 <= 0x7FFFFFFE) {
    unsigned int v21 = 2147483646;
  }
  else {
    unsigned int v21 = *(_DWORD *)(v19 + 84);
  }
  unsigned int v1665 = v21;
  if (v14 > v21) {
    unsigned int v21 = v14;
  }
  unsigned int v1607 = v21;
  if (v21 <= 0x7FFFFFFF) {
    unsigned int v21 = 0x7FFFFFFF;
  }
  unsigned int v1622 = v21;
  unsigned int v1639 = *(_DWORD *)(v19 + 84);
  unint64_t v1690 = v10;
  uint64_t v1648 = v10 + v12;
  uint64_t v1721 = v12;
  uint64_t v1641 = v15;
  uint64_t v1637 = v17;
  uint64_t v22 = *(unsigned __int8 *)(v17 + 80);
  uint64_t v23 = *(_DWORD *)(v15 + 80) & 0xF8 | v22 | 7;
  uint64_t v1620 = v10 + v23;
  uint64_t v1679 = v23;
  uint64_t v1646 = *(void *)(v15 + 64) + 7;
  uint64_t v1635 = v22 + 8;
  uint64_t v1661 = v22;
  uint64_t v1631 = *(void *)(v17 + 64) + 7;
  size_t v1697 = ((((v1631 + ((v22 + 8 + (v1646 & 0xFFFFFFFFFFFFFFF8)) & ~v22)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
        + 16;
  uint64_t v1653 = *(void *)(v1652 - 8);
  uint64_t v24 = *(unsigned __int8 *)(v19 + 80);
  uint64_t v1707 = v24 | 7;
  uint64_t v1699 = (v24 | 7) + 16;
  uint64_t v1655 = v24 + 12;
  size_t v25 = *(void *)(v19 + 64);
  uint64_t v1651 = v25 + v24;
  size_t v1603 = v25 + 12;
  uint64_t v1649 = v24 + 10;
  size_t v1657 = v25;
  if (v20) {
    size_t v26 = *(void *)(v19 + 64);
  }
  else {
    size_t v26 = v25 + 1;
  }
  size_t __n = v26;
  size_t v1650 = v26 + 7;
  unint64_t v1633 = (v24
         + 10
         + ((((((v25 + 12 + ((v25 + v24 + ((v24 + 12) & ~v24)) & ~v24)) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)
           + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v24;
  unint64_t v1696 = ((((((((((v26 + 7 + v1633) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
            + 19) & 0xFFFFFFFFFFFFFFF8)
          + 25) & 0xFFFFFFFFFFFFFFF8)
        + 16;
  uint64_t v1628 = (v1699 + v1697 + ((v10 + v23 + ((v10 + v12) & ~v12)) & ~v23)) & ~(v24 | 7);
  unint64_t v27 = (((v1628 + v1696 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  size_t v1694 = v27 + 16;
  uint64_t v28 = *(_DWORD *)(v15 + 80) & 0xF8 | v22 | 7 | v12 | v24;
  unint64_t v1626 = v27 + 23;
  unint64_t v1667 = ((v27 + 23 + ((v27 + 16 + v28) & ~v28)) & 0xFFFFFFFFFFFFFFF8) + 8;
  unsigned int v29 = *(_DWORD *)(v1705 + 84);
  uint64_t v1642 = swift_getAssociatedTypeWitness();
  uint64_t v30 = *(void *)(v1642 - 8);
  unsigned int v31 = *(_DWORD *)(v30 + 84);
  uint64_t v1638 = swift_getAssociatedTypeWitness();
  uint64_t v32 = *(void *)(v1638 - 8);
  unsigned int v33 = *(_DWORD *)(v32 + 84);
  unsigned int v1605 = v33;
  unsigned int v1624 = v31;
  if (v31 > v33) {
    unsigned int v33 = v31;
  }
  unsigned int v1618 = v33;
  if (v33 <= 0x7FFFFFFE) {
    unsigned int v33 = 2147483646;
  }
  unsigned int v1634 = v33;
  if (v33 <= v29) {
    unsigned int v33 = v29;
  }
  if (v33 <= v1665) {
    unsigned int v33 = v1665;
  }
  unsigned int v1606 = v33;
  if (v33 <= 0x7FFFFFFF) {
    unsigned int v33 = 0x7FFFFFFF;
  }
  unsigned int v1629 = v33;
  uint64_t v1647 = v1687 + v1712;
  uint64_t v1643 = v30;
  uint64_t v1645 = *(void *)(v1638 - 8);
  uint64_t v34 = *(unsigned __int8 *)(v32 + 80);
  uint64_t v35 = *(_DWORD *)(v30 + 80) & 0xF8 | v34 | 7;
  uint64_t v1619 = v1687 + v35;
  uint64_t v1666 = *(void *)(v30 + 64) + 7;
  uint64_t v1644 = v34 + 8;
  uint64_t v1632 = *(void *)(v1645 + 64) + 7;
  unint64_t v36 = ((((v1632 + ((v34 + 8 + (v1666 & 0xFFFFFFFFFFFFFFF8)) & ~v34)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  unint64_t v1617 = (v1699 + v36 + ((v1687 + v35 + ((v1687 + v1712) & ~v1712)) & ~v35)) & ~v1707;
  unint64_t v37 = (((v1617 + v1696 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  size_t v38 = v37 + 16;
  uint64_t v39 = v35 | v1712;
  uint64_t v40 = v24;
  uint64_t v41 = v35 | v1712 | v24;
  unint64_t v42 = v37 + ((v37 + 16 + v41) & ~v41);
  uint64_t v1681 = v28;
  unint64_t v1602 = v28 + v10;
  size_t v43 = v1694 + ((v28 + v10) & ~v28);
  unint64_t v44 = (v43 + 7) & 0xFFFFFFFFFFFFFFF8;
  unsigned int v1621 = v29;
  if (v29) {
    size_t v45 = v1687;
  }
  else {
    size_t v45 = v1687 + 1;
  }
  uint64_t v46 = *(void *)(v1674 - 8);
  uint64_t v47 = *(unsigned __int8 *)(v46 + 80);
  uint64_t v1599 = v46;
  unint64_t v48 = ((v44 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  unint64_t v49 = ((((((v45 + v35 + ((v43 + v1712) & ~v1712)) & ~v35) + v36 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  unint64_t v50 = ((v44 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (*(_DWORD *)(v46 + 84)) {
    uint64_t v51 = *(void *)(*(void *)(v1674 - 8) + 64);
  }
  else {
    uint64_t v51 = *(void *)(*(void *)(v1674 - 8) + 64) + 1;
  }
  if (v10 <= v48) {
    unint64_t v52 = v48;
  }
  else {
    unint64_t v52 = v10;
  }
  if (v49 <= v36 + ((v45 + v35 + v1671) & ~v35) + 16) {
    unint64_t v49 = v36 + ((v45 + v35 + v1671) & ~v35) + 16;
  }
  uint64_t v1598 = v10 + v47;
  size_t v1595 = v51;
  if (v50 <= ((v10 + v47) & ~v47) + v51) {
    unint64_t v50 = ((v10 + v47) & ~v47) + v51;
  }
  if (v52 <= v49) {
    unint64_t v52 = v49;
  }
  if (v52 <= v50) {
    unint64_t v53 = v50;
  }
  else {
    unint64_t v53 = v52;
  }
  if (v1680) {
    size_t v54 = v10;
  }
  else {
    size_t v54 = v10 + 1;
  }
  uint64_t v55 = *(void *)(v1673 - 8);
  uint64_t v56 = *(unsigned __int8 *)(v55 + 80);
  uint64_t v1672 = v41;
  unint64_t v1601 = v41 + v1687;
  size_t v57 = v38 + ((v41 + v1687) & ~v41);
  unint64_t v58 = (v57 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v59 = ((((((v54 + v1679 + ((v57 + v1721) & ~v1721)) & ~v1679) + v1697 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  uint64_t v1597 = v1687 + v1721;
  size_t v1600 = v54 + v1679;
  if (*(_DWORD *)(v55 + 84)) {
    uint64_t v60 = *(void *)(*(void *)(v1673 - 8) + 64);
  }
  else {
    uint64_t v60 = *(void *)(*(void *)(v1673 - 8) + 64) + 1;
  }
  if (v1687 <= ((v58 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) {
    unint64_t v61 = ((v58 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  else {
    unint64_t v61 = v1687;
  }
  if (v59 <= v1697 + ((v54 + v1679 + ((v1687 + v1721) & ~v1721)) & ~v1679) + 16) {
    unint64_t v59 = v1697 + ((v54 + v1679 + ((v1687 + v1721) & ~v1721)) & ~v1679) + 16;
  }
  unint64_t v62 = ((v58 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  uint64_t v1596 = v1687 + v56;
  size_t v1594 = v60;
  if (v62 <= ((v1687 + v56) & ~v56) + v60) {
    unint64_t v62 = ((v1687 + v56) & ~v56) + v60;
  }
  if (v61 <= v59) {
    unint64_t v61 = v59;
  }
  if (v61 <= v62) {
    unint64_t v63 = v62;
  }
  else {
    unint64_t v63 = v61;
  }
  unint64_t v1609 = v63;
  unint64_t v64 = v63 + 1;
  if (v64 <= v53 + 1) {
    unint64_t v65 = v53 + 1;
  }
  else {
    unint64_t v65 = v64;
  }
  if (v1700 > v1669 + 2) {
    unint64_t v66 = v1669 + 1;
  }
  else {
    unint64_t v66 = v1669 + 2;
  }
  if (v66 <= v1667) {
    unint64_t v66 = v1667;
  }
  size_t v1616 = v54;
  unint64_t v1612 = ((((((((v1679 + ((((v54 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 9) & ~v1679) + v1697 + 34) & 0xFFFFFFFFFFFFFFF8)
            + 63) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + v39
        + 8;
  size_t v1613 = v45 + 7;
  uint64_t v1614 = v35 + 9;
  unint64_t v1615 = ((((((((v35 + 9 + ((((v45 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v35) + v36 + 34) & 0xFFFFFFFFFFFFFFF8)
            + 63) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 8;
  unint64_t v1625 = ((v42 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v66 <= v1625) {
    unint64_t v66 = ((v42 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  unint64_t v67 = (unint64_t)a2;
  if (v66 <= v1694) {
    unint64_t v66 = v1694;
  }
  if (v66 <= v38) {
    unint64_t v66 = v38;
  }
  if (v66 <= v1684 + 2) {
    unint64_t v66 = v1684 + 2;
  }
  if (v66 <= ((v1669 + 9) & 0xFFFFFFFFFFFFFFF8) + 8) {
    unint64_t v66 = ((v1669 + 9) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  if (v66 <= (v1669 & 0xFFFFFFFFFFFFFFF8) + 16) {
    unint64_t v66 = (v1669 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  if (v66 <= v1683) {
    unint64_t v66 = v1683;
  }
  if (v66 <= ((v1670 + 1) & ~v1670) + v1700) {
    unint64_t v66 = ((v1670 + 1) & ~v1670) + v1700;
  }
  unint64_t v68 = v65 + 1;
  unint64_t v69 = v65;
  if (v66 <= v65 + 1) {
    unint64_t v66 = v65 + 1;
  }
  if (v66 <= v1684) {
    unint64_t v66 = v1684;
  }
  if (v66 <= ((((v1615 + (v1612 & ~v39) + 23) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 8) {
    unint64_t v66 = ((((v1615 + (v1612 & ~v39) + 23) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  if (v66 <= v1682) {
    unint64_t v66 = v1682;
  }
  if (v66 <= 0x38) {
    uint64_t v70 = 56;
  }
  else {
    uint64_t v70 = v66;
  }
  if (v70 > 3)
  {
LABEL_105:
    unsigned int v71 = a2[v70];
    unsigned int v72 = v71 - 41;
    if (v71 >= 0x29)
    {
LABEL_106:
      if (v70 <= 3) {
        uint64_t v73 = v70;
      }
      else {
        uint64_t v73 = 4;
      }
      uint64_t v74 = v1670;
      switch(v73)
      {
        case 1:
          int v75 = *a2;
          if (v70 >= 4) {
            goto LABEL_127;
          }
          goto LABEL_126;
        case 2:
          int v75 = *(unsigned __int16 *)a2;
          if (v70 >= 4) {
            goto LABEL_127;
          }
          goto LABEL_126;
        case 3:
          int v75 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          uint64_t v74 = v1670;
          if (v70 >= 4) {
            goto LABEL_127;
          }
          goto LABEL_126;
        case 4:
          int v75 = *(_DWORD *)a2;
          if (v70 < 4)
          {
LABEL_126:
            uint64_t v74 = v1670;
            v75 |= v72 << (8 * v70);
          }
LABEL_127:
          unsigned int v71 = v75 + 41;
          if (v71 <= 0x28) {
            goto LABEL_118;
          }
LABEL_128:
          if (v70 > 3) {
            goto LABEL_132;
          }
          unsigned int v87 = ((1 << (8 * v70)) + 5) >> (8 * v70);
          uint64_t v88 = 2;
          if (v87 > 0xFFD6) {
            uint64_t v88 = 4;
          }
          if (v87 <= 0xD6) {
LABEL_132:
          }
            uint64_t v88 = 1;
          uint64_t v86 = a1;
          memcpy(a1, (const void *)v67, v88 + v70);
          break;
        default:
          goto LABEL_118;
      }
      return v86;
    }
    goto LABEL_117;
  }
  unsigned int v76 = ((1 << (8 * v70)) + 5) >> (8 * v70);
  if (v76 > 0xFFD6)
  {
    unsigned int v71 = *(_DWORD *)&a2[v70];
    unsigned int v72 = v71 - 41;
    if (v71 >= 0x29) {
      goto LABEL_106;
    }
  }
  else
  {
    if (v76 <= 0xD6) {
      goto LABEL_105;
    }
    unsigned int v71 = *(unsigned __int16 *)&a2[v70];
    unsigned int v72 = v71 - 41;
    if (v71 >= 0x29) {
      goto LABEL_106;
    }
  }
LABEL_117:
  uint64_t v74 = v1670;
LABEL_118:
  size_t v1592 = v45 + v35;
  size_t v1593 = v45;
  uint64_t v1668 = v70;
  unint64_t v1610 = ((((v1615 + (v1612 & ~v39) + 23) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 8;
  unint64_t v1611 = v68;
  uint64_t v77 = ~v1712;
  uint64_t v78 = ~v74;
  uint64_t v70 = ~v1721;
  uint64_t v79 = ~v1679;
  unint64_t v67 = ~v1661;
  uint64_t v80 = ~v1707;
  uint64_t v81 = ~v40;
  uint64_t v82 = ~v1681;
  uint64_t v83 = ~v35;
  uint64_t v84 = v74;
  uint64_t v85 = ~v34;
  switch(v71)
  {
    case 0u:
      uint64_t v86 = a1;
      (*(void (**)(_OWORD *, unsigned __int8 *, uint64_t, unint64_t))(v1658 + 32))(a1, a2, AssociatedTypeWitness, v69);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v1705 + 32))(((unint64_t)a1 + v1627) & v77, (unint64_t)&a2[v1627] & v77, v1660);
      if (v1668 > 3) {
        goto LABEL_120;
      }
      unsigned int v405 = ((1 << (8 * v1668)) + 5) >> (8 * v1668);
      if (v405 > 0xFFD6)
      {
        *(_DWORD *)((char *)a1 + v1668) = 0;
      }
      else if (v405 <= 0xD6)
      {
LABEL_120:
        *((unsigned char *)a1 + v1668) = 0;
      }
      else
      {
        *(_WORD *)((char *)a1 + v1668) = 0;
      }
      return v86;
    case 1u:
      unsigned int v89 = a2[v1669];
      unsigned int v90 = v89 - 2;
      if (v89 < 2)
      {
        uint64_t v86 = a1;
        uint64_t v92 = v1705;
        uint64_t v94 = v1658;
        uint64_t v93 = v1668;
      }
      else
      {
        if (v1669 <= 3) {
          uint64_t v91 = v1669;
        }
        else {
          uint64_t v91 = 4;
        }
        uint64_t v92 = v1705;
        uint64_t v93 = v1668;
        uint64_t v86 = a1;
        uint64_t v94 = v1658;
        switch(v91)
        {
          case 1:
            int v95 = *a2;
            goto LABEL_456;
          case 2:
            int v95 = *(unsigned __int16 *)a2;
            goto LABEL_456;
          case 3:
            int v95 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_456;
          case 4:
            int v95 = *(_DWORD *)a2;
LABEL_456:
            if (v1669 < 4) {
              unsigned int v89 = (v95 | (v90 << (8 * v1669))) + 2;
            }
            else {
              unsigned int v89 = v95 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v560 = v89 == 1;
      if (v89 == 1) {
        uint64_t v561 = v92;
      }
      else {
        uint64_t v561 = v94;
      }
      (*(void (**)(unsigned char *))(v561 + 32))(v86);
      v86[v1669] = v560;
      if (v93 > 3) {
        goto LABEL_463;
      }
      unsigned int v562 = ((1 << (8 * v93)) + 5) >> (8 * v93);
      if (v562 > 0xFFD6)
      {
        *(_DWORD *)&v86[v93] = 1;
      }
      else if (v562 <= 0xD6)
      {
LABEL_463:
        v86[v93] = 1;
      }
      else
      {
        *(_WORD *)&v86[v93] = 1;
      }
      return v86;
    case 2u:
      unsigned int v96 = a2[v1669];
      unsigned int v97 = v96 - 2;
      if (v96 < 2)
      {
        uint64_t v86 = a1;
        uint64_t v99 = v1705;
        uint64_t v101 = v1658;
        uint64_t v100 = v1668;
      }
      else
      {
        if (v1669 <= 3) {
          uint64_t v98 = v1669;
        }
        else {
          uint64_t v98 = 4;
        }
        uint64_t v99 = v1705;
        uint64_t v100 = v1668;
        uint64_t v86 = a1;
        uint64_t v101 = v1658;
        switch(v98)
        {
          case 1:
            int v102 = *a2;
            goto LABEL_471;
          case 2:
            int v102 = *(unsigned __int16 *)a2;
            goto LABEL_471;
          case 3:
            int v102 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_471;
          case 4:
            int v102 = *(_DWORD *)a2;
LABEL_471:
            if (v1669 < 4) {
              unsigned int v96 = (v102 | (v97 << (8 * v1669))) + 2;
            }
            else {
              unsigned int v96 = v102 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v563 = v96 == 1;
      if (v96 == 1) {
        uint64_t v564 = v99;
      }
      else {
        uint64_t v564 = v101;
      }
      (*(void (**)(unsigned char *))(v564 + 32))(v86);
      v86[v1669] = v563;
      if (v100 > 3) {
        goto LABEL_478;
      }
      unsigned int v565 = ((1 << (8 * v100)) + 5) >> (8 * v100);
      if (v565 > 0xFFD6)
      {
        *(_DWORD *)&v86[v100] = 2;
      }
      else if (v565 <= 0xD6)
      {
LABEL_478:
        v86[v100] = 2;
      }
      else
      {
        *(_WORD *)&v86[v100] = 2;
      }
      return v86;
    case 3u:
      unsigned int v103 = a2[v1669];
      unsigned int v104 = v103 - 2;
      if (v103 < 2)
      {
        uint64_t v86 = a1;
        uint64_t v106 = v1705;
        uint64_t v108 = v1658;
        uint64_t v107 = v1668;
      }
      else
      {
        if (v1669 <= 3) {
          uint64_t v105 = v1669;
        }
        else {
          uint64_t v105 = 4;
        }
        uint64_t v106 = v1705;
        uint64_t v107 = v1668;
        uint64_t v86 = a1;
        uint64_t v108 = v1658;
        switch(v105)
        {
          case 1:
            int v109 = *a2;
            goto LABEL_486;
          case 2:
            int v109 = *(unsigned __int16 *)a2;
            goto LABEL_486;
          case 3:
            int v109 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_486;
          case 4:
            int v109 = *(_DWORD *)a2;
LABEL_486:
            if (v1669 < 4) {
              unsigned int v103 = (v109 | (v104 << (8 * v1669))) + 2;
            }
            else {
              unsigned int v103 = v109 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v566 = v103 == 1;
      if (v103 == 1) {
        uint64_t v567 = v106;
      }
      else {
        uint64_t v567 = v108;
      }
      (*(void (**)(unsigned char *))(v567 + 32))(v86);
      v86[v1669] = v566;
      if (v107 > 3) {
        goto LABEL_493;
      }
      unsigned int v568 = ((1 << (8 * v107)) + 5) >> (8 * v107);
      if (v568 > 0xFFD6)
      {
        *(_DWORD *)&v86[v107] = 3;
      }
      else if (v568 <= 0xD6)
      {
LABEL_493:
        v86[v107] = 3;
      }
      else
      {
        *(_WORD *)&v86[v107] = 3;
      }
      return v86;
    case 4u:
      unsigned int v110 = a2[v1669];
      unsigned int v111 = v110 - 2;
      if (v110 < 2)
      {
        uint64_t v116 = v78;
        uint64_t v112 = v1668;
        uint64_t v86 = a1;
        uint64_t v114 = v1660;
        uint64_t v117 = AssociatedTypeWitness;
        uint64_t v115 = v1705;
        uint64_t v118 = v1658;
      }
      else
      {
        uint64_t v112 = v1668;
        if (v1669 <= 3) {
          uint64_t v113 = v1669;
        }
        else {
          uint64_t v113 = 4;
        }
        uint64_t v114 = v1660;
        uint64_t v115 = v1705;
        uint64_t v116 = v78;
        uint64_t v86 = a1;
        uint64_t v117 = AssociatedTypeWitness;
        uint64_t v118 = v1658;
        switch(v113)
        {
          case 1:
            int v119 = *a2;
            goto LABEL_501;
          case 2:
            int v119 = *(unsigned __int16 *)a2;
            goto LABEL_501;
          case 3:
            int v119 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_501;
          case 4:
            int v119 = *(_DWORD *)a2;
LABEL_501:
            if (v1669 < 4) {
              unsigned int v110 = (v119 | (v111 << (8 * v1669))) + 2;
            }
            else {
              unsigned int v110 = v119 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v569 = v110 == 1;
      if (v110 == 1) {
        uint64_t v570 = v115;
      }
      else {
        uint64_t v570 = v118;
      }
      if (v110 == 1) {
        uint64_t v571 = v114;
      }
      else {
        uint64_t v571 = v117;
      }
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t, unint64_t))(v570 + 32))(v86, a2, v571, v69);
      v86[v1669] = v569;
      long long v572 = (unsigned __int8 *)((unint64_t)&a2[v1654] & v116);
      unsigned int v573 = v572[v1669];
      unsigned int v574 = v573 - 2;
      if (v573 >= 2)
      {
        if (v1669 <= 3) {
          uint64_t v575 = v1669;
        }
        else {
          uint64_t v575 = 4;
        }
        switch(v575)
        {
          case 1:
            int v576 = *v572;
            goto LABEL_937;
          case 2:
            int v576 = *(unsigned __int16 *)v572;
            goto LABEL_937;
          case 3:
            int v576 = *(unsigned __int16 *)v572 | (*(unsigned __int8 *)(((unint64_t)&a2[v1654] & v116) + 2) << 16);
            goto LABEL_937;
          case 4:
            int v576 = *(_DWORD *)v572;
LABEL_937:
            if (v1669 < 4) {
              unsigned int v573 = (v576 | (v574 << (8 * v1669))) + 2;
            }
            else {
              unsigned int v573 = v576 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v680 = v573 == 1;
      if (v573 == 1) {
        uint64_t v681 = v115;
      }
      else {
        uint64_t v681 = v118;
      }
      (*(void (**)(unint64_t))(v681 + 32))((unint64_t)&v86[v1654] & v116);
      *(unsigned char *)(((unint64_t)&v86[v1654] & v116) + v1669) = v680;
      if (v112 > 3) {
        goto LABEL_944;
      }
      unsigned int v682 = ((1 << (8 * v112)) + 5) >> (8 * v112);
      if (v682 > 0xFFD6)
      {
        *(_DWORD *)&v86[v112] = 4;
      }
      else if (v682 <= 0xD6)
      {
LABEL_944:
        v86[v112] = 4;
      }
      else
      {
        *(_WORD *)&v86[v112] = 4;
      }
      return v86;
    case 5u:
      uint64_t v1675 = ~v1661;
      uint64_t v120 = ~v40;
      uint64_t v1569 = ~v1721;
      uint64_t v1688 = ~v1679;
      uint64_t v1713 = ~v1707;
      uint64_t v121 = v1680;
      unsigned int v122 = v1622;
      size_t v1571 = v38;
      uint64_t v1576 = ~v1681;
      if (v1680 != v1622)
      {
        uint64_t v126 = ~v1721;
        unint64_t v406 = (unint64_t)&a2[v1648] & v1569;
        uint64_t v125 = ~v1679;
        unint64_t v407 = (v406 + v1690 + v1679) & v1688;
        if (v1630 == v1622)
        {
          size_t v124 = __n;
          if (v1623 == v1630)
          {
            int v123 = (*(uint64_t (**)(unint64_t))(v1641 + 48))((v406 + v1690 + v1679) & v1688);
            uint64_t v86 = a1;
            goto LABEL_969;
          }
          uint64_t v556 = (unint64_t *)((v1646 + v407) & 0xFFFFFFFFFFFFFFF8);
          uint64_t v86 = a1;
          if (v1608 > 0x7FFFFFFE)
          {
            int v123 = (*(uint64_t (**)(unint64_t, void, uint64_t, unint64_t))(v1637 + 48))(((unint64_t)v556 + v1635) & v1675, v1604, v1636, v69);
            goto LABEL_969;
          }
          unint64_t v557 = *v556;
        }
        else
        {
          size_t v500 = v1697 + v407;
          size_t v124 = __n;
          if ((v1607 & 0x80000000) == 0)
          {
            unint64_t v501 = *(void *)(v500 + 8);
            if (v501 >= 0xFFFFFFFF) {
              LODWORD(v501) = -1;
            }
            int v123 = v501 + 1;
            uint64_t v86 = a1;
            goto LABEL_969;
          }
          uint64_t v686 = (v1655 + ((v1699 + v500) & v1713)) & v81;
          uint64_t v86 = a1;
          if (v1639 > 0x7FFFFFFD)
          {
            int v123 = (*(uint64_t (**)(uint64_t, void, uint64_t, unint64_t))(v1653 + 48))(v686, v1639, v1652, v69);
            goto LABEL_969;
          }
          unint64_t v557 = *(void *)(((v1603 + ((v1651 + v686) & v81)) & 0xFFFFFFFFFFFFFFF8) + 8);
        }
        if (v557 >= 0xFFFFFFFF) {
          LODWORD(v557) = -1;
        }
        if ((v557 + 1) >= 2) {
          goto LABEL_970;
        }
        goto LABEL_973;
      }
      int v123 = (*(uint64_t (**)(unsigned __int8 *, void, uint64_t, unint64_t))(v1658 + 48))(a2, v1680, AssociatedTypeWitness, v69);
      uint64_t v86 = a1;
      size_t v124 = __n;
      uint64_t v125 = ~v1679;
      uint64_t v126 = ~v1721;
LABEL_969:
      if (v123)
      {
LABEL_970:
        memcpy(v86, a2, v1694);
LABEL_971:
        size_t v691 = v124;
        goto LABEL_977;
      }
      unint64_t v406 = (unint64_t)&a2[v1648] & v126;
      unint64_t v407 = (v406 + v1690 + v1679) & v125;
LABEL_973:
      unsigned int v692 = *(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v1658 + 32);
      v692(v86, a2, AssociatedTypeWitness);
      unint64_t v693 = (unint64_t)&v86[v1648] & v126;
      v692((unsigned char *)v693, (unsigned __int8 *)v406, AssociatedTypeWitness);
      unint64_t v694 = (v693 + v1690 + v1679) & v125;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v1641 + 32))(v694, v407, v1640);
      uint64_t v695 = (void *)((v1646 + v694) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v696 = (void *)((v1646 + v407) & 0xFFFFFFFFFFFFFFF8);
      void *v695 = *v696;
      unint64_t v697 = ((unint64_t)v695 + v1635) & v1675;
      unint64_t v698 = ((unint64_t)v696 + v1635) & v1675;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v1637 + 32))(v697, v698, v1636);
      unsigned int v699 = (void *)((v1631 + v697) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v700 = (void *)((v1631 + v698) & 0xFFFFFFFFFFFFFFF8);
      void *v699 = *v700;
      *(_OWORD *)(((unint64_t)v699 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v700 + 15) & 0xFFFFFFFFFFFFFFF8);
      *(_OWORD *)(v1697 + v694) = *(_OWORD *)(v1697 + v407);
      size_t v701 = (v1699 + v1697 + v694) & v1713;
      size_t v702 = (v1699 + v1697 + v407) & v1713;
      *(unsigned char *)size_t v701 = *(unsigned char *)v702;
      uint64_t v703 = v701 | 4;
      int v704 = *(_DWORD *)(v702 | 4);
      *(unsigned char *)(v703 + 4) = *(unsigned char *)((v702 | 4) + 4);
      *(_DWORD *)uint64_t v703 = v704;
      *(_WORD *)(v701 + 10) = *(_WORD *)(v702 + 0xA);
      unsigned int v705 = *(void (**)(size_t, size_t, uint64_t))(v1653 + 32);
      v705((v1655 + v701) & v120, (v1655 + v702) & v120, v1652);
      size_t v706 = (v1651 + ((v1655 + v701) & v120)) & v120;
      size_t v707 = (v1651 + ((v1655 + v702) & v120)) & v120;
      v705(v706, v707, v1652);
      uint64_t v708 = (unsigned char *)(v706 + v1657);
      *uint64_t v708 = *(unsigned char *)(v707 + v1657);
      v708[1] = *(unsigned char *)(v707 + v1657 + 1);
      v708[2] = *(unsigned char *)(v707 + v1657 + 2);
      v708[3] = *(unsigned char *)(v707 + v1657 + 3);
      v708[4] = *(unsigned char *)(v707 + v1657 + 4);
      unint64_t v709 = (v706 + v1657 + 12) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v710 = (v707 + v1657 + 12) & 0xFFFFFFFFFFFFFFF8;
      *(_OWORD *)unint64_t v709 = *(_OWORD *)v710;
      *(unsigned char *)(v709 + 16) = *(unsigned char *)(v710 + 16);
      *(unsigned char *)(v709 + 17) = *(unsigned char *)(v710 + 17);
      *(unsigned char *)(v709 + 18) = *(unsigned char *)(v710 + 18);
      *(unsigned char *)(v709 + 19) = *(unsigned char *)(v710 + 19);
      unint64_t v711 = (v709 + 27) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v712 = (v710 + 27) & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v711 = *(void *)v712;
      *(unsigned char *)(v711 + 8) = *(unsigned char *)(v712 + 8);
      *(unsigned char *)(v711 + 9) = *(unsigned char *)(v712 + 9);
      *(unsigned char *)(v711 + 10) = *(unsigned char *)(v712 + 10);
      *(unsigned char *)(v711 + 11) = *(unsigned char *)(v712 + 11);
      *(unsigned char *)(v711 + 12) = *(unsigned char *)(v712 + 12);
      BOOL v713 = (void *)((v710 + 47) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v714 = (void *)((v709 + 47) & 0xFFFFFFFFFFFFFFF8);
      void *v714 = *v713;
      unint64_t v715 = ((unint64_t)v714 + 15) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v716 = ((unint64_t)v713 + 15) & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v715 = *(void *)v716;
      *(unsigned char *)(v715 + 8) = *(unsigned char *)(v716 + 8);
      *(unsigned char *)(v715 + 9) = *(unsigned char *)(v716 + 9);
      unsigned int v717 = (void *)((v1649 + v715) & v120);
      unsigned int v718 = (const void *)((v1649 + v716) & v120);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1653 + 48))(v718, 1, v1652))
      {
        memcpy(v717, v718, v124);
      }
      else
      {
        v705((size_t)v717, (size_t)v718, v1652);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v1653 + 56))(v717, 0, 1, v1652);
      }
      unsigned int v122 = v1622;
      uint64_t v719 = (void *)(((unint64_t)v718 + v1650) & 0xFFFFFFFFFFFFFFF8);
      int v720 = (void *)(((unint64_t)v717 + v1650) & 0xFFFFFFFFFFFFFFF8);
      void *v720 = *v719;
      unint64_t v721 = ((unint64_t)v720 + 15) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v722 = ((unint64_t)v719 + 15) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v723 = *(void *)v722;
      *(unsigned char *)(v721 + 8) = *(unsigned char *)(v722 + 8);
      *(void *)unint64_t v721 = v723;
      BOOL v724 = (void *)(((unint64_t)v720 + 31) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v725 = (void *)(((unint64_t)v719 + 31) & 0xFFFFFFFFFFFFFFF8);
      *BOOL v724 = *v725;
      unsigned int v726 = (_OWORD *)(((unint64_t)v724 + 15) & 0xFFFFFFFFFFFFFFF8);
      BOOL v727 = (_OWORD *)(((unint64_t)v725 + 15) & 0xFFFFFFFFFFFFFFF8);
      _OWORD *v726 = *v727;
      unint64_t v728 = ((unint64_t)v726 + 19) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v729 = ((unint64_t)v727 + 19) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v730 = *(void *)v729;
      *(unsigned char *)(v728 + 8) = *(unsigned char *)(v729 + 8);
      *(void *)unint64_t v728 = v730;
      *(unsigned char *)(v728 + 9) = *(unsigned char *)(v729 + 9);
      unint64_t v731 = (v728 + 13) & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v732 = (v729 + 13) & 0xFFFFFFFFFFFFFFFCLL;
      LODWORD(v723) = *(_DWORD *)v732;
      *(unsigned char *)(v731 + 4) = *(unsigned char *)(v732 + 4);
      *(_DWORD *)unint64_t v731 = v723;
      *(_OWORD *)((v728 + 25) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v729 + 25) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v733 = v1696 + v701;
      long long v734 = *(_OWORD *)(v1696 + v702 + 112);
      long long v736 = *(_OWORD *)(v1696 + v702 + 64);
      long long v735 = *(_OWORD *)(v1696 + v702 + 80);
      *(_OWORD *)(v733 + 96) = *(_OWORD *)(v1696 + v702 + 96);
      *(_OWORD *)(v733 + 112) = v734;
      *(_OWORD *)(v733 + 64) = v736;
      *(_OWORD *)(v733 + 80) = v735;
      long long v737 = *(_OWORD *)(v1696 + v702 + 176);
      long long v739 = *(_OWORD *)(v1696 + v702 + 128);
      long long v738 = *(_OWORD *)(v1696 + v702 + 144);
      *(_OWORD *)(v733 + 160) = *(_OWORD *)(v1696 + v702 + 160);
      *(_OWORD *)(v733 + 176) = v737;
      *(_OWORD *)(v733 + 128) = v739;
      *(_OWORD *)(v733 + 144) = v738;
      long long v741 = *(_OWORD *)(v1696 + v702 + 208);
      long long v740 = *(_OWORD *)(v1696 + v702 + 224);
      long long v742 = *(_OWORD *)(v1696 + v702 + 192);
      *(void *)(v733 + 240) = *(void *)(v1696 + v702 + 240);
      *(_OWORD *)(v733 + 208) = v741;
      *(_OWORD *)(v733 + 224) = v740;
      *(_OWORD *)(v733 + 192) = v742;
      long long v743 = *(_OWORD *)(v1696 + v702);
      long long v744 = *(_OWORD *)(v1696 + v702 + 16);
      long long v745 = *(_OWORD *)(v1696 + v702 + 48);
      *(_OWORD *)(v733 + 32) = *(_OWORD *)(v1696 + v702 + 32);
      *(_OWORD *)(v733 + 48) = v745;
      *(_OWORD *)unint64_t v733 = v743;
      *(_OWORD *)(v733 + 16) = v744;
      BOOL v746 = (_OWORD *)((v1696 + v701 + 255) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v747 = (long long *)((v1696 + v702 + 255) & 0xFFFFFFFFFFFFFFF8);
      long long v748 = *v747;
      *(_OWORD *)((char *)v746 + 9) = *(long long *)((char *)v747 + 9);
      *BOOL v746 = v748;
      unint64_t v749 = (v1696 + v701 + 287) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v750 = (v1696 + v702 + 287) & 0xFFFFFFFFFFFFFFF8;
      long long v751 = *(_OWORD *)v750;
      *(unsigned char *)(v749 + 16) = *(unsigned char *)(v750 + 16);
      *(_OWORD *)unint64_t v749 = v751;
      unsigned int v752 = (void *)((v1696 + v701 + 311) & 0xFFFFFFFFFFFFFFF8);
      BOOL v753 = (void *)((v1696 + v702 + 311) & 0xFFFFFFFFFFFFFFF8);
      *unsigned int v752 = *v753;
      *(_OWORD *)(((unint64_t)v752 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v753 + 15) & 0xFFFFFFFFFFFFFFF8);
      size_t v691 = v1657;
      uint64_t v86 = a1;
      uint64_t v125 = ~v1679;
      uint64_t v121 = v1680;
      if (!v1639) {
        goto LABEL_971;
      }
LABEL_977:
      unint64_t v754 = ((((v1628
               + 327
               + ((((((((((v1633 + 7 + v691) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                   + 19) & 0xFFFFFFFFFFFFFFF8)
                 + 25) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFF8)
             + 15) & 0xFFFFFFFFFFFFFFF8)
           + 16;
      unint64_t v1722 = (void *)((unint64_t)&v86[v1681 + v754] & v1576);
      uint64_t v755 = (const void *)((unint64_t)&a2[v1681 + v754] & v1576);
      uint64_t v1706 = v1628 + 327;
      unint64_t v1711 = v1633 + 7;
      if (v121 == v122)
      {
        int v756 = (*(uint64_t (**)(const void *, uint64_t, uint64_t))(v1658 + 48))(v755, v121, AssociatedTypeWitness);
        goto LABEL_979;
      }
      unint64_t v768 = ((unint64_t)v755 + v1648) & v1569;
      unint64_t v769 = (v1620 + v768) & v125;
      if (v1630 == v122)
      {
        if (v1623 == v1630)
        {
          int v756 = (*(uint64_t (**)(unint64_t, void, uint64_t))(v1641 + 48))((v1620 + v768) & v125, v1623, v1640);
          goto LABEL_979;
        }
        long long v838 = (unint64_t *)((v1646 + v769) & 0xFFFFFFFFFFFFFFF8);
        if (v1608 <= 0x7FFFFFFE)
        {
          unint64_t v839 = *v838;
          goto LABEL_1186;
        }
        int v756 = (*(uint64_t (**)(unint64_t, void, uint64_t))(v1637 + 48))(((unint64_t)v838 + v1635) & v1675, v1604, v1636);
      }
      else
      {
        size_t v770 = v769 + v1697;
        if ((v1607 & 0x80000000) == 0)
        {
          unint64_t v771 = *(void *)(v770 + 8);
          if (v771 >= 0xFFFFFFFF) {
            LODWORD(v771) = -1;
          }
          if (v771 != -1) {
            goto LABEL_980;
          }
          goto LABEL_989;
        }
        uint64_t v840 = (v1655 + ((v1699 + v770) & v1713)) & v120;
        if (v1639 <= 0x7FFFFFFD)
        {
          unint64_t v839 = *(void *)(((v1603 + ((v1651 + v840) & v120)) & 0xFFFFFFFFFFFFFFF8) + 8);
LABEL_1186:
          if (v839 >= 0xFFFFFFFF) {
            LODWORD(v839) = -1;
          }
          if ((v839 + 1) >= 2) {
            goto LABEL_980;
          }
LABEL_990:
          uint64_t v772 = v120;
          uint64_t v773 = *(void (**)(void *))(v1658 + 32);
          unint64_t v1728 = v755;
          v773(v1722);
          unint64_t v774 = ((unint64_t)v1722 + v1648) & v1569;
          ((void (*)(unint64_t, unint64_t, uint64_t))v773)(v774, v768, AssociatedTypeWitness);
          unint64_t v775 = (v1620 + v774) & v125;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v1641 + 32))(v775, v769, v1640);
          size_t v776 = (void *)((v1646 + v775) & 0xFFFFFFFFFFFFFFF8);
          size_t v777 = (void *)((v1646 + v769) & 0xFFFFFFFFFFFFFFF8);
          *size_t v776 = *v777;
          unint64_t v778 = ((unint64_t)v776 + v1635) & v1675;
          unint64_t v779 = ((unint64_t)v777 + v1635) & v1675;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v1637 + 32))(v778, v779, v1636);
          uint64_t v780 = (void *)((v1631 + v778) & 0xFFFFFFFFFFFFFFF8);
          unint64_t v781 = (void *)((v1631 + v779) & 0xFFFFFFFFFFFFFFF8);
          *uint64_t v780 = *v781;
          *(_OWORD *)(((unint64_t)v780 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v781 + 15) & 0xFFFFFFFFFFFFFFF8);
          *(_OWORD *)(v775 + v1697) = *(_OWORD *)(v769 + v1697);
          size_t v782 = (v1699 + v775 + v1697) & v1713;
          size_t v783 = (v1699 + v769 + v1697) & v1713;
          *(unsigned char *)size_t v782 = *(unsigned char *)v783;
          uint64_t v784 = v782 | 4;
          int v785 = *(_DWORD *)(v783 | 4);
          *(unsigned char *)(v784 + 4) = *(unsigned char *)((v783 | 4) + 4);
          *(_DWORD *)uint64_t v784 = v785;
          *(_WORD *)(v782 + 10) = *(_WORD *)(v783 + 0xA);
          v786 = *(void (**)(size_t, size_t, uint64_t))(v1653 + 32);
          v786((v1655 + v782) & v772, (v1655 + v783) & v772, v1652);
          size_t v787 = (v1651 + ((v1655 + v782) & v772)) & v772;
          size_t v788 = (v1651 + ((v1655 + v783) & v772)) & v772;
          v786(v787, v788, v1652);
          v789 = (unsigned char *)(v787 + v1657);
          unsigned char *v789 = *(unsigned char *)(v788 + v1657);
          v789[1] = *(unsigned char *)(v788 + v1657 + 1);
          v789[2] = *(unsigned char *)(v788 + v1657 + 2);
          v789[3] = *(unsigned char *)(v788 + v1657 + 3);
          v789[4] = *(unsigned char *)(v788 + v1657 + 4);
          unint64_t v790 = (v787 + v1657 + 12) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v791 = (v788 + v1657 + 12) & 0xFFFFFFFFFFFFFFF8;
          *(_OWORD *)unint64_t v790 = *(_OWORD *)v791;
          *(unsigned char *)(v790 + 16) = *(unsigned char *)(v791 + 16);
          *(unsigned char *)(v790 + 17) = *(unsigned char *)(v791 + 17);
          *(unsigned char *)(v790 + 18) = *(unsigned char *)(v791 + 18);
          *(unsigned char *)(v790 + 19) = *(unsigned char *)(v791 + 19);
          unint64_t v792 = (v790 + 27) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v793 = (v791 + 27) & 0xFFFFFFFFFFFFFFF8;
          *(void *)unint64_t v792 = *(void *)v793;
          *(unsigned char *)(v792 + 8) = *(unsigned char *)(v793 + 8);
          *(unsigned char *)(v792 + 9) = *(unsigned char *)(v793 + 9);
          *(unsigned char *)(v792 + 10) = *(unsigned char *)(v793 + 10);
          *(unsigned char *)(v792 + 11) = *(unsigned char *)(v793 + 11);
          *(unsigned char *)(v792 + 12) = *(unsigned char *)(v793 + 12);
          unint64_t v794 = (void *)((v791 + 47) & 0xFFFFFFFFFFFFFFF8);
          unint64_t v795 = (void *)((v790 + 47) & 0xFFFFFFFFFFFFFFF8);
          *unint64_t v795 = *v794;
          unint64_t v796 = ((unint64_t)v795 + 15) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v797 = ((unint64_t)v794 + 15) & 0xFFFFFFFFFFFFFFF8;
          *(void *)unint64_t v796 = *(void *)v797;
          *(unsigned char *)(v796 + 8) = *(unsigned char *)(v797 + 8);
          *(unsigned char *)(v796 + 9) = *(unsigned char *)(v797 + 9);
          v798 = (void *)((v1649 + v796) & v772);
          unint64_t v799 = (const void *)((v1649 + v797) & v772);
          if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1653 + 48))(v799, 1, v1652))
          {
            size_t v124 = __n;
            memcpy(v798, v799, __n);
            uint64_t v86 = a1;
          }
          else
          {
            v786((size_t)v798, (size_t)v799, v1652);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v1653 + 56))(v798, 0, 1, v1652);
            uint64_t v86 = a1;
            size_t v124 = __n;
          }
          unint64_t v760 = ((v1670 + 1) & ~v1670) + v1700;
          unint64_t v759 = v1626;
          unint64_t v762 = v1610;
          unint64_t v764 = ((v1669 + 9) & 0xFFFFFFFFFFFFFFF8) + 8;
          unint64_t v763 = (v1669 & 0xFFFFFFFFFFFFFFF8) + 16;
          unint64_t v766 = v1684 + 2;
          unint64_t v765 = v1625;
          unint64_t v800 = (void *)(((unint64_t)v798 + v1650) & 0xFFFFFFFFFFFFFFF8);
          unint64_t v801 = (void *)(((unint64_t)v799 + v1650) & 0xFFFFFFFFFFFFFFF8);
          *unint64_t v800 = *v801;
          unint64_t v802 = ((unint64_t)v800 + 15) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v803 = ((unint64_t)v801 + 15) & 0xFFFFFFFFFFFFFFF8;
          uint64_t v804 = *(void *)v803;
          *(unsigned char *)(v802 + 8) = *(unsigned char *)(v803 + 8);
          *(void *)unint64_t v802 = v804;
          uint64_t v805 = (void *)(((unint64_t)v800 + 31) & 0xFFFFFFFFFFFFFFF8);
          unint64_t v806 = (void *)(((unint64_t)v801 + 31) & 0xFFFFFFFFFFFFFFF8);
          *uint64_t v805 = *v806;
          unint64_t v807 = (_OWORD *)(((unint64_t)v805 + 15) & 0xFFFFFFFFFFFFFFF8);
          int v808 = (_OWORD *)(((unint64_t)v806 + 15) & 0xFFFFFFFFFFFFFFF8);
          _OWORD *v807 = *v808;
          unint64_t v809 = ((unint64_t)v807 + 19) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v810 = ((unint64_t)v808 + 19) & 0xFFFFFFFFFFFFFFF8;
          uint64_t v811 = *(void *)v810;
          *(unsigned char *)(v809 + 8) = *(unsigned char *)(v810 + 8);
          *(void *)unint64_t v809 = v811;
          *(unsigned char *)(v809 + 9) = *(unsigned char *)(v810 + 9);
          unint64_t v812 = (v809 + 13) & 0xFFFFFFFFFFFFFFFCLL;
          unint64_t v813 = (v810 + 13) & 0xFFFFFFFFFFFFFFFCLL;
          LODWORD(v804) = *(_DWORD *)v813;
          *(unsigned char *)(v812 + 4) = *(unsigned char *)(v813 + 4);
          *(_DWORD *)unint64_t v812 = v804;
          *(_OWORD *)((v809 + 25) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v810 + 25) & 0xFFFFFFFFFFFFFFF8);
          size_t v814 = v782 + v1696;
          long long v815 = *(_OWORD *)(v783 + v1696 + 112);
          long long v817 = *(_OWORD *)(v783 + v1696 + 64);
          long long v816 = *(_OWORD *)(v783 + v1696 + 80);
          *(_OWORD *)(v814 + 96) = *(_OWORD *)(v783 + v1696 + 96);
          *(_OWORD *)(v814 + 112) = v815;
          *(_OWORD *)(v814 + 64) = v817;
          *(_OWORD *)(v814 + 80) = v816;
          long long v818 = *(_OWORD *)(v783 + v1696 + 176);
          long long v820 = *(_OWORD *)(v783 + v1696 + 128);
          long long v819 = *(_OWORD *)(v783 + v1696 + 144);
          *(_OWORD *)(v814 + 160) = *(_OWORD *)(v783 + v1696 + 160);
          *(_OWORD *)(v814 + 176) = v818;
          *(_OWORD *)(v814 + 128) = v820;
          *(_OWORD *)(v814 + 144) = v819;
          long long v822 = *(_OWORD *)(v783 + v1696 + 208);
          long long v821 = *(_OWORD *)(v783 + v1696 + 224);
          long long v823 = *(_OWORD *)(v783 + v1696 + 192);
          *(void *)(v814 + 240) = *(void *)(v783 + v1696 + 240);
          *(_OWORD *)(v814 + 208) = v822;
          *(_OWORD *)(v814 + 224) = v821;
          *(_OWORD *)(v814 + 192) = v823;
          long long v824 = *(_OWORD *)(v783 + v1696);
          long long v825 = *(_OWORD *)(v783 + v1696 + 16);
          long long v826 = *(_OWORD *)(v783 + v1696 + 48);
          *(_OWORD *)(v814 + 32) = *(_OWORD *)(v783 + v1696 + 32);
          *(_OWORD *)(v814 + 48) = v826;
          *(_OWORD *)size_t v814 = v824;
          *(_OWORD *)(v814 + 16) = v825;
          uint64_t v827 = (_OWORD *)((v782 + v1696 + 255) & 0xFFFFFFFFFFFFFFF8);
          uint64_t v828 = (long long *)((v783 + v1696 + 255) & 0xFFFFFFFFFFFFFFF8);
          long long v829 = *v828;
          *(_OWORD *)((char *)v827 + 9) = *(long long *)((char *)v828 + 9);
          *uint64_t v827 = v829;
          unint64_t v830 = (v782 + v1696 + 287) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v831 = (v783 + v1696 + 287) & 0xFFFFFFFFFFFFFFF8;
          long long v832 = *(_OWORD *)v831;
          *(unsigned char *)(v830 + 16) = *(unsigned char *)(v831 + 16);
          *(_OWORD *)unint64_t v830 = v832;
          size_t v833 = (void *)((v782 + v1696 + 311) & 0xFFFFFFFFFFFFFFF8);
          unint64_t v834 = (void *)((v783 + v1696 + 311) & 0xFFFFFFFFFFFFFFF8);
          void *v833 = *v834;
          *(_OWORD *)(((unint64_t)v833 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v834 + 15) & 0xFFFFFFFFFFFFFFF8);
          size_t v767 = v1657;
          size_t v758 = v1571;
          unint64_t v761 = v1669 + 2;
          BOOL v757 = v1722;
          uint64_t v755 = v1728;
          if (v1639) {
            goto LABEL_994;
          }
          goto LABEL_981;
        }
        int v756 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v1653 + 48))(v840, v1639, v1652);
      }
LABEL_979:
      if (!v756)
      {
LABEL_989:
        unint64_t v768 = ((unint64_t)v755 + v1648) & v1569;
        unint64_t v769 = (v1620 + v768) & v125;
        goto LABEL_990;
      }
LABEL_980:
      BOOL v757 = v1722;
      memcpy(v1722, v755, v1694);
      size_t v758 = v1571;
      unint64_t v760 = ((v1670 + 1) & ~v1670) + v1700;
      unint64_t v759 = v1626;
      unint64_t v761 = v1669 + 2;
      unint64_t v762 = v1610;
      unint64_t v764 = ((v1669 + 9) & 0xFFFFFFFFFFFFFFF8) + 8;
      unint64_t v763 = (v1669 & 0xFFFFFFFFFFFFFFF8) + 16;
      unint64_t v766 = v1684 + 2;
      unint64_t v765 = v1625;
LABEL_981:
      size_t v767 = v124;
LABEL_994:
      unint64_t v835 = ((((v1706
               + ((((((((((v1711 + v767) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                   + 19) & 0xFFFFFFFFFFFFFFF8)
                 + 25) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFF8)
             + 15) & 0xFFFFFFFFFFFFFFF8)
           + 16;
      *(void *)(((unint64_t)v757 + v835) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v755 + v835) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v836 = ((v759
             + ((v1681
               + ((((v1706
                   + ((((((((((v1711 + v124) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                       + 19) & 0xFFFFFFFFFFFFFFF8)
                     + 25) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFF8)
                 + 15) & 0xFFFFFFFFFFFFFFF8)
               + 16) & v1576)) & 0xFFFFFFFFFFFFFFF8)
           + 8;
      if (v836 <= v1682) {
        unint64_t v836 = v1682;
      }
      if (v765 > v836) {
        unint64_t v836 = v765;
      }
      if (v1694 > v836) {
        unint64_t v836 = v1694;
      }
      if (v758 > v836) {
        unint64_t v836 = v758;
      }
      if (v1700 > v836) {
        unint64_t v836 = v1700;
      }
      if (v766 > v836) {
        unint64_t v836 = v766;
      }
      if (v764 > v836) {
        unint64_t v836 = v764;
      }
      if (v761 > v836) {
        unint64_t v836 = v761;
      }
      if (v763 > v836) {
        unint64_t v836 = v763;
      }
      if (v836 <= v1700) {
        unint64_t v836 = v1700;
      }
      if (v836 <= v1683) {
        unint64_t v836 = v1683;
      }
      if (v836 <= v760) {
        unint64_t v836 = v760;
      }
      if (v836 <= v1700) {
        unint64_t v836 = v1700;
      }
      if (v836 <= v1611) {
        unint64_t v836 = v1611;
      }
      if (v836 <= v761) {
        unint64_t v836 = v761;
      }
      if (v836 <= v1700) {
        unint64_t v836 = v1700;
      }
      if (v836 <= v1684) {
        unint64_t v836 = v1684;
      }
      if (v836 <= v1700) {
        unint64_t v836 = v1700;
      }
      if (v836 <= v762) {
        unint64_t v836 = v762;
      }
      if (v836 <= v761) {
        unint64_t v836 = v761;
      }
      if (v836 <= v1700) {
        unint64_t v836 = v1700;
      }
      if (v836 <= 0x38) {
        unint64_t v836 = 56;
      }
      if (v836 > 3) {
        goto LABEL_1039;
      }
      unsigned int v837 = ((1 << (8 * v836)) + 5) >> (8 * v836);
      if (v837 > 0xFFD6)
      {
        *(_DWORD *)&v86[v836] = 5;
        return v86;
      }
      if (v837 <= 0xD6) {
LABEL_1039:
      }
        v86[v836] = 5;
      else {
        *(_WORD *)&v86[v836] = 5;
      }
      return v86;
    case 6u:
      uint64_t v1698 = ~v1672;
      uint64_t v1691 = ~v1712;
      uint64_t v1708 = ~v40;
      uint64_t v127 = v1621;
      uint64_t v1577 = ~v34;
      size_t v1585 = ((((v1632 + ((v34 + 8 + (v1666 & 0xFFFFFFFFFFFFFFF8)) & ~v34)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
            + 16;
      size_t v1572 = v38;
      uint64_t v1662 = ~v35;
      if (v1621 == v1629)
      {
        size_t v128 = v38;
        int v129 = (*(uint64_t (**)(unsigned __int8 *, void, uint64_t, unint64_t))(v1705 + 48))(a2, v1621, v1660, v69);
        size_t v38 = v128;
        uint64_t v130 = ~v1712;
        uint64_t v86 = a1;
        unsigned int v131 = v1634;
LABEL_1050:
        if (v129)
        {
LABEL_1051:
          unsigned int v842 = v131;
          memcpy(v86, a2, v38);
          unsigned int v843 = v842;
          size_t v844 = __n;
          unint64_t v845 = v1617;
LABEL_1052:
          size_t v846 = v844;
          goto LABEL_1058;
        }
        unint64_t v408 = (unint64_t)&a2[v1647] & v130;
        unint64_t v409 = (v408 + v1687 + v35) & v1662;
LABEL_1054:
        uint64_t v847 = v130;
        unint64_t v848 = *(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v1705 + 32);
        uint64_t v849 = v80;
        v848(v86, a2, v1660);
        unint64_t v850 = (unint64_t)&v86[v1647] & v847;
        v848((unsigned char *)v850, (unsigned __int8 *)v408, v1660);
        unint64_t v851 = (v850 + v1687 + v35) & v1662;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v1643 + 32))(v851, v409, v1642);
        unint64_t v852 = (void *)((v1666 + v851) & 0xFFFFFFFFFFFFFFF8);
        unint64_t v853 = (void *)((v1666 + v409) & 0xFFFFFFFFFFFFFFF8);
        *unint64_t v852 = *v853;
        unint64_t v854 = ((unint64_t)v852 + v1644) & v1577;
        unint64_t v855 = ((unint64_t)v853 + v1644) & v1577;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v1645 + 32))(v854, v855, v1638);
        unint64_t v856 = (void *)((v1632 + v854) & 0xFFFFFFFFFFFFFFF8);
        unint64_t v857 = (void *)((v1632 + v855) & 0xFFFFFFFFFFFFFFF8);
        *unint64_t v856 = *v857;
        *(_OWORD *)(((unint64_t)v856 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v857 + 15) & 0xFFFFFFFFFFFFFFF8);
        *(_OWORD *)(v1585 + v851) = *(_OWORD *)(v1585 + v409);
        size_t v858 = (v1699 + v1585 + v851) & v849;
        uint64_t v1714 = v849;
        size_t v859 = (v1699 + v1585 + v409) & v849;
        *(unsigned char *)size_t v858 = *(unsigned char *)v859;
        uint64_t v860 = v858 | 4;
        int v861 = *(_DWORD *)(v859 | 4);
        *(unsigned char *)(v860 + 4) = *(unsigned char *)((v859 | 4) + 4);
        *(_DWORD *)uint64_t v860 = v861;
        *(_WORD *)(v858 + 10) = *(_WORD *)(v859 + 0xA);
        unint64_t v862 = *(void (**)(size_t, size_t, uint64_t))(v1653 + 32);
        v862((v1655 + v858) & v1708, (v1655 + v859) & v1708, v1652);
        size_t v863 = (v1651 + ((v1655 + v858) & v1708)) & v1708;
        size_t v864 = (v1651 + ((v1655 + v859) & v1708)) & v1708;
        v862(v863, v864, v1652);
        unint64_t v865 = (unsigned char *)(v863 + v1657);
        unsigned char *v865 = *(unsigned char *)(v864 + v1657);
        v865[1] = *(unsigned char *)(v864 + v1657 + 1);
        v865[2] = *(unsigned char *)(v864 + v1657 + 2);
        v865[3] = *(unsigned char *)(v864 + v1657 + 3);
        v865[4] = *(unsigned char *)(v864 + v1657 + 4);
        unint64_t v866 = (v863 + v1657 + 12) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v867 = (v864 + v1657 + 12) & 0xFFFFFFFFFFFFFFF8;
        *(_OWORD *)unint64_t v866 = *(_OWORD *)v867;
        *(unsigned char *)(v866 + 16) = *(unsigned char *)(v867 + 16);
        *(unsigned char *)(v866 + 17) = *(unsigned char *)(v867 + 17);
        *(unsigned char *)(v866 + 18) = *(unsigned char *)(v867 + 18);
        *(unsigned char *)(v866 + 19) = *(unsigned char *)(v867 + 19);
        unint64_t v868 = (v866 + 27) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v869 = (v867 + 27) & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v868 = *(void *)v869;
        *(unsigned char *)(v868 + 8) = *(unsigned char *)(v869 + 8);
        *(unsigned char *)(v868 + 9) = *(unsigned char *)(v869 + 9);
        *(unsigned char *)(v868 + 10) = *(unsigned char *)(v869 + 10);
        *(unsigned char *)(v868 + 11) = *(unsigned char *)(v869 + 11);
        *(unsigned char *)(v868 + 12) = *(unsigned char *)(v869 + 12);
        unint64_t v870 = (void *)((v867 + 47) & 0xFFFFFFFFFFFFFFF8);
        uint64_t v871 = (void *)((v866 + 47) & 0xFFFFFFFFFFFFFFF8);
        *uint64_t v871 = *v870;
        unint64_t v872 = ((unint64_t)v871 + 15) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v873 = ((unint64_t)v870 + 15) & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v872 = *(void *)v873;
        *(unsigned char *)(v872 + 8) = *(unsigned char *)(v873 + 8);
        *(unsigned char *)(v872 + 9) = *(unsigned char *)(v873 + 9);
        uint64_t v874 = (void *)((v1649 + v872) & v1708);
        v875 = (const void *)((v1649 + v873) & v1708);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1653 + 48))(v875, 1, v1652))
        {
          size_t v844 = __n;
          memcpy(v874, v875, __n);
        }
        else
        {
          v862((size_t)v874, (size_t)v875, v1652);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v1653 + 56))(v874, 0, 1, v1652);
          size_t v844 = __n;
        }
        unsigned int v843 = v1634;
        uint64_t v127 = v1621;
        unint64_t v876 = (void *)(((unint64_t)v875 + v1650) & 0xFFFFFFFFFFFFFFF8);
        unint64_t v877 = (void *)(((unint64_t)v874 + v1650) & 0xFFFFFFFFFFFFFFF8);
        *unint64_t v877 = *v876;
        unint64_t v878 = ((unint64_t)v877 + 15) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v879 = ((unint64_t)v876 + 15) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v880 = *(void *)v879;
        *(unsigned char *)(v878 + 8) = *(unsigned char *)(v879 + 8);
        *(void *)unint64_t v878 = v880;
        uint64_t v881 = (void *)(((unint64_t)v877 + 31) & 0xFFFFFFFFFFFFFFF8);
        unint64_t v882 = (void *)(((unint64_t)v876 + 31) & 0xFFFFFFFFFFFFFFF8);
        *uint64_t v881 = *v882;
        unint64_t v883 = (_OWORD *)(((unint64_t)v881 + 15) & 0xFFFFFFFFFFFFFFF8);
        uint64_t v884 = (_OWORD *)(((unint64_t)v882 + 15) & 0xFFFFFFFFFFFFFFF8);
        _OWORD *v883 = *v884;
        unint64_t v885 = ((unint64_t)v883 + 19) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v886 = ((unint64_t)v884 + 19) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v887 = *(void *)v886;
        *(unsigned char *)(v885 + 8) = *(unsigned char *)(v886 + 8);
        *(void *)unint64_t v885 = v887;
        *(unsigned char *)(v885 + 9) = *(unsigned char *)(v886 + 9);
        unint64_t v888 = (v885 + 13) & 0xFFFFFFFFFFFFFFFCLL;
        unint64_t v889 = (v886 + 13) & 0xFFFFFFFFFFFFFFFCLL;
        LODWORD(v880) = *(_DWORD *)v889;
        *(unsigned char *)(v888 + 4) = *(unsigned char *)(v889 + 4);
        *(_DWORD *)unint64_t v888 = v880;
        *(_OWORD *)((v885 + 25) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v886 + 25) & 0xFFFFFFFFFFFFFFF8);
        size_t v890 = v858 + v1696;
        long long v891 = *(_OWORD *)(v859 + v1696 + 112);
        long long v893 = *(_OWORD *)(v859 + v1696 + 64);
        long long v892 = *(_OWORD *)(v859 + v1696 + 80);
        *(_OWORD *)(v890 + 96) = *(_OWORD *)(v859 + v1696 + 96);
        *(_OWORD *)(v890 + 112) = v891;
        *(_OWORD *)(v890 + 64) = v893;
        *(_OWORD *)(v890 + 80) = v892;
        long long v894 = *(_OWORD *)(v859 + v1696 + 176);
        long long v896 = *(_OWORD *)(v859 + v1696 + 128);
        long long v895 = *(_OWORD *)(v859 + v1696 + 144);
        *(_OWORD *)(v890 + 160) = *(_OWORD *)(v859 + v1696 + 160);
        *(_OWORD *)(v890 + 176) = v894;
        *(_OWORD *)(v890 + 128) = v896;
        *(_OWORD *)(v890 + 144) = v895;
        long long v898 = *(_OWORD *)(v859 + v1696 + 208);
        long long v897 = *(_OWORD *)(v859 + v1696 + 224);
        long long v899 = *(_OWORD *)(v859 + v1696 + 192);
        *(void *)(v890 + 240) = *(void *)(v859 + v1696 + 240);
        *(_OWORD *)(v890 + 208) = v898;
        *(_OWORD *)(v890 + 224) = v897;
        *(_OWORD *)(v890 + 192) = v899;
        long long v900 = *(_OWORD *)(v859 + v1696);
        long long v901 = *(_OWORD *)(v859 + v1696 + 16);
        long long v902 = *(_OWORD *)(v859 + v1696 + 48);
        *(_OWORD *)(v890 + 32) = *(_OWORD *)(v859 + v1696 + 32);
        *(_OWORD *)(v890 + 48) = v902;
        *(_OWORD *)size_t v890 = v900;
        *(_OWORD *)(v890 + 16) = v901;
        long long v903 = (_OWORD *)((v858 + v1696 + 255) & 0xFFFFFFFFFFFFFFF8);
        long long v904 = (long long *)((v859 + v1696 + 255) & 0xFFFFFFFFFFFFFFF8);
        long long v905 = *v904;
        *(_OWORD *)((char *)v903 + 9) = *(long long *)((char *)v904 + 9);
        *long long v903 = v905;
        unint64_t v906 = (v858 + v1696 + 287) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v907 = (v859 + v1696 + 287) & 0xFFFFFFFFFFFFFFF8;
        long long v908 = *(_OWORD *)v907;
        *(unsigned char *)(v906 + 16) = *(unsigned char *)(v907 + 16);
        *(_OWORD *)unint64_t v906 = v908;
        id v909 = (void *)((v858 + v1696 + 311) & 0xFFFFFFFFFFFFFFF8);
        v910 = (void *)((v859 + v1696 + 311) & 0xFFFFFFFFFFFFFFF8);
        *id v909 = *v910;
        *(_OWORD *)(((unint64_t)v909 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v910 + 15) & 0xFFFFFFFFFFFFFFF8);
        size_t v846 = v1657;
        uint64_t v80 = v1714;
        unint64_t v845 = v1617;
        uint64_t v130 = v1691;
        if (!v1639) {
          goto LABEL_1052;
        }
LABEL_1058:
        unint64_t v911 = v1633 + 7;
        unint64_t v912 = ((((v845
                 + 327
                 + ((((((((((v1633 + 7 + v846) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                     + 19) & 0xFFFFFFFFFFFFFFF8)
                   + 25) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFF8)
               + 15) & 0xFFFFFFFFFFFFFFF8)
             + 16;
        uint64_t v1723 = (void *)((unint64_t)&v86[v1672 + v912] & v1698);
        unint64_t v913 = (const void *)((unint64_t)&a2[v1672 + v912] & v1698);
        unint64_t v1715 = v845 + 327;
        if (v127 == v1629)
        {
          int v914 = (*(uint64_t (**)(const void *, uint64_t, uint64_t))(v1705 + 48))(v913, v127, v1660);
          uint64_t v915 = v1708;
        }
        else
        {
          unint64_t v916 = ((unint64_t)v913 + v1647) & v130;
          unint64_t v917 = (v1619 + v916) & v1662;
          uint64_t v915 = v1708;
          if (v843 != v1629)
          {
            size_t v918 = v917 + v1585;
            size_t v919 = v1572;
            if ((v1606 & 0x80000000) != 0)
            {
              uint64_t v923 = (v1655 + ((v1699 + v918) & v80)) & v1708;
              if (v1639 <= 0x7FFFFFFD)
              {
                unint64_t v1056 = *(void *)(((v1603 + ((v1651 + v923) & v1708)) & 0xFFFFFFFFFFFFFFF8) + 8);
                if (v1056 >= 0xFFFFFFFF) {
                  LODWORD(v1056) = -1;
                }
                if ((v1056 + 1) >= 2) {
                  goto LABEL_1078;
                }
                goto LABEL_1081;
              }
              int v914 = (*(uint64_t (**)(uint64_t))(v1653 + 48))(v923);
              size_t v919 = v1572;
            }
            else
            {
              unint64_t v920 = *(void *)(v918 + 8);
              if (v920 >= 0xFFFFFFFF) {
                LODWORD(v920) = -1;
              }
              int v914 = v920 + 1;
            }
            goto LABEL_1077;
          }
          if (v1624 == v843)
          {
            int v914 = (*(uint64_t (**)(unint64_t))(v1643 + 48))((v1619 + v916) & v1662);
          }
          else
          {
            unint64_t v921 = (unint64_t *)((v1666 + v917) & 0xFFFFFFFFFFFFFFF8);
            if (v1618 <= 0x7FFFFFFE)
            {
              unint64_t v922 = *v921;
              if (v922 >= 0xFFFFFFFF) {
                LODWORD(v922) = -1;
              }
              size_t v919 = v1572;
              if ((v922 + 1) >= 2) {
                goto LABEL_1078;
              }
              goto LABEL_1081;
            }
            int v914 = (*(uint64_t (**)(unint64_t))(v1645 + 48))(((unint64_t)v921 + v1644) & v1577);
          }
        }
        size_t v919 = v1572;
LABEL_1077:
        if (v914)
        {
LABEL_1078:
          long long v924 = v1723;
          size_t v925 = v919;
          memcpy(v1723, v913, v919);
          size_t v926 = v925;
          unint64_t v928 = ((v1670 + 1) & ~v1670) + v1700;
          unint64_t v927 = v1626;
          unint64_t v929 = v1669 + 2;
          unint64_t v930 = v1610;
          unint64_t v932 = ((v1669 + 9) & 0xFFFFFFFFFFFFFFF8) + 8;
          unint64_t v931 = (v1669 & 0xFFFFFFFFFFFFFFF8) + 16;
          unint64_t v934 = v1684 + 2;
          unint64_t v933 = v1625;
LABEL_1079:
          size_t v935 = v844;
LABEL_1085:
          unint64_t v999 = ((((v1715
                   + ((((((((((v911 + v935) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                       + 19) & 0xFFFFFFFFFFFFFFF8)
                     + 25) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFF8)
                 + 15) & 0xFFFFFFFFFFFFFFF8)
               + 16;
          *(void *)(((unint64_t)v924 + v999) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v913
                                                                                           + v999) & 0xFFFFFFFFFFFFFFF8);
          unint64_t v1000 = ((v927
                  + ((v1681
                    + ((((v1628
                        + ((((((((((v911 + v844) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                            + 19) & 0xFFFFFFFFFFFFFFF8)
                          + 25) & 0xFFFFFFFFFFFFFFF8)
                        + 327) & 0xFFFFFFFFFFFFFFF8)
                      + 15) & 0xFFFFFFFFFFFFFFF8)
                    + 16) & ~v1681)) & 0xFFFFFFFFFFFFFFF8)
                + 8;
          if (v1000 <= v1682) {
            unint64_t v1000 = v1682;
          }
          if (v933 > v1000) {
            unint64_t v1000 = v933;
          }
          if (v1694 > v1000) {
            unint64_t v1000 = v1694;
          }
          if (v926 > v1000) {
            unint64_t v1000 = v926;
          }
          if (v1700 > v1000) {
            unint64_t v1000 = v1700;
          }
          if (v934 > v1000) {
            unint64_t v1000 = v934;
          }
          if (v932 > v1000) {
            unint64_t v1000 = v932;
          }
          if (v929 > v1000) {
            unint64_t v1000 = v929;
          }
          if (v931 > v1000) {
            unint64_t v1000 = v931;
          }
          if (v1000 <= v1700) {
            unint64_t v1000 = v1700;
          }
          if (v1000 <= v1683) {
            unint64_t v1000 = v1683;
          }
          if (v1000 <= v928) {
            unint64_t v1000 = v928;
          }
          if (v1000 <= v1700) {
            unint64_t v1000 = v1700;
          }
          if (v1000 <= v1611) {
            unint64_t v1000 = v1611;
          }
          if (v1000 <= v929) {
            unint64_t v1000 = v929;
          }
          if (v1000 <= v1700) {
            unint64_t v1000 = v1700;
          }
          if (v1000 <= v1684) {
            unint64_t v1000 = v1684;
          }
          if (v1000 <= v1700) {
            unint64_t v1000 = v1700;
          }
          if (v1000 <= v930) {
            unint64_t v1000 = v930;
          }
          if (v1000 <= v929) {
            unint64_t v1000 = v929;
          }
          if (v1000 <= v1700) {
            unint64_t v1000 = v1700;
          }
          if (v1000 <= 0x38) {
            unint64_t v1000 = 56;
          }
          if (v1000 > 3) {
            goto LABEL_1130;
          }
          unsigned int v1001 = ((1 << (8 * v1000)) + 5) >> (8 * v1000);
          if (v1001 > 0xFFD6)
          {
            *(_DWORD *)&v86[v1000] = 6;
            return v86;
          }
          if (v1001 <= 0xD6) {
LABEL_1130:
          }
            v86[v1000] = 6;
          else {
            *(_WORD *)&v86[v1000] = 6;
          }
          return v86;
        }
        unint64_t v916 = ((unint64_t)v913 + v1647) & v130;
        unint64_t v917 = (v1619 + v916) & v1662;
LABEL_1081:
        uint64_t v936 = v915;
        uint64_t v937 = *(void (**)(void *, const void *, uint64_t))(v1705 + 32);
        v937(v1723, v913, v1660);
        unint64_t v938 = ((unint64_t)v1723 + v1647) & v130;
        v937((void *)v938, (const void *)v916, v1660);
        unint64_t v939 = (v1619 + v938) & v1662;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v1643 + 32))(v939, v917, v1642);
        unint64_t v940 = (void *)((v1666 + v939) & 0xFFFFFFFFFFFFFFF8);
        uint64_t v941 = (void *)((v1666 + v917) & 0xFFFFFFFFFFFFFFF8);
        *unint64_t v940 = *v941;
        unint64_t v942 = ((unint64_t)v940 + v1644) & v1577;
        unint64_t v943 = ((unint64_t)v941 + v1644) & v1577;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v1645 + 32))(v942, v943, v1638);
        v944 = (void *)((v1632 + v942) & 0xFFFFFFFFFFFFFFF8);
        int v945 = (void *)((v1632 + v943) & 0xFFFFFFFFFFFFFFF8);
        void *v944 = *v945;
        *(_OWORD *)(((unint64_t)v944 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v945 + 15) & 0xFFFFFFFFFFFFFFF8);
        *(_OWORD *)(v939 + v1585) = *(_OWORD *)(v917 + v1585);
        size_t v946 = (v1699 + v939 + v1585) & v80;
        size_t v947 = (v1699 + v917 + v1585) & v80;
        *(unsigned char *)size_t v946 = *(unsigned char *)v947;
        uint64_t v948 = v946 | 4;
        int v949 = *(_DWORD *)(v947 | 4);
        *(unsigned char *)(v948 + 4) = *(unsigned char *)((v947 | 4) + 4);
        *(_DWORD *)uint64_t v948 = v949;
        *(_WORD *)(v946 + 10) = *(_WORD *)(v947 + 0xA);
        int v950 = *(void (**)(size_t, size_t, uint64_t))(v1653 + 32);
        v950((v1655 + v946) & v936, (v1655 + v947) & v936, v1652);
        size_t v951 = (v1651 + ((v1655 + v946) & v936)) & v936;
        size_t v952 = (v1651 + ((v1655 + v947) & v936)) & v936;
        v950(v951, v952, v1652);
        v953 = (unsigned char *)(v951 + v1657);
        unsigned char *v953 = *(unsigned char *)(v952 + v1657);
        v953[1] = *(unsigned char *)(v952 + v1657 + 1);
        v953[2] = *(unsigned char *)(v952 + v1657 + 2);
        v953[3] = *(unsigned char *)(v952 + v1657 + 3);
        v953[4] = *(unsigned char *)(v952 + v1657 + 4);
        unint64_t v954 = (v951 + v1657 + 12) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v955 = (v952 + v1657 + 12) & 0xFFFFFFFFFFFFFFF8;
        *(_OWORD *)unint64_t v954 = *(_OWORD *)v955;
        *(unsigned char *)(v954 + 16) = *(unsigned char *)(v955 + 16);
        *(unsigned char *)(v954 + 17) = *(unsigned char *)(v955 + 17);
        *(unsigned char *)(v954 + 18) = *(unsigned char *)(v955 + 18);
        *(unsigned char *)(v954 + 19) = *(unsigned char *)(v955 + 19);
        unint64_t v956 = (v954 + 27) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v957 = (v955 + 27) & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v956 = *(void *)v957;
        *(unsigned char *)(v956 + 8) = *(unsigned char *)(v957 + 8);
        *(unsigned char *)(v956 + 9) = *(unsigned char *)(v957 + 9);
        *(unsigned char *)(v956 + 10) = *(unsigned char *)(v957 + 10);
        *(unsigned char *)(v956 + 11) = *(unsigned char *)(v957 + 11);
        *(unsigned char *)(v956 + 12) = *(unsigned char *)(v957 + 12);
        unint64_t v958 = (void *)((v955 + 47) & 0xFFFFFFFFFFFFFFF8);
        unint64_t v959 = (void *)((v954 + 47) & 0xFFFFFFFFFFFFFFF8);
        *unint64_t v959 = *v958;
        unint64_t v960 = ((unint64_t)v959 + 15) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v961 = ((unint64_t)v958 + 15) & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v960 = *(void *)v961;
        *(unsigned char *)(v960 + 8) = *(unsigned char *)(v961 + 8);
        *(unsigned char *)(v960 + 9) = *(unsigned char *)(v961 + 9);
        unint64_t v962 = (void *)((v1649 + v960) & v936);
        unint64_t v963 = (const void *)((v1649 + v961) & v936);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1653 + 48))(v963, 1, v1652))
        {
          size_t v844 = __n;
          memcpy(v962, v963, __n);
          uint64_t v86 = a1;
        }
        else
        {
          v950((size_t)v962, (size_t)v963, v1652);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v1653 + 56))(v962, 0, 1, v1652);
          uint64_t v86 = a1;
          size_t v844 = __n;
        }
        unint64_t v928 = ((v1670 + 1) & ~v1670) + v1700;
        unint64_t v927 = v1626;
        unint64_t v930 = v1610;
        unint64_t v932 = ((v1669 + 9) & 0xFFFFFFFFFFFFFFF8) + 8;
        unint64_t v931 = (v1669 & 0xFFFFFFFFFFFFFFF8) + 16;
        unint64_t v934 = v1684 + 2;
        unint64_t v933 = v1625;
        unint64_t v911 = v1633 + 7;
        unint64_t v964 = (void *)(((unint64_t)v962 + v1650) & 0xFFFFFFFFFFFFFFF8);
        unint64_t v965 = (void *)(((unint64_t)v963 + v1650) & 0xFFFFFFFFFFFFFFF8);
        void *v964 = *v965;
        unint64_t v966 = ((unint64_t)v964 + 15) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v967 = ((unint64_t)v965 + 15) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v968 = *(void *)v967;
        *(unsigned char *)(v966 + 8) = *(unsigned char *)(v967 + 8);
        *(void *)unint64_t v966 = v968;
        v969 = (void *)(((unint64_t)v964 + 31) & 0xFFFFFFFFFFFFFFF8);
        unint64_t v970 = (void *)(((unint64_t)v965 + 31) & 0xFFFFFFFFFFFFFFF8);
        void *v969 = *v970;
        unint64_t v971 = (_OWORD *)(((unint64_t)v969 + 15) & 0xFFFFFFFFFFFFFFF8);
        uint64_t v972 = (_OWORD *)(((unint64_t)v970 + 15) & 0xFFFFFFFFFFFFFFF8);
        _OWORD *v971 = *v972;
        unint64_t v973 = ((unint64_t)v971 + 19) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v974 = ((unint64_t)v972 + 19) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v975 = *(void *)v974;
        *(unsigned char *)(v973 + 8) = *(unsigned char *)(v974 + 8);
        *(void *)unint64_t v973 = v975;
        *(unsigned char *)(v973 + 9) = *(unsigned char *)(v974 + 9);
        unint64_t v976 = (v973 + 13) & 0xFFFFFFFFFFFFFFFCLL;
        unint64_t v977 = (v974 + 13) & 0xFFFFFFFFFFFFFFFCLL;
        LODWORD(v968) = *(_DWORD *)v977;
        *(unsigned char *)(v976 + 4) = *(unsigned char *)(v977 + 4);
        *(_DWORD *)unint64_t v976 = v968;
        *(_OWORD *)((v973 + 25) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v974 + 25) & 0xFFFFFFFFFFFFFFF8);
        size_t v978 = v946 + v1696;
        long long v979 = *(_OWORD *)(v947 + v1696 + 112);
        long long v981 = *(_OWORD *)(v947 + v1696 + 64);
        long long v980 = *(_OWORD *)(v947 + v1696 + 80);
        *(_OWORD *)(v978 + 96) = *(_OWORD *)(v947 + v1696 + 96);
        *(_OWORD *)(v978 + 112) = v979;
        *(_OWORD *)(v978 + 64) = v981;
        *(_OWORD *)(v978 + 80) = v980;
        long long v982 = *(_OWORD *)(v947 + v1696 + 176);
        long long v984 = *(_OWORD *)(v947 + v1696 + 128);
        long long v983 = *(_OWORD *)(v947 + v1696 + 144);
        *(_OWORD *)(v978 + 160) = *(_OWORD *)(v947 + v1696 + 160);
        *(_OWORD *)(v978 + 176) = v982;
        *(_OWORD *)(v978 + 128) = v984;
        *(_OWORD *)(v978 + 144) = v983;
        long long v986 = *(_OWORD *)(v947 + v1696 + 208);
        long long v985 = *(_OWORD *)(v947 + v1696 + 224);
        long long v987 = *(_OWORD *)(v947 + v1696 + 192);
        *(void *)(v978 + 240) = *(void *)(v947 + v1696 + 240);
        *(_OWORD *)(v978 + 208) = v986;
        *(_OWORD *)(v978 + 224) = v985;
        *(_OWORD *)(v978 + 192) = v987;
        long long v988 = *(_OWORD *)(v947 + v1696);
        long long v989 = *(_OWORD *)(v947 + v1696 + 16);
        long long v990 = *(_OWORD *)(v947 + v1696 + 48);
        *(_OWORD *)(v978 + 32) = *(_OWORD *)(v947 + v1696 + 32);
        *(_OWORD *)(v978 + 48) = v990;
        *(_OWORD *)size_t v978 = v988;
        *(_OWORD *)(v978 + 16) = v989;
        long long v991 = (_OWORD *)((v946 + v1696 + 255) & 0xFFFFFFFFFFFFFFF8);
        long long v992 = (long long *)((v947 + v1696 + 255) & 0xFFFFFFFFFFFFFFF8);
        long long v993 = *v992;
        *(_OWORD *)((char *)v991 + 9) = *(long long *)((char *)v992 + 9);
        _OWORD *v991 = v993;
        unint64_t v994 = (v946 + v1696 + 287) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v995 = (v947 + v1696 + 287) & 0xFFFFFFFFFFFFFFF8;
        long long v996 = *(_OWORD *)v995;
        *(unsigned char *)(v994 + 16) = *(unsigned char *)(v995 + 16);
        *(_OWORD *)unint64_t v994 = v996;
        long long v997 = (void *)((v946 + v1696 + 311) & 0xFFFFFFFFFFFFFFF8);
        long long v998 = (void *)((v947 + v1696 + 311) & 0xFFFFFFFFFFFFFFF8);
        *long long v997 = *v998;
        *(_OWORD *)(((unint64_t)v997 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v998 + 15) & 0xFFFFFFFFFFFFFFF8);
        size_t v935 = v1657;
        size_t v926 = v1572;
        unint64_t v929 = v1669 + 2;
        long long v924 = v1723;
        if (v1639) {
          goto LABEL_1085;
        }
        goto LABEL_1079;
      }
      uint64_t v130 = ~v1712;
      unint64_t v408 = (unint64_t)&a2[v1647] & v1691;
      unint64_t v409 = (v408 + v1687 + v35) & v83;
      unsigned int v131 = v1634;
      if (v1634 == v1629)
      {
        if (v1624 == v1634)
        {
          size_t v410 = v38;
          int v129 = (*(uint64_t (**)(unint64_t))(v1643 + 48))((v408 + v1687 + v35) & v83);
          unsigned int v131 = v1634;
          size_t v38 = v410;
          uint64_t v86 = a1;
          goto LABEL_1050;
        }
        uint64_t v558 = (unint64_t *)((v1666 + v409) & 0xFFFFFFFFFFFFFFF8);
        uint64_t v86 = a1;
        if (v1618 <= 0x7FFFFFFE)
        {
          unint64_t v559 = *v558;
          goto LABEL_1181;
        }
        unint64_t v687 = ((unint64_t)v558 + v1644) & v85;
        uint64_t v688 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t, unint64_t))(v1645 + 48);
        uint64_t v689 = v1605;
        uint64_t v690 = v1638;
      }
      else
      {
        unint64_t v502 = v36 + v409;
        if ((v1606 & 0x80000000) == 0)
        {
          unint64_t v503 = *(void *)(v502 + 8);
          if (v503 >= 0xFFFFFFFF) {
            LODWORD(v503) = -1;
          }
          int v129 = v503 + 1;
          uint64_t v86 = a1;
          goto LABEL_1050;
        }
        unint64_t v687 = (v1655 + ((v1699 + v502) & v80)) & v1708;
        uint64_t v86 = a1;
        if (v1639 <= 0x7FFFFFFD)
        {
          unint64_t v559 = *(void *)(((v1603 + ((v1651 + v687) & v1708)) & 0xFFFFFFFFFFFFFFF8) + 8);
LABEL_1181:
          if (v559 >= 0xFFFFFFFF) {
            LODWORD(v559) = -1;
          }
          if ((v559 + 1) >= 2) {
            goto LABEL_1051;
          }
          goto LABEL_1054;
        }
        uint64_t v688 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t, unint64_t))(v1653 + 48);
        uint64_t v689 = v1639;
        uint64_t v690 = v1652;
      }
      size_t v841 = v38;
      int v129 = v688(v687, v689, v690, v69);
      unsigned int v131 = v1634;
      size_t v38 = v841;
      goto LABEL_1050;
    case 7u:
      uint64_t v132 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1658 + 32);
      uint64_t v133 = ~v40;
      ((void (*)(_OWORD *, unsigned __int8 *, uint64_t, unint64_t))v132)(a1, a2, AssociatedTypeWitness, v69);
      unint64_t v134 = ((unint64_t)a1 + v1648) & v70;
      unint64_t v135 = (unint64_t)&a2[v1648] & v70;
      v132(v134, v135, AssociatedTypeWitness);
      unint64_t v136 = (v134 + v10 + v1679) & v79;
      unint64_t v137 = (v135 + v10 + v1679) & v79;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v1641 + 32))(v136, v137, v1640);
      unint64_t v138 = (void *)((v1646 + v136) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v139 = (void *)((v1646 + v137) & 0xFFFFFFFFFFFFFFF8);
      *unint64_t v138 = *v139;
      unint64_t v140 = ((unint64_t)v138 + v1635) & v67;
      unint64_t v141 = ((unint64_t)v139 + v1635) & v67;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v1637 + 32))(v140, v141, v1636);
      unint64_t v142 = (void *)((v1631 + v140) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v143 = (void *)((v1631 + v141) & 0xFFFFFFFFFFFFFFF8);
      *unint64_t v142 = *v143;
      *(_OWORD *)(((unint64_t)v142 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v143 + 15) & 0xFFFFFFFFFFFFFFF8);
      *(_OWORD *)(v1697 + v136) = *(_OWORD *)(v1697 + v137);
      size_t v144 = (v1699 + v1697 + v136) & ~v1707;
      size_t v145 = (v1699 + v1697 + v137) & ~v1707;
      *(unsigned char *)size_t v144 = *(unsigned char *)v145;
      uint64_t v146 = v144 | 4;
      int v147 = *(_DWORD *)(v145 | 4);
      *(unsigned char *)(v146 + 4) = *(unsigned char *)((v145 | 4) + 4);
      *(_DWORD *)uint64_t v146 = v147;
      *(_WORD *)(v144 + 10) = *(_WORD *)(v145 + 0xA);
      uint64_t v148 = v133;
      uint64_t v149 = *(void (**)(size_t, size_t, uint64_t))(v1653 + 32);
      v149((v1655 + v144) & v133, (v1655 + v145) & v133, v1652);
      size_t v150 = (v1651 + ((v1655 + v144) & v133)) & v133;
      size_t v151 = (v1651 + ((v1655 + v145) & v133)) & v133;
      v149(v150, v151, v1652);
      uint64_t v152 = (unsigned char *)(v150 + v1657);
      unsigned char *v152 = *(unsigned char *)(v151 + v1657);
      v152[1] = *(unsigned char *)(v151 + v1657 + 1);
      v152[2] = *(unsigned char *)(v151 + v1657 + 2);
      v152[3] = *(unsigned char *)(v151 + v1657 + 3);
      v152[4] = *(unsigned char *)(v151 + v1657 + 4);
      unint64_t v153 = (v150 + v1657 + 12) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v154 = (v151 + v1657 + 12) & 0xFFFFFFFFFFFFFFF8;
      *(_OWORD *)unint64_t v153 = *(_OWORD *)v154;
      *(unsigned char *)(v153 + 16) = *(unsigned char *)(v154 + 16);
      *(unsigned char *)(v153 + 17) = *(unsigned char *)(v154 + 17);
      *(unsigned char *)(v153 + 18) = *(unsigned char *)(v154 + 18);
      *(unsigned char *)(v153 + 19) = *(unsigned char *)(v154 + 19);
      unint64_t v155 = (v153 + 27) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v156 = (v154 + 27) & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v155 = *(void *)v156;
      *(unsigned char *)(v155 + 8) = *(unsigned char *)(v156 + 8);
      *(unsigned char *)(v155 + 9) = *(unsigned char *)(v156 + 9);
      *(unsigned char *)(v155 + 10) = *(unsigned char *)(v156 + 10);
      *(unsigned char *)(v155 + 11) = *(unsigned char *)(v156 + 11);
      *(unsigned char *)(v155 + 12) = *(unsigned char *)(v156 + 12);
      size_t v157 = (void *)((v154 + 47) & 0xFFFFFFFFFFFFFFF8);
      size_t v158 = (void *)((v153 + 47) & 0xFFFFFFFFFFFFFFF8);
      void *v158 = *v157;
      unint64_t v159 = ((unint64_t)v158 + 15) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v160 = ((unint64_t)v157 + 15) & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v159 = *(void *)v160;
      *(unsigned char *)(v159 + 8) = *(unsigned char *)(v160 + 8);
      *(unsigned char *)(v159 + 9) = *(unsigned char *)(v160 + 9);
      unint64_t v161 = (void *)((v1649 + v159) & v148);
      unint64_t v162 = (const void *)((v1649 + v160) & v148);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1653 + 48))(v162, 1, v1652))
      {
        memcpy(v161, v162, __n);
      }
      else
      {
        v149((size_t)v161, (size_t)v162, v1652);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v1653 + 56))(v161, 0, 1, v1652);
      }
      unint64_t v428 = (void *)(((unint64_t)v162 + v1650) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v429 = (void *)(((unint64_t)v161 + v1650) & 0xFFFFFFFFFFFFFFF8);
      *uint64_t v429 = *v428;
      unint64_t v430 = ((unint64_t)v429 + 15) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v431 = ((unint64_t)v428 + 15) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v432 = *(void *)v431;
      *(unsigned char *)(v430 + 8) = *(unsigned char *)(v431 + 8);
      *(void *)unint64_t v430 = v432;
      uint64_t v433 = (void *)(((unint64_t)v429 + 31) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v434 = (void *)(((unint64_t)v428 + 31) & 0xFFFFFFFFFFFFFFF8);
      *uint64_t v433 = *v434;
      uint64_t v435 = (_OWORD *)(((unint64_t)v433 + 15) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v436 = (_OWORD *)(((unint64_t)v434 + 15) & 0xFFFFFFFFFFFFFFF8);
      _OWORD *v435 = *v436;
      unint64_t v437 = ((unint64_t)v435 + 19) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v438 = ((unint64_t)v436 + 19) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v439 = *(void *)v438;
      *(unsigned char *)(v437 + 8) = *(unsigned char *)(v438 + 8);
      *(void *)unint64_t v437 = v439;
      *(unsigned char *)(v437 + 9) = *(unsigned char *)(v438 + 9);
      unint64_t v440 = (v437 + 13) & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v441 = (v438 + 13) & 0xFFFFFFFFFFFFFFFCLL;
      LODWORD(v432) = *(_DWORD *)v441;
      *(unsigned char *)(v440 + 4) = *(unsigned char *)(v441 + 4);
      *(_DWORD *)unint64_t v440 = v432;
      *(_OWORD *)((v437 + 25) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v438 + 25) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v442 = v1696 + v144;
      long long v443 = *(_OWORD *)(v1696 + v145 + 112);
      long long v445 = *(_OWORD *)(v1696 + v145 + 64);
      long long v444 = *(_OWORD *)(v1696 + v145 + 80);
      *(_OWORD *)(v442 + 96) = *(_OWORD *)(v1696 + v145 + 96);
      *(_OWORD *)(v442 + 112) = v443;
      *(_OWORD *)(v442 + 64) = v445;
      *(_OWORD *)(v442 + 80) = v444;
      long long v446 = *(_OWORD *)(v1696 + v145 + 176);
      long long v448 = *(_OWORD *)(v1696 + v145 + 128);
      long long v447 = *(_OWORD *)(v1696 + v145 + 144);
      *(_OWORD *)(v442 + 160) = *(_OWORD *)(v1696 + v145 + 160);
      *(_OWORD *)(v442 + 176) = v446;
      *(_OWORD *)(v442 + 128) = v448;
      *(_OWORD *)(v442 + 144) = v447;
      long long v450 = *(_OWORD *)(v1696 + v145 + 208);
      long long v449 = *(_OWORD *)(v1696 + v145 + 224);
      long long v451 = *(_OWORD *)(v1696 + v145 + 192);
      *(void *)(v442 + 240) = *(void *)(v1696 + v145 + 240);
      *(_OWORD *)(v442 + 208) = v450;
      *(_OWORD *)(v442 + 224) = v449;
      *(_OWORD *)(v442 + 192) = v451;
      long long v452 = *(_OWORD *)(v1696 + v145);
      long long v453 = *(_OWORD *)(v1696 + v145 + 16);
      long long v454 = *(_OWORD *)(v1696 + v145 + 48);
      *(_OWORD *)(v442 + 32) = *(_OWORD *)(v1696 + v145 + 32);
      *(_OWORD *)(v442 + 48) = v454;
      *(_OWORD *)unint64_t v442 = v452;
      *(_OWORD *)(v442 + 16) = v453;
      long long v455 = (_OWORD *)((v1696 + v144 + 255) & 0xFFFFFFFFFFFFFFF8);
      long long v456 = (long long *)((v1696 + v145 + 255) & 0xFFFFFFFFFFFFFFF8);
      long long v457 = *v456;
      *(_OWORD *)((char *)v455 + 9) = *(long long *)((char *)v456 + 9);
      *long long v455 = v457;
      unint64_t v458 = (v1696 + v144 + 287) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v459 = (v1696 + v145 + 287) & 0xFFFFFFFFFFFFFFF8;
      long long v460 = *(_OWORD *)v459;
      *(unsigned char *)(v458 + 16) = *(unsigned char *)(v459 + 16);
      *(_OWORD *)unint64_t v458 = v460;
      uint64_t v461 = (void *)((v1696 + v144 + 311) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v462 = (void *)((v1696 + v145 + 311) & 0xFFFFFFFFFFFFFFF8);
      void *v461 = *v462;
      *(_OWORD *)(((unint64_t)v461 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v462 + 15) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v86 = a1;
      if (v1668 > 3) {
        goto LABEL_396;
      }
      unsigned int v463 = ((1 << (8 * v1668)) + 5) >> (8 * v1668);
      if (v463 > 0xFFD6)
      {
        *(_DWORD *)((char *)a1 + v1668) = 7;
      }
      else if (v463 <= 0xD6)
      {
LABEL_396:
        *((unsigned char *)a1 + v1668) = 7;
      }
      else
      {
        *(_WORD *)((char *)a1 + v1668) = 7;
      }
      return v86;
    case 8u:
      unint64_t v163 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1705 + 32);
      size_t v1586 = ((((v1632 + ((v34 + 8 + (v1666 & 0xFFFFFFFFFFFFFFF8)) & ~v34)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
            + 16;
      uint64_t v1709 = ~v40;
      uint64_t v1578 = ~v34;
      ((void (*)(_OWORD *, unsigned __int8 *, uint64_t, unint64_t))v163)(a1, a2, v1660, v69);
      unint64_t v164 = ((unint64_t)a1 + v1647) & v77;
      unint64_t v165 = (unint64_t)&a2[v1647] & v77;
      v163(v164, v165, v1660);
      unint64_t v166 = (v164 + v1687 + v35) & v83;
      unint64_t v167 = (v165 + v1687 + v35) & v83;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v1643 + 32))(v166, v167, v1642);
      uint64_t v168 = (void *)((v1666 + v166) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v169 = (void *)((v1666 + v167) & 0xFFFFFFFFFFFFFFF8);
      *uint64_t v168 = *v169;
      unint64_t v170 = ((unint64_t)v168 + v1644) & v1578;
      unint64_t v171 = ((unint64_t)v169 + v1644) & v1578;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v1645 + 32))(v170, v171, v1638);
      unsigned int v172 = (void *)((v1632 + v170) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v173 = (void *)((v1632 + v171) & 0xFFFFFFFFFFFFFFF8);
      *unsigned int v172 = *v173;
      *(_OWORD *)(((unint64_t)v172 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v173 + 15) & 0xFFFFFFFFFFFFFFF8);
      *(_OWORD *)(v1586 + v166) = *(_OWORD *)(v1586 + v167);
      size_t v174 = (v1699 + v1586 + v166) & v80;
      size_t v175 = (v1699 + v1586 + v167) & v80;
      *(unsigned char *)size_t v174 = *(unsigned char *)v175;
      uint64_t v176 = v174 | 4;
      int v177 = *(_DWORD *)(v175 | 4);
      *(unsigned char *)(v176 + 4) = *(unsigned char *)((v175 | 4) + 4);
      *(_DWORD *)uint64_t v176 = v177;
      *(_WORD *)(v174 + 10) = *(_WORD *)(v175 + 0xA);
      unint64_t v178 = *(void (**)(size_t, size_t, uint64_t))(v1653 + 32);
      v178((v1655 + v174) & v1709, (v1655 + v175) & v1709, v1652);
      size_t v179 = (v1651 + ((v1655 + v174) & v1709)) & v1709;
      size_t v180 = (v1651 + ((v1655 + v175) & v1709)) & v1709;
      v178(v179, v180, v1652);
      unint64_t v181 = (unsigned char *)(v179 + v1657);
      unsigned char *v181 = *(unsigned char *)(v180 + v1657);
      v181[1] = *(unsigned char *)(v180 + v1657 + 1);
      v181[2] = *(unsigned char *)(v180 + v1657 + 2);
      v181[3] = *(unsigned char *)(v180 + v1657 + 3);
      v181[4] = *(unsigned char *)(v180 + v1657 + 4);
      unint64_t v182 = (v179 + v1657 + 12) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v183 = (v180 + v1657 + 12) & 0xFFFFFFFFFFFFFFF8;
      *(_OWORD *)unint64_t v182 = *(_OWORD *)v183;
      *(unsigned char *)(v182 + 16) = *(unsigned char *)(v183 + 16);
      *(unsigned char *)(v182 + 17) = *(unsigned char *)(v183 + 17);
      *(unsigned char *)(v182 + 18) = *(unsigned char *)(v183 + 18);
      *(unsigned char *)(v182 + 19) = *(unsigned char *)(v183 + 19);
      unint64_t v184 = (v182 + 27) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v185 = (v183 + 27) & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v184 = *(void *)v185;
      *(unsigned char *)(v184 + 8) = *(unsigned char *)(v185 + 8);
      *(unsigned char *)(v184 + 9) = *(unsigned char *)(v185 + 9);
      *(unsigned char *)(v184 + 10) = *(unsigned char *)(v185 + 10);
      *(unsigned char *)(v184 + 11) = *(unsigned char *)(v185 + 11);
      *(unsigned char *)(v184 + 12) = *(unsigned char *)(v185 + 12);
      uint64_t v186 = (void *)((v183 + 47) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v187 = (void *)((v182 + 47) & 0xFFFFFFFFFFFFFFF8);
      void *v187 = *v186;
      unint64_t v188 = ((unint64_t)v187 + 15) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v189 = ((unint64_t)v186 + 15) & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v188 = *(void *)v189;
      *(unsigned char *)(v188 + 8) = *(unsigned char *)(v189 + 8);
      *(unsigned char *)(v188 + 9) = *(unsigned char *)(v189 + 9);
      uint64_t v190 = (void *)((v1649 + v188) & v1709);
      uint64_t v191 = (const void *)((v1649 + v189) & v1709);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1653 + 48))(v191, 1, v1652))
      {
        memcpy(v190, v191, __n);
      }
      else
      {
        v178((size_t)v190, (size_t)v191, v1652);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v1653 + 56))(v190, 0, 1, v1652);
      }
      uint64_t v464 = (void *)(((unint64_t)v191 + v1650) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v465 = (void *)(((unint64_t)v190 + v1650) & 0xFFFFFFFFFFFFFFF8);
      *unint64_t v465 = *v464;
      unint64_t v466 = ((unint64_t)v465 + 15) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v467 = ((unint64_t)v464 + 15) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v468 = *(void *)v467;
      *(unsigned char *)(v466 + 8) = *(unsigned char *)(v467 + 8);
      *(void *)unint64_t v466 = v468;
      long long v469 = (void *)(((unint64_t)v465 + 31) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v470 = (void *)(((unint64_t)v464 + 31) & 0xFFFFFFFFFFFFFFF8);
      *long long v469 = *v470;
      unint64_t v471 = (_OWORD *)(((unint64_t)v469 + 15) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v472 = (_OWORD *)(((unint64_t)v470 + 15) & 0xFFFFFFFFFFFFFFF8);
      *unint64_t v471 = *v472;
      unint64_t v473 = ((unint64_t)v471 + 19) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v474 = ((unint64_t)v472 + 19) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v475 = *(void *)v474;
      *(unsigned char *)(v473 + 8) = *(unsigned char *)(v474 + 8);
      *(void *)unint64_t v473 = v475;
      *(unsigned char *)(v473 + 9) = *(unsigned char *)(v474 + 9);
      unint64_t v476 = (v473 + 13) & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v477 = (v474 + 13) & 0xFFFFFFFFFFFFFFFCLL;
      LODWORD(v468) = *(_DWORD *)v477;
      *(unsigned char *)(v476 + 4) = *(unsigned char *)(v477 + 4);
      *(_DWORD *)unint64_t v476 = v468;
      *(_OWORD *)((v473 + 25) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v474 + 25) & 0xFFFFFFFFFFFFFFF8);
      size_t v478 = v174 + v1696;
      long long v479 = *(_OWORD *)(v175 + v1696 + 112);
      long long v481 = *(_OWORD *)(v175 + v1696 + 64);
      long long v480 = *(_OWORD *)(v175 + v1696 + 80);
      *(_OWORD *)(v478 + 96) = *(_OWORD *)(v175 + v1696 + 96);
      *(_OWORD *)(v478 + 112) = v479;
      *(_OWORD *)(v478 + 64) = v481;
      *(_OWORD *)(v478 + 80) = v480;
      long long v482 = *(_OWORD *)(v175 + v1696 + 176);
      long long v484 = *(_OWORD *)(v175 + v1696 + 128);
      long long v483 = *(_OWORD *)(v175 + v1696 + 144);
      *(_OWORD *)(v478 + 160) = *(_OWORD *)(v175 + v1696 + 160);
      *(_OWORD *)(v478 + 176) = v482;
      *(_OWORD *)(v478 + 128) = v484;
      *(_OWORD *)(v478 + 144) = v483;
      long long v486 = *(_OWORD *)(v175 + v1696 + 208);
      long long v485 = *(_OWORD *)(v175 + v1696 + 224);
      long long v487 = *(_OWORD *)(v175 + v1696 + 192);
      *(void *)(v478 + 240) = *(void *)(v175 + v1696 + 240);
      *(_OWORD *)(v478 + 208) = v486;
      *(_OWORD *)(v478 + 224) = v485;
      *(_OWORD *)(v478 + 192) = v487;
      long long v488 = *(_OWORD *)(v175 + v1696);
      long long v489 = *(_OWORD *)(v175 + v1696 + 16);
      long long v490 = *(_OWORD *)(v175 + v1696 + 48);
      *(_OWORD *)(v478 + 32) = *(_OWORD *)(v175 + v1696 + 32);
      *(_OWORD *)(v478 + 48) = v490;
      *(_OWORD *)size_t v478 = v488;
      *(_OWORD *)(v478 + 16) = v489;
      uint64_t v491 = (_OWORD *)((v174 + v1696 + 255) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v492 = (long long *)((v175 + v1696 + 255) & 0xFFFFFFFFFFFFFFF8);
      long long v493 = *v492;
      *(_OWORD *)((char *)v491 + 9) = *(long long *)((char *)v492 + 9);
      _OWORD *v491 = v493;
      unint64_t v494 = (v174 + v1696 + 287) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v495 = (v175 + v1696 + 287) & 0xFFFFFFFFFFFFFFF8;
      long long v496 = *(_OWORD *)v495;
      *(unsigned char *)(v494 + 16) = *(unsigned char *)(v495 + 16);
      *(_OWORD *)unint64_t v494 = v496;
      unint64_t v497 = (void *)((v174 + v1696 + 311) & 0xFFFFFFFFFFFFFFF8);
      int v498 = (void *)((v175 + v1696 + 311) & 0xFFFFFFFFFFFFFFF8);
      void *v497 = *v498;
      *(_OWORD *)(((unint64_t)v497 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v498 + 15) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v86 = a1;
      if (v1668 > 3) {
        goto LABEL_402;
      }
      unsigned int v499 = ((1 << (8 * v1668)) + 5) >> (8 * v1668);
      if (v499 > 0xFFD6)
      {
        *(_DWORD *)((char *)a1 + v1668) = 8;
      }
      else if (v499 <= 0xD6)
      {
LABEL_402:
        *((unsigned char *)a1 + v1668) = 8;
      }
      else
      {
        *(_WORD *)((char *)a1 + v1668) = 8;
      }
      return v86;
    case 9u:
      unsigned int v192 = a2[v1669];
      unsigned int v193 = v192 - 2;
      if (v192 < 2)
      {
        uint64_t v86 = a1;
        uint64_t v195 = v1705;
        uint64_t v197 = v1658;
        uint64_t v196 = v1668;
      }
      else
      {
        if (v1669 <= 3) {
          uint64_t v194 = v1669;
        }
        else {
          uint64_t v194 = 4;
        }
        uint64_t v195 = v1705;
        uint64_t v196 = v1668;
        uint64_t v86 = a1;
        uint64_t v197 = v1658;
        switch(v194)
        {
          case 1:
            int v198 = *a2;
            goto LABEL_519;
          case 2:
            int v198 = *(unsigned __int16 *)a2;
            goto LABEL_519;
          case 3:
            int v198 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_519;
          case 4:
            int v198 = *(_DWORD *)a2;
LABEL_519:
            if (v1669 < 4) {
              unsigned int v192 = (v198 | (v193 << (8 * v1669))) + 2;
            }
            else {
              unsigned int v192 = v198 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v577 = v192 == 1;
      if (v192 == 1) {
        uint64_t v578 = v195;
      }
      else {
        uint64_t v578 = v197;
      }
      (*(void (**)(unsigned char *))(v578 + 32))(v86);
      v86[v1669] = v577;
      if (v196 > 3) {
        goto LABEL_526;
      }
      unsigned int v579 = ((1 << (8 * v196)) + 5) >> (8 * v196);
      if (v579 > 0xFFD6)
      {
        *(_DWORD *)&v86[v196] = 9;
      }
      else if (v579 <= 0xD6)
      {
LABEL_526:
        v86[v196] = 9;
      }
      else
      {
        *(_WORD *)&v86[v196] = 9;
      }
      return v86;
    case 0xAu:
      unsigned int v199 = a2[v1669];
      unsigned int v200 = v199 - 2;
      if (v199 < 2)
      {
        uint64_t v205 = v78;
        uint64_t v201 = v1668;
        uint64_t v86 = a1;
        uint64_t v203 = v1660;
        uint64_t v206 = AssociatedTypeWitness;
        uint64_t v204 = v1705;
        uint64_t v207 = v1658;
      }
      else
      {
        uint64_t v201 = v1668;
        if (v1669 <= 3) {
          uint64_t v202 = v1669;
        }
        else {
          uint64_t v202 = 4;
        }
        uint64_t v203 = v1660;
        uint64_t v204 = v1705;
        uint64_t v205 = v78;
        uint64_t v86 = a1;
        uint64_t v206 = AssociatedTypeWitness;
        uint64_t v207 = v1658;
        switch(v202)
        {
          case 1:
            int v208 = *a2;
            goto LABEL_534;
          case 2:
            int v208 = *(unsigned __int16 *)a2;
            goto LABEL_534;
          case 3:
            int v208 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_534;
          case 4:
            int v208 = *(_DWORD *)a2;
LABEL_534:
            if (v1669 < 4) {
              unsigned int v199 = (v208 | (v200 << (8 * v1669))) + 2;
            }
            else {
              unsigned int v199 = v208 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v580 = v199 == 1;
      if (v199 == 1) {
        uint64_t v581 = v204;
      }
      else {
        uint64_t v581 = v207;
      }
      if (v199 == 1) {
        uint64_t v582 = v203;
      }
      else {
        uint64_t v582 = v206;
      }
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t, unint64_t))(v581 + 32))(v86, a2, v582, v69);
      v86[v1669] = v580;
      unint64_t v583 = (unint64_t)&v86[v1654] & v205;
      unint64_t v584 = (unsigned __int8 *)((unint64_t)&a2[v1654] & v205);
      unsigned int v585 = v584[v1669];
      if (v585 > 1)
      {
        size_t v586 = v1700;
        memcpy((void *)((unint64_t)&v86[v1654] & v205), v584, v1700);
      }
      else
      {
        if (v585 == 1)
        {
          (*(void (**)(unint64_t, unsigned __int8 *, uint64_t))(v204 + 32))((unint64_t)&v86[v1654] & v205, v584, v203);
          *(unsigned char *)(v583 + v1669) = 1;
        }
        else
        {
          (*(void (**)(unint64_t, unsigned __int8 *, uint64_t))(v207 + 32))((unint64_t)&v86[v1654] & v205, v584, v206);
          *(unsigned char *)(v583 + v1669) = 0;
        }
        size_t v586 = v1700;
      }
      unsigned int v587 = (unsigned char *)(v583 + v586);
      *unsigned int v587 = v584[v586];
      v587[1] = v584[v586 + 1];
      if (v201 > 3) {
        goto LABEL_550;
      }
      unsigned int v588 = ((1 << (8 * v201)) + 5) >> (8 * v201);
      if (v588 > 0xFFD6)
      {
        *(_DWORD *)&v86[v201] = 10;
      }
      else if (v588 <= 0xD6)
      {
LABEL_550:
        v86[v201] = 10;
      }
      else
      {
        *(_WORD *)&v86[v201] = 10;
      }
      return v86;
    case 0xBu:
      unsigned int v209 = a2[v1669];
      unsigned int v210 = v209 - 2;
      if (v209 < 2)
      {
        uint64_t v215 = v78;
        uint64_t v211 = v1668;
        uint64_t v86 = a1;
        uint64_t v213 = v1660;
        uint64_t v216 = AssociatedTypeWitness;
        uint64_t v214 = v1705;
        uint64_t v217 = v1658;
      }
      else
      {
        uint64_t v211 = v1668;
        if (v1669 <= 3) {
          uint64_t v212 = v1669;
        }
        else {
          uint64_t v212 = 4;
        }
        uint64_t v213 = v1660;
        uint64_t v214 = v1705;
        uint64_t v215 = v78;
        uint64_t v86 = a1;
        uint64_t v216 = AssociatedTypeWitness;
        uint64_t v217 = v1658;
        switch(v212)
        {
          case 1:
            int v218 = *a2;
            goto LABEL_558;
          case 2:
            int v218 = *(unsigned __int16 *)a2;
            goto LABEL_558;
          case 3:
            int v218 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_558;
          case 4:
            int v218 = *(_DWORD *)a2;
LABEL_558:
            if (v1669 < 4) {
              unsigned int v209 = (v218 | (v210 << (8 * v1669))) + 2;
            }
            else {
              unsigned int v209 = v218 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v589 = v209 == 1;
      if (v209 == 1) {
        uint64_t v590 = v214;
      }
      else {
        uint64_t v590 = v217;
      }
      if (v209 == 1) {
        uint64_t v591 = v213;
      }
      else {
        uint64_t v591 = v216;
      }
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t, unint64_t))(v590 + 32))(v86, a2, v591, v69);
      v86[v1669] = v589;
      unint64_t v592 = (unint64_t)&v86[v1654] & v215;
      long long v593 = (unsigned __int8 *)((unint64_t)&a2[v1654] & v215);
      unsigned int v594 = v593[v1669];
      if (v594 > 1)
      {
        size_t v595 = v1700;
        memcpy((void *)((unint64_t)&v86[v1654] & v215), v593, v1700);
      }
      else
      {
        if (v594 == 1)
        {
          (*(void (**)(unint64_t, unsigned __int8 *, uint64_t))(v214 + 32))((unint64_t)&v86[v1654] & v215, v593, v213);
          *(unsigned char *)(v592 + v1669) = 1;
        }
        else
        {
          (*(void (**)(unint64_t, unsigned __int8 *, uint64_t))(v217 + 32))((unint64_t)&v86[v1654] & v215, v593, v216);
          *(unsigned char *)(v592 + v1669) = 0;
        }
        size_t v595 = v1700;
      }
      uint64_t v596 = (unsigned char *)(v592 + v595);
      unsigned char *v596 = v593[v595];
      v596[1] = v593[v595 + 1];
      if (v211 > 3) {
        goto LABEL_574;
      }
      unsigned int v597 = ((1 << (8 * v211)) + 5) >> (8 * v211);
      if (v597 > 0xFFD6)
      {
        *(_DWORD *)&v86[v211] = 11;
      }
      else if (v597 <= 0xD6)
      {
LABEL_574:
        v86[v211] = 11;
      }
      else
      {
        *(_WORD *)&v86[v211] = 11;
      }
      return v86;
    case 0xCu:
      unsigned int v219 = a2[v1669];
      unsigned int v220 = v219 - 2;
      if (v219 < 2)
      {
        unint64_t v226 = v1669 + 2;
        uint64_t v86 = a1;
        uint64_t v222 = v1660;
        uint64_t v227 = AssociatedTypeWitness;
        size_t v224 = v1700;
        uint64_t v223 = v1705;
        uint64_t v228 = v1658;
        uint64_t v225 = v1668;
      }
      else
      {
        if (v1669 <= 3) {
          uint64_t v221 = v1669;
        }
        else {
          uint64_t v221 = 4;
        }
        uint64_t v222 = v1660;
        size_t v224 = v1700;
        uint64_t v223 = v1705;
        uint64_t v225 = v1668;
        unint64_t v226 = v1669 + 2;
        uint64_t v86 = a1;
        uint64_t v227 = AssociatedTypeWitness;
        uint64_t v228 = v1658;
        switch(v221)
        {
          case 1:
            int v229 = *a2;
            goto LABEL_582;
          case 2:
            int v229 = *(unsigned __int16 *)a2;
            goto LABEL_582;
          case 3:
            int v229 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_582;
          case 4:
            int v229 = *(_DWORD *)a2;
LABEL_582:
            if (v1669 < 4) {
              unsigned int v219 = (v229 | (v220 << (8 * v1669))) + 2;
            }
            else {
              unsigned int v219 = v229 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v598 = v219 == 1;
      if (v219 == 1) {
        uint64_t v599 = v223;
      }
      else {
        uint64_t v599 = v228;
      }
      if (v219 == 1) {
        uint64_t v600 = v222;
      }
      else {
        uint64_t v600 = v227;
      }
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t, unint64_t))(v599 + 32))(v86, a2, v600, v69);
      v86[v1669] = v598;
      v86[v224] = a2[v224];
      *(void *)((unint64_t)&v86[v226 + 7] & 0xFFFFFFFFFFFFFFF8) = *(void *)((unint64_t)&a2[v226 + 7] & 0xFFFFFFFFFFFFFFF8);
      if (v225 > 3) {
        goto LABEL_592;
      }
      unsigned int v601 = ((1 << (8 * v225)) + 5) >> (8 * v225);
      if (v601 > 0xFFD6)
      {
        *(_DWORD *)&v86[v225] = 12;
      }
      else if (v601 <= 0xD6)
      {
LABEL_592:
        v86[v225] = 12;
      }
      else
      {
        *(_WORD *)&v86[v225] = 12;
      }
      return v86;
    case 0xDu:
      unsigned int v230 = a2[v1669];
      unsigned int v231 = v230 - 2;
      if (v230 < 2)
      {
        uint64_t v86 = a1;
        uint64_t v233 = v1660;
        uint64_t v237 = AssociatedTypeWitness;
        size_t v235 = v1700;
        uint64_t v234 = v1705;
        uint64_t v238 = v1658;
        uint64_t v236 = v1668;
      }
      else
      {
        if (v1669 <= 3) {
          uint64_t v232 = v1669;
        }
        else {
          uint64_t v232 = 4;
        }
        uint64_t v233 = v1660;
        size_t v235 = v1700;
        uint64_t v234 = v1705;
        uint64_t v236 = v1668;
        uint64_t v86 = a1;
        uint64_t v237 = AssociatedTypeWitness;
        uint64_t v238 = v1658;
        switch(v232)
        {
          case 1:
            int v239 = *a2;
            goto LABEL_600;
          case 2:
            int v239 = *(unsigned __int16 *)a2;
            goto LABEL_600;
          case 3:
            int v239 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_600;
          case 4:
            int v239 = *(_DWORD *)a2;
LABEL_600:
            if (v1669 < 4) {
              unsigned int v230 = (v239 | (v231 << (8 * v1669))) + 2;
            }
            else {
              unsigned int v230 = v239 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v602 = v230 == 1;
      if (v230 == 1) {
        uint64_t v603 = v234;
      }
      else {
        uint64_t v603 = v238;
      }
      if (v230 == 1) {
        uint64_t v604 = v233;
      }
      else {
        uint64_t v604 = v237;
      }
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t, unint64_t))(v603 + 32))(v86, a2, v604, v69);
      v86[v1669] = v602;
      v86[v235] = a2[v235];
      if (v236 > 3) {
        goto LABEL_610;
      }
      unsigned int v605 = ((1 << (8 * v236)) + 5) >> (8 * v236);
      if (v605 > 0xFFD6)
      {
        *(_DWORD *)&v86[v236] = 13;
      }
      else if (v605 <= 0xD6)
      {
LABEL_610:
        v86[v236] = 13;
      }
      else
      {
        *(_WORD *)&v86[v236] = 13;
      }
      return v86;
    case 0xEu:
      unsigned int v240 = a2[v1669];
      unsigned int v241 = v240 - 2;
      if (v240 < 2)
      {
        uint64_t v86 = a1;
        uint64_t v243 = v1660;
        uint64_t v247 = AssociatedTypeWitness;
        size_t v245 = v1700;
        uint64_t v244 = v1705;
        uint64_t v248 = v1658;
        uint64_t v246 = v1668;
      }
      else
      {
        if (v1669 <= 3) {
          uint64_t v242 = v1669;
        }
        else {
          uint64_t v242 = 4;
        }
        uint64_t v243 = v1660;
        size_t v245 = v1700;
        uint64_t v244 = v1705;
        uint64_t v246 = v1668;
        uint64_t v86 = a1;
        uint64_t v247 = AssociatedTypeWitness;
        uint64_t v248 = v1658;
        switch(v242)
        {
          case 1:
            int v249 = *a2;
            goto LABEL_618;
          case 2:
            int v249 = *(unsigned __int16 *)a2;
            goto LABEL_618;
          case 3:
            int v249 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_618;
          case 4:
            int v249 = *(_DWORD *)a2;
LABEL_618:
            if (v1669 < 4) {
              unsigned int v240 = (v249 | (v241 << (8 * v1669))) + 2;
            }
            else {
              unsigned int v240 = v249 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v606 = v240 == 1;
      if (v240 == 1) {
        uint64_t v607 = v244;
      }
      else {
        uint64_t v607 = v248;
      }
      if (v240 == 1) {
        uint64_t v608 = v243;
      }
      else {
        uint64_t v608 = v247;
      }
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t, unint64_t))(v607 + 32))(v86, a2, v608, v69);
      v86[v1669] = v606;
      *(void *)((unint64_t)&v86[v245 + 7] & 0xFFFFFFFFFFFFFFF8) = *(void *)((unint64_t)&a2[v245 + 7] & 0xFFFFFFFFFFFFFFF8);
      if (v246 > 3) {
        goto LABEL_628;
      }
      unsigned int v609 = ((1 << (8 * v246)) + 5) >> (8 * v246);
      if (v609 > 0xFFD6)
      {
        *(_DWORD *)&v86[v246] = 14;
      }
      else if (v609 <= 0xD6)
      {
LABEL_628:
        v86[v246] = 14;
      }
      else
      {
        *(_WORD *)&v86[v246] = 14;
      }
      return v86;
    case 0xFu:
      unsigned int v250 = a2[v1669];
      unsigned int v251 = v250 - 2;
      if (v250 < 2)
      {
        uint64_t v86 = a1;
        uint64_t v253 = v1660;
        uint64_t v257 = AssociatedTypeWitness;
        size_t v255 = v1700;
        uint64_t v254 = v1705;
        uint64_t v258 = v1658;
        uint64_t v256 = v1668;
      }
      else
      {
        if (v1669 <= 3) {
          uint64_t v252 = v1669;
        }
        else {
          uint64_t v252 = 4;
        }
        uint64_t v253 = v1660;
        size_t v255 = v1700;
        uint64_t v254 = v1705;
        uint64_t v256 = v1668;
        uint64_t v86 = a1;
        uint64_t v257 = AssociatedTypeWitness;
        uint64_t v258 = v1658;
        switch(v252)
        {
          case 1:
            int v259 = *a2;
            goto LABEL_636;
          case 2:
            int v259 = *(unsigned __int16 *)a2;
            goto LABEL_636;
          case 3:
            int v259 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_636;
          case 4:
            int v259 = *(_DWORD *)a2;
LABEL_636:
            if (v1669 < 4) {
              unsigned int v250 = (v259 | (v251 << (8 * v1669))) + 2;
            }
            else {
              unsigned int v250 = v259 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v610 = v250 == 1;
      if (v250 == 1) {
        uint64_t v611 = v254;
      }
      else {
        uint64_t v611 = v258;
      }
      if (v250 == 1) {
        uint64_t v612 = v253;
      }
      else {
        uint64_t v612 = v257;
      }
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t, unint64_t))(v611 + 32))(v86, a2, v612, v69);
      v86[v1669] = v610;
      *(void *)((unint64_t)&v86[v255 + 7] & 0xFFFFFFFFFFFFFFF8) = *(void *)((unint64_t)&a2[v255 + 7] & 0xFFFFFFFFFFFFFFF8);
      if (v256 > 3) {
        goto LABEL_646;
      }
      unsigned int v613 = ((1 << (8 * v256)) + 5) >> (8 * v256);
      if (v613 > 0xFFD6)
      {
        *(_DWORD *)&v86[v256] = 15;
      }
      else if (v613 <= 0xD6)
      {
LABEL_646:
        v86[v256] = 15;
      }
      else
      {
        *(_WORD *)&v86[v256] = 15;
      }
      return v86;
    case 0x10u:
      long long v260 = *((_OWORD *)a2 + 1);
      uint64_t v86 = a1;
      *a1 = *(_OWORD *)a2;
      a1[1] = v260;
      a1[2] = *((_OWORD *)a2 + 2);
      *((void *)a1 + 6) = *((void *)a2 + 6);
      if (v1668 > 3) {
        goto LABEL_209;
      }
      unsigned int v411 = ((1 << (8 * v1668)) + 5) >> (8 * v1668);
      if (v411 > 0xFFD6)
      {
        *(_DWORD *)((char *)a1 + v1668) = 16;
      }
      else if (v411 <= 0xD6)
      {
LABEL_209:
        *((unsigned char *)a1 + v1668) = 16;
      }
      else
      {
        *(_WORD *)((char *)a1 + v1668) = 16;
      }
      return v86;
    case 0x11u:
      unsigned int v261 = a2[v1669];
      unsigned int v262 = v261 - 2;
      if (v261 < 2)
      {
        uint64_t v86 = a1;
        uint64_t v264 = v1705;
        uint64_t v266 = v1658;
        uint64_t v265 = v1668;
      }
      else
      {
        if (v1669 <= 3) {
          uint64_t v263 = v1669;
        }
        else {
          uint64_t v263 = 4;
        }
        uint64_t v264 = v1705;
        uint64_t v265 = v1668;
        uint64_t v86 = a1;
        uint64_t v266 = v1658;
        switch(v263)
        {
          case 1:
            int v267 = *a2;
            goto LABEL_654;
          case 2:
            int v267 = *(unsigned __int16 *)a2;
            goto LABEL_654;
          case 3:
            int v267 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_654;
          case 4:
            int v267 = *(_DWORD *)a2;
LABEL_654:
            if (v1669 < 4) {
              unsigned int v261 = (v267 | (v262 << (8 * v1669))) + 2;
            }
            else {
              unsigned int v261 = v267 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v614 = v261 == 1;
      if (v261 == 1) {
        uint64_t v615 = v264;
      }
      else {
        uint64_t v615 = v266;
      }
      (*(void (**)(unsigned char *))(v615 + 32))(v86);
      v86[v1669] = v614;
      if (v265 > 3) {
        goto LABEL_661;
      }
      unsigned int v616 = ((1 << (8 * v265)) + 5) >> (8 * v265);
      if (v616 > 0xFFD6)
      {
        *(_DWORD *)&v86[v265] = 17;
      }
      else if (v616 <= 0xD6)
      {
LABEL_661:
        v86[v265] = 17;
      }
      else
      {
        *(_WORD *)&v86[v265] = 17;
      }
      return v86;
    case 0x12u:
      uint64_t v86 = a1;
      (*(void (**)(_OWORD *, unsigned __int8 *, uint64_t, unint64_t))(v1658 + 32))(a1, a2, AssociatedTypeWitness, v69);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v1705 + 32))(((unint64_t)a1 + v1627) & v77, (unint64_t)&a2[v1627] & v77, v1660);
      if (v1668 > 3) {
        goto LABEL_217;
      }
      unsigned int v412 = ((1 << (8 * v1668)) + 5) >> (8 * v1668);
      if (v412 > 0xFFD6)
      {
        *(_DWORD *)((char *)a1 + v1668) = 18;
      }
      else if (v412 <= 0xD6)
      {
LABEL_217:
        *((unsigned char *)a1 + v1668) = 18;
      }
      else
      {
        *(_WORD *)((char *)a1 + v1668) = 18;
      }
      return v86;
    case 0x13u:
      uint64_t v86 = a1;
      *(unsigned char *)a1 = *a2;
      uint64_t v268 = ((unint64_t)a1 + v84 + 1) & v78;
      uint64_t v269 = (unsigned __int8 *)((unint64_t)&a2[v84 + 1] & v78);
      unsigned int v270 = v269[v1669];
      unsigned int v271 = v270 - 2;
      if (v270 < 2)
      {
        uint64_t v273 = v1705;
        uint64_t v275 = v1658;
        uint64_t v274 = v1668;
      }
      else
      {
        if (v1669 <= 3) {
          uint64_t v272 = v1669;
        }
        else {
          uint64_t v272 = 4;
        }
        uint64_t v273 = v1705;
        uint64_t v274 = v1668;
        uint64_t v275 = v1658;
        switch(v272)
        {
          case 1:
            int v276 = *v269;
            goto LABEL_669;
          case 2:
            int v276 = *(unsigned __int16 *)v269;
            goto LABEL_669;
          case 3:
            int v276 = *(unsigned __int16 *)((unint64_t)&a2[v84 + 1] & v78) | (*(unsigned __int8 *)(((unint64_t)&a2[v84 + 1] & v78) + 2) << 16);
            goto LABEL_669;
          case 4:
            int v276 = *(_DWORD *)v269;
LABEL_669:
            if (v1669 < 4) {
              unsigned int v270 = (v276 | (v271 << (8 * v1669))) + 2;
            }
            else {
              unsigned int v270 = v276 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v617 = v270 == 1;
      if (v270 == 1) {
        uint64_t v618 = v273;
      }
      else {
        uint64_t v618 = v275;
      }
      (*(void (**)(uint64_t))(v618 + 32))(v268);
      *(unsigned char *)(v268 + v1669) = v617;
      if (v274 > 3) {
        goto LABEL_676;
      }
      unsigned int v619 = ((1 << (8 * v274)) + 5) >> (8 * v274);
      if (v619 > 0xFFD6)
      {
        *(_DWORD *)((char *)a1 + v274) = 19;
      }
      else if (v619 <= 0xD6)
      {
LABEL_676:
        *((unsigned char *)a1 + v274) = 19;
      }
      else
      {
        *(_WORD *)((char *)a1 + v274) = 19;
      }
      return v86;
    case 0x14u:
      uint64_t v86 = a1;
      *(void *)a1 = *(void *)a2;
      if (v1668 > 3) {
        goto LABEL_225;
      }
      unsigned int v413 = ((1 << (8 * v1668)) + 5) >> (8 * v1668);
      if (v413 > 0xFFD6)
      {
        *(_DWORD *)((char *)a1 + v1668) = 20;
      }
      else if (v413 <= 0xD6)
      {
LABEL_225:
        *((unsigned char *)a1 + v1668) = 20;
      }
      else
      {
        *(_WORD *)((char *)a1 + v1668) = 20;
      }
      return v86;
    case 0x15u:
      uint64_t v86 = a1;
      *(void *)a1 = *(void *)a2;
      if (v1668 > 3) {
        goto LABEL_227;
      }
      unsigned int v414 = ((1 << (8 * v1668)) + 5) >> (8 * v1668);
      if (v414 > 0xFFD6)
      {
        *(_DWORD *)((char *)a1 + v1668) = 21;
      }
      else if (v414 <= 0xD6)
      {
LABEL_227:
        *((unsigned char *)a1 + v1668) = 21;
      }
      else
      {
        *(_WORD *)((char *)a1 + v1668) = 21;
      }
      return v86;
    case 0x16u:
      uint64_t v86 = a1;
      *(unsigned char *)a1 = *a2;
      if (v1668 > 3) {
        goto LABEL_229;
      }
      unsigned int v415 = ((1 << (8 * v1668)) + 5) >> (8 * v1668);
      if (v415 > 0xFFD6)
      {
        *(_DWORD *)((char *)a1 + v1668) = 22;
      }
      else if (v415 <= 0xD6)
      {
LABEL_229:
        *((unsigned char *)a1 + v1668) = 22;
      }
      else
      {
        *(_WORD *)((char *)a1 + v1668) = 22;
      }
      return v86;
    case 0x17u:
      uint64_t v86 = a1;
      *(unsigned char *)a1 = *a2;
      if (v1668 > 3) {
        goto LABEL_231;
      }
      unsigned int v416 = ((1 << (8 * v1668)) + 5) >> (8 * v1668);
      if (v416 > 0xFFD6)
      {
        *(_DWORD *)((char *)a1 + v1668) = 23;
      }
      else if (v416 <= 0xD6)
      {
LABEL_231:
        *((unsigned char *)a1 + v1668) = 23;
      }
      else
      {
        *(_WORD *)((char *)a1 + v1668) = 23;
      }
      return v86;
    case 0x18u:
      unsigned int v277 = a2[v1669];
      unsigned int v278 = v277 - 2;
      if (v277 < 2)
      {
        uint64_t v86 = a1;
        uint64_t v280 = v1705;
        uint64_t v282 = v1658;
        uint64_t v281 = v1668;
      }
      else
      {
        if (v1669 <= 3) {
          uint64_t v279 = v1669;
        }
        else {
          uint64_t v279 = 4;
        }
        uint64_t v280 = v1705;
        uint64_t v281 = v1668;
        uint64_t v86 = a1;
        uint64_t v282 = v1658;
        switch(v279)
        {
          case 1:
            int v283 = *a2;
            goto LABEL_684;
          case 2:
            int v283 = *(unsigned __int16 *)a2;
            goto LABEL_684;
          case 3:
            int v283 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_684;
          case 4:
            int v283 = *(_DWORD *)a2;
LABEL_684:
            if (v1669 < 4) {
              unsigned int v277 = (v283 | (v278 << (8 * v1669))) + 2;
            }
            else {
              unsigned int v277 = v283 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v620 = v277 == 1;
      if (v277 == 1) {
        uint64_t v621 = v280;
      }
      else {
        uint64_t v621 = v282;
      }
      (*(void (**)(unsigned char *))(v621 + 32))(v86);
      v86[v1669] = v620;
      if (v281 > 3) {
        goto LABEL_691;
      }
      unsigned int v622 = ((1 << (8 * v281)) + 5) >> (8 * v281);
      if (v622 > 0xFFD6)
      {
        *(_DWORD *)&v86[v281] = 24;
      }
      else if (v622 <= 0xD6)
      {
LABEL_691:
        v86[v281] = 24;
      }
      else
      {
        *(_WORD *)&v86[v281] = 24;
      }
      return v86;
    case 0x19u:
      unsigned int v284 = a2[v1669];
      unsigned int v285 = v284 - 2;
      if (v284 < 2)
      {
        uint64_t v86 = a1;
        uint64_t v287 = v1705;
        uint64_t v289 = v1658;
        uint64_t v288 = v1668;
      }
      else
      {
        if (v1669 <= 3) {
          uint64_t v286 = v1669;
        }
        else {
          uint64_t v286 = 4;
        }
        uint64_t v287 = v1705;
        uint64_t v288 = v1668;
        uint64_t v86 = a1;
        uint64_t v289 = v1658;
        switch(v286)
        {
          case 1:
            int v290 = *a2;
            goto LABEL_699;
          case 2:
            int v290 = *(unsigned __int16 *)a2;
            goto LABEL_699;
          case 3:
            int v290 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_699;
          case 4:
            int v290 = *(_DWORD *)a2;
LABEL_699:
            if (v1669 < 4) {
              unsigned int v284 = (v290 | (v285 << (8 * v1669))) + 2;
            }
            else {
              unsigned int v284 = v290 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v623 = v284 == 1;
      if (v284 == 1) {
        uint64_t v624 = v287;
      }
      else {
        uint64_t v624 = v289;
      }
      (*(void (**)(unsigned char *))(v624 + 32))(v86);
      v86[v1669] = v623;
      if (v288 > 3) {
        goto LABEL_706;
      }
      unsigned int v625 = ((1 << (8 * v288)) + 5) >> (8 * v288);
      if (v625 > 0xFFD6)
      {
        *(_DWORD *)&v86[v288] = 25;
      }
      else if (v625 <= 0xD6)
      {
LABEL_706:
        v86[v288] = 25;
      }
      else
      {
        *(_WORD *)&v86[v288] = 25;
      }
      return v86;
    case 0x1Au:
      unsigned int v291 = a2[v1669];
      unsigned int v292 = v291 - 2;
      if (v291 < 2)
      {
        uint64_t v86 = a1;
        uint64_t v294 = v1705;
        uint64_t v296 = v1658;
        uint64_t v295 = v1668;
      }
      else
      {
        if (v1669 <= 3) {
          uint64_t v293 = v1669;
        }
        else {
          uint64_t v293 = 4;
        }
        uint64_t v294 = v1705;
        uint64_t v295 = v1668;
        uint64_t v86 = a1;
        uint64_t v296 = v1658;
        switch(v293)
        {
          case 1:
            int v297 = *a2;
            goto LABEL_714;
          case 2:
            int v297 = *(unsigned __int16 *)a2;
            goto LABEL_714;
          case 3:
            int v297 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_714;
          case 4:
            int v297 = *(_DWORD *)a2;
LABEL_714:
            if (v1669 < 4) {
              unsigned int v291 = (v297 | (v292 << (8 * v1669))) + 2;
            }
            else {
              unsigned int v291 = v297 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v626 = v291 == 1;
      if (v291 == 1) {
        uint64_t v627 = v294;
      }
      else {
        uint64_t v627 = v296;
      }
      (*(void (**)(unsigned char *))(v627 + 32))(v86);
      v86[v1669] = v626;
      if (v295 > 3) {
        goto LABEL_721;
      }
      unsigned int v628 = ((1 << (8 * v295)) + 5) >> (8 * v295);
      if (v628 > 0xFFD6)
      {
        *(_DWORD *)&v86[v295] = 26;
      }
      else if (v628 <= 0xD6)
      {
LABEL_721:
        v86[v295] = 26;
      }
      else
      {
        *(_WORD *)&v86[v295] = 26;
      }
      return v86;
    case 0x1Bu:
      uint64_t v298 = ~v1707;
      uint64_t v299 = ~v1672;
      uint64_t v300 = ~v1661;
      uint64_t v1710 = ~v40;
      uint64_t v1570 = ~v1721;
      uint64_t v1689 = ~v1679;
      uint64_t v1692 = ~v1712;
      unint64_t v301 = v69;
      unint64_t v302 = a2;
      unsigned int v303 = a2[v69];
      unsigned int v304 = v303 - 2;
      if (v303 < 2)
      {
        size_t v306 = __n;
        uint64_t v307 = v1668;
      }
      else
      {
        if (v69 <= 3) {
          uint64_t v305 = v69;
        }
        else {
          uint64_t v305 = 4;
        }
        size_t v306 = __n;
        uint64_t v307 = v1668;
        uint64_t v82 = ~v1681;
        switch(v305)
        {
          case 1:
            int v308 = *a2;
            goto LABEL_729;
          case 2:
            int v308 = *(unsigned __int16 *)a2;
            goto LABEL_729;
          case 3:
            int v308 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            uint64_t v82 = ~v1681;
            goto LABEL_729;
          case 4:
            int v308 = *(_DWORD *)a2;
LABEL_729:
            if (v69 < 4)
            {
              uint64_t v82 = ~v1681;
              unsigned int v303 = (v308 | (v304 << (8 * v69))) + 2;
            }
            else
            {
              unsigned int v303 = v308 + 2;
            }
            break;
          default:
            break;
        }
      }
      uint64_t v1664 = ~v35;
      if (v303 == 1)
      {
        unsigned int v629 = a2[v1609];
        unsigned int v630 = v629 - 8;
        uint64_t v86 = a1;
        if (v629 >= 8)
        {
          if (v1609 <= 3) {
            uint64_t v631 = v1609;
          }
          else {
            uint64_t v631 = 4;
          }
          switch(v631)
          {
            case 1:
              int v632 = *a2;
              goto LABEL_1138;
            case 2:
              int v632 = *(unsigned __int16 *)a2;
              goto LABEL_1138;
            case 3:
              int v632 = *(unsigned __int16 *)a2 | (a2[2] << 16);
              goto LABEL_1138;
            case 4:
              int v632 = *(_DWORD *)a2;
LABEL_1138:
              if (v1609 < 4) {
                unsigned int v629 = (v632 | (v630 << (8 * v1609))) + 8;
              }
              else {
                unsigned int v629 = v632 + 8;
              }
              break;
            default:
              break;
          }
        }
        unint64_t v1701 = v69;
        uint64_t v1002 = ~v56;
        switch(v629)
        {
          case 1u:
            uint64_t v1581 = v85;
            size_t v1574 = v38;
            uint64_t v1717 = v298;
            size_t v1589 = v36;
            v1685 = *(void (**)(void *, const void *, uint64_t))(v1705 + 32);
            ((void (*)(_OWORD *))v1685)(a1);
            size_t v1695 = (void *)(((unint64_t)a1 + v1601) & v299);
            uint64_t v1007 = (const void *)((unint64_t)&a2[v1601] & v299);
            unint64_t v1730 = v1007;
            if (v1621 == v1629)
            {
              int v1008 = (*(uint64_t (**)(void))(v1705 + 48))();
            }
            else
            {
              unint64_t v1059 = ((unint64_t)v1007 + v1647) & v1692;
              unint64_t v1060 = (v1619 + v1059) & v1664;
              if (v1634 != v1629)
              {
                size_t v1083 = v1060 + v1589;
                uint64_t v1084 = v300;
                uint64_t v1085 = (void *)(((unint64_t)a1 + v1601) & v299);
                if ((v1606 & 0x80000000) != 0)
                {
                  uint64_t v1126 = (v1655 + ((v1699 + v1083) & v1717)) & v1710;
                  if (v1639 <= 0x7FFFFFFD)
                  {
                    unint64_t v1567 = *(void *)(((v1603 + ((v1651 + v1126) & v1710)) & 0xFFFFFFFFFFFFFFF8) + 8);
                    if (v1567 >= 0xFFFFFFFF) {
                      LODWORD(v1567) = -1;
                    }
                    size_t v1115 = v1574;
                    if ((v1567 + 1) >= 2) {
                      goto LABEL_1319;
                    }
                    goto LABEL_1322;
                  }
                  int v1008 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v1653 + 48))(v1126, v1639, v1652);
                }
                else
                {
                  unint64_t v1086 = *(void *)(v1083 + 8);
                  if (v1086 >= 0xFFFFFFFF) {
                    LODWORD(v1086) = -1;
                  }
                  int v1008 = v1086 + 1;
                }
                size_t v1115 = v1574;
                goto LABEL_1318;
              }
              if (v1624 == v1634)
              {
                int v1008 = (*(uint64_t (**)(unint64_t))(v1643 + 48))((v1619 + v1059) & v1664);
              }
              else
              {
                id v1113 = (unint64_t *)((v1666 + v1060) & 0xFFFFFFFFFFFFFFF8);
                if (v1618 <= 0x7FFFFFFE)
                {
                  unint64_t v1114 = *v1113;
                  if (v1114 >= 0xFFFFFFFF) {
                    LODWORD(v1114) = -1;
                  }
                  size_t v1115 = v1574;
                  uint64_t v1084 = v300;
                  uint64_t v1085 = (void *)(((unint64_t)a1 + v1601) & v299);
                  if ((v1114 + 1) >= 2) {
                    goto LABEL_1319;
                  }
                  goto LABEL_1322;
                }
                int v1008 = (*(uint64_t (**)(unint64_t))(v1645 + 48))(((unint64_t)v1113 + v1644) & v1581);
              }
            }
            size_t v1115 = v1574;
            uint64_t v1084 = v300;
            uint64_t v1085 = (void *)(((unint64_t)a1 + v1601) & v299);
LABEL_1318:
            if (v1008)
            {
LABEL_1319:
              uint64_t v1199 = v1730;
              memcpy(v1085, v1730, v1115);
              uint64_t v307 = v1668;
              unint64_t v1200 = v1617;
              uint64_t v1201 = v1721;
LABEL_1320:
              size_t v1202 = v306;
              goto LABEL_1326;
            }
            unint64_t v1059 = ((unint64_t)v1730 + v1647) & v1692;
            unint64_t v1060 = (v1619 + v1059) & v1664;
LABEL_1322:
            v1685(v1085, v1730, v1660);
            v1685((void *)(((unint64_t)v1085 + v1647) & v1692), (const void *)v1059, v1660);
            unint64_t v1203 = (v1619 + (((unint64_t)v1085 + v1647) & v1692)) & v1664;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v1643 + 32))(v1203, v1060, v1642);
            int v1204 = (void *)((v1666 + v1203) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v1205 = (void *)((v1666 + v1060) & 0xFFFFFFFFFFFFFFF8);
            *int v1204 = *v1205;
            unint64_t v1206 = ((unint64_t)v1204 + v1644) & v1581;
            unint64_t v1207 = ((unint64_t)v1205 + v1644) & v1581;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v1645 + 32))(v1206, v1207, v1638);
            char v1208 = (void *)((v1632 + v1206) & 0xFFFFFFFFFFFFFFF8);
            char v1209 = (void *)((v1632 + v1207) & 0xFFFFFFFFFFFFFFF8);
            *char v1208 = *v1209;
            *(_OWORD *)(((unint64_t)v1208 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1209
                                                                                            + 15) & 0xFFFFFFFFFFFFFFF8);
            *(_OWORD *)(v1203 + v1589) = *(_OWORD *)(v1060 + v1589);
            size_t v1210 = (v1699 + v1203 + v1589) & v1717;
            size_t v1211 = (v1699 + v1060 + v1589) & v1717;
            *(unsigned char *)size_t v1210 = *(unsigned char *)v1211;
            uint64_t v1212 = v1210 | 4;
            int v1213 = *(_DWORD *)(v1211 | 4);
            *(unsigned char *)(v1212 + 4) = *(unsigned char *)((v1211 | 4) + 4);
            *(_DWORD *)uint64_t v1212 = v1213;
            *(_WORD *)(v1210 + 10) = *(_WORD *)(v1211 + 0xA);
            uint64_t v1214 = *(void (**)(size_t, size_t, uint64_t))(v1653 + 32);
            v1214((v1655 + v1210) & v1710, (v1655 + v1211) & v1710, v1652);
            size_t v1215 = (v1651 + ((v1655 + v1210) & v1710)) & v1710;
            size_t v1216 = (v1651 + ((v1655 + v1211) & v1710)) & v1710;
            v1214(v1215, v1216, v1652);
            unint64_t v1217 = (unsigned char *)(v1215 + v1657);
            *unint64_t v1217 = *(unsigned char *)(v1216 + v1657);
            v1217[1] = *(unsigned char *)(v1216 + v1657 + 1);
            v1217[2] = *(unsigned char *)(v1216 + v1657 + 2);
            v1217[3] = *(unsigned char *)(v1216 + v1657 + 3);
            v1217[4] = *(unsigned char *)(v1216 + v1657 + 4);
            unint64_t v1218 = (v1215 + v1657 + 12) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1219 = (v1216 + v1657 + 12) & 0xFFFFFFFFFFFFFFF8;
            *(_OWORD *)unint64_t v1218 = *(_OWORD *)v1219;
            *(unsigned char *)(v1218 + 16) = *(unsigned char *)(v1219 + 16);
            *(unsigned char *)(v1218 + 17) = *(unsigned char *)(v1219 + 17);
            *(unsigned char *)(v1218 + 18) = *(unsigned char *)(v1219 + 18);
            *(unsigned char *)(v1218 + 19) = *(unsigned char *)(v1219 + 19);
            unint64_t v1220 = (v1218 + 27) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1221 = (v1219 + 27) & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v1220 = *(void *)v1221;
            *(unsigned char *)(v1220 + 8) = *(unsigned char *)(v1221 + 8);
            *(unsigned char *)(v1220 + 9) = *(unsigned char *)(v1221 + 9);
            *(unsigned char *)(v1220 + 10) = *(unsigned char *)(v1221 + 10);
            *(unsigned char *)(v1220 + 11) = *(unsigned char *)(v1221 + 11);
            *(unsigned char *)(v1220 + 12) = *(unsigned char *)(v1221 + 12);
            unint64_t v1222 = (void *)((v1219 + 47) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1223 = (void *)((v1218 + 47) & 0xFFFFFFFFFFFFFFF8);
            *unint64_t v1223 = *v1222;
            unint64_t v1224 = ((unint64_t)v1223 + 15) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1225 = ((unint64_t)v1222 + 15) & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v1224 = *(void *)v1225;
            *(unsigned char *)(v1224 + 8) = *(unsigned char *)(v1225 + 8);
            *(unsigned char *)(v1224 + 9) = *(unsigned char *)(v1225 + 9);
            unint64_t v1226 = (void *)((v1649 + v1224) & v1710);
            size_t v1227 = (const void *)((v1649 + v1225) & v1710);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1653 + 48))(v1227, 1, v1652))
            {
              size_t v306 = __n;
              memcpy(v1226, v1227, __n);
            }
            else
            {
              v1214((size_t)v1226, (size_t)v1227, v1652);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v1653 + 56))(v1226, 0, 1, v1652);
              size_t v306 = __n;
            }
            unint64_t v1228 = (void *)(((unint64_t)v1226 + v1650) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v1229 = (void *)(((unint64_t)v1227 + v1650) & 0xFFFFFFFFFFFFFFF8);
            *unint64_t v1228 = *v1229;
            unint64_t v1230 = ((unint64_t)v1228 + 15) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1231 = ((unint64_t)v1229 + 15) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v1232 = *(void *)v1231;
            *(unsigned char *)(v1230 + 8) = *(unsigned char *)(v1231 + 8);
            *(void *)unint64_t v1230 = v1232;
            uint64_t v1233 = (void *)(((unint64_t)v1228 + 31) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v1234 = (void *)(((unint64_t)v1229 + 31) & 0xFFFFFFFFFFFFFFF8);
            *uint64_t v1233 = *v1234;
            unint64_t v1235 = (_OWORD *)(((unint64_t)v1233 + 15) & 0xFFFFFFFFFFFFFFF8);
            int v1236 = (_OWORD *)(((unint64_t)v1234 + 15) & 0xFFFFFFFFFFFFFFF8);
            _OWORD *v1235 = *v1236;
            unint64_t v1237 = ((unint64_t)v1235 + 19) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1238 = ((unint64_t)v1236 + 19) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v1239 = *(void *)v1238;
            *(unsigned char *)(v1237 + 8) = *(unsigned char *)(v1238 + 8);
            *(void *)unint64_t v1237 = v1239;
            *(unsigned char *)(v1237 + 9) = *(unsigned char *)(v1238 + 9);
            unint64_t v1240 = (v1237 + 13) & 0xFFFFFFFFFFFFFFFCLL;
            unint64_t v1241 = (v1238 + 13) & 0xFFFFFFFFFFFFFFFCLL;
            LODWORD(v1232) = *(_DWORD *)v1241;
            *(unsigned char *)(v1240 + 4) = *(unsigned char *)(v1241 + 4);
            *(_DWORD *)unint64_t v1240 = v1232;
            *(_OWORD *)((v1237 + 25) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v1238 + 25) & 0xFFFFFFFFFFFFFFF8);
            size_t v1242 = v1210 + v1696;
            long long v1243 = *(_OWORD *)(v1211 + v1696 + 112);
            long long v1245 = *(_OWORD *)(v1211 + v1696 + 64);
            long long v1244 = *(_OWORD *)(v1211 + v1696 + 80);
            *(_OWORD *)(v1242 + 96) = *(_OWORD *)(v1211 + v1696 + 96);
            *(_OWORD *)(v1242 + 112) = v1243;
            *(_OWORD *)(v1242 + 64) = v1245;
            *(_OWORD *)(v1242 + 80) = v1244;
            long long v1246 = *(_OWORD *)(v1211 + v1696 + 176);
            long long v1248 = *(_OWORD *)(v1211 + v1696 + 128);
            long long v1247 = *(_OWORD *)(v1211 + v1696 + 144);
            *(_OWORD *)(v1242 + 160) = *(_OWORD *)(v1211 + v1696 + 160);
            *(_OWORD *)(v1242 + 176) = v1246;
            *(_OWORD *)(v1242 + 128) = v1248;
            *(_OWORD *)(v1242 + 144) = v1247;
            long long v1250 = *(_OWORD *)(v1211 + v1696 + 208);
            long long v1249 = *(_OWORD *)(v1211 + v1696 + 224);
            long long v1251 = *(_OWORD *)(v1211 + v1696 + 192);
            *(void *)(v1242 + 240) = *(void *)(v1211 + v1696 + 240);
            *(_OWORD *)(v1242 + 208) = v1250;
            *(_OWORD *)(v1242 + 224) = v1249;
            *(_OWORD *)(v1242 + 192) = v1251;
            long long v1252 = *(_OWORD *)(v1211 + v1696);
            long long v1253 = *(_OWORD *)(v1211 + v1696 + 16);
            long long v1254 = *(_OWORD *)(v1211 + v1696 + 48);
            *(_OWORD *)(v1242 + 32) = *(_OWORD *)(v1211 + v1696 + 32);
            *(_OWORD *)(v1242 + 48) = v1254;
            *(_OWORD *)size_t v1242 = v1252;
            *(_OWORD *)(v1242 + 16) = v1253;
            unint64_t v1255 = (_OWORD *)((v1210 + v1696 + 255) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1256 = (long long *)((v1211 + v1696 + 255) & 0xFFFFFFFFFFFFFFF8);
            long long v1257 = *v1256;
            *(_OWORD *)((char *)v1255 + 9) = *(long long *)((char *)v1256 + 9);
            *unint64_t v1255 = v1257;
            unint64_t v1258 = (v1210 + v1696 + 287) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1259 = (v1211 + v1696 + 287) & 0xFFFFFFFFFFFFFFF8;
            long long v1260 = *(_OWORD *)v1259;
            *(unsigned char *)(v1258 + 16) = *(unsigned char *)(v1259 + 16);
            *(_OWORD *)unint64_t v1258 = v1260;
            v1261 = (void *)((v1210 + v1696 + 311) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1262 = (void *)((v1211 + v1696 + 311) & 0xFFFFFFFFFFFFFFF8);
            void *v1261 = *v1262;
            *(_OWORD *)(((unint64_t)v1261 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1262
                                                                                            + 15) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v307 = v1668;
            size_t v1202 = v1657;
            unint64_t v1200 = v1617;
            uint64_t v1201 = v1721;
            uint64_t v1199 = v1730;
            uint64_t v1085 = v1695;
            if (!v1639) {
              goto LABEL_1320;
            }
LABEL_1326:
            uint64_t v1263 = v1084;
            unint64_t v1264 = ((((v1200
                      + ((((((((((v1633 + v1202 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                          + 19) & 0xFFFFFFFFFFFFFFF8)
                        + 25) & 0xFFFFFFFFFFFFFFF8)
                      + 327) & 0xFFFFFFFFFFFFFFF8)
                    + 15) & 0xFFFFFFFFFFFFFFF8)
                  + 16;
            size_t v1265 = (void *)(((unint64_t)v1085 + v1201 + v1264) & v1570);
            uint64_t v1266 = (const void *)(((unint64_t)v1199 + v1201 + v1264) & v1570);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1658 + 48))(v1266, 1, AssociatedTypeWitness))
            {
              memcpy(v1265, v1266, v1616);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v1658 + 32))(v1265, v1266, AssociatedTypeWitness);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v1658 + 56))(v1265, 0, 1, AssociatedTypeWitness);
            }
            v1267 = (char *)(((unint64_t)v1265 + v1600) & v1689);
            unint64_t v1268 = (char *)(((unint64_t)v1266 + v1600) & v1689);
            if (v1623 == v1630)
            {
              int v1269 = (*(uint64_t (**)(unint64_t))(v1641 + 48))(((unint64_t)v1266 + v1600) & v1689);
              unint64_t v301 = v1701;
            }
            else
            {
              v1270 = (uint64_t *)((unint64_t)&v1268[v1646] & 0xFFFFFFFFFFFFFFF8);
              unint64_t v301 = v1701;
              if (v1608 <= 0x7FFFFFFE)
              {
                uint64_t v1271 = *v1270;
                if ((unint64_t)*v1270 >= 0xFFFFFFFF) {
                  LODWORD(v1271) = -1;
                }
                if ((v1271 + 1) >= 2) {
                  goto LABEL_1338;
                }
                goto LABEL_1340;
              }
              int v1269 = (*(uint64_t (**)(unint64_t, void, uint64_t))(v1637 + 48))(((unint64_t)v1270 + v1635) & v1263, v1604, v1636);
            }
            if (v1269)
            {
LABEL_1338:
              memcpy(v1267, v1268, v1697);
LABEL_1341:
              *(void *)&v1267[v1697] = *(void *)&v1268[v1697];
              char v1277 = (void *)((unint64_t)&v1267[v1697 + 15] & 0xFFFFFFFFFFFFFFF8);
              v1278 = (void *)((unint64_t)&v1268[v1697 + 15] & 0xFFFFFFFFFFFFFFF8);
              void *v1277 = *v1278;
              *(void *)(((unint64_t)v1277 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v1278
                                                                                              + 15) & 0xFFFFFFFFFFFFFFF8);
              char v1017 = 1;
              unint64_t v1053 = v1609;
              char v1016 = 1;
LABEL_1403:
              v86[v1053] = v1017;
              v86[v301] = v1016;
              if (v307 > 3)
              {
LABEL_1404:
                v86[v307] = 27;
                return v86;
              }
              unsigned int v1564 = ((1 << (8 * v307)) + 5) >> (8 * v307);
              if (v1564 <= 0xFFD6)
              {
                if (v1564 > 0xD6)
                {
                  *(_WORD *)&v86[v307] = 27;
                  return v86;
                }
                goto LABEL_1404;
              }
              int v555 = 27;
LABEL_1409:
              *(_DWORD *)&v86[v307] = v555;
              return v86;
            }
            v1270 = (uint64_t *)((unint64_t)&v1268[v1646] & 0xFFFFFFFFFFFFFFF8);
LABEL_1340:
            (*(void (**)(char *, char *, uint64_t))(v1641 + 32))(v1267, v1268, v1640);
            size_t v1272 = (void *)((unint64_t)&v1267[v1646] & 0xFFFFFFFFFFFFFFF8);
            *size_t v1272 = *v1270;
            unint64_t v1273 = ((unint64_t)v1272 + v1635) & v1263;
            unint64_t v1274 = ((unint64_t)v1270 + v1635) & v1263;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v1637 + 32))(v1273, v1274, v1636);
            unint64_t v1275 = v1631 + v1273;
            unint64_t v301 = v1701;
            v1275 &= 0xFFFFFFFFFFFFFFF8;
            v1276 = (void *)((v1631 + v1274) & 0xFFFFFFFFFFFFFFF8);
            *(void *)unint64_t v1275 = *v1276;
            *(_OWORD *)((v1275 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1276 + 15) & 0xFFFFFFFFFFFFFFF8);
            goto LABEL_1341;
          case 2u:
            uint64_t v1009 = v300;
            (*(void (**)(_OWORD *))(v1705 + 32))(a1);
            int v1010 = (void *)(((unint64_t)a1 + v1597) & v1570);
            v1011 = (const void *)((unint64_t)&a2[v1597] & v1570);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1658 + 48))(v1011, 1, AssociatedTypeWitness))
            {
              memcpy(v1010, v1011, v1616);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v1658 + 32))(v1010, v1011, AssociatedTypeWitness);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v1658 + 56))(v1010, 0, 1, AssociatedTypeWitness);
            }
            unint64_t v1069 = (char *)(((unint64_t)v1010 + v1600) & v1689);
            unint64_t v1070 = (char *)(((unint64_t)v1011 + v1600) & v1689);
            if (v1623 == v1630)
            {
              int v1071 = (*(uint64_t (**)(unint64_t))(v1641 + 48))(((unint64_t)v1011 + v1600) & v1689);
              unint64_t v301 = v1701;
            }
            else
            {
              v1072 = (uint64_t *)((unint64_t)&v1070[v1646] & 0xFFFFFFFFFFFFFFF8);
              unint64_t v301 = v1701;
              if (v1608 <= 0x7FFFFFFE)
              {
                uint64_t v1073 = *v1072;
                if ((unint64_t)*v1072 >= 0xFFFFFFFF) {
                  LODWORD(v1073) = -1;
                }
                if ((v1073 + 1) >= 2) {
                  goto LABEL_1259;
                }
                goto LABEL_1261;
              }
              int v1071 = (*(uint64_t (**)(unint64_t, void, uint64_t))(v1637 + 48))(((unint64_t)v1072 + v1635) & v1009, v1604, v1636);
            }
            if (v1071)
            {
LABEL_1259:
              memcpy(v1069, v1070, v1697);
              goto LABEL_1262;
            }
            v1072 = (uint64_t *)((unint64_t)&v1070[v1646] & 0xFFFFFFFFFFFFFFF8);
LABEL_1261:
            (*(void (**)(char *, char *, uint64_t))(v1641 + 32))(v1069, v1070, v1640);
            unint64_t v1096 = (void *)((unint64_t)&v1069[v1646] & 0xFFFFFFFFFFFFFFF8);
            void *v1096 = *v1072;
            unint64_t v1097 = ((unint64_t)v1096 + v1635) & v1009;
            unint64_t v1098 = ((unint64_t)v1072 + v1635) & v1009;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v1637 + 32))(v1097, v1098, v1636);
            unint64_t v1099 = v1631 + v1097;
            unint64_t v301 = v1701;
            v1099 &= 0xFFFFFFFFFFFFFFF8;
            long long v1100 = (void *)((v1631 + v1098) & 0xFFFFFFFFFFFFFFF8);
            *(void *)unint64_t v1099 = *v1100;
            *(_OWORD *)((v1099 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1100 + 15) & 0xFFFFFFFFFFFFFFF8);
LABEL_1262:
            long long v1101 = &v1069[v1697];
            *long long v1101 = v1070[v1697];
            *((void *)v1101 + 1) = *(void *)&v1070[v1697 + 8];
            char v1016 = 1;
            char v1017 = 2;
            unint64_t v1053 = v1609;
            goto LABEL_1403;
          case 3u:
            uint64_t v1582 = v85;
            size_t v1590 = v36;
            size_t v1575 = v38;
            uint64_t v1012 = v298;
            unint64_t v1718 = *(void (**)(void *, const void *, uint64_t))(v1705 + 32);
            ((void (*)(_OWORD *))v1718)(a1);
            unint64_t v1725 = (void *)(((unint64_t)a1 + v1601) & v299);
            unint64_t v1013 = (const void *)((unint64_t)&a2[v1601] & v299);
            unint64_t v1731 = v1013;
            if (v1621 == v1629)
            {
              int v1014 = (*(uint64_t (**)(void))(v1705 + 48))();
              uint64_t v1015 = v1012;
            }
            else
            {
              unint64_t v1061 = ((unint64_t)v1013 + v1647) & v1692;
              unint64_t v1062 = (v1619 + v1061) & v1664;
              uint64_t v1015 = v1012;
              if (v1634 != v1629)
              {
                size_t v1087 = v1062 + v1590;
                uint64_t v1088 = (void *)(((unint64_t)a1 + v1601) & v299);
                if ((v1606 & 0x80000000) != 0)
                {
                  uint64_t v1127 = (v1655 + ((v1699 + v1087) & v1012)) & v1710;
                  if (v1639 <= 0x7FFFFFFD)
                  {
                    unint64_t v1568 = *(void *)(((v1603 + ((v1651 + v1127) & v1710)) & 0xFFFFFFFFFFFFFFF8) + 8);
                    if (v1568 >= 0xFFFFFFFF) {
                      LODWORD(v1568) = -1;
                    }
                    size_t v1118 = v1575;
                    if ((v1568 + 1) >= 2) {
                      goto LABEL_1345;
                    }
                    goto LABEL_1348;
                  }
                  int v1014 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v1653 + 48))(v1127, v1639, v1652);
                }
                else
                {
                  unint64_t v1089 = *(void *)(v1087 + 8);
                  if (v1089 >= 0xFFFFFFFF) {
                    LODWORD(v1089) = -1;
                  }
                  int v1014 = v1089 + 1;
                }
                size_t v1118 = v1575;
                goto LABEL_1344;
              }
              if (v1624 == v1634)
              {
                int v1014 = (*(uint64_t (**)(unint64_t))(v1643 + 48))((v1619 + v1061) & v1664);
              }
              else
              {
                long long v1116 = (unint64_t *)((v1666 + v1062) & 0xFFFFFFFFFFFFFFF8);
                if (v1618 <= 0x7FFFFFFE)
                {
                  unint64_t v1117 = *v1116;
                  if (v1117 >= 0xFFFFFFFF) {
                    LODWORD(v1117) = -1;
                  }
                  size_t v1118 = v1575;
                  uint64_t v1088 = (void *)(((unint64_t)a1 + v1601) & v299);
                  if ((v1117 + 1) >= 2) {
                    goto LABEL_1345;
                  }
                  goto LABEL_1348;
                }
                int v1014 = (*(uint64_t (**)(unint64_t))(v1645 + 48))(((unint64_t)v1116 + v1644) & v1582);
              }
            }
            size_t v1118 = v1575;
            uint64_t v1088 = (void *)(((unint64_t)a1 + v1601) & v299);
LABEL_1344:
            if (v1014)
            {
LABEL_1345:
              unint64_t v1279 = v1731;
              memcpy(v1088, v1731, v1118);
              unint64_t v1280 = v1617;
              unint64_t v1053 = v1609;
              size_t v1281 = __n;
              unint64_t v301 = v1701;
LABEL_1346:
              size_t v1282 = v1281;
LABEL_1352:
              unint64_t v1344 = ((((v1280
                        + ((((((((((v1633 + v1282 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                            + 19) & 0xFFFFFFFFFFFFFFF8)
                          + 25) & 0xFFFFFFFFFFFFFFF8)
                        + 327) & 0xFFFFFFFFFFFFFFF8)
                      + 15) & 0xFFFFFFFFFFFFFFF8)
                    + 16;
              unint64_t v1345 = (_OWORD *)(((unint64_t)v1088 + v1344) & 0xFFFFFFFFFFFFFFF8);
              unint64_t v1346 = (_OWORD *)(((unint64_t)v1279 + v1344) & 0xFFFFFFFFFFFFFFF8);
              _OWORD *v1345 = *v1346;
              *(void *)(((unint64_t)v1345 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v1346
                                                                                              + 23) & 0xFFFFFFFFFFFFFFF8);
              char v1016 = 1;
              goto LABEL_1401;
            }
            unint64_t v1061 = ((unint64_t)v1731 + v1647) & v1692;
            unint64_t v1062 = (v1619 + v1061) & v1664;
LABEL_1348:
            v1718(v1088, v1731, v1660);
            unint64_t v1283 = ((unint64_t)v1088 + v1647) & v1692;
            v1718((void *)v1283, (const void *)v1061, v1660);
            unint64_t v1284 = (v1619 + v1283) & v1664;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v1643 + 32))(v1284, v1062, v1642);
            unint64_t v1285 = (void *)((v1666 + v1284) & 0xFFFFFFFFFFFFFFF8);
            v1286 = (void *)((v1666 + v1062) & 0xFFFFFFFFFFFFFFF8);
            *unint64_t v1285 = *v1286;
            unint64_t v1287 = ((unint64_t)v1285 + v1644) & v1582;
            unint64_t v1288 = ((unint64_t)v1286 + v1644) & v1582;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v1645 + 32))(v1287, v1288, v1638);
            unint64_t v1289 = (void *)((v1632 + v1287) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v1290 = (void *)((v1632 + v1288) & 0xFFFFFFFFFFFFFFF8);
            *unint64_t v1289 = *v1290;
            *(_OWORD *)(((unint64_t)v1289 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1290
                                                                                            + 15) & 0xFFFFFFFFFFFFFFF8);
            *(_OWORD *)(v1284 + v1590) = *(_OWORD *)(v1062 + v1590);
            size_t v1291 = (v1699 + v1284 + v1590) & v1015;
            size_t v1292 = (v1699 + v1062 + v1590) & v1015;
            *(unsigned char *)size_t v1291 = *(unsigned char *)v1292;
            uint64_t v1293 = v1291 | 4;
            int v1294 = *(_DWORD *)(v1292 | 4);
            *(unsigned char *)(v1293 + 4) = *(unsigned char *)((v1292 | 4) + 4);
            *(_DWORD *)uint64_t v1293 = v1294;
            *(_WORD *)(v1291 + 10) = *(_WORD *)(v1292 + 0xA);
            uint64_t v1295 = *(void (**)(size_t, size_t, uint64_t))(v1653 + 32);
            v1295((v1655 + v1291) & v1710, (v1655 + v1292) & v1710, v1652);
            size_t v1296 = (v1651 + ((v1655 + v1291) & v1710)) & v1710;
            size_t v1297 = (v1651 + ((v1655 + v1292) & v1710)) & v1710;
            v1295(v1296, v1297, v1652);
            size_t v1298 = (unsigned char *)(v1296 + v1657);
            *size_t v1298 = *(unsigned char *)(v1297 + v1657);
            v1298[1] = *(unsigned char *)(v1297 + v1657 + 1);
            v1298[2] = *(unsigned char *)(v1297 + v1657 + 2);
            v1298[3] = *(unsigned char *)(v1297 + v1657 + 3);
            v1298[4] = *(unsigned char *)(v1297 + v1657 + 4);
            unint64_t v1299 = (v1296 + v1657 + 12) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1300 = (v1297 + v1657 + 12) & 0xFFFFFFFFFFFFFFF8;
            *(_OWORD *)unint64_t v1299 = *(_OWORD *)v1300;
            *(unsigned char *)(v1299 + 16) = *(unsigned char *)(v1300 + 16);
            *(unsigned char *)(v1299 + 17) = *(unsigned char *)(v1300 + 17);
            *(unsigned char *)(v1299 + 18) = *(unsigned char *)(v1300 + 18);
            *(unsigned char *)(v1299 + 19) = *(unsigned char *)(v1300 + 19);
            unint64_t v1301 = (v1299 + 27) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1302 = (v1300 + 27) & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v1301 = *(void *)v1302;
            *(unsigned char *)(v1301 + 8) = *(unsigned char *)(v1302 + 8);
            *(unsigned char *)(v1301 + 9) = *(unsigned char *)(v1302 + 9);
            *(unsigned char *)(v1301 + 10) = *(unsigned char *)(v1302 + 10);
            *(unsigned char *)(v1301 + 11) = *(unsigned char *)(v1302 + 11);
            *(unsigned char *)(v1301 + 12) = *(unsigned char *)(v1302 + 12);
            unint64_t v1303 = (void *)((v1300 + 47) & 0xFFFFFFFFFFFFFFF8);
            size_t v1304 = (void *)((v1299 + 47) & 0xFFFFFFFFFFFFFFF8);
            *size_t v1304 = *v1303;
            unint64_t v1305 = ((unint64_t)v1304 + 15) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1306 = ((unint64_t)v1303 + 15) & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v1305 = *(void *)v1306;
            *(unsigned char *)(v1305 + 8) = *(unsigned char *)(v1306 + 8);
            *(unsigned char *)(v1305 + 9) = *(unsigned char *)(v1306 + 9);
            unint64_t v1307 = (void *)((v1649 + v1305) & v1710);
            unint64_t v1308 = (const void *)((v1649 + v1306) & v1710);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1653 + 48))(v1308, 1, v1652))
            {
              memcpy(v1307, v1308, __n);
            }
            else
            {
              v1295((size_t)v1307, (size_t)v1308, v1652);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v1653 + 56))(v1307, 0, 1, v1652);
            }
            v1309 = (void *)(((unint64_t)v1307 + v1650) & 0xFFFFFFFFFFFFFFF8);
            v1310 = (void *)(((unint64_t)v1308 + v1650) & 0xFFFFFFFFFFFFFFF8);
            void *v1309 = *v1310;
            unint64_t v1311 = ((unint64_t)v1309 + 15) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1312 = ((unint64_t)v1310 + 15) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v1313 = *(void *)v1312;
            *(unsigned char *)(v1311 + 8) = *(unsigned char *)(v1312 + 8);
            *(void *)unint64_t v1311 = v1313;
            uint64_t v1314 = (void *)(((unint64_t)v1309 + 31) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v1315 = (void *)(((unint64_t)v1310 + 31) & 0xFFFFFFFFFFFFFFF8);
            void *v1314 = *v1315;
            int v1316 = (_OWORD *)(((unint64_t)v1314 + 15) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v1317 = (_OWORD *)(((unint64_t)v1315 + 15) & 0xFFFFFFFFFFFFFFF8);
            _OWORD *v1316 = *v1317;
            unint64_t v1318 = ((unint64_t)v1316 + 19) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1319 = ((unint64_t)v1317 + 19) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v1320 = *(void *)v1319;
            *(unsigned char *)(v1318 + 8) = *(unsigned char *)(v1319 + 8);
            *(void *)unint64_t v1318 = v1320;
            *(unsigned char *)(v1318 + 9) = *(unsigned char *)(v1319 + 9);
            unint64_t v1321 = (v1318 + 13) & 0xFFFFFFFFFFFFFFFCLL;
            unint64_t v1322 = (v1319 + 13) & 0xFFFFFFFFFFFFFFFCLL;
            LODWORD(v1313) = *(_DWORD *)v1322;
            *(unsigned char *)(v1321 + 4) = *(unsigned char *)(v1322 + 4);
            *(_DWORD *)unint64_t v1321 = v1313;
            *(_OWORD *)((v1318 + 25) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v1319 + 25) & 0xFFFFFFFFFFFFFFF8);
            size_t v1323 = v1291 + v1696;
            long long v1324 = *(_OWORD *)(v1292 + v1696 + 112);
            long long v1326 = *(_OWORD *)(v1292 + v1696 + 64);
            long long v1325 = *(_OWORD *)(v1292 + v1696 + 80);
            *(_OWORD *)(v1323 + 96) = *(_OWORD *)(v1292 + v1696 + 96);
            *(_OWORD *)(v1323 + 112) = v1324;
            *(_OWORD *)(v1323 + 64) = v1326;
            *(_OWORD *)(v1323 + 80) = v1325;
            long long v1327 = *(_OWORD *)(v1292 + v1696 + 176);
            long long v1329 = *(_OWORD *)(v1292 + v1696 + 128);
            long long v1328 = *(_OWORD *)(v1292 + v1696 + 144);
            *(_OWORD *)(v1323 + 160) = *(_OWORD *)(v1292 + v1696 + 160);
            *(_OWORD *)(v1323 + 176) = v1327;
            *(_OWORD *)(v1323 + 128) = v1329;
            *(_OWORD *)(v1323 + 144) = v1328;
            long long v1331 = *(_OWORD *)(v1292 + v1696 + 208);
            long long v1330 = *(_OWORD *)(v1292 + v1696 + 224);
            long long v1332 = *(_OWORD *)(v1292 + v1696 + 192);
            *(void *)(v1323 + 240) = *(void *)(v1292 + v1696 + 240);
            *(_OWORD *)(v1323 + 208) = v1331;
            *(_OWORD *)(v1323 + 224) = v1330;
            *(_OWORD *)(v1323 + 192) = v1332;
            long long v1333 = *(_OWORD *)(v1292 + v1696);
            long long v1334 = *(_OWORD *)(v1292 + v1696 + 16);
            long long v1335 = *(_OWORD *)(v1292 + v1696 + 48);
            *(_OWORD *)(v1323 + 32) = *(_OWORD *)(v1292 + v1696 + 32);
            *(_OWORD *)(v1323 + 48) = v1335;
            *(_OWORD *)size_t v1323 = v1333;
            *(_OWORD *)(v1323 + 16) = v1334;
            unint64_t v1336 = (_OWORD *)((v1291 + v1696 + 255) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1337 = (long long *)((v1292 + v1696 + 255) & 0xFFFFFFFFFFFFFFF8);
            long long v1338 = *v1337;
            *(_OWORD *)((char *)v1336 + 9) = *(long long *)((char *)v1337 + 9);
            *unint64_t v1336 = v1338;
            unint64_t v1339 = (v1291 + v1696 + 287) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1340 = (v1292 + v1696 + 287) & 0xFFFFFFFFFFFFFFF8;
            long long v1341 = *(_OWORD *)v1340;
            *(unsigned char *)(v1339 + 16) = *(unsigned char *)(v1340 + 16);
            *(_OWORD *)unint64_t v1339 = v1341;
            unint64_t v1342 = (void *)((v1291 + v1696 + 311) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1343 = (void *)((v1292 + v1696 + 311) & 0xFFFFFFFFFFFFFFF8);
            *unint64_t v1342 = *v1343;
            *(_OWORD *)(((unint64_t)v1342 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1343
                                                                                            + 15) & 0xFFFFFFFFFFFFFFF8);
            size_t v1281 = __n;
            size_t v1282 = v1657;
            unint64_t v301 = v1701;
            unint64_t v1280 = v1617;
            unint64_t v1053 = v1609;
            uint64_t v1088 = v1725;
            unint64_t v1279 = v1731;
            if (v1639) {
              goto LABEL_1352;
            }
            goto LABEL_1346;
          case 4u:
            (*(void (**)(_OWORD *, unsigned __int8 *, uint64_t))(v1705 + 32))(a1, a2, v1660);
            char v1016 = 1;
            char v1017 = 4;
            goto LABEL_1230;
          case 5u:
            (*(void (**)(_OWORD *, unsigned __int8 *, uint64_t))(v1705 + 32))(a1, a2, v1660);
            char v1016 = 1;
            char v1017 = 5;
            goto LABEL_1230;
          case 6u:
            (*(void (**)(_OWORD *))(v1705 + 32))(a1);
            uint64_t v1018 = (void *)(((unint64_t)a1 + v1596) & v1002);
            long long v1019 = (const void *)((unint64_t)&a2[v1596] & v1002);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v55 + 48))(v1019, 1, v1673))
            {
              memcpy(v1018, v1019, v1594);
              char v1016 = 1;
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v55 + 32))(v1018, v1019, v1673);
              char v1016 = 1;
              (*(void (**)(void *, void, uint64_t, uint64_t))(v55 + 56))(v1018, 0, 1, v1673);
            }
            char v1017 = 6;
            goto LABEL_1230;
          case 7u:
            (*(void (**)(_OWORD *, unsigned __int8 *, uint64_t))(v1705 + 32))(a1, a2, v1660);
            char v1016 = 1;
            char v1017 = 7;
LABEL_1230:
            unint64_t v1053 = v1609;
            unint64_t v301 = v1701;
            goto LABEL_1403;
          default:
            uint64_t v1580 = v85;
            size_t v1588 = v36;
            size_t v1573 = v38;
            uint64_t v1003 = v298;
            v1716 = *(void (**)(void *, const void *, uint64_t))(v1705 + 32);
            ((void (*)(_OWORD *))v1716)(a1);
            unint64_t v1724 = (void *)(((unint64_t)a1 + v1601) & v299);
            uint64_t v1004 = (const void *)((unint64_t)&a2[v1601] & v299);
            unint64_t v1729 = v1004;
            if (v1621 == v1629)
            {
              int v1005 = (*(uint64_t (**)(void))(v1705 + 48))();
              uint64_t v1006 = v1003;
LABEL_1306:
              size_t v1112 = v1573;
              unint64_t v1081 = (void *)(((unint64_t)a1 + v1601) & v299);
              goto LABEL_1307;
            }
            unint64_t v1057 = ((unint64_t)v1004 + v1647) & v1692;
            unint64_t v1058 = (v1619 + v1057) & v1664;
            uint64_t v1006 = v1003;
            if (v1634 == v1629)
            {
              if (v1624 == v1634)
              {
                int v1005 = (*(uint64_t (**)(unint64_t))(v1643 + 48))((v1619 + v1057) & v1664);
                goto LABEL_1306;
              }
              uint64_t v1110 = (unint64_t *)((v1666 + v1058) & 0xFFFFFFFFFFFFFFF8);
              if (v1618 > 0x7FFFFFFE)
              {
                int v1005 = (*(uint64_t (**)(unint64_t))(v1645 + 48))(((unint64_t)v1110 + v1644) & v1580);
                goto LABEL_1306;
              }
              unint64_t v1111 = *v1110;
              if (v1111 >= 0xFFFFFFFF) {
                LODWORD(v1111) = -1;
              }
              size_t v1112 = v1573;
              unint64_t v1081 = (void *)(((unint64_t)a1 + v1601) & v299);
              if ((v1111 + 1) >= 2) {
                goto LABEL_1308;
              }
LABEL_1311:
              v1716(v1081, v1729, v1660);
              unint64_t v1135 = ((unint64_t)v1081 + v1647) & v1692;
              v1716((void *)v1135, (const void *)v1057, v1660);
              unint64_t v1136 = (v1619 + v1135) & v1664;
              (*(void (**)(unint64_t, unint64_t, uint64_t))(v1643 + 32))(v1136, v1058, v1642);
              long long v1137 = (void *)((v1666 + v1136) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v1138 = (void *)((v1666 + v1058) & 0xFFFFFFFFFFFFFFF8);
              *long long v1137 = *v1138;
              unint64_t v1139 = ((unint64_t)v1137 + v1644) & v1580;
              unint64_t v1140 = ((unint64_t)v1138 + v1644) & v1580;
              (*(void (**)(unint64_t, unint64_t, uint64_t))(v1645 + 32))(v1139, v1140, v1638);
              v1141 = (void *)((v1632 + v1139) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v1142 = (void *)((v1632 + v1140) & 0xFFFFFFFFFFFFFFF8);
              void *v1141 = *v1142;
              *(_OWORD *)(((unint64_t)v1141 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1142
                                                                                              + 15) & 0xFFFFFFFFFFFFFFF8);
              *(_OWORD *)(v1136 + v1588) = *(_OWORD *)(v1058 + v1588);
              size_t v1143 = (v1699 + v1136 + v1588) & v1006;
              size_t v1144 = (v1699 + v1058 + v1588) & v1006;
              *(unsigned char *)size_t v1143 = *(unsigned char *)v1144;
              uint64_t v1145 = v1143 | 4;
              int v1146 = *(_DWORD *)(v1144 | 4);
              *(unsigned char *)(v1145 + 4) = *(unsigned char *)((v1144 | 4) + 4);
              *(_DWORD *)uint64_t v1145 = v1146;
              *(_WORD *)(v1143 + 10) = *(_WORD *)(v1144 + 0xA);
              unint64_t v1147 = *(void (**)(size_t, size_t, uint64_t))(v1653 + 32);
              v1147((v1655 + v1143) & v1710, (v1655 + v1144) & v1710, v1652);
              size_t v1148 = (v1651 + ((v1655 + v1143) & v1710)) & v1710;
              size_t v1149 = (v1651 + ((v1655 + v1144) & v1710)) & v1710;
              v1147(v1148, v1149, v1652);
              v1150 = (unsigned char *)(v1148 + v1657);
              unsigned char *v1150 = *(unsigned char *)(v1149 + v1657);
              v1150[1] = *(unsigned char *)(v1149 + v1657 + 1);
              v1150[2] = *(unsigned char *)(v1149 + v1657 + 2);
              v1150[3] = *(unsigned char *)(v1149 + v1657 + 3);
              v1150[4] = *(unsigned char *)(v1149 + v1657 + 4);
              unint64_t v1151 = (v1148 + v1657 + 12) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v1152 = (v1149 + v1657 + 12) & 0xFFFFFFFFFFFFFFF8;
              *(_OWORD *)unint64_t v1151 = *(_OWORD *)v1152;
              *(unsigned char *)(v1151 + 16) = *(unsigned char *)(v1152 + 16);
              *(unsigned char *)(v1151 + 17) = *(unsigned char *)(v1152 + 17);
              *(unsigned char *)(v1151 + 18) = *(unsigned char *)(v1152 + 18);
              *(unsigned char *)(v1151 + 19) = *(unsigned char *)(v1152 + 19);
              unint64_t v1153 = (v1151 + 27) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v1154 = (v1152 + 27) & 0xFFFFFFFFFFFFFFF8;
              *(void *)unint64_t v1153 = *(void *)v1154;
              *(unsigned char *)(v1153 + 8) = *(unsigned char *)(v1154 + 8);
              *(unsigned char *)(v1153 + 9) = *(unsigned char *)(v1154 + 9);
              *(unsigned char *)(v1153 + 10) = *(unsigned char *)(v1154 + 10);
              *(unsigned char *)(v1153 + 11) = *(unsigned char *)(v1154 + 11);
              *(unsigned char *)(v1153 + 12) = *(unsigned char *)(v1154 + 12);
              unsigned int v1155 = (void *)((v1152 + 47) & 0xFFFFFFFFFFFFFFF8);
              v1156 = (void *)((v1151 + 47) & 0xFFFFFFFFFFFFFFF8);
              void *v1156 = *v1155;
              unint64_t v1157 = ((unint64_t)v1156 + 15) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v1158 = ((unint64_t)v1155 + 15) & 0xFFFFFFFFFFFFFFF8;
              *(void *)unint64_t v1157 = *(void *)v1158;
              *(unsigned char *)(v1157 + 8) = *(unsigned char *)(v1158 + 8);
              *(unsigned char *)(v1157 + 9) = *(unsigned char *)(v1158 + 9);
              uint64_t v1159 = (void *)((v1649 + v1157) & v1710);
              unint64_t v1160 = (const void *)((v1649 + v1158) & v1710);
              if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1653 + 48))(v1160, 1, v1652))
              {
                memcpy(v1159, v1160, __n);
              }
              else
              {
                v1147((size_t)v1159, (size_t)v1160, v1652);
                (*(void (**)(void *, void, uint64_t, uint64_t))(v1653 + 56))(v1159, 0, 1, v1652);
              }
              uint64_t v1161 = (void *)(((unint64_t)v1159 + v1650) & 0xFFFFFFFFFFFFFFF8);
              v1162 = (void *)(((unint64_t)v1160 + v1650) & 0xFFFFFFFFFFFFFFF8);
              *uint64_t v1161 = *v1162;
              unint64_t v1163 = ((unint64_t)v1161 + 15) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v1164 = ((unint64_t)v1162 + 15) & 0xFFFFFFFFFFFFFFF8;
              uint64_t v1165 = *(void *)v1164;
              *(unsigned char *)(v1163 + 8) = *(unsigned char *)(v1164 + 8);
              *(void *)unint64_t v1163 = v1165;
              unint64_t v1166 = (void *)(((unint64_t)v1161 + 31) & 0xFFFFFFFFFFFFFFF8);
              size_t v1167 = (void *)(((unint64_t)v1162 + 31) & 0xFFFFFFFFFFFFFFF8);
              *unint64_t v1166 = *v1167;
              unint64_t v1168 = (_OWORD *)(((unint64_t)v1166 + 15) & 0xFFFFFFFFFFFFFFF8);
              unint64_t v1169 = (_OWORD *)(((unint64_t)v1167 + 15) & 0xFFFFFFFFFFFFFFF8);
              *unint64_t v1168 = *v1169;
              unint64_t v1170 = ((unint64_t)v1168 + 19) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v1171 = ((unint64_t)v1169 + 19) & 0xFFFFFFFFFFFFFFF8;
              uint64_t v1172 = *(void *)v1171;
              *(unsigned char *)(v1170 + 8) = *(unsigned char *)(v1171 + 8);
              *(void *)unint64_t v1170 = v1172;
              *(unsigned char *)(v1170 + 9) = *(unsigned char *)(v1171 + 9);
              unint64_t v1173 = (v1170 + 13) & 0xFFFFFFFFFFFFFFFCLL;
              unint64_t v1174 = (v1171 + 13) & 0xFFFFFFFFFFFFFFFCLL;
              LODWORD(v1165) = *(_DWORD *)v1174;
              *(unsigned char *)(v1173 + 4) = *(unsigned char *)(v1174 + 4);
              *(_DWORD *)unint64_t v1173 = v1165;
              *(_OWORD *)((v1170 + 25) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v1171 + 25) & 0xFFFFFFFFFFFFFFF8);
              size_t v1175 = v1143 + v1696;
              long long v1176 = *(_OWORD *)(v1144 + v1696 + 112);
              long long v1178 = *(_OWORD *)(v1144 + v1696 + 64);
              long long v1177 = *(_OWORD *)(v1144 + v1696 + 80);
              *(_OWORD *)(v1175 + 96) = *(_OWORD *)(v1144 + v1696 + 96);
              *(_OWORD *)(v1175 + 112) = v1176;
              *(_OWORD *)(v1175 + 64) = v1178;
              *(_OWORD *)(v1175 + 80) = v1177;
              long long v1179 = *(_OWORD *)(v1144 + v1696 + 176);
              long long v1181 = *(_OWORD *)(v1144 + v1696 + 128);
              long long v1180 = *(_OWORD *)(v1144 + v1696 + 144);
              *(_OWORD *)(v1175 + 160) = *(_OWORD *)(v1144 + v1696 + 160);
              *(_OWORD *)(v1175 + 176) = v1179;
              *(_OWORD *)(v1175 + 128) = v1181;
              *(_OWORD *)(v1175 + 144) = v1180;
              long long v1183 = *(_OWORD *)(v1144 + v1696 + 208);
              long long v1182 = *(_OWORD *)(v1144 + v1696 + 224);
              long long v1184 = *(_OWORD *)(v1144 + v1696 + 192);
              *(void *)(v1175 + 240) = *(void *)(v1144 + v1696 + 240);
              *(_OWORD *)(v1175 + 208) = v1183;
              *(_OWORD *)(v1175 + 224) = v1182;
              *(_OWORD *)(v1175 + 192) = v1184;
              long long v1185 = *(_OWORD *)(v1144 + v1696);
              long long v1186 = *(_OWORD *)(v1144 + v1696 + 16);
              long long v1187 = *(_OWORD *)(v1144 + v1696 + 48);
              *(_OWORD *)(v1175 + 32) = *(_OWORD *)(v1144 + v1696 + 32);
              *(_OWORD *)(v1175 + 48) = v1187;
              *(_OWORD *)size_t v1175 = v1185;
              *(_OWORD *)(v1175 + 16) = v1186;
              v1188 = (_OWORD *)((v1143 + v1696 + 255) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v1189 = (long long *)((v1144 + v1696 + 255) & 0xFFFFFFFFFFFFFFF8);
              long long v1190 = *v1189;
              *(_OWORD *)((char *)v1188 + 9) = *(long long *)((char *)v1189 + 9);
              _OWORD *v1188 = v1190;
              unint64_t v1191 = (v1143 + v1696 + 287) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v1192 = (v1144 + v1696 + 287) & 0xFFFFFFFFFFFFFFF8;
              long long v1193 = *(_OWORD *)v1192;
              *(unsigned char *)(v1191 + 16) = *(unsigned char *)(v1192 + 16);
              *(_OWORD *)unint64_t v1191 = v1193;
              unint64_t v1194 = (void *)((v1143 + v1696 + 311) & 0xFFFFFFFFFFFFFFF8);
              size_t v1195 = (void *)((v1144 + v1696 + 311) & 0xFFFFFFFFFFFFFFF8);
              *unint64_t v1194 = *v1195;
              *(_OWORD *)(((unint64_t)v1194 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1195
                                                                                              + 15) & 0xFFFFFFFFFFFFFFF8);
              size_t v1133 = __n;
              size_t v1134 = v1657;
              unint64_t v301 = v1701;
              unint64_t v1132 = v1617;
              unint64_t v1053 = v1609;
              unint64_t v1081 = v1724;
              int v1131 = v1729;
              if (!v1639) {
                goto LABEL_1309;
              }
LABEL_1315:
              char v1017 = 0;
              unint64_t v1196 = ((((v1132
                        + ((((((((((v1633 + v1134 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                            + 19) & 0xFFFFFFFFFFFFFFF8)
                          + 25) & 0xFFFFFFFFFFFFFFF8)
                        + 327) & 0xFFFFFFFFFFFFFFF8)
                      + 15) & 0xFFFFFFFFFFFFFFF8)
                    + 16;
              v1197 = (void *)(((unint64_t)v1081 + v1196) & 0xFFFFFFFFFFFFFFF8);
              int v1198 = (void *)(((unint64_t)v1131 + v1196) & 0xFFFFFFFFFFFFFFF8);
              void *v1197 = *v1198;
              *(void *)(((unint64_t)v1197 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v1198
                                                                                              + 15) & 0xFFFFFFFFFFFFFFF8);
              char v1016 = 1;
LABEL_1402:
              uint64_t v307 = v1668;
              goto LABEL_1403;
            }
            size_t v1080 = v1058 + v1588;
            unint64_t v1081 = (void *)(((unint64_t)a1 + v1601) & v299);
            if ((v1606 & 0x80000000) != 0)
            {
              uint64_t v1125 = (v1655 + ((v1699 + v1080) & v1003)) & v1710;
              if (v1639 <= 0x7FFFFFFD)
              {
                unint64_t v1566 = *(void *)(((v1603 + ((v1651 + v1125) & v1710)) & 0xFFFFFFFFFFFFFFF8) + 8);
                if (v1566 >= 0xFFFFFFFF) {
                  LODWORD(v1566) = -1;
                }
                size_t v1112 = v1573;
                if ((v1566 + 1) >= 2) {
                  goto LABEL_1308;
                }
                goto LABEL_1311;
              }
              int v1005 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v1653 + 48))(v1125, v1639, v1652);
            }
            else
            {
              unint64_t v1082 = *(void *)(v1080 + 8);
              if (v1082 >= 0xFFFFFFFF) {
                LODWORD(v1082) = -1;
              }
              int v1005 = v1082 + 1;
            }
            size_t v1112 = v1573;
LABEL_1307:
            if (v1005)
            {
LABEL_1308:
              int v1131 = v1729;
              memcpy(v1081, v1729, v1112);
              unint64_t v1132 = v1617;
              unint64_t v1053 = v1609;
              size_t v1133 = __n;
              unint64_t v301 = v1701;
LABEL_1309:
              size_t v1134 = v1133;
              goto LABEL_1315;
            }
            unint64_t v1057 = ((unint64_t)v1729 + v1647) & v1692;
            unint64_t v1058 = (v1619 + v1057) & v1664;
            goto LABEL_1311;
        }
      }
      unsigned int v633 = a2[v53];
      unsigned int v634 = v633 - 8;
      uint64_t v86 = a1;
      if (v633 >= 8)
      {
        if (v53 <= 3) {
          uint64_t v635 = v53;
        }
        else {
          uint64_t v635 = 4;
        }
        switch(v635)
        {
          case 1:
            int v636 = *a2;
            goto LABEL_1158;
          case 2:
            int v636 = *(unsigned __int16 *)a2;
            goto LABEL_1158;
          case 3:
            int v636 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_1158;
          case 4:
            int v636 = *(_DWORD *)a2;
LABEL_1158:
            if (v53 < 4) {
              unsigned int v633 = (v636 | (v634 << (8 * v53))) + 8;
            }
            else {
              unsigned int v633 = v636 + 8;
            }
            break;
          default:
            break;
        }
      }
      uint64_t v1020 = ~v47;
      unint64_t v1726 = v53;
      switch(v633)
      {
        case 1u:
          uint64_t v1677 = v300;
          uint64_t v1583 = v85;
          size_t v1591 = v36;
          uint64_t v1031 = v298;
          unint64_t v1702 = v69;
          unint64_t v1032 = *(void (**)(_OWORD *, unsigned __int8 *, uint64_t))(v1658 + 32);
          uint64_t v1033 = v82;
          v1032(a1, a2, AssociatedTypeWitness);
          v1686 = (_OWORD *)(((unint64_t)a1 + v1602) & v1033);
          unint64_t v1034 = (void *)((unint64_t)&a2[v1602] & v1033);
          long long v1733 = v1034;
          if (v1680 == v1622)
          {
            int v1035 = (*(uint64_t (**)(void))(v1658 + 48))();
            uint64_t v1036 = v1031;
            uint64_t v1037 = ~v1679;
            size_t v1038 = v1593;
LABEL_1365:
            if (v1035)
            {
LABEL_1366:
              uint64_t v1413 = v1686;
              v1414 = v1733;
              memcpy(v1686, v1733, v1694);
              uint64_t v1415 = v1628;
              size_t v1416 = __n;
              uint64_t v1417 = v1712;
              goto LABEL_1367;
            }
            unint64_t v1065 = ((unint64_t)v1733 + v1648) & v1570;
            unint64_t v1066 = (v1620 + v1065) & v1037;
LABEL_1369:
            v1032(v1686, (unsigned __int8 *)v1733, AssociatedTypeWitness);
            unint64_t v1419 = ((unint64_t)v1686 + v1648) & v1570;
            v1032((_OWORD *)v1419, (unsigned __int8 *)v1065, AssociatedTypeWitness);
            unint64_t v1420 = (v1620 + v1419) & v1037;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v1641 + 32))(v1420, v1066, v1640);
            unint64_t v1421 = (void *)((v1646 + v1420) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v1422 = (void *)((v1646 + v1066) & 0xFFFFFFFFFFFFFFF8);
            void *v1421 = *v1422;
            unint64_t v1423 = ((unint64_t)v1421 + v1635) & v1677;
            unint64_t v1424 = ((unint64_t)v1422 + v1635) & v1677;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v1637 + 32))(v1423, v1424, v1636);
            int v1425 = (void *)((v1631 + v1423) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v1426 = (void *)((v1631 + v1424) & 0xFFFFFFFFFFFFFFF8);
            *int v1425 = *v1426;
            *(_OWORD *)(((unint64_t)v1425 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1426
                                                                                            + 15) & 0xFFFFFFFFFFFFFFF8);
            *(_OWORD *)(v1420 + v1697) = *(_OWORD *)(v1066 + v1697);
            size_t v1427 = (v1699 + v1420 + v1697) & v1036;
            size_t v1428 = (v1699 + v1066 + v1697) & v1036;
            *(unsigned char *)size_t v1427 = *(unsigned char *)v1428;
            uint64_t v1429 = v1427 | 4;
            int v1430 = *(_DWORD *)(v1428 | 4);
            *(unsigned char *)(v1429 + 4) = *(unsigned char *)((v1428 | 4) + 4);
            *(_DWORD *)uint64_t v1429 = v1430;
            *(_WORD *)(v1427 + 10) = *(_WORD *)(v1428 + 0xA);
            int v1431 = *(void (**)(size_t, size_t, uint64_t))(v1653 + 32);
            v1431((v1655 + v1427) & v1710, (v1655 + v1428) & v1710, v1652);
            size_t v1432 = (v1651 + ((v1655 + v1427) & v1710)) & v1710;
            size_t v1433 = (v1651 + ((v1655 + v1428) & v1710)) & v1710;
            v1431(v1432, v1433, v1652);
            long long v1434 = (unsigned char *)(v1432 + v1657);
            unsigned char *v1434 = *(unsigned char *)(v1433 + v1657);
            v1434[1] = *(unsigned char *)(v1433 + v1657 + 1);
            v1434[2] = *(unsigned char *)(v1433 + v1657 + 2);
            v1434[3] = *(unsigned char *)(v1433 + v1657 + 3);
            v1434[4] = *(unsigned char *)(v1433 + v1657 + 4);
            unint64_t v1435 = (v1432 + v1657 + 12) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1436 = (v1433 + v1657 + 12) & 0xFFFFFFFFFFFFFFF8;
            *(_OWORD *)unint64_t v1435 = *(_OWORD *)v1436;
            *(unsigned char *)(v1435 + 16) = *(unsigned char *)(v1436 + 16);
            *(unsigned char *)(v1435 + 17) = *(unsigned char *)(v1436 + 17);
            *(unsigned char *)(v1435 + 18) = *(unsigned char *)(v1436 + 18);
            *(unsigned char *)(v1435 + 19) = *(unsigned char *)(v1436 + 19);
            unint64_t v1437 = (v1435 + 27) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1438 = (v1436 + 27) & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v1437 = *(void *)v1438;
            *(unsigned char *)(v1437 + 8) = *(unsigned char *)(v1438 + 8);
            *(unsigned char *)(v1437 + 9) = *(unsigned char *)(v1438 + 9);
            *(unsigned char *)(v1437 + 10) = *(unsigned char *)(v1438 + 10);
            *(unsigned char *)(v1437 + 11) = *(unsigned char *)(v1438 + 11);
            *(unsigned char *)(v1437 + 12) = *(unsigned char *)(v1438 + 12);
            long long v1439 = (void *)((v1436 + 47) & 0xFFFFFFFFFFFFFFF8);
            long long v1440 = (void *)((v1435 + 47) & 0xFFFFFFFFFFFFFFF8);
            *long long v1440 = *v1439;
            unint64_t v1441 = ((unint64_t)v1440 + 15) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1442 = ((unint64_t)v1439 + 15) & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v1441 = *(void *)v1442;
            *(unsigned char *)(v1441 + 8) = *(unsigned char *)(v1442 + 8);
            *(unsigned char *)(v1441 + 9) = *(unsigned char *)(v1442 + 9);
            long long v1443 = (void *)((v1649 + v1441) & v1710);
            long long v1444 = (const void *)((v1649 + v1442) & v1710);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1653 + 48))(v1444, 1, v1652))
            {
              memcpy(v1443, v1444, __n);
            }
            else
            {
              v1431((size_t)v1443, (size_t)v1444, v1652);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v1653 + 56))(v1443, 0, 1, v1652);
            }
            uint64_t v1415 = v1628;
            size_t v1038 = v1593;
            uint64_t v1417 = v1712;
            uint64_t v1445 = (void *)(((unint64_t)v1443 + v1650) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v1446 = (void *)(((unint64_t)v1444 + v1650) & 0xFFFFFFFFFFFFFFF8);
            *uint64_t v1445 = *v1446;
            unint64_t v1447 = ((unint64_t)v1445 + 15) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1448 = ((unint64_t)v1446 + 15) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v1449 = *(void *)v1448;
            *(unsigned char *)(v1447 + 8) = *(unsigned char *)(v1448 + 8);
            *(void *)unint64_t v1447 = v1449;
            size_t v1450 = (void *)(((unint64_t)v1445 + 31) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v1451 = (void *)(((unint64_t)v1446 + 31) & 0xFFFFFFFFFFFFFFF8);
            *size_t v1450 = *v1451;
            uint64_t v1452 = (_OWORD *)(((unint64_t)v1450 + 15) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1453 = (_OWORD *)(((unint64_t)v1451 + 15) & 0xFFFFFFFFFFFFFFF8);
            *uint64_t v1452 = *v1453;
            unint64_t v1454 = ((unint64_t)v1452 + 19) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1455 = ((unint64_t)v1453 + 19) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v1456 = *(void *)v1455;
            *(unsigned char *)(v1454 + 8) = *(unsigned char *)(v1455 + 8);
            *(void *)unint64_t v1454 = v1456;
            *(unsigned char *)(v1454 + 9) = *(unsigned char *)(v1455 + 9);
            unint64_t v1457 = (v1454 + 13) & 0xFFFFFFFFFFFFFFFCLL;
            unint64_t v1458 = (v1455 + 13) & 0xFFFFFFFFFFFFFFFCLL;
            LODWORD(v1449) = *(_DWORD *)v1458;
            *(unsigned char *)(v1457 + 4) = *(unsigned char *)(v1458 + 4);
            *(_DWORD *)unint64_t v1457 = v1449;
            *(_OWORD *)((v1454 + 25) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v1455 + 25) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1459 = v1696 + v1427;
            long long v1460 = *(_OWORD *)(v1696 + v1428 + 112);
            long long v1462 = *(_OWORD *)(v1696 + v1428 + 64);
            long long v1461 = *(_OWORD *)(v1696 + v1428 + 80);
            *(_OWORD *)(v1459 + 96) = *(_OWORD *)(v1696 + v1428 + 96);
            *(_OWORD *)(v1459 + 112) = v1460;
            *(_OWORD *)(v1459 + 64) = v1462;
            *(_OWORD *)(v1459 + 80) = v1461;
            long long v1463 = *(_OWORD *)(v1696 + v1428 + 176);
            long long v1465 = *(_OWORD *)(v1696 + v1428 + 128);
            long long v1464 = *(_OWORD *)(v1696 + v1428 + 144);
            *(_OWORD *)(v1459 + 160) = *(_OWORD *)(v1696 + v1428 + 160);
            *(_OWORD *)(v1459 + 176) = v1463;
            *(_OWORD *)(v1459 + 128) = v1465;
            *(_OWORD *)(v1459 + 144) = v1464;
            long long v1467 = *(_OWORD *)(v1696 + v1428 + 208);
            long long v1466 = *(_OWORD *)(v1696 + v1428 + 224);
            long long v1468 = *(_OWORD *)(v1696 + v1428 + 192);
            *(void *)(v1459 + 240) = *(void *)(v1696 + v1428 + 240);
            *(_OWORD *)(v1459 + 208) = v1467;
            *(_OWORD *)(v1459 + 224) = v1466;
            *(_OWORD *)(v1459 + 192) = v1468;
            long long v1469 = *(_OWORD *)(v1696 + v1428);
            long long v1470 = *(_OWORD *)(v1696 + v1428 + 16);
            long long v1471 = *(_OWORD *)(v1696 + v1428 + 48);
            *(_OWORD *)(v1459 + 32) = *(_OWORD *)(v1696 + v1428 + 32);
            *(_OWORD *)(v1459 + 48) = v1471;
            *(_OWORD *)unint64_t v1459 = v1469;
            *(_OWORD *)(v1459 + 16) = v1470;
            uint64_t v1472 = (_OWORD *)((v1696 + v1427 + 255) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v1473 = (long long *)((v1696 + v1428 + 255) & 0xFFFFFFFFFFFFFFF8);
            long long v1474 = *v1473;
            *(_OWORD *)((char *)v1472 + 9) = *(long long *)((char *)v1473 + 9);
            *uint64_t v1472 = v1474;
            unint64_t v1475 = (v1696 + v1427 + 287) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1476 = (v1696 + v1428 + 287) & 0xFFFFFFFFFFFFFFF8;
            long long v1477 = *(_OWORD *)v1476;
            *(unsigned char *)(v1475 + 16) = *(unsigned char *)(v1476 + 16);
            *(_OWORD *)unint64_t v1475 = v1477;
            unint64_t v1478 = (void *)((v1696 + v1427 + 311) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1479 = (void *)((v1696 + v1428 + 311) & 0xFFFFFFFFFFFFFFF8);
            *unint64_t v1478 = *v1479;
            *(_OWORD *)(((unint64_t)v1478 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1479
                                                                                            + 15) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v307 = v1668;
            size_t v1416 = __n;
            size_t v1418 = v1657;
            v1414 = v1733;
            uint64_t v1413 = v1686;
            if (v1639)
            {
LABEL_1373:
              unint64_t v1480 = ((((v1415
                        + ((((((((((v1633 + v1418 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                            + 19) & 0xFFFFFFFFFFFFFFF8)
                          + 25) & 0xFFFFFFFFFFFFFFF8)
                        + 327) & 0xFFFFFFFFFFFFFFF8)
                      + 15) & 0xFFFFFFFFFFFFFFF8)
                    + 16;
              unint64_t v1481 = (void *)(((unint64_t)v1413 + v1417 + v1480) & v1692);
              unint64_t v1482 = (const void *)(((unint64_t)v1414 + v1417 + v1480) & v1692);
              if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1705 + 48))(v1482, 1, v1660))
              {
                memcpy(v1481, v1482, v1038);
              }
              else
              {
                (*(void (**)(void *, const void *, uint64_t))(v1705 + 32))(v1481, v1482, v1660);
                (*(void (**)(void *, void, uint64_t, uint64_t))(v1705 + 56))(v1481, 0, 1, v1660);
              }
              unint64_t v1039 = v1702;
              unint64_t v1483 = (char *)(((unint64_t)v1481 + v1592) & v1664);
              unint64_t v1484 = (char *)(((unint64_t)v1482 + v1592) & v1664);
              if (v1624 == v1634)
              {
                int v1485 = (*(uint64_t (**)(char *))(v1643 + 48))(v1484);
              }
              else
              {
                uint64_t v1486 = v1666;
                v1487 = (uint64_t *)((unint64_t)&v1484[v1666] & 0xFFFFFFFFFFFFFFF8);
                if (v1618 <= 0x7FFFFFFE)
                {
                  uint64_t v1488 = *v1487;
                  if ((unint64_t)*v1487 >= 0xFFFFFFFF) {
                    LODWORD(v1488) = -1;
                  }
                  if ((v1488 + 1) >= 2) {
                    goto LABEL_1385;
                  }
                  goto LABEL_1387;
                }
                int v1485 = (*(uint64_t (**)(unint64_t))(v1645 + 48))(((unint64_t)v1487 + v1644) & v1583);
              }
              uint64_t v1486 = v1666;
              if (v1485)
              {
LABEL_1385:
                size_t v1489 = v1591;
                memcpy(v1483, v1484, v1591);
LABEL_1388:
                char v1016 = 0;
                *(void *)&v1483[v1489] = *(void *)&v1484[v1489];
                uint64_t v1496 = (void *)((unint64_t)&v1483[v1489 + 15] & 0xFFFFFFFFFFFFFFF8);
                unint64_t v1497 = (void *)((unint64_t)&v1484[v1489 + 15] & 0xFFFFFFFFFFFFFFF8);
                *uint64_t v1496 = *v1497;
                *(void *)(((unint64_t)v1496 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v1497
                                                                                                + 15) & 0xFFFFFFFFFFFFFFF8);
                char v1017 = 1;
                goto LABEL_1389;
              }
              v1487 = (uint64_t *)((unint64_t)&v1484[v1666] & 0xFFFFFFFFFFFFFFF8);
LABEL_1387:
              uint64_t v1490 = v1486;
              (*(void (**)(char *, char *, uint64_t))(v1643 + 32))(v1483, v1484, v1642);
              v1491 = (void *)((unint64_t)&v1483[v1490] & 0xFFFFFFFFFFFFFFF8);
              void *v1491 = *v1487;
              unint64_t v1492 = ((unint64_t)v1491 + v1644) & v1583;
              unint64_t v1493 = ((unint64_t)v1487 + v1644) & v1583;
              (*(void (**)(unint64_t, unint64_t, uint64_t))(v1645 + 32))(v1492, v1493, v1638);
              v1494 = (void *)((v1632 + v1492) & 0xFFFFFFFFFFFFFFF8);
              unint64_t v1495 = (void *)((v1632 + v1493) & 0xFFFFFFFFFFFFFFF8);
              void *v1494 = *v1495;
              *(_OWORD *)(((unint64_t)v1494 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1495
                                                                                              + 15) & 0xFFFFFFFFFFFFFFF8);
              size_t v1489 = v1591;
              goto LABEL_1388;
            }
LABEL_1367:
            size_t v1418 = v1416;
            goto LABEL_1373;
          }
          unint64_t v1065 = ((unint64_t)v1034 + v1648) & v1570;
          unint64_t v1066 = (v1620 + v1065) & v1689;
          uint64_t v1036 = v1031;
          size_t v1038 = v1593;
          if (v1630 == v1622)
          {
            if (v1623 == v1630)
            {
              int v1035 = (*(uint64_t (**)(unint64_t))(v1641 + 48))((v1620 + v1065) & v1689);
              uint64_t v1037 = ~v1679;
              goto LABEL_1365;
            }
            unint64_t v1121 = (unint64_t *)((v1646 + v1066) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v1037 = ~v1679;
            if (v1608 > 0x7FFFFFFE)
            {
              int v1035 = (*(uint64_t (**)(unint64_t, void, uint64_t))(v1637 + 48))(((unint64_t)v1121 + v1635) & v1677, v1604, v1636);
              goto LABEL_1365;
            }
            unint64_t v1122 = *v1121;
          }
          else
          {
            size_t v1092 = v1066 + v1697;
            if ((v1607 & 0x80000000) == 0)
            {
              unint64_t v1093 = *(void *)(v1092 + 8);
              if (v1093 >= 0xFFFFFFFF) {
                LODWORD(v1093) = -1;
              }
              int v1035 = v1093 + 1;
              uint64_t v1037 = ~v1679;
              goto LABEL_1365;
            }
            uint64_t v1129 = (v1655 + ((v1699 + v1092) & v1031)) & v1710;
            uint64_t v1037 = ~v1679;
            if (v1639 > 0x7FFFFFFD)
            {
              int v1035 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v1653 + 48))(v1129, v1639, v1652);
              goto LABEL_1365;
            }
            unint64_t v1122 = *(void *)(((v1603 + ((v1651 + v1129) & v1710)) & 0xFFFFFFFFFFFFFFF8) + 8);
          }
          if (v1122 >= 0xFFFFFFFF) {
            LODWORD(v1122) = -1;
          }
          if ((v1122 + 1) >= 2) {
            goto LABEL_1366;
          }
          goto LABEL_1369;
        case 2u:
          unint64_t v1039 = v69;
          uint64_t v1584 = v85;
          size_t v1040 = v36;
          (*(void (**)(_OWORD *, unsigned __int8 *, uint64_t))(v1658 + 32))(a1, a2, AssociatedTypeWitness);
          uint64_t v1041 = (void *)(((unint64_t)a1 + v1627) & v1692);
          uint64_t v1042 = (const void *)((unint64_t)&a2[v1627] & v1692);
          if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1705 + 48))(v1042, 1, v1660))
          {
            memcpy(v1041, v1042, v1593);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v1705 + 32))(v1041, v1042, v1660);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v1705 + 56))(v1041, 0, 1, v1660);
          }
          unint64_t v1074 = (char *)(((unint64_t)v1041 + v1592) & v1664);
          v1075 = (char *)(((unint64_t)v1042 + v1592) & v1664);
          if (v1624 == v1634)
          {
            int v1076 = (*(uint64_t (**)(char *))(v1643 + 48))(v1075);
          }
          else
          {
            unint64_t v1077 = (uint64_t *)((unint64_t)&v1075[v1666] & 0xFFFFFFFFFFFFFFF8);
            if (v1618 <= 0x7FFFFFFE)
            {
              uint64_t v1078 = v1666;
              uint64_t v1079 = *v1077;
              if ((unint64_t)*v1077 >= 0xFFFFFFFF) {
                LODWORD(v1079) = -1;
              }
              if ((v1079 + 1) >= 2) {
                goto LABEL_1265;
              }
              goto LABEL_1267;
            }
            int v1076 = (*(uint64_t (**)(unint64_t))(v1645 + 48))(((unint64_t)v1077 + v1644) & v1584);
          }
          if (v1076)
          {
LABEL_1265:
            size_t v1102 = v1040;
            memcpy(v1074, v1075, v1040);
            goto LABEL_1268;
          }
          uint64_t v1078 = v1666;
          unint64_t v1077 = (uint64_t *)((unint64_t)&v1075[v1666] & 0xFFFFFFFFFFFFFFF8);
LABEL_1267:
          uint64_t v1103 = v1078;
          (*(void (**)(char *, char *, uint64_t))(v1643 + 32))(v1074, v1075, v1642);
          long long v1104 = (void *)((unint64_t)&v1074[v1103] & 0xFFFFFFFFFFFFFFF8);
          *long long v1104 = *v1077;
          unint64_t v1105 = ((unint64_t)v1104 + v1644) & v1584;
          unint64_t v1106 = ((unint64_t)v1077 + v1644) & v1584;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v1645 + 32))(v1105, v1106, v1638);
          long long v1107 = (void *)((v1632 + v1105) & 0xFFFFFFFFFFFFFFF8);
          long long v1108 = (void *)((v1632 + v1106) & 0xFFFFFFFFFFFFFFF8);
          void *v1107 = *v1108;
          *(_OWORD *)(((unint64_t)v1107 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1108 + 15) & 0xFFFFFFFFFFFFFFF8);
          size_t v1102 = v1040;
LABEL_1268:
          char v1016 = 0;
          long long v1109 = &v1074[v1102];
          *long long v1109 = v1075[v1102];
          *((void *)v1109 + 1) = *(void *)&v1075[v1102 + 8];
          char v1017 = 2;
LABEL_1389:
          unint64_t v1053 = v1726;
          unint64_t v301 = v1039;
          goto LABEL_1403;
        case 3u:
          unint64_t v1043 = v69;
          size_t v1044 = v306;
          uint64_t v1678 = v300;
          uint64_t v1045 = v298;
          unint64_t v1046 = *(void (**)(_OWORD *, unsigned __int8 *, uint64_t))(v1658 + 32);
          uint64_t v1047 = v82;
          v1046(a1, a2, AssociatedTypeWitness);
          uint64_t v1720 = (_OWORD *)(((unint64_t)a1 + v1602) & v1047);
          int v1048 = (void *)((unint64_t)&a2[v1602] & v1047);
          long long v1734 = v1048;
          if (v1680 == v1622)
          {
            int v1049 = (*(uint64_t (**)(unint64_t))(v1658 + 48))((unint64_t)&v302[v1602] & v1047);
            int v1048 = v1734;
            uint64_t v1050 = v1045;
            uint64_t v1051 = ~v1679;
            unint64_t v1052 = (_OWORD *)(((unint64_t)a1 + v1602) & v1047);
LABEL_1392:
            if (v1049)
            {
LABEL_1393:
              memcpy(v1052, v1048, v1694);
              uint64_t v1498 = v1628;
              unint64_t v1053 = v1726;
              size_t v1499 = v1044;
              unint64_t v301 = v1043;
              goto LABEL_1394;
            }
            unint64_t v1067 = ((unint64_t)v1048 + v1648) & v1570;
            unint64_t v1068 = (v1620 + v1067) & v1051;
LABEL_1396:
            unint64_t v1704 = v1043;
            v1046(v1052, (unsigned __int8 *)v1048, AssociatedTypeWitness);
            v1046((_OWORD *)(((unint64_t)v1052 + v1648) & v1570), (unsigned __int8 *)v1067, AssociatedTypeWitness);
            unint64_t v1501 = (v1620 + (((unint64_t)v1052 + v1648) & v1570)) & v1051;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v1641 + 32))(v1501, v1068, v1640);
            int v1502 = (void *)((v1646 + v1501) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v1503 = (void *)((v1646 + v1068) & 0xFFFFFFFFFFFFFFF8);
            *int v1502 = *v1503;
            unint64_t v1504 = ((unint64_t)v1502 + v1635) & v1678;
            unint64_t v1505 = ((unint64_t)v1503 + v1635) & v1678;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v1637 + 32))(v1504, v1505, v1636);
            uint64_t v1506 = (void *)((v1631 + v1504) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1507 = (void *)((v1631 + v1505) & 0xFFFFFFFFFFFFFFF8);
            *uint64_t v1506 = *v1507;
            *(_OWORD *)(((unint64_t)v1506 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1507
                                                                                            + 15) & 0xFFFFFFFFFFFFFFF8);
            *(_OWORD *)(v1501 + v1697) = *(_OWORD *)(v1068 + v1697);
            size_t v1508 = (v1699 + v1501 + v1697) & v1050;
            size_t v1509 = (v1699 + v1068 + v1697) & v1050;
            *(unsigned char *)size_t v1508 = *(unsigned char *)v1509;
            uint64_t v1510 = v1508 | 4;
            int v1511 = *(_DWORD *)(v1509 | 4);
            *(unsigned char *)(v1510 + 4) = *(unsigned char *)((v1509 | 4) + 4);
            *(_DWORD *)uint64_t v1510 = v1511;
            *(_WORD *)(v1508 + 10) = *(_WORD *)(v1509 + 0xA);
            long long v1512 = *(void (**)(size_t, size_t, uint64_t))(v1653 + 32);
            v1512((v1655 + v1508) & v1710, (v1655 + v1509) & v1710, v1652);
            size_t v1513 = (v1651 + ((v1655 + v1508) & v1710)) & v1710;
            size_t v1514 = (v1651 + ((v1655 + v1509) & v1710)) & v1710;
            v1512(v1513, v1514, v1652);
            long long v1515 = (unsigned char *)(v1513 + v1657);
            *long long v1515 = *(unsigned char *)(v1514 + v1657);
            v1515[1] = *(unsigned char *)(v1514 + v1657 + 1);
            v1515[2] = *(unsigned char *)(v1514 + v1657 + 2);
            v1515[3] = *(unsigned char *)(v1514 + v1657 + 3);
            v1515[4] = *(unsigned char *)(v1514 + v1657 + 4);
            unint64_t v1516 = (v1513 + v1657 + 12) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1517 = (v1514 + v1657 + 12) & 0xFFFFFFFFFFFFFFF8;
            *(_OWORD *)unint64_t v1516 = *(_OWORD *)v1517;
            *(unsigned char *)(v1516 + 16) = *(unsigned char *)(v1517 + 16);
            *(unsigned char *)(v1516 + 17) = *(unsigned char *)(v1517 + 17);
            *(unsigned char *)(v1516 + 18) = *(unsigned char *)(v1517 + 18);
            *(unsigned char *)(v1516 + 19) = *(unsigned char *)(v1517 + 19);
            unint64_t v1518 = (v1516 + 27) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1519 = (v1517 + 27) & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v1518 = *(void *)v1519;
            *(unsigned char *)(v1518 + 8) = *(unsigned char *)(v1519 + 8);
            *(unsigned char *)(v1518 + 9) = *(unsigned char *)(v1519 + 9);
            *(unsigned char *)(v1518 + 10) = *(unsigned char *)(v1519 + 10);
            *(unsigned char *)(v1518 + 11) = *(unsigned char *)(v1519 + 11);
            *(unsigned char *)(v1518 + 12) = *(unsigned char *)(v1519 + 12);
            long long v1520 = (void *)((v1517 + 47) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1521 = (void *)((v1516 + 47) & 0xFFFFFFFFFFFFFFF8);
            *unint64_t v1521 = *v1520;
            unint64_t v1522 = ((unint64_t)v1521 + 15) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1523 = ((unint64_t)v1520 + 15) & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v1522 = *(void *)v1523;
            *(unsigned char *)(v1522 + 8) = *(unsigned char *)(v1523 + 8);
            *(unsigned char *)(v1522 + 9) = *(unsigned char *)(v1523 + 9);
            uint64_t v1524 = (void *)((v1649 + v1522) & v1710);
            id v1525 = (const void *)((v1649 + v1523) & v1710);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1653 + 48))(v1525, 1, v1652))
            {
              memcpy(v1524, v1525, __n);
            }
            else
            {
              v1512((size_t)v1524, (size_t)v1525, v1652);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v1653 + 56))(v1524, 0, 1, v1652);
            }
            uint64_t v1498 = v1628;
            size_t v1526 = (void *)(((unint64_t)v1524 + v1650) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1527 = (void *)(((unint64_t)v1525 + v1650) & 0xFFFFFFFFFFFFFFF8);
            *size_t v1526 = *v1527;
            unint64_t v1528 = ((unint64_t)v1526 + 15) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1529 = ((unint64_t)v1527 + 15) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v1530 = *(void *)v1529;
            *(unsigned char *)(v1528 + 8) = *(unsigned char *)(v1529 + 8);
            *(void *)unint64_t v1528 = v1530;
            unint64_t v1531 = (void *)(((unint64_t)v1526 + 31) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v1532 = (void *)(((unint64_t)v1527 + 31) & 0xFFFFFFFFFFFFFFF8);
            *unint64_t v1531 = *v1532;
            unint64_t v1533 = (_OWORD *)(((unint64_t)v1531 + 15) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v1534 = (_OWORD *)(((unint64_t)v1532 + 15) & 0xFFFFFFFFFFFFFFF8);
            *unint64_t v1533 = *v1534;
            unint64_t v1535 = ((unint64_t)v1533 + 19) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1536 = ((unint64_t)v1534 + 19) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v1537 = *(void *)v1536;
            *(unsigned char *)(v1535 + 8) = *(unsigned char *)(v1536 + 8);
            *(void *)unint64_t v1535 = v1537;
            *(unsigned char *)(v1535 + 9) = *(unsigned char *)(v1536 + 9);
            unint64_t v1538 = (v1535 + 13) & 0xFFFFFFFFFFFFFFFCLL;
            unint64_t v1539 = (v1536 + 13) & 0xFFFFFFFFFFFFFFFCLL;
            LODWORD(v1530) = *(_DWORD *)v1539;
            *(unsigned char *)(v1538 + 4) = *(unsigned char *)(v1539 + 4);
            *(_DWORD *)unint64_t v1538 = v1530;
            *(_OWORD *)((v1535 + 25) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v1536 + 25) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1540 = v1696 + v1508;
            long long v1541 = *(_OWORD *)(v1696 + v1509 + 112);
            long long v1543 = *(_OWORD *)(v1696 + v1509 + 64);
            long long v1542 = *(_OWORD *)(v1696 + v1509 + 80);
            *(_OWORD *)(v1540 + 96) = *(_OWORD *)(v1696 + v1509 + 96);
            *(_OWORD *)(v1540 + 112) = v1541;
            *(_OWORD *)(v1540 + 64) = v1543;
            *(_OWORD *)(v1540 + 80) = v1542;
            long long v1544 = *(_OWORD *)(v1696 + v1509 + 176);
            long long v1546 = *(_OWORD *)(v1696 + v1509 + 128);
            long long v1545 = *(_OWORD *)(v1696 + v1509 + 144);
            *(_OWORD *)(v1540 + 160) = *(_OWORD *)(v1696 + v1509 + 160);
            *(_OWORD *)(v1540 + 176) = v1544;
            *(_OWORD *)(v1540 + 128) = v1546;
            *(_OWORD *)(v1540 + 144) = v1545;
            long long v1548 = *(_OWORD *)(v1696 + v1509 + 208);
            long long v1547 = *(_OWORD *)(v1696 + v1509 + 224);
            long long v1549 = *(_OWORD *)(v1696 + v1509 + 192);
            *(void *)(v1540 + 240) = *(void *)(v1696 + v1509 + 240);
            *(_OWORD *)(v1540 + 208) = v1548;
            *(_OWORD *)(v1540 + 224) = v1547;
            *(_OWORD *)(v1540 + 192) = v1549;
            long long v1550 = *(_OWORD *)(v1696 + v1509);
            long long v1551 = *(_OWORD *)(v1696 + v1509 + 16);
            long long v1552 = *(_OWORD *)(v1696 + v1509 + 48);
            *(_OWORD *)(v1540 + 32) = *(_OWORD *)(v1696 + v1509 + 32);
            *(_OWORD *)(v1540 + 48) = v1552;
            *(_OWORD *)unint64_t v1540 = v1550;
            *(_OWORD *)(v1540 + 16) = v1551;
            unint64_t v1553 = (_OWORD *)((v1696 + v1508 + 255) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1554 = (long long *)((v1696 + v1509 + 255) & 0xFFFFFFFFFFFFFFF8);
            long long v1555 = *v1554;
            *(_OWORD *)((char *)v1553 + 9) = *(long long *)((char *)v1554 + 9);
            *unint64_t v1553 = v1555;
            unint64_t v1556 = (v1696 + v1508 + 287) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1557 = (v1696 + v1509 + 287) & 0xFFFFFFFFFFFFFFF8;
            long long v1558 = *(_OWORD *)v1557;
            *(unsigned char *)(v1556 + 16) = *(unsigned char *)(v1557 + 16);
            *(_OWORD *)unint64_t v1556 = v1558;
            unint64_t v1559 = (void *)((v1696 + v1508 + 311) & 0xFFFFFFFFFFFFFFF8);
            v1560 = (void *)((v1696 + v1509 + 311) & 0xFFFFFFFFFFFFFFF8);
            *unint64_t v1559 = *v1560;
            *(_OWORD *)(((unint64_t)v1559 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1560
                                                                                            + 15) & 0xFFFFFFFFFFFFFFF8);
            size_t v1499 = __n;
            size_t v1500 = v1657;
            unint64_t v301 = v1704;
            unint64_t v1052 = v1720;
            unint64_t v1053 = v1726;
            if (v1639)
            {
LABEL_1400:
              char v1016 = 0;
              unint64_t v1561 = ((((v1498
                        + ((((((((((v1633 + v1500 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                            + 19) & 0xFFFFFFFFFFFFFFF8)
                          + 25) & 0xFFFFFFFFFFFFFFF8)
                        + 327) & 0xFFFFFFFFFFFFFFF8)
                      + 15) & 0xFFFFFFFFFFFFFFF8)
                    + 16;
              unint64_t v1562 = (_OWORD *)(((unint64_t)v1052 + v1561) & 0xFFFFFFFFFFFFFFF8);
              unint64_t v1563 = (_OWORD *)(((unint64_t)v1734 + v1561) & 0xFFFFFFFFFFFFFFF8);
              *unint64_t v1562 = *v1563;
              *(void *)(((unint64_t)v1562 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v1563
                                                                                              + 23) & 0xFFFFFFFFFFFFFFF8);
LABEL_1401:
              char v1017 = 3;
              goto LABEL_1402;
            }
LABEL_1394:
            size_t v1500 = v1499;
            goto LABEL_1400;
          }
          unint64_t v1067 = ((unint64_t)v1048 + v1648) & v1570;
          unint64_t v1068 = (v1620 + v1067) & v1689;
          uint64_t v1050 = v1045;
          if (v1630 == v1622)
          {
            unint64_t v1052 = v1720;
            if (v1623 == v1630)
            {
              int v1049 = (*(uint64_t (**)(unint64_t))(v1641 + 48))((v1620 + v1067) & v1689);
              int v1048 = v1734;
              uint64_t v1051 = ~v1679;
              goto LABEL_1392;
            }
            unint64_t v1123 = (unint64_t *)((v1646 + v1068) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v1051 = ~v1679;
            if (v1608 <= 0x7FFFFFFE)
            {
              unint64_t v1124 = *v1123;
              goto LABEL_1434;
            }
            int v1049 = (*(uint64_t (**)(unint64_t, void, uint64_t))(v1637 + 48))(((unint64_t)v1123 + v1635) & v1678, v1604, v1636);
          }
          else
          {
            size_t v1094 = v1068 + v1697;
            unint64_t v1052 = v1720;
            if ((v1607 & 0x80000000) == 0)
            {
              unint64_t v1095 = *(void *)(v1094 + 8);
              if (v1095 >= 0xFFFFFFFF) {
                LODWORD(v1095) = -1;
              }
              int v1049 = v1095 + 1;
              uint64_t v1051 = ~v1679;
              goto LABEL_1392;
            }
            uint64_t v1130 = (v1655 + ((v1699 + v1094) & v1045)) & v1710;
            uint64_t v1051 = ~v1679;
            if (v1639 <= 0x7FFFFFFD)
            {
              unint64_t v1124 = *(void *)(((v1603 + ((v1651 + v1130) & v1710)) & 0xFFFFFFFFFFFFFFF8) + 8);
LABEL_1434:
              if (v1124 >= 0xFFFFFFFF) {
                LODWORD(v1124) = -1;
              }
              if ((v1124 + 1) >= 2) {
                goto LABEL_1393;
              }
              goto LABEL_1396;
            }
            int v1049 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v1653 + 48))(v1130, v1639, v1652);
          }
          int v1048 = v1734;
          goto LABEL_1392;
        case 4u:
          (*(void (**)(_OWORD *, unsigned __int8 *, uint64_t))(v1658 + 32))(a1, a2, AssociatedTypeWitness);
          char v1016 = 0;
          char v1017 = 4;
          unint64_t v1053 = v1726;
          goto LABEL_1403;
        case 5u:
          (*(void (**)(_OWORD *, unsigned __int8 *, uint64_t))(v1658 + 32))(a1, a2, AssociatedTypeWitness);
          char v1016 = 0;
          char v1017 = 5;
          unint64_t v1053 = v1726;
          goto LABEL_1403;
        case 6u:
          unint64_t v1039 = v69;
          (*(void (**)(_OWORD *, unsigned __int8 *, uint64_t))(v1658 + 32))(a1, a2, AssociatedTypeWitness);
          unint64_t v1054 = (void *)(((unint64_t)a1 + v1598) & v1020);
          unint64_t v1055 = (const void *)((unint64_t)&a2[v1598] & v1020);
          if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1599 + 48))(v1055, 1, v1674))
          {
            memcpy(v1054, v1055, v1595);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v1599 + 32))(v1054, v1055, v1674);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v1599 + 56))(v1054, 0, 1, v1674);
          }
          char v1016 = 0;
          char v1017 = 6;
          goto LABEL_1389;
        case 7u:
          (*(void (**)(_OWORD *, unsigned __int8 *, uint64_t))(v1658 + 32))(a1, a2, AssociatedTypeWitness);
          char v1016 = 0;
          char v1017 = 7;
          unint64_t v1053 = v1726;
          goto LABEL_1403;
        default:
          unint64_t v1021 = v69;
          size_t v1022 = v306;
          uint64_t v1676 = v300;
          uint64_t v1023 = v298;
          long long v1024 = *(void (**)(_OWORD *, unsigned __int8 *, uint64_t))(v1658 + 32);
          uint64_t v1025 = v82;
          v1024(a1, a2, AssociatedTypeWitness);
          unint64_t v1719 = (_OWORD *)(((unint64_t)a1 + v1602) & v1025);
          uint64_t v1026 = (void *)((unint64_t)&a2[v1602] & v1025);
          int v1732 = v1026;
          if (v1680 == v1622)
          {
            int v1027 = (*(uint64_t (**)(unint64_t))(v1658 + 48))((unint64_t)&v302[v1602] & v1025);
            uint64_t v1026 = v1732;
            uint64_t v1028 = v1023;
            uint64_t v1029 = ~v1679;
            unint64_t v1030 = (_OWORD *)(((unint64_t)a1 + v1602) & v1025);
LABEL_1355:
            if (v1027)
            {
LABEL_1356:
              memcpy(v1030, v1026, v1694);
              uint64_t v1347 = v1628;
              unint64_t v1053 = v1726;
              size_t v1348 = v1022;
              unint64_t v301 = v1021;
              goto LABEL_1357;
            }
            unint64_t v1063 = ((unint64_t)v1026 + v1648) & v1570;
            unint64_t v1064 = (v1620 + v1063) & v1029;
LABEL_1359:
            unint64_t v1703 = v1021;
            v1024(v1030, (unsigned __int8 *)v1026, AssociatedTypeWitness);
            v1024((_OWORD *)(((unint64_t)v1030 + v1648) & v1570), (unsigned __int8 *)v1063, AssociatedTypeWitness);
            unint64_t v1350 = (v1620 + (((unint64_t)v1030 + v1648) & v1570)) & v1029;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v1641 + 32))(v1350, v1064, v1640);
            unint64_t v1351 = (void *)((v1646 + v1350) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1352 = (void *)((v1646 + v1064) & 0xFFFFFFFFFFFFFFF8);
            *unint64_t v1351 = *v1352;
            unint64_t v1353 = ((unint64_t)v1351 + v1635) & v1676;
            unint64_t v1354 = ((unint64_t)v1352 + v1635) & v1676;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v1637 + 32))(v1353, v1354, v1636);
            unint64_t v1355 = (void *)((v1631 + v1353) & 0xFFFFFFFFFFFFFFF8);
            int v1356 = (void *)((v1631 + v1354) & 0xFFFFFFFFFFFFFFF8);
            *unint64_t v1355 = *v1356;
            *(_OWORD *)(((unint64_t)v1355 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1356
                                                                                            + 15) & 0xFFFFFFFFFFFFFFF8);
            *(_OWORD *)(v1350 + v1697) = *(_OWORD *)(v1064 + v1697);
            size_t v1357 = (v1699 + v1350 + v1697) & v1028;
            size_t v1358 = (v1699 + v1064 + v1697) & v1028;
            *(unsigned char *)size_t v1357 = *(unsigned char *)v1358;
            uint64_t v1359 = v1357 | 4;
            int v1360 = *(_DWORD *)(v1358 | 4);
            *(unsigned char *)(v1359 + 4) = *(unsigned char *)((v1358 | 4) + 4);
            *(_DWORD *)uint64_t v1359 = v1360;
            *(_WORD *)(v1357 + 10) = *(_WORD *)(v1358 + 0xA);
            long long v1361 = *(void (**)(size_t, size_t, uint64_t))(v1653 + 32);
            v1361((v1655 + v1357) & v1710, (v1655 + v1358) & v1710, v1652);
            size_t v1362 = (v1651 + ((v1655 + v1357) & v1710)) & v1710;
            size_t v1363 = (v1651 + ((v1655 + v1358) & v1710)) & v1710;
            v1361(v1362, v1363, v1652);
            long long v1364 = (unsigned char *)(v1362 + v1657);
            *long long v1364 = *(unsigned char *)(v1363 + v1657);
            v1364[1] = *(unsigned char *)(v1363 + v1657 + 1);
            v1364[2] = *(unsigned char *)(v1363 + v1657 + 2);
            v1364[3] = *(unsigned char *)(v1363 + v1657 + 3);
            v1364[4] = *(unsigned char *)(v1363 + v1657 + 4);
            unint64_t v1365 = (v1362 + v1657 + 12) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1366 = (v1363 + v1657 + 12) & 0xFFFFFFFFFFFFFFF8;
            *(_OWORD *)unint64_t v1365 = *(_OWORD *)v1366;
            *(unsigned char *)(v1365 + 16) = *(unsigned char *)(v1366 + 16);
            *(unsigned char *)(v1365 + 17) = *(unsigned char *)(v1366 + 17);
            *(unsigned char *)(v1365 + 18) = *(unsigned char *)(v1366 + 18);
            *(unsigned char *)(v1365 + 19) = *(unsigned char *)(v1366 + 19);
            unint64_t v1367 = (v1365 + 27) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1368 = (v1366 + 27) & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v1367 = *(void *)v1368;
            *(unsigned char *)(v1367 + 8) = *(unsigned char *)(v1368 + 8);
            *(unsigned char *)(v1367 + 9) = *(unsigned char *)(v1368 + 9);
            *(unsigned char *)(v1367 + 10) = *(unsigned char *)(v1368 + 10);
            *(unsigned char *)(v1367 + 11) = *(unsigned char *)(v1368 + 11);
            *(unsigned char *)(v1367 + 12) = *(unsigned char *)(v1368 + 12);
            unint64_t v1369 = (void *)((v1366 + 47) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v1370 = (void *)((v1365 + 47) & 0xFFFFFFFFFFFFFFF8);
            *uint64_t v1370 = *v1369;
            unint64_t v1371 = ((unint64_t)v1370 + 15) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1372 = ((unint64_t)v1369 + 15) & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v1371 = *(void *)v1372;
            *(unsigned char *)(v1371 + 8) = *(unsigned char *)(v1372 + 8);
            *(unsigned char *)(v1371 + 9) = *(unsigned char *)(v1372 + 9);
            id v1373 = (void *)((v1649 + v1371) & v1710);
            size_t v1374 = (const void *)((v1649 + v1372) & v1710);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1653 + 48))(v1374, 1, v1652))
            {
              memcpy(v1373, v1374, __n);
            }
            else
            {
              v1361((size_t)v1373, (size_t)v1374, v1652);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v1653 + 56))(v1373, 0, 1, v1652);
            }
            uint64_t v1347 = v1628;
            size_t v1375 = (void *)(((unint64_t)v1373 + v1650) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v1376 = (void *)(((unint64_t)v1374 + v1650) & 0xFFFFFFFFFFFFFFF8);
            *size_t v1375 = *v1376;
            unint64_t v1377 = ((unint64_t)v1375 + 15) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1378 = ((unint64_t)v1376 + 15) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v1379 = *(void *)v1378;
            *(unsigned char *)(v1377 + 8) = *(unsigned char *)(v1378 + 8);
            *(void *)unint64_t v1377 = v1379;
            unint64_t v1380 = (void *)(((unint64_t)v1375 + 31) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1381 = (void *)(((unint64_t)v1376 + 31) & 0xFFFFFFFFFFFFFFF8);
            *unint64_t v1380 = *v1381;
            v1382 = (_OWORD *)(((unint64_t)v1380 + 15) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v1383 = (_OWORD *)(((unint64_t)v1381 + 15) & 0xFFFFFFFFFFFFFFF8);
            _OWORD *v1382 = *v1383;
            unint64_t v1384 = ((unint64_t)v1382 + 19) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1385 = ((unint64_t)v1383 + 19) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v1386 = *(void *)v1385;
            *(unsigned char *)(v1384 + 8) = *(unsigned char *)(v1385 + 8);
            *(void *)unint64_t v1384 = v1386;
            *(unsigned char *)(v1384 + 9) = *(unsigned char *)(v1385 + 9);
            unint64_t v1387 = (v1384 + 13) & 0xFFFFFFFFFFFFFFFCLL;
            unint64_t v1388 = (v1385 + 13) & 0xFFFFFFFFFFFFFFFCLL;
            LODWORD(v1379) = *(_DWORD *)v1388;
            *(unsigned char *)(v1387 + 4) = *(unsigned char *)(v1388 + 4);
            *(_DWORD *)unint64_t v1387 = v1379;
            *(_OWORD *)((v1384 + 25) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v1385 + 25) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1389 = v1696 + v1357;
            long long v1390 = *(_OWORD *)(v1696 + v1358 + 112);
            long long v1392 = *(_OWORD *)(v1696 + v1358 + 64);
            long long v1391 = *(_OWORD *)(v1696 + v1358 + 80);
            *(_OWORD *)(v1389 + 96) = *(_OWORD *)(v1696 + v1358 + 96);
            *(_OWORD *)(v1389 + 112) = v1390;
            *(_OWORD *)(v1389 + 64) = v1392;
            *(_OWORD *)(v1389 + 80) = v1391;
            long long v1393 = *(_OWORD *)(v1696 + v1358 + 176);
            long long v1395 = *(_OWORD *)(v1696 + v1358 + 128);
            long long v1394 = *(_OWORD *)(v1696 + v1358 + 144);
            *(_OWORD *)(v1389 + 160) = *(_OWORD *)(v1696 + v1358 + 160);
            *(_OWORD *)(v1389 + 176) = v1393;
            *(_OWORD *)(v1389 + 128) = v1395;
            *(_OWORD *)(v1389 + 144) = v1394;
            long long v1397 = *(_OWORD *)(v1696 + v1358 + 208);
            long long v1396 = *(_OWORD *)(v1696 + v1358 + 224);
            long long v1398 = *(_OWORD *)(v1696 + v1358 + 192);
            *(void *)(v1389 + 240) = *(void *)(v1696 + v1358 + 240);
            *(_OWORD *)(v1389 + 208) = v1397;
            *(_OWORD *)(v1389 + 224) = v1396;
            *(_OWORD *)(v1389 + 192) = v1398;
            long long v1399 = *(_OWORD *)(v1696 + v1358);
            long long v1400 = *(_OWORD *)(v1696 + v1358 + 16);
            long long v1401 = *(_OWORD *)(v1696 + v1358 + 48);
            *(_OWORD *)(v1389 + 32) = *(_OWORD *)(v1696 + v1358 + 32);
            *(_OWORD *)(v1389 + 48) = v1401;
            *(_OWORD *)unint64_t v1389 = v1399;
            *(_OWORD *)(v1389 + 16) = v1400;
            unint64_t v1402 = (_OWORD *)((v1696 + v1357 + 255) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1403 = (long long *)((v1696 + v1358 + 255) & 0xFFFFFFFFFFFFFFF8);
            long long v1404 = *v1403;
            *(_OWORD *)((char *)v1402 + 9) = *(long long *)((char *)v1403 + 9);
            *unint64_t v1402 = v1404;
            unint64_t v1405 = (v1696 + v1357 + 287) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1406 = (v1696 + v1358 + 287) & 0xFFFFFFFFFFFFFFF8;
            long long v1407 = *(_OWORD *)v1406;
            *(unsigned char *)(v1405 + 16) = *(unsigned char *)(v1406 + 16);
            *(_OWORD *)unint64_t v1405 = v1407;
            unint64_t v1408 = (void *)((v1696 + v1357 + 311) & 0xFFFFFFFFFFFFFFF8);
            v1409 = (void *)((v1696 + v1358 + 311) & 0xFFFFFFFFFFFFFFF8);
            *unint64_t v1408 = *v1409;
            *(_OWORD *)(((unint64_t)v1408 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1409
                                                                                            + 15) & 0xFFFFFFFFFFFFFFF8);
            size_t v1348 = __n;
            size_t v1349 = v1657;
            unint64_t v301 = v1703;
            unint64_t v1030 = v1719;
            unint64_t v1053 = v1726;
            if (v1639)
            {
LABEL_1363:
              char v1017 = 0;
              char v1016 = 0;
              unint64_t v1410 = ((((v1347
                        + ((((((((((v1633 + v1349 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                            + 19) & 0xFFFFFFFFFFFFFFF8)
                          + 25) & 0xFFFFFFFFFFFFFFF8)
                        + 327) & 0xFFFFFFFFFFFFFFF8)
                      + 15) & 0xFFFFFFFFFFFFFFF8)
                    + 16;
              unint64_t v1411 = (void *)(((unint64_t)v1030 + v1410) & 0xFFFFFFFFFFFFFFF8);
              unint64_t v1412 = (void *)(((unint64_t)v1732 + v1410) & 0xFFFFFFFFFFFFFFF8);
              *unint64_t v1411 = *v1412;
              *(void *)(((unint64_t)v1411 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v1412
                                                                                              + 15) & 0xFFFFFFFFFFFFFFF8);
              goto LABEL_1402;
            }
LABEL_1357:
            size_t v1349 = v1348;
            goto LABEL_1363;
          }
          unint64_t v1063 = ((unint64_t)v1026 + v1648) & v1570;
          unint64_t v1064 = (v1620 + v1063) & v1689;
          uint64_t v1028 = v1023;
          if (v1630 == v1622)
          {
            unint64_t v1030 = v1719;
            if (v1623 == v1630)
            {
              int v1027 = (*(uint64_t (**)(unint64_t))(v1641 + 48))((v1620 + v1063) & v1689);
              uint64_t v1026 = v1732;
              uint64_t v1029 = ~v1679;
              goto LABEL_1355;
            }
            long long v1119 = (unint64_t *)((v1646 + v1064) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v1029 = ~v1679;
            if (v1608 <= 0x7FFFFFFE)
            {
              unint64_t v1120 = *v1119;
              goto LABEL_1424;
            }
            int v1027 = (*(uint64_t (**)(unint64_t, void, uint64_t))(v1637 + 48))(((unint64_t)v1119 + v1635) & v1676, v1604, v1636);
          }
          else
          {
            size_t v1090 = v1064 + v1697;
            unint64_t v1030 = v1719;
            if ((v1607 & 0x80000000) == 0)
            {
              unint64_t v1091 = *(void *)(v1090 + 8);
              if (v1091 >= 0xFFFFFFFF) {
                LODWORD(v1091) = -1;
              }
              int v1027 = v1091 + 1;
              uint64_t v1029 = ~v1679;
              goto LABEL_1355;
            }
            uint64_t v1128 = (v1655 + ((v1699 + v1090) & v1023)) & v1710;
            uint64_t v1029 = ~v1679;
            if (v1639 <= 0x7FFFFFFD)
            {
              unint64_t v1120 = *(void *)(((v1603 + ((v1651 + v1128) & v1710)) & 0xFFFFFFFFFFFFFFF8) + 8);
LABEL_1424:
              if (v1120 >= 0xFFFFFFFF) {
                LODWORD(v1120) = -1;
              }
              if ((v1120 + 1) >= 2) {
                goto LABEL_1356;
              }
              goto LABEL_1359;
            }
            int v1027 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v1653 + 48))(v1128, v1639, v1652);
          }
          uint64_t v1026 = v1732;
          goto LABEL_1355;
      }
    case 0x1Cu:
      unsigned int v309 = a2[v1669];
      unsigned int v310 = v309 - 2;
      if (v309 < 2)
      {
        uint64_t v86 = a1;
        uint64_t v312 = v1660;
        uint64_t v316 = AssociatedTypeWitness;
        size_t v314 = v1700;
        uint64_t v313 = v1705;
        uint64_t v317 = v1658;
        uint64_t v315 = v1668;
      }
      else
      {
        if (v1669 <= 3) {
          uint64_t v311 = v1669;
        }
        else {
          uint64_t v311 = 4;
        }
        uint64_t v312 = v1660;
        size_t v314 = v1700;
        uint64_t v313 = v1705;
        uint64_t v315 = v1668;
        uint64_t v86 = a1;
        uint64_t v316 = AssociatedTypeWitness;
        uint64_t v317 = v1658;
        switch(v311)
        {
          case 1:
            int v318 = *a2;
            goto LABEL_748;
          case 2:
            int v318 = *(unsigned __int16 *)a2;
            goto LABEL_748;
          case 3:
            int v318 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_748;
          case 4:
            int v318 = *(_DWORD *)a2;
LABEL_748:
            if (v1669 < 4) {
              unsigned int v309 = (v318 | (v310 << (8 * v1669))) + 2;
            }
            else {
              unsigned int v309 = v318 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v637 = v309 == 1;
      if (v309 == 1) {
        uint64_t v638 = v313;
      }
      else {
        uint64_t v638 = v317;
      }
      if (v309 == 1) {
        uint64_t v639 = v312;
      }
      else {
        uint64_t v639 = v316;
      }
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t, unint64_t))(v638 + 32))(v86, a2, v639, v69);
      v86[v1669] = v637;
      v86[v314] = a2[v314];
      if (v315 > 3) {
        goto LABEL_758;
      }
      unsigned int v640 = ((1 << (8 * v315)) + 5) >> (8 * v315);
      if (v640 > 0xFFD6)
      {
        *(_DWORD *)&v86[v315] = 28;
      }
      else if (v640 <= 0xD6)
      {
LABEL_758:
        v86[v315] = 28;
      }
      else
      {
        *(_WORD *)&v86[v315] = 28;
      }
      return v86;
    case 0x1Du:
      unsigned int v319 = a2[v1669];
      unsigned int v320 = v319 - 2;
      if (v319 < 2)
      {
        uint64_t v86 = a1;
        uint64_t v322 = v1705;
        uint64_t v324 = v1658;
        uint64_t v323 = v1668;
      }
      else
      {
        if (v1669 <= 3) {
          uint64_t v321 = v1669;
        }
        else {
          uint64_t v321 = 4;
        }
        uint64_t v322 = v1705;
        uint64_t v323 = v1668;
        uint64_t v86 = a1;
        uint64_t v324 = v1658;
        switch(v321)
        {
          case 1:
            int v325 = *a2;
            goto LABEL_766;
          case 2:
            int v325 = *(unsigned __int16 *)a2;
            goto LABEL_766;
          case 3:
            int v325 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_766;
          case 4:
            int v325 = *(_DWORD *)a2;
LABEL_766:
            if (v1669 < 4) {
              unsigned int v319 = (v325 | (v320 << (8 * v1669))) + 2;
            }
            else {
              unsigned int v319 = v325 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v641 = v319 == 1;
      if (v319 == 1) {
        uint64_t v642 = v322;
      }
      else {
        uint64_t v642 = v324;
      }
      (*(void (**)(unsigned char *))(v642 + 32))(v86);
      v86[v1669] = v641;
      if (v323 > 3) {
        goto LABEL_773;
      }
      unsigned int v643 = ((1 << (8 * v323)) + 5) >> (8 * v323);
      if (v643 > 0xFFD6)
      {
        *(_DWORD *)&v86[v323] = 29;
      }
      else if (v643 <= 0xD6)
      {
LABEL_773:
        v86[v323] = 29;
      }
      else
      {
        *(_WORD *)&v86[v323] = 29;
      }
      return v86;
    case 0x1Eu:
      unsigned int v326 = a2[v1669];
      unsigned int v327 = v326 - 2;
      if (v326 < 2)
      {
        uint64_t v86 = a1;
        uint64_t v329 = v1705;
        uint64_t v331 = v1658;
        uint64_t v330 = v1668;
      }
      else
      {
        if (v1669 <= 3) {
          uint64_t v328 = v1669;
        }
        else {
          uint64_t v328 = 4;
        }
        uint64_t v329 = v1705;
        uint64_t v330 = v1668;
        uint64_t v86 = a1;
        uint64_t v331 = v1658;
        switch(v328)
        {
          case 1:
            int v332 = *a2;
            goto LABEL_781;
          case 2:
            int v332 = *(unsigned __int16 *)a2;
            goto LABEL_781;
          case 3:
            int v332 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_781;
          case 4:
            int v332 = *(_DWORD *)a2;
LABEL_781:
            if (v1669 < 4) {
              unsigned int v326 = (v332 | (v327 << (8 * v1669))) + 2;
            }
            else {
              unsigned int v326 = v332 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v644 = v326 == 1;
      if (v326 == 1) {
        uint64_t v645 = v329;
      }
      else {
        uint64_t v645 = v331;
      }
      (*(void (**)(unsigned char *))(v645 + 32))(v86);
      v86[v1669] = v644;
      if (v330 > 3) {
        goto LABEL_788;
      }
      unsigned int v646 = ((1 << (8 * v330)) + 5) >> (8 * v330);
      if (v646 > 0xFFD6)
      {
        *(_DWORD *)&v86[v330] = 30;
      }
      else if (v646 <= 0xD6)
      {
LABEL_788:
        v86[v330] = 30;
      }
      else
      {
        *(_WORD *)&v86[v330] = 30;
      }
      return v86;
    case 0x1Fu:
      unsigned int v333 = a2[v1669];
      unsigned int v334 = v333 - 2;
      if (v333 < 2)
      {
        uint64_t v339 = v78;
        uint64_t v335 = v1668;
        uint64_t v86 = a1;
        uint64_t v337 = v1660;
        uint64_t v340 = AssociatedTypeWitness;
        uint64_t v338 = v1705;
        uint64_t v341 = v1658;
      }
      else
      {
        uint64_t v335 = v1668;
        if (v1669 <= 3) {
          uint64_t v336 = v1669;
        }
        else {
          uint64_t v336 = 4;
        }
        uint64_t v337 = v1660;
        uint64_t v338 = v1705;
        uint64_t v339 = v78;
        uint64_t v86 = a1;
        uint64_t v340 = AssociatedTypeWitness;
        uint64_t v341 = v1658;
        switch(v336)
        {
          case 1:
            int v342 = *a2;
            goto LABEL_796;
          case 2:
            int v342 = *(unsigned __int16 *)a2;
            goto LABEL_796;
          case 3:
            int v342 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_796;
          case 4:
            int v342 = *(_DWORD *)a2;
LABEL_796:
            if (v1669 < 4) {
              unsigned int v333 = (v342 | (v334 << (8 * v1669))) + 2;
            }
            else {
              unsigned int v333 = v342 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v647 = v333 == 1;
      if (v333 == 1) {
        uint64_t v648 = v338;
      }
      else {
        uint64_t v648 = v341;
      }
      if (v333 == 1) {
        uint64_t v649 = v337;
      }
      else {
        uint64_t v649 = v340;
      }
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t, unint64_t))(v648 + 32))(v86, a2, v649, v69);
      v86[v1669] = v647;
      BOOL v650 = (unsigned __int8 *)((unint64_t)&a2[v1654] & v339);
      unsigned int v651 = v650[v1669];
      unsigned int v652 = v651 - 2;
      if (v651 >= 2)
      {
        if (v1669 <= 3) {
          uint64_t v653 = v1669;
        }
        else {
          uint64_t v653 = 4;
        }
        switch(v653)
        {
          case 1:
            int v654 = *v650;
            goto LABEL_952;
          case 2:
            int v654 = *(unsigned __int16 *)v650;
            goto LABEL_952;
          case 3:
            int v654 = *(unsigned __int16 *)v650 | (*(unsigned __int8 *)(((unint64_t)&a2[v1654] & v339) + 2) << 16);
            goto LABEL_952;
          case 4:
            int v654 = *(_DWORD *)v650;
LABEL_952:
            if (v1669 < 4) {
              unsigned int v651 = (v654 | (v652 << (8 * v1669))) + 2;
            }
            else {
              unsigned int v651 = v654 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v683 = v651 == 1;
      if (v651 == 1) {
        uint64_t v684 = v338;
      }
      else {
        uint64_t v684 = v341;
      }
      (*(void (**)(unint64_t))(v684 + 32))((unint64_t)&v86[v1654] & v339);
      *(unsigned char *)(((unint64_t)&v86[v1654] & v339) + v1669) = v683;
      if (v335 > 3) {
        goto LABEL_959;
      }
      unsigned int v685 = ((1 << (8 * v335)) + 5) >> (8 * v335);
      if (v685 > 0xFFD6)
      {
        *(_DWORD *)&v86[v335] = 31;
      }
      else if (v685 <= 0xD6)
      {
LABEL_959:
        v86[v335] = 31;
      }
      else
      {
        *(_WORD *)&v86[v335] = 31;
      }
      return v86;
    case 0x20u:
      unsigned int v343 = a2[v1669];
      unsigned int v344 = v343 - 2;
      if (v343 < 2)
      {
        uint64_t v86 = a1;
        uint64_t v346 = v1705;
        uint64_t v348 = v1658;
        uint64_t v347 = v1668;
      }
      else
      {
        if (v1669 <= 3) {
          uint64_t v345 = v1669;
        }
        else {
          uint64_t v345 = 4;
        }
        uint64_t v346 = v1705;
        uint64_t v347 = v1668;
        uint64_t v86 = a1;
        uint64_t v348 = v1658;
        switch(v345)
        {
          case 1:
            int v349 = *a2;
            goto LABEL_814;
          case 2:
            int v349 = *(unsigned __int16 *)a2;
            goto LABEL_814;
          case 3:
            int v349 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_814;
          case 4:
            int v349 = *(_DWORD *)a2;
LABEL_814:
            if (v1669 < 4) {
              unsigned int v343 = (v349 | (v344 << (8 * v1669))) + 2;
            }
            else {
              unsigned int v343 = v349 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v655 = v343 == 1;
      if (v343 == 1) {
        uint64_t v656 = v346;
      }
      else {
        uint64_t v656 = v348;
      }
      (*(void (**)(unsigned char *))(v656 + 32))(v86);
      v86[v1669] = v655;
      if (v347 > 3) {
        goto LABEL_821;
      }
      unsigned int v657 = ((1 << (8 * v347)) + 5) >> (8 * v347);
      if (v657 > 0xFFD6)
      {
        *(_DWORD *)&v86[v347] = 32;
      }
      else if (v657 <= 0xD6)
      {
LABEL_821:
        v86[v347] = 32;
      }
      else
      {
        *(_WORD *)&v86[v347] = 32;
      }
      return v86;
    case 0x21u:
      unsigned int v350 = a2[v1669];
      unsigned int v351 = v350 - 2;
      if (v350 < 2)
      {
        uint64_t v86 = a1;
        uint64_t v353 = v1705;
        uint64_t v355 = v1658;
        uint64_t v354 = v1668;
      }
      else
      {
        if (v1669 <= 3) {
          uint64_t v352 = v1669;
        }
        else {
          uint64_t v352 = 4;
        }
        uint64_t v353 = v1705;
        uint64_t v354 = v1668;
        uint64_t v86 = a1;
        uint64_t v355 = v1658;
        switch(v352)
        {
          case 1:
            int v356 = *a2;
            goto LABEL_829;
          case 2:
            int v356 = *(unsigned __int16 *)a2;
            goto LABEL_829;
          case 3:
            int v356 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_829;
          case 4:
            int v356 = *(_DWORD *)a2;
LABEL_829:
            if (v1669 < 4) {
              unsigned int v350 = (v356 | (v351 << (8 * v1669))) + 2;
            }
            else {
              unsigned int v350 = v356 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v658 = v350 == 1;
      if (v350 == 1) {
        uint64_t v659 = v353;
      }
      else {
        uint64_t v659 = v355;
      }
      (*(void (**)(unsigned char *))(v659 + 32))(v86);
      v86[v1669] = v658;
      if (v354 > 3) {
        goto LABEL_836;
      }
      unsigned int v660 = ((1 << (8 * v354)) + 5) >> (8 * v354);
      if (v660 > 0xFFD6)
      {
        *(_DWORD *)&v86[v354] = 33;
      }
      else if (v660 <= 0xD6)
      {
LABEL_836:
        v86[v354] = 33;
      }
      else
      {
        *(_WORD *)&v86[v354] = 33;
      }
      return v86;
    case 0x22u:
      unsigned int v357 = a2[v1669];
      unsigned int v358 = v357 - 2;
      if (v357 < 2)
      {
        uint64_t v86 = a1;
        uint64_t v360 = v1705;
        uint64_t v362 = v1658;
        uint64_t v361 = v1668;
      }
      else
      {
        if (v1669 <= 3) {
          uint64_t v359 = v1669;
        }
        else {
          uint64_t v359 = 4;
        }
        uint64_t v360 = v1705;
        uint64_t v361 = v1668;
        uint64_t v86 = a1;
        uint64_t v362 = v1658;
        switch(v359)
        {
          case 1:
            int v363 = *a2;
            goto LABEL_844;
          case 2:
            int v363 = *(unsigned __int16 *)a2;
            goto LABEL_844;
          case 3:
            int v363 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_844;
          case 4:
            int v363 = *(_DWORD *)a2;
LABEL_844:
            if (v1669 < 4) {
              unsigned int v357 = (v363 | (v358 << (8 * v1669))) + 2;
            }
            else {
              unsigned int v357 = v363 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v661 = v357 == 1;
      if (v357 == 1) {
        uint64_t v662 = v360;
      }
      else {
        uint64_t v662 = v362;
      }
      (*(void (**)(unsigned char *))(v662 + 32))(v86);
      v86[v1669] = v661;
      if (v361 > 3) {
        goto LABEL_851;
      }
      unsigned int v663 = ((1 << (8 * v361)) + 5) >> (8 * v361);
      if (v663 > 0xFFD6)
      {
        *(_DWORD *)&v86[v361] = 34;
      }
      else if (v663 <= 0xD6)
      {
LABEL_851:
        v86[v361] = 34;
      }
      else
      {
        *(_WORD *)&v86[v361] = 34;
      }
      return v86;
    case 0x23u:
      unsigned int v364 = a2[v1669];
      unsigned int v365 = v364 - 2;
      if (v364 < 2)
      {
        uint64_t v86 = a1;
        uint64_t v367 = v1705;
        uint64_t v369 = v1658;
        uint64_t v368 = v1668;
      }
      else
      {
        if (v1669 <= 3) {
          uint64_t v366 = v1669;
        }
        else {
          uint64_t v366 = 4;
        }
        uint64_t v367 = v1705;
        uint64_t v368 = v1668;
        uint64_t v86 = a1;
        uint64_t v369 = v1658;
        switch(v366)
        {
          case 1:
            int v370 = *a2;
            goto LABEL_859;
          case 2:
            int v370 = *(unsigned __int16 *)a2;
            goto LABEL_859;
          case 3:
            int v370 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_859;
          case 4:
            int v370 = *(_DWORD *)a2;
LABEL_859:
            if (v1669 < 4) {
              unsigned int v364 = (v370 | (v365 << (8 * v1669))) + 2;
            }
            else {
              unsigned int v364 = v370 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v664 = v364 == 1;
      if (v364 == 1) {
        uint64_t v665 = v367;
      }
      else {
        uint64_t v665 = v369;
      }
      (*(void (**)(unsigned char *))(v665 + 32))(v86);
      v86[v1669] = v664;
      if (v368 > 3) {
        goto LABEL_866;
      }
      unsigned int v666 = ((1 << (8 * v368)) + 5) >> (8 * v368);
      if (v666 > 0xFFD6)
      {
        *(_DWORD *)&v86[v368] = 35;
      }
      else if (v666 <= 0xD6)
      {
LABEL_866:
        v86[v368] = 35;
      }
      else
      {
        *(_WORD *)&v86[v368] = 35;
      }
      return v86;
    case 0x24u:
      uint64_t v1663 = ~v35;
      unint64_t v371 = v67;
      uint64_t v1579 = ~v34;
      unint64_t v1587 = ((((v1632 + ((v34 + 8 + (v1666 & 0xFFFFFFFFFFFFFFF8)) & ~v34)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
            + 16;
      uint64_t v86 = a1;
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t, unint64_t))(v1658 + 48))(a2, 1, AssociatedTypeWitness, v69))
      {
        size_t v372 = v1616;
        memcpy(a1, a2, v1616);
        uint64_t v373 = v1705;
      }
      else
      {
        (*(void (**)(_OWORD *, unsigned __int8 *, uint64_t))(v1658 + 32))(a1, a2, AssociatedTypeWitness);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v1658 + 56))(a1, 0, 1, AssociatedTypeWitness);
        uint64_t v373 = v1705;
        size_t v372 = v1616;
      }
      uint64_t v417 = ~v39;
      unint64_t v418 = (void *)(((unint64_t)a1 + v372 + 7) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v419 = (void *)((unint64_t)&a2[v372 + 7] & 0xFFFFFFFFFFFFFFF8);
      *unint64_t v418 = *v419;
      unint64_t v420 = ((unint64_t)v418 + 15) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v421 = ((unint64_t)v419 + 15) & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v420 = *(void *)v421;
      *(unsigned char *)(v420 + 8) = *(unsigned char *)(v421 + 8);
      unint64_t v422 = (void *)((v420 + v1679 + 9) & v79);
      unint64_t v423 = (const void *)((v421 + v1679 + 9) & v79);
      if (v1623 == v1630)
      {
        int v424 = (*(uint64_t (**)(const void *))(v1641 + 48))(v423);
        size_t v425 = v1697;
      }
      else
      {
        unint64_t v426 = (uint64_t *)(((unint64_t)v423 + v1646) & 0xFFFFFFFFFFFFFFF8);
        size_t v425 = v1697;
        if (v1608 <= 0x7FFFFFFE)
        {
          uint64_t v427 = *v426;
          if ((unint64_t)*v426 >= 0xFFFFFFFF) {
            LODWORD(v427) = -1;
          }
          if ((v427 + 1) >= 2) {
            goto LABEL_423;
          }
          goto LABEL_425;
        }
        int v424 = (*(uint64_t (**)(unint64_t, void, uint64_t))(v1637 + 48))(((unint64_t)v426 + v1635) & v67, v1604, v1636);
      }
      if (v424)
      {
LABEL_423:
        memcpy(v422, v423, v425);
        unint64_t v504 = a2;
        goto LABEL_426;
      }
      unint64_t v426 = (uint64_t *)(((unint64_t)v423 + v1646) & 0xFFFFFFFFFFFFFFF8);
LABEL_425:
      (*(void (**)(void *, const void *, uint64_t))(v1641 + 32))(v422, v423, v1640);
      id v505 = (void *)(((unint64_t)v422 + v1646) & 0xFFFFFFFFFFFFFFF8);
      *id v505 = *v426;
      unint64_t v506 = ((unint64_t)v505 + v1635) & v67;
      unint64_t v507 = ((unint64_t)v426 + v1635) & v371;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v1637 + 32))(v506, v507, v1636);
      unint64_t v504 = a2;
      size_t v425 = v1697;
      uint64_t v508 = (void *)((v1631 + v506) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v509 = (void *)((v1631 + v507) & 0xFFFFFFFFFFFFFFF8);
      void *v508 = *v509;
      *(_OWORD *)(((unint64_t)v508 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v509 + 15) & 0xFFFFFFFFFFFFFFF8);
LABEL_426:
      uint64_t v510 = (uint64_t)v423 + v425 + 10;
      *((unsigned char *)v422 + v425) = *((unsigned char *)v423 + v425);
      *(unsigned char *)(((unint64_t)v422 + v425) | 1) = *(unsigned char *)(((unint64_t)v423 + v425) | 1);
      *(unsigned char *)(((unint64_t)v422 + v425) | 2) = *(unsigned char *)(((unint64_t)v423 + v425) | 2);
      unint64_t v511 = ((unint64_t)v422 + v425 + 10) & 0xFFFFFFFFFFFFFFF8;
      long long v512 = *(_OWORD *)(v510 & 0xFFFFFFFFFFFFFFF8);
      *(unsigned char *)(v511 + 16) = *(unsigned char *)((v510 & 0xFFFFFFFFFFFFFFF8) + 16);
      *(_OWORD *)unint64_t v511 = v512;
      unint64_t v513 = ((unint64_t)v422 + v425 + 34) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v514 = ((unint64_t)v423 + v425 + 34) & 0xFFFFFFFFFFFFFFF8;
      long long v515 = *(_OWORD *)v514;
      long long v516 = *(_OWORD *)(v514 + 16);
      long long v517 = *(_OWORD *)(v514 + 32);
      *(void *)(v513 + 48) = *(void *)(v514 + 48);
      *(_OWORD *)(v513 + 16) = v516;
      *(_OWORD *)(v513 + 32) = v517;
      *(_OWORD *)unint64_t v513 = v515;
      uint64_t v518 = (void *)((v513 + 63) & 0xFFFFFFFFFFFFFFF8);
      long long v519 = (void *)((v514 + 63) & 0xFFFFFFFFFFFFFFF8);
      *uint64_t v518 = *v519;
      *(void *)(((unint64_t)v518 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v519 + 15) & 0xFFFFFFFFFFFFFFF8);
      long long v520 = (void *)(((unint64_t)a1 + v1612) & v417);
      long long v521 = (const void *)((unint64_t)&v504[v1612] & v417);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v373 + 48))(v521, 1, v1660))
      {
        memcpy(v520, v521, v1593);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v373 + 32))(v520, v521, v1660);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v373 + 56))(v520, 0, 1, v1660);
      }
      uint64_t v307 = v1668;
      uint64_t v522 = (void *)(((unint64_t)v520 + v1613) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v523 = (void *)(((unint64_t)v521 + v1613) & 0xFFFFFFFFFFFFFFF8);
      *uint64_t v522 = *v523;
      unint64_t v524 = ((unint64_t)v522 + 15) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v525 = ((unint64_t)v523 + 15) & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v524 = *(void *)v525;
      *(unsigned char *)(v524 + 8) = *(unsigned char *)(v525 + 8);
      uint64_t v526 = (void *)((v1614 + v524) & v1663);
      long long v527 = (const void *)((v1614 + v525) & v1663);
      if (v1624 == v1634)
      {
        int v528 = (*(uint64_t (**)(const void *))(v1643 + 48))(v527);
      }
      else
      {
        uint64_t v529 = v1666;
        unint64_t v530 = (uint64_t *)(((unint64_t)v527 + v1666) & 0xFFFFFFFFFFFFFFF8);
        if (v1618 <= 0x7FFFFFFE)
        {
          uint64_t v531 = *v530;
          if ((unint64_t)*v530 >= 0xFFFFFFFF) {
            LODWORD(v531) = -1;
          }
          if ((v531 + 1) >= 2) {
            goto LABEL_440;
          }
          goto LABEL_442;
        }
        int v528 = (*(uint64_t (**)(unint64_t))(v1645 + 48))(((unint64_t)v530 + v1644) & v1579);
      }
      uint64_t v529 = v1666;
      if (v528)
      {
LABEL_440:
        unint64_t v532 = v1587;
        memcpy(v526, v527, v1587);
        goto LABEL_443;
      }
      unint64_t v530 = (uint64_t *)(((unint64_t)v527 + v1666) & 0xFFFFFFFFFFFFFFF8);
LABEL_442:
      uint64_t v533 = v529;
      (*(void (**)(void *, const void *, uint64_t))(v1643 + 32))(v526, v527, v1642);
      id v534 = (void *)(((unint64_t)v526 + v533) & 0xFFFFFFFFFFFFFFF8);
      void *v534 = *v530;
      unint64_t v535 = ((unint64_t)v534 + v1644) & v1579;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v1645 + 32))(v535, ((unint64_t)v530 + v1644) & v1579, v1638);
      unsigned int v536 = (void *)((v1632 + v535) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v307 = v1668;
      unint64_t v537 = (void *)((v1632 + (((unint64_t)v530 + v1644) & v1579)) & 0xFFFFFFFFFFFFFFF8);
      *unsigned int v536 = *v537;
      *(_OWORD *)(((unint64_t)v536 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v537 + 15) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v532 = v1587;
LABEL_443:
      *((unsigned char *)v526 + v532) = *((unsigned char *)v527 + v532);
      *(unsigned char *)(((unint64_t)v526 + v532) | 1) = *(unsigned char *)(((unint64_t)v527 + v532) | 1);
      *(unsigned char *)(((unint64_t)v526 + v532) | 2) = *(unsigned char *)(((unint64_t)v527 + v532) | 2);
      unint64_t v538 = ((unint64_t)v526 + v532 + 10) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v539 = ((unint64_t)v527 + v532 + 10) & 0xFFFFFFFFFFFFFFF8;
      long long v540 = *(_OWORD *)v539;
      *(unsigned char *)(v538 + 16) = *(unsigned char *)(v539 + 16);
      *(_OWORD *)unint64_t v538 = v540;
      unint64_t v541 = ((unint64_t)v526 + v532 + 34) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v542 = ((unint64_t)v527 + v532 + 34) & 0xFFFFFFFFFFFFFFF8;
      long long v543 = *(_OWORD *)v542;
      long long v544 = *(_OWORD *)(v542 + 16);
      long long v545 = *(_OWORD *)(v542 + 32);
      *(void *)(v541 + 48) = *(void *)(v542 + 48);
      *(_OWORD *)(v541 + 16) = v544;
      *(_OWORD *)(v541 + 32) = v545;
      *(_OWORD *)unint64_t v541 = v543;
      uint64_t v546 = (void *)((v542 + 63) & 0xFFFFFFFFFFFFFFF8);
      unsigned int v547 = (void *)((v541 + 63) & 0xFFFFFFFFFFFFFFF8);
      *unsigned int v547 = *v546;
      *(void *)(((unint64_t)v547 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v546 + 15) & 0xFFFFFFFFFFFFFFF8);
      *((unsigned char *)v520 + v1615) = *((unsigned char *)v521 + v1615);
      unint64_t v548 = ((unint64_t)v520 + v1615) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v549 = ((unint64_t)v521 + v1615) & 0xFFFFFFFFFFFFFFF8;
      *(void *)(v548 + 8) = *(void *)(v549 + 8);
      unsigned int v550 = (_OWORD *)((v548 + 23) & 0xFFFFFFFFFFFFFFF8);
      unsigned int v551 = (_OWORD *)((v549 + 23) & 0xFFFFFFFFFFFFFFF8);
      _OWORD *v550 = *v551;
      unint64_t v552 = ((unint64_t)v550 + 23) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v553 = ((unint64_t)v551 + 23) & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v552 = *(void *)v553;
      *(unsigned char *)(v552 + 8) = *(unsigned char *)(v553 + 8);
      *(void *)(((unint64_t)v550 + 39) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v551 + 39) & 0xFFFFFFFFFFFFFFF8);
      if (v307 <= 3)
      {
        unsigned int v554 = ((1 << (8 * v307)) + 5) >> (8 * v307);
        if (v554 > 0xFFD6)
        {
          int v555 = 36;
          goto LABEL_1409;
        }
        if (v554 > 0xD6)
        {
          *(_WORD *)((char *)a1 + v307) = 36;
          return v86;
        }
      }
      *((unsigned char *)a1 + v307) = 36;
      return v86;
    case 0x25u:
      unsigned int v374 = a2[v1669];
      unsigned int v375 = v374 - 2;
      if (v374 < 2)
      {
        uint64_t v86 = a1;
        uint64_t v377 = v1660;
        uint64_t v381 = AssociatedTypeWitness;
        size_t v379 = v1700;
        uint64_t v378 = v1705;
        uint64_t v382 = v1658;
        uint64_t v380 = v1668;
      }
      else
      {
        if (v1669 <= 3) {
          uint64_t v376 = v1669;
        }
        else {
          uint64_t v376 = 4;
        }
        uint64_t v377 = v1660;
        size_t v379 = v1700;
        uint64_t v378 = v1705;
        uint64_t v380 = v1668;
        uint64_t v86 = a1;
        uint64_t v381 = AssociatedTypeWitness;
        uint64_t v382 = v1658;
        switch(v376)
        {
          case 1:
            int v383 = *a2;
            goto LABEL_874;
          case 2:
            int v383 = *(unsigned __int16 *)a2;
            goto LABEL_874;
          case 3:
            int v383 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_874;
          case 4:
            int v383 = *(_DWORD *)a2;
LABEL_874:
            if (v1669 < 4) {
              unsigned int v374 = (v383 | (v375 << (8 * v1669))) + 2;
            }
            else {
              unsigned int v374 = v383 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v667 = v374 == 1;
      if (v374 == 1) {
        uint64_t v668 = v378;
      }
      else {
        uint64_t v668 = v382;
      }
      if (v374 == 1) {
        uint64_t v669 = v377;
      }
      else {
        uint64_t v669 = v381;
      }
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t, unint64_t))(v668 + 32))(v86, a2, v669, v69);
      v86[v1669] = v667;
      v86[v379] = a2[v379];
      if (v380 > 3) {
        goto LABEL_884;
      }
      unsigned int v670 = ((1 << (8 * v380)) + 5) >> (8 * v380);
      if (v670 > 0xFFD6)
      {
        *(_DWORD *)&v86[v380] = 37;
      }
      else if (v670 <= 0xD6)
      {
LABEL_884:
        v86[v380] = 37;
      }
      else
      {
        *(_WORD *)&v86[v380] = 37;
      }
      return v86;
    case 0x26u:
      unsigned int v384 = a2[v1669];
      unsigned int v385 = v384 - 2;
      if (v384 < 2)
      {
        uint64_t v86 = a1;
        uint64_t v387 = v1705;
        uint64_t v389 = v1658;
        uint64_t v388 = v1668;
      }
      else
      {
        if (v1669 <= 3) {
          uint64_t v386 = v1669;
        }
        else {
          uint64_t v386 = 4;
        }
        uint64_t v387 = v1705;
        uint64_t v388 = v1668;
        uint64_t v86 = a1;
        uint64_t v389 = v1658;
        switch(v386)
        {
          case 1:
            int v390 = *a2;
            goto LABEL_892;
          case 2:
            int v390 = *(unsigned __int16 *)a2;
            goto LABEL_892;
          case 3:
            int v390 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_892;
          case 4:
            int v390 = *(_DWORD *)a2;
LABEL_892:
            if (v1669 < 4) {
              unsigned int v384 = (v390 | (v385 << (8 * v1669))) + 2;
            }
            else {
              unsigned int v384 = v390 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v671 = v384 == 1;
      if (v384 == 1) {
        uint64_t v672 = v387;
      }
      else {
        uint64_t v672 = v389;
      }
      (*(void (**)(unsigned char *))(v672 + 32))(v86);
      v86[v1669] = v671;
      if (v388 > 3) {
        goto LABEL_899;
      }
      unsigned int v673 = ((1 << (8 * v388)) + 5) >> (8 * v388);
      if (v673 > 0xFFD6)
      {
        *(_DWORD *)&v86[v388] = 38;
      }
      else if (v673 <= 0xD6)
      {
LABEL_899:
        v86[v388] = 38;
      }
      else
      {
        *(_WORD *)&v86[v388] = 38;
      }
      return v86;
    case 0x27u:
      unsigned int v391 = a2[v1669];
      unsigned int v392 = v391 - 2;
      if (v391 < 2)
      {
        uint64_t v86 = a1;
        uint64_t v394 = v1705;
        uint64_t v396 = v1658;
        uint64_t v395 = v1668;
      }
      else
      {
        if (v1669 <= 3) {
          uint64_t v393 = v1669;
        }
        else {
          uint64_t v393 = 4;
        }
        uint64_t v394 = v1705;
        uint64_t v395 = v1668;
        uint64_t v86 = a1;
        uint64_t v396 = v1658;
        switch(v393)
        {
          case 1:
            int v397 = *a2;
            goto LABEL_907;
          case 2:
            int v397 = *(unsigned __int16 *)a2;
            goto LABEL_907;
          case 3:
            int v397 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_907;
          case 4:
            int v397 = *(_DWORD *)a2;
LABEL_907:
            if (v1669 < 4) {
              unsigned int v391 = (v397 | (v392 << (8 * v1669))) + 2;
            }
            else {
              unsigned int v391 = v397 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v674 = v391 == 1;
      if (v391 == 1) {
        uint64_t v675 = v394;
      }
      else {
        uint64_t v675 = v396;
      }
      (*(void (**)(unsigned char *))(v675 + 32))(v86);
      v86[v1669] = v674;
      if (v395 > 3) {
        goto LABEL_914;
      }
      unsigned int v676 = ((1 << (8 * v395)) + 5) >> (8 * v395);
      if (v676 > 0xFFD6)
      {
        *(_DWORD *)&v86[v395] = 39;
      }
      else if (v676 <= 0xD6)
      {
LABEL_914:
        v86[v395] = 39;
      }
      else
      {
        *(_WORD *)&v86[v395] = 39;
      }
      return v86;
    case 0x28u:
      unsigned int v398 = a2[v1669];
      unsigned int v399 = v398 - 2;
      if (v398 < 2)
      {
        uint64_t v86 = a1;
        uint64_t v401 = v1705;
        uint64_t v403 = v1658;
        uint64_t v402 = v1668;
      }
      else
      {
        if (v1669 <= 3) {
          uint64_t v400 = v1669;
        }
        else {
          uint64_t v400 = 4;
        }
        uint64_t v401 = v1705;
        uint64_t v402 = v1668;
        uint64_t v86 = a1;
        uint64_t v403 = v1658;
        switch(v400)
        {
          case 1:
            int v404 = *a2;
            goto LABEL_922;
          case 2:
            int v404 = *(unsigned __int16 *)a2;
            goto LABEL_922;
          case 3:
            int v404 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_922;
          case 4:
            int v404 = *(_DWORD *)a2;
LABEL_922:
            if (v1669 < 4) {
              unsigned int v398 = (v404 | (v399 << (8 * v1669))) + 2;
            }
            else {
              unsigned int v398 = v404 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v677 = v398 == 1;
      if (v398 == 1) {
        uint64_t v678 = v401;
      }
      else {
        uint64_t v678 = v403;
      }
      (*(void (**)(unsigned char *))(v678 + 32))(v86);
      v86[v1669] = v677;
      if (v402 > 3) {
        goto LABEL_929;
      }
      unsigned int v679 = ((1 << (8 * v402)) + 5) >> (8 * v402);
      if (v679 > 0xFFD6)
      {
        *(_DWORD *)&v86[v402] = 40;
      }
      else if (v679 <= 0xD6)
      {
LABEL_929:
        v86[v402] = 40;
      }
      else
      {
        *(_WORD *)&v86[v402] = 40;
      }
      return v86;
    default:
      goto LABEL_128;
  }
}

unsigned __int8 *sub_1001B76C8(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 == a2) {
    return a1;
  }
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  uint64_t v2014 = *(void *)(a3 + 24);
  uint64_t v2033 = swift_getAssociatedTypeWitness();
  uint64_t v2060 = *(void *)(v2033 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v2060 + 80);
  uint64_t v1963 = v6 + v7;
  uint64_t v2042 = v7;
  unint64_t v2026 = (v6 + v7) & ~v7;
  unint64_t v8 = *(void *)(v2060 + 64);
  unint64_t v2028 = v8;
  unint64_t v9 = v2026 + v8;
  unint64_t v2045 = v2026 + v8;
  if (v8 <= v6) {
    unint64_t v8 = v6;
  }
  unint64_t v10 = v6;
  unint64_t v11 = v8 + 1;
  unint64_t v2056 = v8;
  size_t v2057 = v8 + 1;
  if (v8 + 1 > v9) {
    unint64_t v9 = v8 + 1;
  }
  uint64_t v12 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v13 = v12 | *(unsigned __int8 *)(v2060 + 80);
  uint64_t v2047 = v13;
  unint64_t v1997 = v13 + v11;
  unint64_t v2046 = ((v13 + v11) & ~v13) + v11;
  if (v2046 > v9) {
    unint64_t v9 = ((v13 + v11) & ~v13) + v11;
  }
  unint64_t v2044 = v9;
  uint64_t v2040 = v5;
  unsigned int v14 = *(_DWORD *)(v5 + 84);
  uint64_t v2015 = v4;
  uint64_t v1983 = swift_getAssociatedTypeWitness();
  uint64_t v15 = *(void *)(v1983 - 8);
  unsigned int v16 = *(_DWORD *)(v15 + 84);
  uint64_t v1978 = swift_getAssociatedTypeWitness();
  uint64_t v17 = *(void *)(v1978 - 8);
  unsigned int v18 = *(_DWORD *)(v17 + 84);
  unsigned int v1938 = v18;
  unsigned int v1966 = v16;
  if (v16 > v18) {
    unsigned int v18 = v16;
  }
  unsigned int v1951 = v18;
  if (v18 <= 0x7FFFFFFE) {
    unsigned int v18 = 2147483646;
  }
  unsigned int v2030 = v14;
  unsigned int v1968 = v18;
  if (v18 > v14) {
    unsigned int v14 = v18;
  }
  uint64_t v2003 = sub_10096B0E0();
  uint64_t v19 = *(void *)(v2003 - 8);
  unsigned int v20 = *(_DWORD *)(v19 + 84);
  if (v20 <= 0x7FFFFFFE) {
    unsigned int v21 = 2147483646;
  }
  else {
    unsigned int v21 = *(_DWORD *)(v19 + 84);
  }
  unsigned int v2021 = v21;
  if (v14 > v21) {
    unsigned int v21 = v14;
  }
  unsigned int v1948 = v21;
  if (v21 <= 0x7FFFFFFF) {
    unsigned int v21 = 0x7FFFFFFF;
  }
  unsigned int v1971 = v21;
  unsigned int v1982 = *(_DWORD *)(v19 + 84);
  unint64_t v2029 = v10;
  uint64_t v1990 = v10 + v12;
  uint64_t v2041 = v12;
  uint64_t v1984 = v15;
  uint64_t v1979 = v17;
  uint64_t v22 = *(unsigned __int8 *)(v17 + 80);
  uint64_t v23 = *(_DWORD *)(v15 + 80) & 0xF8 | v22 | 7;
  uint64_t v1962 = v10 + v23;
  uint64_t v2050 = v23;
  uint64_t v1987 = *(void *)(v15 + 64) + 7;
  uint64_t v1976 = v22 + 8;
  uint64_t v2031 = v22;
  uint64_t v1972 = *(void *)(v17 + 64) + 7;
  size_t v2034 = ((((v1972 + ((v22 + 8 + (v1987 & 0xFFFFFFFFFFFFFFF8)) & ~v22)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
        + 16;
  uint64_t v2001 = *(void *)(v2003 - 8);
  uint64_t v24 = *(unsigned __int8 *)(v19 + 80);
  uint64_t v2036 = (v24 | 7) + 16;
  uint64_t v1999 = v24 + 12;
  size_t v25 = *(void *)(v19 + 64);
  uint64_t v1996 = v25 + v24;
  size_t v1964 = v25 + 12;
  size_t v1992 = v25;
  uint64_t v1993 = v24 + 10;
  if (v20) {
    size_t v26 = *(void *)(v19 + 64);
  }
  else {
    size_t v26 = v25 + 1;
  }
  size_t v2039 = v26;
  size_t v1994 = v26 + 7;
  unint64_t v2007 = (v24
         + 10
         + ((((((v25 + 12 + ((v25 + v24 + ((v24 + 12) & ~v24)) & ~v24)) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)
           + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v24;
  unint64_t v2035 = ((((((((((v26 + 7 + v2007) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
            + 19) & 0xFFFFFFFFFFFFFFF8)
          + 25) & 0xFFFFFFFFFFFFFFF8)
        + 16;
  uint64_t v2008 = (v2036 + v2034 + ((v10 + v23 + ((v10 + v12) & ~v12)) & ~v23)) & ~(v24 | 7);
  unint64_t v27 = (((v2008 + v2035 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  size_t v2049 = v27 + 16;
  uint64_t v28 = *(_DWORD *)(v15 + 80) & 0xF8 | v22 | 7 | v12 | v24;
  unint64_t v1942 = v27 + 16 + v28;
  unint64_t v2025 = v27 + 23;
  unint64_t v2023 = ((v27 + 23 + (v1942 & ~v28)) & 0xFFFFFFFFFFFFFFF8) + 8;
  unsigned int v29 = *(_DWORD *)(v2060 + 84);
  uint64_t v1985 = swift_getAssociatedTypeWitness();
  uint64_t v30 = *(void *)(v1985 - 8);
  unsigned int v31 = *(_DWORD *)(v30 + 84);
  uint64_t v1980 = swift_getAssociatedTypeWitness();
  uint64_t v32 = *(void *)(v1980 - 8);
  unsigned int v33 = *(_DWORD *)(v32 + 84);
  unsigned int v1939 = v33;
  unsigned int v1967 = v31;
  if (v31 > v33) {
    unsigned int v33 = v31;
  }
  unsigned int v1952 = v33;
  if (v33 <= 0x7FFFFFFE) {
    unsigned int v33 = 2147483646;
  }
  unsigned int v1969 = v33;
  if (v33 <= v29) {
    unsigned int v33 = v29;
  }
  if (v33 <= v2021) {
    unsigned int v33 = v2021;
  }
  unsigned int v1947 = v33;
  if (v33 <= 0x7FFFFFFF) {
    unsigned int v33 = 0x7FFFFFFF;
  }
  unsigned int v1970 = v33;
  uint64_t v1989 = v2028 + v2042;
  uint64_t v1986 = v30;
  uint64_t v1981 = *(void *)(v1980 - 8);
  uint64_t v34 = *(unsigned __int8 *)(v32 + 80);
  uint64_t v35 = *(_DWORD *)(v30 + 80) & 0xF8 | v34 | 7;
  uint64_t v1961 = v2028 + v35;
  uint64_t v1988 = *(void *)(v30 + 64) + 7;
  uint64_t v1977 = v34 + 8;
  uint64_t v1973 = *(void *)(v1981 + 64) + 7;
  unint64_t v36 = ((((v1973 + ((v34 + 8 + (v1988 & 0xFFFFFFFFFFFFFFF8)) & ~v34)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  uint64_t v1949 = (v2036 + v36 + ((v2028 + v35 + ((v2028 + v2042) & ~v2042)) & ~v35)) & ~(v24 | 7);
  unint64_t v37 = (((v1949 + v2035 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  size_t v38 = v37 + 16;
  uint64_t v39 = v35 | v2042;
  uint64_t v40 = v35 | v2042 | v24;
  unint64_t v1941 = v37 + 16 + v40;
  unint64_t v41 = v37 + (v1941 & ~v40);
  uint64_t v2043 = v28;
  unint64_t v1936 = v28 + v10;
  size_t v42 = v2049 + ((v28 + v10) & ~v28);
  unsigned int v1965 = v29;
  if (v29) {
    size_t v43 = v2028;
  }
  else {
    size_t v43 = v2028 + 1;
  }
  uint64_t v44 = *(void *)(v2015 - 8);
  uint64_t v45 = *(unsigned __int8 *)(v44 + 80);
  unint64_t v46 = (v42 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v47 = ((((((v43 + v35 + ((v42 + v2042) & ~v2042)) & ~v35) + v36 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  size_t v1934 = v43 + v35;
  if (*(_DWORD *)(v44 + 84)) {
    uint64_t v48 = *(void *)(*(void *)(v2015 - 8) + 64);
  }
  else {
    uint64_t v48 = *(void *)(*(void *)(v2015 - 8) + 64) + 1;
  }
  if (v10 <= ((v46 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) {
    unint64_t v49 = ((v46 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  else {
    unint64_t v49 = v10;
  }
  if (v47 <= v36 + ((v43 + v35 + v2026) & ~v35) + 16) {
    unint64_t v47 = v36 + ((v43 + v35 + v2026) & ~v35) + 16;
  }
  unint64_t v50 = ((v46 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  uint64_t v1930 = v10 + v45;
  if (v50 <= ((v10 + v45) & ~v45) + v48) {
    unint64_t v50 = ((v10 + v45) & ~v45) + v48;
  }
  if (v49 <= v47) {
    unint64_t v49 = v47;
  }
  if (v49 <= v50) {
    unint64_t v51 = v50;
  }
  else {
    unint64_t v51 = v49;
  }
  if (v2030) {
    size_t v52 = v10;
  }
  else {
    size_t v52 = v10 + 1;
  }
  uint64_t v53 = *(void *)(v2014 - 8);
  uint64_t v54 = *(unsigned __int8 *)(v53 + 80);
  unint64_t v1935 = v40 + v2028;
  size_t v55 = v38 + ((v40 + v2028) & ~v40);
  unint64_t v56 = (v55 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v57 = ((((((v52 + v2050 + ((v55 + v2041) & ~v2041)) & ~v2050) + v2034 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  uint64_t v1929 = v2028 + v2041;
  size_t v1933 = v52 + v2050;
  if (*(_DWORD *)(v53 + 84)) {
    uint64_t v58 = *(void *)(*(void *)(v2014 - 8) + 64);
  }
  else {
    uint64_t v58 = *(void *)(*(void *)(v2014 - 8) + 64) + 1;
  }
  uint64_t v59 = v35;
  if (v2028 <= ((v56 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) {
    unint64_t v60 = ((v56 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  else {
    unint64_t v60 = v2028;
  }
  if (v57 <= v2034 + ((v52 + v2050 + ((v2028 + v2041) & ~v2041)) & ~v2050) + 16) {
    unint64_t v57 = v2034 + ((v52 + v2050 + ((v2028 + v2041) & ~v2041)) & ~v2050) + 16;
  }
  unint64_t v61 = ((v56 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  uint64_t v1928 = v2028 + v54;
  size_t v1924 = v58;
  if (v61 <= ((v2028 + v54) & ~v54) + v58) {
    unint64_t v61 = ((v2028 + v54) & ~v54) + v58;
  }
  if (v60 <= v57) {
    unint64_t v60 = v57;
  }
  if (v60 <= v61) {
    unint64_t v62 = v61;
  }
  else {
    unint64_t v62 = v60;
  }
  unint64_t v63 = v2056;
  unint64_t v1950 = v51;
  if (v62 + 1 <= v51 + 1) {
    unint64_t v64 = v51 + 1;
  }
  else {
    unint64_t v64 = v62 + 1;
  }
  unint64_t v65 = v2056 + 2;
  unint64_t v2027 = v2056 + 2;
  if (v2057 > v2056 + 2) {
    unint64_t v65 = v2056 + 1;
  }
  if (v65 <= v2023) {
    unint64_t v65 = v2023;
  }
  size_t __n = v52;
  unint64_t v1955 = ((((((((v2050 + ((((v52 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 9) & ~v2050) + v2034 + 34) & 0xFFFFFFFFFFFFFFF8)
            + 63) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + v39
        + 8;
  size_t v1956 = v43 + 7;
  unint64_t v1995 = ((((v1973 + ((v34 + 8 + (v1988 & 0xFFFFFFFFFFFFFFF8)) & ~v34)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
        + 16;
  uint64_t v1957 = v35 + 9;
  unint64_t v1958 = ((((((((v35 + 9 + ((((v43 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v35) + v36 + 34) & 0xFFFFFFFFFFFFFFF8)
            + 63) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 8;
  unint64_t v2017 = ((v41 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v65 <= v2017) {
    unint64_t v65 = ((v41 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  if (v65 <= v2049) {
    unint64_t v65 = v2049;
  }
  size_t v66 = v38;
  if (v65 <= v38) {
    unint64_t v65 = v38;
  }
  unint64_t v2016 = v2046 + 2;
  if (v65 <= v2046 + 2) {
    unint64_t v65 = v2046 + 2;
  }
  unint64_t v2019 = ((v2056 + 9) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v65 <= v2019) {
    unint64_t v65 = ((v2056 + 9) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  unint64_t v2020 = (v2056 & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v65 <= v2020) {
    unint64_t v65 = (v2056 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  if (v65 <= v2045) {
    unint64_t v65 = v2045;
  }
  unint64_t v2022 = ((v2047 + 1) & ~v2047) + v2057;
  if (v65 <= v2022) {
    unint64_t v65 = ((v2047 + 1) & ~v2047) + v2057;
  }
  unint64_t v2018 = v64 + 1;
  if (v65 <= v64 + 1) {
    unint64_t v65 = v64 + 1;
  }
  if (v65 <= v2046) {
    unint64_t v65 = v2046;
  }
  unint64_t v2024 = ((((v1958 + (v1955 & ~v39) + 23) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v65 <= v2024) {
    unint64_t v65 = ((((v1958 + (v1955 & ~v39) + 23) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  if (v65 <= v2044) {
    unint64_t v65 = v2044;
  }
  if (v65 <= 0x38) {
    uint64_t v67 = 56;
  }
  else {
    uint64_t v67 = v65;
  }
  unint64_t v68 = &a1[v67];
  size_t v1937 = v43;
  uint64_t v1931 = *(void *)(v2014 - 8);
  uint64_t v1932 = *(void *)(v2015 - 8);
  size_t v1925 = v48;
  if (v67 > 3) {
    goto LABEL_105;
  }
  unsigned int v70 = ((1 << (8 * v67)) + 5) >> (8 * v67);
  if (v70 > 0xFFD6)
  {
    unsigned int v69 = *(_DWORD *)v68;
  }
  else
  {
    if (v70 <= 0xD6)
    {
LABEL_105:
      unsigned int v69 = *v68;
      goto LABEL_110;
    }
    unsigned int v69 = *(unsigned __int16 *)v68;
  }
LABEL_110:
  unsigned int v71 = v69 - 41;
  uint64_t v72 = v2033;
  uint64_t v73 = AssociatedTypeWitness;
  unint64_t v1953 = v62;
  if (v69 >= 0x29)
  {
    if (v67 <= 3) {
      uint64_t v74 = v67;
    }
    else {
      uint64_t v74 = 4;
    }
    switch(v74)
    {
      case 1:
        int v75 = *a1;
        if (v67 < 4) {
          goto LABEL_122;
        }
        goto LABEL_123;
      case 2:
        int v75 = *(unsigned __int16 *)a1;
        if (v67 >= 4) {
          goto LABEL_123;
        }
        goto LABEL_122;
      case 3:
        int v75 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        if (v67 >= 4) {
          goto LABEL_123;
        }
        goto LABEL_122;
      case 4:
        int v75 = *(_DWORD *)a1;
        if (v67 < 4) {
LABEL_122:
        }
          v75 |= v71 << (8 * v67);
LABEL_123:
        unsigned int v69 = v75 + 41;
        break;
      default:
        break;
    }
  }
  uint64_t v2005 = ~v2042;
  uint64_t v2004 = ~v2047;
  uint64_t v1991 = ~v2041;
  uint64_t v2002 = ~v2050;
  uint64_t v1974 = ~v2031;
  uint64_t v1998 = ~(v24 | 7);
  uint64_t v2000 = ~v24;
  uint64_t v2032 = ~v2043;
  uint64_t v2006 = ~v35;
  uint64_t v1975 = ~v34;
  uint64_t v1940 = v35 | v2042 | v24;
  uint64_t v1960 = ~v40;
  uint64_t v1927 = ~v45;
  uint64_t v1926 = ~v54;
  uint64_t v1954 = ~v39;
  size_t v76 = v2039;
  uint64_t v77 = a2;
  switch(v69)
  {
    case 0u:
    case 0x12u:
      uint64_t v78 = v67;
      (*(void (**)(unsigned __int8 *, uint64_t))(v2040 + 8))(a1, AssociatedTypeWitness);
      (*(void (**)(unint64_t, uint64_t))(v2060 + 8))((unint64_t)&a1[v1963] & v2005, v2033);
      uint64_t v67 = v78;
      size_t v76 = v2039;
      unint64_t v63 = v2056;
      goto LABEL_321;
    case 1u:
      unsigned int v81 = a1[v2056];
      unsigned int v82 = v81 - 2;
      if (v81 >= 2)
      {
        if (v2056 <= 3) {
          uint64_t v83 = v2056;
        }
        else {
          uint64_t v83 = 4;
        }
        switch(v83)
        {
          case 1:
            goto LABEL_308;
          case 2:
            goto LABEL_310;
          case 3:
            goto LABEL_312;
          case 4:
            goto LABEL_314;
          default:
            goto LABEL_316;
        }
      }
      goto LABEL_316;
    case 2u:
      unsigned int v81 = a1[v2056];
      unsigned int v82 = v81 - 2;
      if (v81 >= 2)
      {
        if (v2056 <= 3) {
          uint64_t v84 = v2056;
        }
        else {
          uint64_t v84 = 4;
        }
        switch(v84)
        {
          case 1:
            goto LABEL_308;
          case 2:
            goto LABEL_310;
          case 3:
            goto LABEL_312;
          case 4:
            goto LABEL_314;
          default:
            goto LABEL_316;
        }
      }
      goto LABEL_316;
    case 3u:
      unsigned int v81 = a1[v2056];
      unsigned int v82 = v81 - 2;
      if (v81 >= 2)
      {
        if (v2056 <= 3) {
          uint64_t v85 = v2056;
        }
        else {
          uint64_t v85 = 4;
        }
        switch(v85)
        {
          case 1:
            goto LABEL_308;
          case 2:
            goto LABEL_310;
          case 3:
            goto LABEL_312;
          case 4:
            goto LABEL_314;
          default:
            goto LABEL_316;
        }
      }
      goto LABEL_316;
    case 4u:
      unsigned int v86 = a1[v2056];
      unsigned int v87 = v86 - 2;
      if (v86 >= 2)
      {
        if (v2056 <= 3) {
          uint64_t v88 = v2056;
        }
        else {
          uint64_t v88 = 4;
        }
        switch(v88)
        {
          case 1:
            int v89 = *a1;
            goto LABEL_773;
          case 2:
            int v89 = *(unsigned __int16 *)a1;
            goto LABEL_773;
          case 3:
            int v89 = *(unsigned __int16 *)a1 | (a1[2] << 16);
            goto LABEL_773;
          case 4:
            int v89 = *(_DWORD *)a1;
LABEL_773:
            if (v2056 < 4) {
              unsigned int v86 = (v89 | (v87 << (8 * v2056))) + 2;
            }
            else {
              unsigned int v86 = v89 + 2;
            }
            break;
          default:
            break;
        }
      }
      uint64_t v125 = v67;
      size_t v126 = v2039;
      uint64_t v628 = v2060;
      if (v86 == 1)
      {
        uint64_t v629 = v2033;
      }
      else
      {
        uint64_t v628 = v2040;
        uint64_t v629 = AssociatedTypeWitness;
      }
      (*(void (**)(unsigned __int8 *, uint64_t))(v628 + 8))(a1, v629);
      char v630 = v2056;
      uint64_t v631 = (unsigned __int8 *)((unint64_t)&a1[v1997] & v2004);
      unsigned int v632 = v631[v2056];
      unsigned int v633 = v632 - 2;
      if (v632 >= 2)
      {
        if (v2056 <= 3) {
          uint64_t v634 = v2056;
        }
        else {
          uint64_t v634 = 4;
        }
        switch(v634)
        {
          case 1:
            int v635 = *v631;
            goto LABEL_869;
          case 2:
            int v635 = *(unsigned __int16 *)v631;
            goto LABEL_869;
          case 3:
            int v635 = *(unsigned __int16 *)v631 | (*(unsigned __int8 *)(((unint64_t)&a1[v1997] & v2004) + 2) << 16);
            goto LABEL_869;
          case 4:
            int v635 = *(_DWORD *)v631;
LABEL_869:
            if (v2056 >= 4) {
              goto LABEL_870;
            }
            goto LABEL_875;
          default:
            goto LABEL_876;
        }
      }
      goto LABEL_876;
    case 5u:
      unsigned int v90 = v1971;
      uint64_t v1911 = v67;
      if (v2030 == v1971)
      {
        int v91 = (*(uint64_t (**)(unsigned __int8 *))(v2040 + 48))(a1);
        unsigned int v90 = v1971;
        goto LABEL_1450;
      }
      unint64_t v453 = (unint64_t)&a1[v1990] & v1991;
      unint64_t v454 = (v453 + v2029 + v2050) & v2002;
      if (v1968 == v1971)
      {
        if (v1966 == v1968)
        {
          int v91 = (*(uint64_t (**)(unint64_t))(v1984 + 48))((v453 + v2029 + v2050) & v2002);
LABEL_1449:
          unsigned int v90 = v1971;
          goto LABEL_1450;
        }
        BOOL v620 = (unint64_t *)((v1987 + v454) & 0xFFFFFFFFFFFFFFF8);
        if (v1951 > 0x7FFFFFFE)
        {
          int v91 = (*(uint64_t (**)(unint64_t))(v1979 + 48))(((unint64_t)v620 + v1976) & v1974);
          goto LABEL_1449;
        }
        unint64_t v621 = *v620;
      }
      else
      {
        size_t v552 = v2034 + v454;
        if ((v1948 & 0x80000000) == 0)
        {
          unint64_t v553 = *(void *)(v552 + 8);
          if (v553 >= 0xFFFFFFFF) {
            LODWORD(v553) = -1;
          }
          int v91 = v553 + 1;
LABEL_1450:
          if (v91) {
            goto LABEL_1463;
          }
          unint64_t v453 = (unint64_t)&a1[v1990] & v1991;
          unint64_t v454 = (v453 + v2029 + v2050) & v2002;
LABEL_1452:
          unint64_t v1919 = v64;
          long long v832 = *(void (**)(unsigned __int8 *, uint64_t))(v2040 + 8);
          v832(a1, AssociatedTypeWitness);
          v832((unsigned __int8 *)v453, AssociatedTypeWitness);
          (*(void (**)(unint64_t, uint64_t))(v1984 + 8))(v454, v1983);
          swift_bridgeObjectRelease();
          (*(void (**)(unint64_t, uint64_t))(v1979 + 8))((v1976 + ((v1987 + v454) & 0xFFFFFFFFFFFFFFF8)) & v1974, v1978);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          size_t v833 = (v2036 + v2034 + v454) & v1998;
          unint64_t v834 = *(void (**)(size_t, uint64_t))(v2001 + 8);
          v834((v1999 + v833) & v2000, v2003);
          size_t v835 = (v1996 + ((v1999 + v833) & v2000)) & v2000;
          v834(v835, v2003);
          swift_bridgeObjectRelease();
          unint64_t v836 = (v1993
                + ((((((v1964 + v835) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v2000;
          if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v2001 + 48))(v836, 1, v2003)) {
            v834(v836, v2003);
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unsigned int v837 = (uint64_t *)((((((v1994 + v836) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
          unint64_t v838 = v837[1];
          if ((v838 & 0x3000000000000000) == 0) {
            sub_10001E9C0(*v837, v838);
          }
          swift_bridgeObjectRelease();
          unint64_t v839 = v2035 + v833;
          LODWORD(v840) = -1;
          if (*(void *)(v839 + 16) < 0xFFFFFFFFuLL) {
            uint64_t v840 = *(void *)(v839 + 16);
          }
          uint64_t v72 = v2033;
          uint64_t v77 = a2;
          if ((int)v840 - 1 < 0)
          {
            swift_errorRelease();
            swift_errorRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (*(void *)(v839 + 192))
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          sub_1000CF144(*(void *)((((v839 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *(void *)(((((v839 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
          unint64_t v64 = v1919;
          unsigned int v90 = v1971;
LABEL_1463:
          unint64_t v841 = (unint64_t)&a1[v1942] & v2032;
          if (v2030 == v90)
          {
            int v842 = (*(uint64_t (**)(unint64_t))(v2040 + 48))((unint64_t)&a1[v1942] & v2032);
LABEL_1751:
            unint64_t v63 = v2056;
LABEL_1752:
            if (v842) {
              goto LABEL_1799;
            }
            unint64_t v1249 = (v1990 + v841) & v1991;
            unint64_t v1250 = (v1962 + v1249) & v2002;
            goto LABEL_1754;
          }
LABEL_1739:
          unint64_t v63 = v2056;
          unint64_t v1249 = (v1990 + v841) & v1991;
          unint64_t v1250 = (v1962 + v1249) & v2002;
          if (v1968 == v90)
          {
            if (v1966 == v1968)
            {
              int v842 = (*(uint64_t (**)(unint64_t))(v1984 + 48))((v1962 + v1249) & v2002);
              goto LABEL_1751;
            }
            long long v1253 = (unint64_t *)((v1987 + v1250) & 0xFFFFFFFFFFFFFFF8);
            if (v1951 > 0x7FFFFFFE)
            {
              int v842 = (*(uint64_t (**)(unint64_t))(v1979 + 48))(((unint64_t)v1253 + v1976) & v1974);
              goto LABEL_1751;
            }
            unint64_t v1254 = *v1253;
          }
          else
          {
            size_t v1251 = v1250 + v2034;
            if ((v1948 & 0x80000000) == 0)
            {
              unint64_t v1252 = *(void *)(v1251 + 8);
              if (v1252 >= 0xFFFFFFFF) {
                LODWORD(v1252) = -1;
              }
              int v842 = v1252 + 1;
              goto LABEL_1752;
            }
            uint64_t v1255 = (v1999 + ((v2036 + v1251) & v1998)) & v2000;
            if (v1982 > 0x7FFFFFFD)
            {
              int v842 = (*(uint64_t (**)(uint64_t))(v2001 + 48))(v1255);
              goto LABEL_1751;
            }
            unint64_t v1254 = *(void *)(((v1964 + ((v1996 + v1255) & v2000)) & 0xFFFFFFFFFFFFFFF8) + 8);
          }
          if (v1254 >= 0xFFFFFFFF) {
            LODWORD(v1254) = -1;
          }
          if ((v1254 + 1) < 2)
          {
LABEL_1754:
            unint64_t v1923 = v64;
            unint64_t v1256 = *(void (**)(unint64_t, uint64_t))(v2040 + 8);
            v1256(v841, AssociatedTypeWitness);
            v1256(v1249, AssociatedTypeWitness);
            (*(void (**)(unint64_t, uint64_t))(v1984 + 8))(v1250, v1983);
            swift_bridgeObjectRelease();
            (*(void (**)(unint64_t, uint64_t))(v1979 + 8))((v1976 + ((v1987 + v1250) & 0xFFFFFFFFFFFFFFF8)) & v1974, v1978);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            size_t v1257 = (v2036 + v1250 + v2034) & v1998;
            unint64_t v1258 = *(void (**)(size_t, uint64_t))(v2001 + 8);
            v1258((v1999 + v1257) & v2000, v2003);
            size_t v1259 = (v1996 + ((v1999 + v1257) & v2000)) & v2000;
            v1258(v1259, v2003);
            swift_bridgeObjectRelease();
            unint64_t v1260 = (v1993
                   + ((((((v1964 + v1259) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v2000;
            if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v2001 + 48))(v1260, 1, v2003)) {
              v1258(v1260, v2003);
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v1261 = (uint64_t *)((((((v1994 + v1260) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1262 = v1261[1];
            if ((v1262 & 0x3000000000000000) == 0) {
              sub_10001E9C0(*v1261, v1262);
            }
            swift_bridgeObjectRelease();
            unint64_t v1263 = v1257 + v2035;
            LODWORD(v1264) = -1;
            if (*(void *)(v1263 + 16) < 0xFFFFFFFFuLL) {
              uint64_t v1264 = *(void *)(v1263 + 16);
            }
            BOOL v1265 = (int)v1264 - 1 < 0;
            uint64_t v72 = v2033;
            goto LABEL_1793;
          }
LABEL_1799:
          size_t v170 = v1992;
          uint64_t v67 = v1911;
          uint64_t v73 = AssociatedTypeWitness;
          size_t v76 = v2039;
          if (v1982) {
            goto LABEL_322;
          }
          goto LABEL_321;
        }
        uint64_t v828 = (v1999 + ((v2036 + v552) & v1998)) & v2000;
        if (v1982 > 0x7FFFFFFD)
        {
          int v91 = (*(uint64_t (**)(uint64_t))(v2001 + 48))(v828);
          goto LABEL_1449;
        }
        unint64_t v621 = *(void *)(((v1964 + ((v1996 + v828) & v2000)) & 0xFFFFFFFFFFFFFFF8) + 8);
      }
      if (v621 >= 0xFFFFFFFF) {
        LODWORD(v621) = -1;
      }
      if ((v621 + 1) >= 2)
      {
        unint64_t v841 = (unint64_t)&a1[v1942] & v2032;
        goto LABEL_1739;
      }
      goto LABEL_1452;
    case 6u:
      unsigned int v92 = v1970;
      uint64_t v1911 = v67;
      if (v1965 == v1970)
      {
        int v93 = (*(uint64_t (**)(unsigned __int8 *))(v2060 + 48))(a1);
LABEL_1466:
        unsigned int v92 = v1970;
LABEL_1467:
        if (v93) {
          goto LABEL_1480;
        }
        unint64_t v455 = (unint64_t)&a1[v1989] & v2005;
        unint64_t v456 = (v455 + v2028 + v59) & v2006;
LABEL_1469:
        unint64_t v1920 = v64;
        unsigned int v843 = *(void (**)(unsigned __int8 *, uint64_t))(v2060 + 8);
        v843(a1, v2033);
        v843((unsigned __int8 *)v455, v2033);
        (*(void (**)(unint64_t, uint64_t))(v1986 + 8))(v456, v1985);
        swift_bridgeObjectRelease();
        (*(void (**)(unint64_t, uint64_t))(v1981 + 8))((v1977 + ((v1988 + v456) & 0xFFFFFFFFFFFFFFF8)) & v1975, v1980);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v844 = (v2036 + v1995 + v456) & v1998;
        unint64_t v845 = *(void (**)(unint64_t, uint64_t))(v2001 + 8);
        v845((v1999 + v844) & v2000, v2003);
        unint64_t v846 = (v1996 + ((v1999 + v844) & v2000)) & v2000;
        v845(v846, v2003);
        swift_bridgeObjectRelease();
        unint64_t v847 = (v1993
              + ((((((v1964 + v846) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v2000;
        if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v2001 + 48))(v847, 1, v2003)) {
          v845(v847, v2003);
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v848 = (uint64_t *)((((((v1994 + v847) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
        unint64_t v849 = v848[1];
        if ((v849 & 0x3000000000000000) == 0) {
          sub_10001E9C0(*v848, v849);
        }
        swift_bridgeObjectRelease();
        unint64_t v850 = v844 + v2035;
        LODWORD(v851) = -1;
        if (*(void *)(v850 + 16) < 0xFFFFFFFFuLL) {
          uint64_t v851 = *(void *)(v850 + 16);
        }
        uint64_t v72 = v2033;
        uint64_t v77 = a2;
        if ((int)v851 - 1 < 0)
        {
          swift_errorRelease();
          swift_errorRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (*(void *)(v850 + 192))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        sub_1000CF144(*(void *)((((v850 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *(void *)(((((v850 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
        unint64_t v64 = v1920;
        unsigned int v92 = v1970;
LABEL_1480:
        unint64_t v852 = (unint64_t)&a1[v1941] & v1960;
        if (v1965 == v92)
        {
          int v853 = (*(uint64_t (**)(unint64_t))(v2060 + 48))((unint64_t)&a1[v1941] & v1960);
LABEL_1783:
          unint64_t v63 = v2056;
LABEL_1784:
          if (v853) {
            goto LABEL_1799;
          }
          unint64_t v1266 = (v1989 + v852) & v2005;
          unint64_t v1267 = (v1961 + v1266) & v2006;
          goto LABEL_1786;
        }
LABEL_1771:
        unint64_t v63 = v2056;
        unint64_t v1266 = (v1989 + v852) & v2005;
        unint64_t v1267 = (v1961 + v1266) & v2006;
        if (v1969 == v92)
        {
          if (v1967 == v1969)
          {
            int v853 = (*(uint64_t (**)(unint64_t))(v1986 + 48))((v1961 + v1266) & v2006);
            goto LABEL_1783;
          }
          v1270 = (unint64_t *)((v1988 + v1267) & 0xFFFFFFFFFFFFFFF8);
          if (v1952 > 0x7FFFFFFE)
          {
            int v853 = (*(uint64_t (**)(unint64_t))(v1981 + 48))(((unint64_t)v1270 + v1977) & v1975);
            goto LABEL_1783;
          }
          unint64_t v1271 = *v1270;
        }
        else
        {
          unint64_t v1268 = v1267 + v1995;
          if ((v1947 & 0x80000000) == 0)
          {
            unint64_t v1269 = *(void *)(v1268 + 8);
            if (v1269 >= 0xFFFFFFFF) {
              LODWORD(v1269) = -1;
            }
            int v853 = v1269 + 1;
            goto LABEL_1784;
          }
          uint64_t v1272 = (v1999 + ((v2036 + v1268) & v1998)) & v2000;
          if (v1982 > 0x7FFFFFFD)
          {
            int v853 = (*(uint64_t (**)(uint64_t))(v2001 + 48))(v1272);
            goto LABEL_1783;
          }
          unint64_t v1271 = *(void *)(((v1964 + ((v1996 + v1272) & v2000)) & 0xFFFFFFFFFFFFFFF8) + 8);
        }
        if (v1271 >= 0xFFFFFFFF) {
          LODWORD(v1271) = -1;
        }
        if ((v1271 + 1) >= 2) {
          goto LABEL_1799;
        }
LABEL_1786:
        unint64_t v1923 = v64;
        unint64_t v1273 = *(void (**)(unint64_t, uint64_t))(v2060 + 8);
        v1273(v852, v72);
        v1273(v1266, v72);
        (*(void (**)(unint64_t, uint64_t))(v1986 + 8))(v1267, v1985);
        swift_bridgeObjectRelease();
        (*(void (**)(unint64_t, uint64_t))(v1981 + 8))((v1977 + ((v1988 + v1267) & 0xFFFFFFFFFFFFFFF8)) & v1975, v1980);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v1274 = (v2036 + v1267 + v1995) & v1998;
        unint64_t v1275 = *(void (**)(unint64_t, uint64_t))(v2001 + 8);
        v1275((v1999 + v1274) & v2000, v2003);
        unint64_t v1276 = (v1996 + ((v1999 + v1274) & v2000)) & v2000;
        v1275(v1276, v2003);
        swift_bridgeObjectRelease();
        unint64_t v1277 = (v1993
               + ((((((v1964 + v1276) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v2000;
        if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v2001 + 48))(v1277, 1, v2003)) {
          v1275(v1277, v2003);
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v1278 = (uint64_t *)((((((v1994 + v1277) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
        unint64_t v1279 = v1278[1];
        if ((v1279 & 0x3000000000000000) == 0) {
          sub_10001E9C0(*v1278, v1279);
        }
        swift_bridgeObjectRelease();
        unint64_t v1263 = v1274 + v2035;
        LODWORD(v1280) = -1;
        if (*(void *)(v1263 + 16) < 0xFFFFFFFFuLL) {
          uint64_t v1280 = *(void *)(v1263 + 16);
        }
        BOOL v1265 = (int)v1280 - 1 < 0;
        uint64_t v72 = v2033;
LABEL_1793:
        uint64_t v77 = a2;
        if (v1265)
        {
          swift_errorRelease();
          swift_errorRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (*(void *)(v1263 + 192))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        sub_1000CF144(*(void *)((((v1263 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *(void *)(((((v1263 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
        unint64_t v64 = v1923;
        unint64_t v63 = v2056;
        goto LABEL_1799;
      }
      unint64_t v455 = (unint64_t)&a1[v1989] & v2005;
      unint64_t v456 = (v455 + v2028 + v59) & v2006;
      if (v1969 == v1970)
      {
        if (v1967 == v1969)
        {
          int v93 = (*(uint64_t (**)(unint64_t))(v1986 + 48))((v455 + v2028 + v59) & v2006);
          goto LABEL_1466;
        }
        unsigned int v622 = (unint64_t *)((v1988 + v456) & 0xFFFFFFFFFFFFFFF8);
        if (v1952 > 0x7FFFFFFE)
        {
          int v93 = (*(uint64_t (**)(unint64_t))(v1981 + 48))(((unint64_t)v622 + v1977) & v1975);
          goto LABEL_1466;
        }
        unint64_t v623 = *v622;
      }
      else
      {
        unint64_t v554 = v36 + v456;
        if ((v1947 & 0x80000000) == 0)
        {
          unint64_t v555 = *(void *)(v554 + 8);
          if (v555 >= 0xFFFFFFFF) {
            LODWORD(v555) = -1;
          }
          int v93 = v555 + 1;
          goto LABEL_1467;
        }
        uint64_t v829 = (v1999 + ((v2036 + v554) & v1998)) & v2000;
        if (v1982 > 0x7FFFFFFD)
        {
          int v93 = (*(uint64_t (**)(uint64_t))(v2001 + 48))(v829);
          goto LABEL_1466;
        }
        unint64_t v623 = *(void *)(((v1964 + ((v1996 + v829) & v2000)) & 0xFFFFFFFFFFFFFFF8) + 8);
      }
      if (v623 >= 0xFFFFFFFF) {
        LODWORD(v623) = -1;
      }
      if ((v623 + 1) >= 2)
      {
        unint64_t v852 = (unint64_t)&a1[v1941] & v1960;
        goto LABEL_1771;
      }
      goto LABEL_1469;
    case 7u:
      uint64_t v94 = v67;
      size_t v1912 = &a1[v67];
      unint64_t v1916 = v64;
      int v95 = *(void (**)(unsigned __int8 *, uint64_t))(v2040 + 8);
      v95(a1, AssociatedTypeWitness);
      unint64_t v96 = (unint64_t)&a1[v1990] & v1991;
      v95((unsigned __int8 *)v96, AssociatedTypeWitness);
      unint64_t v97 = (v96 + v2029 + v2050) & v2002;
      (*(void (**)(unint64_t, uint64_t))(v1984 + 8))(v97, v1983);
      swift_bridgeObjectRelease();
      (*(void (**)(unint64_t, uint64_t))(v1979 + 8))((v1976 + ((v1987 + v97) & 0xFFFFFFFFFFFFFFF8)) & v1974, v1978);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      size_t v98 = (v2036 + v2034 + v97) & v1998;
      uint64_t v99 = *(void (**)(size_t, uint64_t))(v2001 + 8);
      v99((v1999 + v98) & v2000, v2003);
      size_t v100 = (v1996 + ((v1999 + v98) & v2000)) & v2000;
      v99(v100, v2003);
      swift_bridgeObjectRelease();
      unint64_t v101 = (v1993
            + ((((((v1964 + v100) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v2000;
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v2001 + 48))(v101, 1, v2003)) {
        v99(v101, v2003);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      int v102 = (uint64_t *)((((((v1994 + v101) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v103 = v102[1];
      if ((v103 & 0x3000000000000000) == 0) {
        sub_10001E9C0(*v102, v103);
      }
      goto LABEL_161;
    case 8u:
      uint64_t v94 = v67;
      size_t v1912 = &a1[v67];
      unint64_t v1916 = v64;
      unsigned int v104 = *(void (**)(unsigned __int8 *, uint64_t))(v2060 + 8);
      v104(a1, v2033);
      unint64_t v105 = (unint64_t)&a1[v1989] & v2005;
      v104((unsigned __int8 *)v105, v2033);
      unint64_t v106 = (v105 + v2028 + v59) & v2006;
      (*(void (**)(unint64_t, uint64_t))(v1986 + 8))(v106, v1985);
      swift_bridgeObjectRelease();
      (*(void (**)(unint64_t, uint64_t))(v1981 + 8))((v1977 + ((v1988 + v106) & 0xFFFFFFFFFFFFFFF8)) & v1975, v1980);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      size_t v98 = (v2036 + v1995 + v106) & v1998;
      uint64_t v107 = *(void (**)(size_t, uint64_t))(v2001 + 8);
      v107((v1999 + v98) & v2000, v2003);
      size_t v108 = (v1996 + ((v1999 + v98) & v2000)) & v2000;
      v107(v108, v2003);
      swift_bridgeObjectRelease();
      unint64_t v109 = (v1993
            + ((((((v1964 + v108) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v2000;
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v2001 + 48))(v109, 1, v2003)) {
        v107(v109, v2003);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unsigned int v110 = (uint64_t *)((((((v1994 + v109) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v111 = v110[1];
      if ((v111 & 0x3000000000000000) == 0) {
        sub_10001E9C0(*v110, v111);
      }
LABEL_161:
      swift_bridgeObjectRelease();
      size_t v112 = v98 + v2035;
      LODWORD(v113) = -1;
      if (*(void *)(v112 + 16) < 0xFFFFFFFFuLL) {
        uint64_t v113 = *(void *)(v112 + 16);
      }
      unint64_t v68 = v1912;
      uint64_t v72 = v2033;
      uint64_t v77 = a2;
      uint64_t v73 = AssociatedTypeWitness;
      if ((int)v113 - 1 < 0)
      {
        swift_errorRelease();
        swift_errorRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (*(void *)(v112 + 192))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      sub_1000CF144(*(void *)((((v112 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *(void *)(((((v112 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
      unint64_t v64 = v1916;
      goto LABEL_168;
    case 9u:
      unsigned int v81 = a1[v2056];
      unsigned int v82 = v81 - 2;
      if (v81 >= 2)
      {
        if (v2056 <= 3) {
          uint64_t v114 = v2056;
        }
        else {
          uint64_t v114 = 4;
        }
        switch(v114)
        {
          case 1:
            goto LABEL_308;
          case 2:
            goto LABEL_310;
          case 3:
            goto LABEL_312;
          case 4:
            goto LABEL_314;
          default:
            goto LABEL_316;
        }
      }
      goto LABEL_316;
    case 0xAu:
      unsigned int v115 = a1[v2056];
      unsigned int v116 = v115 - 2;
      if (v115 >= 2)
      {
        if (v2056 <= 3) {
          uint64_t v117 = v2056;
        }
        else {
          uint64_t v117 = 4;
        }
        uint64_t v118 = v67;
        size_t v119 = v2039;
        switch(v117)
        {
          case 1:
            int v120 = *a1;
            goto LABEL_788;
          case 2:
            int v120 = *(unsigned __int16 *)a1;
            goto LABEL_788;
          case 3:
            int v120 = *(unsigned __int16 *)a1 | (a1[2] << 16);
            goto LABEL_788;
          case 4:
            int v120 = *(_DWORD *)a1;
LABEL_788:
            if (v2056 >= 4) {
              goto LABEL_789;
            }
            goto LABEL_794;
          default:
            goto LABEL_795;
        }
      }
      goto LABEL_389;
    case 0xBu:
      unsigned int v115 = a1[v2056];
      unsigned int v116 = v115 - 2;
      if (v115 < 2)
      {
LABEL_389:
        uint64_t v118 = v67;
        size_t v119 = v2039;
      }
      else
      {
        if (v2056 <= 3) {
          uint64_t v121 = v2056;
        }
        else {
          uint64_t v121 = 4;
        }
        uint64_t v118 = v67;
        size_t v119 = v2039;
        switch(v121)
        {
          case 1:
            int v120 = *a1;
            goto LABEL_793;
          case 2:
            int v120 = *(unsigned __int16 *)a1;
            goto LABEL_793;
          case 3:
            int v120 = *(unsigned __int16 *)a1 | (a1[2] << 16);
            goto LABEL_793;
          case 4:
            int v120 = *(_DWORD *)a1;
LABEL_793:
            if (v2056 >= 4) {
LABEL_789:
            }
              unsigned int v115 = v120 + 2;
            else {
LABEL_794:
            }
              unsigned int v115 = (v120 | (v116 << (8 * v2056))) + 2;
            break;
          default:
            break;
        }
      }
LABEL_795:
      uint64_t v636 = v2060;
      if (v115 == 1)
      {
        uint64_t v637 = v2033;
      }
      else
      {
        uint64_t v636 = v2040;
        uint64_t v637 = AssociatedTypeWitness;
      }
      (*(void (**)(unsigned __int8 *, uint64_t))(v636 + 8))(a1, v637);
      unint64_t v63 = v2056;
      unint64_t v136 = (unsigned __int8 *)((unint64_t)&a1[v1997] & v2004);
      unsigned int v638 = v136[v2056];
      size_t v76 = v119;
      uint64_t v67 = v118;
      if (v638 > 1) {
        goto LABEL_321;
      }
      uint64_t v167 = v118;
      size_t v168 = v76;
      if (v638 == 1) {
        goto LABEL_800;
      }
      goto LABEL_831;
    case 0xCu:
      unsigned int v122 = a1[v2056];
      unsigned int v123 = v122 - 2;
      if (v122 < 2)
      {
        uint64_t v125 = v67;
        size_t v126 = v2039;
      }
      else
      {
        if (v2056 <= 3) {
          uint64_t v124 = v2056;
        }
        else {
          uint64_t v124 = 4;
        }
        uint64_t v125 = v67;
        size_t v126 = v2039;
        switch(v124)
        {
          case 1:
            int v127 = *a1;
            goto LABEL_804;
          case 2:
            int v127 = *(unsigned __int16 *)a1;
            goto LABEL_804;
          case 3:
            int v127 = *(unsigned __int16 *)a1 | (a1[2] << 16);
            goto LABEL_804;
          case 4:
            int v127 = *(_DWORD *)a1;
LABEL_804:
            if (v2056 < 4) {
              unsigned int v122 = (v127 | (v123 << (8 * v2056))) + 2;
            }
            else {
              unsigned int v122 = v127 + 2;
            }
            break;
          default:
            break;
        }
      }
      uint64_t v639 = v2060;
      if (v122 == 1)
      {
        uint64_t v640 = v2033;
      }
      else
      {
        uint64_t v639 = v2040;
        uint64_t v640 = AssociatedTypeWitness;
      }
      goto LABEL_823;
    case 0xDu:
      unsigned int v81 = a1[v2056];
      unsigned int v82 = v81 - 2;
      if (v81 >= 2)
      {
        if (v2056 <= 3) {
          uint64_t v128 = v2056;
        }
        else {
          uint64_t v128 = 4;
        }
        switch(v128)
        {
          case 1:
            goto LABEL_308;
          case 2:
            goto LABEL_310;
          case 3:
            goto LABEL_312;
          case 4:
            goto LABEL_314;
          default:
            goto LABEL_316;
        }
      }
      goto LABEL_316;
    case 0xEu:
      unsigned int v129 = a1[v2056];
      unsigned int v130 = v129 - 2;
      if (v129 >= 2)
      {
        if (v2056 <= 3) {
          uint64_t v131 = v2056;
        }
        else {
          uint64_t v131 = 4;
        }
        uint64_t v125 = v67;
        size_t v126 = v2039;
        switch(v131)
        {
          case 1:
            int v132 = *a1;
            goto LABEL_813;
          case 2:
            int v132 = *(unsigned __int16 *)a1;
            goto LABEL_813;
          case 3:
            int v132 = *(unsigned __int16 *)a1 | (a1[2] << 16);
            goto LABEL_813;
          case 4:
            int v132 = *(_DWORD *)a1;
LABEL_813:
            if (v2056 >= 4) {
              goto LABEL_814;
            }
            goto LABEL_819;
          default:
            goto LABEL_820;
        }
      }
      goto LABEL_390;
    case 0xFu:
      unsigned int v129 = a1[v2056];
      unsigned int v130 = v129 - 2;
      if (v129 < 2)
      {
LABEL_390:
        uint64_t v125 = v67;
        size_t v126 = v2039;
      }
      else
      {
        if (v2056 <= 3) {
          uint64_t v133 = v2056;
        }
        else {
          uint64_t v133 = 4;
        }
        uint64_t v125 = v67;
        size_t v126 = v2039;
        switch(v133)
        {
          case 1:
            int v132 = *a1;
            goto LABEL_818;
          case 2:
            int v132 = *(unsigned __int16 *)a1;
            goto LABEL_818;
          case 3:
            int v132 = *(unsigned __int16 *)a1 | (a1[2] << 16);
            goto LABEL_818;
          case 4:
            int v132 = *(_DWORD *)a1;
LABEL_818:
            if (v2056 >= 4) {
LABEL_814:
            }
              unsigned int v129 = v132 + 2;
            else {
LABEL_819:
            }
              unsigned int v129 = (v132 | (v130 << (8 * v2056))) + 2;
            break;
          default:
            break;
        }
      }
LABEL_820:
      uint64_t v639 = v2060;
      if (v129 == 1)
      {
        uint64_t v640 = v2033;
      }
      else
      {
        uint64_t v639 = v2040;
        uint64_t v640 = AssociatedTypeWitness;
      }
LABEL_823:
      (*(void (**)(unsigned __int8 *, uint64_t))(v639 + 8))(a1, v640);
      swift_errorRelease();
      goto LABEL_880;
    case 0x10u:
      unint64_t v134 = *((void *)a1 + 2);
      if (v134 >> 60 == 15) {
        goto LABEL_321;
      }
      size_t v79 = v2039;
      uint64_t v80 = v67;
      sub_10001E9C0(*((void *)a1 + 1), v134);
      goto LABEL_1679;
    case 0x11u:
      unsigned int v81 = a1[v2056];
      unsigned int v82 = v81 - 2;
      if (v81 >= 2)
      {
        if (v2056 <= 3) {
          uint64_t v135 = v2056;
        }
        else {
          uint64_t v135 = 4;
        }
        switch(v135)
        {
          case 1:
            goto LABEL_308;
          case 2:
            goto LABEL_310;
          case 3:
            goto LABEL_312;
          case 4:
            goto LABEL_314;
          default:
            goto LABEL_316;
        }
      }
      goto LABEL_316;
    case 0x13u:
      unint64_t v136 = (unsigned __int8 *)((unint64_t)&a1[v2047 + 1] & v2004);
      unsigned int v137 = v136[v2056];
      unsigned int v138 = v137 - 2;
      if (v137 >= 2)
      {
        if (v2056 <= 3) {
          uint64_t v139 = v2056;
        }
        else {
          uint64_t v139 = 4;
        }
        switch(v139)
        {
          case 1:
            int v140 = *v136;
            goto LABEL_827;
          case 2:
            int v140 = *(unsigned __int16 *)v136;
            goto LABEL_827;
          case 3:
            int v140 = *(unsigned __int16 *)v136 | (*(unsigned __int8 *)(((unint64_t)&a1[v2047 + 1] & v2004) + 2) << 16);
            goto LABEL_827;
          case 4:
            int v140 = *(_DWORD *)v136;
LABEL_827:
            if (v2056 < 4) {
              unsigned int v137 = (v140 | (v138 << (8 * v2056))) + 2;
            }
            else {
              unsigned int v137 = v140 + 2;
            }
            break;
          default:
            break;
        }
      }
      uint64_t v167 = v67;
      size_t v168 = v2039;
      if (v137 == 1)
      {
LABEL_800:
        uint64_t v169 = v2060;
        goto LABEL_318;
      }
LABEL_831:
      (*(void (**)(unsigned __int8 *, uint64_t))(v2040 + 8))(v136, AssociatedTypeWitness);
      goto LABEL_320;
    case 0x14u:
    case 0x15u:
      size_t v79 = v2039;
      uint64_t v80 = v67;
      swift_release();
LABEL_1679:
      uint64_t v67 = v80;
      size_t v76 = v79;
      unint64_t v63 = v2056;
      goto LABEL_321;
    case 0x18u:
      unsigned int v81 = a1[v2056];
      unsigned int v82 = v81 - 2;
      if (v81 >= 2)
      {
        if (v2056 <= 3) {
          uint64_t v141 = v2056;
        }
        else {
          uint64_t v141 = 4;
        }
        switch(v141)
        {
          case 1:
            goto LABEL_308;
          case 2:
            goto LABEL_310;
          case 3:
            goto LABEL_312;
          case 4:
            goto LABEL_314;
          default:
            goto LABEL_316;
        }
      }
      goto LABEL_316;
    case 0x19u:
      unsigned int v81 = a1[v2056];
      unsigned int v82 = v81 - 2;
      if (v81 >= 2)
      {
        if (v2056 <= 3) {
          uint64_t v142 = v2056;
        }
        else {
          uint64_t v142 = 4;
        }
        switch(v142)
        {
          case 1:
            goto LABEL_308;
          case 2:
            goto LABEL_310;
          case 3:
            goto LABEL_312;
          case 4:
            goto LABEL_314;
          default:
            goto LABEL_316;
        }
      }
      goto LABEL_316;
    case 0x1Au:
      unsigned int v81 = a1[v2056];
      unsigned int v82 = v81 - 2;
      if (v81 >= 2)
      {
        if (v2056 <= 3) {
          uint64_t v143 = v2056;
        }
        else {
          uint64_t v143 = 4;
        }
        switch(v143)
        {
          case 1:
            goto LABEL_308;
          case 2:
            goto LABEL_310;
          case 3:
            goto LABEL_312;
          case 4:
            goto LABEL_314;
          default:
            goto LABEL_316;
        }
      }
      goto LABEL_316;
    case 0x1Bu:
      unsigned int v144 = a1[v64];
      unsigned int v145 = v144 - 2;
      if (v144 >= 2)
      {
        if (v64 <= 3) {
          uint64_t v146 = v64;
        }
        else {
          uint64_t v146 = 4;
        }
        switch(v146)
        {
          case 1:
            int v147 = *a1;
            goto LABEL_835;
          case 2:
            int v147 = *(unsigned __int16 *)a1;
            goto LABEL_835;
          case 3:
            int v147 = *(unsigned __int16 *)a1 | (a1[2] << 16);
            goto LABEL_835;
          case 4:
            int v147 = *(_DWORD *)a1;
LABEL_835:
            if (v64 < 4) {
              unsigned int v144 = (v147 | (v145 << (8 * v64))) + 2;
            }
            else {
              unsigned int v144 = v147 + 2;
            }
            break;
          default:
            break;
        }
      }
      if (v144 != 1)
      {
        unsigned int v645 = a1[v51];
        unsigned int v646 = v645 - 8;
        if (v645 >= 8)
        {
          if (v51 <= 3) {
            uint64_t v647 = v51;
          }
          else {
            uint64_t v647 = 4;
          }
          switch(v647)
          {
            case 1:
              int v648 = *a1;
              goto LABEL_1673;
            case 2:
              int v648 = *(unsigned __int16 *)a1;
              goto LABEL_1673;
            case 3:
              int v648 = *(unsigned __int16 *)a1 | (a1[2] << 16);
              goto LABEL_1673;
            case 4:
              int v648 = *(_DWORD *)a1;
LABEL_1673:
              if (v51 < 4) {
                unsigned int v645 = (v648 | (v646 << (8 * v51))) + 8;
              }
              else {
                unsigned int v645 = v648 + 8;
              }
              break;
            default:
              break;
          }
        }
        switch(v645)
        {
          case 1u:
            unint64_t v1922 = v64;
            uint64_t v1193 = v67;
            unint64_t v1194 = *(void (**)(unsigned __int8 *, uint64_t))(v2040 + 8);
            v1194(a1, AssociatedTypeWitness);
            unint64_t v1195 = (unint64_t)&a1[v1936] & v2032;
            uint64_t v1196 = v2030;
            if (v2030 == v1971)
            {
              v1197 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v2040 + 48);
              unint64_t v1198 = (unint64_t)&a1[v1936] & v2032;
              uint64_t v1199 = AssociatedTypeWitness;
LABEL_2123:
              unint64_t v1400 = (unint64_t)&a1[v1936] & v2032;
              int v1335 = v1197(v1198, v1196, v1199);
              goto LABEL_2124;
            }
            unint64_t v1292 = (v1990 + v1195) & v1991;
            unint64_t v1293 = (v1962 + v1292) & v2002;
            if (v1968 == v1971)
            {
              uint64_t v1196 = v1966;
              if (v1966 == v1968)
              {
                uint64_t v1199 = v1983;
                v1197 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v1984 + 48);
                unint64_t v1198 = (v1962 + v1292) & v2002;
                goto LABEL_2123;
              }
              uint64_t v1376 = (unint64_t *)((v1987 + v1293) & 0xFFFFFFFFFFFFFFF8);
              if (v1951 > 0x7FFFFFFE)
              {
                unint64_t v1198 = ((unint64_t)v1376 + v1976) & v1974;
                uint64_t v1199 = v1978;
                v1197 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v1979 + 48);
                uint64_t v1196 = v1938;
                goto LABEL_2123;
              }
              unint64_t v1377 = *v1376;
              if (v1377 >= 0xFFFFFFFF) {
                LODWORD(v1377) = -1;
              }
              if ((v1377 + 1) >= 2)
              {
LABEL_2138:
                size_t v1459 = (v1195 + v2042 + v2049) & v2005;
                if (!(*(unsigned int (**)(size_t, uint64_t, uint64_t))(v2060 + 48))(v1459, 1, v72)) {
                  (*(void (**)(size_t, uint64_t))(v2060 + 8))(v1459, v72);
                }
                size_t v1428 = (v1934 + v1459) & v2006;
                uint64_t v1429 = v1193;
                if (v1967 == v1969)
                {
                  int v1460 = (*(uint64_t (**)(size_t))(v1986 + 48))((v1934 + v1459) & v2006);
                  size_t v1431 = v2039;
                  uint64_t v77 = a2;
                }
                else
                {
                  long long v1461 = (uint64_t *)((v1988 + v1428) & 0xFFFFFFFFFFFFFFF8);
                  size_t v1431 = v2039;
                  uint64_t v77 = a2;
                  if (v1952 <= 0x7FFFFFFE)
                  {
                    uint64_t v1462 = *v1461;
                    if ((unint64_t)*v1461 >= 0xFFFFFFFF) {
                      LODWORD(v1462) = -1;
                    }
                    if ((v1462 + 1) >= 2) {
                      goto LABEL_2151;
                    }
                    goto LABEL_2150;
                  }
                  int v1460 = (*(uint64_t (**)(unint64_t, void, uint64_t))(v1981 + 48))(((unint64_t)v1461 + v1977) & v1975, v1939, v1980);
                }
                if (v1460)
                {
LABEL_2151:
                  unint64_t v1434 = v1995;
                  goto LABEL_2152;
                }
                long long v1461 = (uint64_t *)((v1988 + v1428) & 0xFFFFFFFFFFFFFFF8);
LABEL_2150:
                (*(void (**)(size_t, uint64_t))(v1986 + 8))(v1428, v1985);
                swift_bridgeObjectRelease();
                (*(void (**)(unint64_t, uint64_t))(v1981 + 8))(((unint64_t)v1461 + v1977) & v1975, v1980);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                goto LABEL_2151;
              }
            }
            else
            {
              size_t v1333 = v1293 + v2034;
              if ((v1948 & 0x80000000) == 0)
              {
                unint64_t v1334 = *(void *)(v1333 + 8);
                if (v1334 >= 0xFFFFFFFF) {
                  LODWORD(v1334) = -1;
                }
                int v1335 = v1334 + 1;
                goto LABEL_2125;
              }
              unint64_t v1400 = (unint64_t)&a1[v1936] & v2032;
              uint64_t v1401 = (v1999 + ((v2036 + v1333) & v1998)) & v2000;
              if (v1982 > 0x7FFFFFFD)
              {
                int v1335 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v2001 + 48))(v1401, v1982, v2003);
LABEL_2124:
                unint64_t v1195 = v1400;
LABEL_2125:
                if (v1335) {
                  goto LABEL_2138;
                }
                unint64_t v1292 = (v1990 + v1195) & v1991;
                unint64_t v1293 = (v1962 + v1292) & v2002;
                goto LABEL_2127;
              }
              unint64_t v1905 = *(void *)(((v1964 + ((v1996 + v1401) & v2000)) & 0xFFFFFFFFFFFFFFF8) + 8);
              if (v1905 >= 0xFFFFFFFF) {
                LODWORD(v1905) = -1;
              }
              if ((v1905 + 1) >= 2) {
                goto LABEL_2138;
              }
            }
LABEL_2127:
            unint64_t v1946 = v1195;
            v1194((unsigned __int8 *)v1195, AssociatedTypeWitness);
            v1194((unsigned __int8 *)v1292, AssociatedTypeWitness);
            (*(void (**)(unint64_t, uint64_t))(v1984 + 8))(v1293, v1983);
            swift_bridgeObjectRelease();
            (*(void (**)(unint64_t, uint64_t))(v1979 + 8))((v1976 + ((v1987 + v1293) & 0xFFFFFFFFFFFFFFF8)) & v1974, v1978);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            size_t v1451 = (v2036 + v1293 + v2034) & v1998;
            uint64_t v1452 = *(void (**)(size_t, uint64_t))(v2001 + 8);
            v1452((v1999 + v1451) & v2000, v2003);
            size_t v1453 = (v1996 + ((v1999 + v1451) & v2000)) & v2000;
            v1452(v1453, v2003);
            swift_bridgeObjectRelease();
            unint64_t v1454 = (v1993
                   + ((((((v1964 + v1453) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v2000;
            if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v2001 + 48))(v1454, 1, v2003)) {
              v1452(v1454, v2003);
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            unint64_t v1455 = (uint64_t *)((((((v1994 + v1454) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1456 = v1455[1];
            if ((v1456 & 0x3000000000000000) == 0) {
              sub_10001E9C0(*v1455, v1456);
            }
            swift_bridgeObjectRelease();
            unint64_t v1457 = v2035 + v1451;
            LODWORD(v1458) = -1;
            if (*(void *)(v1457 + 16) < 0xFFFFFFFFuLL) {
              uint64_t v1458 = *(void *)(v1457 + 16);
            }
            uint64_t v72 = v2033;
            if ((int)v1458 - 1 < 0)
            {
              swift_errorRelease();
              swift_errorRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if (*(void *)(v1457 + 192))
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
              }
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            sub_1000CF144(*(void *)((((v1457 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *(void *)(((((v1457 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
            unint64_t v1195 = v1946;
            goto LABEL_2138;
          case 2u:
            uint64_t v94 = v67;
            (*(void (**)(unsigned __int8 *, uint64_t))(v2040 + 8))(a1, AssociatedTypeWitness);
            unint64_t v1200 = (unint64_t)&a1[v1963] & v2005;
            if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v2060 + 48))(v1200, 1, v2033)) {
              (*(void (**)(unint64_t, uint64_t))(v2060 + 8))(v1200, v2033);
            }
            unint64_t v1175 = v64;
            unint64_t v1176 = (v1934 + v1200) & v2006;
            if (v1967 == v1969)
            {
              int v1201 = (*(uint64_t (**)(size_t))(v1986 + 48))((v1934 + v1200) & v2006);
            }
            else
            {
              int v1294 = (uint64_t *)((v1988 + v1176) & 0xFFFFFFFFFFFFFFF8);
              if (v1952 <= 0x7FFFFFFE)
              {
                uint64_t v1295 = *v1294;
                if ((unint64_t)*v1294 >= 0xFFFFFFFF) {
                  LODWORD(v1295) = -1;
                }
                if ((v1295 + 1) >= 2)
                {
LABEL_1919:
                  unint64_t v1326 = v1995;
LABEL_1920:

                  uint64_t v73 = AssociatedTypeWitness;
                  unint64_t v64 = v1175;
LABEL_168:
                  unint64_t v63 = v2056;
                  size_t v76 = v2039;
                  uint64_t v67 = v94;
                  goto LABEL_321;
                }
LABEL_1918:
                (*(void (**)(unint64_t, uint64_t))(v1986 + 8))(v1176, v1985);
                swift_bridgeObjectRelease();
                (*(void (**)(unint64_t, uint64_t))(v1981 + 8))(((unint64_t)v1294 + v1977) & v1975, v1980);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                goto LABEL_1919;
              }
              int v1201 = (*(uint64_t (**)(unint64_t))(v1981 + 48))(((unint64_t)v1294 + v1977) & v1975);
            }
            if (v1201) {
              goto LABEL_1919;
            }
            int v1294 = (uint64_t *)((v1988 + v1176) & 0xFFFFFFFFFFFFFFF8);
            goto LABEL_1918;
          case 3u:
            unint64_t v1921 = v64;
            uint64_t v1160 = v67;
            size_t v1202 = *(void (**)(unsigned __int8 *, uint64_t))(v2040 + 8);
            v1202(a1, AssociatedTypeWitness);
            unint64_t v1203 = (unint64_t)&a1[v1936] & v2032;
            uint64_t v1204 = v2030;
            if (v2030 == v1971)
            {
              uint64_t v1205 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v2040 + 48);
              unint64_t v1206 = (unint64_t)&a1[v1936] & v2032;
              uint64_t v1207 = AssociatedTypeWitness;
LABEL_2154:
              unint64_t v1402 = (unint64_t)&a1[v1936] & v2032;
              int v1338 = v1205(v1206, v1204, v1207);
              goto LABEL_2155;
            }
            unint64_t v1296 = (v1990 + v1203) & v1991;
            unint64_t v1297 = (v1962 + v1296) & v2002;
            if (v1968 == v1971)
            {
              uint64_t v1204 = v1966;
              if (v1966 == v1968)
              {
                uint64_t v1207 = v1983;
                uint64_t v1205 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v1984 + 48);
                unint64_t v1206 = (v1962 + v1296) & v2002;
                goto LABEL_2154;
              }
              unint64_t v1378 = (unint64_t *)((v1987 + v1297) & 0xFFFFFFFFFFFFFFF8);
              if (v1951 > 0x7FFFFFFE)
              {
                unint64_t v1206 = ((unint64_t)v1378 + v1976) & v1974;
                uint64_t v1207 = v1978;
                uint64_t v1205 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v1979 + 48);
                uint64_t v1204 = v1938;
                goto LABEL_2154;
              }
              unint64_t v1379 = *v1378;
              if (v1379 >= 0xFFFFFFFF) {
                LODWORD(v1379) = -1;
              }
              if ((v1379 + 1) >= 2)
              {
LABEL_2169:
                swift_bridgeObjectRelease();
                goto LABEL_2170;
              }
            }
            else
            {
              size_t v1336 = v1297 + v2034;
              if ((v1948 & 0x80000000) == 0)
              {
                unint64_t v1337 = *(void *)(v1336 + 8);
                if (v1337 >= 0xFFFFFFFF) {
                  LODWORD(v1337) = -1;
                }
                int v1338 = v1337 + 1;
                goto LABEL_2156;
              }
              unint64_t v1402 = (unint64_t)&a1[v1936] & v2032;
              uint64_t v1403 = (v1999 + ((v2036 + v1336) & v1998)) & v2000;
              if (v1982 > 0x7FFFFFFD)
              {
                int v1338 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v2001 + 48))(v1403, v1982, v2003);
LABEL_2155:
                unint64_t v1203 = v1402;
LABEL_2156:
                if (v1338) {
                  goto LABEL_2169;
                }
                unint64_t v1296 = (v1990 + v1203) & v1991;
                unint64_t v1297 = (v1962 + v1296) & v2002;
                goto LABEL_2158;
              }
              unint64_t v1906 = *(void *)(((v1964 + ((v1996 + v1403) & v2000)) & 0xFFFFFFFFFFFFFFF8) + 8);
              if (v1906 >= 0xFFFFFFFF) {
                LODWORD(v1906) = -1;
              }
              if ((v1906 + 1) >= 2) {
                goto LABEL_2169;
              }
            }
LABEL_2158:
            v1202((unsigned __int8 *)v1203, AssociatedTypeWitness);
            v1202((unsigned __int8 *)v1296, AssociatedTypeWitness);
            (*(void (**)(unint64_t, uint64_t))(v1984 + 8))(v1297, v1983);
            swift_bridgeObjectRelease();
            (*(void (**)(unint64_t, uint64_t))(v1979 + 8))((v1976 + ((v1987 + v1297) & 0xFFFFFFFFFFFFFFF8)) & v1974, v1978);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            size_t v1463 = (v2036 + v1297 + v2034) & v1998;
            long long v1464 = *(void (**)(size_t, uint64_t))(v2001 + 8);
            v1464((v1999 + v1463) & v2000, v2003);
            size_t v1465 = (v1996 + ((v1999 + v1463) & v2000)) & v2000;
            v1464(v1465, v2003);
            swift_bridgeObjectRelease();
            unint64_t v1466 = (v1993
                   + ((((((v1964 + v1465) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v2000;
            if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v2001 + 48))(v1466, 1, v2003)) {
              v1464(v1466, v2003);
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            long long v1467 = (uint64_t *)((((((v1994 + v1466) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1468 = v1467[1];
            if ((v1468 & 0x3000000000000000) == 0) {
              sub_10001E9C0(*v1467, v1468);
            }
            swift_bridgeObjectRelease();
            unint64_t v1469 = v2035 + v1463;
            LODWORD(v1470) = -1;
            if (*(void *)(v1469 + 16) < 0xFFFFFFFFuLL) {
              uint64_t v1470 = *(void *)(v1469 + 16);
            }
            uint64_t v72 = v2033;
            if ((int)v1470 - 1 < 0)
            {
              swift_errorRelease();
              swift_errorRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if (*(void *)(v1469 + 192))
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
              }
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            sub_1000CF144(*(void *)((((v1469 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *(void *)(((((v1469 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
            goto LABEL_2169;
          case 4u:
          case 5u:
          case 7u:
            unint64_t v1158 = *(void (**)(unsigned __int8 *, uint64_t))(v2040 + 8);
            unint64_t v1157 = a1;
            uint64_t v1159 = AssociatedTypeWitness;
LABEL_1678:
            size_t v79 = v2039;
            uint64_t v80 = v67;
            v1158(v1157, v1159);
            goto LABEL_1679;
          case 6u:
            uint64_t v1184 = v67;
            (*(void (**)(unsigned __int8 *, uint64_t))(v2040 + 8))(a1, AssociatedTypeWitness);
            unint64_t v1208 = (unint64_t)&a1[v1930] & v1927;
            int v1209 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v1932 + 48))(v1208, 1, v2015);
            uint64_t v67 = v1184;
            size_t v76 = v2039;
            unint64_t v63 = v2056;
            if (!v1209)
            {
              (*(void (**)(unint64_t, uint64_t, uint64_t))(v1932 + 8))(v1208, v2015, v1184);
LABEL_1692:
              uint64_t v67 = v1184;
              size_t v76 = v2039;
              unint64_t v63 = v2056;
            }
            goto LABEL_321;
          default:
            unint64_t v1921 = v64;
            uint64_t v1160 = v67;
            long long v1187 = *(void (**)(unsigned __int8 *, uint64_t))(v2040 + 8);
            v1187(a1, AssociatedTypeWitness);
            unint64_t v1188 = (unint64_t)&a1[v1936] & v2032;
            uint64_t v1189 = v2030;
            if (v2030 == v1971)
            {
              long long v1190 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v2040 + 48);
              unint64_t v1191 = (unint64_t)&a1[v1936] & v2032;
              uint64_t v1192 = AssociatedTypeWitness;
LABEL_2105:
              unint64_t v1398 = (unint64_t)&a1[v1936] & v2032;
              int v1332 = v1190(v1191, v1189, v1192);
              goto LABEL_2106;
            }
            unint64_t v1290 = (v1990 + v1188) & v1991;
            unint64_t v1291 = (v1962 + v1290) & v2002;
            if (v1968 == v1971)
            {
              uint64_t v1189 = v1966;
              if (v1966 == v1968)
              {
                uint64_t v1192 = v1983;
                long long v1190 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v1984 + 48);
                unint64_t v1191 = (v1962 + v1290) & v2002;
                goto LABEL_2105;
              }
              size_t v1374 = (unint64_t *)((v1987 + v1291) & 0xFFFFFFFFFFFFFFF8);
              if (v1951 > 0x7FFFFFFE)
              {
                unint64_t v1191 = ((unint64_t)v1374 + v1976) & v1974;
                uint64_t v1192 = v1978;
                long long v1190 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v1979 + 48);
                uint64_t v1189 = v1938;
                goto LABEL_2105;
              }
              unint64_t v1375 = *v1374;
              if (v1375 >= 0xFFFFFFFF) {
                LODWORD(v1375) = -1;
              }
              if ((v1375 + 1) >= 2)
              {
LABEL_2120:
                unint64_t v1418 = v1188 + v2049;
                goto LABEL_2121;
              }
            }
            else
            {
              size_t v1330 = v1291 + v2034;
              if ((v1948 & 0x80000000) == 0)
              {
                unint64_t v1331 = *(void *)(v1330 + 8);
                if (v1331 >= 0xFFFFFFFF) {
                  LODWORD(v1331) = -1;
                }
                int v1332 = v1331 + 1;
                goto LABEL_2107;
              }
              unint64_t v1398 = (unint64_t)&a1[v1936] & v2032;
              uint64_t v1399 = (v1999 + ((v2036 + v1330) & v1998)) & v2000;
              if (v1982 > 0x7FFFFFFD)
              {
                int v1332 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v2001 + 48))(v1399, v1982, v2003);
LABEL_2106:
                unint64_t v1188 = v1398;
LABEL_2107:
                if (v1332) {
                  goto LABEL_2120;
                }
                unint64_t v1290 = (v1990 + v1188) & v1991;
                unint64_t v1291 = (v1962 + v1290) & v2002;
                goto LABEL_2109;
              }
              unint64_t v1904 = *(void *)(((v1964 + ((v1996 + v1399) & v2000)) & 0xFFFFFFFFFFFFFFF8) + 8);
              if (v1904 >= 0xFFFFFFFF) {
                LODWORD(v1904) = -1;
              }
              if ((v1904 + 1) >= 2) {
                goto LABEL_2120;
              }
            }
LABEL_2109:
            unint64_t v1945 = v1188;
            v1187((unsigned __int8 *)v1188, AssociatedTypeWitness);
            v1187((unsigned __int8 *)v1290, AssociatedTypeWitness);
            (*(void (**)(unint64_t, uint64_t))(v1984 + 8))(v1291, v1983);
            swift_bridgeObjectRelease();
            (*(void (**)(unint64_t, uint64_t))(v1979 + 8))((v1976 + ((v1987 + v1291) & 0xFFFFFFFFFFFFFFF8)) & v1974, v1978);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            size_t v1443 = (v2036 + v1291 + v2034) & v1998;
            long long v1444 = *(void (**)(size_t, uint64_t))(v2001 + 8);
            v1444((v1999 + v1443) & v2000, v2003);
            size_t v1445 = (v1996 + ((v1999 + v1443) & v2000)) & v2000;
            v1444(v1445, v2003);
            swift_bridgeObjectRelease();
            unint64_t v1446 = (v1993
                   + ((((((v1964 + v1445) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v2000;
            if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v2001 + 48))(v1446, 1, v2003)) {
              v1444(v1446, v2003);
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            unint64_t v1447 = (uint64_t *)((((((v1994 + v1446) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1448 = v1447[1];
            if ((v1448 & 0x3000000000000000) == 0) {
              sub_10001E9C0(*v1447, v1448);
            }
            swift_bridgeObjectRelease();
            unint64_t v1449 = v2035 + v1443;
            LODWORD(v1450) = -1;
            if (*(void *)(v1449 + 16) < 0xFFFFFFFFuLL) {
              uint64_t v1450 = *(void *)(v1449 + 16);
            }
            uint64_t v72 = v2033;
            if ((int)v1450 - 1 < 0)
            {
              swift_errorRelease();
              swift_errorRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if (*(void *)(v1449 + 192))
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
              }
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            sub_1000CF144(*(void *)((((v1449 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *(void *)(((((v1449 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
            unint64_t v1188 = v1945;
            goto LABEL_2120;
        }
      }
      unsigned int v641 = a1[v1953];
      unsigned int v642 = v641 - 8;
      if (v641 >= 8)
      {
        if (v1953 <= 3) {
          uint64_t v643 = v1953;
        }
        else {
          uint64_t v643 = 4;
        }
        switch(v643)
        {
          case 1:
            int v644 = *a1;
            goto LABEL_1653;
          case 2:
            int v644 = *(unsigned __int16 *)a1;
            goto LABEL_1653;
          case 3:
            int v644 = *(unsigned __int16 *)a1 | (a1[2] << 16);
            goto LABEL_1653;
          case 4:
            int v644 = *(_DWORD *)a1;
LABEL_1653:
            if (v1953 < 4) {
              unsigned int v641 = (v644 | (v642 << (8 * v1953))) + 8;
            }
            else {
              unsigned int v641 = v644 + 8;
            }
            break;
          default:
            break;
        }
      }
      switch(v641)
      {
        case 1u:
          unint64_t v1922 = v64;
          uint64_t v1167 = v67;
          unint64_t v1168 = *(void (**)(unsigned __int8 *, uint64_t))(v2060 + 8);
          v1168(a1, v2033);
          unint64_t v1169 = (unint64_t)&a1[v1935] & v1960;
          uint64_t v1170 = v1965;
          if (v1965 == v1970)
          {
            unint64_t v1171 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v2060 + 48);
            unint64_t v1172 = (unint64_t)&a1[v1935] & v1960;
            uint64_t v1173 = v2033;
LABEL_2058:
            unint64_t v1394 = (unint64_t)&a1[v1935] & v1960;
            int v1325 = v1171(v1172, v1170, v1173);
            goto LABEL_2059;
          }
          unint64_t v1284 = (v1989 + v1169) & v2005;
          unint64_t v1285 = (v1961 + v1284) & v2006;
          if (v1969 != v1970)
          {
            unint64_t v1323 = v1285 + v1995;
            if ((v1947 & 0x80000000) == 0)
            {
              unint64_t v1324 = *(void *)(v1323 + 8);
              if (v1324 >= 0xFFFFFFFF) {
                LODWORD(v1324) = -1;
              }
              int v1325 = v1324 + 1;
              goto LABEL_2060;
            }
            unint64_t v1394 = (unint64_t)&a1[v1935] & v1960;
            uint64_t v1395 = (v1999 + ((v2036 + v1323) & v1998)) & v2000;
            if (v1982 > 0x7FFFFFFD)
            {
              int v1325 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v2001 + 48))(v1395, v1982, v2003);
LABEL_2059:
              unint64_t v1169 = v1394;
LABEL_2060:
              if (v1325) {
                goto LABEL_2073;
              }
              unint64_t v1284 = (v1989 + v1169) & v2005;
              unint64_t v1285 = (v1961 + v1284) & v2006;
              goto LABEL_2062;
            }
            unint64_t v1902 = *(void *)(((v1964 + ((v1996 + v1395) & v2000)) & 0xFFFFFFFFFFFFFFF8) + 8);
            if (v1902 >= 0xFFFFFFFF) {
              LODWORD(v1902) = -1;
            }
            if ((v1902 + 1) >= 2) {
              goto LABEL_2073;
            }
LABEL_2062:
            unint64_t v1944 = v1169;
            v1168((unsigned __int8 *)v1169, v2033);
            v1168((unsigned __int8 *)v1284, v2033);
            (*(void (**)(unint64_t, uint64_t))(v1986 + 8))(v1285, v1985);
            swift_bridgeObjectRelease();
            (*(void (**)(unint64_t, uint64_t))(v1981 + 8))((v1977 + ((v1988 + v1285) & 0xFFFFFFFFFFFFFFF8)) & v1975, v1980);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            unint64_t v1419 = (v2036 + v1285 + v1995) & v1998;
            unint64_t v1420 = *(void (**)(unint64_t, uint64_t))(v2001 + 8);
            v1420((v1999 + v1419) & v2000, v2003);
            unint64_t v1421 = (v1996 + ((v1999 + v1419) & v2000)) & v2000;
            v1420(v1421, v2003);
            swift_bridgeObjectRelease();
            unint64_t v1422 = (v1993
                   + ((((((v1964 + v1421) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v2000;
            if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v2001 + 48))(v1422, 1, v2003)) {
              v1420(v1422, v2003);
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            unint64_t v1423 = (uint64_t *)((((((v1994 + v1422) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1424 = v1423[1];
            if ((v1424 & 0x3000000000000000) == 0) {
              sub_10001E9C0(*v1423, v1424);
            }
            swift_bridgeObjectRelease();
            unint64_t v1425 = v1419 + v2035;
            LODWORD(v1426) = -1;
            if (*(void *)(v1425 + 16) < 0xFFFFFFFFuLL) {
              uint64_t v1426 = *(void *)(v1425 + 16);
            }
            uint64_t v72 = v2033;
            if ((int)v1426 - 1 < 0)
            {
              swift_errorRelease();
              swift_errorRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if (*(void *)(v1425 + 192))
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
              }
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            sub_1000CF144(*(void *)((((v1425 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *(void *)(((((v1425 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
            unint64_t v1169 = v1944;
            goto LABEL_2073;
          }
          uint64_t v1170 = v1967;
          if (v1967 == v1969)
          {
            uint64_t v1173 = v1985;
            unint64_t v1171 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v1986 + 48);
            unint64_t v1172 = (v1961 + v1284) & v2006;
            goto LABEL_2058;
          }
          uint64_t v1370 = (unint64_t *)((v1988 + v1285) & 0xFFFFFFFFFFFFFFF8);
          if (v1952 > 0x7FFFFFFE)
          {
            unint64_t v1172 = ((unint64_t)v1370 + v1977) & v1975;
            uint64_t v1173 = v1980;
            unint64_t v1171 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v1981 + 48);
            uint64_t v1170 = v1939;
            goto LABEL_2058;
          }
          unint64_t v1371 = *v1370;
          if (v1371 >= 0xFFFFFFFF) {
            LODWORD(v1371) = -1;
          }
          if ((v1371 + 1) < 2) {
            goto LABEL_2062;
          }
LABEL_2073:
          size_t v1427 = (v1169 + v2041 + v66) & v1991;
          if (!(*(unsigned int (**)(size_t, uint64_t, uint64_t))(v2040 + 48))(v1427, 1, AssociatedTypeWitness))(*(void (**)(size_t, uint64_t))(v2040 + 8))(v1427, AssociatedTypeWitness); {
          size_t v1428 = (v1933 + v1427) & v2002;
          }
          uint64_t v1429 = v1167;
          if (v1966 == v1968)
          {
            int v1430 = (*(uint64_t (**)(size_t))(v1984 + 48))((v1933 + v1427) & v2002);
            size_t v1431 = v2039;
            uint64_t v77 = a2;
          }
          else
          {
            size_t v1432 = (uint64_t *)((v1987 + v1428) & 0xFFFFFFFFFFFFFFF8);
            size_t v1431 = v2039;
            uint64_t v77 = a2;
            if (v1951 <= 0x7FFFFFFE)
            {
              uint64_t v1433 = *v1432;
              if ((unint64_t)*v1432 >= 0xFFFFFFFF) {
                LODWORD(v1433) = -1;
              }
              if ((v1433 + 1) >= 2) {
                goto LABEL_2086;
              }
              goto LABEL_2085;
            }
            int v1430 = (*(uint64_t (**)(unint64_t, void, uint64_t))(v1979 + 48))(((unint64_t)v1432 + v1976) & v1974, v1938, v1978);
          }
          if (!v1430)
          {
            size_t v1432 = (uint64_t *)((v1987 + v1428) & 0xFFFFFFFFFFFFFFF8);
LABEL_2085:
            (*(void (**)(size_t, uint64_t))(v1984 + 8))(v1428, v1983);
            swift_bridgeObjectRelease();
            (*(void (**)(unint64_t, uint64_t))(v1979 + 8))(((unint64_t)v1432 + v1976) & v1974, v1978);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
LABEL_2086:
          unint64_t v1434 = v2034;
LABEL_2152:

          uint64_t v73 = AssociatedTypeWitness;
          unint64_t v64 = v1922;
          unint64_t v63 = v2056;
          size_t v76 = v1431;
          uint64_t v67 = v1429;
LABEL_321:
          size_t v170 = v76;
LABEL_322:
          uint64_t v171 = v2043 + 16;
          unint64_t v172 = ((v2025
                 + ((v2043
                   + 16
                   + ((((v2008
                       + 327
                       + ((((((((((v2007 + 7 + v170) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                           + 19) & 0xFFFFFFFFFFFFFFF8)
                         + 25) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFF8)
                     + 15) & 0xFFFFFFFFFFFFFFF8)) & v2032)) & 0xFFFFFFFFFFFFFFF8)
               + 8;
          if (v172 <= v2044) {
            unint64_t v172 = v2044;
          }
          if (v2017 > v172) {
            unint64_t v172 = v2017;
          }
          if (v2049 > v172) {
            unint64_t v172 = v2049;
          }
          if (v66 > v172) {
            unint64_t v172 = v66;
          }
          if (v2057 > v172) {
            unint64_t v172 = v2057;
          }
          if (v2016 > v172) {
            unint64_t v172 = v2046 + 2;
          }
          if (v2019 > v172) {
            unint64_t v172 = ((v2056 + 9) & 0xFFFFFFFFFFFFFFF8) + 8;
          }
          if (v2027 > v172) {
            unint64_t v172 = v2056 + 2;
          }
          if (v2020 > v172) {
            unint64_t v172 = (v2056 & 0xFFFFFFFFFFFFFFF8) + 16;
          }
          if (v172 <= v2057) {
            unint64_t v172 = v2057;
          }
          if (v172 <= v2045) {
            unint64_t v172 = v2045;
          }
          if (v172 <= v2022) {
            unint64_t v172 = ((v2047 + 1) & ~v2047) + v2057;
          }
          if (v172 <= v2057) {
            unint64_t v172 = v2057;
          }
          if (v172 <= v2018) {
            unint64_t v172 = v2018;
          }
          if (v172 <= v2027) {
            unint64_t v172 = v2056 + 2;
          }
          if (v172 <= v2057) {
            unint64_t v172 = v2057;
          }
          if (v172 <= v2046) {
            unint64_t v172 = v2046;
          }
          if (v172 <= v2057) {
            unint64_t v172 = v2057;
          }
          if (v172 <= v2024) {
            unint64_t v172 = v2024;
          }
          if (v172 <= v2027) {
            unint64_t v172 = v2056 + 2;
          }
          if (v172 <= v2057) {
            unint64_t v172 = v2057;
          }
          if (v172 <= 0x38) {
            unint64_t v172 = 56;
          }
          if (v172 > 3) {
            goto LABEL_367;
          }
          unsigned int v174 = ((1 << (8 * v172)) + 5) >> (8 * v172);
          if (v174 > 0xFFD6)
          {
            unsigned int v173 = *(_DWORD *)&v77[v172];
            goto LABEL_372;
          }
          if (v174 <= 0xD6) {
LABEL_367:
          }
            unsigned int v173 = v77[v172];
          else {
            unsigned int v173 = *(unsigned __int16 *)&v77[v172];
          }
LABEL_372:
          unsigned int v175 = v173 - 41;
          if (v173 >= 0x29)
          {
            if (v67 <= 3) {
              uint64_t v176 = v67;
            }
            else {
              uint64_t v176 = 4;
            }
            switch(v176)
            {
              case 1:
                int v177 = *v77;
                if (v67 < 4) {
                  goto LABEL_384;
                }
                goto LABEL_385;
              case 2:
                int v177 = *(unsigned __int16 *)v77;
                if (v67 >= 4) {
                  goto LABEL_385;
                }
                goto LABEL_384;
              case 3:
                int v177 = *(unsigned __int16 *)v77 | (v77[2] << 16);
                if (v67 >= 4) {
                  goto LABEL_385;
                }
                goto LABEL_384;
              case 4:
                int v177 = *(_DWORD *)v77;
                if (v67 < 4) {
LABEL_384:
                }
                  v177 |= v175 << (8 * v67);
LABEL_385:
                unsigned int v173 = v177 + 41;
                break;
              default:
                break;
            }
          }
          switch(v173)
          {
            case 0u:
              unsigned int v178 = v67;
              (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v2040 + 32))(a1, v77, v73);
              (*(void (**)(unint64_t, unint64_t, uint64_t))(v2060 + 32))((unint64_t)&a1[v1963] & v2005, (unint64_t)&v77[v1963] & v2005, v72);
              if (v178 > 3) {
                goto LABEL_388;
              }
              unsigned int v459 = ((1 << (8 * v178)) + 5) >> (8 * v178);
              if (v459 > 0xFFD6)
              {
                *(_DWORD *)unint64_t v68 = 0;
              }
              else if (v459 <= 0xD6)
              {
LABEL_388:
                *unint64_t v68 = 0;
              }
              else
              {
                *(_WORD *)unint64_t v68 = 0;
              }
              return a1;
            case 1u:
              unsigned int v181 = v77[v63];
              unsigned int v182 = v181 - 2;
              if (v181 < 2)
              {
                unsigned int v185 = v67;
                uint64_t v184 = v2060;
                uint64_t v186 = v2040;
              }
              else
              {
                if (v63 <= 3) {
                  uint64_t v183 = v63;
                }
                else {
                  uint64_t v183 = 4;
                }
                uint64_t v184 = v2060;
                unsigned int v185 = v67;
                uint64_t v186 = v2040;
                switch(v183)
                {
                  case 1:
                    int v187 = *v77;
                    goto LABEL_884;
                  case 2:
                    int v187 = *(unsigned __int16 *)v77;
                    goto LABEL_884;
                  case 3:
                    int v187 = *(unsigned __int16 *)v77 | (v77[2] << 16);
                    goto LABEL_884;
                  case 4:
                    int v187 = *(_DWORD *)v77;
LABEL_884:
                    if (v63 < 4) {
                      unsigned int v181 = (v187 | (v182 << (8 * v63))) + 2;
                    }
                    else {
                      unsigned int v181 = v187 + 2;
                    }
                    break;
                  default:
                    break;
                }
              }
              BOOL v654 = v181 == 1;
              if (v181 == 1) {
                uint64_t v655 = v184;
              }
              else {
                uint64_t v655 = v186;
              }
              if (v181 == 1) {
                uint64_t v656 = v72;
              }
              else {
                uint64_t v656 = v73;
              }
              unint64_t v657 = v63;
              (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v655 + 32))(a1, v77, v656);
              a1[v657] = v654;
              if (v185 > 3) {
                goto LABEL_894;
              }
              int v571 = 1;
              unsigned int v658 = ((1 << (8 * v185)) + 5) >> (8 * v185);
              if (v658 > 0xFFD6) {
                goto LABEL_2273;
              }
              if (v658 <= 0xD6) {
LABEL_894:
              }
                *unint64_t v68 = 1;
              else {
                *(_WORD *)unint64_t v68 = 1;
              }
              return a1;
            case 2u:
              unsigned int v188 = v77[v63];
              unsigned int v189 = v188 - 2;
              if (v188 < 2)
              {
                unsigned int v192 = v67;
                uint64_t v191 = v2060;
                uint64_t v193 = v2040;
              }
              else
              {
                if (v63 <= 3) {
                  uint64_t v190 = v63;
                }
                else {
                  uint64_t v190 = 4;
                }
                uint64_t v191 = v2060;
                unsigned int v192 = v67;
                uint64_t v193 = v2040;
                switch(v190)
                {
                  case 1:
                    int v194 = *v77;
                    goto LABEL_901;
                  case 2:
                    int v194 = *(unsigned __int16 *)v77;
                    goto LABEL_901;
                  case 3:
                    int v194 = *(unsigned __int16 *)v77 | (v77[2] << 16);
                    goto LABEL_901;
                  case 4:
                    int v194 = *(_DWORD *)v77;
LABEL_901:
                    if (v63 < 4) {
                      unsigned int v188 = (v194 | (v189 << (8 * v63))) + 2;
                    }
                    else {
                      unsigned int v188 = v194 + 2;
                    }
                    break;
                  default:
                    break;
                }
              }
              BOOL v659 = v188 == 1;
              if (v188 == 1) {
                uint64_t v660 = v191;
              }
              else {
                uint64_t v660 = v193;
              }
              if (v188 == 1) {
                uint64_t v661 = v72;
              }
              else {
                uint64_t v661 = v73;
              }
              unint64_t v662 = v63;
              (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v660 + 32))(a1, v77, v661);
              a1[v662] = v659;
              if (v192 > 3) {
                goto LABEL_911;
              }
              unsigned int v663 = ((1 << (8 * v192)) + 5) >> (8 * v192);
              if (v663 > 0xFFD6)
              {
                int v571 = 2;
                goto LABEL_2273;
              }
              if (v663 <= 0xD6) {
LABEL_911:
              }
                *unint64_t v68 = 2;
              else {
                *(_WORD *)unint64_t v68 = 2;
              }
              return a1;
            case 3u:
              unsigned int v195 = v77[v63];
              unsigned int v196 = v195 - 2;
              if (v195 < 2)
              {
                unsigned int v199 = v67;
                uint64_t v198 = v2060;
                uint64_t v200 = v2040;
              }
              else
              {
                if (v63 <= 3) {
                  uint64_t v197 = v63;
                }
                else {
                  uint64_t v197 = 4;
                }
                uint64_t v198 = v2060;
                unsigned int v199 = v67;
                uint64_t v200 = v2040;
                switch(v197)
                {
                  case 1:
                    int v201 = *v77;
                    goto LABEL_919;
                  case 2:
                    int v201 = *(unsigned __int16 *)v77;
                    goto LABEL_919;
                  case 3:
                    int v201 = *(unsigned __int16 *)v77 | (v77[2] << 16);
                    goto LABEL_919;
                  case 4:
                    int v201 = *(_DWORD *)v77;
LABEL_919:
                    if (v63 < 4) {
                      unsigned int v195 = (v201 | (v196 << (8 * v63))) + 2;
                    }
                    else {
                      unsigned int v195 = v201 + 2;
                    }
                    break;
                  default:
                    break;
                }
              }
              BOOL v664 = v195 == 1;
              if (v195 == 1) {
                uint64_t v665 = v198;
              }
              else {
                uint64_t v665 = v200;
              }
              if (v195 == 1) {
                uint64_t v666 = v72;
              }
              else {
                uint64_t v666 = v73;
              }
              unint64_t v667 = v63;
              (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v665 + 32))(a1, v77, v666);
              a1[v667] = v664;
              if (v199 > 3) {
                goto LABEL_929;
              }
              unsigned int v668 = ((1 << (8 * v199)) + 5) >> (8 * v199);
              if (v668 > 0xFFD6)
              {
                int v571 = 3;
                goto LABEL_2273;
              }
              if (v668 <= 0xD6) {
LABEL_929:
              }
                *unint64_t v68 = 3;
              else {
                *(_WORD *)unint64_t v68 = 3;
              }
              return a1;
            case 4u:
              unsigned int v202 = v77[v63];
              unsigned int v203 = v202 - 2;
              if (v202 < 2)
              {
                uint64_t v205 = v2060;
                uint64_t v206 = v2040;
              }
              else
              {
                if (v63 <= 3) {
                  uint64_t v204 = v63;
                }
                else {
                  uint64_t v204 = 4;
                }
                uint64_t v205 = v2060;
                uint64_t v206 = v2040;
                switch(v204)
                {
                  case 1:
                    int v207 = *v77;
                    goto LABEL_937;
                  case 2:
                    int v207 = *(unsigned __int16 *)v77;
                    goto LABEL_937;
                  case 3:
                    int v207 = *(unsigned __int16 *)v77 | (v77[2] << 16);
                    goto LABEL_937;
                  case 4:
                    int v207 = *(_DWORD *)v77;
LABEL_937:
                    if (v63 < 4) {
                      unsigned int v202 = (v207 | (v203 << (8 * v63))) + 2;
                    }
                    else {
                      unsigned int v202 = v207 + 2;
                    }
                    break;
                  default:
                    break;
                }
              }
              unsigned int v669 = v67;
              BOOL v670 = v202 == 1;
              if (v202 == 1) {
                uint64_t v671 = v205;
              }
              else {
                uint64_t v671 = v206;
              }
              if (v202 == 1) {
                uint64_t v672 = v72;
              }
              else {
                uint64_t v672 = v73;
              }
              (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v671 + 32))(a1, v77, v672);
              a1[v2056] = v670;
              unint64_t v673 = (unint64_t)&a1[v1997] & v2004;
              BOOL v674 = (unsigned __int8 *)((unint64_t)&v77[v1997] & v2004);
              unsigned int v675 = v674[v2056];
              unsigned int v676 = v675 - 2;
              if (v675 >= 2)
              {
                if (v2056 <= 3) {
                  uint64_t v677 = v2056;
                }
                else {
                  uint64_t v677 = 4;
                }
                switch(v677)
                {
                  case 1:
                    int v678 = *v674;
                    goto LABEL_1413;
                  case 2:
                    int v678 = *(unsigned __int16 *)v674;
                    goto LABEL_1413;
                  case 3:
                    int v678 = *(unsigned __int16 *)v674 | (*(unsigned __int8 *)(((unint64_t)&v77[v1997] & v2004) + 2) << 16);
                    goto LABEL_1413;
                  case 4:
                    int v678 = *(_DWORD *)v674;
LABEL_1413:
                    if (v2056 < 4) {
                      unsigned int v675 = (v678 | (v676 << (8 * v2056))) + 2;
                    }
                    else {
                      unsigned int v675 = v678 + 2;
                    }
                    break;
                  default:
                    break;
                }
              }
              BOOL v822 = v675 == 1;
              if (v675 == 1) {
                uint64_t v823 = v205;
              }
              else {
                uint64_t v823 = v206;
              }
              (*(void (**)(unint64_t))(v823 + 32))(v673);
              *(unsigned char *)(v673 + v2056) = v822;
              if (v669 > 3) {
                goto LABEL_1420;
              }
              unsigned int v824 = ((1 << (8 * v669)) + 5) >> (8 * v669);
              if (v824 > 0xFFD6)
              {
                int v571 = 4;
                goto LABEL_2273;
              }
              if (v824 <= 0xD6) {
LABEL_1420:
              }
                *unint64_t v68 = 4;
              else {
                *(_WORD *)unint64_t v68 = 4;
              }
              return a1;
            case 5u:
              uint64_t v2009 = v2008 + 327;
              if (v2030 == v1971)
              {
                size_t v208 = v76;
                uint64_t v209 = v2040;
                int v210 = (*(uint64_t (**)(unsigned __int8 *))(v2040 + 48))(v77);
                uint64_t v211 = v1982;
                uint64_t v212 = v2001;
                uint64_t v213 = v2000;
LABEL_1483:
                if (v210)
                {
LABEL_1484:
                  memcpy(a1, v77, v2049);
                  uint64_t v854 = v1966;
                  uint64_t v855 = v2030;
                  unsigned int v856 = v1971;
                  uint64_t v857 = v2009;
LABEL_1485:
                  size_t v858 = v208;
                  goto LABEL_1491;
                }
                unint64_t v460 = (unint64_t)&v77[v1990] & v1991;
                unint64_t v461 = (v460 + v2029 + v2050) & v2002;
LABEL_1487:
                size_t v859 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v209 + 32);
                v859(a1, v77, AssociatedTypeWitness);
                unint64_t v860 = (unint64_t)&a1[v1990] & v1991;
                v859((unsigned __int8 *)v860, (unsigned __int8 *)v460, AssociatedTypeWitness);
                unint64_t v861 = (v860 + v2029 + v2050) & v2002;
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v1984 + 32))(v861, v461, v1983);
                unint64_t v862 = (void *)((v1987 + v861) & 0xFFFFFFFFFFFFFFF8);
                size_t v863 = (void *)((v1987 + v461) & 0xFFFFFFFFFFFFFFF8);
                *unint64_t v862 = *v863;
                unint64_t v864 = ((unint64_t)v862 + v1976) & v1974;
                unint64_t v865 = ((unint64_t)v863 + v1976) & v1974;
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v1979 + 32))(v864, v865, v1978);
                unint64_t v866 = (void *)((v1972 + v864) & 0xFFFFFFFFFFFFFFF8);
                unint64_t v867 = (void *)((v1972 + v865) & 0xFFFFFFFFFFFFFFF8);
                void *v866 = *v867;
                *(_OWORD *)(((unint64_t)v866 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v867
                                                                                               + 15) & 0xFFFFFFFFFFFFFFF8);
                *(_OWORD *)(v2034 + v861) = *(_OWORD *)(v2034 + v461);
                size_t v868 = (v2036 + v2034 + v861) & v1998;
                size_t v869 = (v2036 + v2034 + v461) & v1998;
                *(unsigned char *)size_t v868 = *(unsigned char *)v869;
                uint64_t v870 = v868 | 4;
                int v871 = *(_DWORD *)(v869 | 4);
                *(unsigned char *)(v870 + 4) = *(unsigned char *)((v869 | 4) + 4);
                *(_DWORD *)uint64_t v870 = v871;
                *(_WORD *)(v868 + 10) = *(_WORD *)(v869 + 0xA);
                size_t v2061 = v868;
                size_t v872 = (v1999 + v868) & v213;
                unint64_t v873 = *(void (**)(size_t, size_t, uint64_t))(v2001 + 32);
                v873(v872, (v1999 + v869) & v213, v2003);
                size_t v874 = (v1996 + v872) & v213;
                size_t v875 = (v1996 + ((v1999 + v869) & v213)) & v213;
                v873(v874, v875, v2003);
                unint64_t v876 = (unsigned char *)(v874 + v1992);
                *unint64_t v876 = *(unsigned char *)(v875 + v1992);
                v876[1] = *(unsigned char *)(v875 + v1992 + 1);
                v876[2] = *(unsigned char *)(v875 + v1992 + 2);
                v876[3] = *(unsigned char *)(v875 + v1992 + 3);
                v876[4] = *(unsigned char *)(v875 + v1992 + 4);
                unint64_t v877 = (v874 + v1992 + 12) & 0xFFFFFFFFFFFFFFF8;
                unint64_t v878 = (v875 + v1992 + 12) & 0xFFFFFFFFFFFFFFF8;
                *(_OWORD *)unint64_t v877 = *(_OWORD *)v878;
                *(unsigned char *)(v877 + 16) = *(unsigned char *)(v878 + 16);
                *(unsigned char *)(v877 + 17) = *(unsigned char *)(v878 + 17);
                *(unsigned char *)(v877 + 18) = *(unsigned char *)(v878 + 18);
                *(unsigned char *)(v877 + 19) = *(unsigned char *)(v878 + 19);
                unint64_t v879 = (v877 + 27) & 0xFFFFFFFFFFFFFFF8;
                unint64_t v880 = (v878 + 27) & 0xFFFFFFFFFFFFFFF8;
                *(void *)unint64_t v879 = *(void *)v880;
                *(unsigned char *)(v879 + 8) = *(unsigned char *)(v880 + 8);
                *(unsigned char *)(v879 + 9) = *(unsigned char *)(v880 + 9);
                *(unsigned char *)(v879 + 10) = *(unsigned char *)(v880 + 10);
                *(unsigned char *)(v879 + 11) = *(unsigned char *)(v880 + 11);
                *(unsigned char *)(v879 + 12) = *(unsigned char *)(v880 + 12);
                uint64_t v881 = (void *)((v878 + 47) & 0xFFFFFFFFFFFFFFF8);
                unint64_t v882 = (void *)((v877 + 47) & 0xFFFFFFFFFFFFFFF8);
                *unint64_t v882 = *v881;
                unint64_t v883 = ((unint64_t)v882 + 15) & 0xFFFFFFFFFFFFFFF8;
                unint64_t v884 = ((unint64_t)v881 + 15) & 0xFFFFFFFFFFFFFFF8;
                *(void *)unint64_t v883 = *(void *)v884;
                *(unsigned char *)(v883 + 8) = *(unsigned char *)(v884 + 8);
                *(unsigned char *)(v883 + 9) = *(unsigned char *)(v884 + 9);
                unint64_t v885 = (void *)((v1993 + v883) & v213);
                unint64_t v886 = (const void *)((v1993 + v884) & v213);
                if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v2001 + 48))(v886, 1, v2003))
                {
                  size_t v208 = v2039;
                  memcpy(v885, v886, v2039);
                }
                else
                {
                  v873((size_t)v885, (size_t)v886, v2003);
                  (*(void (**)(void *, void, uint64_t, uint64_t))(v2001 + 56))(v885, 0, 1, v2003);
                  size_t v208 = v2039;
                }
                uint64_t v887 = (void *)(((unint64_t)v886 + v1994) & 0xFFFFFFFFFFFFFFF8);
                unint64_t v888 = (void *)(((unint64_t)v885 + v1994) & 0xFFFFFFFFFFFFFFF8);
                void *v888 = *v887;
                unint64_t v889 = ((unint64_t)v888 + 15) & 0xFFFFFFFFFFFFFFF8;
                unint64_t v890 = ((unint64_t)v887 + 15) & 0xFFFFFFFFFFFFFFF8;
                uint64_t v891 = *(void *)v890;
                *(unsigned char *)(v889 + 8) = *(unsigned char *)(v890 + 8);
                *(void *)unint64_t v889 = v891;
                long long v892 = (void *)(((unint64_t)v888 + 31) & 0xFFFFFFFFFFFFFFF8);
                long long v893 = (void *)(((unint64_t)v887 + 31) & 0xFFFFFFFFFFFFFFF8);
                *long long v892 = *v893;
                long long v894 = (_OWORD *)(((unint64_t)v892 + 15) & 0xFFFFFFFFFFFFFFF8);
                long long v895 = (_OWORD *)(((unint64_t)v893 + 15) & 0xFFFFFFFFFFFFFFF8);
                *long long v894 = *v895;
                unint64_t v896 = ((unint64_t)v894 + 19) & 0xFFFFFFFFFFFFFFF8;
                unint64_t v897 = ((unint64_t)v895 + 19) & 0xFFFFFFFFFFFFFFF8;
                uint64_t v898 = *(void *)v897;
                *(unsigned char *)(v896 + 8) = *(unsigned char *)(v897 + 8);
                *(void *)unint64_t v896 = v898;
                *(unsigned char *)(v896 + 9) = *(unsigned char *)(v897 + 9);
                unint64_t v899 = (v896 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                unint64_t v900 = (v897 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                LODWORD(v891) = *(_DWORD *)v900;
                *(unsigned char *)(v899 + 4) = *(unsigned char *)(v900 + 4);
                *(_DWORD *)unint64_t v899 = v891;
                *(_OWORD *)((v896 + 25) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v897 + 25) & 0xFFFFFFFFFFFFFFF8);
                unint64_t v901 = v2035 + v2061;
                long long v902 = *(_OWORD *)(v2035 + v869 + 112);
                long long v904 = *(_OWORD *)(v2035 + v869 + 64);
                long long v903 = *(_OWORD *)(v2035 + v869 + 80);
                *(_OWORD *)(v901 + 96) = *(_OWORD *)(v2035 + v869 + 96);
                *(_OWORD *)(v901 + 112) = v902;
                *(_OWORD *)(v901 + 64) = v904;
                *(_OWORD *)(v901 + 80) = v903;
                long long v905 = *(_OWORD *)(v2035 + v869 + 176);
                long long v907 = *(_OWORD *)(v2035 + v869 + 128);
                long long v906 = *(_OWORD *)(v2035 + v869 + 144);
                *(_OWORD *)(v901 + 160) = *(_OWORD *)(v2035 + v869 + 160);
                *(_OWORD *)(v901 + 176) = v905;
                *(_OWORD *)(v901 + 128) = v907;
                *(_OWORD *)(v901 + 144) = v906;
                long long v909 = *(_OWORD *)(v2035 + v869 + 208);
                long long v908 = *(_OWORD *)(v2035 + v869 + 224);
                long long v910 = *(_OWORD *)(v2035 + v869 + 192);
                *(void *)(v901 + 240) = *(void *)(v2035 + v869 + 240);
                *(_OWORD *)(v901 + 208) = v909;
                *(_OWORD *)(v901 + 224) = v908;
                *(_OWORD *)(v901 + 192) = v910;
                long long v911 = *(_OWORD *)(v2035 + v869);
                long long v912 = *(_OWORD *)(v2035 + v869 + 16);
                long long v913 = *(_OWORD *)(v2035 + v869 + 48);
                *(_OWORD *)(v901 + 32) = *(_OWORD *)(v2035 + v869 + 32);
                *(_OWORD *)(v901 + 48) = v913;
                *(_OWORD *)unint64_t v901 = v911;
                *(_OWORD *)(v901 + 16) = v912;
                int v914 = (_OWORD *)((v2035 + v2061 + 255) & 0xFFFFFFFFFFFFFFF8);
                uint64_t v915 = (long long *)((v2035 + v869 + 255) & 0xFFFFFFFFFFFFFFF8);
                long long v916 = *v915;
                *(_OWORD *)((char *)v914 + 9) = *(long long *)((char *)v915 + 9);
                *int v914 = v916;
                unint64_t v917 = (v2035 + v2061 + 287) & 0xFFFFFFFFFFFFFFF8;
                unint64_t v918 = (v2035 + v869 + 287) & 0xFFFFFFFFFFFFFFF8;
                long long v919 = *(_OWORD *)v918;
                *(unsigned char *)(v917 + 16) = *(unsigned char *)(v918 + 16);
                *(_OWORD *)unint64_t v917 = v919;
                unint64_t v920 = (void *)((v2035 + v2061 + 311) & 0xFFFFFFFFFFFFFFF8);
                unint64_t v921 = (void *)((v2035 + v869 + 311) & 0xFFFFFFFFFFFFFFF8);
                *unint64_t v920 = *v921;
                *(_OWORD *)(((unint64_t)v920 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v921
                                                                                               + 15) & 0xFFFFFFFFFFFFFFF8);
                size_t v858 = v1992;
                uint64_t v213 = v2000;
                uint64_t v77 = a2;
                uint64_t v209 = v2040;
                uint64_t v854 = v1966;
                uint64_t v855 = v2030;
                unsigned int v856 = v1971;
                uint64_t v857 = v2009;
                uint64_t v212 = v2001;
                uint64_t v211 = v1982;
                if (!v1982) {
                  goto LABEL_1485;
                }
LABEL_1491:
                unint64_t v922 = v2007 + 7;
                unint64_t v923 = ((((v857
                         + ((((((((((v2007 + 7 + v858) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                             + 19) & 0xFFFFFFFFFFFFFFF8)
                           + 25) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFF8)
                       + 15) & 0xFFFFFFFFFFFFFFF8)
                     + 16;
                size_t v2062 = (void *)((unint64_t)&a1[v2043 + v923] & v2032);
                long long v924 = (const void *)((unint64_t)&v77[v2043 + v923] & v2032);
                if (v855 == v856)
                {
                  int v925 = (*(uint64_t (**)(const void *, uint64_t, uint64_t))(v209 + 48))(v924, v855, AssociatedTypeWitness);
                  goto LABEL_1493;
                }
                unint64_t v930 = ((unint64_t)v924 + v1990) & v1991;
                unint64_t v931 = (v1962 + v930) & v2002;
                if (v1968 == v856)
                {
                  if (v854 == v1968)
                  {
                    int v925 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v1984 + 48))((v1962 + v930) & v2002, v854, v1983);
                    goto LABEL_1493;
                  }
                  int v1005 = (unint64_t *)((v1987 + v931) & 0xFFFFFFFFFFFFFFF8);
                  if (v1951 <= 0x7FFFFFFE)
                  {
                    unint64_t v1006 = *v1005;
                    goto LABEL_1817;
                  }
                  int v925 = (*(uint64_t (**)(unint64_t, void, uint64_t))(v1979 + 48))(((unint64_t)v1005 + v1976) & v1974, v1938, v1978);
                }
                else
                {
                  size_t v932 = v931 + v2034;
                  if ((v1948 & 0x80000000) == 0)
                  {
                    unint64_t v933 = *(void *)(v932 + 8);
                    if (v933 >= 0xFFFFFFFF) {
                      LODWORD(v933) = -1;
                    }
                    if (v933 != -1) {
                      goto LABEL_1494;
                    }
LABEL_1503:
                    unint64_t v930 = ((unint64_t)v924 + v1990) & v1991;
                    unint64_t v931 = (v1962 + v930) & v2002;
                    goto LABEL_1504;
                  }
                  uint64_t v1007 = (v1999 + ((v2036 + v932) & v1998)) & v213;
                  if (v211 <= 0x7FFFFFFD)
                  {
                    unint64_t v1006 = *(void *)(((v1964 + ((v1996 + v1007) & v213)) & 0xFFFFFFFFFFFFFFF8) + 8);
LABEL_1817:
                    if (v1006 >= 0xFFFFFFFF) {
                      LODWORD(v1006) = -1;
                    }
                    if ((v1006 + 1) >= 2) {
                      goto LABEL_1494;
                    }
LABEL_1504:
                    uint64_t v934 = v212;
                    size_t v935 = *(void (**)(void *, const void *, uint64_t))(v209 + 32);
                    uint64_t v2051 = v924;
                    v935(v2062, v924, AssociatedTypeWitness);
                    uint64_t v936 = v934;
                    unint64_t v937 = ((unint64_t)v2062 + v1990) & v1991;
                    v935((void *)v937, (const void *)v930, AssociatedTypeWitness);
                    unint64_t v938 = (v1962 + v937) & v2002;
                    (*(void (**)(unint64_t, unint64_t, uint64_t))(v1984 + 32))(v938, v931, v1983);
                    unint64_t v939 = (void *)((v1987 + v938) & 0xFFFFFFFFFFFFFFF8);
                    unint64_t v940 = (void *)((v1987 + v931) & 0xFFFFFFFFFFFFFFF8);
                    *unint64_t v939 = *v940;
                    unint64_t v941 = ((unint64_t)v939 + v1976) & v1974;
                    uint64_t v942 = v213;
                    unint64_t v943 = ((unint64_t)v940 + v1976) & v1974;
                    (*(void (**)(unint64_t, unint64_t, uint64_t))(v1979 + 32))(v941, v943, v1978);
                    v944 = (void *)((v1972 + v941) & 0xFFFFFFFFFFFFFFF8);
                    int v945 = (void *)((v1972 + v943) & 0xFFFFFFFFFFFFFFF8);
                    void *v944 = *v945;
                    *(_OWORD *)(((unint64_t)v944 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v945 + 15) & 0xFFFFFFFFFFFFFFF8);
                    *(_OWORD *)(v938 + v2034) = *(_OWORD *)(v931 + v2034);
                    size_t v946 = (v2036 + v938 + v2034) & v1998;
                    size_t v947 = (v2036 + v931 + v2034) & v1998;
                    *(unsigned char *)size_t v946 = *(unsigned char *)v947;
                    uint64_t v948 = v946 | 4;
                    int v949 = *(_DWORD *)(v947 | 4);
                    *(unsigned char *)(v948 + 4) = *(unsigned char *)((v947 | 4) + 4);
                    *(_DWORD *)uint64_t v948 = v949;
                    *(_WORD *)(v946 + 10) = *(_WORD *)(v947 + 0xA);
                    int v950 = *(void (**)(size_t, size_t, uint64_t))(v936 + 32);
                    v950((v1999 + v946) & v942, (v1999 + v947) & v942, v2003);
                    size_t v951 = (v1996 + ((v1999 + v946) & v942)) & v942;
                    size_t v952 = (v1996 + ((v1999 + v947) & v942)) & v942;
                    v950(v951, v952, v2003);
                    v953 = (unsigned char *)(v951 + v1992);
                    unsigned char *v953 = *(unsigned char *)(v952 + v1992);
                    v953[1] = *(unsigned char *)(v952 + v1992 + 1);
                    v953[2] = *(unsigned char *)(v952 + v1992 + 2);
                    v953[3] = *(unsigned char *)(v952 + v1992 + 3);
                    v953[4] = *(unsigned char *)(v952 + v1992 + 4);
                    unint64_t v954 = (v951 + v1992 + 12) & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v955 = (v952 + v1992 + 12) & 0xFFFFFFFFFFFFFFF8;
                    *(_OWORD *)unint64_t v954 = *(_OWORD *)v955;
                    *(unsigned char *)(v954 + 16) = *(unsigned char *)(v955 + 16);
                    *(unsigned char *)(v954 + 17) = *(unsigned char *)(v955 + 17);
                    *(unsigned char *)(v954 + 18) = *(unsigned char *)(v955 + 18);
                    *(unsigned char *)(v954 + 19) = *(unsigned char *)(v955 + 19);
                    unint64_t v956 = (v954 + 27) & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v957 = (v955 + 27) & 0xFFFFFFFFFFFFFFF8;
                    *(void *)unint64_t v956 = *(void *)v957;
                    *(unsigned char *)(v956 + 8) = *(unsigned char *)(v957 + 8);
                    *(unsigned char *)(v956 + 9) = *(unsigned char *)(v957 + 9);
                    *(unsigned char *)(v956 + 10) = *(unsigned char *)(v957 + 10);
                    *(unsigned char *)(v956 + 11) = *(unsigned char *)(v957 + 11);
                    *(unsigned char *)(v956 + 12) = *(unsigned char *)(v957 + 12);
                    unint64_t v958 = (void *)((v955 + 47) & 0xFFFFFFFFFFFFFFF8);
                    unint64_t v959 = (void *)((v954 + 47) & 0xFFFFFFFFFFFFFFF8);
                    *unint64_t v959 = *v958;
                    unint64_t v960 = ((unint64_t)v959 + 15) & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v961 = ((unint64_t)v958 + 15) & 0xFFFFFFFFFFFFFFF8;
                    *(void *)unint64_t v960 = *(void *)v961;
                    *(unsigned char *)(v960 + 8) = *(unsigned char *)(v961 + 8);
                    *(unsigned char *)(v960 + 9) = *(unsigned char *)(v961 + 9);
                    unint64_t v962 = (void *)((v1993 + v960) & v942);
                    unint64_t v963 = (const void *)((v1993 + v961) & v942);
                    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v936 + 48))(v963, 1, v2003))
                    {
                      memcpy(v962, v963, v2039);
                    }
                    else
                    {
                      v950((size_t)v962, (size_t)v963, v2003);
                      (*(void (**)(void *, void, uint64_t, uint64_t))(v936 + 56))(v962, 0, 1, v2003);
                    }
                    unint64_t v922 = v2007 + 7;
                    unint64_t v964 = (void *)(((unint64_t)v962 + v1994) & 0xFFFFFFFFFFFFFFF8);
                    unint64_t v965 = (void *)(((unint64_t)v963 + v1994) & 0xFFFFFFFFFFFFFFF8);
                    void *v964 = *v965;
                    unint64_t v966 = ((unint64_t)v964 + 15) & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v967 = ((unint64_t)v965 + 15) & 0xFFFFFFFFFFFFFFF8;
                    uint64_t v968 = *(void *)v967;
                    *(unsigned char *)(v966 + 8) = *(unsigned char *)(v967 + 8);
                    *(void *)unint64_t v966 = v968;
                    v969 = (void *)(((unint64_t)v964 + 31) & 0xFFFFFFFFFFFFFFF8);
                    unint64_t v970 = (void *)(((unint64_t)v965 + 31) & 0xFFFFFFFFFFFFFFF8);
                    void *v969 = *v970;
                    unint64_t v971 = (_OWORD *)(((unint64_t)v969 + 15) & 0xFFFFFFFFFFFFFFF8);
                    uint64_t v972 = (_OWORD *)(((unint64_t)v970 + 15) & 0xFFFFFFFFFFFFFFF8);
                    _OWORD *v971 = *v972;
                    unint64_t v973 = ((unint64_t)v971 + 19) & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v974 = ((unint64_t)v972 + 19) & 0xFFFFFFFFFFFFFFF8;
                    uint64_t v975 = *(void *)v974;
                    *(unsigned char *)(v973 + 8) = *(unsigned char *)(v974 + 8);
                    *(void *)unint64_t v973 = v975;
                    *(unsigned char *)(v973 + 9) = *(unsigned char *)(v974 + 9);
                    unint64_t v976 = (v973 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                    unint64_t v977 = (v974 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                    LODWORD(v968) = *(_DWORD *)v977;
                    *(unsigned char *)(v976 + 4) = *(unsigned char *)(v977 + 4);
                    *(_DWORD *)unint64_t v976 = v968;
                    *(_OWORD *)((v973 + 25) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v974 + 25) & 0xFFFFFFFFFFFFFFF8);
                    size_t v978 = v946 + v2035;
                    long long v979 = *(_OWORD *)(v947 + v2035 + 112);
                    long long v981 = *(_OWORD *)(v947 + v2035 + 64);
                    long long v980 = *(_OWORD *)(v947 + v2035 + 80);
                    *(_OWORD *)(v978 + 96) = *(_OWORD *)(v947 + v2035 + 96);
                    *(_OWORD *)(v978 + 112) = v979;
                    *(_OWORD *)(v978 + 64) = v981;
                    *(_OWORD *)(v978 + 80) = v980;
                    long long v982 = *(_OWORD *)(v947 + v2035 + 176);
                    long long v984 = *(_OWORD *)(v947 + v2035 + 128);
                    long long v983 = *(_OWORD *)(v947 + v2035 + 144);
                    *(_OWORD *)(v978 + 160) = *(_OWORD *)(v947 + v2035 + 160);
                    *(_OWORD *)(v978 + 176) = v982;
                    *(_OWORD *)(v978 + 128) = v984;
                    *(_OWORD *)(v978 + 144) = v983;
                    long long v986 = *(_OWORD *)(v947 + v2035 + 208);
                    long long v985 = *(_OWORD *)(v947 + v2035 + 224);
                    long long v987 = *(_OWORD *)(v947 + v2035 + 192);
                    *(void *)(v978 + 240) = *(void *)(v947 + v2035 + 240);
                    *(_OWORD *)(v978 + 208) = v986;
                    *(_OWORD *)(v978 + 224) = v985;
                    *(_OWORD *)(v978 + 192) = v987;
                    long long v988 = *(_OWORD *)(v947 + v2035);
                    long long v989 = *(_OWORD *)(v947 + v2035 + 16);
                    long long v990 = *(_OWORD *)(v947 + v2035 + 48);
                    *(_OWORD *)(v978 + 32) = *(_OWORD *)(v947 + v2035 + 32);
                    *(_OWORD *)(v978 + 48) = v990;
                    *(_OWORD *)size_t v978 = v988;
                    *(_OWORD *)(v978 + 16) = v989;
                    long long v991 = (_OWORD *)((v946 + v2035 + 255) & 0xFFFFFFFFFFFFFFF8);
                    long long v992 = (long long *)((v947 + v2035 + 255) & 0xFFFFFFFFFFFFFFF8);
                    long long v993 = *v992;
                    *(_OWORD *)((char *)v991 + 9) = *(long long *)((char *)v992 + 9);
                    _OWORD *v991 = v993;
                    unint64_t v994 = (v946 + v2035 + 287) & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v995 = (v947 + v2035 + 287) & 0xFFFFFFFFFFFFFFF8;
                    long long v996 = *(_OWORD *)v995;
                    *(unsigned char *)(v994 + 16) = *(unsigned char *)(v995 + 16);
                    *(_OWORD *)unint64_t v994 = v996;
                    long long v997 = (void *)((v946 + v2035 + 311) & 0xFFFFFFFFFFFFFFF8);
                    long long v998 = (void *)((v947 + v2035 + 311) & 0xFFFFFFFFFFFFFFF8);
                    *long long v997 = *v998;
                    *(_OWORD *)(((unint64_t)v997 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v998 + 15) & 0xFFFFFFFFFFFFFFF8);
                    size_t v927 = v2039;
                    size_t v929 = v1992;
                    uint64_t v928 = v2009;
                    size_t v926 = v2062;
                    long long v924 = v2051;
                    if (v1982) {
                      goto LABEL_1508;
                    }
                    goto LABEL_1495;
                  }
                  int v925 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v212 + 48))(v1007, v211, v2003);
                }
LABEL_1493:
                if (v925)
                {
LABEL_1494:
                  size_t v926 = v2062;
                  memcpy(v2062, v924, v2049);
                  size_t v927 = v2039;
                  uint64_t v928 = v2009;
LABEL_1495:
                  size_t v929 = v927;
LABEL_1508:
                  unint64_t v999 = ((((v928
                           + ((((((((((v922 + v929) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                               + 19) & 0xFFFFFFFFFFFFFFF8)
                             + 25) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFF8)
                         + 15) & 0xFFFFFFFFFFFFFFF8)
                       + 16;
                  *(void *)(((unint64_t)v926 + v999) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v924 + v999) & 0xFFFFFFFFFFFFFFF8);
                  unint64_t v1000 = ((v2025
                          + ((v171
                            + ((((v928
                                + ((((((((((v922 + v927) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                                    + 19) & 0xFFFFFFFFFFFFFFF8)
                                  + 25) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFF8)
                              + 15) & 0xFFFFFFFFFFFFFFF8)) & v2032)) & 0xFFFFFFFFFFFFFFF8)
                        + 8;
                  if (v1000 <= v2044) {
                    unint64_t v1000 = v2044;
                  }
                  if (v2017 > v1000) {
                    unint64_t v1000 = v2017;
                  }
                  if (v2049 > v1000) {
                    unint64_t v1000 = v2049;
                  }
                  if (v66 > v1000) {
                    unint64_t v1000 = v66;
                  }
                  if (v2057 > v1000) {
                    unint64_t v1000 = v2057;
                  }
                  if (v2016 > v1000) {
                    unint64_t v1000 = v2046 + 2;
                  }
                  if (v2019 > v1000) {
                    unint64_t v1000 = ((v2056 + 9) & 0xFFFFFFFFFFFFFFF8) + 8;
                  }
                  if (v2027 > v1000) {
                    unint64_t v1000 = v2056 + 2;
                  }
                  if (v2020 > v1000) {
                    unint64_t v1000 = (v2056 & 0xFFFFFFFFFFFFFFF8) + 16;
                  }
                  if (v1000 <= v2057) {
                    unint64_t v1000 = v2057;
                  }
                  if (v1000 <= v2045) {
                    unint64_t v1000 = v2045;
                  }
                  if (v1000 <= v2022) {
                    unint64_t v1000 = ((v2047 + 1) & ~v2047) + v2057;
                  }
                  if (v1000 <= v2057) {
                    unint64_t v1000 = v2057;
                  }
                  if (v1000 <= v2018) {
                    unint64_t v1000 = v2018;
                  }
                  if (v1000 <= v2027) {
                    unint64_t v1000 = v2056 + 2;
                  }
                  if (v1000 <= v2057) {
                    unint64_t v1000 = v2057;
                  }
                  if (v1000 <= v2046) {
                    unint64_t v1000 = v2046;
                  }
                  if (v1000 <= v2057) {
                    unint64_t v1000 = v2057;
                  }
                  if (v1000 <= v2024) {
                    unint64_t v1000 = v2024;
                  }
                  if (v1000 <= v2027) {
                    unint64_t v1000 = v2056 + 2;
                  }
                  if (v1000 <= v2057) {
                    unint64_t v1000 = v2057;
                  }
                  if (v1000 <= 0x38) {
                    unint64_t v1000 = 56;
                  }
                  if (v1000 > 3) {
                    goto LABEL_1553;
                  }
                  unsigned int v1002 = ((1 << (8 * v1000)) + 5) >> (8 * v1000);
                  if (v1002 <= 0xFFD6)
                  {
                    if (v1002 <= 0xD6)
                    {
LABEL_1553:
                      char v1001 = 5;
LABEL_1643:
                      a1[v1000] = v1001;
                      return a1;
                    }
                    __int16 v1003 = 5;
LABEL_1647:
                    *(_WORD *)&a1[v1000] = v1003;
                    return a1;
                  }
                  int v1004 = 5;
LABEL_1649:
                  *(_DWORD *)&a1[v1000] = v1004;
                  return a1;
                }
                goto LABEL_1503;
              }
              unint64_t v460 = (unint64_t)&v77[v1990] & v1991;
              unint64_t v461 = (v460 + v2029 + v2050) & v2002;
              uint64_t v211 = v1982;
              uint64_t v213 = v2000;
              uint64_t v209 = v2040;
              if (v1968 == v1971)
              {
                uint64_t v212 = v2001;
                size_t v208 = v76;
                if (v1966 == v1968)
                {
                  int v210 = (*(uint64_t (**)(unint64_t, void, uint64_t))(v1984 + 48))((v460 + v2029 + v2050) & v2002, v1966, v1983);
                  goto LABEL_1483;
                }
                uint64_t v624 = (unint64_t *)((v1987 + v461) & 0xFFFFFFFFFFFFFFF8);
                if (v1951 > 0x7FFFFFFE)
                {
                  int v210 = (*(uint64_t (**)(unint64_t, void, uint64_t))(v1979 + 48))(((unint64_t)v624 + v1976) & v1974, v1938, v1978);
                  goto LABEL_1483;
                }
                unint64_t v625 = *v624;
              }
              else
              {
                size_t v567 = v2034 + v461;
                uint64_t v212 = v2001;
                if ((v1948 & 0x80000000) == 0)
                {
                  size_t v208 = v76;
                  unint64_t v568 = *(void *)(v567 + 8);
                  if (v568 >= 0xFFFFFFFF) {
                    LODWORD(v568) = -1;
                  }
                  int v210 = v568 + 1;
                  goto LABEL_1483;
                }
                size_t v208 = v76;
                uint64_t v830 = (v1999 + ((v2036 + v567) & v1998)) & v2000;
                if (v1982 > 0x7FFFFFFD)
                {
                  int v210 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v2001 + 48))(v830, v1982, v2003);
                  goto LABEL_1483;
                }
                unint64_t v625 = *(void *)(((v1964 + ((v1996 + v830) & v2000)) & 0xFFFFFFFFFFFFFFF8) + 8);
              }
              if (v625 >= 0xFFFFFFFF) {
                LODWORD(v625) = -1;
              }
              if ((v625 + 1) >= 2) {
                goto LABEL_1484;
              }
              goto LABEL_1487;
            case 6u:
              uint64_t v2010 = v2008 + 327;
              if (v1965 == v1970)
              {
                size_t v214 = v76;
                int v215 = (*(uint64_t (**)(unsigned __int8 *))(v2060 + 48))(v77);
                uint64_t v216 = v1982;
LABEL_1563:
                if (v215)
                {
LABEL_1564:
                  memcpy(a1, v77, v66);
                  uint64_t v1008 = v1967;
                  unsigned int v1009 = v1965;
                  unsigned int v1010 = v1970;
LABEL_1565:
                  size_t v1011 = v214;
                  goto LABEL_1571;
                }
                unint64_t v462 = (unint64_t)&v77[v1989] & v2005;
                unint64_t v463 = (v462 + v2028 + v59) & v2006;
LABEL_1567:
                uint64_t v1012 = v77;
                uint64_t v1013 = v72;
                int v1014 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v2060 + 32);
                v1014(a1, v1012, v1013);
                unint64_t v1015 = (unint64_t)&a1[v1989] & v2005;
                v1014((unsigned __int8 *)v1015, (unsigned __int8 *)v462, v1013);
                unint64_t v1016 = (v1015 + v2028 + v59) & v2006;
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v1986 + 32))(v1016, v463, v1985);
                char v1017 = (void *)((v1988 + v1016) & 0xFFFFFFFFFFFFFFF8);
                uint64_t v1018 = (void *)((v1988 + v463) & 0xFFFFFFFFFFFFFFF8);
                *char v1017 = *v1018;
                unint64_t v1019 = ((unint64_t)v1017 + v1977) & v1975;
                unint64_t v1020 = ((unint64_t)v1018 + v1977) & v1975;
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v1981 + 32))(v1019, v1020, v1980);
                unint64_t v1021 = (void *)((v1973 + v1019) & 0xFFFFFFFFFFFFFFF8);
                size_t v1022 = (void *)((v1973 + v1020) & 0xFFFFFFFFFFFFFFF8);
                *unint64_t v1021 = *v1022;
                *(_OWORD *)(((unint64_t)v1021 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1022
                                                                                                + 15) & 0xFFFFFFFFFFFFFFF8);
                *(_OWORD *)(v1995 + v1016) = *(_OWORD *)(v1995 + v463);
                unint64_t v1023 = (v2036 + v1995 + v1016) & v1998;
                unint64_t v1024 = (v2036 + v1995 + v463) & v1998;
                *(unsigned char *)unint64_t v1023 = *(unsigned char *)v1024;
                uint64_t v1025 = v1023 | 4;
                int v1026 = *(_DWORD *)(v1024 | 4);
                *(unsigned char *)(v1025 + 4) = *(unsigned char *)((v1024 | 4) + 4);
                *(_DWORD *)uint64_t v1025 = v1026;
                *(_WORD *)(v1023 + 10) = *(_WORD *)(v1024 + 0xA);
                unint64_t v2052 = v1023;
                unint64_t v1027 = (v1999 + v1023) & v2000;
                uint64_t v1028 = *(void (**)(unint64_t, unint64_t, uint64_t))(v2001 + 32);
                v1028(v1027, (v1999 + v1024) & v2000, v2003);
                unint64_t v1029 = (v1996 + v1027) & v2000;
                unint64_t v1030 = (v1996 + ((v1999 + v1024) & v2000)) & v2000;
                v1028(v1029, v1030, v2003);
                uint64_t v1031 = (unsigned char *)(v1029 + v1992);
                *uint64_t v1031 = *(unsigned char *)(v1030 + v1992);
                v1031[1] = *(unsigned char *)(v1030 + v1992 + 1);
                v1031[2] = *(unsigned char *)(v1030 + v1992 + 2);
                v1031[3] = *(unsigned char *)(v1030 + v1992 + 3);
                v1031[4] = *(unsigned char *)(v1030 + v1992 + 4);
                unint64_t v1032 = (v1029 + v1992 + 12) & 0xFFFFFFFFFFFFFFF8;
                unint64_t v1033 = (v1030 + v1992 + 12) & 0xFFFFFFFFFFFFFFF8;
                *(_OWORD *)unint64_t v1032 = *(_OWORD *)v1033;
                *(unsigned char *)(v1032 + 16) = *(unsigned char *)(v1033 + 16);
                *(unsigned char *)(v1032 + 17) = *(unsigned char *)(v1033 + 17);
                *(unsigned char *)(v1032 + 18) = *(unsigned char *)(v1033 + 18);
                *(unsigned char *)(v1032 + 19) = *(unsigned char *)(v1033 + 19);
                unint64_t v1034 = (v1032 + 27) & 0xFFFFFFFFFFFFFFF8;
                unint64_t v1035 = (v1033 + 27) & 0xFFFFFFFFFFFFFFF8;
                *(void *)unint64_t v1034 = *(void *)v1035;
                *(unsigned char *)(v1034 + 8) = *(unsigned char *)(v1035 + 8);
                *(unsigned char *)(v1034 + 9) = *(unsigned char *)(v1035 + 9);
                *(unsigned char *)(v1034 + 10) = *(unsigned char *)(v1035 + 10);
                *(unsigned char *)(v1034 + 11) = *(unsigned char *)(v1035 + 11);
                *(unsigned char *)(v1034 + 12) = *(unsigned char *)(v1035 + 12);
                uint64_t v1036 = (void *)((v1033 + 47) & 0xFFFFFFFFFFFFFFF8);
                uint64_t v1037 = (void *)((v1032 + 47) & 0xFFFFFFFFFFFFFFF8);
                *uint64_t v1037 = *v1036;
                unint64_t v1038 = ((unint64_t)v1037 + 15) & 0xFFFFFFFFFFFFFFF8;
                unint64_t v1039 = ((unint64_t)v1036 + 15) & 0xFFFFFFFFFFFFFFF8;
                *(void *)unint64_t v1038 = *(void *)v1039;
                *(unsigned char *)(v1038 + 8) = *(unsigned char *)(v1039 + 8);
                *(unsigned char *)(v1038 + 9) = *(unsigned char *)(v1039 + 9);
                size_t v1040 = (void *)((v1993 + v1038) & v2000);
                uint64_t v1041 = (const void *)((v1993 + v1039) & v2000);
                if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v2001 + 48))(v1041, 1, v2003))
                {
                  size_t v214 = v2039;
                  memcpy(v1040, v1041, v2039);
                }
                else
                {
                  v1028((unint64_t)v1040, (unint64_t)v1041, v2003);
                  (*(void (**)(void *, void, uint64_t, uint64_t))(v2001 + 56))(v1040, 0, 1, v2003);
                  size_t v214 = v2039;
                }
                uint64_t v216 = v1982;
                uint64_t v1042 = (void *)(((unint64_t)v1041 + v1994) & 0xFFFFFFFFFFFFFFF8);
                unint64_t v1043 = (void *)(((unint64_t)v1040 + v1994) & 0xFFFFFFFFFFFFFFF8);
                *unint64_t v1043 = *v1042;
                unint64_t v1044 = ((unint64_t)v1043 + 15) & 0xFFFFFFFFFFFFFFF8;
                unint64_t v1045 = ((unint64_t)v1042 + 15) & 0xFFFFFFFFFFFFFFF8;
                uint64_t v1046 = *(void *)v1045;
                *(unsigned char *)(v1044 + 8) = *(unsigned char *)(v1045 + 8);
                *(void *)unint64_t v1044 = v1046;
                uint64_t v1047 = (void *)(((unint64_t)v1043 + 31) & 0xFFFFFFFFFFFFFFF8);
                int v1048 = (void *)(((unint64_t)v1042 + 31) & 0xFFFFFFFFFFFFFFF8);
                void *v1047 = *v1048;
                int v1049 = (_OWORD *)(((unint64_t)v1047 + 15) & 0xFFFFFFFFFFFFFFF8);
                uint64_t v1050 = (_OWORD *)(((unint64_t)v1048 + 15) & 0xFFFFFFFFFFFFFFF8);
                *int v1049 = *v1050;
                unint64_t v1051 = ((unint64_t)v1049 + 19) & 0xFFFFFFFFFFFFFFF8;
                unint64_t v1052 = ((unint64_t)v1050 + 19) & 0xFFFFFFFFFFFFFFF8;
                uint64_t v1053 = *(void *)v1052;
                *(unsigned char *)(v1051 + 8) = *(unsigned char *)(v1052 + 8);
                *(void *)unint64_t v1051 = v1053;
                *(unsigned char *)(v1051 + 9) = *(unsigned char *)(v1052 + 9);
                unint64_t v1054 = (v1051 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                unint64_t v1055 = (v1052 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                LODWORD(v1046) = *(_DWORD *)v1055;
                *(unsigned char *)(v1054 + 4) = *(unsigned char *)(v1055 + 4);
                *(_DWORD *)unint64_t v1054 = v1046;
                *(_OWORD *)((v1051 + 25) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v1052 + 25) & 0xFFFFFFFFFFFFFFF8);
                unint64_t v1056 = v2052 + v2035;
                long long v1057 = *(_OWORD *)(v1024 + v2035 + 112);
                long long v1059 = *(_OWORD *)(v1024 + v2035 + 64);
                long long v1058 = *(_OWORD *)(v1024 + v2035 + 80);
                *(_OWORD *)(v1056 + 96) = *(_OWORD *)(v1024 + v2035 + 96);
                *(_OWORD *)(v1056 + 112) = v1057;
                *(_OWORD *)(v1056 + 64) = v1059;
                *(_OWORD *)(v1056 + 80) = v1058;
                long long v1060 = *(_OWORD *)(v1024 + v2035 + 176);
                long long v1062 = *(_OWORD *)(v1024 + v2035 + 128);
                long long v1061 = *(_OWORD *)(v1024 + v2035 + 144);
                *(_OWORD *)(v1056 + 160) = *(_OWORD *)(v1024 + v2035 + 160);
                *(_OWORD *)(v1056 + 176) = v1060;
                *(_OWORD *)(v1056 + 128) = v1062;
                *(_OWORD *)(v1056 + 144) = v1061;
                long long v1064 = *(_OWORD *)(v1024 + v2035 + 208);
                long long v1063 = *(_OWORD *)(v1024 + v2035 + 224);
                long long v1065 = *(_OWORD *)(v1024 + v2035 + 192);
                *(void *)(v1056 + 240) = *(void *)(v1024 + v2035 + 240);
                *(_OWORD *)(v1056 + 208) = v1064;
                *(_OWORD *)(v1056 + 224) = v1063;
                *(_OWORD *)(v1056 + 192) = v1065;
                long long v1066 = *(_OWORD *)(v1024 + v2035);
                long long v1067 = *(_OWORD *)(v1024 + v2035 + 16);
                long long v1068 = *(_OWORD *)(v1024 + v2035 + 48);
                *(_OWORD *)(v1056 + 32) = *(_OWORD *)(v1024 + v2035 + 32);
                *(_OWORD *)(v1056 + 48) = v1068;
                *(_OWORD *)unint64_t v1056 = v1066;
                *(_OWORD *)(v1056 + 16) = v1067;
                unint64_t v1069 = (_OWORD *)((v2052 + v2035 + 255) & 0xFFFFFFFFFFFFFFF8);
                unint64_t v1070 = (long long *)((v1024 + v2035 + 255) & 0xFFFFFFFFFFFFFFF8);
                long long v1071 = *v1070;
                *(_OWORD *)((char *)v1069 + 9) = *(long long *)((char *)v1070 + 9);
                *unint64_t v1069 = v1071;
                unint64_t v1072 = (v2052 + v2035 + 287) & 0xFFFFFFFFFFFFFFF8;
                unint64_t v1073 = (v1024 + v2035 + 287) & 0xFFFFFFFFFFFFFFF8;
                long long v1074 = *(_OWORD *)v1073;
                *(unsigned char *)(v1072 + 16) = *(unsigned char *)(v1073 + 16);
                *(_OWORD *)unint64_t v1072 = v1074;
                v1075 = (void *)((v2052 + v2035 + 311) & 0xFFFFFFFFFFFFFFF8);
                int v1076 = (void *)((v1024 + v2035 + 311) & 0xFFFFFFFFFFFFFFF8);
                void *v1075 = *v1076;
                *(_OWORD *)(((unint64_t)v1075 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1076
                                                                                                + 15) & 0xFFFFFFFFFFFFFFF8);
                size_t v1011 = v1992;
                uint64_t v72 = v2033;
                uint64_t v77 = a2;
                uint64_t v1008 = v1967;
                unsigned int v1009 = v1965;
                unsigned int v1010 = v1970;
                if (!v1982) {
                  goto LABEL_1565;
                }
LABEL_1571:
                unint64_t v1077 = v2007 + 7;
                uint64_t v1078 = v1949 + 327;
                unint64_t v1079 = ((((v1949
                          + 327
                          + ((((((((((v2007 + 7 + v1011) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                              + 19) & 0xFFFFFFFFFFFFFFF8)
                            + 25) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFF8)
                        + 15) & 0xFFFFFFFFFFFFFFF8)
                      + 16;
                size_t v1080 = (void *)((unint64_t)&a1[v1940 + v1079] & v1960);
                unint64_t v2053 = (const void *)((unint64_t)&v77[v1940 + v1079] & v1960);
                if (v1009 == v1010)
                {
                  int v1081 = (*(uint64_t (**)(void))(v2060 + 48))();
                  uint64_t v1082 = v2003;
                }
                else
                {
                  unint64_t v1083 = (v1989 + ((unint64_t)&v77[v1940 + v1079] & v1960)) & v2005;
                  unint64_t v1084 = (v1961 + v1083) & v2006;
                  if (v1969 == v1010)
                  {
                    uint64_t v1082 = v2003;
                    if (v1008 == v1969)
                    {
                      int v1081 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v1986 + 48))((v1961 + v1083) & v2006, v1008, v1985);
                    }
                    else
                    {
                      size_t v1087 = (unint64_t *)((v1988 + v1084) & 0xFFFFFFFFFFFFFFF8);
                      if (v1952 <= 0x7FFFFFFE)
                      {
                        unint64_t v1088 = *v1087;
                        if (v1088 >= 0xFFFFFFFF) {
                          LODWORD(v1088) = -1;
                        }
                        if ((v1088 + 1) >= 2) {
                          goto LABEL_1590;
                        }
                        goto LABEL_1593;
                      }
                      int v1081 = (*(uint64_t (**)(unint64_t, void, uint64_t))(v1981 + 48))(((unint64_t)v1087 + v1977) & v1975, v1939, v1980);
                    }
                  }
                  else
                  {
                    unint64_t v1085 = v1084 + v1995;
                    if ((v1947 & 0x80000000) != 0)
                    {
                      uint64_t v1089 = (v1999 + ((v2036 + v1085) & v1998)) & v2000;
                      if (v216 <= 0x7FFFFFFD)
                      {
                        unint64_t v1281 = *(void *)(((v1964 + ((v1996 + v1089) & v2000)) & 0xFFFFFFFFFFFFFFF8) + 8);
                        if (v1281 >= 0xFFFFFFFF) {
                          LODWORD(v1281) = -1;
                        }
                        uint64_t v1082 = v2003;
                        if ((v1281 + 1) >= 2) {
                          goto LABEL_1590;
                        }
                        goto LABEL_1593;
                      }
                      uint64_t v1082 = v2003;
                      int v1081 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2001 + 48))(v1089, v216, v2003);
                    }
                    else
                    {
                      unint64_t v1086 = *(void *)(v1085 + 8);
                      if (v1086 >= 0xFFFFFFFF) {
                        LODWORD(v1086) = -1;
                      }
                      int v1081 = v1086 + 1;
                      uint64_t v1082 = v2003;
                    }
                  }
                }
                if (v1081)
                {
LABEL_1590:
                  size_t v1090 = v2053;
                  memcpy(v1080, v2053, v66);
                  size_t v1091 = v2039;
                  uint64_t v1092 = v2010;
                  goto LABEL_1591;
                }
                unint64_t v1083 = ((unint64_t)v2053 + v1989) & v2005;
                unint64_t v1084 = (v1961 + v1083) & v2006;
LABEL_1593:
                size_t v2048 = v66;
                size_t v1094 = *(void (**)(void *, const void *, uint64_t))(v2060 + 32);
                v1094(v1080, v2053, v72);
                v1094((void *)(((unint64_t)v1080 + v1989) & v2005), (const void *)v1083, v72);
                unint64_t v1095 = (v1961 + (((unint64_t)v1080 + v1989) & v2005)) & v2006;
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v1986 + 32))(v1095, v1084, v1985);
                unint64_t v1096 = (void *)((v1988 + v1095) & 0xFFFFFFFFFFFFFFF8);
                unint64_t v1097 = (void *)((v1988 + v1084) & 0xFFFFFFFFFFFFFFF8);
                void *v1096 = *v1097;
                unint64_t v1098 = ((unint64_t)v1096 + v1977) & v1975;
                unint64_t v1099 = ((unint64_t)v1097 + v1977) & v1975;
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v1981 + 32))(v1098, v1099, v1980);
                long long v1100 = (void *)((v1973 + v1098) & 0xFFFFFFFFFFFFFFF8);
                long long v1101 = (void *)((v1973 + v1099) & 0xFFFFFFFFFFFFFFF8);
                void *v1100 = *v1101;
                *(_OWORD *)(((unint64_t)v1100 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1101
                                                                                                + 15) & 0xFFFFFFFFFFFFFFF8);
                *(_OWORD *)(v1095 + v1995) = *(_OWORD *)(v1084 + v1995);
                unint64_t v1102 = (v2036 + v1095 + v1995) & v1998;
                unint64_t v1103 = (v2036 + v1084 + v1995) & v1998;
                *(unsigned char *)unint64_t v1102 = *(unsigned char *)v1103;
                uint64_t v1104 = v1102 | 4;
                int v1105 = *(_DWORD *)(v1103 | 4);
                *(unsigned char *)(v1104 + 4) = *(unsigned char *)((v1103 | 4) + 4);
                *(_DWORD *)uint64_t v1104 = v1105;
                *(_WORD *)(v1102 + 10) = *(_WORD *)(v1103 + 0xA);
                unint64_t v1106 = *(void (**)(unint64_t, unint64_t, uint64_t))(v2001 + 32);
                v1106((v1999 + v1102) & v2000, (v1999 + v1103) & v2000, v1082);
                unint64_t v1107 = (v1996 + ((v1999 + v1102) & v2000)) & v2000;
                unint64_t v1108 = (v1996 + ((v1999 + v1103) & v2000)) & v2000;
                v1106(v1107, v1108, v1082);
                long long v1109 = (unsigned char *)(v1107 + v1992);
                *long long v1109 = *(unsigned char *)(v1108 + v1992);
                v1109[1] = *(unsigned char *)(v1108 + v1992 + 1);
                v1109[2] = *(unsigned char *)(v1108 + v1992 + 2);
                v1109[3] = *(unsigned char *)(v1108 + v1992 + 3);
                v1109[4] = *(unsigned char *)(v1108 + v1992 + 4);
                unint64_t v1110 = (v1107 + v1992 + 12) & 0xFFFFFFFFFFFFFFF8;
                unint64_t v1111 = (v1108 + v1992 + 12) & 0xFFFFFFFFFFFFFFF8;
                *(_OWORD *)unint64_t v1110 = *(_OWORD *)v1111;
                *(unsigned char *)(v1110 + 16) = *(unsigned char *)(v1111 + 16);
                *(unsigned char *)(v1110 + 17) = *(unsigned char *)(v1111 + 17);
                *(unsigned char *)(v1110 + 18) = *(unsigned char *)(v1111 + 18);
                *(unsigned char *)(v1110 + 19) = *(unsigned char *)(v1111 + 19);
                unint64_t v1112 = (v1110 + 27) & 0xFFFFFFFFFFFFFFF8;
                unint64_t v1113 = (v1111 + 27) & 0xFFFFFFFFFFFFFFF8;
                *(void *)unint64_t v1112 = *(void *)v1113;
                *(unsigned char *)(v1112 + 8) = *(unsigned char *)(v1113 + 8);
                *(unsigned char *)(v1112 + 9) = *(unsigned char *)(v1113 + 9);
                *(unsigned char *)(v1112 + 10) = *(unsigned char *)(v1113 + 10);
                *(unsigned char *)(v1112 + 11) = *(unsigned char *)(v1113 + 11);
                *(unsigned char *)(v1112 + 12) = *(unsigned char *)(v1113 + 12);
                unint64_t v1114 = (void *)((v1111 + 47) & 0xFFFFFFFFFFFFFFF8);
                size_t v1115 = (void *)((v1110 + 47) & 0xFFFFFFFFFFFFFFF8);
                *size_t v1115 = *v1114;
                unint64_t v1116 = ((unint64_t)v1115 + 15) & 0xFFFFFFFFFFFFFFF8;
                unint64_t v1117 = ((unint64_t)v1114 + 15) & 0xFFFFFFFFFFFFFFF8;
                *(void *)unint64_t v1116 = *(void *)v1117;
                *(unsigned char *)(v1116 + 8) = *(unsigned char *)(v1117 + 8);
                *(unsigned char *)(v1116 + 9) = *(unsigned char *)(v1117 + 9);
                size_t v1118 = (void *)((v1993 + v1116) & v2000);
                long long v1119 = (const void *)((v1993 + v1117) & v2000);
                if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v2001 + 48))(v1119, 1, v1082))
                {
                  memcpy(v1118, v1119, v2039);
                }
                else
                {
                  v1106((unint64_t)v1118, (unint64_t)v1119, v1082);
                  (*(void (**)(void *, void, uint64_t, uint64_t))(v2001 + 56))(v1118, 0, 1, v1082);
                }
                unint64_t v1077 = v2007 + 7;
                uint64_t v1078 = v1949 + 327;
                unint64_t v1120 = (void *)(((unint64_t)v1118 + v1994) & 0xFFFFFFFFFFFFFFF8);
                unint64_t v1121 = (void *)(((unint64_t)v1119 + v1994) & 0xFFFFFFFFFFFFFFF8);
                void *v1120 = *v1121;
                unint64_t v1122 = ((unint64_t)v1120 + 15) & 0xFFFFFFFFFFFFFFF8;
                unint64_t v1123 = ((unint64_t)v1121 + 15) & 0xFFFFFFFFFFFFFFF8;
                uint64_t v1124 = *(void *)v1123;
                *(unsigned char *)(v1122 + 8) = *(unsigned char *)(v1123 + 8);
                *(void *)unint64_t v1122 = v1124;
                uint64_t v1125 = (void *)(((unint64_t)v1120 + 31) & 0xFFFFFFFFFFFFFFF8);
                uint64_t v1126 = (void *)(((unint64_t)v1121 + 31) & 0xFFFFFFFFFFFFFFF8);
                *uint64_t v1125 = *v1126;
                uint64_t v1127 = (_OWORD *)(((unint64_t)v1125 + 15) & 0xFFFFFFFFFFFFFFF8);
                uint64_t v1128 = (_OWORD *)(((unint64_t)v1126 + 15) & 0xFFFFFFFFFFFFFFF8);
                *uint64_t v1127 = *v1128;
                unint64_t v1129 = ((unint64_t)v1127 + 19) & 0xFFFFFFFFFFFFFFF8;
                unint64_t v1130 = ((unint64_t)v1128 + 19) & 0xFFFFFFFFFFFFFFF8;
                uint64_t v1131 = *(void *)v1130;
                *(unsigned char *)(v1129 + 8) = *(unsigned char *)(v1130 + 8);
                *(void *)unint64_t v1129 = v1131;
                *(unsigned char *)(v1129 + 9) = *(unsigned char *)(v1130 + 9);
                unint64_t v1132 = (v1129 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                unint64_t v1133 = (v1130 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                LODWORD(v1124) = *(_DWORD *)v1133;
                *(unsigned char *)(v1132 + 4) = *(unsigned char *)(v1133 + 4);
                *(_DWORD *)unint64_t v1132 = v1124;
                *(_OWORD *)((v1129 + 25) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v1130 + 25) & 0xFFFFFFFFFFFFFFF8);
                unint64_t v1134 = v1102 + v2035;
                long long v1135 = *(_OWORD *)(v1103 + v2035 + 112);
                long long v1137 = *(_OWORD *)(v1103 + v2035 + 64);
                long long v1136 = *(_OWORD *)(v1103 + v2035 + 80);
                *(_OWORD *)(v1134 + 96) = *(_OWORD *)(v1103 + v2035 + 96);
                *(_OWORD *)(v1134 + 112) = v1135;
                *(_OWORD *)(v1134 + 64) = v1137;
                *(_OWORD *)(v1134 + 80) = v1136;
                long long v1138 = *(_OWORD *)(v1103 + v2035 + 176);
                long long v1140 = *(_OWORD *)(v1103 + v2035 + 128);
                long long v1139 = *(_OWORD *)(v1103 + v2035 + 144);
                *(_OWORD *)(v1134 + 160) = *(_OWORD *)(v1103 + v2035 + 160);
                *(_OWORD *)(v1134 + 176) = v1138;
                *(_OWORD *)(v1134 + 128) = v1140;
                *(_OWORD *)(v1134 + 144) = v1139;
                long long v1142 = *(_OWORD *)(v1103 + v2035 + 208);
                long long v1141 = *(_OWORD *)(v1103 + v2035 + 224);
                long long v1143 = *(_OWORD *)(v1103 + v2035 + 192);
                *(void *)(v1134 + 240) = *(void *)(v1103 + v2035 + 240);
                *(_OWORD *)(v1134 + 208) = v1142;
                *(_OWORD *)(v1134 + 224) = v1141;
                *(_OWORD *)(v1134 + 192) = v1143;
                long long v1144 = *(_OWORD *)(v1103 + v2035);
                long long v1145 = *(_OWORD *)(v1103 + v2035 + 16);
                long long v1146 = *(_OWORD *)(v1103 + v2035 + 48);
                *(_OWORD *)(v1134 + 32) = *(_OWORD *)(v1103 + v2035 + 32);
                *(_OWORD *)(v1134 + 48) = v1146;
                *(_OWORD *)unint64_t v1134 = v1144;
                *(_OWORD *)(v1134 + 16) = v1145;
                unint64_t v1147 = (_OWORD *)((v1102 + v2035 + 255) & 0xFFFFFFFFFFFFFFF8);
                size_t v1148 = (long long *)((v1103 + v2035 + 255) & 0xFFFFFFFFFFFFFFF8);
                long long v1149 = *v1148;
                *(_OWORD *)((char *)v1147 + 9) = *(long long *)((char *)v1148 + 9);
                _OWORD *v1147 = v1149;
                unint64_t v1150 = (v1102 + v2035 + 287) & 0xFFFFFFFFFFFFFFF8;
                unint64_t v1151 = (v1103 + v2035 + 287) & 0xFFFFFFFFFFFFFFF8;
                long long v1152 = *(_OWORD *)v1151;
                *(unsigned char *)(v1150 + 16) = *(unsigned char *)(v1151 + 16);
                *(_OWORD *)unint64_t v1150 = v1152;
                unint64_t v1153 = (void *)((v1102 + v2035 + 311) & 0xFFFFFFFFFFFFFFF8);
                unint64_t v1154 = (void *)((v1103 + v2035 + 311) & 0xFFFFFFFFFFFFFFF8);
                *unint64_t v1153 = *v1154;
                *(_OWORD *)(((unint64_t)v1153 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1154
                                                                                                + 15) & 0xFFFFFFFFFFFFFFF8);
                size_t v1091 = v2039;
                size_t v1093 = v1992;
                size_t v66 = v2048;
                uint64_t v1092 = v2010;
                size_t v1090 = v2053;
                if (v1982)
                {
LABEL_1597:
                  unint64_t v1155 = ((((v1078
                            + ((((((((((v1077 + v1093) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                                + 19) & 0xFFFFFFFFFFFFFFF8)
                              + 25) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFF8)
                          + 15) & 0xFFFFFFFFFFFFFFF8)
                        + 16;
                  *(void *)(((unint64_t)v1080 + v1155) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v1090 + v1155) & 0xFFFFFFFFFFFFFFF8);
                  unint64_t v1000 = ((v2025
                          + ((v171
                            + ((((v1092
                                + ((((((((((v1077 + v1091) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                                    + 19) & 0xFFFFFFFFFFFFFFF8)
                                  + 25) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFF8)
                              + 15) & 0xFFFFFFFFFFFFFFF8)) & v2032)) & 0xFFFFFFFFFFFFFFF8)
                        + 8;
                  if (v1000 <= v2044) {
                    unint64_t v1000 = v2044;
                  }
                  if (v2017 > v1000) {
                    unint64_t v1000 = v2017;
                  }
                  if (v2049 > v1000) {
                    unint64_t v1000 = v2049;
                  }
                  if (v66 > v1000) {
                    unint64_t v1000 = v66;
                  }
                  if (v2057 > v1000) {
                    unint64_t v1000 = v2057;
                  }
                  if (v2016 > v1000) {
                    unint64_t v1000 = v2046 + 2;
                  }
                  if (v2019 > v1000) {
                    unint64_t v1000 = ((v2056 + 9) & 0xFFFFFFFFFFFFFFF8) + 8;
                  }
                  if (v2027 > v1000) {
                    unint64_t v1000 = v2056 + 2;
                  }
                  if (v2020 > v1000) {
                    unint64_t v1000 = (v2056 & 0xFFFFFFFFFFFFFFF8) + 16;
                  }
                  if (v1000 <= v2057) {
                    unint64_t v1000 = v2057;
                  }
                  if (v1000 <= v2045) {
                    unint64_t v1000 = v2045;
                  }
                  if (v1000 <= v2022) {
                    unint64_t v1000 = v2022;
                  }
                  if (v1000 <= v2057) {
                    unint64_t v1000 = v2057;
                  }
                  if (v1000 <= v2018) {
                    unint64_t v1000 = v2018;
                  }
                  if (v1000 <= v2027) {
                    unint64_t v1000 = v2056 + 2;
                  }
                  if (v1000 <= v2057) {
                    unint64_t v1000 = v2057;
                  }
                  if (v1000 <= v2046) {
                    unint64_t v1000 = v2046;
                  }
                  if (v1000 <= v2057) {
                    unint64_t v1000 = v2057;
                  }
                  if (v1000 <= v2024) {
                    unint64_t v1000 = v2024;
                  }
                  if (v1000 <= v2027) {
                    unint64_t v1000 = v2056 + 2;
                  }
                  if (v1000 <= v2057) {
                    unint64_t v1000 = v2057;
                  }
                  if (v1000 <= 0x38) {
                    unint64_t v1000 = 56;
                  }
                  if (v1000 <= 3)
                  {
                    unsigned int v1156 = ((1 << (8 * v1000)) + 5) >> (8 * v1000);
                    if (v1156 > 0xFFD6)
                    {
                      int v1004 = 6;
                      goto LABEL_1649;
                    }
                    if (v1156 > 0xD6)
                    {
                      __int16 v1003 = 6;
                      goto LABEL_1647;
                    }
                  }
                  char v1001 = 6;
                  goto LABEL_1643;
                }
LABEL_1591:
                size_t v1093 = v1091;
                goto LABEL_1597;
              }
              unint64_t v462 = (unint64_t)&v77[v1989] & v2005;
              unint64_t v463 = (v462 + v2028 + v59) & v2006;
              uint64_t v216 = v1982;
              if (v1969 == v1970)
              {
                size_t v214 = v76;
                if (v1967 == v1969)
                {
                  int v215 = (*(uint64_t (**)(unint64_t, void, uint64_t))(v1986 + 48))((v462 + v2028 + v59) & v2006, v1967, v1985);
                  goto LABEL_1563;
                }
                BOOL v626 = (unint64_t *)((v1988 + v463) & 0xFFFFFFFFFFFFFFF8);
                if (v1952 > 0x7FFFFFFE)
                {
                  int v215 = (*(uint64_t (**)(unint64_t, void, uint64_t))(v1981 + 48))(((unint64_t)v626 + v1977) & v1975, v1939, v1980);
                  goto LABEL_1563;
                }
                unint64_t v627 = *v626;
              }
              else
              {
                unint64_t v569 = v1995 + v463;
                if ((v1947 & 0x80000000) == 0)
                {
                  size_t v214 = v76;
                  unint64_t v570 = *(void *)(v569 + 8);
                  if (v570 >= 0xFFFFFFFF) {
                    LODWORD(v570) = -1;
                  }
                  int v215 = v570 + 1;
                  goto LABEL_1563;
                }
                size_t v214 = v76;
                uint64_t v831 = (v1999 + ((v2036 + v569) & v1998)) & v2000;
                if (v1982 > 0x7FFFFFFD)
                {
                  int v215 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v2001 + 48))(v831, v1982, v2003);
                  goto LABEL_1563;
                }
                unint64_t v627 = *(void *)(((v1964 + ((v1996 + v831) & v2000)) & 0xFFFFFFFFFFFFFFF8) + 8);
              }
              if (v627 >= 0xFFFFFFFF) {
                LODWORD(v627) = -1;
              }
              if ((v627 + 1) >= 2) {
                goto LABEL_1564;
              }
              goto LABEL_1567;
            case 7u:
              unsigned int v217 = v67;
              int v218 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v2040 + 32);
              v218(a1, v77, v73);
              unint64_t v219 = (unint64_t)&a1[v1990] & v1991;
              v218((unsigned __int8 *)v219, (unsigned __int8 *)((unint64_t)&v77[v1990] & v1991), v73);
              unint64_t v220 = (v219 + v2029 + v2050) & v2002;
              unint64_t v221 = (((unint64_t)&v77[v1990] & v1991) + v2029 + v2050) & v2002;
              (*(void (**)(unint64_t, unint64_t, uint64_t))(v1984 + 32))(v220, v221, v1983);
              uint64_t v222 = (void *)((v1987 + v220) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v223 = (void *)((v1987 + v221) & 0xFFFFFFFFFFFFFFF8);
              void *v222 = *v223;
              unint64_t v224 = ((unint64_t)v222 + v1976) & v1974;
              unint64_t v225 = ((unint64_t)v223 + v1976) & v1974;
              (*(void (**)(unint64_t, unint64_t, uint64_t))(v1979 + 32))(v224, v225, v1978);
              unint64_t v226 = (void *)((v1972 + v224) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v227 = (void *)((v1972 + v225) & 0xFFFFFFFFFFFFFFF8);
              void *v226 = *v227;
              *(_OWORD *)(((unint64_t)v226 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v227
                                                                                             + 15) & 0xFFFFFFFFFFFFFFF8);
              *(_OWORD *)(v2034 + v220) = *(_OWORD *)(v2034 + v221);
              size_t v228 = (v2036 + v2034 + v220) & v1998;
              size_t v229 = (v2036 + v2034 + v221) & v1998;
              *(unsigned char *)size_t v228 = *(unsigned char *)v229;
              uint64_t v230 = v228 | 4;
              int v231 = *(_DWORD *)(v229 | 4);
              *(unsigned char *)(v230 + 4) = *(unsigned char *)((v229 | 4) + 4);
              *(_DWORD *)uint64_t v230 = v231;
              *(_WORD *)(v228 + 10) = *(_WORD *)(v229 + 0xA);
              uint64_t v232 = *(void (**)(size_t, size_t, uint64_t))(v2001 + 32);
              v232((v1999 + v228) & v2000, (v1999 + v229) & v2000, v2003);
              size_t v233 = (v1996 + ((v1999 + v228) & v2000)) & v2000;
              size_t v234 = (v1996 + ((v1999 + v229) & v2000)) & v2000;
              v232(v233, v234, v2003);
              size_t v235 = (unsigned char *)(v233 + v1992);
              *size_t v235 = *(unsigned char *)(v234 + v1992);
              v235[1] = *(unsigned char *)(v234 + v1992 + 1);
              v235[2] = *(unsigned char *)(v234 + v1992 + 2);
              v235[3] = *(unsigned char *)(v234 + v1992 + 3);
              v235[4] = *(unsigned char *)(v234 + v1992 + 4);
              unint64_t v236 = (v233 + v1992 + 12) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v237 = (v234 + v1992 + 12) & 0xFFFFFFFFFFFFFFF8;
              *(_OWORD *)unint64_t v236 = *(_OWORD *)v237;
              *(unsigned char *)(v236 + 16) = *(unsigned char *)(v237 + 16);
              *(unsigned char *)(v236 + 17) = *(unsigned char *)(v237 + 17);
              *(unsigned char *)(v236 + 18) = *(unsigned char *)(v237 + 18);
              *(unsigned char *)(v236 + 19) = *(unsigned char *)(v237 + 19);
              unint64_t v238 = (v236 + 27) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v239 = (v237 + 27) & 0xFFFFFFFFFFFFFFF8;
              *(void *)unint64_t v238 = *(void *)v239;
              *(unsigned char *)(v238 + 8) = *(unsigned char *)(v239 + 8);
              *(unsigned char *)(v238 + 9) = *(unsigned char *)(v239 + 9);
              *(unsigned char *)(v238 + 10) = *(unsigned char *)(v239 + 10);
              *(unsigned char *)(v238 + 11) = *(unsigned char *)(v239 + 11);
              *(unsigned char *)(v238 + 12) = *(unsigned char *)(v239 + 12);
              unsigned int v240 = (void *)((v237 + 47) & 0xFFFFFFFFFFFFFFF8);
              unsigned int v241 = (void *)((v236 + 47) & 0xFFFFFFFFFFFFFFF8);
              *unsigned int v241 = *v240;
              unint64_t v242 = ((unint64_t)v241 + 15) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v243 = ((unint64_t)v240 + 15) & 0xFFFFFFFFFFFFFFF8;
              *(void *)unint64_t v242 = *(void *)v243;
              *(unsigned char *)(v242 + 8) = *(unsigned char *)(v243 + 8);
              *(unsigned char *)(v242 + 9) = *(unsigned char *)(v243 + 9);
              uint64_t v244 = (void *)((v1993 + v242) & v2000);
              size_t v245 = (const void *)((v1993 + v243) & v2000);
              if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v2001 + 48))(v245, 1, v2003))
              {
                memcpy(v244, v245, v2039);
              }
              else
              {
                v232((size_t)v244, (size_t)v245, v2003);
                (*(void (**)(void *, void, uint64_t, uint64_t))(v2001 + 56))(v244, 0, 1, v2003);
              }
              long long v480 = (void *)(((unint64_t)v245 + v1994) & 0xFFFFFFFFFFFFFFF8);
              long long v481 = (void *)(((unint64_t)v244 + v1994) & 0xFFFFFFFFFFFFFFF8);
              void *v481 = *v480;
              unint64_t v482 = ((unint64_t)v481 + 15) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v483 = ((unint64_t)v480 + 15) & 0xFFFFFFFFFFFFFFF8;
              uint64_t v484 = *(void *)v483;
              *(unsigned char *)(v482 + 8) = *(unsigned char *)(v483 + 8);
              *(void *)unint64_t v482 = v484;
              long long v485 = (void *)(((unint64_t)v481 + 31) & 0xFFFFFFFFFFFFFFF8);
              long long v486 = (void *)(((unint64_t)v480 + 31) & 0xFFFFFFFFFFFFFFF8);
              *long long v485 = *v486;
              long long v487 = (_OWORD *)(((unint64_t)v485 + 15) & 0xFFFFFFFFFFFFFFF8);
              long long v488 = (_OWORD *)(((unint64_t)v486 + 15) & 0xFFFFFFFFFFFFFFF8);
              _OWORD *v487 = *v488;
              unint64_t v489 = ((unint64_t)v487 + 19) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v490 = ((unint64_t)v488 + 19) & 0xFFFFFFFFFFFFFFF8;
              uint64_t v491 = *(void *)v490;
              *(unsigned char *)(v489 + 8) = *(unsigned char *)(v490 + 8);
              *(void *)unint64_t v489 = v491;
              *(unsigned char *)(v489 + 9) = *(unsigned char *)(v490 + 9);
              unint64_t v492 = (v489 + 13) & 0xFFFFFFFFFFFFFFFCLL;
              unint64_t v493 = (v490 + 13) & 0xFFFFFFFFFFFFFFFCLL;
              LODWORD(v484) = *(_DWORD *)v493;
              *(unsigned char *)(v492 + 4) = *(unsigned char *)(v493 + 4);
              *(_DWORD *)unint64_t v492 = v484;
              *(_OWORD *)((v489 + 25) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v490 + 25) & 0xFFFFFFFFFFFFFFF8);
              unint64_t v494 = v2035 + v228;
              long long v495 = *(_OWORD *)(v2035 + v229 + 112);
              long long v497 = *(_OWORD *)(v2035 + v229 + 64);
              long long v496 = *(_OWORD *)(v2035 + v229 + 80);
              *(_OWORD *)(v494 + 96) = *(_OWORD *)(v2035 + v229 + 96);
              *(_OWORD *)(v494 + 112) = v495;
              *(_OWORD *)(v494 + 64) = v497;
              *(_OWORD *)(v494 + 80) = v496;
              long long v498 = *(_OWORD *)(v2035 + v229 + 176);
              long long v500 = *(_OWORD *)(v2035 + v229 + 128);
              long long v499 = *(_OWORD *)(v2035 + v229 + 144);
              *(_OWORD *)(v494 + 160) = *(_OWORD *)(v2035 + v229 + 160);
              *(_OWORD *)(v494 + 176) = v498;
              *(_OWORD *)(v494 + 128) = v500;
              *(_OWORD *)(v494 + 144) = v499;
              long long v502 = *(_OWORD *)(v2035 + v229 + 208);
              long long v501 = *(_OWORD *)(v2035 + v229 + 224);
              long long v503 = *(_OWORD *)(v2035 + v229 + 192);
              *(void *)(v494 + 240) = *(void *)(v2035 + v229 + 240);
              *(_OWORD *)(v494 + 208) = v502;
              *(_OWORD *)(v494 + 224) = v501;
              *(_OWORD *)(v494 + 192) = v503;
              long long v504 = *(_OWORD *)(v2035 + v229);
              long long v505 = *(_OWORD *)(v2035 + v229 + 16);
              long long v506 = *(_OWORD *)(v2035 + v229 + 48);
              *(_OWORD *)(v494 + 32) = *(_OWORD *)(v2035 + v229 + 32);
              *(_OWORD *)(v494 + 48) = v506;
              *(_OWORD *)unint64_t v494 = v504;
              *(_OWORD *)(v494 + 16) = v505;
              unint64_t v507 = (_OWORD *)((v2035 + v228 + 255) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v508 = (long long *)((v2035 + v229 + 255) & 0xFFFFFFFFFFFFFFF8);
              long long v509 = *v508;
              *(_OWORD *)((char *)v507 + 9) = *(long long *)((char *)v508 + 9);
              _OWORD *v507 = v509;
              unint64_t v510 = (v2035 + v228 + 287) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v511 = (v2035 + v229 + 287) & 0xFFFFFFFFFFFFFFF8;
              long long v512 = *(_OWORD *)v511;
              *(unsigned char *)(v510 + 16) = *(unsigned char *)(v511 + 16);
              *(_OWORD *)unint64_t v510 = v512;
              unint64_t v513 = (void *)((v2035 + v228 + 311) & 0xFFFFFFFFFFFFFFF8);
              unint64_t v514 = (void *)((v2035 + v229 + 311) & 0xFFFFFFFFFFFFFFF8);
              *unint64_t v513 = *v514;
              *(_OWORD *)(((unint64_t)v513 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v514
                                                                                             + 15) & 0xFFFFFFFFFFFFFFF8);
              if (v217 > 3) {
                goto LABEL_671;
              }
              unsigned int v515 = ((1 << (8 * v217)) + 5) >> (8 * v217);
              if (v515 > 0xFFD6)
              {
                *(_DWORD *)unint64_t v68 = 7;
              }
              else if (v515 <= 0xD6)
              {
LABEL_671:
                *unint64_t v68 = 7;
              }
              else
              {
                *(_WORD *)unint64_t v68 = 7;
              }
              return a1;
            case 8u:
              unsigned int v246 = v67;
              uint64_t v247 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v2060 + 32);
              v247(a1, v77, v72);
              unint64_t v248 = (unint64_t)&a1[v1989] & v2005;
              v247((unsigned __int8 *)v248, (unsigned __int8 *)((unint64_t)&v77[v1989] & v2005), v72);
              unint64_t v249 = (v248 + v2028 + v59) & v2006;
              unint64_t v250 = (((unint64_t)&v77[v1989] & v2005) + v2028 + v59) & v2006;
              (*(void (**)(unint64_t, unint64_t, uint64_t))(v1986 + 32))(v249, v250, v1985);
              unsigned int v251 = (void *)((v1988 + v249) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v252 = (void *)((v1988 + v250) & 0xFFFFFFFFFFFFFFF8);
              *unsigned int v251 = *v252;
              unint64_t v253 = ((unint64_t)v251 + v1977) & v1975;
              unint64_t v254 = ((unint64_t)v252 + v1977) & v1975;
              (*(void (**)(unint64_t, unint64_t, uint64_t))(v1981 + 32))(v253, v254, v1980);
              size_t v255 = (void *)((v1973 + v253) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v256 = (void *)((v1973 + v254) & 0xFFFFFFFFFFFFFFF8);
              void *v255 = *v256;
              *(_OWORD *)(((unint64_t)v255 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v256
                                                                                             + 15) & 0xFFFFFFFFFFFFFFF8);
              *(_OWORD *)(v1995 + v249) = *(_OWORD *)(v1995 + v250);
              unint64_t v257 = (v2036 + v1995 + v249) & v1998;
              unint64_t v258 = (v2036 + v1995 + v250) & v1998;
              *(unsigned char *)unint64_t v257 = *(unsigned char *)v258;
              uint64_t v259 = v257 | 4;
              int v260 = *(_DWORD *)(v258 | 4);
              *(unsigned char *)(v259 + 4) = *(unsigned char *)((v258 | 4) + 4);
              *(_DWORD *)uint64_t v259 = v260;
              *(_WORD *)(v257 + 10) = *(_WORD *)(v258 + 0xA);
              unsigned int v261 = *(void (**)(unint64_t, unint64_t, uint64_t))(v2001 + 32);
              v261((v1999 + v257) & v2000, (v1999 + v258) & v2000, v2003);
              unint64_t v262 = (v1996 + ((v1999 + v257) & v2000)) & v2000;
              unint64_t v263 = (v1996 + ((v1999 + v258) & v2000)) & v2000;
              v261(v262, v263, v2003);
              uint64_t v264 = (unsigned char *)(v262 + v1992);
              *uint64_t v264 = *(unsigned char *)(v263 + v1992);
              v264[1] = *(unsigned char *)(v263 + v1992 + 1);
              v264[2] = *(unsigned char *)(v263 + v1992 + 2);
              v264[3] = *(unsigned char *)(v263 + v1992 + 3);
              v264[4] = *(unsigned char *)(v263 + v1992 + 4);
              unint64_t v265 = (v262 + v1992 + 12) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v266 = (v263 + v1992 + 12) & 0xFFFFFFFFFFFFFFF8;
              *(_OWORD *)unint64_t v265 = *(_OWORD *)v266;
              *(unsigned char *)(v265 + 16) = *(unsigned char *)(v266 + 16);
              *(unsigned char *)(v265 + 17) = *(unsigned char *)(v266 + 17);
              *(unsigned char *)(v265 + 18) = *(unsigned char *)(v266 + 18);
              *(unsigned char *)(v265 + 19) = *(unsigned char *)(v266 + 19);
              unint64_t v267 = (v265 + 27) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v268 = (v266 + 27) & 0xFFFFFFFFFFFFFFF8;
              *(void *)unint64_t v267 = *(void *)v268;
              *(unsigned char *)(v267 + 8) = *(unsigned char *)(v268 + 8);
              *(unsigned char *)(v267 + 9) = *(unsigned char *)(v268 + 9);
              *(unsigned char *)(v267 + 10) = *(unsigned char *)(v268 + 10);
              *(unsigned char *)(v267 + 11) = *(unsigned char *)(v268 + 11);
              *(unsigned char *)(v267 + 12) = *(unsigned char *)(v268 + 12);
              uint64_t v269 = (void *)((v266 + 47) & 0xFFFFFFFFFFFFFFF8);
              unsigned int v270 = (void *)((v265 + 47) & 0xFFFFFFFFFFFFFFF8);
              *unsigned int v270 = *v269;
              unint64_t v271 = ((unint64_t)v270 + 15) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v272 = ((unint64_t)v269 + 15) & 0xFFFFFFFFFFFFFFF8;
              *(void *)unint64_t v271 = *(void *)v272;
              *(unsigned char *)(v271 + 8) = *(unsigned char *)(v272 + 8);
              *(unsigned char *)(v271 + 9) = *(unsigned char *)(v272 + 9);
              uint64_t v273 = (void *)((v1993 + v271) & v2000);
              uint64_t v274 = (const void *)((v1993 + v272) & v2000);
              if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v2001 + 48))(v274, 1, v2003))
              {
                memcpy(v273, v274, v2039);
              }
              else
              {
                v261((unint64_t)v273, (unint64_t)v274, v2003);
                (*(void (**)(void *, void, uint64_t, uint64_t))(v2001 + 56))(v273, 0, 1, v2003);
              }
              long long v516 = (void *)(((unint64_t)v274 + v1994) & 0xFFFFFFFFFFFFFFF8);
              long long v517 = (void *)(((unint64_t)v273 + v1994) & 0xFFFFFFFFFFFFFFF8);
              *long long v517 = *v516;
              unint64_t v518 = ((unint64_t)v517 + 15) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v519 = ((unint64_t)v516 + 15) & 0xFFFFFFFFFFFFFFF8;
              uint64_t v520 = *(void *)v519;
              *(unsigned char *)(v518 + 8) = *(unsigned char *)(v519 + 8);
              *(void *)unint64_t v518 = v520;
              long long v521 = (void *)(((unint64_t)v517 + 31) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v522 = (void *)(((unint64_t)v516 + 31) & 0xFFFFFFFFFFFFFFF8);
              *long long v521 = *v522;
              unint64_t v523 = (_OWORD *)(((unint64_t)v521 + 15) & 0xFFFFFFFFFFFFFFF8);
              unint64_t v524 = (_OWORD *)(((unint64_t)v522 + 15) & 0xFFFFFFFFFFFFFFF8);
              *unint64_t v523 = *v524;
              unint64_t v525 = ((unint64_t)v523 + 19) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v526 = ((unint64_t)v524 + 19) & 0xFFFFFFFFFFFFFFF8;
              uint64_t v527 = *(void *)v526;
              *(unsigned char *)(v525 + 8) = *(unsigned char *)(v526 + 8);
              *(void *)unint64_t v525 = v527;
              *(unsigned char *)(v525 + 9) = *(unsigned char *)(v526 + 9);
              unint64_t v528 = (v525 + 13) & 0xFFFFFFFFFFFFFFFCLL;
              unint64_t v529 = (v526 + 13) & 0xFFFFFFFFFFFFFFFCLL;
              LODWORD(v520) = *(_DWORD *)v529;
              *(unsigned char *)(v528 + 4) = *(unsigned char *)(v529 + 4);
              *(_DWORD *)unint64_t v528 = v520;
              *(_OWORD *)((v525 + 25) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v526 + 25) & 0xFFFFFFFFFFFFFFF8);
              unint64_t v530 = v257 + v2035;
              long long v531 = *(_OWORD *)(v258 + v2035 + 112);
              long long v533 = *(_OWORD *)(v258 + v2035 + 64);
              long long v532 = *(_OWORD *)(v258 + v2035 + 80);
              *(_OWORD *)(v530 + 96) = *(_OWORD *)(v258 + v2035 + 96);
              *(_OWORD *)(v530 + 112) = v531;
              *(_OWORD *)(v530 + 64) = v533;
              *(_OWORD *)(v530 + 80) = v532;
              long long v534 = *(_OWORD *)(v258 + v2035 + 176);
              long long v536 = *(_OWORD *)(v258 + v2035 + 128);
              long long v535 = *(_OWORD *)(v258 + v2035 + 144);
              *(_OWORD *)(v530 + 160) = *(_OWORD *)(v258 + v2035 + 160);
              *(_OWORD *)(v530 + 176) = v534;
              *(_OWORD *)(v530 + 128) = v536;
              *(_OWORD *)(v530 + 144) = v535;
              long long v538 = *(_OWORD *)(v258 + v2035 + 208);
              long long v537 = *(_OWORD *)(v258 + v2035 + 224);
              long long v539 = *(_OWORD *)(v258 + v2035 + 192);
              *(void *)(v530 + 240) = *(void *)(v258 + v2035 + 240);
              *(_OWORD *)(v530 + 208) = v538;
              *(_OWORD *)(v530 + 224) = v537;
              *(_OWORD *)(v530 + 192) = v539;
              long long v540 = *(_OWORD *)(v258 + v2035);
              long long v541 = *(_OWORD *)(v258 + v2035 + 16);
              long long v542 = *(_OWORD *)(v258 + v2035 + 48);
              *(_OWORD *)(v530 + 32) = *(_OWORD *)(v258 + v2035 + 32);
              *(_OWORD *)(v530 + 48) = v542;
              *(_OWORD *)unint64_t v530 = v540;
              *(_OWORD *)(v530 + 16) = v541;
              long long v543 = (_OWORD *)((v257 + v2035 + 255) & 0xFFFFFFFFFFFFFFF8);
              long long v544 = (long long *)((v258 + v2035 + 255) & 0xFFFFFFFFFFFFFFF8);
              long long v545 = *v544;
              *(_OWORD *)((char *)v543 + 9) = *(long long *)((char *)v544 + 9);
              _OWORD *v543 = v545;
              unint64_t v546 = (v257 + v2035 + 287) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v547 = (v258 + v2035 + 287) & 0xFFFFFFFFFFFFFFF8;
              long long v548 = *(_OWORD *)v547;
              *(unsigned char *)(v546 + 16) = *(unsigned char *)(v547 + 16);
              *(_OWORD *)unint64_t v546 = v548;
              unint64_t v549 = (void *)((v257 + v2035 + 311) & 0xFFFFFFFFFFFFFFF8);
              unsigned int v550 = (void *)((v258 + v2035 + 311) & 0xFFFFFFFFFFFFFFF8);
              *unint64_t v549 = *v550;
              *(_OWORD *)(((unint64_t)v549 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v550
                                                                                             + 15) & 0xFFFFFFFFFFFFFFF8);
              if (v246 > 3) {
                goto LABEL_677;
              }
              unsigned int v551 = ((1 << (8 * v246)) + 5) >> (8 * v246);
              if (v551 > 0xFFD6)
              {
                *(_DWORD *)unint64_t v68 = 8;
              }
              else if (v551 <= 0xD6)
              {
LABEL_677:
                *unint64_t v68 = 8;
              }
              else
              {
                *(_WORD *)unint64_t v68 = 8;
              }
              return a1;
            case 9u:
              unsigned int v275 = v77[v63];
              unsigned int v276 = v275 - 2;
              if (v275 < 2)
              {
                unsigned int v279 = v67;
                uint64_t v278 = v2060;
                uint64_t v280 = v2040;
              }
              else
              {
                if (v63 <= 3) {
                  uint64_t v277 = v63;
                }
                else {
                  uint64_t v277 = 4;
                }
                uint64_t v278 = v2060;
                unsigned int v279 = v67;
                uint64_t v280 = v2040;
                switch(v277)
                {
                  case 1:
                    int v281 = *v77;
                    goto LABEL_955;
                  case 2:
                    int v281 = *(unsigned __int16 *)v77;
                    goto LABEL_955;
                  case 3:
                    int v281 = *(unsigned __int16 *)v77 | (v77[2] << 16);
                    goto LABEL_955;
                  case 4:
                    int v281 = *(_DWORD *)v77;
LABEL_955:
                    if (v63 < 4) {
                      unsigned int v275 = (v281 | (v276 << (8 * v63))) + 2;
                    }
                    else {
                      unsigned int v275 = v281 + 2;
                    }
                    break;
                  default:
                    break;
                }
              }
              BOOL v679 = v275 == 1;
              if (v275 == 1) {
                uint64_t v680 = v278;
              }
              else {
                uint64_t v680 = v280;
              }
              if (v275 == 1) {
                uint64_t v681 = v72;
              }
              else {
                uint64_t v681 = v73;
              }
              unint64_t v682 = v63;
              (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v680 + 32))(a1, v77, v681);
              a1[v682] = v679;
              if (v279 > 3) {
                goto LABEL_965;
              }
              unsigned int v683 = ((1 << (8 * v279)) + 5) >> (8 * v279);
              if (v683 > 0xFFD6)
              {
                int v571 = 9;
                goto LABEL_2273;
              }
              if (v683 <= 0xD6) {
LABEL_965:
              }
                *unint64_t v68 = 9;
              else {
                *(_WORD *)unint64_t v68 = 9;
              }
              return a1;
            case 0xAu:
              unsigned int v282 = v77[v63];
              unsigned int v283 = v282 - 2;
              if (v282 < 2)
              {
                uint64_t v285 = v2060;
                uint64_t v286 = v2040;
              }
              else
              {
                if (v63 <= 3) {
                  uint64_t v284 = v63;
                }
                else {
                  uint64_t v284 = 4;
                }
                uint64_t v285 = v2060;
                uint64_t v286 = v2040;
                switch(v284)
                {
                  case 1:
                    int v287 = *a2;
                    goto LABEL_973;
                  case 2:
                    int v287 = *(unsigned __int16 *)a2;
                    goto LABEL_973;
                  case 3:
                    int v287 = *(unsigned __int16 *)a2 | (a2[2] << 16);
                    goto LABEL_973;
                  case 4:
                    int v287 = *(_DWORD *)a2;
LABEL_973:
                    if (v63 < 4) {
                      unsigned int v282 = (v287 | (v283 << (8 * v63))) + 2;
                    }
                    else {
                      unsigned int v282 = v287 + 2;
                    }
                    break;
                  default:
                    break;
                }
              }
              unsigned int v684 = v67;
              BOOL v685 = v282 == 1;
              if (v282 == 1) {
                uint64_t v686 = v285;
              }
              else {
                uint64_t v686 = v286;
              }
              if (v282 == 1) {
                uint64_t v687 = v72;
              }
              else {
                uint64_t v687 = v73;
              }
              (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v686 + 32))(a1, a2, v687);
              a1[v2056] = v685;
              uint64_t v688 = (char *)((unint64_t)&a1[v1997] & v2004);
              uint64_t v689 = (unsigned __int8 *)((unint64_t)&a2[v1997] & v2004);
              unsigned int v690 = v689[v2056];
              if (v690 > 1)
              {
                size_t v691 = v2057;
                memcpy(v688, v689, v2057);
              }
              else if (v690 == 1)
              {
                (*(void (**)(char *, unsigned __int8 *, uint64_t))(v285 + 32))(v688, v689, v72);
                size_t v691 = v2057;
                v688[v2056] = 1;
              }
              else
              {
                (*(void (**)(char *, unsigned __int8 *, uint64_t))(v286 + 32))(v688, v689, v73);
                size_t v691 = v2057;
                v688[v2056] = 0;
              }
              unsigned int v692 = &v688[v691];
              char *v692 = v689[v691];
              v692[1] = v689[v691 + 1];
              if (v684 > 3) {
                goto LABEL_988;
              }
              unsigned int v693 = ((1 << (8 * v684)) + 5) >> (8 * v684);
              if (v693 > 0xFFD6)
              {
                int v571 = 10;
                goto LABEL_2273;
              }
              if (v693 <= 0xD6) {
LABEL_988:
              }
                *unint64_t v68 = 10;
              else {
                *(_WORD *)unint64_t v68 = 10;
              }
              return a1;
            case 0xBu:
              unsigned int v288 = v77[v63];
              unsigned int v289 = v288 - 2;
              if (v288 < 2)
              {
                uint64_t v291 = v2060;
                uint64_t v292 = v2040;
              }
              else
              {
                if (v63 <= 3) {
                  uint64_t v290 = v63;
                }
                else {
                  uint64_t v290 = 4;
                }
                uint64_t v291 = v2060;
                uint64_t v292 = v2040;
                switch(v290)
                {
                  case 1:
                    int v293 = *a2;
                    goto LABEL_996;
                  case 2:
                    int v293 = *(unsigned __int16 *)a2;
                    goto LABEL_996;
                  case 3:
                    int v293 = *(unsigned __int16 *)a2 | (a2[2] << 16);
                    goto LABEL_996;
                  case 4:
                    int v293 = *(_DWORD *)a2;
LABEL_996:
                    if (v63 < 4) {
                      unsigned int v288 = (v293 | (v289 << (8 * v63))) + 2;
                    }
                    else {
                      unsigned int v288 = v293 + 2;
                    }
                    break;
                  default:
                    break;
                }
              }
              unsigned int v694 = v67;
              BOOL v695 = v288 == 1;
              if (v288 == 1) {
                uint64_t v696 = v291;
              }
              else {
                uint64_t v696 = v292;
              }
              if (v288 == 1) {
                uint64_t v697 = v72;
              }
              else {
                uint64_t v697 = v73;
              }
              (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v696 + 32))(a1, a2, v697);
              a1[v2056] = v695;
              unint64_t v698 = (char *)((unint64_t)&a1[v1997] & v2004);
              unsigned int v699 = (unsigned __int8 *)((unint64_t)&a2[v1997] & v2004);
              unsigned int v700 = v699[v2056];
              if (v700 > 1)
              {
                size_t v701 = v2057;
                memcpy(v698, v699, v2057);
              }
              else if (v700 == 1)
              {
                (*(void (**)(char *, unsigned __int8 *, uint64_t))(v291 + 32))(v698, v699, v72);
                size_t v701 = v2057;
                v698[v2056] = 1;
              }
              else
              {
                (*(void (**)(char *, unsigned __int8 *, uint64_t))(v292 + 32))(v698, v699, v73);
                size_t v701 = v2057;
                v698[v2056] = 0;
              }
              size_t v702 = &v698[v701];
              *size_t v702 = v699[v701];
              v702[1] = v699[v701 + 1];
              if (v694 > 3) {
                goto LABEL_1011;
              }
              unsigned int v703 = ((1 << (8 * v694)) + 5) >> (8 * v694);
              if (v703 > 0xFFD6)
              {
                int v571 = 11;
                goto LABEL_2273;
              }
              if (v703 <= 0xD6) {
LABEL_1011:
              }
                *unint64_t v68 = 11;
              else {
                *(_WORD *)unint64_t v68 = 11;
              }
              return a1;
            case 0xCu:
              unsigned int v294 = v77[v63];
              unsigned int v295 = v294 - 2;
              if (v294 < 2)
              {
                unsigned int v298 = v67;
                uint64_t v297 = v2060;
                uint64_t v299 = v2040;
              }
              else
              {
                if (v63 <= 3) {
                  uint64_t v296 = v63;
                }
                else {
                  uint64_t v296 = 4;
                }
                uint64_t v297 = v2060;
                unsigned int v298 = v67;
                uint64_t v299 = v2040;
                switch(v296)
                {
                  case 1:
                    int v300 = *v77;
                    goto LABEL_1019;
                  case 2:
                    int v300 = *(unsigned __int16 *)v77;
                    goto LABEL_1019;
                  case 3:
                    int v300 = *(unsigned __int16 *)v77 | (v77[2] << 16);
                    goto LABEL_1019;
                  case 4:
                    int v300 = *(_DWORD *)v77;
LABEL_1019:
                    if (v63 < 4) {
                      unsigned int v294 = (v300 | (v295 << (8 * v63))) + 2;
                    }
                    else {
                      unsigned int v294 = v300 + 2;
                    }
                    break;
                  default:
                    break;
                }
              }
              BOOL v704 = v294 == 1;
              if (v294 == 1) {
                uint64_t v705 = v297;
              }
              else {
                uint64_t v705 = v299;
              }
              if (v294 == 1) {
                uint64_t v706 = v72;
              }
              else {
                uint64_t v706 = v73;
              }
              unint64_t v707 = v63;
              (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v705 + 32))(a1, v77, v706);
              a1[v707] = v704;
              a1[v2057] = v77[v2057];
              *(void *)((unint64_t)&a1[v2027 + 7] & 0xFFFFFFFFFFFFFFF8) = *(void *)((unint64_t)&v77[v2027 + 7] & 0xFFFFFFFFFFFFFFF8);
              if (v298 > 3) {
                goto LABEL_1029;
              }
              unsigned int v708 = ((1 << (8 * v298)) + 5) >> (8 * v298);
              if (v708 > 0xFFD6)
              {
                int v571 = 12;
                goto LABEL_2273;
              }
              if (v708 <= 0xD6) {
LABEL_1029:
              }
                *unint64_t v68 = 12;
              else {
                *(_WORD *)unint64_t v68 = 12;
              }
              return a1;
            case 0xDu:
              unsigned int v301 = v77[v63];
              unsigned int v302 = v301 - 2;
              if (v301 < 2)
              {
                unsigned int v305 = v67;
                uint64_t v304 = v2060;
                uint64_t v306 = v2040;
              }
              else
              {
                if (v63 <= 3) {
                  uint64_t v303 = v63;
                }
                else {
                  uint64_t v303 = 4;
                }
                uint64_t v304 = v2060;
                unsigned int v305 = v67;
                uint64_t v306 = v2040;
                switch(v303)
                {
                  case 1:
                    int v307 = *v77;
                    goto LABEL_1037;
                  case 2:
                    int v307 = *(unsigned __int16 *)v77;
                    goto LABEL_1037;
                  case 3:
                    int v307 = *(unsigned __int16 *)v77 | (v77[2] << 16);
                    goto LABEL_1037;
                  case 4:
                    int v307 = *(_DWORD *)v77;
LABEL_1037:
                    if (v63 < 4) {
                      unsigned int v301 = (v307 | (v302 << (8 * v63))) + 2;
                    }
                    else {
                      unsigned int v301 = v307 + 2;
                    }
                    break;
                  default:
                    break;
                }
              }
              BOOL v709 = v301 == 1;
              if (v301 == 1) {
                uint64_t v710 = v304;
              }
              else {
                uint64_t v710 = v306;
              }
              if (v301 == 1) {
                uint64_t v711 = v72;
              }
              else {
                uint64_t v711 = v73;
              }
              unint64_t v712 = v63;
              (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v710 + 32))(a1, v77, v711);
              a1[v712] = v709;
              a1[v2057] = v77[v2057];
              if (v305 > 3) {
                goto LABEL_1047;
              }
              unsigned int v713 = ((1 << (8 * v305)) + 5) >> (8 * v305);
              if (v713 > 0xFFD6)
              {
                int v571 = 13;
                goto LABEL_2273;
              }
              if (v713 <= 0xD6) {
LABEL_1047:
              }
                *unint64_t v68 = 13;
              else {
                *(_WORD *)unint64_t v68 = 13;
              }
              return a1;
            case 0xEu:
              unsigned int v308 = v77[v63];
              unsigned int v309 = v308 - 2;
              if (v308 < 2)
              {
                unsigned int v312 = v67;
                uint64_t v311 = v2060;
                uint64_t v313 = v2040;
              }
              else
              {
                if (v63 <= 3) {
                  uint64_t v310 = v63;
                }
                else {
                  uint64_t v310 = 4;
                }
                uint64_t v311 = v2060;
                unsigned int v312 = v67;
                uint64_t v313 = v2040;
                switch(v310)
                {
                  case 1:
                    int v314 = *v77;
                    goto LABEL_1055;
                  case 2:
                    int v314 = *(unsigned __int16 *)v77;
                    goto LABEL_1055;
                  case 3:
                    int v314 = *(unsigned __int16 *)v77 | (v77[2] << 16);
                    goto LABEL_1055;
                  case 4:
                    int v314 = *(_DWORD *)v77;
LABEL_1055:
                    if (v63 < 4) {
                      unsigned int v308 = (v314 | (v309 << (8 * v63))) + 2;
                    }
                    else {
                      unsigned int v308 = v314 + 2;
                    }
                    break;
                  default:
                    break;
                }
              }
              BOOL v714 = v308 == 1;
              if (v308 == 1) {
                uint64_t v715 = v311;
              }
              else {
                uint64_t v715 = v313;
              }
              if (v308 == 1) {
                uint64_t v716 = v72;
              }
              else {
                uint64_t v716 = v73;
              }
              unint64_t v717 = v63;
              (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v715 + 32))(a1, v77, v716);
              a1[v717] = v714;
              *(void *)((unint64_t)&a1[v2057 + 7] & 0xFFFFFFFFFFFFFFF8) = *(void *)((unint64_t)&v77[v2057 + 7] & 0xFFFFFFFFFFFFFFF8);
              if (v312 > 3) {
                goto LABEL_1065;
              }
              unsigned int v718 = ((1 << (8 * v312)) + 5) >> (8 * v312);
              if (v718 > 0xFFD6)
              {
                int v571 = 14;
                goto LABEL_2273;
              }
              if (v718 <= 0xD6) {
LABEL_1065:
              }
                *unint64_t v68 = 14;
              else {
                *(_WORD *)unint64_t v68 = 14;
              }
              return a1;
            case 0xFu:
              unsigned int v315 = v77[v63];
              unsigned int v316 = v315 - 2;
              if (v315 < 2)
              {
                unsigned int v319 = v67;
                uint64_t v318 = v2060;
                uint64_t v320 = v2040;
              }
              else
              {
                if (v63 <= 3) {
                  uint64_t v317 = v63;
                }
                else {
                  uint64_t v317 = 4;
                }
                uint64_t v318 = v2060;
                unsigned int v319 = v67;
                uint64_t v320 = v2040;
                switch(v317)
                {
                  case 1:
                    int v321 = *v77;
                    goto LABEL_1073;
                  case 2:
                    int v321 = *(unsigned __int16 *)v77;
                    goto LABEL_1073;
                  case 3:
                    int v321 = *(unsigned __int16 *)v77 | (v77[2] << 16);
                    goto LABEL_1073;
                  case 4:
                    int v321 = *(_DWORD *)v77;
LABEL_1073:
                    if (v63 < 4) {
                      unsigned int v315 = (v321 | (v316 << (8 * v63))) + 2;
                    }
                    else {
                      unsigned int v315 = v321 + 2;
                    }
                    break;
                  default:
                    break;
                }
              }
              BOOL v719 = v315 == 1;
              if (v315 == 1) {
                uint64_t v720 = v318;
              }
              else {
                uint64_t v720 = v320;
              }
              if (v315 == 1) {
                uint64_t v721 = v72;
              }
              else {
                uint64_t v721 = v73;
              }
              unint64_t v722 = v63;
              (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v720 + 32))(a1, v77, v721);
              a1[v722] = v719;
              *(void *)((unint64_t)&a1[v2057 + 7] & 0xFFFFFFFFFFFFFFF8) = *(void *)((unint64_t)&v77[v2057 + 7] & 0xFFFFFFFFFFFFFFF8);
              if (v319 > 3) {
                goto LABEL_1083;
              }
              unsigned int v723 = ((1 << (8 * v319)) + 5) >> (8 * v319);
              if (v723 > 0xFFD6)
              {
                int v571 = 15;
                goto LABEL_2273;
              }
              if (v723 <= 0xD6) {
LABEL_1083:
              }
                *unint64_t v68 = 15;
              else {
                *(_WORD *)unint64_t v68 = 15;
              }
              return a1;
            case 0x10u:
              long long v322 = *((_OWORD *)v77 + 1);
              *(_OWORD *)a1 = *(_OWORD *)v77;
              *((_OWORD *)a1 + 1) = v322;
              *((_OWORD *)a1 + 2) = *((_OWORD *)v77 + 2);
              *((void *)a1 + 6) = *((void *)v77 + 6);
              if (v67 > 3) {
                goto LABEL_472;
              }
              unsigned int v464 = ((1 << (8 * v67)) + 5) >> (8 * v67);
              if (v464 > 0xFFD6)
              {
                int v571 = 16;
                goto LABEL_2273;
              }
              if (v464 <= 0xD6) {
LABEL_472:
              }
                *unint64_t v68 = 16;
              else {
                *(_WORD *)unint64_t v68 = 16;
              }
              return a1;
            case 0x11u:
              unsigned int v323 = v77[v63];
              unsigned int v324 = v323 - 2;
              if (v323 < 2)
              {
                unsigned int v327 = v67;
                uint64_t v326 = v2060;
                uint64_t v328 = v2040;
              }
              else
              {
                if (v63 <= 3) {
                  uint64_t v325 = v63;
                }
                else {
                  uint64_t v325 = 4;
                }
                uint64_t v326 = v2060;
                unsigned int v327 = v67;
                uint64_t v328 = v2040;
                switch(v325)
                {
                  case 1:
                    int v329 = *v77;
                    goto LABEL_1091;
                  case 2:
                    int v329 = *(unsigned __int16 *)v77;
                    goto LABEL_1091;
                  case 3:
                    int v329 = *(unsigned __int16 *)v77 | (v77[2] << 16);
                    goto LABEL_1091;
                  case 4:
                    int v329 = *(_DWORD *)v77;
LABEL_1091:
                    if (v63 < 4) {
                      unsigned int v323 = (v329 | (v324 << (8 * v63))) + 2;
                    }
                    else {
                      unsigned int v323 = v329 + 2;
                    }
                    break;
                  default:
                    break;
                }
              }
              BOOL v724 = v323 == 1;
              if (v323 == 1) {
                uint64_t v725 = v326;
              }
              else {
                uint64_t v725 = v328;
              }
              if (v323 == 1) {
                uint64_t v726 = v72;
              }
              else {
                uint64_t v726 = v73;
              }
              unint64_t v727 = v63;
              (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v725 + 32))(a1, v77, v726);
              a1[v727] = v724;
              if (v327 > 3) {
                goto LABEL_1101;
              }
              unsigned int v728 = ((1 << (8 * v327)) + 5) >> (8 * v327);
              if (v728 > 0xFFD6)
              {
                int v571 = 17;
                goto LABEL_2273;
              }
              if (v728 <= 0xD6) {
LABEL_1101:
              }
                *unint64_t v68 = 17;
              else {
                *(_WORD *)unint64_t v68 = 17;
              }
              return a1;
            case 0x12u:
              unsigned int v330 = v67;
              (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v2040 + 32))(a1, v77, v73);
              (*(void (**)(unint64_t, unint64_t, uint64_t))(v2060 + 32))((unint64_t)&a1[v1963] & v2005, (unint64_t)&v77[v1963] & v2005, v72);
              if (v330 > 3) {
                goto LABEL_480;
              }
              unsigned int v465 = ((1 << (8 * v330)) + 5) >> (8 * v330);
              if (v465 > 0xFFD6)
              {
                int v571 = 18;
                goto LABEL_2273;
              }
              if (v465 <= 0xD6) {
LABEL_480:
              }
                *unint64_t v68 = 18;
              else {
                *(_WORD *)unint64_t v68 = 18;
              }
              return a1;
            case 0x13u:
              *a1 = *v77;
              uint64_t v331 = (unint64_t)&a1[v2047 + 1] & v2004;
              int v332 = (unsigned __int8 *)((unint64_t)&v77[v2047 + 1] & v2004);
              unsigned int v333 = v332[v63];
              unsigned int v334 = v333 - 2;
              if (v333 < 2)
              {
                unsigned int v337 = v67;
                uint64_t v336 = v2060;
                uint64_t v338 = v2040;
              }
              else
              {
                if (v63 <= 3) {
                  uint64_t v335 = v63;
                }
                else {
                  uint64_t v335 = 4;
                }
                uint64_t v336 = v2060;
                unsigned int v337 = v67;
                uint64_t v338 = v2040;
                switch(v335)
                {
                  case 1:
                    int v339 = *v332;
                    goto LABEL_1109;
                  case 2:
                    int v339 = *(unsigned __int16 *)v332;
                    goto LABEL_1109;
                  case 3:
                    int v339 = *(unsigned __int16 *)v332 | (v332[2] << 16);
                    goto LABEL_1109;
                  case 4:
                    int v339 = *(_DWORD *)v332;
LABEL_1109:
                    if (v63 < 4) {
                      unsigned int v333 = (v339 | (v334 << (8 * v63))) + 2;
                    }
                    else {
                      unsigned int v333 = v339 + 2;
                    }
                    break;
                  default:
                    break;
                }
              }
              BOOL v729 = v333 == 1;
              if (v333 == 1) {
                uint64_t v730 = v336;
              }
              else {
                uint64_t v730 = v338;
              }
              unint64_t v731 = v63;
              (*(void (**)(uint64_t))(v730 + 32))(v331);
              *(unsigned char *)(v331 + v731) = v729;
              if (v337 > 3) {
                goto LABEL_1116;
              }
              unsigned int v732 = ((1 << (8 * v337)) + 5) >> (8 * v337);
              if (v732 > 0xFFD6)
              {
                int v571 = 19;
                goto LABEL_2273;
              }
              if (v732 <= 0xD6) {
LABEL_1116:
              }
                *unint64_t v68 = 19;
              else {
                *(_WORD *)unint64_t v68 = 19;
              }
              return a1;
            case 0x14u:
              *(void *)a1 = *(void *)v77;
              if (v67 > 3) {
                goto LABEL_488;
              }
              unsigned int v466 = ((1 << (8 * v67)) + 5) >> (8 * v67);
              if (v466 > 0xFFD6)
              {
                int v571 = 20;
                goto LABEL_2273;
              }
              if (v466 <= 0xD6) {
LABEL_488:
              }
                *unint64_t v68 = 20;
              else {
                *(_WORD *)unint64_t v68 = 20;
              }
              return a1;
            case 0x15u:
              *(void *)a1 = *(void *)v77;
              if (v67 > 3) {
                goto LABEL_490;
              }
              unsigned int v467 = ((1 << (8 * v67)) + 5) >> (8 * v67);
              if (v467 > 0xFFD6)
              {
                int v571 = 21;
                goto LABEL_2273;
              }
              if (v467 <= 0xD6) {
LABEL_490:
              }
                *unint64_t v68 = 21;
              else {
                *(_WORD *)unint64_t v68 = 21;
              }
              return a1;
            case 0x16u:
              *a1 = *v77;
              if (v67 > 3) {
                goto LABEL_492;
              }
              unsigned int v468 = ((1 << (8 * v67)) + 5) >> (8 * v67);
              if (v468 > 0xFFD6)
              {
                int v571 = 22;
                goto LABEL_2273;
              }
              if (v468 <= 0xD6) {
LABEL_492:
              }
                *unint64_t v68 = 22;
              else {
                *(_WORD *)unint64_t v68 = 22;
              }
              return a1;
            case 0x17u:
              *a1 = *v77;
              if (v67 > 3) {
                goto LABEL_494;
              }
              unsigned int v469 = ((1 << (8 * v67)) + 5) >> (8 * v67);
              if (v469 > 0xFFD6)
              {
                int v571 = 23;
                goto LABEL_2273;
              }
              if (v469 <= 0xD6) {
LABEL_494:
              }
                *unint64_t v68 = 23;
              else {
                *(_WORD *)unint64_t v68 = 23;
              }
              return a1;
            case 0x18u:
              unsigned int v340 = v77[v63];
              unsigned int v341 = v340 - 2;
              if (v340 < 2)
              {
                unsigned int v344 = v67;
                uint64_t v343 = v2060;
                uint64_t v345 = v2040;
              }
              else
              {
                if (v63 <= 3) {
                  uint64_t v342 = v63;
                }
                else {
                  uint64_t v342 = 4;
                }
                uint64_t v343 = v2060;
                unsigned int v344 = v67;
                uint64_t v345 = v2040;
                switch(v342)
                {
                  case 1:
                    int v346 = *v77;
                    goto LABEL_1124;
                  case 2:
                    int v346 = *(unsigned __int16 *)v77;
                    goto LABEL_1124;
                  case 3:
                    int v346 = *(unsigned __int16 *)v77 | (v77[2] << 16);
                    goto LABEL_1124;
                  case 4:
                    int v346 = *(_DWORD *)v77;
LABEL_1124:
                    if (v63 < 4) {
                      unsigned int v340 = (v346 | (v341 << (8 * v63))) + 2;
                    }
                    else {
                      unsigned int v340 = v346 + 2;
                    }
                    break;
                  default:
                    break;
                }
              }
              BOOL v733 = v340 == 1;
              if (v340 == 1) {
                uint64_t v734 = v343;
              }
              else {
                uint64_t v734 = v345;
              }
              if (v340 == 1) {
                uint64_t v735 = v72;
              }
              else {
                uint64_t v735 = v73;
              }
              unint64_t v736 = v63;
              (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v734 + 32))(a1, v77, v735);
              a1[v736] = v733;
              if (v344 > 3) {
                goto LABEL_1134;
              }
              unsigned int v737 = ((1 << (8 * v344)) + 5) >> (8 * v344);
              if (v737 > 0xFFD6)
              {
                int v571 = 24;
                goto LABEL_2273;
              }
              if (v737 <= 0xD6) {
LABEL_1134:
              }
                *unint64_t v68 = 24;
              else {
                *(_WORD *)unint64_t v68 = 24;
              }
              return a1;
            case 0x19u:
              unsigned int v347 = v77[v63];
              unsigned int v348 = v347 - 2;
              if (v347 < 2)
              {
                unsigned int v351 = v67;
                uint64_t v350 = v2060;
                uint64_t v352 = v2040;
              }
              else
              {
                if (v63 <= 3) {
                  uint64_t v349 = v63;
                }
                else {
                  uint64_t v349 = 4;
                }
                uint64_t v350 = v2060;
                unsigned int v351 = v67;
                uint64_t v352 = v2040;
                switch(v349)
                {
                  case 1:
                    int v353 = *v77;
                    goto LABEL_1142;
                  case 2:
                    int v353 = *(unsigned __int16 *)v77;
                    goto LABEL_1142;
                  case 3:
                    int v353 = *(unsigned __int16 *)v77 | (v77[2] << 16);
                    goto LABEL_1142;
                  case 4:
                    int v353 = *(_DWORD *)v77;
LABEL_1142:
                    if (v63 < 4) {
                      unsigned int v347 = (v353 | (v348 << (8 * v63))) + 2;
                    }
                    else {
                      unsigned int v347 = v353 + 2;
                    }
                    break;
                  default:
                    break;
                }
              }
              BOOL v738 = v347 == 1;
              if (v347 == 1) {
                uint64_t v739 = v350;
              }
              else {
                uint64_t v739 = v352;
              }
              if (v347 == 1) {
                uint64_t v740 = v72;
              }
              else {
                uint64_t v740 = v73;
              }
              unint64_t v741 = v63;
              (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v739 + 32))(a1, v77, v740);
              a1[v741] = v738;
              if (v351 > 3) {
                goto LABEL_1152;
              }
              unsigned int v742 = ((1 << (8 * v351)) + 5) >> (8 * v351);
              if (v742 > 0xFFD6)
              {
                int v571 = 25;
                goto LABEL_2273;
              }
              if (v742 <= 0xD6) {
LABEL_1152:
              }
                *unint64_t v68 = 25;
              else {
                *(_WORD *)unint64_t v68 = 25;
              }
              return a1;
            case 0x1Au:
              unsigned int v354 = v77[v63];
              unsigned int v355 = v354 - 2;
              if (v354 < 2)
              {
                unsigned int v358 = v67;
                uint64_t v357 = v2060;
                uint64_t v359 = v2040;
              }
              else
              {
                if (v63 <= 3) {
                  uint64_t v356 = v63;
                }
                else {
                  uint64_t v356 = 4;
                }
                uint64_t v357 = v2060;
                unsigned int v358 = v67;
                uint64_t v359 = v2040;
                switch(v356)
                {
                  case 1:
                    int v360 = *v77;
                    goto LABEL_1160;
                  case 2:
                    int v360 = *(unsigned __int16 *)v77;
                    goto LABEL_1160;
                  case 3:
                    int v360 = *(unsigned __int16 *)v77 | (v77[2] << 16);
                    goto LABEL_1160;
                  case 4:
                    int v360 = *(_DWORD *)v77;
LABEL_1160:
                    if (v63 < 4) {
                      unsigned int v354 = (v360 | (v355 << (8 * v63))) + 2;
                    }
                    else {
                      unsigned int v354 = v360 + 2;
                    }
                    break;
                  default:
                    break;
                }
              }
              BOOL v743 = v354 == 1;
              if (v354 == 1) {
                uint64_t v744 = v357;
              }
              else {
                uint64_t v744 = v359;
              }
              if (v354 == 1) {
                uint64_t v745 = v72;
              }
              else {
                uint64_t v745 = v73;
              }
              unint64_t v746 = v63;
              (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v744 + 32))(a1, v77, v745);
              a1[v746] = v743;
              if (v358 > 3) {
                goto LABEL_1170;
              }
              unsigned int v747 = ((1 << (8 * v358)) + 5) >> (8 * v358);
              if (v747 > 0xFFD6)
              {
                int v571 = 26;
                goto LABEL_2273;
              }
              if (v747 <= 0xD6) {
LABEL_1170:
              }
                *unint64_t v68 = 26;
              else {
                *(_WORD *)unint64_t v68 = 26;
              }
              return a1;
            case 0x1Bu:
              unsigned int v361 = v77[v64];
              unsigned int v362 = v361 - 2;
              if (v361 < 2)
              {
                uint64_t v364 = v2060;
              }
              else
              {
                if (v64 <= 3) {
                  uint64_t v363 = v64;
                }
                else {
                  uint64_t v363 = 4;
                }
                uint64_t v364 = v2060;
                switch(v363)
                {
                  case 1:
                    int v365 = *v77;
                    goto LABEL_1178;
                  case 2:
                    int v365 = *(unsigned __int16 *)v77;
                    goto LABEL_1178;
                  case 3:
                    int v365 = *(unsigned __int16 *)v77 | (v77[2] << 16);
                    goto LABEL_1178;
                  case 4:
                    int v365 = *(_DWORD *)v77;
LABEL_1178:
                    if (v64 < 4) {
                      unsigned int v361 = (v365 | (v362 << (8 * v64))) + 2;
                    }
                    else {
                      unsigned int v361 = v365 + 2;
                    }
                    break;
                  default:
                    break;
                }
              }
              unint64_t v1918 = v64;
              if (v361 == 1)
              {
                unsigned int v748 = v77[v1953];
                unsigned int v749 = v748 - 8;
                if (v748 >= 8)
                {
                  if (v1953 <= 3) {
                    uint64_t v750 = v1953;
                  }
                  else {
                    uint64_t v750 = 4;
                  }
                  switch(v750)
                  {
                    case 1:
                      int v751 = *v77;
                      goto LABEL_1696;
                    case 2:
                      int v751 = *(unsigned __int16 *)v77;
                      goto LABEL_1696;
                    case 3:
                      int v751 = *(unsigned __int16 *)v77 | (v77[2] << 16);
                      goto LABEL_1696;
                    case 4:
                      int v751 = *(_DWORD *)v77;
LABEL_1696:
                      if (v1953 < 4) {
                        unsigned int v748 = (v751 | (v749 << (8 * v1953))) + 8;
                      }
                      else {
                        unsigned int v748 = v751 + 8;
                      }
                      break;
                    default:
                      break;
                  }
                }
                unsigned int v1210 = v67;
                switch(v748)
                {
                  case 1u:
                    unsigned int v1914 = v68;
                    size_t v1215 = v77;
                    size_t v1216 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v364 + 32);
                    v1216(a1, v1215, v72);
                    uint64_t v2058 = (void *)((unint64_t)&a1[v1935] & v1960);
                    unint64_t v1217 = (void *)((unint64_t)&v1215[v1935] & v1960);
                    size_t v2054 = v1217;
                    if (v1965 == v1970)
                    {
                      int v1218 = (*(uint64_t (**)(void *))(v364 + 48))(v1217);
                    }
                    else
                    {
                      unint64_t v1300 = ((unint64_t)v1217 + v1989) & v2005;
                      unint64_t v1301 = (v1961 + v1300) & v2006;
                      if (v1969 != v1970)
                      {
                        unint64_t v1343 = v1301 + v1995;
                        uint64_t v1344 = v2040;
                        unint64_t v1345 = v2007 + 7;
                        if ((v1947 & 0x80000000) != 0)
                        {
                          uint64_t v1405 = (v1999 + ((v2036 + v1343) & v1998)) & v2000;
                          if (v1982 <= 0x7FFFFFFD)
                          {
                            unint64_t v1908 = *(void *)(((v1964 + ((v1996 + v1405) & v2000)) & 0xFFFFFFFFFFFFFFF8) + 8);
                            if (v1908 >= 0xFFFFFFFF) {
                              LODWORD(v1908) = -1;
                            }
                            if ((v1908 + 1) >= 2) {
                              goto LABEL_2185;
                            }
                            goto LABEL_2188;
                          }
                          int v1218 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v2001 + 48))(v1405, v1982, v2003);
                        }
                        else
                        {
                          unint64_t v1346 = *(void *)(v1343 + 8);
                          if (v1346 >= 0xFFFFFFFF) {
                            LODWORD(v1346) = -1;
                          }
                          int v1218 = v1346 + 1;
                        }
                        goto LABEL_2184;
                      }
                      if (v1967 == v1969)
                      {
                        int v1218 = (*(uint64_t (**)(unint64_t))(v1986 + 48))((v1961 + v1300) & v2006);
                      }
                      else
                      {
                        v1382 = (unint64_t *)((v1988 + v1301) & 0xFFFFFFFFFFFFFFF8);
                        if (v1952 <= 0x7FFFFFFE)
                        {
                          unint64_t v1383 = *v1382;
                          if (v1383 >= 0xFFFFFFFF) {
                            LODWORD(v1383) = -1;
                          }
                          uint64_t v1344 = v2040;
                          unint64_t v1345 = v2007 + 7;
                          if ((v1383 + 1) >= 2) {
                            goto LABEL_2185;
                          }
                          goto LABEL_2188;
                        }
                        int v1218 = (*(uint64_t (**)(unint64_t))(v1981 + 48))(((unint64_t)v1382
                                                                                          + v1977) & v1975);
                      }
                    }
                    uint64_t v1344 = v2040;
                    unint64_t v1345 = v2007 + 7;
LABEL_2184:
                    if (v1218)
                    {
LABEL_2185:
                      unint64_t v1538 = (unint64_t)&a1[v1935] & v1960;
                      memcpy(v2058, v1217, v66);
                      size_t v1539 = v2039;
                      uint64_t v1540 = v1949;
LABEL_2186:
                      size_t v1541 = v1539;
                      goto LABEL_2192;
                    }
                    unint64_t v1300 = ((unint64_t)v1217 + v1989) & v2005;
                    unint64_t v1301 = (v1961 + v1300) & v2006;
LABEL_2188:
                    v1216((unsigned __int8 *)v2058, (unsigned __int8 *)v1217, v72);
                    unint64_t v1542 = ((unint64_t)v2058 + v1989) & v2005;
                    v1216((unsigned __int8 *)v1542, (unsigned __int8 *)v1300, v72);
                    unint64_t v1543 = (v1961 + v1542) & v2006;
                    (*(void (**)(unint64_t, unint64_t, uint64_t))(v1986 + 32))(v1543, v1301, v1985);
                    long long v1544 = (void *)((v1988 + v1543) & 0xFFFFFFFFFFFFFFF8);
                    long long v1545 = (void *)((v1988 + v1301) & 0xFFFFFFFFFFFFFFF8);
                    void *v1544 = *v1545;
                    unint64_t v1546 = ((unint64_t)v1544 + v1977) & v1975;
                    unint64_t v1547 = ((unint64_t)v1545 + v1977) & v1975;
                    (*(void (**)(unint64_t, unint64_t, uint64_t))(v1981 + 32))(v1546, v1547, v1980);
                    long long v1548 = (void *)((v1973 + v1546) & 0xFFFFFFFFFFFFFFF8);
                    long long v1549 = (void *)((v1973 + v1547) & 0xFFFFFFFFFFFFFFF8);
                    *long long v1548 = *v1549;
                    *(_OWORD *)(((unint64_t)v1548 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1549 + 15) & 0xFFFFFFFFFFFFFFF8);
                    *(_OWORD *)(v1543 + v1995) = *(_OWORD *)(v1301 + v1995);
                    unint64_t v1550 = (v2036 + v1543 + v1995) & v1998;
                    unint64_t v1551 = (v2036 + v1301 + v1995) & v1998;
                    *(unsigned char *)unint64_t v1550 = *(unsigned char *)v1551;
                    uint64_t v1552 = v1550 | 4;
                    int v1553 = *(_DWORD *)(v1551 | 4);
                    *(unsigned char *)(v1552 + 4) = *(unsigned char *)((v1551 | 4) + 4);
                    *(_DWORD *)uint64_t v1552 = v1553;
                    *(_WORD *)(v1550 + 10) = *(_WORD *)(v1551 + 0xA);
                    unint64_t v1554 = *(void (**)(unint64_t, unint64_t, uint64_t))(v2001 + 32);
                    v1554((v1999 + v1550) & v2000, (v1999 + v1551) & v2000, v2003);
                    unint64_t v1555 = (v1996 + ((v1999 + v1550) & v2000)) & v2000;
                    unint64_t v1556 = (v1996 + ((v1999 + v1551) & v2000)) & v2000;
                    v1554(v1555, v1556, v2003);
                    unint64_t v1557 = (unsigned char *)(v1555 + v1992);
                    *unint64_t v1557 = *(unsigned char *)(v1556 + v1992);
                    v1557[1] = *(unsigned char *)(v1556 + v1992 + 1);
                    v1557[2] = *(unsigned char *)(v1556 + v1992 + 2);
                    v1557[3] = *(unsigned char *)(v1556 + v1992 + 3);
                    v1557[4] = *(unsigned char *)(v1556 + v1992 + 4);
                    unint64_t v1558 = (v1555 + v1992 + 12) & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v1559 = (v1556 + v1992 + 12) & 0xFFFFFFFFFFFFFFF8;
                    *(_OWORD *)unint64_t v1558 = *(_OWORD *)v1559;
                    *(unsigned char *)(v1558 + 16) = *(unsigned char *)(v1559 + 16);
                    *(unsigned char *)(v1558 + 17) = *(unsigned char *)(v1559 + 17);
                    *(unsigned char *)(v1558 + 18) = *(unsigned char *)(v1559 + 18);
                    *(unsigned char *)(v1558 + 19) = *(unsigned char *)(v1559 + 19);
                    unint64_t v1560 = (v1558 + 27) & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v1561 = (v1559 + 27) & 0xFFFFFFFFFFFFFFF8;
                    *(void *)unint64_t v1560 = *(void *)v1561;
                    *(unsigned char *)(v1560 + 8) = *(unsigned char *)(v1561 + 8);
                    *(unsigned char *)(v1560 + 9) = *(unsigned char *)(v1561 + 9);
                    *(unsigned char *)(v1560 + 10) = *(unsigned char *)(v1561 + 10);
                    *(unsigned char *)(v1560 + 11) = *(unsigned char *)(v1561 + 11);
                    *(unsigned char *)(v1560 + 12) = *(unsigned char *)(v1561 + 12);
                    unint64_t v1562 = (void *)((v1559 + 47) & 0xFFFFFFFFFFFFFFF8);
                    unint64_t v1563 = (void *)((v1558 + 47) & 0xFFFFFFFFFFFFFFF8);
                    *unint64_t v1563 = *v1562;
                    unint64_t v1564 = ((unint64_t)v1563 + 15) & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v1565 = ((unint64_t)v1562 + 15) & 0xFFFFFFFFFFFFFFF8;
                    *(void *)unint64_t v1564 = *(void *)v1565;
                    *(unsigned char *)(v1564 + 8) = *(unsigned char *)(v1565 + 8);
                    *(unsigned char *)(v1564 + 9) = *(unsigned char *)(v1565 + 9);
                    unint64_t v1566 = (void *)((v1993 + v1564) & v2000);
                    unint64_t v1567 = (const void *)((v1993 + v1565) & v2000);
                    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v2001 + 48))(v1567, 1, v2003))
                    {
                      size_t v1539 = v2039;
                      memcpy(v1566, v1567, v2039);
                    }
                    else
                    {
                      v1554((unint64_t)v1566, (unint64_t)v1567, v2003);
                      (*(void (**)(void *, void, uint64_t, uint64_t))(v2001 + 56))(v1566, 0, 1, v2003);
                      size_t v1539 = v2039;
                    }
                    uint64_t v1344 = v2040;
                    uint64_t v1540 = v1949;
                    unint64_t v1345 = v2007 + 7;
                    unint64_t v1568 = (void *)(((unint64_t)v1566 + v1994) & 0xFFFFFFFFFFFFFFF8);
                    uint64_t v1569 = (void *)(((unint64_t)v1567 + v1994) & 0xFFFFFFFFFFFFFFF8);
                    void *v1568 = *v1569;
                    unint64_t v1570 = ((unint64_t)v1568 + 15) & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v1571 = ((unint64_t)v1569 + 15) & 0xFFFFFFFFFFFFFFF8;
                    uint64_t v1572 = *(void *)v1571;
                    *(unsigned char *)(v1570 + 8) = *(unsigned char *)(v1571 + 8);
                    *(void *)unint64_t v1570 = v1572;
                    size_t v1573 = (void *)(((unint64_t)v1568 + 31) & 0xFFFFFFFFFFFFFFF8);
                    size_t v1574 = (void *)(((unint64_t)v1569 + 31) & 0xFFFFFFFFFFFFFFF8);
                    void *v1573 = *v1574;
                    size_t v1575 = (_OWORD *)(((unint64_t)v1573 + 15) & 0xFFFFFFFFFFFFFFF8);
                    uint64_t v1576 = (_OWORD *)(((unint64_t)v1574 + 15) & 0xFFFFFFFFFFFFFFF8);
                    _OWORD *v1575 = *v1576;
                    unint64_t v1577 = ((unint64_t)v1575 + 19) & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v1578 = ((unint64_t)v1576 + 19) & 0xFFFFFFFFFFFFFFF8;
                    uint64_t v1579 = *(void *)v1578;
                    *(unsigned char *)(v1577 + 8) = *(unsigned char *)(v1578 + 8);
                    *(void *)unint64_t v1577 = v1579;
                    *(unsigned char *)(v1577 + 9) = *(unsigned char *)(v1578 + 9);
                    unint64_t v1580 = (v1577 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                    unint64_t v1581 = (v1578 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                    LODWORD(v1572) = *(_DWORD *)v1581;
                    *(unsigned char *)(v1580 + 4) = *(unsigned char *)(v1581 + 4);
                    *(_DWORD *)unint64_t v1580 = v1572;
                    *(_OWORD *)((v1577 + 25) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v1578 + 25) & 0xFFFFFFFFFFFFFFF8);
                    unint64_t v1582 = v1550 + v2035;
                    long long v1583 = *(_OWORD *)(v1551 + v2035 + 112);
                    long long v1585 = *(_OWORD *)(v1551 + v2035 + 64);
                    long long v1584 = *(_OWORD *)(v1551 + v2035 + 80);
                    *(_OWORD *)(v1582 + 96) = *(_OWORD *)(v1551 + v2035 + 96);
                    *(_OWORD *)(v1582 + 112) = v1583;
                    *(_OWORD *)(v1582 + 64) = v1585;
                    *(_OWORD *)(v1582 + 80) = v1584;
                    long long v1586 = *(_OWORD *)(v1551 + v2035 + 176);
                    long long v1588 = *(_OWORD *)(v1551 + v2035 + 128);
                    long long v1587 = *(_OWORD *)(v1551 + v2035 + 144);
                    *(_OWORD *)(v1582 + 160) = *(_OWORD *)(v1551 + v2035 + 160);
                    *(_OWORD *)(v1582 + 176) = v1586;
                    *(_OWORD *)(v1582 + 128) = v1588;
                    *(_OWORD *)(v1582 + 144) = v1587;
                    long long v1590 = *(_OWORD *)(v1551 + v2035 + 208);
                    long long v1589 = *(_OWORD *)(v1551 + v2035 + 224);
                    long long v1591 = *(_OWORD *)(v1551 + v2035 + 192);
                    *(void *)(v1582 + 240) = *(void *)(v1551 + v2035 + 240);
                    *(_OWORD *)(v1582 + 208) = v1590;
                    *(_OWORD *)(v1582 + 224) = v1589;
                    *(_OWORD *)(v1582 + 192) = v1591;
                    long long v1592 = *(_OWORD *)(v1551 + v2035);
                    long long v1593 = *(_OWORD *)(v1551 + v2035 + 16);
                    long long v1594 = *(_OWORD *)(v1551 + v2035 + 48);
                    *(_OWORD *)(v1582 + 32) = *(_OWORD *)(v1551 + v2035 + 32);
                    *(_OWORD *)(v1582 + 48) = v1594;
                    *(_OWORD *)unint64_t v1582 = v1592;
                    *(_OWORD *)(v1582 + 16) = v1593;
                    size_t v1595 = (_OWORD *)((v1550 + v2035 + 255) & 0xFFFFFFFFFFFFFFF8);
                    uint64_t v1596 = (long long *)((v1551 + v2035 + 255) & 0xFFFFFFFFFFFFFFF8);
                    long long v1597 = *v1596;
                    *(_OWORD *)((char *)v1595 + 9) = *(long long *)((char *)v1596 + 9);
                    *size_t v1595 = v1597;
                    unint64_t v1598 = (v1550 + v2035 + 287) & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v1599 = (v1551 + v2035 + 287) & 0xFFFFFFFFFFFFFFF8;
                    long long v1600 = *(_OWORD *)v1599;
                    *(unsigned char *)(v1598 + 16) = *(unsigned char *)(v1599 + 16);
                    *(_OWORD *)unint64_t v1598 = v1600;
                    unint64_t v1601 = (void *)((v1550 + v2035 + 311) & 0xFFFFFFFFFFFFFFF8);
                    unint64_t v1602 = (void *)((v1551 + v2035 + 311) & 0xFFFFFFFFFFFFFFF8);
                    *unint64_t v1601 = *v1602;
                    *(_OWORD *)(((unint64_t)v1601 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1602 + 15) & 0xFFFFFFFFFFFFFFF8);
                    size_t v1541 = v1992;
                    unint64_t v1538 = (unint64_t)&a1[v1935] & v1960;
                    if (!v1982) {
                      goto LABEL_2186;
                    }
LABEL_2192:
                    unint64_t v1603 = ((((v1540
                              + ((((((((((v1345 + v1541) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                                  + 19) & 0xFFFFFFFFFFFFFFF8)
                                + 25) & 0xFFFFFFFFFFFFFFF8)
                              + 327) & 0xFFFFFFFFFFFFFFF8)
                            + 15) & 0xFFFFFFFFFFFFFFF8)
                          + 16;
                    unsigned int v1604 = (void *)((v1538 + v2041 + v1603) & v1991);
                    unsigned int v1605 = (const void *)(((unint64_t)v2054 + v2041 + v1603) & v1991);
                    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1344 + 48))(v1605, 1, AssociatedTypeWitness))
                    {
                      memcpy(v1604, v1605, __n);
                    }
                    else
                    {
                      (*(void (**)(void *, const void *, uint64_t))(v1344 + 32))(v1604, v1605, AssociatedTypeWitness);
                      (*(void (**)(void *, void, uint64_t, uint64_t))(v1344 + 56))(v1604, 0, 1, AssociatedTypeWitness);
                    }
                    unint64_t v68 = v1914;
                    unsigned int v1606 = (char *)(((unint64_t)v1604 + v1933) & v2002);
                    unsigned int v1607 = (char *)(((unint64_t)v1605 + v1933) & v2002);
                    if (v1966 == v1968)
                    {
                      int v1608 = (*(uint64_t (**)(char *))(v1984 + 48))(v1607);
                    }
                    else
                    {
                      unint64_t v1609 = (uint64_t *)((unint64_t)&v1607[v1987] & 0xFFFFFFFFFFFFFFF8);
                      if (v1951 <= 0x7FFFFFFE)
                      {
                        uint64_t v1610 = *v1609;
                        if ((unint64_t)*v1609 >= 0xFFFFFFFF) {
                          LODWORD(v1610) = -1;
                        }
                        if ((v1610 + 1) >= 2) {
                          goto LABEL_2204;
                        }
                        goto LABEL_2206;
                      }
                      int v1608 = (*(uint64_t (**)(unint64_t))(v1979 + 48))(((unint64_t)v1609 + v1976) & v1974);
                    }
                    if (v1608)
                    {
LABEL_2204:
                      memcpy(v1606, v1607, v2034);
LABEL_2207:
                      *(void *)&v1606[v2034] = *(void *)&v1607[v2034];
                      unint64_t v1615 = (void *)((unint64_t)&v1606[v2034 + 15] & 0xFFFFFFFFFFFFFFF8);
                      size_t v1616 = (void *)((unint64_t)&v1607[v2034 + 15] & 0xFFFFFFFFFFFFFFF8);
                      *unint64_t v1615 = *v1616;
                      *(void *)(((unint64_t)v1615 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v1616 + 15) & 0xFFFFFFFFFFFFFFF8);
                      char v1226 = 1;
                      unint64_t v752 = v1953;
                      char v1225 = 1;
LABEL_2267:
                      a1[v752] = v1226;
                      a1[v1918] = v1225;
                      if (v1210 > 3)
                      {
LABEL_2268:
                        *unint64_t v68 = 27;
                        return a1;
                      }
                      unsigned int v1899 = ((1 << (8 * v1210)) + 5) >> (8 * v1210);
                      if (v1899 <= 0xFFD6)
                      {
                        if (v1899 > 0xD6)
                        {
                          *(_WORD *)unint64_t v68 = 27;
                          return a1;
                        }
                        goto LABEL_2268;
                      }
                      int v571 = 27;
LABEL_2273:
                      *(_DWORD *)unint64_t v68 = v571;
                      return a1;
                    }
                    unint64_t v1609 = (uint64_t *)((unint64_t)&v1607[v1987] & 0xFFFFFFFFFFFFFFF8);
LABEL_2206:
                    (*(void (**)(char *, char *, uint64_t))(v1984 + 32))(v1606, v1607, v1983);
                    unint64_t v1611 = (void *)((unint64_t)&v1606[v1987] & 0xFFFFFFFFFFFFFFF8);
                    void *v1611 = *v1609;
                    unint64_t v1612 = ((unint64_t)v1611 + v1976) & v1974;
                    (*(void (**)(unint64_t, unint64_t, uint64_t))(v1979 + 32))(v1612, ((unint64_t)v1609 + v1976) & v1974, v1978);
                    size_t v1613 = (void *)((v1972 + v1612) & 0xFFFFFFFFFFFFFFF8);
                    uint64_t v1614 = (void *)((v1972 + (((unint64_t)v1609 + v1976) & v1974)) & 0xFFFFFFFFFFFFFFF8);
                    *size_t v1613 = *v1614;
                    *(_OWORD *)(((unint64_t)v1613 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1614 + 15) & 0xFFFFFFFFFFFFFFF8);
                    goto LABEL_2207;
                  case 2u:
                    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v364 + 32))(a1, v77, v72);
                    unint64_t v1219 = (void *)((unint64_t)&a1[v1929] & v1991);
                    unint64_t v1220 = (const void *)((unint64_t)&v77[v1929] & v1991);
                    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v2040 + 48))(v1220, 1, v73))
                    {
                      memcpy(v1219, v1220, __n);
                    }
                    else
                    {
                      (*(void (**)(void *, const void *, uint64_t))(v2040 + 32))(v1219, v1220, v73);
                      (*(void (**)(void *, void, uint64_t, uint64_t))(v2040 + 56))(v1219, 0, 1, v73);
                    }
                    v1310 = (char *)(((unint64_t)v1219 + v1933) & v2002);
                    unint64_t v1311 = (char *)(((unint64_t)v1220 + v1933) & v2002);
                    if (v1966 == v1968)
                    {
                      int v1312 = (*(uint64_t (**)(char *))(v1984 + 48))(v1311);
                    }
                    else
                    {
                      uint64_t v1313 = (uint64_t *)((unint64_t)&v1311[v1987] & 0xFFFFFFFFFFFFFFF8);
                      if (v1951 <= 0x7FFFFFFE)
                      {
                        uint64_t v1314 = *v1313;
                        if ((unint64_t)*v1313 >= 0xFFFFFFFF) {
                          LODWORD(v1314) = -1;
                        }
                        if ((v1314 + 1) >= 2) {
                          goto LABEL_1951;
                        }
                        goto LABEL_1953;
                      }
                      int v1312 = (*(uint64_t (**)(unint64_t))(v1979 + 48))(((unint64_t)v1313 + v1976) & v1974);
                    }
                    if (v1312)
                    {
LABEL_1951:
                      memcpy(v1310, v1311, v2034);
LABEL_1954:
                      size_t v1362 = &v1310[v2034];
                      *size_t v1362 = v1311[v2034];
                      *((void *)v1362 + 1) = *(void *)&v1311[v2034 + 8];
                      char v1225 = 1;
                      char v1226 = 2;
                      goto LABEL_1955;
                    }
                    uint64_t v1313 = (uint64_t *)((unint64_t)&v1311[v1987] & 0xFFFFFFFFFFFFFFF8);
LABEL_1953:
                    (*(void (**)(char *, char *, uint64_t))(v1984 + 32))(v1310, v1311, v1983);
                    size_t v1358 = (void *)((unint64_t)&v1310[v1987] & 0xFFFFFFFFFFFFFFF8);
                    void *v1358 = *v1313;
                    unint64_t v1359 = ((unint64_t)v1358 + v1976) & v1974;
                    (*(void (**)(unint64_t, unint64_t, uint64_t))(v1979 + 32))(v1359, ((unint64_t)v1313 + v1976) & v1974, v1978);
                    int v1360 = (void *)((v1972 + v1359) & 0xFFFFFFFFFFFFFFF8);
                    long long v1361 = (void *)((v1972 + (((unint64_t)v1313 + v1976) & v1974)) & 0xFFFFFFFFFFFFFFF8);
                    void *v1360 = *v1361;
                    *(_OWORD *)(((unint64_t)v1360 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1361 + 15) & 0xFFFFFFFFFFFFFFF8);
                    goto LABEL_1954;
                  case 3u:
                    unsigned int v1913 = v68;
                    unint64_t v1221 = v77;
                    unint64_t v1222 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v364 + 32);
                    v1222(a1, v1221, v72);
                    unint64_t v1223 = (void *)((unint64_t)&v1221[v1935] & v1960);
                    if (v1965 == v1970)
                    {
                      int v1224 = (*(uint64_t (**)(unint64_t))(v364 + 48))((unint64_t)&v1221[v1935] & v1960);
LABEL_2209:
                      unint64_t v1349 = v2007 + 7;
                      size_t v1348 = (void *)((unint64_t)&a1[v1935] & v1960);
                      goto LABEL_2210;
                    }
                    unint64_t v1302 = ((unint64_t)v1223 + v1989) & v2005;
                    unint64_t v1303 = (v1961 + v1302) & v2006;
                    if (v1969 == v1970)
                    {
                      if (v1967 == v1969)
                      {
                        int v1224 = (*(uint64_t (**)(unint64_t))(v1986 + 48))((v1961 + v1302) & v2006);
                        goto LABEL_2209;
                      }
                      unint64_t v1384 = (unint64_t *)((v1988 + v1303) & 0xFFFFFFFFFFFFFFF8);
                      if (v1952 > 0x7FFFFFFE)
                      {
                        int v1224 = (*(uint64_t (**)(unint64_t))(v1981 + 48))(((unint64_t)v1384
                                                                                          + v1977) & v1975);
                        goto LABEL_2209;
                      }
                      unint64_t v1385 = *v1384;
                      if (v1385 >= 0xFFFFFFFF) {
                        LODWORD(v1385) = -1;
                      }
                      unint64_t v1349 = v2007 + 7;
                      size_t v1348 = (void *)((unint64_t)&a1[v1935] & v1960);
                      if ((v1385 + 1) >= 2) {
                        goto LABEL_2211;
                      }
                    }
                    else
                    {
                      unint64_t v1347 = v1303 + v1995;
                      unint64_t v1349 = v2007 + 7;
                      size_t v1348 = (void *)((unint64_t)&a1[v1935] & v1960);
                      if ((v1947 & 0x80000000) == 0)
                      {
                        unint64_t v1350 = *(void *)(v1347 + 8);
                        if (v1350 >= 0xFFFFFFFF) {
                          LODWORD(v1350) = -1;
                        }
                        int v1224 = v1350 + 1;
                        goto LABEL_2210;
                      }
                      uint64_t v1406 = (v1999 + ((v2036 + v1347) & v1998)) & v2000;
                      if (v1982 > 0x7FFFFFFD)
                      {
                        int v1224 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v2001 + 48))(v1406, v1982, v2003);
LABEL_2210:
                        if (v1224)
                        {
LABEL_2211:
                          memcpy(v1348, v1223, v66);
                          size_t v1617 = v2039;
                          uint64_t v1618 = v1949;
                          unint64_t v752 = v1953;
LABEL_2212:
                          size_t v1619 = v1617;
                          goto LABEL_2218;
                        }
                        unint64_t v1302 = ((unint64_t)v1223 + v1989) & v2005;
                        unint64_t v1303 = (v1961 + v1302) & v2006;
                        goto LABEL_2214;
                      }
                      unint64_t v1909 = *(void *)(((v1964 + ((v1996 + v1406) & v2000)) & 0xFFFFFFFFFFFFFFF8) + 8);
                      if (v1909 >= 0xFFFFFFFF) {
                        LODWORD(v1909) = -1;
                      }
                      if ((v1909 + 1) >= 2) {
                        goto LABEL_2211;
                      }
                    }
LABEL_2214:
                    v1222((unsigned __int8 *)v1348, (unsigned __int8 *)v1223, v2033);
                    unint64_t v1620 = ((unint64_t)v1348 + v1989) & v2005;
                    v1222((unsigned __int8 *)v1620, (unsigned __int8 *)v1302, v2033);
                    unint64_t v1621 = (v1961 + v1620) & v2006;
                    (*(void (**)(unint64_t, unint64_t, uint64_t))(v1986 + 32))(v1621, v1303, v1985);
                    unsigned int v1622 = (void *)((v1988 + v1621) & 0xFFFFFFFFFFFFFFF8);
                    unsigned int v1623 = (void *)((v1988 + v1303) & 0xFFFFFFFFFFFFFFF8);
                    *unsigned int v1622 = *v1623;
                    unint64_t v1624 = ((unint64_t)v1622 + v1977) & v1975;
                    unint64_t v1625 = ((unint64_t)v1623 + v1977) & v1975;
                    (*(void (**)(unint64_t, unint64_t, uint64_t))(v1981 + 32))(v1624, v1625, v1980);
                    unint64_t v1626 = (void *)((v1973 + v1624) & 0xFFFFFFFFFFFFFFF8);
                    uint64_t v1627 = (void *)((v1973 + v1625) & 0xFFFFFFFFFFFFFFF8);
                    *unint64_t v1626 = *v1627;
                    *(_OWORD *)(((unint64_t)v1626 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1627 + 15) & 0xFFFFFFFFFFFFFFF8);
                    *(_OWORD *)(v1621 + v1995) = *(_OWORD *)(v1303 + v1995);
                    unint64_t v1628 = (v2036 + v1621 + v1995) & v1998;
                    unint64_t v1629 = (v2036 + v1303 + v1995) & v1998;
                    *(unsigned char *)unint64_t v1628 = *(unsigned char *)v1629;
                    uint64_t v1630 = v1628 | 4;
                    int v1631 = *(_DWORD *)(v1629 | 4);
                    *(unsigned char *)(v1630 + 4) = *(unsigned char *)((v1629 | 4) + 4);
                    *(_DWORD *)uint64_t v1630 = v1631;
                    *(_WORD *)(v1628 + 10) = *(_WORD *)(v1629 + 0xA);
                    uint64_t v1632 = *(void (**)(unint64_t, unint64_t, uint64_t))(v2001 + 32);
                    v1632((v1999 + v1628) & v2000, (v1999 + v1629) & v2000, v2003);
                    unint64_t v1633 = (v1996 + ((v1999 + v1628) & v2000)) & v2000;
                    unint64_t v1634 = (v1996 + ((v1999 + v1629) & v2000)) & v2000;
                    v1632(v1633, v1634, v2003);
                    uint64_t v1635 = (unsigned char *)(v1633 + v1992);
                    unsigned char *v1635 = *(unsigned char *)(v1634 + v1992);
                    v1635[1] = *(unsigned char *)(v1634 + v1992 + 1);
                    v1635[2] = *(unsigned char *)(v1634 + v1992 + 2);
                    v1635[3] = *(unsigned char *)(v1634 + v1992 + 3);
                    v1635[4] = *(unsigned char *)(v1634 + v1992 + 4);
                    unint64_t v1636 = (v1633 + v1992 + 12) & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v1637 = (v1634 + v1992 + 12) & 0xFFFFFFFFFFFFFFF8;
                    *(_OWORD *)unint64_t v1636 = *(_OWORD *)v1637;
                    *(unsigned char *)(v1636 + 16) = *(unsigned char *)(v1637 + 16);
                    *(unsigned char *)(v1636 + 17) = *(unsigned char *)(v1637 + 17);
                    *(unsigned char *)(v1636 + 18) = *(unsigned char *)(v1637 + 18);
                    *(unsigned char *)(v1636 + 19) = *(unsigned char *)(v1637 + 19);
                    unint64_t v1638 = (v1636 + 27) & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v1639 = (v1637 + 27) & 0xFFFFFFFFFFFFFFF8;
                    *(void *)unint64_t v1638 = *(void *)v1639;
                    *(unsigned char *)(v1638 + 8) = *(unsigned char *)(v1639 + 8);
                    *(unsigned char *)(v1638 + 9) = *(unsigned char *)(v1639 + 9);
                    *(unsigned char *)(v1638 + 10) = *(unsigned char *)(v1639 + 10);
                    *(unsigned char *)(v1638 + 11) = *(unsigned char *)(v1639 + 11);
                    *(unsigned char *)(v1638 + 12) = *(unsigned char *)(v1639 + 12);
                    uint64_t v1640 = (void *)((v1637 + 47) & 0xFFFFFFFFFFFFFFF8);
                    uint64_t v1641 = (void *)((v1636 + 47) & 0xFFFFFFFFFFFFFFF8);
                    void *v1641 = *v1640;
                    unint64_t v1642 = ((unint64_t)v1641 + 15) & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v1643 = ((unint64_t)v1640 + 15) & 0xFFFFFFFFFFFFFFF8;
                    *(void *)unint64_t v1642 = *(void *)v1643;
                    *(unsigned char *)(v1642 + 8) = *(unsigned char *)(v1643 + 8);
                    *(unsigned char *)(v1642 + 9) = *(unsigned char *)(v1643 + 9);
                    uint64_t v1644 = (void *)((v1993 + v1642) & v2000);
                    uint64_t v1645 = (const void *)((v1993 + v1643) & v2000);
                    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v2001 + 48))(v1645, 1, v2003))
                    {
                      size_t v1617 = v2039;
                      memcpy(v1644, v1645, v2039);
                    }
                    else
                    {
                      v1632((unint64_t)v1644, (unint64_t)v1645, v2003);
                      (*(void (**)(void *, void, uint64_t, uint64_t))(v2001 + 56))(v1644, 0, 1, v2003);
                      size_t v1617 = v2039;
                    }
                    uint64_t v1618 = v1949;
                    unint64_t v1349 = v2007 + 7;
                    uint64_t v1646 = (void *)(((unint64_t)v1644 + v1994) & 0xFFFFFFFFFFFFFFF8);
                    uint64_t v1647 = (void *)(((unint64_t)v1645 + v1994) & 0xFFFFFFFFFFFFFFF8);
                    *uint64_t v1646 = *v1647;
                    unint64_t v1648 = ((unint64_t)v1646 + 15) & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v1649 = ((unint64_t)v1647 + 15) & 0xFFFFFFFFFFFFFFF8;
                    uint64_t v1650 = *(void *)v1649;
                    *(unsigned char *)(v1648 + 8) = *(unsigned char *)(v1649 + 8);
                    *(void *)unint64_t v1648 = v1650;
                    uint64_t v1651 = (void *)(((unint64_t)v1646 + 31) & 0xFFFFFFFFFFFFFFF8);
                    uint64_t v1652 = (void *)(((unint64_t)v1647 + 31) & 0xFFFFFFFFFFFFFFF8);
                    *uint64_t v1651 = *v1652;
                    uint64_t v1653 = (_OWORD *)(((unint64_t)v1651 + 15) & 0xFFFFFFFFFFFFFFF8);
                    unint64_t v1654 = (_OWORD *)(((unint64_t)v1652 + 15) & 0xFFFFFFFFFFFFFFF8);
                    *uint64_t v1653 = *v1654;
                    unint64_t v1655 = ((unint64_t)v1653 + 19) & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v1656 = ((unint64_t)v1654 + 19) & 0xFFFFFFFFFFFFFFF8;
                    uint64_t v1657 = *(void *)v1656;
                    *(unsigned char *)(v1655 + 8) = *(unsigned char *)(v1656 + 8);
                    *(void *)unint64_t v1655 = v1657;
                    *(unsigned char *)(v1655 + 9) = *(unsigned char *)(v1656 + 9);
                    unint64_t v1658 = (v1655 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                    unint64_t v1659 = (v1656 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                    LODWORD(v1650) = *(_DWORD *)v1659;
                    *(unsigned char *)(v1658 + 4) = *(unsigned char *)(v1659 + 4);
                    *(_DWORD *)unint64_t v1658 = v1650;
                    *(_OWORD *)((v1655 + 25) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v1656 + 25) & 0xFFFFFFFFFFFFFFF8);
                    unint64_t v1660 = v1628 + v2035;
                    long long v1661 = *(_OWORD *)(v1629 + v2035 + 112);
                    long long v1663 = *(_OWORD *)(v1629 + v2035 + 64);
                    long long v1662 = *(_OWORD *)(v1629 + v2035 + 80);
                    *(_OWORD *)(v1660 + 96) = *(_OWORD *)(v1629 + v2035 + 96);
                    *(_OWORD *)(v1660 + 112) = v1661;
                    *(_OWORD *)(v1660 + 64) = v1663;
                    *(_OWORD *)(v1660 + 80) = v1662;
                    long long v1664 = *(_OWORD *)(v1629 + v2035 + 176);
                    long long v1666 = *(_OWORD *)(v1629 + v2035 + 128);
                    long long v1665 = *(_OWORD *)(v1629 + v2035 + 144);
                    *(_OWORD *)(v1660 + 160) = *(_OWORD *)(v1629 + v2035 + 160);
                    *(_OWORD *)(v1660 + 176) = v1664;
                    *(_OWORD *)(v1660 + 128) = v1666;
                    *(_OWORD *)(v1660 + 144) = v1665;
                    long long v1668 = *(_OWORD *)(v1629 + v2035 + 208);
                    long long v1667 = *(_OWORD *)(v1629 + v2035 + 224);
                    long long v1669 = *(_OWORD *)(v1629 + v2035 + 192);
                    *(void *)(v1660 + 240) = *(void *)(v1629 + v2035 + 240);
                    *(_OWORD *)(v1660 + 208) = v1668;
                    *(_OWORD *)(v1660 + 224) = v1667;
                    *(_OWORD *)(v1660 + 192) = v1669;
                    long long v1670 = *(_OWORD *)(v1629 + v2035);
                    long long v1671 = *(_OWORD *)(v1629 + v2035 + 16);
                    long long v1672 = *(_OWORD *)(v1629 + v2035 + 48);
                    *(_OWORD *)(v1660 + 32) = *(_OWORD *)(v1629 + v2035 + 32);
                    *(_OWORD *)(v1660 + 48) = v1672;
                    *(_OWORD *)unint64_t v1660 = v1670;
                    *(_OWORD *)(v1660 + 16) = v1671;
                    uint64_t v1673 = (_OWORD *)((v1628 + v2035 + 255) & 0xFFFFFFFFFFFFFFF8);
                    uint64_t v1674 = (long long *)((v1629 + v2035 + 255) & 0xFFFFFFFFFFFFFFF8);
                    long long v1675 = *v1674;
                    *(_OWORD *)((char *)v1673 + 9) = *(long long *)((char *)v1674 + 9);
                    *uint64_t v1673 = v1675;
                    unint64_t v1676 = (v1628 + v2035 + 287) & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v1677 = (v1629 + v2035 + 287) & 0xFFFFFFFFFFFFFFF8;
                    long long v1678 = *(_OWORD *)v1677;
                    *(unsigned char *)(v1676 + 16) = *(unsigned char *)(v1677 + 16);
                    *(_OWORD *)unint64_t v1676 = v1678;
                    uint64_t v1679 = (void *)((v1628 + v2035 + 311) & 0xFFFFFFFFFFFFFFF8);
                    unsigned int v1680 = (void *)((v1629 + v2035 + 311) & 0xFFFFFFFFFFFFFFF8);
                    *uint64_t v1679 = *v1680;
                    *(_OWORD *)(((unint64_t)v1679 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1680 + 15) & 0xFFFFFFFFFFFFFFF8);
                    size_t v1619 = v1992;
                    unint64_t v752 = v1953;
                    size_t v1348 = (void *)((unint64_t)&a1[v1935] & v1960);
                    if (!v1982) {
                      goto LABEL_2212;
                    }
LABEL_2218:
                    unint64_t v1681 = ((((v1618
                              + ((((((((((v1349 + v1619) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                                  + 19) & 0xFFFFFFFFFFFFFFF8)
                                + 25) & 0xFFFFFFFFFFFFFFF8)
                              + 327) & 0xFFFFFFFFFFFFFFF8)
                            + 15) & 0xFFFFFFFFFFFFFFF8)
                          + 16;
                    unint64_t v1682 = (_OWORD *)(((unint64_t)v1348 + v1681) & 0xFFFFFFFFFFFFFFF8);
                    unint64_t v1683 = (_OWORD *)(((unint64_t)v1223 + v1681) & 0xFFFFFFFFFFFFFFF8);
                    *unint64_t v1682 = *v1683;
                    *(void *)(((unint64_t)v1682 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v1683 + 23) & 0xFFFFFFFFFFFFFFF8);
                    char v1225 = 1;
LABEL_2265:
                    char v1226 = 3;
LABEL_2266:
                    unint64_t v68 = v1913;
                    goto LABEL_2267;
                  case 4u:
                    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v364 + 32))(a1, v77, v72);
                    char v1225 = 1;
                    char v1226 = 4;
                    goto LABEL_1955;
                  case 5u:
                    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v364 + 32))(a1, v77, v72);
                    char v1225 = 1;
                    char v1226 = 5;
                    goto LABEL_1955;
                  case 6u:
                    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v364 + 32))(a1, v77, v72);
                    size_t v1227 = (void *)((unint64_t)&a1[v1928] & v1926);
                    unint64_t v1228 = (const void *)((unint64_t)&v77[v1928] & v1926);
                    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1931 + 48))(v1228, 1, v2014))
                    {
                      memcpy(v1227, v1228, v1924);
                      char v1225 = 1;
                    }
                    else
                    {
                      (*(void (**)(void *, const void *, uint64_t))(v1931 + 32))(v1227, v1228, v2014);
                      char v1225 = 1;
                      (*(void (**)(void *, void, uint64_t, uint64_t))(v1931 + 56))(v1227, 0, 1, v2014);
                    }
                    char v1226 = 6;
                    goto LABEL_1955;
                  case 7u:
                    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v364 + 32))(a1, v77, v72);
                    char v1225 = 1;
                    char v1226 = 7;
LABEL_1955:
                    unint64_t v752 = v1953;
                    goto LABEL_2267;
                  default:
                    size_t v1211 = v77;
                    uint64_t v1212 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v364 + 32);
                    v1212(a1, v1211, v72);
                    int v1213 = (void *)((unint64_t)&v1211[v1935] & v1960);
                    unsigned int v1913 = v68;
                    if (v1965 == v1970)
                    {
                      int v1214 = (*(uint64_t (**)(unint64_t))(v364 + 48))((unint64_t)&v1211[v1935] & v1960);
                    }
                    else
                    {
                      unint64_t v1298 = ((unint64_t)v1213 + v1989) & v2005;
                      unint64_t v1299 = (v1961 + v1298) & v2006;
                      if (v1969 != v1970)
                      {
                        unint64_t v1339 = v1299 + v1995;
                        unint64_t v1341 = v2007 + 7;
                        unint64_t v1340 = (void *)((unint64_t)&a1[v1935] & v1960);
                        if ((v1947 & 0x80000000) != 0)
                        {
                          uint64_t v1404 = (v1999 + ((v2036 + v1339) & v1998)) & v2000;
                          if (v1982 <= 0x7FFFFFFD)
                          {
                            unint64_t v1907 = *(void *)(((v1964 + ((v1996 + v1404) & v2000)) & 0xFFFFFFFFFFFFFFF8) + 8);
                            if (v1907 >= 0xFFFFFFFF) {
                              LODWORD(v1907) = -1;
                            }
                            if ((v1907 + 1) >= 2) {
                              goto LABEL_2174;
                            }
                            goto LABEL_2177;
                          }
                          int v1214 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v2001 + 48))(v1404, v1982, v2003);
                        }
                        else
                        {
                          unint64_t v1342 = *(void *)(v1339 + 8);
                          if (v1342 >= 0xFFFFFFFF) {
                            LODWORD(v1342) = -1;
                          }
                          int v1214 = v1342 + 1;
                        }
                        goto LABEL_2173;
                      }
                      if (v1967 == v1969)
                      {
                        int v1214 = (*(uint64_t (**)(unint64_t))(v1986 + 48))((v1961 + v1298) & v2006);
                      }
                      else
                      {
                        unint64_t v1380 = (unint64_t *)((v1988 + v1299) & 0xFFFFFFFFFFFFFFF8);
                        if (v1952 <= 0x7FFFFFFE)
                        {
                          unint64_t v1381 = *v1380;
                          if (v1381 >= 0xFFFFFFFF) {
                            LODWORD(v1381) = -1;
                          }
                          unint64_t v1341 = v2007 + 7;
                          unint64_t v1340 = (void *)((unint64_t)&a1[v1935] & v1960);
                          if ((v1381 + 1) >= 2) {
                            goto LABEL_2174;
                          }
                          goto LABEL_2177;
                        }
                        int v1214 = (*(uint64_t (**)(unint64_t))(v1981 + 48))(((unint64_t)v1380
                                                                                          + v1977) & v1975);
                      }
                    }
                    unint64_t v1341 = v2007 + 7;
                    unint64_t v1340 = (void *)((unint64_t)&a1[v1935] & v1960);
LABEL_2173:
                    if (v1214)
                    {
LABEL_2174:
                      memcpy(v1340, v1213, v66);
                      size_t v1471 = v2039;
                      uint64_t v1472 = v1949;
                      unint64_t v752 = v1953;
                      goto LABEL_2175;
                    }
                    unint64_t v1298 = ((unint64_t)v1213 + v1989) & v2005;
                    unint64_t v1299 = (v1961 + v1298) & v2006;
LABEL_2177:
                    v1212((unsigned __int8 *)v1340, (unsigned __int8 *)v1213, v2033);
                    unint64_t v1474 = ((unint64_t)v1340 + v1989) & v2005;
                    v1212((unsigned __int8 *)v1474, (unsigned __int8 *)v1298, v2033);
                    unint64_t v1475 = (v1961 + v1474) & v2006;
                    (*(void (**)(unint64_t, unint64_t, uint64_t))(v1986 + 32))(v1475, v1299, v1985);
                    unint64_t v1476 = (void *)((v1988 + v1475) & 0xFFFFFFFFFFFFFFF8);
                    long long v1477 = (void *)((v1988 + v1299) & 0xFFFFFFFFFFFFFFF8);
                    *unint64_t v1476 = *v1477;
                    unint64_t v1478 = ((unint64_t)v1476 + v1977) & v1975;
                    unint64_t v1479 = ((unint64_t)v1477 + v1977) & v1975;
                    (*(void (**)(unint64_t, unint64_t, uint64_t))(v1981 + 32))(v1478, v1479, v1980);
                    unint64_t v1480 = (void *)((v1973 + v1478) & 0xFFFFFFFFFFFFFFF8);
                    unint64_t v1481 = (void *)((v1973 + v1479) & 0xFFFFFFFFFFFFFFF8);
                    *unint64_t v1480 = *v1481;
                    *(_OWORD *)(((unint64_t)v1480 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1481 + 15) & 0xFFFFFFFFFFFFFFF8);
                    *(_OWORD *)(v1475 + v1995) = *(_OWORD *)(v1299 + v1995);
                    unint64_t v1482 = (v2036 + v1475 + v1995) & v1998;
                    unint64_t v1483 = (v2036 + v1299 + v1995) & v1998;
                    *(unsigned char *)unint64_t v1482 = *(unsigned char *)v1483;
                    uint64_t v1484 = v1482 | 4;
                    int v1485 = *(_DWORD *)(v1483 | 4);
                    *(unsigned char *)(v1484 + 4) = *(unsigned char *)((v1483 | 4) + 4);
                    *(_DWORD *)uint64_t v1484 = v1485;
                    *(_WORD *)(v1482 + 10) = *(_WORD *)(v1483 + 0xA);
                    uint64_t v1486 = *(void (**)(unint64_t, unint64_t, uint64_t))(v2001 + 32);
                    v1486((v1999 + v1482) & v2000, (v1999 + v1483) & v2000, v2003);
                    unint64_t v1487 = (v1996 + ((v1999 + v1482) & v2000)) & v2000;
                    unint64_t v1488 = (v1996 + ((v1999 + v1483) & v2000)) & v2000;
                    v1486(v1487, v1488, v2003);
                    size_t v1489 = (unsigned char *)(v1487 + v1992);
                    *size_t v1489 = *(unsigned char *)(v1488 + v1992);
                    v1489[1] = *(unsigned char *)(v1488 + v1992 + 1);
                    v1489[2] = *(unsigned char *)(v1488 + v1992 + 2);
                    v1489[3] = *(unsigned char *)(v1488 + v1992 + 3);
                    v1489[4] = *(unsigned char *)(v1488 + v1992 + 4);
                    unint64_t v1490 = (v1487 + v1992 + 12) & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v1491 = (v1488 + v1992 + 12) & 0xFFFFFFFFFFFFFFF8;
                    *(_OWORD *)unint64_t v1490 = *(_OWORD *)v1491;
                    *(unsigned char *)(v1490 + 16) = *(unsigned char *)(v1491 + 16);
                    *(unsigned char *)(v1490 + 17) = *(unsigned char *)(v1491 + 17);
                    *(unsigned char *)(v1490 + 18) = *(unsigned char *)(v1491 + 18);
                    *(unsigned char *)(v1490 + 19) = *(unsigned char *)(v1491 + 19);
                    unint64_t v1492 = (v1490 + 27) & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v1493 = (v1491 + 27) & 0xFFFFFFFFFFFFFFF8;
                    *(void *)unint64_t v1492 = *(void *)v1493;
                    *(unsigned char *)(v1492 + 8) = *(unsigned char *)(v1493 + 8);
                    *(unsigned char *)(v1492 + 9) = *(unsigned char *)(v1493 + 9);
                    *(unsigned char *)(v1492 + 10) = *(unsigned char *)(v1493 + 10);
                    *(unsigned char *)(v1492 + 11) = *(unsigned char *)(v1493 + 11);
                    *(unsigned char *)(v1492 + 12) = *(unsigned char *)(v1493 + 12);
                    v1494 = (void *)((v1491 + 47) & 0xFFFFFFFFFFFFFFF8);
                    unint64_t v1495 = (void *)((v1490 + 47) & 0xFFFFFFFFFFFFFFF8);
                    *unint64_t v1495 = *v1494;
                    unint64_t v1496 = ((unint64_t)v1495 + 15) & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v1497 = ((unint64_t)v1494 + 15) & 0xFFFFFFFFFFFFFFF8;
                    *(void *)unint64_t v1496 = *(void *)v1497;
                    *(unsigned char *)(v1496 + 8) = *(unsigned char *)(v1497 + 8);
                    *(unsigned char *)(v1496 + 9) = *(unsigned char *)(v1497 + 9);
                    uint64_t v1498 = (void *)((v1993 + v1496) & v2000);
                    size_t v1499 = (const void *)((v1993 + v1497) & v2000);
                    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v2001 + 48))(v1499, 1, v2003))
                    {
                      size_t v1471 = v2039;
                      memcpy(v1498, v1499, v2039);
                    }
                    else
                    {
                      v1486((unint64_t)v1498, (unint64_t)v1499, v2003);
                      (*(void (**)(void *, void, uint64_t, uint64_t))(v2001 + 56))(v1498, 0, 1, v2003);
                      size_t v1471 = v2039;
                    }
                    uint64_t v1472 = v1949;
                    unint64_t v1341 = v2007 + 7;
                    size_t v1500 = (void *)(((unint64_t)v1498 + v1994) & 0xFFFFFFFFFFFFFFF8);
                    unint64_t v1501 = (void *)(((unint64_t)v1499 + v1994) & 0xFFFFFFFFFFFFFFF8);
                    *size_t v1500 = *v1501;
                    unint64_t v1502 = ((unint64_t)v1500 + 15) & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v1503 = ((unint64_t)v1501 + 15) & 0xFFFFFFFFFFFFFFF8;
                    uint64_t v1504 = *(void *)v1503;
                    *(unsigned char *)(v1502 + 8) = *(unsigned char *)(v1503 + 8);
                    *(void *)unint64_t v1502 = v1504;
                    unint64_t v1505 = (void *)(((unint64_t)v1500 + 31) & 0xFFFFFFFFFFFFFFF8);
                    uint64_t v1506 = (void *)(((unint64_t)v1501 + 31) & 0xFFFFFFFFFFFFFFF8);
                    *unint64_t v1505 = *v1506;
                    unint64_t v1507 = (_OWORD *)(((unint64_t)v1505 + 15) & 0xFFFFFFFFFFFFFFF8);
                    size_t v1508 = (_OWORD *)(((unint64_t)v1506 + 15) & 0xFFFFFFFFFFFFFFF8);
                    *unint64_t v1507 = *v1508;
                    unint64_t v1509 = ((unint64_t)v1507 + 19) & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v1510 = ((unint64_t)v1508 + 19) & 0xFFFFFFFFFFFFFFF8;
                    uint64_t v1511 = *(void *)v1510;
                    *(unsigned char *)(v1509 + 8) = *(unsigned char *)(v1510 + 8);
                    *(void *)unint64_t v1509 = v1511;
                    *(unsigned char *)(v1509 + 9) = *(unsigned char *)(v1510 + 9);
                    unint64_t v1512 = (v1509 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                    unint64_t v1513 = (v1510 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                    LODWORD(v1504) = *(_DWORD *)v1513;
                    *(unsigned char *)(v1512 + 4) = *(unsigned char *)(v1513 + 4);
                    *(_DWORD *)unint64_t v1512 = v1504;
                    *(_OWORD *)((v1509 + 25) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v1510 + 25) & 0xFFFFFFFFFFFFFFF8);
                    unint64_t v1514 = v1482 + v2035;
                    long long v1515 = *(_OWORD *)(v1483 + v2035 + 112);
                    long long v1517 = *(_OWORD *)(v1483 + v2035 + 64);
                    long long v1516 = *(_OWORD *)(v1483 + v2035 + 80);
                    *(_OWORD *)(v1514 + 96) = *(_OWORD *)(v1483 + v2035 + 96);
                    *(_OWORD *)(v1514 + 112) = v1515;
                    *(_OWORD *)(v1514 + 64) = v1517;
                    *(_OWORD *)(v1514 + 80) = v1516;
                    long long v1518 = *(_OWORD *)(v1483 + v2035 + 176);
                    long long v1520 = *(_OWORD *)(v1483 + v2035 + 128);
                    long long v1519 = *(_OWORD *)(v1483 + v2035 + 144);
                    *(_OWORD *)(v1514 + 160) = *(_OWORD *)(v1483 + v2035 + 160);
                    *(_OWORD *)(v1514 + 176) = v1518;
                    *(_OWORD *)(v1514 + 128) = v1520;
                    *(_OWORD *)(v1514 + 144) = v1519;
                    long long v1522 = *(_OWORD *)(v1483 + v2035 + 208);
                    long long v1521 = *(_OWORD *)(v1483 + v2035 + 224);
                    long long v1523 = *(_OWORD *)(v1483 + v2035 + 192);
                    *(void *)(v1514 + 240) = *(void *)(v1483 + v2035 + 240);
                    *(_OWORD *)(v1514 + 208) = v1522;
                    *(_OWORD *)(v1514 + 224) = v1521;
                    *(_OWORD *)(v1514 + 192) = v1523;
                    long long v1524 = *(_OWORD *)(v1483 + v2035);
                    long long v1525 = *(_OWORD *)(v1483 + v2035 + 16);
                    long long v1526 = *(_OWORD *)(v1483 + v2035 + 48);
                    *(_OWORD *)(v1514 + 32) = *(_OWORD *)(v1483 + v2035 + 32);
                    *(_OWORD *)(v1514 + 48) = v1526;
                    *(_OWORD *)unint64_t v1514 = v1524;
                    *(_OWORD *)(v1514 + 16) = v1525;
                    unint64_t v1527 = (_OWORD *)((v1482 + v2035 + 255) & 0xFFFFFFFFFFFFFFF8);
                    unint64_t v1528 = (long long *)((v1483 + v2035 + 255) & 0xFFFFFFFFFFFFFFF8);
                    long long v1529 = *v1528;
                    *(_OWORD *)((char *)v1527 + 9) = *(long long *)((char *)v1528 + 9);
                    *unint64_t v1527 = v1529;
                    unint64_t v1530 = (v1482 + v2035 + 287) & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v1531 = (v1483 + v2035 + 287) & 0xFFFFFFFFFFFFFFF8;
                    long long v1532 = *(_OWORD *)v1531;
                    *(unsigned char *)(v1530 + 16) = *(unsigned char *)(v1531 + 16);
                    *(_OWORD *)unint64_t v1530 = v1532;
                    unint64_t v1533 = (void *)((v1482 + v2035 + 311) & 0xFFFFFFFFFFFFFFF8);
                    uint64_t v1534 = (void *)((v1483 + v2035 + 311) & 0xFFFFFFFFFFFFFFF8);
                    *unint64_t v1533 = *v1534;
                    *(_OWORD *)(((unint64_t)v1533 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1534 + 15) & 0xFFFFFFFFFFFFFFF8);
                    size_t v1473 = v1992;
                    unint64_t v752 = v1953;
                    unint64_t v1340 = (void *)((unint64_t)&a1[v1935] & v1960);
                    if (v1982)
                    {
LABEL_2181:
                      char v1226 = 0;
                      unint64_t v1535 = ((((v1472
                                + ((((((((((v1341 + v1473) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                                    + 19) & 0xFFFFFFFFFFFFFFF8)
                                  + 25) & 0xFFFFFFFFFFFFFFF8)
                                + 327) & 0xFFFFFFFFFFFFFFF8)
                              + 15) & 0xFFFFFFFFFFFFFFF8)
                            + 16;
                      unint64_t v1536 = (void *)(((unint64_t)v1340 + v1535) & 0xFFFFFFFFFFFFFFF8);
                      uint64_t v1537 = (void *)(((unint64_t)v1213 + v1535) & 0xFFFFFFFFFFFFFFF8);
                      void *v1536 = *v1537;
                      *(void *)(((unint64_t)v1536 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v1537 + 15) & 0xFFFFFFFFFFFFFFF8);
                      char v1225 = 1;
                      goto LABEL_2266;
                    }
LABEL_2175:
                    size_t v1473 = v1471;
                    goto LABEL_2181;
                }
              }
              unint64_t v752 = v1950;
              unsigned int v753 = v77[v1950];
              unsigned int v754 = v753 - 8;
              if (v753 >= 8)
              {
                if (v1950 <= 3) {
                  uint64_t v755 = v1950;
                }
                else {
                  uint64_t v755 = 4;
                }
                switch(v755)
                {
                  case 1:
                    int v756 = *v77;
                    goto LABEL_1717;
                  case 2:
                    int v756 = *(unsigned __int16 *)v77;
                    goto LABEL_1717;
                  case 3:
                    int v756 = *(unsigned __int16 *)v77 | (v77[2] << 16);
                    goto LABEL_1717;
                  case 4:
                    int v756 = *(_DWORD *)v77;
LABEL_1717:
                    if (v1950 < 4) {
                      unsigned int v753 = (v756 | (v754 << (8 * v1950))) + 8;
                    }
                    else {
                      unsigned int v753 = v756 + 8;
                    }
                    break;
                  default:
                    break;
                }
              }
              unsigned int v1210 = v67;
              switch(v753)
              {
                case 1u:
                  uint64_t v2012 = v2008 + 327;
                  unsigned int v1915 = v68;
                  unint64_t v1235 = v77;
                  int v1236 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v2040 + 32);
                  v1236(a1, v1235, v73);
                  v2059 = (void *)((unint64_t)&a1[v1936] & v2032);
                  unint64_t v1237 = (void *)((unint64_t)&v1235[v1936] & v2032);
                  if (v2030 == v1971)
                  {
                    int v1238 = (*(uint64_t (**)(unint64_t))(v2040 + 48))((unint64_t)&v1235[v1936] & v2032);
                  }
                  else
                  {
                    unint64_t v1306 = ((unint64_t)v1237 + v1990) & v1991;
                    unint64_t v1307 = (v1962 + v1306) & v2002;
                    if (v1968 != v1971)
                    {
                      size_t v1353 = v1307 + v2034;
                      unint64_t v1354 = v2007 + 7;
                      if ((v1948 & 0x80000000) != 0)
                      {
                        uint64_t v1408 = (v1999 + ((v2036 + v1353) & v1998)) & v2000;
                        if (v1982 <= 0x7FFFFFFD)
                        {
                          unint64_t v1910 = *(void *)(((v1964 + ((v1996 + v1408) & v2000)) & 0xFFFFFFFFFFFFFFF8) + 8);
                          if (v1910 >= 0xFFFFFFFF) {
                            LODWORD(v1910) = -1;
                          }
                          if ((v1910 + 1) >= 2) {
                            goto LABEL_2232;
                          }
                          goto LABEL_2235;
                        }
                        int v1238 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v2001 + 48))(v1408, v1982, v2003);
                      }
                      else
                      {
                        unint64_t v1355 = *(void *)(v1353 + 8);
                        if (v1355 >= 0xFFFFFFFF) {
                          LODWORD(v1355) = -1;
                        }
                        int v1238 = v1355 + 1;
                      }
                      goto LABEL_2231;
                    }
                    if (v1966 == v1968)
                    {
                      int v1238 = (*(uint64_t (**)(unint64_t))(v1984 + 48))((v1962 + v1306) & v2002);
                    }
                    else
                    {
                      unint64_t v1388 = (unint64_t *)((v1987 + v1307) & 0xFFFFFFFFFFFFFFF8);
                      if (v1951 <= 0x7FFFFFFE)
                      {
                        unint64_t v1389 = *v1388;
                        if (v1389 >= 0xFFFFFFFF) {
                          LODWORD(v1389) = -1;
                        }
                        unint64_t v1354 = v2007 + 7;
                        if ((v1389 + 1) >= 2) {
                          goto LABEL_2232;
                        }
                        goto LABEL_2235;
                      }
                      int v1238 = (*(uint64_t (**)(unint64_t))(v1979 + 48))(((unint64_t)v1388 + v1976) & v1974);
                    }
                  }
                  unint64_t v1354 = v2007 + 7;
LABEL_2231:
                  if (v1238)
                  {
LABEL_2232:
                    unint64_t v1752 = (unint64_t)&a1[v1936] & v2032;
                    memcpy(v2059, v1237, v2049);
                    size_t v1753 = v2039;
                    uint64_t v1754 = v2012;
LABEL_2233:
                    size_t v1755 = v1753;
                    goto LABEL_2239;
                  }
                  unint64_t v1306 = ((unint64_t)v1237 + v1990) & v1991;
                  unint64_t v1307 = (v1962 + v1306) & v2002;
LABEL_2235:
                  size_t v2055 = v1237;
                  v1236((unsigned __int8 *)v2059, (unsigned __int8 *)v1237, AssociatedTypeWitness);
                  unint64_t v1756 = ((unint64_t)v2059 + v1990) & v1991;
                  v1236((unsigned __int8 *)v1756, (unsigned __int8 *)v1306, AssociatedTypeWitness);
                  unint64_t v1757 = (v1962 + v1756) & v2002;
                  (*(void (**)(unint64_t, unint64_t, uint64_t))(v1984 + 32))(v1757, v1307, v1983);
                  uint64_t v1758 = (void *)((v1987 + v1757) & 0xFFFFFFFFFFFFFFF8);
                  unint64_t v1759 = (void *)((v1987 + v1307) & 0xFFFFFFFFFFFFFFF8);
                  *uint64_t v1758 = *v1759;
                  unint64_t v1760 = ((unint64_t)v1758 + v1976) & v1974;
                  unint64_t v1761 = ((unint64_t)v1759 + v1976) & v1974;
                  (*(void (**)(unint64_t, unint64_t, uint64_t))(v1979 + 32))(v1760, v1761, v1978);
                  unint64_t v1762 = (void *)((v1972 + v1760) & 0xFFFFFFFFFFFFFFF8);
                  uint64_t v1763 = (void *)((v1972 + v1761) & 0xFFFFFFFFFFFFFFF8);
                  *unint64_t v1762 = *v1763;
                  *(_OWORD *)(((unint64_t)v1762 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1763
                                                                                                  + 15) & 0xFFFFFFFFFFFFFFF8);
                  *(_OWORD *)(v1757 + v2034) = *(_OWORD *)(v1307 + v2034);
                  size_t v1764 = (v2036 + v1757 + v2034) & v1998;
                  size_t v1765 = (v2036 + v1307 + v2034) & v1998;
                  *(unsigned char *)size_t v1764 = *(unsigned char *)v1765;
                  uint64_t v1766 = v1764 | 4;
                  int v1767 = *(_DWORD *)(v1765 | 4);
                  *(unsigned char *)(v1766 + 4) = *(unsigned char *)((v1765 | 4) + 4);
                  *(_DWORD *)uint64_t v1766 = v1767;
                  *(_WORD *)(v1764 + 10) = *(_WORD *)(v1765 + 0xA);
                  v1768 = *(void (**)(size_t, size_t, uint64_t))(v2001 + 32);
                  v1768((v1999 + v1764) & v2000, (v1999 + v1765) & v2000, v2003);
                  size_t v1769 = (v1996 + ((v1999 + v1764) & v2000)) & v2000;
                  size_t v1770 = (v1996 + ((v1999 + v1765) & v2000)) & v2000;
                  v1768(v1769, v1770, v2003);
                  unint64_t v1771 = (unsigned char *)(v1769 + v1992);
                  *unint64_t v1771 = *(unsigned char *)(v1770 + v1992);
                  v1771[1] = *(unsigned char *)(v1770 + v1992 + 1);
                  v1771[2] = *(unsigned char *)(v1770 + v1992 + 2);
                  v1771[3] = *(unsigned char *)(v1770 + v1992 + 3);
                  v1771[4] = *(unsigned char *)(v1770 + v1992 + 4);
                  unint64_t v1772 = (v1769 + v1992 + 12) & 0xFFFFFFFFFFFFFFF8;
                  unint64_t v1773 = (v1770 + v1992 + 12) & 0xFFFFFFFFFFFFFFF8;
                  *(_OWORD *)unint64_t v1772 = *(_OWORD *)v1773;
                  *(unsigned char *)(v1772 + 16) = *(unsigned char *)(v1773 + 16);
                  *(unsigned char *)(v1772 + 17) = *(unsigned char *)(v1773 + 17);
                  *(unsigned char *)(v1772 + 18) = *(unsigned char *)(v1773 + 18);
                  *(unsigned char *)(v1772 + 19) = *(unsigned char *)(v1773 + 19);
                  unint64_t v1774 = (v1772 + 27) & 0xFFFFFFFFFFFFFFF8;
                  unint64_t v1775 = (v1773 + 27) & 0xFFFFFFFFFFFFFFF8;
                  *(void *)unint64_t v1774 = *(void *)v1775;
                  *(unsigned char *)(v1774 + 8) = *(unsigned char *)(v1775 + 8);
                  *(unsigned char *)(v1774 + 9) = *(unsigned char *)(v1775 + 9);
                  *(unsigned char *)(v1774 + 10) = *(unsigned char *)(v1775 + 10);
                  *(unsigned char *)(v1774 + 11) = *(unsigned char *)(v1775 + 11);
                  *(unsigned char *)(v1774 + 12) = *(unsigned char *)(v1775 + 12);
                  unint64_t v1776 = (void *)((v1773 + 47) & 0xFFFFFFFFFFFFFFF8);
                  uint64_t v1777 = (void *)((v1772 + 47) & 0xFFFFFFFFFFFFFFF8);
                  *uint64_t v1777 = *v1776;
                  unint64_t v1778 = ((unint64_t)v1777 + 15) & 0xFFFFFFFFFFFFFFF8;
                  unint64_t v1779 = ((unint64_t)v1776 + 15) & 0xFFFFFFFFFFFFFFF8;
                  *(void *)unint64_t v1778 = *(void *)v1779;
                  *(unsigned char *)(v1778 + 8) = *(unsigned char *)(v1779 + 8);
                  *(unsigned char *)(v1778 + 9) = *(unsigned char *)(v1779 + 9);
                  uint64_t v1780 = (void *)((v1993 + v1778) & v2000);
                  v1781 = (const void *)((v1993 + v1779) & v2000);
                  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v2001 + 48))(v1781, 1, v2003))
                  {
                    size_t v1753 = v2039;
                    memcpy(v1780, v1781, v2039);
                  }
                  else
                  {
                    v1768((size_t)v1780, (size_t)v1781, v2003);
                    (*(void (**)(void *, void, uint64_t, uint64_t))(v2001 + 56))(v1780, 0, 1, v2003);
                    size_t v1753 = v2039;
                  }
                  uint64_t v364 = v2060;
                  unint64_t v1354 = v2007 + 7;
                  unint64_t v1782 = (void *)(((unint64_t)v1780 + v1994) & 0xFFFFFFFFFFFFFFF8);
                  uint64_t v1783 = (void *)(((unint64_t)v1781 + v1994) & 0xFFFFFFFFFFFFFFF8);
                  *unint64_t v1782 = *v1783;
                  unint64_t v1784 = ((unint64_t)v1782 + 15) & 0xFFFFFFFFFFFFFFF8;
                  unint64_t v1785 = ((unint64_t)v1783 + 15) & 0xFFFFFFFFFFFFFFF8;
                  uint64_t v1786 = *(void *)v1785;
                  *(unsigned char *)(v1784 + 8) = *(unsigned char *)(v1785 + 8);
                  *(void *)unint64_t v1784 = v1786;
                  uint64_t v1787 = (void *)(((unint64_t)v1782 + 31) & 0xFFFFFFFFFFFFFFF8);
                  v1788 = (void *)(((unint64_t)v1783 + 31) & 0xFFFFFFFFFFFFFFF8);
                  void *v1787 = *v1788;
                  unint64_t v1789 = (_OWORD *)(((unint64_t)v1787 + 15) & 0xFFFFFFFFFFFFFFF8);
                  unint64_t v1790 = (_OWORD *)(((unint64_t)v1788 + 15) & 0xFFFFFFFFFFFFFFF8);
                  *unint64_t v1789 = *v1790;
                  unint64_t v1791 = ((unint64_t)v1789 + 19) & 0xFFFFFFFFFFFFFFF8;
                  unint64_t v1792 = ((unint64_t)v1790 + 19) & 0xFFFFFFFFFFFFFFF8;
                  uint64_t v1793 = *(void *)v1792;
                  *(unsigned char *)(v1791 + 8) = *(unsigned char *)(v1792 + 8);
                  *(void *)unint64_t v1791 = v1793;
                  *(unsigned char *)(v1791 + 9) = *(unsigned char *)(v1792 + 9);
                  unint64_t v1794 = (v1791 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                  unint64_t v1795 = (v1792 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                  LODWORD(v1786) = *(_DWORD *)v1795;
                  *(unsigned char *)(v1794 + 4) = *(unsigned char *)(v1795 + 4);
                  *(_DWORD *)unint64_t v1794 = v1786;
                  *(_OWORD *)((v1791 + 25) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v1792 + 25) & 0xFFFFFFFFFFFFFFF8);
                  unint64_t v1796 = v2035 + v1764;
                  long long v1797 = *(_OWORD *)(v2035 + v1765 + 112);
                  long long v1799 = *(_OWORD *)(v2035 + v1765 + 64);
                  long long v1798 = *(_OWORD *)(v2035 + v1765 + 80);
                  *(_OWORD *)(v1796 + 96) = *(_OWORD *)(v2035 + v1765 + 96);
                  *(_OWORD *)(v1796 + 112) = v1797;
                  *(_OWORD *)(v1796 + 64) = v1799;
                  *(_OWORD *)(v1796 + 80) = v1798;
                  long long v1800 = *(_OWORD *)(v2035 + v1765 + 176);
                  long long v1802 = *(_OWORD *)(v2035 + v1765 + 128);
                  long long v1801 = *(_OWORD *)(v2035 + v1765 + 144);
                  *(_OWORD *)(v1796 + 160) = *(_OWORD *)(v2035 + v1765 + 160);
                  *(_OWORD *)(v1796 + 176) = v1800;
                  *(_OWORD *)(v1796 + 128) = v1802;
                  *(_OWORD *)(v1796 + 144) = v1801;
                  long long v1804 = *(_OWORD *)(v2035 + v1765 + 208);
                  long long v1803 = *(_OWORD *)(v2035 + v1765 + 224);
                  long long v1805 = *(_OWORD *)(v2035 + v1765 + 192);
                  *(void *)(v1796 + 240) = *(void *)(v2035 + v1765 + 240);
                  *(_OWORD *)(v1796 + 208) = v1804;
                  *(_OWORD *)(v1796 + 224) = v1803;
                  *(_OWORD *)(v1796 + 192) = v1805;
                  long long v1806 = *(_OWORD *)(v2035 + v1765);
                  long long v1807 = *(_OWORD *)(v2035 + v1765 + 16);
                  long long v1808 = *(_OWORD *)(v2035 + v1765 + 48);
                  *(_OWORD *)(v1796 + 32) = *(_OWORD *)(v2035 + v1765 + 32);
                  *(_OWORD *)(v1796 + 48) = v1808;
                  *(_OWORD *)unint64_t v1796 = v1806;
                  *(_OWORD *)(v1796 + 16) = v1807;
                  unint64_t v1809 = (_OWORD *)((v2035 + v1764 + 255) & 0xFFFFFFFFFFFFFFF8);
                  uint64_t v1810 = (long long *)((v2035 + v1765 + 255) & 0xFFFFFFFFFFFFFFF8);
                  long long v1811 = *v1810;
                  *(_OWORD *)((char *)v1809 + 9) = *(long long *)((char *)v1810 + 9);
                  *unint64_t v1809 = v1811;
                  unint64_t v1812 = (v2035 + v1764 + 287) & 0xFFFFFFFFFFFFFFF8;
                  unint64_t v1813 = (v2035 + v1765 + 287) & 0xFFFFFFFFFFFFFFF8;
                  long long v1814 = *(_OWORD *)v1813;
                  *(unsigned char *)(v1812 + 16) = *(unsigned char *)(v1813 + 16);
                  *(_OWORD *)unint64_t v1812 = v1814;
                  unsigned int v1815 = (void *)((v2035 + v1764 + 311) & 0xFFFFFFFFFFFFFFF8);
                  unint64_t v1816 = (void *)((v2035 + v1765 + 311) & 0xFFFFFFFFFFFFFFF8);
                  *unsigned int v1815 = *v1816;
                  *(_OWORD *)(((unint64_t)v1815 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1816
                                                                                                  + 15) & 0xFFFFFFFFFFFFFFF8);
                  size_t v1755 = v1992;
                  unint64_t v752 = v1950;
                  uint64_t v1754 = v2012;
                  unint64_t v1237 = v2055;
                  unint64_t v1752 = (unint64_t)&a1[v1936] & v2032;
                  if (!v1982) {
                    goto LABEL_2233;
                  }
LABEL_2239:
                  unint64_t v1817 = ((((v1754
                            + ((((((((((v1354 + v1755) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                                + 19) & 0xFFFFFFFFFFFFFFF8)
                              + 25) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFF8)
                          + 15) & 0xFFFFFFFFFFFFFFF8)
                        + 16;
                  long long v1818 = (void *)((v1752 + v2042 + v1817) & v2005);
                  unint64_t v1819 = (const void *)(((unint64_t)v1237 + v2042 + v1817) & v2005);
                  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v364 + 48))(v1819, 1, v2033))
                  {
                    memcpy(v1818, v1819, v1937);
                  }
                  else
                  {
                    (*(void (**)(void *, const void *, uint64_t))(v364 + 32))(v1818, v1819, v2033);
                    (*(void (**)(void *, void, uint64_t, uint64_t))(v364 + 56))(v1818, 0, 1, v2033);
                  }
                  unint64_t v68 = v1915;
                  unint64_t v1820 = (char *)(((unint64_t)v1818 + v1934) & v2006);
                  long long v1821 = (char *)(((unint64_t)v1819 + v1934) & v2006);
                  if (v1967 == v1969)
                  {
                    int v1822 = (*(uint64_t (**)(unint64_t))(v1986 + 48))(((unint64_t)v1819 + v1934) & v2006);
                  }
                  else
                  {
                    unint64_t v1823 = (uint64_t *)((unint64_t)&v1821[v1988] & 0xFFFFFFFFFFFFFFF8);
                    if (v1952 <= 0x7FFFFFFE)
                    {
                      uint64_t v1824 = *v1823;
                      if ((unint64_t)*v1823 >= 0xFFFFFFFF) {
                        LODWORD(v1824) = -1;
                      }
                      if ((v1824 + 1) >= 2) {
                        goto LABEL_2251;
                      }
                      goto LABEL_2253;
                    }
                    int v1822 = (*(uint64_t (**)(unint64_t))(v1981 + 48))(((unint64_t)v1823 + v1977) & v1975);
                  }
                  if (v1822)
                  {
LABEL_2251:
                    memcpy(v1820, v1821, v1995);
LABEL_2254:
                    char v1225 = 0;
                    *(void *)&v1820[v1995] = *(void *)&v1821[v1995];
                    v1829 = (void *)((unint64_t)&v1820[v1995 + 15] & 0xFFFFFFFFFFFFFFF8);
                    uint64_t v1830 = (void *)((unint64_t)&v1821[v1995 + 15] & 0xFFFFFFFFFFFFFFF8);
                    void *v1829 = *v1830;
                    *(void *)(((unint64_t)v1829 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v1830 + 15) & 0xFFFFFFFFFFFFFFF8);
                    char v1226 = 1;
                    goto LABEL_2267;
                  }
                  unint64_t v1823 = (uint64_t *)((unint64_t)&v1821[v1988] & 0xFFFFFFFFFFFFFFF8);
LABEL_2253:
                  (*(void (**)(char *, char *, uint64_t))(v1986 + 32))(v1820, v1821, v1985);
                  long long v1825 = (void *)((unint64_t)&v1820[v1988] & 0xFFFFFFFFFFFFFFF8);
                  *long long v1825 = *v1823;
                  unint64_t v1826 = ((unint64_t)v1825 + v1977) & v1975;
                  (*(void (**)(unint64_t, unint64_t, uint64_t))(v1981 + 32))(v1826, ((unint64_t)v1823 + v1977) & v1975, v1980);
                  unint64_t v1827 = (void *)((v1973 + v1826) & 0xFFFFFFFFFFFFFFF8);
                  unint64_t v1828 = (void *)((v1973 + (((unint64_t)v1823 + v1977) & v1975)) & 0xFFFFFFFFFFFFFFF8);
                  void *v1827 = *v1828;
                  *(_OWORD *)(((unint64_t)v1827 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1828
                                                                                                  + 15) & 0xFFFFFFFFFFFFFFF8);
                  goto LABEL_2254;
                case 2u:
                  (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v2040 + 32))(a1, v77, v73);
                  uint64_t v1239 = (void *)((unint64_t)&a1[v1963] & v2005);
                  unint64_t v1240 = (const void *)((unint64_t)&v77[v1963] & v2005);
                  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v364 + 48))(v1240, 1, v72))
                  {
                    memcpy(v1239, v1240, v1937);
                  }
                  else
                  {
                    (*(void (**)(void *, const void *, uint64_t))(v364 + 32))(v1239, v1240, v72);
                    (*(void (**)(void *, void, uint64_t, uint64_t))(v364 + 56))(v1239, 0, 1, v72);
                  }
                  uint64_t v1315 = (char *)(((unint64_t)v1239 + v1934) & v2006);
                  int v1316 = (char *)(((unint64_t)v1240 + v1934) & v2006);
                  if (v1967 == v1969)
                  {
                    int v1317 = (*(uint64_t (**)(char *))(v1986 + 48))(v1316);
                  }
                  else
                  {
                    unint64_t v1318 = (uint64_t *)((unint64_t)&v1316[v1988] & 0xFFFFFFFFFFFFFFF8);
                    if (v1952 <= 0x7FFFFFFE)
                    {
                      uint64_t v1319 = *v1318;
                      if ((unint64_t)*v1318 >= 0xFFFFFFFF) {
                        LODWORD(v1319) = -1;
                      }
                      if ((v1319 + 1) >= 2) {
                        goto LABEL_1958;
                      }
                      goto LABEL_1960;
                    }
                    int v1317 = (*(uint64_t (**)(unint64_t))(v1981 + 48))(((unint64_t)v1318 + v1977) & v1975);
                  }
                  if (v1317)
                  {
LABEL_1958:
                    memcpy(v1315, v1316, v1995);
                    goto LABEL_1961;
                  }
                  unint64_t v1318 = (uint64_t *)((unint64_t)&v1316[v1988] & 0xFFFFFFFFFFFFFFF8);
LABEL_1960:
                  (*(void (**)(char *, char *, uint64_t))(v1986 + 32))(v1315, v1316, v1985);
                  size_t v1363 = (void *)((unint64_t)&v1315[v1988] & 0xFFFFFFFFFFFFFFF8);
                  *size_t v1363 = *v1318;
                  unint64_t v1364 = ((unint64_t)v1363 + v1977) & v1975;
                  (*(void (**)(unint64_t, unint64_t, uint64_t))(v1981 + 32))(v1364, ((unint64_t)v1318 + v1977) & v1975, v1980);
                  unint64_t v1365 = (void *)((v1973 + v1364) & 0xFFFFFFFFFFFFFFF8);
                  unint64_t v1366 = (void *)((v1973 + (((unint64_t)v1318 + v1977) & v1975)) & 0xFFFFFFFFFFFFFFF8);
                  *unint64_t v1365 = *v1366;
                  *(_OWORD *)(((unint64_t)v1365 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1366
                                                                                                  + 15) & 0xFFFFFFFFFFFFFFF8);
LABEL_1961:
                  char v1225 = 0;
                  unint64_t v1367 = &v1315[v1995];
                  *unint64_t v1367 = v1316[v1995];
                  *((void *)v1367 + 1) = *(void *)&v1316[v1995 + 8];
                  char v1226 = 2;
                  goto LABEL_2267;
                case 3u:
                  uint64_t v2013 = v2008 + 327;
                  unsigned int v1913 = v68;
                  unint64_t v1241 = v77;
                  size_t v1242 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v2040 + 32);
                  v1242(a1, v1241, v73);
                  long long v1243 = (void *)((unint64_t)&a1[v1936] & v2032);
                  long long v1244 = (void *)((unint64_t)&v1241[v1936] & v2032);
                  if (v2030 == v1971)
                  {
                    int v1245 = (*(uint64_t (**)(void *))(v2040 + 48))(v1244);
                    size_t v1246 = v2034;
LABEL_2256:
                    if (v1245)
                    {
LABEL_2257:
                      memcpy(v1243, v1244, v2049);
                      size_t v1831 = v2039;
                      unint64_t v1832 = v2007 + 7;
                      uint64_t v1833 = v2013;
LABEL_2258:
                      size_t v1834 = v1831;
LABEL_2264:
                      char v1225 = 0;
                      unint64_t v1896 = ((((v1833
                                + ((((((((((v1832 + v1834) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                                    + 19) & 0xFFFFFFFFFFFFFFF8)
                                  + 25) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFF8)
                              + 15) & 0xFFFFFFFFFFFFFFF8)
                            + 16;
                      uint64_t v1897 = (_OWORD *)(((unint64_t)v1243 + v1896) & 0xFFFFFFFFFFFFFFF8);
                      uint64_t v1898 = (_OWORD *)(((unint64_t)v1244 + v1896) & 0xFFFFFFFFFFFFFFF8);
                      *uint64_t v1897 = *v1898;
                      *(void *)(((unint64_t)v1897 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v1898 + 23) & 0xFFFFFFFFFFFFFFF8);
                      goto LABEL_2265;
                    }
                    unint64_t v1308 = ((unint64_t)v1244 + v1990) & v1991;
                    unint64_t v1309 = (v1962 + v1308) & v2002;
LABEL_2260:
                    v1242((unsigned __int8 *)v1243, (unsigned __int8 *)v1244, AssociatedTypeWitness);
                    unint64_t v1835 = ((unint64_t)v1243 + v1990) & v1991;
                    v1242((unsigned __int8 *)v1835, (unsigned __int8 *)v1308, AssociatedTypeWitness);
                    unint64_t v1836 = (v1962 + v1835) & v2002;
                    (*(void (**)(unint64_t, unint64_t, uint64_t))(v1984 + 32))(v1836, v1309, v1983);
                    unint64_t v1837 = (void *)((v1987 + v1836) & 0xFFFFFFFFFFFFFFF8);
                    long long v1838 = (void *)((v1987 + v1309) & 0xFFFFFFFFFFFFFFF8);
                    void *v1837 = *v1838;
                    unint64_t v1839 = ((unint64_t)v1837 + v1976) & v1974;
                    unint64_t v1840 = ((unint64_t)v1838 + v1976) & v1974;
                    (*(void (**)(unint64_t, unint64_t, uint64_t))(v1979 + 32))(v1839, v1840, v1978);
                    uint64_t v1841 = (void *)((v1972 + v1839) & 0xFFFFFFFFFFFFFFF8);
                    long long v1842 = (void *)((v1972 + v1840) & 0xFFFFFFFFFFFFFFF8);
                    *uint64_t v1841 = *v1842;
                    *(_OWORD *)(((unint64_t)v1841 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1842 + 15) & 0xFFFFFFFFFFFFFFF8);
                    *(_OWORD *)(v1836 + v1246) = *(_OWORD *)(v1309 + v1246);
                    uint64_t v1843 = (v2036 + v1836 + v1246) & v1998;
                    uint64_t v1844 = (v2036 + v1309 + v1246) & v1998;
                    *(unsigned char *)uint64_t v1843 = *(unsigned char *)v1844;
                    uint64_t v1845 = v1843 | 4;
                    int v1846 = *(_DWORD *)(v1844 | 4);
                    *(unsigned char *)(v1845 + 4) = *(unsigned char *)((v1844 | 4) + 4);
                    *(_DWORD *)uint64_t v1845 = v1846;
                    *(_WORD *)(v1843 + 10) = *(_WORD *)(v1844 + 0xA);
                    uint64_t v1847 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2001 + 32);
                    v1847((v1999 + v1843) & v2000, (v1999 + v1844) & v2000, v2003);
                    uint64_t v1848 = (v1996 + ((v1999 + v1843) & v2000)) & v2000;
                    uint64_t v1849 = (v1996 + ((v1999 + v1844) & v2000)) & v2000;
                    v1847(v1848, v1849, v2003);
                    v1850 = (unsigned char *)(v1848 + v1992);
                    unsigned char *v1850 = *(unsigned char *)(v1849 + v1992);
                    v1850[1] = *(unsigned char *)(v1849 + v1992 + 1);
                    v1850[2] = *(unsigned char *)(v1849 + v1992 + 2);
                    v1850[3] = *(unsigned char *)(v1849 + v1992 + 3);
                    v1850[4] = *(unsigned char *)(v1849 + v1992 + 4);
                    unint64_t v1851 = (v1848 + v1992 + 12) & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v1852 = (v1849 + v1992 + 12) & 0xFFFFFFFFFFFFFFF8;
                    *(_OWORD *)unint64_t v1851 = *(_OWORD *)v1852;
                    *(unsigned char *)(v1851 + 16) = *(unsigned char *)(v1852 + 16);
                    *(unsigned char *)(v1851 + 17) = *(unsigned char *)(v1852 + 17);
                    *(unsigned char *)(v1851 + 18) = *(unsigned char *)(v1852 + 18);
                    *(unsigned char *)(v1851 + 19) = *(unsigned char *)(v1852 + 19);
                    unint64_t v1853 = (v1851 + 27) & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v1854 = (v1852 + 27) & 0xFFFFFFFFFFFFFFF8;
                    *(void *)unint64_t v1853 = *(void *)v1854;
                    *(unsigned char *)(v1853 + 8) = *(unsigned char *)(v1854 + 8);
                    *(unsigned char *)(v1853 + 9) = *(unsigned char *)(v1854 + 9);
                    *(unsigned char *)(v1853 + 10) = *(unsigned char *)(v1854 + 10);
                    *(unsigned char *)(v1853 + 11) = *(unsigned char *)(v1854 + 11);
                    *(unsigned char *)(v1853 + 12) = *(unsigned char *)(v1854 + 12);
                    size_t v1855 = (void *)((v1852 + 47) & 0xFFFFFFFFFFFFFFF8);
                    uint64_t v1856 = (void *)((v1851 + 47) & 0xFFFFFFFFFFFFFFF8);
                    *uint64_t v1856 = *v1855;
                    unint64_t v1857 = ((unint64_t)v1856 + 15) & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v1858 = ((unint64_t)v1855 + 15) & 0xFFFFFFFFFFFFFFF8;
                    *(void *)unint64_t v1857 = *(void *)v1858;
                    *(unsigned char *)(v1857 + 8) = *(unsigned char *)(v1858 + 8);
                    *(unsigned char *)(v1857 + 9) = *(unsigned char *)(v1858 + 9);
                    unint64_t v1859 = (void *)((v1993 + v1857) & v2000);
                    unint64_t v1860 = (const void *)((v1993 + v1858) & v2000);
                    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v2001 + 48))(v1860, 1, v2003))
                    {
                      size_t v1831 = v2039;
                      memcpy(v1859, v1860, v2039);
                    }
                    else
                    {
                      v1847((uint64_t)v1859, (uint64_t)v1860, v2003);
                      (*(void (**)(void *, void, uint64_t, uint64_t))(v2001 + 56))(v1859, 0, 1, v2003);
                      size_t v1831 = v2039;
                    }
                    unint64_t v752 = v1950;
                    unint64_t v1832 = v2007 + 7;
                    v1861 = (void *)(((unint64_t)v1859 + v1994) & 0xFFFFFFFFFFFFFFF8);
                    v1862 = (void *)(((unint64_t)v1860 + v1994) & 0xFFFFFFFFFFFFFFF8);
                    void *v1861 = *v1862;
                    unint64_t v1863 = ((unint64_t)v1861 + 15) & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v1864 = ((unint64_t)v1862 + 15) & 0xFFFFFFFFFFFFFFF8;
                    uint64_t v1865 = *(void *)v1864;
                    *(unsigned char *)(v1863 + 8) = *(unsigned char *)(v1864 + 8);
                    *(void *)unint64_t v1863 = v1865;
                    v1866 = (void *)(((unint64_t)v1861 + 31) & 0xFFFFFFFFFFFFFFF8);
                    id v1867 = (void *)(((unint64_t)v1862 + 31) & 0xFFFFFFFFFFFFFFF8);
                    void *v1866 = *v1867;
                    id v1868 = (_OWORD *)(((unint64_t)v1866 + 15) & 0xFFFFFFFFFFFFFFF8);
                    v1869 = (_OWORD *)(((unint64_t)v1867 + 15) & 0xFFFFFFFFFFFFFFF8);
                    *id v1868 = *v1869;
                    unint64_t v1870 = ((unint64_t)v1868 + 19) & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v1871 = ((unint64_t)v1869 + 19) & 0xFFFFFFFFFFFFFFF8;
                    uint64_t v1872 = *(void *)v1871;
                    *(unsigned char *)(v1870 + 8) = *(unsigned char *)(v1871 + 8);
                    *(void *)unint64_t v1870 = v1872;
                    *(unsigned char *)(v1870 + 9) = *(unsigned char *)(v1871 + 9);
                    unint64_t v1873 = (v1870 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                    unint64_t v1874 = (v1871 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                    LODWORD(v1865) = *(_DWORD *)v1874;
                    *(unsigned char *)(v1873 + 4) = *(unsigned char *)(v1874 + 4);
                    *(_DWORD *)unint64_t v1873 = v1865;
                    *(_OWORD *)((v1870 + 25) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v1871 + 25) & 0xFFFFFFFFFFFFFFF8);
                    unint64_t v1875 = v2035 + v1843;
                    long long v1876 = *(_OWORD *)(v2035 + v1844 + 112);
                    long long v1878 = *(_OWORD *)(v2035 + v1844 + 64);
                    long long v1877 = *(_OWORD *)(v2035 + v1844 + 80);
                    *(_OWORD *)(v1875 + 96) = *(_OWORD *)(v2035 + v1844 + 96);
                    *(_OWORD *)(v1875 + 112) = v1876;
                    *(_OWORD *)(v1875 + 64) = v1878;
                    *(_OWORD *)(v1875 + 80) = v1877;
                    long long v1879 = *(_OWORD *)(v2035 + v1844 + 176);
                    long long v1881 = *(_OWORD *)(v2035 + v1844 + 128);
                    long long v1880 = *(_OWORD *)(v2035 + v1844 + 144);
                    *(_OWORD *)(v1875 + 160) = *(_OWORD *)(v2035 + v1844 + 160);
                    *(_OWORD *)(v1875 + 176) = v1879;
                    *(_OWORD *)(v1875 + 128) = v1881;
                    *(_OWORD *)(v1875 + 144) = v1880;
                    long long v1883 = *(_OWORD *)(v2035 + v1844 + 208);
                    long long v1882 = *(_OWORD *)(v2035 + v1844 + 224);
                    long long v1884 = *(_OWORD *)(v2035 + v1844 + 192);
                    *(void *)(v1875 + 240) = *(void *)(v2035 + v1844 + 240);
                    *(_OWORD *)(v1875 + 208) = v1883;
                    *(_OWORD *)(v1875 + 224) = v1882;
                    *(_OWORD *)(v1875 + 192) = v1884;
                    long long v1885 = *(_OWORD *)(v2035 + v1844);
                    long long v1886 = *(_OWORD *)(v2035 + v1844 + 16);
                    long long v1887 = *(_OWORD *)(v2035 + v1844 + 48);
                    *(_OWORD *)(v1875 + 32) = *(_OWORD *)(v2035 + v1844 + 32);
                    *(_OWORD *)(v1875 + 48) = v1887;
                    *(_OWORD *)unint64_t v1875 = v1885;
                    *(_OWORD *)(v1875 + 16) = v1886;
                    uint64_t v1888 = (_OWORD *)((v2035 + v1843 + 255) & 0xFFFFFFFFFFFFFFF8);
                    uint64_t v1889 = (long long *)((v2035 + v1844 + 255) & 0xFFFFFFFFFFFFFFF8);
                    long long v1890 = *v1889;
                    *(_OWORD *)((char *)v1888 + 9) = *(long long *)((char *)v1889 + 9);
                    *uint64_t v1888 = v1890;
                    unint64_t v1891 = (v2035 + v1843 + 287) & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v1892 = (v2035 + v1844 + 287) & 0xFFFFFFFFFFFFFFF8;
                    long long v1893 = *(_OWORD *)v1892;
                    *(unsigned char *)(v1891 + 16) = *(unsigned char *)(v1892 + 16);
                    *(_OWORD *)unint64_t v1891 = v1893;
                    size_t v1894 = (void *)((v2035 + v1843 + 311) & 0xFFFFFFFFFFFFFFF8);
                    size_t v1895 = (void *)((v2035 + v1844 + 311) & 0xFFFFFFFFFFFFFFF8);
                    *size_t v1894 = *v1895;
                    *(_OWORD *)(((unint64_t)v1894 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1895 + 15) & 0xFFFFFFFFFFFFFFF8);
                    size_t v1834 = v1992;
                    uint64_t v1833 = v2013;
                    long long v1243 = (void *)((unint64_t)&a1[v1936] & v2032);
                    if (v1982) {
                      goto LABEL_2264;
                    }
                    goto LABEL_2258;
                  }
                  unint64_t v1308 = ((unint64_t)v1244 + v1990) & v1991;
                  unint64_t v1309 = (v1962 + v1308) & v2002;
                  size_t v1246 = v2034;
                  if (v1968 == v1971)
                  {
                    if (v1966 == v1968)
                    {
                      int v1245 = (*(uint64_t (**)(unint64_t))(v1984 + 48))((v1962 + v1308) & v2002);
                      goto LABEL_2256;
                    }
                    long long v1390 = (unint64_t *)((v1987 + v1309) & 0xFFFFFFFFFFFFFFF8);
                    if (v1951 > 0x7FFFFFFE)
                    {
                      int v1245 = (*(uint64_t (**)(unint64_t))(v1979 + 48))(((unint64_t)v1390 + v1976) & v1974);
                      goto LABEL_2256;
                    }
                    unint64_t v1391 = *v1390;
                  }
                  else
                  {
                    size_t v1356 = v1309 + v2034;
                    if ((v1948 & 0x80000000) == 0)
                    {
                      unint64_t v1357 = *(void *)(v1356 + 8);
                      if (v1357 >= 0xFFFFFFFF) {
                        LODWORD(v1357) = -1;
                      }
                      int v1245 = v1357 + 1;
                      goto LABEL_2256;
                    }
                    uint64_t v1409 = (v1999 + ((v2036 + v1356) & v1998)) & v2000;
                    if (v1982 > 0x7FFFFFFD)
                    {
                      int v1245 = (*(uint64_t (**)(uint64_t))(v2001 + 48))(v1409);
                      goto LABEL_2256;
                    }
                    unint64_t v1391 = *(void *)(((v1964 + ((v1996 + v1409) & v2000)) & 0xFFFFFFFFFFFFFFF8) + 8);
                  }
                  if (v1391 >= 0xFFFFFFFF) {
                    LODWORD(v1391) = -1;
                  }
                  if ((v1391 + 1) >= 2) {
                    goto LABEL_2257;
                  }
                  goto LABEL_2260;
                case 4u:
                  (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v2040 + 32))(a1, v77, v73);
                  char v1225 = 0;
                  char v1226 = 4;
                  goto LABEL_2267;
                case 5u:
                  (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v2040 + 32))(a1, v77, v73);
                  char v1225 = 0;
                  char v1226 = 5;
                  goto LABEL_2267;
                case 6u:
                  (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v2040 + 32))(a1, v77, v73);
                  long long v1247 = (void *)((unint64_t)&a1[v1930] & v1927);
                  long long v1248 = (const void *)((unint64_t)&v77[v1930] & v1927);
                  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1932 + 48))(v1248, 1, v2015))
                  {
                    memcpy(v1247, v1248, v1925);
                  }
                  else
                  {
                    (*(void (**)(void *, const void *, uint64_t))(v1932 + 32))(v1247, v1248, v2015);
                    (*(void (**)(void *, void, uint64_t, uint64_t))(v1932 + 56))(v1247, 0, 1, v2015);
                  }
                  char v1225 = 0;
                  char v1226 = 6;
                  goto LABEL_2267;
                case 7u:
                  (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v2040 + 32))(a1, v77, v73);
                  char v1225 = 0;
                  char v1226 = 7;
                  goto LABEL_2267;
                default:
                  uint64_t v2011 = v2008 + 327;
                  uint64_t v1229 = v77;
                  unint64_t v1230 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v2040 + 32);
                  v1230(a1, v1229, v73);
                  unint64_t v1231 = (void *)((unint64_t)&a1[v1936] & v2032);
                  uint64_t v1232 = (void *)((unint64_t)&v1229[v1936] & v2032);
                  unsigned int v1913 = v68;
                  if (v2030 == v1971)
                  {
                    int v1233 = (*(uint64_t (**)(void *))(v2040 + 48))(v1232);
                    size_t v1234 = v2034;
LABEL_2220:
                    if (v1233)
                    {
LABEL_2221:
                      memcpy(v1231, v1232, v2049);
                      size_t v1684 = v2039;
                      unint64_t v1685 = v2007 + 7;
                      uint64_t v1686 = v2011;
                      goto LABEL_2222;
                    }
                    unint64_t v1304 = ((unint64_t)v1232 + v1990) & v1991;
                    unint64_t v1305 = (v1962 + v1304) & v2002;
LABEL_2224:
                    v1230((unsigned __int8 *)v1231, (unsigned __int8 *)v1232, AssociatedTypeWitness);
                    unint64_t v1688 = ((unint64_t)v1231 + v1990) & v1991;
                    v1230((unsigned __int8 *)v1688, (unsigned __int8 *)v1304, AssociatedTypeWitness);
                    unint64_t v1689 = (v1962 + v1688) & v2002;
                    (*(void (**)(unint64_t, unint64_t, uint64_t))(v1984 + 32))(v1689, v1305, v1983);
                    unint64_t v1690 = (void *)((v1987 + v1689) & 0xFFFFFFFFFFFFFFF8);
                    uint64_t v1691 = (void *)((v1987 + v1305) & 0xFFFFFFFFFFFFFFF8);
                    void *v1690 = *v1691;
                    unint64_t v1692 = ((unint64_t)v1690 + v1976) & v1974;
                    unint64_t v1693 = ((unint64_t)v1691 + v1976) & v1974;
                    (*(void (**)(unint64_t, unint64_t, uint64_t))(v1979 + 32))(v1692, v1693, v1978);
                    size_t v1694 = (void *)((v1972 + v1692) & 0xFFFFFFFFFFFFFFF8);
                    size_t v1695 = (void *)((v1972 + v1693) & 0xFFFFFFFFFFFFFFF8);
                    void *v1694 = *v1695;
                    *(_OWORD *)(((unint64_t)v1694 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1695 + 15) & 0xFFFFFFFFFFFFFFF8);
                    *(_OWORD *)(v1689 + v1234) = *(_OWORD *)(v1305 + v1234);
                    uint64_t v1696 = (v2036 + v1689 + v1234) & v1998;
                    uint64_t v1697 = (v2036 + v1305 + v1234) & v1998;
                    *(unsigned char *)uint64_t v1696 = *(unsigned char *)v1697;
                    uint64_t v1698 = v1696 | 4;
                    int v1699 = *(_DWORD *)(v1697 | 4);
                    *(unsigned char *)(v1698 + 4) = *(unsigned char *)((v1697 | 4) + 4);
                    *(_DWORD *)uint64_t v1698 = v1699;
                    *(_WORD *)(v1696 + 10) = *(_WORD *)(v1697 + 0xA);
                    size_t v1700 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2001 + 32);
                    v1700((v1999 + v1696) & v2000, (v1999 + v1697) & v2000, v2003);
                    uint64_t v1701 = (v1996 + ((v1999 + v1696) & v2000)) & v2000;
                    uint64_t v1702 = (v1996 + ((v1999 + v1697) & v2000)) & v2000;
                    v1700(v1701, v1702, v2003);
                    unint64_t v1703 = (unsigned char *)(v1701 + v1992);
                    *unint64_t v1703 = *(unsigned char *)(v1702 + v1992);
                    v1703[1] = *(unsigned char *)(v1702 + v1992 + 1);
                    v1703[2] = *(unsigned char *)(v1702 + v1992 + 2);
                    v1703[3] = *(unsigned char *)(v1702 + v1992 + 3);
                    v1703[4] = *(unsigned char *)(v1702 + v1992 + 4);
                    unint64_t v1704 = (v1701 + v1992 + 12) & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v1705 = (v1702 + v1992 + 12) & 0xFFFFFFFFFFFFFFF8;
                    *(_OWORD *)unint64_t v1704 = *(_OWORD *)v1705;
                    *(unsigned char *)(v1704 + 16) = *(unsigned char *)(v1705 + 16);
                    *(unsigned char *)(v1704 + 17) = *(unsigned char *)(v1705 + 17);
                    *(unsigned char *)(v1704 + 18) = *(unsigned char *)(v1705 + 18);
                    *(unsigned char *)(v1704 + 19) = *(unsigned char *)(v1705 + 19);
                    unint64_t v1706 = (v1704 + 27) & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v1707 = (v1705 + 27) & 0xFFFFFFFFFFFFFFF8;
                    *(void *)unint64_t v1706 = *(void *)v1707;
                    *(unsigned char *)(v1706 + 8) = *(unsigned char *)(v1707 + 8);
                    *(unsigned char *)(v1706 + 9) = *(unsigned char *)(v1707 + 9);
                    *(unsigned char *)(v1706 + 10) = *(unsigned char *)(v1707 + 10);
                    *(unsigned char *)(v1706 + 11) = *(unsigned char *)(v1707 + 11);
                    *(unsigned char *)(v1706 + 12) = *(unsigned char *)(v1707 + 12);
                    uint64_t v1708 = (void *)((v1705 + 47) & 0xFFFFFFFFFFFFFFF8);
                    uint64_t v1709 = (void *)((v1704 + 47) & 0xFFFFFFFFFFFFFFF8);
                    void *v1709 = *v1708;
                    unint64_t v1710 = ((unint64_t)v1709 + 15) & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v1711 = ((unint64_t)v1708 + 15) & 0xFFFFFFFFFFFFFFF8;
                    *(void *)unint64_t v1710 = *(void *)v1711;
                    *(unsigned char *)(v1710 + 8) = *(unsigned char *)(v1711 + 8);
                    *(unsigned char *)(v1710 + 9) = *(unsigned char *)(v1711 + 9);
                    uint64_t v1712 = (void *)((v1993 + v1710) & v2000);
                    uint64_t v1713 = (const void *)((v1993 + v1711) & v2000);
                    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v2001 + 48))(v1713, 1, v2003))
                    {
                      size_t v1684 = v2039;
                      memcpy(v1712, v1713, v2039);
                    }
                    else
                    {
                      v1700((uint64_t)v1712, (uint64_t)v1713, v2003);
                      (*(void (**)(void *, void, uint64_t, uint64_t))(v2001 + 56))(v1712, 0, 1, v2003);
                      size_t v1684 = v2039;
                    }
                    unint64_t v752 = v1950;
                    unint64_t v1685 = v2007 + 7;
                    uint64_t v1714 = (void *)(((unint64_t)v1712 + v1994) & 0xFFFFFFFFFFFFFFF8);
                    unint64_t v1715 = (void *)(((unint64_t)v1713 + v1994) & 0xFFFFFFFFFFFFFFF8);
                    void *v1714 = *v1715;
                    unint64_t v1716 = ((unint64_t)v1714 + 15) & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v1717 = ((unint64_t)v1715 + 15) & 0xFFFFFFFFFFFFFFF8;
                    uint64_t v1718 = *(void *)v1717;
                    *(unsigned char *)(v1716 + 8) = *(unsigned char *)(v1717 + 8);
                    *(void *)unint64_t v1716 = v1718;
                    unint64_t v1719 = (void *)(((unint64_t)v1714 + 31) & 0xFFFFFFFFFFFFFFF8);
                    uint64_t v1720 = (void *)(((unint64_t)v1715 + 31) & 0xFFFFFFFFFFFFFFF8);
                    *unint64_t v1719 = *v1720;
                    uint64_t v1721 = (_OWORD *)(((unint64_t)v1719 + 15) & 0xFFFFFFFFFFFFFFF8);
                    unint64_t v1722 = (_OWORD *)(((unint64_t)v1720 + 15) & 0xFFFFFFFFFFFFFFF8);
                    _OWORD *v1721 = *v1722;
                    unint64_t v1723 = ((unint64_t)v1721 + 19) & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v1724 = ((unint64_t)v1722 + 19) & 0xFFFFFFFFFFFFFFF8;
                    uint64_t v1725 = *(void *)v1724;
                    *(unsigned char *)(v1723 + 8) = *(unsigned char *)(v1724 + 8);
                    *(void *)unint64_t v1723 = v1725;
                    *(unsigned char *)(v1723 + 9) = *(unsigned char *)(v1724 + 9);
                    unint64_t v1726 = (v1723 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                    unint64_t v1727 = (v1724 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                    LODWORD(v1718) = *(_DWORD *)v1727;
                    *(unsigned char *)(v1726 + 4) = *(unsigned char *)(v1727 + 4);
                    *(_DWORD *)unint64_t v1726 = v1718;
                    *(_OWORD *)((v1723 + 25) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v1724 + 25) & 0xFFFFFFFFFFFFFFF8);
                    unint64_t v1728 = v2035 + v1696;
                    long long v1729 = *(_OWORD *)(v2035 + v1697 + 112);
                    long long v1731 = *(_OWORD *)(v2035 + v1697 + 64);
                    long long v1730 = *(_OWORD *)(v2035 + v1697 + 80);
                    *(_OWORD *)(v1728 + 96) = *(_OWORD *)(v2035 + v1697 + 96);
                    *(_OWORD *)(v1728 + 112) = v1729;
                    *(_OWORD *)(v1728 + 64) = v1731;
                    *(_OWORD *)(v1728 + 80) = v1730;
                    long long v1732 = *(_OWORD *)(v2035 + v1697 + 176);
                    long long v1734 = *(_OWORD *)(v2035 + v1697 + 128);
                    long long v1733 = *(_OWORD *)(v2035 + v1697 + 144);
                    *(_OWORD *)(v1728 + 160) = *(_OWORD *)(v2035 + v1697 + 160);
                    *(_OWORD *)(v1728 + 176) = v1732;
                    *(_OWORD *)(v1728 + 128) = v1734;
                    *(_OWORD *)(v1728 + 144) = v1733;
                    long long v1736 = *(_OWORD *)(v2035 + v1697 + 208);
                    long long v1735 = *(_OWORD *)(v2035 + v1697 + 224);
                    long long v1737 = *(_OWORD *)(v2035 + v1697 + 192);
                    *(void *)(v1728 + 240) = *(void *)(v2035 + v1697 + 240);
                    *(_OWORD *)(v1728 + 208) = v1736;
                    *(_OWORD *)(v1728 + 224) = v1735;
                    *(_OWORD *)(v1728 + 192) = v1737;
                    long long v1738 = *(_OWORD *)(v2035 + v1697);
                    long long v1739 = *(_OWORD *)(v2035 + v1697 + 16);
                    long long v1740 = *(_OWORD *)(v2035 + v1697 + 48);
                    *(_OWORD *)(v1728 + 32) = *(_OWORD *)(v2035 + v1697 + 32);
                    *(_OWORD *)(v1728 + 48) = v1740;
                    *(_OWORD *)unint64_t v1728 = v1738;
                    *(_OWORD *)(v1728 + 16) = v1739;
                    long long v1741 = (_OWORD *)((v2035 + v1696 + 255) & 0xFFFFFFFFFFFFFFF8);
                    long long v1742 = (long long *)((v2035 + v1697 + 255) & 0xFFFFFFFFFFFFFFF8);
                    long long v1743 = *v1742;
                    *(_OWORD *)((char *)v1741 + 9) = *(long long *)((char *)v1742 + 9);
                    *long long v1741 = v1743;
                    unint64_t v1744 = (v2035 + v1696 + 287) & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v1745 = (v2035 + v1697 + 287) & 0xFFFFFFFFFFFFFFF8;
                    long long v1746 = *(_OWORD *)v1745;
                    *(unsigned char *)(v1744 + 16) = *(unsigned char *)(v1745 + 16);
                    *(_OWORD *)unint64_t v1744 = v1746;
                    uint64_t v1747 = (void *)((v2035 + v1696 + 311) & 0xFFFFFFFFFFFFFFF8);
                    uint64_t v1748 = (void *)((v2035 + v1697 + 311) & 0xFFFFFFFFFFFFFFF8);
                    *uint64_t v1747 = *v1748;
                    *(_OWORD *)(((unint64_t)v1747 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1748 + 15) & 0xFFFFFFFFFFFFFFF8);
                    size_t v1687 = v1992;
                    uint64_t v1686 = v2011;
                    unint64_t v1231 = (void *)((unint64_t)&a1[v1936] & v2032);
                    if (v1982)
                    {
LABEL_2228:
                      char v1226 = 0;
                      char v1225 = 0;
                      unint64_t v1749 = ((((v1686
                                + ((((((((((v1685 + v1687) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                                    + 19) & 0xFFFFFFFFFFFFFFF8)
                                  + 25) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFF8)
                              + 15) & 0xFFFFFFFFFFFFFFF8)
                            + 16;
                      long long v1750 = (void *)(((unint64_t)v1231 + v1749) & 0xFFFFFFFFFFFFFFF8);
                      uint64_t v1751 = (void *)(((unint64_t)v1232 + v1749) & 0xFFFFFFFFFFFFFFF8);
                      *long long v1750 = *v1751;
                      *(void *)(((unint64_t)v1750 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v1751 + 15) & 0xFFFFFFFFFFFFFFF8);
                      goto LABEL_2266;
                    }
LABEL_2222:
                    size_t v1687 = v1684;
                    goto LABEL_2228;
                  }
                  unint64_t v1304 = ((unint64_t)v1232 + v1990) & v1991;
                  unint64_t v1305 = (v1962 + v1304) & v2002;
                  size_t v1234 = v2034;
                  if (v1968 == v1971)
                  {
                    if (v1966 == v1968)
                    {
                      int v1233 = (*(uint64_t (**)(unint64_t))(v1984 + 48))((v1962 + v1304) & v2002);
                      goto LABEL_2220;
                    }
                    uint64_t v1386 = (unint64_t *)((v1987 + v1305) & 0xFFFFFFFFFFFFFFF8);
                    if (v1951 > 0x7FFFFFFE)
                    {
                      int v1233 = (*(uint64_t (**)(unint64_t))(v1979 + 48))(((unint64_t)v1386 + v1976) & v1974);
                      goto LABEL_2220;
                    }
                    unint64_t v1387 = *v1386;
                  }
                  else
                  {
                    size_t v1351 = v1305 + v2034;
                    if ((v1948 & 0x80000000) == 0)
                    {
                      unint64_t v1352 = *(void *)(v1351 + 8);
                      if (v1352 >= 0xFFFFFFFF) {
                        LODWORD(v1352) = -1;
                      }
                      int v1233 = v1352 + 1;
                      goto LABEL_2220;
                    }
                    uint64_t v1407 = (v1999 + ((v2036 + v1351) & v1998)) & v2000;
                    if (v1982 > 0x7FFFFFFD)
                    {
                      int v1233 = (*(uint64_t (**)(uint64_t))(v2001 + 48))(v1407);
                      goto LABEL_2220;
                    }
                    unint64_t v1387 = *(void *)(((v1964 + ((v1996 + v1407) & v2000)) & 0xFFFFFFFFFFFFFFF8) + 8);
                  }
                  if (v1387 >= 0xFFFFFFFF) {
                    LODWORD(v1387) = -1;
                  }
                  if ((v1387 + 1) >= 2) {
                    goto LABEL_2221;
                  }
                  goto LABEL_2224;
              }
            case 0x1Cu:
              unsigned int v366 = v77[v63];
              unsigned int v367 = v366 - 2;
              if (v366 < 2)
              {
                unsigned int v370 = v67;
                uint64_t v369 = v2060;
                uint64_t v371 = v2040;
              }
              else
              {
                if (v63 <= 3) {
                  uint64_t v368 = v63;
                }
                else {
                  uint64_t v368 = 4;
                }
                uint64_t v369 = v2060;
                unsigned int v370 = v67;
                uint64_t v371 = v2040;
                switch(v368)
                {
                  case 1:
                    int v372 = *v77;
                    goto LABEL_1197;
                  case 2:
                    int v372 = *(unsigned __int16 *)v77;
                    goto LABEL_1197;
                  case 3:
                    int v372 = *(unsigned __int16 *)v77 | (v77[2] << 16);
                    goto LABEL_1197;
                  case 4:
                    int v372 = *(_DWORD *)v77;
LABEL_1197:
                    if (v63 < 4) {
                      unsigned int v366 = (v372 | (v367 << (8 * v63))) + 2;
                    }
                    else {
                      unsigned int v366 = v372 + 2;
                    }
                    break;
                  default:
                    break;
                }
              }
              BOOL v757 = v366 == 1;
              if (v366 == 1) {
                uint64_t v758 = v369;
              }
              else {
                uint64_t v758 = v371;
              }
              if (v366 == 1) {
                uint64_t v759 = v72;
              }
              else {
                uint64_t v759 = v73;
              }
              unint64_t v760 = v63;
              (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v758 + 32))(a1, v77, v759);
              a1[v760] = v757;
              a1[v2057] = v77[v2057];
              if (v370 > 3) {
                goto LABEL_1207;
              }
              unsigned int v761 = ((1 << (8 * v370)) + 5) >> (8 * v370);
              if (v761 > 0xFFD6)
              {
                int v571 = 28;
                goto LABEL_2273;
              }
              if (v761 <= 0xD6) {
LABEL_1207:
              }
                *unint64_t v68 = 28;
              else {
                *(_WORD *)unint64_t v68 = 28;
              }
              return a1;
            case 0x1Du:
              unsigned int v373 = v77[v63];
              unsigned int v374 = v373 - 2;
              if (v373 < 2)
              {
                unsigned int v377 = v67;
                uint64_t v376 = v2060;
                uint64_t v378 = v2040;
              }
              else
              {
                if (v63 <= 3) {
                  uint64_t v375 = v63;
                }
                else {
                  uint64_t v375 = 4;
                }
                uint64_t v376 = v2060;
                unsigned int v377 = v67;
                uint64_t v378 = v2040;
                switch(v375)
                {
                  case 1:
                    int v379 = *v77;
                    goto LABEL_1215;
                  case 2:
                    int v379 = *(unsigned __int16 *)v77;
                    goto LABEL_1215;
                  case 3:
                    int v379 = *(unsigned __int16 *)v77 | (v77[2] << 16);
                    goto LABEL_1215;
                  case 4:
                    int v379 = *(_DWORD *)v77;
LABEL_1215:
                    if (v63 < 4) {
                      unsigned int v373 = (v379 | (v374 << (8 * v63))) + 2;
                    }
                    else {
                      unsigned int v373 = v379 + 2;
                    }
                    break;
                  default:
                    break;
                }
              }
              BOOL v762 = v373 == 1;
              if (v373 == 1) {
                uint64_t v763 = v376;
              }
              else {
                uint64_t v763 = v378;
              }
              if (v373 == 1) {
                uint64_t v764 = v72;
              }
              else {
                uint64_t v764 = v73;
              }
              unint64_t v765 = v63;
              (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v763 + 32))(a1, v77, v764);
              a1[v765] = v762;
              if (v377 > 3) {
                goto LABEL_1225;
              }
              unsigned int v766 = ((1 << (8 * v377)) + 5) >> (8 * v377);
              if (v766 > 0xFFD6)
              {
                int v571 = 29;
                goto LABEL_2273;
              }
              if (v766 <= 0xD6) {
LABEL_1225:
              }
                *unint64_t v68 = 29;
              else {
                *(_WORD *)unint64_t v68 = 29;
              }
              return a1;
            case 0x1Eu:
              unsigned int v380 = v77[v63];
              unsigned int v381 = v380 - 2;
              if (v380 < 2)
              {
                unsigned int v384 = v67;
                uint64_t v383 = v2060;
                uint64_t v385 = v2040;
              }
              else
              {
                if (v63 <= 3) {
                  uint64_t v382 = v63;
                }
                else {
                  uint64_t v382 = 4;
                }
                uint64_t v383 = v2060;
                unsigned int v384 = v67;
                uint64_t v385 = v2040;
                switch(v382)
                {
                  case 1:
                    int v386 = *v77;
                    goto LABEL_1233;
                  case 2:
                    int v386 = *(unsigned __int16 *)v77;
                    goto LABEL_1233;
                  case 3:
                    int v386 = *(unsigned __int16 *)v77 | (v77[2] << 16);
                    goto LABEL_1233;
                  case 4:
                    int v386 = *(_DWORD *)v77;
LABEL_1233:
                    if (v63 < 4) {
                      unsigned int v380 = (v386 | (v381 << (8 * v63))) + 2;
                    }
                    else {
                      unsigned int v380 = v386 + 2;
                    }
                    break;
                  default:
                    break;
                }
              }
              BOOL v767 = v380 == 1;
              if (v380 == 1) {
                uint64_t v768 = v383;
              }
              else {
                uint64_t v768 = v385;
              }
              if (v380 == 1) {
                uint64_t v769 = v72;
              }
              else {
                uint64_t v769 = v73;
              }
              unint64_t v770 = v63;
              (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v768 + 32))(a1, v77, v769);
              a1[v770] = v767;
              if (v384 > 3) {
                goto LABEL_1243;
              }
              unsigned int v771 = ((1 << (8 * v384)) + 5) >> (8 * v384);
              if (v771 > 0xFFD6)
              {
                int v571 = 30;
                goto LABEL_2273;
              }
              if (v771 <= 0xD6) {
LABEL_1243:
              }
                *unint64_t v68 = 30;
              else {
                *(_WORD *)unint64_t v68 = 30;
              }
              return a1;
            case 0x1Fu:
              unsigned int v387 = v77[v63];
              unsigned int v388 = v387 - 2;
              if (v387 < 2)
              {
                uint64_t v390 = v2060;
                uint64_t v391 = v2040;
              }
              else
              {
                if (v63 <= 3) {
                  uint64_t v389 = v63;
                }
                else {
                  uint64_t v389 = 4;
                }
                uint64_t v390 = v2060;
                uint64_t v391 = v2040;
                switch(v389)
                {
                  case 1:
                    int v392 = *v77;
                    goto LABEL_1251;
                  case 2:
                    int v392 = *(unsigned __int16 *)v77;
                    goto LABEL_1251;
                  case 3:
                    int v392 = *(unsigned __int16 *)v77 | (v77[2] << 16);
                    goto LABEL_1251;
                  case 4:
                    int v392 = *(_DWORD *)v77;
LABEL_1251:
                    if (v63 < 4) {
                      unsigned int v387 = (v392 | (v388 << (8 * v63))) + 2;
                    }
                    else {
                      unsigned int v387 = v392 + 2;
                    }
                    break;
                  default:
                    break;
                }
              }
              unsigned int v772 = v67;
              BOOL v773 = v387 == 1;
              if (v387 == 1) {
                uint64_t v774 = v390;
              }
              else {
                uint64_t v774 = v391;
              }
              if (v387 == 1) {
                uint64_t v775 = v72;
              }
              else {
                uint64_t v775 = v73;
              }
              (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v774 + 32))(a1, v77, v775);
              a1[v2056] = v773;
              unint64_t v776 = (unint64_t)&a1[v1997] & v2004;
              size_t v777 = (unsigned __int8 *)((unint64_t)&v77[v1997] & v2004);
              unsigned int v778 = v777[v2056];
              unsigned int v779 = v778 - 2;
              if (v778 >= 2)
              {
                if (v2056 <= 3) {
                  uint64_t v780 = v2056;
                }
                else {
                  uint64_t v780 = 4;
                }
                switch(v780)
                {
                  case 1:
                    int v781 = *v777;
                    goto LABEL_1428;
                  case 2:
                    int v781 = *(unsigned __int16 *)v777;
                    goto LABEL_1428;
                  case 3:
                    int v781 = *(unsigned __int16 *)v777 | (*(unsigned __int8 *)(((unint64_t)&v77[v1997] & v2004) + 2) << 16);
                    goto LABEL_1428;
                  case 4:
                    int v781 = *(_DWORD *)v777;
LABEL_1428:
                    if (v2056 < 4) {
                      unsigned int v778 = (v781 | (v779 << (8 * v2056))) + 2;
                    }
                    else {
                      unsigned int v778 = v781 + 2;
                    }
                    break;
                  default:
                    break;
                }
              }
              BOOL v825 = v778 == 1;
              if (v778 == 1) {
                uint64_t v826 = v390;
              }
              else {
                uint64_t v826 = v391;
              }
              (*(void (**)(unint64_t))(v826 + 32))(v776);
              *(unsigned char *)(v776 + v2056) = v825;
              if (v772 > 3) {
                goto LABEL_1435;
              }
              unsigned int v827 = ((1 << (8 * v772)) + 5) >> (8 * v772);
              if (v827 > 0xFFD6)
              {
                int v571 = 31;
                goto LABEL_2273;
              }
              if (v827 <= 0xD6) {
LABEL_1435:
              }
                *unint64_t v68 = 31;
              else {
                *(_WORD *)unint64_t v68 = 31;
              }
              return a1;
            case 0x20u:
              unsigned int v393 = v77[v63];
              unsigned int v394 = v393 - 2;
              if (v393 < 2)
              {
                unsigned int v397 = v67;
                uint64_t v396 = v2060;
                uint64_t v398 = v2040;
              }
              else
              {
                if (v63 <= 3) {
                  uint64_t v395 = v63;
                }
                else {
                  uint64_t v395 = 4;
                }
                uint64_t v396 = v2060;
                unsigned int v397 = v67;
                uint64_t v398 = v2040;
                switch(v395)
                {
                  case 1:
                    int v399 = *v77;
                    goto LABEL_1269;
                  case 2:
                    int v399 = *(unsigned __int16 *)v77;
                    goto LABEL_1269;
                  case 3:
                    int v399 = *(unsigned __int16 *)v77 | (v77[2] << 16);
                    goto LABEL_1269;
                  case 4:
                    int v399 = *(_DWORD *)v77;
LABEL_1269:
                    if (v63 < 4) {
                      unsigned int v393 = (v399 | (v394 << (8 * v63))) + 2;
                    }
                    else {
                      unsigned int v393 = v399 + 2;
                    }
                    break;
                  default:
                    break;
                }
              }
              BOOL v782 = v393 == 1;
              if (v393 == 1) {
                uint64_t v783 = v396;
              }
              else {
                uint64_t v783 = v398;
              }
              if (v393 == 1) {
                uint64_t v784 = v72;
              }
              else {
                uint64_t v784 = v73;
              }
              unint64_t v785 = v63;
              (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v783 + 32))(a1, v77, v784);
              a1[v785] = v782;
              if (v397 > 3) {
                goto LABEL_1279;
              }
              unsigned int v786 = ((1 << (8 * v397)) + 5) >> (8 * v397);
              if (v786 > 0xFFD6)
              {
                int v571 = 32;
                goto LABEL_2273;
              }
              if (v786 <= 0xD6) {
LABEL_1279:
              }
                *unint64_t v68 = 32;
              else {
                *(_WORD *)unint64_t v68 = 32;
              }
              return a1;
            case 0x21u:
              unsigned int v400 = v77[v63];
              unsigned int v401 = v400 - 2;
              if (v400 < 2)
              {
                unsigned int v404 = v67;
                uint64_t v403 = v2060;
                uint64_t v405 = v2040;
              }
              else
              {
                if (v63 <= 3) {
                  uint64_t v402 = v63;
                }
                else {
                  uint64_t v402 = 4;
                }
                uint64_t v403 = v2060;
                unsigned int v404 = v67;
                uint64_t v405 = v2040;
                switch(v402)
                {
                  case 1:
                    int v406 = *v77;
                    goto LABEL_1287;
                  case 2:
                    int v406 = *(unsigned __int16 *)v77;
                    goto LABEL_1287;
                  case 3:
                    int v406 = *(unsigned __int16 *)v77 | (v77[2] << 16);
                    goto LABEL_1287;
                  case 4:
                    int v406 = *(_DWORD *)v77;
LABEL_1287:
                    if (v63 < 4) {
                      unsigned int v400 = (v406 | (v401 << (8 * v63))) + 2;
                    }
                    else {
                      unsigned int v400 = v406 + 2;
                    }
                    break;
                  default:
                    break;
                }
              }
              BOOL v787 = v400 == 1;
              if (v400 == 1) {
                uint64_t v788 = v403;
              }
              else {
                uint64_t v788 = v405;
              }
              if (v400 == 1) {
                uint64_t v789 = v72;
              }
              else {
                uint64_t v789 = v73;
              }
              unint64_t v790 = v63;
              (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v788 + 32))(a1, v77, v789);
              a1[v790] = v787;
              if (v404 > 3) {
                goto LABEL_1297;
              }
              unsigned int v791 = ((1 << (8 * v404)) + 5) >> (8 * v404);
              if (v791 > 0xFFD6)
              {
                int v571 = 33;
                goto LABEL_2273;
              }
              if (v791 <= 0xD6) {
LABEL_1297:
              }
                *unint64_t v68 = 33;
              else {
                *(_WORD *)unint64_t v68 = 33;
              }
              return a1;
            case 0x22u:
              unsigned int v407 = v77[v63];
              unsigned int v408 = v407 - 2;
              if (v407 < 2)
              {
                unsigned int v411 = v67;
                uint64_t v410 = v2060;
                uint64_t v412 = v2040;
              }
              else
              {
                if (v63 <= 3) {
                  uint64_t v409 = v63;
                }
                else {
                  uint64_t v409 = 4;
                }
                uint64_t v410 = v2060;
                unsigned int v411 = v67;
                uint64_t v412 = v2040;
                switch(v409)
                {
                  case 1:
                    int v413 = *v77;
                    goto LABEL_1305;
                  case 2:
                    int v413 = *(unsigned __int16 *)v77;
                    goto LABEL_1305;
                  case 3:
                    int v413 = *(unsigned __int16 *)v77 | (v77[2] << 16);
                    goto LABEL_1305;
                  case 4:
                    int v413 = *(_DWORD *)v77;
LABEL_1305:
                    if (v63 < 4) {
                      unsigned int v407 = (v413 | (v408 << (8 * v63))) + 2;
                    }
                    else {
                      unsigned int v407 = v413 + 2;
                    }
                    break;
                  default:
                    break;
                }
              }
              BOOL v792 = v407 == 1;
              if (v407 == 1) {
                uint64_t v793 = v410;
              }
              else {
                uint64_t v793 = v412;
              }
              if (v407 == 1) {
                uint64_t v794 = v72;
              }
              else {
                uint64_t v794 = v73;
              }
              unint64_t v795 = v63;
              (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v793 + 32))(a1, v77, v794);
              a1[v795] = v792;
              if (v411 > 3) {
                goto LABEL_1315;
              }
              unsigned int v796 = ((1 << (8 * v411)) + 5) >> (8 * v411);
              if (v796 > 0xFFD6)
              {
                int v571 = 34;
                goto LABEL_2273;
              }
              if (v796 <= 0xD6) {
LABEL_1315:
              }
                *unint64_t v68 = 34;
              else {
                *(_WORD *)unint64_t v68 = 34;
              }
              return a1;
            case 0x23u:
              unsigned int v414 = v77[v63];
              unsigned int v415 = v414 - 2;
              if (v414 < 2)
              {
                unsigned int v418 = v67;
                uint64_t v417 = v2060;
                uint64_t v419 = v2040;
              }
              else
              {
                if (v63 <= 3) {
                  uint64_t v416 = v63;
                }
                else {
                  uint64_t v416 = 4;
                }
                uint64_t v417 = v2060;
                unsigned int v418 = v67;
                uint64_t v419 = v2040;
                switch(v416)
                {
                  case 1:
                    int v420 = *v77;
                    goto LABEL_1323;
                  case 2:
                    int v420 = *(unsigned __int16 *)v77;
                    goto LABEL_1323;
                  case 3:
                    int v420 = *(unsigned __int16 *)v77 | (v77[2] << 16);
                    goto LABEL_1323;
                  case 4:
                    int v420 = *(_DWORD *)v77;
LABEL_1323:
                    if (v63 < 4) {
                      unsigned int v414 = (v420 | (v415 << (8 * v63))) + 2;
                    }
                    else {
                      unsigned int v414 = v420 + 2;
                    }
                    break;
                  default:
                    break;
                }
              }
              BOOL v797 = v414 == 1;
              if (v414 == 1) {
                uint64_t v798 = v417;
              }
              else {
                uint64_t v798 = v419;
              }
              if (v414 == 1) {
                uint64_t v799 = v72;
              }
              else {
                uint64_t v799 = v73;
              }
              unint64_t v800 = v63;
              (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v798 + 32))(a1, v77, v799);
              a1[v800] = v797;
              if (v418 > 3) {
                goto LABEL_1333;
              }
              unsigned int v801 = ((1 << (8 * v418)) + 5) >> (8 * v418);
              if (v801 > 0xFFD6)
              {
                int v571 = 35;
                goto LABEL_2273;
              }
              if (v801 <= 0xD6) {
LABEL_1333:
              }
                *unint64_t v68 = 35;
              else {
                *(_WORD *)unint64_t v68 = 35;
              }
              return a1;
            case 0x24u:
              unsigned int v421 = v67;
              if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v2040 + 48))(v77, 1, v73))
              {
                size_t v422 = __n;
                memcpy(a1, v77, __n);
                unint64_t v423 = v77;
                uint64_t v424 = v2060;
              }
              else
              {
                (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v2040 + 32))(a1, v77, v73);
                (*(void (**)(unsigned __int8 *, void, uint64_t, uint64_t))(v2040 + 56))(a1, 0, 1, v73);
                unint64_t v423 = v77;
                uint64_t v424 = v2060;
                size_t v422 = __n;
              }
              unint64_t v470 = (void *)((unint64_t)&a1[v422 + 7] & 0xFFFFFFFFFFFFFFF8);
              unint64_t v471 = (void *)((unint64_t)&v423[v422 + 7] & 0xFFFFFFFFFFFFFFF8);
              *unint64_t v470 = *v471;
              unint64_t v472 = ((unint64_t)v470 + 15) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v473 = ((unint64_t)v471 + 15) & 0xFFFFFFFFFFFFFFF8;
              *(void *)unint64_t v472 = *(void *)v473;
              *(unsigned char *)(v472 + 8) = *(unsigned char *)(v473 + 8);
              unint64_t v474 = (void *)((v472 + v2050 + 9) & v2002);
              uint64_t v475 = (const void *)((v473 + v2050 + 9) & v2002);
              if (v1966 == v1968)
              {
                int v476 = (*(uint64_t (**)(const void *))(v1984 + 48))(v475);
                size_t v477 = v2034;
              }
              else
              {
                size_t v478 = (uint64_t *)(((unint64_t)v475 + v1987) & 0xFFFFFFFFFFFFFFF8);
                size_t v477 = v2034;
                if (v1951 <= 0x7FFFFFFE)
                {
                  uint64_t v479 = *v478;
                  if ((unint64_t)*v478 >= 0xFFFFFFFF) {
                    LODWORD(v479) = -1;
                  }
                  if ((v479 + 1) >= 2) {
                    goto LABEL_736;
                  }
                  goto LABEL_738;
                }
                int v476 = (*(uint64_t (**)(unint64_t, void, uint64_t))(v1979 + 48))(((unint64_t)v478 + v1976) & v1974, v1938, v1978);
              }
              if (v476)
              {
LABEL_736:
                memcpy(v474, v475, v477);
                goto LABEL_739;
              }
              size_t v478 = (uint64_t *)(((unint64_t)v475 + v1987) & 0xFFFFFFFFFFFFFFF8);
LABEL_738:
              (*(void (**)(void *, const void *, uint64_t))(v1984 + 32))(v474, v475, v1983);
              long long v572 = (void *)(((unint64_t)v474 + v1987) & 0xFFFFFFFFFFFFFFF8);
              void *v572 = *v478;
              unint64_t v573 = ((unint64_t)v572 + v1976) & v1974;
              (*(void (**)(unint64_t, unint64_t, uint64_t))(v1979 + 32))(v573, ((unint64_t)v478 + v1976) & v1974, v1978);
              unint64_t v574 = v1972 + v573;
              uint64_t v72 = v2033;
              v574 &= 0xFFFFFFFFFFFFFFF8;
              uint64_t v575 = (void *)((v1972 + (((unint64_t)v478 + v1976) & v1974)) & 0xFFFFFFFFFFFFFFF8);
              *(void *)unint64_t v574 = *v575;
              *(_OWORD *)((v574 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v575 + 15) & 0xFFFFFFFFFFFFFFF8);
LABEL_739:
              uint64_t v576 = (uint64_t)v475 + v477 + 10;
              *((unsigned char *)v474 + v477) = *((unsigned char *)v475 + v477);
              *(unsigned char *)(((unint64_t)v474 + v477) | 1) = *(unsigned char *)(((unint64_t)v475 + v477) | 1);
              *(unsigned char *)(((unint64_t)v474 + v477) | 2) = *(unsigned char *)(((unint64_t)v475 + v477) | 2);
              unint64_t v577 = ((unint64_t)v474 + v477 + 10) & 0xFFFFFFFFFFFFFFF8;
              long long v578 = *(_OWORD *)(v576 & 0xFFFFFFFFFFFFFFF8);
              *(unsigned char *)(v577 + 16) = *(unsigned char *)((v576 & 0xFFFFFFFFFFFFFFF8) + 16);
              *(_OWORD *)unint64_t v577 = v578;
              unint64_t v579 = ((unint64_t)v474 + v477 + 34) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v580 = ((unint64_t)v475 + v477 + 34) & 0xFFFFFFFFFFFFFFF8;
              long long v581 = *(_OWORD *)v580;
              long long v582 = *(_OWORD *)(v580 + 16);
              long long v583 = *(_OWORD *)(v580 + 32);
              *(void *)(v579 + 48) = *(void *)(v580 + 48);
              *(_OWORD *)(v579 + 16) = v582;
              *(_OWORD *)(v579 + 32) = v583;
              *(_OWORD *)unint64_t v579 = v581;
              unint64_t v584 = (void *)((v579 + 63) & 0xFFFFFFFFFFFFFFF8);
              unsigned int v585 = (void *)((v580 + 63) & 0xFFFFFFFFFFFFFFF8);
              *unint64_t v584 = *v585;
              *(void *)(((unint64_t)v584 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v585
                                                                                             + 15) & 0xFFFFFFFFFFFFFFF8);
              size_t v586 = (void *)((unint64_t)&a1[v1955] & v1954);
              unsigned int v587 = (const void *)((unint64_t)&a2[v1955] & v1954);
              if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v424 + 48))(v587, 1, v72))
              {
                memcpy(v586, v587, v1937);
              }
              else
              {
                (*(void (**)(void *, const void *, uint64_t))(v424 + 32))(v586, v587, v72);
                (*(void (**)(void *, void, uint64_t, uint64_t))(v424 + 56))(v586, 0, 1, v72);
              }
              unint64_t v588 = v1995;
              BOOL v589 = (void *)(((unint64_t)v586 + v1956) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v590 = (void *)(((unint64_t)v587 + v1956) & 0xFFFFFFFFFFFFFFF8);
              *BOOL v589 = *v590;
              unint64_t v591 = ((unint64_t)v589 + 15) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v592 = ((unint64_t)v590 + 15) & 0xFFFFFFFFFFFFFFF8;
              *(void *)unint64_t v591 = *(void *)v592;
              *(unsigned char *)(v591 + 8) = *(unsigned char *)(v592 + 8);
              long long v593 = (void *)((v1957 + v591) & v2006);
              unsigned int v594 = (const void *)((v1957 + v592) & v2006);
              if (v1967 == v1969)
              {
                int v595 = (*(uint64_t (**)(const void *))(v1986 + 48))(v594);
              }
              else
              {
                uint64_t v596 = (uint64_t *)(((unint64_t)v594 + v1988) & 0xFFFFFFFFFFFFFFF8);
                if (v1952 <= 0x7FFFFFFE)
                {
                  uint64_t v597 = *v596;
                  if ((unint64_t)*v596 >= 0xFFFFFFFF) {
                    LODWORD(v597) = -1;
                  }
                  if ((v597 + 1) >= 2) {
                    goto LABEL_753;
                  }
                  goto LABEL_755;
                }
                int v595 = (*(uint64_t (**)(unint64_t))(v1981 + 48))(((unint64_t)v596 + v1977) & v1975);
              }
              if (v595)
              {
LABEL_753:
                memcpy(v593, v594, v1995);
                goto LABEL_756;
              }
              uint64_t v596 = (uint64_t *)(((unint64_t)v594 + v1988) & 0xFFFFFFFFFFFFFFF8);
LABEL_755:
              (*(void (**)(void *, const void *, uint64_t))(v1986 + 32))(v593, v594, v1985);
              BOOL v598 = (void *)(((unint64_t)v593 + v1988) & 0xFFFFFFFFFFFFFFF8);
              *BOOL v598 = *v596;
              uint64_t v599 = v68;
              unint64_t v600 = ((unint64_t)v598 + v1977) & v1975;
              (*(void (**)(unint64_t, unint64_t, uint64_t))(v1981 + 32))(v600, ((unint64_t)v596 + v1977) & v1975, v1980);
              unint64_t v601 = v1973 + v600;
              unint64_t v68 = v599;
              v601 &= 0xFFFFFFFFFFFFFFF8;
              unint64_t v588 = v1995;
              BOOL v602 = (void *)((v1973 + (((unint64_t)v596 + v1977) & v1975)) & 0xFFFFFFFFFFFFFFF8);
              *(void *)unint64_t v601 = *v602;
              *(_OWORD *)((v601 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v602 + 15) & 0xFFFFFFFFFFFFFFF8);
LABEL_756:
              *((unsigned char *)v593 + v588) = *((unsigned char *)v594 + v588);
              *(unsigned char *)(((unint64_t)v593 + v588) | 1) = *(unsigned char *)(((unint64_t)v594 + v588) | 1);
              *(unsigned char *)(((unint64_t)v593 + v588) | 2) = *(unsigned char *)(((unint64_t)v594 + v588) | 2);
              unint64_t v603 = ((unint64_t)v593 + v588 + 10) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v604 = ((unint64_t)v594 + v588 + 10) & 0xFFFFFFFFFFFFFFF8;
              long long v605 = *(_OWORD *)v604;
              *(unsigned char *)(v603 + 16) = *(unsigned char *)(v604 + 16);
              *(_OWORD *)unint64_t v603 = v605;
              unint64_t v606 = ((unint64_t)v593 + v588 + 34) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v607 = ((unint64_t)v594 + v588 + 34) & 0xFFFFFFFFFFFFFFF8;
              long long v608 = *(_OWORD *)v607;
              long long v609 = *(_OWORD *)(v607 + 16);
              long long v610 = *(_OWORD *)(v607 + 32);
              *(void *)(v606 + 48) = *(void *)(v607 + 48);
              *(_OWORD *)(v606 + 16) = v609;
              *(_OWORD *)(v606 + 32) = v610;
              *(_OWORD *)unint64_t v606 = v608;
              uint64_t v611 = (void *)((v607 + 63) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v612 = (void *)((v606 + 63) & 0xFFFFFFFFFFFFFFF8);
              void *v612 = *v611;
              *(void *)(((unint64_t)v612 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v611
                                                                                             + 15) & 0xFFFFFFFFFFFFFFF8);
              *((unsigned char *)v586 + v1958) = *((unsigned char *)v587 + v1958);
              unint64_t v613 = ((unint64_t)v586 + v1958) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v614 = ((unint64_t)v587 + v1958) & 0xFFFFFFFFFFFFFFF8;
              *(void *)(v613 + 8) = *(void *)(v614 + 8);
              uint64_t v615 = (_OWORD *)((v613 + 23) & 0xFFFFFFFFFFFFFFF8);
              unsigned int v616 = (_OWORD *)((v614 + 23) & 0xFFFFFFFFFFFFFFF8);
              _OWORD *v615 = *v616;
              unint64_t v617 = ((unint64_t)v615 + 23) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v618 = ((unint64_t)v616 + 23) & 0xFFFFFFFFFFFFFFF8;
              *(void *)unint64_t v617 = *(void *)v618;
              *(unsigned char *)(v617 + 8) = *(unsigned char *)(v618 + 8);
              *(void *)(((unint64_t)v615 + 39) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v616
                                                                                             + 39) & 0xFFFFFFFFFFFFFFF8);
              if (v421 > 3) {
                goto LABEL_757;
              }
              unsigned int v619 = ((1 << (8 * v421)) + 5) >> (8 * v421);
              if (v619 > 0xFFD6)
              {
                int v571 = 36;
                goto LABEL_2273;
              }
              if (v619 <= 0xD6) {
LABEL_757:
              }
                *unint64_t v68 = 36;
              else {
                *(_WORD *)unint64_t v68 = 36;
              }
              break;
            case 0x25u:
              unsigned int v425 = v77[v63];
              unsigned int v426 = v425 - 2;
              if (v425 < 2)
              {
                unsigned int v429 = v67;
                uint64_t v428 = v2060;
                uint64_t v430 = v2040;
              }
              else
              {
                if (v63 <= 3) {
                  uint64_t v427 = v63;
                }
                else {
                  uint64_t v427 = 4;
                }
                uint64_t v428 = v2060;
                unsigned int v429 = v67;
                uint64_t v430 = v2040;
                switch(v427)
                {
                  case 1:
                    int v431 = *v77;
                    goto LABEL_1341;
                  case 2:
                    int v431 = *(unsigned __int16 *)v77;
                    goto LABEL_1341;
                  case 3:
                    int v431 = *(unsigned __int16 *)v77 | (v77[2] << 16);
                    goto LABEL_1341;
                  case 4:
                    int v431 = *(_DWORD *)v77;
LABEL_1341:
                    if (v63 < 4) {
                      unsigned int v425 = (v431 | (v426 << (8 * v63))) + 2;
                    }
                    else {
                      unsigned int v425 = v431 + 2;
                    }
                    break;
                  default:
                    break;
                }
              }
              BOOL v802 = v425 == 1;
              if (v425 == 1) {
                uint64_t v803 = v428;
              }
              else {
                uint64_t v803 = v430;
              }
              if (v425 == 1) {
                uint64_t v804 = v72;
              }
              else {
                uint64_t v804 = v73;
              }
              unint64_t v805 = v63;
              (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v803 + 32))(a1, v77, v804);
              a1[v805] = v802;
              a1[v2057] = v77[v2057];
              if (v429 > 3) {
                goto LABEL_1351;
              }
              unsigned int v806 = ((1 << (8 * v429)) + 5) >> (8 * v429);
              if (v806 > 0xFFD6)
              {
                int v571 = 37;
                goto LABEL_2273;
              }
              if (v806 <= 0xD6) {
LABEL_1351:
              }
                *unint64_t v68 = 37;
              else {
                *(_WORD *)unint64_t v68 = 37;
              }
              return a1;
            case 0x26u:
              unsigned int v432 = v77[v63];
              unsigned int v433 = v432 - 2;
              if (v432 < 2)
              {
                unsigned int v436 = v67;
                uint64_t v435 = v2060;
                uint64_t v437 = v2040;
              }
              else
              {
                if (v63 <= 3) {
                  uint64_t v434 = v63;
                }
                else {
                  uint64_t v434 = 4;
                }
                uint64_t v435 = v2060;
                unsigned int v436 = v67;
                uint64_t v437 = v2040;
                switch(v434)
                {
                  case 1:
                    int v438 = *v77;
                    goto LABEL_1359;
                  case 2:
                    int v438 = *(unsigned __int16 *)v77;
                    goto LABEL_1359;
                  case 3:
                    int v438 = *(unsigned __int16 *)v77 | (v77[2] << 16);
                    goto LABEL_1359;
                  case 4:
                    int v438 = *(_DWORD *)v77;
LABEL_1359:
                    if (v63 < 4) {
                      unsigned int v432 = (v438 | (v433 << (8 * v63))) + 2;
                    }
                    else {
                      unsigned int v432 = v438 + 2;
                    }
                    break;
                  default:
                    break;
                }
              }
              BOOL v807 = v432 == 1;
              if (v432 == 1) {
                uint64_t v808 = v435;
              }
              else {
                uint64_t v808 = v437;
              }
              if (v432 == 1) {
                uint64_t v809 = v72;
              }
              else {
                uint64_t v809 = v73;
              }
              unint64_t v810 = v63;
              (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v808 + 32))(a1, v77, v809);
              a1[v810] = v807;
              if (v436 > 3) {
                goto LABEL_1369;
              }
              unsigned int v811 = ((1 << (8 * v436)) + 5) >> (8 * v436);
              if (v811 > 0xFFD6)
              {
                int v571 = 38;
                goto LABEL_2273;
              }
              if (v811 <= 0xD6) {
LABEL_1369:
              }
                *unint64_t v68 = 38;
              else {
                *(_WORD *)unint64_t v68 = 38;
              }
              return a1;
            case 0x27u:
              unsigned int v439 = v77[v63];
              unsigned int v440 = v439 - 2;
              if (v439 < 2)
              {
                unsigned int v443 = v67;
                uint64_t v442 = v2060;
                uint64_t v444 = v2040;
              }
              else
              {
                if (v63 <= 3) {
                  uint64_t v441 = v63;
                }
                else {
                  uint64_t v441 = 4;
                }
                uint64_t v442 = v2060;
                unsigned int v443 = v67;
                uint64_t v444 = v2040;
                switch(v441)
                {
                  case 1:
                    int v445 = *v77;
                    goto LABEL_1377;
                  case 2:
                    int v445 = *(unsigned __int16 *)v77;
                    goto LABEL_1377;
                  case 3:
                    int v445 = *(unsigned __int16 *)v77 | (v77[2] << 16);
                    goto LABEL_1377;
                  case 4:
                    int v445 = *(_DWORD *)v77;
LABEL_1377:
                    if (v63 < 4) {
                      unsigned int v439 = (v445 | (v440 << (8 * v63))) + 2;
                    }
                    else {
                      unsigned int v439 = v445 + 2;
                    }
                    break;
                  default:
                    break;
                }
              }
              BOOL v812 = v439 == 1;
              if (v439 == 1) {
                uint64_t v813 = v442;
              }
              else {
                uint64_t v813 = v444;
              }
              if (v439 == 1) {
                uint64_t v814 = v72;
              }
              else {
                uint64_t v814 = v73;
              }
              unint64_t v815 = v63;
              (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v813 + 32))(a1, v77, v814);
              a1[v815] = v812;
              if (v443 > 3) {
                goto LABEL_1387;
              }
              unsigned int v816 = ((1 << (8 * v443)) + 5) >> (8 * v443);
              if (v816 > 0xFFD6)
              {
                int v571 = 39;
                goto LABEL_2273;
              }
              if (v816 <= 0xD6) {
LABEL_1387:
              }
                *unint64_t v68 = 39;
              else {
                *(_WORD *)unint64_t v68 = 39;
              }
              return a1;
            case 0x28u:
              unsigned int v446 = v77[v63];
              unsigned int v447 = v446 - 2;
              if (v446 < 2)
              {
                unsigned int v450 = v67;
                uint64_t v449 = v2060;
                uint64_t v451 = v2040;
              }
              else
              {
                if (v63 <= 3) {
                  uint64_t v448 = v63;
                }
                else {
                  uint64_t v448 = 4;
                }
                uint64_t v449 = v2060;
                unsigned int v450 = v67;
                uint64_t v451 = v2040;
                switch(v448)
                {
                  case 1:
                    int v452 = *v77;
                    goto LABEL_1395;
                  case 2:
                    int v452 = *(unsigned __int16 *)v77;
                    goto LABEL_1395;
                  case 3:
                    int v452 = *(unsigned __int16 *)v77 | (v77[2] << 16);
                    goto LABEL_1395;
                  case 4:
                    int v452 = *(_DWORD *)v77;
LABEL_1395:
                    if (v63 < 4) {
                      unsigned int v446 = (v452 | (v447 << (8 * v63))) + 2;
                    }
                    else {
                      unsigned int v446 = v452 + 2;
                    }
                    break;
                  default:
                    break;
                }
              }
              BOOL v817 = v446 == 1;
              if (v446 == 1) {
                uint64_t v818 = v449;
              }
              else {
                uint64_t v818 = v451;
              }
              if (v446 == 1) {
                uint64_t v819 = v72;
              }
              else {
                uint64_t v819 = v73;
              }
              unint64_t v820 = v63;
              (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v818 + 32))(a1, v77, v819);
              a1[v820] = v817;
              if (v450 > 3) {
                goto LABEL_1405;
              }
              unsigned int v821 = ((1 << (8 * v450)) + 5) >> (8 * v450);
              if (v821 > 0xFFD6)
              {
                int v571 = 40;
                goto LABEL_2273;
              }
              if (v821 <= 0xD6) {
LABEL_1405:
              }
                *unint64_t v68 = 40;
              else {
                *(_WORD *)unint64_t v68 = 40;
              }
              return a1;
            default:
              if (v67 > 3) {
                goto LABEL_395;
              }
              unsigned int v179 = ((1 << (8 * v67)) + 5) >> (8 * v67);
              uint64_t v180 = 2;
              if (v179 > 0xFFD6) {
                uint64_t v180 = 4;
              }
              if (v179 <= 0xD6) {
LABEL_395:
              }
                uint64_t v180 = 1;
              memcpy(a1, v77, v180 + v67);
              return a1;
          }
          return a1;
        case 2u:
          uint64_t v94 = v67;
          (*(void (**)(unsigned __int8 *, uint64_t))(v2060 + 8))(a1, v2033);
          unint64_t v1174 = (unint64_t)&a1[v1929] & v1991;
          if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v2040 + 48))(v1174, 1, AssociatedTypeWitness))(*(void (**)(unint64_t, uint64_t))(v2040 + 8))(v1174, AssociatedTypeWitness); {
          unint64_t v1175 = v64;
          }
          unint64_t v1176 = (v1933 + v1174) & v2002;
          if (v1966 == v1968)
          {
            int v1177 = (*(uint64_t (**)(size_t))(v1984 + 48))((v1933 + v1174) & v2002);
LABEL_1899:
            if (v1177) {
              goto LABEL_1902;
            }
            v1286 = (uint64_t *)((v1987 + v1176) & 0xFFFFFFFFFFFFFFF8);
            goto LABEL_1901;
          }
          v1286 = (uint64_t *)((v1987 + v1176) & 0xFFFFFFFFFFFFFFF8);
          if (v1951 > 0x7FFFFFFE)
          {
            int v1177 = (*(uint64_t (**)(unint64_t))(v1979 + 48))(((unint64_t)v1286 + v1976) & v1974);
            goto LABEL_1899;
          }
          uint64_t v1287 = *v1286;
          if ((unint64_t)*v1286 >= 0xFFFFFFFF) {
            LODWORD(v1287) = -1;
          }
          if ((v1287 + 1) < 2)
          {
LABEL_1901:
            (*(void (**)(unint64_t, uint64_t))(v1984 + 8))(v1176, v1983);
            swift_bridgeObjectRelease();
            (*(void (**)(unint64_t, uint64_t))(v1979 + 8))(((unint64_t)v1286 + v1976) & v1974, v1978);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
LABEL_1902:
          unint64_t v1326 = v2034;
          goto LABEL_1920;
        case 3u:
          unint64_t v1921 = v64;
          uint64_t v1160 = v67;
          long long v1178 = *(void (**)(unsigned __int8 *, uint64_t))(v2060 + 8);
          v1178(a1, v2033);
          unint64_t v1179 = (unint64_t)&a1[v1935] & v1960;
          uint64_t v1180 = v1965;
          if (v1965 == v1970)
          {
            long long v1181 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v2060 + 48);
            unint64_t v1182 = (unint64_t)&a1[v1935] & v1960;
            uint64_t v1183 = v2033;
LABEL_2088:
            unint64_t v1396 = (unint64_t)&a1[v1935] & v1960;
            int v1329 = v1181(v1182, v1180, v1183);
            goto LABEL_2089;
          }
          unint64_t v1288 = (v1989 + v1179) & v2005;
          unint64_t v1289 = (v1961 + v1288) & v2006;
          if (v1969 == v1970)
          {
            uint64_t v1180 = v1967;
            if (v1967 == v1969)
            {
              uint64_t v1183 = v1985;
              long long v1181 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v1986 + 48);
              unint64_t v1182 = (v1961 + v1288) & v2006;
              goto LABEL_2088;
            }
            unint64_t v1372 = (unint64_t *)((v1988 + v1289) & 0xFFFFFFFFFFFFFFF8);
            if (v1952 > 0x7FFFFFFE)
            {
              unint64_t v1182 = ((unint64_t)v1372 + v1977) & v1975;
              uint64_t v1183 = v1980;
              long long v1181 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v1981 + 48);
              uint64_t v1180 = v1939;
              goto LABEL_2088;
            }
            unint64_t v1373 = *v1372;
            if (v1373 >= 0xFFFFFFFF) {
              LODWORD(v1373) = -1;
            }
            if ((v1373 + 1) >= 2) {
              goto LABEL_2169;
            }
LABEL_2092:
            v1178((unsigned __int8 *)v1179, v2033);
            v1178((unsigned __int8 *)v1288, v2033);
            (*(void (**)(unint64_t, uint64_t))(v1986 + 8))(v1289, v1985);
            swift_bridgeObjectRelease();
            (*(void (**)(unint64_t, uint64_t))(v1981 + 8))((v1977 + ((v1988 + v1289) & 0xFFFFFFFFFFFFFFF8)) & v1975, v1980);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            unint64_t v1435 = (v2036 + v1289 + v1995) & v1998;
            unint64_t v1436 = *(void (**)(unint64_t, uint64_t))(v2001 + 8);
            v1436((v1999 + v1435) & v2000, v2003);
            unint64_t v1437 = (v1996 + ((v1999 + v1435) & v2000)) & v2000;
            v1436(v1437, v2003);
            swift_bridgeObjectRelease();
            unint64_t v1438 = (v1993
                   + ((((((v1964 + v1437) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v2000;
            if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v2001 + 48))(v1438, 1, v2003)) {
              v1436(v1438, v2003);
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            long long v1439 = (uint64_t *)((((((v1994 + v1438) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1440 = v1439[1];
            if ((v1440 & 0x3000000000000000) == 0) {
              sub_10001E9C0(*v1439, v1440);
            }
            swift_bridgeObjectRelease();
            unint64_t v1441 = v1435 + v2035;
            LODWORD(v1442) = -1;
            if (*(void *)(v1441 + 16) < 0xFFFFFFFFuLL) {
              uint64_t v1442 = *(void *)(v1441 + 16);
            }
            uint64_t v72 = v2033;
            if ((int)v1442 - 1 < 0)
            {
              swift_errorRelease();
              swift_errorRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if (*(void *)(v1441 + 192))
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
              }
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            sub_1000CF144(*(void *)((((v1441 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *(void *)(((((v1441 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
            goto LABEL_2169;
          }
          unint64_t v1327 = v1289 + v1995;
          if ((v1947 & 0x80000000) == 0)
          {
            unint64_t v1328 = *(void *)(v1327 + 8);
            if (v1328 >= 0xFFFFFFFF) {
              LODWORD(v1328) = -1;
            }
            int v1329 = v1328 + 1;
            goto LABEL_2090;
          }
          unint64_t v1396 = (unint64_t)&a1[v1935] & v1960;
          uint64_t v1397 = (v1999 + ((v2036 + v1327) & v1998)) & v2000;
          if (v1982 > 0x7FFFFFFD)
          {
            int v1329 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v2001 + 48))(v1397, v1982, v2003);
LABEL_2089:
            unint64_t v1179 = v1396;
LABEL_2090:
            if (v1329) {
              goto LABEL_2169;
            }
            unint64_t v1288 = (v1989 + v1179) & v2005;
            unint64_t v1289 = (v1961 + v1288) & v2006;
            goto LABEL_2092;
          }
          unint64_t v1903 = *(void *)(((v1964 + ((v1996 + v1397) & v2000)) & 0xFFFFFFFFFFFFFFF8) + 8);
          if (v1903 >= 0xFFFFFFFF) {
            LODWORD(v1903) = -1;
          }
          if ((v1903 + 1) < 2) {
            goto LABEL_2092;
          }
          goto LABEL_2169;
        case 4u:
        case 5u:
        case 7u:
          unint64_t v1157 = a1;
          unint64_t v1158 = *(void (**)(unsigned __int8 *, uint64_t))(v2060 + 8);
          uint64_t v1159 = v2033;
          goto LABEL_1678;
        case 6u:
          uint64_t v1184 = v67;
          (*(void (**)(unsigned __int8 *, uint64_t))(v2060 + 8))(a1, v2033);
          unint64_t v1185 = (unint64_t)&a1[v1928] & v1926;
          int v1186 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v1931 + 48))(v1185, 1, v2014);
          uint64_t v67 = v1184;
          size_t v76 = v2039;
          unint64_t v63 = v2056;
          if (v1186) {
            goto LABEL_321;
          }
          (*(void (**)(unint64_t, uint64_t, uint64_t))(v1931 + 8))(v1185, v2014, v1184);
          goto LABEL_1692;
        default:
          unint64_t v1921 = v64;
          uint64_t v1160 = v67;
          uint64_t v1161 = *(void (**)(unsigned __int8 *, uint64_t))(v2060 + 8);
          v1161(a1, v2033);
          unint64_t v1162 = (unint64_t)&a1[v1935] & v1960;
          uint64_t v1163 = v1965;
          if (v1965 == v1970)
          {
            unint64_t v1164 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v2060 + 48);
            unint64_t v1165 = (unint64_t)&a1[v1935] & v1960;
            uint64_t v1166 = v2033;
LABEL_2041:
            unint64_t v1392 = (unint64_t)&a1[v1935] & v1960;
            int v1322 = v1164(v1165, v1163, v1166);
            goto LABEL_2042;
          }
          unint64_t v1282 = (v1989 + v1162) & v2005;
          unint64_t v1283 = (v1961 + v1282) & v2006;
          if (v1969 == v1970)
          {
            uint64_t v1163 = v1967;
            if (v1967 == v1969)
            {
              uint64_t v1166 = v1985;
              unint64_t v1164 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v1986 + 48);
              unint64_t v1165 = (v1961 + v1282) & v2006;
              goto LABEL_2041;
            }
            unint64_t v1368 = (unint64_t *)((v1988 + v1283) & 0xFFFFFFFFFFFFFFF8);
            if (v1952 > 0x7FFFFFFE)
            {
              unint64_t v1165 = ((unint64_t)v1368 + v1977) & v1975;
              uint64_t v1166 = v1980;
              unint64_t v1164 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v1981 + 48);
              uint64_t v1163 = v1939;
              goto LABEL_2041;
            }
            unint64_t v1369 = *v1368;
            if (v1369 >= 0xFFFFFFFF) {
              LODWORD(v1369) = -1;
            }
            if ((v1369 + 1) >= 2) {
              goto LABEL_2056;
            }
          }
          else
          {
            unint64_t v1320 = v1283 + v1995;
            if ((v1947 & 0x80000000) == 0)
            {
              unint64_t v1321 = *(void *)(v1320 + 8);
              if (v1321 >= 0xFFFFFFFF) {
                LODWORD(v1321) = -1;
              }
              int v1322 = v1321 + 1;
              goto LABEL_2043;
            }
            unint64_t v1392 = (unint64_t)&a1[v1935] & v1960;
            uint64_t v1393 = (v1999 + ((v2036 + v1320) & v1998)) & v2000;
            if (v1982 > 0x7FFFFFFD)
            {
              int v1322 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v2001 + 48))(v1393, v1982, v2003);
LABEL_2042:
              unint64_t v1162 = v1392;
LABEL_2043:
              if (v1322) {
                goto LABEL_2056;
              }
              unint64_t v1282 = (v1989 + v1162) & v2005;
              unint64_t v1283 = (v1961 + v1282) & v2006;
              goto LABEL_2045;
            }
            unint64_t v1901 = *(void *)(((v1964 + ((v1996 + v1393) & v2000)) & 0xFFFFFFFFFFFFFFF8) + 8);
            if (v1901 >= 0xFFFFFFFF) {
              LODWORD(v1901) = -1;
            }
            if ((v1901 + 1) >= 2)
            {
LABEL_2056:
              unint64_t v1418 = v1162 + v66;
LABEL_2121:

LABEL_2170:
              uint64_t v67 = v1160;
              uint64_t v73 = AssociatedTypeWitness;
              size_t v76 = v2039;
              unint64_t v64 = v1921;
              uint64_t v77 = a2;
              unint64_t v63 = v2056;
              goto LABEL_321;
            }
          }
LABEL_2045:
          unint64_t v1943 = v1162;
          v1161((unsigned __int8 *)v1162, v2033);
          v1161((unsigned __int8 *)v1282, v2033);
          (*(void (**)(unint64_t, uint64_t))(v1986 + 8))(v1283, v1985);
          swift_bridgeObjectRelease();
          (*(void (**)(unint64_t, uint64_t))(v1981 + 8))((v1977 + ((v1988 + v1283) & 0xFFFFFFFFFFFFFFF8)) & v1975, v1980);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v1410 = (v2036 + v1283 + v1995) & v1998;
          unint64_t v1411 = *(void (**)(unint64_t, uint64_t))(v2001 + 8);
          v1411((v1999 + v1410) & v2000, v2003);
          unint64_t v1412 = (v1996 + ((v1999 + v1410) & v2000)) & v2000;
          v1411(v1412, v2003);
          swift_bridgeObjectRelease();
          unint64_t v1413 = (v1993
                 + ((((((v1964 + v1412) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v2000;
          if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v2001 + 48))(v1413, 1, v2003)) {
            v1411(v1413, v2003);
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v1414 = (uint64_t *)((((((v1994 + v1413) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
          unint64_t v1415 = v1414[1];
          if ((v1415 & 0x3000000000000000) == 0) {
            sub_10001E9C0(*v1414, v1415);
          }
          swift_bridgeObjectRelease();
          unint64_t v1416 = v1410 + v2035;
          LODWORD(v1417) = -1;
          if (*(void *)(v1416 + 16) < 0xFFFFFFFFuLL) {
            uint64_t v1417 = *(void *)(v1416 + 16);
          }
          uint64_t v72 = v2033;
          if ((int)v1417 - 1 < 0)
          {
            swift_errorRelease();
            swift_errorRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (*(void *)(v1416 + 192))
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          sub_1000CF144(*(void *)((((v1416 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *(void *)(((((v1416 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
          unint64_t v1162 = v1943;
          goto LABEL_2056;
      }
    case 0x1Cu:
      unsigned int v81 = a1[v2056];
      unsigned int v82 = v81 - 2;
      if (v81 >= 2)
      {
        if (v2056 <= 3) {
          uint64_t v148 = v2056;
        }
        else {
          uint64_t v148 = 4;
        }
        switch(v148)
        {
          case 1:
            goto LABEL_308;
          case 2:
            goto LABEL_310;
          case 3:
            goto LABEL_312;
          case 4:
            goto LABEL_314;
          default:
            goto LABEL_316;
        }
      }
      goto LABEL_316;
    case 0x1Du:
      unsigned int v81 = a1[v2056];
      unsigned int v82 = v81 - 2;
      if (v81 >= 2)
      {
        if (v2056 <= 3) {
          uint64_t v149 = v2056;
        }
        else {
          uint64_t v149 = 4;
        }
        switch(v149)
        {
          case 1:
            goto LABEL_308;
          case 2:
            goto LABEL_310;
          case 3:
            goto LABEL_312;
          case 4:
            goto LABEL_314;
          default:
            goto LABEL_316;
        }
      }
      goto LABEL_316;
    case 0x1Eu:
      unsigned int v81 = a1[v2056];
      unsigned int v82 = v81 - 2;
      if (v81 >= 2)
      {
        if (v2056 <= 3) {
          uint64_t v150 = v2056;
        }
        else {
          uint64_t v150 = 4;
        }
        switch(v150)
        {
          case 1:
            goto LABEL_308;
          case 2:
            goto LABEL_310;
          case 3:
            goto LABEL_312;
          case 4:
            goto LABEL_314;
          default:
            goto LABEL_316;
        }
      }
      goto LABEL_316;
    case 0x1Fu:
      unsigned int v151 = a1[v2056];
      unsigned int v152 = v151 - 2;
      if (v151 >= 2)
      {
        if (v2056 <= 3) {
          uint64_t v153 = v2056;
        }
        else {
          uint64_t v153 = 4;
        }
        switch(v153)
        {
          case 1:
            int v154 = *a1;
            goto LABEL_854;
          case 2:
            int v154 = *(unsigned __int16 *)a1;
            goto LABEL_854;
          case 3:
            int v154 = *(unsigned __int16 *)a1 | (a1[2] << 16);
            goto LABEL_854;
          case 4:
            int v154 = *(_DWORD *)a1;
LABEL_854:
            if (v2056 < 4) {
              unsigned int v151 = (v154 | (v152 << (8 * v2056))) + 2;
            }
            else {
              unsigned int v151 = v154 + 2;
            }
            break;
          default:
            break;
        }
      }
      uint64_t v125 = v67;
      size_t v126 = v2039;
      uint64_t v649 = v2060;
      if (v151 == 1)
      {
        uint64_t v650 = v2033;
      }
      else
      {
        uint64_t v649 = v2040;
        uint64_t v650 = AssociatedTypeWitness;
      }
      (*(void (**)(unsigned __int8 *, uint64_t))(v649 + 8))(a1, v650);
      char v630 = v2056;
      unsigned int v651 = (unsigned __int8 *)((unint64_t)&a1[v1997] & v2004);
      unsigned int v632 = v651[v2056];
      unsigned int v633 = v632 - 2;
      if (v632 >= 2)
      {
        if (v2056 <= 3) {
          uint64_t v652 = v2056;
        }
        else {
          uint64_t v652 = 4;
        }
        switch(v652)
        {
          case 1:
            int v635 = *v651;
            goto LABEL_874;
          case 2:
            int v635 = *(unsigned __int16 *)v651;
            goto LABEL_874;
          case 3:
            int v635 = *(unsigned __int16 *)v651 | (*(unsigned __int8 *)(((unint64_t)&a1[v1997] & v2004) + 2) << 16);
            goto LABEL_874;
          case 4:
            int v635 = *(_DWORD *)v651;
LABEL_874:
            if (v2056 >= 4) {
LABEL_870:
            }
              unsigned int v632 = v635 + 2;
            else {
LABEL_875:
            }
              unsigned int v632 = (v635 | (v633 << (8 * v630))) + 2;
            break;
          default:
            break;
        }
      }
LABEL_876:
      if (v632 == 1) {
        uint64_t v653 = *(void (**)(void))(v2060 + 8);
      }
      else {
        uint64_t v653 = *(void (**)(void))(v2040 + 8);
      }
      v653();
LABEL_880:
      unint64_t v63 = v2056;
      size_t v76 = v126;
      uint64_t v67 = v125;
      goto LABEL_321;
    case 0x20u:
      unsigned int v81 = a1[v2056];
      unsigned int v82 = v81 - 2;
      if (v81 >= 2)
      {
        if (v2056 <= 3) {
          uint64_t v155 = v2056;
        }
        else {
          uint64_t v155 = 4;
        }
        switch(v155)
        {
          case 1:
            goto LABEL_308;
          case 2:
            goto LABEL_310;
          case 3:
            goto LABEL_312;
          case 4:
            goto LABEL_314;
          default:
            goto LABEL_316;
        }
      }
      goto LABEL_316;
    case 0x21u:
      unsigned int v81 = a1[v2056];
      unsigned int v82 = v81 - 2;
      if (v81 >= 2)
      {
        if (v2056 <= 3) {
          uint64_t v156 = v2056;
        }
        else {
          uint64_t v156 = 4;
        }
        switch(v156)
        {
          case 1:
            goto LABEL_308;
          case 2:
            goto LABEL_310;
          case 3:
            goto LABEL_312;
          case 4:
            goto LABEL_314;
          default:
            goto LABEL_316;
        }
      }
      goto LABEL_316;
    case 0x22u:
      unsigned int v81 = a1[v2056];
      unsigned int v82 = v81 - 2;
      if (v81 >= 2)
      {
        if (v2056 <= 3) {
          uint64_t v157 = v2056;
        }
        else {
          uint64_t v157 = 4;
        }
        switch(v157)
        {
          case 1:
            goto LABEL_308;
          case 2:
            goto LABEL_310;
          case 3:
            goto LABEL_312;
          case 4:
            goto LABEL_314;
          default:
            goto LABEL_316;
        }
      }
      goto LABEL_316;
    case 0x23u:
      unsigned int v81 = a1[v2056];
      unsigned int v82 = v81 - 2;
      if (v81 >= 2)
      {
        if (v2056 <= 3) {
          uint64_t v158 = v2056;
        }
        else {
          uint64_t v158 = 4;
        }
        switch(v158)
        {
          case 1:
            goto LABEL_308;
          case 2:
            goto LABEL_310;
          case 3:
            goto LABEL_312;
          case 4:
            goto LABEL_314;
          default:
            goto LABEL_316;
        }
      }
      goto LABEL_316;
    case 0x24u:
      uint64_t v159 = v67;
      if (!(*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v2040 + 48))(a1, 1, AssociatedTypeWitness))(*(void (**)(unsigned __int8 *, uint64_t))(v2040 + 8))(a1, AssociatedTypeWitness); {
      unint64_t v1917 = v64;
      }
      unint64_t v160 = (((((unint64_t)&a1[__n + 7] & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + v2050 + 9) & v2002;
      if (v1966 == v1968)
      {
        int v161 = (*(uint64_t (**)(unint64_t))(v1984 + 48))((((((unint64_t)&a1[__n + 7] & 0xFFFFFFFFFFFFFFF8)
                                                                           + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                         + v2050
                                                                         + 9) & v2002);
LABEL_690:
        if (v161) {
          goto LABEL_693;
        }
        long long v457 = (uint64_t *)((v1987 + v160) & 0xFFFFFFFFFFFFFFF8);
        goto LABEL_692;
      }
      long long v457 = (uint64_t *)((v1987 + v160) & 0xFFFFFFFFFFFFFFF8);
      if (v1951 > 0x7FFFFFFE)
      {
        int v161 = (*(uint64_t (**)(unint64_t))(v1979 + 48))(((unint64_t)v457 + v1976) & v1974);
        goto LABEL_690;
      }
      uint64_t v458 = *v457;
      if ((unint64_t)*v457 >= 0xFFFFFFFF) {
        LODWORD(v458) = -1;
      }
      if ((v458 + 1) < 2)
      {
LABEL_692:
        (*(void (**)(unint64_t, uint64_t))(v1984 + 8))(v160, v1983);
        swift_bridgeObjectRelease();
        (*(void (**)(unint64_t, uint64_t))(v1979 + 8))(((unint64_t)v457 + v1976) & v1974, v1978);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
LABEL_693:
      sub_1000D31F8(*(void *)((v2034 + v160 + 10) & 0xFFFFFFFFFFFFFFF8), *(void *)(((v2034 + v160 + 10) & 0xFFFFFFFFFFFFFFF8) + 8), *(unsigned char *)(((v2034 + v160 + 10) & 0xFFFFFFFFFFFFFFF8) + 16));
      unint64_t v556 = (v2034 + v160 + 34) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v557 = *(void *)(v556 + 16);
      BOOL v558 = ((4 * (v557 >> 60)) & 0xC | ((v557 >> 60) >> 2)) != 0xF && ((4 * (v557 >> 60)) & 0xC) != 0;
      if (v557 >> 60 != 15 && !v558) {
        sub_10001E9C0(*(void *)(v556 + 8), v557);
      }

      unint64_t v559 = (unint64_t)&a1[v1955] & v1954;
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v2060 + 48))(v559, 1, v2033)) {
        (*(void (**)(unint64_t, uint64_t))(v2060 + 8))(v559, v2033);
      }
      unint64_t v560 = (v1957 + ((((v1956 + v559) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v2006;
      if (v1967 == v1969)
      {
        int v561 = (*(uint64_t (**)(size_t))(v1986 + 48))((v1957
                                                               + ((((v1956 + v559) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v2006);
      }
      else
      {
        unsigned int v562 = (uint64_t *)((v1988 + v560) & 0xFFFFFFFFFFFFFFF8);
        if (v1952 <= 0x7FFFFFFE)
        {
          uint64_t v563 = *v562;
          if ((unint64_t)*v562 >= 0xFFFFFFFF) {
            LODWORD(v563) = -1;
          }
          if ((v563 + 1) >= 2) {
            goto LABEL_712;
          }
          goto LABEL_711;
        }
        int v561 = (*(uint64_t (**)(unint64_t))(v1981 + 48))(((unint64_t)v562 + v1977) & v1975);
      }
      if (v561)
      {
LABEL_712:
        sub_1000D31F8(*(void *)((v560 + v1995 + 10) & 0xFFFFFFFFFFFFFFF8), *(void *)(((v560 + v1995 + 10) & 0xFFFFFFFFFFFFFFF8) + 8), *(unsigned char *)(((v560 + v1995 + 10) & 0xFFFFFFFFFFFFFFF8) + 16));
        unint64_t v564 = (v560 + v1995 + 34) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v565 = *(void *)(v564 + 16);
        BOOL v566 = ((4 * (v565 >> 60)) & 0xC | ((v565 >> 60) >> 2)) != 0xF && ((4 * (v565 >> 60)) & 0xC) != 0;
        if (v565 >> 60 != 15 && !v566) {
          sub_10001E9C0(*(void *)(v564 + 8), v565);
        }

        swift_bridgeObjectRelease();
        uint64_t v67 = v159;
        uint64_t v73 = AssociatedTypeWitness;
        size_t v76 = v2039;
        unint64_t v64 = v1917;
        unint64_t v63 = v2056;
        goto LABEL_321;
      }
      unsigned int v562 = (uint64_t *)((v1988 + v560) & 0xFFFFFFFFFFFFFFF8);
LABEL_711:
      (*(void (**)(unint64_t, uint64_t))(v1986 + 8))(v560, v1985);
      swift_bridgeObjectRelease();
      (*(void (**)(unint64_t, uint64_t))(v1981 + 8))(((unint64_t)v562 + v1977) & v1975, v1980);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_712;
    case 0x25u:
      unsigned int v81 = a1[v2056];
      unsigned int v82 = v81 - 2;
      if (v81 >= 2)
      {
        if (v2056 <= 3) {
          uint64_t v162 = v2056;
        }
        else {
          uint64_t v162 = 4;
        }
        switch(v162)
        {
          case 1:
            goto LABEL_308;
          case 2:
            goto LABEL_310;
          case 3:
            goto LABEL_312;
          case 4:
            goto LABEL_314;
          default:
            goto LABEL_316;
        }
      }
      goto LABEL_316;
    case 0x26u:
      unsigned int v81 = a1[v2056];
      unsigned int v82 = v81 - 2;
      if (v81 >= 2)
      {
        if (v2056 <= 3) {
          uint64_t v163 = v2056;
        }
        else {
          uint64_t v163 = 4;
        }
        switch(v163)
        {
          case 1:
            goto LABEL_308;
          case 2:
            goto LABEL_310;
          case 3:
            goto LABEL_312;
          case 4:
            goto LABEL_314;
          default:
            goto LABEL_316;
        }
      }
      goto LABEL_316;
    case 0x27u:
      unsigned int v81 = a1[v2056];
      unsigned int v82 = v81 - 2;
      if (v81 >= 2)
      {
        if (v2056 <= 3) {
          uint64_t v164 = v2056;
        }
        else {
          uint64_t v164 = 4;
        }
        switch(v164)
        {
          case 1:
            goto LABEL_308;
          case 2:
            goto LABEL_310;
          case 3:
            goto LABEL_312;
          case 4:
            goto LABEL_314;
          default:
            goto LABEL_316;
        }
      }
      goto LABEL_316;
    case 0x28u:
      unsigned int v81 = a1[v2056];
      unsigned int v82 = v81 - 2;
      if (v81 >= 2)
      {
        if (v2056 <= 3) {
          uint64_t v165 = v2056;
        }
        else {
          uint64_t v165 = 4;
        }
        switch(v165)
        {
          case 1:
LABEL_308:
            int v166 = *a1;
            if (v2056 < 4) {
              goto LABEL_313;
            }
            goto LABEL_315;
          case 2:
LABEL_310:
            int v166 = *(unsigned __int16 *)a1;
            if (v2056 >= 4) {
              goto LABEL_315;
            }
            goto LABEL_313;
          case 3:
LABEL_312:
            int v166 = *(unsigned __int16 *)a1 | (a1[2] << 16);
            if (v2056 < 4) {
              goto LABEL_313;
            }
            goto LABEL_315;
          case 4:
LABEL_314:
            int v166 = *(_DWORD *)a1;
            if (v2056 < 4) {
LABEL_313:
            }
              unsigned int v81 = (v166 | (v82 << (8 * v2056))) + 2;
            else {
LABEL_315:
            }
              unsigned int v81 = v166 + 2;
            break;
          default:
            break;
        }
      }
LABEL_316:
      uint64_t v167 = v67;
      size_t v168 = v2039;
      if (v81 == 1)
      {
        uint64_t v169 = v2060;
        unint64_t v136 = a1;
LABEL_318:
        (*(void (**)(unsigned __int8 *, uint64_t))(v169 + 8))(v136, v2033);
      }
      else
      {
        (*(void (**)(unsigned __int8 *, uint64_t))(v2040 + 8))(a1, AssociatedTypeWitness);
      }
LABEL_320:
      unint64_t v63 = v2056;
      size_t v76 = v168;
      uint64_t v67 = v167;
      goto LABEL_321;
    default:
      goto LABEL_321;
  }
}

uint64_t sub_1001C6600(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  uint64_t v89 = *(void *)(a3 + 24);
  uint64_t v87 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v7 = *(unsigned __int8 *)(v87 + 80);
  unint64_t v93 = (v6 + v7) & ~v7;
  unint64_t v8 = *(void *)(v87 + 64);
  if (v8 <= v6) {
    unint64_t v9 = v6;
  }
  else {
    unint64_t v9 = *(void *)(v87 + 64);
  }
  unint64_t v95 = v9 + 1;
  unint64_t v96 = v9;
  uint64_t v10 = *(unsigned __int8 *)(v5 + 80);
  unint64_t v97 = (((v10 | v7) + v9 + 1) & ~(v10 | v7)) + v9 + 1;
  int v94 = *(_DWORD *)(v5 + 84);
  uint64_t v11 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v12 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v13 = *(void *)(sub_10096B0E0() - 8);
  uint64_t v14 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v90 = *(_DWORD *)(v11 + 80) & 0xF8 | v14 | 7;
  unint64_t v91 = ((((*(void *)(v12 + 64) + ((v14 + ((*(void *)(v11 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v14) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  uint64_t v16 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v86 = (v16 | 7) + 16;
  uint64_t v17 = *(void *)(v13 + 64);
  uint64_t v18 = 7;
  if (!*(_DWORD *)(v13 + 84)) {
    uint64_t v18 = 8;
  }
  unint64_t v84 = ((((((((((v18
                + v17
                + ((v16
                  + ((((((v17 + ((v17 + v16 + ((v16 + 12) & ~v16)) & ~v16) + 12) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)
                    + 15) & 0xFFFFFFFFFFFFFFF8)
                  + 10) & ~v16)) & 0xFFFFFFFFFFFFFFF8)
              + 31) & 0xFFFFFFFFFFFFFFF8)
            + 15) & 0xFFFFFFFFFFFFFFF8)
          + 19) & 0xFFFFFFFFFFFFFFF8)
        + 25) & 0xFFFFFFFFFFFFFFF8)
      + 327;
  uint64_t v15 = *(_DWORD *)(v11 + 80) & 0xF8 | v14 | 7;
  unint64_t v19 = (((v84 + ((v86 + ((((v6 + v10) & ~v10) + v6 + v15) & ~v15) + v91) & ~(v16 | 7))) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v85 = v19 + 16;
  uint64_t v20 = v15 | v10 | v16;
  unint64_t v92 = ((v19 + ((v19 + 16 + v20) & ~v20) + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  int v88 = *(_DWORD *)(v87 + 84);
  uint64_t v21 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v22 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v23 = *(unsigned __int8 *)(v22 + 80);
  uint64_t v24 = *(_DWORD *)(v21 + 80) & 0xF8 | v23 | 7;
  unint64_t v25 = ((((*(void *)(v22 + 64) + ((v23 + ((*(void *)(v21 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v23) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  unint64_t v26 = (((v84 + ((v86 + ((((v8 + v7) & ~v7) + v8 + v24) & ~v24) + v25) & ~(v16 | 7))) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v27 = v26 + 16;
  uint64_t v28 = v24 | v7 | v16;
  unint64_t v29 = v26 + ((v26 + 16 + v28) & ~v28);
  unint64_t v31 = v85 + ((v20 + v6) & ~v20);
  if (v88) {
    unint64_t v32 = v8;
  }
  else {
    unint64_t v32 = v8 + 1;
  }
  uint64_t v34 = *(void *)(v4 - 8);
  unint64_t v35 = (v6 + *(unsigned __int8 *)(v34 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
  int v36 = *(_DWORD *)(v34 + 84);
  uint64_t v37 = *(void *)(v34 + 64);
  unint64_t v38 = (v31 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (!v36) {
    ++v37;
  }
  unint64_t v39 = v37 + v35;
  unint64_t v40 = ((v38 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  unint64_t v41 = ((((((v32 + v24 + ((v31 + v7) & ~v7)) & ~v24) + v25 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  unint64_t v33 = v32 + v24 + v93;
  unint64_t v42 = ((v38 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v6 > v40) {
    unint64_t v40 = v6;
  }
  if (v41 <= v25 + (v33 & ~v24) + 16) {
    unint64_t v41 = v25 + (v33 & ~v24) + 16;
  }
  if (v42 > v39) {
    unint64_t v39 = v42;
  }
  if (v40 <= v41) {
    unint64_t v43 = v41;
  }
  else {
    unint64_t v43 = v40;
  }
  if (v43 <= v39) {
    unint64_t v44 = v39;
  }
  else {
    unint64_t v44 = v43;
  }
  unint64_t v45 = v27 + ((v28 + v8) & ~v28);
  if (v94) {
    unint64_t v46 = v6;
  }
  else {
    unint64_t v46 = v6 + 1;
  }
  uint64_t v47 = *(void *)(v89 - 8);
  unint64_t v48 = v46 + v90 + ((v8 + v10) & ~v10);
  unint64_t v49 = (v8 + *(unsigned __int8 *)(v47 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80);
  uint64_t v50 = *(void *)(v47 + 64);
  unint64_t v51 = (v45 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (!*(_DWORD *)(v47 + 84)) {
    ++v50;
  }
  unint64_t v52 = v50 + v49;
  unint64_t v53 = ((v51 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v8 > v53) {
    unint64_t v53 = v8;
  }
  unint64_t v54 = ((((((v46 + v90 + ((v45 + v10) & ~v10)) & ~v90) + v91 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  if (v54 <= v91 + (v48 & ~v90) + 16) {
    unint64_t v54 = v91 + (v48 & ~v90) + 16;
  }
  unint64_t v55 = ((v51 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v55 > v52) {
    unint64_t v52 = v55;
  }
  if (v53 <= v54) {
    unint64_t v56 = v54;
  }
  else {
    unint64_t v56 = v53;
  }
  if (v56 > v52) {
    unint64_t v52 = v56;
  }
  unint64_t v57 = v52 + 1;
  if (v57 <= v44 + 1) {
    unint64_t v57 = v44 + 1;
  }
  unint64_t v58 = ((((((((((((((v46 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + v90 + 9) & ~v90) + v91 + 34) & 0xFFFFFFFFFFFFFFF8)
            + 63) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + (v24 | v7)
        + 8) & ~(v24 | v7))
      + ((((((((((((v32 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + v24 + 9) & ~v24) + v25 + 34) & 0xFFFFFFFFFFFFFFF8)
          + 63) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v59 = v96 + 2;
  uint64_t v30 = ((v10 | v7) + 1) & ~(v10 | v7);
  if (v95 > v96 + 2) {
    unint64_t v59 = v96 + 1;
  }
  if (v59 <= v93 + v8) {
    unint64_t v59 = v93 + v8;
  }
  if (v59 <= v97) {
    unint64_t v59 = v97;
  }
  if (v59 <= v92) {
    unint64_t v59 = v92;
  }
  unint64_t v60 = ((v29 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v59 > v60) {
    unint64_t v60 = v59;
  }
  if (v60 <= v85) {
    unint64_t v60 = v85;
  }
  if (v60 > v27) {
    unint64_t v27 = v60;
  }
  if (v27 <= v97 + 2) {
    unint64_t v27 = v97 + 2;
  }
  if (v27 <= ((v96 + 9) & 0xFFFFFFFFFFFFFFF8) + 8) {
    unint64_t v27 = ((v96 + 9) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  if (v27 <= (v96 & 0xFFFFFFFFFFFFFFF8) + 16) {
    unint64_t v27 = (v96 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  if (v27 <= v30 + v95) {
    unint64_t v27 = v30 + v95;
  }
  if (v27 <= v57 + 1) {
    unint64_t v61 = v57 + 1;
  }
  else {
    unint64_t v61 = v27;
  }
  if (v61 <= ((((((v58 + 8) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 8) {
    unint64_t v61 = ((((((v58 + 8) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  if (v61 <= 0x38) {
    unint64_t v61 = 56;
  }
  if (v61 > 3)
  {
    int v62 = 42;
    goto LABEL_74;
  }
  unsigned int v63 = ((1 << (8 * v61)) + 5) >> (8 * v61);
  if (v63 <= 0xFFD6)
  {
    int v62 = v63 + 41;
    if (v63 > 0xD6)
    {
      char v65 = 16;
      unsigned int v64 = a2;
LABEL_75:
      unsigned int v66 = (1 << v65) - v62;
      if ((v66 & 0x80000000) != 0) {
        unsigned int v66 = 0x7FFFFFFF;
      }
      if (v61 > 3) {
        goto LABEL_83;
      }
LABEL_80:
      unsigned int v67 = ((1 << (8 * v61)) + 5) >> (8 * v61);
      uint64_t v68 = 2;
      if (v67 > 0xFFD6) {
        uint64_t v68 = 4;
      }
      if (v67 > 0xD6) {
        goto LABEL_84;
      }
      goto LABEL_83;
    }
LABEL_74:
    unsigned int v64 = a2;
    char v65 = 8;
    goto LABEL_75;
  }
  unsigned int v66 = 0x7FFFFFFF;
  unsigned int v64 = a2;
  if (v61 <= 3) {
    goto LABEL_80;
  }
LABEL_83:
  uint64_t v68 = 1;
LABEL_84:
  if (!v64) {
    return 0;
  }
  if (v64 <= v66) {
    goto LABEL_103;
  }
  unint64_t v69 = v68 + v61;
  char v70 = 8 * v69;
  if (v69 <= 3)
  {
    unsigned int v72 = ((v64 - v66 + ~(-1 << v70)) >> v70) + 1;
    if (HIWORD(v72))
    {
      int v71 = *(_DWORD *)((char *)a1 + v69);
      if (!v71) {
        goto LABEL_103;
      }
      goto LABEL_95;
    }
    if (v72 > 0xFF)
    {
      int v71 = *(unsigned __int16 *)((char *)a1 + v69);
      if (!*(unsigned __int16 *)((char *)a1 + v69)) {
        goto LABEL_103;
      }
      goto LABEL_95;
    }
    if (v72 < 2)
    {
LABEL_103:
      if (v66)
      {
        if (v61 < 4)
        {
          unsigned int v79 = ((1 << (8 * v61)) + 5) >> (8 * v61);
          if (v79 > 0xFFD6)
          {
            unsigned int v75 = *(_DWORD *)((char *)a1 + v61);
          }
          else if (v79 >= 0xD7)
          {
            unsigned int v75 = *(unsigned __int16 *)((char *)a1 + v61) | 0xFFFF0000;
          }
          else
          {
            unsigned int v75 = *((unsigned __int8 *)a1 + v61) | 0xFFFFFF00;
          }
          unsigned int v76 = ~v75;
          if (v79 > 0xFFD6)
          {
LABEL_116:
            unsigned int v81 = 0x7FFFFFFF;
LABEL_117:
            if (v81 > v76) {
              return -v75;
            }
            else {
              return 0;
            }
          }
          int v77 = v79 + 41;
          if (v79 > 0xD6)
          {
            char v80 = 16;
LABEL_115:
            unsigned int v81 = (1 << v80) - v77;
            if ((v81 & 0x80000000) == 0) {
              goto LABEL_117;
            }
            goto LABEL_116;
          }
        }
        else
        {
          int v74 = *((unsigned __int8 *)a1 + v61);
          unsigned int v75 = v74 | 0xFFFFFF00;
          unsigned int v76 = v74 ^ 0xFF;
          int v77 = 42;
        }
        char v80 = 8;
        goto LABEL_115;
      }
      return 0;
    }
  }
  int v71 = *((unsigned __int8 *)a1 + v69);
  if (!*((unsigned char *)a1 + v69)) {
    goto LABEL_103;
  }
LABEL_95:
  int v73 = (v71 - 1) << v70;
  if (v69 > 3) {
    int v73 = 0;
  }
  if (v69)
  {
    if (v69 > 3) {
      LODWORD(v69) = 4;
    }
    switch((int)v69)
    {
      case 2:
        LODWORD(v69) = *a1;
        break;
      case 3:
        LODWORD(v69) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v69) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v69) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v66 + (v69 | v73) + 1;
}

void sub_1001C712C(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a4 + 16);
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v7 = *(void *)(v6 + 64);
  uint64_t v86 = *(void *)(a4 + 24);
  uint64_t v84 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v8 = *(unsigned __int8 *)(v84 + 80);
  unint64_t v89 = (v7 + v8) & ~v8;
  unint64_t v9 = *(void *)(v84 + 64);
  if (v9 <= v7) {
    unint64_t v10 = v7;
  }
  else {
    unint64_t v10 = *(void *)(v84 + 64);
  }
  unint64_t v92 = v10 + 1;
  unint64_t v93 = v10;
  uint64_t v11 = *(unsigned __int8 *)(v6 + 80);
  unint64_t v94 = (((v11 | v8) + v10 + 1) & ~(v11 | v8)) + v10 + 1;
  int v91 = *(_DWORD *)(v6 + 84);
  uint64_t v12 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v13 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v14 = *(void *)(sub_10096B0E0() - 8);
  uint64_t v15 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = *(_DWORD *)(v12 + 80) & 0xF8 | v15 | 7;
  uint64_t v87 = v16;
  unint64_t v88 = ((((*(void *)(v13 + 64) + ((v15 + ((*(void *)(v12 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v15) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  uint64_t v17 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v83 = (v17 | 7) + 16;
  uint64_t v18 = *(void *)(v14 + 64);
  uint64_t v19 = 7;
  if (!*(_DWORD *)(v14 + 84)) {
    uint64_t v19 = 8;
  }
  unint64_t v81 = ((((((((((v19
                + v18
                + ((v17
                  + ((((((v18 + ((v18 + v17 + ((v17 + 12) & ~v17)) & ~v17) + 12) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)
                    + 15) & 0xFFFFFFFFFFFFFFF8)
                  + 10) & ~v17)) & 0xFFFFFFFFFFFFFFF8)
              + 31) & 0xFFFFFFFFFFFFFFF8)
            + 15) & 0xFFFFFFFFFFFFFFF8)
          + 19) & 0xFFFFFFFFFFFFFFF8)
        + 25) & 0xFFFFFFFFFFFFFFF8)
      + 327;
  unint64_t v20 = (((v81 + ((v83 + ((((v7 + v11) & ~v11) + v7 + v16) & ~v16) + v88) & ~(v17 | 7))) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v82 = v20 + 16;
  uint64_t v21 = v16 | v11 | v17;
  unint64_t v90 = ((v20 + ((v20 + 16 + v21) & ~v21) + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  int v85 = *(_DWORD *)(v84 + 84);
  uint64_t v22 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v23 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v24 = *(unsigned __int8 *)(v23 + 80);
  uint64_t v25 = *(_DWORD *)(v22 + 80) & 0xF8 | v24 | 7;
  unint64_t v26 = ((((*(void *)(v23 + 64) + ((v24 + ((*(void *)(v22 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v24) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  unint64_t v27 = (((v81 + ((v83 + ((((v9 + v8) & ~v8) + v9 + v25) & ~v25) + v26) & ~(v17 | 7))) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v28 = v27 + 16;
  uint64_t v29 = v25 | v8 | v17;
  unint64_t v30 = v27 + ((v27 + 16 + v29) & ~v29);
  unint64_t v32 = v82 + ((v21 + v7) & ~v21);
  if (v85) {
    unint64_t v33 = v9;
  }
  else {
    unint64_t v33 = v9 + 1;
  }
  uint64_t v35 = *(void *)(v5 - 8);
  unint64_t v36 = (v7 + *(unsigned __int8 *)(v35 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80);
  int v37 = *(_DWORD *)(v35 + 84);
  uint64_t v38 = *(void *)(v35 + 64);
  unint64_t v39 = (v32 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (!v37) {
    ++v38;
  }
  unint64_t v40 = v38 + v36;
  unint64_t v41 = ((v39 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  unint64_t v42 = ((((((v33 + v25 + ((v32 + v8) & ~v8)) & ~v25) + v26 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  unint64_t v34 = v33 + v25 + v89;
  unint64_t v43 = ((v39 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v7 > v41) {
    unint64_t v41 = v7;
  }
  if (v42 <= v26 + (v34 & ~v25) + 16) {
    unint64_t v42 = v26 + (v34 & ~v25) + 16;
  }
  if (v43 > v40) {
    unint64_t v40 = v43;
  }
  if (v41 <= v42) {
    unint64_t v44 = v42;
  }
  else {
    unint64_t v44 = v41;
  }
  if (v44 <= v40) {
    unint64_t v45 = v40;
  }
  else {
    unint64_t v45 = v44;
  }
  unint64_t v46 = v28 + ((v29 + v9) & ~v29);
  if (v91) {
    unint64_t v47 = v7;
  }
  else {
    unint64_t v47 = v7 + 1;
  }
  unint64_t v48 = v47 + v87 + ((v9 + v11) & ~v11);
  uint64_t v49 = *(void *)(v86 - 8);
  unint64_t v50 = (v9 + *(unsigned __int8 *)(v49 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80);
  uint64_t v51 = *(void *)(v49 + 64);
  unint64_t v52 = (v46 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (!*(_DWORD *)(v49 + 84)) {
    ++v51;
  }
  unint64_t v53 = v51 + v50;
  unint64_t v54 = ((v52 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v9 > v54) {
    unint64_t v54 = v9;
  }
  unint64_t v55 = ((((((v47 + v87 + ((v46 + v11) & ~v11)) & ~v87) + v88 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  if (v55 <= v88 + (v48 & ~v87) + 16) {
    unint64_t v55 = v88 + (v48 & ~v87) + 16;
  }
  unint64_t v56 = ((v52 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v56 > v53) {
    unint64_t v53 = v56;
  }
  if (v54 <= v55) {
    unint64_t v57 = v55;
  }
  else {
    unint64_t v57 = v54;
  }
  if (v57 > v53) {
    unint64_t v53 = v57;
  }
  unint64_t v58 = v53 + 1;
  if (v58 <= v45 + 1) {
    unint64_t v58 = v45 + 1;
  }
  unint64_t v59 = ((((((((((((((v47 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + v87 + 9) & ~v87) + v88 + 34) & 0xFFFFFFFFFFFFFFF8)
            + 63) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + (v25 | v8)
        + 8) & ~(v25 | v8))
      + ((((((((((((v33 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + v25 + 9) & ~v25) + v26 + 34) & 0xFFFFFFFFFFFFFFF8)
          + 63) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v60 = v93 + 2;
  uint64_t v31 = ((v11 | v8) + 1) & ~(v11 | v8);
  if (v92 > v93 + 2) {
    unint64_t v60 = v93 + 1;
  }
  if (v60 <= v89 + v9) {
    unint64_t v60 = v89 + v9;
  }
  if (v60 <= v94) {
    unint64_t v60 = v94;
  }
  if (v60 <= v90) {
    unint64_t v60 = v90;
  }
  unint64_t v61 = ((v30 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v60 > v61) {
    unint64_t v61 = v60;
  }
  if (v61 <= v82) {
    unint64_t v61 = v82;
  }
  if (v61 > v28) {
    unint64_t v28 = v61;
  }
  if (v28 <= v94 + 2) {
    unint64_t v28 = v94 + 2;
  }
  if (v28 <= ((v93 + 9) & 0xFFFFFFFFFFFFFFF8) + 8) {
    unint64_t v28 = ((v93 + 9) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  if (v28 <= (v93 & 0xFFFFFFFFFFFFFFF8) + 16) {
    unint64_t v28 = (v93 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  if (v28 <= v31 + v92) {
    unint64_t v28 = v31 + v92;
  }
  if (v28 <= v58 + 1) {
    unint64_t v62 = v58 + 1;
  }
  else {
    unint64_t v62 = v28;
  }
  if (v62 <= ((((((v59 + 8) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 8) {
    unint64_t v62 = ((((((v59 + 8) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  if (v62 <= 0x38) {
    unint64_t v62 = 56;
  }
  char v63 = 8 * v62;
  if (v62 > 3)
  {
    int v64 = 42;
    goto LABEL_72;
  }
  unsigned int v72 = ((1 << v63) + 5) >> v63;
  if (v72 <= 0xFFD6)
  {
    int v64 = v72 + 41;
    if (v72 > 0xD6)
    {
      char v68 = 16;
      char v65 = a1;
      unsigned int v67 = a3;
      unsigned int v66 = a2;
LABEL_73:
      unsigned int v69 = (1 << v68) - v64;
      if ((v69 & 0x80000000) != 0) {
        unsigned int v69 = 0x7FFFFFFF;
      }
      if (v62 > 3) {
        goto LABEL_84;
      }
      goto LABEL_76;
    }
LABEL_72:
    char v65 = a1;
    unsigned int v67 = a3;
    unsigned int v66 = a2;
    char v68 = 8;
    goto LABEL_73;
  }
  unsigned int v69 = 0x7FFFFFFF;
  char v65 = a1;
  unsigned int v67 = a3;
  unsigned int v66 = a2;
  if (v62 > 3)
  {
LABEL_84:
    uint64_t v71 = 1;
    goto LABEL_85;
  }
LABEL_76:
  unsigned int v70 = ((1 << v63) + 5) >> v63;
  uint64_t v71 = 2;
  if (v70 > 0xFFD6) {
    uint64_t v71 = 4;
  }
  if (v70 <= 0xD6) {
    goto LABEL_84;
  }
LABEL_85:
  size_t v73 = v71 + v62;
  if (v67 <= v69)
  {
    int v74 = 0;
  }
  else if (v73 <= 3)
  {
    unsigned int v77 = ((v67 - v69 + ~(-1 << (8 * v73))) >> (8 * v73)) + 1;
    if (HIWORD(v77))
    {
      int v74 = 4;
    }
    else if (v77 >= 0x100)
    {
      int v74 = 2;
    }
    else
    {
      int v74 = v77 > 1;
    }
  }
  else
  {
    int v74 = 1;
  }
  if (v69 < v66)
  {
    unsigned int v75 = ~v69 + v66;
    if (v73 < 4)
    {
      int v76 = (v75 >> (8 * v73)) + 1;
      if (v73)
      {
        int v78 = v75 & ~(-1 << (8 * v73));
        bzero(v65, v73);
        if (v73 == 3)
        {
          *(_WORD *)char v65 = v78;
          v65[2] = BYTE2(v78);
        }
        else if (v73 == 2)
        {
          *(_WORD *)char v65 = v78;
        }
        else
        {
          *char v65 = v78;
        }
      }
    }
    else
    {
      bzero(v65, v73);
      *(_DWORD *)char v65 = v75;
      int v76 = 1;
    }
    switch(v74)
    {
      case 1:
        v65[v73] = v76;
        return;
      case 2:
        *(_WORD *)&v65[v73] = v76;
        return;
      case 3:
        goto LABEL_121;
      case 4:
        *(_DWORD *)&v65[v73] = v76;
        return;
      default:
        return;
    }
  }
  switch(v74)
  {
    case 1:
      v65[v73] = 0;
      if (!v66) {
        return;
      }
      goto LABEL_105;
    case 2:
      *(_WORD *)&v65[v73] = 0;
      if (!v66) {
        return;
      }
      goto LABEL_105;
    case 3:
LABEL_121:
      __break(1u);
      JUMPOUT(0x1001C7C3CLL);
    case 4:
      *(_DWORD *)&v65[v73] = 0;
      goto LABEL_104;
    default:
LABEL_104:
      if (!v66) {
        return;
      }
LABEL_105:
      int v79 = -v66;
      if (v62 > 3) {
        goto LABEL_106;
      }
      unsigned int v80 = ((1 << v63) + 5) >> v63;
      if (v80 > 0xFFD6)
      {
        *(_DWORD *)&v65[v62] = v79;
      }
      else if (v80 <= 0xD6)
      {
LABEL_106:
        v65[v62] = v79;
      }
      else
      {
        *(_WORD *)&v65[v62] = v79;
      }
      return;
  }
}

uint64_t sub_1001C7C64(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v5 = *(void *)(v4 + 64);
  uint64_t v71 = *(void *)(a2 + 24);
  uint64_t v68 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v6 = *(unsigned __int8 *)(v68 + 80);
  unint64_t v77 = (v5 + v6) & ~v6;
  unint64_t v7 = *(void *)(v68 + 64);
  if (v7 <= v5) {
    unint64_t v8 = v5;
  }
  else {
    unint64_t v8 = *(void *)(v68 + 64);
  }
  unint64_t v80 = v8;
  unint64_t v79 = v8 + 1;
  uint64_t v9 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v73 = v9 | v6;
  unint64_t v81 = (((v9 | v6) + v8 + 1) & ~(v9 | v6)) + v8 + 1;
  int v78 = *(_DWORD *)(v4 + 84);
  uint64_t v74 = v3;
  uint64_t v10 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v11 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v12 = *(void *)(sub_10096B0E0() - 8);
  uint64_t v70 = v9;
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v72 = *(_DWORD *)(v10 + 80) & 0xF8 | v13 | 7;
  unint64_t v75 = ((((*(void *)(v11 + 64) + ((v13 + ((*(void *)(v10 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v13) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  uint64_t v15 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v67 = (v15 | 7) + 16;
  uint64_t v16 = *(void *)(v12 + 64);
  uint64_t v17 = 7;
  if (!*(_DWORD *)(v12 + 84)) {
    uint64_t v17 = 8;
  }
  unint64_t v65 = ((((((((((v17
                + v16
                + ((v15
                  + ((((((v16 + ((v16 + v15 + ((v15 + 12) & ~v15)) & ~v15) + 12) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)
                    + 15) & 0xFFFFFFFFFFFFFFF8)
                  + 10) & ~v15)) & 0xFFFFFFFFFFFFFFF8)
              + 31) & 0xFFFFFFFFFFFFFFF8)
            + 15) & 0xFFFFFFFFFFFFFFF8)
          + 19) & 0xFFFFFFFFFFFFFFF8)
        + 25) & 0xFFFFFFFFFFFFFFF8)
      + 327;
  uint64_t v14 = *(_DWORD *)(v10 + 80) & 0xF8 | v13 | 7;
  unint64_t v18 = (((v65 + ((v67 + ((((v5 + v9) & ~v9) + v5 + v14) & ~v14) + v75) & ~(v15 | 7))) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v66 = v18 + 16;
  uint64_t v19 = v14 | v9 | v15;
  unint64_t v76 = ((v18 + ((v18 + 16 + v19) & ~v19) + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  int v69 = *(_DWORD *)(v68 + 84);
  uint64_t v20 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v21 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v22 = *(unsigned __int8 *)(v21 + 80);
  uint64_t v23 = *(_DWORD *)(v20 + 80) & 0xF8 | v22 | 7;
  unint64_t v24 = ((((*(void *)(v21 + 64) + ((v22 + ((*(void *)(v20 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v22) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  unint64_t v25 = (((v65 + ((v67 + ((((v7 + v6) & ~v6) + v7 + v23) & ~v23) + v24) & ~(v15 | 7))) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v26 = v25 + 16;
  uint64_t v27 = v23 | v6 | v15;
  unint64_t v28 = v25 + ((v25 + 16 + v27) & ~v27);
  unint64_t v30 = v66 + ((v19 + v5) & ~v19);
  if (v69) {
    unint64_t v31 = v7;
  }
  else {
    unint64_t v31 = v7 + 1;
  }
  uint64_t v33 = *(void *)(v74 - 8);
  unint64_t v34 = (v5 + *(unsigned __int8 *)(v33 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
  int v35 = *(_DWORD *)(v33 + 84);
  uint64_t v36 = *(void *)(v33 + 64);
  unint64_t v37 = (v30 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (!v35) {
    ++v36;
  }
  unint64_t v38 = v36 + v34;
  unint64_t v39 = ((v37 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  unint64_t v40 = ((((((v31 + v23 + ((v30 + v6) & ~v6)) & ~v23) + v24 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  unint64_t v32 = v31 + v23 + v77;
  unint64_t v41 = ((v37 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v5 > v39) {
    unint64_t v39 = v5;
  }
  if (v40 <= v24 + (v32 & ~v23) + 16) {
    unint64_t v40 = v24 + (v32 & ~v23) + 16;
  }
  if (v41 > v38) {
    unint64_t v38 = v41;
  }
  if (v39 <= v40) {
    unint64_t v42 = v40;
  }
  else {
    unint64_t v42 = v39;
  }
  if (v42 <= v38) {
    unint64_t v43 = v38;
  }
  else {
    unint64_t v43 = v42;
  }
  unint64_t v44 = v26 + ((v27 + v7) & ~v27);
  if (v78) {
    unint64_t v45 = v5;
  }
  else {
    unint64_t v45 = v5 + 1;
  }
  uint64_t v46 = *(void *)(v71 - 8);
  unint64_t v47 = v45 + v72 + ((v7 + v70) & ~v70);
  unint64_t v48 = (v7 + *(unsigned __int8 *)(v46 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80);
  uint64_t v49 = *(void *)(v46 + 64);
  unint64_t v50 = (v44 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (!*(_DWORD *)(v46 + 84)) {
    ++v49;
  }
  unint64_t v51 = v49 + v48;
  unint64_t v52 = ((v50 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v7 > v52) {
    unint64_t v52 = v7;
  }
  unint64_t v53 = ((((((v45 + v72 + ((v44 + v70) & ~v70)) & ~v72) + v75 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  if (v53 <= v75 + (v47 & ~v72) + 16) {
    unint64_t v53 = v75 + (v47 & ~v72) + 16;
  }
  unint64_t v54 = ((v50 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v54 > v51) {
    unint64_t v51 = v54;
  }
  if (v52 <= v53) {
    unint64_t v55 = v53;
  }
  else {
    unint64_t v55 = v52;
  }
  if (v55 > v51) {
    unint64_t v51 = v55;
  }
  unint64_t v56 = v51 + 1;
  if (v56 <= v43 + 1) {
    unint64_t v56 = v43 + 1;
  }
  unint64_t v57 = ((((((((((((((v45 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + v72 + 9) & ~v72) + v75 + 34) & 0xFFFFFFFFFFFFFFF8)
            + 63) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + (v23 | v6)
        + 8) & ~(v23 | v6))
      + ((((((((((((v31 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + v23 + 9) & ~v23) + v24 + 34) & 0xFFFFFFFFFFFFFFF8)
          + 63) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v58 = v80 + 2;
  uint64_t v29 = (v73 + 1) & ~v73;
  if (v79 > v80 + 2) {
    unint64_t v58 = v80 + 1;
  }
  if (v58 <= v77 + v7) {
    unint64_t v58 = v77 + v7;
  }
  if (v58 <= v81) {
    unint64_t v58 = v81;
  }
  if (v58 <= v76) {
    unint64_t v58 = v76;
  }
  unint64_t v59 = ((v28 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v58 > v59) {
    unint64_t v59 = v58;
  }
  if (v59 <= v66) {
    unint64_t v59 = v66;
  }
  if (v59 > v26) {
    unint64_t v26 = v59;
  }
  if (v26 <= v81 + 2) {
    unint64_t v26 = v81 + 2;
  }
  if (v26 <= ((v80 + 9) & 0xFFFFFFFFFFFFFFF8) + 8) {
    unint64_t v26 = ((v80 + 9) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  if (v26 <= (v80 & 0xFFFFFFFFFFFFFFF8) + 16) {
    unint64_t v26 = (v80 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  if (v26 <= v29 + v79) {
    unint64_t v26 = v29 + v79;
  }
  if (v26 <= v56 + 1) {
    unint64_t v60 = v56 + 1;
  }
  else {
    unint64_t v60 = v26;
  }
  if (v60 <= ((((((v57 + 8) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 8) {
    unint64_t v60 = ((((((v57 + 8) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  if (v60 <= 0x38) {
    unint64_t v60 = 56;
  }
  if (v60 > 3) {
    goto LABEL_71;
  }
  unsigned int v62 = ((1 << (8 * v60)) + 5) >> (8 * v60);
  if (v62 > 0xFFD6)
  {
    uint64_t result = *(unsigned int *)&a1[v60];
  }
  else
  {
    if (v62 <= 0xD6)
    {
LABEL_71:
      uint64_t result = a1[v60];
      goto LABEL_76;
    }
    uint64_t result = *(unsigned __int16 *)&a1[v60];
  }
LABEL_76:
  if (result >= 0x29)
  {
    if (v60 <= 3) {
      uint64_t v63 = v60;
    }
    else {
      uint64_t v63 = 4;
    }
    switch(v63)
    {
      case 1:
        int v64 = *a1;
        if (v60 < 4) {
          goto LABEL_86;
        }
        goto LABEL_88;
      case 2:
        int v64 = *(unsigned __int16 *)a1;
        if (v60 >= 4) {
          goto LABEL_88;
        }
        goto LABEL_86;
      case 3:
        int v64 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        if (v60 < 4) {
          goto LABEL_86;
        }
        goto LABEL_88;
      case 4:
        int v64 = *(_DWORD *)a1;
        if (v60 < 4) {
LABEL_86:
        }
          uint64_t result = (v64 | ((result - 41) << (8 * v60))) + 41;
        else {
LABEL_88:
        }
          uint64_t result = (v64 + 41);
        break;
      default:
        return result;
    }
  }
  return result;
}

void sub_1001C85EC(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  uint64_t v78 = *(void *)(a3 + 24);
  uint64_t v76 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v7 = *(unsigned __int8 *)(v76 + 80);
  uint64_t v79 = v7;
  unint64_t v87 = (v6 + v7) & ~v7;
  unint64_t v8 = *(void *)(v76 + 64);
  unint64_t v9 = v87 + v8;
  if (v8 <= v6) {
    unint64_t v10 = v6;
  }
  else {
    unint64_t v10 = *(void *)(v76 + 64);
  }
  unint64_t v82 = v10 + 1;
  unint64_t v83 = v10;
  if (v10 + 1 > v9) {
    unint64_t v9 = v10 + 1;
  }
  uint64_t v12 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v13 = v12 | v7;
  uint64_t v85 = v13;
  unint64_t v11 = v10 + 1;
  unint64_t v81 = ((v13 + v11) & ~v13) + v11;
  if (v81 <= v9) {
    unint64_t v14 = v9;
  }
  else {
    unint64_t v14 = ((v13 + v11) & ~v13) + v11;
  }
  int v88 = *(_DWORD *)(v5 + 84);
  uint64_t v86 = v4;
  uint64_t v15 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v16 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v17 = *(void *)(sub_10096B0E0() - 8);
  uint64_t v18 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v80 = *(_DWORD *)(v15 + 80) & 0xF8 | v18 | 7;
  unint64_t v84 = ((((*(void *)(v16 + 64) + ((v18 + ((*(void *)(v15 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v18) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  uint64_t v19 = *(unsigned __int8 *)(v17 + 80);
  uint64_t v75 = (v19 | 7) + 16;
  uint64_t v20 = *(void *)(v17 + 64);
  uint64_t v21 = 7;
  if (!*(_DWORD *)(v17 + 84)) {
    uint64_t v21 = 8;
  }
  unint64_t v73 = ((((((((((v21
                + v20
                + ((v19
                  + ((((((v20 + ((v20 + v19 + ((v19 + 12) & ~v19)) & ~v19) + 12) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)
                    + 15) & 0xFFFFFFFFFFFFFFF8)
                  + 10) & ~v19)) & 0xFFFFFFFFFFFFFFF8)
              + 31) & 0xFFFFFFFFFFFFFFF8)
            + 15) & 0xFFFFFFFFFFFFFFF8)
          + 19) & 0xFFFFFFFFFFFFFFF8)
        + 25) & 0xFFFFFFFFFFFFFFF8)
      + 327;
  unint64_t v22 = (((v73 + ((v75 + ((((v6 + v12) & ~v12) + v6 + v80) & ~v80) + v84) & ~(v19 | 7))) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v74 = v22 + 16;
  uint64_t v23 = *(_DWORD *)(v15 + 80) & 0xF8 | v18 | 7 | v12 | v19;
  unint64_t v24 = ((v22 + ((v22 + 16 + v23) & ~v23) + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v24 <= v14) {
    unint64_t v24 = v14;
  }
  unint64_t v72 = v24;
  int v77 = *(_DWORD *)(v76 + 84);
  uint64_t v25 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v26 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v27 = *(unsigned __int8 *)(v26 + 80);
  unint64_t v28 = *(void *)(v26 + 64) + ((v27 + ((*(void *)(v25 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v27);
  uint64_t v29 = *(_DWORD *)(v25 + 80) & 0xF8 | v27 | 7;
  unint64_t v30 = ((((v28 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16;
  unint64_t v31 = (((v73 + ((v75 + ((((v8 + v79) & ~v79) + v8 + v29) & ~v29) + v30) & ~(v19 | 7))) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v32 = v31 + 16;
  uint64_t v33 = v29 | v79 | v19;
  unint64_t v34 = ((v31 + ((v31 + 16 + v33) & ~v33) + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v34 <= v72) {
    unint64_t v34 = v72;
  }
  if (v74 > v34) {
    unint64_t v34 = v74;
  }
  if (v32 > v34) {
    unint64_t v34 = v32;
  }
  if (v82 > v34) {
    unint64_t v34 = v83 + 1;
  }
  if (v81 + 2 > v34) {
    unint64_t v34 = v81 + 2;
  }
  unint64_t v35 = v83 + 2;
  if (((v83 + 9) & 0xFFFFFFFFFFFFFFF8) + 8 > v34) {
    unint64_t v34 = ((v83 + 9) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  if (v35 > v34) {
    unint64_t v34 = v83 + 2;
  }
  if ((v83 & 0xFFFFFFFFFFFFFFF8) + 16 > v34) {
    unint64_t v34 = (v83 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  if (v34 <= v82) {
    unint64_t v34 = v83 + 1;
  }
  if (v34 <= v87 + v8) {
    unint64_t v34 = v87 + v8;
  }
  if (v34 <= ((v85 + 1) & ~v85) + v82) {
    unint64_t v34 = ((v85 + 1) & ~v85) + v82;
  }
  if (v34 <= v82) {
    unint64_t v36 = v83 + 1;
  }
  else {
    unint64_t v36 = v34;
  }
  unint64_t v37 = v74 + ((v23 + v6) & ~v23);
  unint64_t v38 = (v37 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v39 = (v37 + v79) & ~v79;
  if (v77) {
    unint64_t v40 = v8;
  }
  else {
    unint64_t v40 = v8 + 1;
  }
  unint64_t v41 = ((((((v40 + v29 + v39) & ~v29) + v30 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v41 <= ((v38 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) {
    unint64_t v41 = ((v38 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  if (v30 + ((v40 + v29 + v87) & ~v29) + 16 > v41) {
    unint64_t v41 = v30 + ((v40 + v29 + v87) & ~v29) + 16;
  }
  unint64_t v42 = ((v38 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v42 > v41) {
    unint64_t v41 = v42;
  }
  if (v6 <= v41) {
    unint64_t v43 = v41;
  }
  else {
    unint64_t v43 = v6;
  }
  uint64_t v44 = *(void *)(v86 - 8);
  uint64_t v45 = *(void *)(v44 + 64);
  if (!*(_DWORD *)(v44 + 84)) {
    ++v45;
  }
  unint64_t v46 = v45 + ((v6 + *(unsigned __int8 *)(v44 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80));
  if (v46 <= v43) {
    unint64_t v46 = v43;
  }
  if (v6 <= v46) {
    unint64_t v47 = v46;
  }
  else {
    unint64_t v47 = v6;
  }
  unint64_t v48 = v32 + ((v33 + v8) & ~v33);
  unint64_t v49 = (v48 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v50 = (v48 + v12) & ~v12;
  if (v88) {
    unint64_t v51 = v6;
  }
  else {
    unint64_t v51 = v6 + 1;
  }
  unint64_t v52 = ((((((v51 + v80 + v50) & ~v80) + v84 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v52 <= ((v49 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) {
    unint64_t v52 = ((v49 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  if (v84 + ((v51 + v80 + ((v8 + v12) & ~v12)) & ~v80) + 16 > v52) {
    unint64_t v52 = v84 + ((v51 + v80 + ((v8 + v12) & ~v12)) & ~v80) + 16;
  }
  unint64_t v53 = ((v49 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v53 > v52) {
    unint64_t v52 = v53;
  }
  if (v8 <= v52) {
    unint64_t v54 = v52;
  }
  else {
    unint64_t v54 = v8;
  }
  uint64_t v55 = *(void *)(v78 - 8);
  unint64_t v56 = (v8 + *(unsigned __int8 *)(v55 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80);
  uint64_t v57 = *(void *)(v55 + 64);
  if (!*(_DWORD *)(v55 + 84)) {
    ++v57;
  }
  unint64_t v58 = v57 + v56;
  if (v58 <= v54) {
    unint64_t v58 = v54;
  }
  if (v8 > v58) {
    unint64_t v58 = v8;
  }
  unint64_t v59 = v58 + 1;
  if (v59 <= v47 + 1) {
    unint64_t v59 = v47 + 1;
  }
  if (v36 <= v59 + 1) {
    unint64_t v60 = v59 + 1;
  }
  else {
    unint64_t v60 = v36;
  }
  if (v60 <= v35) {
    unint64_t v60 = v83 + 2;
  }
  if (v60 <= v82) {
    unint64_t v60 = v83 + 1;
  }
  if (v60 <= v81) {
    unint64_t v60 = v81;
  }
  unint64_t v61 = ((((((((((((((v51 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + v80 + 9) & ~v80) + v84 + 34) & 0xFFFFFFFFFFFFFFF8)
            + 63) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + (v29 | v79)
        + 8) & ~(v29 | v79))
      + ((((((((((((v40 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + v29 + 9) & ~v29) + v30 + 34) & 0xFFFFFFFFFFFFFFF8)
          + 63) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8);
  if (v60 <= v82) {
    unint64_t v60 = v83 + 1;
  }
  unint64_t v62 = ((((((v61 + 8) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v60 <= v62) {
    unint64_t v60 = v62;
  }
  if (v60 <= v35) {
    unint64_t v60 = v83 + 2;
  }
  if (v60 <= v82) {
    unint64_t v60 = v83 + 1;
  }
  if (v60 <= 0x38) {
    size_t v63 = 56;
  }
  else {
    size_t v63 = v60;
  }
  if (a2 > 0x28)
  {
    unsigned int v64 = a2 - 41;
    if (v63 < 4)
    {
      int v67 = (v64 >> (8 * v63)) + 41;
      v64 &= ~(-1 << (8 * v63));
      unint64_t v65 = a1;
      uint64_t v68 = (int *)&a1[v63];
      unsigned int v69 = ((1 << (8 * v63)) + 5) >> (8 * v63);
      if (v69 > 0xFFD6)
      {
        *uint64_t v68 = v67;
      }
      else if (v69 > 0xD6)
      {
        *(_WORD *)uint64_t v68 = v67;
      }
      else
      {
        *(unsigned char *)uint64_t v68 = v67;
      }
    }
    else
    {
      unint64_t v65 = a1;
      a1[v63] = 41;
    }
    if (v63 >= 4) {
      int v70 = 4;
    }
    else {
      int v70 = v63;
    }
    bzero(v65, v63);
    switch(v70)
    {
      case 2:
        *(_WORD *)unint64_t v65 = v64;
        break;
      case 3:
        *(_WORD *)unint64_t v65 = v64;
        v65[2] = BYTE2(v64);
        break;
      case 4:
        *(_DWORD *)unint64_t v65 = v64;
        break;
      default:
        *unint64_t v65 = v64;
        break;
    }
  }
  else
  {
    if (v63 > 3)
    {
LABEL_99:
      a1[v63] = a2;
      return;
    }
    unsigned int v66 = ((1 << (8 * v63)) + 5) >> (8 * v63);
    if (v66 > 0xFFD6)
    {
      *(_DWORD *)&a1[v63] = a2;
    }
    else
    {
      if (v66 <= 0xD6) {
        goto LABEL_99;
      }
      *(_WORD *)&a1[v63] = a2;
    }
  }
}

uint64_t type metadata accessor for PersistenceTrigger()
{
  return swift_getGenericMetadata();
}

uint64_t sub_1001C9044@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  unsigned int v192 = a2;
  uint64_t v4 = a1[3];
  uint64_t v5 = (ValueMetadata *)a1[4];
  unint64_t v6 = (ValueMetadata *)a1[5];
  uint64_t v193 = a1[2];
  uint64_t v3 = v193;
  uint64_t v194 = v4;
  unsigned int v195 = v5;
  unsigned int v196 = v6;
  uint64_t v176 = type metadata accessor for ItemReconciliation();
  uint64_t v175 = *(void *)(v176 - 8);
  __chkstk_darwin(v176);
  unsigned int v173 = (char *)&v170 - v7;
  uint64_t v194 = v4;
  unsigned int v195 = v5;
  unsigned int v196 = v6;
  uint64_t v172 = type metadata accessor for TestingOperation();
  uint64_t v171 = *(void *)(v172 - 8);
  __chkstk_darwin(v172);
  unint64_t v9 = (char *)&v170 - v8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = swift_getAssociatedTypeWitness();
  uint64_t v190 = v5;
  uint64_t v188 = v3;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  unsigned int v189 = v6;
  uint64_t v187 = v4;
  uint64_t v13 = swift_getAssociatedConformanceWitness();
  uint64_t v193 = AssociatedTypeWitness;
  uint64_t v194 = v11;
  unsigned int v195 = (ValueMetadata *)AssociatedConformanceWitness;
  unsigned int v196 = (ValueMetadata *)v13;
  unint64_t v14 = (void *)type metadata accessor for ThrottlingKey();
  uint64_t v177 = *(v14 - 1);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v170 - v15;
  uint64_t v182 = v11;
  uint64_t v183 = AssociatedTypeWitness;
  uint64_t v193 = AssociatedTypeWitness;
  uint64_t v194 = v11;
  uint64_t v180 = (ValueMetadata *)v13;
  unsigned int v181 = (ValueMetadata *)AssociatedConformanceWitness;
  unsigned int v195 = (ValueMetadata *)AssociatedConformanceWitness;
  unsigned int v196 = (ValueMetadata *)v13;
  uint64_t v17 = type metadata accessor for ReconciliationID();
  uint64_t v18 = sub_10096C890();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v178 = v18;
  uint64_t v179 = v19;
  uint64_t v20 = __chkstk_darwin(v18);
  unsigned int v174 = (char *)&v170 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __chkstk_darwin(v20);
  size_t v170 = (char *)&v170 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v26 = (char *)&v170 - v25;
  uint64_t v27 = __chkstk_darwin(v24);
  uint64_t v29 = (char *)&v170 - v28;
  uint64_t v186 = (int8x16_t *)v17;
  uint64_t v185 = *(void *)(v17 - 8);
  uint64_t v30 = __chkstk_darwin(v27);
  unint64_t v32 = (char *)&v170 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = __chkstk_darwin(v30);
  unint64_t v35 = (char *)&v170 - v34;
  uint64_t v36 = __chkstk_darwin(v33);
  unint64_t v38 = (char *)&v170 - v37;
  uint64_t v39 = __chkstk_darwin(v36);
  uint64_t v184 = (char *)&v170 - v40;
  __chkstk_darwin(v39);
  unint64_t v42 = (char *)&v170 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, void *))(v43 + 16))(v42, v191, a1);
  uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch((int)EnumCaseMultiPayload)
  {
    case 1:
    case 2:
    case 3:
    case 9:
    case 17:
    case 24:
    case 25:
    case 26:
    case 29:
    case 30:
    case 32:
    case 33:
    case 34:
    case 35:
    case 38:
    case 39:
    case 40:
      uint64_t v121 = v184;
      uint64_t v122 = v185;
      unsigned int v123 = v42;
      uint64_t v124 = v186;
      (*(void (**)(char *, char *, int8x16_t *))(v185 + 32))(v184, v123, v186);
      sub_1005EC558(v124, (uint64_t)v192);
      (*(void (**)(char *, int8x16_t *))(v122 + 8))(v121, v124);
      uint64_t v193 = v187;
      uint64_t v194 = v188;
      unsigned int v195 = v189;
      unsigned int v196 = v190;
      type metadata accessor for PersistenceTrigger();
      break;
    case 4:
      unint64_t v50 = v186;
      unint64_t v51 = &v42[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      unint64_t v53 = v184;
      uint64_t v52 = v185;
      unint64_t v54 = *(void (**)(char *, char *, int8x16_t *))(v185 + 32);
      v54(v184, v42, v50);
      v54(v38, v51, v50);
      uint64_t v193 = v182;
      uint64_t v194 = v183;
      unsigned int v195 = v180;
      unsigned int v196 = v181;
      type metadata accessor for ReconciliationID();
      uint64_t v55 = (uint64_t)v192 + *(int *)(swift_getTupleTypeMetadata2() + 48);
      sub_1005EC558(v50, (uint64_t)v192);
      unint64_t v56 = *(void (**)(char *, int8x16_t *))(v52 + 8);
      v56(v53, v50);
      sub_1005EC558(v50, v55);
      v56(v38, v50);
      uint64_t v193 = v187;
      uint64_t v194 = v188;
      unsigned int v195 = v189;
      unsigned int v196 = v190;
      type metadata accessor for PersistenceTrigger();
      break;
    case 5:
      uint64_t v57 = v188;
      unint64_t v58 = v190;
      type metadata accessor for SnapshotItem();
      uint64_t v59 = sub_10096C890();
      TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
      unint64_t v61 = &v42[*(int *)(TupleTypeMetadata3 + 48)];
      uint64_t v62 = *(void *)&v42[*(int *)(TupleTypeMetadata3 + 64)];
      size_t v63 = *(void (**)(_OWORD *, char *, uint64_t))(*(void *)(v59 - 8) + 32);
      unsigned int v64 = v192;
      v63(v192, v42, v59);
      v63((_OWORD *)((char *)v64 + *(int *)(TupleTypeMetadata3 + 48)), v61, v59);
      *(void *)((char *)v64 + *(int *)(TupleTypeMetadata3 + 64)) = v62;
      uint64_t v193 = v187;
      uint64_t v194 = v57;
      unsigned int v195 = v189;
      unsigned int v196 = v58;
      type metadata accessor for PersistenceTrigger();
      break;
    case 6:
      uint64_t v65 = v187;
      unsigned int v66 = v189;
      type metadata accessor for SnapshotItem();
      uint64_t v67 = sub_10096C890();
      uint64_t v68 = swift_getTupleTypeMetadata3();
      unsigned int v69 = &v42[*(int *)(v68 + 48)];
      uint64_t v70 = *(void *)&v42[*(int *)(v68 + 64)];
      uint64_t v71 = *(void (**)(_OWORD *, char *, uint64_t))(*(void *)(v67 - 8) + 32);
      unint64_t v72 = v192;
      v71(v192, v42, v67);
      v71((_OWORD *)((char *)v72 + *(int *)(v68 + 48)), v69, v67);
      *(void *)((char *)v72 + *(int *)(v68 + 64)) = v70;
      uint64_t v193 = v65;
      uint64_t v194 = v188;
      unsigned int v195 = v66;
      unsigned int v196 = v190;
      type metadata accessor for PersistenceTrigger();
      break;
    case 7:
      uint64_t v73 = v188;
      unint64_t v74 = v190;
      uint64_t v75 = type metadata accessor for SnapshotItem();
      (*(void (**)(_OWORD *, char *, uint64_t))(*(void *)(v75 - 8) + 32))(v192, v42, v75);
      uint64_t v193 = v187;
      uint64_t v194 = v73;
      unsigned int v195 = v189;
      unsigned int v196 = v74;
      type metadata accessor for PersistenceTrigger();
      break;
    case 8:
      uint64_t v145 = v187;
      uint64_t v146 = v189;
      uint64_t v147 = type metadata accessor for SnapshotItem();
      (*(void (**)(_OWORD *, char *, uint64_t))(*(void *)(v147 - 8) + 32))(v192, v42, v147);
      uint64_t v193 = v145;
      uint64_t v194 = v188;
      unsigned int v195 = v146;
      unsigned int v196 = v190;
      type metadata accessor for PersistenceTrigger();
      break;
    case 10:
      uint64_t v76 = v186;
      uint64_t v77 = v178;
      uint64_t v193 = (uint64_t)v186;
      uint64_t v194 = v178;
      unsigned int v195 = &type metadata for ContentStatus;
      unsigned int v196 = &type metadata for ContentStatus;
      TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
      uint64_t v79 = &v42[TupleTypeMetadata[12]];
      LODWORD(v191) = v42[TupleTypeMetadata[16]];
      LODWORD(v184) = v42[TupleTypeMetadata[20]];
      uint64_t v80 = v185;
      (*(void (**)(char *, char *, int8x16_t *))(v185 + 32))(v35, v42, v76);
      unint64_t v81 = *(void (**)(char *, char *, uint64_t))(v179 + 32);
      v81(v29, v79, v77);
      uint64_t v193 = v182;
      uint64_t v194 = v183;
      unsigned int v195 = v180;
      unsigned int v196 = v181;
      uint64_t v193 = type metadata accessor for ReconciliationID();
      uint64_t v194 = sub_10096C890();
      unsigned int v195 = &type metadata for ContentStatus;
      unsigned int v196 = &type metadata for ContentStatus;
      unint64_t v82 = (int *)swift_getTupleTypeMetadata();
      uint64_t v177 = (uint64_t)v192 + v82[12];
      sub_1005EC558(v76, (uint64_t)v192);
      unint64_t v83 = *(void (**)(char *, int8x16_t *))(v80 + 8);
      unint64_t v84 = v35;
      uint64_t v85 = v178;
      v83(v84, v76);
      v81(v26, v29, v85);
      if ((*(unsigned int (**)(char *, uint64_t, int8x16_t *))(v80 + 48))(v26, 1, v76) == 1)
      {
        (*(void (**)(char *, uint64_t))(v179 + 8))(v26, v85);
        uint64_t v193 = v182;
        uint64_t v194 = v183;
        unsigned int v195 = v180;
        unsigned int v196 = v181;
        uint64_t v86 = type metadata accessor for ReconciliationID();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v86 - 8) + 56))(v177, 1, 1, v86);
      }
      else
      {
        uint64_t v160 = v177;
        sub_1005EC558(v76, v177);
        v83(v26, v76);
        uint64_t v193 = v182;
        uint64_t v194 = v183;
        unsigned int v195 = v180;
        unsigned int v196 = v181;
        uint64_t v161 = type metadata accessor for ReconciliationID();
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v161 - 8) + 56))(v160, 0, 1, v161);
      }
      uint64_t v162 = v82[20];
      uint64_t v163 = v192;
      *((unsigned char *)v192 + v82[16]) = v191;
      *((unsigned char *)v163 + v162) = (_BYTE)v184;
      uint64_t v193 = v187;
      uint64_t v194 = v188;
      unsigned int v195 = v189;
      unsigned int v196 = v190;
      type metadata accessor for PersistenceTrigger();
      break;
    case 11:
      __chkstk_darwin(EnumCaseMultiPayload);
      strcpy((char *)&v170 - 32, " otherID from to ");
      unint64_t v87 = v186;
      uint64_t v88 = v178;
      uint64_t v193 = (uint64_t)v186;
      uint64_t v194 = v178;
      unsigned int v195 = (ValueMetadata *)sub_100033BE8((uint64_t *)&unk_100AD4BE0);
      unsigned int v196 = v195;
      unint64_t v89 = (int *)swift_getTupleTypeMetadata();
      unint64_t v90 = &v42[v89[12]];
      LODWORD(v191) = v42[v89[16]];
      LODWORD(v184) = v42[v89[20]];
      uint64_t v91 = v185;
      (*(void (**)(char *, char *, int8x16_t *))(v185 + 32))(v32, v42, v87);
      unint64_t v92 = *(uint64_t (**)(char *, char *, uint64_t))(v179 + 32);
      unint64_t v93 = v170;
      uint64_t v94 = v92(v170, v90, v88);
      __chkstk_darwin(v94);
      strcpy((char *)&v170 - 32, " otherID from to ");
      uint64_t v193 = v182;
      uint64_t v194 = v183;
      unsigned int v195 = v180;
      unsigned int v196 = v181;
      uint64_t v193 = type metadata accessor for ReconciliationID();
      uint64_t v194 = sub_10096C890();
      unsigned int v195 = (ValueMetadata *)sub_100033BE8((uint64_t *)&unk_100AD4BE0);
      unsigned int v196 = v195;
      unint64_t v95 = (int *)swift_getTupleTypeMetadata();
      uint64_t v177 = (uint64_t)v192 + v95[12];
      sub_1005EC558(v87, (uint64_t)v192);
      unint64_t v96 = *(void (**)(char *, int8x16_t *))(v91 + 8);
      v96(v32, v87);
      unint64_t v97 = v174;
      v92(v174, v93, v88);
      if ((*(unsigned int (**)(char *, uint64_t, int8x16_t *))(v91 + 48))(v97, 1, v87) == 1)
      {
        (*(void (**)(char *, uint64_t))(v179 + 8))(v97, v88);
        uint64_t v193 = v182;
        uint64_t v194 = v183;
        unsigned int v195 = v180;
        unsigned int v196 = v181;
        uint64_t v98 = type metadata accessor for ReconciliationID();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v98 - 8) + 56))(v177, 1, 1, v98);
      }
      else
      {
        uint64_t v164 = v177;
        sub_1005EC558(v87, v177);
        v96(v97, v87);
        uint64_t v193 = v182;
        uint64_t v194 = v183;
        unsigned int v195 = v180;
        unsigned int v196 = v181;
        uint64_t v165 = type metadata accessor for ReconciliationID();
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v165 - 8) + 56))(v164, 0, 1, v165);
      }
      uint64_t v166 = v95[16];
      uint64_t v167 = v95[20];
      size_t v168 = v192;
      *((unsigned char *)v192 + v166) = v191;
      *((unsigned char *)v168 + v167) = (_BYTE)v184;
      uint64_t v193 = v187;
      uint64_t v194 = v188;
      unsigned int v195 = v189;
      unsigned int v196 = v190;
      type metadata accessor for PersistenceTrigger();
      break;
    case 12:
      sub_100033BE8((uint64_t *)&unk_100ACB6B0);
      uint64_t v99 = *(void *)&v42[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      uint64_t v100 = v177;
      (*(void (**)(char *, char *, void *))(v177 + 32))(v16, v42, v14);
      uint64_t v193 = v182;
      uint64_t v194 = v183;
      unsigned int v195 = v180;
      unsigned int v196 = v181;
      type metadata accessor for ThrottlingKey();
      uint64_t v101 = *(int *)(swift_getTupleTypeMetadata2() + 48);
      int v102 = v192;
      sub_10070D53C(v14, (uint64_t)v192);
      (*(void (**)(char *, void *))(v100 + 8))(v16, v14);
      *(void *)((char *)v102 + v101) = v99;
      uint64_t v193 = v187;
      uint64_t v194 = v188;
      unsigned int v195 = v189;
      unsigned int v196 = v190;
      type metadata accessor for PersistenceTrigger();
      break;
    case 13:
      uint64_t v103 = v177;
      (*(void (**)(char *, char *, void *))(v177 + 32))(v16, v42, v14);
      sub_10070D53C(v14, (uint64_t)v192);
      (*(void (**)(char *, void *))(v103 + 8))(v16, v14);
      uint64_t v193 = v187;
      uint64_t v194 = v188;
      unsigned int v195 = v189;
      unsigned int v196 = v190;
      type metadata accessor for PersistenceTrigger();
      break;
    case 14:
    case 15:
      sub_100033BE8((uint64_t *)&unk_100ACB6B0);
      unsigned int v104 = v186;
      uint64_t v105 = *(void *)&v42[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      unint64_t v106 = v184;
      uint64_t v107 = v185;
      (*(void (**)(char *, char *, int8x16_t *))(v185 + 32))(v184, v42, v104);
      uint64_t v193 = v182;
      uint64_t v194 = v183;
      unsigned int v195 = v180;
      unsigned int v196 = v181;
      type metadata accessor for ReconciliationID();
      uint64_t v108 = *(int *)(swift_getTupleTypeMetadata2() + 48);
      unint64_t v109 = v192;
      sub_1005EC558(v104, (uint64_t)v192);
      (*(void (**)(char *, int8x16_t *))(v107 + 8))(v106, v104);
      *(void *)((char *)v109 + v108) = v105;
      uint64_t v193 = v187;
      uint64_t v194 = v188;
      unsigned int v195 = v189;
      unsigned int v196 = v190;
      type metadata accessor for PersistenceTrigger();
      break;
    case 16:
      uint64_t v110 = *((void *)v42 + 4);
      char v111 = v42[40];
      uint64_t v112 = *((void *)v42 + 6);
      long long v113 = *((_OWORD *)v42 + 1);
      uint64_t v114 = v192;
      *unsigned int v192 = *(_OWORD *)v42;
      v114[1] = v113;
      *((void *)v114 + 4) = v110;
      *((unsigned char *)v114 + 40) = v111;
      *((void *)v114 + 6) = v112;
      uint64_t v193 = v187;
      uint64_t v194 = v188;
      unsigned int v195 = v189;
      unsigned int v196 = v190;
      type metadata accessor for PersistenceTrigger();
      break;
    case 19:
      char v148 = *v42;
      uint64_t v149 = v186;
      uint64_t v150 = &v42[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      unsigned int v152 = v184;
      uint64_t v151 = v185;
      (*(void (**)(char *, char *, int8x16_t *))(v185 + 32))(v184, v150, v149);
      uint64_t v193 = v182;
      uint64_t v194 = v183;
      unsigned int v195 = v180;
      unsigned int v196 = v181;
      type metadata accessor for ReconciliationID();
      uint64_t v153 = (uint64_t)v192 + *(int *)(swift_getTupleTypeMetadata2() + 48);
      *(unsigned char *)unsigned int v192 = v148;
      sub_1005EC558(v149, v153);
      (*(void (**)(char *, int8x16_t *))(v151 + 8))(v152, v149);
      uint64_t v193 = v187;
      uint64_t v194 = v188;
      unsigned int v195 = v189;
      unsigned int v196 = v190;
      type metadata accessor for PersistenceTrigger();
      break;
    case 20:
    case 21:
      uint64_t v115 = *(void *)v42;
      uint64_t v117 = v187;
      uint64_t v116 = v188;
      size_t v119 = v189;
      uint64_t v118 = v190;
      unint64_t v120 = sub_100615740(v115);
      swift_retain();
      swift_release();
      *(void *)unsigned int v192 = v120;
      uint64_t v193 = v117;
      uint64_t v194 = v116;
      unsigned int v195 = v119;
      unsigned int v196 = v118;
      type metadata accessor for PersistenceTrigger();
      break;
    case 22:
    case 23:
      *(unsigned char *)unsigned int v192 = (*v42 & 1) == 0;
      uint64_t v193 = v187;
      uint64_t v194 = v188;
      unsigned int v195 = v189;
      unsigned int v196 = v190;
      type metadata accessor for PersistenceTrigger();
      break;
    case 27:
      uint64_t v125 = v171;
      size_t v126 = v42;
      int v127 = (void *)v172;
      (*(void (**)(char *, char *, uint64_t))(v171 + 32))(v9, v126, v172);
      sub_100690E68(v127, (uint64_t)v192);
      (*(void (**)(char *, void *))(v125 + 8))(v9, v127);
      uint64_t v193 = v187;
      uint64_t v194 = v188;
      unsigned int v195 = v189;
      unsigned int v196 = v190;
      type metadata accessor for PersistenceTrigger();
      break;
    case 28:
      int v154 = v186;
      char v155 = v42[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      uint64_t v157 = v184;
      uint64_t v156 = v185;
      (*(void (**)(char *, char *, int8x16_t *))(v185 + 32))(v184, v42, v154);
      uint64_t v193 = v182;
      uint64_t v194 = v183;
      unsigned int v195 = v180;
      unsigned int v196 = v181;
      type metadata accessor for ReconciliationID();
      uint64_t v158 = *(int *)(swift_getTupleTypeMetadata2() + 48);
      uint64_t v159 = v192;
      sub_1005EC558(v154, (uint64_t)v192);
      (*(void (**)(char *, int8x16_t *))(v156 + 8))(v157, v154);
      *((unsigned char *)v159 + v158) = v155;
      uint64_t v193 = v187;
      uint64_t v194 = v188;
      unsigned int v195 = v189;
      unsigned int v196 = v190;
      type metadata accessor for PersistenceTrigger();
      break;
    case 31:
      uint64_t v128 = v186;
      unsigned int v129 = &v42[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      uint64_t v131 = v184;
      uint64_t v130 = v185;
      int v132 = *(void (**)(char *, char *, int8x16_t *))(v185 + 32);
      v132(v184, v42, v128);
      v132(v38, v129, v128);
      uint64_t v193 = v182;
      uint64_t v194 = v183;
      unsigned int v195 = v180;
      unsigned int v196 = v181;
      type metadata accessor for ReconciliationID();
      uint64_t v133 = (uint64_t)v192 + *(int *)(swift_getTupleTypeMetadata2() + 48);
      sub_1005EC558(v128, (uint64_t)v192);
      unint64_t v134 = *(void (**)(char *, int8x16_t *))(v130 + 8);
      v134(v131, v128);
      sub_1005EC558(v128, v133);
      v134(v38, v128);
      uint64_t v193 = v187;
      uint64_t v194 = v188;
      unsigned int v195 = v189;
      unsigned int v196 = v190;
      type metadata accessor for PersistenceTrigger();
      break;
    case 36:
      uint64_t v135 = v175;
      unint64_t v136 = v173;
      unsigned int v137 = v42;
      uint64_t v138 = v176;
      (*(void (**)(char *, char *, uint64_t))(v175 + 32))(v173, v137, v176);
      sub_100827044(v138, (uint64_t)v192);
      (*(void (**)(char *, uint64_t))(v135 + 8))(v136, v138);
      uint64_t v193 = v187;
      uint64_t v194 = v188;
      unsigned int v195 = v189;
      unsigned int v196 = v190;
      type metadata accessor for PersistenceTrigger();
      break;
    case 37:
      uint64_t v139 = v186;
      char v140 = v42[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      uint64_t v141 = v184;
      uint64_t v142 = v185;
      (*(void (**)(char *, char *, int8x16_t *))(v185 + 32))(v184, v42, v139);
      uint64_t v193 = v182;
      uint64_t v194 = v183;
      unsigned int v195 = v180;
      unsigned int v196 = v181;
      type metadata accessor for ReconciliationID();
      uint64_t v143 = *(int *)(swift_getTupleTypeMetadata2() + 48);
      unsigned int v144 = v192;
      sub_1005EC558(v139, (uint64_t)v192);
      (*(void (**)(char *, int8x16_t *))(v142 + 8))(v141, v139);
      *((unsigned char *)v144 + v143) = v140;
      uint64_t v193 = v187;
      uint64_t v194 = v188;
      unsigned int v195 = v189;
      unsigned int v196 = v190;
      type metadata accessor for PersistenceTrigger();
      break;
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
      uint64_t v193 = v187;
      uint64_t v194 = v188;
      unsigned int v195 = v189;
      unsigned int v196 = v190;
      type metadata accessor for PersistenceTrigger();
      break;
    default:
      uint64_t v46 = v182;
      uint64_t v45 = v183;
      unint64_t v47 = &v42[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      unint64_t v49 = v192;
      (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v45 - 8) + 32))((uint64_t)v192 + *(int *)(TupleTypeMetadata2 + 48), v42, v45);
      (*(void (**)(_OWORD *, char *, uint64_t))(*(void *)(v46 - 8) + 32))(v49, v47, v46);
      uint64_t v193 = v187;
      uint64_t v194 = v188;
      unsigned int v195 = v189;
      unsigned int v196 = v190;
      type metadata accessor for PersistenceTrigger();
      break;
  }
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_1001CB648@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v31 = a2;
  uint64_t v3 = a1[4];
  uint64_t v4 = a1[2];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = a1[5];
  uint64_t v7 = a1[3];
  uint64_t v8 = swift_getAssociatedTypeWitness();
  uint64_t v29 = v4;
  uint64_t v30 = v3;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v27 = v7;
  uint64_t v28 = v6;
  uint64_t v10 = swift_getAssociatedConformanceWitness();
  uint64_t v32 = AssociatedTypeWitness;
  uint64_t v33 = v8;
  uint64_t v34 = AssociatedConformanceWitness;
  uint64_t v35 = v10;
  uint64_t v11 = (int8x16_t *)type metadata accessor for ReconciliationID();
  uint64_t v12 = v11[-1].i64[1];
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v24 - v14;
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, void *))(v18 + 16))(v17, v26, a1);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 1:
    case 2:
      sub_100033BE8(&qword_100ADF5E0);
      uint64_t v20 = &v17[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      LODWORD(v26) = EnumCaseMultiPayload;
      uint64_t v21 = *(void *)v20;
      uint64_t v25 = *((void *)v20 + 1);
      (*(void (**)(char *, char *, int8x16_t *))(v12 + 32))(v15, v17, v11);
      uint64_t v32 = v8;
      uint64_t v33 = AssociatedTypeWitness;
      uint64_t v34 = v10;
      uint64_t v35 = AssociatedConformanceWitness;
      type metadata accessor for ReconciliationID();
      uint64_t v22 = (void *)(v31 + *(int *)(swift_getTupleTypeMetadata2() + 48));
      sub_1005EC558(v11, v31);
      (*(void (**)(char *, int8x16_t *))(v12 + 8))(v15, v11);
      *uint64_t v22 = v21;
      v22[1] = v25;
      break;
    case 8:
      break;
    default:
      (*(void (**)(char *, char *, int8x16_t *))(v12 + 32))(v15, v17, v11);
      sub_1005EC558(v11, v31);
      (*(void (**)(char *, int8x16_t *))(v12 + 8))(v15, v11);
      break;
  }
  uint64_t v32 = v27;
  uint64_t v33 = v29;
  uint64_t v34 = v28;
  uint64_t v35 = v30;
  type metadata accessor for PersistenceTrigger.AffectedReconciliation();
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata accessor for PersistenceTrigger.AffectedReconciliation()
{
  return swift_getGenericMetadata();
}

uint64_t sub_1001CBA30(int a1, uint64_t a2, void (*a3)(char *, char *, uint64_t))
{
  uint64_t v599 = a2;
  LODWORD(v654) = a1;
  uint64_t v4 = (ValueMetadata *)*((void *)a3 + 5);
  uint64_t v5 = (ValueMetadata *)*((void *)a3 + 3);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v7 = type metadata accessor for ItemState();
  uint64_t v605 = sub_10096C890();
  uint64_t v604 = *(void *)(v605 - 8);
  uint64_t v8 = __chkstk_darwin(v605);
  unsigned int v587 = (char *)&v571 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v596 = (char *)&v571 - v11;
  uint64_t v608 = v7;
  uint64_t v607 = *(void *)(v7 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  size_t v586 = (char *)&v571 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  int v595 = (char *)&v571 - v14;
  uint64_t v15 = *((void *)a3 + 2);
  uint64_t v16 = (ValueMetadata *)*((void *)a3 + 4);
  uint64_t v17 = type metadata accessor for FileTreeError();
  uint64_t v575 = sub_10096C890();
  uint64_t v574 = *(void *)(v575 - 8);
  uint64_t v18 = __chkstk_darwin(v575);
  unint64_t v577 = (char *)&v571 - v19;
  uint64_t v579 = v17;
  uint64_t v578 = *(void *)(v17 - 8);
  uint64_t v20 = __chkstk_darwin(v18);
  unint64_t v573 = (char *)&v571 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v576 = (char *)&v571 - v22;
  uint64_t v23 = swift_getAssociatedTypeWitness();
  uint64_t v650 = swift_getAssociatedConformanceWitness();
  uint64_t v24 = type metadata accessor for ItemState();
  uint64_t v582 = sub_10096C890();
  uint64_t v581 = *(void *)(v582 - 8);
  uint64_t v25 = __chkstk_darwin(v582);
  unint64_t v580 = (char *)&v571 - v26;
  uint64_t v585 = v24;
  uint64_t v584 = *(void *)(v24 - 8);
  __chkstk_darwin(v25);
  long long v583 = (char *)&v571 - v27;
  uint64_t v643 = type metadata accessor for SnapshotItem();
  uint64_t v634 = *(void *)(v643 - 8);
  uint64_t v28 = __chkstk_darwin(v643);
  unint64_t v623 = (char *)&v571 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  BOOL v626 = (char *)&v571 - v30;
  uint64_t v635 = v15;
  uint64_t v659 = v15;
  uint64_t v660 = v5;
  uint64_t v636 = v16;
  uint64_t v661 = v16;
  unint64_t v662 = v4;
  uint64_t v31 = type metadata accessor for PersistenceTrigger.AffectedReconciliation();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v648 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v32 = __chkstk_darwin(TupleTypeMetadata2);
  unsigned int v632 = (uint64_t *)((char *)&v571 - v33);
  uint64_t v649 = v31;
  uint64_t v639 = *(void *)(v31 - 8);
  __chkstk_darwin(v32);
  uint64_t v631 = (char *)&v571 - v34;
  uint64_t v637 = v5;
  unsigned int v638 = v4;
  uint64_t v35 = type metadata accessor for SnapshotItem();
  uint64_t v644 = *(void *)(v35 - 8);
  uint64_t v36 = __chkstk_darwin(v35);
  char v630 = (char *)&v571 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = __chkstk_darwin(v36);
  unint64_t v591 = (char *)&v571 - v39;
  uint64_t v40 = __chkstk_darwin(v38);
  unint64_t v603 = (char *)&v571 - v41;
  uint64_t v42 = __chkstk_darwin(v40);
  uint64_t v590 = (char *)&v571 - v43;
  __chkstk_darwin(v42);
  unint64_t v592 = (char *)&v571 - v44;
  uint64_t v641 = v45;
  uint64_t v633 = sub_10096C890();
  uint64_t v629 = *(void *)(v633 - 8);
  uint64_t v46 = __chkstk_darwin(v633);
  unint64_t v601 = (char *)&v571 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = __chkstk_darwin(v46);
  BOOL v602 = (char *)&v571 - v49;
  uint64_t v50 = __chkstk_darwin(v48);
  unint64_t v600 = (char *)&v571 - v51;
  uint64_t v52 = __chkstk_darwin(v50);
  unint64_t v606 = (char *)&v571 - v53;
  uint64_t v54 = __chkstk_darwin(v52);
  unsigned int v642 = (char *)&v571 - v55;
  uint64_t v56 = __chkstk_darwin(v54);
  uint64_t v640 = (char *)&v571 - v57;
  uint64_t v652 = (ValueMetadata *)AssociatedTypeWitness;
  uint64_t v646 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v58 = __chkstk_darwin(v56);
  unint64_t v627 = (char *)&v571 - v59;
  uint64_t v60 = *((void *)a3 - 1);
  uint64_t v61 = __chkstk_darwin(v58);
  unsigned int v622 = (char *)&v571 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = __chkstk_darwin(v61);
  BOOL v620 = (char *)&v571 - v64;
  uint64_t v65 = __chkstk_darwin(v63);
  unsigned int v619 = (char *)&v571 - v66;
  uint64_t v67 = __chkstk_darwin(v65);
  unint64_t v617 = (char *)&v571 - v68;
  uint64_t v69 = __chkstk_darwin(v67);
  unint64_t v625 = (char *)&v571 - v70;
  uint64_t v71 = __chkstk_darwin(v69);
  unint64_t v613 = (char *)&v571 - v72;
  uint64_t v73 = __chkstk_darwin(v71);
  uint64_t v612 = (char *)&v571 - v74;
  uint64_t v75 = __chkstk_darwin(v73);
  uint64_t v615 = (char *)&v571 - v76;
  uint64_t v77 = __chkstk_darwin(v75);
  long long v610 = (char *)&v571 - v78;
  uint64_t v79 = __chkstk_darwin(v77);
  unint64_t v614 = (char *)&v571 - v80;
  uint64_t v81 = __chkstk_darwin(v79);
  uint64_t v624 = (char *)&v571 - v82;
  uint64_t v83 = __chkstk_darwin(v81);
  uint64_t v85 = (char *)&v571 - v84;
  uint64_t v86 = __chkstk_darwin(v83);
  uint64_t v611 = (char *)&v571 - v87;
  uint64_t v88 = __chkstk_darwin(v86);
  long long v609 = (char *)&v571 - v89;
  uint64_t v90 = __chkstk_darwin(v88);
  unint64_t v618 = (char *)&v571 - v91;
  uint64_t v92 = __chkstk_darwin(v90);
  unint64_t v621 = (char *)&v571 - v93;
  uint64_t v94 = __chkstk_darwin(v92);
  unint64_t v96 = (char *)&v571 - v95;
  uint64_t v97 = __chkstk_darwin(v94);
  unsigned int v616 = (char *)&v571 - v98;
  uint64_t v99 = __chkstk_darwin(v97);
  uint64_t v101 = (char *)&v571 - v100;
  uint64_t v102 = __chkstk_darwin(v99);
  unsigned int v104 = (char *)&v571 - v103;
  uint64_t v105 = __chkstk_darwin(v102);
  uint64_t v107 = (char *)&v571 - v106;
  uint64_t v108 = __chkstk_darwin(v105);
  uint64_t v110 = (char *)&v571 - v109;
  uint64_t v111 = __chkstk_darwin(v108);
  long long v113 = (char *)&v571 - v112;
  uint64_t v653 = (ValueMetadata *)v23;
  uint64_t v647 = *(void *)(v23 - 8);
  uint64_t v114 = __chkstk_darwin(v111);
  uint64_t v628 = (char *)&v571 - ((v115 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v116 = __chkstk_darwin(v114);
  BOOL v598 = (char *)&v571 - v117;
  uint64_t v118 = __chkstk_darwin(v116);
  long long v572 = (char *)&v571 - v119;
  uint64_t v120 = __chkstk_darwin(v118);
  uint64_t v597 = (char *)&v571 - v121;
  uint64_t v122 = __chkstk_darwin(v120);
  unsigned int v645 = (char *)&v571 - v123;
  uint64_t v124 = __chkstk_darwin(v122);
  unsigned int v594 = (char *)&v571 - v125;
  uint64_t v126 = __chkstk_darwin(v124);
  long long v593 = (char *)&v571 - v127;
  uint64_t v128 = __chkstk_darwin(v126);
  BOOL v589 = (char *)&v571 - v129;
  __chkstk_darwin(v128);
  unint64_t v588 = (char *)&v571 - v130;
  uint64_t v655 = v60;
  uint64_t v131 = *(void (**)(char *, char *, void *))(v60 + 16);
  v131(v113, v656, a3);
  unsigned int v658 = a3;
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  char v133 = v654;
  switch(EnumCaseMultiPayload)
  {
    case 0:
      v131(v110, v113, v658);
      unint64_t v134 = v652;
      uint64_t v135 = (uint64_t)v653;
      uint64_t v656 = &v110[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      uint64_t v136 = v647;
      unsigned int v137 = v645;
      (*(void (**)(char *, char *, uint64_t))(v647 + 32))(v645, v110, v135);
      uint64_t v138 = v113;
      uint64_t v139 = TupleTypeMetadata2;
      sub_10096D230();
      swift_allocObject();
      uint64_t v140 = sub_10096C0D0();
      uint64_t v141 = *(int *)(v139 + 48);
      *uint64_t v142 = 2;
      uint64_t v143 = (char *)v142 + v141;
      uint64_t v659 = v135;
      uint64_t v660 = v134;
      uint64_t v661 = (ValueMetadata *)v650;
      unint64_t v662 = (ValueMetadata *)AssociatedConformanceWitness;
      type metadata accessor for ReconciliationID();
      sub_100033BE8(&qword_100ADF5E0);
      unsigned int v144 = &v143[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      (*(void (**)(char *, char *, uint64_t))(v136 + 16))(v143, v137, v135);
      swift_storeEnumTagMultiPayload();
      *(void *)unsigned int v144 = 0;
      *((void *)v144 + 1) = 0;
      swift_storeEnumTagMultiPayload();
      uint64_t v145 = sub_1003FC080(v140);
      (*(void (**)(char *, uint64_t))(v136 + 8))(v137, v135);
      (*(void (**)(char *, ValueMetadata *))(v646 + 8))(v656, v134);
      (*(void (**)(char *, void (*)(char *, char *, uint64_t)))(v655 + 8))(v138, v658);
      return v145;
    case 2:
      uint64_t v146 = v113;
      uint64_t v147 = v113;
      char v148 = v658;
      v131(v107, v146, v658);
      uint64_t v149 = v652;
      uint64_t v659 = (uint64_t)v653;
      uint64_t v660 = v652;
      uint64_t v661 = (ValueMetadata *)v650;
      unint64_t v662 = (ValueMetadata *)AssociatedConformanceWitness;
      uint64_t v150 = type metadata accessor for ReconciliationID();
      if (swift_getEnumCaseMultiPayload() != 1)
      {
        (*(void (**)(char *, uint64_t))(*(void *)(v150 - 8) + 8))(v107, v150);
        long long v113 = v147;
        goto LABEL_56;
      }
      uint64_t v151 = v646;
      unsigned int v152 = v627;
      (*(void (**)(char *, char *, ValueMetadata *))(v646 + 32))(v627, v107, v149);
      uint64_t v153 = TupleTypeMetadata2;
      sub_10096D230();
      swift_allocObject();
      int v154 = v147;
      uint64_t v155 = sub_10096C0D0();
      uint64_t v157 = (char *)v156 + *(int *)(v153 + 48);
      *uint64_t v156 = 2;
      sub_100033BE8(&qword_100ADF5E0);
      uint64_t v158 = &v157[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      (*(void (**)(char *, char *, ValueMetadata *))(v151 + 16))(v157, v152, v149);
      swift_storeEnumTagMultiPayload();
      *(void *)uint64_t v158 = 0;
      *((void *)v158 + 1) = 0;
      swift_storeEnumTagMultiPayload();
      uint64_t v145 = sub_1003FC080(v155);
      (*(void (**)(char *, ValueMetadata *))(v151 + 8))(v152, v149);
      (*(void (**)(char *, void (*)(char *, char *, uint64_t)))(v655 + 8))(v154, v148);
      return v145;
    case 4:
      uint64_t v159 = v621;
      uint64_t v160 = v658;
      v131(v621, v113, v658);
      uint64_t v161 = v652;
      uint64_t v659 = (uint64_t)v653;
      uint64_t v660 = v652;
      uint64_t v661 = (ValueMetadata *)v650;
      unint64_t v662 = (ValueMetadata *)AssociatedConformanceWitness;
      uint64_t v162 = type metadata accessor for ReconciliationID();
      uint64_t v163 = &v159[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v164 = v646;
        uint64_t v165 = v627;
        (*(void (**)(char *, char *, ValueMetadata *))(v646 + 32))(v627, v163, v161);
        uint64_t v166 = TupleTypeMetadata2;
        sub_10096D230();
        swift_allocObject();
        uint64_t v167 = sub_10096C0D0();
        uint64_t v169 = (char *)v168 + *(int *)(v166 + 48);
        *size_t v168 = 16;
        (*(void (**)(char *, char *, ValueMetadata *))(v164 + 16))(v169, v165, v161);
        swift_storeEnumTagMultiPayload();
        swift_storeEnumTagMultiPayload();
        uint64_t v145 = sub_1003FC080(v167);
        (*(void (**)(char *, ValueMetadata *))(v164 + 8))(v165, v161);
        (*(void (**)(char *, uint64_t))(*(void *)(v162 - 8) + 8))(v159, v162);
        goto LABEL_79;
      }
      uint64_t v311 = *(void (**)(char *, uint64_t))(*(void *)(v162 - 8) + 8);
      v311(v163, v162);
      v311(v159, v162);
      goto LABEL_56;
    case 5:
      v131(v101, v113, v658);
      uint64_t v170 = v643;
      uint64_t v171 = sub_10096C890();
      TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
      uint64_t v173 = (uint64_t)&v101[*(int *)(TupleTypeMetadata3 + 48)];
      uint64_t v174 = *(void *)&v101[*(int *)(TupleTypeMetadata3 + 64)];
      uint64_t v175 = v634;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v634 + 48))(v101, 1, v170) == 1)
      {
        uint64_t v176 = *(void (**)(uint64_t, uint64_t))(*(void *)(v171 - 8) + 8);
        v176(v173, v171);
        v176((uint64_t)v101, v171);
        goto LABEL_56;
      }
      uint64_t v654 = v173;
      unsigned int v312 = v626;
      (*(void (**)(char *, char *, uint64_t))(v175 + 32))(v626, v101, v170);
      uint64_t v313 = TupleTypeMetadata2;
      uint64_t v666 = sub_10096C110();
      int v314 = v631;
      if ((v174 & 2) != 0)
      {
        uint64_t v315 = (uint64_t)v653;
        (*(void (**)(char *, char *, ValueMetadata *))(v647 + 16))(v631, &v312[*(int *)(v170 + 36)], v653);
        uint64_t v659 = v315;
        uint64_t v660 = v652;
        uint64_t v661 = (ValueMetadata *)v650;
        unint64_t v662 = (ValueMetadata *)AssociatedConformanceWitness;
        type metadata accessor for ReconciliationID();
        swift_storeEnumTagMultiPayload();
        uint64_t v316 = v649;
        swift_storeEnumTagMultiPayload();
        uint64_t v317 = (char *)v632 + *(int *)(v313 + 48);
        void *v632 = 4;
        (*(void (**)(char *, char *, uint64_t))(v639 + 32))(v317, v314, v316);
        sub_10096C1C0();
        sub_10096C180();
      }
      if ((v174 & 3) != 0)
      {
        uint64_t v648 = *(void *)(v647 + 16);
        uint64_t v318 = (uint64_t)v653;
        ((void (*)(char *, char *, ValueMetadata *))v648)(v314, v626, v653);
        uint64_t v659 = v318;
        uint64_t v660 = v652;
        uint64_t v661 = (ValueMetadata *)v650;
        unint64_t v662 = (ValueMetadata *)AssociatedConformanceWitness;
        type metadata accessor for ReconciliationID();
        swift_storeEnumTagMultiPayload();
        uint64_t v319 = v649;
        swift_storeEnumTagMultiPayload();
        uint64_t v320 = v632;
        int v321 = (char *)v632 + *(int *)(v313 + 48);
        void *v632 = 1024;
        uint64_t v656 = v113;
        uint64_t v652 = *(ValueMetadata **)(v639 + 32);
        ((void (*)(char *, char *, uint64_t))v652)(v321, v314, v319);
        uint64_t AssociatedConformanceWitness = sub_10096C1C0();
        sub_10096C180();
        sub_100033BE8(&qword_100ADF5E0);
        long long v322 = &v314[*(int *)(swift_getTupleTypeMetadata2() + 48)];
        uint64_t v323 = v318;
        uint64_t v170 = v643;
        ((void (*)(char *, char *, uint64_t))v648)(v314, &v626[*(int *)(v643 + 36)], v323);
        unsigned int v312 = v626;
        uint64_t v175 = v634;
        swift_storeEnumTagMultiPayload();
        unsigned int v324 = &v312[*(int *)(v170 + 44)];
        uint64_t v325 = *((void *)v324 + 1);
        *(void *)long long v322 = *(void *)v324;
        *((void *)v322 + 1) = v325;
        swift_storeEnumTagMultiPayload();
        uint64_t v326 = (char *)v320 + *(int *)(TupleTypeMetadata2 + 48);
        *uint64_t v320 = 1024;
        ((void (*)(char *, char *, uint64_t))v652)(v326, v314, v319);
        long long v113 = v656;
        swift_bridgeObjectRetain();
        sub_10096C180();
      }
      (*(void (**)(char *, uint64_t))(v175 + 8))(v312, v170);
      uint64_t v145 = v666;
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v171 - 8) + 8))(v654, v171);
      goto LABEL_58;
    case 6:
      LODWORD(v648) = v654;
      v131(v104, v113, v658);
      uint64_t v177 = v633;
      uint64_t v178 = swift_getTupleTypeMetadata3();
      uint64_t v179 = &v104[*(int *)(v178 + 48)];
      uint64_t v180 = *(void *)&v104[*(int *)(v178 + 64)];
      uint64_t v181 = v629;
      uint64_t v182 = *(void (**)(char *, char *, uint64_t))(v629 + 32);
      uint64_t v183 = v104;
      uint64_t v184 = v177;
      v182(v640, v183, v177);
      v182(v642, v179, v177);
      uint64_t v185 = v181;
      uint64_t v666 = sub_10096C110();
      uint64_t v186 = v641;
      uint64_t v187 = v644;
      if ((v180 & 3) != 0)
      {
        uint64_t v188 = v606;
        (*(void (**)(char *, char *, uint64_t))(v181 + 16))(v606, v640, v184);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v187 + 48))(v188, 1, v186) == 1)
        {
          (*(void (**)(char *, uint64_t))(v181 + 8))(v188, v184);
        }
        else
        {
          uint64_t v654 = v180;
          uint64_t v656 = v113;
          int v379 = v592;
          (*(void (**)(char *, char *, uint64_t))(v187 + 32))(v592, v188, v186);
          uint64_t WitnessTable = swift_getWitnessTable();
          char v381 = FileItem.kind.getter(v186, WitnessTable);
          uint64_t v382 = v652;
          uint64_t v383 = v632;
          unsigned int v384 = v631;
          if (v381 == 1)
          {
            uint64_t v659 = (uint64_t)v653;
            uint64_t v660 = v652;
            uint64_t v661 = (ValueMetadata *)v650;
            unint64_t v662 = (ValueMetadata *)AssociatedConformanceWitness;
            type metadata accessor for ReconciliationID();
            sub_100033BE8(&qword_100ADF5E0);
            uint64_t v385 = &v384[*(int *)(swift_getTupleTypeMetadata2() + 48)];
            uint64_t v647 = *(void *)(v646 + 16);
            ((void (*)(char *, char *, ValueMetadata *))v647)(v384, v379, v382);
            swift_storeEnumTagMultiPayload();
            *(void *)uint64_t v385 = 0;
            *((void *)v385 + 1) = 0;
            uint64_t v386 = v649;
            swift_storeEnumTagMultiPayload();
            unsigned int v387 = (char *)v383 + *(int *)(TupleTypeMetadata2 + 48);
            *uint64_t v383 = 2;
            uint64_t v388 = v386;
            uint64_t v389 = *(void (**)(char *, char *, uint64_t))(v639 + 32);
            v389(v387, v384, v388);
            sub_10096C1C0();
            sub_10096C180();
            if (v648)
            {
              ((void (*)(char *, char *, ValueMetadata *))v647)(v384, &v379[*(int *)(v641 + 36)], v382);
              swift_storeEnumTagMultiPayload();
              uint64_t v390 = v649;
              swift_storeEnumTagMultiPayload();
              uint64_t v391 = (char *)v383 + *(int *)(TupleTypeMetadata2 + 48);
              *uint64_t v383 = 2;
              v389(v391, v384, v390);
              sub_10096C180();
            }
          }
          uint64_t v659 = (uint64_t)v653;
          uint64_t v660 = v382;
          uint64_t v661 = (ValueMetadata *)v650;
          unint64_t v662 = (ValueMetadata *)AssociatedConformanceWitness;
          type metadata accessor for ReconciliationID();
          sub_100033BE8(&qword_100ADF5E0);
          int v392 = &v384[*(int *)(swift_getTupleTypeMetadata2() + 48)];
          uint64_t v393 = v641;
          (*(void (**)(char *, char *, ValueMetadata *))(v646 + 16))(v384, &v379[*(int *)(v641 + 36)], v382);
          swift_storeEnumTagMultiPayload();
          unsigned int v394 = &v379[*(int *)(v393 + 44)];
          uint64_t v395 = *((void *)v394 + 1);
          *(void *)int v392 = *(void *)v394;
          *((void *)v392 + 1) = v395;
          uint64_t v396 = v649;
          swift_storeEnumTagMultiPayload();
          unsigned int v397 = (char *)v383 + *(int *)(TupleTypeMetadata2 + 48);
          *uint64_t v383 = 1024;
          (*(void (**)(char *, char *, uint64_t))(v639 + 32))(v397, v384, v396);
          sub_10096C1C0();
          swift_bridgeObjectRetain();
          sub_10096C180();
          uint64_t v187 = v644;
          (*(void (**)(char *, uint64_t))(v644 + 8))(v379, v393);
          long long v113 = v656;
          uint64_t v186 = v393;
          uint64_t v185 = v629;
          uint64_t v180 = v654;
        }
      }
      uint64_t v398 = *(void (**)(char *, char *, uint64_t))(v185 + 16);
      int v399 = (char **)(v187 + 48);
      if ((v180 & 2) == 0)
      {
        uint64_t v654 = v180;
        unsigned int v400 = v601;
        unsigned int v401 = v642;
        uint64_t v402 = v633;
        v398(v601, v642, v633);
        if (((unsigned int (*)(char *, uint64_t, uint64_t))*v399)(v400, 1, v186) != 1)
        {
          uint64_t v424 = v591;
          (*(void (**)(char *, char *, uint64_t))(v187 + 32))(v591, v400, v186);
          uint64_t v425 = swift_getWitnessTable();
          int v426 = FileItem.kind.getter(v186, v425);
          BOOL v427 = (v654 & 0x4000) != 0 && v426 == 1;
          unint64_t v428 = v654 & 0xFFFFFFFFFFFEB7FFLL;
          if (!v427) {
            unint64_t v428 = v654;
          }
          unsigned int v429 = v640;
          if ((v428 & 0xFFFFFFFFFFFEF7FFLL) != 0)
          {
            uint64_t v430 = v631;
            int v431 = v652;
            (*(void (**)(char *, char *, ValueMetadata *))(v646 + 16))(v631, &v424[*(int *)(v186 + 36)], v652);
            uint64_t v659 = (uint64_t)v653;
            uint64_t v660 = v431;
            uint64_t v661 = (ValueMetadata *)v650;
            unint64_t v662 = (ValueMetadata *)AssociatedConformanceWitness;
            type metadata accessor for ReconciliationID();
            swift_storeEnumTagMultiPayload();
            uint64_t v432 = v649;
            swift_storeEnumTagMultiPayload();
            unsigned int v433 = (char *)v632 + *(int *)(TupleTypeMetadata2 + 48);
            void *v632 = 8;
            (*(void (**)(char *, char *, uint64_t))(v639 + 32))(v433, v430, v432);
            sub_10096C1C0();
            sub_10096C180();
          }
          (*(void (**)(char *, uint64_t))(v187 + 8))(v424, v186);
          uint64_t v403 = *(void (**)(char *, uint64_t))(v629 + 8);
          uint64_t v434 = v633;
          v403(v642, v633);
          uint64_t v435 = v429;
          uint64_t v436 = v434;
          goto LABEL_122;
        }
        uint64_t v403 = *(void (**)(char *, uint64_t))(v185 + 8);
        v403(v401, v402);
        unsigned int v404 = v640;
LABEL_121:
        v403(v404, v402);
        uint64_t v435 = v400;
        uint64_t v436 = v402;
LABEL_122:
        v403(v435, v436);
        goto LABEL_124;
      }
      uint64_t v405 = v600;
      uint64_t v402 = v633;
      v398(v600, v642, v633);
      uint64_t v656 = *v399;
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v656)(v405, 1, v186) == 1)
      {
        (*(void (**)(char *, uint64_t))(v185 + 8))(v405, v402);
      }
      else
      {
        uint64_t v437 = v590;
        (*(void (**)(char *, char *, uint64_t))(v187 + 32))(v590, v405, v186);
        int v438 = &v437[*(int *)(v186 + 36)];
        unsigned int v439 = v631;
        unsigned int v440 = v652;
        (*(void (**)(char *, char *, ValueMetadata *))(v646 + 16))(v631, v438, v652);
        uint64_t v659 = (uint64_t)v653;
        uint64_t v660 = v440;
        uint64_t v661 = (ValueMetadata *)v650;
        unint64_t v662 = (ValueMetadata *)AssociatedConformanceWitness;
        type metadata accessor for ReconciliationID();
        swift_storeEnumTagMultiPayload();
        uint64_t v441 = v649;
        swift_storeEnumTagMultiPayload();
        uint64_t v442 = (char *)v632 + *(int *)(TupleTypeMetadata2 + 48);
        void *v632 = 12;
        unsigned int v443 = v439;
        uint64_t v186 = v641;
        (*(void (**)(char *, char *, uint64_t))(v639 + 32))(v442, v443, v441);
        sub_10096C1C0();
        uint64_t v187 = v644;
        sub_10096C180();
        uint64_t v185 = v629;
        (*(void (**)(char *, uint64_t))(v187 + 8))(v437, v186);
      }
      unsigned int v400 = v602;
      uint64_t v444 = v640;
      v398(v602, v640, v402);
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v656)(v400, 1, v186) == 1)
      {
        uint64_t v403 = *(void (**)(char *, uint64_t))(v185 + 8);
        v403(v642, v402);
        unsigned int v404 = v444;
        goto LABEL_121;
      }
      int v445 = v603;
      (*(void (**)(char *, char *, uint64_t))(v187 + 32))(v603, v400, v186);
      unsigned int v446 = &v445[*(int *)(v186 + 36)];
      uint64_t v447 = v185;
      uint64_t v448 = v631;
      uint64_t v449 = v652;
      (*(void (**)(char *, char *, ValueMetadata *))(v646 + 16))(v631, v446, v652);
      uint64_t v659 = (uint64_t)v653;
      uint64_t v660 = v449;
      uint64_t v661 = (ValueMetadata *)v650;
      unint64_t v662 = (ValueMetadata *)AssociatedConformanceWitness;
      type metadata accessor for ReconciliationID();
      swift_storeEnumTagMultiPayload();
      uint64_t v450 = v649;
      swift_storeEnumTagMultiPayload();
      uint64_t v451 = (char *)v632 + *(int *)(TupleTypeMetadata2 + 48);
      void *v632 = 8;
      (*(void (**)(char *, char *, uint64_t))(v639 + 32))(v451, v448, v450);
      sub_10096C1C0();
      sub_10096C180();
      (*(void (**)(char *, uint64_t))(v187 + 8))(v603, v186);
      int v452 = *(void (**)(char *, uint64_t))(v447 + 8);
      v452(v642, v402);
      v452(v444, v402);
LABEL_124:
      uint64_t v145 = v666;
      (*(void (**)(char *, void (*)(char *, char *, uint64_t)))(v655 + 8))(v113, v658);
      return v145;
    case 7:
      v131(v110, v113, v658);
      uint64_t v656 = v113;
      uint64_t v189 = v634;
      uint64_t v190 = v623;
      uint64_t v191 = v643;
      (*(void (**)(char *, char *, uint64_t))(v634 + 32))(v623, v110, v643);
      uint64_t v192 = TupleTypeMetadata2;
      sub_10096D230();
      swift_allocObject();
      uint64_t v193 = sub_10096C0D0();
      uint64_t v194 = *(int *)(v192 + 48);
      void *v195 = 2;
      unsigned int v196 = (char *)v195 + v194;
      uint64_t v197 = v653;
      uint64_t v659 = (uint64_t)v653;
      uint64_t v660 = v652;
      uint64_t v661 = (ValueMetadata *)v650;
      unint64_t v662 = (ValueMetadata *)AssociatedConformanceWitness;
      type metadata accessor for ReconciliationID();
      sub_100033BE8(&qword_100ADF5E0);
      uint64_t v198 = &v196[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      (*(void (**)(char *, char *, ValueMetadata *))(v647 + 16))(v196, v190, v197);
      swift_storeEnumTagMultiPayload();
      *(void *)uint64_t v198 = 0;
      *((void *)v198 + 1) = 0;
      swift_storeEnumTagMultiPayload();
      uint64_t v145 = sub_1003FC080(v193);
      (*(void (**)(char *, uint64_t))(v189 + 8))(v190, v191);
      goto LABEL_14;
    case 8:
      v131(v110, v113, v658);
      unsigned int v199 = v630;
      uint64_t v200 = v641;
      (*(void (**)(void))(v644 + 32))();
      uint64_t v201 = TupleTypeMetadata2;
      sub_10096D230();
      uint64_t v656 = v113;
      uint64_t v647 = *(void *)(v648 + 72);
      swift_allocObject();
      uint64_t v654 = sub_10096C0D0();
      unsigned int v203 = v202;
      uint64_t v204 = *(int *)(v201 + 48);
      void *v202 = 1024;
      uint64_t v205 = (char *)v202 + v204;
      uint64_t v206 = v652;
      uint64_t v659 = (uint64_t)v653;
      uint64_t v660 = v652;
      uint64_t v661 = (ValueMetadata *)v650;
      unint64_t v662 = (ValueMetadata *)AssociatedConformanceWitness;
      type metadata accessor for ReconciliationID();
      sub_100033BE8(&qword_100ADF5E0);
      int v207 = &v205[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      size_t v208 = v199;
      uint64_t v209 = &v199[*(int *)(v200 + 36)];
      int v210 = *(void (**)(char *, char *, ValueMetadata *))(v646 + 16);
      v210(v205, v209, v206);
      swift_storeEnumTagMultiPayload();
      uint64_t v211 = &v208[*(int *)(v200 + 44)];
      uint64_t v212 = *((void *)v211 + 1);
      *(void *)int v207 = *(void *)v211;
      *((void *)v207 + 1) = v212;
      swift_storeEnumTagMultiPayload();
      uint64_t v213 = (void *)((char *)v203 + v647);
      size_t v214 = (char *)v203 + v647 + *(int *)(TupleTypeMetadata2 + 48);
      void *v213 = 8;
      v210(v214, v209, v206);
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
      uint64_t v145 = sub_1003FC080(v654);
      int v215 = *(void (**)(char *, uint64_t))(v644 + 8);
      swift_bridgeObjectRetain();
      v215(v630, v200);
      goto LABEL_14;
    case 10:
      char v216 = v654;
      unsigned int v217 = v625;
      v131(v625, v113, v658);
      int v218 = v652;
      uint64_t v219 = (uint64_t)v653;
      uint64_t v659 = (uint64_t)v653;
      uint64_t v660 = v652;
      unint64_t v221 = (ValueMetadata *)v650;
      unint64_t v220 = (ValueMetadata *)AssociatedConformanceWitness;
      uint64_t v661 = (ValueMetadata *)v650;
      unint64_t v662 = (ValueMetadata *)AssociatedConformanceWitness;
      uint64_t v659 = type metadata accessor for ReconciliationID();
      uint64_t v660 = (ValueMetadata *)sub_10096C890();
      uint64_t v661 = &type metadata for ContentStatus;
      unint64_t v662 = &type metadata for ContentStatus;
      TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
      uint64_t v223 = &v217[TupleTypeMetadata[12]];
      int v224 = v217[TupleTypeMetadata[16]];
      int v225 = v217[TupleTypeMetadata[20]];
      uint64_t v659 = v219;
      uint64_t v660 = v218;
      uint64_t v661 = v221;
      unint64_t v662 = v220;
      uint64_t v226 = type metadata accessor for ReconciliationID();
      if (swift_getEnumCaseMultiPayload() != 1)
      {
        uint64_t v656 = v223;
        uint64_t v327 = v647;
        (*(void (**)(char *, char *, uint64_t))(v647 + 32))(v628, v217, v219);
        uint64_t v328 = TupleTypeMetadata2;
        uint64_t v659 = sub_10096C110();
        uint64_t v329 = v649;
        if ((v216 & 1) != 0 && v225 == 2)
        {
          sub_100033BE8(&qword_100ADF5E0);
          uint64_t v330 = swift_getTupleTypeMetadata2();
          uint64_t v331 = v631;
          int v332 = &v631[*(int *)(v330 + 48)];
          (*(void (**)(char *, char *, uint64_t))(v327 + 16))(v631, v628, v219);
          swift_storeEnumTagMultiPayload();
          *(void *)int v332 = 0;
          *((void *)v332 + 1) = 0;
          swift_storeEnumTagMultiPayload();
          unsigned int v333 = (char *)v632 + *(int *)(v328 + 48);
          void *v632 = 2;
          (*(void (**)(char *, char *, uint64_t))(v639 + 32))(v333, v331, v329);
          sub_10096C1C0();
          sub_10096C180();
        }
        if (v224 == 1)
        {
          sub_100033BE8(&qword_100ADF5E0);
          uint64_t v334 = swift_getTupleTypeMetadata2();
          uint64_t v335 = v631;
          uint64_t v336 = &v631[*(int *)(v334 + 48)];
          (*(void (**)(char *, char *, uint64_t))(v327 + 16))(v631, v628, v219);
          swift_storeEnumTagMultiPayload();
          *(void *)uint64_t v336 = 0;
          *((void *)v336 + 1) = 0;
          swift_storeEnumTagMultiPayload();
          unsigned int v337 = (char *)v632 + *(int *)(v328 + 48);
          void *v632 = 0x100000;
          (*(void (**)(char *, char *, uint64_t))(v639 + 32))(v337, v335, v329);
          sub_10096C1C0();
          sub_10096C180();
        }
        (*(void (**)(char *, uint64_t))(v327 + 8))(v628, v219);
        uint64_t v145 = v659;
        uint64_t v338 = sub_10096C890();
        (*(void (**)(char *, uint64_t))(*(void *)(v338 - 8) + 8))(v656, v338);
        goto LABEL_58;
      }
      uint64_t v227 = *(void *)(v226 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v227 + 48))(v223, 1, v226) == 1)
      {
        (*(void (**)(char *, uint64_t))(v227 + 8))(v217, v226);
        uint64_t v228 = sub_10096C890();
        (*(void (**)(char *, uint64_t))(*(void *)(v228 - 8) + 8))(v223, v228);
        goto LABEL_56;
      }
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        unint64_t v423 = *(void (**)(char *, uint64_t))(v227 + 8);
        v423(v223, v226);
        v423(v217, v226);
        goto LABEL_56;
      }
      if (v224 != 1)
      {
        (*(void (**)(char *, uint64_t))(v647 + 8))(v223, v219);
        (*(void (**)(char *, uint64_t))(v227 + 8))(v217, v226);
        goto LABEL_56;
      }
      uint64_t v482 = v647;
      unint64_t v483 = v645;
      (*(void (**)(char *, char *, uint64_t))(v647 + 32))(v645, v223, v219);
      uint64_t v656 = v113;
      uint64_t v484 = TupleTypeMetadata2;
      sub_10096D230();
      swift_allocObject();
      uint64_t v485 = sub_10096C0D0();
      long long v487 = (char *)v486 + *(int *)(v484 + 48);
      void *v486 = 0x100000;
      sub_100033BE8(&qword_100ADF5E0);
      long long v488 = &v487[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      (*(void (**)(char *, char *, uint64_t))(v482 + 16))(v487, v483, v219);
      swift_storeEnumTagMultiPayload();
      *(void *)long long v488 = 0;
      *((void *)v488 + 1) = 0;
      swift_storeEnumTagMultiPayload();
      uint64_t v145 = sub_1003FC080(v485);
      (*(void (**)(char *, uint64_t))(v482 + 8))(v483, v219);
      (*(void (**)(char *, uint64_t))(v227 + 8))(v625, v226);
LABEL_14:
      (*(void (**)(char *, void (*)(char *, char *, uint64_t)))(v655 + 8))(v656, v658);
      return v145;
    case 12:
      size_t v229 = v616;
      uint64_t v230 = v658;
      v131(v616, v113, v658);
      int v231 = v652;
      uint64_t v232 = (uint64_t)v653;
      uint64_t v659 = (uint64_t)v653;
      uint64_t v660 = v652;
      size_t v234 = (ValueMetadata *)v650;
      size_t v233 = (ValueMetadata *)AssociatedConformanceWitness;
      uint64_t v661 = (ValueMetadata *)v650;
      unint64_t v662 = (ValueMetadata *)AssociatedConformanceWitness;
      type metadata accessor for ThrottlingKey();
      sub_100033BE8((uint64_t *)&unk_100ACB6B0);
      swift_getTupleTypeMetadata2();
      swift_errorRelease();
      uint64_t v659 = v232;
      uint64_t v660 = v231;
      uint64_t v661 = v234;
      unint64_t v662 = v233;
      uint64_t v235 = type metadata accessor for ReconciliationID();
      if (swift_getEnumCaseMultiPayload() != 1)
      {
        switch(v229[*(int *)(swift_getTupleTypeMetadata2() + 48)])
        {
          case 0:
          case 23:
            size_t v477 = *(void (**)(char *, char *, uint64_t))(v647 + 32);
            size_t v478 = v589;
            v477(v589, v229, v232);
            (*(void (**)(char *, void (*)(char *, char *, uint64_t)))(v655 + 8))(v113, v230);
            uint64_t v479 = TupleTypeMetadata2;
            sub_10096D230();
            swift_allocObject();
            uint64_t v239 = sub_10096C0D0();
            long long v481 = (char *)v480 + *(int *)(v479 + 48);
            *long long v480 = 4;
            v477(v481, v478, v232);
            goto LABEL_132;
          case 1:
          case 2:
            unint64_t v236 = *(void (**)(char *, char *, uint64_t))(v647 + 32);
            unint64_t v237 = v588;
            v236(v588, v229, v232);
            (*(void (**)(char *, void (*)(char *, char *, uint64_t)))(v655 + 8))(v113, v230);
            uint64_t v238 = TupleTypeMetadata2;
            sub_10096D230();
            swift_allocObject();
            uint64_t v239 = sub_10096C0D0();
            unsigned int v241 = (char *)v240 + *(int *)(v238 + 48);
            void *v240 = 1024;
            v236(v241, v237, v232);
            swift_storeEnumTagMultiPayload();
            goto LABEL_133;
          default:
            (*(void (**)(char *, uint64_t))(v647 + 8))(v229, v232);
            goto LABEL_56;
        }
      }
      goto LABEL_43;
    case 13:
      unint64_t v242 = v618;
      unint64_t v243 = v658;
      v131(v618, v113, v658);
      uint64_t v244 = v653;
      uint64_t v659 = (uint64_t)v653;
      uint64_t v660 = v652;
      uint64_t v661 = (ValueMetadata *)v650;
      unint64_t v662 = (ValueMetadata *)AssociatedConformanceWitness;
      uint64_t v245 = type metadata accessor for ReconciliationID();
      if (swift_getEnumCaseMultiPayload() != 1)
      {
        switch(v242[*(int *)(swift_getTupleTypeMetadata2() + 48)])
        {
          case 0:
          case 1:
          case 3:
          case 6:
          case 12:
          case 23:
            unsigned int v246 = *(void (**)(char *, char *, ValueMetadata *))(v647 + 32);
            uint64_t v247 = v593;
            v246(v593, v242, v244);
            (*(void (**)(char *, void (*)(char *, char *, uint64_t)))(v655 + 8))(v113, v243);
            uint64_t v248 = TupleTypeMetadata2;
            sub_10096D230();
            swift_allocObject();
            uint64_t v239 = sub_10096C0D0();
            unint64_t v250 = (char *)v249 + *(int *)(v248 + 48);
            *unint64_t v249 = 262400;
            v246(v250, v247, v244);
            swift_storeEnumTagMultiPayload();
            goto LABEL_133;
          case 2:
            uint64_t v536 = v647;
            long long v537 = v645;
            (*(void (**)(char *, char *, ValueMetadata *))(v647 + 32))(v645, v242, v244);
            uint64_t v538 = TupleTypeMetadata2;
            sub_10096D230();
            swift_allocObject();
            uint64_t v539 = sub_10096C0D0();
            long long v541 = (char *)v540 + *(int *)(v538 + 48);
            *long long v540 = 262912;
            (*(void (**)(char *, char *, ValueMetadata *))(v536 + 16))(v541, v537, v244);
            swift_storeEnumTagMultiPayload();
            swift_storeEnumTagMultiPayload();
            uint64_t v145 = sub_1003FC080(v539);
            (*(void (**)(char *, ValueMetadata *))(v536 + 8))(v537, v244);
            goto LABEL_109;
          default:
            (*(void (**)(char *, ValueMetadata *))(v647 + 8))(v242, v244);
            goto LABEL_56;
        }
      }
      goto LABEL_55;
    case 20:
      unsigned int v251 = v610;
      uint64_t v252 = v658;
      v131(v610, v113, v658);
      if ((*v251 & 0x8000000000000000) == 0) {
        goto LABEL_25;
      }
      goto LABEL_87;
    case 21:
      uint64_t v252 = v658;
      v131(v85, v113, v658);
      if ((*(void *)v85 & 0x8000000000000000) == 0)
      {
        unint64_t v253 = (ValueMetadata *)v635;
        unint64_t v254 = v637;
        uint64_t v659 = v635;
        uint64_t v660 = v637;
        size_t v255 = v636;
        uint64_t v256 = v638;
        uint64_t v661 = v636;
        unint64_t v662 = v638;
        type metadata accessor for Materialization.MaterializeIgnoredItem();
        uint64_t v257 = swift_dynamicCastClass();
        uint64_t v258 = TupleTypeMetadata2;
        if (v257)
        {
          uint64_t v259 = v257;
          sub_10096D230();
          swift_allocObject();
          swift_retain();
          uint64_t v261 = sub_10096C0D0();
          unint64_t v262 = (char *)v260 + *(int *)(v258 + 48);
          uint64_t v263 = 0x4000;
LABEL_29:
          uint64_t *v260 = v263;
          uint64_t v264 = v259 + *(void *)(*(void *)v259 + 576);
          uint64_t v265 = (uint64_t)v653;
          (*(void (**)(char *, uint64_t, ValueMetadata *))(v647 + 16))(v262, v264, v653);
          uint64_t v659 = v265;
          uint64_t v660 = v652;
          uint64_t v661 = (ValueMetadata *)v650;
          unint64_t v662 = (ValueMetadata *)AssociatedConformanceWitness;
          type metadata accessor for ReconciliationID();
          swift_storeEnumTagMultiPayload();
LABEL_30:
          swift_storeEnumTagMultiPayload();
          uint64_t v266 = sub_1003FC080(v261);
LABEL_146:
          uint64_t v145 = v266;
          swift_release_n();
LABEL_147:
          (*(void (**)(char *, void (*)(char *, char *, uint64_t)))(v655 + 8))(v113, v252);
          return v145;
        }
        uint64_t v659 = (uint64_t)v254;
        uint64_t v660 = v253;
        uint64_t v661 = v256;
        unint64_t v662 = v255;
        type metadata accessor for Propagation.CreateItem();
        unint64_t v453 = (unsigned char *)swift_dynamicCastClass();
        if (v453)
        {
          if (v133)
          {
            unint64_t v454 = v453;
            if (v453[112] == 3)
            {
              unint64_t v455 = &v453[*(void *)(*(void *)v453 + 656)];
              swift_beginAccess();
              uint64_t v456 = v581;
              long long v457 = v580;
              uint64_t v458 = v582;
              (*(void (**)(char *, unsigned char *, uint64_t))(v581 + 16))(v580, v455, v582);
              uint64_t v459 = v584;
              uint64_t v460 = v585;
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v584 + 48))(v457, 1, v585) != 1)
              {
                BOOL v558 = v583;
                (*(void (**)(char *, char *, uint64_t))(v459 + 32))(v583, v457, v460);
                sub_10096D230();
                uint64_t v656 = v113;
                uint64_t v559 = *(void *)(v648 + 72);
                swift_allocObject();
                swift_retain();
                uint64_t v654 = sub_10096C0D0();
                uint64_t v560 = v459;
                unsigned int v562 = v561;
                uint64_t v563 = (char *)v561 + *(int *)(v258 + 48);
                *int v561 = 8;
                unint64_t v564 = v558;
                uint64_t v565 = (uint64_t)v653;
                (*(void (**)(char *, char *, ValueMetadata *))(v647 + 16))(v563, v564, v653);
                BOOL v566 = v652;
                uint64_t v659 = v565;
                uint64_t v660 = v652;
                uint64_t v661 = (ValueMetadata *)v650;
                unint64_t v662 = (ValueMetadata *)AssociatedConformanceWitness;
                type metadata accessor for ReconciliationID();
                swift_storeEnumTagMultiPayload();
                swift_storeEnumTagMultiPayload();
                size_t v567 = (void *)((char *)v562 + v559);
                unint64_t v568 = (char *)v562 + v559 + *(int *)(v258 + 48);
                void *v567 = 8;
                (*(void (**)(char *, unsigned char *, ValueMetadata *))(v646 + 16))(v568, &v454[*(void *)(*(void *)v454 + 576)], v566);
                swift_storeEnumTagMultiPayload();
                swift_storeEnumTagMultiPayload();
                uint64_t v145 = sub_1003FC080(v654);
                swift_release_n();
                (*(void (**)(char *, uint64_t))(v560 + 8))(v583, v585);
                (*(void (**)(char *, void (*)(char *, char *, uint64_t)))(v655 + 8))(v656, v252);
                return v145;
              }
              unint64_t v461 = *(void (**)(char *, uint64_t))(v456 + 8);
              swift_retain();
              v461(v457, v458);
              goto LABEL_145;
            }
          }
LABEL_144:
          swift_retain();
LABEL_145:
          uint64_t v266 = sub_10096C110();
          goto LABEL_146;
        }
        uint64_t v659 = (uint64_t)v254;
        uint64_t v660 = v253;
        uint64_t v661 = v256;
        unint64_t v662 = v255;
        type metadata accessor for Propagation.UpdateItem();
        uint64_t v489 = swift_dynamicCastClass();
        if (v489)
        {
          uint64_t v490 = v489;
          if (*(unsigned char *)(v489 + 112) == 3)
          {
            uint64_t v491 = *(void *)(v489 + 104);
            uint64_t v659 = *(void *)(v489 + 96);
            uint64_t v492 = v659;
            swift_retain();
            sub_10009C5FC(v492, v491, 3);
            sub_10002B7CC((uint64_t *)&unk_100ACB6B0);
            unint64_t v493 = v577;
            uint64_t v494 = v579;
            char v495 = swift_dynamicCast();
            uint64_t v496 = v578;
            long long v497 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v578 + 56);
            if (v495)
            {
              v497(v493, 0, 1, v494);
              long long v498 = v576;
              (*(void (**)(char *, char *, uint64_t))(v496 + 32))(v576, v493, v494);
              if ((*(unsigned char *)(v490 + *(void *)(*(void *)v490 + 640)) & 3) != 0)
              {
                long long v499 = v573;
                (*(void (**)(char *, char *, uint64_t))(v496 + 16))(v573, v498, v494);
                uint64_t v500 = swift_getEnumCaseMultiPayload();
                if (v500 == 1)
                {
                  __chkstk_darwin(v500);
                  strcpy((char *)&v571 - 48, " filename below syncability originalError ");
                  uint64_t v501 = (uint64_t)v653;
                  uint64_t v659 = (uint64_t)v653;
                  uint64_t v660 = &type metadata for Filename;
                  uint64_t v661 = v653;
                  unint64_t v662 = (ValueMetadata *)sub_100033BE8(qword_100ACD7A0);
                  unsigned int v663 = (ValueMetadata *)sub_100033BE8(&qword_100AD7360);
                  uint64_t v502 = swift_getTupleTypeMetadata();
                  swift_bridgeObjectRelease();
                  long long v503 = &v499[*(int *)(v502 + 64)];
                  sub_10010DC6C(*(void *)&v499[*(int *)(v502 + 80)], *(void *)&v499[*(int *)(v502 + 80) + 8]);
                  swift_errorRelease();
                  long long v504 = v499;
                  uint64_t v505 = v647;
                  long long v506 = v572;
                  (*(void (**)(char *, char *, uint64_t))(v647 + 32))(v572, v504, v501);
                  uint64_t v656 = *(char **)(v505 + 8);
                  ((void (*)(char *, uint64_t))v656)(v503, v501);
                  sub_10096D230();
                  swift_allocObject();
                  uint64_t v654 = sub_10096C0D0();
                  uint64_t v508 = (char *)v507 + *(int *)(v258 + 48);
                  void *v507 = 1024;
                  (*(void (**)(char *, char *, uint64_t))(v505 + 16))(v508, v506, v501);
                  uint64_t v659 = v501;
                  uint64_t v660 = v652;
                  uint64_t v661 = (ValueMetadata *)v650;
                  unint64_t v662 = (ValueMetadata *)AssociatedConformanceWitness;
                  type metadata accessor for ReconciliationID();
                  swift_storeEnumTagMultiPayload();
                  swift_storeEnumTagMultiPayload();
                  uint64_t v145 = sub_1003FC080(v654);
                  swift_release_n();
                  ((void (*)(char *, uint64_t))v656)(v506, v501);
                  (*(void (**)(char *, uint64_t))(v496 + 8))(v576, v579);
                }
                else
                {
                  unint64_t v570 = *(void (**)(char *, uint64_t))(v496 + 8);
                  v570(v499, v494);
                  uint64_t v145 = sub_10096C110();
                  swift_release_n();
                  v570(v498, v494);
                }
              }
              else
              {
                uint64_t v145 = sub_10096C110();
                swift_release_n();
                (*(void (**)(char *, uint64_t))(v496 + 8))(v498, v494);
              }
              goto LABEL_147;
            }
            v497(v493, 1, 1, v494);
            (*(void (**)(char *, uint64_t))(v574 + 8))(v493, v575);
            goto LABEL_145;
          }
          goto LABEL_144;
        }
        uint64_t v659 = (uint64_t)v253;
        uint64_t v660 = v254;
        uint64_t v661 = v255;
        unint64_t v662 = v256;
        type metadata accessor for Ingestion.DeleteFolderFromSnapshotIfEmpty();
        uint64_t v552 = swift_dynamicCastClass();
        if (v552)
        {
          uint64_t v553 = v552;
          sub_10096D230();
          swift_allocObject();
          swift_retain();
          uint64_t v261 = sub_10096C0D0();
          unint64_t v555 = (char *)v554 + *(int *)(v258 + 48);
          *unint64_t v554 = 1024;
          uint64_t v556 = v553 + *(void *)(*(void *)v553 + 576);
          uint64_t v557 = (uint64_t)v653;
          (*(void (**)(char *, uint64_t, ValueMetadata *))(v647 + 16))(v555, v556, v653);
          uint64_t v659 = v557;
          uint64_t v660 = v652;
          uint64_t v661 = (ValueMetadata *)v650;
          unint64_t v662 = (ValueMetadata *)AssociatedConformanceWitness;
          type metadata accessor for ReconciliationID();
          swift_storeEnumTagMultiPayload();
          goto LABEL_30;
        }
        uint64_t v659 = (uint64_t)v253;
        uint64_t v660 = v254;
        uint64_t v661 = v255;
        unint64_t v662 = v256;
        type metadata accessor for Ingestion.FaultDirectoryInTree();
        uint64_t v569 = swift_dynamicCastClass();
        if (v569)
        {
          uint64_t v259 = v569;
          sub_10096D230();
          swift_allocObject();
          swift_retain();
          uint64_t v261 = sub_10096C0D0();
          unint64_t v262 = (char *)v260 + *(int *)(v258 + 48);
          uint64_t v263 = 256;
          goto LABEL_29;
        }
LABEL_25:
        swift_release();
        goto LABEL_56;
      }
LABEL_87:
      uint64_t v362 = v635;
      uint64_t v363 = v637;
      uint64_t v659 = v635;
      uint64_t v660 = v637;
      uint64_t v364 = v636;
      int v365 = v638;
      uint64_t v661 = v636;
      unint64_t v662 = v638;
      type metadata accessor for Propagation.CreateItem();
      uint64_t v366 = swift_dynamicCastClass();
      uint64_t v367 = TupleTypeMetadata2;
      if (v366)
      {
        (*(void (**)(char *, void (*)(char *, char *, uint64_t)))(v655 + 8))(v113, v252);
        uint64_t v368 = v366 + *(void *)(*(void *)v366 + 656);
        swift_beginAccess();
        uint64_t v369 = v604;
        unsigned int v370 = v596;
        uint64_t v371 = v605;
        (*(void (**)(char *, uint64_t, uint64_t))(v604 + 16))(v596, v368, v605);
        uint64_t v372 = v607;
        uint64_t v373 = v608;
        int v374 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v607 + 48))(v370, 1, v608);
        uint64_t v375 = v652;
        if (v374 == 1)
        {
          (*(void (**)(char *, uint64_t))(v369 + 8))(v370, v371);
          sub_10096D230();
          swift_allocObject();
          uint64_t v239 = sub_10096C0D0();
          unsigned int v377 = (char *)v376 + *(int *)(v367 + 48);
          *uint64_t v376 = 8;
          uint64_t v378 = (uint64_t)v653;
          (*(void (**)(char *, uint64_t, ValueMetadata *))(v647 + 16))(v377, v366 + *(void *)(*(void *)v366 + 576), v653);
          swift_release();
          uint64_t v659 = v378;
          uint64_t v660 = v375;
          uint64_t v661 = (ValueMetadata *)v650;
          unint64_t v662 = (ValueMetadata *)AssociatedConformanceWitness;
          type metadata accessor for ReconciliationID();
LABEL_132:
          swift_storeEnumTagMultiPayload();
LABEL_133:
          swift_storeEnumTagMultiPayload();
          uint64_t v274 = v239;
          return sub_1003FC080(v274);
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v372 + 32))(v595, v370, v373);
          sub_10096D230();
          uint64_t v655 = *(void *)(v648 + 72);
          uint64_t v656 = (char *)(2 * v655);
          swift_allocObject();
          unint64_t v462 = (void (*)(char *, char *, uint64_t))sub_10096C0D0();
          unsigned int v464 = v463;
          uint64_t v465 = *(int *)(v367 + 48);
          void *v463 = 1024;
          unsigned int v466 = (char *)v463 + v465;
          unsigned int v658 = v462;
          uint64_t v659 = (uint64_t)v653;
          uint64_t v660 = v375;
          uint64_t v661 = (ValueMetadata *)v650;
          unint64_t v662 = (ValueMetadata *)AssociatedConformanceWitness;
          type metadata accessor for ReconciliationID();
          sub_100033BE8(&qword_100ADF5E0);
          unsigned int v467 = &v466[*(int *)(swift_getTupleTypeMetadata2() + 48)];
          unsigned int v468 = *(void (**)(char *, char *, ValueMetadata *))(v646 + 16);
          unsigned int v469 = v595;
          v468(v466, v595, v375);
          swift_storeEnumTagMultiPayload();
          unint64_t v470 = &v469[*(int *)(v373 + 36)];
          uint64_t v472 = *(void *)v470;
          uint64_t v471 = *((void *)v470 + 1);
          uint64_t v654 = v471;
          *(void *)unsigned int v467 = v472;
          *((void *)v467 + 1) = v471;
          swift_storeEnumTagMultiPayload();
          uint64_t v473 = TupleTypeMetadata2;
          unint64_t v474 = (char *)v464 + v655 + *(int *)(TupleTypeMetadata2 + 48);
          *(void *)((char *)v464 + v655) = 8;
          v468(v474, v469, v375);
          swift_storeEnumTagMultiPayload();
          swift_storeEnumTagMultiPayload();
          uint64_t v475 = &v656[(void)v464];
          int v476 = &v656[(void)v464 + *(int *)(v473 + 48)];
          *(void *)uint64_t v475 = 8;
          (*(void (**)(char *, uint64_t, ValueMetadata *))(v647 + 16))(v476, v366 + *(void *)(*(void *)v366 + 576), v653);
          swift_bridgeObjectRetain();
          swift_release();
          swift_storeEnumTagMultiPayload();
          swift_storeEnumTagMultiPayload();
          uint64_t v145 = sub_1003FC080((uint64_t)v658);
          (*(void (**)(char *, uint64_t))(v607 + 8))(v469, v608);
        }
      }
      else
      {
        uint64_t v659 = v362;
        uint64_t v660 = v363;
        uint64_t v661 = v364;
        unint64_t v662 = v365;
        type metadata accessor for Propagation.UpdateItem();
        uint64_t v406 = swift_dynamicCastClass();
        unsigned int v407 = v652;
        uint64_t v408 = v647;
        if (!v406) {
          goto LABEL_25;
        }
        (*(void (**)(char *, void (*)(char *, char *, uint64_t)))(v655 + 8))(v113, v252);
        uint64_t v666 = sub_10096C110();
        uint64_t v409 = v631;
        uint64_t v410 = (uint64_t)v653;
        (*(void (**)(char *, uint64_t, ValueMetadata *))(v408 + 16))(v631, v406 + *(void *)(*(void *)v406 + 576), v653);
        uint64_t v659 = v410;
        uint64_t v660 = v407;
        uint64_t v661 = (ValueMetadata *)v650;
        unint64_t v662 = (ValueMetadata *)AssociatedConformanceWitness;
        type metadata accessor for ReconciliationID();
        swift_storeEnumTagMultiPayload();
        uint64_t v411 = v649;
        swift_storeEnumTagMultiPayload();
        uint64_t v412 = v632;
        int v413 = (char *)v632 + *(int *)(v367 + 48);
        void *v632 = 8;
        unsigned int v414 = *(void (**)(char *, char *, uint64_t))(v639 + 32);
        v639 += 32;
        v414(v413, v409, v411);
        uint64_t v415 = sub_10096C1C0();
        sub_10096C180();
        uint64_t v416 = *(void *)v406;
        if ((*(unsigned char *)(v406 + *(void *)(*(void *)v406 + 640)) & 3) != 0)
        {
          uint64_t v656 = (char *)v415;
          unsigned int v658 = v414;
          uint64_t v417 = v406 + *(void *)(v416 + 664);
          swift_beginAccess();
          uint64_t v418 = v604;
          uint64_t v419 = v587;
          uint64_t v420 = v605;
          (*(void (**)(char *, uint64_t, uint64_t))(v604 + 16))(v587, v417, v605);
          swift_release();
          uint64_t v421 = v607;
          uint64_t v422 = v608;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v607 + 48))(v419, 1, v608) == 1)
          {
            (*(void (**)(char *, uint64_t))(v418 + 8))(v419, v420);
          }
          else
          {
            long long v542 = v419;
            long long v543 = v586;
            (*(void (**)(char *, char *, uint64_t))(v421 + 32))(v586, v542, v422);
            sub_100033BE8(&qword_100ADF5E0);
            uint64_t v544 = swift_getTupleTypeMetadata2();
            long long v545 = v631;
            uint64_t v546 = v421;
            unint64_t v547 = &v631[*(int *)(v544 + 48)];
            (*(void (**)(char *, char *, ValueMetadata *))(v646 + 16))(v631, v543, v407);
            swift_storeEnumTagMultiPayload();
            long long v548 = &v543[*(int *)(v422 + 36)];
            uint64_t v549 = v422;
            uint64_t v550 = *((void *)v548 + 1);
            *(void *)unint64_t v547 = *(void *)v548;
            *((void *)v547 + 1) = v550;
            swift_storeEnumTagMultiPayload();
            unsigned int v551 = (char *)v412 + *(int *)(v367 + 48);
            void *v412 = 1024;
            v658(v551, v545, v411);
            swift_bridgeObjectRetain();
            sub_10096C180();
            (*(void (**)(char *, uint64_t))(v546 + 8))(v543, v549);
          }
          return v666;
        }
        else
        {
          swift_release();
          return v666;
        }
      }
      return v145;
    case 22:
      unint64_t v267 = v612;
      v131(v612, v113, v658);
      if (*v267 != 1) {
        goto LABEL_35;
      }
      if ((v599 & 0x4000) == 0) {
        goto LABEL_56;
      }
      sub_10096D230();
      swift_allocObject();
      uint64_t v268 = sub_10096C0D0();
      *uint64_t v269 = 512;
      swift_storeEnumTagMultiPayload();
      uint64_t v270 = sub_1003FC080(v268);
      goto LABEL_57;
    case 23:
      unint64_t v271 = v613;
      v131(v613, v113, v658);
      if (*v271) {
        goto LABEL_56;
      }
LABEL_35:
      (*(void (**)(char *, void (*)(char *, char *, uint64_t)))(v655 + 8))(v113, v658);
      sub_10096D230();
      swift_allocObject();
      uint64_t v272 = sub_10096C0D0();
      *uint64_t v273 = 512;
      swift_storeEnumTagMultiPayload();
      uint64_t v274 = v272;
      return sub_1003FC080(v274);
    case 24:
      unsigned int v275 = v614;
      uint64_t v160 = v658;
      v131(v614, v113, v658);
      unsigned int v276 = v653;
      uint64_t v659 = (uint64_t)v653;
      uint64_t v660 = v652;
      uint64_t v661 = (ValueMetadata *)v650;
      unint64_t v662 = (ValueMetadata *)AssociatedConformanceWitness;
      uint64_t v277 = type metadata accessor for ReconciliationID();
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        (*(void (**)(char *, uint64_t))(*(void *)(v277 - 8) + 8))(v275, v277);
        goto LABEL_56;
      }
      char v339 = v133;
      uint64_t v278 = v647;
      unsigned int v279 = v598;
      (*(void (**)(char *, char *, ValueMetadata *))(v647 + 32))(v598, v275, v276);
      if (v339)
      {
        uint64_t v341 = sub_10096C110();
      }
      else
      {
        uint64_t v340 = TupleTypeMetadata2;
        sub_10096D230();
        swift_allocObject();
        uint64_t v281 = sub_10096C0D0();
        int v307 = (char *)v306 + *(int *)(v340 + 48);
        uint64_t v308 = 0x4000;
LABEL_75:
        *uint64_t v306 = v308;
        (*(void (**)(char *, char *, ValueMetadata *))(v278 + 16))(v307, v279, v276);
LABEL_76:
        swift_storeEnumTagMultiPayload();
LABEL_77:
        swift_storeEnumTagMultiPayload();
        uint64_t v341 = sub_1003FC080(v281);
      }
      uint64_t v145 = v341;
      (*(void (**)(char *, ValueMetadata *))(v278 + 8))(v279, v276);
      goto LABEL_79;
    case 25:
      unint64_t v242 = v609;
      uint64_t v160 = v658;
      v131(v609, v113, v658);
      unsigned int v276 = v652;
      uint64_t v659 = (uint64_t)v653;
      uint64_t v660 = v652;
      uint64_t v661 = (ValueMetadata *)v650;
      unint64_t v662 = (ValueMetadata *)AssociatedConformanceWitness;
      uint64_t v245 = type metadata accessor for ReconciliationID();
      if (swift_getEnumCaseMultiPayload() != 1) {
        goto LABEL_55;
      }
      uint64_t v278 = v646;
      unsigned int v279 = v627;
      (*(void (**)(char *, char *, ValueMetadata *))(v646 + 32))(v627, v242, v276);
      uint64_t v280 = TupleTypeMetadata2;
      sub_10096D230();
      swift_allocObject();
      uint64_t v281 = sub_10096C0D0();
      unsigned int v283 = (char *)v282 + *(int *)(v280 + 48);
      *unsigned int v282 = 4096;
      (*(void (**)(char *, char *, ValueMetadata *))(v278 + 16))(v283, v279, v276);
      goto LABEL_76;
    case 26:
      uint64_t v284 = v611;
      unint64_t v243 = v658;
      v131(v611, v113, v658);
      uint64_t v285 = v653;
      uint64_t v659 = (uint64_t)v653;
      uint64_t v660 = v652;
      uint64_t v661 = (ValueMetadata *)v650;
      unint64_t v662 = (ValueMetadata *)AssociatedConformanceWitness;
      uint64_t v286 = type metadata accessor for ReconciliationID();
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        (*(void (**)(char *, uint64_t))(*(void *)(v286 - 8) + 8))(v284, v286);
        goto LABEL_56;
      }
      char v342 = v133;
      uint64_t v343 = v647;
      unsigned int v344 = v597;
      (*(void (**)(char *, char *, ValueMetadata *))(v647 + 32))(v597, v284, v285);
      if (v342)
      {
        uint64_t v349 = sub_10096C110();
      }
      else
      {
        uint64_t v345 = TupleTypeMetadata2;
        sub_10096D230();
        swift_allocObject();
        uint64_t v346 = sub_10096C0D0();
        unsigned int v348 = (char *)v347 + *(int *)(v345 + 48);
        void *v347 = 2;
        (*(void (**)(char *, char *, ValueMetadata *))(v343 + 16))(v348, v344, v285);
        swift_storeEnumTagMultiPayload();
        swift_storeEnumTagMultiPayload();
        uint64_t v349 = sub_1003FC080(v346);
      }
      uint64_t v145 = v349;
      (*(void (**)(char *, ValueMetadata *))(v343 + 8))(v344, v285);
      goto LABEL_109;
    case 27:
      size_t v229 = v624;
      int v287 = v658;
      v131(v624, v113, v658);
      uint64_t v288 = v635;
      unsigned int v289 = v637;
      uint64_t v659 = v635;
      uint64_t v660 = v637;
      uint64_t v290 = v636;
      uint64_t v291 = v638;
      uint64_t v661 = v636;
      unint64_t v662 = v638;
      uint64_t v235 = type metadata accessor for TestingOperation();
      if (swift_getEnumCaseMultiPayload() == 1)
      {
LABEL_43:
        (*(void (**)(char *, uint64_t))(*(void *)(v235 - 8) + 8))(v229, v235);
        goto LABEL_56;
      }
      uint64_t v659 = v288;
      uint64_t v660 = v289;
      uint64_t v661 = v290;
      unint64_t v662 = v291;
      uint64_t v235 = type metadata accessor for DirectionalTestingOperation();
      uint64_t v350 = swift_getEnumCaseMultiPayload();
      switch((int)v350)
      {
        case 0:
          __chkstk_darwin(v350);
          strcpy((char *)&v571 - 48, " item version domainVersion ");
          uint64_t v353 = (uint64_t)v653;
          uint64_t v659 = (uint64_t)v653;
          uint64_t v660 = (ValueMetadata *)sub_10096C890();
          uint64_t v661 = (ValueMetadata *)&type metadata for UInt;
          unint64_t v662 = (ValueMetadata *)sub_100033BE8((uint64_t *)&unk_100AD6860);
          uint64_t v509 = swift_getTupleTypeMetadata();
          unint64_t v510 = &v229[*(int *)(v509 + 48)];

          unsigned int v351 = *(void (**)(char *, char *, uint64_t))(v647 + 32);
          uint64_t v352 = v594;
          v351(v594, v229, v353);
          uint64_t v511 = sub_10096C890();
          (*(void (**)(char *, uint64_t))(*(void *)(v511 - 8) + 8))(v510, v511);
          goto LABEL_149;
        case 1:
          uint64_t v656 = (char *)&v571;
          __chkstk_darwin(v350);
          uint64_t v654 = (uint64_t)(&v571 - 10);
          strcpy((char *)&v571 - 80, " item destinationItemID baseVersion fields version domainVersion ");
          uint64_t v353 = (uint64_t)v653;
          uint64_t v659 = (uint64_t)v653;
          uint64_t v660 = (ValueMetadata *)sub_10096C890();
          uint64_t v661 = (ValueMetadata *)sub_10096C890();
          uint64_t v513 = swift_getAssociatedTypeWitness();
          uint64_t v514 = swift_getAssociatedTypeWitness();
          uint64_t v515 = swift_getAssociatedConformanceWitness();
          uint64_t v646 = swift_getAssociatedConformanceWitness();
          uint64_t v666 = v513;
          uint64_t v667 = v514;
          uint64_t v668 = v515;
          uint64_t v669 = v646;
          type metadata accessor for FileItemVersion();
          unint64_t v662 = (ValueMetadata *)sub_10096C890();
          unsigned int v663 = &type metadata for Fields;
          BOOL v664 = &type metadata for UInt;
          uint64_t v665 = sub_100033BE8((uint64_t *)&unk_100AD6860);
          long long v516 = (int *)swift_getTupleTypeMetadata();
          uint64_t v654 = (uint64_t)&v229[v516[12]];
          unsigned int v645 = &v229[v516[16]];
          uint64_t v517 = v516[20];
          uint64_t v656 = v113;
          unint64_t v518 = &v229[v517];

          unsigned int v351 = *(void (**)(char *, char *, uint64_t))(v647 + 32);
          uint64_t v352 = v594;
          unint64_t v519 = v229;
          long long v512 = v652;
          v351(v594, v519, v353);
          uint64_t v659 = v513;
          uint64_t v660 = (ValueMetadata *)v514;
          uint64_t v661 = (ValueMetadata *)v515;
          unint64_t v662 = (ValueMetadata *)v646;
          type metadata accessor for FileItemVersion();
          uint64_t v520 = sub_10096C890();
          long long v521 = v518;
          long long v113 = v656;
          (*(void (**)(char *, uint64_t))(*(void *)(v520 - 8) + 8))(v521, v520);
          uint64_t v522 = sub_10096C890();
          (*(void (**)(char *, uint64_t))(*(void *)(v522 - 8) + 8))(v645, v522);
          uint64_t v523 = sub_10096C890();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v523 - 8) + 8))(v654, v523);
          goto LABEL_152;
        case 2:
          uint64_t v656 = (char *)&v571;
          __chkstk_darwin(v350);
          uint64_t v654 = (uint64_t)(&v571 - 8);
          strcpy((char *)&v571 - 64, " destinationItemID baseVersion recursive domainVersion ");
          uint64_t v353 = (uint64_t)v653;
          uint64_t v659 = (uint64_t)v653;
          uint64_t v660 = (ValueMetadata *)sub_10096C890();
          uint64_t v524 = swift_getAssociatedTypeWitness();
          uint64_t v525 = swift_getAssociatedTypeWitness();
          uint64_t v526 = swift_getAssociatedConformanceWitness();
          uint64_t v646 = v526;
          uint64_t v527 = swift_getAssociatedConformanceWitness();
          uint64_t v666 = v524;
          uint64_t v667 = v525;
          uint64_t v668 = v526;
          uint64_t v669 = v527;
          type metadata accessor for FileItemVersion();
          uint64_t v661 = (ValueMetadata *)sub_10096C890();
          unint64_t v662 = (ValueMetadata *)sub_100033BE8((uint64_t *)&unk_100AD7510);
          unsigned int v663 = (ValueMetadata *)sub_100033BE8((uint64_t *)&unk_100AD6860);
          unint64_t v528 = (int *)swift_getTupleTypeMetadata();
          uint64_t v656 = &v229[v528[12]];
          uint64_t v654 = (uint64_t)&v229[v528[16]];

          unsigned int v351 = *(void (**)(char *, char *, uint64_t))(v647 + 32);
          uint64_t v352 = v594;
          unint64_t v529 = v229;
          long long v512 = v652;
          v351(v594, v529, v353);
          uint64_t v659 = v524;
          uint64_t v660 = (ValueMetadata *)v525;
          uint64_t v661 = (ValueMetadata *)v646;
          unint64_t v662 = (ValueMetadata *)v527;
          type metadata accessor for FileItemVersion();
          uint64_t v530 = sub_10096C890();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v530 - 8) + 8))(v654, v530);
          uint64_t v531 = sub_10096C890();
          (*(void (**)(char *, uint64_t))(*(void *)(v531 - 8) + 8))(v656, v531);
          goto LABEL_152;
        case 4:
        case 5:
          unsigned int v351 = *(void (**)(char *, char *, uint64_t))(v647 + 32);
          uint64_t v352 = v594;
          uint64_t v353 = (uint64_t)v653;
          v351(v594, v229, (uint64_t)v653);
LABEL_149:
          long long v512 = v652;
LABEL_152:
          (*(void (**)(char *, void (*)(char *, char *, uint64_t)))(v655 + 8))(v113, v287);
          uint64_t v532 = TupleTypeMetadata2;
          sub_10096D230();
          swift_allocObject();
          uint64_t v533 = sub_10096C0D0();
          long long v535 = (char *)v534 + *(int *)(v532 + 48);
          void *v534 = 0x2000;
          v351(v535, v352, v353);
          uint64_t v659 = v353;
          uint64_t v660 = v512;
          uint64_t v661 = (ValueMetadata *)v650;
          unint64_t v662 = (ValueMetadata *)AssociatedConformanceWitness;
          type metadata accessor for ReconciliationID();
          swift_storeEnumTagMultiPayload();
          swift_storeEnumTagMultiPayload();
          uint64_t v274 = v533;
          break;
        default:
          goto LABEL_43;
      }
      return sub_1003FC080(v274);
    case 30:
      unint64_t v242 = v619;
      unint64_t v243 = v658;
      v131(v619, v113, v658);
      uint64_t v292 = v653;
      uint64_t v659 = (uint64_t)v653;
      uint64_t v660 = v652;
      uint64_t v661 = (ValueMetadata *)v650;
      unint64_t v662 = (ValueMetadata *)AssociatedConformanceWitness;
      uint64_t v245 = type metadata accessor for ReconciliationID();
      if (swift_getEnumCaseMultiPayload() == 1) {
        goto LABEL_55;
      }
      uint64_t v293 = v647;
      unsigned int v294 = v645;
      (*(void (**)(char *, char *, ValueMetadata *))(v647 + 32))(v645, v242, v292);
      uint64_t v295 = TupleTypeMetadata2;
      sub_10096D230();
      swift_allocObject();
      uint64_t v297 = sub_10096C0D0();
      unsigned int v298 = (char *)v296 + *(int *)(v295 + 48);
      uint64_t v299 = 0x4000;
      goto LABEL_86;
    case 32:
      unint64_t v242 = v615;
      uint64_t v160 = v658;
      v131(v615, v113, v658);
      unsigned int v276 = v653;
      uint64_t v659 = (uint64_t)v653;
      uint64_t v660 = v652;
      uint64_t v661 = (ValueMetadata *)v650;
      unint64_t v662 = (ValueMetadata *)AssociatedConformanceWitness;
      uint64_t v245 = type metadata accessor for ReconciliationID();
      if (swift_getEnumCaseMultiPayload() == 1) {
        goto LABEL_55;
      }
      uint64_t v278 = v647;
      unsigned int v279 = v645;
      (*(void (**)(char *, char *, ValueMetadata *))(v647 + 32))(v645, v242, v276);
      uint64_t v300 = TupleTypeMetadata2;
      sub_10096D230();
      swift_allocObject();
      uint64_t v281 = sub_10096C0D0();
      unsigned int v302 = (char *)v301 + *(int *)(v300 + 48);
      *unsigned int v301 = 8;
      (*(void (**)(char *, char *, ValueMetadata *))(v278 + 16))(v302, v279, v276);
      swift_storeEnumTagMultiPayload();
      goto LABEL_77;
    case 33:
      uint64_t v160 = v658;
      v131(v96, v113, v658);
      uint64_t v303 = v653;
      uint64_t v659 = (uint64_t)v653;
      uint64_t v660 = v652;
      uint64_t v661 = (ValueMetadata *)v650;
      unint64_t v662 = (ValueMetadata *)AssociatedConformanceWitness;
      uint64_t v304 = type metadata accessor for ReconciliationID();
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        (*(void (**)(char *, uint64_t))(*(void *)(v304 - 8) + 8))(v96, v304);
        goto LABEL_56;
      }
      uint64_t v354 = v647;
      unsigned int v355 = v645;
      (*(void (**)(char *, char *, ValueMetadata *))(v647 + 32))(v645, v96, v303);
      uint64_t v356 = TupleTypeMetadata2;
      sub_10096D230();
      swift_allocObject();
      uint64_t v357 = sub_10096C0D0();
      uint64_t v359 = (char *)v358 + *(int *)(v356 + 48);
      void *v358 = 1024;
      (*(void (**)(char *, char *, ValueMetadata *))(v354 + 16))(v359, v355, v303);
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
      uint64_t v145 = sub_1003FC080(v357);
      (*(void (**)(char *, ValueMetadata *))(v354 + 8))(v355, v303);
LABEL_79:
      (*(void (**)(char *, void (*)(char *, char *, uint64_t)))(v655 + 8))(v113, v160);
      return v145;
    case 34:
      unint64_t v242 = v617;
      uint64_t v160 = v658;
      v131(v617, v113, v658);
      unsigned int v276 = v653;
      uint64_t v659 = (uint64_t)v653;
      uint64_t v660 = v652;
      uint64_t v661 = (ValueMetadata *)v650;
      unint64_t v662 = (ValueMetadata *)AssociatedConformanceWitness;
      uint64_t v245 = type metadata accessor for ReconciliationID();
      if (swift_getEnumCaseMultiPayload() == 1) {
        goto LABEL_55;
      }
      uint64_t v278 = v647;
      unsigned int v279 = v645;
      (*(void (**)(char *, char *, ValueMetadata *))(v647 + 32))(v645, v242, v276);
      uint64_t v305 = TupleTypeMetadata2;
      sub_10096D230();
      swift_allocObject();
      uint64_t v281 = sub_10096C0D0();
      int v307 = (char *)v306 + *(int *)(v305 + 48);
      uint64_t v308 = 0x80000;
      goto LABEL_75;
    case 38:
      unint64_t v242 = v620;
      uint64_t v160 = v658;
      v131(v620, v113, v658);
      unsigned int v276 = v653;
      uint64_t v659 = (uint64_t)v653;
      uint64_t v660 = v652;
      uint64_t v661 = (ValueMetadata *)v650;
      unint64_t v662 = (ValueMetadata *)AssociatedConformanceWitness;
      uint64_t v245 = type metadata accessor for ReconciliationID();
      if (swift_getEnumCaseMultiPayload() == 1) {
        goto LABEL_55;
      }
      uint64_t v278 = v647;
      unsigned int v279 = v645;
      (*(void (**)(char *, char *, ValueMetadata *))(v647 + 32))(v645, v242, v276);
      uint64_t v309 = TupleTypeMetadata2;
      sub_10096D230();
      swift_allocObject();
      uint64_t v281 = sub_10096C0D0();
      int v307 = (char *)v306 + *(int *)(v309 + 48);
      uint64_t v308 = 1024;
      goto LABEL_75;
    case 40:
      unint64_t v242 = v622;
      unint64_t v243 = v658;
      v131(v622, v113, v658);
      uint64_t v292 = v653;
      uint64_t v659 = (uint64_t)v653;
      uint64_t v660 = v652;
      uint64_t v661 = (ValueMetadata *)v650;
      unint64_t v662 = (ValueMetadata *)AssociatedConformanceWitness;
      uint64_t v245 = type metadata accessor for ReconciliationID();
      if (swift_getEnumCaseMultiPayload() == 1)
      {
LABEL_55:
        (*(void (**)(char *, uint64_t))(*(void *)(v245 - 8) + 8))(v242, v245);
LABEL_56:
        uint64_t v270 = sub_10096C110();
LABEL_57:
        uint64_t v145 = v270;
LABEL_58:
        (*(void (**)(char *, void (*)(char *, char *, uint64_t)))(v655 + 8))(v113, v658);
      }
      else
      {
        uint64_t v293 = v647;
        unsigned int v294 = v645;
        (*(void (**)(char *, char *, ValueMetadata *))(v647 + 32))(v645, v242, v292);
        uint64_t v360 = TupleTypeMetadata2;
        sub_10096D230();
        swift_allocObject();
        uint64_t v297 = sub_10096C0D0();
        unsigned int v298 = (char *)v296 + *(int *)(v360 + 48);
        uint64_t v299 = 512;
LABEL_86:
        uint64_t *v296 = v299;
        sub_100033BE8(&qword_100ADF5E0);
        unsigned int v361 = &v298[*(int *)(swift_getTupleTypeMetadata2() + 48)];
        (*(void (**)(char *, char *, ValueMetadata *))(v293 + 16))(v298, v294, v292);
        swift_storeEnumTagMultiPayload();
        *(void *)unsigned int v361 = 0;
        *((void *)v361 + 1) = 0;
        swift_storeEnumTagMultiPayload();
        uint64_t v145 = sub_1003FC080(v297);
        (*(void (**)(char *, ValueMetadata *))(v293 + 8))(v294, v292);
LABEL_109:
        (*(void (**)(char *, void (*)(char *, char *, uint64_t)))(v655 + 8))(v113, v243);
      }
      return v145;
    default:
      goto LABEL_56;
  }
}

uint64_t sub_1001D1454@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = a1;
  a4[1] = a2;
  uint64_t v5 = (char *)a4 + *(int *)(type metadata accessor for PersistenceTrigger.AffectedItemJobs() + 56);
  swift_getAssociatedTypeWitness();
  uint64_t v6 = sub_10096C890();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(v5, a3, v6);
}

uint64_t sub_1001D1510(void *a1, uint64_t a2)
{
  uint64_t v421 = a1;
  uint64_t v3 = *(void (**)(void))(a2 + 16);
  uint64_t v4 = *(ValueMetadata **)(a2 + 32);
  uint64_t v418 = type metadata accessor for SnapshotItem();
  uint64_t v416 = *(void *)(v418 - 8);
  __chkstk_darwin(v418);
  unsigned int v404 = (char *)&v400 - v5;
  uint64_t v430 = v4;
  int v431 = v3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = sub_10096C890();
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v424 = (char *)&v400 - v9;
  uint64_t v10 = *(void *)(a2 - 8);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v408 = (char *)&v400 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  unsigned int v407 = (char *)&v400 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v400 - v16;
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v406 = (char *)&v400 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v400 - v21;
  uint64_t v23 = __chkstk_darwin(v20);
  uint64_t v411 = (char *)&v400 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v412 = (unsigned __int8 *)&v400 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v409 = (char *)&v400 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v410 = (char *)&v400 - v30;
  uint64_t v31 = __chkstk_darwin(v29);
  int v413 = (char *)&v400 - v32;
  uint64_t v33 = __chkstk_darwin(v31);
  uint64_t v417 = (char *)&v400 - v34;
  uint64_t v35 = __chkstk_darwin(v33);
  uint64_t v420 = (char *)&v400 - v36;
  uint64_t v37 = __chkstk_darwin(v35);
  uint64_t v39 = (char *)&v400 - v38;
  uint64_t v40 = __chkstk_darwin(v37);
  uint64_t v405 = (char *)&v400 - v41;
  uint64_t v42 = __chkstk_darwin(v40);
  uint64_t v419 = (char *)&v400 - v43;
  uint64_t v44 = __chkstk_darwin(v42);
  unsigned int v414 = (char *)&v400 - v45;
  uint64_t v46 = __chkstk_darwin(v44);
  uint64_t v48 = (char *)&v400 - v47;
  uint64_t v49 = __chkstk_darwin(v46);
  uint64_t v51 = (char *)&v400 - v50;
  uint64_t v52 = __chkstk_darwin(v49);
  uint64_t v54 = (char *)&v400 - v53;
  uint64_t v432 = (char *)&v400 - v53;
  uint64_t v426 = AssociatedTypeWitness;
  uint64_t v425 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v55 = __chkstk_darwin(v52);
  uint64_t v57 = (char *)&v400 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = __chkstk_darwin(v55);
  unsigned int v401 = (char *)&v400 - v59;
  uint64_t v60 = __chkstk_darwin(v58);
  uint64_t v402 = (char *)&v400 - v61;
  uint64_t v62 = __chkstk_darwin(v60);
  uint64_t v403 = (void (*)(void))((char *)&v400 - v63);
  uint64_t v64 = __chkstk_darwin(v62);
  unint64_t v423 = (void (*)(void))((char *)&v400 - v65);
  uint64_t v66 = __chkstk_darwin(v64);
  uint64_t v422 = (uint64_t)&v400 - v67;
  __chkstk_darwin(v66);
  uint64_t v415 = (char *)&v400 - v68;
  uint64_t v427 = v10;
  uint64_t v69 = *(void (**)(char *, ValueMetadata *, uint64_t))(v10 + 16);
  v69(v54, v428, a2);
  uint64_t v429 = a2;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v70 = v410;
      uint64_t v71 = v429;
      v69(v410, (ValueMetadata *)v432, v429);
      uint64_t v72 = *(ValueMetadata **)(v71 + 40);
      uint64_t v73 = *(void (**)(void))(v71 + 24);
      uint64_t v74 = swift_getAssociatedTypeWitness();
      uint64_t v75 = (uint64_t)v431;
      uint64_t v76 = v426;
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      uint64_t v78 = v76;
      uint64_t v79 = v70;
      uint64_t v80 = swift_getAssociatedConformanceWitness();
      uint64_t v435 = v78;
      uint64_t v436 = (void (*)(void))v74;
      uint64_t v437 = (ValueMetadata *)AssociatedConformanceWitness;
      int v438 = (ValueMetadata *)v80;
      uint64_t v81 = type metadata accessor for ReconciliationID();
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        (*(void (**)(char *, uint64_t))(*(void *)(v81 - 8) + 8))(v70, v81);
        goto LABEL_70;
      }
      uint64_t v275 = v425;
      unsigned int v276 = v423;
      (*(void (**)(void (*)(void), char *, uint64_t))(v425 + 32))(v423, v79, v78);
      uint64_t v435 = v75;
      uint64_t v436 = v73;
      uint64_t v437 = v430;
      int v438 = v72;
      type metadata accessor for PersistenceTrigger.AffectedItemJobs();
      sub_10096D230();
      swift_allocObject();
      unint64_t v428 = (ValueMetadata *)sub_10096C0D0();
      uint64_t v278 = v277;
      uint64_t v279 = (uint64_t)v424;
      (*(void (**)(char *, void (*)(void), uint64_t))(v275 + 16))(v424, v276, v78);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v275 + 56))(v279, 0, 1, v78);
      sub_1001D1454(8, (uint64_t)&off_100A6C520, v279, v278);
      uint64_t v171 = sub_1003FC080((uint64_t)v428);
      (*(void (**)(void (*)(void), uint64_t))(v275 + 8))(v276, v78);
      goto LABEL_76;
    case 2u:
      uint64_t v82 = v429;
      v69(v48, (ValueMetadata *)v432, v429);
      uint64_t v83 = *(void *)(v82 + 40);
      uint64_t v84 = *(void (**)(void))(v82 + 24);
      uint64_t v85 = swift_getAssociatedTypeWitness();
      uint64_t v86 = v426;
      uint64_t v87 = swift_getAssociatedConformanceWitness();
      uint64_t v88 = swift_getAssociatedConformanceWitness();
      uint64_t v435 = v86;
      uint64_t v436 = (void (*)(void))v85;
      uint64_t v437 = (ValueMetadata *)v87;
      int v438 = (ValueMetadata *)v88;
      uint64_t v89 = type metadata accessor for ReconciliationID();
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v90 = *(void (**)(char *, uint64_t))(*(void *)(v89 - 8) + 8);
        uint64_t v91 = v48;
        goto LABEL_48;
      }
      unint64_t v428 = (ValueMetadata *)v87;
      uint64_t v280 = v425;
      uint64_t v281 = v86;
      unsigned int v282 = v415;
      unint64_t v423 = *(void (**)(void))(v425 + 32);
      v423();
      goto LABEL_60;
    case 4u:
      uint64_t v71 = v429;
      v69(v39, (ValueMetadata *)v432, v429);
      uint64_t v92 = *(ValueMetadata **)(v71 + 40);
      uint64_t v93 = *(void (**)(void))(v71 + 24);
      uint64_t v94 = swift_getAssociatedTypeWitness();
      uint64_t v95 = v431;
      uint64_t v96 = v426;
      uint64_t v97 = swift_getAssociatedConformanceWitness();
      uint64_t v98 = swift_getAssociatedConformanceWitness();
      uint64_t v435 = v96;
      uint64_t v436 = (void (*)(void))v94;
      uint64_t v437 = (ValueMetadata *)v97;
      int v438 = (ValueMetadata *)v98;
      uint64_t v99 = type metadata accessor for ReconciliationID();
      uint64_t v100 = (uint64_t)&v39[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v101 = *(void (**)(uint64_t, uint64_t))(*(void *)(v99 - 8) + 8);
        v101(v100, v99);
        uint64_t v102 = v39;
        uint64_t v103 = v99;
        goto LABEL_39;
      }
      uint64_t v283 = v425;
      uint64_t v284 = (uint64_t)v95;
      uint64_t v285 = v423;
      (*(void (**)(void))(v425 + 32))();
      uint64_t v435 = v284;
      uint64_t v436 = v93;
      uint64_t v437 = v430;
      int v438 = v92;
      type metadata accessor for PersistenceTrigger.AffectedItemJobs();
      sub_10096D230();
      swift_allocObject();
      uint64_t v422 = sub_10096C0D0();
      int v287 = v286;
      uint64_t v288 = *(void (**)(char *, void (*)(void), uint64_t))(v283 + 16);
      unint64_t v428 = (ValueMetadata *)v100;
      uint64_t v289 = (uint64_t)v424;
      v288(v424, v285, v96);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v283 + 56))(v289, 0, 1, v96);
      sub_1001D1454(64, (uint64_t)&off_100A6C3E0, v289, v287);
      uint64_t v171 = sub_1003FC080(v422);
      (*(void (**)(void (*)(void), uint64_t))(v283 + 8))(v285, v96);
      (*(void (**)(ValueMetadata *, uint64_t))(*(void *)(v99 - 8) + 8))(v428, v99);
      goto LABEL_76;
    case 5u:
      unsigned int v104 = v420;
      uint64_t v105 = v429;
      v69(v420, (ValueMetadata *)v432, v429);
      uint64_t v106 = v418;
      uint64_t v107 = sub_10096C890();
      uint64_t v108 = &v104[*(int *)(swift_getTupleTypeMetadata3() + 48)];
      uint64_t v109 = v416;
      uint64_t v110 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v416 + 48);
      if (v110(v108, 1, v106) == 1)
      {
        if (v110(v104, 1, v106) == 1)
        {
          (*(void (**)(char *, uint64_t))(*(void *)(v107 - 8) + 8))(v104, v107);
          goto LABEL_70;
        }
        uint64_t v354 = v404;
        (*(void (**)(char *, char *, uint64_t))(v109 + 32))(v404, v104, v106);
        unint64_t v423 = *(void (**)(void))(v105 + 24);
        unint64_t v428 = *(ValueMetadata **)(v105 + 40);
        uint64_t v435 = (uint64_t)v431;
        uint64_t v436 = v423;
        uint64_t v437 = v430;
        int v438 = v428;
        type metadata accessor for PersistenceTrigger.AffectedItemJobs();
        sub_10096D230();
        swift_allocObject();
        uint64_t v355 = sub_10096C0D0();
        uint64_t v357 = v356;
        uint64_t v359 = (uint64_t)v424;
        uint64_t v358 = v425;
        uint64_t v360 = v426;
        (*(void (**)(char *, char *, uint64_t))(v425 + 16))(v424, v354, v426);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v358 + 56))(v359, 0, 1, v360);
        sub_1001D1454(96, (uint64_t)&off_100A6C408, v359, v357);
        uint64_t v171 = sub_1003FC080(v355);
        (*(void (**)(char *, uint64_t))(v109 + 8))(v354, v418);
      }
      else
      {
        uint64_t v290 = v404;
        (*(void (**)(char *, char *, uint64_t))(v109 + 32))(v404, v108, v106);
        unint64_t v428 = *(ValueMetadata **)(v105 + 24);
        unint64_t v423 = *(void (**)(void))(v105 + 40);
        uint64_t v435 = (uint64_t)v431;
        uint64_t v436 = (void (*)(void))v428;
        uint64_t v437 = v430;
        int v438 = (ValueMetadata *)v423;
        type metadata accessor for PersistenceTrigger.AffectedItemJobs();
        sub_10096D230();
        swift_allocObject();
        uint64_t v291 = sub_10096C0D0();
        uint64_t v293 = v292;
        uint64_t v295 = (uint64_t)v424;
        uint64_t v294 = v425;
        uint64_t v296 = v426;
        (*(void (**)(char *, char *, uint64_t))(v425 + 16))(v424, &v290[*(int *)(v106 + 36)], v426);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v294 + 56))(v295, 0, 1, v296);
        sub_1001D1454(8, (uint64_t)&off_100A6C430, v295, v293);
        uint64_t v171 = sub_1003FC080(v291);
        (*(void (**)(char *, uint64_t))(v109 + 8))(v290, v106);
        (*(void (**)(char *, uint64_t))(*(void *)(v107 - 8) + 8))(v420, v107);
      }
      goto LABEL_103;
    case 0xAu:
      uint64_t v111 = v417;
      uint64_t v112 = v429;
      v69(v417, (ValueMetadata *)v432, v429);
      long long v113 = *(ValueMetadata **)(v112 + 40);
      uint64_t v114 = *(void (**)(void))(v112 + 24);
      uint64_t v115 = swift_getAssociatedTypeWitness();
      uint64_t v116 = v426;
      uint64_t v117 = swift_getAssociatedConformanceWitness();
      uint64_t v118 = swift_getAssociatedConformanceWitness();
      uint64_t v435 = v116;
      uint64_t v436 = (void (*)(void))v115;
      uint64_t v437 = (ValueMetadata *)v117;
      int v438 = (ValueMetadata *)v118;
      uint64_t v435 = type metadata accessor for ReconciliationID();
      uint64_t v436 = (void (*)(void))sub_10096C890();
      uint64_t v437 = &type metadata for ContentStatus;
      int v438 = &type metadata for ContentStatus;
      uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
      uint64_t v120 = &v111[*(int *)(TupleTypeMetadata + 48)];
      int v121 = v111[*(int *)(TupleTypeMetadata + 80)];
      uint64_t v435 = v116;
      uint64_t v436 = (void (*)(void))v115;
      uint64_t v437 = (ValueMetadata *)v117;
      int v438 = (ValueMetadata *)v118;
      uint64_t v122 = v111;
      uint64_t v123 = type metadata accessor for ReconciliationID();
      if (swift_getEnumCaseMultiPayload() != 1)
      {
        uint64_t v297 = sub_10096C890();
        (*(void (**)(char *, uint64_t))(*(void *)(v297 - 8) + 8))(v120, v297);
        (*(void (**)(char *, uint64_t))(*(void *)(v123 - 8) + 8))(v122, v123);
        goto LABEL_70;
      }
      uint64_t v124 = *(void *)(v123 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v124 + 48))(v120, 1, v123) == 1)
      {
        (*(void (**)(char *, uint64_t))(v124 + 8))(v122, v123);
        uint64_t v125 = sub_10096C890();
        (*(void (**)(char *, uint64_t))(*(void *)(v125 - 8) + 8))(v120, v125);
        goto LABEL_70;
      }
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        unsigned int v361 = *(void (**)(char *, uint64_t))(v124 + 8);
        v361(v120, v123);
        v361(v122, v123);
        goto LABEL_70;
      }
      switch(v121)
      {
        case 4:
          uint64_t v379 = v425;
          uint64_t v395 = v426;
          char v381 = v423;
          (*(void (**)(void (*)(void), char *, uint64_t))(v425 + 32))(v423, v120, v426);
          uint64_t v435 = (uint64_t)v431;
          uint64_t v436 = v114;
          uint64_t v437 = v430;
          int v438 = v113;
          type metadata accessor for PersistenceTrigger.AffectedItemJobs();
          sub_10096D230();
          swift_allocObject();
          unint64_t v428 = (ValueMetadata *)sub_10096C0D0();
          unsigned int v397 = v396;
          uint64_t v384 = (uint64_t)v424;
          (*(void (**)(char *, void (*)(void), uint64_t))(v379 + 16))(v424, v381, v395);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v379 + 56))(v384, 0, 1, v395);
          uint64_t v385 = &off_100A6C4A8;
LABEL_101:
          uint64_t v386 = v397;
          uint64_t v387 = 32;
          goto LABEL_102;
        case 2:
          uint64_t v379 = v425;
          uint64_t v398 = v426;
          char v381 = v423;
          (*(void (**)(void (*)(void), char *, uint64_t))(v425 + 32))(v423, v120, v426);
          uint64_t v435 = (uint64_t)v431;
          uint64_t v436 = v114;
          uint64_t v437 = v430;
          int v438 = v113;
          type metadata accessor for PersistenceTrigger.AffectedItemJobs();
          sub_10096D230();
          swift_allocObject();
          unint64_t v428 = (ValueMetadata *)sub_10096C0D0();
          unsigned int v397 = v399;
          uint64_t v384 = (uint64_t)v424;
          (*(void (**)(char *, void (*)(void), uint64_t))(v379 + 16))(v424, v381, v398);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v379 + 56))(v384, 0, 1, v398);
          uint64_t v385 = &off_100A6C480;
          goto LABEL_101;
        case 0:
          uint64_t v379 = v425;
          uint64_t v380 = v426;
          char v381 = v423;
          (*(void (**)(void (*)(void), char *, uint64_t))(v425 + 32))(v423, v120, v426);
          uint64_t v435 = (uint64_t)v431;
          uint64_t v436 = v114;
          uint64_t v437 = v430;
          int v438 = v113;
          type metadata accessor for PersistenceTrigger.AffectedItemJobs();
          sub_10096D230();
          swift_allocObject();
          unint64_t v428 = (ValueMetadata *)sub_10096C0D0();
          uint64_t v383 = v382;
          uint64_t v384 = (uint64_t)v424;
          (*(void (**)(char *, void (*)(void), uint64_t))(v379 + 16))(v424, v381, v380);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v379 + 56))(v384, 0, 1, v380);
          uint64_t v385 = &off_100A6C458;
          uint64_t v386 = v383;
          uint64_t v387 = 64;
LABEL_102:
          sub_1001D1454(v387, (uint64_t)v385, v384, v386);
          uint64_t v171 = sub_1003FC080((uint64_t)v428);
          (*(void (**)(void (*)(void), uint64_t))(v379 + 8))(v381, v426);
          (*(void (**)(char *, uint64_t))(v124 + 8))(v417, v123);
          goto LABEL_103;
      }
      (*(void (**)(char *, uint64_t))(v425 + 8))(v120, v426);
      (*(void (**)(char *, uint64_t))(v124 + 8))(v122, v123);
LABEL_70:
      uint64_t v325 = v429;
      uint64_t v326 = *(void (**)(void))(v429 + 24);
      uint64_t v327 = *(ValueMetadata **)(v429 + 40);
      uint64_t v435 = (uint64_t)v431;
      uint64_t v436 = v326;
      uint64_t v437 = v430;
      int v438 = v327;
      type metadata accessor for PersistenceTrigger.AffectedItemJobs();
      uint64_t v171 = sub_10096C110();
      (*(void (**)(char *, uint64_t))(v427 + 8))(v432, v325);
      return v171;
    case 0xBu:
      uint64_t v126 = v414;
      uint64_t v82 = v429;
      uint64_t v127 = ((uint64_t (*)(char *, char *, uint64_t))v69)(v414, v432, v429);
      uint64_t v128 = v126;
      unint64_t v428 = (ValueMetadata *)&v400;
      __chkstk_darwin(v127);
      strcpy((char *)&v400 - 32, " otherID from to ");
      uint64_t v83 = *(void *)(v82 + 40);
      uint64_t v84 = *(void (**)(void))(v82 + 24);
      uint64_t v129 = swift_getAssociatedTypeWitness();
      uint64_t v130 = v426;
      uint64_t v131 = swift_getAssociatedConformanceWitness();
      uint64_t v132 = swift_getAssociatedConformanceWitness();
      uint64_t v435 = v130;
      uint64_t v436 = (void (*)(void))v129;
      uint64_t v437 = (ValueMetadata *)v131;
      int v438 = (ValueMetadata *)v132;
      uint64_t v435 = type metadata accessor for ReconciliationID();
      uint64_t v436 = (void (*)(void))sub_10096C890();
      uint64_t v437 = (ValueMetadata *)sub_100033BE8((uint64_t *)&unk_100AD4BE0);
      int v438 = v437;
      char v133 = &v126[*(int *)(swift_getTupleTypeMetadata() + 48)];
      uint64_t v435 = v130;
      uint64_t v436 = (void (*)(void))v129;
      unint64_t v428 = (ValueMetadata *)v131;
      uint64_t v437 = (ValueMetadata *)v131;
      int v438 = (ValueMetadata *)v132;
      uint64_t v134 = type metadata accessor for ReconciliationID();
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v135 = sub_10096C890();
        (*(void (**)(char *, uint64_t))(*(void *)(v135 - 8) + 8))(v133, v135);
        uint64_t v90 = *(void (**)(char *, uint64_t))(*(void *)(v134 - 8) + 8);
        uint64_t v91 = v128;
        goto LABEL_68;
      }
      unsigned int v298 = v128;
      uint64_t v280 = v425;
      uint64_t v281 = v130;
      unsigned int v282 = v415;
      unint64_t v423 = *(void (**)(void))(v425 + 32);
      ((void (*)(char *, char *, uint64_t))v423)(v415, v298, v281);
      uint64_t v299 = sub_10096C890();
      (*(void (**)(char *, uint64_t))(*(void *)(v299 - 8) + 8))(v133, v299);
LABEL_60:
      uint64_t v300 = v430;
      (*(void (**)(char *, uint64_t))(v427 + 8))(v432, v82);
      uint64_t v435 = (uint64_t)v431;
      uint64_t v436 = v84;
      uint64_t v437 = v300;
      int v438 = (ValueMetadata *)v83;
      uint64_t v301 = type metadata accessor for PersistenceTrigger.AffectedItemJobs();
      uint64_t v432 = (char *)v301;
      sub_10096D230();
      uint64_t v302 = *(void *)(*(void *)(v301 - 8) + 72);
      swift_allocObject();
      uint64_t v429 = sub_10096C0D0();
      uint64_t v304 = v303;
      uint64_t v422 = v83;
      uint64_t v305 = (uint64_t)v424;
      ((void (*)(char *, char *, uint64_t))v423)(v424, v282, v281);
      uint64_t v306 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v280 + 56);
      v306(v305, 0, 1, v281);
      sub_1001D1454(32, (uint64_t)&off_100A6C340, v305, v304);
      ((void (*)(uint64_t))v428[3].Kind)(v281);
      v306(v305, 0, 1, v281);
      sub_1001D1454(128, (uint64_t)&off_100A6C368, v305, (void *)((char *)v304 + v302));
      uint64_t v307 = v429;
      return sub_1003FC080(v307);
    case 0xDu:
      uint64_t v71 = v429;
      v69(v51, (ValueMetadata *)v432, v429);
      uint64_t v136 = *(ValueMetadata **)(v71 + 40);
      unsigned int v137 = *(void (**)(void))(v71 + 24);
      uint64_t v138 = swift_getAssociatedTypeWitness();
      uint64_t v139 = (uint64_t)v431;
      uint64_t v140 = v426;
      uint64_t v141 = swift_getAssociatedConformanceWitness();
      uint64_t v142 = swift_getAssociatedConformanceWitness();
      uint64_t v435 = v140;
      uint64_t v436 = (void (*)(void))v138;
      uint64_t v437 = (ValueMetadata *)v141;
      int v438 = (ValueMetadata *)v142;
      uint64_t v134 = type metadata accessor for ReconciliationID();
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v90 = *(void (**)(char *, uint64_t))(*(void *)(v134 - 8) + 8);
        uint64_t v91 = v51;
        goto LABEL_68;
      }
      char v308 = v51[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      uint64_t v309 = v425;
      (*(void (**)(void (*)(void), char *, uint64_t))(v425 + 32))(v423, v51, v140);
      uint64_t v435 = v139;
      uint64_t v436 = v137;
      uint64_t v437 = v430;
      int v438 = v136;
      type metadata accessor for PersistenceTrigger.AffectedItemJobs();
      sub_10096D230();
      swift_allocObject();
      unint64_t v428 = (ValueMetadata *)sub_10096C0D0();
      uint64_t v311 = v310;
      sub_10002B7CC(qword_100ACE270);
      uint64_t v312 = v140;
      uint64_t v313 = swift_allocObject();
      *(_OWORD *)(v313 + 16) = xmmword_100973BB0;
      *(unsigned char *)(v313 + 32) = v308;
      uint64_t v315 = v423;
      uint64_t v314 = (uint64_t)v424;
      (*(void (**)(char *, void (*)(void), uint64_t))(v309 + 16))(v424, v423, v312);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v309 + 56))(v314, 0, 1, v312);
      sub_1001D1454(393472, v313, v314, v311);
      uint64_t v171 = sub_1003FC080((uint64_t)v428);
      (*(void (**)(void (*)(void), uint64_t))(v309 + 8))(v315, v312);
      goto LABEL_76;
    case 0xEu:
      uint64_t v143 = v419;
      unsigned int v144 = v432;
      uint64_t v145 = v429;
      ((void (*)(char *))v69)(v419);
      uint64_t v146 = v143;
      uint64_t v147 = *(void *)(v145 + 40);
      char v148 = *(void (**)(void))(v145 + 24);
      uint64_t v149 = swift_getAssociatedTypeWitness();
      uint64_t v150 = v426;
      uint64_t v151 = swift_getAssociatedConformanceWitness();
      uint64_t v152 = swift_getAssociatedConformanceWitness();
      uint64_t v435 = v150;
      uint64_t v436 = (void (*)(void))v149;
      uint64_t v437 = (ValueMetadata *)v151;
      int v438 = (ValueMetadata *)v152;
      uint64_t v89 = type metadata accessor for ReconciliationID();
      sub_100033BE8((uint64_t *)&unk_100ACB6B0);
      uint64_t v153 = *(void *)&v146[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        swift_errorRelease();
LABEL_45:
        uint64_t v90 = *(void (**)(char *, uint64_t))(*(void *)(v89 - 8) + 8);
        uint64_t v91 = v146;
        goto LABEL_48;
      }
      uint64_t v434 = v153;
      if (swift_dynamicCast())
      {
        uint64_t v316 = v422;
        if (v433 == 3)
        {
          uint64_t v317 = v425;
          uint64_t v318 = *(void (**)(void (*)(void), char *, uint64_t))(v425 + 32);
          uint64_t v319 = (ValueMetadata *)v147;
          unint64_t v428 = (ValueMetadata *)v147;
          uint64_t v320 = v423;
          v318(v423, v146, v150);
          uint64_t v435 = (uint64_t)v431;
          uint64_t v436 = v148;
          uint64_t v437 = v430;
          int v438 = v319;
          type metadata accessor for PersistenceTrigger.AffectedItemJobs();
          sub_10096D230();
          swift_allocObject();
          uint64_t v321 = sub_10096C0D0();
          uint64_t v323 = v322;
          uint64_t v324 = (uint64_t)v424;
          (*(void (**)(char *, void (*)(void), uint64_t))(v317 + 16))(v424, v320, v150);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v317 + 56))(v324, 0, 1, v150);
          sub_1001D1454(64, (uint64_t)&off_100A6C390, v324, v323);
          uint64_t v171 = sub_1003FC080(v321);
          (*(void (**)(void (*)(void), uint64_t))(v317 + 8))(v320, v150);
          swift_errorRelease();
          (*(void (**)(char *, uint64_t))(v427 + 8))(v144, v145);
          return v171;
        }
        uint64_t v329 = (uint64_t)v148;
      }
      else
      {
        uint64_t v329 = (uint64_t)v148;
        uint64_t v316 = v422;
      }
      swift_errorRelease();
      uint64_t v330 = v425;
      uint64_t v249 = v426;
      uint64_t v331 = *(void (**)(void))(v425 + 32);
      uint64_t v333 = v316;
      int v332 = v419;
LABEL_91:
      unint64_t v423 = v331;
      ((void (*)(uint64_t, char *, uint64_t))v331)(v333, v332, v249);
      (*(void (**)(char *, uint64_t))(v427 + 8))(v144, v145);
      uint64_t v435 = (uint64_t)v431;
      uint64_t v436 = (void (*)(void))v329;
      unint64_t v428 = (ValueMetadata *)v329;
      uint64_t v437 = v430;
      int v438 = (ValueMetadata *)v147;
      type metadata accessor for PersistenceTrigger.AffectedItemJobs();
      sub_10096D230();
      swift_allocObject();
      uint64_t v375 = sub_10096C0D0();
      unsigned int v377 = v376;
      uint64_t v378 = (uint64_t)v424;
      ((void (*)(char *, uint64_t, uint64_t))v423)(v424, v422, v249);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v330 + 56))(v378, 0, 1, v249);
      sub_1001D1454(96, (uint64_t)&off_100A6C3B8, v378, v377);
      uint64_t v307 = v375;
      return sub_1003FC080(v307);
    case 0xFu:
      unsigned int v246 = v405;
      unsigned int v144 = v432;
      uint64_t v145 = v429;
      ((void (*)(char *))v69)(v405);
      uint64_t v146 = v246;
      uint64_t v147 = *(void *)(v145 + 40);
      uint64_t v247 = *(void *)(v145 + 24);
      uint64_t v248 = swift_getAssociatedTypeWitness();
      uint64_t v249 = v426;
      uint64_t v250 = swift_getAssociatedConformanceWitness();
      uint64_t v251 = swift_getAssociatedConformanceWitness();
      uint64_t v435 = v249;
      uint64_t v436 = (void (*)(void))v248;
      uint64_t v437 = (ValueMetadata *)v250;
      int v438 = (ValueMetadata *)v251;
      uint64_t v89 = type metadata accessor for ReconciliationID();
      sub_100033BE8((uint64_t *)&unk_100ACB6B0);
      swift_getTupleTypeMetadata2();
      swift_errorRelease();
      if (swift_getEnumCaseMultiPayload() == 1) {
        goto LABEL_45;
      }
      uint64_t v329 = v247;
      uint64_t v330 = v425;
      uint64_t v331 = *(void (**)(void))(v425 + 32);
      int v332 = v146;
      uint64_t v333 = v422;
      goto LABEL_91;
    case 0x13u:
      int v154 = (unsigned __int8 *)v409;
      uint64_t v155 = v429;
      v69(v409, (ValueMetadata *)v432, v429);
      LODWORD(v428) = *v154;
      uint64_t v156 = *(ValueMetadata **)(v155 + 40);
      uint64_t v157 = *(void (**)(void))(v155 + 24);
      uint64_t v158 = swift_getAssociatedTypeWitness();
      uint64_t v159 = (uint64_t)v431;
      uint64_t v160 = v426;
      uint64_t v161 = swift_getAssociatedConformanceWitness();
      uint64_t v162 = swift_getAssociatedConformanceWitness();
      uint64_t v435 = v160;
      uint64_t v436 = (void (*)(void))v158;
      uint64_t v437 = (ValueMetadata *)v161;
      int v438 = (ValueMetadata *)v162;
      uint64_t v134 = type metadata accessor for ReconciliationID();
      uint64_t v163 = &v154[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      if (swift_getEnumCaseMultiPayload() == 1) {
        goto LABEL_67;
      }
      uint64_t v164 = v425;
      (*(void (**)(void (*)(void), unsigned __int8 *, uint64_t))(v425 + 32))(v423, v163, v160);
      uint64_t v435 = v159;
      uint64_t v436 = v157;
      uint64_t v437 = v430;
      int v438 = v156;
      type metadata accessor for PersistenceTrigger.AffectedItemJobs();
      sub_10096D230();
      swift_allocObject();
      uint64_t v165 = sub_10096C0D0();
      uint64_t v421 = v166;
      uint64_t v422 = v165;
      sub_10002B7CC(qword_100ACE270);
      uint64_t v167 = v160;
      uint64_t v168 = swift_allocObject();
      *(_OWORD *)(v168 + 16) = xmmword_100973BB0;
      *(unsigned char *)(v168 + 32) = (_BYTE)v428;
      uint64_t v170 = v423;
      uint64_t v169 = (uint64_t)v424;
      (*(void (**)(char *, void (*)(void), uint64_t))(v164 + 16))(v424, v423, v167);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v164 + 56))(v169, 0, 1, v167);
      sub_1001D1454(2048, v168, v169, v421);
      uint64_t v171 = sub_1003FC080(v422);
      (*(void (**)(void (*)(void), uint64_t))(v164 + 8))(v170, v167);
      goto LABEL_98;
    case 0x15u:
      uint64_t v155 = v429;
      v69(v17, (ValueMetadata *)v432, v429);
      if ((*(void *)v17 & 0x8000000000000000) != 0)
      {
        uint64_t v346 = *(void (**)(void))(v155 + 24);
        unsigned int v347 = *(ValueMetadata **)(v155 + 40);
        unsigned int v348 = v430;
        uint64_t v349 = (uint64_t)v431;
        uint64_t v435 = (uint64_t)v346;
        uint64_t v436 = v431;
        uint64_t v437 = v347;
        int v438 = v430;
        type metadata accessor for DiskImport.DiskImportFinished();
        if (swift_dynamicCastClass())
        {
          uint64_t v435 = v349;
          uint64_t v436 = v346;
          uint64_t v437 = v348;
          int v438 = v347;
          type metadata accessor for PersistenceTrigger.AffectedItemJobs();
          sub_10096D230();
          swift_allocObject();
          uint64_t v350 = sub_10096C0D0();
          uint64_t v352 = v351;
          uint64_t v353 = (uint64_t)v424;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v425 + 56))(v424, 1, 1, v426);
          sub_1001D1454(0x400000, (uint64_t)&off_100A6C6B0, v353, v352);
          uint64_t v171 = sub_1003FC080(v350);
          swift_release();
LABEL_98:
          (*(void (**)(char *, uint64_t))(v427 + 8))(v432, v155);
          return v171;
        }
      }
      else
      {
        uint64_t v172 = *(void (**)(void))(v155 + 24);
        uint64_t v173 = *(ValueMetadata **)(v155 + 40);
        uint64_t v174 = v430;
        uint64_t v435 = (uint64_t)v172;
        uint64_t v436 = v431;
        uint64_t v437 = v173;
        int v438 = v430;
        type metadata accessor for Propagation.CreateItem();
        uint64_t v175 = (unsigned char *)swift_dynamicCastClass();
        if (v175)
        {
          uint64_t v176 = v426;
          if (v175[112] == 3
            && (uint64_t v177 = &v175[*(void *)(*(void *)v175 + 656)],
                swift_beginAccess(),
                swift_getAssociatedConformanceWitness(),
                uint64_t v178 = type metadata accessor for ItemState(),
                !(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v178 - 8) + 48))(v177, 1, v178)))
          {
            uint64_t v388 = v425;
            uint64_t v389 = *(void (**)(char *, char *, uint64_t))(v425 + 16);
            unint64_t v428 = (ValueMetadata *)(v425 + 16);
            v389(v57, v177, v176);
            (*(void (**)(char *, char *, uint64_t))(v388 + 32))(v401, v57, v176);
            uint64_t v435 = (uint64_t)v431;
            uint64_t v436 = v172;
            uint64_t v437 = v174;
            int v438 = v173;
            type metadata accessor for PersistenceTrigger.AffectedItemJobs();
            sub_10096D230();
            swift_allocObject();
            swift_retain();
            unint64_t v423 = (void (*)(void))sub_10096C0D0();
            uint64_t v391 = v390;
            uint64_t v392 = (uint64_t)v424;
            uint64_t v393 = v401;
            v389(v424, v401, v176);
            uint64_t v394 = v425;
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v425 + 56))(v392, 0, 1, v176);
            sub_1001D1454(32, (uint64_t)&off_100A6C688, v392, v391);
            uint64_t v171 = sub_1003FC080((uint64_t)v423);
            swift_release_n();
            (*(void (**)(char *, uint64_t))(v394 + 8))(v393, v176);
          }
          else
          {
            swift_retain();
            uint64_t v435 = (uint64_t)v431;
            uint64_t v436 = v172;
            uint64_t v437 = v174;
            int v438 = v173;
            type metadata accessor for PersistenceTrigger.AffectedItemJobs();
            uint64_t v171 = sub_10096C110();
            swift_release_n();
          }
          goto LABEL_98;
        }
      }
      swift_release();
      goto LABEL_70;
    case 0x16u:
      uint64_t v179 = v408;
      v69(v408, (ValueMetadata *)v432, v429);
      if (*v179) {
        goto LABEL_70;
      }
      uint64_t v180 = v429;
      uint64_t v181 = *(void (**)(void))(v429 + 24);
      uint64_t v182 = *(ValueMetadata **)(v429 + 40);
      uint64_t v435 = (uint64_t)v431;
      uint64_t v436 = v181;
      uint64_t v437 = v430;
      int v438 = v182;
      type metadata accessor for PersistenceTrigger.AffectedItemJobs();
      sub_10096D230();
      swift_allocObject();
      uint64_t v183 = sub_10096C0D0();
      uint64_t v185 = v184;
      uint64_t v186 = v424;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v425 + 56))(v424, 1, 1, v426);
      uint64_t v187 = &off_100A6C700;
      uint64_t v188 = v185;
      uint64_t v189 = 0x2000000;
LABEL_52:
      uint64_t v237 = (uint64_t)v186;
      goto LABEL_53;
    case 0x17u:
      v69(v22, (ValueMetadata *)v432, v429);
      if (*v22) {
        goto LABEL_70;
      }
      uint64_t v180 = v429;
      unint64_t v428 = *(ValueMetadata **)(v429 + 24);
      uint64_t v190 = *(ValueMetadata **)(v429 + 40);
      uint64_t v435 = (uint64_t)v431;
      uint64_t v436 = (void (*)(void))v428;
      uint64_t v437 = v430;
      int v438 = v190;
      type metadata accessor for PersistenceTrigger.AffectedItemJobs();
      sub_10096D230();
      swift_allocObject();
      uint64_t v183 = sub_10096C0D0();
      uint64_t v192 = v191;
      uint64_t v193 = v424;
      uint64_t v194 = v425;
      uint64_t v195 = v426;
      (*(void (**)(char *, void *, uint64_t))(v425 + 16))(v424, v421, v426);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v194 + 56))(v193, 0, 1, v195);
      uint64_t v187 = &off_100A6C638;
      uint64_t v188 = v192;
      uint64_t v189 = 0x20000;
LABEL_41:
      uint64_t v237 = (uint64_t)v193;
LABEL_53:
      sub_1001D1454(v189, (uint64_t)v187, v237, v188);
      uint64_t v171 = sub_1003FC080(v183);
      (*(void (**)(char *, uint64_t))(v427 + 8))(v432, v180);
      return v171;
    case 0x1Bu:
      uint64_t v163 = v412;
      uint64_t v196 = v429;
      v69((char *)v412, (ValueMetadata *)v432, v429);
      uint64_t v197 = *(void (**)(void))(v196 + 24);
      uint64_t v198 = *(ValueMetadata **)(v196 + 40);
      unsigned int v199 = v430;
      uint64_t v200 = (uint64_t)v431;
      uint64_t v435 = (uint64_t)v431;
      uint64_t v436 = v197;
      uint64_t v437 = v430;
      int v438 = v198;
      uint64_t v134 = type metadata accessor for TestingOperation();
      if (swift_getEnumCaseMultiPayload() == 1) {
        goto LABEL_67;
      }
      uint64_t v435 = v200;
      uint64_t v436 = v197;
      uint64_t v437 = v199;
      int v438 = v198;
      uint64_t v134 = type metadata accessor for DirectionalTestingOperation();
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 7)
      {
        uint64_t v202 = v425;
        unsigned int v203 = v423;
        uint64_t v372 = v163;
        uint64_t v373 = v426;
        (*(void (**)(void (*)(void), unsigned __int8 *, uint64_t))(v425 + 32))(v423, v372, v426);
        uint64_t v435 = v200;
        uint64_t v436 = v197;
        uint64_t v437 = v199;
        int v438 = v198;
        unint64_t v428 = (ValueMetadata *)type metadata accessor for PersistenceTrigger.AffectedItemJobs();
        sub_10096D230();
        swift_allocObject();
        uint64_t v422 = sub_10096C0D0();
        int v207 = v374;
        uint64_t v208 = (uint64_t)v424;
        (*(void (**)(char *, void (*)(void), uint64_t))(v202 + 16))(v424, v203, v373);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v202 + 56))(v208, 0, 1, v373);
        uint64_t v209 = &off_100A6C5E8;
      }
      else
      {
        if (EnumCaseMultiPayload != 5) {
          goto LABEL_67;
        }
        uint64_t v202 = v425;
        unsigned int v203 = v423;
        uint64_t v204 = v163;
        uint64_t v205 = v426;
        (*(void (**)(void (*)(void), unsigned __int8 *, uint64_t))(v425 + 32))(v423, v204, v426);
        uint64_t v435 = v200;
        uint64_t v436 = v197;
        uint64_t v437 = v199;
        int v438 = v198;
        unint64_t v428 = (ValueMetadata *)type metadata accessor for PersistenceTrigger.AffectedItemJobs();
        sub_10096D230();
        swift_allocObject();
        uint64_t v422 = sub_10096C0D0();
        int v207 = v206;
        uint64_t v208 = (uint64_t)v424;
        (*(void (**)(char *, void (*)(void), uint64_t))(v202 + 16))(v424, v203, v205);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v202 + 56))(v208, 0, 1, v205);
        uint64_t v209 = &off_100A6C5C0;
      }
      sub_1001D1454(0x2000, (uint64_t)v209, v208, v207);
      uint64_t v171 = sub_1003FC080(v422);
      (*(void (**)(void (*)(void), uint64_t))(v202 + 8))(v203, v426);
LABEL_88:
      (*(void (**)(char *, uint64_t))(v427 + 8))(v432, v196);
      return v171;
    case 0x1Du:
      int v210 = (unsigned __int8 *)v411;
      uint64_t v196 = v429;
      v69(v411, (ValueMetadata *)v432, v429);
      uint64_t v211 = *(ValueMetadata **)(v196 + 40);
      uint64_t v212 = *(void (**)(void))(v196 + 24);
      uint64_t v213 = swift_getAssociatedTypeWitness();
      size_t v214 = v430;
      uint64_t v215 = v426;
      uint64_t v216 = swift_getAssociatedConformanceWitness();
      uint64_t v217 = swift_getAssociatedConformanceWitness();
      uint64_t v435 = v215;
      uint64_t v436 = (void (*)(void))v213;
      uint64_t v163 = v210;
      uint64_t v437 = (ValueMetadata *)v216;
      int v438 = (ValueMetadata *)v217;
      uint64_t v134 = type metadata accessor for ReconciliationID();
      if (swift_getEnumCaseMultiPayload() == 1) {
        goto LABEL_67;
      }
      uint64_t v218 = v425;
      uint64_t v219 = v423;
      (*(void (**)(void (*)(void), unsigned __int8 *, uint64_t))(v425 + 32))(v423, v163, v215);
      uint64_t v435 = (uint64_t)v431;
      uint64_t v436 = v212;
      uint64_t v437 = v214;
      int v438 = v211;
      type metadata accessor for PersistenceTrigger.AffectedItemJobs();
      sub_10096D230();
      swift_allocObject();
      unint64_t v428 = (ValueMetadata *)sub_10096C0D0();
      unint64_t v221 = v220;
      uint64_t v222 = (uint64_t)v424;
      (*(void (**)(char *, void (*)(void), uint64_t))(v218 + 16))(v424, v219, v215);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v218 + 56))(v222, 0, 1, v215);
      sub_1001D1454(0x10000, (uint64_t)&off_100A6C610, v222, v221);
      uint64_t v171 = sub_1003FC080((uint64_t)v428);
      (*(void (**)(void (*)(void), uint64_t))(v218 + 8))(v219, v215);
      goto LABEL_88;
    case 0x1Fu:
      uint64_t v223 = v413;
      uint64_t v224 = v429;
      v69(v413, (ValueMetadata *)v432, v429);
      int v225 = *(ValueMetadata **)(v224 + 40);
      uint64_t v226 = *(void (**)(void))(v224 + 24);
      uint64_t v227 = swift_getAssociatedTypeWitness();
      uint64_t v228 = v430;
      uint64_t v229 = v426;
      uint64_t v230 = swift_getAssociatedConformanceWitness();
      uint64_t v231 = swift_getAssociatedConformanceWitness();
      uint64_t v435 = v229;
      uint64_t v436 = (void (*)(void))v227;
      uint64_t v437 = (ValueMetadata *)v230;
      int v438 = (ValueMetadata *)v231;
      uint64_t v134 = type metadata accessor for ReconciliationID();
      uint64_t v163 = (unsigned __int8 *)&v223[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v101 = *(void (**)(uint64_t, uint64_t))(*(void *)(v134 - 8) + 8);
        v101((uint64_t)v163, v134);
        uint64_t v102 = v223;
        uint64_t v103 = v134;
LABEL_39:
        v101((uint64_t)v102, v103);
        goto LABEL_70;
      }
      if (swift_getEnumCaseMultiPayload() != 1)
      {
        uint64_t v362 = v426;
        uint64_t v363 = v425;
        uint64_t v364 = *(void (**)(void (*)(void), char *, uint64_t))(v425 + 32);
        v364(v423, v223, v426);
        v364(v403, (char *)v163, v362);
        uint64_t v435 = (uint64_t)v431;
        uint64_t v436 = v226;
        uint64_t v437 = v228;
        int v438 = v225;
        uint64_t v365 = type metadata accessor for PersistenceTrigger.AffectedItemJobs();
        unint64_t v428 = (ValueMetadata *)v365;
        sub_10096D230();
        uint64_t v421 = *(void **)(*(void *)(v365 - 8) + 72);
        swift_allocObject();
        uint64_t v422 = sub_10096C0D0();
        uint64_t v367 = v366;
        uint64_t v420 = *(char **)(v363 + 16);
        uint64_t v368 = (uint64_t)v424;
        ((void (*)(char *, void (*)(void), uint64_t))v420)(v424, v423, v362);
        uint64_t v369 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v363 + 56);
        v369(v368, 0, 1, v362);
        sub_1001D1454(96, (uint64_t)&off_100A6C4D0, v368, v367);
        uint64_t v421 = (void *)((char *)v421 + (void)v367);
        unsigned int v370 = (char *)v403;
        ((void (*)(uint64_t, void (*)(void), uint64_t))v420)(v368, v403, v362);
        v369(v368, 0, 1, v362);
        sub_1001D1454(8, (uint64_t)&off_100A6C4F8, v368, v421);
        uint64_t v171 = sub_1003FC080(v422);
        uint64_t v371 = *(void (**)(char *, uint64_t))(v425 + 8);
        v371(v370, v362);
        v371((char *)v423, v362);
        goto LABEL_103;
      }
      (*(void (**)(char *, uint64_t))(v425 + 8))(v223, v426);
LABEL_67:
      uint64_t v90 = *(void (**)(char *, uint64_t))(*(void *)(v134 - 8) + 8);
      uint64_t v91 = (char *)v163;
      goto LABEL_68;
    case 0x22u:
      uint64_t v252 = v406;
      uint64_t v253 = v429;
      v69(v406, (ValueMetadata *)v432, v429);
      unint64_t v254 = *(ValueMetadata **)(v253 + 40);
      uint64_t v255 = *(void *)(v253 + 24);
      uint64_t v256 = swift_getAssociatedTypeWitness();
      uint64_t v257 = v430;
      uint64_t v258 = v426;
      uint64_t v259 = swift_getAssociatedConformanceWitness();
      uint64_t v260 = swift_getAssociatedConformanceWitness();
      uint64_t v435 = v258;
      uint64_t v436 = (void (*)(void))v256;
      uint64_t v261 = v252;
      uint64_t v437 = (ValueMetadata *)v259;
      int v438 = (ValueMetadata *)v260;
      uint64_t v89 = type metadata accessor for ReconciliationID();
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v90 = *(void (**)(char *, uint64_t))(*(void *)(v89 - 8) + 8);
        uint64_t v91 = v252;
LABEL_48:
        uint64_t v262 = v89;
        goto LABEL_69;
      }
      uint64_t v334 = v425;
      uint64_t v335 = v402;
      (*(void (**)(char *, char *, uint64_t))(v425 + 32))(v402, v261, v258);
      if (((*(uint64_t (**)(uint64_t, uint64_t))(v259 + 64))(v258, v259) & 1) == 0)
      {
        (*(void (**)(char *, uint64_t))(v334 + 8))(v335, v258);
        goto LABEL_70;
      }
      uint64_t v435 = (uint64_t)v431;
      uint64_t v436 = (void (*)(void))v255;
      unint64_t v428 = (ValueMetadata *)v255;
      uint64_t v437 = v257;
      int v438 = v254;
      type metadata accessor for PersistenceTrigger.AffectedItemJobs();
      sub_10096D230();
      swift_allocObject();
      uint64_t v336 = sub_10096C0D0();
      uint64_t v338 = v337;
      uint64_t v339 = (uint64_t)v424;
      (*(void (**)(char *, char *, uint64_t))(v334 + 16))(v424, v335, v258);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v334 + 56))(v339, 0, 1, v258);
      sub_1001D1454(0x80000, (uint64_t)&off_100A6C660, v339, v338);
      uint64_t v171 = sub_1003FC080(v336);
      (*(void (**)(char *, uint64_t))(v334 + 8))(v335, v258);
LABEL_103:
      (*(void (**)(char *, uint64_t))(v427 + 8))(v432, v429);
      return v171;
    case 0x25u:
      uint64_t v263 = v407;
      uint64_t v71 = v429;
      v69(v407, (ValueMetadata *)v432, v429);
      uint64_t v264 = *(ValueMetadata **)(v71 + 40);
      uint64_t v265 = *(void (**)(void))(v71 + 24);
      uint64_t v266 = swift_getAssociatedTypeWitness();
      uint64_t v267 = (uint64_t)v431;
      uint64_t v268 = v426;
      uint64_t v269 = swift_getAssociatedConformanceWitness();
      uint64_t v270 = swift_getAssociatedConformanceWitness();
      uint64_t v435 = v268;
      uint64_t v436 = (void (*)(void))v266;
      uint64_t v437 = (ValueMetadata *)v269;
      int v438 = (ValueMetadata *)v270;
      uint64_t v134 = type metadata accessor for ReconciliationID();
      if (swift_getEnumCaseMultiPayload() != 1)
      {
        LODWORD(v428) = v263[*(int *)(swift_getTupleTypeMetadata2() + 48)];
        uint64_t v340 = v425;
        (*(void (**)(void (*)(void), char *, uint64_t))(v425 + 32))(v423, v263, v268);
        uint64_t v435 = v267;
        uint64_t v436 = v265;
        uint64_t v437 = v430;
        int v438 = v264;
        type metadata accessor for PersistenceTrigger.AffectedItemJobs();
        sub_10096D230();
        swift_allocObject();
        uint64_t v341 = sub_10096C0D0();
        uint64_t v421 = v342;
        uint64_t v422 = v341;
        sub_10002B7CC(qword_100ACE270);
        uint64_t v343 = swift_allocObject();
        *(_OWORD *)(v343 + 16) = xmmword_100973BB0;
        *(unsigned char *)(v343 + 32) = (_BYTE)v428;
        uint64_t v345 = v423;
        uint64_t v344 = (uint64_t)v424;
        (*(void (**)(char *, void (*)(void), uint64_t))(v340 + 16))(v424, v423, v268);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v340 + 56))(v344, 0, 1, v268);
        sub_1001D1454(0x800000, v343, v344, v421);
        uint64_t v171 = sub_1003FC080(v422);
        (*(void (**)(void (*)(void), uint64_t))(v340 + 8))(v345, v268);
LABEL_76:
        (*(void (**)(char *, uint64_t))(v427 + 8))(v432, v71);
        return v171;
      }
      uint64_t v90 = *(void (**)(char *, uint64_t))(*(void *)(v134 - 8) + 8);
      uint64_t v91 = v263;
LABEL_68:
      uint64_t v262 = v134;
LABEL_69:
      v90(v91, v262);
      goto LABEL_70;
    case 0x2Bu:
      uint64_t v180 = v429;
      unint64_t v428 = *(ValueMetadata **)(v429 + 24);
      uint64_t v232 = *(ValueMetadata **)(v429 + 40);
      uint64_t v435 = (uint64_t)v431;
      uint64_t v436 = (void (*)(void))v428;
      uint64_t v437 = v430;
      int v438 = v232;
      type metadata accessor for PersistenceTrigger.AffectedItemJobs();
      sub_10096D230();
      swift_allocObject();
      uint64_t v183 = sub_10096C0D0();
      size_t v234 = v233;
      uint64_t v193 = v424;
      uint64_t v235 = v425;
      uint64_t v236 = v426;
      (*(void (**)(char *, void *, uint64_t))(v425 + 16))(v424, v421, v426);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v235 + 56))(v193, 0, 1, v236);
      uint64_t v187 = &off_100A6C548;
      uint64_t v188 = v234;
      uint64_t v189 = 128;
      goto LABEL_41;
    case 0x2Cu:
      uint64_t v180 = v429;
      uint64_t v238 = *(void (**)(void))(v429 + 24);
      uint64_t v239 = *(ValueMetadata **)(v429 + 40);
      uint64_t v435 = (uint64_t)v431;
      uint64_t v436 = v238;
      uint64_t v437 = v430;
      int v438 = v239;
      type metadata accessor for PersistenceTrigger.AffectedItemJobs();
      sub_10096D230();
      swift_allocObject();
      uint64_t v183 = sub_10096C0D0();
      unsigned int v241 = v240;
      uint64_t v186 = v424;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v425 + 56))(v424, 1, 1, v426);
      uint64_t v187 = &off_100A6C570;
      uint64_t v188 = v241;
      uint64_t v189 = 0x200000;
      goto LABEL_52;
    case 0x2Du:
      uint64_t v180 = v429;
      unint64_t v271 = *(void (**)(void))(v429 + 24);
      uint64_t v272 = *(ValueMetadata **)(v429 + 40);
      uint64_t v435 = (uint64_t)v431;
      uint64_t v436 = v271;
      uint64_t v437 = v430;
      int v438 = v272;
      type metadata accessor for PersistenceTrigger.AffectedItemJobs();
      sub_10096D230();
      swift_allocObject();
      uint64_t v183 = sub_10096C0D0();
      uint64_t v274 = v273;
      uint64_t v186 = v424;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v425 + 56))(v424, 1, 1, v426);
      uint64_t v187 = &off_100A6C598;
      uint64_t v188 = v274;
      uint64_t v189 = 2048;
      goto LABEL_52;
    case 0x2Eu:
      uint64_t v180 = v429;
      unint64_t v242 = *(void (**)(void))(v429 + 24);
      unint64_t v243 = *(ValueMetadata **)(v429 + 40);
      uint64_t v435 = (uint64_t)v431;
      uint64_t v436 = v242;
      uint64_t v437 = v430;
      int v438 = v243;
      type metadata accessor for PersistenceTrigger.AffectedItemJobs();
      sub_10096D230();
      swift_allocObject();
      uint64_t v183 = sub_10096C0D0();
      uint64_t v245 = v244;
      uint64_t v186 = v424;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v425 + 56))(v424, 1, 1, v426);
      uint64_t v187 = &off_100A6C6D8;
      uint64_t v188 = v245;
      uint64_t v189 = 0x1000000;
      goto LABEL_52;
    default:
      goto LABEL_70;
  }
}

uint64_t sub_1001D52C8@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v83 = a2;
  uint64_t v3 = (ValueMetadata *)a1[5];
  uint64_t v85 = a1[3];
  uint64_t v86 = v3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v79 = (char *)&v75 - v5;
  uint64_t v6 = (ValueMetadata *)a1[4];
  uint64_t v7 = a1[2];
  uint64_t v8 = swift_getAssociatedTypeWitness();
  uint64_t v80 = *(void *)(v8 - 8);
  uint64_t v81 = (void (*)(void, void, void))v8;
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v75 - v10;
  uint64_t v12 = *(a1 - 1);
  uint64_t v13 = __chkstk_darwin(v9);
  uint64_t v15 = (char *)&v75 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)&v75 - v17;
  __chkstk_darwin(v16);
  uint64_t v84 = v12;
  uint64_t v19 = *(void (**)(void))(v12 + 16);
  uint64_t v21 = (char *)&v75 - v20;
  v19();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 42)
  {
    uint64_t v87 = (void (*)(void, void, void))v7;
    uint64_t v88 = v85;
    uint64_t v89 = v6;
    uint64_t v90 = v86;
    type metadata accessor for PersistenceTrigger.AffectedGlobalJobs();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    uint64_t v33 = v83;
    void *v83 = 1;
    swift_storeEnumTagMultiPayload();
    (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 56))(v33, 0, 1, TupleTypeMetadata2);
    return (*(uint64_t (**)(char *, void *))(v84 + 8))(v21, a1);
  }
  if (EnumCaseMultiPayload == 27)
  {
    ((void (*)(char *, char *, void *))v19)(v15, v21, a1);
    uint64_t v35 = v85;
    uint64_t v34 = v86;
    uint64_t v87 = (void (*)(void, void, void))v7;
    uint64_t v88 = v85;
    uint64_t v89 = v6;
    uint64_t v90 = v86;
    type metadata accessor for TestingOperation();
    int v36 = swift_getEnumCaseMultiPayload();
    uint64_t v78 = v21;
    if (v36 == 1)
    {
      uint64_t v87 = (void (*)(void, void, void))v35;
      uint64_t v88 = v7;
      uint64_t v89 = v34;
      uint64_t v90 = v6;
      uint64_t v37 = type metadata accessor for DirectionalTestingOperation();
      uint64_t v38 = swift_getEnumCaseMultiPayload();
      if (v38 == 3)
      {
        __chkstk_darwin(v38);
        strcpy((char *)&v75 - 32, " item newName version ");
        uint64_t v39 = AssociatedTypeWitness;
        uint64_t v87 = (void (*)(void, void, void))AssociatedTypeWitness;
        uint64_t v81 = (void (*)(void, void, void))type metadata accessor for SnapshotItem();
        uint64_t v88 = sub_10096C890();
        uint64_t v89 = &type metadata for Filename;
        uint64_t v90 = &type metadata for UInt;
        uint64_t v40 = &v15[*(int *)(swift_getTupleTypeMetadata() + 48)];
        swift_bridgeObjectRelease();
        uint64_t v87 = (void (*)(void, void, void))v7;
        uint64_t v88 = v35;
        uint64_t v89 = v6;
        uint64_t v90 = v34;
        type metadata accessor for PersistenceTrigger.AffectedGlobalJobs();
        uint64_t v41 = swift_getTupleTypeMetadata2();
        uint64_t v42 = v83;
        uint64_t v43 = (char *)v83 + *(int *)(v41 + 48);
        uint64_t v44 = swift_getTupleTypeMetadata2();
        (*(void (**)(unsigned char *, char *, uint64_t))(v4 + 32))(&v43[*(int *)(v44 + 48)], v15, v39);
        *uint64_t v42 = 0x2000;
        *uint64_t v43 = 10;
        swift_storeEnumTagMultiPayload();
        (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v42, 0, 1, v41);
LABEL_15:
        uint64_t v58 = sub_10096C890();
        (*(void (**)(char *, uint64_t))(*(void *)(v58 - 8) + 8))(v40, v58);
        return (*(uint64_t (**)(char *, void *))(v84 + 8))(v78, a1);
      }
    }
    else
    {
      uint64_t v87 = (void (*)(void, void, void))v7;
      uint64_t v88 = v35;
      uint64_t v89 = v6;
      uint64_t v90 = v34;
      uint64_t v37 = type metadata accessor for DirectionalTestingOperation();
      uint64_t v52 = swift_getEnumCaseMultiPayload();
      if (v52 == 3)
      {
        __chkstk_darwin(v52);
        strcpy((char *)&v75 - 32, " item newName version ");
        uint64_t v53 = v81;
        uint64_t v87 = v81;
        type metadata accessor for SnapshotItem();
        uint64_t v88 = sub_10096C890();
        uint64_t v89 = &type metadata for Filename;
        uint64_t v90 = &type metadata for UInt;
        uint64_t v40 = &v15[*(int *)(swift_getTupleTypeMetadata() + 48)];
        swift_bridgeObjectRelease();
        uint64_t v87 = (void (*)(void, void, void))v7;
        uint64_t v88 = v35;
        uint64_t v89 = v6;
        uint64_t v90 = v34;
        type metadata accessor for PersistenceTrigger.AffectedGlobalJobs();
        uint64_t v54 = swift_getTupleTypeMetadata2();
        uint64_t v55 = v83;
        uint64_t v56 = (char *)v83 + *(int *)(v54 + 48);
        uint64_t v57 = swift_getTupleTypeMetadata2();
        (*(void (**)(unsigned char *, char *, void))(v80 + 32))(&v56[*(int *)(v57 + 48)], v15, v53);
        *uint64_t v55 = 0x2000;
        unsigned char *v56 = 10;
        swift_storeEnumTagMultiPayload();
        (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v54 - 8) + 56))(v55, 0, 1, v54);
        goto LABEL_15;
      }
    }
    (*(void (**)(char *, uint64_t))(*(void *)(v37 - 8) + 8))(v15, v37);
    uint64_t v21 = v78;
    goto LABEL_17;
  }
  if (EnumCaseMultiPayload != 13)
  {
LABEL_17:
    uint64_t v87 = (void (*)(void, void, void))v7;
    uint64_t v88 = v85;
    uint64_t v89 = v6;
    uint64_t v90 = v86;
    type metadata accessor for PersistenceTrigger.AffectedGlobalJobs();
    uint64_t v59 = swift_getTupleTypeMetadata2();
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v59 - 8) + 56))(v83, 1, 1, v59);
    return (*(uint64_t (**)(char *, void *))(v84 + 8))(v21, a1);
  }
  uint64_t v76 = v4;
  ((void (*)(char *, char *, void *))v19)(v18, v21, a1);
  uint64_t v78 = v21;
  uint64_t v23 = v81;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v77 = v6;
  uint64_t v25 = v85;
  uint64_t v26 = AssociatedTypeWitness;
  uint64_t v27 = swift_getAssociatedConformanceWitness();
  uint64_t v87 = v23;
  uint64_t v88 = v26;
  uint64_t v89 = (ValueMetadata *)AssociatedConformanceWitness;
  uint64_t v90 = (void *)v27;
  uint64_t v28 = type metadata accessor for ReconciliationID();
  uint64_t v29 = swift_getTupleTypeMetadata2();
  if (v18[*(int *)(v29 + 48)] <= 2u)
  {
    (*(void (**)(char *, uint64_t))(*(void *)(v28 - 8) + 8))(v18, v28);
    (*(void (**)(char *, void *))(v84 + 8))(v78, a1);
    uint64_t v87 = (void (*)(void, void, void))v7;
    uint64_t v88 = v25;
    uint64_t v89 = v77;
    uint64_t v90 = v86;
    type metadata accessor for PersistenceTrigger.AffectedGlobalJobs();
    uint64_t v30 = swift_getTupleTypeMetadata2();
    return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v83, 1, 1, v30);
  }
  char v45 = v18[*(int *)(v29 + 48)];
  uint64_t v46 = v77;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v47 = v76;
    uint64_t v48 = v18;
    uint64_t v49 = AssociatedTypeWitness;
    uint64_t v81 = *(void (**)(void, void, void))(v76 + 32);
    v81(v79, v48, AssociatedTypeWitness);
    uint64_t v51 = v85;
    uint64_t v50 = v86;
    uint64_t v87 = (void (*)(void, void, void))v7;
    uint64_t v88 = v85;
    uint64_t v89 = v46;
    uint64_t v90 = v86;
    type metadata accessor for Job();
    sub_1007B1CC0(v45);
    uint64_t v87 = (void (*)(void, void, void))v7;
    uint64_t v88 = v51;
    uint64_t v89 = v46;
    uint64_t v90 = v50;
    type metadata accessor for ItemJob();
    if (!swift_dynamicCastMetatype())
    {
      uint64_t v87 = (void (*)(void, void, void))v7;
      uint64_t v88 = v51;
      uint64_t v89 = v46;
      uint64_t v90 = v50;
      type metadata accessor for PersistenceTrigger.AffectedGlobalJobs();
      uint64_t v67 = swift_getTupleTypeMetadata2();
      uint64_t v68 = v83;
      uint64_t v69 = (char *)v83 + *(int *)(v67 + 48);
      void *v83 = 262400;
      uint64_t v70 = &v69[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      *uint64_t v69 = v45;
      v81(v70, v79, v49);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v67 - 8) + 56))(v68, 0, 1, v67);
      return (*(uint64_t (**)(char *, void *))(v84 + 8))(v78, a1);
    }
    (*(void (**)(char *, uint64_t))(v47 + 8))(v79, v49);
    uint64_t v87 = (void (*)(void, void, void))v7;
    uint64_t v88 = v51;
    uint64_t v89 = v46;
    uint64_t v90 = v50;
  }
  else
  {
    uint64_t v60 = v80;
    uint64_t v61 = *(char **)(v80 + 32);
    uint64_t v62 = v18;
    uint64_t v63 = v81;
    uint64_t AssociatedTypeWitness = v80 + 32;
    uint64_t v79 = v61;
    ((void (*)(char *, char *, void))v61)(v11, v62, v81);
    uint64_t v65 = v85;
    uint64_t v64 = v86;
    uint64_t v87 = (void (*)(void, void, void))v7;
    uint64_t v88 = v85;
    uint64_t v89 = v46;
    uint64_t v90 = v86;
    type metadata accessor for Job();
    sub_1007B1CC0(v45);
    uint64_t v87 = (void (*)(void, void, void))v7;
    uint64_t v88 = v65;
    uint64_t v89 = v46;
    uint64_t v90 = v64;
    type metadata accessor for ItemJob();
    if (!swift_dynamicCastMetatype())
    {
      uint64_t v87 = (void (*)(void, void, void))v7;
      uint64_t v88 = v65;
      uint64_t v89 = v46;
      uint64_t v90 = v64;
      type metadata accessor for PersistenceTrigger.AffectedGlobalJobs();
      uint64_t v71 = swift_getTupleTypeMetadata2();
      uint64_t v72 = v83;
      uint64_t v73 = (char *)v83 + *(int *)(v71 + 48);
      void *v83 = 262400;
      uint64_t v74 = &v73[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      *uint64_t v73 = v45;
      ((void (*)(char *, char *, void))v79)(v74, v11, v63);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v71 - 8) + 56))(v72, 0, 1, v71);
      return (*(uint64_t (**)(char *, void *))(v84 + 8))(v78, a1);
    }
    (*(void (**)(char *, void (*)(void, void, void)))(v60 + 8))(v11, v63);
    uint64_t v87 = (void (*)(void, void, void))v7;
    uint64_t v88 = v65;
    uint64_t v89 = v46;
    uint64_t v90 = v64;
  }
  type metadata accessor for PersistenceTrigger.AffectedGlobalJobs();
  uint64_t v66 = swift_getTupleTypeMetadata2();
  (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v66 - 8) + 56))(v83, 1, 1, v66);
  return (*(uint64_t (**)(char *, void *))(v84 + 8))(v78, a1);
}

uint64_t type metadata accessor for PersistenceTrigger.AffectedItemJobs()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for PersistenceTrigger.AffectedGlobalJobs()
{
  return swift_getGenericMetadata();
}

uint64_t sub_1001D5FD8()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    uint64_t v5 = &v4;
    uint64_t result = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      swift_getTupleTypeLayout2();
      uint64_t v6 = &v3;
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

void *sub_1001D60F4(void *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  unint64_t v7 = ((v6 + 1) & ~(unint64_t)v6) + *(void *)(v5 + 64);
  uint64_t v8 = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(_DWORD *)(v9 + 80);
  uint64_t v11 = (v10 + 1) & ~v10;
  if (v11 + *(void *)(v9 + 64) <= v7) {
    unint64_t v12 = v7;
  }
  else {
    unint64_t v12 = v11 + *(void *)(v9 + 64);
  }
  size_t v13 = v12 + 1;
  if ((v10 | (unint64_t)v6) > 7 || ((*(_DWORD *)(v9 + 80) | v6) & 0x100000) != 0 || v13 > 0x18)
  {
    uint64_t v16 = *(void *)a2;
    *a1 = *(void *)a2;
    a1 = (void *)(v16 + (((v10 | v6) + 16) & ~(v10 | v6)));
    swift_retain();
  }
  else
  {
    unsigned int v17 = a2[v12];
    unsigned int v18 = v17 - 2;
    if (v17 >= 2)
    {
      if (v12 <= 3) {
        uint64_t v19 = v12;
      }
      else {
        uint64_t v19 = 4;
      }
      switch(v19)
      {
        case 1:
          int v20 = *a2;
          if (v12 >= 4) {
            goto LABEL_29;
          }
          goto LABEL_23;
        case 2:
          int v20 = *(unsigned __int16 *)a2;
          if (v12 >= 4) {
            goto LABEL_29;
          }
          goto LABEL_23;
        case 3:
          int v20 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v12 < 4) {
            goto LABEL_23;
          }
          goto LABEL_29;
        case 4:
          int v20 = *(_DWORD *)a2;
          if (v12 < 4)
          {
LABEL_23:
            unsigned int v17 = (v20 | (v18 << (8 * v12))) + 2;
            break;
          }
LABEL_29:
          unsigned int v17 = v20 + 2;
          if (v17 == 1) {
            goto LABEL_30;
          }
          goto LABEL_25;
        default:
          break;
      }
    }
    if (v17 == 1)
    {
LABEL_30:
      *(unsigned char *)a1 = *a2;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(((unint64_t)a1 + v10 + 1) & ~v10, (unint64_t)&a2[v10 + 1] & ~v10, v8);
      *((unsigned char *)a1 + v12) = 1;
    }
    else
    {
LABEL_25:
      if (v17)
      {
        memcpy(a1, a2, v13);
      }
      else
      {
        *(unsigned char *)a1 = *a2;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16))(((unint64_t)a1 + v6 + 1) & ~(unint64_t)v6, (unint64_t)&a2[v6 + 1] & ~(unint64_t)v6, AssociatedTypeWitness);
        *((unsigned char *)a1 + v12) = 0;
      }
    }
  }
  return a1;
}

uint64_t sub_1001D63C0(unsigned __int8 *a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v16 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v3 = *(unsigned __int8 *)(v16 + 80);
  unint64_t v4 = ((v3 + 1) & ~v3) + *(void *)(v16 + 64);
  uint64_t result = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(result - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  unint64_t v8 = ((v7 + 1) & ~v7) + *(void *)(v6 + 64);
  if (v8 <= v4) {
    unint64_t v8 = v4;
  }
  unsigned int v9 = a1[v8];
  unsigned int v10 = v9 - 2;
  if (v9 >= 2)
  {
    if (v8 <= 3) {
      uint64_t v11 = v8;
    }
    else {
      uint64_t v11 = 4;
    }
    switch(v11)
    {
      case 1:
        int v12 = *a1;
        goto LABEL_12;
      case 2:
        int v12 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v12 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v12 = *(_DWORD *)a1;
LABEL_12:
        int v13 = (v12 | (v10 << (8 * v8))) + 2;
        unsigned int v9 = v12 + 2;
        if (v8 < 4) {
          unsigned int v9 = v13;
        }
        break;
      default:
        break;
    }
  }
  if (v9 == 1)
  {
    uint64_t v15 = *(uint64_t (**)(unint64_t, uint64_t))(v6 + 8);
    return v15((unint64_t)&a1[v7 + 1] & ~v7, result);
  }
  else if (!v9)
  {
    uint64_t v14 = *(uint64_t (**)(unint64_t, uint64_t))(v16 + 8);
    return v14((unint64_t)&a1[v3 + 1] & ~v3, AssociatedTypeWitness);
  }
  return result;
}

unsigned char *sub_1001D6630(unsigned char *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = ((v6 + 1) & ~v6) + *(void *)(v5 + 64);
  uint64_t v8 = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = (v10 + 1) & ~v10;
  if (v11 + *(void *)(v9 + 64) <= v7) {
    unint64_t v12 = v7;
  }
  else {
    unint64_t v12 = v11 + *(void *)(v9 + 64);
  }
  unsigned int v13 = a2[v12];
  unsigned int v14 = v13 - 2;
  if (v13 >= 2)
  {
    if (v12 <= 3) {
      uint64_t v15 = v12;
    }
    else {
      uint64_t v15 = 4;
    }
    switch(v15)
    {
      case 1:
        int v16 = *a2;
        goto LABEL_13;
      case 2:
        int v16 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v16 = *(_DWORD *)a2;
LABEL_13:
        int v17 = (v16 | (v14 << (8 * v12))) + 2;
        unsigned int v13 = v16 + 2;
        if (v12 < 4) {
          unsigned int v13 = v17;
        }
        break;
      default:
        break;
    }
  }
  if (v13 == 1)
  {
    *a1 = *a2;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))((unint64_t)&a1[v10 + 1] & ~v10, (unint64_t)&a2[v10 + 1] & ~v10, v8);
    a1[v12] = 1;
  }
  else if (v13)
  {
    memcpy(a1, a2, v12 + 1);
  }
  else
  {
    *a1 = *a2;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16))((unint64_t)&a1[v6 + 1] & ~v6, (unint64_t)&a2[v6 + 1] & ~v6, AssociatedTypeWitness);
    a1[v12] = 0;
  }
  return a1;
}

unsigned __int8 *sub_1001D689C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1 != a2)
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
    uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
    unint64_t v6 = ((v5 + 1) & ~v5) + *(void *)(v4 + 64);
    uint64_t v7 = swift_getAssociatedTypeWitness();
    uint64_t v8 = *(void *)(v7 - 8);
    uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
    uint64_t v10 = *(void *)(v8 + 64);
    if (((v9 + 1) & (unint64_t)~v9) + v10 <= v6) {
      unint64_t v11 = v6;
    }
    else {
      unint64_t v11 = ((v9 + 1) & ~v9) + v10;
    }
    unsigned int v12 = a1[v11];
    unsigned int v13 = v12 - 2;
    if (v12 >= 2)
    {
      if (v11 <= 3) {
        uint64_t v14 = v11;
      }
      else {
        uint64_t v14 = 4;
      }
      switch(v14)
      {
        case 1:
          int v15 = *a1;
          if (v11 < 4) {
            goto LABEL_15;
          }
          goto LABEL_17;
        case 2:
          int v15 = *(unsigned __int16 *)a1;
          if (v11 >= 4) {
            goto LABEL_17;
          }
          goto LABEL_15;
        case 3:
          int v15 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          if (v11 < 4) {
            goto LABEL_15;
          }
          goto LABEL_17;
        case 4:
          int v15 = *(_DWORD *)a1;
          if (v11 < 4) {
LABEL_15:
          }
            unsigned int v12 = (v15 | (v13 << (8 * v11))) + 2;
          else {
LABEL_17:
          }
            unsigned int v12 = v15 + 2;
          break;
        default:
          break;
      }
    }
    uint64_t v16 = ~v5;
    uint64_t v17 = ~v9;
    if (v12 == 1)
    {
      (*(void (**)(unint64_t, uint64_t))(v8 + 8))((unint64_t)&a1[v9 + 1] & v17, v7);
    }
    else if (!v12)
    {
      (*(void (**)(unint64_t, uint64_t))(v4 + 8))((unint64_t)&a1[v5 + 1] & v16, AssociatedTypeWitness);
    }
    unsigned int v18 = a2[v11];
    unsigned int v19 = v18 - 2;
    if (v18 >= 2)
    {
      if (v11 <= 3) {
        uint64_t v20 = v11;
      }
      else {
        uint64_t v20 = 4;
      }
      switch(v20)
      {
        case 1:
          int v21 = *a2;
          if (v11 >= 4) {
            goto LABEL_38;
          }
          goto LABEL_32;
        case 2:
          int v21 = *(unsigned __int16 *)a2;
          if (v11 >= 4) {
            goto LABEL_38;
          }
          goto LABEL_32;
        case 3:
          int v21 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v11 < 4) {
            goto LABEL_32;
          }
          goto LABEL_38;
        case 4:
          int v21 = *(_DWORD *)a2;
          if (v11 < 4)
          {
LABEL_32:
            unsigned int v18 = (v21 | (v19 << (8 * v11))) + 2;
            break;
          }
LABEL_38:
          unsigned int v18 = v21 + 2;
          if (v18 == 1) {
            goto LABEL_39;
          }
          goto LABEL_34;
        default:
          break;
      }
    }
    if (v18 == 1)
    {
LABEL_39:
      *a1 = *a2;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))((unint64_t)&a1[v9 + 1] & v17, (unint64_t)&a2[v9 + 1] & v17, v7);
      a1[v11] = 1;
    }
    else
    {
LABEL_34:
      if (v18)
      {
        memcpy(a1, a2, v11 + 1);
      }
      else
      {
        *a1 = *a2;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v4 + 16))((unint64_t)&a1[v5 + 1] & v16, (unint64_t)&a2[v5 + 1] & v16, AssociatedTypeWitness);
        a1[v11] = 0;
      }
    }
  }
  return a1;
}

unsigned char *sub_1001D6C28(unsigned char *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = ((v6 + 1) & ~v6) + *(void *)(v5 + 64);
  uint64_t v8 = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = (v10 + 1) & ~v10;
  if (v11 + *(void *)(v9 + 64) <= v7) {
    unint64_t v12 = v7;
  }
  else {
    unint64_t v12 = v11 + *(void *)(v9 + 64);
  }
  unsigned int v13 = a2[v12];
  unsigned int v14 = v13 - 2;
  if (v13 >= 2)
  {
    if (v12 <= 3) {
      uint64_t v15 = v12;
    }
    else {
      uint64_t v15 = 4;
    }
    switch(v15)
    {
      case 1:
        int v16 = *a2;
        goto LABEL_13;
      case 2:
        int v16 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v16 = *(_DWORD *)a2;
LABEL_13:
        int v17 = (v16 | (v14 << (8 * v12))) + 2;
        unsigned int v13 = v16 + 2;
        if (v12 < 4) {
          unsigned int v13 = v17;
        }
        break;
      default:
        break;
    }
  }
  if (v13 == 1)
  {
    *a1 = *a2;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 32))((unint64_t)&a1[v10 + 1] & ~v10, (unint64_t)&a2[v10 + 1] & ~v10, v8);
    a1[v12] = 1;
  }
  else if (v13)
  {
    memcpy(a1, a2, v12 + 1);
  }
  else
  {
    *a1 = *a2;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 32))((unint64_t)&a1[v6 + 1] & ~v6, (unint64_t)&a2[v6 + 1] & ~v6, AssociatedTypeWitness);
    a1[v12] = 0;
  }
  return a1;
}

unsigned __int8 *sub_1001D6E94(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1 != a2)
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
    uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
    unint64_t v6 = ((v5 + 1) & ~v5) + *(void *)(v4 + 64);
    uint64_t v7 = swift_getAssociatedTypeWitness();
    uint64_t v8 = *(void *)(v7 - 8);
    uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
    uint64_t v10 = *(void *)(v8 + 64);
    if (((v9 + 1) & (unint64_t)~v9) + v10 <= v6) {
      unint64_t v11 = v6;
    }
    else {
      unint64_t v11 = ((v9 + 1) & ~v9) + v10;
    }
    unsigned int v12 = a1[v11];
    unsigned int v13 = v12 - 2;
    if (v12 >= 2)
    {
      if (v11 <= 3) {
        uint64_t v14 = v11;
      }
      else {
        uint64_t v14 = 4;
      }
      switch(v14)
      {
        case 1:
          int v15 = *a1;
          if (v11 < 4) {
            goto LABEL_15;
          }
          goto LABEL_17;
        case 2:
          int v15 = *(unsigned __int16 *)a1;
          if (v11 >= 4) {
            goto LABEL_17;
          }
          goto LABEL_15;
        case 3:
          int v15 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          if (v11 < 4) {
            goto LABEL_15;
          }
          goto LABEL_17;
        case 4:
          int v15 = *(_DWORD *)a1;
          if (v11 < 4) {
LABEL_15:
          }
            unsigned int v12 = (v15 | (v13 << (8 * v11))) + 2;
          else {
LABEL_17:
          }
            unsigned int v12 = v15 + 2;
          break;
        default:
          break;
      }
    }
    uint64_t v16 = ~v5;
    uint64_t v17 = ~v9;
    if (v12 == 1)
    {
      (*(void (**)(unint64_t, uint64_t))(v8 + 8))((unint64_t)&a1[v9 + 1] & v17, v7);
    }
    else if (!v12)
    {
      (*(void (**)(unint64_t, uint64_t))(v4 + 8))((unint64_t)&a1[v5 + 1] & v16, AssociatedTypeWitness);
    }
    unsigned int v18 = a2[v11];
    unsigned int v19 = v18 - 2;
    if (v18 >= 2)
    {
      if (v11 <= 3) {
        uint64_t v20 = v11;
      }
      else {
        uint64_t v20 = 4;
      }
      switch(v20)
      {
        case 1:
          int v21 = *a2;
          if (v11 >= 4) {
            goto LABEL_38;
          }
          goto LABEL_32;
        case 2:
          int v21 = *(unsigned __int16 *)a2;
          if (v11 >= 4) {
            goto LABEL_38;
          }
          goto LABEL_32;
        case 3:
          int v21 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v11 < 4) {
            goto LABEL_32;
          }
          goto LABEL_38;
        case 4:
          int v21 = *(_DWORD *)a2;
          if (v11 < 4)
          {
LABEL_32:
            unsigned int v18 = (v21 | (v19 << (8 * v11))) + 2;
            break;
          }
LABEL_38:
          unsigned int v18 = v21 + 2;
          if (v18 == 1) {
            goto LABEL_39;
          }
          goto LABEL_34;
        default:
          break;
      }
    }
    if (v18 == 1)
    {
LABEL_39:
      *a1 = *a2;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 32))((unint64_t)&a1[v9 + 1] & v17, (unint64_t)&a2[v9 + 1] & v17, v7);
      a1[v11] = 1;
    }
    else
    {
LABEL_34:
      if (v18)
      {
        memcpy(a1, a2, v11 + 1);
      }
      else
      {
        *a1 = *a2;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v4 + 32))((unint64_t)&a1[v5 + 1] & v16, (unint64_t)&a2[v5 + 1] & v16, AssociatedTypeWitness);
        a1[v11] = 0;
      }
    }
  }
  return a1;
}

uint64_t sub_1001D7220(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v5 = ((*(unsigned __int8 *)(v4 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)) + *(void *)(v4 + 64);
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v7 = ((*(unsigned __int8 *)(v6 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)) + *(void *)(v6 + 64);
  if (v7 <= v5) {
    unint64_t v8 = v5;
  }
  else {
    unint64_t v8 = v7;
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_23;
  }
  unint64_t v9 = v8 + 1;
  char v10 = 8 * (v8 + 1);
  if ((v8 + 1) <= 3)
  {
    unsigned int v13 = ((a2 + ~(-1 << v10) - 253) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      unsigned int v15 = *((unsigned __int8 *)a1 + v8);
      if (v15 >= 3) {
        return (v15 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v9 | v14) + 254;
}

void sub_1001D744C(unsigned char *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v7 = ((*(unsigned __int8 *)(v6 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)) + *(void *)(v6 + 64);
  uint64_t v8 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v9 = ((*(unsigned __int8 *)(v8 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)) + *(void *)(v8 + 64);
  if (v9 <= v7) {
    unint64_t v9 = v7;
  }
  size_t v10 = v9 + 1;
  if (a3 < 0xFE)
  {
    int v11 = 0;
  }
  else if (v10 <= 3)
  {
    unsigned int v14 = ((a3 + ~(-1 << (8 * v10)) - 253) >> (8 * v10)) + 1;
    if (HIWORD(v14))
    {
      int v11 = 4;
    }
    else if (v14 >= 0x100)
    {
      int v11 = 2;
    }
    else
    {
      int v11 = v14 > 1;
    }
  }
  else
  {
    int v11 = 1;
  }
  if (a2 > 0xFD)
  {
    unsigned int v12 = a2 - 254;
    if (v10 < 4)
    {
      int v13 = (v12 >> (8 * v10)) + 1;
      if (v9 != -1)
      {
        int v15 = v12 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v9 + 1);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v10] = v13;
        break;
      case 2:
        *(_WORD *)&a1[v10] = v13;
        break;
      case 3:
LABEL_34:
        __break(1u);
        JUMPOUT(0x1001D76ECLL);
      case 4:
        *(_DWORD *)&a1[v10] = v13;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v11)
    {
      case 1:
        a1[v10] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      case 2:
        *(_WORD *)&a1[v10] = 0;
        goto LABEL_22;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v10] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      default:
LABEL_22:
        if (a2) {
LABEL_23:
        }
          a1[v9] = -(char)a2;
        break;
    }
  }
}

uint64_t sub_1001D7714(unsigned __int8 *a1)
{
  uint64_t v2 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v3 = ((*(unsigned __int8 *)(v2 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)) + *(void *)(v2 + 64);
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v5 = ((*(unsigned __int8 *)(v4 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)) + *(void *)(v4 + 64);
  if (v5 <= v3) {
    unint64_t v5 = v3;
  }
  uint64_t result = a1[v5];
  if (result >= 2)
  {
    if (v5 <= 3) {
      uint64_t v7 = v5;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a1;
        goto LABEL_12;
      case 2:
        int v8 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v8 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v8 = *(_DWORD *)a1;
LABEL_12:
        unsigned int v9 = (v8 | ((result - 2) << (8 * v5))) + 2;
        unsigned int v10 = v8 + 2;
        if (v5 >= 4) {
          uint64_t result = v10;
        }
        else {
          uint64_t result = v9;
        }
        break;
      default:
        return result;
    }
  }
  return result;
}

void sub_1001D78BC(unsigned char *a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v5 = ((*(unsigned __int8 *)(v4 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)) + *(void *)(v4 + 64);
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v7 = ((*(unsigned __int8 *)(v6 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)) + *(void *)(v6 + 64);
  if (v7 <= v5) {
    size_t v8 = v5;
  }
  else {
    size_t v8 = v7;
  }
  if (a2 > 1)
  {
    unsigned int v9 = a2 - 2;
    if (v8 < 4)
    {
      unsigned int v10 = v9 >> (8 * v8);
      int v11 = v9 & ~(-1 << (8 * v8));
      a1[v8] = v10 + 2;
      bzero(a1, v8);
      if (v8 == 3)
      {
        *(_WORD *)a1 = v11;
        a1[2] = BYTE2(v11);
      }
      else if (v8 == 2)
      {
        *(_WORD *)a1 = v11;
      }
      else
      {
        *a1 = v11;
      }
    }
    else
    {
      a1[v8] = 2;
      bzero(a1, v8);
      *(_DWORD *)a1 = v9;
    }
  }
  else
  {
    a1[v8] = a2;
  }
}

uint64_t sub_1001D7A68()
{
  swift_getAssociatedTypeWitness();
  uint64_t result = sub_10096C890();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1001D7B34(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = v6;
  if (*(_DWORD *)(v5 + 84)) {
    size_t v8 = *(void *)(v5 + 64);
  }
  else {
    size_t v8 = *(void *)(v5 + 64) + 1;
  }
  int v9 = v6 & 0x100000;
  if (v7 > 7 || v9 != 0 || ((v7 + 16) & ~v7) + v8 > 0x18)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v13 = AssociatedTypeWitness;
    *a1 = *a2;
    unsigned int v14 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    int v15 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    *unsigned int v14 = *v15;
    uint64_t v16 = (void *)(((unint64_t)v14 + v7 + 8) & ~v7);
    uint64_t v17 = (const void *)(((unint64_t)v15 + v7 + 8) & ~v7);
    unsigned int v18 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
    swift_bridgeObjectRetain();
    if (v18(v17, 1, v13))
    {
      memcpy(v16, v17, v8);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v16, v17, v13);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(v16, 0, 1, v13);
    }
  }
  return a1;
}

uint64_t sub_1001D7CE0(uint64_t a1)
{
  unint64_t v1 = (a1 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v4 = (v1 + *(unsigned __int8 *)(v3 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = v3;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, AssociatedTypeWitness);
  if (!result)
  {
    int v6 = *(uint64_t (**)(unint64_t, uint64_t))(v7 + 8);
    return v6(v4, AssociatedTypeWitness);
  }
  return result;
}

void *sub_1001D7DD4(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v4 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v3 = *v4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  size_t v8 = (void *)(((unint64_t)v3 + v7 + 8) & ~v7);
  int v9 = (const void *)(((unint64_t)v4 + v7 + 8) & ~v7);
  unsigned int v10 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48);
  swift_bridgeObjectRetain();
  if (v10(v9, 1, AssociatedTypeWitness))
  {
    if (*(_DWORD *)(v6 + 84)) {
      size_t v11 = *(void *)(v6 + 64);
    }
    else {
      size_t v11 = *(void *)(v6 + 64) + 1;
    }
    memcpy(v8, v9, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v8, v9, AssociatedTypeWitness);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v8, 0, 1, AssociatedTypeWitness);
  }
  return a1;
}

void *sub_1001D7F20(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v4 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v3 = *v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  size_t v8 = (void *)(((unint64_t)v3 + v7 + 8) & ~v7);
  int v9 = (void *)(((unint64_t)v4 + v7 + 8) & ~v7);
  unsigned int v10 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  LODWORD(v4) = v10(v8, 1, AssociatedTypeWitness);
  int v11 = v10(v9, 1, AssociatedTypeWitness);
  if (v4)
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(v8, v9, AssociatedTypeWitness);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v8, 0, 1, AssociatedTypeWitness);
      return a1;
    }
    int v12 = *(_DWORD *)(v6 + 84);
    size_t v13 = *(void *)(v6 + 64);
  }
  else
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 24))(v8, v9, AssociatedTypeWitness);
      return a1;
    }
    int v15 = *(void (**)(void *, uint64_t))(v6 + 8);
    uint64_t v14 = v6 + 8;
    v15(v8, AssociatedTypeWitness);
    int v12 = *(_DWORD *)(v14 + 76);
    size_t v13 = *(void *)(v14 + 56);
  }
  if (v12) {
    size_t v16 = v13;
  }
  else {
    size_t v16 = v13 + 1;
  }
  memcpy(v8, v9, v16);
  return a1;
}

void *sub_1001D80E0(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v4 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v3 = *v4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  size_t v8 = (void *)(((unint64_t)v3 + v7 + 8) & ~v7);
  int v9 = (const void *)(((unint64_t)v4 + v7 + 8) & ~v7);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(v9, 1, AssociatedTypeWitness))
  {
    if (*(_DWORD *)(v6 + 84)) {
      size_t v10 = *(void *)(v6 + 64);
    }
    else {
      size_t v10 = *(void *)(v6 + 64) + 1;
    }
    memcpy(v8, v9, v10);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(v8, v9, AssociatedTypeWitness);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v8, 0, 1, AssociatedTypeWitness);
  }
  return a1;
}

void *sub_1001D821C(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v4 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v3 = *v4;
  swift_bridgeObjectRelease();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  size_t v8 = (void *)(((unint64_t)v3 + v7 + 8) & ~v7);
  int v9 = (void *)(((unint64_t)v4 + v7 + 8) & ~v7);
  size_t v10 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v11 = v10(v8, 1, AssociatedTypeWitness);
  int v12 = v10(v9, 1, AssociatedTypeWitness);
  if (v11)
  {
    if (!v12)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(v8, v9, AssociatedTypeWitness);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v8, 0, 1, AssociatedTypeWitness);
      return a1;
    }
    int v13 = *(_DWORD *)(v6 + 84);
    size_t v14 = *(void *)(v6 + 64);
  }
  else
  {
    if (!v12)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 40))(v8, v9, AssociatedTypeWitness);
      return a1;
    }
    size_t v16 = *(void (**)(void *, uint64_t))(v6 + 8);
    uint64_t v15 = v6 + 8;
    v16(v8, AssociatedTypeWitness);
    int v13 = *(_DWORD *)(v15 + 76);
    size_t v14 = *(void *)(v15 + 56);
  }
  if (v13) {
    size_t v17 = v14;
  }
  else {
    size_t v17 = v14 + 1;
  }
  memcpy(v8, v9, v17);
  return a1;
}

uint64_t sub_1001D83D4(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v5 = v4;
  int v6 = *(_DWORD *)(v4 + 84);
  if (v6) {
    unsigned int v7 = v6 - 1;
  }
  else {
    unsigned int v7 = 0;
  }
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = v7;
  }
  uint64_t v9 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v10 = *(void *)(v4 + 64);
  if (!v6) {
    ++v10;
  }
  if (!a2) {
    return 0;
  }
  if (a2 <= v8) {
    goto LABEL_28;
  }
  uint64_t v11 = v10 + ((v9 + 16) & ~v9);
  char v12 = 8 * v11;
  if (v11 <= 3)
  {
    unsigned int v15 = ((a2 - v8 + ~(-1 << v12)) >> v12) + 1;
    if (HIWORD(v15))
    {
      int v13 = *(_DWORD *)((char *)a1 + v11);
      if (!v13) {
        goto LABEL_28;
      }
      goto LABEL_20;
    }
    if (v15 > 0xFF)
    {
      int v13 = *(unsigned __int16 *)((char *)a1 + v11);
      if (!*(unsigned __int16 *)((char *)a1 + v11)) {
        goto LABEL_28;
      }
      goto LABEL_20;
    }
    if (v15 < 2)
    {
LABEL_28:
      size_t v17 = (unint64_t *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
      if ((v7 & 0x80000000) != 0)
      {
        unsigned int v19 = (*(uint64_t (**)(unint64_t))(v5 + 48))(((unint64_t)v17 + v9 + 8) & ~v9);
        if (v19 >= 2) {
          return v19 - 1;
        }
        else {
          return 0;
        }
      }
      else
      {
        unint64_t v18 = *v17;
        if (v18 >= 0xFFFFFFFF) {
          LODWORD(v18) = -1;
        }
        return (v18 + 1);
      }
    }
  }
  int v13 = *((unsigned __int8 *)a1 + v11);
  if (!*((unsigned char *)a1 + v11)) {
    goto LABEL_28;
  }
LABEL_20:
  int v16 = (v13 - 1) << v12;
  if (v11 > 3) {
    int v16 = 0;
  }
  if (v11)
  {
    if (v11 > 3) {
      LODWORD(v11) = 4;
    }
    switch((int)v11)
    {
      case 2:
        LODWORD(v11) = *a1;
        break;
      case 3:
        LODWORD(v11) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v11) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v11) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v8 + (v11 | v16) + 1;
}

void sub_1001D85D8(unsigned char *a1, unsigned int a2, unsigned int a3)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  uint64_t v10 = *(unsigned __int8 *)(v7 + 80);
  if (!v8) {
    unsigned int v9 = 0;
  }
  if (v9 <= 0x7FFFFFFF) {
    unsigned int v11 = 0x7FFFFFFF;
  }
  else {
    unsigned int v11 = v9;
  }
  if (v8) {
    size_t v12 = *(void *)(v7 + 64);
  }
  else {
    size_t v12 = *(void *)(v7 + 64) + 1;
  }
  size_t v13 = ((v10 + 16) & ~v10) + v12;
  if (a3 <= v11) {
    goto LABEL_17;
  }
  if (v13 <= 3)
  {
    unsigned int v14 = ((a3 - v11 + ~(-1 << (8 * v13))) >> (8 * v13)) + 1;
    if (HIWORD(v14))
    {
      int v6 = 4;
      if (v11 >= a2) {
        goto LABEL_25;
      }
      goto LABEL_18;
    }
    if (v14 >= 0x100) {
      int v6 = 2;
    }
    else {
      int v6 = v14 > 1;
    }
LABEL_17:
    if (v11 >= a2) {
      goto LABEL_25;
    }
    goto LABEL_18;
  }
  int v6 = 1;
  if (v11 >= a2)
  {
LABEL_25:
    switch(v6)
    {
      case 1:
        a1[v13] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_30;
      case 2:
        *(_WORD *)&a1[v13] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_30;
      case 3:
        goto LABEL_60;
      case 4:
        *(_DWORD *)&a1[v13] = 0;
        goto LABEL_29;
      default:
LABEL_29:
        if (a2)
        {
LABEL_30:
          unint64_t v18 = (void *)((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8);
          if ((v9 & 0x80000000) != 0)
          {
            uint64_t v20 = (unsigned char *)(((unint64_t)v18 + v10 + 8) & ~v10);
            if (v9 >= a2)
            {
              uint64_t v24 = *(void (**)(unint64_t, void))(v7 + 56);
              v24(((unint64_t)v18 + v10 + 8) & ~v10, a2 + 1);
            }
            else
            {
              if (v12 <= 3) {
                int v21 = ~(-1 << (8 * v12));
              }
              else {
                int v21 = -1;
              }
              if (v12)
              {
                int v22 = v21 & (~v9 + a2);
                if (v12 <= 3) {
                  int v23 = v12;
                }
                else {
                  int v23 = 4;
                }
                bzero(v20, v12);
                switch(v23)
                {
                  case 2:
                    *(_WORD *)uint64_t v20 = v22;
                    break;
                  case 3:
                    *(_WORD *)uint64_t v20 = v22;
                    v20[2] = BYTE2(v22);
                    break;
                  case 4:
                    *(_DWORD *)uint64_t v20 = v22;
                    break;
                  default:
                    *uint64_t v20 = v22;
                    break;
                }
              }
            }
          }
          else
          {
            if ((a2 & 0x80000000) != 0) {
              uint64_t v19 = a2 ^ 0x80000000;
            }
            else {
              uint64_t v19 = a2 - 1;
            }
            *unint64_t v18 = v19;
          }
        }
        break;
    }
    return;
  }
LABEL_18:
  unsigned int v15 = ~v11 + a2;
  if (v13 < 4)
  {
    int v16 = (v15 >> (8 * v13)) + 1;
    if (v13)
    {
      int v17 = v15 & ~(-1 << (8 * v13));
      bzero(a1, v13);
      if (v13 == 3)
      {
        *(_WORD *)a1 = v17;
        a1[2] = BYTE2(v17);
      }
      else if (v13 == 2)
      {
        *(_WORD *)a1 = v17;
      }
      else
      {
        *a1 = v17;
      }
    }
  }
  else
  {
    bzero(a1, ((v10 + 16) & ~v10) + v12);
    *(_DWORD *)a1 = v15;
    int v16 = 1;
  }
  switch(v6)
  {
    case 1:
      a1[v13] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v13] = v16;
      break;
    case 3:
LABEL_60:
      __break(1u);
      JUMPOUT(0x1001D890CLL);
    case 4:
      *(_DWORD *)&a1[v13] = v16;
      break;
    default:
      return;
  }
}

uint64_t sub_1001D8944()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v8 = swift_getAssociatedConformanceWitness();
  uint64_t result = type metadata accessor for ReconciliationID();
  if (v1 <= 0x3F)
  {
    uint64_t v9 = *(void *)(result - 8) + 64;
    uint64_t v2 = v9;
    swift_getTupleTypeLayout2();
    uint64_t v10 = &v4;
    swift_getTupleTypeLayout2();
    unsigned int v11 = &v3;
    uint64_t v12 = v2;
    uint64_t v13 = v2;
    uint64_t v14 = v2;
    uint64_t v15 = v2;
    uint64_t v16 = v2;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

void *sub_1001D8ACC(void *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  if (*(void *)(v8 + 64) <= v6) {
    unint64_t v9 = v6;
  }
  else {
    unint64_t v9 = *(void *)(*(void *)(v7 - 8) + 64);
  }
  unint64_t v10 = v9 + 1;
  if ((v9 & 0xFFFFFFFFFFFFFFF8) + 24 <= v9 + 1) {
    unint64_t v11 = v9 + 1;
  }
  else {
    unint64_t v11 = (v9 & 0xFFFFFFFFFFFFFFF8) + 24;
  }
  size_t v12 = v11 + 1;
  int v13 = *(_DWORD *)(v8 + 80) | *(_DWORD *)(v5 + 80);
  if ((v13 & 0x1000F8) != 0 || v12 > 0x18)
  {
    uint64_t v15 = *(void *)a2;
    *a1 = *(void *)a2;
    a1 = (void *)(v15 + (((v13 & 0xF8 | 7u) + 16) & ~(unint64_t)(v13 & 0xF8 | 7u)));
    swift_retain();
  }
  else
  {
    unsigned int v17 = a2[v11];
    unsigned int v18 = v17 - 8;
    if (v17 >= 8)
    {
      if (v11 <= 3) {
        uint64_t v19 = v11;
      }
      else {
        uint64_t v19 = 4;
      }
      switch(v19)
      {
        case 1:
          int v20 = *a2;
          goto LABEL_23;
        case 2:
          int v20 = *(unsigned __int16 *)a2;
          goto LABEL_23;
        case 3:
          int v20 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_23;
        case 4:
          int v20 = *(_DWORD *)a2;
LABEL_23:
          int v21 = (v20 | (v18 << (8 * v11))) + 8;
          unsigned int v17 = v20 + 8;
          if (v11 < 4) {
            unsigned int v17 = v21;
          }
          break;
        default:
          break;
      }
    }
    switch(v17)
    {
      case 0u:
        unsigned int v22 = a2[v9];
        unsigned int v23 = v22 - 2;
        if (v22 >= 2)
        {
          if (v9 <= 3) {
            uint64_t v24 = v9;
          }
          else {
            uint64_t v24 = 4;
          }
          switch(v24)
          {
            case 1:
              int v25 = *a2;
              goto LABEL_78;
            case 2:
              int v25 = *(unsigned __int16 *)a2;
              goto LABEL_78;
            case 3:
              int v25 = *(unsigned __int16 *)a2 | (a2[2] << 16);
              goto LABEL_78;
            case 4:
              int v25 = *(_DWORD *)a2;
LABEL_78:
              int v54 = (v25 | (v23 << (8 * v9))) + 2;
              unsigned int v22 = v25 + 2;
              if (v9 < 4) {
                unsigned int v22 = v54;
              }
              break;
            default:
              break;
          }
        }
        BOOL v55 = v22 == 1;
        if (v22 == 1)
        {
          uint64_t v56 = v7;
        }
        else
        {
          uint64_t v8 = v5;
          uint64_t v56 = AssociatedTypeWitness;
        }
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v8 + 16))(a1, a2, v56);
        *((unsigned char *)a1 + v9) = v55;
        *((unsigned char *)a1 + v11) = 0;
        break;
      case 1u:
        unsigned int v26 = a2[v9];
        unsigned int v27 = v26 - 2;
        if (v26 >= 2)
        {
          if (v9 <= 3) {
            uint64_t v28 = v9;
          }
          else {
            uint64_t v28 = 4;
          }
          switch(v28)
          {
            case 1:
              int v29 = *a2;
              goto LABEL_87;
            case 2:
              int v29 = *(unsigned __int16 *)a2;
              goto LABEL_87;
            case 3:
              int v29 = *(unsigned __int16 *)a2 | (a2[2] << 16);
              goto LABEL_87;
            case 4:
              int v29 = *(_DWORD *)a2;
LABEL_87:
              int v57 = (v29 | (v27 << (8 * v9))) + 2;
              unsigned int v26 = v29 + 2;
              if (v9 < 4) {
                unsigned int v26 = v57;
              }
              break;
            default:
              break;
          }
        }
        BOOL v58 = v26 == 1;
        if (v26 == 1)
        {
          uint64_t v59 = v7;
        }
        else
        {
          uint64_t v8 = v5;
          uint64_t v59 = AssociatedTypeWitness;
        }
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v8 + 16))(a1, a2, v59);
        *((unsigned char *)a1 + v9) = v58;
        uint64_t v60 = (void *)(((unint64_t)a1 + v10 + 7) & 0xFFFFFFFFFFFFFFF8);
        uint64_t v61 = (void *)((unint64_t)&a2[v10 + 7] & 0xFFFFFFFFFFFFFFF8);
        *uint64_t v60 = *v61;
        v60[1] = v61[1];
        char v62 = 1;
        goto LABEL_102;
      case 2u:
        unsigned int v30 = a2[v9];
        unsigned int v31 = v30 - 2;
        if (v30 >= 2)
        {
          if (v9 <= 3) {
            uint64_t v32 = v9;
          }
          else {
            uint64_t v32 = 4;
          }
          switch(v32)
          {
            case 1:
              int v33 = *a2;
              goto LABEL_96;
            case 2:
              int v33 = *(unsigned __int16 *)a2;
              goto LABEL_96;
            case 3:
              int v33 = *(unsigned __int16 *)a2 | (a2[2] << 16);
              goto LABEL_96;
            case 4:
              int v33 = *(_DWORD *)a2;
LABEL_96:
              int v63 = (v33 | (v31 << (8 * v9))) + 2;
              unsigned int v30 = v33 + 2;
              if (v9 < 4) {
                unsigned int v30 = v63;
              }
              break;
            default:
              break;
          }
        }
        BOOL v64 = v30 == 1;
        if (v30 == 1)
        {
          uint64_t v65 = v7;
        }
        else
        {
          uint64_t v8 = v5;
          uint64_t v65 = AssociatedTypeWitness;
        }
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v8 + 16))(a1, a2, v65);
        *((unsigned char *)a1 + v9) = v64;
        uint64_t v66 = (void *)(((unint64_t)a1 + v10 + 7) & 0xFFFFFFFFFFFFFFF8);
        uint64_t v67 = (void *)((unint64_t)&a2[v10 + 7] & 0xFFFFFFFFFFFFFFF8);
        void *v66 = *v67;
        v66[1] = v67[1];
        char v62 = 2;
LABEL_102:
        *((unsigned char *)a1 + v11) = v62;
        swift_bridgeObjectRetain();
        break;
      case 3u:
        unsigned int v34 = a2[v9];
        unsigned int v35 = v34 - 2;
        if (v34 >= 2)
        {
          if (v9 <= 3) {
            uint64_t v36 = v9;
          }
          else {
            uint64_t v36 = 4;
          }
          switch(v36)
          {
            case 1:
              int v37 = *a2;
              goto LABEL_106;
            case 2:
              int v37 = *(unsigned __int16 *)a2;
              goto LABEL_106;
            case 3:
              int v37 = *(unsigned __int16 *)a2 | (a2[2] << 16);
              goto LABEL_106;
            case 4:
              int v37 = *(_DWORD *)a2;
LABEL_106:
              int v68 = (v37 | (v35 << (8 * v9))) + 2;
              unsigned int v34 = v37 + 2;
              if (v9 < 4) {
                unsigned int v34 = v68;
              }
              break;
            default:
              break;
          }
        }
        BOOL v69 = v34 == 1;
        if (v34 == 1)
        {
          uint64_t v70 = v7;
        }
        else
        {
          uint64_t v8 = v5;
          uint64_t v70 = AssociatedTypeWitness;
        }
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v8 + 16))(a1, a2, v70);
        *((unsigned char *)a1 + v9) = v69;
        *((unsigned char *)a1 + v11) = 3;
        break;
      case 4u:
        unsigned int v38 = a2[v9];
        unsigned int v39 = v38 - 2;
        if (v38 >= 2)
        {
          if (v9 <= 3) {
            uint64_t v40 = v9;
          }
          else {
            uint64_t v40 = 4;
          }
          switch(v40)
          {
            case 1:
              int v41 = *a2;
              goto LABEL_115;
            case 2:
              int v41 = *(unsigned __int16 *)a2;
              goto LABEL_115;
            case 3:
              int v41 = *(unsigned __int16 *)a2 | (a2[2] << 16);
              goto LABEL_115;
            case 4:
              int v41 = *(_DWORD *)a2;
LABEL_115:
              int v71 = (v41 | (v39 << (8 * v9))) + 2;
              unsigned int v38 = v41 + 2;
              if (v9 < 4) {
                unsigned int v38 = v71;
              }
              break;
            default:
              break;
          }
        }
        BOOL v72 = v38 == 1;
        if (v38 == 1)
        {
          uint64_t v73 = v7;
        }
        else
        {
          uint64_t v8 = v5;
          uint64_t v73 = AssociatedTypeWitness;
        }
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v8 + 16))(a1, a2, v73);
        *((unsigned char *)a1 + v9) = v72;
        *((unsigned char *)a1 + v11) = 4;
        break;
      case 5u:
        unsigned int v42 = a2[v9];
        unsigned int v43 = v42 - 2;
        if (v42 >= 2)
        {
          if (v9 <= 3) {
            uint64_t v44 = v9;
          }
          else {
            uint64_t v44 = 4;
          }
          switch(v44)
          {
            case 1:
              int v45 = *a2;
              goto LABEL_124;
            case 2:
              int v45 = *(unsigned __int16 *)a2;
              goto LABEL_124;
            case 3:
              int v45 = *(unsigned __int16 *)a2 | (a2[2] << 16);
              goto LABEL_124;
            case 4:
              int v45 = *(_DWORD *)a2;
LABEL_124:
              int v74 = (v45 | (v43 << (8 * v9))) + 2;
              unsigned int v42 = v45 + 2;
              if (v9 < 4) {
                unsigned int v42 = v74;
              }
              break;
            default:
              break;
          }
        }
        BOOL v75 = v42 == 1;
        if (v42 == 1)
        {
          uint64_t v76 = v7;
        }
        else
        {
          uint64_t v8 = v5;
          uint64_t v76 = AssociatedTypeWitness;
        }
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v8 + 16))(a1, a2, v76);
        *((unsigned char *)a1 + v9) = v75;
        *((unsigned char *)a1 + v11) = 5;
        break;
      case 6u:
        unsigned int v46 = a2[v9];
        unsigned int v47 = v46 - 2;
        if (v46 >= 2)
        {
          if (v9 <= 3) {
            uint64_t v48 = v9;
          }
          else {
            uint64_t v48 = 4;
          }
          switch(v48)
          {
            case 1:
              int v49 = *a2;
              goto LABEL_133;
            case 2:
              int v49 = *(unsigned __int16 *)a2;
              goto LABEL_133;
            case 3:
              int v49 = *(unsigned __int16 *)a2 | (a2[2] << 16);
              goto LABEL_133;
            case 4:
              int v49 = *(_DWORD *)a2;
LABEL_133:
              int v77 = (v49 | (v47 << (8 * v9))) + 2;
              unsigned int v46 = v49 + 2;
              if (v9 < 4) {
                unsigned int v46 = v77;
              }
              break;
            default:
              break;
          }
        }
        BOOL v78 = v46 == 1;
        if (v46 == 1)
        {
          uint64_t v79 = v7;
        }
        else
        {
          uint64_t v8 = v5;
          uint64_t v79 = AssociatedTypeWitness;
        }
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v8 + 16))(a1, a2, v79);
        *((unsigned char *)a1 + v9) = v78;
        *((unsigned char *)a1 + v11) = 6;
        break;
      case 7u:
        unsigned int v50 = a2[v9];
        unsigned int v51 = v50 - 2;
        if (v50 >= 2)
        {
          if (v9 <= 3) {
            uint64_t v52 = v9;
          }
          else {
            uint64_t v52 = 4;
          }
          switch(v52)
          {
            case 1:
              int v53 = *a2;
              goto LABEL_142;
            case 2:
              int v53 = *(unsigned __int16 *)a2;
              goto LABEL_142;
            case 3:
              int v53 = *(unsigned __int16 *)a2 | (a2[2] << 16);
              goto LABEL_142;
            case 4:
              int v53 = *(_DWORD *)a2;
LABEL_142:
              int v80 = (v53 | (v51 << (8 * v9))) + 2;
              unsigned int v50 = v53 + 2;
              if (v9 < 4) {
                unsigned int v50 = v80;
              }
              break;
            default:
              break;
          }
        }
        BOOL v81 = v50 == 1;
        if (v50 == 1)
        {
          uint64_t v82 = v7;
        }
        else
        {
          uint64_t v8 = v5;
          uint64_t v82 = AssociatedTypeWitness;
        }
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v8 + 16))(a1, a2, v82);
        *((unsigned char *)a1 + v9) = v81;
        *((unsigned char *)a1 + v11) = 7;
        break;
      default:
        memcpy(a1, a2, v12);
        break;
    }
  }
  return a1;
}

uint64_t sub_1001D9390(unsigned __int8 *a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v32 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v3 = *(void *)(v32 + 64);
  uint64_t result = swift_getAssociatedTypeWitness();
  uint64_t v5 = result;
  unint64_t v6 = *(void *)(*(void *)(result - 8) + 64);
  if (v6 <= v3) {
    unint64_t v6 = v3;
  }
  unint64_t v7 = (v6 & 0xFFFFFFFFFFFFFFF8) + 24;
  if (v7 <= v6 + 1) {
    unint64_t v7 = v6 + 1;
  }
  unsigned int v8 = a1[v7];
  unsigned int v9 = v8 - 8;
  if (v8 >= 8)
  {
    if (v7 <= 3) {
      uint64_t v10 = v7;
    }
    else {
      uint64_t v10 = 4;
    }
    switch(v10)
    {
      case 1:
        int v11 = *a1;
        goto LABEL_14;
      case 2:
        int v11 = *(unsigned __int16 *)a1;
        goto LABEL_14;
      case 3:
        int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_14;
      case 4:
        int v11 = *(_DWORD *)a1;
LABEL_14:
        int v12 = (v11 | (v9 << (8 * v7))) + 8;
        unsigned int v8 = v11 + 8;
        if (v7 < 4) {
          unsigned int v8 = v12;
        }
        break;
      default:
        break;
    }
  }
  switch(v8)
  {
    case 0u:
      unsigned int v13 = a1[v6];
      unsigned int v14 = v13 - 2;
      if (v13 >= 2)
      {
        if (v6 <= 3) {
          uint64_t v15 = v6;
        }
        else {
          uint64_t v15 = 4;
        }
        switch(v15)
        {
          case 1:
            goto LABEL_58;
          case 2:
            goto LABEL_59;
          case 3:
            goto LABEL_60;
          case 4:
            goto LABEL_61;
          default:
            goto LABEL_64;
        }
      }
      goto LABEL_64;
    case 1u:
      unsigned int v16 = a1[v6];
      unsigned int v17 = v16 - 2;
      if (v16 >= 2)
      {
        if (v6 <= 3) {
          uint64_t v18 = v6;
        }
        else {
          uint64_t v18 = 4;
        }
        switch(v18)
        {
          case 1:
            goto LABEL_32;
          case 2:
            goto LABEL_71;
          case 3:
            goto LABEL_72;
          case 4:
            goto LABEL_73;
          default:
            goto LABEL_76;
        }
      }
      goto LABEL_76;
    case 2u:
      unsigned int v16 = a1[v6];
      unsigned int v17 = v16 - 2;
      if (v16 >= 2)
      {
        if (v6 <= 3) {
          uint64_t v19 = v6;
        }
        else {
          uint64_t v19 = 4;
        }
        switch(v19)
        {
          case 1:
LABEL_32:
            int v20 = *a1;
            goto LABEL_74;
          case 2:
LABEL_71:
            int v20 = *(unsigned __int16 *)a1;
            goto LABEL_74;
          case 3:
LABEL_72:
            int v20 = *(unsigned __int16 *)a1 | (a1[2] << 16);
            goto LABEL_74;
          case 4:
LABEL_73:
            int v20 = *(_DWORD *)a1;
LABEL_74:
            int v30 = (v20 | (v17 << (8 * v6))) + 2;
            unsigned int v16 = v20 + 2;
            if (v6 < 4) {
              unsigned int v16 = v30;
            }
            break;
          default:
            break;
        }
      }
LABEL_76:
      if (v16 == 1) {
        uint64_t v31 = *(void *)(result - 8);
      }
      else {
        uint64_t v31 = v32;
      }
      if (v16 != 1) {
        uint64_t v5 = AssociatedTypeWitness;
      }
      (*(void (**)(unsigned __int8 *, uint64_t))(v31 + 8))(a1, v5);
      return swift_bridgeObjectRelease();
    case 3u:
      unsigned int v13 = a1[v6];
      unsigned int v14 = v13 - 2;
      if (v13 >= 2)
      {
        if (v6 <= 3) {
          uint64_t v21 = v6;
        }
        else {
          uint64_t v21 = 4;
        }
        switch(v21)
        {
          case 1:
            goto LABEL_58;
          case 2:
            goto LABEL_59;
          case 3:
            goto LABEL_60;
          case 4:
            goto LABEL_61;
          default:
            goto LABEL_64;
        }
      }
      goto LABEL_64;
    case 4u:
      unsigned int v13 = a1[v6];
      unsigned int v14 = v13 - 2;
      if (v13 >= 2)
      {
        if (v6 <= 3) {
          uint64_t v22 = v6;
        }
        else {
          uint64_t v22 = 4;
        }
        switch(v22)
        {
          case 1:
            goto LABEL_58;
          case 2:
            goto LABEL_59;
          case 3:
            goto LABEL_60;
          case 4:
            goto LABEL_61;
          default:
            goto LABEL_64;
        }
      }
      goto LABEL_64;
    case 5u:
      unsigned int v13 = a1[v6];
      unsigned int v14 = v13 - 2;
      if (v13 >= 2)
      {
        if (v6 <= 3) {
          uint64_t v23 = v6;
        }
        else {
          uint64_t v23 = 4;
        }
        switch(v23)
        {
          case 1:
            goto LABEL_58;
          case 2:
            goto LABEL_59;
          case 3:
            goto LABEL_60;
          case 4:
            goto LABEL_61;
          default:
            goto LABEL_64;
        }
      }
      goto LABEL_64;
    case 6u:
      unsigned int v13 = a1[v6];
      unsigned int v14 = v13 - 2;
      if (v13 >= 2)
      {
        if (v6 <= 3) {
          uint64_t v24 = v6;
        }
        else {
          uint64_t v24 = 4;
        }
        switch(v24)
        {
          case 1:
            goto LABEL_58;
          case 2:
            goto LABEL_59;
          case 3:
            goto LABEL_60;
          case 4:
            goto LABEL_61;
          default:
            goto LABEL_64;
        }
      }
      goto LABEL_64;
    case 7u:
      unsigned int v13 = a1[v6];
      unsigned int v14 = v13 - 2;
      if (v13 >= 2)
      {
        if (v6 <= 3) {
          uint64_t v25 = v6;
        }
        else {
          uint64_t v25 = 4;
        }
        switch(v25)
        {
          case 1:
LABEL_58:
            int v26 = *a1;
            goto LABEL_62;
          case 2:
LABEL_59:
            int v26 = *(unsigned __int16 *)a1;
            goto LABEL_62;
          case 3:
LABEL_60:
            int v26 = *(unsigned __int16 *)a1 | (a1[2] << 16);
            goto LABEL_62;
          case 4:
LABEL_61:
            int v26 = *(_DWORD *)a1;
LABEL_62:
            int v27 = (v26 | (v14 << (8 * v6))) + 2;
            unsigned int v13 = v26 + 2;
            if (v6 < 4) {
              unsigned int v13 = v27;
            }
            break;
          default:
            break;
        }
      }
LABEL_64:
      if (v13 == 1)
      {
        uint64_t v28 = *(uint64_t (**)(unsigned __int8 *, uint64_t))(*(void *)(result - 8) + 8);
        uint64_t result = v28(a1, result);
      }
      else
      {
        int v29 = *(uint64_t (**)(unsigned __int8 *, uint64_t))(v32 + 8);
        uint64_t result = v29(a1, AssociatedTypeWitness);
      }
      break;
    default:
      return result;
  }
  return result;
}

unsigned char *sub_1001D994C(unsigned char *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  if (*(void *)(v8 + 64) <= v6) {
    unint64_t v9 = v6;
  }
  else {
    unint64_t v9 = *(void *)(*(void *)(v7 - 8) + 64);
  }
  unint64_t v10 = v9 + 1;
  if ((v9 & 0xFFFFFFFFFFFFFFF8) + 24 <= v9 + 1) {
    unint64_t v11 = v9 + 1;
  }
  else {
    unint64_t v11 = (v9 & 0xFFFFFFFFFFFFFFF8) + 24;
  }
  unsigned int v12 = a2[v11];
  unsigned int v13 = v12 - 8;
  if (v12 >= 8)
  {
    if (v11 <= 3) {
      uint64_t v14 = v11;
    }
    else {
      uint64_t v14 = 4;
    }
    switch(v14)
    {
      case 1:
        int v15 = *a2;
        goto LABEL_16;
      case 2:
        int v15 = *(unsigned __int16 *)a2;
        goto LABEL_16;
      case 3:
        int v15 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_16;
      case 4:
        int v15 = *(_DWORD *)a2;
LABEL_16:
        int v16 = (v15 | (v13 << (8 * v11))) + 8;
        unsigned int v12 = v15 + 8;
        if (v11 < 4) {
          unsigned int v12 = v16;
        }
        break;
      default:
        break;
    }
  }
  switch(v12)
  {
    case 0u:
      unsigned int v17 = a2[v9];
      unsigned int v18 = v17 - 2;
      if (v17 >= 2)
      {
        if (v9 <= 3) {
          uint64_t v19 = v9;
        }
        else {
          uint64_t v19 = 4;
        }
        switch(v19)
        {
          case 1:
            int v20 = *a2;
            goto LABEL_71;
          case 2:
            int v20 = *(unsigned __int16 *)a2;
            goto LABEL_71;
          case 3:
            int v20 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_71;
          case 4:
            int v20 = *(_DWORD *)a2;
LABEL_71:
            int v49 = (v20 | (v18 << (8 * v9))) + 2;
            unsigned int v17 = v20 + 2;
            if (v9 < 4) {
              unsigned int v17 = v49;
            }
            break;
          default:
            break;
        }
      }
      BOOL v50 = v17 == 1;
      if (v17 == 1)
      {
        uint64_t v51 = v7;
      }
      else
      {
        uint64_t v8 = v5;
        uint64_t v51 = AssociatedTypeWitness;
      }
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v8 + 16))(a1, a2, v51);
      a1[v9] = v50;
      a1[v11] = 0;
      return a1;
    case 1u:
      unsigned int v21 = a2[v9];
      unsigned int v22 = v21 - 2;
      if (v21 >= 2)
      {
        if (v9 <= 3) {
          uint64_t v23 = v9;
        }
        else {
          uint64_t v23 = 4;
        }
        switch(v23)
        {
          case 1:
            int v24 = *a2;
            goto LABEL_80;
          case 2:
            int v24 = *(unsigned __int16 *)a2;
            goto LABEL_80;
          case 3:
            int v24 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_80;
          case 4:
            int v24 = *(_DWORD *)a2;
LABEL_80:
            int v52 = (v24 | (v22 << (8 * v9))) + 2;
            unsigned int v21 = v24 + 2;
            if (v9 < 4) {
              unsigned int v21 = v52;
            }
            break;
          default:
            break;
        }
      }
      BOOL v53 = v21 == 1;
      if (v21 == 1)
      {
        uint64_t v54 = v7;
      }
      else
      {
        uint64_t v8 = v5;
        uint64_t v54 = AssociatedTypeWitness;
      }
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v8 + 16))(a1, a2, v54);
      a1[v9] = v53;
      BOOL v55 = (void *)((unint64_t)&a1[v10 + 7] & 0xFFFFFFFFFFFFFFF8);
      uint64_t v56 = (void *)((unint64_t)&a2[v10 + 7] & 0xFFFFFFFFFFFFFFF8);
      *BOOL v55 = *v56;
      v55[1] = v56[1];
      char v57 = 1;
      goto LABEL_95;
    case 2u:
      unsigned int v25 = a2[v9];
      unsigned int v26 = v25 - 2;
      if (v25 >= 2)
      {
        if (v9 <= 3) {
          uint64_t v27 = v9;
        }
        else {
          uint64_t v27 = 4;
        }
        switch(v27)
        {
          case 1:
            int v28 = *a2;
            goto LABEL_89;
          case 2:
            int v28 = *(unsigned __int16 *)a2;
            goto LABEL_89;
          case 3:
            int v28 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_89;
          case 4:
            int v28 = *(_DWORD *)a2;
LABEL_89:
            int v58 = (v28 | (v26 << (8 * v9))) + 2;
            unsigned int v25 = v28 + 2;
            if (v9 < 4) {
              unsigned int v25 = v58;
            }
            break;
          default:
            break;
        }
      }
      BOOL v59 = v25 == 1;
      if (v25 == 1)
      {
        uint64_t v60 = v7;
      }
      else
      {
        uint64_t v8 = v5;
        uint64_t v60 = AssociatedTypeWitness;
      }
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v8 + 16))(a1, a2, v60);
      a1[v9] = v59;
      uint64_t v61 = (void *)((unint64_t)&a1[v10 + 7] & 0xFFFFFFFFFFFFFFF8);
      char v62 = (void *)((unint64_t)&a2[v10 + 7] & 0xFFFFFFFFFFFFFFF8);
      void *v61 = *v62;
      v61[1] = v62[1];
      char v57 = 2;
LABEL_95:
      a1[v11] = v57;
      swift_bridgeObjectRetain();
      return a1;
    case 3u:
      unsigned int v29 = a2[v9];
      unsigned int v30 = v29 - 2;
      if (v29 >= 2)
      {
        if (v9 <= 3) {
          uint64_t v31 = v9;
        }
        else {
          uint64_t v31 = 4;
        }
        switch(v31)
        {
          case 1:
            int v32 = *a2;
            goto LABEL_99;
          case 2:
            int v32 = *(unsigned __int16 *)a2;
            goto LABEL_99;
          case 3:
            int v32 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_99;
          case 4:
            int v32 = *(_DWORD *)a2;
LABEL_99:
            int v63 = (v32 | (v30 << (8 * v9))) + 2;
            unsigned int v29 = v32 + 2;
            if (v9 < 4) {
              unsigned int v29 = v63;
            }
            break;
          default:
            break;
        }
      }
      BOOL v64 = v29 == 1;
      if (v29 == 1)
      {
        uint64_t v65 = v7;
      }
      else
      {
        uint64_t v8 = v5;
        uint64_t v65 = AssociatedTypeWitness;
      }
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v8 + 16))(a1, a2, v65);
      a1[v9] = v64;
      char v66 = 3;
      goto LABEL_141;
    case 4u:
      unsigned int v33 = a2[v9];
      unsigned int v34 = v33 - 2;
      if (v33 >= 2)
      {
        if (v9 <= 3) {
          uint64_t v35 = v9;
        }
        else {
          uint64_t v35 = 4;
        }
        switch(v35)
        {
          case 1:
            int v36 = *a2;
            goto LABEL_108;
          case 2:
            int v36 = *(unsigned __int16 *)a2;
            goto LABEL_108;
          case 3:
            int v36 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_108;
          case 4:
            int v36 = *(_DWORD *)a2;
LABEL_108:
            int v67 = (v36 | (v34 << (8 * v9))) + 2;
            unsigned int v33 = v36 + 2;
            if (v9 < 4) {
              unsigned int v33 = v67;
            }
            break;
          default:
            break;
        }
      }
      BOOL v68 = v33 == 1;
      if (v33 == 1)
      {
        uint64_t v69 = v7;
      }
      else
      {
        uint64_t v8 = v5;
        uint64_t v69 = AssociatedTypeWitness;
      }
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v8 + 16))(a1, a2, v69);
      a1[v9] = v68;
      char v66 = 4;
      goto LABEL_141;
    case 5u:
      unsigned int v37 = a2[v9];
      unsigned int v38 = v37 - 2;
      if (v37 >= 2)
      {
        if (v9 <= 3) {
          uint64_t v39 = v9;
        }
        else {
          uint64_t v39 = 4;
        }
        switch(v39)
        {
          case 1:
            int v40 = *a2;
            goto LABEL_117;
          case 2:
            int v40 = *(unsigned __int16 *)a2;
            goto LABEL_117;
          case 3:
            int v40 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_117;
          case 4:
            int v40 = *(_DWORD *)a2;
LABEL_117:
            int v70 = (v40 | (v38 << (8 * v9))) + 2;
            unsigned int v37 = v40 + 2;
            if (v9 < 4) {
              unsigned int v37 = v70;
            }
            break;
          default:
            break;
        }
      }
      BOOL v71 = v37 == 1;
      if (v37 == 1)
      {
        uint64_t v72 = v7;
      }
      else
      {
        uint64_t v8 = v5;
        uint64_t v72 = AssociatedTypeWitness;
      }
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v8 + 16))(a1, a2, v72);
      a1[v9] = v71;
      char v66 = 5;
      goto LABEL_141;
    case 6u:
      unsigned int v41 = a2[v9];
      unsigned int v42 = v41 - 2;
      if (v41 >= 2)
      {
        if (v9 <= 3) {
          uint64_t v43 = v9;
        }
        else {
          uint64_t v43 = 4;
        }
        switch(v43)
        {
          case 1:
            int v44 = *a2;
            goto LABEL_126;
          case 2:
            int v44 = *(unsigned __int16 *)a2;
            goto LABEL_126;
          case 3:
            int v44 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_126;
          case 4:
            int v44 = *(_DWORD *)a2;
LABEL_126:
            int v73 = (v44 | (v42 << (8 * v9))) + 2;
            unsigned int v41 = v44 + 2;
            if (v9 < 4) {
              unsigned int v41 = v73;
            }
            break;
          default:
            break;
        }
      }
      BOOL v74 = v41 == 1;
      if (v41 == 1)
      {
        uint64_t v75 = v7;
      }
      else
      {
        uint64_t v8 = v5;
        uint64_t v75 = AssociatedTypeWitness;
      }
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v8 + 16))(a1, a2, v75);
      a1[v9] = v74;
      char v66 = 6;
      goto LABEL_141;
    case 7u:
      unsigned int v45 = a2[v9];
      unsigned int v46 = v45 - 2;
      if (v45 >= 2)
      {
        if (v9 <= 3) {
          uint64_t v47 = v9;
        }
        else {
          uint64_t v47 = 4;
        }
        switch(v47)
        {
          case 1:
            int v48 = *a2;
            goto LABEL_135;
          case 2:
            int v48 = *(unsigned __int16 *)a2;
            goto LABEL_135;
          case 3:
            int v48 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_135;
          case 4:
            int v48 = *(_DWORD *)a2;
LABEL_135:
            int v76 = (v48 | (v46 << (8 * v9))) + 2;
            unsigned int v45 = v48 + 2;
            if (v9 < 4) {
              unsigned int v45 = v76;
            }
            break;
          default:
            break;
        }
      }
      BOOL v77 = v45 == 1;
      if (v45 == 1)
      {
        uint64_t v78 = v7;
      }
      else
      {
        uint64_t v8 = v5;
        uint64_t v78 = AssociatedTypeWitness;
      }
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v8 + 16))(a1, a2, v78);
      a1[v9] = v77;
      char v66 = 7;
LABEL_141:
      a1[v11] = v66;
      break;
    default:
      memcpy(a1, a2, v11 + 1);
      break;
  }
  return a1;
}

unsigned __int8 *sub_1001DA1BC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1 != a2)
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
    unint64_t v6 = *(void *)(v5 + 64);
    uint64_t v7 = swift_getAssociatedTypeWitness();
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)(v7 - 8);
    if (*(void *)(v9 + 64) > v6) {
      unint64_t v6 = *(void *)(*(void *)(v7 - 8) + 64);
    }
    unint64_t v10 = v6 + 1;
    if ((v6 & 0xFFFFFFFFFFFFFFF8) + 24 <= v6 + 1) {
      unint64_t v11 = v6 + 1;
    }
    else {
      unint64_t v11 = (v6 & 0xFFFFFFFFFFFFFFF8) + 24;
    }
    unsigned int v12 = a1[v11];
    unsigned int v13 = v12 - 8;
    if (v12 >= 8)
    {
      if (v11 <= 3) {
        uint64_t v14 = v11;
      }
      else {
        uint64_t v14 = 4;
      }
      switch(v14)
      {
        case 1:
          int v15 = *a1;
          goto LABEL_16;
        case 2:
          int v15 = *(unsigned __int16 *)a1;
          goto LABEL_16;
        case 3:
          int v15 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_16;
        case 4:
          int v15 = *(_DWORD *)a1;
LABEL_16:
          int v16 = (v15 | (v13 << (8 * v11))) + 8;
          unsigned int v12 = v15 + 8;
          if (v11 < 4) {
            unsigned int v12 = v16;
          }
          break;
        default:
          break;
      }
    }
    switch(v12)
    {
      case 0u:
        unsigned int v17 = a1[v6];
        unsigned int v18 = v17 - 2;
        if (v17 >= 2)
        {
          if (v6 <= 3) {
            uint64_t v19 = v6;
          }
          else {
            uint64_t v19 = 4;
          }
          switch(v19)
          {
            case 1:
              goto LABEL_60;
            case 2:
              goto LABEL_62;
            case 3:
              goto LABEL_64;
            case 4:
              goto LABEL_68;
            default:
              goto LABEL_66;
          }
        }
        goto LABEL_66;
      case 1u:
        unsigned int v20 = a1[v6];
        unsigned int v21 = v20 - 2;
        if (v20 >= 2)
        {
          if (v6 <= 3) {
            uint64_t v22 = v6;
          }
          else {
            uint64_t v22 = 4;
          }
          switch(v22)
          {
            case 1:
              goto LABEL_34;
            case 2:
              goto LABEL_71;
            case 3:
              goto LABEL_72;
            case 4:
              goto LABEL_73;
            default:
              goto LABEL_76;
          }
        }
        goto LABEL_76;
      case 2u:
        unsigned int v20 = a1[v6];
        unsigned int v21 = v20 - 2;
        if (v20 >= 2)
        {
          if (v6 <= 3) {
            uint64_t v23 = v6;
          }
          else {
            uint64_t v23 = 4;
          }
          switch(v23)
          {
            case 1:
LABEL_34:
              int v24 = *a1;
              goto LABEL_74;
            case 2:
LABEL_71:
              int v24 = *(unsigned __int16 *)a1;
              goto LABEL_74;
            case 3:
LABEL_72:
              int v24 = *(unsigned __int16 *)a1 | (a1[2] << 16);
              goto LABEL_74;
            case 4:
LABEL_73:
              int v24 = *(_DWORD *)a1;
LABEL_74:
              int v31 = (v24 | (v21 << (8 * v6))) + 2;
              unsigned int v20 = v24 + 2;
              if (v6 < 4) {
                unsigned int v20 = v31;
              }
              break;
            default:
              break;
          }
        }
LABEL_76:
        if (v20 == 1) {
          uint64_t v32 = *(void *)(v7 - 8);
        }
        else {
          uint64_t v32 = v5;
        }
        if (v20 == 1) {
          uint64_t v33 = v7;
        }
        else {
          uint64_t v33 = AssociatedTypeWitness;
        }
        (*(void (**)(unsigned __int8 *, uint64_t))(v32 + 8))(a1, v33);
        swift_bridgeObjectRelease();
        break;
      case 3u:
        unsigned int v17 = a1[v6];
        unsigned int v18 = v17 - 2;
        if (v17 >= 2)
        {
          if (v6 <= 3) {
            uint64_t v25 = v6;
          }
          else {
            uint64_t v25 = 4;
          }
          switch(v25)
          {
            case 1:
              goto LABEL_60;
            case 2:
              goto LABEL_62;
            case 3:
              goto LABEL_64;
            case 4:
              goto LABEL_68;
            default:
              goto LABEL_66;
          }
        }
        goto LABEL_66;
      case 4u:
        unsigned int v17 = a1[v6];
        unsigned int v18 = v17 - 2;
        if (v17 >= 2)
        {
          if (v6 <= 3) {
            uint64_t v26 = v6;
          }
          else {
            uint64_t v26 = 4;
          }
          switch(v26)
          {
            case 1:
              goto LABEL_60;
            case 2:
              goto LABEL_62;
            case 3:
              goto LABEL_64;
            case 4:
              goto LABEL_68;
            default:
              goto LABEL_66;
          }
        }
        goto LABEL_66;
      case 5u:
        unsigned int v17 = a1[v6];
        unsigned int v18 = v17 - 2;
        if (v17 >= 2)
        {
          if (v6 <= 3) {
            uint64_t v27 = v6;
          }
          else {
            uint64_t v27 = 4;
          }
          switch(v27)
          {
            case 1:
              goto LABEL_60;
            case 2:
              goto LABEL_62;
            case 3:
              goto LABEL_64;
            case 4:
              goto LABEL_68;
            default:
              goto LABEL_66;
          }
        }
        goto LABEL_66;
      case 6u:
        unsigned int v17 = a1[v6];
        unsigned int v18 = v17 - 2;
        if (v17 >= 2)
        {
          if (v6 <= 3) {
            uint64_t v28 = v6;
          }
          else {
            uint64_t v28 = 4;
          }
          switch(v28)
          {
            case 1:
              goto LABEL_60;
            case 2:
              goto LABEL_62;
            case 3:
              goto LABEL_64;
            case 4:
              goto LABEL_68;
            default:
              goto LABEL_66;
          }
        }
        goto LABEL_66;
      case 7u:
        unsigned int v17 = a1[v6];
        unsigned int v18 = v17 - 2;
        if (v17 >= 2)
        {
          if (v6 <= 3) {
            uint64_t v29 = v6;
          }
          else {
            uint64_t v29 = 4;
          }
          switch(v29)
          {
            case 1:
LABEL_60:
              int v30 = *a1;
              if (v6 >= 4) {
                goto LABEL_69;
              }
              goto LABEL_65;
            case 2:
LABEL_62:
              int v30 = *(unsigned __int16 *)a1;
              if (v6 >= 4) {
                goto LABEL_69;
              }
              goto LABEL_65;
            case 3:
LABEL_64:
              int v30 = *(unsigned __int16 *)a1 | (a1[2] << 16);
              if (v6 < 4) {
                goto LABEL_65;
              }
              goto LABEL_69;
            case 4:
LABEL_68:
              int v30 = *(_DWORD *)a1;
              if (v6 < 4)
              {
LABEL_65:
                unsigned int v17 = (v30 | (v18 << (8 * v6))) + 2;
                break;
              }
LABEL_69:
              if (v30 != -1) {
                goto LABEL_70;
              }
              goto LABEL_67;
            default:
              break;
          }
        }
LABEL_66:
        if (v17 == 1) {
LABEL_67:
        }
          (*(void (**)(unsigned __int8 *, uint64_t))(v9 + 8))(a1, v7);
        else {
LABEL_70:
        }
          (*(void (**)(unsigned __int8 *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
        break;
      default:
        break;
    }
    unsigned int v34 = a2[v11];
    unsigned int v35 = v34 - 8;
    if (v34 >= 8)
    {
      if (v11 <= 3) {
        uint64_t v36 = v11;
      }
      else {
        uint64_t v36 = 4;
      }
      switch(v36)
      {
        case 1:
          int v37 = *a2;
          goto LABEL_92;
        case 2:
          int v37 = *(unsigned __int16 *)a2;
          goto LABEL_92;
        case 3:
          int v37 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_92;
        case 4:
          int v37 = *(_DWORD *)a2;
LABEL_92:
          int v38 = (v37 | (v35 << (8 * v11))) + 8;
          unsigned int v34 = v37 + 8;
          if (v11 < 4) {
            unsigned int v34 = v38;
          }
          break;
        default:
          break;
      }
    }
    switch(v34)
    {
      case 0u:
        unsigned int v39 = a2[v6];
        unsigned int v40 = v39 - 2;
        if (v39 >= 2)
        {
          if (v6 <= 3) {
            uint64_t v41 = v6;
          }
          else {
            uint64_t v41 = 4;
          }
          switch(v41)
          {
            case 1:
              int v42 = *a2;
              goto LABEL_147;
            case 2:
              int v42 = *(unsigned __int16 *)a2;
              goto LABEL_147;
            case 3:
              int v42 = *(unsigned __int16 *)a2 | (a2[2] << 16);
              goto LABEL_147;
            case 4:
              int v42 = *(_DWORD *)a2;
LABEL_147:
              int v71 = (v42 | (v40 << (8 * v6))) + 2;
              unsigned int v39 = v42 + 2;
              if (v6 < 4) {
                unsigned int v39 = v71;
              }
              break;
            default:
              break;
          }
        }
        BOOL v72 = v39 == 1;
        if (v39 == 1) {
          uint64_t v73 = v9;
        }
        else {
          uint64_t v73 = v5;
        }
        if (v39 == 1) {
          uint64_t v74 = v8;
        }
        else {
          uint64_t v74 = AssociatedTypeWitness;
        }
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v73 + 16))(a1, a2, v74);
        a1[v6] = v72;
        a1[v11] = 0;
        return a1;
      case 1u:
        unsigned int v43 = a2[v6];
        unsigned int v44 = v43 - 2;
        if (v43 >= 2)
        {
          if (v6 <= 3) {
            uint64_t v45 = v6;
          }
          else {
            uint64_t v45 = 4;
          }
          switch(v45)
          {
            case 1:
              int v46 = *a2;
              goto LABEL_159;
            case 2:
              int v46 = *(unsigned __int16 *)a2;
              goto LABEL_159;
            case 3:
              int v46 = *(unsigned __int16 *)a2 | (a2[2] << 16);
              goto LABEL_159;
            case 4:
              int v46 = *(_DWORD *)a2;
LABEL_159:
              int v75 = (v46 | (v44 << (8 * v6))) + 2;
              unsigned int v43 = v46 + 2;
              if (v6 < 4) {
                unsigned int v43 = v75;
              }
              break;
            default:
              break;
          }
        }
        BOOL v76 = v43 == 1;
        if (v43 == 1) {
          uint64_t v77 = v9;
        }
        else {
          uint64_t v77 = v5;
        }
        if (v43 == 1) {
          uint64_t v78 = v8;
        }
        else {
          uint64_t v78 = AssociatedTypeWitness;
        }
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v77 + 16))(a1, a2, v78);
        a1[v6] = v76;
        uint64_t v79 = (void *)((unint64_t)&a1[v10 + 7] & 0xFFFFFFFFFFFFFFF8);
        int v80 = (void *)((unint64_t)&a2[v10 + 7] & 0xFFFFFFFFFFFFFFF8);
        *uint64_t v79 = *v80;
        v79[1] = v80[1];
        char v81 = 1;
        goto LABEL_180;
      case 2u:
        unsigned int v47 = a2[v6];
        unsigned int v48 = v47 - 2;
        if (v47 >= 2)
        {
          if (v6 <= 3) {
            uint64_t v49 = v6;
          }
          else {
            uint64_t v49 = 4;
          }
          switch(v49)
          {
            case 1:
              int v50 = *a2;
              goto LABEL_171;
            case 2:
              int v50 = *(unsigned __int16 *)a2;
              goto LABEL_171;
            case 3:
              int v50 = *(unsigned __int16 *)a2 | (a2[2] << 16);
              goto LABEL_171;
            case 4:
              int v50 = *(_DWORD *)a2;
LABEL_171:
              int v82 = (v50 | (v48 << (8 * v6))) + 2;
              unsigned int v47 = v50 + 2;
              if (v6 < 4) {
                unsigned int v47 = v82;
              }
              break;
            default:
              break;
          }
        }
        BOOL v83 = v47 == 1;
        if (v47 == 1) {
          uint64_t v84 = v9;
        }
        else {
          uint64_t v84 = v5;
        }
        if (v47 == 1) {
          uint64_t v85 = v8;
        }
        else {
          uint64_t v85 = AssociatedTypeWitness;
        }
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v84 + 16))(a1, a2, v85);
        a1[v6] = v83;
        uint64_t v86 = (void *)((unint64_t)&a1[v10 + 7] & 0xFFFFFFFFFFFFFFF8);
        uint64_t v87 = (void *)((unint64_t)&a2[v10 + 7] & 0xFFFFFFFFFFFFFFF8);
        *uint64_t v86 = *v87;
        v86[1] = v87[1];
        char v81 = 2;
LABEL_180:
        a1[v11] = v81;
        swift_bridgeObjectRetain();
        return a1;
      case 3u:
        unsigned int v51 = a2[v6];
        unsigned int v52 = v51 - 2;
        if (v51 >= 2)
        {
          if (v6 <= 3) {
            uint64_t v53 = v6;
          }
          else {
            uint64_t v53 = 4;
          }
          switch(v53)
          {
            case 1:
              int v54 = *a2;
              goto LABEL_184;
            case 2:
              int v54 = *(unsigned __int16 *)a2;
              goto LABEL_184;
            case 3:
              int v54 = *(unsigned __int16 *)a2 | (a2[2] << 16);
              goto LABEL_184;
            case 4:
              int v54 = *(_DWORD *)a2;
LABEL_184:
              int v88 = (v54 | (v52 << (8 * v6))) + 2;
              unsigned int v51 = v54 + 2;
              if (v6 < 4) {
                unsigned int v51 = v88;
              }
              break;
            default:
              break;
          }
        }
        BOOL v89 = v51 == 1;
        if (v51 == 1) {
          uint64_t v90 = v9;
        }
        else {
          uint64_t v90 = v5;
        }
        if (v51 == 1) {
          uint64_t v91 = v8;
        }
        else {
          uint64_t v91 = AssociatedTypeWitness;
        }
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v90 + 16))(a1, a2, v91);
        a1[v6] = v89;
        char v92 = 3;
        goto LABEL_241;
      case 4u:
        unsigned int v55 = a2[v6];
        unsigned int v56 = v55 - 2;
        if (v55 >= 2)
        {
          if (v6 <= 3) {
            uint64_t v57 = v6;
          }
          else {
            uint64_t v57 = 4;
          }
          switch(v57)
          {
            case 1:
              int v58 = *a2;
              goto LABEL_196;
            case 2:
              int v58 = *(unsigned __int16 *)a2;
              goto LABEL_196;
            case 3:
              int v58 = *(unsigned __int16 *)a2 | (a2[2] << 16);
              goto LABEL_196;
            case 4:
              int v58 = *(_DWORD *)a2;
LABEL_196:
              int v93 = (v58 | (v56 << (8 * v6))) + 2;
              unsigned int v55 = v58 + 2;
              if (v6 < 4) {
                unsigned int v55 = v93;
              }
              break;
            default:
              break;
          }
        }
        BOOL v94 = v55 == 1;
        if (v55 == 1) {
          uint64_t v95 = v9;
        }
        else {
          uint64_t v95 = v5;
        }
        if (v55 == 1) {
          uint64_t v96 = v8;
        }
        else {
          uint64_t v96 = AssociatedTypeWitness;
        }
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v95 + 16))(a1, a2, v96);
        a1[v6] = v94;
        char v92 = 4;
        goto LABEL_241;
      case 5u:
        unsigned int v59 = a2[v6];
        unsigned int v60 = v59 - 2;
        if (v59 >= 2)
        {
          if (v6 <= 3) {
            uint64_t v61 = v6;
          }
          else {
            uint64_t v61 = 4;
          }
          switch(v61)
          {
            case 1:
              int v62 = *a2;
              goto LABEL_208;
            case 2:
              int v62 = *(unsigned __int16 *)a2;
              goto LABEL_208;
            case 3:
              int v62 = *(unsigned __int16 *)a2 | (a2[2] << 16);
              goto LABEL_208;
            case 4:
              int v62 = *(_DWORD *)a2;
LABEL_208:
              int v97 = (v62 | (v60 << (8 * v6))) + 2;
              unsigned int v59 = v62 + 2;
              if (v6 < 4) {
                unsigned int v59 = v97;
              }
              break;
            default:
              break;
          }
        }
        BOOL v98 = v59 == 1;
        if (v59 == 1) {
          uint64_t v99 = v9;
        }
        else {
          uint64_t v99 = v5;
        }
        if (v59 == 1) {
          uint64_t v100 = v8;
        }
        else {
          uint64_t v100 = AssociatedTypeWitness;
        }
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v99 + 16))(a1, a2, v100);
        a1[v6] = v98;
        char v92 = 5;
        goto LABEL_241;
      case 6u:
        unsigned int v63 = a2[v6];
        unsigned int v64 = v63 - 2;
        if (v63 >= 2)
        {
          if (v6 <= 3) {
            uint64_t v65 = v6;
          }
          else {
            uint64_t v65 = 4;
          }
          switch(v65)
          {
            case 1:
              int v66 = *a2;
              goto LABEL_220;
            case 2:
              int v66 = *(unsigned __int16 *)a2;
              goto LABEL_220;
            case 3:
              int v66 = *(unsigned __int16 *)a2 | (a2[2] << 16);
              goto LABEL_220;
            case 4:
              int v66 = *(_DWORD *)a2;
LABEL_220:
              int v101 = (v66 | (v64 << (8 * v6))) + 2;
              unsigned int v63 = v66 + 2;
              if (v6 < 4) {
                unsigned int v63 = v101;
              }
              break;
            default:
              break;
          }
        }
        BOOL v102 = v63 == 1;
        if (v63 == 1) {
          uint64_t v103 = v9;
        }
        else {
          uint64_t v103 = v5;
        }
        if (v63 == 1) {
          uint64_t v104 = v8;
        }
        else {
          uint64_t v104 = AssociatedTypeWitness;
        }
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v103 + 16))(a1, a2, v104);
        a1[v6] = v102;
        char v92 = 6;
        goto LABEL_241;
      case 7u:
        unsigned int v67 = a2[v6];
        unsigned int v68 = v67 - 2;
        if (v67 >= 2)
        {
          if (v6 <= 3) {
            uint64_t v69 = v6;
          }
          else {
            uint64_t v69 = 4;
          }
          switch(v69)
          {
            case 1:
              int v70 = *a2;
              goto LABEL_232;
            case 2:
              int v70 = *(unsigned __int16 *)a2;
              goto LABEL_232;
            case 3:
              int v70 = *(unsigned __int16 *)a2 | (a2[2] << 16);
              goto LABEL_232;
            case 4:
              int v70 = *(_DWORD *)a2;
LABEL_232:
              int v105 = (v70 | (v68 << (8 * v6))) + 2;
              unsigned int v67 = v70 + 2;
              if (v6 < 4) {
                unsigned int v67 = v105;
              }
              break;
            default:
              break;
          }
        }
        BOOL v106 = v67 == 1;
        if (v67 == 1) {
          uint64_t v107 = v9;
        }
        else {
          uint64_t v107 = v5;
        }
        if (v67 == 1) {
          uint64_t v108 = v8;
        }
        else {
          uint64_t v108 = AssociatedTypeWitness;
        }
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v107 + 16))(a1, a2, v108);
        a1[v6] = v106;
        char v92 = 7;
LABEL_241:
        a1[v11] = v92;
        break;
      default:
        memcpy(a1, a2, v11 + 1);
        break;
    }
  }
  return a1;
}

unsigned char *sub_1001DAE84(unsigned char *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  if (*(void *)(v8 + 64) <= v6) {
    unint64_t v9 = v6;
  }
  else {
    unint64_t v9 = *(void *)(*(void *)(v7 - 8) + 64);
  }
  unint64_t v10 = v9 + 1;
  if ((v9 & 0xFFFFFFFFFFFFFFF8) + 24 <= v9 + 1) {
    unint64_t v11 = v9 + 1;
  }
  else {
    unint64_t v11 = (v9 & 0xFFFFFFFFFFFFFFF8) + 24;
  }
  unsigned int v12 = a2[v11];
  unsigned int v13 = v12 - 8;
  if (v12 >= 8)
  {
    if (v11 <= 3) {
      uint64_t v14 = v11;
    }
    else {
      uint64_t v14 = 4;
    }
    switch(v14)
    {
      case 1:
        int v15 = *a2;
        goto LABEL_16;
      case 2:
        int v15 = *(unsigned __int16 *)a2;
        goto LABEL_16;
      case 3:
        int v15 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_16;
      case 4:
        int v15 = *(_DWORD *)a2;
LABEL_16:
        int v16 = (v15 | (v13 << (8 * v11))) + 8;
        unsigned int v12 = v15 + 8;
        if (v11 < 4) {
          unsigned int v12 = v16;
        }
        break;
      default:
        break;
    }
  }
  switch(v12)
  {
    case 0u:
      unsigned int v17 = a2[v9];
      unsigned int v18 = v17 - 2;
      if (v17 >= 2)
      {
        if (v9 <= 3) {
          uint64_t v19 = v9;
        }
        else {
          uint64_t v19 = 4;
        }
        switch(v19)
        {
          case 1:
            int v20 = *a2;
            goto LABEL_71;
          case 2:
            int v20 = *(unsigned __int16 *)a2;
            goto LABEL_71;
          case 3:
            int v20 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_71;
          case 4:
            int v20 = *(_DWORD *)a2;
LABEL_71:
            int v49 = (v20 | (v18 << (8 * v9))) + 2;
            unsigned int v17 = v20 + 2;
            if (v9 < 4) {
              unsigned int v17 = v49;
            }
            break;
          default:
            break;
        }
      }
      BOOL v50 = v17 == 1;
      if (v17 == 1)
      {
        uint64_t v51 = v7;
      }
      else
      {
        uint64_t v8 = v5;
        uint64_t v51 = AssociatedTypeWitness;
      }
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v8 + 32))(a1, a2, v51);
      a1[v9] = v50;
      a1[v11] = 0;
      return a1;
    case 1u:
      unsigned int v21 = a2[v9];
      unsigned int v22 = v21 - 2;
      if (v21 >= 2)
      {
        if (v9 <= 3) {
          uint64_t v23 = v9;
        }
        else {
          uint64_t v23 = 4;
        }
        switch(v23)
        {
          case 1:
            int v24 = *a2;
            goto LABEL_80;
          case 2:
            int v24 = *(unsigned __int16 *)a2;
            goto LABEL_80;
          case 3:
            int v24 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_80;
          case 4:
            int v24 = *(_DWORD *)a2;
LABEL_80:
            int v52 = (v24 | (v22 << (8 * v9))) + 2;
            unsigned int v21 = v24 + 2;
            if (v9 < 4) {
              unsigned int v21 = v52;
            }
            break;
          default:
            break;
        }
      }
      BOOL v53 = v21 == 1;
      if (v21 == 1)
      {
        uint64_t v54 = v7;
      }
      else
      {
        uint64_t v8 = v5;
        uint64_t v54 = AssociatedTypeWitness;
      }
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v8 + 32))(a1, a2, v54);
      a1[v9] = v53;
      *(_OWORD *)((unint64_t)&a1[v10 + 7] & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((unint64_t)&a2[v10 + 7] & 0xFFFFFFFFFFFFFFF8);
      char v55 = 1;
      goto LABEL_140;
    case 2u:
      unsigned int v25 = a2[v9];
      unsigned int v26 = v25 - 2;
      if (v25 >= 2)
      {
        if (v9 <= 3) {
          uint64_t v27 = v9;
        }
        else {
          uint64_t v27 = 4;
        }
        switch(v27)
        {
          case 1:
            int v28 = *a2;
            goto LABEL_89;
          case 2:
            int v28 = *(unsigned __int16 *)a2;
            goto LABEL_89;
          case 3:
            int v28 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_89;
          case 4:
            int v28 = *(_DWORD *)a2;
LABEL_89:
            int v56 = (v28 | (v26 << (8 * v9))) + 2;
            unsigned int v25 = v28 + 2;
            if (v9 < 4) {
              unsigned int v25 = v56;
            }
            break;
          default:
            break;
        }
      }
      BOOL v57 = v25 == 1;
      if (v25 == 1)
      {
        uint64_t v58 = v7;
      }
      else
      {
        uint64_t v8 = v5;
        uint64_t v58 = AssociatedTypeWitness;
      }
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v8 + 32))(a1, a2, v58);
      a1[v9] = v57;
      *(_OWORD *)((unint64_t)&a1[v10 + 7] & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((unint64_t)&a2[v10 + 7] & 0xFFFFFFFFFFFFFFF8);
      char v55 = 2;
      goto LABEL_140;
    case 3u:
      unsigned int v29 = a2[v9];
      unsigned int v30 = v29 - 2;
      if (v29 >= 2)
      {
        if (v9 <= 3) {
          uint64_t v31 = v9;
        }
        else {
          uint64_t v31 = 4;
        }
        switch(v31)
        {
          case 1:
            int v32 = *a2;
            goto LABEL_98;
          case 2:
            int v32 = *(unsigned __int16 *)a2;
            goto LABEL_98;
          case 3:
            int v32 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_98;
          case 4:
            int v32 = *(_DWORD *)a2;
LABEL_98:
            int v59 = (v32 | (v30 << (8 * v9))) + 2;
            unsigned int v29 = v32 + 2;
            if (v9 < 4) {
              unsigned int v29 = v59;
            }
            break;
          default:
            break;
        }
      }
      BOOL v60 = v29 == 1;
      if (v29 == 1)
      {
        uint64_t v61 = v7;
      }
      else
      {
        uint64_t v8 = v5;
        uint64_t v61 = AssociatedTypeWitness;
      }
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v8 + 32))(a1, a2, v61);
      a1[v9] = v60;
      char v55 = 3;
      goto LABEL_140;
    case 4u:
      unsigned int v33 = a2[v9];
      unsigned int v34 = v33 - 2;
      if (v33 >= 2)
      {
        if (v9 <= 3) {
          uint64_t v35 = v9;
        }
        else {
          uint64_t v35 = 4;
        }
        switch(v35)
        {
          case 1:
            int v36 = *a2;
            goto LABEL_107;
          case 2:
            int v36 = *(unsigned __int16 *)a2;
            goto LABEL_107;
          case 3:
            int v36 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_107;
          case 4:
            int v36 = *(_DWORD *)a2;
LABEL_107:
            int v62 = (v36 | (v34 << (8 * v9))) + 2;
            unsigned int v33 = v36 + 2;
            if (v9 < 4) {
              unsigned int v33 = v62;
            }
            break;
          default:
            break;
        }
      }
      BOOL v63 = v33 == 1;
      if (v33 == 1)
      {
        uint64_t v64 = v7;
      }
      else
      {
        uint64_t v8 = v5;
        uint64_t v64 = AssociatedTypeWitness;
      }
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v8 + 32))(a1, a2, v64);
      a1[v9] = v63;
      char v55 = 4;
      goto LABEL_140;
    case 5u:
      unsigned int v37 = a2[v9];
      unsigned int v38 = v37 - 2;
      if (v37 >= 2)
      {
        if (v9 <= 3) {
          uint64_t v39 = v9;
        }
        else {
          uint64_t v39 = 4;
        }
        switch(v39)
        {
          case 1:
            int v40 = *a2;
            goto LABEL_116;
          case 2:
            int v40 = *(unsigned __int16 *)a2;
            goto LABEL_116;
          case 3:
            int v40 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_116;
          case 4:
            int v40 = *(_DWORD *)a2;
LABEL_116:
            int v65 = (v40 | (v38 << (8 * v9))) + 2;
            unsigned int v37 = v40 + 2;
            if (v9 < 4) {
              unsigned int v37 = v65;
            }
            break;
          default:
            break;
        }
      }
      BOOL v66 = v37 == 1;
      if (v37 == 1)
      {
        uint64_t v67 = v7;
      }
      else
      {
        uint64_t v8 = v5;
        uint64_t v67 = AssociatedTypeWitness;
      }
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v8 + 32))(a1, a2, v67);
      a1[v9] = v66;
      char v55 = 5;
      goto LABEL_140;
    case 6u:
      unsigned int v41 = a2[v9];
      unsigned int v42 = v41 - 2;
      if (v41 >= 2)
      {
        if (v9 <= 3) {
          uint64_t v43 = v9;
        }
        else {
          uint64_t v43 = 4;
        }
        switch(v43)
        {
          case 1:
            int v44 = *a2;
            goto LABEL_125;
          case 2:
            int v44 = *(unsigned __int16 *)a2;
            goto LABEL_125;
          case 3:
            int v44 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_125;
          case 4:
            int v44 = *(_DWORD *)a2;
LABEL_125:
            int v68 = (v44 | (v42 << (8 * v9))) + 2;
            unsigned int v41 = v44 + 2;
            if (v9 < 4) {
              unsigned int v41 = v68;
            }
            break;
          default:
            break;
        }
      }
      BOOL v69 = v41 == 1;
      if (v41 == 1)
      {
        uint64_t v70 = v7;
      }
      else
      {
        uint64_t v8 = v5;
        uint64_t v70 = AssociatedTypeWitness;
      }
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v8 + 32))(a1, a2, v70);
      a1[v9] = v69;
      char v55 = 6;
      goto LABEL_140;
    case 7u:
      unsigned int v45 = a2[v9];
      unsigned int v46 = v45 - 2;
      if (v45 >= 2)
      {
        if (v9 <= 3) {
          uint64_t v47 = v9;
        }
        else {
          uint64_t v47 = 4;
        }
        switch(v47)
        {
          case 1:
            int v48 = *a2;
            goto LABEL_134;
          case 2:
            int v48 = *(unsigned __int16 *)a2;
            goto LABEL_134;
          case 3:
            int v48 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_134;
          case 4:
            int v48 = *(_DWORD *)a2;
LABEL_134:
            int v71 = (v48 | (v46 << (8 * v9))) + 2;
            unsigned int v45 = v48 + 2;
            if (v9 < 4) {
              unsigned int v45 = v71;
            }
            break;
          default:
            break;
        }
      }
      BOOL v72 = v45 == 1;
      if (v45 == 1)
      {
        uint64_t v73 = v7;
      }
      else
      {
        uint64_t v8 = v5;
        uint64_t v73 = AssociatedTypeWitness;
      }
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v8 + 32))(a1, a2, v73);
      a1[v9] = v72;
      char v55 = 7;
LABEL_140:
      a1[v11] = v55;
      break;
    default:
      memcpy(a1, a2, v11 + 1);
      break;
  }
  return a1;
}

unsigned __int8 *sub_1001DB6DC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1 != a2)
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
    unint64_t v6 = *(void *)(v5 + 64);
    uint64_t v7 = swift_getAssociatedTypeWitness();
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)(v7 - 8);
    if (*(void *)(v9 + 64) > v6) {
      unint64_t v6 = *(void *)(*(void *)(v7 - 8) + 64);
    }
    unint64_t v10 = v6 + 1;
    if ((v6 & 0xFFFFFFFFFFFFFFF8) + 24 <= v6 + 1) {
      unint64_t v11 = v6 + 1;
    }
    else {
      unint64_t v11 = (v6 & 0xFFFFFFFFFFFFFFF8) + 24;
    }
    unsigned int v12 = a1[v11];
    unsigned int v13 = v12 - 8;
    if (v12 >= 8)
    {
      if (v11 <= 3) {
        uint64_t v14 = v11;
      }
      else {
        uint64_t v14 = 4;
      }
      switch(v14)
      {
        case 1:
          int v15 = *a1;
          goto LABEL_16;
        case 2:
          int v15 = *(unsigned __int16 *)a1;
          goto LABEL_16;
        case 3:
          int v15 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_16;
        case 4:
          int v15 = *(_DWORD *)a1;
LABEL_16:
          int v16 = (v15 | (v13 << (8 * v11))) + 8;
          unsigned int v12 = v15 + 8;
          if (v11 < 4) {
            unsigned int v12 = v16;
          }
          break;
        default:
          break;
      }
    }
    switch(v12)
    {
      case 0u:
        unsigned int v17 = a1[v6];
        unsigned int v18 = v17 - 2;
        if (v17 >= 2)
        {
          if (v6 <= 3) {
            uint64_t v19 = v6;
          }
          else {
            uint64_t v19 = 4;
          }
          switch(v19)
          {
            case 1:
              goto LABEL_60;
            case 2:
              goto LABEL_62;
            case 3:
              goto LABEL_64;
            case 4:
              goto LABEL_68;
            default:
              goto LABEL_66;
          }
        }
        goto LABEL_66;
      case 1u:
        unsigned int v20 = a1[v6];
        unsigned int v21 = v20 - 2;
        if (v20 >= 2)
        {
          if (v6 <= 3) {
            uint64_t v22 = v6;
          }
          else {
            uint64_t v22 = 4;
          }
          switch(v22)
          {
            case 1:
              goto LABEL_34;
            case 2:
              goto LABEL_71;
            case 3:
              goto LABEL_72;
            case 4:
              goto LABEL_73;
            default:
              goto LABEL_76;
          }
        }
        goto LABEL_76;
      case 2u:
        unsigned int v20 = a1[v6];
        unsigned int v21 = v20 - 2;
        if (v20 >= 2)
        {
          if (v6 <= 3) {
            uint64_t v23 = v6;
          }
          else {
            uint64_t v23 = 4;
          }
          switch(v23)
          {
            case 1:
LABEL_34:
              int v24 = *a1;
              goto LABEL_74;
            case 2:
LABEL_71:
              int v24 = *(unsigned __int16 *)a1;
              goto LABEL_74;
            case 3:
LABEL_72:
              int v24 = *(unsigned __int16 *)a1 | (a1[2] << 16);
              goto LABEL_74;
            case 4:
LABEL_73:
              int v24 = *(_DWORD *)a1;
LABEL_74:
              int v31 = (v24 | (v21 << (8 * v6))) + 2;
              unsigned int v20 = v24 + 2;
              if (v6 < 4) {
                unsigned int v20 = v31;
              }
              break;
            default:
              break;
          }
        }
LABEL_76:
        if (v20 == 1) {
          uint64_t v32 = *(void *)(v7 - 8);
        }
        else {
          uint64_t v32 = v5;
        }
        if (v20 == 1) {
          uint64_t v33 = v7;
        }
        else {
          uint64_t v33 = AssociatedTypeWitness;
        }
        (*(void (**)(unsigned __int8 *, uint64_t))(v32 + 8))(a1, v33);
        swift_bridgeObjectRelease();
        break;
      case 3u:
        unsigned int v17 = a1[v6];
        unsigned int v18 = v17 - 2;
        if (v17 >= 2)
        {
          if (v6 <= 3) {
            uint64_t v25 = v6;
          }
          else {
            uint64_t v25 = 4;
          }
          switch(v25)
          {
            case 1:
              goto LABEL_60;
            case 2:
              goto LABEL_62;
            case 3:
              goto LABEL_64;
            case 4:
              goto LABEL_68;
            default:
              goto LABEL_66;
          }
        }
        goto LABEL_66;
      case 4u:
        unsigned int v17 = a1[v6];
        unsigned int v18 = v17 - 2;
        if (v17 >= 2)
        {
          if (v6 <= 3) {
            uint64_t v26 = v6;
          }
          else {
            uint64_t v26 = 4;
          }
          switch(v26)
          {
            case 1:
              goto LABEL_60;
            case 2:
              goto LABEL_62;
            case 3:
              goto LABEL_64;
            case 4:
              goto LABEL_68;
            default:
              goto LABEL_66;
          }
        }
        goto LABEL_66;
      case 5u:
        unsigned int v17 = a1[v6];
        unsigned int v18 = v17 - 2;
        if (v17 >= 2)
        {
          if (v6 <= 3) {
            uint64_t v27 = v6;
          }
          else {
            uint64_t v27 = 4;
          }
          switch(v27)
          {
            case 1:
              goto LABEL_60;
            case 2:
              goto LABEL_62;
            case 3:
              goto LABEL_64;
            case 4:
              goto LABEL_68;
            default:
              goto LABEL_66;
          }
        }
        goto LABEL_66;
      case 6u:
        unsigned int v17 = a1[v6];
        unsigned int v18 = v17 - 2;
        if (v17 >= 2)
        {
          if (v6 <= 3) {
            uint64_t v28 = v6;
          }
          else {
            uint64_t v28 = 4;
          }
          switch(v28)
          {
            case 1:
              goto LABEL_60;
            case 2:
              goto LABEL_62;
            case 3:
              goto LABEL_64;
            case 4:
              goto LABEL_68;
            default:
              goto LABEL_66;
          }
        }
        goto LABEL_66;
      case 7u:
        unsigned int v17 = a1[v6];
        unsigned int v18 = v17 - 2;
        if (v17 >= 2)
        {
          if (v6 <= 3) {
            uint64_t v29 = v6;
          }
          else {
            uint64_t v29 = 4;
          }
          switch(v29)
          {
            case 1:
LABEL_60:
              int v30 = *a1;
              if (v6 >= 4) {
                goto LABEL_69;
              }
              goto LABEL_65;
            case 2:
LABEL_62:
              int v30 = *(unsigned __int16 *)a1;
              if (v6 >= 4) {
                goto LABEL_69;
              }
              goto LABEL_65;
            case 3:
LABEL_64:
              int v30 = *(unsigned __int16 *)a1 | (a1[2] << 16);
              if (v6 < 4) {
                goto LABEL_65;
              }
              goto LABEL_69;
            case 4:
LABEL_68:
              int v30 = *(_DWORD *)a1;
              if (v6 < 4)
              {
LABEL_65:
                unsigned int v17 = (v30 | (v18 << (8 * v6))) + 2;
                break;
              }
LABEL_69:
              if (v30 != -1) {
                goto LABEL_70;
              }
              goto LABEL_67;
            default:
              break;
          }
        }
LABEL_66:
        if (v17 == 1) {
LABEL_67:
        }
          (*(void (**)(unsigned __int8 *, uint64_t))(v9 + 8))(a1, v7);
        else {
LABEL_70:
        }
          (*(void (**)(unsigned __int8 *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
        break;
      default:
        break;
    }
    unsigned int v34 = a2[v11];
    unsigned int v35 = v34 - 8;
    if (v34 >= 8)
    {
      if (v11 <= 3) {
        uint64_t v36 = v11;
      }
      else {
        uint64_t v36 = 4;
      }
      switch(v36)
      {
        case 1:
          int v37 = *a2;
          goto LABEL_92;
        case 2:
          int v37 = *(unsigned __int16 *)a2;
          goto LABEL_92;
        case 3:
          int v37 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_92;
        case 4:
          int v37 = *(_DWORD *)a2;
LABEL_92:
          int v38 = (v37 | (v35 << (8 * v11))) + 8;
          unsigned int v34 = v37 + 8;
          if (v11 < 4) {
            unsigned int v34 = v38;
          }
          break;
        default:
          break;
      }
    }
    switch(v34)
    {
      case 0u:
        unsigned int v39 = a2[v6];
        unsigned int v40 = v39 - 2;
        if (v39 >= 2)
        {
          if (v6 <= 3) {
            uint64_t v41 = v6;
          }
          else {
            uint64_t v41 = 4;
          }
          switch(v41)
          {
            case 1:
              int v42 = *a2;
              goto LABEL_147;
            case 2:
              int v42 = *(unsigned __int16 *)a2;
              goto LABEL_147;
            case 3:
              int v42 = *(unsigned __int16 *)a2 | (a2[2] << 16);
              goto LABEL_147;
            case 4:
              int v42 = *(_DWORD *)a2;
LABEL_147:
              int v71 = (v42 | (v40 << (8 * v6))) + 2;
              unsigned int v39 = v42 + 2;
              if (v6 < 4) {
                unsigned int v39 = v71;
              }
              break;
            default:
              break;
          }
        }
        BOOL v72 = v39 == 1;
        if (v39 == 1) {
          uint64_t v73 = v9;
        }
        else {
          uint64_t v73 = v5;
        }
        if (v39 == 1) {
          uint64_t v74 = v8;
        }
        else {
          uint64_t v74 = AssociatedTypeWitness;
        }
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v73 + 32))(a1, a2, v74);
        a1[v6] = v72;
        a1[v11] = 0;
        return a1;
      case 1u:
        unsigned int v43 = a2[v6];
        unsigned int v44 = v43 - 2;
        if (v43 >= 2)
        {
          if (v6 <= 3) {
            uint64_t v45 = v6;
          }
          else {
            uint64_t v45 = 4;
          }
          switch(v45)
          {
            case 1:
              int v46 = *a2;
              goto LABEL_159;
            case 2:
              int v46 = *(unsigned __int16 *)a2;
              goto LABEL_159;
            case 3:
              int v46 = *(unsigned __int16 *)a2 | (a2[2] << 16);
              goto LABEL_159;
            case 4:
              int v46 = *(_DWORD *)a2;
LABEL_159:
              int v75 = (v46 | (v44 << (8 * v6))) + 2;
              unsigned int v43 = v46 + 2;
              if (v6 < 4) {
                unsigned int v43 = v75;
              }
              break;
            default:
              break;
          }
        }
        BOOL v76 = v43 == 1;
        if (v43 == 1) {
          uint64_t v77 = v9;
        }
        else {
          uint64_t v77 = v5;
        }
        if (v43 == 1) {
          uint64_t v78 = v8;
        }
        else {
          uint64_t v78 = AssociatedTypeWitness;
        }
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v77 + 32))(a1, a2, v78);
        a1[v6] = v76;
        *(_OWORD *)((unint64_t)&a1[v10 + 7] & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((unint64_t)&a2[v10 + 7] & 0xFFFFFFFFFFFFFFF8);
        char v79 = 1;
        goto LABEL_240;
      case 2u:
        unsigned int v47 = a2[v6];
        unsigned int v48 = v47 - 2;
        if (v47 >= 2)
        {
          if (v6 <= 3) {
            uint64_t v49 = v6;
          }
          else {
            uint64_t v49 = 4;
          }
          switch(v49)
          {
            case 1:
              int v50 = *a2;
              goto LABEL_171;
            case 2:
              int v50 = *(unsigned __int16 *)a2;
              goto LABEL_171;
            case 3:
              int v50 = *(unsigned __int16 *)a2 | (a2[2] << 16);
              goto LABEL_171;
            case 4:
              int v50 = *(_DWORD *)a2;
LABEL_171:
              int v80 = (v50 | (v48 << (8 * v6))) + 2;
              unsigned int v47 = v50 + 2;
              if (v6 < 4) {
                unsigned int v47 = v80;
              }
              break;
            default:
              break;
          }
        }
        BOOL v81 = v47 == 1;
        if (v47 == 1) {
          uint64_t v82 = v9;
        }
        else {
          uint64_t v82 = v5;
        }
        if (v47 == 1) {
          uint64_t v83 = v8;
        }
        else {
          uint64_t v83 = AssociatedTypeWitness;
        }
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v82 + 32))(a1, a2, v83);
        a1[v6] = v81;
        *(_OWORD *)((unint64_t)&a1[v10 + 7] & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((unint64_t)&a2[v10 + 7] & 0xFFFFFFFFFFFFFFF8);
        char v79 = 2;
        goto LABEL_240;
      case 3u:
        unsigned int v51 = a2[v6];
        unsigned int v52 = v51 - 2;
        if (v51 >= 2)
        {
          if (v6 <= 3) {
            uint64_t v53 = v6;
          }
          else {
            uint64_t v53 = 4;
          }
          switch(v53)
          {
            case 1:
              int v54 = *a2;
              goto LABEL_183;
            case 2:
              int v54 = *(unsigned __int16 *)a2;
              goto LABEL_183;
            case 3:
              int v54 = *(unsigned __int16 *)a2 | (a2[2] << 16);
              goto LABEL_183;
            case 4:
              int v54 = *(_DWORD *)a2;
LABEL_183:
              int v84 = (v54 | (v52 << (8 * v6))) + 2;
              unsigned int v51 = v54 + 2;
              if (v6 < 4) {
                unsigned int v51 = v84;
              }
              break;
            default:
              break;
          }
        }
        BOOL v85 = v51 == 1;
        if (v51 == 1) {
          uint64_t v86 = v9;
        }
        else {
          uint64_t v86 = v5;
        }
        if (v51 == 1) {
          uint64_t v87 = v8;
        }
        else {
          uint64_t v87 = AssociatedTypeWitness;
        }
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v86 + 32))(a1, a2, v87);
        a1[v6] = v85;
        char v79 = 3;
        goto LABEL_240;
      case 4u:
        unsigned int v55 = a2[v6];
        unsigned int v56 = v55 - 2;
        if (v55 >= 2)
        {
          if (v6 <= 3) {
            uint64_t v57 = v6;
          }
          else {
            uint64_t v57 = 4;
          }
          switch(v57)
          {
            case 1:
              int v58 = *a2;
              goto LABEL_195;
            case 2:
              int v58 = *(unsigned __int16 *)a2;
              goto LABEL_195;
            case 3:
              int v58 = *(unsigned __int16 *)a2 | (a2[2] << 16);
              goto LABEL_195;
            case 4:
              int v58 = *(_DWORD *)a2;
LABEL_195:
              int v88 = (v58 | (v56 << (8 * v6))) + 2;
              unsigned int v55 = v58 + 2;
              if (v6 < 4) {
                unsigned int v55 = v88;
              }
              break;
            default:
              break;
          }
        }
        BOOL v89 = v55 == 1;
        if (v55 == 1) {
          uint64_t v90 = v9;
        }
        else {
          uint64_t v90 = v5;
        }
        if (v55 == 1) {
          uint64_t v91 = v8;
        }
        else {
          uint64_t v91 = AssociatedTypeWitness;
        }
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v90 + 32))(a1, a2, v91);
        a1[v6] = v89;
        char v79 = 4;
        goto LABEL_240;
      case 5u:
        unsigned int v59 = a2[v6];
        unsigned int v60 = v59 - 2;
        if (v59 >= 2)
        {
          if (v6 <= 3) {
            uint64_t v61 = v6;
          }
          else {
            uint64_t v61 = 4;
          }
          switch(v61)
          {
            case 1:
              int v62 = *a2;
              goto LABEL_207;
            case 2:
              int v62 = *(unsigned __int16 *)a2;
              goto LABEL_207;
            case 3:
              int v62 = *(unsigned __int16 *)a2 | (a2[2] << 16);
              goto LABEL_207;
            case 4:
              int v62 = *(_DWORD *)a2;
LABEL_207:
              int v92 = (v62 | (v60 << (8 * v6))) + 2;
              unsigned int v59 = v62 + 2;
              if (v6 < 4) {
                unsigned int v59 = v92;
              }
              break;
            default:
              break;
          }
        }
        BOOL v93 = v59 == 1;
        if (v59 == 1) {
          uint64_t v94 = v9;
        }
        else {
          uint64_t v94 = v5;
        }
        if (v59 == 1) {
          uint64_t v95 = v8;
        }
        else {
          uint64_t v95 = AssociatedTypeWitness;
        }
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v94 + 32))(a1, a2, v95);
        a1[v6] = v93;
        char v79 = 5;
        goto LABEL_240;
      case 6u:
        unsigned int v63 = a2[v6];
        unsigned int v64 = v63 - 2;
        if (v63 >= 2)
        {
          if (v6 <= 3) {
            uint64_t v65 = v6;
          }
          else {
            uint64_t v65 = 4;
          }
          switch(v65)
          {
            case 1:
              int v66 = *a2;
              goto LABEL_219;
            case 2:
              int v66 = *(unsigned __int16 *)a2;
              goto LABEL_219;
            case 3:
              int v66 = *(unsigned __int16 *)a2 | (a2[2] << 16);
              goto LABEL_219;
            case 4:
              int v66 = *(_DWORD *)a2;
LABEL_219:
              int v96 = (v66 | (v64 << (8 * v6))) + 2;
              unsigned int v63 = v66 + 2;
              if (v6 < 4) {
                unsigned int v63 = v96;
              }
              break;
            default:
              break;
          }
        }
        BOOL v97 = v63 == 1;
        if (v63 == 1) {
          uint64_t v98 = v9;
        }
        else {
          uint64_t v98 = v5;
        }
        if (v63 == 1) {
          uint64_t v99 = v8;
        }
        else {
          uint64_t v99 = AssociatedTypeWitness;
        }
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v98 + 32))(a1, a2, v99);
        a1[v6] = v97;
        char v79 = 6;
        goto LABEL_240;
      case 7u:
        unsigned int v67 = a2[v6];
        unsigned int v68 = v67 - 2;
        if (v67 >= 2)
        {
          if (v6 <= 3) {
            uint64_t v69 = v6;
          }
          else {
            uint64_t v69 = 4;
          }
          switch(v69)
          {
            case 1:
              int v70 = *a2;
              goto LABEL_231;
            case 2:
              int v70 = *(unsigned __int16 *)a2;
              goto LABEL_231;
            case 3:
              int v70 = *(unsigned __int16 *)a2 | (a2[2] << 16);
              goto LABEL_231;
            case 4:
              int v70 = *(_DWORD *)a2;
LABEL_231:
              int v100 = (v70 | (v68 << (8 * v6))) + 2;
              unsigned int v67 = v70 + 2;
              if (v6 < 4) {
                unsigned int v67 = v100;
              }
              break;
            default:
              break;
          }
        }
        BOOL v101 = v67 == 1;
        if (v67 == 1) {
          uint64_t v102 = v9;
        }
        else {
          uint64_t v102 = v5;
        }
        if (v67 == 1) {
          uint64_t v103 = v8;
        }
        else {
          uint64_t v103 = AssociatedTypeWitness;
        }
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v102 + 32))(a1, a2, v103);
        a1[v6] = v101;
        char v79 = 7;
LABEL_240:
        a1[v11] = v79;
        break;
      default:
        memcpy(a1, a2, v11 + 1);
        break;
    }
  }
  return a1;
}

uint64_t sub_1001DC38C(unsigned __int16 *a1, unsigned int a2)
{
  unint64_t v4 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  unint64_t v5 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v5 <= v4) {
    unint64_t v5 = v4;
  }
  if ((v5 & 0xFFFFFFFFFFFFFFF8) + 24 <= v5 + 1) {
    unint64_t v6 = v5 + 1;
  }
  else {
    unint64_t v6 = (v5 & 0xFFFFFFFFFFFFFFF8) + 24;
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF8) {
    goto LABEL_25;
  }
  unint64_t v7 = v6 + 1;
  char v8 = 8 * (v6 + 1);
  if ((v6 + 1) <= 3)
  {
    unsigned int v11 = ((a2 + ~(-1 << v8) - 247) >> v8) + 1;
    if (HIWORD(v11))
    {
      int v9 = *(_DWORD *)((char *)a1 + v7);
      if (!v9) {
        goto LABEL_25;
      }
      goto LABEL_17;
    }
    if (v11 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v7);
      if (!*(unsigned __int16 *)((char *)a1 + v7)) {
        goto LABEL_25;
      }
      goto LABEL_17;
    }
    if (v11 < 2)
    {
LABEL_25:
      unsigned int v13 = *((unsigned __int8 *)a1 + v6);
      if (v13 >= 9) {
        return (v13 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v7);
  if (!*((unsigned char *)a1 + v7)) {
    goto LABEL_25;
  }
LABEL_17:
  int v12 = (v9 - 1) << v8;
  if (v7 > 3) {
    int v12 = 0;
  }
  if (v7)
  {
    if (v7 > 3) {
      LODWORD(v7) = 4;
    }
    switch((int)v7)
    {
      case 2:
        LODWORD(v7) = *a1;
        break;
      case 3:
        LODWORD(v7) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v7) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v7) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v7 | v12) + 248;
}

void sub_1001DC554(unsigned char *a1, unsigned int a2, unsigned int a3)
{
  unint64_t v6 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  unint64_t v7 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v7 <= v6) {
    unint64_t v7 = v6;
  }
  if ((v7 & 0xFFFFFFFFFFFFFFF8) + 24 <= v7 + 1) {
    unint64_t v8 = v7 + 1;
  }
  else {
    unint64_t v8 = (v7 & 0xFFFFFFFFFFFFFFF8) + 24;
  }
  size_t v9 = v8 + 1;
  if (a3 < 0xF8)
  {
    int v10 = 0;
  }
  else if (v9 <= 3)
  {
    unsigned int v13 = ((a3 + ~(-1 << (8 * v9)) - 247) >> (8 * v9)) + 1;
    if (HIWORD(v13))
    {
      int v10 = 4;
    }
    else if (v13 >= 0x100)
    {
      int v10 = 2;
    }
    else
    {
      int v10 = v13 > 1;
    }
  }
  else
  {
    int v10 = 1;
  }
  if (a2 > 0xF7)
  {
    unsigned int v11 = a2 - 248;
    if (v9 < 4)
    {
      int v12 = (v11 >> (8 * v9)) + 1;
      if (v8 != -1)
      {
        int v14 = v11 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if (v9 == 3)
        {
          *(_WORD *)a1 = v14;
          a1[2] = BYTE2(v14);
        }
        else if (v9 == 2)
        {
          *(_WORD *)a1 = v14;
        }
        else
        {
          *a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, v8 + 1);
      *(_DWORD *)a1 = v11;
      int v12 = 1;
    }
    switch(v10)
    {
      case 1:
        a1[v9] = v12;
        break;
      case 2:
        *(_WORD *)&a1[v9] = v12;
        break;
      case 3:
LABEL_37:
        __break(1u);
        JUMPOUT(0x1001DC790);
      case 4:
        *(_DWORD *)&a1[v9] = v12;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v10)
    {
      case 1:
        a1[v9] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_26;
      case 2:
        *(_WORD *)&a1[v9] = 0;
        goto LABEL_25;
      case 3:
        goto LABEL_37;
      case 4:
        *(_DWORD *)&a1[v9] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_26;
      default:
LABEL_25:
        if (a2) {
LABEL_26:
        }
          a1[v8] = -(char)a2;
        break;
    }
  }
}

uint64_t sub_1001DC7B8(unsigned __int8 *a1)
{
  unint64_t v2 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  unint64_t v3 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v3 <= v2) {
    unint64_t v3 = v2;
  }
  if ((v3 & 0xFFFFFFFFFFFFFFF8) + 24 <= v3 + 1) {
    unint64_t v4 = v3 + 1;
  }
  else {
    unint64_t v4 = (v3 & 0xFFFFFFFFFFFFFFF8) + 24;
  }
  uint64_t result = a1[v4];
  if (result >= 8)
  {
    if (v4 <= 3) {
      uint64_t v6 = v4;
    }
    else {
      uint64_t v6 = 4;
    }
    switch(v6)
    {
      case 1:
        int v7 = *a1;
        goto LABEL_15;
      case 2:
        int v7 = *(unsigned __int16 *)a1;
        goto LABEL_15;
      case 3:
        int v7 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_15;
      case 4:
        int v7 = *(_DWORD *)a1;
LABEL_15:
        unsigned int v8 = (v7 | ((result - 8) << (8 * v4))) + 8;
        unsigned int v9 = v7 + 8;
        if (v4 >= 4) {
          uint64_t result = v9;
        }
        else {
          uint64_t result = v8;
        }
        break;
      default:
        return result;
    }
  }
  return result;
}

void sub_1001DC8FC(unsigned char *a1, unsigned int a2)
{
  unint64_t v4 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  unint64_t v5 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v5 <= v4) {
    unint64_t v5 = v4;
  }
  if ((v5 & 0xFFFFFFFFFFFFFFF8) + 24 <= v5 + 1) {
    size_t v6 = v5 + 1;
  }
  else {
    size_t v6 = (v5 & 0xFFFFFFFFFFFFFFF8) + 24;
  }
  if (a2 > 7)
  {
    unsigned int v7 = a2 - 8;
    if (v6 < 4)
    {
      unsigned int v8 = v7 >> (8 * v6);
      int v9 = v7 & ~(-1 << (8 * v6));
      a1[v6] = v8 + 8;
      bzero(a1, v6);
      if (v6 == 3)
      {
        *(_WORD *)a1 = v9;
        a1[2] = BYTE2(v9);
      }
      else if (v6 == 2)
      {
        *(_WORD *)a1 = v9;
      }
      else
      {
        *a1 = v9;
      }
    }
    else
    {
      a1[v6] = 8;
      bzero(a1, v6);
      *(_DWORD *)a1 = v7;
    }
  }
  else
  {
    a1[v6] = a2;
  }
}

uint64_t sub_1001DCA44()
{
  return swift_initClassMetadata2();
}

uint64_t sub_1001DCA8C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 - 8);
  __chkstk_darwin(a1);
  unint64_t v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v2 + 16))(v4);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t result = 1;
  switch(EnumCaseMultiPayload)
  {
    case 1:
      uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
      int v10 = &v4[*(int *)(TupleTypeMetadata3 + 48)];
      unsigned int v11 = *(void (**)(char *, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8);
      v11(&v4[*(int *)(TupleTypeMetadata3 + 64)], AssociatedTypeWitness);
      v11(v10, AssociatedTypeWitness);
      v11(v4, AssociatedTypeWitness);
      goto LABEL_6;
    case 2:
      uint64_t v12 = swift_getAssociatedTypeWitness();
      uint64_t v13 = sub_10096C890();
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      (*(void (**)(char *, uint64_t))(*(void *)(v13 - 8) + 8))(&v4[*(int *)(TupleTypeMetadata2 + 48)], v13);
      (*(void (**)(char *, uint64_t))(*(void *)(v12 - 8) + 8))(v4, v12);
      goto LABEL_6;
    case 3:
    case 4:
    case 6:
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, a1);
LABEL_6:
      uint64_t result = 1;
      break;
    case 7:
      return result;
    default:
      uint64_t v7 = swift_getAssociatedTypeWitness();
      (*(void (**)(char *, uint64_t))(*(void *)(v7 - 8) + 8))(v4, v7);
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t sub_1001DCD70(char *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v208 = *(void (**)(char *, uint64_t))(TupleTypeMetadata2 - 8);
  __chkstk_darwin(TupleTypeMetadata2);
  uint64_t v213 = (char *)&v182 - v6;
  uint64_t v7 = *(void **)(a2 + 16);
  unsigned int v8 = *(char **)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v210 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v211 = AssociatedTypeWitness;
  uint64_t v10 = __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v193 = (char *)&v182 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v192 = (char *)&v182 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v185 = (char *)&v182 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v184 = (char *)&v182 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v194 = (char *)&v182 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v197 = (char *)&v182 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v189 = (char *)&v182 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v188 = (char *)&v182 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v191 = (char *)&v182 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v212 = (char *)&v182 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v196 = (char *)&v182 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v190 = (char *)&v182 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v195 = (char *)&v182 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  uint64_t v201 = (char *)&v182 - v37;
  uint64_t v38 = __chkstk_darwin(v36);
  uint64_t v200 = (char *)&v182 - v39;
  uint64_t v40 = *(void *)(a2 - 8);
  uint64_t v41 = __chkstk_darwin(v38);
  uint64_t v198 = (char *)&v182 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = __chkstk_darwin(v41);
  uint64_t v205 = (char *)&v182 - v44;
  uint64_t v45 = __chkstk_darwin(v43);
  unsigned int v47 = (char *)&v182 - v46;
  uint64_t v48 = __chkstk_darwin(v45);
  uint64_t v187 = (char *)&v182 - v49;
  uint64_t v50 = __chkstk_darwin(v48);
  uint64_t v202 = (char *)&v182 - v51;
  uint64_t v52 = __chkstk_darwin(v50);
  uint64_t v186 = (char *)&v182 - v53;
  uint64_t v54 = __chkstk_darwin(v52);
  unsigned int v203 = (char *)&v182 - v55;
  uint64_t v56 = __chkstk_darwin(v54);
  uint64_t v183 = (char *)&v182 - v57;
  uint64_t v58 = __chkstk_darwin(v56);
  uint64_t v204 = (char *)&v182 - v59;
  uint64_t v60 = __chkstk_darwin(v58);
  int v62 = (char *)&v182 - v61;
  uint64_t v63 = __chkstk_darwin(v60);
  unsigned int v199 = (char *)&v182 - v64;
  __chkstk_darwin(v63);
  int v66 = (char *)&v182 - v65;
  unsigned int v67 = a1;
  uint64_t v206 = v8;
  int v207 = v7;
  LOBYTE(a1) = sub_1001DE7AC(v3, a1, v7, v8);
  unsigned int v68 = *(void (**)(char *, uint64_t, uint64_t))(v40 + 16);
  v68(v66, v3, a2);
  uint64_t v209 = v40;
  if (a1)
  {
    char v69 = sub_1001DCA8C(a2);
    int v70 = *(void (**)(char *, uint64_t))(v40 + 8);
    v70(v66, a2);
    if (v69)
    {
LABEL_58:
      char v118 = 1;
      return v118 & 1;
    }
  }
  else
  {
    int v70 = *(void (**)(char *, uint64_t))(v40 + 8);
    v70(v66, a2);
  }
  int v71 = v213;
  BOOL v72 = &v213[*(int *)(TupleTypeMetadata2 + 48)];
  v68(v213, v3, a2);
  v68(v72, (uint64_t)v67, a2);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v74 = v212;
  switch(EnumCaseMultiPayload)
  {
    case 1:
      uint64_t v94 = v205;
      v68(v205, (uint64_t)v71, a2);
      uint64_t v77 = v211;
      TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
      uint64_t v96 = (uint64_t)&v94[*(int *)(TupleTypeMetadata3 + 48)];
      uint64_t v97 = *(int *)(TupleTypeMetadata3 + 64);
      uint64_t v98 = v72;
      uint64_t v99 = &v94[v97];
      int v100 = v98;
      int v101 = swift_getEnumCaseMultiPayload();
      if (v101 == 6)
      {
        TupleTypeMetadata2 = v96;
        uint64_t v136 = v210;
        unsigned int v137 = *(void (**)(char *, char *, uint64_t))(v210 + 32);
        v137(v197, v205, v77);
        uint64_t v115 = v194;
        v137(v194, v100, v77);
        uint64_t v116 = *(void (**)(char *, uint64_t))(v136 + 8);
        v116(v99, v77);
        v116((char *)TupleTypeMetadata2, v77);
        uint64_t v117 = v197;
        goto LABEL_39;
      }
      if (v101 == 3)
      {
        uint64_t v124 = v210;
        uint64_t v125 = *(void (**)(char *, uint64_t, uint64_t))(v210 + 32);
        TupleTypeMetadata2 = (v210 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
        v125(v196, v96, v77);
        v125(v74, (uint64_t)v99, v77);
        uint64_t v126 = v191;
        v125(v191, (uint64_t)v100, v77);
        uint64_t v127 = *(void (**)(char *, uint64_t))(v124 + 8);
        uint64_t v128 = v70;
        v127(v205, v77);
LABEL_43:
        v128(v71, a2);
        swift_getAssociatedConformanceWitness();
        uint64_t v146 = v196;
        char v147 = sub_10096BBE0();
        v127(v146, v77);
        char v148 = v192;
        v125(v192, (uint64_t)v126, v77);
        uint64_t v149 = v193;
        v125(v193, (uint64_t)v212, v77);
        if (v147) {
          char v118 = 1;
        }
        else {
          char v118 = sub_10096BBE0();
        }
        v127(v149, v77);
        v127(v148, v77);
      }
      else
      {
        uint64_t v102 = v210;
        if (v101 != 2)
        {
          uint64_t v139 = *(void (**)(char *, uint64_t))(v210 + 8);
          v139(v99, v77);
          v139((char *)v96, v77);
          v139(v205, v77);
          goto LABEL_28;
        }
        uint64_t v103 = sub_10096C890();
        uint64_t v212 = &v100[*(int *)(swift_getTupleTypeMetadata2() + 48)];
        TupleTypeMetadata2 = v96;
        uint64_t v208 = v70;
        uint64_t v104 = *(void (**)(char *, char *, uint64_t))(v102 + 32);
        v104(v195, v205, v77);
        int v105 = v190;
        v104(v190, v100, v77);
        BOOL v106 = v208;
        (*(void (**)(char *, uint64_t))(*(void *)(v103 - 8) + 8))(v212, v103);
        uint64_t v107 = *(void (**)(char *, uint64_t))(v102 + 8);
        v107(v99, v77);
        v107((char *)TupleTypeMetadata2, v77);
LABEL_51:
        v106(v71, a2);
        swift_getAssociatedConformanceWitness();
        uint64_t v160 = v195;
        char v118 = sub_10096BBE0();
        v107(v105, v77);
        v107(v160, v77);
      }
      return v118 & 1;
    case 2:
      uint64_t v82 = v199;
      v68(v199, (uint64_t)v71, a2);
      uint64_t v77 = v211;
      uint64_t v83 = sub_10096C890();
      uint64_t v84 = swift_getTupleTypeMetadata2();
      BOOL v85 = v72;
      uint64_t v86 = v84;
      uint64_t v212 = &v82[*(int *)(v84 + 48)];
      uint64_t v87 = v85;
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          BOOL v72 = v87;
          v68(v62, (uint64_t)v87, a2);
          uint64_t v78 = v210;
          int v88 = v212;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v210 + 48))(v212, 1, v77) == 1)
          {
            BOOL v89 = *(void (**)(char *, uint64_t))(v78 + 8);
            v89(v62, v77);
            v89(v82, v77);
            int v71 = v213;
            goto LABEL_55;
          }
          uint64_t v182 = v72;
          uint64_t v176 = *(void (**)(char *, char *, uint64_t))(v78 + 32);
          uint64_t v177 = v200;
          v176(v200, v88, v77);
          uint64_t v178 = v82;
          uint64_t v122 = v201;
          v176(v201, v62, v77);
          (*(void (**)(char *, uint64_t))(v78 + 8))(v178, v77);
          BOOL v81 = v177;
          v70(v182, a2);
          int v71 = v213;
          goto LABEL_33;
        case 1u:
          int v154 = v204;
          uint64_t v182 = v87;
          v68(v204, (uint64_t)v87, a2);
          uint64_t v155 = swift_getTupleTypeMetadata3();
          uint64_t v156 = &v154[*(int *)(v155 + 48)];
          uint64_t v157 = &v154[*(int *)(v155 + 64)];
          uint64_t v208 = v70;
          uint64_t v158 = v210;
          uint64_t v159 = *(void (**)(char *, char *, uint64_t))(v210 + 32);
          v159(v195, v82, v77);
          int v105 = v190;
          v159(v190, v154, v77);
          uint64_t v107 = *(void (**)(char *, uint64_t))(v158 + 8);
          v107(v157, v77);
          v107(v156, v77);
          BOOL v106 = v208;
          (*(void (**)(char *, uint64_t))(*(void *)(v83 - 8) + 8))(v212, v83);
          v106(v182, a2);
          int v71 = v213;
          goto LABEL_51;
        case 2u:
          uint64_t v161 = v82;
          uint64_t v162 = v204;
          uint64_t v182 = v87;
          v68(v204, (uint64_t)v87, a2);
          TupleTypeMetadata2 = (uint64_t)&v162[*(int *)(v86 + 48)];
          uint64_t v163 = v210;
          uint64_t v164 = *(void (**)(char *, char *, uint64_t))(v210 + 32);
          uint64_t v165 = v184;
          v164(v184, v161, v77);
          uint64_t v166 = v185;
          v164(v185, v162, v77);
          swift_getAssociatedConformanceWitness();
          char v118 = sub_10096BBE0();
          uint64_t v167 = *(void (**)(char *, uint64_t))(v163 + 8);
          v167(v166, v77);
          v167(v165, v77);
          uint64_t v168 = *(void (**)(uint64_t, uint64_t))(*(void *)(v83 - 8) + 8);
          v168(TupleTypeMetadata2, v83);
          v168((uint64_t)v212, v83);
          v70(v182, a2);
          v70(v213, a2);
          return v118 & 1;
        case 3u:
          uint64_t v169 = v183;
          v68(v183, (uint64_t)v87, a2);
          uint64_t v170 = v210;
          uint64_t v171 = v212;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v210 + 48))(v212, 1, v77) == 1)
          {
            uint64_t v172 = *(void (**)(char *, uint64_t))(v170 + 8);
            v172(v169, v77);
            v172(v82, v77);
            int v71 = v213;
            BOOL v72 = v87;
            goto LABEL_55;
          }
          uint64_t v179 = *(void (**)(char *, char *, uint64_t))(v170 + 32);
          v179(v188, v171, v77);
          v179(v189, v169, v77);
          uint64_t v116 = *(void (**)(char *, uint64_t))(v170 + 8);
          v116(v82, v77);
          int v71 = v213;
          break;
        case 4u:
          (*(void (**)(char *, uint64_t))(*(void *)(v83 - 8) + 8))(v212, v83);
          (*(void (**)(char *, uint64_t))(v210 + 8))(v82, v77);
          v70(v87, a2);
          int v71 = v213;
          goto LABEL_57;
        default:
          (*(void (**)(char *, uint64_t))(*(void *)(v83 - 8) + 8))(v212, v83);
          (*(void (**)(char *, uint64_t))(v210 + 8))(v82, v77);
          int v71 = v213;
          goto LABEL_28;
      }
      goto LABEL_65;
    case 3:
      unsigned int v47 = v202;
      v68(v202, (uint64_t)v71, a2);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          char v79 = v204;
          v68(v204, (uint64_t)v72, a2);
          uint64_t v78 = v210;
          uint64_t v182 = v72;
          int v80 = *(void (**)(char *, char *, uint64_t))(v210 + 32);
          BOOL v81 = v200;
          uint64_t v108 = v200;
          uint64_t v109 = v47;
          goto LABEL_31;
        case 1u:
          uint64_t v140 = v204;
          v68(v204, (uint64_t)v72, a2);
          uint64_t v141 = v47;
          uint64_t v77 = v211;
          uint64_t v142 = swift_getTupleTypeMetadata3();
          uint64_t v143 = &v140[*(int *)(v142 + 48)];
          unsigned int v144 = &v140[*(int *)(v142 + 64)];
          uint64_t v145 = v210;
          uint64_t v182 = v72;
          uint64_t v125 = *(void (**)(char *, uint64_t, uint64_t))(v210 + 32);
          TupleTypeMetadata2 = (v210 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
          v125(v196, (uint64_t)v143, v77);
          v125(v74, (uint64_t)v144, v77);
          uint64_t v126 = v191;
          v125(v191, (uint64_t)v141, v77);
          uint64_t v127 = *(void (**)(char *, uint64_t))(v145 + 8);
          uint64_t v128 = v70;
          v127(v204, v77);
          v70(v182, a2);
          goto LABEL_43;
        case 2u:
          uint64_t v150 = v187;
          v68(v187, (uint64_t)v72, a2);
          uint64_t v77 = v211;
          sub_10096C890();
          uint64_t v151 = &v150[*(int *)(swift_getTupleTypeMetadata2() + 48)];
          uint64_t v152 = v210;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v210 + 48))(v151, 1, v77) == 1)
          {
            uint64_t v153 = *(void (**)(char *, uint64_t))(v152 + 8);
            v153(v150, v77);
            v153(v202, v77);
            goto LABEL_55;
          }
          uint64_t v87 = v72;
          uint64_t v175 = *(void (**)(char *, char *, uint64_t))(v152 + 32);
          v175(v188, v151, v77);
          v175(v189, v202, v77);
          uint64_t v116 = *(void (**)(char *, uint64_t))(v152 + 8);
          v116(v187, v77);
          break;
        case 7u:
          (*(void (**)(char *, uint64_t))(v210 + 8))(v47, v211);
          goto LABEL_55;
        default:
          goto LABEL_22;
      }
LABEL_65:
      v70(v87, a2);
      v70(v71, a2);
      swift_getAssociatedConformanceWitness();
      uint64_t v180 = v188;
      uint64_t v181 = v189;
      char v118 = sub_10096BBE0();
      v116(v181, v77);
      uint64_t v138 = v180;
      goto LABEL_40;
    case 4:
      if (swift_getEnumCaseMultiPayload() != 2) {
        goto LABEL_28;
      }
      uint64_t v90 = v72;
      uint64_t v91 = v211;
      uint64_t v92 = sub_10096C890();
      uint64_t v93 = swift_getTupleTypeMetadata2();
      (*(void (**)(char *, uint64_t))(*(void *)(v92 - 8) + 8))(&v90[*(int *)(v93 + 48)], v92);
      (*(void (**)(char *, uint64_t))(v210 + 8))(v90, v91);
LABEL_57:
      v70(v71, a2);
      goto LABEL_58;
    case 5:
      v68(v47, (uint64_t)v71, a2);
      if (swift_getEnumCaseMultiPayload())
      {
LABEL_22:
        (*(void (**)(char *, uint64_t))(v210 + 8))(v47, v211);
        goto LABEL_28;
      }
      uint64_t v78 = v210;
      uint64_t v119 = v72;
      uint64_t v120 = *(void (**)(char *, char *, uint64_t))(v210 + 32);
      BOOL v81 = v200;
      int v121 = v47;
      uint64_t v77 = v211;
      v120(v200, v121, v211);
      uint64_t v122 = v201;
      v120(v201, v119, v77);
      goto LABEL_33;
    case 6:
      uint64_t v110 = v198;
      v68(v198, (uint64_t)v71, a2);
      if (swift_getEnumCaseMultiPayload() != 1)
      {
        (*(void (**)(char *, uint64_t))(v210 + 8))(v110, v211);
        goto LABEL_28;
      }
      uint64_t v77 = v211;
      uint64_t v111 = swift_getTupleTypeMetadata3();
      TupleTypeMetadata2 = (uint64_t)&v72[*(int *)(v111 + 48)];
      uint64_t v212 = &v72[*(int *)(v111 + 64)];
      uint64_t v112 = v210;
      long long v113 = *(void (**)(char *, char *, uint64_t))(v210 + 32);
      uint64_t v114 = v197;
      v113(v197, v110, v77);
      uint64_t v115 = v194;
      v113(v194, v72, v77);
      uint64_t v116 = *(void (**)(char *, uint64_t))(v112 + 8);
      v116(v212, v77);
      v116((char *)TupleTypeMetadata2, v77);
      uint64_t v117 = v114;
LABEL_39:
      v70(v71, a2);
      swift_getAssociatedConformanceWitness();
      char v118 = sub_10096BBE0();
      v116(v115, v77);
      uint64_t v138 = v117;
LABEL_40:
      v116(v138, v77);
      return v118 & 1;
    case 7:
      if (swift_getEnumCaseMultiPayload() == 3) {
        goto LABEL_55;
      }
      goto LABEL_28;
    default:
      int v75 = v203;
      v68(v203, (uint64_t)v71, a2);
      int v76 = swift_getEnumCaseMultiPayload();
      if (v76 == 2)
      {
        uint64_t v129 = v186;
        v68(v186, (uint64_t)v72, a2);
        uint64_t v130 = v211;
        uint64_t v131 = sub_10096C890();
        uint64_t v132 = v72;
        char v133 = &v129[*(int *)(swift_getTupleTypeMetadata2() + 48)];
        uint64_t v134 = v210;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v210 + 48))(v133, 1, v130) == 1)
        {
          uint64_t v135 = *(void (**)(char *, uint64_t))(v134 + 8);
          v135(v129, v130);
          v135(v203, v130);
          BOOL v72 = v132;
LABEL_55:
          v70(v72, a2);
          v70(v71, a2);
          goto LABEL_58;
        }
        (*(void (**)(char *, uint64_t))(*(void *)(v131 - 8) + 8))(v133, v131);
        uint64_t v174 = *(void (**)(char *, uint64_t))(v134 + 8);
        v174(v129, v130);
        v174(v203, v130);
        goto LABEL_28;
      }
      if (v76 != 5)
      {
        uint64_t v78 = v210;
        uint64_t v77 = v211;
        if (v76 == 3)
        {
          char v79 = v204;
          v68(v204, (uint64_t)v72, a2);
          uint64_t v182 = v72;
          int v80 = *(void (**)(char *, char *, uint64_t))(v78 + 32);
          BOOL v81 = v200;
          v80(v200, v75, v77);
          goto LABEL_32;
        }
        (*(void (**)(char *, uint64_t))(v210 + 8))(v75, v211);
LABEL_28:
        (*((void (**)(char *, uint64_t))v208 + 1))(v71, TupleTypeMetadata2);
        char v118 = 0;
        return v118 & 1;
      }
      char v79 = v204;
      v68(v204, (uint64_t)v72, a2);
      uint64_t v78 = v210;
      uint64_t v182 = v72;
      int v80 = *(void (**)(char *, char *, uint64_t))(v210 + 32);
      BOOL v81 = v200;
      uint64_t v108 = v200;
      uint64_t v109 = v75;
LABEL_31:
      uint64_t v77 = v211;
      v80(v108, v109, v211);
LABEL_32:
      uint64_t v122 = v201;
      v80(v201, v79, v77);
      v70(v182, a2);
LABEL_33:
      v70(v71, a2);
      swift_getAssociatedConformanceWitness();
      char v118 = sub_10096BBE0();
      uint64_t v123 = *(void (**)(char *, uint64_t))(v78 + 8);
      v123(v122, v77);
      v123(v81, v77);
      return v118 & 1;
  }
}

uint64_t sub_1001DE7AC(uint64_t a1, char *a2, void *a3, char *a4)
{
  uint64_t v165 = a1;
  uint64_t v166 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = sub_10096C890();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v138 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v8 = __chkstk_darwin(TupleTypeMetadata2);
  char v147 = (char *)&v136 - v9;
  uint64_t v154 = v7;
  uint64_t v151 = *(void *)(v7 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  unsigned int v137 = (char *)&v136 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  char v148 = (char *)&v136 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v156 = (char *)&v136 - v15;
  uint64_t v163 = AssociatedTypeWitness;
  uint64_t v164 = *(void **)(AssociatedTypeWitness - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v143 = (char *)&v136 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v142 = (char *)&v136 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v146 = (char *)&v136 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v141 = (char *)&v136 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v136 = (char *)&v136 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v150 = (char *)&v136 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v149 = (char *)&v136 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  unsigned int v144 = (char *)&v136 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v155 = (char *)&v136 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v157 = (char *)&v136 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  uint64_t v145 = (char *)&v136 - v37;
  __chkstk_darwin(v36);
  uint64_t v140 = (char *)&v136 - v38;
  uint64_t v159 = a4;
  uint64_t v160 = a3;
  uint64_t v39 = type metadata accessor for JobLockRule();
  uint64_t v40 = *(void *)(v39 - 8);
  uint64_t v41 = __chkstk_darwin(v39);
  uint64_t v153 = (char *)&v136 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = __chkstk_darwin(v41);
  uint64_t v152 = (char *)&v136 - v44;
  uint64_t v45 = __chkstk_darwin(v43);
  unsigned int v47 = (char *)&v136 - v46;
  uint64_t v48 = __chkstk_darwin(v45);
  uint64_t v50 = (char *)&v136 - v49;
  uint64_t v51 = __chkstk_darwin(v48);
  uint64_t v53 = (char *)&v136 - v52;
  uint64_t v54 = __chkstk_darwin(v51);
  uint64_t v158 = (char *)&v136 - v55;
  __chkstk_darwin(v54);
  uint64_t v57 = (char *)&v136 - v56;
  uint64_t v58 = swift_getTupleTypeMetadata2();
  uint64_t v162 = *(char **)(v58 - 8);
  uint64_t v59 = __chkstk_darwin(v58);
  uint64_t v61 = (char *)&v136 - v60;
  int v62 = (char *)&v136 + *(int *)(v59 + 48) - v60;
  uint64_t v161 = (char *)v40;
  uint64_t v63 = *(void (**)(char *, uint64_t, uint64_t))(v40 + 16);
  v63((char *)&v136 - v60, v165, v39);
  v63(v62, (uint64_t)v166, v39);
  uint64_t v166 = v61;
  uint64_t v64 = v39;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      char v69 = v158;
      uint64_t v65 = v166;
      v63(v158, (uint64_t)v166, v64);
      uint64_t v70 = v163;
      TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
      uint64_t v72 = *(int *)(TupleTypeMetadata3 + 48);
      uint64_t v73 = &v69[v72];
      uint64_t v74 = *(int *)(TupleTypeMetadata3 + 64);
      int v75 = &v69[v74];
      if (swift_getEnumCaseMultiPayload() != 1)
      {
        uint64_t v117 = (void (*)(char *, uint64_t))v164[1];
        v117(v75, v70);
        v117(v73, v70);
        v117(v69, v70);
        goto LABEL_30;
      }
      uint64_t v165 = v64;
      int v76 = &v62[v72];
      uint64_t v162 = &v62[v74];
      uint64_t v77 = v164;
      uint64_t v78 = (void (*)(char *, char *, uint64_t))v164[4];
      char v79 = v145;
      v78(v145, v62, v70);
      v78(v157, v73, v70);
      v78(v155, v75, v70);
      int v80 = v144;
      v78(v144, v76, v70);
      v78(v149, v162, v70);
      swift_getAssociatedConformanceWitness();
      BOOL v81 = v158;
      LOBYTE(v76) = sub_10096BBE0();
      uint64_t v82 = (void (*)(char *, uint64_t))v77[1];
      v82(v81, v70);
      if (v76 & 1) != 0 && (uint64_t v83 = v80, (sub_10096BBE0()))
      {
        uint64_t v84 = v149;
        char v85 = sub_10096BBE0();
        v82(v84, v70);
        v82(v83, v70);
        v82(v155, v70);
        v82(v157, v70);
        v82(v79, v70);
      }
      else
      {
        v82(v149, v70);
        v82(v80, v70);
        v82(v155, v70);
        v82(v157, v70);
        v82(v79, v70);
        char v85 = 0;
      }
      uint64_t v108 = v161;
      uint64_t v58 = v165;
      goto LABEL_31;
    case 2u:
      v63(v53, (uint64_t)v166, v39);
      uint64_t v86 = v163;
      uint64_t v87 = v154;
      uint64_t v88 = *(int *)(swift_getTupleTypeMetadata2() + 48);
      if (swift_getEnumCaseMultiPayload() != 2)
      {
        (*(void (**)(char *, uint64_t))(v151 + 8))(&v53[v88], v87);
        ((void (*)(char *, uint64_t))v164[1])(v53, v86);
        uint64_t v65 = v166;
        goto LABEL_30;
      }
      uint64_t v165 = v64;
      uint64_t v162 = &v62[v88];
      BOOL v89 = v164;
      uint64_t v90 = (char *)(v164 + 4);
      uint64_t v158 = (char *)v164[4];
      ((void (*)(char *, char *, uint64_t))v158)(v150, v62, v86);
      uint64_t v91 = v151;
      uint64_t v92 = *(void (**)(char *, char *, uint64_t))(v151 + 32);
      v92(v156, &v53[v88], v87);
      uint64_t v93 = v148;
      v92(v148, v162, v87);
      uint64_t v94 = *(char **)(*(void *)(swift_getAssociatedConformanceWitness() + 32) + 8);
      char v95 = sub_10096BBE0();
      uint64_t v98 = (char *)v89[1];
      uint64_t v97 = v89 + 1;
      uint64_t v96 = v98;
      ((void (*)(char *, uint64_t))v98)(v53, v86);
      uint64_t v99 = v86;
      if ((v95 & 1) == 0)
      {
        uint64_t v123 = *(void (**)(char *, uint64_t))(v91 + 8);
        v123(v93, v87);
        v123(v156, v87);
        ((void (*)(char *, uint64_t))v96)(v150, v86);
        char v85 = 0;
        uint64_t v108 = v161;
        goto LABEL_35;
      }
      uint64_t v160 = v97;
      uint64_t v155 = v94;
      uint64_t v157 = v90;
      uint64_t v162 = v96;
      int v100 = v147;
      int v101 = &v147[*(int *)(TupleTypeMetadata2 + 48)];
      uint64_t v102 = *(void (**)(char *, char *, uint64_t))(v91 + 16);
      uint64_t v103 = v156;
      v102(v147, v156, v87);
      uint64_t v159 = v101;
      v102(v101, v93, v87);
      uint64_t v104 = (uint64_t (*)(char *, uint64_t, uint64_t))v164[6];
      if (v104(v100, 1, v99) == 1)
      {
        int v105 = *(void (**)(char *, uint64_t))(v91 + 8);
        v105(v93, v87);
        v105(v103, v87);
        ((void (*)(char *, uint64_t))v162)(v150, v99);
        int v106 = v104(v159, 1, v99);
        uint64_t v107 = v161;
        if (v106 == 1)
        {
          v105(v147, v87);
          char v85 = 1;
          uint64_t v108 = v107;
LABEL_35:
          uint64_t v58 = v165;
          uint64_t v65 = v166;
          goto LABEL_31;
        }
        goto LABEL_40;
      }
      uint64_t v124 = v137;
      v102(v137, v147, v87);
      uint64_t v125 = v124;
      uint64_t v126 = v156;
      uint64_t v127 = v159;
      int v128 = v104(v159, 1, v99);
      uint64_t v107 = v161;
      uint64_t v129 = v150;
      if (v128 == 1)
      {
        uint64_t v130 = *(void (**)(char *, uint64_t))(v91 + 8);
        v130(v148, v87);
        v130(v126, v87);
        uint64_t v131 = v162;
        ((void (*)(char *, uint64_t))v162)(v129, v99);
        ((void (*)(char *, uint64_t))v131)(v125, v99);
LABEL_40:
        (*(void (**)(char *, uint64_t))(v138 + 8))(v147, TupleTypeMetadata2);
        uint64_t v58 = v165;
        uint64_t v65 = v166;
        goto LABEL_43;
      }
      uint64_t v132 = v136;
      ((void (*)(char *, char *, uint64_t))v158)(v136, v127, v99);
      LODWORD(v164) = sub_10096BBE0();
      char v133 = v132;
      uint64_t v134 = v162;
      ((void (*)(char *, uint64_t))v162)(v133, v99);
      uint64_t v135 = *(void (**)(char *, uint64_t))(v91 + 8);
      v135(v148, v87);
      v135(v126, v87);
      ((void (*)(char *, uint64_t))v134)(v129, v99);
      ((void (*)(char *, uint64_t))v134)(v125, v99);
      v135(v147, v87);
      uint64_t v58 = v165;
      uint64_t v65 = v166;
      if (v164)
      {
        char v85 = 1;
        uint64_t v108 = v107;
        goto LABEL_31;
      }
LABEL_43:
      char v85 = 0;
      uint64_t v108 = v107;
LABEL_31:
      (*((void (**)(char *, uint64_t))v108 + 1))(v65, v58);
      return v85 & 1;
    case 3u:
      uint64_t v65 = v166;
      v63(v50, (uint64_t)v166, v39);
      if (swift_getEnumCaseMultiPayload() == 3)
      {
        uint64_t v109 = v163;
        uint64_t v110 = v164;
        uint64_t v111 = v141;
        ((void (*)(char *, char *, uint64_t))v164[4])(v141, v62, v163);
        swift_getAssociatedConformanceWitness();
        char v85 = sub_10096BBE0();
        uint64_t v112 = (void (*)(char *, uint64_t))v110[1];
        v112(v111, v109);
        v112(v50, v109);
        goto LABEL_23;
      }
      ((void (*)(char *, uint64_t))v164[1])(v50, v163);
      goto LABEL_30;
    case 4u:
      uint64_t v65 = v166;
      v63(v47, (uint64_t)v166, v39);
      if (swift_getEnumCaseMultiPayload() != 4) {
        goto LABEL_24;
      }
      int v66 = v164;
      unsigned int v67 = (void (*)(char *, char *, uint64_t))v164[4];
      unsigned int v68 = v146;
      goto LABEL_22;
    case 5u:
      unsigned int v47 = v152;
      uint64_t v65 = v166;
      v63(v152, (uint64_t)v166, v39);
      if (swift_getEnumCaseMultiPayload() != 5) {
        goto LABEL_24;
      }
      int v66 = v164;
      unsigned int v67 = (void (*)(char *, char *, uint64_t))v164[4];
      long long v113 = &v167;
      goto LABEL_21;
    case 6u:
      unsigned int v47 = v153;
      uint64_t v65 = v166;
      v63(v153, (uint64_t)v166, v39);
      if (swift_getEnumCaseMultiPayload() != 6)
      {
LABEL_24:
        ((void (*)(char *, uint64_t))v164[1])(v47, v163);
        goto LABEL_30;
      }
      int v66 = v164;
      unsigned int v67 = (void (*)(char *, char *, uint64_t))v164[4];
      long long v113 = &v168;
LABEL_21:
      unsigned int v68 = (char *)*(v113 - 32);
LABEL_22:
      uint64_t v114 = v163;
      v67(v68, v62, v163);
      swift_getAssociatedConformanceWitness();
      char v85 = sub_10096BBE0();
      uint64_t v115 = (void (*)(char *, uint64_t))v66[1];
      v115(v68, v114);
      v115(v47, v114);
      goto LABEL_23;
    case 7u:
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      uint64_t v65 = v166;
      if (EnumCaseMultiPayload != 7) {
        goto LABEL_30;
      }
      char v85 = 1;
      goto LABEL_23;
    default:
      uint64_t v65 = v166;
      v63(v57, (uint64_t)v166, v39);
      if (swift_getEnumCaseMultiPayload())
      {
        ((void (*)(char *, uint64_t))v164[1])(v57, v163);
LABEL_30:
        char v85 = 0;
        uint64_t v108 = v162;
      }
      else
      {
        uint64_t v119 = v163;
        uint64_t v120 = v164;
        int v121 = v140;
        ((void (*)(char *, char *, uint64_t))v164[4])(v140, v62, v163);
        swift_getAssociatedConformanceWitness();
        char v85 = sub_10096BBE0();
        uint64_t v122 = (void (*)(char *, uint64_t))v120[1];
        v122(v121, v119);
        v122(v57, v119);
LABEL_23:
        uint64_t v108 = v161;
        uint64_t v58 = v39;
      }
      goto LABEL_31;
  }
}

unint64_t sub_1001DF8E4(uint64_t a1)
{
  uint64_t v2 = v1;
  unint64_t v4 = 0xD000000000000010;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v41 = *(void *)(a1 + 24);
  uint64_t v42 = v5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v40 = (char *)&v39 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v39 - v14;
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)&v39 - v17;
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v39 - v20;
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v39 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v23, v2, a1);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
      uint64_t v27 = &v23[*(int *)(TupleTypeMetadata3 + 48)];
      uint64_t v28 = &v23[*(int *)(TupleTypeMetadata3 + 64)];
      uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
      uint64_t v21 = v18;
      v29(v18, v23, AssociatedTypeWitness);
      v29(v15, v27, AssociatedTypeWitness);
      uint64_t v30 = v40;
      v29(v40, v28, AssociatedTypeWitness);
      swift_getAssociatedConformanceWitness();
      if (sub_10096BBE0())
      {
        unint64_t v43 = 0;
        unint64_t v44 = 0xE000000000000000;
        sub_10096CBD0(18);
        v45._uint64_t countAndFlagsBits = 0x28657461647075;
        v45._object = (void *)0xE700000000000000;
        sub_10096BDC0(v45);
        sub_10096D270();
        v31._uint64_t countAndFlagsBits = 0x203A6E69202CLL;
        v31._object = (void *)0xE600000000000000;
      }
      else
      {
        unint64_t v43 = 0;
        unint64_t v44 = 0xE000000000000000;
        sub_10096CBD0(24);
        v47._uint64_t countAndFlagsBits = 0x28657461647075;
        v47._object = (void *)0xE700000000000000;
        sub_10096BDC0(v47);
        sub_10096D270();
        v48._uint64_t countAndFlagsBits = 0x203A6E69202CLL;
        v48._object = (void *)0xE600000000000000;
        sub_10096BDC0(v48);
        sub_10096D270();
        v31._uint64_t countAndFlagsBits = 540945696;
        v31._object = (void *)0xE400000000000000;
      }
      sub_10096BDC0(v31);
      sub_10096D270();
      v49._uint64_t countAndFlagsBits = 41;
      v49._object = (void *)0xE100000000000000;
      sub_10096BDC0(v49);
      unint64_t v4 = v43;
      uint64_t v36 = *(void (**)(char *, uint64_t))(v7 + 8);
      v36(v30, AssociatedTypeWitness);
      uint64_t v37 = v15;
      goto LABEL_16;
    case 2u:
      sub_10096C890();
      uint64_t v32 = &v23[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      int v33 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48))(v32, 1, AssociatedTypeWitness);
      uint64_t v34 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
      v34(v21, v23, AssociatedTypeWitness);
      if (v33 == 1)
      {
        unint64_t v43 = 0;
        unint64_t v44 = 0xE000000000000000;
        v25._uint64_t countAndFlagsBits = 0x6B6E556863746566;
        v25._object = (void *)0xEC000000286E776FLL;
LABEL_12:
        sub_10096BDC0(v25);
        swift_getAssociatedConformanceWitness();
        sub_10096D270();
        v46._uint64_t countAndFlagsBits = 41;
        v46._object = (void *)0xE100000000000000;
        sub_10096BDC0(v46);
        unint64_t v4 = v43;
        (*(void (**)(char *, uint64_t))(v7 + 8))(v21, AssociatedTypeWitness);
      }
      else
      {
        v34(v10, v32, AssociatedTypeWitness);
        unint64_t v43 = 0;
        unint64_t v44 = 0xE000000000000000;
        sub_10096CBD0(17);
        v50._uint64_t countAndFlagsBits = 0x286863746566;
        v50._object = (void *)0xE600000000000000;
        sub_10096BDC0(v50);
        swift_getAssociatedConformanceWitness();
        sub_10096D270();
        v51._uint64_t countAndFlagsBits = 0x203A6E69202CLL;
        v51._object = (void *)0xE600000000000000;
        sub_10096BDC0(v51);
        sub_10096D270();
        v52._uint64_t countAndFlagsBits = 41;
        v52._object = (void *)0xE100000000000000;
        sub_10096BDC0(v52);
        unint64_t v4 = v43;
        uint64_t v36 = *(void (**)(char *, uint64_t))(v7 + 8);
        uint64_t v37 = v10;
LABEL_16:
        v36(v37, AssociatedTypeWitness);
        v36(v21, AssociatedTypeWitness);
      }
      return v4;
    case 3u:
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v21, v23, AssociatedTypeWitness);
      unint64_t v43 = 0;
      unint64_t v44 = 0xE000000000000000;
      v25._uint64_t countAndFlagsBits = 0x287473696CLL;
      v25._object = (void *)0xE500000000000000;
      goto LABEL_12;
    case 4u:
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v21, v23, AssociatedTypeWitness);
      unint64_t v43 = 0;
      unint64_t v44 = 0xE000000000000000;
      sub_10096CBD0(23);
      v25._uint64_t countAndFlagsBits = 0xD000000000000014;
      uint64_t v35 = "recursivelyDeleting(";
      goto LABEL_10;
    case 5u:
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v21, v23, AssociatedTypeWitness);
      unint64_t v43 = 0;
      unint64_t v44 = 0xE000000000000000;
      sub_10096CBD0(26);
      v25._uint64_t countAndFlagsBits = 0xD000000000000017;
      uint64_t v35 = "deleteRejectedItem(in: ";
LABEL_10:
      v25._object = (void *)((unint64_t)(v35 - 32) | 0x8000000000000000);
      goto LABEL_12;
    case 6u:
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v21, v23, AssociatedTypeWitness);
      unint64_t v43 = 0;
      unint64_t v44 = 0xE000000000000000;
      v25._uint64_t countAndFlagsBits = 0x74616761706F7270;
      v25._object = (void *)0xEA00000000002865;
      goto LABEL_12;
    case 7u:
      return v4;
    default:
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v21, v23, AssociatedTypeWitness);
      unint64_t v43 = 0;
      unint64_t v44 = 0xE000000000000000;
      v25._uint64_t countAndFlagsBits = 0x28657461657263;
      v25._object = (void *)0xE700000000000000;
      goto LABEL_12;
  }
}

void sub_1001E0070(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  v32[3] = a1;
  uint64_t v5 = *(void *)(a2 + 16);
  v32[1] = *(void *)(a2 + 24);
  v32[2] = v5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = sub_10096C890();
  v32[0] = *(void *)(v7 - 8);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)v32 - v9;
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v12 = __chkstk_darwin(v8);
  uint64_t v14 = (char *)v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)v32 - v16;
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (char *)v32 - v19;
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)v32 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v22, v3, a2);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
      uint64_t v26 = &v22[*(int *)(TupleTypeMetadata3 + 48)];
      uint64_t v27 = &v22[*(int *)(TupleTypeMetadata3 + 64)];
      uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
      v28(v20, v22, AssociatedTypeWitness);
      v28(v17, v26, AssociatedTypeWitness);
      v28(v14, v27, AssociatedTypeWitness);
      sub_10096D4C0(1uLL);
      swift_getAssociatedConformanceWitness();
      sub_10096BAD0();
      sub_10096BAD0();
      sub_10096BAD0();
      uint64_t v29 = *(void (**)(char *, uint64_t))(v11 + 8);
      v29(v14, AssociatedTypeWitness);
      v29(v17, AssociatedTypeWitness);
      v29(v20, AssociatedTypeWitness);
      return;
    case 2u:
      uint64_t v30 = &v22[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v20, v22, AssociatedTypeWitness);
      uint64_t v31 = v32[0];
      (*(void (**)(char *, char *, uint64_t))(v32[0] + 32))(v10, v30, v7);
      sub_10096D4C0(2uLL);
      swift_getAssociatedConformanceWitness();
      sub_10096BAD0();
      sub_10096C8A0();
      (*(void (**)(char *, uint64_t))(v31 + 8))(v10, v7);
      goto LABEL_10;
    case 3u:
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v20, v22, AssociatedTypeWitness);
      Swift::UInt v24 = 3;
      goto LABEL_9;
    case 4u:
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v20, v22, AssociatedTypeWitness);
      Swift::UInt v24 = 5;
      goto LABEL_9;
    case 5u:
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v20, v22, AssociatedTypeWitness);
      Swift::UInt v24 = 6;
      goto LABEL_9;
    case 6u:
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v20, v22, AssociatedTypeWitness);
      Swift::UInt v24 = 7;
      goto LABEL_9;
    case 7u:
      sub_10096D4C0(4uLL);
      return;
    default:
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v20, v22, AssociatedTypeWitness);
      Swift::UInt v24 = 0;
LABEL_9:
      sub_10096D4C0(v24);
      swift_getAssociatedConformanceWitness();
      sub_10096BAD0();
LABEL_10:
      (*(void (**)(char *, uint64_t))(v11 + 8))(v20, AssociatedTypeWitness);
      return;
  }
}

Swift::Int sub_1001E0614(uint64_t a1)
{
  sub_10096D4B0();
  sub_1001E0070((uint64_t)v3, a1);
  return sub_10096D500();
}

Swift::Int sub_1001E0664(uint64_t a1, uint64_t a2)
{
  sub_10096D4B0();
  sub_1001E0070((uint64_t)v4, a2);
  return sub_10096D500();
}

uint64_t sub_1001E06AC(uint64_t a1, char *a2, uint64_t a3)
{
  return sub_1001DE7AC(a1, a2, *(void **)(a3 + 16), *(char **)(a3 + 24));
}

uint64_t sub_1001E06B8()
{
  return sub_1001E0704();
}

uint64_t sub_1001E0704()
{
  type metadata accessor for JobLockRule();
  sub_10096C1C0();
  swift_getWitnessTable();
  swift_getWitnessTable();
  *(void *)(v0 + 16) = sub_10096C3B0();
  *(void *)(v0 + 24) = sub_10096C3B0();
  return v0;
}

uint64_t sub_1001E0808()
{
  swift_beginAccess();
  type metadata accessor for JobLockRule();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  sub_10096C3A0();
  swift_getWitnessTable();
  char v0 = sub_10096BF70();
  swift_bridgeObjectRelease();
  return v0 & 1;
}

uint64_t sub_1001E0924()
{
  swift_beginAccess();
  type metadata accessor for JobLockRule();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  sub_10096C3A0();
  swift_getWitnessTable();
  char v0 = sub_10096BF70();
  swift_bridgeObjectRelease();
  return v0 & 1;
}

uint64_t sub_1001E0A40()
{
  return sub_10026BD8C(v0, (void (*)(uint64_t *__return_ptr))sub_1001E9AC8);
}

void sub_1001E0A88(void *a1@<X8>)
{
  sub_10096CBD0(28);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  type metadata accessor for JobLockRule();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  uint64_t v2 = sub_10096C300();
  unint64_t v4 = v3;
  swift_bridgeObjectRelease();
  v8._uint64_t countAndFlagsBits = v2;
  v8._object = v4;
  sub_10096BDC0(v8);
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = 0x676E69646E657020;
  v9._object = (void *)0xEE003A6873756C46;
  sub_10096BDC0(v9);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  uint64_t v5 = sub_10096C300();
  uint64_t v7 = v6;
  swift_bridgeObjectRelease();
  v10._uint64_t countAndFlagsBits = v5;
  v10._object = v7;
  sub_10096BDC0(v10);
  swift_bridgeObjectRelease();
  v11._uint64_t countAndFlagsBits = 62;
  v11._object = (void *)0xE100000000000000;
  sub_10096BDC0(v11);
  *a1 = 0x676E696E6E75723CLL;
  a1[1] = 0xE90000000000003ALL;
}

uint64_t sub_1001E0C50()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1001E0C78()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for JobLockAggregator()
{
  return sub_10014D080();
}

uint64_t sub_1001E0CD0()
{
  return swift_initClassMetadata2();
}

uint64_t sub_1001E0D28()
{
  return sub_1001E0A40();
}

uint64_t sub_1001E0D4C(uint64_t a1, long long *a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 80) = 0;
  *(void *)(v6 + 88) = 0;
  *(void *)(v6 + 64) = a1;
  sub_1001E9E64(a2, v6 + 16);
  *(void *)(v6 + 56) = a3;
  *(_WORD *)(v6 + 72) = 0;
  uint64_t v7 = *(void *)(v6 + 80);
  *(void *)(v6 + 80) = 0;
  *(void *)(v6 + 88) = 0;
  sub_1000705CC(v7);
  return v6;
}

uint64_t sub_1001E0DBC(uint64_t a1, long long *a2, uint64_t a3)
{
  *(void *)(v3 + 80) = 0;
  *(void *)(v3 + 88) = 0;
  *(void *)(v3 + 64) = a1;
  sub_1001E9E64(a2, v3 + 16);
  *(void *)(v3 + 56) = a3;
  *(_WORD *)(v3 + 72) = 0;
  uint64_t v5 = *(void *)(v3 + 80);
  *(void *)(v3 + 80) = 0;
  *(void *)(v3 + 88) = 0;
  sub_1000705CC(v5);
  return v3;
}

uint64_t sub_1001E0E0C()
{
  return sub_10026BE58(*(void **)(v0 + 64), (void (*)(uint64_t *__return_ptr))sub_1001E9EEC) & 1;
}

uint64_t sub_1001E0E64@<X0>(void *a1@<X0>, char a2@<W1>, char *a3@<X8>)
{
  uint64_t v78 = a3;
  uint64_t v5 = *(void *)(*a1 + 88);
  uint64_t v77 = *(void *)(*a1 + 80);
  uint64_t v76 = v5;
  uint64_t v6 = type metadata accessor for JobLockRule();
  uint64_t v88 = *(void *)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v87 = (char *)&v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v91 = (char *)&v70 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  int v100 = (char *)&v70 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v70 - v14;
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v90 = (char *)&v70 - v17;
  uint64_t v72 = v18;
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v70 - v19;
  uint64_t v80 = a1[8];
  if (sub_1001E1AE8((uint64_t)a1))
  {
    uint64_t v21 = (void (*)(uint64_t))a1[10];
    if (v21)
    {
      uint64_t v22 = swift_retain();
      v21(v22);
      sub_1000705CC((uint64_t)v21);
    }
  }
  BOOL v81 = a1;
  if ((a2 & 1) == 0)
  {
    swift_beginAccess();
    swift_getWitnessTable();
    swift_bridgeObjectRetain();
    uint64_t v23 = sub_10096CE00();
    uint64_t v24 = v95;
    uint64_t v25 = v96;
    uint64_t v26 = v98;
    unint64_t v27 = v99;
    int64_t v75 = (unint64_t)(v97 + 64) >> 6;
    uint64_t v86 = v88 + 16;
    uint64_t v82 = (void (**)(char *, uint64_t))(v88 + 32);
    BOOL v89 = (uint64_t *)(v88 + 8);
    int v71 = v20;
    uint64_t v74 = v95;
    uint64_t v70 = v96;
    if (!v99) {
      goto LABEL_7;
    }
LABEL_6:
    uint64_t v83 = (void (**)(char *, char *, uint64_t))((v27 - 1) & v27);
    unint64_t v28 = __clz(__rbit64(v27)) | (v26 << 6);
    while (1)
    {
      uint64_t v33 = *(void *)(v24 + 48);
      uint64_t v34 = v88;
      uint64_t v85 = *(void *)(v88 + 72);
      uint64_t v35 = *(void (**)(char *, unint64_t, uint64_t))(v88 + 16);
      v35(v20, v33 + v85 * v28, v6);
      (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v90, v20, v6);
      uint64_t v36 = v81[7];
      swift_bridgeObjectRetain();
      uint64_t v37 = sub_10096C1A0();
      uint64_t v84 = (void *)v26;
      if (v37)
      {
        BOOL v38 = sub_10096C130();
        sub_10096C0E0();
        if (v38)
        {
          v35(v15, v36 + ((*(unsigned __int8 *)(v88 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v88 + 80)), v6);
        }
        else
        {
          uint64_t v23 = sub_10096CC20();
          if (v72 != 8) {
            goto LABEL_84;
          }
          *(void *)&v92[0] = v23;
          v35(v15, (unint64_t)v92, v6);
          swift_unknownObjectRelease();
        }
        char v39 = sub_1001DCD70(v90, v6);
        uint64_t v26 = *v89;
        ((void (*)(char *, uint64_t))*v89)(v15, v6);
        if (v39)
        {
LABEL_43:
          swift_bridgeObjectRelease();
          ((void (*)(char *, uint64_t))v26)(v90, v6);
          swift_release();
          break;
        }
        uint64_t v73 = (unint64_t)v89 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
        uint64_t v40 = v36 + v85;
        uint64_t v41 = 1;
        while (v41 != sub_10096C1A0())
        {
          BOOL v42 = sub_10096C130();
          sub_10096C0E0();
          if (v42)
          {
            uint64_t v23 = ((uint64_t (*)(char *, unint64_t, uint64_t))v35)(v15, v40 + ((*(unsigned __int8 *)(v88 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v88 + 80)), v6);
            if (__OFADD__(v41, 1)) {
              goto LABEL_80;
            }
          }
          else
          {
            uint64_t v23 = sub_10096CC20();
            if (v72 != 8) {
              goto LABEL_83;
            }
            *(void *)&v92[0] = v23;
            v35(v15, (unint64_t)v92, v6);
            uint64_t v23 = swift_unknownObjectRelease();
            if (__OFADD__(v41, 1))
            {
LABEL_80:
              __break(1u);
LABEL_81:
              __break(1u);
LABEL_82:
              __break(1u);
LABEL_83:
              __break(1u);
LABEL_84:
              __break(1u);
LABEL_85:
              __chkstk_darwin(v23);
              *(&v70 - 2) = v26;
              fp_preconditionFailure(_:file:line:)((uint64_t (*)(uint64_t))sub_1001E9FEC, (uint64_t)(&v70 - 4), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderExtensions/fssync/libfssync/utilities/Utilities.swift", 103, 2, 314);
            }
          }
          char v43 = sub_1001DCD70(v90, v6);
          ((void (*)(char *, uint64_t))v26)(v15, v6);
          ++v41;
          v40 += v85;
          if (v43) {
            goto LABEL_43;
          }
        }
        swift_bridgeObjectRelease();
        uint64_t v20 = v71;
        uint64_t v24 = v74;
        uint64_t v25 = v70;
        uint64_t v23 = ((uint64_t (*)(char *, uint64_t))v26)(v90, v6);
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v23 = ((uint64_t (*)(char *, uint64_t))*v89)(v90, v6);
      }
      uint64_t v26 = (uint64_t)v84;
      unint64_t v27 = (unint64_t)v83;
      if (v83) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v29 = v26 + 1;
      if (__OFADD__(v26, 1)) {
        goto LABEL_81;
      }
      if (v29 >= v75)
      {
LABEL_78:
        uint64_t result = swift_release();
        char v67 = 0;
        goto LABEL_77;
      }
      unint64_t v30 = *(void *)(v25 + 8 * v29);
      uint64_t v31 = v26 + 1;
      if (!v30)
      {
        uint64_t v31 = v26 + 2;
        if (v26 + 2 >= v75) {
          goto LABEL_78;
        }
        unint64_t v30 = *(void *)(v25 + 8 * v31);
        if (!v30)
        {
          uint64_t v31 = v26 + 3;
          if (v26 + 3 >= v75) {
            goto LABEL_78;
          }
          unint64_t v30 = *(void *)(v25 + 8 * v31);
          if (!v30)
          {
            uint64_t v31 = v26 + 4;
            if (v26 + 4 >= v75) {
              goto LABEL_78;
            }
            unint64_t v30 = *(void *)(v25 + 8 * v31);
            if (!v30)
            {
              uint64_t v31 = v26 + 5;
              if (v26 + 5 >= v75) {
                goto LABEL_78;
              }
              unint64_t v30 = *(void *)(v25 + 8 * v31);
              if (!v30)
              {
                uint64_t v32 = v26 + 6;
                do
                {
                  if (v75 == v32) {
                    goto LABEL_78;
                  }
                  unint64_t v30 = *(void *)(v25 + 8 * v32++);
                }
                while (!v30);
                uint64_t v31 = v32 - 1;
              }
            }
          }
        }
      }
      uint64_t v83 = (void (**)(char *, char *, uint64_t))((v30 - 1) & v30);
      unint64_t v28 = __clz(__rbit64(v30)) + (v31 << 6);
      uint64_t v26 = v31;
    }
  }
  unint64_t v44 = v81;
  *((unsigned char *)v81 + 73) = 1;
  uint64_t v45 = v44[7];
  swift_bridgeObjectRetain();
  if (sub_10096C1A0())
  {
    uint64_t v46 = 0;
    uint64_t v26 = v80 + 24;
    uint64_t v84 = v81 + 2;
    uint64_t v90 = (char *)(v88 + 16);
    uint64_t v83 = (void (**)(char *, char *, uint64_t))(v88 + 32);
    uint64_t v82 = (void (**)(char *, uint64_t))(v88 + 8);
    uint64_t v86 = v45;
    uint64_t v85 = v80 + 24;
    Swift::String v47 = v91;
    do
    {
      BOOL v48 = sub_10096C130();
      sub_10096C0E0();
      if (v48)
      {
        Swift::String v49 = *(uint64_t **)(v88 + 16);
        uint64_t v23 = ((uint64_t (*)(char *, unint64_t, uint64_t))v49)(v100, v45+ ((*(unsigned __int8 *)(v88 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v88 + 80))+ *(void *)(v88 + 72) * v46, v6);
        uint64_t v50 = v46 + 1;
        if (__OFADD__(v46, 1)) {
          goto LABEL_79;
        }
      }
      else
      {
        uint64_t v23 = sub_10096CC20();
        if (v72 != 8) {
          goto LABEL_82;
        }
        *(void *)&v92[0] = v23;
        Swift::String v49 = *(uint64_t **)v90;
        (*(void (**)(char *, long long *, uint64_t))v90)(v100, v92, v6);
        uint64_t v23 = swift_unknownObjectRelease();
        uint64_t v50 = v46 + 1;
        if (__OFADD__(v46, 1))
        {
LABEL_79:
          __break(1u);
          goto LABEL_80;
        }
      }
      BOOL v89 = v49;
      (*v83)(v91, v100, v6);
      swift_beginAccess();
      swift_getWitnessTable();
      sub_10096BAA0();
      Swift::String v51 = v93;
      uint64_t v52 = v94;
      swift_endAccess();
      if (v51) {
        uint64_t v53 = v52;
      }
      else {
        uint64_t v53 = 0;
      }
      if (v51) {
        uint64_t v54 = v51;
      }
      else {
        uint64_t v54 = _swiftEmptyArrayStorage;
      }
      sub_10009CA78((uint64_t)v84, (uint64_t)v92);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v54 = sub_1006A2658(0, v54[2] + 1, 1, v54);
      }
      unint64_t v56 = v54[2];
      unint64_t v55 = v54[3];
      if (v56 >= v55 >> 1) {
        uint64_t v54 = sub_1006A2658((void *)(v55 > 1), v56 + 1, 1, v54);
      }
      v54[2] = v56 + 1;
      sub_1001E9E64(v92, (uint64_t)&v54[5 * v56 + 4]);
      ((void (*)(char *, char *, uint64_t))v89)(v87, v47, v6);
      uint64_t v93 = v54;
      uint64_t v94 = v53;
      uint64_t v26 = v85;
      swift_beginAccess();
      sub_10096BA80();
      sub_10096BAB0();
      swift_endAccess();
      (*v82)(v47, v6);
      uint64_t v45 = v86;
      ++v46;
    }
    while (v50 != sub_10096C1A0());
  }
  swift_bridgeObjectRelease();
  id v57 = [*(id *)(v80 + 40) allObjects];
  type metadata accessor for JobLockAggregator();
  uint64_t v58 = sub_10096C0A0();

  if (!sub_10096C1A0()) {
    goto LABEL_76;
  }
  uint64_t v59 = 4;
  uint64_t v60 = v79;
  while (1)
  {
    uint64_t v61 = v59 - 4;
    BOOL v62 = sub_10096C130();
    sub_10096C0E0();
    if (!v62) {
      break;
    }
    uint64_t v26 = *(void *)(v58 + 8 * v59);
    swift_retain();
    uint64_t v63 = v59 - 3;
    if (__OFADD__(v61, 1)) {
      goto LABEL_75;
    }
LABEL_68:
    uint64_t v64 = (void *)swift_retain();
    uint64_t v23 = objc_sync_enter(v64);
    if (v23) {
      goto LABEL_85;
    }
    sub_1001E1B7C();
    if (v60)
    {
      uint64_t v68 = objc_sync_exit((id)v26);
      __chkstk_darwin(v68);
      char v69 = &v70 - 4;
      *(&v70 - 2) = v26;
      goto LABEL_88;
    }
    uint64_t v60 = 0;
    uint64_t v65 = objc_sync_exit((id)v26);
    if (v65)
    {
      __chkstk_darwin(v65);
      char v69 = &v70 - 4;
      *(&v70 - 2) = v26;
LABEL_88:
      fp_preconditionFailure(_:file:line:)((uint64_t (*)(uint64_t))sub_1001E9FE8, (uint64_t)v69, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderExtensions/fssync/libfssync/utilities/Utilities.swift", 103, 2, 318);
    }
    swift_release_n();
    ++v59;
    if (v63 == sub_10096C1A0()) {
      goto LABEL_76;
    }
  }
  uint64_t v26 = sub_10096CC20();
  uint64_t v63 = v59 - 3;
  if (!__OFADD__(v61, 1)) {
    goto LABEL_68;
  }
LABEL_75:
  __break(1u);
LABEL_76:
  uint64_t result = swift_bridgeObjectRelease();
  char v67 = 1;
LABEL_77:
  char *v78 = v67;
  return result;
}

uint64_t sub_1001E1AE8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72))
  {
    char v2 = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 72) = 1;
    __chkstk_darwin(a1);
    char v2 = sub_10026BE58(v1, (void (*)(uint64_t *__return_ptr))sub_1001E9F0C);
  }
  return v2 & 1;
}

uint64_t sub_1001E1B7C()
{
  return swift_endAccess();
}

uint64_t sub_1001E1C94()
{
  sub_10026BFF4(*(void **)(v0 + 64), (void (*)(void))sub_1001E9FB0);
  sub_1000268E0(v0 + 16);
  swift_bridgeObjectRelease();
  swift_release();
  sub_1000705CC(*(void *)(v0 + 80));
  return v0;
}

uint64_t sub_1001E1D00(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for JobLockRule();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  Swift::String v49 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v43 - v9;
  uint64_t v43 = v11;
  __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v43 - v12;
  uint64_t v14 = *(void *)(a1 + 64);
  uint64_t result = sub_1001E1AE8(a1);
  if (result)
  {
    uint64_t v16 = *(void (**)(uint64_t))(a1 + 80);
    if (v16)
    {
      uint64_t v17 = swift_retain();
      v16(v17);
      uint64_t result = sub_1000705CC((uint64_t)v16);
    }
  }
  if (*(unsigned char *)(a1 + 73) != 1) {
    return result;
  }
  uint64_t v18 = *(void *)(a1 + 56);
  swift_bridgeObjectRetain();
  if (!sub_10096C1A0()) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v19 = v14 + 24;
  uint64_t v20 = 0;
  uint64_t v55 = v19;
  unint64_t v56 = (void (**)(char *, unint64_t, uint64_t))(v5 + 16);
  uint64_t v50 = (void (**)(char *, uint64_t))(v5 + 8);
  Swift::String v51 = (void (**)(char *, char *, uint64_t))(v5 + 32);
  uint64_t v47 = v4;
  uint64_t v46 = v5;
  uint64_t v45 = v10;
  unint64_t v44 = v13;
  uint64_t v48 = v18;
  while (1)
  {
    BOOL v21 = sub_10096C130();
    sub_10096C0E0();
    if (v21)
    {
      unint64_t v22 = v18
          + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
          + *(void *)(v5 + 72) * v20;
      uint64_t v54 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      v54(v13, v22, v4);
      BOOL v23 = __OFADD__(v20++, 1);
      if (v23) {
        goto LABEL_47;
      }
      goto LABEL_11;
    }
    uint64_t v42 = sub_10096CC20();
    if (v43 != 8) {
      break;
    }
    *(void *)&v59[0] = v42;
    uint64_t v54 = *v56;
    v54(v13, (unint64_t)v59, v4);
    swift_unknownObjectRelease();
    BOOL v23 = __OFADD__(v20++, 1);
    if (v23)
    {
LABEL_47:
      __break(1u);
      return swift_bridgeObjectRelease();
    }
LABEL_11:
    (*v51)(v10, v13, v4);
    swift_beginAccess();
    uint64_t WitnessTable = swift_getWitnessTable();
    sub_10096BAA0();
    uint64_t v24 = *(void **)&v58[0];
    if (!*(void *)&v58[0])
    {
      swift_endAccess();
      (*v50)(v10, v4);
      goto LABEL_8;
    }
    uint64_t v52 = *((void *)&v58[0] + 1);
    uint64_t v60 = *(void **)&v58[0];
    swift_endAccess();
    uint64_t v25 = v24[2];
    uint64_t v57 = v20;
    if (!v25)
    {
      int64_t v33 = 0;
      goto LABEL_40;
    }
    uint64_t v26 = (void *)a1;
    uint64_t v27 = (uint64_t)(v24 + 4);
    swift_bridgeObjectRetain();
    unint64_t v28 = 0;
    uint64_t v29 = 9;
    unint64_t v30 = 1;
    do
    {
      sub_10009CA78(v27, (uint64_t)v59);
      char v31 = sub_1001E2404(v59, v26);
      if (v2) {
        goto LABEL_61;
      }
      char v32 = v31;
      uint64_t v2 = 0;
      sub_1000268E0((uint64_t)v59);
      if (v32)
      {
        swift_bridgeObjectRelease();
        int64_t v33 = v28 + 1;
        if (!__OFADD__(v28, 1))
        {
          unint64_t v34 = v24[2];
          if (v33 == v34)
          {
            uint64_t v25 = v28;
            goto LABEL_22;
          }
          a1 = (uint64_t)v26;
          uint64_t v20 = v57;
          while (v30 < v34)
          {
            sub_10009CA78((uint64_t)&v24[v29], (uint64_t)v59);
            char v35 = sub_1001E2404(v59, v26);
            uint64_t v2 = 0;
            sub_1000268E0((uint64_t)v59);
            if ((v35 & 1) == 0)
            {
              if (v30 != v28)
              {
                if ((v28 & 0x8000000000000000) != 0) {
                  goto LABEL_53;
                }
                uint64_t v36 = v60;
                unint64_t v37 = v60[2];
                if (v28 >= v37) {
                  goto LABEL_54;
                }
                sub_10009CA78((uint64_t)&v60[5 * v28 + 4], (uint64_t)v59);
                if (v30 >= v37) {
                  goto LABEL_55;
                }
                sub_10009CA78((uint64_t)&v36[v29], (uint64_t)v58);
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                {
                  uint64_t v36 = sub_100794FAC(v36);
                  uint64_t v60 = v36;
                }
                uint64_t v20 = v57;
                if (v28 >= v36[2]) {
                  goto LABEL_56;
                }
                uint64_t v38 = (uint64_t)&v36[5 * v28 + 4];
                sub_1000268E0(v38);
                sub_1001E9E64(v58, v38);
                if (v30 >= v60[2]) {
                  goto LABEL_57;
                }
                uint64_t v39 = (uint64_t)&v60[v29];
                sub_1000268E0((uint64_t)&v60[v29]);
                sub_1001E9E64(v59, v39);
              }
              BOOL v23 = __OFADD__(v28++, 1);
              if (v23) {
                goto LABEL_52;
              }
            }
            int64_t v33 = v30 + 1;
            if (__OFADD__(v30, 1)) {
              goto LABEL_51;
            }
            uint64_t v24 = v60;
            unint64_t v34 = v60[2];
            ++v30;
            v29 += 5;
            if (v33 == v34)
            {
              uint64_t v25 = v28;
              goto LABEL_39;
            }
          }
          __break(1u);
LABEL_51:
          __break(1u);
LABEL_52:
          __break(1u);
LABEL_53:
          __break(1u);
LABEL_54:
          __break(1u);
LABEL_55:
          __break(1u);
LABEL_56:
          __break(1u);
LABEL_57:
          __break(1u);
LABEL_58:
          __break(1u);
        }
        __break(1u);
        goto LABEL_60;
      }
      ++v28;
      v27 += 40;
      ++v30;
      v29 += 5;
    }
    while (v25 != v28);
    swift_bridgeObjectRelease();
    int64_t v33 = v24[2];
LABEL_22:
    a1 = (uint64_t)v26;
    uint64_t v20 = v57;
LABEL_39:
    uint64_t v4 = v47;
    uint64_t v5 = v46;
    uint64_t v10 = v45;
    uint64_t v13 = v44;
    if (v33 < v25) {
      goto LABEL_58;
    }
LABEL_40:
    sub_10079B6BC(v25, v33);
    uint64_t v40 = v60;
    uint64_t v41 = v52;
    if (v60[2] | v52)
    {
      v54(v49, (unint64_t)v10, v4);
      *(void *)&v58[0] = v40;
      *((void *)&v58[0] + 1) = v41;
      swift_beginAccess();
      sub_10096BA80();
      uint64_t v20 = v57;
    }
    else
    {
      swift_bridgeObjectRelease();
      v54(v49, (unint64_t)v10, v4);
      v58[0] = 0uLL;
      swift_beginAccess();
      sub_10096BA80();
    }
    sub_10096BAB0();
    swift_endAccess();
    (*v50)(v10, v4);
    uint64_t v18 = v48;
LABEL_8:
    if (v20 == sub_10096C1A0()) {
      return swift_bridgeObjectRelease();
    }
  }
LABEL_60:
  __break(1u);
LABEL_61:
  sub_1000268E0((uint64_t)v59);
  swift_bridgeObjectRelease();
  __break(1u);
  uint64_t result = sub_1000268E0((uint64_t)v59);
  __break(1u);
  return result;
}

uint64_t sub_1001E2404(void *a1, void *a2)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10002689C(a1, v3);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 16))(v3, v4);
  uint64_t v7 = v6;
  uint64_t v8 = a2 + 2;
  uint64_t v10 = a2[5];
  uint64_t v9 = a2[6];
  sub_10002689C(v8, v10);
  if (v5 == (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 16))(v10, v9) && v7 == v11) {
    char v13 = 1;
  }
  else {
    char v13 = sub_10096D2D0();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v13 & 1;
}

uint64_t sub_1001E24EC()
{
  sub_1001E1C94();

  return swift_deallocClassInstance();
}

uint64_t sub_1001E2520()
{
  type metadata accessor for JobLockRule();

  return sub_10096C0B0();
}

uint64_t sub_1001E2568()
{
  return sub_1001E2520();
}

uint64_t sub_1001E2584()
{
  type metadata accessor for JobLock.Registration();
  sub_10096C890();
  type metadata accessor for JobLock.BlockedRuleError();
  swift_getWitnessTable();
  sub_10096D510();
  sub_10026BFF4(v0, (void (*)(void))sub_1001E9DE8);
  return v2;
}

uint64_t sub_1001E267C@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v137 = a4;
  uint64_t v119 = a5;
  uint64_t v8 = *(void *)(*(void *)a1 + 80);
  uint64_t v9 = *(void *)(*(void *)a1 + 88);
  uint64_t v10 = type metadata accessor for JobLockRule();
  uint64_t v139 = *(void *)(v10 - 8);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v130 = (char *)&v115 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v131 = (char *)&v115 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v135 = (char *)&v115 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v123 = (char *)&v115 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v124 = (char *)&v115 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v125 = (char *)&v115 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v126 = (char *)&v115 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v27 = (char *)&v115 - v26;
  uint64_t v116 = v28;
  __chkstk_darwin(v25);
  uint64_t v151 = (char *)&v115 - v29;
  swift_beginAccess();
  int v121 = a1;
  uint64_t v122 = a3;
  v141[6] = v8;
  v141[7] = v9;
  uint64_t v136 = a2;
  v141[8] = a2;
  v141[9] = a3;
  swift_bridgeObjectRetain();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v31 = v140;
  *(void *)&long long v142 = sub_10096BA40();
  uint64_t v117 = v8;
  uint64_t v118 = v9;
  v141[2] = v8;
  v141[3] = v9;
  uint64_t v129 = WitnessTable;
  uint64_t v32 = sub_10096BA80();
  uint64_t v33 = swift_getWitnessTable();
  uint64_t v140 = v32;
  uint64_t v35 = sub_1003FC0AC((void (*)(char *, char *))sub_1001E9E44, (uint64_t)v141, v32, v10, (uint64_t)&type metadata for Never, v33, (uint64_t)&protocol witness table for Never, v34);
  uint64_t v120 = v31;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v36 = sub_10096C1A0();
  uint64_t v138 = a1 + 16;
  uint64_t v128 = v35;
  if (v36)
  {
    uint64_t v37 = 0;
    char v133 = (void (**)(char *, uint64_t))(v139 + 32);
    uint64_t v134 = (void (**)(char *, long long *, uint64_t))(v139 + 16);
    uint64_t v132 = (void (**)(char *, uint64_t))(v139 + 8);
    uint64_t v127 = v27;
    do
    {
      BOOL v38 = sub_10096C130();
      sub_10096C0E0();
      if (v38)
      {
        uint64_t v39 = (*(uint64_t (**)(char *, unint64_t, uint64_t))(v139 + 16))(v151, v35+ ((*(unsigned __int8 *)(v139 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v139 + 80))+ *(void *)(v139 + 72) * v37, v10);
        uint64_t v32 = v37 + 1;
        if (__OFADD__(v37, 1)) {
          goto LABEL_78;
        }
      }
      else
      {
        uint64_t v39 = sub_10096CC20();
        if (v116 != 8) {
          goto LABEL_83;
        }
        *(void *)&long long v142 = v39;
        (*v134)(v151, &v142, v10);
        uint64_t v39 = swift_unknownObjectRelease();
        uint64_t v32 = v37 + 1;
        if (__OFADD__(v37, 1))
        {
LABEL_78:
          __break(1u);
LABEL_79:
          __break(1u);
LABEL_80:
          __break(1u);
LABEL_81:
          __break(1u);
LABEL_82:
          __break(1u);
LABEL_83:
          __break(1u);
LABEL_84:
          __break(1u);
LABEL_85:
          __break(1u);
LABEL_86:
          __break(1u);
LABEL_87:
          __break(1u);
LABEL_88:
          __break(1u);
LABEL_89:
          __break(1u);
LABEL_90:
          __chkstk_darwin(v39);
          *(&v115 - 2) = v32;
          fp_preconditionFailure(_:file:line:)((uint64_t (*)(uint64_t))sub_1001E9E7C, (uint64_t)(&v115 - 4), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderExtensions/fssync/libfssync/utilities/Utilities.swift", 103, 2, 314);
        }
      }
      ((void (*)(char *, char *, uint64_t))*v133)(v27, v151, v10);
      swift_beginAccess();
      uint64_t v41 = (void (*)(long long *, void))sub_10096BA90();
      if (*v40)
      {
        uint64_t v42 = v40;
        uint64_t v39 = sub_10002B70C(v137, (uint64_t)&v142, qword_100ACE608);
        if (!*((void *)&v143 + 1)) {
          goto LABEL_81;
        }
        uint64_t v43 = (void *)v42[1];
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v42[1] = v43;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t v43 = sub_1006A2658(0, v43[2] + 1, 1, v43);
          v42[1] = v43;
        }
        unint64_t v46 = v43[2];
        unint64_t v45 = v43[3];
        if (v46 >= v45 >> 1)
        {
          uint64_t v43 = sub_1006A2658((void *)(v45 > 1), v46 + 1, 1, v43);
          v42[1] = v43;
        }
        v43[2] = v46 + 1;
        sub_1001E9E64(&v142, (uint64_t)&v43[5 * v46 + 4]);
        v41(&v146, 0);
        swift_endAccess();
        uint64_t v27 = v127;
        (*v132)(v127, v10);
        uint64_t v35 = v128;
      }
      else
      {
        v41(&v146, 0);
        swift_endAccess();
        (*v132)(v27, v10);
      }
      ++v37;
    }
    while (v32 != sub_10096C1A0());
  }
  swift_bridgeObjectRelease();
  *(void *)&long long v142 = v35;
  sub_10096C1C0();
  swift_getWitnessTable();
  LODWORD(v127) = sub_10096C460();
  if ((v127 & 1) == 0)
  {
    uint64_t v39 = sub_10002B70C(v137, (uint64_t)&v142, qword_100ACE608);
    uint64_t v32 = *((void *)&v143 + 1);
    if (*((void *)&v143 + 1))
    {
      uint64_t v68 = v144;
      sub_10002689C(&v142, *((uint64_t *)&v143 + 1));
      uint64_t v69 = (*(uint64_t (**)(uint64_t, uint64_t))(v68 + 16))(v32, v68);
      uint64_t v32 = v70;
      uint64_t v71 = (uint64_t)(v121 + 32);
      swift_beginAccess();
      uint64_t v149 = v69;
      uint64_t v150 = v32;
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      sub_10096BAA0();
      swift_bridgeObjectRelease();
      uint64_t v73 = v148[0];
      swift_endAccess();
      sub_1000DBF10(v73);
      uint64_t result = sub_1000268E0((uint64_t)&v142);
      int64_t v75 = v123;
      if (!v73) {
        goto LABEL_53;
      }
      uint64_t v76 = v119;
      char v77 = (char)v127;
      uint64_t v78 = v128;
      goto LABEL_77;
    }
    goto LABEL_87;
  }
  swift_bridgeObjectRelease();
  uint64_t v47 = v136;
  swift_bridgeObjectRetain();
  uint64_t v48 = sub_10096C1A0();
  Swift::String v49 = v131;
  if (v48)
  {
    uint64_t v32 = 0;
    uint64_t v151 = (char *)(v139 + 16);
    uint64_t v132 = (void (**)(char *, uint64_t))(v139 + 8);
    char v133 = (void (**)(char *, uint64_t))(v139 + 32);
    uint64_t v50 = v130;
    do
    {
      BOOL v52 = sub_10096C130();
      sub_10096C0E0();
      if (v52)
      {
        uint64_t v53 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v139 + 16);
        uint64_t v39 = v53(v135, v47+ ((*(unsigned __int8 *)(v139 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v139 + 80))+ *(void *)(v139 + 72) * v32, v10);
        uint64_t v54 = (void (**)(char *, long long *, uint64_t))(v32 + 1);
        if (__OFADD__(v32, 1)) {
          goto LABEL_79;
        }
      }
      else
      {
        uint64_t v39 = sub_10096CC20();
        if (v116 != 8) {
          goto LABEL_84;
        }
        *(void *)&long long v142 = v39;
        uint64_t v53 = *(uint64_t (**)(char *, unint64_t, uint64_t))v151;
        (*(void (**)(char *, long long *, uint64_t))v151)(v135, &v142, v10);
        uint64_t v39 = swift_unknownObjectRelease();
        uint64_t v54 = (void (**)(char *, long long *, uint64_t))(v32 + 1);
        if (__OFADD__(v32, 1)) {
          goto LABEL_79;
        }
      }
      uint64_t v134 = v54;
      ((void (*)(char *, char *, uint64_t))*v133)(v49, v135, v10);
      swift_beginAccess();
      sub_10096BAA0();
      uint64_t v55 = v146;
      swift_endAccess();
      Swift::String v49 = v131;
      sub_1000DBF10(v55);
      if (!v55)
      {
        v53(v124, (unint64_t)v49, v10);
        *(void *)&long long v146 = _swiftEmptyArrayStorage;
        *((void *)&v146 + 1) = _swiftEmptyArrayStorage;
        swift_beginAccess();
        sub_10096BAB0();
        swift_endAccess();
      }
      v53(v50, (unint64_t)v49, v10);
      swift_beginAccess();
      uint64_t v57 = (void (*)(void *, void))sub_10096BA90();
      if (*v56)
      {
        uint64_t v58 = (void **)v56;
        uint64_t v39 = sub_10002B70C(v137, (uint64_t)&v146, qword_100ACE608);
        if (!v147) {
          goto LABEL_82;
        }
        sub_1001E9E64(&v146, (uint64_t)&v142);
        *((void *)&v144 + 1) = 0;
        char v145 = 1;
        uint64_t v59 = *v58;
        char v60 = swift_isUniquelyReferenced_nonNull_native();
        *uint64_t v58 = v59;
        if ((v60 & 1) == 0)
        {
          uint64_t v59 = sub_1006A266C(0, v59[2] + 1, 1, v59);
          *uint64_t v58 = v59;
        }
        unint64_t v62 = v59[2];
        unint64_t v61 = v59[3];
        if (v62 >= v61 >> 1)
        {
          uint64_t v59 = sub_1006A266C((void *)(v61 > 1), v62 + 1, 1, v59);
          *uint64_t v58 = v59;
        }
        v59[2] = v62 + 1;
        uint64_t v63 = &v59[7 * v62];
        long long v64 = v142;
        long long v65 = v143;
        long long v66 = v144;
        *((unsigned char *)v63 + 80) = v145;
        *((_OWORD *)v63 + 3) = v65;
        *((_OWORD *)v63 + 4) = v66;
        *((_OWORD *)v63 + 2) = v64;
        v57(v148, 0);
        swift_endAccess();
        char v67 = *v132;
        (*v132)(v130, v10);
        Swift::String v49 = v131;
        v67(v131, v10);
        uint64_t v47 = v136;
      }
      else
      {
        v57(v148, 0);
        swift_endAccess();
        Swift::String v51 = *v132;
        (*v132)(v50, v10);
        v51(v49, v10);
      }
      ++v32;
    }
    while (v134 != (void (**)(char *, long long *, uint64_t))sub_10096C1A0());
  }
  swift_bridgeObjectRelease();
  int64_t v75 = v121;
  uint64_t v32 = (uint64_t)[*((id *)v121 + 5) allObjects];
  type metadata accessor for JobLockAggregator();
  uint64_t v79 = sub_10096C0A0();

  if (!sub_10096C1A0())
  {
LABEL_72:
    swift_bridgeObjectRelease();
    uint64_t v39 = sub_10002B70C(v137, (uint64_t)&v142, qword_100ACE608);
    if (*((void *)&v143 + 1))
    {
      type metadata accessor for JobLock.Registration();
      uint64_t v106 = v136;
      swift_bridgeObjectRetain();
      uint64_t v107 = swift_retain();
      uint64_t result = sub_1001E0D4C(v107, &v142, v106);
      uint64_t v78 = result;
      goto LABEL_76;
    }
    goto LABEL_88;
  }
  uint64_t v71 = 4;
  uint64_t v10 = v120;
  while (1)
  {
    uint64_t v80 = v71 - 4;
    BOOL v81 = sub_10096C130();
    sub_10096C0E0();
    if (!v81) {
      break;
    }
    uint64_t v32 = *(void *)(v79 + 8 * v71);
    swift_retain();
    BOOL v82 = __OFADD__(v80, 1);
    TupleTypeMetadata2 = v71 - 3;
    if (v82) {
      goto LABEL_52;
    }
LABEL_45:
    uint64_t v83 = (void *)swift_retain();
    uint64_t v39 = objc_sync_enter(v83);
    if (v39) {
      goto LABEL_90;
    }
    sub_1001E3D84();
    if (v10)
    {
      uint64_t v112 = objc_sync_exit((id)v32);
      __chkstk_darwin(v112);
      long long v113 = &v115 - 4;
      *(&v115 - 2) = v32;
      uint64_t v114 = sub_1001E9E84;
      goto LABEL_93;
    }
    uint64_t v10 = 0;
    uint64_t v84 = objc_sync_exit((id)v32);
    if (v84)
    {
      __chkstk_darwin(v84);
      long long v113 = &v115 - 4;
      *(&v115 - 2) = v32;
      uint64_t v114 = sub_1001E9FE8;
LABEL_93:
      fp_preconditionFailure(_:file:line:)((uint64_t (*)(uint64_t))v114, (uint64_t)v113, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderExtensions/fssync/libfssync/utilities/Utilities.swift", 103, 2, 318);
    }
    swift_release_n();
    ++v71;
    if (TupleTypeMetadata2 == sub_10096C1A0()) {
      goto LABEL_72;
    }
  }
  uint64_t v32 = sub_10096CC20();
  BOOL v82 = __OFADD__(v80, 1);
  TupleTypeMetadata2 = v71 - 3;
  if (!v82) {
    goto LABEL_45;
  }
LABEL_52:
  __break(1u);
LABEL_53:
  uint64_t v132 = (void (**)(char *, uint64_t))TupleTypeMetadata2;
  uint64_t v85 = v136;
  swift_bridgeObjectRetain();
  uint64_t v86 = sub_10096C1A0();
  uint64_t v87 = v125;
  if (v86)
  {
    uint64_t v32 = 0;
    uint64_t v151 = (char *)(v139 + 16);
    uint64_t v134 = (void (**)(char *, long long *, uint64_t))v71;
    uint64_t v135 = (char *)(v139 + 32);
    char v133 = (void (**)(char *, uint64_t))(v139 + 8);
    do
    {
      BOOL v89 = sub_10096C130();
      sub_10096C0E0();
      if (v89)
      {
        unint64_t v90 = v85
            + ((*(unsigned __int8 *)(v139 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v139 + 80))
            + *(void *)(v139 + 72) * v32;
        uint64_t v91 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v139 + 16);
        uint64_t v39 = v91(v126, v90, v10);
        uint64_t v92 = v32 + 1;
        if (__OFADD__(v32, 1)) {
          goto LABEL_80;
        }
      }
      else
      {
        uint64_t v39 = sub_10096CC20();
        if (v116 != 8) {
          goto LABEL_86;
        }
        *(void *)&long long v142 = v39;
        uint64_t v91 = *(uint64_t (**)(char *, unint64_t, uint64_t))v151;
        (*(void (**)(char *, long long *, uint64_t))v151)(v126, &v142, v10);
        uint64_t v39 = swift_unknownObjectRelease();
        uint64_t v92 = v32 + 1;
        if (__OFADD__(v32, 1)) {
          goto LABEL_80;
        }
      }
      (*(void (**)(char *, char *, uint64_t))v135)(v87, v126, v10);
      swift_beginAccess();
      sub_10096BAA0();
      uint64_t v93 = v146;
      swift_endAccess();
      uint64_t v87 = v125;
      sub_1000DBF10(v93);
      if (!v93)
      {
        v91(v124, (unint64_t)v87, v10);
        *(void *)&long long v146 = _swiftEmptyArrayStorage;
        *((void *)&v146 + 1) = _swiftEmptyArrayStorage;
        swift_beginAccess();
        sub_10096BAB0();
        swift_endAccess();
      }
      v91(v75, (unint64_t)v87, v10);
      swift_beginAccess();
      uint64_t v95 = (void (*)(void *, void))sub_10096BA90();
      if (*v94)
      {
        uint64_t v96 = (void **)v94;
        uint64_t v39 = sub_10002B70C(v137, (uint64_t)&v146, qword_100ACE608);
        if (!v147) {
          goto LABEL_85;
        }
        sub_1001E9E64(&v146, (uint64_t)&v142);
        *((void *)&v144 + 1) = v122;
        char v145 = 0;
        uint64_t v97 = *v96;
        char v98 = swift_isUniquelyReferenced_nonNull_native();
        char *v96 = v97;
        if ((v98 & 1) == 0)
        {
          uint64_t v97 = sub_1006A266C(0, v97[2] + 1, 1, v97);
          char *v96 = v97;
        }
        unint64_t v100 = v97[2];
        unint64_t v99 = v97[3];
        if (v100 >= v99 >> 1)
        {
          uint64_t v97 = sub_1006A266C((void *)(v99 > 1), v100 + 1, 1, v97);
          char *v96 = v97;
        }
        v97[2] = v100 + 1;
        int v101 = &v97[7 * v100];
        long long v102 = v142;
        long long v103 = v143;
        long long v104 = v144;
        *((unsigned char *)v101 + 80) = v145;
        *((_OWORD *)v101 + 3) = v103;
        *((_OWORD *)v101 + 4) = v104;
        *((_OWORD *)v101 + 2) = v102;
        v95(v148, 0);
        swift_endAccess();
        int v105 = *v133;
        int64_t v75 = v123;
        (*v133)(v123, v10);
        uint64_t v87 = v125;
        v105(v125, v10);
        uint64_t v85 = v136;
      }
      else
      {
        v95(v148, 0);
        swift_endAccess();
        uint64_t v88 = *v133;
        (*v133)(v75, v10);
        v88(v87, v10);
        uint64_t v85 = v136;
      }
      ++v32;
    }
    while (v92 != sub_10096C1A0());
  }
  swift_bridgeObjectRelease();
  uint64_t v39 = sub_10002B70C(v137, (uint64_t)&v142, qword_100ACE608);
  uint64_t v108 = *((void *)&v143 + 1);
  if (!*((void *)&v143 + 1)) {
    goto LABEL_89;
  }
  uint64_t v109 = v144;
  sub_10002689C(&v142, *((uint64_t *)&v143 + 1));
  uint64_t v110 = (*(uint64_t (**)(uint64_t, uint64_t))(v109 + 16))(v108, v109);
  uint64_t v78 = v128;
  v148[0] = v85;
  v148[1] = v128;
  uint64_t v149 = v110;
  uint64_t v150 = v111;
  swift_beginAccess();
  sub_10096BA80();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10096BAB0();
  swift_endAccess();
  uint64_t result = sub_1000268E0((uint64_t)&v142);
LABEL_76:
  uint64_t v76 = v119;
  char v77 = (char)v127;
LABEL_77:
  *(void *)uint64_t v76 = v78;
  *(unsigned char *)(v76 + 8) = (v77 & 1) == 0;
  return result;
}

uint64_t sub_1001E38F8(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v23 = a5;
  uint64_t v24 = a6;
  uint64_t v25 = a4;
  uint64_t v22 = a1;
  uint64_t v8 = type metadata accessor for JobLockRule();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v26 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v10 = __chkstk_darwin(TupleTypeMetadata2);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v22 - v13;
  uint64_t v16 = *a2;
  uint64_t v15 = a2[1];
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16);
  v17((char *)&v22 - v13, v22, v8);
  uint64_t v18 = &v14[*(int *)(TupleTypeMetadata2 + 48)];
  *(void *)uint64_t v18 = v16;
  *((void *)v18 + 1) = v15;
  uint64_t v31 = a3;
  uint64_t v19 = &v12[*(int *)(TupleTypeMetadata2 + 48)];
  v17(v12, (uint64_t)v14, v8);
  *(void *)uint64_t v19 = v16;
  *((void *)v19 + 1) = v15;
  uint64_t v27 = v23;
  uint64_t v28 = v24;
  uint64_t v29 = v12;
  uint64_t v30 = v25;
  sub_10096C1C0();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_getWitnessTable();
  LOBYTE(v15) = sub_10096BF70();
  uint64_t v20 = *(void (**)(char *, uint64_t))(v26 + 8);
  v20(v14, TupleTypeMetadata2);
  v20(v12, TupleTypeMetadata2);
  return v15 & 1;
}

uint64_t sub_1001E3B48(uint64_t a1, char *a2, unint64_t a3)
{
  uint64_t v5 = type metadata accessor for JobLockRule();
  if ((sub_1001DCD70(a2, v5) & 1) == 0) {
    return 0;
  }
  uint64_t v6 = *(void *)&a2[*(int *)(swift_getTupleTypeMetadata2() + 48)];
  uint64_t v7 = *(void *)(v6 + 16);
  if (!v7) {
    return 0;
  }
  uint64_t v8 = v6 + 32;
  swift_bridgeObjectRetain();
  while (1)
  {
    sub_10002B70C(v8, (uint64_t)v13, (uint64_t *)&unk_100AD70B0);
    if (v15) {
      break;
    }
    unint64_t v9 = v14;
    sub_10009CA78((uint64_t)v13, (uint64_t)v11);
    v11[5] = v9;
    char v12 = 0;
    sub_1000268E0((uint64_t)v11);
    sub_1001E9D10((uint64_t)v13);
    if (v9 > a3) {
      goto LABEL_10;
    }
    v8 += 56;
    if (!--v7)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  sub_1001E9D10((uint64_t)v13);
LABEL_10:
  swift_bridgeObjectRelease();
  return 1;
}

uint64_t sub_1001E3C78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for JobLockRule();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  __chkstk_darwin(TupleTypeMetadata2 - 8);
  uint64_t v7 = (char *)&v10 - v6;
  uint64_t v8 = *(void *)(v4 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v10 - v6, a1, v4);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(a2, v7, v4);
}

uint64_t sub_1001E3D84()
{
  return swift_endAccess();
}

uint64_t sub_1001E3E98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = type metadata accessor for JobLockRule();
  sub_10096D230();
  uint64_t v5 = *(void *)(v4 - 8);
  swift_allocObject();
  uint64_t v6 = sub_10096C0D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v7, a3, v4);
  sub_1003FC080(v6);
  uint64_t v8 = sub_1001E2584();
  swift_bridgeObjectRelease();
  return v8;
}

Swift::Int sub_1001E3FD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v106 = a1;
  uint64_t v103 = 0;
  uint64_t v7 = type metadata accessor for JobLockRule();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v93 = (char *)&v88 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v88 - v12;
  uint64_t v89 = v14;
  __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v88 - v15;
  uint64_t v115 = &_swiftEmptySetSingleton;
  swift_bridgeObjectRetain();
  uint64_t v17 = sub_10096C1A0();
  uint64_t v100 = v4;
  uint64_t v104 = v7;
  if (!v17)
  {
    swift_bridgeObjectRelease();
    long long v66 = &_swiftEmptySetSingleton;
    goto LABEL_73;
  }
  uint64_t v18 = 0;
  int v101 = (void *)(v4 + 16);
  long long v102 = (void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  uint64_t v96 = (void (**)(char *, char *, uint64_t))(v8 + 32);
  uint64_t v95 = (void (**)(char *, uint64_t))(v8 + 8);
  uint64_t v92 = a3;
  uint64_t v91 = v8;
  uint64_t v94 = v13;
  unint64_t v90 = v16;
  while (1)
  {
    BOOL v19 = sub_10096C130();
    sub_10096C0E0();
    if (v19)
    {
      unint64_t v20 = a3
          + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
          + *(void *)(v8 + 72) * (void)v18;
      unint64_t v99 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
      v99(v16, v20, v7);
      BOOL v21 = __OFADD__(v18, 1);
      uint64_t v18 = (char *)v18 + 1;
      if (v21) {
        goto LABEL_70;
      }
    }
    else
    {
      Swift::Int result = sub_10096CC20();
      if (v89 != 8) {
        goto LABEL_113;
      }
      Swift::Int v109 = result;
      unint64_t v99 = *v102;
      v99(v16, (unint64_t)&v109, v7);
      swift_unknownObjectRelease();
      BOOL v21 = __OFADD__(v18, 1);
      uint64_t v18 = (char *)v18 + 1;
      if (v21)
      {
LABEL_70:
        __break(1u);
LABEL_71:
        swift_bridgeObjectRelease();
        long long v66 = v115;
LABEL_73:
        uint64_t v67 = v66[7];
        uint64_t WitnessTable = (uint64_t)(v66 + 7);
        uint64_t v68 = 1 << *((unsigned char *)v66 + 32);
        uint64_t v69 = -1;
        if (v68 < 64) {
          uint64_t v69 = ~(-1 << v68);
        }
        unint64_t v70 = v69 & v67;
        uint64_t v71 = v4 + 32;
        unint64_t v99 = (void (*)(char *, unint64_t, uint64_t))((unint64_t)(v68 + 63) >> 6);
        Swift::Int result = swift_bridgeObjectRetain();
        LODWORD(v96) = 0;
        uint64_t v72 = 0;
        uint64_t v73 = &type metadata for String;
        uint64_t v74 = &protocol witness table for String;
        uint64_t v97 = v66;
        if (v70) {
          goto LABEL_78;
        }
LABEL_79:
        BOOL v21 = __OFADD__(v72++, 1);
        if (v21) {
          goto LABEL_104;
        }
        if (v72 < (uint64_t)v99)
        {
          unint64_t v76 = *(void *)(WitnessTable + 8 * v72);
          if (v76) {
            goto LABEL_89;
          }
          uint64_t v77 = v72 + 1;
          if (v72 + 1 < (uint64_t)v99)
          {
            unint64_t v76 = *(void *)(WitnessTable + 8 * v77);
            if (v76) {
              goto LABEL_88;
            }
            uint64_t v77 = v72 + 2;
            if (v72 + 2 < (uint64_t)v99)
            {
              unint64_t v76 = *(void *)(WitnessTable + 8 * v77);
              if (v76) {
                goto LABEL_88;
              }
              uint64_t v77 = v72 + 3;
              if (v72 + 3 < (uint64_t)v99)
              {
                unint64_t v76 = *(void *)(WitnessTable + 8 * v77);
                if (!v76)
                {
                  while (1)
                  {
                    uint64_t v72 = v77 + 1;
                    if (__OFADD__(v77, 1)) {
                      goto LABEL_112;
                    }
                    if (v72 >= (uint64_t)v99) {
                      goto LABEL_100;
                    }
                    unint64_t v76 = *(void *)(WitnessTable + 8 * v72);
                    ++v77;
                    if (v76) {
                      goto LABEL_89;
                    }
                  }
                }
LABEL_88:
                uint64_t v72 = v77;
LABEL_89:
                uint64_t v106 = (v76 - 1) & v76;
                for (unint64_t i = __clz(__rbit64(v76)) + (v72 << 6); ; unint64_t i = __clz(__rbit64(v70)) | (v72 << 6))
                {
                  uint64_t v78 = (void *)(v66[6] + 16 * i);
                  uint64_t v79 = (void *)*v78;
                  uint64_t v80 = v78[1];
                  swift_beginAccess();
                  int v105 = v79;
                  long long v113 = v79;
                  uint64_t v114 = v80;
                  sub_10096C1C0();
                  swift_bridgeObjectRetain_n();
                  swift_getTupleTypeMetadata2();
                  sub_10096BAA0();
                  swift_bridgeObjectRelease();
                  if (v107)
                  {
                    int v101 = v107;
                    long long v102 = (void (**)(char *, unint64_t, uint64_t))v72;
                    BOOL v81 = v74;
                    BOOL v82 = v73;
                    uint64_t v83 = v71;
                    Swift::Int v84 = v108;
                    swift_endAccess();
                    Swift::Int v109 = v84;
                    swift_bridgeObjectRetain();
                    swift_getWitnessTable();
                    uint64_t v85 = v103;
                    uint64_t v86 = sub_10096CCA0();
                    uint64_t v103 = v85;
                    Swift::Int v109 = v86;
                    swift_getWitnessTable();
                    if (sub_10096C460())
                    {
                      swift_bridgeObjectRelease();
                      uint64_t v107 = 0;
                      Swift::Int v108 = 0;
                      uint64_t v87 = v105;
                      long long v113 = v105;
                      uint64_t v114 = v80;
                      uint64_t v71 = v83;
                      swift_beginAccess();
                      uint64_t v73 = v82;
                      uint64_t v74 = v81;
                      sub_10096BA80();
                      swift_bridgeObjectRetain();
                      sub_10096BAB0();
                      swift_endAccess();
                      sub_1001E3FD8(v87, v80, v101);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      Swift::Int result = swift_bridgeObjectRelease();
                      LODWORD(v96) = 1;
                    }
                    else
                    {
                      swift_bridgeObjectRelease();
                      uint64_t v107 = v101;
                      Swift::Int v108 = v86;
                      long long v113 = v105;
                      uint64_t v114 = v80;
                      uint64_t v71 = v83;
                      swift_beginAccess();
                      uint64_t v73 = v82;
                      uint64_t v74 = v81;
                      sub_10096BA80();
                      sub_10096BAB0();
                      Swift::Int result = swift_endAccess();
                    }
                    long long v66 = v97;
                    uint64_t v72 = (uint64_t)v102;
                    unint64_t v70 = v106;
                    if (!v106) {
                      goto LABEL_79;
                    }
                  }
                  else
                  {
                    swift_endAccess();
                    Swift::Int result = swift_bridgeObjectRelease();
                    unint64_t v70 = v106;
                    if (!v106) {
                      goto LABEL_79;
                    }
                  }
LABEL_78:
                  uint64_t v106 = (v70 - 1) & v70;
                }
              }
            }
          }
        }
LABEL_100:
        swift_release();
        swift_bridgeObjectRelease();
        return v96 & 1;
      }
    }
    (*v96)(v13, v16, v7);
    swift_beginAccess();
    uint64_t WitnessTable = swift_getWitnessTable();
    sub_10096BAA0();
    uint64_t v22 = v107;
    if (v107) {
      break;
    }
    swift_endAccess();
    (*v95)(v13, v7);
LABEL_4:
    if (v18 == (void *)sub_10096C1A0()) {
      goto LABEL_71;
    }
  }
  uint64_t v97 = v18;
  Swift::Int v23 = v108;
  long long v113 = v107;
  swift_endAccess();
  uint64_t v24 = v22[2];
  int v105 = (void *)v23;
  if (!v24)
  {
    int64_t v37 = 0;
    goto LABEL_45;
  }
  uint64_t v25 = (uint64_t)(v22 + 4);
  swift_bridgeObjectRetain();
  unint64_t v26 = 0;
  uint64_t v27 = 11;
  unint64_t v28 = 1;
  while (1)
  {
    sub_10002B70C(v25, (uint64_t)&v109, (uint64_t *)&unk_100AD70B0);
    uint64_t v29 = v110;
    uint64_t v30 = v111;
    sub_10002689C(&v109, v110);
    uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 16))(v29, v30);
    uint64_t v33 = v106;
    if (v31 == v106 && v32 == a2)
    {
      swift_bridgeObjectRelease();
      sub_1001E9D10((uint64_t)&v109);
      Swift::Int result = swift_bridgeObjectRelease();
      goto LABEL_20;
    }
    char v35 = sub_10096D2D0();
    swift_bridgeObjectRelease();
    sub_1001E9D10((uint64_t)&v109);
    if (v35) {
      break;
    }
    ++v26;
    v25 += 56;
    ++v28;
    v27 += 7;
    if (v24 == v26)
    {
      Swift::Int result = swift_bridgeObjectRelease();
      int64_t v37 = v113[2];
      uint64_t v7 = v104;
      goto LABEL_44;
    }
  }
  Swift::Int result = swift_bridgeObjectRelease();
  uint64_t v33 = v106;
LABEL_20:
  int64_t v37 = v26 + 1;
  uint64_t v7 = v104;
  if (__OFADD__(v26, 1)) {
    goto LABEL_111;
  }
  BOOL v38 = v113;
  unint64_t v39 = v113[2];
  if (v37 == v39)
  {
LABEL_43:
    uint64_t v24 = v26;
LABEL_44:
    Swift::Int v23 = (Swift::Int)v105;
    if (v37 < v24) {
      goto LABEL_105;
    }
LABEL_45:
    sub_10079B83C(v24, v37);
    uint64_t v47 = v113;
    uint64_t v48 = v113[2];
    if (v48)
    {
      uint64_t v49 = (uint64_t)(v113 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v4 = v100;
      uint64_t v13 = v94;
      while (1)
      {
        sub_10002B70C(v49, (uint64_t)&v109, (uint64_t *)&unk_100AD70B0);
        char v50 = v112;
        sub_1001E9D10((uint64_t)&v109);
        if (v50) {
          break;
        }
        v49 += 56;
        if (!--v48)
        {
          Swift::Int v23 = (Swift::Int)v105;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_50;
        }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!v47[2]) {
        goto LABEL_60;
      }
      goto LABEL_65;
    }
LABEL_50:
    int64_t v51 = *(void *)(v23 + 16);
    if (v51)
    {
      uint64_t v107 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain();
      sub_100021770(0, v51, 0);
      uint64_t v52 = v23 + 32;
      uint64_t v53 = v107;
      do
      {
        sub_10009CA78(v52, (uint64_t)&v109);
        uint64_t v54 = v110;
        uint64_t v55 = v111;
        sub_10002689C(&v109, v110);
        uint64_t v56 = (*(uint64_t (**)(uint64_t, uint64_t))(v55 + 16))(v54, v55);
        uint64_t v58 = v57;
        sub_1000268E0((uint64_t)&v109);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_100021770(0, v53[2] + 1, 1);
          uint64_t v53 = v107;
        }
        unint64_t v60 = v53[2];
        unint64_t v59 = v53[3];
        if (v60 >= v59 >> 1)
        {
          sub_100021770((char *)(v59 > 1), v60 + 1, 1);
          uint64_t v53 = v107;
        }
        v53[2] = v60 + 1;
        unint64_t v61 = &v53[2 * v60];
        v61[4] = v56;
        v61[5] = v58;
        v52 += 40;
        --v51;
      }
      while (v51);
      swift_bridgeObjectRelease();
      uint64_t v7 = v104;
      uint64_t v62 = v53[2];
      if (!v62)
      {
LABEL_64:
        swift_bridgeObjectRelease();
        uint64_t v4 = v100;
        uint64_t v13 = v94;
        if (!v47[2])
        {
LABEL_60:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v99(v93, (unint64_t)v13, v7);
          uint64_t v107 = 0;
          Swift::Int v108 = 0;
LABEL_66:
          swift_beginAccess();
          sub_10096BA80();
          sub_10096BAB0();
          swift_endAccess();
          (*v95)(v13, v7);
          a3 = v92;
          uint64_t v8 = v91;
          uint64_t v16 = v90;
          uint64_t v18 = v97;
          goto LABEL_4;
        }
LABEL_65:
        v99(v93, (unint64_t)v13, v7);
        uint64_t v107 = v47;
        Swift::Int v108 = (Swift::Int)v105;
        goto LABEL_66;
      }
    }
    else
    {
      uint64_t v53 = _swiftEmptyArrayStorage;
      uint64_t v62 = _swiftEmptyArrayStorage[2];
      if (!v62) {
        goto LABEL_64;
      }
    }
    uint64_t v63 = v53 + 5;
    do
    {
      Swift::Int v64 = *(v63 - 1);
      Swift::Int v65 = *v63;
      swift_bridgeObjectRetain();
      sub_100494FA0(&v109, v64, v65);
      swift_bridgeObjectRelease();
      v63 += 2;
      --v62;
    }
    while (v62);
    goto LABEL_64;
  }
  while (v28 < v39)
  {
    sub_10002B70C((uint64_t)&v38[v27], (uint64_t)&v109, (uint64_t *)&unk_100AD70B0);
    uint64_t v40 = v110;
    uint64_t v41 = v111;
    sub_10002689C(&v109, v110);
    if ((*(uint64_t (**)(uint64_t, uint64_t))(v41 + 16))(v40, v41) == v33 && v42 == a2)
    {
      swift_bridgeObjectRelease();
      Swift::Int result = sub_1001E9D10((uint64_t)&v109);
    }
    else
    {
      char v44 = sub_10096D2D0();
      swift_bridgeObjectRelease();
      Swift::Int result = sub_1001E9D10((uint64_t)&v109);
      if ((v44 & 1) == 0)
      {
        if (v28 != v26)
        {
          if ((v26 & 0x8000000000000000) != 0) {
            goto LABEL_106;
          }
          unint64_t v45 = v113;
          unint64_t v46 = v113[2];
          if (v26 >= v46) {
            goto LABEL_107;
          }
          Swift::Int result = sub_10002B70C((uint64_t)&v113[7 * v26 + 4], (uint64_t)&v109, (uint64_t *)&unk_100AD70B0);
          if (v28 >= v46) {
            goto LABEL_108;
          }
          sub_10002B70C((uint64_t)&v45[v27], (uint64_t)&v107, (uint64_t *)&unk_100AD70B0);
          Swift::Int result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            Swift::Int result = (Swift::Int)sub_100794FC0(v45);
            unint64_t v45 = (void *)result;
            long long v113 = (void *)result;
          }
          if (v26 >= v45[2]) {
            goto LABEL_109;
          }
          Swift::Int result = sub_1001E9F48((uint64_t)&v107, (uint64_t)&v45[7 * v26 + 4]);
          if (v28 >= v113[2]) {
            goto LABEL_110;
          }
          Swift::Int result = sub_1001E9F48((uint64_t)&v109, (uint64_t)&v113[v27]);
        }
        BOOL v21 = __OFADD__(v26++, 1);
        if (v21) {
          goto LABEL_103;
        }
      }
    }
    int64_t v37 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      goto LABEL_102;
    }
    BOOL v38 = v113;
    unint64_t v39 = v113[2];
    ++v28;
    v27 += 7;
    if (v37 == v39) {
      goto LABEL_43;
    }
  }
  __break(1u);
LABEL_102:
  __break(1u);
LABEL_103:
  __break(1u);
LABEL_104:
  __break(1u);
LABEL_105:
  __break(1u);
LABEL_106:
  __break(1u);
LABEL_107:
  __break(1u);
LABEL_108:
  __break(1u);
LABEL_109:
  __break(1u);
LABEL_110:
  __break(1u);
LABEL_111:
  __break(1u);
LABEL_112:
  __break(1u);
LABEL_113:
  __break(1u);
  return result;
}

uint64_t sub_1001E4DC4()
{
  swift_beginAccess();
  type metadata accessor for JobLockRule();
  swift_getWitnessTable();
  sub_10096BAA0();
  uint64_t v0 = v6;
  if (!v6)
  {
    swift_endAccess();
    return 0;
  }
  swift_endAccess();
  uint64_t v1 = *(void *)(v6 + 16);
  if (!v1)
  {
LABEL_7:
    sub_1000DBF10(v0);
    return 0;
  }
  uint64_t v2 = v6 + 32;
  swift_bridgeObjectRetain();
  while (1)
  {
    sub_10002B70C(v2, (uint64_t)v5, (uint64_t *)&unk_100AD70B0);
    char v3 = v5[48];
    sub_1001E9D10((uint64_t)v5);
    if (v3) {
      break;
    }
    v2 += 56;
    if (!--v1)
    {
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease();
  sub_1000DBF10(v0);
  return 1;
}

uint64_t sub_1001E4F38@<X0>(void *a1@<X1>, unsigned char *a2@<X8>)
{
  uint64_t v4 = a1[5];
  uint64_t v5 = a1[6];
  sub_10002689C(a1 + 2, v4);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 16))(v4, v5);
  char v8 = sub_1001E3FD8(v6, v7, a1[7]);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v8 & 1;
  return result;
}

uint64_t sub_1001E4FD4(uint64_t a1)
{
  return sub_1001E557C(a1, (void (*)(void))sub_1001E9B90);
}

uint64_t sub_1001E4FEC(id *a1, uint64_t a2)
{
  uint64_t v4 = *((void *)*a1 + 10);
  uint64_t v31 = (void (**)(char *, uint64_t))*((void *)*a1 + 11);
  uint64_t v32 = v4;
  uint64_t v5 = type metadata accessor for JobLockRule();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v6 = __chkstk_darwin(TupleTypeMetadata2);
  uint64_t v33 = (char *)v30 - v7;
  uint64_t v8 = *(void *)(v5 - 8);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)v30 - v9;
  swift_beginAccess();
  swift_getWitnessTable();
  uint64_t v37 = a2;
  sub_10096BAA0();
  uint64_t v11 = v35;
  uint64_t v12 = v36;
  uint64_t result = swift_endAccess();
  if (v11) {
    uint64_t v14 = v12;
  }
  else {
    uint64_t v14 = 0;
  }
  if (v11) {
    uint64_t v15 = v11;
  }
  else {
    uint64_t v15 = _swiftEmptyArrayStorage;
  }
  uint64_t v16 = v14 + 1;
  if (__OFADD__(v14, 1))
  {
    __break(1u);
    return result;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v37, v5);
  char v35 = v15;
  uint64_t v36 = v16;
  swift_beginAccess();
  sub_10096BA80();
  v30[1] = v15;
  swift_bridgeObjectRetain();
  sub_10096BAB0();
  swift_endAccess();
  id v17 = [a1[5] allObjects];
  type metadata accessor for JobLockAggregator();
  uint64_t v18 = sub_10096C0A0();

  if (!sub_10096C1A0()) {
    goto LABEL_17;
  }
  uint64_t v31 = (void (**)(char *, uint64_t))(v8 + 8);
  uint64_t v32 = v5;
  uint64_t v19 = 4;
  unint64_t v20 = v33;
  uint64_t v21 = TupleTypeMetadata2;
  while (1)
  {
    uint64_t v22 = v19 - 4;
    BOOL v23 = sub_10096C130();
    sub_10096C0E0();
    if (!v23) {
      break;
    }
    uint64_t v24 = *(void *)(v18 + 8 * v19);
    uint64_t v25 = swift_retain();
    BOOL v26 = __OFADD__(v22, 1);
    uint64_t v27 = v19 - 3;
    if (v26) {
      goto LABEL_16;
    }
LABEL_12:
    __chkstk_darwin(v25);
    uint64_t v28 = v37;
    v30[-2] = v24;
    v30[-1] = v28;
    uint64_t v29 = (void *)swift_retain();
    sub_10026BFF4(v29, (void (*)(void))sub_1001E9BAC);
    swift_release_n();
    (*v31)(&v20[*(int *)(v21 + 48)], v32);
    ++v19;
    if (v27 == sub_10096C1A0()) {
      goto LABEL_17;
    }
  }
  uint64_t v25 = sub_10096CC20();
  uint64_t v24 = v25;
  BOOL v26 = __OFADD__(v22, 1);
  uint64_t v27 = v19 - 3;
  if (!v26) {
    goto LABEL_12;
  }
LABEL_16:
  __break(1u);
LABEL_17:
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1001E53CC@<X0>(uint64_t a1@<X1>, unsigned char *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for JobLockRule();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v10 - v6;
  swift_getTupleTypeMetadata2();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  swift_beginAccess();
  swift_getWitnessTable();
  sub_10096C3A0();
  char v8 = sub_10096C330();
  uint64_t result = swift_endAccess();
  *a2 = v8 & 1;
  return result;
}

uint64_t sub_1001E5564(uint64_t a1)
{
  return sub_1001E557C(a1, (void (*)(void))sub_1001E9B74);
}

uint64_t sub_1001E557C(uint64_t a1, void (*a2)(void))
{
  return sub_10026BFF4(v2, a2);
}

uint64_t sub_1001E55B4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for JobLockRule();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v12 - v5;
  swift_beginAccess();
  swift_getWitnessTable();
  sub_10096BAA0();
  uint64_t v7 = v13;
  if (!v13) {
    return swift_endAccess();
  }
  uint64_t v8 = v14;
  uint64_t result = swift_endAccess();
  BOOL v10 = __OFSUB__(v8, 1);
  uint64_t v11 = v8 - 1;
  if (!v10)
  {
    if (*(void *)(v7 + 16) | v11)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a2, v3);
      uint64_t v13 = v7;
      uint64_t v14 = v11;
    }
    else
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a2, v3);
      uint64_t v13 = 0;
      uint64_t v14 = 0;
    }
    swift_beginAccess();
    sub_10096BA80();
    sub_10096BAB0();
    return swift_endAccess();
  }
  __break(1u);
  return result;
}

uint64_t sub_1001E57C0()
{
  return sub_10026BE58(v0, (void (*)(uint64_t *__return_ptr))sub_1001E9C34) & 1;
}

uint64_t sub_1001E5810@<X0>(unsigned char *a1@<X8>)
{
  swift_beginAccess();
  type metadata accessor for JobLockRule();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  sub_10096BA80();
  swift_getWitnessTable();
  char v2 = sub_10096BF70();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2 & 1;
  return result;
}

uint64_t sub_1001E5950(char *a1)
{
  uint64_t v2 = type metadata accessor for JobLockRule();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v30 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v4 = __chkstk_darwin(TupleTypeMetadata2);
  uint64_t v29 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v27 - v6;
  char v8 = sub_1001DCD70(a1, v2);
  uint64_t v32 = TupleTypeMetadata2;
  uint64_t v9 = *(int *)(TupleTypeMetadata2 + 48);
  BOOL v10 = &v7[v9];
  uint64_t v11 = &a1[v9];
  uint64_t v28 = *(void *)(v2 - 8);
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v28 + 16);
  v12(v7, a1, v2);
  uint64_t v13 = *(void *)v11;
  uint64_t v14 = *((void *)v11 + 1);
  *(void *)BOOL v10 = *(void *)v11;
  *((void *)v10 + 1) = v14;
  if (v8)
  {
    uint64_t v15 = v32;
    uint64_t v16 = v29;
    id v17 = &v29[*(int *)(v32 + 48)];
    v12(v29, v7, v2);
    *(void *)id v17 = v13;
    *((void *)v17 + 1) = v14;
    uint64_t v18 = *(void *)(v13 + 16);
    uint64_t v19 = v7;
    if (v18)
    {
      uint64_t v27 = v7;
      uint64_t v20 = v13 + 32;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      uint64_t v21 = v30;
      uint64_t v22 = v28;
      while (1)
      {
        sub_10002B70C(v20, (uint64_t)v31, (uint64_t *)&unk_100AD70B0);
        char v23 = v31[48];
        sub_1001E9D10((uint64_t)v31);
        if (v23) {
          break;
        }
        v20 += 56;
        if (!--v18)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v24 = 0;
          goto LABEL_10;
        }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v24 = 1;
LABEL_10:
      uint64_t v16 = v29;
      uint64_t v19 = v27;
      uint64_t v15 = v32;
    }
    else
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v24 = 0;
      uint64_t v21 = v30;
      uint64_t v22 = v28;
    }
    (*(void (**)(char *, uint64_t))(v21 + 8))(v19, v15);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v16, v2);
  }
  else
  {
    uint64_t v25 = *(void (**)(char *, uint64_t))(v30 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v25(v7, v32);
    return 0;
  }
  return v24;
}

uint64_t sub_1001E5C40()
{
  return sub_10026BD8C(v0, (void (*)(uint64_t *__return_ptr))sub_1001E9AE4);
}

void sub_1001E5C88(void *a1@<X8>)
{
  sub_10096CBD0(21);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  type metadata accessor for JobLockRule();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  sub_10096BA20();
  swift_bridgeObjectRelease();
  v2._uint64_t countAndFlagsBits = sub_10096D220();
  sub_10096BDC0(v2);
  swift_bridgeObjectRelease();
  v3._uint64_t countAndFlagsBits = 0x2065766974636120;
  v3._object = (void *)0xED000073656C7572;
  sub_10096BDC0(v3);
  *a1 = 0x202092949FF0;
  a1[1] = 0xA600000000000000;
}

uint64_t sub_1001E5DF4()
{
  type metadata accessor for JobLockRule();
  swift_getWitnessTable();
  sub_10096BA30();
  sub_100033BE8(&qword_100ACE5F8);
  swift_getWitnessTable();
  sub_10096CD60();
  swift_getWitnessTable();
  sub_1001E9D8C();
  sub_10096CD40();
  swift_getWitnessTable();
  sub_10096CC00();
  return sub_10026BFF4(v0, (void (*)(void))sub_1001E9D70);
}

uint64_t sub_1001E5F6C(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v2 = *(void *)(a1 + 16);
  Swift::String v3 = (void *)type metadata accessor for JobLockRule();
  swift_getWitnessTable();
  v4._uint64_t countAndFlagsBits = v2;
  v4._object = v3;
  Filename.init(rawValue:)(v4);
  sub_10096BA30();
  swift_getWitnessTable();
  sub_10096BF50();
  sub_10096CC00();
  sub_10002B7CC(&qword_100ACE5F8);
  swift_getWitnessTable();
  sub_1001E9D8C();
  sub_10096CF10();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1001E611C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(a1 + 8);
  return swift_bridgeObjectRetain();
}

uint64_t sub_1001E6128()
{
  return sub_10026BE58(v0, (void (*)(uint64_t *__return_ptr))sub_1001E9B58) & 1;
}

uint64_t sub_1001E6174@<X0>(unsigned char *a1@<X8>)
{
  swift_beginAccess();
  type metadata accessor for JobLockRule();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  char v2 = sub_10096BA50();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2)
  {
    swift_beginAccess();
    sub_10096C1C0();
    swift_bridgeObjectRetain();
    swift_getTupleTypeMetadata2();
    char v4 = sub_10096BA50();
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    char v4 = 0;
  }
  *a1 = v4 & 1;
  return result;
}

uint64_t sub_1001E62D4()
{
  return sub_10026BFF4(v0, (void (*)(void))sub_1001E9B00);
}

uint64_t sub_1001E631C(uint64_t a1)
{
  type metadata accessor for JobLockRule();
  swift_getTupleTypeMetadata2();
  sub_10096C110();
  swift_getWitnessTable();
  uint64_t v2 = sub_10096BA00();
  swift_beginAccess();
  *(void *)(a1 + 16) = v2;
  swift_bridgeObjectRelease();
  sub_10096C1C0();
  swift_getTupleTypeMetadata2();
  swift_getTupleTypeMetadata2();
  sub_10096C110();
  uint64_t v3 = sub_10096BA00();
  swift_beginAccess();
  *(void *)(a1 + 32) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1001E64A8()
{
  return sub_10026BFF4(v0, (void (*)(void))sub_1001E9B1C);
}

uint64_t sub_1001E64F8(uint64_t a1, void *a2, int a3)
{
  int v46 = a3;
  uint64_t v56 = a2;
  uint64_t v4 = type metadata accessor for JobLockRule();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v55 = (char *)&v44 - v6;
  uint64_t v66 = v7;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v59 = sub_10096C890();
  uint64_t v9 = *(void *)(v59 - 8);
  uint64_t v10 = __chkstk_darwin(v59);
  uint64_t v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  unint64_t v60 = (char *)&v44 - v13;
  swift_beginAccess();
  uint64_t v45 = a1;
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(v14 + 64);
  uint64_t v47 = v14 + 64;
  uint64_t v16 = 1 << *(unsigned char *)(v14 + 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & v15;
  uint64_t v61 = TupleTypeMetadata2;
  uint64_t v49 = v5 + 16;
  uint64_t v50 = v5;
  uint64_t v57 = (void (**)(char *, char *, uint64_t))(v9 + 32);
  uint64_t v58 = TupleTypeMetadata2 - 8;
  uint64_t v52 = (uint64_t (**)(char *, uint64_t))(v5 + 8);
  uint64_t v53 = (void (**)(char *, char *, uint64_t))(v5 + 32);
  int64_t v48 = (unint64_t)(v16 + 63) >> 6;
  int64_t v44 = v48 - 1;
  uint64_t v51 = v14;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v62 = 0;
  uint64_t v54 = v12;
  uint64_t v20 = v66;
  if (!v18) {
    goto LABEL_6;
  }
LABEL_4:
  unint64_t v21 = __clz(__rbit64(v18));
  uint64_t v22 = (v18 - 1) & v18;
  uint64_t v23 = v61;
  unint64_t v24 = v21 | (v62 << 6);
  uint64_t v25 = v60;
LABEL_5:
  uint64_t v26 = v51;
  (*(void (**)(char *, unint64_t, uint64_t))(v50 + 16))(v12, *(void *)(v51 + 48) + *(void *)(v50 + 72) * v24, v66);
  uint64_t v27 = *(int *)(v23 + 48);
  long long v63 = *(_OWORD *)(*(void *)(v26 + 56) + 16 * v24);
  *(_OWORD *)&v12[v27] = v63;
  uint64_t v28 = *(void *)(v23 - 8);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v12, 0, 1, v23);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  while (1)
  {
    (*v57)(v25, v12, v59);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v25, 1, v23) == 1)
    {
      uint64_t result = swift_release();
      if (v46)
      {
        unint64_t v39 = v56;
        uint64_t v40 = v56[3];
        uint64_t v41 = v56[4];
        sub_10002689C(v56, v40);
        sub_10059A0E8(0x2064656B636F6C62, (void *)0xED00003A73626F6ALL, v40, v41);
        uint64_t v42 = v39[3];
        uint64_t v43 = v39[4];
        sub_10002689C(v39, v42);
        return sub_10059A1B8(8224, 0xE200000000000000, (void (*)(void *))sub_1001E9B3C, v45, v42, (uint64_t)&type metadata for () + 8, v43);
      }
      return result;
    }
    uint64_t v33 = *v53;
    *(void *)&long long v63 = v22;
    uint64_t v34 = v55;
    v33(v55, v25, v20);
    uint64_t v36 = v56[3];
    uint64_t v35 = v56[4];
    sub_10002689C(v56, v36);
    uint64_t v64 = 0;
    Swift::Int v65 = (void *)0xE000000000000000;
    sub_10096CBD0(22);
    swift_getWitnessTable();
    sub_10096D270();
    v67._uint64_t countAndFlagsBits = 0x8FB8EFB696E2203ALL;
    v67._object = (void *)0xA900000000000020;
    sub_10096BDC0(v67);
    swift_bridgeObjectRetain();
    sub_10002B7CC((uint64_t *)&unk_100AD70B0);
    v68._uint64_t countAndFlagsBits = sub_10096C0B0();
    sub_10096BDC0(v68);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v69._uint64_t countAndFlagsBits = 0x208F949FF02020;
    v69._object = (void *)0xA700000000000000;
    sub_10096BDC0(v69);
    swift_bridgeObjectRetain();
    sub_10002B7CC(&qword_100AD6E60);
    v70._uint64_t countAndFlagsBits = sub_10096C0B0();
    sub_10096BDC0(v70);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v37 = v35;
    uint64_t v12 = v54;
    sub_10059A0E8(v64, v65, v36, v37);
    swift_bridgeObjectRelease();
    BOOL v38 = v34;
    unint64_t v18 = v63;
    uint64_t result = (*v52)(v38, v20);
    if (v18) {
      goto LABEL_4;
    }
LABEL_6:
    uint64_t v23 = v61;
    int64_t v29 = v62 + 1;
    uint64_t v25 = v60;
    if (__OFADD__(v62, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v29 < v48)
    {
      unint64_t v30 = *(void *)(v47 + 8 * v29);
      if (v30) {
        goto LABEL_9;
      }
      int64_t v31 = v62 + 2;
      ++v62;
      if (v29 + 1 < v48)
      {
        unint64_t v30 = *(void *)(v47 + 8 * v31);
        if (v30)
        {
          ++v29;
LABEL_9:
          uint64_t v22 = (v30 - 1) & v30;
          unint64_t v24 = __clz(__rbit64(v30)) + (v29 << 6);
          int64_t v62 = v29;
          goto LABEL_5;
        }
        int64_t v32 = v29 + 2;
        int64_t v62 = v29 + 1;
        if (v29 + 2 < v48) {
          break;
        }
      }
    }
LABEL_21:
    uint64_t v28 = *(void *)(v61 - 8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v28 + 56))(v12, 1, 1, v61);
    uint64_t v22 = 0;
  }
  unint64_t v30 = *(void *)(v47 + 8 * v32);
  if (v30)
  {
    v29 += 2;
    goto LABEL_9;
  }
  while (1)
  {
    int64_t v29 = v32 + 1;
    if (__OFADD__(v32, 1)) {
      break;
    }
    if (v29 >= v48)
    {
      int64_t v62 = v44;
      goto LABEL_21;
    }
    unint64_t v30 = *(void *)(v47 + 8 * v29);
    ++v32;
    if (v30) {
      goto LABEL_9;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_1001E6C18(void *a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t v3 = *(void *)(a2 + 32);
  uint64_t v4 = *(void *)(v3 + 64);
  uint64_t v20 = v3 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & v4;
  int64_t v19 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v22 = *(void *)(a2 + 32);
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v9 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v10 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v11 = v10 | (v9 << 6);
      goto LABEL_5;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_21;
    }
    if (v16 >= v19) {
      return swift_release();
    }
    unint64_t v17 = *(void *)(v20 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v19) {
        return swift_release();
      }
      unint64_t v17 = *(void *)(v20 + 8 * v9);
      if (!v17) {
        break;
      }
    }
LABEL_18:
    unint64_t v7 = (v17 - 1) & v17;
    unint64_t v11 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_5:
    uint64_t v12 = (uint64_t *)(*(void *)(v22 + 48) + 16 * v11);
    uint64_t v13 = *v12;
    uint64_t v14 = (void *)v12[1];
    uint64_t v15 = a1[3];
    uint64_t v23 = a1[4];
    sub_10002689C(a1, v15);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_10096CBD0(29);
    v24._uint64_t countAndFlagsBits = v13;
    v24._object = v14;
    sub_10096BDC0(v24);
    swift_bridgeObjectRelease();
    v25._uint64_t countAndFlagsBits = 0x3A73656C7572203ALL;
    v25._object = (void *)0xE900000000000020;
    sub_10096BDC0(v25);
    type metadata accessor for JobLockRule();
    sub_10096C1C0();
    swift_getWitnessTable();
    sub_10096D270();
    swift_bridgeObjectRelease();
    v26._uint64_t countAndFlagsBits = 0x656B636F6C62202CLL;
    v26._object = (void *)0xEE00203A79622064;
    sub_10096BDC0(v26);
    sub_10096D270();
    swift_bridgeObjectRelease();
    sub_10059A0E8(0, (void *)0xE000000000000000, v15, v23);
    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v18 = v16 + 2;
  if (v18 >= v19) {
    return swift_release();
  }
  unint64_t v17 = *(void *)(v20 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v19) {
      return swift_release();
    }
    unint64_t v17 = *(void *)(v20 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_18;
    }
  }
LABEL_21:
  __break(1u);
  return result;
}

uint64_t sub_1001E6F00()
{
  type metadata accessor for JobLockAggregator();
  sub_10026BFF4(v0, (void (*)(void))sub_1001E9EB0);
  return v2;
}

id sub_1001E6F88@<X0>(id *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *((void *)*a1 + 10);
  uint64_t v4 = *((void *)*a1 + 11);
  type metadata accessor for JobLockAggregator();
  swift_beginAccess();
  type metadata accessor for JobLockRule();
  swift_getWitnessTable();
  sub_10096BA80();
  swift_getWitnessTable();
  sub_10096BF50();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v3;
  *(void *)(v5 + 24) = v4;
  sub_10096CC00();
  swift_getWitnessTable();
  sub_10096CF00();
  swift_release();
  swift_getKeyPath();
  sub_10096CE50();
  swift_getWitnessTable();
  sub_10096CEF0();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_getWitnessTable();
  sub_10096CD60();
  swift_getWitnessTable();
  sub_10096C1F0();
  swift_beginAccess();
  sub_10096BA10();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  sub_10096C1F0();
  swift_allocObject();
  uint64_t v6 = sub_1001E0704();
  id result = [a1[5] addObject:v6];
  *a2 = v6;
  return result;
}

uint64_t sub_1001E7314(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for JobLockRule();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v4 = __chkstk_darwin(TupleTypeMetadata2 - 8);
  uint64_t v6 = &v19[-v5 - 8];
  uint64_t v7 = *(int *)(v4 + 56);
  char v8 = &v6[v7];
  int64_t v9 = (uint64_t *)(a1 + v7);
  uint64_t v10 = *(void *)(v2 - 8);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v10 + 16))(v6, a1, v2);
  uint64_t v11 = *v9;
  uint64_t v12 = v9[1];
  *char v8 = v11;
  v8[1] = v12;
  uint64_t v13 = *(void *)(v11 + 16);
  if (v13)
  {
    uint64_t v14 = v11 + 32;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_10002B70C(v14, (uint64_t)v19, (uint64_t *)&unk_100AD70B0);
      char v15 = v19[48];
      sub_1001E9D10((uint64_t)v19);
      if (v15) {
        break;
      }
      v14 += 56;
      if (!--v13)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v16 = 1;
  }
  else
  {
LABEL_6:
    uint64_t v16 = 0;
  }
  (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v6, v2);
  return v16;
}

uint64_t sub_1001E74B8@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  v19[1] = a3;
  uint64_t v3 = *(void *)(*a2 + class metadata base offset for KeyPath);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(a1);
  uint64_t v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)v19 - v9;
  uint64_t v11 = (uint64_t *)(v8 + *(int *)(v3 + 48));
  uint64_t v13 = *(void *)(v12 + 8);
  uint64_t v14 = *(void *)(v13 - 8);
  (*(void (**)(char *))(v14 + 16))((char *)v19 - v9);
  uint64_t v15 = *v11;
  uint64_t v16 = v11[1];
  unint64_t v17 = &v7[*(int *)(v3 + 48)];
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v7, v10, v13);
  *(void *)unint64_t v17 = v15;
  *((void *)v17 + 1) = v16;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_getAtKeyPath();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t sub_1001E7684()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v0;
}

uint64_t sub_1001E76BC()
{
  sub_1001E7684();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for JobLock()
{
  return sub_10014D080();
}

uint64_t sub_1001E7708()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for JobLock.Registration()
{
  return sub_10014D080();
}

void *initializeBufferWithCopyOfBuffer for JobLockPendingFlushStatus(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for JobLockPendingFlushStatus(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

void *assignWithTake for JobLockPendingFlushStatus(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for JobLockPendingFlushStatus()
{
  return &type metadata for JobLockPendingFlushStatus;
}

uint64_t destroy for JobLockRuleAssociatedJobs()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *_s9libfssync25JobLockRuleAssociatedJobsVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for JobLockRuleAssociatedJobs(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for JobLockRuleAssociatedJobs(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for JobLockRuleAssociatedJobs()
{
  return &type metadata for JobLockRuleAssociatedJobs;
}

uint64_t sub_1001E7994()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v1 = AssociatedTypeWitness;
  if (v2 <= 0x3F)
  {
    uint64_t v3 = *(void *)(AssociatedTypeWitness - 8) + 64;
    uint64_t v8 = v3;
    swift_getTupleTypeLayout3();
    uint64_t v9 = &v7;
    uint64_t v1 = sub_10096C890();
    if (v4 <= 0x3F)
    {
      swift_getTupleTypeLayout2();
      uint64_t v10 = &v6;
      uint64_t v11 = v3;
      uint64_t v12 = v3;
      uint64_t v13 = v3;
      uint64_t v14 = v3;
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return v1;
}

void *sub_1001E7ABC(void *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  unint64_t v8 = ~(unint64_t)v7;
  unint64_t v9 = v6 + v7;
  unint64_t v10 = v9 & v8;
  if (*(_DWORD *)(v5 + 84)) {
    size_t v11 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  }
  else {
    size_t v11 = v6 + 1;
  }
  if (v6 <= ((v6 + v7 + v10) & ~(unint64_t)v7) + v6) {
    v6 += (v6 + v7 + v10) & ~(unint64_t)v7;
  }
  if (v6 <= v10 + v11) {
    unint64_t v12 = v10 + v11;
  }
  else {
    unint64_t v12 = v6;
  }
  size_t v13 = v12 + 1;
  if (v7 > 7u || (v7 & 0x100000) != 0 || v13 > 0x18)
  {
    uint64_t v16 = *(void *)a2;
    *a1 = *(void *)a2;
    a1 = (void *)(v16 + ((v7 + 16) & v8));
    swift_retain();
  }
  else
  {
    uint64_t v18 = AssociatedTypeWitness;
    unsigned int v19 = a2[v12];
    unsigned int v20 = v19 - 7;
    if (v19 >= 7)
    {
      if (v12 <= 3) {
        uint64_t v21 = v12;
      }
      else {
        uint64_t v21 = 4;
      }
      switch(v21)
      {
        case 1:
          int v22 = *a2;
          goto LABEL_28;
        case 2:
          int v22 = *(unsigned __int16 *)a2;
          goto LABEL_28;
        case 3:
          int v22 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_28;
        case 4:
          int v22 = *(_DWORD *)a2;
LABEL_28:
          int v23 = (v22 | (v20 << (8 * v12))) + 7;
          unsigned int v19 = v22 + 7;
          if (v12 < 4) {
            unsigned int v19 = v23;
          }
          break;
        default:
          break;
      }
    }
    switch(v19)
    {
      case 0u:
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
        *((unsigned char *)a1 + v12) = 0;
        break;
      case 1u:
        Swift::String v24 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v5 + 16);
        v24(a1, a2, AssociatedTypeWitness);
        unint64_t v25 = (unint64_t)&a2[v9] & v8;
        v24((void *)(((unint64_t)a1 + v9) & v8), (unsigned __int8 *)v25, v18);
        v24((void *)((v9 + (((unint64_t)a1 + v9) & v8)) & v8), (unsigned __int8 *)((v9 + v25) & v8), v18);
        *((unsigned char *)a1 + v12) = 1;
        break;
      case 2u:
        Swift::String v26 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v5 + 16);
        v26(a1, a2, AssociatedTypeWitness);
        __dst = (void *)(((unint64_t)a1 + v9) & v8);
        uint64_t v27 = (void *)((unint64_t)&a2[v9] & v8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v5 + 48))(v27, 1, v18))
        {
          memcpy(__dst, v27, v11);
        }
        else
        {
          v26(__dst, (unsigned __int8 *)v27, v18);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(__dst, 0, 1, v18);
        }
        *((unsigned char *)a1 + v12) = 2;
        break;
      case 3u:
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
        *((unsigned char *)a1 + v12) = 3;
        break;
      case 4u:
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
        *((unsigned char *)a1 + v12) = 4;
        break;
      case 5u:
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
        *((unsigned char *)a1 + v12) = 5;
        break;
      case 6u:
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
        *((unsigned char *)a1 + v12) = 6;
        break;
      default:
        memcpy(a1, a2, v13);
        break;
    }
  }
  return a1;
}

uint64_t sub_1001E7EA8(unsigned __int8 *a1)
{
  uint64_t result = swift_getAssociatedTypeWitness();
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result - 8);
  unint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = v5 + v6;
  uint64_t v8 = (v5 + v6) & ~v6;
  unint64_t v9 = ((v5 + v6 + v8) & ~v6) + v5;
  unint64_t v10 = v8 + v5;
  if (!*(_DWORD *)(v4 + 84)) {
    ++v10;
  }
  if (v5 <= v9) {
    unint64_t v5 = v9;
  }
  if (v5 <= v10) {
    unint64_t v5 = v10;
  }
  unsigned int v11 = a1[v5];
  unsigned int v12 = v11 - 7;
  if (v11 >= 7)
  {
    if (v5 <= 3) {
      uint64_t v13 = v5;
    }
    else {
      uint64_t v13 = 4;
    }
    switch(v13)
    {
      case 1:
        int v14 = *a1;
        goto LABEL_16;
      case 2:
        int v14 = *(unsigned __int16 *)a1;
        goto LABEL_16;
      case 3:
        int v14 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_16;
      case 4:
        int v14 = *(_DWORD *)a1;
LABEL_16:
        int v15 = (v14 | (v12 << (8 * v5))) + 7;
        unsigned int v11 = v14 + 7;
        if (v5 < 4) {
          unsigned int v11 = v15;
        }
        break;
      default:
        break;
    }
  }
  uint64_t v16 = ~v6;
  switch(v11)
  {
    case 0u:
    case 3u:
    case 4u:
    case 5u:
    case 6u:
      unint64_t v17 = *(uint64_t (**)(unsigned __int8 *, uint64_t))(v4 + 8);
      uint64_t v18 = a1;
      uint64_t v19 = v3;
      goto LABEL_20;
    case 1u:
      int v23 = *(void (**)(unsigned __int8 *, uint64_t))(v4 + 8);
      v23(a1, result);
      unint64_t v20 = (unint64_t)&a1[v7] & v16;
      v23((unsigned __int8 *)v20, v3);
      uint64_t v18 = (unsigned __int8 *)((v7 + v20) & v16);
      uint64_t v19 = v3;
      unint64_t v17 = (uint64_t (*)(unsigned __int8 *, uint64_t))v23;
LABEL_20:
      uint64_t result = v17(v18, v19);
      break;
    case 2u:
      uint64_t v24 = *(void *)(result - 8);
      int v22 = *(void (**)(unsigned __int8 *, uint64_t))(v4 + 8);
      v22(a1, result);
      unint64_t v21 = (unint64_t)&a1[v7] & v16;
      uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v24 + 48))(v21, 1, v3);
      if (!result)
      {
        uint64_t result = ((uint64_t (*)(unint64_t, uint64_t))v22)(v21, v3);
      }
      break;
    default:
      return result;
  }
  return result;
}

unsigned char *sub_1001E8164(unsigned char *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  size_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = v6 + v7;
  size_t v9 = (v6 + v7) & ~v7;
  size_t v10 = ((v6 + v7 + v9) & ~v7) + v6;
  if (*(_DWORD *)(v5 + 84)) {
    size_t v11 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  }
  else {
    size_t v11 = v6 + 1;
  }
  size_t v12 = v9 + v11;
  if (v6 <= v10) {
    size_t v6 = v10;
  }
  if (v6 <= v12) {
    size_t v13 = v12;
  }
  else {
    size_t v13 = v6;
  }
  unsigned int v14 = a2[v13];
  unsigned int v15 = v14 - 7;
  if (v14 >= 7)
  {
    if (v13 <= 3) {
      uint64_t v16 = v13;
    }
    else {
      uint64_t v16 = 4;
    }
    switch(v16)
    {
      case 1:
        int v17 = *a2;
        goto LABEL_18;
      case 2:
        int v17 = *(unsigned __int16 *)a2;
        goto LABEL_18;
      case 3:
        int v17 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_18;
      case 4:
        int v17 = *(_DWORD *)a2;
LABEL_18:
        int v18 = (v17 | (v15 << (8 * v13))) + 7;
        unsigned int v14 = v17 + 7;
        if (v13 < 4) {
          unsigned int v14 = v18;
        }
        break;
      default:
        break;
    }
  }
  uint64_t v19 = ~v7;
  switch(v14)
  {
    case 0u:
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      a1[v13] = 0;
      return a1;
    case 1u:
      unint64_t v20 = *(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v5 + 16);
      v20(a1, a2, AssociatedTypeWitness);
      unint64_t v21 = (unint64_t)&a2[v8] & v19;
      v20((unsigned char *)((unint64_t)&a1[v8] & v19), (unsigned __int8 *)v21, AssociatedTypeWitness);
      v20((unsigned char *)((v8 + ((unint64_t)&a1[v8] & v19)) & v19), (unsigned __int8 *)((v8 + v21) & v19), AssociatedTypeWitness);
      char v22 = 1;
      goto LABEL_32;
    case 2u:
      int v23 = *(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v5 + 16);
      v23(a1, a2, AssociatedTypeWitness);
      __dst = (unsigned char *)((unint64_t)&a1[v8] & v19);
      uint64_t v24 = (void *)((unint64_t)&a2[v8] & v19);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v5 + 48))(v24, 1, AssociatedTypeWitness))
      {
        memcpy(__dst, v24, v11);
      }
      else
      {
        v23(__dst, (unsigned __int8 *)v24, AssociatedTypeWitness);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v5 + 56))(__dst, 0, 1, AssociatedTypeWitness);
      }
      char v22 = 2;
      goto LABEL_32;
    case 3u:
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      char v22 = 3;
      goto LABEL_32;
    case 4u:
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      char v22 = 4;
      goto LABEL_32;
    case 5u:
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      char v22 = 5;
      goto LABEL_32;
    case 6u:
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      char v22 = 6;
LABEL_32:
      a1[v13] = v22;
      break;
    default:
      memcpy(a1, a2, v13 + 1);
      break;
  }
  return a1;
}

unsigned __int8 *sub_1001E850C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1 != a2)
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
    size_t v6 = *(void *)(v5 + 64);
    uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
    uint64_t v8 = v6 + v7;
    size_t v9 = (v6 + v7) & ~v7;
    size_t v10 = ((v6 + v7 + v9) & ~v7) + v6;
    if (*(_DWORD *)(v5 + 84)) {
      size_t v11 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
    }
    else {
      size_t v11 = v6 + 1;
    }
    size_t v12 = v9 + v11;
    if (v6 <= v10) {
      size_t v6 = v10;
    }
    if (v6 <= v12) {
      size_t v13 = v12;
    }
    else {
      size_t v13 = v6;
    }
    unsigned int v14 = a1[v13];
    unsigned int v15 = v14 - 7;
    if (v14 >= 7)
    {
      if (v13 <= 3) {
        uint64_t v16 = v13;
      }
      else {
        uint64_t v16 = 4;
      }
      switch(v16)
      {
        case 1:
          int v17 = *a1;
          goto LABEL_19;
        case 2:
          int v17 = *(unsigned __int16 *)a1;
          goto LABEL_19;
        case 3:
          int v17 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_19;
        case 4:
          int v17 = *(_DWORD *)a1;
LABEL_19:
          int v18 = (v17 | (v15 << (8 * v13))) + 7;
          unsigned int v14 = v17 + 7;
          if (v13 < 4) {
            unsigned int v14 = v18;
          }
          break;
        default:
          break;
      }
    }
    uint64_t v19 = ~v7;
    switch(v14)
    {
      case 0u:
      case 3u:
      case 4u:
      case 5u:
      case 6u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
        break;
      case 1u:
        __dstb = (void *)v11;
        uint64_t v24 = *(void (**)(unsigned __int8 *, uint64_t))(v5 + 8);
        v24(a1, AssociatedTypeWitness);
        v24((unsigned __int8 *)((unint64_t)&a1[v8] & v19), AssociatedTypeWitness);
        v24((unsigned __int8 *)((v8 + ((unint64_t)&a1[v8] & v19)) & v19), AssociatedTypeWitness);
        size_t v11 = (size_t)__dstb;
        break;
      case 2u:
        __dst = *(void (**)(unsigned __int8 *, uint64_t))(v5 + 8);
        __dst(a1, AssociatedTypeWitness);
        if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))((unint64_t)&a1[v8] & v19, 1, AssociatedTypeWitness))__dst((unsigned __int8 *)((unint64_t)&a1[v8] & v19), AssociatedTypeWitness); {
        break;
        }
      default:
        break;
    }
    unsigned int v20 = a2[v13];
    unsigned int v21 = v20 - 7;
    if (v20 >= 7)
    {
      if (v13 <= 3) {
        uint64_t v22 = v13;
      }
      else {
        uint64_t v22 = 4;
      }
      switch(v22)
      {
        case 1:
          int v23 = *a2;
          goto LABEL_35;
        case 2:
          int v23 = *(unsigned __int16 *)a2;
          goto LABEL_35;
        case 3:
          int v23 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_35;
        case 4:
          int v23 = *(_DWORD *)a2;
LABEL_35:
          int v25 = (v23 | (v21 << (8 * v13))) + 7;
          unsigned int v20 = v23 + 7;
          if (v13 < 4) {
            unsigned int v20 = v25;
          }
          break;
        default:
          break;
      }
    }
    switch(v20)
    {
      case 0u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
        a1[v13] = 0;
        return a1;
      case 1u:
        Swift::String v26 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 16);
        v26(a1, a2, AssociatedTypeWitness);
        unint64_t v27 = (unint64_t)&a2[v8] & v19;
        v26((unsigned __int8 *)((unint64_t)&a1[v8] & v19), (unsigned __int8 *)v27, AssociatedTypeWitness);
        v26((unsigned __int8 *)((v8 + ((unint64_t)&a1[v8] & v19)) & v19), (unsigned __int8 *)((v8 + v27) & v19), AssociatedTypeWitness);
        char v28 = 1;
        goto LABEL_49;
      case 2u:
        int64_t v29 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 16);
        v29(a1, a2, AssociatedTypeWitness);
        __dsta = (void *)((unint64_t)&a1[v8] & v19);
        unint64_t v30 = (void *)((unint64_t)&a2[v8] & v19);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v5 + 48))(v30, 1, AssociatedTypeWitness))
        {
          memcpy(__dsta, v30, v11);
        }
        else
        {
          v29((unsigned __int8 *)__dsta, (unsigned __int8 *)v30, AssociatedTypeWitness);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(__dsta, 0, 1, AssociatedTypeWitness);
        }
        char v28 = 2;
        goto LABEL_49;
      case 3u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
        char v28 = 3;
        goto LABEL_49;
      case 4u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
        char v28 = 4;
        goto LABEL_49;
      case 5u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
        char v28 = 5;
        goto LABEL_49;
      case 6u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
        char v28 = 6;
LABEL_49:
        a1[v13] = v28;
        break;
      default:
        memcpy(a1, a2, v13 + 1);
        break;
    }
  }
  return a1;
}

unsigned char *sub_1001E8A70(unsigned char *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  size_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = v6 + v7;
  size_t v9 = (v6 + v7) & ~v7;
  size_t v10 = ((v6 + v7 + v9) & ~v7) + v6;
  if (*(_DWORD *)(v5 + 84)) {
    size_t v11 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  }
  else {
    size_t v11 = v6 + 1;
  }
  size_t v12 = v9 + v11;
  if (v6 <= v10) {
    size_t v6 = v10;
  }
  if (v6 <= v12) {
    size_t v13 = v12;
  }
  else {
    size_t v13 = v6;
  }
  unsigned int v14 = a2[v13];
  unsigned int v15 = v14 - 7;
  if (v14 >= 7)
  {
    if (v13 <= 3) {
      uint64_t v16 = v13;
    }
    else {
      uint64_t v16 = 4;
    }
    switch(v16)
    {
      case 1:
        int v17 = *a2;
        goto LABEL_18;
      case 2:
        int v17 = *(unsigned __int16 *)a2;
        goto LABEL_18;
      case 3:
        int v17 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_18;
      case 4:
        int v17 = *(_DWORD *)a2;
LABEL_18:
        int v18 = (v17 | (v15 << (8 * v13))) + 7;
        unsigned int v14 = v17 + 7;
        if (v13 < 4) {
          unsigned int v14 = v18;
        }
        break;
      default:
        break;
    }
  }
  uint64_t v19 = ~v7;
  switch(v14)
  {
    case 0u:
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
      a1[v13] = 0;
      return a1;
    case 1u:
      unsigned int v20 = *(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v5 + 32);
      v20(a1, a2, AssociatedTypeWitness);
      unint64_t v21 = (unint64_t)&a2[v8] & v19;
      v20((unsigned char *)((unint64_t)&a1[v8] & v19), (unsigned __int8 *)v21, AssociatedTypeWitness);
      v20((unsigned char *)((v8 + ((unint64_t)&a1[v8] & v19)) & v19), (unsigned __int8 *)((v8 + v21) & v19), AssociatedTypeWitness);
      char v22 = 1;
      goto LABEL_32;
    case 2u:
      int v23 = *(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v5 + 32);
      v23(a1, a2, AssociatedTypeWitness);
      __dst = (unsigned char *)((unint64_t)&a1[v8] & v19);
      uint64_t v24 = (void *)((unint64_t)&a2[v8] & v19);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v5 + 48))(v24, 1, AssociatedTypeWitness))
      {
        memcpy(__dst, v24, v11);
      }
      else
      {
        v23(__dst, (unsigned __int8 *)v24, AssociatedTypeWitness);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v5 + 56))(__dst, 0, 1, AssociatedTypeWitness);
      }
      char v22 = 2;
      goto LABEL_32;
    case 3u:
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
      char v22 = 3;
      goto LABEL_32;
    case 4u:
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
      char v22 = 4;
      goto LABEL_32;
    case 5u:
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
      char v22 = 5;
      goto LABEL_32;
    case 6u:
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
      char v22 = 6;
LABEL_32:
      a1[v13] = v22;
      break;
    default:
      memcpy(a1, a2, v13 + 1);
      break;
  }
  return a1;
}

unsigned __int8 *sub_1001E8E18(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1 != a2)
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
    size_t v6 = *(void *)(v5 + 64);
    uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
    uint64_t v8 = v6 + v7;
    size_t v9 = (v6 + v7) & ~v7;
    size_t v10 = ((v6 + v7 + v9) & ~v7) + v6;
    if (*(_DWORD *)(v5 + 84)) {
      size_t v11 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
    }
    else {
      size_t v11 = v6 + 1;
    }
    size_t v12 = v9 + v11;
    if (v6 <= v10) {
      size_t v6 = v10;
    }
    if (v6 <= v12) {
      size_t v13 = v12;
    }
    else {
      size_t v13 = v6;
    }
    unsigned int v14 = a1[v13];
    unsigned int v15 = v14 - 7;
    if (v14 >= 7)
    {
      if (v13 <= 3) {
        uint64_t v16 = v13;
      }
      else {
        uint64_t v16 = 4;
      }
      switch(v16)
      {
        case 1:
          int v17 = *a1;
          goto LABEL_19;
        case 2:
          int v17 = *(unsigned __int16 *)a1;
          goto LABEL_19;
        case 3:
          int v17 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_19;
        case 4:
          int v17 = *(_DWORD *)a1;
LABEL_19:
          int v18 = (v17 | (v15 << (8 * v13))) + 7;
          unsigned int v14 = v17 + 7;
          if (v13 < 4) {
            unsigned int v14 = v18;
          }
          break;
        default:
          break;
      }
    }
    uint64_t v19 = ~v7;
    switch(v14)
    {
      case 0u:
      case 3u:
      case 4u:
      case 5u:
      case 6u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
        break;
      case 1u:
        __dstb = (void *)v11;
        uint64_t v24 = *(void (**)(unsigned __int8 *, uint64_t))(v5 + 8);
        v24(a1, AssociatedTypeWitness);
        v24((unsigned __int8 *)((unint64_t)&a1[v8] & v19), AssociatedTypeWitness);
        v24((unsigned __int8 *)((v8 + ((unint64_t)&a1[v8] & v19)) & v19), AssociatedTypeWitness);
        size_t v11 = (size_t)__dstb;
        break;
      case 2u:
        __dst = *(void (**)(unsigned __int8 *, uint64_t))(v5 + 8);
        __dst(a1, AssociatedTypeWitness);
        if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))((unint64_t)&a1[v8] & v19, 1, AssociatedTypeWitness))__dst((unsigned __int8 *)((unint64_t)&a1[v8] & v19), AssociatedTypeWitness); {
        break;
        }
      default:
        break;
    }
    unsigned int v20 = a2[v13];
    unsigned int v21 = v20 - 7;
    if (v20 >= 7)
    {
      if (v13 <= 3) {
        uint64_t v22 = v13;
      }
      else {
        uint64_t v22 = 4;
      }
      switch(v22)
      {
        case 1:
          int v23 = *a2;
          goto LABEL_35;
        case 2:
          int v23 = *(unsigned __int16 *)a2;
          goto LABEL_35;
        case 3:
          int v23 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_35;
        case 4:
          int v23 = *(_DWORD *)a2;
LABEL_35:
          int v25 = (v23 | (v21 << (8 * v13))) + 7;
          unsigned int v20 = v23 + 7;
          if (v13 < 4) {
            unsigned int v20 = v25;
          }
          break;
        default:
          break;
      }
    }
    switch(v20)
    {
      case 0u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
        a1[v13] = 0;
        return a1;
      case 1u:
        Swift::String v26 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 32);
        v26(a1, a2, AssociatedTypeWitness);
        unint64_t v27 = (unint64_t)&a2[v8] & v19;
        v26((unsigned __int8 *)((unint64_t)&a1[v8] & v19), (unsigned __int8 *)v27, AssociatedTypeWitness);
        v26((unsigned __int8 *)((v8 + ((unint64_t)&a1[v8] & v19)) & v19), (unsigned __int8 *)((v8 + v27) & v19), AssociatedTypeWitness);
        char v28 = 1;
        goto LABEL_49;
      case 2u:
        int64_t v29 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 32);
        v29(a1, a2, AssociatedTypeWitness);
        __dsta = (void *)((unint64_t)&a1[v8] & v19);
        unint64_t v30 = (void *)((unint64_t)&a2[v8] & v19);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v5 + 48))(v30, 1, AssociatedTypeWitness))
        {
          memcpy(__dsta, v30, v11);
        }
        else
        {
          v29((unsigned __int8 *)__dsta, (unsigned __int8 *)v30, AssociatedTypeWitness);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(__dsta, 0, 1, AssociatedTypeWitness);
        }
        char v28 = 2;
        goto LABEL_49;
      case 3u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
        char v28 = 3;
        goto LABEL_49;
      case 4u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
        char v28 = 4;
        goto LABEL_49;
      case 5u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
        char v28 = 5;
        goto LABEL_49;
      case 6u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
        char v28 = 6;
LABEL_49:
        a1[v13] = v28;
        break;
      default:
        memcpy(a1, a2, v13 + 1);
        break;
    }
  }
  return a1;
}

uint64_t sub_1001E937C(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = (v5 + v6) & ~v6;
  unint64_t v8 = ((v5 + v6 + v7) & ~v6) + v5;
  if (v8 <= v5) {
    unint64_t v8 = *(void *)(v4 + 64);
  }
  BOOL v9 = *(_DWORD *)(v4 + 84) == 0;
  unint64_t v10 = v7 + v5;
  if (v9) {
    ++v10;
  }
  if (v10 <= v8) {
    unint64_t v10 = v8;
  }
  if (v5 > v10) {
    unint64_t v10 = v5;
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF9) {
    goto LABEL_28;
  }
  unint64_t v11 = v10 + 1;
  char v12 = 8 * (v10 + 1);
  if ((v10 + 1) <= 3)
  {
    unsigned int v15 = ((a2 + ~(-1 << v12) - 248) >> v12) + 1;
    if (HIWORD(v15))
    {
      int v13 = *(_DWORD *)((char *)a1 + v11);
      if (!v13) {
        goto LABEL_28;
      }
      goto LABEL_20;
    }
    if (v15 > 0xFF)
    {
      int v13 = *(unsigned __int16 *)((char *)a1 + v11);
      if (!*(unsigned __int16 *)((char *)a1 + v11)) {
        goto LABEL_28;
      }
      goto LABEL_20;
    }
    if (v15 < 2)
    {
LABEL_28:
      unsigned int v17 = *((unsigned __int8 *)a1 + v10);
      if (v17 >= 8) {
        return (v17 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v13 = *((unsigned __int8 *)a1 + v11);
  if (!*((unsigned char *)a1 + v11)) {
    goto LABEL_28;
  }
LABEL_20:
  int v16 = (v13 - 1) << v12;
  if (v11 > 3) {
    int v16 = 0;
  }
  if (v11)
  {
    if (v11 > 3) {
      LODWORD(v11) = 4;
    }
    switch((int)v11)
    {
      case 2:
        LODWORD(v11) = *a1;
        break;
      case 3:
        LODWORD(v11) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v11) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v11) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v11 | v16) + 249;
}

void sub_1001E9548(unsigned char *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = (v7 + v8) & ~v8;
  unint64_t v10 = ((v7 + v8 + v9) & ~v8) + v7;
  if (v10 <= v7) {
    unint64_t v10 = *(void *)(v6 + 64);
  }
  BOOL v11 = *(_DWORD *)(v6 + 84) == 0;
  unint64_t v12 = v9 + v7;
  if (v11) {
    ++v12;
  }
  if (v12 <= v10) {
    unint64_t v12 = v10;
  }
  if (v7 <= v12) {
    unint64_t v7 = v12;
  }
  size_t v13 = v7 + 1;
  if (a3 < 0xF9)
  {
    int v14 = 0;
  }
  else if (v13 <= 3)
  {
    unsigned int v17 = ((a3 + ~(-1 << (8 * v13)) - 248) >> (8 * v13)) + 1;
    if (HIWORD(v17))
    {
      int v14 = 4;
    }
    else if (v17 >= 0x100)
    {
      int v14 = 2;
    }
    else
    {
      int v14 = v17 > 1;
    }
  }
  else
  {
    int v14 = 1;
  }
  if (a2 > 0xF8)
  {
    unsigned int v15 = a2 - 249;
    if (v13 < 4)
    {
      int v16 = (v15 >> (8 * v13)) + 1;
      if (v7 != -1)
      {
        int v18 = v15 & ~(-1 << (8 * v13));
        bzero(a1, v13);
        if (v13 == 3)
        {
          *(_WORD *)a1 = v18;
          a1[2] = BYTE2(v18);
        }
        else if (v13 == 2)
        {
          *(_WORD *)a1 = v18;
        }
        else
        {
          *a1 = v18;
        }
      }
    }
    else
    {
      bzero(a1, v7 + 1);
      *(_DWORD *)a1 = v15;
      int v16 = 1;
    }
    switch(v14)
    {
      case 1:
        a1[v13] = v16;
        break;
      case 2:
        *(_WORD *)&a1[v13] = v16;
        break;
      case 3:
LABEL_40:
        __break(1u);
        JUMPOUT(0x1001E9790);
      case 4:
        *(_DWORD *)&a1[v13] = v16;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v14)
    {
      case 1:
        a1[v13] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_29;
      case 2:
        *(_WORD *)&a1[v13] = 0;
        goto LABEL_28;
      case 3:
        goto LABEL_40;
      case 4:
        *(_DWORD *)&a1[v13] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_29;
      default:
LABEL_28:
        if (a2) {
LABEL_29:
        }
          a1[v7] = -(char)a2;
        break;
    }
  }
}

uint64_t sub_1001E97B8(unsigned __int8 *a1)
{
  uint64_t v2 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v3 = *(void *)(v2 + 64);
  uint64_t v4 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v5 = (v3 + v4) & ~v4;
  unint64_t v6 = ((v3 + v4 + v5) & ~v4) + v3;
  unint64_t v7 = v5 + v3;
  if (!*(_DWORD *)(v2 + 84)) {
    ++v7;
  }
  if (v3 <= v6) {
    unint64_t v3 = v6;
  }
  if (v3 <= v7) {
    unint64_t v3 = v7;
  }
  uint64_t result = a1[v3];
  if (result >= 7)
  {
    if (v3 <= 3) {
      uint64_t v9 = v3;
    }
    else {
      uint64_t v9 = 4;
    }
    switch(v9)
    {
      case 1:
        int v10 = *a1;
        goto LABEL_16;
      case 2:
        int v10 = *(unsigned __int16 *)a1;
        goto LABEL_16;
      case 3:
        int v10 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_16;
      case 4:
        int v10 = *(_DWORD *)a1;
LABEL_16:
        unsigned int v11 = (v10 | ((result - 7) << (8 * v3))) + 7;
        unsigned int v12 = v10 + 7;
        if (v3 >= 4) {
          uint64_t result = v12;
        }
        else {
          uint64_t result = v11;
        }
        break;
      default:
        return result;
    }
  }
  return result;
}

void sub_1001E98FC(unsigned char *a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  size_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  size_t v7 = (v5 + v6) & ~v6;
  size_t v8 = ((v5 + v6 + v7) & ~v6) + v5;
  if (v8 <= v5) {
    size_t v8 = *(void *)(v4 + 64);
  }
  BOOL v9 = *(_DWORD *)(v4 + 84) == 0;
  size_t v10 = v7 + v5;
  if (v9) {
    ++v10;
  }
  if (v10 <= v8) {
    size_t v10 = v8;
  }
  if (v5 <= v10) {
    size_t v11 = v10;
  }
  else {
    size_t v11 = v5;
  }
  if (a2 > 6)
  {
    if (v11 <= 3) {
      char v12 = ((a2 - 7) >> (8 * v11)) + 7;
    }
    else {
      char v12 = 7;
    }
    if (v11 <= 3) {
      int v13 = (a2 - 7) & ~(-1 << (8 * v11));
    }
    else {
      int v13 = a2 - 7;
    }
    a1[v11] = v12;
    if (v11 >= 4) {
      int v14 = 4;
    }
    else {
      int v14 = v11;
    }
    bzero(a1, v11);
    switch(v14)
    {
      case 2:
        *(_WORD *)a1 = v13;
        break;
      case 3:
        *(_WORD *)a1 = v13;
        a1[2] = BYTE2(v13);
        break;
      case 4:
        *(_DWORD *)a1 = v13;
        break;
      default:
        *a1 = v13;
        break;
    }
  }
  else
  {
    a1[v11] = a2;
  }
}

uint64_t type metadata accessor for JobLockRule()
{
  return sub_10014D080();
}

uint64_t sub_1001E9A88()
{
  return swift_getWitnessTable();
}

uint64_t sub_1001E9AA4()
{
  return sub_1001E5C40();
}

void sub_1001E9AC8(void *a1@<X8>)
{
}

void sub_1001E9AE4(void *a1@<X8>)
{
}

uint64_t sub_1001E9B00()
{
  return sub_1001E631C(v0);
}

uint64_t sub_1001E9B1C()
{
  return sub_1001E64F8(*(void *)(v0 + 16), *(void **)(v0 + 24), *(unsigned __int8 *)(v0 + 32));
}

uint64_t sub_1001E9B3C(void *a1)
{
  return sub_1001E6C18(a1, v1);
}

uint64_t sub_1001E9B58@<X0>(unsigned char *a1@<X8>)
{
  return sub_1001E6174(a1);
}

uint64_t sub_1001E9B74()
{
  return sub_1001E55B4(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1001E9B90()
{
  return sub_1001E4FEC(*(id **)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1001E9BAC@<X0>(unsigned char *a1@<X8>)
{
  return sub_1001E53CC(*(void *)(v1 + 24), a1);
}

uint64_t sub_1001E9BC8(char *a1)
{
  return sub_1001E9BE4(a1) & 1;
}

uint64_t sub_1001E9BE4(char *a1)
{
  uint64_t v2 = type metadata accessor for JobLockRule();
  return sub_1001DCD70(a1, v2) & 1;
}

uint64_t sub_1001E9C34@<X0>(unsigned char *a1@<X8>)
{
  return sub_1001E5810(a1);
}

uint64_t sub_1001E9C50(char *a1)
{
  return sub_1001E5950(a1) & 1;
}

uint64_t sub_1001E9C74(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = a1 + 32;
  swift_bridgeObjectRetain();
  while (1)
  {
    sub_10002B70C(v2, (uint64_t)v5, (uint64_t *)&unk_100AD70B0);
    int v3 = v5[48];
    sub_1001E9D10((uint64_t)v5);
    if (v3 == 1) {
      break;
    }
    v2 += 56;
    if (!--v1)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  swift_bridgeObjectRelease();
  return 1;
}

uint64_t sub_1001E9D10(uint64_t a1)
{
  uint64_t v2 = sub_10002B7CC((uint64_t *)&unk_100AD70B0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001E9D70()
{
  return sub_1001E5F6C(v0);
}

unint64_t sub_1001E9D8C()
{
  unint64_t result = qword_100ACE600;
  if (!qword_100ACE600)
  {
    sub_100033BE8(&qword_100ACE5F8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100ACE600);
  }
  return result;
}

uint64_t sub_1001E9DE8@<X0>(uint64_t a1@<X8>)
{
  return sub_1001E267C(*(char **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), a1);
}

uint64_t type metadata accessor for JobLock.BlockedRuleError()
{
  return sub_10014D080();
}

uint64_t sub_1001E9E20(uint64_t a1, uint64_t *a2)
{
  return sub_1001E38F8(a1, a2, v2[4], v2[5], v2[2], v2[3]) & 1;
}

uint64_t sub_1001E9E44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001E3C78(a1, a2);
}

uint64_t sub_1001E9E64(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_1001E9E7C()
{
  return sub_1008512C0(*(void *)(v0 + 16));
}

uint64_t sub_1001E9E84()
{
  return sub_1008518E0(*(void *)(v0 + 16));
}

uint64_t sub_1001E9E8C(uint64_t a1)
{
  return sub_1001E3B48(a1, *(char **)(v1 + 32), *(void *)(v1 + 40)) & 1;
}

id sub_1001E9EB0@<X0>(uint64_t *a1@<X8>)
{
  return sub_1001E6F88(v1, a1);
}

uint64_t sub_1001E9ECC()
{
  return swift_deallocObject();
}

uint64_t sub_1001E9EDC(uint64_t a1)
{
  return sub_1001E7314(a1);
}

uint64_t sub_1001E9EE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001E74B8(a1, v2, a2);
}

uint64_t sub_1001E9EEC@<X0>(char *a1@<X8>)
{
  return sub_1001E0E64(*(void **)(v1 + 16), *(unsigned char *)(v1 + 24), a1);
}

uint64_t sub_1001E9F0C@<X0>(unsigned char *a1@<X8>)
{
  return sub_1001E4F38(*(void **)(v1 + 24), a1);
}

uint64_t sub_1001E9F28()
{
  return sub_1001E4DC4() & 1;
}

uint64_t sub_1001E9F48(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002B7CC((uint64_t *)&unk_100AD70B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001E9FB0()
{
  return sub_1001E1D00(v0);
}

uint64_t sub_1001E9FCC()
{
  return swift_getWitnessTable();
}

uint64_t sub_1001E9FF4()
{
  return swift_initClassMetadata2();
}

uint64_t sub_1001EA038(uint64_t a1)
{
  return sub_1001EA074(a1);
}

uint64_t sub_1001EA074(uint64_t a1)
{
  *(void *)(v1 + 40) = a1;
  uint64_t v3 = sub_10061515C(a1);
  uint64_t v5 = v4;
  char v6 = sub_100615198(a1) != 9;

  return sub_100859D10(v3, v5, v6);
}

uint64_t sub_1001EA15C()
{
  type metadata accessor for SchedulableJob();
  unint64_t v1 = sub_100615740(*(void *)(v0 + 40));
  swift_allocObject();
  uint64_t v2 = sub_1001EA074(v1);
  swift_retain();
  return v2;
}

uint64_t sub_1001EA244()
{
  return sub_10059CB24(*(void *)(v0 + 40));
}

uint64_t sub_1001EA270()
{
  return sub_1006151DC(*(void *)(v0 + 40));
}

uint64_t sub_1001EA2CC()
{
  return swift_release();
}

uint64_t sub_1001EA2D8()
{
  uint64_t v0 = FileTree.deinit();
  swift_release();
  return v0;
}

uint64_t sub_1001EA30C()
{
  FileTree.deinit();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SchedulableJob()
{
  return swift_getGenericMetadata();
}

uint64_t sub_1001EA370()
{
  return swift_initClassMetadata2();
}

uint64_t sub_1001EA3A8()
{
  return sub_1001EA270();
}

void sub_1001EA3CC()
{
}

void sub_1001EA430()
{
}

void sub_1001EA494()
{
}

void sub_1001EA4F8()
{
}

void sub_1001EA55C()
{
}

void sub_1001EA5C0()
{
}

void sub_1001EA624()
{
}

void sub_1001EA688()
{
}

uint64_t sub_1001EA6EC()
{
  uint64_t v2 = (*(uint64_t (**)(void))(*(void *)v0 + 248))();
  if (!v1)
  {
    if (v2)
    {
      swift_release();
      char v3 = 1;
    }
    else
    {
      char v3 = 0;
    }
  }
  return v3 & 1;
}

uint64_t sub_1001EA750()
{
  uint64_t v2 = (*(uint64_t (**)(void))(*(void *)v0 + 256))();
  if (!v1)
  {
    if (v2)
    {
      swift_release();
      char v3 = 1;
    }
    else
    {
      char v3 = 0;
    }
  }
  return v3 & 1;
}

void sub_1001EA7BC()
{
}

void sub_1001EA820()
{
}

void sub_1001EA884()
{
}

void sub_1001EA8E8()
{
}

void sub_1001EA94C()
{
}

void sub_1001EA9B0()
{
}

void sub_1001EAA14()
{
}

void sub_1001EAA78()
{
}

void sub_1001EAADC()
{
}

void sub_1001EAB40()
{
}

void sub_1001EABA4()
{
}

void sub_1001EAC08()
{
}

void sub_1001EAC6C()
{
}

void sub_1001EACD0()
{
}

void sub_1001EAD34()
{
}

void sub_1001EAD98()
{
}

void sub_1001EADFC()
{
}

void sub_1001EAE60()
{
}

void sub_1001EAEC4()
{
}

void sub_1001EAF28()
{
}

void sub_1001EAF8C()
{
}

void sub_1001EAFF0()
{
}

void sub_1001EB054()
{
}

void sub_1001EB0B8()
{
}

void sub_1001EB11C()
{
}

void sub_1001EB180()
{
}

void sub_1001EB1E4()
{
}

void sub_1001EB248()
{
}

void sub_1001EB2AC()
{
}

void sub_1001EB310()
{
}

void sub_1001EB374()
{
}

void sub_1001EB3D8()
{
}

void sub_1001EB43C()
{
}

void sub_1001EB4A0()
{
}

void sub_1001EB504()
{
}

void sub_1001EB568()
{
}

uint64_t FileTree.deinit()
{
  return v0;
}

uint64_t TrackingContinuation.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for JobRegistry()
{
  return swift_getGenericMetadata();
}

uint64_t sub_1001EB5FC()
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)v0 + 128))();
  if (!v1 && result < 0)
  {
    swift_release();
    uint64_t result = sub_10096CE20();
    __break(1u);
  }
  return result;
}

uint64_t sub_1001EB698(void *a1, int a2)
{
  uint64_t v58 = a1;
  char v3 = v2;
  int v63 = a2;
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 104);
  uint64_t v6 = *(void *)(*v2 + 88);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v53 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v52 = (char *)&v49 - v8;
  uint64_t v9 = *(void *)(v4 + 96);
  uint64_t v10 = *(void *)(v4 + 80);
  uint64_t v11 = swift_getAssociatedTypeWitness();
  uint64_t v51 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v50 = (char *)&v49 - v12;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v14 = swift_getAssociatedConformanceWitness();
  uint64_t v59 = v11;
  uint64_t v60 = AssociatedTypeWitness;
  uint64_t v54 = AssociatedTypeWitness;
  uint64_t v61 = AssociatedConformanceWitness;
  uint64_t v62 = v14;
  uint64_t v15 = type metadata accessor for ReconciliationID();
  uint64_t v16 = sub_10096C890();
  __chkstk_darwin(v16 - 8);
  int v18 = (char *)&v49 - v17;
  uint64_t v59 = v10;
  uint64_t v60 = v6;
  uint64_t v55 = v6;
  uint64_t v56 = v5;
  uint64_t v61 = v9;
  uint64_t v62 = v5;
  type metadata accessor for ItemJob();
  uint64_t v19 = v58;
  uint64_t v20 = swift_dynamicCastClass();
  if (v20)
  {
    unsigned int v21 = (void *)v20;
    uint64_t v22 = sub_1007B24CC();
    int v23 = (char *)v21 + *(void *)(*v21 + 576);
    uint64_t v24 = v21[15];
    int v25 = *(uint64_t (**)(uint64_t, char *, uint64_t, void))(*v3 + 320);
    swift_retain();
    char v26 = v25(v22, v23, v24, v63 & 1);
LABEL_5:
    char v34 = v26;
    swift_release();
    return v34 & 1;
  }
  uint64_t v27 = v15;
  uint64_t v49 = v18;
  uint64_t v59 = v55;
  uint64_t v60 = v10;
  uint64_t v61 = v56;
  uint64_t v62 = v9;
  type metadata accessor for Propagation.PropagationJob();
  uint64_t v28 = swift_dynamicCastClass();
  if (v28)
  {
    int64_t v29 = (void *)v28;
    uint64_t v30 = sub_1007B24CC();
    int64_t v31 = (char *)v29 + *(void *)(*v29 + 576);
    uint64_t v32 = v29[15];
    uint64_t v33 = *(uint64_t (**)(uint64_t, char *, uint64_t, void))(*v3 + 328);
    swift_retain();
    char v26 = v33(v30, v31, v32, v63 & 1);
    goto LABEL_5;
  }
  uint64_t v36 = v49;
  (*(void (**)(void))(*v19 + 440))();
  int v37 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v27 - 8) + 48))(v36, 1, v27);
  char v34 = v63;
  if (v37 == 1)
  {
    char v34 = 0;
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    unint64_t v39 = v52;
    uint64_t v38 = v53;
    uint64_t v40 = v54;
    (*(void (**)(char *, char *, uint64_t))(v53 + 32))(v52, v36, v54);
    uint64_t v41 = sub_1007B24CC();
    uint64_t v42 = v57;
    char v43 = (*(uint64_t (**)(uint64_t, char *, void, void))(*v2 + 328))(v41, v39, v19[15], v34 & 1);
    if (!v42) {
      char v34 = v43;
    }
    (*(void (**)(char *, uint64_t))(v38 + 8))(v39, v40);
  }
  else
  {
    uint64_t v45 = v50;
    uint64_t v44 = v51;
    (*(void (**)(char *, char *, uint64_t))(v51 + 32))(v50, v36, v11);
    uint64_t v46 = sub_1007B24CC();
    uint64_t v47 = v57;
    char v48 = (*(uint64_t (**)(uint64_t, char *, void, void))(*v2 + 320))(v46, v45, v19[15], v34 & 1);
    if (!v47) {
      char v34 = v48;
    }
    (*(void (**)(char *, uint64_t))(v44 + 8))(v45, v11);
  }
  return v34 & 1;
}

unint64_t sub_1001EBC84(char a1)
{
  unint64_t result = 0x6974696157746F6ELL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6D6574496F6ELL;
      break;
    case 2:
      unint64_t result = 0x6E55746E65726170;
      break;
    case 3:
      unint64_t result = 0xD000000000000013;
      break;
    case 4:
      unint64_t result = 0x7243746E65726170;
      break;
    case 5:
      unint64_t result = 0x6544746E65726170;
      break;
    case 6:
      unint64_t result = 0xD000000000000019;
      break;
    case 7:
      unint64_t result = 0x746544656C637963;
      break;
    case 8:
      unint64_t result = 0x6144746E65726170;
      break;
    case 9:
    case 10:
      unint64_t result = 0x6E6572646C696863;
      break;
    case 11:
    case 12:
    case 31:
      unint64_t result = 0xD000000000000010;
      break;
    case 13:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 14:
      unint64_t result = 0x45676E69646E6570;
      break;
    case 15:
      unint64_t result = 0x656C74746F726874;
      break;
    case 16:
      unint64_t result = 0xD000000000000016;
      break;
    case 17:
      unint64_t result = 0x656C74746F726874;
      break;
    case 18:
      unint64_t result = 0xD000000000000014;
      break;
    case 19:
      unint64_t result = 0xD000000000000011;
      break;
    case 20:
      unint64_t result = 0x6544746E65726170;
      break;
    case 21:
      unint64_t result = 0x65526D6165727473;
      break;
    case 22:
      unint64_t result = 0x6374614D68746170;
      break;
    case 23:
      unint64_t result = 0x676E697473697865;
      break;
    case 24:
      unint64_t result = 0x6E6F697463697665;
      break;
    case 25:
      unint64_t result = 0x74616761706F7270;
      break;
    case 26:
      unint64_t result = 0x746F687370616E73;
      break;
    case 27:
      unint64_t result = 0x64656E6961746572;
      break;
    case 28:
      unint64_t result = 0x496465726F6E6769;
      break;
    case 29:
      unint64_t result = 0xD000000000000018;
      break;
    case 30:
      unint64_t result = 0x6C62617463697665;
      break;
    case 32:
      unint64_t result = 0xD000000000000018;
      break;
    case 33:
      unint64_t result = 0xD000000000000011;
      break;
    case 34:
      unint64_t result = 0xD000000000000013;
      break;
    default:
      return result;
  }
  return result;
}

void sub_1001EC128(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x676E69646E6570;
  if (*v1) {
    uint64_t v2 = 0x6465696669726576;
  }
  unint64_t v3 = 0xE700000000000000;
  if (*v1) {
    unint64_t v3 = 0xE800000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

unint64_t sub_1001EC168@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1001EBC84(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1001EC194(uint64_t a1, void *a2, uint64_t a3, void **a4)
{
  uint64_t v595 = a1;
  unsigned int v594 = a4;
  uint64_t v587 = a3;
  uint64_t v4 = *a2;
  uint64_t v5 = *(ValueMetadata **)(*a2 + 96);
  uint64_t v6 = *(void *)(*a2 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v597 = a2;
  uint64_t v9 = *(ValueMetadata **)(v4 + 104);
  uint64_t v10 = *(void *)(v4 + 88);
  uint64_t v11 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v13 = swift_getAssociatedConformanceWitness();
  uint64_t v598 = AssociatedTypeWitness;
  uint64_t v599 = v11;
  unint64_t v600 = (ValueMetadata *)AssociatedConformanceWitness;
  unint64_t v601 = (ValueMetadata *)v13;
  uint64_t v583 = type metadata accessor for ReconciliationID();
  uint64_t v581 = *(void *)(v583 - 8);
  uint64_t v14 = __chkstk_darwin(v583);
  uint64_t v511 = (char *)v508 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v513 = (char *)v508 - v16;
  uint64_t v598 = AssociatedTypeWitness;
  uint64_t v599 = v11;
  uint64_t v577 = AssociatedConformanceWitness;
  unint64_t v600 = (ValueMetadata *)AssociatedConformanceWitness;
  unint64_t v601 = (ValueMetadata *)v13;
  uint64_t v512 = v13;
  uint64_t v561 = type metadata accessor for ThrottlingKey();
  uint64_t v560 = *(void *)(v561 - 8);
  uint64_t v17 = __chkstk_darwin(v561);
  unint64_t v554 = (char *)v508 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v549 = (char *)v508 - v19;
  uint64_t v598 = v6;
  uint64_t v599 = v10;
  unint64_t v600 = v5;
  unint64_t v601 = v9;
  uint64_t v588 = type metadata accessor for PersistenceTrigger();
  uint64_t v20 = sub_10096C890();
  uint64_t v598 = v6;
  uint64_t v599 = v10;
  unint64_t v600 = v5;
  unint64_t v601 = v9;
  v508[1] = type metadata accessor for Job();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v566 = *(void *)(TupleTypeMetadata2 - 8);
  __chkstk_darwin(TupleTypeMetadata2);
  long long v572 = (void (*)(char *, uint64_t, uint64_t))((char *)v508 - v21);
  uint64_t v523 = sub_10096C890();
  uint64_t v527 = *(void *)(v523 - 8);
  uint64_t v22 = __chkstk_darwin(v523);
  uint64_t v520 = (char *)v508 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v509 = (char *)v508 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  long long v521 = (char *)v508 - v27;
  uint64_t v564 = v11;
  uint64_t v525 = *(void *)(v11 - 8);
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v515 = (char *)v508 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  long long v516 = (char *)v508 - v30;
  uint64_t v31 = type metadata accessor for SnapshotItem();
  uint64_t v565 = sub_10096C890();
  uint64_t v563 = *(void *)(v565 - 8);
  uint64_t v32 = __chkstk_darwin(v565);
  unsigned int v562 = (char *)v508 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = __chkstk_darwin(v32);
  BOOL v558 = (char *)v508 - v35;
  uint64_t v573 = v31;
  uint64_t v576 = *(void *)(v31 - 8);
  uint64_t v36 = __chkstk_darwin(v34);
  long long v545 = (char *)v508 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = __chkstk_darwin(v36);
  uint64_t v544 = (char *)v508 - v39;
  __chkstk_darwin(v38);
  unint64_t v547 = (char *)v508 - v40;
  uint64_t v598 = v6;
  uint64_t v599 = v10;
  unint64_t v600 = v5;
  unint64_t v601 = v9;
  uint64_t v41 = type metadata accessor for ItemReconciliation();
  uint64_t v570 = sub_10096C890();
  uint64_t v569 = *(void *)(v570 - 8);
  uint64_t v42 = __chkstk_darwin(v570);
  uint64_t v529 = (uint64_t)v508 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = __chkstk_darwin(v42);
  uint64_t v584 = (uint64_t)v508 - v45;
  uint64_t v579 = v41;
  uint64_t v582 = *(void *)(v41 - 8);
  uint64_t v46 = __chkstk_darwin(v44);
  uint64_t v571 = (char *)v508 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = __chkstk_darwin(v46);
  unint64_t v519 = (char *)v508 - v49;
  uint64_t v50 = __chkstk_darwin(v48);
  uint64_t v539 = (char *)v508 - v51;
  uint64_t v52 = __chkstk_darwin(v50);
  long long v543 = (char *)v508 - v53;
  uint64_t v54 = __chkstk_darwin(v52);
  long long v542 = (char *)v508 - v55;
  uint64_t v56 = __chkstk_darwin(v54);
  uint64_t v526 = (char *)v508 - v57;
  uint64_t v58 = __chkstk_darwin(v56);
  uint64_t v574 = (char *)v508 - v59;
  uint64_t v580 = AssociatedTypeWitness;
  uint64_t v578 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v60 = __chkstk_darwin(v58);
  uint64_t v524 = (char *)v508 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = __chkstk_darwin(v60);
  unint64_t v510 = (char *)v508 - v63;
  uint64_t v64 = __chkstk_darwin(v62);
  uint64_t v522 = (char *)v508 - v65;
  uint64_t v66 = __chkstk_darwin(v64);
  uint64_t v533 = (char *)v508 - v67;
  uint64_t v68 = __chkstk_darwin(v66);
  uint64_t v538 = (char *)v508 - v69;
  uint64_t v70 = __chkstk_darwin(v68);
  long long v537 = (char *)v508 - v71;
  uint64_t v72 = __chkstk_darwin(v70);
  uint64_t v536 = (char *)v508 - v73;
  uint64_t v74 = __chkstk_darwin(v72);
  uint64_t v530 = (char *)v508 - v75;
  uint64_t v76 = __chkstk_darwin(v74);
  long long v548 = (char *)v508 - v77;
  uint64_t v78 = __chkstk_darwin(v76);
  long long v535 = (char *)v508 - v79;
  uint64_t v80 = __chkstk_darwin(v78);
  long long v534 = (char *)v508 - v81;
  uint64_t v82 = __chkstk_darwin(v80);
  uint64_t v553 = (ValueMetadata *)((char *)v508 - v83);
  uint64_t v84 = __chkstk_darwin(v82);
  uint64_t v552 = (char *)v508 - v85;
  uint64_t v86 = __chkstk_darwin(v84);
  uint64_t v550 = (char *)v508 - v87;
  uint64_t v88 = __chkstk_darwin(v86);
  unsigned int v551 = (char *)v508 - v89;
  uint64_t v90 = __chkstk_darwin(v88);
  uint64_t v546 = (char *)v508 - v91;
  uint64_t v590 = v20;
  uint64_t v591 = *(void *)(v20 - 8);
  uint64_t v92 = __chkstk_darwin(v90);
  uint64_t v517 = (char *)v508 - ((v93 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v94 = __chkstk_darwin(v92);
  long long v541 = (char *)v508 - v95;
  uint64_t v96 = __chkstk_darwin(v94);
  unint64_t v518 = (char *)v508 - v97;
  uint64_t v98 = __chkstk_darwin(v96);
  unint64_t v528 = (char *)v508 - v99;
  uint64_t v100 = __chkstk_darwin(v98);
  long long v540 = (char *)v508 - v101;
  uint64_t v102 = __chkstk_darwin(v100);
  uint64_t v531 = (char *)v508 - v103;
  uint64_t v104 = __chkstk_darwin(v102);
  uint64_t v532 = (char *)v508 - v105;
  uint64_t v106 = __chkstk_darwin(v104);
  unint64_t v555 = (char *)v508 - v107;
  uint64_t v108 = __chkstk_darwin(v106);
  uint64_t v557 = (char *)v508 - v109;
  uint64_t v110 = __chkstk_darwin(v108);
  char v112 = (char *)v508 - v111;
  uint64_t v113 = __chkstk_darwin(v110);
  size_t v567 = (void (**)(char *, uint64_t))((char *)v508 - v114);
  uint64_t v115 = __chkstk_darwin(v113);
  uint64_t v117 = (char *)v508 - v116;
  uint64_t v118 = __chkstk_darwin(v115);
  uint64_t v120 = (char *)v508 - v119;
  uint64_t v121 = __chkstk_darwin(v118);
  uint64_t v123 = (char *)v508 - v122;
  uint64_t v124 = __chkstk_darwin(v121);
  uint64_t v126 = (char *)v508 - v125;
  uint64_t v127 = __chkstk_darwin(v124);
  uint64_t v556 = (char *)v508 - v128;
  uint64_t v129 = __chkstk_darwin(v127);
  uint64_t v559 = (char *)v508 - v130;
  uint64_t v131 = __chkstk_darwin(v129);
  uint64_t v575 = (unsigned int (*)(char *, uint64_t, uint64_t))((char *)v508 - v132);
  uint64_t v133 = __chkstk_darwin(v131);
  uint64_t v514 = (char *)v508 - v134;
  uint64_t v135 = __chkstk_darwin(v133);
  uint64_t v585 = (char *)v508 - v136;
  __chkstk_darwin(v135);
  size_t v586 = (char *)v508 - v137;
  unint64_t v592 = (void (*)(char *, char *, uint64_t))v6;
  uint64_t v593 = v10;
  uint64_t v598 = v6;
  uint64_t v599 = v10;
  uint64_t v138 = v5;
  unint64_t v600 = v5;
  unint64_t v601 = v9;
  unint64_t v589 = (unint64_t)v9;
  uint64_t v139 = v595;
  type metadata accessor for Ingestion.DeleteFolderFromSnapshotIfEmpty();
  uint64_t v140 = swift_dynamicCastClass();
  if (v140 && v139 == 8)
  {
    uint64_t v141 = v140 + *(void *)(*(void *)v140 + 576);
    long long v142 = *(uint64_t (**)(uint64_t, uint64_t))(*v594[4] + 368);
    swift_retain();
    uint64_t v143 = v141;
    uint64_t v144 = v596;
    char v145 = v142(v143, 1);
    uint64_t result = swift_release();
    if (!v144)
    {
LABEL_4:
      char v147 = v145 ^ 1;
      return v147 & 1;
    }
    return result;
  }
  uint64_t v148 = (uint64_t)v592;
  uint64_t v598 = (uint64_t)v592;
  uint64_t v599 = v593;
  uint64_t v149 = (ValueMetadata *)v589;
  unint64_t v600 = v138;
  unint64_t v601 = (ValueMetadata *)v589;
  type metadata accessor for Materialization.MaterializeItem();
  uint64_t v150 = swift_dynamicCastClass();
  if (v150 && v139 == 32)
  {
    uint64_t v595 = v150;
    uint64_t v151 = v590;
    uint64_t v152 = v591 + 16;
    uint64_t v153 = *(void (**)(char *, uint64_t, uint64_t))(v591 + 16);
    uint64_t v154 = v586;
    v153(v586, v587, v590);
    uint64_t v155 = v588;
    uint64_t v156 = *(void (***)(char *, uint64_t))(v588 - 8);
    uint64_t v157 = (unsigned int (*)(char *, uint64_t, uint64_t))v156[6];
    if (v157(v154, 1, v588) == 1)
    {
      uint64_t v575 = v157;
      long long v572 = v153;
      swift_retain();
LABEL_9:
      TupleTypeMetadata2 = v152;
      uint64_t v159 = v591 + 8;
      uint64_t v158 = *(void (**)(char *, uint64_t))(v591 + 8);
      v158(v154, v151);
      uint64_t v160 = v595 + *(void *)(*(void *)v595 + 576);
      uint64_t v161 = v584;
      uint64_t v162 = v596;
      sub_1000DEDD8(v160, v584);
      if (v162) {
        return swift_release();
      }
      uint64_t v595 = v160;
      size_t v586 = (char *)v158;
      size_t v567 = v156;
      uint64_t v591 = v159;
      uint64_t v191 = v582;
      uint64_t v192 = v579;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v582 + 48))(v161, 1, v579) == 1)
      {
        swift_release();
        (*(void (**)(uint64_t, uint64_t))(v569 + 8))(v161, v570);
        goto LABEL_67;
      }
      uint64_t v218 = *(void (**)(char *, uint64_t, uint64_t))(v191 + 32);
      uint64_t v219 = v161;
      unint64_t v220 = v574;
      v218(v574, v219, v192);
      uint64_t v221 = type metadata accessor for ItemReconciliationHalf();
      uint64_t v222 = *(int *)(v221 + 36);
      if (v220[v222])
      {
        (*(void (**)(char *, uint64_t))(v191 + 8))(v220, v192);
        swift_release();
        goto LABEL_67;
      }
      uint64_t v585 = (char *)v218;
      unint64_t v592 = (void (*)(char *, char *, uint64_t))v221;
      uint64_t v223 = v594[4];
      uint64_t v216 = v558;
      (*(void (**)(uint64_t, uint64_t))(*v223 + 240))(v595, 1);
      uint64_t v324 = v576;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v576 + 48))(v216, 1, v573) == 1)
      {
        (*(void (**)(char *, uint64_t))(v582 + 8))(v220, v192);
LABEL_129:
        swift_release();
        (*(void (**)(char *, uint64_t))(v563 + 8))(v216, v565);
        goto LABEL_67;
      }
      uint64_t v584 = v222;
      uint64_t v596 = 0;
      uint64_t v331 = v324;
      int v332 = v547;
      uint64_t v333 = v573;
      (*(void (**)(char *, char *, uint64_t))(v324 + 32))(v547, v216, v573);
      uint64_t WitnessTable = swift_getWitnessTable();
      char v335 = FileItem.isDataless.getter(v333, WitnessTable);
      uint64_t v336 = v544;
      (*(void (**)(char *, char *, uint64_t))(v324 + 16))(v544, v332, v333);
      if ((v335 & 1) == 0)
      {
        uint64_t v585 = *(char **)(v324 + 8);
        ((void (*)(char *, uint64_t))v585)(v336, v333);
LABEL_206:
        uint64_t v404 = v579;
        uint64_t v405 = v574;
        BOOL v406 = sub_100827AAC(v579);
        uint64_t v407 = v582;
        uint64_t v408 = v542;
        uint64_t v409 = *(void (**)(char *, char *, uint64_t))(v582 + 16);
        v409(v542, v405, v404);
        if (v406)
        {
          uint64_t v410 = &v408[*(int *)(v404 + 52)];
          int v411 = v410[*(int *)(type metadata accessor for ItemReconciliationHalf() + 52)];
          uint64_t v412 = v408;
          int v413 = *(void (**)(char *, uint64_t))(v407 + 8);
          v413(v412, v404);
          BOOL v414 = (v411 | 4) == 4;
          uint64_t v415 = v543;
          if (v414) {
            goto LABEL_275;
          }
        }
        else
        {
          uint64_t v442 = v408;
          int v413 = *(void (**)(char *, uint64_t))(v407 + 8);
          v413(v442, v404);
          uint64_t v415 = v543;
        }
        uint64_t v583 = *((int *)v592 + 14);
        int v443 = v574[v583];
        uint64_t v444 = v539;
        if (v443 == 6)
        {
          uint64_t v404 = v579;
          ((void (*)(char *))v409)(v415);
        }
        else
        {
          uint64_t v404 = v579;
          ((void (*)(char *))v409)(v415);
          if (v443 == 4)
          {
            v413(v415, v404);
            goto LABEL_243;
          }
        }
        int v445 = v415[*((int *)v592 + 14)];
        v413(v415, v404);
        if (v445 != 6) {
          goto LABEL_275;
        }
LABEL_243:
        unsigned int v446 = v574;
        BOOL v447 = sub_100827AAC(v404);
        v409(v444, v446, v404);
        if (v447)
        {
          uint64_t v448 = &v444[*(int *)(v404 + 52)];
          uint64_t v593 = type metadata accessor for ItemReconciliationHalf();
          LODWORD(v448) = v448[*(int *)(v593 + 52)];
          uint64_t v449 = v519;
          v409(v519, v444, v404);
          if (v448 == 3)
          {
            v413(v449, v404);
            v413(v444, v404);
LABEL_275:
            swift_release();
            ((void (*)(char *, uint64_t))v585)(v547, v573);
            v413(v574, v404);
            return 0;
          }
          int v473 = v449[*(int *)(v404 + 52) + *(int *)(v593 + 52)];
          v413(v449, v404);
          v413(v444, v404);
          if (v473 == 1) {
            goto LABEL_275;
          }
        }
        else
        {
          v413(v444, v404);
        }
        uint64_t v593 = (uint64_t)v413;
        uint64_t v460 = v574;
        uint64_t v461 = v527;
        unint64_t v462 = v521;
        if (v574[v583] != 4)
        {
          unsigned int v469 = *(void (**)(char *, char *, uint64_t))(v527 + 16);
          uint64_t v470 = v564;
          uint64_t v471 = v525;
          uint64_t v472 = v523;
          goto LABEL_304;
        }
        unint64_t v463 = &v574[*(int *)(v579 + 52)];
        unsigned int v464 = *(int **)(v527 + 16);
        unint64_t v589 = (v527 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
        uint64_t v465 = v523;
        unint64_t v592 = (void (*)(char *, char *, uint64_t))v464;
        ((void (*)(char *, char *, uint64_t))v464)(v521, v463, v523);
        uint64_t v466 = v525;
        uint64_t v470 = v564;
        uint64_t v583 = *(void *)(v525 + 48);
        if (((unsigned int (*)(char *, uint64_t, uint64_t))v583)(v462, 1, v564) == 1)
        {
          (*(void (**)(char *, uint64_t))(v461 + 8))(v462, v465);
          uint64_t v471 = v466;
          uint64_t v472 = v465;
LABEL_303:
          unsigned int v469 = v592;
LABEL_304:
          uint64_t v494 = v579;
          char v495 = v520;
          v469(v520, &v460[*(int *)(v579 + 52)], v472);
          uint64_t v496 = v495;
          int v497 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v471 + 48))(v495, 1, v470);
          long long v498 = v594;
          if (v497 == 1)
          {
            swift_release();
            ((void (*)(char *, uint64_t))v585)(v547, v573);
            ((void (*)(char *, uint64_t))v593)(v460, v494);
            (*(void (**)(char *, uint64_t))(v527 + 8))(v496, v472);
          }
          else
          {
            long long v499 = v515;
            (*(void (**)(char *, char *, uint64_t))(v471 + 32))(v515, v496, v470);
            uint64_t v500 = v596;
            uint64_t v501 = (*(uint64_t (**)(char *))(*v498[3] + 248))(v499);
            uint64_t v502 = v573;
            if (v500)
            {
              swift_release();
              (*(void (**)(char *, uint64_t))(v471 + 8))(v499, v470);
              ((void (*)(char *, uint64_t))v585)(v547, v502);
              return ((uint64_t (*)(char *, uint64_t))v593)(v574, v494);
            }
            if (v501)
            {
              uint64_t v503 = *(void *)(v501 + 136);
              swift_release();
              swift_release();
              (*(void (**)(char *, uint64_t))(v471 + 8))(v499, v564);
              ((void (*)(char *, uint64_t))v585)(v547, v502);
              ((void (*)(char *, uint64_t))v593)(v574, v494);
              if ((v503 & 2) != 0) {
                return 0;
              }
            }
            else
            {
              swift_release();
              (*(void (**)(char *, uint64_t))(v471 + 8))(v499, v564);
              ((void (*)(char *, uint64_t))v585)(v547, v502);
              ((void (*)(char *, uint64_t))v593)(v574, v494);
            }
          }
LABEL_67:
          char v147 = 1;
          return v147 & 1;
        }
        (*(void (**)(char *, char *, uint64_t))(v466 + 32))(v516, v462, v470);
        uint64_t v484 = v514;
        uint64_t v485 = v590;
        v572(v514, v587, v590);
        uint64_t v486 = v588;
        if (v575(v484, 1, v588) == 1)
        {
          ((void (*)(char *, uint64_t))v586)(v484, v485);
        }
        else
        {
          if (swift_getEnumCaseMultiPayload() == 2)
          {
            uint64_t v471 = v525;
            uint64_t v470 = v564;
            (*(void (**)(char *, uint64_t))(v525 + 8))(v516, v564);
            v567[1](v484, v486);
LABEL_302:
            uint64_t v472 = v523;
            goto LABEL_303;
          }
          v567[1](v484, v486);
        }
        if ((v460[v584] & 0x10) == 0)
        {
          uint64_t v492 = v596;
          char v493 = (*(uint64_t (**)(uint64_t))(*v223 + 464))(v595);
          uint64_t v596 = v492;
          if (v492)
          {
            swift_release();
            (*(void (**)(char *, uint64_t))(v525 + 8))(v516, v564);
            ((void (*)(char *, uint64_t))v585)(v547, v573);
            return ((uint64_t (*)(char *, uint64_t))v593)(v574, v579);
          }
          if ((v493 & 1) == 0)
          {
            uint64_t v504 = v596;
            (*(void (**)(char *, uint64_t))(*v594[5] + 416))(v516, 1);
            uint64_t v596 = v504;
            uint64_t v505 = v564;
            (*(void (**)(char *, uint64_t))(v525 + 8))(v516, v564);
            if (((unsigned int (*)(char *, uint64_t, uint64_t))v583)(v509, 1, v505) != 1)
            {
              swift_release();
              (*(void (**)(char *, uint64_t))(v527 + 8))(v509, v523);
              ((void (*)(char *, uint64_t))v585)(v547, v573);
              ((void (*)(char *, uint64_t))v593)(v574, v579);
              return 0;
            }
            uint64_t v472 = v523;
            (*(void (**)(char *, uint64_t))(v527 + 8))(v509, v523);
            uint64_t v470 = v564;
            uint64_t v460 = v574;
            uint64_t v471 = v525;
            goto LABEL_303;
          }
        }
        uint64_t v471 = v525;
        uint64_t v470 = v564;
        (*(void (**)(char *, uint64_t))(v525 + 8))(v516, v564);
        uint64_t v460 = v574;
        goto LABEL_302;
      }
      int v337 = v336[*(int *)(v333 + 48)];
      uint64_t v338 = *(void (**)(char *, uint64_t))(v331 + 8);
      v338(v336, v333);
      if (v337 == 2)
      {
        uint64_t v585 = (char *)v338;
        goto LABEL_206;
      }
      swift_release();
      uint64_t v450 = v579;
      uint64_t v451 = v574;
      int v452 = &v574[*(int *)(v579 + 52)];
      LODWORD(v452) = v452[*(int *)(type metadata accessor for ItemReconciliationHalf() + 52)];
      v338(v332, v573);
      unint64_t v453 = v526;
      ((void (*)(char *, char *, uint64_t))v585)(v526, v451, v450);
      if (v452 == 4)
      {
        int v454 = v453[*((int *)v592 + 11)];
        (*(void (**)(char *, uint64_t))(v582 + 8))(v453, v450);
        if (v454) {
          goto LABEL_67;
        }
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v582 + 8))(v453, v450);
      }
      return 0;
    }
    uint64_t v571 = (char *)(v156 + 6);
    v153(v585, (uint64_t)v154, v151);
    uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch((int)EnumCaseMultiPayload)
    {
      case 2:
        uint64_t v167 = v585;
        uint64_t v168 = v583;
        if (swift_getEnumCaseMultiPayload() == 1) {
          goto LABEL_71;
        }
        uint64_t v575 = v157;
        long long v572 = v153;
        size_t v567 = v156;
        uint64_t v169 = v578;
        uint64_t v170 = v550;
        uint64_t v171 = v580;
        (*(void (**)(char *, char *, uint64_t))(v578 + 32))(v550, v167, v580);
        swift_retain();
        char v172 = sub_10096BBE0();
        uint64_t v151 = v590;
        char v173 = v172;
        (*(void (**)(char *, uint64_t))(v169 + 8))(v170, v171);
        goto LABEL_106;
      case 5:
        uint64_t v575 = v157;
        size_t v567 = v156;
        uint64_t v553 = v138;
        uint64_t v245 = v565;
        TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
        uint64_t v247 = v585;
        uint64_t v248 = &v585[*(int *)(TupleTypeMetadata3 + 48)];
        uint64_t v249 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v576 + 48);
        uint64_t v250 = v573;
        if (v249(v585, 1, v573) == 1)
        {
          uint64_t v251 = *(void (**)(char *, uint64_t))(v563 + 8);
          v251(v248, v245);
          v251(v247, v245);
          goto LABEL_147;
        }
        if (v249(v248, 1, v250) != 1)
        {
          (*(void (**)(char *, uint64_t))(v576 + 8))(v585, v250);
          uint64_t v325 = *(void (**)(char *, uint64_t))(v563 + 8);
          uint64_t v326 = v248;
          goto LABEL_141;
        }
        long long v572 = v153;
        uint64_t v299 = v578;
        uint64_t v300 = v546;
        uint64_t v301 = v585;
        uint64_t v302 = v580;
        (*(void (**)(char *, char *, uint64_t))(v578 + 16))(v546, v585, v580);
        uint64_t v303 = *(void (**)(char *, uint64_t))(v576 + 8);
        swift_retain();
        v303(v301, v250);
        char v173 = sub_10096BBE0();
        (*(void (**)(char *, uint64_t))(v299 + 8))(v300, v302);
        uint64_t v151 = v590;
        uint64_t v154 = v586;
LABEL_106:
        uint64_t v156 = v567;
        goto LABEL_107;
      case 10:
        long long v572 = v153;
        size_t v567 = v156;
        uint64_t v256 = v583;
        uint64_t v598 = v583;
        uint64_t v599 = sub_10096C890();
        unint64_t v600 = &type metadata for ContentStatus;
        unint64_t v601 = &type metadata for ContentStatus;
        uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
        uint64_t v258 = v585;
        uint64_t v259 = &v585[*(int *)(TupleTypeMetadata + 48)];
        int v260 = v585[*(int *)(TupleTypeMetadata + 80)];
        if (swift_getEnumCaseMultiPayload() != 1)
        {
          uint64_t v309 = sub_10096C890();
          (*(void (**)(char *, uint64_t))(*(void *)(v309 - 8) + 8))(v259, v309);
          (*(void (**)(char *, uint64_t))(v581 + 8))(v258, v256);
          goto LABEL_112;
        }
        uint64_t v553 = v138;
        uint64_t v261 = v581;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v581 + 48))(v259, 1, v256) == 1)
        {
          (*(void (**)(char *, uint64_t))(v261 + 8))(v585, v256);
          goto LABEL_145;
        }
        uint64_t v575 = v157;
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v328 = *(void (**)(char *, uint64_t))(v261 + 8);
          v328(v259, v256);
          v328(v585, v256);
          goto LABEL_147;
        }
        if (v260 == 2)
        {
          uint64_t v380 = v578;
          char v381 = v530;
          uint64_t v382 = v580;
          (*(void (**)(char *, char *, uint64_t))(v578 + 32))(v530, v259, v580);
          swift_retain();
          char v383 = sub_10096BBE0();
          (*(void (**)(char *, uint64_t))(v380 + 8))(v381, v382);
          if (v383)
          {
            (*(void (**)(char *, uint64_t))(v261 + 8))(v585, v256);
            uint64_t v151 = v590;
            goto LABEL_116;
          }
          swift_release();
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v578 + 8))(v259, v580);
        }
        (*(void (**)(char *, uint64_t))(v261 + 8))(v585, v256);
        goto LABEL_147;
      case 11:
        size_t v567 = v156;
        __chkstk_darwin(EnumCaseMultiPayload);
        strcpy((char *)&v508[-4], " otherID from to ");
        uint64_t v262 = v583;
        uint64_t v598 = v583;
        uint64_t v599 = sub_10096C890();
        unint64_t v600 = (ValueMetadata *)sub_100033BE8((uint64_t *)&unk_100AD4BE0);
        unint64_t v601 = v600;
        uint64_t v263 = swift_getTupleTypeMetadata();
        uint64_t v264 = v585;
        uint64_t v259 = &v585[*(int *)(v263 + 48)];
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v265 = sub_10096C890();
          (*(void (**)(char *, uint64_t))(*(void *)(v265 - 8) + 8))(v259, v265);
          (*(void (**)(char *, uint64_t))(v581 + 8))(v264, v262);
          goto LABEL_112;
        }
        uint64_t v575 = v157;
        long long v572 = v153;
        uint64_t v311 = v578;
        uint64_t v312 = v553;
        uint64_t v313 = v580;
        (*(void (**)(ValueMetadata *, char *, uint64_t))(v578 + 32))(v553, v264, v580);
        swift_retain();
        char v314 = sub_10096BBE0();
        (*(void (**)(ValueMetadata *, uint64_t))(v311 + 8))(v312, v313);
        if (v314)
        {
          uint64_t v315 = sub_10096C890();
          (*(void (**)(char *, uint64_t))(*(void *)(v315 - 8) + 8))(v259, v315);
          uint64_t v151 = v590;
          goto LABEL_116;
        }
        swift_release();
LABEL_145:
        uint64_t v327 = sub_10096C890();
        uint64_t v325 = *(void (**)(char *, uint64_t))(*(void *)(v327 - 8) + 8);
        uint64_t v326 = v259;
        goto LABEL_146;
      case 14:
        sub_100033BE8((uint64_t *)&unk_100ACB6B0);
        uint64_t v266 = v583;
        uint64_t v267 = swift_getTupleTypeMetadata2();
        uint64_t v268 = v585;
        uint64_t v269 = *(void *)&v585[*(int *)(v267 + 48)];
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          swift_errorRelease();
          (*(void (**)(char *, uint64_t))(v581 + 8))(v268, v266);
          goto LABEL_112;
        }
        uint64_t v598 = v269;
        swift_retain();
        int v316 = swift_dynamicCast();
        uint64_t v310 = v591;
        if (v316)
        {
          uint64_t v317 = v580;
          if (v602 == 5)
          {
            uint64_t v318 = v578;
            uint64_t v319 = *(void (**)(uint64_t, char *, uint64_t))(v578 + 16);
            uint64_t v320 = &v567;
          }
          else
          {
            if (v602 != 3) {
              goto LABEL_221;
            }
            uint64_t v318 = v578;
            uint64_t v319 = *(void (**)(uint64_t, char *, uint64_t))(v578 + 16);
            uint64_t v320 = (void (***)(char *, uint64_t))&v566;
          }
          uint64_t v431 = (uint64_t)*(v320 - 32);
          v319(v431, v268, v580);
          char v432 = sub_10096BBE0();
          char v433 = *(void (**)(uint64_t, uint64_t))(v318 + 8);
          v433(v431, v317);
          if (v432)
          {
            swift_release();
            swift_errorRelease();
            v433((uint64_t)v268, v317);
            (*(void (**)(char *, uint64_t))(v310 + 8))(v586, v590);
            return 0;
          }
        }
        else
        {
          uint64_t v317 = v580;
        }
LABEL_221:
        swift_errorRelease();
        uint64_t v434 = v578;
        uint64_t v435 = v548;
        (*(void (**)(char *, char *, uint64_t))(v578 + 32))(v548, v268, v317);
        char v436 = sub_10096BBE0();
        swift_release();
        (*(void (**)(char *, uint64_t))(v434 + 8))(v435, v317);
        uint64_t v151 = v590;
        uint64_t v154 = v586;
        if ((v436 & 1) == 0) {
          goto LABEL_148;
        }
        (*(void (**)(char *, uint64_t))(v310 + 8))(v586, v590);
        goto LABEL_226;
      case 15:
        uint64_t v575 = v157;
        sub_100033BE8((uint64_t *)&unk_100ACB6B0);
        uint64_t v168 = v583;
        swift_getTupleTypeMetadata2();
        uint64_t v167 = v585;
        swift_retain();
        swift_errorRelease();
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          swift_release();
LABEL_71:
          (*(void (**)(char *, uint64_t))(v581 + 8))(v167, v168);
          goto LABEL_113;
        }
        long long v572 = v153;
        uint64_t v293 = v578;
        uint64_t v294 = v552;
        uint64_t v295 = (char *)v156;
        uint64_t v296 = v580;
        (*(void (**)(char *, char *, uint64_t))(v578 + 32))(v552, v167, v580);
        char v297 = sub_10096BBE0();
        uint64_t v151 = v590;
        char v173 = v297;
        uint64_t v298 = v296;
        uint64_t v156 = (void (**)(char *, uint64_t))v295;
        (*(void (**)(char *, uint64_t))(v293 + 8))(v294, v298);
        uint64_t v154 = v586;
LABEL_107:
        if ((v173 & 1) == 0)
        {
          swift_release();
          goto LABEL_113;
        }
        goto LABEL_9;
      case 21:
        uint64_t v575 = v157;
        long long v572 = v153;
        swift_retain();
        swift_release();
        goto LABEL_9;
      case 31:
        uint64_t v575 = v157;
        uint64_t v245 = v583;
        uint64_t v252 = swift_getTupleTypeMetadata2();
        uint64_t v253 = v585;
        unint64_t v254 = &v585[*(int *)(v252 + 48)];
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v255 = *(void (**)(char *, uint64_t))(v581 + 8);
          v255(v254, v245);
          v255(v253, v245);
LABEL_112:
          uint64_t v151 = v590;
LABEL_113:
          uint64_t v310 = v591;
        }
        else
        {
          uint64_t v304 = v254;
          long long v572 = v153;
          size_t v567 = v156;
          uint64_t v553 = v138;
          uint64_t v305 = v578;
          uint64_t v306 = v551;
          uint64_t v307 = v580;
          (*(void (**)(char *, char *, uint64_t))(v578 + 32))(v551, v253, v580);
          swift_retain();
          char v308 = sub_10096BBE0();
          (*(void (**)(char *, uint64_t))(v305 + 8))(v306, v307);
          if (v308)
          {
            (*(void (**)(char *, uint64_t))(v581 + 8))(v304, v245);
            uint64_t v151 = v590;
LABEL_116:
            uint64_t v154 = v586;
            uint64_t v156 = v567;
            goto LABEL_9;
          }
          swift_release();
          uint64_t v325 = *(void (**)(char *, uint64_t))(v581 + 8);
          uint64_t v326 = v304;
LABEL_141:
          uint64_t v327 = v245;
LABEL_146:
          v325(v326, v327);
LABEL_147:
          uint64_t v151 = v590;
          uint64_t v310 = v591;
          uint64_t v154 = v586;
        }
LABEL_148:
        (*(void (**)(char *, uint64_t))(v310 + 8))(v154, v151);
        return 0;
      default:
        v156[1](v585, v155);
        goto LABEL_113;
    }
  }
  uint64_t v598 = v148;
  uint64_t v599 = v593;
  uint64_t v553 = v138;
  unint64_t v600 = v138;
  unint64_t v601 = v149;
  type metadata accessor for Materialization.EvictItem();
  uint64_t v163 = v597;
  uint64_t v164 = swift_dynamicCastClass();
  if (!v164)
  {
    uint64_t v165 = (uint64_t)v592;
    if (v139 == 0x40000) {
      goto LABEL_27;
    }
    if (v139 != 256)
    {
      if (v139 != 128) {
        goto LABEL_33;
      }
LABEL_22:
      uint64_t v174 = v594;
      if ((((uint64_t (*)(void))(*v594)[19])() & 0x100) != 0) {
        goto LABEL_226;
      }
      uint64_t v175 = TupleTypeMetadata2;
      uint64_t v176 = *(int *)(TupleTypeMetadata2 + 48);
      uint64_t v177 = v590;
      uint64_t v178 = v163;
      uint64_t v179 = *(void (**)(char *, uint64_t, uint64_t))(v591 + 16);
      uint64_t v180 = (char *)v572;
      v179((char *)v572, v587, v590);
      uint64_t v595 = v176;
      *(void *)&v180[v176] = v178;
      uint64_t v181 = v588;
      uint64_t v182 = *(void *)(v588 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v182 + 48))(v180, 1, v588) == 1)
      {
        swift_retain();
      }
      else
      {
        uint64_t v283 = v556;
        v179(v556, (uint64_t)v180, v177);
        uint64_t v284 = v283;
        uint64_t v285 = swift_getEnumCaseMultiPayload();
        if (v285 == 11)
        {
          __chkstk_darwin(v285);
          strcpy((char *)&v508[-4], " otherID from to ");
          uint64_t v286 = v583;
          uint64_t v598 = v583;
          uint64_t v599 = sub_10096C890();
          unint64_t v600 = (ValueMetadata *)sub_100033BE8((uint64_t *)&unk_100AD4BE0);
          unint64_t v601 = v600;
          uint64_t v287 = swift_getTupleTypeMetadata();
          uint64_t v288 = &v284[*(int *)(v287 + 48)];
          int v289 = v284[*(int *)(v287 + 80)];
          uint64_t v598 = (uint64_t)v592;
          uint64_t v599 = v593;
          unint64_t v600 = v553;
          unint64_t v601 = (ValueMetadata *)v589;
          type metadata accessor for DiskImport.ContinueDiskImport();
          uint64_t v290 = v284;
          if (swift_dynamicCastClass())
          {
            uint64_t v291 = sub_10096C890();
            uint64_t v292 = *(void (**)(char *, uint64_t))(*(void *)(v291 - 8) + 8);
            swift_retain();
            v292(v288, v291);
            (*(void (**)(char *, uint64_t))(v581 + 8))(v290, v286);
            uint64_t v180 = (char *)v572;
            if (v289 == 6)
            {
              swift_release();
              (*(void (**)(char *, uint64_t))(v591 + 8))(v180, v590);
              goto LABEL_226;
            }
          }
          else
          {
            uint64_t v359 = sub_10096C890();
            uint64_t v360 = *(void (**)(char *, uint64_t))(*(void *)(v359 - 8) + 8);
            swift_retain();
            v360(v288, v359);
            (*(void (**)(char *, uint64_t))(v581 + 8))(v284, v286);
            uint64_t v180 = (char *)v572;
          }
        }
        else
        {
          uint64_t v321 = *(void (**)(char *, uint64_t))(v182 + 8);
          swift_retain();
          v321(v283, v181);
        }
      }
      uint64_t v361 = (*(uint64_t (**)(char *, uint64_t))(v566 + 8))(v180, v175);
      uint64_t v362 = (void *)((uint64_t (*)(uint64_t))(*v174)[33])(v361);
      char v363 = sub_10070C45C((uint64_t)sub_10009F3F4, 0);

      goto LABEL_168;
    }
    goto LABEL_40;
  }
  if (v139 > 255)
  {
    uint64_t v165 = (uint64_t)v592;
    if (v139 != 256)
    {
      if (v139 != 0x40000) {
        goto LABEL_33;
      }
LABEL_27:
      if (!*((unsigned char *)v163 + 112) && (*((unsigned char *)v163 + 97) & 1) == 0) {
        goto LABEL_226;
      }
      uint64_t v183 = v590;
      uint64_t v184 = v591;
      uint64_t v185 = *(void (**)(char *, uint64_t, uint64_t))(v591 + 16);
      v185(v120, v587, v590);
      uint64_t v186 = v588;
      uint64_t v187 = *(void *)(v588 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v187 + 48))(v120, 1, v588) == 1) {
        goto LABEL_30;
      }
      v185(v117, (uint64_t)v120, v183);
      if (swift_getEnumCaseMultiPayload() == 13)
      {
        uint64_t v236 = v560;
        uint64_t v237 = v554;
        uint64_t v238 = v561;
        (*(void (**)(char *, char *, uint64_t))(v560 + 32))(v554, v117, v561);
        uint64_t v598 = sub_10070CDE0(v597, v580, v564, v592, v593, v553, v589);
        sub_10096C1C0();
        uint64_t v595 = swift_getWitnessTable();
        swift_getWitnessTable();
        char v239 = sub_10096BF80();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v236 + 8))(v237, v238);
        if (v239)
        {
LABEL_30:
          (*(void (**)(char *, uint64_t))(v184 + 8))(v120, v183);
          uint64_t v189 = v596;
          uint64_t v188 = v597;
          int v190 = 1;
          goto LABEL_43;
        }
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v187 + 8))(v117, v186);
      }
      (*(void (**)(char *, uint64_t))(v184 + 8))(v120, v183);
      return 0;
    }
LABEL_40:
    if ((((uint64_t (*)(void))(*v594)[19])() & 0x100) != 0) {
      goto LABEL_226;
    }
    uint64_t v204 = v590;
    uint64_t v203 = v591;
    uint64_t v205 = *(void (**)(char *, uint64_t, uint64_t))(v591 + 16);
    v205(v126, v587, v590);
    uint64_t v206 = v588;
    uint64_t v207 = *(void *)(v588 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v207 + 48))(v126, 1, v588) == 1) {
      goto LABEL_42;
    }
    v205(v123, (uint64_t)v126, v204);
    if (swift_getEnumCaseMultiPayload() == 13)
    {
      uint64_t v278 = v560;
      uint64_t v279 = v549;
      uint64_t v280 = v561;
      (*(void (**)(char *, char *, uint64_t))(v560 + 32))(v549, v123, v561);
      uint64_t v598 = sub_10070CDE0(v163, v580, v564, v592, v593, v553, v589);
      sub_10096C1C0();
      swift_getWitnessTable();
      swift_getWitnessTable();
      uint64_t v163 = v597;
      char v281 = sub_10096BF80();
      swift_bridgeObjectRelease();
      unsigned int v282 = v279;
      uint64_t v204 = v590;
      (*(void (**)(char *, uint64_t))(v278 + 8))(v282, v280);
      if (v281)
      {
LABEL_42:
        (*(void (**)(char *, uint64_t))(v203 + 8))(v126, v204);
        uint64_t v188 = v163;
        int v190 = 0;
        uint64_t v189 = v596;
LABEL_43:
        uint64_t result = sub_1001EB698(v188, v190);
        if (!v189)
        {
          char v147 = result ^ 1;
          return v147 & 1;
        }
        return result;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v207 + 8))(v123, v206);
    }
    (*(void (**)(char *, uint64_t))(v203 + 8))(v126, v204);
    return 0;
  }
  if (v139 == 64)
  {
    uint64_t v208 = v164;
    uint64_t v209 = v591;
    uint64_t v210 = *(void (**)(void))(v591 + 16);
    uint64_t v211 = (char *)v575;
    ((void (*)(unsigned int (*)(char *, uint64_t, uint64_t), uint64_t, uint64_t))v210)(v575, v587, v590);
    uint64_t v212 = *(void *)(v588 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v212 + 48))(v211, 1, v588) == 1)
    {
      swift_retain();
      uint64_t v213 = v594;
LABEL_47:
      size_t v214 = v571;
LABEL_48:
      (*(void (**)(char *, uint64_t))(v209 + 8))(v211, v590);
      uint64_t v215 = v208 + *(void *)(*(void *)v208 + 576);
      uint64_t v216 = v562;
      uint64_t v217 = v596;
      (*(void (**)(uint64_t, uint64_t))(*v213[4] + 240))(v215, 1);
      if (v217) {
        return swift_release();
      }
      uint64_t v322 = v576;
      uint64_t v323 = v573;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v576 + 48))(v216, 1, v573) != 1)
      {
        uint64_t v329 = v545;
        (*(void (**)(char *, char *, uint64_t))(v322 + 32))(v545, v216, v323);
        uint64_t v330 = swift_getWitnessTable();
        if (FileItem.kind.getter(v323, v330) == 2)
        {
          (*(void (**)(char *, uint64_t))(v322 + 8))(v329, v323);
          swift_release();
          char v147 = 1;
          return v147 & 1;
        }
        if ((FileItem.isDataless.getter(v323, v330) & 1) == 0)
        {
          (*(void (**)(char *, uint64_t))(v322 + 8))(v329, v323);
          swift_release();
          char v147 = 0;
          return v147 & 1;
        }
        uint64_t v384 = v529;
        sub_1000DEDD8(v215, v529);
        uint64_t v467 = v582;
        uint64_t v468 = v579;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v582 + 48))(v384, 1, v579) != 1)
        {
          (*(void (**)(char *, uint64_t, uint64_t))(v467 + 32))(v214, v384, v468);
          BOOL v482 = sub_100827AAC(v468);
          swift_release();
          (*(void (**)(char *, uint64_t))(v322 + 8))(v329, v573);
          if (v482)
          {
            unint64_t v483 = &v214[*(int *)(v468 + 52)];
            LODWORD(v483) = v483[*(int *)(type metadata accessor for ItemReconciliationHalf() + 52)];
            (*(void (**)(char *, uint64_t))(v467 + 8))(v214, v468);
            char v147 = v483 == 0;
          }
          else
          {
            (*(void (**)(char *, uint64_t))(v467 + 8))(v214, v468);
            char v147 = 1;
          }
          return v147 & 1;
        }
        (*(void (**)(char *, uint64_t))(v322 + 8))(v329, v573);
        swift_release();
        (*(void (**)(uint64_t, uint64_t))(v569 + 8))(v384, v570);
        goto LABEL_67;
      }
      goto LABEL_129;
    }
    unsigned int v240 = v559;
    v210();
    int v241 = swift_getEnumCaseMultiPayload() - 4;
    size_t v214 = v571;
    switch(v241)
    {
      case 0:
        uint64_t v242 = v583;
        uint64_t v243 = (uint64_t)&v240[*(int *)(swift_getTupleTypeMetadata2() + 48)];
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v244 = *(void (**)(uint64_t, uint64_t))(v581 + 8);
          v244(v243, v242);
          v244((uint64_t)v240, v242);
          goto LABEL_250;
        }
        uint64_t v595 = v243;
        uint64_t v416 = v578;
        uint64_t v417 = v536;
        uint64_t v418 = v580;
        (*(void (**)(char *, char *, uint64_t))(v578 + 32))(v536, v240, v580);
        swift_retain();
        char v419 = sub_10096BBE0();
        (*(void (**)(char *, uint64_t))(v416 + 8))(v417, v418);
        if (v419)
        {
          (*(void (**)(uint64_t, uint64_t))(v581 + 8))(v595, v583);
          uint64_t v213 = v594;
          uint64_t v211 = (char *)v575;
          goto LABEL_48;
        }
        swift_release();
        (*(void (**)(uint64_t, uint64_t))(v581 + 8))(v595, v583);
        goto LABEL_250;
      case 1:
        uint64_t v346 = v565;
        unsigned int v347 = &v240[*(int *)(swift_getTupleTypeMetadata3() + 48)];
        unsigned int v348 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v576 + 48);
        uint64_t v349 = v240;
        uint64_t v350 = v240;
        uint64_t v351 = v573;
        if (v348(v349, 1, v573) == 1)
        {
          uint64_t v352 = *(void (**)(char *, uint64_t))(v563 + 8);
          v352(v347, v346);
          v352(v350, v346);
          uint64_t v211 = (char *)v575;
          goto LABEL_215;
        }
        if (v348(v347, 1, v351) == 1)
        {
          uint64_t v420 = v578;
          uint64_t v421 = v546;
          uint64_t v422 = v559;
          uint64_t v423 = v580;
          (*(void (**)(char *, char *, uint64_t))(v578 + 16))(v546, v559, v580);
          uint64_t v595 = *(void *)(v576 + 8);
          swift_retain();
          ((void (*)(char *, uint64_t))v595)(v422, v351);
          char v424 = sub_10096BBE0();
          (*(void (**)(char *, uint64_t))(v420 + 8))(v421, v423);
          uint64_t v213 = v594;
          size_t v214 = v571;
          if (v424) {
            goto LABEL_48;
          }
LABEL_214:
          swift_release();
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v576 + 8))(v559, v351);
          (*(void (**)(char *, uint64_t))(v563 + 8))(v347, v565);
        }
        goto LABEL_215;
      case 6:
        uint64_t v339 = v583;
        uint64_t v598 = v583;
        uint64_t v599 = sub_10096C890();
        unint64_t v600 = &type metadata for ContentStatus;
        unint64_t v601 = &type metadata for ContentStatus;
        uint64_t v340 = swift_getTupleTypeMetadata();
        uint64_t v341 = &v240[*(int *)(v340 + 48)];
        char v342 = v240;
        int v343 = v240[*(int *)(v340 + 80)];
        uint64_t v344 = sub_10096C890();
        uint64_t v345 = *(void (**)(char *, uint64_t))(*(void *)(v344 - 8) + 8);
        uint64_t v213 = v594;
        if (!v343)
        {
          swift_retain();
          v345(v341, v344);
          (*(void (**)(char *, uint64_t))(v581 + 8))(v342, v339);
          uint64_t v211 = (char *)v575;
          goto LABEL_47;
        }
        v345(v341, v344);
        (*(void (**)(char *, uint64_t))(v581 + 8))(v342, v339);
LABEL_250:
        uint64_t v425 = v590;
        uint64_t v211 = (char *)v575;
        goto LABEL_251;
      case 10:
        sub_100033BE8((uint64_t *)&unk_100ACB6B0);
        uint64_t v353 = v583;
        swift_getTupleTypeMetadata2();
        swift_retain();
        swift_errorRelease();
        int v354 = swift_getEnumCaseMultiPayload();
        uint64_t v213 = v594;
        if (v354 == 1) {
          goto LABEL_165;
        }
        uint64_t v355 = v240;
        uint64_t v356 = v578;
        uint64_t v357 = v537;
        uint64_t v358 = v580;
        (*(void (**)(char *, char *, uint64_t))(v578 + 32))(v537, v355, v580);
        LODWORD(v595) = sub_10096BBE0();
        (*(void (**)(char *, uint64_t))(v356 + 8))(v357, v358);
        if ((v595 & 1) == 0) {
          goto LABEL_214;
        }
        goto LABEL_48;
      case 11:
        sub_100033BE8((uint64_t *)&unk_100ACB6B0);
        uint64_t v353 = v583;
        swift_getTupleTypeMetadata2();
        swift_retain();
        swift_errorRelease();
        if (swift_getEnumCaseMultiPayload() == 1)
        {
LABEL_165:
          swift_release();
          (*(void (**)(char *, uint64_t))(v581 + 8))(v240, v353);
LABEL_215:
          uint64_t v425 = v590;
        }
        else
        {
          uint64_t v426 = v240;
          uint64_t v427 = v578;
          unint64_t v428 = v538;
          uint64_t v429 = v580;
          (*(void (**)(char *, char *, uint64_t))(v578 + 32))(v538, v426, v580);
          char v430 = sub_10096BBE0();
          swift_release();
          (*(void (**)(char *, uint64_t))(v427 + 8))(v428, v429);
          uint64_t v425 = v590;
          if (v430)
          {
            (*(void (**)(char *, uint64_t))(v209 + 8))(v211, v590);
            goto LABEL_226;
          }
        }
LABEL_251:
        (*(void (**)(char *, uint64_t))(v209 + 8))(v211, v425);
        break;
      default:
        (*(void (**)(char *, uint64_t))(v212 + 8))(v240, v588);
        goto LABEL_215;
    }
    return 0;
  }
  uint64_t v165 = (uint64_t)v592;
  if (v139 == 128) {
    goto LABEL_22;
  }
LABEL_33:
  uint64_t v193 = v593;
  uint64_t v598 = v165;
  uint64_t v599 = v593;
  unint64_t v600 = v553;
  unint64_t v601 = v149;
  type metadata accessor for Materialization.MaterializeParentHierarchy();
  if (swift_dynamicCastClass() && v139 == 2048)
  {
    uint64_t v194 = v590;
    uint64_t v195 = v591;
    uint64_t v196 = *(void (**)(void (**)(char *, uint64_t), uint64_t, uint64_t))(v591 + 16);
    uint64_t v197 = (char *)v567;
    v196(v567, v587, v590);
    uint64_t v198 = v588;
    uint64_t v199 = *(void *)(v588 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v199 + 48))(v197, 1, v588) == 1) {
      goto LABEL_230;
    }
    v196((void (**)(char *, uint64_t))v112, (uint64_t)v197, v194);
    int v200 = swift_getEnumCaseMultiPayload();
    if (v200 != 45)
    {
      if (v200 != 19)
      {
        (*(void (**)(char *, uint64_t))(v199 + 8))(v112, v198);
        goto LABEL_229;
      }
      uint64_t v201 = v583;
      uint64_t v202 = &v112[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        (*(void (**)(char *, uint64_t))(v581 + 8))(v202, v201);
LABEL_229:
        uint64_t v194 = v590;
        goto LABEL_230;
      }
      uint64_t v364 = *v112;
      if (qword_10097BDB8[(char)sub_1007B24CC()] != qword_10097BDB8[v364])
      {
        (*(void (**)(char *, uint64_t))(v578 + 8))(v202, v580);
        goto LABEL_229;
      }
      uint64_t v365 = v578;
      uint64_t v366 = v533;
      uint64_t v367 = v202;
      uint64_t v368 = v580;
      (*(void (**)(char *, char *, uint64_t))(v578 + 32))(v533, v367, v580);
      char v369 = sub_10096BBE0();
      (*(void (**)(char *, uint64_t))(v365 + 8))(v366, v368);
      uint64_t v194 = v590;
      if ((v369 & 1) == 0)
      {
LABEL_230:
        (*(void (**)(char *, uint64_t))(v195 + 8))(v197, v194);
        return 0;
      }
    }
    (*(void (**)(char *, uint64_t))(v195 + 8))(v197, v194);
LABEL_226:
    char v147 = 1;
    return v147 & 1;
  }
  uint64_t v598 = v165;
  uint64_t v599 = v193;
  unint64_t v600 = v553;
  unint64_t v601 = v149;
  type metadata accessor for Materialization.BackgroundMaterializeParentHierarchy();
  uint64_t v224 = swift_dynamicCastClass();
  uint64_t v225 = v591;
  if (v224 && v139 == 2048)
  {
    uint64_t v226 = *(void (**)(char *, uint64_t, uint64_t))(v591 + 16);
    uint64_t v227 = v557;
    uint64_t v228 = v590;
    v226(v557, v587, v590);
    uint64_t v229 = v588;
    uint64_t v230 = *(void *)(v588 - 8);
    int v231 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v230 + 48))(v227, 1, v588);
    uint64_t v232 = v555;
    if (v231 == 1) {
      goto LABEL_292;
    }
    v226(v555, (uint64_t)v227, v228);
    int v233 = swift_getEnumCaseMultiPayload();
    if (v233 != 45)
    {
      if (v233 != 19)
      {
        (*(void (**)(char *, uint64_t))(v230 + 8))(v232, v229);
        goto LABEL_291;
      }
      uint64_t v234 = v583;
      uint64_t v235 = &v232[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        (*(void (**)(char *, uint64_t))(v581 + 8))(v235, v234);
LABEL_291:
        uint64_t v228 = v590;
        goto LABEL_292;
      }
      uint64_t v437 = *v232;
      if (qword_10097BDB8[(char)sub_1007B24CC()] == qword_10097BDB8[v437])
      {
        uint64_t v438 = v578;
        unsigned int v439 = v522;
        uint64_t v440 = v580;
        (*(void (**)(char *, char *, uint64_t))(v578 + 32))(v522, v235, v580);
        char v441 = sub_10096BBE0();
        (*(void (**)(char *, uint64_t))(v438 + 8))(v439, v440);
        uint64_t v228 = v590;
        if (v441) {
          goto LABEL_225;
        }
LABEL_292:
        (*(void (**)(char *, uint64_t))(v225 + 8))(v227, v228);
        return 0;
      }
      goto LABEL_290;
    }
    goto LABEL_225;
  }
  uint64_t v598 = v165;
  uint64_t v599 = v193;
  unint64_t v600 = v553;
  unint64_t v601 = v149;
  type metadata accessor for Materialization.MaterializeIgnoredItem();
  if (swift_dynamicCastClass())
  {
    uint64_t v270 = v594;
    if (v139 < 0x20000)
    {
      if (v139 < 0x2000)
      {
        if (v139 != 1)
        {
          if (v139 == 2048)
          {
            unint64_t v271 = *(void (**)(char *, uint64_t, uint64_t))(v225 + 16);
            uint64_t v227 = v532;
            uint64_t v228 = v590;
            v271(v532, v587, v590);
            uint64_t v272 = v588;
            uint64_t v273 = *(void *)(v588 - 8);
            int v274 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v273 + 48))(v227, 1, v588);
            uint64_t v275 = v531;
            if (v274 == 1) {
              goto LABEL_292;
            }
            v271(v531, (uint64_t)v227, v228);
            int v276 = swift_getEnumCaseMultiPayload();
            if (v276 != 45)
            {
              if (v276 != 19)
              {
                (*(void (**)(char *, uint64_t))(v273 + 8))(v275, v272);
                goto LABEL_291;
              }
              uint64_t v277 = v583;
              uint64_t v235 = &v275[*(int *)(swift_getTupleTypeMetadata2() + 48)];
              if (swift_getEnumCaseMultiPayload() == 1)
              {
                (*(void (**)(char *, uint64_t))(v581 + 8))(v235, v277);
                goto LABEL_291;
              }
              uint64_t v487 = *v275;
              if (qword_10097BDB8[(char)sub_1007B24CC()] == qword_10097BDB8[v487])
              {
                uint64_t v488 = v578;
                uint64_t v489 = v510;
                uint64_t v490 = v580;
                (*(void (**)(char *, char *, uint64_t))(v578 + 32))(v510, v235, v580);
                char v491 = sub_10096BBE0();
                (*(void (**)(char *, uint64_t))(v488 + 8))(v489, v490);
                uint64_t v228 = v590;
                if (v491) {
                  goto LABEL_225;
                }
                goto LABEL_292;
              }
LABEL_290:
              (*(void (**)(char *, uint64_t))(v578 + 8))(v235, v580);
              goto LABEL_291;
            }
LABEL_225:
            (*(void (**)(char *, uint64_t))(v225 + 8))(v227, v228);
            goto LABEL_226;
          }
          goto LABEL_199;
        }
LABEL_189:
        uint64_t v389 = v540;
        uint64_t v390 = v590;
        (*(void (**)(char *, uint64_t, uint64_t))(v225 + 16))(v540, v587, v590);
        uint64_t v391 = v588;
        uint64_t v392 = *(void *)(v588 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v392 + 48))(v389, 1, v588) != 1)
        {
          char v147 = swift_getEnumCaseMultiPayload() == 42;
          (*(void (**)(char *, uint64_t))(v392 + 8))(v389, v391);
          return v147 & 1;
        }
        (*(void (**)(char *, uint64_t))(v225 + 8))(v389, v390);
        return 0;
      }
      if (v139 == 0x2000)
      {
LABEL_178:
        if (((*(uint64_t (**)(void))(*v270 + 152))() & 0x80) != 0)
        {
          uint64_t v373 = *(void (**)(char *, uint64_t, uint64_t))(v225 + 16);
          int v374 = v528;
          uint64_t v375 = v590;
          v373(v528, v587, v590);
          uint64_t v376 = v588;
          uint64_t v377 = *(void *)(v588 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v377 + 48))(v374, 1, v588) == 1
            || (uint64_t v378 = v518,
                v373(v518, (uint64_t)v374, v375),
                int v379 = swift_getEnumCaseMultiPayload(),
                (*(void (**)(char *, uint64_t))(v377 + 8))(v378, v376),
                v379 != 27))
          {
            (*(void (**)(char *, uint64_t))(v225 + 8))(v374, v375);
            return 0;
          }
          (*(void (**)(char *, uint64_t))(v225 + 8))(v374, v375);
        }
        goto LABEL_226;
      }
LABEL_175:
      if (v139 == 0x10000)
      {
        unsigned int v370 = *(uint64_t (**)(uint64_t))(**(void **)(v270[4] + 16) + 784);
        uint64_t v371 = swift_retain();
        char v372 = v370(v371);
        swift_release();
        char v147 = v372 ^ 1;
        return v147 & 1;
      }
      goto LABEL_199;
    }
  }
  else
  {
    uint64_t v270 = v594;
    if (v139 < 0x20000)
    {
      if (v139 == 1) {
        goto LABEL_189;
      }
      if (v139 == 0x2000) {
        goto LABEL_178;
      }
      goto LABEL_175;
    }
  }
  if (v139 >= 0x200000)
  {
    if (v139 != 0x200000)
    {
      if (v139 == 0x400000)
      {
        char v147 = (*(uint64_t (**)(void))(*v270 + 256))() ^ 1;
        return v147 & 1;
      }
      goto LABEL_199;
    }
    if (v163[17] != 0x8000) {
      goto LABEL_226;
    }
    uint64_t v598 = v165;
    uint64_t v599 = v193;
    uint64_t v393 = v553;
    uint64_t v394 = v193;
    uint64_t v395 = (ValueMetadata *)v589;
    unint64_t v600 = v553;
    unint64_t v601 = (ValueMetadata *)v589;
    type metadata accessor for ItemJob();
    if (!swift_dynamicCastClass()) {
      goto LABEL_67;
    }
    uint64_t v598 = v165;
    uint64_t v599 = v394;
    unint64_t v600 = v393;
    unint64_t v601 = v395;
    type metadata accessor for Ingestion.FetchItemMetadata();
    if (!swift_dynamicCastClass())
    {
      uint64_t v598 = v165;
      uint64_t v599 = v394;
      unint64_t v600 = v393;
      unint64_t v601 = v395;
      type metadata accessor for Ingestion.FetchChildrenMetadata();
      if (!swift_dynamicCastClass())
      {
        uint64_t v598 = v165;
        uint64_t v599 = v394;
        unint64_t v600 = v393;
        unint64_t v601 = v395;
        type metadata accessor for Ingestion.ReSnapshotChildren();
        if (!swift_dynamicCastClass()) {
          goto LABEL_67;
        }
      }
    }
    uint64_t v396 = qword_100ACC1B0;
    swift_retain();
    if (v396 != -1) {
      swift_once();
    }
    char v363 = sub_10070C45C((uint64_t)sub_10009F3F4, 0);
    swift_release();
LABEL_168:
    char v147 = v363 & 1;
    return v147 & 1;
  }
  if (v139 == 0x20000)
  {
    uint64_t v385 = v541;
    uint64_t v386 = v590;
    (*(void (**)(char *, uint64_t, uint64_t))(v225 + 16))(v541, v587, v590);
    uint64_t v387 = v588;
    uint64_t v388 = *(void *)(v588 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v388 + 48))(v385, 1, v588) != 1)
    {
      if (swift_getEnumCaseMultiPayload() == 23) {
        goto LABEL_67;
      }
      (*(void (**)(char *, uint64_t))(v388 + 8))(v385, v387);
      return 0;
    }
    (*(void (**)(char *, uint64_t))(v225 + 8))(v385, v386);
    return 0;
  }
  if (v139 == 0x80000)
  {
    char v147 = ((*(uint64_t (**)(void))(*v270 + 160))() & 1) == 0;
    return v147 & 1;
  }
LABEL_199:
  uint64_t v598 = v165;
  uint64_t v599 = v193;
  unsigned int v397 = (ValueMetadata *)v589;
  unint64_t v600 = v553;
  unint64_t v601 = (ValueMetadata *)v589;
  type metadata accessor for Maintenance.RefreshInheritedContentPolicy();
  uint64_t v398 = swift_dynamicCastClass();
  if (v398)
  {
    if (v139 != 0x2000000)
    {
      if (v139 != 0x1000000)
      {
        if (v139 == 0x800000)
        {
          uint64_t v399 = v398;
          uint64_t v400 = v517;
          uint64_t v401 = v590;
          (*(void (**)(char *, uint64_t, uint64_t))(v225 + 16))(v517, v587, v590);
          uint64_t v402 = v588;
          uint64_t v403 = *(void *)(v588 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v403 + 48))(v400, 1, v588) == 1)
          {
            (*(void (**)(char *, uint64_t))(v225 + 8))(v400, v401);
          }
          else
          {
            if (swift_getEnumCaseMultiPayload() != 37)
            {
              (*(void (**)(char *, uint64_t))(v403 + 8))(v400, v402);
              return 0;
            }
            uint64_t v474 = v583;
            uint64_t v475 = v400[*(int *)(swift_getTupleTypeMetadata2() + 48)];
            uint64_t v476 = v581;
            uint64_t v477 = (uint64_t)v513;
            (*(void (**)(char *, char *, uint64_t))(v581 + 32))(v513, v400, v474);
            if (qword_10097BDB8[(char)sub_1007B24CC()] != qword_10097BDB8[v475])
            {
              (*(void (**)(uint64_t, uint64_t))(v476 + 8))(v477, v474);
              return 0;
            }
            uint64_t v478 = v399 + *(void *)(*(void *)v399 + 576);
            uint64_t v479 = (uint64_t)v511;
            uint64_t v480 = v580;
            (*(void (**)(char *, uint64_t, uint64_t))(v578 + 16))(v511, v478, v580);
            swift_storeEnumTagMultiPayload();
            LOBYTE(v480) = sub_1005EC104(v479, v477, v480, v564);
            long long v481 = *(void (**)(uint64_t, uint64_t))(v476 + 8);
            v481(v479, v474);
            v481(v477, v474);
            if (v480) {
              goto LABEL_226;
            }
          }
          return 0;
        }
LABEL_316:
        uint64_t v598 = 0;
        uint64_t v599 = 0xE000000000000000;
        sub_10096CBD0(38);
        v603._object = (void *)0x8000000100998020;
        v603._uint64_t countAndFlagsBits = 0xD000000000000024;
        sub_10096BDC0(v603);
        BOOL v602 = v163;
        swift_getWitnessTable();
        sub_10096D270();
        int v507 = 0;
        uint64_t v506 = 680;
        sub_10096CE20();
        __break(1u);
        JUMPOUT(0x1001F12F0);
      }
LABEL_270:
      if (qword_100ACC070 != -1) {
        swift_once();
      }
      char v147 = sub_10070C45C((uint64_t)sub_10009F3F4, 0) & 1;
      return v147 & 1;
    }
  }
  else if (v139 != 0x2000000)
  {
    if (v139 != 0x1000000) {
      goto LABEL_316;
    }
    goto LABEL_270;
  }
  uint64_t v455 = v270[3];
  uint64_t v456 = v524;
  sub_10085378C();
  uint64_t v598 = v165;
  uint64_t v599 = v593;
  unint64_t v600 = v553;
  unint64_t v601 = v397;
  uint64_t v457 = type metadata accessor for Ingestion.DeferredRescan();
  uint64_t v458 = v596;
  char v459 = (*(uint64_t (**)(char *, uint64_t, void))(*(void *)v455 + 288))(v456, v457, 0);
  if (!v458)
  {
    char v145 = v459;
    (*(void (**)(char *, uint64_t))(v578 + 8))(v456, v580);
    goto LABEL_4;
  }
  return (*(uint64_t (**)(char *, uint64_t))(v578 + 8))(v456, v580);
}

uint64_t sub_1001F1398(uint64_t a1, uint64_t a2, uint64_t a3, void **a4)
{
  if (*(unsigned char *)(a1 + 112)) {
    sub_1007144CC((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderExtensions/fssync/libfssync/interfaces/persistence/JobRegistry.swift", 118, 2, 691);
  }
  uint64_t v5 = v4;
  uint64_t v9 = *(void *)(a1 + 96);
  unint64_t v10 = v9 & a3;
  uint64_t v25 = *(void *)(a1 + 104);
  swift_retain();
  if (v10)
  {
    uint64_t v11 = v9;
    while (1)
    {
      unint64_t v12 = __clz(__rbit64(v10));
      uint64_t v13 = v10 & ~(1 << v12);
      if (((1 << v12) & v10) == 0) {
        uint64_t v13 = v10;
      }
      if (v12 >= 0x40) {
        uint64_t v14 = 0;
      }
      else {
        uint64_t v14 = 1 << v12;
      }
      if (v12 < 0x40) {
        unint64_t v10 = v13;
      }
      char v15 = sub_1001EC194(v14, (void *)a1, a2, a4);
      if (v5) {
        return sub_1000D31F8(v9, v25, 0);
      }
      if (v15)
      {
        uint64_t v16 = -1;
        if ((v14 & v11) != 0) {
          uint64_t v16 = ~v14;
        }
        uint64_t v17 = v16 & v11;
        uint64_t v18 = *(void *)(a1 + 104);
        uint64_t v26 = *(void *)(a1 + 96);
        *(void *)(a1 + 96) = v17;
        *(void *)(a1 + 104) = v25;
        uint64_t v19 = v17;
        uint64_t v20 = a2;
        uint64_t v21 = a4;
        char v22 = *(unsigned char *)(a1 + 112);
        *(unsigned char *)(a1 + 112) = 0;
        sub_10009C5FC(v9, v25, 0);
        char v23 = v22;
        a4 = v21;
        a2 = v20;
        uint64_t v11 = v19;
        sub_1000D31F8(v26, v18, v23);
      }
      if (!v10) {
        goto LABEL_18;
      }
    }
  }
  else
  {
    uint64_t v11 = v9;
LABEL_18:
    if (v11) {
      return v11;
    }
    else {
      return v25;
    }
  }
}

uint64_t sub_1001F1504(uint64_t a1, void **a2)
{
  uint64_t v46 = a1;
  uint64_t v4 = (*a2)[10];
  uint64_t v5 = (*a2)[13];
  uint64_t v6 = (*a2)[12];
  uint64_t v47 = (*a2)[11];
  uint64_t v3 = v47;
  uint64_t v48 = v4;
  uint64_t v49 = v5;
  uint64_t v50 = v6;
  uint64_t v41 = type metadata accessor for PersistenceTrigger();
  uint64_t v7 = sub_10096C890();
  uint64_t v42 = *(void *)(v7 - 8);
  uint64_t v43 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v37 - v8;
  uint64_t v47 = v4;
  uint64_t v48 = v3;
  uint64_t v49 = v6;
  uint64_t v50 = v5;
  uint64_t v10 = type metadata accessor for PersistenceTrigger();
  uint64_t v11 = sub_10096C890();
  uint64_t v44 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v37 - v12;
  uint64_t result = sub_100615748(v46);
  if (!v15)
  {
    uint64_t v38 = v13;
    uint64_t v39 = v11;
    uint64_t v40 = v6;
    uint64_t v16 = v46;
    uint64_t v51 = v46;
    if (v46 < 0)
    {
      uint64_t v24 = v46 & 0x7FFFFFFFFFFFFFFFLL;
      uint64_t v47 = v3;
      uint64_t v48 = v4;
      uint64_t v49 = v5;
      uint64_t v50 = v40;
      type metadata accessor for JobRegistry();
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v9, 1, 1);
      uint64_t v25 = qword_100ACC190;
      swift_retain_n();
      uint64_t v26 = a2;
      if (v25 != -1) {
        swift_once();
      }
      uint64_t v27 = qword_100B0B5C0;
      uint64_t v28 = (void **)((uint64_t (*)(void))(*v26)[22])();
      uint64_t v29 = v45;
      uint64_t v30 = sub_1001F1398(v24, (uint64_t)v9, v27, v28);
      uint64_t v33 = v9;
      if (v29)
      {
        swift_release();
        swift_release();
        (*(void (**)(char *, uint64_t))(v42 + 8))(v9, v43);
        return swift_release();
      }
      uint64_t v23 = v31;
      char v35 = v32;
      uint64_t v36 = *(void (**)(char *, uint64_t))(v42 + 8);
      uint64_t v46 = v30;
      v36(v33, v43);
      swift_release();
      swift_release();
      uint64_t v34 = v46;
    }
    else
    {
      uint64_t v47 = v4;
      uint64_t v48 = v3;
      uint64_t v49 = v40;
      uint64_t v50 = v5;
      type metadata accessor for JobRegistry();
      uint64_t v17 = (uint64_t)v38;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v38, 1, 1, v10);
      uint64_t v18 = qword_100ACC190;
      swift_retain();
      if (v18 != -1) {
        swift_once();
      }
      uint64_t v19 = v45;
      uint64_t v20 = sub_1001F1398(v16, v17, qword_100B0B5C0, a2);
      uint64_t v23 = v22;
      if (v19)
      {
        (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v17, v39);
        return swift_release();
      }
      uint64_t v34 = v20;
      char v35 = v21;
      (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v17, v39);
    }
    uint64_t v47 = v4;
    uint64_t v48 = v3;
    uint64_t v49 = v40;
    uint64_t v50 = v5;
    type metadata accessor for FSOrFPJob();
    sub_1006152F0(v34, v23, v35);
    return swift_release();
  }
  return result;
}

BOOL static PackageInternalLookupPolicy.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void PackageInternalLookupPolicy.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int PackageInternalLookupPolicy.hashValue.getter(unsigned __int8 a1)
{
  return sub_10096D500();
}

uint64_t FileItemID.parseableString.getter()
{
  sub_10096AAD0();
  swift_allocObject();
  sub_10096AAC0();
  sub_10096AAA0();
  uint64_t v0 = sub_10096AAB0();
  unint64_t v2 = v1;
  uint64_t v3 = sub_10096AF30(0);
  sub_10001E9C0(v0, v2);
  swift_release();
  return v3;
}

uint64_t sub_1001F1B24()
{
  sub_10096CBD0(16);
  v1._uint64_t countAndFlagsBits = 0x6520746F6E6E6163;
  v1._object = (void *)0xEE002065646F636ELL;
  sub_10096BDC0(v1);
  sub_10096D270();
  v2._uint64_t countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  sub_10096BDC0(v2);
  return 0;
}

uint64_t sub_1001F1BC8()
{
  return sub_1001F1B24();
}

uint64_t FileItemID.init(parsing:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a2 - 8);
  __chkstk_darwin(a1);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10096AEB0();
  unint64_t v10 = v9;
  swift_bridgeObjectRelease();
  if (v10 >> 60 == 15)
  {
    uint64_t v11 = 1;
  }
  else
  {
    sub_10096AA90();
    swift_allocObject();
    sub_10096AA80();
    sub_10096AA70();
    swift_release();
    sub_10001E9AC(v8, v10);
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(a3, v7, a2);
    uint64_t v11 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(a3, v11, 1, a2);
}

uint64_t FileItemID.kind.getter(uint64_t a1, uint64_t a2)
{
  if ((*(uint64_t (**)(void))(a2 + 64))()) {
    return 0;
  }
  if ((*(uint64_t (**)(uint64_t, uint64_t))(a2 + 72))(a1, a2)) {
    return 1;
  }
  return 2;
}

uint64_t FileItemID.isRoot.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 - 8);
  uint64_t v3 = __chkstk_darwin(a1);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(v6 + 48))(v3);
  char v7 = sub_10096BBE0();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, a1);
  return v7 & 1;
}

uint64_t FileItemID.isTrash.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 - 8);
  uint64_t v3 = __chkstk_darwin(a1);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(v6 + 56))(v3);
  char v7 = sub_10096BBE0();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, a1);
  return v7 & 1;
}

uint64_t FileItemID.telemetryCommonFolder.getter(uint64_t a1, uint64_t a2)
{
  if ((*(uint64_t (**)(void))(a2 + 64))()) {
    return 1953460082;
  }
  if ((*(uint64_t (**)(uint64_t, uint64_t))(a2 + 72))(a1, a2)) {
    return 0x6873617274;
  }
  return 0;
}

unint64_t sub_1001F2058()
{
  unint64_t result = qword_100ACE790[0];
  if (!qword_100ACE790[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100ACE790);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for FileItemIDKind(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001F2178);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FileItemIDKind()
{
  return &type metadata for FileItemIDKind;
}

uint64_t sub_1001F21B0()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1001F2244(uint64_t a1)
{
  swift_getObjectType();
  sub_1001F2768(a1, (uint64_t)v5);
  if (!v6)
  {
    sub_10017D1A4((uint64_t)v5);
    goto LABEL_5;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_5:
    char v2 = 0;
    return v2 & 1;
  }
  char v2 = sub_10096BBE0();

  return v2 & 1;
}

uint64_t sub_1001F2368(void *a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    id v4 = a1;
    swift_unknownObjectRetain();
    sub_10096C9D0();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v8, 0, sizeof(v8));
    id v5 = a1;
  }
  char v6 = sub_1001F2244((uint64_t)v8);

  sub_10017D1A4((uint64_t)v8);
  return v6 & 1;
}

uint64_t sub_1001F23E0(void *a1)
{
  id v1 = a1;
  uint64_t v2 = sub_1001F2414();

  return v2;
}

uint64_t sub_1001F2414()
{
  return sub_10096BAE0();
}

void sub_1001F2490()
{
}

uint64_t sub_1001F24D4(char *a1)
{
  return (*(uint64_t (**)(char *))(*(void *)(*(void *)((swift_isaMask & *(void *)a1) + 0x50) - 8)
                                           + 8))(&a1[*(void *)((swift_isaMask & *(void *)a1) + 0x60)]);
}

uint64_t type metadata accessor for FileItemIDObject()
{
  return sub_10014D080();
}

uint64_t sub_1001F2554(uint64_t a1, uint64_t a2)
{
  return sub_1001F259C(a1, a2, &qword_100ACC110);
}

uint64_t sub_1001F2578(uint64_t a1, uint64_t a2)
{
  return sub_1001F259C(a1, a2, &qword_100ACC118);
}

uint64_t sub_1001F259C(uint64_t a1, uint64_t a2, void *a3)
{
  if (*a3 != -1) {
    swift_once();
  }
  uint64_t v3 = _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
  uint64_t v5 = v4;
  if (v3 == _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0() && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = sub_10096D2D0();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

id sub_1001F2648(uint64_t a1)
{
  ObjectType = (objc_class *)swift_getObjectType();
  (*(void (**)(char *, uint64_t))(*(void *)(*(void *)((swift_isaMask & *(void *)v1) + 0x50) - 8)
                                          + 16))(&v1[*(void *)((swift_isaMask & *(void *)v1) + 0x60)], a1);
  v5.receiver = v1;
  v5.super_class = ObjectType;
  return objc_msgSendSuper2(&v5, "init");
}

id sub_1001F2704(uint64_t a1)
{
  id v3 = objc_allocWithZone(v1);
  return sub_1001F2648(a1);
}

void sub_1001F2738()
{
}

uint64_t sub_1001F2768(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002B7CC((uint64_t *)&unk_100ACE0F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1001F27D0()
{
  uint64_t v0 = sub_10096AE50();
  __chkstk_darwin(v0);
  uint64_t v1 = sub_10096B480();
  __chkstk_darwin(v1);
  uint64_t v2 = sub_10096AE10();
  unsigned int v6 = 0;
  __int16 v7 = 256;
  unint64_t result = sub_10084B7DC(4294967294, v2, v3, 0, 0, 0, (uint64_t)&v6, (uint64_t)sub_1001F2C44, 0);
  if ((v7 & 0x100) != 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = v6;
    LOBYTE(v6) = v7 & 1;
    return v5 | ((unint64_t)(v7 & 1) << 32);
  }
  return result;
}

uint64_t sub_1001F2C44@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = fpfs_track_document();
  *(_DWORD *)a1 = 0;
  *(unsigned char *)(a1 + 4) = 0;
  return result;
}

id *sub_1001F2CB8(char *a1)
{
  uint64_t v2 = (id *)v1;
  uint64_t v148 = sub_10096AE50();
  uint64_t v4 = *(void *)(v148 - 8);
  uint64_t v5 = __chkstk_darwin(v148);
  uint64_t v136 = (char *)&v132 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v137 = (char *)&v132 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v141 = (char *)&v132 - v10;
  __chkstk_darwin(v9);
  uint64_t v139 = (char *)&v132 - v11;
  uint64_t v12 = sub_10096B480();
  uint64_t v144 = *(void *)(v12 - 8);
  uint64_t v145 = v12;
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v135 = (char *)&v132 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v13);
  os_log_t v138 = (os_log_t)((char *)&v132 - v16);
  uint64_t v17 = __chkstk_darwin(v15);
  long long v142 = (char *)&v132 - v18;
  __chkstk_darwin(v17);
  uint64_t v140 = (id *)((char *)&v132 - v19);
  *((void *)v1 + 2) = 1;
  *((void *)v1 + 3) = [objc_allocWithZone((Class)PQLConnection) init];
  *((void *)v1 + 4) = 0x6D5F70756B636162;
  *((void *)v1 + 5) = 0xEF74736566696E61;
  sub_10002B7CC(&qword_100ACF740);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10097C0C0;
  *(void *)(inited + 32) = NSURLCanonicalPathKey;
  char v21 = (void *)_kCFURLInodeNumberKey;
  if (!_kCFURLInodeNumberKey) {
    goto LABEL_37;
  }
  uint64_t v22 = inited;
  uint64_t v23 = OBJC_IVAR____TtC9libfssync17SQLBackupManifest_resourceValuesToFetch;
  *(void *)(inited + 40) = _kCFURLInodeNumberKey;
  *(void *)(inited + 48) = NSURLDocumentIdentifierKey;
  uint64_t v24 = NSURLCanonicalPathKey;
  id v25 = v21;
  uint64_t v26 = NSURLDocumentIdentifierKey;
  *(void *)(v22 + 56) = sub_10096BC00();
  uint64_t v27 = sub_1001FA508(v22);
  swift_setDeallocating();
  type metadata accessor for URLResourceKey(0);
  swift_arrayDestroy();
  *(void *)&v1[v23] = v27;
  uint64_t v147 = v4;
  uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v28(&v1[OBJC_IVAR____TtC9libfssync17SQLBackupManifest_url], (uint64_t)a1, v148);
  uint64_t v29 = (void *)*((void *)v1 + 3);
  sub_10096AD20(v30);
  char v32 = v31;
  aBlock[0] = 0;
  LODWORD(v29) = [v29 openAtURL:v31 withFlags:3145734 error:aBlock];

  uint64_t v33 = v2;
  if (!v29)
  {
    id v40 = aBlock[0];
    swift_release();
    sub_10096ABF0();
    uint64_t v140 = v2;

    swift_willThrow();
    id v41 = (id)fpfs_current_or_default_log();
    uint64_t v42 = v142;
    sub_10096B490();
    uint64_t v43 = v141;
    v28(v141, (uint64_t)a1, v148);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v44 = sub_10096B470();
    os_log_type_t v45 = sub_10096C5B0();
    uint64_t v46 = a1;
    if (os_log_type_enabled(v44, v45))
    {
      uint64_t v47 = swift_slowAlloc();
      long long v146 = a1;
      uint64_t v48 = v47;
      uint64_t v139 = (char *)swift_slowAlloc();
      uint64_t v143 = (void *)swift_slowAlloc();
      aBlock[0] = v143;
      *(_DWORD *)uint64_t v48 = 136315394;
      sub_10096AD20((NSURL *)&unk_100975000);
      uint64_t v50 = v49;
      id v51 = objc_msgSend(v49, "fp_shortDescription");
      os_log_t v138 = v44;
      id v52 = v51;

      uint64_t v53 = _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
      unint64_t v55 = v54;

      uint64_t v153 = (char *)sub_100719D44(v53, v55, (uint64_t *)aBlock);
      sub_10096C8C0();
      swift_bridgeObjectRelease();
      uint64_t v56 = *(void (**)(char *, uint64_t))(v147 + 8);
      v56(v43, v148);
      *(_WORD *)(v48 + 12) = 2112;
      swift_getErrorValue();
      uint64_t v57 = (char *)Error.prettyDescription.getter(v152);
      uint64_t v153 = v57;
      uint64_t v33 = v140;
      sub_10096C8C0();
      *(void *)uint64_t v139 = v57;
      swift_errorRelease();
      swift_errorRelease();
      os_log_t v58 = v138;
      _os_log_impl((void *)&_mh_execute_header, v138, v45, "Failed to open database %s: %@", (uint8_t *)v48, 0x16u);
      sub_10002B7CC((uint64_t *)&unk_100ACCBC0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v46 = v146;
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v144 + 8))(v142, v145);
      uint64_t v59 = v148;
    }
    else
    {
      uint64_t v59 = v148;
      uint64_t v56 = *(void (**)(char *, uint64_t))(v147 + 8);
      v56(v43, v148);
      swift_errorRelease();
      swift_errorRelease();

      (*(void (**)(char *, uint64_t))(v144 + 8))(v42, v145);
      uint64_t v33 = v140;
    }
    swift_willThrow();
    goto LABEL_29;
  }
  long long v146 = a1;
  id v34 = v2[3];
  id v35 = aBlock[0];
  if ([v34 setupPragmas])
  {
    id v36 = [v34 userVersion];
    id v37 = [v36 integerValue];

    uint64_t v38 = v146;
    if ((uint64_t)v37 > 0)
    {
      uint64_t v39 = 0;
LABEL_15:
      [v33[3] useBatchingWithDelay:1000 changeCount:0.5];
      (*(void (**)(char *, uint64_t))(v147 + 8))(v38, v148);
      sub_1000705CC((uint64_t)v39);
      return v33;
    }
    uint64_t v65 = v28;
    id v66 = v33[3];
    uint64_t v67 = (void *)swift_allocObject();
    v67[2] = sub_1001FA5C4;
    v67[3] = v33;
    aBlock[4] = sub_1001FB2E8;
    aBlock[5] = v67;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = (id)1107296256;
    aBlock[2] = sub_10017090C;
    aBlock[3] = &unk_100A73DA0;
    uint64_t v68 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    aBlock[0] = 0;
    unsigned int v69 = [v66 executeSwift:v68 error:aBlock];
    _Block_release(v68);
    id v70 = aBlock[0];
    LOBYTE(v68) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v68 & 1) == 0)
    {
      uint64_t v71 = v136;
      if (v69)
      {
        [v33[3] setUserVersion:1];
        uint64_t v39 = sub_1001FA5C4;
        uint64_t v38 = v146;
        goto LABEL_15;
      }
      swift_release();
      uint64_t v115 = sub_10096ABF0();

      swift_willThrow();
      id v116 = (id)fpfs_current_or_default_log();
      uint64_t v117 = v135;
      sub_10096B490();
      uint64_t v118 = v148;
      v65(v71, (uint64_t)v146, v148);
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v119 = v71;
      uint64_t v120 = sub_10096B470();
      os_log_type_t v121 = sub_10096C5B0();
      if (os_log_type_enabled(v120, v121))
      {
        uint64_t v122 = swift_slowAlloc();
        uint64_t v143 = (void *)v115;
        uint64_t v123 = v122;
        uint64_t v139 = (char *)swift_slowAlloc();
        long long v142 = (char *)swift_slowAlloc();
        aBlock[0] = v142;
        *(_DWORD *)uint64_t v123 = 136315394;
        uint64_t v140 = v33;
        os_log_t v138 = v120;
        sub_10096AD20((NSURL *)&unk_100975000);
        uint64_t v125 = v124;
        id v126 = objc_msgSend(v124, "fp_shortDescription");

        uint64_t v127 = _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
        unint64_t v129 = v128;

        uint64_t v153 = (char *)sub_100719D44(v127, v129, (uint64_t *)aBlock);
        sub_10096C8C0();
        swift_bridgeObjectRelease();
        uint64_t v141 = *(char **)(v147 + 8);
        ((void (*)(char *, uint64_t))v141)(v119, v118);
        *(_WORD *)(v123 + 12) = 2112;
        swift_getErrorValue();
        uint64_t v130 = (char *)Error.prettyDescription.getter(v149);
        uint64_t v153 = v130;
        uint64_t v33 = v140;
        sub_10096C8C0();
        *(void *)uint64_t v139 = v130;
        swift_errorRelease();
        swift_errorRelease();
        os_log_t v131 = v138;
        _os_log_impl((void *)&_mh_execute_header, v138, v121, "Failed to create table %s: %@", (uint8_t *)v123, 0x16u);
        sub_10002B7CC((uint64_t *)&unk_100ACCBC0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v144 + 8))(v135, v145);
      }
      else
      {
        uint64_t v141 = *(char **)(v147 + 8);
        ((void (*)(char *, uint64_t))v141)(v119, v118);
        swift_errorRelease();
        swift_errorRelease();

        (*(void (**)(char *, uint64_t))(v144 + 8))(v117, v145);
      }
      swift_willThrow();
      uint64_t v114 = sub_1001FA5C4;
      ((void (*)(char *, uint64_t))v141)(v146, v118);
LABEL_30:
      sub_1000705CC((uint64_t)v114);
      return v33;
    }
    __break(1u);
LABEL_37:
    __break(1u);
  }
  uint64_t v60 = (char *)[v34 lastError];
  if (v60)
  {
    swift_getErrorValue();
    uint64_t v61 = v150;
    uint64_t v62 = v28;
    uint64_t v63 = v60;
    uint64_t v64 = Error.prettyDescription.getter(v61);

    uint64_t v28 = v62;
    uint64_t v33 = v2;
    uint64_t v143 = v60;
  }
  else
  {
    sub_100011348(0, &qword_100ACEC70);
    uint64_t v64 = (void *)sub_10096C860();
    uint64_t v143 = 0;
  }
  uint64_t v136 = v60;
  id v72 = (id)fpfs_current_or_default_log();
  uint64_t v73 = v140;
  sub_10096B490();
  uint64_t v74 = v139;
  uint64_t v59 = v148;
  uint64_t v135 = (char *)v28;
  v28(v139, (uint64_t)v146, v148);
  long long v142 = v64;
  uint64_t v75 = sub_10096B470();
  os_log_type_t v76 = sub_10096C5B0();
  int v77 = v76;
  if (os_log_type_enabled(v75, v76))
  {
    uint64_t v78 = swift_slowAlloc();
    os_log_t v133 = (os_log_t)swift_slowAlloc();
    uint64_t v134 = (void *)swift_slowAlloc();
    aBlock[0] = v134;
    *(_DWORD *)uint64_t v78 = 136315394;
    uint64_t v141 = (char *)(v78 + 4);
    os_log_t v132 = v75;
    sub_10096AD20((NSURL *)(v78 + 4));
    uint64_t v80 = v79;
    id v81 = objc_msgSend(v79, "fp_shortDescription");

    uint64_t v82 = _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
    unint64_t v84 = v83;

    uint64_t v153 = (char *)sub_100719D44(v82, v84, (uint64_t *)aBlock);
    sub_10096C8C0();
    swift_bridgeObjectRelease();
    uint64_t v141 = *(char **)(v147 + 8);
    ((void (*)(char *, uint64_t))v141)(v74, v148);
    *(_WORD *)(v78 + 12) = 2112;
    uint64_t v85 = (objc_class *)v142;
    LODWORD(v139) = v77;
    uint64_t v153 = v142;
    uint64_t v86 = v142;
    sub_10096C8C0();
    v133->Class isa = v85;

    uint64_t v59 = v148;
    os_log_t v87 = v132;
    _os_log_impl((void *)&_mh_execute_header, v132, (os_log_type_t)v139, "Failed to set up pragmas %s: %@", (uint8_t *)v78, 0x16u);
    sub_10002B7CC((uint64_t *)&unk_100ACCBC0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v56 = (void (*)(char *, uint64_t))v141;
    swift_slowDealloc();

    uint64_t v88 = *(void (**)(id *, uint64_t))(v144 + 8);
    v88(v140, v145);
  }
  else
  {
    uint64_t v56 = *(void (**)(char *, uint64_t))(v147 + 8);
    v56(v74, v59);

    uint64_t v89 = v142;
    uint64_t v88 = *(void (**)(id *, uint64_t))(v144 + 8);
    v88(v73, v145);
  }
  id v90 = v33[3];
  aBlock[0] = 0;
  unsigned int v91 = [v90 close:aBlock];
  swift_release();
  uint64_t v92 = v143;
  if (v91)
  {
    id v93 = aBlock[0];
    uint64_t v46 = v146;
    if (v92)
    {
LABEL_28:
      uint64_t v113 = v136;
      swift_willThrow();

LABEL_29:
      uint64_t v114 = 0;
      v56(v46, v59);
      goto LABEL_30;
    }
  }
  else
  {
    uint64_t v139 = (char *)v88;
    uint64_t v140 = v33;
    uint64_t v141 = (char *)v56;
    id v94 = aBlock[0];
    sub_10096ABF0();

    swift_willThrow();
    id v95 = (id)fpfs_current_or_default_log();
    os_log_t v96 = v138;
    sub_10096B490();
    uint64_t v97 = v137;
    ((void (*)(char *, char *, uint64_t))v135)(v137, v146, v59);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v98 = sub_10096B470();
    os_log_type_t v99 = sub_10096C5B0();
    if (os_log_type_enabled(v98, v99))
    {
      uint64_t v100 = swift_slowAlloc();
      uint64_t v134 = (void *)swift_slowAlloc();
      uint64_t v135 = (char *)swift_slowAlloc();
      aBlock[0] = v135;
      *(_DWORD *)uint64_t v100 = 136315394;
      os_log_t v133 = v98;
      sub_10096AD20((NSURL *)&unk_100975000);
      uint64_t v102 = v101;
      id v103 = objc_msgSend(v101, "fp_shortDescription");

      uint64_t v104 = _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
      unint64_t v106 = v105;

      uint64_t v153 = (char *)sub_100719D44(v104, v106, (uint64_t *)aBlock);
      sub_10096C8C0();
      uint64_t v59 = v148;
      swift_bridgeObjectRelease();
      uint64_t v107 = v97;
      uint64_t v56 = (void (*)(char *, uint64_t))v141;
      ((void (*)(char *, uint64_t))v141)(v107, v59);
      *(_WORD *)(v100 + 12) = 2112;
      swift_getErrorValue();
      uint64_t v108 = (char *)Error.prettyDescription.getter(v151);
      uint64_t v153 = v108;
      uint64_t v92 = v143;
      sub_10096C8C0();
      *uint64_t v134 = v108;
      swift_errorRelease();
      swift_errorRelease();
      os_log_t v109 = v133;
      _os_log_impl((void *)&_mh_execute_header, v133, v99, "Failed to close database %s: %@", (uint8_t *)v100, 0x16u);
      sub_10002B7CC((uint64_t *)&unk_100ACCBC0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      os_log_t v110 = v138;
    }
    else
    {
      swift_errorRelease();
      uint64_t v111 = v97;
      uint64_t v56 = (void (*)(char *, uint64_t))v141;
      ((void (*)(char *, uint64_t))v141)(v111, v59);
      swift_errorRelease();
      swift_errorRelease();

      os_log_t v110 = v96;
    }
    ((void (*)(os_log_t, uint64_t))v139)(v110, v145);
    uint64_t v33 = v140;
    uint64_t v46 = v146;
    if (v92) {
      goto LABEL_28;
    }
  }
  uint64_t result = (id *)(id)FPNotPermittedWriteError();
  if (result) {
    goto LABEL_28;
  }
  __break(1u);
  return result;
}