uint64_t sub_1000B126C(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint8_t *v11;
  void *v12;
  id v13;
  void v15[2];

  v2 = sub_10096B480();
  v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (id)fpfs_current_or_default_log();
  sub_10096B490();
  v7 = a1;
  v8 = sub_10096B470();
  v9 = sub_10096C5A0();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = swift_slowAlloc();
    v15[0] = v2;
    v11 = (uint8_t *)v10;
    v12 = (void *)swift_slowAlloc();
    *(_DWORD *)v11 = 138412290;
    v13 = [v7 leave];
    v15[1] = v13;
    sub_10096C8C0();
    *v12 = v13;

    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%@", v11, 0xCu);
    sub_10002B7CC((uint64_t *)&unk_100ACCBC0);
    swift_arrayDestroy();
    swift_slowDealloc();
    v2 = v15[0];
    swift_slowDealloc();
  }
  else
  {

    v8 = v7;
  }

  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

void sub_1000B1470(Swift::UInt64 a1, int a2, unint64_t a3, unint64_t a4, void (*a5)(void), void (*a6)(void))
{
  v100 = a6;
  unint64_t v101 = a3;
  v102 = a5;
  unint64_t v93 = a4;
  int v103 = a2;
  Swift::UInt64 v99 = a1;
  uint64_t v94 = sub_10002B7CC((uint64_t *)&unk_100AD6F70);
  uint64_t v92 = *(void *)(v94 - 8);
  uint64_t v7 = *(void *)(v92 + 64);
  uint64_t v8 = __chkstk_darwin(v94);
  v9 = (unint64_t *)((char *)&v86 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v8);
  v89 = v9;
  uint64_t v10 = sub_10002B7CC((uint64_t *)&unk_100ACD990);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  v13 = (char *)&v86 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v90 = (char *)&v86 - v14;
  uint64_t v15 = sub_10096B760();
  uint64_t v95 = *(void *)(v15 - 8);
  uint64_t v96 = v15;
  uint64_t v16 = __chkstk_darwin(v15);
  v18 = (char *)&v86 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v88 = (char *)&v86 - v19;
  uint64_t v20 = sub_10096B7D0();
  uint64_t v97 = *(void *)(v20 - 8);
  uint64_t v98 = v20;
  uint64_t v21 = __chkstk_darwin(v20);
  v23 = (char *)&v86 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __chkstk_darwin(v21);
  v26 = (char *)&v86 - v25;
  __chkstk_darwin(v24);
  v91 = v9;
  v27 = (unint64_t *)sub_10096B830();
  uint64_t v28 = *(v27 - 1);
  __chkstk_darwin(v27);
  v30 = (uint64_t *)((char *)&v86 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  v31 = *(void **)(v6 + 64);
  void *v30 = v31;
  (*(void (**)(void *, void, unint64_t *))(v28 + 104))(v30, enum case for DispatchPredicate.onQueue(_:), v27);
  id v32 = v31;
  LOBYTE(v31) = sub_10096B860();
  v34 = *(void (**)(void *, unint64_t *))(v28 + 8);
  unint64_t v33 = v28 + 8;
  v34(v30, v27);
  if ((v31 & 1) == 0)
  {
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (*(unsigned char *)(v6 + 184) == 1)
  {
    id v35 = (id)FPDomainUnavailableError();
    v102();

    return;
  }
  unint64_t v36 = v6 + qword_100B0B328;
  swift_beginAccess();
  uint64_t v37 = *(void *)(*(void *)v36 + 16);
  v87 = (unint64_t *)v36;
  if (!v37 || (sub_10031F858(v99, v103), (v38 & 1) == 0))
  {
    sub_10002B7CC((uint64_t *)&unk_100AD6F80);
    unint64_t v42 = (*(unsigned __int8 *)(v92 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v92 + 80);
    uint64_t v43 = swift_allocObject();
    *(_OWORD *)(v43 + 16) = xmmword_100973BB0;
    v91 = (unint64_t *)(v43 + v42);
    uint64_t v92 = v43;
    sub_1000CE628(v101);
    qos_class_self();
    sub_10096B740();
    uint64_t v45 = v95;
    uint64_t v44 = v96;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v95 + 48))(v13, 1, v96) == 1)
    {
      (*(void (**)(char *, void, uint64_t))(v45 + 104))(v18, enum case for DispatchQoS.QoSClass.utility(_:), v44);
      sub_10002B770((uint64_t)v13, (uint64_t *)&unk_100ACD990);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v18, v13, v44);
    }
    sub_10096B7B0();
    unint64_t v46 = v93;
    uint64_t v47 = v94;
    v48 = (char *)v9 + *(int *)(v94 + 64);
    v49 = (void (**)(void))((char *)v9 + *(int *)(v94 + 80));
    unint64_t v50 = v101;
    unint64_t *v9 = v101;
    v9[1] = v46;
    uint64_t v51 = v98;
    v52 = *(void (**)(char *, char *, uint64_t))(v97 + 32);
    v52(v48, v23, v98);
    v53 = v102;
    v54 = v100;
    *v49 = v102;
    v49[1] = v54;
    v55 = v91;
    unint64_t *v91 = v50;
    v55[1] = v46;
    v52((char *)v55 + *(int *)(v47 + 64), v48, v51);
    v56 = (unint64_t *)((char *)v55 + *(int *)(v47 + 80));
    uint64_t v57 = swift_allocObject();
    *(void *)(v57 + 16) = v53;
    *(void *)(v57 + 24) = v54;
    void *v56 = sub_1000D324C;
    v56[1] = v57;
    v58 = v87;
    swift_beginAccess();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v104 = *v58;
    unint64_t *v58 = 0x8000000000000000;
    sub_10038A4C4(v92, v99, v103, isUniquelyReferenced_nonNull_native);
    unint64_t *v58 = v104;
    swift_bridgeObjectRelease();
    goto LABEL_24;
  }
  sub_1000CE628(v101);
  qos_class_self();
  uint64_t v39 = (uint64_t)v90;
  sub_10096B740();
  uint64_t v41 = v95;
  uint64_t v40 = v96;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v95 + 48))(v39, 1, v96) == 1)
  {
    (*(void (**)(char *, void, uint64_t))(v41 + 104))(v88, enum case for DispatchQoS.QoSClass.utility(_:), v40);
    sub_10002B770(v39, (uint64_t *)&unk_100ACD990);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v41 + 32))(v88, v39, v40);
  }
  v60 = v100;
  unint64_t v61 = v93;
  uint64_t v62 = v94;
  v63 = v89;
  sub_10096B7B0();
  v64 = (char *)v63 + *(int *)(v62 + 64);
  v65 = (void (**)(void))((char *)v63 + *(int *)(v62 + 80));
  unint64_t v66 = v101;
  unint64_t *v63 = v101;
  v63[1] = v61;
  v67 = *(void (**)(char *, char *, uint64_t))(v97 + 32);
  v68 = v26;
  uint64_t v69 = v98;
  v67(v64, v68, v98);
  v70 = v102;
  *v65 = v102;
  v65[1] = v60;
  v71 = v91;
  unint64_t *v91 = v66;
  v71[1] = v61;
  v9 = v71;
  v67((char *)v71 + *(int *)(v62 + 64), v64, v69);
  v72 = (unint64_t *)((char *)v9 + *(int *)(v62 + 80));
  uint64_t v73 = swift_allocObject();
  *(void *)(v73 + 16) = v70;
  *(void *)(v73 + 24) = v60;
  void *v72 = sub_1000DEB18;
  v72[1] = v73;
  v27 = v87;
  swift_beginAccess();
  swift_retain();
  char v74 = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v104 = *v27;
  unint64_t v6 = v104;
  unint64_t *v27 = 0x8000000000000000;
  char v75 = v103;
  unint64_t v33 = sub_10031F858(v99, v103);
  uint64_t v77 = *(void *)(v6 + 16);
  BOOL v78 = (v76 & 1) == 0;
  uint64_t v79 = v77 + v78;
  if (__OFADD__(v77, v78)) {
    goto LABEL_26;
  }
  char v80 = v76;
  if (*(void *)(v6 + 24) >= v79)
  {
    if (v74)
    {
      if (v76) {
        goto LABEL_20;
      }
    }
    else
    {
      sub_10091C19C();
      if (v80) {
        goto LABEL_20;
      }
    }
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  sub_100372F88(v79, v74);
  unint64_t v81 = sub_10031F858(v99, v75);
  if ((v80 & 1) == (v82 & 1))
  {
    unint64_t v33 = v81;
    if ((v80 & 1) == 0) {
      goto LABEL_29;
    }
LABEL_20:
    unint64_t v6 = *(void *)(*(void *)(v104 + 56) + 8 * v33);
    if (swift_isUniquelyReferenced_nonNull_native())
    {
LABEL_21:
      unint64_t v84 = *(void *)(v6 + 16);
      unint64_t v83 = *(void *)(v6 + 24);
      if (v84 >= v83 >> 1) {
        unint64_t v6 = sub_1006A28C4(v83 > 1, v84 + 1, 1, v6);
      }
      *(void *)(v6 + 16) = v84 + 1;
      sub_10001AE98((uint64_t)v9, v6+ ((*(unsigned __int8 *)(v92 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v92 + 80))+ *(void *)(v92 + 72) * v84, (uint64_t *)&unk_100AD6F70);
      unint64_t v85 = v104;
      *(void *)(*(void *)(v104 + 56) + 8 * v33) = v6;
      unint64_t *v27 = v85;
LABEL_24:
      swift_endAccess();
      return;
    }
LABEL_27:
    unint64_t v6 = sub_1006A28C4(0, *(void *)(v6 + 16) + 1, 1, v6);
    goto LABEL_21;
  }
LABEL_30:
  sub_10096D3C0();
  __break(1u);
}

uint64_t sub_1000B1D64(uint64_t a1, int a2, int a3, int a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v47 = a7;
  int v46 = a4;
  LODWORD(v9) = a3;
  LODWORD(v10) = a2;
  uint64_t v12 = sub_10096B480();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v16 = (id)fpfs_current_or_default_log();
  sub_10096B490();
  sub_1000CE628(a5);
  sub_1000CE628(a5);
  swift_retain();
  uint64_t v17 = sub_10096B470();
  int v18 = sub_10096C5A0();
  if (os_log_type_enabled(v17, (os_log_type_t)v18))
  {
    uint64_t v39 = v15;
    uint64_t v40 = v13;
    int v38 = v18;
    uint64_t v41 = v12;
    int v42 = v9;
    uint64_t v43 = a6;
    int v44 = v10;
    uint64_t v10 = swift_slowAlloc();
    uint64_t v49 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315394;
    swift_beginAccess();
    uint64_t v19 = *(void **)(a1 + 32);
    uint64_t v20 = *(unsigned __int8 *)(a1 + 40);
    uint64_t v21 = v45;
    if (*(unsigned char *)(a1 + 41))
    {
      id v22 = v19;
      uint64_t v23 = NSFileProviderItemIdentifier.description.getter();
      unint64_t v25 = v24;
      sub_1000D30C4(v19, v20, 1);
    }
    else
    {
      uint64_t v23 = VFSItemID.parseableString.getter(*(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
      unint64_t v25 = v28;
    }
    uint64_t v48 = sub_100719D44(v23, v25, &v49);
    sub_10096C8C0();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 12) = 2080;
    unint64_t v29 = sub_1005255F4(a5);
    unint64_t v9 = v30;
    sub_1000B6C28(a5);
    uint64_t v48 = sub_100719D44(v29, v9, &v49);
    sub_10096C8C0();
    swift_bridgeObjectRelease();
    sub_1000B6C28(a5);
    _os_log_impl((void *)&_mh_execute_header, v17, (os_log_type_t)v38, "looking up VFS item for %s request %s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v40 + 8))(v39, v41);
    uint64_t v26 = v47;
    char v27 = v46;
    LOBYTE(v10) = v44;
    a6 = v43;
    LOBYTE(v9) = v42;
  }
  else
  {
    sub_1000B6C28(a5);
    swift_release();
    sub_1000B6C28(a5);

    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    uint64_t v21 = v45;
    uint64_t v26 = v47;
    char v27 = v46;
  }
  uint64_t v31 = swift_allocObject();
  *(void *)(v31 + 16) = a1;
  *(void *)(v31 + 24) = a5;
  *(void *)(v31 + 32) = a6;
  *(void *)(v31 + 40) = v26;
  *(unsigned char *)(v31 + 48) = v9 & 1;
  *(void *)(v31 + 56) = v21;
  char v32 = v10 & 1;
  *(unsigned char *)(v31 + 64) = v10 & 1;
  char v33 = v27 & 1;
  *(unsigned char *)(v31 + 65) = v33;
  uint64_t v34 = swift_allocObject();
  *(void *)(v34 + 16) = a1;
  *(void *)(v34 + 24) = v21;
  *(unsigned char *)(v34 + 32) = v33;
  *(unsigned char *)(v34 + 33) = v32;
  *(void *)(v34 + 40) = sub_1000D5854;
  *(void *)(v34 + 48) = v31;
  *(void *)(v34 + 56) = a5;
  uint64_t v35 = swift_allocObject();
  *(void *)(v35 + 16) = sub_1000D5854;
  *(void *)(v35 + 24) = v31;
  sub_1000CE628(a5);
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1000CE628(a5);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1007D8110((uint64_t)"findExistingVFSItemFor(itemID:parentIsImported:bypassIsHidden:request:completionHandler:)", 89, 2, sub_1000DEB24, v35, (uint64_t)sub_1000D3128, v34);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_1000B21EC(uint64_t a1, int a2, int a3, int a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  uint64_t v39 = a6;
  LODWORD(v11) = a4;
  int v38 = a3;
  int v40 = a2;
  uint64_t v13 = *v7;
  uint64_t v14 = sub_10096B480();
  uint64_t v37 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  id v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v17 = (id)fpfs_current_or_default_log();
  sub_10096B490();
  sub_1000CE628(a5);
  sub_1000CE628(a5);
  swift_retain();
  int v18 = sub_10096B470();
  os_log_type_t v19 = sub_10096C5A0();
  int v20 = v19;
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v21 = swift_slowAlloc();
    uint64_t v36 = a7;
    uint64_t v22 = v21;
    uint64_t v23 = swift_slowAlloc();
    uint64_t v33 = v23;
    uint64_t v42 = v23;
    *(_DWORD *)uint64_t v22 = 136315394;
    int v35 = v11;
    int v32 = v20;
    uint64_t v24 = sub_10064CFB8(v23);
    uint64_t v41 = sub_100719D44(v24, v25, &v42);
    uint64_t v34 = v14;
    sub_10096C8C0();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v22 + 12) = 2080;
    unint64_t v26 = sub_1006A9894(a5, v13[73], v13[72], v13[75], v13[74]);
    unint64_t v11 = v27;
    sub_1000B6C28(a5);
    uint64_t v41 = sub_100719D44(v26, v11, &v42);
    sub_10096C8C0();
    LOBYTE(v11) = v35;
    swift_bridgeObjectRelease();
    sub_1000B6C28(a5);
    _os_log_impl((void *)&_mh_execute_header, v18, (os_log_type_t)v32, "looking up VFS item for %s request %s", (uint8_t *)v22, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    a7 = v36;
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v37 + 8))(v16, v34);
  }
  else
  {
    sub_1000B6C28(a5);
    swift_release();
    sub_1000B6C28(a5);

    (*(void (**)(char *, uint64_t))(v37 + 8))(v16, v14);
  }
  uint64_t v28 = swift_allocObject();
  *(void *)(v28 + 16) = a1;
  *(void *)(v28 + 24) = a5;
  *(void *)(v28 + 32) = v39;
  *(void *)(v28 + 40) = a7;
  *(unsigned char *)(v28 + 48) = v38 & 1;
  *(void *)(v28 + 56) = v8;
  char v29 = v40 & 1;
  *(unsigned char *)(v28 + 64) = v40 & 1;
  *(unsigned char *)(v28 + 65) = v11 & 1;
  sub_1000CE628(a5);
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1000AB9F8(a1, v29, v11 & 1, a5, (uint64_t)sub_1000D1F30, v28);
  return swift_release();
}

void sub_1000B258C(uint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(uint64_t), uint64_t a5, int a6, uint64_t a7, int a8, char a9)
{
  int v82 = a6;
  int v83 = a8;
  uint64_t v91 = a5;
  uint64_t v92 = a7;
  v90 = a4;
  uint64_t v88 = sub_10002B7CC(&qword_100ACD600);
  uint64_t v86 = *(void *)(v88 - 8);
  uint64_t v12 = __chkstk_darwin(v88);
  uint64_t v81 = (uint64_t)&v74 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v74 - v14;
  uint64_t v87 = sub_10002B7CC(&qword_100ACD5F8);
  uint64_t v16 = __chkstk_darwin(v87);
  int v18 = (char *)&v74 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v85 = (uint64_t)&v74 - v20;
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v74 - v21;
  uint64_t v23 = sub_10096B480();
  uint64_t v24 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  unint64_t v26 = (char *)&v74 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v27 = (id)fpfs_current_or_default_log();
  sub_10096B490();
  uint64_t v89 = a1;
  sub_10002B70C(a1, (uint64_t)v22, &qword_100ACD5F8);
  sub_1000CE628(a3);
  sub_1000CE628(a3);
  uint64_t v93 = a2;
  swift_retain();
  uint64_t v28 = sub_10096B470();
  int v29 = sub_10096C5A0();
  if (os_log_type_enabled(v28, (os_log_type_t)v29))
  {
    os_log_t v77 = v28;
    uint64_t v78 = v24;
    uint64_t v79 = v23;
    unint64_t v80 = a3;
    uint64_t v30 = swift_slowAlloc();
    uint64_t v75 = swift_slowAlloc();
    uint64_t v95 = v75;
    *(_DWORD *)uint64_t v30 = 136315650;
    uint64_t v31 = v93;
    swift_beginAccess();
    int v32 = *(void **)(v31 + 32);
    uint64_t v33 = *(unsigned __int8 *)(v31 + 40);
    char v34 = *(unsigned char *)(v31 + 41);
    unint64_t v84 = v15;
    int v76 = v29;
    if (v34)
    {
      id v35 = v32;
      uint64_t v36 = NSFileProviderItemIdentifier.description.getter();
      unint64_t v38 = v37;
      sub_1000D30C4(v32, v33, 1);
    }
    else
    {
      uint64_t v36 = VFSItemID.parseableString.getter((uint64_t)v32, v33);
      unint64_t v38 = v41;
    }
    uint64_t v94 = sub_100719D44(v36, v38, &v95);
    sub_10096C8C0();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v30 + 12) = 2080;
    a3 = v80;
    unint64_t v42 = sub_1005255F4(v80);
    unint64_t v44 = v43;
    sub_1000B6C28(a3);
    uint64_t v94 = sub_100719D44(v42, v44, &v95);
    sub_10096C8C0();
    swift_bridgeObjectRelease();
    sub_1000B6C28(a3);
    *(_WORD *)(v30 + 22) = 2080;
    sub_10002B70C((uint64_t)v22, v85, &qword_100ACD5F8);
    uint64_t v45 = sub_10096BCC0();
    uint64_t v94 = sub_100719D44(v45, v46, &v95);
    sub_10096C8C0();
    swift_bridgeObjectRelease();
    sub_10002B770((uint64_t)v22, &qword_100ACD5F8);
    os_log_t v47 = v77;
    _os_log_impl((void *)&_mh_execute_header, v77, (os_log_type_t)v76, "finished VFS item lookup for %s request %s: %s", (uint8_t *)v30, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v78 + 8))(v26, v79);
    uint64_t v39 = v91;
    uint64_t v40 = v92;
    uint64_t v15 = v84;
  }
  else
  {
    sub_1000B6C28(a3);
    swift_release();
    sub_1000B6C28(a3);
    sub_10002B770((uint64_t)v22, &qword_100ACD5F8);

    (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
    uint64_t v39 = v91;
    uint64_t v40 = v92;
  }
  uint64_t v49 = v89;
  uint64_t v48 = v90;
  sub_10002B70C(v89, (uint64_t)v18, &qword_100ACD5F8);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v51 = v88;
  if (EnumCaseMultiPayload == 1)
  {
    swift_errorRelease();
LABEL_9:
    v48(v49);
    return;
  }
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v86 + 48))(v18, 1, v88) != 1)
  {
    sub_10001AE98((uint64_t)v18, (uint64_t)v15, &qword_100ACD600);
    if (v15[*(int *)(v51 + 56)])
    {
LABEL_14:
      uint64_t v92 = *(void *)v15;
      char v60 = v15[8];
      unint64_t v84 = v15;
      if (((a3 >> 1) & 3 | (a3 >> 58) & 0x3C) == 0x1E)
      {
        unint64_t v61 = *(void *)((a3 & 0xFFFFFFFFFFFFFF9) + 0x10);
        unint64_t v62 = v61;
      }
      else
      {
        uint64_t v68 = swift_allocObject();
        *(void *)(v68 + 16) = a3;
        unint64_t v62 = v68 | 0x7000000000000004;
        unint64_t v61 = a3;
      }
      sub_1000CE628(v61);
      uint64_t v69 = swift_allocObject();
      *(void *)(v69 + 16) = v93;
      *(void *)(v69 + 24) = a3;
      *(void *)(v69 + 32) = v48;
      *(void *)(v69 + 40) = v39;
      *(void *)(v69 + 48) = v40;
      *(unsigned char *)(v69 + 56) = v83 & 1;
      *(unsigned char *)(v69 + 57) = a9 & 1;
      unint64_t v70 = a3;
      uint64_t v71 = swift_allocObject();
      *(void *)(v71 + 16) = sub_1000D5998;
      *(void *)(v71 + 24) = v69;
      uint64_t v95 = v92;
      char v96 = v60;
      v72 = (void *)swift_allocObject();
      sub_1000D3184((uint64_t)&v95, (uint64_t)(v72 + 2));
      v72[4] = v62;
      v72[5] = v40;
      v72[6] = sub_1000D5998;
      v72[7] = v69;
      swift_retain();
      swift_retain();
      sub_1000CE628(v70);
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      sub_1000CE628(v62);
      sub_1004A8A2C((uint64_t)"propagateToFP(itemID:request:completion:)", 41, 2, 0, (uint64_t)FPDDomainFPFSBackend.isDeadEnd(), 0, (uint64_t)sub_1000DEB20, v71, (uint64_t)sub_1000D31E0, (uint64_t)v72);
      swift_release();
      swift_release();
      swift_release();
      sub_1000B6C28(v62);
      uint64_t v73 = (uint64_t)v84;
      goto LABEL_23;
    }
    uint64_t v63 = v81;
    sub_10002B70C((uint64_t)v15, v81, &qword_100ACD600);
    if (v82)
    {
      v64 = *(void **)(v63 + *(int *)(v51 + 52));
      id v65 = v64;
      uint64_t v66 = v63;
      id v67 = v65;
      sub_10002B770(v66, &qword_100ACD600);
      if (!v64) {
        goto LABEL_14;
      }
    }
    else
    {
      sub_10002B770(v63, &qword_100ACD600);
    }
    v48(v49);
    uint64_t v73 = (uint64_t)v15;
LABEL_23:
    sub_10002B770(v73, &qword_100ACD600);
    return;
  }
  if ((*(unsigned char *)(v93 + 25) & 1) == 0) {
    goto LABEL_9;
  }
  v52 = v48;
  uint64_t v53 = v93;
  v54 = *(void **)(v93 + 16);
  uint64_t v55 = *(unsigned __int8 *)(v93 + 24);
  unint64_t v56 = a3;
  uint64_t v57 = swift_allocObject();
  *(void *)(v57 + 16) = v53;
  *(void *)(v57 + 24) = v56;
  *(void *)(v57 + 32) = v52;
  *(void *)(v57 + 40) = v39;
  *(void *)(v57 + 48) = v40;
  *(unsigned char *)(v57 + 56) = v83 & 1;
  *(unsigned char *)(v57 + 57) = a9 & 1;
  uint64_t v58 = swift_allocObject();
  *(void *)(v58 + 16) = sub_1000D58B8;
  *(void *)(v58 + 24) = v57;
  v59 = (void *)swift_allocObject();
  v59[2] = v54;
  v59[3] = v56;
  v59[4] = v40;
  v59[5] = sub_1000D58B8;
  v59[6] = v57;
  sub_1000CE628(v56);
  swift_retain();
  sub_10009C394(v54, v55, 1);
  swift_retain();
  sub_1000CE628(v56);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_10009C394(v54, v55, 1);
  sub_1004A8A2C((uint64_t)"propagateToFS(itemID:request:completion:)", 41, 2, 0, (uint64_t)FPDDomainFPFSBackend.isDeadEnd(), 0, (uint64_t)sub_1000DEB20, v58, (uint64_t)sub_1000D5920, (uint64_t)v59);
  swift_release();
  swift_release();
  swift_release();
  sub_1000D30C4(v54, v55, 1);
}

uint64_t sub_1000B2F34(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t (*a4)(uint64_t), uint64_t a5, int a6, void *a7, int a8, unsigned __int8 a9)
{
  int v112 = a8;
  int v101 = a6;
  v120 = a4;
  uint64_t v121 = a5;
  uint64_t v13 = (void *)*a7;
  uint64_t v115 = *(void *)(*(void *)(*(void *)a2 + 88) - 8);
  uint64_t v14 = __chkstk_darwin(a1);
  v102 = (char *)v96 - v15;
  uint64_t v105 = *(void *)(v16 + 80);
  uint64_t v104 = *(void *)(v105 - 8);
  __chkstk_darwin(v14);
  int v103 = (char *)v96 - v17;
  uint64_t v116 = v18;
  uint64_t v107 = sub_10096C890();
  uint64_t v106 = *(void *)(v107 - 8);
  uint64_t v19 = __chkstk_darwin(v107);
  uint64_t v108 = (uint64_t)v96 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v100 = (char *)v96 - v21;
  uint64_t v22 = v13[72];
  uint64_t v23 = v13[73];
  uint64_t v24 = v13[74];
  v111 = a7;
  uint64_t v25 = v13[75];
  uint64_t v119 = v22;
  v134[0] = v22;
  v134[1] = v23;
  v134[2] = v24;
  v134[3] = v25;
  uint64_t v26 = type metadata accessor for ItemLookupResult();
  unint64_t v130 = *(void *)(v26 - 8);
  uint64_t v27 = __chkstk_darwin(v26);
  v129 = (char *)v96 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v114 = (char *)v96 - v29;
  uint64_t v118 = v30;
  sub_10096C890();
  sub_100033BE8((uint64_t *)&unk_100ACB6B0);
  uint64_t v31 = sub_10096D510();
  uint64_t v32 = *(void *)(v31 - 8);
  uint64_t v33 = __chkstk_darwin(v31);
  v128 = (char *)v96 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = __chkstk_darwin(v33);
  v117 = (char *)v96 - v36;
  __chkstk_darwin(v35);
  unint64_t v38 = (char *)v96 - v37;
  uint64_t v39 = sub_10096B480();
  uint64_t v126 = *(void *)(v39 - 8);
  uint64_t v127 = v39;
  __chkstk_darwin(v39);
  unint64_t v41 = (char *)v96 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v42 = (id)fpfs_current_or_default_log();
  sub_10096B490();
  uint64_t v124 = v32;
  unint64_t v43 = *(void (**)(char *, uint64_t, uint64_t))(v32 + 16);
  v122 = v38;
  v123 = v43;
  uint64_t v131 = a1;
  v43(v38, a1, v31);
  sub_1000CE628(a3);
  sub_1000CE628(a3);
  uint64_t v132 = a2;
  swift_retain();
  v125 = v41;
  unint64_t v44 = sub_10096B470();
  os_log_type_t v45 = sub_10096C5A0();
  int v46 = v45;
  BOOL v47 = os_log_type_enabled(v44, v45);
  uint64_t v113 = v23;
  uint64_t v110 = v24;
  uint64_t v109 = v25;
  if (v47)
  {
    uint64_t v48 = swift_slowAlloc();
    int v98 = v46;
    uint64_t v49 = v48;
    uint64_t v50 = swift_slowAlloc();
    uint64_t v99 = v50;
    v134[0] = v50;
    *(_DWORD *)uint64_t v49 = 136315650;
    os_log_t v97 = v44;
    uint64_t v51 = sub_10064CFB8(v50);
    uint64_t v133 = sub_100719D44(v51, v52, v134);
    v96[1] = v134;
    sub_10096C8C0();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v49 + 12) = 2080;
    unint64_t v53 = sub_1006A9894(a3, v23, v119, v25, v24);
    unint64_t v55 = v54;
    sub_1000B6C28(a3);
    uint64_t v133 = sub_100719D44(v53, v55, v134);
    sub_10096C8C0();
    unint64_t v56 = a3;
    swift_bridgeObjectRelease();
    sub_1000B6C28(a3);
    *(_WORD *)(v49 + 22) = 2080;
    uint64_t v57 = v122;
    uint64_t v58 = v123;
    v123(v117, (uint64_t)v122, v31);
    uint64_t v59 = sub_10096BCC0();
    uint64_t v133 = sub_100719D44(v59, v60, v134);
    sub_10096C8C0();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v124 + 8))(v57, v31);
    os_log_t v61 = v97;
    _os_log_impl((void *)&_mh_execute_header, v97, (os_log_type_t)v98, "finished VFS item lookup for %s request %s: %s", (uint8_t *)v49, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v126 + 8))(v125, v127);
    unint64_t v62 = v130;
    uint64_t v63 = v131;
    v64 = v128;
    id v65 = v129;
    v58(v128, v131, v31);
  }
  else
  {
    sub_1000B6C28(a3);
    swift_release();
    sub_1000B6C28(a3);
    (*(void (**)(char *, uint64_t))(v124 + 8))(v122, v31);

    (*(void (**)(char *, uint64_t))(v126 + 8))(v125, v127);
    unint64_t v56 = a3;
    unint64_t v62 = v130;
    uint64_t v63 = v131;
    v64 = v128;
    id v65 = v129;
    v123(v128, v131, v31);
  }
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_errorRelease();
    uint64_t v66 = v63;
    return v120(v66);
  }
  unint64_t v130 = v56;
  uint64_t v68 = v118;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v64, 1, v118) != 1)
  {
    LODWORD(v129) = a9;
    unint64_t v70 = *(void (**)(char *, char *, uint64_t))(v62 + 32);
    unint64_t v71 = v62;
    v72 = v114;
    v70(v114, v64, v68);
    uint64_t v73 = v110;
    if (v72[*(int *)(v68 + 56)])
    {
LABEL_11:
      uint64_t v74 = (uint64_t)v103;
      uint64_t v75 = v72;
      (*(void (**)(uint64_t, uint64_t))(v73 + 64))(v119, v73);
      unint64_t v76 = v130;
      uint64_t v77 = v68;
      unint64_t v78 = sub_1006A935C(v130);
      uint64_t v79 = swift_allocObject();
      *(void *)(v79 + 16) = v132;
      *(void *)(v79 + 24) = v76;
      uint64_t v80 = v121;
      *(void *)(v79 + 32) = v120;
      *(void *)(v79 + 40) = v80;
      *(void *)(v79 + 48) = v111;
      *(unsigned char *)(v79 + 56) = v112 & 1;
      *(unsigned char *)(v79 + 57) = v129 & 1;
      sub_1000CE628(v76);
      swift_retain();
      swift_retain();
      swift_retain();
      sub_1000B0260(v74, v78, (uint64_t)sub_1000D1F68, v79);
      swift_release();
      sub_1000B6C28(v78);
      (*(void (**)(uint64_t, uint64_t))(v104 + 8))(v74, v105);
      return (*(uint64_t (**)(char *, uint64_t))(v71 + 8))(v75, v77);
    }
    (*(void (**)(char *, char *, uint64_t))(v71 + 16))(v65, v72, v68);
    if (v101)
    {
      uint64_t v87 = &v65[*(int *)(v68 + 52)];
      uint64_t v88 = v106;
      uint64_t v89 = v65;
      v90 = v100;
      uint64_t v91 = v107;
      (*(void (**)(char *, char *, uint64_t))(v106 + 16))(v100, v87, v107);
      uint64_t v92 = v115;
      uint64_t v93 = *(void (**)(char *, uint64_t))(v71 + 8);
      v93(v89, v118);
      int v94 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v92 + 48))(v90, 1, v116);
      uint64_t v63 = v131;
      LODWORD(v92) = v94;
      (*(void (**)(char *, uint64_t))(v88 + 8))(v90, v91);
      BOOL v95 = v92 == 1;
      uint64_t v68 = v118;
      v72 = v114;
      if (v95) {
        goto LABEL_11;
      }
    }
    else
    {
      uint64_t v93 = *(void (**)(char *, uint64_t))(v71 + 8);
      v93(v65, v68);
    }
    v120(v63);
    return ((uint64_t (*)(char *, uint64_t))v93)(v114, v68);
  }
  uint64_t v69 = v108;
  sub_10064D8E8(v108);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v115 + 48))(v69, 1, v116) == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v106 + 8))(v69, v107);
    uint64_t v66 = v131;
    return v120(v66);
  }
  uint64_t v81 = v115;
  uint64_t v82 = (uint64_t)v102;
  uint64_t v83 = v116;
  (*(void (**)(char *, uint64_t, uint64_t))(v115 + 32))(v102, v69, v116);
  uint64_t v84 = swift_allocObject();
  unint64_t v85 = v130;
  *(void *)(v84 + 16) = v132;
  *(void *)(v84 + 24) = v85;
  uint64_t v86 = v121;
  *(void *)(v84 + 32) = v120;
  *(void *)(v84 + 40) = v86;
  *(void *)(v84 + 48) = v111;
  *(unsigned char *)(v84 + 56) = v112 & 1;
  *(unsigned char *)(v84 + 57) = a9 & 1;
  sub_1000CE628(v85);
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1000AE8A4(v82, v85, (uint64_t)sub_1000D1F4C, v84);
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v81 + 8))(v82, v83);
}

uint64_t sub_1000B3B98(uint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(void), uint64_t a5, uint64_t a6, int a7, int a8)
{
  int v51 = a8;
  int v52 = a7;
  uint64_t v53 = a5;
  uint64_t v54 = a6;
  uint64_t v50 = sub_10002B7CC(&qword_100ACD5F8);
  __chkstk_darwin(v50);
  uint64_t v13 = (uint64_t *)((char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = sub_10096B480();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v18 = (id)fpfs_current_or_default_log();
  sub_10096B490();
  swift_retain();
  sub_1000CE628(a3);
  swift_errorRetain();
  swift_retain();
  sub_1000CE628(a3);
  swift_errorRetain();
  uint64_t v19 = sub_10096B470();
  int v20 = sub_10096C5A0();
  if (os_log_type_enabled(v19, (os_log_type_t)v20))
  {
    int v44 = v20;
    os_log_t v45 = v19;
    uint64_t v46 = v15;
    uint64_t v47 = v14;
    uint64_t v49 = a4;
    uint64_t v21 = swift_slowAlloc();
    uint64_t v43 = swift_slowAlloc();
    uint64_t v56 = v43;
    *(_DWORD *)uint64_t v21 = 136315650;
    swift_beginAccess();
    uint64_t v22 = *(void **)(a2 + 32);
    uint64_t v23 = *(unsigned __int8 *)(a2 + 40);
    if (*(unsigned char *)(a2 + 41))
    {
      id v24 = v22;
      uint64_t v25 = NSFileProviderItemIdentifier.description.getter();
      unint64_t v27 = v26;
      sub_1000D30C4(v22, v23, 1);
    }
    else
    {
      uint64_t v25 = VFSItemID.parseableString.getter(*(void *)(a2 + 32), *(unsigned char *)(a2 + 40));
      unint64_t v27 = v33;
    }
    swift_release();
    uint64_t v55 = sub_100719D44(v25, v27, &v56);
    sub_10096C8C0();
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v48 = v13;
    *(_WORD *)(v21 + 12) = 2080;
    unint64_t v34 = sub_1005255F4(a3);
    unint64_t v36 = v35;
    sub_1000B6C28(a3);
    uint64_t v55 = sub_100719D44(v34, v36, &v56);
    sub_10096C8C0();
    swift_bridgeObjectRelease();
    sub_1000B6C28(a3);
    *(_WORD *)(v21 + 22) = 2080;
    uint64_t v55 = a1;
    swift_errorRetain();
    sub_10002B7CC(&qword_100AD7360);
    uint64_t v37 = sub_10096BCC0();
    uint64_t v55 = sub_100719D44(v37, v38, &v56);
    uint64_t v13 = v48;
    sub_10096C8C0();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    os_log_t v39 = v45;
    _os_log_impl((void *)&_mh_execute_header, v45, (os_log_type_t)v44, "finished propagating to FP %s request %s: %s", (uint8_t *)v21, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v46 + 8))(v17, v47);
    uint64_t v28 = v53;
    uint64_t v29 = v54;
    char v30 = v52;
    a4 = v49;
    char v31 = v51;
    if (!a1) {
      goto LABEL_8;
    }
LABEL_5:
    uint64_t *v13 = a1;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    a4(v13);
    return sub_10002B770((uint64_t)v13, &qword_100ACD5F8);
  }
  sub_1000B6C28(a3);
  swift_release_n();
  sub_1000B6C28(a3);
  swift_errorRelease();
  swift_errorRelease();

  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  uint64_t v28 = v53;
  uint64_t v29 = v54;
  char v30 = v52;
  char v31 = v51;
  if (a1) {
    goto LABEL_5;
  }
LABEL_8:
  uint64_t v40 = (void *)swift_allocObject();
  v40[2] = a2;
  v40[3] = a3;
  v40[4] = a4;
  v40[5] = v28;
  uint64_t v41 = swift_allocObject();
  *(void *)(v41 + 16) = a2;
  *(void *)(v41 + 24) = v29;
  *(unsigned char *)(v41 + 32) = v31 & 1;
  *(unsigned char *)(v41 + 33) = v30 & 1;
  *(void *)(v41 + 40) = sub_1000D59D8;
  *(void *)(v41 + 48) = v40;
  *(void *)(v41 + 56) = a3;
  uint64_t v42 = swift_allocObject();
  *(void *)(v42 + 16) = sub_1000D59D8;
  *(void *)(v42 + 24) = v40;
  swift_retain();
  sub_1000CE628(a3);
  swift_retain();
  swift_retain();
  sub_1000CE628(a3);
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1007D8110((uint64_t)"findExistingVFSItemFor(itemID:parentIsImported:bypassIsHidden:request:completionHandler:)", 89, 2, sub_1000DEB24, v42, (uint64_t)sub_1000D3128, v41);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_1000B4128(uint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(void), uint64_t a5, uint64_t *a6, int a7, int a8)
{
  int v54 = a7;
  int v55 = a8;
  uint64_t v13 = *(void *)(*a6 + 576);
  uint64_t v14 = *(void *)(*a6 + 584);
  uint64_t v15 = *a6;
  uint64_t v16 = *(void *)(*a6 + 592);
  int v51 = a6;
  uint64_t v17 = *(void *)(v15 + 600);
  v64[0] = v13;
  v64[1] = v14;
  uint64_t v61 = v16;
  uint64_t v62 = v17;
  v64[2] = v16;
  v64[3] = v17;
  type metadata accessor for ItemLookupResult();
  sub_10096C890();
  sub_100033BE8((uint64_t *)&unk_100ACB6B0);
  uint64_t v18 = sub_10096D510();
  uint64_t v58 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v57 = (uint64_t *)((char *)v47 - v19);
  uint64_t v20 = sub_10096B480();
  uint64_t v59 = *(void *)(v20 - 8);
  uint64_t v60 = v20;
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)v47 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v23 = (id)fpfs_current_or_default_log();
  sub_10096B490();
  swift_retain();
  sub_1000CE628(a3);
  swift_errorRetain();
  swift_retain();
  sub_1000CE628(a3);
  swift_errorRetain();
  id v24 = sub_10096B470();
  os_log_type_t v25 = sub_10096C5A0();
  int v56 = v25;
  BOOL v26 = os_log_type_enabled(v24, v25);
  uint64_t v52 = v14;
  uint64_t v53 = v13;
  if (v26)
  {
    uint64_t v27 = swift_slowAlloc();
    uint64_t v48 = v18;
    uint64_t v28 = v27;
    uint64_t v29 = swift_slowAlloc();
    v47[1] = v29;
    v64[0] = (uint64_t)v29;
    *(_DWORD *)uint64_t v28 = 136315650;
    uint64_t v49 = a4;
    v47[0] = v24;
    uint64_t v30 = sub_10064CFB8((uint64_t)v29);
    uint64_t v50 = a5;
    unint64_t v32 = v31;
    swift_release();
    uint64_t v63 = sub_100719D44(v30, v32, v64);
    sub_10096C8C0();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v28 + 12) = 2080;
    uint64_t v33 = v14;
    uint64_t v34 = v61;
    unint64_t v35 = sub_1006A9894(a3, v33, v13, v62, v61);
    unint64_t v37 = v36;
    sub_1000B6C28(a3);
    uint64_t v38 = v35;
    a4 = v49;
    uint64_t v63 = sub_100719D44(v38, v37, v64);
    sub_10096C8C0();
    swift_bridgeObjectRelease();
    sub_1000B6C28(a3);
    *(_WORD *)(v28 + 22) = 2080;
    uint64_t v63 = a1;
    swift_errorRetain();
    sub_10002B7CC(&qword_100AD7360);
    uint64_t v39 = sub_10096BCC0();
    uint64_t v63 = sub_100719D44(v39, v40, v64);
    sub_10096C8C0();
    a5 = v50;
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    os_log_t v41 = v47[0];
    _os_log_impl((void *)&_mh_execute_header, v47[0], (os_log_type_t)v56, "finished propagating to FP %s request %s: %s", (uint8_t *)v28, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v18 = v48;
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v59 + 8))(v22, v60);
    uint64_t v42 = v62;
    if (a1)
    {
LABEL_3:
      uint64_t v43 = v57;
      *uint64_t v57 = a1;
      swift_storeEnumTagMultiPayload();
      swift_errorRetain();
      a4(v43);
      return (*(uint64_t (**)(uint64_t *, uint64_t))(v58 + 8))(v43, v18);
    }
  }
  else
  {
    sub_1000B6C28(a3);
    swift_release_n();
    sub_1000B6C28(a3);
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(char *, uint64_t))(v59 + 8))(v22, v60);
    uint64_t v34 = v61;
    uint64_t v42 = v62;
    if (a1) {
      goto LABEL_3;
    }
  }
  os_log_t v45 = (void *)swift_allocObject();
  uint64_t v46 = v52;
  v45[2] = v53;
  v45[3] = v46;
  v45[4] = v34;
  v45[5] = v42;
  v45[6] = a2;
  v45[7] = a3;
  v45[8] = a4;
  v45[9] = a5;
  swift_retain();
  sub_1000CE628(a3);
  swift_retain();
  sub_1000AB9F8(a2, v54 & 1, v55 & 1, a3, (uint64_t)sub_1000D1F84, (uint64_t)v45);
  return swift_release();
}

uint64_t sub_1000B46B0(uint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(void), uint64_t a5, uint64_t a6, int a7, int a8)
{
  int v51 = a8;
  int v52 = a7;
  uint64_t v53 = a5;
  uint64_t v54 = a6;
  uint64_t v50 = sub_10002B7CC(&qword_100ACD5F8);
  __chkstk_darwin(v50);
  uint64_t v13 = (uint64_t *)((char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = sub_10096B480();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v18 = (id)fpfs_current_or_default_log();
  sub_10096B490();
  swift_retain();
  sub_1000CE628(a3);
  swift_errorRetain();
  swift_retain();
  sub_1000CE628(a3);
  swift_errorRetain();
  uint64_t v19 = sub_10096B470();
  int v20 = sub_10096C5A0();
  if (os_log_type_enabled(v19, (os_log_type_t)v20))
  {
    int v44 = v20;
    os_log_t v45 = v19;
    uint64_t v46 = v15;
    uint64_t v47 = v14;
    uint64_t v49 = a4;
    uint64_t v21 = swift_slowAlloc();
    uint64_t v43 = swift_slowAlloc();
    uint64_t v56 = v43;
    *(_DWORD *)uint64_t v21 = 136315650;
    swift_beginAccess();
    uint64_t v22 = *(void **)(a2 + 32);
    uint64_t v23 = *(unsigned __int8 *)(a2 + 40);
    if (*(unsigned char *)(a2 + 41))
    {
      id v24 = v22;
      uint64_t v25 = NSFileProviderItemIdentifier.description.getter();
      unint64_t v27 = v26;
      sub_1000D30C4(v22, v23, 1);
    }
    else
    {
      uint64_t v25 = VFSItemID.parseableString.getter(*(void *)(a2 + 32), *(unsigned char *)(a2 + 40));
      unint64_t v27 = v33;
    }
    swift_release();
    uint64_t v55 = sub_100719D44(v25, v27, &v56);
    sub_10096C8C0();
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v48 = v13;
    *(_WORD *)(v21 + 12) = 2080;
    unint64_t v34 = sub_1005255F4(a3);
    unint64_t v36 = v35;
    sub_1000B6C28(a3);
    uint64_t v55 = sub_100719D44(v34, v36, &v56);
    sub_10096C8C0();
    swift_bridgeObjectRelease();
    sub_1000B6C28(a3);
    *(_WORD *)(v21 + 22) = 2080;
    uint64_t v55 = a1;
    swift_errorRetain();
    sub_10002B7CC(&qword_100AD7360);
    uint64_t v37 = sub_10096BCC0();
    uint64_t v55 = sub_100719D44(v37, v38, &v56);
    uint64_t v13 = v48;
    sub_10096C8C0();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    os_log_t v39 = v45;
    _os_log_impl((void *)&_mh_execute_header, v45, (os_log_type_t)v44, "finished propagating to FS %s request %s: %s", (uint8_t *)v21, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v46 + 8))(v17, v47);
    uint64_t v28 = v53;
    uint64_t v29 = v54;
    char v30 = v52;
    a4 = v49;
    char v31 = v51;
    if (!a1) {
      goto LABEL_8;
    }
LABEL_5:
    uint64_t *v13 = a1;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    a4(v13);
    return sub_10002B770((uint64_t)v13, &qword_100ACD5F8);
  }
  sub_1000B6C28(a3);
  swift_release_n();
  sub_1000B6C28(a3);
  swift_errorRelease();
  swift_errorRelease();

  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  uint64_t v28 = v53;
  uint64_t v29 = v54;
  char v30 = v52;
  char v31 = v51;
  if (a1) {
    goto LABEL_5;
  }
LABEL_8:
  *(unsigned char *)(a2 + 42) = 0;
  unint64_t v40 = (void *)swift_allocObject();
  v40[2] = a2;
  v40[3] = a3;
  v40[4] = a4;
  v40[5] = v28;
  uint64_t v41 = swift_allocObject();
  *(void *)(v41 + 16) = a2;
  *(void *)(v41 + 24) = v29;
  *(unsigned char *)(v41 + 32) = v31 & 1;
  *(unsigned char *)(v41 + 33) = v30 & 1;
  *(void *)(v41 + 40) = sub_1000D5A50;
  *(void *)(v41 + 48) = v40;
  *(void *)(v41 + 56) = a3;
  uint64_t v42 = swift_allocObject();
  *(void *)(v42 + 16) = sub_1000D5A50;
  *(void *)(v42 + 24) = v40;
  swift_retain();
  sub_1000CE628(a3);
  swift_retain();
  swift_retain();
  sub_1000CE628(a3);
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1007D8110((uint64_t)"findExistingVFSItemFor(itemID:parentIsImported:bypassIsHidden:request:completionHandler:)", 89, 2, sub_1000DEB24, v42, (uint64_t)sub_1000D3128, v41);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_1000B4C44(uint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(void), uint64_t a5, uint64_t *a6, int a7, int a8)
{
  int v56 = a7;
  uint64_t v63 = a5;
  uint64_t v13 = *(void *)(*a6 + 576);
  uint64_t v14 = *(void *)(*a6 + 584);
  uint64_t v15 = *a6;
  uint64_t v16 = *(void *)(*a6 + 592);
  uint64_t v53 = a6;
  uint64_t v17 = *(void *)(v15 + 600);
  v66[0] = v13;
  v66[1] = v14;
  uint64_t v62 = v16;
  v66[2] = v16;
  v66[3] = v17;
  uint64_t v64 = v17;
  type metadata accessor for ItemLookupResult();
  sub_10096C890();
  sub_100033BE8((uint64_t *)&unk_100ACB6B0);
  uint64_t v18 = sub_10096D510();
  uint64_t v59 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v58 = (uint64_t *)((char *)v49 - v19);
  uint64_t v20 = sub_10096B480();
  uint64_t v60 = *(void *)(v20 - 8);
  uint64_t v61 = v20;
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)v49 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v23 = (id)fpfs_current_or_default_log();
  sub_10096B490();
  swift_retain();
  sub_1000CE628(a3);
  swift_errorRetain();
  swift_retain();
  sub_1000CE628(a3);
  swift_errorRetain();
  id v24 = sub_10096B470();
  os_log_type_t v25 = sub_10096C5A0();
  int v57 = v25;
  BOOL v26 = os_log_type_enabled(v24, v25);
  uint64_t v54 = v14;
  uint64_t v55 = v13;
  if (v26)
  {
    uint64_t v27 = swift_slowAlloc();
    uint64_t v50 = v18;
    uint64_t v28 = v27;
    uint64_t v29 = swift_slowAlloc();
    v49[1] = v29;
    v66[0] = (uint64_t)v29;
    *(_DWORD *)uint64_t v28 = 136315650;
    int v52 = a8;
    v49[0] = v24;
    uint64_t v30 = sub_10064CFB8((uint64_t)v29);
    int v51 = a4;
    unint64_t v32 = v31;
    swift_release();
    uint64_t v65 = sub_100719D44(v30, v32, v66);
    sub_10096C8C0();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v28 + 12) = 2080;
    uint64_t v33 = v14;
    uint64_t v34 = v62;
    unint64_t v35 = sub_1006A9894(a3, v33, v13, v64, v62);
    unint64_t v37 = v36;
    sub_1000B6C28(a3);
    uint64_t v38 = v35;
    a4 = v51;
    uint64_t v65 = sub_100719D44(v38, v37, v66);
    sub_10096C8C0();
    swift_bridgeObjectRelease();
    sub_1000B6C28(a3);
    *(_WORD *)(v28 + 22) = 2080;
    uint64_t v65 = a1;
    swift_errorRetain();
    sub_10002B7CC(&qword_100AD7360);
    uint64_t v39 = sub_10096BCC0();
    uint64_t v65 = sub_100719D44(v39, v40, v66);
    LOBYTE(a8) = v52;
    sub_10096C8C0();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    os_log_t v41 = v49[0];
    _os_log_impl((void *)&_mh_execute_header, v49[0], (os_log_type_t)v57, "finished propagating to FS %s request %s: %s", (uint8_t *)v28, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v18 = v50;
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v60 + 8))(v22, v61);
    uint64_t v42 = v34;
    uint64_t v43 = v64;
    if (a1)
    {
LABEL_3:
      int v44 = v58;
      uint64_t *v58 = a1;
      swift_storeEnumTagMultiPayload();
      swift_errorRetain();
      a4(v44);
      return (*(uint64_t (**)(uint64_t *, uint64_t))(v59 + 8))(v44, v18);
    }
  }
  else
  {
    sub_1000B6C28(a3);
    swift_release_n();
    sub_1000B6C28(a3);
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(char *, uint64_t))(v60 + 8))(v22, v61);
    uint64_t v42 = v62;
    uint64_t v43 = v64;
    if (a1) {
      goto LABEL_3;
    }
  }
  *(unsigned char *)(a2 + *(void *)(*(void *)a2 + 128)) = 0;
  uint64_t v46 = (void *)swift_allocObject();
  uint64_t v47 = v54;
  v46[2] = v55;
  v46[3] = v47;
  v46[4] = v42;
  v46[5] = v43;
  v46[6] = a2;
  v46[7] = a3;
  uint64_t v48 = v63;
  v46[8] = a4;
  v46[9] = v48;
  swift_retain();
  sub_1000CE628(a3);
  swift_retain();
  sub_1000AB9F8(a2, v56 & 1, a8 & 1, a3, (uint64_t)sub_1000D21C0, (uint64_t)v46);
  return swift_release();
}

uint64_t sub_1000B51F4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t (*a4)(uint64_t), uint64_t a5, const char *a6)
{
  uint64_t v47 = a6;
  uint64_t v49 = a5;
  uint64_t v50 = a4;
  uint64_t v48 = sub_10002B7CC(&qword_100ACD5F8);
  uint64_t v9 = __chkstk_darwin(v48);
  unint64_t v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v38 - v12;
  uint64_t v14 = sub_10096B480();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v18 = (id)fpfs_current_or_default_log();
  sub_10096B490();
  sub_10002B70C(a1, (uint64_t)v13, &qword_100ACD5F8);
  sub_1000CE628(a3);
  sub_1000CE628(a3);
  swift_retain();
  uint64_t v19 = sub_10096B470();
  int v20 = sub_10096C5A0();
  if (os_log_type_enabled(v19, (os_log_type_t)v20))
  {
    os_log_t v41 = v17;
    uint64_t v42 = v11;
    int v40 = v20;
    os_log_t v43 = v19;
    uint64_t v44 = v15;
    uint64_t v45 = v14;
    uint64_t v46 = a1;
    uint64_t v21 = swift_slowAlloc();
    uint64_t v39 = swift_slowAlloc();
    uint64_t v52 = v39;
    *(_DWORD *)uint64_t v21 = 136315650;
    swift_beginAccess();
    uint64_t v22 = *(void **)(a2 + 32);
    uint64_t v23 = *(unsigned __int8 *)(a2 + 40);
    id v24 = v47;
    unint64_t v25 = a3;
    if (*(unsigned char *)(a2 + 41))
    {
      id v26 = v22;
      uint64_t v27 = NSFileProviderItemIdentifier.description.getter();
      unint64_t v29 = v28;
      sub_1000D30C4(v22, v23, 1);
    }
    else
    {
      uint64_t v27 = VFSItemID.parseableString.getter(*(void *)(a2 + 32), *(unsigned char *)(a2 + 40));
      unint64_t v29 = v31;
    }
    uint64_t v51 = sub_100719D44(v27, v29, &v52);
    sub_10096C8C0();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v21 + 12) = 2080;
    unint64_t v32 = sub_1005255F4(a3);
    unint64_t v34 = v33;
    sub_1000B6C28(v25);
    uint64_t v51 = sub_100719D44(v32, v34, &v52);
    sub_10096C8C0();
    swift_bridgeObjectRelease();
    sub_1000B6C28(v25);
    *(_WORD *)(v21 + 22) = 2080;
    sub_10002B70C((uint64_t)v13, (uint64_t)v42, &qword_100ACD5F8);
    uint64_t v35 = sub_10096BCC0();
    uint64_t v51 = sub_100719D44(v35, v36, &v52);
    sub_10096C8C0();
    swift_bridgeObjectRelease();
    sub_10002B770((uint64_t)v13, &qword_100ACD5F8);
    os_log_t v37 = v43;
    _os_log_impl((void *)&_mh_execute_header, v43, (os_log_type_t)v40, v24, (uint8_t *)v21, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v44 + 8))(v41, v45);
    return v50(v46);
  }
  else
  {
    sub_1000B6C28(a3);
    swift_release();
    sub_1000B6C28(a3);
    sub_10002B770((uint64_t)v13, &qword_100ACD5F8);

    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    return v50(a1);
  }
}

uint64_t sub_1000B5624(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t (*a4)(void), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, const char *a10)
{
  uint64_t v47 = a7;
  uint64_t v48 = a6;
  v54[0] = a6;
  v54[1] = a7;
  uint64_t v49 = a8;
  v54[2] = a8;
  v54[3] = a9;
  uint64_t v46 = a9;
  type metadata accessor for ItemLookupResult();
  sub_10096C890();
  sub_100033BE8((uint64_t *)&unk_100ACB6B0);
  uint64_t v14 = sub_10096D510();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v45 = (char *)v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)v38 - v18;
  uint64_t v20 = sub_10096B480();
  uint64_t v51 = *(void *)(v20 - 8);
  uint64_t v52 = v20;
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)v38 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v23 = (id)fpfs_current_or_default_log();
  sub_10096B490();
  os_log_t v43 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v43(v19, a1, v14);
  sub_1000CE628(a3);
  sub_1000CE628(a3);
  swift_retain();
  uint64_t v50 = v22;
  id v24 = sub_10096B470();
  os_log_type_t v25 = sub_10096C5A0();
  int v44 = v25;
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v39 = a10;
    uint64_t v26 = swift_slowAlloc();
    uint64_t v40 = a1;
    uint64_t v27 = v26;
    unint64_t v28 = swift_slowAlloc();
    v38[1] = v28;
    v54[0] = (uint64_t)v28;
    *(_DWORD *)uint64_t v27 = 136315650;
    uint64_t v42 = a4;
    v38[0] = v24;
    uint64_t v29 = sub_10064CFB8((uint64_t)v28);
    uint64_t v41 = a5;
    uint64_t v53 = sub_100719D44(v29, v30, v54);
    sub_10096C8C0();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v27 + 12) = 2080;
    unint64_t v31 = sub_1006A9894(a3, v47, v48, v46, v49);
    unint64_t v33 = v32;
    sub_1000B6C28(a3);
    uint64_t v53 = sub_100719D44(v31, v33, v54);
    sub_10096C8C0();
    swift_bridgeObjectRelease();
    sub_1000B6C28(a3);
    *(_WORD *)(v27 + 22) = 2080;
    v43(v45, (uint64_t)v19, v14);
    uint64_t v34 = sub_10096BCC0();
    uint64_t v53 = sub_100719D44(v34, v35, v54);
    a4 = v42;
    sub_10096C8C0();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v19, v14);
    os_log_t v36 = v38[0];
    _os_log_impl((void *)&_mh_execute_header, v38[0], (os_log_type_t)v44, v39, (uint8_t *)v27, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    a1 = v40;
    swift_slowDealloc();
  }
  else
  {
    sub_1000B6C28(a3);
    swift_release();
    sub_1000B6C28(a3);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v19, v14);
  }
  (*(void (**)(char *, uint64_t))(v51 + 8))(v50, v52);
  return a4(a1);
}

uint64_t sub_1000B5A94()
{
  uint64_t v0 = sub_10002B7CC((uint64_t *)&unk_100ACD990);
  __chkstk_darwin(v0 - 8);
  v2 = (char *)&v8 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_10096B760();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  qos_class_self();
  sub_10096B740();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for DispatchQoS.QoSClass.utility(_:), v3);
    sub_10002B770((uint64_t)v2, (uint64_t *)&unk_100ACD990);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v2, v3);
  }
  return sub_10096B7B0();
}

id sub_1000B5C20(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v51 = a4;
  uint64_t v52 = a5;
  uint64_t v54 = a3;
  unint64_t v55 = a2;
  uint64_t v56 = a1;
  unint64_t v6 = (void *)*v5;
  uint64_t v60 = sub_10096B7D0();
  uint64_t v50 = *(void *)(v60 - 8);
  uint64_t v53 = *(void *)(v50 + 64);
  __chkstk_darwin(v60);
  uint64_t v59 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = v6[74];
  uint64_t v57 = v6[72];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  uint64_t v11 = __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v49 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = v10;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v39 - v12;
  id v58 = [self discreteProgressWithTotalUnitCount:1];
  [v58 setCancellable:1];
  uint64_t v14 = swift_allocObject();
  swift_weakInit();
  uint64_t v15 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v16 = v9;
  uint64_t v40 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  uint64_t v41 = v9 + 16;
  v40(v13, v56, AssociatedTypeWitness);
  uint64_t v17 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v43 = v17 | 7;
  uint64_t v18 = (char *)swift_allocObject();
  *((void *)v18 + 2) = v57;
  uint64_t v48 = v5;
  uint64_t v47 = v6[73];
  *((void *)v18 + 3) = v47;
  *((void *)v18 + 4) = v61;
  uint64_t v46 = v6[75];
  *((void *)v18 + 5) = v46;
  *((void *)v18 + 6) = v14;
  *((void *)v18 + 7) = v15;
  uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
  uint64_t v44 = v16 + 32;
  uint64_t v45 = v19;
  v19(&v18[(v17 + 64) & ~v17], v13, AssociatedTypeWitness);
  aBlock[4] = sub_1000B65AC;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100020480;
  aBlock[3] = &unk_100A6E080;
  uint64_t v20 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  sub_100031400((uint64_t)sub_1000B65AC);
  swift_release();
  [v58 setCancellationHandler:v20];
  _Block_release(v20);
  swift_release();
  swift_release();
  swift_release();
  uint64_t v21 = swift_allocObject();
  uint64_t v39 = v21;
  uint64_t v22 = v51;
  uint64_t v23 = v52;
  *(void *)(v21 + 16) = v51;
  *(void *)(v21 + 24) = v23;
  id v24 = v49;
  uint64_t v25 = AssociatedTypeWitness;
  v40(v49, v56, AssociatedTypeWitness);
  uint64_t v26 = v50;
  (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v59, v54, v60);
  uint64_t v27 = (v17 + 72) & ~v17;
  unint64_t v28 = (v42 + v27 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v29 = (v28 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v30 = (v29 + *(unsigned __int8 *)(v26 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
  unint64_t v31 = (char *)swift_allocObject();
  uint64_t v32 = v47;
  *((void *)v31 + 2) = v57;
  *((void *)v31 + 3) = v32;
  uint64_t v33 = v46;
  *((void *)v31 + 4) = v61;
  *((void *)v31 + 5) = v33;
  *((void *)v31 + 6) = v22;
  *((void *)v31 + 7) = v23;
  *((void *)v31 + 8) = v48;
  v45(&v31[v27], v24, v25);
  unint64_t v34 = v55;
  *(void *)&v31[v28] = v55;
  id v36 = v58;
  unint64_t v35 = v59;
  *(void *)&v31[v29] = v58;
  (*(void (**)(char *, char *, uint64_t))(v26 + 32))(&v31[v30], v35, v60);
  swift_retain_n();
  swift_retain();
  sub_1000CE628(v34);
  id v37 = v36;
  sub_1006BA410((uint64_t)"materialize(_:request:qos:completion:)", 38, 2, 0, (uint64_t)FPDDomainFPFSBackend.isDeadEnd(), 0, (uint64_t)sub_1000B6658, v39, (uint64_t)sub_1000B6D10, (uint64_t)v31);
  swift_release();
  swift_release();
  return v37;
}

uint64_t sub_1000B61F8()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t sub_1000B6230()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

void sub_1000B6268(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v27 = a5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v15 = (char *)&v26 - v14;
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v17 = Strong;
    swift_beginAccess();
    uint64_t v18 = swift_unknownObjectWeakLoadStrong();
    if (v18)
    {
      uint64_t v19 = (void *)v18;
      (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a3, AssociatedTypeWitness);
      uint64_t v20 = *(unsigned __int8 *)(v12 + 80);
      uint64_t v26 = a7;
      uint64_t v21 = (v20 + 56) & ~v20;
      uint64_t v22 = (char *)swift_allocObject();
      uint64_t v23 = v27;
      *((void *)v22 + 2) = a4;
      *((void *)v22 + 3) = v23;
      uint64_t v24 = v26;
      *((void *)v22 + 4) = a6;
      *((void *)v22 + 5) = v24;
      *((void *)v22 + 6) = v17;
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&v22[v21], v15, AssociatedTypeWitness);
      *(void *)&v22[(v13 + v21 + 7) & 0xFFFFFFFFFFFFFFF8] = v19;
      swift_retain();
      id v25 = v19;
      sub_10035B320((uint64_t)"materialize(_:request:qos:completion:)", 38, 2u, (uint64_t)FPDDomainFPFSBackend.isDeadEnd(), 0, (uint64_t)Filename.init(rawValue:), 0, (uint64_t)sub_1000CE810, (uint64_t)v22);
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
    }
  }
}

uint64_t sub_1000B64C0()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, AssociatedTypeWitness);

  return swift_deallocObject();
}

void sub_1000B65AC()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v4 = v0[5];
  uint64_t v5 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v6 = v0[6];
  uint64_t v7 = v0[7];
  uint64_t v8 = (uint64_t)v0 + ((*(unsigned __int8 *)(v5 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  sub_1000B6268(v6, v7, v8, v1, v2, v3, v4);
}

uint64_t sub_1000B6658(uint64_t a1)
{
  return sub_1002687EC(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_1000B6660(uint64_t a1, uint64_t a2, void **a3, uint64_t a4, unint64_t a5, void *a6, uint64_t a7)
{
  uint64_t v57 = a7;
  unint64_t v55 = *a3;
  uint64_t v13 = sub_10096B0E0();
  uint64_t v52 = *(void *)(v13 - 8);
  uint64_t v53 = v13;
  __chkstk_darwin(v13);
  uint64_t v54 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10096B480();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v19 = (id)fpfs_current_or_default_log();
  sub_10096B490();
  os_log_type_t v20 = sub_10096C5A0();
  uint64_t v21 = (void (*)(void))sub_1006A75EC(v20, (uint64_t)"materialization waiter", 22, 2, a1, a2);
  uint64_t v23 = v22;
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  uint64_t v24 = a4;
  uint64_t v25 = a4;
  unint64_t v26 = a5;
  if ((sub_1006BDE9C(v25, a5, a6, v57, v21, v23) - 1) > 1u) {
    return swift_release();
  }
  uint64_t v57 = (uint64_t)v23;
  uint64_t v28 = v55[73];
  uint64_t v29 = v55[74];
  uint64_t v30 = v55[75];
  uint64_t v58 = v55[72];
  uint64_t v27 = v58;
  uint64_t v59 = v28;
  uint64_t v60 = v29;
  uint64_t v61 = v30;
  type metadata accessor for ConcreteJobResult();
  uint64_t v31 = sub_100591720();
  uint64_t v32 = sub_100591720();
  unint64_t v33 = v26;
  uint64_t v34 = v32;
  unint64_t v35 = sub_1006A8FC0(v33, v27, v28, v29, v30);
  uint64_t v37 = v36;
  swift_retain();
  uint64_t v38 = v35;
  uint64_t v39 = v56;
  sub_1008B08F0(v24, v38, v37, 0x800000, a3, v31, v34);
  if (v39)
  {
    swift_release();
LABEL_12:
    swift_release();
    swift_release();
    return swift_release();
  }
  swift_release();
  uint64_t v40 = v54;
  sub_10096B0D0();
  sub_10096B080();
  double v42 = v41;
  uint64_t v43 = *(uint64_t (**)(char *, uint64_t))(v52 + 8);
  uint64_t v44 = v40;
  uint64_t v45 = v53;
  uint64_t result = v43(v44, v53);
  double v47 = v42 * 1000000000.0;
  if ((~COERCE__INT64(v42 * 1000000000.0) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (v47 <= -9.22337204e18)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v47 >= 9.22337204e18)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  sub_10059C6F4(v31, (uint64_t)v47);
  uint64_t v48 = v54;
  sub_10096B0D0();
  sub_10096B080();
  double v50 = v49;
  uint64_t result = v43(v48, v45);
  double v51 = v50 * 1000000000.0;
  if ((~COERCE__INT64(v50 * 1000000000.0) & 0x7FF0000000000000) == 0)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v51 <= -9.22337204e18)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (v51 < 9.22337204e18)
  {
    sub_10059C6F4(v34, (uint64_t)v51);
    goto LABEL_12;
  }
LABEL_19:
  __break(1u);
  return result;
}

uint64_t sub_1000B6A80()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = sub_10096B7D0();
  uint64_t v7 = *(void *)(v6 - 8);
  unint64_t v8 = (v5 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  swift_release();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, AssociatedTypeWitness);
  sub_1000B6C28(*(void *)(v0 + v4));

  (*(void (**)(unint64_t, uint64_t))(v7 + 8))(v0 + v8, v6);

  return swift_deallocObject();
}

unint64_t sub_1000B6C28(unint64_t result)
{
  switch((result >> 58) & 0x3C | (result >> 1) & 3)
  {
    case 0uLL:
    case 1uLL:
    case 2uLL:
    case 3uLL:
    case 4uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 8uLL:
    case 9uLL:
    case 0xAuLL:
    case 0xBuLL:
    case 0xCuLL:
    case 0xDuLL:
    case 0xEuLL:
    case 0xFuLL:
    case 0x10uLL:
    case 0x11uLL:
    case 0x12uLL:
    case 0x13uLL:
    case 0x14uLL:
    case 0x15uLL:
    case 0x16uLL:
    case 0x17uLL:
    case 0x18uLL:
    case 0x19uLL:
    case 0x1AuLL:
    case 0x1BuLL:
    case 0x1CuLL:
    case 0x1DuLL:
    case 0x1EuLL:
    case 0x1FuLL:
    case 0x20uLL:
    case 0x21uLL:
    case 0x22uLL:
    case 0x23uLL:
    case 0x24uLL:
    case 0x25uLL:
    case 0x26uLL:
    case 0x27uLL:
    case 0x28uLL:
      uint64_t result = swift_release();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000B6D10()
{
  uint64_t v1 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = *(void *)(sub_10096B7D0() - 8);
  return sub_1000B6660(*(void *)(v0 + 48), *(void *)(v0 + 56), *(void ***)(v0 + 64), v0 + v2, *(void *)(v0 + v3), *(void **)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8)), v0+ ((((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)));
}

uint64_t sub_1000B6E14(uint64_t a1, int a2, int a3, int a4, unint64_t a5, void *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v94 = a8;
  BOOL v95 = a6;
  uint64_t v91 = a7;
  int v92 = a3;
  int v93 = a4;
  int v90 = a2;
  uint64_t v11 = *v8;
  uint64_t v12 = sub_10002B7CC((uint64_t *)&unk_100AD63E0);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)v79 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10002B7CC((uint64_t *)&unk_100AD0DE0);
  uint64_t v87 = *(void *)(v15 - 8);
  uint64_t v16 = __chkstk_darwin(v15 - 8);
  unint64_t v88 = v17;
  uint64_t v89 = (uint64_t)v79 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  id v19 = (char *)v79 - v18;
  os_log_type_t v20 = (int *)sub_10002B7CC(&qword_100ACD5F0);
  __chkstk_darwin(v20);
  uint64_t v81 = (void *)((char *)v79 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v22 = sub_10096B480();
  uint64_t v84 = *(void *)(v22 - 8);
  uint64_t v85 = v22;
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)v79 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v25 = (id)fpfs_current_or_default_log();
  sub_10096B490();
  int v82 = (a5 >> 58) & 0x3C;
  LODWORD(v83) = (a5 >> 1) & 3;
  sub_1000CE628(a5);
  sub_1000CE628(a5);
  swift_retain();
  unint64_t v26 = sub_10096B470();
  os_log_type_t v27 = sub_10096C5A0();
  BOOL v28 = os_log_type_enabled(v26, v27);
  os_log_t v97 = v19;
  unint64_t v98 = a5;
  uint64_t v96 = a1;
  uint64_t v86 = v14;
  if (v28)
  {
    uint64_t v29 = v11;
    uint64_t v30 = swift_slowAlloc();
    uint64_t v31 = swift_slowAlloc();
    v79[1] = v31;
    v101[0] = v31;
    *(_DWORD *)uint64_t v30 = 136315394;
    uint64_t v80 = v20;
    uint64_t v32 = sub_10064CFB8(v31);
    uint64_t v100 = sub_100719D44(v32, v33, v101);
    sub_10096C8C0();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v30 + 12) = 2080;
    unint64_t v34 = sub_1006A9894(a5, v29[72], v29[73], v29[74], v29[75]);
    unint64_t v36 = v35;
    sub_1000B6C28(v98);
    uint64_t v37 = v34;
    os_log_type_t v20 = v80;
    uint64_t v100 = sub_100719D44(v37, v36, v101);
    id v19 = v97;
    sub_10096C8C0();
    unint64_t v38 = v98;
    swift_bridgeObjectRelease();
    sub_1000B6C28(v38);
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "Request to materialize content of itemID %s reason %s", (uint8_t *)v30, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v11 = v29;
    swift_slowDealloc();
  }
  else
  {
    sub_1000B6C28(a5);
    swift_release();
    sub_1000B6C28(a5);
  }

  (*(void (**)(char *, uint64_t))(v84 + 8))(v24, v85);
  if ((v83 | v82) == 2)
  {
    uint64_t v39 = (void *)swift_projectBox();
    uint64_t v40 = v20[12];
    double v41 = v81;
    double v42 = (char *)v81 + v40;
    uint64_t v43 = v20[16];
    uint64_t v44 = v20[20];
    uint64_t v45 = (char *)v39 + v40;
    uint64_t v46 = v39[1];
    *uint64_t v81 = *v39;
    v41[1] = v46;
    uint64_t v47 = sub_10096AE50();
    uint64_t v48 = *(void *)(v47 - 8);
    (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v42, v45, v47);
    *(void *)((char *)v41 + v43) = *(void *)((char *)v39 + v43);
    uint64_t v49 = *(void *)((char *)v39 + v44);
    *(void *)((char *)v41 + v44) = v49;
    (*(void (**)(char *, uint64_t))(v48 + 8))(v42, v47);
  }
  else
  {
    uint64_t v49 = 0;
  }
  uint64_t v50 = (uint64_t)v86;
  sub_10002B70C(v99 + qword_100B0B310, (uint64_t)v86, (uint64_t *)&unk_100AD63E0);
  uint64_t v51 = type metadata accessor for TelemetrySignposter(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 48))(v50, 1, v51) == 1)
  {
    sub_10002B770(v50, (uint64_t *)&unk_100AD63E0);
    uint64_t v52 = type metadata accessor for TelemetrySignpost(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v52 - 8) + 56))(v19, 1, 1, v52);
  }
  else
  {
    sub_10093EC7C(v49, (uint64_t)v19);
    sub_1000D3770(v50, type metadata accessor for TelemetrySignposter);
    uint64_t v53 = type metadata accessor for TelemetrySignpost(0);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v53 - 8) + 56))(v19, 0, 1, v53);
  }
  uint64_t v54 = (uint64_t)v19;
  uint64_t v55 = (uint64_t)v19;
  uint64_t v56 = v89;
  sub_10002B70C(v55, v89, (uint64_t *)&unk_100AD0DE0);
  unint64_t v57 = v88;
  uint64_t v58 = *(unsigned __int8 *)(v87 + 80);
  uint64_t v59 = (v58 + 48) & ~v58;
  uint64_t v87 = v58 | 7;
  unint64_t v60 = (v88 + v59 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v61 = (void *)swift_allocObject();
  uint64_t v86 = (char *)v11[72];
  v61[2] = v86;
  uint64_t v85 = v11[73];
  v61[3] = v85;
  uint64_t v84 = v11[74];
  v61[4] = v84;
  uint64_t v62 = v11[75];
  v61[5] = v62;
  sub_10001AE98(v56, (uint64_t)v61 + v59, (uint64_t *)&unk_100AD0DE0);
  uint64_t v63 = (void *)((char *)v61 + v60);
  uint64_t v64 = v91;
  uint64_t v65 = v94;
  void *v63 = v91;
  v63[1] = v65;
  sub_10002B70C(v54, v56, (uint64_t *)&unk_100AD0DE0);
  uint64_t v66 = (v58 + 56) & ~v58;
  unint64_t v83 = (v66 + v57 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v67 = (v66 + v57 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v88 = (v67 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v68 = (v67 + 31) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v69 = (void *)swift_allocObject();
  uint64_t v70 = v85;
  v69[2] = v86;
  v69[3] = v70;
  v69[4] = v84;
  v69[5] = v62;
  unint64_t v71 = v98;
  v69[6] = v98;
  sub_10001AE98(v56, (uint64_t)v69 + v66, (uint64_t *)&unk_100AD0DE0);
  v72 = (char *)v69 + v83;
  *(void *)v72 = v64;
  *((void *)v72 + 1) = v65;
  LOBYTE(v56) = v90 & 1;
  v72[16] = v90 & 1;
  *(void *)((char *)v69 + v67) = v99;
  uint64_t v73 = (char *)v69 + v88;
  uint64_t v75 = v95;
  uint64_t v74 = v96;
  *(void *)uint64_t v73 = v96;
  v73[8] = v92 & 1;
  *(void *)((char *)v69 + v68) = v75;
  unint64_t v76 = (char *)v69 + ((v68 + 15) & 0xFFFFFFFFFFFFFFF8);
  *(void *)unint64_t v76 = sub_1000D2544;
  *((void *)v76 + 1) = v61;
  v76[16] = v93 & 1;
  swift_retain();
  sub_1000CE628(v71);
  swift_retain();
  swift_retain();
  swift_retain();
  id v77 = v75;
  swift_retain();
  sub_1000BAEAC(v74, v56, 0, v71, (uint64_t)sub_1000D27C0, (uint64_t)v69);
  swift_release();
  swift_release();
  return sub_10002B770((uint64_t)v97, (uint64_t *)&unk_100AD0DE0);
}

uint64_t sub_1000B765C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v31 = a7;
  uint64_t v32 = a4;
  unint64_t v33 = a3;
  uint64_t v10 = sub_10002B7CC((uint64_t *)&unk_100AD0DE0);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v30 - v14;
  sub_100033BE8((uint64_t *)&unk_100ACB6B0);
  uint64_t v16 = sub_10096D510();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16);
  os_log_type_t v20 = (char *)&v30 - v19;
  uint64_t v21 = *(void *)(a5 - 8);
  __chkstk_darwin(v18);
  uint64_t v23 = (char *)&v30 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v20, a1, v16);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v23, v20, a5);
    sub_10002B70C(a2, (uint64_t)v13, (uint64_t *)&unk_100AD0DE0);
    uint64_t v25 = type metadata accessor for TelemetrySignpost(0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v25 - 8) + 48))(v13, 1, v25) == 1)
    {
      (*(void (**)(char *, uint64_t))(v21 + 8))(v23, a5);
      sub_10002B770((uint64_t)v13, (uint64_t *)&unk_100AD0DE0);
      return v33(a1);
    }
    os_log_type_t v27 = (const char *)sub_10093F3AC(a5, v31);
    sub_10093F510(v27, v28 & 1 | 0x40);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v23, a5);
    uint64_t v26 = (uint64_t)v13;
LABEL_8:
    sub_1000D3770(v26, type metadata accessor for TelemetrySignpost);
    return v33(a1);
  }
  (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
  sub_10002B70C(a2, (uint64_t)v15, (uint64_t *)&unk_100AD0DE0);
  uint64_t v24 = type metadata accessor for TelemetrySignpost(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v24 - 8) + 48))(v15, 1, v24) != 1)
  {
    sub_10093F510(0, 128);
    uint64_t v26 = (uint64_t)v15;
    goto LABEL_8;
  }
  sub_10002B770((uint64_t)v15, (uint64_t *)&unk_100AD0DE0);
  return v33(a1);
}

char *sub_1000B7A08(unint64_t a1, unint64_t a2, uint64_t a3, void (*a4)(void *), uint64_t a5, int a6, uint64_t **a7, void *a8, unsigned __int8 a9, char *a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  int v128 = a6;
  v125 = a4;
  uint64_t v126 = a5;
  uint64_t v127 = a3;
  v138 = *a7;
  uint64_t v17 = v138;
  uint64_t v18 = *a8;
  uint64_t v117 = sub_10096B7D0();
  uint64_t v116 = *(void *)(v117 - 8);
  uint64_t v19 = __chkstk_darwin(v117);
  uint64_t v113 = (char *)&v108 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v118 = a8;
  uint64_t v115 = *(void *)(v18 + 80);
  uint64_t v114 = *(void *)(v115 - 8);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v120 = (uint64_t)&v108 - v22;
  uint64_t v119 = a7;
  uint64_t v23 = v17[72];
  uint64_t v140 = *(void *)(v23 - 8);
  uint64_t v24 = __chkstk_darwin(v21);
  int v112 = (char *)&v108 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v121 = (char *)&v108 - v27;
  uint64_t v111 = v28;
  __chkstk_darwin(v26);
  uint64_t v30 = (char *)&v108 - v29;
  uint64_t v31 = sub_10002B7CC((uint64_t *)&unk_100AD0DE0);
  uint64_t v32 = __chkstk_darwin(v31 - 8);
  unint64_t v34 = (char *)&v108 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  uint64_t v123 = (uint64_t)&v108 - v35;
  sub_100033BE8((uint64_t *)&unk_100ACB6B0);
  uint64_t v137 = v23;
  uint64_t v36 = sub_10096D510();
  uint64_t v37 = *(void *)(v36 - 8);
  uint64_t v38 = __chkstk_darwin(v36);
  v135 = (char *)&v108 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = __chkstk_darwin(v38);
  double v42 = (uint64_t *)((char *)&v108 - v41);
  __chkstk_darwin(v40);
  uint64_t v44 = (char *)&v108 - v43;
  uint64_t v45 = sub_10096B480();
  uint64_t v133 = *(void *)(v45 - 8);
  uint64_t v134 = v45;
  __chkstk_darwin(v45);
  uint64_t v47 = (char *)&v108 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v48 = (id)fpfs_current_or_default_log();
  sub_10096B490();
  uint64_t v49 = *(void (**)(void *, char *, uint64_t))(v37 + 16);
  unint64_t v136 = a1;
  v139 = (void (*)(char *, char *, uint64_t))v49;
  v49(v44, (char *)a1, v36);
  sub_1000CE628(a2);
  sub_1000CE628(a2);
  uint64_t v50 = sub_10096B470();
  os_log_type_t v51 = sub_10096C5A0();
  uint64_t v132 = v50;
  int v122 = v51;
  BOOL v52 = os_log_type_enabled(v50, v51);
  uint64_t v131 = v42;
  if (v52)
  {
    uint64_t v53 = swift_slowAlloc();
    uint64_t v124 = v30;
    uint64_t v54 = v53;
    uint64_t v109 = swift_slowAlloc();
    uint64_t v142 = v109;
    *(_DWORD *)uint64_t v54 = 136315394;
    v139((char *)v42, v44, v36);
    uint64_t v55 = sub_10096BCC0();
    uint64_t v130 = v37;
    uint64_t v56 = v36;
    unint64_t v57 = a2;
    uint64_t v141 = sub_100719D44(v55, v58, &v142);
    sub_10096C8C0();
    swift_bridgeObjectRelease();
    uint64_t v110 = v34;
    v129 = *(void (**)(char *, uint64_t))(v130 + 8);
    v129(v44, v56);
    *(_WORD *)(v54 + 12) = 2080;
    unint64_t v59 = sub_1006A9894(a2, v137, v138[73], v138[74], v138[75]);
    unint64_t v61 = v60;
    sub_1000B6C28(v57);
    uint64_t v62 = v59;
    a2 = v57;
    uint64_t v36 = v56;
    uint64_t v37 = v130;
    uint64_t v141 = sub_100719D44(v62, v61, &v142);
    double v42 = v131;
    sub_10096C8C0();
    unint64_t v34 = v110;
    swift_bridgeObjectRelease();
    sub_1000B6C28(a2);
    uint64_t v63 = v132;
    _os_log_impl((void *)&_mh_execute_header, v132, (os_log_type_t)v122, "create fault completed with result %s request %s", (uint8_t *)v54, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v30 = v124;
    swift_slowDealloc();
  }
  else
  {
    sub_1000B6C28(a2);
    v129 = *(void (**)(char *, uint64_t))(v37 + 8);
    v129(v44, v36);
    sub_1000B6C28(a2);
  }
  (*(void (**)(char *, uint64_t))(v133 + 8))(v47, v134);
  uint64_t v64 = (uint64_t *)v135;
  v139(v135, (char *)v136, v36);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v65 = *v64;
    uint64_t v66 = v123;
    sub_10002B70C(v127, v123, (uint64_t *)&unk_100AD0DE0);
    uint64_t v67 = type metadata accessor for TelemetrySignpost(0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v67 - 8) + 48))(v66, 1, v67) == 1)
    {
      sub_10002B770(v66, (uint64_t *)&unk_100AD0DE0);
    }
    else
    {
      sub_10093F510(0, 128);
      sub_1000D3770(v66, type metadata accessor for TelemetrySignpost);
    }
    v72 = v125;
    *double v42 = v65;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    v72(v42);
    swift_errorRelease();
    return (char *)((uint64_t (*)(void *, uint64_t))v129)(v42, v36);
  }
  v139 = (void (*)(char *, char *, uint64_t))v36;
  unint64_t v136 = a2;
  unint64_t v68 = *(NSObject **)(v140 + 32);
  uint64_t v69 = v137;
  ((void (*)(char *, uint64_t *, uint64_t))v68)(v30, v64, v137);
  uint64_t v70 = v138[74];
  if (FileItem.isDataless.getter(v69, v70) & 1) != 0 || (v128)
  {
    uint64_t v130 = v37;
    int v74 = a9;
    uint64_t v134 = a12;
    uint64_t v75 = a10;
    uint64_t v132 = v68;
    uint64_t v133 = a11;
    unint64_t v76 = *(void (**)(char *, char *, uint64_t))(v140 + 16);
    uint64_t v124 = v30;
    v76(v121, v30, v69);
    v135 = a10;
    if (v128)
    {
      id v77 = *(void (**)(char *, uint64_t))(v140 + 8);
      v77(v121, v69);
      if ((a9 & 1) == 0)
      {
LABEL_22:
        LODWORD(v131) = v74;
        v139 = (void (*)(char *, char *, uint64_t))v77;
        uint64_t result = (char *)[v75 totalUnitCount];
        if (__OFADD__(result, 1))
        {
          __break(1u);
        }
        else
        {
          LODWORD(v130) = a13;
          [v75 setTotalUnitCount:result + 1];
          uint64_t v85 = v124;
          (*(void (**)(uint64_t, uint64_t))(v70 + 64))(v69, v70);
          uint64_t v86 = v112;
          v76(v112, v85, v69);
          unint64_t v87 = (*(unsigned __int8 *)(v140 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v140 + 80);
          unint64_t v88 = (v111 + v87 + 7) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v89 = (v88 + 23) & 0xFFFFFFFFFFFFFFF8;
          v129 = (void (*)(char *, uint64_t))((v89 + 15) & 0xFFFFFFFFFFFFFFF8);
          unint64_t v90 = (v89 + 31) & 0xFFFFFFFFFFFFFFF8;
          uint64_t v91 = swift_allocObject();
          *(void *)(v91 + 16) = v69;
          int v92 = v138;
          *(void *)(v91 + 24) = v138[73];
          *(void *)(v91 + 32) = v70;
          *(void *)(v91 + 40) = v92[75];
          int v93 = v86;
          uint64_t v94 = v69;
          ((void (*)(unint64_t, char *, uint64_t))v132)(v91 + v87, v93, v69);
          BOOL v95 = (void *)(v91 + v88);
          uint64_t v96 = v134;
          *BOOL v95 = v133;
          v95[1] = v96;
          *(void *)(v91 + v89) = v119;
          os_log_t v97 = (char *)v129 + v91;
          uint64_t v99 = v135;
          unint64_t v98 = v136;
          *(void *)os_log_t v97 = v136;
          v97[8] = v130 & 1;
          uint64_t v100 = (char *)(v91 + v90);
          *(void *)uint64_t v100 = v118;
          v100[8] = v128 & 1;
          v100[9] = v131 & 1;
          *(void *)(v91 + ((v90 + 17) & 0xFFFFFFFFFFFFFFF8)) = v99;
          sub_1000CE628(v98);
          swift_retain();
          swift_retain();
          swift_retain();
          id v101 = v99;
          uint64_t v102 = (uint64_t)v113;
          sub_1000B5A94();
          uint64_t v103 = v120;
          id v104 = sub_1000B5C20(v120, v98, v102, (uint64_t)sub_1000D2CB8, v91);
          swift_release();
          (*(void (**)(uint64_t, uint64_t))(v116 + 8))(v102, v117);
          (*(void (**)(uint64_t, uint64_t))(v114 + 8))(v103, v115);
          [v101 addChild:v104 withPendingUnitCount:1];

          return (char *)((uint64_t (*)(char *, uint64_t))v139)(v124, v94);
        }
        return result;
      }
    }
    else
    {
      unint64_t v83 = v121;
      char v84 = FileItem.isDataless.getter(v69, v70);
      id v77 = *(void (**)(char *, uint64_t))(v140 + 8);
      v77(v83, v69);
      if (v84)
      {
        sub_1000B6E14(v118, 1, a9 & 1, 1, v136, v135, v133, v134);
        return (char *)((uint64_t (*)(char *, uint64_t))v77)(v124, v69);
      }
      uint64_t v75 = v135;
      int v74 = a9;
      if ((a9 & 1) == 0) {
        goto LABEL_22;
      }
    }
    if (FileItem.kind.getter(v69, v70) != 1)
    {
      uint64_t v105 = (char *)v131;
      uint64_t v106 = v124;
      v76((char *)v131, v124, v69);
      uint64_t v107 = (uint64_t (*)(void, void))v139;
      swift_storeEnumTagMultiPayload();
      ((void (*)(char *))v133)(v105);
      v129(v105, (uint64_t)v107);
      return (char *)((uint64_t (*)(char *, uint64_t))v77)(v106, v69);
    }
    goto LABEL_22;
  }
  sub_10002B70C(v127, (uint64_t)v34, (uint64_t *)&unk_100AD0DE0);
  uint64_t v71 = type metadata accessor for TelemetrySignpost(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v71 - 8) + 48))(v34, 1, v71) == 1)
  {
    sub_10002B770((uint64_t)v34, (uint64_t *)&unk_100AD0DE0);
  }
  else
  {
    unint64_t v78 = (const char *)sub_10093F3AC(v69, v70);
    sub_10093F510(v78, v79 & 1);
    sub_1000D3770((uint64_t)v34, type metadata accessor for TelemetrySignpost);
  }
  uint64_t v80 = (char *)v131;
  uint64_t v81 = v140;
  (*(void (**)(void *, char *, uint64_t))(v140 + 16))(v131, v30, v69);
  int v82 = (uint64_t (*)(void, void))v139;
  swift_storeEnumTagMultiPayload();
  v125(v80);
  v129(v80, (uint64_t)v82);
  return (char *)(*(uint64_t (**)(char *, uint64_t))(v81 + 8))(v30, v69);
}

uint64_t sub_1000B8770(char *a1, uint64_t a2, void (*a3)(char *), uint64_t a4, void *a5, NSObject *a6, int a7, void *a8, unsigned __int8 a9, unsigned __int8 a10, void *a11)
{
  LODWORD(v110) = a7;
  os_log_t v111 = a6;
  uint64_t v118 = a3;
  uint64_t v119 = a4;
  uint64_t v123 = a2;
  uint64_t v124 = a1;
  uint64_t v107 = (void *)*a5;
  uint64_t v13 = *a8;
  uint64_t v14 = v107[72];
  uint64_t v117 = v107[74];
  v126[0] = swift_getAssociatedTypeWitness();
  v126[1] = swift_getAssociatedTypeWitness();
  v126[2] = swift_getAssociatedConformanceWitness();
  v126[3] = swift_getAssociatedConformanceWitness();
  uint64_t v106 = type metadata accessor for FileItemVersion();
  uint64_t v109 = sub_10096C890();
  uint64_t v108 = *(void *)(v109 - 8);
  __chkstk_darwin(v109);
  uint64_t v16 = (char *)&v92 - v15;
  sub_100033BE8((uint64_t *)&unk_100ACB6B0);
  uint64_t v17 = sub_10096D510();
  uint64_t v114 = *(char **)(v17 - 8);
  uint64_t v115 = (void (*)(void, void))v17;
  uint64_t v18 = __chkstk_darwin(v17);
  int v112 = a8;
  uint64_t v113 = (char *)&v92 - v19;
  uint64_t v20 = *(void *)(v13 + 80);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = __chkstk_darwin(v18);
  uint64_t v24 = (char *)&v92 - v23;
  uint64_t v122 = *(void *)(v14 - 8);
  uint64_t v25 = *(void *)(v122 + 64);
  uint64_t v26 = __chkstk_darwin(v22);
  uint64_t v27 = __chkstk_darwin(v26);
  uint64_t v29 = (char *)&v92 - v28;
  __chkstk_darwin(v27);
  uint64_t v105 = (char *)&v92 - v30;
  uint64_t v31 = sub_10096B480();
  uint64_t v32 = __chkstk_darwin(v31);
  unint64_t v34 = (char *)&v92 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = __chkstk_darwin(v32);
  uint64_t v116 = v21;
  uint64_t v120 = v37;
  uint64_t v121 = v35;
  if (v124)
  {
    uint64_t v38 = v24;
    uint64_t v39 = v20;
    uint64_t v40 = v124;
    swift_errorRetain();
    id v41 = (id)fpfs_current_or_default_log();
    sub_10096B490();
    uint64_t v42 = v122;
    (*(void (**)(char *, uint64_t, uint64_t))(v122 + 16))(v29, v123, v14);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v43 = sub_10096B470();
    os_log_type_t v44 = sub_10096C5B0();
    if (os_log_type_enabled(v43, v44))
    {
      uint64_t v45 = swift_slowAlloc();
      int v112 = (void *)swift_slowAlloc();
      uint64_t v123 = swift_slowAlloc();
      v126[0] = v123;
      *(_DWORD *)uint64_t v45 = 136315394;
      uint64_t v110 = v45 + 4;
      os_log_t v111 = v43;
      (*(void (**)(uint64_t, uint64_t))(v117 + 64))(v14, v117);
      swift_getAssociatedConformanceWitness();
      uint64_t v46 = sub_10096D220();
      unint64_t v48 = v47;
      (*(void (**)(char *, uint64_t))(v116 + 8))(v38, v39);
      uint64_t v125 = sub_100719D44(v46, v48, v126);
      sub_10096C8C0();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v42 + 8))(v29, v14);
      *(_WORD *)(v45 + 12) = 2112;
      uint64_t v49 = (void *)sub_10096ABE0();
      id v50 = objc_msgSend(v49, "fp_prettyDescription");

      uint64_t v40 = v124;
      uint64_t v125 = (uint64_t)v50;
      sub_10096C8C0();
      *int v112 = v50;
      swift_errorRelease();
      swift_errorRelease();
      os_log_t v51 = v111;
      _os_log_impl((void *)&_mh_execute_header, v111, v44, "requestMaterialization(%s) failed for vfsItemID: %@", (uint8_t *)v45, 0x16u);
      sub_10002B7CC((uint64_t *)&unk_100ACCBC0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v42 + 8))(v29, v14);
      swift_errorRelease();
      swift_errorRelease();
    }
    (*(void (**)(char *, uint64_t))(v120 + 8))(v34, v121);
    unint64_t v68 = v113;
    *(void *)uint64_t v113 = v40;
    uint64_t v69 = v115;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    v118(v68);
    swift_errorRelease();
    return (*((uint64_t (**)(char *, void))v114 + 1))(v68, v69);
  }
  else
  {
    uint64_t v113 = (char *)&v92 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v124 = v16;
    id v104 = a5;
    uint64_t v52 = v20;
    uint64_t v53 = (char *)&v92 - v36;
    uint64_t v103 = a11;
    int v102 = a10;
    int v101 = a9;
    id v54 = (id)fpfs_current_or_default_log();
    sub_10096B490();
    uint64_t v55 = v122;
    uint64_t v56 = *(void (**)(char *, uint64_t, uint64_t))(v122 + 16);
    unint64_t v57 = v105;
    uint64_t v100 = v122 + 16;
    uint64_t v99 = v56;
    v56(v105, v123, v14);
    uint64_t v114 = v53;
    unint64_t v58 = sub_10096B470();
    os_log_type_t v59 = sub_10096C5A0();
    int v60 = v59;
    BOOL v61 = os_log_type_enabled(v58, v59);
    uint64_t v62 = v117;
    if (v61)
    {
      os_log_t v96 = v58;
      uint64_t v63 = (uint8_t *)swift_slowAlloc();
      uint64_t v95 = swift_slowAlloc();
      v126[0] = v95;
      uint64_t v94 = v63;
      *(_DWORD *)uint64_t v63 = 136315138;
      int v92 = v63 + 4;
      uint64_t v115 = *(void (**)(void, void))(v62 + 64);
      int v93 = v60;
      v115(v14, v62);
      swift_getAssociatedConformanceWitness();
      uint64_t v64 = sub_10096D220();
      unint64_t v66 = v65;
      (*(void (**)(char *, uint64_t))(v116 + 8))(v24, v52);
      uint64_t v125 = sub_100719D44(v64, v66, v126);
      uint64_t v55 = v122;
      sub_10096C8C0();
      uint64_t v62 = v117;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v55 + 8))(v57, v14);
      os_log_t v67 = v96;
      _os_log_impl((void *)&_mh_execute_header, v96, (os_log_type_t)v93, "requestMaterialization completed for vfsItemID %s", v94, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v120 + 8))(v114, v121);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v55 + 8))(v57, v14);

      (*(void (**)(char *, uint64_t))(v120 + 8))(v114, v121);
      uint64_t v115 = *(void (**)(void, void))(v62 + 64);
    }
    os_log_t v97 = v24;
    uint64_t v98 = v52;
    uint64_t v121 = *(void *)(v104[4] + 16);
    swift_retain();
    uint64_t v71 = v123;
    v115(v14, v62);
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v106 - 8) + 56))(v124, 1, 1);
    uint64_t v122 = sub_1006C8200();
    v72 = v113;
    v99(v113, v71, v14);
    unint64_t v73 = (*(unsigned __int8 *)(v55 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80);
    unint64_t v74 = (v25 + v73 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v75 = v62;
    unint64_t v76 = (v74 + 23) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v123 = (v76 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v77 = (v76 + 31) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v78 = (char *)swift_allocObject();
    *((void *)v78 + 2) = v14;
    char v79 = v107;
    *((void *)v78 + 3) = v107[73];
    *((void *)v78 + 4) = v75;
    *((void *)v78 + 5) = v79[75];
    (*(void (**)(char *, char *, uint64_t))(v55 + 32))(&v78[v73], v72, v14);
    uint64_t v80 = &v78[v74];
    uint64_t v81 = v119;
    *(void *)uint64_t v80 = v118;
    *((void *)v80 + 1) = v81;
    os_log_t v83 = v111;
    int v82 = v112;
    *(void *)&v78[v76] = v111;
    char v84 = &v78[v123];
    *(void *)char v84 = v104;
    v84[8] = v110 & 1;
    uint64_t v85 = &v78[v77];
    *(void *)uint64_t v85 = v82;
    v85[8] = v101 & 1;
    v85[9] = v102 & 1;
    uint64_t v86 = v103;
    *(void *)&v78[(v77 + 17) & 0xFFFFFFFFFFFFFFF8] = v103;
    unint64_t v87 = *(void (**)(char *, char *, uint64_t, void, void (*)(uint64_t), char *))(*(void *)v121 + 136);
    swift_retain();
    sub_1000CE628((unint64_t)v83);
    swift_retain();
    swift_retain();
    id v88 = v86;
    unint64_t v89 = v97;
    unint64_t v90 = v124;
    uint64_t v91 = (void *)v122;
    v87(v97, v124, v122, 0, sub_1000D2E80, v78);
    swift_release();
    swift_release();

    (*(void (**)(char *, uint64_t))(v108 + 8))(v90, v109);
    return (*(uint64_t (**)(char *, uint64_t))(v116 + 8))(v89, v98);
  }
}

void sub_1000B942C(uint64_t a1, uint64_t a2, void (*a3)(char *), uint64_t a4, unint64_t a5, uint64_t *a6, int a7, uint8_t **a8, unsigned __int8 a9, unsigned __int8 a10, void *a11)
{
  int v156 = a7;
  v163 = (uint8_t *)a5;
  v174 = a3;
  uint64_t v175 = a4;
  uint64_t v178 = a2;
  uint64_t v171 = *a6;
  v162 = *a8;
  uint64_t v13 = v162;
  v158 = a6;
  uint64_t v14 = *(void *)(v171 + 576);
  sub_100033BE8((uint64_t *)&unk_100ACB6B0);
  uint64_t v15 = sub_10096D510();
  uint64_t v172 = *(void *)(v15 - 8);
  v173 = (void *)v15;
  uint64_t v16 = __chkstk_darwin(v15);
  v161 = (char *)&v148 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v16);
  v170 = (char *)&v148 - v19;
  v157 = a8;
  uint64_t v169 = *((void *)v13 + 10);
  uint64_t v168 = *(void *)(v169 - 8);
  uint64_t v20 = __chkstk_darwin(v18);
  v167 = (char *)&v148 - v21;
  uint64_t v22 = *(void *)(v14 - 8);
  uint64_t v23 = *(void *)(v22 + 64);
  uint64_t v24 = __chkstk_darwin(v20);
  v164 = (uint8_t *)&v148 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __chkstk_darwin(v24);
  v155 = (char *)&v148 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  os_log_t v159 = (os_log_t)((char *)&v148 - v28);
  uint64_t v29 = __chkstk_darwin(v27);
  v166 = (uint64_t *)((char *)&v148 - v30);
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v33 = (char *)&v148 - v32;
  __chkstk_darwin(v31);
  uint64_t v35 = (char *)&v148 - v34;
  uint64_t v36 = sub_10096B480();
  uint64_t v37 = *(void *)(v36 - 8);
  uint64_t v176 = v36;
  uint64_t v177 = v37;
  uint64_t v38 = __chkstk_darwin(v36);
  os_log_t v165 = (os_log_t)((char *)&v148 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v40 = __chkstk_darwin(v38);
  v160 = (char *)&v148 - v41;
  uint64_t v42 = __chkstk_darwin(v40);
  os_log_type_t v44 = (char *)&v148 - v43;
  __chkstk_darwin(v42);
  uint64_t v46 = (char *)&v148 - v45;
  sub_10096C890();
  uint64_t v47 = sub_10096D510();
  __chkstk_darwin(v47);
  uint64_t v49 = (uint64_t *)((char *)&v148 - v48);
  (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))((char *)&v148 - v48, a1, v47);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v51 = *v49;
    id v52 = (id)fpfs_current_or_default_log();
    sub_10096B490();
    (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v35, v178, v14);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v53 = sub_10096B470();
    os_log_type_t v54 = sub_10096C5A0();
    uint64_t v55 = v14;
    if (os_log_type_enabled(v53, v54))
    {
      uint64_t v56 = swift_slowAlloc();
      v166 = (void *)swift_slowAlloc();
      uint64_t v178 = swift_slowAlloc();
      os_log_t v181 = (os_log_t)v178;
      *(_DWORD *)uint64_t v56 = 136315394;
      v164 = (uint8_t *)(v56 + 4);
      os_log_t v165 = v53;
      unint64_t v57 = v167;
      (*(void (**)(uint64_t, void))(*(void *)(v171 + 592) + 64))(v55, *(void *)(v171 + 592));
      uint64_t v171 = v55;
      uint64_t v58 = v169;
      swift_getAssociatedConformanceWitness();
      uint64_t v59 = sub_10096D220();
      unint64_t v61 = v60;
      (*(void (**)(char *, uint64_t))(v168 + 8))(v57, v58);
      uint64_t v180 = sub_100719D44(v59, v61, (uint64_t *)&v181);
      sub_10096C8C0();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v35, v171);
      *(_WORD *)(v56 + 12) = 2112;
      swift_getErrorValue();
      id v62 = Error.prettyDescription.getter(v179);
      uint64_t v180 = (uint64_t)v62;
      sub_10096C8C0();
      void *v166 = v62;
      swift_errorRelease();
      swift_errorRelease();
      uint64_t v53 = v165;
      _os_log_impl((void *)&_mh_execute_header, v165, v54, "requestMaterialization(%s) post-materialization lookup returned an error %@", (uint8_t *)v56, 0x16u);
      sub_10002B7CC((uint64_t *)&unk_100ACCBC0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v22 + 8))(v35, v14);
      swift_errorRelease();
      swift_errorRelease();
    }

    (*(void (**)(char *, uint64_t))(v177 + 8))(v46, v176);
    uint64_t v79 = v172;
    unint64_t v78 = v173;
    uint64_t v80 = v170;
    *(void *)v170 = v51;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    v174(v80);
    swift_errorRelease();
    (*(void (**)(char *, void *))(v79 + 8))(v80, v78);
    return;
  }
  uint64_t v63 = v14;
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v22 + 48))(v49, 1, v14) == 1)
  {
    id v64 = (id)fpfs_current_or_default_log();
    sub_10096B490();
    (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v33, v178, v14);
    unint64_t v65 = sub_10096B470();
    os_log_type_t v66 = sub_10096C5A0();
    int v67 = v66;
    if (os_log_type_enabled(v65, v66))
    {
      LODWORD(v166) = v67;
      unint64_t v68 = (uint8_t *)swift_slowAlloc();
      os_log_t v165 = (os_log_t)swift_slowAlloc();
      os_log_t v181 = v165;
      v164 = v68;
      *(_DWORD *)unint64_t v68 = 136315138;
      v163 = v68 + 12;
      v160 = (char *)(v68 + 4);
      uint64_t v69 = *(void *)(v171 + 592);
      v170 = *(char **)(v69 + 64);
      uint64_t v70 = (uint64_t)v167;
      ((void (*)(uint64_t, uint64_t))v170)(v63, v69);
      uint64_t v71 = v169;
      swift_getAssociatedConformanceWitness();
      uint64_t v72 = sub_10096D220();
      uint64_t v171 = v63;
      unint64_t v74 = v73;
      os_log_t v159 = v65;
      uint64_t v75 = v168;
      (*(void (**)(uint64_t, uint64_t))(v168 + 8))(v70, v71);
      uint64_t v180 = sub_100719D44(v72, v74, (uint64_t *)&v181);
      sub_10096C8C0();
      uint64_t v76 = v171;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v33, v76);
      os_log_t v77 = v159;
      _os_log_impl((void *)&_mh_execute_header, v159, (os_log_type_t)v166, "requestMaterialization(%s) post-materialization lookup returned no item", v164, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v177 + 8))(v44, v176);
      ((void (*)(uint64_t, uint64_t))v170)(v76, v69);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v22 + 8))(v33, v14);

      (*(void (**)(char *, uint64_t))(v177 + 8))(v44, v176);
      uint64_t v75 = v168;
      uint64_t v71 = v169;
      uint64_t v70 = (uint64_t)v167;
      (*(void (**)(uint64_t, void))(*(void *)(v171 + 592) + 64))(v14, *(void *)(v171 + 592));
    }
    NSFileProviderItemIdentifier v90 = sub_1006B72B0(v70, 1, v71, *((void *)v162 + 12));
    (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v70, v71);
    id v91 = (id)FPItemNotFoundError();

    if (v91)
    {
      int v92 = v161;
      *(void *)v161 = v91;
      int v93 = v173;
      swift_storeEnumTagMultiPayload();
      v174(v92);
      (*(void (**)(char *, void *))(v172 + 8))(v92, v93);
    }
    else
    {
      __break(1u);
    }
    return;
  }
  uint64_t v81 = v22;
  uint64_t v82 = v14;
  os_log_t v83 = *(uint8_t **)(v22 + 32);
  char v84 = v166;
  ((void (*)(void *, uint64_t *, uint64_t))v83)(v166, v49, v14);
  uint64_t v85 = *(void *)(v171 + 584);
  uint64_t v86 = *(void *)(v171 + 592);
  uint64_t v87 = *(void *)(v171 + 600);
  id v88 = sub_1006A93D4((unint64_t)v163);
  if (v88)
  {
    unint64_t v89 = v88;
    [v88 requestedExtent];

LABEL_17:
    uint64_t v113 = v86;
    id v114 = (id)fpfs_current_or_default_log();
    sub_10096B490();
    uint64_t v115 = v164;
    uint64_t v171 = *(void *)(v81 + 16);
    ((void (*)(uint8_t *, void *, uint64_t))v171)(v164, v84, v82);
    uint64_t v116 = sub_10096B470();
    os_log_type_t v117 = sub_10096C5A0();
    uint64_t v118 = v82;
    if (os_log_type_enabled(v116, v117))
    {
      uint64_t v119 = (uint8_t *)swift_slowAlloc();
      uint64_t v120 = swift_slowAlloc();
      v163 = (uint8_t *)v120;
      v162 = v119;
      *(_DWORD *)uint64_t v119 = 136315138;
      os_log_t v181 = (os_log_t)v120;
      v161 = (char *)(v119 + 4);
      uint64_t v121 = v113;
      uint64_t v122 = *(void (**)(uint64_t, uint64_t))(v113 + 64);
      uint64_t v123 = v167;
      v122(v118, v121);
      uint64_t v124 = v169;
      swift_getAssociatedConformanceWitness();
      uint64_t v125 = sub_10096D220();
      unint64_t v127 = v126;
      (*(void (**)(char *, uint64_t))(v168 + 8))(v123, v124);
      uint64_t v180 = sub_100719D44(v125, v127, (uint64_t *)&v181);
      sub_10096C8C0();
      swift_bridgeObjectRelease();
      int v128 = *(void (**)(uint8_t *, uint64_t))(v81 + 8);
      v128(v164, v118);
      _os_log_impl((void *)&_mh_execute_header, v116, v117, "requestMaterialization(%s) post-materialization lookup succeeded", v162, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      int v128 = *(void (**)(uint8_t *, uint64_t))(v81 + 8);
      v128(v115, v118);
    }

    (*(void (**)(os_log_t, uint64_t))(v177 + 8))(v165, v176);
    v129 = v174;
    uint64_t v130 = v173;
    uint64_t v131 = v170;
    ((void (*)(char *, uint64_t, uint64_t))v171)(v170, v178, v118);
    swift_storeEnumTagMultiPayload();
    v129(v131);
    (*(void (**)(char *, void *))(v172 + 8))(v131, v130);
    v128((uint8_t *)v166, v118);
    return;
  }
  if ((FileItem.isDataless.getter(v82, v86) & 1) == 0) {
    goto LABEL_17;
  }
  uint64_t v171 = v87;
  uint64_t v172 = v85;
  v173 = a11;
  LODWORD(v170) = a10;
  LODWORD(v165) = a9;
  id v94 = (id)fpfs_current_or_default_log();
  uint64_t v95 = v160;
  sub_10096B490();
  uint64_t v178 = v81;
  os_log_t v96 = *(char **)(v81 + 16);
  os_log_t v97 = v159;
  v164 = (uint8_t *)(v81 + 16);
  v161 = v96;
  ((void (*)(os_log_t, void *, uint64_t))v96)(v159, v84, v82);
  uint64_t v98 = sub_10096B470();
  os_log_type_t v99 = sub_10096C5A0();
  int v100 = v99;
  BOOL v101 = os_log_type_enabled(v98, v99);
  v162 = v83;
  if (v101)
  {
    uint64_t v102 = swift_slowAlloc();
    int v151 = v100;
    uint64_t v103 = (uint8_t *)v102;
    uint64_t v152 = swift_slowAlloc();
    os_log_t v181 = (os_log_t)v152;
    v150 = v103;
    *(_DWORD *)uint64_t v103 = 136315138;
    uint64_t v154 = (uint64_t)(v103 + 4);
    v153 = *(void (**)(uint64_t, uint64_t))(v86 + 64);
    id v104 = v167;
    os_log_t v149 = v98;
    v153(v82, v86);
    uint64_t v105 = v169;
    swift_getAssociatedConformanceWitness();
    uint64_t v106 = sub_10096D220();
    unint64_t v108 = v107;
    (*(void (**)(char *, uint64_t))(v168 + 8))(v104, v105);
    uint64_t v180 = sub_100719D44(v106, v108, (uint64_t *)&v181);
    sub_10096C8C0();
    swift_bridgeObjectRelease();
    uint64_t v109 = *(NSObject **)(v178 + 8);
    uint64_t v154 = (v178 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    os_log_t v110 = v159;
    os_log_t v159 = v109;
    ((void (*)(os_log_t, uint64_t))v109)(v110, v82);
    os_log_t v111 = v149;
    _os_log_impl((void *)&_mh_execute_header, v149, (os_log_type_t)v151, "requestMaterialization(%s) post-materialization lookup returned a dataless item - force ingestion", v150, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v177 + 8))(v160, v176);
    int v112 = v153;
  }
  else
  {
    uint64_t v132 = *(NSObject **)(v178 + 8);
    uint64_t v154 = (v178 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    os_log_t v159 = v132;
    ((void (*)(os_log_t, uint64_t))v132)(v97, v82);

    (*(void (**)(char *, uint64_t))(v177 + 8))(v95, v176);
    int v112 = *(void (**)(uint64_t, uint64_t))(v86 + 64);
  }
  char v133 = v156;
  uint64_t v134 = v166;
  uint64_t v135 = (uint64_t)v167;
  v112(v82, v86);
  uint64_t v136 = v86;
  uint64_t v137 = v155;
  ((void (*)(char *, void *, uint64_t))v161)(v155, v134, v82);
  unint64_t v138 = (*(unsigned __int8 *)(v178 + 80) + 112) & ~(unint64_t)*(unsigned __int8 *)(v178 + 80);
  uint64_t v139 = swift_allocObject();
  uint64_t v140 = v172;
  *(void *)(v139 + 16) = v82;
  *(void *)(v139 + 24) = v140;
  uint64_t v141 = v171;
  *(void *)(v139 + 32) = v136;
  *(void *)(v139 + 40) = v141;
  uint64_t v142 = v175;
  *(void *)(v139 + 48) = v174;
  *(void *)(v139 + 56) = v142;
  *(unsigned char *)(v139 + 64) = v133 & 1;
  v143 = v157;
  *(void *)(v139 + 72) = v158;
  *(void *)(v139 + 80) = v143;
  *(unsigned char *)(v139 + 88) = v165 & 1;
  *(unsigned char *)(v139 + 89) = v170 & 1;
  unint64_t v144 = v139 + v138;
  unint64_t v145 = (unint64_t)v163;
  v146 = v173;
  *(void *)(v139 + 96) = v163;
  *(void *)(v139 + 104) = v146;
  ((void (*)(unint64_t, char *, uint64_t))v162)(v144, v137, v82);
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1000CE628(v145);
  id v147 = v146;
  sub_1000B0260(v135, v145, (uint64_t)sub_1000D303C, v139);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v168 + 8))(v135, v169);
  ((void (*)(void *, uint64_t))v159)(v166, v82);
}

uint64_t sub_1000BA754(uint64_t a1, void (*a2)(uint64_t *), uint64_t a3, int a4, uint64_t *a5, uint64_t *a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  LODWORD(v86) = a8;
  LODWORD(v85) = a7;
  LODWORD(v84) = a4;
  id v88 = a2;
  uint64_t v89 = a3;
  uint64_t v79 = *a5;
  uint64_t v13 = v79;
  uint64_t v14 = *a6;
  uint64_t v15 = sub_10096A630();
  __chkstk_darwin(v15 - 8);
  uint64_t v87 = (char *)&v67 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10096A650();
  uint64_t v82 = *(void *)(v17 - 8);
  uint64_t v83 = v17;
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v67 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = *(void *)(v14 + 80);
  uint64_t v78 = *(void *)(v21 - 8);
  uint64_t v22 = __chkstk_darwin(v18);
  uint64_t v24 = (char *)&v67 - v23;
  uint64_t v25 = *(void *)(v13 + 576);
  uint64_t v81 = *(void *)(v25 - 8);
  __chkstk_darwin(v22);
  uint64_t v27 = (char *)&v67 - v26;
  uint64_t v28 = sub_10096B480();
  uint64_t v80 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  uint64_t v30 = (char *)&v67 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100033BE8((uint64_t *)&unk_100ACB6B0);
  uint64_t v31 = sub_10096D510();
  __chkstk_darwin(v31);
  uint64_t v35 = (uint64_t *)((char *)&v67 - v34);
  if (a1)
  {
    *uint64_t v35 = a1;
    uint64_t v36 = v35;
    uint64_t v37 = v33;
    uint64_t v38 = v32;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    v88(v36);
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v38 + 8))(v36, v37);
  }
  else
  {
    unint64_t v74 = v24;
    uint64_t v75 = v21;
    uint64_t v76 = v28;
    os_log_t v77 = v20;
    uint64_t v41 = v81;
    uint64_t v40 = v82;
    uint64_t v42 = v83;
    if (v84)
    {
      return sub_1000B6E14(a6, v85 & 1, v86 & 1, 0, a9, a10, v88, v89);
    }
    else
    {
      unint64_t v73 = v35;
      uint64_t v84 = v33;
      uint64_t v85 = v32;
      id v43 = (id)fpfs_current_or_default_log();
      sub_10096B490();
      os_log_type_t v44 = *(void (**)(char *, uint64_t, uint64_t))(v41 + 16);
      uint64_t v86 = v27;
      v44(v27, a11, v25);
      uint64_t v45 = sub_10096B470();
      os_log_type_t v46 = sub_10096C5A0();
      int v72 = v46;
      BOOL v47 = os_log_type_enabled(v45, v46);
      uint64_t v48 = v42;
      uint64_t v49 = v40;
      uint64_t v50 = v77;
      uint64_t v51 = v80;
      if (v47)
      {
        os_log_t v70 = v45;
        id v52 = (uint8_t *)swift_slowAlloc();
        uint64_t v53 = swift_slowAlloc();
        uint64_t v69 = v53;
        unint64_t v68 = v52;
        *(_DWORD *)id v52 = 136315138;
        uint64_t v91 = v53;
        int v67 = v52 + 4;
        uint64_t v71 = v30;
        uint64_t v54 = v48;
        uint64_t v55 = v49;
        uint64_t v56 = v74;
        (*(void (**)(uint64_t, void))(*(void *)(v79 + 592) + 64))(v25, *(void *)(v79 + 592));
        uint64_t v57 = v75;
        swift_getAssociatedConformanceWitness();
        uint64_t v58 = sub_10096D220();
        unint64_t v60 = v59;
        unint64_t v61 = v56;
        uint64_t v49 = v55;
        uint64_t v48 = v54;
        uint64_t v50 = v77;
        (*(void (**)(char *, uint64_t))(v78 + 8))(v61, v57);
        uint64_t v90 = sub_100719D44(v58, v60, &v91);
        sub_10096C8C0();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v41 + 8))(v86, v25);
        os_log_t v62 = v70;
        _os_log_impl((void *)&_mh_execute_header, v70, (os_log_type_t)v72, "requestMaterialization(%s) post-materialization retry failed", v68, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v51 + 8))(v71, v76);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v41 + 8))(v86, v25);

        (*(void (**)(char *, uint64_t))(v51 + 8))(v30, v76);
      }
      uint64_t v63 = v88;
      sub_10096A590();
      sub_100042898((uint64_t)_swiftEmptyArrayStorage);
      sub_1000278B4((unint64_t *)&qword_100ACB680, (void (*)(uint64_t))&type metadata accessor for CocoaError);
      sub_10096ABD0();
      uint64_t v64 = sub_10096A4D0();
      (*(void (**)(char *, uint64_t))(v49 + 8))(v50, v48);
      unint64_t v65 = v73;
      *unint64_t v73 = v64;
      uint64_t v66 = v84;
      swift_storeEnumTagMultiPayload();
      v63(v65);
      return (*(uint64_t (**)(uint64_t *, uint64_t))(v85 + 8))(v65, v66);
    }
  }
}

uint64_t sub_1000BAEAC(uint64_t a1, char a2, int a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  long long v17 = *(_OWORD *)(*(void *)v6 + 592);
  long long v18 = *(_OWORD *)(*(void *)v6 + 576);
  id v13 = [objc_allocWithZone((Class)NSProgress) init];
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = v18;
  *(_OWORD *)(v14 + 32) = v17;
  *(void *)(v14 + 48) = a5;
  *(void *)(v14 + 56) = a6;
  *(void *)(v14 + 64) = a4;
  swift_retain();
  sub_1000CE628(a4);
  if (a2) {
    int v15 = 2;
  }
  else {
    int v15 = 1;
  }
  sub_1000C2D40(a1, v15, a3, a4, v13, 0, (void (*)(void *))sub_1000D28F8, v14);

  return swift_release();
}

uint64_t sub_1000BAFE4(uint64_t a1, unint64_t a2, uint64_t a3, void (*a4)(void *), uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = (void *)*v5;
  uint64_t v13 = v12[72];
  sub_10096C890();
  sub_100033BE8((uint64_t *)&unk_100ACB6B0);
  uint64_t v14 = sub_10096D510();
  uint64_t v51 = *(void *)(v14 - 8);
  uint64_t v52 = v14;
  __chkstk_darwin(v14);
  uint64_t v50 = (uint64_t *)((char *)&v45 - v15);
  uint64_t v16 = sub_10096B480();
  uint64_t v53 = *(void *)(v16 - 8);
  uint64_t v54 = v16;
  __chkstk_darwin(v16);
  long long v18 = (char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = (void *)swift_allocObject();
  uint64_t v58 = v13;
  v19[2] = v13;
  uint64_t v55 = v12[73];
  v19[3] = v55;
  uint64_t v57 = v12[74];
  v19[4] = v57;
  uint64_t v56 = v12[75];
  v19[5] = v56;
  v19[6] = a4;
  uint64_t v20 = a4;
  v19[7] = a5;
  uint64_t v21 = swift_retain();
  if (a3 < 51)
  {
    if (sub_10064D2C8(v21))
    {
      uint64_t v34 = (void *)swift_allocObject();
      uint64_t v35 = v55;
      v34[2] = v58;
      v34[3] = v35;
      uint64_t v36 = v56;
      v34[4] = v57;
      v34[5] = v36;
      v34[6] = sub_1000CF2BC;
      v34[7] = v19;
      swift_retain();
      sub_1000BC284(a2, (uint64_t)sub_1000CF360, (uint64_t)v34);
      swift_release();
    }
    else
    {
      uint64_t v42 = a4;
      unint64_t v43 = sub_1006A935C(a2);
      os_log_type_t v44 = (void *)swift_allocObject();
      v44[2] = sub_1000CF2BC;
      v44[3] = v19;
      v44[4] = v6;
      v44[5] = a2;
      v44[6] = a1;
      v44[7] = a3;
      v44[8] = v42;
      v44[9] = a5;
      swift_retain();
      sub_1000CE628(a2);
      swift_retain();
      swift_retain();
      swift_retain();
      sub_1000AB9F8(a1, 0, 0, v43, (uint64_t)sub_1000CF32C, (uint64_t)v44);
      swift_release();
      sub_1000B6C28(v43);
    }
    return swift_release();
  }
  else
  {
    swift_retain();
    id v22 = (id)fpfs_current_or_default_log();
    sub_10096B490();
    sub_1000CE628(a2);
    sub_1000CE628(a2);
    swift_retain();
    uint64_t v23 = sub_10096B470();
    os_log_type_t v24 = sub_10096C5C0();
    int v25 = v24;
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v26 = swift_slowAlloc();
      int v47 = v25;
      uint64_t v27 = v26;
      uint64_t v28 = swift_slowAlloc();
      uint64_t v48 = v28;
      uint64_t v60 = v28;
      *(_DWORD *)uint64_t v27 = 136446466;
      os_log_t v46 = v23;
      uint64_t v29 = sub_10064CFB8(v28);
      uint64_t v59 = sub_100719D44(v29, v30, &v60);
      uint64_t v49 = a4;
      sub_10096C8C0();
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v27 + 12) = 2082;
      unint64_t v31 = sub_1006A9894(a2, v58, v55, v57, v56);
      unint64_t v33 = v32;
      sub_1000B6C28(a2);
      uint64_t v59 = sub_100719D44(v31, v33, &v60);
      uint64_t v20 = v49;
      sub_10096C8C0();
      swift_bridgeObjectRelease();
      sub_1000B6C28(a2);
      uint64_t v23 = v46;
      _os_log_impl((void *)&_mh_execute_header, v46, (os_log_type_t)v47, "Recursion too deep for backgroundLookup of itemID %{public}s request %{public}s", (uint8_t *)v27, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1000B6C28(a2);
      swift_release();
      sub_1000B6C28(a2);
    }

    (*(void (**)(char *, uint64_t))(v53 + 8))(v18, v54);
    NSString v37 = sub_10096BC00();
    id v38 = (id)FPInvalidParameterError();

    if (v38)
    {
      uint64_t v39 = (uint64_t)v50;
      *uint64_t v50 = v38;
      uint64_t v40 = v52;
      swift_storeEnumTagMultiPayload();
      sub_1000BB618(v39, v20, a5, v58);
      swift_release();
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v51 + 8))(v39, v40);
    }
    else
    {
      uint64_t result = swift_release();
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_1000BB618(uint64_t a1, void (*a2)(void *), uint64_t a3, uint64_t a4)
{
  uint64_t v29 = a2;
  uint64_t v7 = *(void *)(a4 - 8);
  __chkstk_darwin(a1);
  uint64_t v27 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10096C890();
  uint64_t v30 = *(void *)(v9 - 8);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v28 = (char *)v26 - v13;
  sub_100033BE8((uint64_t *)&unk_100ACB6B0);
  uint64_t v14 = sub_10096D510();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  long long v18 = (void *)((char *)v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v16);
  uint64_t v20 = (void *)((char *)v26 - v19);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))((char *)v26 - v19, a1, v14);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    void *v18 = *v20;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    v29(v18);
    swift_errorRelease();
    return (*(uint64_t (**)(void *, uint64_t))(v15 + 8))(v18, v14);
  }
  else
  {
    v26[1] = a3;
    uint64_t v22 = v30;
    uint64_t v23 = v28;
    (*(void (**)(char *, void *, uint64_t))(v30 + 32))(v28, v20, v9);
    (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v12, v23, v9);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v12, 1, a4) == 1)
    {
      os_log_type_t v24 = *(void (**)(char *, uint64_t))(v30 + 8);
      v24(v12, v9);
      (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v18, 1, 1, a4);
      swift_storeEnumTagMultiPayload();
      v29(v18);
      (*(void (**)(void *, uint64_t))(v15 + 8))(v18, v14);
      return ((uint64_t (*)(char *, uint64_t))v24)(v28, v9);
    }
    else
    {
      int v25 = v27;
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v27, v12, a4);
      (*(void (**)(void *, char *, uint64_t))(v7 + 16))(v18, v25, a4);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v18, 0, 1, a4);
      swift_storeEnumTagMultiPayload();
      v29(v18);
      (*(void (**)(void *, uint64_t))(v15 + 8))(v18, v14);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v25, a4);
      return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v28, v9);
    }
  }
}

uint64_t sub_1000BBA90(uint64_t a1, void (*a2)(void *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v39 = a2;
  uint64_t v40 = a3;
  uint64_t v12 = sub_10096C890();
  uint64_t v33 = *(void *)(v12 - 8);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v35 = (uint64_t)&v32 - v14;
  uint64_t v36 = *(void *)(a4 - 8);
  __chkstk_darwin(v13);
  uint64_t v34 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = a4;
  uint64_t v43 = a5;
  uint64_t v44 = a6;
  uint64_t v45 = a7;
  uint64_t v16 = type metadata accessor for ItemLookupResult();
  uint64_t v38 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  NSString v37 = (char *)&v32 - v17;
  sub_100033BE8((uint64_t *)&unk_100ACB6B0);
  uint64_t v18 = sub_10096D510();
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v21 = (uint64_t *)((char *)&v32 - v20);
  sub_10096C890();
  uint64_t v22 = sub_10096D510();
  __chkstk_darwin(v22);
  os_log_type_t v24 = (uint64_t *)((char *)&v32 - v23);
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))((char *)&v32 - v23, a1, v22);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *uint64_t v21 = *v24;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    v39(v21);
    swift_errorRelease();
    return (*(uint64_t (**)(void *, uint64_t))(v19 + 8))(v21, v18);
  }
  else
  {
    uint64_t v32 = v19;
    uint64_t v27 = v38;
    uint64_t v28 = v39;
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v38 + 48))(v24, 1, v16) == 1)
    {
      int v41 = sub_10096A710();
      swift_dynamicCast();
      *uint64_t v21 = v42;
      swift_storeEnumTagMultiPayload();
      v28(v21);
      return (*(uint64_t (**)(void *, uint64_t))(v32 + 8))(v21, v18);
    }
    else
    {
      (*(void (**)(char *, void *, uint64_t))(v27 + 32))(v37, v24, v16);
      uint64_t v29 = v35;
      sub_1000A8DCC(v16, v35);
      uint64_t v30 = v36;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48))(v29, 1, a4) == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v29, v12);
        (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v30 + 56))(v21, 1, 1, a4);
        swift_storeEnumTagMultiPayload();
        v28(v21);
        (*(void (**)(void *, uint64_t))(v32 + 8))(v21, v18);
      }
      else
      {
        unint64_t v31 = v34;
        (*(void (**)(char *, uint64_t, uint64_t))(v30 + 32))(v34, v29, a4);
        (*(void (**)(void *, char *, uint64_t))(v30 + 16))(v21, v31, a4);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v30 + 56))(v21, 0, 1, a4);
        swift_storeEnumTagMultiPayload();
        v28(v21);
        (*(void (**)(void *, uint64_t))(v32 + 8))(v21, v18);
        (*(void (**)(char *, uint64_t))(v30 + 8))(v31, a4);
      }
      return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v37, v16);
    }
  }
}

uint64_t sub_1000BC044(unint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void **__return_ptr))(**(void **)(*(void *)(v3 + 40) + 16) + 96))(&v17);
  uint64_t v7 = v17;
  sub_10002B7CC((uint64_t *)&unk_100ACEC80);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v7;
  *(_WORD *)(v8 + 24) = 256;
  *(unsigned char *)(v8 + 42) = 0;
  *(void *)(v8 + 32) = v7;
  *(_WORD *)(v8 + 40) = 256;
  if (((a1 >> 58) & 0x3C | (a1 >> 1) & 3) == 0x1E)
  {
    unint64_t v9 = *(void *)((a1 & 0xFFFFFFFFFFFFFF9) + 0x10);
    unint64_t v10 = v9;
  }
  else
  {
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16) = a1;
    unint64_t v10 = v11 | 0x7000000000000004;
    unint64_t v9 = a1;
  }
  sub_1000CE628(v9);
  uint64_t v12 = (void *)swift_allocObject();
  v12[2] = a2;
  v12[3] = a3;
  v12[4] = a1;
  v12[5] = v3;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v8;
  *(void *)(v13 + 24) = v3;
  *(_WORD *)(v13 + 32) = 256;
  *(void *)(v13 + 40) = sub_1000D3160;
  *(void *)(v13 + 48) = v12;
  *(void *)(v13 + 56) = v10;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = sub_1000D3160;
  *(void *)(v14 + 24) = v12;
  swift_retain();
  swift_retain();
  sub_1000CE628(a1);
  swift_retain();
  swift_retain();
  id v15 = v7;
  swift_retain();
  swift_retain();
  sub_1000CE628(v10);
  sub_1007D8110((uint64_t)"findExistingVFSItemFor(itemID:parentIsImported:bypassIsHidden:request:completionHandler:)", 89, 2, sub_1000DEB24, v14, (uint64_t)sub_1000D3128, v13);
  swift_release();
  swift_release();
  swift_release();
  sub_1000B6C28(v10);
  return swift_release();
}

uint64_t sub_1000BC284(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v20 = a2;
  uint64_t v21 = a3;
  unint64_t v19 = a1;
  uint64_t v18 = *(void *)(*(void *)v3 + 592);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v8 = swift_getAssociatedConformanceWitness();
  uint64_t v9 = type metadata accessor for ReconciliationID();
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v18 - v10;
  uint64_t v22 = AssociatedTypeWitness;
  uint64_t v23 = v6;
  uint64_t v24 = AssociatedConformanceWitness;
  uint64_t v25 = v8;
  uint64_t v12 = type metadata accessor for FPFSID();
  (*(void (**)(uint64_t))(**(void **)(*(void *)(v4 + 40) + 16) + 96))(v12);
  swift_storeEnumTagMultiPayload();
  uint64_t v13 = sub_10064C8FC((uint64_t)v11);
  unint64_t v14 = v19;
  unint64_t v15 = sub_1006A935C(v19);
  uint64_t v16 = (void *)swift_allocObject();
  v16[2] = v20;
  v16[3] = v21;
  v16[4] = v14;
  v16[5] = v4;
  swift_retain();
  sub_1000CE628(v14);
  swift_retain();
  sub_1000AB9F8(v13, 1, 0, v15, (uint64_t)sub_1000CF394, (uint64_t)v16);
  swift_release();
  sub_1000B6C28(v15);
  return swift_release();
}

uint64_t sub_1000BC514(uint64_t a1, void (*a2)(void *), uint64_t a3, void *a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v74 = a7;
  uint64_t v75 = a8;
  uint64_t v79 = a6;
  unint64_t v83 = a5;
  uint64_t v86 = a2;
  uint64_t v87 = a3;
  uint64_t v88 = a1;
  uint64_t v10 = (void *)*a4;
  uint64_t v73 = sub_10096B480();
  uint64_t v72 = *(void *)(v73 - 8);
  __chkstk_darwin(v73);
  uint64_t v82 = (char *)&v67 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = v10[72];
  uint64_t v13 = sub_10096C890();
  uint64_t v70 = *(void *)(v13 - 8);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v81 = (char *)&v67 - v15;
  uint64_t v80 = *(void *)(v12 - 8);
  __chkstk_darwin(v14);
  uint64_t v71 = (char *)&v67 - v16;
  uint64_t v17 = v10[73];
  uint64_t v18 = v10[74];
  uint64_t v19 = v10[75];
  v90[0] = v12;
  v90[1] = v17;
  uint64_t v77 = v18;
  uint64_t v78 = v17;
  v90[2] = v18;
  v90[3] = v19;
  uint64_t v76 = v19;
  uint64_t v20 = type metadata accessor for ItemLookupResult();
  uint64_t v85 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)&v67 - v21;
  sub_100033BE8((uint64_t *)&unk_100ACB6B0);
  uint64_t v23 = sub_10096D510();
  uint64_t v24 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v26 = (uint64_t *)((char *)&v67 - v25);
  uint64_t v84 = v20;
  sub_10096C890();
  uint64_t v27 = sub_10096D510();
  __chkstk_darwin(v27);
  uint64_t v29 = (uint64_t *)((char *)&v67 - v28);
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))((char *)&v67 - v28, v88, v27);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    void *v26 = *v29;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    v86(v26);
    swift_errorRelease();
    return (*(uint64_t (**)(void *, uint64_t))(v24 + 8))(v26, v23);
  }
  uint64_t v32 = (uint64_t)v81;
  uint64_t v67 = v13;
  unint64_t v68 = v26;
  uint64_t v69 = a4;
  uint64_t v33 = v80;
  uint64_t v88 = v12;
  uint64_t v34 = v82;
  unint64_t v35 = v83;
  uint64_t v36 = v84;
  uint64_t v37 = v85;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v85 + 48))(v29, 1, v84) == 1)
  {
    id v38 = (id)fpfs_current_or_default_log();
    sub_10096B490();
    unint64_t v39 = v35;
    sub_1000CE628(v35);
    sub_1000CE628(v35);
    uint64_t v40 = v79;
    swift_retain();
    int v41 = sub_10096B470();
    os_log_type_t v42 = sub_10096C5A0();
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v43 = swift_slowAlloc();
      uint64_t v44 = swift_slowAlloc();
      v90[0] = v44;
      *(_DWORD *)uint64_t v43 = 136315394;
      uint64_t v45 = sub_10064CFB8(v44);
      uint64_t v89 = sub_100719D44(v45, v46, v90);
      sub_10096C8C0();
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v43 + 12) = 2080;
      unint64_t v47 = sub_1006A9894(v35, v88, v78, v77, v76);
      unint64_t v49 = v48;
      sub_1000B6C28(v35);
      uint64_t v50 = v47;
      unint64_t v39 = v35;
      uint64_t v89 = sub_100719D44(v50, v49, v90);
      sub_10096C8C0();
      uint64_t v40 = v79;
      swift_bridgeObjectRelease();
      sub_1000B6C28(v35);
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "Item cannot be found on disk, looking for parent for %s request %s", (uint8_t *)v43, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1000B6C28(v35);
      swift_release();
      sub_1000B6C28(v35);
    }

    (*(void (**)(char *, uint64_t))(v72 + 8))(v34, v73);
    uint64_t v60 = (void (*)(void))v86;
    uint64_t v59 = v87;
    goto LABEL_12;
  }
  uint64_t v51 = v22;
  (*(void (**)(char *, void *, uint64_t))(v37 + 32))(v22, v29, v36);
  unint64_t v39 = v35;
  unint64_t v52 = v35;
  uint64_t v53 = v88;
  if ((sub_1000D0DD0((uint64_t)v22, 1, v52, v88, v78, v77, v76) & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v37 + 8))(v22, v36);
    uint64_t v60 = (void (*)(void))v86;
    uint64_t v59 = v87;
    uint64_t v40 = v79;
LABEL_12:
    uint64_t v62 = v74;
    uint64_t v61 = v75;
    uint64_t v63 = v69;
    uint64_t v64 = (void *)swift_allocObject();
    v64[2] = v60;
    v64[3] = v59;
    v64[4] = v63;
    uint64_t v64[5] = v39;
    v64[6] = v62;
    v64[7] = v61;
    v64[8] = a9;
    sub_1000CE628(v39);
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1000A9458(v40, (void (*)(void))sub_1000CFA4C, (uint64_t)v64);
    return swift_release();
  }
  uint64_t v54 = v32;
  sub_1000A8DCC(v36, v32);
  int v55 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 48))(v32, 1, v53);
  uint64_t v56 = v86;
  uint64_t v57 = v23;
  if (v55 == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v54, v67);
    uint64_t v58 = v68;
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v33 + 56))(v68, 1, 1, v53);
    swift_storeEnumTagMultiPayload();
    v56(v58);
    (*(void (**)(void *, uint64_t))(v24 + 8))(v58, v57);
  }
  else
  {
    unint64_t v65 = v71;
    (*(void (**)(char *, uint64_t, uint64_t))(v33 + 32))(v71, v54, v53);
    uint64_t v66 = v68;
    (*(void (**)(void *, char *, uint64_t))(v33 + 16))(v68, v65, v53);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v33 + 56))(v66, 0, 1, v53);
    swift_storeEnumTagMultiPayload();
    v56(v66);
    (*(void (**)(void *, uint64_t))(v24 + 8))(v66, v57);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v65, v53);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v85 + 8))(v51, v36);
}

uint64_t sub_1000BCE4C(uint64_t a1, char a2, void (*a3)(uint64_t *), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v21 = a3;
  sub_10096C890();
  sub_100033BE8((uint64_t *)&unk_100ACB6B0);
  uint64_t v14 = sub_10096D510();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t result = __chkstk_darwin(v14);
  uint64_t v18 = (uint64_t *)((char *)&v20 - v17);
  if (a2)
  {
    uint64_t *v18 = a1;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    v21(v18);
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v15 + 8))(v18, v14);
  }
  else if (__OFADD__(a7, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v19 = swift_retain();
    sub_1000BAFE4(v19, a6, a7 + 1, a8, a9);
    return sub_1000D5B18(a1, 0);
  }
  return result;
}

uint64_t sub_1000BCFEC(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5 = v4;
  uint64_t v10 = *v4;
  uint64_t v11 = sub_10096B480();
  uint64_t v34 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v14 = (id)fpfs_current_or_default_log();
  sub_10096B490();
  sub_1000CE628(a2);
  sub_1000CE628(a2);
  swift_retain();
  uint64_t v15 = sub_10096B470();
  os_log_type_t v16 = sub_10096C5A0();
  int v17 = v16;
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v18 = swift_slowAlloc();
    uint64_t v33 = a4;
    uint64_t v19 = v18;
    uint64_t v20 = swift_slowAlloc();
    uint64_t v30 = v20;
    uint64_t v36 = v20;
    *(_DWORD *)uint64_t v19 = 136315394;
    uint64_t v32 = a3;
    HIDWORD(v29) = v17;
    uint64_t v21 = sub_10064CFB8(v20);
    uint64_t v35 = sub_100719D44(v21, v22, &v36);
    uint64_t v31 = v11;
    sub_10096C8C0();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 12) = 2080;
    unint64_t v23 = sub_1006A9894(a2, v10[72], v10[73], v10[74], v10[75]);
    unint64_t v25 = v24;
    sub_1000B6C28(a2);
    uint64_t v26 = v23;
    a3 = v32;
    uint64_t v35 = sub_100719D44(v26, v25, &v36);
    sub_10096C8C0();
    swift_bridgeObjectRelease();
    sub_1000B6C28(a2);
    _os_log_impl((void *)&_mh_execute_header, v15, BYTE4(v29), "Request to background materialize content of itemID %s reason %s", (uint8_t *)v19, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    a4 = v33;
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v34 + 8))(v13, v31);
  }
  else
  {
    sub_1000B6C28(a2);
    swift_release();
    sub_1000B6C28(a2);

    (*(void (**)(char *, uint64_t))(v34 + 8))(v13, v11);
  }
  uint64_t v27 = (void *)swift_allocObject();
  v27[2] = a3;
  v27[3] = a4;
  v27[4] = a2;
  v27[5] = a1;
  v27[6] = v5;
  sub_1000CE628(a2);
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1000BAFE4(a1, a2, 0, (void (*)(void *))sub_1000CF274, (uint64_t)v27);
  return swift_release();
}

uint64_t sub_1000BD358(uint64_t a1, void (*a2)(uint64_t *), uint64_t a3, unint64_t a4, void *a5, void *a6)
{
  v143 = a2;
  uint64_t v144 = a3;
  uint64_t v9 = *a5;
  uint64_t v140 = (void *)*a6;
  uint64_t v10 = v140;
  unint64_t v141 = a4;
  uint64_t v11 = sub_10096A630();
  __chkstk_darwin(v11 - 8);
  int v128 = (char *)&v115 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10096A650();
  uint64_t v129 = *(void *)(v13 - 8);
  uint64_t v130 = v13;
  __chkstk_darwin(v13);
  unint64_t v127 = (char *)&v115 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10096B480();
  uint64_t v136 = *(void *)(v15 - 8);
  uint64_t v137 = v15;
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v132 = (char *)&v115 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v16);
  unint64_t v138 = (char *)&v115 - v19;
  uint64_t v135 = a6;
  uint64_t v20 = v10[72];
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = __chkstk_darwin(v18);
  uint64_t v139 = (char *)&v115 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v26 = (char *)&v115 - v25;
  uint64_t v133 = v27;
  __chkstk_darwin(v24);
  uint64_t v142 = (char *)&v115 - v28;
  uint64_t v134 = a5;
  uint64_t v29 = *(void *)(v9 + 80);
  uint64_t v30 = sub_10096C890();
  sub_100033BE8((uint64_t *)&unk_100ACB6B0);
  uint64_t v131 = v30;
  uint64_t v31 = sub_10096D510();
  uint64_t v32 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  uint64_t v34 = (uint64_t *)((char *)&v115 - v33);
  sub_10096C890();
  uint64_t v35 = sub_10096D510();
  __chkstk_darwin(v35);
  uint64_t v37 = (uint64_t *)((char *)&v115 - v36);
  (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))((char *)&v115 - v36, a1, v35);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *uint64_t v34 = *v37;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    v143(v34);
    swift_errorRelease();
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v32 + 8))(v34, v31);
  }
  else
  {
    uint64_t v125 = v32;
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v21 + 48))(v37, 1, v20) == 1)
    {
      (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v34, 1, 1, v29);
      swift_storeEnumTagMultiPayload();
      v143(v34);
      return (*(uint64_t (**)(uint64_t *, uint64_t))(v125 + 8))(v34, v31);
    }
    else
    {
      uint64_t v118 = v31;
      uint64_t v40 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
      int v41 = v142;
      uint64_t v122 = v21 + 32;
      uint64_t v121 = v40;
      v40(v142, (char *)v37, v20);
      id v42 = (id)fpfs_current_or_default_log();
      uint64_t v43 = v138;
      sub_10096B490();
      uint64_t v44 = *(void (**)(char *, char *, uint64_t))(v21 + 16);
      v44(v26, v41, v20);
      unint64_t v45 = v141;
      sub_1000CE628(v141);
      sub_1000CE628(v45);
      unint64_t v46 = sub_10096B470();
      os_log_type_t v47 = sub_10096C5A0();
      int v48 = v47;
      BOOL v49 = os_log_type_enabled(v46, v47);
      uint64_t v124 = v21;
      uint64_t v120 = v21 + 16;
      uint64_t v119 = v44;
      if (v49)
      {
        uint64_t v50 = swift_slowAlloc();
        int v116 = v48;
        uint64_t v51 = v50;
        uint64_t v117 = swift_slowAlloc();
        v145[0] = v117;
        *(_DWORD *)uint64_t v51 = 136315394;
        uint64_t v52 = v21;
        uint64_t v126 = v51 + 4;
        uint64_t v53 = v139;
        v44(v139, v26, v20);
        uint64_t v54 = *(void (**)(char *, uint64_t))(v52 + 8);
        v54(v26, v20);
        uint64_t v55 = v20;
        uint64_t v56 = v140;
        uint64_t v57 = v140[74];
        os_log_t v115 = v46;
        uint64_t v58 = sub_10096D220();
        unint64_t v60 = v59;
        uint64_t v123 = v54;
        v54(v53, v55);
        uint64_t v146 = sub_100719D44(v58, v60, v145);
        sub_10096C8C0();
        swift_bridgeObjectRelease();
        *(_WORD *)(v51 + 12) = 2080;
        uint64_t v61 = v56[73];
        uint64_t v62 = v56[75];
        uint64_t v20 = v55;
        uint64_t v126 = v57;
        unint64_t v63 = sub_1006A9894(v141, v55, v61, v57, v62);
        unint64_t v65 = v64;
        sub_1000B6C28(v141);
        uint64_t v146 = sub_100719D44(v63, v65, v145);
        sub_10096C8C0();
        unint64_t v45 = v141;
        swift_bridgeObjectRelease();
        sub_1000B6C28(v45);
        os_log_t v66 = v115;
        _os_log_impl((void *)&_mh_execute_header, v115, (os_log_type_t)v116, "Found item %s, request %s", (uint8_t *)v51, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v67 = *(void (**)(char *, uint64_t))(v136 + 8);
        v67(v138, v137);
      }
      else
      {
        sub_1000B6C28(v45);
        uint64_t v123 = *(void (**)(char *, uint64_t))(v21 + 8);
        v123(v26, v20);
        sub_1000B6C28(v45);

        uint64_t v67 = *(void (**)(char *, uint64_t))(v136 + 8);
        v67(v43, v137);
        uint64_t v126 = v140[74];
      }
      if (FileItem.isDataless.getter(v20, v126))
      {
        unint64_t v68 = v135[3];
        uint64_t v69 = v140[73];
        uint64_t v70 = v140[75];
        v145[0] = v20;
        v145[1] = v69;
        v145[2] = v126;
        v145[3] = v70;
        type metadata accessor for SQLJobRegistry();
        uint64_t v71 = swift_dynamicCastClass();
        if (v71)
        {
          uint64_t v72 = v71;
          v119(v139, v142, v20);
          unint64_t v73 = (*(unsigned __int8 *)(v124 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v124 + 80);
          unint64_t v74 = (v133 + v73 + 7) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v141 = v68;
          unint64_t v75 = v45;
          unint64_t v76 = (v74 + 15) & 0xFFFFFFFFFFFFFFF8;
          uint64_t v77 = (char *)swift_allocObject();
          *((void *)v77 + 2) = v20;
          *((void *)v77 + 3) = v69;
          *((void *)v77 + 4) = v126;
          *((void *)v77 + 5) = v70;
          *((void *)v77 + 6) = v72;
          v121(&v77[v73], v139, v20);
          *(void *)&v77[v74] = v135;
          *(void *)&v77[v76] = v75;
          uint64_t v78 = (void (**)(uint64_t *))&v77[(v76 + 15) & 0xFFFFFFFFFFFFFFF8];
          uint64_t v79 = v20;
          uint64_t v81 = (uint64_t)v143;
          uint64_t v80 = v144;
          *uint64_t v78 = v143;
          v78[1] = (void (*)(uint64_t *))v80;
          swift_retain();
          sub_1000CE628(v75);
          swift_retain();
          swift_retain();
          swift_retain();
          sub_10035B468((uint64_t)"backgroundMaterialize(_:request:completionHandler:)", 51, 2u, (uint64_t)FPDDomainFPFSBackend.isDeadEnd(), 0, v81, v80, (uint64_t)sub_1000D1D80, (uint64_t)v77, v131);
          swift_release();
          swift_release();
          uint64_t v82 = v142;
          uint64_t v83 = v79;
        }
        else
        {
          sub_10096A5C0();
          sub_100042898((uint64_t)_swiftEmptyArrayStorage);
          sub_1000278B4((unint64_t *)&qword_100ACB680, (void (*)(uint64_t))&type metadata accessor for CocoaError);
          os_log_t v111 = v127;
          uint64_t v112 = v130;
          sub_10096ABD0();
          uint64_t v113 = sub_10096A4D0();
          (*(void (**)(char *, uint64_t))(v129 + 8))(v111, v112);
          *uint64_t v34 = v113;
          uint64_t v114 = v118;
          swift_storeEnumTagMultiPayload();
          v143(v34);
          (*(void (**)(uint64_t *, uint64_t))(v125 + 8))(v34, v114);
          uint64_t v82 = v142;
          uint64_t v83 = v20;
        }
      }
      else
      {
        id v84 = (id)fpfs_current_or_default_log();
        uint64_t v85 = v132;
        sub_10096B490();
        sub_1000CE628(v45);
        sub_1000CE628(v45);
        swift_retain();
        uint64_t v86 = sub_10096B470();
        os_log_type_t v87 = sub_10096C5A0();
        if (os_log_type_enabled(v86, v87))
        {
          uint64_t v88 = swift_slowAlloc();
          uint64_t v89 = swift_slowAlloc();
          unint64_t v138 = (char *)v89;
          v145[0] = v89;
          *(_DWORD *)uint64_t v88 = 136315394;
          uint64_t v90 = sub_10064CFB8(v89);
          uint64_t v146 = sub_100719D44(v90, v91, v145);
          sub_10096C8C0();
          swift_release();
          swift_bridgeObjectRelease();
          *(_WORD *)(v88 + 12) = 2080;
          uint64_t v131 = v88 + 14;
          uint64_t v92 = v140[73];
          uint64_t v93 = v140[75];
          unint64_t v94 = sub_1006A9894(v45, v20, v92, v126, v93);
          unint64_t v96 = v95;
          sub_1000B6C28(v141);
          uint64_t v146 = sub_100719D44(v94, v96, v145);
          sub_10096C8C0();
          unint64_t v45 = v141;
          swift_bridgeObjectRelease();
          sub_1000B6C28(v45);
          _os_log_impl((void *)&_mh_execute_header, v86, v87, "Item is not dataless, lookup and propagate %s request %s", (uint8_t *)v88, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          v67(v132, v137);
        }
        else
        {
          sub_1000B6C28(v45);
          swift_release();
          sub_1000B6C28(v45);

          v67(v85, v137);
          uint64_t v92 = v140[73];
          uint64_t v93 = v140[75];
        }
        uint64_t v97 = v20;
        os_log_type_t v99 = v143;
        uint64_t v98 = v144;
        uint64_t v100 = v124;
        uint64_t v101 = v126;
        unint64_t v102 = sub_1006A935C(v45);
        uint64_t v103 = v93;
        uint64_t v104 = v92;
        uint64_t v105 = v139;
        uint64_t v106 = v142;
        v119(v139, v142, v97);
        unint64_t v107 = (*(unsigned __int8 *)(v100 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v100 + 80);
        unint64_t v108 = (char *)swift_allocObject();
        uint64_t v109 = v101;
        uint64_t v110 = (uint64_t)v108;
        *((void *)v108 + 2) = v97;
        *((void *)v108 + 3) = v104;
        *((void *)v108 + 4) = v109;
        *((void *)v108 + 5) = v103;
        *((void *)v108 + 6) = v99;
        *((void *)v108 + 7) = v98;
        v121(&v108[v107], v105, v97);
        swift_retain();
        sub_1000B21EC((uint64_t)v134, 1, 1, 0, v102, (uint64_t)sub_1000D1C2C, v110);
        swift_release();
        sub_1000B6C28(v102);
        uint64_t v82 = v106;
        uint64_t v83 = v97;
      }
      return ((uint64_t (*)(char *, uint64_t))v123)(v82, v83);
    }
  }
}

uint64_t sub_1000BE1F4(uint64_t a1, void (*a2)(void *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v31 = a4;
  uint64_t v38 = a3;
  uint64_t v36 = a2;
  uint64_t v13 = sub_10096C890();
  uint64_t v33 = *(void *)(v13 - 8);
  uint64_t v34 = v13;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v31 - v14;
  uint64_t v39 = a5;
  uint64_t v40 = a6;
  uint64_t v41 = a7;
  uint64_t v42 = a8;
  uint64_t v16 = type metadata accessor for ItemLookupResult();
  uint64_t v37 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v35 = (char *)&v31 - v17;
  uint64_t v32 = a7;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_10096C890();
  sub_100033BE8((uint64_t *)&unk_100ACB6B0);
  uint64_t v19 = sub_10096D510();
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v22 = (uint64_t *)((char *)&v31 - v21);
  sub_10096C890();
  uint64_t v23 = sub_10096D510();
  __chkstk_darwin(v23);
  uint64_t v25 = (uint64_t *)((char *)&v31 - v24);
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))((char *)&v31 - v24, a1, v23);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *uint64_t v22 = *v25;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    v36(v22);
    swift_errorRelease();
    return (*(uint64_t (**)(void *, uint64_t))(v20 + 8))(v22, v19);
  }
  uint64_t v27 = v36;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v37 + 48))(v25, 1, v16) == 1)
  {
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v22, 1, 1, AssociatedTypeWitness);
    swift_storeEnumTagMultiPayload();
    v27(v22);
    return (*(uint64_t (**)(void *, uint64_t))(v20 + 8))(v22, v19);
  }
  uint64_t v29 = v35;
  (*(void (**)(char *))(v37 + 32))(v35);
  sub_1000A8DCC(v16, (uint64_t)v15);
  int v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 48))(v15, 1, a5);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v15, v34);
  if (v30 == 1)
  {
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v22, 1, 1, AssociatedTypeWitness);
  }
  else
  {
    (*(void (**)(uint64_t))(v32 + 64))(a5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v22, 0, 1, AssociatedTypeWitness);
  }
  swift_storeEnumTagMultiPayload();
  v27(v22);
  (*(void (**)(void *, uint64_t))(v20 + 8))(v22, v19);
  return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v29, v16);
}

uint64_t sub_1000BE718(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v46 = a6;
  unint64_t v47 = a4;
  uint64_t v43 = a5;
  uint64_t v48 = a3;
  uint64_t v52 = a2;
  uint64_t v40 = *a1;
  uint64_t v6 = v40;
  uint64_t v7 = *(void *)(v40 + 544);
  uint64_t v42 = *(void *)(v7 - 8);
  uint64_t v38 = *(void *)(v42 + 64);
  __chkstk_darwin(a1);
  uint64_t v39 = (char *)&v36 - v8;
  uint64_t v9 = sub_10096B7D0();
  uint64_t v44 = *(void *)(v9 - 8);
  uint64_t v45 = v9;
  __chkstk_darwin(v9);
  uint64_t v41 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10096B0E0();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(v6 + 560);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v53 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v16 = __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v49 = (uint64_t)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v36 - v18;
  uint64_t v37 = *(void (**)(uint64_t, uint64_t))(v15 + 64);
  v37(v7, v15);
  sub_10096B0D0();
  sub_10096B080();
  double v21 = v20;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  double v23 = v21 * 1000000000.0;
  if ((~COERCE__INT64(v21 * 1000000000.0) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v23 <= -9.22337204e18)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v23 >= 9.22337204e18)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  uint64_t v24 = v50;
  sub_100959390((uint64_t)v19, 0x20uLL, (uint64_t)v23);
  if (v24) {
    return (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v19, AssociatedTypeWitness);
  }
  uint64_t v25 = *(void (**)(void, void))(v53 + 8);
  v53 += 8;
  uint64_t v50 = (uint64_t (*)(void, void))v25;
  v25(v19, AssociatedTypeWitness);
  id v36 = [self discreteProgressWithTotalUnitCount:1];
  uint64_t v26 = v52;
  v37(v7, v15);
  uint64_t v27 = (uint64_t)v41;
  sub_10096B770();
  uint64_t v28 = v42;
  uint64_t v29 = v39;
  (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v39, v26, v7);
  unint64_t v30 = (*(unsigned __int8 *)(v28 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
  uint64_t v31 = swift_allocObject();
  *(void *)(v31 + 16) = v7;
  uint64_t v32 = v40;
  *(void *)(v31 + 24) = *(void *)(v40 + 552);
  *(void *)(v31 + 32) = v15;
  uint64_t v33 = v43;
  *(void *)(v31 + 40) = *(void *)(v32 + 568);
  *(void *)(v31 + 48) = v33;
  *(void *)(v31 + 56) = v46;
  (*(void (**)(unint64_t, char *, uint64_t))(v28 + 32))(v31 + v30, v29, v7);
  swift_retain();
  uint64_t v34 = v49;
  uint64_t v35 = v36;
  sub_1006BDE9C(v49, v47, v36, v27, (void (*)(void))sub_1000D1EE4, (void (*)(void))v31);

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v27, v45);
  return v50(v34, AssociatedTypeWitness);
}

uint64_t sub_1000BEC44(uint64_t a1, void (*a2)(void *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_10096C890();
  sub_100033BE8((uint64_t *)&unk_100ACB6B0);
  uint64_t v12 = sub_10096D510();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (uint64_t *)((char *)&v17 - v14);
  if (a1)
  {
    *uint64_t v15 = a1;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(a7 + 64))(a5, a7);
    (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v15, 0, 1, AssociatedTypeWitness);
    swift_storeEnumTagMultiPayload();
  }
  a2(v15);
  return (*(uint64_t (**)(void *, uint64_t))(v13 + 8))(v15, v12);
}

void sub_1000BEE18(uint64_t a1, uint64_t a2, int a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = v8;
  uint64_t v61 = a5;
  uint64_t v62 = a6;
  unint64_t v63 = a4;
  int v67 = a3;
  uint64_t v57 = a2;
  uint64_t v66 = a1;
  uint64_t v12 = (void *)*v8;
  uint64_t v59 = *(void *)(a7 - 8);
  uint64_t v60 = *(void *)(v59 + 64);
  __chkstk_darwin(a1);
  uint64_t v58 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = v12[74];
  uint64_t v64 = v12[72];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v55 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v56 = AssociatedTypeWitness;
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v49 = (char *)&v47 - v15;
  uint64_t v16 = swift_allocObject();
  uint64_t v47 = v16;
  *(void *)(v16 + 16) = 0;
  *(unsigned char *)(v16 + 24) = -1;
  uint64_t v17 = dispatch_group_create();
  dispatch_group_enter(v17);
  uint64_t v18 = *(void *)(v8[4] + 16);
  uint64_t v19 = *(void (**)(uint64_t, uint64_t))(a8 + 64);
  swift_retain();
  uint64_t v50 = a7;
  uint64_t v51 = a8;
  v19(a7, a8);
  uint64_t v52 = v12[73];
  uint64_t v54 = v12[75];
  unint64_t v20 = v63;
  uint64_t v48 = sub_1006A93D4(v63);
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = a7;
  *(void *)(v21 + 24) = a8;
  *(void *)(v21 + 32) = v17;
  uint64_t v22 = v47;
  *(void *)(v21 + 40) = v47;
  *(unsigned char *)(v21 + 48) = v67;
  *(void *)(v21 + 56) = v8;
  *(void *)(v21 + 64) = v20;
  unint64_t v23 = v20;
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = v17;
  *(void *)(v24 + 24) = v22;
  uint64_t v25 = *(void (**)(char *, uint64_t, void, void *, unint64_t (*)(uint64_t), uint64_t, void (*)(uint64_t, char), uint64_t))(*(void *)v18 + 144);
  uint64_t v26 = v17;
  swift_retain_n();
  uint64_t v53 = v26;
  swift_retain();
  sub_1000CE628(v23);
  uint64_t v28 = v48;
  uint64_t v27 = v49;
  v25(v49, v57, 0, v48, sub_1000CEC68, v21, sub_1000CEC80, v24);
  swift_release();
  swift_release();
  swift_release();

  (*(void (**)(char *, uint64_t))(v55 + 8))(v27, v56);
  uint64_t v29 = (void *)sub_1006F2F2C();
  uint64_t v31 = v58;
  uint64_t v30 = v59;
  uint64_t v32 = v50;
  (*(void (**)(char *, uint64_t, uint64_t))(v59 + 16))(v58, v66, v50);
  uint64_t v33 = v30;
  unint64_t v34 = (*(unsigned __int8 *)(v30 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
  uint64_t v35 = v34 + v60;
  unint64_t v36 = (v34 + v60) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v37 = (char *)swift_allocObject();
  uint64_t v38 = v52;
  *((void *)v37 + 2) = v64;
  *((void *)v37 + 3) = v38;
  uint64_t v39 = v32;
  uint64_t v40 = v65;
  *((void *)v37 + 4) = v32;
  *((void *)v37 + 5) = v40;
  uint64_t v41 = v51;
  *((void *)v37 + 6) = v54;
  *((void *)v37 + 7) = v41;
  uint64_t v42 = v61;
  uint64_t v43 = v62;
  *((void *)v37 + 8) = v22;
  *((void *)v37 + 9) = v42;
  *((void *)v37 + 10) = v43;
  *((void *)v37 + 11) = v9;
  (*(void (**)(char *, char *, uint64_t))(v33 + 32))(&v37[v34], v31, v39);
  v37[v35] = v67;
  unint64_t v44 = v63;
  *(void *)&v37[v36 + 8] = v63;
  swift_retain();
  swift_retain();
  sub_1000CE628(v44);
  id v45 = v29;
  swift_retain();
  uint64_t v46 = v53;
  sub_1006B791C((uint64_t)"materializeIgnoredItem(_:continuation:duringDiskImport:request:completionHandler:)", 82, 2, 0, v45, (uint64_t)sub_1000CF054, (uint64_t)v37);
  swift_release();
  swift_release();
}

unint64_t sub_1000BF2B0(uint64_t a1, NSObject *a2, uint64_t a3, int a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v68 = a8;
  uint64_t v67 = a7;
  uint64_t v73 = a6;
  int v76 = a4;
  uint64_t v66 = (void *)*a5;
  uint64_t v11 = v66[74];
  unint64_t v75 = a5;
  uint64_t v12 = v66[72];
  v86[1] = swift_getAssociatedTypeWitness();
  v86[2] = swift_getAssociatedTypeWitness();
  v86[3] = swift_getAssociatedConformanceWitness();
  v86[4] = swift_getAssociatedConformanceWitness();
  uint64_t v65 = type metadata accessor for FileItemVersion();
  uint64_t v81 = *(void *)(v65 - 8);
  __chkstk_darwin(v65);
  uint64_t v71 = (char *)&v54 - v13;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v70 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v14 = __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v72 = (char *)&v54 - v15;
  uint64_t v16 = *(void *)(v12 - 8);
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v19 = (char *)&v54 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __chkstk_darwin(v17);
  uint64_t v22 = (char *)&v54 - v21;
  uint64_t v59 = v23;
  __chkstk_darwin(v20);
  uint64_t v25 = (char *)&v54 - v24;
  if (objc_sync_enter(a2))
  {
LABEL_26:
    swift_unknownObjectRetain();
    sub_1007130E4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderExtensions/fssync/libfssync/utilities/Utilities.swift", 103, 2, 314, (uint64_t)a2);
  }
  swift_beginAccess();
  int v26 = *(unsigned __int8 *)(a3 + 24);
  uint64_t v69 = *(void *)(a3 + 16);
  sub_1000CF118(v69, v26);
  if (objc_sync_exit(a2))
  {
    swift_unknownObjectRetain();
    sub_1007130F8((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderExtensions/fssync/libfssync/utilities/Utilities.swift", 103, 2, 318, (uint64_t)a2);
  }
  int v27 = v26;
  unint64_t v28 = (v26 != 255) & v26;
  if (v28) {
    goto LABEL_24;
  }
  int v58 = v27;
  uint64_t v82 = v25;
  uint64_t v85 = v11;
  uint64_t v74 = a3;
  dispatch_group_t v77 = a2;
  swift_bridgeObjectRetain();
  if (!sub_10096C1A0()) {
    goto LABEL_23;
  }
  uint64_t v29 = 0;
  uint64_t v30 = *(uint64_t (**)(uint64_t, uint64_t))(v85 + 144);
  uint64_t v78 = (void (**)(char *, char *, uint64_t))(v16 + 32);
  uint64_t v79 = v30;
  uint64_t v83 = (void (**)(char *, uint64_t))(v16 + 8);
  id v84 = (void (**)(char *, unint64_t, uint64_t))(v16 + 16);
  uint64_t v57 = v85 + 64;
  uint64_t v80 = v85 + 144;
  uint64_t v56 = v85 + 112;
  uint64_t v55 = (void (**)(char *, uint64_t))(v81 + 8);
  uint64_t v54 = (void (**)(char *, uint64_t))(v70 + 8);
  uint64_t v70 = (v16 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  LODWORD(v81) = v28;
  unint64_t v63 = v19;
  while (1)
  {
    BOOL v31 = sub_10096C130();
    sub_10096C0E0();
    if (!v31) {
      break;
    }
    uint64_t v32 = *(void (**)(char *, unint64_t, uint64_t))(v16 + 16);
    unint64_t v28 = (unint64_t)v82;
    v32(v82, a1+ ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))+ *(void *)(v16 + 72) * v29, v12);
    a2 = (v29 + 1);
    if (__OFADD__(v29, 1)) {
      goto LABEL_22;
    }
LABEL_10:
    (*v78)(v22, (char *)v28, v12);
    uint64_t v33 = v79(v12, v85);
    if (v34 >> 62 == 2 && !v33 && v34 == 0x8000000000000000)
    {
      dispatch_group_enter(v77);
      v32(v19, (unint64_t)v22, v12);
      if (v76)
      {
        uint64_t v35 = v19;
        uint64_t v36 = v85;
        char v37 = FileItem.isDataless.getter(v12, v85);
        uint64_t v38 = *v83;
        (*v83)(v35, v12);
        if (v37)
        {
          uint64_t v39 = *(void **)(v75[4] + 16);
          uint64_t v62 = v38;
          uint64_t v40 = *(void (**)(uint64_t, uint64_t))(v36 + 64);
          swift_retain();
          v40(v12, v36);
          (*(void (**)(uint64_t, uint64_t))(v36 + 112))(v12, v36);
          uint64_t v41 = (void *)swift_allocObject();
          v41[2] = v12;
          uint64_t v42 = v66;
          uint64_t v43 = v67;
          v41[3] = v66[73];
          v41[4] = v43;
          v41[5] = v36;
          uint64_t v44 = v68;
          v41[6] = v42[75];
          v41[7] = v44;
          dispatch_group_t v45 = v77;
          v41[8] = v74;
          v41[9] = v45;
          uint64_t v61 = (void (**)(char *, void, char *, void, void (*)(uint64_t), void *))(*v39 + 632);
          uint64_t v60 = *v61;
          uint64_t v46 = v45;
          swift_retain();
          uint64_t v47 = v71;
          v60(v72, 0, v71, 0, sub_1000CF1F0, v41);
          swift_release();
          swift_release();
          (*v55)(v47, v65);
          (*v54)(v72, AssociatedTypeWitness);
          v62(v22, v12);
          uint64_t v19 = v63;
          goto LABEL_7;
        }
        uint64_t v19 = v63;
      }
      else
      {
        uint64_t v38 = *v83;
        (*v83)(v19, v12);
      }
      uint64_t v48 = swift_allocObject();
      dispatch_group_t v49 = v77;
      uint64_t v50 = v74;
      *(void *)(v48 + 16) = v77;
      *(void *)(v48 + 24) = v50;
      uint64_t v51 = v49;
      swift_retain();
      sub_1000BFD68(v22, 0, v76 & 1, v73, sub_1000CF1A8, v48, v12, v85);
      swift_release();
      v38(v22, v12);
      goto LABEL_7;
    }
    sub_1000CF144(v33, v34);
    (*v83)(v22, v12);
LABEL_7:
    unint64_t v28 = v81;
    ++v29;
    if (a2 == sub_10096C1A0()) {
      goto LABEL_23;
    }
  }
  uint64_t v52 = sub_10096CC20();
  if (v59 != 8)
  {
    __break(1u);
    goto LABEL_26;
  }
  v86[0] = v52;
  uint64_t v32 = *v84;
  unint64_t v28 = (unint64_t)v82;
  (*v84)(v82, (unint64_t)v86, v12);
  swift_unknownObjectRelease();
  a2 = (v29 + 1);
  if (!__OFADD__(v29, 1)) {
    goto LABEL_10;
  }
LABEL_22:
  __break(1u);
LABEL_23:
  swift_bridgeObjectRelease();
  LOBYTE(v27) = v58;
LABEL_24:
  sub_1000CF0EC(v69, v27);
  return v28;
}

void sub_1000BFB74(uint64_t a1, uint64_t a2, NSObject *a3)
{
  sub_10096C890();
  sub_100033BE8((uint64_t *)&unk_100AD6860);
  swift_getTupleTypeMetadata2();
  sub_100033BE8((uint64_t *)&unk_100ACB6B0);
  uint64_t v6 = sub_10096D510();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (uint64_t *)((char *)&v13 - v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v13 - v8, a1, v6);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = *v9;
    swift_beginAccess();
    uint64_t v11 = *(void *)(a2 + 16);
    *(void *)(a2 + 16) = v10;
    unsigned __int8 v12 = *(unsigned char *)(a2 + 24);
    *(unsigned char *)(a2 + 24) = 1;
    sub_1000CF0EC(v11, v12);
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t))(v7 + 8))(v9, v6);
  }
  dispatch_group_leave(a3);
}

void sub_1000BFD04(uint64_t a1, NSObject *a2, uint64_t a3)
{
  uint64_t v5 = a3 + 16;
  swift_errorRetain();
  sub_10084361C(a2, a1, v5);

  dispatch_group_leave(a2);
}

uint64_t sub_1000BFD68(uint64_t a1, int a2, int a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = v8;
  uint64_t v41 = a6;
  uint64_t v39 = a5;
  unint64_t v43 = a4;
  int v42 = a3;
  int v40 = a2;
  uint64_t v13 = (void *)*v9;
  uint64_t v14 = sub_10096B7D0();
  uint64_t v44 = *(void *)(v14 - 8);
  uint64_t v45 = v14;
  uint64_t v15 = __chkstk_darwin(v14);
  char v37 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(void *)(a7 - 8);
  uint64_t v18 = *(void *)(v17 + 64);
  __chkstk_darwin(v15);
  uint64_t v32 = (char *)&v32 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = v13[74];
  uint64_t v34 = v13[72];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v36 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v20 = (char *)&v32 - v19;
  uint64_t v33 = a8;
  (*(void (**)(uint64_t, uint64_t))(a8 + 64))(a7, a8);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))((char *)&v32 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a7);
  unint64_t v21 = (*(unsigned __int8 *)(v17 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  unint64_t v22 = (v18 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v23 = (v22 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v24 = (char *)swift_allocObject();
  *((void *)v24 + 2) = v34;
  *((void *)v24 + 3) = v13[73];
  *((void *)v24 + 4) = a7;
  *((void *)v24 + 5) = v35;
  *((void *)v24 + 6) = v13[75];
  uint64_t v25 = v32;
  *((void *)v24 + 7) = v33;
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(&v24[v21], v25, a7);
  int v26 = &v24[v22];
  uint64_t v27 = v41;
  *(void *)int v26 = v39;
  *((void *)v26 + 1) = v27;
  unint64_t v28 = &v24[v23];
  *(void *)unint64_t v28 = v9;
  v28[8] = v40;
  v28[9] = v42;
  unint64_t v29 = v43;
  *(void *)&v24[(v23 + 17) & 0xFFFFFFFFFFFFFFF8] = v43;
  swift_retain();
  swift_retain();
  sub_1000CE628(v29);
  uint64_t v30 = (uint64_t)v37;
  sub_1000B5A94();

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v30, v45);
  return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v20, AssociatedTypeWitness);
}

void sub_1000C0114(uint64_t a1, char a2, NSObject *a3, uint64_t a4)
{
  uint64_t v6 = a4 + 16;
  char v7 = a2 & 1;
  sub_1000D5B30(a1, a2 & 1);
  sub_100843728(a3, v6, a1, v7);

  dispatch_group_leave(a3);
}

uint64_t sub_1000C0184(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  swift_beginAccess();
  int v16 = *(unsigned __int8 *)(a1 + 24);
  if (v16 == 255) {
    return a2(0);
  }
  uint64_t v17 = *(void *)(a1 + 16);
  if (v16)
  {
    sub_1000D5B30(v17, 1);
    a2(v17);
    return sub_1000CF0EC(v17, v16);
  }
  if (!v17) {
    return a2(0);
  }
  sub_1000D5B30(v17, 0);
  sub_1000BEE18(a5, v17, a6 & 1, a7, a2, a3, a8, a9);
  return sub_1000CF0EC(v17, v16);
}

uint64_t sub_1000C0284(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, void *a5, BOOL a6, int a7, unint64_t a8, uint64_t a9, uint64_t a10)
{
  unint64_t v58 = a8;
  int v57 = a7;
  BOOL v50 = a6;
  uint64_t v60 = a3;
  uint64_t v61 = a4;
  uint64_t v13 = a10;
  uint64_t v54 = *a5;
  uint64_t v62 = *(void *)(a9 - 8);
  uint64_t v14 = __chkstk_darwin(a1);
  uint64_t v53 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = v15;
  __chkstk_darwin(v14);
  dispatch_group_t v49 = (char *)&v45 - v16;
  uint64_t v18 = *(void *)(v17 + 592);
  uint64_t v51 = *(void *)(v17 + 576);
  uint64_t v52 = v18;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v55 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v56 = AssociatedTypeWitness;
  __chkstk_darwin(AssociatedTypeWitness);
  unint64_t v21 = (char *)&v45 - v20;
  uint64_t v22 = type metadata accessor for ItemMetadata();
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v45 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = v21;
  if (a1)
  {
    uint64_t v25 = *(void (**)(uint64_t, uint64_t))(a10 + 104);
    swift_errorRetain();
    uint64_t v45 = a2;
    uint64_t v46 = a10;
    v25(a9, a10);
    int v26 = v24[*(int *)(v22 + 80)];
    sub_1000D3770((uint64_t)v24, (uint64_t (*)(void))type metadata accessor for ItemMetadata);
    if (v26 == 1)
    {
      swift_errorRetain();
      v60(a1);
      swift_errorRelease();
      return swift_errorRelease();
    }
    swift_errorRelease();
    a2 = v45;
    uint64_t v13 = v46;
  }
  uint64_t v28 = *(void *)(a5[4] + 16);
  unint64_t v29 = *(void (**)(uint64_t, uint64_t))(v13 + 64);
  swift_retain();
  v29(a9, v13);
  uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(v62 + 16);
  BOOL v31 = v49;
  v30(v49, a2, a9);
  uint64_t v47 = a5;
  BOOL v50 = v50 && FileItem.kind.getter(a9, v13) == 1;
  uint64_t v32 = v48;
  uint64_t v33 = v62;
  (*(void (**)(char *, uint64_t))(v62 + 8))(v31, a9);
  uint64_t v34 = v53;
  v30(v53, a2, a9);
  unint64_t v35 = (*(unsigned __int8 *)(v33 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
  unint64_t v36 = (v35 + v32 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v37 = (v35 + v32 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v38 = (char *)swift_allocObject();
  *((void *)v38 + 2) = v51;
  uint64_t v39 = v54;
  *((void *)v38 + 3) = *(void *)(v54 + 584);
  *((void *)v38 + 4) = a9;
  *((void *)v38 + 5) = v52;
  *((void *)v38 + 6) = *(void *)(v39 + 600);
  *((void *)v38 + 7) = v13;
  uint64_t v40 = v61;
  *((void *)v38 + 8) = v60;
  *((void *)v38 + 9) = v40;
  (*(void (**)(char *, char *, uint64_t))(v33 + 32))(&v38[v35], v34, a9);
  uint64_t v41 = &v38[v36];
  *(void *)uint64_t v41 = v47;
  v41[8] = v57 & 1;
  unint64_t v42 = v58;
  *(void *)&v38[v37] = v58;
  unint64_t v43 = *(void (**)(char *, BOOL, void (*)(uint64_t), char *))(*(void *)v28 + 792);
  swift_retain();
  swift_retain();
  sub_1000CE628(v42);
  uint64_t v44 = v59;
  v43(v59, v50, sub_1000CEB2C, v38);
  swift_release();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v55 + 8))(v44, v56);
}

void sub_1000C074C(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, char a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a1)
  {
    swift_errorRetain();
    a2(a1);
    swift_errorRelease();
  }
  else if (FileItem.kind.getter(a8, a9) == 1)
  {
    sub_1000BEE18(a4, 0, a6 & 1, a7, (uint64_t)a2, a3, a8, a9);
  }
  else
  {
    a2(0);
  }
}

uint64_t sub_1000C083C(uint64_t a1, unint64_t a2, uint64_t (*a3)(uint64_t, void), uint64_t a4, uint64_t a5, uint64_t a6)
{
  dispatch_group_t v49 = a3;
  uint64_t v50 = a4;
  unint64_t v45 = a2;
  uint64_t v44 = (void *)*v6;
  uint64_t v48 = *(void *)(a5 - 8);
  uint64_t v10 = __chkstk_darwin(a1);
  unint64_t v43 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = v11;
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v41 - v12;
  uint64_t v14 = type metadata accessor for ItemMetadata();
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v41 - v18;
  uint64_t v20 = *(void (**)(uint64_t, uint64_t))(a6 + 104);
  uint64_t v47 = a6;
  v20(a5, a6);
  int v21 = v19[*(int *)(v14 + 64)];
  sub_1000D3770((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for ItemMetadata);
  uint64_t v22 = v48;
  uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v48 + 16);
  uint64_t v42 = a1;
  uint64_t v24 = a1;
  uint64_t v25 = a5;
  int v26 = v23;
  v23(v13, v24, v25);
  if (v21 == 1)
  {
    (*(void (**)(char *, uint64_t))(v22 + 8))(v13, v25);
  }
  else
  {
    v20(v25, v47);
    uint64_t v27 = v22;
    (*(void (**)(char *, uint64_t))(v22 + 8))(v13, v25);
    char v28 = v17[*(int *)(v14 + 68)];
    sub_1000D3770((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for ItemMetadata);
    if ((v28 & 1) == 0)
    {
      unint64_t v29 = v43;
      v26(v43, v42, v25);
      unint64_t v30 = (*(unsigned __int8 *)(v27 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
      unint64_t v31 = (v41 + v30 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v32 = (v31 + 23) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v33 = (char *)swift_allocObject();
      uint64_t v34 = v44;
      *((void *)v33 + 2) = v44[72];
      *((void *)v33 + 3) = v34[73];
      *((void *)v33 + 4) = v25;
      *((void *)v33 + 5) = v34[74];
      uint64_t v36 = v46;
      uint64_t v35 = v47;
      *((void *)v33 + 6) = v34[75];
      *((void *)v33 + 7) = v35;
      *((void *)v33 + 8) = v36;
      (*(void (**)(char *, char *, uint64_t))(v27 + 32))(&v33[v30], v29, v25);
      unint64_t v37 = &v33[v31];
      uint64_t v38 = v50;
      *(void *)unint64_t v37 = v49;
      *((void *)v37 + 1) = v38;
      unint64_t v39 = v45;
      *(void *)&v33[v32] = v45;
      swift_retain();
      swift_retain();
      sub_1000CE628(v39);
      sub_10035B614((uint64_t)"checkIsInIgnoredHierarchy(_:request:completion:)", 48, 2, (uint64_t)Filename.init(rawValue:), 0, (uint64_t)sub_1000D22F8, (uint64_t)v33);
      return swift_release();
    }
  }
  return v49(1, 0);
}

uint64_t sub_1000C0BF0(uint64_t *a1, uint64_t a2, void (*a3)(uint64_t, void), uint64_t a4, unint64_t a5, void (*a6)(void, void), uint64_t a7)
{
  uint64_t v68 = a7;
  uint64_t v73 = a2;
  uint64_t v74 = a6;
  unint64_t v60 = a5;
  uint64_t v66 = a4;
  uint64_t v70 = a3;
  uint64_t v8 = *a1;
  uint64_t v9 = *(void *)(*a1 + 592);
  uint64_t v10 = *(void *)(*a1 + 576);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v77 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v79 = swift_getAssociatedConformanceWitness();
  uint64_t v55 = type metadata accessor for FileItemVersion();
  uint64_t v58 = sub_10096C890();
  uint64_t v57 = *(void *)(v58 - 8);
  __chkstk_darwin(v58);
  uint64_t v56 = (char *)&v53 - v11;
  uint64_t v72 = swift_getAssociatedTypeWitness();
  uint64_t v75 = *(void *)(v72 - 8);
  uint64_t v12 = __chkstk_darwin(v72);
  uint64_t v65 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v80 = (char *)&v53 - v15;
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v53 - v16;
  uint64_t v18 = *(void *)(v8 + 584);
  uint64_t v19 = *(void *)(v8 + 600);
  uint64_t v71 = v10;
  uint64_t AssociatedTypeWitness = v10;
  uint64_t v77 = v18;
  uint64_t v67 = v9;
  uint64_t AssociatedConformanceWitness = v9;
  uint64_t v79 = v19;
  uint64_t v20 = type metadata accessor for ItemReconciliation();
  uint64_t v21 = sub_10096C890();
  uint64_t v61 = *(void *)(v21 - 8);
  uint64_t v62 = v21;
  uint64_t v22 = __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v53 - v23;
  uint64_t v25 = *(void *)(v20 - 8);
  __chkstk_darwin(v22);
  uint64_t v27 = (char *)&v53 - v26;
  uint64_t v59 = a1;
  uint64_t v28 = v68;
  uint64_t v64 = *(void (**)(void))(v68 + 64);
  v64(v74);
  uint64_t v29 = v69;
  sub_1000DEDD8((uint64_t)v17, (uint64_t)v24);
  if (v29)
  {
    swift_errorRelease();
    uint64_t v30 = v72;
    unint64_t v63 = *(void (**)(char *, uint64_t))(v75 + 8);
    v63(v17, v72);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v25 + 56))(v24, 1, 1, v20);
    uint64_t v69 = 0;
LABEL_5:
    uint64_t v34 = v28;
    uint64_t v35 = v74;
    (*(void (**)(char *, uint64_t))(v61 + 8))(v24, v62);
    goto LABEL_6;
  }
  uint64_t v54 = v27;
  unint64_t v31 = v17;
  unint64_t v32 = *(void (**)(char *, uint64_t))(v75 + 8);
  uint64_t v30 = v72;
  v32(v31, v72);
  int v33 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48))(v24, 1, v20);
  uint64_t v69 = 0;
  if (v33 == 1)
  {
    unint64_t v63 = v32;
    goto LABEL_5;
  }
  uint64_t v52 = v54;
  (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v54, v24, v20);
  if ((v52[*(int *)(type metadata accessor for ItemReconciliationHalf() + 36)] & 0x10) != 0)
  {
    v70(1, 0);
    return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v52, v20);
  }
  unint64_t v63 = v32;
  (*(void (**)(char *, uint64_t))(v25 + 8))(v52, v20);
  uint64_t v34 = v28;
  uint64_t v35 = v74;
LABEL_6:
  uint64_t v74 = *(void (**)(void, void))(v34 + 72);
  v74(v35, v34);
  uint64_t v36 = v65;
  ((void (*)(void, uint64_t))v64)(v35, v34);
  swift_getAssociatedConformanceWitness();
  char v37 = sub_10096BBE0();
  uint64_t v38 = v80;
  char v39 = v37;
  uint64_t v40 = v75 + 8;
  uint64_t v41 = v36;
  uint64_t v42 = v63;
  v63(v41, v30);
  uint64_t v75 = v40;
  v42(v38, v30);
  if (v39) {
    return ((uint64_t (*)(void, void))v70)(0, 0);
  }
  uint64_t v44 = v35;
  unint64_t v45 = v59;
  uint64_t v46 = *(void *)(v59[4] + 16);
  swift_retain();
  v74(v44, v34);
  uint64_t v47 = v56;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v55 - 8) + 56))(v56, 1, 1);
  uint64_t v48 = (void *)swift_allocObject();
  v48[2] = v44;
  v48[3] = v34;
  v48[4] = v70;
  v48[5] = v66;
  v48[6] = v45;
  unint64_t v49 = v60;
  v48[7] = v60;
  uint64_t v50 = *(void (**)(char *, char *, void, uint64_t, uint64_t (*)(uint64_t), void *))(*(void *)v46 + 136);
  swift_retain();
  swift_retain();
  sub_1000CE628(v49);
  uint64_t v51 = v80;
  v50(v80, v47, 0, 2, sub_1000D23D0, v48);
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v57 + 8))(v47, v58);
  return ((uint64_t (*)(char *, uint64_t))v42)(v51, v72);
}

uint64_t sub_1000C13B0(uint64_t a1, void (*a2)(uint64_t, uint64_t), uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v20 = a5;
  uint64_t v8 = *a4;
  uint64_t v9 = *(void *)(*a4 + 576);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(a1);
  uint64_t v12 = (char *)&v19 - v11;
  sub_10096C890();
  sub_100033BE8((uint64_t *)&unk_100ACB6B0);
  uint64_t v13 = sub_10096D510();
  __chkstk_darwin(v13);
  uint64_t v15 = (uint64_t *)((char *)&v19 - v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))((char *)&v19 - v14, a1, v13);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v17 = *v15;
    swift_errorRetain();
    a2(v17, 1);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v10 + 48))(v15, 1, v9) == 1)
  {
    return ((uint64_t (*)(void, void))a2)(0, 0);
  }
  else
  {
    (*(void (**)(char *, uint64_t *, uint64_t))(v10 + 32))(v12, v15, v9);
    sub_1000C083C(v12, v20, a2, a3, v9, *(void *)(v8 + 592));
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
}

uint64_t sub_1000C1644(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v35 = a3;
  uint64_t v9 = sub_10096B480();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10002B7CC(&qword_100ACD5F8);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002B70C(a1, (uint64_t)v15, &qword_100ACD5F8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_errorRelease();
    return a2(a1);
  }
  uint64_t v16 = sub_10002B7CC(&qword_100ACD600);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48))(v15, 1, v16) != 1)
  {
    sub_10002B770((uint64_t)v15, &qword_100ACD608);
    return a2(a1);
  }
  id v17 = (id)fpfs_current_or_default_log();
  sub_10096B490();
  sub_1000CE628(a4);
  uint64_t v18 = sub_10096B470();
  os_log_type_t v19 = sub_10096C5A0();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v34 = a5;
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v33 = swift_slowAlloc();
    uint64_t v38 = v33;
    *(_DWORD *)uint64_t v20 = 136315138;
    unint64_t v32 = v20 + 4;
    unint64_t v21 = sub_1005232CC(a4);
    uint64_t v36 = sub_100719D44(v21, v22, &v38);
    sub_10096C8C0();
    a5 = v34;
    swift_bridgeObjectRelease();
    sub_1000B6C28(a4);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Waiting for propagation of root to the FP request %s", v20, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1000B6C28(a4);
  }

  uint64_t v24 = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(**(void **)(*(void *)(a5 + 32) + 16) + 96))(&v38, v24);
  uint64_t v25 = (void *)swift_allocObject();
  uint64_t v26 = v35;
  v25[2] = a2;
  v25[3] = v26;
  v25[4] = a4;
  v25[5] = a5;
  uint64_t v27 = v38;
  uint64_t v28 = a5;
  char v29 = v39;
  uint64_t v30 = swift_allocObject();
  *(void *)(v30 + 16) = sub_1000D3174;
  *(void *)(v30 + 24) = v25;
  uint64_t v36 = v27;
  char v37 = v29;
  unint64_t v31 = (void *)swift_allocObject();
  sub_1000D3184((uint64_t)&v36, (uint64_t)(v31 + 2));
  v31[4] = a4;
  v31[5] = v28;
  v31[6] = sub_1000D3174;
  v31[7] = v25;
  sub_1000CE628(a4);
  swift_retain();
  swift_retain();
  sub_1000CE628(a4);
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1004A8A2C((uint64_t)"propagateToFP(itemID:request:completion:)", 41, 2, 0, (uint64_t)FPDDomainFPFSBackend.isDeadEnd(), 0, (uint64_t)sub_1000DEB20, v30, (uint64_t)sub_1000D31E0, (uint64_t)v31);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_1000C1AC8(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, unint64_t a4, uint64_t *a5)
{
  unint64_t v54 = a4;
  uint64_t v55 = a2;
  uint64_t v56 = a3;
  uint64_t v57 = a1;
  uint64_t v6 = *a5;
  uint64_t v7 = *(void *)(*a5 + 592);
  uint64_t v8 = *(void *)(*a5 + 576);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v51 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v52 = AssociatedTypeWitness;
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v53 = (char *)&v45 - v10;
  uint64_t v11 = sub_10096B480();
  uint64_t v49 = *(void *)(v11 - 8);
  uint64_t v50 = v11;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(v6 + 584);
  uint64_t v15 = *(void *)(v6 + 600);
  v59[0] = v8;
  v59[1] = v14;
  v59[2] = v7;
  v59[3] = v15;
  uint64_t v16 = type metadata accessor for ItemLookupResult();
  uint64_t v17 = sub_10096C890();
  sub_100033BE8((uint64_t *)&unk_100ACB6B0);
  uint64_t v18 = sub_10096D510();
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v45 - v19;
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))((char *)&v45 - v19, v57, v18);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_errorRelease();
    return v55(v57);
  }
  uint64_t v46 = v15;
  uint64_t v47 = v14;
  uint64_t v48 = a5;
  uint64_t v23 = (uint64_t)v53;
  unint64_t v22 = v54;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48))(v20, 1, v16) != 1)
  {
    (*(void (**)(char *, uint64_t))(*(void *)(v17 - 8) + 8))(v20, v17);
    return v55(v57);
  }
  id v24 = (id)fpfs_current_or_default_log();
  uint64_t v25 = v13;
  sub_10096B490();
  unint64_t v26 = v22;
  sub_1000CE628(v22);
  uint64_t v27 = sub_10096B470();
  os_log_type_t v28 = sub_10096C5A0();
  int v29 = v28;
  BOOL v30 = os_log_type_enabled(v27, v28);
  uint64_t v31 = v49;
  if (v30)
  {
    uint64_t v32 = swift_slowAlloc();
    LODWORD(v57) = v29;
    uint64_t v33 = (uint8_t *)v32;
    v59[0] = swift_slowAlloc();
    os_log_t v45 = v27;
    *(_DWORD *)uint64_t v33 = 136315138;
    unint64_t v34 = sub_1006A9894(v26, v8, v47, v7, v46);
    uint64_t v35 = v25;
    uint64_t v58 = sub_100719D44(v34, v36, v59);
    sub_10096C8C0();
    swift_bridgeObjectRelease();
    sub_1000B6C28(v26);
    os_log_t v37 = v45;
    _os_log_impl((void *)&_mh_execute_header, v45, (os_log_type_t)v57, "Waiting for propagation of root to the FP request %s", v33, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v38 = (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v35, v50);
  }
  else
  {
    sub_1000B6C28(v26);

    uint64_t v38 = (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v25, v50);
  }
  uint64_t v41 = v51;
  uint64_t v40 = v52;
  uint64_t v42 = v48;
  (*(void (**)(uint64_t))(**(void **)(v48[4] + 16) + 96))(v38);
  unint64_t v43 = (void *)swift_allocObject();
  uint64_t v44 = v56;
  v43[2] = v55;
  v43[3] = v44;
  v43[4] = v26;
  v43[5] = v42;
  sub_1000CE628(v26);
  swift_retain();
  swift_retain();
  sub_1000B0260(v23, v26, (uint64_t)sub_1000CF3BC, (uint64_t)v43);
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v41 + 8))(v23, v40);
}

uint64_t sub_1000C201C(uint64_t a1, void (*a2)(void *), uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v10 = sub_10096B480();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10002B7CC(&qword_100ACD5F8);
  __chkstk_darwin(v14);
  uint64_t v16 = (void *)((char *)v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a1)
  {
    *uint64_t v16 = a1;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    a2(v16);
    return sub_10002B770((uint64_t)v16, &qword_100ACD5F8);
  }
  else
  {
    uint64_t v42 = (void (*)(void))a2;
    id v18 = (id)fpfs_current_or_default_log();
    sub_10096B490();
    unsigned int v19 = (a4 >> 1) & 3;
    uint64_t v20 = (a4 >> 58) & 0x3C;
    sub_1000CE628(a4);
    uint64_t v21 = sub_10096B470();
    os_log_type_t v22 = sub_10096C5A0();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v41 = a5;
      uint64_t v23 = swift_slowAlloc();
      unsigned int v39 = (a4 >> 1) & 3;
      id v24 = (uint8_t *)v23;
      uint64_t v25 = swift_slowAlloc();
      uint64_t v40 = a3;
      uint64_t v44 = (void *)v25;
      int v38 = (a4 >> 58) & 0x3C;
      *(_DWORD *)id v24 = 136315138;
      v37[1] = v24 + 4;
      unint64_t v26 = sub_1005232CC(a4);
      uint64_t v43 = sub_100719D44(v26, v27, (uint64_t *)&v44);
      LODWORD(v20) = v38;
      sub_10096C8C0();
      a5 = v41;
      swift_bridgeObjectRelease();
      sub_1000B6C28(a4);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Root propagated, retry lookup request %s", v24, 0xCu);
      swift_arrayDestroy();
      a3 = v40;
      swift_slowDealloc();
      unsigned int v19 = v39;
      swift_slowDealloc();
    }
    else
    {
      sub_1000B6C28(a4);
    }

    uint64_t v28 = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    (*(void (**)(void **__return_ptr, uint64_t))(**(void **)(*(void *)(a5 + 40) + 16) + 96))(&v44, v28);
    int v29 = v44;
    sub_10002B7CC((uint64_t *)&unk_100ACEC80);
    uint64_t v30 = swift_allocObject();
    *(void *)(v30 + 16) = v29;
    *(_WORD *)(v30 + 24) = 256;
    *(unsigned char *)(v30 + 42) = 0;
    *(void *)(v30 + 32) = v29;
    *(_WORD *)(v30 + 40) = 256;
    uint64_t v31 = v42;
    if ((v19 | v20) == 0x1E)
    {
      a4 = *(void *)((a4 & 0xFFFFFFFFFFFFFF9) + 0x10);
      unint64_t v32 = a4;
    }
    else
    {
      uint64_t v33 = swift_allocObject();
      *(void *)(v33 + 16) = a4;
      unint64_t v32 = v33 | 0x7000000000000004;
    }
    sub_1000CE628(a4);
    uint64_t v34 = swift_allocObject();
    *(void *)(v34 + 16) = v30;
    *(void *)(v34 + 24) = a5;
    *(_WORD *)(v34 + 32) = 256;
    *(void *)(v34 + 40) = v31;
    *(void *)(v34 + 48) = a3;
    *(void *)(v34 + 56) = v32;
    uint64_t v35 = swift_allocObject();
    *(void *)(v35 + 16) = v31;
    *(void *)(v35 + 24) = a3;
    swift_retain_n();
    id v36 = v29;
    swift_retain();
    swift_retain();
    sub_1000CE628(v32);
    sub_1007D8110((uint64_t)"findExistingVFSItemFor(itemID:parentIsImported:bypassIsHidden:request:completionHandler:)", 89, 2, sub_1000DEB24, v35, (uint64_t)sub_1000D3128, v34);
    swift_release();
    swift_release();
    sub_1000B6C28(v32);
    return swift_release();
  }
}

uint64_t sub_1000C247C(uint64_t a1, void (*a2)(uint64_t *), uint64_t a3, unint64_t a4, uint64_t *a5)
{
  uint64_t v56 = a3;
  unint64_t v57 = a4;
  uint64_t v54 = a1;
  uint64_t v55 = a2;
  uint64_t v6 = *a5;
  uint64_t v7 = *(void *)(*a5 + 592);
  uint64_t v8 = *(void *)(*a5 + 576);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(v6 + 600);
  uint64_t v11 = *(void *)(v6 + 584);
  uint64_t v12 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v52 = AssociatedTypeWitness;
  uint64_t v53 = swift_getAssociatedConformanceWitness();
  uint64_t v50 = AssociatedConformanceWitness;
  uint64_t v51 = type metadata accessor for ReconciliationID();
  __chkstk_darwin(v51);
  uint64_t v15 = (char *)&v42 - v14;
  uint64_t v59 = v8;
  uint64_t v60 = v11;
  uint64_t v61 = v7;
  uint64_t v62 = v10;
  type metadata accessor for ItemLookupResult();
  sub_10096C890();
  sub_100033BE8((uint64_t *)&unk_100ACB6B0);
  uint64_t v16 = sub_10096D510();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  unsigned int v19 = (uint64_t *)((char *)&v42 - v18);
  uint64_t v20 = sub_10096B480();
  uint64_t v21 = __chkstk_darwin(v20);
  id v24 = (char *)&v42 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v54)
  {
    *unsigned int v19 = v54;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    v55(v19);
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v17 + 8))(v19, v16);
  }
  else
  {
    uint64_t v48 = v22;
    uint64_t v49 = v21;
    os_log_t v45 = v15;
    uint64_t v46 = a5;
    uint64_t v54 = v12;
    unint64_t v26 = v24;
    id v27 = (id)fpfs_current_or_default_log();
    sub_10096B490();
    sub_1000CE628(v57);
    uint64_t v47 = v26;
    uint64_t v28 = sub_10096B470();
    os_log_type_t v29 = sub_10096C5A0();
    BOOL v30 = os_log_type_enabled(v28, v29);
    uint64_t v31 = v50;
    if (v30)
    {
      unint64_t v32 = (uint8_t *)swift_slowAlloc();
      uint64_t v44 = swift_slowAlloc();
      uint64_t v59 = v44;
      *(_DWORD *)unint64_t v32 = 136315138;
      uint64_t v42 = v32 + 4;
      os_log_t v43 = v28;
      unint64_t v33 = v57;
      unint64_t v34 = sub_1006A9894(v57, v8, v11, v7, v10);
      uint64_t v58 = sub_100719D44(v34, v35, &v59);
      sub_10096C8C0();
      swift_bridgeObjectRelease();
      sub_1000B6C28(v33);
      os_log_t v36 = v43;
      _os_log_impl((void *)&_mh_execute_header, v43, v29, "Root propagated, retry lookup request %s", v32, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1000B6C28(v57);
    }
    (*(void (**)(char *, uint64_t))(v48 + 8))(v47, v49);
    uint64_t v38 = (uint64_t)v55;
    uint64_t v37 = v56;
    uint64_t v59 = v52;
    uint64_t v60 = v54;
    uint64_t v61 = v31;
    uint64_t v62 = v53;
    type metadata accessor for FPFSID();
    uint64_t v39 = (uint64_t)v45;
    (*(void (**)(void))(**(void **)(v46[5] + 16) + 96))();
    swift_storeEnumTagMultiPayload();
    uint64_t v40 = sub_10064C8FC(v39);
    unint64_t v41 = sub_1006A935C(v57);
    sub_1000AB9F8(v40, 1, 0, v41, v38, v37);
    sub_1000B6C28(v41);
    return swift_release();
  }
}

uint64_t sub_1000C29C8()
{
  return sub_10096D340() & 1;
}

uint64_t sub_1000C2A4C(char a1)
{
  if (!a1) {
    return 0xD000000000000013;
  }
  if (a1 == 1) {
    return 0x74616761706F7270;
  }
  return 0xD000000000000010;
}

uint64_t sub_1000C2AB4(uint64_t a1, void *a2)
{
  v6._countAndFlagsBits = a1;
  v3._rawValue = &off_100A6B160;
  v6._object = a2;
  unint64_t v4 = sub_10096CF30(v3, v6);
  swift_bridgeObjectRelease();
  if (v4 >= 3) {
    return 3;
  }
  else {
    return v4;
  }
}

uint64_t sub_1000C2B00()
{
  swift_getWitnessTable();

  return sub_10096D340();
}

uint64_t sub_1000C2B74(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return RawRepresentable<>.hashValue.getter(a1, a2, WitnessTable, &protocol witness table for String);
}

uint64_t sub_1000C2BE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return RawRepresentable<>.hash(into:)(a1, a2, a3, WitnessTable, &protocol witness table for String);
}

uint64_t sub_1000C2C50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return RawRepresentable<>._rawHashValue(seed:)(a1, a2, a3, WitnessTable, &protocol witness table for String);
}

uint64_t sub_1000C2CC0@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1000C2AB4(*(void *)a1, *(void **)(a1 + 8));
  *a2 = result;
  return result;
}

uint64_t sub_1000C2CFC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1000C2A4C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1000C2D30()
{
  return sub_1000C2A4C(*v0);
}

void sub_1000C2D40(uint64_t a1, int a2, int a3, unint64_t a4, void *a5, uint64_t a6, void (*a7)(void *), uint64_t a8)
{
  uint64_t v72 = a7;
  uint64_t v73 = a6;
  uint64_t v64 = a5;
  int v63 = a3;
  int v70 = a2;
  uint64_t v12 = *(void *)(*(void *)v8 + 576);
  uint64_t v13 = *(void *)(*(void *)v8 + 592);
  uint64_t v14 = *(void *)(*(void *)v8 + 600);
  uint64_t v76 = *(void *)(*(void *)v8 + 584);
  uint64_t v77 = v12;
  v80[0] = v12;
  v80[1] = v76;
  uint64_t v74 = v14;
  uint64_t v75 = v13;
  v80[2] = v13;
  v80[3] = v14;
  type metadata accessor for ItemLookupResult();
  sub_10096C890();
  sub_100033BE8((uint64_t *)&unk_100ACB6B0);
  uint64_t v15 = sub_10096D510();
  uint64_t v66 = *(void *)(v15 - 8);
  uint64_t v67 = v15;
  __chkstk_darwin(v15);
  uint64_t v65 = (uint64_t *)((char *)&v61 - v16);
  uint64_t v17 = sub_10096B480();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v71 = (char *)&v61 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v61 - v21;
  id v23 = (id)fpfs_current_or_default_log();
  sub_10096B490();
  sub_1000CE628(a4);
  sub_1000CE628(a4);
  swift_retain();
  id v24 = sub_10096B470();
  os_log_type_t v25 = sub_10096C5A0();
  BOOL v26 = os_log_type_enabled(v24, v25);
  uint64_t v78 = v18;
  if (v26)
  {
    uint64_t v68 = v17;
    uint64_t v69 = a8;
    uint64_t v27 = swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    uint64_t v61 = v28;
    v80[0] = v28;
    *(_DWORD *)uint64_t v27 = 136315906;
    uint64_t v29 = sub_10064CFB8(v28);
    uint64_t v79 = sub_100719D44(v29, v30, v80);
    sub_10096C8C0();
    uint64_t v62 = a1;
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v27 + 12) = 2080;
    if ((_BYTE)v70)
    {
      if (v70 == 1) {
        uint64_t v31 = 0x74616761706F7270;
      }
      else {
        uint64_t v31 = 0xD000000000000010;
      }
      if (v70 == 1) {
        unint64_t v32 = 0xED000053466F5465;
      }
      else {
        unint64_t v32 = 0x80000001009958D0;
      }
    }
    else
    {
      uint64_t v31 = 0xD000000000000013;
      unint64_t v32 = 0x80000001009958A0;
    }
    uint64_t v79 = sub_100719D44(v31, v32, v80);
    sub_10096C8C0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v27 + 22) = 2080;
    unint64_t v42 = sub_1006A9894(a4, v77, v76, v75, v74);
    unint64_t v44 = v43;
    sub_1000B6C28(a4);
    uint64_t v79 = sub_100719D44(v42, v44, v80);
    sub_10096C8C0();
    swift_bridgeObjectRelease();
    sub_1000B6C28(a4);
    *(_WORD *)(v27 + 32) = 2048;
    uint64_t v36 = v73;
    uint64_t v79 = v73;
    sub_10096C8C0();
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Lookup itemID %s with behavior %s request %s iteration %ld", (uint8_t *)v27, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    unint64_t v34 = *(uint64_t (**)(char *, uint64_t))(v78 + 8);
    uint64_t v17 = v68;
    uint64_t v35 = v34(v22, v68);
    uint64_t v33 = v69;
    a1 = v62;
    if (v36 >= 51) {
      goto LABEL_15;
    }
LABEL_10:
    if (sub_10064D2C8(v35))
    {
      sub_1000BC284(a4, (uint64_t)v72, v33);
    }
    else
    {
      unint64_t v37 = sub_1006A935C(a4);
      uint64_t v38 = swift_allocObject();
      *(void *)(v38 + 16) = v72;
      *(void *)(v38 + 24) = v33;
      *(void *)(v38 + 32) = v8;
      *(unsigned char *)(v38 + 40) = v70;
      *(void *)(v38 + 48) = a4;
      *(void *)(v38 + 56) = a1;
      char v39 = v63 & 1;
      *(unsigned char *)(v38 + 64) = v63 & 1;
      uint64_t v40 = v64;
      *(void *)(v38 + 72) = v64;
      *(void *)(v38 + 80) = v36;
      sub_1000CE628(a4);
      swift_retain();
      swift_retain();
      swift_retain();
      id v41 = v40;
      sub_1000AB9F8(a1, 0, v39, v37, (uint64_t)sub_1000D2910, v38);
      swift_release();
      sub_1000B6C28(v37);
    }
    return;
  }
  uint64_t v33 = a8;
  sub_1000B6C28(a4);
  swift_release();
  sub_1000B6C28(a4);

  unint64_t v34 = *(uint64_t (**)(char *, uint64_t))(v18 + 8);
  uint64_t v35 = v34(v22, v17);
  uint64_t v36 = v73;
  if (v73 < 51) {
    goto LABEL_10;
  }
LABEL_15:
  id v45 = (id)fpfs_current_or_default_log();
  uint64_t v46 = v71;
  sub_10096B490();
  sub_1000CE628(a4);
  sub_1000CE628(a4);
  swift_retain();
  uint64_t v47 = sub_10096B470();
  os_log_type_t v48 = sub_10096C5C0();
  if (os_log_type_enabled(v47, v48))
  {
    uint64_t v49 = swift_slowAlloc();
    uint64_t v73 = (uint64_t)v34;
    uint64_t v50 = v49;
    uint64_t v51 = swift_slowAlloc();
    v80[0] = v51;
    *(_DWORD *)uint64_t v50 = 136446466;
    uint64_t v68 = v17;
    uint64_t v52 = sub_10064CFB8(v51);
    uint64_t v79 = sub_100719D44(v52, v53, v80);
    uint64_t v69 = v33;
    sub_10096C8C0();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v50 + 12) = 2082;
    unint64_t v54 = sub_1006A9894(a4, v77, v76, v75, v74);
    unint64_t v56 = v55;
    sub_1000B6C28(a4);
    uint64_t v79 = sub_100719D44(v54, v56, v80);
    sub_10096C8C0();
    swift_bridgeObjectRelease();
    sub_1000B6C28(a4);
    _os_log_impl((void *)&_mh_execute_header, v47, v48, "Recursion too deep for lookup of itemID %{public}s request %{public}s", (uint8_t *)v50, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    ((void (*)(char *, uint64_t))v73)(v71, v68);
  }
  else
  {
    sub_1000B6C28(a4);
    swift_release();
    sub_1000B6C28(a4);

    v34(v46, v17);
  }
  NSString v57 = sub_10096BC00();
  id v58 = (id)FPInvalidParameterError();

  if (v58)
  {
    uint64_t v59 = v65;
    *uint64_t v65 = v58;
    uint64_t v60 = v67;
    swift_storeEnumTagMultiPayload();
    v72(v59);
    (*(void (**)(void *, uint64_t))(v66 + 8))(v59, v60);
  }
  else
  {
    __break(1u);
  }
}

void sub_1000C35A4(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t a4, int a5, unint64_t a6, uint64_t a7, int a8, void *a9, unint64_t a10)
{
  LODWORD(v99) = a8;
  unint64_t v101 = a6;
  uint64_t v102 = a7;
  LODWORD(v103) = a5;
  uint64_t v100 = a4;
  uint64_t v13 = sub_10096B480();
  uint64_t v96 = *(void *)(v13 - 8);
  uint64_t v97 = v13;
  uint64_t v14 = __chkstk_darwin(v13);
  unint64_t v95 = (char *)&v93 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v98 = (char *)&v93 - v16;
  uint64_t v17 = sub_10002B7CC(&qword_100ACD600);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v93 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_10002B7CC(&qword_100ACD5F8);
  uint64_t v22 = __chkstk_darwin(v21);
  id v24 = (char *)&v93 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  BOOL v26 = (char *)&v93 - v25;
  sub_10002B70C(a1, (uint64_t)&v93 - v25, &qword_100ACD5F8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_errorRelease();
    a2(a1);
    return;
  }
  uint64_t v93 = a3;
  unint64_t v94 = a2;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v26, 1, v17) != 1)
  {
    sub_10001AE98((uint64_t)v26, (uint64_t)v20, &qword_100ACD600);
    if ((_BYTE)v103)
    {
      uint64_t v43 = v93;
      unint64_t v42 = v94;
      unint64_t v31 = v101;
      if (v103 != 1)
      {
        char v57 = 1;
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v43 = v93;
      unint64_t v42 = v94;
      unint64_t v31 = v101;
    }
    char v57 = sub_10096D2D0();
LABEL_19:
    swift_bridgeObjectRelease();
    if (sub_1000D069C((uint64_t)v20, v57 & 1, v31))
    {
      v42(a1);
      sub_10002B770((uint64_t)v20, &qword_100ACD600);
      return;
    }
    sub_10002B770((uint64_t)v20, &qword_100ACD600);
    uint64_t v32 = v102;
    goto LABEL_30;
  }
  if (!(_BYTE)v103)
  {
    swift_bridgeObjectRelease();
    uint64_t v27 = v98;
    goto LABEL_13;
  }
  uint64_t v27 = v98;
  char v28 = sub_10096D2D0();
  swift_bridgeObjectRelease();
  if (v28)
  {
LABEL_13:
    id v44 = (id)fpfs_current_or_default_log();
    sub_10096B490();
    unint64_t v45 = v101;
    sub_1000CE628(v101);
    uint64_t v46 = v102;
    swift_retain();
    sub_1000CE628(v45);
    uint64_t v47 = sub_10096B470();
    int v48 = sub_10096C5A0();
    if (os_log_type_enabled(v47, (os_log_type_t)v48))
    {
      LODWORD(v100) = v48;
      os_log_t v103 = v47;
      uint64_t v99 = v18;
      uint64_t v49 = swift_slowAlloc();
      v104[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v49 = 136315394;
      swift_beginAccess();
      uint64_t v50 = v46;
      uint64_t v51 = *(void **)(v46 + 32);
      uint64_t v52 = *(unsigned __int8 *)(v50 + 40);
      if (*(unsigned char *)(v50 + 41))
      {
        id v53 = v51;
        uint64_t v54 = NSFileProviderItemIdentifier.description.getter();
        unint64_t v56 = v55;
        sub_1000D30C4(v51, v52, 1);
      }
      else
      {
        uint64_t v54 = VFSItemID.parseableString.getter((uint64_t)v51, v52);
        unint64_t v56 = v58;
      }
      uint64_t v105 = sub_100719D44(v54, v56, v104);
      sub_10096C8C0();
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v49 + 12) = 2080;
      unint64_t v59 = v101;
      unint64_t v60 = sub_1005232CC(v101);
      unint64_t v62 = v61;
      sub_1000B6C28(v59);
      uint64_t v105 = sub_100719D44(v60, v62, v104);
      sub_10096C8C0();
      swift_bridgeObjectRelease();
      sub_1000B6C28(v59);
      os_log_t v63 = v103;
      _os_log_impl((void *)&_mh_execute_header, v103, (os_log_type_t)v100, "Item cannot be found on disk, only looking for existing item %s, request %s", (uint8_t *)v49, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v96 + 8))(v98, v97);
      uint64_t v18 = v99;
    }
    else
    {
      sub_1000B6C28(v45);
      swift_release();
      sub_1000B6C28(v45);

      (*(void (**)(char *, uint64_t))(v96 + 8))(v27, v97);
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v24, 1, 1, v17);
    swift_storeEnumTagMultiPayload();
    v94((uint64_t)v24);
    sub_10002B770((uint64_t)v24, &qword_100ACD5F8);
    return;
  }
  id v29 = (id)fpfs_current_or_default_log();
  unint64_t v30 = v95;
  sub_10096B490();
  unint64_t v31 = v101;
  sub_1000CE628(v101);
  uint64_t v32 = v102;
  swift_retain();
  sub_1000CE628(v31);
  uint64_t v33 = sub_10096B470();
  os_log_type_t v34 = sub_10096C5A0();
  if (os_log_type_enabled(v33, v34))
  {
    uint64_t v35 = swift_slowAlloc();
    v107[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v35 = 136315394;
    swift_beginAccess();
    uint64_t v36 = *(void **)(v32 + 32);
    uint64_t v37 = *(unsigned __int8 *)(v32 + 40);
    if (*(unsigned char *)(v32 + 41))
    {
      id v38 = v36;
      uint64_t v39 = NSFileProviderItemIdentifier.description.getter();
      unint64_t v41 = v40;
      sub_1000D30C4(v36, v37, 1);
    }
    else
    {
      uint64_t v39 = VFSItemID.parseableString.getter(*(void *)(v32 + 32), *(unsigned char *)(v32 + 40));
      unint64_t v41 = v64;
    }
    uint64_t v105 = sub_100719D44(v39, v41, v107);
    sub_10096C8C0();
    uint64_t v65 = v102;
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v35 + 12) = 2080;
    unint64_t v66 = sub_1005232CC(v31);
    unint64_t v68 = v67;
    sub_1000B6C28(v31);
    uint64_t v105 = sub_100719D44(v66, v68, v107);
    uint64_t v32 = v65;
    sub_10096C8C0();
    swift_bridgeObjectRelease();
    sub_1000B6C28(v31);
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "Item cannot be found on disk, looking for parent for %s request %s", (uint8_t *)v35, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v96 + 8))(v95, v97);
  }
  else
  {
    sub_1000B6C28(v31);
    swift_release();
    sub_1000B6C28(v31);

    (*(void (**)(char *, uint64_t))(v96 + 8))(v30, v97);
  }
  uint64_t v43 = v93;
  unint64_t v42 = v94;
LABEL_30:
  uint64_t v69 = swift_allocObject();
  *(void *)(v69 + 16) = v42;
  *(void *)(v69 + 24) = v43;
  *(void *)(v69 + 32) = v100;
  *(unsigned char *)(v69 + 40) = (_BYTE)v103;
  *(unsigned char *)(v69 + 41) = v99 & 1;
  *(void *)(v69 + 48) = v31;
  *(void *)(v69 + 56) = a9;
  unint64_t v101 = a10;
  *(void *)(v69 + 64) = a10;
  *(void *)(v69 + 72) = v32;
  swift_beginAccess();
  int v70 = *(void **)(v32 + 32);
  uint64_t v71 = *(unsigned __int8 *)(v32 + 40);
  if (*(unsigned char *)(v32 + 41) == 1)
  {
    swift_retain();
    swift_retain();
    sub_1000CE628(v31);
    id v72 = a9;
    swift_retain_n();
    sub_1000CE628(v31);
    swift_retain();
    swift_retain();
    id v73 = v72;
    sub_10009C394(v70, v71, 1);
    if (qword_100ACC118 != -1) {
      goto LABEL_43;
    }
    while (1)
    {
      uint64_t v74 = _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
      uint64_t v76 = v75;
      if (v74 == _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0() && v76 == v77)
      {
        swift_bridgeObjectRelease_n();
        sub_1000D30C4(v70, v71, 1);
        unint64_t v42 = v94;
      }
      else
      {
        char v88 = sub_10096D2D0();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1000D30C4(v70, v71, 1);
        unint64_t v42 = v94;
        if ((v88 & 1) == 0) {
          goto LABEL_40;
        }
      }
LABEL_37:
      uint64_t v80 = v100;
      (*(void (**)(uint64_t *__return_ptr))(**(void **)(*(void *)(v100 + 32) + 16) + 96))(&v105);
      uint64_t v81 = v105;
      char v82 = v106;
      sub_10002B7CC((uint64_t *)&unk_100ACEC80);
      uint64_t v83 = swift_allocObject();
      *(void *)(v83 + 16) = v81;
      *(unsigned char *)(v83 + 24) = v82;
      *(unsigned char *)(v83 + 25) = 0;
      *(void *)(v83 + 32) = v81;
      *(unsigned char *)(v83 + 40) = v82;
      *(_WORD *)(v83 + 41) = 0;
      uint64_t v71 = v101 + 1;
      if (!__OFADD__(v101, 1)) {
        break;
      }
      __break(1u);
LABEL_43:
      swift_once();
    }
    uint64_t v84 = v83;
    uint64_t v85 = v102;
    swift_retain();
    sub_1000CE628(v31);
    swift_retain();
    swift_retain();
    id v86 = a9;
    uint64_t v87 = swift_retain();
    sub_1000D4778(v87, (int)v103, v99 & 1, v31, v86, v71, v80, v42, v43, v103, v85, v31, v80, v99 & 1, v84, v86);
    swift_release();
    swift_release();

    sub_1000B6C28(v31);
    swift_release();
    swift_release();
    swift_release_n();
  }
  else
  {
    swift_retain();
    swift_retain();
    sub_1000CE628(v31);
    id v78 = a9;
    swift_retain_n();
    sub_1000CE628(v31);
    swift_retain();
    swift_retain();
    id v79 = v78;
    if (v71 >= 2 && v70) {
      goto LABEL_37;
    }
LABEL_40:
    uint64_t v89 = swift_allocObject();
    *(void *)(v89 + 16) = sub_1000D3894;
    *(void *)(v89 + 24) = v69;
    uint64_t v90 = (void *)swift_allocObject();
    uint64_t v91 = v100;
    v90[2] = v102;
    v90[3] = v91;
    v90[4] = sub_1000D3894;
    uint64_t v90[5] = v69;
    uint64_t v92 = swift_allocObject();
    *(void *)(v92 + 16) = sub_1000D38FC;
    *(void *)(v92 + 24) = v89;
    swift_retain_n();
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1007D8110((uint64_t)"findParentID(for:completionHandler:)", 36, 2, sub_1000D399C, v92, (uint64_t)sub_1000D397C, (uint64_t)v90);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  sub_1000B6C28(v31);
  swift_release();
}

uint64_t sub_1000C42C4(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, void *a4, int a5, unint64_t a6, uint64_t a7, int a8, void *a9, uint64_t a10)
{
  LODWORD(v87) = a8;
  uint64_t v90 = a7;
  unint64_t v91 = a6;
  LODWORD(v98) = a5;
  uint64_t v99 = a2;
  uint64_t v100 = a3;
  uint64_t v12 = (void *)*a4;
  uint64_t v13 = sub_10096B480();
  uint64_t v88 = *(void *)(v13 - 8);
  uint64_t v89 = v13;
  uint64_t v14 = __chkstk_darwin(v13);
  unint64_t v94 = (char *)&v82 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  unint64_t v95 = (char *)&v82 - v16;
  uint64_t v17 = v12[73];
  uint64_t v18 = v12[74];
  uint64_t v19 = v12[75];
  uint64_t v92 = v12[72];
  uint64_t v93 = v18;
  uint64_t v103 = v92;
  uint64_t v104 = v17;
  uint64_t v97 = v17;
  uint64_t v105 = v18;
  uint64_t v106 = v19;
  uint64_t v20 = type metadata accessor for ItemLookupResult();
  uint64_t v96 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)&v82 - v21;
  sub_10096C890();
  sub_100033BE8((uint64_t *)&unk_100ACB6B0);
  uint64_t v23 = sub_10096D510();
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v27 = (char *)&v82 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  id v29 = (char *)&v82 - v28;
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))((char *)&v82 - v28, a1, v23);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_errorRelease();
    return v99(a1);
  }
  uint64_t v83 = a1;
  uint64_t v84 = v27;
  uint64_t v85 = v23;
  unint64_t v31 = v94;
  uint64_t v32 = v95;
  id v86 = a4;
  uint64_t v34 = v96;
  uint64_t v33 = v97;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v96 + 48))(v29, 1, v20) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v22, v29, v20);
    uint64_t v57 = v92;
    uint64_t v56 = v93;
    char v58 = sub_1000C29C8();
    unint64_t v59 = v91;
    if (sub_1000D0DD0((uint64_t)v22, v58 & 1, v91, v57, v33, v56, v19))
    {
      v99(v83);
      return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v22, v20);
    }
    (*(void (**)(char *, uint64_t))(v34 + 8))(v22, v20);
    uint64_t v76 = v99;
    uint64_t v75 = v100;
    uint64_t v71 = v90;
    char v77 = (char)v87;
    uint64_t v65 = v86;
    goto LABEL_16;
  }
  LOBYTE(v101) = v98;
  char v102 = 0;
  uint64_t v35 = v92;
  uint64_t v103 = v92;
  uint64_t v104 = v33;
  uint64_t v36 = v93;
  uint64_t v105 = v93;
  uint64_t v106 = v19;
  _s14LookupBehaviorOMa();
  swift_getWitnessTable();
  char v37 = sub_10096D340();
  id v38 = (id)fpfs_current_or_default_log();
  if ((v37 & 1) == 0)
  {
    unint64_t v60 = v31;
    sub_10096B490();
    unint64_t v59 = v91;
    sub_1000CE628(v91);
    sub_1000CE628(v59);
    uint64_t v61 = v90;
    swift_retain();
    unint64_t v62 = sub_10096B470();
    os_log_type_t v63 = sub_10096C5A0();
    BOOL v64 = os_log_type_enabled(v62, v63);
    uint64_t v65 = v86;
    if (v64)
    {
      uint64_t v66 = swift_slowAlloc();
      uint64_t v67 = swift_slowAlloc();
      uint64_t v96 = v67;
      uint64_t v103 = v67;
      *(_DWORD *)uint64_t v66 = 136315394;
      uint64_t v68 = sub_10064CFB8(v67);
      uint64_t v101 = sub_100719D44(v68, v69, &v103);
      unint64_t v59 = v91;
      sub_10096C8C0();
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v66 + 12) = 2080;
      unint64_t v70 = sub_1006A9894(v59, v92, v97, v36, v19);
      uint64_t v71 = v61;
      uint64_t v72 = v70;
      unint64_t v74 = v73;
      sub_1000B6C28(v59);
      uint64_t v101 = sub_100719D44(v72, v74, &v103);
      sub_10096C8C0();
      swift_bridgeObjectRelease();
      sub_1000B6C28(v59);
      _os_log_impl((void *)&_mh_execute_header, v62, v63, "Item cannot be found on disk, looking for parent for %s request %s", (uint8_t *)v66, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v88 + 8))(v94, v89);
      uint64_t v76 = v99;
      uint64_t v75 = v100;
    }
    else
    {
      sub_1000B6C28(v59);
      swift_release();
      sub_1000B6C28(v59);

      (*(void (**)(char *, uint64_t))(v88 + 8))(v60, v89);
      uint64_t v76 = v99;
      uint64_t v75 = v100;
      uint64_t v71 = v61;
    }
    char v77 = (char)v87;
LABEL_16:
    uint64_t v80 = swift_allocObject();
    *(void *)(v80 + 16) = v76;
    *(void *)(v80 + 24) = v75;
    *(void *)(v80 + 32) = v65;
    *(unsigned char *)(v80 + 40) = v98;
    *(unsigned char *)(v80 + 41) = v77 & 1;
    *(void *)(v80 + 48) = v59;
    *(void *)(v80 + 56) = a9;
    *(void *)(v80 + 64) = a10;
    *(void *)(v80 + 72) = v71;
    sub_1000CE628(v59);
    swift_retain();
    swift_retain();
    swift_retain();
    id v81 = a9;
    sub_1000A9458(v71, (void (*)(void))sub_1000D2944, v80);
    return swift_release();
  }
  uint64_t v98 = v20;
  uint64_t v39 = v32;
  sub_10096B490();
  unint64_t v40 = v91;
  sub_1000CE628(v91);
  sub_1000CE628(v40);
  swift_retain();
  unint64_t v41 = sub_10096B470();
  os_log_type_t v42 = sub_10096C5A0();
  int v43 = v42;
  BOOL v44 = os_log_type_enabled(v41, v42);
  uint64_t v46 = v88;
  uint64_t v45 = v89;
  if (v44)
  {
    uint64_t v47 = swift_slowAlloc();
    os_log_t v87 = v41;
    uint64_t v48 = v47;
    uint64_t v49 = swift_slowAlloc();
    unint64_t v94 = (char *)v49;
    uint64_t v103 = v49;
    *(_DWORD *)uint64_t v48 = 136315394;
    uint64_t v50 = sub_10064CFB8(v49);
    uint64_t v101 = sub_100719D44(v50, v51, &v103);
    LODWORD(v86) = v43;
    sub_10096C8C0();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v48 + 12) = 2080;
    unint64_t v52 = sub_1006A9894(v40, v35, v97, v93, v19);
    unint64_t v54 = v53;
    sub_1000B6C28(v40);
    uint64_t v101 = sub_100719D44(v52, v54, &v103);
    sub_10096C8C0();
    swift_bridgeObjectRelease();
    sub_1000B6C28(v40);
    os_log_t v55 = v87;
    _os_log_impl((void *)&_mh_execute_header, v87, (os_log_type_t)v86, "Item cannot be found on disk, only looking for existing item %s, request %s", (uint8_t *)v48, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v46 + 8))(v95, v89);
  }
  else
  {
    sub_1000B6C28(v40);
    swift_release();
    sub_1000B6C28(v40);

    (*(void (**)(char *, uint64_t))(v46 + 8))(v39, v45);
  }
  uint64_t v78 = v85;
  id v79 = v84;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v96 + 56))(v84, 1, 1, v98);
  swift_storeEnumTagMultiPayload();
  v99((uint64_t)v79);
  return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v79, v78);
}

uint64_t sub_1000C4C30(uint64_t a1, char a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t a5, int a6, int a7, unint64_t a8, void *a9, uint64_t a10, uint64_t a11)
{
  int v26 = a7;
  id v25 = a9;
  uint64_t v18 = sub_10002B7CC(&qword_100ACD5F8);
  uint64_t result = __chkstk_darwin(v18);
  uint64_t v21 = (uint64_t *)((char *)&v23 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a2)
  {
    *uint64_t v21 = a1;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    a3((uint64_t)v21);
    return sub_10002B770((uint64_t)v21, &qword_100ACD5F8);
  }
  else
  {
    uint64_t v24 = a3;
    if (__OFADD__(a10, 1))
    {
      __break(1u);
    }
    else
    {
      sub_1000D5B30(a1, 0);
      swift_retain();
      swift_retain();
      sub_1000CE628(a8);
      swift_retain();
      id v22 = v25;
      sub_1000D4778(a1, a6, v26 & 1, a8, v22, a10 + 1, a5, v24, a4, a6, a11, a8, a5, v26 & 1, a1, v22);

      sub_1000D5B18(a1, 0);
      swift_release();
      sub_1000B6C28(a8);
      swift_release();
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_1000C4E14(uint64_t a1, char a2, void (*a3)(char *), uint64_t a4, void *a5, unsigned int a6, int a7, unint64_t a8, void *a9, uint64_t a10, uint64_t *a11)
{
  int v38 = a7;
  unsigned int v39 = a6;
  BOOL v44 = a3;
  uint64_t v45 = a4;
  uint64_t v43 = a1;
  uint64_t v13 = (void *)*a5;
  uint64_t v14 = *a11;
  unint64_t v40 = a8;
  uint64_t v41 = v14;
  uint64_t v15 = v13[72];
  uint64_t v16 = v13[73];
  uint64_t v17 = v13[74];
  uint64_t v18 = v13[75];
  *(void *)&long long v48 = v15;
  *((void *)&v48 + 1) = v16;
  *(void *)&long long v49 = v17;
  *((void *)&v49 + 1) = v18;
  type metadata accessor for ItemLookupResult();
  uint64_t v19 = sub_10096C890();
  sub_100033BE8((uint64_t *)&unk_100ACB6B0);
  uint64_t v42 = v19;
  uint64_t v20 = sub_10096D510();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t result = __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v37 - v23;
  if (a2)
  {
    uint64_t v46 = v43;
    char v47 = 1;
    uint64_t v33 = __chkstk_darwin(result);
    *(&v37 - 4) = v15;
    *(&v37 - 3) = v16;
    *(&v37 - 2) = v17;
    *(&v37 - 1) = v18;
    long long v34 = *(_OWORD *)(v41 + 96);
    long long v48 = *(_OWORD *)(v41 + 80);
    long long v49 = v34;
    uint64_t v35 = v33;
    type metadata accessor for FPFSID();
    uint64_t v36 = sub_10096D510();
    sub_1000C5150((void (*)(char *))sub_1000D2978, v36, (uint64_t)v24);
    v44(v24);
    return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v24, v35);
  }
  else
  {
    uint64_t v26 = v43;
    id v25 = v44;
    uint64_t v27 = v45;
    if (__OFADD__(a10, 1))
    {
      __break(1u);
    }
    else
    {
      uint64_t v28 = swift_allocObject();
      *(void *)(v28 + 16) = v25;
      *(void *)(v28 + 24) = v27;
      char v29 = v38;
      uint64_t v30 = v39;
      *(unsigned char *)(v28 + 32) = v39;
      unint64_t v31 = v40;
      *(void *)(v28 + 40) = a11;
      *(void *)(v28 + 48) = v31;
      *(void *)(v28 + 56) = a5;
      uint64_t v32 = v29 & 1;
      *(unsigned char *)(v28 + 64) = v29 & 1;
      *(void *)(v28 + 72) = v26;
      *(void *)(v28 + 80) = a9;
      sub_1000D5B30(v26, 0);
      sub_1000D5B30(v26, 0);
      swift_retain();
      swift_retain();
      sub_1000CE628(v31);
      swift_retain();
      sub_1000C2D40(v26, v30, v32, v31, a9, a10 + 1, sub_1000D2960, v28);
      swift_release();
      return sub_1000D5B18(v26, 0);
    }
  }
  return result;
}

uint64_t sub_1000C5150@<X0>(void (*a1)(char *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(a1);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v13 + 16))(v12, v14);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(uint64_t, char *, void))(*(void *)(*(void *)(a2 + 24) - 8) + 32))(a3, v12, *(void *)(a2 + 24));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v12, v6);
    a1(v10);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  sub_10096D510();
  return swift_storeEnumTagMultiPayload();
}

char *sub_1000C5364(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, int a4, uint64_t a5, unint64_t a6, uint64_t a7, int a8, uint64_t a9, id a10)
{
  int v154 = a8;
  uint64_t v155 = a7;
  unint64_t v157 = a6;
  uint64_t v158 = a5;
  int v162 = a4;
  os_log_t v165 = a2;
  uint64_t v166 = a3;
  uint64_t v11 = sub_10002B7CC((uint64_t *)&unk_100ACD990);
  __chkstk_darwin(v11 - 8);
  uint64_t v148 = (char *)&v138 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v146 = sub_10096B760();
  uint64_t v153 = *(void *)(v146 - 8);
  __chkstk_darwin(v146);
  int v151 = (char *)&v138 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v150 = sub_10096B7D0();
  uint64_t v149 = *(void *)(v150 - 8);
  __chkstk_darwin(v150);
  id v147 = (char *)&v138 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10096B480();
  uint64_t v16 = *(void ***)(v15 - 8);
  uint64_t v160 = v15;
  v161 = v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v142 = (char *)&v138 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v17);
  unint64_t v141 = (char *)&v138 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v152 = (char *)&v138 - v22;
  __chkstk_darwin(v21);
  os_log_t v159 = (char *)&v138 - v23;
  uint64_t v156 = type metadata accessor for VFSItem(0);
  uint64_t v143 = *(void *)(v156 - 8);
  uint64_t v24 = __chkstk_darwin(v156);
  uint64_t v145 = (uint64_t)&v138 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v144 = v25;
  __chkstk_darwin(v24);
  uint64_t v163 = (uint64_t)&v138 - v26;
  uint64_t v27 = sub_10002B7CC(&qword_100ACD600);
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = __chkstk_darwin(v27);
  unint64_t v31 = (char *)&v138 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = __chkstk_darwin(v29);
  long long v34 = (char *)&v138 - v33;
  uint64_t v35 = __chkstk_darwin(v32);
  uint64_t v37 = (char *)&v138 - v36;
  __chkstk_darwin(v35);
  uint64_t v164 = (uint64_t)&v138 - v38;
  uint64_t v39 = sub_10002B7CC(&qword_100ACD5F8);
  uint64_t v40 = __chkstk_darwin(v39);
  uint64_t v42 = (char *)&v138 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v40);
  BOOL v44 = (char *)&v138 - v43;
  sub_10002B70C(a1, (uint64_t)&v138 - v43, &qword_100ACD5F8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_errorRelease();
    return (char *)v165(a1);
  }
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v44, 1, v27) == 1) {
    return (char *)v165(a1);
  }
  uint64_t v46 = (uint64_t)v44;
  uint64_t v47 = v164;
  sub_10001AE98(v46, v164, &qword_100ACD600);
  if (*(unsigned char *)(v47 + *(int *)(v27 + 56)))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v28 + 56))(v42, 1, 1, v27);
    swift_storeEnumTagMultiPayload();
    v165((uint64_t)v42);
    sub_10002B770((uint64_t)v42, &qword_100ACD5F8);
LABEL_51:
    uint64_t v123 = v47;
    return (char *)sub_10002B770(v123, &qword_100ACD600);
  }
  sub_1000D37D0(v47, v163, type metadata accessor for VFSItem);
  unint64_t v140 = (unint64_t)"ontent";
  if ((_BYTE)v162)
  {
    unint64_t v48 = v157;
    uint64_t v49 = v160;
    if (v162 != 1)
    {
      swift_bridgeObjectRelease();
      sub_10002B70C(v47, (uint64_t)v37, &qword_100ACD600);
      goto LABEL_15;
    }
  }
  else
  {
    unint64_t v48 = v157;
    uint64_t v49 = v160;
  }
  char v50 = sub_10096D2D0();
  swift_bridgeObjectRelease();
  sub_10002B70C(v47, (uint64_t)v37, &qword_100ACD600);
  if (v50)
  {
LABEL_15:
    sub_10002B770((uint64_t)v37, &qword_100ACD600);
    goto LABEL_16;
  }
  char v51 = v37[*(int *)(v27 + 60)];
  sub_10002B770((uint64_t)v37, &qword_100ACD600);
  if (v51)
  {
    uint64_t v52 = v158;
    swift_beginAccess();
    int v53 = *(unsigned __int8 *)(v52 + 41);
    goto LABEL_17;
  }
LABEL_16:
  int v53 = 1;
LABEL_17:
  unint64_t v54 = v159;
  uint64_t v55 = a9;
  id v56 = (id)fpfs_current_or_default_log();
  sub_10096B490();
  sub_10002B70C(v164, (uint64_t)v34, &qword_100ACD600);
  sub_1000CE628(v48);
  sub_1000CE628(v48);
  uint64_t v57 = sub_10096B470();
  os_log_type_t v58 = sub_10096C5A0();
  if (os_log_type_enabled(v57, v58))
  {
    os_log_t v138 = v57;
    uint64_t v139 = a9;
    uint64_t v59 = swift_slowAlloc();
    uint64_t v168 = swift_slowAlloc();
    *(_DWORD *)uint64_t v59 = 136315906;
    sub_10002B70C((uint64_t)v34, (uint64_t)v31, &qword_100ACD600);
    sub_10002B770((uint64_t)v34, &qword_100ACD600);
    uint64_t v60 = sub_1000A8E8C();
    unint64_t v62 = v61;
    sub_10002B770((uint64_t)v31, &qword_100ACD600);
    uint64_t v170 = sub_100719D44(v60, v62, &v168);
    sub_10096C8C0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v59 + 12) = 2080;
    if ((_BYTE)v162)
    {
      if (v162 == 1) {
        uint64_t v63 = 0x74616761706F7270;
      }
      else {
        uint64_t v63 = 0xD000000000000010;
      }
      if (v162 == 1) {
        unint64_t v64 = 0xED000053466F5465;
      }
      else {
        unint64_t v64 = 0x80000001009958D0;
      }
    }
    else
    {
      uint64_t v63 = 0xD000000000000013;
      unint64_t v64 = v140 | 0x8000000000000000;
    }
    uint64_t v170 = sub_100719D44(v63, v64, &v168);
    sub_10096C8C0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v59 + 22) = 1024;
    LODWORD(v170) = v53;
    sub_10096C8C0();
    *(_WORD *)(v59 + 28) = 2080;
    unint64_t v66 = sub_1005232CC(v48);
    unint64_t v68 = v67;
    sub_1000B6C28(v48);
    uint64_t v170 = sub_100719D44(v66, v68, &v168);
    sub_10096C8C0();
    swift_bridgeObjectRelease();
    sub_1000B6C28(v48);
    os_log_t v69 = v138;
    _os_log_impl((void *)&_mh_execute_header, v138, v58, "Found parent %s, behavior: %s, shouldReconcile: %{BOOL}d request %s", (uint8_t *)v59, 0x26u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v49 = v160;
    uint64_t v65 = (void (*)(char *, uint64_t))v161[1];
    v65(v159, v160);
    uint64_t v55 = v139;
  }
  else
  {
    sub_1000B6C28(v48);
    sub_10002B770((uint64_t)v34, &qword_100ACD600);
    sub_1000B6C28(v48);

    uint64_t v65 = (void (*)(char *, uint64_t))v161[1];
    v65(v54, v49);
  }
  uint64_t v70 = v163 + *(int *)(v156 + 28);
  LOBYTE(v70) = *(unsigned char *)(v70 + *(int *)(type metadata accessor for ItemMetadata() + 80));
  id v71 = (id)fpfs_current_or_default_log();
  if ((v70 & 1) == 0)
  {
    if (v53)
    {
      uint64_t v72 = v141;
      sub_10096B490();
      sub_1000CE628(v48);
      sub_1000CE628(v48);
      swift_retain();
      unint64_t v73 = sub_10096B470();
      os_log_type_t v82 = sub_10096C5A0();
      if (os_log_type_enabled(v73, v82))
      {
        os_log_t v159 = (char *)v65;
        uint64_t v83 = swift_slowAlloc();
        uint64_t v170 = swift_slowAlloc();
        *(_DWORD *)uint64_t v83 = 136315394;
        swift_beginAccess();
        uint64_t v84 = *(void **)(v55 + 32);
        uint64_t v85 = *(unsigned __int8 *)(v55 + 40);
        if (*(unsigned char *)(v55 + 41))
        {
          id v86 = v84;
          uint64_t v87 = NSFileProviderItemIdentifier.description.getter();
          unint64_t v89 = v88;
          sub_1000D30C4(v84, v85, 1);
        }
        else
        {
          uint64_t v87 = VFSItemID.parseableString.getter(*(void *)(v55 + 32), *(unsigned char *)(v55 + 40));
          unint64_t v89 = v106;
        }
        uint64_t v167 = sub_100719D44(v87, v89, &v170);
        sub_10096C8C0();
        swift_release();
        swift_bridgeObjectRelease();
        *(_WORD *)(v83 + 12) = 2080;
        unint64_t v107 = sub_1005232CC(v48);
        unint64_t v109 = v108;
        sub_1000B6C28(v48);
        uint64_t v167 = sub_100719D44(v107, v109, &v170);
        sub_10096C8C0();
        swift_bridgeObjectRelease();
        sub_1000B6C28(v48);
        _os_log_impl((void *)&_mh_execute_header, v73, v82, "Parent item must be imported, materializing %s request %s", (uint8_t *)v83, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v105 = (uint64_t *)&v169;
        goto LABEL_45;
      }
LABEL_36:
      sub_1000B6C28(v48);
      swift_release();
      sub_1000B6C28(v48);

      v65(v72, v49);
      goto LABEL_46;
    }
    uint64_t v90 = v48 >> 58;
    unint64_t v91 = v142;
    sub_10096B490();
    sub_1000CE628(v48);
    sub_1000CE628(v48);
    uint64_t v92 = v158;
    swift_retain();
    uint64_t v93 = sub_10096B470();
    os_log_type_t v94 = sub_10096C5A0();
    if (os_log_type_enabled(v93, v94))
    {
      os_log_t v159 = (char *)(v48 >> 58);
      uint64_t v95 = swift_slowAlloc();
      uint64_t v170 = swift_slowAlloc();
      *(_DWORD *)uint64_t v95 = 136315394;
      swift_beginAccess();
      uint64_t v96 = *(void **)(v92 + 32);
      uint64_t v97 = *(unsigned __int8 *)(v92 + 40);
      if (*(unsigned char *)(v92 + 41))
      {
        id v98 = v96;
        uint64_t v90 = NSFileProviderItemIdentifier.description.getter();
        unint64_t v100 = v99;
        sub_1000D30C4(v96, v97, 1);
      }
      else
      {
        uint64_t v90 = VFSItemID.parseableString.getter(*(void *)(v92 + 32), *(unsigned char *)(v92 + 40));
        unint64_t v100 = v124;
      }
      uint64_t v167 = sub_100719D44(v90, v100, &v170);
      sub_10096C8C0();
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v95 + 12) = 2080;
      unint64_t v48 = v157;
      unint64_t v125 = sub_1005232CC(v157);
      unint64_t v127 = v126;
      sub_1000B6C28(v48);
      uint64_t v167 = sub_100719D44(v125, v127, &v170);
      sub_10096C8C0();
      swift_bridgeObjectRelease();
      sub_1000B6C28(v48);
      _os_log_impl((void *)&_mh_execute_header, v93, v94, "Parent item is not dataless, lookup and propagate %s request %s", (uint8_t *)v95, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v65(v142, v160);
      LOBYTE(v90) = (_BYTE)v159;
    }
    else
    {
      sub_1000B6C28(v48);
      swift_release();
      sub_1000B6C28(v48);

      v65(v91, v49);
    }
    unsigned int v128 = (v48 >> 1) & 3;
    int v129 = v90 & 0x3C;
    if ((_BYTE)v162)
    {
      uint64_t v131 = (uint64_t)v165;
      uint64_t v130 = v166;
      uint64_t v132 = v158;
      char v133 = v154;
      if (v162 != 1)
      {
        char v135 = 1;
        unint64_t v134 = v157;
        goto LABEL_61;
      }
      unint64_t v134 = v157;
    }
    else
    {
      unint64_t v134 = v157;
      uint64_t v132 = v158;
      uint64_t v131 = (uint64_t)v165;
      uint64_t v130 = v166;
      char v133 = v154;
    }
    char v135 = sub_10096D2D0();
LABEL_61:
    swift_bridgeObjectRelease();
    if ((v128 | v129) == 0x1E)
    {
      unint64_t v134 = *(void *)((v134 & 0xFFFFFFFFFFFFFF9) + 0x10);
      unint64_t v136 = v134;
    }
    else
    {
      uint64_t v137 = swift_allocObject();
      *(void *)(v137 + 16) = v134;
      unint64_t v136 = v137 | 0x7000000000000004;
    }
    sub_1000CE628(v134);
    sub_1000B1D64(v132, 1, v135 & 1, v133 & 1, v136, v131, v130);
    sub_1000B6C28(v136);
    sub_1000D3770(v163, type metadata accessor for VFSItem);
    uint64_t v123 = v164;
    return (char *)sub_10002B770(v123, &qword_100ACD600);
  }
  uint64_t v72 = v152;
  sub_10096B490();
  sub_1000CE628(v48);
  sub_1000CE628(v48);
  swift_retain();
  unint64_t v73 = sub_10096B470();
  os_log_type_t v74 = sub_10096C5A0();
  if (!os_log_type_enabled(v73, v74)) {
    goto LABEL_36;
  }
  os_log_t v159 = (char *)v65;
  uint64_t v75 = swift_slowAlloc();
  uint64_t v170 = swift_slowAlloc();
  *(_DWORD *)uint64_t v75 = 136315394;
  swift_beginAccess();
  uint64_t v76 = *(void **)(v55 + 32);
  uint64_t v77 = *(unsigned __int8 *)(v55 + 40);
  if (*(unsigned char *)(v55 + 41))
  {
    id v78 = v76;
    uint64_t v79 = NSFileProviderItemIdentifier.description.getter();
    unint64_t v81 = v80;
    sub_1000D30C4(v76, v77, 1);
  }
  else
  {
    uint64_t v79 = VFSItemID.parseableString.getter(*(void *)(v55 + 32), *(unsigned char *)(v55 + 40));
    unint64_t v81 = v101;
  }
  uint64_t v167 = sub_100719D44(v79, v81, &v170);
  sub_10096C8C0();
  swift_release();
  swift_bridgeObjectRelease();
  *(_WORD *)(v75 + 12) = 2080;
  unint64_t v102 = sub_1005232CC(v48);
  unint64_t v104 = v103;
  sub_1000B6C28(v48);
  uint64_t v167 = sub_100719D44(v102, v104, &v170);
  sub_10096C8C0();
  swift_bridgeObjectRelease();
  sub_1000B6C28(v48);
  _os_log_impl((void *)&_mh_execute_header, v73, v74, "Parent item is dataless, materializing %s request %s", (uint8_t *)v75, 0x16u);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  uint64_t v105 = &v171;
LABEL_45:
  ((void (*)(void, uint64_t))v159)(*(v105 - 32), v160);
LABEL_46:
  unint64_t v110 = v48;
  uint64_t result = (char *)[a10 totalUnitCount];
  uint64_t v111 = v153;
  if (!__OFADD__(result, 1))
  {
    [a10 setTotalUnitCount:result + 1];
    v161 = *(void ***)v163;
    char v112 = *(unsigned char *)(v163 + 8);
    uint64_t v113 = v145;
    sub_1000D37D0(v163, v145, type metadata accessor for VFSItem);
    unint64_t v114 = (*(unsigned __int8 *)(v143 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v143 + 80);
    unint64_t v115 = (v144 + v114 + 7) & 0xFFFFFFFFFFFFFFF8;
    int v116 = (void *)swift_allocObject();
    uint64_t v117 = v166;
    v116[2] = v165;
    v116[3] = v117;
    v116[4] = v158;
    v116[5] = v110;
    sub_10003D140(v113, (uint64_t)v116 + v114);
    uint64_t v118 = (char *)v116 + v115;
    *(void *)uint64_t v118 = v155;
    v118[8] = v154 & 1;
    v118[9] = v162;
    sub_1000CE628(v110);
    swift_retain();
    swift_retain();
    swift_retain();
    qos_class_self();
    uint64_t v119 = (uint64_t)v148;
    sub_10096B740();
    uint64_t v120 = v146;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v111 + 48))(v119, 1, v146) == 1)
    {
      (*(void (**)(char *, void, uint64_t))(v111 + 104))(v151, enum case for DispatchQoS.QoSClass.utility(_:), v120);
      sub_10002B770(v119, (uint64_t *)&unk_100ACD990);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v111 + 32))(v151, v119, v120);
    }
    uint64_t v47 = v164;
    uint64_t v121 = (uint64_t)v147;
    sub_10096B7B0();
    id v122 = sub_1004A91C8(v161, v112, v110, v121, (uint64_t)sub_1000D574C, (uint64_t)v116);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v149 + 8))(v121, v150);
    [a10 addChild:v122 withPendingUnitCount:1];

    sub_1000D3770(v163, type metadata accessor for VFSItem);
    goto LABEL_51;
  }
  __break(1u);
  return result;
}

char *sub_1000C67C8(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, int a4, void *a5, unint64_t a6, void *a7, int a8, uint64_t a9, char *a10)
{
  int v167 = a8;
  unint64_t v177 = a6;
  int v175 = a4;
  v184 = a2;
  uint64_t v185 = a3;
  uint64_t v13 = *a5;
  uint64_t v14 = (void *)*a7;
  uint64_t v162 = sub_10096B7D0();
  uint64_t v161 = *(void *)(v162 - 8);
  uint64_t v15 = __chkstk_darwin(v162);
  uint64_t v160 = (char *)&v148 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v172 = a5;
  uint64_t v17 = *(void *)(v13 + 80);
  uint64_t v164 = *(void *)(v17 - 8);
  __chkstk_darwin(v15);
  os_log_t v159 = (char *)&v148 - v18;
  uint64_t v19 = sub_10096B480();
  uint64_t v173 = *(void *)(v19 - 8);
  uint64_t v174 = v19;
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v156 = (char *)&v148 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v155 = (char *)&v148 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v166 = (char *)&v148 - v25;
  __chkstk_darwin(v24);
  uint64_t v171 = (char *)&v148 - v26;
  uint64_t v165 = v17;
  uint64_t v154 = sub_10096C890();
  uint64_t v153 = *(void *)(v154 - 8);
  __chkstk_darwin(v154);
  uint64_t v152 = (uint64_t)&v148 - v27;
  uint64_t v28 = v14[72];
  uint64_t v29 = sub_10096C890();
  uint64_t v169 = *(void *)(v29 - 8);
  uint64_t v30 = __chkstk_darwin(v29);
  uint64_t v32 = (char *)&v148 - v31;
  uint64_t v180 = *(void *)(v28 - 8);
  uint64_t v33 = __chkstk_darwin(v30);
  uint64_t v158 = (char *)&v148 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v157 = v34;
  __chkstk_darwin(v33);
  uint64_t v179 = (char *)&v148 - v35;
  uint64_t v36 = v14[73];
  uint64_t v37 = v14[74];
  uint64_t v168 = a7;
  uint64_t v38 = v14[75];
  uint64_t v181 = v37;
  uint64_t v182 = v28;
  v187[0] = v28;
  v187[1] = v36;
  uint64_t v178 = v36;
  v187[2] = v37;
  v187[3] = v38;
  uint64_t v176 = v38;
  uint64_t v39 = (int *)type metadata accessor for ItemLookupResult();
  uint64_t v40 = *((void *)v39 - 1);
  uint64_t v41 = __chkstk_darwin(v39);
  uint64_t v163 = (char *)&v148 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = __chkstk_darwin(v41);
  uint64_t v170 = (int *)((char *)&v148 - v44);
  uint64_t v45 = __chkstk_darwin(v43);
  uint64_t v47 = (char *)&v148 - v46;
  __chkstk_darwin(v45);
  v183 = (char *)&v148 - v48;
  sub_10096C890();
  sub_100033BE8((uint64_t *)&unk_100ACB6B0);
  uint64_t v49 = sub_10096D510();
  uint64_t v50 = *(void *)(v49 - 8);
  uint64_t v51 = __chkstk_darwin(v49);
  int v53 = (char *)&v148 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v51);
  uint64_t v55 = (char *)&v148 - v54;
  (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))((char *)&v148 - v54, a1, v49);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_errorRelease();
    return (char *)v184(a1);
  }
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v40 + 48))(v55, 1, v39) == 1) {
    return (char *)v184(a1);
  }
  (*(void (**)(char *, char *, int *))(v40 + 32))(v183, v55, v39);
  sub_1000A8DCC((uint64_t)v39, (uint64_t)v32);
  uint64_t v57 = v180;
  uint64_t v58 = v182;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v180 + 48))(v32, 1, v182) == 1)
  {
    (*(void (**)(char *, uint64_t))(v169 + 8))(v32, v29);
    (*(void (**)(char *, uint64_t, uint64_t, int *))(v40 + 56))(v53, 1, 1, v39);
    swift_storeEnumTagMultiPayload();
    v184((uint64_t)v53);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v53, v49);
    return (char *)(*(uint64_t (**)(char *, int *))(v40 + 8))(v183, v39);
  }
  uint64_t v59 = *(void (**)(char *, char *, uint64_t))(v57 + 32);
  uint64_t v151 = v57 + 32;
  uint64_t v150 = v59;
  v59(v179, v32, v58);
  char v60 = sub_1000C29C8();
  unint64_t v61 = *(void (**)(char *, char *, int *))(v40 + 16);
  unint64_t v62 = v183;
  v61(v47, v183, v39);
  uint64_t v63 = v40;
  unint64_t v64 = v62;
  if (v60)
  {
    uint64_t v169 = *(void *)(v63 + 8);
    ((void (*)(char *, int *))v169)(v47, v39);
    BOOL v65 = 1;
    unint64_t v66 = v177;
  }
  else
  {
    int v67 = v47[v39[15]];
    uint64_t v169 = *(void *)(v63 + 8);
    ((void (*)(char *, int *))v169)(v47, v39);
    unint64_t v66 = v177;
    if (v67 == 1)
    {
      uint64_t v68 = v152;
      sub_10064DAF8(v152);
      BOOL v65 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v164 + 48))(v68, 1, v165) == 1;
      (*(void (**)(uint64_t, uint64_t))(v153 + 8))(v68, v154);
    }
    else
    {
      BOOL v65 = 1;
    }
  }
  uint64_t v70 = v170;
  os_log_t v69 = v171;
  id v71 = (id)fpfs_current_or_default_log();
  sub_10096B490();
  v61((char *)v70, v64, v39);
  sub_1000CE628(v66);
  sub_1000CE628(v66);
  uint64_t v72 = sub_10096B470();
  int v73 = sub_10096C5A0();
  BOOL v74 = os_log_type_enabled(v72, (os_log_type_t)v73);
  uint64_t v170 = v39;
  uint64_t v154 = v63;
  if (v74)
  {
    LODWORD(v152) = v73;
    LODWORD(v153) = v65;
    uint64_t v75 = swift_slowAlloc();
    uint64_t v149 = swift_slowAlloc();
    v187[0] = v149;
    *(_DWORD *)uint64_t v75 = 136315906;
    uint64_t v76 = v163;
    v61(v163, (char *)v70, v39);
    uint64_t v77 = v70;
    id v78 = (void (*)(char *, int *))v169;
    ((void (*)(int *, int *))v169)(v77, v39);
    uint64_t v79 = sub_1000A9048(v39);
    unint64_t v81 = v80;
    v78(v76, v39);
    uint64_t v186 = sub_100719D44(v79, v81, v187);
    sub_10096C8C0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v75 + 12) = 2080;
    if ((_BYTE)v175)
    {
      if (v175 == 1) {
        uint64_t v82 = 0x74616761706F7270;
      }
      else {
        uint64_t v82 = 0xD000000000000010;
      }
      if (v175 == 1) {
        unint64_t v83 = 0xED000053466F5465;
      }
      else {
        unint64_t v83 = 0x80000001009958D0;
      }
    }
    else
    {
      uint64_t v82 = 0xD000000000000013;
      unint64_t v83 = 0x80000001009958A0;
    }
    uint64_t v186 = sub_100719D44(v82, v83, v187);
    sub_10096C8C0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v75 + 22) = 1024;
    BOOL v65 = v153;
    LODWORD(v186) = v153;
    sub_10096C8C0();
    *(_WORD *)(v75 + 28) = 2080;
    unint64_t v87 = v177;
    uint64_t v85 = v181;
    uint64_t v86 = v182;
    unint64_t v88 = sub_1006A9894(v177, v182, v178, v181, v176);
    unint64_t v90 = v89;
    sub_1000B6C28(v87);
    uint64_t v186 = sub_100719D44(v88, v90, v187);
    sub_10096C8C0();
    swift_bridgeObjectRelease();
    sub_1000B6C28(v87);
    _os_log_impl((void *)&_mh_execute_header, v72, (os_log_type_t)v152, "Found parent %s, behavior: %s, shouldReconcile: %{BOOL}d request %s", (uint8_t *)v75, 0x26u);
    swift_arrayDestroy();
    swift_slowDealloc();
    unint64_t v66 = v87;
    swift_slowDealloc();

    uint64_t v84 = *(void (**)(char *, uint64_t))(v173 + 8);
    v84(v171, v174);
  }
  else
  {
    sub_1000B6C28(v66);
    ((void (*)(int *, int *))v169)(v70, v39);
    sub_1000B6C28(v66);

    uint64_t v84 = *(void (**)(char *, uint64_t))(v173 + 8);
    v84(v69, v174);
    uint64_t v85 = v181;
    uint64_t v86 = v182;
  }
  unint64_t v91 = v179;
  int v92 = FileItem.isDataless.getter(v86, v85);
  uint64_t v93 = (uint64_t)v172;
  if (((v92 | v65) & 1) == 0)
  {
    id v109 = (id)fpfs_current_or_default_log();
    unint64_t v110 = v166;
    sub_10096B490();
    sub_1000CE628(v66);
    sub_1000CE628(v66);
    swift_retain();
    uint64_t v111 = sub_10096B470();
    os_log_type_t v112 = sub_10096C5A0();
    int v113 = v112;
    if (os_log_type_enabled(v111, v112))
    {
      uint64_t v114 = swift_slowAlloc();
      unint64_t v115 = (char *)swift_slowAlloc();
      uint64_t v171 = v115;
      v187[0] = (uint64_t)v115;
      *(_DWORD *)uint64_t v114 = 136315394;
      LODWORD(v165) = v113;
      uint64_t v116 = sub_10064CFB8((uint64_t)v115);
      uint64_t v186 = sub_100719D44(v116, v117, v187);
      uint64_t v163 = (char *)v84;
      sub_10096C8C0();
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v114 + 12) = 2080;
      uint64_t v118 = v182;
      uint64_t v119 = v93;
      unint64_t v120 = sub_1006A9894(v66, v182, v178, v181, v176);
      unint64_t v122 = v121;
      sub_1000B6C28(v177);
      uint64_t v186 = sub_100719D44(v120, v122, v187);
      sub_10096C8C0();
      unint64_t v66 = v177;
      swift_bridgeObjectRelease();
      sub_1000B6C28(v66);
      _os_log_impl((void *)&_mh_execute_header, v111, (os_log_type_t)v165, "Parent item is not dataless, lookup and propagate %s request %s", (uint8_t *)v114, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      unint64_t v91 = v179;
      swift_slowDealloc();

      ((void (*)(char *, uint64_t))v163)(v166, v174);
    }
    else
    {
      sub_1000B6C28(v66);
      swift_release();
      sub_1000B6C28(v66);

      v84(v110, v174);
      uint64_t v118 = v182;
      uint64_t v119 = v93;
    }
    char v131 = sub_1000C29C8();
    unint64_t v132 = sub_1006A935C(v66);
    sub_1000B21EC(v119, 1, v131 & 1, v167 & 1, v132, (uint64_t)v184, v185);
    sub_1000B6C28(v132);
    (*(void (**)(char *, uint64_t))(v180 + 8))(v91, v118);
    return (char *)((uint64_t (*)(char *, int *))v169)(v183, v170);
  }
  uint64_t v171 = a10;
  char v94 = FileItem.isDataless.getter(v86, v85);
  id v95 = (id)fpfs_current_or_default_log();
  if (v94)
  {
    uint64_t v96 = v155;
    sub_10096B490();
    sub_1000CE628(v66);
    sub_1000CE628(v66);
    swift_retain();
    uint64_t v97 = sub_10096B470();
    os_log_type_t v98 = sub_10096C5A0();
    BOOL v99 = os_log_type_enabled(v97, v98);
    uint64_t v100 = v178;
    if (v99)
    {
      uint64_t v101 = swift_slowAlloc();
      uint64_t v102 = swift_slowAlloc();
      uint64_t v163 = (char *)v84;
      v187[0] = v102;
      *(_DWORD *)uint64_t v101 = 136315394;
      uint64_t v103 = sub_10064CFB8(v102);
      uint64_t v186 = sub_100719D44(v103, v104, v187);
      sub_10096C8C0();
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v101 + 12) = 2080;
      unint64_t v105 = sub_1006A9894(v177, v182, v100, v181, v176);
      unint64_t v107 = v106;
      sub_1000B6C28(v177);
      uint64_t v186 = sub_100719D44(v105, v107, v187);
      sub_10096C8C0();
      unint64_t v66 = v177;
      swift_bridgeObjectRelease();
      sub_1000B6C28(v66);
      unint64_t v108 = "Parent item is dataless, materializing %s request %s";
LABEL_31:
      _os_log_impl((void *)&_mh_execute_header, v97, v98, v108, (uint8_t *)v101, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      unint64_t v91 = v179;
      swift_slowDealloc();

      ((void (*)(char *, uint64_t))v163)(v96, v174);
      goto LABEL_35;
    }
  }
  else
  {
    uint64_t v96 = v156;
    sub_10096B490();
    sub_1000CE628(v66);
    sub_1000CE628(v66);
    swift_retain();
    uint64_t v97 = sub_10096B470();
    os_log_type_t v98 = sub_10096C5A0();
    BOOL v123 = os_log_type_enabled(v97, v98);
    uint64_t v124 = v178;
    if (v123)
    {
      uint64_t v101 = swift_slowAlloc();
      uint64_t v125 = swift_slowAlloc();
      uint64_t v163 = (char *)v84;
      v187[0] = v125;
      *(_DWORD *)uint64_t v101 = 136315394;
      uint64_t v126 = sub_10064CFB8(v125);
      uint64_t v186 = sub_100719D44(v126, v127, v187);
      sub_10096C8C0();
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v101 + 12) = 2080;
      unint64_t v128 = sub_1006A9894(v177, v182, v124, v181, v176);
      unint64_t v130 = v129;
      sub_1000B6C28(v177);
      uint64_t v186 = sub_100719D44(v128, v130, v187);
      sub_10096C8C0();
      unint64_t v66 = v177;
      swift_bridgeObjectRelease();
      sub_1000B6C28(v66);
      unint64_t v108 = "Parent item must be imported, materializing %s request %s";
      goto LABEL_31;
    }
  }
  sub_1000B6C28(v66);
  swift_release();
  sub_1000B6C28(v66);

  v84(v96, v174);
LABEL_35:
  id v133 = v171;
  uint64_t result = (char *)[v171 totalUnitCount];
  if (!__OFADD__(result, 1))
  {
    [v133 setTotalUnitCount:result + 1];
    uint64_t v135 = v181;
    uint64_t v134 = v182;
    uint64_t v136 = (uint64_t)v159;
    (*(void (**)(uint64_t, uint64_t))(v181 + 64))(v182, v181);
    uint64_t v137 = v180;
    os_log_t v138 = v158;
    (*(void (**)(char *, char *, uint64_t))(v180 + 16))(v158, v91, v134);
    unint64_t v139 = (*(unsigned __int8 *)(v137 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v137 + 80);
    unint64_t v140 = (v157 + v139 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v141 = (char *)swift_allocObject();
    uint64_t v142 = v178;
    *((void *)v141 + 2) = v134;
    *((void *)v141 + 3) = v142;
    uint64_t v143 = v176;
    *((void *)v141 + 4) = v135;
    *((void *)v141 + 5) = v143;
    uint64_t v144 = v185;
    *((void *)v141 + 6) = v184;
    *((void *)v141 + 7) = v144;
    *((void *)v141 + 8) = v172;
    *((void *)v141 + 9) = v66;
    v150(&v141[v139], v138, v134);
    uint64_t v145 = &v141[v140];
    *(void *)uint64_t v145 = v168;
    v145[8] = v167 & 1;
    v145[9] = v175;
    sub_1000CE628(v66);
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v146 = (uint64_t)v160;
    sub_1000B5A94();
    id v147 = sub_1000B5C20(v136, v66, v146, (uint64_t)sub_1000D2ADC, (uint64_t)v141);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v161 + 8))(v146, v162);
    (*(void (**)(uint64_t, uint64_t))(v164 + 8))(v136, v165);
    [v171 addChild:v147 withPendingUnitCount:1];

    (*(void (**)(char *, uint64_t))(v137 + 8))(v179, v134);
    return (char *)((uint64_t (*)(char *, int *))v169)(v183, v170);
  }
  __break(1u);
  return result;
}

unint64_t sub_1000C7CC0(uint64_t a1, void (*a2)(void *), uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, int a8, char a9)
{
  int v73 = a8;
  uint64_t v72 = a4;
  uint64_t v15 = sub_10096B480();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v63 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_10002B7CC(&qword_100ACD5F8);
  __chkstk_darwin(v19);
  uint64_t v21 = (char **)((char *)&v63 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a1)
  {
    *uint64_t v21 = a1;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    a2(v21);
    return sub_10002B770((uint64_t)v21, &qword_100ACD5F8);
  }
  else
  {
    uint64_t v23 = a3;
    uint64_t v69 = v16;
    uint64_t v70 = v15;
    id v71 = (void (*)(void))a2;
    id v24 = (id)fpfs_current_or_default_log();
    sub_10096B490();
    uint64_t v25 = a5 >> 58;
    sub_1000CE628(a5);
    sub_1000CE628(a5);
    uint64_t v26 = v72;
    swift_retain();
    uint64_t v27 = sub_10096B470();
    int v28 = sub_10096C5A0();
    unint64_t v29 = a5;
    if (os_log_type_enabled(v27, (os_log_type_t)v28))
    {
      int v64 = v28;
      os_log_t v65 = v27;
      unint64_t v66 = a5 >> 58;
      uint64_t v63 = v18;
      uint64_t v67 = v23;
      uint64_t v68 = a7;
      uint64_t v30 = swift_slowAlloc();
      uint64_t v75 = swift_slowAlloc();
      *(_DWORD *)uint64_t v30 = 136315394;
      swift_beginAccess();
      uint64_t v31 = *(void **)(v26 + 32);
      uint64_t v32 = *(unsigned __int8 *)(v26 + 40);
      uint64_t v33 = v26;
      if (*(unsigned char *)(v26 + 41))
      {
        id v34 = v31;
        uint64_t v35 = NSFileProviderItemIdentifier.description.getter();
        unint64_t v37 = v36;
        sub_1000D30C4(v31, v32, 1);
      }
      else
      {
        uint64_t v35 = VFSItemID.parseableString.getter(*(void *)(v26 + 32), *(unsigned char *)(v26 + 40));
        unint64_t v37 = v41;
      }
      uint64_t v42 = v70;
      uint64_t v74 = sub_100719D44(v35, v37, &v75);
      sub_10096C8C0();
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v30 + 12) = 2080;
      uint64_t v25 = sub_1005232CC(v29);
      unint64_t v44 = v43;
      sub_1000B6C28(v29);
      uint64_t v74 = sub_100719D44(v25, v44, &v75);
      sub_10096C8C0();
      swift_bridgeObjectRelease();
      sub_1000B6C28(v29);
      os_log_t v45 = v65;
      _os_log_impl((void *)&_mh_execute_header, v65, (os_log_type_t)v64, "Parent is materialized, lookup %s again request %s", (uint8_t *)v30, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v69 + 8))(v63, v42);
      uint64_t v40 = v67;
      uint64_t v39 = v68;
      LOBYTE(v25) = v66;
    }
    else
    {
      sub_1000B6C28(a5);
      swift_release();
      sub_1000B6C28(a5);

      (*(void (**)(char *, uint64_t))(v69 + 8))(v18, v70);
      uint64_t v38 = v26;
      uint64_t v39 = a7;
      uint64_t v33 = v38;
      uint64_t v40 = v23;
    }
    unsigned int v46 = (v29 >> 1) & 3;
    int v47 = v25 & 0x3C;
    *(unsigned char *)(v33 + 42) = 0;
    uint64_t v48 = a6 + *(int *)(type metadata accessor for VFSItem(0) + 28);
    if (*(unsigned char *)(v48 + *(int *)(type metadata accessor for ItemMetadata() + 80)) == 1)
    {
      uint64_t v49 = v40;
      if ((v46 | v47) == 0x1E)
      {
        unint64_t v29 = *(void *)((v29 & 0xFFFFFFFFFFFFFF9) + 0x10);
        unint64_t v50 = v29;
      }
      else
      {
        uint64_t v51 = swift_allocObject();
        *(void *)(v51 + 16) = v29;
        unint64_t v50 = v51 | 0x7000000000000004;
      }
      uint64_t v52 = v71;
      sub_1000CE628(v29);
      uint64_t v53 = swift_allocObject();
      *(void *)(v53 + 16) = v33;
      *(void *)(v53 + 24) = v39;
      *(unsigned char *)(v53 + 32) = v73 & 1;
      *(unsigned char *)(v53 + 33) = 1;
      *(void *)(v53 + 40) = v52;
      *(void *)(v53 + 48) = v49;
      *(void *)(v53 + 56) = v50;
      uint64_t v54 = swift_allocObject();
      uint64_t v55 = v52;
      uint64_t v56 = v54;
      *(void *)(v54 + 16) = v55;
      *(void *)(v54 + 24) = v49;
      swift_retain_n();
      swift_retain();
      swift_retain();
      sub_1000CE628(v50);
      sub_1007D8110((uint64_t)"findExistingVFSItemFor(itemID:parentIsImported:bypassIsHidden:request:completionHandler:)", 89, 2, sub_1000DEB24, v56, (uint64_t)sub_1000D3128, v53);
      swift_release();
      swift_release();
      unint64_t v57 = v50;
    }
    else
    {
      if (a9 && a9 != 1) {
        char v58 = 1;
      }
      else {
        char v58 = sub_10096D2D0();
      }
      swift_bridgeObjectRelease();
      if ((v46 | v47) == 0x1E)
      {
        unint64_t v29 = *(void *)((v29 & 0xFFFFFFFFFFFFFF9) + 0x10);
        unint64_t v59 = v29;
      }
      else
      {
        uint64_t v60 = swift_allocObject();
        *(void *)(v60 + 16) = v29;
        unint64_t v59 = v60 | 0x7000000000000004;
      }
      uint64_t v61 = (uint64_t)v71;
      char v62 = v73;
      sub_1000CE628(v29);
      sub_1000B1D64(v33, 1, v58 & 1, v62 & 1, v59, v61, v40);
      unint64_t v57 = v59;
    }
    return sub_1000B6C28(v57);
  }
}

unint64_t sub_1000C831C(uint64_t a1, void (*a2)(void *), uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  int v62 = a8;
  uint64_t v63 = a6;
  uint64_t v64 = a4;
  unint64_t v65 = a5;
  uint64_t v66 = a3;
  uint64_t v67 = a2;
  uint64_t v9 = *(void *)(*(void *)a7 + 576);
  uint64_t v10 = *(void *)(*(void *)a7 + 584);
  uint64_t v11 = *(void *)(*(void *)a7 + 592);
  uint64_t v12 = *(void *)(*(void *)a7 + 600);
  v69[0] = v9;
  v69[1] = v10;
  v69[2] = v11;
  v69[3] = v12;
  type metadata accessor for ItemLookupResult();
  sub_10096C890();
  sub_100033BE8((uint64_t *)&unk_100ACB6B0);
  uint64_t v13 = sub_10096D510();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (void *)((char *)v53 - v15);
  uint64_t v17 = sub_10096B480();
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v21 = (char *)v53 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    *uint64_t v16 = a1;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    v67(v16);
    return (*(uint64_t (**)(void *, uint64_t))(v14 + 8))(v16, v13);
  }
  else
  {
    uint64_t v58 = v19;
    uint64_t v59 = v18;
    uint64_t v60 = v11;
    uint64_t v61 = v10;
    uint64_t v23 = v9;
    id v24 = (id)fpfs_current_or_default_log();
    sub_10096B490();
    unint64_t v25 = v65;
    sub_1000CE628(v65);
    sub_1000CE628(v25);
    uint64_t v26 = v64;
    swift_retain();
    uint64_t v27 = sub_10096B470();
    os_log_type_t v28 = sub_10096C5A0();
    int v29 = v28;
    BOOL v30 = os_log_type_enabled(v27, v28);
    uint64_t v31 = (uint64_t)v67;
    uint64_t v32 = v12;
    if (v30)
    {
      uint64_t v33 = swift_slowAlloc();
      uint64_t v34 = swift_slowAlloc();
      uint64_t v57 = v34;
      v69[0] = v34;
      *(_DWORD *)uint64_t v33 = 136315394;
      os_log_t v56 = v27;
      uint64_t v35 = sub_10064CFB8(v34);
      uint64_t v68 = sub_100719D44(v35, v36, v69);
      uint64_t v55 = v69;
      sub_10096C8C0();
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v33 + 12) = 2080;
      v53[1] = v33 + 14;
      unint64_t v37 = v25;
      uint64_t v38 = v23;
      int v54 = v29;
      uint64_t v39 = v32;
      unint64_t v40 = v25;
      uint64_t v41 = v60;
      unint64_t v42 = sub_1006A9894(v37, v23, v61, v60, v39);
      unint64_t v44 = v43;
      sub_1000B6C28(v40);
      uint64_t v68 = sub_100719D44(v42, v44, v69);
      sub_10096C8C0();
      uint64_t v26 = v64;
      swift_bridgeObjectRelease();
      sub_1000B6C28(v40);
      os_log_t v45 = v56;
      _os_log_impl((void *)&_mh_execute_header, v56, (os_log_type_t)v54, "Parent is materialized, lookup %s again request %s", (uint8_t *)v33, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v31 = (uint64_t)v67;
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v58 + 8))(v21, v59);
    }
    else
    {
      sub_1000B6C28(v25);
      swift_release();
      sub_1000B6C28(v25);

      (*(void (**)(char *, uint64_t))(v58 + 8))(v21, v59);
      uint64_t v38 = v23;
      uint64_t v41 = v60;
    }
    *(unsigned char *)(v26 + *(void *)(*(void *)v26 + 128)) = 0;
    char v46 = FileItem.isDataless.getter(v38, v41);
    uint64_t v47 = v66;
    char v48 = v62;
    if (v46)
    {
      unint64_t v49 = sub_1006A935C(v65);
      sub_1000AB9F8(v26, 1, v48 & 1, v49, v31, v47);
      unint64_t v50 = v49;
    }
    else
    {
      char v51 = sub_1000C29C8();
      unint64_t v52 = sub_1006A935C(v65);
      sub_1000B21EC(v26, 1, v51 & 1, v48 & 1, v52, v31, v47);
      unint64_t v50 = v52;
    }
    return sub_1000B6C28(v50);
  }
}

uint64_t sub_1000C8858(uint64_t a1, void (*a2)(uint64_t *), uint64_t a3, unint64_t a4)
{
  uint64_t v7 = sub_10002B7CC(&qword_100ACD608);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10002B7CC(&qword_100ACD5F8);
  __chkstk_darwin(v10);
  uint64_t v12 = (uint64_t *)((char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = sub_10002B7CC((uint64_t *)&unk_100ACEC50);
  __chkstk_darwin(v13);
  uint64_t v15 = (uint64_t *)((char *)&v17 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10002B70C(a1, (uint64_t)v12, &qword_100ACD5F8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *uint64_t v15 = *v12;
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    sub_10001AE98((uint64_t)v12, (uint64_t)v9, &qword_100ACD608);
    sub_1000C8BB0((uint64_t)v9, a4, v15);
    sub_10002B770((uint64_t)v9, &qword_100ACD608);
  }
  a2(v15);
  return sub_10002B770((uint64_t)v15, (uint64_t *)&unk_100ACEC50);
}

uint64_t sub_1000C8A24(uint64_t a1, void (*a2)(char *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v19 = a3;
  uint64_t v20 = a2;
  sub_100033BE8((uint64_t *)&unk_100ACB6B0);
  uint64_t v13 = sub_10096D510();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v19 - v15;
  uint64_t v21 = a5;
  uint64_t v22 = a6;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a4;
  uint64_t v26 = a5;
  uint64_t v27 = a6;
  uint64_t v28 = a7;
  uint64_t v29 = a8;
  type metadata accessor for ItemLookupResult();
  sub_10096C890();
  uint64_t v17 = sub_10096D510();
  sub_1000AB038((void (*)(char *))sub_1000D2B78, v17, (uint64_t)v16);
  v20(v16);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
}

uint64_t sub_1000C8BB0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v58 = a2;
  uint64_t v59 = a3;
  uint64_t v4 = sub_10096A630();
  __chkstk_darwin(v4 - 8);
  uint64_t v55 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10096A650();
  uint64_t v56 = *(void *)(v6 - 8);
  uint64_t v57 = v6;
  __chkstk_darwin(v6);
  int v54 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10096B480();
  uint64_t v47 = *(void *)(v8 - 8);
  uint64_t v48 = v8;
  __chkstk_darwin(v8);
  unint64_t v49 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = type metadata accessor for ItemMetadata();
  __chkstk_darwin(v50);
  uint64_t v51 = (uint64_t)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10002B7CC(&qword_100ACD608);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v14 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v46 - v15;
  uint64_t v17 = sub_10002B7CC(&qword_100ACB910);
  __chkstk_darwin(v17 - 8);
  uint64_t v19 = (char *)&v46 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for VFSItem(0);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v46 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __chkstk_darwin(v22);
  uint64_t v52 = (uint64_t)&v46 - v26;
  __chkstk_darwin(v25);
  uint64_t v28 = (char *)&v46 - v27;
  uint64_t v53 = a1;
  sub_10002B70C(a1, (uint64_t)v16, &qword_100ACD608);
  uint64_t v29 = sub_10002B7CC(&qword_100ACD600);
  BOOL v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v29 - 8) + 48);
  if (v30(v16, 1, v29) == 1)
  {
    sub_10002B770((uint64_t)v16, &qword_100ACD608);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v19, 1, 1, v20);
  }
  else
  {
    if (v16[*(int *)(v29 + 56)])
    {
      uint64_t v31 = 1;
    }
    else
    {
      sub_1000D37D0((uint64_t)v16, (uint64_t)v19, type metadata accessor for VFSItem);
      uint64_t v31 = 0;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v19, v31, 1, v20);
    sub_10002B770((uint64_t)v16, &qword_100ACD600);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) != 1)
    {
      sub_10003D140((uint64_t)v19, (uint64_t)v28);
      uint64_t v32 = (uint64_t)v28;
      goto LABEL_18;
    }
  }
  sub_10002B770((uint64_t)v19, &qword_100ACB910);
  if (((v58 >> 58) & 0x3C | (v58 >> 1) & 3) != 3)
  {
LABEL_20:
    sub_10096A590();
    sub_100042898((uint64_t)_swiftEmptyArrayStorage);
    sub_1000278B4((unint64_t *)&qword_100ACB680, (void (*)(uint64_t))&type metadata accessor for CocoaError);
    unint64_t v43 = v54;
    uint64_t v44 = v57;
    sub_10096ABD0();
    uint64_t v45 = sub_10096A4D0();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v43, v44);
    uint64_t *v59 = v45;
    sub_10002B7CC((uint64_t *)&unk_100ACEC50);
    return swift_storeEnumTagMultiPayload();
  }
  sub_10002B70C(v53, (uint64_t)v14, &qword_100ACD608);
  if (v30(v14, 1, v29) == 1)
  {
    sub_10002B770((uint64_t)v14, &qword_100ACD608);
    goto LABEL_20;
  }
  sub_1000D37D0((uint64_t)v14, (uint64_t)v24, type metadata accessor for VFSItem);
  sub_10002B770((uint64_t)v14, &qword_100ACD600);
  uint64_t v33 = (uint64_t)v24;
  uint64_t v34 = v52;
  sub_10003D140(v33, v52);
  uint64_t v35 = v51;
  sub_1000D37D0(v34 + *(int *)(v20 + 28), v51, (uint64_t (*)(void))type metadata accessor for ItemMetadata);
  uint64_t result = sub_10096B080();
  if ((~*(void *)&v37 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v37 <= -9.22337204e18)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v37 < 9.22337204e18)
  {
    char is_busy_date = fpfs_is_busy_date();
    sub_1000D3770(v35, (uint64_t (*)(void))type metadata accessor for ItemMetadata);
    if ((is_busy_date & 1) == 0)
    {
      sub_1000D3770(v34, type metadata accessor for VFSItem);
      goto LABEL_20;
    }
    id v39 = (id)fpfs_current_or_default_log();
    sub_10096B490();
    unint64_t v40 = sub_10096B470();
    os_log_type_t v41 = sub_10096C5A0();
    if (os_log_type_enabled(v40, v41))
    {
      unint64_t v42 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v42 = 0;
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "🏗 Forcing busy item return for URL resolution", v42, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v47 + 8))(v49, v48);
    uint64_t v32 = v34;
LABEL_18:
    sub_10003D140(v32, (uint64_t)v59);
    sub_10002B7CC((uint64_t *)&unk_100ACEC50);
    return swift_storeEnumTagMultiPayload();
  }
LABEL_24:
  __break(1u);
  return result;
}

uint64_t sub_1000C9320@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  unint64_t v90 = a2;
  unint64_t v91 = a7;
  uint64_t v93 = a1;
  uint64_t v11 = sub_10096A630();
  __chkstk_darwin(v11 - 8);
  uint64_t v85 = (char *)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10096A650();
  uint64_t v86 = *(void *)(v13 - 8);
  uint64_t v87 = v13;
  __chkstk_darwin(v13);
  uint64_t v84 = (char *)&v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = sub_10096B480();
  uint64_t v66 = *(void *)(v67 - 8);
  __chkstk_darwin(v67);
  uint64_t v68 = (char *)&v65 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = type metadata accessor for ItemMetadata();
  __chkstk_darwin(v72);
  int v73 = (char *)&v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_1000D2B88();
  uint64_t v82 = AssociatedTypeWitness;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  __chkstk_darwin(TupleTypeMetadata2);
  uint64_t v79 = (char *)&v65 - v18;
  uint64_t v94 = a3;
  uint64_t v95 = a4;
  uint64_t v74 = a5;
  uint64_t v96 = a5;
  uint64_t v97 = a6;
  uint64_t v19 = type metadata accessor for ItemLookupResult();
  uint64_t v20 = sub_10096C890();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = __chkstk_darwin(v20);
  unint64_t v80 = (char *)&v65 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v25 = (char *)&v65 - v24;
  uint64_t v26 = sub_10096C890();
  uint64_t v88 = *(void *)(v26 - 8);
  uint64_t v89 = v26;
  uint64_t v27 = __chkstk_darwin(v26);
  uint64_t v29 = (char *)&v65 - v28;
  uint64_t v92 = a3;
  uint64_t v30 = *(void *)(a3 - 8);
  uint64_t v31 = __chkstk_darwin(v27);
  uint64_t v69 = (char *)&v65 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = __chkstk_darwin(v31);
  id v71 = (char *)&v65 - v34;
  __chkstk_darwin(v33);
  unint64_t v36 = (char *)&v65 - v35;
  uint64_t v76 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
  v76(v25, v93, v20);
  uint64_t v37 = *(void *)(v19 - 8);
  uint64_t v75 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v37 + 48);
  int v38 = v75(v25, 1, v19);
  uint64_t v83 = v30;
  uint64_t v81 = v20;
  uint64_t v70 = v21;
  uint64_t v77 = v19;
  if (v38 == 1)
  {
    (*(void (**)(char *, uint64_t))(v21 + 8))(v25, v20);
    uint64_t v39 = v92;
    (*(void (**)(char *, uint64_t, uint64_t))(v30 + 56))(v29, 1, 1);
    uint64_t v40 = v37;
  }
  else
  {
    sub_1000A8DCC(v19, (uint64_t)v29);
    (*(void (**)(char *, uint64_t))(v37 + 8))(v25, v19);
    uint64_t v39 = v92;
    uint64_t v40 = v37;
    if ((*(unsigned int (**)(char *, uint64_t))(v30 + 48))(v29, 1) != 1)
    {
      unint64_t v49 = *(void (**)(char *, char *, uint64_t))(v83 + 32);
      v49(v36, v29, v39);
      v49((char *)v91, v36, v39);
      sub_100033BE8((uint64_t *)&unk_100ACB6B0);
      sub_10096D510();
      return swift_storeEnumTagMultiPayload();
    }
  }
  (*(void (**)(char *, uint64_t))(v88 + 8))(v29, v89);
  if (((v90 >> 58) & 0x3C | (v90 >> 1) & 3) != 3)
  {
LABEL_16:
    sub_10096A590();
    sub_100042898((uint64_t)_swiftEmptyArrayStorage);
    sub_1000278B4((unint64_t *)&qword_100ACB680, (void (*)(uint64_t))&type metadata accessor for CocoaError);
    int v62 = v84;
    uint64_t v63 = v87;
    sub_10096ABD0();
    uint64_t v64 = sub_10096A4D0();
    (*(void (**)(char *, uint64_t))(v86 + 8))(v62, v63);
    uint64_t *v91 = v64;
    sub_100033BE8((uint64_t *)&unk_100ACB6B0);
    sub_10096D510();
    return swift_storeEnumTagMultiPayload();
  }
  uint64_t v41 = swift_projectBox();
  unint64_t v42 = v79;
  uint64_t v43 = *(int *)(TupleTypeMetadata2 + 48);
  uint64_t v44 = v82;
  uint64_t v45 = *(void *)(v82 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v79, v41, v82);
  *(void *)&v42[v43] = *(void *)(v41 + v43);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v42, v44);
  uint64_t v47 = v80;
  uint64_t v46 = v81;
  v76(v80, v93, v81);
  uint64_t v48 = v77;
  if (v75(v47, 1, v77) == 1)
  {
    (*(void (**)(char *, uint64_t))(v70 + 8))(v47, v46);
    goto LABEL_16;
  }
  uint64_t v50 = v83;
  uint64_t v51 = v69;
  (*(void (**)(char *, char *, uint64_t))(v83 + 16))(v69, v47, v39);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v47, v48);
  uint64_t v52 = *(void (**)(char *, char *, uint64_t))(v50 + 32);
  uint64_t v53 = v71;
  v52(v71, v51, v39);
  uint64_t v54 = (uint64_t)v73;
  (*(void (**)(uint64_t))(v74 + 104))(v39);
  uint64_t result = sub_10096B080();
  if ((~*(void *)&v56 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  if (v56 <= -9.22337204e18)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (v56 < 9.22337204e18)
  {
    int is_busy_date = fpfs_is_busy_date();
    sub_1000D3770(v54, (uint64_t (*)(void))type metadata accessor for ItemMetadata);
    if (is_busy_date)
    {
      id v58 = (id)fpfs_current_or_default_log();
      sub_10096B490();
      uint64_t v59 = sub_10096B470();
      os_log_type_t v60 = sub_10096C5A0();
      if (os_log_type_enabled(v59, v60))
      {
        uint64_t v61 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v61 = 0;
        _os_log_impl((void *)&_mh_execute_header, v59, v60, "🏗 Forcing busy item return for URL resolution", v61, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v66 + 8))(v68, v67);
      v52((char *)v91, v53, v39);
      sub_100033BE8((uint64_t *)&unk_100ACB6B0);
      sub_10096D510();
      return swift_storeEnumTagMultiPayload();
    }
    (*(void (**)(char *, uint64_t))(v50 + 8))(v53, v39);
    goto LABEL_16;
  }
LABEL_20:
  __break(1u);
  return result;
}

id sub_1000C9D8C(void **a1, char a2, unint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v35 = a6;
  uint64_t v36 = a7;
  int v38 = a5;
  uint64_t v34 = a4;
  unint64_t v37 = a3;
  uint64_t v33 = sub_10096B7D0();
  uint64_t v31 = *(void *)(v33 - 8);
  uint64_t v9 = *(void *)(v31 + 64);
  __chkstk_darwin(v33);
  uint64_t v32 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v10 = [self discreteProgressWithTotalUnitCount:1];
  [v10 setCancellable:1];
  uint64_t v11 = swift_allocObject();
  swift_weakInit();
  uint64_t v12 = swift_allocObject();
  id v28 = v10;
  swift_unknownObjectWeakInit();
  uint64_t v45 = a1;
  char v46 = a2;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v11;
  *(void *)(v13 + 24) = v12;
  sub_1000D3184((uint64_t)&v45, v13 + 32);
  uint64_t v43 = sub_1000DC5EC;
  uint64_t v44 = v13;
  aBlock = _NSConcreteStackBlock;
  uint64_t v40 = 1107296256;
  uint64_t v41 = sub_100020480;
  unint64_t v42 = &unk_100A6F458;
  uint64_t v14 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  sub_100031400((uint64_t)sub_1000DC5EC);
  swift_release();
  [v10 setCancellationHandler:v14];
  _Block_release(v14);
  swift_release();
  swift_release();
  swift_release();
  uint64_t v15 = swift_allocObject();
  uint64_t v29 = v15;
  uint64_t v16 = v35;
  uint64_t v17 = v36;
  *(void *)(v15 + 16) = v35;
  *(void *)(v15 + 24) = v17;
  aBlock = a1;
  LOBYTE(v40) = a2;
  uint64_t v18 = v31;
  uint64_t v19 = v32;
  uint64_t v20 = v33;
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v32, v34, v33);
  unint64_t v21 = (*(unsigned __int8 *)(v18 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  uint64_t v22 = v21 + v9;
  uint64_t v23 = (char *)swift_allocObject();
  *((void *)v23 + 2) = v30;
  *((void *)v23 + 3) = v16;
  *((void *)v23 + 4) = v17;
  sub_1000D3184((uint64_t)&aBlock, (uint64_t)(v23 + 40));
  unint64_t v24 = v37;
  uint64_t v25 = v28;
  *((void *)v23 + 7) = v37;
  *((void *)v23 + 8) = v25;
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(&v23[v21], v19, v20);
  v23[v22] = v38;
  swift_retain_n();
  swift_retain();
  sub_1000CE628(v24);
  id v26 = v25;
  sub_1004A8A2C((uint64_t)"evict(_:request:qos:evictionReason:completion:)", 47, 2, 0, (uint64_t)FPDDomainFPFSBackend.isDeadEnd(), 0, (uint64_t)sub_1000DEB20, v29, (uint64_t)sub_1000DC6E4, (uint64_t)v23);
  swift_release();
  swift_release();
  return v26;
}

void sub_1000CA140(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v7 = Strong;
    swift_beginAccess();
    uint64_t v8 = swift_unknownObjectWeakLoadStrong();
    if (v8)
    {
      uint64_t v9 = (void *)v8;
      uint64_t v12 = a3;
      char v13 = a4;
      uint64_t v10 = swift_allocObject();
      *(void *)(v10 + 16) = v7;
      sub_1000D3184((uint64_t)&v12, v10 + 24);
      *(void *)(v10 + 40) = v9;
      swift_retain();
      id v11 = v9;
      sub_1004A8A2C((uint64_t)"evict(_:request:qos:evictionReason:completion:)", 47, 2, 0, (uint64_t)FPDDomainFPFSBackend.isDeadEnd(), 0, (uint64_t)Filename.init(rawValue:), 0, (uint64_t)sub_1000DC7FC, v10);
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
    }
  }
}

void sub_1000CA288(unsigned char *a1, void (*a2)(void *), void (*a3)(void), void (*a4)(void), int a5, unint64_t a6, void *a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t v64 = a3;
  uint64_t v59 = a7;
  unint64_t v60 = a6;
  int v62 = a5;
  uint64_t v61 = a4;
  uint64_t v63 = a2;
  uint64_t v52 = sub_10096B0E0();
  uint64_t v51 = *(void *)(v52 - 8);
  __chkstk_darwin(v52);
  uint64_t v50 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10002B7CC((uint64_t *)&unk_100ACD990);
  __chkstk_darwin(v11 - 8);
  double v56 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10096B760();
  uint64_t v53 = *(void *)(v13 - 8);
  uint64_t v54 = v13;
  __chkstk_darwin(v13);
  uint64_t v55 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10096B7D0();
  uint64_t v57 = *(void *)(v15 - 8);
  uint64_t v58 = v15;
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_10096B480();
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  unint64_t v21 = (char *)&v49 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_10096A7B0();
  uint64_t v23 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v25 = (char *)&v49 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v26 = (void *)swift_retain();
  if (objc_sync_enter(v26)) {
LABEL_19:
  }
    sub_1007130E4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderExtensions/fssync/libfssync/utilities/Utilities.swift", 103, 2, 314, (uint64_t)a1);
  char v27 = a1[qword_100ADA028];
  if (objc_sync_exit(a1)) {
    sub_1007130F8((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderExtensions/fssync/libfssync/utilities/Utilities.swift", 103, 2, 318, (uint64_t)a1);
  }
  swift_release();
  if (v27)
  {
    int v66 = 35;
    sub_100042898((uint64_t)_swiftEmptyArrayStorage);
    sub_1000278B4((unint64_t *)&qword_100ACB660, (void (*)(uint64_t))&type metadata accessor for POSIXError);
    sub_10096ABD0();
    id v28 = (void *)sub_10096A790();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v22);
    v63(v28);

    return;
  }
  id v29 = (id)fpfs_current_or_default_log();
  sub_10096B490();
  os_log_type_t v30 = sub_10096C5A0();
  uint64_t v64 = (void (*)(void))sub_1006A75EC(v30, (uint64_t)"eviction waiter", 15, 2, (uint64_t)v63, (uint64_t)v64);
  uint64_t v32 = v31;
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  qos_class_self();
  uint64_t v33 = (uint64_t)v56;
  sub_10096B740();
  uint64_t v35 = v53;
  uint64_t v34 = v54;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v53 + 48))(v33, 1, v54) == 1)
  {
    (*(void (**)(char *, void, uint64_t))(v35 + 104))(v55, enum case for DispatchQoS.QoSClass.utility(_:), v34);
    sub_10002B770(v33, (uint64_t *)&unk_100ACD990);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v35 + 32))(v55, v33, v34);
  }
  char v36 = v62;
  unint64_t v38 = v60;
  unint64_t v37 = v61;
  uint64_t v40 = v58;
  uint64_t v39 = v59;
  sub_10096B7B0();
  LODWORD(v39) = sub_10053D178(1u, v37, v36, v38, v39, v17, v64, v32);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v17, v40);
  if (v39 == 1)
  {
    sub_10002B7CC(&qword_100ADBF40);
    uint64_t inited = swift_initStackObject();
    *(void *)(inited + 16) = _swiftEmptyArrayStorage;
    *(void *)(inited + 24) = _swiftEmptyArrayStorage;
    *(void *)(inited + 32) = _swiftEmptyArrayStorage;
    *(void *)(inited + 40) = _swiftEmptyArrayStorage;
    *(void *)(inited + 48) = 0;
    uint64_t v42 = sub_1004A829C(v38);
    uint64_t v43 = v65;
    sub_1000CA980((uint64_t)v37, v36, 4, v42, v44, 0x800000, (uint64_t)a1, a9, (char *)inited);
    if (!v43)
    {
      uint64_t v45 = v50;
      sub_10096B0D0();
      sub_10096B080();
      double v47 = v46;
      (*(void (**)(char *, uint64_t))(v51 + 8))(v45, v52);
      double v48 = v47 * 1000000000.0;
      if ((~COERCE__INT64(v47 * 1000000000.0) & 0x7FF0000000000000) != 0)
      {
        if (v48 > -9.22337204e18)
        {
          if (v48 < 9.22337204e18)
          {
            sub_1004AC3EC((void *)inited, (uint64_t)v48);
            swift_release();
            swift_setDeallocating();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            return;
          }
          goto LABEL_18;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
  }
}

uint64_t sub_1000CA980(uint64_t a1, unsigned __int8 a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, char *a9)
{
  void (*v41)(void *__return_ptr, id *);
  id v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  unsigned __int8 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  void (*v67)(void);
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  void v80[5];
  long long v81;
  long long v82;
  long long v83;
  long long v84;
  uint64_t v85;
  int v86;
  id v87[62];
  unsigned char v88[504];
  unsigned char v89[504];
  uint64_t v90;
  __int16 v91;
  void v92[63];
  uint64_t v93;
  unsigned __int8 v94;
  void v95[31];
  void v96[32];
  id v97;

  id v78 = (char *)a1;
  LODWORD(v77) = a8;
  uint64_t v74 = a5;
  uint64_t v75 = a6;
  int v73 = a4;
  LODWORD(v76) = a3;
  id v71 = sub_10002B7CC(&qword_100AD0D90);
  __chkstk_darwin(v71);
  uint64_t v72 = (char *)&v70 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10002B7CC((uint64_t *)&unk_100AD0CF0);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v70 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10002B7CC(&qword_100ACCB10);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v70 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __chkstk_darwin(v17);
  uint64_t v22 = (char *)&v70 - v21;
  __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v70 - v23;
  uint64_t v25 = (uint64_t)v79;
  uint64_t v93 = (uint64_t)v78;
  uint64_t v94 = a2;
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(**(void **)(a7 + 32) + 240))(&v93, 1);
  if (v25) {
    return result;
  }
  id v78 = v19;
  uint64_t v79 = v24;
  uint64_t v70 = (void *)a7;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1) {
    return sub_10002B770((uint64_t)v14, (uint64_t *)&unk_100AD0CF0);
  }
  int v27 = v76;
  uint64_t v28 = (uint64_t)v14;
  uint64_t v29 = (uint64_t)v79;
  sub_10001AE98(v28, (uint64_t)v79, &qword_100ACCB10);
  sub_10002B70C(v29, (uint64_t)v22, &qword_100ACCB10);
  if (v27 == 4) {
    int v27 = v22[*(int *)(v15 + 48)];
  }
  sub_10002B770((uint64_t)v22, &qword_100ACCB10);
  char v30 = v77;
  if (v27 == 2) {
    return sub_10002B770(v29, &qword_100ACCB10);
  }
  uint64_t v31 = v29 + *(int *)(v15 + 48);
  uint64_t v32 = type metadata accessor for ItemMetadata();
  LOBYTE(v31) = *(unsigned char *)(v31 + *(int *)(v32 + 64));
  uint64_t v33 = (uint64_t)v78;
  sub_10002B70C(v29, (uint64_t)v78, &qword_100ACCB10);
  if (v31)
  {
    sub_10002B770(v33, &qword_100ACCB10);
    return sub_10002B770(v29, &qword_100ACCB10);
  }
  char v34 = *(unsigned char *)(v33 + *(int *)(v15 + 48) + *(int *)(v32 + 68));
  sub_10002B770(v33, &qword_100ACCB10);
  if (v34) {
    return sub_10002B770(v29, &qword_100ACCB10);
  }
  uint64_t v35 = v70;
  uint64_t v36 = v70[2];
  uint64_t v37 = v93;
  uint64_t v38 = v94;
  unint64_t v90 = v93;
  unint64_t v91 = v94;
  (*(void (**)(void *__return_ptr, uint64_t *, uint64_t))(*(void *)v36 + 168))(v92, &v90, 1);
  uint64_t v39 = v38;
  sub_10001AE98((uint64_t)v92, (uint64_t)v88, (uint64_t *)&unk_100AD67E0);
  sub_10001AE98((uint64_t)v88, (uint64_t)v89, (uint64_t *)&unk_100AD67E0);
  if (sub_1000D3324((uint64_t)v89) != 1)
  {
    memcpy(v87, v92, sizeof(v87));
    if (((uint64_t)v87[2] & 0x10) == 0 && (LOBYTE(v87[20]) || (BYTE2(v87[18]) & 4) == 0))
    {
      if (v30 == 2)
      {
        uint64_t v76 = 0x20000000002;
      }
      else if (v87[30])
      {
        uint64_t v77 = v37;
        uint64_t v97 = v87[30];
        uint64_t v41 = *(void (**)(void *__return_ptr, id *))(*(void *)v35[5] + 264);
        uint64_t v42 = v87[30];
        v41(v95, &v97);
        sub_10001AE98((uint64_t)v95, (uint64_t)v96, &qword_100AD0EA0);
        if (sub_1000DBD64((uint64_t)v96) == 1)
        {
        }
        else
        {
          uint64_t v43 = v96[26];
          uint64_t v44 = v96[27];
          uint64_t v45 = (*(uint64_t (**)(void))(*v70 + 520))();
          double v46 = 0;
          switch(LOBYTE(v87[55]))
          {
            case 1:
              double v46 = 1;
              goto LABEL_29;
            case 4:
              goto LABEL_50;
            default:
LABEL_29:
              if (sub_1005EBAF8(v43, v44, 0, v45 & 1, v46, (uint64_t)v87[61] & 1) == 3)
              {
                double v47 = (uint64_t)v72;
                *(void *)uint64_t v72 = v77;
                *(_WORD *)(v47 + 8) = v38;
                sub_10002B7CC((uint64_t *)&unk_100ACD9A0);
                sub_100025500((unint64_t *)&qword_100AD5640, (uint64_t *)&unk_100ACD9A0);
                double v48 = swift_allocError();
                uint64_t v50 = v49;
                *(void *)(v47 + 16) = v48;
                sub_1000DC788((uint64_t)v80);
                sub_10001AE98((uint64_t)v80, v50, (uint64_t *)&unk_100ACD9A0);
                swift_storeEnumTagMultiPayload();
                (*(void (**)(uint64_t))(*v70 + 312))(v47);
                sub_1000DBD88((uint64_t)v95);
                sub_10002B770(v47, &qword_100AD0D90);

                sub_1000D3440((uint64_t)v87);
                uint64_t v40 = (uint64_t)v79;
                return sub_10002B770(v40, &qword_100ACCB10);
              }

              sub_1000DBD88((uint64_t)v95);
              uint64_t v39 = v38;
              break;
          }
        }
        uint64_t v37 = v77;
        uint64_t v76 = 2;
        uint64_t v35 = v70;
      }
      else
      {
        uint64_t v76 = 2;
      }
      uint64_t v51 = v35[3];
      sub_10057A6F4();
      uint64_t v52 = swift_allocObject();
      *(_OWORD *)(v52 + 16) = xmmword_100973BB0;
      *(void *)(v52 + 32) = sub_10002B7CC((uint64_t *)&unk_100AD6B30);
      uint64_t v53 = (*(uint64_t (**)(uint64_t *, uint64_t))(*(void *)v51 + 272))(&v93, v52);
      swift_bridgeObjectRelease();
      id v78 = 0;
      uint64_t v77 = v37;
      if (v53 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v61 = sub_10096CE70();
        swift_bridgeObjectRelease();
        uint64_t v72 = a9;
        if (v61) {
          goto LABEL_35;
        }
      }
      else
      {
        uint64_t v54 = *(void *)((v53 & 0xFFFFFFFFFFFFFF8) + 0x10);
        uint64_t v72 = a9;
        if (v54)
        {
LABEL_35:
          if ((v53 & 0xC000000000000001) != 0)
          {
            uint64_t v55 = sub_10096CC30();
          }
          else
          {
            if (!*(void *)((v53 & 0xFFFFFFFFFFFFFF8) + 0x10))
            {
              __break(1u);
LABEL_50:
              __break(1u);
              JUMPOUT(0x1000CB378);
            }
            uint64_t v55 = *(void *)(v53 + 32);
            swift_retain();
          }
          swift_bridgeObjectRelease();
          if (*(unsigned char *)(v55 + 112) == 1)
          {
            double v56 = *(void *)(v55 + 96);
            uint64_t v57 = *(void *)(v55 + 104);
            *(void *)(v55 + 96) = 0;
            *(void *)(v55 + 104) = 0;
            *(unsigned char *)(v55 + 112) = 4;
            sub_1000D31F8(v56, v57, 1);
            uint64_t v58 = *(void (**)(uint64_t))(*(void *)a9 + 144);
            uint64_t v59 = swift_retain();
            v58(v59);
            unint64_t v60 = v39;
            swift_release_n();
          }
          else
          {
            unint64_t v60 = v39;
            swift_release();
          }
          goto LABEL_43;
        }
      }
      unint64_t v60 = v39;
      swift_bridgeObjectRelease();
LABEL_43:
      int v62 = v76 | v75;
      swift_allocObject();
      uint64_t v63 = v77;
      uint64_t v65 = v73;
      uint64_t v64 = v74;
      uint64_t v76 = v62;
      sub_1000CEC8C(v77, v60, v73, v74, v62);
      int v66 = v72;
      uint64_t v67 = *(void (**)(void))(*(void *)v72 + 144);
      id v71 = *(void *)v72 + 144;
      v67();
      swift_release();
      if (v27 == 1)
      {
        sub_10002B7CC(qword_100ACD610);
        uint64_t v68 = swift_allocObject();
        uint64_t v69 = v68;
        *(unsigned char *)(v68 + 152) = v60;
        *(_OWORD *)(v68 + 16) = 0u;
        *(_OWORD *)(v68 + 32) = 0u;
        *(unsigned char *)(v68 + 48) = 1;
        *(_OWORD *)(v68 + 56) = 0u;
        *(_OWORD *)(v68 + 72) = 0u;
        *(void *)(v68 + 88) = 0;
        *(_OWORD *)(v68 + 96) = xmmword_10097A220;
        *(unsigned char *)(v68 + 112) = 0;
        *(void *)(v68 + 120) = v65;
        *(void *)(v68 + 128) = v64;
        *(void *)(v68 + 136) = v76;
        *(void *)(v68 + 144) = v63;
        if ((v75 & 0x8000) != 0)
        {
          *(void *)(v68 + 96) = 2359552;
          *(unsigned char *)(v68 + 112) = 0;
          sub_1000D31F8(262400, 0, 0);
        }
        ((void (*)(uint64_t))v67)(v69);
        swift_release();
        uint64_t v63 = v77;
      }
      v80[0] = v63;
      v80[1] = v60;
      v80[2] = 259;
      v80[3] = v65;
      v80[4] = v64;
      uint64_t v81 = 0u;
      uint64_t v82 = 0u;
      uint64_t v83 = 0u;
      uint64_t v84 = 0u;
      uint64_t v85 = 0;
      uint64_t v86 = 151846912;
      (*(void (**)(void *))(*(void *)v66 + 136))(v80);
      sub_1000D3440((uint64_t)v87);
      return sub_10002B770((uint64_t)v79, &qword_100ACCB10);
    }
    sub_1000D3440((uint64_t)v87);
  }
  uint64_t v40 = v29;
  return sub_10002B770(v40, &qword_100ACCB10);
}

uint64_t sub_1000CB38C(uint64_t a1, void (*a2)(void *), uint64_t a3, uint64_t a4, unint64_t a5, int a6, void *a7)
{
  id v138 = a7;
  uint64_t v139 = a4;
  LODWORD(v137) = a6;
  unint64_t v141 = a5;
  uint64_t v146 = a2;
  uint64_t v147 = a3;
  uint64_t v145 = (char *)a1;
  uint64_t v133 = sub_10096B480();
  uint64_t v132 = *(void *)(v133 - 8);
  __chkstk_darwin(v133);
  uint64_t v134 = (char *)&v124 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for VFSItem(0);
  uint64_t v143 = *(void *)(v8 - 8);
  uint64_t v9 = *(void *)(v143 + 64);
  uint64_t v10 = __chkstk_darwin(v8 - 8);
  uint64_t v136 = (uint64_t)&v124 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v135 = (char *)&v124 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v140 = (uint64_t)&v124 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v142 = (char *)&v124 - v16;
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v124 - v17;
  uint64_t v19 = sub_10002B7CC(&qword_100ACD600);
  uint64_t v144 = *(void *)(v19 - 8);
  uint64_t v20 = *(void *)(v144 + 64);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v22 = __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v124 - v23;
  __chkstk_darwin(v22);
  id v26 = (char *)&v124 - v25;
  uint64_t v27 = sub_10002B7CC(&qword_100ACD5F8);
  __chkstk_darwin(v27);
  uint64_t v29 = (void **)((char *)&v124 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10002B70C((uint64_t)v145, (uint64_t)v29, &qword_100ACD5F8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    char v30 = *v29;
    swift_errorRetain();
    v146(v30);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    uint64_t v33 = (uint64_t)v142;
    uint64_t v32 = v143;
    uint64_t v129 = v9;
    uint64_t v127 = v20;
    uint64_t v128 = (uint64_t)&v124 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v145 = v24;
    char v131 = v26;
    unint64_t v130 = v18;
    uint64_t v34 = v144;
    if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(v144 + 48))(v29, 1, v19) == 1)
    {
      return ((uint64_t (*)(void))v146)(0);
    }
    else
    {
      uint64_t v35 = v34;
      uint64_t v36 = v19;
      uint64_t v37 = (uint64_t)v131;
      sub_10001AE98((uint64_t)v29, (uint64_t)v131, &qword_100ACD600);
      if (*(unsigned char *)(v37 + *(int *)(v36 + 56)))
      {
        sub_1000DBD10();
        swift_allocError();
        *uint64_t v38 = 1;
        ((void (*)(void))v146)();
        swift_errorRelease();
        return sub_10002B770(v37, &qword_100ACD600);
      }
      else
      {
        uint64_t v126 = v36;
        uint64_t v39 = (uint64_t)v130;
        sub_1000D37D0(v37, (uint64_t)v130, type metadata accessor for VFSItem);
        sub_10002B70C(v37, (uint64_t)v145, &qword_100ACD600);
        sub_1000D37D0(v39, v33, type metadata accessor for VFSItem);
        sub_1000D37D0(v33, v140, type metadata accessor for VFSItem);
        uint64_t v40 = *(unsigned __int8 *)(v32 + 80);
        uint64_t v41 = (v40 + 24) & ~v40;
        unint64_t v42 = (v41 + v129 + 7) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v43 = (v41 + v129 + 23) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v44 = (v43 + 23) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v45 = swift_allocObject();
        uint64_t v46 = v139;
        *(void *)(v45 + 16) = v139;
        sub_10003D140(v33, v45 + v41);
        unint64_t v47 = v45 + v42;
        unint64_t v48 = v141;
        *(void *)unint64_t v47 = v141;
        *(unsigned char *)(v47 + 8) = v137;
        uint64_t v49 = (void *)(v45 + v43);
        uint64_t v50 = v146;
        uint64_t v51 = v147;
        *uint64_t v49 = v146;
        v49[1] = v51;
        id v52 = v138;
        *(void *)(v45 + v44) = v138;
        uint64_t v53 = v52;
        if (((v48 >> 58) & 0x3C | (v48 >> 1) & 3) == 0x1B)
        {
          uint64_t v54 = v35;
          uint64_t v55 = swift_allocObject();
          *(void *)(v55 + 16) = sub_1000DBCBC;
          *(void *)(v55 + 24) = v45;
          double v56 = *(void (**)(void *))(v46 + 24);
          sub_10002B7CC((uint64_t *)&unk_100AD6720);
          uint64_t v57 = swift_dynamicCastClass();
          if (v57)
          {
            uint64_t v58 = v57;
            uint64_t v59 = swift_allocObject();
            uint64_t v143 = v59;
            *(void *)(v59 + 16) = v50;
            *(void *)(v59 + 24) = v51;
            uint64_t v60 = v55;
            uint64_t v61 = v128;
            sub_10002B70C((uint64_t)v145, v128, &qword_100ACD600);
            uint64_t v62 = *(unsigned __int8 *)(v54 + 80);
            uint64_t v146 = v56;
            uint64_t v63 = (v62 + 16) & ~v62;
            unint64_t v64 = (v127 + v63 + 7) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v65 = (v64 + 15) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v66 = swift_allocObject();
            sub_10001AE98(v61, v66 + v63, &qword_100ACD600);
            *(void *)(v66 + v64) = v58;
            id v67 = v138;
            uint64_t v68 = (uint64_t (**)())(v66 + v65);
            char *v68 = sub_1000DEB2C;
            v68[1] = (uint64_t (*)())v60;
            swift_retain_n();
            swift_retain();
            unint64_t v69 = v141;
            sub_1000CE628(v141);
            id v70 = v67;
            swift_retain();
            swift_retain();
            swift_retain();
            swift_retain();
            sub_1000CE628(v69);
            id v71 = v70;
            swift_retain();
            swift_retain();
            swift_retain();
            sub_1004A8A2C((uint64_t)"evict(_:request:evictionReason:progress:completionHandler:)", 59, 2, 0, (uint64_t)FPDDomainFPFSBackend.isDeadEnd(), 0, (uint64_t)sub_1000DEB20, v143, (uint64_t)sub_1000DBCDC, v66);
            swift_release();
            swift_release_n();
            swift_release();
            uint64_t v72 = (uint64_t)v130;
            uint64_t v73 = (uint64_t)v145;
            swift_release();
            swift_release();
            swift_release();
            uint64_t v74 = v140;
          }
          else
          {
            swift_retain();
            swift_retain();
            unint64_t v69 = v141;
            sub_1000CE628(v141);
            id v67 = v53;
            id v87 = v53;
            swift_retain();
            swift_retain();
            swift_retain();
            sub_1000CE628(v69);
            id v88 = v87;
            swift_retain();
            uint64_t v74 = v140;
            sub_1000CC59C(v46, v140, v69, v137, (uint64_t)v50, v51, v88);
            swift_release();
            swift_release_n();
            swift_release();
            uint64_t v73 = (uint64_t)v145;
            uint64_t v72 = (uint64_t)v130;
          }
          sub_1000D3770(v74, type metadata accessor for VFSItem);
          sub_1000B6C28(v69);

          swift_release();
          sub_10002B770(v73, &qword_100ACD600);
          sub_10002B770((uint64_t)v131, &qword_100ACD600);
          return sub_1000D3770(v72, type metadata accessor for VFSItem);
        }
        else
        {
          uint64_t v142 = (char *)v45;
          uint64_t v125 = v40;
          uint64_t v75 = ~v40;
          unsigned __int8 v149 = 1;
          uint64_t v76 = swift_allocObject();
          uint64_t v143 = v76;
          *(unsigned char *)(v76 + 16) = 1;
          uint64_t v77 = *(void **)&v131[*(int *)(v126 + 52)];
          if (v77)
          {
            id v148 = *(id *)&v131[*(int *)(v126 + 52)];
            __chkstk_darwin(v76);
            uint64_t v78 = v139;
            *(&v124 - 6) = v139;
            *(&v124 - 5) = (uint64_t)&v148;
            *((unsigned char *)&v124 - 32) = v137;
            *(&v124 - 3) = v79;
            uint64_t v122 = (uint64_t)v130;
            BOOL v123 = &v149;
            swift_retain();
            swift_retain();
            unint64_t v80 = v141;
            sub_1000CE628(v141);
            id v81 = v53;
            swift_retain();
            swift_retain();
            sub_1000CE628(v80);
            id v82 = v81;
            id v83 = v77;
            sub_10048DC38(v78, (uint64_t)"evict(_:request:evictionReason:progress:completionHandler:)", 59, 2, 0, (uint64_t)sub_1000DBCF4, (uint64_t)(&v124 - 8), v85);
            uint64_t v86 = (uint64_t)v135;

            uint64_t v92 = v51;
            uint64_t v93 = v139;
          }
          else
          {
            swift_retain();
            uint64_t v93 = v139;
            swift_retain();
            unint64_t v89 = v141;
            sub_1000CE628(v141);
            id v90 = v53;
            swift_retain();
            swift_retain();
            sub_1000CE628(v89);
            id v91 = v90;
            uint64_t v92 = v51;
            uint64_t v86 = (uint64_t)v135;
          }
          uint64_t v94 = v129;
          uint64_t v95 = v125;
          int v96 = v149;
          sub_1000D37D0((uint64_t)v130, v86, type metadata accessor for VFSItem);
          sub_1000D37D0(v86, v136, type metadata accessor for VFSItem);
          uint64_t v97 = (v95 + 16) & v75;
          unint64_t v98 = (v94 + v97 + 7) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v99 = (v98 + 23) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v100 = (v99 + 15) & 0xFFFFFFFFFFFFFFF8;
          uint64_t v101 = swift_allocObject();
          uint64_t v102 = v86;
          uint64_t v103 = v101;
          sub_10003D140(v102, v101 + v97);
          unint64_t v104 = (void *)(v103 + v98);
          *unint64_t v104 = v146;
          v104[1] = v92;
          uint64_t v105 = v143;
          *(void *)(v103 + v99) = v143;
          *(void *)(v103 + v100) = v93;
          unint64_t v106 = (void *)(v103 + ((v100 + 15) & 0xFFFFFFFFFFFFFFF8));
          uint64_t v107 = (uint64_t)v142;
          *unint64_t v106 = sub_1000DBCBC;
          v106[1] = v107;
          if (v96 == 1
            && (unint64_t v108 = *(void (**)(void *))(v93 + 24),
                sub_10002B7CC((uint64_t *)&unk_100AD6720),
                (uint64_t v109 = swift_dynamicCastClass()) != 0))
          {
            uint64_t v110 = v109;
            uint64_t v111 = swift_allocObject();
            uint64_t v112 = v147;
            *(void *)(v111 + 16) = v146;
            *(void *)(v111 + 24) = v112;
            uint64_t v113 = v128;
            sub_10002B70C((uint64_t)v145, v128, &qword_100ACD600);
            unint64_t v114 = (*(unsigned __int8 *)(v144 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v144 + 80);
            unint64_t v115 = (v127 + v114 + 7) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v116 = swift_allocObject();
            uint64_t v146 = v108;
            sub_10001AE98(v113, v116 + v114, &qword_100ACD600);
            *(void *)(v116 + v115) = v110;
            unint64_t v117 = (void *)(v116 + ((v115 + 15) & 0xFFFFFFFFFFFFFFF8));
            uint64_t v118 = (uint64_t)v130;
            void *v117 = sub_1000DBCD4;
            v117[1] = v103;
            swift_retain_n();
            swift_retain_n();
            swift_retain_n();
            swift_retain_n();
            swift_retain_n();
            swift_retain();
            sub_1004A8A2C((uint64_t)"evict(_:request:evictionReason:progress:completionHandler:)", 59, 2, 0, (uint64_t)FPDDomainFPFSBackend.isDeadEnd(), 0, (uint64_t)sub_1000DEB20, v111, (uint64_t)sub_1000DBCDC, v116);
            swift_release();
            uint64_t v119 = (uint64_t)v145;
            swift_release();
            swift_release();
            swift_release();
            uint64_t v120 = v136;
          }
          else
          {
            uint64_t v121 = v147;
            swift_retain_n();
            swift_retain_n();
            swift_retain_n();
            swift_retain_n();
            uint64_t v120 = v136;
            sub_1000CCDC4(v136, v146, v121, v105, v93, (void (*)(uint64_t))sub_1000DBCBC, v107);
            swift_release();
            uint64_t v119 = (uint64_t)v145;
            uint64_t v118 = (uint64_t)v130;
          }
          sub_1000D3770(v120, type metadata accessor for VFSItem);
          swift_release_n();
          swift_release_n();
          swift_release();
          swift_release();
          sub_1000D3770(v140, type metadata accessor for VFSItem);
          sub_1000B6C28(v141);

          swift_release();
          sub_10002B770(v119, &qword_100ACD600);
          sub_10002B770((uint64_t)v131, &qword_100ACD600);
          sub_1000D3770(v118, type metadata accessor for VFSItem);
          return swift_release();
        }
      }
    }
  }
}

uint64_t sub_1000CC328(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v8 = sub_10096B480();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100578CB4(*(void **)a1, *(unsigned __int8 *)(a1 + 8), 8uLL);
  if (v4)
  {
    uint64_t v23 = v8;
    id v13 = (id)fpfs_current_or_default_log();
    sub_10096B490();
    swift_errorRetain();
    uint64_t v14 = sub_10096B470();
    os_log_type_t v15 = sub_10096C5B0();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = swift_slowAlloc();
      uint64_t v22 = a3;
      uint64_t v17 = (uint8_t *)v16;
      uint64_t v18 = (void *)swift_slowAlloc();
      v21[1] = a4;
      *(_DWORD *)uint64_t v17 = 138412290;
      v21[0] = v17 + 4;
      swift_getErrorValue();
      id v19 = Error.prettyDescription.getter(v25);
      id v24 = v19;
      sub_10096C8C0();
      void *v18 = v19;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "⏰ Failed to remove pending downloads %@", v17, 0xCu);
      sub_10002B7CC((uint64_t *)&unk_100ACCBC0);
      swift_arrayDestroy();
      swift_slowDealloc();
      a3 = v22;
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v12 = (id *)(*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v23);
  }
  return a3(v12);
}

void sub_1000CC59C(uint64_t a1, uint64_t a2, unint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, void *a7)
{
  id v43 = a7;
  uint64_t v40 = a5;
  uint64_t v41 = a6;
  unsigned int v42 = a4;
  uint64_t v10 = sub_10002B7CC((uint64_t *)&unk_100ACD990);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10096B760();
  uint64_t v37 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  os_log_type_t v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10096B7D0();
  uint64_t v38 = *(void *)(v16 - 8);
  uint64_t v39 = v16;
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for VFSItem(0);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(void *)(v20 + 64);
  uint64_t v22 = __chkstk_darwin(v19 - 8);
  int v23 = (a3 >> 58) & 0x3C | (a3 >> 1) & 3;
  BOOL v24 = *(unsigned __int8 *)(a2 + *(int *)(v22 + 36)) - 1 > 1 || v23 == 6;
  if (v24
    || v23 == 9
    && ([*(id *)((a3 & 0xFFFFFFFFFFFFFF9) + 0x18) isProviderInitiated] & 1) == 0)
  {
    uint64_t v25 = *(void *)(*(void *)(a1 + 32) + 16);
    sub_1000D37D0(a2, (uint64_t)&v36 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for VFSItem);
    unint64_t v26 = (*(unsigned __int8 *)(v20 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
    uint64_t v27 = (void *)swift_allocObject();
    uint64_t v28 = v41;
    v27[2] = v40;
    v27[3] = v28;
    v27[4] = a1;
    sub_10003D140((uint64_t)&v36 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v27 + v26);
    *(void *)((char *)v27 + ((v21 + v26 + 7) & 0xFFFFFFFFFFFFFFF8)) = a3;
    uint64_t v29 = *(uint64_t (**)(uint64_t, void, uint64_t (*)(uint64_t), void *))(*(void *)v25 + 712);
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1000CE628(a3);
    id v30 = (id)v29(a2, v42, sub_1000DC508, v27);
    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v31 = *(void ***)a2;
    char v32 = *(unsigned char *)(a2 + 8);
    qos_class_self();
    sub_10096B740();
    uint64_t v33 = v37;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v12, 1, v13) == 1)
    {
      (*(void (**)(char *, void, uint64_t))(v33 + 104))(v15, enum case for DispatchQoS.QoSClass.utility(_:), v13);
      sub_10002B770((uint64_t)v12, (uint64_t *)&unk_100ACD990);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v15, v12, v13);
    }
    sub_10096B7B0();
    id v30 = sub_1000C9D8C(v31, v32, a3, (uint64_t)v18, v42, v40, v41);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v18, v39);
  }
  id v34 = v43;
  uint64_t v35 = (char *)[v43 totalUnitCount];
  if (__OFADD__(v35, 1))
  {
    __break(1u);
  }
  else
  {
    [v34 setTotalUnitCount:v35 + 1];
    [v34 addChild:v30 withPendingUnitCount:1];
  }
}

uint64_t sub_1000CCA14(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4, uint64_t *a5, unint64_t a6)
{
  if (a1)
  {
    swift_errorRetain();
    a2(a1);
    return swift_errorRelease();
  }
  else
  {
    uint64_t v12 = *a5;
    char v13 = *((unsigned char *)a5 + 8);
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = a2;
    *(void *)(v14 + 24) = a3;
    uint64_t v16 = v12;
    char v17 = v13;
    os_log_type_t v15 = (void *)swift_allocObject();
    sub_1000D3184((uint64_t)&v16, (uint64_t)(v15 + 2));
    v15[4] = a6;
    v15[5] = a4;
    v15[6] = a2;
    v15[7] = a3;
    swift_retain_n();
    sub_1000CE628(a6);
    swift_retain();
    sub_1004A8A2C((uint64_t)"propagateToFP(itemID:request:completion:)", 41, 2, 0, (uint64_t)FPDDomainFPFSBackend.isDeadEnd(), 0, (uint64_t)sub_1000DEB20, v14, (uint64_t)sub_1000D31E0, (uint64_t)v15);
    swift_release();
    return swift_release();
  }
}

void *sub_1000CCB8C(uint64_t a1, void *a2, char a3, BOOL *a4, uint64_t a5, BOOL *a6)
{
  void (*v15)(void *__return_ptr, void **, uint64_t);
  id v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  unsigned char v21[496];
  _DWORD v22[124];
  unsigned char v23[504];
  unsigned char v24[504];
  void *v25;
  __int16 v26;
  void __src[63];
  void v28[31];
  unsigned char v29[208];
  uint64_t v30;
  uint64_t v31;
  unsigned char __dst[504];
  void *v33;

  uint64_t v33 = a2;
  uint64_t result = (*(void *(**)(void *__return_ptr, void **))(**(void **)(a1 + 40) + 264))(v28, &v33);
  if (!v6)
  {
    sub_10001AE98((uint64_t)v28, (uint64_t)v29, &qword_100AD0EA0);
    uint64_t result = (void *)sub_1000DBD64((uint64_t)v29);
    if (result != 1)
    {
      uint64_t v20 = v30;
      uint64_t v19 = v31;
      uint64_t v14 = *(void *)(a1 + 16);
      uint64_t v25 = a2;
      unint64_t v26 = 256;
      os_log_type_t v15 = *(void (**)(void *__return_ptr, void **, uint64_t))(*(void *)v14 + 168);
      uint64_t v16 = a2;
      v15(__src, &v25, 1);

      sub_10001AE98((uint64_t)__src, (uint64_t)v23, (uint64_t *)&unk_100AD67E0);
      sub_10001AE98((uint64_t)v23, (uint64_t)v24, (uint64_t *)&unk_100AD67E0);
      if (sub_1000D3324((uint64_t)v24) == 1)
      {
        return (void *)sub_1000DBD88((uint64_t)v28);
      }
      else
      {
        memcpy(__dst, __src, 0x1F0uLL);
        sub_100722F18((uint64_t)v21);
        sub_1000D3440((uint64_t)__dst);
        memcpy(v22, v21, sizeof(v22));
        char v17 = sub_1005EBAF8(v20, v19, 0, (*(void *)(a1 + 112) & 0x200) != 0, 1u, v22[122] & 1);
        if (v17 == 3 && a3 != 2) {
          *a4 = 0;
        }
        sub_1000DBD88((uint64_t)v28);
        sub_1000DBF50((uint64_t)v22);
        uint64_t result = (void *)type metadata accessor for VFSItem(0);
        if (*(unsigned char *)(a5 + *((int *)result + 7)) == 1)
        {
          uint64_t v18 = v17 != 500 && v17 != 3;
          *a6 = v18;
          *a4 = v17 != 3;
        }
      }
    }
  }
  return result;
}

void sub_1000CCDC4(uint64_t a1, void (*a2)(void *), uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t), uint64_t a7)
{
  uint64_t v64 = a7;
  unint64_t v65 = a6;
  uint64_t v66 = a5;
  id v67 = a2;
  uint64_t v10 = sub_10096A630();
  __chkstk_darwin(v10 - 8);
  uint64_t v55 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = sub_10096A650();
  uint64_t v56 = *(void *)(v57 - 8);
  __chkstk_darwin(v57);
  uint64_t v54 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10096B730();
  uint64_t v62 = *(void *)(v13 - 8);
  uint64_t v63 = v13;
  __chkstk_darwin(v13);
  uint64_t v60 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = sub_10096B7D0();
  uint64_t v59 = *(void *)(v61 - 8);
  __chkstk_darwin(v61);
  uint64_t v58 = (char *)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = (int *)type metadata accessor for ItemMetadata();
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for VFSItem(0);
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v53 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __chkstk_darwin(v20);
  uint64_t v25 = (char *)&v53 - v24;
  uint64_t v26 = __chkstk_darwin(v23);
  uint64_t v28 = (char *)&v53 - v27;
  uint64_t v29 = (unsigned __int8 *)(a1 + *(int *)(v26 + 28));
  if (v29[v16[20]] == 1)
  {
    uint64_t v53 = a4;
    int v30 = *v29;
    sub_1000D37D0(a1, (uint64_t)&v53 - v27, type metadata accessor for VFSItem);
    if (v30 == 1)
    {
      uint64_t v31 = (uint64_t)v28;
LABEL_16:
      sub_1000D3770(v31, type metadata accessor for VFSItem);
      goto LABEL_17;
    }
    int v32 = v28[*(int *)(v19 + 28) + v16[27]];
    sub_1000D3770((uint64_t)v28, type metadata accessor for VFSItem);
    if (v32 == 1) {
      goto LABEL_17;
    }
    int v33 = fpfs_supports_partial_materialization();
    sub_1000D37D0(a1, (uint64_t)v25, type metadata accessor for VFSItem);
    if (!v33)
    {
      uint64_t v31 = (uint64_t)v25;
      goto LABEL_16;
    }
    sub_1000D37D0((uint64_t)&v25[*(int *)(v19 + 28)], (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for ItemMetadata);
    sub_1000D3770((uint64_t)v25, type metadata accessor for VFSItem);
    uint64_t v34 = *(void *)&v18[v16[26]];
    sub_1000D3770((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for ItemMetadata);
    a4 = v53;
    if (!v34)
    {
LABEL_17:
      v67(0);
      return;
    }
  }
  swift_beginAccess();
  int v35 = *(unsigned __int8 *)(a4 + 16);
  uint64_t v36 = v67;
  if (v35 == 1)
  {
    int v37 = *v29;
    sub_1000D37D0(a1, (uint64_t)v22, type metadata accessor for VFSItem);
    if (v37 == 1)
    {
      uint64_t v38 = sub_1000D3770((uint64_t)v22, type metadata accessor for VFSItem);
LABEL_11:
      v65(v38);
      return;
    }
    sub_1000D37D0((uint64_t)&v22[*(int *)(v19 + 28)], (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for ItemMetadata);
    sub_1000D3770((uint64_t)v22, type metadata accessor for VFSItem);
    int v39 = v18[v16[21]];
    uint64_t v38 = sub_1000D3770((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for ItemMetadata);
    if (v39) {
      goto LABEL_11;
    }
  }
  uint64_t v40 = swift_allocBox();
  sub_1000D37D0(a1, v41, type metadata accessor for VFSItem);
  type metadata accessor for VFSFileTree(0);
  uint64_t v42 = swift_dynamicCastClass();
  if (v42)
  {
    id v43 = *(void **)(v42 + 216);
    unint64_t v44 = (void *)swift_allocObject();
    v44[2] = v40;
    v44[3] = v36;
    v44[4] = a3;
    aBlock[4] = sub_1000DEB1C;
    aBlock[5] = v44;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100020480;
    aBlock[3] = &unk_100A6F368;
    uint64_t v45 = _Block_copy(aBlock);
    swift_retain();
    id v46 = v43;
    swift_retain();
    swift_retain();
    unint64_t v47 = v58;
    sub_10096B780();
    uint64_t v68 = _swiftEmptyArrayStorage;
    sub_1000278B4((unint64_t *)&unk_100ACAEF0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10002B7CC((uint64_t *)&unk_100ACB5C0);
    sub_100025500((unint64_t *)&qword_100ACAF00, (uint64_t *)&unk_100ACB5C0);
    unint64_t v48 = v60;
    uint64_t v49 = v63;
    sub_10096CA60();
    sub_10096C6B0();
    _Block_release(v45);
    swift_release();

    (*(void (**)(char *, uint64_t))(v62 + 8))(v48, v49);
    (*(void (**)(char *, uint64_t))(v59 + 8))(v47, v61);
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    sub_10096A580();
    sub_100042898((uint64_t)_swiftEmptyArrayStorage);
    sub_1000278B4((unint64_t *)&qword_100ACB680, (void (*)(uint64_t))&type metadata accessor for CocoaError);
    uint64_t v50 = v54;
    uint64_t v51 = v57;
    sub_10096ABD0();
    id v52 = (void *)sub_10096A4D0();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v50, v51);
    v36(v52);
  }
}

void sub_1000CD5F0(uint64_t a1, void (*a2)(void *), uint64_t a3)
{
  uint64_t v31 = a3;
  int v32 = a2;
  uint64_t v3 = sub_10096B480();
  uint64_t v29 = *(void *)(v3 - 8);
  uint64_t v30 = v3;
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10096A630();
  __chkstk_darwin(v6 - 8);
  uint64_t v7 = sub_10096A650();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10002B7CC(&qword_100ACA8C0);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10096AE50();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for VFSItem(0);
  swift_projectBox();
  swift_beginAccess();
  VFSItem.fetchURL()(v13);
  swift_endAccess();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    sub_10002B770((uint64_t)v13, &qword_100ACA8C0);
    sub_10096A580();
    sub_100042898((uint64_t)_swiftEmptyArrayStorage);
    sub_1000278B4((unint64_t *)&qword_100ACB680, (void (*)(uint64_t))&type metadata accessor for CocoaError);
    sub_10096ABD0();
    uint64_t v18 = (void *)sub_10096A4D0();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    v32(v18);
  }
  else
  {
    uint64_t v19 = v32;
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v13, v14);
    id v20 = (id)fpfs_current_or_default_log();
    sub_10096B490();
    uint64_t v21 = sub_10096B470();
    os_log_type_t v22 = sub_10096C5B0();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Should not procedd with eviction due to content policy prevention", v23, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v29 + 8))(v5, v30);
    sub_10096AD20(v24);
    uint64_t v26 = v25;
    id v27 = (id)FPMissingAllowsEvictingCapabilitiesError();

    v19(v27);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  }
}

uint64_t sub_1000CDA48(uint64_t a1, void (*a2)(uint64_t *), uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v70 = a5;
  unint64_t v74 = a4;
  uint64_t v79 = a2;
  uint64_t v80 = a3;
  uint64_t v78 = a1;
  uint64_t v5 = sub_10096B480();
  uint64_t v75 = *(void *)(v5 - 8);
  uint64_t v76 = v5;
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v72 = (char *)&v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  id v71 = (char *)&v68 - v8;
  uint64_t v9 = sub_10002B7CC(&qword_100ACD600);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  unint64_t v69 = (uint64_t *)((char *)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v68 = (uint64_t *)((char *)&v68 - v14);
  __chkstk_darwin(v13);
  uint64_t v77 = (uint64_t)&v68 - v15;
  uint64_t v16 = sub_10096A630();
  __chkstk_darwin(v16 - 8);
  uint64_t v17 = sub_10096A650();
  uint64_t v73 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v68 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_10002B7CC((uint64_t *)&unk_100ACEC50);
  __chkstk_darwin(v20);
  os_log_type_t v22 = (uint64_t *)((char *)&v68 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v23 = sub_10002B7CC(&qword_100ACD5F8);
  __chkstk_darwin(v23);
  uint64_t v25 = (uint64_t *)((char *)&v68 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10002B70C(v78, (uint64_t)v25, &qword_100ACD5F8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *os_log_type_t v22 = *v25;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    v79(v22);
    swift_errorRelease();
LABEL_5:
    id v27 = (uint64_t *)&unk_100ACEC50;
    uint64_t v28 = (uint64_t)v22;
    return sub_10002B770(v28, v27);
  }
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v10 + 48))(v25, 1, v9) == 1)
  {
    sub_10096A580();
    sub_100042898((uint64_t)_swiftEmptyArrayStorage);
    sub_1000278B4((unint64_t *)&qword_100ACB680, (void (*)(uint64_t))&type metadata accessor for CocoaError);
    sub_10096ABD0();
    uint64_t v26 = sub_10096A4D0();
    (*(void (**)(char *, uint64_t))(v73 + 8))(v19, v17);
    *os_log_type_t v22 = v26;
    swift_storeEnumTagMultiPayload();
    v79(v22);
    goto LABEL_5;
  }
  uint64_t v29 = v77;
  sub_10001AE98((uint64_t)v25, v77, &qword_100ACD600);
  uint64_t v30 = v29 + *(int *)(type metadata accessor for VFSItem(0) + 28);
  LODWORD(v30) = *(unsigned __int8 *)(v30 + *(int *)(type metadata accessor for ItemMetadata() + 72));
  id v31 = (id)fpfs_current_or_default_log();
  if (v30 == 1)
  {
    int v32 = v71;
    sub_10096B490();
    int v33 = v68;
    sub_10002B70C(v29, (uint64_t)v68, &qword_100ACD600);
    unint64_t v34 = v74;
    sub_1000CE628(v74);
    sub_1000CE628(v34);
    int v35 = sub_10096B470();
    os_log_type_t v36 = sub_10096C5A0();
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = swift_slowAlloc();
      uint64_t v81 = swift_slowAlloc();
      *(_DWORD *)uint64_t v37 = 136315394;
      uint64_t v38 = (uint64_t)v33;
      uint64_t v39 = *v33;
      char v40 = *(unsigned char *)(v38 + 8);
      sub_10002B770(v38, &qword_100ACD600);
      uint64_t v41 = VFSItemID.parseableString.getter(v39, v40);
      uint64_t v83 = sub_100719D44(v41, v42, &v81);
      sub_10096C8C0();
      swift_bridgeObjectRelease();
      *(_WORD *)(v37 + 12) = 2080;
      unint64_t v43 = sub_1005232CC(v34);
      unint64_t v45 = v44;
      sub_1000B6C28(v34);
      uint64_t v83 = sub_100719D44(v43, v45, &v81);
      sub_10096C8C0();
      swift_bridgeObjectRelease();
      sub_1000B6C28(v34);
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "attaching %s for %s", (uint8_t *)v37, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v75 + 8))(v71, v76);
    }
    else
    {
      sub_1000B6C28(v34);
      sub_10002B770((uint64_t)v33, &qword_100ACD600);
      sub_1000B6C28(v34);

      (*(void (**)(char *, uint64_t))(v75 + 8))(v32, v76);
    }
    uint64_t v62 = v79;
    uint64_t v63 = *(void *)(*(void *)(v70 + 32) + 16);
    char v64 = *(unsigned char *)(v29 + 8);
    uint64_t v81 = *(void *)v29;
    char v82 = v64;
    unint64_t v65 = *(void (**)(uint64_t *, void (*)(void), uint64_t))(*(void *)v63 + 808);
    swift_retain();
    v65(&v81, (void (*)(void))v62, v80);
    swift_release();
  }
  else
  {
    id v46 = v72;
    sub_10096B490();
    unint64_t v47 = v69;
    sub_10002B70C(v29, (uint64_t)v69, &qword_100ACD600);
    unint64_t v48 = v74;
    sub_1000CE628(v74);
    sub_1000CE628(v48);
    uint64_t v49 = sub_10096B470();
    os_log_type_t v50 = sub_10096C5A0();
    int v51 = v50;
    if (os_log_type_enabled(v49, v50))
    {
      uint64_t v52 = swift_slowAlloc();
      LODWORD(v78) = v51;
      uint64_t v53 = v52;
      uint64_t v81 = swift_slowAlloc();
      *(_DWORD *)uint64_t v53 = 136315394;
      uint64_t v54 = (uint64_t)v47;
      uint64_t v55 = *v47;
      char v56 = *(unsigned char *)(v54 + 8);
      sub_10002B770(v54, &qword_100ACD600);
      uint64_t v57 = VFSItemID.parseableString.getter(v55, v56);
      uint64_t v83 = sub_100719D44(v57, v58, &v81);
      sub_10096C8C0();
      swift_bridgeObjectRelease();
      *(_WORD *)(v53 + 12) = 2080;
      unint64_t v59 = sub_1005232CC(v48);
      unint64_t v61 = v60;
      sub_1000B6C28(v48);
      uint64_t v83 = sub_100719D44(v59, v61, &v81);
      sub_10096C8C0();
      uint64_t v29 = v77;
      swift_bridgeObjectRelease();
      sub_1000B6C28(v48);
      _os_log_impl((void *)&_mh_execute_header, v49, (os_log_type_t)v78, "not reattaching already attached item %s for %s", (uint8_t *)v53, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v75 + 8))(v72, v76);
    }
    else
    {
      sub_1000B6C28(v48);
      sub_10002B770((uint64_t)v47, &qword_100ACD600);
      sub_1000B6C28(v48);

      (*(void (**)(char *, uint64_t))(v75 + 8))(v46, v76);
    }
    uint64_t v66 = v79;
    sub_1000D37D0(v29, (uint64_t)v22, type metadata accessor for VFSItem);
    swift_storeEnumTagMultiPayload();
    v66(v22);
    sub_10002B770((uint64_t)v22, (uint64_t *)&unk_100ACEC50);
  }
  id v27 = &qword_100ACD600;
  uint64_t v28 = v29;
  return sub_10002B770(v28, v27);
}

uint64_t sub_1000CE3BC(uint64_t a1, void (*a2)(void *))
{
  v4[1] = 0;
  v4[2] = 0;
  v4[0] = a1;
  char v5 = 1;
  swift_errorRetain();
  a2(v4);

  return swift_errorRelease();
}

uint64_t sub_1000CE428(uint64_t a1, void (*a2)(void *))
{
  v4[0] = a1;
  memset(&v4[1], 0, 24);
  char v5 = 1;
  swift_errorRetain();
  a2(v4);

  return swift_errorRelease();
}

uint64_t sub_1000CE494(uint64_t a1, void (*a2)(void *))
{
  uint64_t v4 = sub_10002B7CC(&qword_100ACD5F8);
  __chkstk_darwin(v4);
  uint64_t v6 = (uint64_t *)((char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  *uint64_t v6 = a1;
  swift_storeEnumTagMultiPayload();
  swift_errorRetain();
  a2(v6);
  return sub_10002B770((uint64_t)v6, &qword_100ACD5F8);
}

uint64_t sub_1000CE558(uint64_t a1, void (*a2)(uint64_t *))
{
  uint64_t v4 = a1;
  __int16 v5 = 256;
  swift_errorRetain();
  a2(&v4);

  return swift_errorRelease();
}

uint64_t sub_1000CE5C0(uint64_t a1, void (*a2)(uint64_t *))
{
  uint64_t v4 = a1;
  char v5 = 1;
  swift_errorRetain();
  a2(&v4);

  return swift_errorRelease();
}

unint64_t sub_1000CE628(unint64_t result)
{
  switch((result >> 58) & 0x3C | (result >> 1) & 3)
  {
    case 0uLL:
    case 1uLL:
    case 2uLL:
    case 3uLL:
    case 4uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 8uLL:
    case 9uLL:
    case 0xAuLL:
    case 0xBuLL:
    case 0xCuLL:
    case 0xDuLL:
    case 0xEuLL:
    case 0xFuLL:
    case 0x10uLL:
    case 0x11uLL:
    case 0x12uLL:
    case 0x13uLL:
    case 0x14uLL:
    case 0x15uLL:
    case 0x16uLL:
    case 0x17uLL:
    case 0x18uLL:
    case 0x19uLL:
    case 0x1AuLL:
    case 0x1BuLL:
    case 0x1CuLL:
    case 0x1DuLL:
    case 0x1EuLL:
    case 0x1FuLL:
    case 0x20uLL:
    case 0x21uLL:
    case 0x22uLL:
    case 0x23uLL:
    case 0x24uLL:
    case 0x25uLL:
    case 0x26uLL:
    case 0x27uLL:
    case 0x28uLL:
      uint64_t result = swift_retain();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000CE710()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, AssociatedTypeWitness);

  return swift_deallocObject();
}

uint64_t sub_1000CE810()
{
  uint64_t v1 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return sub_1006BB798(v0 + v2, *(void (**)(void))(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_1000CE8C0()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 32) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (((((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 17) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(unint64_t))(v1 + 8))(v0 + v2);
  swift_release();
  swift_release();
  sub_1000B6C28(*(void *)(v0 + v3));

  return swift_deallocObject();
}

uint64_t sub_1000CE988(uint64_t a1)
{
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 32) - 8) + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 32) - 8) + 80);
  unint64_t v3 = (*(void *)(*(void *)(*(void *)(v1 + 32) - 8) + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1000C0284(a1, v1 + v2, *(void (**)(uint64_t))(v1 + v3), *(void *)(v1 + v3 + 8), *(void **)(v1 + ((v3 + 23) & 0xFFFFFFFFFFFFFFF8)), *(unsigned __int8 *)(v1 + ((v3 + 23) & 0xFFFFFFFFFFFFFFF8) + 8), *(unsigned __int8 *)(v1 + ((v3 + 23) & 0xFFFFFFFFFFFFFFF8) + 9), *(void *)(v1 + ((((v3 + 23) & 0xFFFFFFFFFFFFFFF8) + 17) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v1 + 32), *(void *)(v1 + 56));
}

uint64_t sub_1000CEA3C()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (v3 + *(void *)(v2 + 64) + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  sub_1000B6C28(*(void *)(v0 + v4));

  return swift_deallocObject();
}

void sub_1000CEB2C(uint64_t a1)
{
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 32) - 8) + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 32) - 8) + 80);
  sub_1000C074C(a1, *(void (**)(uint64_t))(v1 + 64), *(void *)(v1 + 72), v1 + v2, *(void *)(v1 + ((v2 + *(void *)(*(void *)(*(void *)(v1 + 32) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8)), *(unsigned char *)(v1 + ((v2 + *(void *)(*(void *)(*(void *)(v1 + 32) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8), *(void *)(v1 + ((v2 + *(void *)(*(void *)(*(void *)(v1 + 32) - 8) + 64) + 23) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v1 + 32), *(void *)(v1 + 56));
}

uint64_t sub_1000CEBD0()
{
  int v1 = *(unsigned __int8 *)(v0 + 24);
  if (v1 != 255) {
    sub_1000D5B18(*(void *)(v0 + 16), v1 & 1);
  }

  return swift_deallocObject();
}

uint64_t sub_1000CEC18()
{
  swift_release();
  swift_release();
  sub_1000B6C28(*(void *)(v0 + 64));

  return swift_deallocObject();
}

unint64_t sub_1000CEC68(uint64_t a1)
{
  return sub_1000BF2B0(a1, *(NSObject **)(v1 + 32), *(void *)(v1 + 40), *(unsigned __int8 *)(v1 + 48), *(void **)(v1 + 56), *(void *)(v1 + 64), *(void *)(v1 + 16), *(void *)(v1 + 24));
}

void sub_1000CEC80(uint64_t a1, char a2)
{
  sub_1000C0114(a1, a2 & 1, *(NSObject **)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_1000CEC8C(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(unsigned char *)(v5 + 152) = a2;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(unsigned char *)(v5 + 48) = 1;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_OWORD *)(v5 + 72) = 0u;
  *(void *)(v5 + 88) = 0;
  *(_OWORD *)(v5 + 96) = xmmword_10097A220;
  *(void *)(v5 + 120) = a3;
  *(void *)(v5 + 128) = a4;
  *(void *)(v5 + 136) = a5;
  *(void *)(v5 + 144) = a1;
  if ((a5 & 0x8000) != 0
    && (*(void *)(v5 + 96) = 2359552, *(unsigned char *)(v5 + 112) = 0,
                                          sub_1000D31F8(262400, 0, 0),
                                          *(unsigned char *)(v5 + 112)))
  {
    uint64_t result = sub_10096CE20();
    __break(1u);
  }
  else
  {
    uint64_t v7 = *(void *)(v5 + 96);
    uint64_t v6 = *(void *)(v5 + 104);
    *(void *)(v5 + 96) = v7 | 0x40;
    *(unsigned char *)(v5 + 112) = 0;
    swift_retain();
    sub_1000D31F8(v7, v6, 0);
    return v5;
  }
  return result;
}

uint64_t sub_1000CED98(uint64_t a1, void (*a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_10002B7CC(&qword_100ACB910);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10002B7CC((uint64_t *)&unk_100ACEC90);
  __chkstk_darwin(v10);
  uint64_t v12 = (uint64_t *)((char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = *(void *)a4;
  char v14 = *(unsigned char *)(a4 + 8);
  sub_10002B70C(a1, (uint64_t)v12, (uint64_t *)&unk_100ACEC90);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v15 = *v12;
    uint64_t v16 = 1;
  }
  else
  {
    sub_10001AE98((uint64_t)v12, (uint64_t)v9, &qword_100ACB910);
    sub_1000AAA54((uint64_t)v9, v13, v14);
    uint64_t v15 = v17;
    uint64_t v16 = v18 & 1;
    sub_10002B770((uint64_t)v9, &qword_100ACB910);
  }
  a2(v15, v16);
  return sub_1000D5B18(v15, v16);
}

void sub_1000CEF14(void **a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

void sub_1000CEF30(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

uint64_t sub_1000CEF64()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = ((v3 + *(void *)(v2 + 64)) & 0xFFFFFFFFFFFFFFF8) + v0;
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  sub_1000B6C28(*(void *)(v4 + 8));

  return swift_deallocObject();
}

uint64_t sub_1000CF054()
{
  unint64_t v1 = (*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 32) - 8) + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 32) - 8) + 80);
  return sub_1000C0184(*(void *)(v0 + 64), *(uint64_t (**)(uint64_t))(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), v0 + v1, *(unsigned char *)(v0 + v1 + *(void *)(*(void *)(*(void *)(v0 + 32) - 8) + 64)), *(void *)(((v1 + *(void *)(*(void *)(*(void *)(v0 + 32) - 8) + 64)) & 0xFFFFFFFFFFFFFFF8)+ v0+ 8), *(void *)(v0 + 32), *(void *)(v0 + 56));
}

uint64_t sub_1000CF0EC(uint64_t result, unsigned __int8 a2)
{
  if (a2 != 255) {
    return sub_1000D5B18(result, a2 & 1);
  }
  return result;
}

uint64_t sub_1000CF118(uint64_t result, unsigned __int8 a2)
{
  if (a2 != 255) {
    return sub_1000D5B30(result, a2 & 1);
  }
  return result;
}

uint64_t sub_1000CF144(uint64_t a1, unint64_t a2)
{
  if ((a2 >> 62) <= 1) {
    return swift_release();
  }
  return result;
}

uint64_t sub_1000CF168()
{
  swift_release();

  return swift_deallocObject();
}

void sub_1000CF1A8(uint64_t a1)
{
  sub_1000BFD04(a1, *(NSObject **)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1000CF1B0()
{
  swift_release();

  return swift_deallocObject();
}

void sub_1000CF1F0(uint64_t a1)
{
  sub_1000BFB74(a1, *(void *)(v1 + 64), *(NSObject **)(v1 + 72));
}

uint64_t sub_1000CF224()
{
  swift_release();
  sub_1000B6C28(*(void *)(v0 + 32));
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1000CF274(uint64_t a1)
{
  return sub_1000BD358(a1, *(void (**)(uint64_t *))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void **)(v1 + 40), *(void **)(v1 + 48));
}

uint64_t sub_1000CF284()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1000CF2BC(uint64_t a1)
{
  return sub_1000CF378(a1, (uint64_t (*)(uint64_t, void, void, void, void, void, void))sub_1000BB618);
}

uint64_t sub_1000CF2D4()
{
  swift_release();
  swift_release();
  sub_1000B6C28(*(void *)(v0 + 40));
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1000CF32C(uint64_t a1)
{
  return sub_1000BC514(a1, *(void (**)(void *))(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64), *(void *)(v1 + 72));
}

uint64_t sub_1000CF360(uint64_t a1)
{
  return sub_1000CF378(a1, (uint64_t (*)(uint64_t, void, void, void, void, void, void))sub_1000BBA90);
}

uint64_t sub_1000CF378(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void, void))
{
  return a2(a1, v2[6], v2[7], v2[2], v2[3], v2[4], v2[5]);
}

uint64_t sub_1000CF394(uint64_t a1)
{
  return sub_1000C1AC8(a1, *(uint64_t (**)(uint64_t))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(uint64_t **)(v1 + 40));
}

uint64_t type metadata accessor for ItemLookupResult()
{
  return swift_getGenericMetadata();
}

uint64_t sub_1000CF3BC(uint64_t a1)
{
  return sub_1000C247C(a1, *(void (**)(uint64_t *))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(uint64_t **)(v1 + 40));
}

uint64_t sub_1000CF3C8()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, AssociatedTypeWitness);
  sub_1000B6C28(*(void *)(v0 + v4));
  swift_release();
  swift_release();

  return swift_deallocObject();
}

void sub_1000CF4B0()
{
  uint64_t v1 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_1000B0A88((void (*)(void, void, void))(v0 + v2), *(void *)(v0 + v3), *(void **)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v0 + ((((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v0 + ((((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_1000CF578()
{
  return sub_1000DCA14((uint64_t (*)(void, void, void, void, void, void, void))sub_1000AC348);
}

uint64_t sub_1000CF5A4()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  uint64_t v5 = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(sub_10096C890() - 8);
  unint64_t v7 = (v3 + v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v8 + 48))(v0 + v7, 1, v5)) {
    (*(void (**)(unint64_t, uint64_t))(v8 + 8))(v0 + v7, v5);
  }

  return swift_deallocObject();
}

uint64_t sub_1000CF784(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v5 = *(void *)(v1 + 32);
  uint64_t v6 = *(void *)(v1 + 40);
  uint64_t v7 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v7 + 64);
  swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(sub_10096C890() - 8);
  unint64_t v11 = (v8 + v9 + *(unsigned __int8 *)(v10 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  return sub_1000AD94C(a1, *(void (**)(char *))(v1 + 48), *(void *)(v1 + 56), v1 + v8, v1 + v11, *(unsigned __int8 *)(v1 + *(void *)(v10 + 64) + v11), *(unsigned __int8 *)(v1 + *(void *)(v10 + 64) + v11 + 1), v3, v4, v5, v6);
}

uint64_t sub_1000CF8EC(uint64_t a1, unsigned __int8 a2)
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 64);
  uint64_t v5 = swift_checkMetadataState();
  if (v4(v5, AssociatedConformanceWitness)) {
    return 0;
  }
  if (a2 <= 6u) {
    return (0x23u >> a2) & 1;
  }
  return 1;
}

uint64_t sub_1000CF9C4@<X0>(char *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1000AE05C(a1, *(char **)(v2 + 48), *(void *)(v2 + 56), *(unsigned __int8 *)(v2 + 64), *(unsigned __int8 *)(v2 + 65), *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), a2, *(void *)(v2 + 40));
}

uint64_t sub_1000CF9FC()
{
  swift_release();
  swift_release();
  sub_1000B6C28(*(void *)(v0 + 40));
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1000CFA4C(uint64_t a1, char a2)
{
  return sub_1000BCE4C(a1, a2 & 1, *(void (**)(uint64_t *))(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48), *(void *)(v2 + 56), *(void *)(v2 + 64));
}

void sub_1000CFA84(uint64_t a1, char a2)
{
  void (*v10)(void **__return_ptr, void **);
  id v11;
  unsigned __int8 v12;
  void *v13;
  char v14;
  uint64_t v15;
  void *v16;
  unsigned __int8 v17;
  void *v18;

  if (*(unsigned char *)(v2 + 42) != 1 || (a2 & 1) != 0)
  {
    *(unsigned char *)(v2 + 42) = 1;
    uint64_t v5 = (void **)(v2 + 32);
    swift_beginAccess();
    uint64_t v6 = (unsigned __int8 *)(v2 + 40);
    uint64_t v7 = (char *)(v2 + 41);
    if (*(unsigned char *)(v2 + 41) == 1)
    {
      unint64_t v8 = *v5;
      uint64_t v9 = *v6;
      char v18 = v8;
      uint64_t v10 = *(void (**)(void **__return_ptr, void **))(**(void **)(a1 + 16) + 152);
      unint64_t v11 = v8;
      v10(&v16, &v18);
      sub_1000D30C4(v8, v9, 1);
      if (!v3)
      {
        uint64_t v12 = v17;
        if (v17 != 255)
        {
          uint64_t v13 = *v5;
          char v14 = *v7;
          *uint64_t v5 = v16;
          uint64_t v15 = *v6;
          *uint64_t v6 = v12;
          *uint64_t v7 = 0;
          sub_1000D30C4(v13, v15, v14);
        }
      }
    }
  }
  else
  {
    swift_beginAccess();
  }
}

unint64_t sub_1000CFBD8(uint64_t a1, int a2, int a3, unint64_t a4, void *a5, uint64_t a6, uint64_t a7, void (*a8)(uint64_t *), uint64_t a9, unint64_t a10)
{
  uint64_t v103 = a6;
  uint64_t v92 = a5;
  int v91 = a3;
  int v102 = a2;
  uint64_t v15 = a9;
  unint64_t v14 = a10;
  uint64_t v93 = sub_10002B7CC(&qword_100ACD5F8);
  __chkstk_darwin(v93);
  uint64_t v94 = (uint64_t *)((char *)&v87 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = sub_10096B480();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = __chkstk_darwin(v17);
  unint64_t v104 = (char *)&v87 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  os_log_type_t v22 = (char *)&v87 - v21;
  uint64_t v23 = (void *)swift_allocObject();
  uint64_t v95 = a8;
  v23[2] = a8;
  v23[3] = a9;
  v23[4] = a10;
  swift_retain();
  sub_1000CE628(a10);
  id v24 = (id)fpfs_current_or_default_log();
  sub_10096B490();
  sub_1000CE628(a4);
  sub_1000CE628(a4);
  swift_retain();
  uint64_t v25 = sub_10096B470();
  int v97 = sub_10096C5A0();
  BOOL v26 = os_log_type_enabled(v25, (os_log_type_t)v97);
  unint64_t v105 = a4;
  if (v26)
  {
    id v88 = v22;
    os_log_t v89 = v25;
    uint64_t v96 = v18;
    uint64_t v98 = v17;
    uint64_t v90 = a7;
    uint64_t v99 = a9;
    unint64_t v100 = a10;
    uint64_t v101 = v23;
    uint64_t v27 = swift_slowAlloc();
    v108[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v27 = 136315906;
    swift_beginAccess();
    uint64_t v28 = *(void **)(a1 + 32);
    uint64_t v29 = *(unsigned __int8 *)(a1 + 40);
    if (*(unsigned char *)(a1 + 41))
    {
      id v30 = v28;
      uint64_t v31 = NSFileProviderItemIdentifier.description.getter();
      unint64_t v33 = v32;
      sub_1000D30C4(v28, v29, 1);
    }
    else
    {
      uint64_t v31 = VFSItemID.parseableString.getter(*(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
      unint64_t v33 = v36;
    }
    unint64_t v37 = v105;
    os_log_type_t v38 = v97;
    uint64_t v107 = sub_100719D44(v31, v33, v108);
    sub_10096C8C0();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v27 + 12) = 2080;
    if ((_BYTE)v102)
    {
      if (v102 == 1) {
        uint64_t v39 = 0x74616761706F7270;
      }
      else {
        uint64_t v39 = 0xD000000000000010;
      }
      if (v102 == 1) {
        unint64_t v40 = 0xED000053466F5465;
      }
      else {
        unint64_t v40 = 0x80000001009958D0;
      }
    }
    else
    {
      uint64_t v39 = 0xD000000000000013;
      unint64_t v40 = 0x80000001009958A0;
    }
    uint64_t v107 = sub_100719D44(v39, v40, v108);
    sub_10096C8C0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v27 + 22) = 2080;
    unint64_t v41 = sub_1005232CC(v37);
    unint64_t v43 = v42;
    sub_1000B6C28(v37);
    uint64_t v107 = sub_100719D44(v41, v43, v108);
    sub_10096C8C0();
    swift_bridgeObjectRelease();
    sub_1000B6C28(v37);
    *(_WORD *)(v27 + 32) = 2048;
    uint64_t v35 = v103;
    uint64_t v107 = v103;
    sub_10096C8C0();
    os_log_t v44 = v89;
    _os_log_impl((void *)&_mh_execute_header, v89, v38, "Lookup itemID %s with behavior %s request %s iteration %ld", (uint8_t *)v27, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v18 = v96;
    unint64_t v34 = *(void (**)(char *, uint64_t))(v96 + 8);
    uint64_t v17 = v98;
    v34(v88, v98);
    unint64_t v14 = v100;
    uint64_t v23 = v101;
    uint64_t v15 = v99;
    a7 = v90;
  }
  else
  {
    sub_1000B6C28(a4);
    swift_release();
    sub_1000B6C28(a4);

    unint64_t v34 = *(void (**)(char *, uint64_t))(v18 + 8);
    v34(v22, v17);
    uint64_t v35 = v103;
  }
  BOOL v45 = v35 < 51;
  id v46 = v104;
  if (v45)
  {
    swift_beginAccess();
    uint64_t v57 = *(void **)(a1 + 32);
    uint64_t v58 = *(unsigned __int8 *)(a1 + 40);
    if (*(unsigned char *)(a1 + 41))
    {
      uint64_t v59 = qword_100ACC110;
      id v60 = v57;
      uint64_t v61 = a7;
      if (v59 != -1) {
        swift_once();
      }
      uint64_t v62 = _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
      uint64_t v64 = v63;
      uint64_t v65 = _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
      unint64_t v67 = v105;
      if (v62 == v65 && v64 == v66)
      {
        swift_bridgeObjectRelease_n();
        sub_1000D30C4(v57, v58, 1);
LABEL_28:
        sub_1000BC044(v67, (uint64_t)sub_1000D30B8, (uint64_t)v23);
        return swift_release();
      }
      char v68 = sub_10096D2D0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1000D30C4(v57, v58, 1);
      if (v68) {
        goto LABEL_28;
      }
    }
    else
    {
      uint64_t v61 = a7;
      unint64_t v67 = v105;
      if (!v57 && v58 == 2) {
        goto LABEL_28;
      }
    }
    if (((v67 >> 1) & 3 | (v67 >> 58) & 0x3C) == 0x1E)
    {
      unint64_t v69 = *(void *)((v67 & 0xFFFFFFFFFFFFFF9) + 0x10);
      unint64_t v70 = v69;
    }
    else
    {
      uint64_t v78 = swift_allocObject();
      *(void *)(v78 + 16) = v67;
      unint64_t v70 = v78 | 0x7000000000000004;
      unint64_t v69 = v67;
    }
    sub_1000CE628(v69);
    uint64_t v79 = swift_allocObject();
    *(void *)(v79 + 16) = sub_1000D30B8;
    *(void *)(v79 + 24) = v23;
    *(void *)(v79 + 32) = v61;
    *(unsigned char *)(v79 + 40) = v102;
    *(void *)(v79 + 48) = v67;
    *(void *)(v79 + 56) = a1;
    char v80 = v91 & 1;
    *(unsigned char *)(v79 + 64) = v91 & 1;
    uint64_t v81 = v92;
    uint64_t v82 = v103;
    *(void *)(v79 + 72) = v92;
    *(void *)(v79 + 80) = v82;
    uint64_t v83 = swift_allocObject();
    *(void *)(v83 + 16) = a1;
    *(void *)(v83 + 24) = v61;
    *(unsigned char *)(v83 + 32) = v80;
    *(unsigned char *)(v83 + 33) = 0;
    *(void *)(v83 + 40) = sub_1000D310C;
    *(void *)(v83 + 48) = v79;
    *(void *)(v83 + 56) = v70;
    uint64_t v84 = swift_allocObject();
    *(void *)(v84 + 16) = sub_1000D310C;
    *(void *)(v84 + 24) = v79;
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1000CE628(v67);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    id v85 = v81;
    sub_1000CE628(v70);
    sub_1007D8110((uint64_t)"findExistingVFSItemFor(itemID:parentIsImported:bypassIsHidden:request:completionHandler:)", 89, 2, sub_1000D3154, v84, (uint64_t)sub_1000D3128, v83);
    swift_release();
    swift_release();
    swift_release();
    sub_1000B6C28(v70);
    return swift_release();
  }
  id v47 = (id)fpfs_current_or_default_log();
  sub_10096B490();
  unint64_t v48 = v105;
  sub_1000CE628(v105);
  sub_1000CE628(v48);
  swift_retain();
  uint64_t v49 = sub_10096B470();
  LODWORD(v103) = sub_10096C5C0();
  if (os_log_type_enabled(v49, (os_log_type_t)v103))
  {
    uint64_t v96 = v18;
    uint64_t v98 = v17;
    uint64_t v99 = v15;
    unint64_t v100 = v14;
    uint64_t v101 = v23;
    uint64_t v50 = swift_slowAlloc();
    uint64_t v107 = swift_slowAlloc();
    *(_DWORD *)uint64_t v50 = 136446466;
    swift_beginAccess();
    int v51 = *(void **)(a1 + 32);
    uint64_t v52 = *(unsigned __int8 *)(a1 + 40);
    if (*(unsigned char *)(a1 + 41))
    {
      id v53 = v51;
      uint64_t v54 = NSFileProviderItemIdentifier.description.getter();
      unint64_t v56 = v55;
      sub_1000D30C4(v51, v52, 1);
    }
    else
    {
      uint64_t v54 = VFSItemID.parseableString.getter(*(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
      unint64_t v56 = v71;
    }
    uint64_t v106 = sub_100719D44(v54, v56, &v107);
    sub_10096C8C0();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v50 + 12) = 2082;
    unint64_t v72 = sub_1005232CC(v48);
    unint64_t v74 = v73;
    sub_1000B6C28(v48);
    uint64_t v106 = sub_100719D44(v72, v74, &v107);
    sub_10096C8C0();
    swift_bridgeObjectRelease();
    sub_1000B6C28(v48);
    _os_log_impl((void *)&_mh_execute_header, v49, (os_log_type_t)v103, "Recursion too deep for lookup of itemID %{public}s request %{public}s", (uint8_t *)v50, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v34(v104, v98);
    unint64_t v14 = v100;
    uint64_t v15 = v99;
  }
  else
  {
    sub_1000B6C28(v48);
    swift_release();
    sub_1000B6C28(v48);

    v34(v46, v17);
  }
  NSString v75 = sub_10096BC00();
  id v76 = (id)FPInvalidParameterError();

  if (v76)
  {
    uint64_t v77 = (uint64_t)v94;
    *uint64_t v94 = v76;
    swift_storeEnumTagMultiPayload();
    sub_1000C8858(v77, v95, v15, v14);
    sub_10002B770(v77, &qword_100ACD5F8);
    return swift_release();
  }
  swift_release();
  unint64_t result = sub_1000B6C28(v14);
  __break(1u);
  return result;
}

uint64_t sub_1000D069C(uint64_t a1, char a2, unint64_t a3)
{
  uint64_t v6 = type metadata accessor for VFSItem(0);
  __chkstk_darwin(v6 - 8);
  unint64_t v8 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10002B7CC(&qword_100ACD600);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v55 - v14;
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v55 - v16;
  uint64_t v18 = sub_10096B480();
  uint64_t v57 = *(void *)(v18 - 8);
  uint64_t v58 = v18;
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v55 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __chkstk_darwin(v19);
  __chkstk_darwin(v22);
  uint64_t v25 = (char *)&v55 - v24;
  if (*(unsigned char *)(a1 + *(int *)(v9 + 56)) == 1)
  {
    id v26 = (id)fpfs_current_or_default_log();
    sub_10096B490();
    sub_10002B70C(a1, (uint64_t)v17, &qword_100ACD600);
    sub_1000CE628(a3);
    sub_1000CE628(a3);
    uint64_t v27 = sub_10096B470();
    os_log_type_t v28 = sub_10096C5A0();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = swift_slowAlloc();
      uint64_t v56 = swift_slowAlloc();
      uint64_t v60 = v56;
      *(_DWORD *)uint64_t v29 = 136315394;
      sub_1000D37D0((uint64_t)v17, (uint64_t)v8, type metadata accessor for VFSItem);
      sub_10002B770((uint64_t)v17, &qword_100ACD600);
      uint64_t v30 = sub_100262BFC();
      unint64_t v32 = v31;
      sub_1000D3770((uint64_t)v8, type metadata accessor for VFSItem);
      uint64_t v59 = sub_100719D44(v30, v32, &v60);
      sub_10096C8C0();
      swift_bridgeObjectRelease();
      *(_WORD *)(v29 + 12) = 2080;
      unint64_t v33 = sub_1005232CC(a3);
      unint64_t v35 = v34;
      sub_1000B6C28(a3);
      uint64_t v59 = sub_100719D44(v33, v35, &v60);
      sub_10096C8C0();
      swift_bridgeObjectRelease();
      sub_1000B6C28(a3);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Found item on disk, but item is not accessible yet %s, request %s", (uint8_t *)v29, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1000B6C28(a3);
      sub_10002B770((uint64_t)v17, &qword_100ACD600);
      sub_1000B6C28(a3);
    }

    (*(void (**)(char *, uint64_t))(v57 + 8))(v25, v58);
    return 0;
  }
  uint64_t v36 = v23;
  sub_10002B70C(a1, (uint64_t)v15, &qword_100ACD600);
  if (a2)
  {
    unint64_t v37 = *(void **)&v15[*(int *)(v9 + 52)];
    id v38 = v37;
    sub_10002B770((uint64_t)v15, &qword_100ACD600);
    if (!v37)
    {
      id v44 = (id)fpfs_current_or_default_log();
      uint64_t v45 = v36;
      sub_10096B490();
      sub_10002B70C(a1, (uint64_t)v12, &qword_100ACD600);
      sub_1000CE628(a3);
      sub_1000CE628(a3);
      id v46 = sub_10096B470();
      os_log_type_t v47 = sub_10096C5A0();
      if (os_log_type_enabled(v46, v47))
      {
        uint64_t v48 = swift_slowAlloc();
        uint64_t v56 = swift_slowAlloc();
        uint64_t v60 = v56;
        *(_DWORD *)uint64_t v48 = 136315394;
        sub_1000D37D0((uint64_t)v12, (uint64_t)v8, type metadata accessor for VFSItem);
        sub_10002B770((uint64_t)v12, &qword_100ACD600);
        uint64_t v49 = sub_100262BFC();
        unint64_t v51 = v50;
        sub_1000D3770((uint64_t)v8, type metadata accessor for VFSItem);
        uint64_t v59 = sub_100719D44(v49, v51, &v60);
        sub_10096C8C0();
        swift_bridgeObjectRelease();
        *(_WORD *)(v48 + 12) = 2080;
        unint64_t v52 = sub_1005232CC(a3);
        unint64_t v54 = v53;
        sub_1000B6C28(a3);
        uint64_t v59 = sub_100719D44(v52, v54, &v60);
        sub_10096C8C0();
        swift_bridgeObjectRelease();
        sub_1000B6C28(a3);
        _os_log_impl((void *)&_mh_execute_header, v46, v47, "Found item on disk, but item is not reconciled yet %s, request %s", (uint8_t *)v48, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_1000B6C28(a3);
        sub_10002B770((uint64_t)v12, &qword_100ACD600);
        sub_1000B6C28(a3);
      }

      (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v45, v58);
      return 0;
    }
  }
  else
  {
    sub_10002B770((uint64_t)v15, &qword_100ACD600);
  }
  uint64_t result = 1;
  if (*(unsigned char *)(a1 + 8) == 2 && *(void *)a1 == 1)
  {
    id v40 = (id)fpfs_current_or_default_log();
    sub_10096B490();
    unint64_t v41 = sub_10096B470();
    os_log_type_t v42 = sub_10096C5A0();
    if (os_log_type_enabled(v41, v42))
    {
      unint64_t v43 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v43 = 0;
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "Found item on the trash, lookup the root to make sure it's materialized", v43, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v57 + 8))(v21, v58);
    return 0;
  }
  return result;
}

uint64_t sub_1000D0DD0(uint64_t a1, int a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unint64_t v109 = a3;
  LODWORD(v108) = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v105 = AssociatedTypeWitness;
  uint64_t v106 = v12;
  __chkstk_darwin(AssociatedTypeWitness);
  unint64_t v104 = (char *)&v96 - v13;
  uint64_t v14 = swift_getAssociatedTypeWitness();
  uint64_t v15 = sub_10096C890();
  uint64_t v107 = *(char **)(v15 - 8);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v96 - v17;
  uint64_t v101 = *(void *)(a4 - 8);
  __chkstk_darwin(v16);
  unint64_t v100 = (char *)&v96 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v110 = a4;
  uint64_t v111 = a6;
  v115[0] = a4;
  v115[1] = a5;
  uint64_t v102 = a5;
  uint64_t v103 = a7;
  v115[2] = a6;
  v115[3] = a7;
  uint64_t v20 = type metadata accessor for ItemLookupResult();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v96 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __chkstk_darwin(v22);
  uint64_t v27 = (char *)&v96 - v26;
  __chkstk_darwin(v25);
  uint64_t v29 = (char *)&v96 - v28;
  uint64_t v30 = sub_10096B480();
  uint64_t v31 = __chkstk_darwin(v30);
  uint64_t v32 = __chkstk_darwin(v31);
  unint64_t v34 = (char *)&v96 - v33;
  uint64_t v35 = __chkstk_darwin(v32);
  uint64_t v39 = (void (*)(char *, uint64_t))((char *)&v96 - v38);
  int v40 = *(unsigned __int8 *)(v36 + *(int *)(v20 + 56));
  uint64_t v112 = v41;
  uint64_t v113 = v35;
  if (v40 == 1)
  {
    uint64_t v42 = v36;
    id v43 = (id)fpfs_current_or_default_log();
    sub_10096B490();
    (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v29, v42, v20);
    id v44 = v39;
    unint64_t v45 = v109;
    sub_1000CE628(v109);
    sub_1000CE628(v45);
    unint64_t v108 = v44;
    id v46 = sub_10096B470();
    os_log_type_t v47 = sub_10096C5A0();
    int v48 = v47;
    if (os_log_type_enabled(v46, v47))
    {
      uint64_t v49 = swift_slowAlloc();
      v115[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v49 = 136315394;
      uint64_t v106 = v49 + 4;
      uint64_t v50 = v101;
      unint64_t v51 = *(void (**)(char *, char *, uint64_t))(v101 + 16);
      LODWORD(v107) = v48;
      unint64_t v52 = v100;
      uint64_t v53 = v110;
      v51(v100, v29, v110);
      (*(void (**)(char *, uint64_t))(v21 + 8))(v29, v20);
      uint64_t v54 = v111;
      uint64_t v55 = sub_10096D220();
      unint64_t v57 = v56;
      (*(void (**)(char *, uint64_t))(v50 + 8))(v52, v53);
      uint64_t v114 = sub_100719D44(v55, v57, v115);
      sub_10096C8C0();
      swift_bridgeObjectRelease();
      *(_WORD *)(v49 + 12) = 2080;
      unint64_t v58 = sub_1006A9894(v45, v53, v102, v54, v103);
      unint64_t v60 = v59;
      sub_1000B6C28(v45);
      uint64_t v114 = sub_100719D44(v58, v60, v115);
      sub_10096C8C0();
      swift_bridgeObjectRelease();
      sub_1000B6C28(v45);
      _os_log_impl((void *)&_mh_execute_header, v46, (os_log_type_t)v107, "Found item on disk, but item is not accessible yet %s, request %s", (uint8_t *)v49, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1000B6C28(v45);
      (*(void (**)(char *, uint64_t))(v21 + 8))(v29, v20);
      sub_1000B6C28(v45);
    }

    (*(void (**)(void, uint64_t))(v112 + 8))(v108, v113);
    return 0;
  }
  uint64_t v61 = v18;
  uint64_t v62 = v107;
  uint64_t v63 = v14;
  uint64_t v98 = v37;
  int v97 = v24;
  uint64_t v64 = *(void (**)(char *))(v21 + 16);
  uint64_t v99 = v36;
  v64(v27);
  if (v108)
  {
    (*((void (**)(char *, char *, uint64_t))v62 + 2))(v61, &v27[*(int *)(v20 + 52)], v15);
    unint64_t v108 = *(void (**)(char *, uint64_t))(v21 + 8);
    v108(v27, v20);
    int v65 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v63 - 8) + 48))(v61, 1, v63);
    (*((void (**)(char *, uint64_t))v62 + 1))(v61, v15);
    if (v65 == 1)
    {
      id v66 = (id)fpfs_current_or_default_log();
      sub_10096B490();
      unint64_t v67 = v97;
      ((void (*)(char *, uint64_t, uint64_t))v64)(v97, v99, v20);
      unint64_t v68 = v109;
      sub_1000CE628(v109);
      sub_1000CE628(v68);
      unint64_t v69 = sub_10096B470();
      os_log_type_t v70 = sub_10096C5A0();
      int v71 = v70;
      BOOL v72 = os_log_type_enabled(v69, v70);
      unint64_t v73 = v108;
      if (v72)
      {
        uint64_t v74 = swift_slowAlloc();
        uint64_t v107 = v34;
        LODWORD(v105) = v71;
        uint64_t v75 = v74;
        uint64_t v106 = swift_slowAlloc();
        v115[0] = v106;
        *(_DWORD *)uint64_t v75 = 136315394;
        unint64_t v104 = (char *)(v75 + 4);
        id v76 = v100;
        uint64_t v77 = v101;
        uint64_t v78 = v110;
        (*(void (**)(char *, char *, uint64_t))(v101 + 16))(v100, v67, v110);
        v73(v67, v20);
        uint64_t v79 = v111;
        uint64_t v80 = sub_10096D220();
        unint64_t v82 = v81;
        (*(void (**)(char *, uint64_t))(v77 + 8))(v76, v78);
        uint64_t v114 = sub_100719D44(v80, v82, v115);
        sub_10096C8C0();
        swift_bridgeObjectRelease();
        *(_WORD *)(v75 + 12) = 2080;
        unint64_t v83 = sub_1006A9894(v68, v78, v102, v79, v103);
        unint64_t v85 = v84;
        sub_1000B6C28(v68);
        uint64_t v114 = sub_100719D44(v83, v85, v115);
        sub_10096C8C0();
        swift_bridgeObjectRelease();
        sub_1000B6C28(v68);
        _os_log_impl((void *)&_mh_execute_header, v69, (os_log_type_t)v105, "Found item on disk, but item is not reconciled yet %s, request %s", (uint8_t *)v75, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v112 + 8))(v107, v113);
      }
      else
      {
        sub_1000B6C28(v68);
        v73(v67, v20);
        sub_1000B6C28(v68);

        (*(void (**)(char *, uint64_t))(v112 + 8))(v34, v113);
      }
      return 0;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v21 + 8))(v27, v20);
  }
  uint64_t v86 = v104;
  (*(void (**)(uint64_t, uint64_t))(v111 + 64))(v110, v111);
  uint64_t v87 = v105;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  char v89 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 72))(v87, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v106 + 8))(v86, v87);
  if ((v89 & 1) == 0) {
    return 1;
  }
  id v90 = (id)fpfs_current_or_default_log();
  uint64_t v91 = v98;
  sub_10096B490();
  uint64_t v92 = sub_10096B470();
  os_log_type_t v93 = sub_10096C5A0();
  if (os_log_type_enabled(v92, v93))
  {
    uint64_t v94 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v94 = 0;
    _os_log_impl((void *)&_mh_execute_header, v92, v93, "Found item on the trash, lookup the root to make sure it's materialized", v94, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(uint64_t, uint64_t))(v112 + 8))(v91, v113);
  return 0;
}

uint64_t sub_1000D1858(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(v1 + 48))(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_1000D1890()
{
  return sub_1000A9B58(*(uint64_t **)(v0 + 16), *(void *)(v0 + 24), *(void (**)(void))(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_1000D18B0()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, AssociatedTypeWitness);

  return swift_deallocObject();
}

uint64_t sub_1000D1994(uint64_t a1)
{
  swift_getAssociatedTypeWitness();
  unint64_t v3 = *(void (**)(uint64_t, void))(v1 + 48);

  return sub_1000AB384(a1, v3);
}

uint64_t sub_1000D1A48()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, AssociatedTypeWitness);

  return swift_deallocObject();
}

uint64_t sub_1000D1B2C(uint64_t a1)
{
  swift_getAssociatedTypeWitness();
  unint64_t v3 = *(void (**)(uint64_t, void))(v1 + 48);

  return sub_1000AA8CC(a1, v3);
}

uint64_t sub_1000D1BE0(uint64_t a1)
{
  return sub_1000D1C10(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))sub_1000AACD0);
}

uint64_t sub_1000D1BF8(uint64_t a1)
{
  return sub_1000D1C10(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))sub_1000AB50C);
}

uint64_t sub_1000D1C10(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void))
{
  return a2(a1, v2[6], v2[2], v2[3], v2[4], v2[5]);
}

uint64_t sub_1000D1C2C(uint64_t a1)
{
  return sub_1000BE1F4(a1, *(void (**)(void *))(v1 + 48), *(void *)(v1 + 56), v1+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 16) - 8) + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 16) - 8) + 80)), *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_1000D1C74()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  sub_1000B6C28(*(void *)(v0 + v4));
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1000D1D80()
{
  unint64_t v1 = (*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80);
  unint64_t v2 = (*(void *)(*(void *)(*(void *)(v0 + 16) - 8) + 64) + v1 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1000BE718(*(uint64_t **)(v0 + 48), v0 + v1, *(void *)(v0 + v2), *(void *)(v0 + ((v2 + 15) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v0 + ((((v2 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v0 + ((((v2 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_1000D1E20()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t sub_1000D1EE4(uint64_t a1)
{
  return sub_1000BEC44(a1, *(void (**)(void *))(v1 + 48), *(void *)(v1 + 56), v1+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 16) - 8) + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 16) - 8) + 80)), *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_1000D1F30(uint64_t a1)
{
  return sub_1000D586C(a1, (uint64_t (*)(uint64_t, void, void, void, void, void, void, void, char))sub_1000B2F34);
}

uint64_t sub_1000D1F4C(uint64_t a1)
{
  return sub_1000D59B0(a1, (uint64_t (*)(uint64_t, void, void, void, void, void, void, void))sub_1000B4C44);
}

uint64_t sub_1000D1F68(uint64_t a1)
{
  return sub_1000D59B0(a1, (uint64_t (*)(uint64_t, void, void, void, void, void, void, void))sub_1000B4128);
}

uint64_t sub_1000D1F84(uint64_t a1)
{
  return sub_1000D21CC(a1, "finished post-propagation VFS lookup for %s reason %s: %s");
}

uint64_t sub_1000D1F90()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1000D1FC8()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, AssociatedTypeWitness);
  sub_1000B6C28(*(void *)(v0 + v4));
  swift_release();
  swift_release();

  return swift_deallocObject();
}

void sub_1000D20B0()
{
  uint64_t v1 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_1000AF114((void (*)(void, void, void))(v0 + v2), *(void *)(v0 + v3), *(void **)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v0 + ((((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v0 + ((((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_1000D2178()
{
  swift_release();
  sub_1000B6C28(*(void *)(v0 + 56));
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1000D21C0(uint64_t a1)
{
  return sub_1000D21CC(a1, "finished post-propagation VFS lookup for %s request %s: %s");
}

uint64_t sub_1000D21CC(uint64_t a1, const char *a2)
{
  return sub_1000B5624(a1, *(void *)(v2 + 48), *(void *)(v2 + 56), *(uint64_t (**)(void))(v2 + 64), *(void *)(v2 + 72), *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), a2);
}

uint64_t sub_1000D2204()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  sub_1000B6C28(*(void *)(v0 + v4));

  return swift_deallocObject();
}

uint64_t sub_1000D22F8()
{
  unint64_t v1 = (*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 32) - 8) + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 32) - 8) + 80);
  unint64_t v2 = (*(void *)(*(void *)(*(void *)(v0 + 32) - 8) + 64) + v1 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1000C0BF0(*(uint64_t **)(v0 + 64), v0 + v1, *(void (**)(uint64_t, void))(v0 + v2), *(void *)(v0 + v2 + 8), *(void *)(v0 + ((v2 + 23) & 0xFFFFFFFFFFFFFFF8)), *(void (**)(void, void))(v0 + 32), *(void *)(v0 + 56));
}

uint64_t sub_1000D2388()
{
  swift_release();
  swift_release();
  sub_1000B6C28(*(void *)(v0 + 56));

  return swift_deallocObject();
}

uint64_t sub_1000D23D0(uint64_t a1)
{
  return sub_1000C13B0(a1, *(void (**)(uint64_t, uint64_t))(v1 + 32), *(void *)(v1 + 40), *(uint64_t **)(v1 + 48), *(void *)(v1 + 56));
}

uint64_t sub_1000D23E0()
{
  uint64_t v1 = *(void *)(sub_10002B7CC((uint64_t *)&unk_100AD0DE0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = type metadata accessor for TelemetrySignpost(0);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 48))(v0 + v2, 1, v3))
  {
    unint64_t v4 = v0 + v2 + *(int *)(type metadata accessor for TelemetrySignposter(0) + 24);
    uint64_t v5 = sub_10096B400();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
    swift_release();
  }
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1000D2544(uint64_t a1)
{
  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[4];
  uint64_t v6 = *(void *)(sub_10002B7CC((uint64_t *)&unk_100AD0DE0) - 8);
  unint64_t v7 = (*(unsigned __int8 *)(v6 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (uint64_t)v1 + v7;
  uint64_t v9 = (char *)v1 + ((*(void *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = *(uint64_t (**)(uint64_t))v9;
  uint64_t v11 = *((void *)v9 + 1);

  return sub_1000B765C(a1, v8, v10, v11, v3, v4, v5);
}

uint64_t sub_1000D2610()
{
  uint64_t v1 = *(void *)(sub_10002B7CC((uint64_t *)&unk_100AD0DE0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 64);
  sub_1000B6C28(*(void *)(v0 + 48));
  uint64_t v4 = type metadata accessor for TelemetrySignpost(0);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(v0 + v2, 1, v4))
  {
    unint64_t v5 = v0 + v2 + *(int *)(type metadata accessor for TelemetrySignposter(0) + 24);
    uint64_t v6 = sub_10096B400();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();

  swift_release();

  return swift_deallocObject();
}

char *sub_1000D27C0(unint64_t a1)
{
  uint64_t v3 = *(void *)(sub_10002B7CC((uint64_t *)&unk_100AD0DE0) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = v4 + *(void *)(v3 + 64);
  unint64_t v6 = (v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = (v5 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v7 + 31) & 0xFFFFFFFFFFFFFFF8;
  return sub_1000B7A08(a1, *(void *)(v1 + 48), v1 + v4, *(void (**)(void *))(v1 + v6), *(void *)(v1 + v6 + 8), *(unsigned __int8 *)(v1 + v6 + 16), *(uint64_t ***)(v1 + v7), *(void **)(v1 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8)), *(unsigned char *)(v1 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 8), *(char **)(v1 + v8), *(void *)(v1 + ((v8 + 15) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v1 + ((v8 + 15) & 0xFFFFFFFFFFFFFFF8) + 8), *(unsigned char *)(v1 + ((v8 + 15) & 0xFFFFFFFFFFFFFFF8) + 16));
}

uint64_t sub_1000D28B8()
{
  swift_release();
  sub_1000B6C28(*(void *)(v0 + 64));

  return swift_deallocObject();
}

uint64_t sub_1000D28F8(uint64_t a1)
{
  return sub_1000C8A24(a1, *(void (**)(char *))(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64), *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_1000D2910(uint64_t a1)
{
  return sub_1000DC97C(a1, (uint64_t (*)(uint64_t, void, void, void, void, void, void, void, void, void))sub_1000C42C4);
}

uint64_t _s14LookupBehaviorOMa()
{
  return swift_getGenericMetadata();
}

uint64_t sub_1000D2944(uint64_t a1, char a2)
{
  return sub_1000D38AC(a1, a2, (uint64_t (*)(uint64_t, void, void, void, void, void, void, void, void, void, void))sub_1000C4E14);
}

uint64_t sub_1000D2960(uint64_t a1)
{
  return sub_1000D5374(a1, (uint64_t (*)(uint64_t, void, void, void, void, void, void, void, void, void))sub_1000C67C8);
}

uint64_t sub_1000D2978@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for ItemLookupResult();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t sub_1000D29EC()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  swift_release();
  sub_1000B6C28(*(void *)(v0 + 72));
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();

  return swift_deallocObject();
}

unint64_t sub_1000D2ADC(uint64_t a1)
{
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 16) - 8) + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 16) - 8) + 80);
  unint64_t v3 = (*(void *)(*(void *)(*(void *)(v1 + 16) - 8) + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1000C831C(a1, *(void (**)(void *))(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64), *(void *)(v1 + 72), v1 + v2, *(void *)(v1 + v3), *(unsigned __int8 *)(v1 + v3 + 8));
}

uint64_t sub_1000D2B78@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1000C9320(a1, *(void *)(v2 + 48), *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), a2);
}

unint64_t sub_1000D2B88()
{
  unint64_t result = qword_100ADA390;
  if (!qword_100ADA390)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100ADA390);
  }
  return result;
}

uint64_t sub_1000D2BC8()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(unint64_t))(v1 + 8))(v0 + v2);
  swift_release();
  swift_release();
  sub_1000B6C28(*(void *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8)));
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1000D2CB8(char *a1)
{
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 16) - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 16) - 8) + 80);
  unint64_t v3 = (*(void *)(*(void *)(*(void *)(v1 + 16) - 8) + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v4 = (v3 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = (v4 + 31) & 0xFFFFFFFFFFFFFFF8;
  return sub_1000B8770(a1, v1 + v2, *(void (**)(char *))(v1 + v3), *(void *)(v1 + v3 + 8), *(void **)(v1 + v4), *(NSObject **)(v1 + ((v4 + 15) & 0xFFFFFFFFFFFFFFF8)), *(unsigned __int8 *)(v1 + ((v4 + 15) & 0xFFFFFFFFFFFFFFF8) + 8), *(void **)(v1 + v5), *(unsigned char *)(v1 + v5 + 8), *(unsigned char *)(v1 + v5 + 9), *(void **)(v1 + ((v5 + 17) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_1000D2D90()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(unint64_t))(v1 + 8))(v0 + v2);
  swift_release();
  sub_1000B6C28(*(void *)(v0 + v3));
  swift_release();
  swift_release();

  return swift_deallocObject();
}

void sub_1000D2E80(uint64_t a1)
{
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 16) - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 16) - 8) + 80);
  unint64_t v3 = (*(void *)(*(void *)(*(void *)(v1 + 16) - 8) + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v4 = (v3 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = (v4 + 31) & 0xFFFFFFFFFFFFFFF8;
  sub_1000B942C(a1, v1 + v2, *(void (**)(char *))(v1 + v3), *(void *)(v1 + v3 + 8), *(void *)(v1 + v4), *(uint64_t **)(v1 + ((v4 + 15) & 0xFFFFFFFFFFFFFFF8)), *(unsigned __int8 *)(v1 + ((v4 + 15) & 0xFFFFFFFFFFFFFFF8) + 8), *(uint8_t ***)(v1 + v5), *(unsigned char *)(v1 + v5 + 8), *(unsigned char *)(v1 + v5 + 9), *(void **)(v1 + ((v5 + 17) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_1000D2F58()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 112) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  swift_release();
  swift_release();
  sub_1000B6C28(*(void *)(v0 + 96));

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t sub_1000D303C(uint64_t a1)
{
  return sub_1000BA754(a1, *(void (**)(uint64_t *))(v1 + 48), *(void *)(v1 + 56), *(unsigned __int8 *)(v1 + 64), *(uint64_t **)(v1 + 72), *(uint64_t **)(v1 + 80), *(unsigned __int8 *)(v1 + 88), *(unsigned __int8 *)(v1 + 89), *(void *)(v1 + 96), *(void *)(v1 + 104), v1+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 16) - 8) + 80) + 112) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 16) - 8) + 80)));
}

uint64_t sub_1000D30B8(uint64_t a1)
{
  return sub_1000C8858(a1, *(void (**)(uint64_t *))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

void sub_1000D30C4(id a1, uint64_t a2, char a3)
{
  if (a3) {
}
  }

uint64_t sub_1000D30D0()
{
  sub_1000B6C28(*(void *)(v0 + 16));

  return swift_deallocObject();
}

uint64_t sub_1000D310C(uint64_t a1)
{
  return sub_1000DC97C(a1, (uint64_t (*)(uint64_t, void, void, void, void, void, void, void, void, void))sub_1000C35A4);
}

uint64_t sub_1000D3128()
{
  return sub_1000DCA14((uint64_t (*)(void, void, void, void, void, void, void))sub_1000ABB28);
}

uint64_t sub_1000D3154(uint64_t a1)
{
  return sub_1000CE494(a1, *(void (**)(void *))(v1 + 16));
}

uint64_t sub_1000D3160(uint64_t a1)
{
  return sub_1000C1644(a1, *(uint64_t (**)(uint64_t))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_1000D3174(uint64_t a1)
{
  return sub_1000C201C(a1, *(void (**)(void *))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_1000D3184(uint64_t a1, uint64_t a2)
{
  return a2;
}

void sub_1000D31E0()
{
}

uint64_t sub_1000D31F8(uint64_t a1, uint64_t a2, char a3)
{
  switch(a3)
  {
    case 0:
    case 1:
    case 2:
      uint64_t result = swift_release();
      break;
    case 3:
      uint64_t result = swift_errorRelease();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000D324C(void *a1)
{
  return sub_1006D0B34(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_1000D3258()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1000D3298(uint64_t a1)
{
  return sub_1000AD760(a1, *(void (**)(uint64_t *))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(unsigned __int8 *)(v1 + 40), *(void **)(v1 + 48), *(unsigned char *)(v1 + 56), *(unsigned __int8 *)(v1 + 57));
}

uint64_t sub_1000D32B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t result = a9;
  if (a9)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1000D3324(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 448);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

uint64_t sub_1000D333C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  unint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  unint64_t v6 = *(void *)(a1 + 64);
  uint64_t v11 = *(void *)(a1 + 112);
  uint64_t v12 = *(void *)(a1 + 104);
  uint64_t v14 = *(void *)(a1 + 136);
  uint64_t v15 = *(void *)(a1 + 128);
  unint64_t v13 = *(void *)(a1 + 144);
  uint64_t v16 = *(void **)(a1 + 184);
  char v7 = *(unsigned char *)(a1 + 120);
  id v8 = *(id *)a1;
  sub_10009C66C(v2, v3, v4, v5, v6);
  sub_10009C5FC(v12, v11, v7);
  sub_10009C650(v15, v14, v13);
  id v9 = v16;
  return a1;
}

uint64_t sub_1000D3440(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 144);
  uint64_t v2 = *(void *)(a1 + 152);
  uint64_t v4 = *(void *)(a1 + 176);
  uint64_t v8 = *(void *)(a1 + 168);
  unint64_t v5 = *(void *)(a1 + 184);
  uint64_t v10 = *(void **)(a1 + 224);
  uint64_t v11 = *(void **)(a1 + 240);
  unint64_t v15 = *(void *)(a1 + 280);
  uint64_t v16 = *(void *)(a1 + 272);
  uint64_t v13 = *(void *)(a1 + 296);
  uint64_t v14 = *(void *)(a1 + 288);
  unint64_t v12 = *(void *)(a1 + 304);
  uint64_t v17 = *(void *)(a1 + 352);
  uint64_t v18 = *(void *)(a1 + 344);
  uint64_t v20 = *(void *)(a1 + 376);
  uint64_t v21 = *(void *)(a1 + 368);
  unint64_t v19 = *(void *)(a1 + 384);
  uint64_t v22 = *(void **)(a1 + 424);
  char v6 = *(unsigned char *)(a1 + 160);
  char v9 = *(unsigned char *)(a1 + 360);
  sub_1000D32B4(*(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104));
  sub_1000D31F8(v3, v2, v6);
  sub_1000D35D8(v8, v4, v5);

  sub_1000D35F4(v16, v15, v14, v13, v12);
  sub_1000D31F8(v18, v17, v9);
  sub_1000D35D8(v21, v20, v19);
  swift_bridgeObjectRelease();

  return a1;
}

uint64_t sub_1000D35D8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 >> 60 != 11) {
    return sub_10001E9AC(a2, a3);
  }
  return result;
}

uint64_t sub_1000D35F4(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (a3 != 1)
  {
    sub_10001E9C0(result, a2);
    swift_bridgeObjectRelease();
    sub_10001E9C0(a4, a5);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1000D3674(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  unint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  unint64_t v6 = *(void *)(a1 + 64);
  uint64_t v9 = *(void *)(a1 + 112);
  uint64_t v10 = *(void *)(a1 + 104);
  uint64_t v12 = *(void *)(a1 + 136);
  uint64_t v13 = *(void *)(a1 + 128);
  unint64_t v11 = *(void *)(a1 + 144);
  uint64_t v14 = *(void **)(a1 + 184);
  char v7 = *(unsigned char *)(a1 + 120);

  sub_1000D35F4(v2, v3, v4, v5, v6);
  sub_1000D31F8(v10, v9, v7);
  sub_1000D35D8(v13, v12, v11);

  return a1;
}

uint64_t sub_1000D3768(uint64_t result)
{
  *(unsigned char *)(result + 120) = 0;
  return result;
}

uint64_t sub_1000D3770(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1000D37D0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000D383C()
{
  swift_release();
  swift_release();
  sub_1000B6C28(*(void *)(v0 + 48));

  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1000D3894(uint64_t a1, char a2)
{
  return sub_1000D38AC(a1, a2, (uint64_t (*)(uint64_t, void, void, void, void, void, void, void, void, void, void))sub_1000C4C30);
}

uint64_t sub_1000D38AC(uint64_t a1, char a2, uint64_t (*a3)(uint64_t, void, void, void, void, void, void, void, void, void, void))
{
  return a3(a1, a2 & 1, *(void *)(v3 + 16), *(void *)(v3 + 24), *(void *)(v3 + 32), *(unsigned __int8 *)(v3 + 40), *(unsigned __int8 *)(v3 + 41), *(void *)(v3 + 48), *(void *)(v3 + 56), *(void *)(v3 + 64), *(void *)(v3 + 72));
}

uint64_t sub_1000D38FC(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(v1 + 16))(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_1000D3934()
{
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

void sub_1000D397C()
{
  sub_1000A96EC(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void (**)(void))(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_1000D399C(uint64_t a1)
{
  uint64_t v2 = *(void (**)(uint64_t *))(v1 + 16);
  uint64_t v4 = a1;
  char v5 = 1;
  swift_errorRetain();
  v2(&v4);

  return swift_errorRelease();
}

uint64_t sub_1000D3A00(uint64_t a1, unint64_t a2, void (*a3)(char *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v20 = a2;
  uint64_t v21 = a6;
  uint64_t v10 = sub_10002B7CC(&qword_100ACD608);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10002B7CC(&qword_100ACD5F8);
  __chkstk_darwin(v13);
  unint64_t v15 = (uint64_t *)((char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = sub_10002B7CC((uint64_t *)&unk_100ACEC50);
  __chkstk_darwin(v16);
  uint64_t v18 = (uint64_t *)((char *)&v20 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10002B70C(a1, (uint64_t)v15, &qword_100ACD5F8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t *v18 = *v15;
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    sub_10001AE98((uint64_t)v15, (uint64_t)v12, &qword_100ACD608);
    sub_1000C8BB0((uint64_t)v12, v20, v18);
    sub_10002B770((uint64_t)v12, &qword_100ACD608);
  }
  sub_1007E67F8((uint64_t)v18, a3, a4, a5, v21);
  return sub_10002B770((uint64_t)v18, (uint64_t *)&unk_100ACEC50);
}

unint64_t sub_1000D3BE0(uint64_t a1, int a2, int a3, unint64_t a4, void *a5, uint64_t a6, uint64_t a7, unint64_t a8, void (*a9)(char *), uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v102 = a7;
  uint64_t v111 = a6;
  int v97 = a5;
  int v96 = a3;
  int v109 = a2;
  uint64_t v98 = sub_10002B7CC(&qword_100ACD5F8);
  __chkstk_darwin(v98);
  unint64_t v100 = (uint64_t *)((char *)&v93 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = sub_10096B480();
  uint64_t v113 = *(void *)(v16 - 8);
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v112 = (char *)&v93 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  unint64_t v20 = (char *)&v93 - v19;
  uint64_t v21 = (void *)swift_allocObject();
  uint64_t v99 = a9;
  void v21[2] = a9;
  v21[3] = a10;
  v21[4] = a11;
  v21[5] = a12;
  uint64_t v22 = (void *)swift_allocObject();
  v22[2] = sub_1000D5B84;
  v22[3] = v21;
  v22[4] = a8;
  uint64_t v103 = a10;
  swift_retain();
  uint64_t v104 = a11;
  swift_retain();
  uint64_t v105 = a12;
  uint64_t v23 = a1;
  swift_retain();
  swift_retain();
  unint64_t v106 = a8;
  unint64_t v24 = a8;
  unint64_t v25 = a4;
  sub_1000CE628(v24);
  id v26 = (id)fpfs_current_or_default_log();
  sub_10096B490();
  sub_1000CE628(a4);
  sub_1000CE628(a4);
  swift_retain();
  uint64_t v27 = sub_10096B470();
  os_log_type_t v28 = sub_10096C5A0();
  BOOL v29 = os_log_type_enabled(v27, v28);
  unint64_t v110 = v25;
  if (v29)
  {
    uint64_t v94 = v20;
    uint64_t v101 = v16;
    uint64_t v107 = v22;
    unint64_t v108 = v21;
    uint64_t v30 = swift_slowAlloc();
    v116[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v30 = 136315906;
    swift_beginAccess();
    uint64_t v31 = *(void **)(v23 + 32);
    uint64_t v32 = *(unsigned __int8 *)(v23 + 40);
    if (*(unsigned char *)(v23 + 41))
    {
      id v33 = v31;
      uint64_t v34 = NSFileProviderItemIdentifier.description.getter();
      unint64_t v36 = v35;
      sub_1000D30C4(v31, v32, 1);
    }
    else
    {
      uint64_t v34 = VFSItemID.parseableString.getter(*(void *)(v23 + 32), *(unsigned char *)(v23 + 40));
      unint64_t v36 = v39;
    }
    uint64_t v115 = sub_100719D44(v34, v36, v116);
    sub_10096C8C0();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v30 + 12) = 2080;
    uint64_t v95 = v23;
    os_log_type_t v40 = v28;
    if ((_BYTE)v109)
    {
      if (v109 == 1) {
        uint64_t v41 = 0x74616761706F7270;
      }
      else {
        uint64_t v41 = 0xD000000000000010;
      }
      if (v109 == 1) {
        unint64_t v42 = 0xED000053466F5465;
      }
      else {
        unint64_t v42 = 0x80000001009958D0;
      }
    }
    else
    {
      uint64_t v41 = 0xD000000000000013;
      unint64_t v42 = 0x80000001009958A0;
    }
    uint64_t v115 = sub_100719D44(v41, v42, v116);
    sub_10096C8C0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v30 + 22) = 2080;
    unint64_t v25 = v110;
    unint64_t v43 = sub_1005232CC(v110);
    unint64_t v45 = v44;
    sub_1000B6C28(v25);
    uint64_t v115 = sub_100719D44(v43, v45, v116);
    sub_10096C8C0();
    swift_bridgeObjectRelease();
    sub_1000B6C28(v25);
    *(_WORD *)(v30 + 32) = 2048;
    uint64_t v38 = v111;
    uint64_t v115 = v111;
    sub_10096C8C0();
    _os_log_impl((void *)&_mh_execute_header, v27, v40, "Lookup itemID %s with behavior %s request %s iteration %ld", (uint8_t *)v30, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v37 = *(void (**)(char *, uint64_t))(v113 + 8);
    uint64_t v16 = v101;
    v37(v94, v101);
    uint64_t v22 = v107;
    uint64_t v21 = v108;
    uint64_t v23 = v95;
  }
  else
  {
    sub_1000B6C28(v25);
    swift_release();
    sub_1000B6C28(v25);

    uint64_t v37 = *(void (**)(char *, uint64_t))(v113 + 8);
    v37(v20, v16);
    uint64_t v38 = v111;
  }
  id v46 = v112;
  if (v38 < 51)
  {
    unint64_t v58 = v25;
    swift_beginAccess();
    uint64_t v59 = v23;
    unint64_t v60 = *(void **)(v23 + 32);
    uint64_t v61 = *(unsigned __int8 *)(v59 + 40);
    uint64_t v62 = v59;
    if (*(unsigned char *)(v59 + 41))
    {
      uint64_t v63 = qword_100ACC110;
      id v64 = v60;
      if (v63 != -1) {
        swift_once();
      }
      uint64_t v65 = _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
      uint64_t v67 = v66;
      if (v65 == _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0() && v67 == v68)
      {
        swift_bridgeObjectRelease_n();
        sub_1000D30C4(v60, v61, 1);
LABEL_28:
        sub_1000BC044(v58, (uint64_t)sub_1000DEA4C, (uint64_t)v22);
LABEL_38:
        swift_release();
        return swift_release();
      }
      char v69 = sub_10096D2D0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1000D30C4(v60, v61, 1);
      if (v69) {
        goto LABEL_28;
      }
    }
    else if (!v60 && v61 == 2)
    {
      goto LABEL_28;
    }
    if (((v58 >> 1) & 3 | (v58 >> 58) & 0x3C) == 0x1E)
    {
      unint64_t v70 = *(void *)((v58 & 0xFFFFFFFFFFFFFF9) + 0x10);
      unint64_t v71 = v70;
    }
    else
    {
      uint64_t v83 = swift_allocObject();
      *(void *)(v83 + 16) = v58;
      unint64_t v71 = v83 | 0x7000000000000004;
      unint64_t v70 = v58;
    }
    sub_1000CE628(v70);
    uint64_t v84 = swift_allocObject();
    *(void *)(v84 + 16) = sub_1000DEA4C;
    *(void *)(v84 + 24) = v22;
    uint64_t v85 = v102;
    *(void *)(v84 + 32) = v102;
    *(unsigned char *)(v84 + 40) = v109;
    *(void *)(v84 + 48) = v58;
    *(void *)(v84 + 56) = v62;
    char v86 = v96 & 1;
    *(unsigned char *)(v84 + 64) = v96 & 1;
    uint64_t v87 = v97;
    uint64_t v88 = v111;
    *(void *)(v84 + 72) = v97;
    *(void *)(v84 + 80) = v88;
    uint64_t v89 = swift_allocObject();
    *(void *)(v89 + 16) = v62;
    *(void *)(v89 + 24) = v85;
    *(unsigned char *)(v89 + 32) = v86;
    *(unsigned char *)(v89 + 33) = 0;
    *(void *)(v89 + 40) = sub_1000D310C;
    *(void *)(v89 + 48) = v84;
    *(void *)(v89 + 56) = v71;
    uint64_t v90 = swift_allocObject();
    *(void *)(v90 + 16) = sub_1000D310C;
    *(void *)(v90 + 24) = v84;
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1000CE628(v110);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    id v91 = v87;
    sub_1000CE628(v71);
    sub_1007D8110((uint64_t)"findExistingVFSItemFor(itemID:parentIsImported:bypassIsHidden:request:completionHandler:)", 89, 2, sub_1000DEB24, v90, (uint64_t)sub_1000D3128, v89);
    swift_release();
    swift_release();
    swift_release();
    sub_1000B6C28(v71);
    goto LABEL_38;
  }
  id v47 = (id)fpfs_current_or_default_log();
  sub_10096B490();
  sub_1000CE628(v25);
  sub_1000CE628(v25);
  swift_retain();
  int v48 = sub_10096B470();
  os_log_type_t v49 = sub_10096C5C0();
  if (os_log_type_enabled(v48, v49))
  {
    uint64_t v101 = v16;
    uint64_t v107 = v22;
    unint64_t v108 = v21;
    uint64_t v50 = v23;
    uint64_t v51 = swift_slowAlloc();
    uint64_t v111 = swift_slowAlloc();
    uint64_t v115 = v111;
    *(_DWORD *)uint64_t v51 = 136446466;
    swift_beginAccess();
    unint64_t v52 = *(void **)(v50 + 32);
    uint64_t v53 = *(unsigned __int8 *)(v50 + 40);
    if (*(unsigned char *)(v50 + 41))
    {
      id v54 = v52;
      uint64_t v55 = NSFileProviderItemIdentifier.description.getter();
      unint64_t v57 = v56;
      sub_1000D30C4(v52, v53, 1);
    }
    else
    {
      uint64_t v55 = VFSItemID.parseableString.getter(*(void *)(v50 + 32), *(unsigned char *)(v50 + 40));
      unint64_t v57 = v72;
    }
    uint64_t v114 = sub_100719D44(v55, v57, &v115);
    sub_10096C8C0();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v51 + 12) = 2082;
    unint64_t v73 = v110;
    unint64_t v74 = sub_1005232CC(v110);
    unint64_t v76 = v75;
    sub_1000B6C28(v73);
    uint64_t v114 = sub_100719D44(v74, v76, &v115);
    sub_10096C8C0();
    swift_bridgeObjectRelease();
    sub_1000B6C28(v73);
    _os_log_impl((void *)&_mh_execute_header, v48, v49, "Recursion too deep for lookup of itemID %{public}s request %{public}s", (uint8_t *)v51, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v37(v112, v101);
  }
  else
  {
    sub_1000B6C28(v25);
    swift_release();
    sub_1000B6C28(v25);

    v37(v46, v16);
  }
  NSString v77 = sub_10096BC00();
  id v78 = (id)FPInvalidParameterError();

  if (v78)
  {
    uint64_t v79 = (uint64_t)v100;
    void *v100 = v78;
    swift_storeEnumTagMultiPayload();
    uint64_t v80 = v103;
    swift_retain();
    uint64_t v81 = v104;
    swift_retain();
    uint64_t v82 = v105;
    swift_retain();
    sub_1000D3A00(v79, v106, v99, v80, v81, v82);
    swift_release();
    swift_release();
    swift_release();
    sub_10002B770(v79, &qword_100ACD5F8);
    goto LABEL_38;
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  unint64_t result = sub_1000B6C28(v106);
  __break(1u);
  return result;
}

uint64_t sub_1000D4778(uint64_t a1, int a2, int a3, unint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(uint64_t), uint64_t a9, unsigned __int8 a10, uint64_t a11, unint64_t a12, uint64_t a13, unsigned __int8 a14, uint64_t a15, void *a16)
{
  uint64_t v103 = a7;
  uint64_t v112 = a6;
  int v96 = a5;
  unint64_t v116 = a4;
  int v95 = a3;
  int v109 = a2;
  uint64_t v111 = a1;
  uint64_t v97 = sub_10002B7CC(&qword_100ACD5F8);
  __chkstk_darwin(v97);
  uint64_t v98 = &v92[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v18 = sub_10096B480();
  uint64_t v114 = *(void *)(v18 - 8);
  uint64_t v115 = v18;
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v113 = &v92[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v19);
  uint64_t v22 = &v92[-v21];
  uint64_t v23 = swift_allocObject();
  uint64_t v101 = a8;
  *(void *)(v23 + 16) = a8;
  *(void *)(v23 + 24) = a9;
  int v99 = a10;
  *(unsigned char *)(v23 + 32) = a10;
  *(void *)(v23 + 40) = a11;
  *(void *)(v23 + 48) = a12;
  *(void *)(v23 + 56) = a13;
  int v100 = a14;
  *(unsigned char *)(v23 + 64) = a14;
  uint64_t v24 = v111;
  *(void *)(v23 + 72) = a15;
  *(void *)(v23 + 80) = a16;
  uint64_t v110 = v23;
  uint64_t v105 = a9;
  swift_retain();
  uint64_t v104 = a11;
  swift_retain();
  unint64_t v107 = a12;
  sub_1000CE628(a12);
  uint64_t v25 = a13;
  unint64_t v26 = v116;
  swift_retain();
  swift_retain();
  id v27 = a16;
  id v28 = (id)fpfs_current_or_default_log();
  sub_10096B490();
  sub_1000CE628(v26);
  sub_1000CE628(v26);
  swift_retain();
  BOOL v29 = sub_10096B470();
  int v30 = sub_10096C5A0();
  if (os_log_type_enabled(v29, (os_log_type_t)v30))
  {
    int v93 = v30;
    uint64_t v94 = v22;
    id v102 = v27;
    uint64_t v106 = a15;
    uint64_t v31 = swift_slowAlloc();
    v119[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v31 = 136315906;
    swift_beginAccess();
    uint64_t v32 = *(void **)(v24 + 32);
    uint64_t v33 = *(unsigned __int8 *)(v24 + 40);
    char v34 = *(unsigned char *)(v24 + 41);
    uint64_t v108 = a13;
    if (v34)
    {
      id v35 = v32;
      uint64_t v36 = NSFileProviderItemIdentifier.description.getter();
      unint64_t v38 = v37;
      sub_1000D30C4(v32, v33, 1);
    }
    else
    {
      uint64_t v36 = VFSItemID.parseableString.getter((uint64_t)v32, v33);
      unint64_t v38 = v42;
    }
    uint64_t v118 = sub_100719D44(v36, v38, v119);
    sub_10096C8C0();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v31 + 12) = 2080;
    if ((_BYTE)v109)
    {
      if (v109 == 1) {
        uint64_t v43 = 0x74616761706F7270;
      }
      else {
        uint64_t v43 = 0xD000000000000010;
      }
      if (v109 == 1) {
        unint64_t v44 = 0xED000053466F5465;
      }
      else {
        unint64_t v44 = 0x80000001009958D0;
      }
    }
    else
    {
      uint64_t v43 = 0xD000000000000013;
      unint64_t v44 = 0x80000001009958A0;
    }
    uint64_t v118 = sub_100719D44(v43, v44, v119);
    sub_10096C8C0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v31 + 22) = 2080;
    unint64_t v26 = v116;
    unint64_t v45 = sub_1005232CC(v116);
    unint64_t v47 = v46;
    sub_1000B6C28(v26);
    uint64_t v118 = sub_100719D44(v45, v47, v119);
    sub_10096C8C0();
    swift_bridgeObjectRelease();
    sub_1000B6C28(v26);
    *(_WORD *)(v31 + 32) = 2048;
    uint64_t v41 = v112;
    uint64_t v118 = v112;
    sub_10096C8C0();
    _os_log_impl((void *)&_mh_execute_header, v29, (os_log_type_t)v93, "Lookup itemID %s with behavior %s request %s iteration %ld", (uint8_t *)v31, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    os_log_type_t v40 = *(void (**)(unsigned char *, uint64_t))(v114 + 8);
    v40(v94, v115);
    uint64_t v25 = v108;
    uint64_t v39 = v106;
    id v27 = v102;
  }
  else
  {
    uint64_t v39 = a15;
    sub_1000B6C28(v26);
    swift_release();
    sub_1000B6C28(v26);

    os_log_type_t v40 = *(void (**)(unsigned char *, uint64_t))(v114 + 8);
    v40(v22, v115);
    uint64_t v41 = v112;
  }
  BOOL v48 = v41 < 51;
  os_log_type_t v49 = v113;
  if (v48)
  {
    swift_beginAccess();
    unint64_t v60 = *(void **)(v24 + 32);
    uint64_t v61 = *(unsigned __int8 *)(v24 + 40);
    if (*(unsigned char *)(v24 + 41))
    {
      uint64_t v62 = qword_100ACC110;
      id v63 = v60;
      uint64_t v64 = v110;
      uint64_t v65 = v103;
      if (v62 != -1) {
        swift_once();
      }
      uint64_t v66 = _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
      uint64_t v68 = v67;
      if (v66 == _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0() && v68 == v69)
      {
        swift_bridgeObjectRelease_n();
        sub_1000D30C4(v60, v61, 1);
LABEL_28:
        sub_1000BC044(v26, (uint64_t)sub_1000D535C, v64);
        return swift_release();
      }
      char v71 = sub_10096D2D0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1000D30C4(v60, v61, 1);
      if (v71) {
        goto LABEL_28;
      }
    }
    else
    {
      uint64_t v64 = v110;
      uint64_t v65 = v103;
      if (!v60 && v61 == 2) {
        goto LABEL_28;
      }
    }
    if (((v26 >> 1) & 3 | (v26 >> 58) & 0x3C) == 0x1E)
    {
      unint64_t v72 = *(void *)((v26 & 0xFFFFFFFFFFFFFF9) + 0x10);
      unint64_t v73 = v72;
    }
    else
    {
      uint64_t v82 = swift_allocObject();
      *(void *)(v82 + 16) = v26;
      unint64_t v73 = v82 | 0x7000000000000004;
      unint64_t v72 = v26;
    }
    sub_1000CE628(v72);
    uint64_t v83 = swift_allocObject();
    *(void *)(v83 + 16) = sub_1000D535C;
    *(void *)(v83 + 24) = v64;
    *(void *)(v83 + 32) = v65;
    *(unsigned char *)(v83 + 40) = v109;
    *(void *)(v83 + 48) = v26;
    *(void *)(v83 + 56) = v24;
    char v84 = v95 & 1;
    *(unsigned char *)(v83 + 64) = v95 & 1;
    uint64_t v85 = v96;
    uint64_t v86 = v112;
    *(void *)(v83 + 72) = v96;
    *(void *)(v83 + 80) = v86;
    uint64_t v87 = swift_allocObject();
    *(void *)(v87 + 16) = v24;
    *(void *)(v87 + 24) = v65;
    *(unsigned char *)(v87 + 32) = v84;
    *(unsigned char *)(v87 + 33) = 0;
    *(void *)(v87 + 40) = sub_1000D310C;
    *(void *)(v87 + 48) = v83;
    *(void *)(v87 + 56) = v73;
    unint64_t v88 = v26;
    uint64_t v89 = swift_allocObject();
    *(void *)(v89 + 16) = sub_1000D310C;
    *(void *)(v89 + 24) = v83;
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1000CE628(v88);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    id v90 = v85;
    sub_1000CE628(v73);
    sub_1007D8110((uint64_t)"findExistingVFSItemFor(itemID:parentIsImported:bypassIsHidden:request:completionHandler:)", 89, 2, sub_1000DEB24, v89, (uint64_t)sub_1000D3128, v87);
    swift_release();
    swift_release();
    swift_release();
    sub_1000B6C28(v73);
    return swift_release();
  }
  id v50 = (id)fpfs_current_or_default_log();
  sub_10096B490();
  sub_1000CE628(v26);
  sub_1000CE628(v26);
  swift_retain();
  uint64_t v51 = sub_10096B470();
  os_log_type_t v52 = sub_10096C5C0();
  if (os_log_type_enabled(v51, v52))
  {
    id v102 = v27;
    uint64_t v106 = v39;
    uint64_t v108 = v25;
    uint64_t v53 = swift_slowAlloc();
    uint64_t v118 = swift_slowAlloc();
    *(_DWORD *)uint64_t v53 = 136446466;
    swift_beginAccess();
    id v54 = *(void **)(v24 + 32);
    uint64_t v55 = *(unsigned __int8 *)(v24 + 40);
    if (*(unsigned char *)(v24 + 41))
    {
      id v56 = v54;
      uint64_t v57 = NSFileProviderItemIdentifier.description.getter();
      unint64_t v59 = v58;
      sub_1000D30C4(v54, v55, 1);
    }
    else
    {
      uint64_t v57 = VFSItemID.parseableString.getter(*(void *)(v24 + 32), *(unsigned char *)(v24 + 40));
      unint64_t v59 = v74;
    }
    uint64_t v117 = sub_100719D44(v57, v59, &v118);
    sub_10096C8C0();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v53 + 12) = 2082;
    unint64_t v75 = v116;
    unint64_t v76 = sub_1005232CC(v116);
    unint64_t v78 = v77;
    sub_1000B6C28(v75);
    uint64_t v117 = sub_100719D44(v76, v78, &v118);
    sub_10096C8C0();
    swift_bridgeObjectRelease();
    sub_1000B6C28(v75);
    _os_log_impl((void *)&_mh_execute_header, v51, v52, "Recursion too deep for lookup of itemID %{public}s request %{public}s", (uint8_t *)v53, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v40(v113, v115);
    unint64_t v70 = v107;
    uint64_t v25 = v108;
    uint64_t v39 = v106;
    id v27 = v102;
  }
  else
  {
    sub_1000B6C28(v26);
    swift_release();
    sub_1000B6C28(v26);

    v40(v49, v115);
    unint64_t v70 = v107;
  }
  NSString v79 = sub_10096BC00();
  id v80 = (id)FPInvalidParameterError();

  if (v80)
  {
    uint64_t v81 = (uint64_t)v98;
    *uint64_t v98 = v80;
    swift_storeEnumTagMultiPayload();
    sub_1000C5364(v81, v101, v105, v99, v104, v70, v25, v100 & 1, v39, v27);
    sub_10002B770(v81, &qword_100ACD5F8);
    return swift_release();
  }
  swift_release();
  swift_release();
  sub_1000B6C28(v70);

  swift_release();
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_1000D52FC()
{
  swift_release();
  swift_release();
  sub_1000B6C28(*(void *)(v0 + 48));
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1000D535C(uint64_t a1)
{
  return sub_1000D5374(a1, (uint64_t (*)(uint64_t, void, void, void, void, void, void, void, void, void))sub_1000C5364);
}

uint64_t sub_1000D5374(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void, void, void, void, void))
{
  return a2(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), *(unsigned __int8 *)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48), *(void *)(v2 + 56), *(unsigned __int8 *)(v2 + 64), *(void *)(v2 + 72), *(void *)(v2 + 80));
}

uint64_t sub_1000D53C0()
{
  uint64_t v1 = (int *)type metadata accessor for VFSItem(0);
  uint64_t v18 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  swift_release();
  swift_release();
  sub_1000B6C28(*(void *)(v0 + 40));
  uint64_t v2 = v0 + ((v18 + 48) & ~v18);
  swift_bridgeObjectRelease();
  uint64_t v3 = v2 + v1[7];
  uint64_t v4 = (int *)type metadata accessor for ItemMetadata();
  uint64_t v5 = v3 + v4[7];
  uint64_t v6 = sub_10096B0E0();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  v8(v3 + v4[8], v6);
  swift_bridgeObjectRelease();
  uint64_t v9 = v3 + v4[29];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v9, 1, v6)) {
    v8(v9, v6);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = (uint64_t *)(v3 + v4[33]);
  unint64_t v11 = v10[1];
  if (v11 >> 60 != 15) {
    sub_10001E9C0(*v10, v11);
  }
  swift_bridgeObjectRelease();
  uint64_t v12 = v2 + v1[8];
  if (*(void *)(v12 + 16) != 1)
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*(void *)(v12 + 192))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v13 = v2 + v1[12];
  uint64_t v14 = sub_10002B7CC(&qword_100ACA8C0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48))(v13, 1, v14))
  {
    uint64_t v15 = sub_10096AE50();
    uint64_t v16 = *(void *)(v15 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v13, 1, v15)) {
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v13, v15);
    }
  }
  swift_release();

  return swift_deallocObject();
}

unint64_t sub_1000D574C(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for VFSItem(0) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1000C7CC0(a1, *(void (**)(void *))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), v1 + v4, *(void *)(v1 + v5), *(unsigned __int8 *)(v1 + v5 + 8), *(unsigned char *)(v1 + v5 + 9));
}

uint64_t sub_1000D5804()
{
  swift_release();
  sub_1000B6C28(*(void *)(v0 + 24));
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1000D5854(uint64_t a1)
{
  return sub_1000D586C(a1, (uint64_t (*)(uint64_t, void, void, void, void, void, void, void, char))sub_1000B258C);
}

uint64_t sub_1000D586C(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void, void, void, char))
{
  char v4 = *(unsigned char *)(v2 + 65);
  return a2(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(unsigned __int8 *)(v2 + 48), *(void *)(v2 + 56), *(unsigned __int8 *)(v2 + 64), v4);
}

uint64_t sub_1000D58B8(uint64_t a1)
{
  return sub_1000D59B0(a1, (uint64_t (*)(uint64_t, void, void, void, void, void, void, void))sub_1000B46B0);
}

uint64_t sub_1000D58D0()
{
  sub_1000B6C28(*(void *)(v0 + 24));
  swift_release();
  swift_release();

  return swift_deallocObject();
}

void sub_1000D5920()
{
  sub_1000AEB34(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48));
}

uint64_t sub_1000D5948()
{
  swift_release();
  sub_1000B6C28(*(void *)(v0 + 24));
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1000D5998(uint64_t a1)
{
  return sub_1000D59B0(a1, (uint64_t (*)(uint64_t, void, void, void, void, void, void, void))sub_1000B3B98);
}

uint64_t sub_1000D59B0(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void, void, void))
{
  return a2(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48), *(unsigned __int8 *)(v2 + 56), *(unsigned __int8 *)(v2 + 57));
}

uint64_t sub_1000D59D8(uint64_t a1)
{
  return sub_1000B51F4(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(uint64_t (**)(uint64_t))(v1 + 32), *(void *)(v1 + 40), "finished post-propagation VFS lookup for %s reason %s: %s");
}

uint64_t sub_1000D5A08()
{
  swift_release();
  sub_1000B6C28(*(void *)(v0 + 24));
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1000D5A50(uint64_t a1)
{
  return sub_1000B51F4(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(uint64_t (**)(uint64_t))(v1 + 32), *(void *)(v1 + 40), "finished post-propagation VFS lookup for %s request %s: %s");
}

uint64_t sub_1000D5A7C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1000D5ABC(uint64_t a1)
{
  return sub_1000AB244(*(void **)a1, *(unsigned char *)(a1 + 8), *(void (**)(uint64_t, uint64_t))(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32));
}

uint64_t sub_1000D5AD4()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1000D5B0C(uint64_t a1)
{
  return sub_1000CED98(a1, *(void (**)(uint64_t, uint64_t))(v1 + 16), *(void *)(v1 + 24), v1 + 32);
}

uint64_t sub_1000D5B18(uint64_t a1, char a2)
{
  if (a2) {
    return swift_errorRelease();
  }
  else {
    return swift_release();
  }
}

void sub_1000D5B24(void *a1, char a2)
{
  if (a2) {
    swift_errorRelease();
  }
  else {
}
  }

uint64_t sub_1000D5B30(uint64_t a1, char a2)
{
  if (a2) {
    return swift_errorRetain();
  }
  else {
    return swift_retain();
  }
}

uint64_t sub_1000D5B3C()
{
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1000D5B84(uint64_t a1)
{
  return sub_1007E67F8(a1, *(void (**)(char *))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_1000D5B94()
{
  swift_release();
  sub_1000B6C28(*(void *)(v0 + 32));

  return swift_deallocObject();
}

void sub_1000D5BDC(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5, void (*a6)(void, void *), uint64_t a7)
{
  uint64_t v66 = a5;
  uint64_t v67 = a4;
  uint64_t v68 = a3;
  uint64_t v69 = a2;
  uint64_t v10 = sub_10096A630();
  __chkstk_darwin(v10 - 8);
  id v56 = (char *)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = sub_10096A650();
  uint64_t v57 = *(void *)(v58 - 8);
  __chkstk_darwin(v58);
  uint64_t v55 = (char *)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10096B730();
  uint64_t v64 = *(void *)(v13 - 8);
  uint64_t v65 = v13;
  __chkstk_darwin(v13);
  uint64_t v62 = (char *)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = sub_10096B7D0();
  uint64_t v61 = *(void *)(v63 - 8);
  __chkstk_darwin(v63);
  unint64_t v60 = (char *)&v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = (int *)type metadata accessor for ItemMetadata();
  __chkstk_darwin(v16);
  uint64_t v59 = (uint64_t)&v54 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for VFSItem(0);
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v54 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __chkstk_darwin(v19);
  uint64_t v24 = (char *)&v54 - v23;
  __chkstk_darwin(v22);
  unint64_t v26 = (char *)&v54 - v25;
  uint64_t v27 = swift_allocObject();
  uint64_t v28 = v27;
  *(void *)(v27 + 16) = a6;
  *(void *)(v27 + 24) = a7;
  BOOL v29 = (unsigned __int8 *)(a1 + *(int *)(v18 + 28));
  int v30 = v29[v16[20]];
  unint64_t v70 = a6;
  if (v30 == 1)
  {
    uint64_t v54 = v27;
    int v31 = *v29;
    sub_1000D37D0(a1, (uint64_t)v26, type metadata accessor for VFSItem);
    if (v31 == 1)
    {
      swift_retain();
      sub_1000D3770((uint64_t)v26, type metadata accessor for VFSItem);
LABEL_19:
      v70(0, 0);
      goto LABEL_20;
    }
    char v35 = v26[*(int *)(v18 + 28) + v16[27]];
    swift_retain();
    sub_1000D3770((uint64_t)v26, type metadata accessor for VFSItem);
    if (v35) {
      goto LABEL_19;
    }
    int v48 = fpfs_supports_partial_materialization();
    sub_1000D37D0(a1, (uint64_t)v24, type metadata accessor for VFSItem);
    if (!v48)
    {
      sub_1000D3770((uint64_t)v24, type metadata accessor for VFSItem);
      goto LABEL_19;
    }
    uint64_t v49 = v59;
    sub_1000D37D0((uint64_t)&v24[*(int *)(v18 + 28)], v59, (uint64_t (*)(void))type metadata accessor for ItemMetadata);
    sub_1000D3770((uint64_t)v24, type metadata accessor for VFSItem);
    uint64_t v50 = *(void *)(v49 + v16[26]);
    sub_1000D3770(v49, (uint64_t (*)(void))type metadata accessor for ItemMetadata);
    uint64_t v28 = v54;
    if (!v50) {
      goto LABEL_19;
    }
  }
  else
  {
    swift_retain();
  }
  uint64_t v32 = (unsigned char *)(v69 + 16);
  swift_beginAccess();
  if (*v32 == 1)
  {
    int v33 = *v29;
    sub_1000D37D0(a1, (uint64_t)v21, type metadata accessor for VFSItem);
    if (v33 == 1)
    {
      uint64_t v34 = sub_1000D3770((uint64_t)v21, type metadata accessor for VFSItem);
LABEL_11:
      v67(v34);
      goto LABEL_20;
    }
    uint64_t v36 = v59;
    sub_1000D37D0((uint64_t)&v21[*(int *)(v18 + 28)], v59, (uint64_t (*)(void))type metadata accessor for ItemMetadata);
    sub_1000D3770((uint64_t)v21, type metadata accessor for VFSItem);
    int v37 = *(unsigned __int8 *)(v36 + v16[21]);
    uint64_t v34 = sub_1000D3770(v36, (uint64_t (*)(void))type metadata accessor for ItemMetadata);
    if (v37) {
      goto LABEL_11;
    }
  }
  uint64_t v38 = swift_allocBox();
  sub_1000D37D0(a1, v39, type metadata accessor for VFSItem);
  type metadata accessor for VFSFileTree(0);
  uint64_t v40 = swift_dynamicCastClass();
  if (!v40)
  {
    swift_release();
    sub_10096A580();
    sub_100042898((uint64_t)_swiftEmptyArrayStorage);
    sub_1000278B4((unint64_t *)&qword_100ACB680, (void (*)(uint64_t))&type metadata accessor for CocoaError);
    uint64_t v51 = v55;
    uint64_t v52 = v58;
    sub_10096ABD0();
    uint64_t v53 = (void *)sub_10096A4D0();
    (*(void (**)(char *, uint64_t))(v57 + 8))(v51, v52);
    v70(0, v53);
    swift_release();

    return;
  }
  uint64_t v41 = *(void **)(v40 + 216);
  unint64_t v42 = (void *)swift_allocObject();
  v42[2] = v38;
  v42[3] = sub_1000DEB28;
  v42[4] = v28;
  aBlock[4] = sub_1000DEB1C;
  aBlock[5] = v42;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100020480;
  aBlock[3] = &unk_100A6F868;
  uint64_t v43 = _Block_copy(aBlock);
  swift_retain();
  id v44 = v41;
  swift_retain();
  swift_retain();
  unint64_t v45 = v60;
  sub_10096B780();
  char v71 = _swiftEmptyArrayStorage;
  sub_1000278B4((unint64_t *)&unk_100ACAEF0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10002B7CC((uint64_t *)&unk_100ACB5C0);
  sub_100025500((unint64_t *)&qword_100ACAF00, (uint64_t *)&unk_100ACB5C0);
  unint64_t v46 = v62;
  uint64_t v47 = v65;
  sub_10096CA60();
  sub_10096C6B0();
  _Block_release(v43);
  swift_release();

  (*(void (**)(char *, uint64_t))(v64 + 8))(v46, v47);
  (*(void (**)(char *, uint64_t))(v61 + 8))(v45, v63);
  swift_release();
  swift_release();
LABEL_20:
  swift_release();
}

uint64_t sub_1000D64D8(uint64_t a1, uint64_t a2, unint64_t a3, unsigned int a4, void *a5, void (*a6)(void, void *), uint64_t a7)
{
  uint64_t v138 = a1;
  uint64_t v139 = a7;
  id v135 = a5;
  unsigned int v130 = a4;
  unint64_t v133 = a3;
  uint64_t v131 = a2;
  uint64_t v124 = sub_10096B480();
  uint64_t v123 = *(void *)(v124 - 8);
  __chkstk_darwin(v124);
  uint64_t v125 = (char *)&v116 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for VFSItem(0);
  uint64_t v129 = *(void *)(v9 - 8);
  uint64_t v10 = *(void *)(v129 + 64);
  uint64_t v11 = __chkstk_darwin(v9 - 8);
  uint64_t v127 = (uint64_t)&v116 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v126 = (char *)&v116 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v132 = (uint64_t)&v116 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v128 = (uint64_t)&v116 - v17;
  __chkstk_darwin(v16);
  uint64_t v134 = (uint64_t)&v116 - v18;
  uint64_t v19 = sub_10002B7CC(&qword_100ACD600);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v136 = v19;
  uint64_t v137 = v20;
  uint64_t v21 = *(void *)(v20 + 64);
  uint64_t v22 = __chkstk_darwin(v19);
  uint64_t v23 = __chkstk_darwin(v22);
  uint64_t v25 = (char *)&v116 - v24;
  __chkstk_darwin(v23);
  uint64_t v27 = (char *)&v116 - v26;
  uint64_t v28 = sub_10002B7CC(&qword_100ACD5F8);
  __chkstk_darwin(v28);
  int v30 = (void **)((char *)&v116 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v31 = swift_allocObject();
  *(void *)(v31 + 16) = a6;
  *(void *)(v31 + 24) = v139;
  sub_10002B70C(v138, (uint64_t)v30, &qword_100ACD5F8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v32 = *v30;
    swift_retain_n();
    swift_errorRetain();
    a6(0, v32);
    swift_errorRelease();
    swift_errorRelease();
    swift_release();
    return swift_release();
  }
  uint64_t v119 = v10;
  uint64_t v117 = v21;
  uint64_t v118 = (uint64_t)&v116 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v122 = a6;
  uint64_t v120 = v25;
  uint64_t v121 = v27;
  uint64_t v138 = v31;
  uint64_t v33 = v136;
  if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(v137 + 48))(v30, 1, v136) == 1)
  {
    swift_retain_n();
    v122(0, 0);
LABEL_7:
    swift_release();
    return swift_release();
  }
  uint64_t v34 = (uint64_t)v121;
  sub_10001AE98((uint64_t)v30, (uint64_t)v121, &qword_100ACD600);
  if (*(unsigned char *)(v34 + *(int *)(v33 + 56)) == 1)
  {
    sub_1000DBD10();
    char v35 = (void *)swift_allocError();
    *uint64_t v36 = 1;
    swift_retain_n();
    v122(0, v35);
    swift_errorRelease();
    sub_10002B770(v34, &qword_100ACD600);
    goto LABEL_7;
  }
  uint64_t v38 = v134;
  sub_1000D37D0(v34, v134, type metadata accessor for VFSItem);
  sub_10002B70C(v34, (uint64_t)v120, &qword_100ACD600);
  uint64_t v39 = v128;
  sub_1000D37D0(v38, v128, type metadata accessor for VFSItem);
  sub_1000D37D0(v39, v132, type metadata accessor for VFSItem);
  uint64_t v40 = *(unsigned __int8 *)(v129 + 80);
  uint64_t v41 = (v40 + 24) & ~v40;
  unint64_t v42 = (v41 + v119 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v43 = (v41 + v119 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v44 = swift_allocObject();
  uint64_t v45 = v131;
  *(void *)(v44 + 16) = v131;
  sub_10003D140(v39, v44 + v41);
  unint64_t v46 = v44 + v42;
  unint64_t v47 = v133;
  *(void *)unint64_t v46 = v133;
  *(unsigned char *)(v46 + 8) = v130;
  int v48 = (uint64_t (**)(uint64_t))(v44 + v43);
  uint64_t v49 = v44;
  uint64_t v50 = v34;
  uint64_t v51 = v138;
  NSObject *v48 = sub_1000DEB28;
  v48[1] = (uint64_t (*)(uint64_t))v51;
  *(void *)(v44 + ((v43 + 23) & 0xFFFFFFFFFFFFFFF8)) = v135;
  unint64_t v52 = v47;
  if (((v47 >> 58) & 0x3C | (v47 >> 1) & 3) == 0x1B)
  {
    uint64_t v53 = v137;
    uint64_t v54 = swift_allocObject();
    *(void *)(v54 + 16) = sub_1000DBCBC;
    *(void *)(v54 + 24) = v49;
    sub_10002B7CC((uint64_t *)&unk_100AD6720);
    uint64_t v55 = swift_dynamicCastClass();
    if (v55)
    {
      uint64_t v56 = v55;
      uint64_t v57 = swift_allocObject();
      uint64_t v58 = v138;
      *(void *)(v57 + 16) = sub_1000DEB28;
      *(void *)(v57 + 24) = v58;
      uint64_t v59 = v118;
      sub_10002B70C((uint64_t)v120, v118, &qword_100ACD600);
      unint64_t v60 = (*(unsigned __int8 *)(v53 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80);
      unint64_t v61 = (v117 + v60 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v129 = v49;
      unint64_t v62 = (v61 + 15) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v63 = swift_allocObject();
      sub_10001AE98(v59, v63 + v60, &qword_100ACD600);
      *(void *)(v63 + v61) = v56;
      id v64 = v135;
      uint64_t v65 = (uint64_t (**)())(v63 + v62);
      *uint64_t v65 = sub_1000DEB2C;
      v65[1] = (uint64_t (*)())v54;
      swift_retain_n();
      swift_retain();
      swift_retain();
      sub_1000CE628(v133);
      id v66 = v64;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      sub_1000CE628(v133);
      id v67 = v66;
      swift_retain();
      swift_retain();
      swift_retain();
      sub_1004A8A2C((uint64_t)"evict(_:request:evictionReason:progress:completionHandler:)", 59, 2, 0, (uint64_t)FPDDomainFPFSBackend.isDeadEnd(), 0, (uint64_t)sub_1000DEB20, v57, (uint64_t)sub_1000DBCDC, v63);
      swift_release();
      swift_release_n();
      uint64_t v68 = (uint64_t)v120;
      swift_release();
      unint64_t v69 = v133;
      swift_release();
      swift_release();
      swift_release();
      uint64_t v70 = v132;
    }
    else
    {
      swift_retain();
      swift_retain();
      swift_retain();
      unint64_t v69 = v52;
      sub_1000CE628(v52);
      id v64 = v135;
      id v82 = v135;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      sub_1000CE628(v69);
      id v83 = v82;
      swift_retain();
      uint64_t v70 = v132;
      sub_1000CC59C(v45, v132, v69, v130, (uint64_t)sub_1000DEB28, v51, v83);
      swift_release();
      swift_release_n();
      swift_release();
      uint64_t v68 = (uint64_t)v120;
    }
    sub_1000D3770(v70, type metadata accessor for VFSItem);
    sub_1000B6C28(v69);

    swift_release();
    sub_10002B770(v68, &qword_100ACD600);
    sub_10002B770((uint64_t)v121, &qword_100ACD600);
    sub_1000D3770(v134, type metadata accessor for VFSItem);
    swift_release();
  }
  else
  {
    uint64_t v116 = v40 | 7;
    uint64_t v129 = v44;
    uint64_t v71 = ~v40;
    unsigned __int8 v141 = 1;
    uint64_t v72 = swift_allocObject();
    uint64_t v128 = v72;
    *(unsigned char *)(v72 + 16) = 1;
    unint64_t v73 = *(void **)(v50 + *(int *)(v136 + 52));
    if (v73)
    {
      uint64_t v136 = ~v40;
      id v140 = v73;
      __chkstk_darwin(v72);
      *(&v116 - 6) = v45;
      *(&v116 - 5) = (uint64_t)&v140;
      *((unsigned char *)&v116 - 32) = v130;
      *(&v116 - 3) = v74;
      uint64_t v114 = v134;
      uint64_t v115 = &v141;
      swift_retain();
      swift_retain();
      swift_retain();
      sub_1000CE628(v52);
      id v75 = v135;
      uint64_t v76 = v138;
      swift_retain();
      swift_retain();
      swift_retain();
      sub_1000CE628(v52);
      id v77 = v75;
      id v78 = v73;
      uint64_t v80 = v45;
      uint64_t v81 = v79;
      sub_10048DC38(v80, (uint64_t)"evict(_:request:evictionReason:progress:completionHandler:)", 59, 2, 0, (uint64_t)sub_1000DBCF4, (uint64_t)(&v116 - 8), v80);

      uint64_t v86 = v134;
      uint64_t v87 = v76;
      uint64_t v88 = v131;
      uint64_t v89 = (uint64_t)v126;
      uint64_t v90 = v119;
      uint64_t v71 = v136;
    }
    else
    {
      swift_retain();
      swift_retain();
      swift_retain();
      sub_1000CE628(v52);
      id v84 = v135;
      swift_retain();
      swift_retain();
      swift_retain();
      sub_1000CE628(v52);
      id v85 = v84;
      uint64_t v86 = v134;
      uint64_t v87 = v51;
      uint64_t v88 = v45;
      uint64_t v89 = (uint64_t)v126;
      uint64_t v90 = v119;
    }
    int v91 = v141;
    sub_1000D37D0(v86, v89, type metadata accessor for VFSItem);
    sub_1000D37D0(v89, v127, type metadata accessor for VFSItem);
    uint64_t v92 = (v40 + 16) & v71;
    unint64_t v93 = (v90 + v92 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v94 = (v93 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v95 = (v94 + 15) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v96 = swift_allocObject();
    uint64_t v97 = v89;
    uint64_t v98 = v96;
    sub_10003D140(v97, v96 + v92);
    int v99 = (uint64_t (**)(uint64_t))(v98 + v93);
    *int v99 = sub_1000DEB28;
    v99[1] = (uint64_t (*)(uint64_t))v87;
    *(void *)(v98 + v94) = v128;
    *(void *)(v98 + v95) = v88;
    int v100 = (void *)(v98 + ((v95 + 15) & 0xFFFFFFFFFFFFFFF8));
    uint64_t v101 = v129;
    void *v100 = sub_1000DBCBC;
    v100[1] = v101;
    uint64_t v102 = v88;
    if (v91 == 1 && (sub_10002B7CC((uint64_t *)&unk_100AD6720), (uint64_t v103 = swift_dynamicCastClass()) != 0))
    {
      uint64_t v104 = v103;
      uint64_t v105 = swift_allocObject();
      *(void *)(v105 + 16) = sub_1000DEB28;
      *(void *)(v105 + 24) = v87;
      uint64_t v106 = v118;
      sub_10002B70C((uint64_t)v120, v118, &qword_100ACD600);
      unint64_t v107 = (*(unsigned __int8 *)(v137 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v137 + 80);
      unint64_t v108 = (v117 + v107 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v109 = swift_allocObject();
      sub_10001AE98(v106, v109 + v107, &qword_100ACD600);
      *(void *)(v109 + v108) = v104;
      uint64_t v110 = (void *)(v109 + ((v108 + 15) & 0xFFFFFFFFFFFFFFF8));
      uint64_t v86 = v134;
      *uint64_t v110 = sub_1000DBCD4;
      v110[1] = v98;
      swift_retain_n();
      swift_retain_n();
      swift_retain_n();
      swift_retain_n();
      swift_retain_n();
      swift_retain();
      sub_1004A8A2C((uint64_t)"evict(_:request:evictionReason:progress:completionHandler:)", 59, 2, 0, (uint64_t)FPDDomainFPFSBackend.isDeadEnd(), 0, (uint64_t)sub_1000DEB20, v105, (uint64_t)sub_1000DBCDC, v109);
      swift_release();
      swift_release();
      swift_release();
      uint64_t v111 = v127;
    }
    else
    {
      swift_retain_n();
      swift_retain_n();
      swift_retain_n();
      uint64_t v112 = v128;
      swift_retain_n();
      uint64_t v113 = v139;
      swift_retain();
      uint64_t v111 = v127;
      sub_1000D5BDC(v127, v112, v102, (void (*)(uint64_t))sub_1000DBCBC, v101, v122, v113);
      swift_release();
    }
    swift_release();
    sub_1000D3770(v111, type metadata accessor for VFSItem);
    swift_release_n();
    swift_release_n();
    swift_release();
    swift_release();
    sub_1000D3770(v132, type metadata accessor for VFSItem);
    sub_1000B6C28(v133);

    swift_release();
    sub_10002B770((uint64_t)v120, &qword_100ACD600);
    sub_10002B770((uint64_t)v121, &qword_100ACD600);
    sub_1000D3770(v86, type metadata accessor for VFSItem);
    swift_release();
    swift_release();
  }
  return swift_release();
}

void sub_1000D75B0(uint64_t a1, int a2, int a3, unint64_t a4, void *a5, void (*a6)(char *, uint64_t), uint64_t a7, uint64_t a8, unint64_t a9, unsigned __int8 a10, void *a11, void (*a12)(void, void *), uint64_t a13)
{
  uint64_t v101 = a7;
  unint64_t v107 = a6;
  unint64_t v94 = a5;
  unint64_t v109 = a4;
  int v93 = a3;
  int v106 = a2;
  uint64_t v15 = a13;
  uint64_t v95 = sub_10002B7CC(&qword_100ACD5F8);
  __chkstk_darwin(v95);
  uint64_t v96 = (char **)((char *)&v92 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = sub_10096B480();
  uint64_t v111 = *(void *)(v17 - 8);
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v110 = (char *)&v92 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v92 - v20;
  uint64_t v22 = swift_allocObject();
  uint64_t v98 = a12;
  *(void *)(v22 + 16) = a12;
  *(void *)(v22 + 24) = a13;
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = sub_1000DC8B0;
  *(void *)(v23 + 24) = v22;
  *(void *)(v23 + 32) = a8;
  *(void *)(v23 + 40) = a9;
  unsigned int v97 = a10;
  *(unsigned char *)(v23 + 48) = a10;
  uint64_t v108 = v23;
  *(void *)(v23 + 56) = a11;
  swift_retain();
  swift_retain();
  uint64_t v102 = a8;
  uint64_t v24 = a1;
  swift_retain();
  sub_1000CE628(a9);
  id v25 = a11;
  unint64_t v26 = v109;
  int v100 = v25;
  id v27 = (id)fpfs_current_or_default_log();
  sub_10096B490();
  sub_1000CE628(v26);
  sub_1000CE628(v26);
  swift_retain();
  uint64_t v28 = sub_10096B470();
  os_log_type_t v29 = sub_10096C5A0();
  BOOL v30 = os_log_type_enabled(v28, v29);
  uint64_t v112 = v24;
  if (v30)
  {
    uint64_t v92 = v21;
    unint64_t v31 = v26;
    uint64_t v99 = v17;
    unint64_t v103 = a9;
    uint64_t v104 = a13;
    uint64_t v105 = v22;
    uint64_t v32 = swift_slowAlloc();
    v115[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v32 = 136315906;
    swift_beginAccess();
    uint64_t v33 = *(void **)(v24 + 32);
    uint64_t v34 = v24;
    uint64_t v35 = *(unsigned __int8 *)(v24 + 40);
    if (*(unsigned char *)(v34 + 41))
    {
      id v36 = v33;
      uint64_t v37 = NSFileProviderItemIdentifier.description.getter();
      unint64_t v39 = v38;
      sub_1000D30C4(v33, v35, 1);
    }
    else
    {
      uint64_t v37 = VFSItemID.parseableString.getter((uint64_t)v33, v35);
      unint64_t v39 = v43;
    }
    uint64_t v114 = (void (*)(void, void))sub_100719D44(v37, v39, v115);
    sub_10096C8C0();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v32 + 12) = 2080;
    if ((_BYTE)v106)
    {
      if (v106 == 1) {
        uint64_t v44 = 0x74616761706F7270;
      }
      else {
        uint64_t v44 = 0xD000000000000010;
      }
      if (v106 == 1) {
        unint64_t v45 = 0xED000053466F5465;
      }
      else {
        unint64_t v45 = 0x80000001009958D0;
      }
    }
    else
    {
      uint64_t v44 = 0xD000000000000013;
      unint64_t v45 = 0x80000001009958A0;
    }
    uint64_t v114 = (void (*)(void, void))sub_100719D44(v44, v45, v115);
    sub_10096C8C0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v32 + 22) = 2080;
    unint64_t v46 = sub_1005232CC(v31);
    unint64_t v48 = v47;
    sub_1000B6C28(v31);
    uint64_t v114 = (void (*)(void, void))sub_100719D44(v46, v48, v115);
    unint64_t v26 = v31;
    sub_10096C8C0();
    swift_bridgeObjectRelease();
    sub_1000B6C28(v31);
    *(_WORD *)(v32 + 32) = 2048;
    uint64_t v42 = (uint64_t)v107;
    uint64_t v114 = (void (*)(void, void))v107;
    sub_10096C8C0();
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "Lookup itemID %s with behavior %s request %s iteration %ld", (uint8_t *)v32, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v41 = *(void (**)(char *, uint64_t))(v111 + 8);
    uint64_t v17 = v99;
    v41(v92, v99);
    uint64_t v15 = v104;
    uint64_t v22 = v105;
    unint64_t v40 = v103;
    uint64_t v24 = v112;
  }
  else
  {
    unint64_t v40 = a9;
    sub_1000B6C28(v26);
    swift_release();
    sub_1000B6C28(v26);

    uint64_t v41 = *(void (**)(char *, uint64_t))(v111 + 8);
    v41(v21, v17);
    uint64_t v42 = (uint64_t)v107;
  }
  uint64_t v49 = v110;
  if (v42 < 51)
  {
    swift_beginAccess();
    unint64_t v62 = *(void **)(v24 + 32);
    uint64_t v63 = *(unsigned __int8 *)(v24 + 40);
    if (*(unsigned char *)(v24 + 41))
    {
      unint64_t v64 = v26;
      uint64_t v65 = qword_100ACC110;
      id v66 = v62;
      if (v65 != -1) {
        swift_once();
      }
      uint64_t v67 = _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
      uint64_t v69 = v68;
      if (v67 == _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0() && v69 == v70)
      {
        swift_bridgeObjectRelease_n();
        sub_1000D30C4(v62, v63, 1);
        unint64_t v26 = v64;
LABEL_28:
        sub_1000BC044(v26, (uint64_t)sub_1000DBCA8, v108);
LABEL_38:
        swift_release();
        swift_release();
        return;
      }
      char v71 = sub_10096D2D0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1000D30C4(v62, v63, 1);
      unint64_t v26 = v64;
      if (v71) {
        goto LABEL_28;
      }
    }
    else if (!v62 && v63 == 2)
    {
      goto LABEL_28;
    }
    if (((v26 >> 1) & 3 | (v26 >> 58) & 0x3C) == 0x1E)
    {
      unint64_t v72 = *(void *)((v26 & 0xFFFFFFFFFFFFFF9) + 0x10);
      unint64_t v73 = v72;
    }
    else
    {
      uint64_t v82 = swift_allocObject();
      *(void *)(v82 + 16) = v26;
      unint64_t v73 = v82 | 0x7000000000000004;
      unint64_t v72 = v26;
    }
    sub_1000CE628(v72);
    uint64_t v83 = swift_allocObject();
    uint64_t v84 = v108;
    *(void *)(v83 + 16) = sub_1000DBCA8;
    *(void *)(v83 + 24) = v84;
    uint64_t v85 = v101;
    *(void *)(v83 + 32) = v101;
    *(unsigned char *)(v83 + 40) = v106;
    uint64_t v86 = v112;
    *(void *)(v83 + 48) = v26;
    *(void *)(v83 + 56) = v86;
    char v87 = v93 & 1;
    *(unsigned char *)(v83 + 64) = v93 & 1;
    uint64_t v88 = v94;
    *(void *)(v83 + 72) = v94;
    *(void *)(v83 + 80) = v42;
    uint64_t v89 = swift_allocObject();
    *(void *)(v89 + 16) = v86;
    *(void *)(v89 + 24) = v85;
    *(unsigned char *)(v89 + 32) = v87;
    *(unsigned char *)(v89 + 33) = 0;
    *(void *)(v89 + 40) = sub_1000D310C;
    *(void *)(v89 + 48) = v83;
    *(void *)(v89 + 56) = v73;
    uint64_t v90 = swift_allocObject();
    *(void *)(v90 + 16) = sub_1000D310C;
    *(void *)(v90 + 24) = v83;
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1000CE628(v109);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    id v91 = v88;
    sub_1000CE628(v73);
    sub_1007D8110((uint64_t)"findExistingVFSItemFor(itemID:parentIsImported:bypassIsHidden:request:completionHandler:)", 89, 2, sub_1000DEB24, v90, (uint64_t)sub_1000D3128, v89);
    swift_release();
    swift_release();
    swift_release();
    sub_1000B6C28(v73);
    goto LABEL_38;
  }
  unint64_t v107 = v41;
  id v50 = (id)fpfs_current_or_default_log();
  sub_10096B490();
  sub_1000CE628(v26);
  sub_1000CE628(v26);
  swift_retain();
  uint64_t v51 = sub_10096B470();
  os_log_type_t v52 = sub_10096C5C0();
  if (os_log_type_enabled(v51, v52))
  {
    unint64_t v53 = v26;
    uint64_t v99 = v17;
    unint64_t v103 = v40;
    uint64_t v104 = v15;
    uint64_t v105 = v22;
    uint64_t v54 = swift_slowAlloc();
    uint64_t v114 = (void (*)(void, void))swift_slowAlloc();
    *(_DWORD *)uint64_t v54 = 136446466;
    swift_beginAccess();
    uint64_t v55 = v24;
    uint64_t v56 = *(void **)(v24 + 32);
    uint64_t v57 = *(unsigned __int8 *)(v55 + 40);
    if (*(unsigned char *)(v55 + 41))
    {
      id v58 = v56;
      uint64_t v59 = NSFileProviderItemIdentifier.description.getter();
      unint64_t v61 = v60;
      sub_1000D30C4(v56, v57, 1);
    }
    else
    {
      uint64_t v59 = VFSItemID.parseableString.getter((uint64_t)v56, v57);
      unint64_t v61 = v74;
    }
    uint64_t v113 = sub_100719D44(v59, v61, (uint64_t *)&v114);
    sub_10096C8C0();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v54 + 12) = 2082;
    unint64_t v75 = v53;
    unint64_t v76 = sub_1005232CC(v53);
    unint64_t v78 = v77;
    sub_1000B6C28(v75);
    uint64_t v113 = sub_100719D44(v76, v78, (uint64_t *)&v114);
    sub_10096C8C0();
    swift_bridgeObjectRelease();
    sub_1000B6C28(v75);
    _os_log_impl((void *)&_mh_execute_header, v51, v52, "Recursion too deep for lookup of itemID %{public}s request %{public}s", (uint8_t *)v54, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v107(v110, v99);
    uint64_t v15 = v104;
    unint64_t v40 = v103;
  }
  else
  {
    sub_1000B6C28(v26);
    swift_release();
    sub_1000B6C28(v26);

    v107(v49, v17);
  }
  NSString v79 = sub_10096BC00();
  id v80 = (id)FPInvalidParameterError();

  if (v80)
  {
    uint64_t v81 = (uint64_t)v96;
    *uint64_t v96 = v80;
    swift_storeEnumTagMultiPayload();
    swift_retain();
    sub_1000D64D8(v81, v102, v40, v97, v100, v98, v15);
    swift_release();
    sub_10002B770(v81, &qword_100ACD5F8);
    goto LABEL_38;
  }
  swift_release();
  swift_release();
  swift_release();
  sub_1000B6C28(v40);

  __break(1u);
}

uint64_t sub_1000D8154(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5, void (*a6)(void), uint64_t a7, uint64_t a8)
{
  uint64_t v79 = a5;
  id v80 = a4;
  uint64_t v81 = a3;
  uint64_t v83 = a2;
  uint64_t v12 = sub_10096A630();
  __chkstk_darwin(v12 - 8);
  uint64_t v70 = (char *)&v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = sub_10096A650();
  uint64_t v71 = *(void *)(v72 - 8);
  __chkstk_darwin(v72);
  uint64_t v69 = (char *)&v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10096B730();
  uint64_t v77 = *(void *)(v15 - 8);
  uint64_t v78 = v15;
  __chkstk_darwin(v15);
  unint64_t v75 = (char *)&v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = sub_10096B7D0();
  uint64_t v74 = *(void *)(v76 - 8);
  __chkstk_darwin(v76);
  unint64_t v73 = (char *)&v65 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = (int *)type metadata accessor for ItemMetadata();
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v65 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for VFSItem(0);
  uint64_t v22 = __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v65 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __chkstk_darwin(v22);
  id v27 = (char *)&v65 - v26;
  __chkstk_darwin(v25);
  os_log_type_t v29 = (char *)&v65 - v28;
  BOOL v30 = (void *)swift_allocObject();
  unint64_t v31 = a6;
  uint64_t v32 = a7;
  uint64_t v33 = v30;
  v30[2] = a6;
  v30[3] = v32;
  v30[4] = a8;
  uint64_t v34 = (unsigned __int8 *)(a1 + *(int *)(v21 + 28));
  if (v34[v18[20]] == 1)
  {
    uint64_t v68 = a8;
    id v66 = v31;
    uint64_t v67 = v30;
    uint64_t v35 = v32;
    int v36 = *v34;
    sub_1000D37D0(a1, (uint64_t)v29, type metadata accessor for VFSItem);
    if (v36 == 1)
    {
      swift_retain();
      swift_retain();
      sub_1000D3770((uint64_t)v29, type metadata accessor for VFSItem);
LABEL_9:
      ((void (*)(void))v66)(0);
      return swift_release();
    }
    uint64_t v82 = a1;
    char v41 = v29[*(int *)(v21 + 28) + v18[27]];
    swift_retain();
    swift_retain();
    sub_1000D3770((uint64_t)v29, type metadata accessor for VFSItem);
    if (v41) {
      goto LABEL_9;
    }
    int v53 = fpfs_supports_partial_materialization();
    sub_1000D37D0(v82, (uint64_t)v27, type metadata accessor for VFSItem);
    uint64_t v65 = v35;
    if (!v53)
    {
      sub_1000D3770((uint64_t)v27, type metadata accessor for VFSItem);
      uint64_t v37 = v66;
LABEL_20:
      ((void (*)(void))v37)(0);
      return swift_release();
    }
    sub_1000D37D0((uint64_t)&v27[*(int *)(v21 + 28)], (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for ItemMetadata);
    sub_1000D3770((uint64_t)v27, type metadata accessor for VFSItem);
    uint64_t v54 = *(void *)&v20[v18[26]];
    sub_1000D3770((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for ItemMetadata);
    uint64_t v33 = v67;
    uint64_t v37 = v66;
    if (!v54) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v37 = v31;
    uint64_t v82 = a1;
    uint64_t v65 = v32;
    swift_retain();
    swift_retain();
  }
  unint64_t v38 = (unsigned char *)(v83 + 16);
  swift_beginAccess();
  if (*v38 == 1)
  {
    int v39 = *v34;
    sub_1000D37D0(v82, (uint64_t)v24, type metadata accessor for VFSItem);
    if (v39 == 1)
    {
      uint64_t v40 = sub_1000D3770((uint64_t)v24, type metadata accessor for VFSItem);
LABEL_11:
      v80(v40);
      return swift_release();
    }
    sub_1000D37D0((uint64_t)&v24[*(int *)(v21 + 28)], (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for ItemMetadata);
    sub_1000D3770((uint64_t)v24, type metadata accessor for VFSItem);
    int v42 = v20[v18[21]];
    uint64_t v40 = sub_1000D3770((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for ItemMetadata);
    if (v42) {
      goto LABEL_11;
    }
  }
  uint64_t v43 = swift_allocBox();
  sub_1000D37D0(v82, v44, type metadata accessor for VFSItem);
  type metadata accessor for VFSFileTree(0);
  uint64_t v45 = swift_dynamicCastClass();
  if (v45)
  {
    unint64_t v46 = *(void **)(v45 + 216);
    unint64_t v47 = (void *)swift_allocObject();
    os_log_t v47[2] = v43;
    v47[3] = sub_1000DEA50;
    v47[4] = v33;
    aBlock[4] = sub_1000DC174;
    aBlock[5] = v47;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100020480;
    aBlock[3] = &unk_100A6F318;
    unint64_t v48 = _Block_copy(aBlock);
    swift_retain();
    id v49 = v46;
    swift_retain();
    swift_retain();
    id v50 = v73;
    sub_10096B780();
    uint64_t v84 = _swiftEmptyArrayStorage;
    sub_1000278B4((unint64_t *)&unk_100ACAEF0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10002B7CC((uint64_t *)&unk_100ACB5C0);
    sub_100025500((unint64_t *)&qword_100ACAF00, (uint64_t *)&unk_100ACB5C0);
    uint64_t v51 = v75;
    uint64_t v52 = v78;
    sub_10096CA60();
    sub_10096C6B0();
    _Block_release(v48);
    swift_release();

    (*(void (**)(char *, uint64_t))(v77 + 8))(v51, v52);
    (*(void (**)(char *, uint64_t))(v74 + 8))(v50, v76);
    swift_release();
    swift_release();
  }
  else
  {
    unint64_t v55 = (unint64_t)v37;
    swift_release();
    sub_10096A580();
    sub_100042898((uint64_t)_swiftEmptyArrayStorage);
    sub_1000278B4((unint64_t *)&qword_100ACB680, (void (*)(uint64_t))&type metadata accessor for CocoaError);
    uint64_t v56 = v69;
    uint64_t v57 = v72;
    sub_10096ABD0();
    id v58 = (void *)sub_10096A4D0();
    (*(void (**)(char *, uint64_t))(v71 + 8))(v56, v57);
    swift_beginAccess();
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      uint64_t v60 = Strong;
      uint64_t v61 = v65;
      swift_retain();
      id v62 = v58;
      sub_1007FB108((uint64_t)v62, 0, v60, v55, v61);

      swift_release();
      swift_release();
    }
    else
    {
      swift_errorRetain();
      id v63 = (id)FPDomainUnavailableError();
      v37();
    }
  }
  return swift_release();
}

uint64_t sub_1000D8B1C(uint64_t a1, uint64_t a2, unint64_t a3, int a4, void *a5, void (*a6)(void), uint64_t a7, uint64_t a8)
{
  uint64_t v146 = a8;
  id v140 = a5;
  uint64_t v141 = a2;
  LODWORD(v136) = a4;
  unint64_t v138 = a3;
  uint64_t v144 = (char *)a1;
  uint64_t v129 = sub_10096B480();
  uint64_t v128 = *(void *)(v129 - 8);
  __chkstk_darwin(v129);
  unsigned int v130 = (char *)v122 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for VFSItem(0);
  uint64_t v135 = *(void *)(v11 - 8);
  uint64_t v12 = *(void *)(v135 + 64);
  uint64_t v13 = __chkstk_darwin(v11 - 8);
  uint64_t v133 = (uint64_t)v122 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v131 = (char *)v122 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v137 = (uint64_t)v122 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v134 = (uint64_t)v122 - v19;
  __chkstk_darwin(v18);
  uint64_t v139 = (uint64_t)v122 - v20;
  uint64_t v21 = sub_10002B7CC(&qword_100ACD600);
  uint64_t v142 = *(void *)(v21 - 8);
  uint64_t v22 = *(void *)(v142 + 64);
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v24 = __chkstk_darwin(v23);
  uint64_t v26 = (char *)v122 - v25;
  __chkstk_darwin(v24);
  uint64_t v28 = (char *)v122 - v27;
  uint64_t v29 = sub_10002B7CC(&qword_100ACD5F8);
  __chkstk_darwin(v29);
  unint64_t v31 = (void *)((char *)v122 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v32 = (uint64_t (*)(uint64_t))swift_allocObject();
  uint64_t v143 = a6;
  *((void *)v32 + 2) = a6;
  *((void *)v32 + 3) = a7;
  uint64_t v145 = v32;
  *((void *)v32 + 4) = v146;
  sub_10002B70C((uint64_t)v144, (uint64_t)v31, &qword_100ACD5F8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v33 = *v31;
    swift_beginAccess();
    uint64_t Strong = swift_weakLoadStrong();
    swift_retain();
    swift_retain();
    swift_errorRetain();
    swift_retain();
    swift_retain();
    swift_errorRetain();
    if (Strong)
    {
      sub_1007FB108(v33, 0, Strong, (unint64_t)v143, a7);
      swift_release();
    }
    else
    {
      id v43 = (id)FPDomainUnavailableError();
      v143();
    }
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
    swift_release();
    goto LABEL_11;
  }
  uint64_t v126 = v12;
  uint64_t v124 = v22;
  uint64_t v125 = (uint64_t)v122 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v144 = v26;
  uint64_t v35 = v141;
  uint64_t v127 = v28;
  uint64_t v132 = a7;
  uint64_t v36 = v142;
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v142 + 48))(v31, 1, v21) == 1)
  {
    swift_retain_n();
    swift_retain_n();
    ((void (*)(void))v143)(0);
    swift_release();
LABEL_11:
    swift_release();
    return swift_release();
  }
  uint64_t v37 = v36;
  uint64_t v38 = (uint64_t)v127;
  sub_10001AE98((uint64_t)v31, (uint64_t)v127, &qword_100ACD600);
  if (*(unsigned char *)(v38 + *(int *)(v21 + 56)) == 1)
  {
    sub_1000DBD10();
    uint64_t v39 = swift_allocError();
    *uint64_t v40 = 1;
    swift_beginAccess();
    uint64_t v41 = swift_weakLoadStrong();
    uint64_t v42 = v132;
    swift_retain_n();
    swift_retain_n();
    swift_errorRetain();
    if (v41)
    {
      sub_1007FB108(v39, 0, v41, (unint64_t)v143, v42);
      swift_release();
    }
    else
    {
      id v86 = (id)FPDomainUnavailableError();
      v143();
    }
    swift_errorRelease();
    swift_errorRelease();
    sub_10002B770(v38, &qword_100ACD600);
    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v123 = v21;
    uint64_t v45 = v139;
    sub_1000D37D0(v38, v139, type metadata accessor for VFSItem);
    sub_10002B70C(v38, (uint64_t)v144, &qword_100ACD600);
    uint64_t v46 = v134;
    sub_1000D37D0(v45, v134, type metadata accessor for VFSItem);
    sub_1000D37D0(v46, v137, type metadata accessor for VFSItem);
    uint64_t v47 = *(unsigned __int8 *)(v135 + 80);
    uint64_t v48 = (v47 + 24) & ~v47;
    unint64_t v49 = (v48 + v126 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v50 = (v48 + v126 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v51 = (v50 + 23) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v52 = swift_allocObject();
    *(void *)(v52 + 16) = v35;
    sub_10003D140(v46, v52 + v48);
    unint64_t v53 = v52 + v49;
    unint64_t v54 = v138;
    *(void *)unint64_t v53 = v138;
    unsigned int v55 = v136;
    *(unsigned char *)(v53 + 8) = v136;
    uint64_t v56 = (uint64_t (**)(uint64_t))(v52 + v50);
    uint64_t v57 = (uint64_t)v145;
    char *v56 = sub_1000DEA50;
    v56[1] = (uint64_t (*)(uint64_t))v57;
    *(void *)(v52 + v51) = v140;
    if (((v54 >> 58) & 0x3C | (v54 >> 1) & 3) == 0x1B)
    {
      uint64_t v58 = v37;
      uint64_t v59 = swift_allocObject();
      *(void *)(v59 + 16) = sub_1000DBCBC;
      *(void *)(v59 + 24) = v52;
      uint64_t v60 = *(void *)(v35 + 24);
      sub_10002B7CC((uint64_t *)&unk_100AD6720);
      uint64_t v61 = swift_dynamicCastClass();
      uint64_t v135 = v52;
      if (v61)
      {
        uint64_t v62 = v61;
        uint64_t v63 = swift_allocObject();
        uint64_t v136 = v60;
        uint64_t v143 = (void (*)(void))v63;
        *(void *)(v63 + 16) = sub_1000DEA50;
        *(void *)(v63 + 24) = v57;
        uint64_t v64 = v125;
        sub_10002B70C((uint64_t)v144, v125, &qword_100ACD600);
        unint64_t v65 = (*(unsigned __int8 *)(v58 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v58 + 80);
        unint64_t v66 = (v124 + v65 + 7) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v67 = swift_allocObject();
        sub_10001AE98(v64, v67 + v65, &qword_100ACD600);
        *(void *)(v67 + v66) = v62;
        uint64_t v68 = (uint64_t (**)())(v67 + ((v66 + 15) & 0xFFFFFFFFFFFFFFF8));
        uint64_t *v68 = sub_1000140B0;
        v68[1] = (uint64_t (*)())v59;
        swift_retain_n();
        swift_retain();
        swift_retain();
        swift_retain();
        unint64_t v69 = v138;
        sub_1000CE628(v138);
        id v70 = v140;
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        sub_1000CE628(v69);
        id v71 = v70;
        swift_retain();
        swift_retain();
        swift_retain();
        sub_1004A8A2C((uint64_t)"evict(_:request:evictionReason:progress:completionHandler:)", 59, 2, 0, (uint64_t)FPDDomainFPFSBackend.isDeadEnd(), 0, (uint64_t)sub_1000DEB20, (uint64_t)v143, (uint64_t)sub_1000DBCDC, v67);
        id v72 = v140;
        swift_release();
        swift_release_n();
        uint64_t v73 = (uint64_t)v144;
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        uint64_t v74 = v137;
      }
      else
      {
        uint64_t v87 = v57;
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        unint64_t v69 = v138;
        sub_1000CE628(v138);
        id v72 = v140;
        unsigned int v88 = v55;
        id v89 = v140;
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        sub_1000CE628(v69);
        id v90 = v89;
        swift_retain();
        uint64_t v74 = v137;
        sub_1000CC59C(v35, v137, v69, v88, (uint64_t)sub_1000DEA50, v87, v90);
        swift_release();
        swift_release_n();
        swift_release();
        uint64_t v73 = (uint64_t)v144;
      }
      sub_1000D3770(v74, type metadata accessor for VFSItem);
      sub_1000B6C28(v69);

      swift_release();
      sub_10002B770(v73, &qword_100ACD600);
      sub_10002B770((uint64_t)v127, &qword_100ACD600);
      sub_1000D3770(v139, type metadata accessor for VFSItem);
      swift_release();
      swift_release();
    }
    else
    {
      uint64_t v75 = v126;
      v122[1] = v47 | 7;
      uint64_t v76 = ~v47;
      unsigned __int8 v148 = 1;
      uint64_t v77 = swift_allocObject();
      uint64_t v134 = v77;
      *(unsigned char *)(v77 + 16) = 1;
      uint64_t v78 = *(void **)&v127[*(int *)(v123 + 52)];
      if (v78)
      {
        uint64_t v123 = ~v47;
        uint64_t v135 = v52;
        id v147 = v78;
        __chkstk_darwin(v77);
        v122[-6] = v35;
        v122[-5] = &v147;
        LOBYTE(v122[-4]) = v136;
        v122[-3] = v79;
        uint64_t v120 = v139;
        uint64_t v121 = &v148;
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        unint64_t v80 = v138;
        sub_1000CE628(v138);
        id v81 = v140;
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        sub_1000CE628(v80);
        id v82 = v81;
        id v83 = v78;
        sub_10048DC38(v35, (uint64_t)"evict(_:request:evictionReason:progress:completionHandler:)", 59, 2, 0, (uint64_t)sub_1000DBCF4, (uint64_t)&v122[-8], v85);

        uint64_t v94 = v139;
        uint64_t v95 = v145;
        uint64_t v52 = v135;
        uint64_t v96 = v133;
        uint64_t v97 = (uint64_t)v131;
        uint64_t v75 = v126;
        uint64_t v76 = v123;
      }
      else
      {
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v95 = (uint64_t (*)(uint64_t))v57;
        unint64_t v91 = v138;
        sub_1000CE628(v138);
        id v92 = v140;
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        sub_1000CE628(v91);
        id v93 = v92;
        uint64_t v94 = v139;
        uint64_t v96 = v133;
        uint64_t v97 = (uint64_t)v131;
      }
      LODWORD(v136) = v148;
      sub_1000D37D0(v94, v97, type metadata accessor for VFSItem);
      sub_1000D37D0(v97, v96, type metadata accessor for VFSItem);
      uint64_t v98 = (v47 + 16) & v76;
      uint64_t v99 = v97;
      unint64_t v100 = (v75 + v98 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v101 = (v100 + 23) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v102 = (v101 + 15) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v103 = swift_allocObject();
      sub_10003D140(v99, v103 + v98);
      uint64_t v104 = (uint64_t (**)(uint64_t))(v103 + v100);
      *uint64_t v104 = sub_1000DEA50;
      v104[1] = v95;
      *(void *)(v103 + v101) = v134;
      *(void *)(v103 + v102) = v35;
      uint64_t v105 = (void *)(v103 + ((v102 + 15) & 0xFFFFFFFFFFFFFFF8));
      *uint64_t v105 = sub_1000DBCBC;
      v105[1] = v52;
      uint64_t v106 = v35;
      if (v136 == 1 && (sub_10002B7CC((uint64_t *)&unk_100AD6720), (uint64_t v107 = swift_dynamicCastClass()) != 0))
      {
        uint64_t v108 = v107;
        uint64_t v109 = swift_allocObject();
        *(void *)(v109 + 16) = sub_1000DEA50;
        *(void *)(v109 + 24) = v95;
        uint64_t v110 = v125;
        sub_10002B70C((uint64_t)v144, v125, &qword_100ACD600);
        unint64_t v111 = (*(unsigned __int8 *)(v142 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v142 + 80);
        unint64_t v112 = (v124 + v111 + 7) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v113 = swift_allocObject();
        sub_10001AE98(v110, v113 + v111, &qword_100ACD600);
        *(void *)(v113 + v112) = v108;
        uint64_t v114 = (void *)(v113 + ((v112 + 15) & 0xFFFFFFFFFFFFFFF8));
        void *v114 = sub_1000DBCD4;
        v114[1] = v103;
        swift_retain_n();
        swift_retain_n();
        swift_retain_n();
        swift_retain_n();
        swift_retain_n();
        swift_retain();
        sub_1004A8A2C((uint64_t)"evict(_:request:evictionReason:progress:completionHandler:)", 59, 2, 0, (uint64_t)FPDDomainFPFSBackend.isDeadEnd(), 0, (uint64_t)sub_1000DEB20, v109, (uint64_t)sub_1000DBCDC, v113);
        swift_release();
        swift_release();
        uint64_t v115 = v133;
      }
      else
      {
        swift_retain_n();
        swift_retain_n();
        swift_retain_n();
        uint64_t v116 = v134;
        swift_retain_n();
        uint64_t v117 = v132;
        swift_retain();
        uint64_t v118 = v52;
        uint64_t v119 = v146;
        swift_retain();
        uint64_t v115 = v133;
        sub_1000D8154(v133, v116, v106, (void (*)(uint64_t))sub_1000DBCBC, v118, v143, v117, v119);
        swift_release();
      }
      swift_release();
      swift_release();
      sub_1000D3770(v115, type metadata accessor for VFSItem);
      swift_release_n();
      swift_release_n();
      swift_release();
      swift_release();
      sub_1000D3770(v137, type metadata accessor for VFSItem);
      sub_1000B6C28(v138);

      swift_release();
      sub_10002B770((uint64_t)v144, &qword_100ACD600);
      sub_10002B770((uint64_t)v127, &qword_100ACD600);
      sub_1000D3770(v139, type metadata accessor for VFSItem);
      swift_release();
      swift_release();
      swift_release();
    }
  }
  return swift_release();
}

void sub_1000D9E20(uint64_t a1, int a2, int a3, unint64_t a4, void *a5, void (*a6)(char *, uint64_t), uint64_t a7, uint64_t a8, unint64_t a9, unsigned __int8 a10, void *a11, void (*a12)(void), uint64_t a13, uint64_t a14)
{
  uint64_t v104 = a7;
  uint64_t v110 = a6;
  uint64_t v97 = a5;
  unint64_t v115 = a4;
  int v96 = a3;
  int v108 = a2;
  uint64_t v116 = a1;
  uint64_t v15 = a13;
  uint64_t v98 = sub_10002B7CC(&qword_100ACD5F8);
  __chkstk_darwin(v98);
  uint64_t v99 = (uint64_t *)((char *)&v94 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = sub_10096B480();
  uint64_t v113 = *(void *)(v17 - 8);
  uint64_t v18 = __chkstk_darwin(v17);
  unint64_t v112 = (char *)&v94 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v94 - v20;
  uint64_t v22 = (void *)swift_allocObject();
  unint64_t v101 = a12;
  v22[2] = a12;
  v22[3] = a13;
  v22[4] = a14;
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = sub_1000DBC98;
  *(void *)(v23 + 24) = v22;
  *(void *)(v23 + 32) = a8;
  *(void *)(v23 + 40) = a9;
  int v100 = a10;
  *(unsigned char *)(v23 + 48) = a10;
  unint64_t v24 = v115;
  uint64_t v111 = v23;
  *(void *)(v23 + 56) = a11;
  swift_retain();
  uint64_t v114 = a14;
  swift_retain();
  swift_retain();
  uint64_t v105 = a8;
  swift_retain();
  unint64_t v106 = a9;
  sub_1000CE628(a9);
  id v103 = a11;
  id v25 = (id)fpfs_current_or_default_log();
  sub_10096B490();
  sub_1000CE628(v24);
  sub_1000CE628(v24);
  swift_retain();
  uint64_t v26 = sub_10096B470();
  os_log_type_t v27 = sub_10096C5A0();
  BOOL v28 = os_log_type_enabled(v26, v27);
  uint64_t v109 = v22;
  if (v28)
  {
    uint64_t v95 = v21;
    uint64_t v102 = v17;
    uint64_t v107 = a13;
    uint64_t v29 = swift_slowAlloc();
    uint64_t v94 = swift_slowAlloc();
    v119[0] = v94;
    *(_DWORD *)uint64_t v29 = 136315906;
    uint64_t v30 = v116;
    swift_beginAccess();
    unint64_t v31 = *(void **)(v30 + 32);
    uint64_t v32 = *(unsigned __int8 *)(v30 + 40);
    if (*(unsigned char *)(v30 + 41))
    {
      id v33 = v31;
      uint64_t v34 = NSFileProviderItemIdentifier.description.getter();
      unint64_t v36 = v35;
      sub_1000D30C4(v31, v32, 1);
    }
    else
    {
      uint64_t v34 = VFSItemID.parseableString.getter(*(void *)(v30 + 32), *(unsigned char *)(v30 + 40));
      unint64_t v36 = v41;
    }
    uint64_t v118 = (void (*)(void, void))sub_100719D44(v34, v36, v119);
    sub_10096C8C0();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v29 + 12) = 2080;
    if ((_BYTE)v108)
    {
      if (v108 == 1) {
        uint64_t v42 = 0x74616761706F7270;
      }
      else {
        uint64_t v42 = 0xD000000000000010;
      }
      if (v108 == 1) {
        unint64_t v43 = 0xED000053466F5465;
      }
      else {
        unint64_t v43 = 0x80000001009958D0;
      }
    }
    else
    {
      uint64_t v42 = 0xD000000000000013;
      unint64_t v43 = 0x80000001009958A0;
    }
    uint64_t v118 = (void (*)(void, void))sub_100719D44(v42, v43, v119);
    sub_10096C8C0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v29 + 22) = 2080;
    unint64_t v44 = v115;
    unint64_t v45 = sub_1005232CC(v115);
    unint64_t v47 = v46;
    sub_1000B6C28(v44);
    uint64_t v118 = (void (*)(void, void))sub_100719D44(v45, v47, v119);
    sub_10096C8C0();
    swift_bridgeObjectRelease();
    sub_1000B6C28(v44);
    *(_WORD *)(v29 + 32) = 2048;
    uint64_t v39 = (uint64_t)v110;
    uint64_t v118 = (void (*)(void, void))v110;
    sub_10096C8C0();
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "Lookup itemID %s with behavior %s request %s iteration %ld", (uint8_t *)v29, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v38 = *(void (**)(char *, uint64_t))(v113 + 8);
    uint64_t v17 = v102;
    v38(v95, v102);
    uint64_t v40 = v114;
    uint64_t v15 = v107;
  }
  else
  {
    unint64_t v37 = v115;
    sub_1000B6C28(v115);
    swift_release();
    sub_1000B6C28(v37);

    uint64_t v38 = *(void (**)(char *, uint64_t))(v113 + 8);
    v38(v21, v17);
    uint64_t v39 = (uint64_t)v110;
    uint64_t v40 = v114;
  }
  uint64_t v48 = v112;
  if (v39 < 51)
  {
    uint64_t v61 = v116;
    swift_beginAccess();
    uint64_t v62 = *(void **)(v61 + 32);
    uint64_t v63 = *(unsigned __int8 *)(v61 + 40);
    if (*(unsigned char *)(v61 + 41))
    {
      uint64_t v64 = qword_100ACC110;
      id v65 = v62;
      if (v64 != -1) {
        swift_once();
      }
      uint64_t v66 = _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
      uint64_t v68 = v67;
      if (v66 == _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0() && v68 == v69)
      {
        swift_bridgeObjectRelease_n();
        sub_1000D30C4(v62, v63, 1);
LABEL_28:
        sub_1000BC044(v115, (uint64_t)sub_1000DBCA8, v111);
LABEL_38:
        swift_release();
        swift_release();
        return;
      }
      char v71 = sub_10096D2D0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1000D30C4(v62, v63, 1);
      if (v71) {
        goto LABEL_28;
      }
    }
    else if (!v62 && v63 == 2)
    {
      goto LABEL_28;
    }
    if (((v115 >> 1) & 3 | (v115 >> 58) & 0x3C) == 0x1E)
    {
      unint64_t v72 = *(void *)((v115 & 0xFFFFFFFFFFFFFF9) + 0x10);
      unint64_t v73 = v72;
    }
    else
    {
      uint64_t v82 = swift_allocObject();
      unint64_t v83 = v115;
      *(void *)(v82 + 16) = v115;
      unint64_t v73 = v82 | 0x7000000000000004;
      unint64_t v72 = v83;
    }
    sub_1000CE628(v72);
    uint64_t v84 = swift_allocObject();
    uint64_t v85 = v111;
    *(void *)(v84 + 16) = sub_1000DBCA8;
    *(void *)(v84 + 24) = v85;
    uint64_t v86 = v104;
    *(void *)(v84 + 32) = v104;
    *(unsigned char *)(v84 + 40) = v108;
    unint64_t v88 = v115;
    uint64_t v87 = v116;
    *(void *)(v84 + 48) = v115;
    *(void *)(v84 + 56) = v87;
    char v89 = v96 & 1;
    *(unsigned char *)(v84 + 64) = v96 & 1;
    id v90 = v97;
    *(void *)(v84 + 72) = v97;
    *(void *)(v84 + 80) = v39;
    uint64_t v91 = swift_allocObject();
    *(void *)(v91 + 16) = v87;
    *(void *)(v91 + 24) = v86;
    *(unsigned char *)(v91 + 32) = v89;
    *(unsigned char *)(v91 + 33) = 0;
    *(void *)(v91 + 40) = sub_1000D310C;
    *(void *)(v91 + 48) = v84;
    *(void *)(v91 + 56) = v73;
    uint64_t v92 = swift_allocObject();
    *(void *)(v92 + 16) = sub_1000D310C;
    *(void *)(v92 + 24) = v84;
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1000CE628(v88);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    id v93 = v90;
    sub_1000CE628(v73);
    sub_1007D8110((uint64_t)"findExistingVFSItemFor(itemID:parentIsImported:bypassIsHidden:request:completionHandler:)", 89, 2, sub_1000DEB24, v92, (uint64_t)sub_1000D3128, v91);
    swift_release();
    swift_release();
    swift_release();
    sub_1000B6C28(v73);
    goto LABEL_38;
  }
  uint64_t v110 = v38;
  id v49 = (id)fpfs_current_or_default_log();
  sub_10096B490();
  unint64_t v50 = v115;
  sub_1000CE628(v115);
  sub_1000CE628(v50);
  swift_retain();
  unint64_t v51 = sub_10096B470();
  os_log_type_t v52 = sub_10096C5C0();
  if (os_log_type_enabled(v51, v52))
  {
    uint64_t v102 = v17;
    uint64_t v107 = v15;
    uint64_t v53 = swift_slowAlloc();
    uint64_t v118 = (void (*)(void, void))swift_slowAlloc();
    *(_DWORD *)uint64_t v53 = 136446466;
    uint64_t v54 = v116;
    swift_beginAccess();
    unsigned int v55 = *(void **)(v54 + 32);
    uint64_t v56 = *(unsigned __int8 *)(v54 + 40);
    if (*(unsigned char *)(v54 + 41))
    {
      id v57 = v55;
      uint64_t v58 = NSFileProviderItemIdentifier.description.getter();
      unint64_t v60 = v59;
      sub_1000D30C4(v55, v56, 1);
    }
    else
    {
      uint64_t v58 = VFSItemID.parseableString.getter(*(void *)(v54 + 32), *(unsigned char *)(v54 + 40));
      unint64_t v60 = v74;
    }
    uint64_t v117 = sub_100719D44(v58, v60, (uint64_t *)&v118);
    sub_10096C8C0();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v53 + 12) = 2082;
    unint64_t v75 = v115;
    unint64_t v76 = sub_1005232CC(v115);
    unint64_t v78 = v77;
    sub_1000B6C28(v75);
    uint64_t v117 = sub_100719D44(v76, v78, (uint64_t *)&v118);
    sub_10096C8C0();
    swift_bridgeObjectRelease();
    sub_1000B6C28(v75);
    _os_log_impl((void *)&_mh_execute_header, v51, v52, "Recursion too deep for lookup of itemID %{public}s request %{public}s", (uint8_t *)v53, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v110(v112, v102);
    uint64_t v40 = v114;
    uint64_t v15 = v107;
  }
  else
  {
    unint64_t v70 = v115;
    sub_1000B6C28(v115);
    swift_release();
    sub_1000B6C28(v70);

    v110(v48, v17);
  }
  NSString v79 = sub_10096BC00();
  id v80 = (id)FPInvalidParameterError();

  if (v80)
  {
    uint64_t v81 = (uint64_t)v99;
    *uint64_t v99 = v80;
    swift_storeEnumTagMultiPayload();
    swift_retain();
    swift_retain();
    sub_1000D8B1C(v81, v105, v106, v100, v103, v101, v15, v40);
    swift_release();
    swift_release();
    sub_10002B770(v81, &qword_100ACD5F8);
    goto LABEL_38;
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_1000B6C28(v106);

  __break(1u);
}

uint64_t sub_1000DAA08(uint64_t a1, int a2, int a3, unint64_t a4, void *a5, uint64_t a6, uint64_t a7, void (*a8)(uint64_t *), uint64_t a9, unint64_t a10, uint64_t a11)
{
  uint64_t v89 = a7;
  uint64_t v96 = a6;
  unint64_t v83 = a5;
  int v82 = a3;
  LODWORD(v94) = a2;
  uint64_t v14 = a11;
  uint64_t v84 = sub_10002B7CC(&qword_100ACD5F8);
  __chkstk_darwin(v84);
  uint64_t v85 = (void *)((char *)&v81 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = sub_10096B480();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v95 = (char *)&v81 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v81 - v20;
  uint64_t v22 = (void *)swift_allocObject();
  uint64_t v86 = a8;
  v22[2] = a8;
  v22[3] = a9;
  v22[4] = a10;
  v22[5] = a11;
  uint64_t v90 = a9;
  swift_retain();
  unint64_t v91 = a10;
  sub_1000CE628(a10);
  swift_retain();
  id v23 = (id)fpfs_current_or_default_log();
  sub_10096B490();
  sub_1000CE628(a4);
  sub_1000CE628(a4);
  swift_retain();
  unint64_t v24 = sub_10096B470();
  int v25 = sub_10096C5A0();
  if (os_log_type_enabled(v24, (os_log_type_t)v25))
  {
    int v81 = v25;
    uint64_t v87 = v17;
    uint64_t v88 = v16;
    uint64_t v92 = a11;
    id v93 = v22;
    uint64_t v26 = swift_slowAlloc();
    v99[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v26 = 136315906;
    swift_beginAccess();
    os_log_type_t v27 = *(void **)(a1 + 32);
    uint64_t v28 = *(unsigned __int8 *)(a1 + 40);
    if (*(unsigned char *)(a1 + 41))
    {
      id v29 = v27;
      uint64_t v30 = NSFileProviderItemIdentifier.description.getter();
      unint64_t v32 = v31;
      sub_1000D30C4(v27, v28, 1);
    }
    else
    {
      uint64_t v30 = VFSItemID.parseableString.getter(*(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
      unint64_t v32 = v43;
    }
    uint64_t v98 = sub_100719D44(v30, v32, v99);
    sub_10096C8C0();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v26 + 12) = 2080;
    if ((_BYTE)v94)
    {
      if (v94 == 1) {
        uint64_t v44 = 0x74616761706F7270;
      }
      else {
        uint64_t v44 = 0xD000000000000010;
      }
      if (v94 == 1) {
        unint64_t v45 = 0xED000053466F5465;
      }
      else {
        unint64_t v45 = 0x80000001009958D0;
      }
    }
    else
    {
      uint64_t v44 = 0xD000000000000013;
      unint64_t v45 = 0x80000001009958A0;
    }
    uint64_t v98 = sub_100719D44(v44, v45, v99);
    sub_10096C8C0();
    swift_bridgeObjectRelease();
    *(_WORD *)(v26 + 22) = 2080;
    unint64_t v46 = sub_1005232CC(a4);
    unint64_t v48 = v47;
    sub_1000B6C28(a4);
    uint64_t v98 = sub_100719D44(v46, v48, v99);
    sub_10096C8C0();
    swift_bridgeObjectRelease();
    sub_1000B6C28(a4);
    *(_WORD *)(v26 + 32) = 2048;
    uint64_t v49 = v96;
    uint64_t v98 = v96;
    sub_10096C8C0();
    _os_log_impl((void *)&_mh_execute_header, v24, (os_log_type_t)v81, "Lookup itemID %s with behavior %s request %s iteration %ld", (uint8_t *)v26, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v17 = v87;
    uint64_t v16 = v88;
    id v33 = *(void (**)(char *, uint64_t))(v87 + 8);
    v33(v21, v88);
    uint64_t v14 = v92;
    uint64_t v22 = v93;
    if (v49 >= 51) {
      goto LABEL_24;
    }
LABEL_5:
    swift_beginAccess();
    uint64_t v34 = *(void **)(a1 + 32);
    uint64_t v35 = *(unsigned __int8 *)(a1 + 40);
    if (*(unsigned char *)(a1 + 41))
    {
      uint64_t v36 = qword_100ACC110;
      id v37 = v34;
      uint64_t v38 = v89;
      if (v36 != -1) {
        swift_once();
      }
      uint64_t v39 = _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
      uint64_t v41 = v40;
      if (v39 == _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0() && v41 == v42)
      {
        swift_bridgeObjectRelease_n();
        sub_1000D30C4(v34, v35, 1);
LABEL_21:
        sub_1000BC044(a4, (uint64_t)sub_1000DB4EC, (uint64_t)v22);
        return swift_release();
      }
      char v61 = sub_10096D2D0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1000D30C4(v34, v35, 1);
      if (v61) {
        goto LABEL_21;
      }
    }
    else
    {
      uint64_t v38 = v89;
      if (!v34 && v35 == 2) {
        goto LABEL_21;
      }
    }
    if (((a4 >> 1) & 3 | (a4 >> 58) & 0x3C) == 0x1E)
    {
      unint64_t v62 = *(void *)((a4 & 0xFFFFFFFFFFFFFF9) + 0x10);
      unint64_t v63 = v62;
    }
    else
    {
      uint64_t v72 = swift_allocObject();
      *(void *)(v72 + 16) = a4;
      unint64_t v63 = v72 | 0x7000000000000004;
      unint64_t v62 = a4;
    }
    sub_1000CE628(v62);
    uint64_t v73 = swift_allocObject();
    *(void *)(v73 + 16) = sub_1000DB4EC;
    *(void *)(v73 + 24) = v22;
    *(void *)(v73 + 32) = v38;
    *(unsigned char *)(v73 + 40) = v94;
    *(void *)(v73 + 48) = a4;
    *(void *)(v73 + 56) = a1;
    char v74 = v82 & 1;
    *(unsigned char *)(v73 + 64) = v82 & 1;
    unint64_t v75 = v83;
    uint64_t v76 = v96;
    *(void *)(v73 + 72) = v83;
    *(void *)(v73 + 80) = v76;
    uint64_t v77 = swift_allocObject();
    *(void *)(v77 + 16) = a1;
    *(void *)(v77 + 24) = v38;
    *(unsigned char *)(v77 + 32) = v74;
    *(unsigned char *)(v77 + 33) = 0;
    *(void *)(v77 + 40) = sub_1000D310C;
    *(void *)(v77 + 48) = v73;
    *(void *)(v77 + 56) = v63;
    uint64_t v78 = swift_allocObject();
    *(void *)(v78 + 16) = sub_1000D310C;
    *(void *)(v78 + 24) = v73;
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1000CE628(a4);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    id v79 = v75;
    sub_1000CE628(v63);
    sub_1007D8110((uint64_t)"findExistingVFSItemFor(itemID:parentIsImported:bypassIsHidden:request:completionHandler:)", 89, 2, sub_1000DEB24, v78, (uint64_t)sub_1000D3128, v77);
    swift_release();
    swift_release();
    swift_release();
    sub_1000B6C28(v63);
    return swift_release();
  }
  sub_1000B6C28(a4);
  swift_release();
  sub_1000B6C28(a4);

  id v33 = *(void (**)(char *, uint64_t))(v17 + 8);
  v33(v21, v16);
  if (v96 < 51) {
    goto LABEL_5;
  }
LABEL_24:
  id v50 = (id)fpfs_current_or_default_log();
  unint64_t v51 = v95;
  sub_10096B490();
  sub_1000CE628(a4);
  sub_1000CE628(a4);
  swift_retain();
  os_log_type_t v52 = sub_10096B470();
  int v53 = sub_10096C5C0();
  if (os_log_type_enabled(v52, (os_log_type_t)v53))
  {
    LODWORD(v96) = v53;
    uint64_t v87 = v17;
    uint64_t v88 = v16;
    uint64_t v92 = v14;
    id v93 = v22;
    uint64_t v54 = swift_slowAlloc();
    uint64_t v94 = swift_slowAlloc();
    uint64_t v98 = v94;
    *(_DWORD *)uint64_t v54 = 136446466;
    swift_beginAccess();
    unsigned int v55 = *(void **)(a1 + 32);
    uint64_t v56 = *(unsigned __int8 *)(a1 + 40);
    if (*(unsigned char *)(a1 + 41))
    {
      id v57 = v55;
      uint64_t v58 = NSFileProviderItemIdentifier.description.getter();
      unint64_t v60 = v59;
      sub_1000D30C4(v55, v56, 1);
    }
    else
    {
      uint64_t v58 = VFSItemID.parseableString.getter(*(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
      unint64_t v60 = v64;
    }
    id v65 = v95;
    uint64_t v97 = sub_100719D44(v58, v60, &v98);
    sub_10096C8C0();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v54 + 12) = 2082;
    unint64_t v66 = sub_1005232CC(a4);
    unint64_t v68 = v67;
    sub_1000B6C28(a4);
    uint64_t v97 = sub_100719D44(v66, v68, &v98);
    sub_10096C8C0();
    swift_bridgeObjectRelease();
    sub_1000B6C28(a4);
    _os_log_impl((void *)&_mh_execute_header, v52, (os_log_type_t)v96, "Recursion too deep for lookup of itemID %{public}s request %{public}s", (uint8_t *)v54, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v33(v65, v88);
    uint64_t v14 = v92;
  }
  else
  {
    sub_1000B6C28(a4);
    swift_release();
    sub_1000B6C28(a4);

    v33(v51, v16);
  }
  NSString v69 = sub_10096BC00();
  id v70 = (id)FPInvalidParameterError();

  if (v70)
  {
    uint64_t v71 = (uint64_t)v85;
    *uint64_t v85 = v70;
    swift_storeEnumTagMultiPayload();
    sub_1000CDA48(v71, v86, v90, v91, v14);
    sub_10002B770(v71, &qword_100ACD5F8);
    return swift_release();
  }
  swift_release();
  sub_1000B6C28(v91);
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_1000DB4A4()
{
  swift_release();
  sub_1000B6C28(*(void *)(v0 + 32));
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1000DB4EC(uint64_t a1)
{
  return sub_1000CDA48(a1, *(void (**)(uint64_t *))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_1000DB500(uint64_t a1, unint64_t a2, int a3, void *a4, uint64_t a5, void (*a6)(void, void *), uint64_t a7)
{
  uint64_t v42 = a6;
  LODWORD(v10) = a3;
  uint64_t v13 = sub_10096B480();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = a7;
  swift_retain();
  id v17 = (id)fpfs_current_or_default_log();
  sub_10096B490();
  sub_1000CE628(a2);
  sub_1000CE628(a2);
  swift_retain();
  uint64_t v18 = sub_10096B470();
  os_log_type_t v19 = sub_10096C5A0();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v36 = v14;
    uint64_t v37 = v13;
    uint64_t v38 = a4;
    int v39 = v10;
    uint64_t v40 = a5;
    uint64_t v20 = swift_slowAlloc();
    uint64_t v35 = swift_slowAlloc();
    uint64_t v44 = v35;
    *(_DWORD *)uint64_t v20 = 136315394;
    swift_beginAccess();
    uint64_t v21 = *(void **)(a1 + 32);
    uint64_t v22 = *(unsigned __int8 *)(a1 + 40);
    if (*(unsigned char *)(a1 + 41))
    {
      id v23 = v21;
      uint64_t v24 = NSFileProviderItemIdentifier.description.getter();
      unint64_t v26 = v25;
      sub_1000D30C4(v21, v22, 1);
    }
    else
    {
      uint64_t v24 = VFSItemID.parseableString.getter(*(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
      unint64_t v26 = v29;
    }
    uint64_t v43 = sub_100719D44(v24, v26, &v44);
    sub_10096C8C0();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v20 + 12) = 2080;
    unint64_t v10 = sub_1005232CC(a2);
    unint64_t v31 = v30;
    sub_1000B6C28(a2);
    uint64_t v43 = sub_100719D44(v10, v31, &v44);
    sub_10096C8C0();
    swift_bridgeObjectRelease();
    sub_1000B6C28(a2);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Request to eviction of content of itemID %s request %s", (uint8_t *)v20, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v36 + 8))(v16, v37);
    a5 = v40;
    uint64_t v27 = v41;
    uint64_t v28 = v42;
    LOBYTE(v10) = v39;
    a4 = v38;
  }
  else
  {
    sub_1000B6C28(a2);
    swift_release();
    sub_1000B6C28(a2);

    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    uint64_t v27 = v41;
    uint64_t v28 = v42;
  }
  swift_retain();
  sub_1000CE628(a2);
  swift_retain();
  id v32 = a4;
  sub_1000D75B0(a1, 0, 0, a2, v32, 0, a5, a5, a2, v10, v32, v28, v27);

  swift_release();
  sub_1000B6C28(a2);
  swift_release();
  return swift_release();
}

uint64_t sub_1000DB8B4(uint64_t a1, unint64_t a2, int a3, void *a4, uint64_t a5, void (*a6)(void), uint64_t a7, uint64_t a8)
{
  unint64_t v45 = a6;
  LODWORD(v12) = a3;
  uint64_t v15 = sub_10096B480();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = a7;
  swift_retain();
  uint64_t v46 = a8;
  swift_retain();
  id v19 = (id)fpfs_current_or_default_log();
  sub_10096B490();
  sub_1000CE628(a2);
  sub_1000CE628(a2);
  swift_retain();
  uint64_t v20 = sub_10096B470();
  os_log_type_t v21 = sub_10096C5A0();
  if (os_log_type_enabled(v20, v21))
  {
    os_log_t v38 = v20;
    uint64_t v39 = v16;
    uint64_t v40 = v15;
    uint64_t v41 = a4;
    int v42 = v12;
    uint64_t v43 = a5;
    uint64_t v22 = swift_slowAlloc();
    uint64_t v48 = swift_slowAlloc();
    *(_DWORD *)uint64_t v22 = 136315394;
    swift_beginAccess();
    id v23 = *(void **)(a1 + 32);
    uint64_t v24 = *(unsigned __int8 *)(a1 + 40);
    if (*(unsigned char *)(a1 + 41))
    {
      id v25 = v23;
      uint64_t v26 = NSFileProviderItemIdentifier.description.getter();
      unint64_t v28 = v27;
      sub_1000D30C4(v23, v24, 1);
    }
    else
    {
      uint64_t v26 = VFSItemID.parseableString.getter(*(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
      unint64_t v28 = v31;
    }
    uint64_t v47 = sub_100719D44(v26, v28, &v48);
    sub_10096C8C0();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v22 + 12) = 2080;
    unint64_t v12 = sub_1005232CC(a2);
    unint64_t v33 = v32;
    sub_1000B6C28(a2);
    uint64_t v47 = sub_100719D44(v12, v33, &v48);
    sub_10096C8C0();
    swift_bridgeObjectRelease();
    sub_1000B6C28(a2);
    os_log_t v34 = v38;
    _os_log_impl((void *)&_mh_execute_header, v38, v21, "Request to eviction of content of itemID %s request %s", (uint8_t *)v22, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v39 + 8))(v18, v40);
    a5 = v43;
    uint64_t v29 = v44;
    unint64_t v30 = v45;
    LOBYTE(v12) = v42;
    a4 = v41;
  }
  else
  {
    sub_1000B6C28(a2);
    swift_release();
    sub_1000B6C28(a2);

    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    uint64_t v29 = v44;
    unint64_t v30 = v45;
  }
  swift_retain();
  uint64_t v35 = v46;
  swift_retain();
  sub_1000CE628(a2);
  swift_retain();
  id v36 = a4;
  sub_1000D9E20(a1, 0, 0, a2, v36, 0, a5, a5, a2, v12, v36, v30, v29, v35);

  swift_release();
  swift_release();
  sub_1000B6C28(a2);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_1000DBC98(uint64_t a1)
{
  return sub_10021BB3C(a1, *(uint64_t (**)(void))(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1000DBCC0()
{
  return swift_deallocObject();
}

uint64_t sub_1000DBCDC()
{
  return sub_1000DD6D8();
}

void *sub_1000DBCF4()
{
  return sub_1000DD308();
}

unint64_t sub_1000DBD10()
{
  unint64_t result = qword_100ADA320;
  if (!qword_100ADA320)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100ADA320);
  }
  return result;
}

uint64_t sub_1000DBD64(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 16);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  int v2 = v1 - 1;
  if (v2 < 0) {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1000DBD88(uint64_t a1)
{
  sub_1000DBE04(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void **)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192));
  return a1;
}

uint64_t sub_1000DBE04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (a3 != 1)
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000DBF10(a25);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1000DBF10(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1000DBF50(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  unint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  unint64_t v6 = *(void *)(a1 + 64);
  uint64_t v9 = *(void *)(a1 + 112);
  uint64_t v10 = *(void *)(a1 + 104);
  uint64_t v13 = *(void *)(a1 + 136);
  uint64_t v14 = *(void *)(a1 + 128);
  unint64_t v12 = *(void *)(a1 + 144);
  uint64_t v16 = *(void **)(a1 + 184);
  uint64_t v25 = *(void *)(a1 + 248);
  uint64_t v26 = *(void *)(a1 + 240);
  uint64_t v23 = *(void *)(a1 + 264);
  uint64_t v24 = *(void *)(a1 + 256);
  uint64_t v21 = *(void *)(a1 + 280);
  uint64_t v22 = *(void *)(a1 + 272);
  uint64_t v19 = *(void *)(a1 + 296);
  uint64_t v20 = *(void *)(a1 + 288);
  long long v15 = *(_OWORD *)(a1 + 304);
  uint64_t v17 = *(void *)(a1 + 352);
  uint64_t v18 = *(void *)(a1 + 344);
  uint64_t v28 = *(void *)(a1 + 376);
  uint64_t v29 = *(void *)(a1 + 368);
  unint64_t v27 = *(void *)(a1 + 384);
  unint64_t v30 = *(void **)(a1 + 424);
  char v7 = *(unsigned char *)(a1 + 120);
  char v11 = *(unsigned char *)(a1 + 360);

  sub_1000D35F4(v2, v3, v4, v5, v6);
  sub_1000D31F8(v10, v9, v7);
  sub_1000D35D8(v14, v13, v12);

  sub_1000D32B4(v26, v25, v24, v23, v22, v21, v20, v19, v15);
  sub_1000D31F8(v18, v17, v11);
  sub_1000D35D8(v29, v28, v27);
  swift_bridgeObjectRelease();

  return a1;
}

uint64_t sub_1000DC130()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

void sub_1000DC174()
{
  sub_1000CD5F0(*(void *)(v0 + 16), *(void (**)(void *))(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_1000DC184()
{
  unint64_t v1 = (int *)type metadata accessor for VFSItem(0);
  uint64_t v20 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v18 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  swift_release();
  uint64_t v19 = (v20 + 40) & ~v20;
  uint64_t v2 = v0 + v19;
  swift_bridgeObjectRelease();
  uint64_t v3 = v0 + v19 + v1[7];
  uint64_t v4 = (int *)type metadata accessor for ItemMetadata();
  uint64_t v5 = v3 + v4[7];
  uint64_t v6 = sub_10096B0E0();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  v8(v3 + v4[8], v6);
  swift_bridgeObjectRelease();
  uint64_t v9 = v3 + v4[29];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v9, 1, v6)) {
    v8(v9, v6);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = (uint64_t *)(v3 + v4[33]);
  unint64_t v11 = v10[1];
  if (v11 >> 60 != 15) {
    sub_10001E9C0(*v10, v11);
  }
  swift_bridgeObjectRelease();
  uint64_t v12 = v2 + v1[8];
  if (*(void *)(v12 + 16) != 1)
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*(void *)(v12 + 192))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v13 = v2 + v1[12];
  uint64_t v14 = sub_10002B7CC(&qword_100ACA8C0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48))(v13, 1, v14))
  {
    uint64_t v15 = sub_10096AE50();
    uint64_t v16 = *(void *)(v15 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v13, 1, v15)) {
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v13, v15);
    }
  }
  sub_1000B6C28(*(void *)(v0 + ((v18 + v19 + 7) & 0xFFFFFFFFFFFFFFF8)));

  return swift_deallocObject();
}

uint64_t sub_1000DC508(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for VFSItem(0) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (void (*)(uint64_t))v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  unint64_t v8 = *(void *)((char *)v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_1000CCA14(a1, v5, v6, v7, (void *)((char *)v1 + v4), v8);
}

uint64_t sub_1000DC5AC()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

void sub_1000DC5EC()
{
  sub_1000CA140(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned char *)(v0 + 40));
}

uint64_t sub_1000DC5FC()
{
  uint64_t v1 = sub_10096B7D0();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  swift_release();
  sub_1000B6C28(*(void *)(v0 + 56));

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

void sub_1000DC6E4()
{
  uint64_t v1 = *(void *)(sub_10096B7D0() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  sub_1000CA288(*(unsigned char **)(v0 + 16), *(void (**)(void *))(v0 + 24), *(void (**)(void))(v0 + 32), *(void (**)(void))(v0 + 40), *(unsigned __int8 *)(v0 + 48), *(void *)(v0 + 56), *(void **)(v0 + 64), v0 + v2, *(unsigned char *)(v0 + v2 + *(void *)(v1 + 64)));
}

double sub_1000DC788(uint64_t a1)
{
  *(void *)a1 = 2;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(unsigned char *)(a1 + 120) = 10;
  return result;
}

uint64_t sub_1000DC7BC()
{
  swift_release();

  return swift_deallocObject();
}

unint64_t sub_1000DC7FC()
{
  return sub_1004A96B0(*(void ***)(v0 + 24), *(unsigned __int8 *)(v0 + 32), *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 40));
}

uint64_t sub_1000DC830()
{
  sub_1000B6C28(*(void *)(v0 + 32));
  swift_release();
  swift_release();

  return swift_deallocObject();
}

void sub_1000DC878()
{
  sub_1000B04F0(*(void *)(v0 + 16), *(unsigned __int8 *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56));
}

uint64_t sub_1000DC8B0(uint64_t a1)
{
  return sub_1002B9A40(a1, *(uint64_t (**)(void, uint64_t))(v1 + 16));
}

uint64_t sub_1000DC8BC()
{
  swift_release();
  swift_release();
  sub_1000B6C28(*(void *)(v0 + 40));

  return swift_deallocObject();
}

uint64_t sub_1000DC90C(uint64_t a1)
{
  return sub_1000CB38C(a1, *(void (**)(void *))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(unsigned __int8 *)(v1 + 48), *(void **)(v1 + 56));
}

uint64_t sub_1000DC924()
{
  swift_release();
  swift_release();
  sub_1000B6C28(*(void *)(v0 + 48));
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1000DC97C(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void, void, void, void, void))
{
  return a2(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(unsigned __int8 *)(v2 + 40), *(void *)(v2 + 48), *(void *)(v2 + 56), *(unsigned __int8 *)(v2 + 64), *(void *)(v2 + 72), *(void *)(v2 + 80));
}

uint64_t sub_1000DC9C4()
{
  swift_release();
  swift_release();
  swift_release();
  sub_1000B6C28(*(void *)(v0 + 56));

  return swift_deallocObject();
}

uint64_t sub_1000DCA14(uint64_t (*a1)(void, void, void, void, void, void, void))
{
  return a1(*(void *)(v1 + 16), *(void *)(v1 + 24), *(unsigned __int8 *)(v1 + 32), *(unsigned __int8 *)(v1 + 33), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56));
}

uint64_t sub_1000DCA4C()
{
  uint64_t v1 = (int *)type metadata accessor for VFSItem(0);
  uint64_t v20 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v18 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  uint64_t v19 = (v20 + 24) & ~v20;
  uint64_t v2 = v0 + v19;
  swift_bridgeObjectRelease();
  uint64_t v3 = v0 + v19 + v1[7];
  unint64_t v4 = (int *)type metadata accessor for ItemMetadata();
  uint64_t v5 = v3 + v4[7];
  uint64_t v6 = sub_10096B0E0();
  uint64_t v7 = *(void *)(v6 - 8);
  unint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  v8(v3 + v4[8], v6);
  swift_bridgeObjectRelease();
  uint64_t v9 = v3 + v4[29];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v9, 1, v6)) {
    v8(v9, v6);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = (uint64_t *)(v3 + v4[33]);
  unint64_t v11 = v10[1];
  if (v11 >> 60 != 15) {
    sub_10001E9C0(*v10, v11);
  }
  swift_bridgeObjectRelease();
  uint64_t v12 = v2 + v1[8];
  if (*(void *)(v12 + 16) != 1)
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*(void *)(v12 + 192))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v13 = v2 + v1[12];
  uint64_t v14 = sub_10002B7CC(&qword_100ACA8C0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48))(v13, 1, v14))
  {
    uint64_t v15 = sub_10096AE50();
    uint64_t v16 = *(void *)(v15 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v13, 1, v15)) {
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v13, v15);
    }
  }
  sub_1000B6C28(*(void *)(v0 + ((v19 + v18 + 7) & 0xFFFFFFFFFFFFFFF8)));
  swift_release();

  return swift_deallocObject();
}

void sub_1000DCDEC()
{
  uint64_t v1 = *(void *)(type metadata accessor for VFSItem(0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = v2 + *(void *)(v1 + 64);
  unint64_t v4 = (v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = (v3 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = (v5 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void *)(v0 + 16);
  unint64_t v8 = *(void *)(v0 + v4);
  uint64_t v9 = (uint64_t *)(v0 + v5);
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  uint64_t v12 = *(void **)(v0 + v6);
  unsigned int v13 = *(unsigned __int8 *)(v0 + v4 + 8);

  sub_1000CC59C(v7, v0 + v2, v8, v13, v10, v11, v12);
}

uint64_t sub_1000DCEA4()
{
  uint64_t v1 = (int *)type metadata accessor for VFSItem(0);
  uint64_t v18 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v2 = v0 + ((v18 + 16) & ~v18);
  swift_bridgeObjectRelease();
  uint64_t v3 = v2 + v1[7];
  unint64_t v4 = (int *)type metadata accessor for ItemMetadata();
  uint64_t v5 = v3 + v4[7];
  uint64_t v6 = sub_10096B0E0();
  uint64_t v7 = *(void *)(v6 - 8);
  unint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  v8(v3 + v4[8], v6);
  swift_bridgeObjectRelease();
  uint64_t v9 = v3 + v4[29];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v9, 1, v6)) {
    v8(v9, v6);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = (uint64_t *)(v3 + v4[33]);
  unint64_t v11 = v10[1];
  if (v11 >> 60 != 15) {
    sub_10001E9C0(*v10, v11);
  }
  swift_bridgeObjectRelease();
  uint64_t v12 = v2 + v1[8];
  if (*(void *)(v12 + 16) != 1)
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*(void *)(v12 + 192))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v13 = v2 + v1[12];
  uint64_t v14 = sub_10002B7CC(&qword_100ACA8C0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48))(v13, 1, v14))
  {
    uint64_t v15 = sub_10096AE50();
    uint64_t v16 = *(void *)(v15 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v13, 1, v15)) {
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v13, v15);
    }
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

void sub_1000DD24C()
{
  uint64_t v1 = *(void *)(type metadata accessor for VFSItem(0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v4 = (v3 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = v0 + v2;
  uint64_t v7 = *(void (**)(void *))(v0 + v3);
  uint64_t v8 = *(void *)(v0 + v3 + 8);
  uint64_t v9 = *(void *)(v0 + v4);
  uint64_t v10 = *(void *)(v0 + v5);
  uint64_t v11 = v0 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v12 = *(void (**)(uint64_t))v11;
  uint64_t v13 = *(void *)(v11 + 8);

  sub_1000CCDC4(v6, v7, v8, v9, v10, v12, v13);
}

void *sub_1000DD308()
{
  return sub_1000CCB8C(*(void *)(v0 + 16), **(void ***)(v0 + 24), *(unsigned char *)(v0 + 32), *(BOOL **)(v0 + 40), *(void *)(v0 + 48), *(BOOL **)(v0 + 56));
}

uint64_t sub_1000DD338()
{
  uint64_t v1 = sub_10002B7CC(&qword_100ACD600);
  uint64_t v19 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v20 = v1;
  uint64_t v2 = v0 + ((v19 + 16) & ~v19);
  swift_bridgeObjectRelease();
  unint64_t v3 = (int *)type metadata accessor for VFSItem(0);
  uint64_t v4 = v2 + v3[7];
  unint64_t v5 = (int *)type metadata accessor for ItemMetadata();
  uint64_t v6 = v4 + v5[7];
  uint64_t v7 = sub_10096B0E0();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  v9(v4 + v5[8], v7);
  swift_bridgeObjectRelease();
  uint64_t v10 = v4 + v5[29];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v10, 1, v7)) {
    v9(v10, v7);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = (uint64_t *)(v4 + v5[33]);
  unint64_t v12 = v11[1];
  if (v12 >> 60 != 15) {
    sub_10001E9C0(*v11, v12);
  }
  swift_bridgeObjectRelease();
  uint64_t v13 = v2 + v3[8];
  if (*(void *)(v13 + 16) != 1)
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*(void *)(v13 + 192))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v14 = v2 + v3[12];
  uint64_t v15 = sub_10002B7CC(&qword_100ACA8C0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48))(v14, 1, v15))
  {
    uint64_t v16 = sub_10096AE50();
    uint64_t v17 = *(void *)(v16 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v14, 1, v16)) {
      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v14, v16);
    }
  }

  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1000DD6D8()
{
  uint64_t v1 = *(void *)(sub_10002B7CC(&qword_100ACD600) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1000CC328(v0 + v2, *(void *)(v0 + v3), *(uint64_t (**)(void))(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_1000DD780()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

unsigned char *sub_1000DD7C0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *double result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000DD88CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *double result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t sub_1000DD8B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 48);
}

uint64_t sub_1000DD8BC()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_getAssociatedTypeWitness();
    uint64_t result = sub_10096C890();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_1000DD9B8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = *(_DWORD *)(v9 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (v7 + v10) & ~v10;
  if (*(_DWORD *)(v9 + 84)) {
    size_t v13 = *(void *)(v9 + 64);
  }
  else {
    size_t v13 = *(void *)(v9 + 64) + 1;
  }
  uint64_t v14 = (*(unsigned char *)(v6 + 80) | *(unsigned char *)(v9 + 80));
  if (v14 > 7 || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) != 0 || v13 + v12 + 2 > 0x18)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v14 + 16) & ~v14));
    swift_retain();
  }
  else
  {
    uint64_t v18 = AssociatedTypeWitness;
    uint64_t v19 = ~v10;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    uint64_t v20 = (const void *)(((unint64_t)a2 + v11) & v19);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(v20, 1, v18))
    {
      memcpy((void *)(((unint64_t)a1 + v11) & v19), v20, v13);
    }
    else
    {
      (*(void (**)(unint64_t, const void *, uint64_t))(v9 + 16))(((unint64_t)a1 + v11) & v19, v20, v18);
      (*(void (**)(unint64_t, void, uint64_t, uint64_t))(v9 + 56))(((unint64_t)a1 + v11) & v19, 0, 1, v18);
    }
    uint64_t v21 = (unsigned char *)(v13 + (((unint64_t)a1 + v11) & v19));
    *uint64_t v21 = *((unsigned char *)v20 + v13);
    v21[1] = *((unsigned char *)v20 + v13 + 1);
  }
  return a1;
}

uint64_t sub_1000DDBCC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v3)();
  uint64_t v4 = *(void *)(v3 + 56);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v7 = (v4 + a1 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = v6;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(v7, 1, AssociatedTypeWitness);
  if (!result)
  {
    uint64_t v9 = *(uint64_t (**)(unint64_t, uint64_t))(v10 + 8);
    return v9(v7, AssociatedTypeWitness);
  }
  return result;
}

uint64_t sub_1000DDCF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = (char *)((v6 + v9 + a1) & ~v9);
  uint64_t v11 = (char *)((v6 + v9 + a2) & ~v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v11, 1, AssociatedTypeWitness))
  {
    int v12 = *(_DWORD *)(v8 + 84);
    size_t v13 = *(void *)(v8 + 64);
    if (v12) {
      size_t v14 = v13;
    }
    else {
      size_t v14 = v13 + 1;
    }
    memcpy(v10, v11, v14);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v10, v11, AssociatedTypeWitness);
    uint64_t v16 = *(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56);
    uint64_t v15 = v8 + 56;
    v16(v10, 0, 1, AssociatedTypeWitness);
    int v12 = *(_DWORD *)(v15 + 28);
    size_t v13 = *(void *)(v15 + 8);
  }
  if (v12) {
    size_t v17 = v13;
  }
  else {
    size_t v17 = v13 + 1;
  }
  uint64_t v18 = &v10[v17];
  uint64_t v19 = &v11[v17];
  char *v18 = *v19;
  v18[1] = v19[1];
  return a1;
}

uint64_t sub_1000DDE70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = v6 + v9;
  uint64_t v11 = (char *)((v6 + v9 + a1) & ~v9);
  int v12 = (char *)((v10 + a2) & ~v9);
  size_t v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48);
  int v14 = v13(v11, 1, AssociatedTypeWitness);
  int v15 = v13(v12, 1, AssociatedTypeWitness);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v12, AssociatedTypeWitness);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v11, 0, 1, AssociatedTypeWitness);
      goto LABEL_12;
    }
    int v16 = *(_DWORD *)(v8 + 84);
    size_t v17 = *(void *)(v8 + 64);
  }
  else
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 24))(v11, v12, AssociatedTypeWitness);
      goto LABEL_12;
    }
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, AssociatedTypeWitness);
    int v16 = *(_DWORD *)(v8 + 84);
    size_t v17 = *(void *)(v8 + 64);
  }
  if (v16) {
    size_t v18 = v17;
  }
  else {
    size_t v18 = v17 + 1;
  }
  memcpy(v11, v12, v18);
LABEL_12:
  if (*(_DWORD *)(v8 + 84)) {
    uint64_t v19 = *(void *)(v8 + 64);
  }
  else {
    uint64_t v19 = *(void *)(v8 + 64) + 1;
  }
  uint64_t v20 = &v11[v19];
  uint64_t v21 = &v12[v19];
  *uint64_t v20 = *v21;
  v20[1] = v21[1];
  return a1;
}

uint64_t sub_1000DE06C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = (char *)((v6 + v9 + a1) & ~v9);
  uint64_t v11 = (char *)((v6 + v9 + a2) & ~v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v11, 1, AssociatedTypeWitness))
  {
    int v12 = *(_DWORD *)(v8 + 84);
    size_t v13 = *(void *)(v8 + 64);
    if (v12) {
      size_t v14 = v13;
    }
    else {
      size_t v14 = v13 + 1;
    }
    memcpy(v10, v11, v14);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v11, AssociatedTypeWitness);
    int v16 = *(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56);
    uint64_t v15 = v8 + 56;
    v16(v10, 0, 1, AssociatedTypeWitness);
    int v12 = *(_DWORD *)(v15 + 28);
    size_t v13 = *(void *)(v15 + 8);
  }
  if (v12) {
    size_t v17 = v13;
  }
  else {
    size_t v17 = v13 + 1;
  }
  size_t v18 = &v10[v17];
  uint64_t v19 = &v11[v17];
  char *v18 = *v19;
  v18[1] = v19[1];
  return a1;
}

uint64_t sub_1000DE1EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = v6 + v9;
  uint64_t v11 = (char *)((v6 + v9 + a1) & ~v9);
  int v12 = (char *)((v10 + a2) & ~v9);
  size_t v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48);
  int v14 = v13(v11, 1, AssociatedTypeWitness);
  int v15 = v13(v12, 1, AssociatedTypeWitness);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v11, v12, AssociatedTypeWitness);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v11, 0, 1, AssociatedTypeWitness);
      goto LABEL_12;
    }
    int v16 = *(_DWORD *)(v8 + 84);
    size_t v17 = *(void *)(v8 + 64);
  }
  else
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 40))(v11, v12, AssociatedTypeWitness);
      goto LABEL_12;
    }
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, AssociatedTypeWitness);
    int v16 = *(_DWORD *)(v8 + 84);
    size_t v17 = *(void *)(v8 + 64);
  }
  if (v16) {
    size_t v18 = v17;
  }
  else {
    size_t v18 = v17 + 1;
  }
  memcpy(v11, v12, v18);
LABEL_12:
  if (*(_DWORD *)(v8 + 84)) {
    uint64_t v19 = *(void *)(v8 + 64);
  }
  else {
    uint64_t v19 = *(void *)(v8 + 64) + 1;
  }
  uint64_t v20 = &v11[v19];
  uint64_t v21 = &v12[v19];
  *uint64_t v20 = *v21;
  v20[1] = v21[1];
  return a1;
}

uint64_t sub_1000DE3E8(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = v9;
  unsigned int v11 = *(_DWORD *)(v9 + 84);
  if (v11) {
    unsigned int v12 = v11 - 1;
  }
  else {
    unsigned int v12 = 0;
  }
  if (v12 <= v7) {
    unsigned int v13 = v7;
  }
  else {
    unsigned int v13 = v12;
  }
  if (v13 <= 0xFE) {
    unsigned int v13 = 254;
  }
  uint64_t v14 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v15 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  if (!v11) {
    ++v15;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v16 = *(void *)(v6 + 64) + v14;
  if (a2 > v13)
  {
    uint64_t v17 = v15 + (v16 & ~v14) + 2;
    char v18 = 8 * v17;
    if (v17 > 3) {
      goto LABEL_14;
    }
    unsigned int v20 = ((a2 - v13 + ~(-1 << v18)) >> v18) + 1;
    if (HIWORD(v20))
    {
      int v19 = *(_DWORD *)((char *)a1 + v17);
      if (!v19) {
        goto LABEL_31;
      }
      goto LABEL_21;
    }
    if (v20 > 0xFF)
    {
      int v19 = *(unsigned __int16 *)((char *)a1 + v17);
      if (!*(unsigned __int16 *)((char *)a1 + v17)) {
        goto LABEL_31;
      }
      goto LABEL_21;
    }
    if (v20 >= 2)
    {
LABEL_14:
      int v19 = *((unsigned __int8 *)a1 + v17);
      if (!*((unsigned char *)a1 + v17)) {
        goto LABEL_31;
      }
LABEL_21:
      int v21 = (v19 - 1) << v18;
      if (v17 > 3) {
        int v21 = 0;
      }
      if (v17)
      {
        if (v17 <= 3) {
          int v22 = v17;
        }
        else {
          int v22 = 4;
        }
        switch(v22)
        {
          case 2:
            int v23 = *a1;
            break;
          case 3:
            int v23 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            int v23 = *(_DWORD *)a1;
            break;
          default:
            int v23 = *(unsigned __int8 *)a1;
            break;
        }
      }
      else
      {
        int v23 = 0;
      }
      int v29 = v13 + (v23 | v21);
      return (v29 + 1);
    }
  }
LABEL_31:
  if (v7 != v13)
  {
    unint64_t v26 = ((unint64_t)a1 + v16) & ~v14;
    if (v12 == v13)
    {
      if (v11 >= 2)
      {
        unsigned int v27 = (*(uint64_t (**)(unint64_t))(v10 + 48))(v26);
        if (v27 >= 2) {
          return v27 - 1;
        }
        else {
          return 0;
        }
      }
      return 0;
    }
    unsigned int v28 = *(unsigned __int8 *)(v26 + v15);
    if (v28 < 2) {
      return 0;
    }
    int v29 = (v28 + 2147483646) & 0x7FFFFFFF;
    return (v29 + 1);
  }
  uint64_t v24 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v6 + 48);

  return v24(a1, v7, v5);
}

void sub_1000DE6B4(unsigned char *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v31 = v8;
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  int v10 = 0;
  uint64_t v11 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v12 = v11;
  int v13 = *(_DWORD *)(v11 + 84);
  unsigned int v14 = v13 - 1;
  if (!v13) {
    unsigned int v14 = 0;
  }
  if (v14 <= v9) {
    unsigned int v15 = v9;
  }
  else {
    unsigned int v15 = v14;
  }
  uint64_t v16 = *(void *)(v8 + 64);
  uint64_t v17 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v18 = *(void *)(v11 + 64);
  if (v15 <= 0xFE) {
    unsigned int v19 = 254;
  }
  else {
    unsigned int v19 = v15;
  }
  uint64_t v20 = v16 + v17;
  uint64_t v21 = (v16 + v17) & ~v17;
  if (!v13) {
    ++v18;
  }
  size_t v22 = v18 + v21 + 2;
  if (a3 <= v19) {
    goto LABEL_19;
  }
  if (v22 <= 3)
  {
    unsigned int v23 = ((a3 - v19 + ~(-1 << (8 * v22))) >> (8 * v22)) + 1;
    if (HIWORD(v23))
    {
      int v10 = 4;
      if (v19 >= a2) {
        goto LABEL_27;
      }
      goto LABEL_20;
    }
    if (v23 >= 0x100) {
      int v10 = 2;
    }
    else {
      int v10 = v23 > 1;
    }
LABEL_19:
    if (v19 >= a2) {
      goto LABEL_27;
    }
    goto LABEL_20;
  }
  int v10 = 1;
  if (v19 >= a2)
  {
LABEL_27:
    uint64_t v27 = ~v17;
    switch(v10)
    {
      case 1:
        a1[v22] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_32;
      case 2:
        *(_WORD *)&a1[v22] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_32;
      case 3:
        goto LABEL_50;
      case 4:
        *(_DWORD *)&a1[v22] = 0;
        goto LABEL_31;
      default:
LABEL_31:
        if (a2)
        {
LABEL_32:
          if (v9 == v19)
          {
            unsigned int v28 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v31 + 56);
            v28(a1, a2, v9, v7);
          }
          else
          {
            unint64_t v29 = (unint64_t)&a1[v20] & v27;
            if (v14 == v19)
            {
              unint64_t v30 = *(void (**)(unint64_t, void))(v12 + 56);
              v30(v29, (a2 + 1));
            }
            else
            {
              *(unsigned char *)(v29 + v18) = a2 + 1;
            }
          }
        }
        break;
    }
    return;
  }
LABEL_20:
  unsigned int v24 = ~v19 + a2;
  if (v22 < 4)
  {
    int v25 = (v24 >> (8 * v22)) + 1;
    if (v22)
    {
      int v26 = v24 & ~(-1 << (8 * v22));
      bzero(a1, v22);
      if (v22 == 3)
      {
        *(_WORD *)a1 = v26;
        a1[2] = BYTE2(v26);
      }
      else if (v22 == 2)
      {
        *(_WORD *)a1 = v26;
      }
      else
      {
        *a1 = v26;
      }
    }
  }
  else
  {
    bzero(a1, v22);
    *(_DWORD *)a1 = v24;
    int v25 = 1;
  }
  switch(v10)
  {
    case 1:
      a1[v22] = v25;
      break;
    case 2:
      *(_WORD *)&a1[v22] = v25;
      break;
    case 3:
LABEL_50:
      __break(1u);
      JUMPOUT(0x1000DEA08);
    case 4:
      *(_DWORD *)&a1[v22] = v25;
      break;
    default:
      return;
  }
}

uint64_t sub_1000DEA30()
{
  return swift_getWitnessTable();
}

uint64_t sub_1000DEB30()
{
  return swift_initClassMetadata2();
}

uint64_t sub_1000DEB74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v18 = a2;
  uint64_t v5 = *v2;
  long long v6 = *(_OWORD *)(*v2 + 96);
  v17[0] = *(_OWORD *)(*v2 + 80);
  v17[1] = v6;
  uint64_t v7 = type metadata accessor for ItemReconciliation();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v9 = sub_10096C890();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v17 - v11;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 168))(a1, 1);
  if (!v3)
  {
    uint64_t v14 = v18;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 48))(v12, 1, TupleTypeMetadata2) == 1)
    {
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      uint64_t v15 = *(void *)(v7 - 8);
      uint64_t v16 = 1;
    }
    else
    {
      uint64_t v15 = *(void *)(v7 - 8);
      (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v14, v12, v7);
      uint64_t v16 = 0;
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(v14, v16, 1, v7);
  }
  return result;
}

uint64_t sub_1000DEDD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v27 = a1;
  uint64_t v24 = a2;
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 80);
  uint64_t v25 = *(void *)(*v2 + 96);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(v3 + 104);
  uint64_t v7 = *(void *)(v3 + 88);
  uint64_t v26 = AssociatedTypeWitness;
  uint64_t v28 = AssociatedTypeWitness;
  uint64_t v29 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v31 = swift_getAssociatedConformanceWitness();
  uint64_t v8 = type metadata accessor for ReconciliationID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v24 - v10;
  uint64_t v28 = v4;
  uint64_t v29 = v7;
  uint64_t AssociatedConformanceWitness = v25;
  uint64_t v31 = v6;
  uint64_t v12 = type metadata accessor for ItemReconciliation();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v14 = sub_10096C890();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v24 - v16;
  (*(void (**)(char *, uint64_t))(*(void *)(v26 - 8) + 16))(v11, v27);
  swift_storeEnumTagMultiPayload();
  uint64_t v18 = v32;
  (*(void (**)(char *, uint64_t))(*v2 + 168))(v11, 1);
  if (v18) {
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  int v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 48))(v17, 1, TupleTypeMetadata2);
  uint64_t v21 = v24;
  if (v20 == 1)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    uint64_t v22 = *(void *)(v12 - 8);
    uint64_t v23 = 1;
  }
  else
  {
    uint64_t v22 = *(void *)(v12 - 8);
    (*(void (**)(uint64_t, char *, uint64_t))(v22 + 32))(v24, v17, v12);
    uint64_t v23 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 56))(v21, v23, 1, v12);
}

uint64_t sub_1000DF200@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v38 = a2;
  uint64_t v39 = a1;
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 96);
  uint64_t v5 = *(void *)(*v2 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(v3 + 104);
  uint64_t v8 = *(void *)(v3 + 88);
  uint64_t v9 = swift_getAssociatedTypeWitness();
  uint64_t v40 = AssociatedTypeWitness;
  uint64_t v41 = v9;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v43 = swift_getAssociatedConformanceWitness();
  uint64_t v10 = type metadata accessor for ReconciliationID();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v32 - v13;
  uint64_t v35 = v8;
  uint64_t v36 = v5;
  uint64_t v40 = v5;
  uint64_t v41 = v8;
  uint64_t v15 = v12;
  uint64_t v37 = v4;
  uint64_t AssociatedConformanceWitness = v4;
  uint64_t v43 = v7;
  uint64_t v34 = v7;
  uint64_t v16 = type metadata accessor for ItemReconciliation();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v18 = sub_10096C890();
  uint64_t v33 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  int v20 = (char *)&v32 - v19;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(v14, v39, v9);
  swift_storeEnumTagMultiPayload();
  uint64_t v21 = v44;
  (*(void (**)(char *, uint64_t))(*v2 + 168))(v14, 1);
  if (v21) {
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v15);
  }
  uint64_t v23 = v16;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v15);
  int v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 48))(v20, 1, TupleTypeMetadata2);
  uint64_t v26 = v37;
  uint64_t v25 = v38;
  uint64_t v27 = v35;
  uint64_t v28 = v36;
  uint64_t v29 = v34;
  if (v24 == 1)
  {
    (*(void (**)(char *, uint64_t))(v33 + 8))(v20, v18);
    uint64_t v40 = v27;
    uint64_t v41 = v28;
    uint64_t AssociatedConformanceWitness = v29;
    uint64_t v43 = v26;
    uint64_t v30 = type metadata accessor for ItemReconciliation();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v25, 1, 1, v30);
  }
  else
  {
    sub_100827044(v23, v38);
    (*(void (**)(char *, uint64_t))(*(void *)(v23 - 8) + 8))(v20, v23);
    uint64_t v40 = v27;
    uint64_t v41 = v28;
    uint64_t AssociatedConformanceWitness = v29;
    uint64_t v43 = v26;
    uint64_t v31 = type metadata accessor for ItemReconciliation();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v25, 0, 1, v31);
  }
}

void sub_1000DF654()
{
}

void sub_1000DF6B8()
{
}

void sub_1000DF71C()
{
}

void sub_1000DF780()
{
}

void sub_1000DF7E4()
{
}

void sub_1000DF848()
{
}

void sub_1000DF8AC()
{
}

void sub_1000DF910()
{
}

void sub_1000DF974()
{
}

void sub_1000DF9D8()
{
}

void sub_1000DFA3C()
{
}

void sub_1000DFAA0()
{
}

void sub_1000DFB04()
{
}

void sub_1000DFB68()
{
}

void sub_1000DFBCC()
{
}

void sub_1000DFC30()
{
}

void sub_1000DFC94()
{
}

void sub_1000DFCF8()
{
}

void sub_1000DFD5C()
{
}

void sub_1000DFDB8()
{
}

void sub_1000DFE1C()
{
}

void sub_1000DFE80()
{
}

void sub_1000DFEE4()
{
}

void sub_1000DFF48()
{
}

void sub_1000DFFAC()
{
}

void sub_1000E0010()
{
}

void sub_1000E0074()
{
}

void sub_1000E00D8()
{
}

void sub_1000E013C()
{
}

void sub_1000E01A0()
{
}

void sub_1000E0204()
{
}

void sub_1000E0268()
{
}

void sub_1000E02CC()
{
}

void sub_1000E0330()
{
}

void sub_1000E0394()
{
}

void sub_1000E03F8()
{
}

void sub_1000E045C()
{
}

void sub_1000E04C0()
{
}

void sub_1000E0524()
{
}

void sub_1000E0588()
{
}

void sub_1000E05EC()
{
}

void sub_1000E0650()
{
}

uint64_t sub_1000E06B4(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v63 = a2;
  uint64_t v64 = a1;
  uint64_t v8 = *(void *)(*(void *)v4 + 88);
  uint64_t v9 = *(void *)(*(void *)v4 + 96);
  uint64_t v10 = *(void *)(*(void *)v4 + 104);
  uint64_t v66 = *(void *)(*(void *)v4 + 80);
  uint64_t v67 = v8;
  uint64_t v68 = v9;
  uint64_t v69 = v10;
  uint64_t v58 = type metadata accessor for ReconciliationTable.CachedEntry();
  uint64_t v53 = *(void *)(v58 - 8);
  __chkstk_darwin(v58);
  uint64_t v49 = (char **)((char *)&v49 - v11);
  uint64_t v67 = v8;
  uint64_t v65 = a4;
  uint64_t v68 = v9;
  uint64_t v69 = v10;
  uint64_t v12 = type metadata accessor for ReconciliationMutation();
  uint64_t v57 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v49 - v13;
  uint64_t v15 = sub_10096C890();
  uint64_t v16 = __chkstk_darwin(v15 - 8);
  uint64_t v18 = (char *)&v49 - v17;
  uint64_t v19 = *(void *)(a3 - 8);
  __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v49 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v55 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  int v24 = (char *)&v49 - v23;
  uint64_t v25 = sub_10096C890();
  uint64_t v26 = __chkstk_darwin(v25);
  os_log_type_t v52 = (char *)&v49 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  uint64_t v54 = v28;
  uint64_t v29 = *(void (**)(void))(v28 + 16);
  uint64_t v70 = (uint64_t)&v49 - v30;
  uint64_t v56 = v31;
  id v50 = v29;
  uint64_t v51 = v28 + 16;
  v29();
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v21, v64, a3);
  sub_10096BEF0();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  unint64_t v63 = v24;
  uint64_t v64 = AssociatedTypeWitness;
  uint64_t v33 = AssociatedConformanceWitness;
  sub_10096C8B0();
  uint64_t v34 = v57;
  uint64_t v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48);
  if (v35(v18, 1, v12) != 1)
  {
    unint64_t v59 = v35;
    uint64_t v60 = v33;
    uint64_t v61 = a3;
    uint64_t v38 = *(void (**)(char *, char *, uint64_t))(v34 + 32);
    uint64_t v36 = v34 + 32;
    uint64_t v37 = v38;
    uint64_t v39 = (void (**)(char *, uint64_t))(v36 - 24);
    while (1)
    {
      uint64_t v40 = v36;
      v37(v14, v18, v12);
      sub_1000E0D2C(v70, v62, v14);
      if (v5) {
        break;
      }
      (*v39)(v14, v12);
      sub_10096C8B0();
      uint64_t v36 = v40;
      if (v59(v18, 1, v12) == 1) {
        goto LABEL_5;
      }
    }
    (*(void (**)(char *, uint64_t))(v55 + 8))(v63, v64);
    (*v39)(v14, v12);
    uint64_t v43 = v56;
    return (*(uint64_t (**)(uint64_t, uint64_t))(v54 + 8))(v70, v43);
  }
LABEL_5:
  (*(void (**)(char *, uint64_t))(v55 + 8))(v63, v64);
  int v42 = v52;
  uint64_t v43 = v56;
  ((void (*)(char *, uint64_t, uint64_t))v50)(v52, v70, v56);
  uint64_t v44 = v53;
  uint64_t v45 = v58;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v42, 1, v58) == 1)
  {
    uint64_t v46 = *(void (**)(char *, uint64_t))(v54 + 8);
    v46(v42, v43);
    return ((uint64_t (*)(uint64_t, uint64_t))v46)(v70, v43);
  }
  uint64_t v48 = v49;
  (*(void (**)(char **, char *, uint64_t))(v44 + 32))(v49, v42, v45);
  sub_1000E24E4(v48);
  if (v5)
  {
    (*(void (**)(char **, uint64_t))(v44 + 8))(v48, v45);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v54 + 8))(v70, v43);
  }
  (*(void (**)(char **, uint64_t))(v44 + 8))(v48, v45);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v54 + 8))(v70, v43);
}

uint64_t sub_1000E0D2C(uint64_t a1, uint64_t a2, char *a3)
{
  long long v6 = *(_OWORD *)(*(void *)a2 + 96);
  v16[0] = *(_OWORD *)(*(void *)a2 + 80);
  v16[1] = v6;
  uint64_t v7 = type metadata accessor for ReconciliationTable.CachedEntry();
  uint64_t v8 = sub_10096C890();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)v16 - v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a1, v8);
  sub_1000E0F24(a3, (uint64_t)v12, (uint64_t)v14);
  if (v3) {
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  }
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v14, 0, 1, v7);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 40))(a1, v14, v8);
}

uint64_t sub_1000E0F24@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v210 = a2;
  v204 = a1;
  uint64_t v185 = a3;
  uint64_t v4 = *v3;
  uint64_t v5 = *(void *)(*v3 + 104);
  uint64_t v6 = *(void *)(*v3 + 88);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v172 = sub_10096C890();
  uint64_t v170 = *(void *)(v172 - 8);
  __chkstk_darwin(v172);
  int v175 = (char *)&v163 - v8;
  uint64_t v9 = *(void *)(v4 + 96);
  v206 = v3;
  uint64_t v10 = *(void *)(v4 + 80);
  uint64_t v11 = swift_getAssociatedTypeWitness();
  uint64_t v167 = sub_10096C890();
  uint64_t v166 = *(void *)(v167 - 8);
  __chkstk_darwin(v167);
  uint64_t v168 = (char *)&v163 - v12;
  uint64_t v214 = v10;
  uint64_t v215 = v6;
  uint64_t v216 = v9;
  uint64_t v217 = v5;
  uint64_t v174 = type metadata accessor for PersistenceTrigger();
  uint64_t v173 = *(void *)(v174 - 8);
  __chkstk_darwin(v174);
  uint64_t v169 = (char *)&v163 - v13;
  uint64_t v214 = v10;
  uint64_t v215 = v6;
  uint64_t v216 = v9;
  uint64_t v217 = v5;
  uint64_t v212 = type metadata accessor for ItemReconciliation();
  uint64_t v184 = sub_10096C890();
  uint64_t v183 = *(void *)(v184 - 8);
  __chkstk_darwin(v184);
  v187 = (char *)&v163 - v14;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v16 = swift_getAssociatedConformanceWitness();
  uint64_t v171 = v11;
  uint64_t v214 = v11;
  uint64_t v215 = AssociatedTypeWitness;
  uint64_t v176 = AssociatedTypeWitness;
  uint64_t v216 = AssociatedConformanceWitness;
  uint64_t v217 = v16;
  uint64_t v17 = type metadata accessor for ReconciliationID();
  uint64_t v180 = sub_10096C890();
  uint64_t v179 = *(void *)(v180 - 8);
  uint64_t v18 = __chkstk_darwin(v180);
  uint64_t v186 = (uint64_t)&v163 - v19;
  uint64_t v195 = v17;
  uint64_t v194 = *(void *)(v17 - 8);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v182 = (uint64_t)&v163 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v181 = (uint64_t)&v163 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v178 = (char *)&v163 - v25;
  __chkstk_darwin(v24);
  v193 = (uint64_t *)((char *)&v163 - v26);
  uint64_t v200 = v10;
  uint64_t v201 = v9;
  uint64_t v214 = v10;
  uint64_t v215 = v6;
  uint64_t v202 = v6;
  uint64_t v203 = v5;
  uint64_t v216 = v9;
  uint64_t v217 = v5;
  uint64_t v27 = (int *)type metadata accessor for ReconciliationTable.CachedEntry();
  uint64_t v28 = *((void *)v27 - 1);
  uint64_t v29 = __chkstk_darwin(v27);
  v188 = (char *)&v163 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = __chkstk_darwin(v29);
  v198 = (char **)((char *)&v163 - v32);
  __chkstk_darwin(v31);
  uint64_t v34 = (char *)&v163 - v33;
  uint64_t v35 = sub_10096C890();
  uint64_t v36 = *(char **)(v35 - 8);
  uint64_t v37 = __chkstk_darwin(v35);
  v197 = (char *)&v163 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = __chkstk_darwin(v37);
  uint64_t v41 = (char *)&v163 - v40;
  uint64_t v42 = __chkstk_darwin(v39);
  uint64_t v44 = (char *)&v163 - v43;
  uint64_t v205 = *(void *)(v212 - 8);
  uint64_t v45 = __chkstk_darwin(v42);
  v190 = (char *)&v163 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = __chkstk_darwin(v45);
  v189 = (char *)&v163 - v48;
  uint64_t v49 = __chkstk_darwin(v47);
  uint64_t v177 = (uint64_t)&v163 - v50;
  uint64_t v51 = __chkstk_darwin(v49);
  uint64_t v192 = (uint64_t)&v163 - v52;
  uint64_t v53 = __chkstk_darwin(v51);
  v207 = (char *)&v163 - v54;
  __chkstk_darwin(v53);
  v199 = (char *)&v163 - v55;
  uint64_t v56 = (void (*)(char *, uint64_t, uint64_t))*((void *)v36 + 2);
  v56(v44, v210, v35);
  v208 = v44;
  v56(v41, (uint64_t)v44, v35);
  v209 = *(uint64_t (**)(char *, uint64_t, int *))(v28 + 48);
  uint64_t v210 = v28 + 48;
  int v57 = v209(v41, 1, v27);
  uint64_t v196 = v28;
  if (v57 == 1)
  {
    uint64_t v58 = (char **)v36;
    (*((void (**)(char *, uint64_t))v36 + 1))(v41, v35);
    uint64_t v59 = v35;
  }
  else
  {
    uint64_t v58 = (char **)v36;
    uint64_t v191 = v35;
    uint64_t v60 = v28;
    (*(void (**)(char *, char *, int *))(v28 + 32))(v34, v41, v27);
    if (sub_1000F40A4(v204, (uint64_t)v27))
    {
      uint64_t v61 = *(void (**)(char *, char *, uint64_t))(v205 + 16);
      uint64_t v62 = v212;
      v61(v199, &v34[v27[13]], v212);
      v61(v207, &v34[v27[14]], v62);
      uint64_t v164 = *(uint64_t **)v34;
      LODWORD(v197) = v34[8];
      (*(void (**)(char *, int *))(v60 + 8))(v34, v27);
      unint64_t v63 = v58;
      uint64_t v64 = v208;
      uint64_t v65 = v204;
      goto LABEL_21;
    }
    (*(void (**)(char *, int *))(v28 + 8))(v34, v27);
    uint64_t v59 = v191;
  }
  uint64_t v64 = v208;
  uint64_t v66 = v197;
  v56(v197, (uint64_t)v208, v59);
  int v67 = v209(v66, 1, v27);
  uint64_t v68 = v198;
  if (v67 == 1)
  {
    uint64_t v165 = v27;
    v198 = v58;
    ((void (*)(char *, uint64_t))v58[1])(v66, v59);
    uint64_t v69 = v211;
    uint64_t v70 = v59;
  }
  else
  {
    uint64_t v70 = v59;
    uint64_t v71 = v196;
    (*(void (**)(char **, char *, int *))(v196 + 32))(v198, v66, v27);
    uint64_t v72 = v27;
    uint64_t v73 = v211;
    sub_1000E24E4(v68);
    uint64_t v69 = v73;
    unint64_t v63 = v58;
    if (v73)
    {
      (*(void (**)(char **, int *))(v71 + 8))(v68, v72);
      uint64_t v74 = v59;
      return ((uint64_t (*)(char *, uint64_t))v63[1])(v64, v74);
    }
    (*(void (**)(char **, int *))(v71 + 8))(v68, v72);
    v198 = v58;
    ((void (*)(char *, uint64_t))v58[1])(v64, v59);
    unint64_t v75 = *(void (**)(char *, uint64_t, uint64_t, int *))(v71 + 56);
    uint64_t v165 = v72;
    v75(v64, 1, 1, v72);
  }
  uint64_t v214 = v200;
  uint64_t v215 = v202;
  uint64_t v216 = v201;
  uint64_t v217 = v203;
  uint64_t v76 = type metadata accessor for ReconciliationMutation();
  uint64_t v77 = (void (*)(void, void))v193;
  uint64_t v78 = v204;
  sub_100149828(v76, (uint64_t)v193);
  uint64_t v79 = v192;
  id v80 = sub_1000E5698(v192, (uint64_t)v77);
  if (v69)
  {
    (*(void (**)(void, uint64_t))(v194 + 8))(v77, v195);
    uint64_t v74 = v70;
    unint64_t v63 = v198;
    return ((uint64_t (*)(char *, uint64_t))v63[1])(v64, v74);
  }
  char v82 = v81;
  uint64_t v164 = v80;
  uint64_t v211 = 0;
  uint64_t v191 = v70;
  uint64_t v83 = v194;
  uint64_t v84 = v77;
  uint64_t v85 = v195;
  v193 = *(uint64_t **)(v194 + 8);
  ((void (*)(void, uint64_t))v193)(v84, v195);
  uint64_t v86 = *(void (**)(uint64_t, uint64_t, uint64_t))(v205 + 32);
  v86((uint64_t)v207, v79, v212);
  if (v82)
  {
    uint64_t v88 = v76;
    uint64_t v89 = v186;
    uint64_t v65 = v78;
    sub_10014A004(v88, v186);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v83 + 48))(v89, 1, v85) == 1)
    {
      (*(void (**)(uint64_t, uint64_t))(v179 + 8))(v89, v180);
      LODWORD(v197) = 1;
      uint64_t v87 = (uint64_t)v207;
    }
    else
    {
      uint64_t v90 = (uint64_t)v178;
      (*(void (**)(void))(v83 + 32))();
      uint64_t v91 = v177;
      uint64_t v92 = v211;
      id v93 = sub_1000E5698(v177, v90);
      if (v92)
      {
        ((void (*)(uint64_t, uint64_t))v193)(v90, v85);
        (*(void (**)(char *, uint64_t))(v205 + 8))(v207, v212);
        uint64_t v74 = v191;
        unint64_t v63 = v198;
        goto LABEL_50;
      }
      uint64_t v164 = v93;
      uint64_t v211 = 0;
      LODWORD(v197) = v94 & 1;
      ((void (*)(uint64_t, uint64_t))v193)(v90, v85);
      uint64_t v87 = (uint64_t)v207;
      uint64_t v95 = v86;
      uint64_t v96 = v212;
      (*(void (**)(char *, uint64_t))(v205 + 8))(v207, v212);
      v95(v87, v91, v96);
    }
  }
  else
  {
    LODWORD(v197) = 0;
    uint64_t v87 = (uint64_t)v207;
    uint64_t v65 = v78;
  }
  uint64_t v61 = *(void (**)(char *, char *, uint64_t))(v205 + 16);
  v61(v199, (char *)v87, v212);
  unint64_t v63 = v198;
  uint64_t v64 = v208;
  uint64_t v27 = v165;
LABEL_21:
  if (v209(v64, 1, v27)) {
    uint64_t v97 = 0;
  }
  else {
    uint64_t v97 = *(void *)&v64[v27[15]];
  }
  uint64_t v218 = v97;
  uint64_t v98 = v27;
  if (v209(v64, 1, v27)) {
    uint64_t v99 = 0;
  }
  else {
    uint64_t v99 = *(void *)&v64[v27[15] + 8];
  }
  uint64_t v213 = v99;
  uint64_t v100 = (uint64_t)v207;
  uint64_t v101 = v211;
  uint64_t v102 = (char *)sub_1000E8EB4((uint64_t)v65, (uint64_t)v207, &v218, &v213);
  uint64_t v211 = v101;
  if (v101)
  {
    uint64_t v104 = *(void (**)(uint64_t, uint64_t))(v205 + 8);
    uint64_t v105 = v212;
    v104(v100, v212);
    v104((uint64_t)v199, v105);
    uint64_t v74 = v191;
    return ((uint64_t (*)(char *, uint64_t))v63[1])(v64, v74);
  }
  unsigned __int8 v106 = v103;
  v204 = v102;
  v198 = v63;
  uint64_t v214 = v200;
  uint64_t v215 = v202;
  uint64_t v216 = v201;
  uint64_t v217 = v203;
  v193 = (uint64_t *)type metadata accessor for ReconciliationMutation();
  uint64_t v107 = sub_10014A324((uint64_t)v193);
  if ((v109 & 1) == 0)
  {
    unint64_t v110 = v107;
    int64_t v111 = v108;
    if ((v197 & 1) != 0 || sub_10082B668(v212))
    {
      unint64_t v112 = (unint64_t *)&v207[*(int *)(v212 + 64)];
      *unint64_t v112 = v110;
      v112[1] = v111;
    }
    else
    {
      uint64_t v113 = (unint64_t *)&v207[*(int *)(v212 + 64)];
      unint64_t v114 = *v113;
      int64_t v115 = v113[1];
      if (v110 > *v113) {
        unint64_t v114 = v110;
      }
      if (v111 < v115) {
        int64_t v115 = v111;
      }
      *uint64_t v113 = v114;
      v113[1] = v115;
    }
  }
  uint64_t v116 = v212;
  v61(v189, v199, v212);
  v61(v190, v207, v116);
  uint64_t v117 = v218;
  uint64_t v118 = v213;
  uint64_t v119 = v208;
  uint64_t v120 = v98;
  if (v209(v208, 1, v98))
  {
    unint64_t v121 = 0;
    char v122 = -1;
  }
  else
  {
    uint64_t v123 = &v119[v98[16]];
    unint64_t v121 = *(void *)v123;
    char v122 = v123[8];
  }
  uint64_t v124 = (uint64_t)v188;
  unint64_t v125 = sub_1000E63F4(v121, v122, (uint64_t)v204, v106);
  char v127 = v126;
  int v128 = v209(v119, 1, v120);
  uint64_t v165 = v120;
  if (v128)
  {
    uint64_t v129 = (uint64_t)v187;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v205 + 56))(v187, 1, 1, v212);
  }
  else
  {
    unsigned int v130 = &v119[v120[17]];
    uint64_t v129 = (uint64_t)v187;
    (*(void (**)(char *, char *, uint64_t))(v183 + 16))(v187, v130, v184);
  }
  uint64_t v131 = v206;
  sub_1000F540C((uint64_t)v164, (char)v197, (uint64_t)v189, (uint64_t)v190, v117, v118, v125, v127, v124, v129);
  int v132 = v106;
  uint64_t v133 = v196;
  if (v132 == 1)
  {
    uint64_t v139 = v182;
    sub_100149828((uint64_t)v193, v182);
    uint64_t v140 = v211;
    (*(void (**)(uint64_t, char *))(*v131 + 208))(v139, v204);
    uint64_t v74 = v191;
    unint64_t v63 = v198;
    uint64_t v141 = (uint64_t)v207;
    if (!v140)
    {
      (*(void (**)(uint64_t, uint64_t))(v194 + 8))(v139, v195);
      uint64_t v160 = *(void (**)(uint64_t, uint64_t))(v205 + 8);
      uint64_t v161 = v141;
      uint64_t v162 = v212;
      v160(v161, v212);
      v160((uint64_t)v199, v162);
      uint64_t v148 = v185;
      uint64_t v64 = v208;
      goto LABEL_59;
    }
    (*(void (**)(uint64_t, uint64_t))(v194 + 8))(v139, v195);
    (*(void (**)(uint64_t, int *))(v133 + 8))(v124, v165);
    uint64_t v142 = *(void (**)(uint64_t, uint64_t))(v205 + 8);
    uint64_t v143 = v141;
    uint64_t v144 = v212;
    v142(v143, v212);
    v142((uint64_t)v199, v144);
LABEL_50:
    uint64_t v64 = v208;
    return ((uint64_t (*)(char *, uint64_t))v63[1])(v64, v74);
  }
  uint64_t v74 = v191;
  unint64_t v63 = v198;
  uint64_t v134 = (uint64_t)v207;
  if (v132)
  {
    uint64_t v64 = v208;
    uint64_t v145 = v199;
LABEL_52:
    uint64_t v146 = *(void (**)(uint64_t, uint64_t))(v205 + 8);
    uint64_t v147 = v212;
    v146(v134, v212);
    v146((uint64_t)v145, v147);
    uint64_t v148 = v185;
LABEL_59:
    (*(void (**)(uint64_t, uint64_t, int *))(v196 + 32))(v148, v124, v165);
    return ((uint64_t (*)(char *, uint64_t))v63[1])(v64, v74);
  }
  uint64_t v135 = v181;
  sub_100149828((uint64_t)v193, v181);
  uint64_t v136 = v211;
  (*(void (**)(uint64_t, char *))(*v131 + 216))(v135, v204);
  uint64_t v64 = v208;
  uint64_t v211 = v136;
  if (v136)
  {
    (*(void (**)(uint64_t, uint64_t))(v194 + 8))(v135, v195);
    (*(void (**)(uint64_t, int *))(v196 + 8))(v124, v165);
    uint64_t v137 = *(void (**)(uint64_t, uint64_t))(v205 + 8);
    uint64_t v138 = v212;
    v137(v134, v212);
    v137((uint64_t)v199, v138);
    return ((uint64_t (*)(char *, uint64_t))v63[1])(v64, v74);
  }
  (*(void (**)(uint64_t, uint64_t))(v194 + 8))(v135, v195);
  uint64_t v145 = v199;
  if (!sub_100827AAC(v212)) {
    goto LABEL_52;
  }
  uint64_t result = swift_weakLoadStrong();
  uint64_t v210 = result;
  if (!result)
  {
    __break(1u);
    goto LABEL_62;
  }
  uint64_t v150 = v168;
  uint64_t v151 = v199;
  (*(void (**)(char *, char *, uint64_t))(v166 + 16))(v168, v199, v167);
  uint64_t v152 = v171;
  uint64_t v153 = *(void *)(v171 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v153 + 48))(v150, 1, v171);
  uint64_t v154 = v176;
  uint64_t v155 = v175;
  uint64_t v156 = v169;
  if (result == 1)
  {
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  (*(void (**)(char *, char *, uint64_t))(v153 + 32))(v169, v150, v152);
  (*(void (**)(char *, char *, uint64_t))(v170 + 16))(v155, &v151[*(int *)(v212 + 52)], v172);
  uint64_t v157 = *(void *)(v154 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v157 + 48))(v155, 1, v154);
  if (result != 1)
  {
    uint64_t v145 = v151;
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    (*(void (**)(char *, char *, uint64_t))(v157 + 32))(&v156[*(int *)(TupleTypeMetadata2 + 48)], v155, v154);
    uint64_t v159 = v174;
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *))(*(void *)v210 + 312))(v156);
    swift_release();
    (*(void (**)(char *, uint64_t))(v173 + 8))(v156, v159);
    uint64_t v134 = (uint64_t)v207;
    uint64_t v64 = v208;
    uint64_t v124 = (uint64_t)v188;
    goto LABEL_52;
  }
LABEL_63:
  __break(1u);
  return result;
}

uint64_t sub_1000E24E4(char **a1)
{
  v413 = a1;
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 96);
  uint64_t v4 = *(void *)(*v1 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v392 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = __chkstk_darwin(AssociatedTypeWitness);
  v366 = (char *)&v339 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v342 = (char *)&v339 - v8;
  uint64_t v9 = *(void *)(v2 + 104);
  uint64_t v403 = (uint64_t)v1;
  uint64_t v10 = *(void *)(v2 + 88);
  uint64_t v378 = swift_getAssociatedTypeWitness();
  uint64_t v377 = sub_10096C890();
  uint64_t v376 = *(void *)(v377 - 8);
  uint64_t v11 = __chkstk_darwin(v377);
  v356 = (char *)&v339 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  v360 = (char *)&v339 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  v346 = (char *)&v339 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  v353 = (char *)&v339 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  v370 = (char *)&v339 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  v340 = (char *)&v339 - v22;
  __chkstk_darwin(v21);
  v350 = (char *)&v339 - v23;
  uint64_t v391 = AssociatedTypeWitness;
  uint64_t v397 = sub_10096C890();
  uint64_t v387 = *(void *)(v397 - 8);
  uint64_t v24 = __chkstk_darwin(v397);
  v374 = (char *)&v339 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __chkstk_darwin(v24);
  v354 = (char *)&v339 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  v365 = (char *)&v339 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  v344 = (char *)&v339 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  v351 = (char *)&v339 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  v371 = (char *)&v339 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  v341 = (char *)&v339 - v37;
  __chkstk_darwin(v36);
  v348 = (char *)&v339 - v38;
  uint64_t v409 = v4;
  uint64_t v410 = v10;
  uint64_t v411 = v3;
  uint64_t v412 = v9;
  uint64_t v388 = type metadata accessor for PersistenceTrigger();
  uint64_t v389 = *(void *)(v388 - 8);
  uint64_t v39 = __chkstk_darwin(v388);
  v355 = (char *)&v339 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = __chkstk_darwin(v39);
  v345 = (char *)&v339 - v42;
  uint64_t v43 = __chkstk_darwin(v41);
  v352 = (char *)&v339 - v44;
  uint64_t v45 = __chkstk_darwin(v43);
  v369 = (char *)&v339 - v46;
  uint64_t v47 = __chkstk_darwin(v45);
  v375 = (char *)&v339 - v48;
  __chkstk_darwin(v47);
  v349 = (char *)&v339 - v49;
  uint64_t v409 = v4;
  uint64_t v410 = v10;
  uint64_t v411 = v3;
  uint64_t v412 = v9;
  uint64_t v50 = (int *)type metadata accessor for ReconciliationTable.CachedEntry();
  uint64_t v405 = *((void *)v50 - 1);
  uint64_t v51 = __chkstk_darwin(v50);
  v382 = (char *)&v339 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = __chkstk_darwin(v51);
  v368 = (char *)&v339 - v54;
  uint64_t v55 = __chkstk_darwin(v53);
  v386 = (char *)&v339 - v56;
  uint64_t v57 = __chkstk_darwin(v55);
  v400 = (char *)&v339 - v58;
  uint64_t v59 = __chkstk_darwin(v57);
  v359 = (uint64_t *)((char *)&v339 - v60);
  uint64_t v61 = __chkstk_darwin(v59);
  v343 = (uint64_t *)((char *)&v339 - v62);
  __chkstk_darwin(v61);
  v347 = (uint64_t *)((char *)&v339 - v63);
  uint64_t v394 = v4;
  uint64_t v409 = v4;
  uint64_t v410 = v10;
  uint64_t v380 = v10;
  uint64_t v395 = v3;
  uint64_t v411 = v3;
  uint64_t v412 = v9;
  uint64_t v381 = v9;
  uint64_t v64 = type metadata accessor for ItemReconciliation();
  v393 = (void *)sub_10096C890();
  v399 = (unsigned char *)*(v393 - 1);
  uint64_t v65 = __chkstk_darwin(v393);
  uint64_t v401 = (uint64_t)&v339 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = __chkstk_darwin(v65);
  v363 = (char *)&v339 - v68;
  uint64_t v69 = __chkstk_darwin(v67);
  v398 = (char *)&v339 - v70;
  uint64_t v71 = __chkstk_darwin(v69);
  v358 = (uint64_t *)((char *)&v339 - v72);
  uint64_t v73 = __chkstk_darwin(v71);
  v362 = (char *)&v339 - v74;
  uint64_t v75 = __chkstk_darwin(v73);
  uint64_t v77 = (char *)&v339 - v76;
  uint64_t v78 = __chkstk_darwin(v75);
  v361 = (char *)&v339 - v79;
  uint64_t v80 = __chkstk_darwin(v78);
  v357 = (uint64_t *)((char *)&v339 - v81);
  uint64_t v82 = __chkstk_darwin(v80);
  uint64_t v84 = (char *)&v339 - v83;
  uint64_t v85 = __chkstk_darwin(v82);
  v373 = (char *)&v339 - v86;
  uint64_t v87 = *(void *)(v64 - 8);
  uint64_t v88 = __chkstk_darwin(v85);
  uint64_t v364 = (uint64_t)&v339 - ((v89 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v90 = __chkstk_darwin(v88);
  v367 = (char *)&v339 - v91;
  __chkstk_darwin(v90);
  id v93 = (char *)&v339 - v92;
  char v94 = v413;
  uint64_t v95 = (char *)v413 + v50[13];
  BOOL v383 = sub_10082B4C8(v64);
  unint64_t v406 = (unint64_t)v95;
  BOOL v385 = sub_100827AAC(v64);
  unint64_t v96 = (unint64_t)v94 + v50[14];
  BOOL v379 = sub_10082B4C8(v64);
  BOOL v97 = sub_100827AAC(v64);
  uint64_t v404 = v87;
  uint64_t v99 = *(void (**)(char *, unint64_t, uint64_t))(v87 + 16);
  uint64_t v98 = v87 + 16;
  v407 = v93;
  unint64_t v372 = v96;
  uint64_t v408 = v64;
  uint64_t v100 = v64;
  uint64_t v101 = v50;
  v390 = v99;
  v99(v93, v96, v100);
  uint64_t v102 = (uint64_t)v94 + v50[16];
  if (*(unsigned __int8 *)(v102 + 8) < 2u) {
    goto LABEL_110;
  }
  BOOL v384 = v97;
  uint64_t v103 = *(void *)v102;
  unint64_t v104 = v406;
  unsigned __int8 v106 = v399;
  i = v400;
  uint64_t v107 = (void (*)(char *, char *, uint64_t))v401;
  v396 = v101;
  switch(v103)
  {
    case 1:
      uint64_t v401 = v102;
      char v126 = v413;
      char v127 = *((unsigned char *)v413 + 8);
      uint64_t v339 = v98;
      if ((v127 & 1) == 0)
      {
        v349 = *v413;
        uint64_t v192 = v77;
        v193 = v101;
        uint64_t v194 = v408;
        v390(v77, v406, v408);
        uint64_t v195 = v404;
        uint64_t v196 = *(uint64_t **)(v404 + 56);
        v363 = (char *)(v404 + 56);
        v359 = v196;
        ((void (*)(char *, void, uint64_t, uint64_t))v196)(v77, 0, 1, v194);
        v197 = (uint64_t *)((char *)v126 + v101[15]);
        v398 = (char *)*v197;
        v373 = (char *)v197[1];
        v198 = (uint64_t *)((char *)v126 + v193[17]);
        v199 = v106;
        uint64_t v201 = (char *)*((void *)v106 + 2);
        uint64_t v200 = v106 + 16;
        uint64_t v202 = v362;
        v357 = v198;
        uint64_t v203 = v393;
        v350 = v201;
        ((void (*)(char *))v201)(v362);
        LODWORD(v195) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v195 + 48))(v202, 1, v194) == 1;
        v204 = v202;
        uint64_t v205 = v203;
        v206 = (void (*)(void (*)(char *, char *, uint64_t), void *))*((void *)v199 + 1);
        v206((void (*)(char *, char *, uint64_t))v204, v205);
        uint64_t v207 = (uint64_t)v407;
        uint64_t v209 = v402;
        uint64_t v208 = v403;
        sub_1000EC550((uint64_t)v407, v192, (uint64_t)v398, (uint64_t)v373, v195);
        if (v209)
        {
          v206((void (*)(char *, char *, uint64_t))v192, v205);
          uint64_t v124 = v408;
          uint64_t v125 = v207;
          return (*(uint64_t (**)(uint64_t, uint64_t))(v404 + 8))(v125, v124);
        }
        v398 = (char *)v197;
        v399 = v200;
        v249 = v206;
        v206((void (*)(char *, char *, uint64_t))v192, v205);
        v250 = (void (*)(char *, char *, uint64_t))v358;
        uint64_t v251 = v408;
        v252 = (void (*)(uint64_t, unint64_t, uint64_t))v390;
        v390((char *)v358, v207, v408);
        ((void (*)(void (*)(char *, char *, uint64_t), void, uint64_t, uint64_t))v359)(v250, 0, 1, v251);
        sub_1000F3424((unsigned char *)v406, v250);
        v253 = v250;
        v302 = v393;
        v249(v253, v393);
        v373 = *v413;
        LODWORD(v363) = *((unsigned __int8 *)v413 + 8);
        uint64_t v303 = (uint64_t)v367;
        v252((uint64_t)v367, v406, v251);
        uint64_t v304 = v364;
        v252(v364, v207, v251);
        uint64_t v402 = 0;
        uint64_t v305 = *(void *)v398;
        uint64_t v306 = *((void *)v398 + 1);
        uint64_t v307 = *(void *)v401;
        char v308 = *(unsigned char *)(v401 + 8);
        uint64_t v309 = (uint64_t)v361;
        ((void (*)(char *, uint64_t *, void *))v350)(v361, v357, v302);
        v337[2] = v381;
        v337[1] = v395;
        v337[0] = v380;
        uint64_t v335 = v309;
        uint64_t v336 = v394;
        v310 = v343;
        sub_1000F540C((uint64_t)v373, (char)v363, v303, v304, v305, v306, v307, v308, (uint64_t)v343, v335);
        uint64_t v311 = v402;
        char v312 = sub_1000F5580(v310);
        if (v311)
        {
          (*(void (**)(uint64_t *, int *))(v405 + 8))(v310, v396);
          uint64_t v125 = (uint64_t)v407;
          uint64_t v124 = v408;
          return (*(uint64_t (**)(uint64_t, uint64_t))(v404 + 8))(v125, v124);
        }
        uint64_t v124 = v408;
        uint64_t v101 = v396;
        uint64_t v314 = v405;
        if ((v312 & 1) == 0)
        {
          unint64_t v104 = v406;
          (*(void (**)(char *, unint64_t, char *))(*(void *)v208 + 192))(v407, v406, v349);
          uint64_t v402 = 0;
          (*(void (**)(uint64_t *, int *))(v314 + 8))(v310, v101);
          goto LABEL_93;
        }
        (*(void (**)(uint64_t *, int *))(v405 + 8))(v310, v396);
LABEL_86:
        uint64_t v125 = (uint64_t)v407;
        return (*(uint64_t (**)(uint64_t, uint64_t))(v404 + 8))(v125, v124);
      }
      uint64_t v128 = v404;
      uint64_t v129 = v398;
      uint64_t v124 = v408;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v404 + 56))(v398, 1, 1, v408);
      unsigned int v130 = (uint64_t *)((char *)v126 + v101[15]);
      uint64_t v131 = *v130;
      uint64_t v132 = v130[1];
      v357 = v130;
      uint64_t v133 = (uint64_t *)*((void *)v106 + 2);
      uint64_t v134 = v363;
      v362 = (char *)v126 + v101[17];
      uint64_t v135 = v393;
      v373 = v106 + 16;
      v358 = v133;
      ((void (*)(char *))v133)(v363);
      LODWORD(v128) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v128 + 48))(v134, 1, v124) == 1;
      uint64_t v136 = (void (*)(char *, void *))*((void *)v106 + 1);
      v136(v134, v135);
      uint64_t v125 = (uint64_t)v407;
      uint64_t v137 = v131;
      uint64_t v139 = v402;
      uint64_t v138 = v403;
      sub_1000EC550((uint64_t)v407, v129, v137, v132, v128);
      if (!v139)
      {
        v136(v129, v135);
        uint64_t v402 = (uint64_t)*v413;
        LODWORD(v399) = *((unsigned __int8 *)v413 + 8);
        v241 = (void (*)(uint64_t, uint64_t, uint64_t))v390;
        v390(v367, v406, v124);
        v241(v364, v125, v124);
        uint64_t v242 = *v357;
        uint64_t v243 = v357[1];
        uint64_t v244 = *(void *)v401;
        char v245 = *(unsigned char *)(v401 + 8);
        uint64_t v246 = (uint64_t)v361;
        ((void (*)(char *, char *, void *))v358)(v361, v362, v135);
        v337[2] = v381;
        v337[1] = v395;
        v337[0] = v380;
        uint64_t v336 = v394;
        v247 = v359;
        sub_1000F540C(v402, (char)v399, (uint64_t)v367, v364, v242, v243, v244, v245, (uint64_t)v359, v246);
        char v248 = sub_1000F5580(v247);
        uint64_t v124 = v408;
        uint64_t v101 = v396;
        uint64_t v301 = v405;
        if (v248)
        {
          (*(void (**)(uint64_t *, int *))(v405 + 8))(v247, v396);
          goto LABEL_86;
        }
        (*(void (**)(char *))(*(void *)v138 + 176))(v407);
        uint64_t v402 = 0;
        (*(void (**)(uint64_t *, int *))(v301 + 8))(v247, v101);
        unint64_t v104 = v406;
LABEL_89:
        for (i = v400; ; i = v400)
        {
LABEL_10:
          v398 = (char *)type metadata accessor for ItemReconciliationHalf();
          uint64_t v140 = (uint64_t)v407;
          char v141 = (*(unsigned char *)(v104 + *((int *)v398 + 16) + 16) != 2) ^ (v407[*((int *)v398 + 16) + 16] == 2);
          uint64_t v142 = v405;
          uint64_t v143 = v413;
          v400 = *(char **)(v405 + 16);
          uint64_t v401 = v405 + 16;
          ((void (*)(char *, char **, int *))v400)(i, v413, v101);
          if (v141)
          {
            uint64_t v144 = *(int *)(v408 + 52);
            uint64_t v145 = &i[v101[13] + v144];
            uint64_t v146 = *(int *)(type metadata accessor for ItemReconciliationHalf() + 64);
            LOBYTE(v144) = (v145[v146 + 16] != 2) ^ (*(unsigned char *)(v140 + v144 + v146 + 16) == 2);
            v399 = *(unsigned char **)(v142 + 8);
            ((void (*)(char *, int *))v399)(i, v101);
            uint64_t v147 = v386;
            char v148 = v385;
            if (v144) {
              goto LABEL_16;
            }
          }
          else
          {
            v399 = *(unsigned char **)(v142 + 8);
            ((void (*)(char *, int *))v399)(i, v101);
            uint64_t v147 = v386;
            char v148 = v385;
          }
          uint64_t Strong = swift_weakLoadStrong();
          if (Strong)
          {
            uint64_t v150 = Strong;
            uint64_t v151 = v375;
            v390(v375, v372, v408);
            uint64_t v152 = v388;
            swift_storeEnumTagMultiPayload();
            (*(void (**)(char *))(*(void *)v150 + 312))(v151);
            swift_release();
            (*(void (**)(char *, uint64_t))(v389 + 8))(v151, v152);
          }
LABEL_16:
          char v153 = v148 & v383;
          ((void (*)(char *, char **, int *))v400)(v147, v143, v101);
          if (v153)
          {
            int v154 = v147[8];
            ((void (*)(char *, int *))v399)(v147, v101);
            uint64_t v124 = v408;
            BOOL v155 = v384;
            if (v154 == 1 && (v379 || v384))
            {
LABEL_19:
              uint64_t v156 = swift_weakLoadStrong();
              uint64_t v115 = (uint64_t)v398;
              if (!v156) {
                goto LABEL_64;
              }
              uint64_t v122 = v156;
              uint64_t v157 = v371;
              uint64_t v158 = (uint64_t)v407;
              (*(void (**)(char *, char *, uint64_t))(v387 + 16))(v371, v407, v397);
              uint64_t v159 = v392;
              uint64_t v160 = v391;
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v392 + 48))(v157, 1, v391) == 1)
              {
                __break(1u);
              }
              else
              {
                uint64_t v118 = v369;
                (*(void (**)(char *, char *, uint64_t))(v159 + 32))(v369, v157, v160);
                uint64_t v123 = v370;
                (*(void (**)(char *, uint64_t, uint64_t))(v376 + 16))(v370, v158 + *(int *)(v124 + 52), v377);
                uint64_t v161 = v378;
                uint64_t v119 = *(void *)(v378 - 8);
                if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v119 + 48))(v123, 1, v378) != 1)
                {
LABEL_63:
                  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
                  (*(void (**)(char *, char *, uint64_t))(v119 + 32))(&v118[*(int *)(TupleTypeMetadata2 + 48)], v123, v161);
                  uint64_t v265 = v388;
                  swift_storeEnumTagMultiPayload();
                  (*(void (**)(char *))(*(void *)v122 + 312))(v118);
                  swift_release();
                  (*(void (**)(char *, uint64_t))(v389 + 8))(v118, v265);
                  goto LABEL_64;
                }
              }
              __break(1u);
LABEL_96:
              __break(1u);
LABEL_97:
              __break(1u);
LABEL_98:
              __break(1u);
LABEL_99:
              __break(1u);
LABEL_100:
              __break(1u);
LABEL_101:
              __break(1u);
LABEL_102:
              __break(1u);
LABEL_103:
              __break(1u);
LABEL_104:
              __break(1u);
LABEL_105:
              __break(1u);
LABEL_106:
              __break(1u);
              goto LABEL_107;
            }
          }
          else
          {
            ((void (*)(char *, int *))v399)(v147, v101);
            BOOL v155 = v384;
            uint64_t v124 = v408;
            if (v379 || v384) {
              goto LABEL_19;
            }
          }
          char v162 = v155 | ~v148;
          uint64_t v115 = (uint64_t)v398;
          if (v162) {
            goto LABEL_64;
          }
          unint64_t v163 = v406;
          int v164 = *(unsigned __int8 *)(v406 + *((int *)v398 + 14));
          if (v164 != 6)
          {
            uint64_t v165 = swift_weakLoadStrong();
            if (v165)
            {
              uint64_t v166 = (void *)v165;
              uint64_t v167 = v351;
              (*(void (**)(char *, unint64_t, uint64_t))(v387 + 16))(v351, v163, v397);
              uint64_t v168 = v392;
              uint64_t v169 = v391;
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v392 + 48))(v167, 1, v391) == 1) {
                goto LABEL_103;
              }
              LODWORD(v390) = v164;
              v393 = v166;
              uint64_t v170 = v352;
              (*(void (**)(char *, char *, uint64_t))(v168 + 32))(v352, v167, v169);
              uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
              uint64_t v172 = v378;
              uint64_t v173 = swift_getAssociatedConformanceWitness();
              uint64_t v409 = v169;
              uint64_t v410 = v172;
              uint64_t v411 = AssociatedConformanceWitness;
              uint64_t v412 = v173;
              uint64_t v174 = type metadata accessor for ReconciliationID();
              swift_storeEnumTagMultiPayload();
              int v175 = v353;
              (*(void (**)(char *, unint64_t, uint64_t))(v376 + 16))(v353, v163 + *(int *)(v408 + 52), v377);
              uint64_t v176 = *(void *)(v172 - 8);
              uint64_t v177 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v176 + 48))(v175, 1, v172);
              if (v177 == 1) {
                goto LABEL_104;
              }
              __chkstk_darwin(v177);
              strcpy((char *)v337, " otherID from to ");
              uint64_t v409 = v174;
              uint64_t v410 = sub_10096C890();
              uint64_t v411 = sub_100033BE8((uint64_t *)&unk_100AD4BE0);
              uint64_t v412 = v411;
              TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
              uint64_t v179 = &v170[TupleTypeMetadata[12]];
              uint64_t v180 = TupleTypeMetadata[16];
              v386 = (char *)TupleTypeMetadata[20];
              (*(void (**)(char *, char *, uint64_t))(v176 + 32))(v179, v175, v172);
              swift_storeEnumTagMultiPayload();
              (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v174 - 8) + 56))(v179, 0, 1, v174);
              v170[v180] = (char)v390;
              v386[(void)v170] = 6;
              uint64_t v181 = v388;
              swift_storeEnumTagMultiPayload();
              (*(void (**)(char *))(*v393 + 312))(v170);
              swift_release();
              (*(void (**)(char *, uint64_t))(v389 + 8))(v170, v181);
            }
          }
          uint64_t v182 = swift_weakLoadStrong();
          if (!v182) {
            goto LABEL_96;
          }
          __int16 v183 = (*(uint64_t (**)(uint64_t))(*(void *)v182 + 152))(v182);
          swift_release();
          uint64_t v184 = v365;
          if ((v183 & 0x4000) != 0 && v407[*(int *)(v115 + 36)] < 0)
          {
            uint64_t v259 = swift_weakLoadStrong();
            uint64_t v124 = v408;
            if (v259)
            {
              uint64_t v122 = v259;
              v260 = v344;
              unint64_t v261 = v406;
              (*(void (**)(char *, unint64_t, uint64_t))(v387 + 16))(v344, v406, v397);
              uint64_t v262 = v392;
              uint64_t v263 = v391;
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v392 + 48))(v260, 1, v391) != 1)
              {
                uint64_t v118 = v345;
                (*(void (**)(char *, char *, uint64_t))(v262 + 32))(v345, v260, v263);
                uint64_t v123 = v346;
                (*(void (**)(char *, unint64_t, uint64_t))(v376 + 16))(v346, v261 + *(int *)(v124 + 52), v377);
                uint64_t v161 = v378;
                uint64_t v119 = *(void *)(v378 - 8);
                if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v119 + 48))(v123, 1, v378) != 1) {
                  goto LABEL_63;
                }
LABEL_108:
                __break(1u);
LABEL_109:
                __break(1u);
LABEL_110:
                LODWORD(v338) = 0;
                v337[2] = 1233;
                sub_10096CE20();
                __break(1u);
                JUMPOUT(0x1000E53BCLL);
              }
LABEL_107:
              __break(1u);
              goto LABEL_108;
            }
LABEL_64:
            uint64_t v266 = *(int *)(v115 + 36);
            uint64_t v125 = (uint64_t)v407;
            unint64_t v267 = *(void *)&v407[v266];
            v268 = v413;
            if (((v267 >> 4) & 1) == ((*(unsigned char *)(v406 + v266) & 0x10) == 0))
            {
              uint64_t v269 = v387;
              v270 = v374;
              uint64_t v271 = v397;
              (*(void (**)(char *, char *, uint64_t))(v387 + 16))(v374, v407, v397);
              uint64_t v272 = v392;
              uint64_t v273 = v391;
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v392 + 48))(v270, 1, v391) == 1)
              {
                (*(void (**)(char *, uint64_t))(v269 + 8))(v270, v271);
              }
              else
              {
                v274 = v366;
                (*(void (**)(char *, char *, uint64_t))(v272 + 32))(v366, v270, v273);
                uint64_t v275 = swift_weakLoadStrong();
                if (v275)
                {
                  uint64_t v276 = v275;
                  unint64_t v406 = v267 & 0x10;
                  v277 = v274;
                  uint64_t v278 = v272;
                  uint64_t v279 = swift_getAssociatedConformanceWitness();
                  uint64_t v280 = v378;
                  uint64_t v281 = swift_getAssociatedConformanceWitness();
                  uint64_t v409 = v273;
                  uint64_t v410 = v280;
                  uint64_t v411 = v279;
                  uint64_t v412 = v281;
                  uint64_t v125 = (uint64_t)v407;
                  type metadata accessor for ReconciliationID();
                  uint64_t v282 = *(int *)(swift_getTupleTypeMetadata2() + 48);
                  v283 = v375;
                  (*(void (**)(char *, char *, uint64_t))(v278 + 16))(v375, v277, v273);
                  swift_storeEnumTagMultiPayload();
                  v283[v282] = v406 >> 4;
                  uint64_t v284 = v388;
                  swift_storeEnumTagMultiPayload();
                  (*(void (**)(char *))(*(void *)v276 + 312))(v283);
                  swift_release();
                  (*(void (**)(char *, uint64_t))(v389 + 8))(v283, v284);
                  v285 = v277;
                  uint64_t v115 = (uint64_t)v398;
                  (*(void (**)(char *, uint64_t))(v278 + 8))(v285, v273);
                }
                else
                {
                  (*(void (**)(char *, uint64_t))(v272 + 8))(v274, v273);
                }
              }
              uint64_t v124 = v408;
            }
            int v286 = *(unsigned __int8 *)(v125 + *(int *)(v115 + 56));
            v287 = v382;
            v288 = v396;
            ((void (*)(char *, char **, int *))v400)(v382, v268, v396);
            if (v286 == 6)
            {
              ((void (*)(char *, int *))v399)(v287, v288);
              return (*(uint64_t (**)(uint64_t, uint64_t))(v404 + 8))(v125, v124);
            }
            int v289 = v287[v288[13] + *(int *)(v115 + 56)];
            ((void (*)(char *, int *))v399)(v287, v288);
            if (v289 != 6) {
              return (*(uint64_t (**)(uint64_t, uint64_t))(v404 + 8))(v125, v124);
            }
            uint64_t v290 = swift_weakLoadStrong();
            if (v290)
            {
              (*(void (**)(uint64_t))(*(void *)v290 + 328))(v290);
              swift_release();
              return (*(uint64_t (**)(uint64_t, uint64_t))(v404 + 8))(v125, v124);
            }
            goto LABEL_97;
          }
          uint64_t v185 = swift_weakLoadStrong();
          if (!v185) {
            goto LABEL_98;
          }
          uint64_t v186 = v185;
          v393 = *(void **)(v387 + 16);
          ((void (*)(char *, unint64_t, uint64_t))v393)(v184, v163, v397);
          uint64_t v187 = v392;
          uint64_t v117 = (void (*)(char *, void *))(v392 + 48);
          uint64_t v188 = v391;
          v390 = *(void (**)(char *, unint64_t, uint64_t))(v392 + 48);
          if (((unsigned int (*)(char *, uint64_t, uint64_t))v390)(v184, 1, v391) == 1) {
            goto LABEL_99;
          }
          char v189 = (*(uint64_t (**)(char *))(*(void *)v186 + 536))(v184);
          swift_release();
          (*(void (**)(char *, uint64_t))(v187 + 8))(v184, v188);
          v190 = v368;
          uint64_t v191 = v396;
          ((void (*)(char *, char **, int *))v400)(v368, v413, v396);
          if (v189)
          {
            ((void (*)(char *, int *))v399)(v190, v191);
            uint64_t v124 = v408;
          }
          else
          {
            uint64_t v227 = swift_weakLoadStrong();
            uint64_t v228 = v378;
            if (!v227) {
              goto LABEL_100;
            }
            uint64_t v229 = v227;
            v230 = v396;
            v231 = v360;
            (*(void (**)(char *, char *, uint64_t))(v376 + 16))(v360, &v190[v396[13] + (uint64_t)*(int *)(v408 + 52)], v377);
            uint64_t v232 = *(void *)(v228 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v232 + 48))(v231, 1, v228) == 1) {
              goto LABEL_101;
            }
            char v233 = (*(uint64_t (**)(char *))(*(void *)v229 + 544))(v231);
            swift_release();
            ((void (*)(char *, int *))v399)(v368, v230);
            (*(void (**)(char *, uint64_t))(v232 + 8))(v231, v228);
            uint64_t v124 = v408;
            uint64_t v115 = (uint64_t)v398;
            if ((v233 & 1) == 0) {
              goto LABEL_64;
            }
          }
          uint64_t v234 = swift_weakLoadStrong();
          if (!v234) {
            goto LABEL_64;
          }
          uint64_t v122 = v234;
          v235 = v354;
          unint64_t v236 = v406;
          ((void (*)(char *, unint64_t, uint64_t))v393)(v354, v406, v397);
          uint64_t v102 = v391;
          if (((unsigned int (*)(char *, uint64_t, uint64_t))v390)(v235, 1, v391) == 1) {
            goto LABEL_102;
          }
          uint64_t v118 = v355;
          (*(void (**)(char *, char *, uint64_t))(v392 + 32))(v355, v235, v102);
          uint64_t v123 = v356;
          (*(void (**)(char *, unint64_t, uint64_t))(v376 + 16))(v356, v236 + *(int *)(v124 + 52), v377);
          uint64_t v161 = v378;
          uint64_t v119 = *(void *)(v378 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v119 + 48))(v123, 1, v378) != 1) {
            goto LABEL_63;
          }
          __break(1u);
LABEL_53:
          uint64_t v402 = v115;
          uint64_t v237 = v102;
          v117(v118, v393);
          v238 = (void (*)(char *, char *, uint64_t))v357;
          uint64_t v239 = v408;
          v390((char *)v357, v119, v408);
          ((void (*)(void (*)(char *, char *, uint64_t), void, uint64_t, uint64_t))v363)(v238, 0, 1, v239);
          unint64_t v240 = v406;
          sub_1000F3424((unsigned char *)v406, v238);
          if (v123)
          {
            v117((char *)v238, v393);
            uint64_t v125 = v119;
            uint64_t v124 = v239;
            return (*(uint64_t (**)(uint64_t, uint64_t))(v404 + 8))(v125, v124);
          }
          v291 = v393;
          v117((char *)v238, v393);
          uint64_t v401 = (uint64_t)*v413;
          LODWORD(v399) = *((unsigned __int8 *)v413 + 8);
          v292 = (void (*)(uint64_t, uint64_t, uint64_t))v390;
          v390(v367, v240, v239);
          uint64_t v293 = v364;
          v292(v364, v119, v239);
          uint64_t v294 = *v358;
          uint64_t v295 = v358[1];
          uint64_t v296 = *(void *)v237;
          char v297 = *(unsigned char *)(v237 + 8);
          uint64_t v298 = (uint64_t)v361;
          ((void (*)(char *, char *, void *))v359)(v361, v362, v291);
          v337[2] = v381;
          v337[1] = v395;
          v337[0] = v380;
          uint64_t v335 = v298;
          uint64_t v336 = v394;
          v299 = v347;
          sub_1000F540C(v401, (char)v399, (uint64_t)v367, v293, v294, v295, v296, v297, (uint64_t)v347, v335);
          char v300 = sub_1000F5580(v299);
          uint64_t v124 = v408;
          uint64_t v101 = v396;
          uint64_t v313 = v405;
          if (v300)
          {
            (*(void (**)(uint64_t *, int *))(v405 + 8))(v347, v396);
            goto LABEL_86;
          }
          unint64_t v104 = v406;
          (*(void (**)(char *, unint64_t, char *))(*(void *)v122 + 192))(v407, v406, v350);
          uint64_t v402 = 0;
          (*(void (**)(uint64_t *, int *))(v313 + 8))(v347, v101);
LABEL_93:
          ;
        }
      }
      v136(v129, v135);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v404 + 8))(v125, v124);
    case 2:
      if ((_BYTE)v413[1]) {
        goto LABEL_10;
      }
      uint64_t v339 = v98;
      v398 = *v413;
      uint64_t v124 = v408;
      BOOL v210 = sub_100827AAC(v408);
      uint64_t v212 = v402;
      uint64_t v211 = v403;
      if (!v210) {
        goto LABEL_44;
      }
      uint64_t v213 = swift_weakLoadStrong();
      if (!v213) {
        goto LABEL_44;
      }
      uint64_t v214 = v213;
      uint64_t v215 = v348;
      uint64_t v216 = (uint64_t)v407;
      (*(void (**)(char *, char *, uint64_t))(v387 + 16))(v348, v407, v397);
      uint64_t v217 = v392;
      uint64_t v218 = v391;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v392 + 48))(v215, 1, v391) == 1) {
        goto LABEL_105;
      }
      v219 = v349;
      (*(void (**)(char *, char *, uint64_t))(v217 + 32))(v349, v215, v218);
      v220 = v350;
      (*(void (**)(char *, uint64_t, uint64_t))(v376 + 16))(v350, v216 + *(int *)(v408 + 52), v377);
      uint64_t v221 = v378;
      uint64_t v222 = *(void *)(v378 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v222 + 48))(v220, 1, v378) == 1) {
        goto LABEL_106;
      }
      uint64_t v223 = swift_getTupleTypeMetadata2();
      (*(void (**)(char *, char *, uint64_t))(v222 + 32))(&v219[*(int *)(v223 + 48)], v220, v221);
      uint64_t v224 = v388;
      swift_storeEnumTagMultiPayload();
      (*(void (**)(char *))(*(void *)v214 + 312))(v219);
      swift_release();
      (*(void (**)(char *, uint64_t))(v389 + 8))(v219, v224);
      uint64_t v124 = v408;
      uint64_t v107 = (void (*)(char *, char *, uint64_t))v401;
      uint64_t v212 = v402;
LABEL_44:
      (*(void (**)(void (*)(char *, char *, uint64_t), uint64_t, uint64_t, uint64_t))(v404 + 56))(v107, 1, 1, v124);
      unint64_t v104 = v406;
      uint64_t v225 = v212;
      sub_1000F3424((unsigned char *)v406, v107);
      uint64_t v226 = v397;
      if (v225)
      {
        (*((void (**)(void (*)(char *, char *, uint64_t), void *))v106 + 1))(v107, v393);
        uint64_t v125 = (uint64_t)v407;
        return (*(uint64_t (**)(uint64_t, uint64_t))(v404 + 8))(v125, v124);
      }
      (*((void (**)(void (*)(char *, char *, uint64_t), void *))v106 + 1))(v107, v393);
      (*(void (**)(unint64_t, char *, uint64_t))(*(void *)v211 + 200))(v104, v398, 1);
      uint64_t v402 = 0;
      uint64_t v254 = *(int *)(type metadata accessor for ItemReconciliationHalf() + 56);
      if (*(unsigned char *)(v104 + v254) != 6)
      {
        uint64_t v255 = v387;
        v256 = v341;
        (*(void (**)(char *, unint64_t, uint64_t))(v387 + 16))(v341, v104, v226);
        uint64_t v257 = v392;
        uint64_t v258 = v391;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v392 + 48))(v256, 1, v391) == 1)
        {
          (*(void (**)(char *, uint64_t))(v255 + 8))(v256, v226);
          i = v400;
          unint64_t v104 = v406;
          goto LABEL_10;
        }
        v315 = v342;
        (*(void (**)(char *, char *, uint64_t))(v257 + 32))(v342, v256, v258);
        uint64_t v316 = swift_weakLoadStrong();
        if (!v316) {
          goto LABEL_109;
        }
        uint64_t v317 = v316;
        uint64_t v401 = (uint64_t)&v339;
        __chkstk_darwin(v316);
        strcpy((char *)v337, " otherID from to ");
        uint64_t v318 = swift_getAssociatedConformanceWitness();
        uint64_t v319 = v378;
        uint64_t v320 = swift_getAssociatedConformanceWitness();
        uint64_t v409 = v258;
        uint64_t v410 = v319;
        uint64_t v411 = v318;
        uint64_t v412 = v320;
        uint64_t v409 = type metadata accessor for ReconciliationID();
        uint64_t v410 = sub_10096C890();
        uint64_t v411 = sub_100033BE8((uint64_t *)&unk_100AD4BE0);
        uint64_t v412 = v411;
        v321 = (int *)swift_getTupleTypeMetadata();
        v322 = v375;
        v398 = &v375[v321[12]];
        v399 = (unsigned char *)v321[16];
        uint64_t v401 = v321[20];
        (*(void (**)(char *, char *, uint64_t))(v392 + 16))(v375, v315, v258);
        uint64_t v409 = v258;
        uint64_t v410 = v319;
        uint64_t v411 = v318;
        uint64_t v412 = v320;
        uint64_t v323 = type metadata accessor for ReconciliationID();
        swift_storeEnumTagMultiPayload();
        uint64_t v324 = v376;
        v325 = v340;
        uint64_t v326 = v377;
        uint64_t v327 = (*(uint64_t (**)(char *, unint64_t, uint64_t))(v376 + 16))(v340, v406 + *(int *)(v408 + 52), v377);
        __chkstk_darwin(v327);
        v337[0] = v394;
        v337[1] = v380;
        v337[2] = v395;
        uint64_t v338 = v381;
        uint64_t v328 = v402;
        sub_100827804((void (*)(char *, char *))sub_10010EB28, (uint64_t)&v335, (uint64_t)&type metadata for Never, v323, v329, (uint64_t)v398);
        uint64_t v402 = v328;
        uint64_t v330 = v324;
        unint64_t v331 = v406;
        (*(void (**)(char *, uint64_t))(v330 + 8))(v325, v326);
        v399[(void)v322] = *(unsigned char *)(v331 + v254);
        v322[v401] = 6;
        uint64_t v332 = v388;
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *))(*(void *)v317 + 312))(v322);
        swift_release();
        v333 = v322;
        unint64_t v104 = v331;
        (*(void (**)(char *, uint64_t))(v389 + 8))(v333, v332);
        (*(void (**)(char *, uint64_t))(v392 + 8))(v342, v258);
        uint64_t v101 = v396;
      }
      goto LABEL_89;
    case 3:
      goto LABEL_10;
    default:
      uint64_t v108 = v413;
      if ((_BYTE)v413[1]) {
        goto LABEL_10;
      }
      v350 = *v413;
      uint64_t v109 = (uint64_t)v373;
      uint64_t v110 = v408;
      v390(v373, v406, v408);
      int64_t v111 = *(char **)(v404 + 56);
      v398 = (char *)(v404 + 56);
      v363 = v111;
      ((void (*)(uint64_t, void, uint64_t, uint64_t))v111)(v109, 0, 1, v110);
      unint64_t v112 = (uint64_t *)((char *)v108 + v101[15]);
      uint64_t v401 = *v112;
      uint64_t v339 = v98;
      v358 = v112;
      uint64_t v113 = v112[1];
      uint64_t v115 = (uint64_t)(v106 + 16);
      unint64_t v114 = (uint64_t *)*((void *)v106 + 2);
      v362 = (char *)v108 + v101[17];
      uint64_t v116 = v393;
      v359 = v114;
      ((void (*)(char *))v114)(v84);
      LODWORD(v109) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v404 + 48))(v84, 1, v110) == 1;
      uint64_t v117 = (void (*)(char *, void *))*((void *)v106 + 1);
      uint64_t v118 = v373;
      v117(v84, v116);
      uint64_t v119 = (uint64_t)v407;
      uint64_t v120 = v402;
      int v121 = v109;
      uint64_t v122 = v403;
      sub_1000EC550((uint64_t)v407, v118, v401, v113, v121);
      uint64_t v123 = (char *)v120;
      if (!v120) {
        goto LABEL_53;
      }
      v117(v118, v393);
      uint64_t v124 = v408;
      uint64_t v125 = v119;
      return (*(uint64_t (**)(uint64_t, uint64_t))(v404 + 8))(v125, v124);
  }
}

uint64_t sub_1000E53CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v7 = *(_OWORD *)(*(void *)v3 + 96);
  v14[0] = *(_OWORD *)(*(void *)v3 + 80);
  v14[1] = v7;
  uint64_t v8 = type metadata accessor for ReconciliationTable.CachedEntry();
  uint64_t v9 = sub_10096C890();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v14 - v11;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))((char *)v14 - v11, 1, 1, v8);
  sub_1000E06B4(a1, v12, a2, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

void sub_1000E553C()
{
}

void sub_1000E55A0()
{
}

uint64_t sub_1000E5604()
{
  swift_weakDestroy();
  return v0;
}

uint64_t sub_1000E5624()
{
  swift_weakDestroy();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ReconciliationTable()
{
  return swift_getGenericMetadata();
}

uint64_t sub_1000E5674()
{
  swift_weakInit();
  return v0;
}

uint64_t *sub_1000E5698(uint64_t a1, uint64_t a2)
{
  uint64_t v41 = (char *)a1;
  uint64_t v4 = *v2;
  long long v5 = *(_OWORD *)(*v2 + 96);
  long long v42 = *(_OWORD *)(*v2 + 80);
  long long v43 = v5;
  uint64_t v39 = type metadata accessor for ItemReconciliation();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v7 = sub_10096C890();
  uint64_t v38 = *(void *)(v7 - 8);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v34 - v9;
  uint64_t v40 = TupleTypeMetadata2;
  uint64_t v37 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v34 - v15;
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = v44;
  (*(void (**)(uint64_t, uint64_t))(v4 + 168))(a2, 1);
  if (!v19)
  {
    uint64_t v35 = v16;
    uint64_t v36 = v13;
    uint64_t v44 = a2;
    uint64_t v21 = v38;
    uint64_t v20 = v39;
    uint64_t v22 = v40;
    int v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v37 + 48))(v10, 1, v40);
    if (v23 == 1)
    {
      (*(void (**)(char *, uint64_t))(v21 + 8))(v10, v7);
      sub_1000E5A18(v44, (uint64_t)v41);
      return 0;
    }
    else
    {
      uint64_t v24 = *(int *)(v22 + 48);
      LODWORD(v44) = v23;
      uint64_t v25 = v20;
      uint64_t v26 = *(void *)(v20 - 8);
      uint64_t v27 = v26;
      uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v26 + 32);
      uint64_t v38 = v26 + 32;
      v28(v18, v10, v25);
      uint64_t v2 = *(uint64_t **)&v10[v24];
      *(void *)&v18[v24] = v2;
      uint64_t v29 = *(int *)(v22 + 48);
      uint64_t v30 = v35;
      (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v35, v18, v25);
      *(void *)&v30[v29] = v2;
      v28(v41, v30, v25);
      uint64_t v31 = *(int *)(v22 + 48);
      uint64_t v32 = v36;
      v28(v36, v18, v25);
      *(void *)&v32[v31] = v2;
      (*(void (**)(char *, uint64_t))(v27 + 8))(v32, v25);
    }
  }
  return v2;
}

uint64_t sub_1000E5A18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v34 = a1;
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 104);
  uint64_t v6 = *(void *)(*v2 + 88);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v33 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v35 = (char *)&v30 - v8;
  uint64_t v9 = *(void *)(v4 + 96);
  uint64_t v10 = *(void *)(v4 + 80);
  uint64_t v11 = swift_getAssociatedTypeWitness();
  uint64_t v32 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v31 = (char *)&v30 - v12;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v14 = swift_getAssociatedConformanceWitness();
  uint64_t v36 = v11;
  uint64_t v37 = AssociatedTypeWitness;
  uint64_t v38 = AssociatedConformanceWitness;
  uint64_t v39 = v14;
  uint64_t v15 = type metadata accessor for ReconciliationID();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v30 - v17;
  sub_100827380(v10, v6, v9, v5, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v34, v15);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v19 = v33;
    uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v33 + 32);
    v20(v35, v18, AssociatedTypeWitness);
    uint64_t v36 = v10;
    uint64_t v37 = v6;
    uint64_t v38 = v9;
    uint64_t v39 = v5;
    uint64_t v21 = a2 + *(int *)(type metadata accessor for ItemReconciliation() + 52);
    uint64_t v22 = type metadata accessor for ItemReconciliationHalf();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v22 - 8) + 8))(v21, v22);
    sub_1008275F4(v21);
    uint64_t v23 = sub_10096C890();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v23 - 8) + 8))(v21, v23);
    v20((char *)v21, v35, AssociatedTypeWitness);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v19 + 56))(v21, 0, 1, AssociatedTypeWitness);
  }
  else
  {
    uint64_t v26 = v31;
    uint64_t v25 = v32;
    uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v32 + 32);
    v27(v31, v18, v11);
    uint64_t v28 = type metadata accessor for ItemReconciliationHalf();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v28 - 8) + 8))(a2, v28);
    sub_1008275F4(a2);
    uint64_t v29 = sub_10096C890();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v29 - 8) + 8))(a2, v29);
    v27((char *)a2, v26, v11);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v25 + 56))(a2, 0, 1, v11);
  }
}

uint64_t sub_1000E5ECC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v42 = a2;
  uint64_t v5 = *v2;
  uint64_t v6 = type metadata accessor for ItemMetadata();
  __chkstk_darwin(v6 - 8);
  uint64_t v38 = (uint64_t)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(v5 + 96);
  uint64_t v40 = *(void *)(v5 + 80);
  uint64_t v41 = v8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = sub_10096C890();
  uint64_t v34 = *(void *)(v10 - 8);
  uint64_t v35 = v10;
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v36 = (char *)&v33 - v12;
  uint64_t v39 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v37 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v33 - v15;
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 64);
  uint64_t v19 = swift_checkMetadataState();
  if (v18(v19, AssociatedConformanceWitness))
  {
    uint64_t result = swift_weakLoadStrong();
    if (result)
    {
      swift_retain();
      swift_release();
      sub_10085378C();
LABEL_7:
      swift_release();
      uint64_t v21 = v39;
LABEL_8:
      uint64_t v22 = (uint64_t)v37;
      (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v37, v16, AssociatedTypeWitness);
      uint64_t v23 = type metadata accessor for ItemState();
      uint64_t v24 = (uint64_t *)(a1 + *(int *)(v23 + 36));
      uint64_t v25 = *v24;
      uint64_t v26 = v24[1];
      uint64_t v27 = v38;
      sub_10010DA98(a1 + *(int *)(v23 + 40), v38);
      swift_getAssociatedConformanceWitness();
      uint64_t v28 = v42;
      sub_1005E4708(v22, v25, v26, v27, AssociatedTypeWitness, v42);
      uint64_t v29 = type metadata accessor for ItemState();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v28, 0, 1, v29);
      return swift_bridgeObjectRetain();
    }
    __break(1u);
    goto LABEL_15;
  }
  if ((*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 72))(v19, AssociatedConformanceWitness))
  {
    uint64_t result = swift_weakLoadStrong();
    if (result)
    {
      swift_retain();
      swift_release();
      sub_1008537D0();
      goto LABEL_7;
    }
LABEL_15:
    __break(1u);
    return result;
  }
  uint64_t v30 = v36;
  uint64_t v31 = v43;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*v3 + 152))(a1);
  if (!v31)
  {
    uint64_t v21 = v39;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v30, 1, AssociatedTypeWitness) == 1)
    {
      (*(void (**)(char *, uint64_t))(v34 + 8))(v30, v35);
      swift_getAssociatedConformanceWitness();
      uint64_t v32 = type metadata accessor for ItemState();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v42, 1, 1, v32);
    }
    uint64_t v43 = 0;
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v16, v30, AssociatedTypeWitness);
    goto LABEL_8;
  }
  return result;
}

unint64_t sub_1000E63F4(unint64_t result, char a2, uint64_t a3, unsigned __int8 a4)
{
  if (a2 == -1 || a2 == 2 && result == 3)
  {
    if ((a4 & 0xFE) != 0) {
      return a3;
    }
    else {
      return 3;
    }
  }
  else if (a4 >= 2u)
  {
    if (a4 != 2)
    {
LABEL_18:
      sub_10096CE20();
      __break(1u);
      JUMPOUT(0x1000E6518);
    }
    switch(a3)
    {
      case 0:
        if (a2 != 2 || result >= 2) {
          goto LABEL_18;
        }
        return result;
      case 1:
        if (a2 != 2 || result >= 2) {
          goto LABEL_18;
        }
        uint64_t result = 1;
        break;
      case 2:
        return 2;
      case 3:
        return result;
      default:
        goto LABEL_18;
    }
  }
  return result;
}

uint64_t sub_1000E6528(uint64_t a1, uint64_t a2, void *a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v356 = a8;
  uint64_t v332 = a7;
  uint64_t v308 = a6;
  uint64_t v347 = a5;
  int v300 = a4;
  uint64_t v339 = a3;
  uint64_t v353 = a1;
  uint64_t v354 = a2;
  uint64_t v10 = (void *)*v9;
  uint64_t v313 = sub_10096B480();
  uint64_t v312 = *(void *)(v313 - 8);
  __chkstk_darwin(v313);
  uint64_t v311 = &v299[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = (ValueMetadata *)v10[12];
  uint64_t v13 = v10[10];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v307 = sub_10096C890();
  uint64_t v306 = *(void *)(v307 - 8);
  uint64_t v15 = __chkstk_darwin(v307);
  uint64_t v305 = &v299[-v16];
  uint64_t v309 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(v15);
  uint64_t v301 = &v299[-v17];
  uint64_t v18 = (ValueMetadata *)v10[13];
  v348 = v9;
  uint64_t v19 = v10[11];
  uint64_t v20 = swift_getAssociatedTypeWitness();
  uint64_t v331 = sub_10096C890();
  uint64_t v315 = *(void *)(v331 - 8);
  uint64_t v21 = __chkstk_darwin(v331);
  uint64_t v314 = &v299[-v22];
  uint64_t v316 = *(void *)(v20 - 8);
  __chkstk_darwin(v21);
  v302 = &v299[-v23];
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v25 = swift_getAssociatedConformanceWitness();
  uint64_t v310 = AssociatedTypeWitness;
  uint64_t v358 = AssociatedTypeWitness;
  uint64_t v359 = v20;
  uint64_t v317 = v20;
  v360 = (ValueMetadata *)AssociatedConformanceWitness;
  v361 = (ValueMetadata *)v25;
  uint64_t v346 = type metadata accessor for ReconciliationID();
  uint64_t v343 = *(void *)(v346 - 8);
  uint64_t v26 = __chkstk_darwin(v346);
  uint64_t v318 = &v299[-((v27 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v26);
  uint64_t v328 = &v299[-v28];
  uint64_t v326 = v13;
  uint64_t v358 = v13;
  uint64_t v359 = v19;
  uint64_t v324 = v19;
  uint64_t v327 = v12;
  v360 = v12;
  v361 = v18;
  v325 = v18;
  uint64_t v342 = type metadata accessor for PersistenceTrigger();
  uint64_t v341 = *(void *)(v342 - 8);
  __chkstk_darwin(v342);
  v340 = (uint64_t *)&v299[-v29];
  uint64_t v30 = swift_getAssociatedTypeWitness();
  uint64_t v304 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v323 = &v299[-v31];
  uint64_t v32 = swift_getAssociatedTypeWitness();
  uint64_t v303 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  v322 = &v299[-v33];
  uint64_t v34 = swift_getAssociatedConformanceWitness();
  uint64_t v35 = swift_getAssociatedConformanceWitness();
  uint64_t v329 = v32;
  uint64_t v358 = v32;
  uint64_t v359 = v30;
  uint64_t v330 = v30;
  uint64_t v321 = v34;
  v360 = (ValueMetadata *)v34;
  v361 = (ValueMetadata *)v35;
  uint64_t v320 = v35;
  uint64_t v36 = type metadata accessor for FileItemVersion();
  uint64_t v344 = sub_10096C890();
  uint64_t v336 = *(void *)(v344 - 8);
  uint64_t v37 = __chkstk_darwin(v344);
  uint64_t v319 = &v299[-((v38 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v39 = __chkstk_darwin(v37);
  uint64_t v335 = &v299[-v40];
  uint64_t v338 = v36;
  uint64_t v337 = *(void *)(v36 - 8);
  __chkstk_darwin(v39);
  v349 = &v299[-v41];
  v355 = (int *)type metadata accessor for ItemReconciliationHalf();
  uint64_t v334 = *((void *)v355 - 1);
  __chkstk_darwin(v355);
  v333 = &v299[-v42];
  uint64_t v350 = swift_getAssociatedTypeWitness();
  uint64_t v43 = sub_10096C890();
  uint64_t v44 = *(void *)(v43 - 8);
  uint64_t v351 = v43;
  uint64_t v352 = v44;
  uint64_t v45 = __chkstk_darwin(v43);
  uint64_t v47 = &v299[-((v46 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v48 = __chkstk_darwin(v45);
  uint64_t v50 = &v299[-v49];
  uint64_t v51 = __chkstk_darwin(v48);
  uint64_t v53 = &v299[-v52];
  uint64_t v54 = __chkstk_darwin(v51);
  uint64_t v56 = &v299[-v55];
  uint64_t v57 = __chkstk_darwin(v54);
  uint64_t v59 = &v299[-v58];
  uint64_t v60 = __chkstk_darwin(v57);
  uint64_t v62 = &v299[-v61];
  uint64_t v63 = __chkstk_darwin(v60);
  uint64_t v65 = &v299[-v64];
  __chkstk_darwin(v63);
  uint64_t v67 = &v299[-v66];
  uint64_t v345 = a9;
  uint64_t v68 = type metadata accessor for ReconciliationSideMutation();
  __chkstk_darwin(v68);
  uint64_t v70 = &v299[-v69];
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v71 + 16))(&v299[-v69], v353, v68);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v172 = *(void *)v70;
      uint64_t v174 = v351;
      uint64_t v173 = v352;
      uint64_t v75 = v354;
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v352 + 16))(v65, v354, v351);
      int v175 = (*(uint64_t (**)(unsigned char *, uint64_t))(*(void *)(v350 - 8) + 48))(v65, 1);
      (*(void (**)(unsigned char *, uint64_t))(v173 + 8))(v65, v174);
      uint64_t v176 = v355;
      if (v175 == 1) {
        sub_100713470((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderExtensions/fssync/libfssync/interfaces/persistence/ReconciliationTable.swift", 126, 2, 408);
      }
      *(void *)(v75 + v355[10]) &= ~v172;
      uint64_t v78 = v176[9];
      uint64_t v177 = *(void *)(v75 + v78);
      if ((v177 & 1) == 0) {
        return 1;
      }
      unint64_t v80 = v177 & 0xFFFFFFFFFFFFFFFELL;
      goto LABEL_88;
    case 2u:
      uint64_t v81 = v354;
      uint64_t v82 = v355;
      uint64_t v83 = v355[9];
      if ((*(void *)(v354 + v83) & 9) == 1) {
        goto LABEL_34;
      }
      unint64_t v84 = *(void *)(v354 + v83) & 0xFFFFFFFFFFFFFFF6 | 1;
      goto LABEL_33;
    case 3u:
      unsigned __int8 v163 = *v70;
      uint64_t v165 = v351;
      uint64_t v164 = v352;
      uint64_t v166 = v354;
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v352 + 16))(v59, v354, v351);
      int v167 = (*(uint64_t (**)(unsigned char *, uint64_t))(*(void *)(v350 - 8) + 48))(v59, 1);
      (*(void (**)(unsigned char *, uint64_t))(v164 + 8))(v59, v165);
      if (v167 == 1) {
        sub_100713470((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderExtensions/fssync/libfssync/interfaces/persistence/ReconciliationTable.swift", 126, 2, 468);
      }
      uint64_t v168 = v355[9];
      uint64_t v169 = *(void *)(v166 + v168);
      if (v163)
      {
        uint64_t result = 0;
        if ((v169 & 2) == 0) {
          *(void *)(v166 + v168) = v169 | 2;
        }
      }
      else
      {
        if ((v169 & 0x22) == 0) {
          return 0;
        }
        uint64_t result = 0;
        *(void *)(v166 + v168) = v169 & 0xFFFFFFFFFFFFFFDDLL;
      }
      return result;
    case 4u:
      unsigned __int8 v136 = *v70;
      uint64_t v138 = v351;
      uint64_t v137 = v352;
      uint64_t v139 = v354;
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v352 + 16))(v53, v354, v351);
      int v140 = (*(uint64_t (**)(unsigned char *, uint64_t))(*(void *)(v350 - 8) + 48))(v53, 1);
      (*(void (**)(unsigned char *, uint64_t))(v137 + 8))(v53, v138);
      if (v140 == 1) {
        sub_100713470((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderExtensions/fssync/libfssync/interfaces/persistence/ReconciliationTable.swift", 126, 2, 487);
      }
      uint64_t v141 = v355[9];
      uint64_t v142 = *(void *)(v139 + v141);
      uint64_t result = 0;
      if (v136)
      {
        if ((v142 & 4) != 0) {
          return result;
        }
        unint64_t v143 = v142 | 4;
      }
      else
      {
        if ((v142 & 4) == 0) {
          return result;
        }
        unint64_t v143 = v142 & 0xFFFFFFFFFFFFFFFBLL;
      }
      goto LABEL_95;
    case 5u:
      unsigned __int8 v180 = *v70;
      uint64_t v182 = v351;
      uint64_t v181 = v352;
      uint64_t v139 = v354;
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v352 + 16))(v50, v354, v351);
      int v183 = (*(uint64_t (**)(unsigned char *, uint64_t))(*(void *)(v350 - 8) + 48))(v50, 1);
      (*(void (**)(unsigned char *, uint64_t))(v181 + 8))(v50, v182);
      if (v183 == 1) {
        sub_100713470((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderExtensions/fssync/libfssync/interfaces/persistence/ReconciliationTable.swift", 126, 2, 496);
      }
      uint64_t v141 = v355[9];
      uint64_t v184 = *(void *)(v139 + v141);
      if (v180)
      {
        uint64_t result = 0;
        if ((v184 & 0x10) != 0) {
          return result;
        }
        unint64_t v143 = v184 | 0x10;
        goto LABEL_95;
      }
      if ((v184 & 0x30) != 0)
      {
        uint64_t result = 0;
        unint64_t v143 = v184 & 0xFFFFFFFFFFFFFFCFLL;
        goto LABEL_95;
      }
      return 0;
    case 6u:
      uint64_t v191 = v355[9];
      uint64_t v192 = *(void *)(v354 + v191);
      if (*v70 == 1)
      {
        uint64_t result = 0;
        if ((v192 & 0x20) == 0) {
          *(void *)(v354 + v191) = v192 | 0x20;
        }
      }
      else
      {
        uint64_t result = 0;
        if ((v192 & 0x20) != 0) {
          *(void *)(v354 + v191) = v192 & 0xFFFFFFFFFFFFFFDFLL;
        }
      }
      return result;
    case 7u:
      uint64_t v170 = v355[9];
      uint64_t v171 = *(void *)(v354 + v170);
      if (*v70 == 1)
      {
        uint64_t result = 0;
        if ((v171 & 0x40) == 0) {
          *(void *)(v354 + v170) = v171 | 0x40;
        }
      }
      else
      {
        uint64_t result = 0;
        if ((v171 & 0x40) != 0) {
          *(void *)(v354 + v170) = v171 & 0xFFFFFFFFFFFFFFBFLL;
        }
      }
      return result;
    case 8u:
      uint64_t v193 = v338;
      TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
      int v195 = v70[*(int *)(TupleTypeMetadata3 + 48)];
      int v196 = v70[*(int *)(TupleTypeMetadata3 + 64)];
      uint64_t v197 = v337;
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v337 + 32))(v349, v70, v193);
      uint64_t v199 = v351;
      uint64_t v198 = v352;
      uint64_t v200 = v354;
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v352 + 16))(v62, v354, v351);
      int v201 = (*(uint64_t (**)(unsigned char *, uint64_t))(*(void *)(v350 - 8) + 48))(v62, 1);
      (*(void (**)(unsigned char *, uint64_t))(v198 + 8))(v62, v199);
      if (v201 == 1) {
        sub_100713470((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderExtensions/fssync/libfssync/interfaces/persistence/ReconciliationTable.swift", 126, 2, 451);
      }
      uint64_t v202 = v200 + v355[12];
      uint64_t v203 = v336;
      v204 = v335;
      uint64_t v205 = v344;
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v336 + 16))(v335, v202, v344);
      uint64_t v356 = *(void *)(v197 + 48);
      int v206 = ((uint64_t (*)(unsigned char *, uint64_t, uint64_t))v356)(v204, 1, v193);
      (*(void (**)(unsigned char *, uint64_t))(v203 + 8))(v204, v205);
      if (v206 == 1)
      {
        LODWORD(v355) = v196;
        uint64_t v207 = v321;
        uint64_t v208 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v321 + 40);
        LODWORD(v354) = v195;
        uint64_t v209 = v203;
        uint64_t v210 = (uint64_t)v322;
        uint64_t v353 = v202;
        uint64_t v211 = v349;
        uint64_t v212 = v329;
        v208(v349, v329, v321);
        uint64_t v213 = &v211[*(int *)(v193 + 56)];
        uint64_t v214 = v320;
        uint64_t v215 = v323;
        uint64_t v216 = v330;
        (*(void (**)(unsigned char *, uint64_t, uint64_t))(v320 + 40))(v213, v330, v320);
        uint64_t v297 = v207;
        uint64_t v298 = v214;
        int v196 = (int)v355;
        uint64_t v217 = v319;
        uint64_t v218 = (uint64_t)v215;
        uint64_t v202 = v353;
        sub_1007D03B8(v210, 0, v218, 0, 0, 0, v212, v216, (uint64_t)v319);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v197 + 56))(v217, 0, 1, v193);
        (*(void (**)(uint64_t, unsigned char *, uint64_t))(v209 + 40))(v202, v217, v344);
        int v195 = v354;
      }
      if (v195 && !((unsigned int (*)(uint64_t, uint64_t, uint64_t))v356)(v202, 1, v193)) {
        (*(void (**)(uint64_t, unsigned char *, uint64_t))(v303 + 24))(v202, v349, v329);
      }
      if (v196 && !((unsigned int (*)(uint64_t, uint64_t, uint64_t))v356)(v202, 1, v193)) {
        (*(void (**)(uint64_t, unsigned char *, uint64_t))(v304 + 24))(v202 + *(int *)(v193 + 56), &v349[*(int *)(v193 + 56)], v330);
      }
      (*(void (**)(unsigned char *, uint64_t))(v197 + 8))(v349, v193);
      return 0;
    case 9u:
      uint64_t v152 = *(void *)v70;
      uint64_t v153 = v354;
      uint64_t v154 = v355[18];

      uint64_t result = 0;
      *(void *)(v153 + v154) = v152;
      return result;
    case 0xAu:
      uint64_t v219 = *v70;
      uint64_t v221 = v354;
      v220 = v355;
      uint64_t v222 = v355[13];
      uint64_t v223 = (int *)*(unsigned __int8 *)(v354 + v222);
      uint64_t v224 = v346;
      uint64_t v225 = v347;
      switch(*(unsigned char *)(v354 + v222))
      {
        case 1:
          if (v219 == 1) {
            goto LABEL_137;
          }
          goto LABEL_120;
        case 2:
          if (!v219 || v219 == 3) {
            goto LABEL_120;
          }
          if (v219 == 1 && v300 != 1 && v300 != 4) {
            goto LABEL_110;
          }
          goto LABEL_137;
        case 3:
          if (v219 >= 3) {
            goto LABEL_137;
          }
LABEL_120:
          *(unsigned char *)(v354 + v222) = v219;
          if (!v219)
          {
            uint64_t v228 = (void *)(v221 + v220[17]);
            unint64_t v229 = v228[2];
            if (v229 >> 60 != 11)
            {
              uint64_t v230 = v228[1];
              uint64_t v354 = *v228;
              v355 = v223;
              uint64_t v231 = v228[3];
              uint64_t v352 = v228[4];
              uint64_t v353 = v231;
              uint64_t v356 = v228[5];
              uint64_t v351 = v228[6];
              uint64_t Strong = swift_weakLoadStrong();
              if (Strong)
              {
                uint64_t v233 = Strong;
                uint64_t v234 = v340;
                uint64_t *v340 = v354;
                v234[1] = v230;
                uint64_t v235 = v353;
                v234[2] = v229;
                v234[3] = v235;
                v234[4] = v352;
                *((unsigned char *)v234 + 40) = v356 & 1;
                v234[6] = v351;
                swift_storeEnumTagMultiPayload();
                unint64_t v236 = *(void (**)(uint64_t *))(*(void *)v233 + 312);
                sub_10002D830(v230, v229);
                sub_10002D830(v230, v229);
                v236(v234);
                uint64_t v224 = v346;
                swift_release();
                sub_1000D35D8(v354, v230, v229);
                uint64_t v237 = v234;
                uint64_t v225 = v347;
                (*(void (**)(uint64_t *, uint64_t))(v341 + 8))(v237, v342);
              }
              sub_1000D35D8(*v228, v228[1], v228[2]);
              *uint64_t v228 = 0;
              v228[1] = 0;
              v228[2] = 0xB000000000000000;
              *(_OWORD *)(v228 + 3) = 0u;
              *(_OWORD *)(v228 + 5) = 0u;
              uint64_t v223 = v355;
            }
          }
          goto LABEL_125;
        case 4:
          if ((v219 - 1) < 2) {
            goto LABEL_110;
          }
          if (v219)
          {
LABEL_137:
            if (v223 != v219)
            {
              id v277 = (id)fpfs_current_or_default_log();
              uint64_t v278 = v311;
              sub_10096B490();
              uint64_t v279 = sub_10096B470();
              os_log_type_t v280 = sub_10096C5B0();
              if (os_log_type_enabled(v279, v280))
              {
                unint64_t v281 = 0xED00006465747365;
                uint64_t v282 = 0x7265746E49746F6ELL;
                uint64_t v283 = swift_slowAlloc();
                uint64_t v358 = swift_slowAlloc();
                *(_DWORD *)uint64_t v283 = 136446466;
                uint64_t v284 = 0x7265746E49746F6ELL;
                unint64_t v285 = 0xED00006465747365;
                switch((int)v223)
                {
                  case 1:
                    uint64_t v284 = 0x746F687370616E73;
                    unint64_t v285 = 0xEC000000676E6974;
                    break;
                  case 2:
                    unint64_t v285 = 0xE800000000000000;
                    uint64_t v284 = 0x676E696863746177;
                    break;
                  case 3:
                    unint64_t v285 = 0x8000000100996790;
                    uint64_t v284 = 0xD000000000000011;
                    break;
                  case 4:
                    uint64_t v284 = 0xD000000000000015;
                    unint64_t v285 = 0x8000000100996770;
                    break;
                  default:
                    break;
                }
                uint64_t v357 = sub_100719D44(v284, v285, &v358);
                sub_10096C8C0();
                swift_bridgeObjectRelease();
                *(_WORD *)(v283 + 12) = 2082;
                switch((int)v219)
                {
                  case 1:
                    uint64_t v282 = 0x746F687370616E73;
                    unint64_t v281 = 0xEC000000676E6974;
                    break;
                  case 2:
                    unint64_t v281 = 0xE800000000000000;
                    uint64_t v282 = 0x676E696863746177;
                    break;
                  case 3:
                    unint64_t v281 = 0x8000000100996790;
                    uint64_t v282 = 0xD000000000000011;
                    break;
                  case 4:
                    uint64_t v282 = 0xD000000000000015;
                    unint64_t v281 = 0x8000000100996770;
                    break;
                  default:
                    break;
                }
                uint64_t v357 = sub_100719D44(v282, v281, &v358);
                sub_10096C8C0();
                swift_bridgeObjectRelease();
                _os_log_impl((void *)&_mh_execute_header, v279, v280, "❌  invalid transition %{public}s -> %{public}s", (uint8_t *)v283, 0x16u);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();
              }

              (*(void (**)(unsigned char *, uint64_t))(v312 + 8))(v278, v313);
            }
          }
          goto LABEL_170;
        default:
          if ((v219 - 1) >= 3) {
            goto LABEL_137;
          }
LABEL_110:
          *(unsigned char *)(v354 + v222) = v219;
LABEL_125:
          uint64_t v238 = v219;
          uint64_t v239 = v343;
          uint64_t v241 = v343 + 16;
          unint64_t v240 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v343 + 16);
          uint64_t v242 = v328;
          v240((uint64_t *)v328, v225, v224);
          int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
          uint64_t v244 = *(void (**)(unsigned char *, uint64_t))(v239 + 8);
          v244(v242, v224);
          if (EnumCaseMultiPayload == 1) {
            goto LABEL_128;
          }
          uint64_t v353 = v241;
          uint64_t v354 = (uint64_t)v240;
          v355 = v223;
          uint64_t v356 = v238;
          uint64_t v245 = v315;
          uint64_t v246 = v314;
          uint64_t v247 = v331;
          (*(void (**)(unsigned char *, uint64_t, uint64_t))(v315 + 16))(v314, v332, v331);
          uint64_t v248 = v316;
          uint64_t v249 = v317;
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v316 + 48))(v246, 1, v317) != 1)
          {
            uint64_t v266 = v302;
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v248 + 32))(v302, v246, v249);
            uint64_t v267 = swift_weakLoadStrong();
            if (v267)
            {
              uint64_t v268 = v267;
              uint64_t v358 = v224;
              uint64_t v359 = sub_10096C890();
              v360 = &type metadata for ContentStatus;
              v361 = &type metadata for ContentStatus;
              TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
              uint64_t v270 = v224;
              uint64_t v271 = v340;
              uint64_t v272 = v266;
              uint64_t v273 = (char *)v340 + TupleTypeMetadata[12];
              uint64_t v274 = TupleTypeMetadata[16];
              uint64_t v275 = TupleTypeMetadata[20];
              ((void (*)(uint64_t *, uint64_t, uint64_t))v354)(v340, v347, v270);
              (*(void (**)(char *, unsigned char *, uint64_t))(v248 + 16))(v273, v272, v249);
              swift_storeEnumTagMultiPayload();
              (*(void (**)(char *, void, uint64_t, uint64_t))(v343 + 56))(v273, 0, 1, v270);
              *((unsigned char *)v271 + v274) = (_BYTE)v355;
              *((unsigned char *)v271 + v275) = v356;
              uint64_t v276 = v342;
              swift_storeEnumTagMultiPayload();
              (*(void (**)(uint64_t *))(*(void *)v268 + 312))(v271);
              swift_release();
              (*(void (**)(uint64_t *, uint64_t))(v341 + 8))(v271, v276);
              (*(void (**)(unsigned char *, uint64_t))(v248 + 8))(v272, v249);
            }
            else
            {
              (*(void (**)(unsigned char *, uint64_t))(v248 + 8))(v266, v249);
            }
            return 0;
          }
          (*(void (**)(unsigned char *, uint64_t))(v245 + 8))(v246, v247);
          LOBYTE(v223) = (_BYTE)v355;
          uint64_t v238 = v356;
          uint64_t v225 = v347;
          unint64_t v240 = (void (*)(uint64_t *, uint64_t, uint64_t))v354;
LABEL_128:
          v250 = v318;
          v240((uint64_t *)v318, v225, v224);
          int v251 = swift_getEnumCaseMultiPayload();
          v244(v250, v224);
          v252 = v240;
          if (v251 != 1) {
            goto LABEL_131;
          }
          uint64_t v253 = v306;
          uint64_t v254 = v305;
          uint64_t v255 = v307;
          (*(void (**)(unsigned char *, uint64_t, uint64_t))(v306 + 16))(v305, v308, v307);
          uint64_t v256 = v309;
          uint64_t v257 = v310;
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v309 + 48))(v254, 1, v310) != 1)
          {
            int v286 = v301;
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v256 + 32))(v301, v254, v257);
            uint64_t v287 = swift_weakLoadStrong();
            if (v287)
            {
              uint64_t v288 = v287;
              uint64_t v358 = v224;
              uint64_t v359 = sub_10096C890();
              v360 = &type metadata for ContentStatus;
              v361 = &type metadata for ContentStatus;
              int v289 = (int *)swift_getTupleTypeMetadata();
              uint64_t v290 = v289[12];
              uint64_t v291 = v224;
              v292 = v340;
              uint64_t v356 = v238;
              uint64_t v293 = (char *)v340 + v290;
              uint64_t v294 = (int *)v289[20];
              uint64_t v354 = v289[16];
              v355 = v294;
              v252(v340, v347, v291);
              (*(void (**)(char *, unsigned char *, uint64_t))(v256 + 16))(v293, v286, v257);
              swift_storeEnumTagMultiPayload();
              (*(void (**)(char *, void, uint64_t, uint64_t))(v343 + 56))(v293, 0, 1, v291);
              uint64_t v295 = v355;
              *((unsigned char *)v292 + v354) = (_BYTE)v223;
              *((unsigned char *)v295 + (void)v292) = v356;
              uint64_t v296 = v342;
              swift_storeEnumTagMultiPayload();
              (*(void (**)(uint64_t *))(*(void *)v288 + 312))(v292);
              swift_release();
              (*(void (**)(uint64_t *, uint64_t))(v341 + 8))(v292, v296);
            }
            (*(void (**)(unsigned char *, uint64_t))(v256 + 8))(v286, v257);
            return 0;
          }
          (*(void (**)(unsigned char *, uint64_t))(v253 + 8))(v254, v255);
LABEL_131:
          uint64_t result = swift_weakLoadStrong();
          if (!result) {
            return result;
          }
          uint64_t v258 = result;
          uint64_t v358 = v224;
          uint64_t v359 = sub_10096C890();
          v360 = &type metadata for ContentStatus;
          v361 = &type metadata for ContentStatus;
          uint64_t v259 = (int *)swift_getTupleTypeMetadata();
          uint64_t v260 = v224;
          unint64_t v261 = v340;
          uint64_t v262 = (char *)v340 + v259[12];
          uint64_t v263 = v259[16];
          uint64_t v264 = v259[20];
          v240(v340, v347, v260);
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v343 + 56))(v262, 1, 1, v260);
          *((unsigned char *)v261 + v263) = (_BYTE)v223;
          *((unsigned char *)v261 + v264) = v238;
          uint64_t v265 = v342;
          swift_storeEnumTagMultiPayload();
          (*(void (**)(uint64_t *))(*(void *)v258 + 312))(v261);
          swift_release();
          (*(void (**)(uint64_t *, uint64_t))(v341 + 8))(v261, v265);
          break;
      }
      return 0;
    case 0xBu:
      unsigned int v114 = *v70;
      unsigned __int8 v115 = v70[1];
      uint64_t v117 = v351;
      uint64_t v116 = v352;
      uint64_t v118 = v354;
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v352 + 16))(v47, v354, v351);
      int v119 = (*(uint64_t (**)(unsigned char *, uint64_t))(*(void *)(v350 - 8) + 48))(v47, 1);
      (*(void (**)(unsigned char *, uint64_t))(v116 + 8))(v47, v117);
      uint64_t v120 = v355;
      if (v119 == 1) {
        sub_100713470((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderExtensions/fssync/libfssync/interfaces/persistence/ReconciliationTable.swift", 126, 2, 506);
      }
      uint64_t v121 = v355[14];
      uint64_t v122 = *(unsigned __int8 *)(v118 + v121);
      if (v115)
      {
LABEL_19:
        *(unsigned char *)(v118 + v121) = v114;
        uint64_t v123 = swift_weakLoadStrong();
        if (v123)
        {
          uint64_t v124 = v123;
          __chkstk_darwin(v123);
          strcpy(&v299[-32], " otherID from to ");
          uint64_t v353 = v122;
          uint64_t v125 = v346;
          uint64_t v358 = v346;
          uint64_t v359 = sub_10096C890();
          v360 = (ValueMetadata *)sub_100033BE8((uint64_t *)&unk_100AD4BE0);
          v361 = v360;
          char v126 = (int *)swift_getTupleTypeMetadata();
          char v127 = v340;
          uint64_t v128 = (uint64_t)v340 + v126[12];
          uint64_t v129 = v126[16];
          uint64_t v130 = v126[20];
          uint64_t v131 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v343 + 16))(v340, v347, v125);
          __chkstk_darwin(v131);
          uint64_t v132 = v324;
          *(void *)&v299[-48] = v326;
          *(void *)&v299[-40] = v132;
          uint64_t v133 = v327;
          *(void *)&v299[-32] = v356;
          *(void *)&v299[-24] = v133;
          uint64_t v297 = (uint64_t)v325;
          uint64_t v298 = v345;
          sub_100827804((void (*)(char *, char *))sub_10010F2F4, (uint64_t)&v299[-64], (uint64_t)&type metadata for Never, v125, v134, v128);
          *((unsigned char *)v127 + v129) = v353;
          uint64_t v120 = v355;
          *((unsigned char *)v127 + v130) = v114;
          uint64_t v135 = v342;
          swift_storeEnumTagMultiPayload();
          (*(void (**)(uint64_t *))(*(void *)v124 + 312))(v127);
          swift_release();
          (*(void (**)(uint64_t *, uint64_t))(v341 + 8))(v127, v135);
        }
        if (v114 == 6)
        {
          *(unsigned char *)(v118 + v120[15]) = 0;
          return 1;
        }
        else
        {
          return 1;
        }
      }
      else
      {
        switch(*(unsigned char *)(v118 + v121))
        {
          case 1:
            if (v114 != 2) {
              goto LABEL_170;
            }
            goto LABEL_19;
          case 2:
            if (v114 != 3) {
              goto LABEL_170;
            }
            goto LABEL_19;
          case 3:
            if ((v114 | 2) != 6) {
              goto LABEL_170;
            }
            goto LABEL_19;
          case 4:
            if (v114 != 6) {
              goto LABEL_170;
            }
            goto LABEL_19;
          case 5:
            if (v114 != 6 && v114) {
              goto LABEL_170;
            }
            goto LABEL_19;
          case 6:
            if (v114 && v114 != 5) {
              goto LABEL_170;
            }
            goto LABEL_19;
          default:
            uint64_t result = 3;
            if (v114 <= 6 && ((1 << v114) & 0x4E) != 0) {
              goto LABEL_19;
            }
            break;
        }
      }
      return result;
    case 0xCu:
      uint64_t v145 = *(void *)v70;
      unint64_t v144 = *((void *)v70 + 1);
      int v146 = v70[16];
      uint64_t v147 = v354;
      char v148 = v355;
      uint64_t v149 = v354 + v355[16];
      uint64_t v150 = *(void *)v149;
      uint64_t v151 = *(void *)(v149 + 8);
      switch(*(unsigned char *)(v149 + 16))
      {
        case 1:
          if (v146 != 2) {
            goto LABEL_108;
          }
          sub_1000D31F8(v150, v151, 1);
          goto LABEL_107;
        case 2:
          if (v146 != 3 && (v146 != 4 || __PAIR128__(v144, v145) >= 2)) {
            goto LABEL_108;
          }
          sub_1000D31F8(v150, v151, 2);
          uint64_t v226 = v148[9];
          uint64_t v227 = *(void *)(v147 + v226);
          if ((v227 & 8) != 0) {
            *(void *)(v147 + v226) = v227 & 0xFFFFFFFFFFFFFFF7;
          }
          goto LABEL_107;
        case 3:
          if (v146 != 2) {
            goto LABEL_108;
          }
          sub_1000D31F8(v150, v151, 3);
LABEL_107:
          uint64_t result = 0;
          *(void *)uint64_t v149 = v145;
          *(void *)(v149 + 8) = v144;
          *(unsigned char *)(v149 + 16) = v146;
          break;
        case 4:
          if (v150 != 1 || v151 || v146 != 2) {
            goto LABEL_108;
          }
          goto LABEL_107;
        default:
LABEL_108:
          sub_1000D31F8(*(void *)v70, *((void *)v70 + 1), v70[16]);
LABEL_170:
          uint64_t result = 3;
          break;
      }
      return result;
    case 0xDu:
      int v185 = *v70;
      int v186 = v70[1];
      uint64_t v187 = v354;
      uint64_t v188 = v355;
      uint64_t v189 = v355[11];
      if (v185 != 3)
      {
        int v190 = *(unsigned __int8 *)(v354 + v189);
        uint64_t result = 3;
        if (v190 == 3 || v190 != v185) {
          return result;
        }
      }
      *(unsigned char *)(v354 + v189) = v186;
      if ((v186 - 1) < 3) {
        return 0;
      }
      uint64_t result = 0;
      *(unsigned char *)(v187 + v188[15]) = 0;
      return result;
    case 0xEu:
      uint64_t v85 = *(void *)v70;
      uint64_t v86 = *((void *)v70 + 1);
      unint64_t v88 = *((void *)v70 + 2);
      uint64_t v87 = *((void *)v70 + 3);
      uint64_t v89 = *((void *)v70 + 4);
      uint64_t v90 = (unsigned char *)*((void *)v70 + 5);
      uint64_t v91 = *((void *)v70 + 6);
      uint64_t v92 = v355;
      if ((v70[56] & 1) == 0)
      {
        id v93 = (uint64_t *)(v354 + v355[17]);
        unint64_t v94 = v93[2];
        if (v94 >> 60 != 11)
        {
          uint64_t v95 = *v93;
          uint64_t v96 = v93[1];
          uint64_t v98 = v93[3];
          uint64_t v97 = v93[4];
          uint64_t v356 = v85;
          uint64_t v100 = v93[5];
          uint64_t v99 = v93[6];
          uint64_t v352 = v86;
          uint64_t v353 = v87;
          uint64_t v350 = v88;
          uint64_t v351 = v89;
          v348 = (void *)v91;
          v349 = v90;
          uint64_t v101 = swift_weakLoadStrong();
          uint64_t v91 = (uint64_t)v348;
          uint64_t v90 = v349;
          unint64_t v88 = v350;
          uint64_t v89 = v351;
          uint64_t v86 = v352;
          uint64_t v87 = v353;
          uint64_t v85 = v356;
          if (v101)
          {
            uint64_t v102 = v101;
            uint64_t v103 = v98;
            uint64_t v347 = v98;
            unint64_t v104 = v340;
            uint64_t *v340 = v95;
            v104[1] = v96;
            v104[2] = v94;
            uint64_t v104[3] = v103;
            uint64_t v346 = v97;
            v104[4] = v97;
            *((unsigned char *)v104 + 40) = v100 & 1;
            v104[6] = v99;
            uint64_t v105 = v342;
            swift_storeEnumTagMultiPayload();
            unsigned __int8 v106 = *(void (**)(uint64_t *))(*(void *)v102 + 312);
            sub_10002D830(v96, v94);
            sub_10002D830(v96, v94);
            v106(v104);
            swift_release();
            sub_1000D35D8(v95, v96, v94);
            uint64_t v92 = v355;
            (*(void (**)(uint64_t *, uint64_t))(v341 + 8))(v104, v105);
            uint64_t v91 = (uint64_t)v348;
            uint64_t v90 = v349;
            unint64_t v88 = v350;
            uint64_t v89 = v351;
            uint64_t v86 = v352;
            uint64_t v87 = v353;
            uint64_t v85 = v356;
          }
        }
      }
      uint64_t v107 = (uint64_t *)(v354 + v92[17]);
      uint64_t v108 = v107[1];
      uint64_t v356 = *v107;
      unint64_t v109 = v107[2];
      v355 = (int *)v107[3];
      uint64_t v354 = v107[4];
      uint64_t v353 = v107[5];
      *uint64_t v107 = v85;
      v107[1] = v86;
      v107[2] = v88;
      v107[3] = v87;
      uint64_t v107[4] = v89;
      v107[5] = (uint64_t)v90;
      v107[6] = v91;
      uint64_t v110 = v85;
      uint64_t v111 = v86;
      unint64_t v112 = v88;
      sub_10009C650(v85, v86, v88);
      sub_1000D35D8(v356, v108, v109);
      if (v112 >> 60 == 11) {
        return 0;
      }
      sub_1000D35D8(v110, v111, v112);
      return 1;
    case 0xFu:
      int v155 = *v70;
      uint64_t v157 = v351;
      uint64_t v156 = v352;
      uint64_t v139 = v354;
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v352 + 16))(v56, v354, v351);
      int v158 = (*(uint64_t (**)(unsigned char *, uint64_t))(*(void *)(v350 - 8) + 48))(v56, 1);
      (*(void (**)(unsigned char *, uint64_t))(v156 + 8))(v56, v157);
      uint64_t v159 = v355;
      if (v158 == 1) {
        sub_100713470((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderExtensions/fssync/libfssync/interfaces/persistence/ReconciliationTable.swift", 126, 2, 478);
      }
      uint64_t v160 = swift_weakLoadStrong();
      if (!v160)
      {
        __break(1u);
LABEL_173:
        sub_100713470((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderExtensions/fssync/libfssync/interfaces/persistence/ReconciliationTable.swift", 126, 2, 398);
      }
      unsigned int v161 = (*(uint64_t (**)(uint64_t))(*(void *)v160 + 152))(v160);
      swift_release();
      uint64_t v141 = v159[9];
      uint64_t v162 = *(void *)(v139 + v141);
      uint64_t result = 0;
      if (v155 & (v161 >> 14))
      {
        if ((v162 & 0x80) != 0) {
          return result;
        }
        unint64_t v143 = v162 | 0x80;
      }
      else
      {
        if ((v162 & 0x80) == 0) {
          return result;
        }
        unint64_t v143 = v162 & 0xFFFFFFFFFFFFFF7FLL;
      }
LABEL_95:
      *(void *)(v139 + v141) = v143;
      return result;
    case 0x10u:
      uint64_t v81 = v354;
      uint64_t v82 = v355;
      uint64_t v83 = v355[9];
      if ((*(void *)(v354 + v83) & 9) == 8) {
        goto LABEL_34;
      }
      unint64_t v84 = *(void *)(v354 + v83) & 0xFFFFFFFFFFFFFFF6 | 8;
LABEL_33:
      *(void *)(v81 + v83) = v84;
LABEL_34:
      uint64_t result = 0;
      *(void *)(v81 + v82[10]) = 0;
      return result;
    case 0x11u:
      uint64_t v178 = v333;
      double v179 = sub_1008275F4((uint64_t)v333);
      (*(void (**)(uint64_t, unsigned char *, int *, double))(v334 + 40))(v354, v178, v355, v179);
      return 1;
    case 0x12u:
      uint64_t result = 1;
      *(unsigned char *)(v354 + v355[15]) = 1;
      return result;
    default:
      uint64_t v72 = *(void *)v70;
      uint64_t v74 = v351;
      uint64_t v73 = v352;
      uint64_t v75 = v354;
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v352 + 16))(v67, v354, v351);
      int v76 = (*(uint64_t (**)(unsigned char *, uint64_t))(*(void *)(v350 - 8) + 48))(v67, 1);
      (*(void (**)(unsigned char *, uint64_t))(v73 + 8))(v67, v74);
      uint64_t v77 = v355;
      if (v76 == 1) {
        goto LABEL_173;
      }
      if ((v72 & ~*v339) != 0) {
        *v339 |= v72;
      }
      if (qword_100ACC0F0 != -1) {
        swift_once();
      }
      *(void *)(v75 + v77[10]) |= v72 & 0xFFFFFFFFFF7FFFEFLL & (static Fields.all | 0x409000000C000);
      uint64_t v78 = v77[9];
      uint64_t v79 = *(void *)(v75 + v78);
      if ((v79 & 9) == 0) {
        return 1;
      }
      unint64_t v80 = v79 & 0xFFFFFFFFFFFFFFF6;
LABEL_88:
      *(void *)(v75 + v78) = v80;
      return 1;
  }
}

uint64_t sub_1000E8D80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(a2, a1, AssociatedTypeWitness);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for ReconciliationID();
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_1000E8EB4(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v290 = a4;
  int v289 = a3;
  uint64_t v322 = a1;
  uint64_t v323 = a2;
  uint64_t v6 = *(void (**)(void, void))(*(void *)v4 + 88);
  uint64_t v7 = *(void *)(*(void *)v4 + 96);
  uint64_t v8 = *(void *)(*(void *)v4 + 104);
  uint64_t v324 = *(void (**)(void, void))(*(void *)v4 + 80);
  uint64_t v5 = v324;
  v325 = v6;
  uint64_t v326 = v7;
  uint64_t v327 = v8;
  uint64_t v270 = type metadata accessor for PersistenceTrigger();
  uint64_t v269 = *(void *)(v270 - 8);
  __chkstk_darwin(v270);
  uint64_t v268 = (char *)&v259 - v9;
  uint64_t v303 = (void (*)(char *, uint64_t, uint64_t))type metadata accessor for ReconciliationSideMutation();
  uint64_t v302 = *((void *)v303 - 1);
  __chkstk_darwin(v303);
  uint64_t v301 = (uint64_t *)((char *)&v259 - v10);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v14 = swift_getAssociatedConformanceWitness();
  uint64_t v324 = (void (*)(void, void))AssociatedTypeWitness;
  v325 = (void (*)(void, void))v12;
  uint64_t v266 = AssociatedConformanceWitness;
  uint64_t v326 = AssociatedConformanceWitness;
  uint64_t v327 = v14;
  uint64_t v261 = v14;
  uint64_t v15 = type metadata accessor for ReconciliationID();
  uint64_t v288 = sub_10096C890();
  uint64_t v287 = *(void *)(v288 - 8);
  uint64_t v16 = __chkstk_darwin(v288);
  uint64_t v286 = (uint64_t)&v259 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v285 = (uint64_t)&v259 - v18;
  uint64_t v300 = type metadata accessor for ReconciliationSideMutation();
  uint64_t v299 = *(void *)(v300 - 8);
  __chkstk_darwin(v300);
  uint64_t v298 = (uint64_t *)((char *)&v259 - v19);
  uint64_t v20 = sub_10096C890();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v263 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v21 = __chkstk_darwin(TupleTypeMetadata2);
  uint64_t v291 = (char *)&v259 - v22;
  uint64_t v306 = v20;
  uint64_t v313 = *(void *)(v20 - 8);
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v297 = (char *)&v259 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v262 = (char *)&v259 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v272 = (char *)&v259 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v278 = (char *)&v259 - v30;
  uint64_t v321 = v15;
  uint64_t v320 = *(void *)(v15 - 8);
  uint64_t v31 = __chkstk_darwin(v29);
  os_log_type_t v280 = (char *)&v259 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = __chkstk_darwin(v31);
  uint64_t v282 = (char *)&v259 - v34;
  uint64_t v35 = __chkstk_darwin(v33);
  uint64_t v284 = (char *)&v259 - v36;
  uint64_t v37 = __chkstk_darwin(v35);
  uint64_t v296 = (void (*)(char *, char *, uint64_t))((char *)&v259 - v38);
  uint64_t v39 = __chkstk_darwin(v37);
  unint64_t v281 = (char *)&v259 - v40;
  uint64_t v41 = __chkstk_darwin(v39);
  uint64_t v283 = (char *)&v259 - v42;
  uint64_t v43 = __chkstk_darwin(v41);
  uint64_t v310 = (char *)&v259 - v44;
  uint64_t v45 = __chkstk_darwin(v43);
  uint64_t v279 = (char *)&v259 - v46;
  uint64_t v47 = __chkstk_darwin(v45);
  uint64_t v295 = (char *)&v259 - v48;
  uint64_t v49 = __chkstk_darwin(v47);
  uint64_t v265 = (char *)&v259 - v50;
  __chkstk_darwin(v49);
  uint64_t v276 = (char *)&v259 - v51;
  uint64_t v52 = sub_10096C890();
  uint64_t v292 = swift_getTupleTypeMetadata2();
  uint64_t v267 = *(void *)(v292 - 8);
  uint64_t v53 = __chkstk_darwin(v292);
  uint64_t v293 = (char *)&v259 - v54;
  uint64_t v314 = *(char **)(v52 - 8);
  uint64_t v55 = __chkstk_darwin(v53);
  uint64_t v294 = (char *)&v259 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = __chkstk_darwin(v55);
  id v277 = (char *)&v259 - v58;
  uint64_t v59 = __chkstk_darwin(v57);
  uint64_t v61 = (char *)&v259 - v60;
  __chkstk_darwin(v59);
  uint64_t v305 = (char *)&v259 - v62;
  uint64_t v324 = v5;
  v325 = v6;
  uint64_t v326 = v7;
  uint64_t v327 = v8;
  uint64_t v319 = (int *)type metadata accessor for ItemReconciliation();
  uint64_t v273 = *((void *)v319 - 1);
  uint64_t v63 = __chkstk_darwin(v319);
  uint64_t v264 = (uint64_t)&v259 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = __chkstk_darwin(v63);
  uint64_t v275 = (uint64_t)&v259 - v66;
  uint64_t v67 = __chkstk_darwin(v65);
  uint64_t v274 = (char *)&v259 - v68;
  uint64_t v304 = v12;
  uint64_t v69 = *(void *)(v12 - 8);
  uint64_t v70 = __chkstk_darwin(v67);
  uint64_t v260 = (char *)&v259 - ((v71 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = __chkstk_darwin(v70);
  uint64_t v308 = (char *)&v259 - v73;
  uint64_t v311 = (uint64_t (*)(void))AssociatedTypeWitness;
  uint64_t v307 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v74 = __chkstk_darwin(v72);
  int v76 = (char *)&v259 - ((v75 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v74);
  uint64_t v309 = (uint64_t *)((char *)&v259 - v77);
  uint64_t v317 = v7;
  uint64_t v318 = v5;
  uint64_t v324 = v5;
  v325 = v6;
  uint64_t v315 = v8;
  uint64_t v316 = v6;
  uint64_t v326 = v7;
  uint64_t v327 = v8;
  uint64_t v78 = type metadata accessor for ReconciliationMutation();
  uint64_t v79 = *(void *)(v78 - 8);
  __chkstk_darwin(v78);
  uint64_t v81 = (char *)&v259 - v80;
  (*(void (**)(char *, uint64_t, uint64_t))(v79 + 16))((char *)&v259 - v80, v322, v78);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v85 = v311;
      uint64_t v86 = v304;
      TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
      uint64_t v310 = &v81[*(int *)(TupleTypeMetadata3 + 48)];
      LODWORD(v300) = v81[*(int *)(TupleTypeMetadata3 + 64)];
      uint64_t v88 = v307;
      uint64_t v89 = *(void **)(v307 + 32);
      uint64_t v90 = (void (*)(void, void))v309;
      uint64_t v299 = v307 + 32;
      uint64_t v298 = v89;
      ((void (*)(uint64_t *, char *, uint64_t (*)(void)))v89)(v309, v81, v85);
      uint64_t v322 = v69;
      uint64_t v91 = *(void (**)(char *, char *, uint64_t))(v69 + 32);
      uint64_t v297 = (char *)(v69 + 32);
      uint64_t v296 = v91;
      v91(v308, v310, v86);
      uint64_t v303 = (void (*)(char *, uint64_t, uint64_t))*((void *)v314 + 2);
      uint64_t v92 = v305;
      v303(v305, v323, v52);
      id v93 = *(void **)(v88 + 16);
      uint64_t v302 = v88 + 16;
      uint64_t v301 = v93;
      ((void (*)(char *, void (*)(void, void), uint64_t (*)(void)))v93)(v61, v90, v85);
      (*(void (**)(char *, void, uint64_t, uint64_t (*)(void)))(v88 + 56))(v61, 0, 1, v85);
      unint64_t v94 = v293;
      uint64_t v95 = &v293[*(int *)(v292 + 48)];
      uint64_t v96 = v92;
      uint64_t v97 = (void (*)(char *, char *, uint64_t))v303;
      v303(v293, (uint64_t)v96, v52);
      uint64_t v310 = v95;
      v97(v95, v61, v52);
      uint64_t v98 = *(uint64_t (**)(char *, uint64_t, uint64_t (*)(void)))(v88 + 48);
      if (v98(v94, 1, v85) == 1)
      {
        uint64_t v99 = (void (*)(char *, uint64_t))*((void *)v314 + 1);
        v99(v61, v52);
        v99(v305, v52);
        uint64_t v100 = v311;
        int v101 = v98(v310, 1, v311);
        uint64_t v102 = v291;
        if (v101 == 1)
        {
          v99(v293, v52);
          goto LABEL_51;
        }
      }
      else
      {
        uint64_t v177 = v277;
        v97(v277, v94, v52);
        uint64_t v178 = v310;
        int v179 = v98(v310, 1, v311);
        unsigned __int8 v180 = (void (**)(char *, uint64_t (*)(void)))(v307 + 8);
        if (v179 != 1)
        {
          uint64_t v208 = v311;
          ((void (*)(char *, char *, uint64_t (*)(void)))v298)(v76, v178, v311);
          char v209 = sub_10096BBE0();
          uint64_t v210 = *v180;
          (*v180)(v76, v208);
          uint64_t v211 = (void (*)(char *, uint64_t))*((void *)v314 + 1);
          v211(v61, v52);
          v211(v305, v52);
          v210(v277, v208);
          v211(v94, v52);
          uint64_t v100 = v208;
          uint64_t v102 = v291;
          if (v209)
          {
LABEL_51:
            uint64_t v212 = *(void (**)(char *))(v313 + 16);
            uint64_t v213 = v278;
            uint64_t v303 = (void (*)(char *, uint64_t, uint64_t))(v323 + v319[13]);
            uint64_t v214 = v306;
            v212(v278);
            uint64_t v215 = v322;
            uint64_t v216 = *(char **)(v322 + 16);
            uint64_t v217 = v272;
            uint64_t v218 = v304;
            uint64_t v310 = (char *)(v322 + 16);
            uint64_t v305 = v216;
            ((void (*)(char *, char *, uint64_t))v216)(v272, v308, v304);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v215 + 56))(v217, 0, 1, v218);
            uint64_t v219 = &v102[*(int *)(TupleTypeMetadata2 + 48)];
            v220 = v213;
            uint64_t v221 = v214;
            ((void (*)(char *, char *, uint64_t))v212)(v102, v220, v214);
            uint64_t v314 = v219;
            ((void (*)(char *, char *, uint64_t))v212)(v219, v217, v214);
            uint64_t v222 = v102;
            uint64_t v223 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v215 + 48);
            if (v223(v222, 1, v218) == 1)
            {
              uint64_t v224 = *(void (**)(char *, uint64_t))(v313 + 8);
              v224(v217, v214);
              v224(v278, v214);
              uint64_t v192 = v218;
              if (v223(v314, 1, v218) == 1)
              {
                v224(v291, v214);
                int v225 = 0;
                uint64_t v226 = v322;
                uint64_t v227 = v307;
                uint64_t v228 = v274;
LABEL_69:
                uint64_t v254 = (uint64_t)v308;
                uint64_t v255 = (void (*)(void, void))v309;
                sub_10010F368(v323, (void (*)(void, void))v309, (uint64_t)v308, v300, (uint64_t)v318, (uint64_t)v316, v317, v315);
                (*(void (**)(uint64_t, uint64_t))(v226 + 8))(v254, v192);
                (*(void (**)(void, uint64_t (*)(void)))(v227 + 8))(v255, v311);
                if (v225) {
                  (*(void (**)(char *, int *))(v273 + 8))(v228, v319);
                }
                return 1;
              }
            }
            else
            {
              uint64_t v232 = v262;
              ((void (*)(char *, char *, uint64_t))v212)(v262, v291, v221);
              uint64_t v233 = v314;
              uint64_t v234 = (void (**)(char *, uint64_t))(v215 + 8);
              if (v223(v314, 1, v218) != 1)
              {
                uint64_t v244 = v260;
                v296(v260, v233, v218);
                uint64_t v245 = v218;
                char v246 = sub_10096BBE0();
                uint64_t v247 = *v234;
                (*v234)(v244, v245);
                uint64_t v248 = *(void (**)(char *, uint64_t))(v313 + 8);
                v248(v272, v221);
                v248(v278, v221);
                v247(v232, v245);
                v248(v291, v221);
                uint64_t v237 = v328;
                uint64_t v192 = v245;
                uint64_t v228 = v274;
                if (v246)
                {
                  int v225 = 0;
                  uint64_t v226 = v322;
LABEL_68:
                  uint64_t v227 = v307;
                  goto LABEL_69;
                }
                goto LABEL_59;
              }
              uint64_t v235 = v218;
              unint64_t v236 = *(void (**)(char *, uint64_t))(v313 + 8);
              v236(v272, v221);
              v236(v278, v221);
              (*v234)(v232, v235);
              uint64_t v192 = v235;
            }
            (*(void (**)(char *, uint64_t))(v263 + 8))(v291, TupleTypeMetadata2);
            uint64_t v237 = v328;
            uint64_t v228 = v274;
LABEL_59:
            uint64_t v238 = (uint64_t)v265;
            ((void (*)(char *, char *, uint64_t))v305)(v265, v308, v192);
            uint64_t v239 = v321;
            swift_storeEnumTagMultiPayload();
            uint64_t v240 = v264;
            uint64_t v241 = v312;
            uint64_t v242 = sub_1000E5698(v264, v238);
            if (v237)
            {
              (*(void (**)(uint64_t, uint64_t))(v320 + 8))(v238, v239);
              uint64_t v190 = v322;
              uint64_t v191 = v307;
              uint64_t v100 = v311;
              goto LABEL_66;
            }
            uint64_t v249 = v242;
            char v250 = v243;
            (*(void (**)(uint64_t, uint64_t))(v320 + 8))(v238, v239);
            (*(void (**)(char *, uint64_t, int *))(v273 + 32))(v228, v240, v319);
            uint64_t v226 = v322;
            if ((v250 & 1) == 0)
            {
              (*(void (**)(char *, uint64_t *, void))(*(void *)v241 + 200))(v228, v249, 0);
              v252 = &v228[v319[13]];
              uint64_t v253 = type metadata accessor for ItemReconciliationHalf();
              (*(void (**)(void *, char *, uint64_t))(*(void *)(v253 - 8) + 24))(v303, v252, v253);
            }
LABEL_67:
            int v225 = 1;
            goto LABEL_68;
          }
LABEL_32:
          uint64_t v183 = (uint64_t)v276;
          ((void (*)(char *, uint64_t *, uint64_t (*)(void)))v301)(v276, v309, v100);
          uint64_t v184 = v321;
          swift_storeEnumTagMultiPayload();
          uint64_t v185 = v275;
          uint64_t v186 = v312;
          uint64_t v187 = v328;
          uint64_t v188 = sub_1000E5698(v275, v183);
          if (v187)
          {
            (*(void (**)(uint64_t, uint64_t))(v320 + 8))(v183, v184);
            uint64_t v190 = v322;
            uint64_t v191 = v307;
            uint64_t v192 = v304;
LABEL_66:
            (*(void (**)(char *, uint64_t))(v190 + 8))(v308, v192);
            int v251 = *(void (**)(uint64_t *, uint64_t (*)(void)))(v191 + 8);
            uint64_t v84 = v191 + 8;
            v251(v309, v100);
            return v84;
          }
          unint64_t v229 = v188;
          char v230 = v189;
          (*(void (**)(uint64_t, uint64_t))(v320 + 8))(v183, v184);
          uint64_t v228 = v274;
          (*(void (**)(char *, uint64_t, int *))(v273 + 32))(v274, v185, v319);
          uint64_t v226 = v322;
          if (v230)
          {
            int v225 = 1;
            uint64_t v227 = v307;
            uint64_t v192 = v304;
            goto LABEL_69;
          }
          (*(void (**)(char *, uint64_t *, void))(*(void *)v186 + 200))(v228, v229, 0);
          uint64_t v192 = v304;
          uint64_t v231 = type metadata accessor for ItemReconciliationHalf();
          (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v231 - 8) + 24))(v323, v228, v231);
          goto LABEL_67;
        }
        uint64_t v181 = v177;
        uint64_t v182 = (void (*)(char *, uint64_t))*((void *)v314 + 1);
        v182(v61, v52);
        v182(v305, v52);
        uint64_t v100 = v311;
        (*v180)(v181, v311);
      }
      (*(void (**)(char *, uint64_t))(v267 + 8))(v293, v292);
      goto LABEL_32;
    case 2u:
      uint64_t v103 = v321;
      *(unsigned char *)(v323 + v319[14]) = v81[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      goto LABEL_26;
    case 3u:
      uint64_t v104 = type metadata accessor for ItemReconciliationHalf();
      uint64_t v105 = v323;
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v104 - 8) + 8))(v323, v104);
      sub_1008275F4(v105);
      unsigned __int8 v106 = v319;
      uint64_t v107 = v105 + v319[13];
      uint64_t v108 = type metadata accessor for ItemReconciliationHalf();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v108 - 8) + 8))(v107, v108);
      sub_1008275F4(v107);
      uint64_t v109 = sub_10096C110();
      uint64_t v110 = v106[15];
      swift_bridgeObjectRelease();
      *(void *)(v105 + v110) = v109;
      (*(void (**)(char *, uint64_t))(v79 + 8))(v81, v78);
      return 2;
    case 4u:
    case 5u:
      uint64_t v83 = v321;
      uint64_t v84 = *(void *)&v81[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      (*(void (**)(char *, uint64_t))(v320 + 8))(v81, v83);
      return v84;
    case 6u:
      uint64_t v111 = v321;
      uint64_t v112 = swift_getTupleTypeMetadata2();
      uint64_t v113 = v320;
      unsigned int v114 = v295;
      (*(void (**)(char *, char *, uint64_t))(v320 + 32))(v295, &v81[*(int *)(v112 + 48)], v111);
      (*(void (**)(char *, char *, uint64_t))(v113 + 16))(v279, v114, v111);
      sub_10096C1C0();
      sub_10096C180();
      unsigned __int8 v115 = *(void (**)(char *, uint64_t))(v113 + 8);
      v115(v114, v111);
      v115(v81, v111);
      return 1;
    case 7u:
      uint64_t v116 = v321;
      uint64_t v117 = swift_getTupleTypeMetadata2();
      uint64_t v118 = v320;
      int v119 = v295;
      uint64_t v120 = (*(uint64_t (**)(char *, char *, uint64_t))(v320 + 32))(v295, &v81[*(int *)(v117 + 48)], v116);
      __chkstk_darwin(v120);
      uint64_t v121 = v316;
      *(&v259 - 6) = (uint64_t)v318;
      *(&v259 - 5) = (uint64_t)v121;
      uint64_t v122 = v315;
      *(&v259 - 4) = v317;
      *(&v259 - 3) = v122;
      uint64_t v257 = (uint64_t)v119;
      sub_10096C1C0();
      swift_getWitnessTable();
      swift_getWitnessTable();
      sub_10096C4D0();
      uint64_t v123 = *(void (**)(char *, uint64_t))(v118 + 8);
      v123(v119, v116);
      v123(v81, v116);
      return 0;
    case 8u:
      uint64_t v124 = v321;
      uint64_t v125 = v300;
      char v126 = &v81[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      uint64_t v127 = v320;
      uint64_t v314 = *(char **)(v320 + 32);
      ((void (*)(char *, char *, uint64_t))v314)(v310, v81, v124);
      (*(void (**)(void *, char *, uint64_t))(v299 + 32))(v298, v126, v125);
      uint64_t v128 = v319[13];
      LODWORD(v322) = *(unsigned __int8 *)(v323 + v319[14]);
      uint64_t v129 = v313;
      uint64_t v130 = *(uint64_t (**)(void))(v313 + 16);
      uint64_t v131 = v297;
      uint64_t v319 = (int *)(v323 + v128);
      uint64_t v132 = v306;
      uint64_t v311 = v130;
      uint64_t v133 = v130(v297);
      __chkstk_darwin(v133);
      uint64_t v134 = v316;
      *(&v259 - 4) = (uint64_t)v318;
      *(&v259 - 3) = (uint64_t)v134;
      uint64_t v257 = v317;
      uint64_t v258 = v315;
      uint64_t v135 = v285;
      uint64_t v136 = v328;
      sub_100827804((void (*)(char *, char *))sub_10012131C, (uint64_t)(&v259 - 6), (uint64_t)&type metadata for Never, v124, v137, v285);
      uint64_t v328 = v136;
      uint64_t v138 = *(void (**)(uint64_t, uint64_t))(v129 + 8);
      uint64_t v313 = v129 + 8;
      uint64_t v318 = v138;
      v138((uint64_t)v131, v132);
      uint64_t v139 = v281;
      (*(void (**)(char *, char *, uint64_t))(v127 + 16))(v281, v310, v124);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v127 + 48))(v135, 1, v124) == 1)
      {
        uint64_t v140 = (uint64_t)v283;
        ((void (*)(char *, char *, uint64_t))v314)(v283, v139, v124);
        (*(void (**)(uint64_t, uint64_t))(v287 + 8))(v135, v288);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v127 + 8))(v139, v124);
        uint64_t v140 = (uint64_t)v283;
        ((void (*)(char *, uint64_t, uint64_t))v314)(v283, v135, v124);
      }
      uint64_t v193 = v290;
      uint64_t v194 = (uint64_t)v297;
      uint64_t v195 = (uint64_t)v319;
      uint64_t v196 = v306;
      ((void (*)(char *, int *, uint64_t))v311)(v297, v319, v306);
      uint64_t v197 = (void (*)(void, void, void))v298;
      uint64_t v84 = sub_1000E6528((uint64_t)v298, v195, v193, v322, v140, v323, v194, (uint64_t)v316, v315);
      v318(v194, v196);
      uint64_t v198 = *(void (**)(uint64_t, uint64_t))(v127 + 8);
      v198(v140, v124);
      (*(void (**)(void (*)(void, void, void), uint64_t))(v299 + 8))(v197, v300);
      uint64_t v199 = v310;
      uint64_t v200 = v124;
      goto LABEL_38;
    case 9u:
      uint64_t v141 = v321;
      uint64_t v142 = v303;
      unint64_t v143 = &v81[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      uint64_t v144 = v320;
      uint64_t v145 = (char *)v296;
      uint64_t v313 = *(void *)(v320 + 32);
      ((void (*)(void, char *, uint64_t))v313)(v296, v81, v141);
      (*(void (**)(void *, char *, void *))(v302 + 32))(v301, v143, v142);
      LODWORD(v322) = *(unsigned __int8 *)(v323 + v319[14]);
      int v146 = v314;
      uint64_t v147 = v294;
      uint64_t v311 = (uint64_t (*)(void))*((void *)v314 + 2);
      uint64_t v148 = v311(v294);
      uint64_t v310 = (char *)&v259;
      __chkstk_darwin(v148);
      uint64_t v149 = v316;
      *(&v259 - 4) = (uint64_t)v318;
      *(&v259 - 3) = (uint64_t)v149;
      uint64_t v257 = v317;
      uint64_t v258 = v315;
      uint64_t v150 = v286;
      uint64_t v151 = v328;
      sub_100827804((void (*)(char *, char *))sub_10010F31C, (uint64_t)(&v259 - 6), (uint64_t)&type metadata for Never, v141, v152, v286);
      uint64_t v328 = v151;
      uint64_t v153 = (void (*)(void, void))*((void *)v146 + 1);
      uint64_t v314 = v146 + 8;
      uint64_t v316 = v153;
      v153(v147, v52);
      uint64_t v154 = v282;
      (*(void (**)(char *, char *, uint64_t))(v144 + 16))(v282, v145, v141);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v144 + 48))(v150, 1, v141) == 1)
      {
        uint64_t v155 = (uint64_t)v284;
        ((void (*)(char *, char *, uint64_t))v313)(v284, v154, v141);
        (*(void (**)(uint64_t, uint64_t))(v287 + 8))(v150, v288);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v144 + 8))(v154, v141);
        uint64_t v155 = (uint64_t)v284;
        ((void (*)(char *, uint64_t, uint64_t))v313)(v284, v150, v141);
      }
      int v201 = v289;
      uint64_t v202 = (uint64_t)v294;
      uint64_t v203 = v323;
      ((void (*)(char *, uint64_t, uint64_t))v311)(v294, v323, v52);
      v204 = (void (*)(void, void, void))v301;
      uint64_t v84 = sub_1000E6528((uint64_t)v301, v203, v201, v322, v155, v202, v203 + v319[13], (uint64_t)v318, v317);
      v316(v202, v52);
      uint64_t v198 = *(void (**)(uint64_t, uint64_t))(v144 + 8);
      v198(v155, v141);
      (*(void (**)(void (*)(void, void, void), void (*)(char *, uint64_t, uint64_t)))(v302 + 8))(v204, v303);
      uint64_t v199 = (char *)v296;
      uint64_t v200 = v141;
LABEL_38:
      v198((uint64_t)v199, v200);
      return v84;
    case 0xAu:
      uint64_t v156 = v321;
      uint64_t v157 = &v81[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      uint64_t v158 = *(void *)v157;
      char v159 = v157[8];
      uint64_t v160 = *(int *)(type metadata accessor for ItemReconciliationHalf() + 76);
      uint64_t v161 = *(void *)(v323 + v160);
      if (v159)
      {
        uint64_t v162 = v161 & ~v158;
        uint64_t v163 = v320;
LABEL_47:
        *(void *)(v323 + v160) = v162;
        goto LABEL_48;
      }
      BOOL v205 = (*(void *)(v323 + v160) & 3) != 0 && (v158 & 3) != 0;
      if (v205) {
        v161 &= 0xFFFFFFFFFFFFFFFCLL;
      }
      uint64_t v206 = v161 & v158;
      uint64_t v163 = v320;
      if (v205 || v206 != v158)
      {
        if (v206 == v158) {
          uint64_t v207 = 0;
        }
        else {
          uint64_t v207 = v158;
        }
        uint64_t v162 = v207 | v161;
        goto LABEL_47;
      }
LABEL_48:
      (*(void (**)(char *, uint64_t))(v163 + 8))(v81, v156);
      return 0;
    case 0xBu:
      (*(void (**)(char *, uint64_t))(v320 + 8))(v81, v321);
      return 0;
    case 0xCu:
      uint64_t v164 = v321;
      int v165 = v81[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      uint64_t v166 = v320;
      int v167 = v280;
      (*(void (**)(char *, char *, uint64_t))(v320 + 32))(v280, v81, v164);
      uint64_t v168 = v319[18];
      if (v165 != *(unsigned __int8 *)(v323 + v168))
      {
        uint64_t Strong = swift_weakLoadStrong();
        if (!Strong)
        {
          __break(1u);
          JUMPOUT(0x1000EB2F4);
        }
        uint64_t v170 = Strong;
        uint64_t v171 = v268;
        (*(void (**)(char *, char *, uint64_t))(v166 + 16))(v268, v167, v164);
        uint64_t v172 = v270;
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *))(*(void *)v170 + 312))(v171);
        swift_release();
        (*(void (**)(char *, uint64_t))(v269 + 8))(v171, v172);
      }
      (*(void (**)(char *, uint64_t))(v166 + 8))(v167, v164);
      uint64_t v84 = 0;
      *(unsigned char *)(v323 + v168) = v165;
      return v84;
    case 0xDu:
      uint64_t v103 = v321;
      uint64_t v173 = swift_getTupleTypeMetadata3();
      uint64_t v174 = *(void *)&v81[*(int *)(v173 + 48)];
      uint64_t v175 = v319[19];
      uint64_t v176 = *(void *)(v323 + v175);
      if ((v174 & ~v176) == 0) {
        uint64_t v174 = 0;
      }
      *(void *)(v323 + v175) = (v174 | v176) & ~*(void *)&v81[*(int *)(v173 + 64)];
LABEL_26:
      (*(void (**)(char *, uint64_t))(v320 + 8))(v81, v103);
      return 0;
    default:
      uint64_t v82 = v321;
      *(unsigned char *)(v323 + v319[14]) = v81[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      (*(void (**)(char *, uint64_t))(v320 + 8))(v81, v82);
      return 1;
  }
}

uint64_t sub_1000EB32C(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  return sub_1005EC104(a1, a2, AssociatedTypeWitness, v4) & 1;
}

uint64_t sub_1000EB428@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(a2, a1, AssociatedTypeWitness);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for ReconciliationID();
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_1000EB560(uint64_t a1, uint64_t a2)
{
  uint64_t v135 = a2;
  uint64_t v136 = a1;
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 104);
  uint64_t v5 = *(void *)(*v2 + 88);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v105 = sub_10096C890();
  uint64_t v104 = *(void *)(v105 - 8);
  uint64_t v7 = __chkstk_darwin(v105);
  uint64_t v103 = (char *)&v100 - v8;
  uint64_t v108 = AssociatedTypeWitness;
  uint64_t v107 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(v7);
  unsigned __int8 v106 = (char *)&v100 - v9;
  uint64_t v10 = *(void *)(v3 + 96);
  uint64_t v123 = v2;
  uint64_t v11 = *(void *)(v3 + 80);
  uint64_t v12 = swift_getAssociatedTypeWitness();
  uint64_t v128 = *(void *)(v12 - 8);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v111 = (char *)&v100 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v100 = (char *)&v100 - v16;
  __chkstk_darwin(v15);
  int v101 = (char *)&v100 - v17;
  uint64_t v18 = sub_10096B0E0();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v121 = v18;
  uint64_t v122 = v19;
  __chkstk_darwin(v18);
  uint64_t v132 = (char *)&v100 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v125 = v12;
  uint64_t v21 = sub_10096C890();
  uint64_t v126 = *(void *)(v21 - 8);
  uint64_t v127 = v21;
  uint64_t v22 = __chkstk_darwin(v21);
  uint64_t v110 = (char *)&v100 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v102 = (char *)&v100 - v25;
  __chkstk_darwin(v24);
  uint64_t v131 = (uint64_t)&v100 - v26;
  uint64_t v137 = v11;
  uint64_t v138 = v5;
  uint64_t v119 = v5;
  uint64_t v139 = v10;
  uint64_t v140 = v4;
  uint64_t v120 = v4;
  uint64_t v27 = type metadata accessor for ItemReconciliation();
  uint64_t v28 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v112 = (char *)&v100 - v29;
  uint64_t v117 = v11;
  uint64_t v118 = v10;
  uint64_t v30 = type metadata accessor for ItemReconciliationHalf();
  uint64_t v31 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v124 = (char *)&v100 - v32;
  uint64_t v33 = sub_10096C890();
  uint64_t v34 = *(void *)(v33 - 8);
  uint64_t v35 = __chkstk_darwin(v33);
  uint64_t v116 = (char *)&v100 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v35);
  uint64_t v38 = (char *)&v100 - v37;
  uint64_t v109 = *(int *)(v30 + 36);
  uint64_t v133 = *(void *)(v136 + v109);
  unsigned __int8 v115 = *(void (**)(char *, uint64_t, uint64_t))(v34 + 16);
  v115((char *)&v100 - v37, v135, v33);
  uint64_t v130 = v28;
  uint64_t v39 = v27;
  unsigned int v114 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 48);
  int v40 = v114(v38, 1, v27);
  uint64_t v129 = v27;
  uint64_t v113 = v30;
  if (v40 == 1)
  {
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v38, v33);
    if ((v133 & 0x10) == 0) {
      return result;
    }
    goto LABEL_10;
  }
  uint64_t v42 = v124;
  (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v124, v38, v30);
  (*(void (**)(char *, uint64_t))(v130 + 8))(v38, v39);
  uint64_t v43 = *(void *)&v42[*(int *)(v30 + 36)];
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v42, v30);
  if ((v133 & 0x10) == 0)
  {
    uint64_t v44 = v134;
    if ((v43 & 0x10) == 0) {
      return result;
    }
    uint64_t v45 = v129;
    uint64_t v46 = *(int *)(v129 + 56);
    uint64_t v47 = v136;
    if (*(unsigned char *)(v136 + v46) != 1)
    {
      uint64_t v52 = v125;
      uint64_t v49 = v126;
      uint64_t v48 = v127;
      uint64_t v51 = v128;
      goto LABEL_27;
    }
    uint64_t v49 = v126;
    uint64_t v48 = v127;
    uint64_t v50 = v102;
    (*(void (**)(char *, uint64_t, uint64_t))(v126 + 16))(v102, v136, v127);
    uint64_t v51 = v128;
    uint64_t v52 = v125;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v128 + 48))(v50, 1, v125) == 1)
    {
      (*(void (**)(char *, uint64_t))(v49 + 8))(v50, v48);
      goto LABEL_27;
    }
    uint64_t v135 = v46;
    uint64_t v79 = v101;
    (*(void (**)(char *, char *, uint64_t))(v51 + 32))(v101, v50, v52);
    uint64_t v137 = v117;
    uint64_t v138 = v119;
    uint64_t v139 = v118;
    uint64_t v140 = v120;
    type metadata accessor for Ingestion.FetchChildrenMetadata();
    uint64_t v80 = (uint64_t)v100;
    (*(void (**)(char *, char *, uint64_t))(v51 + 16))(v100, v79, v52);
    uint64_t v81 = v132;
    sub_10096B0D0();
    sub_10096B080();
    double v83 = v82;
    uint64_t v84 = *(uint64_t (**)(char *, uint64_t))(v122 + 8);
    v122 += 8;
    uint64_t result = v84(v81, v121);
    double v85 = v83 * 1000000000.0;
    if ((~COERCE__INT64(v83 * 1000000000.0) & 0x7FF0000000000000) != 0)
    {
      if (v85 > -9.22337204e18)
      {
        if (v85 < 9.22337204e18)
        {
          uint64_t v86 = sub_1008AA760(v80, 0, (uint64_t)v85, 0x4000000);
          uint64_t v87 = *(void (**)(uint64_t, uint64_t))(v128 + 8);
          v87(v80, v52);
          uint64_t result = swift_weakLoadStrong();
          if (!result)
          {
LABEL_73:
            __break(1u);
            return result;
          }
          uint64_t v88 = v132;
          sub_10096B0D0();
          sub_10096B080();
          double v90 = v89;
          uint64_t result = v84(v88, v121);
          double v91 = v90 * 1000000000.0;
          if ((~COERCE__INT64(v90 * 1000000000.0) & 0x7FF0000000000000) != 0)
          {
            if (v91 > -9.22337204e18)
            {
              if (v91 < 9.22337204e18)
              {
                sub_10059C450(v86);
                if (v44)
                {
                  swift_release();
                  swift_release();
                  return ((uint64_t (*)(char *, uint64_t))v87)(v101, v52);
                }
                swift_release();
                swift_release();
                v87((uint64_t)v101, v52);
                uint64_t v46 = v135;
                uint64_t v47 = v136;
                uint64_t v49 = v126;
                uint64_t v48 = v127;
                uint64_t v51 = v128;
                uint64_t v45 = v129;
LABEL_27:
                BOOL v71 = sub_100827AAC(v45);
                uint64_t v60 = v110;
                uint64_t v72 = v113;
                if (v71) {
                  goto LABEL_31;
                }
                if (qword_100ACC0F0 == -1)
                {
LABEL_29:
                  *(void *)(v47 + *(int *)(v72 + 40)) |= static Fields.all & 0xFFFFFFFFFF7FFFEFLL;
                  uint64_t v73 = *(void *)(v47 + v109);
                  if ((v73 & 9) != 0) {
                    *(void *)(v47 + v109) = v73 & 0xFFFFFFFFFFFFFFF6;
                  }
LABEL_31:
                  int v74 = *(unsigned __int8 *)(v47 + v46);
                  if (v74 != 1)
                  {
                    uint64_t v75 = v111;
                    if (v74 != 4)
                    {
LABEL_36:
                      (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v60, v47, v48);
                      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v60, 1, v52) == 1)
                      {
                        (*(void (**)(char *, uint64_t))(v49 + 8))(v60, v48);
LABEL_51:
                        uint64_t v92 = v104;
                        id v93 = v103;
                        uint64_t v94 = v105;
                        (*(void (**)(char *, uint64_t, uint64_t))(v104 + 16))(v103, v47 + *(int *)(v129 + 52), v105);
                        uint64_t v95 = v107;
                        uint64_t v96 = v108;
                        int v97 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v107 + 48))(v93, 1, v108);
                        uint64_t v98 = v106;
                        if (v97 == 1) {
                          return (*(uint64_t (**)(char *, uint64_t))(v92 + 8))(v93, v94);
                        }
                        (*(void (**)(char *, char *, uint64_t))(v95 + 32))(v106, v93, v96);
                        uint64_t result = swift_weakLoadStrong();
                        if (result)
                        {
                          uint64_t v99 = *(void *)(result + 24);
                          swift_retain();
                          swift_release();
                          (*(void (**)(char *))(*(void *)v99 + 360))(v98);
                          (*(void (**)(char *, uint64_t))(v95 + 8))(v98, v96);
                          return swift_release();
                        }
                        goto LABEL_72;
                      }
                      (*(void (**)(char *, char *, uint64_t))(v51 + 32))(v75, v60, v52);
                      uint64_t result = swift_weakLoadStrong();
                      if (result)
                      {
                        uint64_t v78 = *(void *)(result + 24);
                        swift_retain();
                        swift_release();
                        (*(void (**)(char *))(*(void *)v78 + 352))(v75);
                        if (v44)
                        {
                          (*(void (**)(char *, uint64_t))(v51 + 8))(v75, v52);
                          return swift_release();
                        }
                        (*(void (**)(char *, uint64_t))(v51 + 8))(v75, v52);
                        swift_release();
                        goto LABEL_51;
                      }
LABEL_71:
                      __break(1u);
LABEL_72:
                      __break(1u);
                      goto LABEL_73;
                    }
                    __break(1u);
                  }
                  uint64_t v76 = *(int *)(v72 + 40);
                  uint64_t v77 = *(void *)(v47 + v76);
                  uint64_t v75 = v111;
                  if ((v77 & 0x100000000000) == 0) {
                    *(void *)(v47 + v76) = v77 | 0x100000000000;
                  }
                  goto LABEL_36;
                }
LABEL_62:
                swift_once();
                uint64_t v72 = v113;
                goto LABEL_29;
              }
LABEL_68:
              __break(1u);
LABEL_69:
              __break(1u);
              goto LABEL_70;
            }
LABEL_67:
            __break(1u);
            goto LABEL_68;
          }
LABEL_66:
          __break(1u);
          goto LABEL_67;
        }
LABEL_65:
        __break(1u);
        goto LABEL_66;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_65;
  }
  if ((v43 & 0x10) != 0) {
    return result;
  }
LABEL_10:
  uint64_t v53 = v116;
  v115(v116, v135, v33);
  uint64_t v54 = v129;
  if (v114(v53, 1, v129) == 1)
  {
    (*(void (**)(char *, uint64_t))(v34 + 8))(v53, v33);
    uint64_t v52 = 0x2000000;
  }
  else
  {
    uint64_t v55 = v130;
    uint64_t v56 = v112;
    (*(void (**)(char *, char *, uint64_t))(v130 + 32))(v112, v53, v54);
    int v57 = v56[*(int *)(v113 + 56)];
    (*(void (**)(char *, uint64_t))(v55 + 8))(v56, v54);
    if (v57) {
      uint64_t v52 = 0x2000000;
    }
    else {
      uint64_t v52 = 0x40000000;
    }
  }
  uint64_t v46 = v125;
  uint64_t v51 = v128;
  uint64_t v44 = v121;
  uint64_t v58 = v122;
  uint64_t v59 = v131;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v126 + 16))(v131, v136, v127);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v51 + 48))(v59, 1, v46);
  uint64_t v48 = v134;
  if (result == 1) {
    goto LABEL_69;
  }
  uint64_t v137 = v117;
  uint64_t v138 = v119;
  uint64_t v139 = v118;
  uint64_t v140 = v120;
  uint64_t v47 = type metadata accessor for Materialization.MaterializeIgnoredItem();
  uint64_t v60 = v132;
  sub_10096B0D0();
  sub_10096B080();
  double v62 = v61;
  uint64_t v64 = *(void (**)(char *, uint64_t))(v58 + 8);
  uint64_t v49 = v58 + 8;
  uint64_t v63 = v64;
  v64(v60, v44);
  double v65 = v62 * 1000000000.0;
  if ((~COERCE__INT64(v62 * 1000000000.0) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_57;
  }
  if (v65 <= -9.22337204e18)
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  if (v65 >= 9.22337204e18)
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  uint64_t v66 = v52;
  uint64_t v52 = v48;
  uint64_t v48 = v131;
  uint64_t v47 = sub_1008BCD08(v131, 0, (uint64_t)v65, v66);
  uint64_t v67 = *(void (**)(uint64_t, uint64_t))(v51 + 8);
  v51 += 8;
  v67(v48, v46);
  uint64_t result = swift_weakLoadStrong();
  if (!result)
  {
LABEL_70:
    __break(1u);
    goto LABEL_71;
  }
  uint64_t v46 = result;
  uint64_t v60 = v132;
  sub_10096B0D0();
  sub_10096B080();
  double v69 = v68;
  v63(v60, v44);
  double v70 = v69 * 1000000000.0;
  if ((~COERCE__INT64(v69 * 1000000000.0) & 0x7FF0000000000000) == 0)
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  if (v70 <= -9.22337204e18)
  {
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  if (v70 >= 9.22337204e18)
  {
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  sub_10059C450(v47);
  swift_release();
  return swift_release();
}

void *sub_1000EC550(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, int a5)
{
  LODWORD(v278) = a5;
  uint64_t v279 = a4;
  uint64_t v280 = a3;
  unint64_t v281 = a2;
  uint64_t v286 = a1;
  uint64_t v6 = (void *)*v5;
  uint64_t v245 = sub_10096B0E0();
  uint64_t v244 = *(void *)(v245 - 8);
  __chkstk_darwin(v245);
  uint64_t v257 = &v218[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  unint64_t v8 = v6[11];
  unint64_t v9 = v6[10];
  uint64_t v10 = v6[13];
  id v277 = (void (*)(void))v5;
  uint64_t v11 = v6[12];
  uint64_t v287 = v8;
  unint64_t v288 = v9;
  uint64_t v289 = v10;
  uint64_t v290 = v11;
  uint64_t v284 = (int *)type metadata accessor for ItemReconciliation();
  uint64_t v246 = sub_10096C890();
  uint64_t v249 = *(void *)(v246 - 8);
  __chkstk_darwin(v246);
  uint64_t v248 = &v218[-v12];
  uint64_t v287 = v9;
  unint64_t v288 = v8;
  uint64_t v289 = v11;
  uint64_t v290 = v10;
  uint64_t v285 = type metadata accessor for PersistenceTrigger();
  uint64_t v271 = *(void *)(v285 - 8);
  __chkstk_darwin(v285);
  unint64_t v229 = &v218[-v13];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v15 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v17 = swift_getAssociatedConformanceWitness();
  uint64_t v287 = AssociatedTypeWitness;
  unint64_t v288 = v15;
  uint64_t v228 = AssociatedConformanceWitness;
  uint64_t v289 = AssociatedConformanceWitness;
  uint64_t v290 = v17;
  uint64_t v227 = v17;
  uint64_t v232 = type metadata accessor for ThrottlingKey();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v231 = sub_10096C890();
  uint64_t v230 = *(void *)(v231 - 8);
  __chkstk_darwin(v231);
  uint64_t v234 = &v218[-v18];
  uint64_t v240 = sub_10096C890();
  uint64_t v239 = *(void *)(v240 - 8);
  uint64_t v19 = __chkstk_darwin(v240);
  uint64_t v238 = &v218[-v20];
  unint64_t v260 = AssociatedTypeWitness;
  uint64_t v241 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(v19);
  unint64_t v236 = &v218[-v21];
  uint64_t v252 = sub_10096C890();
  uint64_t v251 = *(void *)(v252 - 8);
  uint64_t v22 = __chkstk_darwin(v252);
  uint64_t v255 = (void (**)(void))&v218[-v23];
  uint64_t v253 = v15;
  uint64_t v256 = *(void *)(v15 - 8);
  __chkstk_darwin(v22);
  char v243 = &v218[-v24];
  uint64_t v262 = type metadata accessor for ItemReconciliationHalf();
  uint64_t v258 = *(void *)(v262 - 8);
  __chkstk_darwin(v262);
  uint64_t v242 = &v218[-v25];
  uint64_t v268 = (int *)type metadata accessor for ItemReconciliationHalf();
  uint64_t v250 = *((void *)v268 - 1);
  __chkstk_darwin(v268);
  uint64_t v235 = &v218[-v26];
  uint64_t v287 = v9;
  unint64_t v288 = v8;
  uint64_t v289 = v11;
  uint64_t v290 = v10;
  uint64_t v27 = (void *)type metadata accessor for ItemReconciliation();
  uint64_t v261 = sub_10096C890();
  uint64_t v263 = *(void *)(v261 - 8);
  uint64_t v28 = __chkstk_darwin(v261);
  uint64_t v247 = &v218[-((v29 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v254 = &v218[-v31];
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v259 = &v218[-v33];
  __chkstk_darwin(v32);
  uint64_t v237 = &v218[-v34];
  unint64_t v275 = v9;
  unint64_t v276 = v8;
  uint64_t v287 = v8;
  unint64_t v288 = v9;
  uint64_t v273 = v11;
  uint64_t v274 = v10;
  uint64_t v289 = v10;
  uint64_t v290 = v11;
  uint64_t v264 = type metadata accessor for PersistenceTrigger();
  uint64_t v267 = sub_10096C890();
  uint64_t v266 = *(void *)(v267 - 8);
  uint64_t v35 = __chkstk_darwin(v267);
  uint64_t v265 = (void (*)(uint64_t, int *))&v218[-v36];
  uint64_t v269 = *((void *)v284 - 1);
  uint64_t v37 = __chkstk_darwin(v35);
  uint64_t v39 = &v218[-((v38 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v40 = __chkstk_darwin(v37);
  uint64_t v42 = &v218[-v41];
  __chkstk_darwin(v40);
  uint64_t v44 = &v218[-v43];
  uint64_t v45 = sub_10096C890();
  uint64_t v270 = *(uint64_t **)(v45 - 8);
  uint64_t v46 = __chkstk_darwin(v45);
  uint64_t v48 = &v218[-v47];
  uint64_t v272 = *(v27 - 1);
  uint64_t v49 = __chkstk_darwin(v46);
  uint64_t v51 = &v218[-((v50 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v52 = __chkstk_darwin(v49);
  uint64_t v54 = &v218[-v53];
  __chkstk_darwin(v52);
  uint64_t v56 = &v218[-v55];
  uint64_t v282 = v27;
  uint64_t v57 = (uint64_t)v283;
  uint64_t result = (void *)sub_100827DE8(v27);
  if (v57) {
    return result;
  }
  uint64_t v226 = v56;
  uint64_t v283 = v48;
  int v225 = (void (*)(uint64_t, uint64_t))v45;
  uint64_t v222 = v54;
  uint64_t v59 = v277;
  uint64_t v221 = v42;
  uint64_t v223 = v51;
  uint64_t v224 = v39;
  uint64_t v60 = v281;
  if (v278) {
    sub_1000EB560(v286, (uint64_t)v281);
  }
  uint64_t v61 = (uint64_t)v282;
  uint64_t v63 = v279;
  uint64_t v62 = v280;
  uint64_t v64 = (uint64_t)v44;
  uint64_t v65 = (uint64_t)v59 + 16;
  uint64_t result = (void *)swift_weakLoadStrong();
  if (!result)
  {
    __break(1u);
LABEL_123:
    __break(1u);
    goto LABEL_124;
  }
  int v66 = sub_1008288C0((uint64_t)v60, v62, v63, (uint64_t)result, v61);
  swift_release();
  uint64_t v278 = 0;
  uint64_t v67 = v272;
  uint64_t v68 = v272 + 16;
  uint64_t v69 = (uint64_t)v226;
  id v277 = *(void (**)(void))(v272 + 16);
  ((void (*)(unsigned char *, uint64_t, uint64_t))v277)(v226, v286, v61);
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v271 + 56))(v283, 1, 1, v285);
  if (qword_100ACC190 != -1) {
    swift_once();
  }
  uint64_t v70 = qword_100B0B5C0;
  uint64_t result = (void *)swift_weakLoadStrong();
  if (!result) {
    goto LABEL_123;
  }
  uint64_t v71 = (uint64_t)result;
  uint64_t v287 = v275;
  unint64_t v288 = v276;
  uint64_t v289 = v273;
  uint64_t v290 = v274;
  type metadata accessor for ReconciliationTable();
  uint64_t v72 = v69;
  uint64_t v73 = v69;
  uint64_t v74 = (uint64_t)v283;
  uint64_t v75 = v278;
  uint64_t v76 = sub_1000EE93C(v72, (uint64_t)v283, v70, v71);
  uint64_t v278 = v75;
  if (v75)
  {
    swift_release();
    ((void (*)(uint64_t, void))v270[1])(v74, v225);
    return (void *)(*(uint64_t (**)(uint64_t, void *))(v67 + 8))(v73, v282);
  }
  uint64_t v79 = v76;
  uint64_t v220 = v68;
  int v219 = v66;
  uint64_t v80 = v77;
  char v81 = v78;
  swift_release();
  ((void (*)(uint64_t, void))v270[1])(v74, v225);
  double v82 = *(void (**)(uint64_t, uint64_t))(v67 + 8);
  uint64_t v83 = v73;
  uint64_t v84 = (uint64_t)v282;
  uint64_t v226 = (unsigned char *)(v67 + 8);
  int v225 = v82;
  v82(v83, (uint64_t)v282);
  uint64_t v85 = v286;
  uint64_t v86 = (uint64_t *)(v286 + v268[16]);
  sub_1000D31F8(*v86, v86[1], *((unsigned char *)v86 + 16));
  *uint64_t v86 = v79;
  v86[1] = v80;
  uint64_t v270 = v86;
  *((unsigned char *)v86 + 16) = v81;
  sub_100827044(v84, v64);
  uint64_t v87 = v64;
  uint64_t v88 = (uint64_t)v265;
  (*(void (**)(void (*)(uint64_t, int *), uint64_t, uint64_t))(*(void *)(v264 - 8) + 56))(v265, 1, 1);
  uint64_t v89 = qword_100B0B5C0;
  uint64_t v283 = (unsigned char *)v65;
  uint64_t result = (void *)swift_weakLoadStrong();
  if (!result) {
    goto LABEL_127;
  }
  double v90 = result;
  uint64_t v287 = v276;
  unint64_t v288 = v275;
  uint64_t v289 = v274;
  uint64_t v290 = v273;
  type metadata accessor for ReconciliationTable();
  uint64_t v91 = (*(uint64_t (**)(void))(*v90 + 176))();
  swift_release();
  uint64_t v92 = v278;
  uint64_t v93 = sub_1000EE93C(v87, v88, v89, v91);
  uint64_t v96 = v284;
  uint64_t v278 = v92;
  if (v92)
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v266 + 8))(v88, v267);
    return (void *)(*(uint64_t (**)(uint64_t, int *))(v269 + 8))(v87, v96);
  }
  uint64_t v97 = v93;
  uint64_t v98 = v94;
  char v99 = v95;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v266 + 8))(v88, v267);
  uint64_t v100 = *(void (**)(uint64_t, int *))(v269 + 8);
  uint64_t v266 = v269 + 8;
  uint64_t v265 = v100;
  v100(v87, v96);
  uint64_t v101 = *(int *)(v262 + 64);
  uint64_t v264 = v85 + *(int *)(v84 + 52);
  uint64_t v102 = v264 + v101;
  sub_1000D31F8(*(void *)(v264 + v101), *(void *)(v264 + v101 + 8), *(unsigned char *)(v264 + v101 + 16));
  *(void *)uint64_t v102 = v97;
  *(void *)(v102 + 8) = v98;
  *(unsigned char *)(v102 + 16) = v99;
  if (*((unsigned char *)v270 + 16))
  {
    uint64_t v103 = v281;
    uint64_t v104 = v263;
    uint64_t v105 = v259;
    goto LABEL_34;
  }
  uint64_t v106 = *v270;
  uint64_t v103 = v281;
  if ((*v270 & 0x100) != 0)
  {
    uint64_t v108 = *(int *)(v84 + 64);
    unint64_t v109 = *(void *)(v85 + v108);
    if (v109 >= 0x2000000000000000) {
      unint64_t v109 = 0x2000000000000000;
    }
    *(void *)(v85 + v108) = v109;
    uint64_t v107 = v250;
    if (v280)
    {
      uint64_t v110 = (uint64_t)v222;
      v277(v222);
      uint64_t result = (void *)swift_weakLoadStrong();
      if (!result)
      {
LABEL_133:
        __break(1u);
        goto LABEL_134;
      }
      uint64_t v111 = v278;
      sub_10010EB4C(v110, v103, result);
      uint64_t v278 = v111;
      uint64_t v105 = v259;
      uint64_t v112 = v110;
      if (v111)
      {
        uint64_t v113 = v84;
LABEL_65:
        v225(v112, v113);
        return (void *)swift_release();
      }
      uint64_t v104 = v263;
      v225(v112, v84);
      swift_release();
    }
    else
    {
      uint64_t v104 = v263;
      uint64_t v105 = v259;
    }
  }
  else
  {
    uint64_t v104 = v263;
    uint64_t v105 = v259;
    uint64_t v107 = v250;
  }
  if ((v106 & 0x200) != 0)
  {
    unsigned int v114 = v237;
    uint64_t v115 = v261;
    (*(void (**)(unsigned char *, char *, uint64_t))(v104 + 16))(v237, v103, v261);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v272 + 48))(v114, 1, v84) == 1)
    {
      (*(void (**)(unsigned char *, uint64_t))(v104 + 8))(v114, v115);
LABEL_31:
      uint64_t result = (void *)swift_weakLoadStrong();
      if (!result)
      {
LABEL_132:
        __break(1u);
        goto LABEL_133;
      }
      uint64_t v125 = result[4];
      swift_retain();
      swift_release();
      uint64_t v126 = *(void *)(v125 + 16);
      swift_retain();
      uint64_t v127 = swift_release();
      (*(void (**)(uint64_t))(*(void *)v126 + 848))(v127);
      swift_release();
      goto LABEL_33;
    }
    uint64_t v116 = v235;
    uint64_t v117 = v114;
    uint64_t v118 = v114;
    uint64_t v119 = v107;
    uint64_t v120 = v268;
    (*(void (**)(unsigned char *, unsigned char *, int *))(v107 + 16))(v235, v117, v268);
    v225((uint64_t)v118, v84);
    uint64_t v121 = &v116[v120[16]];
    uint64_t v123 = *(void *)v121;
    uint64_t v122 = *((void *)v121 + 1);
    int v124 = v121[16];
    sub_10009C5FC(*(void *)v121, v122, v121[16]);
    (*(void (**)(unsigned char *, int *))(v119 + 8))(v116, v120);
    if (v124)
    {
      sub_1000D31F8(v123, v122, v124);
      uint64_t v104 = v263;
      goto LABEL_31;
    }
    sub_1000D31F8(v123, v122, 0);
    uint64_t v104 = v263;
    if ((v123 & 0x200) == 0) {
      goto LABEL_31;
    }
  }
LABEL_33:
  char v99 = *(unsigned char *)(v102 + 16);
LABEL_34:
  unint64_t v128 = v260;
  uint64_t v129 = v261;
  uint64_t v130 = v258;
  if (v99) {
    int v131 = 0;
  }
  else {
    int v131 = *(unsigned char *)(v102 + 1) & 1;
  }
  uint64_t v132 = v103;
  uint64_t v133 = *(void (**)(unsigned char *, char *, uint64_t))(v104 + 16);
  v133(v105, v132, v261);
  uint64_t v267 = (uint64_t)v133;
  if (!v131)
  {
    uint64_t v259 = *(char **)(v104 + 8);
    ((void (*)(char *, uint64_t))v259)(v105, v129);
    uint64_t v139 = (uint64_t)v223;
    goto LABEL_61;
  }
  uint64_t v134 = v254;
  uint64_t v250 = v104 + 16;
  v133(v254, v105, v129);
  uint64_t v135 = v134;
  uint64_t v136 = v134;
  uint64_t v137 = (uint64_t)v282;
  if ((*(unsigned int (**)(unsigned char *, uint64_t, void *))(v272 + 48))(v136, 1, v282) == 1)
  {
    uint64_t v138 = *(unsigned char **)(v263 + 8);
    ((void (*)(char *, uint64_t))v138)(v105, v129);
    uint64_t v259 = v138;
    ((void (*)(unsigned char *, uint64_t))v138)(v135, v129);
  }
  else
  {
    uint64_t v140 = v105;
    uint64_t v141 = v242;
    uint64_t v142 = v262;
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v130 + 16))(v242, &v135[*(int *)(v137 + 52)], v262);
    v225((uint64_t)v135, v137);
    unint64_t v143 = &v141[*(int *)(v142 + 64)];
    uint64_t v144 = *(void *)v143;
    uint64_t v145 = *((void *)v143 + 1);
    int v146 = v143[16];
    sub_10009C5FC(*(void *)v143, v145, v143[16]);
    (*(void (**)(unsigned char *, uint64_t))(v130 + 8))(v141, v142);
    uint64_t v259 = *(char **)(v263 + 8);
    ((void (*)(char *, uint64_t))v259)(v140, v129);
    if (!v146)
    {
      sub_1000D31F8(v144, v145, 0);
      unint64_t v128 = v260;
      uint64_t v139 = (uint64_t)v223;
      uint64_t v147 = v255;
      if ((v144 & 0x100) != 0) {
        goto LABEL_61;
      }
      goto LABEL_44;
    }
    sub_1000D31F8(v144, v145, v146);
    unint64_t v128 = v260;
  }
  uint64_t v139 = (uint64_t)v223;
  uint64_t v147 = v255;
LABEL_44:
  uint64_t v148 = v102;
  uint64_t v149 = *((int *)v282 + 16);
  unint64_t v150 = *(void *)(v286 + v149);
  if (v150 >= 0x2000000000000000) {
    unint64_t v150 = 0x2000000000000000;
  }
  *(void *)(v286 + v149) = v150;
  uint64_t v151 = v251;
  uint64_t v152 = v252;
  (*(void (**)(void))(v251 + 16))(v147);
  uint64_t v153 = v256;
  uint64_t v154 = v253;
  if ((*(unsigned int (**)(void (**)(void), uint64_t, uint64_t))(v256 + 48))(v147, 1, v253) == 1)
  {
    (*(void (**)(void (**)(void), uint64_t))(v151 + 8))(v147, v152);
    uint64_t v102 = v148;
    goto LABEL_61;
  }
  uint64_t v258 = v148;
  uint64_t v155 = v243;
  (*(void (**)(unsigned char *, void (**)(void), uint64_t))(v153 + 32))(v243, v147, v154);
  uint64_t v156 = v239;
  uint64_t v157 = v238;
  uint64_t v158 = v240;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v239 + 16))(v238, v264, v240);
  uint64_t v159 = v241;
  if ((*(unsigned int (**)(unsigned char *, uint64_t, unint64_t))(v241 + 48))(v157, 1, v128) == 1)
  {
    (*(void (**)(unsigned char *, uint64_t))(v153 + 8))(v155, v154);
    (*(void (**)(unsigned char *, uint64_t))(v156 + 8))(v157, v158);
    goto LABEL_52;
  }
  uint64_t v160 = v236;
  (*(void (**)(unsigned char *, unsigned char *, unint64_t))(v159 + 32))(v236, v157, v128);
  unint64_t v161 = v128;
  int v162 = *(unsigned __int8 *)(v286 + v268[11]);
  if (v162 == 3)
  {
    (*(void (**)(unsigned char *, unint64_t))(v159 + 8))(v160, v161);
    (*(void (**)(unsigned char *, uint64_t))(v256 + 8))(v243, v154);
    goto LABEL_52;
  }
  uint64_t v163 = v243;
  uint64_t v102 = v258;
  if (*(unsigned char *)(v286 + v268[14]) == 6)
  {
    uint64_t v164 = (uint64_t)v221;
    sub_100827044((uint64_t)v282, (uint64_t)v221);
    uint64_t result = (void *)swift_weakLoadStrong();
    if (!result)
    {
LABEL_136:
      __break(1u);
      goto LABEL_137;
    }
    uint64_t v165 = (*(uint64_t (**)(void *))(*result + 176))(result);
    swift_release();
    uint64_t v166 = v284;
    uint64_t v167 = v278;
    uint64_t v168 = sub_100828E84(v165, v284);
    uint64_t v278 = v167;
    if (v167)
    {
      swift_release();
      v265(v164, v166);
      (*(void (**)(unsigned char *, unint64_t))(v159 + 8))(v160, v260);
      return (void *)(*(uint64_t (**)(unsigned char *, uint64_t))(v256 + 8))(v163, v253);
    }
    uint64_t v197 = v168;
    v265(v164, v166);
    swift_release();
    if (v197 != 70)
    {
      uint64_t result = (void *)swift_weakLoadStrong();
      if (!result)
      {
LABEL_137:
        __break(1u);
LABEL_138:
        __break(1u);
        goto LABEL_139;
      }
      uint64_t v198 = result[3];
      swift_retain();
      swift_release();
      uint64_t v199 = v278;
      uint64_t v200 = (*(uint64_t (**)(unsigned char *, uint64_t))(*(void *)v198 + 336))(v160, v197);
      uint64_t v278 = v199;
      if (v199)
      {
        swift_release();
        (*(void (**)(unsigned char *, unint64_t))(v241 + 8))(v236, v260);
        return (void *)(*(uint64_t (**)(unsigned char *, uint64_t))(v256 + 8))(v243, v253);
      }
      uint64_t v201 = v200;
      swift_release();
      uint64_t v287 = v201;
      uint64_t v202 = TupleTypeMetadata2;
      sub_10096C1C0();
      swift_getWitnessTable();
      uint64_t v203 = v234;
      sub_10096C450();
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v202 - 8) + 48))(v203, 1, v202) == 1)
      {
        (*(void (**)(unsigned char *, uint64_t))(v230 + 8))(v234, v231);
      }
      else
      {
        v204 = v234;
        uint64_t v205 = *(void *)&v234[*(int *)(TupleTypeMetadata2 + 48) + 40];
        swift_errorRetain();
        swift_errorRelease();
        swift_bridgeObjectRelease();
        (*(void (**)(unsigned char *))(*(void *)(v232 - 8) + 8))(v204);
        if (v205)
        {
          if (v162)
          {
            if (v162 != 1)
            {
              sub_10010F2A0();
              swift_allocError();
              uint64_t v216 = v215;
              uint64_t v287 = 0;
              unint64_t v288 = 0xE000000000000000;
              sub_10096CBD0(64);
              v291._object = (void *)0x8000000100996730;
              v291._countAndFlagsBits = 0xD00000000000003ELL;
              sub_10096BDC0(v291);
              swift_getWitnessTable();
              sub_10096D270();
              unint64_t v217 = v288;
              *(void *)uint64_t v216 = v287;
              *(void *)(v216 + 8) = v217;
              *(unsigned char *)(v216 + 48) = 8;
              swift_willThrow();
              swift_errorRelease();
              (*(void (**)(unsigned char *, unint64_t))(v241 + 8))(v236, v260);
              return (void *)(*(uint64_t (**)(unsigned char *, uint64_t))(v256 + 8))(v243, v253);
            }
            uint64_t result = (void *)swift_weakLoadStrong();
            if (!result) {
              goto LABEL_138;
            }
          }
          else
          {
            uint64_t result = (void *)swift_weakLoadStrong();
            if (!result)
            {
LABEL_139:
              __break(1u);
              return result;
            }
          }
          uint64_t v206 = result;
          uint64_t v207 = v253;
          unint64_t v208 = v260;
          uint64_t v287 = v253;
          unint64_t v288 = v260;
          uint64_t v289 = v227;
          uint64_t v290 = v228;
          type metadata accessor for ReconciliationID();
          sub_100033BE8((uint64_t *)&unk_100ACB6B0);
          uint64_t v209 = *(int *)(swift_getTupleTypeMetadata2() + 48);
          uint64_t v210 = v256;
          uint64_t v211 = v229;
          uint64_t v212 = v243;
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v256 + 16))(v229, v243, v207);
          swift_storeEnumTagMultiPayload();
          *(void *)&v211[v209] = v205;
          uint64_t v213 = v285;
          swift_storeEnumTagMultiPayload();
          uint64_t v255 = (void (**)(void))(*v206 + 312);
          uint64_t v214 = *v255;
          swift_errorRetain();
          v214(v211);
          swift_release();
          swift_errorRelease();
          (*(void (**)(unsigned char *, uint64_t))(v271 + 8))(v211, v213);
          (*(void (**)(unsigned char *, unint64_t))(v241 + 8))(v236, v208);
          (*(void (**)(unsigned char *, uint64_t))(v210 + 8))(v212, v207);
          goto LABEL_52;
        }
      }
      (*(void (**)(unsigned char *, unint64_t))(v241 + 8))(v236, v260);
      (*(void (**)(unsigned char *, uint64_t))(v256 + 8))(v243, v253);
LABEL_52:
      uint64_t v129 = v261;
      uint64_t v139 = (uint64_t)v223;
      uint64_t v102 = v258;
      goto LABEL_61;
    }
    (*(void (**)(unsigned char *, unint64_t))(v159 + 8))(v160, v260);
    (*(void (**)(unsigned char *, uint64_t))(v256 + 8))(v163, v253);
  }
  else
  {
    (*(void (**)(unsigned char *, unint64_t))(v159 + 8))(v160, v260);
    (*(void (**)(unsigned char *, uint64_t))(v256 + 8))(v163, v154);
  }
  uint64_t v129 = v261;
  uint64_t v139 = (uint64_t)v223;
LABEL_61:
  uint64_t v169 = (uint64_t)v224;
  if (v280)
  {
    ((void (*)(uint64_t, uint64_t, void *))v277)(v139, v286, v282);
    uint64_t result = (void *)swift_weakLoadStrong();
    if (!result)
    {
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
      goto LABEL_130;
    }
    uint64_t v170 = v278;
    sub_10010EB4C(v139, v281, result);
    uint64_t v278 = v170;
    uint64_t v112 = v139;
    if (v170)
    {
      uint64_t v113 = (uint64_t)v282;
      goto LABEL_65;
    }
    v225(v139, (uint64_t)v282);
    swift_release();
  }
  uint64_t v171 = v269;
  uint64_t v172 = (void (*)(unsigned char *, char *, uint64_t))v267;
  if (v279)
  {
    uint64_t v173 = (uint64_t)v282;
    sub_100827044((uint64_t)v282, v169);
    uint64_t v174 = v247;
    v172(v247, v281, v129);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v272 + 48))(v174, 1, v173) == 1)
    {
      ((void (*)(unsigned char *, uint64_t))v259)(v174, v129);
      uint64_t v175 = 1;
      uint64_t v176 = v246;
      uint64_t v177 = v249;
      uint64_t v178 = v248;
    }
    else
    {
      uint64_t v178 = v248;
      sub_100827044(v173, (uint64_t)v248);
      v225((uint64_t)v174, v173);
      uint64_t v175 = 0;
      uint64_t v176 = v246;
      uint64_t v177 = v249;
    }
    uint64_t v181 = v284;
    (*(void (**)(char *, uint64_t, uint64_t, int *))(v171 + 56))(v178, v175, 1, v284);
    uint64_t result = (void *)swift_weakLoadStrong();
    uint64_t v179 = v286;
    unsigned __int8 v180 = v257;
    if (!result) {
      goto LABEL_129;
    }
    uint64_t v182 = (void *)(*(uint64_t (**)(void *))(*result + 176))(result);
    swift_release();
    uint64_t v183 = (uint64_t)v224;
    uint64_t v184 = v278;
    sub_10010EB4C((uint64_t)v224, v178, v182);
    uint64_t v278 = v184;
    if (v184)
    {
      swift_release();
      (*(void (**)(char *, uint64_t))(v177 + 8))(v178, v176);
      return (void *)((uint64_t (*)(uint64_t, int *))v265)(v183, v181);
    }
    swift_release();
    (*(void (**)(char *, uint64_t))(v177 + 8))(v178, v176);
    v265(v183, v181);
  }
  else
  {
    uint64_t v179 = v286;
    unsigned __int8 v180 = v257;
  }
  BOOL v185 = sub_100827AAC((uint64_t)v282);
  uint64_t v186 = v245;
  uint64_t v187 = v244;
  if (!v185) {
    goto LABEL_95;
  }
  if (qword_100ACC0F0 != -1) {
    swift_once();
  }
  uint64_t v188 = static Fields.all;
  if (!static Fields.all)
  {
    uint64_t v189 = 16;
    goto LABEL_84;
  }
  if ((static Fields.all & 0x10) == 0)
  {
    uint64_t v189 = static Fields.all | 0x10;
LABEL_84:
    if (sub_10082A8D4(v189, 0, (uint64_t)v268)) {
      goto LABEL_95;
    }
    v188 |= 0x10uLL;
    goto LABEL_87;
  }
  if (sub_10082A8D4(static Fields.all, 0, (uint64_t)v268)) {
    goto LABEL_95;
  }
LABEL_87:
  if (!sub_10082A8D4(v188, 0, v262)
    && *(unsigned char *)(v179 + v268[11]) == 3
    && *((unsigned char *)v270 + 16) != 2
    && *(unsigned char *)(v102 + 16) != 2)
  {
    sub_10096B0D0();
    sub_10096B080();
    double v191 = v190;
    uint64_t result = (void *)(*(uint64_t (**)(unsigned char *, uint64_t))(v187 + 8))(v180, v186);
    double v192 = v191 * 1000000000.0;
    if ((~COERCE__INT64(v191 * 1000000000.0) & 0x7FF0000000000000) != 0)
    {
      if (v192 > -9.22337204e18)
      {
        if (v192 < 9.22337204e18)
        {
          uint64_t v193 = (void *)(v179 + *((int *)v282 + 16));
          void *v193 = 0x2000000000000000;
          v193[1] = (uint64_t)v192;
          goto LABEL_95;
        }
        goto LABEL_126;
      }
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
      goto LABEL_128;
    }
LABEL_124:
    __break(1u);
    goto LABEL_125;
  }
LABEL_95:
  uint64_t result = (void *)swift_weakLoadStrong();
  if (!result)
  {
LABEL_130:
    __break(1u);
LABEL_131:
    __break(1u);
    goto LABEL_132;
  }
  char v194 = (*(uint64_t (**)(void *))(*result + 152))(result);
  swift_release();
  unsigned __int8 v195 = v219;
  if ((((v194 & 8) != 0) & v219) == 1 && *((unsigned char *)v270 + 16) == 1)
  {
    uint64_t result = (void *)swift_weakLoadStrong();
    if (!result)
    {
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
      goto LABEL_136;
    }
    (*(void (**)(void *))(*result + 304))(result);
    swift_release();
  }
  uint64_t result = (void *)swift_weakLoadStrong();
  if (!result) {
    goto LABEL_131;
  }
  char v196 = (*(uint64_t (**)(void *))(*result + 152))(result);
  uint64_t result = (void *)swift_release();
  if ((((v196 & 8) != 0) & v195) == 1 && *(unsigned char *)(v102 + 16) == 1)
  {
    uint64_t result = (void *)swift_weakLoadStrong();
    if (result)
    {
      (*(void (**)(void *))(*result + 304))(result);
      return (void *)swift_release();
    }
    goto LABEL_135;
  }
  return result;
}

uint64_t sub_1000EE93C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = a1 + *(int *)(type metadata accessor for ItemReconciliationHalf() + 64);
  uint64_t v11 = *(void *)v9;
  uint64_t v10 = *(void *)(v9 + 8);
  if (*(unsigned char *)(v9 + 16))
  {
    sub_10009C5FC(*(void *)v9, *(void *)(v9 + 8), *(unsigned char *)(v9 + 16));
  }
  else
  {
    unint64_t v12 = v11 & a3;
    swift_retain();
    if (v12)
    {
      uint64_t v20 = v11;
      while (1)
      {
        unint64_t v13 = __clz(__rbit64(v12));
        uint64_t v14 = v12 & ~(1 << v13);
        if (((1 << v13) & v12) == 0) {
          uint64_t v14 = v12;
        }
        if (v13 >= 0x40) {
          uint64_t v15 = 0;
        }
        else {
          uint64_t v15 = 1 << v13;
        }
        if (v13 < 0x40) {
          unint64_t v12 = v14;
        }
        char v16 = sub_1000F99B4(v15, a1, a2, a4);
        if (v4) {
          break;
        }
        BOOL v17 = (v15 & v11) == 0 || (v16 & 1) == 0;
        uint64_t v18 = -1;
        if (!v17) {
          uint64_t v18 = ~v15;
        }
        v11 &= v18;
        if (!v12) {
          goto LABEL_19;
        }
      }
      sub_1000D31F8(v20, v10, 0);
    }
    else
    {
LABEL_19:
      if (!v11) {
        return v10;
      }
    }
  }
  return v11;
}

uint64_t sub_1000EEA74@<X0>(void (*a1)(char *, char *, uint64_t)@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  v589 = a1;
  uint64_t v581 = a2;
  v586 = a3;
  uint64_t v4 = *v3;
  uint64_t v5 = *(void **)(*v3 + 96);
  uint64_t v6 = *(void *)(*v3 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v592 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = (void *)swift_getAssociatedConformanceWitness();
  uint64_t v594 = swift_getAssociatedConformanceWitness();
  uint64_t v7 = type metadata accessor for FileItemVersion();
  uint64_t v526 = sub_10096C890();
  uint64_t v525 = *(void *)(v526 - 8);
  uint64_t v8 = __chkstk_darwin(v526);
  v522 = (char *)&v493 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  v503 = (char *)&v493 - v11;
  uint64_t v532 = v7;
  uint64_t v527 = *(void *)(v7 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  v523 = (char *)&v493 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v504 = (char *)&v493 - v14;
  uint64_t v15 = *(void *)(v4 + 88);
  v568 = v3;
  uint64_t v16 = *(void *)(v4 + 104);
  uint64_t v567 = type metadata accessor for ItemReconciliationHalf();
  uint64_t v565 = *(void *)(v567 - 8);
  uint64_t v17 = __chkstk_darwin(v567);
  v563 = (char *)&v493 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v17);
  v562 = (char *)&v493 - v20;
  __chkstk_darwin(v19);
  v515 = (char *)&v493 - v21;
  uint64_t v22 = type metadata accessor for SnapshotItem();
  uint64_t v519 = sub_10096C890();
  uint64_t v517 = *(void *)(v519 - 8);
  uint64_t v23 = __chkstk_darwin(v519);
  v546 = (char *)&v493 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __chkstk_darwin(v23);
  v545 = (char *)&v493 - v26;
  uint64_t v536 = v22;
  uint64_t v533 = *(void *)(v22 - 8);
  uint64_t v27 = __chkstk_darwin(v25);
  v512 = (char *)&v493 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v510 = (char *)&v493 - v29;
  uint64_t v30 = swift_getAssociatedTypeWitness();
  uint64_t v31 = swift_getAssociatedTypeWitness();
  uint64_t v32 = swift_getAssociatedConformanceWitness();
  uint64_t v33 = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = v30;
  uint64_t v592 = v31;
  uint64_t AssociatedConformanceWitness = (void *)v32;
  uint64_t v594 = v33;
  uint64_t v34 = type metadata accessor for FileItemVersion();
  uint64_t v528 = sub_10096C890();
  uint64_t v524 = *(void *)(v528 - 8);
  uint64_t v35 = __chkstk_darwin(v528);
  v521 = (char *)&v493 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = __chkstk_darwin(v35);
  v501 = (char *)&v493 - v38;
  uint64_t v531 = v34;
  uint64_t v530 = *(void *)(v34 - 8);
  uint64_t v39 = __chkstk_darwin(v37);
  v513 = (char *)&v493 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v39);
  v502 = (char *)&v493 - v41;
  uint64_t v42 = swift_getAssociatedTypeWitness();
  uint64_t v572 = sub_10096C890();
  uint64_t v570 = *(void *)(v572 - 8);
  uint64_t v43 = __chkstk_darwin(v572);
  v561 = (char *)&v493 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = __chkstk_darwin(v43);
  v560 = (char *)&v493 - v46;
  uint64_t v47 = __chkstk_darwin(v45);
  v559 = (char *)&v493 - v48;
  uint64_t v49 = __chkstk_darwin(v47);
  v579 = (char *)&v493 - v50;
  uint64_t v51 = __chkstk_darwin(v49);
  v578 = (char *)&v493 - v52;
  uint64_t v53 = __chkstk_darwin(v51);
  v544 = (char *)&v493 - v54;
  uint64_t v55 = __chkstk_darwin(v53);
  v507 = (char *)&v493 - v56;
  uint64_t v576 = v42;
  v573 = *(unsigned int (***)(char *, uint64_t, uint64_t))(v42 - 8);
  uint64_t v57 = __chkstk_darwin(v55);
  v543 = (char *)&v493 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = __chkstk_darwin(v57);
  v542 = (char *)&v493 - v60;
  uint64_t v61 = __chkstk_darwin(v59);
  v551 = (char *)&v493 - v62;
  uint64_t v63 = __chkstk_darwin(v61);
  v547 = (char *)&v493 - v64;
  uint64_t v65 = __chkstk_darwin(v63);
  v549 = (char *)&v493 - v66;
  uint64_t v67 = __chkstk_darwin(v65);
  v529 = (char *)&v493 - v68;
  __chkstk_darwin(v67);
  v508 = (char *)&v493 - v69;
  uint64_t v566 = type metadata accessor for ItemReconciliationHalf();
  uint64_t v564 = *(void *)(v566 - 8);
  uint64_t v70 = __chkstk_darwin(v566);
  v558 = (char *)&v493 - ((v71 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = __chkstk_darwin(v70);
  v557 = (char *)&v493 - v73;
  __chkstk_darwin(v72);
  v514 = (char *)&v493 - v74;
  uint64_t v75 = type metadata accessor for SnapshotItem();
  uint64_t v518 = sub_10096C890();
  uint64_t v516 = *(void *)(v518 - 8);
  uint64_t v76 = __chkstk_darwin(v518);
  v541 = (char *)&v493 - ((v77 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = __chkstk_darwin(v76);
  v540 = (char *)&v493 - v79;
  uint64_t v535 = v75;
  uint64_t v534 = *(void *)(v75 - 8);
  uint64_t v80 = __chkstk_darwin(v78);
  v511 = (char *)&v493 - ((v81 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v80);
  v509 = (char *)&v493 - v82;
  uint64_t v83 = swift_getAssociatedTypeWitness();
  uint64_t v571 = sub_10096C890();
  uint64_t v569 = *(void *)(v571 - 8);
  uint64_t v84 = __chkstk_darwin(v571);
  v539 = (char *)&v493 - ((v85 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = __chkstk_darwin(v84);
  v505 = (char *)&v493 - v87;
  uint64_t v88 = __chkstk_darwin(v86);
  v556 = (char *)&v493 - v89;
  uint64_t v90 = __chkstk_darwin(v88);
  v555 = (char *)&v493 - v91;
  uint64_t v92 = __chkstk_darwin(v90);
  v553 = (char *)&v493 - v93;
  uint64_t v94 = __chkstk_darwin(v92);
  v577 = (uint64_t *)((char *)&v493 - v95);
  uint64_t v96 = __chkstk_darwin(v94);
  v554 = (char *)&v493 - v97;
  uint64_t v574 = v83;
  uint64_t v575 = *(void *)(v83 - 8);
  uint64_t v98 = __chkstk_darwin(v96);
  v520 = (char *)&v493 - ((v99 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v100 = __chkstk_darwin(v98);
  v506 = (char *)&v493 - v101;
  uint64_t v102 = __chkstk_darwin(v100);
  v538 = (char *)&v493 - v103;
  uint64_t v104 = __chkstk_darwin(v102);
  v537 = (char *)&v493 - v105;
  uint64_t v106 = __chkstk_darwin(v104);
  v550 = (char *)&v493 - v107;
  uint64_t v108 = __chkstk_darwin(v106);
  v552 = (char *)&v493 - v109;
  __chkstk_darwin(v108);
  v548 = (char *)&v493 - v110;
  uint64_t v111 = sub_10096B480();
  uint64_t v587 = *(void *)(v111 - 8);
  uint64_t v588 = v111;
  uint64_t v112 = __chkstk_darwin(v111);
  unsigned int v114 = (char *)&v493 - ((v113 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v112);
  v580 = (char *)&v493 - v115;
  uint64_t v584 = v6;
  v585 = v5;
  uint64_t AssociatedTypeWitness = v6;
  uint64_t v592 = v15;
  uint64_t v582 = v15;
  v583 = (void *)v16;
  uint64_t AssociatedConformanceWitness = v5;
  uint64_t v594 = v16;
  uint64_t v116 = type metadata accessor for ItemReconciliation();
  uint64_t v117 = sub_10096C890();
  uint64_t v118 = *(void *)(v117 - 8);
  uint64_t v119 = __chkstk_darwin(v117);
  uint64_t v121 = (char *)&v493 - v120;
  uint64_t v122 = *(void *)(v116 - 8);
  uint64_t v123 = __chkstk_darwin(v119);
  uint64_t v125 = (char *)&v493 - ((v124 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v126 = __chkstk_darwin(v123);
  unint64_t v128 = (char *)&v493 - v127;
  __chkstk_darwin(v126);
  uint64_t v130 = (char *)&v493 - v129;
  (*(void (**)(char *, void (*)(void, void), uint64_t))(v118 + 16))(v121, (void (*)(void, void))v589, v117);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v122 + 48))(v121, 1, v116) == 1)
  {
    (*(void (**)(char *, uint64_t))(v118 + 8))(v121, v117);
    id v131 = (id)fpfs_current_or_default_log();
    sub_10096B490();
    uint64_t v132 = sub_10096B470();
    os_log_type_t v133 = sub_10096C5A0();
    if (os_log_type_enabled(v132, v133))
    {
      uint64_t v134 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v134 = 0;
      _os_log_impl((void *)&_mh_execute_header, v132, v133, "[interactive] testingOperationForEntry, missing entry", v134, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v587 + 8))(v114, v588);
    uint64_t AssociatedTypeWitness = v584;
    uint64_t v592 = v582;
    uint64_t AssociatedConformanceWitness = v585;
    uint64_t v594 = (uint64_t)v583;
    uint64_t v135 = type metadata accessor for TestingOperation();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v135 - 8) + 56))(v586, 1, 1, v135);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v122 + 32))(v130, v121, v116);
    uint64_t v137 = v590;
    uint64_t v138 = sub_10082AA44(v581, v116);
    uint64_t v141 = v122;
    if (v137) {
      return (*(uint64_t (**)(char *, uint64_t))(v122 + 8))(v130, v116);
    }
    uint64_t v142 = v139;
    uint64_t v590 = 0;
    unint64_t v143 = v140;
    unint64_t v144 = v138;
    id v145 = (id)fpfs_current_or_default_log();
    int v146 = v580;
    sub_10096B490();
    uint64_t v500 = v141;
    uint64_t v147 = *(void (**)(char *, char *, uint64_t))(v141 + 16);
    v499 = v130;
    v589 = v147;
    v147(v128, v130, v116);
    unint64_t v498 = v144 >> 62;
    sub_10010D750(v144, v142, v143);
    sub_10010D750(v144, v142, v143);
    uint64_t v148 = v146;
    uint64_t v149 = sub_10096B470();
    os_log_type_t v150 = sub_10096C5A0();
    v497 = v149;
    int v496 = v150;
    BOOL v151 = os_log_type_enabled(v149, v150);
    uint64_t v581 = (uint64_t)v143;
    if (v151)
    {
      uint64_t v152 = swift_slowAlloc();
      uint64_t v495 = v142;
      uint64_t v153 = v152;
      uint64_t v494 = swift_slowAlloc();
      uint64_t AssociatedTypeWitness = v494;
      *(_DWORD *)uint64_t v153 = 136315394;
      uint64_t v493 = v153 + 4;
      v589(v125, v128, v116);
      uint64_t v154 = *(void (**)(char *, char *, uint64_t))(v500 + 8);
      v589 = v154;
      ((void (*)(char *, uint64_t))v154)(v128, v116);
      uint64_t v155 = sub_10082F470(v116);
      unint64_t v157 = v156;
      ((void (*)(char *, uint64_t))v154)(v125, v116);
      uint64_t v598 = sub_100719D44(v155, v157, &AssociatedTypeWitness);
      sub_10096C8C0();
      swift_bridgeObjectRelease();
      *(_WORD *)(v153 + 12) = 2080;
      uint64_t v158 = v495;
      sub_10010D750(v144, v495, v143);
      uint64_t v159 = sub_10083282C(v144, v158, (unint64_t)v143);
      unint64_t v161 = v160;
      sub_10010D75C(v144);
      uint64_t v598 = sub_100719D44(v159, v161, &AssociatedTypeWitness);
      sub_10096C8C0();
      swift_bridgeObjectRelease();
      sub_10010D75C(v144);
      uint64_t v162 = v144;
      sub_10010D75C(v144);
      uint64_t v163 = v497;
      _os_log_impl((void *)&_mh_execute_header, v497, (os_log_type_t)v496, "[interactive] testingOperationForEntry, entry=%s, status=%s", (uint8_t *)v153, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v587 + 8))(v580, v588);
      uint64_t v164 = v158;
    }
    else
    {
      v589 = *(void (**)(char *, char *, uint64_t))(v500 + 8);
      ((void (*)(char *, uint64_t))v589)(v128, v116);
      sub_10010D75C(v144);
      uint64_t v162 = v144;
      sub_10010D75C(v144);

      (*(void (**)(char *, uint64_t))(v587 + 8))(v148, v588);
      uint64_t v164 = v142;
    }
    uint64_t v165 = v578;
    uint64_t v166 = v579;
    uint64_t v167 = v499;
    uint64_t v168 = v577;
    if (v498 == 1)
    {
      switch((char)v162)
      {
        case 0:
          uint64_t v588 = v162;
          uint64_t v495 = v164;
          uint64_t Strong = swift_weakLoadStrong();
          if (!Strong) {
            goto LABEL_100;
          }
          uint64_t v179 = *(void *)(Strong + 40);
          swift_retain();
          swift_release();
          unsigned __int8 v180 = &v167[*(int *)(v116 + 52)];
          uint64_t v181 = v570;
          uint64_t v182 = v572;
          (*(void (**)(char *, char *, uint64_t))(v570 + 16))(v165, v180, v572);
          uint64_t v183 = v167;
          uint64_t v184 = v573;
          if (v573[6](v165, 1, v576) == 1)
          {
            swift_release();
            sub_10010D75C(v588);
            ((void (*)(char *, uint64_t))v589)(v183, v116);
            (*(void (**)(char *, uint64_t))(v181 + 8))(v165, v182);
            goto LABEL_21;
          }
          v580 = v180;
          uint64_t v587 = v116;
          uint64_t v274 = v184[4];
          unint64_t v275 = v549;
          uint64_t v276 = v576;
          v274(v549, (uint64_t)v165, v576);
          id v277 = v545;
          uint64_t v278 = v590;
          (*(void (**)(char *, uint64_t))(*(void *)v179 + 240))(v275, 1);
          if (v278)
          {
            swift_release();
            sub_10010D75C(v588);
            ((void (*)(char *, uint64_t))v184[1])(v275, v276);
            return ((uint64_t (*)(char *, uint64_t))v589)(v499, v587);
          }
          uint64_t v305 = v533;
          uint64_t v306 = v536;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v533 + 48))(v277, 1, v536) == 1)
          {
            swift_release();
            sub_10010D75C(v588);
            ((void (*)(char *, uint64_t))v573[1])(v549, v576);
            ((void (*)(char *, uint64_t))v589)(v499, v587);
            (*(void (**)(char *, uint64_t))(v517 + 8))(v277, v519);
            goto LABEL_21;
          }
          uint64_t v366 = v306;
          v367 = (char *)(v305 + 32);
          v368 = *(void (**)(char *, char *, uint64_t))(v305 + 32);
          v369 = v277;
          v370 = v510;
          v368(v510, v369, v366);
          uint64_t v371 = (*(uint64_t (**)(char *))(*(void *)v179 + 296))(v549);
          uint64_t v590 = 0;
          char v405 = v372;
          v579 = (char *)v371;
          uint64_t v406 = v536;
          v578 = v367;
          swift_release();
          uint64_t v407 = sub_10010D75C(v588);
          if ((v405 & 1) == 0)
          {
            __chkstk_darwin(v407);
            strcpy((char *)&v493 - 48, " item version domainVersion ");
            uint64_t v408 = v576;
            uint64_t AssociatedTypeWitness = v576;
            uint64_t v592 = v519;
            uint64_t AssociatedConformanceWitness = &type metadata for UInt;
            uint64_t v594 = sub_100033BE8((uint64_t *)&unk_100AD6860);
            TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
            v340 = v586;
            uint64_t v410 = &v586[TupleTypeMetadata[12]];
            uint64_t v411 = TupleTypeMetadata[16];
            uint64_t v588 = TupleTypeMetadata[20];
            v274(v586, (uint64_t)v549, v408);
            v368(v410, v370, v406);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v533 + 56))(v410, 0, 1, v406);
            uint64_t v412 = v580;
            *(void *)&v340[v411] = v579;
            uint64_t v413 = v565;
            v414 = v515;
            uint64_t v415 = v567;
            (*(void (**)(char *, char *, uint64_t))(v565 + 16))(v515, v412, v567);
            ((void (*)(char *, uint64_t))v589)(v499, v587);
            v416 = *(void **)&v414[*(int *)(v415 + 72)];
            v417 = *(void (**)(char *, uint64_t))(v413 + 8);
            id v418 = v416;
            v417(v414, v415);
            *(void *)&v340[v588] = v416;
            uint64_t v419 = v582;
            uint64_t v351 = (uint64_t)v583;
            uint64_t v420 = v584;
            uint64_t v353 = v585;
            uint64_t AssociatedTypeWitness = v582;
            uint64_t v592 = v584;
            uint64_t AssociatedConformanceWitness = v583;
            uint64_t v594 = (uint64_t)v585;
            type metadata accessor for DirectionalTestingOperation();
            swift_storeEnumTagMultiPayload();
            uint64_t AssociatedTypeWitness = v420;
            uint64_t v592 = v419;
            goto LABEL_69;
          }
          (*(void (**)(char *, uint64_t))(v533 + 8))(v370, v406);
          v429 = v573[1];
          v431 = &v581;
          goto LABEL_88;
        case 1:
          uint64_t v588 = v162;
          uint64_t v495 = v164;
          uint64_t v213 = swift_weakLoadStrong();
          if (!v213) {
            goto LABEL_102;
          }
          uint64_t v214 = *(void *)(v213 + 40);
          swift_retain();
          swift_release();
          uint64_t v215 = &v167[*(int *)(v116 + 52)];
          uint64_t v216 = v570;
          uint64_t v217 = v572;
          (*(void (**)(char *, char *, uint64_t))(v570 + 16))(v166, v215, v572);
          uint64_t v218 = v573;
          uint64_t v219 = v576;
          if (v573[6](v166, 1, v576) == 1)
          {
            swift_release();
            sub_10010D75C(v588);
            ((void (*)(char *, uint64_t))v589)(v499, v116);
            (*(void (**)(char *, uint64_t))(v216 + 8))(v166, v217);
            goto LABEL_21;
          }
          v580 = v215;
          uint64_t v269 = v214;
          uint64_t v270 = v218[4];
          uint64_t v271 = v547;
          v270(v547, (uint64_t)v166, v219);
          uint64_t v272 = v546;
          uint64_t v273 = v590;
          (*(void (**)(char *, uint64_t))(*(void *)v214 + 240))(v271, 1);
          if (v273)
          {
            swift_release();
            sub_10010D75C(v588);
            ((void (*)(char *, uint64_t))v218[1])(v271, v219);
            return ((uint64_t (*)(char *, uint64_t))v589)(v499, v116);
          }
          v578 = (char *)(v218 + 4);
          v579 = (char *)v270;
          uint64_t v303 = v533;
          uint64_t v304 = v536;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v533 + 48))(v272, 1, v536) == 1)
          {
            swift_release();
            sub_10010D75C(v588);
            ((void (*)(char *, uint64_t))v573[1])(v271, v576);
            ((void (*)(char *, uint64_t))v589)(v499, v116);
            (*(void (**)(char *, uint64_t))(v517 + 8))(v272, v519);
            goto LABEL_21;
          }
          uint64_t v587 = v116;
          uint64_t v362 = v303 + 32;
          v361 = *(void (**)(char *, char *, uint64_t))(v303 + 32);
          v363 = v512;
          v361(v512, v272, v304);
          uint64_t v364 = (*(uint64_t (**)(char *))(*(void *)v269 + 296))(v271);
          uint64_t v590 = 0;
          uint64_t v398 = v364;
          char v399 = v365;
          swift_release();
          sub_10010D75C(v588);
          if (v399)
          {
            (*(void (**)(char *, uint64_t))(v303 + 8))(v363, v304);
            v429 = v573[1];
            v431 = (uint64_t *)&v579;
LABEL_88:
            v430 = (char *)*(v431 - 32);
            v432 = &v601;
LABEL_91:
            ((void (*)(char *, void))v429)(v430, *(v432 - 32));
            ((void (*)(char *, uint64_t))v589)(v499, v587);
            goto LABEL_21;
          }
          uint64_t v588 = (uint64_t)v361;
          uint64_t v400 = v569;
          uint64_t v401 = v505;
          uint64_t v402 = v499;
          (*(void (**)(char *, char *, uint64_t))(v569 + 16))(v505, v499, v571);
          uint64_t v403 = v575;
          uint64_t v404 = v574;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v575 + 48))(v401, 1, v574) == 1)
          {
            (*(void (**)(char *, uint64_t))(v533 + 8))(v363, v536);
            ((void (*)(char *, uint64_t))v573[1])(v547, v576);
            ((void (*)(char *, uint64_t))v589)(v402, v587);
            (*(void (**)(char *, uint64_t))(v400 + 8))(v401, v571);
            goto LABEL_21;
          }
          uint64_t v581 = v362;
          v433 = *(void (**)(char *, char *, uint64_t))(v403 + 32);
          v577 = (uint64_t *)(v403 + 32);
          uint64_t v572 = (uint64_t)v433;
          v433(v506, v401, v404);
          v434 = &v402[*(int *)(v566 + 48)];
          uint64_t v435 = v525;
          v436 = v503;
          uint64_t v437 = v526;
          (*(void (**)(char *, char *))(v525 + 16))(v503, v434);
          uint64_t v438 = v527;
          uint64_t v439 = v532;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v527 + 48))(v436, 1, v532) == 1)
          {
            (*(void (**)(char *, uint64_t))(v403 + 8))(v506, v404);
            (*(void (**)(char *, uint64_t))(v533 + 8))(v512, v536);
            ((void (*)(char *, uint64_t))v573[1])(v547, v576);
            ((void (*)(char *, uint64_t))v589)(v499, v587);
            (*(void (**)(char *, uint64_t))(v435 + 8))(v436, v437);
            goto LABEL_21;
          }
          v445 = *(unsigned int (***)(char *, uint64_t, uint64_t))(v438 + 32);
          uint64_t v570 = v438 + 32;
          v573 = v445;
          uint64_t v446 = ((uint64_t (*)(char *, char *, uint64_t))v445)(v504, v436, v439);
          __chkstk_darwin(v446);
          strcpy((char *)&v493 - 80, " item destinationItemID baseVersion fields version domainVersion ");
          uint64_t v447 = v576;
          uint64_t AssociatedTypeWitness = v576;
          uint64_t v592 = v519;
          uint64_t AssociatedConformanceWitness = (void *)v571;
          uint64_t v594 = v437;
          v595 = &type metadata for Fields;
          v596 = &type metadata for UInt;
          uint64_t v597 = sub_100033BE8((uint64_t *)&unk_100AD6860);
          v448 = (int *)swift_getTupleTypeMetadata();
          v449 = v586;
          v450 = &v586[v448[12]];
          v451 = &v586[v448[16]];
          v452 = &v586[v448[20]];
          uint64_t v569 = v448[24];
          v568 = (uint64_t *)v448[28];
          uint64_t v571 = v448[32];
          ((void (*)(char *, char *, uint64_t))v579)(v586, v547, v447);
          uint64_t v453 = v438;
          uint64_t v454 = v536;
          ((void (*)(char *, char *, uint64_t))v588)(v450, v512, v536);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v533 + 56))(v450, 0, 1, v454);
          ((void (*)(char *, char *, uint64_t))v572)(v451, v506, v404);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v403 + 56))(v451, 0, 1, v404);
          v455 = v452;
          v456 = v452;
          uint64_t v457 = v532;
          ((void (*)(char *, char *, uint64_t))v573)(v456, v504, v532);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v453 + 56))(v455, 0, 1, v457);
          *(void *)&v449[v569] = v495;
          *(uint64_t *)((char *)v568 + (void)v449) = v398;
          uint64_t v458 = v565;
          v459 = v515;
          uint64_t v460 = v567;
          (*(void (**)(char *, char *, uint64_t))(v565 + 16))(v515, v580, v567);
          ((void (*)(char *, uint64_t))v589)(v499, v587);
          v461 = *(void **)&v459[*(int *)(v460 + 72)];
          v462 = *(void (**)(char *, uint64_t))(v458 + 8);
          id v463 = v461;
          v462(v459, v460);
          *(void *)&v449[v571] = v461;
          uint64_t v465 = v582;
          uint64_t v464 = (uint64_t)v583;
          uint64_t v467 = v584;
          v466 = v585;
          uint64_t AssociatedTypeWitness = v582;
          uint64_t v592 = v584;
          uint64_t AssociatedConformanceWitness = v583;
          uint64_t v594 = (uint64_t)v585;
          type metadata accessor for DirectionalTestingOperation();
          swift_storeEnumTagMultiPayload();
          uint64_t AssociatedTypeWitness = v467;
          uint64_t v592 = v465;
          uint64_t AssociatedConformanceWitness = v466;
          uint64_t v594 = v464;
          uint64_t v468 = type metadata accessor for TestingOperation();
          swift_storeEnumTagMultiPayload();
          return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(*(void *)(v468 - 8) + 56))(v449, 0, 1, v468);
        case 2:
          uint64_t v227 = v499;
          sub_10010D75C(v162);
          uint64_t v228 = &v167[*(int *)(v116 + 52)];
          uint64_t v229 = v570;
          uint64_t v230 = v559;
          uint64_t v231 = v572;
          (*(void (**)(char *, char *, uint64_t))(v570 + 16))(v559, v228, v572);
          uint64_t v232 = v573;
          uint64_t v233 = v576;
          if (v573[6](v230, 1, v576) == 1)
          {
            ((void (*)(char *, uint64_t))v589)(v227, v116);
            (*(void (**)(char *, uint64_t))(v229 + 8))(v230, v231);
            goto LABEL_21;
          }
          uint64_t v587 = v116;
          uint64_t v252 = v232[4];
          uint64_t v253 = v551;
          uint64_t v588 = (uint64_t)(v232 + 4);
          uint64_t v581 = (uint64_t)v252;
          v252(v551, (uint64_t)v230, v233);
          uint64_t v254 = v569;
          uint64_t v255 = v539;
          uint64_t v256 = v571;
          (*(void (**)(char *, char *, uint64_t))(v569 + 16))(v539, v227, v571);
          uint64_t v257 = v574;
          if ((*(unsigned int (**)(char *, uint64_t))(v575 + 48))(v255, 1) == 1)
          {
            ((void (*)(char *, uint64_t))v232[1])(v253, v233);
            ((void (*)(char *, uint64_t))v589)(v499, v587);
            uint64_t v258 = *(void (**)(char *, uint64_t))(v254 + 8);
            uint64_t v259 = v255;
            uint64_t v260 = v256;
LABEL_44:
            v258(v259, v260);
            goto LABEL_21;
          }
          v580 = v228;
          uint64_t v292 = v520;
          uint64_t v293 = v255;
          uint64_t v294 = v257;
          v578 = *(char **)(v575 + 32);
          v579 = (char *)(v575 + 32);
          ((void (*)(char *, char *, uint64_t))v578)(v520, v293, v257);
          uint64_t v295 = v499;
          uint64_t v296 = v525;
          uint64_t v297 = v522;
          uint64_t v298 = v526;
          (*(void (**)(char *, char *, uint64_t))(v525 + 16))(v522, &v499[*(int *)(v566 + 48)], v526);
          uint64_t v299 = v527;
          uint64_t v300 = v532;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v527 + 48))(v297, 1, v532) == 1)
          {
            (*(void (**)(char *, uint64_t))(v575 + 8))(v292, v294);
            ((void (*)(char *, uint64_t))v573[1])(v551, v576);
            ((void (*)(char *, uint64_t))v589)(v295, v587);
            (*(void (**)(char *, uint64_t))(v296 + 8))(v297, v298);
            goto LABEL_21;
          }
          uint64_t v334 = (void *)v298;
          uint64_t v335 = *(uint64_t (**)(char *, char *, uint64_t))(v299 + 32);
          v577 = (uint64_t *)(v299 + 32);
          uint64_t v336 = v335(v523, v297, v300);
          uint64_t v337 = v299;
          __chkstk_darwin(v336);
          strcpy((char *)&v493 - 64, " destinationItemID baseVersion recursive domainVersion ");
          uint64_t v338 = v576;
          uint64_t AssociatedTypeWitness = v576;
          uint64_t v592 = v571;
          uint64_t AssociatedConformanceWitness = v334;
          uint64_t v594 = sub_100033BE8((uint64_t *)&unk_100AD7510);
          v595 = (ValueMetadata *)sub_100033BE8((uint64_t *)&unk_100AD6860);
          uint64_t v339 = (int *)swift_getTupleTypeMetadata();
          v340 = v586;
          uint64_t v341 = &v586[v339[12]];
          uint64_t v342 = &v586[v339[16]];
          v573 = (unsigned int (**)(char *, uint64_t, uint64_t))v339[20];
          uint64_t v343 = v339[24];
          ((void (*)(char *, char *, uint64_t))v581)(v586, v551, v338);
          ((void (*)(char *, char *, uint64_t))v578)(v341, v292, v294);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v575 + 56))(v341, 0, 1, v294);
          uint64_t v344 = v532;
          v335(v342, v523, v532);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v337 + 56))(v342, 0, 1, v344);
          *((unsigned char *)v573 + (void)v340) = 0;
          uint64_t v345 = v565;
          uint64_t v346 = v515;
          uint64_t v347 = v567;
          (*(void (**)(char *, char *, uint64_t))(v565 + 16))(v515, v580, v567);
          ((void (*)(char *, uint64_t))v589)(v499, v587);
          v348 = *(void **)&v346[*(int *)(v347 + 72)];
          v349 = *(void (**)(char *, uint64_t))(v345 + 8);
          id v350 = v348;
          v349(v346, v347);
          *(void *)&v340[v343] = v348;
          uint64_t v352 = v582;
          uint64_t v351 = (uint64_t)v583;
          uint64_t v354 = v584;
          uint64_t v353 = v585;
          uint64_t AssociatedTypeWitness = v582;
          uint64_t v592 = v584;
          uint64_t AssociatedConformanceWitness = v583;
          uint64_t v594 = (uint64_t)v585;
          type metadata accessor for DirectionalTestingOperation();
          swift_storeEnumTagMultiPayload();
          uint64_t AssociatedTypeWitness = v354;
          uint64_t v592 = v352;
LABEL_69:
          uint64_t AssociatedConformanceWitness = v353;
          uint64_t v594 = v351;
          uint64_t v355 = type metadata accessor for TestingOperation();
          swift_storeEnumTagMultiPayload();
          return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(*(void *)(v355 - 8) + 56))(v340, 0, 1, v355);
        case 6:
          sub_10010D75C(v162);
          uint64_t v191 = v565;
          double v192 = v563;
          uint64_t v193 = v567;
          (*(void (**)(char *, char *, uint64_t))(v565 + 16))(v563, &v167[*(int *)(v116 + 52)], v567);
          ((void (*)(char *, uint64_t))v589)(v167, v116);
          uint64_t v194 = v570;
          unsigned __int8 v195 = v561;
          uint64_t v196 = v572;
          (*(void (**)(char *, char *, uint64_t))(v570 + 16))(v561, v192, v572);
          (*(void (**)(char *, uint64_t))(v191 + 8))(v192, v193);
          uint64_t v197 = v573;
          uint64_t v198 = v576;
          if (v573[6](v195, 1, v576) == 1) {
            goto LABEL_39;
          }
          uint64_t v199 = v197[4];
          uint64_t v200 = v543;
          v199(v543, (uint64_t)v195, v198);
          uint64_t v201 = v586;
          v199(v586, (uint64_t)v200, v198);
          uint64_t v203 = v582;
          uint64_t v202 = (uint64_t)v583;
          uint64_t v205 = v584;
          v204 = v585;
          uint64_t AssociatedTypeWitness = v582;
          uint64_t v592 = v584;
          uint64_t AssociatedConformanceWitness = v583;
          uint64_t v594 = (uint64_t)v585;
          type metadata accessor for DirectionalTestingOperation();
          goto LABEL_46;
        case 12:
          goto LABEL_20;
        case 23:
          sub_10010D75C(v162);
          uint64_t v234 = v565;
          uint64_t v235 = v562;
          uint64_t v236 = v567;
          (*(void (**)(char *, char *, uint64_t))(v565 + 16))(v562, &v167[*(int *)(v116 + 52)], v567);
          ((void (*)(char *, uint64_t))v589)(v167, v116);
          uint64_t v194 = v570;
          unsigned __int8 v195 = v560;
          uint64_t v196 = v572;
          (*(void (**)(char *, char *, uint64_t))(v570 + 16))(v560, v235, v572);
          (*(void (**)(char *, uint64_t))(v234 + 8))(v235, v236);
          uint64_t v237 = v573;
          uint64_t v238 = v576;
          if (v573[6](v195, 1, v576) == 1)
          {
LABEL_39:
            (*(void (**)(char *, uint64_t))(v194 + 8))(v195, v196);
            goto LABEL_21;
          }
          uint64_t v239 = v237[4];
          uint64_t v240 = v542;
          v239(v542, (uint64_t)v195, v238);
          uint64_t v201 = v586;
          v239(v586, (uint64_t)v240, v238);
          uint64_t v203 = v582;
          uint64_t v202 = (uint64_t)v583;
          uint64_t v205 = v584;
          v204 = v585;
          uint64_t AssociatedTypeWitness = v582;
          uint64_t v592 = v584;
          uint64_t AssociatedConformanceWitness = v583;
          uint64_t v594 = (uint64_t)v585;
          type metadata accessor for DirectionalTestingOperation();
LABEL_46:
          swift_storeEnumTagMultiPayload();
          uint64_t AssociatedTypeWitness = v205;
          uint64_t v592 = v203;
          uint64_t AssociatedConformanceWitness = v204;
          uint64_t v594 = v202;
          uint64_t v263 = type metadata accessor for TestingOperation();
          swift_storeEnumTagMultiPayload();
          uint64_t result = (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(*(void *)(v263 - 8) + 56))(v201, 0, 1, v263);
          break;
        default:
          sub_100714D4C("/Library/Caches/com.apple.xbs/Sources/FileProviderExtensions/fssync/libfssync/interfaces/persistence/ReconciliationTable.swift", 126, 2, 1050, v162);
      }
    }
    else
    {
      if (!v498)
      {
        switch((char)v162)
        {
          case 0:
            uint64_t v588 = v162;
            uint64_t v495 = v164;
            uint64_t v169 = swift_weakLoadStrong();
            if (!v169)
            {
              __break(1u);
LABEL_100:
              __break(1u);
LABEL_101:
              __break(1u);
LABEL_102:
              __break(1u);
LABEL_103:
              sub_100714D4C("/Library/Caches/com.apple.xbs/Sources/FileProviderExtensions/fssync/libfssync/interfaces/persistence/ReconciliationTable.swift", 126, 2, 999, v162);
            }
            uint64_t v170 = *(void *)(v169 + 32);
            swift_retain();
            swift_release();
            uint64_t v171 = v569;
            uint64_t v172 = v554;
            uint64_t v173 = v167;
            uint64_t v174 = v167;
            uint64_t v175 = v571;
            (*(void (**)(char *, char *, uint64_t))(v569 + 16))(v554, v173, v571);
            uint64_t v176 = v575;
            uint64_t v177 = v574;
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v575 + 48))(v172, 1, v574) == 1)
            {
              swift_release();
              sub_10010D75C(v588);
              ((void (*)(char *, uint64_t))v589)(v174, v116);
              (*(void (**)(char *, uint64_t))(v171 + 8))(v172, v175);
              goto LABEL_21;
            }
            uint64_t v587 = v116;
            uint64_t v264 = v170;
            uint64_t v265 = *(void (**)(char *, char *, uint64_t))(v176 + 32);
            uint64_t v266 = v548;
            v265(v548, v172, v177);
            uint64_t v267 = v540;
            uint64_t v268 = v590;
            (*(void (**)(char *, uint64_t))(*(void *)v264 + 240))(v266, 1);
            if (v268)
            {
              swift_release();
              sub_10010D75C(v588);
              (*(void (**)(char *, uint64_t))(v176 + 8))(v266, v177);
              return ((uint64_t (*)(char *, uint64_t))v589)(v499, v587);
            }
            uint64_t v301 = v534;
            uint64_t v302 = v535;
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v534 + 48))(v267, 1, v535) == 1)
            {
              swift_release();
              sub_10010D75C(v588);
              (*(void (**)(char *, uint64_t))(v575 + 8))(v548, v574);
              ((void (*)(char *, uint64_t))v589)(v499, v587);
              (*(void (**)(char *, uint64_t))(v516 + 8))(v267, v518);
              goto LABEL_21;
            }
            v580 = (char *)v265;
            uint64_t v356 = *(void (**)(char *, char *, uint64_t))(v301 + 32);
            uint64_t v357 = v509;
            v356(v509, v267, v302);
            uint64_t v358 = v548;
            uint64_t v359 = (*(uint64_t (**)(char *))(*(void *)v264 + 296))(v548);
            uint64_t v590 = 0;
            char v377 = v360;
            uint64_t v378 = v359;
            swift_release();
            uint64_t v379 = sub_10010D75C(v588);
            if ((v377 & 1) == 0)
            {
              __chkstk_darwin(v379);
              strcpy((char *)&v493 - 48, " item version domainVersion ");
              uint64_t v380 = v574;
              uint64_t AssociatedTypeWitness = v574;
              uint64_t v592 = v518;
              uint64_t AssociatedConformanceWitness = &type metadata for UInt;
              uint64_t v594 = sub_100033BE8((uint64_t *)&unk_100AD6860);
              uint64_t v381 = (int *)swift_getTupleTypeMetadata();
              v382 = &v586[v381[12]];
              uint64_t v581 = v381[16];
              uint64_t v588 = v381[20];
              BOOL v383 = v586;
              ((void (*)(char *, char *, uint64_t))v580)(v586, v358, v380);
              uint64_t v384 = v535;
              v356(v382, v357, v535);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v534 + 56))(v382, 0, 1, v384);
              *(void *)&v383[v581] = v378;
              BOOL v385 = v383;
              uint64_t v386 = v564;
              uint64_t v387 = v514;
              uint64_t v388 = v499;
              uint64_t v389 = v566;
              (*(void (**)(char *, char *, uint64_t))(v564 + 16))(v514, v499, v566);
              ((void (*)(char *, uint64_t))v589)(v388, v587);
              v390 = *(void **)&v387[*(int *)(v389 + 72)];
              uint64_t v391 = *(void (**)(char *, uint64_t))(v386 + 8);
              id v392 = v390;
              v391(v387, v389);
              *(void *)&v385[v588] = v390;
              uint64_t v394 = v584;
              v393 = v585;
              uint64_t v396 = v582;
              uint64_t v395 = (uint64_t)v583;
              uint64_t AssociatedTypeWitness = v584;
              uint64_t v592 = v582;
              uint64_t AssociatedConformanceWitness = v585;
              uint64_t v594 = (uint64_t)v583;
              type metadata accessor for DirectionalTestingOperation();
              swift_storeEnumTagMultiPayload();
              uint64_t AssociatedTypeWitness = v394;
              uint64_t v592 = v396;
              uint64_t AssociatedConformanceWitness = v393;
              uint64_t v594 = v395;
              uint64_t v397 = type metadata accessor for TestingOperation();
              swift_storeEnumTagMultiPayload();
              return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(*(void *)(v397 - 8) + 56))(v385, 0, 1, v397);
            }
            (*(void (**)(char *, uint64_t))(v534 + 8))(v357, v535);
            v429 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v575 + 8);
            v430 = v358;
LABEL_90:
            v432 = &v600;
            goto LABEL_91;
          case 1:
            uint64_t v588 = v162;
            uint64_t v495 = v164;
            uint64_t v206 = swift_weakLoadStrong();
            if (!v206) {
              goto LABEL_101;
            }
            uint64_t v207 = *(void *)(v206 + 32);
            swift_retain();
            swift_release();
            uint64_t v208 = v569;
            uint64_t v209 = v571;
            (*(void (**)(uint64_t *, char *, uint64_t))(v569 + 16))(v168, v167, v571);
            uint64_t v210 = v167;
            uint64_t v211 = v575;
            uint64_t v212 = v574;
            if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v575 + 48))(v168, 1, v574) == 1)
            {
              swift_release();
              sub_10010D75C(v588);
              ((void (*)(char *, uint64_t))v589)(v210, v116);
              (*(void (**)(uint64_t *, uint64_t))(v208 + 8))(v168, v209);
              goto LABEL_21;
            }
            uint64_t v587 = v116;
            uint64_t v279 = v552;
            uint64_t v280 = v168;
            unint64_t v281 = *(void (**)(char *, uint64_t *, uint64_t))(v211 + 32);
            v281(v552, v280, v212);
            uint64_t v282 = *(void (**)(char *, uint64_t))(*(void *)v207 + 240);
            uint64_t v283 = v207;
            uint64_t v284 = v541;
            uint64_t v285 = v590;
            v282(v279, 1);
            if (v285)
            {
              swift_release();
              sub_10010D75C(v588);
              (*(void (**)(char *, uint64_t))(v211 + 8))(v279, v212);
              return ((uint64_t (*)(char *, uint64_t))v589)(v499, v587);
            }
            uint64_t v307 = v283;
            uint64_t v308 = v534;
            uint64_t v309 = v535;
            uint64_t v310 = v284;
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v534 + 48))(v284, 1, v535) == 1)
            {
              swift_release();
              sub_10010D75C(v588);
              (*(void (**)(char *, uint64_t))(v575 + 8))(v552, v574);
              ((void (*)(char *, uint64_t))v589)(v499, v587);
              (*(void (**)(char *, uint64_t))(v516 + 8))(v284, v518);
              goto LABEL_21;
            }
            v580 = (char *)v281;
            v373 = *(void (**)(char *, char *, uint64_t))(v308 + 32);
            v374 = v511;
            v373(v511, v310, v309);
            uint64_t v375 = (*(uint64_t (**)(char *))(*(void *)v307 + 296))(v552);
            uint64_t v590 = 0;
            uint64_t v421 = v375;
            char v422 = v376;
            v579 = (char *)v373;
            swift_release();
            sub_10010D75C(v588);
            if (v422)
            {
              (*(void (**)(char *, uint64_t))(v534 + 8))(v374, v535);
              v429 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v575 + 8);
              v430 = v552;
              goto LABEL_90;
            }
            uint64_t v588 = v421;
            v423 = &v499[*(int *)(v587 + 52)];
            uint64_t v424 = v570;
            v425 = v507;
            (*(void (**)(char *, char *, uint64_t))(v570 + 16))(v507, v423, v572);
            v426 = v573;
            uint64_t v427 = v576;
            if (v573[6](v425, 1, v576) == 1)
            {
              (*(void (**)(char *, uint64_t))(v534 + 8))(v374, v535);
              (*(void (**)(char *, uint64_t))(v575 + 8))(v552, v574);
              ((void (*)(char *, uint64_t))v589)(v499, v587);
              uint64_t v258 = *(void (**)(char *, uint64_t))(v424 + 8);
              uint64_t v259 = v425;
              v428 = (char **)&v599;
            }
            else
            {
              v440 = (char *)v426[4];
              uint64_t v581 = (uint64_t)(v426 + 4);
              v578 = v440;
              ((void (*)(char *, char *, uint64_t))v440)(v508, v425, v427);
              uint64_t v441 = v524;
              v442 = v501;
              (*(void (**)(char *, char *, uint64_t))(v524 + 16))(v501, &v423[*(int *)(v567 + 48)], v528);
              uint64_t v443 = v530;
              uint64_t v444 = v531;
              if ((*(unsigned int (**)(char *, uint64_t))(v530 + 48))(v442, 1) != 1)
              {
                uint64_t v570 = *(void *)(v443 + 32);
                uint64_t v571 = v443 + 32;
                uint64_t v469 = ((uint64_t (*)(char *, char *, uint64_t))v570)(v502, v442, v444);
                v577 = &v493;
                __chkstk_darwin(v469);
                strcpy((char *)&v493 - 80, " item destinationItemID baseVersion fields version domainVersion ");
                uint64_t v470 = v574;
                uint64_t AssociatedTypeWitness = v574;
                uint64_t v592 = v518;
                uint64_t AssociatedConformanceWitness = (void *)v572;
                uint64_t v594 = v528;
                v595 = &type metadata for Fields;
                v596 = &type metadata for UInt;
                uint64_t v597 = sub_100033BE8((uint64_t *)&unk_100AD6860);
                v471 = (int *)swift_getTupleTypeMetadata();
                v472 = v586;
                v473 = &v586[v471[12]];
                v474 = &v586[v471[16]];
                v475 = &v586[v471[20]];
                uint64_t v575 = v471[24];
                uint64_t v572 = v471[28];
                v577 = (uint64_t *)v471[32];
                ((void (*)(char *, char *, uint64_t))v580)(v586, v552, v470);
                uint64_t v476 = v535;
                ((void (*)(char *, char *, uint64_t))v579)(v473, v511, v535);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v534 + 56))(v473, 0, 1, v476);
                uint64_t v477 = v576;
                ((void (*)(char *, char *, uint64_t))v578)(v474, v508, v576);
                ((void (*)(char *, void, uint64_t, uint64_t))v426[7])(v474, 0, 1, v477);
                v478 = v475;
                v479 = v475;
                uint64_t v480 = v531;
                ((void (*)(char *, char *, uint64_t))v570)(v479, v502, v531);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v443 + 56))(v478, 0, 1, v480);
                *(void *)&v472[v575] = v495;
                *(void *)&v472[v572] = v588;
                uint64_t v481 = v564;
                v482 = v514;
                v483 = v499;
                uint64_t v484 = v566;
                (*(void (**)(char *, char *, uint64_t))(v564 + 16))(v514, v499, v566);
                ((void (*)(char *, uint64_t))v589)(v483, v587);
                v485 = *(void **)&v482[*(int *)(v484 + 72)];
                v486 = *(void (**)(char *, uint64_t))(v481 + 8);
                id v487 = v485;
                v486(v482, v484);
                *(uint64_t *)((char *)v577 + (void)v472) = (uint64_t)v485;
                uint64_t v489 = v584;
                v488 = v585;
                uint64_t v491 = v582;
                uint64_t v490 = (uint64_t)v583;
                uint64_t AssociatedTypeWitness = v584;
                uint64_t v592 = v582;
                uint64_t AssociatedConformanceWitness = v585;
                uint64_t v594 = (uint64_t)v583;
                type metadata accessor for DirectionalTestingOperation();
                swift_storeEnumTagMultiPayload();
                uint64_t AssociatedTypeWitness = v489;
                uint64_t v592 = v491;
                uint64_t AssociatedConformanceWitness = v488;
                uint64_t v594 = v490;
                uint64_t v492 = type metadata accessor for TestingOperation();
                swift_storeEnumTagMultiPayload();
                return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(*(void *)(v492 - 8) + 56))(v472, 0, 1, v492);
              }
              ((void (*)(char *, uint64_t))v426[1])(v508, v576);
              (*(void (**)(char *, uint64_t))(v534 + 8))(v511, v535);
              (*(void (**)(char *, uint64_t))(v575 + 8))(v552, v574);
              ((void (*)(char *, uint64_t))v589)(v499, v587);
              uint64_t v258 = *(void (**)(char *, uint64_t))(v441 + 8);
              uint64_t v259 = v442;
              v428 = &v560;
            }
            uint64_t v260 = (uint64_t)*(v428 - 32);
            goto LABEL_44;
          case 2:
            sub_10010D75C(v162);
            uint64_t v186 = v569;
            uint64_t v187 = v553;
            uint64_t v188 = v571;
            (*(void (**)(char *, char *, uint64_t))(v569 + 16))(v553, v167, v571);
            uint64_t v189 = v575;
            uint64_t v190 = v574;
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v575 + 48))(v187, 1, v574) == 1)
            {
              ((void (*)(char *, uint64_t))v589)(v167, v116);
              (*(void (**)(char *, uint64_t))(v186 + 8))(v187, v188);
              goto LABEL_21;
            }
            uint64_t v246 = v550;
            uint64_t v581 = *(void *)(v189 + 32);
            ((void (*)(char *, char *, uint64_t))v581)(v550, v187, v190);
            uint64_t v247 = v570;
            uint64_t v248 = *(void (**)(char *))(v570 + 16);
            uint64_t v249 = v544;
            uint64_t v588 = (uint64_t)&v167[*(int *)(v116 + 52)];
            uint64_t v250 = v572;
            v248(v544);
            uint64_t v251 = v573;
            if (v573[6](v249, 1, v576) == 1)
            {
              (*(void (**)(char *, uint64_t))(v189 + 8))(v246, v574);
              ((void (*)(char *, uint64_t))v589)(v499, v116);
              (*(void (**)(char *, uint64_t))(v247 + 8))(v249, v250);
              goto LABEL_21;
            }
            v580 = (char *)(v189 + 32);
            uint64_t v286 = v529;
            v579 = (char *)v251[4];
            ((void (*)(char *, char *, uint64_t))v579)(v529, v249, v576);
            uint64_t v287 = v524;
            unint64_t v288 = v521;
            uint64_t v289 = (void *)v528;
            (*(void (**)(char *, uint64_t, uint64_t))(v524 + 16))(v521, v588 + *(int *)(v567 + 48), v528);
            uint64_t v290 = v530;
            uint64_t v291 = v531;
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v530 + 48))(v288, 1, v531) == 1)
            {
              ((void (*)(char *, uint64_t))v573[1])(v286, v576);
              (*(void (**)(char *, uint64_t))(v575 + 8))(v550, v574);
              ((void (*)(char *, uint64_t))v589)(v499, v116);
              (*(void (**)(char *, void *))(v287 + 8))(v288, v289);
              goto LABEL_21;
            }
            uint64_t v311 = *(uint64_t (**)(char *, char *, uint64_t))(v290 + 32);
            v578 = (char *)(v290 + 32);
            uint64_t v588 = (uint64_t)v311;
            uint64_t v312 = v513;
            uint64_t v313 = v311(v513, v288, v291);
            __chkstk_darwin(v313);
            strcpy((char *)&v493 - 64, " destinationItemID baseVersion recursive domainVersion ");
            uint64_t v314 = v574;
            uint64_t AssociatedTypeWitness = v574;
            uint64_t v592 = v572;
            uint64_t AssociatedConformanceWitness = v289;
            uint64_t v594 = sub_100033BE8((uint64_t *)&unk_100AD7510);
            v595 = (ValueMetadata *)sub_100033BE8((uint64_t *)&unk_100AD6860);
            uint64_t v315 = (int *)swift_getTupleTypeMetadata();
            uint64_t v316 = v499;
            uint64_t v317 = v586;
            uint64_t v318 = &v586[v315[12]];
            uint64_t v319 = &v586[v315[16]];
            uint64_t v587 = v116;
            uint64_t v320 = v315[20];
            v577 = (uint64_t *)v315[24];
            ((void (*)(char *, char *, uint64_t))v581)(v586, v550, v314);
            uint64_t v321 = v576;
            ((void (*)(char *, char *, uint64_t))v579)(v318, v529, v576);
            ((void (*)(char *, void, uint64_t, uint64_t))v573[7])(v318, 0, 1, v321);
            uint64_t v322 = v531;
            ((void (*)(char *, char *, uint64_t))v588)(v319, v312, v531);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v530 + 56))(v319, 0, 1, v322);
            v317[v320] = 1;
            uint64_t v323 = v564;
            uint64_t v324 = v514;
            uint64_t v325 = v566;
            (*(void (**)(char *, char *, uint64_t))(v564 + 16))(v514, v316, v566);
            ((void (*)(char *, uint64_t))v589)(v316, v587);
            uint64_t v326 = *(void **)&v324[*(int *)(v325 + 72)];
            uint64_t v327 = *(void (**)(char *, uint64_t))(v323 + 8);
            id v328 = v326;
            v327(v324, v325);
            *(uint64_t *)((char *)v577 + (void)v317) = (uint64_t)v326;
            uint64_t v330 = v584;
            uint64_t v329 = v585;
            uint64_t v332 = v582;
            uint64_t v331 = (uint64_t)v583;
            uint64_t AssociatedTypeWitness = v584;
            uint64_t v592 = v582;
            uint64_t AssociatedConformanceWitness = v585;
            uint64_t v594 = (uint64_t)v583;
            type metadata accessor for DirectionalTestingOperation();
            swift_storeEnumTagMultiPayload();
            uint64_t AssociatedTypeWitness = v330;
            uint64_t v592 = v332;
            uint64_t AssociatedConformanceWitness = v329;
            uint64_t v594 = v331;
            uint64_t v333 = type metadata accessor for TestingOperation();
            swift_storeEnumTagMultiPayload();
            return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(*(void *)(v333 - 8) + 56))(v317, 0, 1, v333);
          case 6:
            sub_10010D75C(v162);
            uint64_t v241 = v564;
            uint64_t v242 = v558;
            uint64_t v243 = v566;
            (*(void (**)(char *, char *, uint64_t))(v564 + 16))(v558, v167, v566);
            ((void (*)(char *, uint64_t))v589)(v167, v116);
            uint64_t v194 = v569;
            unsigned __int8 v195 = v556;
            uint64_t v196 = v571;
            (*(void (**)(char *, char *, uint64_t))(v569 + 16))(v556, v242, v571);
            (*(void (**)(char *, uint64_t))(v241 + 8))(v242, v243);
            uint64_t v244 = v575;
            uint64_t v245 = v574;
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v575 + 48))(v195, 1, v574) == 1) {
              goto LABEL_39;
            }
            uint64_t v261 = *(void (**)(char *, char *, uint64_t))(v244 + 32);
            uint64_t v262 = v538;
            v261(v538, v195, v245);
            uint64_t v201 = v586;
            v261(v586, v262, v245);
            uint64_t v205 = v584;
            v204 = v585;
            uint64_t v203 = v582;
            uint64_t v202 = (uint64_t)v583;
            uint64_t AssociatedTypeWitness = v584;
            uint64_t v592 = v582;
            uint64_t AssociatedConformanceWitness = v585;
            uint64_t v594 = (uint64_t)v583;
            type metadata accessor for DirectionalTestingOperation();
            goto LABEL_46;
          case 12:
            break;
          case 23:
            sub_10010D75C(v162);
            uint64_t v220 = v564;
            uint64_t v221 = v557;
            uint64_t v222 = v566;
            (*(void (**)(char *, char *, uint64_t))(v564 + 16))(v557, v167, v566);
            ((void (*)(char *, uint64_t))v589)(v167, v116);
            uint64_t v194 = v569;
            unsigned __int8 v195 = v555;
            uint64_t v196 = v571;
            (*(void (**)(char *, char *, uint64_t))(v569 + 16))(v555, v221, v571);
            (*(void (**)(char *, uint64_t))(v220 + 8))(v221, v222);
            uint64_t v223 = v575;
            uint64_t v224 = v574;
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v575 + 48))(v195, 1, v574) == 1) {
              goto LABEL_39;
            }
            int v225 = *(void (**)(char *, char *, uint64_t))(v223 + 32);
            uint64_t v226 = v537;
            v225(v537, v195, v224);
            uint64_t v201 = v586;
            v225(v586, v226, v224);
            uint64_t v205 = v584;
            v204 = v585;
            uint64_t v203 = v582;
            uint64_t v202 = (uint64_t)v583;
            uint64_t AssociatedTypeWitness = v584;
            uint64_t v592 = v582;
            uint64_t AssociatedConformanceWitness = v585;
            uint64_t v594 = (uint64_t)v583;
            type metadata accessor for DirectionalTestingOperation();
            goto LABEL_46;
          default:
            goto LABEL_103;
        }
      }
LABEL_20:
      sub_10010D75C(v162);
      ((void (*)(char *, uint64_t))v589)(v167, v116);
LABEL_21:
      uint64_t AssociatedTypeWitness = v584;
      uint64_t v592 = v582;
      uint64_t AssociatedConformanceWitness = v585;
      uint64_t v594 = (uint64_t)v583;
      uint64_t v185 = type metadata accessor for TestingOperation();
      return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v185 - 8) + 56))(v586, 1, 1, v185);
    }
  }
  return result;
}

uint64_t sub_1000F3424(unsigned char *a1, void (*a2)(char *, char *, uint64_t))
{
  unsigned int v114 = a2;
  uint64_t v111 = a1;
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = sub_10096A630();
  __chkstk_darwin(v4 - 8);
  uint64_t v95 = &v89[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v97 = sub_10096A650();
  uint64_t v96 = *(void *)(v97 - 8);
  __chkstk_darwin(v97);
  uint64_t v94 = &v89[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = v3[11];
  uint64_t v9 = (ValueMetadata *)v3[12];
  uint64_t v10 = (ValueMetadata *)v3[13];
  uint64_t v117 = v3[10];
  uint64_t v7 = v117;
  uint64_t v118 = v8;
  uint64_t v119 = v9;
  uint64_t v120 = v10;
  uint64_t v11 = type metadata accessor for TestingOperation();
  uint64_t v12 = sub_10096C890();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v93 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v13 = __chkstk_darwin(TupleTypeMetadata2);
  uint64_t v101 = &v89[-v14];
  uint64_t v104 = v12;
  uint64_t v103 = *(void *)(v12 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v92 = &v89[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v99 = &v89[-v18];
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v100 = &v89[-v20];
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v110 = &v89[-v22];
  uint64_t v112 = v11;
  uint64_t v107 = *(void *)(v11 - 8);
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v91 = &v89[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v23);
  uint64_t v102 = &v89[-v25];
  uint64_t v108 = v9;
  uint64_t v109 = v7;
  uint64_t v117 = v7;
  uint64_t v118 = v8;
  uint64_t v105 = v10;
  uint64_t v106 = v8;
  uint64_t v119 = v9;
  uint64_t v120 = v10;
  uint64_t v26 = type metadata accessor for ItemReconciliation();
  uint64_t v27 = sub_10096C890();
  uint64_t v115 = *(char **)(v27 - 8);
  uint64_t v116 = (void (*)(void, void, void))v27;
  uint64_t v28 = __chkstk_darwin(v27);
  uint64_t v30 = (void (*)(char *, char *, uint64_t))&v89[-((v29 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v31 = __chkstk_darwin(v28);
  uint64_t v33 = &v89[-v32];
  uint64_t v34 = *(void *)(v26 - 8);
  uint64_t v35 = __chkstk_darwin(v31);
  uint64_t v37 = &v89[-((v36 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v35);
  uint64_t v39 = &v89[-v38];
  uint64_t v113 = v2 + 2;
  uint64_t result = swift_weakLoadStrong();
  if (!result)
  {
    __break(1u);
    goto LABEL_31;
  }
  char v41 = (*(uint64_t (**)(uint64_t))(*(void *)result + 152))(result);
  uint64_t result = swift_release();
  if ((v41 & 0x80) == 0) {
    return result;
  }
  uint64_t v42 = v115;
  uint64_t v43 = v116;
  (*((void (**)(unsigned char *, void, void))v115 + 2))(v33, v114, v116);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v34 + 48))(v33, 1, v26) == 1)
  {
    (*((void (**)(unsigned char *, void (*)(void, void, void)))v42 + 1))(v33, v43);
    uint64_t v44 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v34 + 16);
    goto LABEL_6;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v34 + 32))(v39, v33, v26);
  uint64_t v48 = type metadata accessor for ItemReconciliationHalf();
  if (v39[*(int *)(v48 + 64) + 16] == 2) {
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v34 + 8))(v39, v26);
  }
  uint64_t v49 = v48;
  uint64_t v50 = &v39[*(int *)(v26 + 52)];
  uint64_t v51 = type metadata accessor for ItemReconciliationHalf();
  if (v50[*(int *)(v51 + 64) + 16] == 2) {
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v34 + 8))(v39, v26);
  }
  uint64_t v55 = v51;
  int v90 = v39[*(int *)(v49 + 52)];
  uint64_t v44 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v34 + 16);
  v44(v37, v39, v26);
  if (v90 == 1)
  {
    uint64_t v56 = *(void (**)(unsigned char *, uint64_t))(v34 + 8);
    v56(v37, v26);
    return ((uint64_t (*)(unsigned char *, uint64_t))v56)(v39, v26);
  }
  int v90 = v37[*(int *)(v26 + 52) + *(int *)(v55 + 52)];
  uint64_t v62 = v37;
  uint64_t v63 = *(void (**)(unsigned char *, uint64_t))(v34 + 8);
  v63(v62, v26);
  uint64_t result = ((uint64_t (*)(unsigned char *, uint64_t))v63)(v39, v26);
  if (v90 != 1)
  {
LABEL_6:
    uint64_t v45 = v121;
    v44(v30, v111, v26);
    (*(void (**)(void (*)(char *, char *, uint64_t), void, uint64_t, uint64_t))(v34 + 56))(v30, 0, 1, v26);
    uint64_t result = swift_weakLoadStrong();
    uint64_t v46 = v112;
    if (result)
    {
      uint64_t v47 = v110;
      sub_1000EEA74(v30, result, v110);
      if (v45)
      {
        (*((void (**)(void (*)(char *, char *, uint64_t), void (*)(void, void, void)))v115
         + 1))(v30, v116);
        return swift_release();
      }
      (*((void (**)(void (*)(char *, char *, uint64_t), void (*)(void, void, void)))v115
       + 1))(v30, v116);
      swift_release();
      uint64_t v52 = v107;
      uint64_t v53 = v46;
      uint64_t v54 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v107 + 48);
      if (v54(v47, 1, v53) == 1) {
        return (*(uint64_t (**)(char *, uint64_t))(v103 + 8))(v47, v104);
      }
      uint64_t v57 = *(void (**)(void, void, void))(v52 + 32);
      uint64_t v58 = v102;
      uint64_t v121 = v52 + 32;
      uint64_t v116 = v57;
      v57(v102, v47, v53);
      uint64_t v59 = v100;
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v52 + 16))(v100, v58, v53);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v52 + 56))(v59, 0, 1, v53);
      uint64_t result = swift_weakLoadStrong();
      if (result)
      {
        uint64_t v60 = v99;
        sub_1000EEA74(v114, result, v99);
        uint64_t v61 = v101;
        swift_release();
        uint64_t v64 = &v61[*(int *)(TupleTypeMetadata2 + 48)];
        uint64_t v65 = v59;
        uint64_t v66 = v104;
        uint64_t v67 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v103 + 16);
        v67(v61, v65, v104);
        uint64_t v115 = v64;
        uint64_t v68 = v64;
        uint64_t v69 = v112;
        uint64_t v70 = v66;
        uint64_t v71 = v67;
        v67(v68, v60, v70);
        if (v54(v61, 1, v69) == 1)
        {
          uint64_t v72 = v104;
          uint64_t v73 = *(void (**)(char *, uint64_t))(v103 + 8);
          v73(v60, v104);
          v73(v100, v72);
          uint64_t v74 = v69;
          if (v54(v115, 1, v69) == 1)
          {
            v73(v101, v72);
            return (*(uint64_t (**)(unsigned char *, uint64_t))(v107 + 8))(v102, v69);
          }
        }
        else
        {
          uint64_t v75 = (uint64_t)v92;
          v71(v92, v101, v104);
          uint64_t v76 = v115;
          uint64_t v74 = v69;
          if (v54(v115, 1, v69) != 1)
          {
            uint64_t v84 = (uint64_t)v91;
            v116(v91, v76, v69);
            char v85 = sub_1006972B0(v75, v84, v109, v106, v108, v105);
            uint64_t v86 = *(void (**)(uint64_t, uint64_t))(v107 + 8);
            v86(v84, v69);
            uint64_t v87 = v104;
            uint64_t v88 = *(void (**)(char *, uint64_t))(v103 + 8);
            v88(v99, v104);
            v88(v100, v87);
            v86(v75, v69);
            v88(v101, v87);
            if (v85) {
              return ((uint64_t (*)(unsigned char *, uint64_t))v86)(v102, v69);
            }
            goto LABEL_26;
          }
          uint64_t v77 = v104;
          uint64_t v78 = *(void (**)(char *, uint64_t))(v103 + 8);
          v78(v99, v104);
          v78(v100, v77);
          (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v75, v69);
        }
        (*(void (**)(char *, uint64_t))(v93 + 8))(v101, TupleTypeMetadata2);
LABEL_26:
        uint64_t result = swift_weakLoadStrong();
        if (result)
        {
          uint64_t v79 = result;
          sub_10096A590();
          sub_100042898((uint64_t)_swiftEmptyArrayStorage);
          sub_10010DA14();
          uint64_t v80 = v94;
          uint64_t v81 = v97;
          sub_10096ABD0();
          uint64_t v82 = (void *)sub_10096A4D0();
          (*(void (**)(unsigned char *, uint64_t))(v96 + 8))(v80, v81);
          uint64_t v83 = v102;
          (*(void (**)(unsigned char *, void *))(*(void *)v79 + 488))(v102, v82);
          swift_release();

          return (*(uint64_t (**)(unsigned char *, uint64_t))(v107 + 8))(v83, v74);
        }
        goto LABEL_33;
      }
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
      return result;
    }
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  return result;
}

BOOL sub_1000F40A4(char *a1, uint64_t a2)
{
  uint64_t v191 = a1;
  uint64_t v3 = *(void *)(a2 + 40);
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = sub_10096C890();
  uint64_t v180 = *(void *)(v6 - 8);
  uint64_t v181 = v6;
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v179 = (char *)&v152 - v8;
  uint64_t v186 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v168 = (char *)&v152 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v174 = (char *)&v152 - v11;
  uint64_t v12 = *(void *)(a2 + 32);
  uint64_t v13 = *(void *)(a2 + 16);
  uint64_t v14 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v16 = swift_getAssociatedConformanceWitness();
  uint64_t v195 = v14;
  uint64_t v196 = AssociatedTypeWitness;
  uint64_t v189 = AssociatedTypeWitness;
  uint64_t v184 = v16;
  uint64_t v185 = AssociatedConformanceWitness;
  uint64_t v197 = AssociatedConformanceWitness;
  uint64_t v198 = v16;
  uint64_t v17 = type metadata accessor for ReconciliationID();
  uint64_t v18 = sub_10096C890();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v163 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v19 = __chkstk_darwin(TupleTypeMetadata2);
  uint64_t v164 = (char *)&v152 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v170 = (char *)&v152 - v22;
  uint64_t v182 = v18;
  uint64_t v172 = *(void *)(v18 - 8);
  uint64_t v23 = __chkstk_darwin(v21);
  unint64_t v161 = (char *)&v152 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v162 = (char *)&v152 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v165 = (char *)&v152 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  unint64_t v160 = (char *)&v152 - v30;
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v166 = (char *)&v152 - v32;
  __chkstk_darwin(v31);
  uint64_t v169 = (char *)&v152 - v33;
  uint64_t v175 = v13;
  uint64_t v195 = v13;
  uint64_t v196 = v4;
  uint64_t v177 = v4;
  uint64_t v176 = v12;
  uint64_t v197 = v12;
  uint64_t v198 = v3;
  uint64_t v178 = v3;
  uint64_t v194 = type metadata accessor for ReconciliationMutation();
  uint64_t v188 = *(void *)(v194 - 8);
  uint64_t v34 = __chkstk_darwin(v194);
  uint64_t v171 = (char *)&v152 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = __chkstk_darwin(v34);
  uint64_t v183 = (char *)&v152 - v37;
  uint64_t v192 = v17;
  uint64_t v193 = *(void *)(v17 - 8);
  uint64_t v38 = __chkstk_darwin(v36);
  uint64_t v40 = (char *)&v152 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v38);
  uint64_t v42 = (char *)&v152 - v41;
  uint64_t v43 = sub_10096C890();
  uint64_t v44 = *(void *)(v43 - 8);
  uint64_t v45 = __chkstk_darwin(v43);
  uint64_t v47 = (char *)&v152 - v46;
  uint64_t v48 = __chkstk_darwin(v45);
  uint64_t v50 = (char *)&v152 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v48);
  uint64_t v52 = (char *)&v152 - v51;
  uint64_t v53 = v187 + *(int *)(a2 + 56);
  uint64_t v55 = v54;
  (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))(v47, v53, v43);
  uint64_t v56 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v55 + 48);
  uint64_t v190 = v14;
  int v57 = v56(v47, 1, v14);
  uint64_t v167 = v42;
  if (v57 == 1)
  {
    uint64_t v187 = (uint64_t)v40;
    (*(void (**)(char *, uint64_t))(v44 + 8))(v47, v43);
    uint64_t v58 = v191;
    uint64_t v59 = v193;
    goto LABEL_12;
  }
  uint64_t v157 = v53;
  uint64_t v60 = v190;
  (*(void (**)(char *, char *, uint64_t))(v55 + 32))(v52, v47, v190);
  sub_100149828(v194, (uint64_t)v42);
  uint64_t v158 = v55;
  uint64_t v159 = *(void (**)(char *, char *, uint64_t))(v55 + 16);
  v159(v40, v52, v60);
  uint64_t v61 = v192;
  swift_storeEnumTagMultiPayload();
  LODWORD(v187) = sub_1005EC104((uint64_t)v42, (uint64_t)v40, v60, v189);
  uint64_t v62 = v193 + 8;
  uint64_t v63 = *(void (**)(char *, uint64_t))(v193 + 8);
  v63(v40, v61);
  v63(v42, v61);
  uint64_t v64 = v188;
  uint64_t v65 = v183;
  (*(void (**)(char *, char *, uint64_t))(v188 + 16))(v183, v191, v194);
  uint64_t v66 = v60;
  uint64_t v67 = v159;
  v159(v50, v52, v66);
  if ((v187 & 1) == 0)
  {
    uint64_t v153 = (void (*)(uint64_t, uint64_t))v63;
    uint64_t v154 = v62;
    unint64_t v156 = v52;
    uint64_t v187 = (uint64_t)v40;
    uint64_t v70 = (uint64_t)v169;
    sub_10014A004(v194, (uint64_t)v169);
    uint64_t v71 = v166;
    v67(v166, v50, v190);
    uint64_t v72 = v192;
    swift_storeEnumTagMultiPayload();
    uint64_t v73 = v193;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v193 + 56))(v71, 0, 1, v72);
    uint64_t v74 = v170;
    uint64_t v75 = &v170[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v76 = v172;
    uint64_t v159 = (void (*)(char *, char *, uint64_t))v50;
    uint64_t v77 = *(void (**)(char *, uint64_t, uint64_t))(v172 + 16);
    uint64_t v78 = v182;
    v77(v170, v70, v182);
    uint64_t v155 = v75;
    v77(v75, (uint64_t)v71, v78);
    uint64_t v79 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v73 + 48);
    int v80 = v79(v74, 1, v72);
    uint64_t v81 = v183;
    if (v80 == 1)
    {
      uint64_t v82 = *(void (**)(char *, uint64_t))(v76 + 8);
      uint64_t v83 = v182;
      v82(v71, v182);
      v82(v169, v83);
      uint64_t v84 = *(void (**)(void (*)(char *, char *, uint64_t), uint64_t))(v158 + 8);
      uint64_t v85 = v190;
      v84(v159, v190);
      (*(void (**)(char *, uint64_t))(v188 + 8))(v81, v194);
      v84((void (*)(char *, char *, uint64_t))v156, v85);
      if (v79(v155, 1, v192) == 1)
      {
        v82(v170, v182);
        return 1;
      }
    }
    else
    {
      uint64_t v86 = (uint64_t)v160;
      v77(v160, (uint64_t)v74, v182);
      uint64_t v87 = v155;
      uint64_t v88 = v192;
      if (v79(v155, 1, v192) != 1)
      {
        uint64_t v93 = (uint64_t)v167;
        (*(void (**)(char *, char *, uint64_t))(v193 + 32))(v167, v87, v88);
        uint64_t v94 = v190;
        LODWORD(v155) = sub_1005EC104(v86, v93, v190, v189);
        uint64_t v95 = v153;
        v153(v93, v88);
        uint64_t v96 = *(void (**)(char *, uint64_t))(v172 + 8);
        uint64_t v97 = v182;
        v96(v166, v182);
        v96(v169, v97);
        uint64_t v98 = *(void (**)(void (*)(char *, char *, uint64_t), uint64_t))(v158 + 8);
        v98(v159, v94);
        (*(void (**)(char *, uint64_t))(v188 + 8))(v183, v194);
        uint64_t v99 = v94;
        uint64_t v59 = v193;
        v98((void (*)(char *, char *, uint64_t))v156, v99);
        v95(v86, v88);
        v96(v170, v97);
        uint64_t v58 = v191;
        uint64_t v53 = v157;
        if (v155) {
          return 1;
        }
LABEL_12:
        uint64_t v195 = v175;
        uint64_t v196 = v177;
        uint64_t v197 = v176;
        uint64_t v198 = v178;
        uint64_t v100 = type metadata accessor for ItemReconciliation();
        uint64_t v102 = v179;
        uint64_t v101 = v180;
        uint64_t v103 = v181;
        (*(void (**)(char *, uint64_t, uint64_t))(v180 + 16))(v179, v53 + *(int *)(v100 + 52), v181);
        uint64_t v104 = v186;
        uint64_t v105 = v189;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v186 + 48))(v102, 1, v189) == 1)
        {
          (*(void (**)(char *, uint64_t))(v101 + 8))(v102, v103);
          return 0;
        }
        uint64_t v107 = v174;
        (*(void (**)(char *, char *, uint64_t))(v104 + 32))(v174, v102, v105);
        uint64_t v108 = (uint64_t)v167;
        sub_100149828(v194, (uint64_t)v167);
        uint64_t v109 = *(void (**)(uint64_t, char *, uint64_t))(v104 + 16);
        uint64_t v110 = v187;
        v109(v187, v107, v105);
        uint64_t v111 = v192;
        swift_storeEnumTagMultiPayload();
        LODWORD(v191) = sub_1005EC104(v108, v110, v190, v105);
        uint64_t v113 = *(void (**)(uint64_t, uint64_t))(v59 + 8);
        uint64_t v112 = v59 + 8;
        v113(v110, v111);
        uint64_t v114 = v111;
        uint64_t v115 = (char *)v113;
        v113(v108, v114);
        uint64_t v116 = v105;
        uint64_t v117 = v194;
        uint64_t v118 = v188;
        uint64_t v119 = v171;
        (*(void (**)(char *, char *, uint64_t))(v188 + 16))(v171, v58, v194);
        uint64_t v120 = v168;
        v109((uint64_t)v168, v107, v116);
        if (v191)
        {
          uint64_t v121 = *(void (**)(char *, uint64_t))(v186 + 8);
          v121(v120, v116);
          (*(void (**)(char *, uint64_t))(v118 + 8))(v119, v117);
          v121(v174, v116);
          return 1;
        }
        uint64_t v183 = v115;
        uint64_t v187 = v112;
        uint64_t v122 = (uint64_t)v165;
        uint64_t v123 = v120;
        sub_10014A004(v117, (uint64_t)v165);
        uint64_t v124 = v162;
        v109((uint64_t)v162, v123, v116);
        uint64_t v125 = v124;
        uint64_t v126 = v192;
        swift_storeEnumTagMultiPayload();
        uint64_t v127 = v193;
        (*(void (**)(char *, void, uint64_t, uint64_t))(v193 + 56))(v124, 0, 1, v126);
        unint64_t v128 = v164;
        uint64_t v129 = &v164[*(int *)(TupleTypeMetadata2 + 48)];
        uint64_t v130 = v172;
        id v131 = *(void (**)(char *, uint64_t, uint64_t))(v172 + 16);
        uint64_t v132 = v182;
        v131(v164, v122, v182);
        uint64_t v191 = v129;
        os_log_type_t v133 = v129;
        uint64_t v134 = v132;
        v131(v133, (uint64_t)v125, v132);
        uint64_t v135 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v127 + 48);
        unsigned int v136 = v135(v128, 1, v126);
        uint64_t v137 = v171;
        if (v136 == 1)
        {
          uint64_t v138 = *(void (**)(char *, uint64_t))(v130 + 8);
          v138(v125, v132);
          v138(v165, v132);
          uint64_t v139 = *(void (**)(char *, uint64_t))(v186 + 8);
          uint64_t v140 = v135;
          uint64_t v141 = v189;
          v139(v168, v189);
          (*(void (**)(char *, uint64_t))(v188 + 8))(v137, v194);
          v139(v174, v141);
          if (v140(v191, 1, v192) == 1)
          {
            v138(v164, v132);
            return 1;
          }
        }
        else
        {
          uint64_t v142 = v189;
          uint64_t v143 = v193;
          v131(v161, (uint64_t)v128, v132);
          unint64_t v144 = v191;
          if (v135(v191, 1, v192) != 1)
          {
            uint64_t v147 = (uint64_t)v167;
            uint64_t v148 = v192;
            (*(void (**)(char *, char *, uint64_t))(v143 + 32))(v167, v144, v192);
            uint64_t v149 = (uint64_t)v161;
            LODWORD(v193) = sub_1005EC104((uint64_t)v161, v147, v190, v142);
            ((void (*)(uint64_t, uint64_t))v183)(v147, v148);
            os_log_type_t v150 = *(void (**)(char *, uint64_t))(v172 + 8);
            v150(v125, v134);
            v150(v165, v134);
            BOOL v151 = *(void (**)(char *, uint64_t))(v186 + 8);
            v151(v168, v142);
            (*(void (**)(char *, uint64_t))(v188 + 8))(v171, v194);
            v151(v174, v142);
            ((void (*)(uint64_t, uint64_t))v183)(v149, v148);
            v150(v128, v134);
            return (v193 & 1) != 0;
          }
          id v145 = *(void (**)(char *, uint64_t))(v172 + 8);
          v145(v125, v134);
          v145(v165, v134);
          int v146 = *(void (**)(char *, uint64_t))(v186 + 8);
          v146(v168, v142);
          (*(void (**)(char *, uint64_t))(v188 + 8))(v171, v194);
          v146(v174, v142);
          ((void (*)(char *, uint64_t))v183)(v161, v192);
        }
        (*(void (**)(char *, uint64_t))(v163 + 8))(v164, TupleTypeMetadata2);
        return 0;
      }
      uint64_t v89 = *(void (**)(char *, uint64_t))(v172 + 8);
      uint64_t v90 = v182;
      v89(v166, v182);
      v89(v169, v90);
      uint64_t v91 = *(void (**)(void (*)(char *, char *, uint64_t), uint64_t))(v158 + 8);
      uint64_t v92 = v190;
      v91(v159, v190);
      (*(void (**)(char *, uint64_t))(v188 + 8))(v183, v194);
      v91((void (*)(char *, char *, uint64_t))v156, v92);
      v153(v86, v88);
    }
    (*(void (**)(char *, uint64_t))(v163 + 8))(v170, TupleTypeMetadata2);
    uint64_t v58 = v191;
    uint64_t v59 = v193;
    uint64_t v53 = v157;
    goto LABEL_12;
  }
  uint64_t v68 = *(void (**)(char *, uint64_t))(v158 + 8);
  uint64_t v69 = v190;
  v68(v50, v190);
  (*(void (**)(char *, uint64_t))(v64 + 8))(v65, v194);
  v68(v52, v69);
  return 1;
}

uint64_t sub_1000F540C@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, uint64_t a10)
{
  *(void *)a9 = a1;
  *(unsigned char *)(a9 + 8) = a2 & 1;
  uint64_t v14 = (int *)type metadata accessor for ReconciliationTable.CachedEntry();
  uint64_t v15 = a9 + v14[13];
  uint64_t v16 = type metadata accessor for ItemReconciliation();
  uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 32);
  v17(v15, a3, v16);
  v17(a9 + v14[14], a4, v16);
  uint64_t v18 = (void *)(a9 + v14[15]);
  void *v18 = a5;
  v18[1] = a6;
  uint64_t v19 = a9 + v14[16];
  *(void *)uint64_t v19 = a7;
  *(unsigned char *)(v19 + 8) = a8;
  uint64_t v20 = a9 + v14[17];
  uint64_t v21 = sub_10096C890();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 32))(v20, a10, v21);
}

uint64_t sub_1000F5580(uint64_t *a1)
{
  uint64_t v175 = a1;
  uint64_t v2 = v1 + 16;
  uint64_t v3 = *(char **)(*(void *)v1 + 80);
  uint64_t v4 = *(char **)(*(void *)v1 + 88);
  uint64_t v5 = *(void *)(*(void *)v1 + 96);
  uint64_t v6 = *(void *)(*(void *)v1 + 104);
  uint64_t v179 = v3;
  uint64_t v180 = v4;
  uint64_t v181 = v5;
  uint64_t v182 = v6;
  uint64_t v7 = type metadata accessor for ReconciliationTable.CachedEntry();
  uint64_t v152 = sub_10096C890();
  uint64_t v151 = *(void *)(v152 - 8);
  __chkstk_darwin(v152);
  os_log_type_t v150 = (char *)v143 - v8;
  uint64_t v163 = sub_10096B480();
  uint64_t v162 = *(void *)(v163 - 8);
  uint64_t v9 = __chkstk_darwin(v163);
  uint64_t v158 = (uint64_t)v143 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  unint64_t v156 = (char *)v143 - v12;
  uint64_t v159 = *(void *)(v7 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v155 = (char *)v143 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v164 = (uint64_t)v143 - v15;
  uint64_t v165 = v3;
  uint64_t v179 = v3;
  uint64_t v180 = v4;
  uint64_t v166 = v4;
  uint64_t v169 = v5;
  uint64_t v181 = v5;
  uint64_t v182 = v6;
  uint64_t v168 = v6;
  uint64_t v16 = type metadata accessor for ItemReconciliation();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v154 = ((char *)v143 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v157 = (void (*)(char *, uint64_t, uint64_t))((char *)v143 - v21);
  uint64_t v22 = __chkstk_darwin(v20);
  unint64_t v167 = (unint64_t)v143 - v23;
  __chkstk_darwin(v22);
  unint64_t v161 = (char *)v143 - v24;
  uint64_t v176 = v25;
  uint64_t v26 = sub_10096C890();
  TupleTypeMetadata2 = (int *)swift_getTupleTypeMetadata2();
  uint64_t v160 = *((void *)TupleTypeMetadata2 - 1);
  uint64_t v27 = __chkstk_darwin(TupleTypeMetadata2);
  uint64_t v29 = (char *)v143 - v28;
  uint64_t v174 = *(void (**)(char *, uint64_t))(v26 - 8);
  uint64_t v30 = __chkstk_darwin(v27);
  uint64_t v153 = (char *)v143 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v172 = (char *)v143 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v36 = (char *)v143 - v35;
  __chkstk_darwin(v34);
  uint64_t v38 = (char *)v143 - v37;
  uint64_t v171 = v2;
  uint64_t result = swift_weakLoadStrong();
  if (!result)
  {
    __break(1u);
    goto LABEL_40;
  }
  char v40 = (*(uint64_t (**)(uint64_t))(*(void *)result + 152))(result);
  swift_release();
  if ((v40 & 8) != 0
    || (v170 = v17, uint64_t v41 = v175, v42 = v176, v43 = (char *)v175 + *(int *)(v7 + 56), !sub_10082AC18(v176)))
  {
    char v57 = 0;
    return v57 & 1;
  }
  uint64_t v144 = v7;
  uint64_t v44 = (char *)v41 + *(int *)(v7 + 68);
  uint64_t v45 = (void (*)(char *, char *, uint64_t))*((void *)v174 + 2);
  v45(v38, v44, v26);
  uint64_t v46 = v29;
  uint64_t v47 = v170;
  uint64_t v48 = *(void (**)(unint64_t, char *, uint64_t))(v170 + 16);
  id v145 = v43;
  uint64_t v146 = v170 + 16;
  uint64_t v148 = v48;
  v48((unint64_t)v36, v43, v42);
  uint64_t v49 = *(void (**)(char *, void, uint64_t, uint64_t))(v47 + 56);
  v143[1] = v47 + 56;
  v143[0] = v49;
  v49(v36, 0, 1, v42);
  uint64_t v50 = (uint64_t)&v46[TupleTypeMetadata2[12]];
  v45(v46, v38, v26);
  uint64_t v149 = (char *)v50;
  v45((char *)v50, v36, v26);
  uint64_t v51 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v47 + 48);
  int v52 = v51(v46, 1, v42);
  uint64_t v147 = v46;
  if (v52 == 1)
  {
    uint64_t v53 = (void (*)(char *, uint64_t))*((void *)v174 + 1);
    v53(v36, v26);
    v53(v38, v26);
    int v54 = v51(v149, 1, v42);
    uint64_t v55 = v183;
    uint64_t v56 = v42;
    if (v54 == 1)
    {
      v53(v147, v26);
LABEL_16:
      id v73 = (id)fpfs_current_or_default_log();
      uint64_t v74 = v158;
      sub_10096B490();
      uint64_t v75 = sub_10096B470();
      os_log_type_t v76 = sub_10096C5A0();
      if (os_log_type_enabled(v75, v76))
      {
        uint64_t v77 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v77 = 0;
        _os_log_impl((void *)&_mh_execute_header, v75, v76, "item is still runnable after reconciliation, breaking loop", v77, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(uint64_t, uint64_t))(v162 + 8))(v74, v163);
      char v57 = 0;
      return v57 & 1;
    }
    goto LABEL_11;
  }
  v45(v172, v46, v26);
  int v58 = v51(v149, 1, v42);
  uint64_t v59 = (void (**)(uint64_t, uint64_t))(v170 + 8);
  uint64_t v56 = v42;
  if (v58 == 1)
  {
    uint64_t v60 = (void (*)(char *, uint64_t))*((void *)v174 + 1);
    v60(v36, v26);
    v60(v38, v26);
    (*v59)((uint64_t)v172, v42);
    uint64_t v55 = v183;
LABEL_11:
    (*(void (**)(char *, int *))(v160 + 8))(v147, TupleTypeMetadata2);
    uint64_t v61 = v170;
    uint64_t v62 = v55;
    goto LABEL_12;
  }
  uint64_t v67 = (uint64_t)v172;
  uint64_t v68 = v170;
  uint64_t v69 = v170 + 32;
  unint64_t v70 = (unint64_t)v161;
  (*(void (**)(char *, char *, uint64_t))(v170 + 32))(v161, v149, v56);
  LODWORD(TupleTypeMetadata2) = sub_1008325EC(v67, v70, v165, v166, v169, v168);
  uint64_t v71 = *(void (**)(unint64_t, uint64_t))(v69 - 24);
  v71(v70, v56);
  uint64_t v72 = (void (*)(char *, uint64_t))*((void *)v174 + 1);
  v72(v36, v26);
  v72(v38, v26);
  v71(v67, v176);
  v72(v147, v26);
  uint64_t v56 = v176;
  uint64_t v62 = v183;
  uint64_t v61 = v68;
  if (TupleTypeMetadata2) {
    goto LABEL_16;
  }
LABEL_12:
  unint64_t v63 = v167;
  v148(v167, v145, v56);
  uint64_t result = swift_weakLoadStrong();
  if (!result)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v64 = sub_10082AD38(result, v56);
  if (v62)
  {
    (*(void (**)(unint64_t, uint64_t))(v61 + 8))(v63, v56);
    swift_release();
    return v57 & 1;
  }
  unint64_t v78 = v64;
  uint64_t v79 = v65;
  unint64_t v80 = v66;
  uint64_t v82 = *(void (**)(char *, uint64_t))(v61 + 8);
  uint64_t v81 = v61 + 8;
  uint64_t v174 = v82;
  v82((char *)v63, v56);
  swift_release();
  if (v78 >> 62 == 2 && v78 <= 0x8000000000000001)
  {
    char v57 = v79 | v80;
    if (!(v79 | v80)) {
      return v57 & 1;
    }
  }
  uint64_t v170 = v81;
  unint64_t v167 = v78;
  uint64_t v172 = (char *)v79;
  TupleTypeMetadata2 = (int *)v80;
  uint64_t v83 = v175;
  uint64_t v183 = *v175;
  LODWORD(v160) = *((unsigned __int8 *)v175 + 8);
  uint64_t v84 = v144;
  uint64_t v85 = (uint64_t)v161;
  uint64_t v86 = v148;
  v148((unint64_t)v161, (char *)v175 + *(int *)(v144 + 52), v56);
  uint64_t v87 = v145;
  v86((unint64_t)v157, v145, v56);
  uint64_t v88 = *(int *)(v84 + 64);
  uint64_t v89 = (uint64_t *)((char *)v83 + *(int *)(v84 + 60));
  uint64_t v91 = *v89;
  uint64_t v90 = v89[1];
  uint64_t v149 = (char *)v91;
  uint64_t v158 = v90;
  uint64_t v92 = (char *)v83 + v88;
  uint64_t v93 = *(uint64_t *)((char *)v83 + v88);
  LODWORD(v175) = v92[8];
  uint64_t v94 = (uint64_t)v153;
  v86((unint64_t)v153, v87, v56);
  ((void (*)(uint64_t, void, uint64_t, uint64_t))v143[0])(v94, 0, 1, v56);
  uint64_t v95 = v164;
  sub_1000F540C(v183, v160, v85, (uint64_t)v157, (uint64_t)v149, v158, v93, (char)v175, v164, v94);
  uint64_t v96 = v84;
  id v97 = [objc_allocWithZone((Class)FPLoggerScope) init];
  id v98 = (id)fpfs_current_or_default_log();
  uint64_t v99 = v156;
  sub_10096B490();
  uint64_t v100 = v159;
  uint64_t v101 = *(void (**)(char *, uint64_t, uint64_t))(v159 + 16);
  uint64_t v102 = v155;
  uint64_t v158 = v159 + 16;
  uint64_t v157 = v101;
  v101(v155, v95, v96);
  uint64_t v103 = (uint64_t *)v97;
  uint64_t v104 = sub_10096B470();
  os_log_type_t v105 = sub_10096C590();
  BOOL v106 = os_log_type_enabled(v104, v105);
  uint64_t v175 = v103;
  if (v106)
  {
    uint64_t v107 = swift_slowAlloc();
    uint64_t v108 = (void *)swift_slowAlloc();
    uint64_t v153 = (char *)swift_slowAlloc();
    uint64_t v179 = v153;
    *(_DWORD *)uint64_t v107 = 138412546;
    id v109 = [v103 enter];
    uint64_t v178 = (uint64_t)v109;
    uint64_t v183 = 0;
    sub_10096C8C0();
    *uint64_t v108 = v109;

    *(_WORD *)(v107 + 12) = 2082;
    uint64_t v149 = (char *)(v107 + 14);
    uint64_t v110 = v155;
    uint64_t v111 = v161;
    uint64_t v112 = v176;
    v148((unint64_t)v161, &v155[*(int *)(v96 + 56)], v176);
    uint64_t v160 = *(void *)(v159 + 8);
    ((void (*)(char *, uint64_t))v160)(v110, v96);
    uint64_t v113 = sub_10082F470(v112);
    unint64_t v115 = v114;
    v174(v111, v112);
    uint64_t v178 = sub_100719D44(v113, v115, (uint64_t *)&v179);
    uint64_t v62 = v183;
    sub_10096C8C0();
    uint64_t v116 = v144;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v104, v105, "%@  ⚙️ reconciling: %{public}s", (uint8_t *)v107, 0x16u);
    sub_10002B7CC((uint64_t *)&unk_100ACCBC0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v162 + 8))(v156, v163);
    uint64_t v117 = v154;
    uint64_t v118 = v112;
  }
  else
  {
    uint64_t v160 = *(void *)(v100 + 8);
    ((void (*)(char *, uint64_t))v160)(v102, v96);

    (*(void (**)(char *, uint64_t))(v162 + 8))(v99, v163);
    uint64_t v116 = v96;
    uint64_t v117 = v154;
    uint64_t v118 = v176;
  }
  uint64_t v119 = v165;
  uint64_t v120 = v166;
  uint64_t v179 = v165;
  uint64_t v180 = v166;
  uint64_t v181 = v169;
  uint64_t v182 = v168;
  type metadata accessor for ConcreteJobResult();
  uint64_t v121 = (void *)sub_100591720();
  v148((unint64_t)v117, (char *)(v164 + *(int *)(v116 + 56)), v118);
  uint64_t result = swift_weakLoadStrong();
  uint64_t v122 = (uint64_t)v172;
  uint64_t v123 = (uint64_t)TupleTypeMetadata2;
  if (result)
  {
    uint64_t v124 = (void *)result;
    uint64_t v125 = (void (*)(void, void, void))v167;
    sub_10010D750(v167, (uint64_t)v172, TupleTypeMetadata2);
    sub_1003B3780(v117, v125, v122, v123, v124, (uint64_t)v121);
    if (v62)
    {
      swift_release();
      sub_10010D75C((uint64_t)v125);
      swift_release();
      v174((char *)v117, v176);
      uint64_t v126 = v175;
      sub_1000F6A84(v175);
      sub_10010D75C((uint64_t)v125);

      ((void (*)(uint64_t, uint64_t))v160)(v164, v144);
      return v57 & 1;
    }
    swift_release();
    sub_10010D75C((uint64_t)v125);
    v174((char *)v117, v176);
    swift_beginAccess();
    uint64_t v127 = v144;
    uint64_t v177 = v121[4];
    unint64_t v128 = v150;
    v157(v150, v164, v144);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v159 + 56))(v128, 0, 1, v127);
    swift_bridgeObjectRetain();
    uint64_t v179 = v119;
    uint64_t v180 = v120;
    uint64_t v129 = v128;
    uint64_t v181 = v169;
    uint64_t v182 = v168;
    type metadata accessor for ReconciliationMutation();
    uint64_t v130 = sub_10096C1C0();
    uint64_t WitnessTable = swift_getWitnessTable();
    sub_1000E06B4(&v177, v129, v130, WitnessTable);
    uint64_t v132 = (uint64_t)v119;
    (*(void (**)(char *, uint64_t))(v151 + 8))(v129, v152);
    swift_bridgeObjectRelease();
    uint64_t result = swift_weakLoadStrong();
    if (result)
    {
      swift_beginAccess();
      uint64_t v133 = v121[3];
      swift_bridgeObjectRetain();
      sub_10096C110();
      sub_10035B6FC(v133);
      uint64_t v134 = v175;
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_beginAccess();
      uint64_t v135 = v121[5];
      swift_bridgeObjectRetain();
      uint64_t v179 = (char *)v132;
      uint64_t v180 = v166;
      uint64_t v181 = v169;
      uint64_t v182 = v168;
      type metadata accessor for FSOrFPJob();
      if (!sub_10096C1A0()) {
        goto LABEL_34;
      }
      uint64_t v136 = 4;
      while (1)
      {
        uint64_t v137 = v136 - 4;
        BOOL v138 = sub_10096C130();
        sub_10096C0E0();
        if (v138)
        {
          uint64_t v139 = *(void *)(v135 + 8 * v136);
          swift_retain();
          uint64_t v140 = v136 - 3;
          if (__OFADD__(v137, 1)) {
            goto LABEL_37;
          }
        }
        else
        {
          uint64_t v139 = sub_10096CC20();
          swift_retain();
          swift_unknownObjectRelease();
          uint64_t v140 = v136 - 3;
          if (__OFADD__(v137, 1))
          {
LABEL_37:
            __break(1u);
LABEL_34:
            swift_release();
            uint64_t v142 = v164;
            swift_bridgeObjectRelease();
            sub_1000F6A84(v134);
            sub_10010D75C(v167);

            ((void (*)(uint64_t, uint64_t))v160)(v142, v144);
            char v57 = 1;
            return v57 & 1;
          }
        }
        sub_1000F6C88(v139);
        swift_release();
        ++v136;
        if (v140 == sub_10096C1A0()) {
          goto LABEL_34;
        }
      }
    }
    goto LABEL_42;
  }
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for ReconciliationTable.CachedEntry()
{
  return swift_getGenericMetadata();
}

uint64_t sub_1000F6A84(void *a1)
{
  uint64_t v2 = sub_10096B480();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = (id)fpfs_current_or_default_log();
  sub_10096B490();
  uint64_t v7 = a1;
  uint64_t v8 = sub_10096B470();
  os_log_type_t v9 = sub_10096C590();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc();
    v15[0] = v2;
    uint64_t v11 = (uint8_t *)v10;
    uint64_t v12 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 138412290;
    id v13 = [v7 leave];
    v15[1] = v13;
    sub_10096C8C0();
    *uint64_t v12 = v13;

    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%@", v11, 0xCu);
    sub_10002B7CC((uint64_t *)&unk_100ACCBC0);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v2 = v15[0];
    swift_slowDealloc();
  }
  else
  {

    uint64_t v8 = v7;
  }

  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_1000F6C88(uint64_t a1)
{
  uint64_t v2 = sub_10096B0E0();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 < 0) {
    goto LABEL_7;
  }
  uint64_t result = swift_weakLoadStrong();
  if (!result)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  swift_retain();
  sub_10096B0D0();
  sub_10096B080();
  double v8 = v7;
  os_log_type_t v9 = *(uint64_t (**)(char *, uint64_t))(v3 + 8);
  v3 += 8;
  uint64_t result = v9(v5, v2);
  double v10 = v8 * 1000000000.0;
  if ((~COERCE__INT64(v8 * 1000000000.0) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (v10 <= -9.22337204e18)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v10 < 9.22337204e18)
  {
LABEL_11:
    sub_10059C450(a1);
    swift_release();
    return swift_release();
  }
  __break(1u);
LABEL_7:
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    a1 &= ~0x8000000000000000;
    uint64_t v11 = *(void (**)(uint64_t))(*(void *)result + 176);
    uint64_t v12 = swift_retain();
    v11(v12);
    swift_release();
    sub_10096B0D0();
    sub_10096B080();
    double v14 = v13;
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    double v15 = v14 * 1000000000.0;
    if ((~COERCE__INT64(v14 * 1000000000.0) & 0x7FF0000000000000) != 0)
    {
      if (v15 > -9.22337204e18)
      {
        if (v15 < 9.22337204e18) {
          goto LABEL_11;
        }
        goto LABEL_16;
      }
LABEL_15:
      __break(1u);
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_1000F6EDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(a2, a1, AssociatedTypeWitness);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for ReconciliationID();
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_1000F7010(char *a1, unsigned char *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v315 = a5;
  uint64_t v327 = a4;
  uint64_t v321 = a3;
  uint64_t v308 = a2;
  uint64_t v307 = a1;
  uint64_t v7 = v5[10];
  uint64_t v6 = v5[11];
  uint64_t v8 = v5[12];
  uint64_t v9 = v5[13];
  uint64_t v334 = v7;
  uint64_t v335 = v6;
  uint64_t v336 = v8;
  uint64_t v337 = v9;
  uint64_t v10 = type metadata accessor for ItemReconciliation();
  uint64_t v275 = sub_10096C890();
  uint64_t v267 = *(void *)(v275 - 8);
  uint64_t v11 = __chkstk_darwin(v275);
  uint64_t v283 = (char *)&v261 - v12;
  uint64_t v266 = *(void *)(v10 - 8);
  __chkstk_darwin(v11);
  id v277 = (char *)&v261 - v13;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v280 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v15 = __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v304 = (char *)&v261 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v263 = v16;
  __chkstk_darwin(v15);
  uint64_t v305 = (char *)&v261 - v17;
  uint64_t v316 = v18;
  uint64_t v270 = sub_10096C890();
  uint64_t v269 = *(void *)(v270 - 8);
  __chkstk_darwin(v270);
  uint64_t v271 = (char *)&v261 - v19;
  uint64_t v329 = type metadata accessor for SnapshotItem();
  uint64_t v323 = *(void (***)(void, void, void))(v329 - 8);
  uint64_t v20 = __chkstk_darwin(v329);
  uint64_t v303 = (void (**)(uint64_t, uint64_t))((char *)&v261 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v20);
  uint64_t v320 = (char *)&v261 - v22;
  uint64_t v330 = v6;
  uint64_t v331 = v9;
  uint64_t v23 = swift_getAssociatedTypeWitness();
  uint64_t v24 = sub_10096C890();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v273 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v25 = __chkstk_darwin(TupleTypeMetadata2);
  uint64_t v287 = (char *)&v261 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v293 = (char *)&v261 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v333 = (char *)&v261 - v30;
  uint64_t v31 = *(void *)(v24 - 8);
  uint64_t v32 = __chkstk_darwin(v29);
  uint64_t v276 = (char *)&v261 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v302 = (char *)&v261 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  uint64_t v301 = (char *)&v261 - v37;
  uint64_t v38 = __chkstk_darwin(v36);
  uint64_t v272 = (char *)&v261 - v39;
  uint64_t v40 = __chkstk_darwin(v38);
  uint64_t v274 = (char *)&v261 - v41;
  uint64_t v42 = __chkstk_darwin(v40);
  uint64_t v285 = (char *)&v261 - v43;
  uint64_t v44 = __chkstk_darwin(v42);
  uint64_t v295 = (char *)&v261 - v45;
  uint64_t v46 = __chkstk_darwin(v44);
  uint64_t v306 = (char *)&v261 - v47;
  uint64_t v48 = __chkstk_darwin(v46);
  uint64_t v294 = (char *)&v261 - v49;
  uint64_t v50 = __chkstk_darwin(v48);
  uint64_t v319 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))((char *)&v261 - v51);
  uint64_t v52 = __chkstk_darwin(v50);
  uint64_t v318 = (char *)&v261 - v53;
  uint64_t v54 = __chkstk_darwin(v52);
  uint64_t v56 = (char *)&v261 - v55;
  uint64_t v57 = *(void *)(v23 - 8);
  uint64_t v58 = __chkstk_darwin(v54);
  uint64_t v310 = (char *)&v261 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = __chkstk_darwin(v58);
  uint64_t v292 = (char *)&v261 - v61;
  uint64_t v264 = v62;
  __chkstk_darwin(v60);
  uint64_t v64 = (char *)&v261 - v63;
  uint64_t v286 = v10;
  uint64_t v65 = v327 + *(int *)(v10 + 52);
  unint64_t v66 = *(void (**)(void))(v31 + 16);
  uint64_t v326 = v31 + 16;
  ((void (*)(char *, uint64_t, uint64_t))v66)(v56, v65, v24);
  uint64_t v324 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48);
  uint64_t v325 = v57 + 48;
  if (v324(v56, 1, v23) == 1)
  {
    (*(void (**)(char *, uint64_t))(v31 + 8))(v56, v24);
    uint64_t v67 = v316;
LABEL_14:
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v79 = swift_getAssociatedConformanceWitness();
    uint64_t v334 = v67;
    uint64_t v335 = v23;
LABEL_15:
    uint64_t v336 = AssociatedConformanceWitness;
    uint64_t v337 = v79;
    uint64_t v94 = type metadata accessor for ReconciliationID();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v94 - 8) + 56))(v307, 1, 1, v94);
    char v95 = 0;
    return v95 & 1;
  }
  uint64_t v278 = v31;
  uint64_t v327 = v24;
  uint64_t v68 = *(void (**)(char *, char *, uint64_t))(v57 + 32);
  uint64_t v282 = v57 + 32;
  unint64_t v281 = v68;
  v68(v64, v56, v23);
  uint64_t v265 = (int *)type metadata accessor for ItemReconciliationHalf();
  uint64_t v69 = v7;
  if (!v308[v265[14]])
  {
    (*(void (**)(char *, uint64_t))(v57 + 8))(v64, v23);
    uint64_t v67 = v316;
    goto LABEL_14;
  }
  uint64_t v317 = v66;
  uint64_t v284 = v57;
  uint64_t v314 = v64;
  (*(void (**)(void))(*v315 + 248))();
  uint64_t v70 = sub_10096CDA0();
  swift_release();
  swift_retain();
  uint64_t v71 = v330;
  uint64_t v72 = v331;
  uint64_t v334 = v7;
  uint64_t v335 = v330;
  uint64_t v336 = v8;
  uint64_t v337 = v331;
  type metadata accessor for FSOrFPJob();
  sub_10096CB40();
  uint64_t v73 = v338;
  uint64_t v74 = v23;
  uint64_t v309 = v69;
  uint64_t v313 = v8;
  if ((~v338 & 0xF000000000000007) != 0)
  {
    uint64_t v299 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v284 + 56);
    uint64_t v298 = (void (**)(char *, uint64_t, uint64_t))(v284 + 16);
    uint64_t v262 = (void (**)(char *, uint64_t))(v284 + 8);
    uint64_t v312 = (void (**)(char *, uint64_t))(v278 + 8);
    uint64_t v297 = (void (**)(char *, uint64_t, uint64_t))(v323 + 2);
    uint64_t v261 = (void (**)(char *, uint64_t))(v273 + 8);
    uint64_t v296 = (void (**)(char *, uint64_t))(v323 + 1);
    uint64_t v300 = (void (**)(char *, uint64_t))v70;
    do
    {
      if ((v73 & 0x8000000000000000) == 0) {
        goto LABEL_22;
      }
      uint64_t v334 = v69;
      uint64_t v335 = v71;
      uint64_t v336 = v8;
      uint64_t v337 = v72;
      type metadata accessor for Propagation.CreateItem();
      uint64_t v102 = swift_dynamicCastClass();
      if (v102)
      {
        uint64_t v323 = (void (**)(void, void, void))(v73 & 0x7FFFFFFFFFFFFFFFLL);
        uint64_t v322 = (void (*)(void, void))v73;
        uint64_t v103 = *(void *)(*(void *)v102 + 656);
        uint64_t v268 = v102;
        uint64_t v104 = v102 + v103;
        swift_beginAccess();
        uint64_t v279 = swift_getAssociatedConformanceWitness();
        uint64_t v105 = type metadata accessor for ItemState();
        uint64_t v106 = *(void *)(v105 - 8);
        uint64_t v107 = *(uint64_t (**)(uint64_t, uint64_t))(v106 + 48);
        uint64_t v108 = v106 + 48;
        uint64_t v290 = v105;
        int v109 = v107(v104, 1);
        uint64_t v291 = v104;
        uint64_t v289 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v107;
        uint64_t v288 = v108;
        if (v109)
        {
          uint64_t v110 = *v299;
          uint64_t v111 = v318;
          (*v299)(v318, 1, 1, v74);
          uint64_t v112 = *v298;
          uint64_t v113 = v74;
        }
        else
        {
          uint64_t v112 = *v298;
          uint64_t v113 = v74;
          uint64_t v111 = v318;
          (*v298)(v318, v104, v74);
          uint64_t v110 = *v299;
          (*v299)(v111, 0, 1, v74);
        }
        uint64_t v125 = v333;
        uint64_t v126 = v319;
        v112((char *)v319, (uint64_t)v314, v113);
        v110((char *)v126, 0, 1, v113);
        uint64_t v127 = &v125[*(int *)(TupleTypeMetadata2 + 48)];
        uint64_t v128 = v327;
        uint64_t v129 = v317;
        ((void (*)(char *, char *, uint64_t))v317)(v125, v111, v327);
        ((void (*)(char *, uint64_t (**)(uint64_t, uint64_t, uint64_t), uint64_t))v129)(v127, v126, v128);
        uint64_t v130 = (uint64_t (*)(char *, uint64_t, uint64_t))v324;
        if (v324(v125, 1, v113) == 1)
        {
          id v131 = *v312;
          swift_retain();
          v131((char *)v126, v128);
          v131(v111, v128);
          int v132 = v130(v127, 1, v113);
          uint64_t v99 = v333;
          uint64_t v100 = v320;
          uint64_t v101 = v329;
          uint64_t v74 = v113;
          if (v132 != 1) {
            goto LABEL_20;
          }
          v131(v333, v327);
          (*v297)(v320, v321, v101);
        }
        else
        {
          uint64_t v133 = v294;
          v129();
          uint64_t v74 = v113;
          if (v130(v127, 1, v113) == 1)
          {
            id v97 = *v312;
            swift_retain();
            v97((char *)v319, v128);
            v97(v318, v128);
            id v98 = v133;
            uint64_t v99 = v333;
            uint64_t v100 = v320;
            uint64_t v101 = v329;
            goto LABEL_19;
          }
          uint64_t v134 = v292;
          v281(v292, v127, v113);
          swift_retain();
          char v135 = sub_10096BBE0();
          uint64_t v136 = *v262;
          (*v262)(v134, v74);
          uint64_t v137 = *v312;
          (*v312)((char *)v319, v128);
          v137(v318, v128);
          v136(v133, v74);
          v137(v333, v128);
          uint64_t v100 = v320;
          uint64_t v101 = v329;
          (*v297)(v320, v321, v329);
          if ((v135 & 1) == 0) {
            goto LABEL_21;
          }
        }
        uint64_t v138 = v74;
        uint64_t v139 = v291;
        uint64_t v140 = v290;
        int v141 = v289(v291, 1, v290);
        uint64_t v8 = v313;
        if (v141 == 1) {
          goto LABEL_105;
        }
        uint64_t v142 = (uint64_t *)(v139 + *(int *)(v140 + 36));
        uint64_t v144 = *v142;
        unint64_t v143 = v142[1];
        id v145 = v320;
        uint64_t v146 = (uint64_t *)&v320[*(int *)(v101 + 44)];
        uint64_t v147 = *v146;
        unint64_t v148 = v146[1];
        swift_retain();
        swift_bridgeObjectRetain();
        LOBYTE(v147) = sub_1007B7F20(v144, v143, v147, v148);
        uint64_t v149 = v322;
        sub_10010D854((uint64_t)v322);
        swift_release();
        swift_bridgeObjectRelease();
        (*v296)(v145, v329);
        uint64_t v69 = v309;
        uint64_t v71 = v330;
        uint64_t v72 = v331;
        uint64_t v74 = v138;
        uint64_t v73 = (uint64_t)v149;
        if (v147)
        {
          swift_release_n();
          (*v262)(v314, v74);
          uint64_t v250 = v307;
          uint64_t v251 = v316;
          (*(void (**)(char *, uint64_t, uint64_t))(v280 + 16))(v307, v268 + *(void *)(*(void *)v268 + 576), v316);
          sub_10010D854((uint64_t)v149);
          uint64_t v252 = swift_getAssociatedConformanceWitness();
          uint64_t v334 = v251;
          uint64_t v335 = v74;
          uint64_t v336 = v252;
          uint64_t v253 = &v311;
LABEL_97:
          uint64_t v337 = *(v253 - 32);
          uint64_t v254 = type metadata accessor for ReconciliationID();
          swift_storeEnumTagMultiPayload();
          char v95 = 1;
          (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v254 - 8) + 56))(v250, 0, 1, v254);
          return v95 & 1;
        }
      }
      else
      {
        uint64_t v334 = v69;
        uint64_t v335 = v71;
        uint64_t v336 = v8;
        uint64_t v337 = v72;
        type metadata accessor for Propagation.UpdateItem();
        uint64_t v114 = swift_dynamicCastClass();
        if (!v114) {
          goto LABEL_22;
        }
        uint64_t v323 = (void (**)(void, void, void))(v73 & 0x7FFFFFFFFFFFFFFFLL);
        uint64_t v115 = *(void *)(*(void *)v114 + 664);
        uint64_t v279 = v114;
        uint64_t v116 = v114 + v115;
        swift_beginAccess();
        uint64_t v268 = swift_getAssociatedConformanceWitness();
        uint64_t v117 = type metadata accessor for ItemState();
        uint64_t v118 = *(void *)(v117 - 8);
        uint64_t v119 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v118 + 48);
        uint64_t v290 = v117;
        uint64_t v289 = v119;
        uint64_t v288 = v118 + 48;
        int v120 = ((uint64_t (*)(uint64_t, uint64_t))v119)(v116, 1);
        uint64_t v322 = (void (*)(void, void))v73;
        uint64_t v291 = v116;
        if (v120)
        {
          uint64_t v121 = *v299;
          uint64_t v122 = v306;
          (*v299)(v306, 1, 1, v74);
          uint64_t v123 = *v298;
          uint64_t v124 = v74;
        }
        else
        {
          uint64_t v123 = *v298;
          uint64_t v124 = v74;
          uint64_t v122 = v306;
          (*v298)(v306, v116, v74);
          uint64_t v121 = *v299;
          (*v299)(v122, 0, 1, v74);
        }
        os_log_type_t v150 = v293;
        uint64_t v151 = v295;
        v123(v295, (uint64_t)v314, v124);
        v121(v151, 0, 1, v124);
        uint64_t v152 = &v150[*(int *)(TupleTypeMetadata2 + 48)];
        uint64_t v153 = v327;
        uint64_t v154 = v317;
        ((void (*)(char *, char *, uint64_t))v317)(v150, v122, v327);
        ((void (*)(char *, char *, uint64_t))v154)(v152, v151, v153);
        uint64_t v155 = v150;
        unint64_t v156 = v150;
        uint64_t v157 = v151;
        uint64_t v158 = (uint64_t (*)(char *, uint64_t, uint64_t))v324;
        if (v324(v156, 1, v124) == 1)
        {
          uint64_t v159 = *v312;
          swift_retain();
          v159(v157, v153);
          v159(v306, v153);
          int v160 = v158(v152, 1, v124);
          uint64_t v99 = v155;
          uint64_t v100 = (char *)v303;
          uint64_t v101 = v329;
          uint64_t v74 = v124;
          if (v160 != 1) {
            goto LABEL_20;
          }
          v159(v293, v327);
          (*v297)((char *)v303, v321, v101);
        }
        else
        {
          uint64_t v99 = v155;
          ((void (*)(char *, char *, uint64_t))v154)(v285, v155, v153);
          uint64_t v74 = v124;
          if (v158(v152, 1, v124) == 1)
          {
            unint64_t v161 = *v312;
            swift_retain();
            v161(v295, v153);
            v161(v306, v153);
            id v98 = v285;
            uint64_t v100 = (char *)v303;
            uint64_t v101 = v329;
LABEL_19:
            (*v262)(v98, v74);
LABEL_20:
            (*v261)(v99, TupleTypeMetadata2);
            (*v297)(v100, v321, v101);
LABEL_21:
            uint64_t v73 = (uint64_t)v322;
            sub_10010D854((uint64_t)v322);
            (*v296)(v100, v101);
            uint64_t v69 = v309;
            uint64_t v71 = v330;
            uint64_t v72 = v331;
            uint64_t v8 = v313;
            goto LABEL_22;
          }
          uint64_t v162 = v292;
          v281(v292, v152, v124);
          swift_retain();
          uint64_t v163 = v285;
          char v164 = sub_10096BBE0();
          uint64_t v165 = *v262;
          (*v262)(v162, v74);
          uint64_t v166 = *v312;
          (*v312)(v295, v153);
          v166(v306, v153);
          v165(v163, v74);
          v166(v99, v153);
          uint64_t v100 = (char *)v303;
          uint64_t v101 = v329;
          (*v297)((char *)v303, v321, v329);
          if ((v164 & 1) == 0) {
            goto LABEL_21;
          }
        }
        uint64_t v167 = v291;
        uint64_t v168 = v290;
        int v169 = v289(v291, 1, v290);
        uint64_t v8 = v313;
        if (v169 == 1) {
          goto LABEL_106;
        }
        uint64_t v170 = (uint64_t *)(v167 + *(int *)(v168 + 36));
        uint64_t v172 = *v170;
        unint64_t v171 = v170[1];
        uint64_t v173 = v303;
        uint64_t v174 = (uint64_t *)((char *)v303 + *(int *)(v101 + 44));
        uint64_t v175 = *v174;
        unint64_t v176 = v174[1];
        swift_retain();
        swift_bridgeObjectRetain();
        LOBYTE(v175) = sub_1007B7F20(v172, v171, v175, v176);
        uint64_t v73 = (uint64_t)v322;
        sub_10010D854((uint64_t)v322);
        swift_release();
        swift_bridgeObjectRelease();
        (*v296)((char *)v173, v329);
        uint64_t v69 = v309;
        uint64_t v71 = v330;
        uint64_t v72 = v331;
        if (v175)
        {
          uint64_t v177 = v279;
          swift_release_n();
          (*v262)(v314, v74);
          uint64_t v178 = v177 + *(void *)(*(void *)v177 + 576);
          uint64_t v250 = v307;
          uint64_t v179 = v316;
          (*(void (**)(char *, uint64_t, uint64_t))(v280 + 16))(v307, v178, v316);
          sub_10010D854(v73);
          uint64_t v180 = swift_getAssociatedConformanceWitness();
          uint64_t v334 = v179;
          uint64_t v335 = v74;
          uint64_t v336 = v180;
          uint64_t v253 = (uint64_t *)&v300;
          goto LABEL_97;
        }
      }
LABEL_22:
      sub_10010D854(v73);
      uint64_t v334 = v69;
      uint64_t v335 = v71;
      uint64_t v336 = v8;
      uint64_t v337 = v72;
      type metadata accessor for FSOrFPJob();
      sub_10096CB40();
      uint64_t v73 = v338;
    }
    while ((~v338 & 0xF000000000000007) != 0);
  }
  swift_release_n();
  uint64_t v75 = v308;
  uint64_t v76 = v286;
  if (v308[v265[16] + 16] != 2 && !sub_100827AAC(v286) && *(void *)&v75[v265[9]])
  {
    (*(void (**)(char *, uint64_t))(v284 + 8))(v314, v74);
    uint64_t v77 = v316;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
LABEL_9:
    uint64_t v79 = swift_getAssociatedConformanceWitness();
    uint64_t v334 = v77;
    uint64_t v335 = v74;
    goto LABEL_15;
  }
  uint64_t v80 = v315[4];
  BOOL v81 = sub_1005152D8();
  uint64_t v311 = v74;
  if (v81)
  {
    uint64_t v333 = (char *)(v321 + *(int *)(v329 + 36));
    uint64_t v82 = (uint64_t *)(v321 + *(int *)(v329 + 44));
    uint64_t v84 = *v82;
    uint64_t v83 = v82[1];
    uint64_t v85 = v280;
    uint64_t v87 = (char *)(v280 + 16);
    uint64_t v86 = *(char **)(v280 + 16);
    uint64_t v88 = v271;
    uint64_t v89 = v316;
    ((void (*)(char *))v86)(v271);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v85 + 56))(v88, 0, 1, v89);
    uint64_t v90 = v328;
    uint64_t v91 = (*(uint64_t (**)(char *, uint64_t, uint64_t, char *))(*(void *)v80 + 256))(v333, v84, v83, v88);
    uint64_t v92 = v284;
    if (v90)
    {
      (*(void (**)(char *, uint64_t))(v269 + 8))(v88, v270);
      uint64_t v93 = v314;
      goto LABEL_53;
    }
    uint64_t v221 = v91;
    uint64_t v318 = v86;
    uint64_t v333 = v87;
    uint64_t v328 = 0;
    (*(void (**)(char *, uint64_t))(v269 + 8))(v88, v270);
    if (sub_10096C1A0())
    {
      uint64_t v222 = v89;
      uint64_t v223 = 0;
      uint64_t v322 = (void (*)(void, void))v315[2];
      uint64_t v224 = v280;
      uint64_t v323 = (void (**)(void, void, void))(v280 + 32);
      uint64_t v319 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v266 + 48);
      uint64_t v312 = (void (**)(char *, uint64_t))(v266 + 32);
      uint64_t v306 = (char *)(v278 + 8);
      uint64_t v300 = (void (**)(char *, uint64_t))(v266 + 8);
      uint64_t v320 = (char *)(v280 + 8);
      uint64_t v303 = (void (**)(uint64_t, uint64_t))(v267 + 8);
      int v225 = v318;
      while (1)
      {
        uint64_t v226 = v222;
        BOOL v227 = sub_10096C130();
        sub_10096C0E0();
        if (v227)
        {
          ((void (*)(char *, unint64_t, uint64_t))v225)(v305, v221+ ((*(unsigned __int8 *)(v224 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v224 + 80))+ *(void *)(v224 + 72) * v223, v226);
        }
        else
        {
          uint64_t result = sub_10096CC20();
          if (v263 != 8) {
            goto LABEL_108;
          }
          uint64_t v334 = result;
          ((void (*)(char *, uint64_t *, uint64_t))v225)(v305, &v334, v226);
          swift_unknownObjectRelease();
        }
        uint64_t v228 = v226;
        uint64_t v229 = v223 + 1;
        uint64_t v230 = (uint64_t)v283;
        if (__OFADD__(v223, 1)) {
          goto LABEL_104;
        }
        uint64_t v231 = (void (*)(char *, char *, uint64_t))*v323;
        uint64_t v232 = (uint64_t)v304;
        (*v323)(v304, v305, v228);
        uint64_t v233 = v328;
        sub_1000DEDD8(v232, v230);
        uint64_t v328 = v233;
        if (v233)
        {
          (*(void (**)(char *, uint64_t))v320)(v304, v316);
          swift_bridgeObjectRelease();
LABEL_52:
          uint64_t v93 = v314;
          uint64_t v92 = v284;
LABEL_53:
          uint64_t v193 = *(void (**)(char *, uint64_t))(v92 + 8);
          char v95 = v92 + 8;
          v193(v93, v311);
          return v95 & 1;
        }
        int v234 = (*v319)(v230, 1, v76);
        uint64_t v235 = v230;
        if (v234 == 1) {
          break;
        }
        uint64_t v236 = v277;
        ((void (*)(char *, uint64_t, uint64_t))*v312)(v277, v235, v76);
        uint64_t v237 = &v236[*(int *)(v76 + 52)];
        uint64_t v238 = v274;
        uint64_t v239 = v76;
        uint64_t v240 = v327;
        ((void (*)(char *, char *, uint64_t))v317)(v274, v237, v327);
        unsigned int v241 = v324(v238, 1, v311);
        (*(void (**)(char *, uint64_t))v306)(v238, v240);
        if (v241 == 1)
        {
          uint64_t v242 = &v236[v265[16]];
          int v225 = v318;
          if (v242[16])
          {
            uint64_t v76 = v286;
            uint64_t v224 = v280;
            if (v242[16] == 2) {
              goto LABEL_100;
            }
LABEL_85:
            BOOL v243 = sub_100827AAC(v76);
            uint64_t v236 = v277;
            if (v243)
            {
LABEL_100:
              (*v300)(v236, v76);
LABEL_101:
              swift_bridgeObjectRelease();
              uint64_t v255 = v311;
              (*(void (**)(char *, uint64_t))(v284 + 8))(v314, v311);
              uint64_t v256 = v307;
              uint64_t v257 = v316;
              v231(v307, v304, v316);
              uint64_t v258 = swift_getAssociatedConformanceWitness();
              uint64_t v259 = swift_getAssociatedConformanceWitness();
              uint64_t v334 = v257;
              uint64_t v335 = v255;
              uint64_t v336 = v258;
              uint64_t v337 = v259;
              uint64_t v260 = type metadata accessor for ReconciliationID();
              swift_storeEnumTagMultiPayload();
              char v95 = 1;
              (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v260 - 8) + 56))(v256, 0, 1, v260);
              return v95 & 1;
            }
            uint64_t v244 = *(void *)&v277[v265[9]];
            (*v300)(v277, v76);
            if (!v244) {
              goto LABEL_101;
            }
          }
          else
          {
            uint64_t v76 = v286;
            uint64_t v224 = v280;
            if ((v242[1] & 4) == 0) {
              goto LABEL_85;
            }
            (*v300)(v236, v286);
          }
          uint64_t v222 = v316;
          (*(void (**)(char *, uint64_t))v320)(v304, v316);
LABEL_90:
          uint64_t v181 = v311;
          goto LABEL_73;
        }
        (*v300)(v236, v239);
        uint64_t v222 = v316;
        (*(void (**)(char *, uint64_t))v320)(v304, v316);
        uint64_t v76 = v239;
        uint64_t v224 = v280;
        uint64_t v181 = v311;
        int v225 = v318;
LABEL_73:
        ++v223;
        if (v229 == sub_10096C1A0()) {
          goto LABEL_96;
        }
      }
      uint64_t v222 = v316;
      (*(void (**)(char *, uint64_t))v320)(v304, v316);
      (*v303)(v230, v275);
      goto LABEL_90;
    }
    uint64_t v181 = v311;
LABEL_96:
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v181 = v74;
  }
  uint64_t v182 = v315[5];
  uint64_t v183 = (uint64_t *)(v321 + *(int *)(v329 + 44));
  uint64_t v184 = *v183;
  uint64_t v185 = v183[1];
  uint64_t v186 = v284 + 56;
  uint64_t v187 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v284 + 56);
  uint64_t v188 = v272;
  v187(v272, 1, 1, v181);
  uint64_t v189 = v184;
  uint64_t v190 = v188;
  uint64_t v191 = v328;
  uint64_t v192 = (*(uint64_t (**)(char *, uint64_t, uint64_t, char *))(*(void *)v182 + 256))(v314, v189, v185, v188);
  uint64_t v328 = v191;
  if (v191)
  {
    (*(void (**)(char *, uint64_t))(v278 + 8))(v188, v327);
    goto LABEL_52;
  }
  uint64_t v194 = (char *)v192;
  uint64_t v320 = (char *)v187;
  uint64_t v321 = v186;
  uint64_t v195 = v278 + 8;
  uint64_t v322 = *(void (**)(void, void))(v278 + 8);
  v322(v190, v327);
  if (sub_10096C160() < 1)
  {
    (*(void (**)(char *, uint64_t))(v284 + 8))(v314, v181);
    swift_bridgeObjectRelease();
    uint64_t v249 = v316;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v79 = swift_getAssociatedConformanceWitness();
    uint64_t v334 = v249;
    uint64_t v335 = v181;
    goto LABEL_15;
  }
  uint64_t v278 = v195;
  swift_bridgeObjectRetain();
  if (!sub_10096C1A0())
  {
LABEL_93:
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v284 + 8))(v314, v181);
    uint64_t v245 = v316;
    uint64_t v246 = swift_getAssociatedConformanceWitness();
    uint64_t v247 = swift_getAssociatedConformanceWitness();
    uint64_t v334 = v245;
    uint64_t v335 = v181;
    uint64_t v336 = v246;
    uint64_t v337 = v247;
    uint64_t v248 = type metadata accessor for ReconciliationID();
    char v95 = 1;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v248 - 8) + 56))(v307, 1, 1, v248);
    return v95 & 1;
  }
  uint64_t v196 = 0;
  uint64_t v315 = &v308[*(int *)(v286 + 52)];
  uint64_t v319 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v284 + 16);
  uint64_t v312 = (void (**)(char *, uint64_t))(v273 + 8);
  uint64_t v308 = (unsigned char *)(v284 + 8);
  uint64_t v306 = (char *)((v284 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000);
  uint64_t v318 = v194;
  uint64_t v197 = v327;
  while (1)
  {
    BOOL v202 = sub_10096C130();
    sub_10096C0E0();
    if (v202)
    {
      (*(void (**)(char *, char *, uint64_t))(v284 + 16))(v310, &v194[((*(unsigned __int8 *)(v284 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v284 + 80))+ *(void *)(v284 + 72) * v196], v181);
      uint64_t v203 = v287;
    }
    else
    {
      uint64_t result = sub_10096CC20();
      uint64_t v220 = v287;
      if (v264 != 8) {
        goto LABEL_107;
      }
      uint64_t v334 = result;
      (*v319)((uint64_t)v310, (uint64_t)&v334, v181);
      swift_unknownObjectRelease();
      uint64_t v203 = v220;
    }
    v204 = v302;
    uint64_t v205 = v301;
    uint64_t v206 = v320;
    if (__OFADD__(v196, 1)) {
      break;
    }
    uint64_t v323 = (void (**)(void, void, void))(v196 + 1);
    uint64_t v329 = v196;
    uint64_t v207 = v311;
    v281(v301, v310, v311);
    ((void (*)(char *, void, uint64_t, uint64_t))v206)(v205, 0, 1, v207);
    uint64_t v208 = v317;
    ((void (*)(char *, void *, uint64_t))v317)(v204, v315, v197);
    uint64_t v209 = v203;
    uint64_t v210 = &v203[*(int *)(TupleTypeMetadata2 + 48)];
    ((void (*)(char *, char *, uint64_t))v208)(v203, v205, v197);
    uint64_t v333 = v210;
    ((void (*)(char *, char *, uint64_t))v208)(v210, v204, v197);
    uint64_t v211 = v203;
    uint64_t v212 = (uint64_t (*)(char *, uint64_t, uint64_t))v324;
    if (v324(v211, 1, v207) == 1)
    {
      uint64_t v198 = v209;
      uint64_t v199 = (void (*)(char *, uint64_t))v322;
      v322(v204, v197);
      v199(v205, v197);
      int v200 = v212(v333, 1, v207);
      uint64_t v194 = v318;
      if (v200 == 1)
      {
        v322(v198, v327);
        swift_bridgeObjectRelease_n();
        uint64_t v218 = *(void (**)(char *, uint64_t))v308;
        goto LABEL_102;
      }
      goto LABEL_58;
    }
    uint64_t v213 = v276;
    ((void (*)(char *, char *, uint64_t))v208)(v276, v209, v197);
    uint64_t v214 = v333;
    if (v212(v333, 1, v207) == 1)
    {
      uint64_t v198 = v209;
      uint64_t v215 = (void (*)(char *, uint64_t))v322;
      v322(v302, v197);
      v215(v301, v197);
      (*(void (**)(char *, uint64_t))v308)(v213, v207);
      uint64_t v194 = v318;
LABEL_58:
      (*v312)(v198, TupleTypeMetadata2);
      goto LABEL_59;
    }
    uint64_t v216 = v292;
    v281(v292, v214, v207);
    swift_getAssociatedConformanceWitness();
    char v217 = sub_10096BBE0();
    uint64_t v218 = *(void (**)(char *, uint64_t))v308;
    (*(void (**)(char *, uint64_t))v308)(v216, v207);
    uint64_t v219 = (void (*)(char *, uint64_t))v322;
    v322(v302, v197);
    v219(v301, v197);
    v218(v213, v207);
    v219(v209, v197);
    uint64_t v194 = v318;
    if (v217)
    {
      swift_bridgeObjectRelease_n();
LABEL_102:
      uint64_t v74 = v311;
      v218(v314, v311);
      uint64_t v77 = v316;
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      goto LABEL_9;
    }
LABEL_59:
    uint64_t v181 = v311;
    uint64_t v201 = sub_10096C1A0();
    uint64_t v196 = v329 + 1;
    if (v323 == (void (**)(void, void, void))v201) {
      goto LABEL_93;
    }
  }
  __break(1u);
LABEL_104:
  __break(1u);
LABEL_105:
  swift_retain();
  swift_release();
  __break(1u);
LABEL_106:
  swift_retain();
  uint64_t result = swift_release();
  __break(1u);
LABEL_107:
  __break(1u);
LABEL_108:
  __break(1u);
  return result;
}

uint64_t sub_1000F99B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v13 = a3;
  uint64_t v14 = a4;
  uint64_t v11 = a1;
  uint64_t v12 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v16 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v18 = swift_getAssociatedConformanceWitness();
  type metadata accessor for ReconciliationID();
  uint64_t v4 = sub_10096C890();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v11 - v6;
  uint64_t v8 = v19;
  uint64_t result = sub_1000F9B68((char *)&v11 - v6, v11, v12, v13, v14);
  if (!v8)
  {
    char v10 = result;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return v10 & 1;
  }
  return result;
}

#error "1000F9B68: too big function (funcsize=0)"

uint64_t sub_10010BD78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = sub_10096C890();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)v20 - v15;
  v20[0] = a2;
  v20[1] = a3;
  v20[2] = a4;
  v20[3] = a5;
  uint64_t v17 = type metadata accessor for ItemReconciliation();
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a1 + *(int *)(v17 + 52), v13);
  uint64_t v18 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, AssociatedTypeWitness);
  if (result != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v18 + 32))(a6, v16, AssociatedTypeWitness);
  }
  __break(1u);
  return result;
}

uint64_t sub_10010BF14(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(*a2 + 88);
  uint64_t v5 = *(void *)(*a2 + 80);
  uint64_t v6 = *(void *)(*a2 + 96);
  uint64_t v37 = *(void *)(*a2 + 104);
  uint64_t v38 = v4;
  uint64_t v45 = v4;
  uint64_t v46 = v5;
  uint64_t v47 = v37;
  uint64_t v48 = v6;
  uint64_t v7 = type metadata accessor for ItemReconciliation();
  uint64_t v39 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v42 = (uint64_t)&v35 - v8;
  uint64_t v43 = v6;
  uint64_t v40 = v5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = sub_10096C890();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v35 - v13;
  uint64_t v15 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v35 - v16;
  uint64_t v44 = v7;
  uint64_t v18 = *(int *)(v7 + 52);
  uint64_t v41 = a1;
  uint64_t v19 = a1 + v18;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, a1 + v18, v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1, AssociatedTypeWitness) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v14, AssociatedTypeWitness);
    BOOL v21 = sub_1005152D8();
    uint64_t v22 = v43;
    if (v21)
    {
      uint64_t v23 = v19 + *(int *)(type metadata accessor for ItemReconciliationHalf() + 64);
      if (!*(unsigned char *)(v23 + 16) && (*(unsigned char *)(v23 + 1) & 1) != 0)
      {
        (*(void (**)(char *, uint64_t))(v15 + 8))(v17, AssociatedTypeWitness);
        return 0;
      }
    }
    uint64_t v36 = v17;
    uint64_t v24 = (*(uint64_t (**)(void))(*a2 + 176))();
    uint64_t v25 = v42;
    uint64_t v20 = v44;
    uint64_t v26 = v49;
    sub_10082B988(v24, v44, v42);
    if (v26)
    {
      (*(void (**)(char *, uint64_t))(v15 + 8))(v36, AssociatedTypeWitness);
      swift_release();
      return v20;
    }
    swift_release();
    uint64_t v27 = v25 + *(int *)(v20 + 52);
    uint64_t v28 = v40;
    uint64_t v29 = type metadata accessor for ItemReconciliationHalf();
    if (!*(void *)(v27 + *(int *)(v29 + 36)))
    {
      uint64_t v20 = *(void *)(v27 + *(int *)(v29 + 40)) & 3;
      if (v20)
      {
LABEL_14:
        (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v25, v44);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v36, AssociatedTypeWitness);
        return v20;
      }
      uint64_t v31 = v28;
      uint64_t v32 = a2[3];
      uint64_t v45 = v31;
      uint64_t v46 = v38;
      uint64_t v47 = v22;
      uint64_t v48 = v37;
      uint64_t ItemMetadata = type metadata accessor for Ingestion.FetchItemMetadata();
      uint64_t v34 = v36;
      if (((*(uint64_t (**)(char *, uint64_t, void))(*(void *)v32 + 288))(v36, ItemMetadata, 0) & 1) == 0)
      {
        (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v25, v44);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v34, AssociatedTypeWitness);
        return 0;
      }
    }
    if (qword_100ACC0F0 != -1) {
      swift_once();
    }
    uint64_t v20 = static Fields.all;
    goto LABEL_14;
  }
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  return 0;
}

unint64_t sub_10010C460()
{
  return 0xD000000000000033;
}

uint64_t sub_10010C47C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v55 = a3;
  uint64_t v70 = a2;
  uint64_t v4 = *a1;
  uint64_t v5 = *(void *)(*a1 + 104);
  uint64_t v6 = *(void *)(*a1 + 88);
  swift_getAssociatedTypeWitness();
  uint64_t v7 = sub_10096C890();
  uint64_t v53 = *(void *)(v7 - 8);
  uint64_t v54 = v7;
  __chkstk_darwin(v7);
  uint64_t v52 = (char *)&v49 - v8;
  uint64_t v56 = type metadata accessor for ItemReconciliationHalf();
  uint64_t v51 = *(void *)(v56 - 8);
  __chkstk_darwin(v56);
  uint64_t v50 = (char *)&v49 - v9;
  uint64_t v10 = *(void *)(v4 + 80);
  uint64_t v11 = *(void *)(v4 + 96);
  uint64_t v66 = v10;
  uint64_t v67 = v6;
  uint64_t v68 = v11;
  uint64_t v69 = v5;
  uint64_t v12 = type metadata accessor for ItemReconciliation();
  uint64_t v13 = sub_10096C890();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v57 = v13;
  uint64_t v58 = v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v61 = (uint64_t)&v49 - v16;
  uint64_t v60 = *(void *)(v12 - 8);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v59 = (char *)&v49 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v49 - v19;
  uint64_t v63 = v10;
  uint64_t v64 = v11;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v22 = sub_10096C890();
  uint64_t v62 = *(void *)(v22 - 8);
  uint64_t v23 = __chkstk_darwin(v22);
  uint64_t v25 = (char *)&v49 - v24;
  uint64_t v26 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(v23);
  uint64_t v28 = (char *)&v49 - v27;
  uint64_t v29 = v65;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1[4] + 280))(v70);
  if (!v29)
  {
    uint64_t v65 = v28;
    uint64_t v49 = v20;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v25, 1, AssociatedTypeWitness) == 1)
    {
      (*(void (**)(char *, uint64_t))(v62 + 8))(v25, v22);
      return 1;
    }
    uint64_t v31 = v26;
    uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v26 + 32);
    uint64_t v33 = (uint64_t)v65;
    v32(v65, v25, AssociatedTypeWitness);
    swift_getAssociatedConformanceWitness();
    if (sub_10096BBE0())
    {
      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v33, AssociatedTypeWitness);
      return 1;
    }
    else
    {
      uint64_t v34 = v61;
      sub_1000DEDD8(v33, v61);
      uint64_t v35 = v60;
      uint64_t v36 = v12;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v60 + 48))(v34, 1, v12) == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v33, AssociatedTypeWitness);
        (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v34, v57);
        return 1;
      }
      uint64_t v37 = AssociatedTypeWitness;
      uint64_t v70 = 0;
      uint64_t v38 = v49;
      (*(void (**)(char *, uint64_t, uint64_t))(v35 + 32))(v49, v34, v36);
      BOOL v39 = sub_100827AAC(v36);
      uint64_t v40 = v59;
      (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v59, v38, v36);
      if (v39)
      {
        uint64_t v41 = v56;
        int v42 = v40[*(int *)(v36 + 52) + *(int *)(v56 + 52)];
        uint64_t v43 = *(void (**)(char *, uint64_t))(v35 + 8);
        v43(v40, v36);
        (*(void (**)(char *, uint64_t))(v31 + 8))(v65, v37);
        if (v42 == 1)
        {
          v43(v38, v36);
          return 0;
        }
      }
      else
      {
        uint64_t v43 = *(void (**)(char *, uint64_t))(v35 + 8);
        v43(v40, v36);
        (*(void (**)(char *, uint64_t))(v31 + 8))(v65, v37);
        uint64_t v41 = v56;
      }
      uint64_t v45 = v50;
      uint64_t v44 = v51;
      (*(void (**)(char *, char *, uint64_t))(v51 + 16))(v50, &v38[*(int *)(v36 + 52)], v41);
      v43(v38, v36);
      uint64_t v47 = v52;
      uint64_t v46 = v53;
      uint64_t v48 = v54;
      (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v52, v45, v54);
      (*(void (**)(char *, uint64_t))(v44 + 8))(v45, v41);
      (*(void (**)(uint64_t, char *, uint64_t))(v46 + 40))(v55, v47, v48);
      return 1;
    }
  }
  return result;
}

uint64_t sub_10010CBE0(char *a1, void **a2, uint64_t a3)
{
  uint64_t v93 = a3;
  uint64_t v102 = a1;
  uint64_t v4 = *a2;
  uint64_t v5 = (*a2)[11];
  uint64_t v101 = (*a2)[10];
  uint64_t v6 = v4[13];
  uint64_t v7 = v4[12];
  uint64_t v103 = v5;
  uint64_t v104 = v101;
  uint64_t v105 = v6;
  uint64_t v106 = v7;
  uint64_t v8 = type metadata accessor for ItemReconciliation();
  uint64_t v85 = sub_10096C890();
  uint64_t v84 = *(void *)(v85 - 8);
  uint64_t v9 = __chkstk_darwin(v85);
  uint64_t v91 = (uint64_t)v75 - v10;
  uint64_t v87 = v8;
  uint64_t v86 = *(void *)(v8 - 8);
  __chkstk_darwin(v9);
  uint64_t v83 = (char *)v75 - v11;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = sub_10096C890();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v90 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v14 = __chkstk_darwin(TupleTypeMetadata2);
  uint64_t v94 = (char *)v75 - v15;
  uint64_t v16 = *(void *)(v13 - 8);
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v89 = (char *)v75 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v17);
  char v95 = (char *)v75 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  id v97 = (char *)v75 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v100 = (char *)v75 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v27 = (char *)v75 - v26;
  uint64_t v28 = __chkstk_darwin(v25);
  uint64_t v88 = (char *)v75 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v99 = (uint64_t)v75 - v31;
  __chkstk_darwin(v30);
  uint64_t v33 = (char *)v75 - v32;
  uint64_t v103 = v101;
  uint64_t v104 = v5;
  uint64_t v101 = v5;
  uint64_t v105 = v7;
  uint64_t v106 = v6;
  uint64_t v35 = v34;
  uint64_t v98 = v6;
  uint64_t v36 = &v102[*(int *)(type metadata accessor for ItemReconciliation() + 52)];
  uint64_t v92 = *(void (**)(void))(v16 + 16);
  ((void (*)(char *, char *, uint64_t))v92)(v27, v36, v13);
  uint64_t v102 = *(char **)(v35 + 48);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v102)(v27, 1, AssociatedTypeWitness) != 1)
  {
    uint64_t v82 = v16;
    uint64_t v81 = v13;
    uint64_t v37 = (void (*)(uint64_t, uint64_t))(v35 + 32);
    uint64_t v38 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
    v38(v33, v27, AssociatedTypeWitness);
    uint64_t v39 = v107;
    (*(void (**)(char *))(*a2[5] + 280))(v33);
    if (v39)
    {
      (*(void (**)(char *, uint64_t))(v35 + 8))(v33, AssociatedTypeWitness);
      return (uint64_t)v37;
    }
    unint64_t v78 = (void (*)(uint64_t, char *, uint64_t))v38;
    uint64_t v77 = a2;
    uint64_t v79 = v33;
    uint64_t v80 = v35;
    uint64_t v40 = (unsigned int (*)(char *, uint64_t, uint64_t))v102;
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v102)(v100, 1, AssociatedTypeWitness) == 1)
    {
      (*(void (**)(char *, uint64_t))(v80 + 8))(v79, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t))(v82 + 8))(v100, v81);
      return 1;
    }
    uint64_t v107 = 0;
    uint64_t v42 = v99;
    v78(v99, v100, AssociatedTypeWitness);
    uint64_t v43 = *(void *)(*(void *)(swift_getAssociatedConformanceWitness() + 32) + 8);
    uint64_t v44 = v79;
    if (sub_10096BBE0())
    {
      uint64_t v45 = *(void (**)(uint64_t, uint64_t))(v80 + 8);
      v45(v42, AssociatedTypeWitness);
      v45((uint64_t)v44, AssociatedTypeWitness);
      return 1;
    }
    v75[1] = v43;
    uint64_t v46 = v80;
    uint64_t v47 = *(void (**)(char *, uint64_t, uint64_t))(v80 + 16);
    uint64_t v48 = v97;
    uint64_t v76 = AssociatedTypeWitness;
    v47(v97, v42, AssociatedTypeWitness);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v46 + 56))(v48, 0, 1, AssociatedTypeWitness);
    uint64_t v49 = v95;
    uint64_t v50 = v92;
    uint64_t v51 = v81;
    ((void (*)(char *, uint64_t, uint64_t))v92)(v95, v93, v81);
    uint64_t v52 = &v94[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v53 = v94;
    v50();
    uint64_t v100 = v52;
    uint64_t v54 = v52;
    uint64_t v55 = v49;
    ((void (*)(char *, char *, uint64_t))v50)(v54, v49, v51);
    uint64_t v56 = v76;
    if (((unsigned int (*)(char *, uint64_t))v40)(v53, 1) == 1)
    {
      uint64_t v57 = *(void (**)(char *, uint64_t))(v82 + 8);
      v57(v55, v51);
      v57(v97, v51);
      if (v40(v100, 1, v56) == 1)
      {
        v57(v53, v51);
        uint64_t v58 = *(void (**)(uint64_t, uint64_t))(v80 + 8);
        v58(v99, v56);
LABEL_19:
        v58((uint64_t)v79, v56);
        return 1;
      }
    }
    else
    {
      uint64_t v59 = v89;
      ((void (*)(char *, char *, uint64_t))v50)(v89, v53, v51);
      uint64_t v60 = v100;
      if (v40(v100, 1, v56) != 1)
      {
        uint64_t v63 = v88;
        v78((uint64_t)v88, v60, v56);
        LODWORD(v102) = sub_10096BBE0();
        uint64_t v58 = *(void (**)(uint64_t, uint64_t))(v80 + 8);
        v58((uint64_t)v63, v56);
        uint64_t v64 = *(void (**)(char *, uint64_t))(v82 + 8);
        v64(v95, v51);
        v64(v97, v51);
        uint64_t v62 = v56;
        v58((uint64_t)v59, v56);
        v64(v53, v51);
        if (v102)
        {
          v58(v99, v56);
          goto LABEL_19;
        }
LABEL_20:
        uint64_t v65 = v91;
        uint64_t v66 = v99;
        uint64_t v67 = v107;
        sub_1000DF200(v99, v91);
        if (v67)
        {
          uint64_t v37 = *(void (**)(uint64_t, uint64_t))(v80 + 8);
          v37(v66, v62);
          v37((uint64_t)v79, v62);
          return (uint64_t)v37;
        }
        uint64_t v107 = 0;
        uint64_t v69 = v86;
        uint64_t v68 = v87;
        int v70 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v86 + 48))(v65, 1, v87);
        uint64_t v71 = v79;
        if (v70 != 1)
        {
          uint64_t v73 = v83;
          (*(void (**)(char *, uint64_t, uint64_t))(v69 + 32))(v83, v65, v68);
          uint64_t v37 = (void (*)(uint64_t, uint64_t))(v73[*(int *)(type metadata accessor for ItemReconciliationHalf()
                                                                   + 52)] != 1);
          (*(void (**)(char *, uint64_t))(v69 + 8))(v73, v68);
          uint64_t v74 = *(void (**)(uint64_t, uint64_t))(v80 + 8);
          v74(v66, v62);
          v74((uint64_t)v71, v62);
          return (uint64_t)v37;
        }
        uint64_t v72 = *(void (**)(uint64_t, uint64_t))(v80 + 8);
        v72(v66, v62);
        v72((uint64_t)v71, v62);
        (*(void (**)(uint64_t, uint64_t))(v84 + 8))(v65, v85);
        return 1;
      }
      uint64_t v61 = *(void (**)(char *, uint64_t))(v82 + 8);
      v61(v95, v51);
      v61(v97, v51);
      (*(void (**)(char *, uint64_t))(v80 + 8))(v59, v56);
    }
    uint64_t v62 = v56;
    (*(void (**)(char *, uint64_t))(v90 + 8))(v53, TupleTypeMetadata2);
    goto LABEL_20;
  }
  (*(void (**)(char *, uint64_t))(v16 + 8))(v27, v13);
  return 1;
}

unint64_t sub_10010D750(unint64_t result, uint64_t a2, void *a3)
{
  if ((result & 0x8000000000000000) == 0) {
    return (unint64_t)a3;
  }
  return result;
}

uint64_t sub_10010D75C(uint64_t result)
{
  if ((result & 0x8000000000000000) == 0) {
    return _objc_release_x2();
  }
  return result;
}

uint64_t sub_10010D768(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 - 8);
  uint64_t v5 = (void (*)(void))__chkstk_darwin(a1);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5();
  uint64_t v8 = sub_10096D220();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, a3);
  return v8;
}

uint64_t sub_10010D854(uint64_t result)
{
  if ((~result & 0xF000000000000007) != 0) {
    return swift_release();
  }
  return result;
}

void (*sub_10010D86C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(void *a1)
{
  uint64_t v8 = *(void *)(a4 - 8);
  uint64_t v9 = v8;
  a1[1] = a4;
  a1[2] = v8;
  size_t v10 = *(void *)(v8 + 64);
  uint64_t v11 = malloc(v10);
  a1[3] = v11;
  BOOL v12 = sub_10096C130();
  sub_10096C0E0();
  if (v12)
  {
    (*(void (**)(void *, unint64_t, uint64_t))(v9 + 16))(v11, a3+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(void *)(v9 + 72) * a2, a4);
    return sub_10010D9C8;
  }
  uint64_t result = (void (*)(void *))sub_10096CC20();
  if (v10 == 8)
  {
    *a1 = result;
    (*(void (**)(void *, void *, uint64_t))(v9 + 16))(v11, a1, a4);
    swift_unknownObjectRelease();
    return sub_10010D9C8;
  }
  __break(1u);
  return result;
}

void sub_10010D9C8(void *a1)
{
  uint64_t v1 = (void *)a1[3];
  (*(void (**)(void *, void))(a1[2] + 8))(v1, a1[1]);

  free(v1);
}

unint64_t sub_10010DA14()
{
  unint64_t result = qword_100ACB680;
  if (!qword_100ACB680)
  {
    sub_10096A650();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100ACB680);
  }
  return result;
}

BOOL sub_10010DA6C()
{
  return !sub_1005152D8();
}

uint64_t sub_10010DA98(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ItemMetadata();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10010DAFC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ItemMetadata();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10010DB60()
{
  return sub_10010D768(v0[4], v0[5], v0[2]);
}

uint64_t sub_10010DB6C()
{
  return swift_deallocObject();
}

unsigned char **sub_10010DB7C(unsigned char **a1, uint64_t a2, uint64_t a3)
{
  return sub_100719BF0(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

uint64_t sub_10010DB84()
{
  return swift_deallocObject();
}

uint64_t sub_10010DB94()
{
  return sub_100719CA4(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_10010DB9C(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  return sub_100719CCC(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_10010DBA8()
{
  return swift_deallocObject();
}

uint64_t sub_10010DBB8()
{
  return swift_deallocObject();
}

uint64_t sub_10010DBCC()
{
  return swift_deallocObject();
}

uint64_t sub_10010DBDC()
{
  return swift_deallocObject();
}

uint64_t sub_10010DBF0()
{
  return swift_deallocObject();
}

uint64_t sub_10010DC00()
{
  return swift_deallocObject();
}

uint64_t sub_10010DC14()
{
  return swift_deallocObject();
}

uint64_t sub_10010DC24()
{
  return swift_deallocObject();
}

uint64_t sub_10010DC34()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10010DC6C(uint64_t a1, unint64_t a2)
{
  if ((unint64_t)a1 < 0xFFFFFFFF00000000 || (a2 & 0xF000000000000007) != 0) {
    return sub_1000CF144(a1, a2);
  }
  return a1;
}

uint64_t sub_10010DC8C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10010DCC4()
{
  return swift_deallocObject();
}

uint64_t sub_10010DCD4()
{
  return swift_deallocObject();
}

uint64_t sub_10010DCE8()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(AssociatedTypeWitness - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(AssociatedTypeWitness - 8) + 80)), AssociatedTypeWitness);

  return swift_deallocObject();
}

uint64_t sub_10010DD90@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  uint64_t v6 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  return v5(a1, v6, AssociatedTypeWitness);
}

uint64_t sub_10010DE1C()
{
  uint64_t v1 = (int *)type metadata accessor for SnapshotItem();
  uint64_t v19 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v2 = v0 + ((v19 + 48) & ~v19);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8);
  v4(v2, AssociatedTypeWitness);
  v4(v2 + v1[9], AssociatedTypeWitness);
  uint64_t v5 = v2 + v1[10];
  uint64_t v6 = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v20 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v7 = type metadata accessor for FileItemVersion();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(v5 + *(int *)(v7 + 56), v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = v2 + v1[12];
  uint64_t v9 = (int *)type metadata accessor for ItemMetadata();
  uint64_t v10 = v8 + v9[7];
  uint64_t v11 = sub_10096B0E0();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
  v13(v10, v11);
  v13(v8 + v9[8], v11);
  swift_bridgeObjectRelease();
  uint64_t v14 = v8 + v9[29];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v14, 1, v11)) {
    v13(v14, v11);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v15 = (uint64_t *)(v8 + v9[33]);
  unint64_t v16 = v15[1];
  if (v16 >> 60 != 15) {
    sub_10001E9C0(*v15, v16);
  }
  swift_bridgeObjectRelease();
  uint64_t v17 = v2 + v1[13];
  if (*(void *)(v17 + 16) != 1)
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*(void *)(v17 + 192))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  sub_1000CF144(*(void *)(v2 + v1[17]), *(void *)(v2 + v1[17] + 8));
  return swift_deallocObject();
}

uint64_t sub_10010E258@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for SnapshotItem();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  uint64_t v6 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  return v5(a1, v6, v3);
}

uint64_t sub_10010E2D4()
{
  return swift_deallocObject();
}

uint64_t sub_10010E2E4()
{
  return swift_deallocObject();
}

uint64_t sub_10010E2F4()
{
  return swift_deallocObject();
}

uint64_t sub_10010E304()
{
  return swift_deallocObject();
}

uint64_t sub_10010E324()
{
  return swift_deallocObject();
}

uint64_t sub_10010E334()
{
  return swift_deallocObject();
}

uint64_t sub_10010E344()
{
  return swift_deallocObject();
}

uint64_t sub_10010E354()
{
  return swift_deallocObject();
}

uint64_t sub_10010E368()
{
  uint64_t v24 = type metadata accessor for ItemReconciliation();
  uint64_t v23 = *(unsigned __int8 *)(*(void *)(v24 - 8) + 80);
  uint64_t v1 = v0 + ((v23 + 48) & ~v23);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, AssociatedTypeWitness)) {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, AssociatedTypeWitness);
  }
  uint64_t v4 = (int *)type metadata accessor for ItemReconciliationHalf();
  uint64_t v5 = v1 + v4[12];
  uint64_t v6 = swift_getAssociatedTypeWitness();
  uint64_t v7 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v8 = type metadata accessor for FileItemVersion();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v5, 1, v8))
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v5 + *(int *)(v8 + 56), v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  sub_1000D31F8(*(void *)(v1 + v4[16]), *(void *)(v1 + v4[16] + 8), *(unsigned char *)(v1 + v4[16] + 16));
  uint64_t v9 = v1 + v4[17];
  unint64_t v10 = *(void *)(v9 + 16);
  if (v10 >> 60 != 11 && v10 >> 60 != 15) {
    sub_10001E9C0(*(void *)(v9 + 8), v10);
  }

  uint64_t v12 = v1 + *(int *)(v24 + 52);
  uint64_t v13 = swift_getAssociatedTypeWitness();
  uint64_t v14 = *(void *)(v13 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13)) {
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
  }
  uint64_t v15 = (int *)type metadata accessor for ItemReconciliationHalf();
  uint64_t v16 = v12 + v15[12];
  uint64_t v17 = swift_getAssociatedTypeWitness();
  uint64_t v18 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v19 = type metadata accessor for FileItemVersion();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 48))(v16, 1, v19))
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(v16, v17);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v16 + *(int *)(v19 + 56), v18);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  sub_1000D31F8(*(void *)(v12 + v15[16]), *(void *)(v12 + v15[16] + 8), *(unsigned char *)(v12 + v15[16] + 16));
  uint64_t v20 = v12 + v15[17];
  unint64_t v21 = *(void *)(v20 + 16);
  if (v21 >> 60 != 11 && v21 >> 60 != 15) {
    sub_10001E9C0(*(void *)(v20 + 8), v21);
  }

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_10010E910@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v7 = *(void *)(type metadata accessor for ItemReconciliation() - 8);
  return sub_10010BD78((uint64_t)v1 + ((*(unsigned __int8 *)(v7 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)), v3, v4, v5, v6, a1);
}

uint64_t sub_10010E9B4()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(AssociatedTypeWitness - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(AssociatedTypeWitness - 8) + 80)), AssociatedTypeWitness);

  return swift_deallocObject();
}

uint64_t sub_10010EA5C@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  uint64_t v6 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  return v5(a1, v6, AssociatedTypeWitness);
}

uint64_t sub_10010EAE8()
{
  return swift_deallocObject();
}

uint64_t sub_10010EAF8()
{
  return swift_deallocObject();
}

uint64_t sub_10010EB08()
{
  return swift_deallocObject();
}

uint64_t sub_10010EB18()
{
  return swift_deallocObject();
}

uint64_t sub_10010EB28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000F6EDC(a1, a2);
}

uint64_t sub_10010EB4C(uint64_t a1, char *a2, void *a3)
{
  uint64_t v65 = a2;
  uint64_t v5 = *a3;
  uint64_t v6 = *(void *)(*a3 + 104);
  uint64_t v7 = *(void *)(*a3 + 88);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v58 = sub_10096C890();
  uint64_t v56 = *(void *)(v58 - 8);
  uint64_t v9 = __chkstk_darwin(v58);
  uint64_t v57 = (char *)&v53 - v10;
  uint64_t v55 = AssociatedTypeWitness;
  uint64_t v59 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(v9);
  uint64_t v54 = (char *)&v53 - v11;
  uint64_t v12 = *(void *)(v5 + 80);
  uint64_t v13 = *(void *)(v5 + 96);
  uint64_t v14 = type metadata accessor for ItemReconciliationHalf();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v61 = v14;
  uint64_t v62 = v15;
  __chkstk_darwin(v14);
  uint64_t v60 = (char *)&v53 - v16;
  uint64_t v67 = v12;
  uint64_t v68 = v7;
  uint64_t v69 = v13;
  uint64_t v70 = v6;
  uint64_t v66 = type metadata accessor for ItemReconciliation();
  uint64_t v17 = sub_10096C890();
  uint64_t v63 = *(void *)(v17 - 8);
  uint64_t v64 = v17;
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v53 - v18;
  uint64_t v20 = swift_getAssociatedTypeWitness();
  uint64_t v21 = sub_10096C890();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v25 = (char *)&v53 - v24;
  uint64_t v26 = *(void *)(v20 - 8);
  __chkstk_darwin(v23);
  uint64_t v28 = (char *)&v53 - v27;
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v25, a1, v21);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v25, 1, v20) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v25, v21);
  }
  uint64_t v30 = v62;
  uint64_t v53 = a1;
  (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v28, v25, v20);
  uint64_t v32 = v63;
  uint64_t v31 = v64;
  (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v19, v65, v64);
  uint64_t v33 = *(void *)(v66 - 8);
  if ((*(unsigned int (**)(char *, uint64_t))(v33 + 48))(v19, 1) == 1)
  {
    (*(void (**)(char *, uint64_t))(v32 + 8))(v19, v31);
    return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v28, v20);
  }
  uint64_t v64 = v20;
  uint64_t v65 = v28;
  uint64_t v34 = v30;
  uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v30 + 16);
  uint64_t v36 = v60;
  uint64_t v37 = v61;
  v35(v60, v19, v61);
  uint64_t v38 = v66;
  (*(void (**)(char *, uint64_t))(v33 + 8))(v19, v66);
  uint64_t v39 = &v36[*(int *)(v37 + 64)];
  uint64_t v40 = *(void *)v39;
  uint64_t v41 = *((void *)v39 + 1);
  int v42 = v39[16];
  sub_10009C5FC(*(void *)v39, v41, v39[16]);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v36, v37);
  if (v42)
  {
    sub_1000D31F8(v40, v41, v42);
    return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v65, v64);
  }
  sub_1000D31F8(v40, v41, 0);
  if ((v40 & 0x100) == 0) {
    return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v65, v64);
  }
  uint64_t v43 = a3[3];
  uint64_t v44 = v65;
  uint64_t v45 = v71;
  (*(void (**)(char *))(*(void *)v43 + 352))(v65);
  if (v45) {
    return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v44, v64);
  }
  uint64_t v47 = v56;
  uint64_t v46 = v57;
  uint64_t v48 = v58;
  (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v57, v53 + *(int *)(v38 + 52), v58);
  uint64_t v49 = v59;
  uint64_t v50 = v55;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48))(v46, 1, v55) == 1)
  {
    (*(void (**)(char *, uint64_t))(v26 + 8))(v65, v64);
    return (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v46, v48);
  }
  else
  {
    uint64_t v51 = v46;
    uint64_t v52 = v54;
    (*(void (**)(char *, char *, uint64_t))(v49 + 32))(v54, v51, v50);
    (*(void (**)(char *))(*(void *)v43 + 360))(v52);
    (*(void (**)(char *, uint64_t))(v49 + 8))(v52, v50);
    return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v65, v64);
  }
}

unint64_t sub_10010F2A0()
{
  unint64_t result = qword_100AD6710;
  if (!qword_100AD6710)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100AD6710);
  }
  return result;
}

uint64_t sub_10010F2F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000E8D80(a1, a2);
}

uint64_t sub_10010F31C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000EB428(a1, a2);
}

uint64_t sub_10010F340(uint64_t a1)
{
  return sub_1000EB32C(a1, *(void *)(v1 + 48)) & 1;
}

uint64_t sub_10010F368(uint64_t a1, void (*a2)(void, void), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v199 = a4;
  uint64_t v216 = a3;
  uint64_t v214 = a2;
  uint64_t v223 = a1;
  uint64_t v175 = sub_10096B480();
  uint64_t v174 = *(void *)(v175 - 8);
  __chkstk_darwin(v175);
  unint64_t v176 = &v170[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v225[0] = a5;
  v225[1] = a6;
  v225[2] = a7;
  v225[3] = a8;
  uint64_t v219 = type metadata accessor for ItemReconciliation();
  uint64_t v173 = *(void *)(v219 - 8);
  uint64_t v13 = __chkstk_darwin(v219);
  uint64_t v172 = &v170[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v196 = &v170[-v16];
  __chkstk_darwin(v15);
  uint64_t v198 = &v170[-v17];
  uint64_t v203 = a8;
  uint64_t v202 = a6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v218 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v183 = &v170[-v19];
  uint64_t v208 = v20;
  uint64_t v21 = sub_10096C890();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v181 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v22 = __chkstk_darwin(TupleTypeMetadata2);
  uint64_t v195 = &v170[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v211 = &v170[-v25];
  uint64_t v220 = v21;
  uint64_t v222 = *(NSObject **)(v21 - 8);
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v180 = &v170[-((v27 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v215 = &v170[-v29];
  uint64_t v30 = __chkstk_darwin(v28);
  char v217 = &v170[-v31];
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v179 = &v170[-v33];
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v206 = &v170[-v35];
  __chkstk_darwin(v34);
  uint64_t v207 = &v170[-v36];
  uint64_t v201 = (void (*)(void, void, void))a7;
  int v200 = (void (*)(void, void, void, void))a5;
  uint64_t v37 = swift_getAssociatedTypeWitness();
  uint64_t v38 = *(NSObject **)(v37 - 8);
  __chkstk_darwin(v37);
  uint64_t v182 = &v170[-v39];
  uint64_t v40 = sub_10096C890();
  uint64_t v41 = swift_getTupleTypeMetadata2();
  uint64_t v178 = *(void *)(v41 - 8);
  uint64_t v42 = __chkstk_darwin(v41);
  uint64_t v193 = &v170[-((v43 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v44 = __chkstk_darwin(v42);
  uint64_t v46 = &v170[-v45];
  uint64_t v185 = *(void *)(v40 - 8);
  uint64_t v47 = v185;
  uint64_t v48 = __chkstk_darwin(v44);
  uint64_t v177 = &v170[-((v49 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v50 = __chkstk_darwin(v48);
  uint64_t v212 = &v170[-v51];
  uint64_t v52 = __chkstk_darwin(v50);
  uint64_t v213 = &v170[-v53];
  uint64_t v54 = __chkstk_darwin(v52);
  uint64_t v186 = &v170[-v55];
  uint64_t v56 = __chkstk_darwin(v54);
  uint64_t v58 = &v170[-v57];
  __chkstk_darwin(v56);
  uint64_t v60 = &v170[-v59];
  uint64_t v209 = (void (*)(void))v47;
  uint64_t v61 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v47 + 16);
  v61(&v170[-v59], v223, v40);
  isa = (void (*)(void, void, void))v38[2].isa;
  uint64_t v197 = v38 + 2;
  uint64_t v189 = isa;
  isa(v58, v214, v37);
  uint64_t v63 = (void (*)(void, void, void, void))v38[7].isa;
  uint64_t v188 = v38 + 7;
  uint64_t v187 = v63;
  v63(v58, 0, 1, v37);
  uint64_t v205 = v41;
  uint64_t v64 = &v46[*(int *)(v41 + 48)];
  v61(v46, (uint64_t)v60, v40);
  v61(v64, (uint64_t)v58, v40);
  uint64_t v194 = v38;
  uint64_t v65 = (unsigned int (*)(void, void, void))v38[6].isa;
  v204 = v46;
  unsigned int v66 = v65(v46, 1, v37);
  uint64_t v210 = v37;
  uint64_t v192 = v38 + 6;
  uint64_t v191 = v65;
  uint64_t v190 = (void (*)(void, void, void))v61;
  uint64_t v184 = v47 + 16;
  if (v66 == 1)
  {
    uint64_t v67 = *(void (**)(unsigned char *, uint64_t))(v185 + 8);
    v67(v58, v40);
    v67(v60, v40);
    if (v65(v64, 1, v37) == 1)
    {
      v67(v204, v40);
      uint64_t v68 = v223;
      uint64_t v69 = v214;
      uint64_t v70 = (void (*)(uint64_t, void (*)(void, void), uint64_t))v189;
      uint64_t v71 = v187;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  uint64_t v72 = v185;
  v61(v186, (uint64_t)v204, v40);
  if (v65(v64, 1, v37) == 1)
  {
    uint64_t v67 = *(void (**)(unsigned char *, uint64_t))(v72 + 8);
    v67(v58, v40);
    v67(v60, v40);
    ((void (*)(unsigned char *, uint64_t))v194[1].isa)(v186, v37);
LABEL_6:
    uint64_t v69 = v214;
    uint64_t v70 = (void (*)(uint64_t, void (*)(void, void), uint64_t))v189;
    uint64_t v71 = v187;
    (*(void (**)(unsigned char *, uint64_t))(v178 + 8))(v204, v205);
    uint64_t v68 = v223;
LABEL_7:
    uint64_t v73 = type metadata accessor for ItemReconciliationHalf();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v73 - 8) + 8))(v68, v73);
    double v74 = sub_1008275F4(v68);
    ((void (*)(uint64_t, uint64_t, double))v67)(v68, v40, v74);
    v70(v68, v69, v37);
    v71(v68, 0, 1, v37);
    goto LABEL_8;
  }
  uint64_t v118 = v194;
  uint64_t v119 = v182;
  ((void (*)(unsigned char *, unsigned char *, uint64_t))v194[4].isa)(v182, v64, v37);
  swift_getAssociatedConformanceWitness();
  int v120 = v186;
  int v121 = sub_10096BBE0();
  uint64_t v37 = v210;
  int v171 = v121;
  uint64_t v122 = (void (*)(void, void))v118[1].isa;
  v122(v119, v210);
  uint64_t v67 = *(void (**)(unsigned char *, uint64_t))(v72 + 8);
  v67(v58, v40);
  v67(v60, v40);
  v122(v120, v37);
  v67(v204, v40);
  uint64_t v68 = v223;
  uint64_t v69 = v214;
  uint64_t v70 = (void (*)(uint64_t, void (*)(void, void), uint64_t))v189;
  uint64_t v71 = v187;
  if ((v171 & 1) == 0) {
    goto LABEL_7;
  }
LABEL_8:
  uint64_t v214 = (void (*)(void, void))v67;
  uint64_t v75 = (void (*)(unsigned char *, void (*)(void, void), uint64_t))v70;
  uint64_t v76 = v213;
  uint64_t v77 = (void (*)(unsigned char *, unsigned char *, uint64_t))v190;
  v190(v213, v68, v40);
  unint64_t v78 = v212;
  uint64_t v79 = v210;
  v75(v212, v69, v210);
  v71((uint64_t)v78, 0, 1, v79);
  uint64_t v80 = v193;
  uint64_t v81 = &v193[*(int *)(v205 + 48)];
  v77(v193, v76, v40);
  v77(v81, v78, v40);
  uint64_t v82 = (unsigned int (*)(unsigned char *, uint64_t, uint64_t))v191;
  if (v191(v80, 1, v79) == 1)
  {
    unsigned int v83 = v82(v81, 1, v79);
    uint64_t v84 = v211;
    if (v83 == 1)
    {
      uint64_t v85 = (void (*)(unsigned char *, uint64_t))v214;
      v214(v80, v40);
      v85(v212, v40);
      v85(v213, v40);
      uint64_t v86 = v220;
      uint64_t v87 = v207;
      uint64_t v88 = v223;
      goto LABEL_13;
    }
    goto LABEL_49;
  }
  uint64_t v89 = v77;
  uint64_t v90 = v82;
  uint64_t v91 = v177;
  v89(v177, v80, v40);
  uint64_t v92 = v80;
  if (v90(v81, 1, v79) == 1)
  {
    ((void (*)(unsigned char *, uint64_t))v194[1].isa)(v91, v79);
LABEL_49:
    (*(void (**)(unsigned char *, uint64_t))(v178 + 8))(v80, v205);
    int v169 = (void (*)(unsigned char *, uint64_t))v214;
    v214(v212, v40);
    v169(v213, v40);
LABEL_50:
    sub_100713470((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderExtensions/fssync/libfssync/interfaces/persistence/ReconciliationTable.swift", 126, 2, 326);
  }
  uint64_t v93 = v194;
  uint64_t v94 = v182;
  ((void (*)(unsigned char *, unsigned char *, uint64_t))v194[4].isa)(v182, v81, v79);
  swift_getAssociatedConformanceWitness();
  char v95 = sub_10096BBE0();
  uint64_t v96 = (void (*)(void, void))v93[1].isa;
  v96(v91, v79);
  v96(v94, v79);
  id v97 = (void (*)(unsigned char *, uint64_t))v214;
  v214(v92, v40);
  v97(v212, v40);
  v97(v213, v40);
  uint64_t v86 = v220;
  uint64_t v84 = v211;
  uint64_t v87 = v207;
  uint64_t v88 = v223;
  if ((v95 & 1) == 0) {
    goto LABEL_50;
  }
LABEL_13:
  uint64_t v98 = v222 + 2;
  uint64_t v99 = (void (*)(void))v222[2].isa;
  uint64_t v205 = v88 + *(int *)(v219 + 52);
  v99(v87);
  uint64_t v100 = v218;
  uint64_t v101 = *(void (**)(void, void, void))(v218 + 16);
  uint64_t v102 = v206;
  uint64_t v103 = v208;
  v204 = (unsigned char *)(v218 + 16);
  uint64_t v201 = v101;
  v101(v206, v216, v208);
  uint64_t v104 = *(void (**)(void, void, void, void))(v100 + 56);
  uint64_t v213 = (unsigned char *)(v100 + 56);
  int v200 = v104;
  v104(v102, 0, 1, v103);
  uint64_t v105 = &v84[*(int *)(TupleTypeMetadata2 + 48)];
  ((void (*)(unsigned char *, unsigned char *, uint64_t))v99)(v84, v87, v86);
  ((void (*)(unsigned char *, unsigned char *, uint64_t))v99)(v105, v102, v86);
  uint64_t v106 = *(unsigned char **)(v100 + 48);
  int v107 = ((uint64_t (*)(unsigned char *, uint64_t, uint64_t))v106)(v84, 1, v103);
  uint64_t v212 = v106;
  uint64_t v209 = (void (*)(void))v99;
  uint64_t v210 = v100 + 48;
  if (v107 == 1)
  {
    uint64_t v108 = (void (*)(void, void))v222[1].isa;
    v108(v102, v86);
    v108(v87, v86);
    int v109 = ((uint64_t (*)(unsigned char *, uint64_t, uint64_t))v106)(v105, 1, v103);
    uint64_t v214 = v108;
    if (v109 == 1)
    {
      v108(v211, v86);
      uint64_t v103 = v208;
      uint64_t v110 = v209;
      uint64_t v111 = v216;
      uint64_t v112 = v205;
      uint64_t v113 = v201;
      uint64_t v114 = v200;
      goto LABEL_23;
    }
    uint64_t v103 = v208;
    uint64_t v110 = v209;
    uint64_t v112 = v205;
    goto LABEL_21;
  }
  uint64_t v115 = v222;
  uint64_t v116 = v179;
  uint64_t v197 = v98;
  ((void (*)(unsigned char *, unsigned char *, uint64_t))v99)(v179, v84, v86);
  if (((unsigned int (*)(unsigned char *, uint64_t, uint64_t))v106)(v105, 1, v103) == 1)
  {
    uint64_t v117 = (void (*)(void, void))v115[1].isa;
    v117(v206, v86);
    uint64_t v214 = v117;
    v117(v207, v86);
    (*(void (**)(unsigned char *, uint64_t))(v218 + 8))(v116, v103);
    uint64_t v112 = v205;
    uint64_t v110 = v209;
LABEL_21:
    (*(void (**)(unsigned char *, uint64_t))(v181 + 8))(v211, TupleTypeMetadata2);
    uint64_t v111 = v216;
    uint64_t v113 = v201;
    uint64_t v114 = v200;
LABEL_22:
    uint64_t v123 = type metadata accessor for ItemReconciliationHalf();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v123 - 8) + 8))(v112, v123);
    uint64_t v86 = v220;
    double v124 = sub_1008275F4(v112);
    ((void (*)(uint64_t, uint64_t, double))v214)(v112, v86, v124);
    v113(v112, v111, v103);
    v114(v112, 0, 1, v103);
    goto LABEL_23;
  }
  uint64_t v147 = v218;
  unint64_t v148 = v183;
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v218 + 32))(v183, v105, v103);
  swift_getAssociatedConformanceWitness();
  LODWORD(v194) = sub_10096BBE0();
  uint64_t v149 = *(void (**)(unsigned char *, uint64_t))(v147 + 8);
  v149(v148, v103);
  os_log_type_t v150 = (void (*)(void, void))v115[1].isa;
  v150(v206, v220);
  v150(v207, v220);
  v149(v116, v103);
  uint64_t v86 = v220;
  uint64_t v214 = v150;
  v150(v84, v220);
  uint64_t v111 = v216;
  uint64_t v112 = v205;
  uint64_t v113 = v201;
  uint64_t v114 = v200;
  uint64_t v110 = v209;
  if ((v194 & 1) == 0) {
    goto LABEL_22;
  }
LABEL_23:
  ((void (*)(unsigned char *, uint64_t, uint64_t))v110)(v217, v112, v86);
  uint64_t v125 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v114;
  uint64_t v126 = v110;
  uint64_t v127 = v215;
  v113((uint64_t)v215, v111, v103);
  v125(v127, 0, 1, v103);
  uint64_t v128 = &v195[*(int *)(TupleTypeMetadata2 + 48)];
  uint64_t v129 = v195;
  v126();
  ((void (*)(unsigned char *, unsigned char *, uint64_t))v126)(v128, v127, v86);
  uint64_t v130 = (uint64_t (*)(unsigned char *, uint64_t, uint64_t))v212;
  if (((unsigned int (*)(unsigned char *, uint64_t, uint64_t))v212)(v129, 1, v103) != 1)
  {
    uint64_t v137 = v180;
    ((void (*)(unsigned char *, unsigned char *, uint64_t))v126)(v180, v129, v86);
    int v138 = v130(v128, 1, v103);
    char v132 = v199;
    uint64_t v133 = (void (*)(unsigned char *, uint64_t))v214;
    if (v138 != 1)
    {
      uint64_t v139 = v218;
      uint64_t v140 = v183;
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v218 + 32))(v183, v128, v103);
      swift_getAssociatedConformanceWitness();
      char v141 = sub_10096BBE0();
      uint64_t v142 = *(void (**)(unsigned char *, uint64_t))(v139 + 8);
      v142(v137, v103);
      v142(v140, v103);
      v133(v129, v86);
      v133(v215, v86);
      uint64_t result = ((uint64_t (*)(unsigned char *, uint64_t))v133)(v217, v86);
      uint64_t v135 = v219;
      uint64_t v136 = v196;
      if (v141) {
        goto LABEL_28;
      }
LABEL_53:
      sub_100713470((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderExtensions/fssync/libfssync/interfaces/persistence/ReconciliationTable.swift", 126, 2, 339);
    }
    (*(void (**)(unsigned char *, uint64_t))(v218 + 8))(v137, v103);
LABEL_52:
    (*(void (**)(unsigned char *, uint64_t))(v181 + 8))(v129, TupleTypeMetadata2);
    v133(v215, v86);
    v133(v217, v86);
    goto LABEL_53;
  }
  int v131 = v130(v128, 1, v103);
  char v132 = v199;
  uint64_t v133 = (void (*)(unsigned char *, uint64_t))v214;
  if (v131 != 1) {
    goto LABEL_52;
  }
  v214(v129, v86);
  v133(v215, v86);
  uint64_t result = ((uint64_t (*)(unsigned char *, uint64_t))v133)(v217, v86);
  uint64_t v135 = v219;
  uint64_t v136 = v196;
LABEL_28:
  uint64_t v143 = *(int *)(v135 + 56);
  uint64_t v144 = v223;
  uint64_t v145 = *(unsigned __int8 *)(v223 + v143);
  uint64_t v146 = v198;
  switch(*(unsigned char *)(v223 + v143))
  {
    case 1:
      uint64_t v145 = 1;
      goto LABEL_34;
    case 2:
      uint64_t v145 = 2;
      goto LABEL_34;
    case 3:
      uint64_t v145 = 4;
      goto LABEL_34;
    case 4:
      goto LABEL_47;
    default:
LABEL_34:
      if (v145 == qword_10097A4C8[v132]) {
        goto LABEL_47;
      }
      if (*(unsigned char *)(v223 + v143) == 3)
      {
        if (!v132) {
          goto LABEL_47;
        }
      }
      else if (!*(unsigned char *)(v223 + v143) && v132 == 3)
      {
        goto LABEL_47;
      }
      uint64_t v151 = v173;
      uint64_t v152 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v173 + 16);
      v152(v198, v223, v135);
      id v153 = (id)fpfs_current_or_default_log();
      uint64_t v154 = v176;
      sub_10096B490();
      v152(v136, (uint64_t)v146, v135);
      uint64_t v155 = v136;
      unint64_t v156 = sub_10096B470();
      int v157 = sub_10096C5C0();
      if (os_log_type_enabled(v156, (os_log_type_t)v157))
      {
        LODWORD(TupleTypeMetadata2) = v157;
        uint64_t v222 = v156;
        uint64_t v158 = swift_slowAlloc();
        uint64_t v220 = swift_slowAlloc();
        v225[0] = v220;
        *(_DWORD *)uint64_t v158 = 136446466;
        uint64_t v159 = v172;
        v152(v172, (uint64_t)v155, v135);
        int v160 = *(void (**)(unsigned char *, uint64_t))(v151 + 8);
        v160(v155, v135);
        uint64_t v161 = sub_10082F470(v135);
        unint64_t v163 = v162;
        v160(v159, v135);
        uint64_t v224 = sub_100719D44(v161, v163, v225);
        sub_10096C8C0();
        swift_bridgeObjectRelease();
        *(_WORD *)(v158 + 12) = 2082;
        unint64_t v164 = 0xE300000000000000;
        uint64_t v165 = 6516580;
        char v132 = v199;
        uint64_t v166 = v176;
        uint64_t v167 = v222;
        switch((char)v199)
        {
          case 1:
            uint64_t v165 = 7498084;
            break;
          case 2:
            unint64_t v164 = 0xE700000000000000;
            uint64_t v165 = 0x6B6E696C6D7973;
            break;
          case 3:
            unint64_t v164 = 0xE500000000000000;
            uint64_t v165 = 0x7361696C61;
            break;
          default:
            break;
        }
        uint64_t v224 = sub_100719D44(v165, v164, v225);
        sub_10096C8C0();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v167, (os_log_type_t)TupleTypeMetadata2, "inconsistent item kind %{public}s new kind %{public}s", (uint8_t *)v158, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(unsigned char *, uint64_t))(v174 + 8))(v166, v175);
        uint64_t result = ((uint64_t (*)(unsigned char *, uint64_t))v160)(v198, v219);
        uint64_t v144 = v223;
      }
      else
      {
        uint64_t v168 = *(void (**)(unsigned char *, uint64_t))(v151 + 8);
        v168(v155, v135);

        (*(void (**)(unsigned char *, uint64_t))(v174 + 8))(v154, v175);
        uint64_t result = ((uint64_t (*)(unsigned char *, uint64_t))v168)(v198, v135);
        char v132 = v199;
      }
LABEL_47:
      *(unsigned char *)(v144 + v143) = v132;
      return result;
  }
}

uint64_t sub_100110DCC(uint64_t a1, void *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *(void *)(*a2 + 88);
  uint64_t v40 = *(void *)(*a2 + 104);
  uint64_t v44 = v5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v41 = sub_10096C890();
  uint64_t v43 = *(void *)(v41 - 8);
  uint64_t v7 = __chkstk_darwin(v41);
  uint64_t v38 = AssociatedTypeWitness;
  uint64_t v39 = (char *)&v33 - v8;
  uint64_t v42 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(v7);
  uint64_t v36 = (char *)&v33 - v9;
  uint64_t v10 = *(void *)(v4 + 80);
  uint64_t v37 = *(void *)(v4 + 96);
  uint64_t v11 = swift_getAssociatedTypeWitness();
  uint64_t v12 = sub_10096C890();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v33 - v15;
  uint64_t v17 = *(void *)(v11 - 8);
  __chkstk_darwin(v14);
  uint64_t v19 = (char *)&v33 - v18;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, a1, v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v16, 1, v11) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  }
  uint64_t v34 = a1;
  uint64_t v35 = v17;
  uint64_t v22 = v43;
  uint64_t v21 = v44;
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v19, v16, v11);
  uint64_t v23 = a2[3];
  uint64_t v24 = v49;
  (*(void (**)(char *))(*(void *)v23 + 368))(v19);
  uint64_t v25 = v19;
  uint64_t v26 = v11;
  if (v24) {
    return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v25, v11);
  }
  uint64_t v49 = v25;
  uint64_t v45 = v10;
  uint64_t v46 = v21;
  uint64_t v47 = v37;
  uint64_t v48 = v40;
  uint64_t v27 = type metadata accessor for ItemReconciliation();
  uint64_t v28 = v39;
  uint64_t v29 = v41;
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v39, v34 + *(int *)(v27 + 52), v41);
  uint64_t v30 = v42;
  uint64_t v31 = v38;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v28, 1, v38) == 1)
  {
    (*(void (**)(char *, uint64_t))(v35 + 8))(v49, v26);
    return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v28, v29);
  }
  else
  {
    uint64_t v32 = v36;
    (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v36, v28, v31);
    (*(void (**)(char *))(*(void *)v23 + 376))(v32);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v32, v31);
    return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v49, v26);
  }
}

uint64_t sub_1001112E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 56);
}

uint64_t sub_1001112F0()
{
  uint64_t v0 = type metadata accessor for ItemReconciliation();
  if (v1 <= 0x3F)
  {
    uint64_t v0 = sub_10096C890();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return v0;
}

uint64_t sub_1001113F8(uint64_t a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v403 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v396 = v403;
  int v377 = *(_DWORD *)(v403 + 80);
  uint64_t v395 = swift_getAssociatedTypeWitness();
  uint64_t v398 = *(void *)(v395 - 8);
  uint64_t v406 = v398;
  int v375 = *(_DWORD *)(v398 + 80);
  uint64_t v372 = swift_getAssociatedTypeWitness();
  uint64_t v393 = *(void *)(v372 - 8);
  int v373 = *(_DWORD *)(v393 + 80);
  uint64_t v384 = v373;
  int v361 = v375 & 0xF8 | v373;
  uint64_t v397 = swift_getAssociatedTypeWitness();
  uint64_t v390 = *(void *)(v397 - 8);
  int v369 = *(_DWORD *)(v390 + 80);
  uint64_t v392 = swift_getAssociatedTypeWitness();
  uint64_t v382 = *(void *)(v392 - 8);
  int v367 = *(_DWORD *)(v382 + 80);
  uint64_t v366 = swift_getAssociatedTypeWitness();
  uint64_t v2 = *(void *)(v366 - 8);
  uint64_t v3 = v403;
  int v4 = *(_DWORD *)(v2 + 80);
  uint64_t v388 = v4;
  uint64_t v386 = v367 & 0xF8 | v4 | 7u;
  uint64_t v404 = v386 | v369 & 0xF8;
  uint64_t v5 = v361 | v377 & 0xF8 | v404;
  int v6 = *(_DWORD *)(v396 + 84);
  if (v6) {
    uint64_t v7 = *(void *)(v3 + 64);
  }
  else {
    uint64_t v7 = *(void *)(v3 + 64) + 1;
  }
  uint64_t v371 = v393;
  unsigned int v8 = *(_DWORD *)(v393 + 84);
  if (*(_DWORD *)(v398 + 84) <= v8) {
    unsigned int v9 = *(_DWORD *)(v393 + 84);
  }
  else {
    unsigned int v9 = *(_DWORD *)(v398 + 84);
  }
  unsigned int v363 = v9;
  if (v9 <= 0x7FFFFFFE) {
    int v10 = 2147483646;
  }
  else {
    int v10 = v9;
  }
  uint64_t v11 = *(void *)(v398 + 64);
  uint64_t v12 = *(void *)(v393 + 64);
  uint64_t v364 = v390;
  unsigned int v13 = *(_DWORD *)(v390 + 84);
  if (v13) {
    uint64_t v14 = *(void *)(v390 + 64);
  }
  else {
    uint64_t v14 = *(void *)(v390 + 64) + 1;
  }
  uint64_t v391 = v382;
  unsigned int v15 = *(_DWORD *)(v382 + 84);
  uint64_t v365 = *(void *)(v366 - 8);
  unsigned int v16 = *(_DWORD *)(v2 + 84);
  if (v15 <= v16) {
    unsigned int v17 = *(_DWORD *)(v2 + 84);
  }
  else {
    unsigned int v17 = *(_DWORD *)(v382 + 84);
  }
  unsigned int v360 = v17;
  if (v17 <= 0x7FFFFFFE) {
    int v18 = 2147483646;
  }
  else {
    int v18 = v17;
  }
  uint64_t v19 = *(void *)(v382 + 64);
  uint64_t v20 = *(void *)(*(void *)(v366 - 8) + 64);
  if (v6) {
    unsigned int v21 = v6 - 1;
  }
  else {
    unsigned int v21 = 0;
  }
  int v400 = v10;
  int v22 = v10 - 1;
  if (v21 <= v10 - 1) {
    unsigned int v23 = v10 - 1;
  }
  else {
    unsigned int v23 = v21;
  }
  if (v23 <= 0x7FFFFFFE) {
    unsigned int v24 = 2147483646;
  }
  else {
    unsigned int v24 = v23;
  }
  if (v13) {
    unsigned int v25 = v13 - 1;
  }
  else {
    unsigned int v25 = 0;
  }
  int v399 = v18;
  unsigned int v26 = v18 - 1;
  if (v25 <= v26) {
    unsigned int v27 = v26;
  }
  else {
    unsigned int v27 = v25;
  }
  if (v27 <= 0x7FFFFFFE) {
    unsigned int v28 = 2147483646;
  }
  else {
    unsigned int v28 = v27;
  }
  if (v28 <= v24) {
    unsigned int v29 = v24;
  }
  else {
    unsigned int v29 = v28;
  }
  if (v29 <= 0x7FFFFFFF) {
    int v30 = 0x7FFFFFFF;
  }
  else {
    int v30 = v29;
  }
  uint64_t v31 = ~v5;
  if (v5 != 7) {
    goto LABEL_48;
  }
  if (((v375 | v377 | v373 | v369 | v367 | v4) & 0x100000) != 0) {
    goto LABEL_48;
  }
  uint64_t v32 = v361 | 7u;
  uint64_t v394 = v11 + 7;
  uint64_t v355 = v373 + 8;
  uint64_t v346 = v12 + 7;
  size_t v33 = ((((v12 + 7 + ((v355 + ((v11 + 7) & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)v373)) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  uint64_t v383 = v7 + 7;
  uint64_t v34 = v32 + 9;
  unint64_t v358 = ((((((((v32 + 9 + ((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v32) + v33 + 34) & 0xFFFFFFFFFFFFFFF8)
           + 63) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + 8;
  uint64_t v362 = v358 + v404;
  uint64_t v389 = v19 + 7;
  uint64_t v354 = v4 + 8;
  uint64_t v347 = v20 + 7;
  unint64_t v335 = (((v20 + 7 + ((v354 + ((v19 + 7) & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)v4)) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v378 = v14 + 7;
  uint64_t v381 = v386 + 9;
  size_t v374 = v335 + 16;
  unint64_t v35 = ((((((((v386 + 9 + ((((v14 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v386) + v335 + 16 + 34) & 0xFFFFFFFFFFFFFFF8)
          + 63) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  unint64_t v36 = (((v35 + ((v358 + v404) & ~v404) + 23) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v345 = v5 + 9;
  size_t v350 = v36 + 8;
  if (((v5
       + 9
       + ((((v36 + 15 + ((v36 + 8 + v5 + ((v5 + 9) & ~v5)) & ~v5)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)) & ~v5)
     + v36
     + 8 > 0x18)
  {
LABEL_48:
    uint64_t v39 = *a2;
    *(void *)a1 = *a2;
    uint64_t v40 = v39 + ((v5 + 16) & v31);
    swift_retain();
    return v40;
  }
  unint64_t v341 = v36 + 15;
  unint64_t v329 = (((v12 + 7 + ((v384 + 8 + ((v11 + 7) & 0xFFFFFFFFFFFFFFF8)) & ~v384)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  int v342 = v30;
  unsigned int v343 = v24;
  unsigned int v332 = v25;
  int v333 = v22;
  unsigned int v336 = v21;
  unsigned int v337 = v28;
  unsigned int v330 = v26;
  unsigned int v331 = v13;
  unsigned int v334 = *(_DWORD *)(v396 + 84);
  size_t __n = v7;
  size_t v349 = v14;
  unsigned int v368 = *(_DWORD *)(v406 + 84);
  unsigned int v344 = v8;
  unsigned int v370 = v15;
  uint64_t v376 = ~v32;
  *(void *)a1 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  uint64_t v339 = a1 + v5 + 9;
  uint64_t v37 = (void *)(v339 & v31);
  uint64_t v356 = ~v5;
  uint64_t v340 = (uint64_t)a2 + v5 + 9;
  uint64_t v38 = (const void *)(v340 & v31);
  uint64_t v352 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v396 + 48);
  unsigned int v338 = v16;
  if (v352(v340 & v31, 1, AssociatedTypeWitness))
  {
    memcpy(v37, v38, __n);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v396 + 16))(v37, v38, AssociatedTypeWitness);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v396 + 56))(v37, 0, 1, AssociatedTypeWitness);
  }
  unint64_t v41 = v358;
  uint64_t v42 = (void *)(((unint64_t)v37 + v383) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v43 = (void *)(((unint64_t)v38 + v383) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v42 = *v43;
  uint64_t v353 = ~v384;
  unint64_t v44 = ((unint64_t)v42 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v45 = ((unint64_t)v43 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v44 = *(void *)v45;
  *(unsigned char *)(v44 + 8) = *(unsigned char *)(v45 + 8);
  uint64_t v46 = (void *)((v34 + v44) & v376);
  uint64_t v47 = (const void *)((v34 + v45) & v376);
  unint64_t v359 = v35;
  size_t v380 = v33;
  uint64_t v357 = v34;
  if (v368 == v400)
  {
    if (!(*(unsigned int (**)(const void *))(v406 + 48))(v47)) {
      goto LABEL_60;
    }
  }
  else
  {
    uint64_t v48 = (void *)(((unint64_t)v47 + v394) & 0xFFFFFFFFFFFFFFF8);
    if (v363 > 0x7FFFFFFE)
    {
      if (!(*(unsigned int (**)(unint64_t, void, uint64_t))(v371 + 48))(((unint64_t)v48 + v355) & v353, v344, v372))
      {
LABEL_60:
        uint64_t v48 = (void *)(((unint64_t)v47 + v394) & 0xFFFFFFFFFFFFFFF8);
LABEL_61:
        (*(void (**)(void *, const void *, uint64_t))(v406 + 16))(v46, v47, v395);
        uint64_t v50 = (void *)(((unint64_t)v46 + v394) & 0xFFFFFFFFFFFFFFF8);
        *uint64_t v50 = *v48;
        unint64_t v51 = ((unint64_t)v50 + v355) & v353;
        unint64_t v52 = ((unint64_t)v48 + v355) & v353;
        uint64_t v53 = *(void (**)(unint64_t, unint64_t, uint64_t))(v371 + 16);
        swift_bridgeObjectRetain();
        v53(v51, v52, v372);
        uint64_t v54 = (void *)((v346 + v51) & 0xFFFFFFFFFFFFFFF8);
        uint64_t v55 = (void *)((v346 + v52) & 0xFFFFFFFFFFFFFFF8);
        void *v54 = *v55;
        uint64_t v56 = (void *)(((unint64_t)v54 + 15) & 0xFFFFFFFFFFFFFFF8);
        uint64_t v57 = (void *)(((unint64_t)v55 + 15) & 0xFFFFFFFFFFFFFFF8);
        void *v56 = *v57;
        v56[1] = v57[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_62;
      }
    }
    else
    {
      uint64_t v49 = *v48;
      if (*v48 >= 0xFFFFFFFFuLL) {
        LODWORD(v49) = -1;
      }
      if ((v49 + 1) < 2) {
        goto LABEL_61;
      }
    }
  }
  memcpy(v46, v47, v33);
LABEL_62:
  uint64_t v58 = (uint64_t)v47 + v33 + 10;
  uint64_t v59 = (uint64_t)v47 + v33 + 34;
  *((unsigned char *)v46 + v33) = *((unsigned char *)v47 + v33);
  uint64_t v60 = (uint64_t)v46 + v33 + 34;
  *(unsigned char *)(((unint64_t)v46 + v33) | 1) = *(unsigned char *)(((unint64_t)v47 + v33) | 1);
  uint64_t v385 = ~v404;
  *(unsigned char *)(((unint64_t)v46 + v33) | 2) = *(unsigned char *)(((unint64_t)v47 + v33) | 2);
  unint64_t v61 = ((unint64_t)v46 + v33 + 10) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v62 = *(void *)(v58 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v63 = *(void *)((v58 & 0xFFFFFFFFFFFFFFF8) + 8);
  char v64 = *(unsigned char *)((v58 & 0xFFFFFFFFFFFFFFF8) + 16);
  sub_10009C5FC(v62, v63, v64);
  *(void *)unint64_t v61 = v62;
  *(void *)(v61 + 8) = v63;
  *(unsigned char *)(v61 + 16) = v64;
  unint64_t v65 = v60 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v66 = v59 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v67 = *(void *)((v59 & 0xFFFFFFFFFFFFFFF8) + 16) >> 60;
  if (!(4 * (v67 & 3)) || ((v67 >> 2) & 0xFFFFFFF3 | (4 * (v67 & 3))) == 0xF)
  {
    uint64_t v72 = (uint64_t *)(v66 + 8);
    *(void *)unint64_t v65 = *(void *)v66;
    unint64_t v73 = *(void *)(v66 + 16);
    if (v73 >> 60 == 15)
    {
      *(_OWORD *)(v65 + 8) = *(_OWORD *)v72;
    }
    else
    {
      uint64_t v74 = *v72;
      sub_10001EBB0(*v72, *(void *)(v66 + 16));
      *(void *)(v65 + 8) = v74;
      *(void *)(v65 + 16) = v73;
    }
    unint64_t v71 = v359;
    long long v75 = *(_OWORD *)(v66 + 24);
    *(unsigned char *)(v65 + 40) = *(unsigned char *)(v66 + 40);
    *(_OWORD *)(v65 + 24) = v75;
    *(void *)(v65 + 48) = *(void *)(v66 + 48);
  }
  else
  {
    long long v68 = *(_OWORD *)v66;
    long long v69 = *(_OWORD *)(v66 + 16);
    long long v70 = *(_OWORD *)(v66 + 32);
    *(void *)(v65 + 48) = *(void *)(v66 + 48);
    *(_OWORD *)(v65 + 16) = v69;
    *(_OWORD *)(v65 + 32) = v70;
    *(_OWORD *)unint64_t v65 = v68;
    unint64_t v71 = v359;
  }
  uint64_t v387 = ~v386;
  uint64_t v76 = (void *)((v65 + 63) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v77 = (void **)((v66 + 63) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v78 = *v77;
  *uint64_t v76 = *v77;
  *(void *)(((unint64_t)v76 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v77 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v79 = (void *)(((unint64_t)v37 + v404 + v41) & v385);
  uint64_t v80 = (const void *)(((unint64_t)v38 + v404 + v41) & v385);
  uint64_t v81 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v364 + 48);
  id v82 = v78;
  uint64_t v351 = v81;
  if (v81(v80, 1, v397))
  {
    memcpy(v79, v80, v349);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v364 + 16))(v79, v80, v397);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v364 + 56))(v79, 0, 1, v397);
  }
  unsigned int v83 = (void *)(((unint64_t)v79 + v378) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v84 = (void *)(((unint64_t)v80 + v378) & 0xFFFFFFFFFFFFFFF8);
  *unsigned int v83 = *v84;
  uint64_t v405 = ~v388;
  unint64_t v85 = ((unint64_t)v83 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v86 = ((unint64_t)v84 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v85 = *(void *)v86;
  *(unsigned char *)(v85 + 8) = *(unsigned char *)(v86 + 8);
  uint64_t v87 = (char *)((v381 + v85) & v387);
  uint64_t v88 = (const void *)((v381 + v86) & v387);
  if (v370 == v399)
  {
    if (!(*(unsigned int (**)(const void *))(v391 + 48))(v88)) {
      goto LABEL_82;
    }
  }
  else
  {
    uint64_t v89 = (void *)(((unint64_t)v88 + v389) & 0xFFFFFFFFFFFFFFF8);
    if (v360 > 0x7FFFFFFE)
    {
      if (!(*(unsigned int (**)(unint64_t, void, uint64_t))(v365 + 48))(((unint64_t)v89 + v354) & v405, v338, v366))
      {
LABEL_82:
        uint64_t v89 = (void *)(((unint64_t)v88 + v389) & 0xFFFFFFFFFFFFFFF8);
LABEL_83:
        (*(void (**)(char *, const void *, uint64_t))(v391 + 16))(v87, v88, v392);
        uint64_t v92 = (void *)((unint64_t)&v87[v389] & 0xFFFFFFFFFFFFFFF8);
        *uint64_t v92 = *v89;
        unint64_t v93 = ((unint64_t)v92 + v354) & v405;
        unint64_t v94 = ((unint64_t)v89 + v354) & v405;
        char v95 = *(void (**)(unint64_t, unint64_t, uint64_t))(v365 + 16);
        swift_bridgeObjectRetain();
        v95(v93, v94, v366);
        uint64_t v96 = (void *)((v347 + v93) & 0xFFFFFFFFFFFFFFF8);
        id v97 = (void *)((v347 + v94) & 0xFFFFFFFFFFFFFFF8);
        *uint64_t v96 = *v97;
        uint64_t v98 = (void *)(((unint64_t)v96 + 15) & 0xFFFFFFFFFFFFFFF8);
        uint64_t v99 = (void *)(((unint64_t)v97 + 15) & 0xFFFFFFFFFFFFFFF8);
        *uint64_t v98 = *v99;
        v98[1] = v99[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        unint64_t v91 = v335 + 16;
        goto LABEL_84;
      }
    }
    else
    {
      uint64_t v90 = *v89;
      if (*v89 >= 0xFFFFFFFFuLL) {
        LODWORD(v90) = -1;
      }
      if ((v90 + 1) < 2) {
        goto LABEL_83;
      }
    }
  }
  unint64_t v91 = v335 + 16;
  memcpy(v87, v88, v374);
LABEL_84:
  uint64_t v100 = (unsigned char *)(((unint64_t)v88 + v91) | 1);
  uint64_t v101 = (unsigned char *)(((unint64_t)v88 + v91) | 2);
  uint64_t v102 = (uint64_t)v88 + v91 + 10;
  uint64_t v104 = (uint64_t)v88 + v91 + 34;
  char v103 = *((unsigned char *)v88 + v91);
  uint64_t v105 = (unsigned char *)((unint64_t)&v87[v91] | 1);
  uint64_t v106 = (unsigned char *)((unint64_t)&v87[v91] | 2);
  uint64_t v107 = (uint64_t)&v87[v91 + 10];
  uint64_t v108 = &v87[v91];
  *uint64_t v108 = v103;
  *uint64_t v105 = *v100;
  *uint64_t v106 = *v101;
  unint64_t v109 = v107 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v110 = *(void *)(v102 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v111 = *(void *)((v102 & 0xFFFFFFFFFFFFFFF8) + 8);
  char v112 = *(unsigned char *)((v102 & 0xFFFFFFFFFFFFFFF8) + 16);
  sub_10009C5FC(v110, v111, v112);
  *(void *)unint64_t v109 = v110;
  *(void *)(v109 + 8) = v111;
  *(unsigned char *)(v109 + 16) = v112;
  unint64_t v113 = (unint64_t)(v108 + 34) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v114 = v104 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v115 = *(void *)(v114 + 16) >> 60;
  if (!(4 * (v115 & 3)) || ((v115 >> 2) & 0xFFFFFFF3 | (4 * (v115 & 3))) == 0xF)
  {
    int v121 = (uint64_t *)(v114 + 8);
    *(void *)unint64_t v113 = *(void *)v114;
    unint64_t v122 = *(void *)(v114 + 16);
    uint64_t v120 = v357;
    if (v122 >> 60 == 15)
    {
      *(_OWORD *)(v113 + 8) = *(_OWORD *)v121;
    }
    else
    {
      uint64_t v123 = *v121;
      sub_10001EBB0(*v121, *(void *)(v114 + 16));
      *(void *)(v113 + 8) = v123;
      *(void *)(v113 + 16) = v122;
    }
    uint64_t v119 = AssociatedTypeWitness;
    long long v124 = *(_OWORD *)(v114 + 24);
    *(unsigned char *)(v113 + 40) = *(unsigned char *)(v114 + 40);
    *(_OWORD *)(v113 + 24) = v124;
    *(void *)(v113 + 48) = *(void *)(v114 + 48);
  }
  else
  {
    long long v116 = *(_OWORD *)v114;
    long long v117 = *(_OWORD *)(v114 + 16);
    long long v118 = *(_OWORD *)(v114 + 32);
    *(void *)(v113 + 48) = *(void *)(v114 + 48);
    *(_OWORD *)(v113 + 16) = v117;
    *(_OWORD *)(v113 + 32) = v118;
    *(_OWORD *)unint64_t v113 = v116;
    uint64_t v119 = AssociatedTypeWitness;
    uint64_t v120 = v357;
  }
  uint64_t v125 = (void *)((v113 + 63) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v126 = (void **)((v114 + 63) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v127 = *v126;
  void *v125 = *v126;
  *(void *)(((unint64_t)v125 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v126 + 15) & 0xFFFFFFFFFFFFFFF8);
  *((unsigned char *)v79 + v71) = *((unsigned char *)v80 + v71);
  unint64_t v128 = ((unint64_t)v79 + v71) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v129 = ((unint64_t)v80 + v71) & 0xFFFFFFFFFFFFFFF8;
  *(void *)(v128 + 8) = *(void *)(v129 + 8);
  uint64_t v130 = (_OWORD *)((v128 + 23) & 0xFFFFFFFFFFFFFFF8);
  int v131 = (_OWORD *)((v129 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v130 = *v131;
  unint64_t v132 = ((unint64_t)v130 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v133 = ((unint64_t)v131 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v132 = *(void *)v133;
  *(unsigned char *)(v132 + 8) = *(unsigned char *)(v133 + 8);
  *(void *)(((unint64_t)v130 + 39) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v131 + 39) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v134 = (void *)(((v339 | v5) + v350) & v356);
  uint64_t v135 = (const void *)(((v340 | v5) + v350) & v356);
  id v136 = v127;
  swift_bridgeObjectRetain();
  if (v352((uint64_t)v135, 1, v119))
  {
    memcpy(v134, v135, __n);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v396 + 16))(v134, v135, v119);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v396 + 56))(v134, 0, 1, v119);
  }
  uint64_t v137 = (void *)(((unint64_t)v134 + v383) & 0xFFFFFFFFFFFFFFF8);
  int v138 = (void *)(((unint64_t)v135 + v383) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v137 = *v138;
  unint64_t v139 = ((unint64_t)v137 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v140 = ((unint64_t)v138 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v139 = *(void *)v140;
  *(unsigned char *)(v139 + 8) = *(unsigned char *)(v140 + 8);
  char v141 = (void *)((v120 + v139) & v376);
  uint64_t v142 = (const void *)((v120 + v140) & v376);
  if (v368 == v400)
  {
    if (!(*(unsigned int (**)(const void *))(v406 + 48))(v142)) {
      goto LABEL_104;
    }
  }
  else
  {
    uint64_t v143 = (void *)(((unint64_t)v142 + v394) & 0xFFFFFFFFFFFFFFF8);
    if (v363 > 0x7FFFFFFE)
    {
      if (!(*(unsigned int (**)(unint64_t, void, uint64_t))(v371 + 48))(((unint64_t)v143 + v355) & v353, v344, v372))
      {
LABEL_104:
        uint64_t v143 = (void *)(((unint64_t)v142 + v394) & 0xFFFFFFFFFFFFFFF8);
LABEL_105:
        (*(void (**)(void *, const void *, uint64_t))(v406 + 16))(v141, v142, v395);
        uint64_t v145 = (void *)(((unint64_t)v141 + v394) & 0xFFFFFFFFFFFFFFF8);
        *uint64_t v145 = *v143;
        unint64_t v146 = ((unint64_t)v145 + v355) & v353;
        unint64_t v147 = ((unint64_t)v143 + v355) & v353;
        unint64_t v148 = *(void (**)(unint64_t, unint64_t, uint64_t))(v371 + 16);
        swift_bridgeObjectRetain();
        v148(v146, v147, v372);
        uint64_t v149 = (void *)((v346 + v146) & 0xFFFFFFFFFFFFFFF8);
        os_log_type_t v150 = (void *)((v346 + v147) & 0xFFFFFFFFFFFFFFF8);
        *uint64_t v149 = *v150;
        uint64_t v151 = (void *)(((unint64_t)v149 + 15) & 0xFFFFFFFFFFFFFFF8);
        uint64_t v152 = (void *)(((unint64_t)v150 + 15) & 0xFFFFFFFFFFFFFFF8);
        *uint64_t v151 = *v152;
        v151[1] = v152[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_106;
      }
    }
    else
    {
      uint64_t v144 = *v143;
      if (*v143 >= 0xFFFFFFFFuLL) {
        LODWORD(v144) = -1;
      }
      if ((v144 + 1) < 2) {
        goto LABEL_105;
      }
    }
  }
  memcpy(v141, v142, v380);
LABEL_106:
  uint64_t v153 = (uint64_t)v142 + v380 + 10;
  uint64_t v154 = (uint64_t)v142 + v380 + 34;
  *((unsigned char *)v141 + v380) = *((unsigned char *)v142 + v380);
  uint64_t v155 = (uint64_t)v141 + v380 + 34;
  *(unsigned char *)(((unint64_t)v141 + v380) | 1) = *(unsigned char *)(((unint64_t)v142 + v380) | 1);
  *(unsigned char *)(((unint64_t)v141 + v380) | 2) = *(unsigned char *)(((unint64_t)v142 + v380) | 2);
  unint64_t v156 = ((unint64_t)v141 + v380 + 10) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v157 = *(void *)(v153 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v158 = *(void *)((v153 & 0xFFFFFFFFFFFFFFF8) + 8);
  char v159 = *(unsigned char *)((v153 & 0xFFFFFFFFFFFFFFF8) + 16);
  sub_10009C5FC(v157, v158, v159);
  *(void *)unint64_t v156 = v157;
  *(void *)(v156 + 8) = v158;
  *(unsigned char *)(v156 + 16) = v159;
  unint64_t v160 = v155 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v161 = v154 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v162 = *(void *)((v154 & 0xFFFFFFFFFFFFFFF8) + 16) >> 60;
  if (!(4 * (v162 & 3)) || ((v162 >> 2) & 0xFFFFFFF3 | (4 * (v162 & 3))) == 0xF)
  {
    uint64_t v166 = (uint64_t *)(v161 + 8);
    *(void *)unint64_t v160 = *(void *)v161;
    unint64_t v167 = *(void *)(v161 + 16);
    if (v167 >> 60 == 15)
    {
      *(_OWORD *)(v160 + 8) = *(_OWORD *)v166;
    }
    else
    {
      uint64_t v168 = *v166;
      sub_10001EBB0(*v166, *(void *)(v161 + 16));
      *(void *)(v160 + 8) = v168;
      *(void *)(v160 + 16) = v167;
    }
    long long v169 = *(_OWORD *)(v161 + 24);
    *(unsigned char *)(v160 + 40) = *(unsigned char *)(v161 + 40);
    *(_OWORD *)(v160 + 24) = v169;
    *(void *)(v160 + 48) = *(void *)(v161 + 48);
  }
  else
  {
    long long v163 = *(_OWORD *)v161;
    long long v164 = *(_OWORD *)(v161 + 16);
    long long v165 = *(_OWORD *)(v161 + 32);
    *(void *)(v160 + 48) = *(void *)(v161 + 48);
    *(_OWORD *)(v160 + 16) = v164;
    *(_OWORD *)(v160 + 32) = v165;
    *(_OWORD *)unint64_t v160 = v163;
  }
  uint64_t v170 = (void *)((v160 + 63) & 0xFFFFFFFFFFFFFFF8);
  int v171 = (void **)((v161 + 63) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v172 = *v171;
  void *v170 = *v171;
  *(void *)(((unint64_t)v170 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v171 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v173 = (void *)(((unint64_t)v134 + v362) & v385);
  uint64_t v174 = (const void *)(((unint64_t)v135 + v362) & v385);
  id v175 = v172;
  if (v351(v174, 1, v397))
  {
    memcpy(v173, v174, v349);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v364 + 16))(v173, v174, v397);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v364 + 56))(v173, 0, 1, v397);
  }
  unint64_t v176 = (void *)(((unint64_t)v173 + v378) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v177 = (void *)(((unint64_t)v174 + v378) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v176 = *v177;
  unint64_t v178 = ((unint64_t)v176 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v179 = ((unint64_t)v177 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v178 = *(void *)v179;
  *(unsigned char *)(v178 + 8) = *(unsigned char *)(v179 + 8);
  uint64_t v180 = (char *)((v381 + v178) & v387);
  uint64_t v181 = (const void *)((v381 + v179) & v387);
  if (v370 == v399)
  {
    if (!(*(unsigned int (**)(const void *))(v391 + 48))(v181)) {
      goto LABEL_126;
    }
  }
  else
  {
    uint64_t v182 = (void *)(((unint64_t)v181 + v389) & 0xFFFFFFFFFFFFFFF8);
    if (v360 > 0x7FFFFFFE)
    {
      if (!(*(unsigned int (**)(unint64_t, void, uint64_t))(v365 + 48))(((unint64_t)v182 + v354) & v405, v338, v366))
      {
LABEL_126:
        uint64_t v182 = (void *)(((unint64_t)v181 + v389) & 0xFFFFFFFFFFFFFFF8);
LABEL_127:
        (*(void (**)(char *, const void *, uint64_t))(v391 + 16))(v180, v181, v392);
        uint64_t v185 = (void *)((unint64_t)&v180[v389] & 0xFFFFFFFFFFFFFFF8);
        *uint64_t v185 = *v182;
        unint64_t v186 = ((unint64_t)v185 + v354) & v405;
        unint64_t v187 = ((unint64_t)v182 + v354) & v405;
        uint64_t v188 = *(void (**)(unint64_t, unint64_t, uint64_t))(v365 + 16);
        swift_bridgeObjectRetain();
        v188(v186, v187, v366);
        uint64_t v189 = (void *)((v347 + v186) & 0xFFFFFFFFFFFFFFF8);
        uint64_t v190 = (void *)((v347 + v187) & 0xFFFFFFFFFFFFFFF8);
        void *v189 = *v190;
        uint64_t v191 = (void *)(((unint64_t)v189 + 15) & 0xFFFFFFFFFFFFFFF8);
        uint64_t v192 = (void *)(((unint64_t)v190 + 15) & 0xFFFFFFFFFFFFFFF8);
        *uint64_t v191 = *v192;
        v191[1] = v192[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        unint64_t v184 = v335 + 16;
        goto LABEL_128;
      }
    }
    else
    {
      uint64_t v183 = *v182;
      if (*v182 >= 0xFFFFFFFFuLL) {
        LODWORD(v183) = -1;
      }
      if ((v183 + 1) < 2) {
        goto LABEL_127;
      }
    }
  }
  unint64_t v184 = v335 + 16;
  memcpy(v180, v181, v374);
LABEL_128:
  uint64_t v193 = (unsigned char *)(((unint64_t)v181 + v184) | 1);
  uint64_t v194 = (unsigned char *)(((unint64_t)v181 + v184) | 2);
  uint64_t v195 = (uint64_t)v181 + v184 + 10;
  uint64_t v197 = (uint64_t)v181 + v184 + 34;
  char v196 = *((unsigned char *)v181 + v184);
  uint64_t v198 = (unsigned char *)((unint64_t)&v180[v184] | 1);
  uint64_t v199 = (unsigned char *)((unint64_t)&v180[v184] | 2);
  uint64_t v200 = (uint64_t)&v180[v184 + 10];
  uint64_t v201 = &v180[v184];
  *uint64_t v201 = v196;
  unsigned char *v198 = *v193;
  unsigned char *v199 = *v194;
  unint64_t v202 = v200 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v203 = *(void *)(v195 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v204 = *(void *)((v195 & 0xFFFFFFFFFFFFFFF8) + 8);
  char v205 = *(unsigned char *)((v195 & 0xFFFFFFFFFFFFFFF8) + 16);
  sub_10009C5FC(v203, v204, v205);
  *(void *)unint64_t v202 = v203;
  *(void *)(v202 + 8) = v204;
  *(unsigned char *)(v202 + 16) = v205;
  unint64_t v206 = (unint64_t)(v201 + 34) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v207 = v197 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v208 = *(void *)((v197 & 0xFFFFFFFFFFFFFFF8) + 16) >> 60;
  if (!(4 * (v208 & 3)) || ((v208 >> 2) & 0xFFFFFFF3 | (4 * (v208 & 3))) == 0xF)
  {
    uint64_t v215 = (uint64_t *)(v207 + 8);
    *(void *)unint64_t v206 = *(void *)v207;
    unint64_t v216 = *(void *)(v207 + 16);
    unint64_t v213 = v359;
    size_t v214 = v380;
    if (v216 >> 60 == 15)
    {
      *(_OWORD *)(v206 + 8) = *(_OWORD *)v215;
    }
    else
    {
      uint64_t v217 = *v215;
      sub_10001EBB0(*v215, *(void *)(v207 + 16));
      *(void *)(v206 + 8) = v217;
      *(void *)(v206 + 16) = v216;
    }
    uint64_t v212 = v357;
    long long v218 = *(_OWORD *)(v207 + 24);
    *(unsigned char *)(v206 + 40) = *(unsigned char *)(v207 + 40);
    *(_OWORD *)(v206 + 24) = v218;
    *(void *)(v206 + 48) = *(void *)(v207 + 48);
  }
  else
  {
    long long v209 = *(_OWORD *)v207;
    long long v210 = *(_OWORD *)(v207 + 16);
    long long v211 = *(_OWORD *)(v207 + 32);
    *(void *)(v206 + 48) = *(void *)(v207 + 48);
    *(_OWORD *)(v206 + 16) = v210;
    *(_OWORD *)(v206 + 32) = v211;
    *(_OWORD *)unint64_t v206 = v209;
    uint64_t v212 = v357;
    unint64_t v213 = v359;
    size_t v214 = v380;
  }
  uint64_t v219 = (void *)((v206 + 63) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v220 = (void **)((v207 + 63) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v221 = *v220;
  void *v219 = *v220;
  *(void *)(((unint64_t)v219 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v220 + 15) & 0xFFFFFFFFFFFFFFF8);
  *((unsigned char *)v173 + v213) = *((unsigned char *)v174 + v213);
  unint64_t v222 = ((unint64_t)v173 + v213) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v223 = ((unint64_t)v174 + v213) & 0xFFFFFFFFFFFFFFF8;
  *(void *)(v222 + 8) = *(void *)(v223 + 8);
  uint64_t v224 = (_OWORD *)((v222 + 23) & 0xFFFFFFFFFFFFFFF8);
  int v225 = (_OWORD *)((v223 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v224 = *v225;
  unint64_t v226 = ((unint64_t)v224 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v227 = ((unint64_t)v225 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v226 = *(void *)v227;
  *(unsigned char *)(v226 + 8) = *(unsigned char *)(v227 + 8);
  *(void *)(((unint64_t)v224 + 39) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v225 + 39) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v228 = (_OWORD *)(((unint64_t)v134 + v341) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v229 = (_OWORD *)(((unint64_t)v135 + v341) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v228 = *v229;
  unint64_t v230 = ((unint64_t)v228 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v231 = ((unint64_t)v229 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v232 = *(void *)v231;
  *(unsigned char *)(v230 + 8) = *(unsigned char *)(v231 + 8);
  *(void *)unint64_t v230 = v232;
  uint64_t v233 = (void *)((v345 + v230) & v356);
  int v234 = (const void *)((v345 + v231) & v356);
  id v235 = v221;
  swift_bridgeObjectRetain();
  if (v343 == v342)
  {
    if (v336 == v343)
    {
      uint64_t v236 = AssociatedTypeWitness;
      if (v334 < 2) {
        goto LABEL_169;
      }
      unsigned int v237 = ((uint64_t (*)(const void *))v352)(v234);
LABEL_143:
      if (v237 >= 2) {
        goto LABEL_171;
      }
      goto LABEL_169;
    }
    unint64_t v239 = (v212 + (((((unint64_t)v234 + v383) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v376;
    if (v333 == v343)
    {
      if (v368 == v400)
      {
        unsigned int v240 = (*(uint64_t (**)(unint64_t))(v406 + 48))(v239);
        uint64_t v236 = AssociatedTypeWitness;
        goto LABEL_168;
      }
      uint64_t v242 = (unint64_t *)((v394 + v239) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v236 = AssociatedTypeWitness;
      if (v363 > 0x7FFFFFFE)
      {
        unsigned int v240 = (*(uint64_t (**)(unint64_t, void, uint64_t))(v371 + 48))(((unint64_t)v242 + v355) & v353, v344, v372);
        goto LABEL_168;
      }
LABEL_162:
      unint64_t v244 = *v242;
      if (v244 >= 0xFFFFFFFF) {
        unsigned int v240 = -1;
      }
      else {
        unsigned int v240 = v244;
      }
      if (v240 + 1 < 2) {
        goto LABEL_169;
      }
      goto LABEL_168;
    }
    unint64_t v241 = v329;
LABEL_157:
    unint64_t v243 = *(void *)((((v241 + v239 + 26) & 0xFFFFFFFFFFFFFFF8) + 87) & 0xFFFFFFFFFFFFFFF8);
    if (v243 >= 0xFFFFFFFF) {
      LODWORD(v243) = -1;
    }
    uint64_t v236 = AssociatedTypeWitness;
    if ((v243 + 1) >= 2) {
      goto LABEL_171;
    }
    goto LABEL_169;
  }
  unint64_t v238 = ((unint64_t)v234 + v362) & v385;
  if (v337 != v342)
  {
    uint64_t v236 = AssociatedTypeWitness;
    if (*(void *)(((v238 + v213) & 0xFFFFFFFFFFFFFFF8) + 8) < 0xFFFFFFFFuLL) {
      goto LABEL_171;
    }
    goto LABEL_169;
  }
  if (v332 == v337)
  {
    uint64_t v236 = AssociatedTypeWitness;
    if (v331 < 2) {
      goto LABEL_169;
    }
    unsigned int v237 = ((uint64_t (*)(unint64_t))v351)(v238);
    goto LABEL_143;
  }
  unint64_t v239 = (v381 + ((((v378 + v238) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v387;
  if (v330 != v337)
  {
    unint64_t v241 = v335;
    goto LABEL_157;
  }
  uint64_t v236 = AssociatedTypeWitness;
  if (v370 == v399)
  {
    unsigned int v240 = (*(uint64_t (**)(unint64_t, void, uint64_t))(v391 + 48))(v239, v370, v392);
    goto LABEL_168;
  }
  uint64_t v242 = (unint64_t *)((v389 + v239) & 0xFFFFFFFFFFFFFFF8);
  if (v360 <= 0x7FFFFFFE) {
    goto LABEL_162;
  }
  unsigned int v240 = (*(uint64_t (**)(unint64_t, void, uint64_t))(v365 + 48))(((unint64_t)v242 + v354) & v405, v338, v366);
LABEL_168:
  if (v240 >= 2)
  {
LABEL_171:
    memcpy(v233, v234, v350);
    return a1;
  }
LABEL_169:
  if (v352((uint64_t)v234, 1, v236))
  {
    memcpy(v233, v234, __n);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v396 + 16))(v233, v234, v236);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v396 + 56))(v233, 0, 1, v236);
  }
  uint64_t v245 = (void *)(((unint64_t)v233 + v383) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v246 = (void *)(((unint64_t)v234 + v383) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v245 = *v246;
  unint64_t v247 = ((unint64_t)v245 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v248 = ((unint64_t)v246 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v247 = *(void *)v248;
  *(unsigned char *)(v247 + 8) = *(unsigned char *)(v248 + 8);
  uint64_t v249 = (void *)((v212 + v247) & v376);
  uint64_t v250 = (const void *)((v212 + v248) & v376);
  if (v368 == v400)
  {
    if (!(*(unsigned int (**)(const void *, void, uint64_t))(v406 + 48))(v250, v368, v395)) {
      goto LABEL_183;
    }
  }
  else
  {
    uint64_t v251 = (void *)(((unint64_t)v250 + v394) & 0xFFFFFFFFFFFFFFF8);
    if (v363 > 0x7FFFFFFE)
    {
      if (!(*(unsigned int (**)(unint64_t, void, uint64_t))(v371 + 48))(((unint64_t)v251 + v355) & v353, v344, v372))
      {
LABEL_183:
        uint64_t v251 = (void *)(((unint64_t)v250 + v394) & 0xFFFFFFFFFFFFFFF8);
LABEL_184:
        (*(void (**)(void *, const void *, uint64_t))(v406 + 16))(v249, v250, v395);
        uint64_t v253 = (void *)(((unint64_t)v249 + v394) & 0xFFFFFFFFFFFFFFF8);
        *uint64_t v253 = *v251;
        unint64_t v254 = ((unint64_t)v253 + v355) & v353;
        unint64_t v255 = ((unint64_t)v251 + v355) & v353;
        uint64_t v256 = *(void (**)(unint64_t, unint64_t, uint64_t))(v371 + 16);
        swift_bridgeObjectRetain();
        v256(v254, v255, v372);
        uint64_t v257 = (void *)((v346 + v254) & 0xFFFFFFFFFFFFFFF8);
        uint64_t v258 = (void *)((v346 + v255) & 0xFFFFFFFFFFFFFFF8);
        *uint64_t v257 = *v258;
        uint64_t v259 = (void *)(((unint64_t)v257 + 15) & 0xFFFFFFFFFFFFFFF8);
        uint64_t v260 = (void *)(((unint64_t)v258 + 15) & 0xFFFFFFFFFFFFFFF8);
        *uint64_t v259 = *v260;
        v259[1] = v260[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_185;
      }
    }
    else
    {
      uint64_t v252 = *v251;
      if (*v251 >= 0xFFFFFFFFuLL) {
        LODWORD(v252) = -1;
      }
      if ((v252 + 1) < 2) {
        goto LABEL_184;
      }
    }
  }
  memcpy(v249, v250, v214);
LABEL_185:
  uint64_t v261 = (uint64_t)v250 + v214 + 10;
  uint64_t v262 = (uint64_t)v250 + v214 + 34;
  *((unsigned char *)v249 + v214) = *((unsigned char *)v250 + v214);
  uint64_t v263 = (uint64_t)v249 + v214 + 34;
  *(unsigned char *)(((unint64_t)v249 + v214) | 1) = *(unsigned char *)(((unint64_t)v250 + v214) | 1);
  *(unsigned char *)(((unint64_t)v249 + v214) | 2) = *(unsigned char *)(((unint64_t)v250 + v214) | 2);
  unint64_t v264 = ((unint64_t)v249 + v214 + 10) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v265 = *(void *)(v261 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v266 = *(void *)((v261 & 0xFFFFFFFFFFFFFFF8) + 8);
  char v267 = *(unsigned char *)((v261 & 0xFFFFFFFFFFFFFFF8) + 16);
  sub_10009C5FC(v265, v266, v267);
  *(void *)unint64_t v264 = v265;
  *(void *)(v264 + 8) = v266;
  *(unsigned char *)(v264 + 16) = v267;
  unint64_t v268 = v263 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v269 = v262 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v270 = *(void *)(v269 + 16) >> 60;
  if (!(4 * (v270 & 3)) || ((v270 >> 2) & 0xFFFFFFF3 | (4 * (v270 & 3))) == 0xF)
  {
    uint64_t v274 = (uint64_t *)(v269 + 8);
    *(void *)unint64_t v268 = *(void *)v269;
    unint64_t v275 = *(void *)(v269 + 16);
    if (v275 >> 60 == 15)
    {
      *(_OWORD *)(v268 + 8) = *(_OWORD *)v274;
    }
    else
    {
      uint64_t v276 = *v274;
      sub_10001EBB0(*v274, *(void *)(v269 + 16));
      *(void *)(v268 + 8) = v276;
      *(void *)(v268 + 16) = v275;
    }
    long long v277 = *(_OWORD *)(v269 + 24);
    *(unsigned char *)(v268 + 40) = *(unsigned char *)(v269 + 40);
    *(_OWORD *)(v268 + 24) = v277;
    *(void *)(v268 + 48) = *(void *)(v269 + 48);
  }
  else
  {
    long long v271 = *(_OWORD *)v269;
    long long v272 = *(_OWORD *)(v269 + 16);
    long long v273 = *(_OWORD *)(v269 + 32);
    *(void *)(v268 + 48) = *(void *)(v269 + 48);
    *(_OWORD *)(v268 + 16) = v272;
    *(_OWORD *)(v268 + 32) = v273;
    *(_OWORD *)unint64_t v268 = v271;
  }
  uint64_t v278 = (void *)((v268 + 63) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v279 = (void **)((v269 + 63) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v280 = *v279;
  *uint64_t v278 = *v279;
  *(void *)(((unint64_t)v278 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v279 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v281 = (void *)(((unint64_t)v233 + v362) & v385);
  uint64_t v282 = (const void *)(((unint64_t)v234 + v362) & v385);
  id v283 = v280;
  if (v351(v282, 1, v397))
  {
    memcpy(v281, v282, v349);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v364 + 16))(v281, v282, v397);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v364 + 56))(v281, 0, 1, v397);
  }
  uint64_t v284 = (void *)(((unint64_t)v281 + v378) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v285 = (void *)(((unint64_t)v282 + v378) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v284 = *v285;
  unint64_t v286 = ((unint64_t)v284 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v287 = ((unint64_t)v285 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v286 = *(void *)v287;
  *(unsigned char *)(v286 + 8) = *(unsigned char *)(v287 + 8);
  uint64_t v288 = (void *)((v381 + v286) & v387);
  uint64_t v289 = (const void *)((v381 + v287) & v387);
  if (v370 == v399)
  {
    if (!(*(unsigned int (**)(const void *))(v391 + 48))(v289)) {
      goto LABEL_205;
    }
LABEL_204:
    unint64_t v292 = v335 + 16;
    memcpy(v288, v289, v374);
    goto LABEL_207;
  }
  uint64_t v290 = (uint64_t *)(((unint64_t)v289 + v389) & 0xFFFFFFFFFFFFFFF8);
  if (v360 <= 0x7FFFFFFE)
  {
    uint64_t v291 = *v290;
    if ((unint64_t)*v290 >= 0xFFFFFFFF) {
      LODWORD(v291) = -1;
    }
    if ((v291 + 1) < 2) {
      goto LABEL_206;
    }
    goto LABEL_204;
  }
  if ((*(unsigned int (**)(unint64_t, void, uint64_t))(v365 + 48))(((unint64_t)v290 + v354) & v405, v338, v366))
  {
    goto LABEL_204;
  }
LABEL_205:
  uint64_t v290 = (uint64_t *)(((unint64_t)v289 + v389) & 0xFFFFFFFFFFFFFFF8);
LABEL_206:
  (*(void (**)(void *, const void *, uint64_t))(v391 + 16))(v288, v289, v392);
  uint64_t v293 = (void *)(((unint64_t)v288 + v389) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v293 = *v290;
  unint64_t v294 = ((unint64_t)v293 + v354) & v405;
  unint64_t v295 = ((unint64_t)v290 + v354) & v405;
  uint64_t v296 = *(void (**)(unint64_t, unint64_t, uint64_t))(v365 + 16);
  swift_bridgeObjectRetain();
  v296(v294, v295, v366);
  uint64_t v297 = (void *)((v347 + v294) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v298 = (void *)((v347 + v295) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v297 = *v298;
  uint64_t v299 = (void *)(((unint64_t)v297 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v300 = (void *)(((unint64_t)v298 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v299 = *v300;
  v299[1] = v300[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v292 = v335 + 16;
LABEL_207:
  uint64_t v301 = (uint64_t)v289 + v292 + 10;
  uint64_t v302 = (uint64_t)v289 + v292 + 34;
  *((unsigned char *)v288 + v292) = *((unsigned char *)v289 + v292);
  uint64_t v303 = (uint64_t)v288 + v292 + 34;
  *(unsigned char *)(((unint64_t)v288 + v292) | 1) = *(unsigned char *)(((unint64_t)v289 + v292) | 1);
  *(unsigned char *)(((unint64_t)v288 + v292) | 2) = *(unsigned char *)(((unint64_t)v289 + v292) | 2);
  unint64_t v304 = ((unint64_t)v288 + v292 + 10) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v305 = *(void *)(v301 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v306 = *(void *)((v301 & 0xFFFFFFFFFFFFFFF8) + 8);
  char v307 = *(unsigned char *)((v301 & 0xFFFFFFFFFFFFFFF8) + 16);
  sub_10009C5FC(v305, v306, v307);
  *(void *)unint64_t v304 = v305;
  *(void *)(v304 + 8) = v306;
  *(unsigned char *)(v304 + 16) = v307;
  unint64_t v308 = v303 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v309 = v302 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v310 = *(void *)(v309 + 16) >> 60;
  if (!(4 * (v310 & 3)) || ((v310 >> 2) & 0xFFFFFFF3 | (4 * (v310 & 3))) == 0xF)
  {
    uint64_t v314 = (uint64_t *)(v309 + 8);
    *(void *)unint64_t v308 = *(void *)v309;
    unint64_t v315 = *(void *)(v309 + 16);
    if (v315 >> 60 == 15)
    {
      *(_OWORD *)(v308 + 8) = *(_OWORD *)v314;
    }
    else
    {
      uint64_t v316 = *v314;
      sub_10001EBB0(*v314, *(void *)(v309 + 16));
      *(void *)(v308 + 8) = v316;
      *(void *)(v308 + 16) = v315;
    }
    uint64_t v40 = a1;
    long long v317 = *(_OWORD *)(v309 + 24);
    *(unsigned char *)(v308 + 40) = *(unsigned char *)(v309 + 40);
    *(_OWORD *)(v308 + 24) = v317;
    *(void *)(v308 + 48) = *(void *)(v309 + 48);
  }
  else
  {
    long long v311 = *(_OWORD *)v309;
    long long v312 = *(_OWORD *)(v309 + 16);
    long long v313 = *(_OWORD *)(v309 + 32);
    *(void *)(v308 + 48) = *(void *)(v309 + 48);
    *(_OWORD *)(v308 + 16) = v312;
    *(_OWORD *)(v308 + 32) = v313;
    *(_OWORD *)unint64_t v308 = v311;
    uint64_t v40 = a1;
  }
  uint64_t v318 = (void *)((v308 + 63) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v319 = (void **)((v309 + 63) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v320 = *v319;
  *uint64_t v318 = *v319;
  *(void *)(((unint64_t)v318 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v319 + 15) & 0xFFFFFFFFFFFFFFF8);
  *((unsigned char *)v281 + v213) = *((unsigned char *)v282 + v213);
  unint64_t v321 = ((unint64_t)v281 + v213) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v322 = ((unint64_t)v282 + v213) & 0xFFFFFFFFFFFFFFF8;
  *(void *)(v321 + 8) = *(void *)(v322 + 8);
  uint64_t v323 = (_OWORD *)((v321 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v324 = (_OWORD *)((v322 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v323 = *v324;
  unint64_t v325 = ((unint64_t)v323 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v326 = ((unint64_t)v324 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v325 = *(void *)v326;
  *(unsigned char *)(v325 + 8) = *(unsigned char *)(v326 + 8);
  *(void *)(((unint64_t)v323 + 39) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v324 + 39) & 0xFFFFFFFFFFFFFFF8);
  id v327 = v320;
  swift_bridgeObjectRetain();
  return v40;
}

unint64_t sub_1001133C8(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v107 = *(void *)(AssociatedTypeWitness - 8);
  int v1 = *(_DWORD *)(v107 + 80) & 0xF8;
  uint64_t v125 = swift_getAssociatedTypeWitness();
  uint64_t v2 = *(void *)(v125 - 8);
  int v3 = *(_DWORD *)(v2 + 80) & 0xF8;
  uint64_t v119 = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(v119 - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  int v6 = v3 | v5;
  uint64_t v7 = v3 | v5 | 7;
  int v8 = v6 | v1;
  uint64_t v127 = swift_getAssociatedTypeWitness();
  uint64_t v108 = *(void *)(v127 - 8);
  int v9 = *(_DWORD *)(v108 + 80) & 0xF8;
  uint64_t v123 = swift_getAssociatedTypeWitness();
  uint64_t v126 = *(void *)(v123 - 8);
  int v10 = *(_DWORD *)(v126 + 80) & 0xF8;
  uint64_t v113 = swift_getAssociatedTypeWitness();
  uint64_t v129 = *(void *)(v113 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v129 + 80);
  uint64_t v130 = v10 | v11 | 7;
  uint64_t v136 = v130 | v9;
  uint64_t v12 = v8 | v136;
  uint64_t v13 = v12 + 9;
  uint64_t v122 = v12;
  uint64_t v98 = v12 + 9 + a1;
  uint64_t v14 = v98 & ~v12;
  long long v116 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v107 + 48);
  if (!v116(v14, 1, AssociatedTypeWitness)) {
    (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v14, AssociatedTypeWitness);
  }
  if (*(_DWORD *)(v107 + 84)) {
    uint64_t v15 = *(void *)(v107 + 64);
  }
  else {
    uint64_t v15 = *(void *)(v107 + 64) + 1;
  }
  uint64_t v135 = v7 + 9;
  unint64_t v16 = (v7 + 9 + (((((v14 | 7) + v15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v7;
  unsigned int v17 = *(_DWORD *)(v2 + 84);
  unsigned int v95 = *(_DWORD *)(v4 + 84);
  if (v17 <= v95) {
    unsigned int v18 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v18 = *(_DWORD *)(v2 + 84);
  }
  if (v18 <= 0x7FFFFFFE) {
    int v19 = 2147483646;
  }
  else {
    int v19 = v18;
  }
  uint64_t v20 = *(void *)(v2 + 64) + 7;
  uint64_t v118 = ~v5;
  uint64_t v117 = v5 + 8;
  uint64_t v103 = *(void *)(v4 + 64) + 7;
  unint64_t v139 = ((((v103 + ((v5 + 8 + (v20 & 0xFFFFFFFFFFFFFFF8)) & ~v5)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
       + 16;
  int v133 = v19;
  uint64_t v106 = v20;
  int v115 = *(_DWORD *)(v2 + 84);
  unsigned int v97 = v18;
  uint64_t v121 = v2;
  uint64_t v104 = v4;
  unsigned int v101 = *(_DWORD *)(v107 + 84);
  uint64_t v100 = v13;
  unint64_t v93 = (((v103 + ((v5 + 8 + (v20 & 0xFFFFFFFFFFFFFFF8)) & ~v5)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  if (v17 == v19)
  {
    uint64_t v21 = v126;
    uint64_t v22 = v127;
    if ((*(unsigned int (**)(unint64_t))(v2 + 48))((v7
                                                                     + 9
                                                                     + (((((v14 | 7) + v15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v7))
      goto LABEL_23;
LABEL_21:
    unsigned int v23 = (uint64_t *)((v106 + v16) & 0xFFFFFFFFFFFFFFF8);
LABEL_22:
    (*(void (**)(unint64_t, uint64_t))(v2 + 8))((v7 + 9 + (((((v14 | 7) + v15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v7, v125);
    swift_bridgeObjectRelease();
    (*(void (**)(unint64_t, uint64_t))(v4 + 8))(((unint64_t)v23 + v117) & v118, v119);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
  unsigned int v23 = (uint64_t *)((v20 + v16) & 0xFFFFFFFFFFFFFFF8);
  if (v18 > 0x7FFFFFFE)
  {
    uint64_t v21 = v126;
    uint64_t v22 = v127;
    if ((*(unsigned int (**)(unint64_t, void, uint64_t))(v4 + 48))(((unint64_t)v23 + v117) & v118, v95, v119))
    {
      goto LABEL_23;
    }
    goto LABEL_21;
  }
  uint64_t v24 = *v23;
  if ((unint64_t)*v23 >= 0xFFFFFFFF) {
    LODWORD(v24) = -1;
  }
  uint64_t v21 = v126;
  uint64_t v22 = v127;
  if ((v24 + 1) < 2) {
    goto LABEL_22;
  }
LABEL_23:
  uint64_t v134 = ~v7;
  sub_1000D31F8(*(void *)((v139 + v16 + 10) & 0xFFFFFFFFFFFFFFF8), *(void *)(((v139 + v16 + 10) & 0xFFFFFFFFFFFFFFF8) + 8), *(unsigned char *)(((v139 + v16 + 10) & 0xFFFFFFFFFFFFFFF8) + 16));
  unint64_t v25 = (v139 + v16 + 34) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v26 = *(void *)(v25 + 16);
  BOOL v27 = ((4 * (v26 >> 60)) & 0xC | ((v26 >> 60) >> 2)) != 0xF && ((4 * (v26 >> 60)) & 0xC) != 0;
  if (v26 >> 60 != 15 && !v27) {
    sub_10001E9C0(*(void *)(v25 + 8), v26);
  }

  uint64_t v120 = v15 + 7;
  unint64_t v28 = ((((((((v135 + ((((v15 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v134) + v139 + 34) & 0xFFFFFFFFFFFFFFF8)
          + 63) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  unint64_t v29 = (v14 + v136 + v28) & ~v136;
  uint64_t v110 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v108 + 48);
  uint64_t v30 = AssociatedTypeWitness;
  if (!v110(v29, 1, v22)) {
    (*(void (**)(unint64_t, uint64_t))(v108 + 8))(v29, v22);
  }
  if (*(_DWORD *)(v108 + 84)) {
    uint64_t v31 = *(void *)(v108 + 64);
  }
  else {
    uint64_t v31 = *(void *)(v108 + 64) + 1;
  }
  uint64_t v132 = v130 + 9;
  unint64_t v32 = (v130 + 9 + (((((v29 | 7) + v31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v130;
  uint64_t v33 = *(unsigned int *)(v21 + 84);
  unsigned int v94 = *(_DWORD *)(v129 + 84);
  if (v33 <= v94) {
    unsigned int v34 = *(_DWORD *)(v129 + 84);
  }
  else {
    unsigned int v34 = *(_DWORD *)(v21 + 84);
  }
  if (v34 <= 0x7FFFFFFE) {
    int v35 = 2147483646;
  }
  else {
    int v35 = v34;
  }
  uint64_t v36 = *(void *)(v21 + 64) + 7;
  uint64_t v112 = ~v11;
  uint64_t v111 = v11 + 8;
  uint64_t v102 = *(void *)(v129 + 64) + 7;
  unint64_t v37 = ((((v102 + ((v11 + 8 + (v36 & 0xFFFFFFFFFFFFFFF8)) & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  int v128 = v35;
  unsigned int v96 = v34;
  unsigned int v99 = *(_DWORD *)(v108 + 84);
  unint64_t v92 = (((v102 + ((v11 + 8 + (v36 & 0xFFFFFFFFFFFFFFF8)) & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  if (v33 == v35)
  {
    if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v21 + 48))(v32, v33, v123)) {
      goto LABEL_51;
    }
LABEL_49:
    uint64_t v38 = (uint64_t *)((v36 + v32) & 0xFFFFFFFFFFFFFFF8);
LABEL_50:
    (*(void (**)(unint64_t, uint64_t))(v21 + 8))(v32, v123);
    swift_bridgeObjectRelease();
    (*(void (**)(unint64_t, uint64_t))(v129 + 8))(((unint64_t)v38 + v111) & v112, v113);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_51;
  }
  uint64_t v38 = (uint64_t *)((v36 + v32) & 0xFFFFFFFFFFFFFFF8);
  if (v34 > 0x7FFFFFFE)
  {
    if ((*(unsigned int (**)(unint64_t, void, uint64_t))(v129 + 48))(((unint64_t)v38 + v111) & v112, v94, v113))
    {
      goto LABEL_51;
    }
    goto LABEL_49;
  }
  uint64_t v39 = *v38;
  if ((unint64_t)*v38 >= 0xFFFFFFFF) {
    LODWORD(v39) = -1;
  }
  if ((v39 + 1) < 2) {
    goto LABEL_50;
  }
LABEL_51:
  uint64_t v105 = v36;
  uint64_t v40 = ~v122;
  uint64_t v137 = ~v136;
  uint64_t v131 = ~v130;
  sub_1000D31F8(*(void *)((v37 + v32 + 10) & 0xFFFFFFFFFFFFFFF8), *(void *)(((v37 + v32 + 10) & 0xFFFFFFFFFFFFFFF8) + 8), *(unsigned char *)(((v37 + v32 + 10) & 0xFFFFFFFFFFFFFFF8) + 16));
  unint64_t v41 = (v37 + v32 + 34) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v42 = *(void *)(v41 + 16);
  BOOL v43 = ((4 * (v42 >> 60)) & 0xC | ((v42 >> 60) >> 2)) != 0xF && ((4 * (v42 >> 60)) & 0xC) != 0;
  if (v42 >> 60 != 15 && !v43) {
    sub_10001E9C0(*(void *)(v41 + 8), v42);
  }

  uint64_t v114 = v31 + 7;
  swift_bridgeObjectRelease();
  uint64_t v44 = v28 + v136;
  unint64_t v45 = ((((((((v132 + ((((v31 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v131) + v37 + 34) & 0xFFFFFFFFFFFFFFF8)
          + 63) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  unint64_t v46 = ((((((v45 + ((v28 + v136) & v137)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  unint64_t v47 = ((v98 | v122) + v46) & v40;
  if (!v116(v47, 1, AssociatedTypeWitness)) {
    (*(void (**)(unint64_t, uint64_t))(v107 + 8))(v47, AssociatedTypeWitness);
  }
  unint64_t v48 = (v135 + ((((v120 + v47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v134;
  unint64_t v109 = v37;
  if (v115 == v133)
  {
    if ((*(unsigned int (**)(unint64_t))(v121 + 48))((v135
                                                                       + ((((v120 + v47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v134))
      goto LABEL_70;
LABEL_68:
    uint64_t v49 = (uint64_t *)((v106 + v48) & 0xFFFFFFFFFFFFFFF8);
LABEL_69:
    (*(void (**)(unint64_t, uint64_t))(v121 + 8))(v48, v125);
    swift_bridgeObjectRelease();
    (*(void (**)(unint64_t, uint64_t))(v104 + 8))(((unint64_t)v49 + v117) & v118, v119);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_70;
  }
  uint64_t v49 = (uint64_t *)((v106 + v48) & 0xFFFFFFFFFFFFFFF8);
  if (v97 > 0x7FFFFFFE)
  {
    if ((*(unsigned int (**)(unint64_t, void, uint64_t))(v104 + 48))(((unint64_t)v49 + v117) & v118, v95, v119))
    {
      goto LABEL_70;
    }
    goto LABEL_68;
  }
  uint64_t v50 = *v49;
  if ((unint64_t)*v49 >= 0xFFFFFFFF) {
    LODWORD(v50) = -1;
  }
  if ((v50 + 1) < 2) {
    goto LABEL_69;
  }
LABEL_70:
  sub_1000D31F8(*(void *)((v48 + v139 + 10) & 0xFFFFFFFFFFFFFFF8), *(void *)(((v48 + v139 + 10) & 0xFFFFFFFFFFFFFFF8) + 8), *(unsigned char *)(((v48 + v139 + 10) & 0xFFFFFFFFFFFFFFF8) + 16));
  unint64_t v51 = (v48 + v139 + 34) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v52 = *(void *)(v51 + 16);
  BOOL v53 = ((4 * (v52 >> 60)) & 0xC | ((v52 >> 60) >> 2)) != 0xF && ((4 * (v52 >> 60)) & 0xC) != 0;
  if (v52 >> 60 != 15 && !v53) {
    sub_10001E9C0(*(void *)(v51 + 8), v52);
  }

  unint64_t v54 = (v44 + v47) & v137;
  if (!v110(v54, 1, v127)) {
    (*(void (**)(unint64_t, uint64_t))(v108 + 8))(v54, v127);
  }
  unint64_t v55 = (v132 + ((((v114 + v54) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v131;
  if (v33 == v128)
  {
    if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v126 + 48))((v132 + ((((v114 + v54) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v131, v33, v123))
    {
      goto LABEL_89;
    }
LABEL_87:
    uint64_t v56 = (uint64_t *)((v105 + v55) & 0xFFFFFFFFFFFFFFF8);
LABEL_88:
    (*(void (**)(unint64_t, uint64_t))(v126 + 8))(v55, v123);
    swift_bridgeObjectRelease();
    (*(void (**)(unint64_t, uint64_t))(v129 + 8))(((unint64_t)v56 + v111) & v112, v113);
    uint64_t v30 = AssociatedTypeWitness;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_89;
  }
  uint64_t v56 = (uint64_t *)((v105 + v55) & 0xFFFFFFFFFFFFFFF8);
  if (v96 > 0x7FFFFFFE)
  {
    if ((*(unsigned int (**)(unint64_t, void, uint64_t))(v129 + 48))(((unint64_t)v56 + v111) & v112, v94, v113))
    {
      goto LABEL_89;
    }
    goto LABEL_87;
  }
  uint64_t v57 = *v56;
  if ((unint64_t)*v56 >= 0xFFFFFFFF) {
    LODWORD(v57) = -1;
  }
  if ((v57 + 1) < 2) {
    goto LABEL_88;
  }
LABEL_89:
  unint64_t v58 = v55 + v109;
  sub_1000D31F8(*(void *)((v58 + 10) & 0xFFFFFFFFFFFFFFF8), *(void *)(((v58 + 10) & 0xFFFFFFFFFFFFFFF8) + 8), *(unsigned char *)(((v58 + 10) & 0xFFFFFFFFFFFFFFF8) + 16));
  unint64_t v59 = (v58 + 34) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v60 = *(void *)(v59 + 16);
  BOOL v61 = ((4 * (v60 >> 60)) & 0xC | ((v60 >> 60) >> 2)) != 0xF && ((4 * (v60 >> 60)) & 0xC) != 0;
  if (v60 >> 60 != 15 && !v61) {
    sub_10001E9C0(*(void *)(v59 + 8), v60);
  }

  swift_bridgeObjectRelease();
  unint64_t v62 = (v100 + ((((v47 + v46) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)) & v40;
  if (v101) {
    unsigned int v63 = v101 - 1;
  }
  else {
    unsigned int v63 = 0;
  }
  if (v63 <= v133 - 1) {
    unsigned int v64 = v133 - 1;
  }
  else {
    unsigned int v64 = v63;
  }
  if (v64 <= 0x7FFFFFFE) {
    unsigned int v65 = 2147483646;
  }
  else {
    unsigned int v65 = v64;
  }
  if (v99) {
    unsigned int v66 = v99 - 1;
  }
  else {
    unsigned int v66 = 0;
  }
  if (v66 <= v128 - 1) {
    unsigned int v67 = v128 - 1;
  }
  else {
    unsigned int v67 = v66;
  }
  if (v67 <= 0x7FFFFFFE) {
    unsigned int v68 = 2147483646;
  }
  else {
    unsigned int v68 = v67;
  }
  if (v68 <= v65) {
    unsigned int v69 = v65;
  }
  else {
    unsigned int v69 = v68;
  }
  if (v69 <= 0x7FFFFFFF) {
    unsigned int v69 = 0x7FFFFFFF;
  }
  if (v65 == v69)
  {
    if (v63 == v65)
    {
      if (v101 < 2) {
        goto LABEL_150;
      }
      unint64_t result = ((uint64_t (*)(unint64_t, void, uint64_t))v116)(v62, v101, v30);
LABEL_126:
      if (result >= 2) {
        return result;
      }
      goto LABEL_150;
    }
    unint64_t result = (v135 + ((((v120 + v62) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v134;
    if (v133 - 1 == v65)
    {
      if (v115 == v133)
      {
        unint64_t result = (*(uint64_t (**)(unint64_t))(v121 + 48))(result);
        goto LABEL_192;
      }
      uint64_t v72 = (unint64_t *)((v106 + result) & 0xFFFFFFFFFFFFFFF8);
      if (v97 > 0x7FFFFFFE)
      {
        unint64_t result = (*(uint64_t (**)(unint64_t))(v104 + 48))(((unint64_t)v72 + v117) & v118);
        goto LABEL_192;
      }
LABEL_145:
      unint64_t v74 = *v72;
      if (v74 >= 0xFFFFFFFF) {
        unint64_t result = 0xFFFFFFFFLL;
      }
      else {
        unint64_t result = v74;
      }
      if ((result + 1) >= 2 && result >= 2) {
        return result;
      }
LABEL_150:
      if (!v116(v62, 1, v30)) {
        (*(void (**)(unint64_t, uint64_t))(v107 + 8))(v62, v30);
      }
      unint64_t v75 = (v135 + ((((v120 + v62) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v134;
      if (v115 == v133)
      {
        if ((*(unsigned int (**)(unint64_t))(v121 + 48))((v135
                                                                           + ((((v120 + v62) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v134))
          goto LABEL_163;
      }
      else
      {
        uint64_t v76 = (uint64_t *)((v106 + v75) & 0xFFFFFFFFFFFFFFF8);
        if (v97 <= 0x7FFFFFFE)
        {
          uint64_t v77 = *v76;
          if ((unint64_t)*v76 >= 0xFFFFFFFF) {
            LODWORD(v77) = -1;
          }
          if ((v77 + 1) >= 2)
          {
LABEL_163:
            unint64_t v78 = v75 + v139;
            sub_1000D31F8(*(void *)((v78 + 10) & 0xFFFFFFFFFFFFFFF8), *(void *)(((v78 + 10) & 0xFFFFFFFFFFFFFFF8) + 8), *(unsigned char *)(((v78 + 10) & 0xFFFFFFFFFFFFFFF8) + 16));
            unint64_t v79 = (v78 + 34) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v80 = *(void *)(v79 + 16);
            BOOL v81 = ((4 * (v80 >> 60)) & 0xC | ((v80 >> 60) >> 2)) != 0xF && ((4 * (v80 >> 60)) & 0xC) != 0;
            if (v80 >> 60 != 15 && !v81) {
              sub_10001E9C0(*(void *)(v79 + 8), v80);
            }

            unint64_t v82 = (v44 + v62) & v137;
            uint64_t v83 = v105;
            if (!v110(v82, 1, v127)) {
              (*(void (**)(unint64_t, uint64_t))(v108 + 8))(v82, v127);
            }
            unint64_t v84 = (v132 + ((((v114 + v82) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v131;
            if (v33 == v128)
            {
              if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v126 + 48))((v132 + ((((v114 + v82) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v131, v33, v123))goto LABEL_180; {
            }
              }
            else
            {
              unint64_t v85 = (uint64_t *)((v105 + v84) & 0xFFFFFFFFFFFFFFF8);
              if (v96 <= 0x7FFFFFFE)
              {
                uint64_t v86 = *v85;
                if ((unint64_t)*v85 >= 0xFFFFFFFF) {
                  LODWORD(v86) = -1;
                }
                if ((v86 + 1) >= 2) {
                  goto LABEL_182;
                }
                goto LABEL_181;
              }
              int v87 = (*(uint64_t (**)(unint64_t, void, uint64_t))(v129 + 48))(((unint64_t)v85 + v111) & v112, v94, v113);
              uint64_t v83 = v105;
              if (!v87)
              {
LABEL_180:
                unint64_t v85 = (uint64_t *)((v83 + v84) & 0xFFFFFFFFFFFFFFF8);
LABEL_181:
                (*(void (**)(unint64_t, uint64_t))(v126 + 8))(v84, v123);
                swift_bridgeObjectRelease();
                (*(void (**)(unint64_t, uint64_t))(v129 + 8))(((unint64_t)v85 + v111) & v112, v113);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
              }
            }
LABEL_182:
            unint64_t v88 = v84 + v109;
            sub_1000D31F8(*(void *)((v88 + 10) & 0xFFFFFFFFFFFFFFF8), *(void *)(((v88 + 10) & 0xFFFFFFFFFFFFFFF8) + 8), *(unsigned char *)(((v88 + 10) & 0xFFFFFFFFFFFFFFF8) + 16));
            unint64_t v89 = (v88 + 34) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v90 = *(void *)(v89 + 16);
            BOOL v91 = ((4 * (v90 >> 60)) & 0xC | ((v90 >> 60) >> 2)) != 0xF && ((4 * (v90 >> 60)) & 0xC) != 0;
            if (v90 >> 60 != 15 && !v91) {
              sub_10001E9C0(*(void *)(v89 + 8), v90);
            }

            return swift_bridgeObjectRelease();
          }
LABEL_162:
          (*(void (**)(unint64_t, uint64_t))(v121 + 8))(v75, v125);
          swift_bridgeObjectRelease();
          (*(void (**)(unint64_t, uint64_t))(v104 + 8))(((unint64_t)v76 + v117) & v118, v119);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_163;
        }
        if ((*(unsigned int (**)(unint64_t, void, uint64_t))(v104 + 48))(((unint64_t)v76 + v117) & v118, v95, v119))
        {
          goto LABEL_163;
        }
      }
      uint64_t v76 = (uint64_t *)((v106 + v75) & 0xFFFFFFFFFFFFFFF8);
      goto LABEL_162;
    }
    unint64_t v71 = v93;
  }
  else
  {
    unint64_t result = (v44 + v62) & v137;
    if (v68 != v69)
    {
      if (*(void *)(((result + v45) & 0xFFFFFFFFFFFFFFF8) + 8) < 0xFFFFFFFFuLL) {
        return result;
      }
      goto LABEL_150;
    }
    if (v66 == v68)
    {
      if (v99 < 2) {
        goto LABEL_150;
      }
      unint64_t result = ((uint64_t (*)(unint64_t, void, uint64_t))v110)(result, v99, v127);
      goto LABEL_126;
    }
    unint64_t result = (v132 + ((((v114 + result) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v131;
    if (v128 - 1 == v68)
    {
      if (v33 == v128)
      {
        unint64_t result = (*(uint64_t (**)(unint64_t))(v126 + 48))(result);
        goto LABEL_192;
      }
      uint64_t v72 = (unint64_t *)((v105 + result) & 0xFFFFFFFFFFFFFFF8);
      if (v96 > 0x7FFFFFFE)
      {
        unint64_t result = (*(uint64_t (**)(unint64_t))(v129 + 48))(((unint64_t)v72 + v111) & v112);
LABEL_192:
        if (result >= 2) {
          return result;
        }
        goto LABEL_150;
      }
      goto LABEL_145;
    }
    unint64_t v71 = v92;
  }
  unint64_t v73 = *(void *)((((v71 + result + 26) & 0xFFFFFFFFFFFFFFF8) + 87) & 0xFFFFFFFFFFFFFFF8);
  if (v73 >= 0xFFFFFFFF) {
    LODWORD(v73) = -1;
  }
  if ((v73 + 1) < 2) {
    goto LABEL_150;
  }
  return result;
}

uint64_t sub_1001146C4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v361 = *(void *)(AssociatedTypeWitness - 8);
  int v5 = *(_DWORD *)(v361 + 80) & 0xF8;
  uint64_t v386 = swift_getAssociatedTypeWitness();
  uint64_t v398 = *(void *)(v386 - 8);
  int v6 = *(_DWORD *)(v398 + 80) & 0xF8;
  uint64_t v373 = swift_getAssociatedTypeWitness();
  uint64_t v395 = *(void *)(v373 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v395 + 80);
  uint64_t v401 = v6 | v7 | 7;
  int v8 = v6 | v7 | v5;
  uint64_t v388 = swift_getAssociatedTypeWitness();
  uint64_t v377 = *(void *)(v388 - 8);
  int v9 = *(_DWORD *)(v377 + 80) & 0xF8;
  uint64_t v385 = swift_getAssociatedTypeWitness();
  uint64_t v387 = *(void *)(v385 - 8);
  int v10 = *(_DWORD *)(v387 + 80) & 0xF8;
  uint64_t v366 = swift_getAssociatedTypeWitness();
  uint64_t v390 = *(void *)(v366 - 8);
  uint64_t v399 = *(unsigned __int8 *)(v390 + 80);
  uint64_t v391 = v10 | v399 | 7;
  uint64_t v11 = v391 | v9;
  uint64_t v12 = v8 | v11;
  uint64_t v352 = a1;
  uint64_t v13 = v12 + 9 + a1;
  unint64_t v14 = v13 & ~v12;
  uint64_t v15 = v12 + 9 + a2;
  uint64_t v378 = v12;
  unint64_t v16 = v15 & ~v12;
  int v369 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v361 + 48);
  uint64_t v370 = AssociatedTypeWitness;
  uint64_t v355 = v15;
  uint64_t v356 = v12 + 9;
  uint64_t v354 = v13;
  if (v369(v16, 1, AssociatedTypeWitness))
  {
    unsigned int v17 = *(_DWORD *)(v361 + 84);
    size_t v18 = *(void *)(v361 + 64);
    if (v17) {
      size_t v19 = *(void *)(v361 + 64);
    }
    else {
      size_t v19 = v18 + 1;
    }
    memcpy((void *)v14, (const void *)v16, v19);
  }
  else
  {
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v361 + 16))(v14, v16, AssociatedTypeWitness);
    (*(void (**)(unint64_t, void, uint64_t, uint64_t))(v361 + 56))(v14, 0, 1, AssociatedTypeWitness);
    unsigned int v17 = *(_DWORD *)(v361 + 84);
    size_t v18 = *(void *)(v361 + 64);
  }
  if (v17) {
    size_t v20 = v18;
  }
  else {
    size_t v20 = v18 + 1;
  }
  size_t v382 = v20;
  uint64_t v21 = (void *)(((v16 | 7) + v20) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v22 = (void *)(((v14 | 7) + v20) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v22 = *v21;
  unint64_t v23 = ((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v24 = ((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v23 = *(void *)v24;
  *(unsigned char *)(v23 + 8) = *(unsigned char *)(v24 + 8);
  uint64_t v25 = v401;
  unint64_t v26 = (void *)((v25 + 9 + v23) & ~v25);
  uint64_t v397 = v401 + 9;
  BOOL v27 = (const void *)((v25 + 9 + v24) & ~v25);
  unsigned int v28 = *(_DWORD *)(v398 + 84);
  unsigned int v349 = *(_DWORD *)(v395 + 84);
  if (v28 <= v349) {
    unsigned int v29 = *(_DWORD *)(v395 + 84);
  }
  else {
    unsigned int v29 = *(_DWORD *)(v398 + 84);
  }
  if (v29 <= 0x7FFFFFFE) {
    int v30 = 2147483646;
  }
  else {
    int v30 = v29;
  }
  uint64_t v31 = *(void *)(v398 + 64) + 7;
  uint64_t v372 = ~v7;
  uint64_t v371 = v7 + 8;
  unint64_t v32 = (v7 + 8 + (v31 & 0xFFFFFFFFFFFFFFF8)) & ~v7;
  uint64_t v33 = *(void *)(v395 + 64) + 7;
  size_t v34 = ((((v33 + v32) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16;
  int v394 = v30;
  size_t v383 = v34;
  int v367 = *(_DWORD *)(v398 + 84);
  unsigned int v351 = v29;
  uint64_t v347 = v33;
  uint64_t v376 = v31;
  unsigned int v357 = v17;
  unint64_t v345 = (((v33 + v32) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  if (v28 == v30)
  {
    if (!(*(unsigned int (**)(const void *))(v398 + 48))(v27)) {
      goto LABEL_26;
    }
LABEL_25:
    memcpy(v26, v27, v34);
    goto LABEL_28;
  }
  int v35 = (uint64_t *)(((unint64_t)v27 + v31) & 0xFFFFFFFFFFFFFFF8);
  if (v29 <= 0x7FFFFFFE)
  {
    uint64_t v36 = *v35;
    if ((unint64_t)*v35 >= 0xFFFFFFFF) {
      LODWORD(v36) = -1;
    }
    if ((v36 + 1) < 2) {
      goto LABEL_27;
    }
    goto LABEL_25;
  }
  if ((*(unsigned int (**)(unint64_t, void, uint64_t))(v395 + 48))(((unint64_t)v35 + v371) & v372, v349, v373))
  {
    goto LABEL_25;
  }
LABEL_26:
  int v35 = (uint64_t *)(((unint64_t)v27 + v31) & 0xFFFFFFFFFFFFFFF8);
LABEL_27:
  (*(void (**)(void *, const void *, uint64_t))(v398 + 16))(v26, v27, v386);
  unint64_t v37 = (void *)(((unint64_t)v26 + v31) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v37 = *v35;
  unint64_t v38 = ((unint64_t)v37 + v371) & v372;
  unint64_t v39 = ((unint64_t)v35 + v371) & v372;
  uint64_t v40 = *(void (**)(unint64_t, unint64_t, uint64_t))(v395 + 16);
  swift_bridgeObjectRetain();
  v40(v38, v39, v373);
  unint64_t v41 = (void *)((v33 + v38) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v42 = (void *)((v33 + v39) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v41 = *v42;
  BOOL v43 = (void *)(((unint64_t)v41 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v44 = (void *)(((unint64_t)v42 + 15) & 0xFFFFFFFFFFFFFFF8);
  *BOOL v43 = *v44;
  v43[1] = v44[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
LABEL_28:
  uint64_t v45 = (uint64_t)v27 + v34 + 34;
  *((unsigned char *)v26 + v34) = *((unsigned char *)v27 + v34);
  uint64_t v46 = (uint64_t)v26 + v34 + 34;
  *(unsigned char *)(((unint64_t)v26 + v34) | 1) = *(unsigned char *)(((unint64_t)v27 + v34) | 1);
  uint64_t v396 = ~v401;
  *(unsigned char *)(((unint64_t)v26 + v34) | 2) = *(unsigned char *)(((unint64_t)v27 + v34) | 2);
  unint64_t v47 = ((unint64_t)v26 + v34 + 10) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v48 = ((unint64_t)v27 + v34 + 10) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v49 = *(void *)v48;
  uint64_t v50 = *(void *)(v48 + 8);
  char v51 = *(unsigned char *)(v48 + 16);
  sub_10009C5FC(*(void *)v48, v50, v51);
  *(void *)unint64_t v47 = v49;
  *(void *)(v47 + 8) = v50;
  *(unsigned char *)(v47 + 16) = v51;
  unint64_t v52 = v46 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v53 = v45 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v54 = *(void *)((v45 & 0xFFFFFFFFFFFFFFF8) + 16) >> 60;
  if (4 * (v54 & 3)) {
    BOOL v55 = ((v54 >> 2) & 0xFFFFFFF3 | (4 * (v54 & 3))) == 15;
  }
  else {
    BOOL v55 = 1;
  }
  if (v55)
  {
    uint64_t v56 = (uint64_t *)(v53 + 8);
    *(void *)unint64_t v52 = *(void *)v53;
    unint64_t v57 = *(void *)(v53 + 16);
    if (v57 >> 60 == 15)
    {
      *(_OWORD *)(v52 + 8) = *(_OWORD *)v56;
    }
    else
    {
      uint64_t v62 = *v56;
      sub_10001EBB0(*v56, *(void *)(v53 + 16));
      *(void *)(v52 + 8) = v62;
      *(void *)(v52 + 16) = v57;
    }
    uint64_t v61 = v387;
    long long v63 = *(_OWORD *)(v53 + 24);
    *(unsigned char *)(v52 + 40) = *(unsigned char *)(v53 + 40);
    *(_OWORD *)(v52 + 24) = v63;
    *(void *)(v52 + 48) = *(void *)(v53 + 48);
  }
  else
  {
    long long v58 = *(_OWORD *)v53;
    long long v59 = *(_OWORD *)(v53 + 16);
    long long v60 = *(_OWORD *)(v53 + 32);
    *(void *)(v52 + 48) = *(void *)(v53 + 48);
    *(_OWORD *)(v52 + 16) = v59;
    *(_OWORD *)(v52 + 32) = v60;
    *(_OWORD *)unint64_t v52 = v58;
    uint64_t v61 = v387;
  }
  unsigned int v64 = (void **)((v53 + 63) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v65 = *v64;
  unsigned int v66 = (void *)((v52 + 63) & 0xFFFFFFFFFFFFFFF8);
  *unsigned int v66 = *v64;
  *(void *)(((unint64_t)v66 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v64 + 15) & 0xFFFFFFFFFFFFFFF8);
  size_t v374 = v382 + 7;
  unint64_t v67 = ((((((((v397 + ((((v382 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v396) + v34 + 34) & 0xFFFFFFFFFFFFFFF8)
          + 63) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  unint64_t v68 = (v14 + v11 + v67) & ~v11;
  unint64_t v69 = (v16 + v11 + v67) & ~v11;
  long long v70 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v377 + 48);
  id v71 = v65;
  unsigned int v363 = v70;
  if (v70((const void *)v69, 1, v388))
  {
    unsigned int v72 = *(_DWORD *)(v377 + 84);
    size_t v73 = *(void *)(v377 + 64);
    if (v72) {
      size_t v74 = *(void *)(v377 + 64);
    }
    else {
      size_t v74 = v73 + 1;
    }
    memcpy((void *)v68, (const void *)v69, v74);
  }
  else
  {
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v377 + 16))(v68, v69, v388);
    (*(void (**)(unint64_t, void, uint64_t, uint64_t))(v377 + 56))(v68, 0, 1, v388);
    unsigned int v72 = *(_DWORD *)(v377 + 84);
    size_t v73 = *(void *)(v377 + 64);
  }
  uint64_t v75 = v399;
  unsigned int v360 = v72;
  if (v72) {
    size_t v76 = v73;
  }
  else {
    size_t v76 = v73 + 1;
  }
  size_t v381 = v76;
  uint64_t v77 = (void *)(((v69 | 7) + v76) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v78 = (void *)(((v68 | 7) + v76) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v78 = *v77;
  unint64_t v79 = ((unint64_t)v78 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v80 = ((unint64_t)v77 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v79 = *(void *)v80;
  *(unsigned char *)(v79 + 8) = *(unsigned char *)(v80 + 8);
  uint64_t v81 = v391;
  unint64_t v82 = (void *)((v81 + 9 + v79) & ~v81);
  uint64_t v393 = v391 + 9;
  uint64_t v83 = (const void *)((v81 + 9 + v80) & ~v81);
  unsigned int v84 = *(_DWORD *)(v61 + 84);
  unsigned int v348 = *(_DWORD *)(v390 + 84);
  if (v84 <= v348) {
    unsigned int v85 = *(_DWORD *)(v390 + 84);
  }
  else {
    unsigned int v85 = *(_DWORD *)(v61 + 84);
  }
  if (v85 <= 0x7FFFFFFE) {
    int v86 = 2147483646;
  }
  else {
    int v86 = v85;
  }
  uint64_t v87 = *(void *)(v61 + 64) + 7;
  uint64_t v365 = ~v399;
  uint64_t v364 = v399 + 8;
  uint64_t v358 = *(void *)(v390 + 64) + 7;
  size_t v88 = ((((v358 + ((v399 + 8 + (v87 & 0xFFFFFFFFFFFFFFF8)) & ~v399)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  int v389 = v86;
  size_t v400 = v88;
  uint64_t v384 = v87;
  int v362 = *(_DWORD *)(v61 + 84);
  unsigned int v350 = v85;
  unint64_t v344 = (((v358 + ((v75 + 8 + (v87 & 0xFFFFFFFFFFFFFFF8)) & ~v75)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  if (v84 == v86)
  {
    if (!(*(unsigned int (**)(const void *))(v61 + 48))(v83)) {
      goto LABEL_62;
    }
  }
  else
  {
    unint64_t v89 = (void *)(((unint64_t)v83 + v87) & 0xFFFFFFFFFFFFFFF8);
    if (v85 > 0x7FFFFFFE)
    {
      if (!(*(unsigned int (**)(unint64_t, void, uint64_t))(v390 + 48))(((unint64_t)v89 + v364) & v365, v348, v366))
      {
LABEL_62:
        unint64_t v89 = (void *)(((unint64_t)v83 + v87) & 0xFFFFFFFFFFFFFFF8);
LABEL_63:
        (*(void (**)(void *, const void *, uint64_t))(v61 + 16))(v82, v83, v385);
        BOOL v91 = (void *)(((unint64_t)v82 + v87) & 0xFFFFFFFFFFFFFFF8);
        void *v91 = *v89;
        unint64_t v92 = ((unint64_t)v91 + v364) & v365;
        unint64_t v93 = ((unint64_t)v89 + v364) & v365;
        unsigned int v94 = *(void (**)(unint64_t, unint64_t, uint64_t))(v390 + 16);
        swift_bridgeObjectRetain();
        v94(v92, v93, v366);
        unsigned int v95 = (void *)((v358 + v92) & 0xFFFFFFFFFFFFFFF8);
        unint64_t v96 = v358 + v93;
        size_t v88 = v400;
        v96 &= 0xFFFFFFFFFFFFFFF8;
        *unsigned int v95 = *(void *)v96;
        unsigned int v97 = (void *)(((unint64_t)v95 + 15) & 0xFFFFFFFFFFFFFFF8);
        uint64_t v98 = (void *)((v96 + 15) & 0xFFFFFFFFFFFFFFF8);
        *unsigned int v97 = *v98;
        v97[1] = v98[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_64;
      }
    }
    else
    {
      uint64_t v90 = *v89;
      if (*v89 >= 0xFFFFFFFFuLL) {
        LODWORD(v90) = -1;
      }
      if ((v90 + 1) < 2) {
        goto LABEL_63;
      }
    }
  }
  memcpy(v82, v83, v88);
LABEL_64:
  uint64_t v99 = (uint64_t)v83 + v88 + 10;
  uint64_t v100 = (uint64_t)v83 + v88 + 34;
  *((unsigned char *)v82 + v88) = *((unsigned char *)v83 + v88);
  uint64_t v101 = (uint64_t)v82 + v88 + 34;
  *(unsigned char *)(((unint64_t)v82 + v88) | 1) = *(unsigned char *)(((unint64_t)v83 + v88) | 1);
  uint64_t v380 = ~v378;
  uint64_t v402 = ~v11;
  uint64_t v392 = ~v391;
  *(unsigned char *)(((unint64_t)v82 + v88) | 2) = *(unsigned char *)(((unint64_t)v83 + v88) | 2);
  unint64_t v102 = ((unint64_t)v82 + v88 + 10) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v103 = *(void *)(v99 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v104 = *(void *)((v99 & 0xFFFFFFFFFFFFFFF8) + 8);
  char v105 = *(unsigned char *)((v99 & 0xFFFFFFFFFFFFFFF8) + 16);
  sub_10009C5FC(v103, v104, v105);
  *(void *)unint64_t v102 = v103;
  *(void *)(v102 + 8) = v104;
  *(unsigned char *)(v102 + 16) = v105;
  unint64_t v106 = v101 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v107 = v100 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v108 = *(void *)(v107 + 16) >> 60;
  if (!(4 * (v108 & 3)) || ((v108 >> 2) & 0xFFFFFFF3 | (4 * (v108 & 3))) == 0xF)
  {
    uint64_t v114 = (uint64_t *)(v107 + 8);
    *(void *)unint64_t v106 = *(void *)v107;
    unint64_t v115 = *(void *)(v107 + 16);
    if (v115 >> 60 == 15)
    {
      *(_OWORD *)(v106 + 8) = *(_OWORD *)v114;
    }
    else
    {
      uint64_t v116 = *v114;
      sub_10001EBB0(*v114, *(void *)(v107 + 16));
      *(void *)(v106 + 8) = v116;
      *(void *)(v106 + 16) = v115;
    }
    size_t v112 = v400;
    uint64_t v113 = v354;
    long long v117 = *(_OWORD *)(v107 + 24);
    *(unsigned char *)(v106 + 40) = *(unsigned char *)(v107 + 40);
    *(_OWORD *)(v106 + 24) = v117;
    *(void *)(v106 + 48) = *(void *)(v107 + 48);
  }
  else
  {
    long long v109 = *(_OWORD *)v107;
    long long v110 = *(_OWORD *)(v107 + 16);
    long long v111 = *(_OWORD *)(v107 + 32);
    *(void *)(v106 + 48) = *(void *)(v107 + 48);
    *(_OWORD *)(v106 + 16) = v110;
    *(_OWORD *)(v106 + 32) = v111;
    *(_OWORD *)unint64_t v106 = v109;
    size_t v112 = v400;
    uint64_t v113 = v354;
  }
  uint64_t v118 = (void *)((v106 + 63) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v119 = (void **)((v107 + 63) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v120 = *v119;
  *uint64_t v118 = *v119;
  *(void *)(((unint64_t)v118 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v119 + 15) & 0xFFFFFFFFFFFFFFF8);
  size_t v368 = v381 + 7;
  unint64_t v121 = ((((((((v393 + ((((v381 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v392) + v112 + 34) & 0xFFFFFFFFFFFFFFF8)
           + 63) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + 8;
  *(unsigned char *)(v121 + v68) = *(unsigned char *)(v121 + v69);
  unint64_t v122 = (v121 + v68) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v123 = (v121 + v69) & 0xFFFFFFFFFFFFFFF8;
  *(void *)(v122 + 8) = *(void *)(v123 + 8);
  long long v124 = (_OWORD *)((v122 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v125 = (_OWORD *)((v123 + 23) & 0xFFFFFFFFFFFFFFF8);
  *long long v124 = *v125;
  unint64_t v126 = ((unint64_t)v124 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v127 = ((unint64_t)v125 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v126 = *(void *)v127;
  *(unsigned char *)(v126 + 8) = *(unsigned char *)(v127 + 8);
  *(void *)(((unint64_t)v124 + 39) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v125 + 39) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v128 = v67 + v11;
  unint64_t v375 = v121;
  unint64_t v129 = (((((v121 + (v128 & v402)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v130 = (void *)(((v113 | v378) + v129 + 8) & v380);
  uint64_t v131 = (const void *)(((v355 | v378) + v129 + 8) & v380);
  id v132 = v120;
  swift_bridgeObjectRetain();
  size_t __n = v129 + 8;
  unint64_t v353 = v129;
  if (v369((unint64_t)v131, 1, v370))
  {
    memcpy(v130, v131, v382);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v361 + 16))(v130, v131, v370);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v361 + 56))(v130, 0, 1, v370);
  }
  int v133 = (void *)(((unint64_t)v130 + v374) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v134 = (void *)(((unint64_t)v131 + v374) & 0xFFFFFFFFFFFFFFF8);
  *int v133 = *v134;
  unint64_t v135 = ((unint64_t)v133 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v136 = ((unint64_t)v134 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v135 = *(void *)v136;
  *(unsigned char *)(v135 + 8) = *(unsigned char *)(v136 + 8);
  uint64_t v137 = (char *)((v397 + v135) & v396);
  int v138 = (const void *)((v397 + v136) & v396);
  if (v367 == v394)
  {
    if (!(*(unsigned int (**)(const void *))(v398 + 48))(v138)) {
      goto LABEL_84;
    }
  }
  else
  {
    unint64_t v139 = (void *)(((unint64_t)v138 + v376) & 0xFFFFFFFFFFFFFFF8);
    if (v351 > 0x7FFFFFFE)
    {
      if (!(*(unsigned int (**)(unint64_t, void, uint64_t))(v395 + 48))(((unint64_t)v139 + v371) & v372, v349, v373))
      {
LABEL_84:
        unint64_t v139 = (void *)(((unint64_t)v138 + v376) & 0xFFFFFFFFFFFFFFF8);
LABEL_85:
        (*(void (**)(char *, const void *, uint64_t))(v398 + 16))(v137, v138, v386);
        uint64_t v142 = (void *)((unint64_t)&v137[v376] & 0xFFFFFFFFFFFFFFF8);
        *uint64_t v142 = *v139;
        unint64_t v143 = ((unint64_t)v142 + v371) & v372;
        unint64_t v144 = ((unint64_t)v139 + v371) & v372;
        uint64_t v145 = *(void (**)(unint64_t, unint64_t, uint64_t))(v395 + 16);
        swift_bridgeObjectRetain();
        v145(v143, v144, v373);
        unint64_t v146 = (void *)((v347 + v143) & 0xFFFFFFFFFFFFFFF8);
        unint64_t v147 = (void *)((v347 + v144) & 0xFFFFFFFFFFFFFFF8);
        void *v146 = *v147;
        unint64_t v148 = (void *)(((unint64_t)v146 + 15) & 0xFFFFFFFFFFFFFFF8);
        uint64_t v149 = (void *)(((unint64_t)v147 + 15) & 0xFFFFFFFFFFFFFFF8);
        *unint64_t v148 = *v149;
        v148[1] = v149[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        size_t v141 = v383;
        goto LABEL_86;
      }
    }
    else
    {
      uint64_t v140 = *v139;
      if (*v139 >= 0xFFFFFFFFuLL) {
        LODWORD(v140) = -1;
      }
      if ((v140 + 1) < 2) {
        goto LABEL_85;
      }
    }
  }
  size_t v141 = v383;
  memcpy(v137, v138, v383);
LABEL_86:
  os_log_type_t v150 = (unsigned char *)(((unint64_t)v138 + v141) | 1);
  uint64_t v151 = (unsigned char *)(((unint64_t)v138 + v141) | 2);
  uint64_t v152 = (uint64_t)v138 + v141 + 10;
  uint64_t v154 = (uint64_t)v138 + v141 + 34;
  char v153 = *((unsigned char *)v138 + v141);
  uint64_t v155 = (unsigned char *)((unint64_t)&v137[v141] | 1);
  unint64_t v156 = (unsigned char *)((unint64_t)&v137[v141] | 2);
  uint64_t v157 = (uint64_t)&v137[v141 + 10];
  uint64_t v158 = &v137[v141];
  char *v158 = v153;
  unsigned char *v155 = *v150;
  *unint64_t v156 = *v151;
  unint64_t v159 = v157 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v160 = *(void *)(v152 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v161 = *(void *)((v152 & 0xFFFFFFFFFFFFFFF8) + 8);
  char v162 = *(unsigned char *)((v152 & 0xFFFFFFFFFFFFFFF8) + 16);
  sub_10009C5FC(v160, v161, v162);
  *(void *)unint64_t v159 = v160;
  *(void *)(v159 + 8) = v161;
  *(unsigned char *)(v159 + 16) = v162;
  unint64_t v163 = (unint64_t)(v158 + 34) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v164 = v154 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v165 = *(void *)(v164 + 16) >> 60;
  if (!(4 * (v165 & 3)) || ((v165 >> 2) & 0xFFFFFFF3 | (4 * (v165 & 3))) == 0xF)
  {
    long long v169 = (uint64_t *)(v164 + 8);
    *(void *)unint64_t v163 = *(void *)v164;
    unint64_t v170 = *(void *)(v164 + 16);
    if (v170 >> 60 == 15)
    {
      *(_OWORD *)(v163 + 8) = *(_OWORD *)v169;
    }
    else
    {
      uint64_t v171 = *v169;
      sub_10001EBB0(*v169, *(void *)(v164 + 16));
      *(void *)(v163 + 8) = v171;
      *(void *)(v163 + 16) = v170;
    }
    long long v172 = *(_OWORD *)(v164 + 24);
    *(unsigned char *)(v163 + 40) = *(unsigned char *)(v164 + 40);
    *(_OWORD *)(v163 + 24) = v172;
    *(void *)(v163 + 48) = *(void *)(v164 + 48);
  }
  else
  {
    long long v166 = *(_OWORD *)v164;
    long long v167 = *(_OWORD *)(v164 + 16);
    long long v168 = *(_OWORD *)(v164 + 32);
    *(void *)(v163 + 48) = *(void *)(v164 + 48);
    *(_OWORD *)(v163 + 16) = v167;
    *(_OWORD *)(v163 + 32) = v168;
    *(_OWORD *)unint64_t v163 = v166;
  }
  uint64_t v173 = (void *)((v163 + 63) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v174 = (void **)((v164 + 63) & 0xFFFFFFFFFFFFFFF8);
  id v175 = *v174;
  void *v173 = *v174;
  *(void *)(((unint64_t)v173 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v174 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v176 = (void *)(((unint64_t)v130 + v128) & v402);
  uint64_t v177 = (const void *)(((unint64_t)v131 + v128) & v402);
  id v178 = v175;
  if (v363(v177, 1, v388))
  {
    memcpy(v176, v177, v381);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v377 + 16))(v176, v177, v388);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v377 + 56))(v176, 0, 1, v388);
  }
  unint64_t v179 = (void *)(((unint64_t)v176 + v368) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v180 = (void *)(((unint64_t)v177 + v368) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v179 = *v180;
  unint64_t v181 = ((unint64_t)v179 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v182 = ((unint64_t)v180 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v181 = *(void *)v182;
  *(unsigned char *)(v181 + 8) = *(unsigned char *)(v182 + 8);
  uint64_t v183 = (void *)((v393 + v181) & v392);
  unint64_t v184 = (char *)((v393 + v182) & v392);
  uint64_t v359 = v128;
  if (v362 == v389)
  {
    if (!(*(unsigned int (**)(char *))(v387 + 48))(v184)) {
      goto LABEL_106;
    }
  }
  else
  {
    uint64_t v185 = (void *)((unint64_t)&v184[v384] & 0xFFFFFFFFFFFFFFF8);
    if (v350 > 0x7FFFFFFE)
    {
      if (!(*(unsigned int (**)(unint64_t, void, uint64_t))(v390 + 48))(((unint64_t)v185 + v364) & v365, v348, v366))
      {
LABEL_106:
        uint64_t v185 = (void *)((unint64_t)&v184[v384] & 0xFFFFFFFFFFFFFFF8);
LABEL_107:
        (*(void (**)(void *, char *, uint64_t))(v387 + 16))(v183, v184, v385);
        uint64_t v188 = (void *)(((unint64_t)v183 + v384) & 0xFFFFFFFFFFFFFFF8);
        void *v188 = *v185;
        unint64_t v189 = ((unint64_t)v188 + v364) & v365;
        unint64_t v190 = ((unint64_t)v185 + v364) & v365;
        uint64_t v191 = *(void (**)(unint64_t, unint64_t, uint64_t))(v390 + 16);
        swift_bridgeObjectRetain();
        v191(v189, v190, v366);
        uint64_t v192 = (void *)((v358 + v189) & 0xFFFFFFFFFFFFFFF8);
        uint64_t v193 = (void *)((v358 + v190) & 0xFFFFFFFFFFFFFFF8);
        *uint64_t v192 = *v193;
        uint64_t v194 = (void *)(((unint64_t)v192 + 15) & 0xFFFFFFFFFFFFFFF8);
        uint64_t v195 = (void *)(((unint64_t)v193 + 15) & 0xFFFFFFFFFFFFFFF8);
        *uint64_t v194 = *v195;
        v194[1] = v195[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        size_t v187 = v400;
        goto LABEL_108;
      }
    }
    else
    {
      uint64_t v186 = *v185;
      if (*v185 >= 0xFFFFFFFFuLL) {
        LODWORD(v186) = -1;
      }
      if ((v186 + 1) < 2) {
        goto LABEL_107;
      }
    }
  }
  size_t v187 = v400;
  memcpy(v183, v184, v400);
LABEL_108:
  char v196 = (unsigned char *)((unint64_t)&v184[v187] | 1);
  uint64_t v197 = (unsigned char *)((unint64_t)&v184[v187] | 2);
  uint64_t v198 = (uint64_t)&v184[v187 + 10];
  uint64_t v199 = &v184[v187];
  *((unsigned char *)v183 + v187) = *v199;
  uint64_t v200 = (uint64_t)v183 + v187 + 34;
  *(unsigned char *)(((unint64_t)v183 + v187) | 1) = *v196;
  *(unsigned char *)(((unint64_t)v183 + v187) | 2) = *v197;
  unint64_t v201 = ((unint64_t)v183 + v187 + 10) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v202 = *(void *)(v198 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v203 = *(void *)((v198 & 0xFFFFFFFFFFFFFFF8) + 8);
  char v204 = *(unsigned char *)((v198 & 0xFFFFFFFFFFFFFFF8) + 16);
  sub_10009C5FC(v202, v203, v204);
  *(void *)unint64_t v201 = v202;
  *(void *)(v201 + 8) = v203;
  *(unsigned char *)(v201 + 16) = v204;
  unint64_t v205 = v200 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v206 = (unint64_t)(v199 + 34) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v207 = *(void *)(v206 + 16) >> 60;
  if (!(4 * (v207 & 3)) || ((v207 >> 2) & 0xFFFFFFF3 | (4 * (v207 & 3))) == 0xF)
  {
    uint64_t v212 = (uint64_t *)(v206 + 8);
    *(void *)unint64_t v205 = *(void *)v206;
    unint64_t v213 = *(void *)(v206 + 16);
    if (v213 >> 60 == 15)
    {
      *(_OWORD *)(v205 + 8) = *(_OWORD *)v212;
    }
    else
    {
      uint64_t v214 = *v212;
      sub_10001EBB0(*v212, *(void *)(v206 + 16));
      *(void *)(v205 + 8) = v214;
      *(void *)(v205 + 16) = v213;
    }
    uint64_t v208 = v130;
    long long v215 = *(_OWORD *)(v206 + 24);
    *(unsigned char *)(v205 + 40) = *(unsigned char *)(v206 + 40);
    *(_OWORD *)(v205 + 24) = v215;
    *(void *)(v205 + 48) = *(void *)(v206 + 48);
  }
  else
  {
    uint64_t v208 = v130;
    long long v209 = *(_OWORD *)v206;
    long long v210 = *(_OWORD *)(v206 + 16);
    long long v211 = *(_OWORD *)(v206 + 32);
    *(void *)(v205 + 48) = *(void *)(v206 + 48);
    *(_OWORD *)(v205 + 16) = v210;
    *(_OWORD *)(v205 + 32) = v211;
    *(_OWORD *)unint64_t v205 = v209;
  }
  unint64_t v216 = (void *)((v205 + 63) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v217 = (void **)((v206 + 63) & 0xFFFFFFFFFFFFFFF8);
  long long v218 = *v217;
  *unint64_t v216 = *v217;
  *(void *)(((unint64_t)v216 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v217 + 15) & 0xFFFFFFFFFFFFFFF8);
  *((unsigned char *)v176 + v375) = *((unsigned char *)v177 + v375);
  unint64_t v219 = ((unint64_t)v176 + v375) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v220 = ((unint64_t)v177 + v375) & 0xFFFFFFFFFFFFFFF8;
  *(void *)(v219 + 8) = *(void *)(v220 + 8);
  uint64_t v221 = (_OWORD *)((v219 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v222 = (_OWORD *)((v220 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v221 = *v222;
  unint64_t v223 = ((unint64_t)v221 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v224 = ((unint64_t)v222 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v223 = *(void *)v224;
  *(unsigned char *)(v223 + 8) = *(unsigned char *)(v224 + 8);
  *(void *)(((unint64_t)v221 + 39) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v222 + 39) & 0xFFFFFFFFFFFFFFF8);
  int v225 = (_OWORD *)(((unint64_t)v208 + v353 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v226 = (_OWORD *)(((unint64_t)v131 + v353 + 15) & 0xFFFFFFFFFFFFFFF8);
  *int v225 = *v226;
  unint64_t v227 = ((unint64_t)v225 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v228 = ((unint64_t)v226 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v229 = *(void *)v228;
  *(unsigned char *)(v227 + 8) = *(unsigned char *)(v228 + 8);
  *(void *)unint64_t v227 = v229;
  uint64_t v379 = (void *)((v356 + v227) & v380);
  unint64_t v230 = (const void *)((v356 + v228) & v380);
  if (v357) {
    unsigned int v231 = v357 - 1;
  }
  else {
    unsigned int v231 = 0;
  }
  if (v231 <= v394 - 1) {
    unsigned int v232 = v394 - 1;
  }
  else {
    unsigned int v232 = v231;
  }
  if (v232 <= 0x7FFFFFFE) {
    unsigned int v233 = 2147483646;
  }
  else {
    unsigned int v233 = v232;
  }
  if (v360) {
    unsigned int v234 = v360 - 1;
  }
  else {
    unsigned int v234 = 0;
  }
  if (v234 <= v389 - 1) {
    unsigned int v235 = v389 - 1;
  }
  else {
    unsigned int v235 = v234;
  }
  if (v235 <= 0x7FFFFFFE) {
    unsigned int v236 = 2147483646;
  }
  else {
    unsigned int v236 = v235;
  }
  if (v236 <= v233) {
    unsigned int v237 = v233;
  }
  else {
    unsigned int v237 = v236;
  }
  if (v237 <= 0x7FFFFFFF) {
    int v238 = 0x7FFFFFFF;
  }
  else {
    int v238 = v237;
  }
  id v239 = v218;
  swift_bridgeObjectRetain();
  if (v233 != v238)
  {
    unint64_t v244 = ((unint64_t)v230 + v359) & v402;
    if (v236 != v238)
    {
      uint64_t v240 = v352;
      uint64_t v241 = v398;
      uint64_t v242 = v379;
      if (*(void *)(((v244 + v375) & 0xFFFFFFFFFFFFFFF8) + 8) < 0xFFFFFFFFuLL) {
        goto LABEL_227;
      }
      goto LABEL_181;
    }
    if (v234 == v236)
    {
      uint64_t v240 = v352;
      uint64_t v241 = v398;
      uint64_t v242 = v379;
      if (v360 < 2) {
        goto LABEL_181;
      }
      unsigned int v243 = v363((const void *)v244, v360, v388);
      goto LABEL_147;
    }
    unint64_t v247 = (v393 + ((((v368 + v244) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v392;
    if (v389 - 1 == v236)
    {
      if (v362 != v389)
      {
        uint64_t v253 = (unint64_t *)((v384 + v247) & 0xFFFFFFFFFFFFFFF8);
        uint64_t v240 = v352;
        uint64_t v241 = v398;
        uint64_t v242 = v379;
        if (v350 > 0x7FFFFFFE)
        {
          if ((*(unsigned int (**)(unint64_t, void, uint64_t))(v390 + 48))(((unint64_t)v253 + v364) & v365, v348, v366) < 2)goto LABEL_181; {
LABEL_227:
          }
          memcpy(v242, v230, __n);
          return v240;
        }
        unint64_t v254 = *v253;
        if (v254 >= 0xFFFFFFFF) {
          unsigned int v246 = -1;
        }
        else {
          unsigned int v246 = v254;
        }
        if (v246 + 1 < 2) {
          goto LABEL_181;
        }
LABEL_180:
        if (v246 < 2) {
          goto LABEL_181;
        }
        goto LABEL_227;
      }
      unsigned int v246 = (*(uint64_t (**)(unint64_t))(v387 + 48))(v247);
      uint64_t v240 = v352;
      uint64_t v241 = v398;
LABEL_179:
      uint64_t v242 = v379;
      goto LABEL_180;
    }
    unint64_t v252 = *(void *)((((v344 + v247 + 26) & 0xFFFFFFFFFFFFFFF8) + 87) & 0xFFFFFFFFFFFFFFF8);
    if (v252 >= 0xFFFFFFFF) {
      LODWORD(v252) = -1;
    }
    BOOL v249 = (v252 + 1) >= 2;
    uint64_t v240 = v352;
    uint64_t v241 = v398;
LABEL_169:
    uint64_t v242 = v379;
    if (v249) {
      goto LABEL_227;
    }
    goto LABEL_181;
  }
  uint64_t v240 = v352;
  uint64_t v241 = v398;
  if (v231 != v233)
  {
    unint64_t v245 = (v397 + (((((unint64_t)v230 + v374) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v396;
    if (v394 - 1 == v233)
    {
      if (v367 == v394)
      {
        unsigned int v246 = (*(uint64_t (**)(unint64_t))(v398 + 48))(v245);
      }
      else
      {
        uint64_t v250 = (unint64_t *)((v376 + v245) & 0xFFFFFFFFFFFFFFF8);
        if (v351 <= 0x7FFFFFFE)
        {
          unint64_t v251 = *v250;
          if (v251 >= 0xFFFFFFFF) {
            unsigned int v246 = -1;
          }
          else {
            unsigned int v246 = v251;
          }
          uint64_t v242 = v379;
          if (v246 + 1 < 2) {
            goto LABEL_181;
          }
          goto LABEL_180;
        }
        unsigned int v246 = (*(uint64_t (**)(unint64_t))(v395 + 48))(((unint64_t)v250 + v371) & v372);
      }
      goto LABEL_179;
    }
    unint64_t v248 = *(void *)((((v345 + v245 + 26) & 0xFFFFFFFFFFFFFFF8) + 87) & 0xFFFFFFFFFFFFFFF8);
    if (v248 >= 0xFFFFFFFF) {
      LODWORD(v248) = -1;
    }
    BOOL v249 = (v248 + 1) >= 2;
    goto LABEL_169;
  }
  uint64_t v242 = v379;
  if (v357 < 2) {
    goto LABEL_181;
  }
  unsigned int v243 = v369((unint64_t)v230, v357, v370);
LABEL_147:
  if (v243 >= 2) {
    goto LABEL_227;
  }
LABEL_181:
  if (v369((unint64_t)v230, 1, v370))
  {
    memcpy(v242, v230, v382);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v361 + 16))(v242, v230, v370);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v361 + 56))(v242, 0, 1, v370);
  }
  unint64_t v255 = (void *)(((unint64_t)v242 + v374) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v256 = v230;
  uint64_t v257 = (void *)(((unint64_t)v230 + v374) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v255 = *v257;
  unint64_t v258 = ((unint64_t)v255 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v259 = ((unint64_t)v257 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v258 = *(void *)v259;
  *(unsigned char *)(v258 + 8) = *(unsigned char *)(v259 + 8);
  uint64_t v260 = (void *)((v397 + v258) & v396);
  uint64_t v261 = (char *)((v397 + v259) & v396);
  if (v367 == v394)
  {
    if (!(*(unsigned int (**)(char *))(v241 + 48))(v261)) {
      goto LABEL_194;
    }
  }
  else
  {
    uint64_t v262 = (void *)((unint64_t)&v261[v376] & 0xFFFFFFFFFFFFFFF8);
    if (v351 > 0x7FFFFFFE)
    {
      if (!(*(unsigned int (**)(unint64_t, void, uint64_t))(v395 + 48))(((unint64_t)v262 + v371) & v372, v349, v373))
      {
LABEL_194:
        uint64_t v262 = (void *)((unint64_t)&v261[v376] & 0xFFFFFFFFFFFFFFF8);
LABEL_195:
        (*(void (**)(void *, char *, uint64_t))(v241 + 16))(v260, v261, v386);
        uint64_t v265 = (void *)(((unint64_t)v260 + v376) & 0xFFFFFFFFFFFFFFF8);
        *uint64_t v265 = *v262;
        unint64_t v266 = ((unint64_t)v265 + v371) & v372;
        unint64_t v267 = ((unint64_t)v262 + v371) & v372;
        unint64_t v268 = *(void (**)(unint64_t, unint64_t, uint64_t))(v395 + 16);
        swift_bridgeObjectRetain();
        v268(v266, v267, v373);
        unint64_t v269 = (void *)((v347 + v266) & 0xFFFFFFFFFFFFFFF8);
        uint64_t v270 = (void *)((v347 + v267) & 0xFFFFFFFFFFFFFFF8);
        *unint64_t v269 = *v270;
        long long v271 = (void *)(((unint64_t)v269 + 15) & 0xFFFFFFFFFFFFFFF8);
        long long v272 = (void *)(((unint64_t)v270 + 15) & 0xFFFFFFFFFFFFFFF8);
        *long long v271 = *v272;
        v271[1] = v272[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        size_t v264 = v383;
        goto LABEL_196;
      }
    }
    else
    {
      uint64_t v263 = *v262;
      if (*v262 >= 0xFFFFFFFFuLL) {
        LODWORD(v263) = -1;
      }
      if ((v263 + 1) < 2) {
        goto LABEL_195;
      }
    }
  }
  size_t v264 = v383;
  memcpy(v260, v261, v383);
LABEL_196:
  long long v273 = (unsigned char *)((unint64_t)&v261[v264] | 1);
  uint64_t v274 = (unsigned char *)((unint64_t)&v261[v264] | 2);
  uint64_t v275 = (uint64_t)&v261[v264 + 10];
  uint64_t v276 = &v261[v264];
  *((unsigned char *)v260 + v264) = *v276;
  uint64_t v277 = (uint64_t)v260 + v264 + 34;
  *(unsigned char *)(((unint64_t)v260 + v264) | 1) = *v273;
  *(unsigned char *)(((unint64_t)v260 + v264) | 2) = *v274;
  unint64_t v278 = ((unint64_t)v260 + v264 + 10) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v279 = *(void *)(v275 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v280 = *(void *)((v275 & 0xFFFFFFFFFFFFFFF8) + 8);
  char v281 = *(unsigned char *)((v275 & 0xFFFFFFFFFFFFFFF8) + 16);
  sub_10009C5FC(v279, v280, v281);
  *(void *)unint64_t v278 = v279;
  *(void *)(v278 + 8) = v280;
  *(unsigned char *)(v278 + 16) = v281;
  unint64_t v282 = v277 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v283 = (unint64_t)(v276 + 34) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v284 = *(void *)(v283 + 16) >> 60;
  if (!(4 * (v284 & 3)) || ((v284 >> 2) & 0xFFFFFFF3 | (4 * (v284 & 3))) == 0xF)
  {
    uint64_t v290 = (uint64_t *)(v283 + 8);
    *(void *)unint64_t v282 = *(void *)v283;
    unint64_t v291 = *(void *)(v283 + 16);
    uint64_t v288 = v377;
    uint64_t v289 = v384;
    if (v291 >> 60 == 15)
    {
      *(_OWORD *)(v282 + 8) = *(_OWORD *)v290;
    }
    else
    {
      uint64_t v292 = *v290;
      sub_10001EBB0(*v290, *(void *)(v283 + 16));
      *(void *)(v282 + 8) = v292;
      *(void *)(v282 + 16) = v291;
    }
    long long v293 = *(_OWORD *)(v283 + 24);
    *(unsigned char *)(v282 + 40) = *(unsigned char *)(v283 + 40);
    *(_OWORD *)(v282 + 24) = v293;
    *(void *)(v282 + 48) = *(void *)(v283 + 48);
  }
  else
  {
    long long v285 = *(_OWORD *)v283;
    long long v286 = *(_OWORD *)(v283 + 16);
    long long v287 = *(_OWORD *)(v283 + 32);
    *(void *)(v282 + 48) = *(void *)(v283 + 48);
    *(_OWORD *)(v282 + 16) = v286;
    *(_OWORD *)(v282 + 32) = v287;
    *(_OWORD *)unint64_t v282 = v285;
    uint64_t v288 = v377;
    uint64_t v289 = v384;
  }
  unint64_t v294 = (void *)((v282 + 63) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v295 = (void **)((v283 + 63) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v296 = *v295;
  *unint64_t v294 = *v295;
  *(void *)(((unint64_t)v294 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v295 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v297 = (void *)(((unint64_t)v242 + v359) & v402);
  uint64_t v298 = (const void *)(((unint64_t)v256 + v359) & v402);
  id v299 = v296;
  if (v363(v298, 1, v388))
  {
    memcpy(v297, v298, v381);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v288 + 16))(v297, v298, v388);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v288 + 56))(v297, 0, 1, v388);
  }
  uint64_t v300 = (void *)(((unint64_t)v297 + v368) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v301 = (void *)(((unint64_t)v298 + v368) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v300 = *v301;
  unint64_t v302 = ((unint64_t)v300 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v303 = ((unint64_t)v301 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v302 = *(void *)v303;
  *(unsigned char *)(v302 + 8) = *(unsigned char *)(v303 + 8);
  unint64_t v304 = (void *)((v393 + v302) & v392);
  uint64_t v305 = (const void *)((v393 + v303) & v392);
  if (v362 == v389)
  {
    if (!(*(unsigned int (**)(const void *))(v387 + 48))(v305)) {
      goto LABEL_216;
    }
LABEL_215:
    memcpy(v304, v305, v400);
    goto LABEL_218;
  }
  uint64_t v306 = (uint64_t *)(((unint64_t)v305 + v289) & 0xFFFFFFFFFFFFFFF8);
  if (v350 <= 0x7FFFFFFE)
  {
    uint64_t v307 = *v306;
    if ((unint64_t)*v306 >= 0xFFFFFFFF) {
      LODWORD(v307) = -1;
    }
    if ((v307 + 1) < 2) {
      goto LABEL_217;
    }
    goto LABEL_215;
  }
  if ((*(unsigned int (**)(unint64_t, void, uint64_t))(v390 + 48))(((unint64_t)v306 + v364) & v365, v348, v366))
  {
    goto LABEL_215;
  }
LABEL_216:
  uint64_t v306 = (uint64_t *)(((unint64_t)v305 + v289) & 0xFFFFFFFFFFFFFFF8);
LABEL_217:
  (*(void (**)(void *, const void *, uint64_t))(v387 + 16))(v304, v305, v385);
  unint64_t v308 = (void *)(((unint64_t)v304 + v289) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v308 = *v306;
  unint64_t v309 = ((unint64_t)v308 + v364) & v365;
  unint64_t v310 = ((unint64_t)v306 + v364) & v365;
  long long v311 = *(void (**)(unint64_t, unint64_t, uint64_t))(v390 + 16);
  swift_bridgeObjectRetain();
  v311(v309, v310, v366);
  long long v312 = (void *)((v358 + v309) & 0xFFFFFFFFFFFFFFF8);
  long long v313 = (void *)((v358 + v310) & 0xFFFFFFFFFFFFFFF8);
  *long long v312 = *v313;
  uint64_t v314 = (void *)(((unint64_t)v312 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v315 = (void *)(((unint64_t)v313 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v314 = *v315;
  v314[1] = v315[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
LABEL_218:
  uint64_t v316 = (uint64_t)v305 + v400 + 10;
  uint64_t v317 = (uint64_t)v305 + v400 + 34;
  *((unsigned char *)v304 + v400) = *((unsigned char *)v305 + v400);
  uint64_t v318 = (uint64_t)v304 + v400 + 34;
  *(unsigned char *)(((unint64_t)v304 + v400) | 1) = *(unsigned char *)(((unint64_t)v305 + v400) | 1);
  *(unsigned char *)(((unint64_t)v304 + v400) | 2) = *(unsigned char *)(((unint64_t)v305 + v400) | 2);
  unint64_t v319 = ((unint64_t)v304 + v400 + 10) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v320 = *(void *)(v316 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v321 = *(void *)((v316 & 0xFFFFFFFFFFFFFFF8) + 8);
  char v322 = *(unsigned char *)((v316 & 0xFFFFFFFFFFFFFFF8) + 16);
  sub_10009C5FC(v320, v321, v322);
  *(void *)unint64_t v319 = v320;
  *(void *)(v319 + 8) = v321;
  *(unsigned char *)(v319 + 16) = v322;
  unint64_t v323 = v318 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v324 = v317 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v325 = *(void *)(v324 + 16) >> 60;
  if (!(4 * (v325 & 3)) || ((v325 >> 2) & 0xFFFFFFF3 | (4 * (v325 & 3))) == 0xF)
  {
    unint64_t v329 = (uint64_t *)(v324 + 8);
    *(void *)unint64_t v323 = *(void *)v324;
    unint64_t v330 = *(void *)(v324 + 16);
    if (v330 >> 60 == 15)
    {
      *(_OWORD *)(v323 + 8) = *(_OWORD *)v329;
    }
    else
    {
      uint64_t v331 = *v329;
      sub_10001EBB0(*v329, *(void *)(v324 + 16));
      *(void *)(v323 + 8) = v331;
      *(void *)(v323 + 16) = v330;
    }
    long long v332 = *(_OWORD *)(v324 + 24);
    *(unsigned char *)(v323 + 40) = *(unsigned char *)(v324 + 40);
    *(_OWORD *)(v323 + 24) = v332;
    *(void *)(v323 + 48) = *(void *)(v324 + 48);
  }
  else
  {
    long long v326 = *(_OWORD *)v324;
    long long v327 = *(_OWORD *)(v324 + 16);
    long long v328 = *(_OWORD *)(v324 + 32);
    *(void *)(v323 + 48) = *(void *)(v324 + 48);
    *(_OWORD *)(v323 + 16) = v327;
    *(_OWORD *)(v323 + 32) = v328;
    *(_OWORD *)unint64_t v323 = v326;
  }
  int v333 = (void *)((v323 + 63) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v334 = (void **)((v324 + 63) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v335 = *v334;
  void *v333 = *v334;
  *(void *)(((unint64_t)v333 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v334 + 15) & 0xFFFFFFFFFFFFFFF8);
  *((unsigned char *)v297 + v375) = *((unsigned char *)v298 + v375);
  unint64_t v336 = ((unint64_t)v297 + v375) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v337 = ((unint64_t)v298 + v375) & 0xFFFFFFFFFFFFFFF8;
  *(void *)(v336 + 8) = *(void *)(v337 + 8);
  unsigned int v338 = (_OWORD *)((v336 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v339 = (_OWORD *)((v337 + 23) & 0xFFFFFFFFFFFFFFF8);
  *unsigned int v338 = *v339;
  unint64_t v340 = ((unint64_t)v338 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v341 = ((unint64_t)v339 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v340 = *(void *)v341;
  *(unsigned char *)(v340 + 8) = *(unsigned char *)(v341 + 8);
  *(void *)(((unint64_t)v338 + 39) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v339 + 39) & 0xFFFFFFFFFFFFFFF8);
  id v342 = v335;
  swift_bridgeObjectRetain();
  return v240;
}

uint64_t sub_100116590(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  int v6 = *(_DWORD *)(v5 + 80) & 0xF8;
  uint64_t v720 = swift_getAssociatedTypeWitness();
  uint64_t v728 = *(void *)(v720 - 8);
  int v7 = *(_DWORD *)(v728 + 80) & 0xF8;
  uint64_t v706 = swift_getAssociatedTypeWitness();
  uint64_t v726 = *(void *)(v706 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v726 + 80);
  uint64_t v729 = v7 | v8 | 7;
  int v9 = v7 | v8 | v6;
  uint64_t v724 = swift_getAssociatedTypeWitness();
  uint64_t v695 = *(void *)(v724 - 8);
  int v10 = *(_DWORD *)(v695 + 80) & 0xF8;
  uint64_t v719 = swift_getAssociatedTypeWitness();
  uint64_t v721 = *(void *)(v719 - 8);
  int v11 = *(_DWORD *)(v721 + 80) & 0xF8;
  uint64_t v703 = swift_getAssociatedTypeWitness();
  uint64_t v725 = *(void *)(v703 - 8);
  uint64_t v714 = *(unsigned __int8 *)(v725 + 80);
  uint64_t v707 = v11 | v714 | 7;
  uint64_t v711 = v707 | v10;
  uint64_t v12 = v9 | v711;
  uint64_t v670 = a1;
  uint64_t v671 = v12 + 9;
  uint64_t v13 = v12 + 9 + a1;
  unint64_t v14 = v13 & ~v12;
  uint64_t v15 = (uint64_t)a2 + v12 + 9;
  uint64_t v690 = v12;
  unint64_t v16 = v15 & ~v12;
  unsigned int v17 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 48);
  int v18 = v17(v14, 1, AssociatedTypeWitness);
  v697 = (uint64_t (*)(void *, uint64_t, uint64_t))v17;
  int v19 = v17(v16, 1, AssociatedTypeWitness);
  uint64_t v683 = v15;
  uint64_t v677 = v13;
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16))(v14, v16, AssociatedTypeWitness);
      (*(void (**)(unint64_t, void, uint64_t, uint64_t))(v5 + 56))(v14, 0, 1, AssociatedTypeWitness);
      goto LABEL_12;
    }
    int v20 = *(_DWORD *)(v5 + 84);
    size_t v21 = *(void *)(v5 + 64);
  }
  else
  {
    if (!v19)
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 24))(v14, v16, AssociatedTypeWitness);
      goto LABEL_12;
    }
    (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v14, AssociatedTypeWitness);
    int v20 = *(_DWORD *)(v5 + 84);
    size_t v21 = *(void *)(v5 + 64);
  }
  if (v20) {
    size_t v22 = v21;
  }
  else {
    size_t v22 = v21 + 1;
  }
  memcpy((void *)v14, (const void *)v16, v22);
LABEL_12:
  unsigned int v682 = *(_DWORD *)(v5 + 84);
  if (v682) {
    uint64_t v23 = *(void *)(v5 + 64);
  }
  else {
    uint64_t v23 = *(void *)(v5 + 64) + 1;
  }
  unint64_t v716 = v16;
  size_t __n = v23;
  unint64_t v24 = (void *)(((v16 | 7) + v23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v25 = (void *)(((v14 | 7) + v23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v25 = *v24;
  unint64_t v26 = ((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v27 = ((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v26 = *(void *)v27;
  *(unsigned char *)(v26 + 8) = *(unsigned char *)(v27 + 8);
  uint64_t v28 = v729;
  unsigned int v29 = (void *)((v28 + 9 + v26) & ~v28);
  uint64_t v723 = v729 + 9;
  int v30 = (void *)((v28 + 9 + v27) & ~v28);
  uint64_t v31 = *(unsigned int *)(v728 + 84);
  unsigned int v668 = *(_DWORD *)(v726 + 84);
  if (v31 <= v668) {
    unsigned int v32 = *(_DWORD *)(v726 + 84);
  }
  else {
    unsigned int v32 = *(_DWORD *)(v728 + 84);
  }
  if (v32 <= 0x7FFFFFFE) {
    int v33 = 2147483646;
  }
  else {
    int v33 = v32;
  }
  uint64_t v34 = *(void *)(v728 + 64) + 7;
  uint64_t v705 = ~v8;
  uint64_t v704 = v8 + 8;
  uint64_t v685 = *(void *)(v726 + 64) + 7;
  unint64_t v666 = (((v685 + ((v8 + 8 + (v34 & 0xFFFFFFFFFFFFFFF8)) & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  size_t v35 = v666 + 16;
  int v718 = v33;
  size_t v727 = v666 + 16;
  uint64_t v713 = v34;
  unsigned int v689 = *(_DWORD *)(v728 + 84);
  unsigned int v680 = v32;
  uint64_t v679 = v5;
  if (v31 == v33)
  {
    uint64_t v36 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v728 + 48);
    int v37 = v36(v29, v31, v720);
    int v38 = v36(v30, v31, v720);
    if (v37) {
      goto LABEL_23;
    }
LABEL_34:
    unint64_t v39 = (uint64_t *)(((unint64_t)v29 + v713) & 0xFFFFFFFFFFFFFFF8);
    if (v38) {
      goto LABEL_35;
    }
    uint64_t v40 = (uint64_t *)(((unint64_t)v30 + v713) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_40;
  }
  unint64_t v39 = (uint64_t *)(((unint64_t)v29 + v34) & 0xFFFFFFFFFFFFFFF8);
  if (v32 > 0x7FFFFFFE)
  {
    unint64_t v45 = ((unint64_t)v39 + v704) & v705;
    uint64_t v46 = *(uint64_t (**)(unint64_t, void, uint64_t))(v726 + 48);
    int v47 = v46(v45, v668, v706);
    uint64_t v48 = v34;
    int v49 = v47;
    size_t v35 = v666 + 16;
    int v38 = v46((v704 + (((unint64_t)v30 + v48) & 0xFFFFFFFFFFFFFFF8)) & v705, v668, v706);
    if (v49)
    {
LABEL_23:
      if (!v38)
      {
        unint64_t v39 = (uint64_t *)(((unint64_t)v29 + v713) & 0xFFFFFFFFFFFFFFF8);
        uint64_t v40 = (uint64_t *)(((unint64_t)v30 + v713) & 0xFFFFFFFFFFFFFFF8);
LABEL_37:
        (*(void (**)(void *, void *, uint64_t))(v728 + 16))(v29, v30, v720);
        *unint64_t v39 = *v40;
        unint64_t v50 = ((unint64_t)v39 + v704) & v705;
        unint64_t v51 = ((unint64_t)v40 + v704) & v705;
        unint64_t v52 = *(void (**)(unint64_t, unint64_t, uint64_t))(v726 + 16);
        swift_bridgeObjectRetain();
        v52(v50, v51, v706);
        unint64_t v53 = (void *)((v685 + v50) & 0xFFFFFFFFFFFFFFF8);
        uint64_t v54 = (void *)((v685 + v51) & 0xFFFFFFFFFFFFFFF8);
        *unint64_t v53 = *v54;
        BOOL v55 = (void *)(((unint64_t)v53 + 15) & 0xFFFFFFFFFFFFFFF8);
        uint64_t v56 = (void *)(((unint64_t)v54 + 15) & 0xFFFFFFFFFFFFFFF8);
        void *v55 = *v56;
        v55[1] = v56[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_41;
      }
      goto LABEL_38;
    }
    goto LABEL_34;
  }
  uint64_t v41 = *v39;
  if ((unint64_t)*v39 >= 0xFFFFFFFF) {
    LODWORD(v41) = -1;
  }
  unsigned int v42 = v41 + 1;
  uint64_t v40 = (uint64_t *)(((unint64_t)v30 + v34) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v43 = *v40;
  if ((unint64_t)*v40 >= 0xFFFFFFFF) {
    LODWORD(v43) = -1;
  }
  unsigned int v44 = v43 + 1;
  if (v42 >= 2)
  {
    if (v44 < 2) {
      goto LABEL_37;
    }
    goto LABEL_38;
  }
  if (v44 >= 2)
  {
LABEL_35:
    (*(void (**)(void *, uint64_t))(v728 + 8))(v29, v720);
    swift_bridgeObjectRelease();
    (*(void (**)(unint64_t, uint64_t))(v726 + 8))(((unint64_t)v39 + v704) & v705, v706);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_38:
    memcpy(v29, v30, v35);
    goto LABEL_41;
  }
LABEL_40:
  (*(void (**)(void *, void *, uint64_t))(v728 + 24))(v29, v30, v720);
  *unint64_t v39 = *v40;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v57 = ((unint64_t)v39 + v704) & v705;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v726 + 24))(v57, ((unint64_t)v40 + v704) & v705, v706);
  long long v58 = (void *)((v685 + v57) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v59 = (v685 + (((unint64_t)v40 + v704) & v705)) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v60 = *(void *)v59;
  v59 += 15;
  void *v58 = v60;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v61 = (void *)(((unint64_t)v58 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v61 = *(void *)(v59 & 0xFFFFFFFFFFFFFFF8);
  v61[1] = *(void *)((v59 & 0xFFFFFFFFFFFFFFF8) + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_41:
  uint64_t v62 = (uint64_t)v30 + v35 + 34;
  *((unsigned char *)v29 + v35) = *((unsigned char *)v30 + v35);
  uint64_t v63 = (uint64_t)v29 + v35 + 34;
  *(unsigned char *)(((unint64_t)v29 + v35) | 1) = *(unsigned char *)(((unint64_t)v30 + v35) | 1);
  uint64_t v722 = ~v729;
  *(unsigned char *)(((unint64_t)v29 + v35) | 2) = *(unsigned char *)(((unint64_t)v30 + v35) | 2);
  unint64_t v64 = ((unint64_t)v29 + v35 + 10) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v65 = ((unint64_t)v30 + v35 + 10) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v66 = *(void *)v65;
  uint64_t v67 = *(void *)(v65 + 8);
  char v68 = *(unsigned char *)(v65 + 16);
  sub_10009C5FC(*(void *)v65, v67, v68);
  uint64_t v69 = *(void *)v64;
  uint64_t v70 = *(void *)(v64 + 8);
  *(void *)unint64_t v64 = v66;
  *(void *)(v64 + 8) = v67;
  char v71 = *(unsigned char *)(v64 + 16);
  *(unsigned char *)(v64 + 16) = v68;
  sub_1000D31F8(v69, v70, v71);
  unint64_t v72 = v63 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v73 = v62 & 0xFFFFFFFFFFFFFFF8;
  size_t v74 = (uint64_t *)(v72 + 8);
  unint64_t v75 = *(void *)(v72 + 16);
  size_t v76 = (uint64_t *)((v62 & 0xFFFFFFFFFFFFFFF8) + 8);
  uint64_t v77 = *(void *)(v73 + 16) >> 60;
  BOOL v81 = ((4 * v77) & 0xC) == 0;
  int v78 = (4 * v77) & 0xC | (v77 >> 2);
  int v79 = v81;
  if (v78 == 15) {
    int v80 = 1;
  }
  else {
    int v80 = v79;
  }
  if (4 * ((v75 >> 60) & 3)) {
    BOOL v81 = (((v75 >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((v75 >> 60) & 3))) == 15;
  }
  else {
    BOOL v81 = 1;
  }
  if (!v81)
  {
    if (v80)
    {
      *(void *)unint64_t v72 = *(void *)v73;
      unint64_t v85 = *(void *)(v73 + 16);
      if (v85 >> 60 == 15)
      {
        *(_OWORD *)size_t v74 = *(_OWORD *)v76;
      }
      else
      {
        uint64_t v90 = *v76;
        sub_10001EBB0(*v76, *(void *)(v73 + 16));
        *(void *)(v72 + 8) = v90;
        *(void *)(v72 + 16) = v85;
      }
      uint64_t v83 = v695;
      goto LABEL_68;
    }
LABEL_62:
    long long v86 = *(_OWORD *)v73;
    long long v87 = *(_OWORD *)(v73 + 16);
    long long v88 = *(_OWORD *)(v73 + 32);
    *(void *)(v72 + 48) = *(void *)(v73 + 48);
    *(_OWORD *)(v72 + 16) = v87;
    *(_OWORD *)(v72 + 32) = v88;
    *(_OWORD *)unint64_t v72 = v86;
    uint64_t v83 = v695;
    uint64_t v89 = v714;
    goto LABEL_69;
  }
  if (!v80)
  {
    if (v75 >> 60 != 15) {
      sub_10001E9C0(*v74, v75);
    }
    goto LABEL_62;
  }
  *(void *)unint64_t v72 = *(void *)v73;
  unint64_t v82 = *(void *)(v73 + 16);
  if (v75 >> 60 != 15)
  {
    uint64_t v83 = v695;
    if (v82 >> 60 != 15)
    {
      uint64_t v91 = *v76;
      sub_10001EBB0(*v76, *(void *)(v73 + 16));
      uint64_t v92 = *(void *)(v72 + 8);
      unint64_t v93 = *(void *)(v72 + 16);
      *(void *)(v72 + 8) = v91;
      *(void *)(v72 + 16) = v82;
      sub_10001E9C0(v92, v93);
      goto LABEL_68;
    }
    sub_10011A770(v72 + 8);
    goto LABEL_65;
  }
  uint64_t v83 = v695;
  if (v82 >> 60 == 15)
  {
LABEL_65:
    *(_OWORD *)size_t v74 = *(_OWORD *)v76;
    goto LABEL_68;
  }
  uint64_t v84 = *v76;
  sub_10001EBB0(*v76, *(void *)(v73 + 16));
  *(void *)(v72 + 8) = v84;
  *(void *)(v72 + 16) = v82;
LABEL_68:
  uint64_t v89 = v714;
  long long v94 = *(_OWORD *)(v73 + 24);
  *(unsigned char *)(v72 + 40) = *(unsigned char *)(v73 + 40);
  *(_OWORD *)(v72 + 24) = v94;
  *(void *)(v72 + 48) = *(void *)(v73 + 48);
LABEL_69:
  unsigned int v95 = (void **)((v72 + 63) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v96 = (void **)((v73 + 63) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v97 = *v96;
  uint64_t v98 = *v95;
  *unsigned int v95 = *v96;
  id v99 = v97;

  *(void *)(((unint64_t)v95 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v96 + 15) & 0xFFFFFFFFFFFFFFF8);
  size_t v700 = __n + 7;
  unint64_t v100 = ((((((((v723 + ((((__n + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v722) + v727 + 34) & 0xFFFFFFFFFFFFFFF8)
           + 63) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + 8;
  unint64_t v101 = (v14 + v711 + v100) & ~v711;
  unint64_t v102 = (v716 + v711 + v100) & ~v711;
  uint64_t v103 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v83 + 48);
  int v104 = v103(v101, 1, v724);
  v688 = (uint64_t (*)(void *, uint64_t, uint64_t))v103;
  int v105 = v103(v102, 1, v724);
  if (v104)
  {
    if (!v105)
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v83 + 16))(v101, v102, v724);
      (*(void (**)(unint64_t, void, uint64_t, uint64_t))(v83 + 56))(v101, 0, 1, v724);
      goto LABEL_80;
    }
    int v106 = *(_DWORD *)(v83 + 84);
    size_t v107 = *(void *)(v83 + 64);
  }
  else
  {
    if (!v105)
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v83 + 24))(v101, v102, v724);
      goto LABEL_80;
    }
    (*(void (**)(unint64_t, uint64_t))(v83 + 8))(v101, v724);
    int v106 = *(_DWORD *)(v83 + 84);
    size_t v107 = *(void *)(v83 + 64);
  }
  if (v106) {
    size_t v108 = v107;
  }
  else {
    size_t v108 = v107 + 1;
  }
  memcpy((void *)v101, (const void *)v102, v108);
LABEL_80:
  uint64_t v109 = v721;
  unsigned int v681 = *(_DWORD *)(v83 + 84);
  if (v681) {
    uint64_t v110 = *(void *)(v83 + 64);
  }
  else {
    uint64_t v110 = *(void *)(v83 + 64) + 1;
  }
  unint64_t v673 = (v716 + v711 + v100) & ~v711;
  unint64_t v675 = v101;
  size_t v694 = v110;
  long long v111 = (void *)(((v102 | 7) + v110) & 0xFFFFFFFFFFFFFFF8);
  size_t v112 = (void *)(((v101 | 7) + v110) & 0xFFFFFFFFFFFFFFF8);
  *size_t v112 = *v111;
  unint64_t v113 = ((unint64_t)v112 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v114 = ((unint64_t)v111 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v113 = *(void *)v114;
  *(unsigned char *)(v113 + 8) = *(unsigned char *)(v114 + 8);
  uint64_t v115 = v707;
  uint64_t v116 = (void *)((v115 + 9 + v113) & ~v115);
  uint64_t v717 = v707 + 9;
  long long v117 = (const void *)((v115 + 9 + v114) & ~v115);
  uint64_t v118 = *(unsigned int *)(v721 + 84);
  unsigned int v667 = *(_DWORD *)(v725 + 84);
  if (v118 <= v667) {
    unsigned int v119 = *(_DWORD *)(v725 + 84);
  }
  else {
    unsigned int v119 = *(_DWORD *)(v721 + 84);
  }
  if (v119 <= 0x7FFFFFFE) {
    int v120 = 2147483646;
  }
  else {
    int v120 = v119;
  }
  uint64_t v121 = *(void *)(v721 + 64) + 7;
  uint64_t v702 = ~v89;
  uint64_t v701 = v89 + 8;
  uint64_t v686 = *(void *)(v725 + 64) + 7;
  unint64_t v665 = (((v686 + ((v89 + 8 + (v121 & 0xFFFFFFFFFFFFFFF8)) & ~v89)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  size_t v730 = v665 + 16;
  int v709 = v120;
  uint64_t v698 = v121;
  unsigned int v687 = *(_DWORD *)(v721 + 84);
  if (v118 == v120)
  {
    unint64_t v122 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v721 + 48);
    uint64_t v123 = v719;
    int v124 = v122(v116, v118, v719);
    unint64_t v125 = (unint64_t)v117;
    uint64_t v126 = v118;
LABEL_100:
    int v134 = v122((void *)v125, v126, v123);
    if (v124)
    {
      if (v134)
      {
LABEL_102:
        unint64_t v135 = v665 + 16;
        memcpy(v116, v117, v730);
LABEL_109:
        unint64_t v133 = ((((((((v723 + ((((__n + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v722) + v727 + 34) & 0xFFFFFFFFFFFFFFF8)
                 + 63) & 0xFFFFFFFFFFFFFFF8)
               + 15) & 0xFFFFFFFFFFFFFFF8)
             + 8;
        goto LABEL_112;
      }
      unint64_t v127 = (uint64_t *)(((unint64_t)v116 + v121) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v130 = (uint64_t *)(((unint64_t)v117 + v121) & 0xFFFFFFFFFFFFFFF8);
LABEL_108:
      (*(void (**)(void *, const void *, uint64_t))(v109 + 16))(v116, v117, v719);
      *unint64_t v127 = *v130;
      unint64_t v136 = ((unint64_t)v127 + v701) & v702;
      unint64_t v137 = ((unint64_t)v130 + v701) & v702;
      int v138 = *(void (**)(unint64_t, unint64_t, uint64_t))(v725 + 16);
      swift_bridgeObjectRetain();
      v138(v136, v137, v703);
      unint64_t v139 = (void *)((v686 + v136) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v140 = (void *)((v686 + v137) & 0xFFFFFFFFFFFFFFF8);
      *unint64_t v139 = *v140;
      size_t v141 = (void *)(((unint64_t)v139 + 15) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v142 = (void *)(((unint64_t)v140 + 15) & 0xFFFFFFFFFFFFFFF8);
      *size_t v141 = *v142;
      v141[1] = v142[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v135 = v665 + 16;
      goto LABEL_109;
    }
    unint64_t v127 = (uint64_t *)(((unint64_t)v116 + v121) & 0xFFFFFFFFFFFFFFF8);
    if (v134)
    {
      unint64_t v133 = ((((((((v723 + ((((__n + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v722) + v727 + 34) & 0xFFFFFFFFFFFFFFF8)
               + 63) & 0xFFFFFFFFFFFFFFF8)
             + 15) & 0xFFFFFFFFFFFFFFF8)
           + 8;
      goto LABEL_105;
    }
    uint64_t v130 = (uint64_t *)(((unint64_t)v117 + v121) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v133 = ((((((((v723 + ((((__n + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v722) + v727 + 34) & 0xFFFFFFFFFFFFFFF8)
             + 63) & 0xFFFFFFFFFFFFFFF8)
           + 15) & 0xFFFFFFFFFFFFFFF8)
         + 8;
    goto LABEL_111;
  }
  unint64_t v127 = (uint64_t *)(((unint64_t)v116 + v121) & 0xFFFFFFFFFFFFFFF8);
  if (v119 > 0x7FFFFFFE)
  {
    uint64_t v123 = v703;
    unint64_t v122 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v725 + 48);
    int v124 = v122((void *)(((unint64_t)v127 + v701) & v702), v667, v703);
    unint64_t v125 = (v701 + (((unint64_t)v117 + v121) & 0xFFFFFFFFFFFFFFF8)) & v702;
    uint64_t v126 = v667;
    uint64_t v109 = v721;
    goto LABEL_100;
  }
  uint64_t v128 = *v127;
  if ((unint64_t)*v127 >= 0xFFFFFFFF) {
    LODWORD(v128) = -1;
  }
  unsigned int v129 = v128 + 1;
  uint64_t v130 = (uint64_t *)(((unint64_t)v117 + v121) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v131 = *v130;
  if ((unint64_t)*v130 >= 0xFFFFFFFF) {
    LODWORD(v131) = -1;
  }
  unsigned int v132 = v131 + 1;
  if (v129 >= 2)
  {
    if (v132 >= 2) {
      goto LABEL_102;
    }
    goto LABEL_108;
  }
  unint64_t v133 = ((((((((v723 + ((((__n + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v722) + v727 + 34) & 0xFFFFFFFFFFFFFFF8)
           + 63) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + 8;
  if (v132 >= 2)
  {
LABEL_105:
    (*(void (**)(void *, uint64_t))(v109 + 8))(v116, v719);
    swift_bridgeObjectRelease();
    (*(void (**)(unint64_t, uint64_t))(v725 + 8))(((unint64_t)v127 + v701) & v702, v703);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v135 = v665 + 16;
    memcpy(v116, v117, v730);
    goto LABEL_112;
  }
LABEL_111:
  (*(void (**)(void *, const void *, uint64_t))(v109 + 24))(v116, v117, v719);
  *unint64_t v127 = *v130;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v143 = ((unint64_t)v127 + v701) & v702;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v725 + 24))(v143, ((unint64_t)v130 + v701) & v702, v703);
  unint64_t v144 = (void *)((v686 + v143) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v145 = (v686 + (((unint64_t)v130 + v701) & v702)) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v146 = *(void *)v145;
  v145 += 15;
  *unint64_t v144 = v146;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v147 = (void *)(((unint64_t)v144 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v147 = *(void *)(v145 & 0xFFFFFFFFFFFFFFF8);
  v147[1] = *(void *)((v145 & 0xFFFFFFFFFFFFFFF8) + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v135 = v665 + 16;
LABEL_112:
  unint64_t v148 = (unsigned char *)(((unint64_t)v117 + v135) | 1);
  uint64_t v149 = (unsigned char *)(((unint64_t)v117 + v135) | 2);
  uint64_t v150 = (uint64_t)v117 + v135 + 10;
  uint64_t v151 = (uint64_t)v117 + v135 + 34;
  *((unsigned char *)v116 + v135) = *((unsigned char *)v117 + v135);
  uint64_t v152 = (uint64_t)v116 + v135 + 34;
  *(unsigned char *)(((unint64_t)v116 + v135) | 1) = *v148;
  uint64_t v692 = ~v690;
  uint64_t v715 = ~v711;
  *(unsigned char *)(((unint64_t)v116 + v135) | 2) = *v149;
  unint64_t v153 = ((unint64_t)v116 + v135 + 10) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v154 = *(void *)(v150 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v155 = *(void *)((v150 & 0xFFFFFFFFFFFFFFF8) + 8);
  char v156 = *(unsigned char *)((v150 & 0xFFFFFFFFFFFFFFF8) + 16);
  sub_10009C5FC(v154, v155, v156);
  uint64_t v157 = *(void *)v153;
  uint64_t v158 = *(void *)(v153 + 8);
  *(void *)unint64_t v153 = v154;
  *(void *)(v153 + 8) = v155;
  char v159 = *(unsigned char *)(v153 + 16);
  *(unsigned char *)(v153 + 16) = v156;
  sub_1000D31F8(v157, v158, v159);
  unint64_t v160 = v152 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v161 = v151 & 0xFFFFFFFFFFFFFFF8;
  char v162 = (uint64_t *)(v160 + 8);
  unint64_t v163 = *(void *)(v160 + 16);
  unint64_t v164 = (uint64_t *)((v151 & 0xFFFFFFFFFFFFFFF8) + 8);
  uint64_t v165 = *(void *)((v151 & 0xFFFFFFFFFFFFFFF8) + 16) >> 60;
  BOOL v81 = ((4 * v165) & 0xC) == 0;
  int v166 = (4 * v165) & 0xC | (v165 >> 2);
  int v167 = v81;
  if (v166 == 15) {
    int v168 = 1;
  }
  else {
    int v168 = v167;
  }
  unsigned int v669 = v119;
  if (4 * ((v163 >> 60) & 3) && (((v163 >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((v163 >> 60) & 3))) != 0xF)
  {
    if (v168)
    {
      *(void *)unint64_t v160 = *(void *)v161;
      unint64_t v169 = *(void *)(v161 + 16);
      goto LABEL_124;
    }
LABEL_128:
    long long v171 = *(_OWORD *)v161;
    long long v172 = *(_OWORD *)(v161 + 16);
    long long v173 = *(_OWORD *)(v161 + 32);
    *(void *)(v160 + 48) = *(void *)(v161 + 48);
    *(_OWORD *)(v160 + 16) = v172;
    *(_OWORD *)(v160 + 32) = v173;
    *(_OWORD *)unint64_t v160 = v171;
    uint64_t v174 = v689;
    uint64_t v175 = ~v711;
    goto LABEL_134;
  }
  if (!v168)
  {
    if (v163 >> 60 != 15) {
      sub_10001E9C0(*v162, v163);
    }
    goto LABEL_128;
  }
  *(void *)unint64_t v160 = *(void *)v161;
  unint64_t v169 = *(void *)(v161 + 16);
  if (v163 >> 60 != 15)
  {
    if (v169 >> 60 != 15)
    {
      uint64_t v176 = *v164;
      sub_10001EBB0(*v164, *(void *)(v161 + 16));
      uint64_t v177 = *(void *)(v160 + 8);
      unint64_t v178 = *(void *)(v160 + 16);
      *(void *)(v160 + 8) = v176;
      *(void *)(v160 + 16) = v169;
      sub_10001E9C0(v177, v178);
      goto LABEL_133;
    }
    sub_10011A770(v160 + 8);
    goto LABEL_131;
  }
LABEL_124:
  if (v169 >> 60 == 15)
  {
LABEL_131:
    *(_OWORD *)char v162 = *(_OWORD *)v164;
    goto LABEL_133;
  }
  uint64_t v170 = *v164;
  sub_10001EBB0(*v164, v169);
  *(void *)(v160 + 8) = v170;
  *(void *)(v160 + 16) = v169;
LABEL_133:
  uint64_t v174 = v689;
  uint64_t v175 = ~v711;
  long long v179 = *(_OWORD *)(v161 + 24);
  *(unsigned char *)(v160 + 40) = *(unsigned char *)(v161 + 40);
  *(_OWORD *)(v160 + 24) = v179;
  *(void *)(v160 + 48) = *(void *)(v161 + 48);
LABEL_134:
  uint64_t v180 = (void **)((v160 + 63) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v181 = (void **)((v161 + 63) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v182 = *v181;
  uint64_t v183 = *v180;
  *uint64_t v180 = *v181;
  id v184 = v182;

  *(void *)(((unint64_t)v180 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v181 + 15) & 0xFFFFFFFFFFFFFFF8);
  size_t v696 = v694 + 7;
  uint64_t v185 = ~v707;
  unint64_t v186 = ((((((((v717 + ((((v694 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v707) + v730 + 34) & 0xFFFFFFFFFFFFFFF8)
           + 63) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + 8;
  unint64_t v187 = v186 + v675;
  *(unsigned char *)unint64_t v187 = *(unsigned char *)(v186 + v673);
  unint64_t v188 = (v186 + v673) & 0xFFFFFFFFFFFFFFF8;
  *(void *)((v187 & 0xFFFFFFFFFFFFFFF8) + 8) = *(void *)(v188 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v189 = (void *)((((v186 + v675) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v190 = (void *)((v188 + 23) & 0xFFFFFFFFFFFFFFF8);
  void *v189 = *v190;
  v189[1] = v190[1];
  unint64_t v191 = ((unint64_t)v189 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v192 = ((unint64_t)v190 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v191 = *(void *)v192;
  *(unsigned char *)(v191 + 8) = *(unsigned char *)(v192 + 8);
  *(void *)(((unint64_t)v189 + 39) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v190 + 39) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v708 = v133 + v711;
  unint64_t v699 = v186;
  unint64_t v676 = (((((v186 + ((v133 + v711) & v175)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v193 = (void *)(((v677 | v690) + v676 + 8) & v692);
  LODWORD(v180) = v697(v193, 1, AssociatedTypeWitness);
  v712 = (void *)(((v683 | v690) + v676 + 8) & v692);
  int v194 = v697(v712, 1, AssociatedTypeWitness);
  if (v180)
  {
    if (!v194)
    {
      uint64_t v195 = ((v683 | v690) + v676 + 8) & v692;
      (*(void (**)(void *, void *, uint64_t))(v679 + 16))(v193, v712, AssociatedTypeWitness);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v679 + 56))(v193, 0, 1, AssociatedTypeWitness);
      goto LABEL_140;
    }
    goto LABEL_139;
  }
  if (v194)
  {
    (*(void (**)(void *, uint64_t))(v679 + 8))(v193, AssociatedTypeWitness);
LABEL_139:
    uint64_t v195 = ((v683 | v690) + v676 + 8) & v692;
    memcpy(v193, v712, __n);
    goto LABEL_140;
  }
  uint64_t v195 = ((v683 | v690) + v676 + 8) & v692;
  (*(void (**)(void *, void *, uint64_t))(v679 + 24))(v193, v712, AssociatedTypeWitness);
LABEL_140:
  uint64_t v196 = v185;
  uint64_t v691 = ((v677 | v690) + v676 + 8) & v692;
  uint64_t v197 = (void *)(((unint64_t)v193 + v700) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v198 = (void *)((v700 + v195) & 0xFFFFFFFFFFFFFFF8);
  void *v197 = *v198;
  unint64_t v199 = ((unint64_t)v197 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v200 = ((unint64_t)v198 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v199 = *(void *)v200;
  *(unsigned char *)(v199 + 8) = *(unsigned char *)(v200 + 8);
  unint64_t v201 = (char *)((v723 + v199) & v722);
  uint64_t v202 = (const void *)((v723 + v200) & v722);
  uint64_t v684 = v185;
  size_t v672 = v676 + 8;
  if (v174 == v718)
  {
    uint64_t v203 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v728 + 48);
    uint64_t v204 = v720;
    int v205 = v203(v201, v174, v720);
    unint64_t v206 = (unint64_t)v202;
    uint64_t v207 = v174;
  }
  else
  {
    uint64_t v208 = (uint64_t *)((unint64_t)&v201[v713] & 0xFFFFFFFFFFFFFFF8);
    if (v680 <= 0x7FFFFFFE)
    {
      uint64_t v209 = *v208;
      if ((unint64_t)*v208 >= 0xFFFFFFFF) {
        LODWORD(v209) = -1;
      }
      unsigned int v210 = v209 + 1;
      long long v211 = (uint64_t *)(((unint64_t)v202 + v713) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v212 = *v211;
      if ((unint64_t)*v211 >= 0xFFFFFFFF) {
        LODWORD(v212) = -1;
      }
      unsigned int v213 = v212 + 1;
      if (v210 >= 2)
      {
        if (v213 < 2) {
          goto LABEL_158;
        }
LABEL_159:
        unint64_t v222 = v666 + 16;
        memcpy(v201, v202, v727);
        goto LABEL_163;
      }
      if (v213 >= 2)
      {
LABEL_155:
        (*(void (**)(char *, uint64_t))(v728 + 8))(v201, v720);
        swift_bridgeObjectRelease();
        (*(void (**)(unint64_t, uint64_t))(v726 + 8))(((unint64_t)v208 + v704) & v705, v706);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_159;
      }
LABEL_161:
      (*(void (**)(char *, const void *, uint64_t))(v728 + 24))(v201, v202, v720);
      uint64_t *v208 = *v211;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      unint64_t v223 = ((unint64_t)v211 + v704) & v705;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v726 + 24))(((unint64_t)v208 + v704) & v705, v223, v706);
      unint64_t v224 = (void *)((v685 + (((unint64_t)v208 + v704) & v705)) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v225 = (v685 + v223) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v226 = *(void *)v225;
      v225 += 15;
      *unint64_t v224 = v226;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      unint64_t v227 = (void *)(((unint64_t)v224 + 15) & 0xFFFFFFFFFFFFFFF8);
      *unint64_t v227 = *(void *)(v225 & 0xFFFFFFFFFFFFFFF8);
      v227[1] = *(void *)((v225 & 0xFFFFFFFFFFFFFFF8) + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_162;
    }
    uint64_t v204 = v706;
    uint64_t v203 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v726 + 48);
    int v205 = v203((char *)(((unint64_t)v208 + v704) & v705), v668, v706);
    uint64_t v175 = v715;
    unint64_t v206 = (v704 + (((unint64_t)v202 + v713) & 0xFFFFFFFFFFFFFFF8)) & v705;
    uint64_t v207 = v668;
    uint64_t v196 = v684;
  }
  int v214 = v203((char *)v206, v207, v204);
  if (!v205)
  {
    uint64_t v208 = (uint64_t *)((unint64_t)&v201[v713] & 0xFFFFFFFFFFFFFFF8);
    if (v214) {
      goto LABEL_155;
    }
    long long v211 = (uint64_t *)(((unint64_t)v202 + v713) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_161;
  }
  if (v214) {
    goto LABEL_159;
  }
  uint64_t v208 = (uint64_t *)((unint64_t)&v201[v713] & 0xFFFFFFFFFFFFFFF8);
  long long v211 = (uint64_t *)(((unint64_t)v202 + v713) & 0xFFFFFFFFFFFFFFF8);
LABEL_158:
  (*(void (**)(char *, const void *, uint64_t))(v728 + 16))(v201, v202, v720);
  uint64_t *v208 = *v211;
  unint64_t v215 = ((unint64_t)v208 + v704) & v705;
  unint64_t v216 = ((unint64_t)v211 + v704) & v705;
  uint64_t v217 = *(void (**)(unint64_t, unint64_t, uint64_t))(v726 + 16);
  swift_bridgeObjectRetain();
  v217(v215, v216, v706);
  long long v218 = (void *)((v685 + v215) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v219 = (void *)((v685 + v216) & 0xFFFFFFFFFFFFFFF8);
  *long long v218 = *v219;
  unint64_t v220 = (void *)(((unint64_t)v218 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v221 = (void *)(((unint64_t)v219 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v220 = *v221;
  v220[1] = v221[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
LABEL_162:
  unint64_t v222 = v666 + 16;
LABEL_163:
  unint64_t v228 = (unsigned char *)(((unint64_t)v202 + v222) | 1);
  uint64_t v229 = (unsigned char *)(((unint64_t)v202 + v222) | 2);
  uint64_t v230 = (uint64_t)v202 + v222 + 10;
  uint64_t v232 = (uint64_t)v202 + v222 + 34;
  char v231 = *((unsigned char *)v202 + v222);
  unsigned int v233 = (unsigned char *)((unint64_t)&v201[v222] | 1);
  unsigned int v234 = (unsigned char *)((unint64_t)&v201[v222] | 2);
  uint64_t v235 = (uint64_t)&v201[v222 + 10];
  unsigned int v236 = &v201[v222];
  *unsigned int v236 = v231;
  *unsigned int v233 = *v228;
  *unsigned int v234 = *v229;
  unint64_t v237 = v235 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v238 = *(void *)(v230 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v239 = *(void *)((v230 & 0xFFFFFFFFFFFFFFF8) + 8);
  char v240 = *(unsigned char *)((v230 & 0xFFFFFFFFFFFFFFF8) + 16);
  sub_10009C5FC(v238, v239, v240);
  uint64_t v241 = *(void *)v237;
  uint64_t v242 = *(void *)(v237 + 8);
  *(void *)unint64_t v237 = v238;
  *(void *)(v237 + 8) = v239;
  char v243 = *(unsigned char *)(v237 + 16);
  *(unsigned char *)(v237 + 16) = v240;
  sub_1000D31F8(v241, v242, v243);
  unint64_t v244 = (unint64_t)(v236 + 34) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v245 = v232 & 0xFFFFFFFFFFFFFFF8;
  unsigned int v246 = (uint64_t *)(v244 + 8);
  unint64_t v247 = *(void *)(v244 + 16);
  unint64_t v248 = (uint64_t *)((v232 & 0xFFFFFFFFFFFFFFF8) + 8);
  uint64_t v249 = *(void *)(v245 + 16) >> 60;
  BOOL v81 = ((4 * v249) & 0xC) == 0;
  int v250 = (4 * v249) & 0xC | (v249 >> 2);
  int v251 = v81;
  if (v250 == 15) {
    int v252 = 1;
  }
  else {
    int v252 = v251;
  }
  if (4 * ((v247 >> 60) & 3) && (((v247 >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((v247 >> 60) & 3))) != 0xF)
  {
    if (v252)
    {
      *(void *)unint64_t v244 = *(void *)v245;
      unint64_t v253 = *(void *)(v245 + 16);
      goto LABEL_175;
    }
LABEL_179:
    long long v255 = *(_OWORD *)v245;
    long long v256 = *(_OWORD *)(v245 + 16);
    long long v257 = *(_OWORD *)(v245 + 32);
    *(void *)(v244 + 48) = *(void *)(v245 + 48);
    *(_OWORD *)(v244 + 16) = v256;
    *(_OWORD *)(v244 + 32) = v257;
    *(_OWORD *)unint64_t v244 = v255;
    uint64_t v258 = v691;
    goto LABEL_185;
  }
  if (!v252)
  {
    if (v247 >> 60 != 15) {
      sub_10001E9C0(*v246, v247);
    }
    goto LABEL_179;
  }
  *(void *)unint64_t v244 = *(void *)v245;
  unint64_t v253 = *(void *)(v245 + 16);
  if (v247 >> 60 != 15)
  {
    if (v253 >> 60 != 15)
    {
      uint64_t v259 = *v248;
      sub_10001EBB0(*v248, *(void *)(v245 + 16));
      uint64_t v260 = *(void *)(v244 + 8);
      unint64_t v261 = *(void *)(v244 + 16);
      *(void *)(v244 + 8) = v259;
      *(void *)(v244 + 16) = v253;
      sub_10001E9C0(v260, v261);
      goto LABEL_184;
    }
    sub_10011A770(v244 + 8);
    goto LABEL_182;
  }
LABEL_175:
  if (v253 >> 60 == 15)
  {
LABEL_182:
    *(_OWORD *)unsigned int v246 = *(_OWORD *)v248;
    goto LABEL_184;
  }
  uint64_t v254 = *v248;
  sub_10001EBB0(*v248, v253);
  *(void *)(v244 + 8) = v254;
  *(void *)(v244 + 16) = v253;
LABEL_184:
  uint64_t v258 = v691;
  long long v262 = *(_OWORD *)(v245 + 24);
  *(unsigned char *)(v244 + 40) = *(unsigned char *)(v245 + 40);
  *(_OWORD *)(v244 + 24) = v262;
  *(void *)(v244 + 48) = *(void *)(v245 + 48);
LABEL_185:
  uint64_t v263 = (void **)((v244 + 63) & 0xFFFFFFFFFFFFFFF8);
  size_t v264 = (void **)((v245 + 63) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v265 = *v264;
  unint64_t v266 = *v263;
  *uint64_t v263 = *v264;
  id v267 = v265;

  *(void *)(((unint64_t)v263 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v264 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v268 = (void *)((v708 + v258) & v175);
  unint64_t v269 = (void *)(((unint64_t)v712 + v708) & v175);
  LODWORD(v266) = v688(v268, 1, v724);
  int v270 = v688(v269, 1, v724);
  if (v266)
  {
    if (!v270)
    {
      (*(void (**)(void *, void *, uint64_t))(v695 + 16))(v268, v269, v724);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v695 + 56))(v268, 0, 1, v724);
      goto LABEL_191;
    }
    goto LABEL_190;
  }
  if (v270)
  {
    (*(void (**)(void *, uint64_t))(v695 + 8))(v268, v724);
LABEL_190:
    memcpy(v268, v269, v694);
    goto LABEL_191;
  }
  (*(void (**)(void *, void *, uint64_t))(v695 + 24))(v268, v269, v724);
LABEL_191:
  long long v271 = (void *)(((unint64_t)v268 + v696) & 0xFFFFFFFFFFFFFFF8);
  long long v272 = (void *)(((unint64_t)v269 + v696) & 0xFFFFFFFFFFFFFFF8);
  *long long v271 = *v272;
  unint64_t v273 = ((unint64_t)v271 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v274 = ((unint64_t)v272 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v273 = *(void *)v274;
  *(unsigned char *)(v273 + 8) = *(unsigned char *)(v274 + 8);
  uint64_t v275 = (char *)((v717 + v273) & v196);
  uint64_t v276 = (const void *)((v717 + v274) & v196);
  uint64_t v277 = v687;
  v678 = v268;
  v674 = v269;
  if (v687 == v709)
  {
    unint64_t v278 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v721 + 48);
    uint64_t v279 = v719;
    int v280 = v278(v275, v687, v719);
    unint64_t v281 = (unint64_t)v276;
  }
  else
  {
    unint64_t v282 = (uint64_t *)((unint64_t)&v275[v698] & 0xFFFFFFFFFFFFFFF8);
    if (v669 <= 0x7FFFFFFE)
    {
      uint64_t v283 = *v282;
      if ((unint64_t)*v282 >= 0xFFFFFFFF) {
        LODWORD(v283) = -1;
      }
      unsigned int v284 = v283 + 1;
      long long v285 = (uint64_t *)(((unint64_t)v276 + v698) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v286 = *v285;
      if ((unint64_t)*v285 >= 0xFFFFFFFF) {
        LODWORD(v286) = -1;
      }
      unsigned int v287 = v286 + 1;
      if (v284 >= 2)
      {
        if (v287 < 2) {
          goto LABEL_210;
        }
LABEL_211:
        unint64_t v298 = v665 + 16;
        memcpy(v275, v276, v730);
        goto LABEL_215;
      }
      BOOL v288 = v287 >= 2;
      uint64_t v289 = v721;
      if (v288)
      {
LABEL_207:
        (*(void (**)(char *, uint64_t))(v289 + 8))(v275, v719);
        swift_bridgeObjectRelease();
        (*(void (**)(unint64_t, uint64_t))(v725 + 8))(((unint64_t)v282 + v701) & v702, v703);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_211;
      }
LABEL_213:
      (*(void (**)(char *, const void *, uint64_t))(v289 + 24))(v275, v276, v719);
      *unint64_t v282 = *v285;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v725 + 24))(((unint64_t)v282 + v701) & v702, ((unint64_t)v285 + v701) & v702, v703);
      id v299 = (void *)((v686 + (((unint64_t)v282 + v701) & v702)) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v300 = (v686 + (((unint64_t)v285 + v701) & v702)) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v301 = *(void *)v300;
      v300 += 15;
      void *v299 = v301;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      unint64_t v302 = (void *)(((unint64_t)v299 + 15) & 0xFFFFFFFFFFFFFFF8);
      void *v302 = *(void *)(v300 & 0xFFFFFFFFFFFFFFF8);
      v302[1] = *(void *)((v300 & 0xFFFFFFFFFFFFFFF8) + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_214;
    }
    unint64_t v278 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v725 + 48);
    uint64_t v277 = v667;
    uint64_t v279 = v703;
    int v280 = v278((char *)(((unint64_t)v282 + v701) & v702), v667, v703);
    unint64_t v281 = (v701 + (((unint64_t)v276 + v698) & 0xFFFFFFFFFFFFFFF8)) & v702;
  }
  int v290 = v278((char *)v281, v277, v279);
  if (!v280)
  {
    unint64_t v282 = (uint64_t *)((unint64_t)&v275[v698] & 0xFFFFFFFFFFFFFFF8);
    if (v290)
    {
      uint64_t v289 = v721;
      goto LABEL_207;
    }
    long long v285 = (uint64_t *)(((unint64_t)v276 + v698) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v289 = v721;
    goto LABEL_213;
  }
  if (v290) {
    goto LABEL_211;
  }
  unint64_t v282 = (uint64_t *)((unint64_t)&v275[v698] & 0xFFFFFFFFFFFFFFF8);
  long long v285 = (uint64_t *)(((unint64_t)v276 + v698) & 0xFFFFFFFFFFFFFFF8);
LABEL_210:
  (*(void (**)(char *, const void *, uint64_t))(v721 + 16))(v275, v276, v719);
  *unint64_t v282 = *v285;
  unint64_t v291 = ((unint64_t)v282 + v701) & v702;
  unint64_t v292 = ((unint64_t)v285 + v701) & v702;
  long long v293 = *(void (**)(unint64_t, unint64_t, uint64_t))(v725 + 16);
  swift_bridgeObjectRetain();
  v293(v291, v292, v703);
  unint64_t v294 = (void *)((v686 + v291) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v295 = (void *)((v686 + v292) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v294 = *v295;
  uint64_t v296 = (void *)(((unint64_t)v294 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v297 = (void *)(((unint64_t)v295 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v296 = *v297;
  v296[1] = v297[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
LABEL_214:
  unint64_t v298 = v665 + 16;
LABEL_215:
  unint64_t v303 = (unsigned char *)(((unint64_t)v276 + v298) | 1);
  unint64_t v304 = (unsigned char *)(((unint64_t)v276 + v298) | 2);
  uint64_t v305 = (uint64_t)v276 + v298 + 10;
  uint64_t v307 = (uint64_t)v276 + v298 + 34;
  char v306 = *((unsigned char *)v276 + v298);
  unint64_t v308 = (unsigned char *)((unint64_t)&v275[v298] | 1);
  unint64_t v309 = (unsigned char *)((unint64_t)&v275[v298] | 2);
  uint64_t v310 = (uint64_t)&v275[v298 + 10];
  long long v311 = &v275[v298];
  *long long v311 = v306;
  *unint64_t v308 = *v303;
  *unint64_t v309 = *v304;
  unint64_t v312 = v310 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v313 = *(void *)(v305 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v314 = *(void *)((v305 & 0xFFFFFFFFFFFFFFF8) + 8);
  char v315 = *(unsigned char *)((v305 & 0xFFFFFFFFFFFFFFF8) + 16);
  sub_10009C5FC(v313, v314, v315);
  uint64_t v316 = *(void *)v312;
  uint64_t v317 = *(void *)(v312 + 8);
  *(void *)unint64_t v312 = v313;
  *(void *)(v312 + 8) = v314;
  char v318 = *(unsigned char *)(v312 + 16);
  *(unsigned char *)(v312 + 16) = v315;
  sub_1000D31F8(v316, v317, v318);
  unint64_t v319 = (unint64_t)(v311 + 34) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v320 = v307 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v321 = (uint64_t *)(v319 + 8);
  unint64_t v322 = *(void *)(v319 + 16);
  unint64_t v323 = (uint64_t *)((v307 & 0xFFFFFFFFFFFFFFF8) + 8);
  uint64_t v324 = *(void *)(v320 + 16) >> 60;
  BOOL v81 = ((4 * v324) & 0xC) == 0;
  int v325 = (4 * v324) & 0xC | (v324 >> 2);
  int v326 = v81;
  if (v325 == 15) {
    int v327 = 1;
  }
  else {
    int v327 = v326;
  }
  if (4 * ((v322 >> 60) & 3) && (((v322 >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((v322 >> 60) & 3))) != 0xF)
  {
    if (v327)
    {
      *(void *)unint64_t v319 = *(void *)v320;
      unint64_t v328 = *(void *)(v320 + 16);
      if (v328 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v321 = *(_OWORD *)v323;
      }
      else
      {
        uint64_t v340 = *v323;
        sub_10001EBB0(*v323, *(void *)(v320 + 16));
        *(void *)(v319 + 8) = v340;
        *(void *)(v319 + 16) = v328;
      }
      unint64_t v330 = v699;
      uint64_t v331 = v689;
      goto LABEL_239;
    }
LABEL_232:
    long long v333 = *(_OWORD *)v320;
    long long v334 = *(_OWORD *)(v320 + 16);
    long long v335 = *(_OWORD *)(v320 + 32);
    *(void *)(v319 + 48) = *(void *)(v320 + 48);
    *(_OWORD *)(v319 + 16) = v334;
    *(_OWORD *)(v319 + 32) = v335;
    *(_OWORD *)unint64_t v319 = v333;
    unint64_t v330 = v699;
    uint64_t v331 = v689;
    uint64_t v336 = v671;
    unint64_t v337 = v676;
    unsigned int v338 = v678;
    uint64_t v339 = v674;
    goto LABEL_240;
  }
  if (!v327)
  {
    if (v322 >> 60 != 15) {
      sub_10001E9C0(*v321, v322);
    }
    goto LABEL_232;
  }
  *(void *)unint64_t v319 = *(void *)v320;
  unint64_t v329 = *(void *)(v320 + 16);
  if (v322 >> 60 != 15)
  {
    unint64_t v330 = v699;
    uint64_t v331 = v689;
    if (v329 >> 60 != 15)
    {
      uint64_t v341 = *v323;
      sub_10001EBB0(*v323, *(void *)(v320 + 16));
      uint64_t v342 = *(void *)(v319 + 8);
      unint64_t v343 = *(void *)(v319 + 16);
      *(void *)(v319 + 8) = v341;
      *(void *)(v319 + 16) = v329;
      sub_10001E9C0(v342, v343);
      goto LABEL_239;
    }
    sub_10011A770(v319 + 8);
    goto LABEL_237;
  }
  unint64_t v330 = v699;
  uint64_t v331 = v689;
  if (v329 >> 60 == 15)
  {
LABEL_237:
    *(_OWORD *)uint64_t v321 = *(_OWORD *)v323;
    goto LABEL_239;
  }
  uint64_t v332 = *v323;
  sub_10001EBB0(*v323, *(void *)(v320 + 16));
  *(void *)(v319 + 8) = v332;
  *(void *)(v319 + 16) = v329;
LABEL_239:
  uint64_t v336 = v671;
  unint64_t v337 = v676;
  unsigned int v338 = v678;
  uint64_t v339 = v674;
  long long v344 = *(_OWORD *)(v320 + 24);
  *(unsigned char *)(v319 + 40) = *(unsigned char *)(v320 + 40);
  *(_OWORD *)(v319 + 24) = v344;
  *(void *)(v319 + 48) = *(void *)(v320 + 48);
LABEL_240:
  unint64_t v345 = (void **)((v319 + 63) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v346 = (void **)((v320 + 63) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v347 = *v346;
  unsigned int v348 = *v345;
  char *v345 = *v346;
  id v349 = v347;

  *(void *)(((unint64_t)v345 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v346 + 15) & 0xFFFFFFFFFFFFFFF8);
  v338[v330] = v339[v330];
  unint64_t v350 = (unint64_t)&v338[v330] & 0xFFFFFFFFFFFFFFF8;
  unint64_t v351 = (unint64_t)&v339[v330] & 0xFFFFFFFFFFFFFFF8;
  *(void *)(v350 + 8) = *(void *)(v351 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v352 = (void *)((v350 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v353 = (void *)((v351 + 23) & 0xFFFFFFFFFFFFFFF8);
  void *v352 = *v353;
  v352[1] = v353[1];
  unint64_t v354 = ((unint64_t)v352 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v355 = ((unint64_t)v353 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v354 = *(void *)v355;
  *(unsigned char *)(v354 + 8) = *(unsigned char *)(v355 + 8);
  *(void *)(((unint64_t)v352 + 39) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v353 + 39) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v356 = (void *)((v337 + 15 + v691) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v357 = (void *)(((unint64_t)v712 + v337 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v356 = *v357;
  v356[1] = v357[1];
  unint64_t v358 = ((unint64_t)v356 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v359 = ((unint64_t)v357 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v360 = *(void *)v359;
  *(unsigned char *)(v358 + 8) = *(unsigned char *)(v359 + 8);
  *(void *)unint64_t v358 = v360;
  uint64_t v361 = (void *)((v336 + v358) & v692);
  int v362 = (void *)((v336 + v359) & v692);
  uint64_t v364 = v681;
  uint64_t v363 = v682;
  if (v682) {
    unsigned int v365 = v682 - 1;
  }
  else {
    unsigned int v365 = 0;
  }
  int v366 = v718 - 1;
  if (v365 <= v718 - 1) {
    unsigned int v367 = v718 - 1;
  }
  else {
    unsigned int v367 = v365;
  }
  if (v367 <= 0x7FFFFFFE) {
    unsigned int v368 = 2147483646;
  }
  else {
    unsigned int v368 = v367;
  }
  if (v681) {
    unsigned int v369 = v681 - 1;
  }
  else {
    unsigned int v369 = 0;
  }
  int v370 = v709 - 1;
  if (v369 <= v709 - 1) {
    unsigned int v371 = v709 - 1;
  }
  else {
    unsigned int v371 = v369;
  }
  if (v371 <= 0x7FFFFFFE) {
    unsigned int v372 = 2147483646;
  }
  else {
    unsigned int v372 = v371;
  }
  if (v372 <= v368) {
    unsigned int v373 = v368;
  }
  else {
    unsigned int v373 = v372;
  }
  if (v373 <= 0x7FFFFFFF) {
    int v374 = 0x7FFFFFFF;
  }
  else {
    int v374 = v373;
  }
  if (v368 == v374)
  {
    unint64_t v375 = v361;
    if (v365 == v368)
    {
      uint64_t v376 = v728;
      uint64_t v377 = v713;
      uint64_t v378 = AssociatedTypeWitness;
      if (v682 >= 2)
      {
        unsigned int v379 = ((uint64_t (*)(void *))v697)(v361);
        uint64_t v363 = v682;
        if (v379 >= 2) {
          goto LABEL_307;
        }
      }
      goto LABEL_304;
    }
    unint64_t v385 = (v723 + (((((unint64_t)v361 + v700) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v722;
    if (v366 != v368)
    {
      unint64_t v389 = *(void *)((((v666 + v385 + 26) & 0xFFFFFFFFFFFFFFF8) + 87) & 0xFFFFFFFFFFFFFFF8);
      if (v389 >= 0xFFFFFFFF) {
        LODWORD(v389) = -1;
      }
      uint64_t v376 = v728;
      uint64_t v377 = v713;
      uint64_t v378 = AssociatedTypeWitness;
      if ((v389 + 1) >= 2)
      {
LABEL_307:
        if (v365 == v368)
        {
          size_t v382 = v666 + 16;
          size_t v383 = v362;
          if (v363 < 2) {
            goto LABEL_381;
          }
          unsigned int v396 = v697(v362, v363, v378);
LABEL_345:
          if (v396 >= 2) {
            goto LABEL_569;
          }
LABEL_381:
          if (v697(v383, 1, v378))
          {
            memcpy(v375, v383, __n);
          }
          else
          {
            (*(void (**)(void *, void *, uint64_t))(v679 + 16))(v375, v383, v378);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v679 + 56))(v375, 0, 1, v378);
          }
          uint64_t v415 = (void *)(((unint64_t)v375 + v700) & 0xFFFFFFFFFFFFFFF8);
          v416 = (void *)(((unint64_t)v383 + v700) & 0xFFFFFFFFFFFFFFF8);
          *uint64_t v415 = *v416;
          unint64_t v417 = ((unint64_t)v415 + 15) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v418 = ((unint64_t)v416 + 15) & 0xFFFFFFFFFFFFFFF8;
          *(void *)unint64_t v417 = *(void *)v418;
          *(unsigned char *)(v417 + 8) = *(unsigned char *)(v418 + 8);
          uint64_t v419 = (char *)((v723 + v417) & v722);
          uint64_t v420 = (const void *)((v723 + v418) & v722);
          if (v331 == v718)
          {
            if (!(*(unsigned int (**)(const void *, uint64_t, uint64_t))(v376 + 48))(v420, v331, v720)) {
              goto LABEL_394;
            }
          }
          else
          {
            uint64_t v421 = (void *)(((unint64_t)v420 + v377) & 0xFFFFFFFFFFFFFFF8);
            if (v680 > 0x7FFFFFFE)
            {
              if (!(*(unsigned int (**)(unint64_t, void, uint64_t))(v726 + 48))(((unint64_t)v421 + v704) & v705, v668, v706))
              {
LABEL_394:
                uint64_t v421 = (void *)(((unint64_t)v420 + v377) & 0xFFFFFFFFFFFFFFF8);
LABEL_395:
                (*(void (**)(char *, const void *, uint64_t))(v376 + 16))(v419, v420, v720);
                v423 = (void *)((unint64_t)&v419[v377] & 0xFFFFFFFFFFFFFFF8);
                void *v423 = *v421;
                unint64_t v424 = ((unint64_t)v423 + v704) & v705;
                unint64_t v425 = ((unint64_t)v421 + v704) & v705;
                v426 = *(void (**)(unint64_t, unint64_t, uint64_t))(v726 + 16);
                swift_bridgeObjectRetain();
                v426(v424, v425, v706);
                size_t v382 = v666 + 16;
                uint64_t v427 = (void *)((v685 + v424) & 0xFFFFFFFFFFFFFFF8);
                v428 = (void *)((v685 + v425) & 0xFFFFFFFFFFFFFFF8);
                *uint64_t v427 = *v428;
                v429 = (void *)(((unint64_t)v427 + 15) & 0xFFFFFFFFFFFFFFF8);
                v430 = (void *)(((unint64_t)v428 + 15) & 0xFFFFFFFFFFFFFFF8);
                void *v429 = *v430;
                v429[1] = v430[1];
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                goto LABEL_396;
              }
            }
            else
            {
              uint64_t v422 = *v421;
              if (*v421 >= 0xFFFFFFFFuLL) {
                LODWORD(v422) = -1;
              }
              if ((v422 + 1) < 2) {
                goto LABEL_395;
              }
            }
          }
          memcpy(v419, v420, v382);
LABEL_396:
          v431 = (unsigned char *)(((unint64_t)v420 + v382) | 1);
          v432 = (unsigned char *)(((unint64_t)v420 + v382) | 2);
          uint64_t v433 = (uint64_t)v420 + v382 + 10;
          uint64_t v435 = (uint64_t)v420 + v382 + 34;
          char v434 = *((unsigned char *)v420 + v382);
          v436 = (unsigned char *)((unint64_t)&v419[v382] | 1);
          uint64_t v437 = (unsigned char *)((unint64_t)&v419[v382] | 2);
          uint64_t v438 = (uint64_t)&v419[v382 + 10];
          uint64_t v439 = &v419[v382];
          *uint64_t v439 = v434;
          unsigned char *v436 = *v431;
          *uint64_t v437 = *v432;
          unint64_t v440 = v438 & 0xFFFFFFFFFFFFFFF8;
          uint64_t v441 = *(void *)(v433 & 0xFFFFFFFFFFFFFFF8);
          uint64_t v442 = *(void *)((v433 & 0xFFFFFFFFFFFFFFF8) + 8);
          char v443 = *(unsigned char *)((v433 & 0xFFFFFFFFFFFFFFF8) + 16);
          sub_10009C5FC(v441, v442, v443);
          *(void *)unint64_t v440 = v441;
          *(void *)(v440 + 8) = v442;
          *(unsigned char *)(v440 + 16) = v443;
          unint64_t v444 = (unint64_t)(v439 + 34) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v445 = v435 & 0xFFFFFFFFFFFFFFF8;
          uint64_t v446 = *(void *)(v445 + 16) >> 60;
          if (!(4 * (v446 & 3)) || ((v446 >> 2) & 0xFFFFFFF3 | (4 * (v446 & 3))) == 0xF)
          {
            v450 = (uint64_t *)(v445 + 8);
            *(void *)unint64_t v444 = *(void *)v445;
            unint64_t v451 = *(void *)(v445 + 16);
            if (v451 >> 60 == 15)
            {
              *(_OWORD *)(v444 + 8) = *(_OWORD *)v450;
            }
            else
            {
              uint64_t v452 = *v450;
              sub_10001EBB0(*v450, *(void *)(v445 + 16));
              *(void *)(v444 + 8) = v452;
              *(void *)(v444 + 16) = v451;
            }
            long long v453 = *(_OWORD *)(v445 + 24);
            *(unsigned char *)(v444 + 40) = *(unsigned char *)(v445 + 40);
            *(_OWORD *)(v444 + 24) = v453;
            *(void *)(v444 + 48) = *(void *)(v445 + 48);
          }
          else
          {
            long long v447 = *(_OWORD *)v445;
            long long v448 = *(_OWORD *)(v445 + 16);
            long long v449 = *(_OWORD *)(v445 + 32);
            *(void *)(v444 + 48) = *(void *)(v445 + 48);
            *(_OWORD *)(v444 + 16) = v448;
            *(_OWORD *)(v444 + 32) = v449;
            *(_OWORD *)unint64_t v444 = v447;
          }
          uint64_t v454 = (void *)((v444 + 63) & 0xFFFFFFFFFFFFFFF8);
          v455 = (void **)((v445 + 63) & 0xFFFFFFFFFFFFFFF8);
          v456 = *v455;
          *uint64_t v454 = *v455;
          *(void *)(((unint64_t)v454 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v455 + 15) & 0xFFFFFFFFFFFFFFF8);
          uint64_t v457 = (void *)(((unint64_t)v375 + v708) & v715);
          uint64_t v458 = (void *)(((unint64_t)v383 + v708) & v715);
          id v459 = v456;
          if (v688(v458, 1, v724))
          {
            memcpy(v457, v458, v694);
          }
          else
          {
            (*(void (**)(void *, void *, uint64_t))(v695 + 16))(v457, v458, v724);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v695 + 56))(v457, 0, 1, v724);
          }
          uint64_t v460 = (void *)(((unint64_t)v457 + v696) & 0xFFFFFFFFFFFFFFF8);
          v461 = (void *)(((unint64_t)v458 + v696) & 0xFFFFFFFFFFFFFFF8);
          *uint64_t v460 = *v461;
          unint64_t v462 = ((unint64_t)v460 + 15) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v463 = ((unint64_t)v461 + 15) & 0xFFFFFFFFFFFFFFF8;
          *(void *)unint64_t v462 = *(void *)v463;
          *(unsigned char *)(v462 + 8) = *(unsigned char *)(v463 + 8);
          uint64_t v464 = (unsigned char *)((v717 + v462) & v684);
          uint64_t v465 = (unsigned char *)((v717 + v463) & v684);
          if (v687 == v709)
          {
            if (!(*(unsigned int (**)(unsigned char *))(v721 + 48))(v465)) {
              goto LABEL_416;
            }
          }
          else
          {
            v466 = (void *)((unint64_t)&v465[v698] & 0xFFFFFFFFFFFFFFF8);
            if (v669 > 0x7FFFFFFE)
            {
              if (!(*(unsigned int (**)(unint64_t, void, uint64_t))(v725 + 48))(((unint64_t)v466 + v701) & v702, v667, v703))
              {
LABEL_416:
                v466 = (void *)((unint64_t)&v465[v698] & 0xFFFFFFFFFFFFFFF8);
LABEL_417:
                (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v721 + 16))(v464, v465, v719);
                uint64_t v468 = (void *)((unint64_t)&v464[v698] & 0xFFFFFFFFFFFFFFF8);
                *uint64_t v468 = *v466;
                unint64_t v469 = ((unint64_t)v468 + v701) & v702;
                unint64_t v470 = ((unint64_t)v466 + v701) & v702;
                v471 = *(void (**)(unint64_t, unint64_t, uint64_t))(v725 + 16);
                swift_bridgeObjectRetain();
                v471(v469, v470, v703);
                v472 = (void *)((v686 + v469) & 0xFFFFFFFFFFFFFFF8);
                v473 = (void *)((v686 + v470) & 0xFFFFFFFFFFFFFFF8);
                void *v472 = *v473;
                v474 = (void *)(((unint64_t)v472 + 15) & 0xFFFFFFFFFFFFFFF8);
                v475 = (void *)(((unint64_t)v473 + 15) & 0xFFFFFFFFFFFFFFF8);
                void *v474 = *v475;
                v474[1] = v475[1];
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
LABEL_418:
                uint64_t v476 = (uint64_t)&v465[v730 + 10];
                uint64_t v477 = (uint64_t)&v465[v730 + 34];
                v464[v730] = v465[v730];
                uint64_t v478 = (uint64_t)&v464[v730 + 34];
                *(unsigned char *)((unint64_t)&v464[v730] | 1) = *(unsigned char *)((unint64_t)&v465[v730] | 1);
                *(unsigned char *)((unint64_t)&v464[v730] | 2) = *(unsigned char *)((unint64_t)&v465[v730] | 2);
                unint64_t v479 = (unint64_t)&v464[v730 + 10] & 0xFFFFFFFFFFFFFFF8;
                uint64_t v480 = *(void *)(v476 & 0xFFFFFFFFFFFFFFF8);
                uint64_t v481 = *(void *)((v476 & 0xFFFFFFFFFFFFFFF8) + 8);
                char v482 = *(unsigned char *)((v476 & 0xFFFFFFFFFFFFFFF8) + 16);
                sub_10009C5FC(v480, v481, v482);
                *(void *)unint64_t v479 = v480;
                *(void *)(v479 + 8) = v481;
                *(unsigned char *)(v479 + 16) = v482;
                unint64_t v483 = v478 & 0xFFFFFFFFFFFFFFF8;
                unint64_t v484 = v477 & 0xFFFFFFFFFFFFFFF8;
                uint64_t v485 = *(void *)(v484 + 16) >> 60;
                if (!(4 * (v485 & 3)) || ((v485 >> 2) & 0xFFFFFFF3 | (4 * (v485 & 3))) == 0xF)
                {
                  uint64_t v490 = (uint64_t *)(v484 + 8);
                  *(void *)unint64_t v483 = *(void *)v484;
                  unint64_t v491 = *(void *)(v484 + 16);
                  if (v491 >> 60 == 15)
                  {
                    *(_OWORD *)(v483 + 8) = *(_OWORD *)v490;
                  }
                  else
                  {
                    uint64_t v492 = *v490;
                    sub_10001EBB0(*v490, *(void *)(v484 + 16));
                    *(void *)(v483 + 8) = v492;
                    *(void *)(v483 + 16) = v491;
                  }
                  uint64_t v489 = v670;
                  long long v493 = *(_OWORD *)(v484 + 24);
                  *(unsigned char *)(v483 + 40) = *(unsigned char *)(v484 + 40);
                  *(_OWORD *)(v483 + 24) = v493;
                  *(void *)(v483 + 48) = *(void *)(v484 + 48);
                }
                else
                {
                  long long v486 = *(_OWORD *)v484;
                  long long v487 = *(_OWORD *)(v484 + 16);
                  long long v488 = *(_OWORD *)(v484 + 32);
                  *(void *)(v483 + 48) = *(void *)(v484 + 48);
                  *(_OWORD *)(v483 + 16) = v487;
                  *(_OWORD *)(v483 + 32) = v488;
                  *(_OWORD *)unint64_t v483 = v486;
                  uint64_t v489 = v670;
                }
                uint64_t v494 = (void *)((v483 + 63) & 0xFFFFFFFFFFFFFFF8);
                uint64_t v495 = (void **)((v484 + 63) & 0xFFFFFFFFFFFFFFF8);
                int v496 = *v495;
                *uint64_t v494 = *v495;
                *(void *)(((unint64_t)v494 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v495
                                                                                               + 15) & 0xFFFFFFFFFFFFFFF8);
                *((unsigned char *)v457 + v699) = *((unsigned char *)v458 + v699);
                unint64_t v497 = ((unint64_t)v457 + v699) & 0xFFFFFFFFFFFFFFF8;
                unint64_t v498 = ((unint64_t)v458 + v699) & 0xFFFFFFFFFFFFFFF8;
                *(void *)(v497 + 8) = *(void *)(v498 + 8);
                v499 = (_OWORD *)((v497 + 23) & 0xFFFFFFFFFFFFFFF8);
                uint64_t v500 = (_OWORD *)((v498 + 23) & 0xFFFFFFFFFFFFFFF8);
                _OWORD *v499 = *v500;
                unint64_t v501 = ((unint64_t)v499 + 23) & 0xFFFFFFFFFFFFFFF8;
                unint64_t v502 = ((unint64_t)v500 + 23) & 0xFFFFFFFFFFFFFFF8;
                *(void *)unint64_t v501 = *(void *)v502;
                *(unsigned char *)(v501 + 8) = *(unsigned char *)(v502 + 8);
                *(void *)(((unint64_t)v499 + 39) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v500
                                                                                               + 39) & 0xFFFFFFFFFFFFFFF8);
                id v503 = v496;
                swift_bridgeObjectRetain();
                return v489;
              }
            }
            else
            {
              uint64_t v467 = *v466;
              if (*v466 >= 0xFFFFFFFFuLL) {
                LODWORD(v467) = -1;
              }
              if ((v467 + 1) < 2) {
                goto LABEL_417;
              }
            }
          }
          memcpy(v464, v465, v730);
          goto LABEL_418;
        }
        size_t v383 = v362;
        unint64_t v399 = (v723 + (((((unint64_t)v362 + v700) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v722;
        if (v366 != v368)
        {
          unint64_t v402 = *(void *)((((v666 + v399 + 26) & 0xFFFFFFFFFFFFFFF8) + 87) & 0xFFFFFFFFFFFFFFF8);
          if (v402 >= 0xFFFFFFFF) {
            LODWORD(v402) = -1;
          }
          size_t v382 = v666 + 16;
          if ((v402 + 1) >= 2) {
            goto LABEL_569;
          }
          goto LABEL_381;
        }
        if (v331 == v718)
        {
          unsigned int v400 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v376 + 48))(v399, v331, v720);
        }
        else
        {
          uint64_t v404 = (unint64_t *)((v377 + v399) & 0xFFFFFFFFFFFFFFF8);
          if (v680 <= 0x7FFFFFFE)
          {
            unint64_t v405 = *v404;
            if (v405 >= 0xFFFFFFFF) {
              unsigned int v400 = -1;
            }
            else {
              unsigned int v400 = v405;
            }
            size_t v382 = v666 + 16;
            if (v400 + 1 < 2) {
              goto LABEL_381;
            }
            goto LABEL_380;
          }
          unsigned int v400 = (*(uint64_t (**)(unint64_t, void, uint64_t))(v726 + 48))(((unint64_t)v404 + v704) & v705, v668, v706);
        }
        size_t v382 = v666 + 16;
LABEL_380:
        if (v400 < 2) {
          goto LABEL_381;
        }
        goto LABEL_569;
      }
      goto LABEL_304;
    }
    if (v331 == v718)
    {
      uint64_t v376 = v728;
      unsigned int v386 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v728 + 48))(v385, v331, v720);
      uint64_t v363 = v682;
      uint64_t v377 = v713;
      uint64_t v378 = AssociatedTypeWitness;
    }
    else
    {
      uint64_t v377 = v713;
      uint64_t v390 = (unint64_t *)((v713 + v385) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v376 = v728;
      uint64_t v378 = AssociatedTypeWitness;
      if (v680 > 0x7FFFFFFE)
      {
        unsigned int v386 = (*(uint64_t (**)(unint64_t, void, uint64_t))(v726 + 48))(((unint64_t)v390 + v704) & v705, v668, v706);
        uint64_t v363 = v682;
      }
      else
      {
        unint64_t v391 = *v390;
        if (v391 >= 0xFFFFFFFF) {
          unsigned int v386 = -1;
        }
        else {
          unsigned int v386 = v391;
        }
        if (v386 + 1 < 2)
        {
LABEL_304:
          if (v365 == v368)
          {
            uint64_t v381 = v724;
            size_t v382 = v666 + 16;
            size_t v383 = v362;
            if (v363 < 2) {
              goto LABEL_428;
            }
            unsigned int v395 = v697(v362, v363, v378);
LABEL_339:
            if (v395 >= 2) {
              goto LABEL_431;
            }
LABEL_428:
            int v504 = v697(v375, 1, v378);
            int v505 = v697(v383, 1, v378);
            if (v504)
            {
              if (!v505)
              {
                (*(void (**)(void *, void *, uint64_t))(v679 + 16))(v375, v383, v378);
                (*(void (**)(void *, void, uint64_t, uint64_t))(v679 + 56))(v375, 0, 1, v378);
                goto LABEL_439;
              }
            }
            else
            {
              if (!v505)
              {
                (*(void (**)(void *, void *, uint64_t))(v679 + 24))(v375, v383, v378);
LABEL_439:
                v507 = (void *)(((unint64_t)v375 + v700) & 0xFFFFFFFFFFFFFFF8);
                v508 = (void *)(((unint64_t)v383 + v700) & 0xFFFFFFFFFFFFFFF8);
                void *v507 = *v508;
                unint64_t v509 = ((unint64_t)v507 + 15) & 0xFFFFFFFFFFFFFFF8;
                unint64_t v510 = ((unint64_t)v508 + 15) & 0xFFFFFFFFFFFFFFF8;
                *(void *)unint64_t v509 = *(void *)v510;
                *(unsigned char *)(v509 + 8) = *(unsigned char *)(v510 + 8);
                v511 = (void *)((v723 + v509) & v722);
                v512 = (void *)((v723 + v510) & v722);
                if (v331 == v718)
                {
                  v513 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v376 + 48);
                  int v514 = v513(v511, v331, v720);
                  int v515 = v513(v512, v331, v720);
                  if (v514) {
                    goto LABEL_441;
                  }
                }
                else
                {
                  uint64_t v516 = (uint64_t *)(((unint64_t)v511 + v377) & 0xFFFFFFFFFFFFFFF8);
                  if (v680 <= 0x7FFFFFFE)
                  {
                    uint64_t v518 = *v516;
                    if ((unint64_t)*v516 >= 0xFFFFFFFF) {
                      LODWORD(v518) = -1;
                    }
                    unsigned int v519 = v518 + 1;
                    uint64_t v517 = (uint64_t *)(((unint64_t)v512 + v377) & 0xFFFFFFFFFFFFFFF8);
                    uint64_t v520 = *v517;
                    if ((unint64_t)*v517 >= 0xFFFFFFFF) {
                      LODWORD(v520) = -1;
                    }
                    unsigned int v521 = v520 + 1;
                    if (v519 >= 2)
                    {
                      if (v521 < 2) {
                        goto LABEL_491;
                      }
                      goto LABEL_492;
                    }
                    if (v521 >= 2)
                    {
LABEL_459:
                      (*(void (**)(void *, uint64_t))(v376 + 8))(v511, v720);
                      swift_bridgeObjectRelease();
                      (*(void (**)(unint64_t, uint64_t))(v726 + 8))(((unint64_t)v516 + v704) & v705, v706);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
LABEL_492:
                      unint64_t v550 = v666 + 16;
                      memcpy(v511, v512, v727);
LABEL_495:
                      v542 = v375;
LABEL_496:
                      uint64_t v557 = (uint64_t)v512 + v550 + 10;
                      uint64_t v558 = (uint64_t)v512 + v550 + 34;
                      *((unsigned char *)v511 + v550) = *((unsigned char *)v512 + v550);
                      uint64_t v559 = (uint64_t)v511 + v550 + 34;
                      *(unsigned char *)(((unint64_t)v511 + v550) | 1) = *(unsigned char *)(((unint64_t)v512 + v550) | 1);
                      *(unsigned char *)(((unint64_t)v511 + v550) | 2) = *(unsigned char *)(((unint64_t)v512 + v550) | 2);
                      unint64_t v560 = ((unint64_t)v511 + v550 + 10) & 0xFFFFFFFFFFFFFFF8;
                      uint64_t v561 = *(void *)(v557 & 0xFFFFFFFFFFFFFFF8);
                      uint64_t v562 = *(void *)((v557 & 0xFFFFFFFFFFFFFFF8) + 8);
                      char v563 = *(unsigned char *)((v557 & 0xFFFFFFFFFFFFFFF8) + 16);
                      sub_10009C5FC(v561, v562, v563);
                      uint64_t v564 = *(void *)v560;
                      uint64_t v565 = *(void *)(v560 + 8);
                      *(void *)unint64_t v560 = v561;
                      *(void *)(v560 + 8) = v562;
                      char v566 = *(unsigned char *)(v560 + 16);
                      *(unsigned char *)(v560 + 16) = v563;
                      sub_1000D31F8(v564, v565, v566);
                      unint64_t v567 = v559 & 0xFFFFFFFFFFFFFFF8;
                      unint64_t v568 = v558 & 0xFFFFFFFFFFFFFFF8;
                      uint64_t v569 = (uint64_t *)((v559 & 0xFFFFFFFFFFFFFFF8) + 8);
                      unint64_t v570 = *(void *)((v559 & 0xFFFFFFFFFFFFFFF8) + 16);
                      uint64_t v571 = (uint64_t *)(v568 + 8);
                      uint64_t v572 = *(void *)(v568 + 16) >> 60;
                      BOOL v81 = ((4 * v572) & 0xC) == 0;
                      int v573 = (4 * v572) & 0xC | (v572 >> 2);
                      int v574 = v81;
                      if (v573 == 15) {
                        int v575 = 1;
                      }
                      else {
                        int v575 = v574;
                      }
                      if (!(4 * ((v570 >> 60) & 3))
                        || (((v570 >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((v570 >> 60) & 3))) == 0xF)
                      {
                        if (v575)
                        {
                          *(void *)unint64_t v567 = *(void *)v568;
                          unint64_t v576 = *(void *)(v568 + 16);
                          if (v570 >> 60 != 15)
                          {
                            if (v576 >> 60 != 15)
                            {
                              uint64_t v581 = *v571;
                              sub_10001EBB0(*v571, *(void *)(v568 + 16));
                              uint64_t v582 = *(void *)(v567 + 8);
                              unint64_t v583 = *(void *)(v567 + 16);
                              *(void *)(v567 + 8) = v581;
                              *(void *)(v567 + 16) = v576;
                              sub_10001E9C0(v582, v583);
                              goto LABEL_517;
                            }
                            sub_10011A770((uint64_t)v569);
                            goto LABEL_515;
                          }
LABEL_508:
                          if (v576 >> 60 != 15)
                          {
                            uint64_t v577 = *v571;
                            sub_10001EBB0(*v571, v576);
                            *(void *)(v567 + 8) = v577;
                            *(void *)(v567 + 16) = v576;
LABEL_517:
                            long long v584 = *(_OWORD *)(v568 + 24);
                            *(unsigned char *)(v567 + 40) = *(unsigned char *)(v568 + 40);
                            *(_OWORD *)(v567 + 24) = v584;
                            *(void *)(v567 + 48) = *(void *)(v568 + 48);
LABEL_518:
                            v585 = (void **)((v567 + 63) & 0xFFFFFFFFFFFFFFF8);
                            v586 = (void **)((v568 + 63) & 0xFFFFFFFFFFFFFFF8);
                            uint64_t v587 = *v586;
                            uint64_t v588 = *v585;
                            void *v585 = *v586;
                            id v589 = v587;

                            *(void *)(((unint64_t)v585 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v586 + 15) & 0xFFFFFFFFFFFFFFF8);
                            uint64_t v590 = (char *)(((unint64_t)v542 + v708) & v715);
                            v591 = (unsigned char *)(((unint64_t)v383 + v708) & v715);
                            int v592 = v688(v590, 1, v724);
                            int v593 = v688(v591, 1, v724);
                            if (v592)
                            {
                              if (!v593)
                              {
                                (*(void (**)(char *, unsigned char *, uint64_t))(v695 + 16))(v590, v591, v724);
                                (*(void (**)(char *, void, uint64_t, uint64_t))(v695 + 56))(v590, 0, 1, v724);
                                goto LABEL_524;
                              }
                            }
                            else
                            {
                              if (!v593)
                              {
                                (*(void (**)(char *, unsigned char *, uint64_t))(v695 + 24))(v590, v591, v724);
LABEL_524:
                                size_t v594 = v665 + 16;
                                v595 = (void *)((unint64_t)&v590[v696] & 0xFFFFFFFFFFFFFFF8);
                                v596 = (void *)((unint64_t)&v591[v696] & 0xFFFFFFFFFFFFFFF8);
                                void *v595 = *v596;
                                unint64_t v597 = ((unint64_t)v595 + 15) & 0xFFFFFFFFFFFFFFF8;
                                unint64_t v598 = ((unint64_t)v596 + 15) & 0xFFFFFFFFFFFFFFF8;
                                *(void *)unint64_t v597 = *(void *)v598;
                                *(unsigned char *)(v597 + 8) = *(unsigned char *)(v598 + 8);
                                uint64_t v599 = (void *)((v717 + v597) & v684);
                                uint64_t v600 = (void *)((v717 + v598) & v684);
                                if (v687 == v709)
                                {
                                  uint64_t v601 = *(uint64_t (**)(void *, void, uint64_t))(v721 + 48);
                                  int v602 = v601(v599, v687, v719);
                                  int v603 = v601(v600, v687, v719);
                                  if (v602) {
                                    goto LABEL_526;
                                  }
                                }
                                else
                                {
                                  v604 = (uint64_t *)(((unint64_t)v599 + v698) & 0xFFFFFFFFFFFFFFF8);
                                  if (v669 <= 0x7FFFFFFE)
                                  {
                                    uint64_t v606 = *v604;
                                    if ((unint64_t)*v604 >= 0xFFFFFFFF) {
                                      LODWORD(v606) = -1;
                                    }
                                    unsigned int v607 = v606 + 1;
                                    v605 = (uint64_t *)(((unint64_t)v600 + v698) & 0xFFFFFFFFFFFFFFF8);
                                    uint64_t v608 = *v605;
                                    if ((unint64_t)*v605 >= 0xFFFFFFFF) {
                                      LODWORD(v608) = -1;
                                    }
                                    unsigned int v609 = v608 + 1;
                                    if (v607 >= 2)
                                    {
                                      if (v609 < 2) {
                                        goto LABEL_541;
                                      }
                                      goto LABEL_542;
                                    }
                                    if (v609 >= 2)
                                    {
LABEL_538:
                                      (*(void (**)(void *, uint64_t))(v721 + 8))(v599, v719);
                                      swift_bridgeObjectRelease();
                                      (*(void (**)(unint64_t, uint64_t))(v725 + 8))(((unint64_t)v604 + v701) & v702, v703);
                                      swift_bridgeObjectRelease();
                                      swift_bridgeObjectRelease();
LABEL_542:
                                      memcpy(v599, v600, v594);
                                      goto LABEL_545;
                                    }
LABEL_544:
                                    (*(void (**)(void *, void *, uint64_t))(v721 + 24))(v599, v600, v719);
                                    uint64_t *v604 = *v605;
                                    swift_bridgeObjectRetain();
                                    swift_bridgeObjectRelease();
                                    unint64_t v619 = ((unint64_t)v604 + v701) & v702;
                                    unint64_t v620 = ((unint64_t)v605 + v701) & v702;
                                    (*(void (**)(unint64_t, unint64_t, uint64_t))(v725 + 24))(v619, v620, v703);
                                    v621 = (void *)((v686 + v619) & 0xFFFFFFFFFFFFFFF8);
                                    unint64_t v622 = (v686 + v620) & 0xFFFFFFFFFFFFFFF8;
                                    uint64_t v623 = *(void *)v622;
                                    v622 += 15;
                                    void *v621 = v623;
                                    swift_bridgeObjectRetain();
                                    swift_bridgeObjectRelease();
                                    v624 = (void *)(((unint64_t)v621 + 15) & 0xFFFFFFFFFFFFFFF8);
                                    void *v624 = *(void *)(v622 & 0xFFFFFFFFFFFFFFF8);
                                    v624[1] = *(void *)((v622 & 0xFFFFFFFFFFFFFFF8) + 8);
                                    swift_bridgeObjectRetain();
                                    swift_bridgeObjectRelease();
LABEL_545:
                                    uint64_t v625 = (uint64_t)v600 + v594 + 10;
                                    uint64_t v626 = (uint64_t)v600 + v594 + 34;
                                    *((unsigned char *)v599 + v594) = *((unsigned char *)v600 + v594);
                                    uint64_t v627 = (uint64_t)v599 + v594 + 34;
                                    *(unsigned char *)(((unint64_t)v599 + v594) | 1) = *(unsigned char *)(((unint64_t)v600
                                                                                                + v594) | 1);
                                    *(unsigned char *)(((unint64_t)v599 + v594) | 2) = *(unsigned char *)(((unint64_t)v600
                                                                                                + v594) | 2);
                                    unint64_t v628 = ((unint64_t)v599 + v594 + 10) & 0xFFFFFFFFFFFFFFF8;
                                    uint64_t v629 = *(void *)(v625 & 0xFFFFFFFFFFFFFFF8);
                                    uint64_t v630 = *(void *)((v625 & 0xFFFFFFFFFFFFFFF8) + 8);
                                    char v631 = *(unsigned char *)((v625 & 0xFFFFFFFFFFFFFFF8) + 16);
                                    sub_10009C5FC(v629, v630, v631);
                                    uint64_t v632 = *(void *)v628;
                                    uint64_t v633 = *(void *)(v628 + 8);
                                    *(void *)unint64_t v628 = v629;
                                    *(void *)(v628 + 8) = v630;
                                    char v634 = *(unsigned char *)(v628 + 16);
                                    *(unsigned char *)(v628 + 16) = v631;
                                    sub_1000D31F8(v632, v633, v634);
                                    unint64_t v635 = v627 & 0xFFFFFFFFFFFFFFF8;
                                    unint64_t v636 = v626 & 0xFFFFFFFFFFFFFFF8;
                                    v637 = (uint64_t *)((v627 & 0xFFFFFFFFFFFFFFF8) + 8);
                                    unint64_t v638 = *(void *)((v627 & 0xFFFFFFFFFFFFFFF8) + 16);
                                    v639 = (uint64_t *)(v636 + 8);
                                    uint64_t v640 = *(void *)(v636 + 16) >> 60;
                                    BOOL v81 = ((4 * v640) & 0xC) == 0;
                                    int v641 = (4 * v640) & 0xC | (v640 >> 2);
                                    int v642 = v81;
                                    if (v641 == 15) {
                                      int v643 = 1;
                                    }
                                    else {
                                      int v643 = v642;
                                    }
                                    if (!(4 * ((v638 >> 60) & 3))
                                      || (((v638 >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((v638 >> 60) & 3))) == 0xF)
                                    {
                                      if (v643)
                                      {
                                        *(void *)unint64_t v635 = *(void *)v636;
                                        unint64_t v644 = *(void *)(v636 + 16);
                                        if (v638 >> 60 != 15)
                                        {
                                          if (v644 >> 60 != 15)
                                          {
                                            uint64_t v649 = *v639;
                                            sub_10001EBB0(*v639, *(void *)(v636 + 16));
                                            uint64_t v650 = *(void *)(v635 + 8);
                                            unint64_t v651 = *(void *)(v635 + 16);
                                            *(void *)(v635 + 8) = v649;
                                            *(void *)(v635 + 16) = v644;
                                            sub_10001E9C0(v650, v651);
                                            goto LABEL_566;
                                          }
                                          sub_10011A770((uint64_t)v637);
                                          goto LABEL_564;
                                        }
LABEL_557:
                                        if (v644 >> 60 != 15)
                                        {
                                          uint64_t v645 = *v639;
                                          sub_10001EBB0(*v639, v644);
                                          *(void *)(v635 + 8) = v645;
                                          *(void *)(v635 + 16) = v644;
LABEL_566:
                                          uint64_t v489 = v670;
                                          long long v652 = *(_OWORD *)(v636 + 24);
                                          *(unsigned char *)(v635 + 40) = *(unsigned char *)(v636 + 40);
                                          *(_OWORD *)(v635 + 24) = v652;
                                          *(void *)(v635 + 48) = *(void *)(v636 + 48);
                                          goto LABEL_567;
                                        }
LABEL_564:
                                        *(_OWORD *)v637 = *(_OWORD *)v639;
                                        goto LABEL_566;
                                      }
                                      if (v638 >> 60 != 15) {
                                        sub_10001E9C0(*v637, v638);
                                      }
                                    }
                                    else if (v643)
                                    {
                                      *(void *)unint64_t v635 = *(void *)v636;
                                      unint64_t v644 = *(void *)(v636 + 16);
                                      goto LABEL_557;
                                    }
                                    long long v646 = *(_OWORD *)v636;
                                    long long v647 = *(_OWORD *)(v636 + 16);
                                    long long v648 = *(_OWORD *)(v636 + 32);
                                    *(void *)(v635 + 48) = *(void *)(v636 + 48);
                                    *(_OWORD *)(v635 + 16) = v647;
                                    *(_OWORD *)(v635 + 32) = v648;
                                    *(_OWORD *)unint64_t v635 = v646;
                                    uint64_t v489 = v670;
LABEL_567:
                                    v653 = (void **)((v635 + 63) & 0xFFFFFFFFFFFFFFF8);
                                    v654 = (void **)((v636 + 63) & 0xFFFFFFFFFFFFFFF8);
                                    v655 = *v654;
                                    v656 = *v653;
                                    *v653 = *v654;
                                    id v657 = v655;

                                    *(void *)(((unint64_t)v653 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v654 + 15) & 0xFFFFFFFFFFFFFFF8);
                                    unint64_t v658 = (unint64_t)&v590[v699];
                                    *(unsigned char *)unint64_t v658 = v591[v699];
                                    unint64_t v659 = (unint64_t)&v591[v699] & 0xFFFFFFFFFFFFFFF8;
                                    *(void *)((v658 & 0xFFFFFFFFFFFFFFF8) + 8) = *(void *)(v659 + 8);
                                    swift_bridgeObjectRetain();
                                    swift_bridgeObjectRelease();
                                    v660 = (void *)((((unint64_t)&v590[v699] & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8);
                                    v661 = (void *)((v659 + 23) & 0xFFFFFFFFFFFFFFF8);
                                    void *v660 = *v661;
                                    v660[1] = v661[1];
                                    unint64_t v662 = ((unint64_t)v660 + 23) & 0xFFFFFFFFFFFFFFF8;
                                    unint64_t v663 = ((unint64_t)v661 + 23) & 0xFFFFFFFFFFFFFFF8;
                                    *(void *)unint64_t v662 = *(void *)v663;
                                    *(unsigned char *)(v662 + 8) = *(unsigned char *)(v663 + 8);
                                    *(void *)(((unint64_t)v660 + 39) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v661 + 39) & 0xFFFFFFFFFFFFFFF8);
                                    return v489;
                                  }
                                  v610 = *(uint64_t (**)(unint64_t, void, uint64_t))(v725 + 48);
                                  int v611 = v610(((unint64_t)v604 + v701) & v702, v667, v703);
                                  size_t v594 = v665 + 16;
                                  int v603 = v610((v701 + (((unint64_t)v600 + v698) & 0xFFFFFFFFFFFFFFF8)) & v702, v667, v703);
                                  if (v611)
                                  {
LABEL_526:
                                    if (!v603)
                                    {
                                      v604 = (uint64_t *)(((unint64_t)v599 + v698) & 0xFFFFFFFFFFFFFFF8);
                                      v605 = (uint64_t *)(((unint64_t)v600 + v698) & 0xFFFFFFFFFFFFFFF8);
LABEL_541:
                                      (*(void (**)(void *, void *, uint64_t))(v721 + 16))(v599, v600, v719);
                                      uint64_t *v604 = *v605;
                                      unint64_t v612 = ((unint64_t)v604 + v701) & v702;
                                      unint64_t v613 = ((unint64_t)v605 + v701) & v702;
                                      v614 = *(void (**)(unint64_t, unint64_t, uint64_t))(v725 + 16);
                                      swift_bridgeObjectRetain();
                                      v614(v612, v613, v703);
                                      v615 = (void *)((v686 + v612) & 0xFFFFFFFFFFFFFFF8);
                                      v616 = (void *)((v686 + v613) & 0xFFFFFFFFFFFFFFF8);
                                      void *v615 = *v616;
                                      v617 = (void *)(((unint64_t)v615 + 15) & 0xFFFFFFFFFFFFFFF8);
                                      v618 = (void *)(((unint64_t)v616 + 15) & 0xFFFFFFFFFFFFFFF8);
                                      void *v617 = *v618;
                                      v617[1] = v618[1];
                                      swift_bridgeObjectRetain();
                                      swift_bridgeObjectRetain();
                                      goto LABEL_545;
                                    }
                                    goto LABEL_542;
                                  }
                                }
                                v604 = (uint64_t *)(((unint64_t)v599 + v698) & 0xFFFFFFFFFFFFFFF8);
                                if (v603) {
                                  goto LABEL_538;
                                }
                                v605 = (uint64_t *)(((unint64_t)v600 + v698) & 0xFFFFFFFFFFFFFFF8);
                                goto LABEL_544;
                              }
                              (*(void (**)(char *, uint64_t))(v695 + 8))(v590, v724);
                            }
                            memcpy(v590, v591, v694);
                            goto LABEL_524;
                          }
LABEL_515:
                          *(_OWORD *)uint64_t v569 = *(_OWORD *)v571;
                          goto LABEL_517;
                        }
                        if (v570 >> 60 != 15) {
                          sub_10001E9C0(*v569, v570);
                        }
                      }
                      else if (v575)
                      {
                        *(void *)unint64_t v567 = *(void *)v568;
                        unint64_t v576 = *(void *)(v568 + 16);
                        goto LABEL_508;
                      }
                      long long v578 = *(_OWORD *)v568;
                      long long v579 = *(_OWORD *)(v568 + 16);
                      long long v580 = *(_OWORD *)(v568 + 32);
                      *(void *)(v567 + 48) = *(void *)(v568 + 48);
                      *(_OWORD *)(v567 + 16) = v579;
                      *(_OWORD *)(v567 + 32) = v580;
                      *(_OWORD *)unint64_t v567 = v578;
                      goto LABEL_518;
                    }
LABEL_494:
                    (*(void (**)(void *, void *, uint64_t))(v376 + 24))(v511, v512, v720);
                    *uint64_t v516 = *v517;
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRelease();
                    unint64_t v551 = ((unint64_t)v516 + v704) & v705;
                    unint64_t v552 = ((unint64_t)v517 + v704) & v705;
                    (*(void (**)(unint64_t, unint64_t, uint64_t))(v726 + 24))(v551, v552, v706);
                    v553 = (void *)((v685 + v551) & 0xFFFFFFFFFFFFFFF8);
                    unint64_t v554 = (v685 + v552) & 0xFFFFFFFFFFFFFFF8;
                    uint64_t v555 = *(void *)v554;
                    v554 += 15;
                    void *v553 = v555;
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRelease();
                    v556 = (void *)(((unint64_t)v553 + 15) & 0xFFFFFFFFFFFFFFF8);
                    void *v556 = *(void *)(v554 & 0xFFFFFFFFFFFFFFF8);
                    v556[1] = *(void *)((v554 & 0xFFFFFFFFFFFFFFF8) + 8);
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRelease();
                    unint64_t v550 = v666 + 16;
                    goto LABEL_495;
                  }
                  uint64_t v524 = *(uint64_t (**)(unint64_t, void, uint64_t))(v726 + 48);
                  int v525 = v524(((unint64_t)v516 + v704) & v705, v668, v706);
                  uint64_t v526 = v377;
                  int v527 = v525;
                  uint64_t v376 = v728;
                  int v515 = v524((v704 + (((unint64_t)v512 + v526) & 0xFFFFFFFFFFFFFFF8)) & v705, v668, v706);
                  if (v527)
                  {
LABEL_441:
                    size_t v383 = v362;
                    if (!v515)
                    {
                      uint64_t v516 = (uint64_t *)(((unint64_t)v511 + v713) & 0xFFFFFFFFFFFFFFF8);
                      uint64_t v517 = (uint64_t *)(((unint64_t)v512 + v713) & 0xFFFFFFFFFFFFFFF8);
LABEL_491:
                      v542 = v375;
                      (*(void (**)(void *, void *, uint64_t))(v376 + 16))(v511, v512, v720);
                      *uint64_t v516 = *v517;
                      unint64_t v543 = ((unint64_t)v516 + v704) & v705;
                      unint64_t v544 = ((unint64_t)v517 + v704) & v705;
                      v545 = *(void (**)(unint64_t, unint64_t, uint64_t))(v726 + 16);
                      swift_bridgeObjectRetain();
                      v545(v543, v544, v706);
                      v546 = (void *)((v685 + v543) & 0xFFFFFFFFFFFFFFF8);
                      v547 = (void *)((v685 + v544) & 0xFFFFFFFFFFFFFFF8);
                      void *v546 = *v547;
                      v548 = (void *)(((unint64_t)v546 + 15) & 0xFFFFFFFFFFFFFFF8);
                      v549 = (void *)(((unint64_t)v547 + 15) & 0xFFFFFFFFFFFFFFF8);
                      void *v548 = *v549;
                      v548[1] = v549[1];
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      unint64_t v550 = v666 + 16;
                      goto LABEL_496;
                    }
                    goto LABEL_492;
                  }
                }
                uint64_t v516 = (uint64_t *)(((unint64_t)v511 + v713) & 0xFFFFFFFFFFFFFFF8);
                if (v515)
                {
                  size_t v383 = v362;
                  goto LABEL_459;
                }
                uint64_t v517 = (uint64_t *)(((unint64_t)v512 + v713) & 0xFFFFFFFFFFFFFFF8);
                size_t v383 = v362;
                goto LABEL_494;
              }
              (*(void (**)(void *, uint64_t))(v679 + 8))(v375, v378);
            }
            memcpy(v375, v383, __n);
            goto LABEL_439;
          }
          size_t v383 = v362;
          unint64_t v397 = (v723 + (((((unint64_t)v362 + v700) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v722;
          if (v366 == v368)
          {
            uint64_t v381 = v724;
            size_t v382 = v666 + 16;
            if (v331 == v718)
            {
              unsigned int v398 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v376 + 48))(v397, v331, v720);
              goto LABEL_427;
            }
            uint64_t v403 = (unint64_t *)((v377 + v397) & 0xFFFFFFFFFFFFFFF8);
            if (v680 > 0x7FFFFFFE)
            {
              unsigned int v398 = (*(uint64_t (**)(unint64_t, void, uint64_t))(v726 + 48))(((unint64_t)v403 + v704) & v705, v668, v706);
              goto LABEL_427;
            }
LABEL_367:
            unint64_t v412 = *v403;
            if (v412 >= 0xFFFFFFFF) {
              unsigned int v398 = -1;
            }
            else {
              unsigned int v398 = v412;
            }
            if (v398 + 1 < 2) {
              goto LABEL_428;
            }
            goto LABEL_427;
          }
          unint64_t v401 = *(void *)((((v666 + v397 + 26) & 0xFFFFFFFFFFFFFFF8) + 87) & 0xFFFFFFFFFFFFFFF8);
          if (v401 >= 0xFFFFFFFF) {
            LODWORD(v401) = -1;
          }
          uint64_t v381 = v724;
          size_t v382 = v666 + 16;
          if ((v401 + 1) < 2) {
            goto LABEL_428;
          }
          goto LABEL_431;
        }
      }
    }
    if (v386 >= 2) {
      goto LABEL_307;
    }
    goto LABEL_304;
  }
  unint64_t v375 = v361;
  unint64_t v380 = ((unint64_t)v361 + v708) & v715;
  if (v372 != v374)
  {
    uint64_t v381 = v724;
    size_t v382 = v666 + 16;
    size_t v383 = v362;
    if (*(void *)(((v380 + v699) & 0xFFFFFFFFFFFFFFF8) + 8) <= 0xFFFFFFFEuLL) {
      goto LABEL_341;
    }
    goto LABEL_335;
  }
  if (v369 == v372)
  {
    uint64_t v381 = v724;
    size_t v382 = v666 + 16;
    size_t v383 = v362;
    if (v681 >= 2)
    {
      unsigned int v384 = v688((void *)v380, v681, v724);
      uint64_t v364 = v681;
      if (v384 >= 2) {
        goto LABEL_341;
      }
    }
    goto LABEL_335;
  }
  unint64_t v387 = (v717 + ((((v696 + v380) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v684;
  if (v370 == v372)
  {
    uint64_t v381 = v724;
    size_t v382 = v666 + 16;
    size_t v383 = v362;
    if (v687 == v709)
    {
      unsigned int v388 = (*(uint64_t (**)(unint64_t))(v721 + 48))(v387);
    }
    else
    {
      uint64_t v393 = (unint64_t *)((v698 + v387) & 0xFFFFFFFFFFFFFFF8);
      if (v669 <= 0x7FFFFFFE)
      {
        unint64_t v394 = *v393;
        if (v394 >= 0xFFFFFFFF) {
          unsigned int v388 = -1;
        }
        else {
          unsigned int v388 = v394;
        }
        if (v388 + 1 < 2) {
          goto LABEL_335;
        }
        goto LABEL_334;
      }
      unsigned int v388 = (*(uint64_t (**)(unint64_t))(v725 + 48))(((unint64_t)v393 + v701) & v702);
    }
    uint64_t v364 = v681;
LABEL_334:
    if (v388 >= 2) {
      goto LABEL_341;
    }
    goto LABEL_335;
  }
  unint64_t v392 = *(void *)((((v665 + v387 + 26) & 0xFFFFFFFFFFFFFFF8) + 87) & 0xFFFFFFFFFFFFFFF8);
  if (v392 >= 0xFFFFFFFF) {
    LODWORD(v392) = -1;
  }
  uint64_t v381 = v724;
  size_t v382 = v666 + 16;
  size_t v383 = v362;
  if ((v392 + 1) >= 2)
  {
LABEL_341:
    unint64_t v407 = ((unint64_t)v383 + v708) & v715;
    if (v372 != v374)
    {
      uint64_t v376 = v728;
      uint64_t v377 = v713;
      uint64_t v378 = AssociatedTypeWitness;
      if (*(void *)(((v407 + v699) & 0xFFFFFFFFFFFFFFF8) + 8) < 0xFFFFFFFFuLL) {
        goto LABEL_569;
      }
      goto LABEL_381;
    }
    if (v369 == v372)
    {
      uint64_t v376 = v728;
      uint64_t v377 = v713;
      uint64_t v378 = AssociatedTypeWitness;
      if (v364 < 2) {
        goto LABEL_381;
      }
      unsigned int v396 = v688((void *)v407, v364, v381);
      goto LABEL_345;
    }
    unint64_t v409 = (v717 + ((((v696 + v407) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v684;
    if (v370 != v372)
    {
      unint64_t v411 = *(void *)((((v665 + v409 + 26) & 0xFFFFFFFFFFFFFFF8) + 87) & 0xFFFFFFFFFFFFFFF8);
      if (v411 >= 0xFFFFFFFF) {
        LODWORD(v411) = -1;
      }
      uint64_t v376 = v728;
      uint64_t v377 = v713;
      uint64_t v378 = AssociatedTypeWitness;
      if ((v411 + 1) >= 2) {
        goto LABEL_569;
      }
      goto LABEL_381;
    }
    if (v687 == v709)
    {
      uint64_t v376 = v728;
      uint64_t v377 = v713;
      uint64_t v378 = AssociatedTypeWitness;
      if ((*(unsigned int (**)(unint64_t))(v721 + 48))(v409) < 2) {
        goto LABEL_381;
      }
    }
    else
    {
      uint64_t v413 = (unint64_t *)((v698 + v409) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v376 = v728;
      uint64_t v377 = v713;
      uint64_t v378 = AssociatedTypeWitness;
      if (v669 <= 0x7FFFFFFE)
      {
        unint64_t v414 = *v413;
        if (v414 >= 0xFFFFFFFF) {
          unsigned int v400 = -1;
        }
        else {
          unsigned int v400 = v414;
        }
        if (v400 + 1 < 2) {
          goto LABEL_381;
        }
        goto LABEL_380;
      }
      if ((*(unsigned int (**)(unint64_t, void, uint64_t))(v725 + 48))(((unint64_t)v413 + v701) & v702, v667, v703) < 2)goto LABEL_381; {
    }
      }
LABEL_569:
    memcpy(v375, v383, v672);
    return v670;
  }
LABEL_335:
  unint64_t v406 = ((unint64_t)v383 + v708) & v715;
  if (v372 == v374)
  {
    if (v369 == v372)
    {
      uint64_t v376 = v728;
      uint64_t v377 = v713;
      uint64_t v378 = AssociatedTypeWitness;
      if (v364 < 2) {
        goto LABEL_428;
      }
      unsigned int v395 = v688((void *)v406, v364, v381);
      goto LABEL_339;
    }
    unint64_t v408 = (v717 + ((((v696 + v406) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v684;
    if (v370 == v372)
    {
      uint64_t v376 = v728;
      uint64_t v377 = v713;
      uint64_t v378 = AssociatedTypeWitness;
      if (v687 == v709)
      {
        unsigned int v398 = (*(uint64_t (**)(unint64_t, void, uint64_t))(v721 + 48))(v408, v687, v719);
      }
      else
      {
        uint64_t v403 = (unint64_t *)((v698 + v408) & 0xFFFFFFFFFFFFFFF8);
        if (v669 <= 0x7FFFFFFE) {
          goto LABEL_367;
        }
        unsigned int v398 = (*(uint64_t (**)(unint64_t, void, uint64_t))(v725 + 48))(((unint64_t)v403 + v701) & v702, v667, v703);
      }
LABEL_427:
      if (v398 >= 2) {
        goto LABEL_431;
      }
      goto LABEL_428;
    }
    unint64_t v410 = *(void *)((((v665 + v408 + 26) & 0xFFFFFFFFFFFFFFF8) + 87) & 0xFFFFFFFFFFFFFFF8);
    if (v410 >= 0xFFFFFFFF) {
      LODWORD(v410) = -1;
    }
    uint64_t v376 = v728;
    uint64_t v377 = v713;
    uint64_t v378 = AssociatedTypeWitness;
    if ((v410 + 1) < 2) {
      goto LABEL_428;
    }
  }
  else
  {
    uint64_t v376 = v728;
    uint64_t v377 = v713;
    uint64_t v378 = AssociatedTypeWitness;
    if (*(void *)(((v406 + v699) & 0xFFFFFFFFFFFFFFF8) + 8) >= 0xFFFFFFFFuLL) {
      goto LABEL_428;
    }
  }
LABEL_431:
  if (!v697(v375, 1, v378)) {
    (*(void (**)(void *, uint64_t))(v679 + 8))(v375, v378);
  }
  unint64_t v506 = (v723 + (((((unint64_t)v375 + v700) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v722;
  if (v331 == v718)
  {
    if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v376 + 48))((v723 + (((((unint64_t)v375 + v700) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v722, v331, v720))
    {
      goto LABEL_463;
    }
LABEL_461:
    v522 = (uint64_t *)((v377 + v506) & 0xFFFFFFFFFFFFFFF8);
LABEL_462:
    (*(void (**)(unint64_t, uint64_t))(v376 + 8))(v506, v720);
    swift_bridgeObjectRelease();
    (*(void (**)(unint64_t, uint64_t))(v726 + 8))(((unint64_t)v522 + v704) & v705, v706);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_463;
  }
  v522 = (uint64_t *)((v377 + v506) & 0xFFFFFFFFFFFFFFF8);
  if (v680 > 0x7FFFFFFE)
  {
    if ((*(unsigned int (**)(unint64_t, void, uint64_t))(v726 + 48))(((unint64_t)v522 + v704) & v705, v668, v706))
    {
      goto LABEL_463;
    }
    goto LABEL_461;
  }
  uint64_t v523 = *v522;
  if ((unint64_t)*v522 >= 0xFFFFFFFF) {
    LODWORD(v523) = -1;
  }
  if ((v523 + 1) < 2) {
    goto LABEL_462;
  }
LABEL_463:
  unint64_t v528 = v506 + v382;
  sub_1000D31F8(*(void *)((v528 + 10) & 0xFFFFFFFFFFFFFFF8), *(void *)(((v528 + 10) & 0xFFFFFFFFFFFFFFF8) + 8), *(unsigned char *)(((v528 + 10) & 0xFFFFFFFFFFFFFFF8) + 16));
  unint64_t v529 = (v528 + 34) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v530 = *(void *)(v529 + 16);
  BOOL v531 = ((4 * (v530 >> 60)) & 0xC | ((v530 >> 60) >> 2)) != 0xF && ((4 * (v530 >> 60)) & 0xC) != 0;
  if (v530 >> 60 != 15 && !v531) {
    sub_10001E9C0(*(void *)(v529 + 8), v530);
  }

  unint64_t v532 = ((unint64_t)v375 + v708) & v715;
  uint64_t v489 = v670;
  if (!v688((void *)v532, 1, v381)) {
    (*(void (**)(unint64_t, uint64_t))(v695 + 8))(v532, v381);
  }
  unint64_t v533 = (v717 + ((((v696 + v532) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v684;
  if (v687 == v709)
  {
    int v534 = (*(uint64_t (**)(size_t))(v721 + 48))((v717
                                                          + ((((v696 + v532) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v684);
  }
  else
  {
    uint64_t v535 = (uint64_t *)((v698 + v533) & 0xFFFFFFFFFFFFFFF8);
    if (v669 <= 0x7FFFFFFE)
    {
      uint64_t v536 = *v535;
      if ((unint64_t)*v535 >= 0xFFFFFFFF) {
        LODWORD(v536) = -1;
      }
      unint64_t v537 = v665 + 16;
      if ((v536 + 1) >= 2) {
        goto LABEL_482;
      }
      goto LABEL_481;
    }
    int v534 = (*(uint64_t (**)(unint64_t))(v725 + 48))(((unint64_t)v535 + v701) & v702);
  }
  unint64_t v537 = v665 + 16;
  if (!v534)
  {
    uint64_t v535 = (uint64_t *)((v698 + v533) & 0xFFFFFFFFFFFFFFF8);
LABEL_481:
    (*(void (**)(unint64_t, uint64_t))(v721 + 8))(v533, v719);
    swift_bridgeObjectRelease();
    (*(void (**)(unint64_t, uint64_t))(v725 + 8))(((unint64_t)v535 + v701) & v702, v703);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
LABEL_482:
  unint64_t v538 = v533 + v537;
  sub_1000D31F8(*(void *)((v538 + 10) & 0xFFFFFFFFFFFFFFF8), *(void *)(((v538 + 10) & 0xFFFFFFFFFFFFFFF8) + 8), *(unsigned char *)(((v538 + 10) & 0xFFFFFFFFFFFFFFF8) + 16));
  unint64_t v539 = (v538 + 34) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v540 = *(void *)(v539 + 16);
  BOOL v541 = ((4 * (v540 >> 60)) & 0xC | ((v540 >> 60) >> 2)) != 0xF && ((4 * (v540 >> 60)) & 0xC) != 0;
  if (v540 >> 60 != 15 && !v541) {
    sub_10001E9C0(*(void *)(v539 + 8), v540);
  }

  swift_bridgeObjectRelease();
  memcpy(v375, v383, v672);
  return v489;
}

uint64_t sub_10011A770(uint64_t a1)
{
  return a1;
}

uint64_t sub_10011A7C4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v256 = *(void *)(AssociatedTypeWitness - 8);
  int v5 = *(_DWORD *)(v256 + 80) & 0xF8;
  uint64_t v279 = swift_getAssociatedTypeWitness();
  uint64_t v291 = *(void *)(v279 - 8);
  int v6 = *(_DWORD *)(v291 + 80) & 0xF8;
  uint64_t v268 = swift_getAssociatedTypeWitness();
  uint64_t v286 = *(void *)(v268 - 8);
  uint64_t v288 = *(unsigned __int8 *)(v286 + 80);
  uint64_t v7 = v6 | v288 | 7;
  int v8 = v6 | v288 | v5;
  uint64_t v280 = swift_getAssociatedTypeWitness();
  uint64_t v255 = *(void *)(v280 - 8);
  int v9 = *(_DWORD *)(v255 + 80) & 0xF8;
  uint64_t v278 = swift_getAssociatedTypeWitness();
  uint64_t v290 = *(void *)(v278 - 8);
  int v10 = *(_DWORD *)(v290 + 80) & 0xF8;
  uint64_t v262 = swift_getAssociatedTypeWitness();
  uint64_t v282 = *(void *)(v262 - 8);
  uint64_t v294 = *(unsigned __int8 *)(v282 + 80);
  uint64_t v11 = v10 | v294 | 7;
  uint64_t v12 = v11 | v9;
  uint64_t v13 = v8 | v12;
  uint64_t v246 = a1;
  uint64_t v247 = v13 + 9;
  uint64_t v250 = v13 + 9 + a1;
  unint64_t v14 = v250 & ~v13;
  uint64_t v272 = v13;
  uint64_t v263 = v13 + 9 + a2;
  unint64_t v15 = v263 & ~v13;
  uint64_t v265 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v256 + 48);
  uint64_t v271 = AssociatedTypeWitness;
  if (v265(v15, 1, AssociatedTypeWitness))
  {
    unsigned int v16 = *(_DWORD *)(v256 + 84);
    size_t v17 = *(void *)(v256 + 64);
    if (v16) {
      size_t v18 = *(void *)(v256 + 64);
    }
    else {
      size_t v18 = v17 + 1;
    }
    memcpy((void *)v14, (const void *)v15, v18);
  }
  else
  {
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v256 + 32))(v14, v15, AssociatedTypeWitness);
    (*(void (**)(unint64_t, void, uint64_t, uint64_t))(v256 + 56))(v14, 0, 1, AssociatedTypeWitness);
    unsigned int v16 = *(_DWORD *)(v256 + 84);
    size_t v17 = *(void *)(v256 + 64);
  }
  uint64_t v19 = v288;
  unsigned int v249 = v16;
  if (v16) {
    size_t v20 = v17;
  }
  else {
    size_t v20 = v17 + 1;
  }
  size_t v21 = (void *)(((v14 | 7) + v20) & 0xFFFFFFFFFFFFFFF8);
  size_t v275 = v20;
  size_t v22 = (void *)(((v15 | 7) + v20) & 0xFFFFFFFFFFFFFFF8);
  *size_t v21 = *v22;
  unint64_t v23 = ((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v24 = ((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v23 = *(void *)v24;
  *(unsigned char *)(v23 + 8) = *(unsigned char *)(v24 + 8);
  uint64_t v287 = ~v7;
  uint64_t v289 = v7 + 9;
  uint64_t v25 = (void *)((v7 + 9 + v23) & ~v7);
  unint64_t v26 = (const void *)((v7 + 9 + v24) & ~v7);
  uint64_t v27 = *(unsigned int *)(v291 + 84);
  unsigned int v243 = *(_DWORD *)(v286 + 84);
  if (v27 <= v243) {
    unsigned int v28 = *(_DWORD *)(v286 + 84);
  }
  else {
    unsigned int v28 = *(_DWORD *)(v291 + 84);
  }
  if (v28 <= 0x7FFFFFFE) {
    int v29 = 2147483646;
  }
  else {
    int v29 = v28;
  }
  uint64_t v30 = *(void *)(v291 + 64) + 7;
  uint64_t v267 = ~v19;
  uint64_t v266 = v19 + 8;
  uint64_t v253 = *(void *)(v286 + 64) + 7;
  size_t v31 = ((((v253 + ((v19 + 8 + (v30 & 0xFFFFFFFFFFFFFFF8)) & ~v19)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  int v285 = v29;
  unsigned int v254 = *(_DWORD *)(v291 + 84);
  unsigned int v245 = v28;
  unint64_t v241 = (((v253 + ((v19 + 8 + (v30 & 0xFFFFFFFFFFFFFFF8)) & ~v19)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v292 = v11;
  unint64_t v32 = v14;
  uint64_t v33 = v12;
  if (v27 == v29)
  {
    int v34 = (*(uint64_t (**)(const void *, uint64_t, uint64_t))(v291 + 48))(v26, v27, v279);
  }
  else
  {
    size_t v35 = (uint64_t *)(((unint64_t)v26 + v30) & 0xFFFFFFFFFFFFFFF8);
    if (v28 <= 0x7FFFFFFE)
    {
      uint64_t v36 = *v35;
      if ((unint64_t)*v35 >= 0xFFFFFFFF) {
        LODWORD(v36) = -1;
      }
      uint64_t v37 = v255;
      if ((v36 + 1) >= 2) {
        goto LABEL_25;
      }
      goto LABEL_27;
    }
    int v34 = (*(uint64_t (**)(unint64_t, void, uint64_t))(v286 + 48))(((unint64_t)v35 + v266) & v267, v243, v268);
  }
  uint64_t v37 = v255;
  if (v34)
  {
LABEL_25:
    memcpy(v25, v26, v31);
    goto LABEL_28;
  }
  size_t v35 = (uint64_t *)(((unint64_t)v26 + v30) & 0xFFFFFFFFFFFFFFF8);
LABEL_27:
  (*(void (**)(void *, const void *, uint64_t))(v291 + 32))(v25, v26, v279);
  int v38 = (void *)(((unint64_t)v25 + v30) & 0xFFFFFFFFFFFFFFF8);
  *int v38 = *v35;
  uint64_t v39 = v30;
  unint64_t v40 = ((unint64_t)v38 + v266) & v267;
  unint64_t v41 = ((unint64_t)v35 + v266) & v267;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v286 + 32))(v40, v41, v268);
  unint64_t v42 = v253 + v40;
  uint64_t v30 = v39;
  uint64_t v27 = v254;
  v42 &= 0xFFFFFFFFFFFFFFF8;
  uint64_t v43 = (void *)((v253 + v41) & 0xFFFFFFFFFFFFFFF8);
  *(void *)unint64_t v42 = *v43;
  *(_OWORD *)((v42 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v43 + 15) & 0xFFFFFFFFFFFFFFF8);
LABEL_28:
  uint64_t v44 = v33;
  uint64_t v45 = (uint64_t)v26 + v31 + 10;
  *((unsigned char *)v25 + v31) = *((unsigned char *)v26 + v31);
  *(unsigned char *)(((unint64_t)v25 + v31) | 1) = *(unsigned char *)(((unint64_t)v26 + v31) | 1);
  *(unsigned char *)(((unint64_t)v25 + v31) | 2) = *(unsigned char *)(((unint64_t)v26 + v31) | 2);
  unint64_t v46 = ((unint64_t)v25 + v31 + 10) & 0xFFFFFFFFFFFFFFF8;
  long long v47 = *(_OWORD *)(v45 & 0xFFFFFFFFFFFFFFF8);
  *(unsigned char *)(v46 + 16) = *(unsigned char *)((v45 & 0xFFFFFFFFFFFFFFF8) + 16);
  *(_OWORD *)unint64_t v46 = v47;
  unint64_t v48 = ((unint64_t)v25 + v31 + 34) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v49 = ((unint64_t)v26 + v31 + 34) & 0xFFFFFFFFFFFFFFF8;
  long long v50 = *(_OWORD *)v49;
  long long v51 = *(_OWORD *)(v49 + 16);
  long long v52 = *(_OWORD *)(v49 + 32);
  *(void *)(v48 + 48) = *(void *)(v49 + 48);
  *(_OWORD *)(v48 + 16) = v51;
  *(_OWORD *)(v48 + 32) = v52;
  *(_OWORD *)unint64_t v48 = v50;
  unint64_t v53 = (void *)((v49 + 63) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v54 = (void *)((v48 + 63) & 0xFFFFFFFFFFFFFFF8);
  void *v54 = *v53;
  *(void *)(((unint64_t)v54 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v53 + 15) & 0xFFFFFFFFFFFFFFF8);
  size_t v269 = v275 + 7;
  size_t __n = v31;
  unint64_t v55 = ((((((((v289 + ((((v275 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v287) + v31 + 34) & 0xFFFFFFFFFFFFFFF8)
          + 63) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  unint64_t v56 = (v32 + v33 + v55) & ~v33;
  unint64_t v57 = (v15 + v33 + v55) & ~v33;
  uint64_t v58 = v280;
  uint64_t v259 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v37 + 48);
  uint64_t v270 = v30;
  if (v259(v57, 1, v280))
  {
    unsigned int v59 = *(_DWORD *)(v37 + 84);
    size_t v60 = *(void *)(v37 + 64);
    if (v59) {
      size_t v61 = *(void *)(v37 + 64);
    }
    else {
      size_t v61 = v60 + 1;
    }
    memcpy((void *)v56, (const void *)v57, v61);
  }
  else
  {
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v37 + 32))(v56, v57, v280);
    (*(void (**)(unint64_t, void, uint64_t, uint64_t))(v37 + 56))(v56, 0, 1, v280);
    unsigned int v59 = *(_DWORD *)(v37 + 84);
    size_t v60 = *(void *)(v37 + 64);
  }
  uint64_t v62 = v294;
  uint64_t v273 = ~v272;
  uint64_t v276 = v44;
  uint64_t v295 = ~v44;
  unsigned int v248 = v59;
  if (v59) {
    size_t v63 = v60;
  }
  else {
    size_t v63 = v60 + 1;
  }
  unint64_t v64 = (void *)(((v56 | 7) + v63) & 0xFFFFFFFFFFFFFFF8);
  size_t v274 = v63;
  unint64_t v65 = (void *)(((v57 | 7) + v63) & 0xFFFFFFFFFFFFFFF8);
  void *v64 = *v65;
  unint64_t v66 = ((unint64_t)v64 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v67 = ((unint64_t)v65 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v66 = *(void *)v67;
  *(unsigned char *)(v66 + 8) = *(unsigned char *)(v67 + 8);
  uint64_t v283 = ~v292;
  uint64_t v284 = v292 + 9;
  char v68 = (void *)((v292 + 9 + v66) & ~v292);
  uint64_t v69 = (const void *)((v292 + 9 + v67) & ~v292);
  unsigned int v70 = *(_DWORD *)(v290 + 84);
  unsigned int v242 = *(_DWORD *)(v282 + 84);
  if (v70 <= v242) {
    unsigned int v71 = *(_DWORD *)(v282 + 84);
  }
  else {
    unsigned int v71 = *(_DWORD *)(v290 + 84);
  }
  if (v71 <= 0x7FFFFFFE) {
    int v72 = 2147483646;
  }
  else {
    int v72 = v71;
  }
  uint64_t v73 = *(void *)(v290 + 64) + 7;
  uint64_t v261 = ~v62;
  uint64_t v260 = v62 + 8;
  uint64_t v252 = *(void *)(v282 + 64) + 7;
  size_t v74 = ((((v252 + ((v62 + 8 + (v73 & 0xFFFFFFFFFFFFFFF8)) & ~v62)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  int v281 = v72;
  uint64_t v293 = v73;
  int v258 = *(_DWORD *)(v290 + 84);
  unsigned int v244 = v71;
  unint64_t v240 = (((v252 + ((v62 + 8 + (v73 & 0xFFFFFFFFFFFFFFF8)) & ~v62)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  if (v70 == v72)
  {
    if (!(*(unsigned int (**)(const void *))(v290 + 48))(v69)) {
      goto LABEL_53;
    }
LABEL_52:
    size_t v77 = v74;
    memcpy(v68, v69, v74);
    uint64_t v78 = v271;
    uint64_t v79 = v263;
    uint64_t v80 = v250;
    goto LABEL_55;
  }
  unint64_t v75 = (uint64_t *)(((unint64_t)v69 + v73) & 0xFFFFFFFFFFFFFFF8);
  if (v71 <= 0x7FFFFFFE)
  {
    uint64_t v76 = *v75;
    if ((unint64_t)*v75 >= 0xFFFFFFFF) {
      LODWORD(v76) = -1;
    }
    if ((v76 + 1) < 2) {
      goto LABEL_54;
    }
    goto LABEL_52;
  }
  if ((*(unsigned int (**)(unint64_t, void, uint64_t))(v282 + 48))(((unint64_t)v75 + v260) & v261, v242, v262))
  {
    goto LABEL_52;
  }
LABEL_53:
  unint64_t v75 = (uint64_t *)(((unint64_t)v69 + v293) & 0xFFFFFFFFFFFFFFF8);
LABEL_54:
  (*(void (**)(void *, const void *, uint64_t))(v290 + 32))(v68, v69, v278);
  BOOL v81 = (void *)(((unint64_t)v68 + v293) & 0xFFFFFFFFFFFFFFF8);
  *BOOL v81 = *v75;
  unint64_t v82 = ((unint64_t)v81 + v260) & v261;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v282 + 32))(v82, ((unint64_t)v75 + v260) & v261, v262);
  uint64_t v80 = v250;
  unint64_t v83 = v252 + v82;
  uint64_t v58 = v280;
  v83 &= 0xFFFFFFFFFFFFFFF8;
  uint64_t v27 = v254;
  uint64_t v84 = (void *)((v252 + (((unint64_t)v75 + v260) & v261)) & 0xFFFFFFFFFFFFFFF8);
  *(void *)unint64_t v83 = *v84;
  *(_OWORD *)((v83 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v84 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v78 = v271;
  uint64_t v79 = v263;
  size_t v77 = v74;
LABEL_55:
  *((unsigned char *)v68 + v77) = *((unsigned char *)v69 + v77);
  *(unsigned char *)(((unint64_t)v68 + v77) | 1) = *(unsigned char *)(((unint64_t)v69 + v77) | 1);
  *(unsigned char *)(((unint64_t)v68 + v77) | 2) = *(unsigned char *)(((unint64_t)v69 + v77) | 2);
  unint64_t v85 = ((unint64_t)v68 + v77 + 10) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v86 = ((unint64_t)v69 + v77 + 10) & 0xFFFFFFFFFFFFFFF8;
  long long v87 = *(_OWORD *)v86;
  *(unsigned char *)(v85 + 16) = *(unsigned char *)(v86 + 16);
  *(_OWORD *)unint64_t v85 = v87;
  unint64_t v88 = ((unint64_t)v68 + v77 + 34) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v89 = ((unint64_t)v69 + v77 + 34) & 0xFFFFFFFFFFFFFFF8;
  long long v90 = *(_OWORD *)v89;
  long long v91 = *(_OWORD *)(v89 + 16);
  long long v92 = *(_OWORD *)(v89 + 32);
  *(void *)(v88 + 48) = *(void *)(v89 + 48);
  *(_OWORD *)(v88 + 16) = v91;
  *(_OWORD *)(v88 + 32) = v92;
  *(_OWORD *)unint64_t v88 = v90;
  unint64_t v93 = (void *)((v88 + 63) & 0xFFFFFFFFFFFFFFF8);
  long long v94 = (void *)((v89 + 63) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v93 = *v94;
  *(void *)(((unint64_t)v93 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v94 + 15) & 0xFFFFFFFFFFFFFFF8);
  size_t v264 = v274 + 7;
  unint64_t v95 = ((((((((v284 + ((((v274 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v283) + v77 + 34) & 0xFFFFFFFFFFFFFFF8)
          + 63) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  *(unsigned char *)(v95 + v56) = *(unsigned char *)(v95 + v57);
  unint64_t v96 = (v95 + v56) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v97 = (v95 + v57) & 0xFFFFFFFFFFFFFFF8;
  *(void *)(v96 + 8) = *(void *)(v97 + 8);
  uint64_t v98 = (_OWORD *)((v96 + 23) & 0xFFFFFFFFFFFFFFF8);
  id v99 = (_OWORD *)((v97 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v98 = *v99;
  unint64_t v100 = ((unint64_t)v98 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v101 = ((unint64_t)v99 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v100 = *(void *)v101;
  *(unsigned char *)(v100 + 8) = *(unsigned char *)(v101 + 8);
  *(void *)(((unint64_t)v98 + 39) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v99 + 39) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v277 = v55 + v276;
  unint64_t v251 = v95;
  unint64_t v102 = (((((v95 + (v277 & v295)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v103 = (void *)(((v80 | v272) + v102 + 8) & v273);
  int v104 = (const void *)(((v79 | v272) + v102 + 8) & v273);
  if (v265((unint64_t)v104, 1, v78))
  {
    memcpy(v103, v104, v275);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v256 + 32))(v103, v104, v78);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v256 + 56))(v103, 0, 1, v78);
  }
  int v105 = (void *)(((unint64_t)v103 + v269) & 0xFFFFFFFFFFFFFFF8);
  int v106 = (void *)(((unint64_t)v104 + v269) & 0xFFFFFFFFFFFFFFF8);
  *int v105 = *v106;
  unint64_t v107 = ((unint64_t)v105 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v108 = ((unint64_t)v106 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v107 = *(void *)v108;
  *(unsigned char *)(v107 + 8) = *(unsigned char *)(v108 + 8);
  uint64_t v109 = v290;
  uint64_t v110 = (void *)((v289 + v107) & v287);
  long long v111 = (const void *)((v289 + v108) & v287);
  if (v27 == v285)
  {
    if (!(*(unsigned int (**)(const void *, uint64_t, uint64_t))(v291 + 48))(v111, v27, v279)) {
      goto LABEL_68;
    }
LABEL_67:
    size_t v114 = __n;
    memcpy(v110, v111, __n);
    goto LABEL_70;
  }
  size_t v112 = (uint64_t *)(((unint64_t)v111 + v270) & 0xFFFFFFFFFFFFFFF8);
  if (v245 <= 0x7FFFFFFE)
  {
    uint64_t v113 = *v112;
    if ((unint64_t)*v112 >= 0xFFFFFFFF) {
      LODWORD(v113) = -1;
    }
    if ((v113 + 1) < 2) {
      goto LABEL_69;
    }
    goto LABEL_67;
  }
  if ((*(unsigned int (**)(unint64_t, void, uint64_t))(v286 + 48))(((unint64_t)v112 + v266) & v267, v243, v268))
  {
    goto LABEL_67;
  }
LABEL_68:
  size_t v112 = (uint64_t *)(((unint64_t)v111 + v270) & 0xFFFFFFFFFFFFFFF8);
LABEL_69:
  (*(void (**)(void *, const void *, uint64_t))(v291 + 32))(v110, v111, v279);
  uint64_t v115 = (void *)(((unint64_t)v110 + v270) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v115 = *v112;
  unint64_t v116 = ((unint64_t)v115 + v266) & v267;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v286 + 32))(v116, ((unint64_t)v112 + v266) & v267, v268);
  unint64_t v117 = v253 + v116;
  uint64_t v58 = v280;
  v117 &= 0xFFFFFFFFFFFFFFF8;
  uint64_t v118 = (void *)((v253 + (((unint64_t)v112 + v266) & v267)) & 0xFFFFFFFFFFFFFFF8);
  *(void *)unint64_t v117 = *v118;
  *(_OWORD *)((v117 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v118 + 15) & 0xFFFFFFFFFFFFFFF8);
  size_t v114 = __n;
LABEL_70:
  uint64_t v119 = (uint64_t)v111 + v114 + 10;
  *((unsigned char *)v110 + v114) = *((unsigned char *)v111 + v114);
  *(unsigned char *)(((unint64_t)v110 + v114) | 1) = *(unsigned char *)(((unint64_t)v111 + v114) | 1);
  *(unsigned char *)(((unint64_t)v110 + v114) | 2) = *(unsigned char *)(((unint64_t)v111 + v114) | 2);
  unint64_t v120 = ((unint64_t)v110 + v114 + 10) & 0xFFFFFFFFFFFFFFF8;
  long long v121 = *(_OWORD *)(v119 & 0xFFFFFFFFFFFFFFF8);
  *(unsigned char *)(v120 + 16) = *(unsigned char *)((v119 & 0xFFFFFFFFFFFFFFF8) + 16);
  *(_OWORD *)unint64_t v120 = v121;
  unint64_t v122 = ((unint64_t)v110 + v114 + 34) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v123 = ((unint64_t)v111 + v114 + 34) & 0xFFFFFFFFFFFFFFF8;
  long long v124 = *(_OWORD *)v123;
  long long v125 = *(_OWORD *)(v123 + 16);
  long long v126 = *(_OWORD *)(v123 + 32);
  *(void *)(v122 + 48) = *(void *)(v123 + 48);
  *(_OWORD *)(v122 + 16) = v125;
  *(_OWORD *)(v122 + 32) = v126;
  *(_OWORD *)unint64_t v122 = v124;
  unint64_t v127 = (void *)((v122 + 63) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v128 = (void *)((v123 + 63) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v127 = *v128;
  *(void *)(((unint64_t)v127 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v128 + 15) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v129 = (void *)(((unint64_t)v103 + v277) & v295);
  uint64_t v130 = (const void *)(((unint64_t)v104 + v277) & v295);
  if (v259((unint64_t)v130, 1, v58))
  {
    memcpy(v129, v130, v274);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v255 + 32))(v129, v130, v58);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v255 + 56))(v129, 0, 1, v58);
  }
  uint64_t v131 = (void *)(((unint64_t)v129 + v264) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v132 = (void *)(((unint64_t)v130 + v264) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v131 = *v132;
  unint64_t v133 = ((unint64_t)v131 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v134 = ((unint64_t)v132 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v133 = *(void *)v134;
  *(unsigned char *)(v133 + 8) = *(unsigned char *)(v134 + 8);
  unint64_t v135 = (void *)((v284 + v133) & v283);
  unint64_t v136 = (const void *)((v284 + v134) & v283);
  if (v258 == v281)
  {
    if (!(*(unsigned int (**)(const void *))(v290 + 48))(v136)) {
      goto LABEL_83;
    }
LABEL_82:
    memcpy(v135, v136, v74);
    goto LABEL_85;
  }
  unint64_t v137 = (uint64_t *)(((unint64_t)v136 + v293) & 0xFFFFFFFFFFFFFFF8);
  if (v244 <= 0x7FFFFFFE)
  {
    uint64_t v138 = *v137;
    if ((unint64_t)*v137 >= 0xFFFFFFFF) {
      LODWORD(v138) = -1;
    }
    if ((v138 + 1) < 2) {
      goto LABEL_84;
    }
    goto LABEL_82;
  }
  if ((*(unsigned int (**)(unint64_t, void, uint64_t))(v282 + 48))(((unint64_t)v137 + v260) & v261, v242, v262))
  {
    goto LABEL_82;
  }
LABEL_83:
  unint64_t v137 = (uint64_t *)(((unint64_t)v136 + v293) & 0xFFFFFFFFFFFFFFF8);
LABEL_84:
  (*(void (**)(void *, const void *, uint64_t))(v290 + 32))(v135, v136, v278);
  unint64_t v139 = (void *)(((unint64_t)v135 + v293) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v139 = *v137;
  unint64_t v140 = ((unint64_t)v139 + v260) & v261;
  unint64_t v141 = ((unint64_t)v137 + v260) & v261;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v282 + 32))(v140, v141, v262);
  unint64_t v142 = v252 + v140;
  uint64_t v109 = v290;
  v142 &= 0xFFFFFFFFFFFFFFF8;
  unint64_t v143 = (void *)((v252 + v141) & 0xFFFFFFFFFFFFFFF8);
  *(void *)unint64_t v142 = *v143;
  *(_OWORD *)((v142 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v143 + 15) & 0xFFFFFFFFFFFFFFF8);
LABEL_85:
  *((unsigned char *)v135 + v74) = *((unsigned char *)v136 + v74);
  *(unsigned char *)(((unint64_t)v135 + v74) | 1) = *(unsigned char *)(((unint64_t)v136 + v74) | 1);
  *(unsigned char *)(((unint64_t)v135 + v74) | 2) = *(unsigned char *)(((unint64_t)v136 + v74) | 2);
  unint64_t v144 = ((unint64_t)v135 + v74 + 10) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v145 = ((unint64_t)v136 + v74 + 10) & 0xFFFFFFFFFFFFFFF8;
  long long v146 = *(_OWORD *)v145;
  *(unsigned char *)(v144 + 16) = *(unsigned char *)(v145 + 16);
  *(_OWORD *)unint64_t v144 = v146;
  unint64_t v147 = ((unint64_t)v135 + v74 + 34) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v148 = ((unint64_t)v136 + v74 + 34) & 0xFFFFFFFFFFFFFFF8;
  long long v149 = *(_OWORD *)v148;
  long long v150 = *(_OWORD *)(v148 + 16);
  long long v151 = *(_OWORD *)(v148 + 32);
  *(void *)(v147 + 48) = *(void *)(v148 + 48);
  *(_OWORD *)(v147 + 16) = v150;
  *(_OWORD *)(v147 + 32) = v151;
  *(_OWORD *)unint64_t v147 = v149;
  uint64_t v152 = (void *)((v147 + 63) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v153 = (void *)((v148 + 63) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v152 = *v153;
  *(void *)(((unint64_t)v152 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v153 + 15) & 0xFFFFFFFFFFFFFFF8);
  *((unsigned char *)v129 + v251) = *((unsigned char *)v130 + v251);
  unint64_t v154 = ((unint64_t)v129 + v251) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v155 = ((unint64_t)v130 + v251) & 0xFFFFFFFFFFFFFFF8;
  *(void *)(v154 + 8) = *(void *)(v155 + 8);
  char v156 = (_OWORD *)((v154 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v157 = (_OWORD *)((v155 + 23) & 0xFFFFFFFFFFFFFFF8);
  *char v156 = *v157;
  unint64_t v158 = ((unint64_t)v156 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v159 = ((unint64_t)v157 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v158 = *(void *)v159;
  *(unsigned char *)(v158 + 8) = *(unsigned char *)(v159 + 8);
  *(void *)(((unint64_t)v156 + 39) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v157 + 39) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v160 = (_OWORD *)(((unint64_t)v103 + v102 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v161 = (_OWORD *)(((unint64_t)v104 + v102 + 15) & 0xFFFFFFFFFFFFFFF8);
  _OWORD *v160 = *v161;
  unint64_t v162 = ((unint64_t)v160 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v163 = ((unint64_t)v161 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v164 = *(void *)v163;
  *(unsigned char *)(v162 + 8) = *(unsigned char *)(v163 + 8);
  *(void *)unint64_t v162 = v164;
  uint64_t v165 = (void *)((v247 + v162) & v273);
  int v166 = (const void *)((v247 + v163) & v273);
  if (v249) {
    unsigned int v167 = v249 - 1;
  }
  else {
    unsigned int v167 = 0;
  }
  if (v167 <= v285 - 1) {
    unsigned int v168 = v285 - 1;
  }
  else {
    unsigned int v168 = v167;
  }
  if (v168 <= 0x7FFFFFFE) {
    unsigned int v169 = 2147483646;
  }
  else {
    unsigned int v169 = v168;
  }
  if (v248) {
    unsigned int v170 = v248 - 1;
  }
  else {
    unsigned int v170 = 0;
  }
  if (v170 <= v281 - 1) {
    unsigned int v171 = v281 - 1;
  }
  else {
    unsigned int v171 = v170;
  }
  if (v171 <= 0x7FFFFFFE) {
    unsigned int v172 = 2147483646;
  }
  else {
    unsigned int v172 = v171;
  }
  if (v172 <= v169) {
    unsigned int v173 = v169;
  }
  else {
    unsigned int v173 = v172;
  }
  if (v173 <= 0x7FFFFFFF) {
    unsigned int v173 = 0x7FFFFFFF;
  }
  if (v169 != v173)
  {
    unint64_t v176 = ((unint64_t)v166 + v277) & v295;
    if (v172 != v173)
    {
      uint64_t v174 = v246;
      if (*(void *)(((v176 + v251) & 0xFFFFFFFFFFFFFFF8) + 8) < 0xFFFFFFFFuLL) {
        goto LABEL_179;
      }
      goto LABEL_147;
    }
    if (v170 == v172)
    {
      uint64_t v174 = v246;
      if (v248 < 2) {
        goto LABEL_147;
      }
      unsigned int v175 = v259(v176, v248, v280);
      goto LABEL_116;
    }
    unint64_t v177 = (v284 + ((((v264 + v176) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v283;
    if (v281 - 1 == v172)
    {
      if (v258 != v281)
      {
        uint64_t v183 = (unint64_t *)((v293 + v177) & 0xFFFFFFFFFFFFFFF8);
        uint64_t v174 = v246;
        if (v244 > 0x7FFFFFFE)
        {
          if ((*(unsigned int (**)(unint64_t, void, uint64_t))(v282 + 48))(((unint64_t)v183 + v260) & v261, v242, v262) < 2)goto LABEL_147; {
LABEL_179:
          }
          memcpy(v165, v166, v102 + 8);
          return v174;
        }
        unint64_t v184 = *v183;
        if (v184 >= 0xFFFFFFFF) {
          unsigned int v178 = -1;
        }
        else {
          unsigned int v178 = v184;
        }
        if (v178 + 1 < 2) {
          goto LABEL_147;
        }
LABEL_146:
        if (v178 < 2) {
          goto LABEL_147;
        }
        goto LABEL_179;
      }
      unsigned int v178 = (*(uint64_t (**)(unint64_t))(v109 + 48))(v177);
LABEL_145:
      uint64_t v174 = v246;
      goto LABEL_146;
    }
    unint64_t v179 = v240;
LABEL_134:
    unint64_t v182 = *(void *)((((v179 + v177 + 26) & 0xFFFFFFFFFFFFFFF8) + 87) & 0xFFFFFFFFFFFFFFF8);
    if (v182 >= 0xFFFFFFFF) {
      LODWORD(v182) = -1;
    }
    uint64_t v174 = v246;
    if ((v182 + 1) >= 2) {
      goto LABEL_179;
    }
    goto LABEL_147;
  }
  if (v167 != v169)
  {
    unint64_t v177 = (v289 + (((((unint64_t)v166 + v269) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v287;
    if (v285 - 1 == v169)
    {
      if (v254 == v285)
      {
        unsigned int v178 = (*(uint64_t (**)(unint64_t))(v291 + 48))(v177);
      }
      else
      {
        uint64_t v180 = (unint64_t *)((v270 + v177) & 0xFFFFFFFFFFFFFFF8);
        if (v245 <= 0x7FFFFFFE)
        {
          unint64_t v181 = *v180;
          if (v181 >= 0xFFFFFFFF) {
            unsigned int v178 = -1;
          }
          else {
            unsigned int v178 = v181;
          }
          uint64_t v174 = v246;
          if (v178 + 1 < 2) {
            goto LABEL_147;
          }
          goto LABEL_146;
        }
        unsigned int v178 = (*(uint64_t (**)(unint64_t))(v286 + 48))(((unint64_t)v180 + v266) & v267);
      }
      goto LABEL_145;
    }
    unint64_t v179 = v241;
    goto LABEL_134;
  }
  uint64_t v174 = v246;
  if (v249 < 2) {
    goto LABEL_147;
  }
  unsigned int v175 = v265((unint64_t)v166, v249, v271);
LABEL_116:
  if (v175 >= 2) {
    goto LABEL_179;
  }
LABEL_147:
  if (v265((unint64_t)v166, 1, v271))
  {
    memcpy(v165, v166, v275);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v256 + 32))(v165, v166, v271);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v256 + 56))(v165, 0, 1, v271);
  }
  uint64_t v185 = (void *)(((unint64_t)v165 + v269) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v186 = (void *)(((unint64_t)v166 + v269) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v185 = *v186;
  unint64_t v187 = ((unint64_t)v185 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v188 = ((unint64_t)v186 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v187 = *(void *)v188;
  *(unsigned char *)(v187 + 8) = *(unsigned char *)(v188 + 8);
  unint64_t v189 = (void *)((v289 + v187) & v287);
  unint64_t v190 = (const void *)((v289 + v188) & v287);
  if (v254 == v285)
  {
    if (!(*(unsigned int (**)(const void *))(v291 + 48))(v190)) {
      goto LABEL_160;
    }
LABEL_159:
    memcpy(v189, v190, __n);
    goto LABEL_162;
  }
  unint64_t v191 = (uint64_t *)(((unint64_t)v190 + v270) & 0xFFFFFFFFFFFFFFF8);
  if (v245 <= 0x7FFFFFFE)
  {
    uint64_t v192 = *v191;
    if ((unint64_t)*v191 >= 0xFFFFFFFF) {
      LODWORD(v192) = -1;
    }
    if ((v192 + 1) < 2) {
      goto LABEL_161;
    }
    goto LABEL_159;
  }
  if ((*(unsigned int (**)(unint64_t, void, uint64_t))(v286 + 48))(((unint64_t)v191 + v266) & v267, v243, v268))
  {
    goto LABEL_159;
  }
LABEL_160:
  unint64_t v191 = (uint64_t *)(((unint64_t)v190 + v270) & 0xFFFFFFFFFFFFFFF8);
LABEL_161:
  (*(void (**)(void *, const void *, uint64_t))(v291 + 32))(v189, v190, v279);
  uint64_t v193 = (void *)(((unint64_t)v189 + v270) & 0xFFFFFFFFFFFFFFF8);
  void *v193 = *v191;
  unint64_t v194 = ((unint64_t)v193 + v266) & v267;
  unint64_t v195 = ((unint64_t)v191 + v266) & v267;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v286 + 32))(v194, v195, v268);
  uint64_t v196 = (void *)((v253 + v194) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v197 = (void *)((v253 + v195) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v196 = *v197;
  *(_OWORD *)(((unint64_t)v196 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v197 + 15) & 0xFFFFFFFFFFFFFFF8);
LABEL_162:
  uint64_t v198 = (uint64_t)v190 + __n + 10;
  *((unsigned char *)v189 + __n) = *((unsigned char *)v190 + __n);
  *(unsigned char *)(((unint64_t)v189 + __n) | 1) = *(unsigned char *)(((unint64_t)v190 + __n) | 1);
  *(unsigned char *)(((unint64_t)v189 + __n) | 2) = *(unsigned char *)(((unint64_t)v190 + __n) | 2);
  unint64_t v199 = ((unint64_t)v189 + __n + 10) & 0xFFFFFFFFFFFFFFF8;
  long long v200 = *(_OWORD *)(v198 & 0xFFFFFFFFFFFFFFF8);
  *(unsigned char *)(v199 + 16) = *(unsigned char *)((v198 & 0xFFFFFFFFFFFFFFF8) + 16);
  *(_OWORD *)unint64_t v199 = v200;
  unint64_t v201 = ((unint64_t)v189 + __n + 34) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v202 = ((unint64_t)v190 + __n + 34) & 0xFFFFFFFFFFFFFFF8;
  long long v203 = *(_OWORD *)v202;
  long long v204 = *(_OWORD *)(v202 + 16);
  long long v205 = *(_OWORD *)(v202 + 32);
  *(void *)(v201 + 48) = *(void *)(v202 + 48);
  *(_OWORD *)(v201 + 16) = v204;
  *(_OWORD *)(v201 + 32) = v205;
  *(_OWORD *)unint64_t v201 = v203;
  unint64_t v206 = (void *)((v201 + 63) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v207 = (void *)((v202 + 63) & 0xFFFFFFFFFFFFFFF8);
  void *v206 = *v207;
  *(void *)(((unint64_t)v206 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v207 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v208 = (void *)(((unint64_t)v165 + v277) & v295);
  uint64_t v209 = (const void *)(((unint64_t)v166 + v277) & v295);
  if (v259((unint64_t)v209, 1, v280))
  {
    memcpy(v208, v209, v274);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v255 + 32))(v208, v209, v280);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v255 + 56))(v208, 0, 1, v280);
  }
  unsigned int v210 = (void *)(((unint64_t)v208 + v264) & 0xFFFFFFFFFFFFFFF8);
  long long v211 = (void *)(((unint64_t)v209 + v264) & 0xFFFFFFFFFFFFFFF8);
  *unsigned int v210 = *v211;
  unint64_t v212 = ((unint64_t)v210 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v213 = ((unint64_t)v211 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v212 = *(void *)v213;
  *(unsigned char *)(v212 + 8) = *(unsigned char *)(v213 + 8);
  int v214 = (void *)((v284 + v212) & v283);
  unint64_t v215 = (const void *)((v284 + v213) & v283);
  if (v258 == v281)
  {
    if (!(*(unsigned int (**)(const void *))(v290 + 48))(v215)) {
      goto LABEL_175;
    }
  }
  else
  {
    unint64_t v216 = (void *)(((unint64_t)v215 + v293) & 0xFFFFFFFFFFFFFFF8);
    if (v244 > 0x7FFFFFFE)
    {
      if (!(*(unsigned int (**)(unint64_t, void, uint64_t))(v282 + 48))(((unint64_t)v216 + v260) & v261, v242, v262))
      {
LABEL_175:
        unint64_t v216 = (void *)(((unint64_t)v215 + v293) & 0xFFFFFFFFFFFFFFF8);
LABEL_176:
        (*(void (**)(void *, const void *, uint64_t))(v290 + 32))(v214, v215, v278);
        long long v218 = (void *)(((unint64_t)v214 + v293) & 0xFFFFFFFFFFFFFFF8);
        *long long v218 = *v216;
        unint64_t v219 = ((unint64_t)v218 + v260) & v261;
        unint64_t v220 = ((unint64_t)v216 + v260) & v261;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v282 + 32))(v219, v220, v262);
        uint64_t v221 = (void *)((v252 + v219) & 0xFFFFFFFFFFFFFFF8);
        unint64_t v222 = (void *)((v252 + v220) & 0xFFFFFFFFFFFFFFF8);
        *uint64_t v221 = *v222;
        *(_OWORD *)(((unint64_t)v221 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v222 + 15) & 0xFFFFFFFFFFFFFFF8);
        goto LABEL_177;
      }
    }
    else
    {
      uint64_t v217 = *v216;
      if (*v216 >= 0xFFFFFFFFuLL) {
        LODWORD(v217) = -1;
      }
      if ((v217 + 1) < 2) {
        goto LABEL_176;
      }
    }
  }
  memcpy(v214, v215, v74);
LABEL_177:
  *((unsigned char *)v214 + v74) = *((unsigned char *)v215 + v74);
  *(unsigned char *)(((unint64_t)v214 + v74) | 1) = *(unsigned char *)(((unint64_t)v215 + v74) | 1);
  *(unsigned char *)(((unint64_t)v214 + v74) | 2) = *(unsigned char *)(((unint64_t)v215 + v74) | 2);
  unint64_t v223 = ((unint64_t)v214 + v74 + 10) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v224 = ((unint64_t)v215 + v74 + 10) & 0xFFFFFFFFFFFFFFF8;
  long long v225 = *(_OWORD *)v224;
  *(unsigned char *)(v223 + 16) = *(unsigned char *)(v224 + 16);
  *(_OWORD *)unint64_t v223 = v225;
  unint64_t v226 = ((unint64_t)v214 + v74 + 34) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v227 = ((unint64_t)v215 + v74 + 34) & 0xFFFFFFFFFFFFFFF8;
  long long v228 = *(_OWORD *)v227;
  long long v229 = *(_OWORD *)(v227 + 16);
  long long v230 = *(_OWORD *)(v227 + 32);
  *(void *)(v226 + 48) = *(void *)(v227 + 48);
  *(_OWORD *)(v226 + 16) = v229;
  *(_OWORD *)(v226 + 32) = v230;
  *(_OWORD *)unint64_t v226 = v228;
  char v231 = (void *)((v226 + 63) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v232 = (void *)((v227 + 63) & 0xFFFFFFFFFFFFFFF8);
  void *v231 = *v232;
  *(void *)(((unint64_t)v231 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v232 + 15) & 0xFFFFFFFFFFFFFFF8);
  *((unsigned char *)v208 + v251) = *((unsigned char *)v209 + v251);
  unint64_t v233 = ((unint64_t)v208 + v251) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v234 = ((unint64_t)v209 + v251) & 0xFFFFFFFFFFFFFFF8;
  *(void *)(v233 + 8) = *(void *)(v234 + 8);
  uint64_t v235 = (_OWORD *)((v233 + 23) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v236 = (_OWORD *)((v234 + 23) & 0xFFFFFFFFFFFFFFF8);
  _OWORD *v235 = *v236;
  unint64_t v237 = ((unint64_t)v235 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v238 = ((unint64_t)v236 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v237 = *(void *)v238;
  *(unsigned char *)(v237 + 8) = *(unsigned char *)(v238 + 8);
  *(void *)(((unint64_t)v235 + 39) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v236 + 39) & 0xFFFFFFFFFFFFFFF8);
  return v174;
}

uint64_t sub_10011C1BC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  int v4 = *(_DWORD *)(v3 + 80) & 0xF8;
  uint64_t v578 = swift_getAssociatedTypeWitness();
  uint64_t v583 = *(void *)(v578 - 8);
  int v5 = *(_DWORD *)(v583 + 80) & 0xF8;
  uint64_t v568 = swift_getAssociatedTypeWitness();
  uint64_t v585 = *(void *)(v568 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v585 + 80);
  uint64_t v580 = v5 | v6 | 7;
  uint64_t v586 = swift_getAssociatedTypeWitness();
  uint64_t v569 = *(void *)(v586 - 8);
  int v7 = *(_DWORD *)(v569 + 80) & 0xF8;
  uint64_t v577 = swift_getAssociatedTypeWitness();
  uint64_t v591 = *(void *)(v577 - 8);
  int v8 = *(_DWORD *)(v591 + 80) & 0xF8;
  uint64_t v9 = v3;
  uint64_t v565 = swift_getAssociatedTypeWitness();
  uint64_t v584 = *(void *)(v565 - 8);
  uint64_t v574 = *(unsigned __int8 *)(v584 + 80);
  uint64_t v587 = v8 | v574 | 7;
  uint64_t v572 = v587 | v7;
  int64_t v10 = v5 | v6 | v4 | v572;
  uint64_t v531 = a1;
  uint64_t v11 = v10 + 9 + a1;
  unint64_t v12 = v10;
  uint64_t v532 = v10 + 9;
  unint64_t v13 = v10 + 9 + a2;
  unint64_t v14 = (const void *)(v13 & ~v10);
  unint64_t v15 = *(uint64_t (**)(void))(v3 + 48);
  int v593 = (void *)(v11 & ~v10);
  LODWORD(v3) = v15();
  id v589 = v14;
  v556 = v15;
  int v16 = ((uint64_t (*)(const void *, uint64_t, uint64_t))v15)(v14, 1, AssociatedTypeWitness);
  unint64_t __src = v12;
  unint64_t __dst = v13;
  uint64_t v536 = v11;
  if (v3)
  {
    if (v16)
    {
      if (*(_DWORD *)(v9 + 84)) {
        size_t v17 = *(void *)(v9 + 64);
      }
      else {
        size_t v17 = *(void *)(v9 + 64) + 1;
      }
      unint64_t v18 = (unint64_t)v593;
      goto LABEL_11;
    }
    unint64_t v18 = (unint64_t)v593;
    unint64_t v19 = (unint64_t)v589;
    (*(void (**)(void *, const void *, uint64_t))(v9 + 32))(v593, v589, AssociatedTypeWitness);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v593, 0, 1, AssociatedTypeWitness);
  }
  else
  {
    if (v16)
    {
      unint64_t v18 = (unint64_t)v593;
      (*(void (**)(void *, uint64_t))(v9 + 8))(v593, AssociatedTypeWitness);
      if (*(_DWORD *)(v9 + 84)) {
        size_t v17 = *(void *)(v9 + 64);
      }
      else {
        size_t v17 = *(void *)(v9 + 64) + 1;
      }
LABEL_11:
      unint64_t v19 = (unint64_t)v589;
      memcpy((void *)v18, v589, v17);
      goto LABEL_14;
    }
    unint64_t v18 = (unint64_t)v593;
    unint64_t v19 = (unint64_t)v589;
    (*(void (**)(void *, const void *, uint64_t))(v9 + 40))(v593, v589, AssociatedTypeWitness);
  }
LABEL_14:
  uint64_t v20 = v583;
  unsigned int v544 = *(_DWORD *)(v9 + 84);
  uint64_t v539 = v9;
  if (v544) {
    uint64_t v21 = *(void *)(v9 + 64);
  }
  else {
    uint64_t v21 = *(void *)(v9 + 64) + 1;
  }
  size_t __n = v21;
  size_t v22 = (void *)(((v19 | 7) + v21) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v23 = (void *)(((v18 | 7) + v21) & 0xFFFFFFFFFFFFFFF8);
  void *v23 = *v22;
  unint64_t v24 = ((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v25 = ((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v24 = *(void *)v25;
  *(unsigned char *)(v24 + 8) = *(unsigned char *)(v25 + 8);
  uint64_t v26 = v580;
  uint64_t v27 = (void *)((v26 + 9 + v24) & ~v26);
  uint64_t v582 = v580 + 9;
  unsigned int v28 = (void *)((v26 + 9 + v25) & ~v26);
  uint64_t v29 = *(unsigned int *)(v583 + 84);
  unsigned int v530 = *(_DWORD *)(v585 + 84);
  if (v29 <= v530) {
    unsigned int v30 = *(_DWORD *)(v585 + 84);
  }
  else {
    unsigned int v30 = *(_DWORD *)(v583 + 84);
  }
  if (v30 <= 0x7FFFFFFE) {
    int v31 = 2147483646;
  }
  else {
    int v31 = v30;
  }
  uint64_t v32 = *(void *)(v583 + 64) + 7;
  uint64_t v567 = ~v6;
  uint64_t v566 = v6 + 8;
  uint64_t v545 = *(void *)(v585 + 64) + 7;
  unint64_t v528 = (((v545 + ((v6 + 8 + (v32 & 0xFFFFFFFFFFFFFFF8)) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  size_t v33 = v528 + 16;
  int v576 = v31;
  uint64_t v579 = v32;
  unsigned int v554 = *(_DWORD *)(v583 + 84);
  unsigned int v540 = v30;
  if (v29 == v31)
  {
    int v34 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v583 + 48);
    int v35 = v34(v27, v29, v578);
    int v36 = v34(v28, v29, v578);
    if (v35) {
      goto LABEL_25;
    }
LABEL_36:
    uint64_t v37 = (uint64_t *)(((unint64_t)v27 + v579) & 0xFFFFFFFFFFFFFFF8);
    if (v36)
    {
      size_t v33 = v528 + 16;
      goto LABEL_38;
    }
    int v38 = (uint64_t *)(((unint64_t)v28 + v579) & 0xFFFFFFFFFFFFFFF8);
    size_t v33 = v528 + 16;
    goto LABEL_43;
  }
  uint64_t v37 = (uint64_t *)(((unint64_t)v27 + v32) & 0xFFFFFFFFFFFFFFF8);
  if (v30 > 0x7FFFFFFE)
  {
    uint64_t v43 = *(uint64_t (**)(unint64_t, void, uint64_t))(v585 + 48);
    int v44 = v43(((unint64_t)v37 + v566) & v567, v530, v568);
    uint64_t v45 = v32;
    int v46 = v44;
    unint64_t v19 = (unint64_t)v589;
    uint64_t v20 = v583;
    int v36 = v43((v566 + (((unint64_t)v28 + v45) & 0xFFFFFFFFFFFFFFF8)) & v567, v530, v568);
    if (v46)
    {
LABEL_25:
      size_t v33 = v528 + 16;
      if (!v36)
      {
        uint64_t v37 = (uint64_t *)(((unint64_t)v27 + v579) & 0xFFFFFFFFFFFFFFF8);
        int v38 = (uint64_t *)(((unint64_t)v28 + v579) & 0xFFFFFFFFFFFFFFF8);
LABEL_40:
        (*(void (**)(void *, void *, uint64_t))(v20 + 32))(v27, v28, v578);
        *uint64_t v37 = *v38;
        unint64_t v47 = ((unint64_t)v38 + v566) & v567;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v585 + 32))(((unint64_t)v37 + v566) & v567, v47, v568);
        unint64_t v48 = (void *)((v545 + (((unint64_t)v37 + v566) & v567)) & 0xFFFFFFFFFFFFFFF8);
        unint64_t v49 = (void *)((v545 + v47) & 0xFFFFFFFFFFFFFFF8);
        void *v48 = *v49;
        *(_OWORD *)(((unint64_t)v48 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v49 + 15) & 0xFFFFFFFFFFFFFFF8);
        goto LABEL_44;
      }
      goto LABEL_41;
    }
    goto LABEL_36;
  }
  uint64_t v39 = *v37;
  if ((unint64_t)*v37 >= 0xFFFFFFFF) {
    LODWORD(v39) = -1;
  }
  unsigned int v40 = v39 + 1;
  int v38 = (uint64_t *)(((unint64_t)v28 + v32) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v41 = *v38;
  if ((unint64_t)*v38 >= 0xFFFFFFFF) {
    LODWORD(v41) = -1;
  }
  unsigned int v42 = v41 + 1;
  if (v40 >= 2)
  {
    if (v42 < 2) {
      goto LABEL_40;
    }
    goto LABEL_41;
  }
  if (v42 >= 2)
  {
LABEL_38:
    (*(void (**)(void *, uint64_t))(v20 + 8))(v27, v578);
    swift_bridgeObjectRelease();
    (*(void (**)(unint64_t, uint64_t))(v585 + 8))(((unint64_t)v37 + v566) & v567, v568);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_41:
    memcpy(v27, v28, v33);
    goto LABEL_44;
  }
LABEL_43:
  (*(void (**)(void *, void *, uint64_t))(v20 + 40))(v27, v28, v578);
  *uint64_t v37 = *v38;
  swift_bridgeObjectRelease();
  unint64_t v50 = ((unint64_t)v38 + v566) & v567;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v585 + 40))(((unint64_t)v37 + v566) & v567, v50, v568);
  long long v51 = (void *)((v545 + (((unint64_t)v37 + v566) & v567)) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v52 = (v545 + v50) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v53 = *(void *)v52;
  v52 += 15;
  *long long v51 = v53;
  swift_bridgeObjectRelease();
  uint64_t v54 = (void *)(((unint64_t)v51 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v54 = *(void *)(v52 & 0xFFFFFFFFFFFFFFF8);
  v54[1] = *(void *)((v52 & 0xFFFFFFFFFFFFFFF8) + 8);
  swift_bridgeObjectRelease();
LABEL_44:
  uint64_t v55 = v587;
  *((unsigned char *)v27 + v33) = *((unsigned char *)v28 + v33);
  *(unsigned char *)(((unint64_t)v27 + v33) | 1) = *(unsigned char *)(((unint64_t)v28 + v33) | 1);
  uint64_t v581 = ~v580;
  *(unsigned char *)(((unint64_t)v27 + v33) | 2) = *(unsigned char *)(((unint64_t)v28 + v33) | 2);
  unint64_t v56 = ((unint64_t)v27 + v33 + 10) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v57 = ((unint64_t)v28 + v33 + 10) & 0xFFFFFFFFFFFFFFF8;
  char v58 = *(unsigned char *)(v57 + 16);
  uint64_t v59 = *(void *)v56;
  uint64_t v60 = *(void *)(v56 + 8);
  *(_OWORD *)unint64_t v56 = *(_OWORD *)v57;
  char v61 = *(unsigned char *)(v56 + 16);
  *(unsigned char *)(v56 + 16) = v58;
  sub_1000D31F8(v59, v60, v61);
  unint64_t v62 = ((unint64_t)v27 + v33 + 34) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v63 = ((unint64_t)v28 + v33 + 34) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v64 = *(void *)(v62 + 16);
  if (4 * ((v64 >> 60) & 3)) {
    BOOL v65 = (((v64 >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((v64 >> 60) & 3))) == 15;
  }
  else {
    BOOL v65 = 1;
  }
  if (!v65)
  {
LABEL_60:
    long long v71 = *(_OWORD *)v63;
    long long v72 = *(_OWORD *)(v63 + 16);
    long long v73 = *(_OWORD *)(v63 + 32);
    *(void *)(v62 + 48) = *(void *)(v63 + 48);
    *(_OWORD *)(v62 + 16) = v72;
    *(_OWORD *)(v62 + 32) = v73;
    *(_OWORD *)unint64_t v62 = v71;
    uint64_t v74 = v569;
    uint64_t v75 = v574;
    goto LABEL_63;
  }
  unint64_t v66 = (uint64_t *)(v62 + 8);
  uint64_t v67 = *(void *)(v63 + 16) >> 60;
  if (4 * (v67 & 3)) {
    BOOL v68 = ((v67 >> 2) & 0xFFFFFFF3 | (4 * (v67 & 3))) == 15;
  }
  else {
    BOOL v68 = 1;
  }
  if (!v68)
  {
    if (v64 >> 60 != 15) {
      sub_10001E9C0(*v66, v64);
    }
    goto LABEL_60;
  }
  uint64_t v69 = (void *)(v63 + 8);
  *(void *)unint64_t v62 = *(void *)v63;
  if (v64 >> 60 != 15)
  {
    unint64_t v70 = *(void *)(v63 + 16);
    if (v70 >> 60 != 15)
    {
      uint64_t v76 = *(void *)(v62 + 8);
      *(void *)(v62 + 8) = *v69;
      *(void *)(v62 + 16) = v70;
      sub_10001E9C0(v76, v64);
      goto LABEL_62;
    }
    sub_10011A770(v62 + 8);
  }
  *(_OWORD *)unint64_t v66 = *(_OWORD *)v69;
LABEL_62:
  uint64_t v74 = v569;
  uint64_t v75 = v574;
  long long v77 = *(_OWORD *)(v63 + 24);
  *(unsigned char *)(v62 + 40) = *(unsigned char *)(v63 + 40);
  *(_OWORD *)(v62 + 24) = v77;
  *(void *)(v62 + 48) = *(void *)(v63 + 48);
LABEL_63:
  uint64_t v78 = (void **)((v62 + 63) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v79 = (void **)((v63 + 63) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v80 = *v78;
  *uint64_t v78 = *v79;

  *(void *)(((unint64_t)v78 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v79 + 15) & 0xFFFFFFFFFFFFFFF8);
  size_t v562 = __n + 7;
  unint64_t v81 = ((((((((v582 + ((((__n + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v581) + v33 + 34) & 0xFFFFFFFFFFFFFFF8)
          + 63) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  unint64_t v82 = ((unint64_t)v593 + v572 + v81) & ~v572;
  unint64_t v83 = (v19 + v572 + v81) & ~v572;
  uint64_t v84 = *(uint64_t (**)(void))(v74 + 48);
  int v85 = ((uint64_t (*)(unint64_t, uint64_t, uint64_t))v84)(v82, 1, v586);
  unint64_t v551 = v84;
  int v86 = ((uint64_t (*)(unint64_t, uint64_t, uint64_t))v84)(v83, 1, v586);
  if (v85)
  {
    if (!v86)
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v74 + 32))(v82, v83, v586);
      (*(void (**)(unint64_t, void, uint64_t, uint64_t))(v74 + 56))(v82, 0, 1, v586);
      goto LABEL_74;
    }
    int v87 = *(_DWORD *)(v74 + 84);
    size_t v88 = *(void *)(v74 + 64);
  }
  else
  {
    if (!v86)
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v74 + 40))(v82, v83, v586);
      goto LABEL_74;
    }
    (*(void (**)(unint64_t, uint64_t))(v74 + 8))(v82, v586);
    int v87 = *(_DWORD *)(v74 + 84);
    size_t v88 = *(void *)(v74 + 64);
  }
  if (v87) {
    size_t v89 = v88;
  }
  else {
    size_t v89 = v88 + 1;
  }
  memcpy((void *)v82, (const void *)v83, v89);
LABEL_74:
  unsigned int v543 = *(_DWORD *)(v74 + 84);
  if (v543) {
    uint64_t v90 = *(void *)(v74 + 64);
  }
  else {
    uint64_t v90 = *(void *)(v74 + 64) + 1;
  }
  size_t v533 = ((unint64_t)v593 + v572 + v81) & ~v572;
  size_t v553 = v90;
  long long v91 = (void *)(((v83 | 7) + v90) & 0xFFFFFFFFFFFFFFF8);
  long long v92 = (void *)(((v82 | 7) + v90) & 0xFFFFFFFFFFFFFFF8);
  *long long v92 = *v91;
  unint64_t v93 = ((unint64_t)v92 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v94 = ((unint64_t)v91 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v93 = *(void *)v94;
  *(unsigned char *)(v93 + 8) = *(unsigned char *)(v94 + 8);
  unint64_t v95 = (char *)((v587 + 9 + v93) & ~v587);
  uint64_t v575 = v587 + 9;
  unint64_t v96 = (const void *)((v587 + 9 + v94) & ~v587);
  uint64_t v97 = *(unsigned int *)(v591 + 84);
  unsigned int v529 = *(_DWORD *)(v584 + 84);
  if (v97 <= v529) {
    unsigned int v98 = *(_DWORD *)(v584 + 84);
  }
  else {
    unsigned int v98 = *(_DWORD *)(v591 + 84);
  }
  if (v98 <= 0x7FFFFFFE) {
    int v99 = 2147483646;
  }
  else {
    int v99 = v98;
  }
  uint64_t v564 = ~v75;
  uint64_t v563 = v75 + 8;
  uint64_t v546 = *(void *)(v584 + 64) + 7;
  unint64_t v527 = (((v546 + ((v75 + 8 + ((*(void *)(v591 + 64) + 7) & 0xFFFFFFFFFFFFFFF8)) & ~v75)) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8;
  size_t v100 = v527 + 16;
  size_t v590 = v527 + 16;
  uint64_t v594 = *(void *)(v591 + 64) + 7;
  unsigned int v550 = *(_DWORD *)(v591 + 84);
  int v570 = v99;
  unsigned int v542 = v98;
  unint64_t v534 = v81;
  if (v97 == v99)
  {
    unint64_t v101 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v591 + 48);
    uint64_t v102 = v577;
    int v103 = v101(v95, v97, v577);
    unint64_t v104 = (unint64_t)v96;
  }
  else
  {
    int v105 = (uint64_t *)((unint64_t)&v95[v594] & 0xFFFFFFFFFFFFFFF8);
    if (v98 <= 0x7FFFFFFE)
    {
      uint64_t v106 = *v105;
      if ((unint64_t)*v105 >= 0xFFFFFFFF) {
        LODWORD(v106) = -1;
      }
      unsigned int v107 = v106 + 1;
      unint64_t v108 = (uint64_t *)(((unint64_t)v96 + v594) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v109 = *v108;
      if ((unint64_t)*v108 >= 0xFFFFFFFF) {
        LODWORD(v109) = -1;
      }
      unsigned int v110 = v109 + 1;
      if (v107 >= 2)
      {
        if (v110 < 2) {
          goto LABEL_101;
        }
LABEL_102:
        memcpy(v95, v96, v100);
        goto LABEL_105;
      }
      if (v110 >= 2)
      {
LABEL_99:
        (*(void (**)(char *, uint64_t))(v591 + 8))(v95, v577);
        swift_bridgeObjectRelease();
        (*(void (**)(unint64_t, uint64_t))(v584 + 8))(((unint64_t)v105 + v563) & v564, v565);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_102;
      }
LABEL_104:
      (*(void (**)(char *, const void *, uint64_t))(v591 + 40))(v95, v96, v577);
      *int v105 = *v108;
      swift_bridgeObjectRelease();
      unint64_t v115 = ((unint64_t)v108 + v563) & v564;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v584 + 40))(((unint64_t)v105 + v563) & v564, v115, v565);
      unint64_t v116 = (void *)((v546 + (((unint64_t)v105 + v563) & v564)) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v117 = (v546 + v115) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v118 = *(void *)v117;
      v117 += 15;
      *unint64_t v116 = v118;
      swift_bridgeObjectRelease();
      uint64_t v119 = (void *)(((unint64_t)v116 + 15) & 0xFFFFFFFFFFFFFFF8);
      *uint64_t v119 = *(void *)(v117 & 0xFFFFFFFFFFFFFFF8);
      v119[1] = *(void *)((v117 & 0xFFFFFFFFFFFFFFF8) + 8);
      swift_bridgeObjectRelease();
      goto LABEL_105;
    }
    unint64_t v101 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v584 + 48);
    uint64_t v97 = v529;
    uint64_t v102 = v565;
    int v103 = v101((char *)(((unint64_t)v105 + v563) & v564), v529, v565);
    unint64_t v104 = (v563 + (((unint64_t)v96 + v594) & 0xFFFFFFFFFFFFFFF8)) & v564;
    uint64_t v55 = v587;
  }
  int v111 = v101((char *)v104, v97, v102);
  if (!v103)
  {
    int v105 = (uint64_t *)((unint64_t)&v95[v594] & 0xFFFFFFFFFFFFFFF8);
    if (v111)
    {
      size_t v100 = v527 + 16;
      goto LABEL_99;
    }
    unint64_t v108 = (uint64_t *)(((unint64_t)v96 + v594) & 0xFFFFFFFFFFFFFFF8);
    size_t v100 = v527 + 16;
    goto LABEL_104;
  }
  size_t v100 = v527 + 16;
  if (v111) {
    goto LABEL_102;
  }
  int v105 = (uint64_t *)((unint64_t)&v95[v594] & 0xFFFFFFFFFFFFFFF8);
  unint64_t v108 = (uint64_t *)(((unint64_t)v96 + v594) & 0xFFFFFFFFFFFFFFF8);
LABEL_101:
  (*(void (**)(char *, const void *, uint64_t))(v591 + 32))(v95, v96, v577);
  *int v105 = *v108;
  unint64_t v112 = ((unint64_t)v108 + v563) & v564;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v584 + 32))(((unint64_t)v105 + v563) & v564, v112, v565);
  uint64_t v113 = (void *)((v546 + (((unint64_t)v105 + v563) & v564)) & 0xFFFFFFFFFFFFFFF8);
  size_t v114 = (void *)((v546 + v112) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v113 = *v114;
  *(_OWORD *)(((unint64_t)v113 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v114 + 15) & 0xFFFFFFFFFFFFFFF8);
LABEL_105:
  unint64_t v120 = (unint64_t)&v95[v100];
  long long v121 = (unsigned char *)(((unint64_t)v96 + v100) | 1);
  unint64_t v122 = (unsigned char *)(((unint64_t)v96 + v100) | 2);
  uint64_t v123 = (uint64_t)v96 + v100 + 10;
  uint64_t v124 = (uint64_t)v96 + v100 + 34;
  *(unsigned char *)unint64_t v120 = *((unsigned char *)v96 + v100);
  unint64_t v125 = v120 + 34;
  unint64_t v126 = ~__src;
  *(unsigned char *)(v120 | 1) = *v121;
  uint64_t v588 = ~v572;
  uint64_t v127 = ~v55;
  *(unsigned char *)(v120 | 2) = *v122;
  unint64_t v128 = (v120 + 10) & 0xFFFFFFFFFFFFFFF8;
  LOBYTE(v121) = *(unsigned char *)((v123 & 0xFFFFFFFFFFFFFFF8) + 16);
  uint64_t v129 = *(void *)v128;
  uint64_t v130 = *(void *)(v128 + 8);
  *(_OWORD *)unint64_t v128 = *(_OWORD *)(v123 & 0xFFFFFFFFFFFFFFF8);
  char v131 = *(unsigned char *)(v128 + 16);
  *(unsigned char *)(v128 + 16) = (_BYTE)v121;
  sub_1000D31F8(v129, v130, v131);
  unint64_t v132 = v125 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v133 = v124 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v134 = *(void *)(v132 + 16);
  if (4 * ((v134 >> 60) & 3) && (((v134 >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((v134 >> 60) & 3))) != 0xF)
  {
LABEL_107:
    long long v135 = *(_OWORD *)v133;
    long long v136 = *(_OWORD *)(v133 + 16);
    long long v137 = *(_OWORD *)(v133 + 32);
    *(void *)(v132 + 48) = *(void *)(v133 + 48);
    *(_OWORD *)(v132 + 16) = v136;
    *(_OWORD *)(v132 + 32) = v137;
    *(_OWORD *)unint64_t v132 = v135;
    uint64_t v138 = AssociatedTypeWitness;
    goto LABEL_118;
  }
  unint64_t v139 = (uint64_t *)(v132 + 8);
  uint64_t v140 = *(void *)(v133 + 16) >> 60;
  if (4 * (v140 & 3) && ((v140 >> 2) & 0xFFFFFFF3 | (4 * (v140 & 3))) != 0xF)
  {
    if (v134 >> 60 != 15) {
      sub_10001E9C0(*v139, v134);
    }
    goto LABEL_107;
  }
  unint64_t v141 = (void *)(v133 + 8);
  *(void *)unint64_t v132 = *(void *)v133;
  if (v134 >> 60 != 15)
  {
    unint64_t v142 = *(void *)(v133 + 16);
    if (v142 >> 60 != 15)
    {
      uint64_t v143 = *(void *)(v132 + 8);
      *(void *)(v132 + 8) = *v141;
      *(void *)(v132 + 16) = v142;
      sub_10001E9C0(v143, v134);
      goto LABEL_117;
    }
    sub_10011A770(v132 + 8);
  }
  *(_OWORD *)unint64_t v139 = *(_OWORD *)v141;
LABEL_117:
  uint64_t v138 = AssociatedTypeWitness;
  long long v144 = *(_OWORD *)(v133 + 24);
  *(unsigned char *)(v132 + 40) = *(unsigned char *)(v133 + 40);
  *(_OWORD *)(v132 + 24) = v144;
  *(void *)(v132 + 48) = *(void *)(v133 + 48);
LABEL_118:
  unint64_t v145 = (void **)((v132 + 63) & 0xFFFFFFFFFFFFFFF8);
  long long v146 = (void **)((v133 + 63) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v147 = *v145;
  *unint64_t v145 = *v146;

  *(void *)(((unint64_t)v145 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v146 + 15) & 0xFFFFFFFFFFFFFFF8);
  size_t v555 = v553 + 7;
  unint64_t v148 = ((((((((v575 + ((((v553 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v127) + v590 + 34) & 0xFFFFFFFFFFFFFFF8)
           + 63) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + 8;
  *(unsigned char *)(v148 + v533) = *(unsigned char *)(v148 + v83);
  unint64_t v149 = (v148 + v533) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v150 = (v148 + v83) & 0xFFFFFFFFFFFFFFF8;
  *(void *)(v149 + 8) = *(void *)(v150 + 8);
  swift_bridgeObjectRelease();
  long long v151 = (void *)((v149 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v152 = (void *)((v150 + 23) & 0xFFFFFFFFFFFFFFF8);
  *long long v151 = *v152;
  v151[1] = v152[1];
  unint64_t v153 = ((unint64_t)v151 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v154 = ((unint64_t)v152 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v153 = *(void *)v154;
  *(unsigned char *)(v153 + 8) = *(unsigned char *)(v154 + 8);
  *(void *)(((unint64_t)v151 + 39) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v152 + 39) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v573 = v534 + v572;
  unint64_t v561 = v148;
  unint64_t v535 = (((((v148 + (v573 & v588)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v155 = (void *)(((v536 | __src) + v535 + 8) & v126);
  char v156 = (const void *)(((__dst | __src) + v535 + 8) & v126);
  LODWORD(v150) = ((uint64_t (*)(void *, uint64_t, uint64_t))v556)(v155, 1, v138);
  int v157 = ((uint64_t (*)(const void *, uint64_t, uint64_t))v556)(v156, 1, v138);
  if (v150)
  {
    if (!v157)
    {
      (*(void (**)(void *, const void *, uint64_t))(v539 + 32))(v155, v156, v138);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v539 + 56))(v155, 0, 1, v138);
      goto LABEL_124;
    }
    goto LABEL_123;
  }
  if (v157)
  {
    (*(void (**)(void *, uint64_t))(v539 + 8))(v155, v138);
LABEL_123:
    memcpy(v155, v156, __n);
    goto LABEL_124;
  }
  (*(void (**)(void *, const void *, uint64_t))(v539 + 40))(v155, v156, v138);
LABEL_124:
  unint64_t v158 = (void *)(((unint64_t)v155 + v562) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v159 = (void *)(((unint64_t)v156 + v562) & 0xFFFFFFFFFFFFFFF8);
  void *v158 = *v159;
  unint64_t v160 = ((unint64_t)v158 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v161 = ((unint64_t)v159 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v160 = *(void *)v161;
  *(unsigned char *)(v160 + 8) = *(unsigned char *)(v161 + 8);
  unint64_t v162 = (char *)((v582 + v160) & v581);
  unint64_t v163 = (void *)((v582 + v161) & v581);
  __dsta = (void *)(((__dst | __src) + v535 + 8) & v126);
  __srca = v163;
  if (v554 == v576)
  {
    unint64_t v537 = v155;
    unint64_t v164 = v126;
    uint64_t v165 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v583 + 48);
    uint64_t v166 = v578;
    int v167 = v165(v162, v554, v578);
    unint64_t v168 = (unint64_t)v163;
    uint64_t v169 = v554;
  }
  else
  {
    unsigned int v170 = (uint64_t *)((unint64_t)&v162[v579] & 0xFFFFFFFFFFFFFFF8);
    if (v540 <= 0x7FFFFFFE)
    {
      uint64_t v171 = *v170;
      if ((unint64_t)*v170 >= 0xFFFFFFFF) {
        LODWORD(v171) = -1;
      }
      unsigned int v172 = v171 + 1;
      unint64_t v163 = (void *)((v582 + v161) & v581);
      unsigned int v173 = (uint64_t *)(((unint64_t)__srca + v579) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v174 = *v173;
      if ((unint64_t)*v173 >= 0xFFFFFFFF) {
        LODWORD(v174) = -1;
      }
      unsigned int v175 = v174 + 1;
      uint64_t v176 = v586;
      if (v172 >= 2)
      {
        if (v175 >= 2) {
          goto LABEL_137;
        }
        goto LABEL_145;
      }
      if (v175 >= 2)
      {
LABEL_140:
        (*(void (**)(char *, uint64_t))(v583 + 8))(v162, v578);
        swift_bridgeObjectRelease();
        (*(void (**)(unint64_t, uint64_t))(v585 + 8))(((unint64_t)v170 + v566) & v567, v568);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unsigned int v178 = v162;
        unint64_t v163 = __srca;
        goto LABEL_141;
      }
LABEL_147:
      unint64_t v163 = __srca;
      (*(void (**)(char *, void *, uint64_t))(v583 + 40))(v162, __srca, v578);
      uint64_t *v170 = *v173;
      swift_bridgeObjectRelease();
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v585 + 40))(((unint64_t)v170 + v566) & v567, ((unint64_t)v173 + v566) & v567, v568);
      unint64_t v182 = (void *)((v545 + (((unint64_t)v170 + v566) & v567)) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v183 = v545 + (((unint64_t)v173 + v566) & v567);
      uint64_t v176 = v586;
      unint64_t v184 = (v183 & 0xFFFFFFFFFFFFFFF8) + 15;
      *unint64_t v182 = *(void *)(v183 & 0xFFFFFFFFFFFFFFF8);
      swift_bridgeObjectRelease();
      uint64_t v185 = (void *)(((unint64_t)v182 + 15) & 0xFFFFFFFFFFFFFFF8);
      *uint64_t v185 = *(void *)(v184 & 0xFFFFFFFFFFFFFFF8);
      v185[1] = *(void *)((v184 & 0xFFFFFFFFFFFFFFF8) + 8);
      swift_bridgeObjectRelease();
      goto LABEL_148;
    }
    unint64_t v537 = v155;
    unint64_t v164 = v126;
    uint64_t v165 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v585 + 48);
    uint64_t v166 = v568;
    int v167 = v165((char *)(((unint64_t)v170 + v566) & v567), v530, v568);
    unint64_t v168 = (v566 + (((unint64_t)v163 + v579) & 0xFFFFFFFFFFFFFFF8)) & v567;
    uint64_t v169 = v530;
  }
  int v177 = v165((char *)v168, v169, v166);
  uint64_t v176 = v586;
  if (!v167)
  {
    unsigned int v170 = (uint64_t *)((unint64_t)&v162[v579] & 0xFFFFFFFFFFFFFFF8);
    if (v177)
    {
      unint64_t v126 = v164;
      unint64_t v155 = v537;
      goto LABEL_140;
    }
    unsigned int v173 = (uint64_t *)(((unint64_t)v163 + v579) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v126 = v164;
    unint64_t v155 = v537;
    goto LABEL_147;
  }
  unint64_t v126 = v164;
  unint64_t v155 = v537;
  if (!v177)
  {
    unsigned int v170 = (uint64_t *)((unint64_t)&v162[v579] & 0xFFFFFFFFFFFFFFF8);
    unsigned int v173 = (uint64_t *)(((unint64_t)v163 + v579) & 0xFFFFFFFFFFFFFFF8);
LABEL_145:
    (*(void (**)(char *, void *, uint64_t))(v583 + 32))(v162, v163, v578);
    uint64_t *v170 = *v173;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v585 + 32))(((unint64_t)v170 + v566) & v567, ((unint64_t)v173 + v566) & v567, v568);
    uint64_t v180 = (void *)((v545 + (((unint64_t)v170 + v566) & v567)) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v181 = (void *)((v545 + (((unint64_t)v173 + v566) & v567)) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v180 = *v181;
    *(_OWORD *)(((unint64_t)v180 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v181 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v176 = v586;
LABEL_148:
    unint64_t v179 = v528 + 16;
    goto LABEL_149;
  }
LABEL_137:
  unsigned int v178 = v162;
LABEL_141:
  unint64_t v179 = v528 + 16;
  memcpy(v178, v163, v528 + 16);
LABEL_149:
  unint64_t v186 = (unsigned char *)(((unint64_t)v163 + v179) | 1);
  unint64_t v187 = (unsigned char *)(((unint64_t)v163 + v179) | 2);
  uint64_t v188 = (uint64_t)v163 + v179 + 10;
  uint64_t v190 = (uint64_t)v163 + v179 + 34;
  char v189 = *((unsigned char *)v163 + v179);
  unint64_t v191 = (unsigned char *)((unint64_t)&v162[v179] | 1);
  uint64_t v192 = (unsigned char *)((unint64_t)&v162[v179] | 2);
  uint64_t v193 = (uint64_t)&v162[v179 + 10];
  unint64_t v194 = &v162[v179];
  *unint64_t v194 = v189;
  *unint64_t v191 = *v186;
  *uint64_t v192 = *v187;
  unint64_t v195 = v193 & 0xFFFFFFFFFFFFFFF8;
  LOBYTE(v186) = *(unsigned char *)((v188 & 0xFFFFFFFFFFFFFFF8) + 16);
  uint64_t v196 = *(void *)(v193 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v197 = *(void *)((v193 & 0xFFFFFFFFFFFFFFF8) + 8);
  *(_OWORD *)unint64_t v195 = *(_OWORD *)(v188 & 0xFFFFFFFFFFFFFFF8);
  char v198 = *(unsigned char *)((v193 & 0xFFFFFFFFFFFFFFF8) + 16);
  *(unsigned char *)(v195 + 16) = (_BYTE)v186;
  sub_1000D31F8(v196, v197, v198);
  unint64_t v199 = (unint64_t)(v194 + 34) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v200 = v190 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v201 = *(void *)(v199 + 16);
  if (4 * ((v201 >> 60) & 3) && (((v201 >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((v201 >> 60) & 3))) != 0xF)
  {
LABEL_151:
    long long v202 = *(_OWORD *)v200;
    long long v203 = *(_OWORD *)(v200 + 16);
    long long v204 = *(_OWORD *)(v200 + 32);
    *(void *)(v199 + 48) = *(void *)(v200 + 48);
    *(_OWORD *)(v199 + 16) = v203;
    *(_OWORD *)(v199 + 32) = v204;
    *(_OWORD *)unint64_t v199 = v202;
    goto LABEL_162;
  }
  long long v205 = (uint64_t *)(v199 + 8);
  uint64_t v206 = *(void *)(v200 + 16) >> 60;
  if (4 * (v206 & 3) && ((v206 >> 2) & 0xFFFFFFF3 | (4 * (v206 & 3))) != 0xF)
  {
    if (v201 >> 60 != 15) {
      sub_10001E9C0(*v205, v201);
    }
    goto LABEL_151;
  }
  uint64_t v207 = (void *)(v200 + 8);
  *(void *)unint64_t v199 = *(void *)v200;
  if (v201 >> 60 != 15)
  {
    unint64_t v208 = *(void *)(v200 + 16);
    if (v208 >> 60 != 15)
    {
      uint64_t v209 = *(void *)(v199 + 8);
      *(void *)(v199 + 8) = *v207;
      *(void *)(v199 + 16) = v208;
      sub_10001E9C0(v209, v201);
      goto LABEL_161;
    }
    sub_10011A770(v199 + 8);
  }
  *(_OWORD *)long long v205 = *(_OWORD *)v207;
LABEL_161:
  long long v210 = *(_OWORD *)(v200 + 24);
  *(unsigned char *)(v199 + 40) = *(unsigned char *)(v200 + 40);
  *(_OWORD *)(v199 + 24) = v210;
  *(void *)(v199 + 48) = *(void *)(v200 + 48);
LABEL_162:
  long long v211 = (void **)((v199 + 63) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v212 = (void **)((v200 + 63) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v213 = *v211;
  *long long v211 = *v212;

  *(void *)(((unint64_t)v211 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v212 + 15) & 0xFFFFFFFFFFFFFFF8);
  int v214 = (const void *)(((unint64_t)v156 + v573) & v588);
  __srcb = (unsigned char *)(((unint64_t)v155 + v573) & v588);
  int v215 = v551();
  int v216 = ((uint64_t (*)(const void *, uint64_t, uint64_t))v551)(v214, 1, v176);
  if (v215)
  {
    if (v216)
    {
      uint64_t v217 = (void *)(((unint64_t)v155 + v573) & v588);
LABEL_167:
      memcpy(v217, v214, v553);
      goto LABEL_170;
    }
    uint64_t v217 = (void *)(((unint64_t)v155 + v573) & v588);
    (*(void (**)(unsigned char *, const void *, uint64_t))(v569 + 32))(__srcb, v214, v176);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v569 + 56))(__srcb, 0, 1, v176);
  }
  else
  {
    if (v216)
    {
      uint64_t v217 = (void *)(((unint64_t)v155 + v573) & v588);
      (*(void (**)(unsigned char *, uint64_t))(v569 + 8))(__srcb, v176);
      goto LABEL_167;
    }
    uint64_t v217 = (void *)(((unint64_t)v155 + v573) & v588);
    (*(void (**)(unsigned char *, const void *, uint64_t))(v569 + 40))(__srcb, v214, v176);
  }
LABEL_170:
  long long v218 = (void *)(((unint64_t)v217 + v555) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v538 = ((unint64_t)v156 + v573) & v588;
  unint64_t v219 = (void *)(((unint64_t)v214 + v555) & 0xFFFFFFFFFFFFFFF8);
  *long long v218 = *v219;
  unint64_t v220 = ((unint64_t)v218 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v221 = ((unint64_t)v219 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v220 = *(void *)v221;
  *(unsigned char *)(v220 + 8) = *(unsigned char *)(v221 + 8);
  unint64_t v222 = (void *)((v575 + v220) & v127);
  unint64_t v223 = (void *)((v575 + v221) & v127);
  uint64_t v541 = v127;
  if (v550 == v570)
  {
    unint64_t v224 = *(uint64_t (**)(void *, void, uint64_t))(v591 + 48);
    int v225 = v224(v222, v550, v577);
    size_t v226 = v527 + 16;
    int v227 = v224(v223, v550, v577);
    if (v225) {
      goto LABEL_172;
    }
    goto LABEL_183;
  }
  long long v230 = (uint64_t *)(((unint64_t)v222 + v594) & 0xFFFFFFFFFFFFFFF8);
  if (v542 <= 0x7FFFFFFE)
  {
    uint64_t v231 = *v230;
    if ((unint64_t)*v230 >= 0xFFFFFFFF) {
      LODWORD(v231) = -1;
    }
    unsigned int v232 = v231 + 1;
    unint64_t v233 = (uint64_t *)(((unint64_t)v223 + v594) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v234 = *v233;
    if ((unint64_t)*v233 >= 0xFFFFFFFF) {
      LODWORD(v234) = -1;
    }
    unsigned int v235 = v234 + 1;
    if (v232 >= 2)
    {
      size_t v226 = v527 + 16;
      if (v235 >= 2) {
        goto LABEL_173;
      }
      goto LABEL_188;
    }
    if (v235 >= 2)
    {
LABEL_184:
      (*(void (**)(void *, uint64_t))(v591 + 8))(v222, v577);
      swift_bridgeObjectRelease();
      (*(void (**)(unint64_t, uint64_t))(v584 + 8))(((unint64_t)v230 + v563) & v564, v565);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      long long v228 = v222;
      long long v229 = v223;
      size_t v226 = v527 + 16;
      goto LABEL_185;
    }
LABEL_190:
    (*(void (**)(void *, void *, uint64_t))(v591 + 40))(v222, v223, v577);
    uint64_t *v230 = *v233;
    swift_bridgeObjectRelease();
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v584 + 40))(((unint64_t)v230 + v563) & v564, ((unint64_t)v233 + v563) & v564, v565);
    uint64_t v239 = (void *)((v546 + (((unint64_t)v230 + v563) & v564)) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v240 = (v546 + (((unint64_t)v233 + v563) & v564)) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v241 = *(void *)v240;
    v240 += 15;
    *uint64_t v239 = v241;
    swift_bridgeObjectRelease();
    unsigned int v242 = (void *)(((unint64_t)v239 + 15) & 0xFFFFFFFFFFFFFFF8);
    *unsigned int v242 = *(void *)(v240 & 0xFFFFFFFFFFFFFFF8);
    v242[1] = *(void *)((v240 & 0xFFFFFFFFFFFFFFF8) + 8);
    swift_bridgeObjectRelease();
    goto LABEL_191;
  }
  unsigned int v236 = *(uint64_t (**)(unint64_t, void, uint64_t))(v584 + 48);
  int v526 = v236(((unint64_t)v230 + v563) & v564, v529, v565);
  size_t v226 = v527 + 16;
  int v227 = v236((v563 + (((unint64_t)v223 + v594) & 0xFFFFFFFFFFFFFFF8)) & v564, v529, v565);
  if (!v526)
  {
LABEL_183:
    long long v230 = (uint64_t *)(((unint64_t)v222 + v594) & 0xFFFFFFFFFFFFFFF8);
    if (v227) {
      goto LABEL_184;
    }
    unint64_t v233 = (uint64_t *)(((unint64_t)v223 + v594) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_190;
  }
LABEL_172:
  if (!v227)
  {
    long long v230 = (uint64_t *)(((unint64_t)v222 + v594) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v233 = (uint64_t *)(((unint64_t)v223 + v594) & 0xFFFFFFFFFFFFFFF8);
LABEL_188:
    (*(void (**)(void *, void *, uint64_t))(v591 + 32))(v222, v223, v577);
    uint64_t *v230 = *v233;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v584 + 32))(((unint64_t)v230 + v563) & v564, ((unint64_t)v233 + v563) & v564, v565);
    unint64_t v237 = (void *)((v546 + (((unint64_t)v230 + v563) & v564)) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v238 = (void *)((v546 + (((unint64_t)v233 + v563) & v564)) & 0xFFFFFFFFFFFFFFF8);
    *unint64_t v237 = *v238;
    *(_OWORD *)(((unint64_t)v237 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v238 + 15) & 0xFFFFFFFFFFFFFFF8);
LABEL_191:
    size_t v226 = v527 + 16;
    goto LABEL_192;
  }
LABEL_173:
  long long v228 = v222;
  long long v229 = v223;
LABEL_185:
  memcpy(v228, v229, v226);
LABEL_192:
  *((unsigned char *)v222 + v226) = *((unsigned char *)v223 + v226);
  *(unsigned char *)(((unint64_t)v222 + v226) | 1) = *(unsigned char *)(((unint64_t)v223 + v226) | 1);
  *(unsigned char *)(((unint64_t)v222 + v226) | 2) = *(unsigned char *)(((unint64_t)v223 + v226) | 2);
  unint64_t v243 = ((unint64_t)v222 + v226 + 10) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v244 = ((unint64_t)v223 + v226 + 10) & 0xFFFFFFFFFFFFFFF8;
  char v245 = *(unsigned char *)(v244 + 16);
  uint64_t v246 = *(void *)v243;
  uint64_t v247 = *(void *)(v243 + 8);
  *(_OWORD *)unint64_t v243 = *(_OWORD *)v244;
  char v248 = *(unsigned char *)(v243 + 16);
  *(unsigned char *)(v243 + 16) = v245;
  sub_1000D31F8(v246, v247, v248);
  unint64_t v249 = ((unint64_t)v222 + v226 + 34) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v250 = ((unint64_t)v223 + v226 + 34) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v251 = *(void *)(v249 + 16);
  if (4 * ((v251 >> 60) & 3) && (((v251 >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((v251 >> 60) & 3))) != 0xF)
  {
LABEL_194:
    long long v252 = *(_OWORD *)v250;
    long long v253 = *(_OWORD *)(v250 + 16);
    long long v254 = *(_OWORD *)(v250 + 32);
    *(void *)(v249 + 48) = *(void *)(v250 + 48);
    *(_OWORD *)(v249 + 16) = v253;
    *(_OWORD *)(v249 + 32) = v254;
    *(_OWORD *)unint64_t v249 = v252;
    uint64_t v255 = v532;
    unint64_t v256 = v535;
    unint64_t v257 = ((((((((v575 + ((((v553 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v127) + v590 + 34) & 0xFFFFFFFFFFFFFFF8)
             + 63) & 0xFFFFFFFFFFFFFFF8)
           + 15) & 0xFFFFFFFFFFFFFFF8)
         + 8;
    goto LABEL_205;
  }
  int v258 = (uint64_t *)(v249 + 8);
  uint64_t v259 = *(void *)(v250 + 16) >> 60;
  if (4 * (v259 & 3) && ((v259 >> 2) & 0xFFFFFFF3 | (4 * (v259 & 3))) != 0xF)
  {
    if (v251 >> 60 != 15) {
      sub_10001E9C0(*v258, v251);
    }
    goto LABEL_194;
  }
  uint64_t v260 = (void *)(v250 + 8);
  *(void *)unint64_t v249 = *(void *)v250;
  if (v251 >> 60 != 15)
  {
    unint64_t v261 = *(void *)(v250 + 16);
    if (v261 >> 60 != 15)
    {
      uint64_t v262 = *(void *)(v249 + 8);
      *(void *)(v249 + 8) = *v260;
      *(void *)(v249 + 16) = v261;
      sub_10001E9C0(v262, v251);
      goto LABEL_204;
    }
    sub_10011A770(v249 + 8);
  }
  *(_OWORD *)int v258 = *(_OWORD *)v260;
LABEL_204:
  uint64_t v255 = v532;
  unint64_t v256 = v535;
  unint64_t v257 = ((((((((v575 + ((((v553 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v127) + v590 + 34) & 0xFFFFFFFFFFFFFFF8)
           + 63) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + 8;
  long long v263 = *(_OWORD *)(v250 + 24);
  *(unsigned char *)(v249 + 40) = *(unsigned char *)(v250 + 40);
  *(_OWORD *)(v249 + 24) = v263;
  *(void *)(v249 + 48) = *(void *)(v250 + 48);
LABEL_205:
  size_t v264 = (void **)((v249 + 63) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v265 = (void **)((v250 + 63) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v266 = *v264;
  *size_t v264 = *v265;

  *(void *)(((unint64_t)v264 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v265 + 15) & 0xFFFFFFFFFFFFFFF8);
  __srcb[v257] = *(unsigned char *)(v538 + v257);
  unint64_t v267 = (unint64_t)&__srcb[v257] & 0xFFFFFFFFFFFFFFF8;
  unint64_t v268 = (v538 + v257) & 0xFFFFFFFFFFFFFFF8;
  *(void *)(v267 + 8) = *(void *)(v268 + 8);
  swift_bridgeObjectRelease();
  size_t v269 = (void *)((v267 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v270 = (void *)((v268 + 23) & 0xFFFFFFFFFFFFFFF8);
  *size_t v269 = *v270;
  v269[1] = v270[1];
  unint64_t v271 = ((unint64_t)v269 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v272 = ((unint64_t)v270 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v271 = *(void *)v272;
  *(unsigned char *)(v271 + 8) = *(unsigned char *)(v272 + 8);
  *(void *)(((unint64_t)v269 + 39) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v270 + 39) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v273 = (void *)(((unint64_t)v155 + v256 + 15) & 0xFFFFFFFFFFFFFFF8);
  size_t v274 = (void *)(((unint64_t)__dsta + v256 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v273 = *v274;
  v273[1] = v274[1];
  unint64_t v275 = ((unint64_t)v273 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v276 = ((unint64_t)v274 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v277 = *(void *)v276;
  *(unsigned char *)(v275 + 8) = *(unsigned char *)(v276 + 8);
  *(void *)unint64_t v275 = v277;
  uint64_t v278 = (void *)((v255 + v275) & v126);
  uint64_t v279 = (void *)((v255 + v276) & v126);
  uint64_t v281 = v543;
  uint64_t v280 = v544;
  if (v544) {
    unsigned int v282 = v544 - 1;
  }
  else {
    unsigned int v282 = 0;
  }
  int v283 = v576 - 1;
  if (v282 <= v576 - 1) {
    unsigned int v284 = v576 - 1;
  }
  else {
    unsigned int v284 = v282;
  }
  if (v284 <= 0x7FFFFFFE) {
    unsigned int v285 = 2147483646;
  }
  else {
    unsigned int v285 = v284;
  }
  if (v543) {
    unsigned int v286 = v543 - 1;
  }
  else {
    unsigned int v286 = 0;
  }
  int v287 = v570 - 1;
  if (v286 <= v570 - 1) {
    unsigned int v288 = v570 - 1;
  }
  else {
    unsigned int v288 = v286;
  }
  if (v288 <= 0x7FFFFFFE) {
    unsigned int v289 = 2147483646;
  }
  else {
    unsigned int v289 = v288;
  }
  if (v289 <= v285) {
    unsigned int v290 = v285;
  }
  else {
    unsigned int v290 = v289;
  }
  if (v290 <= 0x7FFFFFFF) {
    int v291 = 0x7FFFFFFF;
  }
  else {
    int v291 = v290;
  }
  __srcc = v279;
  __dstb = v278;
  if (v285 == v291)
  {
    if (v282 == v285)
    {
      uint64_t v292 = v569;
      uint64_t v293 = AssociatedTypeWitness;
      uint64_t v294 = v278;
      if (v544 >= 2)
      {
        unsigned int v295 = ((uint64_t (*)(void *))v556)(v278);
        uint64_t v279 = __srcc;
        uint64_t v280 = v544;
        if (v295 >= 2) {
          goto LABEL_272;
        }
      }
      goto LABEL_269;
    }
    uint64_t v294 = v278;
    unint64_t v301 = (v582 + (((((unint64_t)v278 + v562) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v581;
    if (v283 == v285)
    {
      if (v554 == v576)
      {
        unsigned int v302 = (*(uint64_t (**)(unint64_t, void, uint64_t))(v583 + 48))(v301, v554, v578);
        uint64_t v279 = __srcc;
        uint64_t v280 = v544;
        uint64_t v292 = v569;
        uint64_t v293 = AssociatedTypeWitness;
        goto LABEL_268;
      }
      char v306 = (unint64_t *)((v579 + v301) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v292 = v569;
      uint64_t v293 = AssociatedTypeWitness;
      if (v540 > 0x7FFFFFFE)
      {
        unsigned int v302 = (*(uint64_t (**)(unint64_t, void, uint64_t))(v585 + 48))(((unint64_t)v306 + v566) & v567, v530, v568);
        uint64_t v279 = __srcc;
        uint64_t v280 = v544;
      }
      else
      {
        unint64_t v307 = *v306;
        if (v307 >= 0xFFFFFFFF) {
          unsigned int v302 = -1;
        }
        else {
          unsigned int v302 = v307;
        }
        if (v302 + 1 < 2)
        {
LABEL_269:
          if (v282 == v285)
          {
            uint64_t v297 = v586;
            size_t v298 = v528 + 16;
            uint64_t v299 = v579;
            if (v280 < 2) {
              goto LABEL_345;
            }
            unsigned int v311 = ((uint64_t (*)(void *, uint64_t, uint64_t))v556)(__srcc, v280, v293);
LABEL_304:
            if (v311 >= 2) {
              goto LABEL_348;
            }
LABEL_345:
            int v331 = ((uint64_t (*)(void *, uint64_t, uint64_t))v556)(v294, 1, v293);
            int v332 = ((uint64_t (*)(void *, uint64_t, uint64_t))v556)(__srcc, 1, v293);
            if (v331)
            {
              if (v332)
              {
                long long v333 = __dstb;
LABEL_355:
                long long v335 = __srcc;
                memcpy(v333, __srcc, __n);
                goto LABEL_392;
              }
              long long v333 = __dstb;
              (*(void (**)(void *, void *, uint64_t))(v539 + 32))(__dstb, __srcc, v293);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v539 + 56))(__dstb, 0, 1, v293);
              long long v335 = __srcc;
            }
            else
            {
              if (v332)
              {
                long long v333 = __dstb;
                (*(void (**)(void *, uint64_t))(v539 + 8))(__dstb, v293);
                goto LABEL_355;
              }
              long long v333 = __dstb;
              (*(void (**)(void *, void *, uint64_t))(v539 + 40))(__dstb, __srcc, v293);
              long long v335 = __srcc;
            }
LABEL_392:
            unint64_t v353 = (void *)(((unint64_t)v333 + v562) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v354 = (void *)(((unint64_t)v335 + v562) & 0xFFFFFFFFFFFFFFF8);
            void *v353 = *v354;
            unint64_t v355 = ((unint64_t)v353 + 15) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v356 = ((unint64_t)v354 + 15) & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v355 = *(void *)v356;
            *(unsigned char *)(v355 + 8) = *(unsigned char *)(v356 + 8);
            unsigned int v357 = (char *)((v582 + v355) & v581);
            unint64_t v358 = (char *)((v582 + v356) & v581);
            if (v554 == v576)
            {
              unint64_t v359 = *(uint64_t (**)(char *, void, uint64_t))(v583 + 48);
              int v360 = v359(v357, v554, v578);
              int v361 = v359(v358, v554, v578);
              uint64_t v362 = v569;
              if (v360) {
                goto LABEL_394;
              }
            }
            else
            {
              uint64_t v363 = (uint64_t *)((unint64_t)&v357[v299] & 0xFFFFFFFFFFFFFFF8);
              if (v540 <= 0x7FFFFFFE)
              {
                uint64_t v365 = *v363;
                if ((unint64_t)*v363 >= 0xFFFFFFFF) {
                  LODWORD(v365) = -1;
                }
                unsigned int v366 = v365 + 1;
                uint64_t v364 = (uint64_t *)((unint64_t)&v358[v299] & 0xFFFFFFFFFFFFFFF8);
                uint64_t v367 = *v364;
                if ((unint64_t)*v364 >= 0xFFFFFFFF) {
                  LODWORD(v367) = -1;
                }
                unsigned int v368 = v367 + 1;
                uint64_t v362 = v569;
                if (v366 >= 2)
                {
                  if (v368 < 2) {
                    goto LABEL_408;
                  }
                  goto LABEL_409;
                }
                if (v368 >= 2)
                {
LABEL_406:
                  (*(void (**)(char *, uint64_t))(v583 + 8))(v357, v578);
                  swift_bridgeObjectRelease();
                  (*(void (**)(unint64_t, uint64_t))(v585 + 8))(((unint64_t)v363 + v566) & v567, v568);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  goto LABEL_409;
                }
LABEL_411:
                (*(void (**)(char *, char *, uint64_t))(v583 + 40))(v357, v358, v578);
                uint64_t *v363 = *v364;
                swift_bridgeObjectRelease();
                unint64_t v375 = ((unint64_t)v363 + v566) & v567;
                unint64_t v376 = ((unint64_t)v364 + v566) & v567;
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v585 + 40))(v375, v376, v568);
                uint64_t v377 = (void *)((v545 + v375) & 0xFFFFFFFFFFFFFFF8);
                unint64_t v378 = (v545 + v376) & 0xFFFFFFFFFFFFFFF8;
                uint64_t v379 = *(void *)v378;
                v378 += 15;
                *uint64_t v377 = v379;
                swift_bridgeObjectRelease();
                unint64_t v380 = (void *)(((unint64_t)v377 + 15) & 0xFFFFFFFFFFFFFFF8);
                *unint64_t v380 = *(void *)(v378 & 0xFFFFFFFFFFFFFFF8);
                v380[1] = *(void *)((v378 & 0xFFFFFFFFFFFFFFF8) + 8);
                swift_bridgeObjectRelease();
                goto LABEL_412;
              }
              unsigned int v369 = *(uint64_t (**)(unint64_t, void, uint64_t))(v585 + 48);
              int v370 = v369(((unint64_t)v363 + v566) & v567, v530, v568);
              int v361 = v369((v566 + ((unint64_t)&v358[v299] & 0xFFFFFFFFFFFFFFF8)) & v567, v530, v568);
              uint64_t v362 = v569;
              if (v370)
              {
LABEL_394:
                uint64_t v297 = v586;
                size_t v298 = v528 + 16;
                if (!v361)
                {
                  uint64_t v363 = (uint64_t *)((unint64_t)&v357[v579] & 0xFFFFFFFFFFFFFFF8);
                  uint64_t v364 = (uint64_t *)((unint64_t)&v358[v579] & 0xFFFFFFFFFFFFFFF8);
LABEL_408:
                  (*(void (**)(char *, char *, uint64_t))(v583 + 32))(v357, v358, v578);
                  uint64_t *v363 = *v364;
                  unint64_t v371 = ((unint64_t)v363 + v566) & v567;
                  unint64_t v372 = ((unint64_t)v364 + v566) & v567;
                  (*(void (**)(unint64_t, unint64_t, uint64_t))(v585 + 32))(v371, v372, v568);
                  unsigned int v373 = (void *)((v545 + v371) & 0xFFFFFFFFFFFFFFF8);
                  int v374 = (void *)((v545 + v372) & 0xFFFFFFFFFFFFFFF8);
                  void *v373 = *v374;
                  *(_OWORD *)(((unint64_t)v373 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v374
                                                                                                 + 15) & 0xFFFFFFFFFFFFFFF8);
LABEL_412:
                  unint64_t v381 = (unint64_t)&v357[v298];
                  *(unsigned char *)unint64_t v381 = v358[v298];
                  *(unsigned char *)(v381 | 1) = *(unsigned char *)((unint64_t)&v358[v298] | 1);
                  *(unsigned char *)(v381 | 2) = *(unsigned char *)((unint64_t)&v358[v298] | 2);
                  unint64_t v382 = (unint64_t)&v357[v298 + 10] & 0xFFFFFFFFFFFFFFF8;
                  unint64_t v383 = (unint64_t)&v358[v298 + 10] & 0xFFFFFFFFFFFFFFF8;
                  char v384 = *(unsigned char *)(v383 + 16);
                  uint64_t v385 = *(void *)v382;
                  uint64_t v386 = *(void *)(v382 + 8);
                  *(_OWORD *)unint64_t v382 = *(_OWORD *)v383;
                  char v387 = *(unsigned char *)(v382 + 16);
                  *(unsigned char *)(v382 + 16) = v384;
                  sub_1000D31F8(v385, v386, v387);
                  unint64_t v388 = (unint64_t)&v357[v298 + 34] & 0xFFFFFFFFFFFFFFF8;
                  unint64_t v389 = (unint64_t)&v358[v298 + 34] & 0xFFFFFFFFFFFFFFF8;
                  unint64_t v390 = *(void *)(v388 + 16);
                  if (4 * ((v390 >> 60) & 3)
                    && (((v390 >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((v390 >> 60) & 3))) != 0xF)
                  {
                    long long v391 = *(_OWORD *)v389;
                    long long v392 = *(_OWORD *)(v389 + 16);
                    long long v393 = *(_OWORD *)(v389 + 32);
                    *(void *)(v388 + 48) = *(void *)(v389 + 48);
                    *(_OWORD *)(v388 + 16) = v392;
                    *(_OWORD *)(v388 + 32) = v393;
                    *(_OWORD *)unint64_t v388 = v391;
                    uint64_t v394 = v541;
                    goto LABEL_426;
                  }
                  unsigned int v395 = (uint64_t *)(v388 + 8);
                  uint64_t v396 = *(void *)(v389 + 16) >> 60;
                  uint64_t v394 = v541;
                  if (4 * (v396 & 3) && ((v396 >> 2) & 0xFFFFFFF3 | (4 * (v396 & 3))) != 0xF)
                  {
                    if (v390 >> 60 != 15) {
                      sub_10001E9C0(*v395, v390);
                    }
                    long long v397 = *(_OWORD *)v389;
                    long long v398 = *(_OWORD *)(v389 + 16);
                    long long v399 = *(_OWORD *)(v389 + 32);
                    *(void *)(v388 + 48) = *(void *)(v389 + 48);
                    *(_OWORD *)(v388 + 16) = v398;
                    *(_OWORD *)(v388 + 32) = v399;
                    *(_OWORD *)unint64_t v388 = v397;
LABEL_426:
                    uint64_t v404 = (void **)((v388 + 63) & 0xFFFFFFFFFFFFFFF8);
                    unint64_t v405 = (void **)((v389 + 63) & 0xFFFFFFFFFFFFFFF8);
                    unint64_t v406 = *v404;
                    *uint64_t v404 = *v405;

                    *(void *)(((unint64_t)v404 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v405 + 15) & 0xFFFFFFFFFFFFFFF8);
                    unint64_t v407 = (unsigned char *)(((unint64_t)__dstb + v573) & v588);
                    unint64_t v408 = (unsigned char *)(((unint64_t)__srcc + v573) & v588);
                    int v409 = ((uint64_t (*)(unsigned char *, uint64_t, uint64_t))v551)(v407, 1, v297);
                    int v410 = ((uint64_t (*)(unsigned char *, uint64_t, uint64_t))v551)(v408, 1, v297);
                    if (v409)
                    {
                      if (!v410)
                      {
                        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v362 + 32))(v407, v408, v297);
                        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v362 + 56))(v407, 0, 1, v297);
                        goto LABEL_432;
                      }
                    }
                    else
                    {
                      if (!v410)
                      {
                        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v362 + 40))(v407, v408, v297);
LABEL_432:
                        unint64_t v411 = (void *)((unint64_t)&v407[v555] & 0xFFFFFFFFFFFFFFF8);
                        unint64_t v412 = (void *)((unint64_t)&v408[v555] & 0xFFFFFFFFFFFFFFF8);
                        *unint64_t v411 = *v412;
                        unint64_t v413 = ((unint64_t)v411 + 15) & 0xFFFFFFFFFFFFFFF8;
                        unint64_t v414 = ((unint64_t)v412 + 15) & 0xFFFFFFFFFFFFFFF8;
                        *(void *)unint64_t v413 = *(void *)v414;
                        *(unsigned char *)(v413 + 8) = *(unsigned char *)(v414 + 8);
                        uint64_t v415 = (char *)((v575 + v413) & v394);
                        v416 = (const void *)((v575 + v414) & v394);
                        if (v550 == v570)
                        {
                          unint64_t v417 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v591 + 48);
                          uint64_t v418 = v577;
                          int v419 = v417(v415, v550, v577);
                          unint64_t v420 = (unint64_t)v416;
                          uint64_t v421 = v550;
                        }
                        else
                        {
                          uint64_t v422 = (uint64_t *)((unint64_t)&v415[v594] & 0xFFFFFFFFFFFFFFF8);
                          if (v542 <= 0x7FFFFFFE)
                          {
                            uint64_t v423 = *v422;
                            if ((unint64_t)*v422 >= 0xFFFFFFFF) {
                              LODWORD(v423) = -1;
                            }
                            unsigned int v424 = v423 + 1;
                            unint64_t v425 = (uint64_t *)(((unint64_t)v416 + v594) & 0xFFFFFFFFFFFFFFF8);
                            uint64_t v426 = *v425;
                            if ((unint64_t)*v425 >= 0xFFFFFFFF) {
                              LODWORD(v426) = -1;
                            }
                            unsigned int v427 = v426 + 1;
                            unint64_t v428 = v561;
                            uint64_t v347 = v531;
                            if (v424 >= 2)
                            {
                              if (v427 < 2) {
                                goto LABEL_450;
                              }
                              goto LABEL_451;
                            }
                            if (v427 >= 2)
                            {
LABEL_447:
                              (*(void (**)(char *, uint64_t))(v591 + 8))(v415, v577);
                              swift_bridgeObjectRelease();
                              (*(void (**)(unint64_t, uint64_t))(v584 + 8))(((unint64_t)v422 + v563) & v564, v565);
                              swift_bridgeObjectRelease();
                              swift_bridgeObjectRelease();
                              goto LABEL_451;
                            }
LABEL_453:
                            (*(void (**)(char *, const void *, uint64_t))(v591 + 40))(v415, v416, v577);
                            *uint64_t v422 = *v425;
                            swift_bridgeObjectRelease();
                            unint64_t v435 = ((unint64_t)v422 + v563) & v564;
                            unint64_t v436 = ((unint64_t)v425 + v563) & v564;
                            (*(void (**)(unint64_t, unint64_t, uint64_t))(v584 + 40))(v435, v436, v565);
                            uint64_t v437 = (void *)((v546 + v435) & 0xFFFFFFFFFFFFFFF8);
                            unint64_t v438 = (v546 + v436) & 0xFFFFFFFFFFFFFFF8;
                            uint64_t v439 = *(void *)v438;
                            v438 += 15;
                            *uint64_t v437 = v439;
                            swift_bridgeObjectRelease();
                            unint64_t v440 = (void *)(((unint64_t)v437 + 15) & 0xFFFFFFFFFFFFFFF8);
                            void *v440 = *(void *)(v438 & 0xFFFFFFFFFFFFFFF8);
                            v440[1] = *(void *)((v438 & 0xFFFFFFFFFFFFFFF8) + 8);
                            swift_bridgeObjectRelease();
                            goto LABEL_454;
                          }
                          uint64_t v418 = v565;
                          unint64_t v417 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v584 + 48);
                          int v419 = v417((char *)(((unint64_t)v422 + v563) & v564), v529, v565);
                          unint64_t v420 = (v563 + (((unint64_t)v416 + v594) & 0xFFFFFFFFFFFFFFF8)) & v564;
                          uint64_t v421 = v529;
                        }
                        int v429 = v417((char *)v420, v421, v418);
                        if (v419)
                        {
                          unint64_t v428 = v561;
                          uint64_t v347 = v531;
                          if (!v429)
                          {
                            uint64_t v422 = (uint64_t *)((unint64_t)&v415[v594] & 0xFFFFFFFFFFFFFFF8);
                            unint64_t v425 = (uint64_t *)(((unint64_t)v416 + v594) & 0xFFFFFFFFFFFFFFF8);
LABEL_450:
                            (*(void (**)(char *, const void *, uint64_t))(v591 + 32))(v415, v416, v577);
                            *uint64_t v422 = *v425;
                            unint64_t v430 = ((unint64_t)v422 + v563) & v564;
                            unint64_t v431 = ((unint64_t)v425 + v563) & v564;
                            (*(void (**)(unint64_t, unint64_t, uint64_t))(v584 + 32))(v430, v431, v565);
                            v432 = (void *)((v546 + v430) & 0xFFFFFFFFFFFFFFF8);
                            uint64_t v433 = (void *)((v546 + v431) & 0xFFFFFFFFFFFFFFF8);
                            void *v432 = *v433;
                            *(_OWORD *)(((unint64_t)v432 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v433 + 15) & 0xFFFFFFFFFFFFFFF8);
LABEL_454:
                            unint64_t v434 = v527 + 16;
                            goto LABEL_455;
                          }
LABEL_451:
                          unint64_t v434 = v527 + 16;
                          memcpy(v415, v416, v590);
LABEL_455:
                          unint64_t v441 = (unint64_t)&v415[v434];
                          uint64_t v442 = (unsigned char *)(((unint64_t)v416 + v434) | 1);
                          char v443 = (unsigned char *)(((unint64_t)v416 + v434) | 2);
                          uint64_t v444 = (uint64_t)v416 + v434 + 10;
                          uint64_t v445 = (uint64_t)v416 + v434 + 34;
                          *(unsigned char *)unint64_t v441 = *((unsigned char *)v416 + v434);
                          unint64_t v446 = v441 + 34;
                          *(unsigned char *)(v441 | 1) = *v442;
                          *(unsigned char *)(v441 | 2) = *v443;
                          unint64_t v447 = (v441 + 10) & 0xFFFFFFFFFFFFFFF8;
                          LOBYTE(v442) = *(unsigned char *)((v444 & 0xFFFFFFFFFFFFFFF8) + 16);
                          uint64_t v448 = *(void *)v447;
                          uint64_t v449 = *(void *)(v447 + 8);
                          *(_OWORD *)unint64_t v447 = *(_OWORD *)(v444 & 0xFFFFFFFFFFFFFFF8);
                          char v450 = *(unsigned char *)(v447 + 16);
                          *(unsigned char *)(v447 + 16) = (_BYTE)v442;
                          sub_1000D31F8(v448, v449, v450);
                          unint64_t v451 = v446 & 0xFFFFFFFFFFFFFFF8;
                          unint64_t v452 = v445 & 0xFFFFFFFFFFFFFFF8;
                          unint64_t v453 = *(void *)(v451 + 16);
                          if (4 * ((v453 >> 60) & 3)
                            && (((v453 >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((v453 >> 60) & 3))) != 0xF)
                          {
LABEL_461:
                            long long v456 = *(_OWORD *)v452;
                            long long v457 = *(_OWORD *)(v452 + 16);
                            long long v458 = *(_OWORD *)(v452 + 32);
                            *(void *)(v451 + 48) = *(void *)(v452 + 48);
                            *(_OWORD *)(v451 + 16) = v457;
                            *(_OWORD *)(v451 + 32) = v458;
                            *(_OWORD *)unint64_t v451 = v456;
LABEL_468:
                            unint64_t v463 = (void **)((v451 + 63) & 0xFFFFFFFFFFFFFFF8);
                            uint64_t v464 = (void **)((v452 + 63) & 0xFFFFFFFFFFFFFFF8);
                            uint64_t v465 = *v463;
                            *unint64_t v463 = *v464;

                            *(void *)(((unint64_t)v463 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v464 + 15) & 0xFFFFFFFFFFFFFFF8);
                            v407[v428] = v408[v428];
                            unint64_t v466 = (unint64_t)&v407[v428] & 0xFFFFFFFFFFFFFFF8;
                            unint64_t v467 = (unint64_t)&v408[v428] & 0xFFFFFFFFFFFFFFF8;
                            *(void *)(v466 + 8) = *(void *)(v467 + 8);
                            swift_bridgeObjectRelease();
                            uint64_t v468 = (void *)((v466 + 23) & 0xFFFFFFFFFFFFFFF8);
                            unint64_t v469 = (void *)((v467 + 23) & 0xFFFFFFFFFFFFFFF8);
                            *uint64_t v468 = *v469;
                            v468[1] = v469[1];
LABEL_503:
                            unint64_t v523 = ((unint64_t)v468 + 23) & 0xFFFFFFFFFFFFFFF8;
                            unint64_t v524 = ((unint64_t)v469 + 23) & 0xFFFFFFFFFFFFFFF8;
                            *(void *)unint64_t v523 = *(void *)v524;
                            *(unsigned char *)(v523 + 8) = *(unsigned char *)(v524 + 8);
                            *(void *)(((unint64_t)v468 + 39) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v469 + 39) & 0xFFFFFFFFFFFFFFF8);
                            return v347;
                          }
                          uint64_t v454 = (uint64_t *)(v451 + 8);
                          uint64_t v455 = *(void *)(v452 + 16) >> 60;
                          if (4 * (v455 & 3) && ((v455 >> 2) & 0xFFFFFFF3 | (4 * (v455 & 3))) != 0xF)
                          {
                            if (v453 >> 60 != 15) {
                              sub_10001E9C0(*v454, v453);
                            }
                            goto LABEL_461;
                          }
                          id v459 = (void *)(v452 + 8);
                          *(void *)unint64_t v451 = *(void *)v452;
                          if (v453 >> 60 != 15)
                          {
                            unint64_t v460 = *(void *)(v452 + 16);
                            if (v460 >> 60 != 15)
                            {
                              uint64_t v461 = *(void *)(v451 + 8);
                              *(void *)(v451 + 8) = *v459;
                              *(void *)(v451 + 16) = v460;
                              sub_10001E9C0(v461, v453);
                              goto LABEL_467;
                            }
                            sub_10011A770(v451 + 8);
                          }
                          *(_OWORD *)uint64_t v454 = *(_OWORD *)v459;
LABEL_467:
                          long long v462 = *(_OWORD *)(v452 + 24);
                          *(unsigned char *)(v451 + 40) = *(unsigned char *)(v452 + 40);
                          *(_OWORD *)(v451 + 24) = v462;
                          *(void *)(v451 + 48) = *(void *)(v452 + 48);
                          goto LABEL_468;
                        }
                        uint64_t v422 = (uint64_t *)((unint64_t)&v415[v594] & 0xFFFFFFFFFFFFFFF8);
                        unint64_t v428 = v561;
                        uint64_t v347 = v531;
                        if (v429) {
                          goto LABEL_447;
                        }
                        unint64_t v425 = (uint64_t *)(((unint64_t)v416 + v594) & 0xFFFFFFFFFFFFFFF8);
                        goto LABEL_453;
                      }
                      (*(void (**)(unsigned char *, uint64_t))(v362 + 8))(v407, v297);
                    }
                    memcpy(v407, v408, v553);
                    goto LABEL_432;
                  }
                  unsigned int v400 = (void *)(v389 + 8);
                  *(void *)unint64_t v388 = *(void *)v389;
                  if (v390 >> 60 != 15)
                  {
                    unint64_t v401 = *(void *)(v389 + 16);
                    if (v401 >> 60 != 15)
                    {
                      uint64_t v402 = *(void *)(v388 + 8);
                      *(void *)(v388 + 8) = *v400;
                      *(void *)(v388 + 16) = v401;
                      sub_10001E9C0(v402, v390);
                      goto LABEL_425;
                    }
                    sub_10011A770(v388 + 8);
                  }
                  *(_OWORD *)unsigned int v395 = *(_OWORD *)v400;
LABEL_425:
                  long long v403 = *(_OWORD *)(v389 + 24);
                  *(unsigned char *)(v388 + 40) = *(unsigned char *)(v389 + 40);
                  *(_OWORD *)(v388 + 24) = v403;
                  *(void *)(v388 + 48) = *(void *)(v389 + 48);
                  goto LABEL_426;
                }
LABEL_409:
                memcpy(v357, v358, v298);
                goto LABEL_412;
              }
            }
            uint64_t v363 = (uint64_t *)((unint64_t)&v357[v579] & 0xFFFFFFFFFFFFFFF8);
            uint64_t v297 = v586;
            size_t v298 = v528 + 16;
            if (v361) {
              goto LABEL_406;
            }
            uint64_t v364 = (uint64_t *)((unint64_t)&v358[v579] & 0xFFFFFFFFFFFFFFF8);
            goto LABEL_411;
          }
          unint64_t v313 = (v582 + (((((unint64_t)v279 + v562) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v581;
          if (v283 == v285)
          {
            uint64_t v297 = v586;
            size_t v298 = v528 + 16;
            uint64_t v299 = v579;
            if (v554 == v576)
            {
              unsigned int v314 = (*(uint64_t (**)(unint64_t))(v583 + 48))(v313);
              goto LABEL_344;
            }
            unint64_t v319 = (unint64_t *)((v579 + v313) & 0xFFFFFFFFFFFFFFF8);
            if (v540 > 0x7FFFFFFE)
            {
              unsigned int v314 = (*(uint64_t (**)(unint64_t))(v585 + 48))(((unint64_t)v319 + v566) & v567);
              goto LABEL_344;
            }
LABEL_331:
            unint64_t v328 = *v319;
            if (v328 >= 0xFFFFFFFF) {
              unsigned int v314 = -1;
            }
            else {
              unsigned int v314 = v328;
            }
            if (v314 + 1 < 2) {
              goto LABEL_345;
            }
            goto LABEL_344;
          }
          unint64_t v317 = *(void *)((((v528 + v313 + 26) & 0xFFFFFFFFFFFFFFF8) + 87) & 0xFFFFFFFFFFFFFFF8);
          if (v317 >= 0xFFFFFFFF) {
            LODWORD(v317) = -1;
          }
          uint64_t v297 = v586;
          size_t v298 = v528 + 16;
          uint64_t v299 = v579;
          if ((v317 + 1) < 2) {
            goto LABEL_345;
          }
          goto LABEL_348;
        }
      }
LABEL_268:
      if (v302 >= 2)
      {
LABEL_272:
        if (v282 == v285)
        {
          uint64_t v297 = v586;
          size_t v298 = v528 + 16;
          uint64_t v299 = v579;
          if (v280 < 2) {
            goto LABEL_471;
          }
          unsigned int v312 = ((uint64_t (*)(void *, uint64_t, uint64_t))v556)(v279, v280, v293);
LABEL_310:
          uint64_t v279 = __srcc;
          if (v312 >= 2) {
            goto LABEL_473;
          }
          goto LABEL_471;
        }
        unint64_t v315 = (v582 + (((((unint64_t)v279 + v562) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v581;
        size_t v298 = v528 + 16;
        if (v283 != v285)
        {
          unint64_t v318 = *(void *)((((v528 + v315 + 26) & 0xFFFFFFFFFFFFFFF8) + 87) & 0xFFFFFFFFFFFFFFF8);
          if (v318 >= 0xFFFFFFFF) {
            LODWORD(v318) = -1;
          }
          uint64_t v297 = v586;
          uint64_t v299 = v579;
          if ((v318 + 1) >= 2) {
            goto LABEL_473;
          }
          goto LABEL_471;
        }
        if (v554 == v576)
        {
          unsigned int v316 = (*(uint64_t (**)(unint64_t))(v583 + 48))(v315);
          uint64_t v279 = __srcc;
          uint64_t v297 = v586;
          uint64_t v299 = v579;
        }
        else
        {
          uint64_t v299 = v579;
          unint64_t v320 = (unint64_t *)((v579 + v315) & 0xFFFFFFFFFFFFFFF8);
          if (v540 > 0x7FFFFFFE)
          {
            unsigned int v316 = (*(uint64_t (**)(unint64_t, void, uint64_t))(v585 + 48))(((unint64_t)v320 + v566) & v567, v530, v568);
            uint64_t v279 = __srcc;
            uint64_t v297 = v586;
          }
          else
          {
            unint64_t v321 = *v320;
            if (v321 >= 0xFFFFFFFF) {
              unsigned int v316 = -1;
            }
            else {
              unsigned int v316 = v321;
            }
            uint64_t v297 = v586;
            if (v316 + 1 < 2) {
              goto LABEL_471;
            }
          }
        }
        goto LABEL_470;
      }
      goto LABEL_269;
    }
    unint64_t v305 = *(void *)((((v528 + v301 + 26) & 0xFFFFFFFFFFFFFFF8) + 87) & 0xFFFFFFFFFFFFFFF8);
    if (v305 >= 0xFFFFFFFF) {
      LODWORD(v305) = -1;
    }
    uint64_t v292 = v569;
    uint64_t v293 = AssociatedTypeWitness;
    if ((v305 + 1) >= 2) {
      goto LABEL_272;
    }
    goto LABEL_269;
  }
  unint64_t v296 = ((unint64_t)v278 + v573) & v588;
  if (v289 != v291)
  {
    uint64_t v297 = v586;
    size_t v298 = v528 + 16;
    uint64_t v299 = v579;
    if (*(void *)(((v296 + v561) & 0xFFFFFFFFFFFFFFF8) + 8) > 0xFFFFFFFEuLL) {
      goto LABEL_300;
    }
    goto LABEL_306;
  }
  if (v286 != v289)
  {
    unint64_t v303 = (v575 + ((((v555 + v296) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v541;
    if (v287 != v289)
    {
      unint64_t v308 = *(void *)((((v527 + v303 + 26) & 0xFFFFFFFFFFFFFFF8) + 87) & 0xFFFFFFFFFFFFFFF8);
      if (v308 >= 0xFFFFFFFF) {
        LODWORD(v308) = -1;
      }
      uint64_t v297 = v586;
      size_t v298 = v528 + 16;
      uint64_t v299 = v579;
      if ((v308 + 1) >= 2) {
        goto LABEL_306;
      }
      goto LABEL_300;
    }
    uint64_t v297 = v586;
    size_t v298 = v528 + 16;
    uint64_t v299 = v579;
    if (v550 == v570)
    {
      unsigned int v304 = (*(uint64_t (**)(unint64_t))(v591 + 48))(v303);
    }
    else
    {
      unint64_t v309 = (unint64_t *)((v594 + v303) & 0xFFFFFFFFFFFFFFF8);
      if (v542 <= 0x7FFFFFFE)
      {
        unint64_t v310 = *v309;
        if (v310 >= 0xFFFFFFFF) {
          unsigned int v304 = -1;
        }
        else {
          unsigned int v304 = v310;
        }
        if (v304 + 1 < 2) {
          goto LABEL_300;
        }
        goto LABEL_299;
      }
      unsigned int v304 = (*(uint64_t (**)(unint64_t))(v584 + 48))(((unint64_t)v309 + v563) & v564);
    }
    uint64_t v279 = __srcc;
    uint64_t v281 = v543;
LABEL_299:
    if (v304 < 2) {
      goto LABEL_300;
    }
LABEL_306:
    unint64_t v323 = ((unint64_t)v279 + v573) & v588;
    if (v289 != v291)
    {
      uint64_t v292 = v569;
      uint64_t v293 = AssociatedTypeWitness;
      uint64_t v294 = __dstb;
      if (*(void *)(((v323 + v561) & 0xFFFFFFFFFFFFFFF8) + 8) < 0xFFFFFFFFuLL) {
        goto LABEL_473;
      }
      goto LABEL_471;
    }
    if (v286 == v289)
    {
      uint64_t v292 = v569;
      uint64_t v293 = AssociatedTypeWitness;
      uint64_t v294 = __dstb;
      if (v281 < 2) {
        goto LABEL_471;
      }
      unsigned int v312 = ((uint64_t (*)(unint64_t, uint64_t, uint64_t))v551)(v323, v281, v297);
      goto LABEL_310;
    }
    unint64_t v325 = (v575 + ((((v555 + v323) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v541;
    if (v287 != v289)
    {
      unint64_t v327 = *(void *)((((v527 + v325 + 26) & 0xFFFFFFFFFFFFFFF8) + 87) & 0xFFFFFFFFFFFFFFF8);
      if (v327 >= 0xFFFFFFFF) {
        LODWORD(v327) = -1;
      }
      uint64_t v292 = v569;
      uint64_t v293 = AssociatedTypeWitness;
      uint64_t v294 = __dstb;
      if ((v327 + 1) >= 2) {
        goto LABEL_473;
      }
      goto LABEL_471;
    }
    if (v550 == v570)
    {
      unsigned int v316 = (*(uint64_t (**)(unint64_t))(v591 + 48))(v325);
      uint64_t v279 = __srcc;
      uint64_t v292 = v569;
      uint64_t v293 = AssociatedTypeWitness;
      uint64_t v294 = __dstb;
    }
    else
    {
      unint64_t v329 = (unint64_t *)((v594 + v325) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v292 = v569;
      uint64_t v293 = AssociatedTypeWitness;
      uint64_t v294 = __dstb;
      if (v542 > 0x7FFFFFFE)
      {
        unsigned int v316 = (*(uint64_t (**)(unint64_t, void, uint64_t))(v584 + 48))(((unint64_t)v329 + v563) & v564, v529, v565);
        uint64_t v279 = __srcc;
      }
      else
      {
        unint64_t v330 = *v329;
        if (v330 >= 0xFFFFFFFF) {
          unsigned int v316 = -1;
        }
        else {
          unsigned int v316 = v330;
        }
        if (v316 + 1 < 2) {
          goto LABEL_471;
        }
      }
    }
LABEL_470:
    if (v316 >= 2)
    {
LABEL_473:
      memcpy(v294, v279, v535 + 8);
      return v531;
    }
LABEL_471:
    unint64_t v470 = v279;
    if (((unsigned int (*)(void *, uint64_t, uint64_t))v556)(v279, 1, v293))
    {
      memcpy(v294, v470, __n);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v539 + 32))(v294, v470, v293);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v539 + 56))(v294, 0, 1, v293);
    }
    v471 = (void *)(((unint64_t)v294 + v562) & 0xFFFFFFFFFFFFFFF8);
    v472 = (void *)(((unint64_t)v470 + v562) & 0xFFFFFFFFFFFFFFF8);
    void *v471 = *v472;
    unint64_t v473 = ((unint64_t)v471 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v474 = ((unint64_t)v472 + 15) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v473 = *(void *)v474;
    *(unsigned char *)(v473 + 8) = *(unsigned char *)(v474 + 8);
    v475 = (unsigned char *)((v582 + v473) & v581);
    uint64_t v476 = (unsigned char *)((v582 + v474) & v581);
    if (v554 == v576)
    {
      if (!(*(unsigned int (**)(unsigned char *))(v583 + 48))(v476)) {
        goto LABEL_485;
      }
    }
    else
    {
      uint64_t v477 = (void *)((unint64_t)&v476[v299] & 0xFFFFFFFFFFFFFFF8);
      if (v540 > 0x7FFFFFFE)
      {
        if (!(*(unsigned int (**)(unint64_t, void, uint64_t))(v585 + 48))(((unint64_t)v477 + v566) & v567, v530, v568))
        {
LABEL_485:
          uint64_t v477 = (void *)((unint64_t)&v476[v579] & 0xFFFFFFFFFFFFFFF8);
LABEL_486:
          (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v583 + 32))(v475, v476, v578);
          unint64_t v479 = (void *)((unint64_t)&v475[v579] & 0xFFFFFFFFFFFFFFF8);
          void *v479 = *v477;
          unint64_t v480 = ((unint64_t)v479 + v566) & v567;
          unint64_t v481 = ((unint64_t)v477 + v566) & v567;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v585 + 32))(v480, v481, v568);
          char v482 = (void *)((v545 + v480) & 0xFFFFFFFFFFFFFFF8);
          unint64_t v483 = (void *)((v545 + v481) & 0xFFFFFFFFFFFFFFF8);
          void *v482 = *v483;
          *(_OWORD *)(((unint64_t)v482 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v483 + 15) & 0xFFFFFFFFFFFFFFF8);
LABEL_487:
          uint64_t v484 = (uint64_t)&v476[v298 + 10];
          v475[v298] = v476[v298];
          *(unsigned char *)((unint64_t)&v475[v298] | 1) = *(unsigned char *)((unint64_t)&v476[v298] | 1);
          *(unsigned char *)((unint64_t)&v475[v298] | 2) = *(unsigned char *)((unint64_t)&v476[v298] | 2);
          unint64_t v485 = (unint64_t)&v475[v298 + 10] & 0xFFFFFFFFFFFFFFF8;
          long long v486 = *(_OWORD *)(v484 & 0xFFFFFFFFFFFFFFF8);
          *(unsigned char *)(v485 + 16) = *(unsigned char *)((v484 & 0xFFFFFFFFFFFFFFF8) + 16);
          *(_OWORD *)unint64_t v485 = v486;
          unint64_t v487 = (unint64_t)&v475[v298 + 34] & 0xFFFFFFFFFFFFFFF8;
          unint64_t v488 = (unint64_t)&v476[v298 + 34] & 0xFFFFFFFFFFFFFFF8;
          long long v489 = *(_OWORD *)v488;
          long long v490 = *(_OWORD *)(v488 + 16);
          long long v491 = *(_OWORD *)(v488 + 32);
          *(void *)(v487 + 48) = *(void *)(v488 + 48);
          *(_OWORD *)(v487 + 16) = v490;
          *(_OWORD *)(v487 + 32) = v491;
          *(_OWORD *)unint64_t v487 = v489;
          uint64_t v492 = (void *)((v487 + 63) & 0xFFFFFFFFFFFFFFF8);
          long long v493 = (void *)((v488 + 63) & 0xFFFFFFFFFFFFFFF8);
          *uint64_t v492 = *v493;
          *(void *)(((unint64_t)v492 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v493 + 15) & 0xFFFFFFFFFFFFFFF8);
          uint64_t v494 = (void *)(((unint64_t)v294 + v573) & v588);
          uint64_t v495 = (const void *)(((unint64_t)__srcc + v573) & v588);
          if (((unsigned int (*)(const void *, uint64_t, uint64_t))v551)(v495, 1, v297))
          {
            memcpy(v494, v495, v553);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v292 + 32))(v494, v495, v297);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v292 + 56))(v494, 0, 1, v297);
          }
          int v496 = (void *)(((unint64_t)v494 + v555) & 0xFFFFFFFFFFFFFFF8);
          unint64_t v497 = (void *)(((unint64_t)v495 + v555) & 0xFFFFFFFFFFFFFFF8);
          *int v496 = *v497;
          unint64_t v498 = ((unint64_t)v496 + 15) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v499 = ((unint64_t)v497 + 15) & 0xFFFFFFFFFFFFFFF8;
          *(void *)unint64_t v498 = *(void *)v499;
          *(unsigned char *)(v498 + 8) = *(unsigned char *)(v499 + 8);
          uint64_t v500 = (void *)((v575 + v498) & v541);
          unint64_t v501 = (const void *)((v575 + v499) & v541);
          if (v550 == v570)
          {
            int v502 = (*(uint64_t (**)(const void *))(v591 + 48))(v501);
          }
          else
          {
            id v503 = (uint64_t *)(((unint64_t)v501 + v594) & 0xFFFFFFFFFFFFFFF8);
            if (v542 <= 0x7FFFFFFE)
            {
              uint64_t v504 = *v503;
              if ((unint64_t)*v503 >= 0xFFFFFFFF) {
                LODWORD(v504) = -1;
              }
              uint64_t v347 = v531;
              if ((v504 + 1) >= 2) {
                goto LABEL_499;
              }
              goto LABEL_501;
            }
            int v502 = (*(uint64_t (**)(unint64_t))(v584 + 48))(((unint64_t)v503 + v563) & v564);
          }
          uint64_t v347 = v531;
          if (v502)
          {
LABEL_499:
            unint64_t v505 = v527 + 16;
            memcpy(v500, v501, v590);
LABEL_502:
            uint64_t v511 = (uint64_t)v501 + v505 + 10;
            *((unsigned char *)v500 + v505) = *((unsigned char *)v501 + v505);
            *(unsigned char *)(((unint64_t)v500 + v505) | 1) = *(unsigned char *)(((unint64_t)v501 + v505) | 1);
            *(unsigned char *)(((unint64_t)v500 + v505) | 2) = *(unsigned char *)(((unint64_t)v501 + v505) | 2);
            unint64_t v512 = ((unint64_t)v500 + v505 + 10) & 0xFFFFFFFFFFFFFFF8;
            long long v513 = *(_OWORD *)(v511 & 0xFFFFFFFFFFFFFFF8);
            *(unsigned char *)(v512 + 16) = *(unsigned char *)((v511 & 0xFFFFFFFFFFFFFFF8) + 16);
            *(_OWORD *)unint64_t v512 = v513;
            unint64_t v514 = ((unint64_t)v500 + v505 + 34) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v515 = ((unint64_t)v501 + v505 + 34) & 0xFFFFFFFFFFFFFFF8;
            long long v516 = *(_OWORD *)v515;
            long long v517 = *(_OWORD *)(v515 + 16);
            long long v518 = *(_OWORD *)(v515 + 32);
            *(void *)(v514 + 48) = *(void *)(v515 + 48);
            *(_OWORD *)(v514 + 16) = v517;
            *(_OWORD *)(v514 + 32) = v518;
            *(_OWORD *)unint64_t v514 = v516;
            unsigned int v519 = (void *)((v514 + 63) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v520 = (void *)((v515 + 63) & 0xFFFFFFFFFFFFFFF8);
            *unsigned int v519 = *v520;
            *(void *)(((unint64_t)v519 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v520 + 15) & 0xFFFFFFFFFFFFFFF8);
            *((unsigned char *)v494 + v561) = *((unsigned char *)v495 + v561);
            unint64_t v521 = ((unint64_t)v494 + v561) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v522 = ((unint64_t)v495 + v561) & 0xFFFFFFFFFFFFFFF8;
            *(void *)(v521 + 8) = *(void *)(v522 + 8);
            uint64_t v468 = (void *)((v521 + 23) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v469 = (void *)((v522 + 23) & 0xFFFFFFFFFFFFFFF8);
            *(_OWORD *)uint64_t v468 = *(_OWORD *)v469;
            goto LABEL_503;
          }
          id v503 = (uint64_t *)(((unint64_t)v501 + v594) & 0xFFFFFFFFFFFFFFF8);
LABEL_501:
          (*(void (**)(void *, const void *, uint64_t))(v591 + 32))(v500, v501, v577);
          unint64_t v506 = (void *)(((unint64_t)v500 + v594) & 0xFFFFFFFFFFFFFFF8);
          void *v506 = *v503;
          unint64_t v507 = ((unint64_t)v506 + v563) & v564;
          unint64_t v508 = ((unint64_t)v503 + v563) & v564;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v584 + 32))(v507, v508, v565);
          unint64_t v509 = (void *)((v546 + v507) & 0xFFFFFFFFFFFFFFF8);
          unint64_t v510 = (void *)((v546 + v508) & 0xFFFFFFFFFFFFFFF8);
          void *v509 = *v510;
          *(_OWORD *)(((unint64_t)v509 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v510 + 15) & 0xFFFFFFFFFFFFFFF8);
          unint64_t v505 = v527 + 16;
          goto LABEL_502;
        }
      }
      else
      {
        uint64_t v478 = *v477;
        if (*v477 >= 0xFFFFFFFFuLL) {
          LODWORD(v478) = -1;
        }
        if ((v478 + 1) < 2) {
          goto LABEL_486;
        }
      }
    }
    memcpy(v475, v476, v298);
    goto LABEL_487;
  }
  uint64_t v297 = v586;
  size_t v298 = v528 + 16;
  uint64_t v299 = v579;
  if (v543 >= 2)
  {
    unsigned int v300 = ((uint64_t (*)(unint64_t, void, uint64_t))v551)(v296, v543, v586);
    uint64_t v279 = __srcc;
    uint64_t v281 = v543;
    if (v300 >= 2) {
      goto LABEL_306;
    }
  }
LABEL_300:
  unint64_t v322 = ((unint64_t)v279 + v573) & v588;
  if (v289 == v291)
  {
    if (v286 == v289)
    {
      uint64_t v292 = v569;
      uint64_t v293 = AssociatedTypeWitness;
      uint64_t v294 = __dstb;
      if (v281 < 2) {
        goto LABEL_345;
      }
      unsigned int v311 = ((uint64_t (*)(unint64_t, uint64_t, uint64_t))v551)(v322, v281, v297);
      goto LABEL_304;
    }
    unint64_t v324 = (v575 + ((((v555 + v322) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v541;
    if (v287 == v289)
    {
      uint64_t v292 = v569;
      uint64_t v293 = AssociatedTypeWitness;
      uint64_t v294 = __dstb;
      if (v550 == v570)
      {
        unsigned int v314 = (*(uint64_t (**)(unint64_t))(v591 + 48))(v324);
      }
      else
      {
        unint64_t v319 = (unint64_t *)((v594 + v324) & 0xFFFFFFFFFFFFFFF8);
        if (v542 <= 0x7FFFFFFE) {
          goto LABEL_331;
        }
        unsigned int v314 = (*(uint64_t (**)(unint64_t))(v584 + 48))(((unint64_t)v319 + v563) & v564);
      }
LABEL_344:
      if (v314 >= 2) {
        goto LABEL_348;
      }
      goto LABEL_345;
    }
    unint64_t v326 = *(void *)((((v527 + v324 + 26) & 0xFFFFFFFFFFFFFFF8) + 87) & 0xFFFFFFFFFFFFFFF8);
    if (v326 >= 0xFFFFFFFF) {
      LODWORD(v326) = -1;
    }
    uint64_t v292 = v569;
    uint64_t v293 = AssociatedTypeWitness;
    uint64_t v294 = __dstb;
    if ((v326 + 1) < 2) {
      goto LABEL_345;
    }
  }
  else
  {
    uint64_t v292 = v569;
    uint64_t v293 = AssociatedTypeWitness;
    uint64_t v294 = __dstb;
    if (*(void *)(((v322 + v561) & 0xFFFFFFFFFFFFFFF8) + 8) >= 0xFFFFFFFFuLL) {
      goto LABEL_345;
    }
  }
LABEL_348:
  if (!((unsigned int (*)(void *, uint64_t, uint64_t))v556)(v294, 1, v293)) {
    (*(void (**)(void *, uint64_t))(v539 + 8))(v294, v293);
  }
  unint64_t v334 = (v582 + (((((unint64_t)v294 + v562) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v581;
  if (v554 == v576)
  {
    if ((*(unsigned int (**)(unint64_t))(v583 + 48))((v582
                                                                       + (((((unint64_t)v294 + v562) & 0xFFFFFFFFFFFFFFF8)
                                                                         + 15) & 0xFFFFFFFFFFFFFFF8)) & v581))
      goto LABEL_365;
LABEL_363:
    uint64_t v336 = (uint64_t *)((v299 + v334) & 0xFFFFFFFFFFFFFFF8);
LABEL_364:
    (*(void (**)(unint64_t, uint64_t))(v583 + 8))(v334, v578);
    swift_bridgeObjectRelease();
    (*(void (**)(unint64_t, uint64_t))(v585 + 8))(((unint64_t)v336 + v566) & v567, v568);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_365;
  }
  uint64_t v336 = (uint64_t *)((v299 + v334) & 0xFFFFFFFFFFFFFFF8);
  if (v540 > 0x7FFFFFFE)
  {
    if ((*(unsigned int (**)(unint64_t, void, uint64_t))(v585 + 48))(((unint64_t)v336 + v566) & v567, v530, v568))
    {
      goto LABEL_365;
    }
    goto LABEL_363;
  }
  uint64_t v337 = *v336;
  if ((unint64_t)*v336 >= 0xFFFFFFFF) {
    LODWORD(v337) = -1;
  }
  if ((v337 + 1) < 2) {
    goto LABEL_364;
  }
LABEL_365:
  unint64_t v338 = v334 + v298;
  sub_1000D31F8(*(void *)((v338 + 10) & 0xFFFFFFFFFFFFFFF8), *(void *)(((v338 + 10) & 0xFFFFFFFFFFFFFFF8) + 8), *(unsigned char *)(((v338 + 10) & 0xFFFFFFFFFFFFFFF8) + 16));
  unint64_t v339 = (v338 + 34) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v340 = *(void *)(v339 + 16);
  BOOL v341 = ((4 * (v340 >> 60)) & 0xC | ((v340 >> 60) >> 2)) != 0xF && ((4 * (v340 >> 60)) & 0xC) != 0;
  if (v340 >> 60 != 15 && !v341) {
    sub_10001E9C0(*(void *)(v339 + 8), v340);
  }

  unint64_t v342 = ((unint64_t)v294 + v573) & v588;
  if (!((unsigned int (*)(unint64_t, uint64_t, uint64_t))v551)(v342, 1, v297)) {
    (*(void (**)(unint64_t, uint64_t))(v292 + 8))(v342, v297);
  }
  unint64_t v343 = (v575 + ((((v555 + v342) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v541;
  if (v550 == v570)
  {
    int v344 = (*(uint64_t (**)(unint64_t))(v591 + 48))(v343);
  }
  else
  {
    unint64_t v345 = (uint64_t *)((v594 + v343) & 0xFFFFFFFFFFFFFFF8);
    if (v542 <= 0x7FFFFFFE)
    {
      uint64_t v346 = *v345;
      if ((unint64_t)*v345 >= 0xFFFFFFFF) {
        LODWORD(v346) = -1;
      }
      uint64_t v347 = v531;
      size_t v348 = v535 + 8;
      if ((v346 + 1) >= 2) {
        goto LABEL_384;
      }
      goto LABEL_383;
    }
    int v344 = (*(uint64_t (**)(unint64_t))(v584 + 48))(((unint64_t)v345 + v563) & v564);
  }
  uint64_t v347 = v531;
  size_t v348 = v535 + 8;
  if (!v344)
  {
    unint64_t v345 = (uint64_t *)((v594 + v343) & 0xFFFFFFFFFFFFFFF8);
LABEL_383:
    (*(void (**)(unint64_t, uint64_t))(v591 + 8))(v343, v577);
    swift_bridgeObjectRelease();
    (*(void (**)(unint64_t, uint64_t))(v584 + 8))(((unint64_t)v345 + v563) & v564, v565);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
LABEL_384:
  unint64_t v349 = v343 + v590;
  sub_1000D31F8(*(void *)((v349 + 10) & 0xFFFFFFFFFFFFFFF8), *(void *)(((v349 + 10) & 0xFFFFFFFFFFFFFFF8) + 8), *(unsigned char *)(((v349 + 10) & 0xFFFFFFFFFFFFFFF8) + 16));
  unint64_t v350 = (v349 + 34) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v351 = *(void *)(v350 + 16);
  BOOL v352 = ((4 * (v351 >> 60)) & 0xC | ((v351 >> 60) >> 2)) != 0xF && ((4 * (v351 >> 60)) & 0xC) != 0;
  if (v351 >> 60 != 15 && !v352) {
    sub_10001E9C0(*(void *)(v350 + 8), v351);
  }

  swift_bridgeObjectRelease();
  memcpy(v294, __srcc, v348);
  return v347;
}

uint64_t sub_10011FF34(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t v68 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v70 = *(_DWORD *)(v68 + 84);
  if (v70) {
    unsigned int v2 = v70 - 1;
  }
  else {
    unsigned int v2 = 0;
  }
  uint64_t v66 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v3 = *(_DWORD *)(v66 + 84);
  uint64_t v65 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v4 = *(_DWORD *)(v65 + 84);
  if (v3 > v4) {
    unsigned int v4 = v3;
  }
  unsigned int v55 = v4;
  if (v4 <= 0x7FFFFFFE) {
    unsigned int v4 = 2147483646;
  }
  unsigned int v56 = v4;
  unsigned int v57 = v3;
  unsigned int v5 = v4 - 1;
  unsigned int v59 = v5;
  unsigned int v60 = v2;
  if (v2 > v5) {
    unsigned int v5 = v2;
  }
  if (v5 <= 0x7FFFFFFE) {
    unsigned int v6 = 2147483646;
  }
  else {
    unsigned int v6 = v5;
  }
  uint64_t v64 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v69 = *(_DWORD *)(v64 + 84);
  if (v69) {
    unsigned int v7 = v69 - 1;
  }
  else {
    unsigned int v7 = 0;
  }
  uint64_t v63 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v8 = *(_DWORD *)(v63 + 84);
  uint64_t v9 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v10 = v9;
  unsigned int v54 = v8;
  if (v8 <= *(_DWORD *)(v9 + 84)) {
    unsigned int v11 = *(_DWORD *)(v9 + 84);
  }
  else {
    unsigned int v11 = v8;
  }
  if (v11 <= 0x7FFFFFFE) {
    int v12 = 2147483646;
  }
  else {
    int v12 = v11;
  }
  unsigned int v58 = v7;
  if (v7 <= v12 - 1) {
    unsigned int v13 = v12 - 1;
  }
  else {
    unsigned int v13 = v7;
  }
  if (v13 <= 0x7FFFFFFE) {
    unsigned int v13 = 2147483646;
  }
  unsigned int v61 = v6;
  if (v13 <= v6) {
    unsigned int v14 = v6;
  }
  else {
    unsigned int v14 = v13;
  }
  if (v14 <= 0x7FFFFFFF) {
    unsigned int v15 = 0x7FFFFFFF;
  }
  else {
    unsigned int v15 = v14;
  }
  uint64_t v16 = *(unsigned __int8 *)(v65 + 80);
  uint64_t v17 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v18 = *(void *)(v66 + 64);
  uint64_t v19 = *(void *)(v64 + 64);
  uint64_t v20 = *(void *)(v63 + 64);
  uint64_t v21 = *(void *)(v9 + 64);
  unsigned int v22 = v15 - 1;
  if (v15 - 1 < v15) {
    unsigned int v22 = v15;
  }
  if (v70) {
    uint64_t v23 = *(void *)(v68 + 64);
  }
  else {
    uint64_t v23 = *(void *)(v68 + 64) + 1;
  }
  if (!v69) {
    ++v19;
  }
  if (!a2) {
    return 0;
  }
  int v24 = *(_DWORD *)(v66 + 80) & 0xF8;
  uint64_t v25 = v24 | v16 | 7;
  uint64_t v26 = *(_DWORD *)(v63 + 80) & 0xF8 | v17 | 7;
  uint64_t v27 = v26 | *(_DWORD *)(v64 + 80) & 0xF8;
  uint64_t v28 = v24 | v16 | *(_DWORD *)(v68 + 80) & 0xF8 | v27;
  unint64_t v29 = (((*(void *)(v65 + 64) + ((v16 + 8 + ((v18 + 7) & 0xFFFFFFFFFFFFFFF8)) & ~v16) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v30 = v23 + 7;
  unint64_t v31 = ((((((((v25 + 9 + ((((v23 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v25) + v29 + 50) & 0xFFFFFFFFFFFFFFF8)
          + 63) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  unint64_t v32 = (((v21 + ((v17 + 8 + ((v20 + 7) & 0xFFFFFFFFFFFFFFF8)) & ~v17) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v33 = v19 + 7;
  unint64_t v34 = ((((((((v26 + 9 + ((((v19 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v26) + v32 + 50) & 0xFFFFFFFFFFFFFFF8)
          + 63) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  if (a2 <= v22) {
    goto LABEL_60;
  }
  unint64_t v35 = (((v34 + ((v31 + v27) & ~v27) + 23) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v36 = ((v28
        + 9
        + ((((v35 + ((((v28 + 9) | v28) + v35 + 8) & ~v28) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)) & ~v28)
      + v35
      + 8;
  char v37 = 8 * v36;
  if (v36 > 3) {
    goto LABEL_43;
  }
  unsigned int v39 = ((a2 - v22 + ~(-1 << v37)) >> v37) + 1;
  if (HIWORD(v39))
  {
    int v38 = *(_DWORD *)((char *)a1 + v36);
    if (v38) {
      goto LABEL_50;
    }
  }
  else
  {
    if (v39 <= 0xFF)
    {
      if (v39 < 2) {
        goto LABEL_60;
      }
LABEL_43:
      int v38 = *((unsigned __int8 *)a1 + v36);
      if (!*((unsigned char *)a1 + v36)) {
        goto LABEL_60;
      }
LABEL_50:
      int v40 = (v38 - 1) << v37;
      if (v36 > 3) {
        int v40 = 0;
      }
      if (v36)
      {
        if (v36 <= 3) {
          int v41 = v36;
        }
        else {
          int v41 = 4;
        }
        switch(v41)
        {
          case 2:
            int v42 = *a1;
            break;
          case 3:
            int v42 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            int v42 = *(_DWORD *)a1;
            break;
          default:
            int v42 = *(unsigned __int8 *)a1;
            break;
        }
      }
      else
      {
        int v42 = 0;
      }
      return v22 + (v42 | v40) + 1;
    }
    int v38 = *(unsigned __int16 *)((char *)a1 + v36);
    if (*(unsigned __int16 *)((char *)a1 + v36)) {
      goto LABEL_50;
    }
  }
LABEL_60:
  uint64_t v43 = ((unint64_t)a1 + v28 + 9) & ~v28;
  if (v61 == v15)
  {
    if (v60 == v61)
    {
      if (v70 >= 2)
      {
        unsigned int v44 = (*(uint64_t (**)(uint64_t))(v68 + 48))(v43);
        goto LABEL_98;
      }
      return 0;
    }
    unint64_t v47 = (v25 + 9 + ((((v30 + v43) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v25;
    if (v59 == v61)
    {
      if (v57 == v56)
      {
        unsigned int v44 = (*(uint64_t (**)(unint64_t))(v66 + 48))(v47);
        goto LABEL_98;
      }
      long long v51 = (unint64_t *)((v18 + 7 + v47) & 0xFFFFFFFFFFFFFFF8);
      if (v55 > 0x7FFFFFFE)
      {
        unsigned int v44 = (*(uint64_t (**)(unint64_t))(v65 + 48))(((unint64_t)v51 + v16 + 8) & ~v16);
        goto LABEL_98;
      }
LABEL_92:
      unint64_t v53 = *v51;
      if (v53 >= 0xFFFFFFFF) {
        LODWORD(v53) = -1;
      }
      if ((v53 + 1) >= 2) {
        unsigned int v44 = v53;
      }
      else {
        unsigned int v44 = 0;
      }
      goto LABEL_98;
    }
    unint64_t v50 = v29 + v47;
    goto LABEL_86;
  }
  unint64_t v45 = (v43 + v27 + v31) & ~v27;
  if (v13 == v15)
  {
    if (v58 == v13)
    {
      if (v69 < 2) {
        return 0;
      }
      unsigned int v44 = (*(uint64_t (**)(unint64_t))(v64 + 48))(v45);
    }
    else
    {
      unint64_t v49 = (v26 + 9 + ((((v33 + v45) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v26;
      if (v12 - 1 != v13)
      {
        unint64_t v50 = v32 + v49;
LABEL_86:
        unint64_t v52 = *(void *)((((v50 + 26) & 0xFFFFFFFFFFFFFFF8) + 87) & 0xFFFFFFFFFFFFFFF8);
        if (v52 >= 0xFFFFFFFF) {
          LODWORD(v52) = -1;
        }
        if ((v52 + 1) >= 2) {
          return v52;
        }
        else {
          return 0;
        }
      }
      if (v54 == v12)
      {
        unsigned int v44 = (*(uint64_t (**)(unint64_t))(v63 + 48))(v49);
        goto LABEL_98;
      }
      long long v51 = (unint64_t *)((v20 + 7 + v49) & 0xFFFFFFFFFFFFFFF8);
      if (v11 <= 0x7FFFFFFE) {
        goto LABEL_92;
      }
      unsigned int v44 = (*(uint64_t (**)(unint64_t))(v10 + 48))(((unint64_t)v51 + v17 + 8) & ~v17);
    }
LABEL_98:
    if (v44 >= 2) {
      return v44 - 1;
    }
    else {
      return 0;
    }
  }
  unint64_t v48 = *(void *)(((v45 + v34) & 0xFFFFFFFFFFFFFFF8) + 8);
  if (v48 >= 0xFFFFFFFF) {
    LODWORD(v48) = -1;
  }
  return (v48 + 1);
}

void sub_1001207DC(unsigned char *a1, unsigned int a2, unsigned int a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v86 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v99 = v86;
  unsigned int v98 = *(_DWORD *)(v86 + 84);
  if (v98) {
    unsigned int v3 = v98 - 1;
  }
  else {
    unsigned int v3 = 0;
  }
  uint64_t v79 = swift_getAssociatedTypeWitness();
  uint64_t v91 = *(void *)(v79 - 8);
  uint64_t v96 = v91;
  unsigned int v4 = *(_DWORD *)(v91 + 84);
  uint64_t v76 = swift_getAssociatedTypeWitness();
  uint64_t v90 = *(void *)(v76 - 8);
  unsigned int v5 = *(_DWORD *)(v90 + 84);
  unsigned int v80 = v4;
  unsigned int v75 = v5;
  if (v4 > v5) {
    unsigned int v5 = v4;
  }
  unsigned int v78 = v5;
  if (v5 <= 0x7FFFFFFE) {
    unsigned int v5 = 2147483646;
  }
  unsigned int v83 = v5;
  unsigned int v6 = v5 - 1;
  unsigned int v84 = v6;
  if (v3 > v6) {
    unsigned int v6 = v3;
  }
  if (v6 <= 0x7FFFFFFE) {
    unsigned int v6 = 2147483646;
  }
  unsigned int v100 = v6;
  uint64_t v82 = swift_getAssociatedTypeWitness();
  uint64_t v89 = *(void *)(v82 - 8);
  unsigned int v97 = *(_DWORD *)(v89 + 84);
  if (v97) {
    unsigned int v7 = v97 - 1;
  }
  else {
    unsigned int v7 = 0;
  }
  uint64_t v74 = swift_getAssociatedTypeWitness();
  uint64_t v88 = *(void *)(v74 - 8);
  unsigned int v8 = *(_DWORD *)(v88 + 84);
  int v101 = 0;
  uint64_t v72 = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(v72 - 8);
  uint64_t v10 = v86;
  unsigned int v11 = *(_DWORD *)(v9 + 84);
  unsigned int v77 = v8;
  unsigned int v70 = v11;
  if (v8 > v11) {
    unsigned int v11 = v8;
  }
  unsigned int v73 = v11;
  if (v11 <= 0x7FFFFFFE) {
    unsigned int v11 = 2147483646;
  }
  unsigned int v81 = v11;
  unsigned int v12 = v11 - 1;
  unsigned int v87 = v7;
  if (v7 <= v11 - 1) {
    unsigned int v13 = v11 - 1;
  }
  else {
    unsigned int v13 = v7;
  }
  if (v13 <= 0x7FFFFFFE) {
    unsigned int v14 = 2147483646;
  }
  else {
    unsigned int v14 = v13;
  }
  uint64_t v15 = *(unsigned __int8 *)(v90 + 80);
  uint64_t v71 = *(void *)(v72 - 8);
  uint64_t v16 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v17 = *(void *)(v91 + 64);
  uint64_t v18 = *(void *)(v88 + 64);
  if (v14 <= v100) {
    unsigned int v19 = v100;
  }
  else {
    unsigned int v19 = v14;
  }
  if (v19 <= 0x7FFFFFFF) {
    unsigned int v20 = 0x7FFFFFFF;
  }
  else {
    unsigned int v20 = v19;
  }
  if (v20 - 1 < v20) {
    unsigned int v21 = v20;
  }
  else {
    unsigned int v21 = v20 - 1;
  }
  if (v98) {
    uint64_t v22 = *(void *)(v10 + 64);
  }
  else {
    uint64_t v22 = *(void *)(v10 + 64) + 1;
  }
  int v23 = *(_DWORD *)(v91 + 80) & 0xF8 | v15;
  uint64_t v24 = v23 | 7u;
  int v25 = v23 | *(_DWORD *)(v99 + 80) & 0xF8;
  uint64_t v26 = *(_DWORD *)(v88 + 80) & 0xF8 | v16 | 7;
  uint64_t v27 = v26 | *(_DWORD *)(v89 + 80) & 0xF8;
  uint64_t v28 = v25 | v27;
  uint64_t v29 = v17 + 7;
  uint64_t v92 = v15 + 8;
  unint64_t v30 = (((*(void *)(v90 + 64) + ((v15 + 8 + ((v17 + 7) & 0xFFFFFFFFFFFFFFF8)) & ~v15) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8;
  size_t v31 = v30 + 16;
  uint64_t v32 = v22 + 7;
  unint64_t v33 = ((v24 + 9 + ((((v22 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v24) + v30 + 16 + 34;
  unint64_t v34 = (((((v33 & 0xFFFFFFFFFFFFFFF8) + 63) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v97) {
    uint64_t v35 = *(void *)(v89 + 64);
  }
  else {
    uint64_t v35 = *(void *)(v89 + 64) + 1;
  }
  uint64_t v36 = v18 + 7;
  uint64_t v37 = v16 + 8;
  unint64_t v38 = (((*(void *)(*(void *)(v72 - 8) + 64) + ((v16 + 8 + ((v18 + 7) & 0xFFFFFFFFFFFFFFF8)) & ~v16) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v39 = v35 + 7;
  uint64_t v40 = v26 + 9;
  unint64_t v41 = ((v26 + 9 + ((((v35 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v26) + v38 + 16 + 34;
  unint64_t v42 = (((((v41 & 0xFFFFFFFFFFFFFFF8) + 63) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  unint64_t v43 = (((v42 + ((v34 + v27) & ~v27) + 23) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8;
  size_t v44 = ((v28
        + 9
        + ((((v43 + ((((v28 + 9) | v28) + v43 + 8) & ~v28) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)) & ~v28)
      + v43
      + 8;
  if (a3 > v21)
  {
    if (v44 <= 3)
    {
      unsigned int v46 = ((a3 - v21 + ~(-1 << (8 * v44))) >> (8 * v44)) + 1;
      if (HIWORD(v46))
      {
        int v45 = 4;
      }
      else if (v46 >= 0x100)
      {
        int v45 = 2;
      }
      else
      {
        int v45 = v46 > 1;
      }
    }
    else
    {
      int v45 = 1;
    }
    int v101 = v45;
  }
  if (v21 < a2)
  {
    unsigned int v47 = ~v21 + a2;
    if (v44 < 4)
    {
      int v48 = (v47 >> (8 * v44)) + 1;
      if (v44)
      {
        int v52 = v47 & ~(-1 << (8 * v44));
        bzero(a1, v44);
        if (v44 == 3)
        {
          *(_WORD *)a1 = v52;
          a1[2] = BYTE2(v52);
        }
        else if (v44 == 2)
        {
          *(_WORD *)a1 = v52;
        }
        else
        {
          *a1 = v52;
        }
      }
    }
    else
    {
      bzero(a1, v44);
      *(_DWORD *)a1 = v47;
      int v48 = 1;
    }
    switch(v101)
    {
      case 1:
        a1[v44] = v48;
        return;
      case 2:
        *(_WORD *)&a1[v44] = v48;
        return;
      case 3:
        goto LABEL_118;
      case 4:
        *(_DWORD *)&a1[v44] = v48;
        return;
      default:
        return;
    }
  }
  uint64_t v94 = ~v27;
  uint64_t v49 = ~v15;
  uint64_t v50 = ~v26;
  uint64_t v51 = ~v16;
  switch(v101)
  {
    case 1:
      a1[v44] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_61;
    case 2:
      *(_WORD *)&a1[v44] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_61;
    case 3:
LABEL_118:
      __break(1u);
      JUMPOUT(0x100121208);
    case 4:
      *(_DWORD *)&a1[v44] = 0;
      goto LABEL_60;
    default:
LABEL_60:
      if (!a2) {
        return;
      }
LABEL_61:
      unint64_t v53 = (_DWORD *)((unint64_t)&a1[v28 + 9] & ~v28);
      if (v20 < a2)
      {
        int v54 = ((((((((((v41 & 0xFFFFFFF8) + 63) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8)
                 + ((v27 + (((((v33 & 0xFFFFFFF8) + 63) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 8) & v94)
                 + 8) & 0xFFFFFFF8)
               + 23) & 0xFFFFFFF8)
             + 39) & 0xFFFFFFF8;
        size_t v31 = (v54 + 8);
        if (v54 == -8) {
          return;
        }
        unsigned int v55 = ~v20 + a2;
        goto LABEL_64;
      }
      if (v100 != v20)
      {
        unint64_t v62 = ((unint64_t)v53 + v27 + v34) & v94;
        if (v14 != v20)
        {
          if ((a2 & 0x80000000) != 0) {
            uint64_t v64 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v64 = a2 - 1;
          }
          *(void *)(((v62 + v42) & 0xFFFFFFFFFFFFFFF8) + 8) = v64;
          return;
        }
        if (v87 == v14)
        {
          uint64_t v57 = a2 + 1;
          unsigned int v58 = *(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v89 + 56);
          unint64_t v59 = ((unint64_t)v53 + v27 + v34) & v94;
          uint64_t v60 = v97;
          uint64_t v61 = v82;
          goto LABEL_74;
        }
        unint64_t v53 = (_DWORD *)((v40 + ((((v39 + v62) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v50);
        if (v12 == v14)
        {
          uint64_t v57 = a2 + 1;
          if (v57 > v81)
          {
            if (v38 != -16)
            {
              unsigned int v55 = a2 - v81;
              unsigned int v56 = (void *)((v40 + ((((v39 + v62) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v50);
              size_t v31 = v38 + 16;
              goto LABEL_65;
            }
            return;
          }
          if (a2 == -1) {
            return;
          }
          uint64_t v60 = v77;
          if (v77 == v81)
          {
            unsigned int v58 = *(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v88 + 56);
            unint64_t v59 = (v40 + ((((v39 + v62) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v50;
            uint64_t v61 = v74;
            goto LABEL_74;
          }
          uint64_t v67 = (void *)(((unint64_t)v53 + v36) & 0xFFFFFFFFFFFFFFF8);
          if (v73 > 0x7FFFFFFE)
          {
            unint64_t v59 = ((unint64_t)v67 + v37) & v51;
            uint64_t v61 = v72;
            unsigned int v58 = *(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v71 + 56);
            uint64_t v60 = v70;
            goto LABEL_74;
          }
          if (v57 <= 0x7FFFFFFE)
          {
            *uint64_t v67 = v57;
            return;
          }
          int v68 = -2147483646;
LABEL_104:
          *uint64_t v67 = 0;
          *(_DWORD *)uint64_t v67 = a2 + v68;
          return;
        }
        uint64_t v65 = (char *)v53 + v38;
LABEL_101:
        uint64_t v67 = (void *)((((unint64_t)(v65 + 26) & 0xFFFFFFFFFFFFFFF8) + 87) & 0xFFFFFFFFFFFFFFF8);
        if (a2 <= 0x7FFFFFFE)
        {
          *uint64_t v67 = a2;
          return;
        }
        int v68 = -2147483647;
        goto LABEL_104;
      }
      if (v3 == v100)
      {
        uint64_t v57 = a2 + 1;
        unsigned int v58 = *(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v99 + 56);
        unint64_t v59 = (unint64_t)v53;
        uint64_t v60 = v98;
        uint64_t v61 = AssociatedTypeWitness;
LABEL_74:
        v58(v59, v57, v60, v61);
        return;
      }
      unint64_t v53 = (_DWORD *)((v24 + 9 + (((((unint64_t)v53 + v32) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v24);
      if (v84 != v100)
      {
        uint64_t v65 = (char *)v53 + v30;
        goto LABEL_101;
      }
      uint64_t v63 = a2 + 1;
      if (v63 <= v83)
      {
        if (a2 == -1) {
          return;
        }
        uint64_t v66 = v49;
        uint64_t v60 = v80;
        if (v80 == v83)
        {
          unsigned int v58 = *(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v96 + 56);
          unint64_t v59 = (unint64_t)v53;
          uint64_t v57 = a2 + 1;
          uint64_t v61 = v79;
        }
        else
        {
          unsigned int v69 = (void *)(((unint64_t)v53 + v29) & 0xFFFFFFFFFFFFFFF8);
          if (v78 <= 0x7FFFFFFE)
          {
            if (v63 > 0x7FFFFFFE)
            {
              *unsigned int v69 = 0;
              *(_DWORD *)unsigned int v69 = a2 - 2147483646;
            }
            else
            {
              *unsigned int v69 = v63;
            }
            return;
          }
          unint64_t v59 = ((unint64_t)v69 + v92) & v66;
          unsigned int v58 = *(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v90 + 56);
          uint64_t v57 = a2 + 1;
          uint64_t v60 = v75;
          uint64_t v61 = v76;
        }
        goto LABEL_74;
      }
      if (v30 != -16)
      {
        unsigned int v55 = a2 - v83;
LABEL_64:
        unsigned int v56 = v53;
LABEL_65:
        bzero(v56, v31);
        *unint64_t v53 = v55;
      }
      return;
  }
}

uint64_t initializeBufferWithCopyOfBuffer for UpdateSyncPauseOperation(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)unint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for VFSItemID(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for VFSItemID(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1001212D0(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 1u) {
    return *(unsigned __int8 *)(a1 + 8);
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_1001212E8(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)unint64_t result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 8) = a2;
  return result;
}

uint64_t type metadata accessor for ReconciliationTable.PersistAction()
{
  return swift_getGenericMetadata();
}

uint64_t sub_10012131C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10010EB28(a1, a2);
}

uint64_t sub_1001213C8(uint64_t a1)
{
  uint64_t v58 = sub_10002B7CC(&qword_100ACDA10);
  uint64_t v3 = __chkstk_darwin(v58);
  uint64_t v57 = (char *)v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __chkstk_darwin(v3);
  unsigned int v56 = (char *)v47 - v6;
  __chkstk_darwin(v5);
  unsigned int v55 = (void *)((char *)v47 - v7);
  uint64_t v8 = sub_10002B7CC(&qword_100ACCB10);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8 - 8);
  unsigned int v11 = (char *)v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  int v14 = *(unsigned __int8 *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  int v17 = *(unsigned __int8 *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v62 = v12;
  int v63 = v14;
  uint64_t v59 = v15;
  uint64_t v60 = v16;
  int v61 = v17;
  uint64_t v19 = sub_10057D5A0();
  unsigned int v20 = _swiftEmptyArrayStorage;
  if (!v19) {
    return (uint64_t)v20;
  }
  uint64_t v21 = v19;
  uint64_t v67 = _swiftEmptyArrayStorage;
  uint64_t result = sub_100446024(0, v19 & ~(v19 >> 63), 0);
  if (v21 < 0)
  {
LABEL_39:
    __break(1u);
  }
  else
  {
    v47[1] = v1;
    uint64_t v23 = v62;
    uint64_t result = sub_1001302C0(v62, v13, v63);
    uint64_t v24 = 0;
    uint64_t v25 = v18 + 64;
    uint64_t v48 = v18 + 80;
    uint64_t v49 = v21;
    uint64_t v53 = v18;
    uint64_t v54 = v9;
    uint64_t v50 = v13;
    uint64_t v51 = v18 + 64;
    int v52 = v11;
    while ((v63 & 1) == 0)
    {
      if (v23 < v62)
      {
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
        goto LABEL_39;
      }
      if (v61) {
        goto LABEL_41;
      }
      if (v13 != v60) {
        goto LABEL_31;
      }
      if (v23 >= v59) {
        goto LABEL_32;
      }
      if (v23 < 0 || v23 >= 1 << *(unsigned char *)(v18 + 32)) {
        goto LABEL_33;
      }
      unint64_t v28 = (unint64_t)v23 >> 6;
      if ((*(void *)(v25 + 8 * ((unint64_t)v23 >> 6)) & (1 << v23)) == 0) {
        goto LABEL_34;
      }
      if (*(_DWORD *)(v18 + 36) != v13) {
        goto LABEL_35;
      }
      uint64_t v64 = v24;
      uint64_t v65 = 1 << v23;
      uint64_t v29 = v58;
      uint64_t v30 = (uint64_t)v56;
      uint64_t v31 = (uint64_t)&v56[*(int *)(v58 + 48)];
      uint64_t v32 = *(void *)(v18 + 56);
      uint64_t v33 = *(void *)(v18 + 48) + 16 * v23;
      uint64_t v34 = *(void *)v33;
      char v35 = *(unsigned char *)(v33 + 8);
      uint64_t v66 = *(void *)(v9 + 72);
      sub_10002B70C(v32 + v66 * v23, v31, &qword_100ACCB10);
      *(void *)uint64_t v30 = v34;
      *(unsigned char *)(v30 + 8) = v35;
      uint64_t v36 = (uint64_t)v55;
      void *v55 = v34;
      *(unsigned char *)(v36 + 8) = v35;
      sub_10002B70C(v31, v36 + *(int *)(v29 + 48), &qword_100ACCB10);
      sub_10002B770(v30, &qword_100ACDA10);
      sub_10001AE98(v36, v30, &qword_100ACDA10);
      uint64_t v37 = *(int *)(v29 + 48);
      uint64_t v38 = (uint64_t)v52;
      uint64_t v39 = (uint64_t)&v57[v37];
      sub_10002B70C(v30 + v37, (uint64_t)&v57[v37], &qword_100ACCB10);
      sub_10001AE98(v39, v38, &qword_100ACCB10);
      sub_10002B770(v30, &qword_100ACDA10);
      unsigned int v20 = v67;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100446024(0, v20[2] + 1, 1);
        unsigned int v20 = v67;
      }
      unint64_t v41 = v20[2];
      unint64_t v40 = v20[3];
      uint64_t v9 = v54;
      if (v41 >= v40 >> 1)
      {
        sub_100446024(v40 > 1, v41 + 1, 1);
        unsigned int v20 = v67;
      }
      v20[2] = v41 + 1;
      uint64_t result = sub_10001AE98(v38, (uint64_t)v20+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ v41 * v66, &qword_100ACCB10);
      uint64_t v18 = v53;
      int64_t v26 = 1 << *(unsigned char *)(v53 + 32);
      if (v23 >= v26) {
        goto LABEL_36;
      }
      uint64_t v25 = v51;
      uint64_t v42 = *(void *)(v51 + 8 * v28);
      if ((v42 & v65) == 0) {
        goto LABEL_37;
      }
      LODWORD(v13) = v50;
      if (*(_DWORD *)(v53 + 36) != v50) {
        goto LABEL_38;
      }
      unint64_t v43 = v42 & (-2 << (v23 & 0x3F));
      if (v43)
      {
        int64_t v26 = __clz(__rbit64(v43)) | v23 & 0xFFFFFFFFFFFFFFC0;
        uint64_t v27 = v49;
      }
      else
      {
        unint64_t v44 = v28 + 1;
        unint64_t v45 = (unint64_t)(v26 + 63) >> 6;
        uint64_t v27 = v49;
        if (v28 + 1 < v45)
        {
          unint64_t v46 = *(void *)(v51 + 8 * v44);
          if (v46)
          {
LABEL_28:
            int64_t v26 = __clz(__rbit64(v46)) + (v44 << 6);
          }
          else
          {
            while (v45 - 2 != v28)
            {
              unint64_t v46 = *(void *)(v48 + 8 * v28++);
              if (v46)
              {
                unint64_t v44 = v28 + 1;
                goto LABEL_28;
              }
            }
          }
        }
      }
      uint64_t v24 = v64 + 1;
      uint64_t v23 = v26;
      if (v64 + 1 == v27) {
        return (uint64_t)v20;
      }
    }
  }
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_100121880(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, unint64_t a7)
{
  uint64_t v7 = a7 >> 62;
  uint64_t v8 = a3;
  uint64_t v9 = 0;
  switch(a7 >> 62)
  {
    case 1uLL:
      LODWORD(v10) = HIDWORD(a6) - a6;
      if (__OFSUB__(HIDWORD(a6), a6))
      {
        __break(1u);
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      uint64_t v10 = (int)v10;
LABEL_6:
      if (v10 < 1) {
        return 0;
      }
      if (a5) {
        goto LABEL_16;
      }
      if (a3 != a4)
      {
        if ((unint64_t)(a2 - 0x1000000000000000) >> 61 != 7)
        {
LABEL_37:
          __break(1u);
          goto LABEL_38;
        }
        uint64_t v7 = a4 - a3;
        if (__OFSUB__(a4, a3))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          goto LABEL_40;
        }
        uint64_t v10 = 8 * a2;
        if (v7 >= 8 * a2) {
          uint64_t v7 = 8 * a2;
        }
        uint64_t v14 = a3 + v7;
        if (__OFADD__(a3, v7)) {
          goto LABEL_39;
        }
        if (v14 >= a3) {
          goto LABEL_26;
        }
        __break(1u);
LABEL_16:
        if (v7)
        {
          if (v7 == 1) {
            uint64_t v8 = (int)a6;
          }
          else {
            uint64_t v8 = *(void *)(a6 + 16);
          }
        }
        else
        {
          uint64_t v8 = 0;
        }
        if ((unint64_t)(a2 - 0x1000000000000000) >> 61 == 7)
        {
          uint64_t v15 = 8 * a2;
          if (v10 < 8 * a2) {
            uint64_t v15 = v10;
          }
          uint64_t v14 = v8 + v15;
          if (!__OFADD__(v8, v15))
          {
            if (v14 >= v8)
            {
LABEL_26:
              if (v8 == v14) {
                return 0;
              }
              if (!a1)
              {
LABEL_40:
                __break(1u);
                JUMPOUT(0x1001219F0);
              }
              sub_10096AF10();
              uint64_t v9 = v14 - v8;
              if (!__OFSUB__(v14, v8)) {
                return v9;
              }
              goto LABEL_36;
            }
LABEL_35:
            __break(1u);
LABEL_36:
            __break(1u);
            goto LABEL_37;
          }
LABEL_34:
          __break(1u);
          goto LABEL_35;
        }
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
      return 0;
    case 2uLL:
      uint64_t v12 = *(void *)(a6 + 16);
      uint64_t v11 = *(void *)(a6 + 24);
      BOOL v13 = __OFSUB__(v11, v12);
      uint64_t v10 = v11 - v12;
      if (!v13) {
        goto LABEL_6;
      }
      goto LABEL_32;
    case 3uLL:
      return v9;
    default:
      uint64_t v10 = BYTE6(a7);
      goto LABEL_6;
  }
}

uint64_t sub_100121A00()
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_10096B600();
  swift_release();
  swift_release();
  return v1;
}

char *sub_100121A74(uint64_t a1, int a2, void *a3, uint64_t a4, uint64_t a5, char *a6, int a7)
{
  int v46 = a7;
  unint64_t v44 = a6;
  uint64_t v45 = a4;
  uint64_t v57 = a5;
  LODWORD(v56) = a2;
  uint64_t v43 = a1;
  uint64_t v9 = sub_10096C680();
  uint64_t v51 = *(void *)(v9 - 8);
  uint64_t v52 = v9;
  __chkstk_darwin(v9);
  uint64_t v50 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10002B7CC(&qword_100ACDA30);
  uint64_t v48 = *(void *)(v11 - 8);
  uint64_t v49 = v11;
  __chkstk_darwin(v11);
  unsigned int v47 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10002B7CC((uint64_t *)&unk_100ACDA38);
  uint64_t v54 = *(void *)(v13 - 8);
  uint64_t v55 = v13;
  __chkstk_darwin(v13);
  uint64_t v53 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10096B480();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_unknownObjectWeakInit();
  uint64_t v19 = OBJC_IVAR____TtC9libfssync14FPFSEnumerator_fpItemID;
  *(void *)&v7[OBJC_IVAR____TtC9libfssync14FPFSEnumerator_fpItemID] = 0;
  *(void *)&v7[OBJC_IVAR____TtC9libfssync14FPFSEnumerator_extensionEnumerator] = 0;
  unsigned int v20 = &v7[OBJC_IVAR____TtC9libfssync14FPFSEnumerator_keepAlive];
  *unsigned int v20 = 0;
  v20[1] = 0;
  v7[OBJC_IVAR____TtC9libfssync14FPFSEnumerator_invalidated] = 0;
  uint64_t v21 = OBJC_IVAR____TtC9libfssync14FPFSEnumerator_buildAndFilterAppLibraries;
  v7[OBJC_IVAR____TtC9libfssync14FPFSEnumerator_buildAndFilterAppLibraries] = 0;
  *(void *)&v7[OBJC_IVAR____TtC9libfssync14FPFSEnumerator_cancellable] = 0;
  uint64_t v22 = OBJC_IVAR____TtC9libfssync14FPFSEnumerator_changedItemsByID;
  uint64_t v23 = v7;
  *(void *)&v7[v22] = sub_100099324((uint64_t)_swiftEmptyArrayStorage);
  *(void *)&v23[OBJC_IVAR____TtC9libfssync14FPFSEnumerator_deletedItemsIDs] = &_swiftEmptySetSingleton;
  uint64_t v24 = &v23[OBJC_IVAR____TtC9libfssync14FPFSEnumerator_vfsItemID];
  *(void *)uint64_t v24 = v43;
  v24[8] = (char)v56;
  uint64_t v25 = *(void **)&v7[v19];
  *(void *)&v7[v19] = a3;
  uint64_t v26 = v57;
  id v56 = a3;

  uint64_t v27 = v44;
  *(void *)&v23[OBJC_IVAR____TtC9libfssync14FPFSEnumerator_lifetimeExtender] = v45;
  *(void *)&v23[OBJC_IVAR____TtC9libfssync14FPFSEnumerator_observer] = v26;
  swift_unknownObjectWeakAssign();
  v7[v21] = v46;
  unint64_t v28 = *(void **)&v27[OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_log];
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  id v29 = v28;
  sub_10096B490();
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(&v23[OBJC_IVAR____TtC9libfssync14FPFSEnumerator_logger], v18, v15);
  *(void *)&v23[OBJC_IVAR____TtC9libfssync14FPFSEnumerator_previousAnchor] = 0;
  swift_beginAccess();
  uint64_t v59 = 0;
  sub_10096B5D0();
  swift_endAccess();

  uint64_t v30 = (objc_class *)type metadata accessor for FPFSEnumerator();
  v58.receiver = v23;
  v58.super_class = v30;
  uint64_t v31 = (char *)objc_msgSendSuper2(&v58, "init");
  uint64_t v32 = v31;
  if (a3)
  {
    id v33 = v56;
    uint64_t v34 = v32;
    sub_100122378((uint64_t)v33);
  }
  else
  {
    char v35 = v31;
  }
  swift_beginAccess();
  sub_10002B7CC(&qword_100ACDA28);
  uint64_t v36 = v47;
  sub_10096B5E0();
  swift_endAccess();
  uint64_t v37 = v50;
  sub_10096C660();
  uint64_t v60 = *(void *)&v27[OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_queue];
  sub_100011348(0, (unint64_t *)&qword_100ACBC10);
  sub_100025500(&qword_100ACDA48, &qword_100ACDA30);
  sub_100130AEC();
  uint64_t v38 = v53;
  uint64_t v39 = v49;
  sub_10096B660();
  (*(void (**)(char *, uint64_t))(v51 + 8))(v37, v52);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v36, v39);
  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_100025500(qword_100ACDA58, (uint64_t *)&unk_100ACDA38);
  uint64_t v40 = v55;
  uint64_t v41 = sub_10096B670();

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  swift_release();
  (*(void (**)(char *, uint64_t))(v54 + 8))(v38, v40);
  *(void *)&v32[OBJC_IVAR____TtC9libfssync14FPFSEnumerator_cancellable] = v41;
  swift_release();
  return v32;
}

uint64_t sub_10012208C()
{
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v1 = (void *)result;
    uint64_t v2 = *(void **)(result + OBJC_IVAR____TtC9libfssync14FPFSEnumerator_observer);
    swift_unknownObjectRetain();

    [v2 enumerationResultsDidChange];
    return swift_unknownObjectRelease();
  }
  return result;
}

id sub_100122108()
{
  sub_100122668();
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FPFSEnumerator();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_100122324()
{
  return type metadata accessor for FPFSEnumerator();
}

uint64_t type metadata accessor for FPFSEnumerator()
{
  uint64_t result = qword_100ACD938;
  if (!qword_100ACD938) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100122378(uint64_t a1)
{
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v14 = (id)Strong;
    uint64_t v4 = swift_unknownObjectWeakLoadStrong();
    if (v4)
    {
      uint64_t v5 = (void *)v4;
      id v6 = [objc_allocWithZone((Class)FPExtensionEnumerationSettings) init];
      id v7 = [v5 providerDomainID];
      id v8 = [objc_allocWithZone((Class)FPItemID) initWithProviderDomainID:v7 itemIdentifier:a1];

      [v6 setEnumeratedItemID:v8];
      id v9 = [v5 extensionBackend];
      uint64_t v10 = *(void *)(v1 + OBJC_IVAR____TtC9libfssync14FPFSEnumerator_lifetimeExtender);
      id v11 = [objc_allocWithZone((Class)type metadata accessor for DummyEnumeratorObserver()) init];
      uint64_t v12 = swift_allocObject();
      swift_unknownObjectWeakInit();
      aBlock[4] = sub_10012F548;
      aBlock[5] = v12;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_10026D1BC;
      aBlock[3] = &unk_100A70938;
      uint64_t v13 = _Block_copy(aBlock);
      swift_release();
      [v9 enumerateWithSettings:v6 lifetimeExtender:v10 observer:v11 completionHandler:v13];
      _Block_release(v13);

      swift_unknownObjectRelease();
    }
    else
    {
    }
  }
}

void sub_1001225A8(void *a1)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v3 = (void *)Strong;
    if (*(unsigned char *)(Strong + OBJC_IVAR____TtC9libfssync14FPFSEnumerator_invalidated))
    {
      if (a1) {
        [a1 invalidate];
      }
    }
    else
    {
      *(void *)(Strong + OBJC_IVAR____TtC9libfssync14FPFSEnumerator_extensionEnumerator) = a1;
      swift_unknownObjectRetain();

      swift_unknownObjectRelease();
    }
  }
  else if (a1)
  {
    [a1 invalidate];
  }
}

void sub_100122668()
{
  uint64_t v1 = (unsigned int *)(v0 + OBJC_IVAR____TtC9libfssync14FPFSEnumerator_invalidated);
  __swp(v1, v1);
  if ((v1 & 1) == 0)
  {
    objc_super v2 = *(void (**)(uint64_t))(v0 + OBJC_IVAR____TtC9libfssync14FPFSEnumerator_keepAlive);
    if (v2)
    {
      uint64_t v3 = swift_retain();
      v2(v3);
      sub_1000705CC((uint64_t)v2);
    }
    uint64_t v4 = *(void **)(v0 + OBJC_IVAR____TtC9libfssync14FPFSEnumerator_extensionEnumerator);
    if (v4) {
      [v4 invalidate];
    }
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      id v6 = (void *)Strong;
      id v7 = (void *)swift_unknownObjectWeakLoadStrong();

      if (v7)
      {
        id v8 = [v7 session];

        [v8 asyncUnregisterLifetimeExtensionForObject:*(void *)(v0 + OBJC_IVAR____TtC9libfssync14FPFSEnumerator_lifetimeExtender)];
        swift_unknownObjectRelease();
      }
    }
    uint64_t v9 = swift_unknownObjectWeakLoadStrong();
    if (v9)
    {
      uint64_t v10 = (void *)v9;
      id v11 = (void *)swift_unknownObjectWeakLoadStrong();
      if (v11)
      {
        uint64_t v12 = v11;
        id v13 = [v11 log];
      }
      else
      {
        id v13 = 0;
      }
      uint64_t v14 = swift_allocObject();
      *(void *)(v14 + 16) = v10;
      *(void *)(v14 + 24) = v0;
      id v15 = v10;
      sub_1006B8108(v13, (uint64_t)"enumeratorHasBeenInvalidated(_:)", 32, 2, (uint64_t)sub_10012F508, v14);

      swift_release();
    }
    uint64_t v16 = OBJC_IVAR____TtC9libfssync14FPFSEnumerator_cancellable;
    if (*(void *)(v0 + OBJC_IVAR____TtC9libfssync14FPFSEnumerator_cancellable))
    {
      swift_retain();
      sub_10096B5C0();
      swift_release();
    }
    *(void *)(v0 + v16) = 0;
    swift_release();
  }
}

uint64_t sub_1001228DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v57 = sub_10002B7CC((uint64_t *)&unk_100ADBFF0);
  __chkstk_darwin(v57);
  id v6 = (char *)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10002B7CC((uint64_t *)&unk_100AD0CF0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10002B7CC(&qword_100ACCB10);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v56 - v15;
  sub_10002B70C(a1, (uint64_t)v9, (uint64_t *)&unk_100AD0CF0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) != 1)
  {
    uint64_t v56 = a2;
    sub_10001AE98((uint64_t)v9, (uint64_t)v16, &qword_100ACCB10);
    if (*(unsigned char *)(v2 + OBJC_IVAR____TtC9libfssync14FPFSEnumerator_buildAndFilterAppLibraries) == 1)
    {
      int v20 = v16[*(int *)(v10 + 48)];
      sub_10002B70C((uint64_t)v16, (uint64_t)v14, &qword_100ACCB10);
      if (v20 == 1)
      {
        uint64_t v21 = *((void *)v14 + 2);
        char v22 = v14[24];
        uint64_t v24 = *((void *)v14 + 16);
        uint64_t v23 = *((void *)v14 + 17);
        sub_1000D37D0((uint64_t)&v14[*(int *)(v10 + 48)], (uint64_t)&v6[*(int *)(v57 + 40)], (uint64_t (*)(void))type metadata accessor for ItemMetadata);
        *(void *)id v6 = v21;
        v6[8] = v22;
        *((void *)v6 + 2) = v24;
        *((void *)v6 + 3) = v23;
        swift_bridgeObjectRetain_n();
        sub_10002B770((uint64_t)v6, (uint64_t *)&unk_100ADBFF0);
        if (v24 == 0x746E656D75636F44 && v23 == 0xE900000000000073)
        {
          swift_bridgeObjectRelease();
          sub_10002B770((uint64_t)v14, &qword_100ACCB10);
          goto LABEL_57;
        }
        char v26 = sub_10096D2D0();
        swift_bridgeObjectRelease();
        sub_10002B770((uint64_t)v14, &qword_100ACCB10);
        if (v26)
        {
LABEL_57:
          uint64_t v43 = v56;
          sub_10002B70C((uint64_t)v16, v56, &qword_100ACCB10);
          uint64_t v44 = *(void *)v16;
          int v45 = v16[8];
          sub_10002B770((uint64_t)v16, &qword_100ACCB10);
          uint64_t v46 = *(void *)(v2 + OBJC_IVAR____TtC9libfssync14FPFSEnumerator_vfsItemID);
          int v47 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC9libfssync14FPFSEnumerator_vfsItemID + 8);
          if (v45)
          {
            if (v45 == 1)
            {
              BOOL v48 = v47 == 1 && v44 == v46;
            }
            else if (v44)
            {
              BOOL v48 = v47 == 2 && v46 == 1;
            }
            else
            {
              BOOL v48 = v47 == 2 && v46 == 0;
            }
          }
          else
          {
            if (*(unsigned char *)(v2 + OBJC_IVAR____TtC9libfssync14FPFSEnumerator_vfsItemID + 8))
            {
              char v55 = 0;
LABEL_85:
              uint64_t v17 = sub_10002B7CC((uint64_t *)&unk_100ACD9E0);
              *(unsigned char *)(v43 + *(int *)(v17 + 48)) = v55;
              uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56);
              uint64_t v19 = v43;
              uint64_t v41 = 0;
              return v18(v19, v41, 1, v17);
            }
            BOOL v48 = v44 == v46;
          }
          char v55 = v48;
          goto LABEL_85;
        }
      }
      else
      {
        sub_10002B770((uint64_t)v14, &qword_100ACCB10);
      }
    }
    uint64_t v27 = *(void *)v16;
    uint64_t v28 = *(void *)(v2 + OBJC_IVAR____TtC9libfssync14FPFSEnumerator_vfsItemID);
    int v29 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC9libfssync14FPFSEnumerator_vfsItemID + 8);
    BOOL v30 = *(void *)v16 == v28;
    if (*(unsigned char *)(v2 + OBJC_IVAR____TtC9libfssync14FPFSEnumerator_vfsItemID + 8)) {
      BOOL v30 = 0;
    }
    BOOL v32 = v29 == 1 && v27 == v28;
    BOOL v34 = v29 == 2 && v28 == 0;
    BOOL v36 = v29 == 2 && v28 == 1;
    if (v27) {
      BOOL v37 = v36;
    }
    else {
      BOOL v37 = v34;
    }
    if (v16[8] == 1) {
      BOOL v37 = v32;
    }
    if (v16[8]) {
      BOOL v38 = v37;
    }
    else {
      BOOL v38 = v30;
    }
    uint64_t v39 = *((void *)v16 + 2);
    if (v16[24])
    {
      if (v16[24] == 1)
      {
        if (v29 == 1)
        {
          int v40 = v39 == v28 || v38;
          if (v40 == 1) {
            goto LABEL_70;
          }
          goto LABEL_50;
        }
LABEL_49:
        if (v38)
        {
LABEL_70:
          uint64_t v50 = sub_10002B7CC((uint64_t *)&unk_100ACD9E0);
          uint64_t v51 = *(int *)(v50 + 48);
          uint64_t v52 = (uint64_t)v16;
          uint64_t v53 = v56;
          sub_10001AE98(v52, v56, &qword_100ACCB10);
          *(unsigned char *)(v53 + v51) = v38;
          uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 56);
          uint64_t v19 = v53;
          uint64_t v41 = 0;
          uint64_t v17 = v50;
          return v18(v19, v41, 1, v17);
        }
LABEL_50:
        sub_10002B770((uint64_t)v16, &qword_100ACCB10);
        uint64_t v17 = sub_10002B7CC((uint64_t *)&unk_100ACD9E0);
        uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56);
        uint64_t v19 = v56;
        goto LABEL_51;
      }
      if (v39) {
        BOOL v42 = v29 == 2 && v28 == 1;
      }
      else {
        BOOL v42 = v29 == 2 && v28 == 0;
      }
    }
    else
    {
      if (*(unsigned char *)(v2 + OBJC_IVAR____TtC9libfssync14FPFSEnumerator_vfsItemID + 8)) {
        goto LABEL_49;
      }
      BOOL v42 = v39 == v28;
    }
    char v49 = v42 || v38;
    if (v49) {
      goto LABEL_70;
    }
    goto LABEL_50;
  }
  sub_10002B770((uint64_t)v9, (uint64_t *)&unk_100AD0CF0);
  uint64_t v17 = sub_10002B7CC((uint64_t *)&unk_100ACD9E0);
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56);
  uint64_t v19 = a2;
LABEL_51:
  uint64_t v41 = 1;
  return v18(v19, v41, 1, v17);
}

void (*sub_100122E64(uint64_t (*a1)(uint64_t)))(uint64_t *, void)
{
  char v131 = a1;
  uint64_t v1 = sub_10002B7CC(&qword_100ACD9C0);
  uint64_t v2 = __chkstk_darwin(v1 - 8);
  uint64_t v125 = (uint64_t)&v113 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v129 = (uint64_t *)((char *)&v113 - v4);
  uint64_t v124 = sub_10002B7CC(&qword_100ACD9C8);
  uint64_t v5 = __chkstk_darwin(v124);
  uint64_t v119 = (uint64_t)&v113 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v123 = (uint64_t)&v113 - v7;
  uint64_t v8 = sub_10002B7CC(&qword_100ACCB10);
  uint64_t v127 = *(void *)(v8 - 8);
  uint64_t v128 = v8;
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v120 = (uint64_t)&v113 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v122 = (uint64_t)&v113 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v121 = (uint64_t)&v113 - v14;
  __chkstk_darwin(v13);
  unint64_t v126 = (uint64_t *)((char *)&v113 - v15);
  uint64_t v16 = sub_10002B7CC((uint64_t *)&unk_100ACD9D0);
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)&v113 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_10002B7CC((uint64_t *)&unk_100AD0CF0);
  uint64_t v20 = __chkstk_darwin(v19 - 8);
  char v22 = (char *)&v113 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __chkstk_darwin(v20);
  uint64_t v25 = (char *)&v113 - v24;
  uint64_t v26 = __chkstk_darwin(v23);
  uint64_t v28 = (char *)&v113 - v27;
  uint64_t v29 = __chkstk_darwin(v26);
  uint64_t v31 = (char *)&v113 - v30;
  uint64_t v32 = __chkstk_darwin(v29);
  BOOL v34 = (char *)&v113 - v33;
  uint64_t v35 = __chkstk_darwin(v32);
  BOOL v37 = (uint64_t (*)(uint64_t))((char *)&v113 - v36);
  uint64_t v38 = __chkstk_darwin(v35);
  int v40 = (char *)&v113 - v39;
  uint64_t v41 = (uint64_t)v134;
  uint64_t result = (void (*)(uint64_t *, void))v131(v38);
  if (!v41)
  {
    size_t v114 = v31;
    unint64_t v116 = v34;
    unint64_t v115 = v22;
    unint64_t v117 = v25;
    uint64_t v118 = v28;
    char v131 = v37;
    unint64_t v134 = v40;
    uint64_t v43 = sub_10002B7CC(&qword_100AD0D30);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v43 - 8) + 48))(v18, 1, v43) == 1) {
      return (void (*)(uint64_t *, void))sub_10002B770((uint64_t)v18, (uint64_t *)&unk_100ACD9D0);
    }
    uint64_t v113 = 0;
    uint64_t v44 = (uint64_t)&v18[*(int *)(v43 + 48)];
    int v45 = v18[*(int *)(v43 + 64)];
    uint64_t v46 = (uint64_t)v134;
    sub_10001AE98((uint64_t)v18, (uint64_t)v134, (uint64_t *)&unk_100AD0CF0);
    int v47 = v131;
    sub_10001AE98(v44, (uint64_t)v131, (uint64_t *)&unk_100AD0CF0);
    uint64_t v49 = (uint64_t)v129;
    BOOL v48 = (void *)v130;
    sub_1001228DC((uint64_t)v47, (uint64_t)v129);
    uint64_t v50 = sub_10002B7CC((uint64_t *)&unk_100ACD9E0);
    uint64_t v51 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 48);
    if (v51(v49, 1, v50) == 1)
    {
      sub_10002B770(v49, &qword_100ACD9C0);
      uint64_t v52 = v125;
      sub_1001228DC(v46, v125);
      if (v51(v52, 1, v50) == 1)
      {
        sub_10002B770(v52, &qword_100ACD9C0);
        uint64_t v53 = v47;
LABEL_24:
        sub_10002B770((uint64_t)v53, (uint64_t *)&unk_100AD0CF0);
        uint64_t v99 = v46;
        return (void (*)(uint64_t *, void))sub_10002B770(v99, (uint64_t *)&unk_100AD0CF0);
      }
      uint64_t v67 = v119;
      sub_10001AE98(v52, v119, &qword_100ACCB10);
      uint64_t v68 = v122;
      sub_10001AE98(v67, v122, &qword_100ACCB10);
      uint64_t v69 = v120;
      sub_10002B70C(v68, v120, &qword_100ACCB10);
      uint64_t v70 = (uint64_t)v117;
      sub_10002B70C((uint64_t)v47, (uint64_t)v117, (uint64_t *)&unk_100AD0CF0);
      id v71 = v48;
      uint64_t v72 = sub_10096B470();
      int v73 = sub_10096C5A0();
      if (os_log_type_enabled(v72, (os_log_type_t)v73))
      {
        LODWORD(v129) = v73;
        uint64_t v74 = swift_slowAlloc();
        unsigned int v75 = (void *)swift_slowAlloc();
        uint64_t v130 = swift_slowAlloc();
        v132[0] = v130;
        *(_DWORD *)uint64_t v74 = 138412802;
        v133[0] = (uint64_t)v71;
        id v76 = v71;
        sub_10096C8C0();
        unint64_t v126 = v75;
        *unsigned int v75 = v71;

        *(_WORD *)(v74 + 12) = 2080;
        uint64_t v77 = sub_1004AD7A8();
        v133[0] = sub_100719D44(v77, v78, v132);
        sub_10096C8C0();
        swift_bridgeObjectRelease();
        sub_10002B770(v69, &qword_100ACCB10);
        *(_WORD *)(v74 + 22) = 2080;
        uint64_t v79 = (uint64_t *)&unk_100AD0CF0;
        uint64_t v80 = (uint64_t)v115;
        sub_10002B70C((uint64_t)v117, (uint64_t)v115, (uint64_t *)&unk_100AD0CF0);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v127 + 48))(v80, 1, v128) == 1)
        {
          uint64_t v81 = 0x3E6C696E3CLL;
          unint64_t v82 = 0xE500000000000000;
        }
        else
        {
          uint64_t v81 = sub_1004AD7A8();
          unint64_t v82 = v100;
          uint64_t v79 = &qword_100ACCB10;
        }
        sub_10002B770(v80, v79);
        v133[0] = sub_100719D44(v81, v82, v132);
        sub_10096C8C0();
        swift_bridgeObjectRelease();
        sub_10002B770((uint64_t)v117, (uint64_t *)&unk_100AD0CF0);
        _os_log_impl((void *)&_mh_execute_header, v72, (os_log_type_t)v129, "📖  %@: registering item deletion %s -> %s", (uint8_t *)v74, 0x20u);
        sub_10002B7CC((uint64_t *)&unk_100ACCBC0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v46 = (uint64_t)v134;
        uint64_t v68 = v122;
      }
      else
      {

        sub_10002B770(v69, &qword_100ACCB10);
        sub_10002B770(v70, (uint64_t *)&unk_100AD0CF0);
      }
      Swift::UInt64 v101 = *(void *)v68;
      char v102 = *(unsigned char *)(v68 + 8);
      uint64_t v103 = (uint64_t)v118;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v127 + 56))(v118, 1, 1, v128);
      swift_beginAccess();
      sub_100360124(v103, v101, v102);
      swift_endAccess();
      swift_beginAccess();
      sub_100494DBC((uint64_t)v133, v101, v102);
      swift_endAccess();
      swift_getKeyPath();
      swift_getKeyPath();
      uint64_t result = (void (*)(uint64_t *, void))sub_10096B5F0();
      if (*v104 != -1)
      {
        ++*v104;
        result(v132, 0);
        swift_release();
        swift_release();
        sub_10002B770(v68, &qword_100ACCB10);
        uint64_t v53 = v131;
        goto LABEL_24;
      }
      __break(1u);
    }
    else
    {
      char v54 = *(unsigned char *)(v49 + *(int *)(v50 + 48));
      uint64_t v55 = v124;
      uint64_t v56 = *(int *)(v124 + 48);
      uint64_t v57 = v49;
      uint64_t v58 = v123;
      sub_10001AE98(v57, v123, &qword_100ACCB10);
      *(unsigned char *)(v58 + v56) = v54;
      int v59 = *(unsigned __int8 *)(v58 + *(int *)(v55 + 48));
      uint64_t v60 = (uint64_t)v126;
      sub_10001AE98(v58, (uint64_t)v126, &qword_100ACCB10);
      if ((v59 & v45) == 1)
      {
        id v61 = v48;
        uint64_t v62 = sub_10096B470();
        os_log_type_t v63 = sub_10096C5A0();
        if (os_log_type_enabled(v62, v63))
        {
          uint64_t v64 = (uint8_t *)swift_slowAlloc();
          uint64_t v65 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v64 = 138412290;
          v132[0] = (uint64_t)v61;
          id v66 = v61;
          uint64_t v60 = (uint64_t)v126;
          sub_10096C8C0();
          *uint64_t v65 = v61;

          _os_log_impl((void *)&_mh_execute_header, v62, v63, "📖  %@: item get updated and we're ask to invalidate the children, reset", v64, 0xCu);
          sub_10002B7CC((uint64_t *)&unk_100ACCBC0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        uint64_t v97 = (uint64_t)v134;
        unsigned int v98 = v131;

        sub_10012BA30();
        sub_10002B770(v60, &qword_100ACCB10);
        sub_10002B770((uint64_t)v98, (uint64_t *)&unk_100AD0CF0);
        uint64_t v99 = v97;
        return (void (*)(uint64_t *, void))sub_10002B770(v99, (uint64_t *)&unk_100AD0CF0);
      }
      uint64_t v83 = (uint64_t)v134;
      uint64_t v84 = (uint64_t)v116;
      sub_10002B70C((uint64_t)v134, (uint64_t)v116, (uint64_t *)&unk_100AD0CF0);
      uint64_t v85 = v121;
      sub_10002B70C(v60, v121, &qword_100ACCB10);
      id v86 = v48;
      unsigned int v87 = sub_10096B470();
      int v88 = sub_10096C5A0();
      if (os_log_type_enabled(v87, (os_log_type_t)v88))
      {
        LODWORD(v125) = v88;
        uint64_t v89 = swift_slowAlloc();
        uint64_t v90 = (void *)swift_slowAlloc();
        uint64_t v130 = swift_slowAlloc();
        v132[0] = v130;
        *(_DWORD *)uint64_t v89 = 138412802;
        v133[0] = (uint64_t)v86;
        id v91 = v86;
        sub_10096C8C0();
        uint64_t v129 = v90;
        void *v90 = v86;

        *(_WORD *)(v89 + 12) = 2080;
        uint64_t v92 = (uint64_t *)&unk_100AD0CF0;
        uint64_t v93 = v84;
        uint64_t v94 = (uint64_t)v114;
        sub_10002B70C(v93, (uint64_t)v114, (uint64_t *)&unk_100AD0CF0);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v127 + 48))(v94, 1, v128) == 1)
        {
          uint64_t v95 = 0x3E6C696E3CLL;
          unint64_t v96 = 0xE500000000000000;
        }
        else
        {
          uint64_t v95 = sub_1004AD7A8();
          unint64_t v96 = v105;
          uint64_t v92 = &qword_100ACCB10;
        }
        sub_10002B770(v94, v92);
        v133[0] = sub_100719D44(v95, v96, v132);
        sub_10096C8C0();
        swift_bridgeObjectRelease();
        sub_10002B770((uint64_t)v116, (uint64_t *)&unk_100AD0CF0);
        *(_WORD *)(v89 + 22) = 2080;
        uint64_t v106 = v121;
        uint64_t v107 = sub_1004AD7A8();
        v133[0] = sub_100719D44(v107, v108, v132);
        sub_10096C8C0();
        swift_bridgeObjectRelease();
        sub_10002B770(v106, &qword_100ACCB10);
        _os_log_impl((void *)&_mh_execute_header, v87, (os_log_type_t)v125, "📖  %@: registering item update %s -> %s", (uint8_t *)v89, 0x20u);
        sub_10002B7CC((uint64_t *)&unk_100ACCBC0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v83 = (uint64_t)v134;
        uint64_t v60 = (uint64_t)v126;
      }
      else
      {

        sub_10002B770(v84, (uint64_t *)&unk_100AD0CF0);
        sub_10002B770(v85, &qword_100ACCB10);
      }
      Swift::UInt64 v109 = *(void *)v60;
      char v110 = *(unsigned char *)(v60 + 8);
      uint64_t v111 = (uint64_t)v118;
      sub_10002B70C(v60, (uint64_t)v118, &qword_100ACCB10);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v127 + 56))(v111, 0, 1, v128);
      swift_beginAccess();
      sub_100360124(v111, v109, v110);
      swift_endAccess();
      swift_beginAccess();
      sub_100926760(v109, v110);
      swift_endAccess();
      swift_getKeyPath();
      swift_getKeyPath();
      uint64_t result = (void (*)(uint64_t *, void))sub_10096B5F0();
      if (*v112 != -1)
      {
        ++*v112;
        result(v132, 0);
        swift_release();
        swift_release();
        sub_10002B770(v60, &qword_100ACCB10);
        sub_10002B770((uint64_t)v131, (uint64_t *)&unk_100AD0CF0);
        uint64_t v99 = v83;
        return (void (*)(uint64_t *, void))sub_10002B770(v99, (uint64_t *)&unk_100AD0CF0);
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_100123D94(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a2;
  *(void *)(v7 + 24) = a3;
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = a2;
  v8[3] = a3;
  v8[4] = a4;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = sub_100130B5C;
  *(void *)(v9 + 24) = v7;
  swift_retain_n();
  id v10 = a4;
  swift_retain();
  sub_1007D8110((uint64_t)"currentSyncAnchor(completion:)", 30, 2, sub_100130AE4, v9, (uint64_t)sub_100130AC4, (uint64_t)v8);
  swift_release();
  swift_release();

  return swift_release();
}

void sub_100123EB8(void (*a1)(Class, void))
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_10096B600();
  swift_release();
  swift_release();
  uint64_t v2 = sub_100078C44(&v6, &v7);
  unint64_t v4 = v3 & 0xFFFFFFFFFFFFFFLL;
  Class isa = sub_10096AF20().super.isa;
  sub_10001E9C0(v2, v4);
  a1(isa, 0);
}

uint64_t sub_100124034@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = *(void *)(v1 + OBJC_IVAR____TtC9libfssync14FPFSEnumerator_vfsItemID);
  int v5 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC9libfssync14FPFSEnumerator_vfsItemID + 8);
  if (v5 == 1) {
    goto LABEL_13;
  }
  if (v5 != 2)
  {
    sub_10096CE20();
    __break(1u);
    goto LABEL_22;
  }
  type metadata accessor for VFSFileTree(0);
  uint64_t v2 = (void *)swift_dynamicCastClassUnconditional();
  swift_retain();
  int v6 = objc_sync_enter(v2);
  if (!v4)
  {
    if (!v6)
    {
      uint64_t v12 = v2[20];
      swift_retain();
      if (!objc_sync_exit(v2))
      {
        swift_release();
        uint64_t v4 = *(void *)(v12 + 24);
        swift_release();
        goto LABEL_13;
      }
LABEL_23:
      sub_1007130F8((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderExtensions/fssync/libfssync/utilities/Utilities.swift", 103, 2, 318, (uint64_t)v2);
    }
LABEL_22:
    sub_1007130E4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderExtensions/fssync/libfssync/utilities/Utilities.swift", 103, 2, 314, (uint64_t)v2);
  }
  if (v6) {
    goto LABEL_22;
  }
  uint64_t v7 = v2[20];
  swift_retain();
  if (objc_sync_exit(v2)) {
    goto LABEL_23;
  }
  swift_release();
  uint64_t v4 = *(void *)(v7 + 40);
  char v8 = *(unsigned char *)(v7 + 48);
  swift_release();
  if (v8)
  {
    uint64_t v9 = sub_10096AE50();
    id v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56);
    return v10(a1, 1, 1, v9);
  }
LABEL_13:
  uint64_t v21 = v4;
  long long v22 = 0u;
  long long v23 = 0u;
  type metadata accessor for VFSFileTree(0);
  uint64_t v13 = (void *)swift_dynamicCastClassUnconditional();
  swift_retain();
  if (objc_sync_enter(v13)) {
    sub_1007130E4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderExtensions/fssync/libfssync/utilities/Utilities.swift", 103, 2, 314, (uint64_t)v13);
  }
  uint64_t v14 = v13[20];
  swift_retain();
  if (objc_sync_exit(v13)) {
    sub_1007130F8((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderExtensions/fssync/libfssync/utilities/Utilities.swift", 103, 2, 318, (uint64_t)v13);
  }
  int v15 = *(_DWORD *)(v14 + 16);
  swift_release();
  swift_release();
  uint64_t v16 = fpfs_openfdbyhandle();
  if ((v16 & 0x80000000) != 0)
  {
    int v18 = sub_10096B4D0();
    sub_1005970E0(v18, 0, 0, 0xAu);
    swift_willThrow();
    swift_errorRetain();
    sub_10096A6F0();
    sub_100045CB4();
    sub_10096AA60();
    swift_errorRelease();
    swift_errorRelease();
    uint64_t v19 = sub_10096AE50();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(a1, 1, 1, v19);
  }
  else
  {
    uint64_t v17 = v16;
    sub_10044120C(v16, &v21, v15, 1, a1);
    sub_100595FB8(v17);
    uint64_t v20 = sub_10096AE50();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(a1, 0, 1, v20);
  }
}

void sub_10012446C(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v36 = a6;
  memcpy(__dst, a2, sizeof(__dst));
  unint64_t v11 = sub_100099340((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v12 = *(void **)(a3 + OBJC_IVAR____TtC9libfssync14FPFSEnumerator_fpItemID);
  if (v12)
  {
    uint64_t v13 = a3 + OBJC_IVAR____TtC9libfssync14FPFSEnumerator_vfsItemID;
    Swift::UInt64 v14 = *(void *)(a3 + OBJC_IVAR____TtC9libfssync14FPFSEnumerator_vfsItemID);
    char v15 = *(unsigned char *)(v13 + 8);
    id v16 = v12;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v30[0] = v11;
    sub_100389C94((uint64_t)v16, v14, v15, isUniquelyReferenced_nonNull_native);

    swift_bridgeObjectRelease();
  }
  sub_10001AE98((uint64_t)a2, (uint64_t)v31, &qword_100ACD980);
  sub_10001AE98((uint64_t)v31, (uint64_t)v33, &qword_100ACD980);
  if (sub_1000D3324((uint64_t)v33) != 1 && v34)
  {
    Swift::UInt64 v18 = *(void *)a1;
    char v19 = *(unsigned char *)(a1 + 8);
    id v20 = v34;
    char v21 = swift_isUniquelyReferenced_nonNull_native();
    v30[0] = v11;
    sub_100389C94((uint64_t)v20, v18, v19, v21);

    swift_bridgeObjectRelease();
  }
  long long v22 = (int *)sub_1008D2D5C(v11);
  swift_bridgeObjectRelease();
  long long v23 = sub_10074A578((void *)a1, 0, 1, v22);
  swift_bridgeObjectRelease();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v25 = Strong;
    id v26 = [Strong indexer];

    if (v26)
    {
      [v26 needsAuthentication];
    }
  }
  memcpy(v30, __dst, sizeof(v30));
  v27._countAndFlagsBits = (uint64_t)v30;
  Filename.init(rawValue:)(v27);
  sub_10001AE98((uint64_t)v30, (uint64_t)v32, &qword_100ACD988);
  sub_10074B824((uint64_t)v23);
  if (v7)
  {
  }
  else
  {
    uint64_t v28 = v23;
    sub_10096C070();
    if (*(void *)((*a7 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*a7 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      sub_10096C0F0();
    }
    sub_10096C150();
    sub_10096C0C0();
  }
}

uint64_t sub_100124724(uint64_t a1, void **a2, int a3)
{
  int v17 = a3;
  uint64_t v4 = sub_10002B7CC((uint64_t *)&unk_100ACD990);
  __chkstk_darwin(v4 - 8);
  int v6 = &v16[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = sub_10096B760();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  id v10 = &v16[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = sub_10096B7D0();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  Swift::UInt64 v14 = &v16[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  qos_class_self();
  sub_10096B740();
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    (*(void (**)(unsigned char *, void, uint64_t))(v8 + 104))(v10, enum case for DispatchQoS.QoSClass.utility(_:), v7);
    sub_10002B770((uint64_t)v6, (uint64_t *)&unk_100ACD990);
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v8 + 32))(v10, v6, v7);
  }
  sub_10096B7B0();

  return (*(uint64_t (**)(unsigned char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t sub_100124994(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, const void *a11, void *a12)
{
  uint64_t v13 = __chkstk_darwin(a1);
  unint64_t v153 = v12;
  unint64_t v154 = v14;
  LODWORD(v148) = v15;
  Swift::UInt64 v147 = v16;
  Swift::UInt64 v18 = v17;
  id v20 = v19;
  unint64_t v155 = v21;
  long long v23 = v22;
  uint64_t v24 = v13;
  uint64_t v152 = a10;
  uint64_t v25 = sub_10002B7CC(&qword_100ACD970);
  uint64_t v26 = __chkstk_darwin(v25 - 8);
  uint64_t v142 = (uint64_t)&v134 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  uint64_t v140 = (char *)&v134 - v28;
  uint64_t v29 = sub_10096B480();
  uint64_t v30 = *(void *)(v29 - 8);
  uint64_t v145 = v29;
  uint64_t v146 = v30;
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v143 = (char *)&v134 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  unint64_t v134 = (char *)&v134 - v33;
  uint64_t v34 = sub_10002B7CC(&qword_100ACA8C0);
  __chkstk_darwin(v34 - 8);
  unint64_t v139 = (char *)&v134 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = sub_10002B7CC(&qword_100ACD978);
  uint64_t v37 = __chkstk_darwin(v36);
  uint64_t v141 = (uint64_t)&v134 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = __chkstk_darwin(v37);
  uint64_t v135 = (uint64_t)&v134 - v40;
  uint64_t v41 = __chkstk_darwin(v39);
  long long v151 = (uint64_t *)((char *)&v134 - v42);
  uint64_t v43 = __chkstk_darwin(v41);
  uint64_t v144 = (uint64_t)&v134 - v44;
  uint64_t v45 = __chkstk_darwin(v43);
  uint64_t v149 = (uint64_t)&v134 - v46;
  uint64_t v47 = __chkstk_darwin(v45);
  uint64_t v49 = (char **)((char *)&v134 - v48);
  uint64_t v50 = __chkstk_darwin(v47);
  uint64_t v52 = (char *)&v134 + *(int *)(v50 + 48) - v51;
  char v156 = (char **)((char *)&v134 - v51);
  sub_10002B70C(v24, (uint64_t)&v134 - v51, &qword_100ACCB10);
  unint64_t v150 = v52;
  memcpy(v52, v23, 0x350uLL);
  uint64_t v53 = (char *)v49 + *(int *)(v36 + 48);
  char v54 = v155;
  unint64_t v155 = v49;
  sub_10002B70C((uint64_t)v54, (uint64_t)v49, &qword_100ACCB10);
  long long v137 = v53;
  memcpy(v53, v20, 0x350uLL);
  unint64_t v55 = sub_100099340((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v138 = v20;
  id v136 = v18;
  if (v18)
  {
    id v56 = v18;
    sub_10012EE0C((uint64_t)v23, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_10009C3A0, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, uint64_t))sub_10009C6EC);
    sub_10012EE0C((uint64_t)v20, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_10009C3A0, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, uint64_t))sub_10009C6EC);
    id v57 = v56;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v160[0] = v55;
    sub_100389C94((uint64_t)v57, v147, v148, isUniquelyReferenced_nonNull_native);
    unint64_t v55 = v160[0];

    swift_bridgeObjectRelease();
  }
  else
  {
    sub_10012EE0C((uint64_t)v23, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_10009C3A0, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, uint64_t))sub_10009C6EC);
    sub_10012EE0C((uint64_t)v20, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_10009C3A0, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, uint64_t))sub_10009C6EC);
  }
  uint64_t v59 = v149;
  uint64_t v60 = (void *)(v149 + *(int *)(v36 + 48));
  sub_10002B70C((uint64_t)v156, v149, &qword_100ACCB10);
  memcpy(v60, v23, 0x350uLL);
  sub_10001AE98((uint64_t)v23, (uint64_t)v162, &qword_100ACD980);
  sub_10001AE98((uint64_t)v162, (uint64_t)v165, &qword_100ACD980);
  if (sub_1000D3324((uint64_t)v165) == 1)
  {
    sub_10002B770(v59, &qword_100ACCB10);
  }
  else
  {
    id v61 = v166;
    id v62 = v166;
    sub_10002B770(v59, &qword_100ACCB10);
    if (v61)
    {
      uint64_t v63 = v144;
      uint64_t v64 = (void *)(v144 + *(int *)(v36 + 48));
      sub_10002B70C((uint64_t)v156, v144, &qword_100ACCB10);
      memcpy(v64, v23, 0x350uLL);
      Swift::UInt64 v65 = *(void *)v63;
      char v66 = *(unsigned char *)(v63 + 8);
      sub_10002B770(v63, &qword_100ACCB10);
      id v67 = v62;
      char v68 = swift_isUniquelyReferenced_nonNull_native();
      v160[0] = v55;
      sub_100389C94((uint64_t)v67, v65, v66, v68);
      unint64_t v55 = v160[0];

      swift_bridgeObjectRelease();
    }
  }
  uint64_t v69 = (int *)sub_1008D2D5C(v55);
  swift_bridgeObjectRelease();
  uint64_t v70 = v156;
  id v71 = sub_10074A578(v156, 0, 1, v69);
  swift_bridgeObjectRelease();
  uint64_t v72 = (char *)v151 + *(int *)(v36 + 48);
  uint64_t v73 = (uint64_t)v70;
  uint64_t v74 = (uint64_t)v151;
  sub_10002B70C(v73, (uint64_t)v151, &qword_100ACCB10);
  unsigned int v75 = v150;
  memcpy(v160, v150, sizeof(v160));
  memcpy(v72, v150, 0x350uLL);
  memcpy(v159, v75, sizeof(v159));
  v76._countAndFlagsBits = (uint64_t)v159;
  Filename.init(rawValue:)(v76);
  sub_10001AE98((uint64_t)v159, (uint64_t)&v164, &qword_100ACD988);
  sub_10012EE0C((uint64_t)v160, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_10009C3A0, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, uint64_t))sub_10009C6EC);
  uint64_t v77 = v153;
  sub_10074B824((uint64_t)v71);
  if (!v77)
  {
    sub_10012EE0C((uint64_t)v160, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_10012EFE8, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, uint64_t))sub_1000DBE04);
    sub_10002B770(v74, &qword_100ACCB10);
    if (![v71 isContainer]
      || ([v71 isContainerPristine] & 1) != 0)
    {
      uint64_t v80 = v142;
      sub_10002B70C((uint64_t)a11, v142, &qword_100ACD970);
      uint64_t v82 = v145;
      uint64_t v81 = v146;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v146 + 48))(v80, 1, v145) == 1)
      {

        sub_10002B770((uint64_t)v155, &qword_100ACD978);
        sub_10002B770((uint64_t)v156, &qword_100ACD978);
        unint64_t v78 = &qword_100ACD970;
        uint64_t v79 = (void *)v80;
        return sub_10002B770((uint64_t)v79, v78);
      }
      (*(void (**)(char *, uint64_t, uint64_t))(v81 + 32))(v143, v80, v82);
      uint64_t v83 = v71;
      uint64_t v84 = sub_10096B470();
      os_log_type_t v85 = sub_10096C590();
      if (os_log_type_enabled(v84, v85))
      {
        id v86 = (uint8_t *)swift_slowAlloc();
        unint64_t v153 = (void *)swift_slowAlloc();
        unint64_t v154 = v86;
        *(_DWORD *)id v86 = 138543362;
        v158[0] = v83;
        unsigned int v87 = v83;
        sub_10096C8C0();
        *unint64_t v153 = v83;

        uint64_t v82 = v145;
        _os_log_impl((void *)&_mh_execute_header, v84, v85, "Discarding container %{public}@ from appLibraries", v154, 0xCu);
        sub_10002B7CC((uint64_t *)&unk_100ACCBC0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      (*(void (**)(char *, uint64_t))(v146 + 8))(v143, v82);
LABEL_22:
      sub_10002B770((uint64_t)v155, &qword_100ACD978);
      uint64_t v79 = v156;
      unint64_t v78 = &qword_100ACD978;
      return sub_10002B770((uint64_t)v79, v78);
    }
    unint64_t v150 = a11;
    long long v151 = (uint64_t *)(a9 | 1);
    unint64_t v88 = sub_100099340((uint64_t)_swiftEmptyArrayStorage);
    if (v136)
    {
      id v89 = v136;
      char v90 = swift_isUniquelyReferenced_nonNull_native();
      v158[0] = v88;
      sub_100389C94((uint64_t)v89, v147, v148, v90);
      unint64_t v88 = v158[0];

      swift_bridgeObjectRelease();
    }
    uint64_t v91 = v135;
    uint64_t v152 = v36;
    unint64_t v153 = v71;
    uint64_t v92 = (void *)(v135 + *(int *)(v36 + 48));
    sub_10002B70C((uint64_t)v155, v135, &qword_100ACCB10);
    uint64_t v93 = v138;
    memcpy(v92, v138, 0x350uLL);
    uint64_t v94 = v93;
    sub_10001AE98((uint64_t)v93, (uint64_t)v161, &qword_100ACD980);
    sub_10001AE98((uint64_t)v161, (uint64_t)v167, &qword_100ACD980);
    if (sub_1000D3324((uint64_t)v167) == 1)
    {
      sub_10002B770(v91, &qword_100ACCB10);
    }
    else
    {
      id v95 = v168;
      id v96 = v168;
      sub_10002B770(v91, &qword_100ACCB10);
      if (v95)
      {
        uint64_t v97 = v144;
        unsigned int v98 = (void *)(v144 + *(int *)(v152 + 48));
        sub_10002B70C((uint64_t)v155, v144, &qword_100ACCB10);
        memcpy(v98, v94, 0x350uLL);
        Swift::UInt64 v99 = *(void *)v97;
        char v100 = *(unsigned char *)(v97 + 8);
        sub_10002B770(v97, &qword_100ACCB10);
        id v101 = v96;
        char v102 = swift_isUniquelyReferenced_nonNull_native();
        v158[0] = v88;
        uint64_t v103 = v145;
        sub_100389C94((uint64_t)v101, v99, v100, v102);
        unint64_t v88 = v158[0];

        swift_bridgeObjectRelease();
        goto LABEL_26;
      }
    }
    uint64_t v103 = v145;
LABEL_26:
    unint64_t v104 = (int *)sub_1008D2D5C(v88);
    swift_bridgeObjectRelease();
    unint64_t v105 = v155;
    uint64_t v106 = sub_10074A578(v155, 0, 1, v104);
    swift_bridgeObjectRelease();
    uint64_t v107 = (void *)(v141 + *(int *)(v152 + 48));
    sub_10002B70C((uint64_t)v105, v141, &qword_100ACCB10);
    memcpy(v158, v137, sizeof(v158));
    memcpy(v107, v137, 0x350uLL);
    sub_10012EE0C((uint64_t)v158, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_10009C3A0, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, uint64_t))sub_10009C6EC);
    id v108 = [v153 fileURL];
    if (v108)
    {
      Swift::UInt64 v109 = v108;
      uint64_t v110 = (uint64_t)v139;
      sub_10096ADD0();

      uint64_t v111 = sub_10096AE50();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v111 - 8) + 56))(v110, 0, 1, v111);
    }
    else
    {
      uint64_t v112 = sub_10096AE50();
      uint64_t v110 = (uint64_t)v139;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v112 - 8) + 56))(v139, 1, 1, v112);
    }
    uint64_t v113 = (uint64_t)v140;
    memcpy(v157, v158, sizeof(v157));
    v114._countAndFlagsBits = (uint64_t)v157;
    Filename.init(rawValue:)(v114);
    sub_10001AE98((uint64_t)v157, (uint64_t)&v163, &qword_100ACD988);
    sub_10074B824((uint64_t)v106);
    sub_10002B770(v110, &qword_100ACA8C0);
    sub_10012EE0C((uint64_t)v158, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_10012EFE8, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, uint64_t))sub_1000DBE04);
    sub_10002B770(v141, &qword_100ACCB10);
    sub_10002B70C((uint64_t)v150, v113, &qword_100ACD970);
    uint64_t v116 = v146;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v146 + 48))(v113, 1, v103) == 1)
    {
      sub_10002B770(v113, &qword_100ACD970);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v116 + 32))(v134, v113, v103);
      unint64_t v117 = v153;
      uint64_t v118 = v106;
      uint64_t v119 = v117;
      uint64_t v120 = v118;
      uint64_t v121 = sub_10096B470();
      os_log_type_t v122 = sub_10096C590();
      int v123 = v122;
      if (os_log_type_enabled(v121, v122))
      {
        uint64_t v124 = swift_slowAlloc();
        LODWORD(v152) = v123;
        uint64_t v125 = v124;
        unint64_t v126 = (void *)swift_slowAlloc();
        unint64_t v150 = v126;
        *(_DWORD *)uint64_t v125 = 138543618;
        unint64_t v154 = 0;
        uint64_t v148 = v125 + 12;
        uint64_t v149 = v125 + 4;
        uint64_t v169 = v119;
        long long v151 = &v170;
        uint64_t v127 = v119;
        sub_10096C8C0();
        *unint64_t v126 = v119;

        *(_WORD *)(v125 + 12) = 2114;
        uint64_t v169 = v120;
        uint64_t v128 = v120;
        uint64_t v129 = v145;
        sub_10096C8C0();
        *((void *)v150 + 1) = v120;

        uint64_t v103 = v129;
        _os_log_impl((void *)&_mh_execute_header, v121, (os_log_type_t)v152, "Patching container %{public}@ with %{public}@", (uint8_t *)v125, 0x16u);
        sub_10002B7CC((uint64_t *)&unk_100ACCBC0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        uint64_t v121 = v119;
      }

      (*(void (**)(char *, uint64_t))(v146 + 8))(v134, v103);
    }
    uint64_t v130 = self;
    id v131 = v153;
    id v132 = [v130 appLibraryFromContainerItem:v153 documentsItem:v106];
    if (v132)
    {
      id v133 = v132;
      if ([v132 isValidAppLibrary])
      {
        id v133 = v133;
        sub_10096C070();
        if (*(void *)((*a12 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*a12 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          sub_10096C0F0();
        }
        sub_10096C150();
        sub_10096C0C0();
      }
    }
    else
    {
    }
    goto LABEL_22;
  }
  sub_10012EE0C((uint64_t)v160, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_10012EFE8, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, uint64_t))sub_1000DBE04);

  sub_10002B770((uint64_t)v155, &qword_100ACD978);
  sub_10002B770((uint64_t)v156, &qword_100ACD978);
  unint64_t v78 = &qword_100ACCB10;
  uint64_t v79 = (void *)v74;
  return sub_10002B770((uint64_t)v79, v78);
}

uint64_t sub_1001259FC(uint64_t a1, NSObject *a2, uint64_t a3, void (*a4)(void *, void, void, void, id), uint64_t a5)
{
  int v6 = v5;
  uint64_t v119 = a4;
  uint64_t v120 = a5;
  uint64_t v115 = a3;
  os_log_t v113 = a2;
  uint64_t v8 = sub_10002B7CC((uint64_t *)&unk_100AD0CF0);
  uint64_t v111 = *(void *)(v8 - 8);
  __chkstk_darwin(v8 - 8);
  uint64_t v112 = v9;
  Swift::String v114 = (void *)((char *)v105 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v121 = sub_10096B480();
  uint64_t v10 = *(void *)(v121 - 8);
  uint64_t v11 = __chkstk_darwin(v121);
  Swift::UInt64 v109 = v12;
  uint64_t v110 = (char *)v105 - (((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  Swift::UInt64 v14 = (char *)v105 - v13;
  if (qword_100ACC170 != -1) {
    swift_once();
  }
  id v15 = (id)qword_100B0B4E0;
  uint64_t v16 = a1;
  uint64_t v17 = sub_10096AF60();
  unint64_t v19 = v18;
  uint64_t v20 = sub_10096AF60();
  unint64_t v22 = v21;
  char v23 = _s9libfssync17FPItemVersionDataV23__derived_struct_equalsySbAC_ACtFZ_0(v17, v19, v20, v21);
  sub_10001E9C0(v20, v22);
  sub_10001E9C0(v17, v19);

  if (v23) {
    goto LABEL_7;
  }
  if (qword_100ACC168 != -1) {
    swift_once();
  }
  id v24 = (id)qword_100B0B4D8;
  uint64_t v25 = sub_10096AF60();
  unint64_t v27 = v26;
  uint64_t v28 = sub_10096AF60();
  unint64_t v30 = v29;
  char v31 = _s9libfssync17FPItemVersionDataV23__derived_struct_equalsySbAC_ACtFZ_0(v25, v27, v28, v29);
  sub_10001E9C0(v28, v30);
  sub_10001E9C0(v25, v27);

  if (v31)
  {
LABEL_7:
    uint64_t v32 = 0;
    uint64_t v33 = v16;
  }
  else
  {
    sub_10096AA90();
    swift_allocObject();
    sub_10096AA80();
    type metadata accessor for PaginatedContinuation();
    uint64_t v48 = sub_10096AF60();
    unint64_t v50 = v49;
    sub_10002558C((unint64_t *)&unk_100ACD960, (void (*)(uint64_t))type metadata accessor for PaginatedContinuation);
    sub_10096AA70();
    swift_release();
    sub_10001E9C0(v48, v50);
    uint64_t v33 = v16;
    uint64_t v32 = (char *)v123;
  }
  uint64_t v117 = v10;
  uint64_t v36 = *(void (**)(void, void, void))(v10 + 16);
  uint64_t v34 = v10 + 16;
  uint64_t v35 = v36;
  uint64_t v37 = v121;
  v36(v14, &v6[OBJC_IVAR____TtC9libfssync14FPFSEnumerator_logger], v121);
  swift_retain_n();
  uint64_t v38 = v6;
  uint64_t v39 = sub_10096B470();
  os_log_type_t v40 = sub_10096C5A0();
  BOOL v41 = os_log_type_enabled(v39, v40);
  uint64_t v118 = v14;
  if (v41)
  {
    v105[1] = v34;
    id v108 = v35;
    uint64_t v116 = v33;
    uint64_t v42 = v32;
    uint64_t v43 = swift_slowAlloc();
    uint64_t v44 = (void *)swift_slowAlloc();
    uint64_t v107 = swift_slowAlloc();
    v125[0] = v107;
    *(_DWORD *)uint64_t v43 = 138412546;
    uint64_t v123 = (uint64_t)v38;
    uint64_t v45 = v38;
    uint64_t v106 = &v124;
    sub_10096C8C0();
    *uint64_t v44 = v38;

    *(_WORD *)(v43 + 12) = 2080;
    if (v42)
    {
      uint64_t v123 = 979789423;
      unint64_t v124 = 0xE400000000000000;
      uint64_t v122 = *((void *)v42 + 2);
      swift_retain();
      v126._countAndFlagsBits = sub_10096D220();
      sub_10096BDC0(v126);
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v46 = v123;
      unint64_t v47 = v124;
    }
    else
    {
      uint64_t v46 = 0x6C616974696E693CLL;
      unint64_t v47 = 0xE90000000000003ELL;
    }
    uint64_t v123 = sub_100719D44(v46, v47, v125);
    sub_10096C8C0();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v39, v40, "📖  %@: enumerating page %s", (uint8_t *)v43, 0x16u);
    sub_10002B7CC((uint64_t *)&unk_100ACCBC0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v37 = v121;
    Swift::UInt64 v14 = v118;
    uint64_t v32 = v42;
    uint64_t v33 = v116;
    uint64_t v35 = v108;
  }
  else
  {
    swift_release_n();
  }
  if ((v38[OBJC_IVAR____TtC9libfssync14FPFSEnumerator_invalidated] & 1) != 0
    || (uint64_t Strong = swift_unknownObjectWeakLoadStrong()) == 0)
  {
    uint64_t v82 = v37;
    type metadata accessor for NSFileProviderError(0);
    v125[0] = -1002;
    sub_100042898((uint64_t)_swiftEmptyArrayStorage);
    sub_10002558C((unint64_t *)&unk_100ACAAB0, type metadata accessor for NSFileProviderError);
    sub_10096ABD0();
    uint64_t v83 = (void *)v123;
    uint64_t v84 = v38;
    swift_retain_n();
    id v85 = v83;
    id v86 = v32;
    unsigned int v87 = v84;
    id v88 = v85;
    id v89 = sub_10096B470();
    int v90 = sub_10096C5B0();
    if (os_log_type_enabled(v89, (os_log_type_t)v90))
    {
      os_log_t v113 = v89;
      LODWORD(v115) = v90;
      uint64_t v91 = swift_slowAlloc();
      uint64_t v92 = (void *)swift_slowAlloc();
      uint64_t v116 = swift_slowAlloc();
      v125[0] = v116;
      *(_DWORD *)uint64_t v91 = 138412802;
      uint64_t v123 = (uint64_t)v87;
      uint64_t v93 = v87;
      sub_10096C8C0();
      Swift::String v114 = v92;
      *uint64_t v92 = v87;

      *(_WORD *)(v91 + 12) = 2080;
      if (v86)
      {
        uint64_t v123 = 979789423;
        unint64_t v124 = 0xE400000000000000;
        uint64_t v122 = *((void *)v86 + 2);
        swift_retain();
        v127._countAndFlagsBits = sub_10096D220();
        sub_10096BDC0(v127);
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t v94 = v123;
        unint64_t v95 = v124;
      }
      else
      {
        uint64_t v94 = 0x6C616974696E693CLL;
        unint64_t v95 = 0xE90000000000003ELL;
      }
      uint64_t v123 = sub_100719D44(v94, v95, v125);
      sub_10096C8C0();
      uint64_t v110 = v86;
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v91 + 22) = 2112;
      uint64_t v123 = (uint64_t)v88;
      sub_10002558C((unint64_t *)&unk_100ACAA40, type metadata accessor for NSFileProviderError);
      id v98 = v88;
      uint64_t v99 = sub_10096D240();
      uint64_t v96 = v117;
      if (v99)
      {
      }
      else
      {
        swift_allocError();
        uint64_t *v100 = v123;
      }
      id v101 = (void *)sub_10096ABE0();
      swift_errorRelease();
      id v102 = objc_msgSend(v101, "fp_prettyDescription");

      uint64_t v123 = (uint64_t)v102;
      sub_10096C8C0();
      v114[1] = v102;

      os_log_t v103 = v113;
      _os_log_impl((void *)&_mh_execute_header, v113, (os_log_type_t)v115, "📖  %@: enumerating page %s failed: %@", (uint8_t *)v91, 0x20u);
      sub_10002B7CC((uint64_t *)&unk_100ACCBC0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v97 = v121;
    }
    else
    {

      swift_release_n();
      uint64_t v96 = v117;
      uint64_t v97 = v82;
    }
    id v104 = v88;
    v119(_swiftEmptyArrayStorage, 0, 0, 0, v88);
    swift_release();

    return (*(uint64_t (**)(char *, uint64_t))(v96 + 8))(v118, v97);
  }
  else
  {
    id v108 = (void (*)(void, void, void))Strong;
    uint64_t v107 = swift_allocObject();
    uint64_t v52 = v110;
    v35(v110, v14, v37);
    uint64_t v53 = v117;
    uint64_t v54 = v37;
    unint64_t v55 = (*(unsigned __int8 *)(v117 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v117 + 80);
    unint64_t v56 = ((unint64_t)v109 + v55 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v57 = (v56 + 15) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v116 = v33;
    uint64_t v58 = swift_allocObject();
    *(void *)(v58 + 16) = v108;
    (*(void (**)(unint64_t, char *, uint64_t))(v53 + 32))(v58 + v55, v52, v54);
    *(void *)(v58 + v56) = v38;
    *(void *)(v58 + v57) = v32;
    uint64_t v59 = (void *)(v58 + ((v57 + 15) & 0xFFFFFFFFFFFFFFF8));
    uint64_t v60 = v120;
    void *v59 = v119;
    v59[1] = v60;
    Swift::UInt64 v109 = (void (*)(void))sub_10012CF18;
    uint64_t v110 = v32;
    uint64_t v61 = v107;
    *(void *)(v107 + 16) = sub_10012CF18;
    *(void *)(v61 + 24) = v58;
    uint64_t v106 = (unint64_t *)v38;
    uint64_t v62 = v61;
    uint64_t v63 = (uint64_t)v114;
    sub_10002B70C((uint64_t)v113, (uint64_t)v114, (uint64_t *)&unk_100AD0CF0);
    unint64_t v64 = (*(unsigned __int8 *)(v111 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v111 + 80);
    unint64_t v65 = (v112 + v64 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v66 = (v65 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v67 = (v66 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v68 = (v67 + 15) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v69 = swift_allocObject();
    *(void *)(v69 + 16) = v62;
    *(void *)(v69 + 24) = v110;
    sub_10001AE98(v63, v69 + v64, (uint64_t *)&unk_100AD0CF0);
    uint64_t v70 = v106;
    *(void *)(v69 + v65) = v106;
    uint64_t v71 = v115;
    uint64_t v72 = (void *)v116;
    *(void *)(v69 + v66) = v116;
    *(void *)(v69 + v67) = v71;
    uint64_t v73 = (void *)(v69 + v68);
    uint64_t v74 = v120;
    *uint64_t v73 = v119;
    v73[1] = v74;
    unsigned int v75 = v108;
    *(void *)(v69 + ((v68 + 23) & 0xFFFFFFFFFFFFFFF8)) = v108;
    Swift::String v76 = v70;
    swift_retain_n();
    swift_retain_n();
    id v77 = v75;
    swift_retain_n();
    unint64_t v78 = v76;
    uint64_t v79 = v77;
    swift_retain();
    id v80 = v72;
    sub_10032B3A8((uint64_t)"enumerateItems(fromPage:selfItem:suggestedPageSize:reply:)", 58, 2, (uint64_t)sub_10012CF20, v69, v79, v109, v58);
    swift_release();

    swift_release();
    swift_release_n();
    (*(void (**)(char *, uint64_t))(v117 + 8))(v118, v121);
    return swift_release();
  }
}

uint64_t sub_1001266EC(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v42 = a7;
  uint64_t v43 = a8;
  int v38 = a4;
  uint64_t v37 = a3;
  uint64_t v36 = a2;
  uint64_t v50 = a1;
  uint64_t v41 = a10;
  uint64_t v39 = a9;
  uint64_t v46 = sub_10096B730();
  uint64_t v49 = *(void *)(v46 - 8);
  __chkstk_darwin(v46);
  uint64_t v45 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10096B7D0();
  uint64_t v47 = *(void *)(v14 - 8);
  uint64_t v48 = v14;
  __chkstk_darwin(v14);
  os_log_type_t v40 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10096B480();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(void *)(v17 + 64);
  __chkstk_darwin(v16);
  unint64_t v19 = (char *)&v35 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = *(void *)(a5 + OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_queue);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, a6, v16);
  unint64_t v20 = (*(unsigned __int8 *)(v17 + 80) + 41) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  unint64_t v21 = (v18 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = (v21 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = v50;
  *(void *)(v23 + 24) = a2;
  uint64_t v24 = v37;
  *(void *)(v23 + 32) = v37;
  LOBYTE(v18) = v38 & 1;
  *(unsigned char *)(v23 + 40) = v38 & 1;
  (*(void (**)(unint64_t, char *, uint64_t))(v17 + 32))(v23 + v20, v19, v16);
  uint64_t v25 = v42;
  uint64_t v26 = v43;
  *(void *)(v23 + v21) = v42;
  *(void *)(v23 + v22) = v26;
  unint64_t v27 = (void *)(v23 + ((v22 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v28 = v41;
  void *v27 = v39;
  v27[1] = v28;
  aBlock[4] = sub_10012F3BC;
  aBlock[5] = v23;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100020480;
  aBlock[3] = &unk_100A708C0;
  unint64_t v29 = _Block_copy(aBlock);
  swift_retain();
  sub_10012F470(v50, v36, v24, v18);
  id v30 = v25;
  swift_retain();
  char v31 = v40;
  sub_10096B780();
  uint64_t v51 = _swiftEmptyArrayStorage;
  sub_10002558C((unint64_t *)&unk_100ACAEF0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10002B7CC((uint64_t *)&unk_100ACB5C0);
  sub_100025500((unint64_t *)&qword_100ACAF00, (uint64_t *)&unk_100ACB5C0);
  uint64_t v33 = v45;
  uint64_t v32 = v46;
  sub_10096CA60();
  sub_10096C6B0();
  _Block_release(v29);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v33, v32);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v31, v48);
  return swift_release();
}

void sub_100126B30(unint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, void *a6, uint64_t a7, void (*a8)(void, void, void, void, void))
{
  uint64_t v11 = a3;
  if ((a4 & 1) == 0)
  {
    swift_retain_n();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    id v14 = a6;
    uint64_t v15 = sub_10096B470();
    os_log_type_t v16 = sub_10096C5A0();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v44 = v15;
      os_log_type_t v45 = v16;
      uint64_t v47 = a8;
      uint64_t v17 = swift_slowAlloc();
      uint64_t v18 = (void *)swift_slowAlloc();
      uint64_t v52 = swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 138413314;
      uint64_t __src = (uint64_t)v14;
      id v19 = v14;
      sub_10096C8C0();
      void *v18 = v14;

      *(_WORD *)(v17 + 12) = 2080;
      if (a7)
      {
        uint64_t __src = 979789423;
        unint64_t v50 = 0xE400000000000000;
        v51[0] = *(void *)(a7 + 16);
        v53._countAndFlagsBits = sub_10096D220();
        sub_10096BDC0(v53);
        swift_bridgeObjectRelease();
        uint64_t v20 = 979789423;
        unint64_t v21 = 0xE400000000000000;
      }
      else
      {
        uint64_t v20 = 0x6C616974696E693CLL;
        unint64_t v21 = 0xE90000000000003ELL;
      }
      uint64_t __src = sub_100719D44(v20, v21, &v52);
      sub_10096C8C0();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v17 + 22) = 2048;
      if (a1 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v36 = sub_10096CE70();
        swift_bridgeObjectRelease_n();
      }
      else
      {
        uint64_t v36 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRelease();
      }
      uint64_t __src = v36;
      sub_10096C8C0();
      swift_bridgeObjectRelease();
      *(_WORD *)(v17 + 32) = 2080;
      if (a2)
      {
        uint64_t __src = 0x207478656E20;
        unint64_t v50 = 0xE600000000000000;
        v51[0] = 979789423;
        v51[1] = 0xE400000000000000;
        v55._countAndFlagsBits = sub_10096D220();
        sub_10096BDC0(v55);
        swift_bridgeObjectRelease();
        v56._countAndFlagsBits = 979789423;
        v56._object = (void *)0xE400000000000000;
        sub_10096BDC0(v56);
        swift_bridgeObjectRelease();
        uint64_t v37 = 0x207478656E20;
        unint64_t v38 = 0xE600000000000000;
      }
      else
      {
        uint64_t v37 = 0;
        unint64_t v38 = 0xE000000000000000;
      }
      sub_100719D44(v37, v38, &v52);
      sub_10096C8C0();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v17 + 42) = 2048;
      uint64_t __src = v11;
      sub_10096C8C0();
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "📖  %@: enumerating page %s done: %ld items%s anchor:%llu", (uint8_t *)v17, 0x34u);
      sub_10002B7CC((uint64_t *)&unk_100ACCBC0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      a8 = v47;
      if (!a2) {
        goto LABEL_21;
      }
    }
    else
    {
      swift_release_n();
      swift_release_n();

      swift_bridgeObjectRelease_n();
      if (!a2)
      {
LABEL_21:
        v35.super.Class isa = 0;
        goto LABEL_22;
      }
    }
    uint64_t v31 = v11;
    sub_10096AAD0();
    swift_allocObject();
    swift_retain();
    sub_10096AAC0();
    sub_10096AAA0();
    uint64_t __src = a2;
    type metadata accessor for PaginatedContinuation();
    sub_10002558C((unint64_t *)&unk_100ACD9B0, (void (*)(uint64_t))type metadata accessor for PaginatedContinuation);
    uint64_t v32 = sub_10096AAB0();
    unint64_t v34 = v33;
    v35.super.Class isa = sub_10096AF20().super.isa;
    swift_release();
    swift_release();
    sub_10001E9C0(v32, v34);
    uint64_t v11 = v31;
LABEL_22:
    uint64_t __src = v11;
    uint64_t v39 = sub_100078C44(&__src, &v50);
    unint64_t v41 = v40 & 0xFFFFFFFFFFFFFFLL;
    Class isa = sub_10096AF20().super.isa;
    sub_10001E9C0(v39, v41);
    a8(a1, v35.super.isa, isa, 0, 0);

    swift_release();
    return;
  }
  sub_10012F470(a1, a2, a3, 1);
  sub_10012F470(a1, a2, v11, 1);
  swift_retain();
  id v22 = a6;
  sub_10012F470(a1, a2, v11, 1);
  id v23 = v22;
  swift_retain();
  uint64_t v24 = sub_10096B470();
  os_log_type_t v25 = sub_10096C5B0();
  if (os_log_type_enabled(v24, v25))
  {
    log = v24;
    os_log_type_t v46 = v25;
    uint64_t v26 = swift_slowAlloc();
    unint64_t v27 = (void *)swift_slowAlloc();
    v51[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v26 = 138412802;
    uint64_t __src = (uint64_t)v23;
    id v28 = v23;
    sub_10096C8C0();
    void *v27 = v23;

    *(_WORD *)(v26 + 12) = 2080;
    if (a7)
    {
      uint64_t __src = 979789423;
      unint64_t v50 = 0xE400000000000000;
      uint64_t v52 = *(void *)(a7 + 16);
      v54._countAndFlagsBits = sub_10096D220();
      sub_10096BDC0(v54);
      swift_bridgeObjectRelease();
      uint64_t v29 = 979789423;
      unint64_t v30 = 0xE400000000000000;
    }
    else
    {
      uint64_t v29 = 0x6C616974696E693CLL;
      unint64_t v30 = 0xE90000000000003ELL;
    }
    sub_100719D44(v29, v30, v51);
    sub_10096C8C0();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v26 + 22) = 2112;
    swift_getErrorValue();
    uint64_t __src = (uint64_t)Error.prettyDescription.getter(v48);
    sub_10096C8C0();
    v27[1] = __src;
    sub_10012F370(a1, a2, v11, 1);
    sub_10012F370(a1, a2, v11, 1);
    _os_log_impl((void *)&_mh_execute_header, log, v46, "📖  %@: enumerating page %s failed: %@", (uint8_t *)v26, 0x20u);
    sub_10002B7CC((uint64_t *)&unk_100ACCBC0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();

    sub_10012F370(a1, a2, v11, 1);
    sub_10012F370(a1, a2, v11, 1);
  }
  swift_errorRetain();
  a8(_swiftEmptyArrayStorage, 0, 0, 0, a1);
  sub_10012F370(a1, a2, v11, 1);
  sub_10012F370(a1, a2, v11, 1);
}

uint64_t sub_100127474(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  uint64_t v61 = a7;
  uint64_t v62 = a8;
  uint64_t v58 = a5;
  uint64_t v59 = a6;
  uint64_t v56 = a4;
  uint64_t v52 = a3;
  uint64_t v60 = a10;
  uint64_t v57 = a9;
  uint64_t v12 = sub_10002B7CC((uint64_t *)&unk_100AD0CF0);
  uint64_t v55 = *(void *)(v12 - 8);
  uint64_t v13 = *(void *)(v55 + 64);
  __chkstk_darwin(v12);
  uint64_t v54 = (uint64_t)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t v14 = *(void *)(a2 + 16);
  uint64_t v15 = *(void *)(a2 + 24);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v14;
  *(void *)(v16 + 24) = v15;
  uint64_t v17 = swift_allocObject();
  swift_weakInit();
  uint64_t v18 = (void *)swift_allocObject();
  v18[2] = sub_10012DA18;
  v18[3] = v16;
  v18[4] = v17;
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = sub_10012DA24;
  *(void *)(v19 + 24) = v18;
  swift_beginAccess();
  *(void *)(a2 + 16) = sub_10012DA40;
  *(void *)(a2 + 24) = v19;
  swift_retain();
  swift_retain();
  swift_release();
  uint64_t v64 = swift_allocBox();
  uint64_t v21 = v20;
  uint64_t v22 = sub_10002B7CC(&qword_100ACCB10);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v21, 1, 1, v22);
  uint64_t v63 = a1;
  uint64_t v53 = *(void *)(a1 + 16);
  swift_beginAccess();
  uint64_t v49 = a2;
  uint64_t v24 = *(void *)(a2 + 16);
  uint64_t v51 = *(void *)(a2 + 24);
  uint64_t v23 = v51;
  uint64_t v25 = swift_allocObject();
  uint64_t v50 = v25;
  *(void *)(v25 + 16) = v24;
  *(void *)(v25 + 24) = v23;
  uint64_t v26 = v54;
  sub_10002B70C(v56, v54, (uint64_t *)&unk_100AD0CF0);
  unint64_t v27 = (*(unsigned __int8 *)(v55 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80);
  unint64_t v28 = (v13 + v27 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v29 = (v28 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v30 = (v29 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v31 = (v30 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v32 = (v31 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v33 = (v32 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v34 = (v33 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v35 = swift_allocObject();
  uint64_t v36 = v64;
  *(void *)(v35 + 16) = v52;
  *(void *)(v35 + 24) = v36;
  sub_10001AE98(v26, v35 + v27, (uint64_t *)&unk_100AD0CF0);
  uint64_t v37 = v62;
  *(void *)(v35 + v28) = v63;
  unint64_t v38 = v58;
  uint64_t v39 = v59;
  *(void *)(v35 + v29) = v58;
  *(void *)(v35 + v30) = v39;
  *(void *)(v35 + v31) = v61;
  uint64_t v40 = (void *)(v35 + v32);
  uint64_t v41 = v57;
  *uint64_t v40 = v37;
  v40[1] = v41;
  *(void *)(v35 + v33) = v49;
  uint64_t v42 = v60;
  *(void *)(v35 + v34) = v60;
  uint64_t v43 = swift_allocObject();
  uint64_t v44 = v50;
  *(void *)(v43 + 16) = sub_100130BB4;
  *(void *)(v43 + 24) = v44;
  swift_retain();
  swift_retain();
  swift_retain();
  id v45 = v38;
  id v46 = v39;
  swift_retain();
  swift_retain();
  id v47 = v42;
  swift_retain();
  sub_1007D8110((uint64_t)"enumerateItems(fromPage:selfItem:suggestedPageSize:reply:)", 58, 2, sub_10012DEF8, v43, (uint64_t)sub_10012DE04, v35);
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

void sub_1001278C8(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, unsigned char *a5, void *a6, uint64_t a7, void *a8, uint64_t a9, uint64_t a10, void *a11)
{
  id v149 = a8;
  uint64_t v143 = a7;
  uint64_t v144 = a6;
  char v156 = a5;
  unint64_t v154 = a4;
  uint64_t v148 = a3;
  uint64_t v153 = a2;
  id v152 = a11;
  uint64_t v12 = sub_10002B7CC(&qword_100ACD970);
  __chkstk_darwin(v12 - 8);
  long long v151 = (char *)&v137 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10002B7CC(&qword_100ACA8C0);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  uint64_t v17 = (char *)&v137 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v150 = (uint64_t)&v137 - v19;
  __chkstk_darwin(v18);
  unint64_t v155 = (char *)&v137 - v20;
  uint64_t v21 = sub_10002B7CC(&qword_100ACCB10);
  uint64_t v147 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)&v137 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_10002B7CC((uint64_t *)&unk_100AD0CF0);
  uint64_t v25 = __chkstk_darwin(v24 - 8);
  unint64_t v27 = (char *)&v137 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __chkstk_darwin(v25);
  unint64_t v30 = (char *)&v137 - v29;
  uint64_t v31 = __chkstk_darwin(v28);
  unint64_t v33 = (char *)&v137 - v32;
  __chkstk_darwin(v31);
  uint64_t v35 = (char *)&v137 - v34;
  uint64_t v36 = swift_projectBox();
  uint64_t v146 = a10;
  BOOL v37 = a1 == 0;
  uint64_t v153 = a1;
  uint64_t v145 = a10 + 16;
  if (a1)
  {
    unint64_t v170 = (unint64_t)_swiftEmptyArrayStorage;
    id v38 = v157;
    uint64_t v39 = v154;
    uint64_t v40 = v151;
    uint64_t v41 = (uint64_t)v156;
LABEL_3:
    uint64_t v42 = sub_10096AE50();
    uint64_t v43 = v150;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56))(v150, 1, 1, v42);
    uint64_t v44 = 0;
    uint64_t v45 = (uint64_t)v155;
LABEL_4:
    sub_100124034(v45);
    sub_10002B770(v43, &qword_100ACA8C0);
    goto LABEL_5;
  }
  uint64_t v140 = v30;
  uint64_t v141 = v36;
  uint64_t v138 = v27;
  unint64_t v139 = v23;
  long long v137 = v17;
  int v142 = 1;
  sub_10002B70C(v148, (uint64_t)v33, (uint64_t *)&unk_100AD0CF0);
  uint64_t v52 = v147;
  uint64_t v53 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v147 + 48);
  if (v53(v33, 1, v21) == 1)
  {
    uint64_t v54 = *(void *)(*((void *)v154 + 2) + 32);
    char v55 = v156[OBJC_IVAR____TtC9libfssync14FPFSEnumerator_vfsItemID + 8];
    uint64_t v165 = *(void *)&v156[OBJC_IVAR____TtC9libfssync14FPFSEnumerator_vfsItemID];
    char v166 = v55;
    uint64_t v56 = *(void (**)(uint64_t *, uint64_t))(*(void *)v54 + 240);
    swift_retain();
    id v57 = v157;
    v56(&v165, 1);
    swift_release();
    uint64_t v58 = (uint64_t)v33;
    id v38 = v57;
    sub_10002B770(v58, (uint64_t *)&unk_100AD0CF0);
    id v59 = v149;
    if (v57) {
      return;
    }
  }
  else
  {
    sub_10001AE98((uint64_t)v33, (uint64_t)v35, &qword_100ACCB10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v52 + 56))(v35, 0, 1, v21);
    id v38 = v157;
    id v59 = v149;
  }
  uint64_t v81 = v141;
  swift_beginAccess();
  sub_10012DF00((uint64_t)v35, v81);
  swift_beginAccess();
  uint64_t v82 = v81;
  uint64_t v83 = (uint64_t)v140;
  sub_10002B70C(v82, (uint64_t)v140, (uint64_t *)&unk_100AD0CF0);
  if (v53((char *)v83, 1, v21) == 1)
  {
    sub_10002B770(v83, (uint64_t *)&unk_100AD0CF0);
    uint64_t v84 = (char *)*((void *)v154 + 2);
    type metadata accessor for VFSFileTree(0);
    swift_dynamicCastClassUnconditional();
    uint64_t v85 = *(void *)&v156[OBJC_IVAR____TtC9libfssync14FPFSEnumerator_vfsItemID];
    int v86 = v156[OBJC_IVAR____TtC9libfssync14FPFSEnumerator_vfsItemID + 8];
    swift_retain();
    swift_retain();
    if (objc_sync_enter(v84)) {
      sub_1007130E4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderExtensions/fssync/libfssync/utilities/Utilities.swift", 103, 2, 314, (uint64_t)v84);
    }
    id v157 = *(id *)&v84[qword_100ADA010];
    int v87 = objc_sync_exit(v84);
    id v88 = v144;
    if (v87) {
      sub_1007130F8((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderExtensions/fssync/libfssync/utilities/Utilities.swift", 103, 2, 318, (uint64_t)v84);
    }
    swift_release();
    long long v168 = 0u;
    memset(v167, 0, sizeof(v167));
    id v89 = (void *)swift_allocObject();
    int v90 = v156;
    v89[2] = v156;
    v89[3] = v88;
    unsigned char v89[4] = v143;
    v89[5] = v59;
    uint64_t v91 = v88;
    uint64_t v92 = v146;
    v89[6] = a9;
    v89[7] = v92;
    id v93 = v90;
    id v94 = v91;
    swift_retain();
    swift_retain();
    sub_10043E018(v85, v86, (uint64_t)v167, 0, 0, (uint64_t)sub_10012DFB8, (uint64_t)v89);
    swift_release();
    swift_release();
    id v108 = (id *)&v169;
    goto LABEL_32;
  }
  unint64_t v95 = v139;
  sub_10001AE98(v83, (uint64_t)v139, &qword_100ACCB10);
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong
    && (uint64_t v97 = Strong, v98 = [Strong indexer], v97, v98)
    && (unsigned int v99 = [v98 needsAuthentication], v98, v99))
  {
    uint64_t v100 = 9;
  }
  else
  {
    uint64_t v100 = 1;
  }
  BOOL v37 = v142;
  Swift::UInt64 v109 = (int *)sub_10009945C((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v44 = sub_10074A578(v95, v100, 0, v109);
  swift_bridgeObjectRelease();
  if (*((unsigned char *)v95 + *(int *)(v21 + 48)) != 1)
  {
    swift_beginAccess();
    uint64_t v121 = *(void (**)(uint64_t, void, uint64_t, void))(v146 + 16);
    sub_10002B7CC(&qword_100ACAF70);
    uint64_t v122 = swift_allocObject();
    *(_OWORD *)(v122 + 16) = xmmword_100974D40;
    *(void *)(v122 + 32) = v44;
    uint64_t v158 = v122;
    sub_10096C0C0();
    uint64_t v123 = v158;
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    unint64_t v124 = v44;
    sub_10096B600();
    swift_release();
    swift_release();
    v121(v123, 0, v158, 0);
    swift_release();
    swift_bridgeObjectRelease();
    sub_10002B770((uint64_t)v95, &qword_100ACCB10);

    return;
  }
  sub_10002B770((uint64_t)v95, &qword_100ACCB10);
  unint64_t v170 = (unint64_t)_swiftEmptyArrayStorage;
  if (!v44)
  {
    uint64_t v41 = (uint64_t)v156;
    uint64_t v39 = v154;
    uint64_t v40 = v151;
    goto LABEL_3;
  }
  uint64_t v110 = v141;
  swift_beginAccess();
  uint64_t v111 = v110;
  uint64_t v112 = (uint64_t)v138;
  sub_10002B70C(v111, (uint64_t)v138, (uint64_t *)&unk_100AD0CF0);
  os_log_t v113 = v44;
  uint64_t v39 = v154;
  id v114 = sub_1005A4640(v113, v112, (uint64_t)v154);
  uint64_t v40 = v151;
  if (v38)
  {

    sub_10002B770(v112, (uint64_t *)&unk_100AD0CF0);
    swift_bridgeObjectRelease();
    return;
  }
  Swift::String v126 = v114;
  sub_10002B770(v112, (uint64_t *)&unk_100AD0CF0);
  id v127 = v126;
  sub_10096C070();
  if (*(void *)((v170 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v170 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_10096C0F0();
  }
  sub_10096C150();
  sub_10096C0C0();

  id v128 = [v113 fileURL];
  uint64_t v45 = (uint64_t)v155;
  if (v128)
  {
    uint64_t v129 = v128;
    uint64_t v130 = (uint64_t)v137;
    sub_10096ADD0();

    uint64_t v131 = sub_10096AE50();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v131 - 8) + 56))(v130, 0, 1, v131);
  }
  else
  {
    uint64_t v131 = sub_10096AE50();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v131 - 8) + 56))(v137, 1, 1, v131);
  }
  BOOL v37 = v142;
  uint64_t v43 = v150;
  sub_10001AE98((uint64_t)v137, v150, &qword_100ACA8C0);
  sub_10096AE50();
  uint64_t v132 = *(void *)(v131 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v132 + 48))(v43, 1, v131) == 1)
  {
    uint64_t v41 = (uint64_t)v156;
    goto LABEL_4;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v132 + 32))(v45, v43, v131);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v132 + 56))(v45, 0, 1, v131);
  uint64_t v41 = (uint64_t)v156;
LABEL_5:
  BOOL v46 = *(unsigned char *)(v41 + OBJC_IVAR____TtC9libfssync14FPFSEnumerator_buildAndFilterAppLibraries) == 1;
  id v157 = v38;
  unint64_t v154 = v44;
  if (v46)
  {
    id v47 = (void *)swift_unknownObjectWeakLoadStrong();
    int v142 = v37;
    if (v47
      && (uint64_t v48 = v47, v49 = [v47 indexer], v48, v49))
    {
      unsigned int v50 = [v49 needsAuthentication];

      uint64_t v51 = 8;
      if (!v50) {
        uint64_t v51 = 0;
      }
      long long v151 = (char *)v51;
    }
    else
    {
      long long v151 = 0;
    }
    unint64_t v66 = *(void **)&v156[OBJC_IVAR____TtC9libfssync14FPFSEnumerator_fpItemID];
    unint64_t v67 = *(char **)&v156[OBJC_IVAR____TtC9libfssync14FPFSEnumerator_vfsItemID];
    LODWORD(v150) = v156[OBJC_IVAR____TtC9libfssync14FPFSEnumerator_vfsItemID + 8];
    unint64_t v68 = &v156[OBJC_IVAR____TtC9libfssync14FPFSEnumerator_logger];
    uint64_t v69 = sub_10096B480();
    uint64_t v70 = *(void *)(v69 - 8);
    (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v40, v68, v69);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v70 + 56))(v40, 0, 1, v69);
    uint64_t v163 = _swiftEmptyArrayStorage;
    uint64_t v148 = *((void *)v39 + 2);
    sub_10002B7CC(&qword_100AD0BF0);
    swift_dynamicCastClassUnconditional();
    v164[0] = 0x746E656D75636F44;
    v164[1] = 0xE900000000000073;
    uint64_t v161 = 58;
    unint64_t v162 = 0xE100000000000000;
    uint64_t v159 = 47;
    unint64_t v160 = 0xE100000000000000;
    sub_10001F9C0();
    id v149 = v66;
    swift_retain();
    uint64_t v71 = sub_10096C910();
    uint64_t v72 = (uint64_t)v40;
    uint64_t v74 = v73;
    __chkstk_darwin(v71);
    *(&v137 - 8) = (char *)v66;
    *(&v137 - 7) = v67;
    int v75 = v150;
    *((unsigned char *)&v137 - 48) = v150;
    Swift::String v76 = v151;
    *(&v137 - 5) = (char *)v39;
    id v133 = v76;
    uint64_t v77 = (uint64_t)v155;
    unint64_t v134 = v155;
    uint64_t v135 = (void *)v72;
    id v136 = &v163;
    long long v151 = v67;
    id v78 = v157;
    uint64_t v80 = sub_10074F940((uint64_t)v67, v75, v79, v74, v153, (void (*)(uint64_t, unsigned char *, uint64_t, unsigned char *))sub_10012DFEC, (uint64_t)(&v137 - 10));
    if (v78)
    {
      swift_release();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      sub_10002B770(v72, &qword_100ACD970);
      sub_10002B770(v77, &qword_100ACA8C0);
      swift_bridgeObjectRelease();

      return;
    }
    uint64_t v104 = v80;
    swift_bridgeObjectRelease();
    swift_release();
    unint64_t v103 = (unint64_t)v163;
    sub_10002B770(v72, &qword_100ACD970);

    int v102 = v142;
  }
  else
  {
    uint64_t v60 = *(char **)(v41 + OBJC_IVAR____TtC9libfssync14FPFSEnumerator_vfsItemID);
    int v61 = *(unsigned __int8 *)(v41 + OBJC_IVAR____TtC9libfssync14FPFSEnumerator_vfsItemID + 8);
    v164[0] = _swiftEmptyArrayStorage;
    uint64_t v62 = *((void *)v39 + 2);
    sub_10002B7CC(&qword_100AD0BF0);
    uint64_t v63 = swift_dynamicCastClassUnconditional();
    __chkstk_darwin(v63);
    *(&v137 - 6) = (char *)v41;
    *(&v137 - 5) = (char *)v39;
    id v133 = v152;
    unint64_t v134 = (char *)v45;
    uint64_t v135 = v164;
    swift_retain();
    long long v151 = v60;
    id v64 = v157;
    uint64_t v65 = sub_10074F030((uint64_t)v60, v61, v153, (void (*)(uint64_t, unsigned char *))sub_10012DFC8, (uint64_t)(&v137 - 8));
    if (v64)
    {
      swift_release();
      swift_bridgeObjectRelease();
      sub_10002B770(v45, &qword_100ACA8C0);
      swift_bridgeObjectRelease();
      id v108 = (id *)&v168 + 1;
LABEL_32:

      return;
    }
    uint64_t v101 = v65;
    uint64_t v148 = v62;
    LODWORD(v150) = v61;
    swift_release();
    int v102 = 0;
    unint64_t v103 = v164[0];
    uint64_t v104 = v101;
  }
  unint64_t v105 = v151;
  sub_1003FC78C(v103);
  unint64_t v106 = v170;
  unint64_t v107 = swift_bridgeObjectRetain();
  sub_100750620(v107);
  long long v151 = v105;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v115 = *(void (**)(unint64_t, uint64_t, uint64_t, void))(v146 + 16);
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  swift_retain();
  uint64_t v116 = v156;
  sub_10096B600();
  swift_release();
  swift_release();
  v115(v106, v104, v161, 0);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if (v102)
  {
    sub_10002B7CC(&qword_100AD0BF0);
    uint64_t v117 = swift_dynamicCastClassUnconditional();
    id v118 = v116;
    uint64_t v119 = v152;
    swift_retain();
    sub_1007978A8(v151, v150, v117, (uint64_t)v118, v119);
    uint64_t v120 = v154;
    swift_release();
    swift_release();

    uint64_t v125 = (uint64_t)v155;
  }
  else
  {
    swift_release();
    uint64_t v125 = (uint64_t)v155;
    uint64_t v120 = v154;
  }
  sub_10002B770(v125, &qword_100ACA8C0);
}

uint64_t sub_100128B7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *, void, void, void, id), uint64_t a6, uint64_t a7)
{
  id v64 = a5;
  uint64_t v65 = a6;
  uint64_t v60 = a4;
  uint64_t v63 = a3;
  uint64_t v69 = a2;
  uint64_t v70 = (char *)a1;
  uint64_t v66 = sub_10002B7CC(&qword_100ACCB10);
  uint64_t v62 = *(void *)(v66 - 8);
  __chkstk_darwin(v66);
  unint64_t v68 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10002B7CC((uint64_t *)&unk_100AD0CF0);
  __chkstk_darwin(v9 - 8);
  int v61 = ((char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = (int *)type metadata accessor for VFSItem(0);
  uint64_t v67 = *((void *)v11 - 1);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v59 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v59 - v18;
  uint64_t v20 = sub_10002B7CC((uint64_t *)&unk_100ACEC90);
  __chkstk_darwin(v20);
  uint64_t v22 = (uint64_t *)((char *)&v59 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10002B70C((uint64_t)v70, (uint64_t)v22, (uint64_t *)&unk_100ACEC90);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v23 = *v22;
    swift_beginAccess();
    uint64_t v24 = *(void (**)(uint64_t, void, void, uint64_t))(a7 + 16);
    swift_retain();
    swift_errorRetain();
    v24(v23, 0, 0, 1);
    swift_errorRelease();
    swift_release();
    return swift_errorRelease();
  }
  id v59 = v14;
  uint64_t v26 = a7;
  uint64_t v28 = (uint64_t)v68;
  uint64_t v27 = v69;
  uint64_t v70 = v19;
  if ((*(unsigned int (**)(uint64_t *, uint64_t, int *))(v67 + 48))(v22, 1, v11) == 1)
  {
    swift_beginAccess();
    uint64_t v29 = *(void (**)(uint64_t, void, void, uint64_t))(v26 + 16);
    char v30 = *(unsigned char *)(v27 + OBJC_IVAR____TtC9libfssync14FPFSEnumerator_vfsItemID + 8);
    uint64_t v73 = *(void *)(v27 + OBJC_IVAR____TtC9libfssync14FPFSEnumerator_vfsItemID);
    char v74 = v30;
    long long v75 = 0u;
    long long v76 = 0u;
    long long v77 = 0u;
    long long v78 = 0u;
    long long v79 = 0u;
    long long v80 = 0u;
    uint64_t v81 = 0;
    sub_1000D3768((uint64_t)&v73);
    sub_10002B7CC((uint64_t *)&unk_100ACD9A0);
    sub_100025500((unint64_t *)&qword_100AD5640, (uint64_t *)&unk_100ACD9A0);
    uint64_t v31 = swift_allocError();
    sub_10001AE98((uint64_t)&v73, v32, (uint64_t *)&unk_100ACD9A0);
    swift_retain();
    v29(v31, 0, 0, 1);
    swift_errorRelease();
    swift_release();
    return sub_10002B770((uint64_t)v22, &qword_100ACB910);
  }
  uint64_t v33 = (uint64_t)v70;
  sub_10003D140((uint64_t)v22, (uint64_t)v70);
  sub_1000D37D0(v33, (uint64_t)v17, type metadata accessor for VFSItem);
  uint64_t v34 = v66;
  uint64_t v35 = v28 + *(int *)(v66 + 52);
  sub_10002C548((uint64_t)&v73);
  uint64_t v36 = v35;
  sub_10001AE98((uint64_t)&v73, v35, &qword_100AD0EA0);
  uint64_t v37 = v28 + *(int *)(v34 + 56);
  *(void *)uint64_t v37 = 0;
  *(void *)(v37 + 8) = 0;
  *(void *)(v37 + 16) = 0;
  *(unsigned char *)(v37 + 24) = 1;
  uint64_t v38 = v28 + *(int *)(v34 + 60);
  *(void *)uint64_t v38 = 0;
  *(void *)(v38 + 8) = 0;
  *(unsigned char *)(v38 + 16) = 1;
  uint64_t v39 = *(void *)v17;
  LODWORD(v35) = v17[8];
  *(void *)uint64_t v28 = *(void *)v17;
  *(unsigned char *)(v28 + 8) = v35;
  uint64_t v40 = (uint64_t)v59;
  sub_1000D37D0((uint64_t)v17, (uint64_t)v59, type metadata accessor for VFSItem);
  if (v35 == 2 && v39 == 1)
  {
    sub_10003D1FC(v40);
    uint64_t v41 = v60;
  }
  else
  {
    uint64_t v42 = *(void *)v40;
    int v43 = *(unsigned __int8 *)(v40 + 8);
    sub_10003D1FC(v40);
    uint64_t v41 = v60;
    if (v43 != 2 || v42)
    {
      uint64_t v45 = *((void *)v17 + 2);
      char v46 = v17[24];
      *(void *)(v28 + 16) = v45;
      *(unsigned char *)(v28 + 24) = v46;
      goto LABEL_12;
    }
  }
  char v44 = v17[8];
  *(void *)(v28 + 16) = *(void *)v17;
  *(unsigned char *)(v28 + 24) = v44;
  uint64_t v45 = *((void *)v17 + 2);
  char v46 = v17[24];
LABEL_12:
  id v47 = &v17[v11[9]];
  uint64_t v48 = *(void *)v47;
  int v49 = *((_DWORD *)v47 + 2);
  uint64_t v50 = *((void *)v47 + 2);
  LOBYTE(v47) = v47[24];
  uint64_t v51 = *((void *)v17 + 4);
  uint64_t v52 = *((void *)v17 + 5);
  *(void *)(v28 + 32) = v48;
  *(_DWORD *)(v28 + 40) = v49;
  *(void *)(v28 + 48) = v50;
  *(unsigned char *)(v28 + 56) = (_BYTE)v47;
  *(void *)(v28 + 64) = 0;
  *(void *)(v28 + 72) = v45;
  *(unsigned char *)(v28 + 80) = v46;
  *(void *)(v28 + 88) = v51;
  *(void *)(v28 + 96) = v52;
  *(void *)(v28 + 104) = 0;
  *(void *)(v28 + 112) = 0;
  *(void *)(v28 + 120) = 0;
  *(void *)(v28 + 128) = v51;
  *(void *)(v28 + 136) = v52;
  uint64_t v53 = v66;
  sub_1000D37D0((uint64_t)&v17[v11[7]], v28 + *(int *)(v66 + 48), (uint64_t (*)(void))type metadata accessor for ItemMetadata);
  sub_10001AE98((uint64_t)&v17[v11[8]], (uint64_t)v71, &qword_100AD0EA0);
  sub_10001AE98(v36, (uint64_t)v72, &qword_100AD0EA0);
  swift_bridgeObjectRetain_n();
  sub_10012F1D0(v71, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_10009C6EC);
  sub_10012F1D0(v72, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1000DBE04);
  sub_10001AE98((uint64_t)v71, v36, &qword_100AD0EA0);
  *(void *)(v28 + *(int *)(v53 + 64)) = 0;
  uint64_t v54 = VFSItem.syncability.getter();
  uint64_t v56 = v55;
  sub_10003D1FC((uint64_t)v17);
  id v57 = (uint64_t *)(v28 + *(int *)(v53 + 68));
  *id v57 = v54;
  v57[1] = v56;
  uint64_t v58 = v61;
  sub_10001AE98(v28, (uint64_t)v61, &qword_100ACCB10);
  (*(void (**)(NSObject *, void, uint64_t, uint64_t))(v62 + 56))(v58, 0, 1, v53);
  sub_1001259FC(v63, v58, v41, v64, v65);
  sub_10002B770((uint64_t)v58, (uint64_t *)&unk_100AD0CF0);
  return sub_10003D1FC((uint64_t)v70);
}

void sub_100129444(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void, void, void, void, void, void))
{
  sub_10001AE98(a1, (uint64_t)v38, &qword_100ACDA20);
  sub_10001AE98(a1, (uint64_t)v39, &qword_100ACDA20);
  unint64_t v8 = v39[0];
  if (v42 == 1)
  {
    sub_100130378(a1, (void (*)(void, void, void, void, void))sub_10013032C);
    sub_100130378(a1, (void (*)(void, void, void, void, void))sub_10013032C);
    id v9 = a3;
    sub_100130378(a1, (void (*)(void, void, void, void, void))sub_10013032C);
    id v10 = v9;
    uint64_t v11 = sub_10096B470();
    os_log_type_t v12 = sub_10096C5B0();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = swift_slowAlloc();
      uint64_t v33 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 138412802;
      uint64_t v14 = a5;
      id v15 = v10;
      sub_10096C8C0();
      *uint64_t v33 = v10;

      a5 = v14;
      *(_WORD *)(v13 + 12) = 2048;
      sub_10096C8C0();
      *(_WORD *)(v13 + 22) = 2112;
      swift_getErrorValue();
      uint64_t __src = (uint64_t)Error.prettyDescription.getter(v36);
      sub_10096C8C0();
      v33[1] = __src;
      sub_100130378(a1, (void (*)(void, void, void, void, void))sub_1001303B8);
      sub_100130378(a1, (void (*)(void, void, void, void, void))sub_1001303B8);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "📖  %@: enumerating from change %llu failed: %@", (uint8_t *)v13, 0x20u);
      sub_10002B7CC((uint64_t *)&unk_100ACCBC0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      sub_100130378(a1, (void (*)(void, void, void, void, void))sub_1001303B8);
      sub_100130378(a1, (void (*)(void, void, void, void, void))sub_1001303B8);
    }
    swift_errorRetain();
    a5(_swiftEmptyArrayStorage, _swiftEmptyArrayStorage, 0, 0, 0, v8);
    sub_100130378(a1, (void (*)(void, void, void, void, void))sub_1001303B8);
    sub_100130378(a1, (void (*)(void, void, void, void, void))sub_1001303B8);
  }
  else
  {
    unint64_t v16 = v39[1];
    uint64_t v17 = v40;
    uint64_t v18 = v41;
    id v19 = a3;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    id v20 = v19;
    uint64_t v21 = sub_10096B470();
    os_log_type_t v22 = sub_10096C5A0();
    if (os_log_type_enabled(v21, v22))
    {
      os_log_type_t v32 = v22;
      unsigned int log = v17;
      *(void *)type = a5;
      uint64_t v23 = swift_slowAlloc();
      uint64_t v24 = (void *)swift_slowAlloc();
      uint64_t __src = swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 138413570;
      id v25 = v20;
      sub_10096C8C0();
      *uint64_t v24 = v20;

      *(_WORD *)(v23 + 12) = 2048;
      sub_10096C8C0();
      *(_WORD *)(v23 + 22) = 2048;
      if (v8 >> 62)
      {
        swift_bridgeObjectRetain();
        sub_10096CE70();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      sub_10096C8C0();
      swift_bridgeObjectRelease();
      *(_WORD *)(v23 + 32) = 2048;
      uint64_t v17 = log;
      if (v16 >> 62)
      {
        swift_bridgeObjectRetain();
        sub_10096CE70();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      sub_10096C8C0();
      swift_bridgeObjectRelease();
      *(_WORD *)(v23 + 42) = 2080;
      if (log) {
        uint64_t v26 = 0x6F6D20736168202CLL;
      }
      else {
        uint64_t v26 = 0;
      }
      if (log) {
        unint64_t v27 = 0xEA00000000006572;
      }
      else {
        unint64_t v27 = 0xE000000000000000;
      }
      sub_100719D44(v26, v27, &__src);
      sub_10096C8C0();
      swift_bridgeObjectRelease();
      *(_WORD *)(v23 + 52) = 2048;
      sub_10096C8C0();
      _os_log_impl((void *)&_mh_execute_header, v21, v32, "📖  %@: enumerating from change %llu done: %ld updated, %ld deleted%s, next anchor:%llu", (uint8_t *)v23, 0x3Eu);
      sub_10002B7CC((uint64_t *)&unk_100ACCBC0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      a5 = *(void (**)(void, void, void, void, void, void))type;
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    uint64_t __src = v18;
    uint64_t v28 = sub_100078C44(&__src, v38);
    unint64_t v30 = v29 & 0xFFFFFFFFFFFFFFLL;
    Class isa = sub_10096AF20().super.isa;
    sub_10001E9C0(v28, v30);
    a5(v8, v16, v17, isa, 0, 0);
  }
}

uint64_t sub_100129B3C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5, uint64_t a6, void *a7)
{
  swift_beginAccess();
  uint64_t v12 = *(void *)(a2 + 16);
  uint64_t v13 = *(void *)(a2 + 24);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v12;
  *(void *)(v14 + 24) = v13;
  uint64_t v15 = swift_allocObject();
  swift_weakInit();
  unint64_t v16 = (void *)swift_allocObject();
  _OWORD v16[2] = sub_10012FE00;
  v16[3] = v14;
  v16[4] = v15;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = sub_10012FEE4;
  *(void *)(v17 + 24) = v16;
  swift_beginAccess();
  *(void *)(a2 + 16) = sub_10012FE00;
  *(void *)(a2 + 24) = v17;
  swift_retain();
  swift_release();
  swift_beginAccess();
  uint64_t v19 = *(void *)(a2 + 16);
  uint64_t v18 = *(void *)(a2 + 24);
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = v19;
  *(void *)(v20 + 24) = v18;
  uint64_t v21 = (void *)swift_allocObject();
  void v21[2] = a3;
  v21[3] = a4;
  v21[4] = a5;
  v21[5] = a2;
  v21[6] = a1;
  v21[7] = a6;
  v21[8] = a7;
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = sub_10012FE00;
  *(void *)(v22 + 24) = v20;
  swift_retain();
  sub_10001EBB0(a3, a4);
  id v23 = a5;
  swift_retain();
  swift_retain();
  id v24 = a7;
  swift_retain();
  sub_1007D8110((uint64_t)"enumerateChanges(fromToken:suggestedBatchSize:reply:)", 53, 2, sub_10012FFBC, v22, (uint64_t)sub_10012FF94, (uint64_t)v21);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_100129DBC(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  void (*v64)(void *__return_ptr, Swift::UInt64 *, uint64_t);
  unint64_t v65;
  void (*v66)(unsigned char *, uint64_t, uint64_t, uint64_t);
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *Strong;
  void *v72;
  id v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  int v79;
  unint64_t v80;
  uint64_t v81;
  void *v82;
  void *KeyPath;
  uint64_t v84;
  unint64_t v85;
  id v86;
  unint64_t v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  BOOL v93;
  BOOL v94;
  unsigned char *v95;
  uint64_t v96;
  int *v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  uint64_t v120;
  id v121;
  void *v122;
  uint64_t v123;
  unint64_t v124;
  char v125;
  unsigned char *v126;
  id v127;
  unint64_t *v128;
  unint64_t v129;
  id v130;
  uint64_t v131;
  unint64_t v132;
  void *v133;
  uint64_t v134;
  void (*v135)(void *, void);
  void *v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  BOOL v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  BOOL v144;
  uint64_t v145;
  void (*v146)(void *);
  id v147;
  char isUniquelyReferenced_nonNull_bridgeObject;
  void *v149;
  unsigned char v150[12];
  unsigned char v151[12];
  int v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  void (*v156)(unsigned char *, uint64_t, uint64_t, uint64_t);
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unsigned char *v161;
  void *v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t *v165;
  uint64_t v166;
  unsigned char *v167;
  id v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  void *v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179[4];
  void v180[62];
  void v181[63];
  void v182[63];
  Swift::UInt64 v183;
  char v184;
  char v185;
  void v186[69];
  long long v187;
  unsigned __int8 v188;
  void v189[2];
  unsigned __int8 v190;
  unint64_t v191;
  void v192[2];
  char v193;
  uint64_t v194;
  uint64_t v195;
  char v196;
  uint64_t v197;
  long long v198;
  char v199;
  long long v200;
  unsigned __int8 v201;
  long long v202;
  char v203;
  long long v204;
  unsigned __int8 v205;
  long long v206;
  char v207;
  long long v208;
  unsigned __int8 v209;
  long long v210;
  char v211;
  long long v212;
  unsigned __int8 v213;
  long long v214;
  char v215;
  long long v216;
  unsigned __int8 v217;
  void v218[4];
  char v219;
  void v220[4];
  char v221;
  void v222[2];
  char v223;
  uint64_t v224;
  uint64_t v225;
  char v226;
  uint64_t v227;
  uint64_t (*v228)@<X0>(uint64_t *@<X0>, uint64_t@<X8>);
  uint64_t v229;
  void v230[2];
  char v231;
  uint64_t v232;
  uint64_t v233;
  char v234;
  void v235[2];
  char v236;
  uint64_t v237;
  uint64_t *v238;
  char v239;
  unint64_t v240;
  void v241[4];
  char v242;
  void v243[4];
  char v244;

  long long v168 = a7;
  uint64_t v169 = a5;
  char v166 = a6;
  uint64_t v11 = sub_10096B830();
  uint64_t v163 = *(void *)(v11 - 8);
  uint64_t v164 = v11;
  __chkstk_darwin(v11);
  unint64_t v162 = &v150[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = sub_10002B7CC((uint64_t *)&unk_100AD0CF0);
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  uint64_t v161 = &v150[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v16 = __chkstk_darwin(v14);
  int v167 = &v150[-v17];
  __chkstk_darwin(v16);
  uint64_t v19 = &v150[-v18];
  unint64_t v170 = a4 + 16;
  uint64_t v171 = a4;
  uint64_t v20 = OBJC_IVAR____TtC9libfssync14FPFSEnumerator_previousAnchor;
  v186[0] = *(void *)(a3 + OBJC_IVAR____TtC9libfssync14FPFSEnumerator_previousAnchor);
  uint64_t v21 = sub_100078C44(v186, &v186[1]);
  unint64_t v23 = v22 & 0xFFFFFFFFFFFFFFLL;
  Class isa = sub_10096AF20().super.isa;
  sub_10001E9C0(v21, v23);
  uint64_t v25 = sub_10096AF60();
  unint64_t v27 = v26;

  LOBYTE(a2) = _s9libfssync17FPItemVersionDataV23__derived_struct_equalsySbAC_ACtFZ_0(a1, a2, v25, v27);
  sub_10001E9C0(v25, v27);
  if ((a2 & 1) == 0)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    sub_10096B600();
    swift_release();
    swift_release();
    unint64_t v43 = v186[0];
    *(void *)(a3 + v20) = v186[0];
    swift_getKeyPath();
    swift_getKeyPath();
    sub_10096B600();
    swift_release();
    swift_release();
    if (v43 >= v186[0])
    {
      unint64_t v44 = sub_100099324((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v45 = (unint64_t *)(a3 + OBJC_IVAR____TtC9libfssync14FPFSEnumerator_changedItemsByID);
      swift_beginAccess();
      *uint64_t v45 = v44;
      swift_bridgeObjectRelease();
      char v46 = (void *)(a3 + OBJC_IVAR____TtC9libfssync14FPFSEnumerator_deletedItemsIDs);
      swift_beginAccess();
      *char v46 = &_swiftEmptySetSingleton;
      swift_bridgeObjectRelease();
    }
    swift_beginAccess();
    id v47 = *(void (**)(void *))(v171 + 16);
    type metadata accessor for NSFileProviderError(0);
    v186[66] = -1002;
    swift_retain();
    sub_100042898((uint64_t)_swiftEmptyArrayStorage);
    sub_10002558C((unint64_t *)&unk_100ACAAB0, type metadata accessor for NSFileProviderError);
    sub_10096ABD0();
    uint64_t v48 = (void *)v180[0];
    v243[0] = v180[0];
    memset(&v243[1], 0, 24);
    unint64_t v244 = 1;
    int v49 = v243;
    goto LABEL_14;
  }
  unint64_t v160 = v20;
  Swift::UInt64 v28 = *(void *)(a3 + OBJC_IVAR____TtC9libfssync14FPFSEnumerator_vfsItemID);
  int v29 = *(unsigned __int8 *)(a3 + OBJC_IVAR____TtC9libfssync14FPFSEnumerator_vfsItemID + 8);
  unint64_t v30 = (uint64_t *)(a3 + OBJC_IVAR____TtC9libfssync14FPFSEnumerator_changedItemsByID);
  swift_beginAccess();
  uint64_t v165 = v30;
  uint64_t v31 = *v30;
  uint64_t v32 = a3;
  if (*(void *)(v31 + 16) && (unint64_t v33 = sub_10031F858(v28, v29), (v34 & 1) != 0))
  {
    unint64_t v35 = v33;
    uint64_t v36 = *(void *)(v31 + 56);
    int v37 = v29;
    uint64_t v38 = sub_10002B7CC(&qword_100ACCB10);
    Swift::UInt64 v39 = v28;
    uint64_t v40 = *(void *)(v38 - 8);
    uint64_t v41 = v36 + *(void *)(v40 + 72) * v35;
    uint64_t v32 = a3;
    sub_10002B70C(v41, (uint64_t)v19, &qword_100ACCB10);
    uint64_t v42 = v38;
    int v29 = v37;
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v40 + 56))(v19, 0, 1, v42);
    Swift::UInt64 v28 = v39;
  }
  else
  {
    uint64_t v50 = sub_10002B7CC(&qword_100ACCB10);
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 56))(v19, 1, 1, v50);
  }
  uint64_t v51 = sub_10002B7CC(&qword_100ACCB10);
  uint64_t v52 = *(void *)(v51 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v52 + 48))(v19, 1, v51))
  {
    sub_10002B770((uint64_t)v19, (uint64_t *)&unk_100AD0CF0);
  }
  else
  {
    uint64_t v53 = &v19[*(int *)(v51 + 48)];
    LOBYTE(v53) = v53[*(int *)(type metadata accessor for ItemMetadata() + 64)];
    sub_10002B770((uint64_t)v19, (uint64_t *)&unk_100AD0CF0);
    if (v53)
    {
LABEL_13:
      swift_beginAccess();
      id v47 = *(void (**)(void *))(v171 + 16);
      type metadata accessor for NSFileProviderError(0);
      v181[0] = -1002;
      swift_retain();
      sub_100042898((uint64_t)_swiftEmptyArrayStorage);
      sub_10002558C((unint64_t *)&unk_100ACAAB0, type metadata accessor for NSFileProviderError);
      sub_10096ABD0();
      uint64_t v48 = (void *)v182[0];
      v218[0] = v182[0];
      memset(&v218[1], 0, 24);
      unint64_t v219 = 1;
      int v49 = v218;
LABEL_14:
      v47(v49);

      return swift_release();
    }
  }
  uint64_t v54 = (uint64_t *)(v32 + OBJC_IVAR____TtC9libfssync14FPFSEnumerator_deletedItemsIDs);
  swift_beginAccess();
  if (sub_1004AE5D4(v28, v29, *v54)) {
    goto LABEL_13;
  }
  uint64_t v56 = *v165;
  if (*(void *)(*v165 + 16) && (unint64_t v57 = sub_10031F858(v28, v29), (v58 & 1) != 0))
  {
    uint64_t v59 = *(void *)(v56 + 56) + *(void *)(v52 + 72) * v57;
    uint64_t v60 = (uint64_t)v167;
    sub_10002B70C(v59, (uint64_t)v167, &qword_100ACCB10);
    char v156 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v52 + 56);
    v156((unsigned char *)v60, 0, 1, v51);
    sub_10002B770(v60, (uint64_t *)&unk_100AD0CF0);
    int v61 = *(uint64_t **)(*(void *)(v169 + 16) + 16);
    unint64_t v183 = v28;
    unint64_t v184 = v29;
    uint64_t v185 = 0;
    uint64_t v62 = *v61;
    unint64_t v154 = v52;
    int v63 = v29;
    id v64 = *(void (**)(void *__return_ptr, Swift::UInt64 *, uint64_t))(v62 + 168);
    swift_retain();
    uint64_t v65 = v172;
    v64(v186, &v183, 1);
    if (v65) {
      return swift_release();
    }
    uint64_t v120 = v154;
    unsigned int v172 = 0;
    sub_10001AE98((uint64_t)v186, (uint64_t)v181, (uint64_t *)&unk_100AD67E0);
    sub_10001AE98((uint64_t)v181, (uint64_t)v182, (uint64_t *)&unk_100AD67E0);
    if (sub_1000D3324((uint64_t)v182) == 1)
    {
      *(void *)&v151[4] = v28;
      swift_release();
      int v29 = v63;
    }
    else
    {
      swift_release();
      memcpy(v180, v186, sizeof(v180));
      sub_1000D3440((uint64_t)v180);
      if ((v180[2] & 0x10) != 0)
      {
        swift_beginAccess();
        id v47 = *(void (**)(void *))(v171 + 16);
        type metadata accessor for NSFileProviderError(0);
        unsigned int v173 = -1002;
        swift_retain();
        sub_100042898((uint64_t)_swiftEmptyArrayStorage);
        sub_10002558C((unint64_t *)&unk_100ACAAB0, type metadata accessor for NSFileProviderError);
        sub_10096ABD0();
        uint64_t v48 = v174;
        v241[0] = v174;
        memset(&v241[1], 0, 24);
        unsigned int v242 = 1;
        int v49 = v241;
        goto LABEL_14;
      }
      int v29 = v63;
      *(void *)&v151[4] = v28;
    }
    uint64_t v52 = v120;
    uint64_t v66 = v156;
  }
  else
  {
    *(void *)&v151[4] = v28;
    uint64_t v66 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v52 + 56);
    uint64_t v67 = (uint64_t)v167;
    v66(v167, 1, 1, v51);
    sub_10002B770(v67, (uint64_t *)&unk_100AD0CF0);
  }
  char v156 = v66;
  unint64_t v68 = *(void *)(*v165 + 16);
  uint64_t v69 = 900;
  if (v68 < 0x384) {
    uint64_t v69 = *(void *)(*v165 + 16);
  }
  uint64_t v158 = *(void *)(*v165 + 16);
  if ((uint64_t)v68 >= v166) {
    unint64_t v68 = v166;
  }
  if (v166 <= 900) {
    uint64_t v70 = v68;
  }
  else {
    uint64_t v70 = v69;
  }
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  id v157 = v54;
  uint64_t v159 = v32;
  *(_DWORD *)long long v151 = v29;
  if (Strong
    && (v72 = Strong, uint64_t v73 = [Strong indexer], v72, v73))
  {
    char v74 = [v73 needsAuthentication];

    long long v75 = 8;
    if (!v74) {
      long long v75 = 0;
    }
    unint64_t v155 = v75;
  }
  else
  {
    unint64_t v155 = 0;
  }
  long long v76 = *v165;
  swift_bridgeObjectRetain();
  char v166 = v70;
  sub_10012FFC4(v70, v76, (uint64_t)&v187);
  uint64_t v153 = *((void *)&v187 + 1);
  unint64_t v154 = v187;
  id v152 = v188;
  int v167 = v189;
  long long v77 = v189[0];
  long long v78 = (uint64_t *)v189[1];
  long long v79 = v190;
  long long v80 = v191;
  swift_bridgeObjectRelease();
  if (*(unsigned char *)(v159 + OBJC_IVAR____TtC9libfssync14FPFSEnumerator_buildAndFilterAppLibraries) == 1)
  {
    LODWORD(v161) = v79;
    uint64_t v81 = v169;
    uint64_t v82 = *(void **)(*(void *)(v169 + 16) + 64);
    KeyPath = v162;
    uint64_t v84 = v163;
    char *v162 = v82;
    uint64_t v85 = v164;
    (*(void (**)(void *, void, unint64_t))(v84 + 104))(KeyPath, enum case for DispatchPredicate.onQueue(_:), v164);
    int v86 = v82;
    LOBYTE(v82) = sub_10096B860();
    (*(void (**)(void *, unint64_t))(v84 + 8))(KeyPath, v85);
    if ((v82 & 1) == 0)
    {
      __break(1u);
      goto LABEL_108;
    }
    unint64_t v208 = v187;
    uint64_t v209 = v188;
    uint64_t v206 = *(_OWORD *)v167;
    uint64_t v207 = v167[16];
    int v177 = v191;
    v235[0] = v154;
    v235[1] = v153;
    unsigned int v236 = v152;
    unint64_t v237 = v77;
    unint64_t v238 = v78;
    uint64_t v239 = (char)v161;
    unint64_t v240 = v80;
    swift_retain();
    sub_1001302CC((uint64_t)&v208);
    sub_1001302CC((uint64_t)&v206);
    sub_100130300((uint64_t)&v177);
    int v87 = v172;
    id v88 = sub_10012D224((uint64_t)v235, v81, 0xA000000000000012);
    swift_release();
    sub_100130254((uint64_t)&v208);
    sub_100130254((uint64_t)&v206);
    sub_100130294((uint64_t)&v177);
    if (v87)
    {
      sub_100130254((uint64_t)&v208);
      sub_100130254((uint64_t)&v206);
      return sub_100130294((uint64_t)&v177);
    }
    v182[0] = v88;
    long long v77 = v159;
    long long v78 = v157;
    while (1)
    {
      unsigned int v99 = v165;
LABEL_63:
      unsigned int v172 = 0;
      uint64_t v100 = v166;
      if (v166 < v158)
      {
        uint64_t v101 = *v99;
        long long v78 = v99;
        uint64_t v85 = sub_1007D7728(*v99);
        KeyPath = (void *)v102;
        long long v80 = v103 & 1;
        uint64_t v104 = sub_10012B2CC(v85, v102, v103 & 1, v100, v101);
        unint64_t v106 = v105;
        id v108 = v107;
        sub_100130288(v85, (uint64_t)KeyPath, v80);
        if (v108)
        {
          __break(1u);
LABEL_117:
          uint64_t result = swift_unexpectedError();
          __break(1u);
          return result;
        }
        Swift::UInt64 v109 = *v78;
        uint64_t v110 = *(unsigned int *)(*v78 + 36);
        if (v110 != v106)
        {
LABEL_108:
          __break(1u);
LABEL_109:
          __break(1u);
LABEL_110:
          __break(1u);
          goto LABEL_111;
        }
        uint64_t v111 = 1 << *(unsigned char *)(v109 + 32);
        if (v111 < v104) {
          goto LABEL_110;
        }
        v230[0] = v104;
        v230[1] = v106;
        uint64_t v231 = 0;
        unsigned int v232 = v111;
        unint64_t v233 = v110;
        uint64_t v234 = 0;
        sub_10012C450((uint64_t)v230, v109, (uint64_t)v192);
        uint64_t v112 = v192[1];
        os_log_t v113 = v193;
        id v114 = v194;
        uint64_t v115 = v195;
        uint64_t v116 = v196;
        uint64_t v117 = v197;
        id v118 = v192[0];
        if (sub_10057D5A0())
        {
          sub_10002B7CC((uint64_t *)&unk_100ACDA00);
          uint64_t v119 = (void *)sub_10096CEA0();
        }
        else
        {
          uint64_t v119 = &_swiftEmptyDictionarySingleton;
        }
        v222[0] = v118;
        v222[1] = v112;
        unint64_t v223 = v113;
        unint64_t v224 = v114;
        int v225 = v115;
        size_t v226 = v116;
        int v227 = v117;
        long long v228 = sub_10012B420;
        long long v229 = 0;
        v186[0] = v119;
        sub_1001302C0(v118, v112, v113);
        sub_1001302C0(v114, v115, v116);
        swift_bridgeObjectRetain();
        sub_1001302C0(v118, v112, v113);
        sub_1001302C0(v114, v115, v116);
        swift_bridgeObjectRetain();
        uint64_t v129 = v172;
        sub_10012C630((uint64_t)v222, 1, v186);
        unsigned int v172 = v129;
        if (v129) {
          goto LABEL_117;
        }
        sub_100130288(v118, v112, v113);
        sub_100130288(v114, v115, v116);
        swift_bridgeObjectRelease();
        *uint64_t v165 = v186[0];
        swift_bridgeObjectRelease();
        sub_100130288(v118, v112, v113);
        sub_100130288(v114, v115, v116);
        swift_bridgeObjectRelease();
        long long v77 = v159;
        long long v78 = v157;
      }
      uint64_t v130 = v168;
      uint64_t v131 = swift_bridgeObjectRetain();
      uint64_t v132 = v172;
      id v133 = sub_10012CF24(v131, (uint64_t)v130);
      uint64_t v85 = v132;
      swift_bridgeObjectRelease();

      if (v166 >= v158)
      {
        swift_getKeyPath();
        swift_getKeyPath();
        sub_10096B600();
        swift_release();
        swift_release();
        uint64_t v138 = v186[0];
        unint64_t v139 = v160;
        *(void *)(v77 + v160) = v186[0];
        swift_getKeyPath();
        swift_getKeyPath();
        sub_10096B600();
        swift_release();
        swift_release();
        uint64_t v140 = v138 >= v186[0];
        unint64_t v134 = v139;
        long long v78 = v157;
        if (!v140) {
          goto LABEL_96;
        }
LABEL_95:
        uint64_t v141 = sub_100099324((uint64_t)_swiftEmptyArrayStorage);
        *uint64_t v165 = v141;
        swift_bridgeObjectRelease();
        *long long v78 = (uint64_t)&_swiftEmptySetSingleton;
        swift_bridgeObjectRelease();
LABEL_96:
        int v142 = v182[0];
        uint64_t v143 = swift_bridgeObjectRetain();
        sub_100750620(v143);
        if (v132)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          long long v204 = v187;
          long long v205 = v188;
          sub_100130254((uint64_t)&v204);
          long long v202 = *(_OWORD *)v167;
          long long v203 = v167[16];
          sub_100130254((uint64_t)&v202);
          uint64_t v176 = v191;
          id v128 = &v176;
        }
        else
        {
          uint64_t v144 = v166 < v158;
          swift_bridgeObjectRelease();
          swift_beginAccess();
          uint64_t v145 = *(void *)(v77 + v134);
          uint64_t v146 = *(void (**)(void *))(v171 + 16);
          v220[0] = v142;
          v220[1] = v133;
          v220[2] = v144;
          v220[3] = v145;
          unint64_t v221 = 0;
          swift_retain();
          swift_bridgeObjectRetain();
          v146(v220);
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v200 = v187;
          unint64_t v201 = v188;
          sub_100130254((uint64_t)&v200);
          char v198 = *(_OWORD *)v167;
          unint64_t v199 = v167[16];
          sub_100130254((uint64_t)&v198);
          unsigned int v175 = v191;
          id v128 = &v175;
        }
LABEL_99:
        sub_100130294((uint64_t)v128);
        return swift_bridgeObjectRelease();
      }
      unint64_t v134 = v160;
      long long v80 = *(void *)(v77 + v160);
      swift_getKeyPath();
      KeyPath = (void *)swift_getKeyPath();
      sub_10096B600();
      swift_release();
      swift_release();
      if (!v186[0]) {
        goto LABEL_109;
      }
      if (v80 == v186[0] - 1)
      {
        swift_getKeyPath();
        swift_getKeyPath();
        KeyPath = v186;
        uint64_t v135 = (void (*)(void *, void))sub_10096B5F0();
        if (*v136 == -1) {
          goto LABEL_114;
        }
        ++*v136;
        v135(v186, 0);
        swift_release();
        swift_release();
      }
      long long v137 = *(void *)(v77 + v134);
      long long v80 = v137 + 1;
      if (v137 != -1)
      {
        *(void *)(v77 + v134) = v80;
        swift_getKeyPath();
        swift_getKeyPath();
        sub_10096B600();
        swift_release();
        swift_release();
        if (v80 < v186[0]) {
          goto LABEL_96;
        }
        goto LABEL_95;
      }
LABEL_111:
      __break(1u);
LABEL_112:
      uint64_t v121 = (id)sub_10096CC30();
LABEL_74:
      uint64_t v122 = v121;
      uint64_t v123 = *v165;
      if (*(void *)(*v165 + 16))
      {
        unint64_t v124 = sub_10031F858(*(Swift::UInt64 *)&v151[4], v151[0]);
        if (v125) {
          sub_10002B70C(*(void *)(v123 + 56) + *(void *)(v154 + 72) * v124, (uint64_t)v161, &qword_100ACCB10);
        }
      }
      Swift::String v126 = v161;
      ((void (*)(void))v156)();
      id v127 = sub_1005A4640(v122, (uint64_t)v126, v169);
      if (KeyPath)
      {
        sub_10002B770((uint64_t)v126, (uint64_t *)&unk_100AD0CF0);

        unint64_t v212 = v187;
        unint64_t v213 = v188;
        sub_100130254((uint64_t)&v212);
        long long v210 = *(_OWORD *)v167;
        long long v211 = v167[16];
        sub_100130254((uint64_t)&v210);
        unsigned int v178 = v191;
        id v128 = &v178;
        goto LABEL_99;
      }
      uint64_t v147 = v127;
      sub_10002B770((uint64_t)v126, (uint64_t *)&unk_100AD0CF0);
      isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
      v182[0] = v80;
      if ((isUniquelyReferenced_nonNull_bridgeObject & 1) == 0
        || (v80 & 0x8000000000000000) != 0
        || (v80 & 0x4000000000000000) != 0)
      {
        long long v80 = sub_100794FA8(v80);
        v182[0] = v80;
      }
      if (v85 >= *(void *)((v80 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_115;
      }
      id v149 = *(void **)((v80 & 0xFFFFFFFFFFFFFF8) + 8 * v85 + 0x20);
      *(void *)((v80 & 0xFFFFFFFFFFFFFF8) + 8 * v85 + 0x20) = v147;

      sub_10096C0C0();
    }
  }
  unint64_t v154 = v52;
  id v89 = (void *)v172;
  int v90 = sub_1001213C8((uint64_t)&v187);
  uint64_t v91 = v90;
  uint64_t v92 = *(void *)(v90 + 16);
  if (!v92)
  {
LABEL_56:
    uint64_t v85 = 0;
    LODWORD(v172) = 1;
    goto LABEL_57;
  }
  uint64_t v85 = 0;
  id v93 = *(_DWORD *)v151 == 2;
  id v94 = *(void *)&v151[4] == 1 && *(_DWORD *)v151 == 2;
  if (*(void *)&v151[4]) {
    id v93 = 0;
  }
  unint64_t v95 = (unsigned char *)(((*(unsigned __int8 *)(v154 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v154 + 80))
                + v90
                + 8);
  while (1)
  {
    uint64_t v96 = *((void *)v95 - 1);
    if (!*v95)
    {
      if (__PAIR64__(v96, 0) == *(void *)v151) {
        goto LABEL_55;
      }
      goto LABEL_45;
    }
    if (*v95 == 1) {
      break;
    }
    if (v96)
    {
      if (v94) {
        goto LABEL_55;
      }
    }
    else if (v93)
    {
      goto LABEL_55;
    }
LABEL_45:
    v95 += *(void *)(v154 + 72);
    if (v92 == ++v85) {
      goto LABEL_56;
    }
  }
  if (*(_DWORD *)v151 != 1 || v96 != *(void *)&v151[4]) {
    goto LABEL_45;
  }
LABEL_55:
  LODWORD(v172) = 0;
LABEL_57:
  uint64_t v97 = (int *)sub_10009945C((uint64_t)_swiftEmptyArrayStorage);
  id v98 = v169;
  swift_retain();
  long long v80 = (unint64_t)sub_100130108(v91, v98, v97);
  KeyPath = v89;
  swift_release();
  sub_10061CA84(v80, v155 | 1);
  if (!v89)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v182[0] = v80;
    if (v172)
    {
      long long v77 = v159;
      unsigned int v99 = v165;
      long long v78 = v157;
      goto LABEL_63;
    }
    long long v77 = v159;
    long long v78 = v157;
    if ((v80 & 0xC000000000000001) != 0) {
      goto LABEL_112;
    }
    if (v85 < *(void *)((v80 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      uint64_t v121 = *(id *)(v80 + 8 * v85 + 32);
      goto LABEL_74;
    }
    __break(1u);
LABEL_114:
    __break(1u);
LABEL_115:
    __break(1u);
  }
  swift_bridgeObjectRelease();
  int v216 = v187;
  uint64_t v217 = v188;
  sub_100130254((uint64_t)&v216);
  int v214 = *(_OWORD *)v167;
  int v215 = v167[16];
  sub_100130254((uint64_t)&v214);
  v179[0] = v191;
  sub_100130294((uint64_t)v179);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_10012B2CC(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  if (a4 < 0) {
    goto LABEL_25;
  }
  if (!a4)
  {
    unint64_t v11 = result;
LABEL_22:
    sub_1001302C0(result, a2, a3 & 1);
    return v11;
  }
  uint64_t v5 = 0;
  uint64_t v6 = a5 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(a5 + 32);
  int v8 = *(_DWORD *)(a5 + 36);
  unint64_t v9 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v10 = a5 + 88;
  unint64_t v11 = result;
  int v12 = a2;
  while ((v11 & 0x8000000000000000) == 0 && (uint64_t)v11 < v7)
  {
    if (v12 != v8) {
      goto LABEL_24;
    }
    unint64_t v13 = v11 >> 6;
    uint64_t v14 = *(void *)(v6 + 8 * (v11 >> 6));
    if ((v14 & (1 << v11)) == 0) {
      goto LABEL_24;
    }
    unint64_t v15 = v14 & (-2 << (v11 & 0x3F));
    if (v15)
    {
      unint64_t v11 = __clz(__rbit64(v15)) | v11 & 0xFFFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v16 = v13 + 1;
      unint64_t v11 = v7;
      if (v13 + 1 < v9)
      {
        unint64_t v17 = *(void *)(v6 + 8 * v16);
        if (!v17)
        {
          unint64_t v16 = v13 + 2;
          unint64_t v11 = v7;
          if (v13 + 2 >= v9) {
            goto LABEL_5;
          }
          unint64_t v17 = *(void *)(v6 + 8 * v16);
          if (!v17)
          {
            while (v9 - 3 != v13)
            {
              unint64_t v17 = *(void *)(v10 + 8 * v13++);
              if (v17)
              {
                unint64_t v16 = v13 + 2;
                goto LABEL_13;
              }
            }
            unint64_t v11 = v7;
            goto LABEL_5;
          }
        }
LABEL_13:
        unint64_t v11 = __clz(__rbit64(v17)) + (v16 << 6);
      }
    }
LABEL_5:
    ++v5;
    int v12 = v8;
    if (v5 == a4) {
      goto LABEL_22;
    }
  }
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_10012B420@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_10002B7CC(&qword_100ACDA10);
  uint64_t v5 = v4 - 8;
  uint64_t v6 = __chkstk_darwin(v4);
  int v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v11 = a2 + *(int *)(sub_10002B7CC((uint64_t *)&unk_100ACCB00) + 48);
  uint64_t v12 = *(int *)(v5 + 56);
  uint64_t v13 = (uint64_t)&v10[v12];
  uint64_t v14 = (uint64_t)a1 + v12;
  uint64_t v15 = *a1;
  char v16 = *((unsigned char *)a1 + 8);
  *(void *)uint64_t v10 = *a1;
  v10[8] = v16;
  sub_10002B70C((uint64_t)a1 + v12, (uint64_t)&v10[v12], &qword_100ACCB10);
  *(void *)a2 = v15;
  *(unsigned char *)(a2 + 8) = v16;
  uint64_t v17 = (uint64_t)&v8[*(int *)(v5 + 56)];
  sub_10002B70C(v14, v17, &qword_100ACCB10);
  sub_10001AE98(v17, v11, &qword_100ACCB10);
  return sub_10002B770(v13, &qword_100ACCB10);
}

uint64_t sub_10012B694(uint64_t a1)
{
  uint64_t v3 = sub_10096B830();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (void *)((char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = *(void **)(*(void *)(a1 + 16) + 64);
  *uint64_t v6 = v7;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  id v8 = v7;
  LOBYTE(v7) = sub_10096B860();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v4 + 8))(v6, v3);
  if ((v7 & 1) == 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v10 = v1;
  uint64_t v11 = sub_10096B470();
  os_log_type_t v12 = sub_10096C5A0();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 138412290;
    id v24 = v10;
    uint64_t v15 = v10;
    sub_10096C8C0();
    *uint64_t v14 = v10;

    _os_log_impl((void *)&_mh_execute_header, v11, v12, "📖  reset stream for %@", v13, 0xCu);
    sub_10002B7CC((uint64_t *)&unk_100ACCBC0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  swift_getKeyPath();
  swift_getKeyPath();
  sub_10096B600();
  swift_release();
  uint64_t result = swift_release();
  char v16 = v24 + 1;
  if (v24 == (char *)-1) {
    goto LABEL_10;
  }
  uint64_t v17 = OBJC_IVAR____TtC9libfssync14FPFSEnumerator_previousAnchor;
  *(void *)&v10[OBJC_IVAR____TtC9libfssync14FPFSEnumerator_previousAnchor] = v16;
  swift_getKeyPath();
  swift_getKeyPath();
  sub_10096B600();
  swift_release();
  swift_release();
  if (v16 >= v24)
  {
    unint64_t v18 = sub_100099324((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v19 = (unint64_t *)&v10[OBJC_IVAR____TtC9libfssync14FPFSEnumerator_changedItemsByID];
    swift_beginAccess();
    *uint64_t v19 = v18;
    swift_bridgeObjectRelease();
    uint64_t v20 = &v10[OBJC_IVAR____TtC9libfssync14FPFSEnumerator_deletedItemsIDs];
    swift_beginAccess();
    *(void *)uint64_t v20 = &_swiftEmptySetSingleton;
    swift_bridgeObjectRelease();
  }
  uint64_t v21 = *(void *)&v10[v17];
  swift_getKeyPath();
  swift_getKeyPath();
  v23[1] = v21;
  uint64_t v22 = v10;
  return sub_10096B610();
}

void sub_10012BA30()
{
  uint64_t v1 = sub_10096B730();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10096B7D0();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong) {
    return;
  }
  uint64_t v10 = (char *)Strong;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v0;
  id v24 = (id)swift_unknownObjectWeakLoadStrong();
  id v12 = v0;
  if (v24)
  {
    if ([v24 unableToStartup])
    {
      sub_10028E920();
      swift_errorRelease();

      swift_release();
      id v13 = v24;

      return;
    }
  }
  if ((v10[OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_started] & 1) == 0)
  {
    uint64_t v14 = (void *)swift_unknownObjectWeakLoadStrong();
    if (v14)
    {
      uint64_t v15 = v14;
      id v24 = [v14 serialQueue];

      aBlock[4] = Filename.init(rawValue:);
      aBlock[5] = 0;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100020480;
      aBlock[3] = &unk_100A70668;
      unint64_t v23 = _Block_copy(aBlock);
      sub_10096B780();
      uint64_t v25 = _swiftEmptyArrayStorage;
      uint64_t v22 = sub_10002558C((unint64_t *)&unk_100ACAEF0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_10002B7CC((uint64_t *)&unk_100ACB5C0);
      sub_100025500((unint64_t *)&qword_100ACAF00, (uint64_t *)&unk_100ACB5C0);
      sub_10096CA60();
      uint64_t v17 = v23;
      id v16 = v24;
      sub_10096C6B0();
      _Block_release(v17);

      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }
  }
  unint64_t v18 = *(void **)&v10[OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_log];
  uint64_t v19 = *(void **)&v10[OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_queue];
  uint64_t v20 = (void *)swift_allocObject();
  v20[2] = v10;
  v20[3] = Filename.init(rawValue:);
  void v20[4] = 0;
  v20[5] = sub_10012C380;
  v20[6] = v11;
  uint64_t v21 = v10;
  swift_retain();
  sub_1006B791C((uint64_t)"reset()", 7, 2, v18, v19, (uint64_t)sub_10012C3D0, (uint64_t)v20);

  swift_release();
  swift_release();
}

uint64_t sub_10012BE90(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_10096B470();
  os_log_type_t v5 = sub_10096C5A0();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "📖  requested to reset stream", v6, 2u);
    swift_slowDealloc();
  }

  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a2;
  *(void *)(v7 + 24) = a1;
  id v8 = a2;
  swift_retain();
  sub_1007D8110((uint64_t)"reset()", 7, 2, Filename.init(rawValue:), 0, (uint64_t)sub_10012C420, v7);

  return swift_release();
}

uint64_t sub_10012C028()
{
  sub_10096CBD0(24);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = VFSItemID.parseableString.getter(*(void *)(v0 + OBJC_IVAR____TtC9libfssync14FPFSEnumerator_vfsItemID), *(unsigned char *)(v0 + OBJC_IVAR____TtC9libfssync14FPFSEnumerator_vfsItemID + 8));
  sub_10096BDC0(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 0x7473657571657220;
  v3._object = (void *)0xED00003A79426465;
  sub_10096BDC0(v3);
  [*(id *)(v0 + OBJC_IVAR____TtC9libfssync14FPFSEnumerator_lifetimeExtender) requestEffectivePID];
  v4._countAndFlagsBits = sub_10096D220();
  sub_10096BDC0(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 62;
  v5._object = (void *)0xE100000000000000;
  sub_10096BDC0(v5);
  return 0x3A736670663CLL;
}

void sub_10012C168()
{
  sub_10096B480();
  if (v0 <= 0x3F)
  {
    sub_10012C29C();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void sub_10012C29C()
{
  if (!qword_100ACD948)
  {
    unint64_t v0 = sub_10096B620();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100ACD948);
    }
  }
}

char *sub_10012C2F4()
{
  if (&swift_runtimeSupportsNoncopyableTypes) {
    return (char *)sub_10002B7CC((uint64_t *)&unk_100ACD950);
  }
  else {
    return (char *)&type metadata for () + 8;
  }
}

uint64_t sub_10012C31C()
{
  return swift_unknownObjectRetain();
}

void (*sub_10012C32C(uint64_t (*a1)(uint64_t)))(uint64_t *, void)
{
  return sub_100122E64(a1);
}

uint64_t sub_10012C348()
{
  return swift_deallocObject();
}

uint64_t sub_10012C380(uint64_t a1)
{
  return sub_10012BE90(a1, *(void **)(v1 + 16));
}

uint64_t sub_10012C388()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10012C3D0()
{
  return sub_10028EE84(*(unsigned char **)(v0 + 16), *(void (**)(void))(v0 + 24), *(void *)(v0 + 32), *(void (**)(uint64_t))(v0 + 40));
}

uint64_t sub_10012C3E0()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10012C420()
{
  return sub_10012B694(*(void *)(v0 + 24));
}

uint64_t sub_10012C450@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = sub_1007D7728(a2);
  if (v8) {
    goto LABEL_19;
  }
  int v9 = *(_DWORD *)(a2 + 36);
  if (v9 != v7)
  {
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v10 = 1 << *(unsigned char *)(a2 + 32);
  if (v10 < result)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (*(unsigned char *)(a1 + 16))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v11 = *(void *)(a1 + 8);
  if (v9 != v11) {
    goto LABEL_15;
  }
  if (*(void *)a1 < result)
  {
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (*(unsigned char *)(a1 + 40))
  {
LABEL_21:
    __break(1u);
    return result;
  }
  uint64_t v12 = *(void *)(a1 + 32);
  if (v9 != v12) {
    goto LABEL_17;
  }
  uint64_t v13 = *(void *)(a1 + 24);
  if (v10 < v13)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  *(void *)a3 = *(void *)a1;
  *(void *)(a3 + 8) = v11;
  *(unsigned char *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = v13;
  *(void *)(a3 + 32) = v12;
  *(unsigned char *)(a3 + 40) = 0;
  *(void *)(a3 + 48) = a2;

  return swift_bridgeObjectRetain();
}

uint64_t sub_10012C538@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_10096B600();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_10012C5B8(uint64_t a1, void **a2)
{
  Swift::String v2 = *a2;
  swift_getKeyPath();
  swift_getKeyPath();
  id v3 = v2;
  return sub_10096B610();
}

uint64_t sub_10012C630(uint64_t a1, int a2, void *a3)
{
  long long v80 = a3;
  int v71 = a2;
  uint64_t v4 = sub_10002B7CC(&qword_100ACCB10);
  uint64_t v82 = *(void *)(v4 - 8);
  __chkstk_darwin(v4 - 8);
  long long v79 = &v70[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = sub_10002B7CC(&qword_100ACDA18);
  __chkstk_darwin(v6 - 8);
  char v8 = &v70[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = *(void *)a1;
  uint64_t v10 = *(void *)(a1 + 8);
  char v11 = *(unsigned char *)(a1 + 16);
  uint64_t v12 = *(void *)(a1 + 24);
  uint64_t v13 = *(void *)(a1 + 32);
  int v14 = *(unsigned __int8 *)(a1 + 40);
  uint64_t v16 = *(void *)(a1 + 48);
  uint64_t v15 = *(void *)(a1 + 56);
  uint64_t v17 = *(void *)(a1 + 64);
  uint64_t v87 = v9;
  uint64_t v88 = v10;
  char v89 = v11;
  uint64_t v90 = v12;
  uint64_t v91 = v13;
  char v92 = v14;
  uint64_t v93 = v16;
  uint64_t v94 = v9;
  uint64_t v95 = v10;
  char v96 = v11;
  uint64_t v97 = v15;
  uint64_t v98 = v17;
  sub_1001302C0(v9, v10, v11);
  uint64_t v72 = v9;
  uint64_t v18 = v9;
  uint64_t v19 = (uint64_t)v79;
  uint64_t v73 = v10;
  uint64_t v20 = v10;
  uint64_t v21 = v80;
  sub_1001302C0(v18, v20, v11);
  uint64_t v76 = v12;
  uint64_t v75 = v13;
  int v74 = v14;
  sub_1001302C0(v12, v13, v14);
  uint64_t v78 = v16;
  swift_bridgeObjectRetain();
  uint64_t v77 = v17;
  swift_retain();
  sub_10049C970((uint64_t)v8);
  uint64_t v22 = sub_10002B7CC((uint64_t *)&unk_100ACCB00);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 48))(v8, 1, v22) == 1) {
    goto LABEL_2;
  }
  uint64_t v30 = (uint64_t)&v8[*(int *)(v22 + 48)];
  char v32 = v8[8];
  Swift::UInt64 v85 = *(void *)v8;
  Swift::UInt64 v31 = v85;
  char v86 = v32;
  sub_10001AE98(v30, v19, &qword_100ACCB10);
  unint64_t v33 = (void *)*v21;
  unint64_t v35 = sub_10031F858(v31, v32);
  uint64_t v36 = v33[2];
  BOOL v37 = (v34 & 1) == 0;
  uint64_t v38 = v36 + v37;
  if (__OFADD__(v36, v37)) {
    goto LABEL_22;
  }
  char v39 = v34;
  if (v33[3] >= v38)
  {
    if (v71)
    {
      if (v34) {
        goto LABEL_10;
      }
    }
    else
    {
      sub_10091B06C();
      if (v39) {
        goto LABEL_10;
      }
    }
LABEL_13:
    int v49 = (void *)*v21;
    *(void *)(*v21 + 8 * (v35 >> 6) + 64) |= 1 << v35;
    uint64_t v50 = v49[6] + 16 * v35;
    *(void *)uint64_t v50 = v31;
    *(unsigned char *)(v50 + 8) = v32;
    sub_10001AE98(v19, v49[7] + *(void *)(v82 + 72) * v35, &qword_100ACCB10);
    uint64_t v51 = v49[2];
    BOOL v52 = __OFADD__(v51, 1);
    uint64_t v53 = v51 + 1;
    if (v52)
    {
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    os_log_t v49[2] = v53;
    sub_10049C970((uint64_t)v8);
    uint64_t v54 = sub_10002B7CC((uint64_t *)&unk_100ACCB00);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v54 - 8) + 48))(v8, 1, v54) == 1)
    {
LABEL_2:
      sub_100130288(v72, v73, v11);
      sub_100130288(v76, v75, v74);
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v23 = v90;
      uint64_t v24 = v91;
      char v25 = v92;
      uint64_t v26 = v94;
      uint64_t v27 = v95;
      char v28 = v96;
      sub_100130288(v87, v88, v89);
      sub_100130288(v23, v24, v25);
      swift_bridgeObjectRelease();
      sub_100130288(v26, v27, v28);
      return swift_release();
    }
    while (1)
    {
      uint64_t v55 = (uint64_t)&v8[*(int *)(v54 + 48)];
      char v57 = v8[8];
      Swift::UInt64 v85 = *(void *)v8;
      Swift::UInt64 v56 = v85;
      char v86 = v57;
      sub_10001AE98(v55, v19, &qword_100ACCB10);
      char v58 = (void *)*v21;
      unint64_t v59 = sub_10031F858(v56, v57);
      uint64_t v61 = v58[2];
      BOOL v62 = (v60 & 1) == 0;
      BOOL v52 = __OFADD__(v61, v62);
      uint64_t v63 = v61 + v62;
      if (v52) {
        break;
      }
      char v64 = v60;
      if (v58[3] < v63)
      {
        sub_100370F30(v63, 1);
        unint64_t v59 = sub_10031F858(v56, v57);
        if ((v64 & 1) != (v65 & 1)) {
          goto LABEL_24;
        }
      }
      if (v64) {
        goto LABEL_10;
      }
      uint64_t v66 = (void *)*v21;
      *(void *)(*v21 + 8 * (v59 >> 6) + 64) |= 1 << v59;
      uint64_t v67 = v66[6] + 16 * v59;
      *(void *)uint64_t v67 = v56;
      *(unsigned char *)(v67 + 8) = v57;
      sub_10001AE98(v19, v66[7] + *(void *)(v82 + 72) * v59, &qword_100ACCB10);
      uint64_t v68 = v66[2];
      BOOL v52 = __OFADD__(v68, 1);
      uint64_t v69 = v68 + 1;
      if (v52) {
        goto LABEL_23;
      }
      v66[2] = v69;
      sub_10049C970((uint64_t)v8);
      uint64_t v54 = sub_10002B7CC((uint64_t *)&unk_100ACCB00);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v54 - 8) + 48))(v8, 1, v54) == 1) {
        goto LABEL_2;
      }
    }
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  sub_100370F30(v38, v71 & 1);
  unint64_t v40 = sub_10031F858(v31, v32);
  if ((v39 & 1) != (v41 & 1))
  {
LABEL_24:
    sub_10096D3C0();
    __break(1u);
    goto LABEL_25;
  }
  unint64_t v35 = v40;
  if ((v39 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_10:
  uint64_t v42 = swift_allocError();
  swift_willThrow();
  uint64_t v99 = v42;
  uint64_t v81 = v42;
  swift_errorRetain();
  sub_10002B7CC((uint64_t *)&unk_100ACB6B0);
  if ((swift_dynamicCast() & 1) == 0)
  {
    sub_100130288(v72, v73, v11);
    sub_100130288(v76, v75, v74);
    swift_release();
    swift_bridgeObjectRelease();
    sub_10002B770(v19, &qword_100ACCB10);
    uint64_t v43 = v90;
    uint64_t v44 = v91;
    char v45 = v92;
    uint64_t v46 = v94;
    uint64_t v47 = v95;
    char v48 = v96;
    sub_100130288(v87, v88, v89);
    sub_100130288(v43, v44, v45);
    swift_bridgeObjectRelease();
    sub_100130288(v46, v47, v48);
    swift_release();
    return swift_errorRelease();
  }
LABEL_25:
  uint64_t v83 = 0;
  unint64_t v84 = 0xE000000000000000;
  sub_10096CBD0(30);
  v100._object = (void *)0x8000000100996AD0;
  v100._countAndFlagsBits = 0xD00000000000001BLL;
  sub_10096BDC0(v100);
  sub_10096CDF0();
  v101._countAndFlagsBits = 39;
  v101._object = (void *)0xE100000000000000;
  sub_10096BDC0(v101);
  uint64_t result = sub_10096CE20();
  __break(1u);
  return result;
}

uint64_t sub_10012CD88(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, int a6, char a7, uint64_t a8)
{
  if (a4 < 0)
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
  }
  else
  {
    if (a4)
    {
      uint64_t v8 = 0;
      char v9 = a7 & 1;
      char v10 = (a3 | a7) & 1;
      uint64_t v11 = a8 + 64;
      unint64_t v12 = result;
      int v13 = a2;
      while (1)
      {
        if (v10) {
          goto LABEL_31;
        }
        if (v13 != a6)
        {
          __break(1u);
LABEL_27:
          __break(1u);
LABEL_28:
          __break(1u);
LABEL_29:
          __break(1u);
          goto LABEL_30;
        }
        if (v12 == a5)
        {
          unint64_t v12 = 0;
          goto LABEL_25;
        }
        if ((v12 & 0x8000000000000000) != 0) {
          goto LABEL_27;
        }
        uint64_t v14 = 1 << *(unsigned char *)(a8 + 32);
        if ((uint64_t)v12 >= v14) {
          goto LABEL_27;
        }
        unint64_t v15 = v12 >> 6;
        unint64_t v16 = *(void *)(v11 + 8 * (v12 >> 6));
        if (((v16 >> v12) & 1) == 0) {
          goto LABEL_28;
        }
        if (*(_DWORD *)(a8 + 36) != a6) {
          goto LABEL_29;
        }
        unint64_t v17 = v16 & (-2 << (v12 & 0x3F));
        if (v17)
        {
          unint64_t v12 = __clz(__rbit64(v17)) | v12 & 0xFFFFFFFFFFFFFFC0;
        }
        else
        {
          unint64_t v18 = v15 + 1;
          unint64_t v19 = (unint64_t)(v14 + 63) >> 6;
          if (v15 + 1 >= v19) {
            goto LABEL_22;
          }
          unint64_t v20 = *(void *)(v11 + 8 * v18);
          if (!v20)
          {
            unint64_t v18 = v15 + 2;
            if (v15 + 2 >= v19) {
              goto LABEL_22;
            }
            unint64_t v20 = *(void *)(v11 + 8 * v18);
            if (!v20)
            {
              while (v19 - 3 != v15)
              {
                unint64_t v20 = *(void *)(a8 + 88 + 8 * v15++);
                if (v20)
                {
                  unint64_t v18 = v15 + 2;
                  goto LABEL_16;
                }
              }
LABEL_22:
              unint64_t v12 = 1 << *(unsigned char *)(a8 + 32);
              goto LABEL_5;
            }
          }
LABEL_16:
          unint64_t v12 = __clz(__rbit64(v20)) + (v18 << 6);
        }
LABEL_5:
        ++v8;
        int v13 = a6;
        char v10 = v9;
        if (v8 == a4) {
          goto LABEL_25;
        }
      }
    }
    unint64_t v12 = result;
LABEL_25:
    sub_1001302C0(result, a2, a3 & 1);
    return v12;
  }
  return result;
}

void *sub_10012CF24(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t result = _swiftEmptyArrayStorage;
  if (!v3) {
    return result;
  }
  sub_10096CCE0();
  uint64_t result = (void *)sub_100929CF0(a1);
  uint64_t v6 = (uint64_t)result;
  uint64_t v8 = v7;
  char v10 = v9 & 1;
  uint64_t v11 = *(void **)(a2 + OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_providerDomainID);
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << *(unsigned char *)(a1 + 32))
  {
    if (((*(void *)(a1 + 56 + (((unint64_t)v6 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
      goto LABEL_34;
    }
    if (*(_DWORD *)(a1 + 36) != v8) {
      goto LABEL_35;
    }
    uint64_t v17 = *(void *)(a1 + 48) + 16 * v6;
    uint64_t v18 = *(void *)v17;
    int v19 = *(unsigned __int8 *)(v17 + 8);
    if (v19 == 2 && v18 == 0)
    {
      id v12 = v11;
      NSFileProviderItemIdentifier v13 = NSFileProviderRootContainerItemIdentifier;
    }
    else
    {
      if (v19 != 2 || v18 != 1)
      {
        if (v19)
        {
          if (v19 == 1)
          {
            uint64_t v28 = 0x284449656C6966;
            unint64_t v29 = 0xE700000000000000;
            id v22 = v11;
            goto LABEL_23;
          }
          id v27 = v11;
          if (v18) {
            v25._countAndFlagsBits = 0x6873617274;
          }
          else {
            v25._countAndFlagsBits = 1953460082;
          }
          if (v18) {
            uint64_t v26 = (void *)0xE500000000000000;
          }
          else {
            uint64_t v26 = (void *)0xE400000000000000;
          }
        }
        else
        {
          uint64_t v28 = 0x284449636F64;
          unint64_t v29 = 0xE600000000000000;
          id v24 = v11;
LABEL_23:
          v30._countAndFlagsBits = sub_10096D220();
          sub_10096BDC0(v30);
          swift_bridgeObjectRelease();
          v31._countAndFlagsBits = 41;
          v31._object = (void *)0xE100000000000000;
          sub_10096BDC0(v31);
          v25._countAndFlagsBits = v28;
          uint64_t v26 = (void *)v29;
        }
        v25._object = v26;
        sub_10096BDC0(v25);
        swift_bridgeObjectRelease();
        uint64_t v14 = (NSString *)sub_10096BC00();
        swift_bridgeObjectRelease();
        goto LABEL_5;
      }
      id v23 = v11;
      NSFileProviderItemIdentifier v13 = NSFileProviderTrashContainerItemIdentifier;
    }
    uint64_t v14 = v13;
LABEL_5:
    [objc_allocWithZone((Class)FPItemID) initWithProviderDomainID:v11 itemIdentifier:v14];

    sub_10096CCB0();
    sub_10096CCF0();
    sub_10096CD00();
    sub_10096CCC0();
    uint64_t result = (void *)sub_100929D94(v6, v8, v10 & 1, a1);
    uint64_t v6 = (uint64_t)result;
    uint64_t v8 = v15;
    char v10 = v16 & 1;
    if (!--v3)
    {
      sub_100130288((uint64_t)result, v15, v16 & 1);
      return _swiftEmptyArrayStorage;
    }
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
  return result;
}

uint64_t sub_10012D224(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v45 = a2;
  unint64_t v46 = a3;
  uint64_t v52 = sub_10002B7CC(&qword_100ACDA10);
  uint64_t v6 = __chkstk_darwin(v52);
  uint64_t v44 = (uint64_t)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v51 = (char *)&v41 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v50 = (uint64_t *)((char *)&v41 - v11);
  __chkstk_darwin(v10);
  NSFileProviderItemIdentifier v13 = (char *)&v41 - v12;
  unint64_t v59 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v15 = *(void *)a1;
  uint64_t v14 = *(void *)(a1 + 8);
  char v16 = *(unsigned char *)(a1 + 16);
  uint64_t v17 = *(void *)(a1 + 24);
  uint64_t v18 = *(void *)(a1 + 32);
  int v53 = *(unsigned __int8 *)(a1 + 40);
  uint64_t v19 = *(void *)(a1 + 48);
  sub_1001302C0(v15, v14, v16);
  uint64_t v54 = v14;
  uint64_t v55 = v15;
  sub_1001302C0(v15, v14, v16);
  sub_1001302C0(v17, v18, v53);
  uint64_t result = swift_bridgeObjectRetain();
  if (v16 & 1) != 0 || (v53) {
    goto LABEL_45;
  }
  uint64_t v57 = v19 + 64;
  uint64_t v42 = v17;
  uint64_t v43 = v18;
  uint64_t v41 = v19 + 80;
  uint64_t v21 = v54;
  int64_t v22 = v55;
  char v48 = v13;
  uint64_t v49 = v19;
  uint64_t v47 = v18;
  while (v21 == v18)
  {
    if (v22 == v17)
    {
      sub_100130288(v55, v54, 0);
      sub_100130288(v17, v18, 0);
      swift_bridgeObjectRelease();
      sub_100130288(v17, v21, 0);
      return v59;
    }
    if (v22 < v55) {
      goto LABEL_36;
    }
    if (v18 != v54) {
      goto LABEL_37;
    }
    if (v22 >= v17) {
      goto LABEL_38;
    }
    if (v22 < 0 || v22 >= 1 << *(unsigned char *)(v19 + 32)) {
      goto LABEL_39;
    }
    unint64_t v23 = (unint64_t)v22 >> 6;
    if ((*(void *)(v57 + 8 * ((unint64_t)v22 >> 6)) & (1 << v22)) == 0) {
      goto LABEL_40;
    }
    if (*(_DWORD *)(v19 + 36) != v18) {
      goto LABEL_41;
    }
    uint64_t v56 = v4;
    uint64_t v24 = (uint64_t)v51;
    uint64_t v25 = v52;
    uint64_t v26 = (uint64_t)&v51[*(int *)(v52 + 48)];
    uint64_t v27 = *(void *)(v19 + 56);
    uint64_t v28 = *(void *)(v19 + 48) + 16 * v22;
    uint64_t v29 = *(void *)v28;
    char v30 = *(unsigned char *)(v28 + 8);
    uint64_t v31 = sub_10002B7CC(&qword_100ACCB10);
    sub_10002B70C(v27 + *(void *)(*(void *)(v31 - 8) + 72) * v22, v26, &qword_100ACCB10);
    *(void *)uint64_t v24 = v29;
    *(unsigned char *)(v24 + 8) = v30;
    uint64_t v32 = (uint64_t)v50;
    *uint64_t v50 = v29;
    *(unsigned char *)(v32 + 8) = v30;
    uint64_t v33 = (uint64_t)v48;
    uint64_t v19 = v49;
    sub_10002B70C(v26, v32 + *(int *)(v25 + 48), &qword_100ACCB10);
    sub_10002B770(v24, &qword_100ACDA10);
    uint64_t result = sub_10001AE98(v32, v33, &qword_100ACDA10);
    uint64_t v34 = 1 << *(unsigned char *)(v19 + 32);
    if (v22 >= v34) {
      goto LABEL_42;
    }
    uint64_t v35 = *(void *)(v57 + 8 * v23);
    if ((v35 & (1 << v22)) == 0) {
      goto LABEL_43;
    }
    uint64_t v18 = v47;
    if (*(_DWORD *)(v19 + 36) != v47) {
      goto LABEL_44;
    }
    unint64_t v36 = v35 & (-2 << (v22 & 0x3F));
    if (v36)
    {
      int64_t v22 = __clz(__rbit64(v36)) | v22 & 0xFFFFFFFFFFFFFFC0;
      uint64_t v4 = v56;
LABEL_27:
      uint64_t v17 = v42;
      goto LABEL_28;
    }
    unint64_t v37 = v23 + 1;
    unint64_t v38 = (unint64_t)(v34 + 63) >> 6;
    uint64_t v4 = v56;
    if (v23 + 1 >= v38)
    {
      int64_t v22 = 1 << *(unsigned char *)(v19 + 32);
      goto LABEL_27;
    }
    unint64_t v39 = *(void *)(v57 + 8 * v37);
    uint64_t v17 = v42;
    if (v39)
    {
LABEL_25:
      int64_t v22 = __clz(__rbit64(v39)) + (v37 << 6);
    }
    else
    {
      while (v38 - 2 != v23)
      {
        unint64_t v39 = *(void *)(v41 + 8 * v23++);
        if (v39)
        {
          unint64_t v37 = v23 + 1;
          goto LABEL_25;
        }
      }
      int64_t v22 = 1 << *(unsigned char *)(v19 + 32);
    }
LABEL_28:
    uint64_t v40 = v44;
    sub_10001AE98(v33, v44, &qword_100ACDA10);
    sub_1005A321C(v40, v45, v46, &v58);
    uint64_t result = sub_10002B770(v40, &qword_100ACDA10);
    if (v4)
    {
      sub_100130288(v55, v54, 0);
      sub_100130288(v17, v18, 0);
      swift_bridgeObjectRelease();
      sub_100130288(v22, v43, 0);
      return swift_bridgeObjectRelease();
    }
    if (v58)
    {
      sub_10096C070();
      if (*(void *)((v59 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v59 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        sub_10096C0F0();
      }
      sub_10096C150();
      uint64_t result = sub_10096C0C0();
    }
    uint64_t v21 = v43;
    if (v53) {
      goto LABEL_45;
    }
  }
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
  return result;
}

uint64_t sub_10012D6E8()
{
  uint64_t v0 = sub_10096AF60();
  uint64_t v2 = v0;
  unint64_t v3 = v1;
  switch(v1 >> 62)
  {
    case 1uLL:
      LODWORD(v4) = HIDWORD(v0) - v0;
      if (__OFSUB__(HIDWORD(v0), v0))
      {
        __break(1u);
LABEL_11:
        __break(1u);
      }
      uint64_t v4 = (int)v4;
LABEL_6:
      if (v4 == 8)
      {
        uint64_t v9 = 0;
        sub_100121880((uint64_t)&v9, 1, 0, 0, 1, v0, v1);
        sub_10001E9C0(v2, v3);
        return v9;
      }
      else
      {
LABEL_8:
        sub_10001E9C0(v0, v1);
        return 0;
      }
    case 2uLL:
      uint64_t v6 = *(void *)(v0 + 16);
      uint64_t v5 = *(void *)(v0 + 24);
      BOOL v7 = __OFSUB__(v5, v6);
      uint64_t v4 = v5 - v6;
      if (!v7) {
        goto LABEL_6;
      }
      goto LABEL_11;
    case 3uLL:
      goto LABEL_8;
    default:
      uint64_t v4 = BYTE6(v1);
      goto LABEL_6;
  }
}

void sub_10012D800(void *a1, void (**a2)(void, void, void))
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a2;
  uint64_t v5 = OBJC_IVAR____TtC9libfssync14FPFSEnumerator_invalidated;
  _Block_copy(a2);
  if ((*((unsigned char *)a1 + v5) & 1) != 0 || (uint64_t Strong = swift_unknownObjectWeakLoadStrong()) == 0)
  {
    type metadata accessor for NSFileProviderError(0);
    sub_100042898((uint64_t)_swiftEmptyArrayStorage);
    sub_10002558C((unint64_t *)&unk_100ACAAB0, type metadata accessor for NSFileProviderError);
    sub_10096ABD0();
    uint64_t v11 = (void *)sub_10096ABE0();
    ((void (**)(void, void, void *))a2)[2](a2, 0, v11);
    swift_release();
  }
  else
  {
    BOOL v7 = (void *)Strong;
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = sub_100071780;
    *(void *)(v8 + 24) = v4;
    uint64_t v9 = (void *)swift_allocObject();
    v9[2] = sub_100071780;
    v9[3] = v4;
    v9[4] = a1;
    swift_retain_n();
    id v10 = a1;
    sub_10028F014((uint64_t)"currentSyncAnchor(completion:)", 30, 2, (void (*)(void *, id))sub_100130A44, v8, (uint64_t)sub_100130A74, (uint64_t)v9);
    swift_release();

    swift_release();
    swift_release();
  }
}

uint64_t sub_10012DA18(uint64_t a1)
{
  return sub_10026D23C(a1, *(uint64_t (**)(void, void, void, void))(v1 + 16));
}

id sub_10012DA24(uint64_t a1)
{
  return sub_10021C084(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)(a1 + 24), *(void (**)(long long *))(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10012DA40(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = *(uint64_t (**)(void *))(v4 + 16);
  v7[0] = a1;
  v7[1] = a2;
  v7[2] = a3;
  char v8 = a4 & 1;
  return v5(v7);
}

uint64_t sub_10012DA84()
{
  uint64_t v1 = *(void *)(sub_10002B7CC((uint64_t *)&unk_100AD0CF0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  swift_release();
  swift_release();
  uint64_t v5 = v0 + v3;
  uint64_t v6 = (int *)sub_10002B7CC(&qword_100ACCB10);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((void *)v6 - 1) + 48))(v0 + v3, 1, v6))
  {
    uint64_t v20 = v4;
    uint64_t v21 = (v2 + 32) & ~v2;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v7 = v5 + v6[12];
    char v8 = (int *)type metadata accessor for ItemMetadata();
    uint64_t v9 = v7 + v8[7];
    uint64_t v10 = sub_10096B0E0();
    uint64_t v11 = *(void *)(v10 - 8);
    uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v12(v9, v10);
    v12(v7 + v8[8], v10);
    swift_bridgeObjectRelease();
    uint64_t v13 = v7 + v8[29];
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v13, 1, v10)) {
      v12(v13, v10);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v14 = (uint64_t *)(v7 + v8[33]);
    unint64_t v15 = v14[1];
    if (v15 >> 60 != 15) {
      sub_10001E9C0(*v14, v15);
    }
    swift_bridgeObjectRelease();
    uint64_t v16 = v5 + v6[13];
    uint64_t v4 = v20;
    if (*(void *)(v16 + 16) != 1)
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*(void *)(v16 + 192))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    sub_1000CF144(*(void *)(v5 + v6[17]), *(void *)(v5 + v6[17] + 8));
    uint64_t v3 = v21;
  }
  unint64_t v17 = (((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = (v17 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release();

  swift_release();
  swift_release();
  objc_release(*(id *)(v0
                     + ((((((((v18 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
                       + 15) & 0xFFFFFFFFFFFFFFF8)));

  return swift_deallocObject();
}

void sub_10012DE04()
{
  uint64_t v1 = *(void *)(sub_10002B7CC((uint64_t *)&unk_100AD0CF0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v4 = (v3 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  sub_1001278C8(*(void *)(v0 + 16), *(void *)(v0 + 24), v0 + v2, *(int **)(v0 + v3), *(unsigned char **)(v0 + v4), *(void **)(v0 + v5), *(void *)(v0 + v6), *(void **)(v0 + v7), *(void *)(v0 + v7 + 8), *(void *)(v0 + ((v7 + 23) & 0xFFFFFFFFFFFFFFF8)), *(void **)(v0 + ((((v7 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_10012DEF8(uint64_t a1)
{
  return sub_1000CE3BC(a1, *(void (**)(void *))(v1 + 16));
}

uint64_t sub_10012DF00(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002B7CC((uint64_t *)&unk_100AD0CF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10012DF68()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10012DFB8(uint64_t a1)
{
  return sub_100128B7C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void (**)(void *, void, void, void, id))(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56));
}

void sub_10012DFC8(uint64_t a1, const void *a2)
{
  sub_10012446C(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(void **)(v2 + 48));
}

uint64_t sub_10012DFEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100124994(a1, a2, a3, a4, *(void *)(v4 + 16), *(void *)(v4 + 24), *(unsigned __int8 *)(v4 + 32), *(void *)(v4 + 40), *(void *)(v4 + 48), *(void *)(v4 + 56), *(const void **)(v4 + 64), *(void **)(v4 + 72));
}

uint64_t sub_10012E028(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, const void *a5)
{
  uint64_t v108 = a3;
  uint64_t v106 = a2;
  uint64_t v8 = sub_10002B7CC((uint64_t *)&unk_100AD0CF0);
  uint64_t v104 = *(void *)(v8 - 8);
  __chkstk_darwin(v8 - 8);
  uint64_t v105 = v9;
  uint64_t v107 = (uint64_t)v99 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10096B480();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  int v102 = v13;
  unint64_t v103 = (void (*)(void))((char *)v99 - (((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v12);
  uint64_t v115 = (char *)v99 - v14;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = a5;
  uint64_t v110 = (uint64_t)a5;
  _Block_copy(a5);
  if (qword_100ACC170 != -1) {
    swift_once();
  }
  id v16 = (id)qword_100B0B4E0;
  uint64_t v111 = a1;
  uint64_t v17 = sub_10096AF60();
  unint64_t v19 = v18;
  uint64_t v20 = sub_10096AF60();
  unint64_t v22 = v21;
  char v23 = _s9libfssync17FPItemVersionDataV23__derived_struct_equalsySbAC_ACtFZ_0(v17, v19, v20, v21);
  sub_10001E9C0(v20, v22);
  sub_10001E9C0(v17, v19);

  uint64_t v114 = v15;
  if (v23)
  {
    uint64_t v24 = 0;
  }
  else
  {
    if (qword_100ACC168 != -1) {
      swift_once();
    }
    id v25 = (id)qword_100B0B4D8;
    uint64_t v26 = sub_10096AF60();
    unint64_t v28 = v27;
    uint64_t v29 = sub_10096AF60();
    unint64_t v31 = v30;
    char v32 = _s9libfssync17FPItemVersionDataV23__derived_struct_equalsySbAC_ACtFZ_0(v26, v28, v29, v30);
    sub_10001E9C0(v29, v31);
    sub_10001E9C0(v26, v28);

    if (v32)
    {
      uint64_t v24 = 0;
    }
    else
    {
      sub_10096AA90();
      swift_allocObject();
      sub_10096AA80();
      type metadata accessor for PaginatedContinuation();
      uint64_t v33 = sub_10096AF60();
      unint64_t v35 = v34;
      sub_10002558C((unint64_t *)&unk_100ACD960, (void (*)(uint64_t))type metadata accessor for PaginatedContinuation);
      sub_10096AA70();
      swift_release();
      sub_10001E9C0(v33, v35);
      uint64_t v24 = v117;
    }
  }
  unint64_t v36 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
  v36(v115, &a4[OBJC_IVAR____TtC9libfssync14FPFSEnumerator_logger], v10);
  swift_retain_n();
  unint64_t v37 = a4;
  unint64_t v38 = sub_10096B470();
  os_log_type_t v39 = sub_10096C5A0();
  BOOL v40 = os_log_type_enabled(v38, v39);
  uint64_t v112 = v10;
  uint64_t v113 = v11;
  if (v40)
  {
    v99[1] = v11 + 16;
    Swift::String v101 = v36;
    uint64_t v41 = swift_slowAlloc();
    uint64_t v42 = (void *)swift_slowAlloc();
    uint64_t v100 = swift_slowAlloc();
    v119[0] = v100;
    *(_DWORD *)uint64_t v41 = 138412546;
    uint64_t v117 = (uint64_t)v37;
    uint64_t v43 = v24;
    uint64_t v44 = v37;
    v99[2] = &v118;
    sub_10096C8C0();
    v99[3] = v42;
    *uint64_t v42 = v37;

    uint64_t v24 = v43;
    *(_WORD *)(v41 + 12) = 2080;
    if (v43)
    {
      uint64_t v117 = 979789423;
      unint64_t v118 = 0xE400000000000000;
      uint64_t v116 = *(void *)(v43 + 16);
      swift_retain();
      v120._countAndFlagsBits = sub_10096D220();
      sub_10096BDC0(v120);
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v45 = v117;
      unint64_t v46 = v118;
    }
    else
    {
      uint64_t v45 = 0x6C616974696E693CLL;
      unint64_t v46 = 0xE90000000000003ELL;
    }
    uint64_t v117 = sub_100719D44(v45, v46, v119);
    sub_10096C8C0();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "📖  %@: enumerating page %s", (uint8_t *)v41, 0x16u);
    sub_10002B7CC((uint64_t *)&unk_100ACCBC0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v11 = v113;
    uint64_t v10 = v112;
    unint64_t v36 = v101;
  }
  else
  {
    swift_release_n();
  }
  if ((v37[OBJC_IVAR____TtC9libfssync14FPFSEnumerator_invalidated] & 1) != 0
    || (uint64_t Strong = swift_unknownObjectWeakLoadStrong()) == 0)
  {
    type metadata accessor for NSFileProviderError(0);
    v119[0] = -1002;
    sub_100042898((uint64_t)_swiftEmptyArrayStorage);
    sub_10002558C((unint64_t *)&unk_100ACAAB0, type metadata accessor for NSFileProviderError);
    sub_10096ABD0();
    uint64_t v78 = (void *)v117;
    long long v79 = v37;
    swift_retain_n();
    id v80 = v78;
    uint64_t v81 = v79;
    id v82 = v80;
    uint64_t v83 = sub_10096B470();
    int v84 = sub_10096C5B0();
    if (os_log_type_enabled(v83, (os_log_type_t)v84))
    {
      LODWORD(v108) = v84;
      uint64_t v85 = swift_slowAlloc();
      char v86 = (void *)swift_slowAlloc();
      uint64_t v111 = swift_slowAlloc();
      v119[0] = v111;
      *(_DWORD *)uint64_t v85 = 138412802;
      uint64_t v109 = v24;
      uint64_t v117 = (uint64_t)v81;
      uint64_t v87 = v81;
      uint64_t v88 = v109;
      sub_10096C8C0();
      *char v86 = v81;

      *(_WORD *)(v85 + 12) = 2080;
      if (v88)
      {
        uint64_t v117 = 979789423;
        unint64_t v118 = 0xE400000000000000;
        uint64_t v116 = *(void *)(v88 + 16);
        swift_retain();
        v121._countAndFlagsBits = sub_10096D220();
        sub_10096BDC0(v121);
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t v89 = v117;
        unint64_t v90 = v118;
      }
      else
      {
        uint64_t v89 = 0x6C616974696E693CLL;
        unint64_t v90 = 0xE90000000000003ELL;
      }
      uint64_t v117 = sub_100719D44(v89, v90, v119);
      sub_10096C8C0();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v85 + 22) = 2112;
      uint64_t v117 = (uint64_t)v82;
      sub_10002558C((unint64_t *)&unk_100ACAA40, type metadata accessor for NSFileProviderError);
      id v91 = v82;
      if (sub_10096D240())
      {
      }
      else
      {
        swift_allocError();
        *char v92 = v117;
      }
      uint64_t v93 = (void *)sub_10096ABE0();
      swift_errorRelease();
      id v94 = objc_msgSend(v93, "fp_prettyDescription");

      uint64_t v117 = (uint64_t)v94;
      sub_10096C8C0();
      v86[1] = v94;

      _os_log_impl((void *)&_mh_execute_header, v83, (os_log_type_t)v108, "📖  %@: enumerating page %s failed: %@", (uint8_t *)v85, 0x20u);
      sub_10002B7CC((uint64_t *)&unk_100ACCBC0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v10 = v112;
    }
    else
    {

      swift_release_n();
    }
    sub_100011348(0, (unint64_t *)&unk_100ACD9F0);
    id v95 = v82;
    Class isa = sub_10096C080().super.isa;
    uint64_t v97 = (void *)sub_10096ABE0();
    (*(void (**)(uint64_t, Class, void, void, void, void *))(v110 + 16))(v110, isa, 0, 0, 0, v97);
    swift_release();

    (*(void (**)(char *, uint64_t))(v113 + 8))(v115, v10);
  }
  else
  {
    uint64_t v48 = Strong;
    Swift::String v101 = (void (*)(char *, char *, uint64_t))Strong;
    uint64_t v110 = swift_allocObject();
    uint64_t v49 = v103;
    v36((char *)v103, v115, v10);
    uint64_t v50 = *(unsigned __int8 *)(v11 + 80);
    uint64_t v51 = v24;
    uint64_t v109 = v24;
    uint64_t v52 = (v50 + 24) & ~v50;
    unint64_t v53 = ((unint64_t)v102 + v52 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v54 = (v53 + 15) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v55 = swift_allocObject();
    uint64_t v56 = v11;
    uint64_t v57 = v55;
    *(void *)(v55 + 16) = v48;
    (*(void (**)(uint64_t, void (*)(void), uint64_t))(v56 + 32))(v55 + v52, v49, v10);
    *(void *)(v57 + v53) = v37;
    *(void *)(v57 + v54) = v51;
    uint64_t v58 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v57 + ((v54 + 15) & 0xFFFFFFFFFFFFFFF8));
    int v102 = sub_100130404;
    unint64_t v59 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v114;
    void *v58 = sub_100130404;
    v58[1] = v59;
    unint64_t v103 = (void (*)(void))sub_10012CF18;
    uint64_t v60 = v110;
    *(void *)(v110 + 16) = sub_10012CF18;
    *(void *)(v60 + 24) = v57;
    uint64_t v100 = (uint64_t)v37;
    uint64_t v61 = v107;
    sub_10002B70C(v106, v107, (uint64_t *)&unk_100AD0CF0);
    unint64_t v62 = (*(unsigned __int8 *)(v104 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v104 + 80);
    unint64_t v63 = (v105 + v62 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v64 = (v63 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v65 = (v64 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v66 = (v65 + 15) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v67 = swift_allocObject();
    *(void *)(v67 + 16) = v60;
    *(void *)(v67 + 24) = v109;
    sub_10001AE98(v61, v67 + v62, (uint64_t *)&unk_100AD0CF0);
    uint64_t v68 = (void *)v100;
    *(void *)(v67 + v63) = v100;
    uint64_t v69 = (void *)v111;
    *(void *)(v67 + v64) = v111;
    *(void *)(v67 + v65) = v108;
    uint64_t v70 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v67 + v66);
    int v71 = v101;
    uint64_t v72 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v114;
    *uint64_t v70 = v102;
    v70[1] = v72;
    *(void *)(v67 + ((v66 + 23) & 0xFFFFFFFFFFFFFFF8)) = v71;
    id v73 = v68;
    swift_retain_n();
    swift_retain_n();
    int v74 = v71;
    swift_retain_n();
    id v75 = v73;
    uint64_t v76 = v74;
    swift_retain();
    id v77 = v69;
    sub_10032B3A8((uint64_t)"enumerateItems(fromPage:selfItem:suggestedPageSize:reply:)", 58, 2, (uint64_t)sub_10012CF20, v67, v76, v103, v57);
    swift_release();

    swift_release();
    swift_release_n();
    (*(void (**)(char *, uint64_t))(v113 + 8))(v115, v112);
    swift_release();
  }
  return swift_release();
}

uint64_t sub_10012EE0C(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void), void (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, uint64_t))
{
  uint64_t v4 = *(void *)(a1 + 600);
  uint64_t v5 = *(void *)(a1 + 608);
  uint64_t v6 = *(void *)(a1 + 616);
  uint64_t v7 = *(void *)(a1 + 624);
  uint64_t v8 = *(void *)(a1 + 632);
  uint64_t v9 = *(void *)(a1 + 640);
  uint64_t v10 = *(void *)(a1 + 648);
  uint64_t v11 = *(void *)(a1 + 656);
  long long v39 = *(_OWORD *)(a1 + 680);
  long long v40 = *(_OWORD *)(a1 + 664);
  long long v37 = *(_OWORD *)(a1 + 712);
  long long v38 = *(_OWORD *)(a1 + 696);
  long long v35 = *(_OWORD *)(a1 + 744);
  long long v36 = *(_OWORD *)(a1 + 728);
  long long v33 = *(_OWORD *)(a1 + 776);
  long long v34 = *(_OWORD *)(a1 + 760);
  long long v32 = *(_OWORD *)(a1 + 792);
  long long v30 = *(_OWORD *)(a1 + 824);
  long long v31 = *(_OWORD *)(a1 + 808);
  uint64_t v12 = *(void *)(a1 + 840);
  long long v28 = *(_OWORD *)(a1 + 448);
  long long v29 = *(_OWORD *)(a1 + 464);
  long long v26 = *(_OWORD *)(a1 + 416);
  long long v27 = *(_OWORD *)(a1 + 432);
  long long v24 = *(_OWORD *)(a1 + 384);
  long long v25 = *(_OWORD *)(a1 + 400);
  long long v22 = *(_OWORD *)(a1 + 352);
  long long v23 = *(_OWORD *)(a1 + 368);
  long long v20 = *(_OWORD *)(a1 + 320);
  long long v21 = *(_OWORD *)(a1 + 336);
  long long v18 = *(_OWORD *)(a1 + 288);
  long long v19 = *(_OWORD *)(a1 + 304);
  long long v16 = *(_OWORD *)(a1 + 256);
  long long v17 = *(_OWORD *)(a1 + 272);
  long long v14 = *(_OWORD *)(a1 + 224);
  long long v15 = *(_OWORD *)(a1 + 240);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    *(void *)(a1 + 208),
    *(void *)(a1 + 216),
    v14,
    *((void *)&v14 + 1),
    v15,
    *((void *)&v15 + 1),
    v16,
    *((void *)&v16 + 1),
    v17,
    *((void *)&v17 + 1),
    v18,
    *((void *)&v18 + 1),
    v19,
    *((void *)&v19 + 1),
    v20,
    *((void *)&v20 + 1),
    v21,
    *((void *)&v21 + 1),
    v22,
    *((void *)&v22 + 1),
    v23,
    *((void *)&v23 + 1),
    v24,
    *((void *)&v24 + 1),
    v25,
    *((void *)&v25 + 1),
    v26,
    *((void *)&v26 + 1),
    v27,
    *((void *)&v27 + 1),
    v28,
    *((void *)&v28 + 1),
    v29,
    *((void *)&v29 + 1),
    *(void *)(a1 + 480),
    *(void *)(a1 + 488));
  a3(v4, v5, v6, v7, v8, v9, v10, v11, v40, *((void *)&v40 + 1), v39, *((void *)&v39 + 1), v38, *((void *)&v38 + 1), v37, *((void *)&v37 + 1), v36, *((void *)&v36 + 1), v35,
    *((void *)&v35 + 1),
    v34,
    *((void *)&v34 + 1),
    v33,
    *((void *)&v33 + 1),
    v32,
    *((void *)&v32 + 1),
    v31,
    *((void *)&v31 + 1),
    v30,
    *((void *)&v30 + 1),
    v12);
  return a1;
}

void sub_10012EFE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,unint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,unint64_t a36,uint64_t a37,uint64_t a38,unint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,unint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  if (a57)
  {
    sub_1000D32B4(a6, a7, a8, a9, a10, a11, a12, a13, a14);
    sub_1000D31F8(a19, a20, a21);
    sub_1000D35D8(a22, a23, a24);

    sub_1000D35F4(a35, a36, a37, a38, a39);
    sub_1000D31F8(a44, a45, a46);
    sub_1000D35D8(a47, a48, a49);
    swift_bridgeObjectRelease();
  }
}

void *sub_10012F1D0(void *a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17], a1[18],
    a1[19],
    a1[20],
    a1[21],
    a1[22],
    a1[23],
    a1[24],
    a1[25],
    a1[26],
    a1[27],
    a1[28],
    a1[29],
    a1[30]);
  return a1;
}

uint64_t sub_10012F254()
{
  uint64_t v1 = sub_10096B480();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 41) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_10012F370(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned char *)(v0 + 40));
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10012F370(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4)
  {
    return swift_errorRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return swift_release();
  }
}

void sub_10012F3BC()
{
  uint64_t v1 = *(void *)(sub_10096B480() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 41) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_100126B30(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned char *)(v0 + 40), v0 + v2, *(void **)(v0 + v3), *(void *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8)), *(void (**)(void, void, void, void, void))(v0+ ((((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_10012F470(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4)
  {
    return swift_errorRetain();
  }
  else
  {
    swift_retain();
    return swift_bridgeObjectRetain();
  }
}

uint64_t sub_10012F4D0()
{
  return swift_deallocObject();
}

void sub_10012F508()
{
  sub_1002C75B0(*(void **)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10012F510()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

void sub_10012F548(void *a1)
{
}

uint64_t sub_10012F550()
{
  _Block_release(*(const void **)(v0 + 16));

  return swift_deallocObject();
}

uint64_t sub_10012F588()
{
  return sub_10061C7C8(*(void *)(v0 + 16));
}

void sub_10012F590(uint64_t a1, unint64_t a2, uint64_t a3, char *a4, void (**a5)(void, void, void, void, void, void, void))
{
  unint64_t v65 = a4;
  uint64_t v61 = a3;
  uint64_t v66 = sub_10096B480();
  uint64_t v8 = *(void *)(v66 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  uint64_t v10 = __chkstk_darwin(v66);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v56 - v11;
  uint64_t v67 = swift_allocObject();
  *(void *)(v67 + 16) = a5;
  _Block_copy(a5);
  Class isa = sub_10096AF20().super.isa;
  uint64_t v14 = sub_10012D6E8();
  char v16 = v15;

  if (v16)
  {
    type metadata accessor for NSFileProviderError(0);
    uint64_t v68 = -1002;
    sub_100042898((uint64_t)_swiftEmptyArrayStorage);
    sub_10002558C((unint64_t *)&unk_100ACAAB0, type metadata accessor for NSFileProviderError);
    sub_10096ABD0();
    long long v28 = (void *)v69[0];
    sub_100011348(0, (unint64_t *)&unk_100ACD9F0);
    Class v29 = sub_10096C080().super.isa;
    sub_100011348(0, (unint64_t *)&unk_100ACEC40);
    Class v30 = sub_10096C080().super.isa;
    long long v31 = (void *)sub_10096ABE0();
    ((void (**)(void, Class, Class, void, void, void, void *))a5)[2](a5, v29, v30, 0, 0, 0, v31);
    swift_release();
  }
  else
  {
    uint64_t v62 = v14;
    uint64_t v59 = v9;
    uint64_t v60 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v57 = a1;
    long long v17 = v65;
    uint64_t v18 = v66;
    uint64_t v64 = v8;
    long long v19 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
    v19(v12, &v65[OBJC_IVAR____TtC9libfssync14FPFSEnumerator_logger], v66);
    id v20 = v17;
    long long v21 = sub_10096B470();
    os_log_type_t v22 = sub_10096C5A0();
    int v23 = v22;
    BOOL v24 = os_log_type_enabled(v21, v22);
    unint64_t v63 = v12;
    unint64_t v58 = a2;
    if (v24)
    {
      uint64_t v25 = swift_slowAlloc();
      uint64_t v56 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v25 = 138412546;
      LODWORD(v65) = v23;
      v69[0] = v20;
      long long v26 = v19;
      id v27 = v20;
      sub_10096C8C0();
      void *v56 = v20;

      long long v19 = v26;
      *(_WORD *)(v25 + 12) = 2048;
      uint64_t v12 = v63;
      v69[0] = v62;
      sub_10096C8C0();
      _os_log_impl((void *)&_mh_execute_header, v21, (os_log_type_t)v65, "📖  %@: enumerating from change %llu", (uint8_t *)v25, 0x16u);
      sub_10002B7CC((uint64_t *)&unk_100ACCBC0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v32 = v59;
    long long v33 = v60;

    uint64_t v34 = swift_allocObject();
    v19(v33, v12, v18);
    uint64_t v35 = v64;
    unint64_t v36 = (*(unsigned __int8 *)(v64 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v64 + 80);
    unint64_t v37 = (v32 + v36 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v38 = v18;
    unint64_t v39 = (v37 + 15) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v40 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v35 + 32))(v40 + v36, v33, v38);
    *(void *)(v40 + v37) = v20;
    *(void *)(v40 + v39) = v62;
    uint64_t v41 = (void (**)(uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t))(v40
                                                                                  + ((v39 + 15) & 0xFFFFFFFFFFFFFFF8));
    uint64_t v42 = v67;
    *uint64_t v41 = sub_10012FC40;
    v41[1] = (void (*)(uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t))v42;
    uint64_t v43 = sub_10012FD48;
    *(void *)(v34 + 16) = sub_10012FD48;
    *(void *)(v34 + 24) = v40;
    LOBYTE(v36) = *((unsigned char *)v20 + OBJC_IVAR____TtC9libfssync14FPFSEnumerator_invalidated);
    id v44 = v20;
    swift_retain();
    if ((v36 & 1) != 0
      || (uint64_t Strong = swift_unknownObjectWeakLoadStrong(),
          uint64_t v43 = *(void (**)(uint64_t))(v34 + 16),
          uint64_t v46 = *(void *)(v34 + 24),
          !Strong))
    {
      uint64_t v54 = v64;
      type metadata accessor for NSFileProviderError(0);
      v69[0] = -1002;
      swift_retain();
      sub_100042898((uint64_t)_swiftEmptyArrayStorage);
      sub_10002558C((unint64_t *)&unk_100ACAAB0, type metadata accessor for NSFileProviderError);
      sub_10096ABD0();
      uint64_t v55 = (void *)v68;
      v69[0] = v68;
      memset(&v69[1], 0, 24);
      char v70 = 1;
      v43((uint64_t)v69);
      swift_release();

      (*(void (**)(char *, uint64_t))(v54 + 8))(v63, v38);
    }
    else
    {
      uint64_t v47 = (void *)Strong;
      uint64_t v48 = swift_allocObject();
      *(void *)(v48 + 16) = v43;
      *(void *)(v48 + 24) = v46;
      uint64_t v49 = (void *)swift_allocObject();
      uint64_t v51 = v57;
      unint64_t v50 = v58;
      os_log_t v49[2] = v34;
      v49[3] = v51;
      v49[4] = v50;
      v49[5] = v44;
      v49[6] = v61;
      v49[7] = v47;
      id v52 = v44;
      swift_retain();
      swift_retain();
      sub_10001EBB0(v51, v50);
      id v53 = v47;
      sub_100294F24((uint64_t)"enumerateChanges(fromToken:suggestedBatchSize:reply:)", 53, 2, (void (*)(void **))sub_10012FE00, v48, (uint64_t)sub_10012FE54, (uint64_t)v49);

      swift_release();
      swift_release();
      (*(void (**)(char *, uint64_t))(v64 + 8))(v63, v38);
    }
    swift_release();
    swift_release();
  }
}

void sub_10012FC40(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_10061C6C4(a1, a2, a3, a4, a5, a6, *(void *)(v6 + 16));
}

uint64_t sub_10012FC48()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10012FC80()
{
  uint64_t v1 = sub_10096B480();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  swift_release();

  return swift_deallocObject();
}

void sub_10012FD48(uint64_t a1)
{
  uint64_t v3 = *(void *)(sub_10096B480() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void **)(v1 + v5);
  uint64_t v8 = *(void *)(v1 + v6);
  uint64_t v9 = *(void (**)(void, void, void, void, void, void))(v1 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8));

  sub_100129444(a1, v1 + v4, v7, v8, v9);
}

uint64_t sub_10012FE04()
{
  swift_release();
  sub_10001E9C0(*(void *)(v0 + 24), *(void *)(v0 + 32));

  return swift_deallocObject();
}

uint64_t sub_10012FE54(uint64_t a1)
{
  return sub_100129B3C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void **)(v1 + 40), *(void *)(v1 + 48), *(void **)(v1 + 56));
}

uint64_t sub_10012FE64(uint64_t a1)
{
  uint64_t v2 = *(uint64_t (**)(unsigned char *))(v1 + 16);
  sub_10001AE98(a1, (uint64_t)v4, &qword_100ACDA20);
  return v2(v4);
}

uint64_t sub_10012FEA8()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

id sub_10012FEE4(uint64_t a1)
{
  uint64_t v2 = *(void (**)(long long *))(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  sub_10001AE98(a1, (uint64_t)v5, &qword_100ACDA20);
  return sub_10021C20C((uint64_t)v5, v2, v3);
}

uint64_t sub_10012FF3C()
{
  sub_10001E9C0(*(void *)(v0 + 16), *(void *)(v0 + 24));

  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10012FF94()
{
  return sub_100129DBC(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void **)(v0 + 64));
}

uint64_t sub_10012FFBC(uint64_t a1)
{
  return sub_1000CE428(a1, *(void (**)(void *))(v1 + 16));
}

uint64_t sub_10012FFC4@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v4 = result;
    uint64_t v6 = sub_1007D7728(a2);
    uint64_t v8 = v7;
    char v10 = v9 & 1;
    uint64_t v11 = sub_10012CD88(v6, v7, v9 & 1, v4, 1 << *(unsigned char *)(a2 + 32), *(_DWORD *)(a2 + 36), 0, a2);
    uint64_t v13 = v12;
    char v15 = v14;
    int v16 = ~v14;
    sub_100130288(v6, v8, v10);
    if (v16)
    {
      BOOL v17 = (v15 & 1) == 0;
    }
    else
    {
      BOOL v17 = 1;
      uint64_t v11 = 1 << *(unsigned char *)(a2 + 32);
      uint64_t v13 = *(unsigned int *)(a2 + 36);
    }
    uint64_t result = sub_1007D7728(a2);
    if (!v17 || (v19 & 1) != 0) {
      goto LABEL_16;
    }
    if (v13 == v18)
    {
      if (v11 >= result)
      {
        v24[0] = result;
        v24[1] = v18;
        char v25 = 0;
        uint64_t v26 = v11;
        uint64_t v27 = v13;
        char v28 = 0;
        uint64_t result = sub_10012C450((uint64_t)v24, a2, (uint64_t)v22);
        long long v21 = v22[1];
        *(_OWORD *)a3 = v22[0];
        *(_OWORD *)(a3 + 16) = v21;
        *(_OWORD *)(a3 + 32) = v22[2];
        *(void *)(a3 + 48) = v23;
        return result;
      }
      goto LABEL_15;
    }
  }
  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

void *sub_100130108(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 16);
  sub_10096CCE0();
  if (v5)
  {
    uint64_t v6 = *(void *)(sub_10002B7CC(&qword_100ACCB10) - 8);
    uint64_t v7 = (void *)(a1 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)));
    uint64_t v8 = *(void *)(v6 + 72);
    swift_bridgeObjectRetain();
    do
    {
      sub_10074A578(v7, 0, 1, a3);
      sub_10096CCB0();
      sub_10096CCF0();
      sub_10096CD00();
      sub_10096CCC0();
      uint64_t v7 = (void *)((char *)v7 + v8);
      --v5;
    }
    while (v5);
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

uint64_t sub_100130254(uint64_t a1)
{
  return a1;
}

uint64_t sub_100130288(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100130294(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001302C0(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1001302CC(uint64_t a1)
{
  return a1;
}

uint64_t sub_100130300(uint64_t a1)
{
  return a1;
}

uint64_t sub_10013032C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a5)
  {
    return swift_errorRetain();
  }
  else
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
}

uint64_t sub_100130378(uint64_t a1, void (*a2)(void, void, void, void, void))
{
  return a1;
}

uint64_t sub_1001303B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a5)
  {
    return swift_errorRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

void sub_100130404(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_10061C550(a1, a2, a3, a4, a5, *(void *)(v5 + 16));
}

uint64_t sub_100130410()
{
  uint64_t v1 = sub_10096B480();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_100130524(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  int v8 = a4 & 1;
  uint64_t v9 = *(void *)(sub_10096B480() - 8);
  unint64_t v10 = (*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  unint64_t v11 = (*(void *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1001266EC(a1, a2, a3, v8, *(void *)(v4 + 16), v4 + v10, *(void **)(v4 + v11), *(void *)(v4 + ((v11 + 15) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v4 + ((((v11 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v4 + ((((v11 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_10013060C()
{
  uint64_t v1 = *(void *)(sub_10002B7CC((uint64_t *)&unk_100AD0CF0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  swift_release();
  swift_release();
  uint64_t v5 = v0 + v3;
  uint64_t v6 = (int *)sub_10002B7CC(&qword_100ACCB10);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((void *)v6 - 1) + 48))(v0 + v3, 1, v6))
  {
    uint64_t v20 = v4;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v7 = v5 + v6[12];
    int v8 = (int *)type metadata accessor for ItemMetadata();
    uint64_t v9 = v7 + v8[7];
    uint64_t v10 = sub_10096B0E0();
    uint64_t v11 = *(void *)(v10 - 8);
    uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v12(v9, v10);
    v12(v7 + v8[8], v10);
    swift_bridgeObjectRelease();
    uint64_t v13 = v7 + v8[29];
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v13, 1, v10)) {
      v12(v13, v10);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    char v14 = (uint64_t *)(v7 + v8[33]);
    unint64_t v15 = v14[1];
    if (v15 >> 60 != 15) {
      sub_10001E9C0(*v14, v15);
    }
    swift_bridgeObjectRelease();
    uint64_t v16 = v5 + v6[13];
    uint64_t v4 = v20;
    if (*(void *)(v16 + 16) != 1)
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*(void *)(v16 + 192))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    sub_1000CF144(*(void *)(v5 + v6[17]), *(void *)(v5 + v6[17] + 8));
    uint64_t v3 = (v2 + 32) & ~v2;
  }
  unint64_t v17 = (v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = (v17 + 15) & 0xFFFFFFFFFFFFFFF8;

  swift_release();
  objc_release(*(id *)(v0
                     + ((((((v18 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)));

  return swift_deallocObject();
}

uint64_t sub_10013096C(uint64_t a1)
{
  uint64_t v3 = *(void *)(sub_10002B7CC((uint64_t *)&unk_100AD0CF0) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  return sub_100127474(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), v1 + v4, *(void **)(v1 + v5), *(void **)(v1 + v6), *(void *)(v1 + v7), *(void *)(v1 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v1 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 8), *(void **)(v1 + ((((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_100130A44(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

uint64_t sub_100130A74(uint64_t a1)
{
  return sub_100123D94(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32));
}

uint64_t sub_100130A84()
{
  swift_release();

  return swift_deallocObject();
}

void sub_100130AC4()
{
  sub_100123EB8(*(void (**)(Class, void))(v0 + 16));
}

uint64_t sub_100130AE4(uint64_t a1)
{
  return sub_1002201E0(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

unint64_t sub_100130AEC()
{
  unint64_t result = qword_100ACDA50;
  if (!qword_100ACDA50)
  {
    sub_100011348(255, (unint64_t *)&qword_100ACBC10);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100ACDA50);
  }
  return result;
}

uint64_t sub_100130B54()
{
  return sub_10012208C();
}

uint64_t sub_100130BB8()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  unint64_t v10 = v1;
  uint64_t v2 = swift_getAssociatedTypeWitness();
  unint64_t v9 = v3;
  uint64_t v23 = AssociatedTypeWitness;
  uint64_t v24 = v2;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v26 = swift_getAssociatedConformanceWitness();
  uint64_t result = type metadata accessor for ReconciliationID();
  if (v5 <= 0x3F)
  {
    uint64_t v6 = *(void *)(result - 8) + 64;
    swift_getTupleTypeLayout2();
    char v28 = &v27;
    if (v10 > 0x3F)
    {
      return AssociatedTypeWitness;
    }
    else if (v9 > 0x3F)
    {
      return v2;
    }
    else
    {
      swift_getTupleTypeLayout3();
      Class v29 = &v22;
      swift_getTupleTypeLayout2();
      Class v30 = &v21;
      uint64_t v31 = v6;
      swift_getTupleTypeLayout2();
      uint64_t v32 = &v20;
      swift_getTupleTypeLayout2();
      long long v33 = &v19;
      swift_getTupleTypeLayout2();
      uint64_t v34 = &v18;
      swift_getTupleTypeLayout2();
      uint64_t v35 = &v17;
      uint64_t result = type metadata accessor for ReconciliationSideMutation();
      if (v7 <= 0x3F)
      {
        swift_getTupleTypeLayout2();
        unint64_t v36 = &v16;
        uint64_t result = type metadata accessor for ReconciliationSideMutation();
        if (v8 <= 0x3F)
        {
          swift_getTupleTypeLayout2();
          unint64_t v37 = &v15;
          swift_getTupleTypeLayout2();
          uint64_t v38 = &v14;
          swift_getTupleTypeLayout2();
          unint64_t v39 = &v13;
          swift_getTupleTypeLayout2();
          uint64_t v40 = &v12;
          swift_getTupleTypeLayout3();
          uint64_t v41 = &v11;
          swift_initEnumMetadataMultiPayload();
          return 0;
        }
      }
    }
  }
  return result;
}

void *sub_100130F60(void *a1, unsigned __int8 *a2)
{
  uint64_t v2 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v3 = *(void *)(v2 + 64);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v5 = *(void *)(v4 + 64);
  if (v5 <= v3) {
    unint64_t v6 = v3;
  }
  else {
    unint64_t v6 = *(void *)(v4 + 64);
  }
  unint64_t v7 = v6 + 1;
  uint64_t v479 = *(void *)(AssociatedTypeWitness - 8);
  int v8 = *(_DWORD *)(v4 + 80);
  unint64_t v470 = v3 + v8;
  unint64_t v471 = v5;
  uint64_t v474 = v8;
  unint64_t v9 = v5 + ((v3 + v474) & ~v474);
  unint64_t v495 = v6 + 2;
  if (v9 + 1 > v6 + 2) {
    unint64_t v10 = v9 + 1;
  }
  else {
    unint64_t v10 = v6 + 2;
  }
  if (v7 > v10) {
    unint64_t v10 = v6 + 1;
  }
  unint64_t v478 = v6;
  unint64_t v11 = v6 & 0xFFFFFFFFFFFFFFF8;
  if ((v6 & 0xFFFFFFFFFFFFFFF8) + 16 > v10) {
    unint64_t v10 = (v6 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  uint64_t v480 = v2;
  int v485 = *(_DWORD *)(v2 + 80) | v8;
  uint64_t v12 = (*(unsigned char *)(v2 + 80) | v8);
  uint64_t v472 = v7 + v12;
  uint64_t v487 = v12;
  unint64_t v13 = ((v7 + v12) & ~v12) + v7;
  if (v13 <= v10) {
    unint64_t v13 = v10;
  }
  unint64_t v496 = v13;
  uint64_t v14 = swift_getAssociatedTypeWitness();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v463 = v15;
  uint64_t v464 = v14;
  int v483 = *(_DWORD *)(v15 + 80);
  int v16 = v483 & 0xF8;
  uint64_t v17 = swift_getAssociatedTypeWitness();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(_DWORD *)(v18 + 80);
  uint64_t v20 = v16 | v19 | 7;
  unint64_t v494 = v7;
  unint64_t v21 = (v7 + v20) & ~v20;
  uint64_t v22 = *(void *)(v15 + 64) + 7;
  uint64_t v23 = *(void *)(v18 + 64) + 7;
  unint64_t v24 = (((v23 + ((v19 + 8 + (v22 & 0xFFFFFFFFFFFFFFF8)) & ~v19)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  if (v24 + 18 <= 0x39) {
    uint64_t v25 = 57;
  }
  else {
    uint64_t v25 = v24 + 18;
  }
  uint64_t v465 = *(void *)(v17 - 8);
  uint64_t v466 = v17;
  uint64_t v461 = v19 + 8;
  uint64_t v462 = *(void *)(v465 + 64) + 7;
  uint64_t v460 = *(void *)(v15 + 64) + 7;
  uint64_t v469 = v7 + v20;
  unint64_t v475 = (((v23 + ((v19 + 8 + (v22 & 0xFFFFFFFFFFFFFFF8)) & ~v19)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v476 = *(_DWORD *)(v18 + 80);
  int v481 = *(_DWORD *)(v18 + 80);
  if (v25 > 3) {
    goto LABEL_21;
  }
  unsigned int v26 = ((1 << (8 * v25)) | 2u) >> (8 * v25);
  unsigned int v27 = v26 | 0x10;
  BOOL v28 = HIWORD(v26) == 0;
  uint64_t v29 = 2;
  if (!v28) {
    uint64_t v29 = 4;
  }
  if (v27 <= 0xFF)
  {
LABEL_21:
    uint64_t v30 = v16 | v19 | 7;
    uint64_t v29 = 1;
  }
  else
  {
    uint64_t v30 = v16 | v19 | 7;
  }
  uint64_t v491 = v25;
  unint64_t v493 = v25 + v21;
  unint64_t v31 = v25 + v21 + v29;
  if (v31 <= v496) {
    unint64_t v32 = v496;
  }
  else {
    unint64_t v32 = v31;
  }
  uint64_t v33 = swift_getAssociatedTypeWitness();
  uint64_t v34 = *(void *)(v33 - 8);
  uint64_t v467 = v34;
  uint64_t v468 = v33;
  int v35 = *(_DWORD *)(v34 + 80);
  uint64_t v36 = swift_getAssociatedTypeWitness();
  uint64_t v37 = *(void *)(v36 - 8);
  uint64_t v38 = *(_DWORD *)(v37 + 80);
  uint64_t v39 = v35 & 0xF8 | v38 | 7;
  unint64_t v40 = (v494 + v39) & ~v39;
  uint64_t v41 = *(void *)(v34 + 64) + 7;
  uint64_t v42 = v38 + 8;
  uint64_t v43 = *(void *)(v37 + 64) + 7;
  unint64_t v44 = (((v43 + ((v38 + 8 + (v41 & 0xFFFFFFFFFFFFFFF8)) & ~v38)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  if (v44 + 18 <= 0x39) {
    uint64_t v45 = 57;
  }
  else {
    uint64_t v45 = v44 + 18;
  }
  if (v45 > 3) {
    goto LABEL_32;
  }
  unsigned int v46 = ((1 << (8 * v45)) | 2u) >> (8 * v45);
  unsigned int v47 = v46 | 0x10;
  BOOL v28 = HIWORD(v46) == 0;
  uint64_t v48 = 2;
  if (!v28) {
    uint64_t v48 = 4;
  }
  if (v47 <= 0xFF) {
LABEL_32:
  }
    uint64_t v48 = 1;
  uint64_t v50 = v487;
  uint64_t v49 = a2;
  unint64_t v51 = v45 + v40;
  unint64_t v52 = v45 + v40 + v48;
  if (v52 <= v32) {
    unint64_t v52 = v32;
  }
  unint64_t v53 = v11 + 17;
  if (v11 + 17 > v52) {
    unint64_t v52 = v11 + 17;
  }
  unint64_t v54 = v11 + 24;
  if (v11 + 24 > v52) {
    unint64_t v52 = v11 + 24;
  }
  if (v495 > v52) {
    unint64_t v52 = v495;
  }
  unint64_t v55 = (v11 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v56 = v55 + 8;
  if (v55 + 8 <= v52) {
    unint64_t v57 = v52;
  }
  else {
    unint64_t v57 = v55 + 8;
  }
  uint64_t v58 = v30 | v487 | v39;
  if (v58 != 7 || ((v485 | v483 | v481 | v35 | *(_DWORD *)(v37 + 80)) & 0x100000) != 0 || v57 + 1 > 0x18)
  {
    uint64_t v80 = *(void *)a2;
    *a1 = *(void *)a2;
    uint64_t v81 = (void *)(v80 + ((v58 + 16) & ~v58));
    swift_retain();
    return v81;
  }
  if (v491 > 3) {
    goto LABEL_51;
  }
  unsigned int v59 = ((1 << (8 * v491)) | 2u) >> (8 * v491);
  unsigned int v60 = v59 | 0x10;
  BOOL v28 = HIWORD(v59) == 0;
  uint64_t v61 = 2;
  if (!v28) {
    uint64_t v61 = 4;
  }
  if (v60 <= 0xFF) {
LABEL_51:
  }
    uint64_t v61 = 1;
  unint64_t v62 = v493 + v61;
  if (v62 <= v496) {
    unint64_t v62 = v496;
  }
  if (v45 > 3) {
    goto LABEL_58;
  }
  unsigned int v63 = ((1 << (8 * v45)) | 2u) >> (8 * v45);
  unsigned int v64 = v63 | 0x10;
  BOOL v28 = HIWORD(v63) == 0;
  uint64_t v65 = 2;
  if (!v28) {
    uint64_t v65 = 4;
  }
  if (v64 <= 0xFF) {
LABEL_58:
  }
    uint64_t v65 = 1;
  unint64_t v66 = v51 + v65;
  if (v66 > v62) {
    unint64_t v62 = v66;
  }
  if (v53 > v62) {
    unint64_t v62 = v11 + 17;
  }
  if (v54 > v62) {
    unint64_t v62 = v11 + 24;
  }
  if (v495 > v62) {
    unint64_t v62 = v495;
  }
  if (v56 > v62) {
    unint64_t v62 = v56;
  }
  unsigned int v67 = a2[v62];
  unsigned int v68 = v67 - 14;
  unint64_t v459 = v56;
  if (v67 < 0xE)
  {
    uint64_t v76 = v474;
  }
  else
  {
    if (v491 > 3) {
      goto LABEL_74;
    }
    unsigned int v69 = ((1 << (8 * v491)) | 2u) >> (8 * v491);
    unsigned int v70 = v69 | 0x10;
    BOOL v28 = HIWORD(v69) == 0;
    uint64_t v71 = 2;
    if (!v28) {
      uint64_t v71 = 4;
    }
    if (v70 <= 0xFF) {
LABEL_74:
    }
      uint64_t v71 = 1;
    unint64_t v72 = v493 + v71;
    if (v72 <= v496) {
      unint64_t v72 = v496;
    }
    if (v45 > 3) {
      goto LABEL_81;
    }
    unsigned int v73 = ((1 << (8 * v45)) | 2u) >> (8 * v45);
    unsigned int v74 = v73 | 0x10;
    BOOL v28 = HIWORD(v73) == 0;
    uint64_t v75 = 2;
    if (!v28) {
      uint64_t v75 = 4;
    }
    if (v74 <= 0xFF) {
LABEL_81:
    }
      uint64_t v75 = 1;
    uint64_t v76 = v474;
    unint64_t v77 = v51 + v75;
    if (v77 > v72) {
      unint64_t v72 = v77;
    }
    if (v53 > v72) {
      unint64_t v72 = v11 + 17;
    }
    if (v54 > v72) {
      unint64_t v72 = v11 + 24;
    }
    if (v495 > v72) {
      unint64_t v72 = v495;
    }
    if (v56 > v72) {
      LODWORD(v72) = v56;
    }
    if (v72 <= 3) {
      uint64_t v78 = v72;
    }
    else {
      uint64_t v78 = 4;
    }
    switch(v78)
    {
      case 1:
        int v79 = *a2;
        if (v72 < 4) {
          goto LABEL_106;
        }
        goto LABEL_107;
      case 2:
        int v79 = *(unsigned __int16 *)a2;
        if (v72 >= 4) {
          goto LABEL_107;
        }
        goto LABEL_106;
      case 3:
        int v79 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        if (v72 >= 4) {
          goto LABEL_107;
        }
        goto LABEL_106;
      case 4:
        int v79 = *(_DWORD *)a2;
        if (v72 < 4) {
LABEL_106:
        }
          v79 |= v68 << (8 * v72);
LABEL_107:
        unsigned int v67 = v79 + 14;
        break;
      default:
        break;
    }
  }
  unint64_t v486 = v11 + 17;
  unint64_t v488 = v51;
  unint64_t v484 = v11 + 24;
  uint64_t v83 = ~v76;
  uint64_t v84 = ~v50;
  uint64_t v85 = ~v30;
  uint64_t v86 = ~v476;
  uint64_t v87 = ~v39;
  uint64_t v88 = ~v38;
  unint64_t v89 = v44 + 16;
  uint64_t v490 = v45;
  switch(v67)
  {
    case 1u:
      uint64_t v81 = a1;
      uint64_t v104 = v49;
      (*(void (**)(void *))(v480 + 16))(a1);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v479 + 16))(((unint64_t)a1 + v470) & v83, (unint64_t)&v104[v470] & v83, AssociatedTypeWitness);
      *(unsigned char *)((((unint64_t)a1 + v470) & v83) + v471) = *(unsigned char *)(((unint64_t)&v104[v470] & v83) + v471);
      if (v491 > 3) {
        goto LABEL_125;
      }
      unsigned int v105 = ((1 << (8 * v491)) | 2u) >> (8 * v491);
      unsigned int v106 = v105 | 0x10;
      BOOL v28 = HIWORD(v105) == 0;
      uint64_t v107 = 2;
      if (!v28) {
        uint64_t v107 = 4;
      }
      if (v106 <= 0xFF) {
LABEL_125:
      }
        uint64_t v107 = 1;
      unint64_t v108 = v493 + v107;
      if (v108 <= v496) {
        unint64_t v108 = v496;
      }
      if (v490 > 3) {
        goto LABEL_132;
      }
      unsigned int v109 = ((1 << (8 * v490)) | 2u) >> (8 * v490);
      unsigned int v110 = v109 | 0x10;
      BOOL v28 = HIWORD(v109) == 0;
      uint64_t v111 = 2;
      if (!v28) {
        uint64_t v111 = 4;
      }
      if (v110 <= 0xFF) {
LABEL_132:
      }
        uint64_t v111 = 1;
      unint64_t v112 = v488 + v111;
      if (v112 > v108) {
        unint64_t v108 = v112;
      }
      if (v486 > v108) {
        unint64_t v108 = v486;
      }
      if (v484 > v108) {
        unint64_t v108 = v484;
      }
      if (v495 > v108) {
        unint64_t v108 = v495;
      }
      if (v459 > v108) {
        unint64_t v108 = v459;
      }
      *((unsigned char *)a1 + v108) = 1;
      return v81;
    case 2u:
      unsigned int v113 = v49[v478];
      unsigned int v114 = v113 - 2;
      if (v113 < 2)
      {
        unsigned int v116 = v491;
        uint64_t v81 = a1;
        unint64_t v117 = v484;
        unint64_t v118 = v486;
      }
      else
      {
        if (v478 <= 3) {
          uint64_t v115 = v478;
        }
        else {
          uint64_t v115 = 4;
        }
        unsigned int v116 = v491;
        uint64_t v81 = a1;
        unint64_t v117 = v484;
        unint64_t v118 = v486;
        switch(v115)
        {
          case 1:
            int v119 = *v49;
            goto LABEL_287;
          case 2:
            int v119 = *(unsigned __int16 *)v49;
            goto LABEL_287;
          case 3:
            int v119 = *(unsigned __int16 *)v49 | (v49[2] << 16);
            goto LABEL_287;
          case 4:
            int v119 = *(_DWORD *)v49;
LABEL_287:
            if (v478 < 4) {
              unsigned int v113 = (v119 | (v114 << (8 * v478))) + 2;
            }
            else {
              unsigned int v113 = v119 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v208 = v113 == 1;
      uint64_t v209 = v480;
      if (v113 == 1) {
        uint64_t v209 = v479;
      }
      long long v210 = v49;
      (*(void (**)(void *))(v209 + 16))(v81);
      *((unsigned char *)v81 + v478) = v208;
      *((unsigned char *)v81 + v494) = v210[v494];
      if (v116 > 3) {
        goto LABEL_296;
      }
      unsigned int v211 = ((1 << (8 * v116)) | 2u) >> (8 * v116);
      unsigned int v212 = v211 | 0x10;
      BOOL v28 = HIWORD(v211) == 0;
      uint64_t v213 = 2;
      if (!v28) {
        uint64_t v213 = 4;
      }
      if (v212 <= 0xFF) {
LABEL_296:
      }
        uint64_t v213 = 1;
      unint64_t v214 = v493 + v213;
      if (v214 <= v496) {
        unint64_t v214 = v496;
      }
      if (v490 > 3) {
        goto LABEL_303;
      }
      unsigned int v215 = ((1 << (8 * v490)) | 2u) >> (8 * v490);
      unsigned int v216 = v215 | 0x10;
      BOOL v28 = HIWORD(v215) == 0;
      uint64_t v217 = 2;
      if (!v28) {
        uint64_t v217 = 4;
      }
      if (v216 <= 0xFF) {
LABEL_303:
      }
        uint64_t v217 = 1;
      unint64_t v218 = v488 + v217;
      if (v218 > v214) {
        unint64_t v214 = v218;
      }
      if (v118 > v214) {
        unint64_t v214 = v118;
      }
      if (v117 > v214) {
        unint64_t v214 = v117;
      }
      if (v495 > v214) {
        unint64_t v214 = v495;
      }
      if (v459 > v214) {
        unint64_t v214 = v459;
      }
      *((unsigned char *)v81 + v214) = 2;
      return v81;
    case 3u:
      unsigned int v120 = v49[v478];
      unsigned int v121 = v120 - 2;
      if (v120 < 2)
      {
        unsigned int v123 = v491;
        uint64_t v81 = a1;
        unint64_t v124 = v484;
        unint64_t v125 = v486;
      }
      else
      {
        if (v478 <= 3) {
          uint64_t v122 = v478;
        }
        else {
          uint64_t v122 = 4;
        }
        unsigned int v123 = v491;
        uint64_t v81 = a1;
        unint64_t v124 = v484;
        unint64_t v125 = v486;
        switch(v122)
        {
          case 1:
            int v126 = *v49;
            goto LABEL_318;
          case 2:
            int v126 = *(unsigned __int16 *)v49;
            goto LABEL_318;
          case 3:
            int v126 = *(unsigned __int16 *)v49 | (v49[2] << 16);
            goto LABEL_318;
          case 4:
            int v126 = *(_DWORD *)v49;
LABEL_318:
            if (v478 < 4) {
              unsigned int v120 = (v126 | (v121 << (8 * v478))) + 2;
            }
            else {
              unsigned int v120 = v126 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v219 = v120 == 1;
      uint64_t v220 = v480;
      if (v120 == 1) {
        uint64_t v220 = v479;
      }
      (*(void (**)(void *))(v220 + 16))(v81);
      *((unsigned char *)v81 + v478) = v219;
      if (v123 > 3) {
        goto LABEL_327;
      }
      unsigned int v221 = ((1 << (8 * v123)) | 2u) >> (8 * v123);
      unsigned int v222 = v221 | 0x10;
      BOOL v28 = HIWORD(v221) == 0;
      uint64_t v223 = 2;
      if (!v28) {
        uint64_t v223 = 4;
      }
      if (v222 <= 0xFF) {
LABEL_327:
      }
        uint64_t v223 = 1;
      unint64_t v224 = v493 + v223;
      if (v224 <= v496) {
        unint64_t v224 = v496;
      }
      if (v490 > 3) {
        goto LABEL_334;
      }
      unsigned int v225 = ((1 << (8 * v490)) | 2u) >> (8 * v490);
      unsigned int v226 = v225 | 0x10;
      BOOL v28 = HIWORD(v225) == 0;
      uint64_t v227 = 2;
      if (!v28) {
        uint64_t v227 = 4;
      }
      if (v226 <= 0xFF) {
LABEL_334:
      }
        uint64_t v227 = 1;
      unint64_t v228 = v488 + v227;
      if (v228 > v224) {
        unint64_t v224 = v228;
      }
      if (v125 > v224) {
        unint64_t v224 = v125;
      }
      if (v124 > v224) {
        unint64_t v224 = v124;
      }
      if (v495 > v224) {
        unint64_t v224 = v495;
      }
      if (v459 > v224) {
        unint64_t v224 = v459;
      }
      *((unsigned char *)v81 + v224) = 3;
      return v81;
    case 4u:
      unsigned int v127 = v49[v478];
      unsigned int v128 = v127 - 2;
      if (v127 < 2)
      {
        unsigned int v130 = v491;
        uint64_t v81 = a1;
        unint64_t v131 = v484;
        unint64_t v132 = v486;
      }
      else
      {
        if (v478 <= 3) {
          uint64_t v129 = v478;
        }
        else {
          uint64_t v129 = 4;
        }
        unsigned int v130 = v491;
        uint64_t v81 = a1;
        unint64_t v131 = v484;
        unint64_t v132 = v486;
        switch(v129)
        {
          case 1:
            int v133 = *v49;
            goto LABEL_349;
          case 2:
            int v133 = *(unsigned __int16 *)v49;
            goto LABEL_349;
          case 3:
            int v133 = *(unsigned __int16 *)v49 | (v49[2] << 16);
            goto LABEL_349;
          case 4:
            int v133 = *(_DWORD *)v49;
LABEL_349:
            if (v478 < 4) {
              unsigned int v127 = (v133 | (v128 << (8 * v478))) + 2;
            }
            else {
              unsigned int v127 = v133 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v229 = v127 == 1;
      uint64_t v230 = v480;
      if (v127 == 1) {
        uint64_t v230 = v479;
      }
      uint64_t v231 = v49;
      (*(void (**)(void *))(v230 + 16))(v81);
      *((unsigned char *)v81 + v478) = v229;
      *(void *)(((unint64_t)v81 + v494 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)((unint64_t)&v231[v494 + 7] & 0xFFFFFFFFFFFFFFF8);
      if (v130 > 3) {
        goto LABEL_358;
      }
      unsigned int v232 = ((1 << (8 * v130)) | 2u) >> (8 * v130);
      unsigned int v233 = v232 | 0x10;
      BOOL v28 = HIWORD(v232) == 0;
      uint64_t v234 = 2;
      if (!v28) {
        uint64_t v234 = 4;
      }
      if (v233 <= 0xFF) {
LABEL_358:
      }
        uint64_t v234 = 1;
      unint64_t v235 = v493 + v234;
      if (v235 <= v496) {
        unint64_t v235 = v496;
      }
      if (v490 > 3) {
        goto LABEL_365;
      }
      unsigned int v236 = ((1 << (8 * v490)) | 2u) >> (8 * v490);
      unsigned int v237 = v236 | 0x10;
      BOOL v28 = HIWORD(v236) == 0;
      uint64_t v238 = 2;
      if (!v28) {
        uint64_t v238 = 4;
      }
      if (v237 <= 0xFF) {
LABEL_365:
      }
        uint64_t v238 = 1;
      unint64_t v239 = v488 + v238;
      if (v239 > v235) {
        unint64_t v235 = v239;
      }
      if (v132 > v235) {
        unint64_t v235 = v132;
      }
      if (v131 > v235) {
        unint64_t v235 = v131;
      }
      if (v495 > v235) {
        unint64_t v235 = v495;
      }
      if (v459 > v235) {
        unint64_t v235 = v459;
      }
      *((unsigned char *)v81 + v235) = 4;
      return v81;
    case 5u:
      unsigned int v134 = v49[v478];
      unsigned int v135 = v134 - 2;
      if (v134 < 2)
      {
        unsigned int v137 = v491;
        uint64_t v81 = a1;
        unint64_t v138 = v484;
        unint64_t v139 = v486;
      }
      else
      {
        if (v478 <= 3) {
          uint64_t v136 = v478;
        }
        else {
          uint64_t v136 = 4;
        }
        unsigned int v137 = v491;
        uint64_t v81 = a1;
        unint64_t v138 = v484;
        unint64_t v139 = v486;
        switch(v136)
        {
          case 1:
            int v140 = *v49;
            goto LABEL_380;
          case 2:
            int v140 = *(unsigned __int16 *)v49;
            goto LABEL_380;
          case 3:
            int v140 = *(unsigned __int16 *)v49 | (v49[2] << 16);
            goto LABEL_380;
          case 4:
            int v140 = *(_DWORD *)v49;
LABEL_380:
            if (v478 < 4) {
              unsigned int v134 = (v140 | (v135 << (8 * v478))) + 2;
            }
            else {
              unsigned int v134 = v140 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v240 = v134 == 1;
      uint64_t v241 = v480;
      if (v134 == 1) {
        uint64_t v241 = v479;
      }
      unsigned int v242 = v49;
      (*(void (**)(void *))(v241 + 16))(v81);
      *((unsigned char *)v81 + v478) = v240;
      *(void *)(((unint64_t)v81 + v494 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)((unint64_t)&v242[v494 + 7] & 0xFFFFFFFFFFFFFFF8);
      if (v137 > 3) {
        goto LABEL_389;
      }
      unsigned int v243 = ((1 << (8 * v137)) | 2u) >> (8 * v137);
      unsigned int v244 = v243 | 0x10;
      BOOL v28 = HIWORD(v243) == 0;
      uint64_t v245 = 2;
      if (!v28) {
        uint64_t v245 = 4;
      }
      if (v244 <= 0xFF) {
LABEL_389:
      }
        uint64_t v245 = 1;
      unint64_t v246 = v493 + v245;
      if (v246 <= v496) {
        unint64_t v246 = v496;
      }
      if (v490 > 3) {
        goto LABEL_396;
      }
      unsigned int v247 = ((1 << (8 * v490)) | 2u) >> (8 * v490);
      unsigned int v248 = v247 | 0x10;
      BOOL v28 = HIWORD(v247) == 0;
      uint64_t v249 = 2;
      if (!v28) {
        uint64_t v249 = 4;
      }
      if (v248 <= 0xFF) {
LABEL_396:
      }
        uint64_t v249 = 1;
      unint64_t v250 = v488 + v249;
      if (v250 > v246) {
        unint64_t v246 = v250;
      }
      if (v139 > v246) {
        unint64_t v246 = v139;
      }
      if (v138 > v246) {
        unint64_t v246 = v138;
      }
      if (v495 > v246) {
        unint64_t v246 = v495;
      }
      if (v459 > v246) {
        unint64_t v246 = v459;
      }
      *((unsigned char *)v81 + v246) = 5;
      return v81;
    case 6u:
      unsigned int v141 = v49[v478];
      unsigned int v142 = v141 - 2;
      if (v141 < 2)
      {
        uint64_t v81 = a1;
        unint64_t v144 = v484;
        unint64_t v145 = v486;
      }
      else
      {
        if (v478 <= 3) {
          uint64_t v143 = v478;
        }
        else {
          uint64_t v143 = 4;
        }
        uint64_t v81 = a1;
        unint64_t v144 = v484;
        unint64_t v145 = v486;
        switch(v143)
        {
          case 1:
            int v146 = *v49;
            goto LABEL_411;
          case 2:
            int v146 = *(unsigned __int16 *)v49;
            goto LABEL_411;
          case 3:
            int v146 = *(unsigned __int16 *)v49 | (v49[2] << 16);
            goto LABEL_411;
          case 4:
            int v146 = *(_DWORD *)v49;
LABEL_411:
            if (v478 < 4) {
              unsigned int v141 = (v146 | (v142 << (8 * v478))) + 2;
            }
            else {
              unsigned int v141 = v146 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v251 = v141 == 1;
      uint64_t v252 = v480;
      if (v141 == 1) {
        uint64_t v252 = v479;
      }
      long long v253 = v49;
      (*(void (**)(void *))(v252 + 16))(v81);
      *((unsigned char *)v81 + v478) = v251;
      long long v254 = (unsigned __int8 *)((unint64_t)&v253[v472] & v84);
      unsigned int v255 = v254[v478];
      unsigned int v256 = v255 - 2;
      if (v255 >= 2)
      {
        if (v478 <= 3) {
          uint64_t v257 = v478;
        }
        else {
          uint64_t v257 = 4;
        }
        switch(v257)
        {
          case 1:
            int v258 = *v254;
            goto LABEL_572;
          case 2:
            int v258 = *(unsigned __int16 *)v254;
            goto LABEL_572;
          case 3:
            int v258 = *(unsigned __int16 *)v254 | (*(unsigned __int8 *)(((unint64_t)&v253[v472] & v84) + 2) << 16);
            goto LABEL_572;
          case 4:
            int v258 = *(_DWORD *)v254;
LABEL_572:
            if (v478 < 4) {
              unsigned int v255 = (v258 | (v256 << (8 * v478))) + 2;
            }
            else {
              unsigned int v255 = v258 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v329 = v255 == 1;
      uint64_t v330 = v480;
      if (v255 == 1) {
        uint64_t v330 = v479;
      }
      (*(void (**)(unint64_t))(v330 + 16))(((unint64_t)v81 + v472) & v84);
      *(unsigned char *)((((unint64_t)v81 + v472) & v84) + v478) = v329;
      if (v491 > 3) {
        goto LABEL_581;
      }
      unsigned int v331 = ((1 << (8 * v491)) | 2u) >> (8 * v491);
      unsigned int v332 = v331 | 0x10;
      BOOL v28 = HIWORD(v331) == 0;
      uint64_t v333 = 2;
      if (!v28) {
        uint64_t v333 = 4;
      }
      if (v332 <= 0xFF) {
LABEL_581:
      }
        uint64_t v333 = 1;
      unint64_t v334 = v493 + v333;
      if (v334 <= v496) {
        unint64_t v334 = v496;
      }
      if (v490 > 3) {
        goto LABEL_588;
      }
      unsigned int v335 = ((1 << (8 * v490)) | 2u) >> (8 * v490);
      unsigned int v336 = v335 | 0x10;
      BOOL v28 = HIWORD(v335) == 0;
      uint64_t v337 = 2;
      if (!v28) {
        uint64_t v337 = 4;
      }
      if (v336 <= 0xFF) {
LABEL_588:
      }
        uint64_t v337 = 1;
      unint64_t v338 = v488 + v337;
      if (v338 > v334) {
        unint64_t v334 = v338;
      }
      if (v145 > v334) {
        unint64_t v334 = v145;
      }
      if (v144 > v334) {
        unint64_t v334 = v144;
      }
      if (v495 > v334) {
        unint64_t v334 = v495;
      }
      if (v459 > v334) {
        unint64_t v334 = v459;
      }
      *((unsigned char *)v81 + v334) = 6;
      return v81;
    case 7u:
      unsigned int v147 = v49[v478];
      unsigned int v148 = v147 - 2;
      if (v147 < 2)
      {
        uint64_t v81 = a1;
        unint64_t v150 = v484;
        unint64_t v151 = v486;
      }
      else
      {
        if (v478 <= 3) {
          uint64_t v149 = v478;
        }
        else {
          uint64_t v149 = 4;
        }
        uint64_t v81 = a1;
        unint64_t v150 = v484;
        unint64_t v151 = v486;
        switch(v149)
        {
          case 1:
            int v152 = *v49;
            goto LABEL_425;
          case 2:
            int v152 = *(unsigned __int16 *)v49;
            goto LABEL_425;
          case 3:
            int v152 = *(unsigned __int16 *)v49 | (v49[2] << 16);
            goto LABEL_425;
          case 4:
            int v152 = *(_DWORD *)v49;
LABEL_425:
            if (v478 < 4) {
              unsigned int v147 = (v152 | (v148 << (8 * v478))) + 2;
            }
            else {
              unsigned int v147 = v152 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v259 = v147 == 1;
      uint64_t v260 = v480;
      if (v147 == 1) {
        uint64_t v260 = v479;
      }
      unint64_t v261 = v49;
      (*(void (**)(void *))(v260 + 16))(v81);
      *((unsigned char *)v81 + v478) = v259;
      uint64_t v262 = (unsigned __int8 *)((unint64_t)&v261[v472] & v84);
      unsigned int v263 = v262[v478];
      unsigned int v264 = v263 - 2;
      if (v263 >= 2)
      {
        if (v478 <= 3) {
          uint64_t v265 = v478;
        }
        else {
          uint64_t v265 = 4;
        }
        switch(v265)
        {
          case 1:
            int v266 = *v262;
            goto LABEL_603;
          case 2:
            int v266 = *(unsigned __int16 *)v262;
            goto LABEL_603;
          case 3:
            int v266 = *(unsigned __int16 *)v262 | (*(unsigned __int8 *)(((unint64_t)&v261[v472] & v84) + 2) << 16);
            goto LABEL_603;
          case 4:
            int v266 = *(_DWORD *)v262;
LABEL_603:
            if (v478 < 4) {
              unsigned int v263 = (v266 | (v264 << (8 * v478))) + 2;
            }
            else {
              unsigned int v263 = v266 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v339 = v263 == 1;
      uint64_t v340 = v480;
      if (v263 == 1) {
        uint64_t v340 = v479;
      }
      (*(void (**)(unint64_t))(v340 + 16))(((unint64_t)v81 + v472) & v84);
      *(unsigned char *)((((unint64_t)v81 + v472) & v84) + v478) = v339;
      if (v491 > 3) {
        goto LABEL_612;
      }
      unsigned int v341 = ((1 << (8 * v491)) | 2u) >> (8 * v491);
      unsigned int v342 = v341 | 0x10;
      BOOL v28 = HIWORD(v341) == 0;
      uint64_t v343 = 2;
      if (!v28) {
        uint64_t v343 = 4;
      }
      if (v342 <= 0xFF) {
LABEL_612:
      }
        uint64_t v343 = 1;
      unint64_t v344 = v493 + v343;
      if (v344 <= v496) {
        unint64_t v344 = v496;
      }
      if (v490 > 3) {
        goto LABEL_619;
      }
      unsigned int v345 = ((1 << (8 * v490)) | 2u) >> (8 * v490);
      unsigned int v346 = v345 | 0x10;
      BOOL v28 = HIWORD(v345) == 0;
      uint64_t v347 = 2;
      if (!v28) {
        uint64_t v347 = 4;
      }
      if (v346 <= 0xFF) {
LABEL_619:
      }
        uint64_t v347 = 1;
      unint64_t v348 = v488 + v347;
      if (v348 > v344) {
        unint64_t v344 = v348;
      }
      if (v151 > v344) {
        unint64_t v344 = v151;
      }
      if (v150 > v344) {
        unint64_t v344 = v150;
      }
      if (v495 > v344) {
        unint64_t v344 = v495;
      }
      if (v459 > v344) {
        unint64_t v344 = v459;
      }
      *((unsigned char *)v81 + v344) = 7;
      return v81;
    case 8u:
      unsigned int v153 = v49[v478];
      unsigned int v154 = v153 - 2;
      if (v153 < 2)
      {
        unint64_t v158 = v475 + 16;
        uint64_t v156 = v491;
        uint64_t v81 = a1;
        unint64_t v159 = v484;
        uint64_t v157 = v469;
      }
      else
      {
        if (v478 <= 3) {
          uint64_t v155 = v478;
        }
        else {
          uint64_t v155 = 4;
        }
        uint64_t v156 = v491;
        uint64_t v81 = a1;
        uint64_t v157 = v469;
        unint64_t v158 = v475 + 16;
        unint64_t v159 = v484;
        switch(v155)
        {
          case 1:
            int v160 = *v49;
            goto LABEL_439;
          case 2:
            int v160 = *(unsigned __int16 *)v49;
            goto LABEL_439;
          case 3:
            int v160 = *(unsigned __int16 *)v49 | (v49[2] << 16);
            goto LABEL_439;
          case 4:
            int v160 = *(_DWORD *)v49;
LABEL_439:
            if (v478 < 4) {
              unsigned int v153 = (v160 | (v154 << (8 * v478))) + 2;
            }
            else {
              unsigned int v153 = v160 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v267 = v153 == 1;
      uint64_t v268 = v480;
      if (v153 == 1) {
        uint64_t v268 = v479;
      }
      size_t v269 = v49;
      (*(void (**)(void *))(v268 + 16))(v81);
      *((unsigned char *)v81 + v478) = v267;
      uint64_t v270 = (unsigned __int8 *)((unint64_t)&v269[v157] & v85);
      if (v156 > 3) {
        goto LABEL_445;
      }
      unsigned int v272 = ((1 << (8 * v156)) | 2u) >> (8 * v156);
      if (HIWORD(v272))
      {
        unsigned int v271 = *(_DWORD *)&v270[v156];
      }
      else if ((v272 | 0x10) <= 0xFF)
      {
LABEL_445:
        unsigned int v271 = v270[v156];
      }
      else
      {
        unsigned int v271 = *(unsigned __int16 *)&v270[v156];
      }
      uint64_t v273 = (char *)(((unint64_t)v81 + v157) & v85);
      unsigned int v274 = v271 - 16;
      unsigned int v275 = v490;
      if (v271 >= 0x10)
      {
        if (v156 <= 3) {
          uint64_t v276 = v156;
        }
        else {
          uint64_t v276 = 4;
        }
        switch(v276)
        {
          case 1:
            int v277 = *v270;
            goto LABEL_634;
          case 2:
            int v277 = *(unsigned __int16 *)v270;
            goto LABEL_634;
          case 3:
            int v277 = *(unsigned __int16 *)v270 | (v270[2] << 16);
            goto LABEL_634;
          case 4:
            int v277 = *(_DWORD *)v270;
LABEL_634:
            if (v156 < 4) {
              v277 |= v274 << (8 * v156);
            }
            unsigned int v271 = v277 + 16;
            break;
          default:
            break;
        }
      }
      switch(v271)
      {
        case 0u:
          long long v349 = *(_OWORD *)v270;
          *((void *)v273 + 2) = *((void *)v270 + 2);
          *(_OWORD *)uint64_t v273 = v349;
          unint64_t v350 = v495;
          unint64_t v351 = v459;
          if (v156 > 3) {
            goto LABEL_641;
          }
          unsigned int v352 = ((1 << (8 * v156)) | 2u) >> (8 * v156);
          unsigned int v353 = v352 | 0x10;
          if (HIWORD(v352))
          {
            *(_DWORD *)&v273[v156] = 0;
          }
          else
          {
            if (v353 <= 0xFF)
            {
LABEL_641:
              v273[v156] = 0;
              goto LABEL_822;
            }
            *(_WORD *)&v273[v156] = 0;
          }
          goto LABEL_866;
        case 1u:
          *(void *)uint64_t v273 = *(void *)v270;
          unint64_t v350 = v495;
          unint64_t v351 = v459;
          if (v156 > 3) {
            goto LABEL_656;
          }
          __int16 v360 = 1;
          unsigned int v361 = ((1 << (8 * v156)) | 2u) >> (8 * v156);
          unsigned int v353 = v361 | 0x10;
          if (HIWORD(v361))
          {
            *(_DWORD *)&v273[v156] = 1;
            goto LABEL_866;
          }
          if (v353 > 0xFF) {
            goto LABEL_865;
          }
LABEL_656:
          char v362 = 1;
          goto LABEL_821;
        case 2u:
          *(_OWORD *)uint64_t v273 = *(_OWORD *)v270;
          unint64_t v350 = v495;
          unint64_t v351 = v459;
          if (v156 > 3) {
            goto LABEL_660;
          }
          unsigned int v363 = ((1 << (8 * v156)) | 2u) >> (8 * v156);
          unsigned int v353 = v363 | 0x10;
          if (HIWORD(v363))
          {
            *(_DWORD *)&v273[v156] = 2;
            goto LABEL_866;
          }
          if (v353 <= 0xFF)
          {
LABEL_660:
            char v362 = 2;
            goto LABEL_821;
          }
          __int16 v360 = 2;
          goto LABEL_865;
        case 3u:
          *uint64_t v273 = *v270;
          unint64_t v350 = v495;
          unint64_t v351 = v459;
          if (v156 > 3) {
            goto LABEL_664;
          }
          unsigned int v364 = ((1 << (8 * v156)) | 2u) >> (8 * v156);
          unsigned int v353 = v364 | 0x10;
          if (HIWORD(v364))
          {
            *(_DWORD *)&v273[v156] = 3;
            goto LABEL_866;
          }
          if (v353 <= 0xFF)
          {
LABEL_664:
            char v362 = 3;
            goto LABEL_821;
          }
          __int16 v360 = 3;
          goto LABEL_865;
        case 4u:
          *uint64_t v273 = *v270;
          unint64_t v350 = v495;
          unint64_t v351 = v459;
          if (v156 > 3) {
            goto LABEL_668;
          }
          unsigned int v365 = ((1 << (8 * v156)) | 2u) >> (8 * v156);
          unsigned int v353 = v365 | 0x10;
          if (HIWORD(v365))
          {
            *(_DWORD *)&v273[v156] = 4;
            goto LABEL_866;
          }
          if (v353 <= 0xFF)
          {
LABEL_668:
            char v362 = 4;
            goto LABEL_821;
          }
          __int16 v360 = 4;
          goto LABEL_865;
        case 5u:
          *uint64_t v273 = *v270;
          unint64_t v350 = v495;
          unint64_t v351 = v459;
          if (v156 > 3) {
            goto LABEL_672;
          }
          unsigned int v366 = ((1 << (8 * v156)) | 2u) >> (8 * v156);
          unsigned int v353 = v366 | 0x10;
          if (HIWORD(v366))
          {
            *(_DWORD *)&v273[v156] = 5;
            goto LABEL_866;
          }
          if (v353 <= 0xFF)
          {
LABEL_672:
            char v362 = 5;
            goto LABEL_821;
          }
          __int16 v360 = 5;
          goto LABEL_865;
        case 6u:
          *uint64_t v273 = *v270;
          unint64_t v350 = v495;
          unint64_t v351 = v459;
          if (v156 > 3) {
            goto LABEL_676;
          }
          unsigned int v367 = ((1 << (8 * v156)) | 2u) >> (8 * v156);
          unsigned int v353 = v367 | 0x10;
          if (HIWORD(v367))
          {
            *(_DWORD *)&v273[v156] = 6;
            goto LABEL_866;
          }
          if (v353 <= 0xFF)
          {
LABEL_676:
            char v362 = 6;
            goto LABEL_821;
          }
          __int16 v360 = 6;
          goto LABEL_865;
        case 7u:
          *uint64_t v273 = *v270;
          unint64_t v350 = v495;
          unint64_t v351 = v459;
          if (v156 > 3) {
            goto LABEL_680;
          }
          unsigned int v368 = ((1 << (8 * v156)) | 2u) >> (8 * v156);
          unsigned int v353 = v368 | 0x10;
          if (HIWORD(v368))
          {
            *(_DWORD *)&v273[v156] = 7;
            goto LABEL_866;
          }
          if (v353 <= 0xFF)
          {
LABEL_680:
            char v362 = 7;
            goto LABEL_821;
          }
          __int16 v360 = 7;
          goto LABEL_865;
        case 8u:
          (*(void (**)(char *, unsigned __int8 *, uint64_t))(v463 + 16))(v273, v270, v464);
          int v419 = (void *)((unint64_t)&v273[v460] & 0xFFFFFFFFFFFFFFF8);
          unint64_t v420 = (void *)((unint64_t)&v270[v460] & 0xFFFFFFFFFFFFFFF8);
          *int v419 = *v420;
          unint64_t v421 = ((unint64_t)v419 + v461) & v86;
          unint64_t v422 = ((unint64_t)v420 + v461) & v86;
          uint64_t v423 = *(void (**)(unint64_t, unint64_t, uint64_t))(v465 + 16);
          swift_bridgeObjectRetain();
          v423(v421, v422, v466);
          unsigned int v424 = (void *)((v462 + v421) & 0xFFFFFFFFFFFFFFF8);
          unint64_t v425 = (void *)((v462 + v422) & 0xFFFFFFFFFFFFFFF8);
          *unsigned int v424 = *v425;
          uint64_t v426 = (void *)(((unint64_t)v424 + 15) & 0xFFFFFFFFFFFFFFF8);
          unsigned int v427 = (void *)(((unint64_t)v425 + 15) & 0xFFFFFFFFFFFFFFF8);
          *uint64_t v426 = *v427;
          v426[1] = v427[1];
          v273[v158] = v270[v158];
          *(unsigned char *)((unint64_t)&v273[v158] | 1) = *(unsigned char *)((unint64_t)&v270[v158] | 1);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          unsigned int v275 = v490;
          unint64_t v350 = v495;
          unint64_t v351 = v459;
          if (v156 > 3) {
            goto LABEL_772;
          }
          unsigned int v435 = ((1 << (8 * v156)) | 2u) >> (8 * v156);
          unsigned int v353 = v435 | 0x10;
          if (HIWORD(v435))
          {
            *(_DWORD *)&v273[v156] = 8;
            goto LABEL_866;
          }
          if (v353 <= 0xFF)
          {
LABEL_772:
            char v362 = 8;
            goto LABEL_821;
          }
          __int16 v360 = 8;
          goto LABEL_865;
        case 9u:
          unsigned int v369 = *(void **)v270;
          *(void *)uint64_t v273 = *(void *)v270;
          id v370 = v369;
          unsigned int v275 = v490;
          unint64_t v350 = v495;
          unint64_t v351 = v459;
          if (v156 > 3) {
            goto LABEL_684;
          }
          unsigned int v371 = ((1 << (8 * v156)) | 2u) >> (8 * v156);
          unsigned int v353 = v371 | 0x10;
          if (HIWORD(v371))
          {
            *(_DWORD *)&v273[v156] = 9;
            goto LABEL_866;
          }
          if (v353 <= 0xFF)
          {
LABEL_684:
            char v362 = 9;
            goto LABEL_821;
          }
          __int16 v360 = 9;
          goto LABEL_865;
        case 0xAu:
          *uint64_t v273 = *v270;
          unint64_t v350 = v495;
          unint64_t v351 = v459;
          if (v156 > 3) {
            goto LABEL_688;
          }
          unsigned int v372 = ((1 << (8 * v156)) | 2u) >> (8 * v156);
          unsigned int v353 = v372 | 0x10;
          if (HIWORD(v372))
          {
            *(_DWORD *)&v273[v156] = 10;
            goto LABEL_866;
          }
          if (v353 <= 0xFF)
          {
LABEL_688:
            char v362 = 10;
            goto LABEL_821;
          }
          __int16 v360 = 10;
          goto LABEL_865;
        case 0xBu:
          *(_WORD *)uint64_t v273 = *(_WORD *)v270;
          unint64_t v350 = v495;
          unint64_t v351 = v459;
          if (v156 > 3) {
            goto LABEL_692;
          }
          unsigned int v373 = ((1 << (8 * v156)) | 2u) >> (8 * v156);
          unsigned int v353 = v373 | 0x10;
          if (HIWORD(v373))
          {
            *(_DWORD *)&v273[v156] = 11;
            goto LABEL_866;
          }
          if (v353 <= 0xFF)
          {
LABEL_692:
            char v362 = 11;
            goto LABEL_821;
          }
          __int16 v360 = 11;
          goto LABEL_865;
        case 0xCu:
          uint64_t v374 = *(void *)v270;
          uint64_t v375 = *((void *)v270 + 1);
          char v376 = v270[16];
          sub_10009C5FC(*(void *)v270, v375, v376);
          *(void *)uint64_t v273 = v374;
          *((void *)v273 + 1) = v375;
          v273[16] = v376;
          unsigned int v275 = v490;
          uint64_t v156 = v491;
          unint64_t v350 = v495;
          unint64_t v351 = v459;
          if (v491 > 3) {
            goto LABEL_696;
          }
          unsigned int v377 = ((1 << (8 * v491)) | 2u) >> (8 * v491);
          unsigned int v353 = v377 | 0x10;
          if (HIWORD(v377))
          {
            *(_DWORD *)&v273[v491] = 12;
            goto LABEL_866;
          }
          if (v353 <= 0xFF)
          {
LABEL_696:
            char v362 = 12;
            goto LABEL_821;
          }
          __int16 v360 = 12;
          goto LABEL_865;
        case 0xDu:
          long long v378 = *(_OWORD *)v270;
          *((void *)v273 + 2) = *((void *)v270 + 2);
          *(_OWORD *)uint64_t v273 = v378;
          unint64_t v350 = v495;
          unint64_t v351 = v459;
          if (v156 > 3) {
            goto LABEL_700;
          }
          unsigned int v379 = ((1 << (8 * v156)) | 2u) >> (8 * v156);
          unsigned int v353 = v379 | 0x10;
          if (HIWORD(v379))
          {
            *(_DWORD *)&v273[v156] = 13;
            goto LABEL_866;
          }
          if (v353 <= 0xFF)
          {
LABEL_700:
            char v362 = 13;
            goto LABEL_821;
          }
          __int16 v360 = 13;
          goto LABEL_865;
        case 0xEu:
          if (*((void *)v270 + 2) >> 60 == 11)
          {
            long long v380 = *(_OWORD *)v270;
            long long v381 = *((_OWORD *)v270 + 1);
            long long v382 = *((_OWORD *)v270 + 2);
            *((void *)v273 + 6) = *((void *)v270 + 6);
            *((_OWORD *)v273 + 1) = v381;
            *((_OWORD *)v273 + 2) = v382;
            *(_OWORD *)uint64_t v273 = v380;
            unint64_t v350 = v495;
            unint64_t v351 = v459;
          }
          else
          {
            *(void *)uint64_t v273 = *(void *)v270;
            unint64_t v431 = (uint64_t *)(v270 + 8);
            unint64_t v432 = *((void *)v270 + 2);
            if (v432 >> 60 == 15)
            {
              *(_OWORD *)(v273 + 8) = *(_OWORD *)v431;
            }
            else
            {
              uint64_t v436 = *v431;
              sub_10001EBB0(*v431, *((void *)v270 + 2));
              unsigned int v275 = v490;
              *((void *)v273 + 1) = v436;
              *((void *)v273 + 2) = v432;
            }
            unint64_t v350 = v495;
            unint64_t v351 = v459;
            uint64_t v156 = v491;
            long long v437 = *(_OWORD *)(v270 + 24);
            v273[40] = v270[40];
            *(_OWORD *)(v273 + 24) = v437;
            *((void *)v273 + 6) = *((void *)v270 + 6);
          }
          v273[56] = v270[56];
          if (v156 > 3) {
            goto LABEL_820;
          }
          unsigned int v438 = ((1 << (8 * v156)) | 2u) >> (8 * v156);
          unsigned int v353 = v438 | 0x10;
          if (HIWORD(v438))
          {
            *(_DWORD *)&v273[v156] = 14;
            goto LABEL_866;
          }
          if (v353 <= 0xFF)
          {
LABEL_820:
            char v362 = 14;
            goto LABEL_821;
          }
          __int16 v360 = 14;
          goto LABEL_865;
        case 0xFu:
          *uint64_t v273 = *v270;
          unint64_t v350 = v495;
          unint64_t v351 = v459;
          if (v156 > 3) {
            goto LABEL_706;
          }
          unsigned int v383 = ((1 << (8 * v156)) | 2u) >> (8 * v156);
          unsigned int v353 = v383 | 0x10;
          if (HIWORD(v383))
          {
            *(_DWORD *)&v273[v156] = 15;
          }
          else
          {
            if (v353 <= 0xFF)
            {
LABEL_706:
              char v362 = 15;
LABEL_821:
              v273[v156] = v362;
LABEL_822:
              if (v156 > 3) {
                goto LABEL_826;
              }
              unsigned int v439 = ((1 << (8 * v156)) | 2u) >> (8 * v156);
              unsigned int v440 = v439 | 0x10;
              BOOL v28 = HIWORD(v439) == 0;
              uint64_t v441 = 2;
              if (!v28) {
                uint64_t v441 = 4;
              }
              if (v440 <= 0xFF) {
LABEL_826:
              }
                uint64_t v441 = 1;
LABEL_868:
              unint64_t v446 = v493 + v441;
              if (v446 <= v496) {
                unint64_t v446 = v496;
              }
              if (v275 > 3) {
                goto LABEL_874;
              }
              unsigned int v447 = ((1 << (8 * v275)) | 2u) >> (8 * v275);
              unsigned int v448 = v447 | 0x10;
              BOOL v28 = HIWORD(v447) == 0;
              uint64_t v449 = 2;
              if (!v28) {
                uint64_t v449 = 4;
              }
              if (v448 <= 0xFF) {
LABEL_874:
              }
                uint64_t v449 = 1;
              unint64_t v450 = v488 + v449;
              if (v450 > v446) {
                unint64_t v446 = v450;
              }
              if (v486 > v446) {
                unint64_t v446 = v486;
              }
              if (v159 > v446) {
                unint64_t v446 = v159;
              }
              if (v350 > v446) {
                unint64_t v446 = v350;
              }
              if (v351 > v446) {
                unint64_t v446 = v351;
              }
              *((unsigned char *)v81 + v446) = 8;
              return v81;
            }
            __int16 v360 = 15;
LABEL_865:
            *(_WORD *)&v273[v156] = v360;
          }
LABEL_866:
          BOOL v28 = HIWORD(v353) == 0;
          uint64_t v441 = 2;
          if (!v28) {
            uint64_t v441 = 4;
          }
          goto LABEL_868;
        default:
          if (v156 > 3) {
            goto LABEL_769;
          }
          unsigned int v416 = ((1 << (8 * v156)) | 2u) >> (8 * v156);
          unsigned int v417 = v416 | 0x10;
          BOOL v28 = HIWORD(v416) == 0;
          uint64_t v418 = 2;
          if (!v28) {
            uint64_t v418 = 4;
          }
          if (v417 <= 0xFF) {
LABEL_769:
          }
            uint64_t v418 = 1;
          memcpy(v273, v270, v418 + v156);
          unint64_t v350 = v495;
          unint64_t v351 = v459;
          unsigned int v275 = v490;
          goto LABEL_822;
      }
    case 9u:
      unint64_t v477 = v89;
      unsigned int v161 = v49[v478];
      unsigned int v162 = v161 - 2;
      if (v161 >= 2)
      {
        if (v478 <= 3) {
          uint64_t v163 = v478;
        }
        else {
          uint64_t v163 = 4;
        }
        switch(v163)
        {
          case 1:
            int v164 = *v49;
            goto LABEL_459;
          case 2:
            int v164 = *(unsigned __int16 *)v49;
            goto LABEL_459;
          case 3:
            int v164 = *(unsigned __int16 *)v49 | (v49[2] << 16);
            goto LABEL_459;
          case 4:
            int v164 = *(_DWORD *)v49;
LABEL_459:
            if (v478 < 4) {
              unsigned int v161 = (v164 | (v162 << (8 * v478))) + 2;
            }
            else {
              unsigned int v161 = v164 + 2;
            }
            break;
          default:
            break;
        }
      }
      uint64_t v278 = *(void *)(v36 - 8);
      uint64_t v482 = v36;
      BOOL v279 = v161 == 1;
      uint64_t v280 = v480;
      if (v161 == 1) {
        uint64_t v280 = v479;
      }
      uint64_t v281 = v49;
      (*(void (**)(void *))(v280 + 16))(a1);
      *((unsigned char *)a1 + v478) = v279;
      unint64_t v282 = (unint64_t)a1 + v494 + v39;
      int v283 = (unsigned __int8 *)((unint64_t)&v281[v494 + v39] & v87);
      uint64_t v284 = v490;
      if (v490 > 3) {
        goto LABEL_465;
      }
      unsigned int v286 = ((1 << (8 * v490)) | 2u) >> (8 * v490);
      if (HIWORD(v286))
      {
        unsigned int v285 = *(_DWORD *)&v283[v490];
      }
      else if ((v286 | 0x10) <= 0xFF)
      {
LABEL_465:
        unsigned int v285 = v283[v490];
      }
      else
      {
        unsigned int v285 = *(unsigned __int16 *)&v283[v490];
      }
      int v287 = (char *)(v282 & v87);
      unsigned int v288 = v285 - 16;
      if (v285 >= 0x10)
      {
        if (v490 <= 3) {
          uint64_t v289 = v490;
        }
        else {
          uint64_t v289 = 4;
        }
        switch(v289)
        {
          case 1:
            int v290 = *v283;
            goto LABEL_645;
          case 2:
            int v290 = *(unsigned __int16 *)v283;
            goto LABEL_645;
          case 3:
            int v290 = *(unsigned __int16 *)v283 | (v283[2] << 16);
            goto LABEL_645;
          case 4:
            int v290 = *(_DWORD *)v283;
LABEL_645:
            if (v490 < 4) {
              v290 |= v288 << (8 * v490);
            }
            unsigned int v285 = v290 + 16;
            break;
          default:
            goto LABEL_648;
        }
      }
      break;
    case 0xAu:
      unsigned int v165 = v49[v478];
      unsigned int v166 = v165 - 2;
      if (v165 < 2)
      {
        unsigned int v168 = v491;
        uint64_t v81 = a1;
        unint64_t v169 = v484;
        unint64_t v170 = v486;
      }
      else
      {
        if (v478 <= 3) {
          uint64_t v167 = v478;
        }
        else {
          uint64_t v167 = 4;
        }
        unsigned int v168 = v491;
        uint64_t v81 = a1;
        unint64_t v169 = v484;
        unint64_t v170 = v486;
        switch(v167)
        {
          case 1:
            int v171 = *v49;
            goto LABEL_479;
          case 2:
            int v171 = *(unsigned __int16 *)v49;
            goto LABEL_479;
          case 3:
            int v171 = *(unsigned __int16 *)v49 | (v49[2] << 16);
            goto LABEL_479;
          case 4:
            int v171 = *(_DWORD *)v49;
LABEL_479:
            if (v478 < 4) {
              unsigned int v165 = (v171 | (v166 << (8 * v478))) + 2;
            }
            else {
              unsigned int v165 = v171 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v291 = v165 == 1;
      uint64_t v292 = v480;
      if (v165 == 1) {
        uint64_t v292 = v479;
      }
      uint64_t v293 = v49;
      (*(void (**)(void *))(v292 + 16))(v81);
      *((unsigned char *)v81 + v478) = v291;
      unint64_t v294 = (unint64_t)&v293[v494 + 7] & 0xFFFFFFFFFFFFFFF8;
      char v295 = *(unsigned char *)(v294 + 8);
      unint64_t v296 = ((unint64_t)v81 + v494 + 7) & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v296 = *(void *)v294;
      *(unsigned char *)(v296 + 8) = v295;
      if (v168 > 3) {
        goto LABEL_488;
      }
      unsigned int v297 = ((1 << (8 * v168)) | 2u) >> (8 * v168);
      unsigned int v298 = v297 | 0x10;
      BOOL v28 = HIWORD(v297) == 0;
      uint64_t v299 = 2;
      if (!v28) {
        uint64_t v299 = 4;
      }
      if (v298 <= 0xFF) {
LABEL_488:
      }
        uint64_t v299 = 1;
      unint64_t v300 = v493 + v299;
      if (v300 <= v496) {
        unint64_t v300 = v496;
      }
      if (v490 > 3) {
        goto LABEL_495;
      }
      unsigned int v301 = ((1 << (8 * v490)) | 2u) >> (8 * v490);
      unsigned int v302 = v301 | 0x10;
      BOOL v28 = HIWORD(v301) == 0;
      uint64_t v303 = 2;
      if (!v28) {
        uint64_t v303 = 4;
      }
      if (v302 <= 0xFF) {
LABEL_495:
      }
        uint64_t v303 = 1;
      unint64_t v304 = v488 + v303;
      if (v304 > v300) {
        unint64_t v300 = v304;
      }
      if (v170 > v300) {
        unint64_t v300 = v170;
      }
      if (v169 > v300) {
        unint64_t v300 = v169;
      }
      if (v495 > v300) {
        unint64_t v300 = v495;
      }
      if (v459 > v300) {
        unint64_t v300 = v459;
      }
      *((unsigned char *)v81 + v300) = 10;
      return v81;
    case 0xBu:
      unsigned int v97 = v49[v478];
      unsigned int v98 = v97 - 2;
      if (v97 < 2)
      {
        unsigned int v100 = v491;
        uint64_t v81 = a1;
        unint64_t v101 = v484;
        unint64_t v102 = v486;
      }
      else
      {
        if (v478 <= 3) {
          uint64_t v99 = v478;
        }
        else {
          uint64_t v99 = 4;
        }
        unsigned int v100 = v491;
        uint64_t v81 = a1;
        unint64_t v101 = v484;
        unint64_t v102 = v486;
        switch(v99)
        {
          case 1:
            int v103 = *v49;
            goto LABEL_256;
          case 2:
            int v103 = *(unsigned __int16 *)v49;
            goto LABEL_256;
          case 3:
            int v103 = *(unsigned __int16 *)v49 | (v49[2] << 16);
            goto LABEL_256;
          case 4:
            int v103 = *(_DWORD *)v49;
LABEL_256:
            if (v478 < 4) {
              unsigned int v97 = (v103 | (v98 << (8 * v478))) + 2;
            }
            else {
              unsigned int v97 = v103 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v197 = v97 == 1;
      uint64_t v198 = v480;
      if (v97 == 1) {
        uint64_t v198 = v479;
      }
      unint64_t v199 = v49;
      (*(void (**)(void *))(v198 + 16))(v81);
      *((unsigned char *)v81 + v478) = v197;
      *(_OWORD *)(((unint64_t)v81 + v494 + 7) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((unint64_t)&v199[v494 + 7] & 0xFFFFFFFFFFFFFFF8);
      if (v100 > 3) {
        goto LABEL_265;
      }
      unsigned int v200 = ((1 << (8 * v100)) | 2u) >> (8 * v100);
      unsigned int v201 = v200 | 0x10;
      BOOL v28 = HIWORD(v200) == 0;
      uint64_t v202 = 2;
      if (!v28) {
        uint64_t v202 = 4;
      }
      if (v201 <= 0xFF) {
LABEL_265:
      }
        uint64_t v202 = 1;
      unint64_t v203 = v493 + v202;
      if (v203 <= v496) {
        unint64_t v203 = v496;
      }
      if (v490 > 3) {
        goto LABEL_272;
      }
      unsigned int v204 = ((1 << (8 * v490)) | 2u) >> (8 * v490);
      unsigned int v205 = v204 | 0x10;
      BOOL v28 = HIWORD(v204) == 0;
      uint64_t v206 = 2;
      if (!v28) {
        uint64_t v206 = 4;
      }
      if (v205 <= 0xFF) {
LABEL_272:
      }
        uint64_t v206 = 1;
      unint64_t v207 = v488 + v206;
      if (v207 > v203) {
        unint64_t v203 = v207;
      }
      if (v102 > v203) {
        unint64_t v203 = v102;
      }
      if (v101 > v203) {
        unint64_t v203 = v101;
      }
      if (v495 > v203) {
        unint64_t v203 = v495;
      }
      if (v459 > v203) {
        unint64_t v203 = v459;
      }
      *((unsigned char *)v81 + v203) = 11;
      return v81;
    case 0xCu:
      unsigned int v172 = v49[v478];
      unsigned int v173 = v172 - 2;
      if (v172 < 2)
      {
        unsigned int v175 = v491;
        uint64_t v81 = a1;
        unint64_t v176 = v484;
        unint64_t v177 = v486;
      }
      else
      {
        if (v478 <= 3) {
          uint64_t v174 = v478;
        }
        else {
          uint64_t v174 = 4;
        }
        unsigned int v175 = v491;
        uint64_t v81 = a1;
        unint64_t v176 = v484;
        unint64_t v177 = v486;
        switch(v174)
        {
          case 1:
            int v178 = *v49;
            goto LABEL_510;
          case 2:
            int v178 = *(unsigned __int16 *)v49;
            goto LABEL_510;
          case 3:
            int v178 = *(unsigned __int16 *)v49 | (v49[2] << 16);
            goto LABEL_510;
          case 4:
            int v178 = *(_DWORD *)v49;
LABEL_510:
            if (v478 < 4) {
              unsigned int v172 = (v178 | (v173 << (8 * v478))) + 2;
            }
            else {
              unsigned int v172 = v178 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v305 = v172 == 1;
      uint64_t v306 = v480;
      if (v172 == 1) {
        uint64_t v306 = v479;
      }
      unint64_t v307 = v49;
      (*(void (**)(void *))(v306 + 16))(v81);
      *((unsigned char *)v81 + v478) = v305;
      *((unsigned char *)v81 + v494) = v307[v494];
      if (v175 > 3) {
        goto LABEL_519;
      }
      unsigned int v308 = ((1 << (8 * v175)) | 2u) >> (8 * v175);
      unsigned int v309 = v308 | 0x10;
      BOOL v28 = HIWORD(v308) == 0;
      uint64_t v310 = 2;
      if (!v28) {
        uint64_t v310 = 4;
      }
      if (v309 <= 0xFF) {
LABEL_519:
      }
        uint64_t v310 = 1;
      unint64_t v311 = v493 + v310;
      if (v311 <= v496) {
        unint64_t v311 = v496;
      }
      if (v490 > 3) {
        goto LABEL_526;
      }
      unsigned int v312 = ((1 << (8 * v490)) | 2u) >> (8 * v490);
      unsigned int v313 = v312 | 0x10;
      BOOL v28 = HIWORD(v312) == 0;
      uint64_t v314 = 2;
      if (!v28) {
        uint64_t v314 = 4;
      }
      if (v313 <= 0xFF) {
LABEL_526:
      }
        uint64_t v314 = 1;
      unint64_t v315 = v488 + v314;
      if (v315 > v311) {
        unint64_t v311 = v315;
      }
      if (v177 > v311) {
        unint64_t v311 = v177;
      }
      if (v176 > v311) {
        unint64_t v311 = v176;
      }
      if (v495 > v311) {
        unint64_t v311 = v495;
      }
      if (v459 > v311) {
        unint64_t v311 = v459;
      }
      *((unsigned char *)v81 + v311) = 12;
      return v81;
    case 0xDu:
      unsigned int v179 = v49[v478];
      unsigned int v180 = v179 - 2;
      if (v179 < 2)
      {
        unsigned int v182 = v491;
        uint64_t v81 = a1;
        unint64_t v183 = v484;
        unint64_t v184 = v486;
      }
      else
      {
        if (v478 <= 3) {
          uint64_t v181 = v478;
        }
        else {
          uint64_t v181 = 4;
        }
        unsigned int v182 = v491;
        uint64_t v81 = a1;
        unint64_t v183 = v484;
        unint64_t v184 = v486;
        switch(v181)
        {
          case 1:
            int v185 = *v49;
            goto LABEL_541;
          case 2:
            int v185 = *(unsigned __int16 *)v49;
            goto LABEL_541;
          case 3:
            int v185 = *(unsigned __int16 *)v49 | (v49[2] << 16);
            goto LABEL_541;
          case 4:
            int v185 = *(_DWORD *)v49;
LABEL_541:
            if (v478 < 4) {
              unsigned int v179 = (v185 | (v180 << (8 * v478))) + 2;
            }
            else {
              unsigned int v179 = v185 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v316 = v179 == 1;
      uint64_t v317 = v480;
      if (v179 == 1) {
        uint64_t v317 = v479;
      }
      unint64_t v318 = v49;
      (*(void (**)(void *))(v317 + 16))(v81);
      *((unsigned char *)v81 + v478) = v316;
      unint64_t v319 = (void *)(((unint64_t)v81 + v494 + 7) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v320 = (void *)((unint64_t)&v318[v494 + 7] & 0xFFFFFFFFFFFFFFF8);
      *unint64_t v319 = *v320;
      *(void *)(((unint64_t)v319 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v320 + 15) & 0xFFFFFFFFFFFFFFF8);
      if (v182 > 3) {
        goto LABEL_550;
      }
      unsigned int v321 = ((1 << (8 * v182)) | 2u) >> (8 * v182);
      unsigned int v322 = v321 | 0x10;
      BOOL v28 = HIWORD(v321) == 0;
      uint64_t v323 = 2;
      if (!v28) {
        uint64_t v323 = 4;
      }
      if (v322 <= 0xFF) {
LABEL_550:
      }
        uint64_t v323 = 1;
      unint64_t v324 = v493 + v323;
      if (v324 <= v496) {
        unint64_t v324 = v496;
      }
      if (v490 > 3) {
        goto LABEL_557;
      }
      unsigned int v325 = ((1 << (8 * v490)) | 2u) >> (8 * v490);
      unsigned int v326 = v325 | 0x10;
      BOOL v28 = HIWORD(v325) == 0;
      uint64_t v327 = 2;
      if (!v28) {
        uint64_t v327 = 4;
      }
      if (v326 <= 0xFF) {
LABEL_557:
      }
        uint64_t v327 = 1;
      unint64_t v328 = v488 + v327;
      if (v328 > v324) {
        unint64_t v324 = v328;
      }
      if (v184 > v324) {
        unint64_t v324 = v184;
      }
      if (v183 > v324) {
        unint64_t v324 = v183;
      }
      if (v495 > v324) {
        unint64_t v324 = v495;
      }
      if (v459 > v324) {
        unint64_t v324 = v459;
      }
      *((unsigned char *)v81 + v324) = 13;
      return v81;
    default:
      unsigned int v90 = v49[v478];
      unsigned int v91 = v90 - 2;
      if (v90 < 2)
      {
        unsigned int v93 = v491;
        uint64_t v81 = a1;
        unint64_t v94 = v484;
        unint64_t v95 = v486;
      }
      else
      {
        if (v478 <= 3) {
          uint64_t v92 = v478;
        }
        else {
          uint64_t v92 = 4;
        }
        unsigned int v93 = v491;
        uint64_t v81 = a1;
        unint64_t v94 = v484;
        unint64_t v95 = v486;
        switch(v92)
        {
          case 1:
            int v96 = *v49;
            goto LABEL_225;
          case 2:
            int v96 = *(unsigned __int16 *)v49;
            goto LABEL_225;
          case 3:
            int v96 = *(unsigned __int16 *)v49 | (v49[2] << 16);
            goto LABEL_225;
          case 4:
            int v96 = *(_DWORD *)v49;
LABEL_225:
            if (v478 < 4) {
              unsigned int v90 = (v96 | (v91 << (8 * v478))) + 2;
            }
            else {
              unsigned int v90 = v96 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v186 = v90 == 1;
      uint64_t v187 = v480;
      if (v90 == 1) {
        uint64_t v187 = v479;
      }
      uint64_t v188 = v49;
      (*(void (**)(void *))(v187 + 16))(v81);
      *((unsigned char *)v81 + v478) = v186;
      *((unsigned char *)v81 + v494) = v188[v494];
      if (v93 > 3) {
        goto LABEL_234;
      }
      unsigned int v189 = ((1 << (8 * v93)) | 2u) >> (8 * v93);
      unsigned int v190 = v189 | 0x10;
      BOOL v28 = HIWORD(v189) == 0;
      uint64_t v191 = 2;
      if (!v28) {
        uint64_t v191 = 4;
      }
      if (v190 <= 0xFF) {
LABEL_234:
      }
        uint64_t v191 = 1;
      unint64_t v192 = v493 + v191;
      if (v192 <= v496) {
        unint64_t v192 = v496;
      }
      if (v490 > 3) {
        goto LABEL_241;
      }
      unsigned int v193 = ((1 << (8 * v490)) | 2u) >> (8 * v490);
      unsigned int v194 = v193 | 0x10;
      BOOL v28 = HIWORD(v193) == 0;
      uint64_t v195 = 2;
      if (!v28) {
        uint64_t v195 = 4;
      }
      if (v194 <= 0xFF) {
LABEL_241:
      }
        uint64_t v195 = 1;
      unint64_t v196 = v488 + v195;
      if (v196 > v192) {
        unint64_t v192 = v196;
      }
      if (v95 > v192) {
        unint64_t v192 = v95;
      }
      if (v94 > v192) {
        unint64_t v192 = v94;
      }
      if (v495 > v192) {
        unint64_t v192 = v495;
      }
      if (v459 > v192) {
        unint64_t v192 = v459;
      }
      *((unsigned char *)v81 + v192) = 0;
      return v81;
  }
LABEL_648:
  switch(v285)
  {
    case 0u:
      long long v354 = *(_OWORD *)v283;
      *((void *)v287 + 2) = *((void *)v283 + 2);
      *(_OWORD *)int v287 = v354;
      uint64_t v81 = a1;
      unint64_t v355 = v495;
      unint64_t v356 = v459;
      unint64_t v357 = v484;
      unint64_t v358 = v486;
      if (v490 > 3) {
        goto LABEL_652;
      }
      unsigned int v359 = ((1 << (8 * v490)) | 2u) >> (8 * v490);
      if (HIWORD(v359))
      {
        *(_DWORD *)&v287[v490] = 0;
      }
      else if ((v359 | 0x10) > 0xFF)
      {
        *(_WORD *)&v287[v490] = 0;
      }
      else
      {
LABEL_652:
        v287[v490] = 0;
      }
      break;
    case 1u:
      *(void *)int v287 = *(void *)v283;
      uint64_t v81 = a1;
      unint64_t v355 = v495;
      unint64_t v356 = v459;
      unint64_t v357 = v484;
      unint64_t v358 = v486;
      if (v490 > 3) {
        goto LABEL_710;
      }
      unsigned int v384 = ((1 << (8 * v490)) | 2u) >> (8 * v490);
      if (HIWORD(v384))
      {
        *(_DWORD *)&v287[v490] = 1;
      }
      else
      {
        if ((v384 | 0x10) > 0xFF)
        {
          __int16 v445 = 1;
          goto LABEL_887;
        }
LABEL_710:
        v287[v490] = 1;
      }
      break;
    case 2u:
      *(_OWORD *)int v287 = *(_OWORD *)v283;
      uint64_t v81 = a1;
      unint64_t v355 = v495;
      unint64_t v356 = v459;
      unint64_t v357 = v484;
      unint64_t v358 = v486;
      if (v490 > 3) {
        goto LABEL_714;
      }
      unsigned int v385 = ((1 << (8 * v490)) | 2u) >> (8 * v490);
      if (HIWORD(v385))
      {
        *(_DWORD *)&v287[v490] = 2;
      }
      else
      {
        if ((v385 | 0x10) > 0xFF)
        {
          __int16 v445 = 2;
          goto LABEL_887;
        }
LABEL_714:
        v287[v490] = 2;
      }
      break;
    case 3u:
      char *v287 = *v283;
      uint64_t v81 = a1;
      unint64_t v355 = v495;
      unint64_t v356 = v459;
      unint64_t v357 = v484;
      unint64_t v358 = v486;
      if (v490 > 3) {
        goto LABEL_718;
      }
      unsigned int v386 = ((1 << (8 * v490)) | 2u) >> (8 * v490);
      if (HIWORD(v386))
      {
        *(_DWORD *)&v287[v490] = 3;
      }
      else
      {
        if ((v386 | 0x10) > 0xFF)
        {
          __int16 v445 = 3;
          goto LABEL_887;
        }
LABEL_718:
        v287[v490] = 3;
      }
      break;
    case 4u:
      char *v287 = *v283;
      uint64_t v81 = a1;
      unint64_t v355 = v495;
      unint64_t v356 = v459;
      unint64_t v357 = v484;
      unint64_t v358 = v486;
      if (v490 > 3) {
        goto LABEL_722;
      }
      unsigned int v387 = ((1 << (8 * v490)) | 2u) >> (8 * v490);
      if (HIWORD(v387))
      {
        *(_DWORD *)&v287[v490] = 4;
      }
      else
      {
        if ((v387 | 0x10) > 0xFF)
        {
          __int16 v445 = 4;
          goto LABEL_887;
        }
LABEL_722:
        v287[v490] = 4;
      }
      break;
    case 5u:
      char *v287 = *v283;
      uint64_t v81 = a1;
      unint64_t v355 = v495;
      unint64_t v356 = v459;
      unint64_t v357 = v484;
      unint64_t v358 = v486;
      if (v490 > 3) {
        goto LABEL_726;
      }
      unsigned int v388 = ((1 << (8 * v490)) | 2u) >> (8 * v490);
      if (HIWORD(v388))
      {
        *(_DWORD *)&v287[v490] = 5;
      }
      else
      {
        if ((v388 | 0x10) > 0xFF)
        {
          __int16 v445 = 5;
          goto LABEL_887;
        }
LABEL_726:
        v287[v490] = 5;
      }
      break;
    case 6u:
      char *v287 = *v283;
      uint64_t v81 = a1;
      unint64_t v355 = v495;
      unint64_t v356 = v459;
      unint64_t v357 = v484;
      unint64_t v358 = v486;
      if (v490 > 3) {
        goto LABEL_730;
      }
      unsigned int v389 = ((1 << (8 * v490)) | 2u) >> (8 * v490);
      if (HIWORD(v389))
      {
        *(_DWORD *)&v287[v490] = 6;
      }
      else
      {
        if ((v389 | 0x10) > 0xFF)
        {
          __int16 v445 = 6;
          goto LABEL_887;
        }
LABEL_730:
        v287[v490] = 6;
      }
      break;
    case 7u:
      char *v287 = *v283;
      uint64_t v81 = a1;
      unint64_t v355 = v495;
      unint64_t v356 = v459;
      unint64_t v357 = v484;
      unint64_t v358 = v486;
      if (v490 > 3) {
        goto LABEL_734;
      }
      unsigned int v390 = ((1 << (8 * v490)) | 2u) >> (8 * v490);
      if (HIWORD(v390))
      {
        *(_DWORD *)&v287[v490] = 7;
      }
      else
      {
        if ((v390 | 0x10) > 0xFF)
        {
          __int16 v445 = 7;
          goto LABEL_887;
        }
LABEL_734:
        v287[v490] = 7;
      }
      break;
    case 8u:
      (*(void (**)(char *, unsigned __int8 *, uint64_t))(v467 + 16))(v287, v283, v468);
      long long v391 = (void *)((unint64_t)&v287[v41] & 0xFFFFFFFFFFFFFFF8);
      long long v392 = (void *)((unint64_t)&v283[v41] & 0xFFFFFFFFFFFFFFF8);
      *long long v391 = *v392;
      unint64_t v393 = ((unint64_t)v391 + v42) & v88;
      unint64_t v394 = ((unint64_t)v392 + v42) & v88;
      unsigned int v395 = *(void (**)(unint64_t, unint64_t, uint64_t))(v278 + 16);
      swift_bridgeObjectRetain();
      v395(v393, v394, v482);
      uint64_t v396 = (void *)((v43 + v393) & 0xFFFFFFFFFFFFFFF8);
      long long v397 = (void *)((v43 + v394) & 0xFFFFFFFFFFFFFFF8);
      void *v396 = *v397;
      long long v398 = (void *)(((unint64_t)v396 + 15) & 0xFFFFFFFFFFFFFFF8);
      long long v399 = (void *)(((unint64_t)v397 + 15) & 0xFFFFFFFFFFFFFFF8);
      void *v398 = *v399;
      v398[1] = v399[1];
      v287[v477] = v283[v477];
      *(unsigned char *)((unint64_t)&v287[v477] | 1) = *(unsigned char *)((unint64_t)&v283[v477] | 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v284 = v490;
      uint64_t v81 = a1;
      unint64_t v355 = v495;
      unint64_t v356 = v459;
      unint64_t v357 = v484;
      unint64_t v358 = v486;
      if (v490 > 3) {
        goto LABEL_738;
      }
      unsigned int v400 = ((1 << (8 * v490)) | 2u) >> (8 * v490);
      if (HIWORD(v400))
      {
        *(_DWORD *)&v287[v490] = 8;
      }
      else
      {
        if ((v400 | 0x10) > 0xFF)
        {
          __int16 v445 = 8;
          goto LABEL_887;
        }
LABEL_738:
        v287[v490] = 8;
      }
      break;
    case 9u:
      unint64_t v401 = *(void **)v283;
      *(void *)int v287 = *(void *)v283;
      id v402 = v401;
      uint64_t v284 = v490;
      uint64_t v81 = a1;
      unint64_t v355 = v495;
      unint64_t v356 = v459;
      unint64_t v357 = v484;
      unint64_t v358 = v486;
      if (v490 > 3) {
        goto LABEL_742;
      }
      unsigned int v403 = ((1 << (8 * v490)) | 2u) >> (8 * v490);
      if (HIWORD(v403))
      {
        *(_DWORD *)&v287[v490] = 9;
      }
      else
      {
        if ((v403 | 0x10) > 0xFF)
        {
          __int16 v445 = 9;
          goto LABEL_887;
        }
LABEL_742:
        v287[v490] = 9;
      }
      break;
    case 0xAu:
      char *v287 = *v283;
      uint64_t v81 = a1;
      unint64_t v355 = v495;
      unint64_t v356 = v459;
      unint64_t v357 = v484;
      unint64_t v358 = v486;
      if (v490 > 3) {
        goto LABEL_746;
      }
      unsigned int v404 = ((1 << (8 * v490)) | 2u) >> (8 * v490);
      if (HIWORD(v404))
      {
        *(_DWORD *)&v287[v490] = 10;
      }
      else
      {
        if ((v404 | 0x10) > 0xFF)
        {
          __int16 v445 = 10;
          goto LABEL_887;
        }
LABEL_746:
        v287[v490] = 10;
      }
      break;
    case 0xBu:
      *(_WORD *)int v287 = *(_WORD *)v283;
      uint64_t v81 = a1;
      unint64_t v355 = v495;
      unint64_t v356 = v459;
      unint64_t v357 = v484;
      unint64_t v358 = v486;
      if (v490 > 3) {
        goto LABEL_750;
      }
      unsigned int v405 = ((1 << (8 * v490)) | 2u) >> (8 * v490);
      if (HIWORD(v405))
      {
        *(_DWORD *)&v287[v490] = 11;
      }
      else
      {
        if ((v405 | 0x10) > 0xFF)
        {
          __int16 v445 = 11;
          goto LABEL_887;
        }
LABEL_750:
        v287[v490] = 11;
      }
      break;
    case 0xCu:
      uint64_t v406 = *(void *)v283;
      uint64_t v407 = *((void *)v283 + 1);
      char v408 = v283[16];
      sub_10009C5FC(*(void *)v283, v407, v408);
      uint64_t v284 = v490;
      *(void *)int v287 = v406;
      *((void *)v287 + 1) = v407;
      v287[16] = v408;
      uint64_t v81 = a1;
      unint64_t v355 = v495;
      unint64_t v356 = v459;
      unint64_t v357 = v484;
      unint64_t v358 = v486;
      if (v490 > 3) {
        goto LABEL_754;
      }
      unsigned int v409 = ((1 << (8 * v490)) | 2u) >> (8 * v490);
      if (HIWORD(v409))
      {
        *(_DWORD *)&v287[v490] = 12;
      }
      else
      {
        if ((v409 | 0x10) > 0xFF)
        {
          __int16 v445 = 12;
          goto LABEL_887;
        }
LABEL_754:
        v287[v490] = 12;
      }
      break;
    case 0xDu:
      long long v410 = *(_OWORD *)v283;
      *((void *)v287 + 2) = *((void *)v283 + 2);
      *(_OWORD *)int v287 = v410;
      uint64_t v81 = a1;
      unint64_t v355 = v495;
      unint64_t v356 = v459;
      unint64_t v357 = v484;
      unint64_t v358 = v486;
      if (v490 > 3) {
        goto LABEL_758;
      }
      unsigned int v411 = ((1 << (8 * v490)) | 2u) >> (8 * v490);
      if (HIWORD(v411))
      {
        *(_DWORD *)&v287[v490] = 13;
      }
      else
      {
        if ((v411 | 0x10) > 0xFF)
        {
          __int16 v445 = 13;
          goto LABEL_887;
        }
LABEL_758:
        v287[v490] = 13;
      }
      break;
    case 0xEu:
      if (*((void *)v283 + 2) >> 60 == 11)
      {
        long long v412 = *(_OWORD *)v283;
        long long v413 = *((_OWORD *)v283 + 1);
        long long v414 = *((_OWORD *)v283 + 2);
        *((void *)v287 + 6) = *((void *)v283 + 6);
        *((_OWORD *)v287 + 1) = v413;
        *((_OWORD *)v287 + 2) = v414;
        *(_OWORD *)int v287 = v412;
        uint64_t v81 = a1;
        unint64_t v355 = v495;
        unint64_t v356 = v459;
        unint64_t v357 = v484;
        unint64_t v358 = v486;
      }
      else
      {
        *(void *)int v287 = *(void *)v283;
        uint64_t v433 = (uint64_t *)(v283 + 8);
        unint64_t v434 = *((void *)v283 + 2);
        uint64_t v81 = a1;
        unint64_t v357 = v484;
        unint64_t v358 = v486;
        if (v434 >> 60 == 15)
        {
          *(_OWORD *)(v287 + 8) = *(_OWORD *)v433;
        }
        else
        {
          uint64_t v442 = *v433;
          sub_10001EBB0(*v433, *((void *)v283 + 2));
          uint64_t v284 = v490;
          *((void *)v287 + 1) = v442;
          *((void *)v287 + 2) = v434;
        }
        unint64_t v355 = v495;
        unint64_t v356 = v459;
        long long v443 = *(_OWORD *)(v283 + 24);
        v287[40] = v283[40];
        *(_OWORD *)(v287 + 24) = v443;
        *((void *)v287 + 6) = *((void *)v283 + 6);
      }
      v287[56] = v283[56];
      if (v284 > 3) {
        goto LABEL_832;
      }
      unsigned int v444 = ((1 << (8 * v284)) | 2u) >> (8 * v284);
      if (HIWORD(v444))
      {
        *(_DWORD *)&v287[v284] = 14;
      }
      else
      {
        if ((v444 | 0x10) > 0xFF)
        {
          __int16 v445 = 14;
          goto LABEL_887;
        }
LABEL_832:
        v287[v284] = 14;
      }
      break;
    case 0xFu:
      char *v287 = *v283;
      uint64_t v81 = a1;
      unint64_t v355 = v495;
      unint64_t v356 = v459;
      unint64_t v357 = v484;
      unint64_t v358 = v486;
      if (v490 > 3) {
        goto LABEL_764;
      }
      unsigned int v415 = ((1 << (8 * v490)) | 2u) >> (8 * v490);
      if (HIWORD(v415))
      {
        *(_DWORD *)&v287[v490] = 15;
      }
      else
      {
        if ((v415 | 0x10) > 0xFF)
        {
          __int16 v445 = 15;
LABEL_887:
          *(_WORD *)&v287[v284] = v445;
          break;
        }
LABEL_764:
        v287[v490] = 15;
      }
      break;
    default:
      if (v490 > 3) {
        goto LABEL_777;
      }
      unsigned int v428 = ((1 << (8 * v490)) | 2u) >> (8 * v490);
      unsigned int v429 = v428 | 0x10;
      BOOL v28 = HIWORD(v428) == 0;
      uint64_t v430 = 2;
      if (!v28) {
        uint64_t v430 = 4;
      }
      if (v429 <= 0xFF) {
LABEL_777:
      }
        uint64_t v430 = 1;
      uint64_t v81 = a1;
      unint64_t v357 = v484;
      unint64_t v358 = v486;
      memcpy(v287, v283, v430 + v490);
      LODWORD(v284) = v490;
      unint64_t v355 = v495;
      unint64_t v356 = v459;
      break;
  }
  if (v491 > 3) {
    goto LABEL_892;
  }
  unsigned int v451 = ((1 << (8 * v491)) | 2u) >> (8 * v491);
  unsigned int v452 = v451 | 0x10;
  BOOL v28 = HIWORD(v451) == 0;
  uint64_t v453 = 2;
  if (!v28) {
    uint64_t v453 = 4;
  }
  if (v452 <= 0xFF) {
LABEL_892:
  }
    uint64_t v453 = 1;
  unint64_t v454 = v493 + v453;
  if (v454 <= v496) {
    unint64_t v454 = v496;
  }
  if (v284 > 3) {
    goto LABEL_899;
  }
  unsigned int v455 = ((1 << (8 * v284)) | 2u) >> (8 * v284);
  unsigned int v456 = v455 | 0x10;
  BOOL v28 = HIWORD(v455) == 0;
  uint64_t v457 = 2;
  if (!v28) {
    uint64_t v457 = 4;
  }
  if (v456 <= 0xFF) {
LABEL_899:
  }
    uint64_t v457 = 1;
  unint64_t v458 = v488 + v457;
  if (v458 > v454) {
    unint64_t v454 = v458;
  }
  if (v358 > v454) {
    unint64_t v454 = v358;
  }
  if (v357 > v454) {
    unint64_t v454 = v357;
  }
  if (v355 > v454) {
    unint64_t v454 = v355;
  }
  if (v356 > v454) {
    unint64_t v454 = v356;
  }
  *((unsigned char *)v81 + v454) = 9;
  return v81;
}

void sub_10013447C(unsigned __int8 *a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v149 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v1 = *(void *)(v149 + 64);
  uint64_t v137 = swift_getAssociatedTypeWitness();
  uint64_t v2 = *(void *)(v137 - 8);
  unint64_t v3 = *(void *)(v2 + 64);
  if (v3 <= v1) {
    unint64_t v4 = v1;
  }
  else {
    unint64_t v4 = *(void *)(*(void *)(v137 - 8) + 64);
  }
  unint64_t v5 = v4 + 1;
  uint64_t v138 = *(void *)(v137 - 8);
  uint64_t v6 = *(_DWORD *)(v2 + 80);
  uint64_t v134 = v1 + v6;
  uint64_t v145 = v6;
  unint64_t v7 = v3 + ((v1 + v6) & ~v6);
  unint64_t v140 = v4;
  unint64_t v141 = v4 + 2;
  if (v7 + 1 > v4 + 2) {
    unint64_t v8 = v7 + 1;
  }
  else {
    unint64_t v8 = v4 + 2;
  }
  if (v5 > v8) {
    unint64_t v8 = v4 + 1;
  }
  unint64_t v9 = v4 & 0xFFFFFFFFFFFFFFF8;
  if ((v4 & 0xFFFFFFFFFFFFFFF8) + 16 > v8) {
    unint64_t v8 = (v4 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  uint64_t v10 = *(unsigned __int8 *)(v149 + 80) | *(_DWORD *)(v2 + 80);
  uint64_t v136 = v5 + v10;
  uint64_t v144 = v10;
  if (((v5 + v10) & ~v10) + v5 > v8) {
    unint64_t v8 = ((v5 + v10) & ~v10) + v5;
  }
  unint64_t v148 = v8;
  uint64_t v133 = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(v133 - 8);
  uint64_t v131 = v11;
  int v12 = *(_DWORD *)(v11 + 80) & 0xF8;
  uint64_t v132 = swift_getAssociatedTypeWitness();
  uint64_t v130 = *(void *)(v132 - 8);
  uint64_t v13 = *(unsigned __int8 *)(v130 + 80);
  uint64_t v14 = v12 | v13 | 7;
  unint64_t v147 = v5;
  uint64_t v135 = v5 + v14;
  uint64_t v142 = v14;
  unint64_t v15 = (v5 + v14) & ~v14;
  uint64_t v127 = *(void *)(v11 + 64) + 7;
  uint64_t v128 = v13 + 8;
  uint64_t v143 = v13;
  unint64_t v16 = (v13 + 8 + (v127 & 0xFFFFFFFFFFFFFFF8)) & ~v13;
  uint64_t v129 = *(void *)(v130 + 64) + 7;
  if (((((v129 + v16) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 18 <= 0x39) {
    unint64_t v17 = 57;
  }
  else {
    unint64_t v17 = ((((v129 + v16) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 18;
  }
  if (v17 > 3) {
    goto LABEL_20;
  }
  unsigned int v18 = ((1 << (8 * v17)) | 2u) >> (8 * v17);
  unsigned int v19 = v18 | 0x10;
  BOOL v20 = HIWORD(v18) == 0;
  uint64_t v21 = 2;
  if (!v20) {
    uint64_t v21 = 4;
  }
  if (v19 <= 0xFF) {
LABEL_20:
  }
    uint64_t v21 = 1;
  unint64_t v22 = v17 + v15;
  unint64_t v23 = v17 + v15 + v21;
  if (v23 <= v148) {
    unint64_t v24 = v148;
  }
  else {
    unint64_t v24 = v23;
  }
  uint64_t v25 = swift_getAssociatedTypeWitness();
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v125 = v26;
  uint64_t v126 = v25;
  int v27 = *(_DWORD *)(v26 + 80) & 0xF8;
  uint64_t v28 = swift_getAssociatedTypeWitness();
  uint64_t v29 = *(unsigned __int8 *)(*(void *)(v28 - 8) + 80);
  uint64_t v30 = v27 | v29 | 7;
  uint64_t v31 = *(void *)(v26 + 64) + 7;
  uint64_t v32 = v29 + 8;
  unint64_t v33 = (v29 + 8 + (v31 & 0xFFFFFFFFFFFFFFF8)) & ~v29;
  uint64_t v34 = *(void *)(*(void *)(v28 - 8) + 64) + 7;
  if (((((v34 + v33) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 18 <= 0x39) {
    unint64_t v35 = 57;
  }
  else {
    unint64_t v35 = ((((v34 + v33) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 18;
  }
  char v36 = 8 * v35;
  if (v35 <= 3) {
    unsigned int v37 = (((1 << (8 * v35)) | 2u) >> (8 * v35)) | 0x10;
  }
  else {
    unsigned int v37 = 17;
  }
  unint64_t v38 = v9 + 17;
  unint64_t v39 = v9 + 24;
  unint64_t v40 = ((v9 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  uint64_t v41 = 4;
  if (v37 < 0x10000) {
    uint64_t v41 = 2;
  }
  if (v37 < 0x100) {
    uint64_t v42 = 1;
  }
  else {
    uint64_t v42 = v41;
  }
  unint64_t v43 = v35 + ((v147 + v30) & ~v30);
  unint64_t v44 = v43 + v42;
  if (v44 <= v24) {
    unint64_t v44 = v24;
  }
  if (v38 > v44) {
    unint64_t v44 = v9 + 17;
  }
  if (v39 > v44) {
    unint64_t v44 = v9 + 24;
  }
  if (v141 > v44) {
    unint64_t v44 = v141;
  }
  if (v40 > v44) {
    unint64_t v44 = ((v9 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  unsigned int v45 = a1[v44];
  unsigned int v46 = v45 - 14;
  if (v45 >= 0xE)
  {
    if (v17 > 3) {
      goto LABEL_50;
    }
    unsigned int v47 = ((1 << (8 * v17)) | 2u) >> (8 * v17);
    unsigned int v48 = v47 | 0x10;
    BOOL v20 = HIWORD(v47) == 0;
    uint64_t v49 = 2;
    if (!v20) {
      uint64_t v49 = 4;
    }
    if (v48 <= 0xFF) {
LABEL_50:
    }
      uint64_t v49 = 1;
    unint64_t v50 = v22 + v49;
    if (v50 <= v148) {
      unint64_t v50 = v148;
    }
    if (v35 > 3) {
      goto LABEL_57;
    }
    unsigned int v51 = ((1 << v36) | 2u) >> v36;
    unsigned int v52 = v51 | 0x10;
    BOOL v20 = HIWORD(v51) == 0;
    uint64_t v53 = 2;
    if (!v20) {
      uint64_t v53 = 4;
    }
    if (v52 <= 0xFF) {
LABEL_57:
    }
      uint64_t v53 = 1;
    unint64_t v54 = v43 + v53;
    if (v54 <= v50) {
      unint64_t v54 = v50;
    }
    if (v38 <= v54) {
      unint64_t v38 = v54;
    }
    if (v39 <= v38) {
      unint64_t v39 = v38;
    }
    if (v141 > v39) {
      unint64_t v39 = v141;
    }
    if (v40 <= v39) {
      LODWORD(v40) = v39;
    }
    if (v40 <= 3) {
      uint64_t v55 = v40;
    }
    else {
      uint64_t v55 = 4;
    }
    switch(v55)
    {
      case 1:
        int v56 = *a1;
        if (v40 < 4) {
          goto LABEL_79;
        }
        goto LABEL_80;
      case 2:
        int v56 = *(unsigned __int16 *)a1;
        if (v40 >= 4) {
          goto LABEL_80;
        }
        goto LABEL_79;
      case 3:
        int v56 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        if (v40 >= 4) {
          goto LABEL_80;
        }
        goto LABEL_79;
      case 4:
        int v56 = *(_DWORD *)a1;
        if (v40 < 4) {
LABEL_79:
        }
          v56 |= v46 << (8 * v40);
LABEL_80:
        unsigned int v45 = v56 + 14;
        break;
      default:
        break;
    }
  }
  uint64_t v57 = ~v144;
  uint64_t v58 = ~v29;
  switch(v45)
  {
    case 1u:
      (*(void (**)(unsigned __int8 *, uint64_t))(v149 + 8))(a1, AssociatedTypeWitness);
      unsigned int v63 = (unsigned __int8 *)((unint64_t)&a1[v134] & ~v145);
      goto LABEL_255;
    case 2u:
      unsigned int v59 = v140;
      unsigned int v60 = a1[v140];
      unsigned int v61 = v60 - 2;
      if (v60 >= 2)
      {
        if (v140 <= 3) {
          uint64_t v64 = v140;
        }
        else {
          uint64_t v64 = 4;
        }
        switch(v64)
        {
          case 1:
            goto LABEL_152;
          case 2:
            goto LABEL_154;
          case 3:
            goto LABEL_156;
          case 4:
            goto LABEL_160;
          default:
            goto LABEL_158;
        }
      }
      goto LABEL_158;
    case 3u:
      unsigned int v59 = v140;
      unsigned int v60 = a1[v140];
      unsigned int v61 = v60 - 2;
      if (v60 >= 2)
      {
        if (v140 <= 3) {
          uint64_t v65 = v140;
        }
        else {
          uint64_t v65 = 4;
        }
        switch(v65)
        {
          case 1:
            goto LABEL_152;
          case 2:
            goto LABEL_154;
          case 3:
            goto LABEL_156;
          case 4:
            goto LABEL_160;
          default:
            goto LABEL_158;
        }
      }
      goto LABEL_158;
    case 4u:
      unsigned int v59 = v140;
      unsigned int v60 = a1[v140];
      unsigned int v61 = v60 - 2;
      if (v60 >= 2)
      {
        if (v140 <= 3) {
          uint64_t v66 = v140;
        }
        else {
          uint64_t v66 = 4;
        }
        switch(v66)
        {
          case 1:
            goto LABEL_152;
          case 2:
            goto LABEL_154;
          case 3:
            goto LABEL_156;
          case 4:
            goto LABEL_160;
          default:
            goto LABEL_158;
        }
      }
      goto LABEL_158;
    case 5u:
      unsigned int v59 = v140;
      unsigned int v60 = a1[v140];
      unsigned int v61 = v60 - 2;
      if (v60 >= 2)
      {
        if (v140 <= 3) {
          uint64_t v67 = v140;
        }
        else {
          uint64_t v67 = 4;
        }
        switch(v67)
        {
          case 1:
            goto LABEL_152;
          case 2:
            goto LABEL_154;
          case 3:
            goto LABEL_156;
          case 4:
            goto LABEL_160;
          default:
            goto LABEL_158;
        }
      }
      goto LABEL_158;
    case 6u:
      char v68 = v140;
      unsigned int v69 = a1[v140];
      unsigned int v70 = v69 - 2;
      if (v69 >= 2)
      {
        if (v140 <= 3) {
          uint64_t v71 = v140;
        }
        else {
          uint64_t v71 = 4;
        }
        switch(v71)
        {
          case 1:
            int v72 = *a1;
            goto LABEL_168;
          case 2:
            int v72 = *(unsigned __int16 *)a1;
            goto LABEL_168;
          case 3:
            int v72 = *(unsigned __int16 *)a1 | (a1[2] << 16);
            goto LABEL_168;
          case 4:
            int v72 = *(_DWORD *)a1;
LABEL_168:
            if (v140 < 4) {
              unsigned int v69 = (v72 | (v70 << (8 * v140))) + 2;
            }
            else {
              unsigned int v69 = v72 + 2;
            }
            break;
          default:
            break;
        }
      }
      if (v69 == 1) {
        uint64_t v92 = v138;
      }
      else {
        uint64_t v92 = v149;
      }
      if (v69 == 1) {
        uint64_t v93 = v137;
      }
      else {
        uint64_t v93 = AssociatedTypeWitness;
      }
      (*(void (**)(unsigned __int8 *, uint64_t))(v92 + 8))(a1, v93);
      unsigned int v63 = (unsigned __int8 *)((unint64_t)&a1[v136] & v57);
      unsigned int v94 = v63[v140];
      unsigned int v95 = v94 - 2;
      if (v94 < 2) {
        goto LABEL_254;
      }
      if (v140 <= 3) {
        uint64_t v96 = v140;
      }
      else {
        uint64_t v96 = 4;
      }
      switch(v96)
      {
        case 1:
          int v97 = *v63;
          break;
        case 2:
          int v97 = *(unsigned __int16 *)v63;
          break;
        case 3:
          int v97 = *(unsigned __int16 *)v63 | (*(unsigned __int8 *)(((unint64_t)&a1[v136] & v57) + 2) << 16);
          break;
        case 4:
          int v97 = *(_DWORD *)v63;
          break;
        default:
          goto LABEL_254;
      }
      if (v140 >= 4) {
        goto LABEL_253;
      }
      goto LABEL_263;
    case 7u:
      char v68 = v140;
      unsigned int v73 = a1[v140];
      unsigned int v74 = v73 - 2;
      if (v73 >= 2)
      {
        if (v140 <= 3) {
          uint64_t v75 = v140;
        }
        else {
          uint64_t v75 = 4;
        }
        switch(v75)
        {
          case 1:
            int v76 = *a1;
            goto LABEL_186;
          case 2:
            int v76 = *(unsigned __int16 *)a1;
            goto LABEL_186;
          case 3:
            int v76 = *(unsigned __int16 *)a1 | (a1[2] << 16);
            goto LABEL_186;
          case 4:
            int v76 = *(_DWORD *)a1;
LABEL_186:
            if (v140 < 4) {
              unsigned int v73 = (v76 | (v74 << (8 * v140))) + 2;
            }
            else {
              unsigned int v73 = v76 + 2;
            }
            break;
          default:
            break;
        }
      }
      if (v73 == 1) {
        uint64_t v98 = v138;
      }
      else {
        uint64_t v98 = v149;
      }
      if (v73 == 1) {
        uint64_t v99 = v137;
      }
      else {
        uint64_t v99 = AssociatedTypeWitness;
      }
      (*(void (**)(unsigned __int8 *, uint64_t))(v98 + 8))(a1, v99);
      unsigned int v63 = (unsigned __int8 *)((unint64_t)&a1[v136] & v57);
      unsigned int v94 = v63[v140];
      unsigned int v95 = v94 - 2;
      if (v94 < 2) {
        goto LABEL_254;
      }
      if (v140 <= 3) {
        uint64_t v100 = v140;
      }
      else {
        uint64_t v100 = 4;
      }
      switch(v100)
      {
        case 1:
          int v97 = *v63;
          break;
        case 2:
          int v97 = *(unsigned __int16 *)v63;
          break;
        case 3:
          int v97 = *(unsigned __int16 *)v63 | (*(unsigned __int8 *)(((unint64_t)&a1[v136] & v57) + 2) << 16);
          break;
        case 4:
          int v97 = *(_DWORD *)v63;
          break;
        default:
          goto LABEL_254;
      }
      if (v140 >= 4)
      {
LABEL_253:
        unsigned int v94 = v97 + 2;
LABEL_254:
        if (v94 != 1) {
          goto LABEL_264;
        }
LABEL_255:
        uint64_t v90 = v137;
        unsigned int v91 = *(void (**)(unsigned __int8 *, uint64_t))(v138 + 8);
        goto LABEL_256;
      }
LABEL_263:
      if ((v97 | (v95 << (8 * v68))) == 0xFFFFFFFF) {
        goto LABEL_255;
      }
LABEL_264:
      unsigned int v91 = *(void (**)(unsigned __int8 *, uint64_t))(v149 + 8);
LABEL_163:
      uint64_t v90 = AssociatedTypeWitness;
LABEL_256:
      v91(v63, v90);
      return;
    case 8u:
      unsigned int v77 = a1[v140];
      unsigned int v78 = v77 - 2;
      if (v77 >= 2)
      {
        if (v140 <= 3) {
          uint64_t v79 = v140;
        }
        else {
          uint64_t v79 = 4;
        }
        switch(v79)
        {
          case 1:
            int v80 = *a1;
            goto LABEL_204;
          case 2:
            int v80 = *(unsigned __int16 *)a1;
            goto LABEL_204;
          case 3:
            int v80 = *(unsigned __int16 *)a1 | (a1[2] << 16);
            goto LABEL_204;
          case 4:
            int v80 = *(_DWORD *)a1;
LABEL_204:
            if (v140 < 4) {
              unsigned int v77 = (v80 | (v78 << (8 * v140))) + 2;
            }
            else {
              unsigned int v77 = v80 + 2;
            }
            break;
          default:
            break;
        }
      }
      if (v77 == 1) {
        uint64_t v101 = v138;
      }
      else {
        uint64_t v101 = v149;
      }
      if (v77 == 1) {
        uint64_t v102 = v137;
      }
      else {
        uint64_t v102 = AssociatedTypeWitness;
      }
      (*(void (**)(unsigned __int8 *, uint64_t))(v101 + 8))(a1, v102);
      int v103 = (unsigned __int8 *)((unint64_t)&a1[v135] & ~v142);
      if (v17 > 3) {
        goto LABEL_214;
      }
      unsigned int v105 = ((1 << (8 * v17)) | 2u) >> (8 * v17);
      if (HIWORD(v105))
      {
        unsigned int v104 = *(_DWORD *)&v103[v17];
      }
      else if ((v105 | 0x10) <= 0xFF)
      {
LABEL_214:
        unsigned int v104 = v103[v17];
      }
      else
      {
        unsigned int v104 = *(unsigned __int16 *)&v103[v17];
      }
      unsigned int v106 = v104 - 16;
      if (v104 >= 0x10)
      {
        if (v17 <= 3) {
          uint64_t v107 = v17;
        }
        else {
          uint64_t v107 = 4;
        }
        switch(v107)
        {
          case 1:
            int v108 = *v103;
            goto LABEL_268;
          case 2:
            int v108 = *(unsigned __int16 *)v103;
            goto LABEL_268;
          case 3:
            int v108 = *(unsigned __int16 *)((unint64_t)&a1[v135] & ~v142) | (*(unsigned __int8 *)(((unint64_t)&a1[v135] & ~v142) + 2) << 16);
            goto LABEL_268;
          case 4:
            int v108 = *(_DWORD *)v103;
LABEL_268:
            if (v17 < 4) {
              unsigned int v104 = (v108 | (v106 << (8 * v17))) + 16;
            }
            else {
              unsigned int v104 = v108 + 16;
            }
            break;
          default:
            break;
        }
      }
      switch(v104)
      {
        case 8u:
          (*(void (**)(unsigned __int8 *, uint64_t))(v131 + 8))(v103, v133);
          swift_bridgeObjectRelease();
          (*(void (**)(unint64_t, uint64_t))(v130 + 8))((v128 + ((unint64_t)&v103[v127] & 0xFFFFFFFFFFFFFFF8)) & ~v143, v132);
          goto LABEL_281;
        case 9u:
          goto LABEL_284;
        case 0xCu:
          goto LABEL_287;
        case 0xEu:
          goto LABEL_290;
        default:
          return;
      }
      return;
    case 9u:
      unsigned int v81 = a1[v140];
      unsigned int v82 = v81 - 2;
      if (v81 >= 2)
      {
        if (v140 <= 3) {
          uint64_t v83 = v140;
        }
        else {
          uint64_t v83 = 4;
        }
        switch(v83)
        {
          case 1:
            int v84 = *a1;
            goto LABEL_228;
          case 2:
            int v84 = *(unsigned __int16 *)a1;
            goto LABEL_228;
          case 3:
            int v84 = *(unsigned __int16 *)a1 | (a1[2] << 16);
            goto LABEL_228;
          case 4:
            int v84 = *(_DWORD *)a1;
LABEL_228:
            if (v140 < 4) {
              unsigned int v81 = (v84 | (v82 << (8 * v140))) + 2;
            }
            else {
              unsigned int v81 = v84 + 2;
            }
            break;
          default:
            break;
        }
      }
      uint64_t v109 = v32;
      uint64_t v110 = *(void *)(v28 - 8);
      uint64_t v111 = v28;
      if (v81 == 1) {
        uint64_t v112 = v138;
      }
      else {
        uint64_t v112 = v149;
      }
      if (v81 == 1) {
        uint64_t v113 = v137;
      }
      else {
        uint64_t v113 = AssociatedTypeWitness;
      }
      (*(void (**)(unsigned __int8 *, uint64_t))(v112 + 8))(a1, v113);
      int v103 = (unsigned __int8 *)((unint64_t)&a1[v147 + v30] & ~v30);
      if (v35 > 3) {
        goto LABEL_238;
      }
      unsigned int v115 = ((1 << v36) | 2u) >> v36;
      if (HIWORD(v115))
      {
        unsigned int v114 = *(_DWORD *)&v103[v35];
      }
      else if ((v115 | 0x10) <= 0xFF)
      {
LABEL_238:
        unsigned int v114 = v103[v35];
      }
      else
      {
        unsigned int v114 = *(unsigned __int16 *)&v103[v35];
      }
      unsigned int v116 = v114 - 16;
      if (v114 >= 0x10)
      {
        if (v35 <= 3) {
          uint64_t v117 = v35;
        }
        else {
          uint64_t v117 = 4;
        }
        switch(v117)
        {
          case 1:
            int v118 = *v103;
            goto LABEL_276;
          case 2:
            int v118 = *(unsigned __int16 *)v103;
            goto LABEL_276;
          case 3:
            int v118 = *(unsigned __int16 *)((unint64_t)&a1[v147 + v30] & ~v30) | (*(unsigned __int8 *)(((unint64_t)&a1[v147 + v30] & ~v30) + 2) << 16);
            goto LABEL_276;
          case 4:
            int v118 = *(_DWORD *)v103;
LABEL_276:
            if (v35 < 4) {
              unsigned int v114 = (v118 | (v116 << v36)) + 16;
            }
            else {
              unsigned int v114 = v118 + 16;
            }
            break;
          default:
            break;
        }
      }
      switch(v114)
      {
        case 8u:
          (*(void (**)(unsigned __int8 *, uint64_t))(v125 + 8))(v103, v126);
          swift_bridgeObjectRelease();
          (*(void (**)(unint64_t, uint64_t))(v110 + 8))((v109 + ((unint64_t)&v103[v31] & 0xFFFFFFFFFFFFFFF8)) & v58, v111);
LABEL_281:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          break;
        case 9u:
LABEL_284:
          int v119 = *(void **)v103;

          break;
        case 0xCu:
LABEL_287:
          uint64_t v120 = *(void *)v103;
          uint64_t v121 = *((void *)v103 + 1);
          char v122 = v103[16];
          sub_1000D31F8(v120, v121, v122);
          break;
        case 0xEu:
LABEL_290:
          unint64_t v123 = *((void *)v103 + 2);
          if (v123 >> 60 != 11 && v123 >> 60 != 15)
          {
            uint64_t v124 = *((void *)v103 + 1);
            sub_10001E9C0(v124, v123);
          }
          break;
        default:
          return;
      }
      return;
    case 0xAu:
      unsigned int v59 = v140;
      unsigned int v60 = a1[v140];
      unsigned int v61 = v60 - 2;
      if (v60 >= 2)
      {
        if (v140 <= 3) {
          uint64_t v85 = v140;
        }
        else {
          uint64_t v85 = 4;
        }
        switch(v85)
        {
          case 1:
            goto LABEL_152;
          case 2:
            goto LABEL_154;
          case 3:
            goto LABEL_156;
          case 4:
            goto LABEL_160;
          default:
            goto LABEL_158;
        }
      }
      goto LABEL_158;
    case 0xBu:
      unsigned int v59 = v140;
      unsigned int v60 = a1[v140];
      unsigned int v61 = v60 - 2;
      if (v60 >= 2)
      {
        if (v140 <= 3) {
          uint64_t v86 = v140;
        }
        else {
          uint64_t v86 = 4;
        }
        switch(v86)
        {
          case 1:
            goto LABEL_152;
          case 2:
            goto LABEL_154;
          case 3:
            goto LABEL_156;
          case 4:
            goto LABEL_160;
          default:
            goto LABEL_158;
        }
      }
      goto LABEL_158;
    case 0xCu:
      unsigned int v59 = v140;
      unsigned int v60 = a1[v140];
      unsigned int v61 = v60 - 2;
      if (v60 >= 2)
      {
        if (v140 <= 3) {
          uint64_t v87 = v140;
        }
        else {
          uint64_t v87 = 4;
        }
        switch(v87)
        {
          case 1:
            goto LABEL_152;
          case 2:
            goto LABEL_154;
          case 3:
            goto LABEL_156;
          case 4:
            goto LABEL_160;
          default:
            goto LABEL_158;
        }
      }
      goto LABEL_158;
    case 0xDu:
      unsigned int v59 = v140;
      unsigned int v60 = a1[v140];
      unsigned int v61 = v60 - 2;
      if (v60 >= 2)
      {
        if (v140 <= 3) {
          uint64_t v88 = v140;
        }
        else {
          uint64_t v88 = 4;
        }
        switch(v88)
        {
          case 1:
            goto LABEL_152;
          case 2:
            goto LABEL_154;
          case 3:
            goto LABEL_156;
          case 4:
            goto LABEL_160;
          default:
            goto LABEL_158;
        }
      }
      goto LABEL_158;
    default:
      unsigned int v59 = v140;
      unsigned int v60 = a1[v140];
      unsigned int v61 = v60 - 2;
      if (v60 >= 2)
      {
        if (v140 <= 3) {
          uint64_t v62 = v140;
        }
        else {
          uint64_t v62 = 4;
        }
        switch(v62)
        {
          case 1:
LABEL_152:
            int v89 = *a1;
            if (v59 >= 4) {
              goto LABEL_161;
            }
            goto LABEL_157;
          case 2:
LABEL_154:
            int v89 = *(unsigned __int16 *)a1;
            if (v59 >= 4) {
              goto LABEL_161;
            }
            goto LABEL_157;
          case 3:
LABEL_156:
            int v89 = *(unsigned __int16 *)a1 | (a1[2] << 16);
            if (v59 < 4) {
              goto LABEL_157;
            }
            goto LABEL_161;
          case 4:
LABEL_160:
            int v89 = *(_DWORD *)a1;
            if (v59 < 4)
            {
LABEL_157:
              unsigned int v60 = (v89 | (v61 << (8 * v59))) + 2;
              break;
            }
LABEL_161:
            if (v89 != -1) {
              goto LABEL_162;
            }
            goto LABEL_159;
          default:
            break;
        }
      }
LABEL_158:
      if (v60 == 1)
      {
LABEL_159:
        uint64_t v90 = v137;
        unsigned int v91 = *(void (**)(unsigned __int8 *, uint64_t))(v138 + 8);
        unsigned int v63 = a1;
        goto LABEL_256;
      }
LABEL_162:
      unsigned int v91 = *(void (**)(unsigned __int8 *, uint64_t))(v149 + 8);
      unsigned int v63 = a1;
      goto LABEL_163;
  }
}

uint64_t sub_100135768(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v3 = *(void *)(v2 + 64);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v5 = *(void *)(v4 + 64);
  if (v5 <= v3) {
    unint64_t v6 = v3;
  }
  else {
    unint64_t v6 = *(void *)(v4 + 64);
  }
  unint64_t v7 = v6 + 1;
  uint64_t v415 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v8 = *(_DWORD *)(v4 + 80);
  uint64_t v9 = *(_DWORD *)(v4 + 80);
  uint64_t v398 = v3 + v9;
  uint64_t v399 = *(void *)(v4 + 64);
  uint64_t v406 = v9;
  unint64_t v10 = v5 + ((v3 + v9) & ~v9);
  unint64_t v422 = v6 + 2;
  if (v10 + 1 > v6 + 2) {
    unint64_t v11 = v10 + 1;
  }
  else {
    unint64_t v11 = v6 + 2;
  }
  if (v7 > v11) {
    unint64_t v11 = v6 + 1;
  }
  unint64_t v412 = v6;
  unint64_t v12 = v6 & 0xFFFFFFFFFFFFFFF8;
  if ((v6 & 0xFFFFFFFFFFFFFFF8) + 16 > v11) {
    unint64_t v11 = (v6 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  uint64_t v416 = v2;
  uint64_t v13 = *(unsigned __int8 *)(v2 + 80) | v8;
  uint64_t v400 = v7 + v13;
  uint64_t v404 = v13;
  if (((v7 + v13) & ~v13) + v7 <= v11) {
    unint64_t v14 = v11;
  }
  else {
    unint64_t v14 = ((v7 + v13) & ~v13) + v7;
  }
  uint64_t v15 = swift_getAssociatedTypeWitness();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v391 = v16;
  uint64_t v392 = v15;
  int v17 = *(_DWORD *)(v16 + 80) & 0xF8;
  uint64_t v18 = swift_getAssociatedTypeWitness();
  uint64_t v19 = *(unsigned __int8 *)(*(void *)(v18 - 8) + 80);
  uint64_t v20 = v17 | v19 | 7;
  unint64_t v421 = v7;
  uint64_t v21 = v7 + v20;
  unint64_t v22 = (v7 + v20) & ~v20;
  uint64_t v23 = *(void *)(v16 + 64) + 7;
  uint64_t v24 = *(void *)(*(void *)(v18 - 8) + 64) + 7;
  unint64_t v25 = (((v24 + ((v19 + 8 + (v23 & 0xFFFFFFFFFFFFFFF8)) & ~v19)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  if (v25 + 18 <= 0x39) {
    uint64_t v26 = 57;
  }
  else {
    uint64_t v26 = v25 + 18;
  }
  uint64_t v393 = *(void *)(v18 - 8);
  uint64_t v394 = v18;
  uint64_t v389 = v19 + 8;
  uint64_t v390 = *(void *)(v393 + 64) + 7;
  uint64_t v388 = *(void *)(v16 + 64) + 7;
  uint64_t v397 = v21;
  unint64_t v408 = (((v24 + ((v19 + 8 + (v23 & 0xFFFFFFFFFFFFFFF8)) & ~v19)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  if (v26 > 3) {
    goto LABEL_21;
  }
  unsigned int v27 = ((1 << (8 * v26)) | 2u) >> (8 * v26);
  unsigned int v28 = v27 | 0x10;
  BOOL v29 = HIWORD(v27) == 0;
  uint64_t v30 = 2;
  if (!v29) {
    uint64_t v30 = 4;
  }
  if (v28 <= 0xFF) {
LABEL_21:
  }
    uint64_t v30 = 1;
  unint64_t v419 = v14;
  unint64_t v420 = v26 + v22;
  unint64_t v31 = v26 + v22 + v30;
  if (v31 <= v14) {
    unint64_t v32 = v14;
  }
  else {
    unint64_t v32 = v31;
  }
  uint64_t v33 = swift_getAssociatedTypeWitness();
  uint64_t v34 = *(void *)(v33 - 8);
  uint64_t v395 = v34;
  uint64_t v396 = v33;
  int v35 = *(_DWORD *)(v34 + 80) & 0xF8;
  uint64_t v36 = swift_getAssociatedTypeWitness();
  uint64_t v37 = *(unsigned __int8 *)(*(void *)(v36 - 8) + 80);
  uint64_t v38 = v35 | v37 | 7;
  unint64_t v39 = (v7 + v38) & ~v38;
  uint64_t v40 = *(void *)(v34 + 64) + 7;
  uint64_t v41 = v37 + 8;
  uint64_t v42 = *(void *)(*(void *)(v36 - 8) + 64) + 7;
  unint64_t v43 = (((v42 + ((v37 + 8 + (v40 & 0xFFFFFFFFFFFFFFF8)) & ~v37)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  if (v43 + 18 <= 0x39) {
    uint64_t v44 = 57;
  }
  else {
    uint64_t v44 = v43 + 18;
  }
  if (v44 <= 3) {
    unsigned int v45 = (((1 << (8 * v44)) | 2u) >> (8 * v44)) | 0x10;
  }
  else {
    unsigned int v45 = 17;
  }
  unint64_t v46 = v12 + 17;
  unint64_t v47 = v12 + 24;
  unint64_t v48 = ((v12 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  uint64_t v49 = 4;
  if (v45 < 0x10000) {
    uint64_t v49 = 2;
  }
  if (v45 < 0x100) {
    uint64_t v50 = 1;
  }
  else {
    uint64_t v50 = v49;
  }
  unint64_t v51 = v44 + v39;
  unint64_t v52 = v44 + v39 + v50;
  if (v52 <= v32) {
    unint64_t v52 = v32;
  }
  if (v46 > v52) {
    unint64_t v52 = v12 + 17;
  }
  if (v47 > v52) {
    unint64_t v52 = v12 + 24;
  }
  if (v422 > v52) {
    unint64_t v52 = v422;
  }
  if (v48 > v52) {
    unint64_t v52 = ((v12 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  unsigned int v53 = a2[v52];
  unsigned int v54 = v53 - 14;
  unint64_t v401 = v12 + 24;
  unint64_t v402 = ((v12 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  uint64_t v418 = v26;
  if (v53 < 0xE)
  {
    uint64_t v60 = v404;
    uint64_t v59 = v406;
    uint64_t v61 = v17 | v19 | 7;
    unint64_t v55 = v408;
  }
  else
  {
    unint64_t v55 = v408;
    if (v26 > 3) {
      goto LABEL_51;
    }
    unsigned int v56 = ((1 << (8 * v26)) | 2u) >> (8 * v26);
    unsigned int v57 = v56 | 0x10;
    BOOL v29 = HIWORD(v56) == 0;
    uint64_t v58 = 2;
    if (!v29) {
      uint64_t v58 = 4;
    }
    if (v57 <= 0xFF) {
LABEL_51:
    }
      uint64_t v58 = 1;
    uint64_t v60 = v404;
    uint64_t v59 = v406;
    uint64_t v61 = v17 | v19 | 7;
    unint64_t v62 = v420 + v58;
    if (v62 <= v419) {
      unint64_t v62 = v419;
    }
    if (v44 > 3) {
      goto LABEL_58;
    }
    unsigned int v63 = ((1 << (8 * v44)) | 2u) >> (8 * v44);
    unsigned int v64 = v63 | 0x10;
    BOOL v29 = HIWORD(v63) == 0;
    uint64_t v65 = 2;
    if (!v29) {
      uint64_t v65 = 4;
    }
    if (v64 <= 0xFF) {
LABEL_58:
    }
      uint64_t v65 = 1;
    unint64_t v66 = v51 + v65;
    if (v66 > v62) {
      unint64_t v62 = v66;
    }
    if (v46 > v62) {
      unint64_t v62 = v12 + 17;
    }
    if (v47 > v62) {
      unint64_t v62 = v12 + 24;
    }
    if (v422 > v62) {
      unint64_t v62 = v422;
    }
    if (v48 > v62) {
      LODWORD(v62) = ((v12 + 23) & 0xFFFFFFF8) + 8;
    }
    if (v62 <= 3) {
      uint64_t v67 = v62;
    }
    else {
      uint64_t v67 = 4;
    }
    switch(v67)
    {
      case 1:
        int v68 = *a2;
        if (v62 < 4) {
          goto LABEL_81;
        }
        goto LABEL_82;
      case 2:
        int v68 = *(unsigned __int16 *)a2;
        if (v62 >= 4) {
          goto LABEL_82;
        }
        goto LABEL_81;
      case 3:
        int v68 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        if (v62 >= 4) {
          goto LABEL_82;
        }
        goto LABEL_81;
      case 4:
        int v68 = *(_DWORD *)a2;
        if (v62 < 4) {
LABEL_81:
        }
          v68 |= v54 << (8 * v62);
LABEL_82:
        unsigned int v53 = v68 + 14;
        break;
      default:
        break;
    }
  }
  uint64_t v410 = v44;
  char v403 = 8 * v44;
  unint64_t v405 = v51;
  unint64_t v407 = v12 + 17;
  uint64_t v69 = ~v59;
  uint64_t v70 = ~v60;
  uint64_t v71 = ~v61;
  uint64_t v72 = ~v19;
  unint64_t v73 = v55 + 16;
  uint64_t v74 = ~v38;
  uint64_t v75 = ~v37;
  unint64_t v76 = v43 + 16;
  switch(v53)
  {
    case 1u:
      uint64_t v81 = a1;
      (*(void (**)(uint64_t))(v416 + 16))(a1);
      uint64_t v92 = (v398 + a1) & v69;
      unint64_t v93 = (unint64_t)&a2[v398] & v69;
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v415 + 16))(v92, v93, AssociatedTypeWitness);
      *(unsigned char *)(v92 + v399) = *(unsigned char *)(v93 + v399);
      if (v418 > 3) {
        goto LABEL_100;
      }
      unsigned int v94 = ((1 << (8 * v418)) | 2u) >> (8 * v418);
      unsigned int v95 = v94 | 0x10;
      BOOL v29 = HIWORD(v94) == 0;
      uint64_t v96 = 2;
      if (!v29) {
        uint64_t v96 = 4;
      }
      if (v95 <= 0xFF) {
LABEL_100:
      }
        uint64_t v96 = 1;
      unint64_t v98 = v401;
      unint64_t v97 = v402;
      unint64_t v83 = v405;
      unint64_t v82 = v407;
      unint64_t v99 = v420 + v96;
      if (v99 <= v419) {
        unint64_t v99 = v419;
      }
      if (v410 > 3) {
        goto LABEL_107;
      }
      char v100 = 1;
      unsigned int v101 = ((1 << v403) | 2u) >> v403;
      unsigned int v102 = v101 | 0x10;
      BOOL v29 = HIWORD(v101) == 0;
      uint64_t v103 = 2;
      if (!v29) {
        uint64_t v103 = 4;
      }
      if (v102 <= 0xFF)
      {
LABEL_107:
        uint64_t v103 = 1;
        char v100 = 1;
      }
      goto LABEL_750;
    case 2u:
      unsigned int v104 = a2[v412];
      unsigned int v105 = v104 - 2;
      if (v104 < 2)
      {
        uint64_t v81 = a1;
        unint64_t v83 = v51;
        unint64_t v82 = v407;
        unsigned int v107 = v44;
        unsigned int v108 = v418;
      }
      else
      {
        if (v412 <= 3) {
          uint64_t v106 = v412;
        }
        else {
          uint64_t v106 = 4;
        }
        unsigned int v107 = v44;
        uint64_t v81 = a1;
        unint64_t v83 = v51;
        unint64_t v82 = v407;
        unsigned int v108 = v418;
        switch(v106)
        {
          case 1:
            int v109 = *a2;
            goto LABEL_232;
          case 2:
            int v109 = *(unsigned __int16 *)a2;
            goto LABEL_232;
          case 3:
            int v109 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_232;
          case 4:
            int v109 = *(_DWORD *)a2;
LABEL_232:
            if (v412 < 4) {
              unsigned int v104 = (v109 | (v105 << (8 * v412))) + 2;
            }
            else {
              unsigned int v104 = v109 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v183 = v104 == 1;
      uint64_t v184 = v416;
      if (v104 == 1) {
        uint64_t v184 = v415;
      }
      (*(void (**)(uint64_t))(v184 + 16))(v81);
      *(unsigned char *)(v81 + v412) = v183;
      *(unsigned char *)(v421 + v81) = a2[v421];
      if (v108 > 3) {
        goto LABEL_241;
      }
      unsigned int v185 = ((1 << (8 * v108)) | 2u) >> (8 * v108);
      unsigned int v186 = v185 | 0x10;
      BOOL v29 = HIWORD(v185) == 0;
      uint64_t v187 = 2;
      if (!v29) {
        uint64_t v187 = 4;
      }
      if (v186 <= 0xFF) {
LABEL_241:
      }
        uint64_t v187 = 1;
      unint64_t v98 = v401;
      unint64_t v97 = v402;
      unint64_t v99 = v420 + v187;
      if (v99 <= v419) {
        unint64_t v99 = v419;
      }
      if (v107 <= 3)
      {
        unsigned int v188 = ((1 << v403) | 2u) >> v403;
        unsigned int v189 = v188 | 0x10;
        BOOL v29 = HIWORD(v188) == 0;
        char v100 = 2;
        uint64_t v103 = 4;
        if (v29) {
          uint64_t v103 = 2;
        }
        if (v189 > 0xFF) {
          goto LABEL_750;
        }
      }
      char v100 = 2;
      goto LABEL_749;
    case 3u:
      unsigned int v110 = a2[v412];
      unsigned int v111 = v110 - 2;
      if (v110 < 2)
      {
        uint64_t v81 = a1;
        unint64_t v83 = v51;
        unint64_t v82 = v407;
        unsigned int v113 = v44;
        unsigned int v114 = v418;
      }
      else
      {
        if (v412 <= 3) {
          uint64_t v112 = v412;
        }
        else {
          uint64_t v112 = 4;
        }
        unsigned int v113 = v44;
        uint64_t v81 = a1;
        unint64_t v83 = v51;
        unint64_t v82 = v407;
        unsigned int v114 = v418;
        switch(v112)
        {
          case 1:
            int v115 = *a2;
            goto LABEL_253;
          case 2:
            int v115 = *(unsigned __int16 *)a2;
            goto LABEL_253;
          case 3:
            int v115 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_253;
          case 4:
            int v115 = *(_DWORD *)a2;
LABEL_253:
            if (v412 < 4) {
              unsigned int v110 = (v115 | (v111 << (8 * v412))) + 2;
            }
            else {
              unsigned int v110 = v115 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v190 = v110 == 1;
      uint64_t v191 = v416;
      if (v110 == 1) {
        uint64_t v191 = v415;
      }
      (*(void (**)(uint64_t))(v191 + 16))(v81);
      *(unsigned char *)(v81 + v412) = v190;
      if (v114 > 3) {
        goto LABEL_262;
      }
      unsigned int v192 = ((1 << (8 * v114)) | 2u) >> (8 * v114);
      unsigned int v193 = v192 | 0x10;
      BOOL v29 = HIWORD(v192) == 0;
      uint64_t v194 = 2;
      if (!v29) {
        uint64_t v194 = 4;
      }
      if (v193 <= 0xFF) {
LABEL_262:
      }
        uint64_t v194 = 1;
      unint64_t v98 = v401;
      unint64_t v97 = v402;
      unint64_t v99 = v420 + v194;
      if (v99 <= v419) {
        unint64_t v99 = v419;
      }
      if (v113 <= 3)
      {
        unsigned int v195 = ((1 << v403) | 2u) >> v403;
        unsigned int v196 = v195 | 0x10;
        BOOL v29 = HIWORD(v195) == 0;
        uint64_t v103 = 2;
        if (!v29) {
          uint64_t v103 = 4;
        }
        if (v196 > 0xFF)
        {
          char v100 = 3;
          goto LABEL_750;
        }
      }
      char v100 = 3;
      goto LABEL_749;
    case 4u:
      unsigned int v116 = a2[v412];
      unsigned int v117 = v116 - 2;
      if (v116 < 2)
      {
        uint64_t v81 = a1;
        unint64_t v83 = v51;
        unint64_t v82 = v407;
        unsigned int v119 = v44;
        unsigned int v120 = v418;
      }
      else
      {
        if (v412 <= 3) {
          uint64_t v118 = v412;
        }
        else {
          uint64_t v118 = 4;
        }
        unsigned int v119 = v44;
        uint64_t v81 = a1;
        unint64_t v83 = v51;
        unint64_t v82 = v407;
        unsigned int v120 = v418;
        switch(v118)
        {
          case 1:
            int v121 = *a2;
            goto LABEL_274;
          case 2:
            int v121 = *(unsigned __int16 *)a2;
            goto LABEL_274;
          case 3:
            int v121 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_274;
          case 4:
            int v121 = *(_DWORD *)a2;
LABEL_274:
            if (v412 < 4) {
              unsigned int v116 = (v121 | (v117 << (8 * v412))) + 2;
            }
            else {
              unsigned int v116 = v121 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v197 = v116 == 1;
      uint64_t v198 = v416;
      if (v116 == 1) {
        uint64_t v198 = v415;
      }
      (*(void (**)(uint64_t))(v198 + 16))(v81);
      *(unsigned char *)(v81 + v412) = v197;
      *(void *)((v81 + v421 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)((unint64_t)&a2[v421 + 7] & 0xFFFFFFFFFFFFFFF8);
      if (v120 > 3) {
        goto LABEL_283;
      }
      unsigned int v199 = ((1 << (8 * v120)) | 2u) >> (8 * v120);
      unsigned int v200 = v199 | 0x10;
      BOOL v29 = HIWORD(v199) == 0;
      uint64_t v201 = 2;
      if (!v29) {
        uint64_t v201 = 4;
      }
      if (v200 <= 0xFF) {
LABEL_283:
      }
        uint64_t v201 = 1;
      unint64_t v98 = v401;
      unint64_t v97 = v402;
      unint64_t v99 = v420 + v201;
      if (v99 <= v419) {
        unint64_t v99 = v419;
      }
      if (v119 <= 3)
      {
        unsigned int v202 = ((1 << v403) | 2u) >> v403;
        unsigned int v203 = v202 | 0x10;
        BOOL v29 = HIWORD(v202) == 0;
        uint64_t v103 = 2;
        char v100 = 4;
        if (!v29) {
          uint64_t v103 = 4;
        }
        if (v203 > 0xFF) {
          goto LABEL_750;
        }
      }
      char v100 = 4;
      goto LABEL_749;
    case 5u:
      unsigned int v122 = a2[v412];
      unsigned int v123 = v122 - 2;
      if (v122 < 2)
      {
        uint64_t v81 = a1;
        unint64_t v83 = v51;
        unint64_t v82 = v407;
        unsigned int v125 = v44;
        unsigned int v126 = v418;
      }
      else
      {
        if (v412 <= 3) {
          uint64_t v124 = v412;
        }
        else {
          uint64_t v124 = 4;
        }
        unsigned int v125 = v44;
        uint64_t v81 = a1;
        unint64_t v83 = v51;
        unint64_t v82 = v407;
        unsigned int v126 = v418;
        switch(v124)
        {
          case 1:
            int v127 = *a2;
            goto LABEL_294;
          case 2:
            int v127 = *(unsigned __int16 *)a2;
            goto LABEL_294;
          case 3:
            int v127 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_294;
          case 4:
            int v127 = *(_DWORD *)a2;
LABEL_294:
            if (v412 < 4) {
              unsigned int v122 = (v127 | (v123 << (8 * v412))) + 2;
            }
            else {
              unsigned int v122 = v127 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v204 = v122 == 1;
      uint64_t v205 = v416;
      if (v122 == 1) {
        uint64_t v205 = v415;
      }
      (*(void (**)(uint64_t))(v205 + 16))(v81);
      *(unsigned char *)(v81 + v412) = v204;
      *(void *)((v81 + v421 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)((unint64_t)&a2[v421 + 7] & 0xFFFFFFFFFFFFFFF8);
      if (v126 > 3) {
        goto LABEL_303;
      }
      unsigned int v206 = ((1 << (8 * v126)) | 2u) >> (8 * v126);
      unsigned int v207 = v206 | 0x10;
      BOOL v29 = HIWORD(v206) == 0;
      uint64_t v208 = 2;
      if (!v29) {
        uint64_t v208 = 4;
      }
      if (v207 <= 0xFF) {
LABEL_303:
      }
        uint64_t v208 = 1;
      unint64_t v98 = v401;
      unint64_t v97 = v402;
      unint64_t v99 = v420 + v208;
      if (v99 <= v419) {
        unint64_t v99 = v419;
      }
      if (v125 <= 3)
      {
        unsigned int v209 = ((1 << v403) | 2u) >> v403;
        unsigned int v210 = v209 | 0x10;
        BOOL v29 = HIWORD(v209) == 0;
        uint64_t v103 = 2;
        if (!v29) {
          uint64_t v103 = 4;
        }
        if (v210 > 0xFF)
        {
          char v100 = 5;
          goto LABEL_750;
        }
      }
      char v100 = 5;
      goto LABEL_749;
    case 6u:
      unsigned int v128 = a2[v412];
      unsigned int v129 = v128 - 2;
      if (v128 < 2)
      {
        uint64_t v81 = a1;
        unint64_t v83 = v51;
        unsigned int v131 = v44;
        unsigned int v132 = v418;
      }
      else
      {
        if (v412 <= 3) {
          uint64_t v130 = v412;
        }
        else {
          uint64_t v130 = 4;
        }
        unsigned int v131 = v44;
        uint64_t v81 = a1;
        unint64_t v83 = v51;
        unsigned int v132 = v418;
        switch(v130)
        {
          case 1:
            int v133 = *a2;
            goto LABEL_315;
          case 2:
            int v133 = *(unsigned __int16 *)a2;
            goto LABEL_315;
          case 3:
            int v133 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_315;
          case 4:
            int v133 = *(_DWORD *)a2;
LABEL_315:
            if (v412 < 4) {
              unsigned int v128 = (v133 | (v129 << (8 * v412))) + 2;
            }
            else {
              unsigned int v128 = v133 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v211 = v128 == 1;
      uint64_t v212 = v416;
      if (v128 == 1) {
        uint64_t v212 = v415;
      }
      (*(void (**)(uint64_t))(v212 + 16))(v81);
      *(unsigned char *)(v81 + v412) = v211;
      uint64_t v213 = (v400 + v81) & v70;
      unint64_t v214 = (unsigned __int8 *)((unint64_t)&a2[v400] & v70);
      unsigned int v215 = v214[v412];
      unsigned int v216 = v215 - 2;
      if (v215 < 2)
      {
        unint64_t v82 = v407;
      }
      else
      {
        if (v412 <= 3) {
          uint64_t v217 = v412;
        }
        else {
          uint64_t v217 = 4;
        }
        unint64_t v82 = v407;
        switch(v217)
        {
          case 1:
            int v218 = *v214;
            goto LABEL_449;
          case 2:
            int v218 = *(unsigned __int16 *)v214;
            goto LABEL_449;
          case 3:
            int v218 = *(unsigned __int16 *)v214 | (v214[2] << 16);
            goto LABEL_449;
          case 4:
            int v218 = *(_DWORD *)v214;
LABEL_449:
            if (v412 < 4) {
              unsigned int v215 = (v218 | (v216 << (8 * v412))) + 2;
            }
            else {
              unsigned int v215 = v218 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v272 = v215 == 1;
      uint64_t v273 = v416;
      if (v215 == 1) {
        uint64_t v273 = v415;
      }
      (*(void (**)(uint64_t))(v273 + 16))(v213);
      *(unsigned char *)(v213 + v412) = v272;
      if (v132 > 3) {
        goto LABEL_458;
      }
      unsigned int v274 = ((1 << (8 * v132)) | 2u) >> (8 * v132);
      unsigned int v275 = v274 | 0x10;
      BOOL v29 = HIWORD(v274) == 0;
      uint64_t v276 = 2;
      if (!v29) {
        uint64_t v276 = 4;
      }
      if (v275 <= 0xFF) {
LABEL_458:
      }
        uint64_t v276 = 1;
      unint64_t v98 = v401;
      unint64_t v97 = v402;
      unint64_t v99 = v420 + v276;
      if (v99 <= v419) {
        unint64_t v99 = v419;
      }
      if (v131 <= 3)
      {
        unsigned int v277 = ((1 << v403) | 2u) >> v403;
        unsigned int v278 = v277 | 0x10;
        BOOL v29 = HIWORD(v277) == 0;
        uint64_t v103 = 2;
        if (!v29) {
          uint64_t v103 = 4;
        }
        if (v278 > 0xFF)
        {
          char v100 = 6;
          goto LABEL_750;
        }
      }
      char v100 = 6;
      goto LABEL_749;
    case 7u:
      unsigned int v134 = a2[v412];
      unsigned int v135 = v134 - 2;
      if (v134 < 2)
      {
        uint64_t v81 = a1;
        unint64_t v83 = v51;
        unsigned int v137 = v44;
        unsigned int v138 = v418;
      }
      else
      {
        if (v412 <= 3) {
          uint64_t v136 = v412;
        }
        else {
          uint64_t v136 = 4;
        }
        unsigned int v137 = v44;
        uint64_t v81 = a1;
        unint64_t v83 = v51;
        unsigned int v138 = v418;
        switch(v136)
        {
          case 1:
            int v139 = *a2;
            goto LABEL_330;
          case 2:
            int v139 = *(unsigned __int16 *)a2;
            goto LABEL_330;
          case 3:
            int v139 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_330;
          case 4:
            int v139 = *(_DWORD *)a2;
LABEL_330:
            if (v412 < 4) {
              unsigned int v134 = (v139 | (v135 << (8 * v412))) + 2;
            }
            else {
              unsigned int v134 = v139 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v219 = v134 == 1;
      uint64_t v220 = v416;
      if (v134 == 1) {
        uint64_t v220 = v415;
      }
      (*(void (**)(uint64_t))(v220 + 16))(v81);
      *(unsigned char *)(v81 + v412) = v219;
      uint64_t v221 = (v400 + v81) & v70;
      unsigned int v222 = (unsigned __int8 *)((unint64_t)&a2[v400] & v70);
      unsigned int v223 = v222[v412];
      unsigned int v224 = v223 - 2;
      if (v223 < 2)
      {
        unint64_t v82 = v407;
      }
      else
      {
        if (v412 <= 3) {
          uint64_t v225 = v412;
        }
        else {
          uint64_t v225 = 4;
        }
        unint64_t v82 = v407;
        switch(v225)
        {
          case 1:
            int v226 = *v222;
            goto LABEL_470;
          case 2:
            int v226 = *(unsigned __int16 *)v222;
            goto LABEL_470;
          case 3:
            int v226 = *(unsigned __int16 *)v222 | (v222[2] << 16);
            goto LABEL_470;
          case 4:
            int v226 = *(_DWORD *)v222;
LABEL_470:
            if (v412 < 4) {
              unsigned int v223 = (v226 | (v224 << (8 * v412))) + 2;
            }
            else {
              unsigned int v223 = v226 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v279 = v223 == 1;
      uint64_t v280 = v416;
      if (v223 == 1) {
        uint64_t v280 = v415;
      }
      (*(void (**)(uint64_t))(v280 + 16))(v221);
      *(unsigned char *)(v221 + v412) = v279;
      if (v138 > 3) {
        goto LABEL_479;
      }
      unsigned int v281 = ((1 << (8 * v138)) | 2u) >> (8 * v138);
      unsigned int v282 = v281 | 0x10;
      BOOL v29 = HIWORD(v281) == 0;
      uint64_t v283 = 2;
      if (!v29) {
        uint64_t v283 = 4;
      }
      if (v282 <= 0xFF) {
LABEL_479:
      }
        uint64_t v283 = 1;
      unint64_t v98 = v401;
      unint64_t v97 = v402;
      unint64_t v99 = v420 + v283;
      if (v99 <= v419) {
        unint64_t v99 = v419;
      }
      if (v137 <= 3)
      {
        unsigned int v284 = ((1 << v403) | 2u) >> v403;
        unsigned int v285 = v284 | 0x10;
        BOOL v29 = HIWORD(v284) == 0;
        uint64_t v103 = 2;
        if (!v29) {
          uint64_t v103 = 4;
        }
        if (v285 > 0xFF)
        {
          char v100 = 7;
          goto LABEL_750;
        }
      }
      char v100 = 7;
      goto LABEL_749;
    case 8u:
      unsigned int v140 = a2[v412];
      unsigned int v141 = v140 - 2;
      if (v140 < 2)
      {
        unint64_t v144 = v73;
        uint64_t v145 = v418;
        uint64_t v143 = v397;
      }
      else
      {
        if (v412 <= 3) {
          uint64_t v142 = v412;
        }
        else {
          uint64_t v142 = 4;
        }
        uint64_t v143 = v397;
        unint64_t v144 = v73;
        uint64_t v145 = v418;
        switch(v142)
        {
          case 1:
            int v146 = *a2;
            goto LABEL_345;
          case 2:
            int v146 = *(unsigned __int16 *)a2;
            goto LABEL_345;
          case 3:
            int v146 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_345;
          case 4:
            int v146 = *(_DWORD *)a2;
LABEL_345:
            if (v412 < 4) {
              unsigned int v140 = (v146 | (v141 << (8 * v412))) + 2;
            }
            else {
              unsigned int v140 = v146 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v227 = v140 == 1;
      uint64_t v228 = v416;
      if (v140 == 1) {
        uint64_t v228 = v415;
      }
      (*(void (**)(uint64_t))(v228 + 16))(a1);
      *(unsigned char *)(a1 + v412) = v227;
      BOOL v229 = (unsigned __int8 *)((unint64_t)&a2[v143] & v71);
      if (v145 > 3) {
        goto LABEL_351;
      }
      unsigned int v231 = ((1 << (8 * v145)) | 2u) >> (8 * v145);
      if (HIWORD(v231))
      {
        unsigned int v230 = *(_DWORD *)&v229[v145];
      }
      else if ((v231 | 0x10) <= 0xFF)
      {
LABEL_351:
        unsigned int v230 = v229[v145];
      }
      else
      {
        unsigned int v230 = *(unsigned __int16 *)&v229[v145];
      }
      unsigned int v232 = (unsigned __int8 *)((v143 + a1) & v71);
      unsigned int v233 = v230 - 16;
      if (v230 < 0x10)
      {
        unint64_t v83 = v405;
      }
      else
      {
        if (v145 <= 3) {
          uint64_t v234 = v145;
        }
        else {
          uint64_t v234 = 4;
        }
        unint64_t v83 = v405;
        switch(v234)
        {
          case 1:
            int v235 = *v229;
            goto LABEL_491;
          case 2:
            int v235 = *(unsigned __int16 *)v229;
            goto LABEL_491;
          case 3:
            int v235 = *(unsigned __int16 *)v229 | (v229[2] << 16);
            goto LABEL_491;
          case 4:
            int v235 = *(_DWORD *)v229;
LABEL_491:
            if (v145 < 4) {
              v235 |= v233 << (8 * v145);
            }
            unsigned int v230 = v235 + 16;
            break;
          default:
            break;
        }
      }
      switch(v230)
      {
        case 0u:
          long long v286 = *(_OWORD *)v229;
          *((void *)v232 + 2) = *((void *)v229 + 2);
          *(_OWORD *)unsigned int v232 = v286;
          uint64_t v81 = a1;
          unint64_t v98 = v401;
          unint64_t v97 = v402;
          unint64_t v82 = v407;
          if (v145 > 3) {
            goto LABEL_498;
          }
          unsigned int v287 = ((1 << (8 * v145)) | 2u) >> (8 * v145);
          unsigned int v288 = v287 | 0x10;
          if (HIWORD(v287))
          {
            *(_DWORD *)&v232[v145] = 0;
          }
          else
          {
            if (v288 <= 0xFF)
            {
LABEL_498:
              v232[v145] = 0;
              goto LABEL_679;
            }
            *(_WORD *)&v232[v145] = 0;
          }
          goto LABEL_723;
        case 1u:
          *(void *)unsigned int v232 = *(void *)v229;
          uint64_t v81 = a1;
          unint64_t v98 = v401;
          unint64_t v97 = v402;
          unint64_t v82 = v407;
          if (v145 > 3) {
            goto LABEL_513;
          }
          __int16 v292 = 1;
          unsigned int v293 = ((1 << (8 * v145)) | 2u) >> (8 * v145);
          unsigned int v288 = v293 | 0x10;
          if (HIWORD(v293))
          {
            *(_DWORD *)&v232[v145] = 1;
            goto LABEL_723;
          }
          if (v288 > 0xFF) {
            goto LABEL_722;
          }
LABEL_513:
          char v294 = 1;
          goto LABEL_678;
        case 2u:
          *(_OWORD *)unsigned int v232 = *(_OWORD *)v229;
          uint64_t v81 = a1;
          unint64_t v98 = v401;
          unint64_t v97 = v402;
          unint64_t v82 = v407;
          if (v145 > 3) {
            goto LABEL_517;
          }
          unsigned int v295 = ((1 << (8 * v145)) | 2u) >> (8 * v145);
          unsigned int v288 = v295 | 0x10;
          if (HIWORD(v295))
          {
            *(_DWORD *)&v232[v145] = 2;
            goto LABEL_723;
          }
          if (v288 <= 0xFF)
          {
LABEL_517:
            char v294 = 2;
            goto LABEL_678;
          }
          __int16 v292 = 2;
          goto LABEL_722;
        case 3u:
          *unsigned int v232 = *v229;
          uint64_t v81 = a1;
          unint64_t v98 = v401;
          unint64_t v97 = v402;
          unint64_t v82 = v407;
          if (v145 > 3) {
            goto LABEL_521;
          }
          unsigned int v296 = ((1 << (8 * v145)) | 2u) >> (8 * v145);
          unsigned int v288 = v296 | 0x10;
          if (HIWORD(v296))
          {
            *(_DWORD *)&v232[v145] = 3;
            goto LABEL_723;
          }
          if (v288 <= 0xFF)
          {
LABEL_521:
            char v294 = 3;
            goto LABEL_678;
          }
          __int16 v292 = 3;
          goto LABEL_722;
        case 4u:
          *unsigned int v232 = *v229;
          uint64_t v81 = a1;
          unint64_t v98 = v401;
          unint64_t v97 = v402;
          unint64_t v82 = v407;
          if (v145 > 3) {
            goto LABEL_525;
          }
          unsigned int v297 = ((1 << (8 * v145)) | 2u) >> (8 * v145);
          unsigned int v288 = v297 | 0x10;
          if (HIWORD(v297))
          {
            *(_DWORD *)&v232[v145] = 4;
            goto LABEL_723;
          }
          if (v288 <= 0xFF)
          {
LABEL_525:
            char v294 = 4;
            goto LABEL_678;
          }
          __int16 v292 = 4;
          goto LABEL_722;
        case 5u:
          *unsigned int v232 = *v229;
          uint64_t v81 = a1;
          unint64_t v98 = v401;
          unint64_t v97 = v402;
          unint64_t v82 = v407;
          if (v145 > 3) {
            goto LABEL_529;
          }
          unsigned int v298 = ((1 << (8 * v145)) | 2u) >> (8 * v145);
          unsigned int v288 = v298 | 0x10;
          if (HIWORD(v298))
          {
            *(_DWORD *)&v232[v145] = 5;
            goto LABEL_723;
          }
          if (v288 <= 0xFF)
          {
LABEL_529:
            char v294 = 5;
            goto LABEL_678;
          }
          __int16 v292 = 5;
          goto LABEL_722;
        case 6u:
          *unsigned int v232 = *v229;
          uint64_t v81 = a1;
          unint64_t v98 = v401;
          unint64_t v97 = v402;
          unint64_t v82 = v407;
          if (v145 > 3) {
            goto LABEL_533;
          }
          unsigned int v299 = ((1 << (8 * v145)) | 2u) >> (8 * v145);
          unsigned int v288 = v299 | 0x10;
          if (HIWORD(v299))
          {
            *(_DWORD *)&v232[v145] = 6;
            goto LABEL_723;
          }
          if (v288 <= 0xFF)
          {
LABEL_533:
            char v294 = 6;
            goto LABEL_678;
          }
          __int16 v292 = 6;
          goto LABEL_722;
        case 7u:
          *unsigned int v232 = *v229;
          uint64_t v81 = a1;
          unint64_t v98 = v401;
          unint64_t v97 = v402;
          unint64_t v82 = v407;
          if (v145 > 3) {
            goto LABEL_537;
          }
          unsigned int v300 = ((1 << (8 * v145)) | 2u) >> (8 * v145);
          unsigned int v288 = v300 | 0x10;
          if (HIWORD(v300))
          {
            *(_DWORD *)&v232[v145] = 7;
            goto LABEL_723;
          }
          if (v288 <= 0xFF)
          {
LABEL_537:
            char v294 = 7;
            goto LABEL_678;
          }
          __int16 v292 = 7;
          goto LABEL_722;
        case 8u:
          (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v391 + 16))(v232, v229, v392);
          unint64_t v351 = (void *)((unint64_t)&v232[v388] & 0xFFFFFFFFFFFFFFF8);
          unsigned int v352 = (void *)((unint64_t)&v229[v388] & 0xFFFFFFFFFFFFFFF8);
          void *v351 = *v352;
          unint64_t v353 = ((unint64_t)v351 + v389) & v72;
          unint64_t v354 = ((unint64_t)v352 + v389) & v72;
          unint64_t v355 = *(void (**)(unint64_t, unint64_t, uint64_t))(v393 + 16);
          swift_bridgeObjectRetain();
          v355(v353, v354, v394);
          unint64_t v356 = (void *)((v390 + v353) & 0xFFFFFFFFFFFFFFF8);
          unint64_t v357 = (void *)((v390 + v354) & 0xFFFFFFFFFFFFFFF8);
          void *v356 = *v357;
          unint64_t v358 = (void *)(((unint64_t)v356 + 15) & 0xFFFFFFFFFFFFFFF8);
          unsigned int v359 = (void *)(((unint64_t)v357 + 15) & 0xFFFFFFFFFFFFFFF8);
          void *v358 = *v359;
          v358[1] = v359[1];
          v232[v144] = v229[v144];
          *(unsigned char *)((unint64_t)&v232[v144] | 1) = *(unsigned char *)((unint64_t)&v229[v144] | 1);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v81 = a1;
          unint64_t v98 = v401;
          unint64_t v97 = v402;
          unint64_t v82 = v407;
          if (v145 > 3) {
            goto LABEL_631;
          }
          unsigned int v360 = ((1 << (8 * v145)) | 2u) >> (8 * v145);
          unsigned int v288 = v360 | 0x10;
          if (HIWORD(v360))
          {
            *(_DWORD *)&v232[v145] = 8;
            goto LABEL_723;
          }
          if (v288 <= 0xFF)
          {
LABEL_631:
            char v294 = 8;
            goto LABEL_678;
          }
          __int16 v292 = 8;
          goto LABEL_722;
        case 9u:
          unsigned int v301 = *(void **)v229;
          *(void *)unsigned int v232 = *(void *)v229;
          id v302 = v301;
          uint64_t v81 = a1;
          unint64_t v98 = v401;
          unint64_t v97 = v402;
          unint64_t v82 = v407;
          if (v145 > 3) {
            goto LABEL_541;
          }
          unsigned int v303 = ((1 << (8 * v145)) | 2u) >> (8 * v145);
          unsigned int v288 = v303 | 0x10;
          if (HIWORD(v303))
          {
            *(_DWORD *)&v232[v145] = 9;
            goto LABEL_723;
          }
          if (v288 <= 0xFF)
          {
LABEL_541:
            char v294 = 9;
            goto LABEL_678;
          }
          __int16 v292 = 9;
          goto LABEL_722;
        case 0xAu:
          *unsigned int v232 = *v229;
          uint64_t v81 = a1;
          unint64_t v98 = v401;
          unint64_t v97 = v402;
          unint64_t v82 = v407;
          if (v145 > 3) {
            goto LABEL_545;
          }
          unsigned int v304 = ((1 << (8 * v145)) | 2u) >> (8 * v145);
          unsigned int v288 = v304 | 0x10;
          if (HIWORD(v304))
          {
            *(_DWORD *)&v232[v145] = 10;
            goto LABEL_723;
          }
          if (v288 <= 0xFF)
          {
LABEL_545:
            char v294 = 10;
            goto LABEL_678;
          }
          __int16 v292 = 10;
          goto LABEL_722;
        case 0xBu:
          *(_WORD *)unsigned int v232 = *(_WORD *)v229;
          uint64_t v81 = a1;
          unint64_t v98 = v401;
          unint64_t v97 = v402;
          unint64_t v82 = v407;
          if (v145 > 3) {
            goto LABEL_549;
          }
          unsigned int v305 = ((1 << (8 * v145)) | 2u) >> (8 * v145);
          unsigned int v288 = v305 | 0x10;
          if (HIWORD(v305))
          {
            *(_DWORD *)&v232[v145] = 11;
            goto LABEL_723;
          }
          if (v288 <= 0xFF)
          {
LABEL_549:
            char v294 = 11;
            goto LABEL_678;
          }
          __int16 v292 = 11;
          goto LABEL_722;
        case 0xCu:
          uint64_t v306 = *(void *)v229;
          uint64_t v307 = *((void *)v229 + 1);
          char v308 = v229[16];
          sub_10009C5FC(v306, v307, v308);
          *(void *)unsigned int v232 = v306;
          *((void *)v232 + 1) = v307;
          v232[16] = v308;
          uint64_t v81 = a1;
          unint64_t v98 = v401;
          unint64_t v97 = v402;
          unint64_t v82 = v407;
          if (v145 > 3) {
            goto LABEL_553;
          }
          unsigned int v309 = ((1 << (8 * v145)) | 2u) >> (8 * v145);
          unsigned int v288 = v309 | 0x10;
          if (HIWORD(v309))
          {
            *(_DWORD *)&v232[v145] = 12;
            goto LABEL_723;
          }
          if (v288 <= 0xFF)
          {
LABEL_553:
            char v294 = 12;
            goto LABEL_678;
          }
          __int16 v292 = 12;
          goto LABEL_722;
        case 0xDu:
          long long v310 = *(_OWORD *)v229;
          *((void *)v232 + 2) = *((void *)v229 + 2);
          *(_OWORD *)unsigned int v232 = v310;
          uint64_t v81 = a1;
          unint64_t v98 = v401;
          unint64_t v97 = v402;
          unint64_t v82 = v407;
          if (v145 > 3) {
            goto LABEL_557;
          }
          unsigned int v311 = ((1 << (8 * v145)) | 2u) >> (8 * v145);
          unsigned int v288 = v311 | 0x10;
          if (HIWORD(v311))
          {
            *(_DWORD *)&v232[v145] = 13;
            goto LABEL_723;
          }
          if (v288 <= 0xFF)
          {
LABEL_557:
            char v294 = 13;
            goto LABEL_678;
          }
          __int16 v292 = 13;
          goto LABEL_722;
        case 0xEu:
          if (*((void *)v229 + 2) >> 60 == 11)
          {
            long long v312 = *(_OWORD *)v229;
            long long v313 = *((_OWORD *)v229 + 1);
            long long v314 = *((_OWORD *)v229 + 2);
            *((void *)v232 + 6) = *((void *)v229 + 6);
            *((_OWORD *)v232 + 1) = v313;
            *((_OWORD *)v232 + 2) = v314;
            *(_OWORD *)unsigned int v232 = v312;
            uint64_t v81 = a1;
            unint64_t v98 = v401;
            unint64_t v97 = v402;
          }
          else
          {
            *(void *)unsigned int v232 = *(void *)v229;
            unsigned int v364 = (uint64_t *)(v229 + 8);
            unint64_t v365 = *((void *)v229 + 2);
            uint64_t v81 = a1;
            if (v365 >> 60 == 15)
            {
              *(_OWORD *)(v232 + 8) = *(_OWORD *)v364;
            }
            else
            {
              uint64_t v368 = *v364;
              sub_10001EBB0(*v364, *((void *)v229 + 2));
              *((void *)v232 + 1) = v368;
              *((void *)v232 + 2) = v365;
            }
            unint64_t v98 = v401;
            unint64_t v97 = v402;
            long long v369 = *(_OWORD *)(v229 + 24);
            v232[40] = v229[40];
            *(_OWORD *)(v232 + 24) = v369;
            *((void *)v232 + 6) = *((void *)v229 + 6);
          }
          v232[56] = v229[56];
          unint64_t v82 = v407;
          if (v145 > 3) {
            goto LABEL_677;
          }
          unsigned int v370 = ((1 << (8 * v145)) | 2u) >> (8 * v145);
          unsigned int v288 = v370 | 0x10;
          if (HIWORD(v370))
          {
            *(_DWORD *)&v232[v145] = 14;
            goto LABEL_723;
          }
          if (v288 <= 0xFF)
          {
LABEL_677:
            char v294 = 14;
            goto LABEL_678;
          }
          __int16 v292 = 14;
          goto LABEL_722;
        case 0xFu:
          *unsigned int v232 = *v229;
          uint64_t v81 = a1;
          unint64_t v98 = v401;
          unint64_t v97 = v402;
          unint64_t v82 = v407;
          if (v145 > 3) {
            goto LABEL_563;
          }
          unsigned int v315 = ((1 << (8 * v145)) | 2u) >> (8 * v145);
          unsigned int v288 = v315 | 0x10;
          if (HIWORD(v315))
          {
            *(_DWORD *)&v232[v145] = 15;
          }
          else
          {
            if (v288 <= 0xFF)
            {
LABEL_563:
              char v294 = 15;
LABEL_678:
              v232[v145] = v294;
LABEL_679:
              unsigned int v371 = v410;
              if (v145 > 3) {
                goto LABEL_683;
              }
              unsigned int v372 = ((1 << (8 * v145)) | 2u) >> (8 * v145);
              unsigned int v373 = v372 | 0x10;
              BOOL v29 = HIWORD(v372) == 0;
              uint64_t v374 = 2;
              if (!v29) {
                uint64_t v374 = 4;
              }
              if (v373 <= 0xFF) {
LABEL_683:
              }
                uint64_t v374 = 1;
LABEL_726:
              unint64_t v99 = v420 + v374;
              if (v99 <= v419) {
                unint64_t v99 = v419;
              }
              if (v371 <= 3)
              {
                unsigned int v379 = ((1 << v403) | 2u) >> v403;
                unsigned int v380 = v379 | 0x10;
                BOOL v29 = HIWORD(v379) == 0;
                uint64_t v103 = 2;
                if (!v29) {
                  uint64_t v103 = 4;
                }
                if (v380 > 0xFF)
                {
                  char v100 = 8;
                  goto LABEL_750;
                }
              }
              char v100 = 8;
              goto LABEL_749;
            }
            __int16 v292 = 15;
LABEL_722:
            *(_WORD *)&v232[v145] = v292;
          }
LABEL_723:
          BOOL v29 = HIWORD(v288) == 0;
          uint64_t v374 = 2;
          if (!v29) {
            uint64_t v374 = 4;
          }
          unsigned int v371 = v410;
          goto LABEL_726;
        default:
          if (v145 > 3) {
            goto LABEL_626;
          }
          unsigned int v348 = ((1 << (8 * v145)) | 2u) >> (8 * v145);
          unsigned int v349 = v348 | 0x10;
          BOOL v29 = HIWORD(v348) == 0;
          uint64_t v350 = 2;
          if (!v29) {
            uint64_t v350 = 4;
          }
          if (v349 <= 0xFF) {
LABEL_626:
          }
            uint64_t v350 = 1;
          uint64_t v81 = a1;
          memcpy(v232, v229, v350 + v145);
          unint64_t v98 = v401;
          unint64_t v97 = v402;
          unint64_t v82 = v407;
          goto LABEL_679;
      }
    case 9u:
      unint64_t v409 = v76;
      unsigned int v147 = a2[v412];
      unsigned int v148 = v147 - 2;
      if (v147 < 2)
      {
        uint64_t v81 = a1;
      }
      else
      {
        if (v412 <= 3) {
          uint64_t v149 = v412;
        }
        else {
          uint64_t v149 = 4;
        }
        uint64_t v81 = a1;
        switch(v149)
        {
          case 1:
            int v150 = *a2;
            goto LABEL_366;
          case 2:
            int v150 = *(unsigned __int16 *)a2;
            goto LABEL_366;
          case 3:
            int v150 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_366;
          case 4:
            int v150 = *(_DWORD *)a2;
LABEL_366:
            if (v412 < 4) {
              unsigned int v147 = (v150 | (v148 << (8 * v412))) + 2;
            }
            else {
              unsigned int v147 = v150 + 2;
            }
            break;
          default:
            break;
        }
      }
      uint64_t v236 = *(void *)(v36 - 8);
      uint64_t v414 = v36;
      BOOL v237 = v147 == 1;
      uint64_t v238 = v416;
      if (v147 == 1) {
        uint64_t v238 = v415;
      }
      (*(void (**)(uint64_t))(v238 + 16))(v81);
      *(unsigned char *)(v81 + v412) = v237;
      unint64_t v239 = (unsigned __int8 *)((unint64_t)&a2[v421 + v38] & v74);
      if (v410 > 3) {
        goto LABEL_372;
      }
      unsigned int v241 = ((1 << v403) | 2u) >> v403;
      if (HIWORD(v241))
      {
        unsigned int v240 = *(_DWORD *)&v239[v410];
      }
      else if ((v241 | 0x10) <= 0xFF)
      {
LABEL_372:
        unsigned int v240 = v239[v410];
      }
      else
      {
        unsigned int v240 = *(unsigned __int16 *)&v239[v410];
      }
      unsigned int v242 = (unsigned __int8 *)((v421 + v81 + v38) & v74);
      unsigned int v243 = v240 - 16;
      if (v240 >= 0x10)
      {
        if (v410 <= 3) {
          uint64_t v244 = v410;
        }
        else {
          uint64_t v244 = 4;
        }
        switch(v244)
        {
          case 1:
            int v245 = *v239;
            goto LABEL_502;
          case 2:
            int v245 = *(unsigned __int16 *)v239;
            goto LABEL_502;
          case 3:
            int v245 = *(unsigned __int16 *)v239 | (v239[2] << 16);
            goto LABEL_502;
          case 4:
            int v245 = *(_DWORD *)v239;
LABEL_502:
            if (v410 < 4) {
              v245 |= v243 << v403;
            }
            unsigned int v240 = v245 + 16;
            break;
          default:
            goto LABEL_505;
        }
      }
      break;
    case 0xAu:
      unsigned int v151 = a2[v412];
      unsigned int v152 = v151 - 2;
      if (v151 < 2)
      {
        uint64_t v81 = a1;
        unint64_t v83 = v51;
        unint64_t v82 = v407;
        unsigned int v154 = v44;
        unsigned int v155 = v418;
      }
      else
      {
        if (v412 <= 3) {
          uint64_t v153 = v412;
        }
        else {
          uint64_t v153 = 4;
        }
        unsigned int v154 = v44;
        uint64_t v81 = a1;
        unint64_t v83 = v51;
        unint64_t v82 = v407;
        unsigned int v155 = v418;
        switch(v153)
        {
          case 1:
            int v156 = *a2;
            goto LABEL_386;
          case 2:
            int v156 = *(unsigned __int16 *)a2;
            goto LABEL_386;
          case 3:
            int v156 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_386;
          case 4:
            int v156 = *(_DWORD *)a2;
LABEL_386:
            if (v412 < 4) {
              unsigned int v151 = (v156 | (v152 << (8 * v412))) + 2;
            }
            else {
              unsigned int v151 = v156 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v246 = v151 == 1;
      uint64_t v247 = v416;
      if (v151 == 1) {
        uint64_t v247 = v415;
      }
      (*(void (**)(uint64_t))(v247 + 16))(v81);
      *(unsigned char *)(v81 + v412) = v246;
      unint64_t v248 = (unint64_t)&a2[v421 + 7] & 0xFFFFFFFFFFFFFFF8;
      char v249 = *(unsigned char *)(v248 + 8);
      unint64_t v250 = (v81 + v421 + 7) & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v250 = *(void *)v248;
      *(unsigned char *)(v250 + 8) = v249;
      if (v155 > 3) {
        goto LABEL_395;
      }
      unsigned int v251 = ((1 << (8 * v155)) | 2u) >> (8 * v155);
      unsigned int v252 = v251 | 0x10;
      BOOL v29 = HIWORD(v251) == 0;
      uint64_t v253 = 2;
      if (!v29) {
        uint64_t v253 = 4;
      }
      if (v252 <= 0xFF) {
LABEL_395:
      }
        uint64_t v253 = 1;
      unint64_t v98 = v401;
      unint64_t v97 = v402;
      unint64_t v99 = v420 + v253;
      if (v99 <= v419) {
        unint64_t v99 = v419;
      }
      if (v154 <= 3)
      {
        unsigned int v254 = ((1 << v403) | 2u) >> v403;
        unsigned int v255 = v254 | 0x10;
        BOOL v29 = HIWORD(v254) == 0;
        uint64_t v103 = 2;
        if (!v29) {
          uint64_t v103 = 4;
        }
        if (v255 > 0xFF)
        {
          char v100 = 10;
          goto LABEL_750;
        }
      }
      char v100 = 10;
      goto LABEL_749;
    case 0xBu:
      unsigned int v86 = a2[v412];
      unsigned int v87 = v86 - 2;
      if (v86 < 2)
      {
        uint64_t v81 = a1;
        unint64_t v83 = v51;
        unint64_t v82 = v407;
        unsigned int v89 = v44;
        unsigned int v90 = v418;
      }
      else
      {
        if (v412 <= 3) {
          uint64_t v88 = v412;
        }
        else {
          uint64_t v88 = 4;
        }
        unsigned int v89 = v44;
        uint64_t v81 = a1;
        unint64_t v83 = v51;
        unint64_t v82 = v407;
        unsigned int v90 = v418;
        switch(v88)
        {
          case 1:
            int v91 = *a2;
            goto LABEL_211;
          case 2:
            int v91 = *(unsigned __int16 *)a2;
            goto LABEL_211;
          case 3:
            int v91 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_211;
          case 4:
            int v91 = *(_DWORD *)a2;
LABEL_211:
            if (v412 < 4) {
              unsigned int v86 = (v91 | (v87 << (8 * v412))) + 2;
            }
            else {
              unsigned int v86 = v91 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v176 = v86 == 1;
      uint64_t v177 = v416;
      if (v86 == 1) {
        uint64_t v177 = v415;
      }
      (*(void (**)(uint64_t))(v177 + 16))(v81);
      *(unsigned char *)(v81 + v412) = v176;
      *(_OWORD *)((v81 + v421 + 7) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((unint64_t)&a2[v421 + 7] & 0xFFFFFFFFFFFFFFF8);
      if (v90 > 3) {
        goto LABEL_220;
      }
      unsigned int v178 = ((1 << (8 * v90)) | 2u) >> (8 * v90);
      unsigned int v179 = v178 | 0x10;
      BOOL v29 = HIWORD(v178) == 0;
      uint64_t v180 = 2;
      if (!v29) {
        uint64_t v180 = 4;
      }
      if (v179 <= 0xFF) {
LABEL_220:
      }
        uint64_t v180 = 1;
      unint64_t v98 = v401;
      unint64_t v97 = v402;
      unint64_t v99 = v420 + v180;
      if (v99 <= v419) {
        unint64_t v99 = v419;
      }
      if (v89 <= 3)
      {
        unsigned int v181 = ((1 << v403) | 2u) >> v403;
        unsigned int v182 = v181 | 0x10;
        BOOL v29 = HIWORD(v181) == 0;
        uint64_t v103 = 2;
        if (!v29) {
          uint64_t v103 = 4;
        }
        if (v182 > 0xFF)
        {
          char v100 = 11;
          goto LABEL_750;
        }
      }
      char v100 = 11;
      goto LABEL_749;
    case 0xCu:
      unsigned int v157 = a2[v412];
      unsigned int v158 = v157 - 2;
      if (v157 < 2)
      {
        uint64_t v81 = a1;
        unint64_t v83 = v51;
        unint64_t v82 = v407;
        unsigned int v160 = v44;
        unsigned int v161 = v418;
      }
      else
      {
        if (v412 <= 3) {
          uint64_t v159 = v412;
        }
        else {
          uint64_t v159 = 4;
        }
        unsigned int v160 = v44;
        uint64_t v81 = a1;
        unint64_t v83 = v51;
        unint64_t v82 = v407;
        unsigned int v161 = v418;
        switch(v159)
        {
          case 1:
            int v162 = *a2;
            goto LABEL_407;
          case 2:
            int v162 = *(unsigned __int16 *)a2;
            goto LABEL_407;
          case 3:
            int v162 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_407;
          case 4:
            int v162 = *(_DWORD *)a2;
LABEL_407:
            if (v412 < 4) {
              unsigned int v157 = (v162 | (v158 << (8 * v412))) + 2;
            }
            else {
              unsigned int v157 = v162 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v256 = v157 == 1;
      uint64_t v257 = v416;
      if (v157 == 1) {
        uint64_t v257 = v415;
      }
      (*(void (**)(uint64_t))(v257 + 16))(v81);
      *(unsigned char *)(v81 + v412) = v256;
      *(unsigned char *)(v421 + v81) = a2[v421];
      if (v161 > 3) {
        goto LABEL_416;
      }
      unsigned int v258 = ((1 << (8 * v161)) | 2u) >> (8 * v161);
      unsigned int v259 = v258 | 0x10;
      BOOL v29 = HIWORD(v258) == 0;
      uint64_t v260 = 2;
      if (!v29) {
        uint64_t v260 = 4;
      }
      if (v259 <= 0xFF) {
LABEL_416:
      }
        uint64_t v260 = 1;
      unint64_t v98 = v401;
      unint64_t v97 = v402;
      unint64_t v99 = v420 + v260;
      if (v99 <= v419) {
        unint64_t v99 = v419;
      }
      if (v160 <= 3)
      {
        unsigned int v261 = ((1 << v403) | 2u) >> v403;
        unsigned int v262 = v261 | 0x10;
        BOOL v29 = HIWORD(v261) == 0;
        uint64_t v103 = 2;
        if (!v29) {
          uint64_t v103 = 4;
        }
        if (v262 > 0xFF)
        {
          char v100 = 12;
          goto LABEL_750;
        }
      }
      char v100 = 12;
      goto LABEL_749;
    case 0xDu:
      unsigned int v163 = a2[v412];
      unsigned int v164 = v163 - 2;
      if (v163 < 2)
      {
        uint64_t v81 = a1;
        unint64_t v83 = v51;
        unint64_t v82 = v407;
        unsigned int v166 = v44;
        unsigned int v167 = v418;
      }
      else
      {
        if (v412 <= 3) {
          uint64_t v165 = v412;
        }
        else {
          uint64_t v165 = 4;
        }
        unsigned int v166 = v44;
        uint64_t v81 = a1;
        unint64_t v83 = v51;
        unint64_t v82 = v407;
        unsigned int v167 = v418;
        switch(v165)
        {
          case 1:
            int v168 = *a2;
            goto LABEL_428;
          case 2:
            int v168 = *(unsigned __int16 *)a2;
            goto LABEL_428;
          case 3:
            int v168 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_428;
          case 4:
            int v168 = *(_DWORD *)a2;
LABEL_428:
            if (v412 < 4) {
              unsigned int v163 = (v168 | (v164 << (8 * v412))) + 2;
            }
            else {
              unsigned int v163 = v168 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v263 = v163 == 1;
      uint64_t v264 = v416;
      if (v163 == 1) {
        uint64_t v264 = v415;
      }
      (*(void (**)(uint64_t))(v264 + 16))(v81);
      *(unsigned char *)(v81 + v412) = v263;
      uint64_t v265 = (void *)((v81 + v421 + 7) & 0xFFFFFFFFFFFFFFF8);
      int v266 = (void *)((unint64_t)&a2[v421 + 7] & 0xFFFFFFFFFFFFFFF8);
      *uint64_t v265 = *v266;
      *(void *)(((unint64_t)v265 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v266 + 15) & 0xFFFFFFFFFFFFFFF8);
      if (v167 > 3) {
        goto LABEL_437;
      }
      unsigned int v267 = ((1 << (8 * v167)) | 2u) >> (8 * v167);
      unsigned int v268 = v267 | 0x10;
      BOOL v29 = HIWORD(v267) == 0;
      uint64_t v269 = 2;
      if (!v29) {
        uint64_t v269 = 4;
      }
      if (v268 <= 0xFF) {
LABEL_437:
      }
        uint64_t v269 = 1;
      unint64_t v98 = v401;
      unint64_t v97 = v402;
      unint64_t v99 = v420 + v269;
      if (v99 <= v419) {
        unint64_t v99 = v419;
      }
      if (v166 <= 3)
      {
        unsigned int v270 = ((1 << v403) | 2u) >> v403;
        unsigned int v271 = v270 | 0x10;
        BOOL v29 = HIWORD(v270) == 0;
        uint64_t v103 = 2;
        if (!v29) {
          uint64_t v103 = 4;
        }
        if (v271 > 0xFF)
        {
          char v100 = 13;
          goto LABEL_750;
        }
      }
      char v100 = 13;
      goto LABEL_749;
    default:
      unsigned int v77 = a2[v412];
      unsigned int v78 = v77 - 2;
      if (v77 < 2)
      {
        uint64_t v81 = a1;
        unint64_t v83 = v51;
        unint64_t v82 = v407;
        unsigned int v80 = v44;
        unsigned int v84 = v418;
      }
      else
      {
        if (v412 <= 3) {
          uint64_t v79 = v412;
        }
        else {
          uint64_t v79 = 4;
        }
        unsigned int v80 = v44;
        uint64_t v81 = a1;
        unint64_t v83 = v51;
        unint64_t v82 = v407;
        unsigned int v84 = v418;
        switch(v79)
        {
          case 1:
            int v85 = *a2;
            goto LABEL_190;
          case 2:
            int v85 = *(unsigned __int16 *)a2;
            goto LABEL_190;
          case 3:
            int v85 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_190;
          case 4:
            int v85 = *(_DWORD *)a2;
LABEL_190:
            if (v412 < 4) {
              unsigned int v77 = (v85 | (v78 << (8 * v412))) + 2;
            }
            else {
              unsigned int v77 = v85 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v169 = v77 == 1;
      uint64_t v170 = v416;
      if (v77 == 1) {
        uint64_t v170 = v415;
      }
      (*(void (**)(uint64_t))(v170 + 16))(v81);
      *(unsigned char *)(v81 + v412) = v169;
      *(unsigned char *)(v421 + v81) = a2[v421];
      if (v84 > 3) {
        goto LABEL_199;
      }
      unsigned int v171 = ((1 << (8 * v84)) | 2u) >> (8 * v84);
      unsigned int v172 = v171 | 0x10;
      BOOL v29 = HIWORD(v171) == 0;
      uint64_t v173 = 2;
      if (!v29) {
        uint64_t v173 = 4;
      }
      if (v172 <= 0xFF) {
LABEL_199:
      }
        uint64_t v173 = 1;
      unint64_t v98 = v401;
      unint64_t v97 = v402;
      unint64_t v99 = v420 + v173;
      if (v99 <= v419) {
        unint64_t v99 = v419;
      }
      if (v80 <= 3)
      {
        unsigned int v174 = ((1 << v403) | 2u) >> v403;
        unsigned int v175 = v174 | 0x10;
        BOOL v29 = HIWORD(v174) == 0;
        uint64_t v103 = 2;
        if (!v29) {
          uint64_t v103 = 4;
        }
        if (v175 > 0xFF)
        {
          char v100 = 0;
          goto LABEL_750;
        }
      }
      char v100 = 0;
      goto LABEL_749;
  }
LABEL_505:
  switch(v240)
  {
    case 0u:
      long long v289 = *(_OWORD *)v239;
      *((void *)v242 + 2) = *((void *)v239 + 2);
      *(_OWORD *)unsigned int v242 = v289;
      unint64_t v98 = v401;
      unint64_t v97 = v402;
      unint64_t v82 = v407;
      unsigned int v290 = v418;
      if (v410 > 3) {
        goto LABEL_509;
      }
      unsigned int v291 = ((1 << v403) | 2u) >> v403;
      if (HIWORD(v291))
      {
        *(_DWORD *)&v242[v410] = 0;
      }
      else if ((v291 | 0x10) > 0xFF)
      {
        *(_WORD *)&v242[v410] = 0;
      }
      else
      {
LABEL_509:
        v242[v410] = 0;
      }
      break;
    case 1u:
      *(void *)unsigned int v242 = *(void *)v239;
      unint64_t v98 = v401;
      unint64_t v97 = v402;
      unint64_t v82 = v407;
      unsigned int v290 = v418;
      if (v410 > 3) {
        goto LABEL_567;
      }
      unsigned int v316 = ((1 << v403) | 2u) >> v403;
      if (HIWORD(v316))
      {
        *(_DWORD *)&v242[v410] = 1;
      }
      else
      {
        if ((v316 | 0x10) > 0xFF)
        {
          __int16 v378 = 1;
          goto LABEL_735;
        }
LABEL_567:
        v242[v410] = 1;
      }
      break;
    case 2u:
      *(_OWORD *)unsigned int v242 = *(_OWORD *)v239;
      unint64_t v98 = v401;
      unint64_t v97 = v402;
      unint64_t v82 = v407;
      unsigned int v290 = v418;
      if (v410 > 3) {
        goto LABEL_571;
      }
      unsigned int v317 = ((1 << v403) | 2u) >> v403;
      if (HIWORD(v317))
      {
        *(_DWORD *)&v242[v410] = 2;
      }
      else
      {
        if ((v317 | 0x10) > 0xFF)
        {
          __int16 v378 = 2;
          goto LABEL_735;
        }
LABEL_571:
        v242[v410] = 2;
      }
      break;
    case 3u:
      *unsigned int v242 = *v239;
      unint64_t v98 = v401;
      unint64_t v97 = v402;
      unint64_t v82 = v407;
      unsigned int v290 = v418;
      if (v410 > 3) {
        goto LABEL_575;
      }
      unsigned int v318 = ((1 << v403) | 2u) >> v403;
      if (HIWORD(v318))
      {
        *(_DWORD *)&v242[v410] = 3;
      }
      else
      {
        if ((v318 | 0x10) > 0xFF)
        {
          __int16 v378 = 3;
          goto LABEL_735;
        }
LABEL_575:
        v242[v410] = 3;
      }
      break;
    case 4u:
      *unsigned int v242 = *v239;
      unint64_t v98 = v401;
      unint64_t v97 = v402;
      unint64_t v82 = v407;
      unsigned int v290 = v418;
      if (v410 > 3) {
        goto LABEL_579;
      }
      unsigned int v319 = ((1 << v403) | 2u) >> v403;
      if (HIWORD(v319))
      {
        *(_DWORD *)&v242[v410] = 4;
      }
      else
      {
        if ((v319 | 0x10) > 0xFF)
        {
          __int16 v378 = 4;
          goto LABEL_735;
        }
LABEL_579:
        v242[v410] = 4;
      }
      break;
    case 5u:
      *unsigned int v242 = *v239;
      unint64_t v98 = v401;
      unint64_t v97 = v402;
      unint64_t v82 = v407;
      unsigned int v290 = v418;
      if (v410 > 3) {
        goto LABEL_583;
      }
      unsigned int v320 = ((1 << v403) | 2u) >> v403;
      if (HIWORD(v320))
      {
        *(_DWORD *)&v242[v410] = 5;
      }
      else
      {
        if ((v320 | 0x10) > 0xFF)
        {
          __int16 v378 = 5;
          goto LABEL_735;
        }
LABEL_583:
        v242[v410] = 5;
      }
      break;
    case 6u:
      *unsigned int v242 = *v239;
      unint64_t v98 = v401;
      unint64_t v97 = v402;
      unint64_t v82 = v407;
      unsigned int v290 = v418;
      if (v410 > 3) {
        goto LABEL_587;
      }
      unsigned int v321 = ((1 << v403) | 2u) >> v403;
      if (HIWORD(v321))
      {
        *(_DWORD *)&v242[v410] = 6;
      }
      else
      {
        if ((v321 | 0x10) > 0xFF)
        {
          __int16 v378 = 6;
          goto LABEL_735;
        }
LABEL_587:
        v242[v410] = 6;
      }
      break;
    case 7u:
      *unsigned int v242 = *v239;
      unint64_t v98 = v401;
      unint64_t v97 = v402;
      unint64_t v82 = v407;
      unsigned int v290 = v418;
      if (v410 > 3) {
        goto LABEL_591;
      }
      unsigned int v322 = ((1 << v403) | 2u) >> v403;
      if (HIWORD(v322))
      {
        *(_DWORD *)&v242[v410] = 7;
      }
      else
      {
        if ((v322 | 0x10) > 0xFF)
        {
          __int16 v378 = 7;
          goto LABEL_735;
        }
LABEL_591:
        v242[v410] = 7;
      }
      break;
    case 8u:
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v395 + 16))(v242, v239, v396);
      uint64_t v323 = (void *)((unint64_t)&v242[v40] & 0xFFFFFFFFFFFFFFF8);
      unint64_t v324 = (void *)((unint64_t)&v239[v40] & 0xFFFFFFFFFFFFFFF8);
      *uint64_t v323 = *v324;
      unint64_t v325 = ((unint64_t)v323 + v41) & v75;
      unint64_t v326 = ((unint64_t)v324 + v41) & v75;
      uint64_t v327 = *(void (**)(unint64_t, unint64_t, uint64_t))(v236 + 16);
      swift_bridgeObjectRetain();
      v327(v325, v326, v414);
      unint64_t v328 = (void *)((v42 + v325) & 0xFFFFFFFFFFFFFFF8);
      BOOL v329 = (void *)((v42 + v326) & 0xFFFFFFFFFFFFFFF8);
      *unint64_t v328 = *v329;
      uint64_t v330 = (void *)(((unint64_t)v328 + 15) & 0xFFFFFFFFFFFFFFF8);
      unsigned int v331 = (void *)(((unint64_t)v329 + 15) & 0xFFFFFFFFFFFFFFF8);
      *uint64_t v330 = *v331;
      v330[1] = v331[1];
      v242[v409] = v239[v409];
      *(unsigned char *)((unint64_t)&v242[v409] | 1) = *(unsigned char *)((unint64_t)&v239[v409] | 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v98 = v401;
      unint64_t v97 = v402;
      unint64_t v82 = v407;
      unsigned int v290 = v418;
      if (v410 > 3) {
        goto LABEL_595;
      }
      unsigned int v332 = ((1 << v403) | 2u) >> v403;
      if (HIWORD(v332))
      {
        *(_DWORD *)&v242[v410] = 8;
      }
      else
      {
        if ((v332 | 0x10) > 0xFF)
        {
          __int16 v378 = 8;
          goto LABEL_735;
        }
LABEL_595:
        v242[v410] = 8;
      }
      break;
    case 9u:
      uint64_t v333 = *(void **)v239;
      *(void *)unsigned int v242 = *(void *)v239;
      id v334 = v333;
      unint64_t v98 = v401;
      unint64_t v97 = v402;
      unint64_t v82 = v407;
      unsigned int v290 = v418;
      if (v410 > 3) {
        goto LABEL_599;
      }
      unsigned int v335 = ((1 << v403) | 2u) >> v403;
      if (HIWORD(v335))
      {
        *(_DWORD *)&v242[v410] = 9;
      }
      else
      {
        if ((v335 | 0x10) > 0xFF)
        {
          __int16 v378 = 9;
          goto LABEL_735;
        }
LABEL_599:
        v242[v410] = 9;
      }
      break;
    case 0xAu:
      *unsigned int v242 = *v239;
      unint64_t v98 = v401;
      unint64_t v97 = v402;
      unint64_t v82 = v407;
      unsigned int v290 = v418;
      if (v410 > 3) {
        goto LABEL_603;
      }
      unsigned int v336 = ((1 << v403) | 2u) >> v403;
      if (HIWORD(v336))
      {
        *(_DWORD *)&v242[v410] = 10;
      }
      else
      {
        if ((v336 | 0x10) > 0xFF)
        {
          __int16 v378 = 10;
          goto LABEL_735;
        }
LABEL_603:
        v242[v410] = 10;
      }
      break;
    case 0xBu:
      *(_WORD *)unsigned int v242 = *(_WORD *)v239;
      unint64_t v98 = v401;
      unint64_t v97 = v402;
      unint64_t v82 = v407;
      unsigned int v290 = v418;
      if (v410 > 3) {
        goto LABEL_607;
      }
      unsigned int v337 = ((1 << v403) | 2u) >> v403;
      if (HIWORD(v337))
      {
        *(_DWORD *)&v242[v410] = 11;
      }
      else
      {
        if ((v337 | 0x10) > 0xFF)
        {
          __int16 v378 = 11;
          goto LABEL_735;
        }
LABEL_607:
        v242[v410] = 11;
      }
      break;
    case 0xCu:
      uint64_t v338 = *(void *)v239;
      uint64_t v339 = *((void *)v239 + 1);
      char v340 = v239[16];
      sub_10009C5FC(v338, v339, v340);
      *(void *)unsigned int v242 = v338;
      *((void *)v242 + 1) = v339;
      v242[16] = v340;
      unint64_t v98 = v401;
      unint64_t v97 = v402;
      unint64_t v82 = v407;
      unsigned int v290 = v418;
      if (v410 > 3) {
        goto LABEL_611;
      }
      unsigned int v341 = ((1 << v403) | 2u) >> v403;
      if (HIWORD(v341))
      {
        *(_DWORD *)&v242[v410] = 12;
      }
      else
      {
        if ((v341 | 0x10) > 0xFF)
        {
          __int16 v378 = 12;
          goto LABEL_735;
        }
LABEL_611:
        v242[v410] = 12;
      }
      break;
    case 0xDu:
      long long v342 = *(_OWORD *)v239;
      *((void *)v242 + 2) = *((void *)v239 + 2);
      *(_OWORD *)unsigned int v242 = v342;
      unint64_t v98 = v401;
      unint64_t v97 = v402;
      unint64_t v82 = v407;
      unsigned int v290 = v418;
      if (v410 > 3) {
        goto LABEL_615;
      }
      unsigned int v343 = ((1 << v403) | 2u) >> v403;
      if (HIWORD(v343))
      {
        *(_DWORD *)&v242[v410] = 13;
      }
      else
      {
        if ((v343 | 0x10) > 0xFF)
        {
          __int16 v378 = 13;
          goto LABEL_735;
        }
LABEL_615:
        v242[v410] = 13;
      }
      break;
    case 0xEu:
      if (*((void *)v239 + 2) >> 60 == 11)
      {
        long long v344 = *(_OWORD *)v239;
        long long v345 = *((_OWORD *)v239 + 1);
        long long v346 = *((_OWORD *)v239 + 2);
        *((void *)v242 + 6) = *((void *)v239 + 6);
        *((_OWORD *)v242 + 1) = v345;
        *((_OWORD *)v242 + 2) = v346;
        *(_OWORD *)unsigned int v242 = v344;
        unint64_t v98 = v401;
        unint64_t v97 = v402;
        unsigned int v290 = v418;
      }
      else
      {
        *(void *)unsigned int v242 = *(void *)v239;
        unsigned int v366 = (uint64_t *)(v239 + 8);
        unint64_t v367 = *((void *)v239 + 2);
        unsigned int v290 = v418;
        if (v367 >> 60 == 15)
        {
          *(_OWORD *)(v242 + 8) = *(_OWORD *)v366;
        }
        else
        {
          uint64_t v375 = *v366;
          sub_10001EBB0(*v366, *((void *)v239 + 2));
          *((void *)v242 + 1) = v375;
          *((void *)v242 + 2) = v367;
        }
        unint64_t v98 = v401;
        unint64_t v97 = v402;
        long long v376 = *(_OWORD *)(v239 + 24);
        v242[40] = v239[40];
        *(_OWORD *)(v242 + 24) = v376;
        *((void *)v242 + 6) = *((void *)v239 + 6);
      }
      v242[56] = v239[56];
      unint64_t v82 = v407;
      if (v410 > 3) {
        goto LABEL_689;
      }
      unsigned int v377 = ((1 << v403) | 2u) >> v403;
      if (HIWORD(v377))
      {
        *(_DWORD *)&v242[v410] = 14;
      }
      else
      {
        if ((v377 | 0x10) > 0xFF)
        {
          __int16 v378 = 14;
          goto LABEL_735;
        }
LABEL_689:
        v242[v410] = 14;
      }
      break;
    case 0xFu:
      *unsigned int v242 = *v239;
      unint64_t v98 = v401;
      unint64_t v97 = v402;
      unint64_t v82 = v407;
      unsigned int v290 = v418;
      if (v410 > 3) {
        goto LABEL_621;
      }
      unsigned int v347 = ((1 << v403) | 2u) >> v403;
      if (HIWORD(v347))
      {
        *(_DWORD *)&v242[v410] = 15;
      }
      else
      {
        if ((v347 | 0x10) > 0xFF)
        {
          __int16 v378 = 15;
LABEL_735:
          *(_WORD *)&v242[v410] = v378;
          break;
        }
LABEL_621:
        v242[v410] = 15;
      }
      break;
    default:
      if (v410 > 3) {
        goto LABEL_636;
      }
      unsigned int v361 = ((1 << v403) | 2u) >> v403;
      unsigned int v362 = v361 | 0x10;
      BOOL v29 = HIWORD(v361) == 0;
      uint64_t v363 = 2;
      if (!v29) {
        uint64_t v363 = 4;
      }
      if (v362 <= 0xFF) {
LABEL_636:
      }
        uint64_t v363 = 1;
      unsigned int v290 = v418;
      memcpy(v242, v239, v363 + v410);
      unint64_t v98 = v401;
      unint64_t v97 = v402;
      unint64_t v82 = v407;
      break;
  }
  unint64_t v83 = v405;
  if (v290 > 3) {
    goto LABEL_740;
  }
  unsigned int v381 = ((1 << (8 * v290)) | 2u) >> (8 * v290);
  unsigned int v382 = v381 | 0x10;
  BOOL v29 = HIWORD(v381) == 0;
  uint64_t v383 = 2;
  if (!v29) {
    uint64_t v383 = 4;
  }
  if (v382 <= 0xFF) {
LABEL_740:
  }
    uint64_t v383 = 1;
  unint64_t v99 = v420 + v383;
  if (v99 <= v419) {
    unint64_t v99 = v419;
  }
  if (v410 <= 3)
  {
    unsigned int v384 = ((1 << v403) | 2u) >> v403;
    unsigned int v385 = v384 | 0x10;
    BOOL v29 = HIWORD(v384) == 0;
    uint64_t v103 = 2;
    if (!v29) {
      uint64_t v103 = 4;
    }
    if (v385 > 0xFF)
    {
      char v100 = 9;
      goto LABEL_750;
    }
  }
  char v100 = 9;
LABEL_749:
  uint64_t v103 = 1;
LABEL_750:
  unint64_t v386 = v83 + v103;
  if (v386 > v99) {
    unint64_t v99 = v386;
  }
  if (v82 > v99) {
    unint64_t v99 = v82;
  }
  if (v98 > v99) {
    unint64_t v99 = v98;
  }
  if (v422 > v99) {
    unint64_t v99 = v422;
  }
  if (v97 > v99) {
    unint64_t v99 = v97;
  }
  *(unsigned char *)(v81 + v99) = v100;
  return v81;
}

unsigned __int8 *sub_100138988(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1;
  if (a1 == a2) {
    return v2;
  }
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v4 = *(void *)(v3 + 64);
  uint64_t v482 = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(v482 - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  if (v6 <= v4) {
    unint64_t v7 = v4;
  }
  else {
    unint64_t v7 = *(void *)(v5 + 64);
  }
  unint64_t v8 = v7 + 1;
  uint64_t v480 = *(void *)(v482 - 8);
  unsigned int v9 = *(_DWORD *)(v5 + 80);
  uint64_t v10 = *(_DWORD *)(v5 + 80);
  uint64_t v464 = v4 + v10;
  uint64_t v472 = v10;
  uint64_t v463 = *(void *)(v5 + 64);
  unint64_t v11 = v6 + ((v4 + v10) & ~v10);
  unint64_t v475 = v7 + 2;
  if (v11 + 1 > v7 + 2) {
    unint64_t v12 = v11 + 1;
  }
  else {
    unint64_t v12 = v7 + 2;
  }
  if (v8 > v12) {
    unint64_t v12 = v7 + 1;
  }
  unint64_t v486 = v7;
  unint64_t v13 = v7 & 0xFFFFFFFFFFFFFFF8;
  if ((v7 & 0xFFFFFFFFFFFFFFF8) + 16 > v12) {
    unint64_t v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  uint64_t v481 = v3;
  uint64_t v14 = *(unsigned __int8 *)(v3 + 80) | v9;
  uint64_t v466 = v8 + v14;
  uint64_t v470 = v14;
  if (((v8 + v14) & ~v14) + v8 > v12) {
    unint64_t v12 = ((v8 + v14) & ~v14) + v8;
  }
  unint64_t v489 = v12;
  uint64_t v15 = swift_getAssociatedTypeWitness();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v451 = v16;
  uint64_t v452 = v15;
  int v17 = *(_DWORD *)(v16 + 80) & 0xF8;
  uint64_t v18 = swift_getAssociatedTypeWitness();
  uint64_t v453 = *(void *)(v18 - 8);
  uint64_t v454 = v18;
  uint64_t v19 = *(unsigned __int8 *)(v453 + 80);
  uint64_t v20 = v17 | v19 | 7;
  unint64_t v478 = v8;
  uint64_t v465 = v8 + v20;
  uint64_t v448 = *(void *)(v16 + 64) + 7;
  uint64_t v449 = v19 + 8;
  uint64_t v450 = *(void *)(v453 + 64) + 7;
  unint64_t v21 = (((v450 + ((v19 + 8 + (v448 & 0xFFFFFFFFFFFFFFF8)) & ~v19)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  if (v21 + 18 <= 0x39) {
    uint64_t v22 = 57;
  }
  else {
    uint64_t v22 = v21 + 18;
  }
  uint64_t v468 = v17 | v19 | 7;
  if (v22 > 3) {
    goto LABEL_21;
  }
  unsigned int v23 = ((1 << (8 * v22)) | 2u) >> (8 * v22);
  unsigned int v24 = v23 | 0x10;
  BOOL v25 = HIWORD(v23) == 0;
  uint64_t v26 = 2;
  if (!v25) {
    uint64_t v26 = 4;
  }
  if (v24 <= 0xFF) {
LABEL_21:
  }
    uint64_t v26 = 1;
  uint64_t v485 = v22 + ((v8 + v20) & ~v20);
  unint64_t v27 = v485 + v26;
  if (v27 <= v489) {
    unint64_t v28 = v489;
  }
  else {
    unint64_t v28 = v27;
  }
  uint64_t v29 = swift_getAssociatedTypeWitness();
  uint64_t v30 = *(void *)(v29 - 8);
  uint64_t v459 = v30;
  uint64_t v460 = v29;
  int v31 = *(_DWORD *)(v30 + 80) & 0xF8;
  uint64_t v32 = swift_getAssociatedTypeWitness();
  uint64_t v33 = v30;
  uint64_t v461 = *(void *)(v32 - 8);
  uint64_t v462 = v32;
  uint64_t v34 = *(unsigned __int8 *)(v461 + 80);
  uint64_t v35 = v31 | v34 | 7;
  unint64_t v36 = (v8 + v35) & ~v35;
  uint64_t v456 = *(void *)(v33 + 64) + 7;
  uint64_t v457 = v34 + 8;
  uint64_t v458 = *(void *)(v461 + 64) + 7;
  unint64_t v37 = (((v458 + ((v34 + 8 + (v456 & 0xFFFFFFFFFFFFFFF8)) & ~v34)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  if (v37 + 18 <= 0x39) {
    uint64_t v38 = 57;
  }
  else {
    uint64_t v38 = v37 + 18;
  }
  char v477 = 8 * v38;
  if (v38 <= 3) {
    unsigned int v39 = (((1 << (8 * v38)) | 2u) >> (8 * v38)) | 0x10;
  }
  else {
    unsigned int v39 = 17;
  }
  unint64_t v40 = v13 + 17;
  unint64_t v41 = v13 + 24;
  unint64_t v42 = ((v13 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  uint64_t v43 = 4;
  if (v39 < 0x10000) {
    uint64_t v43 = 2;
  }
  if (v39 < 0x100) {
    uint64_t v44 = 1;
  }
  else {
    uint64_t v44 = v43;
  }
  uint64_t v479 = v38;
  unint64_t v45 = v38 + v36;
  unint64_t v46 = v38 + v36 + v44;
  if (v46 <= v28) {
    unint64_t v46 = v28;
  }
  if (v40 > v46) {
    unint64_t v46 = v40;
  }
  if (v41 > v46) {
    unint64_t v46 = v41;
  }
  unint64_t v47 = v475;
  uint64_t v2 = a1;
  if (v475 > v46) {
    unint64_t v46 = v475;
  }
  if (v42 > v46) {
    unint64_t v46 = v42;
  }
  unsigned int v48 = a1[v46];
  unsigned int v49 = v48 - 14;
  uint64_t v484 = v22;
  if (v48 < 0xE)
  {
    unint64_t v61 = v486;
    uint64_t v50 = v472;
    uint64_t v52 = v468;
    uint64_t v51 = v470;
    unint64_t v56 = v41;
    unint64_t v62 = (((v450 + ((v19 + 8 + (v448 & 0xFFFFFFFFFFFFFFF8)) & ~v19)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    uint64_t v50 = v472;
    uint64_t v52 = v468;
    uint64_t v51 = v470;
    if (v22 > 3) {
      goto LABEL_51;
    }
    unsigned int v53 = ((1 << (8 * v22)) | 2u) >> (8 * v22);
    unsigned int v54 = v53 | 0x10;
    BOOL v25 = HIWORD(v53) == 0;
    uint64_t v55 = 2;
    if (!v25) {
      uint64_t v55 = 4;
    }
    if (v54 <= 0xFF) {
LABEL_51:
    }
      uint64_t v55 = 1;
    unint64_t v56 = v41;
    unint64_t v57 = v485 + v55;
    if (v57 <= v489) {
      unint64_t v57 = v489;
    }
    if (v38 > 3) {
      goto LABEL_58;
    }
    unsigned int v58 = ((1 << v477) | 2u) >> v477;
    unsigned int v59 = v58 | 0x10;
    BOOL v25 = HIWORD(v58) == 0;
    uint64_t v60 = 2;
    if (!v25) {
      uint64_t v60 = 4;
    }
    if (v59 <= 0xFF) {
LABEL_58:
    }
      uint64_t v60 = 1;
    unint64_t v61 = v486;
    unint64_t v62 = (((v450 + ((v19 + 8 + (v448 & 0xFFFFFFFFFFFFFFF8)) & ~v19)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v63 = v45 + v60;
    if (v63 > v57) {
      unint64_t v57 = v63;
    }
    if (v40 > v57) {
      unint64_t v57 = v40;
    }
    if (v41 > v57) {
      unint64_t v57 = v41;
    }
    if (v475 > v57) {
      unint64_t v57 = v475;
    }
    if (v42 > v57) {
      LODWORD(v57) = v42;
    }
    if (v57 <= 3) {
      uint64_t v64 = v57;
    }
    else {
      uint64_t v64 = 4;
    }
    switch(v64)
    {
      case 1:
        int v65 = *a1;
        if (v57 < 4) {
          goto LABEL_81;
        }
        goto LABEL_82;
      case 2:
        int v65 = *(unsigned __int16 *)a1;
        if (v57 >= 4) {
          goto LABEL_82;
        }
        goto LABEL_81;
      case 3:
        int v65 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        if (v57 >= 4) {
          goto LABEL_82;
        }
        goto LABEL_81;
      case 4:
        int v65 = *(_DWORD *)a1;
        if (v57 < 4) {
LABEL_81:
        }
          v65 |= v49 << (8 * v57);
LABEL_82:
        unsigned int v48 = v65 + 14;
        break;
      default:
        break;
    }
  }
  uint64_t v471 = ~v50;
  uint64_t v473 = ~v51;
  uint64_t v447 = ~v19;
  uint64_t v455 = ~v34;
  unint64_t v445 = v62 + 16;
  unint64_t v446 = v37 + 16;
  uint64_t v467 = ~v35;
  uint64_t v469 = ~v52;
  switch(v48)
  {
    case 1u:
      unint64_t v70 = v45;
      (*(void (**)(unsigned __int8 *, uint64_t))(v481 + 8))(a1, AssociatedTypeWitness);
      uint64_t v71 = (unsigned __int8 *)((unint64_t)&a1[v464] & v471);
      goto LABEL_252;
    case 2u:
      unsigned int v66 = a1[v61];
      unsigned int v67 = v66 - 2;
      if (v66 >= 2)
      {
        if (v61 <= 3) {
          uint64_t v72 = v61;
        }
        else {
          uint64_t v72 = 4;
        }
        switch(v72)
        {
          case 1:
            goto LABEL_154;
          case 2:
            goto LABEL_156;
          case 3:
            goto LABEL_158;
          case 4:
            goto LABEL_160;
          default:
            goto LABEL_162;
        }
      }
      goto LABEL_162;
    case 3u:
      unsigned int v66 = a1[v61];
      unsigned int v67 = v66 - 2;
      if (v66 >= 2)
      {
        if (v61 <= 3) {
          uint64_t v73 = v61;
        }
        else {
          uint64_t v73 = 4;
        }
        switch(v73)
        {
          case 1:
            goto LABEL_154;
          case 2:
            goto LABEL_156;
          case 3:
            goto LABEL_158;
          case 4:
            goto LABEL_160;
          default:
            goto LABEL_162;
        }
      }
      goto LABEL_162;
    case 4u:
      unsigned int v66 = a1[v61];
      unsigned int v67 = v66 - 2;
      if (v66 >= 2)
      {
        if (v61 <= 3) {
          uint64_t v74 = v61;
        }
        else {
          uint64_t v74 = 4;
        }
        switch(v74)
        {
          case 1:
            goto LABEL_154;
          case 2:
            goto LABEL_156;
          case 3:
            goto LABEL_158;
          case 4:
            goto LABEL_160;
          default:
            goto LABEL_162;
        }
      }
      goto LABEL_162;
    case 5u:
      unsigned int v66 = a1[v61];
      unsigned int v67 = v66 - 2;
      if (v66 >= 2)
      {
        if (v61 <= 3) {
          uint64_t v75 = v61;
        }
        else {
          uint64_t v75 = 4;
        }
        switch(v75)
        {
          case 1:
            goto LABEL_154;
          case 2:
            goto LABEL_156;
          case 3:
            goto LABEL_158;
          case 4:
            goto LABEL_160;
          default:
            goto LABEL_162;
        }
      }
      goto LABEL_162;
    case 6u:
      unsigned int v76 = a1[v61];
      unsigned int v77 = v76 - 2;
      if (v76 >= 2)
      {
        if (v61 <= 3) {
          uint64_t v78 = v61;
        }
        else {
          uint64_t v78 = 4;
        }
        switch(v78)
        {
          case 1:
            int v79 = *a1;
            goto LABEL_170;
          case 2:
            int v79 = *(unsigned __int16 *)a1;
            goto LABEL_170;
          case 3:
            int v79 = *(unsigned __int16 *)a1 | (a1[2] << 16);
            goto LABEL_170;
          case 4:
            int v79 = *(_DWORD *)a1;
LABEL_170:
            if (v61 < 4) {
              unsigned int v76 = (v79 | (v77 << (8 * v61))) + 2;
            }
            else {
              unsigned int v76 = v79 + 2;
            }
            break;
          default:
            break;
        }
      }
      uint64_t v98 = v481;
      if (v76 == 1)
      {
        uint64_t v98 = v480;
        uint64_t v99 = v482;
      }
      else
      {
        uint64_t v99 = AssociatedTypeWitness;
      }
      (*(void (**)(unsigned __int8 *, uint64_t))(v98 + 8))(a1, v99);
      char v100 = v486;
      uint64_t v71 = (unsigned __int8 *)((unint64_t)&a1[v466] & v473);
      unsigned int v101 = v71[v486];
      unsigned int v102 = v101 - 2;
      if (v101 >= 2)
      {
        if (v486 <= 3) {
          uint64_t v103 = v486;
        }
        else {
          uint64_t v103 = 4;
        }
        unint64_t v70 = v45;
        switch(v103)
        {
          case 1:
            int v104 = *v71;
            goto LABEL_244;
          case 2:
            int v104 = *(unsigned __int16 *)v71;
            goto LABEL_244;
          case 3:
            int v104 = *(unsigned __int16 *)v71 | (*(unsigned __int8 *)(((unint64_t)&a1[v466] & v473) + 2) << 16);
            goto LABEL_244;
          case 4:
            int v104 = *(_DWORD *)v71;
LABEL_244:
            if (v486 >= 4) {
              goto LABEL_245;
            }
            goto LABEL_250;
          default:
            goto LABEL_251;
        }
      }
      goto LABEL_197;
    case 7u:
      unsigned int v80 = a1[v61];
      unsigned int v81 = v80 - 2;
      if (v80 >= 2)
      {
        if (v61 <= 3) {
          uint64_t v82 = v61;
        }
        else {
          uint64_t v82 = 4;
        }
        switch(v82)
        {
          case 1:
            int v83 = *a1;
            goto LABEL_185;
          case 2:
            int v83 = *(unsigned __int16 *)a1;
            goto LABEL_185;
          case 3:
            int v83 = *(unsigned __int16 *)a1 | (a1[2] << 16);
            goto LABEL_185;
          case 4:
            int v83 = *(_DWORD *)a1;
LABEL_185:
            if (v61 < 4) {
              unsigned int v80 = (v83 | (v81 << (8 * v61))) + 2;
            }
            else {
              unsigned int v80 = v83 + 2;
            }
            break;
          default:
            break;
        }
      }
      uint64_t v105 = v481;
      if (v80 == 1)
      {
        uint64_t v105 = v480;
        uint64_t v106 = v482;
      }
      else
      {
        uint64_t v106 = AssociatedTypeWitness;
      }
      (*(void (**)(unsigned __int8 *, uint64_t))(v105 + 8))(a1, v106);
      char v100 = v486;
      uint64_t v71 = (unsigned __int8 *)((unint64_t)&a1[v466] & v473);
      unsigned int v101 = v71[v486];
      unsigned int v102 = v101 - 2;
      if (v101 < 2)
      {
LABEL_197:
        unint64_t v70 = v45;
      }
      else
      {
        if (v486 <= 3) {
          uint64_t v107 = v486;
        }
        else {
          uint64_t v107 = 4;
        }
        unint64_t v70 = v45;
        switch(v107)
        {
          case 1:
            int v104 = *v71;
            goto LABEL_249;
          case 2:
            int v104 = *(unsigned __int16 *)v71;
            goto LABEL_249;
          case 3:
            int v104 = *(unsigned __int16 *)v71 | (*(unsigned __int8 *)(((unint64_t)&a1[v466] & v473) + 2) << 16);
            goto LABEL_249;
          case 4:
            int v104 = *(_DWORD *)v71;
LABEL_249:
            if (v486 >= 4) {
LABEL_245:
            }
              unsigned int v101 = v104 + 2;
            else {
LABEL_250:
            }
              unsigned int v101 = (v104 | (v102 << (8 * v100))) + 2;
            break;
          default:
            break;
        }
      }
LABEL_251:
      if (v101 == 1) {
LABEL_252:
      }
        (*(void (**)(unsigned __int8 *, uint64_t))(v480 + 8))(v71, v482);
      else {
        (*(void (**)(unsigned __int8 *, uint64_t))(v481 + 8))(v71, AssociatedTypeWitness);
      }
      break;
    case 8u:
      unsigned int v84 = a1[v61];
      unsigned int v85 = v84 - 2;
      unint64_t v444 = v56;
      if (v84 < 2)
      {
        uint64_t v87 = ~v52;
      }
      else
      {
        if (v61 <= 3) {
          uint64_t v86 = v61;
        }
        else {
          uint64_t v86 = 4;
        }
        uint64_t v87 = ~v52;
        switch(v86)
        {
          case 1:
            int v88 = *a1;
            goto LABEL_201;
          case 2:
            int v88 = *(unsigned __int16 *)a1;
            goto LABEL_201;
          case 3:
            int v88 = *(unsigned __int16 *)a1 | (a1[2] << 16);
            goto LABEL_201;
          case 4:
            int v88 = *(_DWORD *)a1;
LABEL_201:
            if (v61 < 4) {
              unsigned int v84 = (v88 | (v85 << (8 * v61))) + 2;
            }
            else {
              unsigned int v84 = v88 + 2;
            }
            break;
          default:
            break;
        }
      }
      unint64_t v70 = v45;
      uint64_t v108 = v481;
      if (v84 == 1)
      {
        uint64_t v108 = v480;
        uint64_t v109 = v482;
      }
      else
      {
        uint64_t v109 = AssociatedTypeWitness;
      }
      (*(void (**)(unsigned __int8 *, uint64_t))(v108 + 8))(a1, v109);
      unsigned int v110 = (unsigned __int8 *)((unint64_t)&a1[v465] & v87);
      unint64_t v56 = v444;
      if (v484 > 3) {
        goto LABEL_208;
      }
      unsigned int v112 = ((1 << (8 * v484)) | 2u) >> (8 * v484);
      if (HIWORD(v112))
      {
        unsigned int v111 = *(_DWORD *)&v110[v484];
      }
      else if ((v112 | 0x10) <= 0xFF)
      {
LABEL_208:
        unsigned int v111 = v110[v484];
      }
      else
      {
        unsigned int v111 = *(unsigned __int16 *)&v110[v484];
      }
      unsigned int v113 = v111 - 16;
      if (v111 >= 0x10)
      {
        if (v484 <= 3) {
          uint64_t v114 = v484;
        }
        else {
          uint64_t v114 = 4;
        }
        switch(v114)
        {
          case 1:
            int v115 = *v110;
            goto LABEL_413;
          case 2:
            int v115 = *(unsigned __int16 *)v110;
            goto LABEL_413;
          case 3:
            int v115 = *(unsigned __int16 *)v110 | (v110[2] << 16);
            goto LABEL_413;
          case 4:
            int v115 = *(_DWORD *)v110;
LABEL_413:
            if (v484 < 4) {
              unsigned int v111 = (v115 | (v113 << (8 * v484))) + 16;
            }
            else {
              unsigned int v111 = v115 + 16;
            }
            break;
          default:
            break;
        }
      }
      switch(v111)
      {
        case 8u:
          (*(void (**)(unsigned __int8 *, uint64_t))(v451 + 8))(v110, v452);
          swift_bridgeObjectRelease();
          (*(void (**)(unint64_t, uint64_t))(v453 + 8))((v449 + ((unint64_t)&v110[v448] & 0xFFFFFFFFFFFFFFF8)) & v447, v454);
          goto LABEL_426;
        case 9u:
          goto LABEL_427;
        case 0xCu:
          goto LABEL_428;
        case 0xEu:
          goto LABEL_429;
        default:
          goto LABEL_253;
      }
    case 9u:
      unsigned int v89 = a1[v61];
      unsigned int v90 = v89 - 2;
      unint64_t v443 = v40;
      if (v89 < 2)
      {
        uint64_t v92 = ~v35;
      }
      else
      {
        if (v61 <= 3) {
          uint64_t v91 = v61;
        }
        else {
          uint64_t v91 = 4;
        }
        uint64_t v92 = ~v35;
        switch(v91)
        {
          case 1:
            int v93 = *a1;
            goto LABEL_222;
          case 2:
            int v93 = *(unsigned __int16 *)a1;
            goto LABEL_222;
          case 3:
            int v93 = *(unsigned __int16 *)a1 | (a1[2] << 16);
            goto LABEL_222;
          case 4:
            int v93 = *(_DWORD *)a1;
LABEL_222:
            if (v61 < 4) {
              unsigned int v89 = (v93 | (v90 << (8 * v61))) + 2;
            }
            else {
              unsigned int v89 = v93 + 2;
            }
            break;
          default:
            break;
        }
      }
      unint64_t v70 = v45;
      uint64_t v116 = v481;
      if (v89 == 1)
      {
        uint64_t v116 = v480;
        uint64_t v117 = v482;
      }
      else
      {
        uint64_t v117 = AssociatedTypeWitness;
      }
      (*(void (**)(unsigned __int8 *, uint64_t))(v116 + 8))(a1, v117);
      unsigned int v110 = (unsigned __int8 *)((unint64_t)&a1[v478 + v35] & v92);
      uint64_t v118 = v479;
      unint64_t v40 = v443;
      if (v479 > 3) {
        goto LABEL_229;
      }
      unsigned int v120 = ((1 << v477) | 2u) >> v477;
      if (HIWORD(v120))
      {
        unsigned int v119 = *(_DWORD *)&v110[v479];
      }
      else
      {
        BOOL v121 = (v120 | 0x10) > 0xFF;
        uint64_t v118 = v479;
        if (v121) {
          unsigned int v119 = *(unsigned __int16 *)&v110[v479];
        }
        else {
LABEL_229:
        }
          unsigned int v119 = v110[v118];
      }
      unsigned int v122 = v119 - 16;
      if (v119 >= 0x10)
      {
        if (v479 <= 3) {
          uint64_t v123 = v479;
        }
        else {
          uint64_t v123 = 4;
        }
        switch(v123)
        {
          case 1:
            int v124 = *v110;
            goto LABEL_421;
          case 2:
            int v124 = *(unsigned __int16 *)v110;
            goto LABEL_421;
          case 3:
            int v124 = *(unsigned __int16 *)v110 | (v110[2] << 16);
            goto LABEL_421;
          case 4:
            int v124 = *(_DWORD *)v110;
LABEL_421:
            if (v479 < 4) {
              unsigned int v119 = (v124 | (v122 << v477)) + 16;
            }
            else {
              unsigned int v119 = v124 + 16;
            }
            break;
          default:
            break;
        }
      }
      switch(v119)
      {
        case 8u:
          (*(void (**)(unsigned __int8 *, uint64_t))(v459 + 8))(v110, v460);
          swift_bridgeObjectRelease();
          (*(void (**)(unint64_t, uint64_t))(v461 + 8))((v457 + ((unint64_t)&v110[v456] & 0xFFFFFFFFFFFFFFF8)) & v455, v462);
LABEL_426:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          break;
        case 9u:
LABEL_427:

          break;
        case 0xCu:
LABEL_428:
          sub_1000D31F8(*(void *)v110, *((void *)v110 + 1), v110[16]);
          break;
        case 0xEu:
LABEL_429:
          unint64_t v219 = *((void *)v110 + 2);
          if (v219 >> 60 != 11 && v219 >> 60 != 15) {
            sub_10001E9C0(*((void *)v110 + 1), v219);
          }
          break;
        default:
          goto LABEL_253;
      }
      break;
    case 0xAu:
      unsigned int v66 = a1[v61];
      unsigned int v67 = v66 - 2;
      if (v66 >= 2)
      {
        if (v61 <= 3) {
          uint64_t v94 = v61;
        }
        else {
          uint64_t v94 = 4;
        }
        switch(v94)
        {
          case 1:
            goto LABEL_154;
          case 2:
            goto LABEL_156;
          case 3:
            goto LABEL_158;
          case 4:
            goto LABEL_160;
          default:
            goto LABEL_162;
        }
      }
      goto LABEL_162;
    case 0xBu:
      unsigned int v66 = a1[v61];
      unsigned int v67 = v66 - 2;
      if (v66 >= 2)
      {
        if (v61 <= 3) {
          uint64_t v69 = v61;
        }
        else {
          uint64_t v69 = 4;
        }
        switch(v69)
        {
          case 1:
            goto LABEL_154;
          case 2:
            goto LABEL_156;
          case 3:
            goto LABEL_158;
          case 4:
            goto LABEL_160;
          default:
            goto LABEL_162;
        }
      }
      goto LABEL_162;
    case 0xCu:
      unsigned int v66 = a1[v61];
      unsigned int v67 = v66 - 2;
      if (v66 >= 2)
      {
        if (v61 <= 3) {
          uint64_t v95 = v61;
        }
        else {
          uint64_t v95 = 4;
        }
        switch(v95)
        {
          case 1:
            goto LABEL_154;
          case 2:
            goto LABEL_156;
          case 3:
            goto LABEL_158;
          case 4:
            goto LABEL_160;
          default:
            goto LABEL_162;
        }
      }
      goto LABEL_162;
    case 0xDu:
      unsigned int v66 = a1[v61];
      unsigned int v67 = v66 - 2;
      if (v66 >= 2)
      {
        if (v61 <= 3) {
          uint64_t v96 = v61;
        }
        else {
          uint64_t v96 = 4;
        }
        switch(v96)
        {
          case 1:
            goto LABEL_154;
          case 2:
            goto LABEL_156;
          case 3:
            goto LABEL_158;
          case 4:
            goto LABEL_160;
          default:
            goto LABEL_162;
        }
      }
      goto LABEL_162;
    default:
      unsigned int v66 = a1[v61];
      unsigned int v67 = v66 - 2;
      if (v66 >= 2)
      {
        if (v61 <= 3) {
          uint64_t v68 = v61;
        }
        else {
          uint64_t v68 = 4;
        }
        switch(v68)
        {
          case 1:
LABEL_154:
            int v97 = *a1;
            if (v61 < 4) {
              goto LABEL_159;
            }
            goto LABEL_161;
          case 2:
LABEL_156:
            int v97 = *(unsigned __int16 *)a1;
            if (v61 >= 4) {
              goto LABEL_161;
            }
            goto LABEL_159;
          case 3:
LABEL_158:
            int v97 = *(unsigned __int16 *)a1 | (a1[2] << 16);
            if (v61 < 4) {
              goto LABEL_159;
            }
            goto LABEL_161;
          case 4:
LABEL_160:
            int v97 = *(_DWORD *)a1;
            if (v61 < 4) {
LABEL_159:
            }
              unsigned int v66 = (v97 | (v67 << (8 * v61))) + 2;
            else {
LABEL_161:
            }
              unsigned int v66 = v97 + 2;
            break;
          default:
            break;
        }
      }
LABEL_162:
      unint64_t v70 = v45;
      if (v66 == 1) {
        (*(void (**)(unsigned __int8 *, uint64_t))(v480 + 8))(a1, v482);
      }
      else {
        (*(void (**)(unsigned __int8 *, uint64_t))(v481 + 8))(a1, AssociatedTypeWitness);
      }
      break;
  }
LABEL_253:
  if (v484 > 3) {
    goto LABEL_257;
  }
  unsigned int v125 = ((1 << (8 * v484)) | 2u) >> (8 * v484);
  unsigned int v126 = v125 | 0x10;
  BOOL v25 = HIWORD(v125) == 0;
  uint64_t v127 = 2;
  if (!v25) {
    uint64_t v127 = 4;
  }
  if (v126 <= 0xFF) {
LABEL_257:
  }
    uint64_t v127 = 1;
  unint64_t v128 = v70;
  unint64_t v129 = v486;
  unint64_t v130 = v485 + v127;
  if (v130 <= v489) {
    unint64_t v130 = v489;
  }
  uint64_t v131 = v479;
  if (v479 > 3) {
    goto LABEL_264;
  }
  unsigned int v132 = ((1 << v477) | 2u) >> v477;
  unsigned int v133 = v132 | 0x10;
  BOOL v25 = HIWORD(v132) == 0;
  uint64_t v134 = 2;
  if (!v25) {
    uint64_t v134 = 4;
  }
  if (v133 <= 0xFF) {
LABEL_264:
  }
    uint64_t v134 = 1;
  unint64_t v135 = v128 + v134;
  if (v135 > v130) {
    unint64_t v130 = v135;
  }
  if (v40 > v130) {
    unint64_t v130 = v40;
  }
  if (v56 > v130) {
    unint64_t v130 = v56;
  }
  if (v475 > v130) {
    unint64_t v130 = v475;
  }
  if (v42 > v130) {
    unint64_t v130 = v42;
  }
  unsigned int v136 = a2[v130];
  unsigned int v137 = v136 - 14;
  if (v136 >= 0xE)
  {
    if (v484 > 3) {
      goto LABEL_280;
    }
    unsigned int v138 = ((1 << (8 * v484)) | 2u) >> (8 * v484);
    unsigned int v139 = v138 | 0x10;
    BOOL v25 = HIWORD(v138) == 0;
    uint64_t v140 = 2;
    if (!v25) {
      uint64_t v140 = 4;
    }
    if (v139 <= 0xFF) {
LABEL_280:
    }
      uint64_t v140 = 1;
    unint64_t v141 = v485 + v140;
    if (v141 <= v489) {
      unint64_t v141 = v489;
    }
    if (v479 > 3) {
      goto LABEL_287;
    }
    unsigned int v142 = ((1 << v477) | 2u) >> v477;
    unsigned int v143 = v142 | 0x10;
    BOOL v25 = HIWORD(v142) == 0;
    uint64_t v144 = 2;
    if (!v25) {
      uint64_t v144 = 4;
    }
    if (v143 <= 0xFF) {
LABEL_287:
    }
      uint64_t v144 = 1;
    unint64_t v145 = v128 + v144;
    if (v145 > v141) {
      unint64_t v141 = v145;
    }
    if (v40 > v141) {
      unint64_t v141 = v40;
    }
    if (v56 > v141) {
      unint64_t v141 = v56;
    }
    if (v475 > v141) {
      unint64_t v141 = v475;
    }
    if (v42 > v141) {
      LODWORD(v141) = v42;
    }
    if (v141 <= 3) {
      uint64_t v146 = v141;
    }
    else {
      uint64_t v146 = 4;
    }
    switch(v146)
    {
      case 1:
        int v147 = *a2;
        if (v141 < 4) {
          goto LABEL_305;
        }
        goto LABEL_309;
      case 2:
        int v147 = *(unsigned __int16 *)a2;
        if (v141 < 4) {
          goto LABEL_305;
        }
        goto LABEL_309;
      case 3:
        int v147 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        if (v141 < 4) {
          goto LABEL_305;
        }
        goto LABEL_309;
      case 4:
        int v147 = *(_DWORD *)a2;
        if (v141 < 4) {
LABEL_305:
        }
          unsigned int v136 = (v147 | (v137 << (8 * v141))) + 14;
        else {
LABEL_309:
        }
          unsigned int v136 = v147 + 14;
        break;
      default:
        break;
    }
  }
  switch(v136)
  {
    case 1u:
      unint64_t v158 = v42;
      (*(void (**)(unsigned __int8 *))(v481 + 16))(a1);
      unint64_t v159 = (unint64_t)&a1[v464] & v471;
      unint64_t v160 = (unint64_t)&a2[v464] & v471;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v480 + 16))(v159, v160, v482);
      *(unsigned char *)(v159 + v463) = *(unsigned char *)(v160 + v463);
      if (v484 > 3) {
        goto LABEL_328;
      }
      unsigned int v161 = ((1 << (8 * v484)) | 2u) >> (8 * v484);
      unsigned int v162 = v161 | 0x10;
      BOOL v25 = HIWORD(v161) == 0;
      uint64_t v163 = 2;
      if (!v25) {
        uint64_t v163 = 4;
      }
      if (v162 <= 0xFF) {
LABEL_328:
      }
        uint64_t v163 = 1;
      unint64_t v42 = v158;
      unint64_t v164 = v485 + v163;
      if (v164 <= v489) {
        unint64_t v164 = v489;
      }
      uint64_t v2 = a1;
      if (v479 > 3) {
        goto LABEL_335;
      }
      char v165 = 1;
      unsigned int v166 = ((1 << v477) | 2u) >> v477;
      unsigned int v167 = v166 | 0x10;
      BOOL v25 = HIWORD(v166) == 0;
      uint64_t v168 = 2;
      if (!v25) {
        uint64_t v168 = 4;
      }
      if (v167 <= 0xFF)
      {
LABEL_335:
        uint64_t v168 = 1;
        char v165 = 1;
      }
      goto LABEL_995;
    case 2u:
      unsigned int v169 = a2[v486];
      unsigned int v170 = v169 - 2;
      if (v169 < 2)
      {
        unint64_t v172 = v128;
      }
      else
      {
        if (v486 <= 3) {
          uint64_t v171 = v486;
        }
        else {
          uint64_t v171 = 4;
        }
        unint64_t v172 = v128;
        switch(v171)
        {
          case 1:
            int v173 = *a2;
            goto LABEL_477;
          case 2:
            int v173 = *(unsigned __int16 *)a2;
            goto LABEL_477;
          case 3:
            int v173 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_477;
          case 4:
            int v173 = *(_DWORD *)a2;
LABEL_477:
            if (v486 < 4) {
              unsigned int v169 = (v173 | (v170 << (8 * v486))) + 2;
            }
            else {
              unsigned int v169 = v173 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v234 = v169 == 1;
      uint64_t v235 = v481;
      if (v169 == 1) {
        uint64_t v235 = v480;
      }
      (*(void (**)(unsigned __int8 *))(v235 + 16))(a1);
      a1[v486] = v234;
      a1[v478] = a2[v478];
      if (v484 > 3) {
        goto LABEL_486;
      }
      unsigned int v236 = ((1 << (8 * v484)) | 2u) >> (8 * v484);
      unsigned int v237 = v236 | 0x10;
      BOOL v25 = HIWORD(v236) == 0;
      uint64_t v238 = 2;
      if (!v25) {
        uint64_t v238 = 4;
      }
      if (v237 <= 0xFF) {
LABEL_486:
      }
        uint64_t v238 = 1;
      unint64_t v128 = v172;
      unint64_t v164 = v485 + v238;
      if (v164 <= v489) {
        unint64_t v164 = v489;
      }
      if (v479 <= 3)
      {
        unsigned int v239 = ((1 << v477) | 2u) >> v477;
        unsigned int v240 = v239 | 0x10;
        BOOL v25 = HIWORD(v239) == 0;
        char v165 = 2;
        uint64_t v168 = 4;
        if (v25) {
          uint64_t v168 = 2;
        }
        if (v240 > 0xFF) {
          goto LABEL_995;
        }
      }
      char v165 = 2;
      goto LABEL_994;
    case 3u:
      unsigned int v174 = a2[v486];
      unsigned int v175 = v174 - 2;
      if (v174 >= 2)
      {
        if (v486 <= 3) {
          uint64_t v176 = v486;
        }
        else {
          uint64_t v176 = 4;
        }
        switch(v176)
        {
          case 1:
            int v177 = *a2;
            goto LABEL_498;
          case 2:
            int v177 = *(unsigned __int16 *)a2;
            goto LABEL_498;
          case 3:
            int v177 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_498;
          case 4:
            int v177 = *(_DWORD *)a2;
LABEL_498:
            if (v486 < 4) {
              unsigned int v174 = (v177 | (v175 << (8 * v486))) + 2;
            }
            else {
              unsigned int v174 = v177 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v241 = v174 == 1;
      uint64_t v242 = v481;
      if (v174 == 1)
      {
        uint64_t v242 = v480;
        uint64_t v243 = v482;
      }
      else
      {
        uint64_t v243 = AssociatedTypeWitness;
      }
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v242 + 16))(a1, a2, v243);
      a1[v486] = v241;
      if (v484 > 3) {
        goto LABEL_508;
      }
      unsigned int v244 = ((1 << (8 * v484)) | 2u) >> (8 * v484);
      unsigned int v245 = v244 | 0x10;
      BOOL v25 = HIWORD(v244) == 0;
      uint64_t v246 = 2;
      if (!v25) {
        uint64_t v246 = 4;
      }
      if (v245 <= 0xFF) {
LABEL_508:
      }
        uint64_t v246 = 1;
      unint64_t v164 = v485 + v246;
      if (v164 <= v489) {
        unint64_t v164 = v489;
      }
      if (v479 <= 3)
      {
        unsigned int v247 = ((1 << v477) | 2u) >> v477;
        unsigned int v248 = v247 | 0x10;
        BOOL v25 = HIWORD(v247) == 0;
        uint64_t v168 = 2;
        if (!v25) {
          uint64_t v168 = 4;
        }
        if (v248 > 0xFF)
        {
          char v165 = 3;
          goto LABEL_995;
        }
      }
      char v165 = 3;
      goto LABEL_994;
    case 4u:
      unsigned int v178 = a2[v486];
      unsigned int v179 = v178 - 2;
      if (v178 < 2)
      {
        unint64_t v181 = v128;
      }
      else
      {
        if (v486 <= 3) {
          uint64_t v180 = v486;
        }
        else {
          uint64_t v180 = 4;
        }
        unint64_t v181 = v128;
        switch(v180)
        {
          case 1:
            int v182 = *a2;
            goto LABEL_520;
          case 2:
            int v182 = *(unsigned __int16 *)a2;
            goto LABEL_520;
          case 3:
            int v182 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_520;
          case 4:
            int v182 = *(_DWORD *)a2;
LABEL_520:
            if (v486 < 4) {
              unsigned int v178 = (v182 | (v179 << (8 * v486))) + 2;
            }
            else {
              unsigned int v178 = v182 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v249 = v178 == 1;
      uint64_t v250 = v481;
      if (v178 == 1) {
        uint64_t v250 = v480;
      }
      (*(void (**)(unsigned __int8 *))(v250 + 16))(a1);
      a1[v486] = v249;
      *(void *)((unint64_t)&a1[v478 + 7] & 0xFFFFFFFFFFFFFFF8) = *(void *)((unint64_t)&a2[v478 + 7] & 0xFFFFFFFFFFFFFFF8);
      if (v484 > 3) {
        goto LABEL_529;
      }
      unsigned int v251 = ((1 << (8 * v484)) | 2u) >> (8 * v484);
      unsigned int v252 = v251 | 0x10;
      BOOL v25 = HIWORD(v251) == 0;
      uint64_t v253 = 2;
      if (!v25) {
        uint64_t v253 = 4;
      }
      if (v252 <= 0xFF) {
LABEL_529:
      }
        uint64_t v253 = 1;
      unint64_t v128 = v181;
      unint64_t v164 = v485 + v253;
      if (v164 <= v489) {
        unint64_t v164 = v489;
      }
      if (v479 <= 3)
      {
        unsigned int v254 = ((1 << v477) | 2u) >> v477;
        unsigned int v255 = v254 | 0x10;
        BOOL v25 = HIWORD(v254) == 0;
        uint64_t v168 = 2;
        char v165 = 4;
        if (!v25) {
          uint64_t v168 = 4;
        }
        if (v255 > 0xFF) {
          goto LABEL_995;
        }
      }
      char v165 = 4;
      goto LABEL_994;
    case 5u:
      unsigned int v183 = a2[v486];
      unsigned int v184 = v183 - 2;
      if (v183 < 2)
      {
        unint64_t v186 = v128;
      }
      else
      {
        if (v486 <= 3) {
          uint64_t v185 = v486;
        }
        else {
          uint64_t v185 = 4;
        }
        unint64_t v186 = v128;
        switch(v185)
        {
          case 1:
            int v187 = *a2;
            goto LABEL_540;
          case 2:
            int v187 = *(unsigned __int16 *)a2;
            goto LABEL_540;
          case 3:
            int v187 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_540;
          case 4:
            int v187 = *(_DWORD *)a2;
LABEL_540:
            if (v486 < 4) {
              unsigned int v183 = (v187 | (v184 << (8 * v486))) + 2;
            }
            else {
              unsigned int v183 = v187 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v256 = v183 == 1;
      uint64_t v257 = v481;
      if (v183 == 1) {
        uint64_t v257 = v480;
      }
      (*(void (**)(unsigned __int8 *))(v257 + 16))(a1);
      a1[v486] = v256;
      *(void *)((unint64_t)&a1[v478 + 7] & 0xFFFFFFFFFFFFFFF8) = *(void *)((unint64_t)&a2[v478 + 7] & 0xFFFFFFFFFFFFFFF8);
      if (v484 > 3) {
        goto LABEL_549;
      }
      unsigned int v258 = ((1 << (8 * v484)) | 2u) >> (8 * v484);
      unsigned int v259 = v258 | 0x10;
      BOOL v25 = HIWORD(v258) == 0;
      uint64_t v260 = 2;
      if (!v25) {
        uint64_t v260 = 4;
      }
      if (v259 <= 0xFF) {
LABEL_549:
      }
        uint64_t v260 = 1;
      unint64_t v128 = v186;
      unint64_t v164 = v485 + v260;
      if (v164 <= v489) {
        unint64_t v164 = v489;
      }
      if (v479 <= 3)
      {
        unsigned int v261 = ((1 << v477) | 2u) >> v477;
        unsigned int v262 = v261 | 0x10;
        BOOL v25 = HIWORD(v261) == 0;
        uint64_t v168 = 2;
        if (!v25) {
          uint64_t v168 = 4;
        }
        if (v262 > 0xFF)
        {
          char v165 = 5;
          goto LABEL_995;
        }
      }
      char v165 = 5;
      goto LABEL_994;
    case 6u:
      unsigned int v188 = a2[v486];
      unsigned int v189 = v188 - 2;
      if (v188 >= 2)
      {
        if (v486 <= 3) {
          uint64_t v190 = v486;
        }
        else {
          uint64_t v190 = 4;
        }
        switch(v190)
        {
          case 1:
            int v191 = *a2;
            goto LABEL_561;
          case 2:
            int v191 = *(unsigned __int16 *)a2;
            goto LABEL_561;
          case 3:
            int v191 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_561;
          case 4:
            int v191 = *(_DWORD *)a2;
LABEL_561:
            if (v486 < 4) {
              unsigned int v188 = (v191 | (v189 << (8 * v486))) + 2;
            }
            else {
              unsigned int v188 = v191 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v263 = v188 == 1;
      uint64_t v264 = v481;
      if (v188 == 1) {
        uint64_t v264 = v480;
      }
      (*(void (**)(unsigned __int8 *))(v264 + 16))(a1);
      a1[v486] = v263;
      uint64_t v265 = (unsigned __int8 *)((unint64_t)&a2[v466] & v473);
      unsigned int v266 = v265[v486];
      unsigned int v267 = v266 - 2;
      if (v266 < 2)
      {
        uint64_t v269 = v485;
      }
      else
      {
        if (v486 <= 3) {
          uint64_t v268 = v486;
        }
        else {
          uint64_t v268 = 4;
        }
        uint64_t v269 = v485;
        switch(v268)
        {
          case 1:
            int v270 = *v265;
            goto LABEL_694;
          case 2:
            int v270 = *(unsigned __int16 *)v265;
            goto LABEL_694;
          case 3:
            int v270 = *(unsigned __int16 *)((unint64_t)&a2[v466] & v473) | (*(unsigned __int8 *)(((unint64_t)&a2[v466] & v473) + 2) << 16);
            goto LABEL_694;
          case 4:
            int v270 = *(_DWORD *)v265;
LABEL_694:
            if (v486 < 4) {
              unsigned int v266 = (v270 | (v267 << (8 * v486))) + 2;
            }
            else {
              unsigned int v266 = v270 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v327 = v266 == 1;
      uint64_t v328 = v481;
      if (v266 == 1) {
        uint64_t v328 = v480;
      }
      (*(void (**)(unint64_t))(v328 + 16))((unint64_t)&a1[v466] & v473);
      *(unsigned char *)(((unint64_t)&a1[v466] & v473) + v486) = v327;
      if (v484 > 3) {
        goto LABEL_703;
      }
      unsigned int v329 = ((1 << (8 * v484)) | 2u) >> (8 * v484);
      unsigned int v330 = v329 | 0x10;
      BOOL v25 = HIWORD(v329) == 0;
      uint64_t v331 = 2;
      if (!v25) {
        uint64_t v331 = 4;
      }
      if (v330 <= 0xFF) {
LABEL_703:
      }
        uint64_t v331 = 1;
      unint64_t v164 = v269 + v331;
      if (v164 <= v489) {
        unint64_t v164 = v489;
      }
      if (v479 <= 3)
      {
        unsigned int v332 = ((1 << v477) | 2u) >> v477;
        unsigned int v333 = v332 | 0x10;
        BOOL v25 = HIWORD(v332) == 0;
        uint64_t v168 = 2;
        if (!v25) {
          uint64_t v168 = 4;
        }
        if (v333 > 0xFF)
        {
          char v165 = 6;
          goto LABEL_995;
        }
      }
      char v165 = 6;
      goto LABEL_994;
    case 7u:
      unsigned int v192 = a2[v486];
      unsigned int v193 = v192 - 2;
      if (v192 >= 2)
      {
        if (v486 <= 3) {
          uint64_t v194 = v486;
        }
        else {
          uint64_t v194 = 4;
        }
        switch(v194)
        {
          case 1:
            int v195 = *a2;
            goto LABEL_576;
          case 2:
            int v195 = *(unsigned __int16 *)a2;
            goto LABEL_576;
          case 3:
            int v195 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_576;
          case 4:
            int v195 = *(_DWORD *)a2;
LABEL_576:
            if (v486 < 4) {
              unsigned int v192 = (v195 | (v193 << (8 * v486))) + 2;
            }
            else {
              unsigned int v192 = v195 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v271 = v192 == 1;
      uint64_t v272 = v481;
      if (v192 == 1) {
        uint64_t v272 = v480;
      }
      (*(void (**)(unsigned __int8 *))(v272 + 16))(a1);
      a1[v486] = v271;
      uint64_t v273 = (unsigned __int8 *)((unint64_t)&a2[v466] & v473);
      unsigned int v274 = v273[v486];
      unsigned int v275 = v274 - 2;
      if (v274 < 2)
      {
        uint64_t v277 = v485;
      }
      else
      {
        if (v486 <= 3) {
          uint64_t v276 = v486;
        }
        else {
          uint64_t v276 = 4;
        }
        uint64_t v277 = v485;
        switch(v276)
        {
          case 1:
            int v278 = *v273;
            goto LABEL_715;
          case 2:
            int v278 = *(unsigned __int16 *)v273;
            goto LABEL_715;
          case 3:
            int v278 = *(unsigned __int16 *)((unint64_t)&a2[v466] & v473) | (*(unsigned __int8 *)(((unint64_t)&a2[v466] & v473) + 2) << 16);
            goto LABEL_715;
          case 4:
            int v278 = *(_DWORD *)v273;
LABEL_715:
            if (v486 < 4) {
              unsigned int v274 = (v278 | (v275 << (8 * v486))) + 2;
            }
            else {
              unsigned int v274 = v278 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v334 = v274 == 1;
      uint64_t v335 = v481;
      if (v274 == 1) {
        uint64_t v335 = v480;
      }
      (*(void (**)(unint64_t))(v335 + 16))((unint64_t)&a1[v466] & v473);
      *(unsigned char *)(((unint64_t)&a1[v466] & v473) + v486) = v334;
      if (v484 > 3) {
        goto LABEL_724;
      }
      unsigned int v336 = ((1 << (8 * v484)) | 2u) >> (8 * v484);
      unsigned int v337 = v336 | 0x10;
      BOOL v25 = HIWORD(v336) == 0;
      uint64_t v338 = 2;
      if (!v25) {
        uint64_t v338 = 4;
      }
      if (v337 <= 0xFF) {
LABEL_724:
      }
        uint64_t v338 = 1;
      unint64_t v164 = v277 + v338;
      if (v164 <= v489) {
        unint64_t v164 = v489;
      }
      if (v479 <= 3)
      {
        unsigned int v339 = ((1 << v477) | 2u) >> v477;
        unsigned int v340 = v339 | 0x10;
        BOOL v25 = HIWORD(v339) == 0;
        uint64_t v168 = 2;
        if (!v25) {
          uint64_t v168 = 4;
        }
        if (v340 > 0xFF)
        {
          char v165 = 7;
          goto LABEL_995;
        }
      }
      char v165 = 7;
      goto LABEL_994;
    case 8u:
      unsigned int v196 = a2[v486];
      unsigned int v197 = v196 - 2;
      if (v196 >= 2)
      {
        if (v486 <= 3) {
          uint64_t v198 = v486;
        }
        else {
          uint64_t v198 = 4;
        }
        switch(v198)
        {
          case 1:
            int v199 = *a2;
            goto LABEL_591;
          case 2:
            int v199 = *(unsigned __int16 *)a2;
            goto LABEL_591;
          case 3:
            int v199 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_591;
          case 4:
            int v199 = *(_DWORD *)a2;
LABEL_591:
            if (v486 < 4) {
              unsigned int v196 = (v199 | (v197 << (8 * v486))) + 2;
            }
            else {
              unsigned int v196 = v199 + 2;
            }
            break;
          default:
            break;
        }
      }
      unint64_t v279 = v42;
      BOOL v280 = v196 == 1;
      uint64_t v281 = v481;
      if (v196 == 1) {
        uint64_t v281 = v480;
      }
      unint64_t v282 = v128;
      (*(void (**)(unsigned __int8 *))(v281 + 16))(a1);
      a1[v486] = v280;
      uint64_t v283 = (unsigned __int8 *)((unint64_t)&a2[v465] & v469);
      if (v484 > 3) {
        goto LABEL_597;
      }
      unsigned int v285 = ((1 << (8 * v484)) | 2u) >> (8 * v484);
      if (HIWORD(v285))
      {
        unsigned int v284 = *(_DWORD *)&v283[v484];
      }
      else if ((v285 | 0x10) <= 0xFF)
      {
LABEL_597:
        unsigned int v284 = v283[v484];
      }
      else
      {
        unsigned int v284 = *(unsigned __int16 *)&v283[v484];
      }
      long long v286 = (_OWORD *)((unint64_t)&a1[v465] & v469);
      unsigned int v287 = v284 - 16;
      if (v284 >= 0x10)
      {
        if (v484 <= 3) {
          uint64_t v288 = v484;
        }
        else {
          uint64_t v288 = 4;
        }
        switch(v288)
        {
          case 1:
            int v289 = *v283;
            goto LABEL_736;
          case 2:
            int v289 = *(unsigned __int16 *)v283;
            goto LABEL_736;
          case 3:
            int v289 = *(unsigned __int16 *)((unint64_t)&a2[v465] & v469) | (*(unsigned __int8 *)(((unint64_t)&a2[v465] & v469) + 2) << 16);
            goto LABEL_736;
          case 4:
            int v289 = *(_DWORD *)v283;
LABEL_736:
            if (v484 < 4) {
              v289 |= v287 << (8 * v484);
            }
            unsigned int v284 = v289 + 16;
            break;
          default:
            goto LABEL_739;
        }
      }
      break;
    case 9u:
      unsigned int v200 = a2[v486];
      unsigned int v201 = v200 - 2;
      if (v200 >= 2)
      {
        if (v486 <= 3) {
          uint64_t v202 = v486;
        }
        else {
          uint64_t v202 = 4;
        }
        switch(v202)
        {
          case 1:
            int v203 = *a2;
            goto LABEL_611;
          case 2:
            int v203 = *(unsigned __int16 *)a2;
            goto LABEL_611;
          case 3:
            int v203 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_611;
          case 4:
            int v203 = *(_DWORD *)a2;
LABEL_611:
            if (v486 < 4) {
              unsigned int v200 = (v203 | (v201 << (8 * v486))) + 2;
            }
            else {
              unsigned int v200 = v203 + 2;
            }
            break;
          default:
            break;
        }
      }
      unint64_t v487 = v42;
      BOOL v290 = v200 == 1;
      uint64_t v291 = v481;
      if (v200 == 1) {
        uint64_t v291 = v480;
      }
      unint64_t v292 = v128;
      unint64_t v293 = v129;
      (*(void (**)(unsigned __int8 *))(v291 + 16))(a1);
      a1[v293] = v290;
      char v294 = (unsigned __int8 *)((unint64_t)&a2[v478 + v35] & v467);
      if (v479 > 3) {
        goto LABEL_617;
      }
      unsigned int v296 = ((1 << v477) | 2u) >> v477;
      if (HIWORD(v296))
      {
        unsigned int v295 = *(_DWORD *)&v294[v479];
      }
      else if ((v296 | 0x10) <= 0xFF)
      {
LABEL_617:
        unsigned int v295 = v294[v479];
      }
      else
      {
        unsigned int v295 = *(unsigned __int16 *)&v294[v479];
      }
      unsigned int v297 = (_OWORD *)((unint64_t)&a1[v478 + v35] & v467);
      unsigned int v298 = v295 - 16;
      if (v295 >= 0x10)
      {
        if (v479 <= 3) {
          uint64_t v299 = v479;
        }
        else {
          uint64_t v299 = 4;
        }
        switch(v299)
        {
          case 1:
            int v300 = *v294;
            goto LABEL_747;
          case 2:
            int v300 = *(unsigned __int16 *)v294;
            goto LABEL_747;
          case 3:
            int v300 = *(unsigned __int16 *)((unint64_t)&a2[v478 + v35] & v467) | (*(unsigned __int8 *)(((unint64_t)&a2[v478 + v35] & v467) + 2) << 16);
            goto LABEL_747;
          case 4:
            int v300 = *(_DWORD *)v294;
LABEL_747:
            if (v479 < 4) {
              v300 |= v298 << v477;
            }
            unsigned int v295 = v300 + 16;
            break;
          default:
            break;
        }
      }
      switch(v295)
      {
        case 0u:
          long long v346 = *(_OWORD *)v294;
          *(void *)(((unint64_t)&a1[v478 + v35] & v467) + 0x10) = *(void *)(((unint64_t)&a2[v478 + v35] & v467)
                                                                                     + 0x10);
          *unsigned int v297 = v346;
          uint64_t v347 = v485;
          unint64_t v42 = v487;
          unsigned int v348 = v484;
          if (v479 > 3) {
            goto LABEL_754;
          }
          unsigned int v349 = ((1 << v477) | 2u) >> v477;
          if (HIWORD(v349))
          {
            *(_DWORD *)((char *)v297 + v479) = 0;
          }
          else if ((v349 | 0x10) > 0xFF)
          {
            *(_WORD *)((char *)v297 + v479) = 0;
          }
          else
          {
LABEL_754:
            *((unsigned char *)v297 + v479) = 0;
          }
          break;
        case 1u:
          *(void *)unsigned int v297 = *(void *)v294;
          uint64_t v347 = v485;
          unint64_t v42 = v487;
          unsigned int v348 = v484;
          if (v479 > 3) {
            goto LABEL_812;
          }
          unsigned int v373 = ((1 << v477) | 2u) >> v477;
          if (HIWORD(v373))
          {
            *(_DWORD *)((char *)v297 + v479) = 1;
          }
          else
          {
            if ((v373 | 0x10) > 0xFF)
            {
              __int16 v433 = 1;
              goto LABEL_980;
            }
LABEL_812:
            *((unsigned char *)v297 + v479) = 1;
          }
          break;
        case 2u:
          *unsigned int v297 = *(_OWORD *)v294;
          uint64_t v347 = v485;
          unint64_t v42 = v487;
          unsigned int v348 = v484;
          if (v479 > 3) {
            goto LABEL_816;
          }
          unsigned int v374 = ((1 << v477) | 2u) >> v477;
          if (HIWORD(v374))
          {
            *(_DWORD *)((char *)v297 + v479) = 2;
          }
          else
          {
            if ((v374 | 0x10) > 0xFF)
            {
              __int16 v433 = 2;
              goto LABEL_980;
            }
LABEL_816:
            *((unsigned char *)v297 + v479) = 2;
          }
          break;
        case 3u:
          *(unsigned char *)unsigned int v297 = *v294;
          uint64_t v347 = v485;
          unint64_t v42 = v487;
          unsigned int v348 = v484;
          if (v479 > 3) {
            goto LABEL_820;
          }
          unsigned int v375 = ((1 << v477) | 2u) >> v477;
          if (HIWORD(v375))
          {
            *(_DWORD *)((char *)v297 + v479) = 3;
          }
          else
          {
            if ((v375 | 0x10) > 0xFF)
            {
              __int16 v433 = 3;
              goto LABEL_980;
            }
LABEL_820:
            *((unsigned char *)v297 + v479) = 3;
          }
          break;
        case 4u:
          *(unsigned char *)unsigned int v297 = *v294;
          uint64_t v347 = v485;
          unint64_t v42 = v487;
          unsigned int v348 = v484;
          if (v479 > 3) {
            goto LABEL_824;
          }
          unsigned int v376 = ((1 << v477) | 2u) >> v477;
          if (HIWORD(v376))
          {
            *(_DWORD *)((char *)v297 + v479) = 4;
          }
          else
          {
            if ((v376 | 0x10) > 0xFF)
            {
              __int16 v433 = 4;
              goto LABEL_980;
            }
LABEL_824:
            *((unsigned char *)v297 + v479) = 4;
          }
          break;
        case 5u:
          *(unsigned char *)unsigned int v297 = *v294;
          uint64_t v347 = v485;
          unint64_t v42 = v487;
          unsigned int v348 = v484;
          if (v479 > 3) {
            goto LABEL_828;
          }
          unsigned int v377 = ((1 << v477) | 2u) >> v477;
          if (HIWORD(v377))
          {
            *(_DWORD *)((char *)v297 + v479) = 5;
          }
          else
          {
            if ((v377 | 0x10) > 0xFF)
            {
              __int16 v433 = 5;
              goto LABEL_980;
            }
LABEL_828:
            *((unsigned char *)v297 + v479) = 5;
          }
          break;
        case 6u:
          *(unsigned char *)unsigned int v297 = *v294;
          uint64_t v347 = v485;
          unint64_t v42 = v487;
          unsigned int v348 = v484;
          if (v479 > 3) {
            goto LABEL_832;
          }
          unsigned int v378 = ((1 << v477) | 2u) >> v477;
          if (HIWORD(v378))
          {
            *(_DWORD *)((char *)v297 + v479) = 6;
          }
          else
          {
            if ((v378 | 0x10) > 0xFF)
            {
              __int16 v433 = 6;
              goto LABEL_980;
            }
LABEL_832:
            *((unsigned char *)v297 + v479) = 6;
          }
          break;
        case 7u:
          *(unsigned char *)unsigned int v297 = *v294;
          uint64_t v347 = v485;
          unint64_t v42 = v487;
          unsigned int v348 = v484;
          if (v479 > 3) {
            goto LABEL_836;
          }
          unsigned int v379 = ((1 << v477) | 2u) >> v477;
          if (HIWORD(v379))
          {
            *(_DWORD *)((char *)v297 + v479) = 7;
          }
          else
          {
            if ((v379 | 0x10) > 0xFF)
            {
              __int16 v433 = 7;
              goto LABEL_980;
            }
LABEL_836:
            *((unsigned char *)v297 + v479) = 7;
          }
          break;
        case 8u:
          (*(void (**)(_OWORD *, unsigned __int8 *, uint64_t))(v459 + 16))(v297, v294, v460);
          unsigned int v380 = (void *)(((unint64_t)v297 + v456) & 0xFFFFFFFFFFFFFFF8);
          unsigned int v381 = (void *)((unint64_t)&v294[v456] & 0xFFFFFFFFFFFFFFF8);
          *unsigned int v380 = *v381;
          unint64_t v382 = v128;
          unint64_t v383 = ((unint64_t)v380 + v457) & v455;
          unint64_t v384 = ((unint64_t)v381 + v457) & v455;
          unsigned int v385 = *(void (**)(unint64_t, unint64_t, uint64_t))(v461 + 16);
          swift_bridgeObjectRetain();
          v385(v383, v384, v462);
          unint64_t v386 = v458 + v383;
          unint64_t v128 = v382;
          v386 &= 0xFFFFFFFFFFFFFFF8;
          unint64_t v387 = v458 + v384;
          unint64_t v47 = v475;
          v387 &= 0xFFFFFFFFFFFFFFF8;
          *(void *)unint64_t v386 = *(void *)v387;
          uint64_t v388 = (void *)((v386 + 15) & 0xFFFFFFFFFFFFFFF8);
          uint64_t v389 = (void *)((v387 + 15) & 0xFFFFFFFFFFFFFFF8);
          *uint64_t v388 = *v389;
          v388[1] = v389[1];
          *((unsigned char *)v297 + v446) = v294[v446];
          *(unsigned char *)(((unint64_t)v297 + v446) | 1) = *(unsigned char *)((unint64_t)&v294[v446] | 1);
          swift_bridgeObjectRetain();
          uint64_t v131 = v479;
          swift_bridgeObjectRetain();
          uint64_t v347 = v485;
          unint64_t v42 = v487;
          unsigned int v348 = v484;
          if (v479 > 3) {
            goto LABEL_840;
          }
          unsigned int v390 = ((1 << v477) | 2u) >> v477;
          if (HIWORD(v390))
          {
            *(_DWORD *)((char *)v297 + v479) = 8;
          }
          else
          {
            if ((v390 | 0x10) > 0xFF)
            {
              __int16 v433 = 8;
              goto LABEL_980;
            }
LABEL_840:
            *((unsigned char *)v297 + v479) = 8;
          }
          break;
        case 9u:
          uint64_t v391 = *(void **)v294;
          *(void *)unsigned int v297 = *(void *)v294;
          id v392 = v391;
          uint64_t v347 = v485;
          unint64_t v42 = v487;
          unsigned int v348 = v484;
          if (v479 > 3) {
            goto LABEL_844;
          }
          unsigned int v393 = ((1 << v477) | 2u) >> v477;
          if (HIWORD(v393))
          {
            *(_DWORD *)((char *)v297 + v479) = 9;
          }
          else
          {
            if ((v393 | 0x10) > 0xFF)
            {
              __int16 v433 = 9;
              goto LABEL_980;
            }
LABEL_844:
            *((unsigned char *)v297 + v479) = 9;
          }
          break;
        case 0xAu:
          *(unsigned char *)unsigned int v297 = *v294;
          uint64_t v347 = v485;
          unint64_t v42 = v487;
          unsigned int v348 = v484;
          if (v479 > 3) {
            goto LABEL_848;
          }
          unsigned int v394 = ((1 << v477) | 2u) >> v477;
          if (HIWORD(v394))
          {
            *(_DWORD *)((char *)v297 + v479) = 10;
          }
          else
          {
            if ((v394 | 0x10) > 0xFF)
            {
              __int16 v433 = 10;
              goto LABEL_980;
            }
LABEL_848:
            *((unsigned char *)v297 + v479) = 10;
          }
          break;
        case 0xBu:
          *(_WORD *)unsigned int v297 = *(_WORD *)v294;
          uint64_t v347 = v485;
          unint64_t v42 = v487;
          unsigned int v348 = v484;
          if (v479 > 3) {
            goto LABEL_852;
          }
          unsigned int v395 = ((1 << v477) | 2u) >> v477;
          if (HIWORD(v395))
          {
            *(_DWORD *)((char *)v297 + v479) = 11;
          }
          else
          {
            if ((v395 | 0x10) > 0xFF)
            {
              __int16 v433 = 11;
              goto LABEL_980;
            }
LABEL_852:
            *((unsigned char *)v297 + v479) = 11;
          }
          break;
        case 0xCu:
          uint64_t v397 = *(void *)v294;
          uint64_t v396 = *(void *)(((unint64_t)&a2[v478 + v35] & v467) + 8);
          char v398 = *(unsigned char *)(((unint64_t)&a2[v478 + v35] & v467) + 0x10);
          sub_10009C5FC(v397, v396, v398);
          *(void *)unsigned int v297 = v397;
          *(void *)(((unint64_t)&a1[v478 + v35] & v467) + 8) = v396;
          unint64_t v128 = v292;
          uint64_t v131 = v479;
          *(unsigned char *)(((unint64_t)&a1[v478 + v35] & v467) + 0x10) = v398;
          uint64_t v347 = v485;
          unint64_t v42 = v487;
          unsigned int v348 = v484;
          if (v479 > 3) {
            goto LABEL_856;
          }
          unsigned int v399 = ((1 << v477) | 2u) >> v477;
          if (HIWORD(v399))
          {
            *(_DWORD *)((char *)v297 + v479) = 12;
          }
          else
          {
            if ((v399 | 0x10) > 0xFF)
            {
              __int16 v433 = 12;
              goto LABEL_980;
            }
LABEL_856:
            *((unsigned char *)v297 + v479) = 12;
          }
          break;
        case 0xDu:
          long long v400 = *(_OWORD *)v294;
          *(void *)(((unint64_t)&a1[v478 + v35] & v467) + 0x10) = *(void *)(((unint64_t)&a2[v478 + v35] & v467)
                                                                                     + 0x10);
          *unsigned int v297 = v400;
          uint64_t v347 = v485;
          unint64_t v42 = v487;
          unsigned int v348 = v484;
          if (v479 > 3) {
            goto LABEL_860;
          }
          unsigned int v401 = ((1 << v477) | 2u) >> v477;
          if (HIWORD(v401))
          {
            *(_DWORD *)((char *)v297 + v479) = 13;
          }
          else
          {
            if ((v401 | 0x10) > 0xFF)
            {
              __int16 v433 = 13;
              goto LABEL_980;
            }
LABEL_860:
            *((unsigned char *)v297 + v479) = 13;
          }
          break;
        case 0xEu:
          if (*(void *)(((unint64_t)&a2[v478 + v35] & v467) + 0x10) >> 60 == 11)
          {
            long long v402 = *(_OWORD *)v294;
            long long v403 = *(_OWORD *)(((unint64_t)&a2[v478 + v35] & v467) + 0x10);
            long long v404 = *(_OWORD *)(((unint64_t)&a2[v478 + v35] & v467) + 0x20);
            *(void *)(((unint64_t)&a1[v478 + v35] & v467) + 0x30) = *(void *)(((unint64_t)&a2[v478 + v35] & v467)
                                                                                       + 0x30);
            *(_OWORD *)(((unint64_t)&a1[v478 + v35] & v467) + 0x10) = v403;
            *(_OWORD *)(((unint64_t)&a1[v478 + v35] & v467) + 0x20) = v404;
            *unsigned int v297 = v402;
            unsigned int v348 = v484;
          }
          else
          {
            *(void *)unsigned int v297 = *(void *)v294;
            unint64_t v422 = (uint64_t *)(v294 + 8);
            unint64_t v423 = *(void *)(((unint64_t)&a2[v478 + v35] & v467) + 0x10);
            if (v423 >> 60 == 15)
            {
              *(_OWORD *)(((unint64_t)&a1[v478 + v35] & v467) + 8) = *(_OWORD *)v422;
            }
            else
            {
              uint64_t v430 = *v422;
              sub_10001EBB0(*v422, *(void *)(((unint64_t)&a2[v478 + v35] & v467) + 0x10));
              *(void *)(((unint64_t)&a1[v478 + v35] & v467) + 8) = v430;
              *(void *)(((unint64_t)&a1[v478 + v35] & v467) + 0x10) = v423;
              uint64_t v131 = v479;
            }
            unint64_t v128 = v292;
            unsigned int v348 = v484;
            long long v431 = *(_OWORD *)(((unint64_t)&a2[v478 + v35] & v467) + 0x18);
            *(unsigned char *)(((unint64_t)&a1[v478 + v35] & v467) + 0x28) = *(unsigned char *)(((unint64_t)&a2[v478 + v35] & v467)
                                                                                     + 0x28);
            *(_OWORD *)(((unint64_t)&a1[v478 + v35] & v467) + 0x18) = v431;
            *(void *)(((unint64_t)&a1[v478 + v35] & v467) + 0x30) = *(void *)(((unint64_t)&a2[v478 + v35] & v467)
                                                                                       + 0x30);
          }
          *(unsigned char *)(((unint64_t)&a1[v478 + v35] & v467) + 0x38) = *(unsigned char *)(((unint64_t)&a2[v478 + v35] & v467)
                                                                                   + 0x38);
          uint64_t v347 = v485;
          unint64_t v42 = v487;
          if (v131 > 3) {
            goto LABEL_934;
          }
          unsigned int v432 = ((1 << v477) | 2u) >> v477;
          if (HIWORD(v432))
          {
            *(_DWORD *)((char *)v297 + v131) = 14;
          }
          else
          {
            if ((v432 | 0x10) > 0xFF)
            {
              __int16 v433 = 14;
              goto LABEL_980;
            }
LABEL_934:
            *((unsigned char *)v297 + v131) = 14;
          }
          break;
        case 0xFu:
          *(unsigned char *)unsigned int v297 = *v294;
          uint64_t v347 = v485;
          unint64_t v42 = v487;
          unsigned int v348 = v484;
          if (v479 > 3) {
            goto LABEL_866;
          }
          unsigned int v405 = ((1 << v477) | 2u) >> v477;
          if (HIWORD(v405))
          {
            *(_DWORD *)((char *)v297 + v479) = 15;
          }
          else if ((v405 | 0x10) > 0xFF)
          {
            __int16 v433 = 15;
LABEL_980:
            *(_WORD *)((char *)v297 + v131) = v433;
          }
          else
          {
LABEL_866:
            *((unsigned char *)v297 + v479) = 15;
          }
          break;
        default:
          if (v479 > 3) {
            goto LABEL_879;
          }
          unsigned int v417 = ((1 << v477) | 2u) >> v477;
          unsigned int v418 = v417 | 0x10;
          BOOL v25 = HIWORD(v417) == 0;
          uint64_t v419 = 2;
          if (!v25) {
            uint64_t v419 = 4;
          }
          if (v418 <= 0xFF) {
LABEL_879:
          }
            uint64_t v419 = 1;
          memcpy(v297, v294, v419 + v479);
          uint64_t v347 = v485;
          unint64_t v42 = v487;
          unsigned int v348 = v484;
          break;
      }
      uint64_t v2 = a1;
      if (v348 > 3) {
        goto LABEL_985;
      }
      unsigned int v436 = ((1 << (8 * v348)) | 2u) >> (8 * v348);
      unsigned int v437 = v436 | 0x10;
      BOOL v25 = HIWORD(v436) == 0;
      uint64_t v438 = 2;
      if (!v25) {
        uint64_t v438 = 4;
      }
      if (v437 <= 0xFF) {
LABEL_985:
      }
        uint64_t v438 = 1;
      unint64_t v164 = v347 + v438;
      if (v164 <= v489) {
        unint64_t v164 = v489;
      }
      if (v131 <= 3)
      {
        unsigned int v439 = ((1 << v477) | 2u) >> v477;
        unsigned int v440 = v439 | 0x10;
        BOOL v25 = HIWORD(v439) == 0;
        uint64_t v168 = 2;
        if (!v25) {
          uint64_t v168 = 4;
        }
        if (v440 > 0xFF)
        {
          char v165 = 9;
          goto LABEL_995;
        }
      }
      char v165 = 9;
      goto LABEL_994;
    case 0xAu:
      unsigned int v204 = a2[v486];
      unsigned int v205 = v204 - 2;
      if (v204 < 2)
      {
        unint64_t v207 = v128;
      }
      else
      {
        if (v486 <= 3) {
          uint64_t v206 = v486;
        }
        else {
          uint64_t v206 = 4;
        }
        unint64_t v207 = v128;
        switch(v206)
        {
          case 1:
            int v208 = *a2;
            goto LABEL_631;
          case 2:
            int v208 = *(unsigned __int16 *)a2;
            goto LABEL_631;
          case 3:
            int v208 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_631;
          case 4:
            int v208 = *(_DWORD *)a2;
LABEL_631:
            if (v486 < 4) {
              unsigned int v204 = (v208 | (v205 << (8 * v486))) + 2;
            }
            else {
              unsigned int v204 = v208 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v301 = v204 == 1;
      uint64_t v302 = v481;
      if (v204 == 1) {
        uint64_t v302 = v480;
      }
      (*(void (**)(unsigned __int8 *))(v302 + 16))(a1);
      a1[v486] = v301;
      unint64_t v303 = (unint64_t)&a2[v478 + 7] & 0xFFFFFFFFFFFFFFF8;
      char v304 = *(unsigned char *)(v303 + 8);
      unint64_t v305 = (unint64_t)&a1[v478 + 7] & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v305 = *(void *)v303;
      *(unsigned char *)(v305 + 8) = v304;
      if (v484 > 3) {
        goto LABEL_640;
      }
      unsigned int v306 = ((1 << (8 * v484)) | 2u) >> (8 * v484);
      unsigned int v307 = v306 | 0x10;
      BOOL v25 = HIWORD(v306) == 0;
      uint64_t v308 = 2;
      if (!v25) {
        uint64_t v308 = 4;
      }
      if (v307 <= 0xFF) {
LABEL_640:
      }
        uint64_t v308 = 1;
      unint64_t v128 = v207;
      unint64_t v164 = v485 + v308;
      if (v164 <= v489) {
        unint64_t v164 = v489;
      }
      if (v479 <= 3)
      {
        unsigned int v309 = ((1 << v477) | 2u) >> v477;
        unsigned int v310 = v309 | 0x10;
        BOOL v25 = HIWORD(v309) == 0;
        uint64_t v168 = 2;
        if (!v25) {
          uint64_t v168 = 4;
        }
        if (v310 > 0xFF)
        {
          char v165 = 10;
          goto LABEL_995;
        }
      }
      char v165 = 10;
      goto LABEL_994;
    case 0xBu:
      unsigned int v153 = a2[v486];
      unsigned int v154 = v153 - 2;
      if (v153 < 2)
      {
        unint64_t v156 = v128;
      }
      else
      {
        if (v486 <= 3) {
          uint64_t v155 = v486;
        }
        else {
          uint64_t v155 = 4;
        }
        unint64_t v156 = v128;
        switch(v155)
        {
          case 1:
            int v157 = *a2;
            goto LABEL_456;
          case 2:
            int v157 = *(unsigned __int16 *)a2;
            goto LABEL_456;
          case 3:
            int v157 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_456;
          case 4:
            int v157 = *(_DWORD *)a2;
LABEL_456:
            if (v486 < 4) {
              unsigned int v153 = (v157 | (v154 << (8 * v486))) + 2;
            }
            else {
              unsigned int v153 = v157 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v227 = v153 == 1;
      uint64_t v228 = v481;
      if (v153 == 1) {
        uint64_t v228 = v480;
      }
      (*(void (**)(unsigned __int8 *))(v228 + 16))(a1);
      a1[v486] = v227;
      *(_OWORD *)((unint64_t)&a1[v478 + 7] & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((unint64_t)&a2[v478 + 7] & 0xFFFFFFFFFFFFFFF8);
      if (v484 > 3) {
        goto LABEL_465;
      }
      unsigned int v229 = ((1 << (8 * v484)) | 2u) >> (8 * v484);
      unsigned int v230 = v229 | 0x10;
      BOOL v25 = HIWORD(v229) == 0;
      uint64_t v231 = 2;
      if (!v25) {
        uint64_t v231 = 4;
      }
      if (v230 <= 0xFF) {
LABEL_465:
      }
        uint64_t v231 = 1;
      unint64_t v128 = v156;
      unint64_t v164 = v485 + v231;
      if (v164 <= v489) {
        unint64_t v164 = v489;
      }
      if (v479 <= 3)
      {
        unsigned int v232 = ((1 << v477) | 2u) >> v477;
        unsigned int v233 = v232 | 0x10;
        BOOL v25 = HIWORD(v232) == 0;
        uint64_t v168 = 2;
        if (!v25) {
          uint64_t v168 = 4;
        }
        if (v233 > 0xFF)
        {
          char v165 = 11;
          goto LABEL_995;
        }
      }
      char v165 = 11;
      goto LABEL_994;
    case 0xCu:
      unsigned int v209 = a2[v486];
      unsigned int v210 = v209 - 2;
      if (v209 < 2)
      {
        unint64_t v212 = v128;
      }
      else
      {
        if (v486 <= 3) {
          uint64_t v211 = v486;
        }
        else {
          uint64_t v211 = 4;
        }
        unint64_t v212 = v128;
        switch(v211)
        {
          case 1:
            int v213 = *a2;
            goto LABEL_652;
          case 2:
            int v213 = *(unsigned __int16 *)a2;
            goto LABEL_652;
          case 3:
            int v213 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_652;
          case 4:
            int v213 = *(_DWORD *)a2;
LABEL_652:
            if (v486 < 4) {
              unsigned int v209 = (v213 | (v210 << (8 * v486))) + 2;
            }
            else {
              unsigned int v209 = v213 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v311 = v209 == 1;
      uint64_t v312 = v481;
      if (v209 == 1) {
        uint64_t v312 = v480;
      }
      (*(void (**)(unsigned __int8 *))(v312 + 16))(a1);
      a1[v486] = v311;
      a1[v478] = a2[v478];
      if (v484 > 3) {
        goto LABEL_661;
      }
      unsigned int v313 = ((1 << (8 * v484)) | 2u) >> (8 * v484);
      unsigned int v314 = v313 | 0x10;
      BOOL v25 = HIWORD(v313) == 0;
      uint64_t v315 = 2;
      if (!v25) {
        uint64_t v315 = 4;
      }
      if (v314 <= 0xFF) {
LABEL_661:
      }
        uint64_t v315 = 1;
      unint64_t v128 = v212;
      unint64_t v164 = v485 + v315;
      if (v164 <= v489) {
        unint64_t v164 = v489;
      }
      if (v479 <= 3)
      {
        unsigned int v316 = ((1 << v477) | 2u) >> v477;
        unsigned int v317 = v316 | 0x10;
        BOOL v25 = HIWORD(v316) == 0;
        uint64_t v168 = 2;
        if (!v25) {
          uint64_t v168 = 4;
        }
        if (v317 > 0xFF)
        {
          char v165 = 12;
          goto LABEL_995;
        }
      }
      char v165 = 12;
      goto LABEL_994;
    case 0xDu:
      unsigned int v214 = a2[v486];
      unsigned int v215 = v214 - 2;
      if (v214 < 2)
      {
        unint64_t v217 = v128;
      }
      else
      {
        if (v486 <= 3) {
          uint64_t v216 = v486;
        }
        else {
          uint64_t v216 = 4;
        }
        unint64_t v217 = v128;
        switch(v216)
        {
          case 1:
            int v218 = *a2;
            goto LABEL_673;
          case 2:
            int v218 = *(unsigned __int16 *)a2;
            goto LABEL_673;
          case 3:
            int v218 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_673;
          case 4:
            int v218 = *(_DWORD *)a2;
LABEL_673:
            if (v486 < 4) {
              unsigned int v214 = (v218 | (v215 << (8 * v486))) + 2;
            }
            else {
              unsigned int v214 = v218 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v318 = v214 == 1;
      uint64_t v319 = v481;
      if (v214 == 1) {
        uint64_t v319 = v480;
      }
      (*(void (**)(unsigned __int8 *))(v319 + 16))(a1);
      a1[v486] = v318;
      unsigned int v320 = (void *)((unint64_t)&a1[v478 + 7] & 0xFFFFFFFFFFFFFFF8);
      unsigned int v321 = (void *)((unint64_t)&a2[v478 + 7] & 0xFFFFFFFFFFFFFFF8);
      *unsigned int v320 = *v321;
      *(void *)(((unint64_t)v320 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v321 + 15) & 0xFFFFFFFFFFFFFFF8);
      if (v484 > 3) {
        goto LABEL_682;
      }
      unsigned int v322 = ((1 << (8 * v484)) | 2u) >> (8 * v484);
      unsigned int v323 = v322 | 0x10;
      BOOL v25 = HIWORD(v322) == 0;
      uint64_t v324 = 2;
      if (!v25) {
        uint64_t v324 = 4;
      }
      if (v323 <= 0xFF) {
LABEL_682:
      }
        uint64_t v324 = 1;
      unint64_t v128 = v217;
      unint64_t v164 = v485 + v324;
      if (v164 <= v489) {
        unint64_t v164 = v489;
      }
      if (v479 <= 3)
      {
        unsigned int v325 = ((1 << v477) | 2u) >> v477;
        unsigned int v326 = v325 | 0x10;
        BOOL v25 = HIWORD(v325) == 0;
        uint64_t v168 = 2;
        if (!v25) {
          uint64_t v168 = 4;
        }
        if (v326 > 0xFF)
        {
          char v165 = 13;
          goto LABEL_995;
        }
      }
      char v165 = 13;
      goto LABEL_994;
    default:
      unsigned int v148 = a2[v486];
      unsigned int v149 = v148 - 2;
      if (v148 < 2)
      {
        unint64_t v151 = v128;
      }
      else
      {
        if (v486 <= 3) {
          uint64_t v150 = v486;
        }
        else {
          uint64_t v150 = 4;
        }
        unint64_t v151 = v128;
        switch(v150)
        {
          case 1:
            int v152 = *a2;
            goto LABEL_435;
          case 2:
            int v152 = *(unsigned __int16 *)a2;
            goto LABEL_435;
          case 3:
            int v152 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_435;
          case 4:
            int v152 = *(_DWORD *)a2;
LABEL_435:
            if (v486 < 4) {
              unsigned int v148 = (v152 | (v149 << (8 * v486))) + 2;
            }
            else {
              unsigned int v148 = v152 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v220 = v148 == 1;
      uint64_t v221 = v481;
      if (v148 == 1) {
        uint64_t v221 = v480;
      }
      (*(void (**)(unsigned __int8 *))(v221 + 16))(a1);
      a1[v486] = v220;
      a1[v478] = a2[v478];
      if (v484 > 3) {
        goto LABEL_444;
      }
      unsigned int v222 = ((1 << (8 * v484)) | 2u) >> (8 * v484);
      unsigned int v223 = v222 | 0x10;
      BOOL v25 = HIWORD(v222) == 0;
      uint64_t v224 = 2;
      if (!v25) {
        uint64_t v224 = 4;
      }
      if (v223 <= 0xFF) {
LABEL_444:
      }
        uint64_t v224 = 1;
      unint64_t v128 = v151;
      unint64_t v164 = v485 + v224;
      if (v164 <= v489) {
        unint64_t v164 = v489;
      }
      if (v479 <= 3)
      {
        unsigned int v225 = ((1 << v477) | 2u) >> v477;
        unsigned int v226 = v225 | 0x10;
        BOOL v25 = HIWORD(v225) == 0;
        uint64_t v168 = 2;
        if (!v25) {
          uint64_t v168 = 4;
        }
        if (v226 > 0xFF)
        {
          char v165 = 0;
          goto LABEL_995;
        }
      }
      char v165 = 0;
      goto LABEL_994;
  }
LABEL_739:
  switch(v284)
  {
    case 0u:
      long long v341 = *(_OWORD *)v283;
      *(void *)(((unint64_t)&a1[v465] & v469) + 0x10) = *(void *)(((unint64_t)&a2[v465] & v469) + 0x10);
      *long long v286 = v341;
      LODWORD(v343) = v484;
      uint64_t v342 = v485;
      unint64_t v42 = v279;
      if (v484 > 3) {
        goto LABEL_743;
      }
      unsigned int v344 = ((1 << (8 * v484)) | 2u) >> (8 * v484);
      unsigned int v345 = v344 | 0x10;
      if (HIWORD(v344))
      {
        *(_DWORD *)((char *)v286 + v484) = 0;
      }
      else
      {
        if (v345 <= 0xFF)
        {
LABEL_743:
          *((unsigned char *)v286 + v484) = 0;
          goto LABEL_924;
        }
        *(_WORD *)((char *)v286 + v484) = 0;
      }
      goto LABEL_968;
    case 1u:
      *(void *)long long v286 = *(void *)v283;
      uint64_t v343 = v484;
      uint64_t v342 = v485;
      unint64_t v42 = v279;
      if (v484 > 3) {
        goto LABEL_758;
      }
      __int16 v350 = 1;
      unsigned int v351 = ((1 << (8 * v484)) | 2u) >> (8 * v484);
      unsigned int v345 = v351 | 0x10;
      if (HIWORD(v351))
      {
        *(_DWORD *)((char *)v286 + v484) = 1;
        goto LABEL_968;
      }
      if (v345 > 0xFF) {
        goto LABEL_967;
      }
LABEL_758:
      char v352 = 1;
      goto LABEL_923;
    case 2u:
      *long long v286 = *(_OWORD *)v283;
      uint64_t v343 = v484;
      uint64_t v342 = v485;
      unint64_t v42 = v279;
      if (v484 > 3) {
        goto LABEL_762;
      }
      unsigned int v353 = ((1 << (8 * v484)) | 2u) >> (8 * v484);
      unsigned int v345 = v353 | 0x10;
      if (HIWORD(v353))
      {
        *(_DWORD *)((char *)v286 + v484) = 2;
        goto LABEL_968;
      }
      if (v345 <= 0xFF)
      {
LABEL_762:
        char v352 = 2;
        goto LABEL_923;
      }
      __int16 v350 = 2;
      goto LABEL_967;
    case 3u:
      *(unsigned char *)long long v286 = *v283;
      uint64_t v343 = v484;
      uint64_t v342 = v485;
      unint64_t v42 = v279;
      if (v484 > 3) {
        goto LABEL_766;
      }
      unsigned int v354 = ((1 << (8 * v484)) | 2u) >> (8 * v484);
      unsigned int v345 = v354 | 0x10;
      if (HIWORD(v354))
      {
        *(_DWORD *)((char *)v286 + v484) = 3;
        goto LABEL_968;
      }
      if (v345 <= 0xFF)
      {
LABEL_766:
        char v352 = 3;
        goto LABEL_923;
      }
      __int16 v350 = 3;
      goto LABEL_967;
    case 4u:
      *(unsigned char *)long long v286 = *v283;
      uint64_t v343 = v484;
      uint64_t v342 = v485;
      unint64_t v42 = v279;
      if (v484 > 3) {
        goto LABEL_770;
      }
      unsigned int v355 = ((1 << (8 * v484)) | 2u) >> (8 * v484);
      unsigned int v345 = v355 | 0x10;
      if (HIWORD(v355))
      {
        *(_DWORD *)((char *)v286 + v484) = 4;
        goto LABEL_968;
      }
      if (v345 <= 0xFF)
      {
LABEL_770:
        char v352 = 4;
        goto LABEL_923;
      }
      __int16 v350 = 4;
      goto LABEL_967;
    case 5u:
      *(unsigned char *)long long v286 = *v283;
      uint64_t v343 = v484;
      uint64_t v342 = v485;
      unint64_t v42 = v279;
      if (v484 > 3) {
        goto LABEL_774;
      }
      unsigned int v356 = ((1 << (8 * v484)) | 2u) >> (8 * v484);
      unsigned int v345 = v356 | 0x10;
      if (HIWORD(v356))
      {
        *(_DWORD *)((char *)v286 + v484) = 5;
        goto LABEL_968;
      }
      if (v345 <= 0xFF)
      {
LABEL_774:
        char v352 = 5;
        goto LABEL_923;
      }
      __int16 v350 = 5;
      goto LABEL_967;
    case 6u:
      *(unsigned char *)long long v286 = *v283;
      uint64_t v343 = v484;
      uint64_t v342 = v485;
      unint64_t v42 = v279;
      if (v484 > 3) {
        goto LABEL_778;
      }
      unsigned int v357 = ((1 << (8 * v484)) | 2u) >> (8 * v484);
      unsigned int v345 = v357 | 0x10;
      if (HIWORD(v357))
      {
        *(_DWORD *)((char *)v286 + v484) = 6;
        goto LABEL_968;
      }
      if (v345 <= 0xFF)
      {
LABEL_778:
        char v352 = 6;
        goto LABEL_923;
      }
      __int16 v350 = 6;
      goto LABEL_967;
    case 7u:
      *(unsigned char *)long long v286 = *v283;
      uint64_t v343 = v484;
      uint64_t v342 = v485;
      unint64_t v42 = v279;
      if (v484 > 3) {
        goto LABEL_782;
      }
      unsigned int v358 = ((1 << (8 * v484)) | 2u) >> (8 * v484);
      unsigned int v345 = v358 | 0x10;
      if (HIWORD(v358))
      {
        *(_DWORD *)((char *)v286 + v484) = 7;
        goto LABEL_968;
      }
      if (v345 <= 0xFF)
      {
LABEL_782:
        char v352 = 7;
        goto LABEL_923;
      }
      __int16 v350 = 7;
      goto LABEL_967;
    case 8u:
      (*(void (**)(_OWORD *, unsigned __int8 *, uint64_t))(v451 + 16))(v286, v283, v452);
      unint64_t v409 = (void *)(((unint64_t)v286 + v448) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v410 = (void *)((unint64_t)&v283[v448] & 0xFFFFFFFFFFFFFFF8);
      *unint64_t v409 = *v410;
      uint64_t v131 = ((unint64_t)v409 + v449) & v447;
      unint64_t v488 = v128;
      unint64_t v411 = ((unint64_t)v410 + v449) & v447;
      unint64_t v412 = *(void (**)(uint64_t, unint64_t, uint64_t))(v453 + 16);
      swift_bridgeObjectRetain();
      v412(v131, v411, v454);
      long long v413 = (void *)((v450 + v131) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v414 = v450 + v411;
      unint64_t v128 = v488;
      v414 &= 0xFFFFFFFFFFFFFFF8;
      *long long v413 = *(void *)v414;
      uint64_t v415 = (void *)(((unint64_t)v413 + 15) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v416 = (void *)((v414 + 15) & 0xFFFFFFFFFFFFFFF8);
      *uint64_t v415 = *v416;
      v415[1] = v416[1];
      *((unsigned char *)v286 + v445) = v283[v445];
      *(unsigned char *)(((unint64_t)v286 + v445) | 1) = *(unsigned char *)((unint64_t)&v283[v445] | 1);
      swift_bridgeObjectRetain();
      LODWORD(v131) = v479;
      swift_bridgeObjectRetain();
      uint64_t v343 = v484;
      uint64_t v342 = v485;
      unint64_t v42 = v279;
      if (v484 > 3) {
        goto LABEL_874;
      }
      unsigned int v424 = ((1 << (8 * v484)) | 2u) >> (8 * v484);
      unsigned int v345 = v424 | 0x10;
      if (HIWORD(v424))
      {
        *(_DWORD *)((char *)v286 + v484) = 8;
        goto LABEL_968;
      }
      if (v345 <= 0xFF)
      {
LABEL_874:
        char v352 = 8;
        goto LABEL_923;
      }
      __int16 v350 = 8;
      goto LABEL_967;
    case 9u:
      unsigned int v359 = *(void **)v283;
      *(void *)long long v286 = *(void *)v283;
      id v360 = v359;
      uint64_t v343 = v484;
      uint64_t v342 = v485;
      unint64_t v42 = v279;
      if (v484 > 3) {
        goto LABEL_786;
      }
      unsigned int v361 = ((1 << (8 * v484)) | 2u) >> (8 * v484);
      unsigned int v345 = v361 | 0x10;
      if (HIWORD(v361))
      {
        *(_DWORD *)((char *)v286 + v484) = 9;
        goto LABEL_968;
      }
      if (v345 <= 0xFF)
      {
LABEL_786:
        char v352 = 9;
        goto LABEL_923;
      }
      __int16 v350 = 9;
      goto LABEL_967;
    case 0xAu:
      *(unsigned char *)long long v286 = *v283;
      uint64_t v343 = v484;
      uint64_t v342 = v485;
      unint64_t v42 = v279;
      if (v484 > 3) {
        goto LABEL_790;
      }
      unsigned int v362 = ((1 << (8 * v484)) | 2u) >> (8 * v484);
      unsigned int v345 = v362 | 0x10;
      if (HIWORD(v362))
      {
        *(_DWORD *)((char *)v286 + v484) = 10;
        goto LABEL_968;
      }
      if (v345 <= 0xFF)
      {
LABEL_790:
        char v352 = 10;
        goto LABEL_923;
      }
      __int16 v350 = 10;
      goto LABEL_967;
    case 0xBu:
      *(_WORD *)long long v286 = *(_WORD *)v283;
      uint64_t v343 = v484;
      uint64_t v342 = v485;
      unint64_t v42 = v279;
      if (v484 > 3) {
        goto LABEL_794;
      }
      unsigned int v363 = ((1 << (8 * v484)) | 2u) >> (8 * v484);
      unsigned int v345 = v363 | 0x10;
      if (HIWORD(v363))
      {
        *(_DWORD *)((char *)v286 + v484) = 11;
        goto LABEL_968;
      }
      if (v345 <= 0xFF)
      {
LABEL_794:
        char v352 = 11;
        goto LABEL_923;
      }
      __int16 v350 = 11;
      goto LABEL_967;
    case 0xCu:
      uint64_t v364 = *(void *)v283;
      uint64_t v131 = *(void *)(((unint64_t)&a2[v465] & v469) + 8);
      char v365 = *(unsigned char *)(((unint64_t)&a2[v465] & v469) + 0x10);
      sub_10009C5FC(v364, v131, v365);
      *(void *)long long v286 = v364;
      *(void *)(((unint64_t)&a1[v465] & v469) + 8) = v131;
      unint64_t v128 = v282;
      LODWORD(v131) = v479;
      *(unsigned char *)(((unint64_t)&a1[v465] & v469) + 0x10) = v365;
      uint64_t v343 = v484;
      uint64_t v342 = v485;
      unint64_t v42 = v279;
      if (v484 > 3) {
        goto LABEL_798;
      }
      unsigned int v366 = ((1 << (8 * v484)) | 2u) >> (8 * v484);
      unsigned int v345 = v366 | 0x10;
      if (HIWORD(v366))
      {
        *(_DWORD *)((char *)v286 + v484) = 12;
        goto LABEL_968;
      }
      if (v345 <= 0xFF)
      {
LABEL_798:
        char v352 = 12;
        goto LABEL_923;
      }
      __int16 v350 = 12;
      goto LABEL_967;
    case 0xDu:
      long long v367 = *(_OWORD *)v283;
      *(void *)(((unint64_t)&a1[v465] & v469) + 0x10) = *(void *)(((unint64_t)&a2[v465] & v469) + 0x10);
      *long long v286 = v367;
      uint64_t v343 = v484;
      uint64_t v342 = v485;
      unint64_t v42 = v279;
      if (v484 > 3) {
        goto LABEL_802;
      }
      unsigned int v368 = ((1 << (8 * v484)) | 2u) >> (8 * v484);
      unsigned int v345 = v368 | 0x10;
      if (HIWORD(v368))
      {
        *(_DWORD *)((char *)v286 + v484) = 13;
        goto LABEL_968;
      }
      if (v345 <= 0xFF)
      {
LABEL_802:
        char v352 = 13;
        goto LABEL_923;
      }
      __int16 v350 = 13;
      goto LABEL_967;
    case 0xEu:
      if (*(void *)(((unint64_t)&a2[v465] & v469) + 0x10) >> 60 == 11)
      {
        long long v369 = *(_OWORD *)v283;
        long long v370 = *(_OWORD *)(((unint64_t)&a2[v465] & v469) + 0x10);
        long long v371 = *(_OWORD *)(((unint64_t)&a2[v465] & v469) + 0x20);
        *(void *)(((unint64_t)&a1[v465] & v469) + 0x30) = *(void *)(((unint64_t)&a2[v465] & v469)
                                                                             + 0x30);
        *(_OWORD *)(((unint64_t)&a1[v465] & v469) + 0x10) = v370;
        *(_OWORD *)(((unint64_t)&a1[v465] & v469) + 0x20) = v371;
        *long long v286 = v369;
        uint64_t v343 = v484;
      }
      else
      {
        *(void *)long long v286 = *(void *)v283;
        unint64_t v420 = (uint64_t *)(v283 + 8);
        unint64_t v421 = *(void *)(((unint64_t)&a2[v465] & v469) + 0x10);
        if (v421 >> 60 == 15)
        {
          *(_OWORD *)(((unint64_t)&a1[v465] & v469) + 8) = *(_OWORD *)v420;
        }
        else
        {
          uint64_t v131 = *v420;
          sub_10001EBB0(*v420, *(void *)(((unint64_t)&a2[v465] & v469) + 0x10));
          *(void *)(((unint64_t)&a1[v465] & v469) + 8) = v131;
          *(void *)(((unint64_t)&a1[v465] & v469) + 0x10) = v421;
          LODWORD(v131) = v479;
        }
        unint64_t v128 = v282;
        uint64_t v343 = v484;
        long long v425 = *(_OWORD *)(((unint64_t)&a2[v465] & v469) + 0x18);
        *(unsigned char *)(((unint64_t)&a1[v465] & v469) + 0x28) = *(unsigned char *)(((unint64_t)&a2[v465] & v469) + 0x28);
        *(_OWORD *)(((unint64_t)&a1[v465] & v469) + 0x18) = v425;
        *(void *)(((unint64_t)&a1[v465] & v469) + 0x30) = *(void *)(((unint64_t)&a2[v465] & v469)
                                                                             + 0x30);
      }
      *(unsigned char *)(((unint64_t)&a1[v465] & v469) + 0x38) = *(unsigned char *)(((unint64_t)&a2[v465] & v469) + 0x38);
      unint64_t v42 = v279;
      uint64_t v342 = v485;
      if (v343 > 3) {
        goto LABEL_922;
      }
      unsigned int v426 = ((1 << (8 * v343)) | 2u) >> (8 * v343);
      unsigned int v345 = v426 | 0x10;
      if (HIWORD(v426))
      {
        *(_DWORD *)((char *)v286 + v343) = 14;
        goto LABEL_968;
      }
      if (v345 <= 0xFF)
      {
LABEL_922:
        char v352 = 14;
        goto LABEL_923;
      }
      __int16 v350 = 14;
      goto LABEL_967;
    case 0xFu:
      *(unsigned char *)long long v286 = *v283;
      uint64_t v343 = v484;
      uint64_t v342 = v485;
      unint64_t v42 = v279;
      if (v484 > 3) {
        goto LABEL_808;
      }
      unsigned int v372 = ((1 << (8 * v484)) | 2u) >> (8 * v484);
      unsigned int v345 = v372 | 0x10;
      if (HIWORD(v372))
      {
        *(_DWORD *)((char *)v286 + v484) = 15;
LABEL_968:
        BOOL v25 = HIWORD(v345) == 0;
        uint64_t v429 = 2;
        if (!v25) {
          uint64_t v429 = 4;
        }
        uint64_t v2 = a1;
        goto LABEL_971;
      }
      if (v345 > 0xFF)
      {
        __int16 v350 = 15;
LABEL_967:
        *(_WORD *)((char *)v286 + v343) = v350;
        goto LABEL_968;
      }
LABEL_808:
      char v352 = 15;
LABEL_923:
      *((unsigned char *)v286 + v343) = v352;
LABEL_924:
      uint64_t v2 = a1;
      if (v343 > 3) {
        goto LABEL_928;
      }
      unsigned int v427 = ((1 << (8 * v343)) | 2u) >> (8 * v343);
      unsigned int v428 = v427 | 0x10;
      BOOL v25 = HIWORD(v427) == 0;
      uint64_t v429 = 2;
      if (!v25) {
        uint64_t v429 = 4;
      }
      if (v428 <= 0xFF) {
LABEL_928:
      }
        uint64_t v429 = 1;
LABEL_971:
      unint64_t v164 = v342 + v429;
      if (v164 <= v489) {
        unint64_t v164 = v489;
      }
      if (v131 > 3) {
        goto LABEL_978;
      }
      unsigned int v434 = ((1 << v477) | 2u) >> v477;
      unsigned int v435 = v434 | 0x10;
      BOOL v25 = HIWORD(v434) == 0;
      uint64_t v168 = 2;
      if (!v25) {
        uint64_t v168 = 4;
      }
      if (v435 <= 0xFF)
      {
LABEL_978:
        char v165 = 8;
LABEL_994:
        uint64_t v168 = 1;
        goto LABEL_995;
      }
      char v165 = 8;
LABEL_995:
      unint64_t v441 = v128 + v168;
      if (v441 > v164) {
        unint64_t v164 = v441;
      }
      if (v40 > v164) {
        unint64_t v164 = v40;
      }
      if (v56 > v164) {
        unint64_t v164 = v56;
      }
      if (v47 > v164) {
        unint64_t v164 = v47;
      }
      if (v42 > v164) {
        unint64_t v164 = v42;
      }
      v2[v164] = v165;
      return v2;
    default:
      if (v484 > 3) {
        goto LABEL_871;
      }
      unsigned int v406 = ((1 << (8 * v484)) | 2u) >> (8 * v484);
      unsigned int v407 = v406 | 0x10;
      BOOL v25 = HIWORD(v406) == 0;
      uint64_t v408 = 2;
      if (!v25) {
        uint64_t v408 = 4;
      }
      if (v407 <= 0xFF) {
LABEL_871:
      }
        uint64_t v408 = 1;
      memcpy(v286, v283, v408 + v484);
      LODWORD(v343) = v484;
      uint64_t v342 = v485;
      unint64_t v42 = v279;
      goto LABEL_924;
  }
}

uint64_t sub_10013C858(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v3 = *(void *)(v2 + 64);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v5 = *(void *)(v4 + 64);
  if (v5 <= v3) {
    unint64_t v6 = v3;
  }
  else {
    unint64_t v6 = *(void *)(v4 + 64);
  }
  unint64_t v7 = v6 + 1;
  uint64_t v393 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v8 = *(_DWORD *)(v4 + 80);
  uint64_t v9 = *(_DWORD *)(v4 + 80);
  uint64_t v376 = v3 + v9;
  uint64_t v377 = *(void *)(v4 + 64);
  uint64_t v384 = v9;
  unint64_t v10 = v5 + ((v3 + v9) & ~v9);
  unint64_t v400 = v6 + 2;
  if (v10 + 1 > v6 + 2) {
    unint64_t v11 = v10 + 1;
  }
  else {
    unint64_t v11 = v6 + 2;
  }
  if (v7 > v11) {
    unint64_t v11 = v6 + 1;
  }
  unint64_t v390 = v6;
  unint64_t v12 = v6 & 0xFFFFFFFFFFFFFFF8;
  if ((v6 & 0xFFFFFFFFFFFFFFF8) + 16 > v11) {
    unint64_t v11 = (v6 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  uint64_t v394 = v2;
  uint64_t v13 = *(unsigned __int8 *)(v2 + 80) | v8;
  uint64_t v378 = v7 + v13;
  uint64_t v382 = v13;
  if (((v7 + v13) & ~v13) + v7 <= v11) {
    unint64_t v14 = v11;
  }
  else {
    unint64_t v14 = ((v7 + v13) & ~v13) + v7;
  }
  uint64_t v371 = swift_getAssociatedTypeWitness();
  uint64_t v15 = *(void *)(v371 - 8);
  uint64_t v369 = v15;
  int v16 = *(_DWORD *)(v15 + 80) & 0xF8;
  uint64_t v17 = swift_getAssociatedTypeWitness();
  uint64_t v18 = *(unsigned __int8 *)(*(void *)(v17 - 8) + 80);
  uint64_t v19 = v16 | v18 | 7;
  unint64_t v399 = v7;
  uint64_t v20 = v7 + v19;
  unint64_t v21 = (v7 + v19) & ~v19;
  uint64_t v22 = *(void *)(v15 + 64) + 7;
  uint64_t v23 = *(void *)(*(void *)(v17 - 8) + 64) + 7;
  unint64_t v24 = (((v23 + ((v18 + 8 + (v22 & 0xFFFFFFFFFFFFFFF8)) & ~v18)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  if (v24 + 18 <= 0x39) {
    uint64_t v25 = 57;
  }
  else {
    uint64_t v25 = v24 + 18;
  }
  uint64_t v372 = v17;
  uint64_t v370 = *(void *)(v17 - 8);
  uint64_t v367 = v18 + 8;
  uint64_t v368 = *(void *)(v370 + 64) + 7;
  uint64_t v366 = *(void *)(v15 + 64) + 7;
  uint64_t v375 = v20;
  unint64_t v386 = (((v23 + ((v18 + 8 + (v22 & 0xFFFFFFFFFFFFFFF8)) & ~v18)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  if (v25 > 3) {
    goto LABEL_21;
  }
  unsigned int v26 = ((1 << (8 * v25)) | 2u) >> (8 * v25);
  unsigned int v27 = v26 | 0x10;
  BOOL v28 = HIWORD(v26) == 0;
  uint64_t v29 = 2;
  if (!v28) {
    uint64_t v29 = 4;
  }
  if (v27 <= 0xFF) {
LABEL_21:
  }
    uint64_t v29 = 1;
  unint64_t v397 = v14;
  unint64_t v398 = v25 + v21;
  unint64_t v30 = v25 + v21 + v29;
  if (v30 <= v14) {
    unint64_t v31 = v14;
  }
  else {
    unint64_t v31 = v30;
  }
  uint64_t v32 = swift_getAssociatedTypeWitness();
  uint64_t v33 = *(void *)(v32 - 8);
  uint64_t v373 = v33;
  uint64_t v374 = v32;
  int v34 = *(_DWORD *)(v33 + 80) & 0xF8;
  uint64_t v35 = swift_getAssociatedTypeWitness();
  uint64_t v36 = *(unsigned __int8 *)(*(void *)(v35 - 8) + 80);
  uint64_t v37 = v34 | v36 | 7;
  unint64_t v38 = (v7 + v37) & ~v37;
  uint64_t v39 = *(void *)(v33 + 64) + 7;
  uint64_t v40 = v36 + 8;
  uint64_t v41 = *(void *)(*(void *)(v35 - 8) + 64) + 7;
  unint64_t v42 = (((v41 + ((v36 + 8 + (v39 & 0xFFFFFFFFFFFFFFF8)) & ~v36)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  if (v42 + 18 <= 0x39) {
    uint64_t v43 = 57;
  }
  else {
    uint64_t v43 = v42 + 18;
  }
  if (v43 <= 3) {
    unsigned int v44 = (((1 << (8 * v43)) | 2u) >> (8 * v43)) | 0x10;
  }
  else {
    unsigned int v44 = 17;
  }
  unint64_t v45 = v12 + 17;
  unint64_t v46 = v12 + 24;
  unint64_t v47 = ((v12 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  uint64_t v48 = 4;
  if (v44 < 0x10000) {
    uint64_t v48 = 2;
  }
  if (v44 < 0x100) {
    uint64_t v49 = 1;
  }
  else {
    uint64_t v49 = v48;
  }
  unint64_t v50 = v43 + v38;
  unint64_t v51 = v43 + v38 + v49;
  if (v51 <= v31) {
    unint64_t v51 = v31;
  }
  if (v45 > v51) {
    unint64_t v51 = v12 + 17;
  }
  if (v46 > v51) {
    unint64_t v51 = v12 + 24;
  }
  if (v400 > v51) {
    unint64_t v51 = v400;
  }
  if (v47 > v51) {
    unint64_t v51 = ((v12 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  unsigned int v52 = a2[v51];
  unsigned int v53 = v52 - 14;
  unint64_t v379 = v12 + 24;
  unint64_t v380 = ((v12 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  uint64_t v396 = v25;
  if (v52 < 0xE)
  {
    uint64_t v59 = v382;
    uint64_t v58 = v384;
    uint64_t v60 = v16 | v18 | 7;
    unint64_t v54 = v386;
  }
  else
  {
    unint64_t v54 = v386;
    if (v25 > 3) {
      goto LABEL_51;
    }
    unsigned int v55 = ((1 << (8 * v25)) | 2u) >> (8 * v25);
    unsigned int v56 = v55 | 0x10;
    BOOL v28 = HIWORD(v55) == 0;
    uint64_t v57 = 2;
    if (!v28) {
      uint64_t v57 = 4;
    }
    if (v56 <= 0xFF) {
LABEL_51:
    }
      uint64_t v57 = 1;
    uint64_t v59 = v382;
    uint64_t v58 = v384;
    uint64_t v60 = v16 | v18 | 7;
    unint64_t v61 = v398 + v57;
    if (v61 <= v397) {
      unint64_t v61 = v397;
    }
    if (v43 > 3) {
      goto LABEL_58;
    }
    unsigned int v62 = ((1 << (8 * v43)) | 2u) >> (8 * v43);
    unsigned int v63 = v62 | 0x10;
    BOOL v28 = HIWORD(v62) == 0;
    uint64_t v64 = 2;
    if (!v28) {
      uint64_t v64 = 4;
    }
    if (v63 <= 0xFF) {
LABEL_58:
    }
      uint64_t v64 = 1;
    unint64_t v65 = v50 + v64;
    if (v65 > v61) {
      unint64_t v61 = v65;
    }
    if (v45 > v61) {
      unint64_t v61 = v12 + 17;
    }
    if (v46 > v61) {
      unint64_t v61 = v12 + 24;
    }
    if (v400 > v61) {
      unint64_t v61 = v400;
    }
    if (v47 > v61) {
      LODWORD(v61) = ((v12 + 23) & 0xFFFFFFF8) + 8;
    }
    if (v61 <= 3) {
      uint64_t v66 = v61;
    }
    else {
      uint64_t v66 = 4;
    }
    switch(v66)
    {
      case 1:
        int v67 = *a2;
        if (v61 < 4) {
          goto LABEL_81;
        }
        goto LABEL_82;
      case 2:
        int v67 = *(unsigned __int16 *)a2;
        if (v61 >= 4) {
          goto LABEL_82;
        }
        goto LABEL_81;
      case 3:
        int v67 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        if (v61 >= 4) {
          goto LABEL_82;
        }
        goto LABEL_81;
      case 4:
        int v67 = *(_DWORD *)a2;
        if (v61 < 4) {
LABEL_81:
        }
          v67 |= v53 << (8 * v61);
LABEL_82:
        unsigned int v52 = v67 + 14;
        break;
      default:
        break;
    }
  }
  uint64_t v388 = v43;
  char v381 = 8 * v43;
  unint64_t v383 = v50;
  unint64_t v385 = v12 + 17;
  uint64_t v68 = ~v58;
  uint64_t v69 = ~v59;
  uint64_t v70 = ~v60;
  uint64_t v71 = ~v18;
  unint64_t v72 = v54 + 16;
  uint64_t v73 = ~v37;
  uint64_t v74 = ~v36;
  unint64_t v75 = v42 + 16;
  switch(v52)
  {
    case 1u:
      uint64_t v80 = a1;
      (*(void (**)(uint64_t))(v394 + 32))(a1);
      uint64_t v91 = (v376 + a1) & v68;
      unint64_t v92 = (unint64_t)&a2[v376] & v68;
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v393 + 32))(v91, v92, AssociatedTypeWitness);
      *(unsigned char *)(v91 + v377) = *(unsigned char *)(v92 + v377);
      if (v396 > 3) {
        goto LABEL_100;
      }
      unsigned int v93 = ((1 << (8 * v396)) | 2u) >> (8 * v396);
      unsigned int v94 = v93 | 0x10;
      BOOL v28 = HIWORD(v93) == 0;
      uint64_t v95 = 2;
      if (!v28) {
        uint64_t v95 = 4;
      }
      if (v94 <= 0xFF) {
LABEL_100:
      }
        uint64_t v95 = 1;
      unint64_t v97 = v379;
      unint64_t v96 = v380;
      unint64_t v82 = v383;
      unint64_t v81 = v385;
      unint64_t v98 = v398 + v95;
      if (v98 <= v397) {
        unint64_t v98 = v397;
      }
      if (v388 > 3) {
        goto LABEL_107;
      }
      char v99 = 1;
      unsigned int v100 = ((1 << v381) | 2u) >> v381;
      unsigned int v101 = v100 | 0x10;
      BOOL v28 = HIWORD(v100) == 0;
      uint64_t v102 = 2;
      if (!v28) {
        uint64_t v102 = 4;
      }
      if (v101 <= 0xFF)
      {
LABEL_107:
        uint64_t v102 = 1;
        char v99 = 1;
      }
      goto LABEL_738;
    case 2u:
      unsigned int v103 = a2[v390];
      unsigned int v104 = v103 - 2;
      if (v103 < 2)
      {
        uint64_t v80 = a1;
        unint64_t v82 = v50;
        unint64_t v81 = v385;
        unsigned int v106 = v43;
        unsigned int v107 = v396;
      }
      else
      {
        if (v390 <= 3) {
          uint64_t v105 = v390;
        }
        else {
          uint64_t v105 = 4;
        }
        unsigned int v106 = v43;
        uint64_t v80 = a1;
        unint64_t v82 = v50;
        unint64_t v81 = v385;
        unsigned int v107 = v396;
        switch(v105)
        {
          case 1:
            int v108 = *a2;
            goto LABEL_232;
          case 2:
            int v108 = *(unsigned __int16 *)a2;
            goto LABEL_232;
          case 3:
            int v108 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_232;
          case 4:
            int v108 = *(_DWORD *)a2;
LABEL_232:
            if (v390 < 4) {
              unsigned int v103 = (v108 | (v104 << (8 * v390))) + 2;
            }
            else {
              unsigned int v103 = v108 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v182 = v103 == 1;
      uint64_t v183 = v394;
      if (v103 == 1) {
        uint64_t v183 = v393;
      }
      (*(void (**)(uint64_t))(v183 + 32))(v80);
      *(unsigned char *)(v80 + v390) = v182;
      *(unsigned char *)(v399 + v80) = a2[v399];
      if (v107 > 3) {
        goto LABEL_241;
      }
      unsigned int v184 = ((1 << (8 * v107)) | 2u) >> (8 * v107);
      unsigned int v185 = v184 | 0x10;
      BOOL v28 = HIWORD(v184) == 0;
      uint64_t v186 = 2;
      if (!v28) {
        uint64_t v186 = 4;
      }
      if (v185 <= 0xFF) {
LABEL_241:
      }
        uint64_t v186 = 1;
      unint64_t v97 = v379;
      unint64_t v96 = v380;
      unint64_t v98 = v398 + v186;
      if (v98 <= v397) {
        unint64_t v98 = v397;
      }
      if (v106 <= 3)
      {
        unsigned int v187 = ((1 << v381) | 2u) >> v381;
        unsigned int v188 = v187 | 0x10;
        BOOL v28 = HIWORD(v187) == 0;
        char v99 = 2;
        uint64_t v102 = 4;
        if (v28) {
          uint64_t v102 = 2;
        }
        if (v188 > 0xFF) {
          goto LABEL_738;
        }
      }
      char v99 = 2;
      goto LABEL_737;
    case 3u:
      unsigned int v109 = a2[v390];
      unsigned int v110 = v109 - 2;
      if (v109 < 2)
      {
        uint64_t v80 = a1;
        unint64_t v82 = v50;
        unint64_t v81 = v385;
        unsigned int v112 = v43;
        unsigned int v113 = v396;
      }
      else
      {
        if (v390 <= 3) {
          uint64_t v111 = v390;
        }
        else {
          uint64_t v111 = 4;
        }
        unsigned int v112 = v43;
        uint64_t v80 = a1;
        unint64_t v82 = v50;
        unint64_t v81 = v385;
        unsigned int v113 = v396;
        switch(v111)
        {
          case 1:
            int v114 = *a2;
            goto LABEL_253;
          case 2:
            int v114 = *(unsigned __int16 *)a2;
            goto LABEL_253;
          case 3:
            int v114 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_253;
          case 4:
            int v114 = *(_DWORD *)a2;
LABEL_253:
            if (v390 < 4) {
              unsigned int v109 = (v114 | (v110 << (8 * v390))) + 2;
            }
            else {
              unsigned int v109 = v114 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v189 = v109 == 1;
      uint64_t v190 = v394;
      if (v109 == 1) {
        uint64_t v190 = v393;
      }
      (*(void (**)(uint64_t))(v190 + 32))(v80);
      *(unsigned char *)(v80 + v390) = v189;
      if (v113 > 3) {
        goto LABEL_262;
      }
      unsigned int v191 = ((1 << (8 * v113)) | 2u) >> (8 * v113);
      unsigned int v192 = v191 | 0x10;
      BOOL v28 = HIWORD(v191) == 0;
      uint64_t v193 = 2;
      if (!v28) {
        uint64_t v193 = 4;
      }
      if (v192 <= 0xFF) {
LABEL_262:
      }
        uint64_t v193 = 1;
      unint64_t v97 = v379;
      unint64_t v96 = v380;
      unint64_t v98 = v398 + v193;
      if (v98 <= v397) {
        unint64_t v98 = v397;
      }
      if (v112 <= 3)
      {
        unsigned int v194 = ((1 << v381) | 2u) >> v381;
        unsigned int v195 = v194 | 0x10;
        BOOL v28 = HIWORD(v194) == 0;
        uint64_t v102 = 2;
        if (!v28) {
          uint64_t v102 = 4;
        }
        if (v195 > 0xFF)
        {
          char v99 = 3;
          goto LABEL_738;
        }
      }
      char v99 = 3;
      goto LABEL_737;
    case 4u:
      unsigned int v115 = a2[v390];
      unsigned int v116 = v115 - 2;
      if (v115 < 2)
      {
        uint64_t v80 = a1;
        unint64_t v82 = v50;
        unint64_t v81 = v385;
        unsigned int v118 = v43;
        unsigned int v119 = v396;
      }
      else
      {
        if (v390 <= 3) {
          uint64_t v117 = v390;
        }
        else {
          uint64_t v117 = 4;
        }
        unsigned int v118 = v43;
        uint64_t v80 = a1;
        unint64_t v82 = v50;
        unint64_t v81 = v385;
        unsigned int v119 = v396;
        switch(v117)
        {
          case 1:
            int v120 = *a2;
            goto LABEL_274;
          case 2:
            int v120 = *(unsigned __int16 *)a2;
            goto LABEL_274;
          case 3:
            int v120 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_274;
          case 4:
            int v120 = *(_DWORD *)a2;
LABEL_274:
            if (v390 < 4) {
              unsigned int v115 = (v120 | (v116 << (8 * v390))) + 2;
            }
            else {
              unsigned int v115 = v120 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v196 = v115 == 1;
      uint64_t v197 = v394;
      if (v115 == 1) {
        uint64_t v197 = v393;
      }
      (*(void (**)(uint64_t))(v197 + 32))(v80);
      *(unsigned char *)(v80 + v390) = v196;
      *(void *)((v80 + v399 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)((unint64_t)&a2[v399 + 7] & 0xFFFFFFFFFFFFFFF8);
      if (v119 > 3) {
        goto LABEL_283;
      }
      unsigned int v198 = ((1 << (8 * v119)) | 2u) >> (8 * v119);
      unsigned int v199 = v198 | 0x10;
      BOOL v28 = HIWORD(v198) == 0;
      uint64_t v200 = 2;
      if (!v28) {
        uint64_t v200 = 4;
      }
      if (v199 <= 0xFF) {
LABEL_283:
      }
        uint64_t v200 = 1;
      unint64_t v97 = v379;
      unint64_t v96 = v380;
      unint64_t v98 = v398 + v200;
      if (v98 <= v397) {
        unint64_t v98 = v397;
      }
      if (v118 <= 3)
      {
        unsigned int v201 = ((1 << v381) | 2u) >> v381;
        unsigned int v202 = v201 | 0x10;
        BOOL v28 = HIWORD(v201) == 0;
        uint64_t v102 = 2;
        char v99 = 4;
        if (!v28) {
          uint64_t v102 = 4;
        }
        if (v202 > 0xFF) {
          goto LABEL_738;
        }
      }
      char v99 = 4;
      goto LABEL_737;
    case 5u:
      unsigned int v121 = a2[v390];
      unsigned int v122 = v121 - 2;
      if (v121 < 2)
      {
        uint64_t v80 = a1;
        unint64_t v82 = v50;
        unint64_t v81 = v385;
        unsigned int v124 = v43;
        unsigned int v125 = v396;
      }
      else
      {
        if (v390 <= 3) {
          uint64_t v123 = v390;
        }
        else {
          uint64_t v123 = 4;
        }
        unsigned int v124 = v43;
        uint64_t v80 = a1;
        unint64_t v82 = v50;
        unint64_t v81 = v385;
        unsigned int v125 = v396;
        switch(v123)
        {
          case 1:
            int v126 = *a2;
            goto LABEL_294;
          case 2:
            int v126 = *(unsigned __int16 *)a2;
            goto LABEL_294;
          case 3:
            int v126 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_294;
          case 4:
            int v126 = *(_DWORD *)a2;
LABEL_294:
            if (v390 < 4) {
              unsigned int v121 = (v126 | (v122 << (8 * v390))) + 2;
            }
            else {
              unsigned int v121 = v126 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v203 = v121 == 1;
      uint64_t v204 = v394;
      if (v121 == 1) {
        uint64_t v204 = v393;
      }
      (*(void (**)(uint64_t))(v204 + 32))(v80);
      *(unsigned char *)(v80 + v390) = v203;
      *(void *)((v80 + v399 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)((unint64_t)&a2[v399 + 7] & 0xFFFFFFFFFFFFFFF8);
      if (v125 > 3) {
        goto LABEL_303;
      }
      unsigned int v205 = ((1 << (8 * v125)) | 2u) >> (8 * v125);
      unsigned int v206 = v205 | 0x10;
      BOOL v28 = HIWORD(v205) == 0;
      uint64_t v207 = 2;
      if (!v28) {
        uint64_t v207 = 4;
      }
      if (v206 <= 0xFF) {
LABEL_303:
      }
        uint64_t v207 = 1;
      unint64_t v97 = v379;
      unint64_t v96 = v380;
      unint64_t v98 = v398 + v207;
      if (v98 <= v397) {
        unint64_t v98 = v397;
      }
      if (v124 <= 3)
      {
        unsigned int v208 = ((1 << v381) | 2u) >> v381;
        unsigned int v209 = v208 | 0x10;
        BOOL v28 = HIWORD(v208) == 0;
        uint64_t v102 = 2;
        if (!v28) {
          uint64_t v102 = 4;
        }
        if (v209 > 0xFF)
        {
          char v99 = 5;
          goto LABEL_738;
        }
      }
      char v99 = 5;
      goto LABEL_737;
    case 6u:
      unsigned int v127 = a2[v390];
      unsigned int v128 = v127 - 2;
      if (v127 < 2)
      {
        uint64_t v80 = a1;
        unint64_t v82 = v50;
        unsigned int v130 = v43;
        unsigned int v131 = v396;
      }
      else
      {
        if (v390 <= 3) {
          uint64_t v129 = v390;
        }
        else {
          uint64_t v129 = 4;
        }
        unsigned int v130 = v43;
        uint64_t v80 = a1;
        unint64_t v82 = v50;
        unsigned int v131 = v396;
        switch(v129)
        {
          case 1:
            int v132 = *a2;
            goto LABEL_315;
          case 2:
            int v132 = *(unsigned __int16 *)a2;
            goto LABEL_315;
          case 3:
            int v132 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_315;
          case 4:
            int v132 = *(_DWORD *)a2;
LABEL_315:
            if (v390 < 4) {
              unsigned int v127 = (v132 | (v128 << (8 * v390))) + 2;
            }
            else {
              unsigned int v127 = v132 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v210 = v127 == 1;
      uint64_t v211 = v394;
      if (v127 == 1) {
        uint64_t v211 = v393;
      }
      (*(void (**)(uint64_t))(v211 + 32))(v80);
      *(unsigned char *)(v80 + v390) = v210;
      uint64_t v212 = (v378 + v80) & v69;
      int v213 = (unsigned __int8 *)((unint64_t)&a2[v378] & v69);
      unsigned int v214 = v213[v390];
      unsigned int v215 = v214 - 2;
      if (v214 < 2)
      {
        unint64_t v81 = v385;
      }
      else
      {
        if (v390 <= 3) {
          uint64_t v216 = v390;
        }
        else {
          uint64_t v216 = 4;
        }
        unint64_t v81 = v385;
        switch(v216)
        {
          case 1:
            int v217 = *v213;
            goto LABEL_449;
          case 2:
            int v217 = *(unsigned __int16 *)v213;
            goto LABEL_449;
          case 3:
            int v217 = *(unsigned __int16 *)v213 | (v213[2] << 16);
            goto LABEL_449;
          case 4:
            int v217 = *(_DWORD *)v213;
LABEL_449:
            if (v390 < 4) {
              unsigned int v214 = (v217 | (v215 << (8 * v390))) + 2;
            }
            else {
              unsigned int v214 = v217 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v271 = v214 == 1;
      uint64_t v272 = v394;
      if (v214 == 1) {
        uint64_t v272 = v393;
      }
      (*(void (**)(uint64_t))(v272 + 32))(v212);
      *(unsigned char *)(v212 + v390) = v271;
      if (v131 > 3) {
        goto LABEL_458;
      }
      unsigned int v273 = ((1 << (8 * v131)) | 2u) >> (8 * v131);
      unsigned int v274 = v273 | 0x10;
      BOOL v28 = HIWORD(v273) == 0;
      uint64_t v275 = 2;
      if (!v28) {
        uint64_t v275 = 4;
      }
      if (v274 <= 0xFF) {
LABEL_458:
      }
        uint64_t v275 = 1;
      unint64_t v97 = v379;
      unint64_t v96 = v380;
      unint64_t v98 = v398 + v275;
      if (v98 <= v397) {
        unint64_t v98 = v397;
      }
      if (v130 <= 3)
      {
        unsigned int v276 = ((1 << v381) | 2u) >> v381;
        unsigned int v277 = v276 | 0x10;
        BOOL v28 = HIWORD(v276) == 0;
        uint64_t v102 = 2;
        if (!v28) {
          uint64_t v102 = 4;
        }
        if (v277 > 0xFF)
        {
          char v99 = 6;
          goto LABEL_738;
        }
      }
      char v99 = 6;
      goto LABEL_737;
    case 7u:
      unsigned int v133 = a2[v390];
      unsigned int v134 = v133 - 2;
      if (v133 < 2)
      {
        uint64_t v80 = a1;
        unint64_t v82 = v50;
        unsigned int v136 = v43;
        unsigned int v137 = v396;
      }
      else
      {
        if (v390 <= 3) {
          uint64_t v135 = v390;
        }
        else {
          uint64_t v135 = 4;
        }
        unsigned int v136 = v43;
        uint64_t v80 = a1;
        unint64_t v82 = v50;
        unsigned int v137 = v396;
        switch(v135)
        {
          case 1:
            int v138 = *a2;
            goto LABEL_330;
          case 2:
            int v138 = *(unsigned __int16 *)a2;
            goto LABEL_330;
          case 3:
            int v138 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_330;
          case 4:
            int v138 = *(_DWORD *)a2;
LABEL_330:
            if (v390 < 4) {
              unsigned int v133 = (v138 | (v134 << (8 * v390))) + 2;
            }
            else {
              unsigned int v133 = v138 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v218 = v133 == 1;
      uint64_t v219 = v394;
      if (v133 == 1) {
        uint64_t v219 = v393;
      }
      (*(void (**)(uint64_t))(v219 + 32))(v80);
      *(unsigned char *)(v80 + v390) = v218;
      uint64_t v220 = (v378 + v80) & v69;
      uint64_t v221 = (unsigned __int8 *)((unint64_t)&a2[v378] & v69);
      unsigned int v222 = v221[v390];
      unsigned int v223 = v222 - 2;
      if (v222 < 2)
      {
        unint64_t v81 = v385;
      }
      else
      {
        if (v390 <= 3) {
          uint64_t v224 = v390;
        }
        else {
          uint64_t v224 = 4;
        }
        unint64_t v81 = v385;
        switch(v224)
        {
          case 1:
            int v225 = *v221;
            goto LABEL_470;
          case 2:
            int v225 = *(unsigned __int16 *)v221;
            goto LABEL_470;
          case 3:
            int v225 = *(unsigned __int16 *)v221 | (v221[2] << 16);
            goto LABEL_470;
          case 4:
            int v225 = *(_DWORD *)v221;
LABEL_470:
            if (v390 < 4) {
              unsigned int v222 = (v225 | (v223 << (8 * v390))) + 2;
            }
            else {
              unsigned int v222 = v225 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v278 = v222 == 1;
      uint64_t v279 = v394;
      if (v222 == 1) {
        uint64_t v279 = v393;
      }
      (*(void (**)(uint64_t))(v279 + 32))(v220);
      *(unsigned char *)(v220 + v390) = v278;
      if (v137 > 3) {
        goto LABEL_479;
      }
      unsigned int v280 = ((1 << (8 * v137)) | 2u) >> (8 * v137);
      unsigned int v281 = v280 | 0x10;
      BOOL v28 = HIWORD(v280) == 0;
      uint64_t v282 = 2;
      if (!v28) {
        uint64_t v282 = 4;
      }
      if (v281 <= 0xFF) {
LABEL_479:
      }
        uint64_t v282 = 1;
      unint64_t v97 = v379;
      unint64_t v96 = v380;
      unint64_t v98 = v398 + v282;
      if (v98 <= v397) {
        unint64_t v98 = v397;
      }
      if (v136 <= 3)
      {
        unsigned int v283 = ((1 << v381) | 2u) >> v381;
        unsigned int v284 = v283 | 0x10;
        BOOL v28 = HIWORD(v283) == 0;
        uint64_t v102 = 2;
        if (!v28) {
          uint64_t v102 = 4;
        }
        if (v284 > 0xFF)
        {
          char v99 = 7;
          goto LABEL_738;
        }
      }
      char v99 = 7;
      goto LABEL_737;
    case 8u:
      unsigned int v139 = a2[v390];
      unsigned int v140 = v139 - 2;
      if (v139 < 2)
      {
        unint64_t v143 = v72;
        uint64_t v144 = v396;
        uint64_t v142 = v375;
      }
      else
      {
        if (v390 <= 3) {
          uint64_t v141 = v390;
        }
        else {
          uint64_t v141 = 4;
        }
        uint64_t v142 = v375;
        unint64_t v143 = v72;
        uint64_t v144 = v396;
        switch(v141)
        {
          case 1:
            int v145 = *a2;
            goto LABEL_345;
          case 2:
            int v145 = *(unsigned __int16 *)a2;
            goto LABEL_345;
          case 3:
            int v145 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_345;
          case 4:
            int v145 = *(_DWORD *)a2;
LABEL_345:
            if (v390 < 4) {
              unsigned int v139 = (v145 | (v140 << (8 * v390))) + 2;
            }
            else {
              unsigned int v139 = v145 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v226 = v139 == 1;
      uint64_t v227 = v394;
      if (v139 == 1) {
        uint64_t v227 = v393;
      }
      (*(void (**)(uint64_t))(v227 + 32))(a1);
      *(unsigned char *)(a1 + v390) = v226;
      uint64_t v228 = (unsigned __int8 *)((unint64_t)&a2[v142] & v70);
      if (v144 > 3) {
        goto LABEL_351;
      }
      unsigned int v230 = ((1 << (8 * v144)) | 2u) >> (8 * v144);
      if (HIWORD(v230))
      {
        unsigned int v229 = *(_DWORD *)&v228[v144];
      }
      else if ((v230 | 0x10) <= 0xFF)
      {
LABEL_351:
        unsigned int v229 = v228[v144];
      }
      else
      {
        unsigned int v229 = *(unsigned __int16 *)&v228[v144];
      }
      uint64_t v231 = (unsigned __int8 *)((v142 + a1) & v70);
      unsigned int v232 = v229 - 16;
      if (v229 < 0x10)
      {
        unint64_t v82 = v383;
      }
      else
      {
        if (v144 <= 3) {
          uint64_t v233 = v144;
        }
        else {
          uint64_t v233 = 4;
        }
        unint64_t v82 = v383;
        switch(v233)
        {
          case 1:
            int v234 = *v228;
            goto LABEL_491;
          case 2:
            int v234 = *(unsigned __int16 *)v228;
            goto LABEL_491;
          case 3:
            int v234 = *(unsigned __int16 *)v228 | (v228[2] << 16);
            goto LABEL_491;
          case 4:
            int v234 = *(_DWORD *)v228;
LABEL_491:
            if (v144 < 4) {
              v234 |= v232 << (8 * v144);
            }
            unsigned int v229 = v234 + 16;
            break;
          default:
            goto LABEL_494;
        }
      }
      break;
    case 9u:
      unint64_t v387 = v75;
      unsigned int v146 = a2[v390];
      unsigned int v147 = v146 - 2;
      if (v146 < 2)
      {
        uint64_t v80 = a1;
      }
      else
      {
        if (v390 <= 3) {
          uint64_t v148 = v390;
        }
        else {
          uint64_t v148 = 4;
        }
        uint64_t v80 = a1;
        switch(v148)
        {
          case 1:
            int v149 = *a2;
            goto LABEL_366;
          case 2:
            int v149 = *(unsigned __int16 *)a2;
            goto LABEL_366;
          case 3:
            int v149 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_366;
          case 4:
            int v149 = *(_DWORD *)a2;
LABEL_366:
            if (v390 < 4) {
              unsigned int v146 = (v149 | (v147 << (8 * v390))) + 2;
            }
            else {
              unsigned int v146 = v149 + 2;
            }
            break;
          default:
            break;
        }
      }
      uint64_t v235 = *(void *)(v35 - 8);
      uint64_t v392 = v35;
      BOOL v236 = v146 == 1;
      uint64_t v237 = v394;
      if (v146 == 1) {
        uint64_t v237 = v393;
      }
      (*(void (**)(uint64_t))(v237 + 32))(v80);
      *(unsigned char *)(v80 + v390) = v236;
      uint64_t v238 = (unsigned __int8 *)((unint64_t)&a2[v399 + v37] & v73);
      if (v388 > 3) {
        goto LABEL_372;
      }
      unsigned int v240 = ((1 << v381) | 2u) >> v381;
      if (HIWORD(v240))
      {
        unsigned int v239 = *(_DWORD *)&v238[v388];
      }
      else if ((v240 | 0x10) <= 0xFF)
      {
LABEL_372:
        unsigned int v239 = v238[v388];
      }
      else
      {
        unsigned int v239 = *(unsigned __int16 *)&v238[v388];
      }
      BOOL v241 = (unsigned __int8 *)((v399 + v80 + v37) & v73);
      unsigned int v242 = v239 - 16;
      if (v239 >= 0x10)
      {
        if (v388 <= 3) {
          uint64_t v243 = v388;
        }
        else {
          uint64_t v243 = 4;
        }
        switch(v243)
        {
          case 1:
            int v244 = *v238;
            goto LABEL_502;
          case 2:
            int v244 = *(unsigned __int16 *)v238;
            goto LABEL_502;
          case 3:
            int v244 = *(unsigned __int16 *)v238 | (v238[2] << 16);
            goto LABEL_502;
          case 4:
            int v244 = *(_DWORD *)v238;
LABEL_502:
            if (v388 < 4) {
              v244 |= v242 << v381;
            }
            unsigned int v239 = v244 + 16;
            break;
          default:
            break;
        }
      }
      switch(v239)
      {
        case 0u:
          long long v288 = *(_OWORD *)v238;
          *((void *)v241 + 2) = *((void *)v238 + 2);
          *(_OWORD *)BOOL v241 = v288;
          unint64_t v97 = v379;
          unint64_t v96 = v380;
          unint64_t v81 = v385;
          unsigned int v289 = v396;
          if (v388 > 3) {
            goto LABEL_509;
          }
          unsigned int v290 = ((1 << v381) | 2u) >> v381;
          if (HIWORD(v290))
          {
            *(_DWORD *)&v241[v388] = 0;
          }
          else if ((v290 | 0x10) > 0xFF)
          {
            *(_WORD *)&v241[v388] = 0;
          }
          else
          {
LABEL_509:
            v241[v388] = 0;
          }
          break;
        case 1u:
          *(void *)BOOL v241 = *(void *)v238;
          unint64_t v97 = v379;
          unint64_t v96 = v380;
          unint64_t v81 = v385;
          unsigned int v289 = v396;
          if (v388 > 3) {
            goto LABEL_569;
          }
          unsigned int v312 = ((1 << v381) | 2u) >> v381;
          if (HIWORD(v312))
          {
            *(_DWORD *)&v241[v388] = 1;
          }
          else
          {
            if ((v312 | 0x10) > 0xFF)
            {
              __int16 v356 = 1;
              goto LABEL_710;
            }
LABEL_569:
            v241[v388] = 1;
          }
          break;
        case 2u:
          *(_OWORD *)BOOL v241 = *(_OWORD *)v238;
          unint64_t v97 = v379;
          unint64_t v96 = v380;
          unint64_t v81 = v385;
          unsigned int v289 = v396;
          if (v388 > 3) {
            goto LABEL_573;
          }
          unsigned int v313 = ((1 << v381) | 2u) >> v381;
          if (HIWORD(v313))
          {
            *(_DWORD *)&v241[v388] = 2;
          }
          else
          {
            if ((v313 | 0x10) > 0xFF)
            {
              __int16 v356 = 2;
              goto LABEL_710;
            }
LABEL_573:
            v241[v388] = 2;
          }
          break;
        case 3u:
          *BOOL v241 = *v238;
          unint64_t v97 = v379;
          unint64_t v96 = v380;
          unint64_t v81 = v385;
          unsigned int v289 = v396;
          if (v388 > 3) {
            goto LABEL_577;
          }
          unsigned int v314 = ((1 << v381) | 2u) >> v381;
          if (HIWORD(v314))
          {
            *(_DWORD *)&v241[v388] = 3;
          }
          else
          {
            if ((v314 | 0x10) > 0xFF)
            {
              __int16 v356 = 3;
              goto LABEL_710;
            }
LABEL_577:
            v241[v388] = 3;
          }
          break;
        case 4u:
          *BOOL v241 = *v238;
          unint64_t v97 = v379;
          unint64_t v96 = v380;
          unint64_t v81 = v385;
          unsigned int v289 = v396;
          if (v388 > 3) {
            goto LABEL_581;
          }
          unsigned int v315 = ((1 << v381) | 2u) >> v381;
          if (HIWORD(v315))
          {
            *(_DWORD *)&v241[v388] = 4;
          }
          else
          {
            if ((v315 | 0x10) > 0xFF)
            {
              __int16 v356 = 4;
              goto LABEL_710;
            }
LABEL_581:
            v241[v388] = 4;
          }
          break;
        case 5u:
          *BOOL v241 = *v238;
          unint64_t v97 = v379;
          unint64_t v96 = v380;
          unint64_t v81 = v385;
          unsigned int v289 = v396;
          if (v388 > 3) {
            goto LABEL_585;
          }
          unsigned int v316 = ((1 << v381) | 2u) >> v381;
          if (HIWORD(v316))
          {
            *(_DWORD *)&v241[v388] = 5;
          }
          else
          {
            if ((v316 | 0x10) > 0xFF)
            {
              __int16 v356 = 5;
              goto LABEL_710;
            }
LABEL_585:
            v241[v388] = 5;
          }
          break;
        case 6u:
          *BOOL v241 = *v238;
          unint64_t v97 = v379;
          unint64_t v96 = v380;
          unint64_t v81 = v385;
          unsigned int v289 = v396;
          if (v388 > 3) {
            goto LABEL_589;
          }
          unsigned int v317 = ((1 << v381) | 2u) >> v381;
          if (HIWORD(v317))
          {
            *(_DWORD *)&v241[v388] = 6;
          }
          else
          {
            if ((v317 | 0x10) > 0xFF)
            {
              __int16 v356 = 6;
              goto LABEL_710;
            }
LABEL_589:
            v241[v388] = 6;
          }
          break;
        case 7u:
          *BOOL v241 = *v238;
          unint64_t v97 = v379;
          unint64_t v96 = v380;
          unint64_t v81 = v385;
          unsigned int v289 = v396;
          if (v388 > 3) {
            goto LABEL_593;
          }
          unsigned int v318 = ((1 << v381) | 2u) >> v381;
          if (HIWORD(v318))
          {
            *(_DWORD *)&v241[v388] = 7;
          }
          else
          {
            if ((v318 | 0x10) > 0xFF)
            {
              __int16 v356 = 7;
              goto LABEL_710;
            }
LABEL_593:
            v241[v388] = 7;
          }
          break;
        case 8u:
          (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v373 + 32))(v241, v238, v374);
          uint64_t v319 = (void *)((unint64_t)&v241[v39] & 0xFFFFFFFFFFFFFFF8);
          unsigned int v320 = (void *)((unint64_t)&v238[v39] & 0xFFFFFFFFFFFFFFF8);
          *uint64_t v319 = *v320;
          unint64_t v321 = ((unint64_t)v319 + v40) & v74;
          unint64_t v322 = ((unint64_t)v320 + v40) & v74;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v235 + 32))(v321, v322, v392);
          unsigned int v323 = (void *)((v41 + v321) & 0xFFFFFFFFFFFFFFF8);
          uint64_t v324 = (void *)((v41 + v322) & 0xFFFFFFFFFFFFFFF8);
          *unsigned int v323 = *v324;
          *(_OWORD *)(((unint64_t)v323 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v324 + 15) & 0xFFFFFFFFFFFFFFF8);
          unint64_t v325 = (unint64_t)&v241[v387];
          *(unsigned char *)unint64_t v325 = v238[v387];
          *(unsigned char *)(v325 | 1) = *(unsigned char *)((unint64_t)&v238[v387] | 1);
          unint64_t v97 = v379;
          unint64_t v96 = v380;
          unint64_t v81 = v385;
          unsigned int v289 = v396;
          if (v388 > 3) {
            goto LABEL_597;
          }
          unsigned int v326 = ((1 << v381) | 2u) >> v381;
          if (HIWORD(v326))
          {
            *(_DWORD *)&v241[v388] = 8;
          }
          else
          {
            if ((v326 | 0x10) > 0xFF)
            {
              __int16 v356 = 8;
              goto LABEL_710;
            }
LABEL_597:
            v241[v388] = 8;
          }
          break;
        case 9u:
          *(void *)BOOL v241 = *(void *)v238;
          unint64_t v97 = v379;
          unint64_t v96 = v380;
          unint64_t v81 = v385;
          unsigned int v289 = v396;
          if (v388 > 3) {
            goto LABEL_601;
          }
          unsigned int v327 = ((1 << v381) | 2u) >> v381;
          if (HIWORD(v327))
          {
            *(_DWORD *)&v241[v388] = 9;
          }
          else
          {
            if ((v327 | 0x10) > 0xFF)
            {
              __int16 v356 = 9;
              goto LABEL_710;
            }
LABEL_601:
            v241[v388] = 9;
          }
          break;
        case 0xAu:
          *BOOL v241 = *v238;
          unint64_t v97 = v379;
          unint64_t v96 = v380;
          unint64_t v81 = v385;
          unsigned int v289 = v396;
          if (v388 > 3) {
            goto LABEL_605;
          }
          unsigned int v328 = ((1 << v381) | 2u) >> v381;
          if (HIWORD(v328))
          {
            *(_DWORD *)&v241[v388] = 10;
          }
          else
          {
            if ((v328 | 0x10) > 0xFF)
            {
              __int16 v356 = 10;
              goto LABEL_710;
            }
LABEL_605:
            v241[v388] = 10;
          }
          break;
        case 0xBu:
          *(_WORD *)BOOL v241 = *(_WORD *)v238;
          unint64_t v97 = v379;
          unint64_t v96 = v380;
          unint64_t v81 = v385;
          unsigned int v289 = v396;
          if (v388 > 3) {
            goto LABEL_609;
          }
          unsigned int v329 = ((1 << v381) | 2u) >> v381;
          if (HIWORD(v329))
          {
            *(_DWORD *)&v241[v388] = 11;
          }
          else
          {
            if ((v329 | 0x10) > 0xFF)
            {
              __int16 v356 = 11;
              goto LABEL_710;
            }
LABEL_609:
            v241[v388] = 11;
          }
          break;
        case 0xCu:
          long long v330 = *(_OWORD *)v238;
          v241[16] = v238[16];
          *(_OWORD *)BOOL v241 = v330;
          unint64_t v97 = v379;
          unint64_t v96 = v380;
          unint64_t v81 = v385;
          unsigned int v289 = v396;
          if (v388 > 3) {
            goto LABEL_613;
          }
          unsigned int v331 = ((1 << v381) | 2u) >> v381;
          if (HIWORD(v331))
          {
            *(_DWORD *)&v241[v388] = 12;
          }
          else
          {
            if ((v331 | 0x10) > 0xFF)
            {
              __int16 v356 = 12;
              goto LABEL_710;
            }
LABEL_613:
            v241[v388] = 12;
          }
          break;
        case 0xDu:
          long long v332 = *(_OWORD *)v238;
          *((void *)v241 + 2) = *((void *)v238 + 2);
          *(_OWORD *)BOOL v241 = v332;
          unint64_t v97 = v379;
          unint64_t v96 = v380;
          unint64_t v81 = v385;
          unsigned int v289 = v396;
          if (v388 > 3) {
            goto LABEL_617;
          }
          unsigned int v333 = ((1 << v381) | 2u) >> v381;
          if (HIWORD(v333))
          {
            *(_DWORD *)&v241[v388] = 13;
          }
          else
          {
            if ((v333 | 0x10) > 0xFF)
            {
              __int16 v356 = 13;
              goto LABEL_710;
            }
LABEL_617:
            v241[v388] = 13;
          }
          break;
        case 0xEu:
          long long v334 = *(_OWORD *)v238;
          long long v335 = *((_OWORD *)v238 + 1);
          long long v336 = *((_OWORD *)v238 + 2);
          *(_OWORD *)(v241 + 41) = *(_OWORD *)(v238 + 41);
          *((_OWORD *)v241 + 1) = v335;
          *((_OWORD *)v241 + 2) = v336;
          *(_OWORD *)BOOL v241 = v334;
          unint64_t v97 = v379;
          unint64_t v96 = v380;
          unint64_t v81 = v385;
          unsigned int v289 = v396;
          if (v388 > 3) {
            goto LABEL_621;
          }
          unsigned int v337 = ((1 << v381) | 2u) >> v381;
          if (HIWORD(v337))
          {
            *(_DWORD *)&v241[v388] = 14;
          }
          else
          {
            if ((v337 | 0x10) > 0xFF)
            {
              __int16 v356 = 14;
              goto LABEL_710;
            }
LABEL_621:
            v241[v388] = 14;
          }
          break;
        case 0xFu:
          *BOOL v241 = *v238;
          unint64_t v97 = v379;
          unint64_t v96 = v380;
          unint64_t v81 = v385;
          unsigned int v289 = v396;
          if (v388 > 3) {
            goto LABEL_625;
          }
          unsigned int v338 = ((1 << v381) | 2u) >> v381;
          if (HIWORD(v338))
          {
            *(_DWORD *)&v241[v388] = 15;
          }
          else if ((v338 | 0x10) > 0xFF)
          {
            __int16 v356 = 15;
LABEL_710:
            *(_WORD *)&v241[v388] = v356;
          }
          else
          {
LABEL_625:
            v241[v388] = 15;
          }
          break;
        default:
          if (v388 > 3) {
            goto LABEL_646;
          }
          unsigned int v353 = ((1 << v381) | 2u) >> v381;
          unsigned int v354 = v353 | 0x10;
          BOOL v28 = HIWORD(v353) == 0;
          uint64_t v355 = 2;
          if (!v28) {
            uint64_t v355 = 4;
          }
          if (v354 <= 0xFF) {
LABEL_646:
          }
            uint64_t v355 = 1;
          unsigned int v289 = v396;
          memcpy(v241, v238, v355 + v388);
          unint64_t v97 = v379;
          unint64_t v96 = v380;
          unint64_t v81 = v385;
          break;
      }
      unint64_t v82 = v383;
      if (v289 > 3) {
        goto LABEL_715;
      }
      unsigned int v357 = ((1 << (8 * v289)) | 2u) >> (8 * v289);
      unsigned int v358 = v357 | 0x10;
      BOOL v28 = HIWORD(v357) == 0;
      uint64_t v359 = 2;
      if (!v28) {
        uint64_t v359 = 4;
      }
      if (v358 <= 0xFF) {
LABEL_715:
      }
        uint64_t v359 = 1;
      unint64_t v98 = v398 + v359;
      if (v98 <= v397) {
        unint64_t v98 = v397;
      }
      if (v388 <= 3)
      {
        unsigned int v360 = ((1 << v381) | 2u) >> v381;
        unsigned int v361 = v360 | 0x10;
        BOOL v28 = HIWORD(v360) == 0;
        uint64_t v102 = 2;
        if (!v28) {
          uint64_t v102 = 4;
        }
        if (v361 > 0xFF)
        {
          char v99 = 9;
          goto LABEL_738;
        }
      }
      char v99 = 9;
      goto LABEL_737;
    case 0xAu:
      unsigned int v150 = a2[v390];
      unsigned int v151 = v150 - 2;
      if (v150 < 2)
      {
        uint64_t v80 = a1;
        unint64_t v82 = v50;
        unint64_t v81 = v385;
        unsigned int v153 = v43;
        unsigned int v154 = v396;
      }
      else
      {
        if (v390 <= 3) {
          uint64_t v152 = v390;
        }
        else {
          uint64_t v152 = 4;
        }
        unsigned int v153 = v43;
        uint64_t v80 = a1;
        unint64_t v82 = v50;
        unint64_t v81 = v385;
        unsigned int v154 = v396;
        switch(v152)
        {
          case 1:
            int v155 = *a2;
            goto LABEL_386;
          case 2:
            int v155 = *(unsigned __int16 *)a2;
            goto LABEL_386;
          case 3:
            int v155 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_386;
          case 4:
            int v155 = *(_DWORD *)a2;
LABEL_386:
            if (v390 < 4) {
              unsigned int v150 = (v155 | (v151 << (8 * v390))) + 2;
            }
            else {
              unsigned int v150 = v155 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v245 = v150 == 1;
      uint64_t v246 = v394;
      if (v150 == 1) {
        uint64_t v246 = v393;
      }
      (*(void (**)(uint64_t))(v246 + 32))(v80);
      *(unsigned char *)(v80 + v390) = v245;
      unint64_t v247 = (unint64_t)&a2[v399 + 7] & 0xFFFFFFFFFFFFFFF8;
      char v248 = *(unsigned char *)(v247 + 8);
      unint64_t v249 = (v80 + v399 + 7) & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v249 = *(void *)v247;
      *(unsigned char *)(v249 + 8) = v248;
      if (v154 > 3) {
        goto LABEL_395;
      }
      unsigned int v250 = ((1 << (8 * v154)) | 2u) >> (8 * v154);
      unsigned int v251 = v250 | 0x10;
      BOOL v28 = HIWORD(v250) == 0;
      uint64_t v252 = 2;
      if (!v28) {
        uint64_t v252 = 4;
      }
      if (v251 <= 0xFF) {
LABEL_395:
      }
        uint64_t v252 = 1;
      unint64_t v97 = v379;
      unint64_t v96 = v380;
      unint64_t v98 = v398 + v252;
      if (v98 <= v397) {
        unint64_t v98 = v397;
      }
      if (v153 <= 3)
      {
        unsigned int v253 = ((1 << v381) | 2u) >> v381;
        unsigned int v254 = v253 | 0x10;
        BOOL v28 = HIWORD(v253) == 0;
        uint64_t v102 = 2;
        if (!v28) {
          uint64_t v102 = 4;
        }
        if (v254 > 0xFF)
        {
          char v99 = 10;
          goto LABEL_738;
        }
      }
      char v99 = 10;
      goto LABEL_737;
    case 0xBu:
      unsigned int v85 = a2[v390];
      unsigned int v86 = v85 - 2;
      if (v85 < 2)
      {
        uint64_t v80 = a1;
        unint64_t v82 = v50;
        unint64_t v81 = v385;
        unsigned int v88 = v43;
        unsigned int v89 = v396;
      }
      else
      {
        if (v390 <= 3) {
          uint64_t v87 = v390;
        }
        else {
          uint64_t v87 = 4;
        }
        unsigned int v88 = v43;
        uint64_t v80 = a1;
        unint64_t v82 = v50;
        unint64_t v81 = v385;
        unsigned int v89 = v396;
        switch(v87)
        {
          case 1:
            int v90 = *a2;
            goto LABEL_211;
          case 2:
            int v90 = *(unsigned __int16 *)a2;
            goto LABEL_211;
          case 3:
            int v90 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_211;
          case 4:
            int v90 = *(_DWORD *)a2;
LABEL_211:
            if (v390 < 4) {
              unsigned int v85 = (v90 | (v86 << (8 * v390))) + 2;
            }
            else {
              unsigned int v85 = v90 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v175 = v85 == 1;
      uint64_t v176 = v394;
      if (v85 == 1) {
        uint64_t v176 = v393;
      }
      (*(void (**)(uint64_t))(v176 + 32))(v80);
      *(unsigned char *)(v80 + v390) = v175;
      *(_OWORD *)((v80 + v399 + 7) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((unint64_t)&a2[v399 + 7] & 0xFFFFFFFFFFFFFFF8);
      if (v89 > 3) {
        goto LABEL_220;
      }
      unsigned int v177 = ((1 << (8 * v89)) | 2u) >> (8 * v89);
      unsigned int v178 = v177 | 0x10;
      BOOL v28 = HIWORD(v177) == 0;
      uint64_t v179 = 2;
      if (!v28) {
        uint64_t v179 = 4;
      }
      if (v178 <= 0xFF) {
LABEL_220:
      }
        uint64_t v179 = 1;
      unint64_t v97 = v379;
      unint64_t v96 = v380;
      unint64_t v98 = v398 + v179;
      if (v98 <= v397) {
        unint64_t v98 = v397;
      }
      if (v88 <= 3)
      {
        unsigned int v180 = ((1 << v381) | 2u) >> v381;
        unsigned int v181 = v180 | 0x10;
        BOOL v28 = HIWORD(v180) == 0;
        uint64_t v102 = 2;
        if (!v28) {
          uint64_t v102 = 4;
        }
        if (v181 > 0xFF)
        {
          char v99 = 11;
          goto LABEL_738;
        }
      }
      char v99 = 11;
      goto LABEL_737;
    case 0xCu:
      unsigned int v156 = a2[v390];
      unsigned int v157 = v156 - 2;
      if (v156 < 2)
      {
        uint64_t v80 = a1;
        unint64_t v82 = v50;
        unint64_t v81 = v385;
        unsigned int v159 = v43;
        unsigned int v160 = v396;
      }
      else
      {
        if (v390 <= 3) {
          uint64_t v158 = v390;
        }
        else {
          uint64_t v158 = 4;
        }
        unsigned int v159 = v43;
        uint64_t v80 = a1;
        unint64_t v82 = v50;
        unint64_t v81 = v385;
        unsigned int v160 = v396;
        switch(v158)
        {
          case 1:
            int v161 = *a2;
            goto LABEL_407;
          case 2:
            int v161 = *(unsigned __int16 *)a2;
            goto LABEL_407;
          case 3:
            int v161 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_407;
          case 4:
            int v161 = *(_DWORD *)a2;
LABEL_407:
            if (v390 < 4) {
              unsigned int v156 = (v161 | (v157 << (8 * v390))) + 2;
            }
            else {
              unsigned int v156 = v161 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v255 = v156 == 1;
      uint64_t v256 = v394;
      if (v156 == 1) {
        uint64_t v256 = v393;
      }
      (*(void (**)(uint64_t))(v256 + 32))(v80);
      *(unsigned char *)(v80 + v390) = v255;
      *(unsigned char *)(v399 + v80) = a2[v399];
      if (v160 > 3) {
        goto LABEL_416;
      }
      unsigned int v257 = ((1 << (8 * v160)) | 2u) >> (8 * v160);
      unsigned int v258 = v257 | 0x10;
      BOOL v28 = HIWORD(v257) == 0;
      uint64_t v259 = 2;
      if (!v28) {
        uint64_t v259 = 4;
      }
      if (v258 <= 0xFF) {
LABEL_416:
      }
        uint64_t v259 = 1;
      unint64_t v97 = v379;
      unint64_t v96 = v380;
      unint64_t v98 = v398 + v259;
      if (v98 <= v397) {
        unint64_t v98 = v397;
      }
      if (v159 <= 3)
      {
        unsigned int v260 = ((1 << v381) | 2u) >> v381;
        unsigned int v261 = v260 | 0x10;
        BOOL v28 = HIWORD(v260) == 0;
        uint64_t v102 = 2;
        if (!v28) {
          uint64_t v102 = 4;
        }
        if (v261 > 0xFF)
        {
          char v99 = 12;
          goto LABEL_738;
        }
      }
      char v99 = 12;
      goto LABEL_737;
    case 0xDu:
      unsigned int v162 = a2[v390];
      unsigned int v163 = v162 - 2;
      if (v162 < 2)
      {
        uint64_t v80 = a1;
        unint64_t v82 = v50;
        unint64_t v81 = v385;
        unsigned int v165 = v43;
        unsigned int v166 = v396;
      }
      else
      {
        if (v390 <= 3) {
          uint64_t v164 = v390;
        }
        else {
          uint64_t v164 = 4;
        }
        unsigned int v165 = v43;
        uint64_t v80 = a1;
        unint64_t v82 = v50;
        unint64_t v81 = v385;
        unsigned int v166 = v396;
        switch(v164)
        {
          case 1:
            int v167 = *a2;
            goto LABEL_428;
          case 2:
            int v167 = *(unsigned __int16 *)a2;
            goto LABEL_428;
          case 3:
            int v167 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_428;
          case 4:
            int v167 = *(_DWORD *)a2;
LABEL_428:
            if (v390 < 4) {
              unsigned int v162 = (v167 | (v163 << (8 * v390))) + 2;
            }
            else {
              unsigned int v162 = v167 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v262 = v162 == 1;
      uint64_t v263 = v394;
      if (v162 == 1) {
        uint64_t v263 = v393;
      }
      (*(void (**)(uint64_t))(v263 + 32))(v80);
      *(unsigned char *)(v80 + v390) = v262;
      uint64_t v264 = (void *)((v80 + v399 + 7) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v265 = (void *)((unint64_t)&a2[v399 + 7] & 0xFFFFFFFFFFFFFFF8);
      *uint64_t v264 = *v265;
      *(void *)(((unint64_t)v264 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v265 + 15) & 0xFFFFFFFFFFFFFFF8);
      if (v166 > 3) {
        goto LABEL_437;
      }
      unsigned int v266 = ((1 << (8 * v166)) | 2u) >> (8 * v166);
      unsigned int v267 = v266 | 0x10;
      BOOL v28 = HIWORD(v266) == 0;
      uint64_t v268 = 2;
      if (!v28) {
        uint64_t v268 = 4;
      }
      if (v267 <= 0xFF) {
LABEL_437:
      }
        uint64_t v268 = 1;
      unint64_t v97 = v379;
      unint64_t v96 = v380;
      unint64_t v98 = v398 + v268;
      if (v98 <= v397) {
        unint64_t v98 = v397;
      }
      if (v165 <= 3)
      {
        unsigned int v269 = ((1 << v381) | 2u) >> v381;
        unsigned int v270 = v269 | 0x10;
        BOOL v28 = HIWORD(v269) == 0;
        uint64_t v102 = 2;
        if (!v28) {
          uint64_t v102 = 4;
        }
        if (v270 > 0xFF)
        {
          char v99 = 13;
          goto LABEL_738;
        }
      }
      char v99 = 13;
      goto LABEL_737;
    default:
      unsigned int v76 = a2[v390];
      unsigned int v77 = v76 - 2;
      if (v76 < 2)
      {
        uint64_t v80 = a1;
        unint64_t v82 = v50;
        unint64_t v81 = v385;
        unsigned int v79 = v43;
        unsigned int v83 = v396;
      }
      else
      {
        if (v390 <= 3) {
          uint64_t v78 = v390;
        }
        else {
          uint64_t v78 = 4;
        }
        unsigned int v79 = v43;
        uint64_t v80 = a1;
        unint64_t v82 = v50;
        unint64_t v81 = v385;
        unsigned int v83 = v396;
        switch(v78)
        {
          case 1:
            int v84 = *a2;
            goto LABEL_190;
          case 2:
            int v84 = *(unsigned __int16 *)a2;
            goto LABEL_190;
          case 3:
            int v84 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_190;
          case 4:
            int v84 = *(_DWORD *)a2;
LABEL_190:
            if (v390 < 4) {
              unsigned int v76 = (v84 | (v77 << (8 * v390))) + 2;
            }
            else {
              unsigned int v76 = v84 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v168 = v76 == 1;
      uint64_t v169 = v394;
      if (v76 == 1) {
        uint64_t v169 = v393;
      }
      (*(void (**)(uint64_t))(v169 + 32))(v80);
      *(unsigned char *)(v80 + v390) = v168;
      *(unsigned char *)(v399 + v80) = a2[v399];
      if (v83 > 3) {
        goto LABEL_199;
      }
      unsigned int v170 = ((1 << (8 * v83)) | 2u) >> (8 * v83);
      unsigned int v171 = v170 | 0x10;
      BOOL v28 = HIWORD(v170) == 0;
      uint64_t v172 = 2;
      if (!v28) {
        uint64_t v172 = 4;
      }
      if (v171 <= 0xFF) {
LABEL_199:
      }
        uint64_t v172 = 1;
      unint64_t v97 = v379;
      unint64_t v96 = v380;
      unint64_t v98 = v398 + v172;
      if (v98 <= v397) {
        unint64_t v98 = v397;
      }
      if (v79 <= 3)
      {
        unsigned int v173 = ((1 << v381) | 2u) >> v381;
        unsigned int v174 = v173 | 0x10;
        BOOL v28 = HIWORD(v173) == 0;
        uint64_t v102 = 2;
        if (!v28) {
          uint64_t v102 = 4;
        }
        if (v174 > 0xFF)
        {
          char v99 = 0;
          goto LABEL_738;
        }
      }
      char v99 = 0;
      goto LABEL_737;
  }
LABEL_494:
  switch(v229)
  {
    case 0u:
      long long v285 = *(_OWORD *)v228;
      *((void *)v231 + 2) = *((void *)v228 + 2);
      *(_OWORD *)uint64_t v231 = v285;
      uint64_t v80 = a1;
      unint64_t v97 = v379;
      unint64_t v96 = v380;
      unint64_t v81 = v385;
      if (v144 > 3) {
        goto LABEL_498;
      }
      unsigned int v286 = ((1 << (8 * v144)) | 2u) >> (8 * v144);
      unsigned int v287 = v286 | 0x10;
      if (HIWORD(v286))
      {
        *(_DWORD *)&v231[v144] = 0;
      }
      else
      {
        if (v287 <= 0xFF)
        {
LABEL_498:
          v231[v144] = 0;
          goto LABEL_637;
        }
        *(_WORD *)&v231[v144] = 0;
      }
      goto LABEL_726;
    case 1u:
      *(void *)uint64_t v231 = *(void *)v228;
      uint64_t v80 = a1;
      unint64_t v97 = v379;
      unint64_t v96 = v380;
      unint64_t v81 = v385;
      if (v144 > 3) {
        goto LABEL_513;
      }
      __int16 v291 = 1;
      unsigned int v292 = ((1 << (8 * v144)) | 2u) >> (8 * v144);
      unsigned int v287 = v292 | 0x10;
      if (HIWORD(v292))
      {
        *(_DWORD *)&v231[v144] = 1;
        goto LABEL_726;
      }
      if (v287 > 0xFF) {
        goto LABEL_725;
      }
LABEL_513:
      char v293 = 1;
      goto LABEL_636;
    case 2u:
      *(_OWORD *)uint64_t v231 = *(_OWORD *)v228;
      uint64_t v80 = a1;
      unint64_t v97 = v379;
      unint64_t v96 = v380;
      unint64_t v81 = v385;
      if (v144 > 3) {
        goto LABEL_517;
      }
      unsigned int v294 = ((1 << (8 * v144)) | 2u) >> (8 * v144);
      unsigned int v287 = v294 | 0x10;
      if (HIWORD(v294))
      {
        *(_DWORD *)&v231[v144] = 2;
        goto LABEL_726;
      }
      if (v287 <= 0xFF)
      {
LABEL_517:
        char v293 = 2;
        goto LABEL_636;
      }
      __int16 v291 = 2;
      goto LABEL_725;
    case 3u:
      unsigned __int8 *v231 = *v228;
      uint64_t v80 = a1;
      unint64_t v97 = v379;
      unint64_t v96 = v380;
      unint64_t v81 = v385;
      if (v144 > 3) {
        goto LABEL_521;
      }
      unsigned int v295 = ((1 << (8 * v144)) | 2u) >> (8 * v144);
      unsigned int v287 = v295 | 0x10;
      if (HIWORD(v295))
      {
        *(_DWORD *)&v231[v144] = 3;
        goto LABEL_726;
      }
      if (v287 <= 0xFF)
      {
LABEL_521:
        char v293 = 3;
        goto LABEL_636;
      }
      __int16 v291 = 3;
      goto LABEL_725;
    case 4u:
      unsigned __int8 *v231 = *v228;
      uint64_t v80 = a1;
      unint64_t v97 = v379;
      unint64_t v96 = v380;
      unint64_t v81 = v385;
      if (v144 > 3) {
        goto LABEL_525;
      }
      unsigned int v296 = ((1 << (8 * v144)) | 2u) >> (8 * v144);
      unsigned int v287 = v296 | 0x10;
      if (HIWORD(v296))
      {
        *(_DWORD *)&v231[v144] = 4;
        goto LABEL_726;
      }
      if (v287 <= 0xFF)
      {
LABEL_525:
        char v293 = 4;
        goto LABEL_636;
      }
      __int16 v291 = 4;
      goto LABEL_725;
    case 5u:
      unsigned __int8 *v231 = *v228;
      uint64_t v80 = a1;
      unint64_t v97 = v379;
      unint64_t v96 = v380;
      unint64_t v81 = v385;
      if (v144 > 3) {
        goto LABEL_529;
      }
      unsigned int v297 = ((1 << (8 * v144)) | 2u) >> (8 * v144);
      unsigned int v287 = v297 | 0x10;
      if (HIWORD(v297))
      {
        *(_DWORD *)&v231[v144] = 5;
        goto LABEL_726;
      }
      if (v287 <= 0xFF)
      {
LABEL_529:
        char v293 = 5;
        goto LABEL_636;
      }
      __int16 v291 = 5;
      goto LABEL_725;
    case 6u:
      unsigned __int8 *v231 = *v228;
      uint64_t v80 = a1;
      unint64_t v97 = v379;
      unint64_t v96 = v380;
      unint64_t v81 = v385;
      if (v144 > 3) {
        goto LABEL_533;
      }
      unsigned int v298 = ((1 << (8 * v144)) | 2u) >> (8 * v144);
      unsigned int v287 = v298 | 0x10;
      if (HIWORD(v298))
      {
        *(_DWORD *)&v231[v144] = 6;
        goto LABEL_726;
      }
      if (v287 <= 0xFF)
      {
LABEL_533:
        char v293 = 6;
        goto LABEL_636;
      }
      __int16 v291 = 6;
      goto LABEL_725;
    case 7u:
      unsigned __int8 *v231 = *v228;
      uint64_t v80 = a1;
      unint64_t v97 = v379;
      unint64_t v96 = v380;
      unint64_t v81 = v385;
      if (v144 > 3) {
        goto LABEL_537;
      }
      unsigned int v299 = ((1 << (8 * v144)) | 2u) >> (8 * v144);
      unsigned int v287 = v299 | 0x10;
      if (HIWORD(v299))
      {
        *(_DWORD *)&v231[v144] = 7;
        goto LABEL_726;
      }
      if (v287 <= 0xFF)
      {
LABEL_537:
        char v293 = 7;
        goto LABEL_636;
      }
      __int16 v291 = 7;
      goto LABEL_725;
    case 8u:
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v369 + 32))(v231, v228, v371);
      uint64_t v342 = (void *)((unint64_t)&v231[v366] & 0xFFFFFFFFFFFFFFF8);
      uint64_t v343 = (void *)((unint64_t)&v228[v366] & 0xFFFFFFFFFFFFFFF8);
      void *v342 = *v343;
      unint64_t v344 = ((unint64_t)v342 + v367) & v71;
      unint64_t v345 = ((unint64_t)v343 + v367) & v71;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v370 + 32))(v344, v345, v372);
      long long v346 = (void *)((v368 + v344) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v347 = (void *)((v368 + v345) & 0xFFFFFFFFFFFFFFF8);
      void *v346 = *v347;
      *(_OWORD *)(((unint64_t)v346 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v347 + 15) & 0xFFFFFFFFFFFFFFF8);
      v231[v143] = v228[v143];
      *(unsigned char *)((unint64_t)&v231[v143] | 1) = *(unsigned char *)((unint64_t)&v228[v143] | 1);
      uint64_t v80 = a1;
      unint64_t v97 = v379;
      unint64_t v96 = v380;
      unint64_t v81 = v385;
      if (v144 > 3) {
        goto LABEL_635;
      }
      unsigned int v348 = ((1 << (8 * v144)) | 2u) >> (8 * v144);
      unsigned int v287 = v348 | 0x10;
      if (HIWORD(v348))
      {
        *(_DWORD *)&v231[v144] = 8;
        goto LABEL_726;
      }
      if (v287 <= 0xFF)
      {
LABEL_635:
        char v293 = 8;
        goto LABEL_636;
      }
      __int16 v291 = 8;
      goto LABEL_725;
    case 9u:
      *(void *)uint64_t v231 = *(void *)v228;
      uint64_t v80 = a1;
      unint64_t v97 = v379;
      unint64_t v96 = v380;
      unint64_t v81 = v385;
      if (v144 > 3) {
        goto LABEL_541;
      }
      unsigned int v300 = ((1 << (8 * v144)) | 2u) >> (8 * v144);
      unsigned int v287 = v300 | 0x10;
      if (HIWORD(v300))
      {
        *(_DWORD *)&v231[v144] = 9;
        goto LABEL_726;
      }
      if (v287 <= 0xFF)
      {
LABEL_541:
        char v293 = 9;
        goto LABEL_636;
      }
      __int16 v291 = 9;
      goto LABEL_725;
    case 0xAu:
      unsigned __int8 *v231 = *v228;
      uint64_t v80 = a1;
      unint64_t v97 = v379;
      unint64_t v96 = v380;
      unint64_t v81 = v385;
      if (v144 > 3) {
        goto LABEL_545;
      }
      unsigned int v301 = ((1 << (8 * v144)) | 2u) >> (8 * v144);
      unsigned int v287 = v301 | 0x10;
      if (HIWORD(v301))
      {
        *(_DWORD *)&v231[v144] = 10;
        goto LABEL_726;
      }
      if (v287 <= 0xFF)
      {
LABEL_545:
        char v293 = 10;
        goto LABEL_636;
      }
      __int16 v291 = 10;
      goto LABEL_725;
    case 0xBu:
      *(_WORD *)uint64_t v231 = *(_WORD *)v228;
      uint64_t v80 = a1;
      unint64_t v97 = v379;
      unint64_t v96 = v380;
      unint64_t v81 = v385;
      if (v144 > 3) {
        goto LABEL_549;
      }
      unsigned int v302 = ((1 << (8 * v144)) | 2u) >> (8 * v144);
      unsigned int v287 = v302 | 0x10;
      if (HIWORD(v302))
      {
        *(_DWORD *)&v231[v144] = 11;
        goto LABEL_726;
      }
      if (v287 <= 0xFF)
      {
LABEL_549:
        char v293 = 11;
        goto LABEL_636;
      }
      __int16 v291 = 11;
      goto LABEL_725;
    case 0xCu:
      long long v303 = *(_OWORD *)v228;
      v231[16] = v228[16];
      *(_OWORD *)uint64_t v231 = v303;
      uint64_t v80 = a1;
      unint64_t v97 = v379;
      unint64_t v96 = v380;
      unint64_t v81 = v385;
      if (v144 > 3) {
        goto LABEL_553;
      }
      unsigned int v304 = ((1 << (8 * v144)) | 2u) >> (8 * v144);
      unsigned int v287 = v304 | 0x10;
      if (HIWORD(v304))
      {
        *(_DWORD *)&v231[v144] = 12;
        goto LABEL_726;
      }
      if (v287 <= 0xFF)
      {
LABEL_553:
        char v293 = 12;
        goto LABEL_636;
      }
      __int16 v291 = 12;
      goto LABEL_725;
    case 0xDu:
      long long v305 = *(_OWORD *)v228;
      *((void *)v231 + 2) = *((void *)v228 + 2);
      *(_OWORD *)uint64_t v231 = v305;
      uint64_t v80 = a1;
      unint64_t v97 = v379;
      unint64_t v96 = v380;
      unint64_t v81 = v385;
      if (v144 > 3) {
        goto LABEL_557;
      }
      unsigned int v306 = ((1 << (8 * v144)) | 2u) >> (8 * v144);
      unsigned int v287 = v306 | 0x10;
      if (HIWORD(v306))
      {
        *(_DWORD *)&v231[v144] = 13;
        goto LABEL_726;
      }
      if (v287 <= 0xFF)
      {
LABEL_557:
        char v293 = 13;
        goto LABEL_636;
      }
      __int16 v291 = 13;
      goto LABEL_725;
    case 0xEu:
      long long v307 = *(_OWORD *)v228;
      long long v308 = *((_OWORD *)v228 + 1);
      long long v309 = *((_OWORD *)v228 + 2);
      *(_OWORD *)(v231 + 41) = *(_OWORD *)(v228 + 41);
      *((_OWORD *)v231 + 1) = v308;
      *((_OWORD *)v231 + 2) = v309;
      *(_OWORD *)uint64_t v231 = v307;
      uint64_t v80 = a1;
      unint64_t v97 = v379;
      unint64_t v96 = v380;
      unint64_t v81 = v385;
      if (v144 > 3) {
        goto LABEL_561;
      }
      unsigned int v310 = ((1 << (8 * v144)) | 2u) >> (8 * v144);
      unsigned int v287 = v310 | 0x10;
      if (HIWORD(v310))
      {
        *(_DWORD *)&v231[v144] = 14;
        goto LABEL_726;
      }
      if (v287 <= 0xFF)
      {
LABEL_561:
        char v293 = 14;
        goto LABEL_636;
      }
      __int16 v291 = 14;
      goto LABEL_725;
    case 0xFu:
      unsigned __int8 *v231 = *v228;
      uint64_t v80 = a1;
      unint64_t v97 = v379;
      unint64_t v96 = v380;
      unint64_t v81 = v385;
      if (v144 > 3) {
        goto LABEL_565;
      }
      unsigned int v311 = ((1 << (8 * v144)) | 2u) >> (8 * v144);
      unsigned int v287 = v311 | 0x10;
      if (HIWORD(v311))
      {
        *(_DWORD *)&v231[v144] = 15;
LABEL_726:
        BOOL v28 = HIWORD(v287) == 0;
        uint64_t v352 = 2;
        if (!v28) {
          uint64_t v352 = 4;
        }
        unsigned int v349 = v388;
        goto LABEL_729;
      }
      if (v287 > 0xFF)
      {
        __int16 v291 = 15;
LABEL_725:
        *(_WORD *)&v231[v144] = v291;
        goto LABEL_726;
      }
LABEL_565:
      char v293 = 15;
LABEL_636:
      v231[v144] = v293;
LABEL_637:
      unsigned int v349 = v388;
      if (v144 > 3) {
        goto LABEL_641;
      }
      unsigned int v350 = ((1 << (8 * v144)) | 2u) >> (8 * v144);
      unsigned int v351 = v350 | 0x10;
      BOOL v28 = HIWORD(v350) == 0;
      uint64_t v352 = 2;
      if (!v28) {
        uint64_t v352 = 4;
      }
      if (v351 <= 0xFF) {
LABEL_641:
      }
        uint64_t v352 = 1;
LABEL_729:
      unint64_t v98 = v398 + v352;
      if (v98 <= v397) {
        unint64_t v98 = v397;
      }
      if (v349 <= 3)
      {
        unsigned int v362 = ((1 << v381) | 2u) >> v381;
        unsigned int v363 = v362 | 0x10;
        BOOL v28 = HIWORD(v362) == 0;
        uint64_t v102 = 2;
        if (!v28) {
          uint64_t v102 = 4;
        }
        if (v363 > 0xFF)
        {
          char v99 = 8;
          goto LABEL_738;
        }
      }
      char v99 = 8;
LABEL_737:
      uint64_t v102 = 1;
LABEL_738:
      unint64_t v364 = v82 + v102;
      if (v364 > v98) {
        unint64_t v98 = v364;
      }
      if (v81 > v98) {
        unint64_t v98 = v81;
      }
      if (v97 > v98) {
        unint64_t v98 = v97;
      }
      if (v400 > v98) {
        unint64_t v98 = v400;
      }
      if (v96 > v98) {
        unint64_t v98 = v96;
      }
      *(unsigned char *)(v80 + v98) = v99;
      return v80;
    default:
      if (v144 > 3) {
        goto LABEL_630;
      }
      unsigned int v339 = ((1 << (8 * v144)) | 2u) >> (8 * v144);
      unsigned int v340 = v339 | 0x10;
      BOOL v28 = HIWORD(v339) == 0;
      uint64_t v341 = 2;
      if (!v28) {
        uint64_t v341 = 4;
      }
      if (v340 <= 0xFF) {
LABEL_630:
      }
        uint64_t v341 = 1;
      uint64_t v80 = a1;
      memcpy(v231, v228, v341 + v144);
      unint64_t v97 = v379;
      unint64_t v96 = v380;
      unint64_t v81 = v385;
      goto LABEL_637;
  }
}

unsigned __int8 *sub_10013F938(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1;
  if (a1 == a2) {
    return v2;
  }
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v4 = *(void *)(v3 + 64);
  uint64_t v443 = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(v443 - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  if (v6 <= v4) {
    unint64_t v7 = v4;
  }
  else {
    unint64_t v7 = *(void *)(v5 + 64);
  }
  unint64_t v8 = v7 + 1;
  uint64_t v441 = *(void *)(v443 - 8);
  unsigned int v9 = *(_DWORD *)(v5 + 80);
  uint64_t v10 = *(_DWORD *)(v5 + 80);
  uint64_t v427 = v4 + v10;
  uint64_t v431 = v10;
  uint64_t v425 = *(void *)(v5 + 64);
  unint64_t v11 = v6 + ((v4 + v10) & ~v10);
  unint64_t v437 = v7 + 2;
  if (v11 + 1 > v7 + 2) {
    unint64_t v12 = v11 + 1;
  }
  else {
    unint64_t v12 = v7 + 2;
  }
  if (v8 > v12) {
    unint64_t v12 = v7 + 1;
  }
  unint64_t v448 = v7;
  unint64_t v13 = v7 & 0xFFFFFFFFFFFFFFF8;
  if ((v7 & 0xFFFFFFFFFFFFFFF8) + 16 > v12) {
    unint64_t v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  uint64_t v442 = v3;
  uint64_t v14 = *(unsigned __int8 *)(v3 + 80) | v9;
  uint64_t v429 = v8 + v14;
  uint64_t v445 = v14;
  if (((v8 + v14) & ~v14) + v8 > v12) {
    unint64_t v12 = ((v8 + v14) & ~v14) + v8;
  }
  unint64_t v450 = v12;
  uint64_t v416 = swift_getAssociatedTypeWitness();
  uint64_t v15 = *(void *)(v416 - 8);
  uint64_t v414 = v15;
  int v16 = *(_DWORD *)(v15 + 80) & 0xF8;
  uint64_t v417 = swift_getAssociatedTypeWitness();
  uint64_t v415 = *(void *)(v417 - 8);
  uint64_t v17 = *(unsigned __int8 *)(v415 + 80);
  uint64_t v18 = v16 | v17 | 7;
  unint64_t v440 = v8;
  uint64_t v428 = v8 + v18;
  uint64_t v411 = *(void *)(v15 + 64) + 7;
  uint64_t v412 = v17 + 8;
  uint64_t v413 = *(void *)(v415 + 64) + 7;
  unint64_t v19 = (((v413 + ((v17 + 8 + (v411 & 0xFFFFFFFFFFFFFFF8)) & ~v17)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  if (v19 + 18 <= 0x39) {
    uint64_t v20 = 57;
  }
  else {
    uint64_t v20 = v19 + 18;
  }
  uint64_t v433 = v16 | v17 | 7;
  if (v20 > 3) {
    goto LABEL_21;
  }
  unsigned int v21 = ((1 << (8 * v20)) | 2u) >> (8 * v20);
  unsigned int v22 = v21 | 0x10;
  BOOL v23 = HIWORD(v21) == 0;
  uint64_t v24 = 2;
  if (!v23) {
    uint64_t v24 = 4;
  }
  if (v22 <= 0xFF) {
LABEL_21:
  }
    uint64_t v24 = 1;
  uint64_t v449 = v20 + ((v8 + v18) & ~v18);
  unint64_t v25 = v449 + v24;
  if (v25 <= v450) {
    unint64_t v26 = v450;
  }
  else {
    unint64_t v26 = v25;
  }
  uint64_t v423 = swift_getAssociatedTypeWitness();
  uint64_t v27 = *(void *)(v423 - 8);
  uint64_t v421 = v27;
  int v28 = *(_DWORD *)(v27 + 80) & 0xF8;
  uint64_t v424 = swift_getAssociatedTypeWitness();
  uint64_t v29 = v27;
  uint64_t v422 = *(void *)(v424 - 8);
  uint64_t v30 = *(unsigned __int8 *)(v422 + 80);
  uint64_t v31 = v28 | v30 | 7;
  unint64_t v32 = (v8 + v31) & ~v31;
  uint64_t v418 = *(void *)(v29 + 64) + 7;
  uint64_t v419 = v30 + 8;
  uint64_t v420 = *(void *)(v422 + 64) + 7;
  unint64_t v33 = (((v420 + ((v30 + 8 + (v418 & 0xFFFFFFFFFFFFFFF8)) & ~v30)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  if (v33 + 18 <= 0x39) {
    uint64_t v34 = 57;
  }
  else {
    uint64_t v34 = v33 + 18;
  }
  char v439 = 8 * v34;
  if (v34 <= 3) {
    unsigned int v35 = (((1 << (8 * v34)) | 2u) >> (8 * v34)) | 0x10;
  }
  else {
    unsigned int v35 = 17;
  }
  unint64_t v36 = v13 + 17;
  unint64_t v37 = v13 + 24;
  unint64_t v38 = ((v13 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  uint64_t v39 = 4;
  if (v35 < 0x10000) {
    uint64_t v39 = 2;
  }
  if (v35 < 0x100) {
    uint64_t v40 = 1;
  }
  else {
    uint64_t v40 = v39;
  }
  unint64_t v41 = v34 + v32;
  unint64_t v42 = v34 + v32 + v40;
  if (v42 <= v26) {
    unint64_t v42 = v26;
  }
  if (v36 > v42) {
    unint64_t v42 = v36;
  }
  unint64_t v43 = v37;
  if (v37 > v42) {
    unint64_t v42 = v37;
  }
  unint64_t v44 = v437;
  uint64_t v2 = a1;
  if (v437 > v42) {
    unint64_t v42 = v437;
  }
  if (v38 > v42) {
    unint64_t v42 = v38;
  }
  unsigned int v45 = a1[v42];
  unsigned int v46 = v45 - 14;
  uint64_t v447 = v20;
  if (v45 < 0xE)
  {
    unint64_t v53 = v448;
    uint64_t v58 = v431;
    uint64_t v48 = v433;
    uint64_t v47 = v445;
    unint64_t v52 = v43;
    unint64_t v59 = (((v413 + ((v17 + 8 + (v411 & 0xFFFFFFFFFFFFFFF8)) & ~v17)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    uint64_t v47 = v445;
    uint64_t v48 = v433;
    if (v20 > 3) {
      goto LABEL_51;
    }
    unsigned int v49 = ((1 << (8 * v20)) | 2u) >> (8 * v20);
    unsigned int v50 = v49 | 0x10;
    BOOL v23 = HIWORD(v49) == 0;
    uint64_t v51 = 2;
    if (!v23) {
      uint64_t v51 = 4;
    }
    if (v50 <= 0xFF) {
LABEL_51:
    }
      uint64_t v51 = 1;
    unint64_t v52 = v37;
    unint64_t v53 = v448;
    unint64_t v54 = v449 + v51;
    if (v54 <= v450) {
      unint64_t v54 = v450;
    }
    if (v34 > 3) {
      goto LABEL_58;
    }
    unsigned int v55 = ((1 << v439) | 2u) >> v439;
    unsigned int v56 = v55 | 0x10;
    BOOL v23 = HIWORD(v55) == 0;
    uint64_t v57 = 2;
    if (!v23) {
      uint64_t v57 = 4;
    }
    if (v56 <= 0xFF) {
LABEL_58:
    }
      uint64_t v57 = 1;
    unint64_t v59 = (((v413 + ((v17 + 8 + (v411 & 0xFFFFFFFFFFFFFFF8)) & ~v17)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v58 = v431;
    unint64_t v60 = v41 + v57;
    if (v60 > v54) {
      unint64_t v54 = v60;
    }
    if (v36 > v54) {
      unint64_t v54 = v36;
    }
    if (v52 > v54) {
      unint64_t v54 = v52;
    }
    if (v437 > v54) {
      unint64_t v54 = v437;
    }
    if (v38 > v54) {
      LODWORD(v54) = v38;
    }
    if (v54 <= 3) {
      uint64_t v61 = v54;
    }
    else {
      uint64_t v61 = 4;
    }
    switch(v61)
    {
      case 1:
        int v62 = *a1;
        if (v54 < 4) {
          goto LABEL_81;
        }
        goto LABEL_82;
      case 2:
        int v62 = *(unsigned __int16 *)a1;
        if (v54 >= 4) {
          goto LABEL_82;
        }
        goto LABEL_81;
      case 3:
        int v62 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        if (v54 >= 4) {
          goto LABEL_82;
        }
        goto LABEL_81;
      case 4:
        int v62 = *(_DWORD *)a1;
        if (v54 < 4) {
LABEL_81:
        }
          v62 |= v46 << (8 * v54);
LABEL_82:
        unsigned int v45 = v62 + 14;
        break;
      default:
        break;
    }
  }
  uint64_t v426 = ~v58;
  uint64_t v432 = ~v47;
  uint64_t v410 = ~v17;
  uint64_t v430 = ~v30;
  uint64_t v446 = v34;
  unint64_t v408 = v59 + 16;
  unint64_t v409 = v33 + 16;
  uint64_t v434 = ~v31;
  switch(v45)
  {
    case 1u:
      uint64_t v67 = ~v48;
      unint64_t v68 = v41;
      (*(void (**)(unsigned __int8 *, uint64_t, uint64_t))(v442 + 8))(a1, AssociatedTypeWitness, v48);
      uint64_t v69 = (unsigned __int8 *)((unint64_t)&a1[v427] & v426);
      goto LABEL_203;
    case 2u:
      unsigned int v63 = a1[v53];
      unsigned int v64 = v63 - 2;
      if (v63 >= 2)
      {
        if (v53 <= 3) {
          uint64_t v70 = v53;
        }
        else {
          uint64_t v70 = 4;
        }
        switch(v70)
        {
          case 1:
            goto LABEL_154;
          case 2:
            goto LABEL_156;
          case 3:
            goto LABEL_158;
          case 4:
            goto LABEL_160;
          default:
            goto LABEL_162;
        }
      }
      goto LABEL_162;
    case 3u:
      unsigned int v63 = a1[v53];
      unsigned int v64 = v63 - 2;
      if (v63 >= 2)
      {
        if (v53 <= 3) {
          uint64_t v71 = v53;
        }
        else {
          uint64_t v71 = 4;
        }
        switch(v71)
        {
          case 1:
            goto LABEL_154;
          case 2:
            goto LABEL_156;
          case 3:
            goto LABEL_158;
          case 4:
            goto LABEL_160;
          default:
            goto LABEL_162;
        }
      }
      goto LABEL_162;
    case 4u:
      unsigned int v63 = a1[v53];
      unsigned int v64 = v63 - 2;
      if (v63 >= 2)
      {
        if (v53 <= 3) {
          uint64_t v72 = v53;
        }
        else {
          uint64_t v72 = 4;
        }
        switch(v72)
        {
          case 1:
            goto LABEL_154;
          case 2:
            goto LABEL_156;
          case 3:
            goto LABEL_158;
          case 4:
            goto LABEL_160;
          default:
            goto LABEL_162;
        }
      }
      goto LABEL_162;
    case 5u:
      unsigned int v63 = a1[v53];
      unsigned int v64 = v63 - 2;
      if (v63 >= 2)
      {
        if (v53 <= 3) {
          uint64_t v73 = v53;
        }
        else {
          uint64_t v73 = 4;
        }
        switch(v73)
        {
          case 1:
            goto LABEL_154;
          case 2:
            goto LABEL_156;
          case 3:
            goto LABEL_158;
          case 4:
            goto LABEL_160;
          default:
            goto LABEL_162;
        }
      }
      goto LABEL_162;
    case 6u:
      unsigned int v74 = a1[v53];
      unsigned int v75 = v74 - 2;
      if (v74 >= 2)
      {
        if (v53 <= 3) {
          uint64_t v76 = v53;
        }
        else {
          uint64_t v76 = 4;
        }
        switch(v76)
        {
          case 1:
            int v77 = *a1;
            goto LABEL_169;
          case 2:
            int v77 = *(unsigned __int16 *)a1;
            goto LABEL_169;
          case 3:
            int v77 = *(unsigned __int16 *)a1 | (a1[2] << 16);
            goto LABEL_169;
          case 4:
            int v77 = *(_DWORD *)a1;
LABEL_169:
            if (v53 < 4) {
              unsigned int v74 = (v77 | (v75 << (8 * v53))) + 2;
            }
            else {
              unsigned int v74 = v77 + 2;
            }
            break;
          default:
            break;
        }
      }
      uint64_t v67 = ~v48;
      uint64_t v94 = v442;
      if (v74 == 1)
      {
        uint64_t v94 = v441;
        uint64_t v95 = v443;
      }
      else
      {
        uint64_t v95 = AssociatedTypeWitness;
      }
      (*(void (**)(unsigned __int8 *, uint64_t))(v94 + 8))(a1, v95);
      uint64_t v69 = (unsigned __int8 *)((unint64_t)&a1[v429] & v432);
      unsigned int v96 = v69[v53];
      unsigned int v97 = v96 - 2;
      if (v96 < 2) {
        goto LABEL_195;
      }
      if (v53 <= 3) {
        uint64_t v98 = v53;
      }
      else {
        uint64_t v98 = 4;
      }
      unint64_t v68 = v41;
      switch(v98)
      {
        case 1:
          goto LABEL_194;
        case 2:
          goto LABEL_196;
        case 3:
          goto LABEL_197;
        case 4:
          goto LABEL_198;
        default:
          goto LABEL_202;
      }
      goto LABEL_202;
    case 7u:
      unsigned int v78 = a1[v53];
      unsigned int v79 = v78 - 2;
      if (v78 >= 2)
      {
        if (v53 <= 3) {
          uint64_t v80 = v53;
        }
        else {
          uint64_t v80 = 4;
        }
        switch(v80)
        {
          case 1:
            int v81 = *a1;
            goto LABEL_183;
          case 2:
            int v81 = *(unsigned __int16 *)a1;
            goto LABEL_183;
          case 3:
            int v81 = *(unsigned __int16 *)a1 | (a1[2] << 16);
            goto LABEL_183;
          case 4:
            int v81 = *(_DWORD *)a1;
LABEL_183:
            if (v53 < 4) {
              unsigned int v78 = (v81 | (v79 << (8 * v53))) + 2;
            }
            else {
              unsigned int v78 = v81 + 2;
            }
            break;
          default:
            break;
        }
      }
      uint64_t v67 = ~v48;
      uint64_t v99 = v442;
      if (v78 == 1)
      {
        uint64_t v99 = v441;
        uint64_t v100 = v443;
      }
      else
      {
        uint64_t v100 = AssociatedTypeWitness;
      }
      (*(void (**)(unsigned __int8 *, uint64_t))(v99 + 8))(a1, v100);
      uint64_t v69 = (unsigned __int8 *)((unint64_t)&a1[v429] & v432);
      unsigned int v96 = v69[v53];
      unsigned int v97 = v96 - 2;
      if (v96 < 2)
      {
LABEL_195:
        unint64_t v68 = v41;
      }
      else
      {
        if (v53 <= 3) {
          uint64_t v101 = v53;
        }
        else {
          uint64_t v101 = 4;
        }
        unint64_t v68 = v41;
        switch(v101)
        {
          case 1:
LABEL_194:
            int v102 = *v69;
            goto LABEL_199;
          case 2:
LABEL_196:
            int v102 = *(unsigned __int16 *)v69;
            goto LABEL_199;
          case 3:
LABEL_197:
            int v102 = *(unsigned __int16 *)v69 | (v69[2] << 16);
            goto LABEL_199;
          case 4:
LABEL_198:
            int v102 = *(_DWORD *)v69;
LABEL_199:
            if (v448 < 4) {
              unsigned int v96 = (v102 | (v97 << (8 * v448))) + 2;
            }
            else {
              unsigned int v96 = v102 + 2;
            }
            break;
          default:
            break;
        }
      }
LABEL_202:
      if (v96 == 1) {
LABEL_203:
      }
        (*(void (**)(unsigned __int8 *, uint64_t))(v441 + 8))(v69, v443);
      else {
        (*(void (**)(unsigned __int8 *, uint64_t))(v442 + 8))(v69, AssociatedTypeWitness);
      }
      break;
    case 8u:
      unsigned int v82 = a1[v53];
      unsigned int v83 = v82 - 2;
      if (v82 < 2)
      {
        uint64_t v67 = ~v48;
      }
      else
      {
        if (v53 <= 3) {
          uint64_t v84 = v53;
        }
        else {
          uint64_t v84 = 4;
        }
        uint64_t v67 = ~v48;
        switch(v84)
        {
          case 1:
            int v85 = *a1;
            goto LABEL_357;
          case 2:
            int v85 = *(unsigned __int16 *)a1;
            goto LABEL_357;
          case 3:
            int v85 = *(unsigned __int16 *)a1 | (a1[2] << 16);
            goto LABEL_357;
          case 4:
            int v85 = *(_DWORD *)a1;
LABEL_357:
            if (v53 < 4) {
              unsigned int v82 = (v85 | (v83 << (8 * v53))) + 2;
            }
            else {
              unsigned int v82 = v85 + 2;
            }
            break;
          default:
            break;
        }
      }
      unint64_t v68 = v41;
      uint64_t v189 = v442;
      if (v82 == 1)
      {
        uint64_t v189 = v441;
        uint64_t v190 = v443;
      }
      else
      {
        uint64_t v190 = AssociatedTypeWitness;
      }
      (*(void (**)(unsigned __int8 *, uint64_t))(v189 + 8))(a1, v190);
      unsigned int v191 = (unsigned __int8 *)((unint64_t)&a1[v428] & v67);
      if (v447 > 3) {
        goto LABEL_364;
      }
      unsigned int v193 = ((1 << (8 * v447)) | 2u) >> (8 * v447);
      if (HIWORD(v193))
      {
        unsigned int v192 = *(_DWORD *)&v191[v447];
      }
      else if ((v193 | 0x10) <= 0xFF)
      {
LABEL_364:
        unsigned int v192 = v191[v447];
      }
      else
      {
        unsigned int v192 = *(unsigned __int16 *)&v191[v447];
      }
      unsigned int v194 = v192 - 16;
      if (v192 >= 0x10)
      {
        if (v447 <= 3) {
          uint64_t v195 = v447;
        }
        else {
          uint64_t v195 = 4;
        }
        switch(v195)
        {
          case 1:
            int v196 = *v191;
            goto LABEL_656;
          case 2:
            int v196 = *(unsigned __int16 *)v191;
            goto LABEL_656;
          case 3:
            int v196 = *(unsigned __int16 *)v191 | (*(unsigned __int8 *)(((unint64_t)&a1[v428] & v67) + 2) << 16);
            goto LABEL_656;
          case 4:
            int v196 = *(_DWORD *)v191;
LABEL_656:
            if (v447 < 4) {
              unsigned int v192 = (v196 | (v194 << (8 * v447))) + 16;
            }
            else {
              unsigned int v192 = v196 + 16;
            }
            break;
          default:
            break;
        }
      }
      switch(v192)
      {
        case 8u:
          (*(void (**)(unint64_t, uint64_t))(v414 + 8))((unint64_t)&a1[v428] & v67, v416);
          swift_bridgeObjectRelease();
          (*(void (**)(unint64_t, uint64_t))(v415 + 8))((v412 + ((unint64_t)&v191[v411] & 0xFFFFFFFFFFFFFFF8)) & v410, v417);
          goto LABEL_669;
        case 9u:
          goto LABEL_670;
        case 0xCu:
          goto LABEL_671;
        case 0xEu:
          goto LABEL_672;
        default:
          goto LABEL_204;
      }
    case 9u:
      unsigned int v86 = a1[v53];
      unsigned int v87 = v86 - 2;
      if (v86 >= 2)
      {
        if (v53 <= 3) {
          uint64_t v88 = v53;
        }
        else {
          uint64_t v88 = 4;
        }
        switch(v88)
        {
          case 1:
            int v89 = *a1;
            goto LABEL_378;
          case 2:
            int v89 = *(unsigned __int16 *)a1;
            goto LABEL_378;
          case 3:
            int v89 = *(unsigned __int16 *)a1 | (a1[2] << 16);
            goto LABEL_378;
          case 4:
            int v89 = *(_DWORD *)a1;
LABEL_378:
            if (v53 < 4) {
              unsigned int v86 = (v89 | (v87 << (8 * v53))) + 2;
            }
            else {
              unsigned int v86 = v89 + 2;
            }
            break;
          default:
            break;
        }
      }
      uint64_t v67 = ~v48;
      unint64_t v68 = v41;
      uint64_t v197 = v442;
      if (v86 == 1)
      {
        uint64_t v197 = v441;
        uint64_t v198 = v443;
      }
      else
      {
        uint64_t v198 = AssociatedTypeWitness;
      }
      (*(void (**)(unsigned __int8 *, uint64_t))(v197 + 8))(a1, v198);
      unsigned int v191 = (unsigned __int8 *)((unint64_t)&a1[v440 + v31] & v434);
      if (v446 > 3) {
        goto LABEL_385;
      }
      unsigned int v200 = ((1 << v439) | 2u) >> v439;
      if (HIWORD(v200))
      {
        unsigned int v199 = *(_DWORD *)&v191[v446];
      }
      else if ((v200 | 0x10) <= 0xFF)
      {
LABEL_385:
        unsigned int v199 = v191[v446];
      }
      else
      {
        unsigned int v199 = *(unsigned __int16 *)&v191[v446];
      }
      unsigned int v201 = v199 - 16;
      if (v199 >= 0x10)
      {
        if (v446 <= 3) {
          uint64_t v202 = v446;
        }
        else {
          uint64_t v202 = 4;
        }
        switch(v202)
        {
          case 1:
            int v203 = *v191;
            goto LABEL_664;
          case 2:
            int v203 = *(unsigned __int16 *)v191;
            goto LABEL_664;
          case 3:
            int v203 = *(unsigned __int16 *)v191 | (*(unsigned __int8 *)(((unint64_t)&a1[v440 + v31] & v434) + 2) << 16);
            goto LABEL_664;
          case 4:
            int v203 = *(_DWORD *)v191;
LABEL_664:
            if (v446 < 4) {
              unsigned int v199 = (v203 | (v201 << v439)) + 16;
            }
            else {
              unsigned int v199 = v203 + 16;
            }
            break;
          default:
            break;
        }
      }
      switch(v199)
      {
        case 8u:
          (*(void (**)(unint64_t, uint64_t))(v421 + 8))((unint64_t)&a1[v440 + v31] & v434, v423);
          swift_bridgeObjectRelease();
          (*(void (**)(unint64_t, uint64_t))(v422 + 8))((v419 + ((unint64_t)&v191[v418] & 0xFFFFFFFFFFFFFFF8)) & v430, v424);
LABEL_669:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          break;
        case 9u:
LABEL_670:

          break;
        case 0xCu:
LABEL_671:
          sub_1000D31F8(*(void *)v191, *((void *)v191 + 1), v191[16]);
          break;
        case 0xEu:
LABEL_672:
          unint64_t v309 = *((void *)v191 + 2);
          if (v309 >> 60 != 11 && v309 >> 60 != 15) {
            sub_10001E9C0(*((void *)v191 + 1), v309);
          }
          break;
        default:
          goto LABEL_204;
      }
      break;
    case 0xAu:
      unsigned int v63 = a1[v53];
      unsigned int v64 = v63 - 2;
      if (v63 >= 2)
      {
        if (v53 <= 3) {
          uint64_t v90 = v53;
        }
        else {
          uint64_t v90 = 4;
        }
        switch(v90)
        {
          case 1:
            goto LABEL_154;
          case 2:
            goto LABEL_156;
          case 3:
            goto LABEL_158;
          case 4:
            goto LABEL_160;
          default:
            goto LABEL_162;
        }
      }
      goto LABEL_162;
    case 0xBu:
      unsigned int v63 = a1[v53];
      unsigned int v64 = v63 - 2;
      if (v63 >= 2)
      {
        if (v53 <= 3) {
          uint64_t v66 = v53;
        }
        else {
          uint64_t v66 = 4;
        }
        switch(v66)
        {
          case 1:
            goto LABEL_154;
          case 2:
            goto LABEL_156;
          case 3:
            goto LABEL_158;
          case 4:
            goto LABEL_160;
          default:
            goto LABEL_162;
        }
      }
      goto LABEL_162;
    case 0xCu:
      unsigned int v63 = a1[v53];
      unsigned int v64 = v63 - 2;
      if (v63 >= 2)
      {
        if (v53 <= 3) {
          uint64_t v91 = v53;
        }
        else {
          uint64_t v91 = 4;
        }
        switch(v91)
        {
          case 1:
            goto LABEL_154;
          case 2:
            goto LABEL_156;
          case 3:
            goto LABEL_158;
          case 4:
            goto LABEL_160;
          default:
            goto LABEL_162;
        }
      }
      goto LABEL_162;
    case 0xDu:
      unsigned int v63 = a1[v53];
      unsigned int v64 = v63 - 2;
      if (v63 >= 2)
      {
        if (v53 <= 3) {
          uint64_t v92 = v53;
        }
        else {
          uint64_t v92 = 4;
        }
        switch(v92)
        {
          case 1:
            goto LABEL_154;
          case 2:
            goto LABEL_156;
          case 3:
            goto LABEL_158;
          case 4:
            goto LABEL_160;
          default:
            goto LABEL_162;
        }
      }
      goto LABEL_162;
    default:
      unsigned int v63 = a1[v53];
      unsigned int v64 = v63 - 2;
      if (v63 >= 2)
      {
        if (v53 <= 3) {
          uint64_t v65 = v53;
        }
        else {
          uint64_t v65 = 4;
        }
        switch(v65)
        {
          case 1:
LABEL_154:
            int v93 = *a1;
            if (v53 < 4) {
              goto LABEL_159;
            }
            goto LABEL_161;
          case 2:
LABEL_156:
            int v93 = *(unsigned __int16 *)a1;
            if (v53 >= 4) {
              goto LABEL_161;
            }
            goto LABEL_159;
          case 3:
LABEL_158:
            int v93 = *(unsigned __int16 *)a1 | (a1[2] << 16);
            if (v53 < 4) {
              goto LABEL_159;
            }
            goto LABEL_161;
          case 4:
LABEL_160:
            int v93 = *(_DWORD *)a1;
            if (v53 < 4) {
LABEL_159:
            }
              unsigned int v63 = (v93 | (v64 << (8 * v53))) + 2;
            else {
LABEL_161:
            }
              unsigned int v63 = v93 + 2;
            break;
          default:
            break;
        }
      }
LABEL_162:
      uint64_t v67 = ~v48;
      unint64_t v68 = v41;
      if (v63 == 1) {
        (*(void (**)(unsigned __int8 *, uint64_t))(v441 + 8))(a1, v443);
      }
      else {
        (*(void (**)(unsigned __int8 *, uint64_t))(v442 + 8))(a1, AssociatedTypeWitness);
      }
      break;
  }
LABEL_204:
  if (v447 > 3) {
    goto LABEL_208;
  }
  unsigned int v103 = ((1 << (8 * v447)) | 2u) >> (8 * v447);
  unsigned int v104 = v103 | 0x10;
  BOOL v23 = HIWORD(v103) == 0;
  uint64_t v105 = 2;
  if (!v23) {
    uint64_t v105 = 4;
  }
  if (v104 <= 0xFF) {
LABEL_208:
  }
    uint64_t v105 = 1;
  unint64_t v106 = v68;
  unsigned int v107 = a2;
  unint64_t v108 = v449 + v105;
  if (v108 <= v450) {
    unint64_t v108 = v450;
  }
  if (v446 > 3) {
    goto LABEL_215;
  }
  unsigned int v109 = ((1 << v439) | 2u) >> v439;
  unsigned int v110 = v109 | 0x10;
  BOOL v23 = HIWORD(v109) == 0;
  uint64_t v111 = 2;
  if (!v23) {
    uint64_t v111 = 4;
  }
  if (v110 <= 0xFF) {
LABEL_215:
  }
    uint64_t v111 = 1;
  unint64_t v112 = v68 + v111;
  if (v112 > v108) {
    unint64_t v108 = v112;
  }
  if (v36 > v108) {
    unint64_t v108 = v36;
  }
  if (v52 > v108) {
    unint64_t v108 = v52;
  }
  if (v437 > v108) {
    unint64_t v108 = v437;
  }
  if (v38 > v108) {
    unint64_t v108 = v38;
  }
  unsigned int v113 = a2[v108];
  unsigned int v114 = v113 - 14;
  if (v113 >= 0xE)
  {
    if (v447 > 3) {
      goto LABEL_231;
    }
    unsigned int v115 = ((1 << (8 * v447)) | 2u) >> (8 * v447);
    unsigned int v116 = v115 | 0x10;
    BOOL v23 = HIWORD(v115) == 0;
    uint64_t v117 = 2;
    if (!v23) {
      uint64_t v117 = 4;
    }
    if (v116 <= 0xFF) {
LABEL_231:
    }
      uint64_t v117 = 1;
    unint64_t v118 = v449 + v117;
    if (v118 <= v450) {
      unint64_t v118 = v450;
    }
    if (v446 > 3) {
      goto LABEL_238;
    }
    unsigned int v119 = ((1 << v439) | 2u) >> v439;
    unsigned int v120 = v119 | 0x10;
    BOOL v23 = HIWORD(v119) == 0;
    uint64_t v121 = 2;
    if (!v23) {
      uint64_t v121 = 4;
    }
    if (v120 <= 0xFF) {
LABEL_238:
    }
      uint64_t v121 = 1;
    unint64_t v122 = v68 + v121;
    if (v122 > v118) {
      unint64_t v118 = v122;
    }
    if (v36 > v118) {
      unint64_t v118 = v36;
    }
    if (v52 > v118) {
      unint64_t v118 = v52;
    }
    if (v437 > v118) {
      unint64_t v118 = v437;
    }
    if (v38 > v118) {
      LODWORD(v118) = v38;
    }
    if (v118 <= 3) {
      uint64_t v123 = v118;
    }
    else {
      uint64_t v123 = 4;
    }
    switch(v123)
    {
      case 1:
        int v124 = *a2;
        if (v118 < 4) {
          goto LABEL_256;
        }
        goto LABEL_260;
      case 2:
        int v124 = *(unsigned __int16 *)a2;
        if (v118 < 4) {
          goto LABEL_256;
        }
        goto LABEL_260;
      case 3:
        int v124 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        if (v118 < 4) {
          goto LABEL_256;
        }
        goto LABEL_260;
      case 4:
        int v124 = *(_DWORD *)a2;
        if (v118 < 4) {
LABEL_256:
        }
          unsigned int v113 = (v124 | (v114 << (8 * v118))) + 14;
        else {
LABEL_260:
        }
          unsigned int v113 = v124 + 14;
        break;
      default:
        break;
    }
  }
  switch(v113)
  {
    case 1u:
      unint64_t v133 = v38;
      (*(void (**)(unsigned __int8 *))(v442 + 32))(a1);
      unint64_t v134 = (unint64_t)&a1[v427] & v426;
      unint64_t v135 = (unint64_t)&a2[v427] & v426;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v441 + 32))(v134, v135, v443);
      *(unsigned char *)(v134 + v425) = *(unsigned char *)(v135 + v425);
      if (v447 > 3) {
        goto LABEL_279;
      }
      unsigned int v136 = ((1 << (8 * v447)) | 2u) >> (8 * v447);
      unsigned int v137 = v136 | 0x10;
      BOOL v23 = HIWORD(v136) == 0;
      uint64_t v138 = 2;
      if (!v23) {
        uint64_t v138 = 4;
      }
      if (v137 <= 0xFF) {
LABEL_279:
      }
        uint64_t v138 = 1;
      unint64_t v38 = v133;
      unint64_t v139 = v449 + v138;
      if (v139 <= v450) {
        unint64_t v139 = v450;
      }
      uint64_t v2 = a1;
      if (v446 > 3) {
        goto LABEL_286;
      }
      char v140 = 1;
      unsigned int v141 = ((1 << v439) | 2u) >> v439;
      unsigned int v142 = v141 | 0x10;
      BOOL v23 = HIWORD(v141) == 0;
      uint64_t v143 = 2;
      if (!v23) {
        uint64_t v143 = 4;
      }
      if (v142 <= 0xFF)
      {
LABEL_286:
        uint64_t v143 = 1;
        char v140 = 1;
      }
      goto LABEL_967;
    case 2u:
      unsigned int v144 = a2[v448];
      unsigned int v145 = v144 - 2;
      if (v144 >= 2)
      {
        if (v448 <= 3) {
          uint64_t v146 = v448;
        }
        else {
          uint64_t v146 = 4;
        }
        switch(v146)
        {
          case 1:
            int v147 = *a2;
            goto LABEL_441;
          case 2:
            int v147 = *(unsigned __int16 *)a2;
            goto LABEL_441;
          case 3:
            int v147 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_441;
          case 4:
            int v147 = *(_DWORD *)a2;
LABEL_441:
            if (v448 < 4) {
              unsigned int v144 = (v147 | (v145 << (8 * v448))) + 2;
            }
            else {
              unsigned int v144 = v147 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v218 = v144 == 1;
      uint64_t v219 = v442;
      if (v144 == 1) {
        uint64_t v219 = v441;
      }
      (*(void (**)(unsigned __int8 *))(v219 + 32))(a1);
      a1[v448] = v218;
      a1[v440] = a2[v440];
      if (v447 > 3) {
        goto LABEL_450;
      }
      unsigned int v220 = ((1 << (8 * v447)) | 2u) >> (8 * v447);
      unsigned int v221 = v220 | 0x10;
      BOOL v23 = HIWORD(v220) == 0;
      uint64_t v222 = 2;
      if (!v23) {
        uint64_t v222 = 4;
      }
      if (v221 <= 0xFF) {
LABEL_450:
      }
        uint64_t v222 = 1;
      unint64_t v139 = v449 + v222;
      if (v139 <= v450) {
        unint64_t v139 = v450;
      }
      if (v446 <= 3)
      {
        unsigned int v223 = ((1 << v439) | 2u) >> v439;
        unsigned int v224 = v223 | 0x10;
        BOOL v23 = HIWORD(v223) == 0;
        char v140 = 2;
        uint64_t v143 = 4;
        if (v23) {
          uint64_t v143 = 2;
        }
        if (v224 > 0xFF) {
          goto LABEL_967;
        }
      }
      char v140 = 2;
      goto LABEL_966;
    case 3u:
      unsigned int v148 = a2[v448];
      unsigned int v149 = v148 - 2;
      if (v148 >= 2)
      {
        if (v448 <= 3) {
          uint64_t v150 = v448;
        }
        else {
          uint64_t v150 = 4;
        }
        switch(v150)
        {
          case 1:
            int v151 = *a2;
            goto LABEL_462;
          case 2:
            int v151 = *(unsigned __int16 *)a2;
            goto LABEL_462;
          case 3:
            int v151 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_462;
          case 4:
            int v151 = *(_DWORD *)a2;
LABEL_462:
            if (v448 < 4) {
              unsigned int v148 = (v151 | (v149 << (8 * v448))) + 2;
            }
            else {
              unsigned int v148 = v151 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v225 = v148 == 1;
      uint64_t v226 = v442;
      if (v148 == 1)
      {
        uint64_t v226 = v441;
        uint64_t v227 = v443;
      }
      else
      {
        uint64_t v227 = AssociatedTypeWitness;
      }
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v226 + 32))(a1, a2, v227);
      a1[v448] = v225;
      if (v447 > 3) {
        goto LABEL_472;
      }
      unsigned int v228 = ((1 << (8 * v447)) | 2u) >> (8 * v447);
      unsigned int v229 = v228 | 0x10;
      BOOL v23 = HIWORD(v228) == 0;
      uint64_t v230 = 2;
      if (!v23) {
        uint64_t v230 = 4;
      }
      if (v229 <= 0xFF) {
LABEL_472:
      }
        uint64_t v230 = 1;
      unint64_t v139 = v449 + v230;
      if (v139 <= v450) {
        unint64_t v139 = v450;
      }
      if (v446 <= 3)
      {
        unsigned int v231 = ((1 << v439) | 2u) >> v439;
        unsigned int v232 = v231 | 0x10;
        BOOL v23 = HIWORD(v231) == 0;
        uint64_t v143 = 2;
        if (!v23) {
          uint64_t v143 = 4;
        }
        if (v232 > 0xFF)
        {
          char v140 = 3;
          goto LABEL_967;
        }
      }
      char v140 = 3;
      goto LABEL_966;
    case 4u:
      unsigned int v152 = a2[v448];
      unsigned int v153 = v152 - 2;
      if (v152 >= 2)
      {
        if (v448 <= 3) {
          uint64_t v154 = v448;
        }
        else {
          uint64_t v154 = 4;
        }
        switch(v154)
        {
          case 1:
            int v155 = *a2;
            goto LABEL_484;
          case 2:
            int v155 = *(unsigned __int16 *)a2;
            goto LABEL_484;
          case 3:
            int v155 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_484;
          case 4:
            int v155 = *(_DWORD *)a2;
LABEL_484:
            if (v448 < 4) {
              unsigned int v152 = (v155 | (v153 << (8 * v448))) + 2;
            }
            else {
              unsigned int v152 = v155 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v233 = v152 == 1;
      uint64_t v234 = v442;
      if (v152 == 1) {
        uint64_t v234 = v441;
      }
      (*(void (**)(unsigned __int8 *))(v234 + 32))(a1);
      a1[v448] = v233;
      *(void *)((unint64_t)&a1[v440 + 7] & 0xFFFFFFFFFFFFFFF8) = *(void *)((unint64_t)&a2[v440 + 7] & 0xFFFFFFFFFFFFFFF8);
      if (v447 > 3) {
        goto LABEL_493;
      }
      unsigned int v235 = ((1 << (8 * v447)) | 2u) >> (8 * v447);
      unsigned int v236 = v235 | 0x10;
      BOOL v23 = HIWORD(v235) == 0;
      uint64_t v237 = 2;
      if (!v23) {
        uint64_t v237 = 4;
      }
      if (v236 <= 0xFF) {
LABEL_493:
      }
        uint64_t v237 = 1;
      unint64_t v139 = v449 + v237;
      if (v139 <= v450) {
        unint64_t v139 = v450;
      }
      if (v446 <= 3)
      {
        unsigned int v238 = ((1 << v439) | 2u) >> v439;
        unsigned int v239 = v238 | 0x10;
        BOOL v23 = HIWORD(v238) == 0;
        uint64_t v143 = 2;
        char v140 = 4;
        if (!v23) {
          uint64_t v143 = 4;
        }
        if (v239 > 0xFF) {
          goto LABEL_967;
        }
      }
      char v140 = 4;
      goto LABEL_966;
    case 5u:
      unsigned int v156 = a2[v448];
      unsigned int v157 = v156 - 2;
      if (v156 >= 2)
      {
        if (v448 <= 3) {
          uint64_t v158 = v448;
        }
        else {
          uint64_t v158 = 4;
        }
        switch(v158)
        {
          case 1:
            int v159 = *a2;
            goto LABEL_504;
          case 2:
            int v159 = *(unsigned __int16 *)a2;
            goto LABEL_504;
          case 3:
            int v159 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_504;
          case 4:
            int v159 = *(_DWORD *)a2;
LABEL_504:
            if (v448 < 4) {
              unsigned int v156 = (v159 | (v157 << (8 * v448))) + 2;
            }
            else {
              unsigned int v156 = v159 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v240 = v156 == 1;
      uint64_t v241 = v442;
      if (v156 == 1) {
        uint64_t v241 = v441;
      }
      (*(void (**)(unsigned __int8 *))(v241 + 32))(a1);
      a1[v448] = v240;
      *(void *)((unint64_t)&a1[v440 + 7] & 0xFFFFFFFFFFFFFFF8) = *(void *)((unint64_t)&a2[v440 + 7] & 0xFFFFFFFFFFFFFFF8);
      if (v447 > 3) {
        goto LABEL_513;
      }
      unsigned int v242 = ((1 << (8 * v447)) | 2u) >> (8 * v447);
      unsigned int v243 = v242 | 0x10;
      BOOL v23 = HIWORD(v242) == 0;
      uint64_t v244 = 2;
      if (!v23) {
        uint64_t v244 = 4;
      }
      if (v243 <= 0xFF) {
LABEL_513:
      }
        uint64_t v244 = 1;
      unint64_t v139 = v449 + v244;
      if (v139 <= v450) {
        unint64_t v139 = v450;
      }
      if (v446 <= 3)
      {
        unsigned int v245 = ((1 << v439) | 2u) >> v439;
        unsigned int v246 = v245 | 0x10;
        BOOL v23 = HIWORD(v245) == 0;
        uint64_t v143 = 2;
        if (!v23) {
          uint64_t v143 = 4;
        }
        if (v246 > 0xFF)
        {
          char v140 = 5;
          goto LABEL_967;
        }
      }
      char v140 = 5;
      goto LABEL_966;
    case 6u:
      unsigned int v160 = a2[v448];
      unsigned int v161 = v160 - 2;
      if (v160 >= 2)
      {
        if (v448 <= 3) {
          uint64_t v162 = v448;
        }
        else {
          uint64_t v162 = 4;
        }
        switch(v162)
        {
          case 1:
            int v163 = *a2;
            goto LABEL_525;
          case 2:
            int v163 = *(unsigned __int16 *)a2;
            goto LABEL_525;
          case 3:
            int v163 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_525;
          case 4:
            int v163 = *(_DWORD *)a2;
LABEL_525:
            if (v448 < 4) {
              unsigned int v160 = (v163 | (v161 << (8 * v448))) + 2;
            }
            else {
              unsigned int v160 = v163 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v247 = v160 == 1;
      uint64_t v248 = v442;
      if (v160 == 1) {
        uint64_t v248 = v441;
      }
      (*(void (**)(unsigned __int8 *))(v248 + 32))(a1);
      a1[v448] = v247;
      unint64_t v249 = (unsigned __int8 *)((unint64_t)&a2[v429] & v432);
      unsigned int v250 = v249[v448];
      unsigned int v251 = v250 - 2;
      if (v250 >= 2)
      {
        if (v448 <= 3) {
          uint64_t v252 = v448;
        }
        else {
          uint64_t v252 = 4;
        }
        switch(v252)
        {
          case 1:
            int v253 = *v249;
            goto LABEL_678;
          case 2:
            int v253 = *(unsigned __int16 *)v249;
            goto LABEL_678;
          case 3:
            int v253 = *(unsigned __int16 *)v249 | (*(unsigned __int8 *)(((unint64_t)&a2[v429] & v432) + 2) << 16);
            goto LABEL_678;
          case 4:
            int v253 = *(_DWORD *)v249;
LABEL_678:
            if (v448 < 4) {
              unsigned int v250 = (v253 | (v251 << (8 * v448))) + 2;
            }
            else {
              unsigned int v250 = v253 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v310 = v250 == 1;
      uint64_t v311 = v442;
      if (v250 == 1) {
        uint64_t v311 = v441;
      }
      (*(void (**)(unint64_t))(v311 + 32))((unint64_t)&a1[v429] & v432);
      *(unsigned char *)(((unint64_t)&a1[v429] & v432) + v448) = v310;
      if (v447 > 3) {
        goto LABEL_687;
      }
      unsigned int v312 = ((1 << (8 * v447)) | 2u) >> (8 * v447);
      unsigned int v313 = v312 | 0x10;
      BOOL v23 = HIWORD(v312) == 0;
      uint64_t v314 = 2;
      if (!v23) {
        uint64_t v314 = 4;
      }
      if (v313 <= 0xFF) {
LABEL_687:
      }
        uint64_t v314 = 1;
      unint64_t v139 = v449 + v314;
      if (v139 <= v450) {
        unint64_t v139 = v450;
      }
      if (v446 <= 3)
      {
        unsigned int v315 = ((1 << v439) | 2u) >> v439;
        unsigned int v316 = v315 | 0x10;
        BOOL v23 = HIWORD(v315) == 0;
        uint64_t v143 = 2;
        if (!v23) {
          uint64_t v143 = 4;
        }
        if (v316 > 0xFF)
        {
          char v140 = 6;
          goto LABEL_967;
        }
      }
      char v140 = 6;
      goto LABEL_966;
    case 7u:
      unsigned int v164 = a2[v448];
      unsigned int v165 = v164 - 2;
      if (v164 >= 2)
      {
        if (v448 <= 3) {
          uint64_t v166 = v448;
        }
        else {
          uint64_t v166 = 4;
        }
        switch(v166)
        {
          case 1:
            int v167 = *a2;
            goto LABEL_539;
          case 2:
            int v167 = *(unsigned __int16 *)a2;
            goto LABEL_539;
          case 3:
            int v167 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_539;
          case 4:
            int v167 = *(_DWORD *)a2;
LABEL_539:
            if (v448 < 4) {
              unsigned int v164 = (v167 | (v165 << (8 * v448))) + 2;
            }
            else {
              unsigned int v164 = v167 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v254 = v164 == 1;
      uint64_t v255 = v442;
      if (v164 == 1) {
        uint64_t v255 = v441;
      }
      (*(void (**)(unsigned __int8 *))(v255 + 32))(a1);
      a1[v448] = v254;
      uint64_t v256 = (unsigned __int8 *)((unint64_t)&a2[v429] & v432);
      unsigned int v257 = v256[v448];
      unsigned int v258 = v257 - 2;
      if (v257 >= 2)
      {
        if (v448 <= 3) {
          uint64_t v259 = v448;
        }
        else {
          uint64_t v259 = 4;
        }
        switch(v259)
        {
          case 1:
            int v260 = *v256;
            goto LABEL_699;
          case 2:
            int v260 = *(unsigned __int16 *)v256;
            goto LABEL_699;
          case 3:
            int v260 = *(unsigned __int16 *)v256 | (*(unsigned __int8 *)(((unint64_t)&a2[v429] & v432) + 2) << 16);
            goto LABEL_699;
          case 4:
            int v260 = *(_DWORD *)v256;
LABEL_699:
            if (v448 < 4) {
              unsigned int v257 = (v260 | (v258 << (8 * v448))) + 2;
            }
            else {
              unsigned int v257 = v260 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v317 = v257 == 1;
      uint64_t v318 = v442;
      if (v257 == 1) {
        uint64_t v318 = v441;
      }
      (*(void (**)(unint64_t))(v318 + 32))((unint64_t)&a1[v429] & v432);
      *(unsigned char *)(((unint64_t)&a1[v429] & v432) + v448) = v317;
      if (v447 > 3) {
        goto LABEL_708;
      }
      unsigned int v319 = ((1 << (8 * v447)) | 2u) >> (8 * v447);
      unsigned int v320 = v319 | 0x10;
      BOOL v23 = HIWORD(v319) == 0;
      uint64_t v321 = 2;
      if (!v23) {
        uint64_t v321 = 4;
      }
      if (v320 <= 0xFF) {
LABEL_708:
      }
        uint64_t v321 = 1;
      unint64_t v139 = v449 + v321;
      if (v139 <= v450) {
        unint64_t v139 = v450;
      }
      if (v446 <= 3)
      {
        unsigned int v322 = ((1 << v439) | 2u) >> v439;
        unsigned int v323 = v322 | 0x10;
        BOOL v23 = HIWORD(v322) == 0;
        uint64_t v143 = 2;
        if (!v23) {
          uint64_t v143 = 4;
        }
        if (v323 > 0xFF)
        {
          char v140 = 7;
          goto LABEL_967;
        }
      }
      char v140 = 7;
      goto LABEL_966;
    case 8u:
      unsigned int v168 = a2[v448];
      unsigned int v169 = v168 - 2;
      if (v168 >= 2)
      {
        if (v448 <= 3) {
          uint64_t v170 = v448;
        }
        else {
          uint64_t v170 = 4;
        }
        switch(v170)
        {
          case 1:
            int v171 = *a2;
            goto LABEL_553;
          case 2:
            int v171 = *(unsigned __int16 *)a2;
            goto LABEL_553;
          case 3:
            int v171 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_553;
          case 4:
            int v171 = *(_DWORD *)a2;
LABEL_553:
            if (v448 < 4) {
              unsigned int v168 = (v171 | (v169 << (8 * v448))) + 2;
            }
            else {
              unsigned int v168 = v171 + 2;
            }
            break;
          default:
            break;
        }
      }
      unint64_t v261 = v38;
      BOOL v262 = v168 == 1;
      uint64_t v263 = v442;
      if (v168 == 1) {
        uint64_t v263 = v441;
      }
      (*(void (**)(unsigned __int8 *))(v263 + 32))(a1);
      a1[v448] = v262;
      uint64_t v264 = (unsigned __int8 *)((unint64_t)&a2[v428] & v67);
      if (v447 > 3) {
        goto LABEL_559;
      }
      unsigned int v266 = ((1 << (8 * v447)) | 2u) >> (8 * v447);
      if (HIWORD(v266))
      {
        unsigned int v265 = *(_DWORD *)&v264[v447];
      }
      else if ((v266 | 0x10) <= 0xFF)
      {
LABEL_559:
        unsigned int v265 = v264[v447];
      }
      else
      {
        unsigned int v265 = *(unsigned __int16 *)&v264[v447];
      }
      unsigned int v267 = (_OWORD *)((unint64_t)&a1[v428] & v67);
      unsigned int v268 = v265 - 16;
      unsigned int v269 = v446;
      if (v265 >= 0x10)
      {
        if (v447 <= 3) {
          uint64_t v270 = v447;
        }
        else {
          uint64_t v270 = 4;
        }
        switch(v270)
        {
          case 1:
            int v271 = *v264;
            goto LABEL_720;
          case 2:
            int v271 = *(unsigned __int16 *)v264;
            goto LABEL_720;
          case 3:
            int v271 = *(unsigned __int16 *)((unint64_t)&a2[v428] & v67) | (*(unsigned __int8 *)(((unint64_t)&a2[v428] & v67)
                                                                                                  + 2) << 16);
            goto LABEL_720;
          case 4:
            int v271 = *(_DWORD *)v264;
LABEL_720:
            if (v447 < 4) {
              v271 |= v268 << (8 * v447);
            }
            unsigned int v265 = v271 + 16;
            break;
          default:
            goto LABEL_723;
        }
      }
      break;
    case 9u:
      unsigned int v172 = a2[v448];
      unsigned int v173 = v172 - 2;
      if (v172 < 2)
      {
        uint64_t v175 = ~v31;
      }
      else
      {
        if (v448 <= 3) {
          uint64_t v174 = v448;
        }
        else {
          uint64_t v174 = 4;
        }
        uint64_t v175 = ~v31;
        switch(v174)
        {
          case 1:
            int v176 = *a2;
            goto LABEL_573;
          case 2:
            int v176 = *(unsigned __int16 *)a2;
            goto LABEL_573;
          case 3:
            int v176 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_573;
          case 4:
            int v176 = *(_DWORD *)a2;
LABEL_573:
            if (v448 < 4) {
              unsigned int v172 = (v176 | (v173 << (8 * v448))) + 2;
            }
            else {
              unsigned int v172 = v176 + 2;
            }
            break;
          default:
            break;
        }
      }
      unint64_t v436 = v38;
      BOOL v272 = v172 == 1;
      uint64_t v273 = v442;
      if (v172 == 1) {
        uint64_t v273 = v441;
      }
      unsigned int v274 = v107;
      (*(void (**)(unsigned __int8 *))(v273 + 32))(a1);
      a1[v448] = v272;
      uint64_t v275 = (unsigned __int8 *)((unint64_t)&v274[v440 + v31] & v175);
      uint64_t v276 = v446;
      if (v446 > 3) {
        goto LABEL_579;
      }
      unsigned int v278 = ((1 << v439) | 2u) >> v439;
      if (HIWORD(v278))
      {
        unsigned int v277 = *(_DWORD *)&v275[v446];
      }
      else if ((v278 | 0x10) <= 0xFF)
      {
LABEL_579:
        unsigned int v277 = v275[v446];
      }
      else
      {
        unsigned int v277 = *(unsigned __int16 *)&v275[v446];
      }
      uint64_t v279 = (_OWORD *)((unint64_t)&a1[v440 + v31] & v175);
      unsigned int v280 = v277 - 16;
      if (v277 >= 0x10)
      {
        if (v446 <= 3) {
          uint64_t v281 = v446;
        }
        else {
          uint64_t v281 = 4;
        }
        switch(v281)
        {
          case 1:
            int v282 = *v275;
            goto LABEL_731;
          case 2:
            int v282 = *(unsigned __int16 *)v275;
            goto LABEL_731;
          case 3:
            int v282 = *(unsigned __int16 *)v275 | (v275[2] << 16);
            goto LABEL_731;
          case 4:
            int v282 = *(_DWORD *)v275;
LABEL_731:
            if (v446 < 4) {
              v282 |= v280 << v439;
            }
            unsigned int v277 = v282 + 16;
            break;
          default:
            break;
        }
      }
      switch(v277)
      {
        case 0u:
          long long v329 = *(_OWORD *)v275;
          *(void *)(((unint64_t)&a1[v440 + v31] & v175) + 0x10) = *((void *)v275 + 2);
          *uint64_t v279 = v329;
          unint64_t v38 = v436;
          unsigned int v330 = v447;
          if (v446 > 3) {
            goto LABEL_738;
          }
          unsigned int v331 = ((1 << v439) | 2u) >> v439;
          if (HIWORD(v331))
          {
            *(_DWORD *)((char *)v279 + v446) = 0;
          }
          else if ((v331 | 0x10) > 0xFF)
          {
            *(_WORD *)((char *)v279 + v446) = 0;
          }
          else
          {
LABEL_738:
            *((unsigned char *)v279 + v446) = 0;
          }
          break;
        case 1u:
          *(void *)uint64_t v279 = *(void *)v275;
          unint64_t v38 = v436;
          unsigned int v330 = v447;
          if (v446 > 3) {
            goto LABEL_798;
          }
          unsigned int v353 = ((1 << v439) | 2u) >> v439;
          if (HIWORD(v353))
          {
            *(_DWORD *)((char *)v279 + v446) = 1;
          }
          else
          {
            if ((v353 | 0x10) > 0xFF)
            {
              __int16 v400 = 1;
              goto LABEL_952;
            }
LABEL_798:
            *((unsigned char *)v279 + v446) = 1;
          }
          break;
        case 2u:
          *uint64_t v279 = *(_OWORD *)v275;
          unint64_t v38 = v436;
          unsigned int v330 = v447;
          if (v446 > 3) {
            goto LABEL_802;
          }
          unsigned int v354 = ((1 << v439) | 2u) >> v439;
          if (HIWORD(v354))
          {
            *(_DWORD *)((char *)v279 + v446) = 2;
          }
          else
          {
            if ((v354 | 0x10) > 0xFF)
            {
              __int16 v400 = 2;
              goto LABEL_952;
            }
LABEL_802:
            *((unsigned char *)v279 + v446) = 2;
          }
          break;
        case 3u:
          *(unsigned char *)uint64_t v279 = *v275;
          unint64_t v38 = v436;
          unsigned int v330 = v447;
          if (v446 > 3) {
            goto LABEL_806;
          }
          unsigned int v355 = ((1 << v439) | 2u) >> v439;
          if (HIWORD(v355))
          {
            *(_DWORD *)((char *)v279 + v446) = 3;
          }
          else
          {
            if ((v355 | 0x10) > 0xFF)
            {
              __int16 v400 = 3;
              goto LABEL_952;
            }
LABEL_806:
            *((unsigned char *)v279 + v446) = 3;
          }
          break;
        case 4u:
          *(unsigned char *)uint64_t v279 = *v275;
          unint64_t v38 = v436;
          unsigned int v330 = v447;
          if (v446 > 3) {
            goto LABEL_810;
          }
          unsigned int v356 = ((1 << v439) | 2u) >> v439;
          if (HIWORD(v356))
          {
            *(_DWORD *)((char *)v279 + v446) = 4;
          }
          else
          {
            if ((v356 | 0x10) > 0xFF)
            {
              __int16 v400 = 4;
              goto LABEL_952;
            }
LABEL_810:
            *((unsigned char *)v279 + v446) = 4;
          }
          break;
        case 5u:
          *(unsigned char *)uint64_t v279 = *v275;
          unint64_t v38 = v436;
          unsigned int v330 = v447;
          if (v446 > 3) {
            goto LABEL_814;
          }
          unsigned int v357 = ((1 << v439) | 2u) >> v439;
          if (HIWORD(v357))
          {
            *(_DWORD *)((char *)v279 + v446) = 5;
          }
          else
          {
            if ((v357 | 0x10) > 0xFF)
            {
              __int16 v400 = 5;
              goto LABEL_952;
            }
LABEL_814:
            *((unsigned char *)v279 + v446) = 5;
          }
          break;
        case 6u:
          *(unsigned char *)uint64_t v279 = *v275;
          unint64_t v38 = v436;
          unsigned int v330 = v447;
          if (v446 > 3) {
            goto LABEL_818;
          }
          unsigned int v358 = ((1 << v439) | 2u) >> v439;
          if (HIWORD(v358))
          {
            *(_DWORD *)((char *)v279 + v446) = 6;
          }
          else
          {
            if ((v358 | 0x10) > 0xFF)
            {
              __int16 v400 = 6;
              goto LABEL_952;
            }
LABEL_818:
            *((unsigned char *)v279 + v446) = 6;
          }
          break;
        case 7u:
          *(unsigned char *)uint64_t v279 = *v275;
          unint64_t v38 = v436;
          unsigned int v330 = v447;
          if (v446 > 3) {
            goto LABEL_822;
          }
          unsigned int v359 = ((1 << v439) | 2u) >> v439;
          if (HIWORD(v359))
          {
            *(_DWORD *)((char *)v279 + v446) = 7;
          }
          else
          {
            if ((v359 | 0x10) > 0xFF)
            {
              __int16 v400 = 7;
              goto LABEL_952;
            }
LABEL_822:
            *((unsigned char *)v279 + v446) = 7;
          }
          break;
        case 8u:
          (*(void (**)(_OWORD *, unsigned __int8 *, uint64_t))(v421 + 32))(v279, v275, v423);
          unsigned int v360 = (void *)(((unint64_t)v279 + v418) & 0xFFFFFFFFFFFFFFF8);
          unsigned int v361 = (void *)((unint64_t)&v275[v418] & 0xFFFFFFFFFFFFFFF8);
          void *v360 = *v361;
          unint64_t v362 = ((unint64_t)v360 + v419) & v430;
          unint64_t v363 = ((unint64_t)v361 + v419) & v430;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v422 + 32))(v362, v363, v424);
          uint64_t v276 = v446;
          unint64_t v364 = v420 + v362;
          unint64_t v106 = v68;
          v364 &= 0xFFFFFFFFFFFFFFF8;
          unint64_t v365 = v420 + v363;
          unint64_t v44 = v437;
          v365 &= 0xFFFFFFFFFFFFFFF8;
          *(void *)unint64_t v364 = *(void *)v365;
          *(_OWORD *)((v364 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v365 + 15) & 0xFFFFFFFFFFFFFFF8);
          unint64_t v366 = (unint64_t)v279 + v409;
          *(unsigned char *)unint64_t v366 = v275[v409];
          *(unsigned char *)(v366 | 1) = *(unsigned char *)((unint64_t)&v275[v409] | 1);
          unint64_t v38 = v436;
          unsigned int v330 = v447;
          if (v446 > 3) {
            goto LABEL_826;
          }
          unsigned int v367 = ((1 << v439) | 2u) >> v439;
          if (HIWORD(v367))
          {
            *(_DWORD *)((char *)v279 + v446) = 8;
          }
          else
          {
            if ((v367 | 0x10) > 0xFF)
            {
              __int16 v400 = 8;
              goto LABEL_952;
            }
LABEL_826:
            *((unsigned char *)v279 + v446) = 8;
          }
          break;
        case 9u:
          *(void *)uint64_t v279 = *(void *)v275;
          unint64_t v38 = v436;
          unsigned int v330 = v447;
          if (v446 > 3) {
            goto LABEL_830;
          }
          unsigned int v368 = ((1 << v439) | 2u) >> v439;
          if (HIWORD(v368))
          {
            *(_DWORD *)((char *)v279 + v446) = 9;
          }
          else
          {
            if ((v368 | 0x10) > 0xFF)
            {
              __int16 v400 = 9;
              goto LABEL_952;
            }
LABEL_830:
            *((unsigned char *)v279 + v446) = 9;
          }
          break;
        case 0xAu:
          *(unsigned char *)uint64_t v279 = *v275;
          unint64_t v38 = v436;
          unsigned int v330 = v447;
          if (v446 > 3) {
            goto LABEL_834;
          }
          unsigned int v369 = ((1 << v439) | 2u) >> v439;
          if (HIWORD(v369))
          {
            *(_DWORD *)((char *)v279 + v446) = 10;
          }
          else
          {
            if ((v369 | 0x10) > 0xFF)
            {
              __int16 v400 = 10;
              goto LABEL_952;
            }
LABEL_834:
            *((unsigned char *)v279 + v446) = 10;
          }
          break;
        case 0xBu:
          *(_WORD *)uint64_t v279 = *(_WORD *)v275;
          unint64_t v38 = v436;
          unsigned int v330 = v447;
          if (v446 > 3) {
            goto LABEL_838;
          }
          unsigned int v370 = ((1 << v439) | 2u) >> v439;
          if (HIWORD(v370))
          {
            *(_DWORD *)((char *)v279 + v446) = 11;
          }
          else
          {
            if ((v370 | 0x10) > 0xFF)
            {
              __int16 v400 = 11;
              goto LABEL_952;
            }
LABEL_838:
            *((unsigned char *)v279 + v446) = 11;
          }
          break;
        case 0xCu:
          long long v371 = *(_OWORD *)v275;
          *(unsigned char *)(((unint64_t)&a1[v440 + v31] & v175) + 0x10) = v275[16];
          *uint64_t v279 = v371;
          unint64_t v38 = v436;
          unsigned int v330 = v447;
          if (v446 > 3) {
            goto LABEL_842;
          }
          unsigned int v372 = ((1 << v439) | 2u) >> v439;
          if (HIWORD(v372))
          {
            *(_DWORD *)((char *)v279 + v446) = 12;
          }
          else
          {
            if ((v372 | 0x10) > 0xFF)
            {
              __int16 v400 = 12;
              goto LABEL_952;
            }
LABEL_842:
            *((unsigned char *)v279 + v446) = 12;
          }
          break;
        case 0xDu:
          long long v373 = *(_OWORD *)v275;
          *(void *)(((unint64_t)&a1[v440 + v31] & v175) + 0x10) = *((void *)v275 + 2);
          *uint64_t v279 = v373;
          unint64_t v38 = v436;
          unsigned int v330 = v447;
          if (v446 > 3) {
            goto LABEL_846;
          }
          unsigned int v374 = ((1 << v439) | 2u) >> v439;
          if (HIWORD(v374))
          {
            *(_DWORD *)((char *)v279 + v446) = 13;
          }
          else
          {
            if ((v374 | 0x10) > 0xFF)
            {
              __int16 v400 = 13;
              goto LABEL_952;
            }
LABEL_846:
            *((unsigned char *)v279 + v446) = 13;
          }
          break;
        case 0xEu:
          long long v375 = *(_OWORD *)v275;
          long long v376 = *((_OWORD *)v275 + 1);
          long long v377 = *((_OWORD *)v275 + 2);
          *(_OWORD *)(((unint64_t)&a1[v440 + v31] & v175) + 0x29) = *(_OWORD *)(v275 + 41);
          *(_OWORD *)(((unint64_t)&a1[v440 + v31] & v175) + 0x10) = v376;
          *(_OWORD *)(((unint64_t)&a1[v440 + v31] & v175) + 0x20) = v377;
          *uint64_t v279 = v375;
          unint64_t v38 = v436;
          unsigned int v330 = v447;
          if (v446 > 3) {
            goto LABEL_850;
          }
          unsigned int v378 = ((1 << v439) | 2u) >> v439;
          if (HIWORD(v378))
          {
            *(_DWORD *)((char *)v279 + v446) = 14;
          }
          else
          {
            if ((v378 | 0x10) > 0xFF)
            {
              __int16 v400 = 14;
              goto LABEL_952;
            }
LABEL_850:
            *((unsigned char *)v279 + v446) = 14;
          }
          break;
        case 0xFu:
          *(unsigned char *)uint64_t v279 = *v275;
          unint64_t v38 = v436;
          unsigned int v330 = v447;
          if (v446 > 3) {
            goto LABEL_854;
          }
          unsigned int v379 = ((1 << v439) | 2u) >> v439;
          if (HIWORD(v379))
          {
            *(_DWORD *)((char *)v279 + v446) = 15;
          }
          else if ((v379 | 0x10) > 0xFF)
          {
            __int16 v400 = 15;
LABEL_952:
            *(_WORD *)((char *)v279 + v276) = v400;
          }
          else
          {
LABEL_854:
            *((unsigned char *)v279 + v446) = 15;
          }
          break;
        default:
          if (v446 > 3) {
            goto LABEL_873;
          }
          unsigned int v394 = ((1 << v439) | 2u) >> v439;
          unsigned int v395 = v394 | 0x10;
          BOOL v23 = HIWORD(v394) == 0;
          uint64_t v396 = 2;
          if (!v23) {
            uint64_t v396 = 4;
          }
          if (v395 <= 0xFF) {
LABEL_873:
          }
            uint64_t v396 = 1;
          memcpy(v279, v275, v396 + v446);
          LODWORD(v276) = v446;
          unsigned int v330 = v447;
          unint64_t v38 = v436;
          break;
      }
      uint64_t v2 = a1;
      if (v330 > 3) {
        goto LABEL_957;
      }
      unsigned int v401 = ((1 << (8 * v330)) | 2u) >> (8 * v330);
      unsigned int v402 = v401 | 0x10;
      BOOL v23 = HIWORD(v401) == 0;
      uint64_t v403 = 2;
      if (!v23) {
        uint64_t v403 = 4;
      }
      if (v402 <= 0xFF) {
LABEL_957:
      }
        uint64_t v403 = 1;
      unint64_t v139 = v449 + v403;
      if (v139 <= v450) {
        unint64_t v139 = v450;
      }
      if (v276 <= 3)
      {
        unsigned int v404 = ((1 << v439) | 2u) >> v439;
        unsigned int v405 = v404 | 0x10;
        BOOL v23 = HIWORD(v404) == 0;
        uint64_t v143 = 2;
        if (!v23) {
          uint64_t v143 = 4;
        }
        if (v405 > 0xFF)
        {
          char v140 = 9;
          goto LABEL_967;
        }
      }
      char v140 = 9;
      goto LABEL_966;
    case 0xAu:
      unsigned int v177 = a2[v448];
      unsigned int v178 = v177 - 2;
      if (v177 >= 2)
      {
        if (v448 <= 3) {
          uint64_t v179 = v448;
        }
        else {
          uint64_t v179 = 4;
        }
        switch(v179)
        {
          case 1:
            int v180 = *a2;
            goto LABEL_593;
          case 2:
            int v180 = *(unsigned __int16 *)a2;
            goto LABEL_593;
          case 3:
            int v180 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_593;
          case 4:
            int v180 = *(_DWORD *)a2;
LABEL_593:
            if (v448 < 4) {
              unsigned int v177 = (v180 | (v178 << (8 * v448))) + 2;
            }
            else {
              unsigned int v177 = v180 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v283 = v177 == 1;
      uint64_t v284 = v442;
      if (v177 == 1) {
        uint64_t v284 = v441;
      }
      (*(void (**)(unsigned __int8 *))(v284 + 32))(a1);
      a1[v448] = v283;
      unint64_t v285 = (unint64_t)&a2[v440 + 7] & 0xFFFFFFFFFFFFFFF8;
      char v286 = *(unsigned char *)(v285 + 8);
      unint64_t v287 = (unint64_t)&a1[v440 + 7] & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v287 = *(void *)v285;
      *(unsigned char *)(v287 + 8) = v286;
      if (v447 > 3) {
        goto LABEL_602;
      }
      unsigned int v288 = ((1 << (8 * v447)) | 2u) >> (8 * v447);
      unsigned int v289 = v288 | 0x10;
      BOOL v23 = HIWORD(v288) == 0;
      uint64_t v290 = 2;
      if (!v23) {
        uint64_t v290 = 4;
      }
      if (v289 <= 0xFF) {
LABEL_602:
      }
        uint64_t v290 = 1;
      unint64_t v139 = v449 + v290;
      if (v139 <= v450) {
        unint64_t v139 = v450;
      }
      if (v446 <= 3)
      {
        unsigned int v291 = ((1 << v439) | 2u) >> v439;
        unsigned int v292 = v291 | 0x10;
        BOOL v23 = HIWORD(v291) == 0;
        uint64_t v143 = 2;
        if (!v23) {
          uint64_t v143 = 4;
        }
        if (v292 > 0xFF)
        {
          char v140 = 10;
          goto LABEL_967;
        }
      }
      char v140 = 10;
      goto LABEL_966;
    case 0xBu:
      unsigned int v129 = a2[v448];
      unsigned int v130 = v129 - 2;
      if (v129 >= 2)
      {
        if (v448 <= 3) {
          uint64_t v131 = v448;
        }
        else {
          uint64_t v131 = 4;
        }
        switch(v131)
        {
          case 1:
            int v132 = *a2;
            goto LABEL_420;
          case 2:
            int v132 = *(unsigned __int16 *)a2;
            goto LABEL_420;
          case 3:
            int v132 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_420;
          case 4:
            int v132 = *(_DWORD *)a2;
LABEL_420:
            if (v448 < 4) {
              unsigned int v129 = (v132 | (v130 << (8 * v448))) + 2;
            }
            else {
              unsigned int v129 = v132 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v211 = v129 == 1;
      uint64_t v212 = v442;
      if (v129 == 1) {
        uint64_t v212 = v441;
      }
      (*(void (**)(unsigned __int8 *))(v212 + 32))(a1);
      a1[v448] = v211;
      *(_OWORD *)((unint64_t)&a1[v440 + 7] & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((unint64_t)&a2[v440 + 7] & 0xFFFFFFFFFFFFFFF8);
      if (v447 > 3) {
        goto LABEL_429;
      }
      unsigned int v213 = ((1 << (8 * v447)) | 2u) >> (8 * v447);
      unsigned int v214 = v213 | 0x10;
      BOOL v23 = HIWORD(v213) == 0;
      uint64_t v215 = 2;
      if (!v23) {
        uint64_t v215 = 4;
      }
      if (v214 <= 0xFF) {
LABEL_429:
      }
        uint64_t v215 = 1;
      unint64_t v139 = v449 + v215;
      if (v139 <= v450) {
        unint64_t v139 = v450;
      }
      if (v446 <= 3)
      {
        unsigned int v216 = ((1 << v439) | 2u) >> v439;
        unsigned int v217 = v216 | 0x10;
        BOOL v23 = HIWORD(v216) == 0;
        uint64_t v143 = 2;
        if (!v23) {
          uint64_t v143 = 4;
        }
        if (v217 > 0xFF)
        {
          char v140 = 11;
          goto LABEL_967;
        }
      }
      char v140 = 11;
      goto LABEL_966;
    case 0xCu:
      unsigned int v181 = a2[v448];
      unsigned int v182 = v181 - 2;
      if (v181 >= 2)
      {
        if (v448 <= 3) {
          uint64_t v183 = v448;
        }
        else {
          uint64_t v183 = 4;
        }
        switch(v183)
        {
          case 1:
            int v184 = *a2;
            goto LABEL_614;
          case 2:
            int v184 = *(unsigned __int16 *)a2;
            goto LABEL_614;
          case 3:
            int v184 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_614;
          case 4:
            int v184 = *(_DWORD *)a2;
LABEL_614:
            if (v448 < 4) {
              unsigned int v181 = (v184 | (v182 << (8 * v448))) + 2;
            }
            else {
              unsigned int v181 = v184 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v293 = v181 == 1;
      uint64_t v294 = v442;
      if (v181 == 1) {
        uint64_t v294 = v441;
      }
      (*(void (**)(unsigned __int8 *))(v294 + 32))(a1);
      a1[v448] = v293;
      a1[v440] = a2[v440];
      if (v447 > 3) {
        goto LABEL_623;
      }
      unsigned int v295 = ((1 << (8 * v447)) | 2u) >> (8 * v447);
      unsigned int v296 = v295 | 0x10;
      BOOL v23 = HIWORD(v295) == 0;
      uint64_t v297 = 2;
      if (!v23) {
        uint64_t v297 = 4;
      }
      if (v296 <= 0xFF) {
LABEL_623:
      }
        uint64_t v297 = 1;
      unint64_t v139 = v449 + v297;
      if (v139 <= v450) {
        unint64_t v139 = v450;
      }
      if (v446 <= 3)
      {
        unsigned int v298 = ((1 << v439) | 2u) >> v439;
        unsigned int v299 = v298 | 0x10;
        BOOL v23 = HIWORD(v298) == 0;
        uint64_t v143 = 2;
        if (!v23) {
          uint64_t v143 = 4;
        }
        if (v299 > 0xFF)
        {
          char v140 = 12;
          goto LABEL_967;
        }
      }
      char v140 = 12;
      goto LABEL_966;
    case 0xDu:
      unsigned int v185 = a2[v448];
      unsigned int v186 = v185 - 2;
      if (v185 >= 2)
      {
        if (v448 <= 3) {
          uint64_t v187 = v448;
        }
        else {
          uint64_t v187 = 4;
        }
        switch(v187)
        {
          case 1:
            int v188 = *a2;
            goto LABEL_635;
          case 2:
            int v188 = *(unsigned __int16 *)a2;
            goto LABEL_635;
          case 3:
            int v188 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_635;
          case 4:
            int v188 = *(_DWORD *)a2;
LABEL_635:
            if (v448 < 4) {
              unsigned int v185 = (v188 | (v186 << (8 * v448))) + 2;
            }
            else {
              unsigned int v185 = v188 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v300 = v185 == 1;
      uint64_t v301 = v442;
      if (v185 == 1) {
        uint64_t v301 = v441;
      }
      (*(void (**)(unsigned __int8 *))(v301 + 32))(a1);
      a1[v448] = v300;
      unsigned int v302 = (void *)((unint64_t)&a1[v440 + 7] & 0xFFFFFFFFFFFFFFF8);
      long long v303 = (void *)((unint64_t)&a2[v440 + 7] & 0xFFFFFFFFFFFFFFF8);
      void *v302 = *v303;
      *(void *)(((unint64_t)v302 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v303 + 15) & 0xFFFFFFFFFFFFFFF8);
      if (v447 > 3) {
        goto LABEL_644;
      }
      unsigned int v304 = ((1 << (8 * v447)) | 2u) >> (8 * v447);
      unsigned int v305 = v304 | 0x10;
      BOOL v23 = HIWORD(v304) == 0;
      uint64_t v306 = 2;
      if (!v23) {
        uint64_t v306 = 4;
      }
      if (v305 <= 0xFF) {
LABEL_644:
      }
        uint64_t v306 = 1;
      unint64_t v139 = v449 + v306;
      if (v139 <= v450) {
        unint64_t v139 = v450;
      }
      if (v446 <= 3)
      {
        unsigned int v307 = ((1 << v439) | 2u) >> v439;
        unsigned int v308 = v307 | 0x10;
        BOOL v23 = HIWORD(v307) == 0;
        uint64_t v143 = 2;
        if (!v23) {
          uint64_t v143 = 4;
        }
        if (v308 > 0xFF)
        {
          char v140 = 13;
          goto LABEL_967;
        }
      }
      char v140 = 13;
      goto LABEL_966;
    default:
      unsigned int v125 = a2[v448];
      unsigned int v126 = v125 - 2;
      if (v125 >= 2)
      {
        if (v448 <= 3) {
          uint64_t v127 = v448;
        }
        else {
          uint64_t v127 = 4;
        }
        switch(v127)
        {
          case 1:
            int v128 = *a2;
            goto LABEL_399;
          case 2:
            int v128 = *(unsigned __int16 *)a2;
            goto LABEL_399;
          case 3:
            int v128 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_399;
          case 4:
            int v128 = *(_DWORD *)a2;
LABEL_399:
            if (v448 < 4) {
              unsigned int v125 = (v128 | (v126 << (8 * v448))) + 2;
            }
            else {
              unsigned int v125 = v128 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v204 = v125 == 1;
      uint64_t v205 = v442;
      if (v125 == 1) {
        uint64_t v205 = v441;
      }
      (*(void (**)(unsigned __int8 *))(v205 + 32))(a1);
      a1[v448] = v204;
      a1[v440] = a2[v440];
      if (v447 > 3) {
        goto LABEL_408;
      }
      unsigned int v206 = ((1 << (8 * v447)) | 2u) >> (8 * v447);
      unsigned int v207 = v206 | 0x10;
      BOOL v23 = HIWORD(v206) == 0;
      uint64_t v208 = 2;
      if (!v23) {
        uint64_t v208 = 4;
      }
      if (v207 <= 0xFF) {
LABEL_408:
      }
        uint64_t v208 = 1;
      unint64_t v139 = v449 + v208;
      if (v139 <= v450) {
        unint64_t v139 = v450;
      }
      if (v446 <= 3)
      {
        unsigned int v209 = ((1 << v439) | 2u) >> v439;
        unsigned int v210 = v209 | 0x10;
        BOOL v23 = HIWORD(v209) == 0;
        uint64_t v143 = 2;
        if (!v23) {
          uint64_t v143 = 4;
        }
        if (v210 > 0xFF)
        {
          char v140 = 0;
          goto LABEL_967;
        }
      }
      char v140 = 0;
      goto LABEL_966;
  }
LABEL_723:
  switch(v265)
  {
    case 0u:
      long long v324 = *(_OWORD *)v264;
      *(void *)(((unint64_t)&a1[v428] & v67) + 0x10) = *(void *)(((unint64_t)&a2[v428] & v67) + 0x10);
      *unsigned int v267 = v324;
      LODWORD(v325) = v447;
      unint64_t v38 = v261;
      uint64_t v326 = v449;
      if (v447 > 3) {
        goto LABEL_727;
      }
      unsigned int v327 = ((1 << (8 * v447)) | 2u) >> (8 * v447);
      unsigned int v328 = v327 | 0x10;
      if (HIWORD(v327))
      {
        *(_DWORD *)((char *)v267 + v447) = 0;
      }
      else
      {
        if (v328 <= 0xFF)
        {
LABEL_727:
          *((unsigned char *)v267 + v447) = 0;
          goto LABEL_864;
        }
        *(_WORD *)((char *)v267 + v447) = 0;
      }
      goto LABEL_926;
    case 1u:
      *(void *)unsigned int v267 = *(void *)v264;
      uint64_t v325 = v447;
      unint64_t v38 = v261;
      uint64_t v326 = v449;
      if (v447 > 3) {
        goto LABEL_742;
      }
      __int16 v332 = 1;
      unsigned int v333 = ((1 << (8 * v447)) | 2u) >> (8 * v447);
      unsigned int v328 = v333 | 0x10;
      if (HIWORD(v333))
      {
        *(_DWORD *)((char *)v267 + v447) = 1;
        goto LABEL_926;
      }
      if (v328 > 0xFF) {
        goto LABEL_925;
      }
LABEL_742:
      char v334 = 1;
      goto LABEL_863;
    case 2u:
      *unsigned int v267 = *(_OWORD *)v264;
      uint64_t v325 = v447;
      unint64_t v38 = v261;
      uint64_t v326 = v449;
      if (v447 > 3) {
        goto LABEL_746;
      }
      unsigned int v335 = ((1 << (8 * v447)) | 2u) >> (8 * v447);
      unsigned int v328 = v335 | 0x10;
      if (HIWORD(v335))
      {
        *(_DWORD *)((char *)v267 + v447) = 2;
        goto LABEL_926;
      }
      if (v328 <= 0xFF)
      {
LABEL_746:
        char v334 = 2;
        goto LABEL_863;
      }
      __int16 v332 = 2;
      goto LABEL_925;
    case 3u:
      *(unsigned char *)unsigned int v267 = *v264;
      uint64_t v325 = v447;
      unint64_t v38 = v261;
      uint64_t v326 = v449;
      if (v447 > 3) {
        goto LABEL_750;
      }
      unsigned int v336 = ((1 << (8 * v447)) | 2u) >> (8 * v447);
      unsigned int v328 = v336 | 0x10;
      if (HIWORD(v336))
      {
        *(_DWORD *)((char *)v267 + v447) = 3;
        goto LABEL_926;
      }
      if (v328 <= 0xFF)
      {
LABEL_750:
        char v334 = 3;
        goto LABEL_863;
      }
      __int16 v332 = 3;
      goto LABEL_925;
    case 4u:
      *(unsigned char *)unsigned int v267 = *v264;
      uint64_t v325 = v447;
      unint64_t v38 = v261;
      uint64_t v326 = v449;
      if (v447 > 3) {
        goto LABEL_754;
      }
      unsigned int v337 = ((1 << (8 * v447)) | 2u) >> (8 * v447);
      unsigned int v328 = v337 | 0x10;
      if (HIWORD(v337))
      {
        *(_DWORD *)((char *)v267 + v447) = 4;
        goto LABEL_926;
      }
      if (v328 <= 0xFF)
      {
LABEL_754:
        char v334 = 4;
        goto LABEL_863;
      }
      __int16 v332 = 4;
      goto LABEL_925;
    case 5u:
      *(unsigned char *)unsigned int v267 = *v264;
      uint64_t v325 = v447;
      unint64_t v38 = v261;
      uint64_t v326 = v449;
      if (v447 > 3) {
        goto LABEL_758;
      }
      unsigned int v338 = ((1 << (8 * v447)) | 2u) >> (8 * v447);
      unsigned int v328 = v338 | 0x10;
      if (HIWORD(v338))
      {
        *(_DWORD *)((char *)v267 + v447) = 5;
        goto LABEL_926;
      }
      if (v328 <= 0xFF)
      {
LABEL_758:
        char v334 = 5;
        goto LABEL_863;
      }
      __int16 v332 = 5;
      goto LABEL_925;
    case 6u:
      *(unsigned char *)unsigned int v267 = *v264;
      uint64_t v325 = v447;
      unint64_t v38 = v261;
      uint64_t v326 = v449;
      if (v447 > 3) {
        goto LABEL_762;
      }
      unsigned int v339 = ((1 << (8 * v447)) | 2u) >> (8 * v447);
      unsigned int v328 = v339 | 0x10;
      if (HIWORD(v339))
      {
        *(_DWORD *)((char *)v267 + v447) = 6;
        goto LABEL_926;
      }
      if (v328 <= 0xFF)
      {
LABEL_762:
        char v334 = 6;
        goto LABEL_863;
      }
      __int16 v332 = 6;
      goto LABEL_925;
    case 7u:
      *(unsigned char *)unsigned int v267 = *v264;
      uint64_t v325 = v447;
      unint64_t v38 = v261;
      uint64_t v326 = v449;
      if (v447 > 3) {
        goto LABEL_766;
      }
      unsigned int v340 = ((1 << (8 * v447)) | 2u) >> (8 * v447);
      unsigned int v328 = v340 | 0x10;
      if (HIWORD(v340))
      {
        *(_DWORD *)((char *)v267 + v447) = 7;
        goto LABEL_926;
      }
      if (v328 <= 0xFF)
      {
LABEL_766:
        char v334 = 7;
        goto LABEL_863;
      }
      __int16 v332 = 7;
      goto LABEL_925;
    case 8u:
      (*(void (**)(_OWORD *, unsigned __int8 *, uint64_t))(v414 + 32))(v267, v264, v416);
      unint64_t v383 = (void *)(((unint64_t)v267 + v411) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v384 = (void *)((unint64_t)&v264[v411] & 0xFFFFFFFFFFFFFFF8);
      *unint64_t v383 = *v384;
      unint64_t v385 = ((unint64_t)v383 + v412) & v410;
      unint64_t v386 = v106;
      unint64_t v387 = ((unint64_t)v384 + v412) & v410;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v415 + 32))(v385, v387, v417);
      unsigned int v269 = v446;
      uint64_t v388 = (void *)((v413 + v385) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v389 = v413 + v387;
      unint64_t v106 = v386;
      v389 &= 0xFFFFFFFFFFFFFFF8;
      *uint64_t v388 = *(void *)v389;
      *(_OWORD *)(((unint64_t)v388 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v389 + 15) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v390 = (unint64_t)v267 + v408;
      *(unsigned char *)unint64_t v390 = v264[v408];
      *(unsigned char *)(v390 | 1) = *(unsigned char *)((unint64_t)&v264[v408] | 1);
      uint64_t v325 = v447;
      unint64_t v38 = v261;
      uint64_t v326 = v449;
      if (v447 > 3) {
        goto LABEL_862;
      }
      unsigned int v397 = ((1 << (8 * v447)) | 2u) >> (8 * v447);
      unsigned int v328 = v397 | 0x10;
      if (HIWORD(v397))
      {
        *(_DWORD *)((char *)v267 + v447) = 8;
        goto LABEL_926;
      }
      if (v328 <= 0xFF)
      {
LABEL_862:
        char v334 = 8;
        goto LABEL_863;
      }
      __int16 v332 = 8;
      goto LABEL_925;
    case 9u:
      *(void *)unsigned int v267 = *(void *)v264;
      uint64_t v325 = v447;
      unint64_t v38 = v261;
      uint64_t v326 = v449;
      if (v447 > 3) {
        goto LABEL_770;
      }
      unsigned int v341 = ((1 << (8 * v447)) | 2u) >> (8 * v447);
      unsigned int v328 = v341 | 0x10;
      if (HIWORD(v341))
      {
        *(_DWORD *)((char *)v267 + v447) = 9;
        goto LABEL_926;
      }
      if (v328 <= 0xFF)
      {
LABEL_770:
        char v334 = 9;
        goto LABEL_863;
      }
      __int16 v332 = 9;
      goto LABEL_925;
    case 0xAu:
      *(unsigned char *)unsigned int v267 = *v264;
      uint64_t v325 = v447;
      unint64_t v38 = v261;
      uint64_t v326 = v449;
      if (v447 > 3) {
        goto LABEL_774;
      }
      unsigned int v342 = ((1 << (8 * v447)) | 2u) >> (8 * v447);
      unsigned int v328 = v342 | 0x10;
      if (HIWORD(v342))
      {
        *(_DWORD *)((char *)v267 + v447) = 10;
        goto LABEL_926;
      }
      if (v328 <= 0xFF)
      {
LABEL_774:
        char v334 = 10;
        goto LABEL_863;
      }
      __int16 v332 = 10;
      goto LABEL_925;
    case 0xBu:
      *(_WORD *)unsigned int v267 = *(_WORD *)v264;
      uint64_t v325 = v447;
      unint64_t v38 = v261;
      uint64_t v326 = v449;
      if (v447 > 3) {
        goto LABEL_778;
      }
      unsigned int v343 = ((1 << (8 * v447)) | 2u) >> (8 * v447);
      unsigned int v328 = v343 | 0x10;
      if (HIWORD(v343))
      {
        *(_DWORD *)((char *)v267 + v447) = 11;
        goto LABEL_926;
      }
      if (v328 <= 0xFF)
      {
LABEL_778:
        char v334 = 11;
        goto LABEL_863;
      }
      __int16 v332 = 11;
      goto LABEL_925;
    case 0xCu:
      long long v344 = *(_OWORD *)v264;
      *(unsigned char *)(((unint64_t)&a1[v428] & v67) + 0x10) = *(unsigned char *)(((unint64_t)&a2[v428] & v67) + 0x10);
      *unsigned int v267 = v344;
      uint64_t v325 = v447;
      unint64_t v38 = v261;
      uint64_t v326 = v449;
      if (v447 > 3) {
        goto LABEL_782;
      }
      unsigned int v345 = ((1 << (8 * v447)) | 2u) >> (8 * v447);
      unsigned int v328 = v345 | 0x10;
      if (HIWORD(v345))
      {
        *(_DWORD *)((char *)v267 + v447) = 12;
        goto LABEL_926;
      }
      if (v328 <= 0xFF)
      {
LABEL_782:
        char v334 = 12;
        goto LABEL_863;
      }
      __int16 v332 = 12;
      goto LABEL_925;
    case 0xDu:
      long long v346 = *(_OWORD *)v264;
      *(void *)(((unint64_t)&a1[v428] & v67) + 0x10) = *(void *)(((unint64_t)&a2[v428] & v67) + 0x10);
      *unsigned int v267 = v346;
      uint64_t v325 = v447;
      unint64_t v38 = v261;
      uint64_t v326 = v449;
      if (v447 > 3) {
        goto LABEL_786;
      }
      unsigned int v347 = ((1 << (8 * v447)) | 2u) >> (8 * v447);
      unsigned int v328 = v347 | 0x10;
      if (HIWORD(v347))
      {
        *(_DWORD *)((char *)v267 + v447) = 13;
        goto LABEL_926;
      }
      if (v328 <= 0xFF)
      {
LABEL_786:
        char v334 = 13;
        goto LABEL_863;
      }
      __int16 v332 = 13;
      goto LABEL_925;
    case 0xEu:
      long long v348 = *(_OWORD *)v264;
      long long v349 = *(_OWORD *)(((unint64_t)&a2[v428] & v67) + 0x10);
      long long v350 = *(_OWORD *)(((unint64_t)&a2[v428] & v67) + 0x20);
      *(_OWORD *)(((unint64_t)&a1[v428] & v67) + 0x29) = *(_OWORD *)(((unint64_t)&a2[v428] & v67) + 0x29);
      *(_OWORD *)(((unint64_t)&a1[v428] & v67) + 0x10) = v349;
      *(_OWORD *)(((unint64_t)&a1[v428] & v67) + 0x20) = v350;
      *unsigned int v267 = v348;
      uint64_t v325 = v447;
      unint64_t v38 = v261;
      uint64_t v326 = v449;
      if (v447 > 3) {
        goto LABEL_790;
      }
      unsigned int v351 = ((1 << (8 * v447)) | 2u) >> (8 * v447);
      unsigned int v328 = v351 | 0x10;
      if (HIWORD(v351))
      {
        *(_DWORD *)((char *)v267 + v447) = 14;
        goto LABEL_926;
      }
      if (v328 <= 0xFF)
      {
LABEL_790:
        char v334 = 14;
        goto LABEL_863;
      }
      __int16 v332 = 14;
      goto LABEL_925;
    case 0xFu:
      *(unsigned char *)unsigned int v267 = *v264;
      uint64_t v325 = v447;
      unint64_t v38 = v261;
      uint64_t v326 = v449;
      if (v447 > 3) {
        goto LABEL_794;
      }
      unsigned int v352 = ((1 << (8 * v447)) | 2u) >> (8 * v447);
      unsigned int v328 = v352 | 0x10;
      if (HIWORD(v352))
      {
        *(_DWORD *)((char *)v267 + v447) = 15;
LABEL_926:
        BOOL v23 = HIWORD(v328) == 0;
        uint64_t v393 = 2;
        if (!v23) {
          uint64_t v393 = 4;
        }
        uint64_t v2 = a1;
        goto LABEL_929;
      }
      if (v328 > 0xFF)
      {
        __int16 v332 = 15;
LABEL_925:
        *(_WORD *)((char *)v267 + v325) = v332;
        goto LABEL_926;
      }
LABEL_794:
      char v334 = 15;
LABEL_863:
      *((unsigned char *)v267 + v325) = v334;
LABEL_864:
      uint64_t v2 = a1;
      if (v325 > 3) {
        goto LABEL_868;
      }
      unsigned int v391 = ((1 << (8 * v325)) | 2u) >> (8 * v325);
      unsigned int v392 = v391 | 0x10;
      BOOL v23 = HIWORD(v391) == 0;
      uint64_t v393 = 2;
      if (!v23) {
        uint64_t v393 = 4;
      }
      if (v392 <= 0xFF) {
LABEL_868:
      }
        uint64_t v393 = 1;
LABEL_929:
      unint64_t v139 = v326 + v393;
      if (v139 <= v450) {
        unint64_t v139 = v450;
      }
      if (v269 > 3) {
        goto LABEL_936;
      }
      unsigned int v398 = ((1 << v439) | 2u) >> v439;
      unsigned int v399 = v398 | 0x10;
      BOOL v23 = HIWORD(v398) == 0;
      uint64_t v143 = 2;
      if (!v23) {
        uint64_t v143 = 4;
      }
      if (v399 <= 0xFF)
      {
LABEL_936:
        char v140 = 8;
LABEL_966:
        uint64_t v143 = 1;
        goto LABEL_967;
      }
      char v140 = 8;
LABEL_967:
      unint64_t v406 = v106 + v143;
      if (v406 > v139) {
        unint64_t v139 = v406;
      }
      if (v36 > v139) {
        unint64_t v139 = v36;
      }
      if (v52 > v139) {
        unint64_t v139 = v52;
      }
      if (v44 > v139) {
        unint64_t v139 = v44;
      }
      if (v38 > v139) {
        unint64_t v139 = v38;
      }
      v2[v139] = v140;
      return v2;
    default:
      if (v447 > 3) {
        goto LABEL_859;
      }
      unsigned int v380 = ((1 << (8 * v447)) | 2u) >> (8 * v447);
      unsigned int v381 = v380 | 0x10;
      BOOL v23 = HIWORD(v380) == 0;
      uint64_t v382 = 2;
      if (!v23) {
        uint64_t v382 = 4;
      }
      if (v381 <= 0xFF) {
LABEL_859:
      }
        uint64_t v382 = 1;
      memcpy(v267, v264, v382 + v447);
      unsigned int v269 = v446;
      LODWORD(v325) = v447;
      unint64_t v38 = v261;
      uint64_t v326 = v449;
      goto LABEL_864;
  }
}

uint64_t sub_1001435F8(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v3 = *(void *)(v2 + 64);
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v5 = *(void *)(v4 + 64);
  if (v5 <= v3) {
    unint64_t v6 = v3;
  }
  else {
    unint64_t v6 = *(void *)(v4 + 64);
  }
  unint64_t v7 = v6 + 1;
  unsigned __int8 v8 = *(_DWORD *)(v4 + 80);
  unint64_t v9 = v5 + ((v3 + v8) & ~(unint64_t)v8);
  unint64_t v61 = v6 + 2;
  if (v9 + 1 > v6 + 2) {
    unint64_t v10 = v9 + 1;
  }
  else {
    unint64_t v10 = v6 + 2;
  }
  if (v7 > v10) {
    unint64_t v10 = v6 + 1;
  }
  unint64_t v11 = v6 & 0xFFFFFFFFFFFFFFF8;
  if ((v6 & 0xFFFFFFFFFFFFFFF8) + 16 > v10) {
    unint64_t v10 = (v6 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  uint64_t v12 = *(unsigned __int8 *)(v2 + 80) | v8;
  unint64_t v13 = ((v7 + v12) & ~v12) + v7;
  if (v13 > v10) {
    unint64_t v10 = v13;
  }
  unint64_t v59 = v10;
  uint64_t v14 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  int v15 = *(_DWORD *)(v14 + 80) & 0xF8;
  uint64_t v16 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v17 = *(unsigned __int8 *)(v16 + 80);
  unint64_t v58 = (v7 + (v15 | v17 | 7)) & ~(unint64_t)(v15 | v17 | 7);
  unint64_t v18 = ((((*(void *)(v16 + 64) + ((v17 + ((*(void *)(v14 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v17) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 18;
  if (v18 <= 0x39) {
    uint64_t v19 = 57;
  }
  else {
    uint64_t v19 = v18;
  }
  uint64_t v20 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  int v21 = *(_DWORD *)(v20 + 80) & 0xF8;
  uint64_t v22 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v23 = *(unsigned __int8 *)(v22 + 80);
  uint64_t v24 = v21 | v23 | 7;
  unint64_t v25 = ((((*(void *)(v22 + 64) + ((v23 + ((*(void *)(v20 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v23) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 18;
  if (v25 <= 0x39) {
    unint64_t v25 = 57;
  }
  unint64_t v26 = (v11 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (v19 > 3) {
    goto LABEL_22;
  }
  unsigned int v27 = ((1 << (8 * v19)) | 2u) >> (8 * v19);
  uint64_t v28 = 4;
  if (!HIWORD(v27)) {
    uint64_t v28 = 2;
  }
  if ((v27 | 0x10) <= 0xFF) {
LABEL_22:
  }
    uint64_t v28 = 1;
  unint64_t v29 = (v7 + v24) & ~v24;
  unint64_t v30 = v11 + 17;
  unint64_t v31 = v11 + 24;
  unint64_t v32 = v26 + 8;
  unint64_t v33 = v19 + v58 + v28;
  if (v33 <= v59) {
    unint64_t v33 = v59;
  }
  if (v25 > 3) {
    goto LABEL_29;
  }
  unsigned int v34 = ((1 << (8 * v25)) | 2u) >> (8 * v25);
  unsigned int v35 = v34 | 0x10;
  BOOL v36 = HIWORD(v34) == 0;
  uint64_t v37 = 2;
  if (!v36) {
    uint64_t v37 = 4;
  }
  if (v35 <= 0xFF) {
LABEL_29:
  }
    uint64_t v37 = 1;
  unint64_t v38 = v25 + v29;
  unint64_t v39 = v38 + v37;
  if (v39 > v33) {
    unint64_t v33 = v39;
  }
  if (v30 > v33) {
    unint64_t v33 = v11 + 17;
  }
  if (v31 > v33) {
    unint64_t v33 = v11 + 24;
  }
  if (v61 > v33) {
    unint64_t v33 = v61;
  }
  if (v32 > v33) {
    unint64_t v33 = v26 + 8;
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF3) {
    goto LABEL_61;
  }
  unint64_t v40 = v33 + 1;
  char v41 = 8 * v40;
  if (v40 <= 3)
  {
    unsigned int v44 = ((a2 + ~(-1 << v41) - 242) >> v41) + 1;
    if (HIWORD(v44))
    {
      int v42 = *(_DWORD *)((char *)a1 + v40);
      if (!v42) {
        goto LABEL_61;
      }
      goto LABEL_51;
    }
    if (v44 > 0xFF)
    {
      int v42 = *(unsigned __int16 *)((char *)a1 + v40);
      if (!*(unsigned __int16 *)((char *)a1 + v40)) {
        goto LABEL_61;
      }
      goto LABEL_51;
    }
    if (v44 < 2)
    {
LABEL_61:
      if (v19 > 3) {
        goto LABEL_65;
      }
      unsigned int v48 = ((1 << (8 * v19)) | 2u) >> (8 * v19);
      unsigned int v49 = v48 | 0x10;
      BOOL v36 = HIWORD(v48) == 0;
      uint64_t v50 = 2;
      if (!v36) {
        uint64_t v50 = 4;
      }
      if (v49 <= 0xFF) {
LABEL_65:
      }
        uint64_t v50 = 1;
      unint64_t v51 = v19 + v58 + v50;
      if (v51 <= v59) {
        unint64_t v51 = v59;
      }
      if (v25 > 3) {
        goto LABEL_72;
      }
      unsigned int v52 = ((1 << (8 * v25)) | 2u) >> (8 * v25);
      unsigned int v53 = v52 | 0x10;
      BOOL v36 = HIWORD(v52) == 0;
      uint64_t v54 = 2;
      if (!v36) {
        uint64_t v54 = 4;
      }
      if (v53 <= 0xFF) {
LABEL_72:
      }
        uint64_t v54 = 1;
      unint64_t v55 = v38 + v54;
      if (v55 <= v51) {
        unint64_t v55 = v51;
      }
      if (v30 > v55) {
        unint64_t v55 = v11 + 17;
      }
      if (v31 > v55) {
        unint64_t v55 = v11 + 24;
      }
      if (v61 > v55) {
        unint64_t v55 = v61;
      }
      if (v32 > v55) {
        unint64_t v55 = v32;
      }
      unsigned int v56 = *((unsigned __int8 *)a1 + v55);
      if (v56 >= 0xE) {
        return (v56 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v42 = *((unsigned __int8 *)a1 + v40);
  if (!*((unsigned char *)a1 + v40)) {
    goto LABEL_61;
  }
LABEL_51:
  int v45 = (v42 - 1) << v41;
  if (v40 > 3) {
    int v45 = 0;
  }
  if (v40)
  {
    if (v40 <= 3) {
      int v46 = v40;
    }
    else {
      int v46 = 4;
    }
    switch(v46)
    {
      case 2:
        int v47 = *a1;
        break;
      case 3:
        int v47 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v47 = *(_DWORD *)a1;
        break;
      default:
        int v47 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v47 = 0;
  }
  return (v47 | v45) + 243;
}

void sub_100143C6C(unsigned char *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v3 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v4 = *(void *)(v3 + 64);
  uint64_t v5 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  if (v6 <= v4) {
    unint64_t v7 = v4;
  }
  else {
    unint64_t v7 = *(void *)(v5 + 64);
  }
  unint64_t v8 = v7 + 1;
  unsigned __int8 v9 = *(_DWORD *)(v5 + 80);
  unint64_t v10 = v6 + ((v4 + v9) & ~(unint64_t)v9);
  if (v10 + 1 > v7 + 2) {
    unint64_t v11 = v10 + 1;
  }
  else {
    unint64_t v11 = v7 + 2;
  }
  if (v8 > v11) {
    unint64_t v11 = v7 + 1;
  }
  unint64_t v12 = v7 & 0xFFFFFFFFFFFFFFF8;
  if ((v7 & 0xFFFFFFFFFFFFFFF8) + 16 > v11) {
    unint64_t v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  uint64_t v13 = *(unsigned __int8 *)(v3 + 80) | v9;
  unint64_t v14 = ((v8 + v13) & ~v13) + v8;
  if (v14 > v11) {
    unint64_t v11 = v14;
  }
  unint64_t v56 = v11;
  unint64_t v57 = v7 + 2;
  uint64_t v15 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  int v16 = *(_DWORD *)(v15 + 80) & 0xF8;
  uint64_t v17 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v18 = *(unsigned __int8 *)(v17 + 80);
  unint64_t v54 = (v8 + (v16 | v18 | 7)) & ~(unint64_t)(v16 | v18 | 7);
  unint64_t v19 = ((((*(void *)(v17 + 64) + ((v18 + ((*(void *)(v15 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v18) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 18;
  if (v19 <= 0x39) {
    uint64_t v20 = 57;
  }
  else {
    uint64_t v20 = v19;
  }
  uint64_t v21 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  int v22 = *(_DWORD *)(v21 + 80) & 0xF8;
  uint64_t v23 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v24 = *(unsigned __int8 *)(v23 + 80);
  uint64_t v25 = v22 | v24 | 7;
  unint64_t v26 = ((((*(void *)(v23 + 64) + ((v24 + ((*(void *)(v21 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v24) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 18;
  if (v26 <= 0x39) {
    unint64_t v26 = 57;
  }
  if (v20 > 3) {
    goto LABEL_22;
  }
  unsigned int v27 = ((1 << (8 * v20)) | 2u) >> (8 * v20);
  uint64_t v28 = 4;
  if (!HIWORD(v27)) {
    uint64_t v28 = 2;
  }
  if ((v27 | 0x10) <= 0xFF) {
LABEL_22:
  }
    uint64_t v28 = 1;
  unint64_t v29 = (v8 + v25) & ~v25;
  unint64_t v30 = v12 + 17;
  unint64_t v31 = v12 + 24;
  unint64_t v32 = ((v12 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  unint64_t v33 = v20 + v54 + v28;
  if (v33 <= v56) {
    unint64_t v33 = v56;
  }
  if (v26 > 3) {
    goto LABEL_29;
  }
  unsigned int v34 = ((1 << (8 * v26)) | 2u) >> (8 * v26);
  unsigned int v35 = v34 | 0x10;
  BOOL v36 = HIWORD(v34) == 0;
  uint64_t v37 = 2;
  if (!v36) {
    uint64_t v37 = 4;
  }
  if (v35 <= 0xFF) {
LABEL_29:
  }
    uint64_t v37 = 1;
  unint64_t v38 = v26 + v29;
  unint64_t v39 = v38 + v37;
  if (v39 > v33) {
    unint64_t v33 = v39;
  }
  if (v30 > v33) {
    unint64_t v33 = v12 + 17;
  }
  if (v31 > v33) {
    unint64_t v33 = v12 + 24;
  }
  if (v57 > v33) {
    unint64_t v33 = v57;
  }
  if (v32 > v33) {
    unint64_t v33 = ((v12 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  size_t v40 = v33 + 1;
  if (a3 < 0xF3)
  {
    int v41 = 0;
  }
  else if (v40 <= 3)
  {
    unsigned int v44 = ((a3 + ~(-1 << (8 * v40)) - 242) >> (8 * v40)) + 1;
    if (HIWORD(v44))
    {
      int v41 = 4;
    }
    else if (v44 >= 0x100)
    {
      int v41 = 2;
    }
    else
    {
      int v41 = v44 > 1;
    }
  }
  else
  {
    int v41 = 1;
  }
  if (a2 > 0xF2)
  {
    unsigned int v42 = a2 - 243;
    if (v40 < 4)
    {
      int v43 = (v42 >> (8 * v40)) + 1;
      if (v40)
      {
        int v45 = v42 & ~(-1 << (8 * v40));
        bzero(a1, v40);
        if (v40 == 3)
        {
          *(_WORD *)a1 = v45;
          a1[2] = BYTE2(v45);
        }
        else if (v40 == 2)
        {
          *(_WORD *)a1 = v45;
        }
        else
        {
          *a1 = v45;
        }
      }
    }
    else
    {
      bzero(a1, v40);
      *(_DWORD *)a1 = v42;
      int v43 = 1;
    }
    switch(v41)
    {
      case 1:
        a1[v40] = v43;
        break;
      case 2:
        *(_WORD *)&a1[v40] = v43;
        break;
      case 3:
LABEL_93:
        __break(1u);
        JUMPOUT(0x100144328);
      case 4:
        *(_DWORD *)&a1[v40] = v43;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v41)
    {
      case 1:
        a1[v40] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_60;
      case 2:
        *(_WORD *)&a1[v40] = 0;
        goto LABEL_59;
      case 3:
        goto LABEL_93;
      case 4:
        *(_DWORD *)&a1[v40] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_60;
      default:
LABEL_59:
        if (a2)
        {
LABEL_60:
          if (v20 > 3) {
            goto LABEL_64;
          }
          unsigned int v46 = ((1 << (8 * v20)) | 2u) >> (8 * v20);
          unsigned int v47 = v46 | 0x10;
          BOOL v36 = HIWORD(v46) == 0;
          uint64_t v48 = 2;
          if (!v36) {
            uint64_t v48 = 4;
          }
          if (v47 <= 0xFF) {
LABEL_64:
          }
            uint64_t v48 = 1;
          unint64_t v49 = v20 + v54 + v48;
          if (v49 <= v56) {
            unint64_t v49 = v56;
          }
          if (v26 > 3) {
            goto LABEL_71;
          }
          unsigned int v50 = ((1 << (8 * v26)) | 2u) >> (8 * v26);
          unsigned int v51 = v50 | 0x10;
          BOOL v36 = HIWORD(v50) == 0;
          uint64_t v52 = 2;
          if (!v36) {
            uint64_t v52 = 4;
          }
          if (v51 <= 0xFF) {
LABEL_71:
          }
            uint64_t v52 = 1;
          unint64_t v53 = v38 + v52;
          if (v53 <= v49) {
            unint64_t v53 = v49;
          }
          if (v30 > v53) {
            unint64_t v53 = v12 + 17;
          }
          if (v31 > v53) {
            unint64_t v53 = v12 + 24;
          }
          if (v57 > v53) {
            unint64_t v53 = v57;
          }
          if (v32 > v53) {
            unint64_t v53 = ((v12 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
          }
          a1[v53] = -(char)a2;
        }
        break;
    }
  }
}

uint64_t sub_100144350(unsigned __int8 *a1)
{
  uint64_t v1 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v2 = *(void *)(v1 + 64);
  uint64_t v3 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v4 = *(void *)(v3 + 64);
  if (v4 <= v2) {
    unint64_t v5 = v2;
  }
  else {
    unint64_t v5 = *(void *)(v3 + 64);
  }
  unint64_t v6 = v5 + 1;
  unsigned __int8 v7 = *(_DWORD *)(v3 + 80);
  unint64_t v8 = v4 + ((v2 + v7) & ~(unint64_t)v7);
  unint64_t v53 = v5 + 2;
  if (v8 + 1 > v5 + 2) {
    unint64_t v9 = v8 + 1;
  }
  else {
    unint64_t v9 = v5 + 2;
  }
  if (v6 > v9) {
    unint64_t v9 = v5 + 1;
  }
  unint64_t v10 = v5 & 0xFFFFFFFFFFFFFFF8;
  if ((v5 & 0xFFFFFFFFFFFFFFF8) + 16 > v9) {
    unint64_t v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  uint64_t v11 = *(unsigned __int8 *)(v1 + 80) | v7;
  unint64_t v12 = ((v6 + v11) & ~v11) + v6;
  if (v12 > v9) {
    unint64_t v9 = v12;
  }
  unint64_t v55 = v9;
  uint64_t v13 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  int v14 = *(_DWORD *)(v13 + 80) & 0xF8;
  uint64_t v15 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v16 = *(unsigned __int8 *)(v15 + 80);
  unint64_t v17 = (v6 + (v14 | v16 | 7)) & ~(unint64_t)(v14 | v16 | 7);
  unint64_t v18 = ((((*(void *)(v15 + 64) + ((v16 + ((*(void *)(v13 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v16) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 18;
  if (v18 <= 0x39) {
    uint64_t v19 = 57;
  }
  else {
    uint64_t v19 = v18;
  }
  if (v19 > 3) {
    goto LABEL_20;
  }
  unsigned int v20 = ((1 << (8 * v19)) | 2u) >> (8 * v19);
  unsigned int v21 = v20 | 0x10;
  BOOL v22 = HIWORD(v20) == 0;
  uint64_t v23 = 2;
  if (!v22) {
    uint64_t v23 = 4;
  }
  if (v21 <= 0xFF) {
LABEL_20:
  }
    uint64_t v23 = 1;
  unint64_t v52 = v19 + v17;
  unint64_t v24 = v19 + v17 + v23;
  if (v24 <= v55) {
    unint64_t v25 = v55;
  }
  else {
    unint64_t v25 = v24;
  }
  uint64_t v26 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  int v27 = *(_DWORD *)(v26 + 80) & 0xF8;
  uint64_t v28 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v29 = *(unsigned __int8 *)(v28 + 80);
  unint64_t v30 = (v6 + (v27 | v29 | 7)) & ~(unint64_t)(v27 | v29 | 7);
  unint64_t v31 = ((((*(void *)(v28 + 64) + ((v29 + ((*(void *)(v26 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v29) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 18;
  if (v31 <= 0x39) {
    uint64_t v32 = 57;
  }
  else {
    uint64_t v32 = v31;
  }
  if (v32 <= 3) {
    unsigned int v33 = (((1 << (8 * v32)) | 2u) >> (8 * v32)) | 0x10;
  }
  else {
    unsigned int v33 = 17;
  }
  unint64_t v34 = v10 + 17;
  unint64_t v35 = v10 + 24;
  unint64_t v36 = ((v10 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  uint64_t v37 = 4;
  if (v33 < 0x10000) {
    uint64_t v37 = 2;
  }
  if (v33 < 0x100) {
    uint64_t v38 = 1;
  }
  else {
    uint64_t v38 = v37;
  }
  unint64_t v39 = v32 + v30;
  unint64_t v40 = v39 + v38;
  if (v40 <= v25) {
    unint64_t v40 = v25;
  }
  if (v34 > v40) {
    unint64_t v40 = v10 + 17;
  }
  if (v35 > v40) {
    unint64_t v40 = v10 + 24;
  }
  if (v53 > v40) {
    unint64_t v40 = v53;
  }
  if (v36 > v40) {
    unint64_t v40 = ((v10 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  uint64_t result = a1[v40];
  if (result >= 0xE)
  {
    if (v19 > 3) {
      goto LABEL_50;
    }
    unsigned int v42 = ((1 << (8 * v19)) | 2u) >> (8 * v19);
    unsigned int v43 = v42 | 0x10;
    BOOL v22 = HIWORD(v42) == 0;
    uint64_t v44 = 2;
    if (!v22) {
      uint64_t v44 = 4;
    }
    if (v43 <= 0xFF) {
LABEL_50:
    }
      uint64_t v44 = 1;
    unint64_t v45 = v52 + v44;
    if (v45 <= v55) {
      unint64_t v45 = v55;
    }
    if (v32 > 3) {
      goto LABEL_57;
    }
    unsigned int v46 = ((1 << (8 * v32)) | 2u) >> (8 * v32);
    unsigned int v47 = v46 | 0x10;
    BOOL v22 = HIWORD(v46) == 0;
    uint64_t v48 = 2;
    if (!v22) {
      uint64_t v48 = 4;
    }
    if (v47 <= 0xFF) {
LABEL_57:
    }
      uint64_t v48 = 1;
    unint64_t v49 = v39 + v48;
    if (v49 <= v45) {
      unint64_t v49 = v45;
    }
    if (v34 <= v49) {
      unint64_t v34 = v49;
    }
    if (v35 <= v34) {
      unint64_t v35 = v34;
    }
    if (v53 > v35) {
      unint64_t v35 = v53;
    }
    if (v36 <= v35) {
      LODWORD(v36) = v35;
    }
    if (v36 <= 3) {
      uint64_t v50 = v36;
    }
    else {
      uint64_t v50 = 4;
    }
    switch(v50)
    {
      case 1:
        int v51 = *a1;
        if (v36 < 4) {
          goto LABEL_77;
        }
        goto LABEL_79;
      case 2:
        int v51 = *(unsigned __int16 *)a1;
        if (v36 >= 4) {
          goto LABEL_79;
        }
        goto LABEL_77;
      case 3:
        int v51 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        if (v36 < 4) {
          goto LABEL_77;
        }
        goto LABEL_79;
      case 4:
        int v51 = *(_DWORD *)a1;
        if (v36 < 4) {
LABEL_77:
        }
          uint64_t result = (v51 | ((result - 14) << (8 * v36))) + 14;
        else {
LABEL_79:
        }
          uint64_t result = (v51 + 14);
        break;
      default:
        return result;
    }
  }
  return result;
}

void sub_100144930(unsigned char *a1, unsigned int a2)
{
  uint64_t v3 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v4 = *(void *)(v3 + 64);
  uint64_t v5 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  if (v6 <= v4) {
    unint64_t v7 = v4;
  }
  else {
    unint64_t v7 = *(void *)(v5 + 64);
  }
  unint64_t v8 = v7 + 1;
  unsigned __int8 v9 = *(_DWORD *)(v5 + 80);
  unint64_t v10 = v6 + ((v4 + v9) & ~(unint64_t)v9);
  unint64_t v87 = v7 + 2;
  if (v10 + 1 > v7 + 2) {
    unint64_t v11 = v10 + 1;
  }
  else {
    unint64_t v11 = v7 + 2;
  }
  if (v8 > v11) {
    unint64_t v11 = v7 + 1;
  }
  unint64_t v86 = v7 & 0xFFFFFFFFFFFFFFF8;
  if ((v7 & 0xFFFFFFFFFFFFFFF8) + 16 > v11) {
    unint64_t v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  uint64_t v12 = *(unsigned __int8 *)(v3 + 80) | v9;
  unint64_t v13 = ((v8 + v12) & ~v12) + v8;
  if (v13 > v11) {
    unint64_t v11 = v13;
  }
  unint64_t v89 = v11;
  uint64_t v14 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  int v15 = *(_DWORD *)(v14 + 80) & 0xF8;
  uint64_t v16 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v17 = *(unsigned __int8 *)(v16 + 80);
  unint64_t v18 = (v8 + (v15 | v17 | 7)) & ~(unint64_t)(v15 | v17 | 7);
  unint64_t v19 = ((((*(void *)(v16 + 64) + ((v17 + ((*(void *)(v14 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v17) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 18;
  if (v19 <= 0x39) {
    uint64_t v20 = 57;
  }
  else {
    uint64_t v20 = v19;
  }
  if (a2 > 0xD)
  {
    if (v20 > 3) {
      goto LABEL_50;
    }
    unsigned int v37 = ((1 << (8 * v20)) | 2u) >> (8 * v20);
    unsigned int v38 = v37 | 0x10;
    BOOL v23 = HIWORD(v37) == 0;
    uint64_t v39 = 2;
    if (!v23) {
      uint64_t v39 = 4;
    }
    if (v38 <= 0xFF) {
LABEL_50:
    }
      uint64_t v39 = 1;
    unint64_t v85 = v20 + v18;
    unint64_t v40 = v20 + v18 + v39;
    if (v40 <= v89) {
      unint64_t v41 = v89;
    }
    else {
      unint64_t v41 = v40;
    }
    uint64_t v42 = *(void *)(swift_getAssociatedTypeWitness() - 8);
    int v43 = *(_DWORD *)(v42 + 80) & 0xF8;
    uint64_t v44 = *(void *)(swift_getAssociatedTypeWitness() - 8);
    uint64_t v45 = *(unsigned __int8 *)(v44 + 80);
    unint64_t v46 = (v8 + (v43 | v45 | 7)) & ~(unint64_t)(v43 | v45 | 7);
    unint64_t v47 = ((((*(void *)(v44 + 64) + ((v45 + ((*(void *)(v42 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v45) + 7) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 18;
    uint64_t v48 = 57;
    if (v47 > 0x39) {
      uint64_t v48 = v47;
    }
    char v49 = 8 * v48;
    if (v48 > 3) {
      goto LABEL_60;
    }
    unsigned int v50 = ((1 << v49) | 2u) >> v49;
    unsigned int v51 = v50 | 0x10;
    BOOL v23 = HIWORD(v50) == 0;
    uint64_t v52 = 2;
    if (!v23) {
      uint64_t v52 = 4;
    }
    if (v51 <= 0xFF) {
LABEL_60:
    }
      uint64_t v52 = 1;
    char v53 = 8 * v20;
    unint64_t v54 = v48 + v46;
    unint64_t v55 = v54 + v52;
    if (v55 <= v41) {
      unint64_t v56 = v41;
    }
    else {
      unint64_t v56 = v55;
    }
    unint64_t v57 = v86 + 17;
    if (v86 + 17 <= v56) {
      unint64_t v58 = v56;
    }
    else {
      unint64_t v58 = v86 + 17;
    }
    unint64_t v59 = v86 + 24;
    if (v86 + 24 > v58) {
      unint64_t v58 = v86 + 24;
    }
    if (v87 <= v58) {
      unint64_t v60 = v58;
    }
    else {
      unint64_t v60 = v87;
    }
    unint64_t v61 = ((v86 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
    if (v61 > v60) {
      LODWORD(v60) = ((v86 + 23) & 0xFFFFFFF8) + 8;
    }
    BOOL v62 = v60 > 3;
    char v63 = 8 * v60;
    int v64 = (a2 - 14) & ~(-1 << v63);
    unsigned int v65 = ((a2 - 14) >> v63) + 14;
    if (v62)
    {
      LOBYTE(v65) = 14;
      int v66 = a2 - 14;
    }
    else
    {
      int v66 = v64;
    }
    if (v20 > 3) {
      goto LABEL_81;
    }
    unsigned int v67 = ((1 << v53) | 2u) >> v53;
    unsigned int v68 = v67 | 0x10;
    BOOL v23 = HIWORD(v67) == 0;
    uint64_t v69 = 2;
    if (!v23) {
      uint64_t v69 = 4;
    }
    if (v68 <= 0xFF) {
LABEL_81:
    }
      uint64_t v69 = 1;
    unint64_t v70 = v85 + v69;
    if (v70 <= v89) {
      unint64_t v70 = v89;
    }
    if (v48 > 3) {
      goto LABEL_88;
    }
    unsigned int v71 = ((1 << v49) | 2u) >> v49;
    unsigned int v72 = v71 | 0x10;
    BOOL v23 = HIWORD(v71) == 0;
    uint64_t v73 = 2;
    if (!v23) {
      uint64_t v73 = 4;
    }
    if (v72 <= 0xFF) {
LABEL_88:
    }
      uint64_t v73 = 1;
    unint64_t v74 = v54 + v73;
    if (v74 > v70) {
      unint64_t v70 = v74;
    }
    if (v57 > v70) {
      unint64_t v70 = v86 + 17;
    }
    if (v59 > v70) {
      unint64_t v70 = v86 + 24;
    }
    if (v87 > v70) {
      unint64_t v70 = v87;
    }
    if (v61 > v70) {
      unint64_t v70 = ((v86 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
    }
    a1[v70] = v65;
    if (v20 > 3) {
      goto LABEL_103;
    }
    unsigned int v75 = ((1 << v53) | 2u) >> v53;
    unsigned int v76 = v75 | 0x10;
    BOOL v23 = HIWORD(v75) == 0;
    uint64_t v77 = 2;
    if (!v23) {
      uint64_t v77 = 4;
    }
    if (v76 <= 0xFF) {
LABEL_103:
    }
      uint64_t v77 = 1;
    size_t v78 = v85 + v77;
    if (v78 <= v89) {
      size_t v78 = v89;
    }
    if (v48 > 3) {
      goto LABEL_110;
    }
    unsigned int v79 = ((1 << v49) | 2u) >> v49;
    unsigned int v80 = v79 | 0x10;
    BOOL v23 = HIWORD(v79) == 0;
    uint64_t v81 = 2;
    if (!v23) {
      uint64_t v81 = 4;
    }
    if (v80 <= 0xFF) {
LABEL_110:
    }
      uint64_t v81 = 1;
    size_t v82 = v54 + v81;
    if (v82 <= v78) {
      size_t v82 = v78;
    }
    if (v57 > v82) {
      size_t v82 = v86 + 17;
    }
    if (v59 > v82) {
      size_t v82 = v86 + 24;
    }
    if (v87 > v82) {
      size_t v82 = v87;
    }
    if (v61 <= v82) {
      size_t v83 = v82;
    }
    else {
      size_t v83 = ((v86 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
    }
    if (v83 >= 4) {
      int v84 = 4;
    }
    else {
      int v84 = v83;
    }
    bzero(a1, v83);
    switch(v84)
    {
      case 2:
        *(_WORD *)a1 = v66;
        break;
      case 3:
        *(_WORD *)a1 = v66;
        a1[2] = BYTE2(v66);
        break;
      case 4:
        *(_DWORD *)a1 = v66;
        break;
      default:
        *a1 = v66;
        break;
    }
  }
  else
  {
    if (v20 > 3) {
      goto LABEL_21;
    }
    unsigned int v21 = ((1 << (8 * v20)) | 2u) >> (8 * v20);
    unsigned int v22 = v21 | 0x10;
    BOOL v23 = HIWORD(v21) == 0;
    uint64_t v24 = 2;
    if (!v23) {
      uint64_t v24 = 4;
    }
    if (v22 <= 0xFF) {
LABEL_21:
    }
      uint64_t v24 = 1;
    unint64_t v25 = v20 + v18 + v24;
    if (v25 <= v89) {
      unint64_t v26 = v89;
    }
    else {
      unint64_t v26 = v25;
    }
    uint64_t v27 = *(void *)(swift_getAssociatedTypeWitness() - 8);
    int v28 = *(_DWORD *)(v27 + 80) & 0xF8;
    uint64_t v29 = *(void *)(swift_getAssociatedTypeWitness() - 8);
    uint64_t v30 = *(unsigned __int8 *)(v29 + 80);
    unint64_t v31 = (v8 + (v28 | v30 | 7)) & ~(unint64_t)(v28 | v30 | 7);
    unint64_t v32 = ((((*(void *)(v29 + 64) + ((v30 + ((*(void *)(v27 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v30) + 7) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 18;
    if (v32 <= 0x39) {
      unint64_t v32 = 57;
    }
    if (v32 <= 3) {
      unsigned int v33 = (((1 << (8 * v32)) | 2u) >> (8 * v32)) | 0x10;
    }
    else {
      unsigned int v33 = 17;
    }
    uint64_t v34 = 4;
    if (v33 < 0x10000) {
      uint64_t v34 = 2;
    }
    if (v33 < 0x100) {
      uint64_t v35 = 1;
    }
    else {
      uint64_t v35 = v34;
    }
    unint64_t v36 = v32 + v31 + v35;
    if (v36 <= v26) {
      unint64_t v36 = v26;
    }
    if (v86 + 17 > v36) {
      unint64_t v36 = v86 + 17;
    }
    if (v86 + 24 > v36) {
      unint64_t v36 = v86 + 24;
    }
    if (v87 > v36) {
      unint64_t v36 = v87;
    }
    if (((v86 + 23) & 0xFFFFFFFFFFFFFFF8) + 8 > v36) {
      unint64_t v36 = ((v86 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
    }
    a1[v36] = a2;
  }
}

uint64_t type metadata accessor for ReconciliationMutation()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for ReconciliationSideMutation()
{
  return sub_10014D080();
}

uint64_t sub_100145204(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 24);
}

uint64_t sub_10014520C()
{
  uint64_t v3 = &unk_10097A6F0;
  unint64_t v4 = (char *)&value witness table for Builtin.Int64 + 64;
  uint64_t v5 = &unk_10097A688;
  unint64_t v6 = &unk_10097A6A0;
  unint64_t v7 = &unk_10097A6A0;
  unint64_t v8 = &unk_10097A6A0;
  unsigned __int8 v9 = &unk_10097A6A0;
  unint64_t v10 = &unk_10097A6A0;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t result = type metadata accessor for FileItemVersion();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout3();
    unint64_t v11 = &v2;
    uint64_t v12 = &unk_10097A708;
    unint64_t v13 = &unk_10097A720;
    uint64_t v14 = &unk_10097A738;
    int v15 = &unk_10097A750;
    uint64_t v16 = &unk_10097A768;
    uint64_t v17 = &unk_10097A780;
    unint64_t v18 = &unk_10097A6A0;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

char *sub_1001453CC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = *(void *)(v8 + 64) + 7;
  unint64_t v11 = (((v10 + ((v9 + ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  if (v11 + 18 <= 0x39) {
    uint64_t v12 = 57;
  }
  else {
    uint64_t v12 = v11 + 18;
  }
  if (v12 > 3) {
    goto LABEL_8;
  }
  unsigned int v13 = ((1 << (8 * v12)) | 2u) >> (8 * v12);
  unsigned int v14 = v13 | 0x10;
  BOOL v18 = HIWORD(v13) == 0;
  uint64_t v15 = 2;
  if (!v18) {
    uint64_t v15 = 4;
  }
  if (v14 <= 0xFF) {
LABEL_8:
  }
    uint64_t v15 = 1;
  unint64_t v16 = v15 + v12;
  unsigned int v17 = v9 | *(_DWORD *)(v5 + 80) & 0xF8;
  BOOL v18 = v16 <= 0x18 && ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v8 + 80)) & 0x100000) == 0;
  if (!v18 || v17 > 7)
  {
    uint64_t v20 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (unsigned __int8 *)(v20 + (((v17 | 7) + 16) & ~(unint64_t)(v17 | 7)));
    swift_retain();
    return (char *)a1;
  }
  if (v12 > 3) {
    goto LABEL_20;
  }
  unsigned int v23 = ((1 << (8 * v12)) | 2u) >> (8 * v12);
  if (HIWORD(v23))
  {
    unsigned int v22 = *(_DWORD *)&a2[v12];
    goto LABEL_25;
  }
  if ((v23 | 0x10) <= 0xFF) {
LABEL_20:
  }
    unsigned int v22 = a2[v12];
  else {
    unsigned int v22 = *(unsigned __int16 *)&a2[v12];
  }
LABEL_25:
  unsigned int v24 = v22 - 16;
  if (v22 >= 0x10)
  {
    if (v12 <= 3) {
      uint64_t v25 = v12;
    }
    else {
      uint64_t v25 = 4;
    }
    switch(v25)
    {
      case 1:
        int v26 = *a2;
        if (v12 < 4) {
          goto LABEL_35;
        }
        goto LABEL_37;
      case 2:
        int v26 = *(unsigned __int16 *)a2;
        if (v12 >= 4) {
          goto LABEL_37;
        }
        goto LABEL_35;
      case 3:
        int v26 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        if (v12 < 4) {
          goto LABEL_35;
        }
        goto LABEL_37;
      case 4:
        int v26 = *(_DWORD *)a2;
        if (v12 < 4) {
LABEL_35:
        }
          unsigned int v22 = (v26 | (v24 << (8 * v12))) + 16;
        else {
LABEL_37:
        }
          unsigned int v22 = v26 + 16;
        break;
      default:
        break;
    }
  }
  switch(v22)
  {
    case 0u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((void *)a1 + 2) = *((void *)a2 + 2);
      if (v12 <= 3)
      {
        unsigned int v27 = ((1 << (8 * v12)) | 2u) >> (8 * v12);
        if (HIWORD(v27))
        {
          *(_DWORD *)&a1[v12] = 0;
          return (char *)a1;
        }
        if ((v27 | 0x10) > 0xFF)
        {
          *(_WORD *)&a1[v12] = 0;
          return (char *)a1;
        }
      }
      a1[v12] = 0;
      break;
    case 1u:
      *(void *)a1 = *(void *)a2;
      if (v12 <= 3)
      {
        unsigned int v28 = ((1 << (8 * v12)) | 2u) >> (8 * v12);
        if (HIWORD(v28))
        {
          *(_DWORD *)&a1[v12] = 1;
          return (char *)a1;
        }
        if ((v28 | 0x10) > 0xFF)
        {
          *(_WORD *)&a1[v12] = 1;
          return (char *)a1;
        }
      }
      a1[v12] = 1;
      break;
    case 2u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      if (v12 <= 3)
      {
        unsigned int v29 = ((1 << (8 * v12)) | 2u) >> (8 * v12);
        if (HIWORD(v29))
        {
          *(_DWORD *)&a1[v12] = 2;
          return (char *)a1;
        }
        if ((v29 | 0x10) > 0xFF)
        {
          *(_WORD *)&a1[v12] = 2;
          return (char *)a1;
        }
      }
      a1[v12] = 2;
      break;
    case 3u:
      *a1 = *a2;
      if (v12 <= 3)
      {
        unsigned int v30 = ((1 << (8 * v12)) | 2u) >> (8 * v12);
        if (HIWORD(v30))
        {
          *(_DWORD *)&a1[v12] = 3;
          return (char *)a1;
        }
        if ((v30 | 0x10) > 0xFF)
        {
          *(_WORD *)&a1[v12] = 3;
          return (char *)a1;
        }
      }
      a1[v12] = 3;
      break;
    case 4u:
      *a1 = *a2;
      if (v12 <= 3)
      {
        unsigned int v31 = ((1 << (8 * v12)) | 2u) >> (8 * v12);
        if (HIWORD(v31))
        {
          *(_DWORD *)&a1[v12] = 4;
          return (char *)a1;
        }
        if ((v31 | 0x10) > 0xFF)
        {
          *(_WORD *)&a1[v12] = 4;
          return (char *)a1;
        }
      }
      a1[v12] = 4;
      break;
    case 5u:
      *a1 = *a2;
      if (v12 <= 3)
      {
        unsigned int v32 = ((1 << (8 * v12)) | 2u) >> (8 * v12);
        if (HIWORD(v32))
        {
          *(_DWORD *)&a1[v12] = 5;
          return (char *)a1;
        }
        if ((v32 | 0x10) > 0xFF)
        {
          *(_WORD *)&a1[v12] = 5;
          return (char *)a1;
        }
      }
      a1[v12] = 5;
      break;
    case 6u:
      *a1 = *a2;
      if (v12 <= 3)
      {
        unsigned int v33 = ((1 << (8 * v12)) | 2u) >> (8 * v12);
        if (HIWORD(v33))
        {
          *(_DWORD *)&a1[v12] = 6;
          return (char *)a1;
        }
        if ((v33 | 0x10) > 0xFF)
        {
          *(_WORD *)&a1[v12] = 6;
          return (char *)a1;
        }
      }
      a1[v12] = 6;
      break;
    case 7u:
      *a1 = *a2;
      if (v12 <= 3)
      {
        unsigned int v34 = ((1 << (8 * v12)) | 2u) >> (8 * v12);
        if (HIWORD(v34))
        {
          *(_DWORD *)&a1[v12] = 7;
          return (char *)a1;
        }
        if ((v34 | 0x10) > 0xFF)
        {
          *(_WORD *)&a1[v12] = 7;
          return (char *)a1;
        }
      }
      a1[v12] = 7;
      break;
    case 8u:
      unint64_t v65 = v11 + 16;
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      unsigned int v51 = (void *)((unint64_t)&a1[v6 + 7] & 0xFFFFFFFFFFFFFFF8);
      uint64_t v52 = (void *)((unint64_t)&a2[v6 + 7] & 0xFFFFFFFFFFFFFFF8);
      *unsigned int v51 = *v52;
      uint64_t v53 = ((unint64_t)v51 + v9 + 8) & ~v9;
      uint64_t v54 = ((unint64_t)v52 + v9 + 8) & ~v9;
      unint64_t v55 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
      swift_bridgeObjectRetain();
      v55(v53, v54, v7);
      unint64_t v56 = (void *)((v10 + v53) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v57 = (void *)((v10 + v54) & 0xFFFFFFFFFFFFFFF8);
      void *v56 = *v57;
      unint64_t v58 = (void *)(((unint64_t)v56 + 15) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v59 = (void *)(((unint64_t)v57 + 15) & 0xFFFFFFFFFFFFFFF8);
      void *v58 = *v59;
      v58[1] = v59[1];
      unint64_t v60 = (char *)&a1[v65];
      *unint64_t v60 = a2[v65];
      v60[1] = a2[v65 + 1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v12 > 3) {
        goto LABEL_104;
      }
      unsigned int v62 = ((1 << (8 * v12)) | 2u) >> (8 * v12);
      if (HIWORD(v62))
      {
        *(_DWORD *)&a1[v12] = 8;
        return (char *)a1;
      }
      if ((v62 | 0x10) <= 0xFF) {
LABEL_104:
      }
        a1[v12] = 8;
      else {
        *(_WORD *)&a1[v12] = 8;
      }
      break;
    case 9u:
      uint64_t v35 = *(void **)a2;
      *(void *)a1 = *(void *)a2;
      id v36 = v35;
      if (v12 <= 3)
      {
        unsigned int v37 = ((1 << (8 * v12)) | 2u) >> (8 * v12);
        if (HIWORD(v37))
        {
          *(_DWORD *)&a1[v12] = 9;
          return (char *)a1;
        }
        if ((v37 | 0x10) > 0xFF)
        {
          *(_WORD *)&a1[v12] = 9;
          return (char *)a1;
        }
      }
      a1[v12] = 9;
      break;
    case 0xAu:
      *a1 = *a2;
      if (v12 <= 3)
      {
        unsigned int v38 = ((1 << (8 * v12)) | 2u) >> (8 * v12);
        if (HIWORD(v38))
        {
          *(_DWORD *)&a1[v12] = 10;
          return (char *)a1;
        }
        if ((v38 | 0x10) > 0xFF)
        {
          *(_WORD *)&a1[v12] = 10;
          return (char *)a1;
        }
      }
      a1[v12] = 10;
      break;
    case 0xBu:
      *(_WORD *)a1 = *(_WORD *)a2;
      if (v12 <= 3)
      {
        unsigned int v39 = ((1 << (8 * v12)) | 2u) >> (8 * v12);
        if (HIWORD(v39))
        {
          *(_DWORD *)&a1[v12] = 11;
          return (char *)a1;
        }
        if ((v39 | 0x10) > 0xFF)
        {
          *(_WORD *)&a1[v12] = 11;
          return (char *)a1;
        }
      }
      a1[v12] = 11;
      break;
    case 0xCu:
      uint64_t v40 = *(void *)a2;
      uint64_t v41 = *((void *)a2 + 1);
      char v42 = a2[16];
      sub_10009C5FC(v40, v41, v42);
      *(void *)a1 = v40;
      *((void *)a1 + 1) = v41;
      a1[16] = v42;
      if (v12 <= 3)
      {
        unsigned int v43 = ((1 << (8 * v12)) | 2u) >> (8 * v12);
        if (HIWORD(v43))
        {
          *(_DWORD *)&a1[v12] = 12;
          return (char *)a1;
        }
        if ((v43 | 0x10) > 0xFF)
        {
          *(_WORD *)&a1[v12] = 12;
          return (char *)a1;
        }
      }
      a1[v12] = 12;
      break;
    case 0xDu:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((void *)a1 + 2) = *((void *)a2 + 2);
      if (v12 <= 3)
      {
        unsigned int v44 = ((1 << (8 * v12)) | 2u) >> (8 * v12);
        if (HIWORD(v44))
        {
          *(_DWORD *)&a1[v12] = 13;
          return (char *)a1;
        }
        if ((v44 | 0x10) > 0xFF)
        {
          *(_WORD *)&a1[v12] = 13;
          return (char *)a1;
        }
      }
      a1[v12] = 13;
      break;
    case 0xEu:
      unint64_t v45 = *((void *)a2 + 2);
      if (v45 >> 60 == 11)
      {
        long long v46 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1) = v46;
        *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      }
      else
      {
        unint64_t v61 = (uint64_t *)(a2 + 8);
        *(void *)a1 = *(void *)a2;
        if (v45 >> 60 == 15)
        {
          *(_OWORD *)(a1 + 8) = *(_OWORD *)v61;
        }
        else
        {
          uint64_t v63 = *v61;
          sub_10001EBB0(*v61, v45);
          *((void *)a1 + 1) = v63;
          *((void *)a1 + 2) = v45;
        }
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
        a1[40] = a2[40];
      }
      *((void *)a1 + 6) = *((void *)a2 + 6);
      a1[56] = a2[56];
      if (v12 <= 3)
      {
        unsigned int v64 = ((1 << (8 * v12)) | 2u) >> (8 * v12);
        if (HIWORD(v64))
        {
          *(_DWORD *)&a1[v12] = 14;
          return (char *)a1;
        }
        if ((v64 | 0x10) > 0xFF)
        {
          *(_WORD *)&a1[v12] = 14;
          return (char *)a1;
        }
      }
      a1[v12] = 14;
      break;
    case 0xFu:
      *a1 = *a2;
      if (v12 <= 3)
      {
        unsigned int v47 = ((1 << (8 * v12)) | 2u) >> (8 * v12);
        if (HIWORD(v47))
        {
          *(_DWORD *)&a1[v12] = 15;
          return (char *)a1;
        }
        if ((v47 | 0x10) > 0xFF)
        {
          *(_WORD *)&a1[v12] = 15;
          return (char *)a1;
        }
      }
      a1[v12] = 15;
      break;
    default:
      if (v12 > 3) {
        goto LABEL_101;
      }
      unsigned int v48 = ((1 << (8 * v12)) | 2u) >> (8 * v12);
      unsigned int v49 = v48 | 0x10;
      BOOL v18 = HIWORD(v48) == 0;
      uint64_t v50 = 2;
      if (!v18) {
        uint64_t v50 = 4;
      }
      if (v49 <= 0xFF) {
LABEL_101:
      }
        uint64_t v50 = 1;
      memcpy(a1, a2, v50 + v12);
      break;
  }
  return (char *)a1;
}

void sub_100145E7C(unsigned __int8 *a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  uint64_t v5 = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  unint64_t v8 = ((((*(void *)(v6 + 64) + 7 + ((v7 + ((v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v7)) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8)
     + 18;
  if (v8 <= 0x39) {
    unint64_t v8 = 57;
  }
  if (v8 > 3) {
    goto LABEL_4;
  }
  unsigned int v10 = ((1 << (8 * v8)) | 2u) >> (8 * v8);
  if (HIWORD(v10))
  {
    unsigned int v9 = *(_DWORD *)&a1[v8];
  }
  else
  {
    if ((v10 | 0x10) <= 0xFF)
    {
LABEL_4:
      unsigned int v9 = a1[v8];
      goto LABEL_9;
    }
    unsigned int v9 = *(unsigned __int16 *)&a1[v8];
  }
LABEL_9:
  unsigned int v11 = v9 - 16;
  if (v9 >= 0x10)
  {
    if (v8 <= 3) {
      uint64_t v12 = v8;
    }
    else {
      uint64_t v12 = 4;
    }
    switch(v12)
    {
      case 1:
        int v13 = *a1;
        goto LABEL_18;
      case 2:
        int v13 = *(unsigned __int16 *)a1;
        goto LABEL_18;
      case 3:
        int v13 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_18;
      case 4:
        int v13 = *(_DWORD *)a1;
LABEL_18:
        int v14 = (v13 | (v11 << (8 * v8))) + 16;
        unsigned int v9 = v13 + 16;
        if (v8 < 4) {
          unsigned int v9 = v14;
        }
        break;
      default:
        break;
    }
  }
  switch(v9)
  {
    case 8u:
      (*(void (**)(unsigned __int8 *, uint64_t))(v3 + 8))(a1, AssociatedTypeWitness);
      swift_bridgeObjectRelease();
      (*(void (**)(unint64_t, uint64_t))(v6 + 8))((((unint64_t)&a1[v4 + 7] & 0xFFFFFFFFFFFFFFF8) + v7 + 8) & ~v7, v5);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      break;
    case 9u:
      uint64_t v15 = *(void **)a1;

      break;
    case 0xCu:
      uint64_t v16 = *(void *)a1;
      uint64_t v17 = *((void *)a1 + 1);
      char v18 = a1[16];
      sub_1000D31F8(v16, v17, v18);
      break;
    case 0xEu:
      unint64_t v19 = *((void *)a1 + 2);
      if (v19 >> 60 != 11 && v19 >> 60 != 15)
      {
        uint64_t v20 = *((void *)a1 + 1);
        sub_10001E9C0(v20, v19);
      }
      break;
    default:
      return;
  }
}

char *sub_100146224(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = *(void *)(v8 + 64) + 7;
  unint64_t v11 = (((v10 + ((v9 + ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  if (v11 + 18 <= 0x39) {
    uint64_t v12 = 57;
  }
  else {
    uint64_t v12 = v11 + 18;
  }
  if (v12 > 3) {
    goto LABEL_5;
  }
  unsigned int v14 = ((1 << (8 * v12)) | 2u) >> (8 * v12);
  if (HIWORD(v14))
  {
    unsigned int v13 = *(_DWORD *)&a2[v12];
  }
  else
  {
    if ((v14 | 0x10) <= 0xFF)
    {
LABEL_5:
      unsigned int v13 = a2[v12];
      goto LABEL_10;
    }
    unsigned int v13 = *(unsigned __int16 *)&a2[v12];
  }
LABEL_10:
  unsigned int v15 = v13 - 16;
  if (v13 >= 0x10)
  {
    if (v12 <= 3) {
      uint64_t v16 = v12;
    }
    else {
      uint64_t v16 = 4;
    }
    switch(v16)
    {
      case 1:
        int v17 = *a2;
        goto LABEL_19;
      case 2:
        int v17 = *(unsigned __int16 *)a2;
        goto LABEL_19;
      case 3:
        int v17 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_19;
      case 4:
        int v17 = *(_DWORD *)a2;
LABEL_19:
        int v18 = (v17 | (v15 << (8 * v12))) + 16;
        unsigned int v13 = v17 + 16;
        if (v12 < 4) {
          unsigned int v13 = v18;
        }
        break;
      default:
        break;
    }
  }
  switch(v13)
  {
    case 0u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((void *)a1 + 2) = *((void *)a2 + 2);
      if (v12 <= 3)
      {
        unsigned int v19 = ((1 << (8 * v12)) | 2u) >> (8 * v12);
        if (HIWORD(v19))
        {
          *(_DWORD *)&a1[v12] = 0;
          return (char *)a1;
        }
        if ((v19 | 0x10) > 0xFF)
        {
          *(_WORD *)&a1[v12] = 0;
          return (char *)a1;
        }
      }
      a1[v12] = 0;
      break;
    case 1u:
      *(void *)a1 = *(void *)a2;
      if (v12 <= 3)
      {
        unsigned int v20 = ((1 << (8 * v12)) | 2u) >> (8 * v12);
        if (HIWORD(v20))
        {
          *(_DWORD *)&a1[v12] = 1;
          return (char *)a1;
        }
        if ((v20 | 0x10) > 0xFF)
        {
          __int16 v58 = 1;
          goto LABEL_130;
        }
      }
      a1[v12] = 1;
      break;
    case 2u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      if (v12 <= 3)
      {
        unsigned int v21 = ((1 << (8 * v12)) | 2u) >> (8 * v12);
        if (HIWORD(v21))
        {
          *(_DWORD *)&a1[v12] = 2;
          return (char *)a1;
        }
        if ((v21 | 0x10) > 0xFF)
        {
          __int16 v58 = 2;
          goto LABEL_130;
        }
      }
      a1[v12] = 2;
      break;
    case 3u:
      *a1 = *a2;
      if (v12 <= 3)
      {
        unsigned int v22 = ((1 << (8 * v12)) | 2u) >> (8 * v12);
        if (HIWORD(v22))
        {
          *(_DWORD *)&a1[v12] = 3;
          return (char *)a1;
        }
        if ((v22 | 0x10) > 0xFF)
        {
          __int16 v58 = 3;
          goto LABEL_130;
        }
      }
      a1[v12] = 3;
      break;
    case 4u:
      *a1 = *a2;
      if (v12 <= 3)
      {
        unsigned int v23 = ((1 << (8 * v12)) | 2u) >> (8 * v12);
        if (HIWORD(v23))
        {
          *(_DWORD *)&a1[v12] = 4;
          return (char *)a1;
        }
        if ((v23 | 0x10) > 0xFF)
        {
          __int16 v58 = 4;
          goto LABEL_130;
        }
      }
      a1[v12] = 4;
      break;
    case 5u:
      *a1 = *a2;
      if (v12 <= 3)
      {
        unsigned int v24 = ((1 << (8 * v12)) | 2u) >> (8 * v12);
        if (HIWORD(v24))
        {
          *(_DWORD *)&a1[v12] = 5;
          return (char *)a1;
        }
        if ((v24 | 0x10) > 0xFF)
        {
          __int16 v58 = 5;
          goto LABEL_130;
        }
      }
      a1[v12] = 5;
      break;
    case 6u:
      *a1 = *a2;
      if (v12 <= 3)
      {
        unsigned int v25 = ((1 << (8 * v12)) | 2u) >> (8 * v12);
        if (HIWORD(v25))
        {
          *(_DWORD *)&a1[v12] = 6;
          return (char *)a1;
        }
        if ((v25 | 0x10) > 0xFF)
        {
          __int16 v58 = 6;
          goto LABEL_130;
        }
      }
      a1[v12] = 6;
      break;
    case 7u:
      *a1 = *a2;
      if (v12 <= 3)
      {
        unsigned int v26 = ((1 << (8 * v12)) | 2u) >> (8 * v12);
        if (HIWORD(v26))
        {
          *(_DWORD *)&a1[v12] = 7;
          return (char *)a1;
        }
        if ((v26 | 0x10) > 0xFF)
        {
          __int16 v58 = 7;
          goto LABEL_130;
        }
      }
      a1[v12] = 7;
      break;
    case 8u:
      unint64_t v60 = v11 + 16;
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      unsigned int v44 = (void *)((unint64_t)&a1[v6 + 7] & 0xFFFFFFFFFFFFFFF8);
      unint64_t v45 = (void *)((unint64_t)&a2[v6 + 7] & 0xFFFFFFFFFFFFFFF8);
      *unsigned int v44 = *v45;
      uint64_t v46 = ((unint64_t)v44 + v9 + 8) & ~v9;
      uint64_t v47 = ((unint64_t)v45 + v9 + 8) & ~v9;
      unsigned int v48 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
      swift_bridgeObjectRetain();
      v48(v46, v47, v7);
      unsigned int v49 = (void *)((v10 + v46) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v50 = (void *)((v10 + v47) & 0xFFFFFFFFFFFFFFF8);
      *unsigned int v49 = *v50;
      unsigned int v51 = (void *)(((unint64_t)v49 + 15) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v52 = (void *)(((unint64_t)v50 + 15) & 0xFFFFFFFFFFFFFFF8);
      *unsigned int v51 = *v52;
      v51[1] = v52[1];
      uint64_t v53 = (char *)&a1[v60];
      *uint64_t v53 = a2[v60];
      v53[1] = a2[v60 + 1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v12 <= 3)
      {
        unsigned int v54 = ((1 << (8 * v12)) | 2u) >> (8 * v12);
        if (HIWORD(v54))
        {
          *(_DWORD *)&a1[v12] = 8;
          return (char *)a1;
        }
        if ((v54 | 0x10) > 0xFF)
        {
          __int16 v58 = 8;
          goto LABEL_130;
        }
      }
      a1[v12] = 8;
      break;
    case 9u:
      unsigned int v27 = *(void **)a2;
      *(void *)a1 = *(void *)a2;
      id v28 = v27;
      if (v12 <= 3)
      {
        unsigned int v29 = ((1 << (8 * v12)) | 2u) >> (8 * v12);
        if (HIWORD(v29))
        {
          *(_DWORD *)&a1[v12] = 9;
          return (char *)a1;
        }
        if ((v29 | 0x10) > 0xFF)
        {
          __int16 v58 = 9;
          goto LABEL_130;
        }
      }
      a1[v12] = 9;
      break;
    case 0xAu:
      *a1 = *a2;
      if (v12 <= 3)
      {
        unsigned int v30 = ((1 << (8 * v12)) | 2u) >> (8 * v12);
        if (HIWORD(v30))
        {
          *(_DWORD *)&a1[v12] = 10;
          return (char *)a1;
        }
        if ((v30 | 0x10) > 0xFF)
        {
          __int16 v58 = 10;
          goto LABEL_130;
        }
      }
      a1[v12] = 10;
      break;
    case 0xBu:
      *(_WORD *)a1 = *(_WORD *)a2;
      if (v12 <= 3)
      {
        unsigned int v31 = ((1 << (8 * v12)) | 2u) >> (8 * v12);
        if (HIWORD(v31))
        {
          *(_DWORD *)&a1[v12] = 11;
          return (char *)a1;
        }
        if ((v31 | 0x10) > 0xFF)
        {
          __int16 v58 = 11;
          goto LABEL_130;
        }
      }
      a1[v12] = 11;
      break;
    case 0xCu:
      uint64_t v32 = *(void *)a2;
      uint64_t v33 = *((void *)a2 + 1);
      char v34 = a2[16];
      sub_10009C5FC(v32, v33, v34);
      *(void *)a1 = v32;
      *((void *)a1 + 1) = v33;
      a1[16] = v34;
      if (v12 <= 3)
      {
        unsigned int v35 = ((1 << (8 * v12)) | 2u) >> (8 * v12);
        if (HIWORD(v35))
        {
          *(_DWORD *)&a1[v12] = 12;
          return (char *)a1;
        }
        if ((v35 | 0x10) > 0xFF)
        {
          __int16 v58 = 12;
          goto LABEL_130;
        }
      }
      a1[v12] = 12;
      break;
    case 0xDu:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((void *)a1 + 2) = *((void *)a2 + 2);
      if (v12 <= 3)
      {
        unsigned int v36 = ((1 << (8 * v12)) | 2u) >> (8 * v12);
        if (HIWORD(v36))
        {
          *(_DWORD *)&a1[v12] = 13;
          return (char *)a1;
        }
        if ((v36 | 0x10) > 0xFF)
        {
          __int16 v58 = 13;
          goto LABEL_130;
        }
      }
      a1[v12] = 13;
      break;
    case 0xEu:
      unint64_t v37 = *((void *)a2 + 2);
      if (v37 >> 60 == 11)
      {
        long long v38 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1) = v38;
        *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      }
      else
      {
        unint64_t v55 = (uint64_t *)(a2 + 8);
        *(void *)a1 = *(void *)a2;
        if (v37 >> 60 == 15)
        {
          *(_OWORD *)(a1 + 8) = *(_OWORD *)v55;
        }
        else
        {
          uint64_t v56 = *v55;
          sub_10001EBB0(*v55, v37);
          *((void *)a1 + 1) = v56;
          *((void *)a1 + 2) = v37;
        }
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
        a1[40] = a2[40];
      }
      *((void *)a1 + 6) = *((void *)a2 + 6);
      a1[56] = a2[56];
      if (v12 <= 3)
      {
        unsigned int v57 = ((1 << (8 * v12)) | 2u) >> (8 * v12);
        if (HIWORD(v57))
        {
          *(_DWORD *)&a1[v12] = 14;
          return (char *)a1;
        }
        if ((v57 | 0x10) > 0xFF)
        {
          __int16 v58 = 14;
          goto LABEL_130;
        }
      }
      a1[v12] = 14;
      break;
    case 0xFu:
      *a1 = *a2;
      if (v12 > 3) {
        goto LABEL_79;
      }
      unsigned int v39 = ((1 << (8 * v12)) | 2u) >> (8 * v12);
      if (HIWORD(v39))
      {
        *(_DWORD *)&a1[v12] = 15;
        return (char *)a1;
      }
      if ((v39 | 0x10) > 0xFF)
      {
        __int16 v58 = 15;
LABEL_130:
        *(_WORD *)&a1[v12] = v58;
      }
      else
      {
LABEL_79:
        a1[v12] = 15;
      }
      break;
    default:
      if (v12 > 3) {
        goto LABEL_84;
      }
      unsigned int v40 = ((1 << (8 * v12)) | 2u) >> (8 * v12);
      unsigned int v41 = v40 | 0x10;
      BOOL v42 = HIWORD(v40) == 0;
      uint64_t v43 = 2;
      if (!v42) {
        uint64_t v43 = 4;
      }
      if (v41 <= 0xFF) {
LABEL_84:
      }
        uint64_t v43 = 1;
      memcpy(a1, a2, v43 + v12);
      break;
  }
  return (char *)a1;
}

unsigned __int8 *sub_100146BF8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1 == a2) {
    return a1;
  }
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v77 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v5 = *(void *)(v77 + 64);
  uint64_t v6 = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v7 + 64) + 7;
  unint64_t v10 = (((v9 + ((v8 + ((v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  if (v10 + 18 <= 0x39) {
    uint64_t v11 = 57;
  }
  else {
    uint64_t v11 = v10 + 18;
  }
  if (v11 > 3) {
    goto LABEL_6;
  }
  unsigned int v13 = ((1 << (8 * v11)) | 2u) >> (8 * v11);
  if (HIWORD(v13))
  {
    unsigned int v12 = *(_DWORD *)&a1[v11];
    goto LABEL_11;
  }
  if ((v13 | 0x10) <= 0xFF) {
LABEL_6:
  }
    unsigned int v12 = a1[v11];
  else {
    unsigned int v12 = *(unsigned __int16 *)&a1[v11];
  }
LABEL_11:
  unsigned int v14 = v12 - 16;
  if (v12 >= 0x10)
  {
    if (v11 <= 3) {
      uint64_t v15 = v11;
    }
    else {
      uint64_t v15 = 4;
    }
    switch(v15)
    {
      case 1:
        int v16 = *a1;
        if (v11 < 4) {
          goto LABEL_23;
        }
        goto LABEL_24;
      case 2:
        int v16 = *(unsigned __int16 *)a1;
        if (v11 >= 4) {
          goto LABEL_24;
        }
        goto LABEL_23;
      case 3:
        int v16 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        if (v11 >= 4) {
          goto LABEL_24;
        }
        goto LABEL_23;
      case 4:
        int v16 = *(_DWORD *)a1;
        if (v11 < 4) {
LABEL_23:
        }
          v16 |= v14 << (8 * v11);
LABEL_24:
        unsigned int v12 = v16 + 16;
        break;
      default:
        break;
    }
  }
  uint64_t v76 = ~v8;
  switch(v12)
  {
    case 8u:
      (*(void (**)(unsigned __int8 *, uint64_t))(v77 + 8))(a1, AssociatedTypeWitness);
      uint64_t v17 = (uint64_t)&a1[v5 + 7];
      unint64_t v75 = (((v9 + ((v8 + ((v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v18 = v5;
      uint64_t v19 = AssociatedTypeWitness;
      uint64_t v20 = v6;
      unint64_t v21 = v17 & 0xFFFFFFFFFFFFFFF8;
      swift_bridgeObjectRelease();
      (*(void (**)(unint64_t, uint64_t))(v7 + 8))((v21 + v8 + 8) & v76, v20);
      swift_bridgeObjectRelease();
      uint64_t v6 = v20;
      uint64_t AssociatedTypeWitness = v19;
      uint64_t v5 = v18;
      unint64_t v10 = v75;
      swift_bridgeObjectRelease();
      break;
    case 9u:

      break;
    case 0xCu:
      sub_1000D31F8(*(void *)a1, *((void *)a1 + 1), a1[16]);
      break;
    case 0xEu:
      unint64_t v22 = *((void *)a1 + 2);
      if (v22 >> 60 != 11 && v22 >> 60 != 15) {
        sub_10001E9C0(*((void *)a1 + 1), v22);
      }
      break;
    default:
      break;
  }
  if (v11 > 3) {
    goto LABEL_33;
  }
  unsigned int v24 = ((1 << (8 * v11)) | 2u) >> (8 * v11);
  if (HIWORD(v24))
  {
    unsigned int v23 = *(_DWORD *)&a2[v11];
    goto LABEL_38;
  }
  if ((v24 | 0x10) <= 0xFF) {
LABEL_33:
  }
    unsigned int v23 = a2[v11];
  else {
    unsigned int v23 = *(unsigned __int16 *)&a2[v11];
  }
LABEL_38:
  unsigned int v25 = v23 - 16;
  if (v23 >= 0x10)
  {
    if (v11 <= 3) {
      uint64_t v26 = v11;
    }
    else {
      uint64_t v26 = 4;
    }
    switch(v26)
    {
      case 1:
        int v27 = *a2;
        if (v11 < 4) {
          goto LABEL_46;
        }
        goto LABEL_50;
      case 2:
        int v27 = *(unsigned __int16 *)a2;
        if (v11 < 4) {
          goto LABEL_46;
        }
        goto LABEL_50;
      case 3:
        int v27 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        if (v11 < 4) {
          goto LABEL_46;
        }
        goto LABEL_50;
      case 4:
        int v27 = *(_DWORD *)a2;
        if (v11 < 4) {
LABEL_46:
        }
          unsigned int v23 = (v27 | (v25 << (8 * v11))) + 16;
        else {
LABEL_50:
        }
          unsigned int v23 = v27 + 16;
        break;
      default:
        break;
    }
  }
  switch(v23)
  {
    case 0u:
      long long v28 = *(_OWORD *)a2;
      *((void *)a1 + 2) = *((void *)a2 + 2);
      *(_OWORD *)a1 = v28;
      if (v11 <= 3)
      {
        unsigned int v29 = ((1 << (8 * v11)) | 2u) >> (8 * v11);
        if (HIWORD(v29))
        {
          *(_DWORD *)&a1[v11] = 0;
          return a1;
        }
        if ((v29 | 0x10) > 0xFF)
        {
          *(_WORD *)&a1[v11] = 0;
          return a1;
        }
      }
      a1[v11] = 0;
      break;
    case 1u:
      *(void *)a1 = *(void *)a2;
      if (v11 <= 3)
      {
        unsigned int v30 = ((1 << (8 * v11)) | 2u) >> (8 * v11);
        if (HIWORD(v30))
        {
          *(_DWORD *)&a1[v11] = 1;
          return a1;
        }
        if ((v30 | 0x10) > 0xFF)
        {
          __int16 v73 = 1;
          goto LABEL_160;
        }
      }
      a1[v11] = 1;
      break;
    case 2u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      if (v11 <= 3)
      {
        unsigned int v31 = ((1 << (8 * v11)) | 2u) >> (8 * v11);
        if (HIWORD(v31))
        {
          *(_DWORD *)&a1[v11] = 2;
          return a1;
        }
        if ((v31 | 0x10) > 0xFF)
        {
          __int16 v73 = 2;
          goto LABEL_160;
        }
      }
      a1[v11] = 2;
      break;
    case 3u:
      *a1 = *a2;
      if (v11 <= 3)
      {
        unsigned int v32 = ((1 << (8 * v11)) | 2u) >> (8 * v11);
        if (HIWORD(v32))
        {
          *(_DWORD *)&a1[v11] = 3;
          return a1;
        }
        if ((v32 | 0x10) > 0xFF)
        {
          __int16 v73 = 3;
          goto LABEL_160;
        }
      }
      a1[v11] = 3;
      break;
    case 4u:
      *a1 = *a2;
      if (v11 <= 3)
      {
        unsigned int v33 = ((1 << (8 * v11)) | 2u) >> (8 * v11);
        if (HIWORD(v33))
        {
          *(_DWORD *)&a1[v11] = 4;
          return a1;
        }
        if ((v33 | 0x10) > 0xFF)
        {
          __int16 v73 = 4;
          goto LABEL_160;
        }
      }
      a1[v11] = 4;
      break;
    case 5u:
      *a1 = *a2;
      if (v11 <= 3)
      {
        unsigned int v34 = ((1 << (8 * v11)) | 2u) >> (8 * v11);
        if (HIWORD(v34))
        {
          *(_DWORD *)&a1[v11] = 5;
          return a1;
        }
        if ((v34 | 0x10) > 0xFF)
        {
          __int16 v73 = 5;
          goto LABEL_160;
        }
      }
      a1[v11] = 5;
      break;
    case 6u:
      *a1 = *a2;
      if (v11 <= 3)
      {
        unsigned int v35 = ((1 << (8 * v11)) | 2u) >> (8 * v11);
        if (HIWORD(v35))
        {
          *(_DWORD *)&a1[v11] = 6;
          return a1;
        }
        if ((v35 | 0x10) > 0xFF)
        {
          __int16 v73 = 6;
          goto LABEL_160;
        }
      }
      a1[v11] = 6;
      break;
    case 7u:
      *a1 = *a2;
      if (v11 <= 3)
      {
        unsigned int v36 = ((1 << (8 * v11)) | 2u) >> (8 * v11);
        if (HIWORD(v36))
        {
          *(_DWORD *)&a1[v11] = 7;
          return a1;
        }
        if ((v36 | 0x10) > 0xFF)
        {
          __int16 v73 = 7;
          goto LABEL_160;
        }
      }
      a1[v11] = 7;
      break;
    case 8u:
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v77 + 16))(a1, a2, AssociatedTypeWitness);
      uint64_t v56 = (void *)((unint64_t)&a1[v5 + 7] & 0xFFFFFFFFFFFFFFF8);
      unsigned int v57 = (void *)((unint64_t)&a2[v5 + 7] & 0xFFFFFFFFFFFFFFF8);
      void *v56 = *v57;
      uint64_t v58 = ((unint64_t)v56 + v8 + 8) & v76;
      uint64_t v59 = v6;
      uint64_t v60 = ((unint64_t)v57 + v8 + 8) & v76;
      unint64_t v61 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
      swift_bridgeObjectRetain();
      v61(v58, v60, v59);
      unsigned int v62 = (void *)((v9 + v58) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v63 = (void *)((v9 + v60) & 0xFFFFFFFFFFFFFFF8);
      *unsigned int v62 = *v63;
      unsigned int v64 = (void *)(((unint64_t)v62 + 15) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v65 = (void *)(((unint64_t)v63 + 15) & 0xFFFFFFFFFFFFFFF8);
      void *v64 = *v65;
      v64[1] = v65[1];
      int v66 = &a1[v10 + 16];
      *int v66 = a2[v10 + 16];
      v66[1] = a2[v10 + 17];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v11 <= 3)
      {
        unsigned int v67 = ((1 << (8 * v11)) | 2u) >> (8 * v11);
        if (HIWORD(v67))
        {
          *(_DWORD *)&a1[v11] = 8;
          return a1;
        }
        if ((v67 | 0x10) > 0xFF)
        {
          __int16 v73 = 8;
          goto LABEL_160;
        }
      }
      a1[v11] = 8;
      break;
    case 9u:
      unint64_t v37 = *(void **)a2;
      *(void *)a1 = *(void *)a2;
      id v38 = v37;
      if (v11 <= 3)
      {
        unsigned int v39 = ((1 << (8 * v11)) | 2u) >> (8 * v11);
        if (HIWORD(v39))
        {
          *(_DWORD *)&a1[v11] = 9;
          return a1;
        }
        if ((v39 | 0x10) > 0xFF)
        {
          __int16 v73 = 9;
          goto LABEL_160;
        }
      }
      a1[v11] = 9;
      break;
    case 0xAu:
      *a1 = *a2;
      if (v11 <= 3)
      {
        unsigned int v40 = ((1 << (8 * v11)) | 2u) >> (8 * v11);
        if (HIWORD(v40))
        {
          *(_DWORD *)&a1[v11] = 10;
          return a1;
        }
        if ((v40 | 0x10) > 0xFF)
        {
          __int16 v73 = 10;
          goto LABEL_160;
        }
      }
      a1[v11] = 10;
      break;
    case 0xBu:
      *(_WORD *)a1 = *(_WORD *)a2;
      if (v11 <= 3)
      {
        unsigned int v41 = ((1 << (8 * v11)) | 2u) >> (8 * v11);
        if (HIWORD(v41))
        {
          *(_DWORD *)&a1[v11] = 11;
          return a1;
        }
        if ((v41 | 0x10) > 0xFF)
        {
          __int16 v73 = 11;
          goto LABEL_160;
        }
      }
      a1[v11] = 11;
      break;
    case 0xCu:
      uint64_t v42 = *(void *)a2;
      uint64_t v43 = *((void *)a2 + 1);
      char v44 = a2[16];
      sub_10009C5FC(v42, v43, v44);
      *(void *)a1 = v42;
      *((void *)a1 + 1) = v43;
      a1[16] = v44;
      if (v11 <= 3)
      {
        unsigned int v45 = ((1 << (8 * v11)) | 2u) >> (8 * v11);
        if (HIWORD(v45))
        {
          *(_DWORD *)&a1[v11] = 12;
          return a1;
        }
        if ((v45 | 0x10) > 0xFF)
        {
          __int16 v73 = 12;
          goto LABEL_160;
        }
      }
      a1[v11] = 12;
      break;
    case 0xDu:
      long long v46 = *(_OWORD *)a2;
      *((void *)a1 + 2) = *((void *)a2 + 2);
      *(_OWORD *)a1 = v46;
      if (v11 <= 3)
      {
        unsigned int v47 = ((1 << (8 * v11)) | 2u) >> (8 * v11);
        if (HIWORD(v47))
        {
          *(_DWORD *)&a1[v11] = 13;
          return a1;
        }
        if ((v47 | 0x10) > 0xFF)
        {
          __int16 v73 = 13;
          goto LABEL_160;
        }
      }
      a1[v11] = 13;
      break;
    case 0xEu:
      if (*((void *)a2 + 2) >> 60 == 11)
      {
        long long v48 = *(_OWORD *)a2;
        long long v49 = *((_OWORD *)a2 + 1);
        long long v50 = *((_OWORD *)a2 + 2);
        *((void *)a1 + 6) = *((void *)a2 + 6);
        *((_OWORD *)a1 + 1) = v49;
        *((_OWORD *)a1 + 2) = v50;
        *(_OWORD *)a1 = v48;
      }
      else
      {
        *(void *)a1 = *(void *)a2;
        unsigned int v68 = (uint64_t *)(a2 + 8);
        unint64_t v69 = *((void *)a2 + 2);
        if (v69 >> 60 == 15)
        {
          *(_OWORD *)(a1 + 8) = *(_OWORD *)v68;
        }
        else
        {
          uint64_t v70 = *v68;
          sub_10001EBB0(*v68, *((void *)a2 + 2));
          *((void *)a1 + 1) = v70;
          *((void *)a1 + 2) = v69;
        }
        long long v71 = *(_OWORD *)(a2 + 24);
        a1[40] = a2[40];
        *(_OWORD *)(a1 + 24) = v71;
        *((void *)a1 + 6) = *((void *)a2 + 6);
      }
      a1[56] = a2[56];
      if (v11 <= 3)
      {
        unsigned int v72 = ((1 << (8 * v11)) | 2u) >> (8 * v11);
        if (HIWORD(v72))
        {
          *(_DWORD *)&a1[v11] = 14;
          return a1;
        }
        if ((v72 | 0x10) > 0xFF)
        {
          __int16 v73 = 14;
          goto LABEL_160;
        }
      }
      a1[v11] = 14;
      break;
    case 0xFu:
      *a1 = *a2;
      if (v11 > 3) {
        goto LABEL_109;
      }
      unsigned int v51 = ((1 << (8 * v11)) | 2u) >> (8 * v11);
      if (HIWORD(v51))
      {
        *(_DWORD *)&a1[v11] = 15;
        return a1;
      }
      if ((v51 | 0x10) > 0xFF)
      {
        __int16 v73 = 15;
LABEL_160:
        *(_WORD *)&a1[v11] = v73;
      }
      else
      {
LABEL_109:
        a1[v11] = 15;
      }
      break;
    default:
      if (v11 > 3) {
        goto LABEL_114;
      }
      unsigned int v52 = ((1 << (8 * v11)) | 2u) >> (8 * v11);
      unsigned int v53 = v52 | 0x10;
      BOOL v54 = HIWORD(v52) == 0;
      uint64_t v55 = 2;
      if (!v54) {
        uint64_t v55 = 4;
      }
      if (v53 <= 0xFF) {
LABEL_114:
      }
        uint64_t v55 = 1;
      memcpy(a1, a2, v55 + v11);
      break;
  }
  return a1;
}

char *sub_100147808(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = *(void *)(v8 + 64) + 7;
  unint64_t v11 = (((v10 + ((v9 + ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  if (v11 + 18 <= 0x39) {
    uint64_t v12 = 57;
  }
  else {
    uint64_t v12 = v11 + 18;
  }
  if (v12 > 3) {
    goto LABEL_5;
  }
  unsigned int v14 = ((1 << (8 * v12)) | 2u) >> (8 * v12);
  if (HIWORD(v14))
  {
    unsigned int v13 = *(_DWORD *)&a2[v12];
  }
  else
  {
    if ((v14 | 0x10) <= 0xFF)
    {
LABEL_5:
      unsigned int v13 = a2[v12];
      goto LABEL_10;
    }
    unsigned int v13 = *(unsigned __int16 *)&a2[v12];
  }
LABEL_10:
  unsigned int v15 = v13 - 16;
  if (v13 >= 0x10)
  {
    if (v12 <= 3) {
      uint64_t v16 = v12;
    }
    else {
      uint64_t v16 = 4;
    }
    switch(v16)
    {
      case 1:
        int v17 = *a2;
        goto LABEL_19;
      case 2:
        int v17 = *(unsigned __int16 *)a2;
        goto LABEL_19;
      case 3:
        int v17 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_19;
      case 4:
        int v17 = *(_DWORD *)a2;
LABEL_19:
        int v18 = (v17 | (v15 << (8 * v12))) + 16;
        unsigned int v13 = v17 + 16;
        if (v12 < 4) {
          unsigned int v13 = v18;
        }
        break;
      default:
        break;
    }
  }
  switch(v13)
  {
    case 0u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((void *)a1 + 2) = *((void *)a2 + 2);
      if (v12 <= 3)
      {
        unsigned int v19 = ((1 << (8 * v12)) | 2u) >> (8 * v12);
        if (HIWORD(v19))
        {
          *(_DWORD *)&a1[v12] = 0;
          return (char *)a1;
        }
        if ((v19 | 0x10) > 0xFF)
        {
          *(_WORD *)&a1[v12] = 0;
          return (char *)a1;
        }
      }
      a1[v12] = 0;
      break;
    case 1u:
      *(void *)a1 = *(void *)a2;
      if (v12 <= 3)
      {
        unsigned int v20 = ((1 << (8 * v12)) | 2u) >> (8 * v12);
        if (HIWORD(v20))
        {
          *(_DWORD *)&a1[v12] = 1;
          return (char *)a1;
        }
        if ((v20 | 0x10) > 0xFF)
        {
          __int16 v47 = 1;
          goto LABEL_124;
        }
      }
      a1[v12] = 1;
      break;
    case 2u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      if (v12 <= 3)
      {
        unsigned int v21 = ((1 << (8 * v12)) | 2u) >> (8 * v12);
        if (HIWORD(v21))
        {
          *(_DWORD *)&a1[v12] = 2;
          return (char *)a1;
        }
        if ((v21 | 0x10) > 0xFF)
        {
          __int16 v47 = 2;
          goto LABEL_124;
        }
      }
      a1[v12] = 2;
      break;
    case 3u:
      *a1 = *a2;
      if (v12 <= 3)
      {
        unsigned int v22 = ((1 << (8 * v12)) | 2u) >> (8 * v12);
        if (HIWORD(v22))
        {
          *(_DWORD *)&a1[v12] = 3;
          return (char *)a1;
        }
        if ((v22 | 0x10) > 0xFF)
        {
          __int16 v47 = 3;
          goto LABEL_124;
        }
      }
      a1[v12] = 3;
      break;
    case 4u:
      *a1 = *a2;
      if (v12 <= 3)
      {
        unsigned int v23 = ((1 << (8 * v12)) | 2u) >> (8 * v12);
        if (HIWORD(v23))
        {
          *(_DWORD *)&a1[v12] = 4;
          return (char *)a1;
        }
        if ((v23 | 0x10) > 0xFF)
        {
          __int16 v47 = 4;
          goto LABEL_124;
        }
      }
      a1[v12] = 4;
      break;
    case 5u:
      *a1 = *a2;
      if (v12 <= 3)
      {
        unsigned int v24 = ((1 << (8 * v12)) | 2u) >> (8 * v12);
        if (HIWORD(v24))
        {
          *(_DWORD *)&a1[v12] = 5;
          return (char *)a1;
        }
        if ((v24 | 0x10) > 0xFF)
        {
          __int16 v47 = 5;
          goto LABEL_124;
        }
      }
      a1[v12] = 5;
      break;
    case 6u:
      *a1 = *a2;
      if (v12 <= 3)
      {
        unsigned int v25 = ((1 << (8 * v12)) | 2u) >> (8 * v12);
        if (HIWORD(v25))
        {
          *(_DWORD *)&a1[v12] = 6;
          return (char *)a1;
        }
        if ((v25 | 0x10) > 0xFF)
        {
          __int16 v47 = 6;
          goto LABEL_124;
        }
      }
      a1[v12] = 6;
      break;
    case 7u:
      *a1 = *a2;
      if (v12 <= 3)
      {
        unsigned int v26 = ((1 << (8 * v12)) | 2u) >> (8 * v12);
        if (HIWORD(v26))
        {
          *(_DWORD *)&a1[v12] = 7;
          return (char *)a1;
        }
        if ((v26 | 0x10) > 0xFF)
        {
          __int16 v47 = 7;
          goto LABEL_124;
        }
      }
      a1[v12] = 7;
      break;
    case 8u:
      unint64_t v49 = v11 + 16;
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
      unsigned int v39 = (void *)((unint64_t)&a1[v6 + 7] & 0xFFFFFFFFFFFFFFF8);
      unsigned int v40 = (void *)((unint64_t)&a2[v6 + 7] & 0xFFFFFFFFFFFFFFF8);
      *unsigned int v39 = *v40;
      uint64_t v41 = ((unint64_t)v39 + v9 + 8) & ~v9;
      uint64_t v42 = ((unint64_t)v40 + v9 + 8) & ~v9;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v41, v42, v7);
      uint64_t v43 = (void *)((v10 + v41) & 0xFFFFFFFFFFFFFFF8);
      char v44 = (void *)((v10 + v42) & 0xFFFFFFFFFFFFFFF8);
      *uint64_t v43 = *v44;
      *(_OWORD *)(((unint64_t)v43 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v44 + 15) & 0xFFFFFFFFFFFFFFF8);
      unsigned int v45 = (char *)&a1[v49];
      *unsigned int v45 = a2[v49];
      v45[1] = a2[v49 + 1];
      if (v12 <= 3)
      {
        unsigned int v46 = ((1 << (8 * v12)) | 2u) >> (8 * v12);
        if (HIWORD(v46))
        {
          *(_DWORD *)&a1[v12] = 8;
          return (char *)a1;
        }
        if ((v46 | 0x10) > 0xFF)
        {
          __int16 v47 = 8;
          goto LABEL_124;
        }
      }
      a1[v12] = 8;
      break;
    case 9u:
      *(void *)a1 = *(void *)a2;
      if (v12 <= 3)
      {
        unsigned int v27 = ((1 << (8 * v12)) | 2u) >> (8 * v12);
        if (HIWORD(v27))
        {
          *(_DWORD *)&a1[v12] = 9;
          return (char *)a1;
        }
        if ((v27 | 0x10) > 0xFF)
        {
          __int16 v47 = 9;
          goto LABEL_124;
        }
      }
      a1[v12] = 9;
      break;
    case 0xAu:
      *a1 = *a2;
      if (v12 <= 3)
      {
        unsigned int v28 = ((1 << (8 * v12)) | 2u) >> (8 * v12);
        if (HIWORD(v28))
        {
          *(_DWORD *)&a1[v12] = 10;
          return (char *)a1;
        }
        if ((v28 | 0x10) > 0xFF)
        {
          __int16 v47 = 10;
          goto LABEL_124;
        }
      }
      a1[v12] = 10;
      break;
    case 0xBu:
      *(_WORD *)a1 = *(_WORD *)a2;
      if (v12 <= 3)
      {
        unsigned int v29 = ((1 << (8 * v12)) | 2u) >> (8 * v12);
        if (HIWORD(v29))
        {
          *(_DWORD *)&a1[v12] = 11;
          return (char *)a1;
        }
        if ((v29 | 0x10) > 0xFF)
        {
          __int16 v47 = 11;
          goto LABEL_124;
        }
      }
      a1[v12] = 11;
      break;
    case 0xCu:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[16] = a2[16];
      if (v12 <= 3)
      {
        unsigned int v30 = ((1 << (8 * v12)) | 2u) >> (8 * v12);
        if (HIWORD(v30))
        {
          *(_DWORD *)&a1[v12] = 12;
          return (char *)a1;
        }
        if ((v30 | 0x10) > 0xFF)
        {
          __int16 v47 = 12;
          goto LABEL_124;
        }
      }
      a1[v12] = 12;
      break;
    case 0xDu:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((void *)a1 + 2) = *((void *)a2 + 2);
      if (v12 <= 3)
      {
        unsigned int v31 = ((1 << (8 * v12)) | 2u) >> (8 * v12);
        if (HIWORD(v31))
        {
          *(_DWORD *)&a1[v12] = 13;
          return (char *)a1;
        }
        if ((v31 | 0x10) > 0xFF)
        {
          __int16 v47 = 13;
          goto LABEL_124;
        }
      }
      a1[v12] = 13;
      break;
    case 0xEu:
      long long v32 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v32;
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
      if (v12 <= 3)
      {
        unsigned int v33 = ((1 << (8 * v12)) | 2u) >> (8 * v12);
        if (HIWORD(v33))
        {
          *(_DWORD *)&a1[v12] = 14;
          return (char *)a1;
        }
        if ((v33 | 0x10) > 0xFF)
        {
          __int16 v47 = 14;
          goto LABEL_124;
        }
      }
      a1[v12] = 14;
      break;
    case 0xFu:
      *a1 = *a2;
      if (v12 > 3) {
        goto LABEL_81;
      }
      unsigned int v34 = ((1 << (8 * v12)) | 2u) >> (8 * v12);
      if (HIWORD(v34))
      {
        *(_DWORD *)&a1[v12] = 15;
        return (char *)a1;
      }
      if ((v34 | 0x10) > 0xFF)
      {
        __int16 v47 = 15;
LABEL_124:
        *(_WORD *)&a1[v12] = v47;
      }
      else
      {
LABEL_81:
        a1[v12] = 15;
      }
      break;
    default:
      if (v12 > 3) {
        goto LABEL_86;
      }
      unsigned int v35 = ((1 << (8 * v12)) | 2u) >> (8 * v12);
      unsigned int v36 = v35 | 0x10;
      BOOL v37 = HIWORD(v35) == 0;
      uint64_t v38 = 2;
      if (!v37) {
        uint64_t v38 = 4;
      }
      if (v36 <= 0xFF) {
LABEL_86:
      }
        uint64_t v38 = 1;
      memcpy(a1, a2, v38 + v12);
      break;
  }
  return (char *)a1;
}

unsigned __int8 *sub_10014814C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1 == a2) {
    return a1;
  }
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v62 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v5 = *(void *)(v62 + 64);
  uint64_t v6 = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v7 + 64) + 7;
  unint64_t v10 = (((v9 + ((v8 + ((v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  if (v10 + 18 <= 0x39) {
    uint64_t v11 = 57;
  }
  else {
    uint64_t v11 = v10 + 18;
  }
  if (v11 > 3) {
    goto LABEL_6;
  }
  unsigned int v13 = ((1 << (8 * v11)) | 2u) >> (8 * v11);
  if (HIWORD(v13))
  {
    unsigned int v12 = *(_DWORD *)&a1[v11];
    goto LABEL_11;
  }
  if ((v13 | 0x10) <= 0xFF) {
LABEL_6:
  }
    unsigned int v12 = a1[v11];
  else {
    unsigned int v12 = *(unsigned __int16 *)&a1[v11];
  }
LABEL_11:
  unsigned int v14 = v12 - 16;
  if (v12 >= 0x10)
  {
    if (v11 <= 3) {
      uint64_t v15 = v11;
    }
    else {
      uint64_t v15 = 4;
    }
    switch(v15)
    {
      case 1:
        int v16 = *a1;
        if (v11 < 4) {
          goto LABEL_23;
        }
        goto LABEL_24;
      case 2:
        int v16 = *(unsigned __int16 *)a1;
        if (v11 >= 4) {
          goto LABEL_24;
        }
        goto LABEL_23;
      case 3:
        int v16 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        if (v11 >= 4) {
          goto LABEL_24;
        }
        goto LABEL_23;
      case 4:
        int v16 = *(_DWORD *)a1;
        if (v11 < 4) {
LABEL_23:
        }
          v16 |= v14 << (8 * v11);
LABEL_24:
        unsigned int v12 = v16 + 16;
        break;
      default:
        break;
    }
  }
  uint64_t v61 = ~v8;
  switch(v12)
  {
    case 8u:
      (*(void (**)(unsigned __int8 *, uint64_t))(v62 + 8))(a1, AssociatedTypeWitness);
      uint64_t v17 = (uint64_t)&a1[v5 + 7];
      unint64_t v60 = (((v9 + ((v8 + ((v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v18 = v5;
      uint64_t v19 = AssociatedTypeWitness;
      uint64_t v20 = v6;
      unint64_t v21 = v17 & 0xFFFFFFFFFFFFFFF8;
      swift_bridgeObjectRelease();
      (*(void (**)(unint64_t, uint64_t))(v7 + 8))((v21 + v8 + 8) & v61, v20);
      swift_bridgeObjectRelease();
      uint64_t v6 = v20;
      uint64_t AssociatedTypeWitness = v19;
      uint64_t v5 = v18;
      unint64_t v10 = v60;
      swift_bridgeObjectRelease();
      break;
    case 9u:

      break;
    case 0xCu:
      sub_1000D31F8(*(void *)a1, *((void *)a1 + 1), a1[16]);
      break;
    case 0xEu:
      unint64_t v22 = *((void *)a1 + 2);
      if (v22 >> 60 != 11 && v22 >> 60 != 15) {
        sub_10001E9C0(*((void *)a1 + 1), v22);
      }
      break;
    default:
      break;
  }
  if (v11 > 3) {
    goto LABEL_33;
  }
  unsigned int v24 = ((1 << (8 * v11)) | 2u) >> (8 * v11);
  if (HIWORD(v24))
  {
    unsigned int v23 = *(_DWORD *)&a2[v11];
    goto LABEL_38;
  }
  if ((v24 | 0x10) <= 0xFF) {
LABEL_33:
  }
    unsigned int v23 = a2[v11];
  else {
    unsigned int v23 = *(unsigned __int16 *)&a2[v11];
  }
LABEL_38:
  unsigned int v25 = v23 - 16;
  if (v23 >= 0x10)
  {
    if (v11 <= 3) {
      uint64_t v26 = v11;
    }
    else {
      uint64_t v26 = 4;
    }
    switch(v26)
    {
      case 1:
        int v27 = *a2;
        if (v11 < 4) {
          goto LABEL_46;
        }
        goto LABEL_50;
      case 2:
        int v27 = *(unsigned __int16 *)a2;
        if (v11 < 4) {
          goto LABEL_46;
        }
        goto LABEL_50;
      case 3:
        int v27 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        if (v11 < 4) {
          goto LABEL_46;
        }
        goto LABEL_50;
      case 4:
        int v27 = *(_DWORD *)a2;
        if (v11 < 4) {
LABEL_46:
        }
          unsigned int v23 = (v27 | (v25 << (8 * v11))) + 16;
        else {
LABEL_50:
        }
          unsigned int v23 = v27 + 16;
        break;
      default:
        break;
    }
  }
  switch(v23)
  {
    case 0u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((void *)a1 + 2) = *((void *)a2 + 2);
      if (v11 <= 3)
      {
        unsigned int v28 = ((1 << (8 * v11)) | 2u) >> (8 * v11);
        if (HIWORD(v28))
        {
          *(_DWORD *)&a1[v11] = 0;
          return a1;
        }
        if ((v28 | 0x10) > 0xFF)
        {
          *(_WORD *)&a1[v11] = 0;
          return a1;
        }
      }
      a1[v11] = 0;
      break;
    case 1u:
      *(void *)a1 = *(void *)a2;
      if (v11 <= 3)
      {
        unsigned int v29 = ((1 << (8 * v11)) | 2u) >> (8 * v11);
        if (HIWORD(v29))
        {
          *(_DWORD *)&a1[v11] = 1;
          return a1;
        }
        if ((v29 | 0x10) > 0xFF)
        {
          __int16 v58 = 1;
          goto LABEL_154;
        }
      }
      a1[v11] = 1;
      break;
    case 2u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      if (v11 <= 3)
      {
        unsigned int v30 = ((1 << (8 * v11)) | 2u) >> (8 * v11);
        if (HIWORD(v30))
        {
          *(_DWORD *)&a1[v11] = 2;
          return a1;
        }
        if ((v30 | 0x10) > 0xFF)
        {
          __int16 v58 = 2;
          goto LABEL_154;
        }
      }
      a1[v11] = 2;
      break;
    case 3u:
      *a1 = *a2;
      if (v11 <= 3)
      {
        unsigned int v31 = ((1 << (8 * v11)) | 2u) >> (8 * v11);
        if (HIWORD(v31))
        {
          *(_DWORD *)&a1[v11] = 3;
          return a1;
        }
        if ((v31 | 0x10) > 0xFF)
        {
          __int16 v58 = 3;
          goto LABEL_154;
        }
      }
      a1[v11] = 3;
      break;
    case 4u:
      *a1 = *a2;
      if (v11 <= 3)
      {
        unsigned int v32 = ((1 << (8 * v11)) | 2u) >> (8 * v11);
        if (HIWORD(v32))
        {
          *(_DWORD *)&a1[v11] = 4;
          return a1;
        }
        if ((v32 | 0x10) > 0xFF)
        {
          __int16 v58 = 4;
          goto LABEL_154;
        }
      }
      a1[v11] = 4;
      break;
    case 5u:
      *a1 = *a2;
      if (v11 <= 3)
      {
        unsigned int v33 = ((1 << (8 * v11)) | 2u) >> (8 * v11);
        if (HIWORD(v33))
        {
          *(_DWORD *)&a1[v11] = 5;
          return a1;
        }
        if ((v33 | 0x10) > 0xFF)
        {
          __int16 v58 = 5;
          goto LABEL_154;
        }
      }
      a1[v11] = 5;
      break;
    case 6u:
      *a1 = *a2;
      if (v11 <= 3)
      {
        unsigned int v34 = ((1 << (8 * v11)) | 2u) >> (8 * v11);
        if (HIWORD(v34))
        {
          *(_DWORD *)&a1[v11] = 6;
          return a1;
        }
        if ((v34 | 0x10) > 0xFF)
        {
          __int16 v58 = 6;
          goto LABEL_154;
        }
      }
      a1[v11] = 6;
      break;
    case 7u:
      *a1 = *a2;
      if (v11 <= 3)
      {
        unsigned int v35 = ((1 << (8 * v11)) | 2u) >> (8 * v11);
        if (HIWORD(v35))
        {
          *(_DWORD *)&a1[v11] = 7;
          return a1;
        }
        if ((v35 | 0x10) > 0xFF)
        {
          __int16 v58 = 7;
          goto LABEL_154;
        }
      }
      a1[v11] = 7;
      break;
    case 8u:
      unint64_t v48 = v10 + 16;
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v62 + 32))(a1, a2, AssociatedTypeWitness);
      unint64_t v49 = (void *)((unint64_t)&a1[v5 + 7] & 0xFFFFFFFFFFFFFFF8);
      long long v50 = (void *)((unint64_t)&a2[v5 + 7] & 0xFFFFFFFFFFFFFFF8);
      *unint64_t v49 = *v50;
      uint64_t v51 = ((unint64_t)v49 + v8 + 8) & v61;
      uint64_t v52 = v6;
      uint64_t v53 = ((unint64_t)v50 + v8 + 8) & v61;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v51, v53, v52);
      BOOL v54 = (void *)((v9 + v51) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v55 = (void *)((v9 + v53) & 0xFFFFFFFFFFFFFFF8);
      void *v54 = *v55;
      *(_OWORD *)(((unint64_t)v54 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v55 + 15) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v56 = &a1[v48];
      unsigned __int8 *v56 = a2[v48];
      v56[1] = a2[v48 + 1];
      if (v11 <= 3)
      {
        unsigned int v57 = ((1 << (8 * v11)) | 2u) >> (8 * v11);
        if (HIWORD(v57))
        {
          *(_DWORD *)&a1[v11] = 8;
          return a1;
        }
        if ((v57 | 0x10) > 0xFF)
        {
          __int16 v58 = 8;
          goto LABEL_154;
        }
      }
      a1[v11] = 8;
      break;
    case 9u:
      *(void *)a1 = *(void *)a2;
      if (v11 <= 3)
      {
        unsigned int v36 = ((1 << (8 * v11)) | 2u) >> (8 * v11);
        if (HIWORD(v36))
        {
          *(_DWORD *)&a1[v11] = 9;
          return a1;
        }
        if ((v36 | 0x10) > 0xFF)
        {
          __int16 v58 = 9;
          goto LABEL_154;
        }
      }
      a1[v11] = 9;
      break;
    case 0xAu:
      *a1 = *a2;
      if (v11 <= 3)
      {
        unsigned int v37 = ((1 << (8 * v11)) | 2u) >> (8 * v11);
        if (HIWORD(v37))
        {
          *(_DWORD *)&a1[v11] = 10;
          return a1;
        }
        if ((v37 | 0x10) > 0xFF)
        {
          __int16 v58 = 10;
          goto LABEL_154;
        }
      }
      a1[v11] = 10;
      break;
    case 0xBu:
      *(_WORD *)a1 = *(_WORD *)a2;
      if (v11 <= 3)
      {
        unsigned int v38 = ((1 << (8 * v11)) | 2u) >> (8 * v11);
        if (HIWORD(v38))
        {
          *(_DWORD *)&a1[v11] = 11;
          return a1;
        }
        if ((v38 | 0x10) > 0xFF)
        {
          __int16 v58 = 11;
          goto LABEL_154;
        }
      }
      a1[v11] = 11;
      break;
    case 0xCu:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[16] = a2[16];
      if (v11 <= 3)
      {
        unsigned int v39 = ((1 << (8 * v11)) | 2u) >> (8 * v11);
        if (HIWORD(v39))
        {
          *(_DWORD *)&a1[v11] = 12;
          return a1;
        }
        if ((v39 | 0x10) > 0xFF)
        {
          __int16 v58 = 12;
          goto LABEL_154;
        }
      }
      a1[v11] = 12;
      break;
    case 0xDu:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((void *)a1 + 2) = *((void *)a2 + 2);
      if (v11 <= 3)
      {
        unsigned int v40 = ((1 << (8 * v11)) | 2u) >> (8 * v11);
        if (HIWORD(v40))
        {
          *(_DWORD *)&a1[v11] = 13;
          return a1;
        }
        if ((v40 | 0x10) > 0xFF)
        {
          __int16 v58 = 13;
          goto LABEL_154;
        }
      }
      a1[v11] = 13;
      break;
    case 0xEu:
      long long v41 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v41;
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
      if (v11 <= 3)
      {
        unsigned int v42 = ((1 << (8 * v11)) | 2u) >> (8 * v11);
        if (HIWORD(v42))
        {
          *(_DWORD *)&a1[v11] = 14;
          return a1;
        }
        if ((v42 | 0x10) > 0xFF)
        {
          __int16 v58 = 14;
          goto LABEL_154;
        }
      }
      a1[v11] = 14;
      break;
    case 0xFu:
      *a1 = *a2;
      if (v11 > 3) {
        goto LABEL_111;
      }
      unsigned int v43 = ((1 << (8 * v11)) | 2u) >> (8 * v11);
      if (HIWORD(v43))
      {
        *(_DWORD *)&a1[v11] = 15;
        return a1;
      }
      if ((v43 | 0x10) > 0xFF)
      {
        __int16 v58 = 15;
LABEL_154:
        *(_WORD *)&a1[v11] = v58;
      }
      else
      {
LABEL_111:
        a1[v11] = 15;
      }
      break;
    default:
      if (v11 > 3) {
        goto LABEL_116;
      }
      unsigned int v44 = ((1 << (8 * v11)) | 2u) >> (8 * v11);
      unsigned int v45 = v44 | 0x10;
      BOOL v46 = HIWORD(v44) == 0;
      uint64_t v47 = 2;
      if (!v46) {
        uint64_t v47 = 4;
      }
      if (v45 <= 0xFF) {
LABEL_116:
      }
        uint64_t v47 = 1;
      memcpy(a1, a2, v47 + v11);
      break;
  }
  return a1;
}

uint64_t sub_100148CB0(unsigned __int16 *a1, unsigned int a2)
{
  unint64_t v4 = (*(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v6 = ((((*(void *)(v5 + 64)
         + ((v4 + *(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
         + 7) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8)
     + 18;
  if (v6 <= 0x39) {
    unint64_t v6 = 57;
  }
  if (v6 > 3)
  {
    unsigned int v7 = 17;
LABEL_7:
    char v9 = 8;
    goto LABEL_8;
  }
  unsigned int v8 = ((1 << (8 * v6)) | 2u) >> (8 * v6);
  if (HIWORD(v8)) {
    goto LABEL_11;
  }
  unsigned int v7 = v8 | 0x10;
  if (v7 <= 0xFF) {
    goto LABEL_7;
  }
  char v9 = 16;
LABEL_8:
  int v10 = (1 << v9) - v7;
  if (v10 >= 0)
  {
    if (v6 > 3) {
      goto LABEL_15;
    }
LABEL_12:
    unsigned int v11 = ((1 << (8 * v6)) | 2u) >> (8 * v6);
    unsigned int v12 = v11 | 0x10;
    BOOL v13 = HIWORD(v11) == 0;
    uint64_t v14 = 2;
    if (!v13) {
      uint64_t v14 = 4;
    }
    if (v12 > 0xFF) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
LABEL_11:
  int v10 = 0x7FFFFFFF;
  if (v6 <= 3) {
    goto LABEL_12;
  }
LABEL_15:
  uint64_t v14 = 1;
LABEL_16:
  if (!a2) {
    return 0;
  }
  if (a2 <= v10) {
    goto LABEL_36;
  }
  unint64_t v15 = v14 + v6;
  char v16 = 8 * v15;
  if (v15 <= 3)
  {
    unsigned int v19 = ((a2 - v10 + ~(-1 << v16)) >> v16) + 1;
    if (HIWORD(v19))
    {
      int v17 = *(_DWORD *)((char *)a1 + v15);
      if (!v17) {
        goto LABEL_36;
      }
      goto LABEL_28;
    }
    if (v19 > 0xFF)
    {
      int v17 = *(unsigned __int16 *)((char *)a1 + v15);
      if (!*(unsigned __int16 *)((char *)a1 + v15)) {
        goto LABEL_36;
      }
      goto LABEL_28;
    }
    if (v19 < 2)
    {
LABEL_36:
      if (v6 <= 3)
      {
        unsigned int v27 = ((1 << (8 * v6)) | 2u) >> (8 * v6);
        if (HIWORD(v27))
        {
          unsigned int v22 = *(_DWORD *)((char *)a1 + v6);
          unsigned int v23 = ~v22;
LABEL_44:
          int v26 = 0x7FFFFFFF;
LABEL_45:
          if (v26 > v23) {
            return -v22;
          }
          else {
            return 0;
          }
        }
        int v25 = v27 | 0x10;
        if ((v27 | 0x10) > 0xFF)
        {
          int v29 = *(unsigned __int16 *)((char *)a1 + v6);
          unsigned int v22 = v29 | 0xFFFF0000;
          unsigned int v23 = v29 ^ 0xFFFF;
          char v24 = 16;
        }
        else
        {
          int v28 = *((unsigned __int8 *)a1 + v6);
          unsigned int v22 = v28 | 0xFFFFFF00;
          unsigned int v23 = v28 ^ 0xFF;
          char v24 = 8;
        }
      }
      else
      {
        int v21 = *((unsigned __int8 *)a1 + v6);
        unsigned int v22 = v21 | 0xFFFFFF00;
        unsigned int v23 = v21 ^ 0xFF;
        char v24 = 8;
        int v25 = 17;
      }
      int v26 = (1 << v24) - v25;
      if (v26 >= 0) {
        goto LABEL_45;
      }
      goto LABEL_44;
    }
  }
  int v17 = *((unsigned __int8 *)a1 + v15);
  if (!*((unsigned char *)a1 + v15)) {
    goto LABEL_36;
  }
LABEL_28:
  int v20 = (v17 - 1) << v16;
  if (v15 > 3) {
    int v20 = 0;
  }
  if (v15)
  {
    if (v15 > 3) {
      LODWORD(v15) = 4;
    }
    switch((int)v15)
    {
      case 2:
        LODWORD(v15) = *a1;
        break;
      case 3:
        LODWORD(v15) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v15) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v15) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v10 + (v15 | v20) + 1;
}

void sub_100148FEC(unsigned char *a1, unsigned int a2, unsigned int a3)
{
  unint64_t v6 = (*(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v8 = ((((*(void *)(v7 + 64)
         + ((v6 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
         + 7) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8)
     + 18;
  if (v8 <= 0x39) {
    unint64_t v8 = 57;
  }
  char v9 = 8 * v8;
  if (v8 > 3)
  {
    unsigned int v10 = 17;
LABEL_5:
    char v11 = 8;
    goto LABEL_6;
  }
  unsigned int v13 = ((1 << v9) | 2u) >> v9;
  if (HIWORD(v13)) {
    goto LABEL_12;
  }
  unsigned int v10 = v13 | 0x10;
  if (v10 <= 0xFF) {
    goto LABEL_5;
  }
  char v11 = 16;
LABEL_6:
  int v12 = (1 << v11) - v10;
  if (v12 >= 0)
  {
    if (v8 > 3) {
      goto LABEL_16;
    }
    goto LABEL_13;
  }
LABEL_12:
  int v12 = 0x7FFFFFFF;
  if (v8 > 3)
  {
LABEL_16:
    uint64_t v17 = 1;
    goto LABEL_17;
  }
LABEL_13:
  unsigned int v14 = ((1 << v9) | 2u) >> v9;
  unsigned int v15 = v14 | 0x10;
  BOOL v16 = HIWORD(v14) == 0;
  uint64_t v17 = 2;
  if (!v16) {
    uint64_t v17 = 4;
  }
  if (v15 <= 0xFF) {
    goto LABEL_16;
  }
LABEL_17:
  size_t v18 = v17 + v8;
  if (a3 <= v12)
  {
    int v19 = 0;
  }
  else if (v18 <= 3)
  {
    unsigned int v22 = ((a3 - v12 + ~(-1 << (8 * v18))) >> (8 * v18)) + 1;
    if (HIWORD(v22))
    {
      int v19 = 4;
    }
    else if (v22 >= 0x100)
    {
      int v19 = 2;
    }
    else
    {
      int v19 = v22 > 1;
    }
  }
  else
  {
    int v19 = 1;
  }
  if (v12 < a2)
  {
    unsigned int v20 = ~v12 + a2;
    if (v18 < 4)
    {
      int v21 = (v20 >> (8 * v18)) + 1;
      if (v18)
      {
        int v23 = v20 & ~(-1 << (8 * v18));
        bzero(a1, v18);
        if (v18 == 3)
        {
          *(_WORD *)a1 = v23;
          a1[2] = BYTE2(v23);
        }
        else if (v18 == 2)
        {
          *(_WORD *)a1 = v23;
        }
        else
        {
          *a1 = v23;
        }
      }
    }
    else
    {
      bzero(a1, v18);
      *(_DWORD *)a1 = v20;
      int v21 = 1;
    }
    switch(v19)
    {
      case 1:
        a1[v18] = v21;
        return;
      case 2:
        *(_WORD *)&a1[v18] = v21;
        return;
      case 3:
        goto LABEL_53;
      case 4:
        *(_DWORD *)&a1[v18] = v21;
        return;
      default:
        return;
    }
  }
  switch(v19)
  {
    case 1:
      a1[v18] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_37;
    case 2:
      *(_WORD *)&a1[v18] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_37;
    case 3:
LABEL_53:
      __break(1u);
      JUMPOUT(0x10014934CLL);
    case 4:
      *(_DWORD *)&a1[v18] = 0;
      goto LABEL_36;
    default:
LABEL_36:
      if (!a2) {
        return;
      }
LABEL_37:
      int v24 = -a2;
      if (v8 > 3) {
        goto LABEL_38;
      }
      unsigned int v25 = ((1 << v9) | 2u) >> v9;
      if (HIWORD(v25))
      {
        *(_DWORD *)&a1[v8] = v24;
      }
      else if ((v25 | 0x10) <= 0xFF)
      {
LABEL_38:
        a1[v8] = v24;
      }
      else
      {
        *(_WORD *)&a1[v8] = v24;
      }
      return;
  }
}

uint64_t sub_100149374(unsigned __int8 *a1)
{
  unint64_t v2 = (*(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v3 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v4 = ((((*(void *)(v3 + 64)
         + ((v2 + *(unsigned __int8 *)(v3 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))
         + 7) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8)
     + 18;
  if (v4 <= 0x39) {
    unint64_t v4 = 57;
  }
  if (v4 > 3) {
    goto LABEL_4;
  }
  unsigned int v6 = ((1 << (8 * v4)) | 2u) >> (8 * v4);
  if (HIWORD(v6))
  {
    uint64_t result = *(unsigned int *)&a1[v4];
  }
  else
  {
    if ((v6 | 0x10) <= 0xFF)
    {
LABEL_4:
      uint64_t result = a1[v4];
      goto LABEL_9;
    }
    uint64_t result = *(unsigned __int16 *)&a1[v4];
  }
LABEL_9:
  if (result >= 0x10)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a1;
        goto LABEL_18;
      case 2:
        int v8 = *(unsigned __int16 *)a1;
        goto LABEL_18;
      case 3:
        int v8 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_18;
      case 4:
        int v8 = *(_DWORD *)a1;
LABEL_18:
        unsigned int v9 = (v8 | ((result - 16) << (8 * v4))) + 16;
        unsigned int v10 = v8 + 16;
        if (v4 >= 4) {
          uint64_t result = v10;
        }
        else {
          uint64_t result = v9;
        }
        break;
      default:
        return result;
    }
  }
  return result;
}

void sub_100149544(unsigned char *a1, unsigned int a2)
{
  unint64_t v4 = (*(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v6 = ((((*(void *)(v5 + 64)
         + ((v4 + *(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
         + 7) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8)
     + 18;
  if (v6 <= 0x39) {
    size_t v7 = 57;
  }
  else {
    size_t v7 = v6;
  }
  if (a2 > 0xF)
  {
    unsigned int v8 = a2 - 16;
    if (v7 < 4)
    {
      int v10 = (v8 >> (8 * v7)) + 16;
      v8 &= ~(-1 << (8 * v7));
      char v11 = (int *)&a1[v7];
      unsigned int v12 = ((1 << (8 * v7)) | 2u) >> (8 * v7);
      if (HIWORD(v12))
      {
        *char v11 = v10;
      }
      else if ((v12 | 0x10) > 0xFF)
      {
        *(_WORD *)char v11 = v10;
      }
      else
      {
        *(unsigned char *)char v11 = v10;
      }
    }
    else
    {
      a1[v7] = 16;
    }
    if (v7 <= 3) {
      int v13 = v7;
    }
    else {
      int v13 = 4;
    }
    bzero(a1, v7);
    switch(v13)
    {
      case 2:
        *(_WORD *)a1 = v8;
        break;
      case 3:
        *(_WORD *)a1 = v8;
        a1[2] = BYTE2(v8);
        break;
      case 4:
        *(_DWORD *)a1 = v8;
        break;
      default:
        *a1 = v8;
        break;
    }
  }
  else
  {
    if (v7 > 3)
    {
LABEL_6:
      a1[v7] = a2;
      return;
    }
    unsigned int v9 = ((1 << (8 * v7)) | 2u) >> (8 * v7);
    if (HIWORD(v9))
    {
      *(_DWORD *)&a1[v7] = a2;
    }
    else
    {
      if ((v9 | 0x10) <= 0xFF) {
        goto LABEL_6;
      }
      *(_WORD *)&a1[v7] = a2;
    }
  }
}

uint64_t getEnumTagSinglePayload for UpdateSyncPauseOperation(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for UpdateSyncPauseOperation(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_100149804(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_10014980C(uint64_t result, char a2)
{
  *(unsigned char *)(result + 8) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for UpdateSyncPauseOperation()
{
  return &type metadata for UpdateSyncPauseOperation;
}

uint64_t sub_100149828@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __chkstk_darwin(a1);
  int v4 = (char *)&v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v5 + 16))(v4);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      uint64_t v27 = swift_getAssociatedTypeWitness();
      int v28 = &v4[*(int *)(swift_getTupleTypeMetadata3() + 48)];
      (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(a2, v4, AssociatedTypeWitness);
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      uint64_t v30 = swift_getAssociatedConformanceWitness();
      uint64_t v48 = AssociatedTypeWitness;
      uint64_t v49 = v27;
      uint64_t v50 = AssociatedConformanceWitness;
      uint64_t v51 = v30;
      type metadata accessor for ReconciliationID();
      swift_storeEnumTagMultiPayload();
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(*(void *)(v27 - 8) + 8))(v28, v27);
      break;
    case 6u:
    case 7u:
      uint64_t v18 = swift_getAssociatedTypeWitness();
      uint64_t v19 = swift_getAssociatedTypeWitness();
      uint64_t v20 = swift_getAssociatedConformanceWitness();
      uint64_t v21 = swift_getAssociatedConformanceWitness();
      uint64_t v48 = v18;
      uint64_t v49 = v19;
      uint64_t v50 = v20;
      uint64_t v51 = v21;
      uint64_t v22 = type metadata accessor for ReconciliationID();
      int v23 = &v4[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      uint64_t v24 = a2;
      uint64_t v25 = *(void *)(v22 - 8);
      (*(void (**)(uint64_t, char *, uint64_t))(v25 + 32))(v24, v4, v22);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v23, v22);
      break;
    case 8u:
      uint64_t v31 = swift_getAssociatedTypeWitness();
      uint64_t v32 = swift_getAssociatedTypeWitness();
      uint64_t v33 = swift_getAssociatedConformanceWitness();
      uint64_t v34 = swift_getAssociatedConformanceWitness();
      uint64_t v48 = v31;
      uint64_t v49 = v32;
      uint64_t v50 = v33;
      uint64_t v51 = v34;
      uint64_t v35 = type metadata accessor for ReconciliationID();
      uint64_t v36 = type metadata accessor for ReconciliationSideMutation();
      unsigned int v37 = &v4[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v35 - 8) + 32))(a2, v4, v35);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(*(void *)(v36 - 8) + 8))(v37, v36);
      break;
    case 9u:
      uint64_t v38 = swift_getAssociatedTypeWitness();
      uint64_t v39 = swift_getAssociatedTypeWitness();
      uint64_t v40 = swift_getAssociatedConformanceWitness();
      uint64_t v47 = a2;
      uint64_t v41 = v40;
      uint64_t v42 = swift_getAssociatedConformanceWitness();
      uint64_t v48 = v38;
      uint64_t v49 = v39;
      uint64_t v50 = v41;
      uint64_t v51 = v42;
      uint64_t v43 = type metadata accessor for ReconciliationID();
      uint64_t v44 = type metadata accessor for ReconciliationSideMutation();
      unsigned int v45 = &v4[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v43 - 8) + 32))(v47, v4, v43);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(*(void *)(v44 - 8) + 8))(v45, v44);
      break;
    case 0xAu:
    case 0xBu:
    case 0xCu:
    case 0xDu:
      uint64_t v12 = a2;
      uint64_t v13 = swift_getAssociatedTypeWitness();
      uint64_t v14 = swift_getAssociatedTypeWitness();
      uint64_t v15 = swift_getAssociatedConformanceWitness();
      uint64_t v16 = swift_getAssociatedConformanceWitness();
      uint64_t v48 = v13;
      uint64_t v49 = v14;
      uint64_t v50 = v15;
      uint64_t v51 = v16;
      uint64_t v17 = type metadata accessor for ReconciliationID();
      uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v17 - 8) + 32))(v12, v4, v17);
      break;
    default:
      uint64_t v6 = swift_getAssociatedTypeWitness();
      uint64_t v7 = swift_getAssociatedTypeWitness();
      uint64_t v8 = swift_getAssociatedConformanceWitness();
      uint64_t v9 = swift_getAssociatedConformanceWitness();
      uint64_t v48 = v6;
      uint64_t v49 = v7;
      uint64_t v50 = v8;
      uint64_t v51 = v9;
      uint64_t v10 = type metadata accessor for ReconciliationID();
      uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v10 - 8) + 32))(a2, v4, v10);
      break;
  }
  return result;
}

uint64_t sub_10014A004@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v19 = a2;
  __chkstk_darwin(a1);
  int v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = v5;
  (*(void (**)(char *))(v5 + 16))(v4);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = swift_getAssociatedTypeWitness();
  if (EnumCaseMultiPayload == 1)
  {
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    uint64_t v10 = v19;
    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v8 - 8) + 32))(v19, &v4[*(int *)(TupleTypeMetadata3 + 48)], v8);
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v12 = swift_getAssociatedConformanceWitness();
    uint64_t v20 = AssociatedTypeWitness;
    uint64_t v21 = v8;
    uint64_t v22 = AssociatedConformanceWitness;
    uint64_t v23 = v12;
    uint64_t v13 = type metadata accessor for ReconciliationID();
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v10, 0, 1, v13);
    return (*(uint64_t (**)(char *, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(v4, AssociatedTypeWitness);
  }
  else
  {
    uint64_t v15 = swift_getAssociatedConformanceWitness();
    uint64_t v16 = swift_getAssociatedConformanceWitness();
    uint64_t v20 = AssociatedTypeWitness;
    uint64_t v21 = v8;
    uint64_t v22 = v15;
    uint64_t v23 = v16;
    uint64_t v17 = type metadata accessor for ReconciliationID();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v19, 1, 1, v17);
    return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v4, a1);
  }
}

uint64_t sub_10014A324(uint64_t a1)
{
  uint64_t v38 = *(void *)(a1 + 24);
  uint64_t v3 = type metadata accessor for ReconciliationSideMutation();
  uint64_t v37 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v36 = (char *)&v35 - v4;
  uint64_t v5 = type metadata accessor for ReconciliationSideMutation();
  uint64_t v35 = *(void *)(v5 - 8);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v35 - v7;
  uint64_t v9 = *(void *)(a1 - 8);
  __chkstk_darwin(v6);
  char v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v1, a1);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 8:
      uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      uint64_t v22 = swift_getAssociatedTypeWitness();
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      uint64_t v24 = swift_getAssociatedConformanceWitness();
      uint64_t v39 = AssociatedTypeWitness;
      uint64_t v40 = v22;
      uint64_t v41 = AssociatedConformanceWitness;
      uint64_t v42 = v24;
      uint64_t v25 = type metadata accessor for ReconciliationID();
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      int v28 = v36;
      uint64_t v27 = v37;
      (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v36, &v11[*(int *)(TupleTypeMetadata2 + 48)], v3);
      uint64_t v20 = sub_10014A8E0(v3);
      (*(void (**)(char *, uint64_t))(v27 + 8))(v28, v3);
      (*(void (**)(char *, uint64_t))(*(void *)(v25 - 8) + 8))(v11, v25);
      break;
    case 11:
      uint64_t v29 = swift_getAssociatedTypeWitness();
      uint64_t v30 = swift_getAssociatedTypeWitness();
      uint64_t v31 = swift_getAssociatedConformanceWitness();
      uint64_t v32 = swift_getAssociatedConformanceWitness();
      uint64_t v39 = v29;
      uint64_t v40 = v30;
      uint64_t v41 = v31;
      uint64_t v42 = v32;
      uint64_t v33 = type metadata accessor for ReconciliationID();
      uint64_t v20 = *(void *)&v11[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      (*(void (**)(char *, uint64_t))(*(void *)(v33 - 8) + 8))(v11, v33);
      break;
    case 9:
      uint64_t v13 = swift_getAssociatedTypeWitness();
      uint64_t v14 = swift_getAssociatedTypeWitness();
      uint64_t v15 = swift_getAssociatedConformanceWitness();
      uint64_t v16 = swift_getAssociatedConformanceWitness();
      uint64_t v39 = v13;
      uint64_t v40 = v14;
      uint64_t v41 = v15;
      uint64_t v42 = v16;
      uint64_t v17 = type metadata accessor for ReconciliationID();
      uint64_t v18 = swift_getTupleTypeMetadata2();
      uint64_t v19 = v35;
      (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v8, &v11[*(int *)(v18 + 48)], v5);
      uint64_t v20 = sub_10014A8E0(v5);
      (*(void (**)(char *, uint64_t))(v19 + 8))(v8, v5);
      (*(void (**)(char *, uint64_t))(*(void *)(v17 - 8) + 8))(v11, v17);
      break;
    default:
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, a1);
      return 0;
  }
  return v20;
}

uint64_t sub_10014A8E0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 - 8);
  uint64_t v3 = __chkstk_darwin(a1);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v3);
  uint64_t v8 = (uint64_t *)((char *)&v15 - v7);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v15 - v9;
  char v11 = *(void (**)(char *))(v2 + 16);
  v11((char *)&v15 - v9);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 13)
  {
    ((void (*)(char *, char *, uint64_t))v11)(v5, v10, a1);
    if (v5[1] <= 1u)
    {
      uint64_t v13 = *((void *)v5 + 1);
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  if (EnumCaseMultiPayload == 2)
  {
    ((void (*)(uint64_t *, char *, uint64_t))v11)(v8, v10, a1);
    uint64_t v13 = *v8;
    goto LABEL_9;
  }
  if (EnumCaseMultiPayload)
  {
LABEL_8:
    uint64_t v13 = 0;
    goto LABEL_9;
  }
  ((void (*)(uint64_t *, char *, uint64_t))v11)(v8, v10, a1);
  uint64_t v13 = v8[1];
LABEL_9:
  (*(void (**)(char *, uint64_t))(v2 + 8))(v10, a1);
  return v13;
}

uint64_t sub_10014AAB8()
{
  return sub_1006F0130(*v0);
}

uint64_t sub_10014AAC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1006F0D0C(a1, a2, a3, *v3);
}

uint64_t sub_10014AAC8()
{
  return sub_10096BF30();
}

uint64_t sub_10014AAEC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ReconciliationSideMutation();
  uint64_t v99 = *(void *)(v2 - 8);
  uint64_t v100 = v2;
  __chkstk_darwin(v2);
  unsigned int v97 = (char *)&v93 - v3;
  uint64_t v4 = type metadata accessor for ReconciliationSideMutation();
  uint64_t v95 = *(void *)(v4 - 8);
  uint64_t v96 = v4;
  __chkstk_darwin(v4);
  uint64_t v94 = (char *)&v93 - v5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v101 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v98 = (char *)&v93 - v7;
  uint64_t v8 = swift_getAssociatedTypeWitness();
  uint64_t v104 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unsigned int v103 = (char *)&v93 - v9;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v11 = swift_getAssociatedConformanceWitness();
  uint64_t v109 = v8;
  unint64_t v110 = AssociatedTypeWitness;
  uint64_t v111 = AssociatedConformanceWitness;
  uint64_t v112 = v11;
  uint64_t v12 = type metadata accessor for ReconciliationID();
  uint64_t v106 = *(void *)(v12 - 8);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v93 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v13);
  int v93 = (char *)&v93 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  int v102 = (char *)&v93 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v105 = (char *)&v93 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v93 - v23;
  uint64_t v25 = __chkstk_darwin(v22);
  uint64_t v27 = (char *)&v93 - v26;
  __chkstk_darwin(v25);
  uint64_t v29 = (char *)&v93 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v29, v107, a1);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
      uint64_t v37 = &v29[*(int *)(TupleTypeMetadata3 + 48)];
      uint64_t v38 = v29[*(int *)(TupleTypeMetadata3 + 64)];
      (*(void (**)(char *, char *, uint64_t))(v104 + 32))(v103, v29, v8);
      uint64_t v39 = v101;
      uint64_t v40 = v98;
      (*(void (**)(char *, char *, uint64_t))(v101 + 32))(v98, v37, AssociatedTypeWitness);
      uint64_t v109 = 0;
      unint64_t v110 = 0xE000000000000000;
      sub_10096CBD0(26);
      v115._countAndFlagsBits = 0x6D657449646E6962;
      v115._object = (void *)0xEC00000028734449;
      sub_10096BDC0(v115);
      sub_10096D270();
      uint64_t v41 = (void *)0xE500000000000000;
      v116._countAndFlagsBits = 0x203E2D3C20;
      v116._object = (void *)0xE500000000000000;
      sub_10096BDC0(v116);
      sub_10096D270();
      v117._countAndFlagsBits = 8236;
      v117._object = (void *)0xE200000000000000;
      sub_10096BDC0(v117);
      v42._countAndFlagsBits = 0x7361696C61;
      switch(v38)
      {
        case 1:
          uint64_t v41 = (void *)0xE300000000000000;
          v42._countAndFlagsBits = 7498084;
          break;
        case 2:
          uint64_t v41 = (void *)0xE700000000000000;
          v42._countAndFlagsBits = 0x6B6E696C6D7973;
          break;
        case 3:
          break;
        default:
          uint64_t v41 = (void *)0xE300000000000000;
          v42._countAndFlagsBits = 6516580;
          break;
      }
      v42._object = v41;
      sub_10096BDC0(v42);
      swift_bridgeObjectRelease();
      v147._countAndFlagsBits = 41;
      v147._object = (void *)0xE100000000000000;
      sub_10096BDC0(v147);
      uint64_t v50 = v109;
      (*(void (**)(char *, uint64_t))(v39 + 8))(v40, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t))(v104 + 8))(v103, v8);
      return v50;
    case 2u:
      uint64_t v43 = 6516580;
      uint64_t v44 = v12;
      uint64_t v45 = v29[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      uint64_t v46 = v106;
      (*(void (**)(char *, char *, uint64_t))(v106 + 32))(v24, v29, v44);
      uint64_t v109 = 0;
      unint64_t v110 = 0xE000000000000000;
      sub_10096CBD0(26);
      v118._object = (void *)0x8000000100996C40;
      v118._countAndFlagsBits = 0xD000000000000013;
      sub_10096BDC0(v118);
      swift_getWitnessTable();
      sub_10096D270();
      v119._countAndFlagsBits = 8236;
      v119._object = (void *)0xE200000000000000;
      sub_10096BDC0(v119);
      uint64_t v47 = (void *)0xE300000000000000;
      switch(v45)
      {
        case 1:
          uint64_t v43 = 7498084;
          break;
        case 2:
          uint64_t v47 = (void *)0xE700000000000000;
          uint64_t v43 = 0x6B6E696C6D7973;
          break;
        case 3:
          uint64_t v47 = (void *)0xE500000000000000;
          uint64_t v43 = 0x7361696C61;
          break;
        default:
          break;
      }
      v148._countAndFlagsBits = v43;
      v148._object = v47;
      sub_10096BDC0(v148);
      swift_bridgeObjectRelease();
      v149._countAndFlagsBits = 41;
      v149._object = (void *)0xE100000000000000;
      sub_10096BDC0(v149);
      uint64_t v50 = v109;
      (*(void (**)(char *, uint64_t))(v46 + 8))(v24, v44);
      return v50;
    case 3u:
      uint64_t v49 = v105;
      uint64_t v48 = v106;
      (*(void (**)(char *, char *, uint64_t))(v106 + 32))(v105, v29, v12);
      uint64_t v109 = 0;
      unint64_t v110 = 0xE000000000000000;
      sub_10096CBD0(24);
      v120._countAndFlagsBits = 0xD000000000000015;
      v120._object = (void *)0x8000000100996C20;
      sub_10096BDC0(v120);
      swift_getWitnessTable();
      sub_10096D270();
      v121._countAndFlagsBits = 41;
      v121._object = (void *)0xE100000000000000;
      sub_10096BDC0(v121);
      uint64_t v50 = v109;
      (*(void (**)(char *, uint64_t))(v48 + 8))(v49, v12);
      return v50;
    case 4u:
      uint64_t v51 = *(void *)&v29[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      uint64_t v53 = v105;
      uint64_t v52 = v106;
      (*(void (**)(char *, char *, uint64_t))(v106 + 32))(v105, v29, v12);
      uint64_t v109 = 0;
      unint64_t v110 = 0xE000000000000000;
      sub_10096CBD0(37);
      v54._countAndFlagsBits = 0xD00000000000001ELL;
      uint64_t v55 = "deleteChildrenReconciliations(";
      goto LABEL_21;
    case 5u:
      uint64_t v51 = *(void *)&v29[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      uint64_t v53 = v105;
      uint64_t v52 = v106;
      (*(void (**)(char *, char *, uint64_t))(v106 + 32))(v105, v29, v12);
      uint64_t v109 = 0;
      unint64_t v110 = 0xE000000000000000;
      sub_10096CBD0(32);
      v54._countAndFlagsBits = 0xD000000000000019;
      uint64_t v55 = "deleteReconciliationLazy(";
LABEL_21:
      v54._object = (void *)((unint64_t)(v55 - 32) | 0x8000000000000000);
      sub_10096BDC0(v54);
      swift_getWitnessTable();
      sub_10096D270();
      v130._countAndFlagsBits = 8236;
      v130._object = (void *)0xE200000000000000;
      sub_10096BDC0(v130);
      v108._countAndFlagsBits = v51;
      sub_10096CDF0();
      goto LABEL_30;
    case 6u:
      uint64_t v56 = v12;
      uint64_t v77 = &v29[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      uint64_t v59 = v105;
      uint64_t v58 = v106;
      size_t v78 = *(void (**)(char *, char *, uint64_t))(v106 + 32);
      v78(v105, v29, v56);
      uint64_t v61 = v102;
      v78(v102, v77, v56);
      uint64_t v109 = 0;
      unint64_t v110 = 0xE000000000000000;
      sub_10096CBD0(26);
      v62._object = (void *)0x8000000100996BC0;
      v62._countAndFlagsBits = 0xD000000000000013;
      goto LABEL_23;
    case 7u:
      uint64_t v56 = v12;
      unsigned int v57 = &v29[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      uint64_t v59 = v105;
      uint64_t v58 = v106;
      unint64_t v60 = *(void (**)(char *, char *, uint64_t))(v106 + 32);
      v60(v105, v29, v56);
      uint64_t v61 = v102;
      v60(v102, v57, v56);
      uint64_t v109 = 0;
      unint64_t v110 = 0xE000000000000000;
      sub_10096CBD0(29);
      v62._countAndFlagsBits = 0xD000000000000016;
      v62._object = (void *)0x8000000100996BA0;
LABEL_23:
      sub_10096BDC0(v62);
      swift_getWitnessTable();
      sub_10096D270();
      v131._countAndFlagsBits = 8236;
      v131._object = (void *)0xE200000000000000;
      sub_10096BDC0(v131);
      sub_10096D270();
      v132._countAndFlagsBits = 41;
      v132._object = (void *)0xE100000000000000;
      sub_10096BDC0(v132);
      uint64_t v50 = v109;
      unsigned int v79 = *(void (**)(char *, uint64_t))(v58 + 8);
      v79(v61, v56);
      v79(v59, v56);
      return v50;
    case 8u:
      uint64_t v63 = v12;
      uint64_t v64 = v96;
      unsigned int v80 = &v29[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      unsigned int v67 = v105;
      uint64_t v66 = v106;
      (*(void (**)(char *, char *, uint64_t))(v106 + 32))(v105, v29, v63);
      uint64_t v68 = v95;
      unint64_t v69 = v94;
      (*(void (**)(char *, char *, uint64_t))(v95 + 32))(v94, v80, v64);
      uint64_t v109 = 0;
      unint64_t v110 = 0xE000000000000000;
      v70._countAndFlagsBits = 0x28726568744F6E6FLL;
      v70._object = (void *)0xE800000000000000;
      goto LABEL_25;
    case 9u:
      uint64_t v63 = v12;
      uint64_t v64 = v100;
      unint64_t v65 = &v29[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      unsigned int v67 = v105;
      uint64_t v66 = v106;
      (*(void (**)(char *, char *, uint64_t))(v106 + 32))(v105, v29, v63);
      uint64_t v68 = v99;
      unint64_t v69 = v97;
      (*(void (**)(char *, char *, uint64_t))(v99 + 32))(v97, v65, v64);
      uint64_t v109 = 0;
      unint64_t v110 = 0xE000000000000000;
      v70._countAndFlagsBits = 0x286E69614D6E6FLL;
      v70._object = (void *)0xE700000000000000;
LABEL_25:
      sub_10096BDC0(v70);
      swift_getWitnessTable();
      sub_10096D270();
      v133._countAndFlagsBits = 8236;
      v133._object = (void *)0xE200000000000000;
      sub_10096BDC0(v133);
      sub_10096D260();
      v134._countAndFlagsBits = 41;
      v134._object = (void *)0xE100000000000000;
      sub_10096BDC0(v134);
      uint64_t v50 = v109;
      (*(void (**)(char *, uint64_t))(v68 + 8))(v69, v64);
      goto LABEL_26;
    case 0xAu:
      uint64_t v81 = v12;
      size_t v82 = &v29[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      unint64_t v83 = *(void *)v82;
      char v84 = v82[8];
      uint64_t v85 = v106;
      unint64_t v86 = v93;
      (*(void (**)(char *, char *, uint64_t))(v106 + 32))(v93, v29, v81);
      uint64_t v109 = 0;
      unint64_t v110 = 0xE000000000000000;
      sub_10096CBD0(30);
      v135._countAndFlagsBits = 0xD000000000000017;
      v135._object = (void *)0x8000000100996B80;
      sub_10096BDC0(v135);
      swift_getWitnessTable();
      sub_10096D270();
      v136._countAndFlagsBits = 8236;
      v136._object = (void *)0xE200000000000000;
      sub_10096BDC0(v136);
      if (v84)
      {
        uint64_t v87 = 0x2865766F6D6572;
        uint64_t v88 = (void *)0xE700000000000000;
      }
      else
      {
        uint64_t v87 = 677667937;
        uint64_t v88 = (void *)0xE400000000000000;
      }
      v108._countAndFlagsBits = v87;
      v108._object = v88;
      v143._countAndFlagsBits = sub_100608C54(v83);
      sub_10096BDC0(v143);
      swift_bridgeObjectRelease();
      sub_10096BDC0(v108);
      swift_bridgeObjectRelease();
      v144._countAndFlagsBits = 41;
      v144._object = (void *)0xE100000000000000;
      sub_10096BDC0(v144);
      uint64_t v50 = v109;
      (*(void (**)(char *, uint64_t))(v85 + 8))(v86, v81);
      return v50;
    case 0xBu:
      uint64_t v63 = v12;
      unint64_t v71 = *(void *)&v29[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      unsigned int v67 = v105;
      uint64_t v66 = v106;
      (*(void (**)(char *, char *, uint64_t))(v106 + 32))(v105, v29, v63);
      uint64_t v109 = 0;
      unint64_t v110 = 0xE000000000000000;
      sub_10096CBD0(29);
      v122._countAndFlagsBits = 0xD000000000000016;
      v122._object = (void *)0x8000000100996B60;
      sub_10096BDC0(v122);
      swift_getWitnessTable();
      sub_10096D270();
      v123._countAndFlagsBits = 8236;
      v123._object = (void *)0xE200000000000000;
      sub_10096BDC0(v123);
      v108._countAndFlagsBits = sub_100437928(v71);
      v108._object = v72;
      v124._countAndFlagsBits = 35;
      v124._object = (void *)0xE100000000000000;
      sub_10096BDC0(v124);
      v125._countAndFlagsBits = sub_10096C2B0();
      sub_10096BDC0(v125);
      swift_bridgeObjectRelease();
      sub_10096BDC0(v108);
      swift_bridgeObjectRelease();
      v126._countAndFlagsBits = 41;
      v126._object = (void *)0xE100000000000000;
      sub_10096BDC0(v126);
      uint64_t v50 = v109;
LABEL_26:
      (*(void (**)(char *, uint64_t))(v66 + 8))(v67, v63);
      break;
    case 0xCu:
      int v73 = v29[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      uint64_t v74 = v106;
      (*(void (**)(char *, char *, uint64_t))(v106 + 32))(v15, v29, v12);
      uint64_t v109 = 0;
      unint64_t v110 = 0xE000000000000000;
      sub_10096CBD0(39);
      v127._countAndFlagsBits = 0xD000000000000020;
      v127._object = (void *)0x8000000100996B30;
      sub_10096BDC0(v127);
      swift_getWitnessTable();
      sub_10096D270();
      v128._countAndFlagsBits = 8236;
      v128._object = (void *)0xE200000000000000;
      sub_10096BDC0(v128);
      if (v73) {
        v75._countAndFlagsBits = 1702195828;
      }
      else {
        v75._countAndFlagsBits = 0x65736C6166;
      }
      if (v73) {
        uint64_t v76 = (void *)0xE400000000000000;
      }
      else {
        uint64_t v76 = (void *)0xE500000000000000;
      }
      v75._object = v76;
      sub_10096BDC0(v75);
      swift_bridgeObjectRelease();
      v129._countAndFlagsBits = 41;
      v129._object = (void *)0xE100000000000000;
      sub_10096BDC0(v129);
      uint64_t v50 = v109;
      (*(void (**)(char *, uint64_t))(v74 + 8))(v15, v12);
      break;
    case 0xDu:
      uint64_t v89 = swift_getTupleTypeMetadata3();
      unint64_t v90 = *(void *)&v29[*(int *)(v89 + 48)];
      unint64_t v91 = *(void *)&v29[*(int *)(v89 + 64)];
      uint64_t v53 = v105;
      uint64_t v52 = v106;
      (*(void (**)(char *, char *, uint64_t))(v106 + 32))(v105, v29, v12);
      uint64_t v109 = 0;
      unint64_t v110 = 0xE000000000000000;
      sub_10096CBD0(53);
      v137._countAndFlagsBits = 0xD00000000000001ALL;
      v137._object = (void *)0x8000000100996B10;
      sub_10096BDC0(v137);
      swift_getWitnessTable();
      sub_10096D270();
      v138._countAndFlagsBits = 0x676E69646461202CLL;
      v138._object = (void *)0xE90000000000003ALL;
      sub_10096BDC0(v138);
      v139._countAndFlagsBits = sub_100608E98(v90);
      sub_10096BDC0(v139);
      swift_bridgeObjectRelease();
      v140._countAndFlagsBits = 0x69766F6D6572202CLL;
      v140._object = (void *)0xEB000000003A676ELL;
      sub_10096BDC0(v140);
      v141._countAndFlagsBits = sub_100608E98(v91);
      sub_10096BDC0(v141);
      swift_bridgeObjectRelease();
LABEL_30:
      v142._countAndFlagsBits = 41;
      v142._object = (void *)0xE100000000000000;
      sub_10096BDC0(v142);
      uint64_t v50 = v109;
      (*(void (**)(char *, uint64_t))(v52 + 8))(v53, v12);
      break;
    default:
      uint64_t v31 = 6516580;
      uint64_t v32 = v12;
      uint64_t v33 = v29[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      uint64_t v34 = v106;
      (*(void (**)(char *, char *, uint64_t))(v106 + 32))(v27, v29, v32);
      uint64_t v109 = 0;
      unint64_t v110 = 0xE000000000000000;
      sub_10096CBD0(18);
      v113._countAndFlagsBits = 0x7449657461657263;
      v113._object = (void *)0xEB00000000286D65;
      sub_10096BDC0(v113);
      swift_getWitnessTable();
      sub_10096D270();
      v114._countAndFlagsBits = 8236;
      v114._object = (void *)0xE200000000000000;
      sub_10096BDC0(v114);
      uint64_t v35 = (void *)0xE300000000000000;
      switch(v33)
      {
        case 1:
          uint64_t v31 = 7498084;
          break;
        case 2:
          uint64_t v35 = (void *)0xE700000000000000;
          uint64_t v31 = 0x6B6E696C6D7973;
          break;
        case 3:
          uint64_t v35 = (void *)0xE500000000000000;
          uint64_t v31 = 0x7361696C61;
          break;
        default:
          break;
      }
      v145._countAndFlagsBits = v31;
      v145._object = v35;
      sub_10096BDC0(v145);
      swift_bridgeObjectRelease();
      v146._countAndFlagsBits = 41;
      v146._object = (void *)0xE100000000000000;
      sub_10096BDC0(v146);
      uint64_t v50 = v109;
      (*(void (**)(char *, uint64_t))(v34 + 8))(v27, v32);
      break;
  }
  return v50;
}

uint64_t sub_10014BF0C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v100 = a2;
  uint64_t v5 = a1[2];
  uint64_t v6 = a1[4];
  uint64_t v7 = type metadata accessor for ReconciliationSideMutation();
  uint64_t v92 = *(void *)(v7 - 8);
  int v93 = (void (*)(void, void, void))v7;
  __chkstk_darwin(v7);
  unint64_t v91 = (char *)&v87 - v8;
  uint64_t v9 = (void (*)(void, void, void))a1[3];
  uint64_t v10 = a1[5];
  uint64_t v11 = type metadata accessor for ReconciliationSideMutation();
  uint64_t v89 = *(void *)(v11 - 8);
  uint64_t v90 = v11;
  __chkstk_darwin(v11);
  uint64_t v88 = (char *)&v87 - v12;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v14 = swift_getAssociatedTypeWitness();
  uint64_t v99 = v6;
  uint64_t v97 = v5;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v98 = v10;
  uint64_t v16 = v9;
  uint64_t v17 = swift_getAssociatedConformanceWitness();
  uint64_t v95 = v14;
  uint64_t v96 = AssociatedTypeWitness;
  uint64_t v101 = (void (*)(void, void, void))AssociatedTypeWitness;
  uint64_t v102 = v14;
  uint64_t v18 = AssociatedConformanceWitness;
  uint64_t v103 = AssociatedConformanceWitness;
  uint64_t v104 = v17;
  uint64_t v94 = v17;
  uint64_t v19 = (int8x16_t *)type metadata accessor for ReconciliationID();
  uint64_t v20 = v19[-1].i64[1];
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v87 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __chkstk_darwin(v21);
  uint64_t v26 = (char *)&v87 - v25;
  __chkstk_darwin(v24);
  uint64_t v28 = (char *)&v87 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, void *))(v29 + 16))(v28, v3, a1);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v35 = v95;
      uint64_t v34 = v96;
      TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
      uint64_t v37 = &v28[*(int *)(TupleTypeMetadata3 + 48)];
      char v38 = v28[*(int *)(TupleTypeMetadata3 + 64)];
      uint64_t v39 = swift_getTupleTypeMetadata3();
      uint64_t v40 = v100;
      (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v34 - 8) + 32))(v100 + *(int *)(v39 + 48), v28, v34);
      uint64_t v41 = *(int *)(v39 + 64);
      (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v35 - 8) + 32))(v40, v37, v35);
      *(unsigned char *)(v40 + v41) = v38;
      uint64_t v101 = v16;
      uint64_t v102 = v97;
      uint64_t v103 = v98;
      uint64_t v104 = v99;
      type metadata accessor for ReconciliationMutation();
      break;
    case 3u:
      (*(void (**)(char *, char *, int8x16_t *))(v20 + 32))(v26, v28, v19);
      sub_1005EC558(v19, v100);
      (*(void (**)(char *, int8x16_t *))(v20 + 8))(v26, v19);
      uint64_t v101 = v16;
      uint64_t v102 = v97;
      uint64_t v103 = v98;
      uint64_t v104 = v99;
      type metadata accessor for ReconciliationMutation();
      break;
    case 4u:
    case 5u:
      Swift::String v42 = v19;
      uint64_t v43 = *(void *)&v28[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      (*(void (**)(char *, char *, int8x16_t *))(v20 + 32))(v26, v28, v42);
      uint64_t v101 = (void (*)(void, void, void))v95;
      uint64_t v102 = v96;
      uint64_t v103 = v94;
      uint64_t v104 = v18;
      type metadata accessor for ReconciliationID();
      uint64_t v44 = *(int *)(swift_getTupleTypeMetadata2() + 48);
      uint64_t v45 = v100;
      sub_1005EC558(v42, v100);
      (*(void (**)(char *, int8x16_t *))(v20 + 8))(v26, v42);
      *(void *)(v45 + v44) = v43;
      uint64_t v101 = v16;
      uint64_t v102 = v97;
      uint64_t v103 = v98;
      uint64_t v104 = v99;
      type metadata accessor for ReconciliationMutation();
      break;
    case 6u:
      uint64_t v46 = &v28[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      int v93 = v16;
      uint64_t v47 = *(void (**)(char *, char *, int8x16_t *))(v20 + 32);
      v47(v26, v28, v19);
      v47(v23, v46, v19);
      uint64_t v101 = (void (*)(void, void, void))v95;
      uint64_t v102 = v96;
      uint64_t v103 = v94;
      uint64_t v104 = v18;
      type metadata accessor for ReconciliationID();
      uint64_t v48 = v100 + *(int *)(swift_getTupleTypeMetadata2() + 48);
      sub_1005EC558(v19, v100);
      uint64_t v49 = *(void (**)(char *, int8x16_t *))(v20 + 8);
      v49(v26, v19);
      sub_1005EC558(v19, v48);
      v49(v23, v19);
      uint64_t v101 = v93;
      uint64_t v102 = v97;
      uint64_t v103 = v98;
      uint64_t v104 = v99;
      type metadata accessor for ReconciliationMutation();
      break;
    case 7u:
      uint64_t v50 = &v28[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      int v93 = v16;
      uint64_t v51 = *(void (**)(char *, char *, int8x16_t *))(v20 + 32);
      v51(v26, v28, v19);
      v51(v23, v50, v19);
      uint64_t v101 = (void (*)(void, void, void))v95;
      uint64_t v102 = v96;
      uint64_t v103 = v94;
      uint64_t v104 = v18;
      type metadata accessor for ReconciliationID();
      uint64_t v52 = v100 + *(int *)(swift_getTupleTypeMetadata2() + 48);
      sub_1005EC558(v19, v100);
      uint64_t v53 = *(void (**)(char *, int8x16_t *))(v20 + 8);
      v53(v26, v19);
      sub_1005EC558(v19, v52);
      v53(v23, v19);
      uint64_t v101 = v93;
      uint64_t v102 = v97;
      uint64_t v103 = v98;
      uint64_t v104 = v99;
      type metadata accessor for ReconciliationMutation();
      break;
    case 8u:
      uint64_t v54 = v90;
      uint64_t v55 = &v28[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      (*(void (**)(char *, char *, int8x16_t *))(v20 + 32))(v26, v28, v19);
      uint64_t v56 = v88;
      int v93 = *(void (**)(void, void, void))(v89 + 32);
      v93(v88, v55, v54);
      uint64_t v101 = (void (*)(void, void, void))v95;
      uint64_t v102 = v96;
      uint64_t v103 = v94;
      uint64_t v104 = v18;
      type metadata accessor for ReconciliationID();
      uint64_t v57 = v100 + *(int *)(swift_getTupleTypeMetadata2() + 48);
      sub_1005EC558(v19, v100);
      (*(void (**)(char *, int8x16_t *))(v20 + 8))(v26, v19);
      v93(v57, v56, v54);
      uint64_t v101 = v16;
      uint64_t v102 = v97;
      uint64_t v103 = v98;
      uint64_t v104 = v99;
      type metadata accessor for ReconciliationMutation();
      break;
    case 9u:
      uint64_t v58 = v93;
      uint64_t v59 = &v28[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      (*(void (**)(char *, char *, int8x16_t *))(v20 + 32))(v26, v28, v19);
      unint64_t v60 = v91;
      uint64_t v92 = *(void *)(v92 + 32);
      ((void (*)(char *, char *, void))v92)(v91, v59, v58);
      uint64_t v101 = (void (*)(void, void, void))v95;
      uint64_t v102 = v96;
      uint64_t v103 = v94;
      uint64_t v104 = v18;
      type metadata accessor for ReconciliationID();
      uint64_t v61 = v100 + *(int *)(swift_getTupleTypeMetadata2() + 48);
      sub_1005EC558(v19, v100);
      (*(void (**)(char *, int8x16_t *))(v20 + 8))(v26, v19);
      ((void (*)(uint64_t, char *, void))v92)(v61, v60, v58);
      uint64_t v101 = v16;
      uint64_t v102 = v97;
      uint64_t v103 = v98;
      uint64_t v104 = v99;
      type metadata accessor for ReconciliationMutation();
      break;
    case 0xAu:
      Swift::String v62 = &v28[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      uint64_t v63 = v18;
      uint64_t v64 = v19;
      uint64_t v65 = *(void *)v62;
      uint64_t v66 = v16;
      char v67 = v62[8];
      (*(void (**)(char *, char *, int8x16_t *))(v20 + 32))(v26, v28, v64);
      uint64_t v101 = (void (*)(void, void, void))v95;
      uint64_t v102 = v96;
      uint64_t v103 = v94;
      uint64_t v104 = v63;
      type metadata accessor for ReconciliationID();
      uint64_t v68 = v100 + *(int *)(swift_getTupleTypeMetadata2() + 48);
      sub_1005EC558(v64, v100);
      (*(void (**)(char *, int8x16_t *))(v20 + 8))(v26, v64);
      *(void *)uint64_t v68 = v65;
      *(unsigned char *)(v68 + 8) = v67;
      uint64_t v101 = v66;
      uint64_t v102 = v97;
      uint64_t v103 = v98;
      uint64_t v104 = v99;
      type metadata accessor for ReconciliationMutation();
      break;
    case 0xBu:
      unint64_t v69 = &v28[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      uint64_t v70 = v18;
      unint64_t v71 = v19;
      unsigned int v72 = v16;
      uint64_t v73 = *(void *)v69;
      uint64_t v74 = *((void *)v69 + 1);
      (*(void (**)(char *, char *, int8x16_t *))(v20 + 32))(v26, v28, v71);
      uint64_t v101 = (void (*)(void, void, void))v95;
      uint64_t v102 = v96;
      uint64_t v103 = v94;
      uint64_t v104 = v70;
      type metadata accessor for ReconciliationID();
      Swift::String v75 = (void *)(v100 + *(int *)(swift_getTupleTypeMetadata2() + 48));
      sub_1005EC558(v71, v100);
      (*(void (**)(char *, int8x16_t *))(v20 + 8))(v26, v71);
      *Swift::String v75 = v73;
      v75[1] = v74;
      uint64_t v101 = v72;
      uint64_t v102 = v97;
      uint64_t v103 = v98;
      uint64_t v104 = v99;
      type metadata accessor for ReconciliationMutation();
      break;
    case 0xDu:
      uint64_t v76 = swift_getTupleTypeMetadata3();
      uint64_t v77 = v18;
      size_t v78 = v19;
      uint64_t v79 = *(void *)&v28[*(int *)(v76 + 48)];
      unsigned int v80 = v16;
      uint64_t v81 = *(void *)&v28[*(int *)(v76 + 64)];
      (*(void (**)(char *, char *, int8x16_t *))(v20 + 32))(v26, v28, v78);
      uint64_t v101 = (void (*)(void, void, void))v95;
      uint64_t v102 = v96;
      uint64_t v103 = v94;
      uint64_t v104 = v77;
      type metadata accessor for ReconciliationID();
      uint64_t v82 = swift_getTupleTypeMetadata3();
      uint64_t v83 = *(int *)(v82 + 48);
      uint64_t v84 = *(int *)(v82 + 64);
      uint64_t v85 = v100;
      sub_1005EC558(v78, v100);
      (*(void (**)(char *, int8x16_t *))(v20 + 8))(v26, v78);
      *(void *)(v85 + v83) = v79;
      *(void *)(v85 + v84) = v81;
      uint64_t v101 = v80;
      uint64_t v102 = v97;
      uint64_t v103 = v98;
      uint64_t v104 = v99;
      type metadata accessor for ReconciliationMutation();
      break;
    default:
      uint64_t v30 = v19;
      char v31 = v28[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      (*(void (**)(char *, char *, int8x16_t *))(v20 + 32))(v26, v28, v30);
      uint64_t v101 = (void (*)(void, void, void))v95;
      uint64_t v102 = v96;
      uint64_t v103 = v94;
      uint64_t v104 = v18;
      type metadata accessor for ReconciliationID();
      uint64_t v32 = *(int *)(swift_getTupleTypeMetadata2() + 48);
      uint64_t v33 = v100;
      sub_1005EC558(v30, v100);
      (*(void (**)(char *, int8x16_t *))(v20 + 8))(v26, v30);
      *(unsigned char *)(v33 + v32) = v31;
      uint64_t v101 = v16;
      uint64_t v102 = v97;
      uint64_t v103 = v98;
      uint64_t v104 = v99;
      type metadata accessor for ReconciliationMutation();
      break;
  }
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_10014D008(unint64_t a1, char a2)
{
  if (a2) {
    uint64_t v2 = 0x2865766F6D6572;
  }
  else {
    uint64_t v2 = 677667937;
  }
  uint64_t v4 = v2;
  v5._countAndFlagsBits = sub_100608C54(a1);
  sub_10096BDC0(v5);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_10014D074()
{
  return sub_10014D008(*(void *)v0, *(unsigned char *)(v0 + 8));
}

uint64_t sub_10014D080()
{
  return swift_getGenericMetadata();
}

ValueMetadata *type metadata accessor for ReconciliationChildrenDeletionOptions()
{
  return &type metadata for ReconciliationChildrenDeletionOptions;
}

unint64_t sub_10014D0C4()
{
  unint64_t result = qword_100ACDB60;
  if (!qword_100ACDB60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100ACDB60);
  }
  return result;
}

unint64_t sub_10014D11C()
{
  unint64_t result = qword_100ACDB68;
  if (!qword_100ACDB68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100ACDB68);
  }
  return result;
}

unint64_t sub_10014D174()
{
  unint64_t result = qword_100ACDB70;
  if (!qword_100ACDB70)
  {
    sub_100033BE8(&qword_100ACDB78);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100ACDB70);
  }
  return result;
}

unint64_t sub_10014D1D4()
{
  unint64_t result = qword_100ACDB80;
  if (!qword_100ACDB80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100ACDB80);
  }
  return result;
}

unint64_t sub_10014D22C()
{
  unint64_t result = qword_100ACDB88;
  if (!qword_100ACDB88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100ACDB88);
  }
  return result;
}

unint64_t sub_10014D284()
{
  unint64_t result = qword_100AD4BF0[0];
  if (!qword_100AD4BF0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100AD4BF0);
  }
  return result;
}

unint64_t sub_10014D2D8(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_10014D308();
  unint64_t result = sub_10014D35C();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_10014D308()
{
  unint64_t result = qword_100ACDBB0;
  if (!qword_100ACDBB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100ACDBB0);
  }
  return result;
}

unint64_t sub_10014D35C()
{
  unint64_t result = qword_100ACDBB8;
  if (!qword_100ACDBB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100ACDBB8);
  }
  return result;
}

uint64_t Filename.fileSystemRepresentation.getter()
{
  return sub_10096C910();
}

double sub_10014D424@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10014D454(a1, (void (*)(uint64_t))sub_10014E450, a2);
}

double sub_10014D43C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10014D454(a1, (void (*)(uint64_t))sub_10009C394, a2);
}

double sub_10014D454@<D0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X8>)
{
  if (*(void *)(a1 + 16))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    char v4 = *(unsigned char *)(a1 + 41);
    char v5 = *(unsigned char *)(a1 + 42);
    char v6 = *(unsigned char *)(a1 + 48);
    uint64_t v7 = *(void *)(a1 + 88);
    char v8 = *(unsigned char *)(a1 + 96);
    uint64_t v9 = *(void *)(a1 + 104);
    uint64_t v10 = *(void *)(a1 + 112);
    *(void *)a3 = v3;
    *(unsigned char *)(a3 + 8) = *(unsigned char *)(a1 + 40);
    *(unsigned char *)(a3 + 9) = v4;
    *(unsigned char *)(a3 + 10) = v5;
    *(unsigned char *)(a3 + 16) = v6;
    *(_OWORD *)(a3 + 24) = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a3 + 40) = *(_OWORD *)(a1 + 72);
    *(void *)(a3 + 56) = v7;
    *(unsigned char *)(a3 + 64) = v8;
    *(void *)(a3 + 72) = v9;
    *(void *)(a3 + 80) = v10;
    a2(v3);
    swift_errorRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    double result = 0.0;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 56) = 1;
    *(void *)(a3 + 72) = 0;
    *(void *)(a3 + 80) = 0;
    *(void *)(a3 + 64) = 0;
  }
  return result;
}

void *sub_10014D51C(uint64_t a1)
{
  return sub_10014D534(a1, (uint64_t (*)(void))sub_1007D7728);
}

void *sub_10014D534(uint64_t a1, uint64_t (*a2)(void))
{
  double result = (void *)a2();
  if (v5) {
    goto LABEL_8;
  }
  if (*(_DWORD *)(a1 + 36) != v4)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == (void *)(1 << *(unsigned char *)(a1 + 32))) {
    return 0;
  }
  else {
    return sub_10014E518(&v6, (uint64_t)result, v4, 0, a1);
  }
}

void *sub_10014D5C0(uint64_t a1)
{
  double result = (void *)sub_1007D7728(a1);
  if (v4) {
    goto LABEL_8;
  }
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == (void *)(1 << *(unsigned char *)(a1 + 32))) {
    return 0;
  }
  else {
    return sub_10014E608(&v5, (uint64_t)result, v3, 0, a1);
  }
}

libfssync::Filename __swiftcall Filename.init(_:)(Swift::String a1)
{
  sub_10001F9C0();
  uint64_t v1 = sub_10096C910();
  int v3 = v2;
  swift_bridgeObjectRelease();
  uint64_t v4 = v1;
  uint64_t v5 = v3;
  result.rawValue._object = v5;
  result.rawValue._countAndFlagsBits = v4;
  return result;
}

uint64_t Filename.rawValue.getter(uint64_t a1)
{
  return a1;
}

uint64_t Filename.description.getter()
{
  NSString v0 = sub_10096BC00();
  id v1 = objc_msgSend(v0, "fp_obfuscatedFilename");

  uint64_t v2 = _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
  return v2;
}

uint64_t sub_10014D77C(uint64_t a1, unint64_t a2)
{
  swift_bridgeObjectRetain();
  uint64_t v4 = sub_10002C020(a1, a2);
  uint64_t v6 = v5;
  swift_bridgeObjectRelease();
  if (!v6) {
    goto LABEL_7;
  }
  if (v4 != 12565487 || v6 != 0xA300000000000000)
  {
    char v7 = sub_10096D2D0();
    swift_bridgeObjectRelease();
    if (v7) {
      goto LABEL_6;
    }
LABEL_7:
    swift_bridgeObjectRetain();
    return a1;
  }
  swift_bridgeObjectRelease();
LABEL_6:
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_10096BD70();
  sub_1000364D0(v8, a1, a2);
  swift_bridgeObjectRelease();
  a1 = sub_10096BD10();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t static Filename.== infix(_:_:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  swift_bridgeObjectRetain();
  uint64_t v8 = sub_10002C020(a1, a2);
  uint64_t v10 = v9;
  swift_bridgeObjectRelease();
  if (v10)
  {
    if (v8 == 12565487 && v10 == 0xA300000000000000)
    {
      swift_bridgeObjectRelease();
LABEL_6:
      swift_bridgeObjectRetain();
      unint64_t v12 = sub_10096BD70();
      sub_1000364D0(v12, a1, a2);
      swift_bridgeObjectRelease();
      a1 = sub_10096BD10();
      a2 = v13;
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    char v11 = sub_10096D2D0();
    swift_bridgeObjectRelease();
    if (v11) {
      goto LABEL_6;
    }
  }
  swift_bridgeObjectRetain();
LABEL_8:
  swift_bridgeObjectRetain();
  uint64_t v14 = sub_10002C020(a3, a4);
  uint64_t v16 = v15;
  swift_bridgeObjectRelease();
  if (v16)
  {
    if (v14 == 12565487 && v16 == 0xA300000000000000)
    {
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
    char v17 = sub_10096D2D0();
    swift_bridgeObjectRelease();
    if (v17)
    {
LABEL_13:
      swift_bridgeObjectRetain();
      unint64_t v18 = sub_10096BD70();
      sub_1000364D0(v18, a3, a4);
      swift_bridgeObjectRelease();
      uint64_t v19 = sub_10096BD10();
      a4 = v20;
      swift_bridgeObjectRelease();
      if (a1 != v19) {
        goto LABEL_18;
      }
      goto LABEL_16;
    }
  }
  swift_bridgeObjectRetain();
  if (a1 != a3)
  {
LABEL_18:
    char v21 = sub_10096D2D0();
    goto LABEL_19;
  }
LABEL_16:
  if (a2 != a4) {
    goto LABEL_18;
  }
  char v21 = 1;
LABEL_19:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v21 & 1;
}

uint64_t Filename.isValid.getter(uint64_t a1, uint64_t a2)
{
  if (a1 == 11822 && a2 == 0xE200000000000000) {
    return 0;
  }
  char v5 = sub_10096D2D0();
  char v6 = 0;
  if ((v5 & 1) == 0)
  {
    if (a1 == 46 && a2 == 0xE100000000000000) {
      char v6 = 0;
    }
    else {
      char v6 = sub_10096D2D0() ^ 1;
    }
  }
  return v6 & 1;
}

void *sub_10014DB98@<X0>(void *result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = result[1];
  *a2 = *result;
  a2[1] = v2;
  return result;
}

uint64_t sub_10014DBA4@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

Swift::Int sub_10014DBB0()
{
  return sub_10096D500();
}

uint64_t sub_10014DC0C()
{
  swift_bridgeObjectRetain();
  sub_10096BD50();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10014DC64()
{
  return sub_10096D500();
}

uint64_t sub_10014DCBC()
{
  NSString v0 = sub_10096BC00();
  id v1 = objc_msgSend(v0, "fp_obfuscatedFilename");

  uint64_t v2 = _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
  return v2;
}

uint64_t sub_10014DD24(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = a2[1];
  uint64_t v4 = sub_10014D77C(*(void *)a1, *(void *)(a1 + 8));
  uint64_t v6 = v5;
  if (v4 == sub_10014D77C(v2, v3) && v6 == v7) {
    char v9 = 1;
  }
  else {
    char v9 = sub_10096D2D0();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

uint64_t Filename.encode(to:)()
{
  return sub_10096BDD0();
}

uint64_t Filename.init(from:)(uint64_t a1)
{
  sub_10009CA78(a1, (uint64_t)v4);
  uint64_t v2 = sub_10096BD40();
  sub_1000268E0(a1);
  return v2;
}

uint64_t sub_10014DE3C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  sub_10009CA78(a1, (uint64_t)v10);
  uint64_t v5 = sub_10096BD40();
  if (v2) {
    return sub_1000268E0(a1);
  }
  uint64_t v8 = v5;
  uint64_t v9 = v6;
  uint64_t result = sub_1000268E0(a1);
  *a2 = v8;
  a2[1] = v9;
  return result;
}

uint64_t sub_10014DEBC()
{
  return sub_10096BDD0();
}

uint64_t sub_10014DEE0@<X0>(uint64_t *a1@<X8>)
{
  sub_10001F9C0();
  uint64_t v2 = sub_10096C910();
  uint64_t v4 = v3;
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  a1[1] = v4;
  return result;
}

uint64_t sub_10014DF78()
{
  sub_10001F9C0();
  uint64_t result = sub_10096C910();
  static Filename.desktopFolderName = result;
  *(void *)algn_100B0B058 = v1;
  return result;
}

uint64_t *Filename.desktopFolderName.unsafeMutableAddressor()
{
  if (qword_100ACBFF0 != -1) {
    swift_once();
  }
  return &static Filename.desktopFolderName;
}

uint64_t static Filename.desktopFolderName.getter()
{
  return sub_10014E18C(&qword_100ACBFF0, &static Filename.desktopFolderName);
}

uint64_t sub_10014E080()
{
  sub_10001F9C0();
  uint64_t result = sub_10096C910();
  static Filename.documentsFolderName = result;
  *(void *)algn_100B0B068 = v1;
  return result;
}

uint64_t *Filename.documentsFolderName.unsafeMutableAddressor()
{
  if (qword_100ACBFF8 != -1) {
    swift_once();
  }
  return &static Filename.documentsFolderName;
}

uint64_t static Filename.documentsFolderName.getter()
{
  return sub_10014E18C(&qword_100ACBFF8, &static Filename.documentsFolderName);
}

uint64_t sub_10014E18C(void *a1, uint64_t *a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v3 = *a2;
  swift_bridgeObjectRetain();
  return v3;
}

unint64_t sub_10014E1E4()
{
  unint64_t result = qword_100ACDBC0;
  if (!qword_100ACDBC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100ACDBC0);
  }
  return result;
}

unint64_t sub_10014E23C()
{
  unint64_t result = qword_100ACDBC8;
  if (!qword_100ACDBC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100ACDBC8);
  }
  return result;
}

void *sub_10014E290()
{
  return &protocol witness table for String;
}

unint64_t sub_10014E2A0()
{
  unint64_t result = qword_100ACDBD0;
  if (!qword_100ACDBD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100ACDBD0);
  }
  return result;
}

void *sub_10014E2F4()
{
  return &protocol witness table for String;
}

void *sub_10014E300()
{
  return &protocol witness table for String;
}

void *initializeBufferWithCopyOfBuffer for Filename(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for TargetedSPSError()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for Filename(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for Filename(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Filename(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Filename(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Filename()
{
  return &type metadata for Filename;
}

id sub_10014E450(id result, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0) {
    return result;
  }
  return result;
}

uint64_t sub_10014E45C(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a2 < 0 || 1 << *(unsigned char *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(void *)(a5 + 8 * ((unint64_t)a2 >> 6) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a5 + 36) == a3)
  {
    uint64_t v6 = result;
    uint64_t v7 = *(void *)(a5 + 56);
    uint64_t v8 = *(void *)(*(void *)(a5 + 48) + 16 * a2);
    uint64_t v9 = sub_10002B7CC(&qword_100ACCB10);
    sub_10014E5A0(v7 + *(void *)(*(void *)(v9 - 8) + 72) * a2, v6);
    return v8;
  }
LABEL_8:
  __break(1u);
  return result;
}

void *sub_10014E518(void *result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a2 < 0 || 1 << *(unsigned char *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(void *)(a5 + 8 * ((unint64_t)a2 >> 6) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a5 + 36) == a3)
  {
    uint64_t v5 = *(void **)(*(void *)(a5 + 48) + 8 * a2);
    *unint64_t result = *(void *)(*(void *)(a5 + 56) + 8 * a2);
    id v6 = v5;
    swift_retain();
    return v6;
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_10014E5A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002B7CC(&qword_100ACCB10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void *sub_10014E608(void *result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a2 < 0 || 1 << *(unsigned char *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(void *)(a5 + 8 * ((unint64_t)a2 >> 6) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a5 + 36) == a3)
  {
    uint64_t v5 = *(void *)(*(void *)(a5 + 48) + 16 * a2);
    *unint64_t result = *(void *)(*(void *)(a5 + 56) + 8 * a2);
    swift_bridgeObjectRetain();
    swift_errorRetain();
    return (void *)v5;
  }
LABEL_8:
  __break(1u);
  return result;
}

void *sub_10014E6A0(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  unint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    uint64_t v3 = a1;
    sub_100021770(0, v1, 0);
    unint64_t v2 = _swiftEmptyArrayStorage;
    uint64_t v5 = sub_1005F30E8(v3);
    uint64_t v6 = 0;
    uint64_t v7 = v3 + 64;
    char v8 = *(unsigned char *)(v3 + 32);
    uint64_t v29 = v3 + 80;
    int64_t v30 = v1;
    uint64_t v32 = v3 + 64;
    uint64_t v33 = v3;
    int v31 = v4;
    while ((v5 & 0x8000000000000000) == 0 && v5 < 1 << v8)
    {
      unint64_t v11 = (unint64_t)v5 >> 6;
      if ((*(void *)(v7 + 8 * ((unint64_t)v5 >> 6)) & (1 << v5)) == 0) {
        goto LABEL_27;
      }
      if (*(_DWORD *)(v3 + 36) != v4) {
        goto LABEL_28;
      }
      uint64_t v34 = v6 + 1;
      uint64_t v35 = v2;
      unint64_t v12 = (uint64_t *)(*(void *)(v3 + 56) + 16 * v5);
      uint64_t v13 = *v12;
      unint64_t v14 = v12[1];
      swift_bridgeObjectRetain();
      sub_10001EBB0(v13, v14);
      swift_bridgeObjectRetain();
      sub_10001EBB0(v13, v14);
      swift_bridgeObjectRelease();
      sub_10001E9C0(v13, v14);
      NSString v15 = sub_10096BC00();
      id v16 = objc_msgSend(v15, "fp_obfuscatedExtendedAttributeName");

      uint64_t v17 = _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
      uint64_t v19 = v18;

      uint64_t v36 = v17;
      v37._countAndFlagsBits = 31546;
      v37._object = (void *)0xE200000000000000;
      sub_10096BDC0(v37);
      switch(v14 >> 62)
      {
        case 1uLL:
          if (!__OFSUB__(HIDWORD(v13), v13)) {
            goto LABEL_13;
          }
          goto LABEL_32;
        case 2uLL:
          if (!__OFSUB__(*(void *)(v13 + 24), *(void *)(v13 + 16))) {
            goto LABEL_13;
          }
          goto LABEL_33;
        default:
LABEL_13:
          v38._countAndFlagsBits = sub_10096D220();
          sub_10096BDC0(v38);
          swift_bridgeObjectRelease();
          v39._countAndFlagsBits = 125;
          v39._object = (void *)0xE100000000000000;
          sub_10096BDC0(v39);
          swift_bridgeObjectRelease();
          sub_10001E9C0(v13, v14);
          unint64_t v2 = v35;
          unint64_t v21 = v35[2];
          unint64_t v20 = v35[3];
          if (v21 >= v20 >> 1)
          {
            sub_100021770((char *)(v20 > 1), v21 + 1, 1);
            unint64_t v2 = v35;
          }
          v2[2] = v21 + 1;
          uint64_t v22 = &v2[2 * v21];
          v22[4] = v36;
          v22[5] = v19;
          uint64_t v3 = v33;
          char v8 = *(unsigned char *)(v33 + 32);
          unint64_t v9 = 1 << v8;
          if (v5 >= 1 << v8) {
            goto LABEL_29;
          }
          uint64_t v7 = v32;
          uint64_t v23 = *(void *)(v32 + 8 * v11);
          if ((v23 & (1 << v5)) == 0) {
            goto LABEL_30;
          }
          int v4 = v31;
          if (*(_DWORD *)(v33 + 36) != v31) {
            goto LABEL_31;
          }
          unint64_t v24 = v23 & (-2 << (v5 & 0x3F));
          if (v24)
          {
            unint64_t v9 = __clz(__rbit64(v24)) | v5 & 0xFFFFFFFFFFFFFFC0;
            int64_t v10 = v30;
            goto LABEL_4;
          }
          unint64_t v25 = v11 + 1;
          unint64_t v26 = (v9 + 63) >> 6;
          int64_t v10 = v30;
          if (v11 + 1 >= v26) {
            goto LABEL_4;
          }
          unint64_t v27 = *(void *)(v32 + 8 * v25);
          if (v27) {
            goto LABEL_24;
          }
          break;
      }
      while (v26 - 2 != v11)
      {
        unint64_t v27 = *(void *)(v29 + 8 * v11++);
        if (v27)
        {
          unint64_t v25 = v11 + 1;
LABEL_24:
          unint64_t v9 = __clz(__rbit64(v27)) + (v25 << 6);
          break;
        }
      }
LABEL_4:
      uint64_t v6 = v34;
      uint64_t v5 = v9;
      if (v34 == v10) {
        return v2;
      }
    }
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    JUMPOUT(0x10014EA0CLL);
  }
  return v2;
}

Swift::String_optional __swiftcall NSFileProviderTypeAndCreator.creatorAsString()()
{
  uint64_t v1 = _sSo28NSFileProviderTypeAndCreatorV9libfssyncE12typeAsStringSSSgyF_0(HIDWORD(v0));
  result.value._object = v2;
  result.value._countAndFlagsBits = v1;
  return result;
}

uint64_t NSFileProviderTypeAndCreator.asString.getter(unint64_t a1)
{
  uint64_t v2 = sub_10096BCB0();
  __chkstk_darwin(v2 - 8);
  uint64_t v3 = sub_10096AE90();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v13 = __rev32(a1);
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for Data.Deallocator.none(_:), v3);
  sub_10096AE80();
  sub_10096A8C0();
  swift_allocObject();
  swift_retain();
  uint64_t v7 = sub_10096A860();
  uint64_t v8 = sub_100157758(v7, 8);
  unint64_t v10 = v9;
  swift_release();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_10096BC80();
  uint64_t v11 = sub_10096BC50();
  sub_10001E9C0(v8, v10);
  return v11;
}

void *sub_10014EC34@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = __ROR8__(*result, 32);
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

void sub_10014EC48(unint64_t *a1@<X8>)
{
  *a1 = v1[1] | ((unint64_t)*v1 << 32);
}

BOOL sub_10014EC58(unsigned int *a1, unsigned int *a2)
{
  return (a1[1] | ((unint64_t)*a1 << 32)) == (a2[1] | ((unint64_t)*a2 << 32));
}

uint64_t sub_10014EC74()
{
  return sub_10096C060();
}

uint64_t sub_10014ED04()
{
  return sub_10096BFF0();
}

uint64_t ItemMetadata.kind.getter()
{
  return *v0;
}

uint64_t ItemMetadata.kind.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

libfssync::Filename (__swiftcall *FileTreeWriterCollisionOptions.rawValue.modify())(Swift::String rawValue)
{
  return Filename.init(rawValue:);
}

unint64_t ItemMetadata.childItemCount.getter()
{
  return *(unsigned int *)(v0 + 4) | ((unint64_t)*(unsigned __int8 *)(v0 + 8) << 32);
}

uint64_t ItemMetadata.childItemCount.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 4) = result;
  *(unsigned char *)(v1 + 8) = BYTE4(result) & 1;
  return result;
}

libfssync::Filename (__swiftcall *ItemMetadata.childItemCount.modify())(Swift::String rawValue)
{
  return Filename.init(rawValue:);
}

uint64_t ItemMetadata.posixPermissions.getter()
{
  return *(unsigned __int16 *)(v0 + 10);
}

uint64_t ItemMetadata.posixPermissions.setter(uint64_t result)
{
  *(_WORD *)(v1 + 10) = result;
  return result;
}

libfssync::Filename (__swiftcall *ItemMetadata.posixPermissions.modify())(Swift::String rawValue)
{
  return Filename.init(rawValue:);
}

uint64_t ItemMetadata.creationDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for ItemMetadata() + 28);
  uint64_t v4 = sub_10096B0E0();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t ItemMetadata.creationDate.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for ItemMetadata() + 28);
  uint64_t v4 = sub_10096B0E0();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);

  return v5(v3, a1, v4);
}

libfssync::Filename (__swiftcall *ItemMetadata.creationDate.modify())(Swift::String rawValue)
{
  return Filename.init(rawValue:);
}

uint64_t ItemMetadata.contentModificationDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for ItemMetadata() + 32);
  uint64_t v4 = sub_10096B0E0();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t ItemMetadata.contentModificationDate.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for ItemMetadata() + 32);
  uint64_t v4 = sub_10096B0E0();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);

  return v5(v3, a1, v4);
}

libfssync::Filename (__swiftcall *ItemMetadata.contentModificationDate.modify())(Swift::String rawValue)
{
  return Filename.init(rawValue:);
}

uint64_t ItemMetadata.isLocked.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ItemMetadata() + 36));
}

uint64_t ItemMetadata.isLocked.setter(char a1)
{
  uint64_t result = type metadata accessor for ItemMetadata();
  *(unsigned char *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

libfssync::Filename (__swiftcall *ItemMetadata.isLocked.modify())(Swift::String rawValue)
{
  return Filename.init(rawValue:);
}

uint64_t ItemMetadata.isHidden.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ItemMetadata() + 40));
}

uint64_t ItemMetadata.isHidden.setter(char a1)
{
  uint64_t result = type metadata accessor for ItemMetadata();
  *(unsigned char *)(v1 + *(int *)(result + 40)) = a1;
  return result;
}

libfssync::Filename (__swiftcall *ItemMetadata.isHidden.modify())(Swift::String rawValue)
{
  return Filename.init(rawValue:);
}

uint64_t ItemMetadata.isPinned.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ItemMetadata() + 44));
}

uint64_t ItemMetadata.isPinned.setter(char a1)
{
  uint64_t result = type metadata accessor for ItemMetadata();
  *(unsigned char *)(v1 + *(int *)(result + 44)) = a1;
  return result;
}

libfssync::Filename (__swiftcall *ItemMetadata.isPinned.modify())(Swift::String rawValue)
{
  return Filename.init(rawValue:);
}

uint64_t ItemMetadata.isInPinnedFolder.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ItemMetadata() + 48));
}

uint64_t ItemMetadata.isInPinnedFolder.setter(char a1)
{
  uint64_t result = type metadata accessor for ItemMetadata();
  *(unsigned char *)(v1 + *(int *)(result + 48)) = a1;
  return result;
}

libfssync::Filename (__swiftcall *ItemMetadata.isInPinnedFolder.modify())(Swift::String rawValue)
{
  return Filename.init(rawValue:);
}

uint64_t ItemMetadata.isPathExtensionHidden.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ItemMetadata() + 52));
}

uint64_t ItemMetadata.isPathExtensionHidden.setter(char a1)
{
  uint64_t result = type metadata accessor for ItemMetadata();
  *(unsigned char *)(v1 + *(int *)(result + 52)) = a1;
  return result;
}

libfssync::Filename (__swiftcall *ItemMetadata.isPathExtensionHidden.modify())(Swift::String rawValue)
{
  return Filename.init(rawValue:);
}

uint64_t ItemMetadata.beforeBounceFilename.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for ItemMetadata() + 56));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ItemMetadata.beforeBounceFilename.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for ItemMetadata() + 56));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

libfssync::Filename (__swiftcall *ItemMetadata.beforeBounceFilename.modify())(Swift::String rawValue)
{
  return Filename.init(rawValue:);
}

uint64_t ItemMetadata.isSyncRoot.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ItemMetadata() + 60));
}

uint64_t ItemMetadata.isSyncRoot.setter(char a1)
{
  uint64_t result = type metadata accessor for ItemMetadata();
  *(unsigned char *)(v1 + *(int *)(result + 60)) = a1;
  return result;
}

libfssync::Filename (__swiftcall *ItemMetadata.isSyncRoot.modify())(Swift::String rawValue)
{
  return Filename.init(rawValue:);
}

uint64_t ItemMetadata.isIgnoreRoot.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ItemMetadata() + 64));
}

uint64_t ItemMetadata.isIgnoreRoot.setter(char a1)
{
  uint64_t result = type metadata accessor for ItemMetadata();
  *(unsigned char *)(v1 + *(int *)(result + 64)) = a1;
  return result;
}

libfssync::Filename (__swiftcall *ItemMetadata.isIgnoreRoot.modify())(Swift::String rawValue)
{
  return Filename.init(rawValue:);
}

uint64_t ItemMetadata.isInIgnoreRoot.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ItemMetadata() + 68));
}

uint64_t ItemMetadata.isInIgnoreRoot.setter(char a1)
{
  uint64_t result = type metadata accessor for ItemMetadata();
  *(unsigned char *)(v1 + *(int *)(result + 68)) = a1;
  return result;
}

libfssync::Filename (__swiftcall *ItemMetadata.isInIgnoreRoot.modify())(Swift::String rawValue)
{
  return Filename.init(rawValue:);
}

uint64_t ItemMetadata.isDetachedRoot.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ItemMetadata() + 72));
}

uint64_t ItemMetadata.isDetachedRoot.setter(char a1)
{
  uint64_t result = type metadata accessor for ItemMetadata();
  *(unsigned char *)(v1 + *(int *)(result + 72)) = a1;
  return result;
}

libfssync::Filename (__swiftcall *ItemMetadata.isDetachedRoot.modify())(Swift::String rawValue)
{
  return Filename.init(rawValue:);
}

uint64_t ItemMetadata.closestSyncRoot.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for ItemMetadata() + 76));
}

uint64_t ItemMetadata.closestSyncRoot.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for ItemMetadata();
  *(void *)(v1 + *(int *)(result + 76)) = a1;
  return result;
}

libfssync::Filename (__swiftcall *ItemMetadata.closestSyncRoot.modify())(Swift::String rawValue)
{
  return Filename.init(rawValue:);
}

uint64_t ItemMetadata.isDataless.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ItemMetadata() + 80));
}

uint64_t ItemMetadata.isDataless.setter(char a1)
{
  uint64_t result = type metadata accessor for ItemMetadata();
  *(unsigned char *)(v1 + *(int *)(result + 80)) = a1;
  return result;
}

libfssync::Filename (__swiftcall *ItemMetadata.isDataless.modify())(Swift::String rawValue)
{
  return Filename.init(rawValue:);
}

uint64_t ItemMetadata.evictionUrgency.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ItemMetadata() + 84));
}

uint64_t ItemMetadata.evictionUrgency.setter(char a1)
{
  uint64_t result = type metadata accessor for ItemMetadata();
  *(unsigned char *)(v1 + *(int *)(result + 84)) = a1;
  return result;
}

libfssync::Filename (__swiftcall *ItemMetadata.evictionUrgency.modify())(Swift::String rawValue)
{
  return Filename.init(rawValue:);
}

uint64_t ItemMetadata.evictionReason.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ItemMetadata() + 88));
}

uint64_t ItemMetadata.evictionReason.setter(char a1)
{
  uint64_t result = type metadata accessor for ItemMetadata();
  *(unsigned char *)(v1 + *(int *)(result + 88)) = a1;
  return result;
}

libfssync::Filename (__swiftcall *ItemMetadata.evictionReason.modify())(Swift::String rawValue)
{
  return Filename.init(rawValue:);
}

uint64_t ItemMetadata.isSyncPaused.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ItemMetadata() + 92));
}

uint64_t ItemMetadata.isSyncPaused.setter(char a1)
{
  uint64_t result = type metadata accessor for ItemMetadata();
  *(unsigned char *)(v1 + *(int *)(result + 92)) = a1;
  return result;
}

libfssync::Filename (__swiftcall *ItemMetadata.isSyncPaused.modify())(Swift::String rawValue)
{
  return Filename.init(rawValue:);
}

uint64_t ItemMetadata.isSyncResumingWithDropLocalChanges.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ItemMetadata() + 96));
}

uint64_t ItemMetadata.isSyncResumingWithDropLocalChanges.setter(char a1)
{
  uint64_t result = type metadata accessor for ItemMetadata();
  *(unsigned char *)(v1 + *(int *)(result + 96)) = a1;
  return result;
}

libfssync::Filename (__swiftcall *ItemMetadata.isSyncResumingWithDropLocalChanges.modify())(Swift::String rawValue)
{
  return Filename.init(rawValue:);
}

uint64_t ItemMetadata.size.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for ItemMetadata() + 100));
}

uint64_t ItemMetadata.size.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for ItemMetadata();
  *(void *)(v1 + *(int *)(result + 100)) = a1;
  return result;
}

libfssync::Filename (__swiftcall *ItemMetadata.size.modify())(Swift::String rawValue)
{
  return Filename.init(rawValue:);
}

uint64_t ItemMetadata.physicalSize.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for ItemMetadata() + 104));
}

uint64_t ItemMetadata.physicalSize.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for ItemMetadata();
  *(void *)(v1 + *(int *)(result + 104)) = a1;
  return result;
}

libfssync::Filename (__swiftcall *ItemMetadata.physicalSize.modify())(Swift::String rawValue)
{
  return Filename.init(rawValue:);
}

uint64_t ItemMetadata.isPackage.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ItemMetadata() + 108));
}

uint64_t ItemMetadata.isPackage.setter(char a1)
{
  uint64_t result = type metadata accessor for ItemMetadata();
  *(unsigned char *)(v1 + *(int *)(result + 108)) = a1;
  return result;
}

libfssync::Filename (__swiftcall *ItemMetadata.isPackage.modify())(Swift::String rawValue)
{
  return Filename.init(rawValue:);
}

uint64_t ItemMetadata.hasBundleBit.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ItemMetadata() + 112));
}

uint64_t ItemMetadata.hasBundleBit.setter(char a1)
{
  uint64_t result = type metadata accessor for ItemMetadata();
  *(unsigned char *)(v1 + *(int *)(result + 112)) = a1;
  return result;
}

libfssync::Filename (__swiftcall *ItemMetadata.hasBundleBit.modify())(Swift::String rawValue)
{
  return Filename.init(rawValue:);
}

uint64_t ItemMetadata.lastUsedDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for ItemMetadata();
  return sub_10002B70C(v1 + *(int *)(v3 + 116), a1, (uint64_t *)&unk_100ACB5E0);
}

uint64_t ItemMetadata.lastUsedDate.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for ItemMetadata() + 116);

  return sub_100157A4C(a1, v3);
}

libfssync::Filename (__swiftcall *ItemMetadata.lastUsedDate.modify())(Swift::String rawValue)
{
  return Filename.init(rawValue:);
}

uint64_t ItemMetadata.tags.getter()
{
  type metadata accessor for ItemMetadata();

  return swift_bridgeObjectRetain();
}

uint64_t ItemMetadata.tags.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for ItemMetadata() + 120);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v3) = a1;
  return result;
}

libfssync::Filename (__swiftcall *ItemMetadata.tags.modify())(Swift::String rawValue)
{
  return Filename.init(rawValue:);
}

uint64_t ItemMetadata.favoriteRank.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for ItemMetadata() + 124));
}

uint64_t ItemMetadata.favoriteRank.setter(uint64_t a1, char a2)
{
  uint64_t result = type metadata accessor for ItemMetadata();
  uint64_t v6 = v2 + *(int *)(result + 124);
  *(void *)uint64_t v6 = a1;
  *(unsigned char *)(v6 + 8) = a2 & 1;
  return result;
}

libfssync::Filename (__swiftcall *ItemMetadata.favoriteRank.modify())(Swift::String rawValue)
{
  return Filename.init(rawValue:);
}

uint64_t ItemMetadata.extendedAttributes.getter()
{
  type metadata accessor for ItemMetadata();

  return swift_bridgeObjectRetain();
}

uint64_t ItemMetadata.extendedAttributes.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for ItemMetadata() + 128);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v3) = a1;
  return result;
}

libfssync::Filename (__swiftcall *ItemMetadata.extendedAttributes.modify())(Swift::String rawValue)
{
  return Filename.init(rawValue:);
}

uint64_t ItemMetadata.quarantineBlob.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for ItemMetadata() + 132);
  uint64_t v2 = *(void *)v1;
  sub_10002D830(*(void *)v1, *(void *)(v1 + 8));
  return v2;
}

uint64_t ItemMetadata.quarantineBlob.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2 + *(int *)(type metadata accessor for ItemMetadata() + 132);
  uint64_t result = sub_10001E9AC(*(void *)v5, *(void *)(v5 + 8));
  *(void *)uint64_t v5 = a1;
  *(void *)(v5 + 8) = a2;
  return result;
}

libfssync::Filename (__swiftcall *ItemMetadata.quarantineBlob.modify())(Swift::String rawValue)
{
  return Filename.init(rawValue:);
}

uint64_t ItemMetadata.osType.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for ItemMetadata() + 136));
}

uint64_t ItemMetadata.osType.setter(uint64_t a1, char a2)
{
  uint64_t result = type metadata accessor for ItemMetadata();
  uint64_t v6 = v2 + *(int *)(result + 136);
  *(void *)uint64_t v6 = a1;
  *(unsigned char *)(v6 + 8) = a2 & 1;
  return result;
}

libfssync::Filename (__swiftcall *ItemMetadata.osType.modify())(Swift::String rawValue)
{
  return Filename.init(rawValue:);
}

uint64_t ItemMetadata.isResurrected.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ItemMetadata() + 140));
}

uint64_t ItemMetadata.isResurrected.setter(char a1)
{
  uint64_t result = type metadata accessor for ItemMetadata();
  *(unsigned char *)(v1 + *(int *)(result + 140)) = a1;
  return result;
}

libfssync::Filename (__swiftcall *ItemMetadata.isResurrected.modify())(Swift::String rawValue)
{
  return Filename.init(rawValue:);
}

unint64_t ItemMetadata.linkCount.getter()
{
  uint64_t v1 = (unsigned int *)(v0 + *(int *)(type metadata accessor for ItemMetadata() + 144));
  return *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32);
}

uint64_t ItemMetadata.linkCount.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for ItemMetadata();
  uint64_t v4 = v1 + *(int *)(result + 144);
  *(_DWORD *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 4) = BYTE4(a1) & 1;
  return result;
}

libfssync::Filename (__swiftcall *ItemMetadata.linkCount.modify())(Swift::String rawValue)
{
  return Filename.init(rawValue:);
}

uint64_t ItemMetadata.collaborationIdentifier.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for ItemMetadata() + 148));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ItemMetadata.collaborationIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for ItemMetadata() + 148));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

libfssync::Filename (__swiftcall *ItemMetadata.collaborationIdentifier.modify())(Swift::String rawValue)
{
  return Filename.init(rawValue:);
}

uint64_t ItemMetadata.contentType(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v101 = a1;
  uint64_t v102 = a2;
  uint64_t v105 = a3;
  uint64_t v5 = sub_10096B270();
  __chkstk_darwin(v5 - 8);
  uint64_t v94 = (char *)v86 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10096B370();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v103 = v7;
  uint64_t v104 = v8;
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v90 = (char *)v86 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v92 = (char *)v86 - v12;
  __chkstk_darwin(v11);
  uint64_t v100 = (char *)v86 - v13;
  uint64_t v14 = sub_10002B7CC(&qword_100ACA8C8);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  uint64_t v99 = (uint64_t)v86 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v98 = (uint64_t)v86 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v93 = (uint64_t)v86 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v23 = (char *)v86 - v22;
  uint64_t v24 = __chkstk_darwin(v21);
  uint64_t v97 = (char *)v86 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v28 = (char *)v86 - v27;
  __chkstk_darwin(v26);
  int64_t v30 = (char *)v86 - v29;
  uint64_t v31 = sub_10096B480();
  uint64_t v95 = *(void *)(v31 - 8);
  uint64_t v96 = v31;
  uint64_t v32 = __chkstk_darwin(v31);
  unint64_t v91 = (char *)v86 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  uint64_t v35 = (char *)v86 - v34;
  uint64_t v36 = type metadata accessor for ItemMetadata();
  uint64_t v37 = __chkstk_darwin(v36);
  Swift::String v39 = (unsigned __int8 *)v86 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = __chkstk_darwin(v37);
  Swift::String v42 = (unsigned __int8 *)v86 - v41;
  __chkstk_darwin(v40);
  uint64_t v44 = (char *)v86 - v43;
  int v45 = *v4;
  sub_10010DA98((uint64_t)v4, (uint64_t)v86 - v43);
  if (v45)
  {
    int v46 = v44[*(int *)(v36 + 108)];
    sub_10010DAFC((uint64_t)v44);
    if (v46 != 1)
    {
      switch(*v4)
      {
        case 1:
          uint64_t result = sub_10096B310();
          break;
        case 2:
          uint64_t result = sub_10096B2A0();
          break;
        case 3:
          uint64_t result = sub_10096B340();
          break;
        default:
          uint64_t result = sub_10096B300();
          break;
      }
      return result;
    }
  }
  else
  {
    sub_10010DAFC((uint64_t)v44);
  }
  uint64_t v48 = *(int *)(v36 + 108);
  int v49 = v4[v48];
  sub_10010DA98((uint64_t)v4, (uint64_t)v42);
  if (v49 == 1)
  {
    int v50 = *v42;
    sub_10010DAFC((uint64_t)v42);
    if ((v50 - 3) >= 0xFFFFFFFE)
    {
      id v51 = (id)fpfs_current_or_default_log();
      sub_10096B490();
      sub_10010DA98((uint64_t)v4, (uint64_t)v39);
      uint64_t v52 = sub_10096B470();
      int v53 = sub_10096C5C0();
      if (os_log_type_enabled(v52, (os_log_type_t)v53))
      {
        int v88 = v53;
        uint64_t v54 = (uint8_t *)swift_slowAlloc();
        uint64_t v87 = swift_slowAlloc();
        v107[0] = v87;
        *(_DWORD *)uint64_t v54 = 136315138;
        uint64_t v55 = *v39;
        unint64_t v56 = 0xE300000000000000;
        uint64_t v57 = 6516580;
        os_log_t v89 = v52;
        switch(v55)
        {
          case 1:
            uint64_t v57 = 7498084;
            break;
          case 2:
            unint64_t v56 = 0xE700000000000000;
            uint64_t v57 = 0x6B6E696C6D7973;
            break;
          case 3:
            unint64_t v56 = 0xE500000000000000;
            uint64_t v57 = 0x7361696C61;
            break;
          default:
            break;
        }
        v86[1] = v54 + 4;
        uint64_t v106 = sub_100719D44(v57, v56, v107);
        sub_10096C8C0();
        swift_bridgeObjectRelease();
        sub_10010DAFC((uint64_t)v39);
        uint64_t v52 = v89;
        _os_log_impl((void *)&_mh_execute_header, v89, (os_log_type_t)v88, "Inconsistent kind %s for package", v54, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_10010DAFC((uint64_t)v39);
      }

      (*(void (**)(char *, uint64_t))(v95 + 8))(v35, v96);
    }
  }
  else
  {
    sub_10010DAFC((uint64_t)v42);
  }
  NSString v58 = sub_10096BC00();
  id v59 = [v58 pathExtension];

  uint64_t v60 = _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
  uint64_t v62 = v61;

  if (v4[v48] == 1)
  {
    sub_10096B320();
    sub_10096B2B0();
    uint64_t v63 = v103;
    uint64_t v64 = v104;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v104 + 48))(v30, 1, v103) == 1)
    {
      sub_10096B320();
      return sub_10002B770((uint64_t)v30, &qword_100ACA8C8);
    }
    else
    {
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v64 + 32))(v105, v30, v63);
    }
  }
  else
  {
    uint64_t v101 = v60;
    uint64_t v102 = v62;
    uint64_t v66 = v103;
    uint64_t v65 = v104;
    char v67 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v104 + 56);
    v67(v28, 1, 1, v103);
    uint64_t v68 = &v4[*(int *)(v36 + 136)];
    if ((v68[8] & 1) == 0)
    {
      _sSo28NSFileProviderTypeAndCreatorV9libfssyncE12typeAsStringSSSgyF_0(*(_DWORD *)v68);
      if (v69)
      {
        sub_10096B260();
        sub_10096B2F0();
        v67(v23, 0, 1, v66);
        uint64_t v70 = (uint64_t)v97;
        sub_10096B2E0();
        sub_10002B770((uint64_t)v28, &qword_100ACA8C8);
        sub_100157AB4(v70, (uint64_t)v28);
        uint64_t v71 = v93;
        sub_10002B70C((uint64_t)v28, v93, &qword_100ACA8C8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v65 + 48))(v71, 1, v66) == 1)
        {
          sub_10002B770(v71, &qword_100ACA8C8);
        }
        else
        {
          unsigned int v72 = v92;
          (*(void (**)(char *, uint64_t, uint64_t))(v65 + 32))(v92, v71, v66);
          if (sub_10096B360())
          {
            id v73 = (id)fpfs_current_or_default_log();
            sub_10096B490();
            uint64_t v74 = v90;
            (*(void (**)(char *, char *, uint64_t))(v65 + 16))(v90, v72, v66);
            Swift::String v75 = sub_10096B470();
            os_log_type_t v76 = sub_10096C590();
            if (os_log_type_enabled(v75, v76))
            {
              uint64_t v77 = (uint8_t *)swift_slowAlloc();
              v107[0] = swift_slowAlloc();
              *(_DWORD *)uint64_t v77 = 136315138;
              uint64_t v94 = (char *)(v77 + 4);
              sub_10015A4A0((unint64_t *)&unk_100ACB978, (void (*)(uint64_t))&type metadata accessor for UTType);
              uint64_t v78 = sub_10096D220();
              uint64_t v106 = sub_100719D44(v78, v79, v107);
              sub_10096C8C0();
              swift_bridgeObjectRelease();
              unsigned int v80 = *(void (**)(char *, uint64_t))(v104 + 8);
              v80(v74, v103);
              _os_log_impl((void *)&_mh_execute_header, v75, v76, "Dynamic type %s was found for item - denying", v77, 0xCu);
              swift_arrayDestroy();
              uint64_t v66 = v103;
              swift_slowDealloc();
              swift_slowDealloc();

              (*(void (**)(char *, uint64_t))(v95 + 8))(v91, v96);
              v80(v92, v66);
              uint64_t v65 = v104;
            }
            else
            {

              uint64_t v81 = *(void (**)(char *, uint64_t))(v65 + 8);
              v81(v74, v66);
              (*(void (**)(char *, uint64_t))(v95 + 8))(v91, v96);
              v81(v72, v66);
            }
            sub_10002B770((uint64_t)v28, &qword_100ACA8C8);
            v67(v28, 1, 1, v66);
          }
          else
          {
            (*(void (**)(char *, uint64_t))(v65 + 8))(v72, v66);
          }
        }
      }
    }
    uint64_t v82 = v98;
    sub_10002B70C((uint64_t)v28, v98, &qword_100ACA8C8);
    uint64_t v83 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v65 + 48);
    if (v83(v82, 1, v66) == 1)
    {
      sub_10002B770(v82, &qword_100ACA8C8);
      sub_10096B2F0();
      uint64_t v84 = (uint64_t)v97;
      sub_10096B2B0();
      sub_10002B770((uint64_t)v28, &qword_100ACA8C8);
      sub_100157AB4(v84, (uint64_t)v28);
    }
    else
    {
      swift_bridgeObjectRelease();
      sub_10002B770(v82, &qword_100ACA8C8);
    }
    uint64_t v85 = v99;
    sub_10002B70C((uint64_t)v28, v99, &qword_100ACA8C8);
    if (v83(v85, 1, v66) == 1)
    {
      sub_10096B2F0();
      sub_10002B770((uint64_t)v28, &qword_100ACA8C8);
      return sub_10002B770(v85, &qword_100ACA8C8);
    }
    else
    {
      sub_10002B770((uint64_t)v28, &qword_100ACA8C8);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v104 + 32))(v105, v85, v66);
    }
  }
}

uint64_t ItemMetadata.init(kind:size:physicalSize:childItemCount:isReadable:isWriteable:isExecutable:isPackage:hasBundleBit:creationDate:contentModificationDate:isLocked:isHidden:isPathExtensionHidden:lastUsedDate:tags:favoriteRank:extendedAttributes:quarantineBlob:closestSyncRoot:evictionUrgency:isSyncRoot:isIgnoreRoot:isDetachedRoot:isPinned:isInPinnedFolder:isDataless:beforeBounceFilename:osType:linkCount:isResurrected:collaborationIdentifier:isSyncPaused:isSyncResumingWithDropLocalChanges:evictionReason:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, unint64_t a5@<X4>, char a6@<W5>, char a7@<W6>, char a8@<W7>, uint64_t a9@<X8>, unsigned __int8 a10, unsigned __int8 a11, uint64_t a12, uint64_t a13, unsigned __int8 a14, unsigned __int8 a15, unsigned __int8 a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,unint64_t a23,uint64_t a24,unsigned __int8 a25,unsigned __int8 a26,unsigned __int8 a27,unsigned __int8 a28,unsigned __int8 a29,unsigned __int8 a30,unsigned __int8 a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,unint64_t a36,uint64_t a37,uint64_t a38,unint64_t a39,unsigned __int8 a40,unsigned __int8 a41,unsigned __int8 a42)
{
  uint64_t v103 = a2;
  uint64_t v104 = a3;
  int v102 = a1;
  uint64_t v101 = a9;
  int v83 = a41;
  int v81 = a42;
  int v82 = a40;
  unint64_t v79 = a5;
  unint64_t v80 = a39;
  uint64_t v78 = a38;
  unint64_t v74 = a36;
  char v46 = a35;
  uint64_t v77 = a34;
  uint64_t v76 = a33;
  uint64_t v75 = a32;
  int v84 = a31;
  int v85 = a30;
  int v86 = a29;
  int v87 = a28;
  int v88 = a27;
  int v97 = a25;
  unint64_t v95 = a23;
  uint64_t v96 = a24;
  uint64_t v93 = a21;
  uint64_t v94 = a22;
  uint64_t v92 = a19;
  uint64_t v99 = a18;
  uint64_t v100 = a17;
  int v89 = a16;
  int v90 = a26;
  int v91 = a15;
  int v98 = a14;
  uint64_t v71 = a13;
  uint64_t v70 = a12;
  int v73 = a11;
  int v72 = a10;
  uint64_t v47 = sub_10002B7CC((uint64_t *)&unk_100ACB5E0);
  uint64_t v48 = __chkstk_darwin(v47 - 8);
  int v50 = &v68[-((v49 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v51 = __chkstk_darwin(v48);
  int v53 = &v68[-v52];
  __chkstk_darwin(v51);
  uint64_t v55 = &v68[-v54];
  if ((a6 & 1) == 0)
  {
    if ((a8 & 1) == 0)
    {
      unsigned int v61 = 0;
      if ((a7 & 1) == 0) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
    unint64_t v56 = v53;
    char v57 = a35;
    char v58 = a4;
    unsigned int v61 = 0;
    goto LABEL_6;
  }
  unint64_t v56 = v53;
  char v57 = a35;
  char v58 = a4;
  int v59 = sub_10096B550();
  int v60 = sub_10096B530() | v59;
  unsigned int v61 = v60 | sub_10096B540();
  if (a8)
  {
LABEL_6:
    int v62 = sub_10096B5B0();
    int v63 = sub_10096B590();
    v61 |= v62 | v63 | sub_10096B5A0();
  }
  a4 = v58;
  char v46 = v57;
  int v53 = v56;
  if (a7) {
LABEL_8:
  }
    v61 |= sub_10096B580();
LABEL_9:
  int v69 = a4 & 1;
  uint64_t v64 = v70;
  sub_10002B70C(v70, (uint64_t)v55, (uint64_t *)&unk_100ACB5E0);
  uint64_t v65 = v71;
  sub_10002B70C(v71, (uint64_t)v53, (uint64_t *)&unk_100ACB5E0);
  uint64_t v66 = v100;
  sub_10002B70C(v100, (uint64_t)v50, (uint64_t *)&unk_100ACB5E0);
  ItemMetadata.init(kind:size:physicalSize:childItemCount:posixPermissions:creationDate:contentModificationDate:isLocked:isHidden:isPathExtensionHidden:lastUsedDate:tags:favoriteRank:extendedAttributes:quarantineBlob:closestSyncRoot:evictionUrgency:isSyncRoot:isIgnoreRoot:isDetachedRoot:isPinned:isInPinnedFolder:isDataless:isPackage:hasBundleBit:beforeBounceFilename:osType:linkCount:isResurrected:collaborationIdentifier:isSyncPaused:isSyncResumingWithDropLocalChanges:evictionReason:)(v102, v103, v104, v69, v79 | ((HIDWORD(v79) & 1) << 32), v61, (uint64_t)v55, (uint64_t)v53, v101, v98 & 1, v91 & 1, v89 & 1, (uint64_t)v50, v99, v92, a20 & 1, v93, v94, v95,
    v96,
    v97,
    v90 & 1,
    v88 & 1,
    v87 & 1,
    v86 & 1,
    v85 & 1,
    v84 & 1,
    v72,
    v73,
    v75,
    v76,
    v77,
    v46 & 1,
    v74 | ((HIDWORD(v74) & 1) << 32),
    0,
    v78,
    v80,
    v82 & 1,
    v83 & 1,
    v81);
  sub_10002B770(v66, (uint64_t *)&unk_100ACB5E0);
  sub_10002B770(v65, (uint64_t *)&unk_100ACB5E0);
  return sub_10002B770(v64, (uint64_t *)&unk_100ACB5E0);
}

uint64_t sub_100151430@<X0>(unint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, unint64_t a15, unsigned __int8 a16, unsigned __int8 a17, unsigned __int8 a18, unsigned __int8 a19, unsigned __int8 a20,uint64_t a21,unint64_t a22,unsigned __int8 a23)
{
  uint64_t v38 = a8;
  int v49 = a7;
  int v50 = a6;
  int v51 = a5;
  unsigned int v52 = a2;
  uint64_t v48 = a9;
  int v46 = a17;
  int v47 = a16;
  int v43 = a19;
  int v44 = a18;
  int v39 = a23;
  uint64_t v40 = a21;
  uint64_t v36 = a4;
  unint64_t v37 = a15;
  uint64_t v45 = a11;
  int v41 = a20;
  int v42 = a12 & 1;
  uint64_t v25 = sub_10002B7CC((uint64_t *)&unk_100ACB5E0);
  uint64_t v26 = __chkstk_darwin(v25 - 8);
  uint64_t v28 = (char *)&v36 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = __chkstk_darwin(v26);
  uint64_t v31 = (char *)&v36 - v30;
  __chkstk_darwin(v29);
  uint64_t v33 = (char *)&v36 - v32;
  sub_10002B70C(a3, (uint64_t)&v36 - v32, (uint64_t *)&unk_100ACB5E0);
  sub_10002B70C(v36, (uint64_t)v31, (uint64_t *)&unk_100ACB5E0);
  sub_10002B70C(v38, (uint64_t)v28, (uint64_t *)&unk_100ACB5E0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v34 = v37;
  sub_10002D830(a14, v37);
  swift_bridgeObjectRetain();
  char v53 = 1;
  return ItemMetadata.init(kind:size:physicalSize:childItemCount:posixPermissions:creationDate:contentModificationDate:isLocked:isHidden:isPathExtensionHidden:lastUsedDate:tags:favoriteRank:extendedAttributes:quarantineBlob:closestSyncRoot:evictionUrgency:isSyncRoot:isIgnoreRoot:isDetachedRoot:isPinned:isInPinnedFolder:isDataless:isPackage:hasBundleBit:beforeBounceFilename:osType:linkCount:isResurrected:collaborationIdentifier:isSyncPaused:isSyncResumingWithDropLocalChanges:evictionReason:)(1, 0, 0, 1, a1 | ((HIDWORD(a1) & 1) << 32), v52, (uint64_t)v33, (uint64_t)v31, v48, v51, v50, v49, (uint64_t)v28, a10, v45, v42, a13, a14, v34,
           0,
           0,
           v47,
           v46,
           v44,
           v43,
           0,
           v41,
           0,
           2,
           0,
           0,
           0,
           1u,
           0x100000000uLL,
           0,
           v40,
           a22,
           0,
           0,
           v39);
}

uint64_t sub_10015169C@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  int v26 = a6;
  int v27 = a5;
  unsigned int v28 = a2;
  uint64_t v15 = sub_10002B7CC((uint64_t *)&unk_100ACB5E0);
  uint64_t v16 = __chkstk_darwin(v15 - 8);
  uint64_t v18 = &v25[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = &v25[-v20];
  __chkstk_darwin(v19);
  uint64_t v23 = &v25[-v22];
  sub_10002B70C(a3, (uint64_t)&v25[-v22], (uint64_t *)&unk_100ACB5E0);
  sub_10002B70C(a4, (uint64_t)v21, (uint64_t *)&unk_100ACB5E0);
  sub_10002B70C(a7, (uint64_t)v18, (uint64_t *)&unk_100ACB5E0);
  swift_bridgeObjectRetain();
  char v30 = 1;
  char v29 = 1;
  return ItemMetadata.init(kind:size:physicalSize:childItemCount:posixPermissions:creationDate:contentModificationDate:isLocked:isHidden:isPathExtensionHidden:lastUsedDate:tags:favoriteRank:extendedAttributes:quarantineBlob:closestSyncRoot:evictionUrgency:isSyncRoot:isIgnoreRoot:isDetachedRoot:isPinned:isInPinnedFolder:isDataless:isPackage:hasBundleBit:beforeBounceFilename:osType:linkCount:isResurrected:collaborationIdentifier:isSyncPaused:isSyncResumingWithDropLocalChanges:evictionReason:)(2, a1, 0, 1, 0x100000000, v28, (uint64_t)v23, (uint64_t)v21, a9, v27, v26, 0, (uint64_t)v18, 0, 0, 1u, a8, 0, 0xF000000000000000,
           0,
           0,
           0,
           0,
           0,
           0,
           0,
           0,
           2,
           2,
           0,
           0,
           0,
           1u,
           0x100000000uLL,
           0,
           0,
           0,
           0,
           0,
           0);
}

const char *ItemMetadata.aliasTypeAndCreator.unsafeMutableAddressor()
{
  return "silaSCAMlibfssync";
}

uint64_t static ItemMetadata.aliasTypeAndCreator.getter()
{
  return 0x4D414353616C6973;
}

uint64_t ItemMetadata.description.getter()
{
  uint64_t v1 = (uint64_t)v0;
  uint64_t v2 = sub_10002B7CC((uint64_t *)&unk_100ACB5E0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v62 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = sub_10096B0E0();
  uint64_t v5 = *(void *)(v63 - 8);
  __chkstk_darwin(v63);
  int v62 = (char *)&v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (int *)type metadata accessor for ItemMetadata();
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v62 - v11;
  int v13 = *v0;
  switch(*v0)
  {
    case 1u:
      uint64_t v14 = 7498084;
      goto LABEL_7;
    case 2u:
      uint64_t v14 = 7040620;
      goto LABEL_7;
    case 3u:
      uint64_t v67 = 0x7361696C61;
      unint64_t v15 = 0xE500000000000000;
      goto LABEL_9;
    default:
      uint64_t v14 = 6516580;
      if (v0[v7[27]]) {
        uint64_t v14 = 6777712;
      }
LABEL_7:
      uint64_t v67 = v14;
      unint64_t v15 = 0xE300000000000000;
LABEL_9:
      unint64_t v68 = v15;
      if (v0[v7[20]] == 1)
      {
        v69._countAndFlagsBits = 1936483360;
        v69._object = (void *)0xE400000000000000;
        sub_10096BDC0(v69);
        int v16 = v0[v7[22]];
        if (v0[v7[22]])
        {
          v66._countAndFlagsBits = 58;
          v66._object = (void *)0xE100000000000000;
          uint64_t v17 = (void *)0xE400000000000000;
          v18._countAndFlagsBits = 1919251317;
          switch(v16)
          {
            case 2:
              break;
            case 3:
              uint64_t v17 = (void *)0xEA00000000006E6FLL;
              v18._countAndFlagsBits = 0x697461646E756F66;
              break;
            case 4:
              uint64_t v17 = (void *)0xE200000000000000;
              v18._countAndFlagsBits = 28774;
              break;
            case 5:
              uint64_t v17 = (void *)0xEC00000065746164;
              v18._countAndFlagsBits = 0x705565746F6D6572;
              break;
            default:
              uint64_t v17 = (void *)0xEB00000000657465;
              v18._countAndFlagsBits = 0x6C65446568636163;
              break;
          }
          v18._object = v17;
          sub_10096BDC0(v18);
          swift_bridgeObjectRelease();
          sub_10096BDC0(v66);
          swift_bridgeObjectRelease();
        }
      }
      if (v13 != 1)
      {
        v66._countAndFlagsBits = 981103392;
        v66._object = (void *)0xE400000000000000;
        uint64_t v65 = *(void *)&v0[v7[25]];
        v70._countAndFlagsBits = sub_10096D220();
        sub_10096BDC0(v70);
        swift_bridgeObjectRelease();
        sub_10096BDC0(v66);
        swift_bridgeObjectRelease();
      }
      if ((v0[8] & 1) == 0)
      {
        int v19 = *((_DWORD *)v0 + 1);
        strcpy((char *)&v66, " child:");
        v66._object = (void *)0xE700000000000000;
        LODWORD(v65) = v19;
        v71._countAndFlagsBits = sub_10096D220();
        sub_10096BDC0(v71);
        swift_bridgeObjectRelease();
        sub_10096BDC0(v66);
        swift_bridgeObjectRelease();
      }
      uint64_t v64 = v10;
      uint64_t v20 = &v0[v7[36]];
      if ((v20[4] & 1) == 0)
      {
        unsigned int v21 = *(_DWORD *)v20;
        if (v21 >= 2)
        {
          strcpy((char *)&v66, " links:");
          v66._object = (void *)0xE700000000000000;
          LODWORD(v65) = v21;
          v72._countAndFlagsBits = sub_10096D220();
          sub_10096BDC0(v72);
          swift_bridgeObjectRelease();
          sub_10096BDC0(v66);
          swift_bridgeObjectRelease();
        }
      }
      v73._countAndFlagsBits = 3829024;
      v73._object = (void *)0xE300000000000000;
      sub_10096BDC0(v73);
      __int16 v22 = *((_WORD *)v0 + 5);
      if ((v22 & 0x100) != 0) {
        v23._countAndFlagsBits = 114;
      }
      else {
        v23._countAndFlagsBits = 45;
      }
      v23._object = (void *)0xE100000000000000;
      sub_10096BDC0(v23);
      if ((v22 & 0x80) != 0) {
        v24._countAndFlagsBits = 119;
      }
      else {
        v24._countAndFlagsBits = 45;
      }
      v24._object = (void *)0xE100000000000000;
      sub_10096BDC0(v24);
      if ((v22 & 0x40) != 0) {
        v25._countAndFlagsBits = 120;
      }
      else {
        v25._countAndFlagsBits = 45;
      }
      v25._object = (void *)0xE100000000000000;
      sub_10096BDC0(v25);
      if (v0[v7[10]] == 1)
      {
        v74._countAndFlagsBits = 104;
        v74._object = (void *)0xE100000000000000;
        sub_10096BDC0(v74);
      }
      if (v0[v7[13]] == 1)
      {
        v75._countAndFlagsBits = 101;
        v75._object = (void *)0xE100000000000000;
        sub_10096BDC0(v75);
      }
      if (v0[v7[9]] == 1)
      {
        v76._countAndFlagsBits = 108;
        v76._object = (void *)0xE100000000000000;
        sub_10096BDC0(v76);
      }
      if (v0[v7[28]] == 1)
      {
        v77._countAndFlagsBits = 66;
        v77._object = (void *)0xE100000000000000;
        sub_10096BDC0(v77);
      }
      if (v0[v7[15]] == 1)
      {
        v78._countAndFlagsBits = 83;
        v78._object = (void *)0xE100000000000000;
        sub_10096BDC0(v78);
      }
      if (v0[v7[18]] == 1)
      {
        v79._countAndFlagsBits = 68;
        v79._object = (void *)0xE100000000000000;
        sub_10096BDC0(v79);
      }
      uint64_t v26 = v7[21];
      int v27 = v0[v26];
      if (v0[v26])
      {
        v66._countAndFlagsBits = 15397;
        v66._object = (void *)0xE200000000000000;
        uint64_t v65 = *(void *)&v0[v7[19]];
        v80._countAndFlagsBits = sub_10096D220();
        sub_10096BDC0(v80);
        swift_bridgeObjectRelease();
        v81._countAndFlagsBits = 58;
        v81._object = (void *)0xE100000000000000;
        sub_10096BDC0(v81);
        unsigned int v28 = (void *)0xE300000000000000;
        v29._countAndFlagsBits = 7827308;
        switch(v27)
        {
          case 2:
            break;
          case 3:
            v29._countAndFlagsBits = 6579565;
            break;
          case 4:
            unsigned int v28 = (void *)0xE400000000000000;
            v29._countAndFlagsBits = 1751607656;
            break;
          case 5:
            unsigned int v28 = (void *)0xE200000000000000;
            v29._countAndFlagsBits = 21843;
            break;
          default:
            unsigned int v28 = (void *)0xE700000000000000;
            v29._countAndFlagsBits = 0x6E776F6E6B6E75;
            break;
        }
        v29._object = v28;
        sub_10096BDC0(v29);
        swift_bridgeObjectRelease();
        v82._countAndFlagsBits = 62;
        v82._object = (void *)0xE100000000000000;
        sub_10096BDC0(v82);
        sub_10096BDC0(v66);
        swift_bridgeObjectRelease();
      }
      uint64_t v30 = v7[11];
      int v31 = v0[v30];
      sub_10010DA98(v1, (uint64_t)v12);
      if (v31 == 1)
      {
        sub_10010DAFC((uint64_t)v12);
      }
      else
      {
        int v32 = v12[v7[12]];
        sub_10010DAFC((uint64_t)v12);
        if (v32 != 1) {
          goto LABEL_59;
        }
      }
      v83._countAndFlagsBits = 0x3A6E697020;
      v83._object = (void *)0xE500000000000000;
      sub_10096BDC0(v83);
      if (*(unsigned char *)(v1 + v30) == 1)
      {
        v33._countAndFlagsBits = 1718379891;
        v33._object = (void *)0xE400000000000000;
      }
      else
      {
        v33._countAndFlagsBits = 0x746E65726170;
        v33._object = (void *)0xE600000000000000;
      }
      sub_10096BDC0(v33);
LABEL_59:
      if (*(void *)(v1 + v7[14] + 8))
      {
        strcpy((char *)&v66, " orig-name:\"");
        BYTE5(v66._object) = 0;
        HIWORD(v66._object) = -5120;
        NSString v34 = sub_10096BC00();
        id v35 = objc_msgSend(v34, "fp_obfuscatedFilename");

        uint64_t v36 = _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
        uint64_t v38 = v37;

        v84._countAndFlagsBits = v36;
        v84._object = v38;
        sub_10096BDC0(v84);
        swift_bridgeObjectRelease();
        v85._countAndFlagsBits = 34;
        v85._object = (void *)0xE100000000000000;
        sub_10096BDC0(v85);
        sub_10096BDC0(v66);
        swift_bridgeObjectRelease();
      }
      uint64_t v39 = *(void *)(v1 + v7[30]);
      if (v39)
      {
        v66._countAndFlagsBits = 3830816;
        v66._object = (void *)0xE300000000000000;
        v86._countAndFlagsBits = Tags.description.getter(v39);
        sub_10096BDC0(v86);
        swift_bridgeObjectRelease();
        sub_10096BDC0(v66);
        swift_bridgeObjectRelease();
      }
      v66._countAndFlagsBits = 0;
      v66._object = (void *)0xE000000000000000;
      v87._countAndFlagsBits = 980706080;
      v87._object = (void *)0xE400000000000000;
      sub_10096BDC0(v87);
      sub_10096B080();
      sub_10096C2D0();
      sub_10096BDC0(v66);
      swift_bridgeObjectRelease();
      v66._countAndFlagsBits = 0;
      v66._object = (void *)0xE000000000000000;
      v88._countAndFlagsBits = 980708640;
      v88._object = (void *)0xE400000000000000;
      sub_10096BDC0(v88);
      sub_10096B080();
      sub_10096C2D0();
      sub_10096BDC0(v66);
      swift_bridgeObjectRelease();
      sub_10002B70C(v1 + v7[29], (uint64_t)v4, (uint64_t *)&unk_100ACB5E0);
      uint64_t v40 = v63;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v4, 1, v63) == 1)
      {
        sub_10002B770((uint64_t)v4, (uint64_t *)&unk_100ACB5E0);
      }
      else
      {
        int v41 = v62;
        (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v62, v4, v40);
        v66._countAndFlagsBits = 0;
        v66._object = (void *)0xE000000000000000;
        v89._countAndFlagsBits = 980773920;
        v89._object = (void *)0xE400000000000000;
        sub_10096BDC0(v89);
        sub_10096B080();
        sub_10096C2D0();
        sub_10096BDC0(v66);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v5 + 8))(v41, v40);
      }
      uint64_t v42 = (uint64_t)v64;
      uint64_t v43 = v1 + v7[31];
      if ((*(unsigned char *)(v43 + 8) & 1) == 0)
      {
        uint64_t v44 = *(void *)v43;
        v66._countAndFlagsBits = 980837920;
        v66._object = (void *)0xE400000000000000;
        uint64_t v65 = v44;
        v90._countAndFlagsBits = sub_10096D220();
        sub_10096BDC0(v90);
        swift_bridgeObjectRelease();
        sub_10096BDC0(v66);
        swift_bridgeObjectRelease();
      }
      uint64_t v45 = *(void *)(v1 + v7[32]);
      if (v45)
      {
        v91._countAndFlagsBits = 979466272;
        v91._object = (void *)0xE400000000000000;
        sub_10096BDC0(v91);
        v66._countAndFlagsBits = (uint64_t)sub_10014E6A0(v45);
        sub_10002B7CC((uint64_t *)&unk_100AD5CC0);
        sub_1000A6FD8();
        uint64_t v46 = sub_10096BB50();
        uint64_t v48 = v47;
        swift_bridgeObjectRelease();
        v92._countAndFlagsBits = v46;
        v92._object = v48;
        sub_10096BDC0(v92);
        swift_bridgeObjectRelease();
      }
      if (*(void *)(v1 + v7[33] + 8) >> 60 != 15)
      {
        v93._countAndFlagsBits = 1853124896;
        v93._object = (void *)0xE400000000000000;
        sub_10096BDC0(v93);
      }
      uint64_t v49 = v7[16];
      int v50 = *(unsigned __int8 *)(v1 + v49);
      sub_10010DA98(v1, v42);
      if (v50 == 1)
      {
        sub_10010DAFC(v42);
      }
      else
      {
        char v51 = *(unsigned char *)(v42 + v7[17]);
        sub_10010DAFC(v42);
        if ((v51 & 1) == 0) {
          goto LABEL_82;
        }
      }
      strcpy((char *)&v66, " ignore:");
      BYTE1(v66._object) = 0;
      WORD1(v66._object) = 0;
      HIDWORD(v66._object) = -402653184;
      if (*(unsigned char *)(v1 + v49)) {
        v52._countAndFlagsBits = 1953460082;
      }
      else {
        v52._countAndFlagsBits = 0x646C696863;
      }
      if (*(unsigned char *)(v1 + v49)) {
        char v53 = (void *)0xE400000000000000;
      }
      else {
        char v53 = (void *)0xE500000000000000;
      }
      v52._object = v53;
      sub_10096BDC0(v52);
      swift_bridgeObjectRelease();
      sub_10096BDC0(v66);
      swift_bridgeObjectRelease();
LABEL_82:
      uint64_t v54 = v1 + v7[34];
      if ((*(unsigned char *)(v54 + 8) & 1) == 0)
      {
        uint64_t v55 = *(void *)v54;
        v66._countAndFlagsBits = 0;
        v66._object = (void *)0xE000000000000000;
        v94._countAndFlagsBits = 0x3A65707974736F20;
        v94._object = (void *)0xE800000000000000;
        sub_10096BDC0(v94);
        uint64_t v65 = v55;
        type metadata accessor for NSFileProviderTypeAndCreator(0);
        sub_10096CDF0();
        sub_10096BDC0(v66);
        swift_bridgeObjectRelease();
      }
      if (*(void *)(v1 + v7[37] + 8))
      {
        strcpy((char *)&v66, " collabID:\"");
        HIDWORD(v66._object) = -352321536;
        NSString v56 = sub_10096BC00();
        id v57 = objc_msgSend(v56, "fp_obfuscatedFilename");

        uint64_t v58 = _sSo28NSFileProviderItemIdentifiera9libfssyncE15parseableStringSSvg_0();
        int v60 = v59;

        v95._countAndFlagsBits = v58;
        v95._object = v60;
        sub_10096BDC0(v95);
        swift_bridgeObjectRelease();
        v96._countAndFlagsBits = 34;
        v96._object = (void *)0xE100000000000000;
        sub_10096BDC0(v96);
        sub_10096BDC0(v66);
        swift_bridgeObjectRelease();
      }
      if (*(unsigned char *)(v1 + v7[23]) == 1)
      {
        v97._countAndFlagsBits = 2342314528;
        v97._object = (void *)0xA400000000000000;
        sub_10096BDC0(v97);
      }
      if (*(unsigned char *)(v1 + v7[24]) == 1)
      {
        v98._countAndFlagsBits = 0x83949FF020;
        v98._object = (void *)0xA500000000000000;
        sub_10096BDC0(v98);
      }
      return v67;
  }
}

int *sub_100152568(int *result, uint64_t a2)
{
  if (result)
  {
    unint64_t v4 = (unint64_t)result;
    for (char i = __clz(__rbit64((unint64_t)result)); ; char i = __clz(__rbit64(v4)))
    {
      uint64_t v6 = 1 << i;
      if ((v6 & v4) != 0) {
        uint64_t v7 = ~v6;
      }
      else {
        uint64_t v7 = -1;
      }
      if (v6 < 0x20000)
      {
        if (v6 <= 255)
        {
          switch(v6)
          {
            case 1:
              uint64_t v9 = *(int *)(type metadata accessor for ItemMetadata() + 56);
              goto LABEL_61;
            case 2:
              goto LABEL_87;
            case 3:
            case 5:
            case 6:
            case 7:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
            case 17:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
            case 27:
            case 28:
            case 29:
            case 30:
            case 31:
            case 33:
            case 34:
            case 35:
            case 36:
            case 37:
            case 38:
            case 39:
            case 40:
            case 41:
            case 42:
            case 43:
            case 44:
            case 45:
            case 46:
            case 47:
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 61:
            case 62:
            case 63:
              goto LABEL_94;
            case 4:
              __int16 v25 = *(_WORD *)(v2 + 10);
              if ((v25 & 0x38) != 0) {
                __int16 v26 = 504;
              }
              else {
                __int16 v26 = 448;
              }
              if ((v25 & 7) != 0) {
                __int16 v27 = v26 | 7;
              }
              else {
                __int16 v27 = v26;
              }
              *(_WORD *)(v2 + 10) = v27 & *(_WORD *)(a2 + 10);
              goto LABEL_87;
            case 8:
              uint64_t result = (int *)type metadata accessor for ItemMetadata();
              *(void *)(v2 + result[25]) = *(void *)(a2 + result[25]);
              *(void *)(v2 + result[26]) = *(void *)(a2 + result[26]);
              goto LABEL_54;
            case 16:
              uint64_t result = (int *)type metadata accessor for ItemMetadata();
              *(void *)(v2 + result[25]) = *(void *)(a2 + result[25]);
              *(void *)(v2 + result[26]) = *(void *)(a2 + result[26]);
              *(unsigned char *)(v2 + result[20]) = *(unsigned char *)(a2 + result[20]);
              *(unsigned char *)(v2 + result[27]) = *(unsigned char *)(a2 + result[27]);
              uint64_t v8 = result[21];
              goto LABEL_85;
            case 32:
              uint64_t v31 = type metadata accessor for ItemMetadata();
              uint64_t result = (int *)sub_10002D7C8(a2 + *(int *)(v31 + 116), v2 + *(int *)(v31 + 116));
              goto LABEL_87;
            case 64:
              uint64_t v10 = *(int *)(type metadata accessor for ItemMetadata() + 120);
              goto LABEL_91;
            default:
              if (v6 != 128) {
                goto LABEL_94;
              }
              uint64_t result = (int *)type metadata accessor for ItemMetadata();
              uint64_t v17 = result[31];
              break;
          }
LABEL_69:
          uint64_t v22 = *(void *)(a2 + v17);
          char v23 = *(unsigned char *)(a2 + v17 + 8);
          uint64_t v24 = v2 + v17;
          *(void *)uint64_t v24 = v22;
          *(unsigned char *)(v24 + 8) = v23;
          goto LABEL_87;
        }
        if (v6 <= 4095)
        {
          if (v6 > 1023)
          {
            if (v6 == 1024)
            {
              uint64_t v15 = *(int *)(type metadata accessor for ItemMetadata() + 28);
            }
            else
            {
              if (v6 != 2048) {
                goto LABEL_94;
              }
              uint64_t v15 = *(int *)(type metadata accessor for ItemMetadata() + 32);
            }
            uint64_t v28 = a2 + v15;
            uint64_t v29 = v2 + v15;
            uint64_t v30 = sub_10096B0E0();
            uint64_t result = (int *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 24))(v29, v28, v30);
          }
          else
          {
            if (v6 != 256)
            {
              if (v6 != 512) {
                goto LABEL_94;
              }
              uint64_t result = (int *)type metadata accessor for ItemMetadata();
              uint64_t v8 = result[9];
              goto LABEL_85;
            }
            uint64_t v10 = *(int *)(type metadata accessor for ItemMetadata() + 128);
LABEL_91:
            uint64_t v32 = *(void *)(a2 + v10);
            swift_bridgeObjectRetain();
            uint64_t result = (int *)swift_bridgeObjectRelease();
            *(void *)(v2 + v10) = v32;
          }
        }
        else
        {
          if (v6 < 0x4000)
          {
            if (v6 == 4096)
            {
              uint64_t result = (int *)type metadata accessor for ItemMetadata();
              uint64_t v8 = result[10];
            }
            else
            {
              if (v6 != 0x2000) {
                goto LABEL_94;
              }
              uint64_t result = (int *)type metadata accessor for ItemMetadata();
              uint64_t v8 = result[13];
            }
            goto LABEL_85;
          }
          if (v6 == 0x4000)
          {
            char v16 = *(unsigned char *)(a2 + 8);
            *(_DWORD *)(v2 + 4) = *(_DWORD *)(a2 + 4);
            *(unsigned char *)(v2 + 8) = v16;
            goto LABEL_87;
          }
          if (v6 == 0x8000)
          {
            uint64_t result = (int *)type metadata accessor for ItemMetadata();
            uint64_t v8 = result[35];
            goto LABEL_85;
          }
          if (v6 != 0x10000) {
            goto LABEL_94;
          }
          uint64_t result = (int *)type metadata accessor for ItemMetadata();
          uint64_t v8 = result[21];
          if (*(unsigned char *)(a2 + result[12]) == 1)
          {
            char v21 = 5;
LABEL_86:
            *(unsigned char *)(v2 + v8) = v21;
            goto LABEL_87;
          }
          *(unsigned char *)(v2 + v8) = *(unsigned char *)(a2 + v8);
          *(void *)(v2 + result[19]) = *(void *)(a2 + result[19]);
        }
      }
      else if (v6 > 0x1FFFFFFFFFFFLL)
      {
        if (v6 > 0x3FFFFFFFFFFFFLL)
        {
          if (v6 <= 0x1FFFFFFFFFFFFFLL)
          {
            if (v6 == 0x4000000000000) {
              goto LABEL_87;
            }
            if (v6 != 0x10000000000000) {
              goto LABEL_94;
            }
            uint64_t result = (int *)type metadata accessor for ItemMetadata();
            uint64_t v8 = result[18];
          }
          else
          {
            switch(v6)
            {
              case 0x20000000000000:
                uint64_t result = (int *)type metadata accessor for ItemMetadata();
                uint64_t v8 = result[23];
                break;
              case 0x40000000000000:
                uint64_t result = (int *)type metadata accessor for ItemMetadata();
                uint64_t v8 = result[24];
                break;
              case 0x100000000000000:
                uint64_t result = (int *)type metadata accessor for ItemMetadata();
                uint64_t v8 = result[22];
                break;
              default:
                goto LABEL_94;
            }
          }
          goto LABEL_85;
        }
        if (v6 <= 0x7FFFFFFFFFFFLL)
        {
          if (v6 != 0x200000000000)
          {
            if (v6 != 0x400000000000) {
              goto LABEL_94;
            }
            uint64_t result = (int *)type metadata accessor for ItemMetadata();
            uint64_t v17 = result[34];
            goto LABEL_69;
          }
          uint64_t result = (int *)type metadata accessor for ItemMetadata();
LABEL_54:
          uint64_t v8 = result[27];
          goto LABEL_85;
        }
        if (v6 == 0x800000000000)
        {
          uint64_t result = (int *)type metadata accessor for ItemMetadata();
          uint64_t v11 = result[36];
          int v12 = *(_DWORD *)(a2 + v11);
          char v13 = *(unsigned char *)(a2 + v11 + 4);
          uint64_t v14 = v2 + v11;
          *(_DWORD *)uint64_t v14 = v12;
          *(unsigned char *)(v14 + 4) = v13;
        }
        else
        {
          if (v6 != 0x1000000000000) {
            goto LABEL_94;
          }
          uint64_t v9 = *(int *)(type metadata accessor for ItemMetadata() + 148);
LABEL_61:
          uint64_t v19 = *(void *)(a2 + v9);
          uint64_t v18 = *(void *)(a2 + v9 + 8);
          uint64_t v20 = (void *)(v2 + v9);
          swift_bridgeObjectRetain();
          uint64_t result = (int *)swift_bridgeObjectRelease();
          *uint64_t v20 = v19;
          v20[1] = v18;
        }
      }
      else if (v6 <= 0x7FFFFFF)
      {
        if (v6 <= 0xFFFFFF)
        {
          if (v6 == 0x20000)
          {
            uint64_t result = (int *)type metadata accessor for ItemMetadata();
            uint64_t v8 = result[11];
          }
          else
          {
            if (v6 != 0x800000) {
              goto LABEL_94;
            }
            uint64_t result = (int *)type metadata accessor for ItemMetadata();
            uint64_t v8 = result[16];
          }
          goto LABEL_85;
        }
        if (v6 != 0x1000000 && v6 != 0x4000000)
        {
LABEL_94:
          sub_10096CE20();
          __break(1u);
          JUMPOUT(0x100152B24);
        }
      }
      else if (v6 <= 0x1FFFFFFFFFFLL)
      {
        if (v6 != 0x8000000)
        {
          if (v6 != 0x10000000000) {
            goto LABEL_94;
          }
          *(unsigned char *)uint64_t v2 = *(unsigned char *)a2;
        }
      }
      else if (v6 != 0x20000000000 && v6 != 0x80000000000)
      {
        if (v6 != 0x100000000000) {
          goto LABEL_94;
        }
        uint64_t result = (int *)type metadata accessor for ItemMetadata();
        uint64_t v8 = result[15];
LABEL_85:
        char v21 = *(unsigned char *)(a2 + v8);
        goto LABEL_86;
      }
LABEL_87:
      v4 &= v7;
      if (!v4) {
        return result;
      }
    }
  }
  return result;
}

uint64_t sub_100152C24(char *a1, unint64_t a2, char a3)
{
  unint64_t v4 = v3;
  uint64_t v173 = sub_10096D250();
  uint64_t v171 = *(void *)(v173 - 8);
  __chkstk_darwin(v173);
  unsigned int v169 = (char *)&v164 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v172 = sub_10096B0E0();
  uint64_t v170 = *(void *)(v172 - 8);
  uint64_t v9 = __chkstk_darwin(v172);
  unsigned int v168 = (char *)&v164 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  int v167 = (char *)&v164 - v11;
  int v12 = (int *)type metadata accessor for ItemMetadata();
  uint64_t v13 = __chkstk_darwin(v12);
  unsigned int v178 = (char *)&v164 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v13);
  unsigned int v177 = (char *)&v164 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v190 = (uint64_t)&v164 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  int v184 = (char *)&v164 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v183 = (char *)&v164 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  unsigned int v182 = (char *)&v164 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v180 = (uint64_t)&v164 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v181 = (uint64_t)&v164 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v165 = (uint64_t)&v164 - v30;
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v175 = (char *)&v164 - v32;
  uint64_t v33 = __chkstk_darwin(v31);
  uint64_t v189 = (uint64_t)&v164 - v34;
  uint64_t v35 = __chkstk_darwin(v33);
  uint64_t v188 = (uint64_t)&v164 - v36;
  uint64_t v37 = __chkstk_darwin(v35);
  uint64_t v187 = (uint64_t)&v164 - v38;
  uint64_t v39 = __chkstk_darwin(v37);
  uint64_t v186 = (uint64_t)&v164 - v40;
  uint64_t v41 = __chkstk_darwin(v39);
  uint64_t v43 = (char *)&v164 - v42;
  uint64_t v44 = __chkstk_darwin(v41);
  uint64_t v46 = (char *)&v164 - v45;
  uint64_t v47 = __chkstk_darwin(v44);
  uint64_t v49 = (char *)&v164 - v48;
  uint64_t v50 = __chkstk_darwin(v47);
  Swift::String v52 = (char *)&v164 - v51;
  uint64_t v53 = (a2 >> 11) & 1;
  if (a3) {
    LODWORD(v53) = 0;
  }
  int v179 = v53;
  BOOL v54 = (a3 & 1) == 0 && (a2 & 0x400) != 0;
  if ((v4[*(int *)(v50 + 36)] ^ a1[*(int *)(v50 + 36)])) {
    unint64_t v55 = ((unint64_t)(qword_10097AFD8[*v4] != qword_10097AFD8[*a1]) << 40) | 0x200;
  }
  else {
    unint64_t v55 = (unint64_t)(qword_10097AFD8[*v4] != qword_10097AFD8[*a1]) << 40;
  }
  int v56 = v4[*(int *)(v50 + 84)];
  sub_10010DA98((uint64_t)v4, (uint64_t)&v164 - v51);
  if (v56) {
    LOBYTE(v56) = v52[v12[12]] ^ 1;
  }
  sub_10010DAFC((uint64_t)v52);
  int v57 = a1[v12[21]];
  sub_10010DA98((uint64_t)a1, (uint64_t)v49);
  if (v57) {
    LOBYTE(v57) = v49[v12[12]] ^ 1;
  }
  sub_10010DAFC((uint64_t)v49);
  sub_10010DA98((uint64_t)v4, (uint64_t)v46);
  sub_10010DA98((uint64_t)a1, (uint64_t)v43);
  if ((v56 & 1) == (v57 & 1))
  {
    int v60 = v46[v12[21]];
    sub_10010DAFC((uint64_t)v46);
    int v61 = v43[v12[21]];
    sub_10010DAFC((uint64_t)v43);
    BOOL v62 = v60 == v61;
    uint64_t v58 = v186;
    uint64_t v59 = v187;
    if (v62) {
      goto LABEL_17;
    }
  }
  else
  {
    sub_10010DAFC((uint64_t)v43);
    sub_10010DAFC((uint64_t)v46);
    uint64_t v58 = v186;
    uint64_t v59 = v187;
  }
  v55 |= 0x10000uLL;
LABEL_17:
  if (((*((_WORD *)a1 + 5) ^ *((_WORD *)v4 + 5)) & 0x1C0) != 0) {
    uint64_t v63 = v55 | 4;
  }
  else {
    uint64_t v63 = v55;
  }
  if ((v4[v12[10]] ^ a1[v12[10]])) {
    v63 |= 0x1000uLL;
  }
  uint64_t v64 = (uint64_t)v4;
  if ((v4[v12[13]] ^ a1[v12[13]])) {
    uint64_t v65 = v63 | 0x2000;
  }
  else {
    uint64_t v65 = v63;
  }
  int v176 = (unsigned __int8 *)v64;
  sub_10010DA98(v64, v58);
  sub_10010DA98((uint64_t)a1, v59);
  unsigned int v185 = v12;
  if (v54)
  {
    uint64_t v174 = v65;
    sub_10010DAFC(v59);
    sub_10010DAFC(v58);
  }
  else
  {
    uint64_t v174 = v59 + v12[7];
    uint64_t v66 = enum case for FloatingPointRoundingRule.towardZero(_:);
    uint64_t v67 = v171;
    unint64_t v68 = *(void (**)(char *, uint64_t, uint64_t))(v171 + 104);
    uint64_t v166 = a1;
    uint64_t v69 = (uint64_t)v169;
    uint64_t v70 = v173;
    v68(v169, enum case for FloatingPointRoundingRule.towardZero(_:), v173);
    Swift::String v71 = v167;
    sub_1008AFED4(v69);
    Swift::String v72 = *(void (**)(uint64_t, uint64_t))(v67 + 8);
    v72(v69, v70);
    v68((char *)v69, v66, v70);
    Swift::String v73 = v168;
    sub_1008AFED4(v69);
    uint64_t v74 = v69;
    a1 = v166;
    v72(v74, v70);
    uint64_t v75 = sub_10096B0C0();
    Swift::String v76 = *(void (**)(char *, uint64_t))(v170 + 8);
    uint64_t v77 = v172;
    v76(v73, v172);
    v76(v71, v77);
    sub_10010DAFC(v187);
    sub_10010DAFC(v186);
    if (v75) {
      v65 |= 0x400uLL;
    }
    uint64_t v174 = v65;
  }
  uint64_t v78 = (uint64_t)v183;
  uint64_t v79 = (uint64_t)v184;
  uint64_t v81 = v181;
  uint64_t v80 = (uint64_t)v182;
  uint64_t v82 = v180;
  uint64_t v84 = v188;
  uint64_t v83 = v189;
  Swift::String v86 = (unsigned __int8 *)v175;
  Swift::String v85 = v176;
  sub_10010DA98((uint64_t)v176, v188);
  sub_10010DA98((uint64_t)a1, v83);
  if (v179)
  {
    sub_10010DAFC(v83);
    uint64_t v87 = v84;
LABEL_38:
    sub_10010DAFC(v87);
    uint64_t v95 = v174;
    goto LABEL_41;
  }
  int v88 = fpfs_supports_parent_mtime_iopolicy();
  sub_10010DA98(v84, (uint64_t)v86);
  if (v88)
  {
    sub_10010DAFC((uint64_t)v86);
    sub_10010DA98(v84, v81);
    sub_10010DA98(v189, v82);
    goto LABEL_39;
  }
  int v89 = *v86;
  uint64_t v90 = (uint64_t)v86;
  uint64_t v91 = v165;
  sub_10002C6EC(v90, v165);
  if (v89 == 1)
  {
    sub_10010DAFC(v91);
    uint64_t v92 = v188;
    sub_10010DA98(v188, v81);
    uint64_t v93 = v189;
    sub_10010DA98(v189, v82);
LABEL_37:
    sub_10010DAFC(v82);
    sub_10010DAFC(v81);
    sub_10010DAFC(v93);
    uint64_t v87 = v92;
    goto LABEL_38;
  }
  char v94 = *(unsigned char *)(v91 + v185[27]);
  sub_10010DAFC(v91);
  uint64_t v92 = v188;
  sub_10010DA98(v188, v81);
  uint64_t v93 = v189;
  sub_10010DA98(v189, v82);
  if (v94) {
    goto LABEL_37;
  }
LABEL_39:
  uint64_t v187 = v82 + v185[8];
  uint64_t v96 = enum case for FloatingPointRoundingRule.towardZero(_:);
  uint64_t v97 = v171;
  Swift::String v98 = *(void (**)(char *, uint64_t, uint64_t))(v171 + 104);
  uint64_t v166 = a1;
  uint64_t v99 = (uint64_t)v169;
  uint64_t v100 = v173;
  v98(v169, enum case for FloatingPointRoundingRule.towardZero(_:), v173);
  uint64_t v101 = v167;
  sub_1008AFED4(v99);
  int v102 = *(void (**)(uint64_t, uint64_t))(v97 + 8);
  v102(v99, v100);
  uint64_t v103 = v96;
  uint64_t v80 = (uint64_t)v182;
  v98((char *)v99, v103, v100);
  uint64_t v79 = (uint64_t)v184;
  uint64_t v104 = v168;
  sub_1008AFED4(v99);
  uint64_t v105 = v99;
  a1 = v166;
  v102(v105, v100);
  uint64_t v106 = sub_10096B0C0();
  uint64_t v107 = *(void (**)(char *, uint64_t))(v170 + 8);
  Swift::String v108 = v104;
  uint64_t v109 = v172;
  v107(v108, v172);
  v107(v101, v109);
  uint64_t v78 = (uint64_t)v183;
  sub_10010DAFC(v180);
  sub_10010DAFC(v181);
  sub_10010DAFC(v189);
  sub_10010DAFC(v188);
  uint64_t v95 = v174;
  if (v106) {
    uint64_t v95 = v174 | 0x800;
  }
LABEL_41:
  int v110 = *v85;
  sub_10010DA98((uint64_t)v85, v80);
  if (v110 == 1)
  {
    sub_10010DAFC(v80);
    sub_10010DA98((uint64_t)v85, v78);
    sub_10010DA98((uint64_t)a1, v79);
    uint64_t v111 = v185;
  }
  else
  {
    uint64_t v111 = v185;
    int v112 = *(unsigned __int8 *)(v80 + v185[27]);
    sub_10010DAFC(v80);
    sub_10010DA98((uint64_t)v85, v78);
    sub_10010DA98((uint64_t)a1, v79);
    if (v112 != 1)
    {
      sub_10010DAFC(v79);
      sub_10010DAFC(v78);
      goto LABEL_53;
    }
  }
  int v113 = *(_DWORD *)(v78 + 4);
  char v114 = *(unsigned char *)(v78 + 8);
  sub_10010DAFC(v78);
  int v115 = *(_DWORD *)(v79 + 4);
  char v116 = *(unsigned char *)(v79 + 8);
  sub_10010DAFC(v79);
  if (v114)
  {
    if (v116) {
      goto LABEL_53;
    }
LABEL_51:
    v95 |= 0x4000uLL;
    goto LABEL_53;
  }
  if (v113 == v115) {
    char v117 = v116;
  }
  else {
    char v117 = 1;
  }
  if (v117) {
    goto LABEL_51;
  }
LABEL_53:
  if (sub_1008AFAF8((uint64_t)&a1[v111[29]])) {
    uint64_t v118 = v95;
  }
  else {
    uint64_t v118 = v95 | 0x20;
  }
  uint64_t v119 = v111[30];
  uint64_t v120 = *(void *)&a1[v119];
  if (!*(void *)&v85[v119])
  {
    if (!v120) {
      goto LABEL_62;
    }
    goto LABEL_61;
  }
  if (!v120
    || (swift_bridgeObjectRetain(),
        uint64_t v121 = swift_bridgeObjectRetain(),
        char v122 = _s9libfssync4TagsV23__derived_struct_equalsySbAC_ACtFZ_0(v121, v120),
        swift_bridgeObjectRelease(),
        swift_bridgeObjectRelease(),
        (v122 & 1) == 0))
  {
LABEL_61:
    v118 |= 0x40uLL;
  }
LABEL_62:
  uint64_t v123 = v111[31];
  Swift::String v124 = &v85[v123];
  unsigned __int8 v125 = v85[v123 + 8];
  Swift::String v126 = &a1[v123];
  char v127 = a1[v123 + 8];
  if (v125)
  {
    if (v127) {
      goto LABEL_69;
    }
LABEL_68:
    v118 |= 0x80uLL;
    goto LABEL_69;
  }
  if (*(void *)v124 != *(void *)v126) {
    char v127 = 1;
  }
  if (v127) {
    goto LABEL_68;
  }
LABEL_69:
  if ((v85[v111[11]] ^ a1[v111[11]])) {
    uint64_t v128 = v118 | 0x20000;
  }
  else {
    uint64_t v128 = v118;
  }
  if ((v85[v111[20]] ^ a1[v111[20]])) {
    v128 |= 0x10uLL;
  }
  if ((v85[v111[27]] ^ a1[v111[27]])) {
    v128 |= 0x200000000000uLL;
  }
  if ((v85[v111[15]] ^ a1[v111[15]])) {
    v128 |= 0x100000000000uLL;
  }
  if ((v85[v111[16]] ^ a1[v111[16]])) {
    uint64_t v129 = v128 | 0x800000;
  }
  else {
    uint64_t v129 = v128;
  }
  uint64_t v130 = v111[32];
  unint64_t v193 = *(void *)&v85[v130];
  if (v193)
  {
    swift_bridgeObjectRetain();
    sub_1009163B4(0xD000000000000015, 0x8000000100996D80, &v192);
    sub_10001E9AC(v192, *((unint64_t *)&v192 + 1));
    uint64_t v130 = v111[32];
  }
  unint64_t v191 = *(void *)&a1[v130];
  if (v191)
  {
    swift_bridgeObjectRetain();
    sub_1009163B4(0xD000000000000015, 0x8000000100996D80, &v192);
    sub_10001E9AC(v192, *((unint64_t *)&v192 + 1));
  }
  if (v193)
  {
    unint64_t v131 = v193;
    unint64_t v132 = v191;
    if (v191)
    {
LABEL_87:
      swift_bridgeObjectRetain();
      unint64_t v133 = v132;
      goto LABEL_90;
    }
  }
  else
  {
    unint64_t v131 = sub_10002C41C((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v132 = v191;
    if (v191) {
      goto LABEL_87;
    }
  }
  swift_bridgeObjectRetain();
  unint64_t v133 = sub_10002C41C((uint64_t)_swiftEmptyArrayStorage);
LABEL_90:
  swift_bridgeObjectRetain();
  char v134 = sub_10015611C(v131, v133);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v134) {
    uint64_t v135 = v129;
  }
  else {
    uint64_t v135 = v129 | 0x100;
  }
  uint64_t v136 = v111[34];
  Swift::String v137 = &v85[v136];
  unsigned __int8 v138 = v85[v136 + 8];
  Swift::String v139 = &a1[v136];
  char v140 = a1[v136 + 8];
  if (v138)
  {
    uint64_t v142 = (uint64_t)v177;
    uint64_t v141 = (uint64_t)v178;
    if (v140) {
      goto LABEL_100;
    }
LABEL_99:
    v135 |= 0x400000000000uLL;
    goto LABEL_100;
  }
  if (*(void *)v137 != *(void *)v139) {
    char v140 = 1;
  }
  uint64_t v142 = (uint64_t)v177;
  uint64_t v141 = (uint64_t)v178;
  if (v140) {
    goto LABEL_99;
  }
LABEL_100:
  unsigned __int8 v143 = v85[v111[36] + 4];
  sub_10010DA98((uint64_t)a1, v190);
  if (v143)
  {
    sub_10010DAFC(v190);
    sub_10010DA98((uint64_t)v85, v142);
    sub_10010DA98((uint64_t)a1, v141);
LABEL_103:
    sub_10010DAFC(v141);
    sub_10010DAFC(v142);
    goto LABEL_108;
  }
  char v144 = *(unsigned char *)(v190 + v111[36] + 4);
  sub_10010DAFC(v190);
  sub_10010DA98((uint64_t)v85, v142);
  sub_10010DA98((uint64_t)a1, v141);
  if (v144) {
    goto LABEL_103;
  }
  uint64_t v145 = v142 + v111[36];
  int v146 = *(_DWORD *)v145;
  char v147 = *(unsigned char *)(v145 + 4);
  sub_10010DAFC(v142);
  uint64_t v148 = v141 + v111[36];
  uint64_t v149 = v141;
  int v150 = *(_DWORD *)v148;
  int v151 = *(unsigned __int8 *)(v148 + 4);
  sub_10010DAFC(v149);
  if ((v147 & 1) == 0) {
    int v151 = (v146 == v150) & ~v151;
  }
  if (!v151) {
    v135 |= 0x800000000000uLL;
  }
LABEL_108:
  uint64_t v152 = v111[37];
  unsigned int v153 = &v85[v152];
  uint64_t v154 = *(void *)&v85[v152 + 8];
  int v155 = &a1[v152];
  uint64_t v156 = *((void *)v155 + 1);
  if (!v154)
  {
    if (!v156) {
      goto LABEL_116;
    }
    goto LABEL_115;
  }
  if (!v156 || (*(void *)v153 != *(void *)v155 || v154 != v156) && (sub_10096D2D0() & 1) == 0) {
LABEL_115:
  }
    v135 |= 0x1000000000000uLL;
LABEL_116:
  if ((v85[v111[18]] ^ a1[v111[18]])) {
    uint64_t v157 = v135 | 0x10000000000000;
  }
  else {
    uint64_t v157 = v135;
  }
  uint64_t v158 = v111[22];
  if ((v85[v111[23]] ^ a1[v111[23]])) {
    v157 |= 0x20000000000000uLL;
  }
  if ((v85[v111[24]] ^ a1[v111[24]])) {
    uint64_t v159 = v157 | 0x40000000000000;
  }
  else {
    uint64_t v159 = v157;
  }
  int v160 = v85[v158];
  int v161 = a1[v158];
  swift_bridgeObjectRelease();
  if (v160 == v161) {
    uint64_t v162 = v159;
  }
  else {
    uint64_t v162 = v159 | 0x100000000000000;
  }
  swift_bridgeObjectRelease();
  return v162;
}

int *ItemMetadata.applyingDiff(_:from:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_10010DA98(v3, a3);
  return sub_100152568(a1, a2);
}

BOOL sub_100153B4C(char *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10096D250();
  uint64_t v48 = *(void *)(v4 - 8);
  uint64_t v49 = v4;
  __chkstk_darwin(v4);
  uint64_t v45 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10096B0E0();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v46 = v6;
  uint64_t v47 = v7;
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  int v12 = (char *)&v42 - v11;
  uint64_t v13 = (int *)type metadata accessor for ItemMetadata();
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v19 = (char *)&v42 - v18;
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v42 - v20;
  uint64_t v22 = qword_10097AFD8[*v1];
  uint64_t v23 = qword_10097AFD8[*a1];
  sub_10010DA98((uint64_t)v2, (uint64_t)&v42 - v20);
  sub_10010DA98((uint64_t)a1, (uint64_t)v19);
  if (v22 != v23)
  {
    sub_10010DAFC((uint64_t)v19);
    sub_10010DAFC((uint64_t)v21);
    return 0;
  }
  uint64_t v24 = (unsigned __int8 *)v16;
  uint64_t v43 = v12;
  uint64_t v44 = v10;
  uint64_t v26 = v48;
  uint64_t v25 = v49;
  int v27 = v21[v13[27]];
  sub_10010DAFC((uint64_t)v21);
  int v28 = v19[v13[27]];
  sub_10010DAFC((uint64_t)v19);
  if (v27 != v28 || *v2 != 1 && (v2[v13[27]] & 1) == 0 && *(void *)&v2[v13[25]] != *(void *)&a1[v13[25]]) {
    return 0;
  }
  int v30 = fpfs_supports_parent_mtime_iopolicy();
  sub_10010DA98((uint64_t)v2, (uint64_t)v24);
  if (v30)
  {
    sub_10010DAFC((uint64_t)v24);
  }
  else
  {
    int v31 = *v24;
    sub_10010DAFC((uint64_t)v24);
    if (v31 == 1) {
      return 1;
    }
  }
  uint64_t v42 = &a1[v13[8]];
  uint64_t v32 = enum case for FloatingPointRoundingRule.towardZero(_:);
  uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t))(v26 + 104);
  uint64_t v34 = (uint64_t)v45;
  v33(v45, enum case for FloatingPointRoundingRule.towardZero(_:), v25);
  uint64_t v35 = v43;
  sub_1008AFED4(v34);
  uint64_t v36 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
  v36(v34, v25);
  v33((char *)v34, v32, v25);
  uint64_t v37 = v44;
  sub_1008AFED4(v34);
  v36(v34, v25);
  uint64_t v38 = sub_10096B0C0();
  uint64_t v39 = *(void (**)(char *, uint64_t))(v47 + 8);
  uint64_t v40 = v37;
  uint64_t v41 = v46;
  v39(v40, v46);
  v39(v35, v41);
  return v38 == 0;
}

uint64_t sub_100153F20()
{
  uint64_t v1 = type metadata accessor for ItemMetadata();
  uint64_t v2 = __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v12 - v5;
  int v7 = *v0;
  uint64_t v8 = (char *)&v12 - v5;
  if (v7 == 2)
  {
    sub_10010DA98((uint64_t)v0, (uint64_t)v8);
LABEL_4:
    sub_10010DAFC((uint64_t)v6);
    sub_10010DA98((uint64_t)v0, (uint64_t)v4);
    goto LABEL_5;
  }
  sub_10010DA98((uint64_t)v0, (uint64_t)v8);
  if (v7 == 1) {
    goto LABEL_4;
  }
  char v11 = v6[*(int *)(v1 + 48)];
  sub_10010DAFC((uint64_t)v6);
  sub_10010DA98((uint64_t)v0, (uint64_t)v4);
  if ((v11 & 1) == 0)
  {
    char v9 = v4[*(int *)(v1 + 44)] ^ 1;
    goto LABEL_6;
  }
LABEL_5:
  char v9 = 0;
LABEL_6:
  sub_10010DAFC((uint64_t)v4);
  return v9 & 1;
}

unint64_t sub_100154040(char a1)
{
  unint64_t result = 1684957547;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x657449646C696863;
      break;
    case 2:
    case 8:
      unint64_t result = 0xD000000000000010;
      break;
    case 3:
      unint64_t result = 0x6E6F697461657263;
      break;
    case 4:
      unint64_t result = 0xD000000000000017;
      break;
    case 5:
      unint64_t result = 0x64656B636F4C7369;
      break;
    case 6:
      unint64_t result = 0x6E65646469487369;
      break;
    case 7:
      unint64_t result = 0x64656E6E69507369;
      break;
    case 9:
      unint64_t result = 0xD000000000000015;
      break;
    case 10:
      unint64_t result = 0xD000000000000014;
      break;
    case 11:
      unint64_t result = 0x6F52636E79537369;
      break;
    case 12:
      unint64_t result = 0x65726F6E67497369;
      break;
    case 13:
      unint64_t result = 0x6F6E67496E497369;
      break;
    case 14:
      unint64_t result = 0x6863617465447369;
      break;
    case 15:
      unint64_t result = 0x53747365736F6C63;
      break;
    case 16:
      unint64_t result = 0x656C617461447369;
      break;
    case 17:
    case 18:
      unint64_t result = 0x6E6F697463697665;
      break;
    case 19:
      unint64_t result = 0x6150636E79537369;
      break;
    case 20:
      unint64_t result = 0xD000000000000022;
      break;
    case 21:
      unint64_t result = 1702521203;
      break;
    case 22:
      unint64_t result = 0x6C61636973796870;
      break;
    case 23:
      unint64_t result = 0x67616B6361507369;
      break;
    case 24:
      unint64_t result = 0x6C646E7542736168;
      break;
    case 25:
      unint64_t result = 0x646573557473616CLL;
      break;
    case 26:
      unint64_t result = 1936154996;
      break;
    case 27:
      unint64_t result = 0x657469726F766166;
      break;
    case 28:
      unint64_t result = 0xD000000000000012;
      break;
    case 29:
      unint64_t result = 0x69746E6172617571;
      break;
    case 30:
      unint64_t result = 0x65707954736FLL;
      break;
    case 31:
      unint64_t result = 0x7272757365527369;
      break;
    case 32:
      unint64_t result = 0x6E756F436B6E696CLL;
      break;
    case 33:
      unint64_t result = 0xD000000000000017;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_100154494()
{
  return sub_100154040(*v0);
}

uint64_t sub_10015449C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1001594D0(a1, a2);
  *a3 = result;
  return result;
}

void sub_1001544C4(unsigned char *a1@<X8>)
{
  *a1 = 34;
}

uint64_t sub_1001544D0(uint64_t a1)
{
  unint64_t v2 = sub_100157B1C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10015450C(uint64_t a1)
{
  unint64_t v2 = sub_100157B1C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ItemMetadata.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10002B7CC(&qword_100ACDBD8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002689C(a1, a1[3]);
  sub_100157B1C();
  sub_10096D590();
  LOBYTE(v15) = *v3;
  char v16 = 0;
  sub_100157B70();
  sub_10096D1A0();
  if (!v2)
  {
    char v9 = v3[8];
    LOBYTE(v15) = 1;
    char v16 = v9;
    sub_10096D130();
    LOBYTE(v15) = 2;
    sub_10096D1D0();
    uint64_t v10 = (int *)type metadata accessor for ItemMetadata();
    LOBYTE(v15) = 3;
    sub_10096B0E0();
    sub_10015A4A0(&qword_100ACB9B8, (void (*)(uint64_t))&type metadata accessor for Date);
    sub_10096D1A0();
    LOBYTE(v15) = 4;
    sub_10096D1A0();
    LOBYTE(v15) = 5;
    sub_10096D160();
    LOBYTE(v15) = 6;
    sub_10096D160();
    LOBYTE(v15) = 7;
    sub_10096D160();
    LOBYTE(v15) = 8;
    sub_10096D160();
    LOBYTE(v15) = 9;
    sub_10096D160();
    long long v15 = *(_OWORD *)&v3[v10[14]];
    char v16 = 10;
    sub_100157BC4();
    sub_10096D100();
    LOBYTE(v15) = 11;
    sub_10096D160();
    LOBYTE(v15) = 12;
    sub_10096D160();
    LOBYTE(v15) = 13;
    sub_10096D0F0();
    LOBYTE(v15) = 14;
    sub_10096D160();
    LOBYTE(v15) = 15;
    sub_10096D1F0();
    LOBYTE(v15) = 16;
    sub_10096D160();
    LOBYTE(v15) = v3[v10[21]];
    char v16 = 17;
    sub_100157C18();
    sub_10096D1A0();
    LOBYTE(v15) = v3[v10[22]];
    char v16 = 18;
    sub_100157C6C();
    sub_10096D1A0();
    LOBYTE(v15) = 19;
    sub_10096D160();
    LOBYTE(v15) = 20;
    sub_10096D160();
    LOBYTE(v15) = 21;
    sub_10096D1C0();
    LOBYTE(v15) = 22;
    sub_10096D1C0();
    LOBYTE(v15) = 23;
    sub_10096D160();
    LOBYTE(v15) = 24;
    sub_10096D160();
    LOBYTE(v15) = 25;
    sub_10096D100();
    *(void *)&long long v15 = *(void *)&v3[v10[30]];
    char v16 = 26;
    sub_100157CC0();
    sub_10096D100();
    LOBYTE(v15) = 27;
    sub_10096D140();
    *(void *)&long long v15 = *(void *)&v3[v10[32]];
    char v16 = 28;
    sub_10002B7CC(&qword_100ACDC10);
    sub_100157EB8(&qword_100ACDC18, (void (*)(void))sub_100078E40);
    sub_10096D100();
    long long v15 = *(_OWORD *)&v3[v10[33]];
    char v16 = 29;
    sub_100078E40();
    sub_10096D100();
    char v11 = &v3[v10[34]];
    uint64_t v12 = *(void *)v11;
    LOBYTE(v11) = v11[8];
    *(void *)&long long v15 = v12;
    BYTE8(v15) = (_BYTE)v11;
    char v16 = 30;
    type metadata accessor for NSFileProviderTypeAndCreator(0);
    sub_10015A4A0(&qword_100ACDC20, type metadata accessor for NSFileProviderTypeAndCreator);
    sub_10096D100();
    LOBYTE(v15) = 31;
    sub_10096D160();
    char v13 = v3[v10[36] + 4];
    LOBYTE(v15) = 32;
    char v16 = v13;
    sub_10096D130();
    LOBYTE(v15) = 33;
    sub_10096D0E0();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t ItemMetadata.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v78 = a1;
  uint64_t v60 = a2;
  uint64_t v2 = sub_10002B7CC((uint64_t *)&unk_100ACB5E0);
  __chkstk_darwin(v2 - 8);
  uint64_t v59 = (uint64_t)v56 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10096B0E0();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  BOOL v62 = (char *)v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v64 = (char *)v56 - v8;
  uint64_t v65 = sub_10002B7CC(&qword_100ACDC28);
  uint64_t v63 = *(void *)(v65 - 8);
  __chkstk_darwin(v65);
  uint64_t v10 = (char *)v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v11 = (int *)type metadata accessor for ItemMetadata();
  uint64_t v12 = (int *)__chkstk_darwin(v11);
  uint64_t v14 = (char *)v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((_DWORD *)v14 + 1) = 0;
  v14[8] = 1;
  long long v15 = &v14[v12[14]];
  *(void *)long long v15 = 0;
  *((void *)v15 + 1) = 0;
  Swift::String v73 = v15;
  uint64_t v61 = v12[17];
  v14[v61] = 2;
  uint64_t v16 = (uint64_t)&v14[v12[29]];
  uint64_t v75 = v4;
  uint64_t v76 = v5;
  uint64_t v17 = *(void (**)(void))(v5 + 56);
  uint64_t v71 = v16;
  v17();
  uint64_t v70 = v11[30];
  *(void *)&v14[v70] = 0;
  uint64_t v18 = &v14[v11[31]];
  *(void *)uint64_t v18 = 0;
  v18[8] = 1;
  uint64_t v68 = v11[32];
  *(void *)&v14[v68] = 0;
  uint64_t v69 = &v14[v11[33]];
  *(_OWORD *)uint64_t v69 = xmmword_100973BC0;
  uint64_t v19 = &v14[v11[34]];
  *(void *)uint64_t v19 = 0;
  v19[8] = 1;
  uint64_t v20 = &v14[v11[36]];
  *(_DWORD *)uint64_t v20 = 0;
  void v20[4] = 1;
  uint64_t v74 = v11;
  uint64_t v21 = v11[37];
  uint64_t v77 = v14;
  uint64_t v22 = &v14[v21];
  *(void *)uint64_t v22 = 0;
  *((void *)v22 + 1) = 0;
  Swift::String v72 = v22;
  sub_10002689C(v78, v78[3]);
  sub_100157B1C();
  uint64_t v66 = v10;
  uint64_t v23 = v67;
  sub_10096D570();
  if (v23)
  {
    sub_1000268E0((uint64_t)v78);
    swift_bridgeObjectRelease();
    sub_10002B770(v71, (uint64_t *)&unk_100ACB5E0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001E9AC(*(void *)v69, *((void *)v69 + 1));
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v24 = v64;
    uint64_t v58 = (uint64_t *)v18;
    uint64_t v67 = v19;
    int v57 = v20;
    uint64_t v25 = v63;
    char v80 = 0;
    sub_100157D14();
    sub_10096D040();
    uint64_t v26 = v74;
    int v27 = v77;
    *uint64_t v77 = v79;
    LOBYTE(v79) = 1;
    uint64_t v28 = sub_10096CFE0();
    uint64_t v29 = v75;
    *((_DWORD *)v27 + 1) = v28;
    v27[8] = BYTE4(v28) & 1;
    LOBYTE(v79) = 2;
    *((_WORD *)v27 + 5) = sub_10096D070();
    LOBYTE(v79) = 3;
    int v30 = v24;
    uint64_t v31 = sub_10015A4A0(&qword_100ACB9F0, (void (*)(uint64_t))&type metadata accessor for Date);
    sub_10096D040();
    uint64_t v33 = &v27[v26[7]];
    uint64_t v64 = *(char **)(v76 + 32);
    ((void (*)(unsigned char *, char *, uint64_t))v64)(v33, v30, v29);
    LOBYTE(v79) = 4;
    sub_10096D040();
    v56[1] = v31;
    ((void (*)(unsigned char *, char *, uint64_t))v64)(&v77[v26[8]], v62, v29);
    LOBYTE(v79) = 5;
    char v34 = sub_10096D010();
    uint64_t v35 = v77;
    v77[v26[9]] = v34 & 1;
    LOBYTE(v79) = 6;
    v35[v26[10]] = sub_10096D010() & 1;
    LOBYTE(v79) = 7;
    v35[v26[11]] = sub_10096D010() & 1;
    LOBYTE(v79) = 8;
    v35[v26[12]] = sub_10096D010() & 1;
    LOBYTE(v79) = 9;
    v77[v74[13]] = sub_10096D010() & 1;
    char v80 = 10;
    sub_100157D68();
    sub_10096CFB0();
    *(_OWORD *)Swift::String v73 = v79;
    LOBYTE(v79) = 11;
    v77[v74[15]] = sub_10096D010() & 1;
    LOBYTE(v79) = 12;
    v77[v74[16]] = sub_10096D010() & 1;
    LOBYTE(v79) = 13;
    v77[v61] = sub_10096CF80();
    LOBYTE(v79) = 14;
    v77[v74[18]] = sub_10096D010() & 1;
    LOBYTE(v79) = 15;
    *(void *)&v77[v74[19]] = sub_10096D090();
    LOBYTE(v79) = 16;
    v77[v74[20]] = sub_10096D010() & 1;
    char v80 = 17;
    sub_100157DBC();
    sub_10096D040();
    v77[v74[21]] = v79;
    char v80 = 18;
    sub_100157E10();
    sub_10096D040();
    v77[v74[22]] = v79;
    LOBYTE(v79) = 19;
    v77[v74[23]] = sub_10096D010() & 1;
    LOBYTE(v79) = 20;
    v77[v74[24]] = sub_10096D010() & 1;
    LOBYTE(v79) = 21;
    *(void *)&v77[v74[25]] = sub_10096D060();
    LOBYTE(v79) = 22;
    *(void *)&v77[v74[26]] = sub_10096D060();
    LOBYTE(v79) = 23;
    v77[v74[27]] = sub_10096D010() & 1;
    LOBYTE(v79) = 24;
    v77[v74[28]] = sub_10096D010() & 1;
    LOBYTE(v79) = 25;
    sub_10096CFB0();
    sub_100157A4C(v59, v71);
    char v80 = 26;
    sub_100157E64();
    sub_10096CFB0();
    uint64_t v36 = v79;
    uint64_t v37 = v70;
    uint64_t v38 = v77;
    swift_bridgeObjectRelease();
    *(void *)&v38[v37] = v36;
    LOBYTE(v79) = 27;
    uint64_t v39 = sub_10096CFF0();
    uint64_t v40 = v58;
    uint64_t *v58 = v39;
    *((unsigned char *)v40 + 8) = v41 & 1;
    sub_10002B7CC(&qword_100ACDC10);
    char v80 = 28;
    sub_100157EB8(&qword_100ACDC58, (void (*)(void))sub_100157F34);
    sub_10096CFB0();
    uint64_t v42 = v79;
    uint64_t v43 = v68;
    uint64_t v44 = v77;
    swift_bridgeObjectRelease();
    *(void *)&v44[v43] = v42;
    char v80 = 29;
    sub_100157F34();
    sub_10096CFB0();
    long long v45 = v79;
    uint64_t v46 = v69;
    sub_10001E9AC(*(void *)v69, *((void *)v69 + 1));
    *(_OWORD *)uint64_t v46 = v45;
    type metadata accessor for NSFileProviderTypeAndCreator(0);
    char v80 = 30;
    sub_10015A4A0(&qword_100ACDC68, type metadata accessor for NSFileProviderTypeAndCreator);
    sub_10096CFB0();
    char v47 = BYTE8(v79);
    uint64_t v48 = v67;
    *(void *)uint64_t v67 = v79;
    v48[8] = v47;
    LOBYTE(v79) = 31;
    v77[v74[35]] = sub_10096D010() & 1;
    LOBYTE(v79) = 32;
    uint64_t v49 = sub_10096CFE0();
    uint64_t v50 = v57;
    *(_DWORD *)int v57 = v49;
    v50[4] = BYTE4(v49) & 1;
    LOBYTE(v79) = 33;
    uint64_t v51 = sub_10096CF70();
    uint64_t v53 = v52;
    (*(void (**)(char *, uint64_t))(v25 + 8))(v66, v65);
    BOOL v54 = (uint64_t *)v72;
    swift_bridgeObjectRelease();
    uint64_t *v54 = v51;
    v54[1] = v53;
    unint64_t v55 = v77;
    sub_10010DA98((uint64_t)v77, v60);
    sub_1000268E0((uint64_t)v78);
    return sub_10010DAFC((uint64_t)v55);
  }
}

uint64_t sub_100155C44@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ItemMetadata.init(from:)(a1, a2);
}

uint64_t sub_100155C5C(void *a1)
{
  return ItemMetadata.encode(to:)(a1);
}

uint64_t sub_100155C74(void (*a1)(uint64_t *__return_ptr))
{
  a1(&v2);
  uint64_t result = 6516580;
  switch((char)v2)
  {
    case 1:
      uint64_t result = 7498084;
      break;
    case 2:
      uint64_t result = 0x6B6E696C6D7973;
      break;
    case 3:
      uint64_t result = 0x7361696C61;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100155D1C(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  return sub_100155EB4(a1, a2, &qword_100ACCB10, (uint64_t (*)(uint64_t))sub_1004AD7A8);
}

uint64_t sub_100155D3C(void (*a1)(uint64_t *__return_ptr))
{
  a1(&v3);
  if (!v4)
  {
    uint64_t v2 = 0x284449636F64;
    goto LABEL_5;
  }
  if (v4 == 1)
  {
    uint64_t v2 = 0x284449656C6966;
LABEL_5:
    v5._countAndFlagsBits = sub_10096D220();
    sub_10096BDC0(v5);
    swift_bridgeObjectRelease();
    v6._countAndFlagsBits = 41;
    v6._object = (void *)0xE100000000000000;
    sub_10096BDC0(v6);
    return v2;
  }
  if (v3) {
    return 0x6873617274;
  }
  else {
    return 1953460082;
  }
}

uint64_t sub_100155E38(void (*a1)(void **__return_ptr))
{
  a1(&v4);
  uint64_t v1 = v4;
  uint64_t v2 = NSFileProviderItemIdentifier.description.getter();

  return v2;
}

uint64_t sub_100155E94(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  return sub_100155EB4(a1, a2, (uint64_t *)&unk_100AD0CC0, (uint64_t (*)(uint64_t))sub_1004ADCE0);
}

uint64_t sub_100155EB4(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v7 = sub_10002B7CC(a3);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = a1(v8);
  uint64_t v12 = a4(v11);
  sub_10002B770((uint64_t)v10, a3);
  return v12;
}

uint64_t sub_100155F6C(void (*a1)(uint64_t *__return_ptr))
{
  a1(&v3);
  type metadata accessor for BrokenInvariants(0);
  sub_10015A4A0(&qword_100ACDDC0, type metadata accessor for BrokenInvariants);
  uint64_t v1 = sub_10096B9D0();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_10015601C(void *(*a1)(uint64_t *__return_ptr), uint64_t a2)
{
  return sub_10015609C(a1, a2, (void (*)(void *))sub_10015A44C);
}

uint64_t sub_10015603C(void *(*a1)(uint64_t *__return_ptr), uint64_t a2)
{
  return sub_10015609C(a1, a2, (void (*)(void *))sub_10015A3F8);
}

uint64_t sub_10015605C(void *(*a1)(uint64_t *__return_ptr), uint64_t a2)
{
  return sub_10015609C(a1, a2, (void (*)(void *))sub_10015A3A4);
}

uint64_t sub_10015607C(void *(*a1)(uint64_t *__return_ptr), uint64_t a2)
{
  return sub_10015609C(a1, a2, (void (*)(void *))sub_10015A350);
}

uint64_t sub_10015609C(void *(*a1)(uint64_t *__return_ptr), uint64_t a2, void (*a3)(void *))
{
  char v4 = a1(&v7);
  a3(v4);
  uint64_t v5 = sub_10096B9D0();
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_10015611C(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  uint64_t v2 = a2;
  uint64_t v3 = a1;
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v4 = 0;
  uint64_t v90 = a1 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 64);
  int64_t v91 = (unint64_t)(v5 + 63) >> 6;
  while (2)
  {
    if (v7)
    {
      unint64_t v8 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      int64_t v93 = v4;
      unint64_t v9 = v8 | (v4 << 6);
    }
    else
    {
      int64_t v10 = v4 + 1;
      if (__OFADD__(v4, 1))
      {
        __break(1u);
LABEL_142:
        __break(1u);
LABEL_143:
        __break(1u);
LABEL_144:
        __break(1u);
LABEL_145:
        __break(1u);
LABEL_146:
        __break(1u);
LABEL_147:
        __break(1u);
LABEL_148:
        __break(1u);
        goto LABEL_149;
      }
      if (v10 >= v91) {
        return 1;
      }
      unint64_t v11 = *(void *)(v90 + 8 * v10);
      int64_t v12 = v4 + 1;
      if (!v11)
      {
        int64_t v12 = v4 + 2;
        if (v4 + 2 >= v91) {
          return 1;
        }
        unint64_t v11 = *(void *)(v90 + 8 * v12);
        if (!v11)
        {
          int64_t v12 = v4 + 3;
          if (v4 + 3 >= v91) {
            return 1;
          }
          unint64_t v11 = *(void *)(v90 + 8 * v12);
          if (!v11)
          {
            int64_t v12 = v4 + 4;
            if (v4 + 4 >= v91) {
              return 1;
            }
            unint64_t v11 = *(void *)(v90 + 8 * v12);
            if (!v11)
            {
              uint64_t v13 = v4 + 5;
              if (v4 + 5 >= v91) {
                return 1;
              }
              unint64_t v11 = *(void *)(v90 + 8 * v13);
              if (!v11)
              {
                while (1)
                {
                  int64_t v12 = v13 + 1;
                  if (__OFADD__(v13, 1)) {
                    break;
                  }
                  if (v12 >= v91) {
                    return 1;
                  }
                  unint64_t v11 = *(void *)(v90 + 8 * v12);
                  ++v13;
                  if (v11) {
                    goto LABEL_25;
                  }
                }
LABEL_149:
                __break(1u);
LABEL_150:
                __break(1u);
LABEL_151:
                __break(1u);
LABEL_152:
                __break(1u);
LABEL_153:
                __break(1u);
LABEL_154:
                __break(1u);
LABEL_155:
                __break(1u);
LABEL_156:
                __break(1u);
LABEL_157:
                __break(1u);
LABEL_158:
                __break(1u);
LABEL_159:
                __break(1u);
LABEL_160:
                __break(1u);
LABEL_161:
                __break(1u);
LABEL_162:
                __break(1u);
LABEL_163:
                __break(1u);
LABEL_164:
                __break(1u);
LABEL_165:
                __break(1u);
              }
              int64_t v12 = v4 + 5;
            }
          }
        }
      }
LABEL_25:
      unint64_t v7 = (v11 - 1) & v11;
      int64_t v93 = v12;
      unint64_t v9 = __clz(__rbit64(v11)) + (v12 << 6);
    }
    uint64_t v14 = 16 * v9;
    long long v15 = (uint64_t *)(*(void *)(v3 + 48) + v14);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v18 = (uint64_t *)(*(void *)(v3 + 56) + v14);
    uint64_t v20 = *v18;
    unint64_t v19 = v18[1];
    swift_bridgeObjectRetain();
    sub_10001EBB0(v20, v19);
    unint64_t v21 = sub_10000DDD0(v16, v17);
    char v23 = v22;
    swift_bridgeObjectRelease();
    if ((v23 & 1) == 0) {
      goto LABEL_139;
    }
    unint64_t v24 = v19 >> 62;
    uint64_t v25 = (uint64_t *)(*(void *)(v2 + 56) + 16 * v21);
    uint64_t v27 = *v25;
    unint64_t v26 = v25[1];
    uint64_t v28 = 0;
    switch(v26 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v27), v27)) {
          goto LABEL_142;
        }
        uint64_t v28 = HIDWORD(v27) - (int)v27;
LABEL_32:
        sub_10001EBB0(v27, v26);
        break;
      case 2uLL:
        uint64_t v30 = *(void *)(v27 + 16);
        uint64_t v29 = *(void *)(v27 + 24);
        uint64_t v28 = v29 - v30;
        if (!__OFSUB__(v29, v30)) {
          goto LABEL_32;
        }
        goto LABEL_143;
      case 3uLL:
        break;
      default:
        uint64_t v28 = BYTE6(v26);
        break;
    }
    switch((int)v24)
    {
      case 1:
        LODWORD(v31) = HIDWORD(v20) - v20;
        if (__OFSUB__(HIDWORD(v20), v20)) {
          goto LABEL_144;
        }
        uint64_t v31 = (int)v31;
LABEL_38:
        if (v28 == v31)
        {
          if (v28 < 1)
          {
LABEL_7:
            sub_10001E9C0(v27, v26);
            sub_10001E9C0(v20, v19);
            uint64_t v3 = a1;
            int64_t v4 = v93;
          }
          else
          {
            switch(v26 >> 62)
            {
              case 1uLL:
                if ((int)v27 > v27 >> 32) {
                  goto LABEL_146;
                }
                uint64_t v40 = (char *)sub_10096A880();
                if (!v40) {
                  goto LABEL_52;
                }
                uint64_t v41 = sub_10096A8A0();
                if (__OFSUB__((int)v27, v41)) {
                  goto LABEL_148;
                }
                v40 += (int)v27 - v41;
LABEL_52:
                uint64_t v2 = a2;
                sub_10096A890();
                if (!v24)
                {
                  __s2[0] = v20;
                  LOWORD(__s2[1]) = v19;
                  BYTE2(__s2[1]) = BYTE2(v19);
                  BYTE3(__s2[1]) = BYTE3(v19);
                  BYTE4(__s2[1]) = BYTE4(v19);
                  BYTE5(__s2[1]) = BYTE5(v19);
                  if (!v40) {
                    goto LABEL_177;
                  }
                  size_t v58 = BYTE6(v19);
                  uint64_t v60 = __s2;
                  uint64_t v59 = v40;
LABEL_120:
                  int v46 = memcmp(v59, v60, v58);
                  goto LABEL_121;
                }
                if (v24 == 1)
                {
                  if (v20 >> 32 < (int)v20) {
                    goto LABEL_158;
                  }
                  swift_retain();
                  uint64_t v42 = (char *)sub_10096A880();
                  if (v42)
                  {
                    uint64_t v43 = sub_10096A8A0();
                    if (__OFSUB__((int)v20, v43)) {
                      goto LABEL_165;
                    }
                    v42 += (int)v20 - v43;
                  }
                  uint64_t v2 = a2;
                  uint64_t v44 = sub_10096A890();
                  if (v44 >= (v20 >> 32) - (int)v20) {
                    size_t v45 = (v20 >> 32) - (int)v20;
                  }
                  else {
                    size_t v45 = v44;
                  }
                  if (!v40) {
                    goto LABEL_167;
                  }
                  uint64_t v3 = a1;
                  if (!v42) {
                    goto LABEL_168;
                  }
                  int v46 = memcmp(v40, v42, v45);
                  sub_10001E9C0(v20, v19);
                  sub_10001E9C0(v27, v26);
                  sub_10001E9C0(v20, v19);
                  goto LABEL_123;
                }
                uint64_t v81 = *(void *)(v20 + 16);
                uint64_t v80 = *(void *)(v20 + 24);
                swift_retain();
                swift_retain();
                uint64_t v82 = (char *)sub_10096A880();
                if (v82)
                {
                  uint64_t v83 = sub_10096A8A0();
                  if (__OFSUB__(v81, v83)) {
                    goto LABEL_164;
                  }
                  v82 += v81 - v83;
                }
                BOOL v34 = __OFSUB__(v80, v81);
                int64_t v84 = v80 - v81;
                if (v34) {
                  goto LABEL_159;
                }
                uint64_t v85 = sub_10096A890();
                if (v85 >= v84) {
                  size_t v86 = v84;
                }
                else {
                  size_t v86 = v85;
                }
                uint64_t v3 = a1;
                if (!v40) {
                  goto LABEL_178;
                }
                uint64_t v2 = a2;
                if (!v82) {
                  goto LABEL_179;
                }
                int v71 = memcmp(v40, v82, v86);
                swift_release();
                swift_release();
                sub_10001E9C0(v27, v26);
                sub_10001E9C0(v20, v19);
LABEL_135:
                int64_t v4 = v93;
                if (v71) {
                  return 0;
                }
                continue;
              case 2uLL:
                uint64_t v47 = *(void *)(v27 + 16);
                swift_retain();
                swift_retain();
                uint64_t v48 = (char *)sub_10096A880();
                if (!v48) {
                  goto LABEL_67;
                }
                uint64_t v49 = sub_10096A8A0();
                if (__OFSUB__(v47, v49)) {
                  goto LABEL_147;
                }
                v48 += v47 - v49;
LABEL_67:
                uint64_t v2 = a2;
                sub_10096A890();
                if (!v24)
                {
                  __s2[0] = v20;
                  LOWORD(__s2[1]) = v19;
                  BYTE2(__s2[1]) = BYTE2(v19);
                  BYTE3(__s2[1]) = BYTE3(v19);
                  BYTE4(__s2[1]) = BYTE4(v19);
                  BYTE5(__s2[1]) = BYTE5(v19);
                  if (!v48) {
                    goto LABEL_174;
                  }
                  int v46 = memcmp(v48, __s2, BYTE6(v19));
                  goto LABEL_106;
                }
                __s1 = v48;
                if (v24 == 1)
                {
                  if (v20 >> 32 < (int)v20) {
                    goto LABEL_152;
                  }
                  swift_retain();
                  uint64_t v50 = (char *)sub_10096A880();
                  if (v50)
                  {
                    uint64_t v51 = sub_10096A8A0();
                    if (__OFSUB__((int)v20, v51)) {
                      goto LABEL_163;
                    }
                    v50 += (int)v20 - v51;
                  }
                  uint64_t v2 = a2;
                  uint64_t v52 = sub_10096A890();
                  if (v52 >= (v20 >> 32) - (int)v20) {
                    size_t v53 = (v20 >> 32) - (int)v20;
                  }
                  else {
                    size_t v53 = v52;
                  }
                  if (!v48) {
                    goto LABEL_169;
                  }
                  if (!v50) {
                    goto LABEL_170;
                  }
                  int v46 = memcmp(v48, v50, v53);
                  sub_10001E9C0(v20, v19);
LABEL_106:
                  swift_release();
                  swift_release();
LABEL_121:
                  sub_10001E9C0(v27, v26);
                  sub_10001E9C0(v20, v19);
LABEL_122:
                  uint64_t v3 = a1;
LABEL_123:
                  int64_t v4 = v93;
                  if (v46) {
                    return 0;
                  }
                  continue;
                }
                uint64_t v73 = *(void *)(v20 + 16);
                uint64_t v72 = *(void *)(v20 + 24);
                swift_retain();
                swift_retain();
                uint64_t v74 = (char *)sub_10096A880();
                if (v74)
                {
                  uint64_t v75 = sub_10096A8A0();
                  if (__OFSUB__(v73, v75)) {
                    goto LABEL_162;
                  }
                  v74 += v73 - v75;
                }
                BOOL v34 = __OFSUB__(v72, v73);
                int64_t v76 = v72 - v73;
                if (v34) {
                  goto LABEL_157;
                }
                uint64_t v77 = sub_10096A890();
                if (v77 >= v76) {
                  size_t v78 = v76;
                }
                else {
                  size_t v78 = v77;
                }
                if (!__s1) {
                  goto LABEL_175;
                }
                uint64_t v2 = a2;
                if (!v74) {
                  goto LABEL_176;
                }
                int v79 = memcmp(__s1, v74, v78);
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                sub_10001E9C0(v27, v26);
                sub_10001E9C0(v20, v19);
                uint64_t v3 = a1;
                int64_t v4 = v93;
                if (v79) {
                  return 0;
                }
                break;
              case 3uLL:
                memset(__s2, 0, 14);
                if (!v24) {
                  goto LABEL_88;
                }
                if (v24 == 1)
                {
                  uint64_t v35 = (v20 >> 32) - (int)v20;
                  if (v20 >> 32 < (int)v20) {
                    goto LABEL_151;
                  }
                  sub_10001EBB0(v20, v19);
                  uint64_t v54 = sub_10096A880();
                  if (!v54) {
                    goto LABEL_171;
                  }
                  uint64_t v37 = v54;
                  uint64_t v55 = sub_10096A8A0();
                  uint64_t v39 = (int)v20 - v55;
                  if (__OFSUB__((int)v20, v55)) {
                    goto LABEL_156;
                  }
LABEL_84:
                  uint64_t v56 = sub_10096A890();
                  if (v56 >= v35) {
                    size_t v57 = v35;
                  }
                  else {
                    size_t v57 = v56;
                  }
                  int v46 = memcmp(__s2, (const void *)(v37 + v39), v57);
                  sub_10001E9C0(v20, v19);
                  sub_10001E9C0(v27, v26);
                  sub_10001E9C0(v20, v19);
                  uint64_t v2 = a2;
                  goto LABEL_122;
                }
                uint64_t v67 = *(void *)(v20 + 16);
                uint64_t v68 = *(void *)(v20 + 24);
                swift_retain();
                swift_retain();
                uint64_t v63 = (char *)sub_10096A880();
                if (v63)
                {
                  uint64_t v69 = sub_10096A8A0();
                  if (__OFSUB__(v67, v69)) {
                    goto LABEL_161;
                  }
                  v63 += v67 - v69;
                }
                int64_t v65 = v68 - v67;
                if (__OFSUB__(v68, v67)) {
                  goto LABEL_154;
                }
                uint64_t v66 = sub_10096A890();
                uint64_t v3 = a1;
                if (!v63) {
                  goto LABEL_173;
                }
LABEL_100:
                if (v66 >= v65) {
                  size_t v70 = v65;
                }
                else {
                  size_t v70 = v66;
                }
                int v71 = memcmp(__s2, v63, v70);
                swift_release();
                swift_release();
                sub_10001E9C0(v27, v26);
                sub_10001E9C0(v20, v19);
                uint64_t v2 = a2;
                goto LABEL_135;
              default:
                __s2[0] = v27;
                LOWORD(__s2[1]) = v26;
                BYTE2(__s2[1]) = BYTE2(v26);
                BYTE3(__s2[1]) = BYTE3(v26);
                BYTE4(__s2[1]) = BYTE4(v26);
                BYTE5(__s2[1]) = BYTE5(v26);
                if (!v24)
                {
LABEL_88:
                  uint64_t v94 = v20;
                  __int16 v95 = v19;
                  char v96 = BYTE2(v19);
                  char v97 = BYTE3(v19);
                  char v98 = BYTE4(v19);
                  size_t v58 = BYTE6(v19);
                  char v99 = BYTE5(v19);
                  uint64_t v59 = __s2;
                  uint64_t v60 = &v94;
                  goto LABEL_120;
                }
                if (v24 == 1)
                {
                  uint64_t v35 = (v20 >> 32) - (int)v20;
                  if (v20 >> 32 < (int)v20) {
                    goto LABEL_150;
                  }
                  sub_10001EBB0(v20, v19);
                  uint64_t v36 = sub_10096A880();
                  if (!v36)
                  {
                    sub_10096A890();
                    __break(1u);
LABEL_167:
                    __break(1u);
LABEL_168:
                    __break(1u);
LABEL_169:
                    __break(1u);
LABEL_170:
                    __break(1u);
LABEL_171:
                    sub_10096A890();
                    __break(1u);
LABEL_172:
                    __break(1u);
LABEL_173:
                    __break(1u);
LABEL_174:
                    __break(1u);
LABEL_175:
                    __break(1u);
LABEL_176:
                    __break(1u);
LABEL_177:
                    __break(1u);
LABEL_178:
                    __break(1u);
LABEL_179:
                    __break(1u);
                    JUMPOUT(0x100156BD8);
                  }
                  uint64_t v37 = v36;
                  uint64_t v38 = sub_10096A8A0();
                  uint64_t v39 = (int)v20 - v38;
                  if (__OFSUB__((int)v20, v38)) {
                    goto LABEL_155;
                  }
                  goto LABEL_84;
                }
                uint64_t v61 = *(void *)(v20 + 16);
                uint64_t v62 = *(void *)(v20 + 24);
                swift_retain();
                swift_retain();
                uint64_t v63 = (char *)sub_10096A880();
                if (v63)
                {
                  uint64_t v64 = sub_10096A8A0();
                  if (__OFSUB__(v61, v64)) {
                    goto LABEL_160;
                  }
                  v63 += v61 - v64;
                }
                int64_t v65 = v62 - v61;
                if (__OFSUB__(v62, v61)) {
                  goto LABEL_153;
                }
                uint64_t v66 = sub_10096A890();
                uint64_t v3 = a1;
                if (!v63) {
                  goto LABEL_172;
                }
                goto LABEL_100;
            }
          }
          continue;
        }
LABEL_138:
        sub_10001E9C0(v27, v26);
LABEL_139:
        sub_10001E9C0(v20, v19);
        return 0;
      case 2:
        uint64_t v33 = *(void *)(v20 + 16);
        uint64_t v32 = *(void *)(v20 + 24);
        BOOL v34 = __OFSUB__(v32, v33);
        uint64_t v31 = v32 - v33;
        if (!v34) {
          goto LABEL_38;
        }
        goto LABEL_145;
      case 3:
        if (!v28) {
          goto LABEL_7;
        }
        goto LABEL_138;
      default:
        uint64_t v31 = BYTE6(v19);
        goto LABEL_38;
    }
  }
}

BOOL _s9libfssync12ItemMetadataV23__derived_struct_equalsySbAC_ACtFZ_0(char *a1, char *a2)
{
  uint64_t v4 = sub_10096B0E0();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v93 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10002B7CC(&qword_100ACDDC8);
  __chkstk_darwin(v8);
  int64_t v10 = (char *)&v93 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10002B7CC((uint64_t *)&unk_100ACB5E0);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v14 = (char *)&v93 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v93 - v16;
  __chkstk_darwin(v15);
  unint64_t v19 = (char *)&v93 - v18;
  if (qword_10097AFD8[*a1] != qword_10097AFD8[*a2]) {
    return 0;
  }
  char v20 = a2[8];
  if (a1[8])
  {
    if (!a2[8]) {
      return 0;
    }
  }
  else
  {
    if (*((_DWORD *)a1 + 1) != *((_DWORD *)a2 + 1)) {
      char v20 = 1;
    }
    if (v20) {
      return 0;
    }
  }
  if (*((unsigned __int16 *)a1 + 5) != *((unsigned __int16 *)a2 + 5)) {
    return 0;
  }
  uint64_t v102 = v5;
  unint64_t v21 = (int *)type metadata accessor for ItemMetadata();
  if ((sub_10096B090() & 1) == 0) {
    return 0;
  }
  if ((sub_10096B090() & 1) == 0) {
    return 0;
  }
  if (a1[v21[9]] != a2[v21[9]]) {
    return 0;
  }
  char v22 = v21;
  if (a1[v21[10]] != a2[v21[10]]
    || a1[v21[11]] != a2[v21[11]]
    || a1[v21[12]] != a2[v21[12]]
    || a1[v21[13]] != a2[v21[13]])
  {
    return 0;
  }
  uint64_t v24 = v21[14];
  uint64_t v25 = (uint64_t *)&a1[v24];
  unint64_t v26 = *(void *)&a1[v24 + 8];
  uint64_t v27 = (uint64_t *)&a2[v24];
  uint64_t v28 = (unsigned int (*)(unint64_t, uint64_t, uint64_t))v27[1];
  unint64_t v101 = v26;
  if (!v26)
  {
    if (v28) {
      return 0;
    }
    goto LABEL_40;
  }
  if (!v28) {
    return 0;
  }
  char v96 = v22;
  uint64_t v99 = *v25;
  uint64_t v100 = v28;
  uint64_t v98 = *v27;
  unint64_t v29 = v101;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  uint64_t v97 = sub_10002C020(v99, v29);
  uint64_t v31 = v30;
  swift_bridgeObjectRelease();
  if (v31)
  {
    if (v97 == 12565487 && v31 == 0xA300000000000000)
    {
      swift_bridgeObjectRelease();
LABEL_27:
      unint64_t v32 = v101;
      swift_bridgeObjectRetain();
      unint64_t v33 = sub_10096BD70();
      uint64_t v99 = sub_1000364D0(v33, v99, v32);
      uint64_t v97 = v34;
      uint64_t v94 = v36;
      uint64_t v95 = v35;
      swift_bridgeObjectRelease();
      uint64_t v99 = sub_10096BD10();
      uint64_t v97 = v37;
      swift_bridgeObjectRelease();
      goto LABEL_29;
    }
    LODWORD(v97) = sub_10096D2D0();
    swift_bridgeObjectRelease();
    if (v97) {
      goto LABEL_27;
    }
  }
  uint64_t v97 = swift_bridgeObjectRetain();
LABEL_29:
  unint64_t v38 = (unint64_t)v100;
  swift_bridgeObjectRetain();
  uint64_t v95 = sub_10002C020(v98, v38);
  uint64_t v40 = v39;
  swift_bridgeObjectRelease();
  if (!v40) {
    goto LABEL_35;
  }
  if (v95 != 12565487 || v40 != 0xA300000000000000)
  {
    LODWORD(v95) = sub_10096D2D0();
    swift_bridgeObjectRelease();
    if (v95) {
      goto LABEL_34;
    }
LABEL_35:
    uint64_t v49 = swift_bridgeObjectRetain();
    uint64_t v47 = v98;
    goto LABEL_36;
  }
  swift_bridgeObjectRelease();
LABEL_34:
  unint64_t v41 = (unint64_t)v100;
  swift_bridgeObjectRetain();
  unint64_t v42 = sub_10096BD70();
  unint64_t v43 = sub_1000364D0(v42, v98, v41);
  uint64_t v94 = v44;
  uint64_t v95 = v43;
  uint64_t v93 = v45;
  uint64_t v98 = v46;
  swift_bridgeObjectRelease();
  uint64_t v47 = sub_10096BD10();
  uint64_t v95 = v48;
  swift_bridgeObjectRelease();
  uint64_t v49 = v95;
LABEL_36:
  if (v99 == v47 && v97 == v49)
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    char v22 = v96;
  }
  else
  {
    LODWORD(v99) = sub_10096D2D0();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    BOOL result = 0;
    char v22 = v96;
    if ((v99 & 1) == 0) {
      return result;
    }
  }
LABEL_40:
  if (a1[v22[15]] != a2[v22[15]] || a1[v22[16]] != a2[v22[16]]) {
    return 0;
  }
  uint64_t v50 = v22[17];
  int v51 = a1[v50];
  int v52 = a2[v50];
  if (v51 == 2)
  {
    if (v52 != 2) {
      return 0;
    }
LABEL_47:
    if (a1[v22[18]] != a2[v22[18]]) {
      return 0;
    }
    uint64_t v54 = v22;
    if (*(void *)&a1[v22[19]] != *(void *)&a2[v22[19]]
      || a1[v22[20]] != a2[v22[20]]
      || a1[v22[21]] != a2[v22[21]]
      || a1[v22[22]] != a2[v22[22]]
      || a1[v22[23]] != a2[v22[23]]
      || a1[v22[24]] != a2[v22[24]]
      || *(void *)&a1[v22[25]] != *(void *)&a2[v22[25]]
      || *(void *)&a1[v22[26]] != *(void *)&a2[v22[26]]
      || a1[v22[27]] != a2[v22[27]]
      || a1[v22[28]] != a2[v22[28]])
    {
      return 0;
    }
    char v96 = v22;
    sub_10002B70C((uint64_t)&a1[v22[29]], (uint64_t)v19, (uint64_t *)&unk_100ACB5E0);
    sub_10002B70C((uint64_t)&a2[v96[29]], (uint64_t)v17, (uint64_t *)&unk_100ACB5E0);
    uint64_t v55 = (uint64_t)&v10[*(int *)(v8 + 48)];
    sub_10002B70C((uint64_t)v19, (uint64_t)v10, (uint64_t *)&unk_100ACB5E0);
    unint64_t v101 = v55;
    sub_10002B70C((uint64_t)v17, v55, (uint64_t *)&unk_100ACB5E0);
    uint64_t v100 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v102 + 48);
    if (v100((unint64_t)v10, 1, v4) == 1)
    {
      sub_10002B770((uint64_t)v17, (uint64_t *)&unk_100ACB5E0);
      sub_10002B770((uint64_t)v19, (uint64_t *)&unk_100ACB5E0);
      if (v100(v101, 1, v4) == 1)
      {
        sub_10002B770((uint64_t)v10, (uint64_t *)&unk_100ACB5E0);
        goto LABEL_65;
      }
    }
    else
    {
      sub_10002B70C((uint64_t)v10, (uint64_t)v14, (uint64_t *)&unk_100ACB5E0);
      if (v100(v101, 1, v4) != 1)
      {
        uint64_t v56 = v102;
        (*(void (**)(char *, unint64_t, uint64_t))(v102 + 32))(v7, v101, v4);
        sub_10015A4A0((unint64_t *)&unk_100AD0BE0, (void (*)(uint64_t))&type metadata accessor for Date);
        LODWORD(v101) = sub_10096BBE0();
        size_t v57 = *(void (**)(char *, uint64_t))(v56 + 8);
        v57(v7, v4);
        sub_10002B770((uint64_t)v17, (uint64_t *)&unk_100ACB5E0);
        sub_10002B770((uint64_t)v19, (uint64_t *)&unk_100ACB5E0);
        v57(v14, v4);
        sub_10002B770((uint64_t)v10, (uint64_t *)&unk_100ACB5E0);
        if ((v101 & 1) == 0) {
          return 0;
        }
LABEL_65:
        uint64_t v58 = v54[30];
        uint64_t v59 = *(void *)&a2[v58];
        if (*(void *)&a1[v58])
        {
          if (!v59) {
            return 0;
          }
          swift_bridgeObjectRetain();
          uint64_t v60 = swift_bridgeObjectRetain();
          char v61 = _s9libfssync4TagsV23__derived_struct_equalsySbAC_ACtFZ_0(v60, v59);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v61 & 1) == 0) {
            return 0;
          }
        }
        else if (v59)
        {
          return 0;
        }
        uint64_t v62 = v54[31];
        uint64_t v63 = &a1[v62];
        char v64 = a1[v62 + 8];
        int64_t v65 = &a2[v62];
        int v66 = a2[v62 + 8];
        if (v64)
        {
          if (!v66) {
            return 0;
          }
        }
        else
        {
          if (*(void *)v63 != *(void *)v65) {
            LOBYTE(v66) = 1;
          }
          if (v66) {
            return 0;
          }
        }
        uint64_t v67 = v54[32];
        uint64_t v68 = *(void *)&a2[v67];
        if (*(void *)&a1[v67])
        {
          if (!v68) {
            return 0;
          }
          swift_bridgeObjectRetain();
          uint64_t v69 = swift_bridgeObjectRetain();
          char v70 = sub_10015611C(v69, v68);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v70 & 1) == 0) {
            return 0;
          }
        }
        else if (v68)
        {
          return 0;
        }
        uint64_t v71 = v54[33];
        uint64_t v72 = *(void *)&a1[v71];
        unint64_t v73 = *(void *)&a1[v71 + 8];
        uint64_t v74 = (uint64_t *)&a2[v71];
        uint64_t v75 = *v74;
        unint64_t v76 = v74[1];
        if (v73 >> 60 == 15)
        {
          if (v76 >> 60 == 15)
          {
LABEL_87:
            uint64_t v78 = v54[34];
            int v79 = &a1[v78];
            char v80 = a1[v78 + 8];
            uint64_t v81 = &a2[v78];
            int v82 = a2[v78 + 8];
            if (v80)
            {
              if (!v82) {
                return 0;
              }
            }
            else
            {
              if (*(void *)v79 != *(void *)v81) {
                LOBYTE(v82) = 1;
              }
              if (v82) {
                return 0;
              }
            }
            if (a1[v54[35]] == a2[v54[35]])
            {
              uint64_t v83 = v54[36];
              int64_t v84 = &a1[v83];
              char v85 = a1[v83 + 4];
              size_t v86 = &a2[v83];
              int v87 = a2[v83 + 4];
              if (v85)
              {
                if (!v87) {
                  return 0;
                }
              }
              else
              {
                if (*(_DWORD *)v84 != *(_DWORD *)v86) {
                  LOBYTE(v87) = 1;
                }
                if (v87) {
                  return 0;
                }
              }
              uint64_t v88 = v54[37];
              int v89 = &a1[v88];
              uint64_t v90 = *(void *)&a1[v88 + 8];
              int64_t v91 = &a2[v88];
              uint64_t v92 = *((void *)v91 + 1);
              if (v90) {
                return v92 && (*(void *)v89 == *(void *)v91 && v90 == v92 || (sub_10096D2D0() & 1) != 0);
              }
              if (!v92) {
                return 1;
              }
            }
            return 0;
          }
        }
        else if (v76 >> 60 != 15)
        {
          sub_10002D830(v72, v73);
          sub_10002D830(v75, v76);
          char v77 = _s9libfssync17FPItemVersionDataV23__derived_struct_equalsySbAC_ACtFZ_0(v72, v73, v75, v76);
          sub_10001E9AC(v75, v76);
          sub_10001E9AC(v72, v73);
          if ((v77 & 1) == 0) {
            return 0;
          }
          goto LABEL_87;
        }
        sub_10002D830(v72, v73);
        sub_10002D830(v75, v76);
        sub_10001E9AC(v72, v73);
        sub_10001E9AC(v75, v76);
        return 0;
      }
      sub_10002B770((uint64_t)v17, (uint64_t *)&unk_100ACB5E0);
      sub_10002B770((uint64_t)v19, (uint64_t *)&unk_100ACB5E0);
      (*(void (**)(char *, uint64_t))(v102 + 8))(v14, v4);
    }
    sub_10002B770((uint64_t)v10, &qword_100ACDDC8);
    return 0;
  }
  BOOL result = 0;
  BOOL v53 = (v51 & 1) == 0;
  if (v52 != 2 && ((v53 ^ v52) & 1) != 0) {
    goto LABEL_47;
  }
  return result;
}